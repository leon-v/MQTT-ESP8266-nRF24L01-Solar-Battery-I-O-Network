

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Aug 06 22:43:08 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    24                           	psect	clrtext,global,class=CODE,delta=2
    25                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    26                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    27                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    28                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    29                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    30                           	psect	text1,local,class=CODE,merge=1,delta=2
    31                           	psect	text2,local,class=CODE,merge=1,delta=2
    32                           	psect	text3,local,class=CODE,merge=1,delta=2
    33                           	psect	text4,local,class=CODE,merge=1,delta=2
    34                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text6,local,class=CODE,merge=1,delta=2
    36                           	psect	text7,local,class=CODE,merge=1,delta=2
    37                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text9,local,class=CODE,merge=1,delta=2
    39                           	psect	text10,local,class=CODE,merge=1,delta=2
    40                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text12,local,class=CODE,merge=1,delta=2
    42                           	psect	text13,local,class=CODE,merge=1,delta=2
    43                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text15,local,class=CODE,merge=1,delta=2
    45                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text17,local,class=CODE,merge=1,delta=2
    47                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text19,local,class=CODE,merge=1,delta=2
    49                           	psect	text20,local,class=CODE,merge=1,delta=2
    50                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text23,local,class=CODE,merge=1,delta=2
    53                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text34,local,class=CODE,merge=1,delta=2
    64                           	psect	text35,local,class=CODE,merge=1,delta=2
    65                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    69                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	intentry,global,class=CODE,delta=2
    72                           	psect	text43,local,class=CODE,merge=1,delta=2
    73                           	psect	text44,local,class=CODE,merge=1,delta=2
    74                           	psect	text45,local,class=CODE,merge=1,delta=2
    75                           	psect	text46,local,class=CODE,merge=1,delta=2
    76                           	psect	text47,local,class=CODE,merge=1,delta=2
    77                           	psect	text48,local,class=CODE,merge=1,delta=2
    78                           	psect	text49,local,class=CODE,merge=1,delta=2
    79                           	psect	text50,local,class=CODE,merge=1,delta=2
    80                           	psect	text51,local,class=CODE,merge=1,delta=2
    81                           	psect	text52,local,class=CODE,merge=1,delta=2
    82                           	psect	text53,local,class=CODE,merge=1,delta=2
    83                           	psect	text54,local,class=CODE,merge=1,delta=2
    84                           	psect	text55,local,class=CODE,merge=1,delta=2
    85                           	psect	text56,local,class=CODE,merge=1,delta=2
    86                           	psect	text57,local,class=CODE,merge=1,delta=2
    87                           	psect	text58,local,class=CODE,merge=1,delta=2
    88                           	dabs	1,0x7E,2
    89  0000                     
    90                           ; Version 2.00
    91                           ; Generated 27/05/2018 GMT
    92                           ; 
    93                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    94                           ; All rights reserved.
    95                           ; 
    96                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    97                           ; 
    98                           ; Redistribution and use in source and binary forms, with or without modification, are
    99                           ; permitted provided that the following conditions are met:
   100                           ; 
   101                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   102                           ;        conditions and the following disclaimer.
   103                           ; 
   104                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   105                           ;        of conditions and the following disclaimer in the documentation and/or other
   106                           ;        materials provided with the distribution.
   107                           ; 
   108                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   109                           ;        software without specific prior written permission.
   110                           ; 
   111                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   112                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   113                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   114                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   115                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   116                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   117                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   118                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   119                           ; 
   120                           ; 
   121                           ; Code-generator required, PIC16LF18325 Definitions
   122                           ; 
   123                           ; SFR Addresses
   124  0000                     	;# 
   125  0001                     	;# 
   126  0002                     	;# 
   127  0003                     	;# 
   128  0004                     	;# 
   129  0005                     	;# 
   130  0006                     	;# 
   131  0007                     	;# 
   132  0008                     	;# 
   133  0009                     	;# 
   134  000A                     	;# 
   135  000B                     	;# 
   136  000C                     	;# 
   137  000E                     	;# 
   138  0010                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0013                     	;# 
   142  0014                     	;# 
   143  0015                     	;# 
   144  0015                     	;# 
   145  0016                     	;# 
   146  0016                     	;# 
   147  0017                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  0019                     	;# 
   151  001A                     	;# 
   152  001B                     	;# 
   153  001C                     	;# 
   154  001D                     	;# 
   155  001E                     	;# 
   156  001F                     	;# 
   157  008C                     	;# 
   158  008E                     	;# 
   159  0090                     	;# 
   160  0091                     	;# 
   161  0092                     	;# 
   162  0093                     	;# 
   163  0094                     	;# 
   164  0097                     	;# 
   165  009B                     	;# 
   166  009B                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  009F                     	;# 
   171  010C                     	;# 
   172  010E                     	;# 
   173  0111                     	;# 
   174  0112                     	;# 
   175  0113                     	;# 
   176  0114                     	;# 
   177  0115                     	;# 
   178  0116                     	;# 
   179  0117                     	;# 
   180  0118                     	;# 
   181  0119                     	;# 
   182  018C                     	;# 
   183  018E                     	;# 
   184  0199                     	;# 
   185  0199                     	;# 
   186  0199                     	;# 
   187  019A                     	;# 
   188  019A                     	;# 
   189  019A                     	;# 
   190  019B                     	;# 
   191  019B                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019B                     	;# 
   195  019C                     	;# 
   196  019C                     	;# 
   197  019C                     	;# 
   198  019D                     	;# 
   199  019D                     	;# 
   200  019D                     	;# 
   201  019E                     	;# 
   202  019E                     	;# 
   203  019E                     	;# 
   204  019F                     	;# 
   205  019F                     	;# 
   206  019F                     	;# 
   207  019F                     	;# 
   208  019F                     	;# 
   209  020C                     	;# 
   210  020E                     	;# 
   211  0211                     	;# 
   212  0211                     	;# 
   213  0212                     	;# 
   214  0212                     	;# 
   215  0213                     	;# 
   216  0213                     	;# 
   217  0214                     	;# 
   218  0214                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0216                     	;# 
   224  0216                     	;# 
   225  0217                     	;# 
   226  0217                     	;# 
   227  0219                     	;# 
   228  021A                     	;# 
   229  021B                     	;# 
   230  021C                     	;# 
   231  021D                     	;# 
   232  021D                     	;# 
   233  021E                     	;# 
   234  021F                     	;# 
   235  028C                     	;# 
   236  028E                     	;# 
   237  0291                     	;# 
   238  0291                     	;# 
   239  0292                     	;# 
   240  0293                     	;# 
   241  0294                     	;# 
   242  0295                     	;# 
   243  0295                     	;# 
   244  0296                     	;# 
   245  0297                     	;# 
   246  0298                     	;# 
   247  029F                     	;# 
   248  030C                     	;# 
   249  030E                     	;# 
   250  0311                     	;# 
   251  0311                     	;# 
   252  0312                     	;# 
   253  0313                     	;# 
   254  0314                     	;# 
   255  0315                     	;# 
   256  0315                     	;# 
   257  0316                     	;# 
   258  0317                     	;# 
   259  0318                     	;# 
   260  038C                     	;# 
   261  038E                     	;# 
   262  0391                     	;# 
   263  0392                     	;# 
   264  0393                     	;# 
   265  0397                     	;# 
   266  0398                     	;# 
   267  0399                     	;# 
   268  039A                     	;# 
   269  039C                     	;# 
   270  039D                     	;# 
   271  039E                     	;# 
   272  039F                     	;# 
   273  0411                     	;# 
   274  0411                     	;# 
   275  0412                     	;# 
   276  0413                     	;# 
   277  0414                     	;# 
   278  0415                     	;# 
   279  0416                     	;# 
   280  0417                     	;# 
   281  0418                     	;# 
   282  0418                     	;# 
   283  0419                     	;# 
   284  041A                     	;# 
   285  041B                     	;# 
   286  041C                     	;# 
   287  041D                     	;# 
   288  041E                     	;# 
   289  041F                     	;# 
   290  0498                     	;# 
   291  0498                     	;# 
   292  0499                     	;# 
   293  049A                     	;# 
   294  049B                     	;# 
   295  049B                     	;# 
   296  049C                     	;# 
   297  049D                     	;# 
   298  049E                     	;# 
   299  049F                     	;# 
   300  0617                     	;# 
   301  0618                     	;# 
   302  0619                     	;# 
   303  0619                     	;# 
   304  061A                     	;# 
   305  061B                     	;# 
   306  061C                     	;# 
   307  061C                     	;# 
   308  061F                     	;# 
   309  0691                     	;# 
   310  0692                     	;# 
   311  0693                     	;# 
   312  0694                     	;# 
   313  0695                     	;# 
   314  0696                     	;# 
   315  0697                     	;# 
   316  0698                     	;# 
   317  0699                     	;# 
   318  0711                     	;# 
   319  0712                     	;# 
   320  0713                     	;# 
   321  0714                     	;# 
   322  0715                     	;# 
   323  0716                     	;# 
   324  0717                     	;# 
   325  0718                     	;# 
   326  0719                     	;# 
   327  0891                     	;# 
   328  0891                     	;# 
   329  0891                     	;# 
   330  0891                     	;# 
   331  0891                     	;# 
   332  0891                     	;# 
   333  0892                     	;# 
   334  0892                     	;# 
   335  0892                     	;# 
   336  0893                     	;# 
   337  0893                     	;# 
   338  0893                     	;# 
   339  0893                     	;# 
   340  0893                     	;# 
   341  0893                     	;# 
   342  0894                     	;# 
   343  0894                     	;# 
   344  0894                     	;# 
   345  0895                     	;# 
   346  0895                     	;# 
   347  0895                     	;# 
   348  0896                     	;# 
   349  0896                     	;# 
   350  0896                     	;# 
   351  089B                     	;# 
   352  0911                     	;# 
   353  0912                     	;# 
   354  0913                     	;# 
   355  0914                     	;# 
   356  0915                     	;# 
   357  0916                     	;# 
   358  0918                     	;# 
   359  0919                     	;# 
   360  091A                     	;# 
   361  091B                     	;# 
   362  091C                     	;# 
   363  091D                     	;# 
   364  091E                     	;# 
   365  091F                     	;# 
   366  0E0F                     	;# 
   367  0E10                     	;# 
   368  0E11                     	;# 
   369  0E12                     	;# 
   370  0E13                     	;# 
   371  0E14                     	;# 
   372  0E15                     	;# 
   373  0E16                     	;# 
   374  0E17                     	;# 
   375  0E18                     	;# 
   376  0E19                     	;# 
   377  0E1A                     	;# 
   378  0E1B                     	;# 
   379  0E1C                     	;# 
   380  0E1D                     	;# 
   381  0E1E                     	;# 
   382  0E1F                     	;# 
   383  0E20                     	;# 
   384  0E21                     	;# 
   385  0E22                     	;# 
   386  0E24                     	;# 
   387  0E25                     	;# 
   388  0E28                     	;# 
   389  0E29                     	;# 
   390  0E2A                     	;# 
   391  0E2B                     	;# 
   392  0E2C                     	;# 
   393  0E2D                     	;# 
   394  0E2E                     	;# 
   395  0E2F                     	;# 
   396  0E90                     	;# 
   397  0E91                     	;# 
   398  0E92                     	;# 
   399  0E94                     	;# 
   400  0E95                     	;# 
   401  0EA0                     	;# 
   402  0EA1                     	;# 
   403  0EA2                     	;# 
   404  0EA3                     	;# 
   405  0EA4                     	;# 
   406  0EA5                     	;# 
   407  0F0F                     	;# 
   408  0F10                     	;# 
   409  0F11                     	;# 
   410  0F12                     	;# 
   411  0F13                     	;# 
   412  0F14                     	;# 
   413  0F15                     	;# 
   414  0F16                     	;# 
   415  0F17                     	;# 
   416  0F18                     	;# 
   417  0F19                     	;# 
   418  0F1A                     	;# 
   419  0F1B                     	;# 
   420  0F1C                     	;# 
   421  0F1D                     	;# 
   422  0F1E                     	;# 
   423  0F1F                     	;# 
   424  0F20                     	;# 
   425  0F21                     	;# 
   426  0F22                     	;# 
   427  0F23                     	;# 
   428  0F24                     	;# 
   429  0F25                     	;# 
   430  0F26                     	;# 
   431  0F27                     	;# 
   432  0F28                     	;# 
   433  0F29                     	;# 
   434  0F2A                     	;# 
   435  0F2B                     	;# 
   436  0F2C                     	;# 
   437  0F2D                     	;# 
   438  0F2E                     	;# 
   439  0F2F                     	;# 
   440  0F30                     	;# 
   441  0F31                     	;# 
   442  0F32                     	;# 
   443  0F33                     	;# 
   444  0F34                     	;# 
   445  0F35                     	;# 
   446  0F36                     	;# 
   447  0F37                     	;# 
   448  0FE4                     	;# 
   449  0FE5                     	;# 
   450  0FE6                     	;# 
   451  0FE7                     	;# 
   452  0FE8                     	;# 
   453  0FE9                     	;# 
   454  0FEA                     	;# 
   455  0FEB                     	;# 
   456  0FED                     	;# 
   457  0FEE                     	;# 
   458  0FEF                     	;# 
   459  0000                     	;# 
   460  0001                     	;# 
   461  0002                     	;# 
   462  0003                     	;# 
   463  0004                     	;# 
   464  0005                     	;# 
   465  0006                     	;# 
   466  0007                     	;# 
   467  0008                     	;# 
   468  0009                     	;# 
   469  000A                     	;# 
   470  000B                     	;# 
   471  000C                     	;# 
   472  000E                     	;# 
   473  0010                     	;# 
   474  0011                     	;# 
   475  0012                     	;# 
   476  0013                     	;# 
   477  0014                     	;# 
   478  0015                     	;# 
   479  0015                     	;# 
   480  0016                     	;# 
   481  0016                     	;# 
   482  0017                     	;# 
   483  0018                     	;# 
   484  0019                     	;# 
   485  0019                     	;# 
   486  001A                     	;# 
   487  001B                     	;# 
   488  001C                     	;# 
   489  001D                     	;# 
   490  001E                     	;# 
   491  001F                     	;# 
   492  008C                     	;# 
   493  008E                     	;# 
   494  0090                     	;# 
   495  0091                     	;# 
   496  0092                     	;# 
   497  0093                     	;# 
   498  0094                     	;# 
   499  0097                     	;# 
   500  009B                     	;# 
   501  009B                     	;# 
   502  009C                     	;# 
   503  009D                     	;# 
   504  009E                     	;# 
   505  009F                     	;# 
   506  010C                     	;# 
   507  010E                     	;# 
   508  0111                     	;# 
   509  0112                     	;# 
   510  0113                     	;# 
   511  0114                     	;# 
   512  0115                     	;# 
   513  0116                     	;# 
   514  0117                     	;# 
   515  0118                     	;# 
   516  0119                     	;# 
   517  018C                     	;# 
   518  018E                     	;# 
   519  0199                     	;# 
   520  0199                     	;# 
   521  0199                     	;# 
   522  019A                     	;# 
   523  019A                     	;# 
   524  019A                     	;# 
   525  019B                     	;# 
   526  019B                     	;# 
   527  019B                     	;# 
   528  019B                     	;# 
   529  019B                     	;# 
   530  019C                     	;# 
   531  019C                     	;# 
   532  019C                     	;# 
   533  019D                     	;# 
   534  019D                     	;# 
   535  019D                     	;# 
   536  019E                     	;# 
   537  019E                     	;# 
   538  019E                     	;# 
   539  019F                     	;# 
   540  019F                     	;# 
   541  019F                     	;# 
   542  019F                     	;# 
   543  019F                     	;# 
   544  020C                     	;# 
   545  020E                     	;# 
   546  0211                     	;# 
   547  0211                     	;# 
   548  0212                     	;# 
   549  0212                     	;# 
   550  0213                     	;# 
   551  0213                     	;# 
   552  0214                     	;# 
   553  0214                     	;# 
   554  0215                     	;# 
   555  0215                     	;# 
   556  0215                     	;# 
   557  0215                     	;# 
   558  0216                     	;# 
   559  0216                     	;# 
   560  0217                     	;# 
   561  0217                     	;# 
   562  0219                     	;# 
   563  021A                     	;# 
   564  021B                     	;# 
   565  021C                     	;# 
   566  021D                     	;# 
   567  021D                     	;# 
   568  021E                     	;# 
   569  021F                     	;# 
   570  028C                     	;# 
   571  028E                     	;# 
   572  0291                     	;# 
   573  0291                     	;# 
   574  0292                     	;# 
   575  0293                     	;# 
   576  0294                     	;# 
   577  0295                     	;# 
   578  0295                     	;# 
   579  0296                     	;# 
   580  0297                     	;# 
   581  0298                     	;# 
   582  029F                     	;# 
   583  030C                     	;# 
   584  030E                     	;# 
   585  0311                     	;# 
   586  0311                     	;# 
   587  0312                     	;# 
   588  0313                     	;# 
   589  0314                     	;# 
   590  0315                     	;# 
   591  0315                     	;# 
   592  0316                     	;# 
   593  0317                     	;# 
   594  0318                     	;# 
   595  038C                     	;# 
   596  038E                     	;# 
   597  0391                     	;# 
   598  0392                     	;# 
   599  0393                     	;# 
   600  0397                     	;# 
   601  0398                     	;# 
   602  0399                     	;# 
   603  039A                     	;# 
   604  039C                     	;# 
   605  039D                     	;# 
   606  039E                     	;# 
   607  039F                     	;# 
   608  0411                     	;# 
   609  0411                     	;# 
   610  0412                     	;# 
   611  0413                     	;# 
   612  0414                     	;# 
   613  0415                     	;# 
   614  0416                     	;# 
   615  0417                     	;# 
   616  0418                     	;# 
   617  0418                     	;# 
   618  0419                     	;# 
   619  041A                     	;# 
   620  041B                     	;# 
   621  041C                     	;# 
   622  041D                     	;# 
   623  041E                     	;# 
   624  041F                     	;# 
   625  0498                     	;# 
   626  0498                     	;# 
   627  0499                     	;# 
   628  049A                     	;# 
   629  049B                     	;# 
   630  049B                     	;# 
   631  049C                     	;# 
   632  049D                     	;# 
   633  049E                     	;# 
   634  049F                     	;# 
   635  0617                     	;# 
   636  0618                     	;# 
   637  0619                     	;# 
   638  0619                     	;# 
   639  061A                     	;# 
   640  061B                     	;# 
   641  061C                     	;# 
   642  061C                     	;# 
   643  061F                     	;# 
   644  0691                     	;# 
   645  0692                     	;# 
   646  0693                     	;# 
   647  0694                     	;# 
   648  0695                     	;# 
   649  0696                     	;# 
   650  0697                     	;# 
   651  0698                     	;# 
   652  0699                     	;# 
   653  0711                     	;# 
   654  0712                     	;# 
   655  0713                     	;# 
   656  0714                     	;# 
   657  0715                     	;# 
   658  0716                     	;# 
   659  0717                     	;# 
   660  0718                     	;# 
   661  0719                     	;# 
   662  0891                     	;# 
   663  0891                     	;# 
   664  0891                     	;# 
   665  0891                     	;# 
   666  0891                     	;# 
   667  0891                     	;# 
   668  0892                     	;# 
   669  0892                     	;# 
   670  0892                     	;# 
   671  0893                     	;# 
   672  0893                     	;# 
   673  0893                     	;# 
   674  0893                     	;# 
   675  0893                     	;# 
   676  0893                     	;# 
   677  0894                     	;# 
   678  0894                     	;# 
   679  0894                     	;# 
   680  0895                     	;# 
   681  0895                     	;# 
   682  0895                     	;# 
   683  0896                     	;# 
   684  0896                     	;# 
   685  0896                     	;# 
   686  089B                     	;# 
   687  0911                     	;# 
   688  0912                     	;# 
   689  0913                     	;# 
   690  0914                     	;# 
   691  0915                     	;# 
   692  0916                     	;# 
   693  0918                     	;# 
   694  0919                     	;# 
   695  091A                     	;# 
   696  091B                     	;# 
   697  091C                     	;# 
   698  091D                     	;# 
   699  091E                     	;# 
   700  091F                     	;# 
   701  0E0F                     	;# 
   702  0E10                     	;# 
   703  0E11                     	;# 
   704  0E12                     	;# 
   705  0E13                     	;# 
   706  0E14                     	;# 
   707  0E15                     	;# 
   708  0E16                     	;# 
   709  0E17                     	;# 
   710  0E18                     	;# 
   711  0E19                     	;# 
   712  0E1A                     	;# 
   713  0E1B                     	;# 
   714  0E1C                     	;# 
   715  0E1D                     	;# 
   716  0E1E                     	;# 
   717  0E1F                     	;# 
   718  0E20                     	;# 
   719  0E21                     	;# 
   720  0E22                     	;# 
   721  0E24                     	;# 
   722  0E25                     	;# 
   723  0E28                     	;# 
   724  0E29                     	;# 
   725  0E2A                     	;# 
   726  0E2B                     	;# 
   727  0E2C                     	;# 
   728  0E2D                     	;# 
   729  0E2E                     	;# 
   730  0E2F                     	;# 
   731  0E90                     	;# 
   732  0E91                     	;# 
   733  0E92                     	;# 
   734  0E94                     	;# 
   735  0E95                     	;# 
   736  0EA0                     	;# 
   737  0EA1                     	;# 
   738  0EA2                     	;# 
   739  0EA3                     	;# 
   740  0EA4                     	;# 
   741  0EA5                     	;# 
   742  0F0F                     	;# 
   743  0F10                     	;# 
   744  0F11                     	;# 
   745  0F12                     	;# 
   746  0F13                     	;# 
   747  0F14                     	;# 
   748  0F15                     	;# 
   749  0F16                     	;# 
   750  0F17                     	;# 
   751  0F18                     	;# 
   752  0F19                     	;# 
   753  0F1A                     	;# 
   754  0F1B                     	;# 
   755  0F1C                     	;# 
   756  0F1D                     	;# 
   757  0F1E                     	;# 
   758  0F1F                     	;# 
   759  0F20                     	;# 
   760  0F21                     	;# 
   761  0F22                     	;# 
   762  0F23                     	;# 
   763  0F24                     	;# 
   764  0F25                     	;# 
   765  0F26                     	;# 
   766  0F27                     	;# 
   767  0F28                     	;# 
   768  0F29                     	;# 
   769  0F2A                     	;# 
   770  0F2B                     	;# 
   771  0F2C                     	;# 
   772  0F2D                     	;# 
   773  0F2E                     	;# 
   774  0F2F                     	;# 
   775  0F30                     	;# 
   776  0F31                     	;# 
   777  0F32                     	;# 
   778  0F33                     	;# 
   779  0F34                     	;# 
   780  0F35                     	;# 
   781  0F36                     	;# 
   782  0F37                     	;# 
   783  0FE4                     	;# 
   784  0FE5                     	;# 
   785  0FE6                     	;# 
   786  0FE7                     	;# 
   787  0FE8                     	;# 
   788  0FE9                     	;# 
   789  0FEA                     	;# 
   790  0FEB                     	;# 
   791  0FED                     	;# 
   792  0FEE                     	;# 
   793  0FEF                     	;# 
   794  0000                     	;# 
   795  0001                     	;# 
   796  0002                     	;# 
   797  0003                     	;# 
   798  0004                     	;# 
   799  0005                     	;# 
   800  0006                     	;# 
   801  0007                     	;# 
   802  0008                     	;# 
   803  0009                     	;# 
   804  000A                     	;# 
   805  000B                     	;# 
   806  000C                     	;# 
   807  000E                     	;# 
   808  0010                     	;# 
   809  0011                     	;# 
   810  0012                     	;# 
   811  0013                     	;# 
   812  0014                     	;# 
   813  0015                     	;# 
   814  0015                     	;# 
   815  0016                     	;# 
   816  0016                     	;# 
   817  0017                     	;# 
   818  0018                     	;# 
   819  0019                     	;# 
   820  0019                     	;# 
   821  001A                     	;# 
   822  001B                     	;# 
   823  001C                     	;# 
   824  001D                     	;# 
   825  001E                     	;# 
   826  001F                     	;# 
   827  008C                     	;# 
   828  008E                     	;# 
   829  0090                     	;# 
   830  0091                     	;# 
   831  0092                     	;# 
   832  0093                     	;# 
   833  0094                     	;# 
   834  0097                     	;# 
   835  009B                     	;# 
   836  009B                     	;# 
   837  009C                     	;# 
   838  009D                     	;# 
   839  009E                     	;# 
   840  009F                     	;# 
   841  010C                     	;# 
   842  010E                     	;# 
   843  0111                     	;# 
   844  0112                     	;# 
   845  0113                     	;# 
   846  0114                     	;# 
   847  0115                     	;# 
   848  0116                     	;# 
   849  0117                     	;# 
   850  0118                     	;# 
   851  0119                     	;# 
   852  018C                     	;# 
   853  018E                     	;# 
   854  0199                     	;# 
   855  0199                     	;# 
   856  0199                     	;# 
   857  019A                     	;# 
   858  019A                     	;# 
   859  019A                     	;# 
   860  019B                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019C                     	;# 
   866  019C                     	;# 
   867  019C                     	;# 
   868  019D                     	;# 
   869  019D                     	;# 
   870  019D                     	;# 
   871  019E                     	;# 
   872  019E                     	;# 
   873  019E                     	;# 
   874  019F                     	;# 
   875  019F                     	;# 
   876  019F                     	;# 
   877  019F                     	;# 
   878  019F                     	;# 
   879  020C                     	;# 
   880  020E                     	;# 
   881  0211                     	;# 
   882  0211                     	;# 
   883  0212                     	;# 
   884  0212                     	;# 
   885  0213                     	;# 
   886  0213                     	;# 
   887  0214                     	;# 
   888  0214                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0215                     	;# 
   893  0216                     	;# 
   894  0216                     	;# 
   895  0217                     	;# 
   896  0217                     	;# 
   897  0219                     	;# 
   898  021A                     	;# 
   899  021B                     	;# 
   900  021C                     	;# 
   901  021D                     	;# 
   902  021D                     	;# 
   903  021E                     	;# 
   904  021F                     	;# 
   905  028C                     	;# 
   906  028E                     	;# 
   907  0291                     	;# 
   908  0291                     	;# 
   909  0292                     	;# 
   910  0293                     	;# 
   911  0294                     	;# 
   912  0295                     	;# 
   913  0295                     	;# 
   914  0296                     	;# 
   915  0297                     	;# 
   916  0298                     	;# 
   917  029F                     	;# 
   918  030C                     	;# 
   919  030E                     	;# 
   920  0311                     	;# 
   921  0311                     	;# 
   922  0312                     	;# 
   923  0313                     	;# 
   924  0314                     	;# 
   925  0315                     	;# 
   926  0315                     	;# 
   927  0316                     	;# 
   928  0317                     	;# 
   929  0318                     	;# 
   930  038C                     	;# 
   931  038E                     	;# 
   932  0391                     	;# 
   933  0392                     	;# 
   934  0393                     	;# 
   935  0397                     	;# 
   936  0398                     	;# 
   937  0399                     	;# 
   938  039A                     	;# 
   939  039C                     	;# 
   940  039D                     	;# 
   941  039E                     	;# 
   942  039F                     	;# 
   943  0411                     	;# 
   944  0411                     	;# 
   945  0412                     	;# 
   946  0413                     	;# 
   947  0414                     	;# 
   948  0415                     	;# 
   949  0416                     	;# 
   950  0417                     	;# 
   951  0418                     	;# 
   952  0418                     	;# 
   953  0419                     	;# 
   954  041A                     	;# 
   955  041B                     	;# 
   956  041C                     	;# 
   957  041D                     	;# 
   958  041E                     	;# 
   959  041F                     	;# 
   960  0498                     	;# 
   961  0498                     	;# 
   962  0499                     	;# 
   963  049A                     	;# 
   964  049B                     	;# 
   965  049B                     	;# 
   966  049C                     	;# 
   967  049D                     	;# 
   968  049E                     	;# 
   969  049F                     	;# 
   970  0617                     	;# 
   971  0618                     	;# 
   972  0619                     	;# 
   973  0619                     	;# 
   974  061A                     	;# 
   975  061B                     	;# 
   976  061C                     	;# 
   977  061C                     	;# 
   978  061F                     	;# 
   979  0691                     	;# 
   980  0692                     	;# 
   981  0693                     	;# 
   982  0694                     	;# 
   983  0695                     	;# 
   984  0696                     	;# 
   985  0697                     	;# 
   986  0698                     	;# 
   987  0699                     	;# 
   988  0711                     	;# 
   989  0712                     	;# 
   990  0713                     	;# 
   991  0714                     	;# 
   992  0715                     	;# 
   993  0716                     	;# 
   994  0717                     	;# 
   995  0718                     	;# 
   996  0719                     	;# 
   997  0891                     	;# 
   998  0891                     	;# 
   999  0891                     	;# 
  1000  0891                     	;# 
  1001  0891                     	;# 
  1002  0891                     	;# 
  1003  0892                     	;# 
  1004  0892                     	;# 
  1005  0892                     	;# 
  1006  0893                     	;# 
  1007  0893                     	;# 
  1008  0893                     	;# 
  1009  0893                     	;# 
  1010  0893                     	;# 
  1011  0893                     	;# 
  1012  0894                     	;# 
  1013  0894                     	;# 
  1014  0894                     	;# 
  1015  0895                     	;# 
  1016  0895                     	;# 
  1017  0895                     	;# 
  1018  0896                     	;# 
  1019  0896                     	;# 
  1020  0896                     	;# 
  1021  089B                     	;# 
  1022  0911                     	;# 
  1023  0912                     	;# 
  1024  0913                     	;# 
  1025  0914                     	;# 
  1026  0915                     	;# 
  1027  0916                     	;# 
  1028  0918                     	;# 
  1029  0919                     	;# 
  1030  091A                     	;# 
  1031  091B                     	;# 
  1032  091C                     	;# 
  1033  091D                     	;# 
  1034  091E                     	;# 
  1035  091F                     	;# 
  1036  0E0F                     	;# 
  1037  0E10                     	;# 
  1038  0E11                     	;# 
  1039  0E12                     	;# 
  1040  0E13                     	;# 
  1041  0E14                     	;# 
  1042  0E15                     	;# 
  1043  0E16                     	;# 
  1044  0E17                     	;# 
  1045  0E18                     	;# 
  1046  0E19                     	;# 
  1047  0E1A                     	;# 
  1048  0E1B                     	;# 
  1049  0E1C                     	;# 
  1050  0E1D                     	;# 
  1051  0E1E                     	;# 
  1052  0E1F                     	;# 
  1053  0E20                     	;# 
  1054  0E21                     	;# 
  1055  0E22                     	;# 
  1056  0E24                     	;# 
  1057  0E25                     	;# 
  1058  0E28                     	;# 
  1059  0E29                     	;# 
  1060  0E2A                     	;# 
  1061  0E2B                     	;# 
  1062  0E2C                     	;# 
  1063  0E2D                     	;# 
  1064  0E2E                     	;# 
  1065  0E2F                     	;# 
  1066  0E90                     	;# 
  1067  0E91                     	;# 
  1068  0E92                     	;# 
  1069  0E94                     	;# 
  1070  0E95                     	;# 
  1071  0EA0                     	;# 
  1072  0EA1                     	;# 
  1073  0EA2                     	;# 
  1074  0EA3                     	;# 
  1075  0EA4                     	;# 
  1076  0EA5                     	;# 
  1077  0F0F                     	;# 
  1078  0F10                     	;# 
  1079  0F11                     	;# 
  1080  0F12                     	;# 
  1081  0F13                     	;# 
  1082  0F14                     	;# 
  1083  0F15                     	;# 
  1084  0F16                     	;# 
  1085  0F17                     	;# 
  1086  0F18                     	;# 
  1087  0F19                     	;# 
  1088  0F1A                     	;# 
  1089  0F1B                     	;# 
  1090  0F1C                     	;# 
  1091  0F1D                     	;# 
  1092  0F1E                     	;# 
  1093  0F1F                     	;# 
  1094  0F20                     	;# 
  1095  0F21                     	;# 
  1096  0F22                     	;# 
  1097  0F23                     	;# 
  1098  0F24                     	;# 
  1099  0F25                     	;# 
  1100  0F26                     	;# 
  1101  0F27                     	;# 
  1102  0F28                     	;# 
  1103  0F29                     	;# 
  1104  0F2A                     	;# 
  1105  0F2B                     	;# 
  1106  0F2C                     	;# 
  1107  0F2D                     	;# 
  1108  0F2E                     	;# 
  1109  0F2F                     	;# 
  1110  0F30                     	;# 
  1111  0F31                     	;# 
  1112  0F32                     	;# 
  1113  0F33                     	;# 
  1114  0F34                     	;# 
  1115  0F35                     	;# 
  1116  0F36                     	;# 
  1117  0F37                     	;# 
  1118  0FE4                     	;# 
  1119  0FE5                     	;# 
  1120  0FE6                     	;# 
  1121  0FE7                     	;# 
  1122  0FE8                     	;# 
  1123  0FE9                     	;# 
  1124  0FEA                     	;# 
  1125  0FEB                     	;# 
  1126  0FED                     	;# 
  1127  0FEE                     	;# 
  1128  0FEF                     	;# 
  1129  0000                     	;# 
  1130  0001                     	;# 
  1131  0002                     	;# 
  1132  0003                     	;# 
  1133  0004                     	;# 
  1134  0005                     	;# 
  1135  0006                     	;# 
  1136  0007                     	;# 
  1137  0008                     	;# 
  1138  0009                     	;# 
  1139  000A                     	;# 
  1140  000B                     	;# 
  1141  000C                     	;# 
  1142  000E                     	;# 
  1143  0010                     	;# 
  1144  0011                     	;# 
  1145  0012                     	;# 
  1146  0013                     	;# 
  1147  0014                     	;# 
  1148  0015                     	;# 
  1149  0015                     	;# 
  1150  0016                     	;# 
  1151  0016                     	;# 
  1152  0017                     	;# 
  1153  0018                     	;# 
  1154  0019                     	;# 
  1155  0019                     	;# 
  1156  001A                     	;# 
  1157  001B                     	;# 
  1158  001C                     	;# 
  1159  001D                     	;# 
  1160  001E                     	;# 
  1161  001F                     	;# 
  1162  008C                     	;# 
  1163  008E                     	;# 
  1164  0090                     	;# 
  1165  0091                     	;# 
  1166  0092                     	;# 
  1167  0093                     	;# 
  1168  0094                     	;# 
  1169  0097                     	;# 
  1170  009B                     	;# 
  1171  009B                     	;# 
  1172  009C                     	;# 
  1173  009D                     	;# 
  1174  009E                     	;# 
  1175  009F                     	;# 
  1176  010C                     	;# 
  1177  010E                     	;# 
  1178  0111                     	;# 
  1179  0112                     	;# 
  1180  0113                     	;# 
  1181  0114                     	;# 
  1182  0115                     	;# 
  1183  0116                     	;# 
  1184  0117                     	;# 
  1185  0118                     	;# 
  1186  0119                     	;# 
  1187  018C                     	;# 
  1188  018E                     	;# 
  1189  0199                     	;# 
  1190  0199                     	;# 
  1191  0199                     	;# 
  1192  019A                     	;# 
  1193  019A                     	;# 
  1194  019A                     	;# 
  1195  019B                     	;# 
  1196  019B                     	;# 
  1197  019B                     	;# 
  1198  019B                     	;# 
  1199  019B                     	;# 
  1200  019C                     	;# 
  1201  019C                     	;# 
  1202  019C                     	;# 
  1203  019D                     	;# 
  1204  019D                     	;# 
  1205  019D                     	;# 
  1206  019E                     	;# 
  1207  019E                     	;# 
  1208  019E                     	;# 
  1209  019F                     	;# 
  1210  019F                     	;# 
  1211  019F                     	;# 
  1212  019F                     	;# 
  1213  019F                     	;# 
  1214  020C                     	;# 
  1215  020E                     	;# 
  1216  0211                     	;# 
  1217  0211                     	;# 
  1218  0212                     	;# 
  1219  0212                     	;# 
  1220  0213                     	;# 
  1221  0213                     	;# 
  1222  0214                     	;# 
  1223  0214                     	;# 
  1224  0215                     	;# 
  1225  0215                     	;# 
  1226  0215                     	;# 
  1227  0215                     	;# 
  1228  0216                     	;# 
  1229  0216                     	;# 
  1230  0217                     	;# 
  1231  0217                     	;# 
  1232  0219                     	;# 
  1233  021A                     	;# 
  1234  021B                     	;# 
  1235  021C                     	;# 
  1236  021D                     	;# 
  1237  021D                     	;# 
  1238  021E                     	;# 
  1239  021F                     	;# 
  1240  028C                     	;# 
  1241  028E                     	;# 
  1242  0291                     	;# 
  1243  0291                     	;# 
  1244  0292                     	;# 
  1245  0293                     	;# 
  1246  0294                     	;# 
  1247  0295                     	;# 
  1248  0295                     	;# 
  1249  0296                     	;# 
  1250  0297                     	;# 
  1251  0298                     	;# 
  1252  029F                     	;# 
  1253  030C                     	;# 
  1254  030E                     	;# 
  1255  0311                     	;# 
  1256  0311                     	;# 
  1257  0312                     	;# 
  1258  0313                     	;# 
  1259  0314                     	;# 
  1260  0315                     	;# 
  1261  0315                     	;# 
  1262  0316                     	;# 
  1263  0317                     	;# 
  1264  0318                     	;# 
  1265  038C                     	;# 
  1266  038E                     	;# 
  1267  0391                     	;# 
  1268  0392                     	;# 
  1269  0393                     	;# 
  1270  0397                     	;# 
  1271  0398                     	;# 
  1272  0399                     	;# 
  1273  039A                     	;# 
  1274  039C                     	;# 
  1275  039D                     	;# 
  1276  039E                     	;# 
  1277  039F                     	;# 
  1278  0411                     	;# 
  1279  0411                     	;# 
  1280  0412                     	;# 
  1281  0413                     	;# 
  1282  0414                     	;# 
  1283  0415                     	;# 
  1284  0416                     	;# 
  1285  0417                     	;# 
  1286  0418                     	;# 
  1287  0418                     	;# 
  1288  0419                     	;# 
  1289  041A                     	;# 
  1290  041B                     	;# 
  1291  041C                     	;# 
  1292  041D                     	;# 
  1293  041E                     	;# 
  1294  041F                     	;# 
  1295  0498                     	;# 
  1296  0498                     	;# 
  1297  0499                     	;# 
  1298  049A                     	;# 
  1299  049B                     	;# 
  1300  049B                     	;# 
  1301  049C                     	;# 
  1302  049D                     	;# 
  1303  049E                     	;# 
  1304  049F                     	;# 
  1305  0617                     	;# 
  1306  0618                     	;# 
  1307  0619                     	;# 
  1308  0619                     	;# 
  1309  061A                     	;# 
  1310  061B                     	;# 
  1311  061C                     	;# 
  1312  061C                     	;# 
  1313  061F                     	;# 
  1314  0691                     	;# 
  1315  0692                     	;# 
  1316  0693                     	;# 
  1317  0694                     	;# 
  1318  0695                     	;# 
  1319  0696                     	;# 
  1320  0697                     	;# 
  1321  0698                     	;# 
  1322  0699                     	;# 
  1323  0711                     	;# 
  1324  0712                     	;# 
  1325  0713                     	;# 
  1326  0714                     	;# 
  1327  0715                     	;# 
  1328  0716                     	;# 
  1329  0717                     	;# 
  1330  0718                     	;# 
  1331  0719                     	;# 
  1332  0891                     	;# 
  1333  0891                     	;# 
  1334  0891                     	;# 
  1335  0891                     	;# 
  1336  0891                     	;# 
  1337  0891                     	;# 
  1338  0892                     	;# 
  1339  0892                     	;# 
  1340  0892                     	;# 
  1341  0893                     	;# 
  1342  0893                     	;# 
  1343  0893                     	;# 
  1344  0893                     	;# 
  1345  0893                     	;# 
  1346  0893                     	;# 
  1347  0894                     	;# 
  1348  0894                     	;# 
  1349  0894                     	;# 
  1350  0895                     	;# 
  1351  0895                     	;# 
  1352  0895                     	;# 
  1353  0896                     	;# 
  1354  0896                     	;# 
  1355  0896                     	;# 
  1356  089B                     	;# 
  1357  0911                     	;# 
  1358  0912                     	;# 
  1359  0913                     	;# 
  1360  0914                     	;# 
  1361  0915                     	;# 
  1362  0916                     	;# 
  1363  0918                     	;# 
  1364  0919                     	;# 
  1365  091A                     	;# 
  1366  091B                     	;# 
  1367  091C                     	;# 
  1368  091D                     	;# 
  1369  091E                     	;# 
  1370  091F                     	;# 
  1371  0E0F                     	;# 
  1372  0E10                     	;# 
  1373  0E11                     	;# 
  1374  0E12                     	;# 
  1375  0E13                     	;# 
  1376  0E14                     	;# 
  1377  0E15                     	;# 
  1378  0E16                     	;# 
  1379  0E17                     	;# 
  1380  0E18                     	;# 
  1381  0E19                     	;# 
  1382  0E1A                     	;# 
  1383  0E1B                     	;# 
  1384  0E1C                     	;# 
  1385  0E1D                     	;# 
  1386  0E1E                     	;# 
  1387  0E1F                     	;# 
  1388  0E20                     	;# 
  1389  0E21                     	;# 
  1390  0E22                     	;# 
  1391  0E24                     	;# 
  1392  0E25                     	;# 
  1393  0E28                     	;# 
  1394  0E29                     	;# 
  1395  0E2A                     	;# 
  1396  0E2B                     	;# 
  1397  0E2C                     	;# 
  1398  0E2D                     	;# 
  1399  0E2E                     	;# 
  1400  0E2F                     	;# 
  1401  0E90                     	;# 
  1402  0E91                     	;# 
  1403  0E92                     	;# 
  1404  0E94                     	;# 
  1405  0E95                     	;# 
  1406  0EA0                     	;# 
  1407  0EA1                     	;# 
  1408  0EA2                     	;# 
  1409  0EA3                     	;# 
  1410  0EA4                     	;# 
  1411  0EA5                     	;# 
  1412  0F0F                     	;# 
  1413  0F10                     	;# 
  1414  0F11                     	;# 
  1415  0F12                     	;# 
  1416  0F13                     	;# 
  1417  0F14                     	;# 
  1418  0F15                     	;# 
  1419  0F16                     	;# 
  1420  0F17                     	;# 
  1421  0F18                     	;# 
  1422  0F19                     	;# 
  1423  0F1A                     	;# 
  1424  0F1B                     	;# 
  1425  0F1C                     	;# 
  1426  0F1D                     	;# 
  1427  0F1E                     	;# 
  1428  0F1F                     	;# 
  1429  0F20                     	;# 
  1430  0F21                     	;# 
  1431  0F22                     	;# 
  1432  0F23                     	;# 
  1433  0F24                     	;# 
  1434  0F25                     	;# 
  1435  0F26                     	;# 
  1436  0F27                     	;# 
  1437  0F28                     	;# 
  1438  0F29                     	;# 
  1439  0F2A                     	;# 
  1440  0F2B                     	;# 
  1441  0F2C                     	;# 
  1442  0F2D                     	;# 
  1443  0F2E                     	;# 
  1444  0F2F                     	;# 
  1445  0F30                     	;# 
  1446  0F31                     	;# 
  1447  0F32                     	;# 
  1448  0F33                     	;# 
  1449  0F34                     	;# 
  1450  0F35                     	;# 
  1451  0F36                     	;# 
  1452  0F37                     	;# 
  1453  0FE4                     	;# 
  1454  0FE5                     	;# 
  1455  0FE6                     	;# 
  1456  0FE7                     	;# 
  1457  0FE8                     	;# 
  1458  0FE9                     	;# 
  1459  0FEA                     	;# 
  1460  0FEB                     	;# 
  1461  0FED                     	;# 
  1462  0FEE                     	;# 
  1463  0FEF                     	;# 
  1464  0000                     	;# 
  1465  0001                     	;# 
  1466  0002                     	;# 
  1467  0003                     	;# 
  1468  0004                     	;# 
  1469  0005                     	;# 
  1470  0006                     	;# 
  1471  0007                     	;# 
  1472  0008                     	;# 
  1473  0009                     	;# 
  1474  000A                     	;# 
  1475  000B                     	;# 
  1476  000C                     	;# 
  1477  000E                     	;# 
  1478  0010                     	;# 
  1479  0011                     	;# 
  1480  0012                     	;# 
  1481  0013                     	;# 
  1482  0014                     	;# 
  1483  0015                     	;# 
  1484  0015                     	;# 
  1485  0016                     	;# 
  1486  0016                     	;# 
  1487  0017                     	;# 
  1488  0018                     	;# 
  1489  0019                     	;# 
  1490  0019                     	;# 
  1491  001A                     	;# 
  1492  001B                     	;# 
  1493  001C                     	;# 
  1494  001D                     	;# 
  1495  001E                     	;# 
  1496  001F                     	;# 
  1497  008C                     	;# 
  1498  008E                     	;# 
  1499  0090                     	;# 
  1500  0091                     	;# 
  1501  0092                     	;# 
  1502  0093                     	;# 
  1503  0094                     	;# 
  1504  0097                     	;# 
  1505  009B                     	;# 
  1506  009B                     	;# 
  1507  009C                     	;# 
  1508  009D                     	;# 
  1509  009E                     	;# 
  1510  009F                     	;# 
  1511  010C                     	;# 
  1512  010E                     	;# 
  1513  0111                     	;# 
  1514  0112                     	;# 
  1515  0113                     	;# 
  1516  0114                     	;# 
  1517  0115                     	;# 
  1518  0116                     	;# 
  1519  0117                     	;# 
  1520  0118                     	;# 
  1521  0119                     	;# 
  1522  018C                     	;# 
  1523  018E                     	;# 
  1524  0199                     	;# 
  1525  0199                     	;# 
  1526  0199                     	;# 
  1527  019A                     	;# 
  1528  019A                     	;# 
  1529  019A                     	;# 
  1530  019B                     	;# 
  1531  019B                     	;# 
  1532  019B                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019C                     	;# 
  1536  019C                     	;# 
  1537  019C                     	;# 
  1538  019D                     	;# 
  1539  019D                     	;# 
  1540  019D                     	;# 
  1541  019E                     	;# 
  1542  019E                     	;# 
  1543  019E                     	;# 
  1544  019F                     	;# 
  1545  019F                     	;# 
  1546  019F                     	;# 
  1547  019F                     	;# 
  1548  019F                     	;# 
  1549  020C                     	;# 
  1550  020E                     	;# 
  1551  0211                     	;# 
  1552  0211                     	;# 
  1553  0212                     	;# 
  1554  0212                     	;# 
  1555  0213                     	;# 
  1556  0213                     	;# 
  1557  0214                     	;# 
  1558  0214                     	;# 
  1559  0215                     	;# 
  1560  0215                     	;# 
  1561  0215                     	;# 
  1562  0215                     	;# 
  1563  0216                     	;# 
  1564  0216                     	;# 
  1565  0217                     	;# 
  1566  0217                     	;# 
  1567  0219                     	;# 
  1568  021A                     	;# 
  1569  021B                     	;# 
  1570  021C                     	;# 
  1571  021D                     	;# 
  1572  021D                     	;# 
  1573  021E                     	;# 
  1574  021F                     	;# 
  1575  028C                     	;# 
  1576  028E                     	;# 
  1577  0291                     	;# 
  1578  0291                     	;# 
  1579  0292                     	;# 
  1580  0293                     	;# 
  1581  0294                     	;# 
  1582  0295                     	;# 
  1583  0295                     	;# 
  1584  0296                     	;# 
  1585  0297                     	;# 
  1586  0298                     	;# 
  1587  029F                     	;# 
  1588  030C                     	;# 
  1589  030E                     	;# 
  1590  0311                     	;# 
  1591  0311                     	;# 
  1592  0312                     	;# 
  1593  0313                     	;# 
  1594  0314                     	;# 
  1595  0315                     	;# 
  1596  0315                     	;# 
  1597  0316                     	;# 
  1598  0317                     	;# 
  1599  0318                     	;# 
  1600  038C                     	;# 
  1601  038E                     	;# 
  1602  0391                     	;# 
  1603  0392                     	;# 
  1604  0393                     	;# 
  1605  0397                     	;# 
  1606  0398                     	;# 
  1607  0399                     	;# 
  1608  039A                     	;# 
  1609  039C                     	;# 
  1610  039D                     	;# 
  1611  039E                     	;# 
  1612  039F                     	;# 
  1613  0411                     	;# 
  1614  0411                     	;# 
  1615  0412                     	;# 
  1616  0413                     	;# 
  1617  0414                     	;# 
  1618  0415                     	;# 
  1619  0416                     	;# 
  1620  0417                     	;# 
  1621  0418                     	;# 
  1622  0418                     	;# 
  1623  0419                     	;# 
  1624  041A                     	;# 
  1625  041B                     	;# 
  1626  041C                     	;# 
  1627  041D                     	;# 
  1628  041E                     	;# 
  1629  041F                     	;# 
  1630  0498                     	;# 
  1631  0498                     	;# 
  1632  0499                     	;# 
  1633  049A                     	;# 
  1634  049B                     	;# 
  1635  049B                     	;# 
  1636  049C                     	;# 
  1637  049D                     	;# 
  1638  049E                     	;# 
  1639  049F                     	;# 
  1640  0617                     	;# 
  1641  0618                     	;# 
  1642  0619                     	;# 
  1643  0619                     	;# 
  1644  061A                     	;# 
  1645  061B                     	;# 
  1646  061C                     	;# 
  1647  061C                     	;# 
  1648  061F                     	;# 
  1649  0691                     	;# 
  1650  0692                     	;# 
  1651  0693                     	;# 
  1652  0694                     	;# 
  1653  0695                     	;# 
  1654  0696                     	;# 
  1655  0697                     	;# 
  1656  0698                     	;# 
  1657  0699                     	;# 
  1658  0711                     	;# 
  1659  0712                     	;# 
  1660  0713                     	;# 
  1661  0714                     	;# 
  1662  0715                     	;# 
  1663  0716                     	;# 
  1664  0717                     	;# 
  1665  0718                     	;# 
  1666  0719                     	;# 
  1667  0891                     	;# 
  1668  0891                     	;# 
  1669  0891                     	;# 
  1670  0891                     	;# 
  1671  0891                     	;# 
  1672  0891                     	;# 
  1673  0892                     	;# 
  1674  0892                     	;# 
  1675  0892                     	;# 
  1676  0893                     	;# 
  1677  0893                     	;# 
  1678  0893                     	;# 
  1679  0893                     	;# 
  1680  0893                     	;# 
  1681  0893                     	;# 
  1682  0894                     	;# 
  1683  0894                     	;# 
  1684  0894                     	;# 
  1685  0895                     	;# 
  1686  0895                     	;# 
  1687  0895                     	;# 
  1688  0896                     	;# 
  1689  0896                     	;# 
  1690  0896                     	;# 
  1691  089B                     	;# 
  1692  0911                     	;# 
  1693  0912                     	;# 
  1694  0913                     	;# 
  1695  0914                     	;# 
  1696  0915                     	;# 
  1697  0916                     	;# 
  1698  0918                     	;# 
  1699  0919                     	;# 
  1700  091A                     	;# 
  1701  091B                     	;# 
  1702  091C                     	;# 
  1703  091D                     	;# 
  1704  091E                     	;# 
  1705  091F                     	;# 
  1706  0E0F                     	;# 
  1707  0E10                     	;# 
  1708  0E11                     	;# 
  1709  0E12                     	;# 
  1710  0E13                     	;# 
  1711  0E14                     	;# 
  1712  0E15                     	;# 
  1713  0E16                     	;# 
  1714  0E17                     	;# 
  1715  0E18                     	;# 
  1716  0E19                     	;# 
  1717  0E1A                     	;# 
  1718  0E1B                     	;# 
  1719  0E1C                     	;# 
  1720  0E1D                     	;# 
  1721  0E1E                     	;# 
  1722  0E1F                     	;# 
  1723  0E20                     	;# 
  1724  0E21                     	;# 
  1725  0E22                     	;# 
  1726  0E24                     	;# 
  1727  0E25                     	;# 
  1728  0E28                     	;# 
  1729  0E29                     	;# 
  1730  0E2A                     	;# 
  1731  0E2B                     	;# 
  1732  0E2C                     	;# 
  1733  0E2D                     	;# 
  1734  0E2E                     	;# 
  1735  0E2F                     	;# 
  1736  0E90                     	;# 
  1737  0E91                     	;# 
  1738  0E92                     	;# 
  1739  0E94                     	;# 
  1740  0E95                     	;# 
  1741  0EA0                     	;# 
  1742  0EA1                     	;# 
  1743  0EA2                     	;# 
  1744  0EA3                     	;# 
  1745  0EA4                     	;# 
  1746  0EA5                     	;# 
  1747  0F0F                     	;# 
  1748  0F10                     	;# 
  1749  0F11                     	;# 
  1750  0F12                     	;# 
  1751  0F13                     	;# 
  1752  0F14                     	;# 
  1753  0F15                     	;# 
  1754  0F16                     	;# 
  1755  0F17                     	;# 
  1756  0F18                     	;# 
  1757  0F19                     	;# 
  1758  0F1A                     	;# 
  1759  0F1B                     	;# 
  1760  0F1C                     	;# 
  1761  0F1D                     	;# 
  1762  0F1E                     	;# 
  1763  0F1F                     	;# 
  1764  0F20                     	;# 
  1765  0F21                     	;# 
  1766  0F22                     	;# 
  1767  0F23                     	;# 
  1768  0F24                     	;# 
  1769  0F25                     	;# 
  1770  0F26                     	;# 
  1771  0F27                     	;# 
  1772  0F28                     	;# 
  1773  0F29                     	;# 
  1774  0F2A                     	;# 
  1775  0F2B                     	;# 
  1776  0F2C                     	;# 
  1777  0F2D                     	;# 
  1778  0F2E                     	;# 
  1779  0F2F                     	;# 
  1780  0F30                     	;# 
  1781  0F31                     	;# 
  1782  0F32                     	;# 
  1783  0F33                     	;# 
  1784  0F34                     	;# 
  1785  0F35                     	;# 
  1786  0F36                     	;# 
  1787  0F37                     	;# 
  1788  0FE4                     	;# 
  1789  0FE5                     	;# 
  1790  0FE6                     	;# 
  1791  0FE7                     	;# 
  1792  0FE8                     	;# 
  1793  0FE9                     	;# 
  1794  0FEA                     	;# 
  1795  0FEB                     	;# 
  1796  0FED                     	;# 
  1797  0FEE                     	;# 
  1798  0FEF                     	;# 
  1799                           
  1800                           	psect	idataBANK1
  1801  0003                     __pidataBANK1:	
  1802                           
  1803                           ;initializer for _romData
  1804  0003  3420               	retlw	low (_romDataMap| (0+512))
  1805                           
  1806                           	psect	stringtext1
  1807  1800                     __pstringtext1:	
  1808  1800                     _dpowers:	
  1809  1800  3401               	retlw	1
  1810  1801  3400               	retlw	0
  1811  1802  3400               	retlw	0
  1812  1803  3400               	retlw	0
  1813  1804  340A               	retlw	10
  1814  1805  3400               	retlw	0
  1815  1806  3400               	retlw	0
  1816  1807  3400               	retlw	0
  1817  1808  3464               	retlw	100
  1818  1809  3400               	retlw	0
  1819  180A  3400               	retlw	0
  1820  180B  3400               	retlw	0
  1821  180C  34E8               	retlw	232
  1822  180D  3403               	retlw	3
  1823  180E  3400               	retlw	0
  1824  180F  3400               	retlw	0
  1825  1810  3410               	retlw	16
  1826  1811  3427               	retlw	39
  1827  1812  3400               	retlw	0
  1828  1813  3400               	retlw	0
  1829  1814  34A0               	retlw	160
  1830  1815  3486               	retlw	134
  1831  1816  3401               	retlw	1
  1832  1817  3400               	retlw	0
  1833  1818  3440               	retlw	64
  1834  1819  3442               	retlw	66
  1835  181A  340F               	retlw	15
  1836  181B  3400               	retlw	0
  1837  181C  3480               	retlw	128
  1838  181D  3496               	retlw	150
  1839  181E  3498               	retlw	152
  1840  181F  3400               	retlw	0
  1841  1820  3400               	retlw	0
  1842  1821  34E1               	retlw	225
  1843  1822  34F5               	retlw	245
  1844  1823  3405               	retlw	5
  1845  1824  3400               	retlw	0
  1846  1825  34CA               	retlw	202
  1847  1826  349A               	retlw	154
  1848  1827  343B               	retlw	59
  1849  1828                     __end_of_dpowers:	
  1850                           
  1851                           	psect	stringtext2
  1852  1834                     __pstringtext2:	
  1853  1834                     _statuses:	
  1854  1834  3400               	retlw	0
  1855  1835  3401               	retlw	1
  1856  1836  3402               	retlw	2
  1857  1837  3403               	retlw	3
  1858  1838  3400               	retlw	0
  1859  1839  3401               	retlw	1
  1860  183A  3402               	retlw	2
  1861  183B  3403               	retlw	3
  1862  183C  3404               	retlw	4
  1863  183D  3405               	retlw	5
  1864  183E                     __end_of_statuses:	
  1865                           
  1866                           	psect	stringtext3
  1867  184B                     __pstringtext3:	
  1868  184B                     _n_ADDRESS_P0:	
  1869  184B  34AD               	retlw	173
  1870  184C  3487               	retlw	135
  1871  184D  3466               	retlw	102
  1872  184E  34BC               	retlw	188
  1873  184F  34BB               	retlw	187
  1874  1850                     __end_of_n_ADDRESS_P0:	
  1875                           
  1876                           	psect	stringtext4
  1877  1828                     __pstringtext4:	
  1878  1828                     _n_ADDRESS_MUL:	
  1879  1828  3421               	retlw	33
  1880  1829                     __end_of_n_ADDRESS_MUL:	
  1881  000B                     _INTCONbits	set	11
  1882  0010                     _PIR0bits	set	16
  1883  000E                     _PORTCbits	set	14
  1884  000C                     _PORTAbits	set	12
  1885  009E                     _ADCON1bits	set	158
  1886  009C                     _ADRESH	set	156
  1887  009B                     _ADRESL	set	155
  1888  009D                     _ADCON0bits	set	157
  1889  0090                     _PIE0bits	set	144
  1890  0097                     _WDTCONbits	set	151
  1891  008E                     _TRISCbits	set	142
  1892  008C                     _TRISAbits	set	140
  1893  0117                     _FVRCONbits	set	279
  1894  018E                     _ANSELCbits	set	398
  1895  018C                     _ANSELAbits	set	396
  1896  018E                     _ANSELC	set	398
  1897  018C                     _ANSELA	set	396
  1898  020C                     _WPUAbits	set	524
  1899  020E                     _WPUC	set	526
  1900  020C                     _WPUA	set	524
  1901  0211                     _SSP1BUF	set	529
  1902  0214                     _SSP1STATbits	set	532
  1903  0215                     _SSP1CON1bits	set	533
  1904  028C                     _ODCONAbits	set	652
  1905  028E                     _ODCONC	set	654
  1906  028C                     _ODCONA	set	652
  1907  038E                     _INLVLC	set	910
  1908  038C                     _INLVLA	set	908
  1909  0919                     _OSCCON1bits	set	2329
  1910  0EA0                     _RC0PPSbits	set	3744
  1911  0EA2                     _RC2PPSbits	set	3746
  1912  0EA1                     _RC1PPSbits	set	3745
  1913  1829                     STR_10:	
  1914  1829  3425               	retlw	37	;'%'
  1915  182A  346C               	retlw	108	;'l'
  1916  182B  3475               	retlw	117	;'u'
  1917  182C  342E               	retlw	46	;'.'
  1918  182D  3425               	retlw	37	;'%'
  1919  182E  3436               	retlw	54	;'6'
  1920  182F  342E               	retlw	46	;'.'
  1921  1830  3436               	retlw	54	;'6'
  1922  1831  346C               	retlw	108	;'l'
  1923  1832  3475               	retlw	117	;'u'
  1924  1833  3400               	retlw	0
  1925                           
  1926                           	psect	stringtext5
  1927  183E                     __pstringtext5:	
  1928  183E                     STR_5:	
  1929  183E  3441               	retlw	65	;'A'
  1930  183F  344E               	retlw	78	;'N'
  1931  1840  3443               	retlw	67	;'C'
  1932  1841  3433               	retlw	51	;'3'
  1933  1842  346D               	retlw	109	;'m'
  1934  1843  3456               	retlw	86	;'V'
  1935  1844  3400               	retlw	0
  1936                           
  1937                           	psect	stringtext6
  1938  1845                     __pstringtext6:	
  1939  1845                     STR_7:	
  1940  1845  3452               	retlw	82	;'R'
  1941  1846  3446               	retlw	70	;'F'
  1942  1847  3450               	retlw	80	;'P'
  1943  1848  3457               	retlw	87	;'W'
  1944  1849  3452               	retlw	82	;'R'
  1945  184A  3400               	retlw	0
  1946                           
  1947                           	psect	stringtext7
  1948  1850                     __pstringtext7:	
  1949  1850                     STR_3:	
  1950  1850  3444               	retlw	68	;'D'
  1951  1851  3442               	retlw	66	;'B'
  1952  1852  3447               	retlw	71	;'G'
  1953  1853  3431               	retlw	49	;'1'
  1954  1854  3400               	retlw	0
  1955                           
  1956                           	psect	stringtext8
  1957  1855                     __pstringtext8:	
  1958  1855                     STR_6:	
  1959  1855  3454               	retlw	84	;'T'
  1960  1856  3445               	retlw	69	;'E'
  1961  1857  344D               	retlw	77	;'M'
  1962  1858  3450               	retlw	80	;'P'
  1963  1859  3400               	retlw	0
  1964                           
  1965                           	psect	stringtext9
  1966  185A                     __pstringtext9:	
  1967  185A                     STR_4:	
  1968  185A  3456               	retlw	86	;'V'
  1969  185B  3442               	retlw	66	;'B'
  1970  185C  3441               	retlw	65	;'A'
  1971  185D  3454               	retlw	84	;'T'
  1972  185E  3400               	retlw	0
  1973                           
  1974                           	psect	stringtext10
  1975  185F                     __pstringtext10:	
  1976  185F                     STR_9:	
  1977  185F  3442               	retlw	66	;'B'
  1978  1860  344F               	retlw	79	;'O'
  1979  1861  344F               	retlw	79	;'O'
  1980  1862  3454               	retlw	84	;'T'
  1981  1863  3400               	retlw	0
  1982                           
  1983                           	psect	stringtext11
  1984  1864                     __pstringtext11:	
  1985  1864                     STR_8:	
  1986  1864  3455               	retlw	85	;'U'
  1987  1865  3448               	retlw	72	;'H'
  1988  1866  3431               	retlw	49	;'1'
  1989  1867  3400               	retlw	0
  1990                           
  1991                           	psect	stringtext12
  1992  1868                     __pstringtext12:	
  1993  1868                     STR_1:	
  1994  1868  342F               	retlw	47	;'/'
  1995  1869  3400               	retlw	0
  1996                           
  1997                           	psect	stringtext13
  1998  0000                     __pstringtext13:	
  1999  1868                     
  2000                           ; #config settings
  2001  0000                     
  2002                           	psect	cinit
  2003  0011                     start_initialization:	
  2004  0011                     __initialization:	
  2005                           
  2006                           ; Initialize objects allocated to BANK1
  2007  0011  0021               	movlb	1	; select bank1
  2008  0012  3180  2003  3180   	fcall	__pidataBANK1	;fetch initializer
  2009  0015  00EB               	movwf	__pdataBANK1& (0+127)
  2010                           
  2011                           ; Clear objects allocated to BANK1
  2012  0016  01E7               	clrf	__pbssBANK1& (0+127)
  2013  0017  01E8               	clrf	(__pbssBANK1+1)& (0+127)
  2014  0018  01E9               	clrf	(__pbssBANK1+2)& (0+127)
  2015  0019  01EA               	clrf	(__pbssBANK1+3)& (0+127)
  2016                           
  2017                           ; Clear objects allocated to BANK2
  2018  001A  3051               	movlw	low __pbssBANK2
  2019  001B  0084               	movwf	4
  2020  001C  3001               	movlw	high __pbssBANK2
  2021  001D  0085               	movwf	5
  2022  001E  3015               	movlw	21
  2023  001F  3194  24E6  3180   	fcall	clear_ram0
  2024                           
  2025                           ; Clear objects allocated to BANK3
  2026  0022  30A0               	movlw	low __pbssBANK3
  2027  0023  0084               	movwf	4
  2028  0024  3001               	movlw	high __pbssBANK3
  2029  0025  0085               	movwf	5
  2030  0026  3042               	movlw	66
  2031  0027  3194  24E6  3180   	fcall	clear_ram0
  2032                           
  2033                           ; Clear objects allocated to BANK4
  2034  002A  3020               	movlw	low __pbssBANK4
  2035  002B  0084               	movwf	4
  2036  002C  3002               	movlw	high __pbssBANK4
  2037  002D  0085               	movwf	5
  2038  002E  301C               	movlw	28
  2039  002F  3194  24E6         	fcall	clear_ram0
  2040  0031                     end_of_initialization:	
  2041                           ;End of C runtime variable initialization code
  2042                           
  2043  0031                     __end_of__initialization:	
  2044  0031  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2045  0032  0020               	movlb	0
  2046  0033  318B  2BD1         	ljmp	_main	;jump to C main() function
  2047                           
  2048                           	psect	bssBANK1
  2049  00E7                     __pbssBANK1:	
  2050  00E7                     _status:	
  2051  00E7                     	ds	4
  2052                           
  2053                           	psect	dataBANK1
  2054  00EB                     __pdataBANK1:	
  2055  00EB                     _romData:	
  2056  00EB                     	ds	1
  2057                           
  2058                           	psect	bssBANK2
  2059  0151                     __pbssBANK2:	
  2060  0151                     _counter:	
  2061  0151                     	ds	4
  2062  0155                     ftoa@buf:	
  2063  0155                     	ds	17
  2064                           
  2065                           	psect	bssBANK3
  2066  01A0                     __pbssBANK3:	
  2067  01A0                     _RXPacket:	
  2068  01A0                     	ds	33
  2069  01C1                     _TXPacket:	
  2070  01C1                     	ds	33
  2071                           
  2072                           	psect	bssBANK4
  2073  0220                     __pbssBANK4:	
  2074  0220                     _romDataMap:	
  2075  0220                     	ds	28
  2076                           
  2077                           	psect	clrtext
  2078  14E6                     clear_ram0:	
  2079                           ;	Called with FSR0 containing the base address, and
  2080                           ;	WREG with the size to clear
  2081                           
  2082  14E6  0064               	clrwdt	;clear the watchdog before getting into this loop
  2083  14E7                     clrloop0:	
  2084  14E7  0180               	clrf	0	;clear RAM location pointed to by FSR
  2085  14E8  3101               	addfsr 0,1
  2086  14E9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2087  14EA  2CE7               	goto	clrloop0	;have we reached the end yet?
  2088  14EB  3400               	retlw	0	;all done for this memory range, return
  2089                           
  2090                           	psect	cstackBANK2
  2091  0120                     __pcstackBANK2:	
  2092  0120                     loop@vt:	
  2093                           
  2094                           ; 3 bytes @ 0x0
  2095  0120                     	ds	3
  2096  0123                     loop@ta:	
  2097                           
  2098                           ; 3 bytes @ 0x3
  2099  0123                     	ds	3
  2100  0126                     _loop$1978:	
  2101                           
  2102                           ; 3 bytes @ 0x6
  2103  0126                     	ds	3
  2104  0129                     _loop$1979:	
  2105                           
  2106                           ; 3 bytes @ 0x9
  2107  0129                     	ds	3
  2108  012C                     _loop$1980:	
  2109                           
  2110                           ; 3 bytes @ 0xC
  2111  012C                     	ds	3
  2112  012F                     loop@rfSetup:	
  2113                           
  2114                           ; 1 bytes @ 0xF
  2115  012F                     	ds	1
  2116  0130                     loop@packet:	
  2117                           
  2118                           ; 33 bytes @ 0x10
  2119  0130                     	ds	33
  2120                           
  2121                           	psect	cstackBANK1
  2122  00A0                     __pcstackBANK1:	
  2123  00A0                     ___fttol@sign1:	
  2124                           
  2125                           ; 1 bytes @ 0x0
  2126  00A0                     	ds	1
  2127  00A1                     ___fttol@lval:	
  2128                           
  2129                           ; 4 bytes @ 0x1
  2130  00A1                     	ds	4
  2131  00A5                     ___fttol@exp1:	
  2132                           
  2133                           ; 1 bytes @ 0x5
  2134  00A5                     	ds	1
  2135  00A6                     ?_ftoa:	
  2136  00A6                     ftoa@f:	
  2137                           ; 1 bytes @ 0x6
  2138                           
  2139                           
  2140                           ; 3 bytes @ 0x6
  2141  00A6                     	ds	3
  2142  00A9                     ftoa@status:	
  2143                           
  2144                           ; 1 bytes @ 0x9
  2145  00A9                     	ds	1
  2146  00AA                     ftoa@rem:	
  2147                           
  2148                           ; 4 bytes @ 0xA
  2149  00AA                     	ds	4
  2150  00AE                     ftoa@l:	
  2151                           
  2152                           ; 4 bytes @ 0xE
  2153  00AE                     	ds	4
  2154  00B2                     ftoa@cp:	
  2155                           
  2156                           ; 1 bytes @ 0x12
  2157  00B2                     	ds	1
  2158  00B3                     ?_strcat:	
  2159  00B3                     strcat@to:	
  2160                           ; 2 bytes @ 0x13
  2161                           
  2162                           
  2163                           ; 2 bytes @ 0x13
  2164  00B3                     	ds	2
  2165  00B5                     strcat@from:	
  2166                           
  2167                           ; 2 bytes @ 0x15
  2168  00B5                     	ds	2
  2169  00B7                     strcat@cp:	
  2170                           
  2171                           ; 2 bytes @ 0x17
  2172  00B7                     	ds	2
  2173  00B9                     ?_sendMessage:	
  2174  00B9                     sendMessage@packet:	
  2175                           ; 1 bytes @ 0x19
  2176                           
  2177                           
  2178                           ; 2 bytes @ 0x19
  2179  00B9                     	ds	2
  2180  00BB                     sendMessage@topic:	
  2181                           
  2182                           ; 2 bytes @ 0x1B
  2183  00BB                     	ds	2
  2184  00BD                     sendMessage@value:	
  2185                           
  2186                           ; 3 bytes @ 0x1D
  2187  00BD                     	ds	3
  2188  00C0                     ??_sendMessage:	
  2189                           
  2190                           ; 1 bytes @ 0x20
  2191  00C0                     	ds	1
  2192  00C1                     sendMessage@status:	
  2193                           
  2194                           ; 2 bytes @ 0x21
  2195  00C1                     	ds	2
  2196  00C3                     ??_loop:	
  2197                           
  2198                           ; 1 bytes @ 0x23
  2199  00C3                     	ds	1
  2200  00C4                     ??_main:	
  2201                           
  2202                           ; 1 bytes @ 0x24
  2203  00C4                     	ds	1
  2204  00C5                     main@pipe:	
  2205                           
  2206                           ; 1 bytes @ 0x25
  2207  00C5                     	ds	1
  2208  00C6                     main@packet:	
  2209                           
  2210                           ; 33 bytes @ 0x26
  2211  00C6                     	ds	33
  2212                           
  2213                           	psect	cstackCOMMON
  2214  0070                     __pcstackCOMMON:	
  2215  0070                     ?_isdigit:	
  2216  0070                     ?_nrf24l01ISR:	
  2217                           ; 1 bit 
  2218                           
  2219  0070                     ?_nrf24l01SetRXMode:	
  2220                           ; 1 bytes @ 0x0
  2221                           
  2222  0070                     ?_nrf24l01Init:	
  2223                           ; 1 bytes @ 0x0
  2224                           
  2225  0070                     ?_nrf24l01SetTXPipe:	
  2226                           ; 1 bytes @ 0x0
  2227                           
  2228  0070                     ?_nrf24l01Service:	
  2229                           ; 1 bytes @ 0x0
  2230                           
  2231  0070                     ?_nrf24l01CELow:	
  2232                           ; 1 bytes @ 0x0
  2233                           
  2234  0070                     ??_nrf24l01CELow:	
  2235                           ; 1 bytes @ 0x0
  2236                           
  2237  0070                     ?_nrf24l01CEHigh:	
  2238                           ; 1 bytes @ 0x0
  2239                           
  2240  0070                     ??_nrf24l01CEHigh:	
  2241                           ; 1 bytes @ 0x0
  2242                           
  2243  0070                     ?_nrf24l01CSLow:	
  2244                           ; 1 bytes @ 0x0
  2245                           
  2246  0070                     ??_nrf24l01CSLow:	
  2247                           ; 1 bytes @ 0x0
  2248                           
  2249  0070                     ?_nrf24l01CSHigh:	
  2250                           ; 1 bytes @ 0x0
  2251                           
  2252  0070                     ??_nrf24l01CSHigh:	
  2253                           ; 1 bytes @ 0x0
  2254                           
  2255  0070                     ?_nrf24l01InterfaceInit:	
  2256                           ; 1 bytes @ 0x0
  2257                           
  2258  0070                     ?_nrf24l01SPISend:	
  2259                           ; 1 bytes @ 0x0
  2260                           
  2261  0070                     ??_nrf24l01SPISend:	
  2262                           ; 1 bytes @ 0x0
  2263                           
  2264  0070                     ?_nrf24l01SPIStart:	
  2265                           ; 1 bytes @ 0x0
  2266                           
  2267  0070                     ??_nrf24l01SPIStart:	
  2268                           ; 1 bytes @ 0x0
  2269                           
  2270  0070                     ?_nrf24l01SPIEnd:	
  2271                           ; 1 bytes @ 0x0
  2272                           
  2273  0070                     ??_nrf24l01SPIEnd:	
  2274                           ; 1 bytes @ 0x0
  2275                           
  2276  0070                     ?_enableInterrupts:	
  2277                           ; 1 bytes @ 0x0
  2278                           
  2279  0070                     ??_enableInterrupts:	
  2280                           ; 1 bytes @ 0x0
  2281                           
  2282  0070                     ?_ISR:	
  2283                           ; 1 bytes @ 0x0
  2284                           
  2285  0070                     ?_loop:	
  2286                           ; 1 bytes @ 0x0
  2287                           
  2288  0070                     ?_nrf24l01GetPipe:	
  2289                           ; 1 bytes @ 0x0
  2290                           
  2291  0070                     ?_main:	
  2292                           ; 1 bytes @ 0x0
  2293                           
  2294  0070                     ?_nrf24l01SetRXPipe:	
  2295                           ; 1 bytes @ 0x0
  2296                           
  2297  0070                     ?_nrf24l01SetTXBuffer:	
  2298                           ; 1 bytes @ 0x0
  2299                           
  2300  0070                     ?_nrf24l01InitRegisters:	
  2301                           ; 1 bytes @ 0x0
  2302                           
  2303  0070                     ?i1_nrf24l01SetRXMode:	
  2304                           ; 1 bytes @ 0x0
  2305                           
  2306  0070                     ?i1_nrf24l01SetTXBuffer:	
  2307                           ; 1 bytes @ 0x0
  2308                           
  2309  0070                     ?i1_nrf24l01Service:	
  2310                           ; 1 bytes @ 0x0
  2311                           
  2312  0070                     ?i1_memset:	
  2313                           ; 1 bytes @ 0x0
  2314                           
  2315  0070                     ?i1_strcmp:	
  2316                           ; 1 bytes @ 0x0
  2317                           
  2318  0070                     ?i1_strlen:	
  2319                           ; 2 bytes @ 0x0
  2320                           
  2321  0070                     nrf24l01SPISend@data:	
  2322                           ; 2 bytes @ 0x0
  2323                           
  2324  0070                     enableInterrupts@enable:	
  2325                           ; 1 bytes @ 0x0
  2326                           
  2327  0070                     i1strcmp@s2:	
  2328                           ; 1 bytes @ 0x0
  2329                           
  2330  0070                     i1memset@p1:	
  2331                           ; 1 bytes @ 0x0
  2332                           
  2333  0070                     i1strlen@s:	
  2334                           ; 2 bytes @ 0x0
  2335                           
  2336                           
  2337                           ; 2 bytes @ 0x0
  2338  0070                     	ds	1
  2339  0071                     ?i1_nrf24l01Send:	
  2340  0071                     i1nrf24l01Send@data:	
  2341                           ; 1 bytes @ 0x1
  2342                           
  2343                           
  2344                           ; 1 bytes @ 0x1
  2345  0071                     	ds	1
  2346  0072                     ??i1_nrf24l01Send:	
  2347  0072                     ??i1_strcmp:	
  2348                           ; 1 bytes @ 0x2
  2349                           
  2350  0072                     ??i1_strlen:	
  2351                           ; 1 bytes @ 0x2
  2352                           
  2353  0072                     i1memset@c:	
  2354                           ; 1 bytes @ 0x2
  2355                           
  2356                           
  2357                           ; 2 bytes @ 0x2
  2358  0072                     	ds	1
  2359  0073                     i1nrf24l01Send@command:	
  2360  0073                     i1strcmp@r:	
  2361                           ; 1 bytes @ 0x3
  2362                           
  2363                           
  2364                           ; 1 bytes @ 0x3
  2365  0073                     	ds	1
  2366  0074                     ??i1_nrf24l01SetRXMode:	
  2367  0074                     i1strcmp@s1:	
  2368                           ; 1 bytes @ 0x4
  2369                           
  2370  0074                     i1memset@n:	
  2371                           ; 1 bytes @ 0x4
  2372                           
  2373  0074                     i1strlen@cp:	
  2374                           ; 2 bytes @ 0x4
  2375                           
  2376                           
  2377                           ; 2 bytes @ 0x4
  2378  0074                     	ds	1
  2379  0075                     i1nrf24l01SetRXMode@rxMode:	
  2380                           
  2381                           ; 1 bytes @ 0x5
  2382  0075                     	ds	1
  2383  0076                     ??i1_nrf24l01SetTXBuffer:	
  2384  0076                     ??i1_memset:	
  2385                           ; 1 bytes @ 0x6
  2386                           
  2387  0076                     i1memset@p:	
  2388                           ; 1 bytes @ 0x6
  2389                           
  2390                           
  2391                           ; 2 bytes @ 0x6
  2392  0076                     	ds	2
  2393  0078                     i1nrf24l01SetTXBuffer@txPacket:	
  2394                           
  2395                           ; 1 bytes @ 0x8
  2396  0078                     	ds	1
  2397  0079                     i1nrf24l01SetTXBuffer@i:	
  2398                           
  2399                           ; 1 bytes @ 0x9
  2400  0079                     	ds	1
  2401  007A                     ??i1_nrf24l01Service:	
  2402                           
  2403                           ; 1 bytes @ 0xA
  2404  007A                     	ds	1
  2405  007B                     i1nrf24l01Service@width:	
  2406                           
  2407                           ; 1 bytes @ 0xB
  2408  007B                     	ds	1
  2409  007C                     i1nrf24l01Service@i:	
  2410                           
  2411                           ; 1 bytes @ 0xC
  2412  007C                     	ds	1
  2413  007D                     ??_nrf24l01ISR:	
  2414                           
  2415                           ; 1 bytes @ 0xD
  2416  007D                     	ds	1
  2417  007E                     ??_ISR:	
  2418                           
  2419                           	psect	cstackBANK0
  2420  0020                     __pcstackBANK0:	
  2421                           ; 1 bytes @ 0xE
  2422                           
  2423  0020                     ?___ftge:	
  2424  0020                     ?_nrf24l01Send:	
  2425                           ; 1 bit 
  2426                           
  2427  0020                     ??_isdigit:	
  2428                           ; 1 bytes @ 0x0
  2429                           
  2430  0020                     ??_nrf24l01InterfaceInit:	
  2431                           ; 1 bytes @ 0x0
  2432                           
  2433  0020                     ?_sleepMs:	
  2434                           ; 1 bytes @ 0x0
  2435                           
  2436  0020                     ?___bmul:	
  2437                           ; 1 bytes @ 0x0
  2438                           
  2439  0020                     ?_memset:	
  2440                           ; 1 bytes @ 0x0
  2441                           
  2442  0020                     ?_strcpy:	
  2443                           ; 2 bytes @ 0x0
  2444                           
  2445  0020                     ?_strlen:	
  2446                           ; 2 bytes @ 0x0
  2447                           
  2448  0020                     ?_strcmp:	
  2449                           ; 2 bytes @ 0x0
  2450                           
  2451  0020                     ?___wmul:	
  2452                           ; 2 bytes @ 0x0
  2453                           
  2454  0020                     ?___lwmod:	
  2455                           ; 2 bytes @ 0x0
  2456                           
  2457  0020                     ?___ftpack:	
  2458                           ; 2 bytes @ 0x0
  2459                           
  2460  0020                     ?___lldiv:	
  2461                           ; 3 bytes @ 0x0
  2462                           
  2463  0020                     nrf24l01Send@data:	
  2464                           ; 4 bytes @ 0x0
  2465                           
  2466  0020                     ___bmul@multiplicand:	
  2467                           ; 1 bytes @ 0x0
  2468                           
  2469  0020                     _isdigit$1728:	
  2470                           ; 1 bytes @ 0x0
  2471                           
  2472  0020                     strcmp@s2:	
  2473                           ; 1 bytes @ 0x0
  2474                           
  2475  0020                     sleepMs@milliseconds:	
  2476                           ; 1 bytes @ 0x0
  2477                           
  2478  0020                     ___wmul@multiplier:	
  2479                           ; 2 bytes @ 0x0
  2480                           
  2481  0020                     ___lwmod@divisor:	
  2482                           ; 2 bytes @ 0x0
  2483                           
  2484  0020                     memset@p1:	
  2485                           ; 2 bytes @ 0x0
  2486                           
  2487  0020                     strcpy@to:	
  2488                           ; 2 bytes @ 0x0
  2489                           
  2490  0020                     strlen@s:	
  2491                           ; 2 bytes @ 0x0
  2492                           
  2493  0020                     ___ftpack@arg:	
  2494                           ; 2 bytes @ 0x0
  2495                           
  2496  0020                     ___ftge@ff1:	
  2497                           ; 3 bytes @ 0x0
  2498                           
  2499  0020                     ___lldiv@divisor:	
  2500                           ; 3 bytes @ 0x0
  2501                           
  2502                           
  2503                           ; 4 bytes @ 0x0
  2504  0020                     	ds	1
  2505  0021                     ??_nrf24l01Send:	
  2506  0021                     ??___bmul:	
  2507                           ; 1 bytes @ 0x1
  2508                           
  2509  0021                     isdigit@c:	
  2510                           ; 1 bytes @ 0x1
  2511                           
  2512                           
  2513                           ; 1 bytes @ 0x1
  2514  0021                     	ds	1
  2515  0022                     ??_strlen:	
  2516  0022                     ??_strcmp:	
  2517                           ; 1 bytes @ 0x2
  2518                           
  2519  0022                     ??_sleepMs:	
  2520                           ; 1 bytes @ 0x2
  2521                           
  2522  0022                     nrf24l01Send@command:	
  2523                           ; 1 bytes @ 0x2
  2524                           
  2525  0022                     ___bmul@product:	
  2526                           ; 1 bytes @ 0x2
  2527                           
  2528  0022                     ___wmul@multiplicand:	
  2529                           ; 1 bytes @ 0x2
  2530                           
  2531  0022                     ___lwmod@dividend:	
  2532                           ; 2 bytes @ 0x2
  2533                           
  2534  0022                     memset@c:	
  2535                           ; 2 bytes @ 0x2
  2536                           
  2537  0022                     strcpy@from:	
  2538                           ; 2 bytes @ 0x2
  2539                           
  2540                           
  2541                           ; 2 bytes @ 0x2
  2542  0022                     	ds	1
  2543  0023                     ??_nrf24l01SetRXMode:	
  2544  0023                     ??_nrf24l01SetRXPipe:	
  2545                           ; 1 bytes @ 0x3
  2546                           
  2547  0023                     ___bmul@multiplier:	
  2548                           ; 1 bytes @ 0x3
  2549                           
  2550  0023                     ___ftpack@exp:	
  2551                           ; 1 bytes @ 0x3
  2552                           
  2553  0023                     strcmp@r:	
  2554                           ; 1 bytes @ 0x3
  2555                           
  2556  0023                     ___ftge@ff2:	
  2557                           ; 1 bytes @ 0x3
  2558                           
  2559                           
  2560                           ; 3 bytes @ 0x3
  2561  0023                     	ds	1
  2562  0024                     ??_strcpy:	
  2563  0024                     ??_nrf24l01SetTXPipe:	
  2564                           ; 1 bytes @ 0x4
  2565                           
  2566  0024                     ??___wmul:	
  2567                           ; 1 bytes @ 0x4
  2568                           
  2569  0024                     ??___lwmod:	
  2570                           ; 1 bytes @ 0x4
  2571                           
  2572  0024                     sleepMs@wdtps:	
  2573                           ; 1 bytes @ 0x4
  2574                           
  2575  0024                     nrf24l01SetRXMode@rxMode:	
  2576                           ; 1 bytes @ 0x4
  2577                           
  2578  0024                     ___ftpack@sign:	
  2579                           ; 1 bytes @ 0x4
  2580                           
  2581  0024                     strcmp@s1:	
  2582                           ; 1 bytes @ 0x4
  2583                           
  2584  0024                     ___wmul@product:	
  2585                           ; 1 bytes @ 0x4
  2586                           
  2587  0024                     memset@n:	
  2588                           ; 2 bytes @ 0x4
  2589                           
  2590  0024                     strcpy@cp:	
  2591                           ; 2 bytes @ 0x4
  2592                           
  2593  0024                     strlen@cp:	
  2594                           ; 2 bytes @ 0x4
  2595                           
  2596  0024                     ___lldiv@dividend:	
  2597                           ; 2 bytes @ 0x4
  2598                           
  2599                           
  2600                           ; 4 bytes @ 0x4
  2601  0024                     	ds	1
  2602  0025                     ??___ftpack:	
  2603  0025                     ?_sleepListren:	
  2604                           ; 1 bytes @ 0x5
  2605                           
  2606  0025                     nrf24l01SetRXPipe@pipe:	
  2607                           ; 1 bytes @ 0x5
  2608                           
  2609  0025                     ___lwmod@counter:	
  2610                           ; 1 bytes @ 0x5
  2611                           
  2612  0025                     sleepListren@seconds:	
  2613                           ; 1 bytes @ 0x5
  2614                           
  2615                           
  2616                           ; 2 bytes @ 0x5
  2617  0025                     	ds	1
  2618  0026                     ??_memset:	
  2619  0026                     ??_nrf24l01GetPipe:	
  2620                           ; 1 bytes @ 0x6
  2621                           
  2622  0026                     ??_nrf24l01SetTXBuffer:	
  2623                           ; 1 bytes @ 0x6
  2624                           
  2625  0026                     ??___ftge:	
  2626                           ; 1 bytes @ 0x6
  2627                           
  2628  0026                     nrf24l01SetTXPipe@pipe:	
  2629                           ; 1 bytes @ 0x6
  2630                           
  2631  0026                     nrf24l01SetRXPipe@enRXAddr:	
  2632                           ; 1 bytes @ 0x6
  2633                           
  2634  0026                     memset@p:	
  2635                           ; 1 bytes @ 0x6
  2636                           
  2637                           
  2638                           ; 2 bytes @ 0x6
  2639  0026                     	ds	1
  2640  0027                     ??_sleepListren:	
  2641  0027                     ??_nrf24l01InitRegisters:	
  2642                           ; 1 bytes @ 0x7
  2643                           
  2644                           
  2645                           ; 1 bytes @ 0x7
  2646  0027                     	ds	1
  2647  0028                     ??___lldiv:	
  2648  0028                     ?___awtoft:	
  2649                           ; 1 bytes @ 0x8
  2650                           
  2651  0028                     ?___lbtoft:	
  2652                           ; 3 bytes @ 0x8
  2653                           
  2654  0028                     ?___lltoft:	
  2655                           ; 3 bytes @ 0x8
  2656                           
  2657  0028                     ?___lwtoft:	
  2658                           ; 3 bytes @ 0x8
  2659                           
  2660  0028                     nrf24l01GetPipe@pipe:	
  2661                           ; 3 bytes @ 0x8
  2662                           
  2663  0028                     nrf24l01SetTXBuffer@txPacket:	
  2664                           ; 1 bytes @ 0x8
  2665                           
  2666  0028                     ___awtoft@c:	
  2667                           ; 1 bytes @ 0x8
  2668                           
  2669  0028                     ___lwtoft@c:	
  2670                           ; 2 bytes @ 0x8
  2671                           
  2672  0028                     ___lltoft@c:	
  2673                           ; 2 bytes @ 0x8
  2674                           
  2675                           
  2676                           ; 4 bytes @ 0x8
  2677  0028                     	ds	1
  2678  0029                     nrf24l01GetPipe@name:	
  2679  0029                     nrf24l01SetTXBuffer@i:	
  2680                           ; 1 bytes @ 0x9
  2681                           
  2682  0029                     nrf24l01InitRegisters@channel:	
  2683                           ; 1 bytes @ 0x9
  2684                           
  2685  0029                     ___lldiv@quotient:	
  2686                           ; 1 bytes @ 0x9
  2687                           
  2688                           
  2689                           ; 4 bytes @ 0x9
  2690  0029                     	ds	1
  2691  002A                     ??_nrf24l01Service:	
  2692  002A                     nrf24l01GetPipe@i:	
  2693                           ; 1 bytes @ 0xA
  2694                           
  2695  002A                     nrf24l01InitRegisters@setupAW:	
  2696                           ; 1 bytes @ 0xA
  2697                           
  2698                           
  2699                           ; 1 bytes @ 0xA
  2700  002A                     	ds	1
  2701  002B                     ??___awtoft:	
  2702  002B                     ??___lbtoft:	
  2703                           ; 1 bytes @ 0xB
  2704                           
  2705  002B                     ??___lwtoft:	
  2706                           ; 1 bytes @ 0xB
  2707                           
  2708  002B                     nrf24l01Service@width:	
  2709                           ; 1 bytes @ 0xB
  2710                           
  2711  002B                     nrf24l01InitRegisters@feature:	
  2712                           ; 1 bytes @ 0xB
  2713                           
  2714                           
  2715                           ; 1 bytes @ 0xB
  2716  002B                     	ds	1
  2717  002C                     ??___lltoft:	
  2718  002C                     nrf24l01Service@i:	
  2719                           ; 1 bytes @ 0xC
  2720                           
  2721  002C                     nrf24l01InitRegisters@rfSetup:	
  2722                           ; 1 bytes @ 0xC
  2723                           
  2724                           
  2725                           ; 1 bytes @ 0xC
  2726  002C                     	ds	1
  2727  002D                     ?_nrf24l01SendPacket:	
  2728  002D                     nrf24l01InitRegisters@enAA:	
  2729                           ; 1 bytes @ 0xD
  2730                           
  2731  002D                     ___lldiv@counter:	
  2732                           ; 1 bytes @ 0xD
  2733                           
  2734  002D                     ___awtoft@sign:	
  2735                           ; 1 bytes @ 0xD
  2736                           
  2737  002D                     ___lltoft@exp:	
  2738                           ; 1 bytes @ 0xD
  2739                           
  2740  002D                     nrf24l01SendPacket@txPacket:	
  2741                           ; 1 bytes @ 0xD
  2742                           
  2743                           
  2744                           ; 2 bytes @ 0xD
  2745  002D                     	ds	1
  2746  002E                     ?___ftadd:	
  2747  002E                     ?___llmod:	
  2748                           ; 3 bytes @ 0xE
  2749                           
  2750  002E                     nrf24l01InitRegisters@DynPD:	
  2751                           ; 4 bytes @ 0xE
  2752                           
  2753  002E                     ___ftadd@f1:	
  2754                           ; 1 bytes @ 0xE
  2755                           
  2756  002E                     ___llmod@divisor:	
  2757                           ; 3 bytes @ 0xE
  2758                           
  2759                           
  2760                           ; 4 bytes @ 0xE
  2761  002E                     	ds	1
  2762  002F                     ??_nrf24l01SendPacket:	
  2763  002F                     ___lbtoft@c:	
  2764                           ; 1 bytes @ 0xF
  2765                           
  2766  002F                     nrf24l01InitRegisters@i:	
  2767                           ; 1 bytes @ 0xF
  2768                           
  2769                           
  2770                           ; 2 bytes @ 0xF
  2771  002F                     	ds	2
  2772  0031                     ??_nrf24l01Init:	
  2773  0031                     ___ftadd@f2:	
  2774                           ; 1 bytes @ 0x11
  2775                           
  2776                           
  2777                           ; 3 bytes @ 0x11
  2778  0031                     	ds	1
  2779  0032                     ___llmod@dividend:	
  2780                           
  2781                           ; 4 bytes @ 0x12
  2782  0032                     	ds	2
  2783  0034                     ??___ftadd:	
  2784                           
  2785                           ; 1 bytes @ 0x14
  2786  0034                     	ds	2
  2787  0036                     ??___llmod:	
  2788                           
  2789                           ; 1 bytes @ 0x16
  2790  0036                     	ds	1
  2791  0037                     ___llmod@counter:	
  2792                           
  2793                           ; 1 bytes @ 0x17
  2794  0037                     	ds	1
  2795  0038                     ?_sprintf:	
  2796  0038                     ___ftadd@sign:	
  2797                           ; 2 bytes @ 0x18
  2798                           
  2799  0038                     sprintf@f:	
  2800                           ; 1 bytes @ 0x18
  2801                           
  2802                           
  2803                           ; 2 bytes @ 0x18
  2804  0038                     	ds	1
  2805  0039                     ___ftadd@exp2:	
  2806                           
  2807                           ; 1 bytes @ 0x19
  2808  0039                     	ds	1
  2809  003A                     ___ftadd@exp1:	
  2810                           
  2811                           ; 1 bytes @ 0x1A
  2812  003A                     	ds	1
  2813  003B                     ?___ftdiv:	
  2814  003B                     ?___ftsub:	
  2815                           ; 3 bytes @ 0x1B
  2816                           
  2817  003B                     ___ftdiv@f2:	
  2818                           ; 3 bytes @ 0x1B
  2819                           
  2820  003B                     ___ftsub@f2:	
  2821                           ; 3 bytes @ 0x1B
  2822                           
  2823                           
  2824                           ; 3 bytes @ 0x1B
  2825  003B                     	ds	3
  2826  003E                     ___ftdiv@f1:	
  2827  003E                     ___ftsub@f1:	
  2828                           ; 3 bytes @ 0x1E
  2829                           
  2830                           
  2831                           ; 3 bytes @ 0x1E
  2832  003E                     	ds	3
  2833  0041                     ??___ftdiv:	
  2834  0041                     ??___ftsub:	
  2835                           ; 1 bytes @ 0x21
  2836                           
  2837                           
  2838                           ; 1 bytes @ 0x21
  2839  0041                     	ds	1
  2840  0042                     ??_sprintf:	
  2841                           
  2842                           ; 1 bytes @ 0x22
  2843  0042                     	ds	3
  2844  0045                     ___ftdiv@cntr:	
  2845                           
  2846                           ; 1 bytes @ 0x25
  2847  0045                     	ds	1
  2848  0046                     ___ftdiv@f3:	
  2849                           
  2850                           ; 3 bytes @ 0x26
  2851  0046                     	ds	2
  2852  0048                     sprintf@flag:	
  2853                           
  2854                           ; 1 bytes @ 0x28
  2855  0048                     	ds	1
  2856  0049                     sprintf@ap:	
  2857  0049                     ___ftdiv@exp:	
  2858                           ; 1 bytes @ 0x29
  2859                           
  2860                           
  2861                           ; 1 bytes @ 0x29
  2862  0049                     	ds	1
  2863  004A                     ___ftdiv@sign:	
  2864  004A                     sprintf@val:	
  2865                           ; 1 bytes @ 0x2A
  2866                           
  2867                           
  2868                           ; 4 bytes @ 0x2A
  2869  004A                     	ds	1
  2870  004B                     ?_getADCValue:	
  2871                           
  2872                           ; 3 bytes @ 0x2B
  2873  004B                     	ds	3
  2874  004E                     ??_getADCValue:	
  2875  004E                     sprintf@sp:	
  2876                           ; 1 bytes @ 0x2E
  2877                           
  2878                           
  2879                           ; 1 bytes @ 0x2E
  2880  004E                     	ds	1
  2881  004F                     sprintf@width:	
  2882                           
  2883                           ; 2 bytes @ 0x2F
  2884  004F                     	ds	2
  2885  0051                     getADCValue@adcLoop:	
  2886  0051                     sprintf@prec:	
  2887                           ; 2 bytes @ 0x31
  2888                           
  2889                           
  2890                           ; 2 bytes @ 0x31
  2891  0051                     	ds	2
  2892  0053                     getADCValue@channel:	
  2893  0053                     sprintf@c:	
  2894                           ; 1 bytes @ 0x33
  2895                           
  2896                           
  2897                           ; 1 bytes @ 0x33
  2898  0053                     	ds	1
  2899  0054                     getADCValue@adcSum:	
  2900                           
  2901                           ; 3 bytes @ 0x34
  2902  0054                     	ds	3
  2903  0057                     ?___ftmul:	
  2904  0057                     ?___ftneg:	
  2905                           ; 3 bytes @ 0x37
  2906                           
  2907  0057                     ___ftmul@f1:	
  2908                           ; 3 bytes @ 0x37
  2909                           
  2910  0057                     ___ftneg@f1:	
  2911                           ; 3 bytes @ 0x37
  2912                           
  2913                           
  2914                           ; 3 bytes @ 0x37
  2915  0057                     	ds	3
  2916  005A                     ??___ftneg:	
  2917  005A                     ___ftmul@f2:	
  2918                           ; 1 bytes @ 0x3A
  2919                           
  2920                           
  2921                           ; 3 bytes @ 0x3A
  2922  005A                     	ds	3
  2923  005D                     ??___ftmul:	
  2924                           
  2925                           ; 1 bytes @ 0x3D
  2926  005D                     	ds	4
  2927  0061                     ___ftmul@exp:	
  2928                           
  2929                           ; 1 bytes @ 0x41
  2930  0061                     	ds	1
  2931  0062                     ___ftmul@f3_as_product:	
  2932                           
  2933                           ; 3 bytes @ 0x42
  2934  0062                     	ds	3
  2935  0065                     ___ftmul@cntr:	
  2936                           
  2937                           ; 1 bytes @ 0x45
  2938  0065                     	ds	1
  2939  0066                     ___ftmul@sign:	
  2940                           
  2941                           ; 1 bytes @ 0x46
  2942  0066                     	ds	1
  2943  0067                     ?___fttol:	
  2944  0067                     ___fttol@f1:	
  2945                           ; 4 bytes @ 0x47
  2946                           
  2947                           
  2948                           ; 3 bytes @ 0x47
  2949  0067                     	ds	4
  2950  006B                     ??___fttol:	
  2951                           
  2952                           ; 1 bytes @ 0x4B
  2953  006B                     	ds	4
  2954  006F                     ??_ftoa:	
  2955                           
  2956                           ; 1 bytes @ 0x4F
  2957  006F                     	ds	1
  2958  0070                     ??_strcat:	
  2959                           
  2960                           	psect	maintext
  2961  0BD1                     __pmaintext:	
  2962                           ; 1 bytes @ 0x50
  2963 ;;
  2964 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2965 ;;
  2966 ;; *************** function _main *****************
  2967 ;; Defined at:
  2968 ;;		line 147 in file "main.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;		None
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;  packet         33   38[BANK1 ] struct .
  2973 ;;  pipe            1   37[BANK1 ] unsigned char 
  2974 ;; Return value:  Size  Location     Type
  2975 ;;                  1    wreg      void 
  2976 ;; Registers used:
  2977 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2978 ;; Tracked objects:
  2979 ;;		On entry : B1F/0
  2980 ;;		On exit  : 0/0
  2981 ;;		Unchanged: 0/0
  2982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2984 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  2985 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  2986 ;;      Totals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  2987 ;;Total ram usage:       35 bytes
  2988 ;; Hardware stack levels required when called:   17
  2989 ;; This function calls:
  2990 ;;		___lwtoft
  2991 ;;		_loop
  2992 ;;		_nrf24l01GetPipe
  2993 ;;		_nrf24l01Init
  2994 ;;		_nrf24l01SetTXPipe
  2995 ;;		_sendMessage
  2996 ;;		_strcpy
  2997 ;; This function is called by:
  2998 ;;		Startup code after reset
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002                           
  3003                           ;psect for function _main
  3004  0BD1                     _main:	
  3005                           
  3006                           ;main.c: 150: ANSELA = 0x00;
  3007                           
  3008                           ;incstack = 0
  3009 ;; hardware stack exceeded
  3010                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3011  0BD1  0023               	movlb	3	; select bank3
  3012  0BD2  018C               	clrf	12	;volatile
  3013                           
  3014                           ;main.c: 151: ANSELC = 0x00;
  3015  0BD3  018E               	clrf	14	;volatile
  3016                           
  3017                           ;main.c: 153: ODCONA = 0x00;
  3018  0BD4  0025               	movlb	5	; select bank5
  3019  0BD5  018C               	clrf	12	;volatile
  3020                           
  3021                           ;main.c: 154: ODCONC = 0x00;
  3022  0BD6  018E               	clrf	14	;volatile
  3023                           
  3024                           ;main.c: 159: INLVLA = 0x00;
  3025  0BD7  0027               	movlb	7	; select bank7
  3026  0BD8  018C               	clrf	12	;volatile
  3027                           
  3028                           ;main.c: 160: INLVLC = 0x00;
  3029  0BD9  018E               	clrf	14	;volatile
  3030                           
  3031                           ;main.c: 162: WPUA = 0x00;
  3032  0BDA  0024               	movlb	4	; select bank4
  3033  0BDB  018C               	clrf	12	;volatile
  3034                           
  3035                           ;main.c: 163: WPUC = 0x00;
  3036  0BDC  018E               	clrf	14	;volatile
  3037                           
  3038                           ;main.c: 165: TRISCbits.TRISC5 = 0;
  3039  0BDD  0021               	movlb	1	; select bank1
  3040  0BDE  128E               	bcf	14,5	;volatile
  3041                           
  3042                           ;main.c: 166: TRISCbits.TRISC4 = 0;
  3043  0BDF  120E               	bcf	14,4	;volatile
  3044                           
  3045                           ;main.c: 168: PORTCbits.RC4 = 0;
  3046  0BE0  0020               	movlb	0	; select bank0
  3047  0BE1  120E               	bcf	14,4	;volatile
  3048                           
  3049                           ;main.c: 175: INTCONbits.PEIE = 0;
  3050  0BE2  130B               	bcf	11,6	;volatile
  3051                           
  3052                           ;main.c: 176: INTCONbits.GIE = 0;
  3053  0BE3  138B               	bcf	11,7	;volatile
  3054                           
  3055                           ;main.c: 178: OSCCON1bits.NOSC = 0b000;
  3056  0BE4  308F               	movlw	-113
  3057  0BE5  0032               	movlb	18	; select bank18
  3058  0BE6  0599               	andwf	25,f	;volatile
  3059                           
  3060                           ;main.c: 179: OSCCON1bits.NDIV = 0b000;
  3061  0BE7  30F0               	movlw	-16
  3062  0BE8  0599               	andwf	25,f	;volatile
  3063                           
  3064                           ;main.c: 181: _delay((unsigned long)((10)*(32000000/4000.0)));
  3065  0BE9  3068               	movlw	104
  3066  0BEA  0021               	movlb	1	; select bank1
  3067  0BEB  00C4               	movwf	??_main^(0+128)
  3068  0BEC  30E4               	movlw	228
  3069  0BED                     u4447:	
  3070  0BED  0B89               	decfsz	9,f
  3071  0BEE  2BED               	goto	u4447
  3072  0BEF  0BC4               	decfsz	??_main^(0+128),f
  3073  0BF0  2BED               	goto	u4447
  3074  0BF1  0000               	nop
  3075                           
  3076                           ;main.c: 185: strcpy(romData->name, "UH1");
  3077  0BF2  0021               	movlb	1	; select bank1
  3078  0BF3  086B               	movf	_romData^(0+128),w
  3079  0BF4  3E01               	addlw	1
  3080  0BF5  0020               	movlb	0	; select bank0
  3081  0BF6  00A0               	movwf	strcpy@to
  3082  0BF7  3002               	movlw	2
  3083  0BF8  00A1               	movwf	strcpy@to+1
  3084  0BF9  3064               	movlw	low (STR_8| (0+32768))
  3085  0BFA  00A2               	movwf	strcpy@from
  3086  0BFB  3098               	movlw	high (STR_8| (0+32768))
  3087  0BFC  00A3               	movwf	strcpy@from+1
  3088  0BFD  3187  27E5  318B   	fcall	_strcpy
  3089                           
  3090                           ;main.c: 187: nrf24l01Init();
  3091  0C00  3189  211B  318B   	fcall	_nrf24l01Init
  3092                           
  3093                           ;main.c: 189: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3094  0C03  0021               	movlb	1	; select bank1
  3095  0C04  086B               	movf	_romData^(0+128),w
  3096  0C05  3E01               	addlw	1
  3097  0C06  3188  2024  318B   	fcall	_nrf24l01GetPipe
  3098  0C09  0021               	movlb	1	; select bank1
  3099  0C0A  00C4               	movwf	??_main^(0+128)
  3100  0C0B  0844               	movf	??_main^(0+128),w
  3101  0C0C  00C5               	movwf	main@pipe^(0+128)
  3102                           
  3103                           ;main.c: 190: nrf24l01SetTXPipe(pipe);
  3104  0C0D  0845               	movf	main@pipe^(0+128),w
  3105  0C0E  3189  215E  318B   	fcall	_nrf24l01SetTXPipe
  3106                           
  3107                           ;main.c: 195: ADCON0bits.ADON = 0;
  3108  0C11  0021               	movlb	1	; select bank1
  3109  0C12  101D               	bcf	29,0	;volatile
  3110                           
  3111                           ;main.c: 198: PORTAbits.RA4 = 0;
  3112  0C13  0020               	movlb	0	; select bank0
  3113  0C14  120C               	bcf	12,4	;volatile
  3114                           
  3115                           ;main.c: 199: TRISAbits.TRISA4 = 1;
  3116  0C15  0021               	movlb	1	; select bank1
  3117  0C16  160C               	bsf	12,4	;volatile
  3118                           
  3119                           ;main.c: 200: WPUAbits.WPUA4 = 0;
  3120  0C17  0024               	movlb	4	; select bank4
  3121  0C18  120C               	bcf	12,4	;volatile
  3122                           
  3123                           ;main.c: 201: ODCONAbits.ODCA4 = 1;
  3124  0C19  0025               	movlb	5	; select bank5
  3125  0C1A  160C               	bsf	12,4	;volatile
  3126                           
  3127                           ;main.c: 202: ANSELAbits.ANSA4 = 1;
  3128  0C1B  0023               	movlb	3	; select bank3
  3129  0C1C  160C               	bsf	12,4	;volatile
  3130                           
  3131                           ;main.c: 205: ANSELCbits.ANSC3 = 1;
  3132  0C1D  158E               	bsf	14,3	;volatile
  3133                           
  3134                           ;main.c: 206: TRISCbits.TRISC3 = 1;
  3135  0C1E  0021               	movlb	1	; select bank1
  3136  0C1F  158E               	bsf	14,3	;volatile
  3137                           
  3138                           ;main.c: 209: FVRCONbits.TSEN = 1;
  3139  0C20  0022               	movlb	2	; select bank2
  3140  0C21  1697               	bsf	23,5	;volatile
  3141                           
  3142                           ;main.c: 210: FVRCONbits.TSRNG = 1;
  3143  0C22  1617               	bsf	23,4	;volatile
  3144                           
  3145                           ;main.c: 213: FVRCONbits.FVREN = 0;
  3146  0C23  1397               	bcf	23,7	;volatile
  3147                           
  3148                           ;main.c: 214: FVRCONbits.ADFVR = 0b10;
  3149  0C24  0817               	movf	23,w	;volatile
  3150  0C25  39FC               	andlw	-4
  3151  0C26  3802               	iorlw	2
  3152  0C27  0097               	movwf	23	;volatile
  3153                           
  3154                           ;main.c: 216: ADCON1bits.ADCS = 0b111;
  3155  0C28  3070               	movlw	112
  3156  0C29  0021               	movlb	1	; select bank1
  3157  0C2A  049E               	iorwf	30,f	;volatile
  3158                           
  3159                           ;main.c: 217: ADCON1bits.ADFM = 1;
  3160  0C2B  179E               	bsf	30,7	;volatile
  3161                           
  3162                           ;main.c: 218: ADCON1bits.ADPREF = 0b11;
  3163  0C2C  3003               	movlw	3
  3164  0C2D  049E               	iorwf	30,f	;volatile
  3165                           
  3166                           ;main.c: 219: ADCON1bits.ADNREF = 0b00;
  3167  0C2E  111E               	bcf	30,2	;volatile
  3168                           
  3169                           ;main.c: 222: ADCON0bits.CHS = 3;
  3170  0C2F  081D               	movf	29,w	;volatile
  3171  0C30  3903               	andlw	-253
  3172  0C31  380C               	iorlw	12
  3173  0C32  009D               	movwf	29	;volatile
  3174                           
  3175                           ;main.c: 227: TRISAbits.TRISA2 = 1;
  3176  0C33  150C               	bsf	12,2	;volatile
  3177                           
  3178                           ;main.c: 228: PIE0bits.INTE = 1;
  3179  0C34  1410               	bsf	16,0	;volatile
  3180                           
  3181                           ;main.c: 229: INTCONbits.INTEDG = 0;
  3182  0C35  100B               	bcf	11,0	;volatile
  3183                           
  3184                           ;main.c: 232: TRISAbits.TRISA5 = 0;
  3185  0C36  128C               	bcf	12,5	;volatile
  3186                           
  3187                           ;main.c: 233: PORTAbits.RA5 = 0;
  3188  0C37  0020               	movlb	0	; select bank0
  3189  0C38  128C               	bcf	12,5	;volatile
  3190                           
  3191                           ;main.c: 236: INTCONbits.PEIE = 1;
  3192  0C39  170B               	bsf	11,6	;volatile
  3193                           
  3194                           ;main.c: 237: INTCONbits.GIE = 1;
  3195  0C3A  178B               	bsf	11,7	;volatile
  3196                           
  3197                           ;main.c: 239: nrf24l01Packet_t packet;;main.c: 241: sendMessage(&packet, "BOOT", romData
      +                          ->bootMode);
  3198  0C3B  30C6               	movlw	low main@packet
  3199  0C3C  0021               	movlb	1	; select bank1
  3200  0C3D  00B9               	movwf	sendMessage@packet^(0+128)
  3201  0C3E  3000               	movlw	high main@packet
  3202  0C3F  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  3203  0C40  305F               	movlw	low (STR_9| (0+32768))
  3204  0C41  00BB               	movwf	sendMessage@topic^(0+128)
  3205  0C42  3098               	movlw	high (STR_9| (0+32768))
  3206  0C43  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  3207  0C44  086B               	movf	_romData^(0+128),w
  3208  0C45  3E11               	addlw	17
  3209  0C46  0086               	movwf	6
  3210  0C47  3002               	movlw	2	; select bank4/5
  3211  0C48  0087               	movwf	7
  3212  0C49  3F40               	moviw [0]fsr1
  3213  0C4A  0020               	movlb	0	; select bank0
  3214  0C4B  00A8               	movwf	___lwtoft@c
  3215  0C4C  3F41               	moviw [1]fsr1
  3216  0C4D  00A9               	movwf	___lwtoft@c+1
  3217  0C4E  3195  253A  318B   	fcall	___lwtoft
  3218  0C51  0020               	movlb	0	; select bank0
  3219  0C52  0828               	movf	?___lwtoft,w
  3220  0C53  0021               	movlb	1	; select bank1
  3221  0C54  00BD               	movwf	sendMessage@value^(0+128)
  3222  0C55  0020               	movlb	0	; select bank0
  3223  0C56  0829               	movf	?___lwtoft+1,w
  3224  0C57  0021               	movlb	1	; select bank1
  3225  0C58  00BE               	movwf	(sendMessage@value+1)^(0+128)
  3226  0C59  0020               	movlb	0	; select bank0
  3227  0C5A  082A               	movf	?___lwtoft+2,w
  3228  0C5B  0021               	movlb	1	; select bank1
  3229  0C5C  00BF               	movwf	(sendMessage@value+2)^(0+128)
  3230  0C5D  318B  2347  318B   	fcall	_sendMessage
  3231  0C60                     l4306:	
  3232                           ;main.c: 243: while(1){
  3233                           
  3234                           
  3235                           ;main.c: 244: loop();
  3236  0C60  3183  2358  318B   	fcall	_loop
  3237  0C63  2C60               	goto	l4306
  3238  0C64                     __end_of_main:	
  3239                           ;main.c: 245: };main.c: 247: return;
  3240                           
  3241                           
  3242                           	psect	text1
  3243  091B                     __ptext1:	
  3244 ;; *************** function _nrf24l01Init *****************
  3245 ;; Defined at:
  3246 ;;		line 499 in file "nrf24l01.c"
  3247 ;; Parameters:    Size  Location     Type
  3248 ;;		None
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;		None
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  1    wreg      void 
  3253 ;; Registers used:
  3254 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3262 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3263 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3264 ;;Total ram usage:        2 bytes
  3265 ;; Hardware stack levels used:    1
  3266 ;; Hardware stack levels required when called:   13
  3267 ;; This function calls:
  3268 ;;		_nrf24l01CEHigh
  3269 ;;		_nrf24l01CELow
  3270 ;;		_nrf24l01InitRegisters
  3271 ;;		_nrf24l01InterfaceInit
  3272 ;; This function is called by:
  3273 ;;		_main
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           
  3278                           ;psect for function _nrf24l01Init
  3279  091B                     _nrf24l01Init:	
  3280                           
  3281                           ;nrf24l01.c: 502: nrf24l01InterfaceInit();
  3282                           
  3283                           ;incstack = 0
  3284                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3285  091B  3196  260E  3189   	fcall	_nrf24l01InterfaceInit
  3286                           
  3287                           ;nrf24l01.c: 507: nrf24l01CELow();
  3288  091E  3194  24DD  3189   	fcall	_nrf24l01CELow
  3289                           
  3290                           ;nrf24l01.c: 509: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3291  0921  3003               	movlw	3
  3292  0922  0020               	movlb	0	; select bank0
  3293  0923  00B2               	movwf	??_nrf24l01Init+1
  3294  0924  3008               	movlw	8
  3295  0925  00B1               	movwf	??_nrf24l01Init
  3296  0926  3077               	movlw	119
  3297  0927                     u4457:	
  3298  0927  0B89               	decfsz	9,f
  3299  0928  2927               	goto	u4457
  3300  0929  0BB1               	decfsz	??_nrf24l01Init,f
  3301  092A  2927               	goto	u4457
  3302  092B  0BB2               	decfsz	??_nrf24l01Init+1,f
  3303  092C  2927               	goto	u4457
  3304                           
  3305                           ;nrf24l01.c: 511: nrf24l01InitRegisters();
  3306  092D  3185  25D1  3189   	fcall	_nrf24l01InitRegisters
  3307                           
  3308                           ;nrf24l01.c: 513: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3309  0930  3003               	movlw	3
  3310  0931  0020               	movlb	0	; select bank0
  3311  0932  00B2               	movwf	??_nrf24l01Init+1
  3312  0933  3008               	movlw	8
  3313  0934  00B1               	movwf	??_nrf24l01Init
  3314  0935  3077               	movlw	119
  3315  0936                     u4467:	
  3316  0936  0B89               	decfsz	9,f
  3317  0937  2936               	goto	u4467
  3318  0938  0BB1               	decfsz	??_nrf24l01Init,f
  3319  0939  2936               	goto	u4467
  3320  093A  0BB2               	decfsz	??_nrf24l01Init+1,f
  3321  093B  2936               	goto	u4467
  3322                           
  3323                           ;nrf24l01.c: 515: nrf24l01CEHigh();
  3324  093C  3194  24DA         	fcall	_nrf24l01CEHigh
  3325                           
  3326                           ;nrf24l01.c: 517: status.TX = statuses.TX.Idle;
  3327  093E  3034               	movlw	low (_statuses| (0+32768))
  3328  093F  0084               	movwf	4
  3329  0940  3098               	movlw	high (_statuses| (0+32768))
  3330  0941  0085               	movwf	5
  3331  0942  0800               	movf	0,w	;code access
  3332  0943  0020               	movlb	0	; select bank0
  3333  0944  00B1               	movwf	??_nrf24l01Init
  3334  0945  0021               	movlb	1	; select bank1
  3335  0946  0867               	movf	_status^(0+128),w	;volatile
  3336  0947  0020               	movlb	0	; select bank0
  3337  0948  0631               	xorwf	??_nrf24l01Init,w
  3338  0949  39F0               	andlw	-16
  3339  094A  0631               	xorwf	??_nrf24l01Init,w
  3340  094B  0021               	movlb	1	; select bank1
  3341  094C  00E7               	movwf	_status^(0+128)	;volatile
  3342                           
  3343                           ;nrf24l01.c: 518: status.RX = statuses.RX.Idle;
  3344  094D  3038               	movlw	low ((_statuses+4)| (0+32768))
  3345  094E  0084               	movwf	4
  3346  094F  3098               	movlw	high ((_statuses+4)| (0+32768))
  3347  0950  0085               	movwf	5
  3348  0951  0800               	movf	0,w	;code access
  3349  0952  0020               	movlb	0	; select bank0
  3350  0953  00B1               	movwf	??_nrf24l01Init
  3351  0954  0EB1               	swapf	??_nrf24l01Init,f
  3352  0955  0021               	movlb	1	; select bank1
  3353  0956  0867               	movf	_status^(0+128),w	;volatile
  3354  0957  0020               	movlb	0	; select bank0
  3355  0958  0631               	xorwf	??_nrf24l01Init,w
  3356  0959  390F               	andlw	-241
  3357  095A  0631               	xorwf	??_nrf24l01Init,w
  3358  095B  0021               	movlb	1	; select bank1
  3359  095C  00E7               	movwf	_status^(0+128)	;volatile
  3360  095D  0008               	return
  3361  095E                     __end_of_nrf24l01Init:	
  3362                           
  3363                           	psect	text2
  3364  160E                     __ptext2:	
  3365 ;; *************** function _nrf24l01InterfaceInit *****************
  3366 ;; Defined at:
  3367 ;;		line 27 in file "interface.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;		None
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;		None
  3372 ;; Return value:  Size  Location     Type
  3373 ;;                  1    wreg      void 
  3374 ;; Registers used:
  3375 ;;		wreg, status,2, status,0
  3376 ;; Tracked objects:
  3377 ;;		On entry : 0/0
  3378 ;;		On exit  : 0/0
  3379 ;;		Unchanged: 0/0
  3380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3385 ;;Total ram usage:        0 bytes
  3386 ;; Hardware stack levels used:    1
  3387 ;; Hardware stack levels required when called:    8
  3388 ;; This function calls:
  3389 ;;		Nothing
  3390 ;; This function is called by:
  3391 ;;		_nrf24l01Init
  3392 ;; This function uses a non-reentrant model
  3393 ;;
  3394                           
  3395                           
  3396                           ;psect for function _nrf24l01InterfaceInit
  3397  160E                     _nrf24l01InterfaceInit:	
  3398                           
  3399                           ;interface.c: 29: TRISAbits.TRISA0 = 0;
  3400                           
  3401                           ;incstack = 0
  3402                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3403  160E  0021               	movlb	1	; select bank1
  3404  160F  100C               	bcf	12,0	;volatile
  3405                           
  3406                           ;interface.c: 30: TRISAbits.TRISA1 = 0;
  3407  1610  108C               	bcf	12,1	;volatile
  3408                           
  3409                           ;interface.c: 32: TRISCbits.TRISC1 = 1;
  3410  1611  148E               	bsf	14,1	;volatile
  3411                           
  3412                           ;interface.c: 33: TRISCbits.TRISC2 = 0;
  3413  1612  110E               	bcf	14,2	;volatile
  3414                           
  3415                           ;interface.c: 34: TRISCbits.TRISC0 = 0;
  3416  1613  100E               	bcf	14,0	;volatile
  3417                           
  3418                           ;interface.c: 36: SSP1CON1bits.SSPEN = 0;
  3419  1614  0024               	movlb	4	; select bank4
  3420  1615  1295               	bcf	21,5	;volatile
  3421                           
  3422                           ;interface.c: 38: RC1PPSbits.RC1PPS = 0b10001;
  3423  1616  003D               	movlb	29	; select bank29
  3424  1617  0821               	movf	33,w	;volatile
  3425  1618  39E0               	andlw	-32
  3426  1619  3811               	iorlw	17
  3427  161A  00A1               	movwf	33	;volatile
  3428                           
  3429                           ;interface.c: 39: RC2PPSbits.RC2PPS = 0b11001;
  3430  161B  0822               	movf	34,w	;volatile
  3431  161C  39E0               	andlw	-32
  3432  161D  3819               	iorlw	25
  3433  161E  00A2               	movwf	34	;volatile
  3434                           
  3435                           ;interface.c: 40: RC0PPSbits.RC0PPS = 0b11000;
  3436  161F  0820               	movf	32,w	;volatile
  3437  1620  39E0               	andlw	-32
  3438  1621  3818               	iorlw	24
  3439  1622  00A0               	movwf	32	;volatile
  3440                           
  3441                           ;interface.c: 42: SSP1CON1bits.CKP = 0;
  3442  1623  0024               	movlb	4	; select bank4
  3443  1624  1215               	bcf	21,4	;volatile
  3444                           
  3445                           ;interface.c: 43: SSP1STATbits.CKE = 1;
  3446  1625  1714               	bsf	20,6	;volatile
  3447                           
  3448                           ;interface.c: 44: SSP1CON1bits.SSPM = 0b0001;
  3449  1626  0815               	movf	21,w	;volatile
  3450  1627  39F0               	andlw	-16
  3451  1628  3801               	iorlw	1
  3452  1629  0095               	movwf	21	;volatile
  3453                           
  3454                           ;interface.c: 46: SSP1CON1bits.SSPEN = 1;
  3455  162A  1695               	bsf	21,5	;volatile
  3456  162B  0008               	return
  3457  162C                     __end_of_nrf24l01InterfaceInit:	
  3458                           
  3459                           	psect	text3
  3460  05D1                     __ptext3:	
  3461 ;; *************** function _nrf24l01InitRegisters *****************
  3462 ;; Defined at:
  3463 ;;		line 399 in file "nrf24l01.c"
  3464 ;; Parameters:    Size  Location     Type
  3465 ;;		None
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;  i               2   15[BANK0 ] unsigned int 
  3468 ;;  DynPD           1   14[BANK0 ] struct .
  3469 ;;  enAA            1   13[BANK0 ] struct .
  3470 ;;  rfSetup         1   12[BANK0 ] struct .
  3471 ;;  feature         1   11[BANK0 ] struct .
  3472 ;;  setupAW         1   10[BANK0 ] struct .
  3473 ;;  channel         1    9[BANK0 ] struct .
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  1    wreg      void 
  3476 ;; Registers used:
  3477 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3484 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3485 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3486 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3487 ;;Total ram usage:       10 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:   12
  3490 ;; This function calls:
  3491 ;;		___bmul
  3492 ;;		_nrf24l01SPIEnd
  3493 ;;		_nrf24l01SPISend
  3494 ;;		_nrf24l01SPIStart
  3495 ;;		_nrf24l01Send
  3496 ;;		_nrf24l01SetRXPipe
  3497 ;;		_nrf24l01SetTXPipe
  3498 ;; This function is called by:
  3499 ;;		_nrf24l01Init
  3500 ;; This function uses a non-reentrant model
  3501 ;;
  3502                           
  3503                           
  3504                           ;psect for function _nrf24l01InitRegisters
  3505  05D1                     _nrf24l01InitRegisters:	
  3506                           
  3507                           ;nrf24l01.c: 401: status.configRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x00, 0);
  3508                           
  3509                           ;incstack = 0
  3510                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3511  05D1  0020               	movlb	0	; select bank0
  3512  05D2  01A0               	clrf	nrf24l01Send@data
  3513  05D3  3000               	movlw	0
  3514  05D4  3196  264B  3185   	fcall	_nrf24l01Send
  3515  05D7  0020               	movlb	0	; select bank0
  3516  05D8  00A7               	movwf	??_nrf24l01InitRegisters
  3517  05D9  0827               	movf	??_nrf24l01InitRegisters,w
  3518  05DA  0021               	movlb	1	; select bank1
  3519  05DB  00E9               	movwf	(_status^(0+128)+2)	;volatile
  3520                           
  3521                           ;nrf24l01.c: 403: status.configRegister.PWR_UP = 0;
  3522  05DC  10E9               	bcf	(_status^(0+128)+2),1	;volatile
  3523                           
  3524                           ;nrf24l01.c: 404: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3525  05DD  0869               	movf	(_status^(0+128)+2),w	;volatile
  3526  05DE  0020               	movlb	0	; select bank0
  3527  05DF  00A7               	movwf	??_nrf24l01InitRegisters
  3528  05E0  0827               	movf	??_nrf24l01InitRegisters,w
  3529  05E1  00A0               	movwf	nrf24l01Send@data
  3530  05E2  3020               	movlw	32
  3531  05E3  3196  264B  3185   	fcall	_nrf24l01Send
  3532                           
  3533                           ;nrf24l01.c: 406: n_SETUP_AW_t setupAW;;nrf24l01.c: 407: setupAW.byte = 0x00;
  3534  05E6  0020               	movlb	0	; select bank0
  3535  05E7  01AA               	clrf	nrf24l01InitRegisters@setupAW
  3536                           
  3537                           ;nrf24l01.c: 408: setupAW.AW = 0b11;
  3538  05E8  3003               	movlw	3
  3539  05E9  04AA               	iorwf	nrf24l01InitRegisters@setupAW,f
  3540                           
  3541                           ;nrf24l01.c: 409: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x03, setupAW.byte);
  3542  05EA  082A               	movf	nrf24l01InitRegisters@setupAW,w
  3543  05EB  00A7               	movwf	??_nrf24l01InitRegisters
  3544  05EC  0827               	movf	??_nrf24l01InitRegisters,w
  3545  05ED  00A0               	movwf	nrf24l01Send@data
  3546  05EE  3023               	movlw	35
  3547  05EF  3196  264B  3185   	fcall	_nrf24l01Send
  3548                           
  3549                           ;nrf24l01.c: 412: n_RF_CH_t channel;;nrf24l01.c: 413: channel.RF_CH = 2;
  3550  05F2  0020               	movlb	0	; select bank0
  3551  05F3  0829               	movf	nrf24l01InitRegisters@channel,w
  3552  05F4  3980               	andlw	-128
  3553  05F5  3802               	iorlw	2
  3554  05F6  00A9               	movwf	nrf24l01InitRegisters@channel
  3555                           
  3556                           ;nrf24l01.c: 414: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3557  05F7  0829               	movf	nrf24l01InitRegisters@channel,w
  3558  05F8  00A7               	movwf	??_nrf24l01InitRegisters
  3559  05F9  0827               	movf	??_nrf24l01InitRegisters,w
  3560  05FA  00A0               	movwf	nrf24l01Send@data
  3561  05FB  3025               	movlw	37
  3562  05FC  3196  264B  3185   	fcall	_nrf24l01Send
  3563                           
  3564                           ;nrf24l01.c: 417: n_RF_SETUP_t rfSetup;;nrf24l01.c: 418: rfSetup.byte = 0x00;
  3565  05FF  0020               	movlb	0	; select bank0
  3566  0600  01AC               	clrf	nrf24l01InitRegisters@rfSetup
  3567                           
  3568                           ;nrf24l01.c: 419: rfSetup.RF_DR_LOW = 0;
  3569  0601  12AC               	bcf	nrf24l01InitRegisters@rfSetup,5
  3570                           
  3571                           ;nrf24l01.c: 420: rfSetup.RF_DR_HIGH = 1;
  3572  0602  15AC               	bsf	nrf24l01InitRegisters@rfSetup,3
  3573                           
  3574                           ;nrf24l01.c: 421: rfSetup.RF_PWR = 3;
  3575  0603  3006               	movlw	6
  3576  0604  04AC               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3577                           
  3578                           ;nrf24l01.c: 422: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3579  0605  082C               	movf	nrf24l01InitRegisters@rfSetup,w
  3580  0606  00A7               	movwf	??_nrf24l01InitRegisters
  3581  0607  0827               	movf	??_nrf24l01InitRegisters,w
  3582  0608  00A0               	movwf	nrf24l01Send@data
  3583  0609  3026               	movlw	38
  3584  060A  3196  264B  3185   	fcall	_nrf24l01Send
  3585                           
  3586                           ;nrf24l01.c: 425: nrf24l01SetRXPipe(0xFF);
  3587  060D  30FF               	movlw	255
  3588  060E  3196  266B  3185   	fcall	_nrf24l01SetRXPipe
  3589                           
  3590                           ;nrf24l01.c: 428: n_EN_AA_t enAA;;nrf24l01.c: 429: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3591  0611  0020               	movlb	0	; select bank0
  3592  0612  01A0               	clrf	nrf24l01Send@data
  3593  0613  3001               	movlw	1
  3594  0614  3196  264B  3185   	fcall	_nrf24l01Send
  3595  0617  0020               	movlb	0	; select bank0
  3596  0618  00A7               	movwf	??_nrf24l01InitRegisters
  3597  0619  0827               	movf	??_nrf24l01InitRegisters,w
  3598  061A  00AD               	movwf	nrf24l01InitRegisters@enAA
  3599                           
  3600                           ;nrf24l01.c: 430: enAA.ENAA_P0 = 0;
  3601  061B  102D               	bcf	nrf24l01InitRegisters@enAA,0
  3602                           
  3603                           ;nrf24l01.c: 431: enAA.ENAA_P1 = 0;
  3604  061C  10AD               	bcf	nrf24l01InitRegisters@enAA,1
  3605                           
  3606                           ;nrf24l01.c: 432: enAA.ENAA_P2 = 0;
  3607  061D  112D               	bcf	nrf24l01InitRegisters@enAA,2
  3608                           
  3609                           ;nrf24l01.c: 433: enAA.ENAA_P3 = 0;
  3610  061E  11AD               	bcf	nrf24l01InitRegisters@enAA,3
  3611                           
  3612                           ;nrf24l01.c: 434: enAA.ENAA_P4 = 0;
  3613  061F  122D               	bcf	nrf24l01InitRegisters@enAA,4
  3614                           
  3615                           ;nrf24l01.c: 435: enAA.ENAA_P5 = 0;
  3616  0620  12AD               	bcf	nrf24l01InitRegisters@enAA,5
  3617                           
  3618                           ;nrf24l01.c: 436: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3619  0621  082D               	movf	nrf24l01InitRegisters@enAA,w
  3620  0622  00A7               	movwf	??_nrf24l01InitRegisters
  3621  0623  0827               	movf	??_nrf24l01InitRegisters,w
  3622  0624  00A0               	movwf	nrf24l01Send@data
  3623  0625  3021               	movlw	33
  3624  0626  3196  264B  3185   	fcall	_nrf24l01Send
  3625                           
  3626                           ;nrf24l01.c: 440: n_FEATURE_t feature;;nrf24l01.c: 441: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3627  0629  0020               	movlb	0	; select bank0
  3628  062A  01A0               	clrf	nrf24l01Send@data
  3629  062B  301D               	movlw	29
  3630  062C  3196  264B  3185   	fcall	_nrf24l01Send
  3631  062F  0020               	movlb	0	; select bank0
  3632  0630  00A7               	movwf	??_nrf24l01InitRegisters
  3633  0631  0827               	movf	??_nrf24l01InitRegisters,w
  3634  0632  00AB               	movwf	nrf24l01InitRegisters@feature
  3635                           
  3636                           ;nrf24l01.c: 442: feature.EN_DPL = 1;
  3637  0633  152B               	bsf	nrf24l01InitRegisters@feature,2
  3638                           
  3639                           ;nrf24l01.c: 443: feature.EN_DYN_ACK = 1;
  3640  0634  142B               	bsf	nrf24l01InitRegisters@feature,0
  3641                           
  3642                           ;nrf24l01.c: 444: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3643  0635  082B               	movf	nrf24l01InitRegisters@feature,w
  3644  0636  00A7               	movwf	??_nrf24l01InitRegisters
  3645  0637  0827               	movf	??_nrf24l01InitRegisters,w
  3646  0638  00A0               	movwf	nrf24l01Send@data
  3647  0639  303D               	movlw	61
  3648  063A  3196  264B  3185   	fcall	_nrf24l01Send
  3649                           
  3650                           ;nrf24l01.c: 446: n_DYNPD_t DynPD;;nrf24l01.c: 447: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3651  063D  0020               	movlb	0	; select bank0
  3652  063E  01A0               	clrf	nrf24l01Send@data
  3653  063F  301C               	movlw	28
  3654  0640  3196  264B  3185   	fcall	_nrf24l01Send
  3655  0643  0020               	movlb	0	; select bank0
  3656  0644  00A7               	movwf	??_nrf24l01InitRegisters
  3657  0645  0827               	movf	??_nrf24l01InitRegisters,w
  3658  0646  00AE               	movwf	nrf24l01InitRegisters@DynPD
  3659                           
  3660                           ;nrf24l01.c: 448: DynPD.DPL_P0 = 1;
  3661  0647  142E               	bsf	nrf24l01InitRegisters@DynPD,0
  3662                           
  3663                           ;nrf24l01.c: 449: DynPD.DPL_P1 = 1;
  3664  0648  14AE               	bsf	nrf24l01InitRegisters@DynPD,1
  3665                           
  3666                           ;nrf24l01.c: 450: DynPD.DPL_P2 = 1;
  3667  0649  152E               	bsf	nrf24l01InitRegisters@DynPD,2
  3668                           
  3669                           ;nrf24l01.c: 451: DynPD.DPL_P3 = 1;
  3670  064A  15AE               	bsf	nrf24l01InitRegisters@DynPD,3
  3671                           
  3672                           ;nrf24l01.c: 452: DynPD.DPL_P4 = 1;
  3673  064B  162E               	bsf	nrf24l01InitRegisters@DynPD,4
  3674                           
  3675                           ;nrf24l01.c: 453: DynPD.DPL_P5 = 1;
  3676  064C  16AE               	bsf	nrf24l01InitRegisters@DynPD,5
  3677                           
  3678                           ;nrf24l01.c: 454: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3679  064D  082E               	movf	nrf24l01InitRegisters@DynPD,w
  3680  064E  00A7               	movwf	??_nrf24l01InitRegisters
  3681  064F  0827               	movf	??_nrf24l01InitRegisters,w
  3682  0650  00A0               	movwf	nrf24l01Send@data
  3683  0651  303C               	movlw	60
  3684  0652  3196  264B  3185   	fcall	_nrf24l01Send
  3685                           
  3686                           ;nrf24l01.c: 457: unsigned int i;;nrf24l01.c: 458: for (i = 0; i < 6; i++){
  3687  0655  0020               	movlb	0	; select bank0
  3688  0656  01AF               	clrf	nrf24l01InitRegisters@i
  3689  0657  01B0               	clrf	nrf24l01InitRegisters@i+1
  3690  0658  3000               	movlw	0
  3691  0659  0230               	subwf	nrf24l01InitRegisters@i+1,w
  3692  065A  3006               	movlw	6
  3693  065B  1903               	skipnz
  3694  065C  022F               	subwf	nrf24l01InitRegisters@i,w
  3695  065D  1803               	btfsc	3,0
  3696  065E  2EB8               	goto	l4036
  3697  065F                     l4022:	
  3698                           
  3699                           ;nrf24l01.c: 460: nrf24l01SPIStart();
  3700  065F  3194  24FB  3185   	fcall	_nrf24l01SPIStart
  3701                           
  3702                           ;nrf24l01.c: 461: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  3703  0662  0020               	movlb	0	; select bank0
  3704  0663  082F               	movf	nrf24l01InitRegisters@i,w
  3705  0664  3E0A               	addlw	10
  3706  0665  3820               	iorlw	32
  3707  0666  3195  250C  3185   	fcall	_nrf24l01SPISend
  3708                           
  3709                           ;nrf24l01.c: 463: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  3710  0669  304F               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3711  066A  0084               	movwf	4
  3712  066B  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3713  066C  0085               	movwf	5
  3714  066D  0800               	movf	0,w	;code access
  3715  066E  0020               	movlb	0	; select bank0
  3716  066F  00A7               	movwf	??_nrf24l01InitRegisters
  3717  0670  082F               	movf	nrf24l01InitRegisters@i,w
  3718  0671  00A8               	movwf	??_nrf24l01InitRegisters+1
  3719  0672  0828               	movf	??_nrf24l01InitRegisters+1,w
  3720  0673  00A0               	movwf	___bmul@multiplicand
  3721  0674  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3722  0675  0084               	movwf	4
  3723  0676  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3724  0677  0085               	movwf	5
  3725  0678  0800               	movf	0,w	;code access
  3726  0679  3195  2528  3185   	fcall	___bmul
  3727  067C  0020               	movlb	0	; select bank0
  3728  067D  0727               	addwf	??_nrf24l01InitRegisters,w
  3729  067E  3195  250C  3185   	fcall	_nrf24l01SPISend
  3730                           
  3731                           ;nrf24l01.c: 465: if (i < 2){
  3732  0681  3000               	movlw	0
  3733  0682  0020               	movlb	0	; select bank0
  3734  0683  0230               	subwf	nrf24l01InitRegisters@i+1,w
  3735  0684  3002               	movlw	2
  3736  0685  1903               	skipnz
  3737  0686  022F               	subwf	nrf24l01InitRegisters@i,w
  3738  0687  1803               	skipnc
  3739  0688  2EA9               	goto	l4030
  3740                           
  3741                           ;nrf24l01.c: 466: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3742  0689  304E               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3743  068A  0084               	movwf	4
  3744  068B  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3745  068C  0085               	movwf	5
  3746  068D  0800               	movf	0,w	;code access
  3747  068E  3195  250C  3185   	fcall	_nrf24l01SPISend
  3748                           
  3749                           ;nrf24l01.c: 467: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3750  0691  304D               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3751  0692  0084               	movwf	4
  3752  0693  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3753  0694  0085               	movwf	5
  3754  0695  0800               	movf	0,w	;code access
  3755  0696  3195  250C  3185   	fcall	_nrf24l01SPISend
  3756                           
  3757                           ;nrf24l01.c: 468: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3758  0699  304C               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3759  069A  0084               	movwf	4
  3760  069B  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3761  069C  0085               	movwf	5
  3762  069D  0800               	movf	0,w	;code access
  3763  069E  3195  250C  3185   	fcall	_nrf24l01SPISend
  3764                           
  3765                           ;nrf24l01.c: 469: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3766  06A1  304B               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3767  06A2  0084               	movwf	4
  3768  06A3  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3769  06A4  0085               	movwf	5
  3770  06A5  0800               	movf	0,w	;code access
  3771  06A6  3195  250C  3185   	fcall	_nrf24l01SPISend
  3772  06A9                     l4030:	
  3773                           
  3774                           ;nrf24l01.c: 470: };nrf24l01.c: 472: nrf24l01SPIEnd();
  3775  06A9  3194  24EC  3185   	fcall	_nrf24l01SPIEnd
  3776  06AC  3001               	movlw	1
  3777  06AD  0020               	movlb	0	; select bank0
  3778  06AE  07AF               	addwf	nrf24l01InitRegisters@i,f
  3779  06AF  3000               	movlw	0
  3780  06B0  3DB0               	addwfc	nrf24l01InitRegisters@i+1,f
  3781  06B1  3000               	movlw	0
  3782  06B2  0230               	subwf	nrf24l01InitRegisters@i+1,w
  3783  06B3  3006               	movlw	6
  3784  06B4  1903               	skipnz
  3785  06B5  022F               	subwf	nrf24l01InitRegisters@i,w
  3786  06B6  1C03               	skipc
  3787  06B7  2E5F               	goto	l4022
  3788  06B8                     l4036:	
  3789                           
  3790                           ;nrf24l01.c: 473: };nrf24l01.c: 475: nrf24l01SetTXPipe(0);
  3791  06B8  3000               	movlw	0
  3792  06B9  3189  215E  3185   	fcall	_nrf24l01SetTXPipe
  3793                           
  3794                           ;nrf24l01.c: 479: status.statusRegister.byte = 0x00;
  3795  06BC  0021               	movlb	1	; select bank1
  3796  06BD  01E8               	clrf	(_status^(0+128)+1)	;volatile
  3797                           
  3798                           ;nrf24l01.c: 480: status.statusRegister.RX_DR = 1;
  3799  06BE  1768               	bsf	(_status^(0+128)+1),6	;volatile
  3800                           
  3801                           ;nrf24l01.c: 481: status.statusRegister.TX_DS = 1;
  3802  06BF  16E8               	bsf	(_status^(0+128)+1),5	;volatile
  3803                           
  3804                           ;nrf24l01.c: 482: status.statusRegister.MAX_RT = 1;
  3805  06C0  1668               	bsf	(_status^(0+128)+1),4	;volatile
  3806                           
  3807                           ;nrf24l01.c: 483: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.statusReg
      +                          ister.byte);
  3808  06C1  0868               	movf	(_status^(0+128)+1),w	;volatile
  3809  06C2  0020               	movlb	0	; select bank0
  3810  06C3  00A7               	movwf	??_nrf24l01InitRegisters
  3811  06C4  0827               	movf	??_nrf24l01InitRegisters,w
  3812  06C5  00A0               	movwf	nrf24l01Send@data
  3813  06C6  3027               	movlw	39
  3814  06C7  3196  264B  3185   	fcall	_nrf24l01Send
  3815                           
  3816                           ;nrf24l01.c: 485: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  3817  06CA  0020               	movlb	0	; select bank0
  3818  06CB  01A0               	clrf	nrf24l01Send@data
  3819  06CC  3007               	movlw	7
  3820  06CD  3196  264B  3185   	fcall	_nrf24l01Send
  3821  06D0  0020               	movlb	0	; select bank0
  3822  06D1  00A7               	movwf	??_nrf24l01InitRegisters
  3823  06D2  0827               	movf	??_nrf24l01InitRegisters,w
  3824  06D3  0021               	movlb	1	; select bank1
  3825  06D4  00E8               	movwf	(_status^(0+128)+1)	;volatile
  3826                           
  3827                           ;nrf24l01.c: 488: nrf24l01Send((unsigned) 0b11100001, 0);
  3828  06D5  0020               	movlb	0	; select bank0
  3829  06D6  01A0               	clrf	nrf24l01Send@data
  3830  06D7  30E1               	movlw	225
  3831  06D8  3196  264B  3185   	fcall	_nrf24l01Send
  3832                           
  3833                           ;nrf24l01.c: 489: nrf24l01Send((unsigned) 0b11100010, 0);
  3834  06DB  0020               	movlb	0	; select bank0
  3835  06DC  01A0               	clrf	nrf24l01Send@data
  3836  06DD  30E2               	movlw	226
  3837  06DE  3196  264B  3185   	fcall	_nrf24l01Send
  3838                           
  3839                           ;nrf24l01.c: 492: status.configRegister.PRIM_RX = 0;
  3840  06E1  0021               	movlb	1	; select bank1
  3841  06E2  1069               	bcf	(_status^(0+128)+2),0	;volatile
  3842                           
  3843                           ;nrf24l01.c: 493: status.configRegister.EN_CRC = 1;
  3844  06E3  15E9               	bsf	(_status^(0+128)+2),3	;volatile
  3845                           
  3846                           ;nrf24l01.c: 494: status.configRegister.CRCO = 1;
  3847  06E4  1569               	bsf	(_status^(0+128)+2),2	;volatile
  3848                           
  3849                           ;nrf24l01.c: 495: status.configRegister.PWR_UP = 1;
  3850  06E5  14E9               	bsf	(_status^(0+128)+2),1	;volatile
  3851                           
  3852                           ;nrf24l01.c: 496: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3853  06E6  0869               	movf	(_status^(0+128)+2),w	;volatile
  3854  06E7  0020               	movlb	0	; select bank0
  3855  06E8  00A7               	movwf	??_nrf24l01InitRegisters
  3856  06E9  0827               	movf	??_nrf24l01InitRegisters,w
  3857  06EA  00A0               	movwf	nrf24l01Send@data
  3858  06EB  3020               	movlw	32
  3859  06EC  3196  264B         	fcall	_nrf24l01Send
  3860  06EE  0008               	return
  3861  06EF                     __end_of_nrf24l01InitRegisters:	
  3862                           
  3863                           	psect	text4
  3864  095E                     __ptext4:	
  3865 ;; *************** function _nrf24l01SetTXPipe *****************
  3866 ;; Defined at:
  3867 ;;		line 183 in file "nrf24l01.c"
  3868 ;; Parameters:    Size  Location     Type
  3869 ;;  pipe            1    wreg     unsigned char 
  3870 ;; Auto vars:     Size  Location     Type
  3871 ;;  pipe            1    6[BANK0 ] unsigned char 
  3872 ;; Return value:  Size  Location     Type
  3873 ;;                  1    wreg      void 
  3874 ;; Registers used:
  3875 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3876 ;; Tracked objects:
  3877 ;;		On entry : 0/0
  3878 ;;		On exit  : 0/0
  3879 ;;		Unchanged: 0/0
  3880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3882 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3883 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3884 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3885 ;;Total ram usage:        3 bytes
  3886 ;; Hardware stack levels used:    1
  3887 ;; Hardware stack levels required when called:   10
  3888 ;; This function calls:
  3889 ;;		___bmul
  3890 ;;		_nrf24l01SPIEnd
  3891 ;;		_nrf24l01SPISend
  3892 ;;		_nrf24l01SPIStart
  3893 ;; This function is called by:
  3894 ;;		_main
  3895 ;;		_nrf24l01InitRegisters
  3896 ;; This function uses a non-reentrant model
  3897 ;;
  3898                           
  3899                           
  3900                           ;psect for function _nrf24l01SetTXPipe
  3901  095E                     _nrf24l01SetTXPipe:	
  3902                           
  3903                           ;incstack = 0
  3904                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3905                           ;nrf24l01SetTXPipe@pipe stored from wreg
  3906  095E  0020               	movlb	0	; select bank0
  3907  095F  00A6               	movwf	nrf24l01SetTXPipe@pipe
  3908                           
  3909                           ;nrf24l01.c: 186: nrf24l01SPIStart();
  3910  0960  3194  24FB  3189   	fcall	_nrf24l01SPIStart
  3911                           
  3912                           ;nrf24l01.c: 187: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  3913  0963  3030               	movlw	48
  3914  0964  3195  250C  3189   	fcall	_nrf24l01SPISend
  3915                           
  3916                           ;nrf24l01.c: 188: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  3917  0967  304F               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3918  0968  0084               	movwf	4
  3919  0969  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3920  096A  0085               	movwf	5
  3921  096B  0800               	movf	0,w	;code access
  3922  096C  0020               	movlb	0	; select bank0
  3923  096D  00A4               	movwf	??_nrf24l01SetTXPipe
  3924  096E  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3925  096F  0084               	movwf	4
  3926  0970  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3927  0971  0085               	movwf	5
  3928  0972  0800               	movf	0,w	;code access
  3929  0973  00A5               	movwf	??_nrf24l01SetTXPipe+1
  3930  0974  0825               	movf	??_nrf24l01SetTXPipe+1,w
  3931  0975  00A0               	movwf	___bmul@multiplicand
  3932  0976  0826               	movf	nrf24l01SetTXPipe@pipe,w
  3933  0977  3195  2528  3189   	fcall	___bmul
  3934  097A  0020               	movlb	0	; select bank0
  3935  097B  0724               	addwf	??_nrf24l01SetTXPipe,w
  3936  097C  3195  250C  3189   	fcall	_nrf24l01SPISend
  3937                           
  3938                           ;nrf24l01.c: 189: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3939  097F  304E               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3940  0980  0084               	movwf	4
  3941  0981  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3942  0982  0085               	movwf	5
  3943  0983  0800               	movf	0,w	;code access
  3944  0984  3195  250C  3189   	fcall	_nrf24l01SPISend
  3945                           
  3946                           ;nrf24l01.c: 190: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3947  0987  304D               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3948  0988  0084               	movwf	4
  3949  0989  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3950  098A  0085               	movwf	5
  3951  098B  0800               	movf	0,w	;code access
  3952  098C  3195  250C  3189   	fcall	_nrf24l01SPISend
  3953                           
  3954                           ;nrf24l01.c: 191: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3955  098F  304C               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3956  0990  0084               	movwf	4
  3957  0991  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3958  0992  0085               	movwf	5
  3959  0993  0800               	movf	0,w	;code access
  3960  0994  3195  250C  3189   	fcall	_nrf24l01SPISend
  3961                           
  3962                           ;nrf24l01.c: 192: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3963  0997  304B               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3964  0998  0084               	movwf	4
  3965  0999  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3966  099A  0085               	movwf	5
  3967  099B  0800               	movf	0,w	;code access
  3968  099C  3195  250C  3189   	fcall	_nrf24l01SPISend
  3969                           
  3970                           ;nrf24l01.c: 193: nrf24l01SPIEnd();
  3971  099F  3194  24EC         	fcall	_nrf24l01SPIEnd
  3972  09A1  0008               	return
  3973  09A2                     __end_of_nrf24l01SetTXPipe:	
  3974                           
  3975                           	psect	text5
  3976  1528                     __ptext5:	
  3977 ;; *************** function ___bmul *****************
  3978 ;; Defined at:
  3979 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;  multiplier      1    wreg     unsigned char 
  3982 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3985 ;;  product         1    2[BANK0 ] unsigned char 
  3986 ;; Return value:  Size  Location     Type
  3987 ;;                  1    wreg      unsigned char 
  3988 ;; Registers used:
  3989 ;;		wreg, status,2, status,0
  3990 ;; Tracked objects:
  3991 ;;		On entry : 0/0
  3992 ;;		On exit  : 0/0
  3993 ;;		Unchanged: 0/0
  3994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3995 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3996 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3997 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3998 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3999 ;;Total ram usage:        4 bytes
  4000 ;; Hardware stack levels used:    1
  4001 ;; Hardware stack levels required when called:    8
  4002 ;; This function calls:
  4003 ;;		Nothing
  4004 ;; This function is called by:
  4005 ;;		_nrf24l01SetTXPipe
  4006 ;;		_nrf24l01InitRegisters
  4007 ;; This function uses a non-reentrant model
  4008 ;;
  4009                           
  4010                           
  4011                           ;psect for function ___bmul
  4012  1528                     ___bmul:	
  4013                           
  4014                           ;incstack = 0
  4015                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4016                           ;___bmul@multiplier stored from wreg
  4017  1528  0020               	movlb	0	; select bank0
  4018  1529  00A3               	movwf	___bmul@multiplier
  4019  152A  01A2               	clrf	___bmul@product
  4020  152B                     l2776:	
  4021  152B  1C23               	btfss	___bmul@multiplier,0
  4022  152C  2D31               	goto	l2780
  4023  152D  0820               	movf	___bmul@multiplicand,w
  4024  152E  00A1               	movwf	??___bmul
  4025  152F  0821               	movf	??___bmul,w
  4026  1530  07A2               	addwf	___bmul@product,f
  4027  1531                     l2780:	
  4028  1531  1003               	clrc
  4029  1532  0DA0               	rlf	___bmul@multiplicand,f
  4030  1533  1003               	clrc
  4031  1534  0CA3               	rrf	___bmul@multiplier,f
  4032  1535  0823               	movf	___bmul@multiplier,w
  4033  1536  1D03               	btfss	3,2
  4034  1537  2D2B               	goto	l2776
  4035  1538  0822               	movf	___bmul@product,w
  4036  1539  0008               	return
  4037  153A                     __end_of___bmul:	
  4038                           
  4039                           	psect	text6
  4040  166B                     __ptext6:	
  4041 ;; *************** function _nrf24l01SetRXPipe *****************
  4042 ;; Defined at:
  4043 ;;		line 196 in file "nrf24l01.c"
  4044 ;; Parameters:    Size  Location     Type
  4045 ;;  pipe            1    wreg     unsigned char 
  4046 ;; Auto vars:     Size  Location     Type
  4047 ;;  pipe            1    5[BANK0 ] unsigned char 
  4048 ;;  enRXAddr        1    6[BANK0 ] struct .
  4049 ;; Return value:  Size  Location     Type
  4050 ;;                  1    wreg      void 
  4051 ;; Registers used:
  4052 ;;		wreg, status,2, status,0, pclath, cstack
  4053 ;; Tracked objects:
  4054 ;;		On entry : 0/0
  4055 ;;		On exit  : 0/0
  4056 ;;		Unchanged: 0/0
  4057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4059 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4060 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4061 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4062 ;;Total ram usage:        4 bytes
  4063 ;; Hardware stack levels used:    1
  4064 ;; Hardware stack levels required when called:   11
  4065 ;; This function calls:
  4066 ;;		_nrf24l01Send
  4067 ;; This function is called by:
  4068 ;;		_nrf24l01InitRegisters
  4069 ;; This function uses a non-reentrant model
  4070 ;;
  4071                           
  4072                           
  4073                           ;psect for function _nrf24l01SetRXPipe
  4074  166B                     _nrf24l01SetRXPipe:	
  4075                           
  4076                           ;incstack = 0
  4077                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  4078                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4079  166B  0020               	movlb	0	; select bank0
  4080  166C  00A5               	movwf	nrf24l01SetRXPipe@pipe
  4081                           
  4082                           ;nrf24l01.c: 198: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 200: if (pipe > 5){
  4083  166D  3006               	movlw	6
  4084  166E  0225               	subwf	nrf24l01SetRXPipe@pipe,w
  4085  166F  1C03               	skipc
  4086  1670  2E78               	goto	l268
  4087                           
  4088                           ;nrf24l01.c: 201: enRXAddr.ERX_P0 = 1;
  4089  1671  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4090                           
  4091                           ;nrf24l01.c: 202: enRXAddr.ERX_P1 = 1;
  4092  1672  14A6               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4093                           
  4094                           ;nrf24l01.c: 203: enRXAddr.ERX_P2 = 1;
  4095  1673  1526               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4096                           
  4097                           ;nrf24l01.c: 204: enRXAddr.ERX_P3 = 1;
  4098  1674  15A6               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4099                           
  4100                           ;nrf24l01.c: 205: enRXAddr.ERX_P4 = 1;
  4101  1675  1626               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4102                           
  4103                           ;nrf24l01.c: 206: enRXAddr.ERX_P5 = 1;
  4104  1676  16A6               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4105                           
  4106                           ;nrf24l01.c: 207: }
  4107  1677  2E84               	goto	l3890
  4108  1678                     l268:	
  4109                           
  4110                           ;nrf24l01.c: 209: else{;nrf24l01.c: 210: enRXAddr.ERX_P0 = 1;
  4111  1678  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4112                           
  4113                           ;nrf24l01.c: 211: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4114  1679  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4115  167A  00A3               	movwf	??_nrf24l01SetRXPipe
  4116  167B  0A25               	incf	nrf24l01SetRXPipe@pipe,w
  4117  167C  2E7E               	goto	u4124
  4118  167D                     u4125:	
  4119  167D  35A3               	lslf	??_nrf24l01SetRXPipe,f
  4120  167E                     u4124:	
  4121  167E  0B89               	decfsz	9,f
  4122  167F  2E7D               	goto	u4125
  4123  1680  0823               	movf	??_nrf24l01SetRXPipe,w
  4124  1681  00A4               	movwf	??_nrf24l01SetRXPipe+1
  4125  1682  0824               	movf	??_nrf24l01SetRXPipe+1,w
  4126  1683  00A6               	movwf	nrf24l01SetRXPipe@enRXAddr
  4127  1684                     l3890:	
  4128                           
  4129                           ;nrf24l01.c: 212: };nrf24l01.c: 214: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4130  1684  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4131  1685  00A3               	movwf	??_nrf24l01SetRXPipe
  4132  1686  0823               	movf	??_nrf24l01SetRXPipe,w
  4133  1687  00A0               	movwf	nrf24l01Send@data
  4134  1688  3022               	movlw	34
  4135  1689  3196  264B         	fcall	_nrf24l01Send
  4136  168B  0008               	return
  4137  168C                     __end_of_nrf24l01SetRXPipe:	
  4138                           
  4139                           	psect	text7
  4140  0824                     __ptext7:	
  4141 ;; *************** function _nrf24l01GetPipe *****************
  4142 ;; Defined at:
  4143 ;;		line 135 in file "main.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;  name            1    wreg     PTR unsigned char 
  4146 ;;		 -> romDataMap(28), 
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4149 ;;		 -> romDataMap(28), 
  4150 ;;  i               1   10[BANK0 ] unsigned char 
  4151 ;;  pipe            1    8[BANK0 ] unsigned char 
  4152 ;; Return value:  Size  Location     Type
  4153 ;;                  1    wreg      unsigned char 
  4154 ;; Registers used:
  4155 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4156 ;; Tracked objects:
  4157 ;;		On entry : 0/0
  4158 ;;		On exit  : 0/0
  4159 ;;		Unchanged: 0/0
  4160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4162 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4163 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4164 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4165 ;;Total ram usage:        5 bytes
  4166 ;; Hardware stack levels used:    1
  4167 ;; Hardware stack levels required when called:    9
  4168 ;; This function calls:
  4169 ;;		___lwmod
  4170 ;;		_strlen
  4171 ;; This function is called by:
  4172 ;;		_main
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           
  4177                           ;psect for function _nrf24l01GetPipe
  4178  0824                     _nrf24l01GetPipe:	
  4179                           
  4180                           ;incstack = 0
  4181                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4182                           ;nrf24l01GetPipe@name stored from wreg
  4183  0824  0020               	movlb	0	; select bank0
  4184  0825  00A9               	movwf	nrf24l01GetPipe@name
  4185                           
  4186                           ;main.c: 136: unsigned char pipe = 0;
  4187  0826  01A8               	clrf	nrf24l01GetPipe@pipe
  4188                           
  4189                           ;main.c: 137: unsigned char i = 0;
  4190  0827  01AA               	clrf	nrf24l01GetPipe@i
  4191                           
  4192                           ;main.c: 140: for (i = 0; i < strlen(name); i++){
  4193  0828  01AA               	clrf	nrf24l01GetPipe@i
  4194  0829                     l4204:	
  4195  0829  0829               	movf	nrf24l01GetPipe@name,w
  4196  082A  00A0               	movwf	strlen@s
  4197  082B  3002               	movlw	2
  4198  082C  00A1               	movwf	strlen@s+1
  4199  082D  3196  262C  3188   	fcall	_strlen
  4200  0830  0020               	movlb	0	; select bank0
  4201  0831  082A               	movf	nrf24l01GetPipe@i,w
  4202  0832  00A6               	movwf	??_nrf24l01GetPipe
  4203  0833  01A7               	clrf	??_nrf24l01GetPipe+1
  4204  0834  0821               	movf	?_strlen+1,w
  4205  0835  0227               	subwf	??_nrf24l01GetPipe+1,w
  4206  0836  1D03               	skipz
  4207  0837  283A               	goto	u4385
  4208  0838  0820               	movf	?_strlen,w
  4209  0839  0226               	subwf	??_nrf24l01GetPipe,w
  4210  083A                     u4385:	
  4211  083A  1803               	btfsc	3,0
  4212  083B  284C               	goto	l4206
  4213                           
  4214                           ;main.c: 141: pipe+= name[i];
  4215  083C  082A               	movf	nrf24l01GetPipe@i,w
  4216  083D  0729               	addwf	nrf24l01GetPipe@name,w
  4217  083E  00A6               	movwf	??_nrf24l01GetPipe
  4218  083F  0826               	movf	??_nrf24l01GetPipe,w
  4219  0840  0086               	movwf	6
  4220  0841  3002               	movlw	2	; select bank4/5
  4221  0842  0087               	movwf	7
  4222  0843  0801               	movf	1,w
  4223  0844  00A7               	movwf	??_nrf24l01GetPipe+1
  4224  0845  0827               	movf	??_nrf24l01GetPipe+1,w
  4225  0846  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4226  0847  3001               	movlw	1
  4227  0848  00A6               	movwf	??_nrf24l01GetPipe
  4228  0849  0826               	movf	??_nrf24l01GetPipe,w
  4229  084A  07AA               	addwf	nrf24l01GetPipe@i,f
  4230  084B  2829               	goto	l4204
  4231  084C                     l4206:	
  4232                           
  4233                           ;main.c: 142: };main.c: 144: return (unsigned) pipe % 6;
  4234  084C  3006               	movlw	6
  4235  084D  00A0               	movwf	___lwmod@divisor
  4236  084E  3000               	movlw	0
  4237  084F  00A1               	movwf	___lwmod@divisor+1
  4238  0850  0828               	movf	nrf24l01GetPipe@pipe,w
  4239  0851  00A6               	movwf	??_nrf24l01GetPipe
  4240  0852  01A7               	clrf	??_nrf24l01GetPipe+1
  4241  0853  0826               	movf	??_nrf24l01GetPipe,w
  4242  0854  00A2               	movwf	___lwmod@dividend
  4243  0855  0827               	movf	??_nrf24l01GetPipe+1,w
  4244  0856  00A3               	movwf	___lwmod@dividend+1
  4245  0857  3197  27A3         	fcall	___lwmod
  4246  0859  0020               	movlb	0	; select bank0
  4247  085A  0820               	movf	?___lwmod,w
  4248  085B  0008               	return
  4249  085C                     __end_of_nrf24l01GetPipe:	
  4250                           
  4251                           	psect	text8
  4252  17A3                     __ptext8:	
  4253 ;; *************** function ___lwmod *****************
  4254 ;; Defined at:
  4255 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;  divisor         2    0[BANK0 ] unsigned int 
  4258 ;;  dividend        2    2[BANK0 ] unsigned int 
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;  counter         1    5[BANK0 ] unsigned char 
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  2    0[BANK0 ] unsigned int 
  4263 ;; Registers used:
  4264 ;;		wreg, status,2, status,0
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4270 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4271 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4272 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4273 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4274 ;;Total ram usage:        6 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    8
  4277 ;; This function calls:
  4278 ;;		Nothing
  4279 ;; This function is called by:
  4280 ;;		_nrf24l01GetPipe
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           
  4285                           ;psect for function ___lwmod
  4286  17A3                     ___lwmod:	
  4287                           
  4288                           ;incstack = 0
  4289                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4290  17A3  0020               	movlb	0	; select bank0
  4291  17A4  0820               	movf	___lwmod@divisor,w
  4292  17A5  0421               	iorwf	___lwmod@divisor+1,w
  4293  17A6  1903               	btfsc	3,2
  4294  17A7  2FCB               	goto	l3316
  4295  17A8  01A5               	clrf	___lwmod@counter
  4296  17A9  0AA5               	incf	___lwmod@counter,f
  4297  17AA                     l3306:	
  4298  17AA  1BA1               	btfsc	___lwmod@divisor+1,7
  4299  17AB  2FB6               	goto	l3308
  4300  17AC  3001               	movlw	1
  4301  17AD                     u3495:	
  4302  17AD  35A0               	lslf	___lwmod@divisor,f
  4303  17AE  0DA1               	rlf	___lwmod@divisor+1,f
  4304  17AF  0B89               	decfsz	9,f
  4305  17B0  2FAD               	goto	u3495
  4306  17B1  3001               	movlw	1
  4307  17B2  00A4               	movwf	??___lwmod
  4308  17B3  0824               	movf	??___lwmod,w
  4309  17B4  07A5               	addwf	___lwmod@counter,f
  4310  17B5  2FAA               	goto	l3306
  4311  17B6                     l3308:	
  4312  17B6  0821               	movf	___lwmod@divisor+1,w
  4313  17B7  0223               	subwf	___lwmod@dividend+1,w
  4314  17B8  1D03               	skipz
  4315  17B9  2FBC               	goto	u3515
  4316  17BA  0820               	movf	___lwmod@divisor,w
  4317  17BB  0222               	subwf	___lwmod@dividend,w
  4318  17BC                     u3515:	
  4319  17BC  1C03               	skipc
  4320  17BD  2FC2               	goto	l3312
  4321  17BE  0820               	movf	___lwmod@divisor,w
  4322  17BF  02A2               	subwf	___lwmod@dividend,f
  4323  17C0  0821               	movf	___lwmod@divisor+1,w
  4324  17C1  3BA3               	subwfb	___lwmod@dividend+1,f
  4325  17C2                     l3312:	
  4326  17C2  3001               	movlw	1
  4327  17C3                     u3525:	
  4328  17C3  36A1               	lsrf	___lwmod@divisor+1,f
  4329  17C4  0CA0               	rrf	___lwmod@divisor,f
  4330  17C5  0B89               	decfsz	9,f
  4331  17C6  2FC3               	goto	u3525
  4332  17C7  3001               	movlw	1
  4333  17C8  02A5               	subwf	___lwmod@counter,f
  4334  17C9  1D03               	btfss	3,2
  4335  17CA  2FB6               	goto	l3308
  4336  17CB                     l3316:	
  4337  17CB  0823               	movf	___lwmod@dividend+1,w
  4338  17CC  00A1               	movwf	?___lwmod+1
  4339  17CD  0822               	movf	___lwmod@dividend,w
  4340  17CE  00A0               	movwf	?___lwmod
  4341  17CF  0008               	return
  4342  17D0                     __end_of___lwmod:	
  4343                           
  4344                           	psect	text9
  4345  0358                     __ptext9:	
  4346 ;; *************** function _loop *****************
  4347 ;; Defined at:
  4348 ;;		line 93 in file "main.c"
  4349 ;; Parameters:    Size  Location     Type
  4350 ;;		None
  4351 ;; Auto vars:     Size  Location     Type
  4352 ;;  packet         33   16[BANK2 ] struct .
  4353 ;;  ta              3    3[BANK2 ] float 
  4354 ;;  vt              3    0[BANK2 ] float 
  4355 ;;  rfSetup         1   15[BANK2 ] struct .
  4356 ;; Return value:  Size  Location     Type
  4357 ;;                  1    wreg      void 
  4358 ;; Registers used:
  4359 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4360 ;; Tracked objects:
  4361 ;;		On entry : 0/0
  4362 ;;		On exit  : 0/0
  4363 ;;		Unchanged: 0/0
  4364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4366 ;;      Locals:         0       0       0      49       0       0       0       0       0       0       0       0       
      +0       0
  4367 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4368 ;;      Totals:         0       0       1      49       0       0       0       0       0       0       0       0       
      +0       0
  4369 ;;Total ram usage:       50 bytes
  4370 ;; Hardware stack levels used:    1
  4371 ;; Hardware stack levels required when called:   16
  4372 ;; This function calls:
  4373 ;;		___ftadd
  4374 ;;		___ftdiv
  4375 ;;		___ftmul
  4376 ;;		___ftneg
  4377 ;;		___lbtoft
  4378 ;;		___lltoft
  4379 ;;		_getADCValue
  4380 ;;		_nrf24l01Send
  4381 ;;		_sendMessage
  4382 ;; This function is called by:
  4383 ;;		_main
  4384 ;; This function uses a non-reentrant model
  4385 ;;
  4386                           
  4387                           
  4388                           ;psect for function _loop
  4389  0358                     _loop:	
  4390                           
  4391                           ;main.c: 95: nrf24l01Packet_t packet;;main.c: 97: sendMessage(&packet, "DBG1", counter);
  4392                           
  4393                           ;incstack = 0
  4394 ;; hardware stack exceeded
  4395                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4396  0358  0022               	movlb	2	; select bank2
  4397  0359  0854               	movf	(_counter+3)^(0+256),w
  4398  035A  0020               	movlb	0	; select bank0
  4399  035B  00AB               	movwf	___lltoft@c+3
  4400  035C  0022               	movlb	2	; select bank2
  4401  035D  0853               	movf	(_counter+2)^(0+256),w
  4402  035E  0020               	movlb	0	; select bank0
  4403  035F  00AA               	movwf	___lltoft@c+2
  4404  0360  0022               	movlb	2	; select bank2
  4405  0361  0852               	movf	(_counter+1)^(0+256),w
  4406  0362  0020               	movlb	0	; select bank0
  4407  0363  00A9               	movwf	___lltoft@c+1
  4408  0364  0022               	movlb	2	; select bank2
  4409  0365  0851               	movf	_counter^(0+256),w
  4410  0366  0020               	movlb	0	; select bank0
  4411  0367  00A8               	movwf	___lltoft@c
  4412  0368  3197  274D  3183   	fcall	___lltoft
  4413  036B  0020               	movlb	0	; select bank0
  4414  036C  0828               	movf	?___lltoft,w
  4415  036D  0022               	movlb	2	; select bank2
  4416  036E  00A6               	movwf	_loop$1978^(0+256)
  4417  036F  0020               	movlb	0	; select bank0
  4418  0370  0829               	movf	?___lltoft+1,w
  4419  0371  0022               	movlb	2	; select bank2
  4420  0372  00A7               	movwf	(_loop$1978+1)^(0+256)
  4421  0373  0020               	movlb	0	; select bank0
  4422  0374  082A               	movf	?___lltoft+2,w
  4423  0375  0022               	movlb	2	; select bank2
  4424  0376  00A8               	movwf	(_loop$1978+2)^(0+256)
  4425                           
  4426                           ;main.c: 95: nrf24l01Packet_t packet;;main.c: 97: sendMessage(&packet, "DBG1", counter);
  4427  0377  3030               	movlw	low loop@packet
  4428  0378  0021               	movlb	1	; select bank1
  4429  0379  00B9               	movwf	sendMessage@packet^(0+128)
  4430  037A  3001               	movlw	high loop@packet
  4431  037B  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4432  037C  3050               	movlw	low (STR_3| (0+32768))
  4433  037D  00BB               	movwf	sendMessage@topic^(0+128)
  4434  037E  3098               	movlw	high (STR_3| (0+32768))
  4435  037F  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4436  0380  0022               	movlb	2	; select bank2
  4437  0381  0826               	movf	_loop$1978^(0+256),w
  4438  0382  0021               	movlb	1	; select bank1
  4439  0383  00BD               	movwf	sendMessage@value^(0+128)
  4440  0384  0022               	movlb	2	; select bank2
  4441  0385  0827               	movf	(_loop$1978+1)^(0+256),w
  4442  0386  0021               	movlb	1	; select bank1
  4443  0387  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4444  0388  0022               	movlb	2	; select bank2
  4445  0389  0828               	movf	(_loop$1978+2)^(0+256),w
  4446  038A  0021               	movlb	1	; select bank1
  4447  038B  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4448  038C  318B  2347  3183   	fcall	_sendMessage
  4449                           
  4450                           ;main.c: 103: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4451  038F  30CF               	movlw	207
  4452  0390  0020               	movlb	0	; select bank0
  4453  0391  00D7               	movwf	___ftmul@f1
  4454  0392  3046               	movlw	70
  4455  0393  00D8               	movwf	___ftmul@f1+1
  4456  0394  3040               	movlw	64
  4457  0395  00D9               	movwf	___ftmul@f1+2
  4458  0396  3004               	movlw	4
  4459  0397  318D  25AC  3183   	fcall	_getADCValue
  4460  039A  0020               	movlb	0	; select bank0
  4461  039B  084B               	movf	?_getADCValue,w
  4462  039C  00DA               	movwf	___ftmul@f2
  4463  039D  084C               	movf	?_getADCValue+1,w
  4464  039E  00DB               	movwf	___ftmul@f2+1
  4465  039F  084D               	movf	?_getADCValue+2,w
  4466  03A0  00DC               	movwf	___ftmul@f2+2
  4467  03A1  318E  265A  3183   	fcall	___ftmul
  4468  03A4  0020               	movlb	0	; select bank0
  4469  03A5  0857               	movf	?___ftmul,w
  4470  03A6  0022               	movlb	2	; select bank2
  4471  03A7  00A9               	movwf	_loop$1979^(0+256)
  4472  03A8  0020               	movlb	0	; select bank0
  4473  03A9  0858               	movf	?___ftmul+1,w
  4474  03AA  0022               	movlb	2	; select bank2
  4475  03AB  00AA               	movwf	(_loop$1979+1)^(0+256)
  4476  03AC  0020               	movlb	0	; select bank0
  4477  03AD  0859               	movf	?___ftmul+2,w
  4478  03AE  0022               	movlb	2	; select bank2
  4479  03AF  00AB               	movwf	(_loop$1979+2)^(0+256)
  4480                           
  4481                           ;main.c: 103: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4482  03B0  3030               	movlw	low loop@packet
  4483  03B1  0021               	movlb	1	; select bank1
  4484  03B2  00B9               	movwf	sendMessage@packet^(0+128)
  4485  03B3  3001               	movlw	high loop@packet
  4486  03B4  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4487  03B5  305A               	movlw	low (STR_4| (0+32768))
  4488  03B6  00BB               	movwf	sendMessage@topic^(0+128)
  4489  03B7  3098               	movlw	high (STR_4| (0+32768))
  4490  03B8  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4491  03B9  0022               	movlb	2	; select bank2
  4492  03BA  0829               	movf	_loop$1979^(0+256),w
  4493  03BB  0021               	movlb	1	; select bank1
  4494  03BC  00BD               	movwf	sendMessage@value^(0+128)
  4495  03BD  0022               	movlb	2	; select bank2
  4496  03BE  082A               	movf	(_loop$1979+1)^(0+256),w
  4497  03BF  0021               	movlb	1	; select bank1
  4498  03C0  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4499  03C1  0022               	movlb	2	; select bank2
  4500  03C2  082B               	movf	(_loop$1979+2)^(0+256),w
  4501  03C3  0021               	movlb	1	; select bank1
  4502  03C4  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4503  03C5  318B  2347  3183   	fcall	_sendMessage
  4504                           
  4505                           ;main.c: 108: sendMessage(&packet, "ANC3mV", getADCValue(0b010011));
  4506  03C8  3030               	movlw	low loop@packet
  4507  03C9  0021               	movlb	1	; select bank1
  4508  03CA  00B9               	movwf	sendMessage@packet^(0+128)
  4509  03CB  3001               	movlw	high loop@packet
  4510  03CC  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4511  03CD  303E               	movlw	low (STR_5| (0+32768))
  4512  03CE  00BB               	movwf	sendMessage@topic^(0+128)
  4513  03CF  3098               	movlw	high (STR_5| (0+32768))
  4514  03D0  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4515  03D1  3013               	movlw	19
  4516  03D2  318D  25AC  3183   	fcall	_getADCValue
  4517  03D5  0020               	movlb	0	; select bank0
  4518  03D6  084B               	movf	?_getADCValue,w
  4519  03D7  0021               	movlb	1	; select bank1
  4520  03D8  00BD               	movwf	sendMessage@value^(0+128)
  4521  03D9  0020               	movlb	0	; select bank0
  4522  03DA  084C               	movf	?_getADCValue+1,w
  4523  03DB  0021               	movlb	1	; select bank1
  4524  03DC  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4525  03DD  0020               	movlb	0	; select bank0
  4526  03DE  084D               	movf	?_getADCValue+2,w
  4527  03DF  0021               	movlb	1	; select bank1
  4528  03E0  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4529  03E1  318B  2347  3183   	fcall	_sendMessage
  4530                           
  4531                           ;main.c: 114: FVRCONbits.TSEN = 1;
  4532  03E4  0022               	movlb	2	; select bank2
  4533  03E5  1697               	bsf	23,5	;volatile
  4534                           
  4535                           ;main.c: 115: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4536  03E6  303D               	movlw	61
  4537  03E7  318D  25AC  3183   	fcall	_getADCValue
  4538  03EA  0020               	movlb	0	; select bank0
  4539  03EB  084B               	movf	?_getADCValue,w
  4540  03EC  00D7               	movwf	___ftneg@f1
  4541  03ED  084C               	movf	?_getADCValue+1,w
  4542  03EE  00D8               	movwf	___ftneg@f1+1
  4543  03EF  084D               	movf	?_getADCValue+2,w
  4544  03F0  00D9               	movwf	___ftneg@f1+2
  4545  03F1  3195  2503  3183   	fcall	___ftneg
  4546  03F4  0020               	movlb	0	; select bank0
  4547  03F5  0857               	movf	?___ftneg,w
  4548  03F6  0022               	movlb	2	; select bank2
  4549  03F7  00AC               	movwf	_loop$1980^(0+256)
  4550  03F8  0020               	movlb	0	; select bank0
  4551  03F9  0858               	movf	?___ftneg+1,w
  4552  03FA  0022               	movlb	2	; select bank2
  4553  03FB  00AD               	movwf	(_loop$1980+1)^(0+256)
  4554  03FC  0020               	movlb	0	; select bank0
  4555  03FD  0859               	movf	?___ftneg+2,w
  4556  03FE  0022               	movlb	2	; select bank2
  4557  03FF  00AE               	movwf	(_loop$1980+2)^(0+256)
  4558                           
  4559                           ;main.c: 115: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4560  0400  3000               	movlw	0
  4561  0401  0020               	movlb	0	; select bank0
  4562  0402  00BB               	movwf	___ftdiv@f2
  4563  0403  3000               	movlw	0
  4564  0404  00BC               	movwf	___ftdiv@f2+1
  4565  0405  3040               	movlw	64
  4566  0406  00BD               	movwf	___ftdiv@f2+2
  4567  0407  3012               	movlw	18
  4568  0408  00AE               	movwf	___ftadd@f1
  4569  0409  3003               	movlw	3
  4570  040A  00AF               	movwf	___ftadd@f1+1
  4571  040B  3040               	movlw	64
  4572  040C  00B0               	movwf	___ftadd@f1+2
  4573  040D  0022               	movlb	2	; select bank2
  4574  040E  082C               	movf	_loop$1980^(0+256),w
  4575  040F  0020               	movlb	0	; select bank0
  4576  0410  00B1               	movwf	___ftadd@f2
  4577  0411  0022               	movlb	2	; select bank2
  4578  0412  082D               	movf	(_loop$1980+1)^(0+256),w
  4579  0413  0020               	movlb	0	; select bank0
  4580  0414  00B2               	movwf	___ftadd@f2+1
  4581  0415  0022               	movlb	2	; select bank2
  4582  0416  082E               	movf	(_loop$1980+2)^(0+256),w
  4583  0417  0020               	movlb	0	; select bank0
  4584  0418  00B3               	movwf	___ftadd@f2+2
  4585  0419  3186  26EF  3183   	fcall	___ftadd
  4586  041C  0020               	movlb	0	; select bank0
  4587  041D  082E               	movf	?___ftadd,w
  4588  041E  00BE               	movwf	___ftdiv@f1
  4589  041F  082F               	movf	?___ftadd+1,w
  4590  0420  00BF               	movwf	___ftdiv@f1+1
  4591  0421  0830               	movf	?___ftadd+2,w
  4592  0422  00C0               	movwf	___ftdiv@f1+2
  4593  0423  318D  2503  3183   	fcall	___ftdiv
  4594  0426  0020               	movlb	0	; select bank0
  4595  0427  083B               	movf	?___ftdiv,w
  4596  0428  0022               	movlb	2	; select bank2
  4597  0429  00A0               	movwf	loop@vt^(0+256)
  4598  042A  0020               	movlb	0	; select bank0
  4599  042B  083C               	movf	?___ftdiv+1,w
  4600  042C  0022               	movlb	2	; select bank2
  4601  042D  00A1               	movwf	(loop@vt+1)^(0+256)
  4602  042E  0020               	movlb	0	; select bank0
  4603  042F  083D               	movf	?___ftdiv+2,w
  4604  0430  0022               	movlb	2	; select bank2
  4605  0431  00A2               	movwf	(loop@vt+2)^(0+256)
  4606                           
  4607                           ;main.c: 116: FVRCONbits.TSEN = 0;
  4608  0432  1297               	bcf	23,5	;volatile
  4609                           
  4610                           ;main.c: 121: float ta = (vt / -0.00132) - (0.6063 / -0.00132) - 40;
  4611  0433  30A9               	movlw	169
  4612  0434  0020               	movlb	0	; select bank0
  4613  0435  00AE               	movwf	___ftadd@f1
  4614  0436  30D1               	movlw	209
  4615  0437  00AF               	movwf	___ftadd@f1+1
  4616  0438  3043               	movlw	67
  4617  0439  00B0               	movwf	___ftadd@f1+2
  4618  043A  3004               	movlw	4
  4619  043B  00BB               	movwf	___ftdiv@f2
  4620  043C  30AD               	movlw	173
  4621  043D  00BC               	movwf	___ftdiv@f2+1
  4622  043E  30BA               	movlw	186
  4623  043F  00BD               	movwf	___ftdiv@f2+2
  4624  0440  0022               	movlb	2	; select bank2
  4625  0441  0820               	movf	loop@vt^(0+256),w
  4626  0442  0020               	movlb	0	; select bank0
  4627  0443  00BE               	movwf	___ftdiv@f1
  4628  0444  0022               	movlb	2	; select bank2
  4629  0445  0821               	movf	(loop@vt+1)^(0+256),w
  4630  0446  0020               	movlb	0	; select bank0
  4631  0447  00BF               	movwf	___ftdiv@f1+1
  4632  0448  0022               	movlb	2	; select bank2
  4633  0449  0822               	movf	(loop@vt+2)^(0+256),w
  4634  044A  0020               	movlb	0	; select bank0
  4635  044B  00C0               	movwf	___ftdiv@f1+2
  4636  044C  318D  2503  3183   	fcall	___ftdiv
  4637  044F  0020               	movlb	0	; select bank0
  4638  0450  083B               	movf	?___ftdiv,w
  4639  0451  00B1               	movwf	___ftadd@f2
  4640  0452  083C               	movf	?___ftdiv+1,w
  4641  0453  00B2               	movwf	___ftadd@f2+1
  4642  0454  083D               	movf	?___ftdiv+2,w
  4643  0455  00B3               	movwf	___ftadd@f2+2
  4644  0456  3186  26EF  3183   	fcall	___ftadd
  4645  0459  0020               	movlb	0	; select bank0
  4646  045A  082E               	movf	?___ftadd,w
  4647  045B  0022               	movlb	2	; select bank2
  4648  045C  00A3               	movwf	loop@ta^(0+256)
  4649  045D  0020               	movlb	0	; select bank0
  4650  045E  082F               	movf	?___ftadd+1,w
  4651  045F  0022               	movlb	2	; select bank2
  4652  0460  00A4               	movwf	(loop@ta+1)^(0+256)
  4653  0461  0020               	movlb	0	; select bank0
  4654  0462  0830               	movf	?___ftadd+2,w
  4655  0463  0022               	movlb	2	; select bank2
  4656  0464  00A5               	movwf	(loop@ta+2)^(0+256)
  4657                           
  4658                           ;main.c: 123: sendMessage(&packet, "TEMP", ta);
  4659  0465  3030               	movlw	low loop@packet
  4660  0466  0021               	movlb	1	; select bank1
  4661  0467  00B9               	movwf	sendMessage@packet^(0+128)
  4662  0468  3001               	movlw	high loop@packet
  4663  0469  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4664  046A  3055               	movlw	low (STR_6| (0+32768))
  4665  046B  00BB               	movwf	sendMessage@topic^(0+128)
  4666  046C  3098               	movlw	high (STR_6| (0+32768))
  4667  046D  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4668  046E  0022               	movlb	2	; select bank2
  4669  046F  0823               	movf	loop@ta^(0+256),w
  4670  0470  0021               	movlb	1	; select bank1
  4671  0471  00BD               	movwf	sendMessage@value^(0+128)
  4672  0472  0022               	movlb	2	; select bank2
  4673  0473  0824               	movf	(loop@ta+1)^(0+256),w
  4674  0474  0021               	movlb	1	; select bank1
  4675  0475  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4676  0476  0022               	movlb	2	; select bank2
  4677  0477  0825               	movf	(loop@ta+2)^(0+256),w
  4678  0478  0021               	movlb	1	; select bank1
  4679  0479  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4680  047A  318B  2347  3183   	fcall	_sendMessage
  4681                           
  4682                           ;main.c: 127: n_RF_SETUP_t rfSetup;;main.c: 128: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4683  047D  0020               	movlb	0	; select bank0
  4684  047E  01A0               	clrf	nrf24l01Send@data
  4685  047F  3006               	movlw	6
  4686  0480  3196  264B  3183   	fcall	_nrf24l01Send
  4687  0483  0021               	movlb	1	; select bank1
  4688  0484  00C3               	movwf	??_loop^(0+128)
  4689  0485  0843               	movf	??_loop^(0+128),w
  4690  0486  0022               	movlb	2	; select bank2
  4691  0487  00AF               	movwf	loop@rfSetup^(0+256)
  4692                           
  4693                           ;main.c: 130: sendMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4694  0488  3030               	movlw	low loop@packet
  4695  0489  0021               	movlb	1	; select bank1
  4696  048A  00B9               	movwf	sendMessage@packet^(0+128)
  4697  048B  3001               	movlw	high loop@packet
  4698  048C  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4699  048D  3045               	movlw	low (STR_7| (0+32768))
  4700  048E  00BB               	movwf	sendMessage@topic^(0+128)
  4701  048F  3098               	movlw	high (STR_7| (0+32768))
  4702  0490  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4703  0491  0022               	movlb	2	; select bank2
  4704  0492  0C2F               	rrf	loop@rfSetup^(0+256),w
  4705  0493  3903               	andlw	3
  4706  0494  3195  259B  3183   	fcall	___lbtoft
  4707  0497  0020               	movlb	0	; select bank0
  4708  0498  0828               	movf	?___lbtoft,w
  4709  0499  0021               	movlb	1	; select bank1
  4710  049A  00BD               	movwf	sendMessage@value^(0+128)
  4711  049B  0020               	movlb	0	; select bank0
  4712  049C  0829               	movf	?___lbtoft+1,w
  4713  049D  0021               	movlb	1	; select bank1
  4714  049E  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4715  049F  0020               	movlb	0	; select bank0
  4716  04A0  082A               	movf	?___lbtoft+2,w
  4717  04A1  0021               	movlb	1	; select bank1
  4718  04A2  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4719  04A3  318B  2347         	fcall	_sendMessage
  4720  04A5  0008               	return
  4721  04A6                     __end_of_loop:	
  4722                           
  4723                           	psect	text10
  4724  0B47                     __ptext10:	
  4725 ;; *************** function _sendMessage *****************
  4726 ;; Defined at:
  4727 ;;		line 73 in file "main.c"
  4728 ;; Parameters:    Size  Location     Type
  4729 ;;  packet          2   25[BANK1 ] PTR struct .
  4730 ;;		 -> main@packet(33), loop@packet(33), 
  4731 ;;  topic           2   27[BANK1 ] PTR const unsigned char 
  4732 ;;		 -> STR_9(5), STR_7(6), STR_6(5), STR_5(7), 
  4733 ;;		 -> STR_4(5), STR_3(5), 
  4734 ;;  value           3   29[BANK1 ] float 
  4735 ;; Auto vars:     Size  Location     Type
  4736 ;;  status          2   33[BANK1 ] int 
  4737 ;; Return value:  Size  Location     Type
  4738 ;;                  1    wreg      void 
  4739 ;; Registers used:
  4740 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4741 ;; Tracked objects:
  4742 ;;		On entry : 0/0
  4743 ;;		On exit  : 0/0
  4744 ;;		Unchanged: 0/0
  4745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4746 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  4747 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4748 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4749 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  4750 ;;Total ram usage:       10 bytes
  4751 ;; Hardware stack levels used:    1
  4752 ;; Hardware stack levels required when called:   15
  4753 ;; This function calls:
  4754 ;;		_ftoa
  4755 ;;		_memset
  4756 ;;		_nrf24l01SendPacket
  4757 ;;		_sleepListren
  4758 ;;		_strcat
  4759 ;;		_strcpy
  4760 ;; This function is called by:
  4761 ;;		_loop
  4762 ;;		_main
  4763 ;; This function uses a non-reentrant model
  4764 ;;
  4765                           
  4766                           
  4767                           ;psect for function _sendMessage
  4768  0B47                     _sendMessage:	
  4769                           
  4770                           ;main.c: 75: int status;;main.c: 77: memset(packet->Message, 0, sizeof(packet->Message))
      +                          ;
  4771                           
  4772                           ;incstack = 0
  4773                           ; Regs used in _sendMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4774  0B47  0021               	movlb	1	; select bank1
  4775  0B48  0839               	movf	sendMessage@packet^(0+128),w
  4776  0B49  3E01               	addlw	1
  4777  0B4A  0020               	movlb	0	; select bank0
  4778  0B4B  00A0               	movwf	memset@p1
  4779  0B4C  3000               	movlw	0
  4780  0B4D  0021               	movlb	1	; select bank1
  4781  0B4E  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4782  0B4F  0020               	movlb	0	; select bank0
  4783  0B50  00A1               	movwf	memset@p1+1
  4784  0B51  3000               	movlw	0
  4785  0B52  00A2               	movwf	memset@c
  4786  0B53  00A3               	movwf	memset@c+1
  4787  0B54  3020               	movlw	32
  4788  0B55  00A4               	movwf	memset@n
  4789  0B56  3000               	movlw	0
  4790  0B57  00A5               	movwf	memset@n+1
  4791  0B58  3195  2567  318B   	fcall	_memset
  4792                           
  4793                           ;main.c: 78: strcpy(packet->Message, romData->name);
  4794  0B5B  0021               	movlb	1	; select bank1
  4795  0B5C  0839               	movf	sendMessage@packet^(0+128),w
  4796  0B5D  3E01               	addlw	1
  4797  0B5E  0020               	movlb	0	; select bank0
  4798  0B5F  00A0               	movwf	strcpy@to
  4799  0B60  3000               	movlw	0
  4800  0B61  0021               	movlb	1	; select bank1
  4801  0B62  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4802  0B63  0020               	movlb	0	; select bank0
  4803  0B64  00A1               	movwf	strcpy@to+1
  4804  0B65  0021               	movlb	1	; select bank1
  4805  0B66  086B               	movf	_romData^(0+128),w
  4806  0B67  3E01               	addlw	1
  4807  0B68  0020               	movlb	0	; select bank0
  4808  0B69  00A2               	movwf	strcpy@from
  4809  0B6A  3002               	movlw	2
  4810  0B6B  00A3               	movwf	strcpy@from+1
  4811  0B6C  3187  27E5  318B   	fcall	_strcpy
  4812                           
  4813                           ;main.c: 79: strcat(packet->Message, "/");
  4814  0B6F  0021               	movlb	1	; select bank1
  4815  0B70  0839               	movf	sendMessage@packet^(0+128),w
  4816  0B71  3E01               	addlw	1
  4817  0B72  00B3               	movwf	strcat@to^(0+128)
  4818  0B73  3000               	movlw	0
  4819  0B74  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4820  0B75  00B4               	movwf	(strcat@to+1)^(0+128)
  4821  0B76  3068               	movlw	low (STR_1| (0+32768))
  4822  0B77  00B5               	movwf	strcat@from^(0+128)
  4823  0B78  3098               	movlw	high (STR_1| (0+32768))
  4824  0B79  00B6               	movwf	(strcat@from^(0+128)+1)
  4825  0B7A  3196  26D5  318B   	fcall	_strcat
  4826                           
  4827                           ;main.c: 80: strcat(packet->Message, topic);
  4828  0B7D  0021               	movlb	1	; select bank1
  4829  0B7E  0839               	movf	sendMessage@packet^(0+128),w
  4830  0B7F  3E01               	addlw	1
  4831  0B80  00B3               	movwf	strcat@to^(0+128)
  4832  0B81  3000               	movlw	0
  4833  0B82  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4834  0B83  00B4               	movwf	(strcat@to+1)^(0+128)
  4835  0B84  083C               	movf	(sendMessage@topic+1)^(0+128),w
  4836  0B85  00B6               	movwf	(strcat@from+1)^(0+128)
  4837  0B86  083B               	movf	sendMessage@topic^(0+128),w
  4838  0B87  00B5               	movwf	strcat@from^(0+128)
  4839  0B88  3196  26D5  318B   	fcall	_strcat
  4840                           
  4841                           ;main.c: 81: strcat(packet->Message, "/");
  4842  0B8B  0021               	movlb	1	; select bank1
  4843  0B8C  0839               	movf	sendMessage@packet^(0+128),w
  4844  0B8D  3E01               	addlw	1
  4845  0B8E  00B3               	movwf	strcat@to^(0+128)
  4846  0B8F  3000               	movlw	0
  4847  0B90  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4848  0B91  00B4               	movwf	(strcat@to+1)^(0+128)
  4849  0B92  3068               	movlw	low (STR_1| (0+32768))
  4850  0B93  00B5               	movwf	strcat@from^(0+128)
  4851  0B94  3098               	movlw	high (STR_1| (0+32768))
  4852  0B95  00B6               	movwf	(strcat@from^(0+128)+1)
  4853  0B96  3196  26D5  318B   	fcall	_strcat
  4854                           
  4855                           ;main.c: 82: strcat(packet->Message, ftoa(value, &status));
  4856  0B99  0021               	movlb	1	; select bank1
  4857  0B9A  0839               	movf	sendMessage@packet^(0+128),w
  4858  0B9B  3E01               	addlw	1
  4859  0B9C  00B3               	movwf	strcat@to^(0+128)
  4860  0B9D  3000               	movlw	0
  4861  0B9E  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4862  0B9F  00B4               	movwf	(strcat@to+1)^(0+128)
  4863  0BA0  083D               	movf	sendMessage@value^(0+128),w
  4864  0BA1  00A6               	movwf	ftoa@f^(0+128)
  4865  0BA2  083E               	movf	(sendMessage@value+1)^(0+128),w
  4866  0BA3  00A7               	movwf	(ftoa@f+1)^(0+128)
  4867  0BA4  083F               	movf	(sendMessage@value+2)^(0+128),w
  4868  0BA5  00A8               	movwf	(ftoa@f+2)^(0+128)
  4869  0BA6  30C1               	movlw	(low (sendMessage@status| 0))& (0+255)
  4870  0BA7  00C0               	movwf	??_sendMessage^(0+128)
  4871  0BA8  0840               	movf	??_sendMessage^(0+128),w
  4872  0BA9  00A9               	movwf	ftoa@status^(0+128)
  4873  0BAA  318F  270E  318B   	fcall	_ftoa
  4874  0BAD  0021               	movlb	1	; select bank1
  4875  0BAE  00B5               	movwf	strcat@from^(0+128)
  4876  0BAF  3001               	movlw	1
  4877  0BB0  00B6               	movwf	(strcat@from+1)^(0+128)
  4878  0BB1  3196  26D5  318B   	fcall	_strcat
  4879                           
  4880                           ;main.c: 84: packet->packetData.byte = 0;
  4881  0BB4  0021               	movlb	1	; select bank1
  4882  0BB5  0839               	movf	sendMessage@packet^(0+128),w
  4883  0BB6  0086               	movwf	6
  4884  0BB7  083A               	movf	(sendMessage@packet+1)^(0+128),w
  4885  0BB8  0087               	movwf	7
  4886  0BB9  0181               	clrf	1
  4887                           
  4888                           ;main.c: 85: packet->packetData.ACKRequest = 1;
  4889  0BBA  0839               	movf	sendMessage@packet^(0+128),w
  4890  0BBB  0086               	movwf	6
  4891  0BBC  083A               	movf	(sendMessage@packet+1)^(0+128),w
  4892  0BBD  0087               	movwf	7
  4893  0BBE  1501               	bsf	1,2
  4894                           
  4895                           ;main.c: 87: nrf24l01SendPacket(packet);
  4896  0BBF  083A               	movf	(sendMessage@packet+1)^(0+128),w
  4897  0BC0  0020               	movlb	0	; select bank0
  4898  0BC1  00AE               	movwf	nrf24l01SendPacket@txPacket+1
  4899  0BC2  0021               	movlb	1	; select bank1
  4900  0BC3  0839               	movf	sendMessage@packet^(0+128),w
  4901  0BC4  0020               	movlb	0	; select bank0
  4902  0BC5  00AD               	movwf	nrf24l01SendPacket@txPacket
  4903  0BC6  3189  21E7  318B   	fcall	_nrf24l01SendPacket
  4904                           
  4905                           ;main.c: 89: sleepListren(3);
  4906  0BC9  3003               	movlw	3
  4907  0BCA  0020               	movlb	0	; select bank0
  4908  0BCB  00A5               	movwf	sleepListren@seconds
  4909  0BCC  3000               	movlw	0
  4910  0BCD  00A6               	movwf	sleepListren@seconds+1
  4911  0BCE  3188  2001         	fcall	_sleepListren
  4912  0BD0  0008               	return
  4913  0BD1                     __end_of_sendMessage:	
  4914                           
  4915                           	psect	text11
  4916  16D5                     __ptext11:	
  4917 ;; *************** function _strcat *****************
  4918 ;; Defined at:
  4919 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  4920 ;; Parameters:    Size  Location     Type
  4921 ;;  to              2   19[BANK1 ] PTR unsigned char 
  4922 ;;		 -> main@packet(33), loop@packet(33), 
  4923 ;;  from            2   21[BANK1 ] PTR const unsigned char 
  4924 ;;		 -> ftoa@buf(17), STR_9(5), STR_7(6), STR_6(5), 
  4925 ;;		 -> STR_5(7), STR_4(5), STR_3(5), STR_2(2), 
  4926 ;;		 -> STR_1(2), 
  4927 ;; Auto vars:     Size  Location     Type
  4928 ;;  cp              2   23[BANK1 ] PTR unsigned char 
  4929 ;;		 -> main@packet(33), loop@packet(33), 
  4930 ;; Return value:  Size  Location     Type
  4931 ;;                  2   19[BANK1 ] PTR unsigned char 
  4932 ;; Registers used:
  4933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4934 ;; Tracked objects:
  4935 ;;		On entry : 0/0
  4936 ;;		On exit  : 0/0
  4937 ;;		Unchanged: 0/0
  4938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4939 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4940 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4942 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  4943 ;;Total ram usage:        6 bytes
  4944 ;; Hardware stack levels used:    1
  4945 ;; Hardware stack levels required when called:    8
  4946 ;; This function calls:
  4947 ;;		Nothing
  4948 ;; This function is called by:
  4949 ;;		_sendMessage
  4950 ;; This function uses a non-reentrant model
  4951 ;;
  4952                           
  4953                           
  4954                           ;psect for function _strcat
  4955  16D5                     _strcat:	
  4956                           
  4957                           ;incstack = 0
  4958                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  4959  16D5  0021               	movlb	1	; select bank1
  4960  16D6  0834               	movf	(strcat@to+1)^(0+128),w
  4961  16D7  00B8               	movwf	(strcat@cp+1)^(0+128)
  4962  16D8  0833               	movf	strcat@to^(0+128),w
  4963  16D9  00B7               	movwf	strcat@cp^(0+128)
  4964  16DA                     l2962:	
  4965  16DA  0837               	movf	strcat@cp^(0+128),w
  4966  16DB  0086               	movwf	6
  4967  16DC  0838               	movf	(strcat@cp+1)^(0+128),w
  4968  16DD  0087               	movwf	7
  4969  16DE  0801               	movf	1,w
  4970  16DF  1903               	btfsc	3,2
  4971  16E0  2EEE               	goto	l2966
  4972  16E1  3001               	movlw	1
  4973  16E2  07B7               	addwf	strcat@cp^(0+128),f
  4974  16E3  3000               	movlw	0
  4975  16E4  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  4976  16E5  2EDA               	goto	l2962
  4977  16E6                     l2964:	
  4978  16E6  3001               	movlw	1
  4979  16E7  07B7               	addwf	strcat@cp^(0+128),f
  4980  16E8  3000               	movlw	0
  4981  16E9  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  4982  16EA  3001               	movlw	1
  4983  16EB  07B5               	addwf	strcat@from^(0+128),f
  4984  16EC  3000               	movlw	0
  4985  16ED  3DB6               	addwfc	(strcat@from+1)^(0+128),f
  4986  16EE                     l2966:	
  4987  16EE  0837               	movf	strcat@cp^(0+128),w
  4988  16EF  0086               	movwf	6
  4989  16F0  0838               	movf	(strcat@cp+1)^(0+128),w
  4990  16F1  0087               	movwf	7
  4991  16F2  0835               	movf	strcat@from^(0+128),w
  4992  16F3  0084               	movwf	4
  4993  16F4  0836               	movf	(strcat@from+1)^(0+128),w
  4994  16F5  0085               	movwf	5
  4995  16F6  0800               	movf	0,w	;code access
  4996  16F7  3FC0               	movwi [0]fsr1
  4997  16F8  0889               	movf	9,f
  4998  16F9  1903               	btfsc	3,2
  4999  16FA  0008               	return
  5000  16FB  2EE6               	goto	l2964
  5001  16FC                     __end_of_strcat:	
  5002                           ;	Return value of _strcat is never used
  5003                           
  5004                           
  5005                           	psect	text12
  5006  0801                     __ptext12:	
  5007 ;; *************** function _sleepListren *****************
  5008 ;; Defined at:
  5009 ;;		line 61 in file "main.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;  seconds         2    5[BANK0 ] unsigned int 
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;		None
  5014 ;; Return value:  Size  Location     Type
  5015 ;;                  1    wreg      void 
  5016 ;; Registers used:
  5017 ;;		wreg, status,2, status,0, pclath, cstack
  5018 ;; Tracked objects:
  5019 ;;		On entry : 0/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5023 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5026 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5027 ;;Total ram usage:        2 bytes
  5028 ;; Hardware stack levels used:    1
  5029 ;; Hardware stack levels required when called:   12
  5030 ;; This function calls:
  5031 ;;		_nrf24l01SetRXMode
  5032 ;;		_sleepMs
  5033 ;; This function is called by:
  5034 ;;		_sendMessage
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           
  5039                           ;psect for function _sleepListren
  5040  0801                     _sleepListren:	
  5041  0801                     l3834:	
  5042                           ;main.c: 63: while(seconds--){
  5043                           
  5044                           ;incstack = 0
  5045                           ; Regs used in _sleepListren: [wreg+status,2+status,0+pclath+cstack]
  5046                           
  5047  0801  3001               	movlw	1
  5048  0802  0020               	movlb	0	; select bank0
  5049  0803  02A5               	subwf	sleepListren@seconds,f
  5050  0804  3000               	movlw	0
  5051  0805  3BA6               	subwfb	sleepListren@seconds+1,f
  5052  0806  0A25               	incf	sleepListren@seconds,w
  5053  0807  1903               	btfsc	3,2
  5054  0808  0A26               	incf	sleepListren@seconds+1,w
  5055  0809  1903               	btfsc	3,2
  5056  080A  0008               	return
  5057                           
  5058                           ;main.c: 65: nrf24l01SetRXMode(1);
  5059  080B  3001               	movlw	1
  5060  080C  3197  2777  3188   	fcall	_nrf24l01SetRXMode
  5061                           
  5062                           ;main.c: 66: sleepMs(250);
  5063  080F  30FA               	movlw	250
  5064  0810  0020               	movlb	0	; select bank0
  5065  0811  00A0               	movwf	sleepMs@milliseconds
  5066  0812  3000               	movlw	0
  5067  0813  00A1               	movwf	sleepMs@milliseconds+1
  5068  0814  3197  27D0  3188   	fcall	_sleepMs
  5069                           
  5070                           ;main.c: 68: nrf24l01SetRXMode(0);
  5071  0817  3000               	movlw	0
  5072  0818  3197  2777  3188   	fcall	_nrf24l01SetRXMode
  5073                           
  5074                           ;main.c: 69: sleepMs(750);
  5075  081B  30EE               	movlw	238
  5076  081C  0020               	movlb	0	; select bank0
  5077  081D  00A0               	movwf	sleepMs@milliseconds
  5078  081E  3002               	movlw	2
  5079  081F  00A1               	movwf	sleepMs@milliseconds+1
  5080  0820  3197  27D0  3188   	fcall	_sleepMs
  5081  0823  2801               	goto	l3834
  5082  0824                     __end_of_sleepListren:	
  5083                           
  5084                           	psect	text13
  5085  09E7                     __ptext13:	
  5086 ;; *************** function _nrf24l01SendPacket *****************
  5087 ;; Defined at:
  5088 ;;		line 220 in file "nrf24l01.c"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;  txPacket        2   13[BANK0 ] PTR struct .
  5091 ;;		 -> main@packet(33), loop@packet(33), 
  5092 ;; Auto vars:     Size  Location     Type
  5093 ;;		None
  5094 ;; Return value:  Size  Location     Type
  5095 ;;                  1    wreg      void 
  5096 ;; Registers used:
  5097 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5098 ;; Tracked objects:
  5099 ;;		On entry : 0/0
  5100 ;;		On exit  : 0/0
  5101 ;;		Unchanged: 0/0
  5102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5103 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5105 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5106 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5107 ;;Total ram usage:        4 bytes
  5108 ;; Hardware stack levels used:    1
  5109 ;; Hardware stack levels required when called:   14
  5110 ;; This function calls:
  5111 ;;		_nrf24l01Service
  5112 ;;		_sleepMs
  5113 ;;		_strcpy
  5114 ;; This function is called by:
  5115 ;;		_sendMessage
  5116 ;; This function uses a non-reentrant model
  5117 ;;
  5118                           
  5119                           
  5120                           ;psect for function _nrf24l01SendPacket
  5121  09E7                     _nrf24l01SendPacket:	
  5122                           
  5123                           ;nrf24l01.c: 222: strcpy(TXPacket.Message, txPacket->Message);
  5124                           
  5125                           ;incstack = 0
  5126                           ; Regs used in _nrf24l01SendPacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5127  09E7  30C2               	movlw	low (_TXPacket+1)
  5128  09E8  0020               	movlb	0	; select bank0
  5129  09E9  00A0               	movwf	strcpy@to
  5130  09EA  3001               	movlw	high (_TXPacket+1)
  5131  09EB  00A1               	movwf	strcpy@to+1
  5132  09EC  082D               	movf	nrf24l01SendPacket@txPacket,w
  5133  09ED  3E01               	addlw	1
  5134  09EE  00AF               	movwf	??_nrf24l01SendPacket
  5135  09EF  3000               	movlw	0
  5136  09F0  3D2E               	addwfc	nrf24l01SendPacket@txPacket+1,w
  5137  09F1  00B0               	movwf	??_nrf24l01SendPacket+1
  5138  09F2  082F               	movf	??_nrf24l01SendPacket,w
  5139  09F3  00A2               	movwf	strcpy@from
  5140  09F4  0830               	movf	??_nrf24l01SendPacket+1,w
  5141  09F5  00A3               	movwf	strcpy@from+1
  5142  09F6  3187  27E5  3189   	fcall	_strcpy
  5143                           
  5144                           ;nrf24l01.c: 223: TXPacket.packetData = txPacket->packetData;
  5145  09F9  0020               	movlb	0	; select bank0
  5146  09FA  082D               	movf	nrf24l01SendPacket@txPacket,w
  5147  09FB  0086               	movwf	6
  5148  09FC  082E               	movf	nrf24l01SendPacket@txPacket+1,w
  5149  09FD  0087               	movwf	7
  5150  09FE  0801               	movf	1,w
  5151  09FF  00AF               	movwf	??_nrf24l01SendPacket
  5152  0A00  082F               	movf	??_nrf24l01SendPacket,w
  5153  0A01  0023               	movlb	3	; select bank3
  5154  0A02  00C1               	movwf	_TXPacket^(0+384)
  5155                           
  5156                           ;nrf24l01.c: 225: status.TX = statuses.TX.Ready;
  5157  0A03  3035               	movlw	low ((_statuses+1)| (0+32768))
  5158  0A04  0084               	movwf	4
  5159  0A05  3098               	movlw	high ((_statuses+1)| (0+32768))
  5160  0A06  0085               	movwf	5
  5161  0A07  0800               	movf	0,w	;code access
  5162  0A08  0020               	movlb	0	; select bank0
  5163  0A09  00AF               	movwf	??_nrf24l01SendPacket
  5164  0A0A  0021               	movlb	1	; select bank1
  5165  0A0B  0867               	movf	_status^(0+128),w	;volatile
  5166  0A0C  0020               	movlb	0	; select bank0
  5167  0A0D  062F               	xorwf	??_nrf24l01SendPacket,w
  5168  0A0E  39F0               	andlw	-16
  5169  0A0F  062F               	xorwf	??_nrf24l01SendPacket,w
  5170  0A10  0021               	movlb	1	; select bank1
  5171  0A11  00E7               	movwf	_status^(0+128)	;volatile
  5172  0A12                     l3868:	
  5173                           ;nrf24l01.c: 227: while (status.TX != statuses.TX.Idle){
  5174                           
  5175  0A12  3034               	movlw	low (_statuses| (0+32768))
  5176  0A13  0084               	movwf	4
  5177  0A14  3098               	movlw	high (_statuses| (0+32768))
  5178  0A15  0085               	movwf	5
  5179  0A16  0800               	movf	0,w	;code access
  5180  0A17  0020               	movlb	0	; select bank0
  5181  0A18  00AF               	movwf	??_nrf24l01SendPacket
  5182  0A19  0021               	movlb	1	; select bank1
  5183  0A1A  0867               	movf	_status^(0+128),w	;volatile
  5184  0A1B  390F               	andlw	15
  5185  0A1C  0020               	movlb	0	; select bank0
  5186  0A1D  062F               	xorwf	??_nrf24l01SendPacket,w
  5187  0A1E  1903               	btfsc	3,2
  5188  0A1F  0008               	return
  5189                           
  5190                           ;nrf24l01.c: 228: sleepMs(10);
  5191  0A20  300A               	movlw	10
  5192  0A21  0020               	movlb	0	; select bank0
  5193  0A22  00A0               	movwf	sleepMs@milliseconds
  5194  0A23  3000               	movlw	0
  5195  0A24  00A1               	movwf	sleepMs@milliseconds+1
  5196  0A25  3197  27D0  3189   	fcall	_sleepMs
  5197                           
  5198                           ;nrf24l01.c: 229: nrf24l01Service();
  5199  0A28  3182  2202  3189   	fcall	_nrf24l01Service
  5200  0A2B  2A12               	goto	l3868
  5201  0A2C                     __end_of_nrf24l01SendPacket:	
  5202                           
  5203                           	psect	text14
  5204  07E5                     __ptext14:	
  5205 ;; *************** function _strcpy *****************
  5206 ;; Defined at:
  5207 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  5208 ;; Parameters:    Size  Location     Type
  5209 ;;  to              2    0[BANK0 ] PTR unsigned char 
  5210 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5211 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  5212 ;;		 -> romDataMap.name(16), packet.Message(32), packet.Message(32), main@packet(33), 
  5213 ;;		 -> STR_8(4), loop@packet(33), romDataMap(28), 
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  5216 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5217 ;; Return value:  Size  Location     Type
  5218 ;;                  2    0[BANK0 ] PTR unsigned char 
  5219 ;; Registers used:
  5220 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5226 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5227 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5229 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5230 ;;Total ram usage:        6 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; Hardware stack levels required when called:    8
  5233 ;; This function calls:
  5234 ;;		Nothing
  5235 ;; This function is called by:
  5236 ;;		_sendMessage
  5237 ;;		_main
  5238 ;;		_nrf24l01SendPacket
  5239 ;; This function uses a non-reentrant model
  5240 ;;
  5241                           
  5242                           
  5243                           ;psect for function _strcpy
  5244  07E5                     _strcpy:	
  5245                           
  5246                           ;incstack = 0
  5247                           ; Regs used in _strcpy: [wreg-fsr1h+pclath]
  5248  07E5  0020               	movlb	0	; select bank0
  5249  07E6  0821               	movf	strcpy@to+1,w
  5250  07E7  00A5               	movwf	strcpy@cp+1
  5251  07E8  0820               	movf	strcpy@to,w
  5252  07E9  00A4               	movwf	strcpy@cp
  5253  07EA                     l2584:	
  5254  07EA  0824               	movf	strcpy@cp,w
  5255  07EB  0086               	movwf	6
  5256  07EC  0825               	movf	strcpy@cp+1,w
  5257  07ED  0087               	movwf	7
  5258  07EE  0822               	movf	strcpy@from,w
  5259  07EF  0084               	movwf	4
  5260  07F0  0823               	movf	strcpy@from+1,w
  5261  07F1  0085               	movwf	5
  5262  07F2  0800               	movf	0,w	;code access
  5263  07F3  3FC0               	movwi [0]fsr1
  5264  07F4  0889               	movf	9,f
  5265  07F5  1903               	btfsc	3,2
  5266  07F6  0008               	return
  5267  07F7  3001               	movlw	1
  5268  07F8  07A4               	addwf	strcpy@cp,f
  5269  07F9  3000               	movlw	0
  5270  07FA  3DA5               	addwfc	strcpy@cp+1,f
  5271  07FB  3001               	movlw	1
  5272  07FC  07A2               	addwf	strcpy@from,f
  5273  07FD  3000               	movlw	0
  5274  07FE  3DA3               	addwfc	strcpy@from+1,f
  5275  07FF  2FEA               	goto	l2584
  5276  0800                     __end_of_strcpy:	
  5277                           ;	Return value of _strcpy is never used
  5278                           
  5279                           
  5280                           	psect	text15
  5281  0202                     __ptext15:	
  5282 ;; *************** function _nrf24l01Service *****************
  5283 ;; Defined at:
  5284 ;;		line 297 in file "nrf24l01.c"
  5285 ;; Parameters:    Size  Location     Type
  5286 ;;		None
  5287 ;; Auto vars:     Size  Location     Type
  5288 ;;  width           1   11[BANK0 ] unsigned char 
  5289 ;;  i               1   12[BANK0 ] unsigned char 
  5290 ;; Return value:  Size  Location     Type
  5291 ;;                  1    wreg      void 
  5292 ;; Registers used:
  5293 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5294 ;; Tracked objects:
  5295 ;;		On entry : 0/0
  5296 ;;		On exit  : 0/0
  5297 ;;		Unchanged: 0/0
  5298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5300 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5301 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5302 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5303 ;;Total ram usage:        3 bytes
  5304 ;; Hardware stack levels used:    1
  5305 ;; Hardware stack levels required when called:   13
  5306 ;; This function calls:
  5307 ;;		_memset
  5308 ;;		_nrf24l01CEHigh
  5309 ;;		_nrf24l01CELow
  5310 ;;		_nrf24l01SPIEnd
  5311 ;;		_nrf24l01SPISend
  5312 ;;		_nrf24l01SPIStart
  5313 ;;		_nrf24l01Send
  5314 ;;		_nrf24l01SetRXMode
  5315 ;;		_nrf24l01SetTXBuffer
  5316 ;;		_strcmp
  5317 ;; This function is called by:
  5318 ;;		_nrf24l01SendPacket
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           
  5323                           ;psect for function _nrf24l01Service
  5324  0202                     _nrf24l01Service:	
  5325                           
  5326                           ;nrf24l01.c: 299: unsigned char i;;nrf24l01.c: 301: if (status.TX == statuses.TX.Ready){
  5327                           
  5328                           ;incstack = 0
  5329                           ; Regs used in _nrf24l01Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5330  0202  3035               	movlw	low ((_statuses+1)| (0+32768))
  5331  0203  0084               	movwf	4
  5332  0204  3098               	movlw	high ((_statuses+1)| (0+32768))
  5333  0205  0085               	movwf	5
  5334  0206  0800               	movf	0,w	;code access
  5335  0207  0020               	movlb	0	; select bank0
  5336  0208  00AA               	movwf	??_nrf24l01Service
  5337  0209  0021               	movlb	1	; select bank1
  5338  020A  0867               	movf	_status^(0+128),w	;volatile
  5339  020B  390F               	andlw	15
  5340  020C  0020               	movlb	0	; select bank0
  5341  020D  062A               	xorwf	??_nrf24l01Service,w
  5342  020E  1D03               	skipz
  5343  020F  2A2C               	goto	l3688
  5344                           
  5345                           ;nrf24l01.c: 303: nrf24l01SetTXBuffer(&TXPacket);
  5346  0210  30C1               	movlw	(low (_TXPacket| (0+256)))& (0+255)
  5347  0211  3189  21A2  3182   	fcall	_nrf24l01SetTXBuffer
  5348                           
  5349                           ;nrf24l01.c: 306: status.TX = statuses.TX.Sending;
  5350  0214  3036               	movlw	low ((_statuses+2)| (0+32768))
  5351  0215  0084               	movwf	4
  5352  0216  3098               	movlw	high ((_statuses+2)| (0+32768))
  5353  0217  0085               	movwf	5
  5354  0218  0800               	movf	0,w	;code access
  5355  0219  0020               	movlb	0	; select bank0
  5356  021A  00AA               	movwf	??_nrf24l01Service
  5357  021B  0021               	movlb	1	; select bank1
  5358  021C  0867               	movf	_status^(0+128),w	;volatile
  5359  021D  0020               	movlb	0	; select bank0
  5360  021E  062A               	xorwf	??_nrf24l01Service,w
  5361  021F  39F0               	andlw	-16
  5362  0220  062A               	xorwf	??_nrf24l01Service,w
  5363  0221  0021               	movlb	1	; select bank1
  5364  0222  00E7               	movwf	_status^(0+128)	;volatile
  5365                           
  5366                           ;nrf24l01.c: 309: nrf24l01CEHigh();
  5367  0223  3194  24DA  3182   	fcall	_nrf24l01CEHigh
  5368                           
  5369                           ;nrf24l01.c: 310: _delay((unsigned long)((12)*(32000000/4000000.0)));
  5370  0226  3020               	movlw	32
  5371  0227                     u4477:	
  5372  0227  0B89               	decfsz	9,f
  5373  0228  2A27               	goto	u4477
  5374                           
  5375                           ;nrf24l01.c: 311: nrf24l01CELow();
  5376  0229  3194  24DD  3182   	fcall	_nrf24l01CELow
  5377  022C                     l3688:	
  5378                           
  5379                           ;nrf24l01.c: 312: };nrf24l01.c: 314: if (status.RX == statuses.RX.Pending){
  5380  022C  3039               	movlw	low ((_statuses+5)| (0+32768))
  5381  022D  0084               	movwf	4
  5382  022E  3098               	movlw	high ((_statuses+5)| (0+32768))
  5383  022F  0085               	movwf	5
  5384  0230  0800               	movf	0,w	;code access
  5385  0231  0020               	movlb	0	; select bank0
  5386  0232  00AA               	movwf	??_nrf24l01Service
  5387  0233  0021               	movlb	1	; select bank1
  5388  0234  0E67               	swapf	_status^(0+128),w	;volatile
  5389  0235  390F               	andlw	15
  5390  0236  0020               	movlb	0	; select bank0
  5391  0237  062A               	xorwf	??_nrf24l01Service,w
  5392  0238  1D03               	skipz
  5393  0239  2AB9               	goto	l3726
  5394                           
  5395                           ;nrf24l01.c: 317: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  5396  023A  30A1               	movlw	low (_RXPacket+1)
  5397  023B  00A0               	movwf	memset@p1
  5398  023C  3001               	movlw	high (_RXPacket+1)
  5399  023D  00A1               	movwf	memset@p1+1
  5400  023E  3000               	movlw	0
  5401  023F  00A2               	movwf	memset@c
  5402  0240  00A3               	movwf	memset@c+1
  5403  0241  3020               	movlw	32
  5404  0242  00A4               	movwf	memset@n
  5405  0243  3000               	movlw	0
  5406  0244  00A5               	movwf	memset@n+1
  5407  0245  3195  2567  3182   	fcall	_memset
  5408                           
  5409                           ;nrf24l01.c: 318: RXPacket.packetData.byte = 0x00;
  5410  0248  0023               	movlb	3	; select bank3
  5411  0249  01A0               	clrf	_RXPacket^(0+384)
  5412                           
  5413                           ;nrf24l01.c: 321: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  5414  024A  0020               	movlb	0	; select bank0
  5415  024B  01A0               	clrf	nrf24l01Send@data
  5416  024C  3060               	movlw	96
  5417  024D  3196  264B  3182   	fcall	_nrf24l01Send
  5418  0250  0020               	movlb	0	; select bank0
  5419  0251  00AA               	movwf	??_nrf24l01Service
  5420  0252  082A               	movf	??_nrf24l01Service,w
  5421  0253  00AB               	movwf	nrf24l01Service@width
  5422                           
  5423                           ;nrf24l01.c: 324: nrf24l01CELow();
  5424  0254  3194  24DD  3182   	fcall	_nrf24l01CELow
  5425                           
  5426                           ;nrf24l01.c: 327: nrf24l01SPIStart();
  5427  0257  3194  24FB  3182   	fcall	_nrf24l01SPIStart
  5428                           
  5429                           ;nrf24l01.c: 330: nrf24l01SPISend((unsigned) 0b01100001);
  5430  025A  3061               	movlw	97
  5431  025B  3195  250C  3182   	fcall	_nrf24l01SPISend
  5432                           
  5433                           ;nrf24l01.c: 333: RXPacket.packetData.byte = nrf24l01SPISend(0);
  5434  025E  3000               	movlw	0
  5435  025F  3195  250C  3182   	fcall	_nrf24l01SPISend
  5436  0262  0020               	movlb	0	; select bank0
  5437  0263  00AA               	movwf	??_nrf24l01Service
  5438  0264  082A               	movf	??_nrf24l01Service,w
  5439  0265  0023               	movlb	3	; select bank3
  5440  0266  00A0               	movwf	_RXPacket^(0+384)
  5441                           
  5442                           ;nrf24l01.c: 334: width--;
  5443  0267  3001               	movlw	1
  5444  0268  0020               	movlb	0	; select bank0
  5445  0269  02AB               	subwf	nrf24l01Service@width,f
  5446                           
  5447                           ;nrf24l01.c: 336: for (i = 0; (i < width) && (i < 32); i++){
  5448  026A  01AC               	clrf	nrf24l01Service@i
  5449  026B  2A7D               	goto	l3712
  5450  026C                     l3708:	
  5451                           
  5452                           ;nrf24l01.c: 338: RXPacket.Message[i] = nrf24l01SPISend(0);
  5453  026C  3000               	movlw	0
  5454  026D  3195  250C  3182   	fcall	_nrf24l01SPISend
  5455  0270  0020               	movlb	0	; select bank0
  5456  0271  00AA               	movwf	??_nrf24l01Service
  5457  0272  082C               	movf	nrf24l01Service@i,w
  5458  0273  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5459  0274  0086               	movwf	6
  5460  0275  3001               	movlw	1	; select bank3/4
  5461  0276  0087               	movwf	7
  5462  0277  082A               	movf	??_nrf24l01Service,w
  5463  0278  0081               	movwf	1
  5464  0279  3001               	movlw	1
  5465  027A  00AA               	movwf	??_nrf24l01Service
  5466  027B  082A               	movf	??_nrf24l01Service,w
  5467  027C  07AC               	addwf	nrf24l01Service@i,f
  5468  027D                     l3712:	
  5469  027D  082B               	movf	nrf24l01Service@width,w
  5470  027E  022C               	subwf	nrf24l01Service@i,w
  5471  027F  1803               	skipnc
  5472  0280  2A85               	goto	l3716
  5473  0281  3020               	movlw	32
  5474  0282  022C               	subwf	nrf24l01Service@i,w
  5475  0283  1C03               	skipc
  5476  0284  2A6C               	goto	l3708
  5477  0285                     l3716:	
  5478                           
  5479                           ;nrf24l01.c: 339: };nrf24l01.c: 342: nrf24l01SPIEnd();
  5480  0285  3194  24EC  3182   	fcall	_nrf24l01SPIEnd
  5481                           
  5482                           ;nrf24l01.c: 345: nrf24l01CEHigh();
  5483  0288  3194  24DA  3182   	fcall	_nrf24l01CEHigh
  5484                           
  5485                           ;nrf24l01.c: 348: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
  5486  028B  0021               	movlb	1	; select bank1
  5487  028C  0C68               	rrf	(_status^(0+128)+1),w	;volatile
  5488  028D  3907               	andlw	7
  5489  028E  0020               	movlb	0	; select bank0
  5490  028F  00AA               	movwf	??_nrf24l01Service
  5491  0290  0EAA               	swapf	??_nrf24l01Service,f
  5492  0291  0023               	movlb	3	; select bank3
  5493  0292  0820               	movf	_RXPacket^(0+384),w
  5494  0293  0020               	movlb	0	; select bank0
  5495  0294  062A               	xorwf	??_nrf24l01Service,w
  5496  0295  398F               	andlw	-113
  5497  0296  062A               	xorwf	??_nrf24l01Service,w
  5498  0297  0023               	movlb	3	; select bank3
  5499  0298  00A0               	movwf	_RXPacket^(0+384)
  5500                           
  5501                           ;nrf24l01.c: 351: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  5502  0299  0020               	movlb	0	; select bank0
  5503  029A  01A0               	clrf	nrf24l01Send@data
  5504  029B  3009               	movlw	9
  5505  029C  3196  264B  3182   	fcall	_nrf24l01Send
  5506  029F  0020               	movlb	0	; select bank0
  5507  02A0  00AA               	movwf	??_nrf24l01Service
  5508  02A1  0023               	movlb	3	; select bank3
  5509  02A2  0820               	movf	_RXPacket^(0+384),w
  5510  02A3  0020               	movlb	0	; select bank0
  5511  02A4  062A               	xorwf	??_nrf24l01Service,w
  5512  02A5  39FE               	andlw	-2
  5513  02A6  062A               	xorwf	??_nrf24l01Service,w
  5514  02A7  0023               	movlb	3	; select bank3
  5515  02A8  00A0               	movwf	_RXPacket^(0+384)
  5516                           
  5517                           ;nrf24l01.c: 353: status.RX = statuses.RX.Ready;
  5518  02A9  303A               	movlw	low ((_statuses+6)| (0+32768))
  5519  02AA  0084               	movwf	4
  5520  02AB  3098               	movlw	high ((_statuses+6)| (0+32768))
  5521  02AC  0085               	movwf	5
  5522  02AD  0800               	movf	0,w	;code access
  5523  02AE  0020               	movlb	0	; select bank0
  5524  02AF  00AA               	movwf	??_nrf24l01Service
  5525  02B0  0EAA               	swapf	??_nrf24l01Service,f
  5526  02B1  0021               	movlb	1	; select bank1
  5527  02B2  0867               	movf	_status^(0+128),w	;volatile
  5528  02B3  0020               	movlb	0	; select bank0
  5529  02B4  062A               	xorwf	??_nrf24l01Service,w
  5530  02B5  390F               	andlw	-241
  5531  02B6  062A               	xorwf	??_nrf24l01Service,w
  5532  02B7  0021               	movlb	1	; select bank1
  5533  02B8  00E7               	movwf	_status^(0+128)	;volatile
  5534  02B9                     l3726:	
  5535                           
  5536                           ;nrf24l01.c: 354: };nrf24l01.c: 356: if (status.RX == statuses.RX.Ready){
  5537  02B9  303A               	movlw	low ((_statuses+6)| (0+32768))
  5538  02BA  0084               	movwf	4
  5539  02BB  3098               	movlw	high ((_statuses+6)| (0+32768))
  5540  02BC  0085               	movwf	5
  5541  02BD  0800               	movf	0,w	;code access
  5542  02BE  0020               	movlb	0	; select bank0
  5543  02BF  00AA               	movwf	??_nrf24l01Service
  5544  02C0  0021               	movlb	1	; select bank1
  5545  02C1  0E67               	swapf	_status^(0+128),w	;volatile
  5546  02C2  390F               	andlw	15
  5547  02C3  0020               	movlb	0	; select bank0
  5548  02C4  062A               	xorwf	??_nrf24l01Service,w
  5549  02C5  1D03               	skipz
  5550  02C6  2B07               	goto	l3738
  5551                           
  5552                           ;nrf24l01.c: 359: if (RXPacket.packetData.IsACK){
  5553  02C7  0023               	movlb	3	; select bank3
  5554  02C8  1DA0               	btfss	_RXPacket^(0+384),3
  5555  02C9  2B07               	goto	l3738
  5556                           
  5557                           ;nrf24l01.c: 361: if (status.TX == statuses.TX.PendingACK){
  5558  02CA  3037               	movlw	low ((_statuses+3)| (0+32768))
  5559  02CB  0084               	movwf	4
  5560  02CC  3098               	movlw	high ((_statuses+3)| (0+32768))
  5561  02CD  0085               	movwf	5
  5562  02CE  0800               	movf	0,w	;code access
  5563  02CF  0020               	movlb	0	; select bank0
  5564  02D0  00AA               	movwf	??_nrf24l01Service
  5565  02D1  0021               	movlb	1	; select bank1
  5566  02D2  0867               	movf	_status^(0+128),w	;volatile
  5567  02D3  390F               	andlw	15
  5568  02D4  0020               	movlb	0	; select bank0
  5569  02D5  062A               	xorwf	??_nrf24l01Service,w
  5570  02D6  1D03               	skipz
  5571  02D7  2B07               	goto	l3738
  5572                           
  5573                           ;nrf24l01.c: 363: if (strcmp(RXPacket.Message, TXPacket.Message) == 0){
  5574  02D8  30C2               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  5575  02D9  00AA               	movwf	??_nrf24l01Service
  5576  02DA  082A               	movf	??_nrf24l01Service,w
  5577  02DB  00A0               	movwf	strcmp@s2
  5578  02DC  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5579  02DD  3197  2724  3182   	fcall	_strcmp
  5580  02E0  0020               	movlb	0	; select bank0
  5581  02E1  0820               	movf	?_strcmp,w
  5582  02E2  0421               	iorwf	?_strcmp+1,w
  5583  02E3  1D03               	btfss	3,2
  5584  02E4  2B07               	goto	l3738
  5585                           
  5586                           ;nrf24l01.c: 364: status.TX = statuses.TX.Idle;
  5587  02E5  3034               	movlw	low (_statuses| (0+32768))
  5588  02E6  0084               	movwf	4
  5589  02E7  3098               	movlw	high (_statuses| (0+32768))
  5590  02E8  0085               	movwf	5
  5591  02E9  0800               	movf	0,w	;code access
  5592  02EA  00AA               	movwf	??_nrf24l01Service
  5593  02EB  0021               	movlb	1	; select bank1
  5594  02EC  0867               	movf	_status^(0+128),w	;volatile
  5595  02ED  0020               	movlb	0	; select bank0
  5596  02EE  062A               	xorwf	??_nrf24l01Service,w
  5597  02EF  39F0               	andlw	-16
  5598  02F0  062A               	xorwf	??_nrf24l01Service,w
  5599  02F1  0021               	movlb	1	; select bank1
  5600  02F2  00E7               	movwf	_status^(0+128)	;volatile
  5601                           
  5602                           ;nrf24l01.c: 365: status.RX = statuses.RX.Idle;
  5603  02F3  3038               	movlw	low ((_statuses+4)| (0+32768))
  5604  02F4  0084               	movwf	4
  5605  02F5  3098               	movlw	high ((_statuses+4)| (0+32768))
  5606  02F6  0085               	movwf	5
  5607  02F7  0800               	movf	0,w	;code access
  5608  02F8  0020               	movlb	0	; select bank0
  5609  02F9  00AA               	movwf	??_nrf24l01Service
  5610  02FA  0EAA               	swapf	??_nrf24l01Service,f
  5611  02FB  0021               	movlb	1	; select bank1
  5612  02FC  0867               	movf	_status^(0+128),w	;volatile
  5613  02FD  0020               	movlb	0	; select bank0
  5614  02FE  062A               	xorwf	??_nrf24l01Service,w
  5615  02FF  390F               	andlw	-241
  5616  0300  062A               	xorwf	??_nrf24l01Service,w
  5617  0301  0021               	movlb	1	; select bank1
  5618  0302  00E7               	movwf	_status^(0+128)	;volatile
  5619                           
  5620                           ;nrf24l01.c: 367: nrf24l01SetRXMode(0);
  5621  0303  3000               	movlw	0
  5622  0304  3197  2777  3182   	fcall	_nrf24l01SetRXMode
  5623  0307                     l3738:	
  5624                           
  5625                           ;nrf24l01.c: 369: };nrf24l01.c: 370: };nrf24l01.c: 371: };nrf24l01.c: 372: };nrf24l01.c:
      +                           374: if (status.RX == statuses.RX.Ready){
  5626  0307  303A               	movlw	low ((_statuses+6)| (0+32768))
  5627  0308  0084               	movwf	4
  5628  0309  3098               	movlw	high ((_statuses+6)| (0+32768))
  5629  030A  0085               	movwf	5
  5630  030B  0800               	movf	0,w	;code access
  5631  030C  0020               	movlb	0	; select bank0
  5632  030D  00AA               	movwf	??_nrf24l01Service
  5633  030E  0021               	movlb	1	; select bank1
  5634  030F  0E67               	swapf	_status^(0+128),w	;volatile
  5635  0310  390F               	andlw	15
  5636  0311  0020               	movlb	0	; select bank0
  5637  0312  062A               	xorwf	??_nrf24l01Service,w
  5638  0313  1D03               	skipz
  5639  0314  2B34               	goto	l3756
  5640                           
  5641                           ;nrf24l01.c: 376: if (RXPacket.packetData.ACKRequest){
  5642  0315  0023               	movlb	3	; select bank3
  5643  0316  1D20               	btfss	_RXPacket^(0+384),2
  5644  0317  2B2B               	goto	l3754
  5645                           
  5646                           ;nrf24l01.c: 378: RXPacket.packetData.ACKRequest = 0;
  5647  0318  1120               	bcf	_RXPacket^(0+384),2
  5648                           
  5649                           ;nrf24l01.c: 379: RXPacket.packetData.IsACK = 1;
  5650  0319  15A0               	bsf	_RXPacket^(0+384),3
  5651                           
  5652                           ;nrf24l01.c: 380: nrf24l01SetTXBuffer(&RXPacket);
  5653  031A  30A0               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  5654  031B  3189  21A2  3182   	fcall	_nrf24l01SetTXBuffer
  5655                           
  5656                           ;nrf24l01.c: 382: nrf24l01CEHigh();
  5657  031E  3194  24DA  3182   	fcall	_nrf24l01CEHigh
  5658                           
  5659                           ;nrf24l01.c: 383: _delay((unsigned long)((12)*(32000000/4000000.0)));
  5660  0321  3020               	movlw	32
  5661  0322                     u4487:	
  5662  0322  0B89               	decfsz	9,f
  5663  0323  2B22               	goto	u4487
  5664                           
  5665                           ;nrf24l01.c: 384: nrf24l01CELow();
  5666  0324  3194  24DD  3182   	fcall	_nrf24l01CELow
  5667                           
  5668                           ;nrf24l01.c: 386: nrf24l01SetRXMode(1);
  5669  0327  3001               	movlw	1
  5670  0328  3197  2777  3182   	fcall	_nrf24l01SetRXMode
  5671  032B                     l3754:	
  5672                           
  5673                           ;nrf24l01.c: 387: };nrf24l01.c: 389: counter++;
  5674  032B  3001               	movlw	1
  5675  032C  0022               	movlb	2	; select bank2
  5676  032D  07D1               	addwf	_counter^(0+256),f
  5677  032E  3000               	movlw	0
  5678  032F  3DD2               	addwfc	(_counter+1)^(0+256),f
  5679  0330  3000               	movlw	0
  5680  0331  3DD3               	addwfc	(_counter+2)^(0+256),f
  5681  0332  3000               	movlw	0
  5682  0333  3DD4               	addwfc	(_counter+3)^(0+256),f
  5683  0334                     l3756:	
  5684                           
  5685                           ;nrf24l01.c: 390: };nrf24l01.c: 392: if (status.TX == statuses.TX.PendingACK){
  5686  0334  3037               	movlw	low ((_statuses+3)| (0+32768))
  5687  0335  0084               	movwf	4
  5688  0336  3098               	movlw	high ((_statuses+3)| (0+32768))
  5689  0337  0085               	movwf	5
  5690  0338  0800               	movf	0,w	;code access
  5691  0339  0020               	movlb	0	; select bank0
  5692  033A  00AA               	movwf	??_nrf24l01Service
  5693  033B  0021               	movlb	1	; select bank1
  5694  033C  0867               	movf	_status^(0+128),w	;volatile
  5695  033D  390F               	andlw	15
  5696  033E  0020               	movlb	0	; select bank0
  5697  033F  062A               	xorwf	??_nrf24l01Service,w
  5698  0340  1D03               	skipz
  5699  0341  0008               	return
  5700                           
  5701                           ;nrf24l01.c: 393: if (!status.retryCount--){
  5702  0342  3001               	movlw	1
  5703  0343  0021               	movlb	1	; select bank1
  5704  0344  02EA               	subwf	(_status^(0+128)+3),f	;volatile
  5705  0345  0A6A               	incf	(_status^(0+128)+3),w	;volatile
  5706  0346  1D03               	btfss	3,2
  5707  0347  0008               	return
  5708                           
  5709                           ;nrf24l01.c: 394: status.TX = statuses.TX.Ready;
  5710  0348  3035               	movlw	low ((_statuses+1)| (0+32768))
  5711  0349  0084               	movwf	4
  5712  034A  3098               	movlw	high ((_statuses+1)| (0+32768))
  5713  034B  0085               	movwf	5
  5714  034C  0800               	movf	0,w	;code access
  5715  034D  0020               	movlb	0	; select bank0
  5716  034E  00AA               	movwf	??_nrf24l01Service
  5717  034F  0021               	movlb	1	; select bank1
  5718  0350  0867               	movf	_status^(0+128),w	;volatile
  5719  0351  0020               	movlb	0	; select bank0
  5720  0352  062A               	xorwf	??_nrf24l01Service,w
  5721  0353  39F0               	andlw	-16
  5722  0354  062A               	xorwf	??_nrf24l01Service,w
  5723  0355  0021               	movlb	1	; select bank1
  5724  0356  00E7               	movwf	_status^(0+128)	;volatile
  5725  0357  0008               	return
  5726  0358                     __end_of_nrf24l01Service:	
  5727                           
  5728                           	psect	text16
  5729  1724                     __ptext16:	
  5730 ;; *************** function _strcmp *****************
  5731 ;; Defined at:
  5732 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  5733 ;; Parameters:    Size  Location     Type
  5734 ;;  s1              1    wreg     PTR const unsigned char 
  5735 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5736 ;;  s2              1    0[BANK0 ] PTR const unsigned char 
  5737 ;;		 -> TXPacket.Message(32), TXPacket(33), 
  5738 ;; Auto vars:     Size  Location     Type
  5739 ;;  s1              1    4[BANK0 ] PTR const unsigned char 
  5740 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5741 ;;  r               1    3[BANK0 ] char 
  5742 ;; Return value:  Size  Location     Type
  5743 ;;                  2    0[BANK0 ] int 
  5744 ;; Registers used:
  5745 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5746 ;; Tracked objects:
  5747 ;;		On entry : 0/0
  5748 ;;		On exit  : 0/0
  5749 ;;		Unchanged: 0/0
  5750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5751 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5752 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5753 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5754 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5755 ;;Total ram usage:        5 bytes
  5756 ;; Hardware stack levels used:    1
  5757 ;; Hardware stack levels required when called:    8
  5758 ;; This function calls:
  5759 ;;		Nothing
  5760 ;; This function is called by:
  5761 ;;		_nrf24l01Service
  5762 ;; This function uses a non-reentrant model
  5763 ;;
  5764                           
  5765                           
  5766                           ;psect for function _strcmp
  5767  1724                     _strcmp:	
  5768                           
  5769                           ;incstack = 0
  5770                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
  5771                           ;strcmp@s1 stored from wreg
  5772  1724  0020               	movlb	0	; select bank0
  5773  1725  00A4               	movwf	strcmp@s1
  5774  1726  2F2F               	goto	l2402
  5775  1727                     l2398:	
  5776  1727  3001               	movlw	1
  5777  1728  00A2               	movwf	??_strcmp
  5778  1729  0822               	movf	??_strcmp,w
  5779  172A  07A4               	addwf	strcmp@s1,f
  5780  172B  3001               	movlw	1
  5781  172C  00A2               	movwf	??_strcmp
  5782  172D  0822               	movf	??_strcmp,w
  5783  172E  07A0               	addwf	strcmp@s2,f
  5784  172F                     l2402:	
  5785  172F  0824               	movf	strcmp@s1,w
  5786  1730  0086               	movwf	6
  5787  1731  3001               	movlw	1	; select bank2/3
  5788  1732  0087               	movwf	7
  5789  1733  0820               	movf	strcmp@s2,w
  5790  1734  0084               	movwf	4
  5791  1735  3001               	movlw	1	; select bank2/3
  5792  1736  0085               	movwf	5
  5793  1737  0300               	decf	0,w
  5794  1738  3AFF               	xorlw	255
  5795  1739  0701               	addwf	1,w
  5796  173A  00A2               	movwf	??_strcmp
  5797  173B  0822               	movf	??_strcmp,w
  5798  173C  00A3               	movwf	strcmp@r
  5799  173D  0823               	movf	strcmp@r,w
  5800  173E  1D03               	btfss	3,2
  5801  173F  2F47               	goto	l2406
  5802  1740  0824               	movf	strcmp@s1,w
  5803  1741  0086               	movwf	6
  5804  1742  3001               	movlw	1	; select bank2/3
  5805  1743  0087               	movwf	7
  5806  1744  0801               	movf	1,w
  5807  1745  1D03               	btfss	3,2
  5808  1746  2F27               	goto	l2398
  5809  1747                     l2406:	
  5810  1747  0823               	movf	strcmp@r,w
  5811  1748  00A0               	movwf	?_strcmp
  5812  1749  01A1               	clrf	?_strcmp+1
  5813  174A  1BA0               	btfsc	?_strcmp,7
  5814  174B  03A1               	decf	?_strcmp+1,f
  5815  174C  0008               	return
  5816  174D                     __end_of_strcmp:	
  5817                           
  5818                           	psect	text17
  5819  09A2                     __ptext17:	
  5820 ;; *************** function _nrf24l01SetTXBuffer *****************
  5821 ;; Defined at:
  5822 ;;		line 273 in file "nrf24l01.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;  txPacket        1    wreg     PTR struct .
  5825 ;;		 -> TXPacket(33), RXPacket(33), 
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;  txPacket        1    8[BANK0 ] PTR struct .
  5828 ;;		 -> TXPacket(33), RXPacket(33), 
  5829 ;;  i               1    9[BANK0 ] unsigned char 
  5830 ;; Return value:  Size  Location     Type
  5831 ;;                  1    wreg      void 
  5832 ;; Registers used:
  5833 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5834 ;; Tracked objects:
  5835 ;;		On entry : 0/0
  5836 ;;		On exit  : 0/0
  5837 ;;		Unchanged: 0/0
  5838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5840 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5842 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5843 ;;Total ram usage:        4 bytes
  5844 ;; Hardware stack levels used:    1
  5845 ;; Hardware stack levels required when called:   12
  5846 ;; This function calls:
  5847 ;;		_nrf24l01SPIEnd
  5848 ;;		_nrf24l01SPISend
  5849 ;;		_nrf24l01SPIStart
  5850 ;;		_nrf24l01SetRXMode
  5851 ;;		_strlen
  5852 ;; This function is called by:
  5853 ;;		_nrf24l01Service
  5854 ;; This function uses a non-reentrant model
  5855 ;;
  5856                           
  5857                           
  5858                           ;psect for function _nrf24l01SetTXBuffer
  5859  09A2                     _nrf24l01SetTXBuffer:	
  5860                           
  5861                           ;incstack = 0
  5862                           ; Regs used in _nrf24l01SetTXBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5863                           ;nrf24l01SetTXBuffer@txPacket stored from wreg
  5864  09A2  0020               	movlb	0	; select bank0
  5865  09A3  00A8               	movwf	nrf24l01SetTXBuffer@txPacket
  5866                           
  5867                           ;nrf24l01.c: 275: unsigned char i;;nrf24l01.c: 278: nrf24l01SetRXMode(0);
  5868  09A4  3000               	movlw	0
  5869  09A5  3197  2777  3189   	fcall	_nrf24l01SetRXMode
  5870                           
  5871                           ;nrf24l01.c: 281: nrf24l01SPIStart();
  5872  09A8  3194  24FB  3189   	fcall	_nrf24l01SPIStart
  5873                           
  5874                           ;nrf24l01.c: 284: nrf24l01SPISend((unsigned) 0b10110000);
  5875  09AB  30B0               	movlw	176
  5876  09AC  3195  250C  3189   	fcall	_nrf24l01SPISend
  5877                           
  5878                           ;nrf24l01.c: 286: nrf24l01SPISend(txPacket->packetData.byte);
  5879  09AF  0020               	movlb	0	; select bank0
  5880  09B0  0828               	movf	nrf24l01SetTXBuffer@txPacket,w
  5881  09B1  0086               	movwf	6
  5882  09B2  3001               	movlw	1	; select bank2/3
  5883  09B3  0087               	movwf	7
  5884  09B4  0801               	movf	1,w
  5885  09B5  3195  250C  3189   	fcall	_nrf24l01SPISend
  5886                           
  5887                           ;nrf24l01.c: 289: for (i = 0; (i < strlen(txPacket->Message)) && (i < 32); i++) {
  5888  09B8  0020               	movlb	0	; select bank0
  5889  09B9  01A9               	clrf	nrf24l01SetTXBuffer@i
  5890  09BA  29CC               	goto	l3658
  5891  09BB                     l3654:	
  5892                           
  5893                           ;nrf24l01.c: 290: nrf24l01SPISend(txPacket->Message[i]);
  5894  09BB  0829               	movf	nrf24l01SetTXBuffer@i,w
  5895  09BC  3E01               	addlw	1
  5896  09BD  0728               	addwf	nrf24l01SetTXBuffer@txPacket,w
  5897  09BE  00A6               	movwf	??_nrf24l01SetTXBuffer
  5898  09BF  0826               	movf	??_nrf24l01SetTXBuffer,w
  5899  09C0  0086               	movwf	6
  5900  09C1  3001               	movlw	1	; select bank2/3
  5901  09C2  0087               	movwf	7
  5902  09C3  0801               	movf	1,w
  5903  09C4  3195  250C  3189   	fcall	_nrf24l01SPISend
  5904  09C7  3001               	movlw	1
  5905  09C8  0020               	movlb	0	; select bank0
  5906  09C9  00A6               	movwf	??_nrf24l01SetTXBuffer
  5907  09CA  0826               	movf	??_nrf24l01SetTXBuffer,w
  5908  09CB  07A9               	addwf	nrf24l01SetTXBuffer@i,f
  5909  09CC                     l3658:	
  5910  09CC  0828               	movf	nrf24l01SetTXBuffer@txPacket,w
  5911  09CD  3E01               	addlw	1
  5912  09CE  00A0               	movwf	strlen@s
  5913  09CF  3001               	movlw	1
  5914  09D0  00A1               	movwf	strlen@s+1
  5915  09D1  3196  262C  3189   	fcall	_strlen
  5916  09D4  0020               	movlb	0	; select bank0
  5917  09D5  0829               	movf	nrf24l01SetTXBuffer@i,w
  5918  09D6  00A6               	movwf	??_nrf24l01SetTXBuffer
  5919  09D7  01A7               	clrf	??_nrf24l01SetTXBuffer+1
  5920  09D8  0821               	movf	?_strlen+1,w
  5921  09D9  0227               	subwf	??_nrf24l01SetTXBuffer+1,w
  5922  09DA  1D03               	skipz
  5923  09DB  29DE               	goto	u3815
  5924  09DC  0820               	movf	?_strlen,w
  5925  09DD  0226               	subwf	??_nrf24l01SetTXBuffer,w
  5926  09DE                     u3815:	
  5927  09DE  1803               	skipnc
  5928  09DF  29E4               	goto	l3662
  5929  09E0  3020               	movlw	32
  5930  09E1  0229               	subwf	nrf24l01SetTXBuffer@i,w
  5931  09E2  1C03               	skipc
  5932  09E3  29BB               	goto	l3654
  5933  09E4                     l3662:	
  5934                           
  5935                           ;nrf24l01.c: 291: };nrf24l01.c: 294: nrf24l01SPIEnd();
  5936  09E4  3194  24EC         	fcall	_nrf24l01SPIEnd
  5937  09E6  0008               	return
  5938  09E7                     __end_of_nrf24l01SetTXBuffer:	
  5939                           
  5940                           	psect	text18
  5941  162C                     __ptext18:	
  5942 ;; *************** function _strlen *****************
  5943 ;; Defined at:
  5944 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  5945 ;; Parameters:    Size  Location     Type
  5946 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  5947 ;;		 -> RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), RXPacket(33), 
  5948 ;;		 -> romDataMap(28), 
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  5951 ;;		 -> RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), RXPacket(33), 
  5952 ;;		 -> romDataMap(28), 
  5953 ;; Return value:  Size  Location     Type
  5954 ;;                  2    0[BANK0 ] unsigned int 
  5955 ;; Registers used:
  5956 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5957 ;; Tracked objects:
  5958 ;;		On entry : 0/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5962 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5963 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5964 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5965 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5966 ;;Total ram usage:        6 bytes
  5967 ;; Hardware stack levels used:    1
  5968 ;; Hardware stack levels required when called:    8
  5969 ;; This function calls:
  5970 ;;		Nothing
  5971 ;; This function is called by:
  5972 ;;		_nrf24l01GetPipe
  5973 ;;		_nrf24l01SetTXBuffer
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           
  5978                           ;psect for function _strlen
  5979  162C                     _strlen:	
  5980                           
  5981                           ;incstack = 0
  5982                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5983  162C  0020               	movlb	0	; select bank0
  5984  162D  0821               	movf	strlen@s+1,w
  5985  162E  00A5               	movwf	strlen@cp+1
  5986  162F  0820               	movf	strlen@s,w
  5987  1630  00A4               	movwf	strlen@cp
  5988  1631                     l3638:	
  5989  1631  0824               	movf	strlen@cp,w
  5990  1632  0086               	movwf	6
  5991  1633  0825               	movf	strlen@cp+1,w
  5992  1634  0087               	movwf	7
  5993  1635  0801               	movf	1,w
  5994  1636  1903               	btfsc	3,2
  5995  1637  2E3D               	goto	l3640
  5996  1638  3001               	movlw	1
  5997  1639  07A4               	addwf	strlen@cp,f
  5998  163A  3000               	movlw	0
  5999  163B  3DA5               	addwfc	strlen@cp+1,f
  6000  163C  2E31               	goto	l3638
  6001  163D                     l3640:	
  6002  163D  0920               	comf	strlen@s,w
  6003  163E  00A2               	movwf	??_strlen
  6004  163F  0921               	comf	strlen@s+1,w
  6005  1640  00A3               	movwf	??_strlen+1
  6006  1641  0AA2               	incf	??_strlen,f
  6007  1642  1903               	skipnz
  6008  1643  0AA3               	incf	??_strlen+1,f
  6009  1644  0824               	movf	strlen@cp,w
  6010  1645  0722               	addwf	??_strlen,w
  6011  1646  00A0               	movwf	?_strlen
  6012  1647  0825               	movf	strlen@cp+1,w
  6013  1648  3D23               	addwfc	??_strlen+1,w
  6014  1649  00A1               	movwf	?_strlen+1
  6015  164A  0008               	return
  6016  164B                     __end_of_strlen:	
  6017                           
  6018                           	psect	text19
  6019  1777                     __ptext19:	
  6020 ;; *************** function _nrf24l01SetRXMode *****************
  6021 ;; Defined at:
  6022 ;;		line 91 in file "nrf24l01.c"
  6023 ;; Parameters:    Size  Location     Type
  6024 ;;  rxMode          1    wreg     unsigned char 
  6025 ;; Auto vars:     Size  Location     Type
  6026 ;;  rxMode          1    4[BANK0 ] unsigned char 
  6027 ;; Return value:  Size  Location     Type
  6028 ;;                  1    wreg      void 
  6029 ;; Registers used:
  6030 ;;		wreg, status,2, status,0, pclath, cstack
  6031 ;; Tracked objects:
  6032 ;;		On entry : 0/0
  6033 ;;		On exit  : 0/0
  6034 ;;		Unchanged: 0/0
  6035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6037 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6038 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6039 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6040 ;;Total ram usage:        2 bytes
  6041 ;; Hardware stack levels used:    1
  6042 ;; Hardware stack levels required when called:   11
  6043 ;; This function calls:
  6044 ;;		_nrf24l01CEHigh
  6045 ;;		_nrf24l01CELow
  6046 ;;		_nrf24l01Send
  6047 ;; This function is called by:
  6048 ;;		_sleepListren
  6049 ;;		_nrf24l01SetTXBuffer
  6050 ;;		_nrf24l01Service
  6051 ;; This function uses a non-reentrant model
  6052 ;;
  6053                           
  6054                           
  6055                           ;psect for function _nrf24l01SetRXMode
  6056  1777                     _nrf24l01SetRXMode:	
  6057                           
  6058                           ;incstack = 0
  6059                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  6060                           ;nrf24l01SetRXMode@rxMode stored from wreg
  6061  1777  0020               	movlb	0	; select bank0
  6062  1778  00A4               	movwf	nrf24l01SetRXMode@rxMode
  6063                           
  6064                           ;nrf24l01.c: 111: if (status.configRegister.PRIM_RX != rxMode){
  6065  1779  0021               	movlb	1	; select bank1
  6066  177A  0869               	movf	(_status^(0+128)+2),w	;volatile
  6067  177B  3901               	andlw	1
  6068  177C  0020               	movlb	0	; select bank0
  6069  177D  0624               	xorwf	nrf24l01SetRXMode@rxMode,w
  6070  177E  1903               	skipnz
  6071  177F  0008               	return
  6072                           
  6073                           ;nrf24l01.c: 114: nrf24l01CELow();
  6074  1780  3194  24DD  3197   	fcall	_nrf24l01CELow
  6075                           
  6076                           ;nrf24l01.c: 118: status.configRegister.PRIM_RX = rxMode;
  6077  1783  0020               	movlb	0	; select bank0
  6078  1784  0C24               	rrf	nrf24l01SetRXMode@rxMode,w
  6079  1785  0021               	movlb	1	; select bank1
  6080  1786  1C03               	skipc
  6081  1787  1069               	bcf	(_status^(0+128)+2),0	;volatile
  6082  1788  1803               	skipnc
  6083  1789  1469               	bsf	(_status^(0+128)+2),0	;volatile
  6084                           
  6085                           ;nrf24l01.c: 119: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  6086  178A  0869               	movf	(_status^(0+128)+2),w	;volatile
  6087  178B  0020               	movlb	0	; select bank0
  6088  178C  00A3               	movwf	??_nrf24l01SetRXMode
  6089  178D  0823               	movf	??_nrf24l01SetRXMode,w
  6090  178E  00A0               	movwf	nrf24l01Send@data
  6091  178F  3020               	movlw	32
  6092  1790  3196  264B  3197   	fcall	_nrf24l01Send
  6093                           
  6094                           ;nrf24l01.c: 122: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6095  1793  30C0               	movlw	192
  6096  1794                     u4497:	
  6097  1794  3200               	nop2
  6098  1795  0B89               	decfsz	9,f
  6099  1796  2F94               	goto	u4497
  6100                           
  6101                           ;nrf24l01.c: 125: if (rxMode){
  6102  1797  0020               	movlb	0	; select bank0
  6103  1798  0824               	movf	nrf24l01SetRXMode@rxMode,w
  6104  1799  1903               	btfsc	3,2
  6105  179A  0008               	return
  6106                           
  6107                           ;nrf24l01.c: 126: nrf24l01CEHigh();
  6108  179B  3194  24DA  3197   	fcall	_nrf24l01CEHigh
  6109                           
  6110                           ;nrf24l01.c: 127: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6111  179E  30C0               	movlw	192
  6112  179F                     u4507:	
  6113  179F  3200               	nop2
  6114  17A0  0B89               	decfsz	9,f
  6115  17A1  2F9F               	goto	u4507
  6116  17A2  0008               	return
  6117  17A3                     __end_of_nrf24l01SetRXMode:	
  6118                           
  6119                           	psect	text20
  6120  164B                     __ptext20:	
  6121 ;; *************** function _nrf24l01Send *****************
  6122 ;; Defined at:
  6123 ;;		line 46 in file "nrf24l01.c"
  6124 ;; Parameters:    Size  Location     Type
  6125 ;;  command         1    wreg     unsigned char 
  6126 ;;  data            1    0[BANK0 ] unsigned char 
  6127 ;; Auto vars:     Size  Location     Type
  6128 ;;  command         1    2[BANK0 ] unsigned char 
  6129 ;; Return value:  Size  Location     Type
  6130 ;;                  1    wreg      unsigned char 
  6131 ;; Registers used:
  6132 ;;		wreg, status,2, status,0, pclath, cstack
  6133 ;; Tracked objects:
  6134 ;;		On entry : 0/0
  6135 ;;		On exit  : 0/0
  6136 ;;		Unchanged: 0/0
  6137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6138 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6140 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6141 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6142 ;;Total ram usage:        3 bytes
  6143 ;; Hardware stack levels used:    1
  6144 ;; Hardware stack levels required when called:   10
  6145 ;; This function calls:
  6146 ;;		_enableInterrupts
  6147 ;;		_nrf24l01SPIEnd
  6148 ;;		_nrf24l01SPISend
  6149 ;;		_nrf24l01SPIStart
  6150 ;; This function is called by:
  6151 ;;		_loop
  6152 ;;		_nrf24l01SetRXMode
  6153 ;;		_nrf24l01SetRXPipe
  6154 ;;		_nrf24l01Service
  6155 ;;		_nrf24l01InitRegisters
  6156 ;;		_nrf24l01ChangeTXPower
  6157 ;; This function uses a non-reentrant model
  6158 ;;
  6159                           
  6160                           
  6161                           ;psect for function _nrf24l01Send
  6162  164B                     _nrf24l01Send:	
  6163                           
  6164                           ;incstack = 0
  6165                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  6166                           ;nrf24l01Send@command stored from wreg
  6167  164B  0020               	movlb	0	; select bank0
  6168  164C  00A2               	movwf	nrf24l01Send@command
  6169                           
  6170                           ;nrf24l01.c: 49: enableInterrupts(0);
  6171  164D  3000               	movlw	0
  6172  164E  3194  24F3  3196   	fcall	_enableInterrupts
  6173                           
  6174                           ;nrf24l01.c: 52: nrf24l01SPIStart();
  6175  1651  3194  24FB  3196   	fcall	_nrf24l01SPIStart
  6176                           
  6177                           ;nrf24l01.c: 55: nrf24l01SPISend(command);
  6178  1654  0020               	movlb	0	; select bank0
  6179  1655  0822               	movf	nrf24l01Send@command,w
  6180  1656  3195  250C  3196   	fcall	_nrf24l01SPISend
  6181                           
  6182                           ;nrf24l01.c: 58: data = nrf24l01SPISend(data);
  6183  1659  0020               	movlb	0	; select bank0
  6184  165A  0820               	movf	nrf24l01Send@data,w
  6185  165B  3195  250C  3196   	fcall	_nrf24l01SPISend
  6186  165E  0020               	movlb	0	; select bank0
  6187  165F  00A1               	movwf	??_nrf24l01Send
  6188  1660  0821               	movf	??_nrf24l01Send,w
  6189  1661  00A0               	movwf	nrf24l01Send@data
  6190                           
  6191                           ;nrf24l01.c: 61: nrf24l01SPIEnd();
  6192  1662  3194  24EC  3196   	fcall	_nrf24l01SPIEnd
  6193                           
  6194                           ;nrf24l01.c: 64: enableInterrupts(1);
  6195  1665  3001               	movlw	1
  6196  1666  3194  24F3         	fcall	_enableInterrupts
  6197                           
  6198                           ;nrf24l01.c: 66: return data;
  6199  1668  0020               	movlb	0	; select bank0
  6200  1669  0820               	movf	nrf24l01Send@data,w
  6201  166A  0008               	return
  6202  166B                     __end_of_nrf24l01Send:	
  6203                           
  6204                           	psect	text21
  6205  1567                     __ptext21:	
  6206 ;; *************** function _memset *****************
  6207 ;; Defined at:
  6208 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6209 ;; Parameters:    Size  Location     Type
  6210 ;;  p1              2    0[BANK0 ] PTR void 
  6211 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6212 ;;  c               2    2[BANK0 ] int 
  6213 ;;  n               2    4[BANK0 ] unsigned int 
  6214 ;; Auto vars:     Size  Location     Type
  6215 ;;  p               2    6[BANK0 ] PTR unsigned char 
  6216 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6217 ;; Return value:  Size  Location     Type
  6218 ;;                  2    0[BANK0 ] PTR void 
  6219 ;; Registers used:
  6220 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6221 ;; Tracked objects:
  6222 ;;		On entry : 0/0
  6223 ;;		On exit  : 0/0
  6224 ;;		Unchanged: 0/0
  6225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6226 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6227 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6229 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6230 ;;Total ram usage:        8 bytes
  6231 ;; Hardware stack levels used:    1
  6232 ;; Hardware stack levels required when called:    8
  6233 ;; This function calls:
  6234 ;;		Nothing
  6235 ;; This function is called by:
  6236 ;;		_sendMessage
  6237 ;;		_nrf24l01Service
  6238 ;; This function uses a non-reentrant model
  6239 ;;
  6240                           
  6241                           
  6242                           ;psect for function _memset
  6243  1567                     _memset:	
  6244                           
  6245                           ;incstack = 0
  6246                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6247  1567  0020               	movlb	0	; select bank0
  6248  1568  0821               	movf	memset@p1+1,w
  6249  1569  00A7               	movwf	memset@p+1
  6250  156A  0820               	movf	memset@p1,w
  6251  156B  00A6               	movwf	memset@p
  6252  156C                     l2378:	
  6253  156C  3001               	movlw	1
  6254  156D  02A4               	subwf	memset@n,f
  6255  156E  3000               	movlw	0
  6256  156F  3BA5               	subwfb	memset@n+1,f
  6257  1570  0A24               	incf	memset@n,w
  6258  1571  1903               	btfsc	3,2
  6259  1572  0A25               	incf	memset@n+1,w
  6260  1573  1903               	btfsc	3,2
  6261  1574  0008               	return
  6262  1575  0826               	movf	memset@p,w
  6263  1576  0086               	movwf	6
  6264  1577  0827               	movf	memset@p+1,w
  6265  1578  0087               	movwf	7
  6266  1579  0822               	movf	memset@c,w
  6267  157A  0081               	movwf	1
  6268  157B  3001               	movlw	1
  6269  157C  07A6               	addwf	memset@p,f
  6270  157D  3000               	movlw	0
  6271  157E  3DA7               	addwfc	memset@p+1,f
  6272  157F  2D6C               	goto	l2378
  6273  1580                     __end_of_memset:	
  6274                           ;	Return value of _memset is never used
  6275                           
  6276                           
  6277                           	psect	text22
  6278  0F0E                     __ptext22:	
  6279 ;; *************** function _ftoa *****************
  6280 ;; Defined at:
  6281 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6282 ;; Parameters:    Size  Location     Type
  6283 ;;  f               3    6[BANK1 ] float 
  6284 ;;  status          1    9[BANK1 ] PTR int 
  6285 ;;		 -> sendMessage@status(2), 
  6286 ;; Auto vars:     Size  Location     Type
  6287 ;;  l               4   14[BANK1 ] unsigned long 
  6288 ;;  rem             4   10[BANK1 ] unsigned long 
  6289 ;;  cp              1   18[BANK1 ] PTR unsigned char 
  6290 ;;		 -> ftoa@buf(17), 
  6291 ;; Return value:  Size  Location     Type
  6292 ;;                  1    wreg      PTR unsigned char 
  6293 ;; Registers used:
  6294 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6295 ;; Tracked objects:
  6296 ;;		On entry : 0/0
  6297 ;;		On exit  : 0/0
  6298 ;;		Unchanged: 0/0
  6299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6300 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6301 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6302 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6303 ;;      Totals:         0       1      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6304 ;;Total ram usage:       14 bytes
  6305 ;; Hardware stack levels used:    1
  6306 ;; Hardware stack levels required when called:   11
  6307 ;; This function calls:
  6308 ;;		___ftge
  6309 ;;		___ftmul
  6310 ;;		___ftneg
  6311 ;;		___ftsub
  6312 ;;		___fttol
  6313 ;;		___lltoft
  6314 ;;		_sprintf
  6315 ;; This function is called by:
  6316 ;;		_sendMessage
  6317 ;; This function uses a non-reentrant model
  6318 ;;
  6319                           
  6320                           
  6321                           ;psect for function _ftoa
  6322  0F0E                     _ftoa:	
  6323                           
  6324                           ;incstack = 0
  6325                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6326  0F0E  3055               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6327  0F0F  0020               	movlb	0	; select bank0
  6328  0F10  00EF               	movwf	??_ftoa
  6329  0F11  086F               	movf	??_ftoa,w
  6330  0F12  0021               	movlb	1	; select bank1
  6331  0F13  00B2               	movwf	ftoa@cp^(0+128)
  6332  0F14  0826               	movf	ftoa@f^(0+128),w
  6333  0F15  0020               	movlb	0	; select bank0
  6334  0F16  00A0               	movwf	___ftge@ff1
  6335  0F17  0021               	movlb	1	; select bank1
  6336  0F18  0827               	movf	(ftoa@f+1)^(0+128),w
  6337  0F19  0020               	movlb	0	; select bank0
  6338  0F1A  00A1               	movwf	___ftge@ff1+1
  6339  0F1B  0021               	movlb	1	; select bank1
  6340  0F1C  0828               	movf	(ftoa@f+2)^(0+128),w
  6341  0F1D  0020               	movlb	0	; select bank0
  6342  0F1E  00A2               	movwf	___ftge@ff1+2
  6343  0F1F  3000               	movlw	0
  6344  0F20  00A3               	movwf	___ftge@ff2
  6345  0F21  3000               	movlw	0
  6346  0F22  00A4               	movwf	___ftge@ff2+1
  6347  0F23  3000               	movlw	0
  6348  0F24  00A5               	movwf	___ftge@ff2+2
  6349  0F25  3188  205C  318F   	fcall	___ftge
  6350  0F28  1803               	btfsc	3,0
  6351  0F29  2F54               	goto	l3846
  6352  0F2A  302D               	movlw	45
  6353  0F2B  0020               	movlb	0	; select bank0
  6354  0F2C  00EF               	movwf	??_ftoa
  6355  0F2D  0021               	movlb	1	; select bank1
  6356  0F2E  0832               	movf	ftoa@cp^(0+128),w
  6357  0F2F  0086               	movwf	6
  6358  0F30  3001               	movlw	1	; select bank2/3
  6359  0F31  0087               	movwf	7
  6360  0F32  0020               	movlb	0	; select bank0
  6361  0F33  086F               	movf	??_ftoa,w
  6362  0F34  0081               	movwf	1
  6363  0F35  3001               	movlw	1
  6364  0F36  00EF               	movwf	??_ftoa
  6365  0F37  086F               	movf	??_ftoa,w
  6366  0F38  0021               	movlb	1	; select bank1
  6367  0F39  07B2               	addwf	ftoa@cp^(0+128),f
  6368  0F3A  0826               	movf	ftoa@f^(0+128),w
  6369  0F3B  0020               	movlb	0	; select bank0
  6370  0F3C  00D7               	movwf	___ftneg@f1
  6371  0F3D  0021               	movlb	1	; select bank1
  6372  0F3E  0827               	movf	(ftoa@f+1)^(0+128),w
  6373  0F3F  0020               	movlb	0	; select bank0
  6374  0F40  00D8               	movwf	___ftneg@f1+1
  6375  0F41  0021               	movlb	1	; select bank1
  6376  0F42  0828               	movf	(ftoa@f+2)^(0+128),w
  6377  0F43  0020               	movlb	0	; select bank0
  6378  0F44  00D9               	movwf	___ftneg@f1+2
  6379  0F45  3195  2503  318F   	fcall	___ftneg
  6380  0F48  0020               	movlb	0	; select bank0
  6381  0F49  0857               	movf	?___ftneg,w
  6382  0F4A  0021               	movlb	1	; select bank1
  6383  0F4B  00A6               	movwf	ftoa@f^(0+128)
  6384  0F4C  0020               	movlb	0	; select bank0
  6385  0F4D  0858               	movf	?___ftneg+1,w
  6386  0F4E  0021               	movlb	1	; select bank1
  6387  0F4F  00A7               	movwf	(ftoa@f+1)^(0+128)
  6388  0F50  0020               	movlb	0	; select bank0
  6389  0F51  0859               	movf	?___ftneg+2,w
  6390  0F52  0021               	movlb	1	; select bank1
  6391  0F53  00A8               	movwf	(ftoa@f+2)^(0+128)
  6392  0F54                     l3846:	
  6393  0F54  0021               	movlb	1	; select bank1
  6394  0F55  0826               	movf	ftoa@f^(0+128),w
  6395  0F56  0020               	movlb	0	; select bank0
  6396  0F57  00E7               	movwf	___fttol@f1
  6397  0F58  0021               	movlb	1	; select bank1
  6398  0F59  0827               	movf	(ftoa@f+1)^(0+128),w
  6399  0F5A  0020               	movlb	0	; select bank0
  6400  0F5B  00E8               	movwf	___fttol@f1+1
  6401  0F5C  0021               	movlb	1	; select bank1
  6402  0F5D  0828               	movf	(ftoa@f+2)^(0+128),w
  6403  0F5E  0020               	movlb	0	; select bank0
  6404  0F5F  00E9               	movwf	___fttol@f1+2
  6405  0F60  318C  2464  318F   	fcall	___fttol
  6406  0F63  0020               	movlb	0	; select bank0
  6407  0F64  086A               	movf	?___fttol+3,w
  6408  0F65  0021               	movlb	1	; select bank1
  6409  0F66  00B1               	movwf	(ftoa@l+3)^(0+128)
  6410  0F67  0020               	movlb	0	; select bank0
  6411  0F68  0869               	movf	?___fttol+2,w
  6412  0F69  0021               	movlb	1	; select bank1
  6413  0F6A  00B0               	movwf	(ftoa@l+2)^(0+128)
  6414  0F6B  0020               	movlb	0	; select bank0
  6415  0F6C  0868               	movf	?___fttol+1,w
  6416  0F6D  0021               	movlb	1	; select bank1
  6417  0F6E  00AF               	movwf	(ftoa@l+1)^(0+128)
  6418  0F6F  0020               	movlb	0	; select bank0
  6419  0F70  0867               	movf	?___fttol,w
  6420  0F71  0021               	movlb	1	; select bank1
  6421  0F72  00AE               	movwf	ftoa@l^(0+128)
  6422  0F73  0831               	movf	(ftoa@l+3)^(0+128),w
  6423  0F74  0020               	movlb	0	; select bank0
  6424  0F75  00AB               	movwf	___lltoft@c+3
  6425  0F76  0021               	movlb	1	; select bank1
  6426  0F77  0830               	movf	(ftoa@l+2)^(0+128),w
  6427  0F78  0020               	movlb	0	; select bank0
  6428  0F79  00AA               	movwf	___lltoft@c+2
  6429  0F7A  0021               	movlb	1	; select bank1
  6430  0F7B  082F               	movf	(ftoa@l+1)^(0+128),w
  6431  0F7C  0020               	movlb	0	; select bank0
  6432  0F7D  00A9               	movwf	___lltoft@c+1
  6433  0F7E  0021               	movlb	1	; select bank1
  6434  0F7F  082E               	movf	ftoa@l^(0+128),w
  6435  0F80  0020               	movlb	0	; select bank0
  6436  0F81  00A8               	movwf	___lltoft@c
  6437  0F82  3197  274D  318F   	fcall	___lltoft
  6438  0F85  0020               	movlb	0	; select bank0
  6439  0F86  0828               	movf	?___lltoft,w
  6440  0F87  00BB               	movwf	___ftsub@f2
  6441  0F88  0829               	movf	?___lltoft+1,w
  6442  0F89  00BC               	movwf	___ftsub@f2+1
  6443  0F8A  082A               	movf	?___lltoft+2,w
  6444  0F8B  00BD               	movwf	___ftsub@f2+2
  6445  0F8C  0021               	movlb	1	; select bank1
  6446  0F8D  0826               	movf	ftoa@f^(0+128),w
  6447  0F8E  0020               	movlb	0	; select bank0
  6448  0F8F  00BE               	movwf	___ftsub@f1
  6449  0F90  0021               	movlb	1	; select bank1
  6450  0F91  0827               	movf	(ftoa@f+1)^(0+128),w
  6451  0F92  0020               	movlb	0	; select bank0
  6452  0F93  00BF               	movwf	___ftsub@f1+1
  6453  0F94  0021               	movlb	1	; select bank1
  6454  0F95  0828               	movf	(ftoa@f+2)^(0+128),w
  6455  0F96  0020               	movlb	0	; select bank0
  6456  0F97  00C0               	movwf	___ftsub@f1+2
  6457  0F98  3195  25F0  318F   	fcall	___ftsub
  6458  0F9B  0020               	movlb	0	; select bank0
  6459  0F9C  083B               	movf	?___ftsub,w
  6460  0F9D  0021               	movlb	1	; select bank1
  6461  0F9E  00A6               	movwf	ftoa@f^(0+128)
  6462  0F9F  0020               	movlb	0	; select bank0
  6463  0FA0  083C               	movf	?___ftsub+1,w
  6464  0FA1  0021               	movlb	1	; select bank1
  6465  0FA2  00A7               	movwf	(ftoa@f+1)^(0+128)
  6466  0FA3  0020               	movlb	0	; select bank0
  6467  0FA4  083D               	movf	?___ftsub+2,w
  6468  0FA5  0021               	movlb	1	; select bank1
  6469  0FA6  00A8               	movwf	(ftoa@f+2)^(0+128)
  6470  0FA7  0826               	movf	ftoa@f^(0+128),w
  6471  0FA8  0020               	movlb	0	; select bank0
  6472  0FA9  00DA               	movwf	___ftmul@f2
  6473  0FAA  0021               	movlb	1	; select bank1
  6474  0FAB  0827               	movf	(ftoa@f+1)^(0+128),w
  6475  0FAC  0020               	movlb	0	; select bank0
  6476  0FAD  00DB               	movwf	___ftmul@f2+1
  6477  0FAE  0021               	movlb	1	; select bank1
  6478  0FAF  0828               	movf	(ftoa@f+2)^(0+128),w
  6479  0FB0  0020               	movlb	0	; select bank0
  6480  0FB1  00DC               	movwf	___ftmul@f2+2
  6481  0FB2  3024               	movlw	36
  6482  0FB3  00D7               	movwf	___ftmul@f1
  6483  0FB4  3074               	movlw	116
  6484  0FB5  00D8               	movwf	___ftmul@f1+1
  6485  0FB6  3049               	movlw	73
  6486  0FB7  00D9               	movwf	___ftmul@f1+2
  6487  0FB8  318E  265A  318F   	fcall	___ftmul
  6488  0FBB  0020               	movlb	0	; select bank0
  6489  0FBC  0857               	movf	?___ftmul,w
  6490  0FBD  00E7               	movwf	___fttol@f1
  6491  0FBE  0858               	movf	?___ftmul+1,w
  6492  0FBF  00E8               	movwf	___fttol@f1+1
  6493  0FC0  0859               	movf	?___ftmul+2,w
  6494  0FC1  00E9               	movwf	___fttol@f1+2
  6495  0FC2  318C  2464  318F   	fcall	___fttol
  6496  0FC5  0020               	movlb	0	; select bank0
  6497  0FC6  086A               	movf	?___fttol+3,w
  6498  0FC7  0021               	movlb	1	; select bank1
  6499  0FC8  00AD               	movwf	(ftoa@rem+3)^(0+128)
  6500  0FC9  0020               	movlb	0	; select bank0
  6501  0FCA  0869               	movf	?___fttol+2,w
  6502  0FCB  0021               	movlb	1	; select bank1
  6503  0FCC  00AC               	movwf	(ftoa@rem+2)^(0+128)
  6504  0FCD  0020               	movlb	0	; select bank0
  6505  0FCE  0868               	movf	?___fttol+1,w
  6506  0FCF  0021               	movlb	1	; select bank1
  6507  0FD0  00AB               	movwf	(ftoa@rem+1)^(0+128)
  6508  0FD1  0020               	movlb	0	; select bank0
  6509  0FD2  0867               	movf	?___fttol,w
  6510  0FD3  0021               	movlb	1	; select bank1
  6511  0FD4  00AA               	movwf	ftoa@rem^(0+128)
  6512  0FD5  3029               	movlw	low (STR_10| (0+32768))
  6513  0FD6  0020               	movlb	0	; select bank0
  6514  0FD7  00B8               	movwf	sprintf@f
  6515  0FD8  3098               	movlw	high (STR_10| (0+32768))
  6516  0FD9  00B9               	movwf	sprintf@f+1
  6517  0FDA  0021               	movlb	1	; select bank1
  6518  0FDB  0831               	movf	(ftoa@l+3)^(0+128),w
  6519  0FDC  0020               	movlb	0	; select bank0
  6520  0FDD  00BD               	movwf	?_sprintf+5
  6521  0FDE  0021               	movlb	1	; select bank1
  6522  0FDF  0830               	movf	(ftoa@l+2)^(0+128),w
  6523  0FE0  0020               	movlb	0	; select bank0
  6524  0FE1  00BC               	movwf	?_sprintf+4
  6525  0FE2  0021               	movlb	1	; select bank1
  6526  0FE3  082F               	movf	(ftoa@l+1)^(0+128),w
  6527  0FE4  0020               	movlb	0	; select bank0
  6528  0FE5  00BB               	movwf	?_sprintf+3
  6529  0FE6  0021               	movlb	1	; select bank1
  6530  0FE7  082E               	movf	ftoa@l^(0+128),w
  6531  0FE8  0020               	movlb	0	; select bank0
  6532  0FE9  00BA               	movwf	?_sprintf+2
  6533  0FEA  0021               	movlb	1	; select bank1
  6534  0FEB  082D               	movf	(ftoa@rem+3)^(0+128),w
  6535  0FEC  0020               	movlb	0	; select bank0
  6536  0FED  00C1               	movwf	?_sprintf+9
  6537  0FEE  0021               	movlb	1	; select bank1
  6538  0FEF  082C               	movf	(ftoa@rem+2)^(0+128),w
  6539  0FF0  0020               	movlb	0	; select bank0
  6540  0FF1  00C0               	movwf	?_sprintf+8
  6541  0FF2  0021               	movlb	1	; select bank1
  6542  0FF3  082B               	movf	(ftoa@rem+1)^(0+128),w
  6543  0FF4  0020               	movlb	0	; select bank0
  6544  0FF5  00BF               	movwf	?_sprintf+7
  6545  0FF6  0021               	movlb	1	; select bank1
  6546  0FF7  082A               	movf	ftoa@rem^(0+128),w
  6547  0FF8  0020               	movlb	0	; select bank0
  6548  0FF9  00BE               	movwf	?_sprintf+6
  6549  0FFA  0021               	movlb	1	; select bank1
  6550  0FFB  0832               	movf	ftoa@cp^(0+128),w
  6551  0FFC  3180  2035         	fcall	_sprintf
  6552  0FFE  3055               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6553  0FFF  0008               	return
  6554  1000                     __end_of_ftoa:	
  6555                           
  6556                           	psect	text23
  6557  0035                     __ptext23:	
  6558 ;; *************** function _sprintf *****************
  6559 ;; Defined at:
  6560 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  6561 ;; Parameters:    Size  Location     Type
  6562 ;;  sp              1    wreg     PTR unsigned char 
  6563 ;;		 -> ftoa@buf(17), 
  6564 ;;  f               2   24[BANK0 ] PTR const unsigned char 
  6565 ;;		 -> STR_10(11), 
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;  sp              1   46[BANK0 ] PTR unsigned char 
  6568 ;;		 -> ftoa@buf(17), 
  6569 ;;  val             4   42[BANK0 ] unsigned long 
  6570 ;;  tmpval          4    0        struct .
  6571 ;;  prec            2   49[BANK0 ] int 
  6572 ;;  width           2   47[BANK0 ] int 
  6573 ;;  cp              2    0        PTR const unsigned char 
  6574 ;;  len             2    0        unsigned int 
  6575 ;;  c               1   51[BANK0 ] unsigned char 
  6576 ;;  ap              1   41[BANK0 ] PTR void [1]
  6577 ;;		 -> ?_sprintf(2), 
  6578 ;;  flag            1   40[BANK0 ] unsigned char 
  6579 ;; Return value:  Size  Location     Type
  6580 ;;                  2   24[BANK0 ] int 
  6581 ;; Registers used:
  6582 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6583 ;; Tracked objects:
  6584 ;;		On entry : 0/0
  6585 ;;		On exit  : 0/0
  6586 ;;		Unchanged: 0/0
  6587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6588 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6589 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6590 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6591 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6592 ;;Total ram usage:       28 bytes
  6593 ;; Hardware stack levels used:    1
  6594 ;; Hardware stack levels required when called:    9
  6595 ;; This function calls:
  6596 ;;		___lldiv
  6597 ;;		___llmod
  6598 ;;		___wmul
  6599 ;;		_isdigit
  6600 ;; This function is called by:
  6601 ;;		_ftoa
  6602 ;; This function uses a non-reentrant model
  6603 ;;
  6604                           
  6605                           
  6606                           ;psect for function _sprintf
  6607  0035                     _sprintf:	
  6608                           
  6609                           ;incstack = 0
  6610                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6611                           ;sprintf@sp stored from wreg
  6612  0035  0020               	movlb	0	; select bank0
  6613  0036  00CE               	movwf	sprintf@sp
  6614                           
  6615                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  6616  0037  303A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  6617  0038  00C2               	movwf	??_sprintf
  6618  0039  0842               	movf	??_sprintf,w
  6619  003A  00C9               	movwf	sprintf@ap
  6620  003B                     l2768:	
  6621                           ;doprnt.c: 548: while((c = *f++)) {
  6622                           
  6623  003B  0839               	movf	sprintf@f+1,w
  6624  003C  00C3               	movwf	??_sprintf+1
  6625  003D  0838               	movf	sprintf@f,w
  6626  003E  00C2               	movwf	??_sprintf
  6627  003F  0AB8               	incf	sprintf@f,f
  6628  0040  1903               	skipnz
  6629  0041  0AB9               	incf	sprintf@f+1,f
  6630  0042  0842               	movf	??_sprintf,w
  6631  0043  0084               	movwf	4
  6632  0044  0843               	movf	??_sprintf+1,w
  6633  0045  0085               	movwf	5
  6634  0046  0800               	movf	0,w	;code access
  6635  0047  00C4               	movwf	??_sprintf+2
  6636  0048  0844               	movf	??_sprintf+2,w
  6637  0049  00D3               	movwf	sprintf@c
  6638  004A  0853               	movf	sprintf@c,w
  6639  004B  1903               	btfsc	3,2
  6640  004C  29FC               	goto	l2770
  6641                           
  6642                           ;doprnt.c: 550: if(c != '%')
  6643  004D  3025               	movlw	37
  6644  004E  0653               	xorwf	sprintf@c,w
  6645  004F  1903               	btfsc	3,2
  6646  0050  285E               	goto	l2680
  6647                           
  6648                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  6649  0051  0853               	movf	sprintf@c,w
  6650  0052  00C2               	movwf	??_sprintf
  6651  0053  084E               	movf	sprintf@sp,w
  6652  0054  0086               	movwf	6
  6653  0055  3001               	movlw	1	; select bank2/3
  6654  0056  0087               	movwf	7
  6655  0057  0842               	movf	??_sprintf,w
  6656  0058  0081               	movwf	1
  6657  0059  3001               	movlw	1
  6658  005A  00C2               	movwf	??_sprintf
  6659  005B  0842               	movf	??_sprintf,w
  6660  005C  07CE               	addwf	sprintf@sp,f
  6661                           
  6662                           ;doprnt.c: 554: continue;
  6663  005D  283B               	goto	l2768
  6664  005E                     l2680:	
  6665                           
  6666                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  6667  005E  01CF               	clrf	sprintf@width
  6668  005F  01D0               	clrf	sprintf@width+1
  6669                           
  6670                           ;doprnt.c: 560: flag = 0;
  6671  0060  01C8               	clrf	sprintf@flag
  6672                           
  6673                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  6674  0061  0838               	movf	sprintf@f,w
  6675  0062  0084               	movwf	4
  6676  0063  0839               	movf	sprintf@f+1,w
  6677  0064  0085               	movwf	5
  6678  0065  0800               	movf	0,w	;code access
  6679  0066  3195  2519  3180   	fcall	_isdigit
  6680  0069  1C03               	btfss	3,0
  6681  006A  289C               	goto	l2694
  6682                           
  6683                           ;doprnt.c: 610: width = 0;
  6684  006B  0020               	movlb	0	; select bank0
  6685  006C  01CF               	clrf	sprintf@width
  6686  006D  01D0               	clrf	sprintf@width+1
  6687  006E                     l2686:	
  6688                           ;doprnt.c: 611: do {
  6689                           
  6690                           
  6691                           ;doprnt.c: 612: width *= 10;
  6692  006E  300A               	movlw	10
  6693  006F  0020               	movlb	0	; select bank0
  6694  0070  00A0               	movwf	___wmul@multiplier
  6695  0071  3000               	movlw	0
  6696  0072  00A1               	movwf	___wmul@multiplier+1
  6697  0073  0850               	movf	sprintf@width+1,w
  6698  0074  00A3               	movwf	___wmul@multiplicand+1
  6699  0075  084F               	movf	sprintf@width,w
  6700  0076  00A2               	movwf	___wmul@multiplicand
  6701  0077  3195  25B6  3180   	fcall	___wmul
  6702  007A  0020               	movlb	0	; select bank0
  6703  007B  0821               	movf	?___wmul+1,w
  6704  007C  00D0               	movwf	sprintf@width+1
  6705  007D  0820               	movf	?___wmul,w
  6706  007E  00CF               	movwf	sprintf@width
  6707                           
  6708                           ;doprnt.c: 613: width += *f++ - '0';
  6709  007F  0838               	movf	sprintf@f,w
  6710  0080  0084               	movwf	4
  6711  0081  0839               	movf	sprintf@f+1,w
  6712  0082  0085               	movwf	5
  6713  0083  0800               	movf	0,w	;code access
  6714  0084  3ED0               	addlw	208
  6715  0085  00C2               	movwf	??_sprintf
  6716  0086  30FF               	movlw	255
  6717  0087  1803               	skipnc
  6718  0088  3000               	movlw	0
  6719  0089  00C3               	movwf	??_sprintf+1
  6720  008A  0842               	movf	??_sprintf,w
  6721  008B  07CF               	addwf	sprintf@width,f
  6722  008C  0843               	movf	??_sprintf+1,w
  6723  008D  3DD0               	addwfc	sprintf@width+1,f
  6724  008E  3001               	movlw	1
  6725  008F  07B8               	addwf	sprintf@f,f
  6726  0090  3000               	movlw	0
  6727  0091  3DB9               	addwfc	sprintf@f+1,f
  6728                           
  6729                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  6730  0092  0838               	movf	sprintf@f,w
  6731  0093  0084               	movwf	4
  6732  0094  0839               	movf	sprintf@f+1,w
  6733  0095  0085               	movwf	5
  6734  0096  0800               	movf	0,w	;code access
  6735  0097  3195  2519  3180   	fcall	_isdigit
  6736  009A  1803               	btfsc	3,0
  6737  009B  286E               	goto	l2686
  6738  009C                     l2694:	
  6739                           
  6740                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  6741  009C  0020               	movlb	0	; select bank0
  6742  009D  0838               	movf	sprintf@f,w
  6743  009E  0084               	movwf	4
  6744  009F  0839               	movf	sprintf@f+1,w
  6745  00A0  0085               	movwf	5
  6746  00A1  0012               	moviw fsr0++
  6747  00A2  3A2E               	xorlw	46
  6748  00A3  1D03               	btfss	3,2
  6749  00A4  28DA               	goto	l2706
  6750                           
  6751                           ;doprnt.c: 625: f++;
  6752  00A5  3001               	movlw	1
  6753  00A6  07B8               	addwf	sprintf@f,f
  6754  00A7  3000               	movlw	0
  6755  00A8  3DB9               	addwfc	sprintf@f+1,f
  6756                           
  6757                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  6758  00A9  01D1               	clrf	sprintf@prec
  6759  00AA  01D2               	clrf	sprintf@prec+1
  6760  00AB                     l2704:	
  6761                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  6762                           
  6763  00AB  0838               	movf	sprintf@f,w
  6764  00AC  0084               	movwf	4
  6765  00AD  0839               	movf	sprintf@f+1,w
  6766  00AE  0085               	movwf	5
  6767  00AF  0800               	movf	0,w	;code access
  6768  00B0  3195  2519  3180   	fcall	_isdigit
  6769  00B3  1C03               	btfss	3,0
  6770  00B4  28E5               	goto	l2712
  6771                           
  6772                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  6773  00B5  0020               	movlb	0	; select bank0
  6774  00B6  0838               	movf	sprintf@f,w
  6775  00B7  0084               	movwf	4
  6776  00B8  0839               	movf	sprintf@f+1,w
  6777  00B9  0085               	movwf	5
  6778  00BA  0800               	movf	0,w	;code access
  6779  00BB  00C2               	movwf	??_sprintf
  6780  00BC  01C3               	clrf	??_sprintf+1
  6781  00BD  0852               	movf	sprintf@prec+1,w
  6782  00BE  00A1               	movwf	___wmul@multiplier+1
  6783  00BF  0851               	movf	sprintf@prec,w
  6784  00C0  00A0               	movwf	___wmul@multiplier
  6785  00C1  300A               	movlw	10
  6786  00C2  00A2               	movwf	___wmul@multiplicand
  6787  00C3  3000               	movlw	0
  6788  00C4  00A3               	movwf	___wmul@multiplicand+1
  6789  00C5  3195  25B6  3180   	fcall	___wmul
  6790  00C8  0020               	movlb	0	; select bank0
  6791  00C9  0842               	movf	??_sprintf,w
  6792  00CA  0720               	addwf	?___wmul,w
  6793  00CB  00C4               	movwf	??_sprintf+2
  6794  00CC  0843               	movf	??_sprintf+1,w
  6795  00CD  3D21               	addwfc	?___wmul+1,w
  6796  00CE  00C5               	movwf	??_sprintf+3
  6797  00CF  0844               	movf	??_sprintf+2,w
  6798  00D0  3ED0               	addlw	208
  6799  00D1  00D1               	movwf	sprintf@prec
  6800  00D2  30FF               	movlw	255
  6801  00D3  3D45               	addwfc	??_sprintf+3,w
  6802  00D4  00D2               	movwf	sprintf@prec+1
  6803  00D5  3001               	movlw	1
  6804  00D6  07B8               	addwf	sprintf@f,f
  6805  00D7  3000               	movlw	0
  6806  00D8  3DB9               	addwfc	sprintf@f+1,f
  6807  00D9  28AB               	goto	l2704
  6808  00DA                     l2706:	
  6809                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  6810                           
  6811                           
  6812                           ;doprnt.c: 645: prec = 0;
  6813  00DA  0020               	movlb	0	; select bank0
  6814  00DB  01D1               	clrf	sprintf@prec
  6815  00DC  01D2               	clrf	sprintf@prec+1
  6816                           
  6817                           ;doprnt.c: 654: switch(c = *f++) {
  6818                           
  6819                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  6820  00DD  28E5               	goto	l2712
  6821  00DE                     l432:	
  6822                           ;doprnt.c: 660: case 'l':
  6823                           
  6824                           ;doprnt.c: 657: goto alldone;
  6825                           
  6826                           ;doprnt.c: 656: case 0:
  6827                           
  6828                           
  6829                           ;doprnt.c: 662: flag |= 0x10;
  6830  00DE  1648               	bsf	sprintf@flag,4
  6831                           
  6832                           ;doprnt.c: 663: goto loop;
  6833  00DF  28E5               	goto	l2712
  6834  00E0                     l2708:	
  6835                           ;doprnt.c: 836: case 'u':
  6836                           
  6837                           ;doprnt.c: 832: continue;
  6838                           
  6839                           ;doprnt.c: 821: default:
  6840                           
  6841                           
  6842                           ;doprnt.c: 837: flag |= 0xC0;
  6843  00E0  30C0               	movlw	192
  6844  00E1  00C2               	movwf	??_sprintf
  6845  00E2  0842               	movf	??_sprintf,w
  6846  00E3  04C8               	iorwf	sprintf@flag,f
  6847                           
  6848                           ;doprnt.c: 841: }
  6849                           
  6850                           ;doprnt.c: 838: break;
  6851  00E4  28FD               	goto	l435
  6852  00E5                     l2712:	
  6853  00E5  0020               	movlb	0	; select bank0
  6854  00E6  0839               	movf	sprintf@f+1,w
  6855  00E7  00C3               	movwf	??_sprintf+1
  6856  00E8  0838               	movf	sprintf@f,w
  6857  00E9  00C2               	movwf	??_sprintf
  6858  00EA  0AB8               	incf	sprintf@f,f
  6859  00EB  1903               	skipnz
  6860  00EC  0AB9               	incf	sprintf@f+1,f
  6861  00ED  0842               	movf	??_sprintf,w
  6862  00EE  0084               	movwf	4
  6863  00EF  0843               	movf	??_sprintf+1,w
  6864  00F0  0085               	movwf	5
  6865  00F1  0800               	movf	0,w	;code access
  6866  00F2  00D3               	movwf	sprintf@c
  6867                           
  6868                           ; Switch size 1, requested type "space"
  6869                           ; Number of cases is 3, Range of values is 0 to 117
  6870                           ; switch strategies available:
  6871                           ; Name         Instructions Cycles
  6872                           ; simple_byte           10     6 (average)
  6873                           ; direct_byte          242     6 (fixed)
  6874                           ; jumptable            260     6 (fixed)
  6875                           ;	Chosen strategy is simple_byte
  6876  00F3  3A00               	xorlw	0	; case 0
  6877  00F4  1903               	skipnz
  6878  00F5  29FC               	goto	l2770
  6879  00F6  3A6C               	xorlw	108	; case 108
  6880  00F7  1903               	skipnz
  6881  00F8  28DE               	goto	l432
  6882  00F9  3A19               	xorlw	25	; case 117
  6883  00FA  1903               	skipnz
  6884  00FB  28E0               	goto	l2708
  6885  00FC  283B               	goto	l2768
  6886  00FD                     l435:	
  6887                           
  6888                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  6889  00FD  1E48               	btfss	sprintf@flag,4
  6890  00FE  290C               	goto	l2718
  6891                           
  6892                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  6893  00FF  0849               	movf	sprintf@ap,w
  6894  0100  0086               	movwf	6
  6895  0101  0187               	clrf	7
  6896  0102  3F40               	moviw [0]fsr1
  6897  0103  00CA               	movwf	sprintf@val
  6898  0104  3F41               	moviw [1]fsr1
  6899  0105  00CB               	movwf	sprintf@val+1
  6900  0106  3F42               	moviw [2]fsr1
  6901  0107  00CC               	movwf	sprintf@val+2
  6902  0108  3F43               	moviw [3]fsr1
  6903  0109  00CD               	movwf	sprintf@val+3
  6904  010A  3004               	movlw	4
  6905  010B  291A               	goto	L1
  6906  010C                     l2718:	
  6907                           
  6908                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  6909  010C  0849               	movf	sprintf@ap,w
  6910  010D  0086               	movwf	6
  6911  010E  0187               	clrf	7
  6912  010F  3F40               	moviw [0]fsr1
  6913  0110  00C2               	movwf	??_sprintf
  6914  0111  3F41               	moviw [1]fsr1
  6915  0112  00C3               	movwf	??_sprintf+1
  6916  0113  0842               	movf	??_sprintf,w
  6917  0114  00CA               	movwf	sprintf@val
  6918  0115  0843               	movf	??_sprintf+1,w
  6919  0116  00CB               	movwf	sprintf@val+1
  6920  0117  01CC               	clrf	sprintf@val+2
  6921  0118  01CD               	clrf	sprintf@val+3
  6922  0119  3002               	movlw	2
  6923  011A                     L1:	
  6924  011A  00C2               	movwf	??_sprintf
  6925  011B  0842               	movf	??_sprintf,w
  6926  011C  07C9               	addwf	sprintf@ap,f
  6927                           
  6928                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  6929  011D  0851               	movf	sprintf@prec,w
  6930  011E  0452               	iorwf	sprintf@prec+1,w
  6931  011F  1D03               	btfss	3,2
  6932  0120  292B               	goto	l2728
  6933  0121  084D               	movf	sprintf@val+3,w
  6934  0122  044C               	iorwf	sprintf@val+2,w
  6935  0123  044B               	iorwf	sprintf@val+1,w
  6936  0124  044A               	iorwf	sprintf@val,w
  6937  0125  1D03               	skipz
  6938  0126  292B               	goto	l2728
  6939                           
  6940                           ;doprnt.c: 1310: prec++;
  6941  0127  3001               	movlw	1
  6942  0128  07D1               	addwf	sprintf@prec,f
  6943  0129  3000               	movlw	0
  6944  012A  3DD2               	addwfc	sprintf@prec+1,f
  6945  012B                     l2728:	
  6946                           
  6947                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6948  012B  01D3               	clrf	sprintf@c
  6949  012C  0AD3               	incf	sprintf@c,f
  6950  012D  300A               	movlw	10
  6951  012E  0653               	xorwf	sprintf@c,w
  6952  012F  1903               	btfsc	3,2
  6953  0130  295E               	goto	l2740
  6954  0131                     l2734:	
  6955                           
  6956                           ;doprnt.c: 1325: if(val < dpowers[c])
  6957  0131  0853               	movf	sprintf@c,w
  6958  0132  00C2               	movwf	??_sprintf
  6959  0133  01C3               	clrf	??_sprintf+1
  6960  0134  35C2               	lslf	??_sprintf,f
  6961  0135  0DC3               	rlf	??_sprintf+1,f
  6962  0136  35C2               	lslf	??_sprintf,f
  6963  0137  0DC3               	rlf	??_sprintf+1,f
  6964  0138  3000               	movlw	low (_dpowers| (0+32768))
  6965  0139  0742               	addwf	??_sprintf,w
  6966  013A  0084               	movwf	4
  6967  013B  3098               	movlw	high (_dpowers| (0+32768))
  6968  013C  3D43               	addwfc	??_sprintf+1,w
  6969  013D  0085               	movwf	5
  6970  013E  3F00               	moviw [0]fsr0
  6971  013F  00C4               	movwf	??_sprintf+2
  6972  0140  3F01               	moviw [1]fsr0
  6973  0141  00C5               	movwf	??_sprintf+3
  6974  0142  3F02               	moviw [2]fsr0
  6975  0143  00C6               	movwf	??_sprintf+4
  6976  0144  3F03               	moviw [3]fsr0
  6977  0145  00C7               	movwf	??_sprintf+5
  6978  0146  0847               	movf	??_sprintf+5,w
  6979  0147  024D               	subwf	sprintf@val+3,w
  6980  0148  1D03               	skipz
  6981  0149  2954               	goto	u2785
  6982  014A  0846               	movf	??_sprintf+4,w
  6983  014B  024C               	subwf	sprintf@val+2,w
  6984  014C  1D03               	skipz
  6985  014D  2954               	goto	u2785
  6986  014E  0845               	movf	??_sprintf+3,w
  6987  014F  024B               	subwf	sprintf@val+1,w
  6988  0150  1D03               	skipz
  6989  0151  2954               	goto	u2785
  6990  0152  0844               	movf	??_sprintf+2,w
  6991  0153  024A               	subwf	sprintf@val,w
  6992  0154                     u2785:	
  6993  0154  1C03               	btfss	3,0
  6994  0155  295E               	goto	l2740
  6995                           
  6996                           ;doprnt.c: 1326: break;
  6997  0156  3001               	movlw	1
  6998  0157  00C2               	movwf	??_sprintf
  6999  0158  0842               	movf	??_sprintf,w
  7000  0159  07D3               	addwf	sprintf@c,f
  7001  015A  300A               	movlw	10
  7002  015B  0653               	xorwf	sprintf@c,w
  7003  015C  1D03               	btfss	3,2
  7004  015D  2931               	goto	l2734
  7005  015E                     l2740:	
  7006                           
  7007                           ;doprnt.c: 1358: if(c < prec)
  7008  015E  0852               	movf	sprintf@prec+1,w
  7009  015F  3A80               	xorlw	128
  7010  0160  3C80               	sublw	128
  7011  0161  1D03               	skipz
  7012  0162  2965               	goto	u2805
  7013  0163  0851               	movf	sprintf@prec,w
  7014  0164  0253               	subwf	sprintf@c,w
  7015  0165                     u2805:	
  7016  0165  1803               	skipnc
  7017  0166  296D               	goto	l2744
  7018                           
  7019                           ;doprnt.c: 1359: c = prec;
  7020  0167  0020               	movlb	0	; select bank0
  7021  0168  0851               	movf	sprintf@prec,w
  7022  0169  00C2               	movwf	??_sprintf
  7023  016A  0842               	movf	??_sprintf,w
  7024  016B  00D3               	movwf	sprintf@c
  7025  016C  2981               	goto	l443
  7026  016D                     l2744:	
  7027                           
  7028                           ;doprnt.c: 1360: else if(prec < c)
  7029  016D  0020               	movlb	0	; select bank0
  7030  016E  0852               	movf	sprintf@prec+1,w
  7031  016F  3A80               	xorlw	128
  7032  0170  00C2               	movwf	??_sprintf
  7033  0171  3080               	movlw	128
  7034  0172  0242               	subwf	??_sprintf,w
  7035  0173  1D03               	skipz
  7036  0174  2977               	goto	u2815
  7037  0175  0853               	movf	sprintf@c,w
  7038  0176  0251               	subwf	sprintf@prec,w
  7039  0177                     u2815:	
  7040  0177  1803               	skipnc
  7041  0178  2981               	goto	l443
  7042                           
  7043                           ;doprnt.c: 1361: prec = c;
  7044  0179  0020               	movlb	0	; select bank0
  7045  017A  0853               	movf	sprintf@c,w
  7046  017B  00C2               	movwf	??_sprintf
  7047  017C  01C3               	clrf	??_sprintf+1
  7048  017D  0842               	movf	??_sprintf,w
  7049  017E  00D1               	movwf	sprintf@prec
  7050  017F  0843               	movf	??_sprintf+1,w
  7051  0180  00D2               	movwf	sprintf@prec+1
  7052  0181                     l443:	
  7053                           
  7054                           ;doprnt.c: 1400: if(width > c)
  7055  0181  0020               	movlb	0	; select bank0
  7056  0182  0850               	movf	sprintf@width+1,w
  7057  0183  3A80               	xorlw	128
  7058  0184  3C80               	sublw	128
  7059  0185  1D03               	skipz
  7060  0186  2989               	goto	u2825
  7061  0187  084F               	movf	sprintf@width,w
  7062  0188  0253               	subwf	sprintf@c,w
  7063  0189                     u2825:	
  7064  0189  1803               	skipnc
  7065  018A  2994               	goto	l2750
  7066                           
  7067                           ;doprnt.c: 1401: width -= c;
  7068  018B  0020               	movlb	0	; select bank0
  7069  018C  0853               	movf	sprintf@c,w
  7070  018D  00C2               	movwf	??_sprintf
  7071  018E  01C3               	clrf	??_sprintf+1
  7072  018F  0842               	movf	??_sprintf,w
  7073  0190  02CF               	subwf	sprintf@width,f
  7074  0191  0843               	movf	??_sprintf+1,w
  7075  0192  3BD0               	subwfb	sprintf@width+1,f
  7076  0193  2997               	goto	l2752
  7077  0194                     l2750:	
  7078                           
  7079                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  7080  0194  0020               	movlb	0	; select bank0
  7081  0195  01CF               	clrf	sprintf@width
  7082  0196  01D0               	clrf	sprintf@width+1
  7083  0197                     l2752:	
  7084                           
  7085                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  7086  0197  084F               	movf	sprintf@width,w
  7087  0198  0450               	iorwf	sprintf@width+1,w
  7088  0199  1903               	btfsc	3,2
  7089  019A  29F1               	goto	l2766
  7090                           
  7091                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  7092                           
  7093                           ;doprnt.c: 1448: do
  7094  019B  3020               	movlw	32
  7095  019C  00C2               	movwf	??_sprintf
  7096  019D  084E               	movf	sprintf@sp,w
  7097  019E  0086               	movwf	6
  7098  019F  3001               	movlw	1	; select bank2/3
  7099  01A0  0087               	movwf	7
  7100  01A1  0842               	movf	??_sprintf,w
  7101  01A2  0081               	movwf	1
  7102  01A3  3001               	movlw	1
  7103  01A4  00C2               	movwf	??_sprintf
  7104  01A5  0842               	movf	??_sprintf,w
  7105  01A6  07CE               	addwf	sprintf@sp,f
  7106                           
  7107                           ;doprnt.c: 1450: while(--width);
  7108  01A7  30FF               	movlw	255
  7109  01A8  07CF               	addwf	sprintf@width,f
  7110  01A9  30FF               	movlw	255
  7111  01AA  3DD0               	addwfc	sprintf@width+1,f
  7112  01AB  2997               	goto	l2752
  7113  01AC                     l2760:	
  7114                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  7115                           
  7116                           
  7117                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  7118  01AC  3000               	movlw	0
  7119  01AD  00B1               	movwf	___llmod@divisor+3
  7120  01AE  3000               	movlw	0
  7121  01AF  00B0               	movwf	___llmod@divisor+2
  7122  01B0  3000               	movlw	0
  7123  01B1  00AF               	movwf	___llmod@divisor+1
  7124  01B2  300A               	movlw	10
  7125  01B3  00AE               	movwf	___llmod@divisor
  7126  01B4  0852               	movf	sprintf@prec+1,w
  7127  01B5  0085               	movwf	5
  7128  01B6  0851               	movf	sprintf@prec,w
  7129  01B7  0084               	movwf	4
  7130  01B8  3584               	lslf	4,f
  7131  01B9  0D85               	rlf	5,f
  7132  01BA  3584               	lslf	4,f
  7133  01BB  0D85               	rlf	5,f
  7134  01BC  3000               	movlw	low (_dpowers| (0+32768))
  7135  01BD  0784               	addwf	4,f
  7136  01BE  3098               	movlw	high (_dpowers| (0+32768))
  7137  01BF  3D85               	addwfc	5,f
  7138  01C0  3F00               	moviw [0]fsr0
  7139  01C1  00A0               	movwf	___lldiv@divisor
  7140  01C2  3F01               	moviw [1]fsr0
  7141  01C3  00A1               	movwf	___lldiv@divisor+1
  7142  01C4  3F02               	moviw [2]fsr0
  7143  01C5  00A2               	movwf	___lldiv@divisor+2
  7144  01C6  3F03               	moviw [3]fsr0
  7145  01C7  00A3               	movwf	___lldiv@divisor+3
  7146  01C8  084D               	movf	sprintf@val+3,w
  7147  01C9  00A7               	movwf	___lldiv@dividend+3
  7148  01CA  084C               	movf	sprintf@val+2,w
  7149  01CB  00A6               	movwf	___lldiv@dividend+2
  7150  01CC  084B               	movf	sprintf@val+1,w
  7151  01CD  00A5               	movwf	___lldiv@dividend+1
  7152  01CE  084A               	movf	sprintf@val,w
  7153  01CF  00A4               	movwf	___lldiv@dividend
  7154  01D0  318A  222C  3180   	fcall	___lldiv
  7155  01D3  0020               	movlb	0	; select bank0
  7156  01D4  0823               	movf	?___lldiv+3,w
  7157  01D5  00B5               	movwf	___llmod@dividend+3
  7158  01D6  0822               	movf	?___lldiv+2,w
  7159  01D7  00B4               	movwf	___llmod@dividend+2
  7160  01D8  0821               	movf	?___lldiv+1,w
  7161  01D9  00B3               	movwf	___llmod@dividend+1
  7162  01DA  0820               	movf	?___lldiv,w
  7163  01DB  00B2               	movwf	___llmod@dividend
  7164  01DC  3188  20D8  3180   	fcall	___llmod
  7165  01DF  0020               	movlb	0	; select bank0
  7166  01E0  082E               	movf	?___llmod,w
  7167  01E1  3E30               	addlw	48
  7168  01E2  00C2               	movwf	??_sprintf
  7169  01E3  0842               	movf	??_sprintf,w
  7170  01E4  00D3               	movwf	sprintf@c
  7171                           
  7172                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7173  01E5  0853               	movf	sprintf@c,w
  7174  01E6  00C2               	movwf	??_sprintf
  7175  01E7  084E               	movf	sprintf@sp,w
  7176  01E8  0086               	movwf	6
  7177  01E9  3001               	movlw	1	; select bank2/3
  7178  01EA  0087               	movwf	7
  7179  01EB  0842               	movf	??_sprintf,w
  7180  01EC  0081               	movwf	1
  7181  01ED  3001               	movlw	1
  7182  01EE  00C2               	movwf	??_sprintf
  7183  01EF  0842               	movf	??_sprintf,w
  7184  01F0  07CE               	addwf	sprintf@sp,f
  7185  01F1                     l2766:	
  7186  01F1  30FF               	movlw	255
  7187  01F2  07D1               	addwf	sprintf@prec,f
  7188  01F3  30FF               	movlw	255
  7189  01F4  3DD2               	addwfc	sprintf@prec+1,f
  7190  01F5  0A51               	incf	sprintf@prec,w
  7191  01F6  1D03               	skipz
  7192  01F7  29AC               	goto	l2760
  7193  01F8  0A52               	incf	sprintf@prec+1,w
  7194  01F9  1903               	btfsc	3,2
  7195  01FA  283B               	goto	l2768
  7196  01FB  29AC               	goto	l2760
  7197  01FC                     l2770:	
  7198                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7199                           
  7200                           
  7201                           ;doprnt.c: 1557: *sp = 0;
  7202  01FC  084E               	movf	sprintf@sp,w
  7203  01FD  0086               	movwf	6
  7204  01FE  3001               	movlw	1	; select bank2/3
  7205  01FF  0087               	movwf	7
  7206  0200  0181               	clrf	1
  7207  0201  0008               	return
  7208  0202                     __end_of_sprintf:	
  7209                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7210                           
  7211                           
  7212                           	psect	text24
  7213  1519                     __ptext24:	
  7214 ;; *************** function _isdigit *****************
  7215 ;; Defined at:
  7216 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;  c               1    wreg     unsigned char 
  7219 ;; Auto vars:     Size  Location     Type
  7220 ;;  c               1    1[BANK0 ] unsigned char 
  7221 ;; Return value:  Size  Location     Type
  7222 ;;		None               void
  7223 ;; Registers used:
  7224 ;;		wreg, status,2, status,0
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7231 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7233 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7234 ;;Total ram usage:        2 bytes
  7235 ;; Hardware stack levels used:    1
  7236 ;; Hardware stack levels required when called:    8
  7237 ;; This function calls:
  7238 ;;		Nothing
  7239 ;; This function is called by:
  7240 ;;		_sprintf
  7241 ;; This function uses a non-reentrant model
  7242 ;;
  7243                           
  7244                           
  7245                           ;psect for function _isdigit
  7246  1519                     _isdigit:	
  7247                           
  7248                           ;incstack = 0
  7249                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7250                           ;isdigit@c stored from wreg
  7251  1519  0020               	movlb	0	; select bank0
  7252  151A  00A1               	movwf	isdigit@c
  7253  151B  01A0               	clrf	_isdigit$1728
  7254  151C  303A               	movlw	58
  7255  151D  0221               	subwf	isdigit@c,w
  7256  151E  1803               	skipnc
  7257  151F  2D26               	goto	l2418
  7258  1520  3030               	movlw	48
  7259  1521  0221               	subwf	isdigit@c,w
  7260  1522  1C03               	skipc
  7261  1523  2D26               	goto	l2418
  7262  1524  01A0               	clrf	_isdigit$1728
  7263  1525  0AA0               	incf	_isdigit$1728,f
  7264  1526                     l2418:	
  7265  1526  0C20               	rrf	_isdigit$1728,w
  7266  1527  0008               	return
  7267  1528                     __end_of_isdigit:	
  7268                           
  7269                           	psect	text25
  7270  15B6                     __ptext25:	
  7271 ;; *************** function ___wmul *****************
  7272 ;; Defined at:
  7273 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7274 ;; Parameters:    Size  Location     Type
  7275 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7276 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7277 ;; Auto vars:     Size  Location     Type
  7278 ;;  product         2    4[BANK0 ] unsigned int 
  7279 ;; Return value:  Size  Location     Type
  7280 ;;                  2    0[BANK0 ] unsigned int 
  7281 ;; Registers used:
  7282 ;;		wreg, status,2, status,0
  7283 ;; Tracked objects:
  7284 ;;		On entry : 0/0
  7285 ;;		On exit  : 0/0
  7286 ;;		Unchanged: 0/0
  7287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7288 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7289 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7291 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7292 ;;Total ram usage:        6 bytes
  7293 ;; Hardware stack levels used:    1
  7294 ;; Hardware stack levels required when called:    8
  7295 ;; This function calls:
  7296 ;;		Nothing
  7297 ;; This function is called by:
  7298 ;;		_sprintf
  7299 ;; This function uses a non-reentrant model
  7300 ;;
  7301                           
  7302                           
  7303                           ;psect for function ___wmul
  7304  15B6                     ___wmul:	
  7305                           
  7306                           ;incstack = 0
  7307                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7308  15B6  0020               	movlb	0	; select bank0
  7309  15B7  01A4               	clrf	___wmul@product
  7310  15B8  01A5               	clrf	___wmul@product+1
  7311  15B9                     l2424:	
  7312  15B9  1C20               	btfss	___wmul@multiplier,0
  7313  15BA  2DBF               	goto	l458
  7314  15BB  0822               	movf	___wmul@multiplicand,w
  7315  15BC  07A4               	addwf	___wmul@product,f
  7316  15BD  0823               	movf	___wmul@multiplicand+1,w
  7317  15BE  3DA5               	addwfc	___wmul@product+1,f
  7318  15BF                     l458:	
  7319  15BF  3001               	movlw	1
  7320  15C0                     u2135:	
  7321  15C0  35A2               	lslf	___wmul@multiplicand,f
  7322  15C1  0DA3               	rlf	___wmul@multiplicand+1,f
  7323  15C2  0B89               	decfsz	9,f
  7324  15C3  2DC0               	goto	u2135
  7325  15C4  3001               	movlw	1
  7326  15C5                     u2145:	
  7327  15C5  36A1               	lsrf	___wmul@multiplier+1,f
  7328  15C6  0CA0               	rrf	___wmul@multiplier,f
  7329  15C7  0B89               	decfsz	9,f
  7330  15C8  2DC5               	goto	u2145
  7331  15C9  0820               	movf	___wmul@multiplier,w
  7332  15CA  0421               	iorwf	___wmul@multiplier+1,w
  7333  15CB  1D03               	btfss	3,2
  7334  15CC  2DB9               	goto	l2424
  7335  15CD  0825               	movf	___wmul@product+1,w
  7336  15CE  00A1               	movwf	?___wmul+1
  7337  15CF  0824               	movf	___wmul@product,w
  7338  15D0  00A0               	movwf	?___wmul
  7339  15D1  0008               	return
  7340  15D2                     __end_of___wmul:	
  7341                           
  7342                           	psect	text26
  7343  08D8                     __ptext26:	
  7344 ;; *************** function ___llmod *****************
  7345 ;; Defined at:
  7346 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  7347 ;; Parameters:    Size  Location     Type
  7348 ;;  divisor         4   14[BANK0 ] unsigned long 
  7349 ;;  dividend        4   18[BANK0 ] unsigned long 
  7350 ;; Auto vars:     Size  Location     Type
  7351 ;;  counter         1   23[BANK0 ] unsigned char 
  7352 ;; Return value:  Size  Location     Type
  7353 ;;                  4   14[BANK0 ] unsigned long 
  7354 ;; Registers used:
  7355 ;;		wreg, status,2, status,0
  7356 ;; Tracked objects:
  7357 ;;		On entry : 0/0
  7358 ;;		On exit  : 0/0
  7359 ;;		Unchanged: 0/0
  7360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7361 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7362 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7363 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7364 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7365 ;;Total ram usage:       10 bytes
  7366 ;; Hardware stack levels used:    1
  7367 ;; Hardware stack levels required when called:    8
  7368 ;; This function calls:
  7369 ;;		Nothing
  7370 ;; This function is called by:
  7371 ;;		_sprintf
  7372 ;; This function uses a non-reentrant model
  7373 ;;
  7374                           
  7375                           
  7376                           ;psect for function ___llmod
  7377  08D8                     ___llmod:	
  7378                           
  7379                           ;incstack = 0
  7380                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  7381  08D8  0020               	movlb	0	; select bank0
  7382  08D9  0831               	movf	___llmod@divisor+3,w
  7383  08DA  0430               	iorwf	___llmod@divisor+2,w
  7384  08DB  042F               	iorwf	___llmod@divisor+1,w
  7385  08DC  042E               	iorwf	___llmod@divisor,w
  7386  08DD  1903               	skipnz
  7387  08DE  2912               	goto	l2546
  7388  08DF  01B7               	clrf	___llmod@counter
  7389  08E0  0AB7               	incf	___llmod@counter,f
  7390  08E1                     l2536:	
  7391  08E1  1BB1               	btfsc	___llmod@divisor+3,7
  7392  08E2  28EF               	goto	l2538
  7393  08E3  3001               	movlw	1
  7394  08E4                     u2475:	
  7395  08E4  35AE               	lslf	___llmod@divisor,f
  7396  08E5  0DAF               	rlf	___llmod@divisor+1,f
  7397  08E6  0DB0               	rlf	___llmod@divisor+2,f
  7398  08E7  0DB1               	rlf	___llmod@divisor+3,f
  7399  08E8  0B89               	decfsz	9,f
  7400  08E9  28E4               	goto	u2475
  7401  08EA  3001               	movlw	1
  7402  08EB  00B6               	movwf	??___llmod
  7403  08EC  0836               	movf	??___llmod,w
  7404  08ED  07B7               	addwf	___llmod@counter,f
  7405  08EE  28E1               	goto	l2536
  7406  08EF                     l2538:	
  7407  08EF  0831               	movf	___llmod@divisor+3,w
  7408  08F0  0235               	subwf	___llmod@dividend+3,w
  7409  08F1  1D03               	skipz
  7410  08F2  28FD               	goto	u2495
  7411  08F3  0830               	movf	___llmod@divisor+2,w
  7412  08F4  0234               	subwf	___llmod@dividend+2,w
  7413  08F5  1D03               	skipz
  7414  08F6  28FD               	goto	u2495
  7415  08F7  082F               	movf	___llmod@divisor+1,w
  7416  08F8  0233               	subwf	___llmod@dividend+1,w
  7417  08F9  1D03               	skipz
  7418  08FA  28FD               	goto	u2495
  7419  08FB  082E               	movf	___llmod@divisor,w
  7420  08FC  0232               	subwf	___llmod@dividend,w
  7421  08FD                     u2495:	
  7422  08FD  1C03               	skipc
  7423  08FE  2907               	goto	l2542
  7424  08FF  082E               	movf	___llmod@divisor,w
  7425  0900  02B2               	subwf	___llmod@dividend,f
  7426  0901  082F               	movf	___llmod@divisor+1,w
  7427  0902  3BB3               	subwfb	___llmod@dividend+1,f
  7428  0903  0830               	movf	___llmod@divisor+2,w
  7429  0904  3BB4               	subwfb	___llmod@dividend+2,f
  7430  0905  0831               	movf	___llmod@divisor+3,w
  7431  0906  3BB5               	subwfb	___llmod@dividend+3,f
  7432  0907                     l2542:	
  7433  0907  3001               	movlw	1
  7434  0908                     u2505:	
  7435  0908  36B1               	lsrf	___llmod@divisor+3,f
  7436  0909  0CB0               	rrf	___llmod@divisor+2,f
  7437  090A  0CAF               	rrf	___llmod@divisor+1,f
  7438  090B  0CAE               	rrf	___llmod@divisor,f
  7439  090C  0B89               	decfsz	9,f
  7440  090D  2908               	goto	u2505
  7441  090E  3001               	movlw	1
  7442  090F  02B7               	subwf	___llmod@counter,f
  7443  0910  1D03               	btfss	3,2
  7444  0911  28EF               	goto	l2538
  7445  0912                     l2546:	
  7446  0912  0835               	movf	___llmod@dividend+3,w
  7447  0913  00B1               	movwf	?___llmod+3
  7448  0914  0834               	movf	___llmod@dividend+2,w
  7449  0915  00B0               	movwf	?___llmod+2
  7450  0916  0833               	movf	___llmod@dividend+1,w
  7451  0917  00AF               	movwf	?___llmod+1
  7452  0918  0832               	movf	___llmod@dividend,w
  7453  0919  00AE               	movwf	?___llmod
  7454  091A  0008               	return
  7455  091B                     __end_of___llmod:	
  7456                           
  7457                           	psect	text27
  7458  0A2C                     __ptext27:	
  7459 ;; *************** function ___lldiv *****************
  7460 ;; Defined at:
  7461 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  7462 ;; Parameters:    Size  Location     Type
  7463 ;;  divisor         4    0[BANK0 ] unsigned long 
  7464 ;;  dividend        4    4[BANK0 ] unsigned long 
  7465 ;; Auto vars:     Size  Location     Type
  7466 ;;  quotient        4    9[BANK0 ] unsigned long 
  7467 ;;  counter         1   13[BANK0 ] unsigned char 
  7468 ;; Return value:  Size  Location     Type
  7469 ;;                  4    0[BANK0 ] unsigned long 
  7470 ;; Registers used:
  7471 ;;		wreg, status,2, status,0
  7472 ;; Tracked objects:
  7473 ;;		On entry : 0/0
  7474 ;;		On exit  : 0/0
  7475 ;;		Unchanged: 0/0
  7476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7477 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7478 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7479 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7480 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7481 ;;Total ram usage:       14 bytes
  7482 ;; Hardware stack levels used:    1
  7483 ;; Hardware stack levels required when called:    8
  7484 ;; This function calls:
  7485 ;;		Nothing
  7486 ;; This function is called by:
  7487 ;;		_sprintf
  7488 ;; This function uses a non-reentrant model
  7489 ;;
  7490                           
  7491                           
  7492                           ;psect for function ___lldiv
  7493  0A2C                     ___lldiv:	
  7494                           
  7495                           ;incstack = 0
  7496                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7497  0A2C  3000               	movlw	0
  7498  0A2D  0020               	movlb	0	; select bank0
  7499  0A2E  00AC               	movwf	___lldiv@quotient+3
  7500  0A2F  3000               	movlw	0
  7501  0A30  00AB               	movwf	___lldiv@quotient+2
  7502  0A31  3000               	movlw	0
  7503  0A32  00AA               	movwf	___lldiv@quotient+1
  7504  0A33  3000               	movlw	0
  7505  0A34  00A9               	movwf	___lldiv@quotient
  7506  0A35  0823               	movf	___lldiv@divisor+3,w
  7507  0A36  0422               	iorwf	___lldiv@divisor+2,w
  7508  0A37  0421               	iorwf	___lldiv@divisor+1,w
  7509  0A38  0420               	iorwf	___lldiv@divisor,w
  7510  0A39  1903               	skipnz
  7511  0A3A  2A76               	goto	l2456
  7512  0A3B  01AD               	clrf	___lldiv@counter
  7513  0A3C  0AAD               	incf	___lldiv@counter,f
  7514  0A3D                     l2442:	
  7515  0A3D  1BA3               	btfsc	___lldiv@divisor+3,7
  7516  0A3E  2A4B               	goto	l2444
  7517  0A3F  3001               	movlw	1
  7518  0A40                     u2175:	
  7519  0A40  35A0               	lslf	___lldiv@divisor,f
  7520  0A41  0DA1               	rlf	___lldiv@divisor+1,f
  7521  0A42  0DA2               	rlf	___lldiv@divisor+2,f
  7522  0A43  0DA3               	rlf	___lldiv@divisor+3,f
  7523  0A44  0B89               	decfsz	9,f
  7524  0A45  2A40               	goto	u2175
  7525  0A46  3001               	movlw	1
  7526  0A47  00A8               	movwf	??___lldiv
  7527  0A48  0828               	movf	??___lldiv,w
  7528  0A49  07AD               	addwf	___lldiv@counter,f
  7529  0A4A  2A3D               	goto	l2442
  7530  0A4B                     l2444:	
  7531  0A4B  3001               	movlw	1
  7532  0A4C                     u2195:	
  7533  0A4C  35A9               	lslf	___lldiv@quotient,f
  7534  0A4D  0DAA               	rlf	___lldiv@quotient+1,f
  7535  0A4E  0DAB               	rlf	___lldiv@quotient+2,f
  7536  0A4F  0DAC               	rlf	___lldiv@quotient+3,f
  7537  0A50  0B89               	decfsz	9,f
  7538  0A51  2A4C               	goto	u2195
  7539  0A52  0823               	movf	___lldiv@divisor+3,w
  7540  0A53  0227               	subwf	___lldiv@dividend+3,w
  7541  0A54  1D03               	skipz
  7542  0A55  2A60               	goto	u2205
  7543  0A56  0822               	movf	___lldiv@divisor+2,w
  7544  0A57  0226               	subwf	___lldiv@dividend+2,w
  7545  0A58  1D03               	skipz
  7546  0A59  2A60               	goto	u2205
  7547  0A5A  0821               	movf	___lldiv@divisor+1,w
  7548  0A5B  0225               	subwf	___lldiv@dividend+1,w
  7549  0A5C  1D03               	skipz
  7550  0A5D  2A60               	goto	u2205
  7551  0A5E  0820               	movf	___lldiv@divisor,w
  7552  0A5F  0224               	subwf	___lldiv@dividend,w
  7553  0A60                     u2205:	
  7554  0A60  1C03               	skipc
  7555  0A61  2A6B               	goto	l2452
  7556  0A62  0820               	movf	___lldiv@divisor,w
  7557  0A63  02A4               	subwf	___lldiv@dividend,f
  7558  0A64  0821               	movf	___lldiv@divisor+1,w
  7559  0A65  3BA5               	subwfb	___lldiv@dividend+1,f
  7560  0A66  0822               	movf	___lldiv@divisor+2,w
  7561  0A67  3BA6               	subwfb	___lldiv@dividend+2,f
  7562  0A68  0823               	movf	___lldiv@divisor+3,w
  7563  0A69  3BA7               	subwfb	___lldiv@dividend+3,f
  7564  0A6A  1429               	bsf	___lldiv@quotient,0
  7565  0A6B                     l2452:	
  7566  0A6B  3001               	movlw	1
  7567  0A6C                     u2215:	
  7568  0A6C  36A3               	lsrf	___lldiv@divisor+3,f
  7569  0A6D  0CA2               	rrf	___lldiv@divisor+2,f
  7570  0A6E  0CA1               	rrf	___lldiv@divisor+1,f
  7571  0A6F  0CA0               	rrf	___lldiv@divisor,f
  7572  0A70  0B89               	decfsz	9,f
  7573  0A71  2A6C               	goto	u2215
  7574  0A72  3001               	movlw	1
  7575  0A73  02AD               	subwf	___lldiv@counter,f
  7576  0A74  1D03               	btfss	3,2
  7577  0A75  2A4B               	goto	l2444
  7578  0A76                     l2456:	
  7579  0A76  082C               	movf	___lldiv@quotient+3,w
  7580  0A77  00A3               	movwf	?___lldiv+3
  7581  0A78  082B               	movf	___lldiv@quotient+2,w
  7582  0A79  00A2               	movwf	?___lldiv+2
  7583  0A7A  082A               	movf	___lldiv@quotient+1,w
  7584  0A7B  00A1               	movwf	?___lldiv+1
  7585  0A7C  0829               	movf	___lldiv@quotient,w
  7586  0A7D  00A0               	movwf	?___lldiv
  7587  0A7E  0008               	return
  7588  0A7F                     __end_of___lldiv:	
  7589                           
  7590                           	psect	text28
  7591  174D                     __ptext28:	
  7592 ;; *************** function ___lltoft *****************
  7593 ;; Defined at:
  7594 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  7595 ;; Parameters:    Size  Location     Type
  7596 ;;  c               4    8[BANK0 ] unsigned long 
  7597 ;; Auto vars:     Size  Location     Type
  7598 ;;  exp             1   13[BANK0 ] unsigned char 
  7599 ;; Return value:  Size  Location     Type
  7600 ;;                  3    8[BANK0 ] float 
  7601 ;; Registers used:
  7602 ;;		wreg, status,2, status,0, pclath, cstack
  7603 ;; Tracked objects:
  7604 ;;		On entry : 0/0
  7605 ;;		On exit  : 0/0
  7606 ;;		Unchanged: 0/0
  7607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7608 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7609 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7610 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7611 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7612 ;;Total ram usage:        6 bytes
  7613 ;; Hardware stack levels used:    1
  7614 ;; Hardware stack levels required when called:    9
  7615 ;; This function calls:
  7616 ;;		___ftpack
  7617 ;; This function is called by:
  7618 ;;		_loop
  7619 ;;		_ftoa
  7620 ;; This function uses a non-reentrant model
  7621 ;;
  7622                           
  7623                           
  7624                           ;psect for function ___lltoft
  7625  174D                     ___lltoft:	
  7626                           
  7627                           ;incstack = 0
  7628                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  7629  174D  308E               	movlw	142
  7630  174E  0020               	movlb	0	; select bank0
  7631  174F  00AC               	movwf	??___lltoft
  7632  1750  082C               	movf	??___lltoft,w
  7633  1751  00AD               	movwf	___lltoft@exp
  7634  1752                     l2920:	
  7635  1752  30FF               	movlw	255
  7636  1753  052B               	andwf	___lltoft@c+3,w
  7637  1754  1903               	btfsc	3,2
  7638  1755  2F62               	goto	l2922
  7639  1756  3001               	movlw	1
  7640  1757                     u3165:	
  7641  1757  36AB               	lsrf	___lltoft@c+3,f
  7642  1758  0CAA               	rrf	___lltoft@c+2,f
  7643  1759  0CA9               	rrf	___lltoft@c+1,f
  7644  175A  0CA8               	rrf	___lltoft@c,f
  7645  175B  0B89               	decfsz	9,f
  7646  175C  2F57               	goto	u3165
  7647  175D  3001               	movlw	1
  7648  175E  00AC               	movwf	??___lltoft
  7649  175F  082C               	movf	??___lltoft,w
  7650  1760  07AD               	addwf	___lltoft@exp,f
  7651  1761  2F52               	goto	l2920
  7652  1762                     l2922:	
  7653  1762  0828               	movf	___lltoft@c,w
  7654  1763  00A0               	movwf	___ftpack@arg
  7655  1764  0829               	movf	___lltoft@c+1,w
  7656  1765  00A1               	movwf	___ftpack@arg+1
  7657  1766  082A               	movf	___lltoft@c+2,w
  7658  1767  00A2               	movwf	___ftpack@arg+2
  7659  1768  082D               	movf	___lltoft@exp,w
  7660  1769  00AC               	movwf	??___lltoft
  7661  176A  082C               	movf	??___lltoft,w
  7662  176B  00A3               	movwf	___ftpack@exp
  7663  176C  01A4               	clrf	___ftpack@sign
  7664  176D  318A  22E2         	fcall	___ftpack
  7665  176F  0020               	movlb	0	; select bank0
  7666  1770  0820               	movf	?___ftpack,w
  7667  1771  00A8               	movwf	?___lltoft
  7668  1772  0821               	movf	?___ftpack+1,w
  7669  1773  00A9               	movwf	?___lltoft+1
  7670  1774  0822               	movf	?___ftpack+2,w
  7671  1775  00AA               	movwf	?___lltoft+2
  7672  1776  0008               	return
  7673  1777                     __end_of___lltoft:	
  7674                           
  7675                           	psect	text29
  7676  0C64                     __ptext29:	
  7677 ;; *************** function ___fttol *****************
  7678 ;; Defined at:
  7679 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  7680 ;; Parameters:    Size  Location     Type
  7681 ;;  f1              3   71[BANK0 ] float 
  7682 ;; Auto vars:     Size  Location     Type
  7683 ;;  lval            4    1[BANK1 ] unsigned long 
  7684 ;;  exp1            1    5[BANK1 ] unsigned char 
  7685 ;;  sign1           1    0[BANK1 ] unsigned char 
  7686 ;; Return value:  Size  Location     Type
  7687 ;;                  4   71[BANK0 ] long 
  7688 ;; Registers used:
  7689 ;;		wreg, status,2, status,0
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/0
  7692 ;;		On exit  : 0/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7695 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7696 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7697 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7698 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7699 ;;Total ram usage:       14 bytes
  7700 ;; Hardware stack levels used:    1
  7701 ;; Hardware stack levels required when called:    8
  7702 ;; This function calls:
  7703 ;;		Nothing
  7704 ;; This function is called by:
  7705 ;;		_ftoa
  7706 ;; This function uses a non-reentrant model
  7707 ;;
  7708                           
  7709                           
  7710                           ;psect for function ___fttol
  7711  0C64                     ___fttol:	
  7712                           
  7713                           ;incstack = 0
  7714                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7715  0C64  0020               	movlb	0	; select bank0
  7716  0C65  0867               	movf	___fttol@f1,w
  7717  0C66  00EB               	movwf	??___fttol
  7718  0C67  0868               	movf	___fttol@f1+1,w
  7719  0C68  00EC               	movwf	??___fttol+1
  7720  0C69  0869               	movf	___fttol@f1+2,w
  7721  0C6A  00ED               	movwf	??___fttol+2
  7722  0C6B  1003               	clrc
  7723  0C6C  0D6C               	rlf	??___fttol+1,w
  7724  0C6D  0D6D               	rlf	??___fttol+2,w
  7725  0C6E  00EE               	movwf	??___fttol+3
  7726  0C6F  086E               	movf	??___fttol+3,w
  7727  0C70  0021               	movlb	1	; select bank1
  7728  0C71  00A5               	movwf	___fttol@exp1^(0+128)
  7729  0C72  0825               	movf	___fttol@exp1^(0+128),w
  7730  0C73  1D03               	btfss	3,2
  7731  0C74  2C7F               	goto	l3768
  7732  0C75  3000               	movlw	0
  7733  0C76  0020               	movlb	0	; select bank0
  7734  0C77  00EA               	movwf	?___fttol+3
  7735  0C78  3000               	movlw	0
  7736  0C79  00E9               	movwf	?___fttol+2
  7737  0C7A  3000               	movlw	0
  7738  0C7B  00E8               	movwf	?___fttol+1
  7739  0C7C  3000               	movlw	0
  7740  0C7D  00E7               	movwf	?___fttol
  7741  0C7E  0008               	return
  7742  0C7F                     l3768:	
  7743  0C7F  0020               	movlb	0	; select bank0
  7744  0C80  0867               	movf	___fttol@f1,w
  7745  0C81  00EB               	movwf	??___fttol
  7746  0C82  0868               	movf	___fttol@f1+1,w
  7747  0C83  00EC               	movwf	??___fttol+1
  7748  0C84  0869               	movf	___fttol@f1+2,w
  7749  0C85  00ED               	movwf	??___fttol+2
  7750  0C86  3017               	movlw	23
  7751  0C87                     u3965:	
  7752  0C87  36ED               	lsrf	??___fttol+2,f
  7753  0C88  0CEC               	rrf	??___fttol+1,f
  7754  0C89  0CEB               	rrf	??___fttol,f
  7755  0C8A  0B89               	decfsz	9,f
  7756  0C8B  2C87               	goto	u3965
  7757  0C8C  086B               	movf	??___fttol,w
  7758  0C8D  00EE               	movwf	??___fttol+3
  7759  0C8E  086E               	movf	??___fttol+3,w
  7760  0C8F  0021               	movlb	1	; select bank1
  7761  0C90  00A0               	movwf	___fttol@sign1^(0+128)
  7762  0C91  0020               	movlb	0	; select bank0
  7763  0C92  17E8               	bsf	___fttol@f1+1,7
  7764  0C93  30FF               	movlw	255
  7765  0C94  05E7               	andwf	___fttol@f1,f
  7766  0C95  30FF               	movlw	255
  7767  0C96  05E8               	andwf	___fttol@f1+1,f
  7768  0C97  3000               	movlw	0
  7769  0C98  05E9               	andwf	___fttol@f1+2,f
  7770  0C99  0867               	movf	___fttol@f1,w
  7771  0C9A  0021               	movlb	1	; select bank1
  7772  0C9B  00A1               	movwf	___fttol@lval^(0+128)
  7773  0C9C  0020               	movlb	0	; select bank0
  7774  0C9D  0868               	movf	___fttol@f1+1,w
  7775  0C9E  0021               	movlb	1	; select bank1
  7776  0C9F  00A2               	movwf	(___fttol@lval^(0+128)+1)
  7777  0CA0  0020               	movlb	0	; select bank0
  7778  0CA1  0869               	movf	___fttol@f1+2,w
  7779  0CA2  0021               	movlb	1	; select bank1
  7780  0CA3  00A3               	movwf	(___fttol@lval^(0+128)+2)
  7781  0CA4  01A4               	clrf	(___fttol@lval^(0+128)+3)
  7782  0CA5  308E               	movlw	142
  7783  0CA6  02A5               	subwf	___fttol@exp1^(0+128),f
  7784  0CA7  1FA5               	btfss	___fttol@exp1^(0+128),7
  7785  0CA8  2CC9               	goto	l3788
  7786  0CA9  0825               	movf	___fttol@exp1^(0+128),w
  7787  0CAA  3A80               	xorlw	128
  7788  0CAB  3E8F               	addlw	143
  7789  0CAC  1803               	skipnc
  7790  0CAD  2CB8               	goto	l3786
  7791  0CAE  3000               	movlw	0
  7792  0CAF  0020               	movlb	0	; select bank0
  7793  0CB0  00EA               	movwf	?___fttol+3
  7794  0CB1  3000               	movlw	0
  7795  0CB2  00E9               	movwf	?___fttol+2
  7796  0CB3  3000               	movlw	0
  7797  0CB4  00E8               	movwf	?___fttol+1
  7798  0CB5  3000               	movlw	0
  7799  0CB6  00E7               	movwf	?___fttol
  7800  0CB7  0008               	return
  7801  0CB8                     l3786:	
  7802  0CB8  3001               	movlw	1
  7803  0CB9                     u3995:	
  7804  0CB9  0021               	movlb	1	; select bank1
  7805  0CBA  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
  7806  0CBB  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
  7807  0CBC  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
  7808  0CBD  0CA1               	rrf	___fttol@lval^(0+128),f
  7809  0CBE  0B89               	decfsz	9,f
  7810  0CBF  2CB9               	goto	u3995
  7811  0CC0  3001               	movlw	1
  7812  0CC1  0020               	movlb	0	; select bank0
  7813  0CC2  00EB               	movwf	??___fttol
  7814  0CC3  086B               	movf	??___fttol,w
  7815  0CC4  0021               	movlb	1	; select bank1
  7816  0CC5  07A5               	addwf	___fttol@exp1^(0+128),f
  7817  0CC6  1903               	btfsc	3,2
  7818  0CC7  2CE5               	goto	l3796
  7819  0CC8  2CB8               	goto	l3786
  7820  0CC9                     l3788:	
  7821  0CC9  3018               	movlw	24
  7822  0CCA  0225               	subwf	___fttol@exp1^(0+128),w
  7823  0CCB  1C03               	skipc
  7824  0CCC  2CE1               	goto	l752
  7825  0CCD  3000               	movlw	0
  7826  0CCE  0020               	movlb	0	; select bank0
  7827  0CCF  00EA               	movwf	?___fttol+3
  7828  0CD0  3000               	movlw	0
  7829  0CD1  00E9               	movwf	?___fttol+2
  7830  0CD2  3000               	movlw	0
  7831  0CD3  00E8               	movwf	?___fttol+1
  7832  0CD4  3000               	movlw	0
  7833  0CD5  00E7               	movwf	?___fttol
  7834  0CD6  0008               	return
  7835  0CD7                     l3794:	
  7836  0CD7  3001               	movlw	1
  7837  0CD8                     u4025:	
  7838  0CD8  0021               	movlb	1	; select bank1
  7839  0CD9  35A1               	lslf	___fttol@lval^(0+128),f
  7840  0CDA  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
  7841  0CDB  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
  7842  0CDC  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
  7843  0CDD  0B89               	decfsz	9,f
  7844  0CDE  2CD8               	goto	u4025
  7845  0CDF  3001               	movlw	1
  7846  0CE0  02A5               	subwf	___fttol@exp1^(0+128),f
  7847  0CE1                     l752:	
  7848  0CE1  0021               	movlb	1	; select bank1
  7849  0CE2  0825               	movf	___fttol@exp1^(0+128),w
  7850  0CE3  1D03               	btfss	3,2
  7851  0CE4  2CD7               	goto	l3794
  7852  0CE5                     l3796:	
  7853  0CE5  0820               	movf	___fttol@sign1^(0+128),w
  7854  0CE6  1903               	btfsc	3,2
  7855  0CE7  2CF3               	goto	l3800
  7856  0CE8  09A1               	comf	___fttol@lval^(0+128),f
  7857  0CE9  09A2               	comf	(___fttol@lval+1)^(0+128),f
  7858  0CEA  09A3               	comf	(___fttol@lval+2)^(0+128),f
  7859  0CEB  09A4               	comf	(___fttol@lval+3)^(0+128),f
  7860  0CEC  0AA1               	incf	___fttol@lval^(0+128),f
  7861  0CED  1903               	skipnz
  7862  0CEE  0AA2               	incf	(___fttol@lval+1)^(0+128),f
  7863  0CEF  1903               	skipnz
  7864  0CF0  0AA3               	incf	(___fttol@lval+2)^(0+128),f
  7865  0CF1  1903               	skipnz
  7866  0CF2  0AA4               	incf	(___fttol@lval+3)^(0+128),f
  7867  0CF3                     l3800:	
  7868  0CF3  0824               	movf	(___fttol@lval+3)^(0+128),w
  7869  0CF4  0020               	movlb	0	; select bank0
  7870  0CF5  00EA               	movwf	?___fttol+3
  7871  0CF6  0021               	movlb	1	; select bank1
  7872  0CF7  0823               	movf	(___fttol@lval+2)^(0+128),w
  7873  0CF8  0020               	movlb	0	; select bank0
  7874  0CF9  00E9               	movwf	?___fttol+2
  7875  0CFA  0021               	movlb	1	; select bank1
  7876  0CFB  0822               	movf	(___fttol@lval+1)^(0+128),w
  7877  0CFC  0020               	movlb	0	; select bank0
  7878  0CFD  00E8               	movwf	?___fttol+1
  7879  0CFE  0021               	movlb	1	; select bank1
  7880  0CFF  0821               	movf	___fttol@lval^(0+128),w
  7881  0D00  0020               	movlb	0	; select bank0
  7882  0D01  00E7               	movwf	?___fttol
  7883  0D02  0008               	return
  7884  0D03                     __end_of___fttol:	
  7885                           
  7886                           	psect	text30
  7887  15F0                     __ptext30:	
  7888 ;; *************** function ___ftsub *****************
  7889 ;; Defined at:
  7890 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  7891 ;; Parameters:    Size  Location     Type
  7892 ;;  f2              3   27[BANK0 ] float 
  7893 ;;  f1              3   30[BANK0 ] float 
  7894 ;; Auto vars:     Size  Location     Type
  7895 ;;		None
  7896 ;; Return value:  Size  Location     Type
  7897 ;;                  3   27[BANK0 ] float 
  7898 ;; Registers used:
  7899 ;;		wreg, status,2, status,0, pclath, cstack
  7900 ;; Tracked objects:
  7901 ;;		On entry : 0/0
  7902 ;;		On exit  : 0/0
  7903 ;;		Unchanged: 0/0
  7904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7905 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7908 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7909 ;;Total ram usage:        6 bytes
  7910 ;; Hardware stack levels used:    1
  7911 ;; Hardware stack levels required when called:   10
  7912 ;; This function calls:
  7913 ;;		___ftadd
  7914 ;; This function is called by:
  7915 ;;		_ftoa
  7916 ;; This function uses a non-reentrant model
  7917 ;;
  7918                           
  7919                           
  7920                           ;psect for function ___ftsub
  7921  15F0                     ___ftsub:	
  7922                           
  7923                           ;incstack = 0
  7924                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  7925  15F0  0020               	movlb	0	; select bank0
  7926  15F1  083D               	movf	___ftsub@f2+2,w
  7927  15F2  043C               	iorwf	___ftsub@f2+1,w
  7928  15F3  043B               	iorwf	___ftsub@f2,w
  7929  15F4  1903               	skipnz
  7930  15F5  2DF8               	goto	l2870
  7931  15F6  3080               	movlw	128
  7932  15F7  06BD               	xorwf	___ftsub@f2+2,f
  7933  15F8                     l2870:	
  7934  15F8  083E               	movf	___ftsub@f1,w
  7935  15F9  00AE               	movwf	___ftadd@f1
  7936  15FA  083F               	movf	___ftsub@f1+1,w
  7937  15FB  00AF               	movwf	___ftadd@f1+1
  7938  15FC  0840               	movf	___ftsub@f1+2,w
  7939  15FD  00B0               	movwf	___ftadd@f1+2
  7940  15FE  083B               	movf	___ftsub@f2,w
  7941  15FF  00B1               	movwf	___ftadd@f2
  7942  1600  083C               	movf	___ftsub@f2+1,w
  7943  1601  00B2               	movwf	___ftadd@f2+1
  7944  1602  083D               	movf	___ftsub@f2+2,w
  7945  1603  00B3               	movwf	___ftadd@f2+2
  7946  1604  3186  26EF         	fcall	___ftadd
  7947  1606  0020               	movlb	0	; select bank0
  7948  1607  082E               	movf	?___ftadd,w
  7949  1608  00BB               	movwf	?___ftsub
  7950  1609  082F               	movf	?___ftadd+1,w
  7951  160A  00BC               	movwf	?___ftsub+1
  7952  160B  0830               	movf	?___ftadd+2,w
  7953  160C  00BD               	movwf	?___ftsub+2
  7954  160D  0008               	return
  7955  160E                     __end_of___ftsub:	
  7956                           
  7957                           	psect	text31
  7958  1503                     __ptext31:	
  7959 ;; *************** function ___ftneg *****************
  7960 ;; Defined at:
  7961 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  7962 ;; Parameters:    Size  Location     Type
  7963 ;;  f1              3   55[BANK0 ] float 
  7964 ;; Auto vars:     Size  Location     Type
  7965 ;;		None
  7966 ;; Return value:  Size  Location     Type
  7967 ;;                  3   55[BANK0 ] float 
  7968 ;; Registers used:
  7969 ;;		wreg
  7970 ;; Tracked objects:
  7971 ;;		On entry : 0/0
  7972 ;;		On exit  : 0/0
  7973 ;;		Unchanged: 0/0
  7974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7975 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7978 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7979 ;;Total ram usage:        3 bytes
  7980 ;; Hardware stack levels used:    1
  7981 ;; Hardware stack levels required when called:    8
  7982 ;; This function calls:
  7983 ;;		Nothing
  7984 ;; This function is called by:
  7985 ;;		_loop
  7986 ;;		_ftoa
  7987 ;; This function uses a non-reentrant model
  7988 ;;
  7989                           
  7990                           
  7991                           ;psect for function ___ftneg
  7992  1503                     ___ftneg:	
  7993                           
  7994                           ;incstack = 0
  7995                           ; Regs used in ___ftneg: [wreg]
  7996  1503  0020               	movlb	0	; select bank0
  7997  1504  0859               	movf	___ftneg@f1+2,w
  7998  1505  0458               	iorwf	___ftneg@f1+1,w
  7999  1506  0457               	iorwf	___ftneg@f1,w
  8000  1507  1903               	skipnz
  8001  1508  0008               	return
  8002  1509  3080               	movlw	128
  8003  150A  06D9               	xorwf	___ftneg@f1+2,f
  8004  150B  0008               	return
  8005  150C                     __end_of___ftneg:	
  8006                           
  8007                           	psect	text32
  8008  0E5A                     __ptext32:	
  8009 ;; *************** function ___ftmul *****************
  8010 ;; Defined at:
  8011 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  8012 ;; Parameters:    Size  Location     Type
  8013 ;;  f1              3   55[BANK0 ] float 
  8014 ;;  f2              3   58[BANK0 ] float 
  8015 ;; Auto vars:     Size  Location     Type
  8016 ;;  f3_as_produc    3   66[BANK0 ] unsigned um
  8017 ;;  sign            1   70[BANK0 ] unsigned char 
  8018 ;;  cntr            1   69[BANK0 ] unsigned char 
  8019 ;;  exp             1   65[BANK0 ] unsigned char 
  8020 ;; Return value:  Size  Location     Type
  8021 ;;                  3   55[BANK0 ] float 
  8022 ;; Registers used:
  8023 ;;		wreg, status,2, status,0, pclath, cstack
  8024 ;; Tracked objects:
  8025 ;;		On entry : 0/0
  8026 ;;		On exit  : 0/0
  8027 ;;		Unchanged: 0/0
  8028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8029 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8030 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8031 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8032 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8033 ;;Total ram usage:       16 bytes
  8034 ;; Hardware stack levels used:    1
  8035 ;; Hardware stack levels required when called:    9
  8036 ;; This function calls:
  8037 ;;		___ftpack
  8038 ;; This function is called by:
  8039 ;;		_loop
  8040 ;;		_ftoa
  8041 ;; This function uses a non-reentrant model
  8042 ;;
  8043                           
  8044                           
  8045                           ;psect for function ___ftmul
  8046  0E5A                     ___ftmul:	
  8047                           
  8048                           ;incstack = 0
  8049                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8050  0E5A  0020               	movlb	0	; select bank0
  8051  0E5B  0857               	movf	___ftmul@f1,w
  8052  0E5C  00DD               	movwf	??___ftmul
  8053  0E5D  0858               	movf	___ftmul@f1+1,w
  8054  0E5E  00DE               	movwf	??___ftmul+1
  8055  0E5F  0859               	movf	___ftmul@f1+2,w
  8056  0E60  00DF               	movwf	??___ftmul+2
  8057  0E61  1003               	clrc
  8058  0E62  0D5E               	rlf	??___ftmul+1,w
  8059  0E63  0D5F               	rlf	??___ftmul+2,w
  8060  0E64  00E0               	movwf	??___ftmul+3
  8061  0E65  0860               	movf	??___ftmul+3,w
  8062  0E66  00E1               	movwf	___ftmul@exp
  8063  0E67  0861               	movf	___ftmul@exp,w
  8064  0E68  1D03               	btfss	3,2
  8065  0E69  2E71               	goto	l2814
  8066  0E6A  3000               	movlw	0
  8067  0E6B  00D7               	movwf	?___ftmul
  8068  0E6C  3000               	movlw	0
  8069  0E6D  00D8               	movwf	?___ftmul+1
  8070  0E6E  3000               	movlw	0
  8071  0E6F  00D9               	movwf	?___ftmul+2
  8072  0E70  0008               	return
  8073  0E71                     l2814:	
  8074  0E71  085A               	movf	___ftmul@f2,w
  8075  0E72  00DD               	movwf	??___ftmul
  8076  0E73  085B               	movf	___ftmul@f2+1,w
  8077  0E74  00DE               	movwf	??___ftmul+1
  8078  0E75  085C               	movf	___ftmul@f2+2,w
  8079  0E76  00DF               	movwf	??___ftmul+2
  8080  0E77  1003               	clrc
  8081  0E78  0D5E               	rlf	??___ftmul+1,w
  8082  0E79  0D5F               	rlf	??___ftmul+2,w
  8083  0E7A  00E0               	movwf	??___ftmul+3
  8084  0E7B  0860               	movf	??___ftmul+3,w
  8085  0E7C  00E6               	movwf	___ftmul@sign
  8086  0E7D  0866               	movf	___ftmul@sign,w
  8087  0E7E  1D03               	btfss	3,2
  8088  0E7F  2E87               	goto	l2820
  8089  0E80  3000               	movlw	0
  8090  0E81  00D7               	movwf	?___ftmul
  8091  0E82  3000               	movlw	0
  8092  0E83  00D8               	movwf	?___ftmul+1
  8093  0E84  3000               	movlw	0
  8094  0E85  00D9               	movwf	?___ftmul+2
  8095  0E86  0008               	return
  8096  0E87                     l2820:	
  8097  0E87  0866               	movf	___ftmul@sign,w
  8098  0E88  3E7B               	addlw	123
  8099  0E89  00DD               	movwf	??___ftmul
  8100  0E8A  085D               	movf	??___ftmul,w
  8101  0E8B  07E1               	addwf	___ftmul@exp,f
  8102  0E8C  0857               	movf	___ftmul@f1,w
  8103  0E8D  00DD               	movwf	??___ftmul
  8104  0E8E  0858               	movf	___ftmul@f1+1,w
  8105  0E8F  00DE               	movwf	??___ftmul+1
  8106  0E90  0859               	movf	___ftmul@f1+2,w
  8107  0E91  00DF               	movwf	??___ftmul+2
  8108  0E92  3010               	movlw	16
  8109  0E93                     u2945:	
  8110  0E93  36DF               	lsrf	??___ftmul+2,f
  8111  0E94  0CDE               	rrf	??___ftmul+1,f
  8112  0E95  0CDD               	rrf	??___ftmul,f
  8113  0E96  0B89               	decfsz	9,f
  8114  0E97  2E93               	goto	u2945
  8115  0E98  085D               	movf	??___ftmul,w
  8116  0E99  00E0               	movwf	??___ftmul+3
  8117  0E9A  0860               	movf	??___ftmul+3,w
  8118  0E9B  00E6               	movwf	___ftmul@sign
  8119  0E9C  085A               	movf	___ftmul@f2,w
  8120  0E9D  00DD               	movwf	??___ftmul
  8121  0E9E  085B               	movf	___ftmul@f2+1,w
  8122  0E9F  00DE               	movwf	??___ftmul+1
  8123  0EA0  085C               	movf	___ftmul@f2+2,w
  8124  0EA1  00DF               	movwf	??___ftmul+2
  8125  0EA2  3010               	movlw	16
  8126  0EA3                     u2955:	
  8127  0EA3  36DF               	lsrf	??___ftmul+2,f
  8128  0EA4  0CDE               	rrf	??___ftmul+1,f
  8129  0EA5  0CDD               	rrf	??___ftmul,f
  8130  0EA6  0B89               	decfsz	9,f
  8131  0EA7  2EA3               	goto	u2955
  8132  0EA8  085D               	movf	??___ftmul,w
  8133  0EA9  00E0               	movwf	??___ftmul+3
  8134  0EAA  0860               	movf	??___ftmul+3,w
  8135  0EAB  06E6               	xorwf	___ftmul@sign,f
  8136  0EAC  3080               	movlw	128
  8137  0EAD  00DD               	movwf	??___ftmul
  8138  0EAE  085D               	movf	??___ftmul,w
  8139  0EAF  05E6               	andwf	___ftmul@sign,f
  8140  0EB0  17D8               	bsf	___ftmul@f1+1,7
  8141  0EB1  17DB               	bsf	___ftmul@f2+1,7
  8142  0EB2  30FF               	movlw	255
  8143  0EB3  05DA               	andwf	___ftmul@f2,f
  8144  0EB4  30FF               	movlw	255
  8145  0EB5  05DB               	andwf	___ftmul@f2+1,f
  8146  0EB6  3000               	movlw	0
  8147  0EB7  05DC               	andwf	___ftmul@f2+2,f
  8148  0EB8  3000               	movlw	0
  8149  0EB9  00E2               	movwf	___ftmul@f3_as_product
  8150  0EBA  3000               	movlw	0
  8151  0EBB  00E3               	movwf	___ftmul@f3_as_product+1
  8152  0EBC  3000               	movlw	0
  8153  0EBD  00E4               	movwf	___ftmul@f3_as_product+2
  8154  0EBE  3007               	movlw	7
  8155  0EBF  00DD               	movwf	??___ftmul
  8156  0EC0  085D               	movf	??___ftmul,w
  8157  0EC1  00E5               	movwf	___ftmul@cntr
  8158  0EC2                     l2832:	
  8159  0EC2  1C57               	btfss	___ftmul@f1,0
  8160  0EC3  2ECA               	goto	l2836
  8161  0EC4  085A               	movf	___ftmul@f2,w
  8162  0EC5  07E2               	addwf	___ftmul@f3_as_product,f
  8163  0EC6  085B               	movf	___ftmul@f2+1,w
  8164  0EC7  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  8165  0EC8  085C               	movf	___ftmul@f2+2,w
  8166  0EC9  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  8167  0ECA                     l2836:	
  8168  0ECA  3001               	movlw	1
  8169  0ECB                     u2975:	
  8170  0ECB  36D9               	lsrf	___ftmul@f1+2,f
  8171  0ECC  0CD8               	rrf	___ftmul@f1+1,f
  8172  0ECD  0CD7               	rrf	___ftmul@f1,f
  8173  0ECE  0B89               	decfsz	9,f
  8174  0ECF  2ECB               	goto	u2975
  8175  0ED0  3001               	movlw	1
  8176  0ED1                     u2985:	
  8177  0ED1  35DA               	lslf	___ftmul@f2,f
  8178  0ED2  0DDB               	rlf	___ftmul@f2+1,f
  8179  0ED3  0DDC               	rlf	___ftmul@f2+2,f
  8180  0ED4  0B89               	decfsz	9,f
  8181  0ED5  2ED1               	goto	u2985
  8182  0ED6  3001               	movlw	1
  8183  0ED7  02E5               	subwf	___ftmul@cntr,f
  8184  0ED8  1D03               	btfss	3,2
  8185  0ED9  2EC2               	goto	l2832
  8186  0EDA  3009               	movlw	9
  8187  0EDB  00DD               	movwf	??___ftmul
  8188  0EDC  085D               	movf	??___ftmul,w
  8189  0EDD  00E5               	movwf	___ftmul@cntr
  8190  0EDE                     l2844:	
  8191  0EDE  1C57               	btfss	___ftmul@f1,0
  8192  0EDF  2EE6               	goto	l2848
  8193  0EE0  085A               	movf	___ftmul@f2,w
  8194  0EE1  07E2               	addwf	___ftmul@f3_as_product,f
  8195  0EE2  085B               	movf	___ftmul@f2+1,w
  8196  0EE3  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  8197  0EE4  085C               	movf	___ftmul@f2+2,w
  8198  0EE5  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  8199  0EE6                     l2848:	
  8200  0EE6  3001               	movlw	1
  8201  0EE7                     u3015:	
  8202  0EE7  36D9               	lsrf	___ftmul@f1+2,f
  8203  0EE8  0CD8               	rrf	___ftmul@f1+1,f
  8204  0EE9  0CD7               	rrf	___ftmul@f1,f
  8205  0EEA  0B89               	decfsz	9,f
  8206  0EEB  2EE7               	goto	u3015
  8207  0EEC  3001               	movlw	1
  8208  0EED                     u3025:	
  8209  0EED  36E4               	lsrf	___ftmul@f3_as_product+2,f
  8210  0EEE  0CE3               	rrf	___ftmul@f3_as_product+1,f
  8211  0EEF  0CE2               	rrf	___ftmul@f3_as_product,f
  8212  0EF0  0B89               	decfsz	9,f
  8213  0EF1  2EED               	goto	u3025
  8214  0EF2  3001               	movlw	1
  8215  0EF3  02E5               	subwf	___ftmul@cntr,f
  8216  0EF4  1D03               	btfss	3,2
  8217  0EF5  2EDE               	goto	l2844
  8218  0EF6  0862               	movf	___ftmul@f3_as_product,w
  8219  0EF7  00A0               	movwf	___ftpack@arg
  8220  0EF8  0863               	movf	___ftmul@f3_as_product+1,w
  8221  0EF9  00A1               	movwf	___ftpack@arg+1
  8222  0EFA  0864               	movf	___ftmul@f3_as_product+2,w
  8223  0EFB  00A2               	movwf	___ftpack@arg+2
  8224  0EFC  0861               	movf	___ftmul@exp,w
  8225  0EFD  00DD               	movwf	??___ftmul
  8226  0EFE  085D               	movf	??___ftmul,w
  8227  0EFF  00A3               	movwf	___ftpack@exp
  8228  0F00  0866               	movf	___ftmul@sign,w
  8229  0F01  00DE               	movwf	??___ftmul+1
  8230  0F02  085E               	movf	??___ftmul+1,w
  8231  0F03  00A4               	movwf	___ftpack@sign
  8232  0F04  318A  22E2         	fcall	___ftpack
  8233  0F06  0020               	movlb	0	; select bank0
  8234  0F07  0820               	movf	?___ftpack,w
  8235  0F08  00D7               	movwf	?___ftmul
  8236  0F09  0821               	movf	?___ftpack+1,w
  8237  0F0A  00D8               	movwf	?___ftmul+1
  8238  0F0B  0822               	movf	?___ftpack+2,w
  8239  0F0C  00D9               	movwf	?___ftmul+2
  8240  0F0D  0008               	return
  8241  0F0E                     __end_of___ftmul:	
  8242                           
  8243                           	psect	text33
  8244  085C                     __ptext33:	
  8245 ;; *************** function ___ftge *****************
  8246 ;; Defined at:
  8247 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8248 ;; Parameters:    Size  Location     Type
  8249 ;;  ff1             3    0[BANK0 ] float 
  8250 ;;  ff2             3    3[BANK0 ] float 
  8251 ;; Auto vars:     Size  Location     Type
  8252 ;;		None
  8253 ;; Return value:  Size  Location     Type
  8254 ;;		None               void
  8255 ;; Registers used:
  8256 ;;		wreg, status,2, status,0
  8257 ;; Tracked objects:
  8258 ;;		On entry : 0/0
  8259 ;;		On exit  : 0/0
  8260 ;;		Unchanged: 0/0
  8261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8262 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8264 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8265 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8266 ;;Total ram usage:        9 bytes
  8267 ;; Hardware stack levels used:    1
  8268 ;; Hardware stack levels required when called:    8
  8269 ;; This function calls:
  8270 ;;		Nothing
  8271 ;; This function is called by:
  8272 ;;		_ftoa
  8273 ;; This function uses a non-reentrant model
  8274 ;;
  8275                           
  8276                           
  8277                           ;psect for function ___ftge
  8278  085C                     ___ftge:	
  8279                           
  8280                           ;incstack = 0
  8281                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8282  085C  0020               	movlb	0	; select bank0
  8283  085D  1FA2               	btfss	___ftge@ff1+2,7
  8284  085E  2873               	goto	l2792
  8285  085F  0920               	comf	___ftge@ff1,w
  8286  0860  00A6               	movwf	??___ftge
  8287  0861  0921               	comf	___ftge@ff1+1,w
  8288  0862  00A7               	movwf	??___ftge+1
  8289  0863  0922               	comf	___ftge@ff1+2,w
  8290  0864  00A8               	movwf	??___ftge+2
  8291  0865  0AA6               	incf	??___ftge,f
  8292  0866  1903               	skipnz
  8293  0867  0AA7               	incf	??___ftge+1,f
  8294  0868  1903               	skipnz
  8295  0869  0AA8               	incf	??___ftge+2,f
  8296  086A  3000               	movlw	0
  8297  086B  0726               	addwf	??___ftge,w
  8298  086C  00A0               	movwf	___ftge@ff1
  8299  086D  3000               	movlw	0
  8300  086E  3D27               	addwfc	??___ftge+1,w
  8301  086F  00A1               	movwf	___ftge@ff1+1
  8302  0870  3080               	movlw	128
  8303  0871  3D28               	addwfc	??___ftge+2,w
  8304  0872  00A2               	movwf	___ftge@ff1+2
  8305  0873                     l2792:	
  8306  0873  1FA5               	btfss	___ftge@ff2+2,7
  8307  0874  2889               	goto	l2796
  8308  0875  0923               	comf	___ftge@ff2,w
  8309  0876  00A6               	movwf	??___ftge
  8310  0877  0924               	comf	___ftge@ff2+1,w
  8311  0878  00A7               	movwf	??___ftge+1
  8312  0879  0925               	comf	___ftge@ff2+2,w
  8313  087A  00A8               	movwf	??___ftge+2
  8314  087B  0AA6               	incf	??___ftge,f
  8315  087C  1903               	skipnz
  8316  087D  0AA7               	incf	??___ftge+1,f
  8317  087E  1903               	skipnz
  8318  087F  0AA8               	incf	??___ftge+2,f
  8319  0880  3000               	movlw	0
  8320  0881  0726               	addwf	??___ftge,w
  8321  0882  00A3               	movwf	___ftge@ff2
  8322  0883  3000               	movlw	0
  8323  0884  3D27               	addwfc	??___ftge+1,w
  8324  0885  00A4               	movwf	___ftge@ff2+1
  8325  0886  3080               	movlw	128
  8326  0887  3D28               	addwfc	??___ftge+2,w
  8327  0888  00A5               	movwf	___ftge@ff2+2
  8328  0889                     l2796:	
  8329  0889  3080               	movlw	128
  8330  088A  06A2               	xorwf	___ftge@ff1+2,f
  8331  088B  3080               	movlw	128
  8332  088C  06A5               	xorwf	___ftge@ff2+2,f
  8333  088D  0825               	movf	___ftge@ff2+2,w
  8334  088E  0222               	subwf	___ftge@ff1+2,w
  8335  088F  1D03               	skipz
  8336  0890  0008               	return
  8337  0891  0824               	movf	___ftge@ff2+1,w
  8338  0892  0221               	subwf	___ftge@ff1+1,w
  8339  0893  1D03               	skipz
  8340  0894  0008               	return
  8341  0895  0823               	movf	___ftge@ff2,w
  8342  0896  0220               	subwf	___ftge@ff1,w
  8343  0897  0008               	return
  8344  0898                     __end_of___ftge:	
  8345                           
  8346                           	psect	text34
  8347  0DAC                     __ptext34:	
  8348 ;; *************** function _getADCValue *****************
  8349 ;; Defined at:
  8350 ;;		line 18 in file "main.c"
  8351 ;; Parameters:    Size  Location     Type
  8352 ;;  channel         1    wreg     unsigned char 
  8353 ;; Auto vars:     Size  Location     Type
  8354 ;;  channel         1   51[BANK0 ] unsigned char 
  8355 ;;  adcSum          3   52[BANK0 ] float 
  8356 ;;  adcLoop         2   49[BANK0 ] unsigned int 
  8357 ;; Return value:  Size  Location     Type
  8358 ;;                  3   43[BANK0 ] float 
  8359 ;; Registers used:
  8360 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8361 ;; Tracked objects:
  8362 ;;		On entry : 0/0
  8363 ;;		On exit  : 0/0
  8364 ;;		Unchanged: 0/0
  8365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8366 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8367 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8368 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8369 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8370 ;;Total ram usage:       12 bytes
  8371 ;; Hardware stack levels used:    1
  8372 ;; Hardware stack levels required when called:   10
  8373 ;; This function calls:
  8374 ;;		___awtoft
  8375 ;;		___ftadd
  8376 ;;		___ftdiv
  8377 ;;		_sleepMs
  8378 ;; This function is called by:
  8379 ;;		_loop
  8380 ;; This function uses a non-reentrant model
  8381 ;;
  8382                           
  8383                           
  8384                           ;psect for function _getADCValue
  8385  0DAC                     _getADCValue:	
  8386                           
  8387                           ;incstack = 0
  8388                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8389                           ;getADCValue@channel stored from wreg
  8390  0DAC  0020               	movlb	0	; select bank0
  8391  0DAD  00D3               	movwf	getADCValue@channel
  8392                           
  8393                           ;main.c: 21: float adcSum = 0;
  8394  0DAE  3000               	movlw	0
  8395  0DAF  00D4               	movwf	getADCValue@adcSum
  8396  0DB0  3000               	movlw	0
  8397  0DB1  00D5               	movwf	getADCValue@adcSum+1
  8398  0DB2  3000               	movlw	0
  8399  0DB3  00D6               	movwf	getADCValue@adcSum+2
  8400                           
  8401                           ;main.c: 22: unsigned int adcLoop = 1000;
  8402  0DB4  30E8               	movlw	232
  8403  0DB5  00D1               	movwf	getADCValue@adcLoop
  8404  0DB6  3003               	movlw	3
  8405  0DB7  00D2               	movwf	getADCValue@adcLoop+1
  8406                           
  8407                           ;main.c: 24: ADCON0bits.CHS = channel;
  8408  0DB8  0853               	movf	getADCValue@channel,w
  8409  0DB9  00CE               	movwf	??_getADCValue
  8410  0DBA  0DCE               	rlf	??_getADCValue,f
  8411  0DBB  0DCE               	rlf	??_getADCValue,f
  8412  0DBC  0021               	movlb	1	; select bank1
  8413  0DBD  081D               	movf	29,w	;volatile
  8414  0DBE  0020               	movlb	0	; select bank0
  8415  0DBF  064E               	xorwf	??_getADCValue,w
  8416  0DC0  3903               	andlw	-253
  8417  0DC1  064E               	xorwf	??_getADCValue,w
  8418  0DC2  0021               	movlb	1	; select bank1
  8419  0DC3  009D               	movwf	29	;volatile
  8420                           
  8421                           ;main.c: 25: FVRCONbits.FVREN = 1;
  8422  0DC4  0022               	movlb	2	; select bank2
  8423  0DC5  1797               	bsf	23,7	;volatile
  8424                           
  8425                           ;main.c: 26: ADCON0bits.ADON = 1;
  8426  0DC6  0021               	movlb	1	; select bank1
  8427  0DC7  141D               	bsf	29,0	;volatile
  8428                           
  8429                           ;main.c: 28: sleepMs(1);
  8430  0DC8  3001               	movlw	1
  8431  0DC9  0020               	movlb	0	; select bank0
  8432  0DCA  00A0               	movwf	sleepMs@milliseconds
  8433  0DCB  3000               	movlw	0
  8434  0DCC  00A1               	movwf	sleepMs@milliseconds+1
  8435  0DCD  3197  27D0  318D   	fcall	_sleepMs
  8436  0DD0                     l3142:	
  8437                           ;main.c: 30: while (adcLoop--){
  8438                           
  8439  0DD0  3001               	movlw	1
  8440  0DD1  0020               	movlb	0	; select bank0
  8441  0DD2  02D1               	subwf	getADCValue@adcLoop,f
  8442  0DD3  3000               	movlw	0
  8443  0DD4  3BD2               	subwfb	getADCValue@adcLoop+1,f
  8444  0DD5  0A51               	incf	getADCValue@adcLoop,w
  8445  0DD6  1903               	btfsc	3,2
  8446  0DD7  0A52               	incf	getADCValue@adcLoop+1,w
  8447  0DD8  1903               	btfsc	3,2
  8448  0DD9  2E11               	goto	l167
  8449                           
  8450                           ;main.c: 32: ADCON0bits.ADGO = 1;
  8451  0DDA  0021               	movlb	1	; select bank1
  8452  0DDB  149D               	bsf	29,1	;volatile
  8453  0DDC                     l3138:	
  8454                           ;main.c: 34: while (ADCON0bits.ADGO){
  8455                           
  8456  0DDC  0021               	movlb	1	; select bank1
  8457  0DDD  1C9D               	btfss	29,1	;volatile
  8458  0DDE  2DE8               	goto	l3140
  8459                           
  8460                           ;main.c: 35: sleepMs(1);
  8461  0DDF  3001               	movlw	1
  8462  0DE0  0020               	movlb	0	; select bank0
  8463  0DE1  00A0               	movwf	sleepMs@milliseconds
  8464  0DE2  3000               	movlw	0
  8465  0DE3  00A1               	movwf	sleepMs@milliseconds+1
  8466  0DE4  3197  27D0  318D   	fcall	_sleepMs
  8467  0DE7  2DDC               	goto	l3138
  8468  0DE8                     l3140:	
  8469                           
  8470                           ;main.c: 36: };main.c: 38: adcSum+= (ADRESL | (ADRESH << 8));
  8471  0DE8  081C               	movf	28,w	;volatile
  8472  0DE9  0020               	movlb	0	; select bank0
  8473  0DEA  00CE               	movwf	??_getADCValue
  8474  0DEB  01CF               	clrf	??_getADCValue+1
  8475  0DEC  084E               	movf	??_getADCValue,w
  8476  0DED  00CF               	movwf	??_getADCValue+1
  8477  0DEE  01CE               	clrf	??_getADCValue
  8478  0DEF  084E               	movf	??_getADCValue,w
  8479  0DF0  0021               	movlb	1	; select bank1
  8480  0DF1  041B               	iorwf	27,w	;volatile
  8481  0DF2  0020               	movlb	0	; select bank0
  8482  0DF3  00A8               	movwf	___awtoft@c
  8483  0DF4  084F               	movf	??_getADCValue+1,w
  8484  0DF5  00A9               	movwf	___awtoft@c+1
  8485  0DF6  3196  268C  318D   	fcall	___awtoft
  8486  0DF9  0020               	movlb	0	; select bank0
  8487  0DFA  0828               	movf	?___awtoft,w
  8488  0DFB  00AE               	movwf	___ftadd@f1
  8489  0DFC  0829               	movf	?___awtoft+1,w
  8490  0DFD  00AF               	movwf	___ftadd@f1+1
  8491  0DFE  082A               	movf	?___awtoft+2,w
  8492  0DFF  00B0               	movwf	___ftadd@f1+2
  8493  0E00  0854               	movf	getADCValue@adcSum,w
  8494  0E01  00B1               	movwf	___ftadd@f2
  8495  0E02  0855               	movf	getADCValue@adcSum+1,w
  8496  0E03  00B2               	movwf	___ftadd@f2+1
  8497  0E04  0856               	movf	getADCValue@adcSum+2,w
  8498  0E05  00B3               	movwf	___ftadd@f2+2
  8499  0E06  3186  26EF  318D   	fcall	___ftadd
  8500  0E09  0020               	movlb	0	; select bank0
  8501  0E0A  082E               	movf	?___ftadd,w
  8502  0E0B  00D4               	movwf	getADCValue@adcSum
  8503  0E0C  082F               	movf	?___ftadd+1,w
  8504  0E0D  00D5               	movwf	getADCValue@adcSum+1
  8505  0E0E  0830               	movf	?___ftadd+2,w
  8506  0E0F  00D6               	movwf	getADCValue@adcSum+2
  8507  0E10  2DD0               	goto	l3142
  8508  0E11                     l167:	
  8509                           
  8510                           ;main.c: 40: };main.c: 42: FVRCONbits.FVREN = 0;
  8511  0E11  0022               	movlb	2	; select bank2
  8512  0E12  1397               	bcf	23,7	;volatile
  8513                           
  8514                           ;main.c: 43: ADCON0bits.ADON = 0;
  8515  0E13  0021               	movlb	1	; select bank1
  8516  0E14  101D               	bcf	29,0	;volatile
  8517                           
  8518                           ;main.c: 46: adcSum/= 1000;
  8519  0E15  3000               	movlw	0
  8520  0E16  0020               	movlb	0	; select bank0
  8521  0E17  00BB               	movwf	___ftdiv@f2
  8522  0E18  307A               	movlw	122
  8523  0E19  00BC               	movwf	___ftdiv@f2+1
  8524  0E1A  3044               	movlw	68
  8525  0E1B  00BD               	movwf	___ftdiv@f2+2
  8526  0E1C  0854               	movf	getADCValue@adcSum,w
  8527  0E1D  00BE               	movwf	___ftdiv@f1
  8528  0E1E  0855               	movf	getADCValue@adcSum+1,w
  8529  0E1F  00BF               	movwf	___ftdiv@f1+1
  8530  0E20  0856               	movf	getADCValue@adcSum+2,w
  8531  0E21  00C0               	movwf	___ftdiv@f1+2
  8532  0E22  318D  2503  318D   	fcall	___ftdiv
  8533  0E25  0020               	movlb	0	; select bank0
  8534  0E26  083B               	movf	?___ftdiv,w
  8535  0E27  00D4               	movwf	getADCValue@adcSum
  8536  0E28  083C               	movf	?___ftdiv+1,w
  8537  0E29  00D5               	movwf	getADCValue@adcSum+1
  8538  0E2A  083D               	movf	?___ftdiv+2,w
  8539  0E2B  00D6               	movwf	getADCValue@adcSum+2
  8540                           
  8541                           ;main.c: 49: if (ADCON1bits.ADPREF == 0b11){
  8542  0E2C  0021               	movlb	1	; select bank1
  8543  0E2D  081E               	movf	30,w	;volatile
  8544  0E2E  3903               	andlw	3
  8545  0E2F  3A03               	xorlw	3
  8546  0E30  1903               	btfsc	3,2
  8547  0E31  2E4B               	goto	l3154
  8548  0E32  2E52               	goto	l3156
  8549  0E33                     l3150:	
  8550                           ;main.c: 51: case 0b10:
  8551                           
  8552                           ;main.c: 50: switch (FVRCONbits.ADFVR){
  8553                           
  8554                           
  8555                           ;main.c: 52: adcSum/= 500;
  8556  0E33  3000               	movlw	0
  8557  0E34  0020               	movlb	0	; select bank0
  8558  0E35  00BB               	movwf	___ftdiv@f2
  8559  0E36  30FA               	movlw	250
  8560  0E37  00BC               	movwf	___ftdiv@f2+1
  8561  0E38  3043               	movlw	67
  8562  0E39  00BD               	movwf	___ftdiv@f2+2
  8563  0E3A  0854               	movf	getADCValue@adcSum,w
  8564  0E3B  00BE               	movwf	___ftdiv@f1
  8565  0E3C  0855               	movf	getADCValue@adcSum+1,w
  8566  0E3D  00BF               	movwf	___ftdiv@f1+1
  8567  0E3E  0856               	movf	getADCValue@adcSum+2,w
  8568  0E3F  00C0               	movwf	___ftdiv@f1+2
  8569  0E40  318D  2503  318D   	fcall	___ftdiv
  8570  0E43  0020               	movlb	0	; select bank0
  8571  0E44  083B               	movf	?___ftdiv,w
  8572  0E45  00D4               	movwf	getADCValue@adcSum
  8573  0E46  083C               	movf	?___ftdiv+1,w
  8574  0E47  00D5               	movwf	getADCValue@adcSum+1
  8575  0E48  083D               	movf	?___ftdiv+2,w
  8576  0E49  00D6               	movwf	getADCValue@adcSum+2
  8577                           
  8578                           ;main.c: 54: }
  8579                           
  8580                           ;main.c: 53: break;
  8581  0E4A  2E52               	goto	l3156
  8582  0E4B                     l3154:	
  8583  0E4B  0022               	movlb	2	; select bank2
  8584  0E4C  0817               	movf	23,w	;volatile
  8585  0E4D  3903               	andlw	3
  8586                           
  8587                           ; Switch size 1, requested type "space"
  8588                           ; Number of cases is 1, Range of values is 2 to 2
  8589                           ; switch strategies available:
  8590                           ; Name         Instructions Cycles
  8591                           ; simple_byte            4     3 (average)
  8592                           ; direct_byte           11     9 (fixed)
  8593                           ; jumptable            263     9 (fixed)
  8594                           ;	Chosen strategy is simple_byte
  8595  0E4E  3A02               	xorlw	2	; case 2
  8596  0E4F  1903               	skipnz
  8597  0E50  2E33               	goto	l3150
  8598  0E51  2E52               	goto	l3156
  8599  0E52                     l3156:	
  8600                           
  8601                           ;main.c: 55: };main.c: 58: return adcSum;
  8602  0E52  0020               	movlb	0	; select bank0
  8603  0E53  0854               	movf	getADCValue@adcSum,w
  8604  0E54  00CB               	movwf	?_getADCValue
  8605  0E55  0855               	movf	getADCValue@adcSum+1,w
  8606  0E56  00CC               	movwf	?_getADCValue+1
  8607  0E57  0856               	movf	getADCValue@adcSum+2,w
  8608  0E58  00CD               	movwf	?_getADCValue+2
  8609  0E59  0008               	return
  8610  0E5A                     __end_of_getADCValue:	
  8611                           
  8612                           	psect	text35
  8613  17D0                     __ptext35:	
  8614 ;; *************** function _sleepMs *****************
  8615 ;; Defined at:
  8616 ;;		line 51 in file "interface.c"
  8617 ;; Parameters:    Size  Location     Type
  8618 ;;  milliseconds    2    0[BANK0 ] unsigned int 
  8619 ;; Auto vars:     Size  Location     Type
  8620 ;;  wdtps           1    4[BANK0 ] unsigned char 
  8621 ;; Return value:  Size  Location     Type
  8622 ;;                  1    wreg      void 
  8623 ;; Registers used:
  8624 ;;		wreg, status,2, status,0
  8625 ;; Tracked objects:
  8626 ;;		On entry : 0/0
  8627 ;;		On exit  : 0/0
  8628 ;;		Unchanged: 0/0
  8629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8630 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8631 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8632 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8633 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8634 ;;Total ram usage:        5 bytes
  8635 ;; Hardware stack levels used:    1
  8636 ;; Hardware stack levels required when called:    8
  8637 ;; This function calls:
  8638 ;;		Nothing
  8639 ;; This function is called by:
  8640 ;;		_getADCValue
  8641 ;;		_sleepListren
  8642 ;;		_nrf24l01SendPacket
  8643 ;; This function uses a non-reentrant model
  8644 ;;
  8645                           
  8646                           
  8647                           ;psect for function _sleepMs
  8648  17D0                     _sleepMs:	
  8649                           
  8650                           ;interface.c: 53: unsigned char wdtps;;interface.c: 54: for (wdtps = 0; wdtps <= 0b10010
      +                          ; wdtps++){
  8651                           
  8652                           ;incstack = 0
  8653                           ; Regs used in _sleepMs: [wreg+status,2+status,0]
  8654  17D0  0020               	movlb	0	; select bank0
  8655  17D1  01A4               	clrf	sleepMs@wdtps
  8656  17D2  3013               	movlw	19
  8657  17D3  0224               	subwf	sleepMs@wdtps,w
  8658  17D4  1803               	btfsc	3,0
  8659  17D5  2FF9               	goto	l2578
  8660  17D6                     l2568:	
  8661                           
  8662                           ;interface.c: 55: if ((milliseconds >> wdtps) & 0b1){
  8663  17D6  0821               	movf	sleepMs@milliseconds+1,w
  8664  17D7  00A3               	movwf	??_sleepMs+1
  8665  17D8  0820               	movf	sleepMs@milliseconds,w
  8666  17D9  00A2               	movwf	??_sleepMs
  8667  17DA  0A24               	incf	sleepMs@wdtps,w
  8668  17DB  2FDE               	goto	u2534
  8669  17DC                     u2535:	
  8670  17DC  36A3               	lsrf	??_sleepMs+1,f
  8671  17DD  0CA2               	rrf	??_sleepMs,f
  8672  17DE                     u2534:	
  8673  17DE  0B89               	decfsz	9,f
  8674  17DF  2FDC               	goto	u2535
  8675  17E0  1C22               	btfss	??_sleepMs,0
  8676  17E1  2FF0               	goto	l52
  8677                           
  8678                           ;interface.c: 56: WDTCONbits.WDTPS = wdtps;
  8679  17E2  0824               	movf	sleepMs@wdtps,w
  8680  17E3  00A2               	movwf	??_sleepMs
  8681  17E4  0DA2               	rlf	??_sleepMs,f
  8682  17E5  0021               	movlb	1	; select bank1
  8683  17E6  0817               	movf	23,w	;volatile
  8684  17E7  0020               	movlb	0	; select bank0
  8685  17E8  0622               	xorwf	??_sleepMs,w
  8686  17E9  39C1               	andlw	-63
  8687  17EA  0622               	xorwf	??_sleepMs,w
  8688  17EB  0021               	movlb	1	; select bank1
  8689  17EC  0097               	movwf	23	;volatile
  8690  17ED  0063               	sleep	;# 
  8691                           
  8692                           ;interface.c: 61: __nop();
  8693  17EE  0000               	nop
  8694                           
  8695                           ;interface.c: 62: __nop();
  8696  17EF  0000               	nop
  8697  17F0                     l52:	
  8698  17F0  3001               	movlw	1
  8699  17F1  0020               	movlb	0	; select bank0
  8700  17F2  00A2               	movwf	??_sleepMs
  8701  17F3  0822               	movf	??_sleepMs,w
  8702  17F4  07A4               	addwf	sleepMs@wdtps,f
  8703  17F5  3013               	movlw	19
  8704  17F6  0224               	subwf	sleepMs@wdtps,w
  8705  17F7  1C03               	skipc
  8706  17F8  2FD6               	goto	l2568
  8707  17F9                     l2578:	
  8708                           
  8709                           ;interface.c: 65: };interface.c: 66: };interface.c: 68: WDTCONbits.WDTPS = 0b01101;
  8710  17F9  0021               	movlb	1	; select bank1
  8711  17FA  0817               	movf	23,w	;volatile
  8712  17FB  39C1               	andlw	-63
  8713  17FC  381A               	iorlw	26
  8714  17FD  0097               	movwf	23	;volatile
  8715  17FE  0064               	clrwdt	;# 
  8716  17FF  0008               	return
  8717  1800                     __end_of_sleepMs:	
  8718                           
  8719                           	psect	text36
  8720  0D03                     __ptext36:	
  8721 ;; *************** function ___ftdiv *****************
  8722 ;; Defined at:
  8723 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  8724 ;; Parameters:    Size  Location     Type
  8725 ;;  f2              3   27[BANK0 ] float 
  8726 ;;  f1              3   30[BANK0 ] float 
  8727 ;; Auto vars:     Size  Location     Type
  8728 ;;  f3              3   38[BANK0 ] float 
  8729 ;;  sign            1   42[BANK0 ] unsigned char 
  8730 ;;  exp             1   41[BANK0 ] unsigned char 
  8731 ;;  cntr            1   37[BANK0 ] unsigned char 
  8732 ;; Return value:  Size  Location     Type
  8733 ;;                  3   27[BANK0 ] float 
  8734 ;; Registers used:
  8735 ;;		wreg, status,2, status,0, pclath, cstack
  8736 ;; Tracked objects:
  8737 ;;		On entry : 0/0
  8738 ;;		On exit  : 0/0
  8739 ;;		Unchanged: 0/0
  8740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8741 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8742 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8743 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8744 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8745 ;;Total ram usage:       16 bytes
  8746 ;; Hardware stack levels used:    1
  8747 ;; Hardware stack levels required when called:    9
  8748 ;; This function calls:
  8749 ;;		___ftpack
  8750 ;; This function is called by:
  8751 ;;		_getADCValue
  8752 ;;		_loop
  8753 ;; This function uses a non-reentrant model
  8754 ;;
  8755                           
  8756                           
  8757                           ;psect for function ___ftdiv
  8758  0D03                     ___ftdiv:	
  8759                           
  8760                           ;incstack = 0
  8761                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  8762  0D03  0020               	movlb	0	; select bank0
  8763  0D04  083E               	movf	___ftdiv@f1,w
  8764  0D05  00C1               	movwf	??___ftdiv
  8765  0D06  083F               	movf	___ftdiv@f1+1,w
  8766  0D07  00C2               	movwf	??___ftdiv+1
  8767  0D08  0840               	movf	___ftdiv@f1+2,w
  8768  0D09  00C3               	movwf	??___ftdiv+2
  8769  0D0A  1003               	clrc
  8770  0D0B  0D42               	rlf	??___ftdiv+1,w
  8771  0D0C  0D43               	rlf	??___ftdiv+2,w
  8772  0D0D  00C4               	movwf	??___ftdiv+3
  8773  0D0E  0844               	movf	??___ftdiv+3,w
  8774  0D0F  00C9               	movwf	___ftdiv@exp
  8775  0D10  0849               	movf	___ftdiv@exp,w
  8776  0D11  1D03               	btfss	3,2
  8777  0D12  2D1A               	goto	l3042
  8778  0D13  3000               	movlw	0
  8779  0D14  00BB               	movwf	?___ftdiv
  8780  0D15  3000               	movlw	0
  8781  0D16  00BC               	movwf	?___ftdiv+1
  8782  0D17  3000               	movlw	0
  8783  0D18  00BD               	movwf	?___ftdiv+2
  8784  0D19  0008               	return
  8785  0D1A                     l3042:	
  8786  0D1A  083B               	movf	___ftdiv@f2,w
  8787  0D1B  00C1               	movwf	??___ftdiv
  8788  0D1C  083C               	movf	___ftdiv@f2+1,w
  8789  0D1D  00C2               	movwf	??___ftdiv+1
  8790  0D1E  083D               	movf	___ftdiv@f2+2,w
  8791  0D1F  00C3               	movwf	??___ftdiv+2
  8792  0D20  1003               	clrc
  8793  0D21  0D42               	rlf	??___ftdiv+1,w
  8794  0D22  0D43               	rlf	??___ftdiv+2,w
  8795  0D23  00C4               	movwf	??___ftdiv+3
  8796  0D24  0844               	movf	??___ftdiv+3,w
  8797  0D25  00CA               	movwf	___ftdiv@sign
  8798  0D26  084A               	movf	___ftdiv@sign,w
  8799  0D27  1D03               	btfss	3,2
  8800  0D28  2D30               	goto	l3048
  8801  0D29  3000               	movlw	0
  8802  0D2A  00BB               	movwf	?___ftdiv
  8803  0D2B  3000               	movlw	0
  8804  0D2C  00BC               	movwf	?___ftdiv+1
  8805  0D2D  3000               	movlw	0
  8806  0D2E  00BD               	movwf	?___ftdiv+2
  8807  0D2F  0008               	return
  8808  0D30                     l3048:	
  8809  0D30  3000               	movlw	0
  8810  0D31  00C6               	movwf	___ftdiv@f3
  8811  0D32  3000               	movlw	0
  8812  0D33  00C7               	movwf	___ftdiv@f3+1
  8813  0D34  3000               	movlw	0
  8814  0D35  00C8               	movwf	___ftdiv@f3+2
  8815  0D36  3089               	movlw	137
  8816  0D37  074A               	addwf	___ftdiv@sign,w
  8817  0D38  00C1               	movwf	??___ftdiv
  8818  0D39  0841               	movf	??___ftdiv,w
  8819  0D3A  02C9               	subwf	___ftdiv@exp,f
  8820  0D3B  083E               	movf	___ftdiv@f1,w
  8821  0D3C  00C1               	movwf	??___ftdiv
  8822  0D3D  083F               	movf	___ftdiv@f1+1,w
  8823  0D3E  00C2               	movwf	??___ftdiv+1
  8824  0D3F  0840               	movf	___ftdiv@f1+2,w
  8825  0D40  00C3               	movwf	??___ftdiv+2
  8826  0D41  3010               	movlw	16
  8827  0D42                     u3315:	
  8828  0D42  36C3               	lsrf	??___ftdiv+2,f
  8829  0D43  0CC2               	rrf	??___ftdiv+1,f
  8830  0D44  0CC1               	rrf	??___ftdiv,f
  8831  0D45  0B89               	decfsz	9,f
  8832  0D46  2D42               	goto	u3315
  8833  0D47  0841               	movf	??___ftdiv,w
  8834  0D48  00C4               	movwf	??___ftdiv+3
  8835  0D49  0844               	movf	??___ftdiv+3,w
  8836  0D4A  00CA               	movwf	___ftdiv@sign
  8837  0D4B  083B               	movf	___ftdiv@f2,w
  8838  0D4C  00C1               	movwf	??___ftdiv
  8839  0D4D  083C               	movf	___ftdiv@f2+1,w
  8840  0D4E  00C2               	movwf	??___ftdiv+1
  8841  0D4F  083D               	movf	___ftdiv@f2+2,w
  8842  0D50  00C3               	movwf	??___ftdiv+2
  8843  0D51  3010               	movlw	16
  8844  0D52                     u3325:	
  8845  0D52  36C3               	lsrf	??___ftdiv+2,f
  8846  0D53  0CC2               	rrf	??___ftdiv+1,f
  8847  0D54  0CC1               	rrf	??___ftdiv,f
  8848  0D55  0B89               	decfsz	9,f
  8849  0D56  2D52               	goto	u3325
  8850  0D57  0841               	movf	??___ftdiv,w
  8851  0D58  00C4               	movwf	??___ftdiv+3
  8852  0D59  0844               	movf	??___ftdiv+3,w
  8853  0D5A  06CA               	xorwf	___ftdiv@sign,f
  8854  0D5B  3080               	movlw	128
  8855  0D5C  00C1               	movwf	??___ftdiv
  8856  0D5D  0841               	movf	??___ftdiv,w
  8857  0D5E  05CA               	andwf	___ftdiv@sign,f
  8858  0D5F  17BF               	bsf	___ftdiv@f1+1,7
  8859  0D60  30FF               	movlw	255
  8860  0D61  05BE               	andwf	___ftdiv@f1,f
  8861  0D62  30FF               	movlw	255
  8862  0D63  05BF               	andwf	___ftdiv@f1+1,f
  8863  0D64  3000               	movlw	0
  8864  0D65  05C0               	andwf	___ftdiv@f1+2,f
  8865  0D66  17BC               	bsf	___ftdiv@f2+1,7
  8866  0D67  30FF               	movlw	255
  8867  0D68  05BB               	andwf	___ftdiv@f2,f
  8868  0D69  30FF               	movlw	255
  8869  0D6A  05BC               	andwf	___ftdiv@f2+1,f
  8870  0D6B  3000               	movlw	0
  8871  0D6C  05BD               	andwf	___ftdiv@f2+2,f
  8872  0D6D  3018               	movlw	24
  8873  0D6E  00C1               	movwf	??___ftdiv
  8874  0D6F  0841               	movf	??___ftdiv,w
  8875  0D70  00C5               	movwf	___ftdiv@cntr
  8876  0D71                     l3062:	
  8877  0D71  3001               	movlw	1
  8878  0D72                     u3335:	
  8879  0D72  35C6               	lslf	___ftdiv@f3,f
  8880  0D73  0DC7               	rlf	___ftdiv@f3+1,f
  8881  0D74  0DC8               	rlf	___ftdiv@f3+2,f
  8882  0D75  0B89               	decfsz	9,f
  8883  0D76  2D72               	goto	u3335
  8884  0D77  083D               	movf	___ftdiv@f2+2,w
  8885  0D78  0240               	subwf	___ftdiv@f1+2,w
  8886  0D79  1D03               	skipz
  8887  0D7A  2D81               	goto	u3345
  8888  0D7B  083C               	movf	___ftdiv@f2+1,w
  8889  0D7C  023F               	subwf	___ftdiv@f1+1,w
  8890  0D7D  1D03               	skipz
  8891  0D7E  2D81               	goto	u3345
  8892  0D7F  083B               	movf	___ftdiv@f2,w
  8893  0D80  023E               	subwf	___ftdiv@f1,w
  8894  0D81                     u3345:	
  8895  0D81  1C03               	skipc
  8896  0D82  2D8A               	goto	l3070
  8897  0D83  083B               	movf	___ftdiv@f2,w
  8898  0D84  02BE               	subwf	___ftdiv@f1,f
  8899  0D85  083C               	movf	___ftdiv@f2+1,w
  8900  0D86  3BBF               	subwfb	___ftdiv@f1+1,f
  8901  0D87  083D               	movf	___ftdiv@f2+2,w
  8902  0D88  3BC0               	subwfb	___ftdiv@f1+2,f
  8903  0D89  1446               	bsf	___ftdiv@f3,0
  8904  0D8A                     l3070:	
  8905  0D8A  3001               	movlw	1
  8906  0D8B                     u3355:	
  8907  0D8B  35BE               	lslf	___ftdiv@f1,f
  8908  0D8C  0DBF               	rlf	___ftdiv@f1+1,f
  8909  0D8D  0DC0               	rlf	___ftdiv@f1+2,f
  8910  0D8E  0B89               	decfsz	9,f
  8911  0D8F  2D8B               	goto	u3355
  8912  0D90  3001               	movlw	1
  8913  0D91  02C5               	subwf	___ftdiv@cntr,f
  8914  0D92  1D03               	btfss	3,2
  8915  0D93  2D71               	goto	l3062
  8916  0D94  0846               	movf	___ftdiv@f3,w
  8917  0D95  00A0               	movwf	___ftpack@arg
  8918  0D96  0847               	movf	___ftdiv@f3+1,w
  8919  0D97  00A1               	movwf	___ftpack@arg+1
  8920  0D98  0848               	movf	___ftdiv@f3+2,w
  8921  0D99  00A2               	movwf	___ftpack@arg+2
  8922  0D9A  0849               	movf	___ftdiv@exp,w
  8923  0D9B  00C1               	movwf	??___ftdiv
  8924  0D9C  0841               	movf	??___ftdiv,w
  8925  0D9D  00A3               	movwf	___ftpack@exp
  8926  0D9E  084A               	movf	___ftdiv@sign,w
  8927  0D9F  00C2               	movwf	??___ftdiv+1
  8928  0DA0  0842               	movf	??___ftdiv+1,w
  8929  0DA1  00A4               	movwf	___ftpack@sign
  8930  0DA2  318A  22E2         	fcall	___ftpack
  8931  0DA4  0020               	movlb	0	; select bank0
  8932  0DA5  0820               	movf	?___ftpack,w
  8933  0DA6  00BB               	movwf	?___ftdiv
  8934  0DA7  0821               	movf	?___ftpack+1,w
  8935  0DA8  00BC               	movwf	?___ftdiv+1
  8936  0DA9  0822               	movf	?___ftpack+2,w
  8937  0DAA  00BD               	movwf	?___ftdiv+2
  8938  0DAB  0008               	return
  8939  0DAC                     __end_of___ftdiv:	
  8940                           
  8941                           	psect	text37
  8942  06EF                     __ptext37:	
  8943 ;; *************** function ___ftadd *****************
  8944 ;; Defined at:
  8945 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  8946 ;; Parameters:    Size  Location     Type
  8947 ;;  f1              3   14[BANK0 ] float 
  8948 ;;  f2              3   17[BANK0 ] float 
  8949 ;; Auto vars:     Size  Location     Type
  8950 ;;  exp1            1   26[BANK0 ] unsigned char 
  8951 ;;  exp2            1   25[BANK0 ] unsigned char 
  8952 ;;  sign            1   24[BANK0 ] unsigned char 
  8953 ;; Return value:  Size  Location     Type
  8954 ;;                  3   14[BANK0 ] float 
  8955 ;; Registers used:
  8956 ;;		wreg, status,2, status,0, pclath, cstack
  8957 ;; Tracked objects:
  8958 ;;		On entry : 0/0
  8959 ;;		On exit  : 0/0
  8960 ;;		Unchanged: 0/0
  8961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8962 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8964 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8966 ;;Total ram usage:       13 bytes
  8967 ;; Hardware stack levels used:    1
  8968 ;; Hardware stack levels required when called:    9
  8969 ;; This function calls:
  8970 ;;		___ftpack
  8971 ;; This function is called by:
  8972 ;;		_getADCValue
  8973 ;;		_loop
  8974 ;;		___ftsub
  8975 ;; This function uses a non-reentrant model
  8976 ;;
  8977                           
  8978                           
  8979                           ;psect for function ___ftadd
  8980  06EF                     ___ftadd:	
  8981                           
  8982                           ;incstack = 0
  8983                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8984  06EF  0020               	movlb	0	; select bank0
  8985  06F0  082E               	movf	___ftadd@f1,w
  8986  06F1  00B4               	movwf	??___ftadd
  8987  06F2  082F               	movf	___ftadd@f1+1,w
  8988  06F3  00B5               	movwf	??___ftadd+1
  8989  06F4  0830               	movf	___ftadd@f1+2,w
  8990  06F5  00B6               	movwf	??___ftadd+2
  8991  06F6  1003               	clrc
  8992  06F7  0D35               	rlf	??___ftadd+1,w
  8993  06F8  0D36               	rlf	??___ftadd+2,w
  8994  06F9  00B7               	movwf	??___ftadd+3
  8995  06FA  0837               	movf	??___ftadd+3,w
  8996  06FB  00BA               	movwf	___ftadd@exp1
  8997  06FC  0831               	movf	___ftadd@f2,w
  8998  06FD  00B4               	movwf	??___ftadd
  8999  06FE  0832               	movf	___ftadd@f2+1,w
  9000  06FF  00B5               	movwf	??___ftadd+1
  9001  0700  0833               	movf	___ftadd@f2+2,w
  9002  0701  00B6               	movwf	??___ftadd+2
  9003  0702  1003               	clrc
  9004  0703  0D35               	rlf	??___ftadd+1,w
  9005  0704  0D36               	rlf	??___ftadd+2,w
  9006  0705  00B7               	movwf	??___ftadd+3
  9007  0706  0837               	movf	??___ftadd+3,w
  9008  0707  00B9               	movwf	___ftadd@exp2
  9009  0708  083A               	movf	___ftadd@exp1,w
  9010  0709  1903               	btfsc	3,2
  9011  070A  2F17               	goto	l2466
  9012  070B  0839               	movf	___ftadd@exp2,w
  9013  070C  023A               	subwf	___ftadd@exp1,w
  9014  070D  1803               	skipnc
  9015  070E  2F1E               	goto	l2470
  9016  070F  033A               	decf	___ftadd@exp1,w
  9017  0710  3AFF               	xorlw	255
  9018  0711  0739               	addwf	___ftadd@exp2,w
  9019  0712  00B4               	movwf	??___ftadd
  9020  0713  3019               	movlw	25
  9021  0714  0234               	subwf	??___ftadd,w
  9022  0715  1C03               	skipc
  9023  0716  2F1E               	goto	l2470
  9024  0717                     l2466:	
  9025  0717  0831               	movf	___ftadd@f2,w
  9026  0718  00AE               	movwf	?___ftadd
  9027  0719  0832               	movf	___ftadd@f2+1,w
  9028  071A  00AF               	movwf	?___ftadd+1
  9029  071B  0833               	movf	___ftadd@f2+2,w
  9030  071C  00B0               	movwf	?___ftadd+2
  9031  071D  0008               	return
  9032  071E                     l2470:	
  9033  071E  0839               	movf	___ftadd@exp2,w
  9034  071F  1903               	btfsc	3,2
  9035  0720  0008               	return
  9036  0721  083A               	movf	___ftadd@exp1,w
  9037  0722  0239               	subwf	___ftadd@exp2,w
  9038  0723  1803               	skipnc
  9039  0724  2F2D               	goto	l2476
  9040  0725  0339               	decf	___ftadd@exp2,w
  9041  0726  3AFF               	xorlw	255
  9042  0727  073A               	addwf	___ftadd@exp1,w
  9043  0728  00B4               	movwf	??___ftadd
  9044  0729  3019               	movlw	25
  9045  072A  0234               	subwf	??___ftadd,w
  9046  072B  1803               	btfsc	3,0
  9047  072C  0008               	return
  9048  072D                     l2476:	
  9049  072D  3006               	movlw	6
  9050  072E  00B4               	movwf	??___ftadd
  9051  072F  0834               	movf	??___ftadd,w
  9052  0730  00B8               	movwf	___ftadd@sign
  9053  0731  1BB0               	btfsc	___ftadd@f1+2,7
  9054  0732  17B8               	bsf	___ftadd@sign,7
  9055  0733  1BB3               	btfsc	___ftadd@f2+2,7
  9056  0734  1738               	bsf	___ftadd@sign,6
  9057  0735  17AF               	bsf	___ftadd@f1+1,7
  9058  0736  30FF               	movlw	255
  9059  0737  05AE               	andwf	___ftadd@f1,f
  9060  0738  30FF               	movlw	255
  9061  0739  05AF               	andwf	___ftadd@f1+1,f
  9062  073A  3000               	movlw	0
  9063  073B  05B0               	andwf	___ftadd@f1+2,f
  9064  073C  17B2               	bsf	___ftadd@f2+1,7
  9065  073D  30FF               	movlw	255
  9066  073E  05B1               	andwf	___ftadd@f2,f
  9067  073F  30FF               	movlw	255
  9068  0740  05B2               	andwf	___ftadd@f2+1,f
  9069  0741  3000               	movlw	0
  9070  0742  05B3               	andwf	___ftadd@f2+2,f
  9071  0743  0839               	movf	___ftadd@exp2,w
  9072  0744  023A               	subwf	___ftadd@exp1,w
  9073  0745  1803               	skipnc
  9074  0746  2F69               	goto	l2498
  9075  0747                     l2488:	
  9076  0747  3001               	movlw	1
  9077  0748                     u2325:	
  9078  0748  35B1               	lslf	___ftadd@f2,f
  9079  0749  0DB2               	rlf	___ftadd@f2+1,f
  9080  074A  0DB3               	rlf	___ftadd@f2+2,f
  9081  074B  0B89               	decfsz	9,f
  9082  074C  2F48               	goto	u2325
  9083  074D  3001               	movlw	1
  9084  074E  02B9               	subwf	___ftadd@exp2,f
  9085  074F  0839               	movf	___ftadd@exp2,w
  9086  0750  063A               	xorwf	___ftadd@exp1,w
  9087  0751  1903               	skipnz
  9088  0752  2F64               	goto	l2496
  9089  0753  3001               	movlw	1
  9090  0754  02B8               	subwf	___ftadd@sign,f
  9091  0755  0838               	movf	___ftadd@sign,w
  9092  0756  3907               	andlw	7
  9093  0757  1903               	btfsc	3,2
  9094  0758  2F64               	goto	l2496
  9095  0759  2F47               	goto	l2488
  9096  075A                     l2494:	
  9097  075A  3001               	movlw	1
  9098  075B                     u2355:	
  9099  075B  36B0               	lsrf	___ftadd@f1+2,f
  9100  075C  0CAF               	rrf	___ftadd@f1+1,f
  9101  075D  0CAE               	rrf	___ftadd@f1,f
  9102  075E  0B89               	decfsz	9,f
  9103  075F  2F5B               	goto	u2355
  9104  0760  3001               	movlw	1
  9105  0761  00B4               	movwf	??___ftadd
  9106  0762  0834               	movf	??___ftadd,w
  9107  0763  07BA               	addwf	___ftadd@exp1,f
  9108  0764                     l2496:	
  9109  0764  083A               	movf	___ftadd@exp1,w
  9110  0765  0639               	xorwf	___ftadd@exp2,w
  9111  0766  1903               	btfsc	3,2
  9112  0767  2F8E               	goto	l692
  9113  0768  2F5A               	goto	l2494
  9114  0769                     l2498:	
  9115  0769  083A               	movf	___ftadd@exp1,w
  9116  076A  0239               	subwf	___ftadd@exp2,w
  9117  076B  1803               	skipnc
  9118  076C  2F8E               	goto	l692
  9119  076D                     l2500:	
  9120  076D  3001               	movlw	1
  9121  076E                     u2385:	
  9122  076E  35AE               	lslf	___ftadd@f1,f
  9123  076F  0DAF               	rlf	___ftadd@f1+1,f
  9124  0770  0DB0               	rlf	___ftadd@f1+2,f
  9125  0771  0B89               	decfsz	9,f
  9126  0772  2F6E               	goto	u2385
  9127  0773  3001               	movlw	1
  9128  0774  02BA               	subwf	___ftadd@exp1,f
  9129  0775  0839               	movf	___ftadd@exp2,w
  9130  0776  063A               	xorwf	___ftadd@exp1,w
  9131  0777  1903               	skipnz
  9132  0778  2F8A               	goto	l2508
  9133  0779  3001               	movlw	1
  9134  077A  02B8               	subwf	___ftadd@sign,f
  9135  077B  0838               	movf	___ftadd@sign,w
  9136  077C  3907               	andlw	7
  9137  077D  1903               	btfsc	3,2
  9138  077E  2F8A               	goto	l2508
  9139  077F  2F6D               	goto	l2500
  9140  0780                     l2506:	
  9141  0780  3001               	movlw	1
  9142  0781                     u2415:	
  9143  0781  36B3               	lsrf	___ftadd@f2+2,f
  9144  0782  0CB2               	rrf	___ftadd@f2+1,f
  9145  0783  0CB1               	rrf	___ftadd@f2,f
  9146  0784  0B89               	decfsz	9,f
  9147  0785  2F81               	goto	u2415
  9148  0786  3001               	movlw	1
  9149  0787  00B4               	movwf	??___ftadd
  9150  0788  0834               	movf	??___ftadd,w
  9151  0789  07B9               	addwf	___ftadd@exp2,f
  9152  078A                     l2508:	
  9153  078A  083A               	movf	___ftadd@exp1,w
  9154  078B  0639               	xorwf	___ftadd@exp2,w
  9155  078C  1D03               	skipz
  9156  078D  2F80               	goto	l2506
  9157  078E                     l692:	
  9158  078E  1FB8               	btfss	___ftadd@sign,7
  9159  078F  2FA0               	goto	l2512
  9160  0790  30FF               	movlw	255
  9161  0791  06AE               	xorwf	___ftadd@f1,f
  9162  0792  30FF               	movlw	255
  9163  0793  06AF               	xorwf	___ftadd@f1+1,f
  9164  0794  30FF               	movlw	255
  9165  0795  06B0               	xorwf	___ftadd@f1+2,f
  9166  0796  3001               	movlw	1
  9167  0797  07AE               	addwf	___ftadd@f1,f
  9168  0798  3000               	movlw	0
  9169  0799  1803               	skipnc
  9170  079A  3001               	movlw	1
  9171  079B  07AF               	addwf	___ftadd@f1+1,f
  9172  079C  3000               	movlw	0
  9173  079D  1803               	skipnc
  9174  079E  3001               	movlw	1
  9175  079F  07B0               	addwf	___ftadd@f1+2,f
  9176  07A0                     l2512:	
  9177  07A0  1F38               	btfss	___ftadd@sign,6
  9178  07A1  2FB2               	goto	l2516
  9179  07A2  30FF               	movlw	255
  9180  07A3  06B1               	xorwf	___ftadd@f2,f
  9181  07A4  30FF               	movlw	255
  9182  07A5  06B2               	xorwf	___ftadd@f2+1,f
  9183  07A6  30FF               	movlw	255
  9184  07A7  06B3               	xorwf	___ftadd@f2+2,f
  9185  07A8  3001               	movlw	1
  9186  07A9  07B1               	addwf	___ftadd@f2,f
  9187  07AA  3000               	movlw	0
  9188  07AB  1803               	skipnc
  9189  07AC  3001               	movlw	1
  9190  07AD  07B2               	addwf	___ftadd@f2+1,f
  9191  07AE  3000               	movlw	0
  9192  07AF  1803               	skipnc
  9193  07B0  3001               	movlw	1
  9194  07B1  07B3               	addwf	___ftadd@f2+2,f
  9195  07B2                     l2516:	
  9196  07B2  01B8               	clrf	___ftadd@sign
  9197  07B3  082E               	movf	___ftadd@f1,w
  9198  07B4  07B1               	addwf	___ftadd@f2,f
  9199  07B5  082F               	movf	___ftadd@f1+1,w
  9200  07B6  3DB2               	addwfc	___ftadd@f2+1,f
  9201  07B7  0830               	movf	___ftadd@f1+2,w
  9202  07B8  3DB3               	addwfc	___ftadd@f2+2,f
  9203  07B9  1FB3               	btfss	___ftadd@f2+2,7
  9204  07BA  2FCD               	goto	l2526
  9205  07BB  30FF               	movlw	255
  9206  07BC  06B1               	xorwf	___ftadd@f2,f
  9207  07BD  30FF               	movlw	255
  9208  07BE  06B2               	xorwf	___ftadd@f2+1,f
  9209  07BF  30FF               	movlw	255
  9210  07C0  06B3               	xorwf	___ftadd@f2+2,f
  9211  07C1  3001               	movlw	1
  9212  07C2  07B1               	addwf	___ftadd@f2,f
  9213  07C3  3000               	movlw	0
  9214  07C4  1803               	skipnc
  9215  07C5  3001               	movlw	1
  9216  07C6  07B2               	addwf	___ftadd@f2+1,f
  9217  07C7  3000               	movlw	0
  9218  07C8  1803               	skipnc
  9219  07C9  3001               	movlw	1
  9220  07CA  07B3               	addwf	___ftadd@f2+2,f
  9221  07CB  01B8               	clrf	___ftadd@sign
  9222  07CC  0AB8               	incf	___ftadd@sign,f
  9223  07CD                     l2526:	
  9224  07CD  0831               	movf	___ftadd@f2,w
  9225  07CE  00A0               	movwf	___ftpack@arg
  9226  07CF  0832               	movf	___ftadd@f2+1,w
  9227  07D0  00A1               	movwf	___ftpack@arg+1
  9228  07D1  0833               	movf	___ftadd@f2+2,w
  9229  07D2  00A2               	movwf	___ftpack@arg+2
  9230  07D3  083A               	movf	___ftadd@exp1,w
  9231  07D4  00B4               	movwf	??___ftadd
  9232  07D5  0834               	movf	??___ftadd,w
  9233  07D6  00A3               	movwf	___ftpack@exp
  9234  07D7  0838               	movf	___ftadd@sign,w
  9235  07D8  00B5               	movwf	??___ftadd+1
  9236  07D9  0835               	movf	??___ftadd+1,w
  9237  07DA  00A4               	movwf	___ftpack@sign
  9238  07DB  318A  22E2         	fcall	___ftpack
  9239  07DD  0020               	movlb	0	; select bank0
  9240  07DE  0820               	movf	?___ftpack,w
  9241  07DF  00AE               	movwf	?___ftadd
  9242  07E0  0821               	movf	?___ftpack+1,w
  9243  07E1  00AF               	movwf	?___ftadd+1
  9244  07E2  0822               	movf	?___ftpack+2,w
  9245  07E3  00B0               	movwf	?___ftadd+2
  9246  07E4  0008               	return
  9247  07E5                     __end_of___ftadd:	
  9248                           
  9249                           	psect	text38
  9250  168C                     __ptext38:	
  9251 ;; *************** function ___awtoft *****************
  9252 ;; Defined at:
  9253 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9254 ;; Parameters:    Size  Location     Type
  9255 ;;  c               2    8[BANK0 ] int 
  9256 ;; Auto vars:     Size  Location     Type
  9257 ;;  sign            1   13[BANK0 ] unsigned char 
  9258 ;; Return value:  Size  Location     Type
  9259 ;;                  3    8[BANK0 ] float 
  9260 ;; Registers used:
  9261 ;;		wreg, status,2, status,0, pclath, cstack
  9262 ;; Tracked objects:
  9263 ;;		On entry : 0/0
  9264 ;;		On exit  : 0/0
  9265 ;;		Unchanged: 0/0
  9266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9267 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9269 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9270 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9271 ;;Total ram usage:        6 bytes
  9272 ;; Hardware stack levels used:    1
  9273 ;; Hardware stack levels required when called:    9
  9274 ;; This function calls:
  9275 ;;		___ftpack
  9276 ;; This function is called by:
  9277 ;;		_getADCValue
  9278 ;; This function uses a non-reentrant model
  9279 ;;
  9280                           
  9281                           
  9282                           ;psect for function ___awtoft
  9283  168C                     ___awtoft:	
  9284                           
  9285                           ;incstack = 0
  9286                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  9287  168C  0020               	movlb	0	; select bank0
  9288  168D  01AD               	clrf	___awtoft@sign
  9289  168E  1FA9               	btfss	___awtoft@c+1,7
  9290  168F  2E97               	goto	l3032
  9291  1690  09A8               	comf	___awtoft@c,f
  9292  1691  09A9               	comf	___awtoft@c+1,f
  9293  1692  0AA8               	incf	___awtoft@c,f
  9294  1693  1903               	skipnz
  9295  1694  0AA9               	incf	___awtoft@c+1,f
  9296  1695  01AD               	clrf	___awtoft@sign
  9297  1696  0AAD               	incf	___awtoft@sign,f
  9298  1697                     l3032:	
  9299  1697  0828               	movf	___awtoft@c,w
  9300  1698  00A0               	movwf	___ftpack@arg
  9301  1699  0829               	movf	___awtoft@c+1,w
  9302  169A  00A1               	movwf	___ftpack@arg+1
  9303  169B  01A2               	clrf	___ftpack@arg+2
  9304  169C  308E               	movlw	142
  9305  169D  00AB               	movwf	??___awtoft
  9306  169E  082B               	movf	??___awtoft,w
  9307  169F  00A3               	movwf	___ftpack@exp
  9308  16A0  082D               	movf	___awtoft@sign,w
  9309  16A1  00AC               	movwf	??___awtoft+1
  9310  16A2  082C               	movf	??___awtoft+1,w
  9311  16A3  00A4               	movwf	___ftpack@sign
  9312  16A4  318A  22E2         	fcall	___ftpack
  9313  16A6  0020               	movlb	0	; select bank0
  9314  16A7  0820               	movf	?___ftpack,w
  9315  16A8  00A8               	movwf	?___awtoft
  9316  16A9  0821               	movf	?___ftpack+1,w
  9317  16AA  00A9               	movwf	?___awtoft+1
  9318  16AB  0822               	movf	?___ftpack+2,w
  9319  16AC  00AA               	movwf	?___awtoft+2
  9320  16AD  0008               	return
  9321  16AE                     __end_of___awtoft:	
  9322                           
  9323                           	psect	text39
  9324  159B                     __ptext39:	
  9325 ;; *************** function ___lbtoft *****************
  9326 ;; Defined at:
  9327 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
  9328 ;; Parameters:    Size  Location     Type
  9329 ;;  c               1    wreg     unsigned char 
  9330 ;; Auto vars:     Size  Location     Type
  9331 ;;  c               1   15[BANK0 ] unsigned char 
  9332 ;; Return value:  Size  Location     Type
  9333 ;;                  3    8[BANK0 ] float 
  9334 ;; Registers used:
  9335 ;;		wreg, status,2, status,0, pclath, cstack
  9336 ;; Tracked objects:
  9337 ;;		On entry : 0/0
  9338 ;;		On exit  : 0/0
  9339 ;;		Unchanged: 0/0
  9340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9341 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9344 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9345 ;;Total ram usage:        8 bytes
  9346 ;; Hardware stack levels used:    1
  9347 ;; Hardware stack levels required when called:    9
  9348 ;; This function calls:
  9349 ;;		___ftpack
  9350 ;; This function is called by:
  9351 ;;		_loop
  9352 ;; This function uses a non-reentrant model
  9353 ;;
  9354                           
  9355                           
  9356                           ;psect for function ___lbtoft
  9357  159B                     ___lbtoft:	
  9358                           
  9359                           ;incstack = 0
  9360                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  9361                           ;___lbtoft@c stored from wreg
  9362  159B  0020               	movlb	0	; select bank0
  9363  159C  00AF               	movwf	___lbtoft@c
  9364  159D  082F               	movf	___lbtoft@c,w
  9365  159E  00AB               	movwf	??___lbtoft
  9366  159F  01AC               	clrf	??___lbtoft+1
  9367  15A0  01AD               	clrf	??___lbtoft+2
  9368  15A1  082B               	movf	??___lbtoft,w
  9369  15A2  00A0               	movwf	___ftpack@arg
  9370  15A3  082C               	movf	??___lbtoft+1,w
  9371  15A4  00A1               	movwf	___ftpack@arg+1
  9372  15A5  082D               	movf	??___lbtoft+2,w
  9373  15A6  00A2               	movwf	___ftpack@arg+2
  9374  15A7  308E               	movlw	142
  9375  15A8  00AE               	movwf	??___lbtoft+3
  9376  15A9  082E               	movf	??___lbtoft+3,w
  9377  15AA  00A3               	movwf	___ftpack@exp
  9378  15AB  01A4               	clrf	___ftpack@sign
  9379  15AC  318A  22E2         	fcall	___ftpack
  9380  15AE  0020               	movlb	0	; select bank0
  9381  15AF  0820               	movf	?___ftpack,w
  9382  15B0  00A8               	movwf	?___lbtoft
  9383  15B1  0821               	movf	?___ftpack+1,w
  9384  15B2  00A9               	movwf	?___lbtoft+1
  9385  15B3  0822               	movf	?___ftpack+2,w
  9386  15B4  00AA               	movwf	?___lbtoft+2
  9387  15B5  0008               	return
  9388  15B6                     __end_of___lbtoft:	
  9389                           
  9390                           	psect	text40
  9391  153A                     __ptext40:	
  9392 ;; *************** function ___lwtoft *****************
  9393 ;; Defined at:
  9394 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
  9395 ;; Parameters:    Size  Location     Type
  9396 ;;  c               2    8[BANK0 ] unsigned int 
  9397 ;; Auto vars:     Size  Location     Type
  9398 ;;		None
  9399 ;; Return value:  Size  Location     Type
  9400 ;;                  3    8[BANK0 ] float 
  9401 ;; Registers used:
  9402 ;;		wreg, status,2, status,0, pclath, cstack
  9403 ;; Tracked objects:
  9404 ;;		On entry : 0/0
  9405 ;;		On exit  : 0/0
  9406 ;;		Unchanged: 0/0
  9407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9408 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9410 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9411 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9412 ;;Total ram usage:        4 bytes
  9413 ;; Hardware stack levels used:    1
  9414 ;; Hardware stack levels required when called:    9
  9415 ;; This function calls:
  9416 ;;		___ftpack
  9417 ;; This function is called by:
  9418 ;;		_main
  9419 ;; This function uses a non-reentrant model
  9420 ;;
  9421                           
  9422                           
  9423                           ;psect for function ___lwtoft
  9424  153A                     ___lwtoft:	
  9425                           
  9426                           ;incstack = 0
  9427                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  9428  153A  0020               	movlb	0	; select bank0
  9429  153B  0828               	movf	___lwtoft@c,w
  9430  153C  00A0               	movwf	___ftpack@arg
  9431  153D  0829               	movf	___lwtoft@c+1,w
  9432  153E  00A1               	movwf	___ftpack@arg+1
  9433  153F  01A2               	clrf	___ftpack@arg+2
  9434  1540  308E               	movlw	142
  9435  1541  00AB               	movwf	??___lwtoft
  9436  1542  082B               	movf	??___lwtoft,w
  9437  1543  00A3               	movwf	___ftpack@exp
  9438  1544  01A4               	clrf	___ftpack@sign
  9439  1545  318A  22E2         	fcall	___ftpack
  9440  1547  0020               	movlb	0	; select bank0
  9441  1548  0820               	movf	?___ftpack,w
  9442  1549  00A8               	movwf	?___lwtoft
  9443  154A  0821               	movf	?___ftpack+1,w
  9444  154B  00A9               	movwf	?___lwtoft+1
  9445  154C  0822               	movf	?___ftpack+2,w
  9446  154D  00AA               	movwf	?___lwtoft+2
  9447  154E  0008               	return
  9448  154F                     __end_of___lwtoft:	
  9449                           
  9450                           	psect	text41
  9451  0AE2                     __ptext41:	
  9452 ;; *************** function ___ftpack *****************
  9453 ;; Defined at:
  9454 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  9455 ;; Parameters:    Size  Location     Type
  9456 ;;  arg             3    0[BANK0 ] unsigned um
  9457 ;;  exp             1    3[BANK0 ] unsigned char 
  9458 ;;  sign            1    4[BANK0 ] unsigned char 
  9459 ;; Auto vars:     Size  Location     Type
  9460 ;;		None
  9461 ;; Return value:  Size  Location     Type
  9462 ;;                  3    0[BANK0 ] float 
  9463 ;; Registers used:
  9464 ;;		wreg, status,2, status,0
  9465 ;; Tracked objects:
  9466 ;;		On entry : 0/0
  9467 ;;		On exit  : 0/0
  9468 ;;		Unchanged: 0/0
  9469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9470 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9472 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9473 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9474 ;;Total ram usage:        8 bytes
  9475 ;; Hardware stack levels used:    1
  9476 ;; Hardware stack levels required when called:    8
  9477 ;; This function calls:
  9478 ;;		Nothing
  9479 ;; This function is called by:
  9480 ;;		___awtoft
  9481 ;;		___ftadd
  9482 ;;		___ftdiv
  9483 ;;		___ftmul
  9484 ;;		___lbtoft
  9485 ;;		___lltoft
  9486 ;;		___lwtoft
  9487 ;; This function uses a non-reentrant model
  9488 ;;
  9489                           
  9490                           
  9491                           ;psect for function ___ftpack
  9492  0AE2                     ___ftpack:	
  9493                           
  9494                           ;incstack = 0
  9495                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9496  0AE2  0020               	movlb	0	; select bank0
  9497  0AE3  0823               	movf	___ftpack@exp,w
  9498  0AE4  1903               	btfsc	3,2
  9499  0AE5  2AEB               	goto	l2340
  9500  0AE6  0822               	movf	___ftpack@arg+2,w
  9501  0AE7  0421               	iorwf	___ftpack@arg+1,w
  9502  0AE8  0420               	iorwf	___ftpack@arg,w
  9503  0AE9  1D03               	skipz
  9504  0AEA  2AFC               	goto	l2346
  9505  0AEB                     l2340:	
  9506  0AEB  3000               	movlw	0
  9507  0AEC  00A0               	movwf	?___ftpack
  9508  0AED  3000               	movlw	0
  9509  0AEE  00A1               	movwf	?___ftpack+1
  9510  0AEF  3000               	movlw	0
  9511  0AF0  00A2               	movwf	?___ftpack+2
  9512  0AF1  0008               	return
  9513  0AF2                     l2344:	
  9514  0AF2  3001               	movlw	1
  9515  0AF3  00A5               	movwf	??___ftpack
  9516  0AF4  0825               	movf	??___ftpack,w
  9517  0AF5  07A3               	addwf	___ftpack@exp,f
  9518  0AF6  3001               	movlw	1
  9519  0AF7                     u1955:	
  9520  0AF7  36A2               	lsrf	___ftpack@arg+2,f
  9521  0AF8  0CA1               	rrf	___ftpack@arg+1,f
  9522  0AF9  0CA0               	rrf	___ftpack@arg,f
  9523  0AFA  0B89               	decfsz	9,f
  9524  0AFB  2AF7               	goto	u1955
  9525  0AFC                     l2346:	
  9526  0AFC  30FE               	movlw	254
  9527  0AFD  0522               	andwf	___ftpack@arg+2,w
  9528  0AFE  1903               	btfsc	3,2
  9529  0AFF  2B15               	goto	l661
  9530  0B00  2AF2               	goto	l2344
  9531  0B01                     l2348:	
  9532  0B01  3001               	movlw	1
  9533  0B02  00A5               	movwf	??___ftpack
  9534  0B03  0825               	movf	??___ftpack,w
  9535  0B04  07A3               	addwf	___ftpack@exp,f
  9536  0B05  3001               	movlw	1
  9537  0B06  07A0               	addwf	___ftpack@arg,f
  9538  0B07  3000               	movlw	0
  9539  0B08  1803               	skipnc
  9540  0B09  3001               	movlw	1
  9541  0B0A  07A1               	addwf	___ftpack@arg+1,f
  9542  0B0B  3000               	movlw	0
  9543  0B0C  1803               	skipnc
  9544  0B0D  3001               	movlw	1
  9545  0B0E  07A2               	addwf	___ftpack@arg+2,f
  9546  0B0F  3001               	movlw	1
  9547  0B10                     u1975:	
  9548  0B10  36A2               	lsrf	___ftpack@arg+2,f
  9549  0B11  0CA1               	rrf	___ftpack@arg+1,f
  9550  0B12  0CA0               	rrf	___ftpack@arg,f
  9551  0B13  0B89               	decfsz	9,f
  9552  0B14  2B10               	goto	u1975
  9553  0B15                     l661:	
  9554  0B15  30FF               	movlw	255
  9555  0B16  0522               	andwf	___ftpack@arg+2,w
  9556  0B17  1903               	btfsc	3,2
  9557  0B18  2B22               	goto	l2356
  9558  0B19  2B01               	goto	l2348
  9559  0B1A                     l2354:	
  9560  0B1A  3001               	movlw	1
  9561  0B1B  02A3               	subwf	___ftpack@exp,f
  9562  0B1C  3001               	movlw	1
  9563  0B1D                     u1995:	
  9564  0B1D  35A0               	lslf	___ftpack@arg,f
  9565  0B1E  0DA1               	rlf	___ftpack@arg+1,f
  9566  0B1F  0DA2               	rlf	___ftpack@arg+2,f
  9567  0B20  0B89               	decfsz	9,f
  9568  0B21  2B1D               	goto	u1995
  9569  0B22                     l2356:	
  9570  0B22  1BA1               	btfsc	___ftpack@arg+1,7
  9571  0B23  2B28               	goto	l668
  9572  0B24  3002               	movlw	2
  9573  0B25  0223               	subwf	___ftpack@exp,w
  9574  0B26  1803               	skipnc
  9575  0B27  2B1A               	goto	l2354
  9576  0B28                     l668:	
  9577  0B28  1823               	btfsc	___ftpack@exp,0
  9578  0B29  2B30               	goto	l669
  9579  0B2A  30FF               	movlw	255
  9580  0B2B  05A0               	andwf	___ftpack@arg,f
  9581  0B2C  307F               	movlw	127
  9582  0B2D  05A1               	andwf	___ftpack@arg+1,f
  9583  0B2E  30FF               	movlw	255
  9584  0B2F  05A2               	andwf	___ftpack@arg+2,f
  9585  0B30                     l669:	
  9586  0B30  1003               	clrc
  9587  0B31  0CA3               	rrf	___ftpack@exp,f
  9588  0B32  0823               	movf	___ftpack@exp,w
  9589  0B33  00A5               	movwf	??___ftpack
  9590  0B34  01A6               	clrf	??___ftpack+1
  9591  0B35  01A7               	clrf	??___ftpack+2
  9592  0B36  3010               	movlw	16
  9593  0B37                     u2035:	
  9594  0B37  35A5               	lslf	??___ftpack,f
  9595  0B38  0DA6               	rlf	??___ftpack+1,f
  9596  0B39  0DA7               	rlf	??___ftpack+2,f
  9597  0B3A  0B89               	decfsz	9,f
  9598  0B3B  2B37               	goto	u2035
  9599  0B3C  0825               	movf	??___ftpack,w
  9600  0B3D  04A0               	iorwf	___ftpack@arg,f
  9601  0B3E  0826               	movf	??___ftpack+1,w
  9602  0B3F  04A1               	iorwf	___ftpack@arg+1,f
  9603  0B40  0827               	movf	??___ftpack+2,w
  9604  0B41  04A2               	iorwf	___ftpack@arg+2,f
  9605  0B42  0824               	movf	___ftpack@sign,w
  9606  0B43  1903               	btfsc	3,2
  9607  0B44  0008               	return
  9608  0B45  17A2               	bsf	___ftpack@arg+2,7
  9609  0B46  0008               	return
  9610  0B47                     __end_of___ftpack:	
  9611                           
  9612                           	psect	intentry
  9613  0004                     __pintentry:	
  9614 ;; *************** function _ISR *****************
  9615 ;; Defined at:
  9616 ;;		line 10 in file "main.c"
  9617 ;; Parameters:    Size  Location     Type
  9618 ;;		None
  9619 ;; Auto vars:     Size  Location     Type
  9620 ;;		None
  9621 ;; Return value:  Size  Location     Type
  9622 ;;                  1    wreg      void 
  9623 ;; Registers used:
  9624 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9625 ;; Tracked objects:
  9626 ;;		On entry : 0/0
  9627 ;;		On exit  : 0/0
  9628 ;;		Unchanged: 0/0
  9629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;Total ram usage:        0 bytes
  9635 ;; Hardware stack levels used:    1
  9636 ;; Hardware stack levels required when called:    7
  9637 ;; This function calls:
  9638 ;;		_nrf24l01ISR
  9639 ;; This function is called by:
  9640 ;;		Interrupt level 1
  9641 ;; This function uses a non-reentrant model
  9642 ;;
  9643                           
  9644  0004                     _ISR:	
  9645                           
  9646                           ;incstack = 0
  9647 ;; hardware stack exceeded
  9648  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9649                           
  9650                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9651  0005  3180               	pagesel	$
  9652                           
  9653                           ;main.c: 12: if (PIR0bits.INTF){
  9654  0006  0020               	movlb	0	; select bank0
  9655  0007  1C10               	btfss	16,0	;volatile
  9656  0008  280D               	goto	i1l159
  9657                           
  9658                           ;main.c: 13: nrf24l01ISR();
  9659  0009  318A  227F         	fcall	_nrf24l01ISR
  9660                           
  9661                           ;main.c: 14: PIR0bits.INTF = 0;
  9662  000B  0020               	movlb	0	; select bank0
  9663  000C  1010               	bcf	16,0	;volatile
  9664  000D                     i1l159:	
  9665  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9666  000E  0009               	retfie
  9667  000F                     __end_of_ISR:	
  9668                           
  9669                           	psect	text43
  9670  0A7F                     __ptext43:	
  9671 ;; *************** function _nrf24l01ISR *****************
  9672 ;; Defined at:
  9673 ;;		line 233 in file "nrf24l01.c"
  9674 ;; Parameters:    Size  Location     Type
  9675 ;;		None
  9676 ;; Auto vars:     Size  Location     Type
  9677 ;;		None
  9678 ;; Return value:  Size  Location     Type
  9679 ;;                  1    wreg      void 
  9680 ;; Registers used:
  9681 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9682 ;; Tracked objects:
  9683 ;;		On entry : 0/0
  9684 ;;		On exit  : 0/0
  9685 ;;		Unchanged: 0/0
  9686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9690 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9691 ;;Total ram usage:        1 bytes
  9692 ;; Hardware stack levels used:    1
  9693 ;; Hardware stack levels required when called:    6
  9694 ;; This function calls:
  9695 ;;		i1_nrf24l01Send
  9696 ;;		i1_nrf24l01Service
  9697 ;;		i1_nrf24l01SetRXMode
  9698 ;; This function is called by:
  9699 ;;		_ISR
  9700 ;; This function uses a non-reentrant model
  9701 ;;
  9702                           
  9703                           
  9704                           ;psect for function _nrf24l01ISR
  9705  0A7F                     _nrf24l01ISR:	
  9706                           
  9707                           ;nrf24l01.c: 235: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  9708                           
  9709                           ;incstack = 0
  9710 ;; hardware stack exceeded
  9711                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9712  0A7F  01F1               	clrf	i1nrf24l01Send@data
  9713  0A80  3007               	movlw	7
  9714  0A81  3195  2580  318A   	fcall	i1_nrf24l01Send
  9715  0A84  00FD               	movwf	??_nrf24l01ISR
  9716  0A85  087D               	movf	??_nrf24l01ISR,w
  9717  0A86  0021               	movlb	1	; select bank1
  9718  0A87  00E8               	movwf	(_status^(0+128)+1)	;volatile
  9719                           
  9720                           ;nrf24l01.c: 237: if (status.statusRegister.TX_DS){
  9721  0A88  1EE8               	btfss	(_status^(0+128)+1),5	;volatile
  9722  0A89  2ABB               	goto	i1l279
  9723                           
  9724                           ;nrf24l01.c: 239: if (status.TX == statuses.TX.Sending){
  9725  0A8A  3036               	movlw	low ((_statuses+2)| (0+32768))
  9726  0A8B  0084               	movwf	4
  9727  0A8C  3098               	movlw	high ((_statuses+2)| (0+32768))
  9728  0A8D  0085               	movwf	5
  9729  0A8E  0800               	movf	0,w	;code access
  9730  0A8F  00FD               	movwf	??_nrf24l01ISR
  9731  0A90  0867               	movf	_status^(0+128),w	;volatile
  9732  0A91  390F               	andlw	15
  9733  0A92  067D               	xorwf	??_nrf24l01ISR,w
  9734  0A93  1D03               	skipz
  9735  0A94  2ABA               	goto	i1l280
  9736                           
  9737                           ;nrf24l01.c: 241: if (TXPacket.packetData.ACKRequest){
  9738  0A95  0023               	movlb	3	; select bank3
  9739  0A96  1D41               	btfss	_TXPacket^(0+384),2
  9740  0A97  2AAD               	goto	i1l4164
  9741                           
  9742                           ;nrf24l01.c: 242: status.TX = statuses.TX.PendingACK;
  9743  0A98  3037               	movlw	low ((_statuses+3)| (0+32768))
  9744  0A99  0084               	movwf	4
  9745  0A9A  3098               	movlw	high ((_statuses+3)| (0+32768))
  9746  0A9B  0085               	movwf	5
  9747  0A9C  0800               	movf	0,w	;code access
  9748  0A9D  00FD               	movwf	??_nrf24l01ISR
  9749  0A9E  0021               	movlb	1	; select bank1
  9750  0A9F  0867               	movf	_status^(0+128),w	;volatile
  9751  0AA0  067D               	xorwf	??_nrf24l01ISR,w
  9752  0AA1  39F0               	andlw	-16
  9753  0AA2  067D               	xorwf	??_nrf24l01ISR,w
  9754  0AA3  00E7               	movwf	_status^(0+128)	;volatile
  9755                           
  9756                           ;nrf24l01.c: 243: status.retryCount = 0xFF;
  9757  0AA4  30FF               	movlw	255
  9758  0AA5  00FD               	movwf	??_nrf24l01ISR
  9759  0AA6  087D               	movf	??_nrf24l01ISR,w
  9760  0AA7  00EA               	movwf	(_status^(0+128)+3)	;volatile
  9761                           
  9762                           ;nrf24l01.c: 244: nrf24l01SetRXMode(1);
  9763  0AA8  3001               	movlw	1
  9764  0AA9  3196  26AE  318A   	fcall	i1_nrf24l01SetRXMode
  9765                           
  9766                           ;nrf24l01.c: 245: }else{
  9767  0AAC  2ABB               	goto	i1l279
  9768  0AAD                     i1l4164:	
  9769                           
  9770                           ;nrf24l01.c: 246: status.TX = statuses.TX.Idle;
  9771  0AAD  3034               	movlw	low (_statuses| (0+32768))
  9772  0AAE  0084               	movwf	4
  9773  0AAF  3098               	movlw	high (_statuses| (0+32768))
  9774  0AB0  0085               	movwf	5
  9775  0AB1  0800               	movf	0,w	;code access
  9776  0AB2  00FD               	movwf	??_nrf24l01ISR
  9777  0AB3  0021               	movlb	1	; select bank1
  9778  0AB4  0867               	movf	_status^(0+128),w	;volatile
  9779  0AB5  067D               	xorwf	??_nrf24l01ISR,w
  9780  0AB6  39F0               	andlw	-16
  9781  0AB7  067D               	xorwf	??_nrf24l01ISR,w
  9782  0AB8  00E7               	movwf	_status^(0+128)	;volatile
  9783                           
  9784                           ;nrf24l01.c: 247: };nrf24l01.c: 248: }
  9785  0AB9  2ABB               	goto	i1l279
  9786  0ABA                     i1l280:	
  9787                           
  9788                           ;nrf24l01.c: 250: else{;nrf24l01.c: 251: status.statusRegister.TX_DS = 0;
  9789  0ABA  12E8               	bcf	(_status^(0+128)+1),5	;volatile
  9790  0ABB                     i1l279:	
  9791                           
  9792                           ;nrf24l01.c: 252: };nrf24l01.c: 253: };nrf24l01.c: 256: if (status.statusRegister.RX_DR)
      +                          {
  9793  0ABB  0021               	movlb	1	; select bank1
  9794  0ABC  1F68               	btfss	(_status^(0+128)+1),6	;volatile
  9795  0ABD  2AD7               	goto	i1l4170
  9796                           
  9797                           ;nrf24l01.c: 258: if (status.RX == statuses.RX.Idle){
  9798  0ABE  3038               	movlw	low ((_statuses+4)| (0+32768))
  9799  0ABF  0084               	movwf	4
  9800  0AC0  3098               	movlw	high ((_statuses+4)| (0+32768))
  9801  0AC1  0085               	movwf	5
  9802  0AC2  0800               	movf	0,w	;code access
  9803  0AC3  00FD               	movwf	??_nrf24l01ISR
  9804  0AC4  0E67               	swapf	_status^(0+128),w	;volatile
  9805  0AC5  390F               	andlw	15
  9806  0AC6  067D               	xorwf	??_nrf24l01ISR,w
  9807  0AC7  1D03               	skipz
  9808  0AC8  2AD6               	goto	i1l285
  9809                           
  9810                           ;nrf24l01.c: 259: status.RX = statuses.RX.Pending;
  9811  0AC9  3039               	movlw	low ((_statuses+5)| (0+32768))
  9812  0ACA  0084               	movwf	4
  9813  0ACB  3098               	movlw	high ((_statuses+5)| (0+32768))
  9814  0ACC  0085               	movwf	5
  9815  0ACD  0800               	movf	0,w	;code access
  9816  0ACE  00FD               	movwf	??_nrf24l01ISR
  9817  0ACF  0EFD               	swapf	??_nrf24l01ISR,f
  9818  0AD0  0867               	movf	_status^(0+128),w	;volatile
  9819  0AD1  067D               	xorwf	??_nrf24l01ISR,w
  9820  0AD2  390F               	andlw	-241
  9821  0AD3  067D               	xorwf	??_nrf24l01ISR,w
  9822  0AD4  00E7               	movwf	_status^(0+128)	;volatile
  9823                           
  9824                           ;nrf24l01.c: 260: }
  9825  0AD5  2AD7               	goto	i1l4170
  9826  0AD6                     i1l285:	
  9827                           
  9828                           ;nrf24l01.c: 262: else{;nrf24l01.c: 263: status.statusRegister.RX_DR = 0;
  9829  0AD6  1368               	bcf	(_status^(0+128)+1),6	;volatile
  9830  0AD7                     i1l4170:	
  9831                           
  9832                           ;nrf24l01.c: 264: };nrf24l01.c: 265: };nrf24l01.c: 268: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.statusRegister.byte);
  9833  0AD7  0868               	movf	(_status^(0+128)+1),w	;volatile
  9834  0AD8  00FD               	movwf	??_nrf24l01ISR
  9835  0AD9  087D               	movf	??_nrf24l01ISR,w
  9836  0ADA  00F1               	movwf	i1nrf24l01Send@data
  9837  0ADB  3027               	movlw	39
  9838  0ADC  3195  2580  318A   	fcall	i1_nrf24l01Send
  9839                           
  9840                           ;nrf24l01.c: 270: nrf24l01Service();
  9841  0ADF  3184  24A6         	fcall	i1_nrf24l01Service
  9842  0AE1  0008               	return
  9843  0AE2                     __end_of_nrf24l01ISR:	
  9844                           
  9845                           	psect	text44
  9846  04A6                     __ptext44:	
  9847 ;; *************** function i1_nrf24l01Service *****************
  9848 ;; Defined at:
  9849 ;;		line 297 in file "nrf24l01.c"
  9850 ;; Parameters:    Size  Location     Type
  9851 ;;		None
  9852 ;; Auto vars:     Size  Location     Type
  9853 ;;  nrf24l01Serv    1   12[COMMON] unsigned char 
  9854 ;;  nrf24l01Serv    1   11[COMMON] unsigned char 
  9855 ;; Return value:  Size  Location     Type
  9856 ;;                  1    wreg      void 
  9857 ;; Registers used:
  9858 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9859 ;; Tracked objects:
  9860 ;;		On entry : 0/0
  9861 ;;		On exit  : 0/0
  9862 ;;		Unchanged: 0/0
  9863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9865 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9866 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9867 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9868 ;;Total ram usage:        3 bytes
  9869 ;; Hardware stack levels used:    1
  9870 ;; Hardware stack levels required when called:    5
  9871 ;; This function calls:
  9872 ;;		_nrf24l01CEHigh
  9873 ;;		_nrf24l01CELow
  9874 ;;		_nrf24l01SPIEnd
  9875 ;;		_nrf24l01SPISend
  9876 ;;		_nrf24l01SPIStart
  9877 ;;		i1_memset
  9878 ;;		i1_nrf24l01Send
  9879 ;;		i1_nrf24l01SetRXMode
  9880 ;;		i1_nrf24l01SetTXBuffer
  9881 ;;		i1_strcmp
  9882 ;; This function is called by:
  9883 ;;		_nrf24l01ISR
  9884 ;; This function uses a non-reentrant model
  9885 ;;
  9886                           
  9887                           
  9888                           ;psect for function i1_nrf24l01Service
  9889  04A6                     i1_nrf24l01Service:	
  9890                           
  9891                           ;nrf24l01.c: 299: unsigned char i;;nrf24l01.c: 301: if (status.TX == statuses.TX.Ready){
  9892                           
  9893                           ;incstack = 0
  9894 ;; hardware stack exceeded
  9895                           ; Regs used in i1_nrf24l01Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9896  04A6  3035               	movlw	low ((_statuses+1)| (0+32768))
  9897  04A7  0084               	movwf	4
  9898  04A8  3098               	movlw	high ((_statuses+1)| (0+32768))
  9899  04A9  0085               	movwf	5
  9900  04AA  0800               	movf	0,w	;code access
  9901  04AB  00FA               	movwf	??i1_nrf24l01Service
  9902  04AC  0021               	movlb	1	; select bank1
  9903  04AD  0867               	movf	_status^(0+128),w	;volatile
  9904  04AE  390F               	andlw	15
  9905  04AF  067A               	xorwf	??i1_nrf24l01Service,w
  9906  04B0  1D03               	skipz
  9907  04B1  2CCB               	goto	i1l4076
  9908                           
  9909                           ;nrf24l01.c: 303: nrf24l01SetTXBuffer(&TXPacket);
  9910  04B2  30C1               	movlw	(low (_TXPacket| (0+256)))& (0+255)
  9911  04B3  3188  2098  3184   	fcall	i1_nrf24l01SetTXBuffer
  9912                           
  9913                           ;nrf24l01.c: 306: status.TX = statuses.TX.Sending;
  9914  04B6  3036               	movlw	low ((_statuses+2)| (0+32768))
  9915  04B7  0084               	movwf	4
  9916  04B8  3098               	movlw	high ((_statuses+2)| (0+32768))
  9917  04B9  0085               	movwf	5
  9918  04BA  0800               	movf	0,w	;code access
  9919  04BB  00FA               	movwf	??i1_nrf24l01Service
  9920  04BC  0021               	movlb	1	; select bank1
  9921  04BD  0867               	movf	_status^(0+128),w	;volatile
  9922  04BE  067A               	xorwf	??i1_nrf24l01Service,w
  9923  04BF  39F0               	andlw	-16
  9924  04C0  067A               	xorwf	??i1_nrf24l01Service,w
  9925  04C1  00E7               	movwf	_status^(0+128)	;volatile
  9926                           
  9927                           ;nrf24l01.c: 309: nrf24l01CEHigh();
  9928  04C2  3194  24DA  3184   	fcall	_nrf24l01CEHigh
  9929                           
  9930                           ;nrf24l01.c: 310: _delay((unsigned long)((12)*(32000000/4000000.0)));
  9931  04C5  3020               	movlw	32
  9932  04C6                     u451_27:	
  9933  04C6  0B89               	decfsz	9,f
  9934  04C7  2CC6               	goto	u451_27
  9935                           
  9936                           ;nrf24l01.c: 311: nrf24l01CELow();
  9937  04C8  3194  24DD  3184   	fcall	_nrf24l01CELow
  9938  04CB                     i1l4076:	
  9939                           
  9940                           ;nrf24l01.c: 312: };nrf24l01.c: 314: if (status.RX == statuses.RX.Pending){
  9941  04CB  3039               	movlw	low ((_statuses+5)| (0+32768))
  9942  04CC  0084               	movwf	4
  9943  04CD  3098               	movlw	high ((_statuses+5)| (0+32768))
  9944  04CE  0085               	movwf	5
  9945  04CF  0800               	movf	0,w	;code access
  9946  04D0  00FA               	movwf	??i1_nrf24l01Service
  9947  04D1  0021               	movlb	1	; select bank1
  9948  04D2  0E67               	swapf	_status^(0+128),w	;volatile
  9949  04D3  390F               	andlw	15
  9950  04D4  067A               	xorwf	??i1_nrf24l01Service,w
  9951  04D5  1D03               	skipz
  9952  04D6  2D47               	goto	i1l4114
  9953                           
  9954                           ;nrf24l01.c: 317: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  9955  04D7  30A1               	movlw	low (_RXPacket+1)
  9956  04D8  00F0               	movwf	i1memset@p1
  9957  04D9  3001               	movlw	high (_RXPacket+1)
  9958  04DA  00F1               	movwf	i1memset@p1+1
  9959  04DB  3000               	movlw	0
  9960  04DC  00F2               	movwf	i1memset@c
  9961  04DD  00F3               	movwf	i1memset@c+1
  9962  04DE  3020               	movlw	32
  9963  04DF  00F4               	movwf	i1memset@n
  9964  04E0  3000               	movlw	0
  9965  04E1  00F5               	movwf	i1memset@n+1
  9966  04E2  3195  254F  3184   	fcall	i1_memset
  9967                           
  9968                           ;nrf24l01.c: 318: RXPacket.packetData.byte = 0x00;
  9969  04E5  0023               	movlb	3	; select bank3
  9970  04E6  01A0               	clrf	_RXPacket^(0+384)
  9971                           
  9972                           ;nrf24l01.c: 321: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  9973  04E7  01F1               	clrf	i1nrf24l01Send@data
  9974  04E8  3060               	movlw	96
  9975  04E9  3195  2580  3184   	fcall	i1_nrf24l01Send
  9976  04EC  00FA               	movwf	??i1_nrf24l01Service
  9977  04ED  087A               	movf	??i1_nrf24l01Service,w
  9978  04EE  00FB               	movwf	i1nrf24l01Service@width
  9979                           
  9980                           ;nrf24l01.c: 324: nrf24l01CELow();
  9981  04EF  3194  24DD  3184   	fcall	_nrf24l01CELow
  9982                           
  9983                           ;nrf24l01.c: 327: nrf24l01SPIStart();
  9984  04F2  3194  24FB  3184   	fcall	_nrf24l01SPIStart
  9985                           
  9986                           ;nrf24l01.c: 330: nrf24l01SPISend((unsigned) 0b01100001);
  9987  04F5  3061               	movlw	97
  9988  04F6  3195  250C  3184   	fcall	_nrf24l01SPISend
  9989                           
  9990                           ;nrf24l01.c: 333: RXPacket.packetData.byte = nrf24l01SPISend(0);
  9991  04F9  3000               	movlw	0
  9992  04FA  3195  250C  3184   	fcall	_nrf24l01SPISend
  9993  04FD  00FA               	movwf	??i1_nrf24l01Service
  9994  04FE  087A               	movf	??i1_nrf24l01Service,w
  9995  04FF  0023               	movlb	3	; select bank3
  9996  0500  00A0               	movwf	_RXPacket^(0+384)
  9997                           
  9998                           ;nrf24l01.c: 334: width--;
  9999  0501  3001               	movlw	1
 10000  0502  02FB               	subwf	i1nrf24l01Service@width,f
 10001                           
 10002                           ;nrf24l01.c: 336: for (i = 0; (i < width) && (i < 32); i++){
 10003  0503  01FC               	clrf	i1nrf24l01Service@i
 10004  0504  2D15               	goto	i1l4100
 10005  0505                     i1l4096:	
 10006                           
 10007                           ;nrf24l01.c: 338: RXPacket.Message[i] = nrf24l01SPISend(0);
 10008  0505  3000               	movlw	0
 10009  0506  3195  250C  3184   	fcall	_nrf24l01SPISend
 10010  0509  00FA               	movwf	??i1_nrf24l01Service
 10011  050A  087C               	movf	i1nrf24l01Service@i,w
 10012  050B  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 10013  050C  0086               	movwf	6
 10014  050D  3001               	movlw	1	; select bank3/4
 10015  050E  0087               	movwf	7
 10016  050F  087A               	movf	??i1_nrf24l01Service,w
 10017  0510  0081               	movwf	1
 10018  0511  3001               	movlw	1
 10019  0512  00FA               	movwf	??i1_nrf24l01Service
 10020  0513  087A               	movf	??i1_nrf24l01Service,w
 10021  0514  07FC               	addwf	i1nrf24l01Service@i,f
 10022  0515                     i1l4100:	
 10023  0515  087B               	movf	i1nrf24l01Service@width,w
 10024  0516  027C               	subwf	i1nrf24l01Service@i,w
 10025  0517  1803               	skipnc
 10026  0518  2D1D               	goto	i1l4104
 10027  0519  3020               	movlw	32
 10028  051A  027C               	subwf	i1nrf24l01Service@i,w
 10029  051B  1C03               	skipc
 10030  051C  2D05               	goto	i1l4096
 10031  051D                     i1l4104:	
 10032                           
 10033                           ;nrf24l01.c: 339: };nrf24l01.c: 342: nrf24l01SPIEnd();
 10034  051D  3194  24EC  3184   	fcall	_nrf24l01SPIEnd
 10035                           
 10036                           ;nrf24l01.c: 345: nrf24l01CEHigh();
 10037  0520  3194  24DA  3184   	fcall	_nrf24l01CEHigh
 10038                           
 10039                           ;nrf24l01.c: 348: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
 10040  0523  0021               	movlb	1	; select bank1
 10041  0524  0C68               	rrf	(_status^(0+128)+1),w	;volatile
 10042  0525  3907               	andlw	7
 10043  0526  00FA               	movwf	??i1_nrf24l01Service
 10044  0527  0EFA               	swapf	??i1_nrf24l01Service,f
 10045  0528  0023               	movlb	3	; select bank3
 10046  0529  0820               	movf	_RXPacket^(0+384),w
 10047  052A  067A               	xorwf	??i1_nrf24l01Service,w
 10048  052B  398F               	andlw	-113
 10049  052C  067A               	xorwf	??i1_nrf24l01Service,w
 10050  052D  00A0               	movwf	_RXPacket^(0+384)
 10051                           
 10052                           ;nrf24l01.c: 351: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
 10053  052E  01F1               	clrf	i1nrf24l01Send@data
 10054  052F  3009               	movlw	9
 10055  0530  3195  2580  3184   	fcall	i1_nrf24l01Send
 10056  0533  00FA               	movwf	??i1_nrf24l01Service
 10057  0534  0023               	movlb	3	; select bank3
 10058  0535  0820               	movf	_RXPacket^(0+384),w
 10059  0536  067A               	xorwf	??i1_nrf24l01Service,w
 10060  0537  39FE               	andlw	-2
 10061  0538  067A               	xorwf	??i1_nrf24l01Service,w
 10062  0539  00A0               	movwf	_RXPacket^(0+384)
 10063                           
 10064                           ;nrf24l01.c: 353: status.RX = statuses.RX.Ready;
 10065  053A  303A               	movlw	low ((_statuses+6)| (0+32768))
 10066  053B  0084               	movwf	4
 10067  053C  3098               	movlw	high ((_statuses+6)| (0+32768))
 10068  053D  0085               	movwf	5
 10069  053E  0800               	movf	0,w	;code access
 10070  053F  00FA               	movwf	??i1_nrf24l01Service
 10071  0540  0EFA               	swapf	??i1_nrf24l01Service,f
 10072  0541  0021               	movlb	1	; select bank1
 10073  0542  0867               	movf	_status^(0+128),w	;volatile
 10074  0543  067A               	xorwf	??i1_nrf24l01Service,w
 10075  0544  390F               	andlw	-241
 10076  0545  067A               	xorwf	??i1_nrf24l01Service,w
 10077  0546  00E7               	movwf	_status^(0+128)	;volatile
 10078  0547                     i1l4114:	
 10079                           
 10080                           ;nrf24l01.c: 354: };nrf24l01.c: 356: if (status.RX == statuses.RX.Ready){
 10081  0547  303A               	movlw	low ((_statuses+6)| (0+32768))
 10082  0548  0084               	movwf	4
 10083  0549  3098               	movlw	high ((_statuses+6)| (0+32768))
 10084  054A  0085               	movwf	5
 10085  054B  0800               	movf	0,w	;code access
 10086  054C  00FA               	movwf	??i1_nrf24l01Service
 10087  054D  0E67               	swapf	_status^(0+128),w	;volatile
 10088  054E  390F               	andlw	15
 10089  054F  067A               	xorwf	??i1_nrf24l01Service,w
 10090  0550  1D03               	skipz
 10091  0551  2D89               	goto	i1l4126
 10092                           
 10093                           ;nrf24l01.c: 359: if (RXPacket.packetData.IsACK){
 10094  0552  0023               	movlb	3	; select bank3
 10095  0553  1DA0               	btfss	_RXPacket^(0+384),3
 10096  0554  2D89               	goto	i1l4126
 10097                           
 10098                           ;nrf24l01.c: 361: if (status.TX == statuses.TX.PendingACK){
 10099  0555  3037               	movlw	low ((_statuses+3)| (0+32768))
 10100  0556  0084               	movwf	4
 10101  0557  3098               	movlw	high ((_statuses+3)| (0+32768))
 10102  0558  0085               	movwf	5
 10103  0559  0800               	movf	0,w	;code access
 10104  055A  00FA               	movwf	??i1_nrf24l01Service
 10105  055B  0021               	movlb	1	; select bank1
 10106  055C  0867               	movf	_status^(0+128),w	;volatile
 10107  055D  390F               	andlw	15
 10108  055E  067A               	xorwf	??i1_nrf24l01Service,w
 10109  055F  1D03               	skipz
 10110  0560  2D89               	goto	i1l4126
 10111                           
 10112                           ;nrf24l01.c: 363: if (strcmp(RXPacket.Message, TXPacket.Message) == 0){
 10113  0561  30C2               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
 10114  0562  00FA               	movwf	??i1_nrf24l01Service
 10115  0563  087A               	movf	??i1_nrf24l01Service,w
 10116  0564  00F0               	movwf	i1strcmp@s2
 10117  0565  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 10118  0566  3196  26FC  3184   	fcall	i1_strcmp
 10119  0569  0870               	movf	?i1_strcmp,w
 10120  056A  0471               	iorwf	?i1_strcmp+1,w
 10121  056B  1D03               	btfss	3,2
 10122  056C  2D89               	goto	i1l4126
 10123                           
 10124                           ;nrf24l01.c: 364: status.TX = statuses.TX.Idle;
 10125  056D  3034               	movlw	low (_statuses| (0+32768))
 10126  056E  0084               	movwf	4
 10127  056F  3098               	movlw	high (_statuses| (0+32768))
 10128  0570  0085               	movwf	5
 10129  0571  0800               	movf	0,w	;code access
 10130  0572  00FA               	movwf	??i1_nrf24l01Service
 10131  0573  0021               	movlb	1	; select bank1
 10132  0574  0867               	movf	_status^(0+128),w	;volatile
 10133  0575  067A               	xorwf	??i1_nrf24l01Service,w
 10134  0576  39F0               	andlw	-16
 10135  0577  067A               	xorwf	??i1_nrf24l01Service,w
 10136  0578  00E7               	movwf	_status^(0+128)	;volatile
 10137                           
 10138                           ;nrf24l01.c: 365: status.RX = statuses.RX.Idle;
 10139  0579  3038               	movlw	low ((_statuses+4)| (0+32768))
 10140  057A  0084               	movwf	4
 10141  057B  3098               	movlw	high ((_statuses+4)| (0+32768))
 10142  057C  0085               	movwf	5
 10143  057D  0800               	movf	0,w	;code access
 10144  057E  00FA               	movwf	??i1_nrf24l01Service
 10145  057F  0EFA               	swapf	??i1_nrf24l01Service,f
 10146  0580  0867               	movf	_status^(0+128),w	;volatile
 10147  0581  067A               	xorwf	??i1_nrf24l01Service,w
 10148  0582  390F               	andlw	-241
 10149  0583  067A               	xorwf	??i1_nrf24l01Service,w
 10150  0584  00E7               	movwf	_status^(0+128)	;volatile
 10151                           
 10152                           ;nrf24l01.c: 367: nrf24l01SetRXMode(0);
 10153  0585  3000               	movlw	0
 10154  0586  3196  26AE  3184   	fcall	i1_nrf24l01SetRXMode
 10155  0589                     i1l4126:	
 10156                           
 10157                           ;nrf24l01.c: 369: };nrf24l01.c: 370: };nrf24l01.c: 371: };nrf24l01.c: 372: };nrf24l01.c:
      +                           374: if (status.RX == statuses.RX.Ready){
 10158  0589  303A               	movlw	low ((_statuses+6)| (0+32768))
 10159  058A  0084               	movwf	4
 10160  058B  3098               	movlw	high ((_statuses+6)| (0+32768))
 10161  058C  0085               	movwf	5
 10162  058D  0800               	movf	0,w	;code access
 10163  058E  00FA               	movwf	??i1_nrf24l01Service
 10164  058F  0021               	movlb	1	; select bank1
 10165  0590  0E67               	swapf	_status^(0+128),w	;volatile
 10166  0591  390F               	andlw	15
 10167  0592  067A               	xorwf	??i1_nrf24l01Service,w
 10168  0593  1D03               	skipz
 10169  0594  2DB4               	goto	i1l4144
 10170                           
 10171                           ;nrf24l01.c: 376: if (RXPacket.packetData.ACKRequest){
 10172  0595  0023               	movlb	3	; select bank3
 10173  0596  1D20               	btfss	_RXPacket^(0+384),2
 10174  0597  2DAB               	goto	i1l4142
 10175                           
 10176                           ;nrf24l01.c: 378: RXPacket.packetData.ACKRequest = 0;
 10177  0598  1120               	bcf	_RXPacket^(0+384),2
 10178                           
 10179                           ;nrf24l01.c: 379: RXPacket.packetData.IsACK = 1;
 10180  0599  15A0               	bsf	_RXPacket^(0+384),3
 10181                           
 10182                           ;nrf24l01.c: 380: nrf24l01SetTXBuffer(&RXPacket);
 10183  059A  30A0               	movlw	(low (_RXPacket| (0+256)))& (0+255)
 10184  059B  3188  2098  3184   	fcall	i1_nrf24l01SetTXBuffer
 10185                           
 10186                           ;nrf24l01.c: 382: nrf24l01CEHigh();
 10187  059E  3194  24DA  3184   	fcall	_nrf24l01CEHigh
 10188                           
 10189                           ;nrf24l01.c: 383: _delay((unsigned long)((12)*(32000000/4000000.0)));
 10190  05A1  3020               	movlw	32
 10191  05A2                     u452_27:	
 10192  05A2  0B89               	decfsz	9,f
 10193  05A3  2DA2               	goto	u452_27
 10194                           
 10195                           ;nrf24l01.c: 384: nrf24l01CELow();
 10196  05A4  3194  24DD  3184   	fcall	_nrf24l01CELow
 10197                           
 10198                           ;nrf24l01.c: 386: nrf24l01SetRXMode(1);
 10199  05A7  3001               	movlw	1
 10200  05A8  3196  26AE  3184   	fcall	i1_nrf24l01SetRXMode
 10201  05AB                     i1l4142:	
 10202                           
 10203                           ;nrf24l01.c: 387: };nrf24l01.c: 389: counter++;
 10204  05AB  3001               	movlw	1
 10205  05AC  0022               	movlb	2	; select bank2
 10206  05AD  07D1               	addwf	_counter^(0+256),f
 10207  05AE  3000               	movlw	0
 10208  05AF  3DD2               	addwfc	(_counter+1)^(0+256),f
 10209  05B0  3000               	movlw	0
 10210  05B1  3DD3               	addwfc	(_counter+2)^(0+256),f
 10211  05B2  3000               	movlw	0
 10212  05B3  3DD4               	addwfc	(_counter+3)^(0+256),f
 10213  05B4                     i1l4144:	
 10214                           
 10215                           ;nrf24l01.c: 390: };nrf24l01.c: 392: if (status.TX == statuses.TX.PendingACK){
 10216  05B4  3037               	movlw	low ((_statuses+3)| (0+32768))
 10217  05B5  0084               	movwf	4
 10218  05B6  3098               	movlw	high ((_statuses+3)| (0+32768))
 10219  05B7  0085               	movwf	5
 10220  05B8  0800               	movf	0,w	;code access
 10221  05B9  00FA               	movwf	??i1_nrf24l01Service
 10222  05BA  0021               	movlb	1	; select bank1
 10223  05BB  0867               	movf	_status^(0+128),w	;volatile
 10224  05BC  390F               	andlw	15
 10225  05BD  067A               	xorwf	??i1_nrf24l01Service,w
 10226  05BE  1D03               	skipz
 10227  05BF  0008               	return
 10228                           
 10229                           ;nrf24l01.c: 393: if (!status.retryCount--){
 10230  05C0  3001               	movlw	1
 10231  05C1  02EA               	subwf	(_status^(0+128)+3),f	;volatile
 10232  05C2  0A6A               	incf	(_status^(0+128)+3),w	;volatile
 10233  05C3  1D03               	btfss	3,2
 10234  05C4  0008               	return
 10235                           
 10236                           ;nrf24l01.c: 394: status.TX = statuses.TX.Ready;
 10237  05C5  3035               	movlw	low ((_statuses+1)| (0+32768))
 10238  05C6  0084               	movwf	4
 10239  05C7  3098               	movlw	high ((_statuses+1)| (0+32768))
 10240  05C8  0085               	movwf	5
 10241  05C9  0800               	movf	0,w	;code access
 10242  05CA  00FA               	movwf	??i1_nrf24l01Service
 10243  05CB  0867               	movf	_status^(0+128),w	;volatile
 10244  05CC  067A               	xorwf	??i1_nrf24l01Service,w
 10245  05CD  39F0               	andlw	-16
 10246  05CE  067A               	xorwf	??i1_nrf24l01Service,w
 10247  05CF  00E7               	movwf	_status^(0+128)	;volatile
 10248  05D0  0008               	return
 10249  05D1                     __end_ofi1_nrf24l01Service:	
 10250                           
 10251                           	psect	text45
 10252  16FC                     __ptext45:	
 10253 ;; *************** function i1_strcmp *****************
 10254 ;; Defined at:
 10255 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
 10256 ;; Parameters:    Size  Location     Type
 10257 ;;  s1              1    wreg     PTR const unsigned char 
 10258 ;;		 -> RXPacket.Message(32), RXPacket(33), 
 10259 ;;  s2              1    0[COMMON] PTR const unsigned char 
 10260 ;;		 -> TXPacket.Message(32), TXPacket(33), 
 10261 ;; Auto vars:     Size  Location     Type
 10262 ;;  s1              1    4[COMMON] PTR const unsigned char 
 10263 ;;		 -> RXPacket.Message(32), RXPacket(33), 
 10264 ;;  strcmp          1    3[COMMON] char 
 10265 ;; Return value:  Size  Location     Type
 10266 ;;                  2    0[COMMON] int 
 10267 ;; Registers used:
 10268 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10269 ;; Tracked objects:
 10270 ;;		On entry : 0/0
 10271 ;;		On exit  : 0/0
 10272 ;;		Unchanged: 0/0
 10273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10274 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10275 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10276 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10277 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10278 ;;Total ram usage:        5 bytes
 10279 ;; Hardware stack levels used:    1
 10280 ;; This function calls:
 10281 ;;		Nothing
 10282 ;; This function is called by:
 10283 ;;		i1_nrf24l01Service
 10284 ;; This function uses a non-reentrant model
 10285 ;;
 10286                           
 10287                           
 10288                           ;psect for function i1_strcmp
 10289  16FC                     i1_strcmp:	
 10290                           
 10291                           ;incstack = 0
 10292                           ; Regs used in i1_strcmp: [wreg-fsr1h+status,2+status,0]
 10293                           ;i1strcmp@s1 stored from wreg
 10294  16FC  00F4               	movwf	i1strcmp@s1
 10295  16FD  2F06               	goto	i1l3922
 10296  16FE                     i1l3918:	
 10297  16FE  3001               	movlw	1
 10298  16FF  00F2               	movwf	??i1_strcmp
 10299  1700  0872               	movf	??i1_strcmp,w
 10300  1701  07F4               	addwf	i1strcmp@s1,f
 10301  1702  3001               	movlw	1
 10302  1703  00F2               	movwf	??i1_strcmp
 10303  1704  0872               	movf	??i1_strcmp,w
 10304  1705  07F0               	addwf	i1strcmp@s2,f
 10305  1706                     i1l3922:	
 10306  1706  0874               	movf	i1strcmp@s1,w
 10307  1707  0086               	movwf	6
 10308  1708  3001               	movlw	1	; select bank2/3
 10309  1709  0087               	movwf	7
 10310  170A  0870               	movf	i1strcmp@s2,w
 10311  170B  0084               	movwf	4
 10312  170C  3001               	movlw	1	; select bank2/3
 10313  170D  0085               	movwf	5
 10314  170E  0300               	decf	0,w
 10315  170F  3AFF               	xorlw	255
 10316  1710  0701               	addwf	1,w
 10317  1711  00F2               	movwf	??i1_strcmp
 10318  1712  0872               	movf	??i1_strcmp,w
 10319  1713  00F3               	movwf	i1strcmp@r
 10320  1714  0873               	movf	i1strcmp@r,w
 10321  1715  1D03               	btfss	3,2
 10322  1716  2F1E               	goto	i1l3926
 10323  1717  0874               	movf	i1strcmp@s1,w
 10324  1718  0086               	movwf	6
 10325  1719  3001               	movlw	1	; select bank2/3
 10326  171A  0087               	movwf	7
 10327  171B  0801               	movf	1,w
 10328  171C  1D03               	btfss	3,2
 10329  171D  2EFE               	goto	i1l3918
 10330  171E                     i1l3926:	
 10331  171E  0873               	movf	i1strcmp@r,w
 10332  171F  00F0               	movwf	?i1_strcmp
 10333  1720  01F1               	clrf	?i1_strcmp+1
 10334  1721  1BF0               	btfsc	?i1_strcmp,7
 10335  1722  03F1               	decf	?i1_strcmp+1,f
 10336  1723  0008               	return
 10337  1724                     __end_ofi1_strcmp:	
 10338                           
 10339                           	psect	text46
 10340  0898                     __ptext46:	
 10341 ;; *************** function i1_nrf24l01SetTXBuffer *****************
 10342 ;; Defined at:
 10343 ;;		line 273 in file "nrf24l01.c"
 10344 ;; Parameters:    Size  Location     Type
 10345 ;;  txPacket        1    wreg     PTR struct .
 10346 ;;		 -> TXPacket(33), RXPacket(33), 
 10347 ;; Auto vars:     Size  Location     Type
 10348 ;;  txPacket        1    8[COMMON] PTR struct .
 10349 ;;		 -> TXPacket(33), RXPacket(33), 
 10350 ;;  nrf24l01SetT    1    9[COMMON] unsigned char 
 10351 ;; Return value:  Size  Location     Type
 10352 ;;                  1    wreg      void 
 10353 ;; Registers used:
 10354 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10355 ;; Tracked objects:
 10356 ;;		On entry : 0/0
 10357 ;;		On exit  : 0/0
 10358 ;;		Unchanged: 0/0
 10359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10361 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10362 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10363 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10364 ;;Total ram usage:        4 bytes
 10365 ;; Hardware stack levels used:    1
 10366 ;; Hardware stack levels required when called:    4
 10367 ;; This function calls:
 10368 ;;		_nrf24l01SPIEnd
 10369 ;;		_nrf24l01SPISend
 10370 ;;		_nrf24l01SPIStart
 10371 ;;		i1_nrf24l01SetRXMode
 10372 ;;		i1_strlen
 10373 ;; This function is called by:
 10374 ;;		i1_nrf24l01Service
 10375 ;; This function uses a non-reentrant model
 10376 ;;
 10377                           
 10378                           
 10379                           ;psect for function i1_nrf24l01SetTXBuffer
 10380  0898                     i1_nrf24l01SetTXBuffer:	
 10381                           
 10382                           ;incstack = 0
 10383 ;; hardware stack exceeded
 10384                           ; Regs used in i1_nrf24l01SetTXBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10385                           ;i1nrf24l01SetTXBuffer@txPacket stored from wreg
 10386  0898  00F8               	movwf	i1nrf24l01SetTXBuffer@txPacket
 10387                           
 10388                           ;nrf24l01.c: 275: unsigned char i;;nrf24l01.c: 278: nrf24l01SetRXMode(0);
 10389  0899  3000               	movlw	0
 10390  089A  3196  26AE  3188   	fcall	i1_nrf24l01SetRXMode
 10391                           
 10392                           ;nrf24l01.c: 281: nrf24l01SPIStart();
 10393  089D  3194  24FB  3188   	fcall	_nrf24l01SPIStart
 10394                           
 10395                           ;nrf24l01.c: 284: nrf24l01SPISend((unsigned) 0b10110000);
 10396  08A0  30B0               	movlw	176
 10397  08A1  3195  250C  3188   	fcall	_nrf24l01SPISend
 10398                           
 10399                           ;nrf24l01.c: 286: nrf24l01SPISend(txPacket->packetData.byte);
 10400  08A4  0878               	movf	i1nrf24l01SetTXBuffer@txPacket,w
 10401  08A5  0086               	movwf	6
 10402  08A6  3001               	movlw	1	; select bank2/3
 10403  08A7  0087               	movwf	7
 10404  08A8  0801               	movf	1,w
 10405  08A9  3195  250C  3188   	fcall	_nrf24l01SPISend
 10406                           
 10407                           ;nrf24l01.c: 289: for (i = 0; (i < strlen(txPacket->Message)) && (i < 32); i++) {
 10408  08AC  01F9               	clrf	i1nrf24l01SetTXBuffer@i
 10409  08AD  28BE               	goto	i1l3902
 10410  08AE                     i1l3898:	
 10411                           
 10412                           ;nrf24l01.c: 290: nrf24l01SPISend(txPacket->Message[i]);
 10413  08AE  0879               	movf	i1nrf24l01SetTXBuffer@i,w
 10414  08AF  3E01               	addlw	1
 10415  08B0  0778               	addwf	i1nrf24l01SetTXBuffer@txPacket,w
 10416  08B1  00F6               	movwf	??i1_nrf24l01SetTXBuffer
 10417  08B2  0876               	movf	??i1_nrf24l01SetTXBuffer,w
 10418  08B3  0086               	movwf	6
 10419  08B4  3001               	movlw	1	; select bank2/3
 10420  08B5  0087               	movwf	7
 10421  08B6  0801               	movf	1,w
 10422  08B7  3195  250C  3188   	fcall	_nrf24l01SPISend
 10423  08BA  3001               	movlw	1
 10424  08BB  00F6               	movwf	??i1_nrf24l01SetTXBuffer
 10425  08BC  0876               	movf	??i1_nrf24l01SetTXBuffer,w
 10426  08BD  07F9               	addwf	i1nrf24l01SetTXBuffer@i,f
 10427  08BE                     i1l3902:	
 10428  08BE  0878               	movf	i1nrf24l01SetTXBuffer@txPacket,w
 10429  08BF  3E01               	addlw	1
 10430  08C0  00F0               	movwf	i1strlen@s
 10431  08C1  3001               	movlw	1
 10432  08C2  00F1               	movwf	i1strlen@s+1
 10433  08C3  3195  25D2  3188   	fcall	i1_strlen
 10434  08C6  0879               	movf	i1nrf24l01SetTXBuffer@i,w
 10435  08C7  00F6               	movwf	??i1_nrf24l01SetTXBuffer
 10436  08C8  01F7               	clrf	??i1_nrf24l01SetTXBuffer+1
 10437  08C9  0871               	movf	?i1_strlen+1,w
 10438  08CA  0277               	subwf	??i1_nrf24l01SetTXBuffer+1,w
 10439  08CB  1D03               	skipz
 10440  08CC  28CF               	goto	u413_25
 10441  08CD  0870               	movf	?i1_strlen,w
 10442  08CE  0276               	subwf	??i1_nrf24l01SetTXBuffer,w
 10443  08CF                     u413_25:	
 10444  08CF  1803               	skipnc
 10445  08D0  28D5               	goto	i1l3906
 10446  08D1  3020               	movlw	32
 10447  08D2  0279               	subwf	i1nrf24l01SetTXBuffer@i,w
 10448  08D3  1C03               	skipc
 10449  08D4  28AE               	goto	i1l3898
 10450  08D5                     i1l3906:	
 10451                           
 10452                           ;nrf24l01.c: 291: };nrf24l01.c: 294: nrf24l01SPIEnd();
 10453  08D5  3194  24EC         	fcall	_nrf24l01SPIEnd
 10454  08D7  0008               	return
 10455  08D8                     __end_ofi1_nrf24l01SetTXBuffer:	
 10456                           
 10457                           	psect	text47
 10458  15D2                     __ptext47:	
 10459 ;; *************** function i1_strlen *****************
 10460 ;; Defined at:
 10461 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
 10462 ;; Parameters:    Size  Location     Type
 10463 ;;  s               2    0[COMMON] PTR const unsigned char 
 10464 ;;		 -> RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), RXPacket(33), 
 10465 ;;		 -> romDataMap(28), 
 10466 ;; Auto vars:     Size  Location     Type
 10467 ;;  strlen          2    4[COMMON] PTR const unsigned char 
 10468 ;;		 -> RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), RXPacket(33), 
 10469 ;;		 -> romDataMap(28), 
 10470 ;; Return value:  Size  Location     Type
 10471 ;;                  2    0[COMMON] unsigned int 
 10472 ;; Registers used:
 10473 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10474 ;; Tracked objects:
 10475 ;;		On entry : 0/0
 10476 ;;		On exit  : 0/0
 10477 ;;		Unchanged: 0/0
 10478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10479 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10480 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10481 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10482 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10483 ;;Total ram usage:        6 bytes
 10484 ;; Hardware stack levels used:    1
 10485 ;; This function calls:
 10486 ;;		Nothing
 10487 ;; This function is called by:
 10488 ;;		i1_nrf24l01SetTXBuffer
 10489 ;; This function uses a non-reentrant model
 10490 ;;
 10491                           
 10492                           
 10493                           ;psect for function i1_strlen
 10494  15D2                     i1_strlen:	
 10495                           
 10496                           ;incstack = 0
 10497                           ; Regs used in i1_strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
 10498  15D2  0871               	movf	i1strlen@s+1,w
 10499  15D3  00F5               	movwf	i1strlen@cp+1
 10500  15D4  0870               	movf	i1strlen@s,w
 10501  15D5  00F4               	movwf	i1strlen@cp
 10502  15D6                     i1l3824:	
 10503  15D6  0874               	movf	i1strlen@cp,w
 10504  15D7  0086               	movwf	6
 10505  15D8  0875               	movf	i1strlen@cp+1,w
 10506  15D9  0087               	movwf	7
 10507  15DA  0801               	movf	1,w
 10508  15DB  1903               	btfsc	3,2
 10509  15DC  2DE2               	goto	i1l3826
 10510  15DD  3001               	movlw	1
 10511  15DE  07F4               	addwf	i1strlen@cp,f
 10512  15DF  3000               	movlw	0
 10513  15E0  3DF5               	addwfc	i1strlen@cp+1,f
 10514  15E1  2DD6               	goto	i1l3824
 10515  15E2                     i1l3826:	
 10516  15E2  0970               	comf	i1strlen@s,w
 10517  15E3  00F2               	movwf	??i1_strlen
 10518  15E4  0971               	comf	i1strlen@s+1,w
 10519  15E5  00F3               	movwf	??i1_strlen+1
 10520  15E6  0AF2               	incf	??i1_strlen,f
 10521  15E7  1903               	skipnz
 10522  15E8  0AF3               	incf	??i1_strlen+1,f
 10523  15E9  0874               	movf	i1strlen@cp,w
 10524  15EA  0772               	addwf	??i1_strlen,w
 10525  15EB  00F0               	movwf	?i1_strlen
 10526  15EC  0875               	movf	i1strlen@cp+1,w
 10527  15ED  3D73               	addwfc	??i1_strlen+1,w
 10528  15EE  00F1               	movwf	?i1_strlen+1
 10529  15EF  0008               	return
 10530  15F0                     __end_ofi1_strlen:	
 10531                           
 10532                           	psect	text48
 10533  16AE                     __ptext48:	
 10534 ;; *************** function i1_nrf24l01SetRXMode *****************
 10535 ;; Defined at:
 10536 ;;		line 91 in file "nrf24l01.c"
 10537 ;; Parameters:    Size  Location     Type
 10538 ;;  rxMode          1    wreg     unsigned char 
 10539 ;; Auto vars:     Size  Location     Type
 10540 ;;  rxMode          1    5[COMMON] unsigned char 
 10541 ;; Return value:  Size  Location     Type
 10542 ;;                  1    wreg      void 
 10543 ;; Registers used:
 10544 ;;		wreg, status,2, status,0, pclath, cstack
 10545 ;; Tracked objects:
 10546 ;;		On entry : 0/0
 10547 ;;		On exit  : 0/0
 10548 ;;		Unchanged: 0/0
 10549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10553 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10554 ;;Total ram usage:        2 bytes
 10555 ;; Hardware stack levels used:    1
 10556 ;; Hardware stack levels required when called:    3
 10557 ;; This function calls:
 10558 ;;		_nrf24l01CEHigh
 10559 ;;		_nrf24l01CELow
 10560 ;;		i1_nrf24l01Send
 10561 ;; This function is called by:
 10562 ;;		_nrf24l01ISR
 10563 ;;		i1_nrf24l01SetTXBuffer
 10564 ;;		i1_nrf24l01Service
 10565 ;; This function uses a non-reentrant model
 10566 ;;
 10567                           
 10568                           
 10569                           ;psect for function i1_nrf24l01SetRXMode
 10570  16AE                     i1_nrf24l01SetRXMode:	
 10571                           
 10572                           ;incstack = 0
 10573                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
 10574                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
 10575  16AE  00F5               	movwf	i1nrf24l01SetRXMode@rxMode
 10576                           
 10577                           ;nrf24l01.c: 111: if (status.configRegister.PRIM_RX != rxMode){
 10578  16AF  0021               	movlb	1	; select bank1
 10579  16B0  0869               	movf	(_status^(0+128)+2),w	;volatile
 10580  16B1  3901               	andlw	1
 10581  16B2  0675               	xorwf	i1nrf24l01SetRXMode@rxMode,w
 10582  16B3  1903               	skipnz
 10583  16B4  0008               	return
 10584                           
 10585                           ;nrf24l01.c: 114: nrf24l01CELow();
 10586  16B5  3194  24DD  3196   	fcall	_nrf24l01CELow
 10587                           
 10588                           ;nrf24l01.c: 118: status.configRegister.PRIM_RX = rxMode;
 10589  16B8  0C75               	rrf	i1nrf24l01SetRXMode@rxMode,w
 10590  16B9  0021               	movlb	1	; select bank1
 10591  16BA  1C03               	skipc
 10592  16BB  1069               	bcf	(_status^(0+128)+2),0	;volatile
 10593  16BC  1803               	skipnc
 10594  16BD  1469               	bsf	(_status^(0+128)+2),0	;volatile
 10595                           
 10596                           ;nrf24l01.c: 119: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
 10597  16BE  0869               	movf	(_status^(0+128)+2),w	;volatile
 10598  16BF  00F4               	movwf	??i1_nrf24l01SetRXMode
 10599  16C0  0874               	movf	??i1_nrf24l01SetRXMode,w
 10600  16C1  00F1               	movwf	i1nrf24l01Send@data
 10601  16C2  3020               	movlw	32
 10602  16C3  3195  2580  3196   	fcall	i1_nrf24l01Send
 10603                           
 10604                           ;nrf24l01.c: 122: _delay((unsigned long)((120)*(32000000/4000000.0)));
 10605  16C6  30C0               	movlw	192
 10606  16C7                     u453_27:	
 10607  16C7  3200               	nop2
 10608  16C8  0B89               	decfsz	9,f
 10609  16C9  2EC7               	goto	u453_27
 10610                           
 10611                           ;nrf24l01.c: 125: if (rxMode){
 10612  16CA  0875               	movf	i1nrf24l01SetRXMode@rxMode,w
 10613  16CB  1903               	btfsc	3,2
 10614  16CC  0008               	return
 10615                           
 10616                           ;nrf24l01.c: 126: nrf24l01CEHigh();
 10617  16CD  3194  24DA  3196   	fcall	_nrf24l01CEHigh
 10618                           
 10619                           ;nrf24l01.c: 127: _delay((unsigned long)((120)*(32000000/4000000.0)));
 10620  16D0  30C0               	movlw	192
 10621  16D1                     u454_27:	
 10622  16D1  3200               	nop2
 10623  16D2  0B89               	decfsz	9,f
 10624  16D3  2ED1               	goto	u454_27
 10625  16D4  0008               	return
 10626  16D5                     __end_ofi1_nrf24l01SetRXMode:	
 10627                           
 10628                           	psect	text49
 10629  1580                     __ptext49:	
 10630 ;; *************** function i1_nrf24l01Send *****************
 10631 ;; Defined at:
 10632 ;;		line 46 in file "nrf24l01.c"
 10633 ;; Parameters:    Size  Location     Type
 10634 ;;  command         1    wreg     unsigned char 
 10635 ;;  data            1    1[COMMON] unsigned char 
 10636 ;; Auto vars:     Size  Location     Type
 10637 ;;  command         1    3[COMMON] unsigned char 
 10638 ;; Return value:  Size  Location     Type
 10639 ;;                  1    wreg      unsigned char 
 10640 ;; Registers used:
 10641 ;;		wreg, status,2, status,0, pclath, cstack
 10642 ;; Tracked objects:
 10643 ;;		On entry : 0/0
 10644 ;;		On exit  : 0/0
 10645 ;;		Unchanged: 0/0
 10646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10647 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10648 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10649 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10650 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10651 ;;Total ram usage:        3 bytes
 10652 ;; Hardware stack levels used:    1
 10653 ;; Hardware stack levels required when called:    2
 10654 ;; This function calls:
 10655 ;;		_enableInterrupts
 10656 ;;		_nrf24l01SPIEnd
 10657 ;;		_nrf24l01SPISend
 10658 ;;		_nrf24l01SPIStart
 10659 ;; This function is called by:
 10660 ;;		_nrf24l01ISR
 10661 ;;		i1_nrf24l01SetRXMode
 10662 ;;		i1_nrf24l01Service
 10663 ;; This function uses a non-reentrant model
 10664 ;;
 10665                           
 10666                           
 10667                           ;psect for function i1_nrf24l01Send
 10668  1580                     i1_nrf24l01Send:	
 10669                           
 10670                           ;incstack = 0
 10671                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
 10672                           ;i1nrf24l01Send@command stored from wreg
 10673  1580  00F3               	movwf	i1nrf24l01Send@command
 10674                           
 10675                           ;nrf24l01.c: 49: enableInterrupts(0);
 10676  1581  3000               	movlw	0
 10677  1582  3194  24F3  3195   	fcall	_enableInterrupts
 10678                           
 10679                           ;nrf24l01.c: 52: nrf24l01SPIStart();
 10680  1585  3194  24FB  3195   	fcall	_nrf24l01SPIStart
 10681                           
 10682                           ;nrf24l01.c: 55: nrf24l01SPISend(command);
 10683  1588  0873               	movf	i1nrf24l01Send@command,w
 10684  1589  3195  250C  3195   	fcall	_nrf24l01SPISend
 10685                           
 10686                           ;nrf24l01.c: 58: data = nrf24l01SPISend(data);
 10687  158C  0871               	movf	i1nrf24l01Send@data,w
 10688  158D  3195  250C  3195   	fcall	_nrf24l01SPISend
 10689  1590  00F2               	movwf	??i1_nrf24l01Send
 10690  1591  0872               	movf	??i1_nrf24l01Send,w
 10691  1592  00F1               	movwf	i1nrf24l01Send@data
 10692                           
 10693                           ;nrf24l01.c: 61: nrf24l01SPIEnd();
 10694  1593  3194  24EC  3195   	fcall	_nrf24l01SPIEnd
 10695                           
 10696                           ;nrf24l01.c: 64: enableInterrupts(1);
 10697  1596  3001               	movlw	1
 10698  1597  3194  24F3         	fcall	_enableInterrupts
 10699                           
 10700                           ;nrf24l01.c: 66: return data;
 10701  1599  0871               	movf	i1nrf24l01Send@data,w
 10702  159A  0008               	return
 10703  159B                     __end_ofi1_nrf24l01Send:	
 10704                           
 10705                           	psect	text50
 10706  14FB                     __ptext50:	
 10707 ;; *************** function _nrf24l01SPIStart *****************
 10708 ;; Defined at:
 10709 ;;		line 86 in file "interface.c"
 10710 ;; Parameters:    Size  Location     Type
 10711 ;;		None
 10712 ;; Auto vars:     Size  Location     Type
 10713 ;;		None
 10714 ;; Return value:  Size  Location     Type
 10715 ;;                  1    wreg      void 
 10716 ;; Registers used:
 10717 ;;		wreg, status,2, status,0, pclath, cstack
 10718 ;; Tracked objects:
 10719 ;;		On entry : 0/0
 10720 ;;		On exit  : 0/0
 10721 ;;		Unchanged: 0/0
 10722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10727 ;;Total ram usage:        0 bytes
 10728 ;; Hardware stack levels used:    1
 10729 ;; Hardware stack levels required when called:    9
 10730 ;; This function calls:
 10731 ;;		_nrf24l01CSLow
 10732 ;; This function is called by:
 10733 ;;		_nrf24l01Send
 10734 ;;		_nrf24l01SetTXPipe
 10735 ;;		_nrf24l01SetTXBuffer
 10736 ;;		_nrf24l01Service
 10737 ;;		_nrf24l01InitRegisters
 10738 ;;		i1_nrf24l01Send
 10739 ;;		i1_nrf24l01SetTXBuffer
 10740 ;;		i1_nrf24l01Service
 10741 ;; This function uses a non-reentrant model
 10742 ;;
 10743                           
 10744                           
 10745                           ;psect for function _nrf24l01SPIStart
 10746  14FB                     _nrf24l01SPIStart:	
 10747                           
 10748                           ;interface.c: 87: nrf24l01CSLow();
 10749                           
 10750                           ;incstack = 0
 10751 ;; hardware stack exceeded
 10752                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
 10753  14FB  3194  24E3  3194   	fcall	_nrf24l01CSLow
 10754                           
 10755                           ;interface.c: 88: _delay((unsigned long)((10)*(32000000/4000000.0)));
 10756  14FE  301A               	movlw	26
 10757  14FF                     u455_27:	
 10758  14FF  0B89               	decfsz	9,f
 10759  1500  2CFF               	goto	u455_27
 10760  1501  3200               	nop2
 10761  1502  0008               	return
 10762  1503                     __end_of_nrf24l01SPIStart:	
 10763                           
 10764                           	psect	text51
 10765  14E3                     __ptext51:	
 10766 ;; *************** function _nrf24l01CSLow *****************
 10767 ;; Defined at:
 10768 ;;		line 17 in file "interface.c"
 10769 ;; Parameters:    Size  Location     Type
 10770 ;;		None
 10771 ;; Auto vars:     Size  Location     Type
 10772 ;;		None
 10773 ;; Return value:  Size  Location     Type
 10774 ;;                  1    wreg      void 
 10775 ;; Registers used:
 10776 ;;		None
 10777 ;; Tracked objects:
 10778 ;;		On entry : 0/0
 10779 ;;		On exit  : 0/0
 10780 ;;		Unchanged: 0/0
 10781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10786 ;;Total ram usage:        0 bytes
 10787 ;; Hardware stack levels used:    1
 10788 ;; Hardware stack levels required when called:    8
 10789 ;; This function calls:
 10790 ;;		Nothing
 10791 ;; This function is called by:
 10792 ;;		_nrf24l01SPIStart
 10793 ;; This function uses a non-reentrant model
 10794 ;;
 10795                           
 10796                           
 10797                           ;psect for function _nrf24l01CSLow
 10798  14E3                     _nrf24l01CSLow:	
 10799                           
 10800                           ;interface.c: 18: PORTAbits.RA1 = 0;
 10801                           
 10802                           ;incstack = 0
 10803 ;; hardware stack exceeded
 10804                           ; Regs used in _nrf24l01CSLow: []
 10805  14E3  0020               	movlb	0	; select bank0
 10806  14E4  108C               	bcf	12,1	;volatile
 10807  14E5  0008               	return
 10808  14E6                     __end_of_nrf24l01CSLow:	
 10809                           
 10810                           	psect	text52
 10811  150C                     __ptext52:	
 10812 ;; *************** function _nrf24l01SPISend *****************
 10813 ;; Defined at:
 10814 ;;		line 73 in file "interface.c"
 10815 ;; Parameters:    Size  Location     Type
 10816 ;;  data            1    wreg     unsigned char 
 10817 ;; Auto vars:     Size  Location     Type
 10818 ;;  data            1    0[COMMON] unsigned char 
 10819 ;; Return value:  Size  Location     Type
 10820 ;;                  1    wreg      unsigned char 
 10821 ;; Registers used:
 10822 ;;		wreg
 10823 ;; Tracked objects:
 10824 ;;		On entry : 0/0
 10825 ;;		On exit  : 0/0
 10826 ;;		Unchanged: 0/0
 10827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10832 ;;Total ram usage:        0 bytes
 10833 ;; Hardware stack levels used:    1
 10834 ;; Hardware stack levels required when called:    8
 10835 ;; This function calls:
 10836 ;;		Nothing
 10837 ;; This function is called by:
 10838 ;;		_nrf24l01Send
 10839 ;;		_nrf24l01SetTXPipe
 10840 ;;		_nrf24l01SetTXBuffer
 10841 ;;		_nrf24l01Service
 10842 ;;		_nrf24l01InitRegisters
 10843 ;;		i1_nrf24l01Send
 10844 ;;		i1_nrf24l01SetTXBuffer
 10845 ;;		i1_nrf24l01Service
 10846 ;; This function uses a non-reentrant model
 10847 ;;
 10848                           
 10849                           
 10850                           ;psect for function _nrf24l01SPISend
 10851  150C                     _nrf24l01SPISend:	
 10852                           
 10853                           ;incstack = 0
 10854 ;; hardware stack exceeded
 10855                           ; Regs used in _nrf24l01SPISend: [wreg]
 10856                           ;nrf24l01SPISend@data stored from wreg
 10857  150C  00F0               	movwf	nrf24l01SPISend@data
 10858                           
 10859                           ;interface.c: 74: SSP1BUF = data;
 10860  150D  0870               	movf	nrf24l01SPISend@data,w
 10861  150E  0024               	movlb	4	; select bank4
 10862  150F  0091               	movwf	17	;volatile
 10863                           
 10864                           ;interface.c: 76: PORTCbits.RC4 = 1;
 10865  1510  0020               	movlb	0	; select bank0
 10866  1511  160E               	bsf	14,4	;volatile
 10867  1512                     i1l56:	
 10868                           ;interface.c: 78: while (!SSP1STATbits.BF){
 10869                           
 10870  1512  0024               	movlb	4	; select bank4
 10871  1513  1814               	btfsc	20,0	;volatile
 10872  1514  2D17               	goto	i1l3604
 10873                           
 10874                           ;interface.c: 79: __nop();
 10875  1515  0000               	nop
 10876  1516  2D12               	goto	i1l56
 10877  1517                     i1l3604:	
 10878                           
 10879                           ;interface.c: 80: };interface.c: 82: return SSP1BUF;
 10880  1517  0811               	movf	17,w	;volatile
 10881  1518  0008               	return
 10882  1519                     __end_of_nrf24l01SPISend:	
 10883                           
 10884                           	psect	text53
 10885  14EC                     __ptext53:	
 10886 ;; *************** function _nrf24l01SPIEnd *****************
 10887 ;; Defined at:
 10888 ;;		line 92 in file "interface.c"
 10889 ;; Parameters:    Size  Location     Type
 10890 ;;		None
 10891 ;; Auto vars:     Size  Location     Type
 10892 ;;		None
 10893 ;; Return value:  Size  Location     Type
 10894 ;;                  1    wreg      void 
 10895 ;; Registers used:
 10896 ;;		wreg, status,2, status,0, pclath, cstack
 10897 ;; Tracked objects:
 10898 ;;		On entry : 0/0
 10899 ;;		On exit  : 0/0
 10900 ;;		Unchanged: 0/0
 10901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10906 ;;Total ram usage:        0 bytes
 10907 ;; Hardware stack levels used:    1
 10908 ;; Hardware stack levels required when called:    9
 10909 ;; This function calls:
 10910 ;;		_nrf24l01CSHigh
 10911 ;; This function is called by:
 10912 ;;		_nrf24l01Send
 10913 ;;		_nrf24l01SetTXPipe
 10914 ;;		_nrf24l01SetTXBuffer
 10915 ;;		_nrf24l01Service
 10916 ;;		_nrf24l01InitRegisters
 10917 ;;		i1_nrf24l01Send
 10918 ;;		i1_nrf24l01SetTXBuffer
 10919 ;;		i1_nrf24l01Service
 10920 ;; This function uses a non-reentrant model
 10921 ;;
 10922                           
 10923                           
 10924                           ;psect for function _nrf24l01SPIEnd
 10925  14EC                     _nrf24l01SPIEnd:	
 10926                           
 10927                           ;interface.c: 93: _delay((unsigned long)((10)*(32000000/4000000.0)));
 10928                           
 10929                           ;incstack = 0
 10930 ;; hardware stack exceeded
 10931                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
 10932  14EC  301A               	movlw	26
 10933  14ED                     u456_27:	
 10934  14ED  0B89               	decfsz	9,f
 10935  14EE  2CED               	goto	u456_27
 10936  14EF  3200               	nop2
 10937                           
 10938                           ;interface.c: 94: nrf24l01CSHigh();
 10939  14F0  3194  24E0         	fcall	_nrf24l01CSHigh
 10940  14F2  0008               	return
 10941  14F3                     __end_of_nrf24l01SPIEnd:	
 10942                           
 10943                           	psect	text54
 10944  14E0                     __ptext54:	
 10945 ;; *************** function _nrf24l01CSHigh *****************
 10946 ;; Defined at:
 10947 ;;		line 22 in file "interface.c"
 10948 ;; Parameters:    Size  Location     Type
 10949 ;;		None
 10950 ;; Auto vars:     Size  Location     Type
 10951 ;;		None
 10952 ;; Return value:  Size  Location     Type
 10953 ;;                  1    wreg      void 
 10954 ;; Registers used:
 10955 ;;		None
 10956 ;; Tracked objects:
 10957 ;;		On entry : 0/0
 10958 ;;		On exit  : 0/0
 10959 ;;		Unchanged: 0/0
 10960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10965 ;;Total ram usage:        0 bytes
 10966 ;; Hardware stack levels used:    1
 10967 ;; Hardware stack levels required when called:    8
 10968 ;; This function calls:
 10969 ;;		Nothing
 10970 ;; This function is called by:
 10971 ;;		_nrf24l01SPIEnd
 10972 ;; This function uses a non-reentrant model
 10973 ;;
 10974                           
 10975                           
 10976                           ;psect for function _nrf24l01CSHigh
 10977  14E0                     _nrf24l01CSHigh:	
 10978                           
 10979                           ;interface.c: 23: PORTAbits.RA1 = 1;
 10980                           
 10981                           ;incstack = 0
 10982 ;; hardware stack exceeded
 10983                           ; Regs used in _nrf24l01CSHigh: []
 10984  14E0  0020               	movlb	0	; select bank0
 10985  14E1  148C               	bsf	12,1	;volatile
 10986  14E2  0008               	return
 10987  14E3                     __end_of_nrf24l01CSHigh:	
 10988                           
 10989                           	psect	text55
 10990  14F3                     __ptext55:	
 10991 ;; *************** function _enableInterrupts *****************
 10992 ;; Defined at:
 10993 ;;		line 98 in file "interface.c"
 10994 ;; Parameters:    Size  Location     Type
 10995 ;;  enable          1    wreg     unsigned char 
 10996 ;; Auto vars:     Size  Location     Type
 10997 ;;  enable          1    0[COMMON] unsigned char 
 10998 ;; Return value:  Size  Location     Type
 10999 ;;                  1    wreg      void 
 11000 ;; Registers used:
 11001 ;;		wreg, status,0
 11002 ;; Tracked objects:
 11003 ;;		On entry : 0/0
 11004 ;;		On exit  : 0/0
 11005 ;;		Unchanged: 0/0
 11006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11011 ;;Total ram usage:        0 bytes
 11012 ;; Hardware stack levels used:    1
 11013 ;; Hardware stack levels required when called:    8
 11014 ;; This function calls:
 11015 ;;		Nothing
 11016 ;; This function is called by:
 11017 ;;		_nrf24l01Send
 11018 ;;		i1_nrf24l01Send
 11019 ;; This function uses a non-reentrant model
 11020 ;;
 11021                           
 11022                           
 11023                           ;psect for function _enableInterrupts
 11024  14F3                     _enableInterrupts:	
 11025                           
 11026                           ;incstack = 0
 11027 ;; hardware stack exceeded
 11028                           ; Regs used in _enableInterrupts: [wreg+status,0]
 11029                           ;enableInterrupts@enable stored from wreg
 11030  14F3  00F0               	movwf	enableInterrupts@enable
 11031                           
 11032                           ;interface.c: 99: PIE0bits.INTE = enable;
 11033  14F4  0C70               	rrf	enableInterrupts@enable,w
 11034  14F5  0021               	movlb	1	; select bank1
 11035  14F6  1C03               	skipc
 11036  14F7  1010               	bcf	16,0	;volatile
 11037  14F8  1803               	skipnc
 11038  14F9  1410               	bsf	16,0	;volatile
 11039  14FA  0008               	return
 11040  14FB                     __end_of_enableInterrupts:	
 11041                           
 11042                           	psect	text56
 11043  14DD                     __ptext56:	
 11044 ;; *************** function _nrf24l01CELow *****************
 11045 ;; Defined at:
 11046 ;;		line 7 in file "interface.c"
 11047 ;; Parameters:    Size  Location     Type
 11048 ;;		None
 11049 ;; Auto vars:     Size  Location     Type
 11050 ;;		None
 11051 ;; Return value:  Size  Location     Type
 11052 ;;                  1    wreg      void 
 11053 ;; Registers used:
 11054 ;;		None
 11055 ;; Tracked objects:
 11056 ;;		On entry : 0/0
 11057 ;;		On exit  : 0/0
 11058 ;;		Unchanged: 0/0
 11059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11064 ;;Total ram usage:        0 bytes
 11065 ;; Hardware stack levels used:    1
 11066 ;; Hardware stack levels required when called:    8
 11067 ;; This function calls:
 11068 ;;		Nothing
 11069 ;; This function is called by:
 11070 ;;		_nrf24l01SetRXMode
 11071 ;;		_nrf24l01Service
 11072 ;;		_nrf24l01Init
 11073 ;;		i1_nrf24l01SetRXMode
 11074 ;;		i1_nrf24l01Service
 11075 ;; This function uses a non-reentrant model
 11076 ;;
 11077                           
 11078                           
 11079                           ;psect for function _nrf24l01CELow
 11080  14DD                     _nrf24l01CELow:	
 11081                           
 11082                           ;interface.c: 8: PORTAbits.RA0 = 0;
 11083                           
 11084                           ;incstack = 0
 11085 ;; hardware stack exceeded
 11086                           ; Regs used in _nrf24l01CELow: []
 11087  14DD  0020               	movlb	0	; select bank0
 11088  14DE  100C               	bcf	12,0	;volatile
 11089  14DF  0008               	return
 11090  14E0                     __end_of_nrf24l01CELow:	
 11091                           
 11092                           	psect	text57
 11093  14DA                     __ptext57:	
 11094 ;; *************** function _nrf24l01CEHigh *****************
 11095 ;; Defined at:
 11096 ;;		line 12 in file "interface.c"
 11097 ;; Parameters:    Size  Location     Type
 11098 ;;		None
 11099 ;; Auto vars:     Size  Location     Type
 11100 ;;		None
 11101 ;; Return value:  Size  Location     Type
 11102 ;;                  1    wreg      void 
 11103 ;; Registers used:
 11104 ;;		None
 11105 ;; Tracked objects:
 11106 ;;		On entry : 0/0
 11107 ;;		On exit  : 0/0
 11108 ;;		Unchanged: 0/0
 11109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11114 ;;Total ram usage:        0 bytes
 11115 ;; Hardware stack levels used:    1
 11116 ;; Hardware stack levels required when called:    8
 11117 ;; This function calls:
 11118 ;;		Nothing
 11119 ;; This function is called by:
 11120 ;;		_nrf24l01SetRXMode
 11121 ;;		_nrf24l01Service
 11122 ;;		_nrf24l01Init
 11123 ;;		i1_nrf24l01SetRXMode
 11124 ;;		i1_nrf24l01Service
 11125 ;; This function uses a non-reentrant model
 11126 ;;
 11127                           
 11128                           
 11129                           ;psect for function _nrf24l01CEHigh
 11130  14DA                     _nrf24l01CEHigh:	
 11131                           
 11132                           ;interface.c: 13: PORTAbits.RA0 = 1;
 11133                           
 11134                           ;incstack = 0
 11135 ;; hardware stack exceeded
 11136                           ; Regs used in _nrf24l01CEHigh: []
 11137  14DA  0020               	movlb	0	; select bank0
 11138  14DB  140C               	bsf	12,0	;volatile
 11139  14DC  0008               	return
 11140  14DD                     __end_of_nrf24l01CEHigh:	
 11141                           
 11142                           	psect	text58
 11143  154F                     __ptext58:	
 11144 ;; *************** function i1_memset *****************
 11145 ;; Defined at:
 11146 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
 11147 ;; Parameters:    Size  Location     Type
 11148 ;;  p1              2    0[COMMON] PTR void 
 11149 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 11150 ;;  c               2    2[COMMON] int 
 11151 ;;  n               2    4[COMMON] unsigned int 
 11152 ;; Auto vars:     Size  Location     Type
 11153 ;;  memset          2    6[COMMON] PTR unsigned char 
 11154 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 11155 ;; Return value:  Size  Location     Type
 11156 ;;                  1    wreg      PTR void 
 11157 ;; Registers used:
 11158 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11159 ;; Tracked objects:
 11160 ;;		On entry : 0/0
 11161 ;;		On exit  : 0/0
 11162 ;;		Unchanged: 0/0
 11163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11164 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11165 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11167 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11168 ;;Total ram usage:        8 bytes
 11169 ;; Hardware stack levels used:    1
 11170 ;; This function calls:
 11171 ;;		Nothing
 11172 ;; This function is called by:
 11173 ;;		i1_nrf24l01Service
 11174 ;; This function uses a non-reentrant model
 11175 ;;
 11176                           
 11177                           
 11178                           ;psect for function i1_memset
 11179  154F                     i1_memset:	
 11180                           
 11181                           ;incstack = 0
 11182                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 11183  154F  0871               	movf	i1memset@p1+1,w
 11184  1550  00F7               	movwf	i1memset@p+1
 11185  1551  0870               	movf	i1memset@p1,w
 11186  1552  00F6               	movwf	i1memset@p
 11187  1553                     i1l3914:	
 11188  1553  3001               	movlw	1
 11189  1554  02F4               	subwf	i1memset@n,f
 11190  1555  3000               	movlw	0
 11191  1556  3BF5               	subwfb	i1memset@n+1,f
 11192  1557  0A74               	incf	i1memset@n,w
 11193  1558  1903               	btfsc	3,2
 11194  1559  0A75               	incf	i1memset@n+1,w
 11195  155A  1903               	btfsc	3,2
 11196  155B  0008               	return
 11197  155C  0876               	movf	i1memset@p,w
 11198  155D  0086               	movwf	6
 11199  155E  0877               	movf	i1memset@p+1,w
 11200  155F  0087               	movwf	7
 11201  1560  0872               	movf	i1memset@c,w
 11202  1561  0081               	movwf	1
 11203  1562  3001               	movlw	1
 11204  1563  07F6               	addwf	i1memset@p,f
 11205  1564  3000               	movlw	0
 11206  1565  3DF7               	addwfc	i1memset@p+1,f
 11207  1566  2D53               	goto	i1l3914
 11208  1567                     __end_ofi1_memset:	
 11209                           ;	Return value of i1_memset is never used
 11210                           
 11211  007E                     btemp	set	126	;btemp
 11212  007E                     int$flags	set	126
 11213  007E                     wtemp0	set	126


Data Sizes:
    Strings     50
    Constant    56
    Data        1
    BSS         119
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     71      76
    BANK2            80     49      70
    BANK3            80      0      66
    BANK4            80      0      28
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> sendMessage@status(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), RXPacket(BANK3[33]), 
		 -> romDataMap(BANK4[28]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), RXPacket(BANK3[33]), 
		 -> romDataMap(BANK4[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 33
		 -> romDataMap.name(BANK4[16]), packet.Message(BANK0[32]), packet.Message(BANK0[32]), main@packet(BANK1[33]), 
		 -> STR_8(CODE[4]), loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK2[17]), STR_9(CODE[5]), STR_7(CODE[6]), STR_6(CODE[5]), 
		 -> STR_5(CODE[7]), STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_10(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SetTXBuffer@txPacket	PTR struct . size(1) Largest target is 33
		 -> TXPacket(BANK3[33]), RXPacket(BANK3[33]), 

    nrf24l01SendPacket@txPacket	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK4[28]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sendMessage@topic	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_9(CODE[5]), STR_7(CODE[6]), STR_6(CODE[5]), STR_5(CODE[7]), 
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sendMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK4[28]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->i1_nrf24l01Service
    i1_nrf24l01Service->i1_nrf24l01SetTXBuffer
    i1_nrf24l01SetTXBuffer->i1_nrf24l01SetRXMode
    i1_nrf24l01SetTXBuffer->i1_strlen
    i1_nrf24l01SetRXMode->i1_nrf24l01Send

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->___lwmod
    _nrf24l01GetPipe->_strlen
    _sendMessage->_ftoa
    _strcat->_ftoa
    _sleepListren->_nrf24l01SetRXMode
    _sleepListren->_sleepMs
    _nrf24l01SendPacket->_nrf24l01Service
    _nrf24l01Service->_nrf24l01SetTXBuffer
    _nrf24l01SetTXBuffer->_strlen
    _nrf24l01SetRXMode->_nrf24l01Send
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    ___lbtoft->___ftpack
    ___lwtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_loop
    _loop->_sendMessage
    _sendMessage->_strcat
    _strcat->_ftoa
    _ftoa->___fttol

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_loop

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0  112569
                                             36 BANK1     35    35      0
                           ___lwtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                  _nrf24l01SetTXPipe
                        _sendMessage
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    6576
                                             17 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               10    10      0    6576
                                              7 BANK0     10    10      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    3     3      0     332
                                              4 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SetRXPipe                                    4     4      0    2836
                                              3 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      5     5      0     762
                                              6 BANK0      5     5      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     337
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _loop                                                50    50      0   67764
                                             35 BANK1      1     1      0
                                              0 BANK2     49    49      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
                           ___lltoft
                        _getADCValue
                       _nrf24l01Send
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _sendMessage                                         10     3      7   33443
                                             25 BANK1     10     3      7
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                 _nrf24l01SendPacket
                       _sleepListren
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     614
                                             19 BANK1      6     2      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _sleepListren                                         2     0      2    3473
                                              5 BANK0      2     0      2
                  _nrf24l01SetRXMode
                            _sleepMs
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendPacket                                   4     2      2   10811
                                             13 BANK0      4     2      2
                    _nrf24l01Service
                            _sleepMs
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     462
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Service                                      3     3      0    9682
                                             10 BANK0      3     3      0
                             _memset
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXMode
                _nrf24l01SetTXBuffer
                             _strcmp
 ---------------------------------------------------------------------------------
 (4) _strcmp                                               5     3      2     216
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SetTXBuffer                                  4     4      0    3298
                                              6 BANK0      4     4      0
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     216
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SetRXMode                                    2     2      0    2781
                                              3 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (4) _nrf24l01Send                                         3     2      1    2688
                                              0 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _enableInterrupts                                    1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     532
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                14    10      4   15643
                                             79 BANK0      1     1      0
                                              6 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             36    26     10    2229
                                             24 BANK0     28    18     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     337
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     340
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    3259
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     579
                                             71 BANK0      8     4      4
                                              0 BANK1      6     6      0
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4809
                                             27 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     223
                                             55 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3694
                                             55 BANK0     16    10      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     314
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         12     9      3   12454
                                             43 BANK0     12     9      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            _sleepMs
 ---------------------------------------------------------------------------------
 (3) _sleepMs                                              5     3      2     557
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    4004
                                             27 BANK0     16    10      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    4564
                                             14 BANK0     13     7      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    3192
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    3034
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    3123
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    3012
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                 0     0      0    2852
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (11) _nrf24l01ISR                                         1     1      0    2852
                                             13 COMMON     1     1      0
                     i1_nrf24l01Send
                  i1_nrf24l01Service
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (12) i1_nrf24l01Service                                   3     3      0    2093
                                             10 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
              i1_nrf24l01SetTXBuffer
                           i1_strcmp
 ---------------------------------------------------------------------------------
 (13) i1_strcmp                                            5     3      2     168
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (13) i1_nrf24l01SetTXBuffer                               4     4      0     783
                                              6 COMMON     4     4      0
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                i1_nrf24l01SetRXMode
                           i1_strlen
 ---------------------------------------------------------------------------------
 (14) i1_strlen                                            6     4      2     134
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (12) i1_nrf24l01SetRXMode                                 2     2      0     426
                                              4 COMMON     2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (13) i1_nrf24l01Send                                      3     2      1     333
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _enableInterrupts                                    1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_memset                                            8     2      6     216
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwtoft
     ___ftpack
   _loop
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
     ___lbtoft
       ___ftpack
     ___lltoft
       ___ftpack
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleepMs
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _sendMessage
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
       _memset (ARG)
       _nrf24l01SendPacket (ARG)
         _nrf24l01Service
           _memset
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
           _nrf24l01Send
             _enableInterrupts
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
           _nrf24l01SetRXMode
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _nrf24l01SetTXBuffer
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
             _nrf24l01SetRXMode
               _nrf24l01CEHigh
               _nrf24l01CELow
               _nrf24l01Send
                 _enableInterrupts
                 _nrf24l01SPIEnd
                   _nrf24l01CSHigh
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
                   _nrf24l01CSLow
             _strlen
           _strcmp
         _sleepMs
         _strcpy
       _sleepListren (ARG)
         _nrf24l01SetRXMode
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01Send
             _enableInterrupts
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
         _sleepMs
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _sleepMs
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
       _strcpy (ARG)
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _sendMessage
     ___lbtoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleepMs
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleepMs
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleepMs
     _memset (ARG)
     _nrf24l01SendPacket (ARG)
       _nrf24l01Service
         _memset
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
         _nrf24l01SetRXMode
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01Send
             _enableInterrupts
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
         _nrf24l01SetTXBuffer
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
           _nrf24l01SetRXMode
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _strlen
         _strcmp
       _sleepMs
       _strcpy
     _sleepListren (ARG)
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _sleepMs
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
     _strcpy (ARG)
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01Service
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       i1_nrf24l01SetTXBuffer
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
         i1_nrf24l01SetRXMode
           _nrf24l01CEHigh
           _nrf24l01CELow
           i1_nrf24l01Send
             _enableInterrupts
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
         i1_strlen
       i1_strcmp
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     47      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     31      46       9       87.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      42      11       82.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      1C      13       35.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     14E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     14E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Aug 06 22:43:08 2018

                ___bmul@product 0022                     __CFG_CP$OFF 0000                              l52 17F0  
              sendMessage@value 00BD                sendMessage@topic 00BB             ___wmul@multiplicand 0022  
           nrf24l01Send@command 0022                    ___ftadd@exp1 003A                    ___ftadd@exp2 0039  
             sendMessage@packet 00B9                     __CFG_LVP$ON 0000                    ___ftadd@sign 0038  
                           l167 0E11                             l432 00DE                             l443 0181  
                           l435 00FD                             l268 1678                             l458 15BF  
                           l661 0B15                             l752 0CE1                             l668 0B28  
                           l692 078E                             l669 0B30                    __CFG_CPD$OFF 0000  
                           _ISR 0004               sendMessage@status 00C1                             wreg 0009  
          nrf24l01SetTXBuffer@i 0029                            ?_ISR 0070                    ___ftdiv@cntr 0045  
                  ___ftdiv@sign 004A                  ??_nrf24l01Init 0031                            l3032 1697  
                          l3042 0D1A                            l2402 172F                            l2340 0AEB  
                          l2500 076D                            l3140 0DE8                            l3070 0D8A  
                          l3062 0D71                            l3150 0E33                            l3142 0DD0  
                          l2406 1747                            l4030 06A9                            l4022 065F  
                          l2344 0AF2                            l2512 07A0                            l3048 0D30  
                          l2424 15B9                            l3312 17C2                            l2354 0B1A  
                          l2346 0AFC                            l2506 0780                            l3154 0E4B  
                          l3138 0DDC                            l2442 0A3D                            l2418 1526  
                          l3306 17AA                            l2356 0B22                            l2348 0B01  
                          l2516 07B2                            l2508 078A                            l3156 0E52  
                          l2452 0A6B                            l2444 0A4B                            l3308 17B6  
                          l3316 17CB                            l4204 0829                            l4036 06B8  
                          l2526 07CD                            l2470 071E                            l2542 0907  
                          l4206 084C                            l2456 0A76                            l2536 08E1  
                          l2712 00E5                            l2704 00AB                  ??_nrf24l01Send 0021  
                          l2466 0717                            l2538 08EF                            l2546 0912  
                          l2706 00DA                            l2378 156C                            l4306 0C60  
                          l2476 072D                            l2820 0E87                            l2740 015E  
                          l2708 00E0                            l2494 075A                            l2814 0E71  
                          l2750 0194                            l2734 0131                            l2718 010C  
                          l2398 1727                            l2496 0764                            l2488 0747  
                          l2568 17D6                            l2832 0EC2                            l3800 0CF3  
                          l2920 1752                            l2760 01AC                            l2752 0197  
                          l2744 016D                            l2728 012B                            l2680 005E  
                          l3640 163D                            l3712 027D                            l2584 07EA  
                          l2498 0769                            l2578 17F9                            l2922 1762  
                          l2770 01FC                            l2844 0EDE                            l2836 0ECA  
                          l3716 0285                            l3708 026C                            l2780 1531  
                          l2870 15F8                            l2766 01F1                            l2686 006E  
                          l2694 009C                            l3638 1631                            l3662 09E4  
                          l3654 09BB                            l3726 02B9                            l2792 0873  
                          l2848 0EE6                            l2768 003B                            l2776 152B  
                          l3658 09CC                            l3754 032B                            l3738 0307  
                          l3834 0801                            l2962 16DA                            l2796 0889  
                          l3756 0334                            l2964 16E6                            l3846 0F54  
                          l2966 16EE                            l3768 0C7F                            l3688 022C  
                          l3794 0CD7                            l3786 0CB8                            l3890 1684  
                          l3796 0CE5                            l3788 0CC9                            l3868 0A12  
                          STR_1 1868                    __CFG_WDTE$ON 0000                            STR_2 1868  
                          STR_3 1850                            STR_4 185A                            STR_5 183E  
                          STR_6 1855                            STR_7 1845                            STR_8 1864  
                          STR_9 185F                            u2035 0B37                            u2205 0A60  
                          u3015 0EE7                            u2215 0A6C                            u2135 15C0  
                          u3025 0EED                            u2145 15C5                            u2325 0748  
                          u2415 0781                            u2175 0A40                            u4025 0CD8  
                          u2505 0908                            u2355 075B                            u3315 0D42  
                          u2195 0A4C                            u4124 167E                            u3325 0D52  
                          u3165 1757                            u4125 167D                            u2534 17DE  
                          u3335 0D72                            u2535 17DC                            u2385 076E  
                          u3345 0D81                            u3355 0D8B                            u2475 08E4  
                          u3515 17BC                            u2805 0165                            u3525 17C3  
                          u2495 08FD                            u2815 0177                            u2825 0189  
                          u1955 0AF7                            u4507 179F                            u1975 0B10  
                          u3815 09DE                            u3495 17AD                            u4447 0BED  
                          u2945 0E93                            u2785 0154                            u4385 083A  
                          u4457 0927                            u1995 0B1D                            u2955 0EA3  
                          u4467 0936                            u4477 0227                            u2975 0ECB  
                          u4487 0322                            i1l56 1512                            u2985 0ED1  
                          u4497 1794                            u3965 0C87                            u3995 0CB9  
                          _WPUA 020C                            _WPUC 020E  __size_of_nrf24l01InterfaceInit 001E  
                  __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 162C  
                          _main 0BD1                            _ftoa 0F0E                    ___ftpack@arg 0020  
                          _loop 0358                    ___ftpack@exp 0023                            fsr0h 0005  
                          fsr1h 0007                            indf0 0000                            fsr0l 0004  
                          indf1 0001                            fsr1l 0006                            btemp 007E  
                 __CFG_BORV$LOW 0000                            start 000F           nrf24l01SetRXPipe@pipe 0025  
                 __CFG_CSWEN$ON 0000               ___bmul@multiplier 0023                   __CFG_MCLRE$ON 0000  
                  ___ftmul@cntr 0065                    ___ftmul@sign 0066     __size_of_nrf24l01SendPacket 0045  
                         ??_ISR 007E                    ___fttol@exp1 00A5            __size_of_getADCValue 00AE  
               ??_nrf24l01CELow 0070                    ___fttol@lval 00A1                 ??_nrf24l01CSLow 0070  
                         ?_main 0070                           ?_ftoa 00A6                           ?_loop 0070  
               __end_of___ftadd 07E5                           STR_10 1829                 __end_of___ftdiv 0DAC  
               __end_of___ftneg 150C                 __end_of___lldiv 0A7F                 __end_of___ftmul 0F0E  
               __end_of___llmod 091B                 __end_of___ftsub 160E                 __end_of___fttol 0D03  
                __CFG_DEBUG$OFF 0000                           i1l159 000D                           i1l280 0ABA  
               __end_of___lwmod 17D0                           i1l285 0AD6                           i1l279 0ABB  
        enableInterrupts@enable 0070                      i1memset@p1 0070                   __CFG_PWRTE$ON 0000  
         nrf24l01SetTXPipe@pipe 0026                    ___lltoft@exp 002D                   ___awtoft@sign 002D  
               __end_of_dpowers 1828                 __end_of_isdigit 1528                   ___ftpack@sign 0024  
                         ftoa@f 00A6                           ftoa@l 00AE                  __CFG_BOREN$OFF 0000  
               __end_of_sleepMs 1800                _enableInterrupts 14F3                           status 0003  
                         wtemp0 007E                 __end_of_sprintf 0202     __end_ofi1_nrf24l01SetRXMode 16D5  
              __end_ofi1_memset 1567               getADCValue@adcSum 0054                __end_ofi1_strcmp 1724  
              __end_ofi1_strlen 15F0                _nrf24l01SPIStart 14FB    __size_of_nrf24l01SetTXBuffer 0045  
               __initialization 0011          nrf24l01InitRegisters@i 002F                    __end_of_main 0C64  
                  __end_of_ftoa 1000                    __end_of_loop 04A6                ??_nrf24l01CEHigh 0070  
                    i1strcmp@s1 0074                      i1strcmp@s2 0070                          ??_main 00C4  
                        ??_ftoa 006F                   ___fttol@sign1 00A0                          ??_loop 00C3  
              ??_nrf24l01CSHigh 0070                      i1strlen@cp 0074                    ?_sendMessage 00B9  
              ??_nrf24l01SPIEnd 0070        __size_of_nrf24l01SPISend 000D                ___llmod@dividend 0032  
                        _ADRESH 009C                          _ADRESL 009B                __end_of___awtoft 16AE  
                        _ANSELA 018C                          _ANSELC 018E                __end_of___ftpack 0B47  
              __end_of___lbtoft 15B6                __end_of___lltoft 1777                          _ODCONA 028C  
      __size_of_nrf24l01GetPipe 0038                          _ODCONC 028E                          i1l4100 0515  
                        i1l4104 051D                          i1l4114 0547                          i1l4142 05AB  
                        i1l4126 0589                          i1l4144 05B4                          i1l4170 0AD7  
                        i1l3604 1517                          i1l4076 04CB                          i1l4164 0AAD  
                        i1l4096 0505                          i1l3902 08BE                          i1l3824 15D6  
                        i1l3914 1553                          i1l3826 15E2                          i1l3906 08D5  
                        i1l3922 1706                          i1l3926 171E                          i1l3918 16FE  
                        i1l3898 08AE                          _INLVLA 038C                          _INLVLC 038E  
                        u413_25 08CF                __end_of___lwtoft 154F                          u451_27 04C6  
                        u452_27 05A2                          u453_27 16C7                          u454_27 16D1  
             i1_nrf24l01Service 04A6                          u455_27 14FF                          u456_27 14ED  
            ?i1_nrf24l01Service 0070        __size_of_nrf24l01Service 0156            __size_of_nrf24l01ISR 0063  
                        ___bmul 1528                          ___ftge 085C         nrf24l01SetRXMode@rxMode 0024  
                        ___wmul 15B6             ??i1_nrf24l01Service 007A                       ??___ftadd 0034  
                __CFG_STVREN$ON 0000                       ??___ftdiv 0041                       ??___ftneg 005A  
                     ??___lldiv 0028                       ??___ftmul 005D                       ??___llmod 0036  
                     ??___ftsub 0041                       ??___fttol 006B                       ??___lwmod 0024  
          __end_of_nrf24l01Init 095E            __end_of_nrf24l01Send 166B         ??i1_nrf24l01SetTXBuffer 0076  
                        _memset 1567           _nrf24l01InitRegisters 05D1                          _status 00E7  
                        _strcat 16D5                          _strcmp 1724                          _strcpy 07E5  
                        _strlen 162C                          ftoa@cp 00B2           ___ftmul@f3_as_product 0062  
                     ??_isdigit 0020                          loop@ta 0123                          loop@vt 0120  
     i1nrf24l01SetRXMode@rxMode 0075                       ??_sleepMs 0022                       ??_sprintf 0042  
              __end_of_statuses 183E       __end_ofi1_nrf24l01Service 05D1              getADCValue@adcLoop 0051  
       __end_of__initialization 0031                      ___ftadd@f1 002E                      ___ftadd@f2 0031  
                    ___ftge@ff1 0020                      ___ftge@ff2 0023              getADCValue@channel 0053  
                    ___ftdiv@f1 003E                      ___ftdiv@f2 003B                      ___ftdiv@f3 0046  
                    ___ftneg@f1 0057                      ___awtoft@c 0028                      ___lbtoft@c 002F  
           ___bmul@multiplicand 0020                      ___ftmul@f1 0057                      ___ftmul@f2 005A  
                    ___ftsub@f1 003E                      ___ftsub@f2 003B                      ___fttol@f1 0067  
                __pcstackCOMMON 0070                    __pidataBANK1 0003                      ___lltoft@c 0028  
                    ___lwtoft@c 0028                       ?i1_memset 0070                       ?i1_strcmp 0070  
                     ?i1_strlen 0070                    sprintf@width 004F                     loop@rfSetup 012F  
                    __pbssBANK1 00E7                      __pbssBANK2 0151                      __pbssBANK3 01A0  
                    __pbssBANK4 0220               ??_nrf24l01SPISend 0070          i1nrf24l01Service@width 007B  
       __size_ofi1_nrf24l01Send 001B               ??_nrf24l01GetPipe 0026                      __pmaintext 0BD1  
                       ?___bmul 0020                         ?___ftge 0020                         ?___wmul 0020  
               __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 1777               _nrf24l01SetRXPipe 166B  
        ?_nrf24l01InitRegisters 0070                      __pintentry 0004               _nrf24l01SetTXPipe 095E  
           nrf24l01SPISend@data 0070                         ?_memset 0020               ??_nrf24l01Service 002A  
            ?_nrf24l01SetRXMode 0070                       ?___awtoft 0028                       ?___ftpack 0020  
                     ?___lbtoft 0028              ?_nrf24l01SetRXPipe 0070        __end_of_enableInterrupts 14FB  
            ?_nrf24l01SetTXPipe 0070                       ?___lltoft 0028             __CFG_RSTOSC$HFINT32 0000  
                       ?_strcat 00B3                         ?_strcmp 0020                         ?_strcpy 0020  
                       ?_strlen 0020                       ?___lwtoft 0028           __end_of_n_ADDRESS_MUL 1829  
                    ??i1_memset 0076            __size_of_sendMessage 008A             ??_nrf24l01SetRXMode 0023  
           _nrf24l01SetTXBuffer 09A2        __end_of_nrf24l01SPIStart 1503             ??_nrf24l01SetRXPipe 0023  
           ??_nrf24l01SetTXPipe 0024                      ??i1_strcmp 0072                      ??i1_strlen 0072  
                       _SSP1BUF 0211      __size_ofi1_nrf24l01Service 012B           _nrf24l01InterfaceInit 160E  
          nrf24l01Service@width 002B      __end_of_nrf24l01SendPacket 0A2C            ?_nrf24l01SetTXBuffer 0070  
                 ??_getADCValue 004E           __size_of_nrf24l01Init 0043           __size_of_nrf24l01Send 0020  
     __end_of_nrf24l01SetRXMode 17A3       __end_of_nrf24l01SetRXPipe 168C                   ?_sleepListren 0025  
     __end_of_nrf24l01SetTXPipe 09A2                 __size_of___bmul 0012                 __size_of___ftge 003C  
                       ___ftadd 06EF                         ___ftdiv 0D03                         ___ftneg 1503  
                       ___lldiv 0A2C                 __size_of___wmul 001C                         ___ftmul 0E5A  
                       ___llmod 08D8                         ___ftsub 15F0                         ___fttol 0C64  
                       ___lwmod 17A3                      ??___awtoft 002B                      ??___ftpack 0025  
                    ??___lbtoft 002B           __end_of_nrf24l01CELow 14E0                 __size_of_memset 0019  
         __end_of_nrf24l01CSLow 14E6                      ??___lltoft 002C                         __ptext1 091B  
                       __ptext2 160E                         __ptext3 05D1                         __ptext4 095E  
                       __ptext5 1528                         __ptext6 166B                         __ptext7 0824  
                       __ptext8 17A3                         __ptext9 0358                      ??___lwtoft 002B  
               __size_of_strcat 0027                 __size_of_strcmp 0029                 __size_of_strcpy 001B  
               __size_of_strlen 001F                    __size_of_ISR 000B                         _counter 0151  
                       _dpowers 1800                         _isdigit 1519                         _romData 00EB  
                       _sleepMs 17D0                         _sprintf 0035                         clrloop0 14E7  
          end_of_initialization 0031                         ftoa@buf 0155                         ftoa@rem 00AA  
                  _nrf24l01Init 091B                    _nrf24l01Send 164B                      _romDataMap 0220  
                       memset@c 0022                         memset@n 0024                         memset@p 0026  
              nrf24l01GetPipe@i 002A           ??_nrf24l01SetTXBuffer 0026                 ___lldiv@divisor 0020  
               ___lldiv@counter 002D                  ??_sleepListren 0027    __size_ofi1_nrf24l01SetRXMode 0027  
   nrf24l01SetTXBuffer@txPacket 0028                         strcmp@r 0023           i1nrf24l01Send@command 0073  
                       strlen@s 0020             __end_of_getADCValue 0E5A                       _PORTAbits 000C  
                     _PORTCbits 000E  __size_ofi1_nrf24l01SetTXBuffer 0040   __end_ofi1_nrf24l01SetTXBuffer 08D8  
                     _TRISAbits 008C                       _TRISCbits 008E                nrf24l01Send@data 0020  
              __CFG_FEXTOSC$OFF 0000                   ??_nrf24l01ISR 007D          ?_nrf24l01InterfaceInit 0070  
                   ___ftdiv@exp 0049                  i1_nrf24l01Send 1580                      main@packet 00C6  
              nrf24l01Service@i 002C      __size_of_nrf24l01SetRXMode 002C      __size_of_nrf24l01SetRXPipe 0021  
                   ___ftmul@exp 0061      __size_of_nrf24l01SetTXPipe 0044                  __end_of___bmul 153A  
                __end_of___ftge 0898                  __end_of___wmul 15D2                       i1memset@c 0072  
                     i1memset@n 0074                       i1memset@p 0076                  __end_of_memset 1580  
                __end_of_strcat 16FC                  __end_of_strcmp 174D                  __end_of_strcpy 0800  
                __end_of_strlen 164B             start_initialization 0011                 _nrf24l01SPISend 150C  
                   __end_of_ISR 000F                      ftoa@status 00A9               __size_ofi1_memset 0018  
     nrf24l01SetRXPipe@enRXAddr 0026                 _nrf24l01GetPipe 0824         __size_of_nrf24l01CEHigh 0003  
                     i1strcmp@r 0073                       i1strlen@s 0070               __size_ofi1_strcmp 0028  
             __size_ofi1_strlen 001E         __size_of_nrf24l01CSHigh 0003          __end_ofi1_nrf24l01Send 159B  
       __size_of_nrf24l01SPIEnd 0007                 ___llmod@divisor 002E                 ___llmod@counter 0037  
               _nrf24l01Service 0202         ??_nrf24l01InitRegisters 0027                __CFG_LPBOREN$OFF 0000  
                   _getADCValue 0DAC                        ??___bmul 0021                        ??___ftge 0026  
           __end_of_nrf24l01ISR 0AE2                        ??___wmul 0024                     __pdataBANK1 00EB  
                      ??_memset 0026               ?_enableInterrupts 0070                        ??_strcat 0070  
                      ??_strcmp 0022                        ??_strcpy 0024                        ??_strlen 0022  
             __size_of___awtoft 0022               __size_of___ftpack 0065               __size_of___lbtoft 001B  
            ??_enableInterrupts 0070               __size_of___lltoft 002A                       ___latbits 0002  
             __size_of___lwtoft 0015                   __pcstackBANK0 0020                   __pcstackBANK1 00A0  
                 __pcstackBANK2 0120            __end_of_sleepListren 0824               ?_nrf24l01SPIStart 0070  
                  _isdigit$1728 0020              ??_nrf24l01SPIStart 0070                 ?i1_nrf24l01Send 0071  
                   sprintf@flag 0048                     sprintf@prec 0051                      loop@packet 0130  
           nrf24l01GetPipe@name 0029             nrf24l01GetPipe@pipe 0028                        ?___ftadd 002E  
                      ?___ftdiv 003B                        ?___ftneg 0057                        ?___lldiv 0020  
                      ?___ftmul 0057                        ?___llmod 002E                        ?___ftsub 003B  
                      ?___fttol 0067                        ?___lwmod 0020            __end_of_n_ADDRESS_P0 1850  
       __end_of_nrf24l01SPISend 1519              i1nrf24l01Send@data 0071       nrf24l01InitRegisters@enAA 002D  
                 ??_sendMessage 00C0              _nrf24l01SendPacket 09E7             sleepMs@milliseconds 0020  
       __end_of_nrf24l01GetPipe 085C                        ?_isdigit 0070                       _loop$1980 012C  
                     _loop$1978 0126                       _loop$1979 0129                        ?_sleepMs 0020  
           ?_nrf24l01SendPacket 002D                        ?_sprintf 0038             i1_nrf24l01SetRXMode 16AE  
            i1nrf24l01Service@i 007C         __end_of_nrf24l01Service 0358                  ___wmul@product 0024  
                   _nrf24l01ISR 0A7F                       clear_ram0 14E6                        _PIE0bits 0090  
                      _PIR0bits 0010            ??_nrf24l01SendPacket 002F            ?i1_nrf24l01SetRXMode 0070  
                    _ADCON0bits 009D                      _ADCON1bits 009E               ___wmul@multiplier 0020  
                      _WPUAbits 020C                        i1_memset 154F                        _RXPacket 01A0  
                      _TXPacket 01C1                        i1_strcmp 16FC                        i1_strlen 15D2  
           sleepListren@seconds 0025             __end_of_sendMessage 0BD1                  _nrf24l01CEHigh 14DA  
       ??_nrf24l01InterfaceInit 0020                  _nrf24l01CSHigh 14E0     __end_of_nrf24l01SetTXBuffer 09E7  
                _nrf24l01SPIEnd 14EC          __size_of_nrf24l01CELow 0003          __size_of_nrf24l01CSLow 0003  
         ??i1_nrf24l01SetRXMode 0074                __size_of___ftadd 00F6                __size_of___ftdiv 00A9  
              __size_of___ftneg 0009                __size_of___lldiv 0053                __size_of___ftmul 00B4  
              __size_of___llmod 0043                __size_of___ftsub 001E                __size_of___fttol 009F  
              __size_of___lwmod 002D                        ___awtoft 168C                        ___ftpack 0AE2  
                      ___lbtoft 159B                ?_nrf24l01SPISend 0070                        ___lltoft 174D  
         __size_of_sleepListren 0023                      _ANSELAbits 018C                        ___lwtoft 153A  
                    _ANSELCbits 018E                ?_nrf24l01GetPipe 0070                      sprintf@val 004A  
                 _n_ADDRESS_MUL 1828                      strcat@from 00B5           i1_nrf24l01SetTXBuffer 0898  
        __end_of_nrf24l01CEHigh 14DD                __size_of_isdigit 000F          __end_of_nrf24l01CSHigh 14E3  
                      __ptext10 0B47                        __ptext11 16D5                        __ptext20 164B  
                      __ptext12 0801                        __ptext21 1567                        __ptext13 09E7  
                      __ptext30 15F0                        __ptext22 0F0E                        __ptext14 07E5  
                      __ptext31 1503                        __ptext23 0035                        __ptext15 0202  
                      __ptext40 153A                        __ptext32 0E5A                        __ptext24 1519  
                      __ptext16 1724                        __ptext41 0AE2                        __ptext33 085C  
                      __ptext25 15B6                        __ptext17 09A2                        __ptext50 14FB  
                      __ptext34 0DAC                        __ptext26 08D8                        __ptext18 162C  
                      __ptext51 14E3                        __ptext43 0A7F                        __ptext35 17D0  
                      __ptext27 0A2C                        __ptext19 1777                        __ptext52 150C  
                      __ptext44 04A6                        __ptext36 0D03                        __ptext28 174D  
                      __ptext53 14EC                        __ptext45 16FC                        __ptext37 06EF  
                      __ptext29 0C64                        __ptext54 14E0                        __ptext46 0898  
                      __ptext38 168C                        __ptext55 14F3                        __ptext47 15D2  
                      __ptext39 159B                        __ptext56 14DD                        __ptext48 16AE  
                      __ptext57 14DA                        __ptext49 1580                        __ptext58 154F  
              __size_of_sleepMs 0030                    _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 14F3  
              ?_nrf24l01Service 0070                __size_of_sprintf 01CD                     _OSCCON1bits 0919  
                    strcpy@from 0022                   __size_of_main 0093                   __size_of_ftoa 00F2  
                 __size_of_loop 014E    nrf24l01InitRegisters@channel 0029    nrf24l01InitRegisters@feature 002B  
                  sleepMs@wdtps 0024                      _RC0PPSbits 0EA0    nrf24l01InitRegisters@rfSetup 002C  
                    _RC1PPSbits 0EA1                    ?_getADCValue 004B                      _RC2PPSbits 0EA2  
 i1nrf24l01SetTXBuffer@txPacket 0078                    _sleepListren 0801  __size_of_nrf24l01InitRegisters 011E  
 __end_of_nrf24l01InitRegisters 06EF                        int$flags 007E    nrf24l01InitRegisters@setupAW 002A  
                    _ODCONAbits 028C                        _statuses 1834                    _SSP1STATbits 0214  
                      main@pipe 00C5      nrf24l01SendPacket@txPacket 002D                   _nrf24l01CELow 14DD  
                   _sendMessage 0B47                   _nrf24l01CSLow 14E3                      _INTCONbits 000B  
               ?_nrf24l01CEHigh 0070                      _FVRCONbits 0117                ??i1_nrf24l01Send 0072  
               ?_nrf24l01CSHigh 0070                  __pstringtext10 185F                  __pstringtext11 1864  
                __pstringtext12 1868                  __pstringtext13 0000                        isdigit@c 0021  
                      memset@p1 0020                 ?_nrf24l01SPIEnd 0070                        intlevel1 0000  
                     sprintf@ap 0049                       sprintf@sp 004E                    _n_ADDRESS_P0 184B  
     __size_of_enableInterrupts 0008                ___lwmod@dividend 0022                ___lldiv@dividend 0024  
             __CFG_CLKOUTEN$OFF 0000       __size_of_nrf24l01SPIStart 0008                  ?_nrf24l01CELow 0070  
                 __pstringtext1 1800                   __pstringtext2 1834                   __pstringtext3 184B  
                 __pstringtext4 1828                   __pstringtext5 183E                   __pstringtext6 1845  
                 __pstringtext7 1850                   __pstringtext8 1855                   __pstringtext9 185A  
                ?_nrf24l01CSLow 0070                        sprintf@c 0053                        sprintf@f 0038  
    nrf24l01InitRegisters@DynPD 002E                        strcat@cp 00B7                        strcat@to 00B3  
        ?i1_nrf24l01SetTXBuffer 0070                        strcmp@s1 0024                        strcmp@s2 0020  
        i1nrf24l01SetTXBuffer@i 0079                ___lldiv@quotient 0029                 ___lwmod@divisor 0020  
                      strcpy@cp 0024                        strlen@cp 0024                        strcpy@to 0020  
               ___lwmod@counter 0025                      _WDTCONbits 0097                   ?_nrf24l01Init 0070  
                 ?_nrf24l01Send 0020                    ?_nrf24l01ISR 0070  
