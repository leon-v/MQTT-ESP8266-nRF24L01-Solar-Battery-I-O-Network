

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Jul 27 16:59:50 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    69                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2,group=1
    75                           	psect	text47,local,class=CODE,merge=1,delta=2,group=1
    76                           	psect	intentry,global,class=CODE,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	dabs	1,0x7E,2
    94  0000                     
    95                           ; Version 2.00
    96                           ; Generated 27/05/2018 GMT
    97                           ; 
    98                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    99                           ; All rights reserved.
   100                           ; 
   101                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   102                           ; 
   103                           ; Redistribution and use in source and binary forms, with or without modification, are
   104                           ; permitted provided that the following conditions are met:
   105                           ; 
   106                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   107                           ;        conditions and the following disclaimer.
   108                           ; 
   109                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   110                           ;        of conditions and the following disclaimer in the documentation and/or other
   111                           ;        materials provided with the distribution.
   112                           ; 
   113                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   114                           ;        software without specific prior written permission.
   115                           ; 
   116                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   117                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   118                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   119                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   120                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   121                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   122                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   123                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   124                           ; 
   125                           ; 
   126                           ; Code-generator required, PIC16LF18325 Definitions
   127                           ; 
   128                           ; SFR Addresses
   129  0000                     	;# 
   130  0001                     	;# 
   131  0002                     	;# 
   132  0003                     	;# 
   133  0004                     	;# 
   134  0005                     	;# 
   135  0006                     	;# 
   136  0007                     	;# 
   137  0008                     	;# 
   138  0009                     	;# 
   139  000A                     	;# 
   140  000B                     	;# 
   141  000C                     	;# 
   142  000E                     	;# 
   143  0010                     	;# 
   144  0011                     	;# 
   145  0012                     	;# 
   146  0013                     	;# 
   147  0014                     	;# 
   148  0015                     	;# 
   149  0015                     	;# 
   150  0016                     	;# 
   151  0016                     	;# 
   152  0017                     	;# 
   153  0018                     	;# 
   154  0019                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001C                     	;# 
   159  001D                     	;# 
   160  001E                     	;# 
   161  001F                     	;# 
   162  008C                     	;# 
   163  008E                     	;# 
   164  0090                     	;# 
   165  0091                     	;# 
   166  0092                     	;# 
   167  0093                     	;# 
   168  0094                     	;# 
   169  0097                     	;# 
   170  009B                     	;# 
   171  009B                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  009F                     	;# 
   176  010C                     	;# 
   177  010E                     	;# 
   178  0111                     	;# 
   179  0112                     	;# 
   180  0113                     	;# 
   181  0114                     	;# 
   182  0115                     	;# 
   183  0116                     	;# 
   184  0117                     	;# 
   185  0118                     	;# 
   186  0119                     	;# 
   187  018C                     	;# 
   188  018E                     	;# 
   189  0199                     	;# 
   190  0199                     	;# 
   191  0199                     	;# 
   192  019A                     	;# 
   193  019A                     	;# 
   194  019A                     	;# 
   195  019B                     	;# 
   196  019B                     	;# 
   197  019B                     	;# 
   198  019B                     	;# 
   199  019B                     	;# 
   200  019C                     	;# 
   201  019C                     	;# 
   202  019C                     	;# 
   203  019D                     	;# 
   204  019D                     	;# 
   205  019D                     	;# 
   206  019E                     	;# 
   207  019E                     	;# 
   208  019E                     	;# 
   209  019F                     	;# 
   210  019F                     	;# 
   211  019F                     	;# 
   212  019F                     	;# 
   213  019F                     	;# 
   214  020C                     	;# 
   215  020E                     	;# 
   216  0211                     	;# 
   217  0211                     	;# 
   218  0212                     	;# 
   219  0212                     	;# 
   220  0213                     	;# 
   221  0213                     	;# 
   222  0214                     	;# 
   223  0214                     	;# 
   224  0215                     	;# 
   225  0215                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0216                     	;# 
   229  0216                     	;# 
   230  0217                     	;# 
   231  0217                     	;# 
   232  0219                     	;# 
   233  021A                     	;# 
   234  021B                     	;# 
   235  021C                     	;# 
   236  021D                     	;# 
   237  021D                     	;# 
   238  021E                     	;# 
   239  021F                     	;# 
   240  028C                     	;# 
   241  028E                     	;# 
   242  0291                     	;# 
   243  0291                     	;# 
   244  0292                     	;# 
   245  0293                     	;# 
   246  0294                     	;# 
   247  0295                     	;# 
   248  0295                     	;# 
   249  0296                     	;# 
   250  0297                     	;# 
   251  0298                     	;# 
   252  029F                     	;# 
   253  030C                     	;# 
   254  030E                     	;# 
   255  0311                     	;# 
   256  0311                     	;# 
   257  0312                     	;# 
   258  0313                     	;# 
   259  0314                     	;# 
   260  0315                     	;# 
   261  0315                     	;# 
   262  0316                     	;# 
   263  0317                     	;# 
   264  0318                     	;# 
   265  038C                     	;# 
   266  038E                     	;# 
   267  0391                     	;# 
   268  0392                     	;# 
   269  0393                     	;# 
   270  0397                     	;# 
   271  0398                     	;# 
   272  0399                     	;# 
   273  039A                     	;# 
   274  039C                     	;# 
   275  039D                     	;# 
   276  039E                     	;# 
   277  039F                     	;# 
   278  0411                     	;# 
   279  0411                     	;# 
   280  0412                     	;# 
   281  0413                     	;# 
   282  0414                     	;# 
   283  0415                     	;# 
   284  0416                     	;# 
   285  0417                     	;# 
   286  0418                     	;# 
   287  0418                     	;# 
   288  0419                     	;# 
   289  041A                     	;# 
   290  041B                     	;# 
   291  041C                     	;# 
   292  041D                     	;# 
   293  041E                     	;# 
   294  041F                     	;# 
   295  0498                     	;# 
   296  0498                     	;# 
   297  0499                     	;# 
   298  049A                     	;# 
   299  049B                     	;# 
   300  049B                     	;# 
   301  049C                     	;# 
   302  049D                     	;# 
   303  049E                     	;# 
   304  049F                     	;# 
   305  0617                     	;# 
   306  0618                     	;# 
   307  0619                     	;# 
   308  0619                     	;# 
   309  061A                     	;# 
   310  061B                     	;# 
   311  061C                     	;# 
   312  061C                     	;# 
   313  061F                     	;# 
   314  0691                     	;# 
   315  0692                     	;# 
   316  0693                     	;# 
   317  0694                     	;# 
   318  0695                     	;# 
   319  0696                     	;# 
   320  0697                     	;# 
   321  0698                     	;# 
   322  0699                     	;# 
   323  0711                     	;# 
   324  0712                     	;# 
   325  0713                     	;# 
   326  0714                     	;# 
   327  0715                     	;# 
   328  0716                     	;# 
   329  0717                     	;# 
   330  0718                     	;# 
   331  0719                     	;# 
   332  0891                     	;# 
   333  0891                     	;# 
   334  0891                     	;# 
   335  0891                     	;# 
   336  0891                     	;# 
   337  0891                     	;# 
   338  0892                     	;# 
   339  0892                     	;# 
   340  0892                     	;# 
   341  0893                     	;# 
   342  0893                     	;# 
   343  0893                     	;# 
   344  0893                     	;# 
   345  0893                     	;# 
   346  0893                     	;# 
   347  0894                     	;# 
   348  0894                     	;# 
   349  0894                     	;# 
   350  0895                     	;# 
   351  0895                     	;# 
   352  0895                     	;# 
   353  0896                     	;# 
   354  0896                     	;# 
   355  0896                     	;# 
   356  089B                     	;# 
   357  0911                     	;# 
   358  0912                     	;# 
   359  0913                     	;# 
   360  0914                     	;# 
   361  0915                     	;# 
   362  0916                     	;# 
   363  0918                     	;# 
   364  0919                     	;# 
   365  091A                     	;# 
   366  091B                     	;# 
   367  091C                     	;# 
   368  091D                     	;# 
   369  091E                     	;# 
   370  091F                     	;# 
   371  0E0F                     	;# 
   372  0E10                     	;# 
   373  0E11                     	;# 
   374  0E12                     	;# 
   375  0E13                     	;# 
   376  0E14                     	;# 
   377  0E15                     	;# 
   378  0E16                     	;# 
   379  0E17                     	;# 
   380  0E18                     	;# 
   381  0E19                     	;# 
   382  0E1A                     	;# 
   383  0E1B                     	;# 
   384  0E1C                     	;# 
   385  0E1D                     	;# 
   386  0E1E                     	;# 
   387  0E1F                     	;# 
   388  0E20                     	;# 
   389  0E21                     	;# 
   390  0E22                     	;# 
   391  0E24                     	;# 
   392  0E25                     	;# 
   393  0E28                     	;# 
   394  0E29                     	;# 
   395  0E2A                     	;# 
   396  0E2B                     	;# 
   397  0E2C                     	;# 
   398  0E2D                     	;# 
   399  0E2E                     	;# 
   400  0E2F                     	;# 
   401  0E90                     	;# 
   402  0E91                     	;# 
   403  0E92                     	;# 
   404  0E94                     	;# 
   405  0E95                     	;# 
   406  0EA0                     	;# 
   407  0EA1                     	;# 
   408  0EA2                     	;# 
   409  0EA3                     	;# 
   410  0EA4                     	;# 
   411  0EA5                     	;# 
   412  0F0F                     	;# 
   413  0F10                     	;# 
   414  0F11                     	;# 
   415  0F12                     	;# 
   416  0F13                     	;# 
   417  0F14                     	;# 
   418  0F15                     	;# 
   419  0F16                     	;# 
   420  0F17                     	;# 
   421  0F18                     	;# 
   422  0F19                     	;# 
   423  0F1A                     	;# 
   424  0F1B                     	;# 
   425  0F1C                     	;# 
   426  0F1D                     	;# 
   427  0F1E                     	;# 
   428  0F1F                     	;# 
   429  0F20                     	;# 
   430  0F21                     	;# 
   431  0F22                     	;# 
   432  0F23                     	;# 
   433  0F24                     	;# 
   434  0F25                     	;# 
   435  0F26                     	;# 
   436  0F27                     	;# 
   437  0F28                     	;# 
   438  0F29                     	;# 
   439  0F2A                     	;# 
   440  0F2B                     	;# 
   441  0F2C                     	;# 
   442  0F2D                     	;# 
   443  0F2E                     	;# 
   444  0F2F                     	;# 
   445  0F30                     	;# 
   446  0F31                     	;# 
   447  0F32                     	;# 
   448  0F33                     	;# 
   449  0F34                     	;# 
   450  0F35                     	;# 
   451  0F36                     	;# 
   452  0F37                     	;# 
   453  0FE4                     	;# 
   454  0FE5                     	;# 
   455  0FE6                     	;# 
   456  0FE7                     	;# 
   457  0FE8                     	;# 
   458  0FE9                     	;# 
   459  0FEA                     	;# 
   460  0FEB                     	;# 
   461  0FED                     	;# 
   462  0FEE                     	;# 
   463  0FEF                     	;# 
   464  0000                     	;# 
   465  0001                     	;# 
   466  0002                     	;# 
   467  0003                     	;# 
   468  0004                     	;# 
   469  0005                     	;# 
   470  0006                     	;# 
   471  0007                     	;# 
   472  0008                     	;# 
   473  0009                     	;# 
   474  000A                     	;# 
   475  000B                     	;# 
   476  000C                     	;# 
   477  000E                     	;# 
   478  0010                     	;# 
   479  0011                     	;# 
   480  0012                     	;# 
   481  0013                     	;# 
   482  0014                     	;# 
   483  0015                     	;# 
   484  0015                     	;# 
   485  0016                     	;# 
   486  0016                     	;# 
   487  0017                     	;# 
   488  0018                     	;# 
   489  0019                     	;# 
   490  0019                     	;# 
   491  001A                     	;# 
   492  001B                     	;# 
   493  001C                     	;# 
   494  001D                     	;# 
   495  001E                     	;# 
   496  001F                     	;# 
   497  008C                     	;# 
   498  008E                     	;# 
   499  0090                     	;# 
   500  0091                     	;# 
   501  0092                     	;# 
   502  0093                     	;# 
   503  0094                     	;# 
   504  0097                     	;# 
   505  009B                     	;# 
   506  009B                     	;# 
   507  009C                     	;# 
   508  009D                     	;# 
   509  009E                     	;# 
   510  009F                     	;# 
   511  010C                     	;# 
   512  010E                     	;# 
   513  0111                     	;# 
   514  0112                     	;# 
   515  0113                     	;# 
   516  0114                     	;# 
   517  0115                     	;# 
   518  0116                     	;# 
   519  0117                     	;# 
   520  0118                     	;# 
   521  0119                     	;# 
   522  018C                     	;# 
   523  018E                     	;# 
   524  0199                     	;# 
   525  0199                     	;# 
   526  0199                     	;# 
   527  019A                     	;# 
   528  019A                     	;# 
   529  019A                     	;# 
   530  019B                     	;# 
   531  019B                     	;# 
   532  019B                     	;# 
   533  019B                     	;# 
   534  019B                     	;# 
   535  019C                     	;# 
   536  019C                     	;# 
   537  019C                     	;# 
   538  019D                     	;# 
   539  019D                     	;# 
   540  019D                     	;# 
   541  019E                     	;# 
   542  019E                     	;# 
   543  019E                     	;# 
   544  019F                     	;# 
   545  019F                     	;# 
   546  019F                     	;# 
   547  019F                     	;# 
   548  019F                     	;# 
   549  020C                     	;# 
   550  020E                     	;# 
   551  0211                     	;# 
   552  0211                     	;# 
   553  0212                     	;# 
   554  0212                     	;# 
   555  0213                     	;# 
   556  0213                     	;# 
   557  0214                     	;# 
   558  0214                     	;# 
   559  0215                     	;# 
   560  0215                     	;# 
   561  0215                     	;# 
   562  0215                     	;# 
   563  0216                     	;# 
   564  0216                     	;# 
   565  0217                     	;# 
   566  0217                     	;# 
   567  0219                     	;# 
   568  021A                     	;# 
   569  021B                     	;# 
   570  021C                     	;# 
   571  021D                     	;# 
   572  021D                     	;# 
   573  021E                     	;# 
   574  021F                     	;# 
   575  028C                     	;# 
   576  028E                     	;# 
   577  0291                     	;# 
   578  0291                     	;# 
   579  0292                     	;# 
   580  0293                     	;# 
   581  0294                     	;# 
   582  0295                     	;# 
   583  0295                     	;# 
   584  0296                     	;# 
   585  0297                     	;# 
   586  0298                     	;# 
   587  029F                     	;# 
   588  030C                     	;# 
   589  030E                     	;# 
   590  0311                     	;# 
   591  0311                     	;# 
   592  0312                     	;# 
   593  0313                     	;# 
   594  0314                     	;# 
   595  0315                     	;# 
   596  0315                     	;# 
   597  0316                     	;# 
   598  0317                     	;# 
   599  0318                     	;# 
   600  038C                     	;# 
   601  038E                     	;# 
   602  0391                     	;# 
   603  0392                     	;# 
   604  0393                     	;# 
   605  0397                     	;# 
   606  0398                     	;# 
   607  0399                     	;# 
   608  039A                     	;# 
   609  039C                     	;# 
   610  039D                     	;# 
   611  039E                     	;# 
   612  039F                     	;# 
   613  0411                     	;# 
   614  0411                     	;# 
   615  0412                     	;# 
   616  0413                     	;# 
   617  0414                     	;# 
   618  0415                     	;# 
   619  0416                     	;# 
   620  0417                     	;# 
   621  0418                     	;# 
   622  0418                     	;# 
   623  0419                     	;# 
   624  041A                     	;# 
   625  041B                     	;# 
   626  041C                     	;# 
   627  041D                     	;# 
   628  041E                     	;# 
   629  041F                     	;# 
   630  0498                     	;# 
   631  0498                     	;# 
   632  0499                     	;# 
   633  049A                     	;# 
   634  049B                     	;# 
   635  049B                     	;# 
   636  049C                     	;# 
   637  049D                     	;# 
   638  049E                     	;# 
   639  049F                     	;# 
   640  0617                     	;# 
   641  0618                     	;# 
   642  0619                     	;# 
   643  0619                     	;# 
   644  061A                     	;# 
   645  061B                     	;# 
   646  061C                     	;# 
   647  061C                     	;# 
   648  061F                     	;# 
   649  0691                     	;# 
   650  0692                     	;# 
   651  0693                     	;# 
   652  0694                     	;# 
   653  0695                     	;# 
   654  0696                     	;# 
   655  0697                     	;# 
   656  0698                     	;# 
   657  0699                     	;# 
   658  0711                     	;# 
   659  0712                     	;# 
   660  0713                     	;# 
   661  0714                     	;# 
   662  0715                     	;# 
   663  0716                     	;# 
   664  0717                     	;# 
   665  0718                     	;# 
   666  0719                     	;# 
   667  0891                     	;# 
   668  0891                     	;# 
   669  0891                     	;# 
   670  0891                     	;# 
   671  0891                     	;# 
   672  0891                     	;# 
   673  0892                     	;# 
   674  0892                     	;# 
   675  0892                     	;# 
   676  0893                     	;# 
   677  0893                     	;# 
   678  0893                     	;# 
   679  0893                     	;# 
   680  0893                     	;# 
   681  0893                     	;# 
   682  0894                     	;# 
   683  0894                     	;# 
   684  0894                     	;# 
   685  0895                     	;# 
   686  0895                     	;# 
   687  0895                     	;# 
   688  0896                     	;# 
   689  0896                     	;# 
   690  0896                     	;# 
   691  089B                     	;# 
   692  0911                     	;# 
   693  0912                     	;# 
   694  0913                     	;# 
   695  0914                     	;# 
   696  0915                     	;# 
   697  0916                     	;# 
   698  0918                     	;# 
   699  0919                     	;# 
   700  091A                     	;# 
   701  091B                     	;# 
   702  091C                     	;# 
   703  091D                     	;# 
   704  091E                     	;# 
   705  091F                     	;# 
   706  0E0F                     	;# 
   707  0E10                     	;# 
   708  0E11                     	;# 
   709  0E12                     	;# 
   710  0E13                     	;# 
   711  0E14                     	;# 
   712  0E15                     	;# 
   713  0E16                     	;# 
   714  0E17                     	;# 
   715  0E18                     	;# 
   716  0E19                     	;# 
   717  0E1A                     	;# 
   718  0E1B                     	;# 
   719  0E1C                     	;# 
   720  0E1D                     	;# 
   721  0E1E                     	;# 
   722  0E1F                     	;# 
   723  0E20                     	;# 
   724  0E21                     	;# 
   725  0E22                     	;# 
   726  0E24                     	;# 
   727  0E25                     	;# 
   728  0E28                     	;# 
   729  0E29                     	;# 
   730  0E2A                     	;# 
   731  0E2B                     	;# 
   732  0E2C                     	;# 
   733  0E2D                     	;# 
   734  0E2E                     	;# 
   735  0E2F                     	;# 
   736  0E90                     	;# 
   737  0E91                     	;# 
   738  0E92                     	;# 
   739  0E94                     	;# 
   740  0E95                     	;# 
   741  0EA0                     	;# 
   742  0EA1                     	;# 
   743  0EA2                     	;# 
   744  0EA3                     	;# 
   745  0EA4                     	;# 
   746  0EA5                     	;# 
   747  0F0F                     	;# 
   748  0F10                     	;# 
   749  0F11                     	;# 
   750  0F12                     	;# 
   751  0F13                     	;# 
   752  0F14                     	;# 
   753  0F15                     	;# 
   754  0F16                     	;# 
   755  0F17                     	;# 
   756  0F18                     	;# 
   757  0F19                     	;# 
   758  0F1A                     	;# 
   759  0F1B                     	;# 
   760  0F1C                     	;# 
   761  0F1D                     	;# 
   762  0F1E                     	;# 
   763  0F1F                     	;# 
   764  0F20                     	;# 
   765  0F21                     	;# 
   766  0F22                     	;# 
   767  0F23                     	;# 
   768  0F24                     	;# 
   769  0F25                     	;# 
   770  0F26                     	;# 
   771  0F27                     	;# 
   772  0F28                     	;# 
   773  0F29                     	;# 
   774  0F2A                     	;# 
   775  0F2B                     	;# 
   776  0F2C                     	;# 
   777  0F2D                     	;# 
   778  0F2E                     	;# 
   779  0F2F                     	;# 
   780  0F30                     	;# 
   781  0F31                     	;# 
   782  0F32                     	;# 
   783  0F33                     	;# 
   784  0F34                     	;# 
   785  0F35                     	;# 
   786  0F36                     	;# 
   787  0F37                     	;# 
   788  0FE4                     	;# 
   789  0FE5                     	;# 
   790  0FE6                     	;# 
   791  0FE7                     	;# 
   792  0FE8                     	;# 
   793  0FE9                     	;# 
   794  0FEA                     	;# 
   795  0FEB                     	;# 
   796  0FED                     	;# 
   797  0FEE                     	;# 
   798  0FEF                     	;# 
   799  0000                     	;# 
   800  0001                     	;# 
   801  0002                     	;# 
   802  0003                     	;# 
   803  0004                     	;# 
   804  0005                     	;# 
   805  0006                     	;# 
   806  0007                     	;# 
   807  0008                     	;# 
   808  0009                     	;# 
   809  000A                     	;# 
   810  000B                     	;# 
   811  000C                     	;# 
   812  000E                     	;# 
   813  0010                     	;# 
   814  0011                     	;# 
   815  0012                     	;# 
   816  0013                     	;# 
   817  0014                     	;# 
   818  0015                     	;# 
   819  0015                     	;# 
   820  0016                     	;# 
   821  0016                     	;# 
   822  0017                     	;# 
   823  0018                     	;# 
   824  0019                     	;# 
   825  0019                     	;# 
   826  001A                     	;# 
   827  001B                     	;# 
   828  001C                     	;# 
   829  001D                     	;# 
   830  001E                     	;# 
   831  001F                     	;# 
   832  008C                     	;# 
   833  008E                     	;# 
   834  0090                     	;# 
   835  0091                     	;# 
   836  0092                     	;# 
   837  0093                     	;# 
   838  0094                     	;# 
   839  0097                     	;# 
   840  009B                     	;# 
   841  009B                     	;# 
   842  009C                     	;# 
   843  009D                     	;# 
   844  009E                     	;# 
   845  009F                     	;# 
   846  010C                     	;# 
   847  010E                     	;# 
   848  0111                     	;# 
   849  0112                     	;# 
   850  0113                     	;# 
   851  0114                     	;# 
   852  0115                     	;# 
   853  0116                     	;# 
   854  0117                     	;# 
   855  0118                     	;# 
   856  0119                     	;# 
   857  018C                     	;# 
   858  018E                     	;# 
   859  0199                     	;# 
   860  0199                     	;# 
   861  0199                     	;# 
   862  019A                     	;# 
   863  019A                     	;# 
   864  019A                     	;# 
   865  019B                     	;# 
   866  019B                     	;# 
   867  019B                     	;# 
   868  019B                     	;# 
   869  019B                     	;# 
   870  019C                     	;# 
   871  019C                     	;# 
   872  019C                     	;# 
   873  019D                     	;# 
   874  019D                     	;# 
   875  019D                     	;# 
   876  019E                     	;# 
   877  019E                     	;# 
   878  019E                     	;# 
   879  019F                     	;# 
   880  019F                     	;# 
   881  019F                     	;# 
   882  019F                     	;# 
   883  019F                     	;# 
   884  020C                     	;# 
   885  020E                     	;# 
   886  0211                     	;# 
   887  0211                     	;# 
   888  0212                     	;# 
   889  0212                     	;# 
   890  0213                     	;# 
   891  0213                     	;# 
   892  0214                     	;# 
   893  0214                     	;# 
   894  0215                     	;# 
   895  0215                     	;# 
   896  0215                     	;# 
   897  0215                     	;# 
   898  0216                     	;# 
   899  0216                     	;# 
   900  0217                     	;# 
   901  0217                     	;# 
   902  0219                     	;# 
   903  021A                     	;# 
   904  021B                     	;# 
   905  021C                     	;# 
   906  021D                     	;# 
   907  021D                     	;# 
   908  021E                     	;# 
   909  021F                     	;# 
   910  028C                     	;# 
   911  028E                     	;# 
   912  0291                     	;# 
   913  0291                     	;# 
   914  0292                     	;# 
   915  0293                     	;# 
   916  0294                     	;# 
   917  0295                     	;# 
   918  0295                     	;# 
   919  0296                     	;# 
   920  0297                     	;# 
   921  0298                     	;# 
   922  029F                     	;# 
   923  030C                     	;# 
   924  030E                     	;# 
   925  0311                     	;# 
   926  0311                     	;# 
   927  0312                     	;# 
   928  0313                     	;# 
   929  0314                     	;# 
   930  0315                     	;# 
   931  0315                     	;# 
   932  0316                     	;# 
   933  0317                     	;# 
   934  0318                     	;# 
   935  038C                     	;# 
   936  038E                     	;# 
   937  0391                     	;# 
   938  0392                     	;# 
   939  0393                     	;# 
   940  0397                     	;# 
   941  0398                     	;# 
   942  0399                     	;# 
   943  039A                     	;# 
   944  039C                     	;# 
   945  039D                     	;# 
   946  039E                     	;# 
   947  039F                     	;# 
   948  0411                     	;# 
   949  0411                     	;# 
   950  0412                     	;# 
   951  0413                     	;# 
   952  0414                     	;# 
   953  0415                     	;# 
   954  0416                     	;# 
   955  0417                     	;# 
   956  0418                     	;# 
   957  0418                     	;# 
   958  0419                     	;# 
   959  041A                     	;# 
   960  041B                     	;# 
   961  041C                     	;# 
   962  041D                     	;# 
   963  041E                     	;# 
   964  041F                     	;# 
   965  0498                     	;# 
   966  0498                     	;# 
   967  0499                     	;# 
   968  049A                     	;# 
   969  049B                     	;# 
   970  049B                     	;# 
   971  049C                     	;# 
   972  049D                     	;# 
   973  049E                     	;# 
   974  049F                     	;# 
   975  0617                     	;# 
   976  0618                     	;# 
   977  0619                     	;# 
   978  0619                     	;# 
   979  061A                     	;# 
   980  061B                     	;# 
   981  061C                     	;# 
   982  061C                     	;# 
   983  061F                     	;# 
   984  0691                     	;# 
   985  0692                     	;# 
   986  0693                     	;# 
   987  0694                     	;# 
   988  0695                     	;# 
   989  0696                     	;# 
   990  0697                     	;# 
   991  0698                     	;# 
   992  0699                     	;# 
   993  0711                     	;# 
   994  0712                     	;# 
   995  0713                     	;# 
   996  0714                     	;# 
   997  0715                     	;# 
   998  0716                     	;# 
   999  0717                     	;# 
  1000  0718                     	;# 
  1001  0719                     	;# 
  1002  0891                     	;# 
  1003  0891                     	;# 
  1004  0891                     	;# 
  1005  0891                     	;# 
  1006  0891                     	;# 
  1007  0891                     	;# 
  1008  0892                     	;# 
  1009  0892                     	;# 
  1010  0892                     	;# 
  1011  0893                     	;# 
  1012  0893                     	;# 
  1013  0893                     	;# 
  1014  0893                     	;# 
  1015  0893                     	;# 
  1016  0893                     	;# 
  1017  0894                     	;# 
  1018  0894                     	;# 
  1019  0894                     	;# 
  1020  0895                     	;# 
  1021  0895                     	;# 
  1022  0895                     	;# 
  1023  0896                     	;# 
  1024  0896                     	;# 
  1025  0896                     	;# 
  1026  089B                     	;# 
  1027  0911                     	;# 
  1028  0912                     	;# 
  1029  0913                     	;# 
  1030  0914                     	;# 
  1031  0915                     	;# 
  1032  0916                     	;# 
  1033  0918                     	;# 
  1034  0919                     	;# 
  1035  091A                     	;# 
  1036  091B                     	;# 
  1037  091C                     	;# 
  1038  091D                     	;# 
  1039  091E                     	;# 
  1040  091F                     	;# 
  1041  0E0F                     	;# 
  1042  0E10                     	;# 
  1043  0E11                     	;# 
  1044  0E12                     	;# 
  1045  0E13                     	;# 
  1046  0E14                     	;# 
  1047  0E15                     	;# 
  1048  0E16                     	;# 
  1049  0E17                     	;# 
  1050  0E18                     	;# 
  1051  0E19                     	;# 
  1052  0E1A                     	;# 
  1053  0E1B                     	;# 
  1054  0E1C                     	;# 
  1055  0E1D                     	;# 
  1056  0E1E                     	;# 
  1057  0E1F                     	;# 
  1058  0E20                     	;# 
  1059  0E21                     	;# 
  1060  0E22                     	;# 
  1061  0E24                     	;# 
  1062  0E25                     	;# 
  1063  0E28                     	;# 
  1064  0E29                     	;# 
  1065  0E2A                     	;# 
  1066  0E2B                     	;# 
  1067  0E2C                     	;# 
  1068  0E2D                     	;# 
  1069  0E2E                     	;# 
  1070  0E2F                     	;# 
  1071  0E90                     	;# 
  1072  0E91                     	;# 
  1073  0E92                     	;# 
  1074  0E94                     	;# 
  1075  0E95                     	;# 
  1076  0EA0                     	;# 
  1077  0EA1                     	;# 
  1078  0EA2                     	;# 
  1079  0EA3                     	;# 
  1080  0EA4                     	;# 
  1081  0EA5                     	;# 
  1082  0F0F                     	;# 
  1083  0F10                     	;# 
  1084  0F11                     	;# 
  1085  0F12                     	;# 
  1086  0F13                     	;# 
  1087  0F14                     	;# 
  1088  0F15                     	;# 
  1089  0F16                     	;# 
  1090  0F17                     	;# 
  1091  0F18                     	;# 
  1092  0F19                     	;# 
  1093  0F1A                     	;# 
  1094  0F1B                     	;# 
  1095  0F1C                     	;# 
  1096  0F1D                     	;# 
  1097  0F1E                     	;# 
  1098  0F1F                     	;# 
  1099  0F20                     	;# 
  1100  0F21                     	;# 
  1101  0F22                     	;# 
  1102  0F23                     	;# 
  1103  0F24                     	;# 
  1104  0F25                     	;# 
  1105  0F26                     	;# 
  1106  0F27                     	;# 
  1107  0F28                     	;# 
  1108  0F29                     	;# 
  1109  0F2A                     	;# 
  1110  0F2B                     	;# 
  1111  0F2C                     	;# 
  1112  0F2D                     	;# 
  1113  0F2E                     	;# 
  1114  0F2F                     	;# 
  1115  0F30                     	;# 
  1116  0F31                     	;# 
  1117  0F32                     	;# 
  1118  0F33                     	;# 
  1119  0F34                     	;# 
  1120  0F35                     	;# 
  1121  0F36                     	;# 
  1122  0F37                     	;# 
  1123  0FE4                     	;# 
  1124  0FE5                     	;# 
  1125  0FE6                     	;# 
  1126  0FE7                     	;# 
  1127  0FE8                     	;# 
  1128  0FE9                     	;# 
  1129  0FEA                     	;# 
  1130  0FEB                     	;# 
  1131  0FED                     	;# 
  1132  0FEE                     	;# 
  1133  0FEF                     	;# 
  1134  0000                     	;# 
  1135  0001                     	;# 
  1136  0002                     	;# 
  1137  0003                     	;# 
  1138  0004                     	;# 
  1139  0005                     	;# 
  1140  0006                     	;# 
  1141  0007                     	;# 
  1142  0008                     	;# 
  1143  0009                     	;# 
  1144  000A                     	;# 
  1145  000B                     	;# 
  1146  000C                     	;# 
  1147  000E                     	;# 
  1148  0010                     	;# 
  1149  0011                     	;# 
  1150  0012                     	;# 
  1151  0013                     	;# 
  1152  0014                     	;# 
  1153  0015                     	;# 
  1154  0015                     	;# 
  1155  0016                     	;# 
  1156  0016                     	;# 
  1157  0017                     	;# 
  1158  0018                     	;# 
  1159  0019                     	;# 
  1160  0019                     	;# 
  1161  001A                     	;# 
  1162  001B                     	;# 
  1163  001C                     	;# 
  1164  001D                     	;# 
  1165  001E                     	;# 
  1166  001F                     	;# 
  1167  008C                     	;# 
  1168  008E                     	;# 
  1169  0090                     	;# 
  1170  0091                     	;# 
  1171  0092                     	;# 
  1172  0093                     	;# 
  1173  0094                     	;# 
  1174  0097                     	;# 
  1175  009B                     	;# 
  1176  009B                     	;# 
  1177  009C                     	;# 
  1178  009D                     	;# 
  1179  009E                     	;# 
  1180  009F                     	;# 
  1181  010C                     	;# 
  1182  010E                     	;# 
  1183  0111                     	;# 
  1184  0112                     	;# 
  1185  0113                     	;# 
  1186  0114                     	;# 
  1187  0115                     	;# 
  1188  0116                     	;# 
  1189  0117                     	;# 
  1190  0118                     	;# 
  1191  0119                     	;# 
  1192  018C                     	;# 
  1193  018E                     	;# 
  1194  0199                     	;# 
  1195  0199                     	;# 
  1196  0199                     	;# 
  1197  019A                     	;# 
  1198  019A                     	;# 
  1199  019A                     	;# 
  1200  019B                     	;# 
  1201  019B                     	;# 
  1202  019B                     	;# 
  1203  019B                     	;# 
  1204  019B                     	;# 
  1205  019C                     	;# 
  1206  019C                     	;# 
  1207  019C                     	;# 
  1208  019D                     	;# 
  1209  019D                     	;# 
  1210  019D                     	;# 
  1211  019E                     	;# 
  1212  019E                     	;# 
  1213  019E                     	;# 
  1214  019F                     	;# 
  1215  019F                     	;# 
  1216  019F                     	;# 
  1217  019F                     	;# 
  1218  019F                     	;# 
  1219  020C                     	;# 
  1220  020E                     	;# 
  1221  0211                     	;# 
  1222  0211                     	;# 
  1223  0212                     	;# 
  1224  0212                     	;# 
  1225  0213                     	;# 
  1226  0213                     	;# 
  1227  0214                     	;# 
  1228  0214                     	;# 
  1229  0215                     	;# 
  1230  0215                     	;# 
  1231  0215                     	;# 
  1232  0215                     	;# 
  1233  0216                     	;# 
  1234  0216                     	;# 
  1235  0217                     	;# 
  1236  0217                     	;# 
  1237  0219                     	;# 
  1238  021A                     	;# 
  1239  021B                     	;# 
  1240  021C                     	;# 
  1241  021D                     	;# 
  1242  021D                     	;# 
  1243  021E                     	;# 
  1244  021F                     	;# 
  1245  028C                     	;# 
  1246  028E                     	;# 
  1247  0291                     	;# 
  1248  0291                     	;# 
  1249  0292                     	;# 
  1250  0293                     	;# 
  1251  0294                     	;# 
  1252  0295                     	;# 
  1253  0295                     	;# 
  1254  0296                     	;# 
  1255  0297                     	;# 
  1256  0298                     	;# 
  1257  029F                     	;# 
  1258  030C                     	;# 
  1259  030E                     	;# 
  1260  0311                     	;# 
  1261  0311                     	;# 
  1262  0312                     	;# 
  1263  0313                     	;# 
  1264  0314                     	;# 
  1265  0315                     	;# 
  1266  0315                     	;# 
  1267  0316                     	;# 
  1268  0317                     	;# 
  1269  0318                     	;# 
  1270  038C                     	;# 
  1271  038E                     	;# 
  1272  0391                     	;# 
  1273  0392                     	;# 
  1274  0393                     	;# 
  1275  0397                     	;# 
  1276  0398                     	;# 
  1277  0399                     	;# 
  1278  039A                     	;# 
  1279  039C                     	;# 
  1280  039D                     	;# 
  1281  039E                     	;# 
  1282  039F                     	;# 
  1283  0411                     	;# 
  1284  0411                     	;# 
  1285  0412                     	;# 
  1286  0413                     	;# 
  1287  0414                     	;# 
  1288  0415                     	;# 
  1289  0416                     	;# 
  1290  0417                     	;# 
  1291  0418                     	;# 
  1292  0418                     	;# 
  1293  0419                     	;# 
  1294  041A                     	;# 
  1295  041B                     	;# 
  1296  041C                     	;# 
  1297  041D                     	;# 
  1298  041E                     	;# 
  1299  041F                     	;# 
  1300  0498                     	;# 
  1301  0498                     	;# 
  1302  0499                     	;# 
  1303  049A                     	;# 
  1304  049B                     	;# 
  1305  049B                     	;# 
  1306  049C                     	;# 
  1307  049D                     	;# 
  1308  049E                     	;# 
  1309  049F                     	;# 
  1310  0617                     	;# 
  1311  0618                     	;# 
  1312  0619                     	;# 
  1313  0619                     	;# 
  1314  061A                     	;# 
  1315  061B                     	;# 
  1316  061C                     	;# 
  1317  061C                     	;# 
  1318  061F                     	;# 
  1319  0691                     	;# 
  1320  0692                     	;# 
  1321  0693                     	;# 
  1322  0694                     	;# 
  1323  0695                     	;# 
  1324  0696                     	;# 
  1325  0697                     	;# 
  1326  0698                     	;# 
  1327  0699                     	;# 
  1328  0711                     	;# 
  1329  0712                     	;# 
  1330  0713                     	;# 
  1331  0714                     	;# 
  1332  0715                     	;# 
  1333  0716                     	;# 
  1334  0717                     	;# 
  1335  0718                     	;# 
  1336  0719                     	;# 
  1337  0891                     	;# 
  1338  0891                     	;# 
  1339  0891                     	;# 
  1340  0891                     	;# 
  1341  0891                     	;# 
  1342  0891                     	;# 
  1343  0892                     	;# 
  1344  0892                     	;# 
  1345  0892                     	;# 
  1346  0893                     	;# 
  1347  0893                     	;# 
  1348  0893                     	;# 
  1349  0893                     	;# 
  1350  0893                     	;# 
  1351  0893                     	;# 
  1352  0894                     	;# 
  1353  0894                     	;# 
  1354  0894                     	;# 
  1355  0895                     	;# 
  1356  0895                     	;# 
  1357  0895                     	;# 
  1358  0896                     	;# 
  1359  0896                     	;# 
  1360  0896                     	;# 
  1361  089B                     	;# 
  1362  0911                     	;# 
  1363  0912                     	;# 
  1364  0913                     	;# 
  1365  0914                     	;# 
  1366  0915                     	;# 
  1367  0916                     	;# 
  1368  0918                     	;# 
  1369  0919                     	;# 
  1370  091A                     	;# 
  1371  091B                     	;# 
  1372  091C                     	;# 
  1373  091D                     	;# 
  1374  091E                     	;# 
  1375  091F                     	;# 
  1376  0E0F                     	;# 
  1377  0E10                     	;# 
  1378  0E11                     	;# 
  1379  0E12                     	;# 
  1380  0E13                     	;# 
  1381  0E14                     	;# 
  1382  0E15                     	;# 
  1383  0E16                     	;# 
  1384  0E17                     	;# 
  1385  0E18                     	;# 
  1386  0E19                     	;# 
  1387  0E1A                     	;# 
  1388  0E1B                     	;# 
  1389  0E1C                     	;# 
  1390  0E1D                     	;# 
  1391  0E1E                     	;# 
  1392  0E1F                     	;# 
  1393  0E20                     	;# 
  1394  0E21                     	;# 
  1395  0E22                     	;# 
  1396  0E24                     	;# 
  1397  0E25                     	;# 
  1398  0E28                     	;# 
  1399  0E29                     	;# 
  1400  0E2A                     	;# 
  1401  0E2B                     	;# 
  1402  0E2C                     	;# 
  1403  0E2D                     	;# 
  1404  0E2E                     	;# 
  1405  0E2F                     	;# 
  1406  0E90                     	;# 
  1407  0E91                     	;# 
  1408  0E92                     	;# 
  1409  0E94                     	;# 
  1410  0E95                     	;# 
  1411  0EA0                     	;# 
  1412  0EA1                     	;# 
  1413  0EA2                     	;# 
  1414  0EA3                     	;# 
  1415  0EA4                     	;# 
  1416  0EA5                     	;# 
  1417  0F0F                     	;# 
  1418  0F10                     	;# 
  1419  0F11                     	;# 
  1420  0F12                     	;# 
  1421  0F13                     	;# 
  1422  0F14                     	;# 
  1423  0F15                     	;# 
  1424  0F16                     	;# 
  1425  0F17                     	;# 
  1426  0F18                     	;# 
  1427  0F19                     	;# 
  1428  0F1A                     	;# 
  1429  0F1B                     	;# 
  1430  0F1C                     	;# 
  1431  0F1D                     	;# 
  1432  0F1E                     	;# 
  1433  0F1F                     	;# 
  1434  0F20                     	;# 
  1435  0F21                     	;# 
  1436  0F22                     	;# 
  1437  0F23                     	;# 
  1438  0F24                     	;# 
  1439  0F25                     	;# 
  1440  0F26                     	;# 
  1441  0F27                     	;# 
  1442  0F28                     	;# 
  1443  0F29                     	;# 
  1444  0F2A                     	;# 
  1445  0F2B                     	;# 
  1446  0F2C                     	;# 
  1447  0F2D                     	;# 
  1448  0F2E                     	;# 
  1449  0F2F                     	;# 
  1450  0F30                     	;# 
  1451  0F31                     	;# 
  1452  0F32                     	;# 
  1453  0F33                     	;# 
  1454  0F34                     	;# 
  1455  0F35                     	;# 
  1456  0F36                     	;# 
  1457  0F37                     	;# 
  1458  0FE4                     	;# 
  1459  0FE5                     	;# 
  1460  0FE6                     	;# 
  1461  0FE7                     	;# 
  1462  0FE8                     	;# 
  1463  0FE9                     	;# 
  1464  0FEA                     	;# 
  1465  0FEB                     	;# 
  1466  0FED                     	;# 
  1467  0FEE                     	;# 
  1468  0FEF                     	;# 
  1469  0000                     	;# 
  1470  0001                     	;# 
  1471  0002                     	;# 
  1472  0003                     	;# 
  1473  0004                     	;# 
  1474  0005                     	;# 
  1475  0006                     	;# 
  1476  0007                     	;# 
  1477  0008                     	;# 
  1478  0009                     	;# 
  1479  000A                     	;# 
  1480  000B                     	;# 
  1481  000C                     	;# 
  1482  000E                     	;# 
  1483  0010                     	;# 
  1484  0011                     	;# 
  1485  0012                     	;# 
  1486  0013                     	;# 
  1487  0014                     	;# 
  1488  0015                     	;# 
  1489  0015                     	;# 
  1490  0016                     	;# 
  1491  0016                     	;# 
  1492  0017                     	;# 
  1493  0018                     	;# 
  1494  0019                     	;# 
  1495  0019                     	;# 
  1496  001A                     	;# 
  1497  001B                     	;# 
  1498  001C                     	;# 
  1499  001D                     	;# 
  1500  001E                     	;# 
  1501  001F                     	;# 
  1502  008C                     	;# 
  1503  008E                     	;# 
  1504  0090                     	;# 
  1505  0091                     	;# 
  1506  0092                     	;# 
  1507  0093                     	;# 
  1508  0094                     	;# 
  1509  0097                     	;# 
  1510  009B                     	;# 
  1511  009B                     	;# 
  1512  009C                     	;# 
  1513  009D                     	;# 
  1514  009E                     	;# 
  1515  009F                     	;# 
  1516  010C                     	;# 
  1517  010E                     	;# 
  1518  0111                     	;# 
  1519  0112                     	;# 
  1520  0113                     	;# 
  1521  0114                     	;# 
  1522  0115                     	;# 
  1523  0116                     	;# 
  1524  0117                     	;# 
  1525  0118                     	;# 
  1526  0119                     	;# 
  1527  018C                     	;# 
  1528  018E                     	;# 
  1529  0199                     	;# 
  1530  0199                     	;# 
  1531  0199                     	;# 
  1532  019A                     	;# 
  1533  019A                     	;# 
  1534  019A                     	;# 
  1535  019B                     	;# 
  1536  019B                     	;# 
  1537  019B                     	;# 
  1538  019B                     	;# 
  1539  019B                     	;# 
  1540  019C                     	;# 
  1541  019C                     	;# 
  1542  019C                     	;# 
  1543  019D                     	;# 
  1544  019D                     	;# 
  1545  019D                     	;# 
  1546  019E                     	;# 
  1547  019E                     	;# 
  1548  019E                     	;# 
  1549  019F                     	;# 
  1550  019F                     	;# 
  1551  019F                     	;# 
  1552  019F                     	;# 
  1553  019F                     	;# 
  1554  020C                     	;# 
  1555  020E                     	;# 
  1556  0211                     	;# 
  1557  0211                     	;# 
  1558  0212                     	;# 
  1559  0212                     	;# 
  1560  0213                     	;# 
  1561  0213                     	;# 
  1562  0214                     	;# 
  1563  0214                     	;# 
  1564  0215                     	;# 
  1565  0215                     	;# 
  1566  0215                     	;# 
  1567  0215                     	;# 
  1568  0216                     	;# 
  1569  0216                     	;# 
  1570  0217                     	;# 
  1571  0217                     	;# 
  1572  0219                     	;# 
  1573  021A                     	;# 
  1574  021B                     	;# 
  1575  021C                     	;# 
  1576  021D                     	;# 
  1577  021D                     	;# 
  1578  021E                     	;# 
  1579  021F                     	;# 
  1580  028C                     	;# 
  1581  028E                     	;# 
  1582  0291                     	;# 
  1583  0291                     	;# 
  1584  0292                     	;# 
  1585  0293                     	;# 
  1586  0294                     	;# 
  1587  0295                     	;# 
  1588  0295                     	;# 
  1589  0296                     	;# 
  1590  0297                     	;# 
  1591  0298                     	;# 
  1592  029F                     	;# 
  1593  030C                     	;# 
  1594  030E                     	;# 
  1595  0311                     	;# 
  1596  0311                     	;# 
  1597  0312                     	;# 
  1598  0313                     	;# 
  1599  0314                     	;# 
  1600  0315                     	;# 
  1601  0315                     	;# 
  1602  0316                     	;# 
  1603  0317                     	;# 
  1604  0318                     	;# 
  1605  038C                     	;# 
  1606  038E                     	;# 
  1607  0391                     	;# 
  1608  0392                     	;# 
  1609  0393                     	;# 
  1610  0397                     	;# 
  1611  0398                     	;# 
  1612  0399                     	;# 
  1613  039A                     	;# 
  1614  039C                     	;# 
  1615  039D                     	;# 
  1616  039E                     	;# 
  1617  039F                     	;# 
  1618  0411                     	;# 
  1619  0411                     	;# 
  1620  0412                     	;# 
  1621  0413                     	;# 
  1622  0414                     	;# 
  1623  0415                     	;# 
  1624  0416                     	;# 
  1625  0417                     	;# 
  1626  0418                     	;# 
  1627  0418                     	;# 
  1628  0419                     	;# 
  1629  041A                     	;# 
  1630  041B                     	;# 
  1631  041C                     	;# 
  1632  041D                     	;# 
  1633  041E                     	;# 
  1634  041F                     	;# 
  1635  0498                     	;# 
  1636  0498                     	;# 
  1637  0499                     	;# 
  1638  049A                     	;# 
  1639  049B                     	;# 
  1640  049B                     	;# 
  1641  049C                     	;# 
  1642  049D                     	;# 
  1643  049E                     	;# 
  1644  049F                     	;# 
  1645  0617                     	;# 
  1646  0618                     	;# 
  1647  0619                     	;# 
  1648  0619                     	;# 
  1649  061A                     	;# 
  1650  061B                     	;# 
  1651  061C                     	;# 
  1652  061C                     	;# 
  1653  061F                     	;# 
  1654  0691                     	;# 
  1655  0692                     	;# 
  1656  0693                     	;# 
  1657  0694                     	;# 
  1658  0695                     	;# 
  1659  0696                     	;# 
  1660  0697                     	;# 
  1661  0698                     	;# 
  1662  0699                     	;# 
  1663  0711                     	;# 
  1664  0712                     	;# 
  1665  0713                     	;# 
  1666  0714                     	;# 
  1667  0715                     	;# 
  1668  0716                     	;# 
  1669  0717                     	;# 
  1670  0718                     	;# 
  1671  0719                     	;# 
  1672  0891                     	;# 
  1673  0891                     	;# 
  1674  0891                     	;# 
  1675  0891                     	;# 
  1676  0891                     	;# 
  1677  0891                     	;# 
  1678  0892                     	;# 
  1679  0892                     	;# 
  1680  0892                     	;# 
  1681  0893                     	;# 
  1682  0893                     	;# 
  1683  0893                     	;# 
  1684  0893                     	;# 
  1685  0893                     	;# 
  1686  0893                     	;# 
  1687  0894                     	;# 
  1688  0894                     	;# 
  1689  0894                     	;# 
  1690  0895                     	;# 
  1691  0895                     	;# 
  1692  0895                     	;# 
  1693  0896                     	;# 
  1694  0896                     	;# 
  1695  0896                     	;# 
  1696  089B                     	;# 
  1697  0911                     	;# 
  1698  0912                     	;# 
  1699  0913                     	;# 
  1700  0914                     	;# 
  1701  0915                     	;# 
  1702  0916                     	;# 
  1703  0918                     	;# 
  1704  0919                     	;# 
  1705  091A                     	;# 
  1706  091B                     	;# 
  1707  091C                     	;# 
  1708  091D                     	;# 
  1709  091E                     	;# 
  1710  091F                     	;# 
  1711  0E0F                     	;# 
  1712  0E10                     	;# 
  1713  0E11                     	;# 
  1714  0E12                     	;# 
  1715  0E13                     	;# 
  1716  0E14                     	;# 
  1717  0E15                     	;# 
  1718  0E16                     	;# 
  1719  0E17                     	;# 
  1720  0E18                     	;# 
  1721  0E19                     	;# 
  1722  0E1A                     	;# 
  1723  0E1B                     	;# 
  1724  0E1C                     	;# 
  1725  0E1D                     	;# 
  1726  0E1E                     	;# 
  1727  0E1F                     	;# 
  1728  0E20                     	;# 
  1729  0E21                     	;# 
  1730  0E22                     	;# 
  1731  0E24                     	;# 
  1732  0E25                     	;# 
  1733  0E28                     	;# 
  1734  0E29                     	;# 
  1735  0E2A                     	;# 
  1736  0E2B                     	;# 
  1737  0E2C                     	;# 
  1738  0E2D                     	;# 
  1739  0E2E                     	;# 
  1740  0E2F                     	;# 
  1741  0E90                     	;# 
  1742  0E91                     	;# 
  1743  0E92                     	;# 
  1744  0E94                     	;# 
  1745  0E95                     	;# 
  1746  0EA0                     	;# 
  1747  0EA1                     	;# 
  1748  0EA2                     	;# 
  1749  0EA3                     	;# 
  1750  0EA4                     	;# 
  1751  0EA5                     	;# 
  1752  0F0F                     	;# 
  1753  0F10                     	;# 
  1754  0F11                     	;# 
  1755  0F12                     	;# 
  1756  0F13                     	;# 
  1757  0F14                     	;# 
  1758  0F15                     	;# 
  1759  0F16                     	;# 
  1760  0F17                     	;# 
  1761  0F18                     	;# 
  1762  0F19                     	;# 
  1763  0F1A                     	;# 
  1764  0F1B                     	;# 
  1765  0F1C                     	;# 
  1766  0F1D                     	;# 
  1767  0F1E                     	;# 
  1768  0F1F                     	;# 
  1769  0F20                     	;# 
  1770  0F21                     	;# 
  1771  0F22                     	;# 
  1772  0F23                     	;# 
  1773  0F24                     	;# 
  1774  0F25                     	;# 
  1775  0F26                     	;# 
  1776  0F27                     	;# 
  1777  0F28                     	;# 
  1778  0F29                     	;# 
  1779  0F2A                     	;# 
  1780  0F2B                     	;# 
  1781  0F2C                     	;# 
  1782  0F2D                     	;# 
  1783  0F2E                     	;# 
  1784  0F2F                     	;# 
  1785  0F30                     	;# 
  1786  0F31                     	;# 
  1787  0F32                     	;# 
  1788  0F33                     	;# 
  1789  0F34                     	;# 
  1790  0F35                     	;# 
  1791  0F36                     	;# 
  1792  0F37                     	;# 
  1793  0FE4                     	;# 
  1794  0FE5                     	;# 
  1795  0FE6                     	;# 
  1796  0FE7                     	;# 
  1797  0FE8                     	;# 
  1798  0FE9                     	;# 
  1799  0FEA                     	;# 
  1800  0FEB                     	;# 
  1801  0FED                     	;# 
  1802  0FEE                     	;# 
  1803  0FEF                     	;# 
  1804                           
  1805                           	psect	idataBANK1
  1806  07FF                     __pidataBANK1:	
  1807                           
  1808                           ;initializer for _romData
  1809  07FF  34C1               	retlw	low (_romDataMap| (0+256))
  1810                           
  1811                           	psect	stringtext1
  1812  1000                     __pstringtext1:	
  1813  1000                     _dpowers:	
  1814  1000  3401               	retlw	1
  1815  1001  3400               	retlw	0
  1816  1002  3400               	retlw	0
  1817  1003  3400               	retlw	0
  1818  1004  340A               	retlw	10
  1819  1005  3400               	retlw	0
  1820  1006  3400               	retlw	0
  1821  1007  3400               	retlw	0
  1822  1008  3464               	retlw	100
  1823  1009  3400               	retlw	0
  1824  100A  3400               	retlw	0
  1825  100B  3400               	retlw	0
  1826  100C  34E8               	retlw	232
  1827  100D  3403               	retlw	3
  1828  100E  3400               	retlw	0
  1829  100F  3400               	retlw	0
  1830  1010  3410               	retlw	16
  1831  1011  3427               	retlw	39
  1832  1012  3400               	retlw	0
  1833  1013  3400               	retlw	0
  1834  1014  34A0               	retlw	160
  1835  1015  3486               	retlw	134
  1836  1016  3401               	retlw	1
  1837  1017  3400               	retlw	0
  1838  1018  3440               	retlw	64
  1839  1019  3442               	retlw	66
  1840  101A  340F               	retlw	15
  1841  101B  3400               	retlw	0
  1842  101C  3480               	retlw	128
  1843  101D  3496               	retlw	150
  1844  101E  3498               	retlw	152
  1845  101F  3400               	retlw	0
  1846  1020  3400               	retlw	0
  1847  1021  34E1               	retlw	225
  1848  1022  34F5               	retlw	245
  1849  1023  3405               	retlw	5
  1850  1024  3400               	retlw	0
  1851  1025  34CA               	retlw	202
  1852  1026  349A               	retlw	154
  1853  1027  343B               	retlw	59
  1854  1028                     __end_of_dpowers:	
  1855                           
  1856                           	psect	stringtext2
  1857  1819                     __pstringtext2:	
  1858  1819                     _n_ADDRESS_P0:	
  1859  1819  34AD               	retlw	173
  1860  181A  3487               	retlw	135
  1861  181B  3466               	retlw	102
  1862  181C  34BC               	retlw	188
  1863  181D  34BB               	retlw	187
  1864  181E                     __end_of_n_ADDRESS_P0:	
  1865                           
  1866                           	psect	stringtext3
  1867  1800                     __pstringtext3:	
  1868  1800                     _n_ADDRESS_MUL:	
  1869  1800  3421               	retlw	33
  1870  1801                     __end_of_n_ADDRESS_MUL:	
  1871  000B                     _INTCONbits	set	11
  1872  0003                     _STATUS	set	3
  1873  0010                     _PIR0bits	set	16
  1874  000E                     _PORTCbits	set	14
  1875  000C                     _PORTAbits	set	12
  1876  009E                     _ADCON1bits	set	158
  1877  009C                     _ADRESH	set	156
  1878  009B                     _ADRESL	set	155
  1879  009D                     _ADCON0bits	set	157
  1880  0097                     _WDTCONbits	set	151
  1881  0090                     _PIE0bits	set	144
  1882  008E                     _TRISCbits	set	142
  1883  008C                     _TRISAbits	set	140
  1884  0117                     _FVRCONbits	set	279
  1885  018E                     _ANSELCbits	set	398
  1886  018C                     _ANSELAbits	set	396
  1887  018E                     _ANSELC	set	398
  1888  018C                     _ANSELA	set	396
  1889  020C                     _WPUAbits	set	524
  1890  020E                     _WPUC	set	526
  1891  020C                     _WPUA	set	524
  1892  0211                     _SSP1BUF	set	529
  1893  0214                     _SSP1STATbits	set	532
  1894  0215                     _SSP1CON1bits	set	533
  1895  028C                     _ODCONAbits	set	652
  1896  028E                     _ODCONC	set	654
  1897  028C                     _ODCONA	set	652
  1898  038E                     _INLVLC	set	910
  1899  038C                     _INLVLA	set	908
  1900  0919                     _OSCCON1bits	set	2329
  1901  0EA0                     _RC0PPSbits	set	3744
  1902  0EA2                     _RC2PPSbits	set	3746
  1903  0EA1                     _RC1PPSbits	set	3745
  1904  1801                     STR_10:	
  1905  1801  3425               	retlw	37	;'%'
  1906  1802  346C               	retlw	108	;'l'
  1907  1803  3475               	retlw	117	;'u'
  1908  1804  342E               	retlw	46	;'.'
  1909  1805  3425               	retlw	37	;'%'
  1910  1806  3436               	retlw	54	;'6'
  1911  1807  342E               	retlw	46	;'.'
  1912  1808  3436               	retlw	54	;'6'
  1913  1809  346C               	retlw	108	;'l'
  1914  180A  3475               	retlw	117	;'u'
  1915  180B  3400               	retlw	0
  1916                           
  1917                           	psect	stringtext4
  1918  180C                     __pstringtext4:	
  1919  180C                     STR_6:	
  1920  180C  3441               	retlw	65	;'A'
  1921  180D  344E               	retlw	78	;'N'
  1922  180E  3443               	retlw	67	;'C'
  1923  180F  3433               	retlw	51	;'3'
  1924  1810  346D               	retlw	109	;'m'
  1925  1811  3456               	retlw	86	;'V'
  1926  1812  3400               	retlw	0
  1927                           
  1928                           	psect	stringtext5
  1929  1813                     __pstringtext5:	
  1930  1813                     STR_7:	
  1931  1813  3452               	retlw	82	;'R'
  1932  1814  3446               	retlw	70	;'F'
  1933  1815  3450               	retlw	80	;'P'
  1934  1816  3457               	retlw	87	;'W'
  1935  1817  3452               	retlw	82	;'R'
  1936  1818  3400               	retlw	0
  1937                           
  1938                           	psect	stringtext6
  1939  181E                     __pstringtext6:	
  1940  181E                     STR_4:	
  1941  181E  3454               	retlw	84	;'T'
  1942  181F  3445               	retlw	69	;'E'
  1943  1820  344D               	retlw	77	;'M'
  1944  1821  3450               	retlw	80	;'P'
  1945  1822  3400               	retlw	0
  1946                           
  1947                           	psect	stringtext7
  1948  1823                     __pstringtext7:	
  1949  1823                     STR_5:	
  1950  1823  3456               	retlw	86	;'V'
  1951  1824  3442               	retlw	66	;'B'
  1952  1825  3441               	retlw	65	;'A'
  1953  1826  3454               	retlw	84	;'T'
  1954  1827  3400               	retlw	0
  1955                           
  1956                           	psect	stringtext8
  1957  1828                     __pstringtext8:	
  1958  1828                     STR_9:	
  1959  1828  3442               	retlw	66	;'B'
  1960  1829  344F               	retlw	79	;'O'
  1961  182A  344F               	retlw	79	;'O'
  1962  182B  3454               	retlw	84	;'T'
  1963  182C  3400               	retlw	0
  1964                           
  1965                           	psect	stringtext9
  1966  182D                     __pstringtext9:	
  1967  182D                     STR_3:	
  1968  182D  3444               	retlw	68	;'D'
  1969  182E  3442               	retlw	66	;'B'
  1970  182F  3447               	retlw	71	;'G'
  1971  1830  3400               	retlw	0
  1972                           
  1973                           	psect	stringtext10
  1974  1831                     __pstringtext10:	
  1975  1831                     STR_8:	
  1976  1831  3455               	retlw	85	;'U'
  1977  1832  3457               	retlw	87	;'W'
  1978  1833  3454               	retlw	84	;'T'
  1979  1834  3400               	retlw	0
  1980                           
  1981                           	psect	stringtext11
  1982  1835                     __pstringtext11:	
  1983  1835                     STR_1:	
  1984  1835  342F               	retlw	47	;'/'
  1985  1836  3400               	retlw	0
  1986                           
  1987                           	psect	stringtext12
  1988  0000                     __pstringtext12:	
  1989  1835                     
  1990                           ; #config settings
  1991  0000                     
  1992                           	psect	cinit
  1993  0011                     start_initialization:	
  1994  0011                     __initialization:	
  1995                           
  1996                           ; Initialize objects allocated to BANK1
  1997  0011  0021               	movlb	1	; select bank1
  1998  0012  3187  27FF  3180   	fcall	__pidataBANK1	;fetch initializer
  1999  0015  00EB               	movwf	__pdataBANK1& (0+127)
  2000                           
  2001                           ; Clear objects allocated to COMMON
  2002  0016  01FD               	clrf	__pbssCOMMON& (0+127)
  2003                           
  2004                           ; Clear objects allocated to BANK1
  2005  0017  01E8               	clrf	__pbssBANK1& (0+127)
  2006  0018  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  2007  0019  01EA               	clrf	(__pbssBANK1+2)& (0+127)
  2008                           
  2009                           ; Clear objects allocated to BANK2
  2010  001A  3050               	movlw	low __pbssBANK2
  2011  001B  0084               	movwf	4
  2012  001C  3001               	movlw	high __pbssBANK2
  2013  001D  0085               	movwf	5
  2014  001E  3014               	movlw	20
  2015  001F  3195  25A2  3180   	fcall	clear_ram0
  2016                           
  2017                           ; Clear objects allocated to BANK3
  2018  0022  30A0               	movlw	low __pbssBANK3
  2019  0023  0084               	movwf	4
  2020  0024  3001               	movlw	high __pbssBANK3
  2021  0025  0085               	movwf	5
  2022  0026  303D               	movlw	61
  2023  0027  3195  25A2         	fcall	clear_ram0
  2024  0029                     end_of_initialization:	
  2025                           ;End of C runtime variable initialization code
  2026                           
  2027  0029                     __end_of__initialization:	
  2028  0029  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2029  002A  0020               	movlb	0
  2030  002B  318D  2DFE         	ljmp	_main	;jump to C main() function
  2031                           
  2032                           	psect	bssCOMMON
  2033  007D                     __pbssCOMMON:	
  2034  007D                     _nrf24l01:	
  2035  007D                     	ds	1
  2036                           
  2037                           	psect	bssBANK1
  2038  00E8                     __pbssBANK1:	
  2039  00E8                     _TXPacket:	
  2040  00E8                     	ds	2
  2041  00EA                     _sleepLoop:	
  2042  00EA                     	ds	1
  2043                           
  2044                           	psect	dataBANK1
  2045  00EB                     __pdataBANK1:	
  2046  00EB                     _romData:	
  2047  00EB                     	ds	1
  2048                           
  2049                           	psect	bssBANK2
  2050  0150                     __pbssBANK2:	
  2051  0150                     _counter:	
  2052  0150                     	ds	3
  2053  0153                     ftoa@buf:	
  2054  0153                     	ds	17
  2055                           
  2056                           	psect	bssBANK3
  2057  01A0                     __pbssBANK3:	
  2058  01A0                     _RXPacket:	
  2059  01A0                     	ds	33
  2060  01C1                     _romDataMap:	
  2061  01C1                     	ds	28
  2062                           
  2063                           	psect	clrtext
  2064  15A2                     clear_ram0:	
  2065                           ;	Called with FSR0 containing the base address, and
  2066                           ;	WREG with the size to clear
  2067                           
  2068  15A2  0064               	clrwdt	;clear the watchdog before getting into this loop
  2069  15A3                     clrloop0:	
  2070  15A3  0180               	clrf	0	;clear RAM location pointed to by FSR
  2071  15A4  3101               	addfsr 0,1
  2072  15A5  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2073  15A6  2DA3               	goto	clrloop0	;have we reached the end yet?
  2074  15A7  3400               	retlw	0	;all done for this memory range, return
  2075                           
  2076                           	psect	cstackBANK2
  2077  0120                     __pcstackBANK2:	
  2078  0120                     loop@vt:	
  2079                           
  2080                           ; 3 bytes @ 0x0
  2081  0120                     	ds	3
  2082  0123                     loop@ta:	
  2083                           
  2084                           ; 3 bytes @ 0x3
  2085  0123                     	ds	3
  2086  0126                     _loop$2064:	
  2087                           
  2088                           ; 3 bytes @ 0x6
  2089  0126                     	ds	3
  2090  0129                     _loop$2065:	
  2091                           
  2092                           ; 3 bytes @ 0x9
  2093  0129                     	ds	3
  2094  012C                     _loop$877:	
  2095                           
  2096                           ; 2 bytes @ 0xC
  2097  012C                     	ds	2
  2098  012E                     loop@rfSetup:	
  2099                           
  2100                           ; 1 bytes @ 0xE
  2101  012E                     	ds	1
  2102  012F                     loop@packet:	
  2103                           
  2104                           ; 33 bytes @ 0xF
  2105  012F                     	ds	33
  2106                           
  2107                           	psect	cstackBANK1
  2108  00A0                     __pcstackBANK1:	
  2109  00A0                     ___fttol@sign1:	
  2110                           
  2111                           ; 1 bytes @ 0x0
  2112  00A0                     	ds	1
  2113  00A1                     ___fttol@lval:	
  2114                           
  2115                           ; 4 bytes @ 0x1
  2116  00A1                     	ds	4
  2117  00A5                     ___fttol@exp1:	
  2118                           
  2119                           ; 1 bytes @ 0x5
  2120  00A5                     	ds	1
  2121  00A6                     ?_ftoa:	
  2122  00A6                     ftoa@f:	
  2123                           ; 1 bytes @ 0x6
  2124                           
  2125                           
  2126                           ; 3 bytes @ 0x6
  2127  00A6                     	ds	3
  2128  00A9                     ftoa@status:	
  2129                           
  2130                           ; 1 bytes @ 0x9
  2131  00A9                     	ds	1
  2132  00AA                     ftoa@rem:	
  2133                           
  2134                           ; 4 bytes @ 0xA
  2135  00AA                     	ds	4
  2136  00AE                     ftoa@l:	
  2137                           
  2138                           ; 4 bytes @ 0xE
  2139  00AE                     	ds	4
  2140  00B2                     ftoa@cp:	
  2141                           
  2142                           ; 1 bytes @ 0x12
  2143  00B2                     	ds	1
  2144  00B3                     ?_strcat:	
  2145  00B3                     strcat@to:	
  2146                           ; 2 bytes @ 0x13
  2147                           
  2148                           
  2149                           ; 2 bytes @ 0x13
  2150  00B3                     	ds	2
  2151  00B5                     strcat@from:	
  2152                           
  2153                           ; 2 bytes @ 0x15
  2154  00B5                     	ds	2
  2155  00B7                     strcat@cp:	
  2156                           
  2157                           ; 2 bytes @ 0x17
  2158  00B7                     	ds	2
  2159  00B9                     ?_setMessage:	
  2160  00B9                     setMessage@packet:	
  2161                           ; 1 bytes @ 0x19
  2162                           
  2163                           
  2164                           ; 2 bytes @ 0x19
  2165  00B9                     	ds	2
  2166  00BB                     setMessage@topic:	
  2167                           
  2168                           ; 2 bytes @ 0x1B
  2169  00BB                     	ds	2
  2170  00BD                     setMessage@value:	
  2171                           
  2172                           ; 3 bytes @ 0x1D
  2173  00BD                     	ds	3
  2174  00C0                     ??_setMessage:	
  2175                           
  2176                           ; 1 bytes @ 0x20
  2177  00C0                     	ds	1
  2178  00C1                     setMessage@status:	
  2179                           
  2180                           ; 2 bytes @ 0x21
  2181  00C1                     	ds	2
  2182  00C3                     ??_loop:	
  2183                           
  2184                           ; 1 bytes @ 0x23
  2185  00C3                     	ds	1
  2186  00C4                     ??_main:	
  2187                           
  2188                           ; 1 bytes @ 0x24
  2189  00C4                     	ds	1
  2190  00C5                     main@bootStatus:	
  2191                           
  2192                           ; 1 bytes @ 0x25
  2193  00C5                     	ds	1
  2194  00C6                     main@pipe:	
  2195                           
  2196                           ; 1 bytes @ 0x26
  2197  00C6                     	ds	1
  2198  00C7                     main@packet:	
  2199                           
  2200                           ; 33 bytes @ 0x27
  2201  00C7                     	ds	33
  2202                           
  2203                           	psect	cstackCOMMON
  2204  0070                     __pcstackCOMMON:	
  2205  0070                     ?_isdigit:	
  2206  0070                     ?_nrf24l01ISR:	
  2207                           ; 1 bit 
  2208                           
  2209  0070                     ?_nrf24l01GetRXPacket:	
  2210                           ; 1 bytes @ 0x0
  2211                           
  2212  0070                     ?_nrf24l01SendACK:	
  2213                           ; 1 bytes @ 0x0
  2214                           
  2215  0070                     ?_nrf24l01SetRXMode:	
  2216                           ; 1 bytes @ 0x0
  2217                           
  2218  0070                     ?_nrf24l01Init:	
  2219                           ; 1 bytes @ 0x0
  2220                           
  2221  0070                     ?_nrf24l01SetTXPipe:	
  2222                           ; 1 bytes @ 0x0
  2223                           
  2224  0070                     ?_nrf24l01SetRXPipe:	
  2225                           ; 1 bytes @ 0x0
  2226                           
  2227  0070                     ?_nrf24l01CELow:	
  2228                           ; 1 bytes @ 0x0
  2229                           
  2230  0070                     ??_nrf24l01CELow:	
  2231                           ; 1 bytes @ 0x0
  2232                           
  2233  0070                     ?_nrf24l01CEHigh:	
  2234                           ; 1 bytes @ 0x0
  2235                           
  2236  0070                     ??_nrf24l01CEHigh:	
  2237                           ; 1 bytes @ 0x0
  2238                           
  2239  0070                     ?_nrf24l01CSLow:	
  2240                           ; 1 bytes @ 0x0
  2241                           
  2242  0070                     ??_nrf24l01CSLow:	
  2243                           ; 1 bytes @ 0x0
  2244                           
  2245  0070                     ?_nrf24l01CSHigh:	
  2246                           ; 1 bytes @ 0x0
  2247                           
  2248  0070                     ??_nrf24l01CSHigh:	
  2249                           ; 1 bytes @ 0x0
  2250                           
  2251  0070                     ?_nrf24l01InterfaceInit:	
  2252                           ; 1 bytes @ 0x0
  2253                           
  2254  0070                     ?_nrf24l01SPISend:	
  2255                           ; 1 bytes @ 0x0
  2256                           
  2257  0070                     ??_nrf24l01SPISend:	
  2258                           ; 1 bytes @ 0x0
  2259                           
  2260  0070                     ?_nrf24l01SPIStart:	
  2261                           ; 1 bytes @ 0x0
  2262                           
  2263  0070                     ??_nrf24l01SPIStart:	
  2264                           ; 1 bytes @ 0x0
  2265                           
  2266  0070                     ?_nrf24l01SPIEnd:	
  2267                           ; 1 bytes @ 0x0
  2268                           
  2269  0070                     ??_nrf24l01SPIEnd:	
  2270                           ; 1 bytes @ 0x0
  2271                           
  2272  0070                     ?_enableInterrupts:	
  2273                           ; 1 bytes @ 0x0
  2274                           
  2275  0070                     ??_enableInterrupts:	
  2276                           ; 1 bytes @ 0x0
  2277                           
  2278  0070                     ?_exception:	
  2279                           ; 1 bytes @ 0x0
  2280                           
  2281  0070                     ?_ISR:	
  2282                           ; 1 bytes @ 0x0
  2283                           
  2284  0070                     ?_doWDTSleep:	
  2285                           ; 1 bytes @ 0x0
  2286                           
  2287  0070                     ?_handleRXData:	
  2288                           ; 1 bytes @ 0x0
  2289                           
  2290  0070                     ?_checkTXPower:	
  2291                           ; 1 bytes @ 0x0
  2292                           
  2293  0070                     ?_loop:	
  2294                           ; 1 bytes @ 0x0
  2295                           
  2296  0070                     ?_nrf24l01GetPipe:	
  2297                           ; 1 bytes @ 0x0
  2298                           
  2299  0070                     ?_main:	
  2300                           ; 1 bytes @ 0x0
  2301                           
  2302  0070                     ?_nrf24l01CheckACK:	
  2303                           ; 1 bytes @ 0x0
  2304                           
  2305  0070                     ?_nrf24l01ReceivePacket:	
  2306                           ; 1 bytes @ 0x0
  2307                           
  2308  0070                     ?_nrf24l01InitRegisters:	
  2309                           ; 1 bytes @ 0x0
  2310                           
  2311  0070                     ?i1_exception:	
  2312                           ; 1 bytes @ 0x0
  2313                           
  2314  0070                     ??i1_exception:	
  2315                           ; 1 bytes @ 0x0
  2316                           
  2317  0070                     ?i1_nrf24l01SetRXMode:	
  2318                           ; 1 bytes @ 0x0
  2319                           
  2320  0070                     ?i1_nrf24l01CheckACK:	
  2321                           ; 1 bytes @ 0x0
  2322                           
  2323  0070                     ?i1_nrf24l01ReceivePacket:	
  2324                           ; 1 bytes @ 0x0
  2325                           
  2326  0070                     ?i1_nrf24l01ISR:	
  2327                           ; 1 bytes @ 0x0
  2328                           
  2329  0070                     ?i1_memset:	
  2330                           ; 1 bytes @ 0x0
  2331                           
  2332  0070                     ?i1_strcmp:	
  2333                           ; 1 bytes @ 0x0
  2334                           
  2335  0070                     nrf24l01SPISend@data:	
  2336                           ; 2 bytes @ 0x0
  2337                           
  2338  0070                     enableInterrupts@enable:	
  2339                           ; 1 bytes @ 0x0
  2340                           
  2341  0070                     exception@exception:	
  2342                           ; 1 bytes @ 0x0
  2343                           
  2344  0070                     i1memset@p1:	
  2345                           ; 1 bytes @ 0x0
  2346                           
  2347  0070                     i1strcmp@s1:	
  2348                           ; 2 bytes @ 0x0
  2349                           
  2350                           
  2351                           ; 2 bytes @ 0x0
  2352  0070                     	ds	1
  2353  0071                     ?i1_nrf24l01Send:	
  2354  0071                     i1nrf24l01Send@data:	
  2355                           ; 1 bytes @ 0x1
  2356                           
  2357                           
  2358                           ; 1 bytes @ 0x1
  2359  0071                     	ds	1
  2360  0072                     ??i1_nrf24l01Send:	
  2361  0072                     i1strcmp@s2:	
  2362                           ; 1 bytes @ 0x2
  2363                           
  2364  0072                     i1memset@c:	
  2365                           ; 1 bytes @ 0x2
  2366                           
  2367                           
  2368                           ; 2 bytes @ 0x2
  2369  0072                     	ds	1
  2370  0073                     ??i1_strcmp:	
  2371  0073                     i1nrf24l01Send@command:	
  2372                           ; 1 bytes @ 0x3
  2373                           
  2374                           
  2375                           ; 1 bytes @ 0x3
  2376  0073                     	ds	1
  2377  0074                     ??i1_nrf24l01SetRXMode:	
  2378  0074                     i1strcmp@r:	
  2379                           ; 1 bytes @ 0x4
  2380                           
  2381  0074                     i1memset@n:	
  2382                           ; 1 bytes @ 0x4
  2383                           
  2384                           
  2385                           ; 2 bytes @ 0x4
  2386  0074                     	ds	1
  2387  0075                     i1nrf24l01SetRXMode@config:	
  2388                           
  2389                           ; 1 bytes @ 0x5
  2390  0075                     	ds	1
  2391  0076                     ??i1_memset:	
  2392  0076                     i1nrf24l01SetRXMode@rxMode:	
  2393                           ; 1 bytes @ 0x6
  2394                           
  2395  0076                     i1memset@p:	
  2396                           ; 1 bytes @ 0x6
  2397                           
  2398                           
  2399                           ; 2 bytes @ 0x6
  2400  0076                     	ds	1
  2401  0077                     ??i1_nrf24l01CheckACK:	
  2402                           
  2403                           ; 1 bytes @ 0x7
  2404  0077                     	ds	1
  2405  0078                     ??i1_nrf24l01ReceivePacket:	
  2406                           
  2407                           ; 1 bytes @ 0x8
  2408  0078                     	ds	1
  2409  0079                     i1nrf24l01ReceivePacket@width:	
  2410                           
  2411                           ; 1 bytes @ 0x9
  2412  0079                     	ds	1
  2413  007A                     i1nrf24l01ReceivePacket@i:	
  2414                           
  2415                           ; 1 bytes @ 0xA
  2416  007A                     	ds	1
  2417  007B                     ??i1_nrf24l01ISR:	
  2418                           
  2419                           ; 1 bytes @ 0xB
  2420  007B                     	ds	1
  2421  007C                     i1nrf24l01ISR@status:	
  2422                           
  2423                           ; 1 bytes @ 0xC
  2424  007C                     	ds	1
  2425  007D                     ??_ISR:	
  2426                           
  2427                           	psect	cstackBANK0
  2428  0020                     __pcstackBANK0:	
  2429                           ; 1 bytes @ 0xD
  2430                           
  2431  0020                     ?___ftge:	
  2432  0020                     ??_nrf24l01GetRXPacket:	
  2433                           ; 1 bit 
  2434                           
  2435  0020                     ?_nrf24l01Send:	
  2436                           ; 1 bytes @ 0x0
  2437                           
  2438  0020                     ?_strcpy:	
  2439                           ; 1 bytes @ 0x0
  2440                           
  2441  0020                     ??_isdigit:	
  2442                           ; 1 bytes @ 0x0
  2443                           
  2444  0020                     ??_nrf24l01InterfaceInit:	
  2445                           ; 1 bytes @ 0x0
  2446                           
  2447  0020                     ??_exception:	
  2448                           ; 1 bytes @ 0x0
  2449                           
  2450  0020                     ??_doWDTSleep:	
  2451                           ; 1 bytes @ 0x0
  2452                           
  2453  0020                     ?___bmul:	
  2454                           ; 1 bytes @ 0x0
  2455                           
  2456  0020                     ?_memset:	
  2457                           ; 1 bytes @ 0x0
  2458                           
  2459  0020                     ?_strlen:	
  2460                           ; 2 bytes @ 0x0
  2461                           
  2462  0020                     ?_strcmp:	
  2463                           ; 2 bytes @ 0x0
  2464                           
  2465  0020                     ?___wmul:	
  2466                           ; 2 bytes @ 0x0
  2467                           
  2468  0020                     ?___lwmod:	
  2469                           ; 2 bytes @ 0x0
  2470                           
  2471  0020                     ?___ftpack:	
  2472                           ; 2 bytes @ 0x0
  2473                           
  2474  0020                     ?___lldiv:	
  2475                           ; 3 bytes @ 0x0
  2476                           
  2477  0020                     nrf24l01Send@data:	
  2478                           ; 4 bytes @ 0x0
  2479                           
  2480  0020                     ___bmul@multiplicand:	
  2481                           ; 1 bytes @ 0x0
  2482                           
  2483  0020                     _isdigit$1813:	
  2484                           ; 1 bytes @ 0x0
  2485                           
  2486  0020                     ___wmul@multiplier:	
  2487                           ; 1 bytes @ 0x0
  2488                           
  2489  0020                     ___lwmod@divisor:	
  2490                           ; 2 bytes @ 0x0
  2491                           
  2492  0020                     memset@p1:	
  2493                           ; 2 bytes @ 0x0
  2494                           
  2495  0020                     strcmp@s1:	
  2496                           ; 2 bytes @ 0x0
  2497                           
  2498  0020                     strcpy@from:	
  2499                           ; 2 bytes @ 0x0
  2500                           
  2501  0020                     strlen@s:	
  2502                           ; 2 bytes @ 0x0
  2503                           
  2504  0020                     ___ftpack@arg:	
  2505                           ; 2 bytes @ 0x0
  2506                           
  2507  0020                     ___ftge@ff1:	
  2508                           ; 3 bytes @ 0x0
  2509                           
  2510  0020                     ___lldiv@divisor:	
  2511                           ; 3 bytes @ 0x0
  2512                           
  2513                           
  2514                           ; 4 bytes @ 0x0
  2515  0020                     	ds	1
  2516  0021                     ??_nrf24l01Send:	
  2517  0021                     ??___bmul:	
  2518                           ; 1 bytes @ 0x1
  2519                           
  2520  0021                     doWDTSleep@wdtps:	
  2521                           ; 1 bytes @ 0x1
  2522                           
  2523  0021                     isdigit@c:	
  2524                           ; 1 bytes @ 0x1
  2525                           
  2526                           
  2527                           ; 1 bytes @ 0x1
  2528  0021                     	ds	1
  2529  0022                     ??_strlen:	
  2530  0022                     ??_strcpy:	
  2531                           ; 1 bytes @ 0x2
  2532                           
  2533  0022                     nrf24l01Send@command:	
  2534                           ; 1 bytes @ 0x2
  2535                           
  2536  0022                     ___bmul@product:	
  2537                           ; 1 bytes @ 0x2
  2538                           
  2539  0022                     strcmp@s2:	
  2540                           ; 1 bytes @ 0x2
  2541                           
  2542  0022                     ___wmul@multiplicand:	
  2543                           ; 1 bytes @ 0x2
  2544                           
  2545  0022                     ___lwmod@dividend:	
  2546                           ; 2 bytes @ 0x2
  2547                           
  2548  0022                     memset@c:	
  2549                           ; 2 bytes @ 0x2
  2550                           
  2551                           
  2552                           ; 2 bytes @ 0x2
  2553  0022                     	ds	1
  2554  0023                     ??_nrf24l01SetRXMode:	
  2555  0023                     ?_nrf24l01ChangeTXPower:	
  2556                           ; 1 bytes @ 0x3
  2557                           
  2558  0023                     ??_nrf24l01SetRXPipe:	
  2559                           ; 1 bytes @ 0x3
  2560                           
  2561  0023                     ??_strcmp:	
  2562                           ; 1 bytes @ 0x3
  2563                           
  2564  0023                     ___bmul@multiplier:	
  2565                           ; 1 bytes @ 0x3
  2566                           
  2567  0023                     ___ftpack@exp:	
  2568                           ; 1 bytes @ 0x3
  2569                           
  2570  0023                     strcpy@to:	
  2571                           ; 1 bytes @ 0x3
  2572                           
  2573  0023                     nrf24l01ChangeTXPower@addPower:	
  2574                           ; 1 bytes @ 0x3
  2575                           
  2576  0023                     ___ftge@ff2:	
  2577                           ; 2 bytes @ 0x3
  2578                           
  2579                           
  2580                           ; 3 bytes @ 0x3
  2581  0023                     	ds	1
  2582  0024                     ??_nrf24l01SetTXPipe:	
  2583  0024                     ??___wmul:	
  2584                           ; 1 bytes @ 0x4
  2585                           
  2586  0024                     ??___lwmod:	
  2587                           ; 1 bytes @ 0x4
  2588                           
  2589  0024                     nrf24l01SetRXMode@config:	
  2590                           ; 1 bytes @ 0x4
  2591                           
  2592  0024                     ___ftpack@sign:	
  2593                           ; 1 bytes @ 0x4
  2594                           
  2595  0024                     strcmp@r:	
  2596                           ; 1 bytes @ 0x4
  2597                           
  2598  0024                     strcpy@cp:	
  2599                           ; 1 bytes @ 0x4
  2600                           
  2601  0024                     ___wmul@product:	
  2602                           ; 1 bytes @ 0x4
  2603                           
  2604  0024                     memset@n:	
  2605                           ; 2 bytes @ 0x4
  2606                           
  2607  0024                     strlen@cp:	
  2608                           ; 2 bytes @ 0x4
  2609                           
  2610  0024                     ___lldiv@dividend:	
  2611                           ; 2 bytes @ 0x4
  2612                           
  2613                           
  2614                           ; 4 bytes @ 0x4
  2615  0024                     	ds	1
  2616  0025                     ??_nrf24l01ChangeTXPower:	
  2617  0025                     ??___ftpack:	
  2618                           ; 1 bytes @ 0x5
  2619                           
  2620  0025                     nrf24l01SetRXMode@rxMode:	
  2621                           ; 1 bytes @ 0x5
  2622                           
  2623  0025                     nrf24l01SetRXPipe@pipe:	
  2624                           ; 1 bytes @ 0x5
  2625                           
  2626  0025                     ___lwmod@counter:	
  2627                           ; 1 bytes @ 0x5
  2628                           
  2629                           
  2630                           ; 1 bytes @ 0x5
  2631  0025                     	ds	1
  2632  0026                     ??_memset:	
  2633  0026                     ??_nrf24l01GetPipe:	
  2634                           ; 1 bytes @ 0x6
  2635                           
  2636  0026                     ??_nrf24l01CheckACK:	
  2637                           ; 1 bytes @ 0x6
  2638                           
  2639  0026                     ??___ftge:	
  2640                           ; 1 bytes @ 0x6
  2641                           
  2642  0026                     nrf24l01ChangeTXPower@rfSetup:	
  2643                           ; 1 bytes @ 0x6
  2644                           
  2645  0026                     nrf24l01SetTXPipe@pipe:	
  2646                           ; 1 bytes @ 0x6
  2647                           
  2648  0026                     nrf24l01SetRXPipe@enRXAddr:	
  2649                           ; 1 bytes @ 0x6
  2650                           
  2651  0026                     memset@p:	
  2652                           ; 1 bytes @ 0x6
  2653                           
  2654                           
  2655                           ; 2 bytes @ 0x6
  2656  0026                     	ds	1
  2657  0027                     ??_checkTXPower:	
  2658  0027                     ??_nrf24l01InitRegisters:	
  2659                           ; 1 bytes @ 0x7
  2660                           
  2661                           
  2662                           ; 1 bytes @ 0x7
  2663  0027                     	ds	1
  2664  0028                     ??_nrf24l01ReceivePacket:	
  2665  0028                     ??___lldiv:	
  2666                           ; 1 bytes @ 0x8
  2667                           
  2668  0028                     ?___awtoft:	
  2669                           ; 1 bytes @ 0x8
  2670                           
  2671  0028                     ?___lbtoft:	
  2672                           ; 3 bytes @ 0x8
  2673                           
  2674  0028                     ?___lltoft:	
  2675                           ; 3 bytes @ 0x8
  2676                           
  2677  0028                     checkTXPower@rxPacket:	
  2678                           ; 3 bytes @ 0x8
  2679                           
  2680  0028                     nrf24l01GetPipe@pipe:	
  2681                           ; 1 bytes @ 0x8
  2682                           
  2683  0028                     ___awtoft@c:	
  2684                           ; 1 bytes @ 0x8
  2685                           
  2686  0028                     ___lltoft@c:	
  2687                           ; 2 bytes @ 0x8
  2688                           
  2689                           
  2690                           ; 4 bytes @ 0x8
  2691  0028                     	ds	1
  2692  0029                     nrf24l01GetPipe@name:	
  2693  0029                     nrf24l01ReceivePacket@width:	
  2694                           ; 1 bytes @ 0x9
  2695                           
  2696  0029                     nrf24l01InitRegisters@channel:	
  2697                           ; 1 bytes @ 0x9
  2698                           
  2699  0029                     ___lldiv@quotient:	
  2700                           ; 1 bytes @ 0x9
  2701                           
  2702                           
  2703                           ; 4 bytes @ 0x9
  2704  0029                     	ds	1
  2705  002A                     nrf24l01GetPipe@i:	
  2706  002A                     nrf24l01ReceivePacket@i:	
  2707                           ; 1 bytes @ 0xA
  2708                           
  2709  002A                     nrf24l01InitRegisters@setupAW:	
  2710                           ; 1 bytes @ 0xA
  2711                           
  2712                           
  2713                           ; 1 bytes @ 0xA
  2714  002A                     	ds	1
  2715  002B                     ??_nrf24l01ISR:	
  2716  002B                     ??___awtoft:	
  2717                           ; 1 bytes @ 0xB
  2718                           
  2719  002B                     ??___lbtoft:	
  2720                           ; 1 bytes @ 0xB
  2721                           
  2722  002B                     nrf24l01InitRegisters@feature:	
  2723                           ; 1 bytes @ 0xB
  2724                           
  2725                           
  2726                           ; 1 bytes @ 0xB
  2727  002B                     	ds	1
  2728  002C                     ??___lltoft:	
  2729  002C                     nrf24l01ISR@status:	
  2730                           ; 1 bytes @ 0xC
  2731                           
  2732  002C                     nrf24l01InitRegisters@rfSetup:	
  2733                           ; 1 bytes @ 0xC
  2734                           
  2735                           
  2736                           ; 1 bytes @ 0xC
  2737  002C                     	ds	1
  2738  002D                     ?_nrf24l01SendPacket:	
  2739  002D                     nrf24l01InitRegisters@status:	
  2740                           ; 1 bytes @ 0xD
  2741                           
  2742  002D                     ___lldiv@counter:	
  2743                           ; 1 bytes @ 0xD
  2744                           
  2745  002D                     ___awtoft@sign:	
  2746                           ; 1 bytes @ 0xD
  2747                           
  2748  002D                     ___lltoft@exp:	
  2749                           ; 1 bytes @ 0xD
  2750                           
  2751  002D                     nrf24l01SendPacket@Packet:	
  2752                           ; 1 bytes @ 0xD
  2753                           
  2754                           
  2755                           ; 2 bytes @ 0xD
  2756  002D                     	ds	1
  2757  002E                     ?___ftadd:	
  2758  002E                     ?___llmod:	
  2759                           ; 3 bytes @ 0xE
  2760                           
  2761  002E                     nrf24l01InitRegisters@enAA:	
  2762                           ; 4 bytes @ 0xE
  2763                           
  2764  002E                     ___ftadd@f1:	
  2765                           ; 1 bytes @ 0xE
  2766                           
  2767  002E                     ___llmod@divisor:	
  2768                           ; 3 bytes @ 0xE
  2769                           
  2770                           
  2771                           ; 4 bytes @ 0xE
  2772  002E                     	ds	1
  2773  002F                     ??_nrf24l01SendPacket:	
  2774  002F                     nrf24l01InitRegisters@DynPD:	
  2775                           ; 1 bytes @ 0xF
  2776                           
  2777  002F                     ___lbtoft@c:	
  2778                           ; 1 bytes @ 0xF
  2779                           
  2780                           
  2781                           ; 1 bytes @ 0xF
  2782  002F                     	ds	1
  2783  0030                     nrf24l01InitRegisters@config:	
  2784                           
  2785                           ; 1 bytes @ 0x10
  2786  0030                     	ds	1
  2787  0031                     nrf24l01InitRegisters@i:	
  2788  0031                     ___ftadd@f2:	
  2789                           ; 2 bytes @ 0x11
  2790                           
  2791                           
  2792                           ; 3 bytes @ 0x11
  2793  0031                     	ds	1
  2794  0032                     ___llmod@dividend:	
  2795                           
  2796                           ; 4 bytes @ 0x12
  2797  0032                     	ds	1
  2798  0033                     ??_nrf24l01Init:	
  2799  0033                     nrf24l01SendPacket@i:	
  2800                           ; 1 bytes @ 0x13
  2801                           
  2802                           
  2803                           ; 1 bytes @ 0x13
  2804  0033                     	ds	1
  2805  0034                     ??_nrf24l01SendACK:	
  2806  0034                     ??___ftadd:	
  2807                           ; 1 bytes @ 0x14
  2808                           
  2809                           
  2810                           ; 1 bytes @ 0x14
  2811  0034                     	ds	1
  2812  0035                     nrf24l01SendACK@packet:	
  2813                           
  2814                           ; 1 bytes @ 0x15
  2815  0035                     	ds	1
  2816  0036                     ??_handleRXData:	
  2817  0036                     ??___llmod:	
  2818                           ; 1 bytes @ 0x16
  2819                           
  2820                           
  2821                           ; 1 bytes @ 0x16
  2822  0036                     	ds	1
  2823  0037                     handleRXData@RXPacket:	
  2824  0037                     ___llmod@counter:	
  2825                           ; 1 bytes @ 0x17
  2826                           
  2827                           
  2828                           ; 1 bytes @ 0x17
  2829  0037                     	ds	1
  2830  0038                     ?_sleep:	
  2831  0038                     ?_sprintf:	
  2832                           ; 1 bytes @ 0x18
  2833                           
  2834  0038                     ___ftadd@sign:	
  2835                           ; 2 bytes @ 0x18
  2836                           
  2837  0038                     sleep@milliseconds:	
  2838                           ; 1 bytes @ 0x18
  2839                           
  2840  0038                     sprintf@f:	
  2841                           ; 2 bytes @ 0x18
  2842                           
  2843                           
  2844                           ; 2 bytes @ 0x18
  2845  0038                     	ds	1
  2846  0039                     ___ftadd@exp2:	
  2847                           
  2848                           ; 1 bytes @ 0x19
  2849  0039                     	ds	1
  2850  003A                     ??_sleep:	
  2851  003A                     ___ftadd@exp1:	
  2852                           ; 1 bytes @ 0x1A
  2853                           
  2854                           
  2855                           ; 1 bytes @ 0x1A
  2856  003A                     	ds	1
  2857  003B                     ?___ftdiv:	
  2858  003B                     ?___ftsub:	
  2859                           ; 3 bytes @ 0x1B
  2860                           
  2861  003B                     ___ftdiv@f2:	
  2862                           ; 3 bytes @ 0x1B
  2863                           
  2864  003B                     ___ftsub@f2:	
  2865                           ; 3 bytes @ 0x1B
  2866                           
  2867                           
  2868                           ; 3 bytes @ 0x1B
  2869  003B                     	ds	3
  2870  003E                     ___ftdiv@f1:	
  2871  003E                     ___ftsub@f1:	
  2872                           ; 3 bytes @ 0x1E
  2873                           
  2874                           
  2875                           ; 3 bytes @ 0x1E
  2876  003E                     	ds	3
  2877  0041                     ??___ftdiv:	
  2878  0041                     ??___ftsub:	
  2879                           ; 1 bytes @ 0x21
  2880                           
  2881                           
  2882                           ; 1 bytes @ 0x21
  2883  0041                     	ds	1
  2884  0042                     ??_sprintf:	
  2885                           
  2886                           ; 1 bytes @ 0x22
  2887  0042                     	ds	3
  2888  0045                     ___ftdiv@cntr:	
  2889                           
  2890                           ; 1 bytes @ 0x25
  2891  0045                     	ds	1
  2892  0046                     ___ftdiv@f3:	
  2893                           
  2894                           ; 3 bytes @ 0x26
  2895  0046                     	ds	2
  2896  0048                     sprintf@flag:	
  2897                           
  2898                           ; 1 bytes @ 0x28
  2899  0048                     	ds	1
  2900  0049                     sprintf@ap:	
  2901  0049                     ___ftdiv@exp:	
  2902                           ; 1 bytes @ 0x29
  2903                           
  2904                           
  2905                           ; 1 bytes @ 0x29
  2906  0049                     	ds	1
  2907  004A                     ___ftdiv@sign:	
  2908  004A                     sprintf@val:	
  2909                           ; 1 bytes @ 0x2A
  2910                           
  2911                           
  2912                           ; 4 bytes @ 0x2A
  2913  004A                     	ds	1
  2914  004B                     ?_getADCValue:	
  2915                           
  2916                           ; 3 bytes @ 0x2B
  2917  004B                     	ds	3
  2918  004E                     ??_getADCValue:	
  2919  004E                     sprintf@sp:	
  2920                           ; 1 bytes @ 0x2E
  2921                           
  2922                           
  2923                           ; 1 bytes @ 0x2E
  2924  004E                     	ds	1
  2925  004F                     sprintf@width:	
  2926                           
  2927                           ; 2 bytes @ 0x2F
  2928  004F                     	ds	2
  2929  0051                     getADCValue@adcLoop:	
  2930  0051                     sprintf@prec:	
  2931                           ; 2 bytes @ 0x31
  2932                           
  2933                           
  2934                           ; 2 bytes @ 0x31
  2935  0051                     	ds	2
  2936  0053                     getADCValue@channel:	
  2937  0053                     sprintf@c:	
  2938                           ; 1 bytes @ 0x33
  2939                           
  2940                           
  2941                           ; 1 bytes @ 0x33
  2942  0053                     	ds	1
  2943  0054                     getADCValue@adcSum:	
  2944                           
  2945                           ; 3 bytes @ 0x34
  2946  0054                     	ds	3
  2947  0057                     ?___ftmul:	
  2948  0057                     ?___ftneg:	
  2949                           ; 3 bytes @ 0x37
  2950                           
  2951  0057                     ___ftmul@f1:	
  2952                           ; 3 bytes @ 0x37
  2953                           
  2954  0057                     ___ftneg@f1:	
  2955                           ; 3 bytes @ 0x37
  2956                           
  2957                           
  2958                           ; 3 bytes @ 0x37
  2959  0057                     	ds	3
  2960  005A                     ??___ftneg:	
  2961  005A                     ___ftmul@f2:	
  2962                           ; 1 bytes @ 0x3A
  2963                           
  2964                           
  2965                           ; 3 bytes @ 0x3A
  2966  005A                     	ds	3
  2967  005D                     ??___ftmul:	
  2968                           
  2969                           ; 1 bytes @ 0x3D
  2970  005D                     	ds	4
  2971  0061                     ___ftmul@exp:	
  2972                           
  2973                           ; 1 bytes @ 0x41
  2974  0061                     	ds	1
  2975  0062                     ___ftmul@f3_as_product:	
  2976                           
  2977                           ; 3 bytes @ 0x42
  2978  0062                     	ds	3
  2979  0065                     ___ftmul@cntr:	
  2980                           
  2981                           ; 1 bytes @ 0x45
  2982  0065                     	ds	1
  2983  0066                     ___ftmul@sign:	
  2984                           
  2985                           ; 1 bytes @ 0x46
  2986  0066                     	ds	1
  2987  0067                     ?___fttol:	
  2988  0067                     ___fttol@f1:	
  2989                           ; 4 bytes @ 0x47
  2990                           
  2991                           
  2992                           ; 3 bytes @ 0x47
  2993  0067                     	ds	4
  2994  006B                     ??___fttol:	
  2995                           
  2996                           ; 1 bytes @ 0x4B
  2997  006B                     	ds	4
  2998  006F                     ??_ftoa:	
  2999                           
  3000                           ; 1 bytes @ 0x4F
  3001  006F                     	ds	1
  3002  0070                     ??_strcat:	
  3003                           
  3004                           	psect	maintext
  3005  0DFE                     __pmaintext:	
  3006                           ; 1 bytes @ 0x50
  3007 ;;
  3008 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3009 ;;
  3010 ;; *************** function _main *****************
  3011 ;; Defined at:
  3012 ;;		line 245 in file "main.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;		None
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;  packet         33   39[BANK1 ] struct .
  3017 ;;  pipe            1   38[BANK1 ] unsigned char 
  3018 ;;  bootStatus      1   37[BANK1 ] unsigned char 
  3019 ;; Return value:  Size  Location     Type
  3020 ;;                  1    wreg      void 
  3021 ;; Registers used:
  3022 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3023 ;; Tracked objects:
  3024 ;;		On entry : B1F/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3029 ;;      Locals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  3030 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3031 ;;      Totals:         0       0      36       0       0       0       0       0       0       0       0       0       
      +0       0
  3032 ;;Total ram usage:       36 bytes
  3033 ;; Hardware stack levels required when called:   18
  3034 ;; This function calls:
  3035 ;;		___lbtoft
  3036 ;;		_loop
  3037 ;;		_nrf24l01GetPipe
  3038 ;;		_nrf24l01Init
  3039 ;;		_nrf24l01SendPacket
  3040 ;;		_nrf24l01SetRXPipe
  3041 ;;		_nrf24l01SetTXPipe
  3042 ;;		_setMessage
  3043 ;;		_sleep
  3044 ;;		_strcpy
  3045 ;; This function is called by:
  3046 ;;		Startup code after reset
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050                           
  3051                           ;psect for function _main
  3052  0DFE                     _main:	
  3053                           
  3054                           ;main.c: 247: unsigned char bootStatus = STATUS;
  3055                           
  3056                           ;incstack = 0
  3057 ;; hardware stack exceeded
  3058                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3059  0DFE  0020               	movlb	0	; select bank0
  3060  0DFF  0803               	movf	3,w	;volatile
  3061  0E00  0021               	movlb	1	; select bank1
  3062  0E01  00C4               	movwf	??_main^(0+128)
  3063  0E02  0844               	movf	??_main^(0+128),w
  3064  0E03  00C5               	movwf	main@bootStatus^(0+128)
  3065                           
  3066                           ;main.c: 250: ANSELA = 0x00;
  3067  0E04  0023               	movlb	3	; select bank3
  3068  0E05  018C               	clrf	12	;volatile
  3069                           
  3070                           ;main.c: 251: ANSELC = 0x00;
  3071  0E06  018E               	clrf	14	;volatile
  3072                           
  3073                           ;main.c: 253: ODCONA = 0x00;
  3074  0E07  0025               	movlb	5	; select bank5
  3075  0E08  018C               	clrf	12	;volatile
  3076                           
  3077                           ;main.c: 254: ODCONC = 0x00;
  3078  0E09  018E               	clrf	14	;volatile
  3079                           
  3080                           ;main.c: 259: INLVLA = 0x00;
  3081  0E0A  0027               	movlb	7	; select bank7
  3082  0E0B  018C               	clrf	12	;volatile
  3083                           
  3084                           ;main.c: 260: INLVLC = 0x00;
  3085  0E0C  018E               	clrf	14	;volatile
  3086                           
  3087                           ;main.c: 262: WPUA = 0x00;
  3088  0E0D  0024               	movlb	4	; select bank4
  3089  0E0E  018C               	clrf	12	;volatile
  3090                           
  3091                           ;main.c: 263: WPUC = 0x00;
  3092  0E0F  018E               	clrf	14	;volatile
  3093                           
  3094                           ;main.c: 265: TRISCbits.TRISC5 = 0;
  3095  0E10  0021               	movlb	1	; select bank1
  3096  0E11  128E               	bcf	14,5	;volatile
  3097                           
  3098                           ;main.c: 266: TRISCbits.TRISC4 = 0;
  3099  0E12  120E               	bcf	14,4	;volatile
  3100                           
  3101                           ;main.c: 268: PORTCbits.RC4 = 0;
  3102  0E13  0020               	movlb	0	; select bank0
  3103  0E14  120E               	bcf	14,4	;volatile
  3104                           
  3105                           ;main.c: 275: INTCONbits.PEIE = 0;
  3106  0E15  130B               	bcf	11,6	;volatile
  3107                           
  3108                           ;main.c: 276: INTCONbits.GIE = 0;
  3109  0E16  138B               	bcf	11,7	;volatile
  3110                           
  3111                           ;main.c: 278: OSCCON1bits.NOSC = 0b000;
  3112  0E17  308F               	movlw	-113
  3113  0E18  0032               	movlb	18	; select bank18
  3114  0E19  0599               	andwf	25,f	;volatile
  3115                           
  3116                           ;main.c: 279: OSCCON1bits.NDIV = 0b000;
  3117  0E1A  30F0               	movlw	-16
  3118  0E1B  0599               	andwf	25,f	;volatile
  3119                           
  3120                           ;main.c: 281: _delay((unsigned long)((10)*(32000000/4000.0)));
  3121  0E1C  3068               	movlw	104
  3122  0E1D  0021               	movlb	1	; select bank1
  3123  0E1E  00C4               	movwf	??_main^(0+128)
  3124  0E1F  30E4               	movlw	228
  3125  0E20                     u3757:	
  3126  0E20  0B89               	decfsz	9,f
  3127  0E21  2E20               	goto	u3757
  3128  0E22  0BC4               	decfsz	??_main^(0+128),f
  3129  0E23  2E20               	goto	u3757
  3130  0E24  0000               	nop
  3131                           
  3132                           ;main.c: 285: strcpy(romData->name, "UWT");
  3133  0E25  3031               	movlw	low (STR_8| (0+32768))
  3134  0E26  0020               	movlb	0	; select bank0
  3135  0E27  00A0               	movwf	strcpy@from
  3136  0E28  3098               	movlw	high (STR_8| (0+32768))
  3137  0E29  00A1               	movwf	strcpy@from+1
  3138  0E2A  0021               	movlb	1	; select bank1
  3139  0E2B  086B               	movf	_romData^(0+128),w
  3140  0E2C  3E01               	addlw	1
  3141  0E2D  3196  26D2  318D   	fcall	_strcpy
  3142                           
  3143                           ;main.c: 287: nrf24l01Init();
  3144  0E30  3197  278E  318D   	fcall	_nrf24l01Init
  3145                           
  3146                           ;main.c: 289: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3147  0E33  0021               	movlb	1	; select bank1
  3148  0E34  086B               	movf	_romData^(0+128),w
  3149  0E35  3E01               	addlw	1
  3150  0E36  3189  2139  318D   	fcall	_nrf24l01GetPipe
  3151  0E39  0021               	movlb	1	; select bank1
  3152  0E3A  00C4               	movwf	??_main^(0+128)
  3153  0E3B  0844               	movf	??_main^(0+128),w
  3154  0E3C  00C6               	movwf	main@pipe^(0+128)
  3155                           
  3156                           ;main.c: 290: nrf24l01SetTXPipe(pipe);
  3157  0E3D  0846               	movf	main@pipe^(0+128),w
  3158  0E3E  318A  2273  318D   	fcall	_nrf24l01SetTXPipe
  3159                           
  3160                           ;main.c: 291: nrf24l01SetRXPipe(pipe);
  3161  0E41  0021               	movlb	1	; select bank1
  3162  0E42  0846               	movf	main@pipe^(0+128),w
  3163  0E43  3197  274B  318D   	fcall	_nrf24l01SetRXPipe
  3164                           
  3165                           ;main.c: 295: ADCON0bits.ADON = 0;
  3166  0E46  0021               	movlb	1	; select bank1
  3167  0E47  101D               	bcf	29,0	;volatile
  3168                           
  3169                           ;main.c: 298: PORTAbits.RA4 = 0;
  3170  0E48  0020               	movlb	0	; select bank0
  3171  0E49  120C               	bcf	12,4	;volatile
  3172                           
  3173                           ;main.c: 299: TRISAbits.TRISA4 = 1;
  3174  0E4A  0021               	movlb	1	; select bank1
  3175  0E4B  160C               	bsf	12,4	;volatile
  3176                           
  3177                           ;main.c: 300: WPUAbits.WPUA4 = 0;
  3178  0E4C  0024               	movlb	4	; select bank4
  3179  0E4D  120C               	bcf	12,4	;volatile
  3180                           
  3181                           ;main.c: 301: ODCONAbits.ODCA4 = 1;
  3182  0E4E  0025               	movlb	5	; select bank5
  3183  0E4F  160C               	bsf	12,4	;volatile
  3184                           
  3185                           ;main.c: 302: ANSELAbits.ANSA4 = 1;
  3186  0E50  0023               	movlb	3	; select bank3
  3187  0E51  160C               	bsf	12,4	;volatile
  3188                           
  3189                           ;main.c: 305: ANSELCbits.ANSC3 = 1;
  3190  0E52  158E               	bsf	14,3	;volatile
  3191                           
  3192                           ;main.c: 306: TRISCbits.TRISC3 = 1;
  3193  0E53  0021               	movlb	1	; select bank1
  3194  0E54  158E               	bsf	14,3	;volatile
  3195                           
  3196                           ;main.c: 309: FVRCONbits.TSEN = 1;
  3197  0E55  0022               	movlb	2	; select bank2
  3198  0E56  1697               	bsf	23,5	;volatile
  3199                           
  3200                           ;main.c: 310: FVRCONbits.TSRNG = 1;
  3201  0E57  1617               	bsf	23,4	;volatile
  3202                           
  3203                           ;main.c: 313: FVRCONbits.FVREN = 0;
  3204  0E58  1397               	bcf	23,7	;volatile
  3205                           
  3206                           ;main.c: 314: FVRCONbits.ADFVR = 0b10;
  3207  0E59  0817               	movf	23,w	;volatile
  3208  0E5A  39FC               	andlw	-4
  3209  0E5B  3802               	iorlw	2
  3210  0E5C  0097               	movwf	23	;volatile
  3211                           
  3212                           ;main.c: 316: ADCON1bits.ADCS = 0b111;
  3213  0E5D  3070               	movlw	112
  3214  0E5E  0021               	movlb	1	; select bank1
  3215  0E5F  049E               	iorwf	30,f	;volatile
  3216                           
  3217                           ;main.c: 317: ADCON1bits.ADFM = 1;
  3218  0E60  179E               	bsf	30,7	;volatile
  3219                           
  3220                           ;main.c: 318: ADCON1bits.ADPREF = 0b11;
  3221  0E61  3003               	movlw	3
  3222  0E62  049E               	iorwf	30,f	;volatile
  3223                           
  3224                           ;main.c: 319: ADCON1bits.ADNREF = 0b00;
  3225  0E63  111E               	bcf	30,2	;volatile
  3226                           
  3227                           ;main.c: 322: ADCON0bits.CHS = 3;
  3228  0E64  081D               	movf	29,w	;volatile
  3229  0E65  3903               	andlw	-253
  3230  0E66  380C               	iorlw	12
  3231  0E67  009D               	movwf	29	;volatile
  3232                           
  3233                           ;main.c: 327: TRISAbits.TRISA2 = 1;
  3234  0E68  150C               	bsf	12,2	;volatile
  3235                           
  3236                           ;main.c: 328: PIE0bits.INTE = 1;
  3237  0E69  1410               	bsf	16,0	;volatile
  3238                           
  3239                           ;main.c: 329: INTCONbits.INTEDG = 0;
  3240  0E6A  100B               	bcf	11,0	;volatile
  3241                           
  3242                           ;main.c: 332: TRISAbits.TRISA5 = 0;
  3243  0E6B  128C               	bcf	12,5	;volatile
  3244                           
  3245                           ;main.c: 333: PORTAbits.RA5 = 0;
  3246  0E6C  0020               	movlb	0	; select bank0
  3247  0E6D  128C               	bcf	12,5	;volatile
  3248                           
  3249                           ;main.c: 336: INTCONbits.PEIE = 1;
  3250  0E6E  170B               	bsf	11,6	;volatile
  3251                           
  3252                           ;main.c: 337: INTCONbits.GIE = 1;
  3253  0E6F  178B               	bsf	11,7	;volatile
  3254                           
  3255                           ;main.c: 339: nrf24l01Packet_t packet;;main.c: 341: setMessage(&packet, "BOOT", bootStat
      +                          us);
  3256  0E70  30C7               	movlw	low main@packet
  3257  0E71  0021               	movlb	1	; select bank1
  3258  0E72  00B9               	movwf	setMessage@packet^(0+128)
  3259  0E73  3000               	movlw	high main@packet
  3260  0E74  00BA               	movwf	(setMessage@packet+1)^(0+128)
  3261  0E75  3028               	movlw	low (STR_9| (0+32768))
  3262  0E76  00BB               	movwf	setMessage@topic^(0+128)
  3263  0E77  3098               	movlw	high (STR_9| (0+32768))
  3264  0E78  00BC               	movwf	(setMessage@topic^(0+128)+1)
  3265  0E79  0845               	movf	main@bootStatus^(0+128),w
  3266  0E7A  3196  267F  318D   	fcall	___lbtoft
  3267  0E7D  0020               	movlb	0	; select bank0
  3268  0E7E  0828               	movf	?___lbtoft,w
  3269  0E7F  0021               	movlb	1	; select bank1
  3270  0E80  00BD               	movwf	setMessage@value^(0+128)
  3271  0E81  0020               	movlb	0	; select bank0
  3272  0E82  0829               	movf	?___lbtoft+1,w
  3273  0E83  0021               	movlb	1	; select bank1
  3274  0E84  00BE               	movwf	(setMessage@value+1)^(0+128)
  3275  0E85  0020               	movlb	0	; select bank0
  3276  0E86  082A               	movf	?___lbtoft+2,w
  3277  0E87  0021               	movlb	1	; select bank1
  3278  0E88  00BF               	movwf	(setMessage@value+2)^(0+128)
  3279  0E89  318C  24F7  318D   	fcall	_setMessage
  3280                           
  3281                           ;main.c: 342: packet.packetData.byte = 0;
  3282  0E8C  0021               	movlb	1	; select bank1
  3283  0E8D  01C7               	clrf	main@packet^(0+128)
  3284                           
  3285                           ;main.c: 343: packet.packetData.ACKRequest = 0;
  3286  0E8E  1147               	bcf	main@packet^(0+128),2
  3287                           
  3288                           ;main.c: 344: nrf24l01SendPacket(&packet);
  3289  0E8F  30C7               	movlw	low main@packet
  3290  0E90  0020               	movlb	0	; select bank0
  3291  0E91  00AD               	movwf	nrf24l01SendPacket@Packet
  3292  0E92  3000               	movlw	high main@packet
  3293  0E93  00AE               	movwf	nrf24l01SendPacket@Packet+1
  3294  0E94  3186  2697  318D   	fcall	_nrf24l01SendPacket
  3295                           
  3296                           ;main.c: 345: sleep(3000);
  3297  0E97  30B8               	movlw	184
  3298  0E98  0020               	movlb	0	; select bank0
  3299  0E99  00B8               	movwf	sleep@milliseconds
  3300  0E9A  300B               	movlw	11
  3301  0E9B  00B9               	movwf	sleep@milliseconds+1
  3302  0E9C  3189  2109  318D   	fcall	_sleep
  3303  0E9F                     l3773:	
  3304                           ;main.c: 347: while(1){
  3305                           
  3306                           
  3307                           ;main.c: 348: loop();
  3308  0E9F  3181  21FA  318D   	fcall	_loop
  3309  0EA2  2E9F               	goto	l3773
  3310  0EA3                     __end_of_main:	
  3311                           ;main.c: 349: };main.c: 351: return;
  3312                           
  3313                           
  3314                           	psect	text1
  3315  16D2                     __ptext1:	
  3316 ;; *************** function _strcpy *****************
  3317 ;; Defined at:
  3318 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  to              1    wreg     PTR unsigned char 
  3321 ;;		 -> romDataMap(28), 
  3322 ;;  from            2    0[BANK0 ] PTR const unsigned char 
  3323 ;;		 -> STR_8(4), 
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;  to              1    3[BANK0 ] PTR unsigned char 
  3326 ;;		 -> romDataMap(28), 
  3327 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  3328 ;;		 -> romDataMap(28), 
  3329 ;; Return value:  Size  Location     Type
  3330 ;;                  1    wreg      PTR unsigned char 
  3331 ;; Registers used:
  3332 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3333 ;; Tracked objects:
  3334 ;;		On entry : 0/0
  3335 ;;		On exit  : 0/0
  3336 ;;		Unchanged: 0/0
  3337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3338 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3339 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3340 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3341 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3342 ;;Total ram usage:        5 bytes
  3343 ;; Hardware stack levels used:    1
  3344 ;; Hardware stack levels required when called:    7
  3345 ;; This function calls:
  3346 ;;		Nothing
  3347 ;; This function is called by:
  3348 ;;		_main
  3349 ;; This function uses a non-reentrant model
  3350 ;;
  3351                           
  3352                           
  3353                           ;psect for function _strcpy
  3354  16D2                     _strcpy:	
  3355                           
  3356                           ;incstack = 0
  3357                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3358                           ;strcpy@to stored from wreg
  3359  16D2  0020               	movlb	0	; select bank0
  3360  16D3  00A3               	movwf	strcpy@to
  3361  16D4  0823               	movf	strcpy@to,w
  3362  16D5  00A2               	movwf	??_strcpy
  3363  16D6  0822               	movf	??_strcpy,w
  3364  16D7  00A4               	movwf	strcpy@cp
  3365  16D8                     l3623:	
  3366  16D8  0824               	movf	strcpy@cp,w
  3367  16D9  0086               	movwf	6
  3368  16DA  3001               	movlw	1	; select bank2/3
  3369  16DB  0087               	movwf	7
  3370  16DC  0820               	movf	strcpy@from,w
  3371  16DD  0084               	movwf	4
  3372  16DE  0821               	movf	strcpy@from+1,w
  3373  16DF  0085               	movwf	5
  3374  16E0  0800               	movf	0,w	;code access
  3375  16E1  3FC0               	movwi [0]fsr1
  3376  16E2  0889               	movf	9,f
  3377  16E3  1903               	btfsc	3,2
  3378  16E4  0008               	return
  3379  16E5  3001               	movlw	1
  3380  16E6  00A2               	movwf	??_strcpy
  3381  16E7  0822               	movf	??_strcpy,w
  3382  16E8  07A4               	addwf	strcpy@cp,f
  3383  16E9  3001               	movlw	1
  3384  16EA  07A0               	addwf	strcpy@from,f
  3385  16EB  3000               	movlw	0
  3386  16EC  3DA1               	addwfc	strcpy@from+1,f
  3387  16ED  2ED8               	goto	l3623
  3388  16EE                     __end_of_strcpy:	
  3389                           ;	Return value of _strcpy is never used
  3390                           
  3391                           
  3392                           	psect	text2
  3393  178E                     __ptext2:	
  3394 ;; *************** function _nrf24l01Init *****************
  3395 ;; Defined at:
  3396 ;;		line 459 in file "nrf24l01.c"
  3397 ;; Parameters:    Size  Location     Type
  3398 ;;		None
  3399 ;; Auto vars:     Size  Location     Type
  3400 ;;		None
  3401 ;; Return value:  Size  Location     Type
  3402 ;;                  1    wreg      void 
  3403 ;; Registers used:
  3404 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3405 ;; Tracked objects:
  3406 ;;		On entry : 0/0
  3407 ;;		On exit  : 0/0
  3408 ;;		Unchanged: 0/0
  3409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3412 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3413 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3414 ;;Total ram usage:        2 bytes
  3415 ;; Hardware stack levels used:    1
  3416 ;; Hardware stack levels required when called:   12
  3417 ;; This function calls:
  3418 ;;		_nrf24l01CEHigh
  3419 ;;		_nrf24l01CELow
  3420 ;;		_nrf24l01InitRegisters
  3421 ;;		_nrf24l01InterfaceInit
  3422 ;; This function is called by:
  3423 ;;		_main
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427                           
  3428                           ;psect for function _nrf24l01Init
  3429  178E                     _nrf24l01Init:	
  3430                           
  3431                           ;nrf24l01.c: 462: nrf24l01InterfaceInit();
  3432                           
  3433                           ;incstack = 0
  3434                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3435  178E  3196  26B6  3197   	fcall	_nrf24l01InterfaceInit
  3436                           
  3437                           ;nrf24l01.c: 467: nrf24l01CELow();
  3438  1791  3195  259F  3197   	fcall	_nrf24l01CELow
  3439                           
  3440                           ;nrf24l01.c: 469: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3441  1794  3003               	movlw	3
  3442  1795  0020               	movlb	0	; select bank0
  3443  1796  00B4               	movwf	??_nrf24l01Init+1
  3444  1797  3008               	movlw	8
  3445  1798  00B3               	movwf	??_nrf24l01Init
  3446  1799  3077               	movlw	119
  3447  179A                     u3767:	
  3448  179A  0B89               	decfsz	9,f
  3449  179B  2F9A               	goto	u3767
  3450  179C  0BB3               	decfsz	??_nrf24l01Init,f
  3451  179D  2F9A               	goto	u3767
  3452  179E  0BB4               	decfsz	??_nrf24l01Init+1,f
  3453  179F  2F9A               	goto	u3767
  3454                           
  3455                           ;nrf24l01.c: 471: nrf24l01InitRegisters();
  3456  17A0  3183  23A9  3197   	fcall	_nrf24l01InitRegisters
  3457                           
  3458                           ;nrf24l01.c: 473: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3459  17A3  3003               	movlw	3
  3460  17A4  0020               	movlb	0	; select bank0
  3461  17A5  00B4               	movwf	??_nrf24l01Init+1
  3462  17A6  3008               	movlw	8
  3463  17A7  00B3               	movwf	??_nrf24l01Init
  3464  17A8  3077               	movlw	119
  3465  17A9                     u3777:	
  3466  17A9  0B89               	decfsz	9,f
  3467  17AA  2FA9               	goto	u3777
  3468  17AB  0BB3               	decfsz	??_nrf24l01Init,f
  3469  17AC  2FA9               	goto	u3777
  3470  17AD  0BB4               	decfsz	??_nrf24l01Init+1,f
  3471  17AE  2FA9               	goto	u3777
  3472                           
  3473                           ;nrf24l01.c: 475: nrf24l01CEHigh();
  3474  17AF  3195  259C         	fcall	_nrf24l01CEHigh
  3475  17B1  0008               	return
  3476  17B2                     __end_of_nrf24l01Init:	
  3477                           
  3478                           	psect	text3
  3479  16B6                     __ptext3:	
  3480 ;; *************** function _nrf24l01InterfaceInit *****************
  3481 ;; Defined at:
  3482 ;;		line 27 in file "interface.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;		None
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;		None
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  1    wreg      void 
  3489 ;; Registers used:
  3490 ;;		wreg, status,2, status,0
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : 0/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3500 ;;Total ram usage:        0 bytes
  3501 ;; Hardware stack levels used:    1
  3502 ;; Hardware stack levels required when called:    7
  3503 ;; This function calls:
  3504 ;;		Nothing
  3505 ;; This function is called by:
  3506 ;;		_nrf24l01Init
  3507 ;; This function uses a non-reentrant model
  3508 ;;
  3509                           
  3510                           
  3511                           ;psect for function _nrf24l01InterfaceInit
  3512  16B6                     _nrf24l01InterfaceInit:	
  3513                           
  3514                           ;interface.c: 29: TRISAbits.TRISA0 = 0;
  3515                           
  3516                           ;incstack = 0
  3517                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3518  16B6  0021               	movlb	1	; select bank1
  3519  16B7  100C               	bcf	12,0	;volatile
  3520                           
  3521                           ;interface.c: 30: TRISAbits.TRISA1 = 0;
  3522  16B8  108C               	bcf	12,1	;volatile
  3523                           
  3524                           ;interface.c: 32: TRISCbits.TRISC1 = 1;
  3525  16B9  148E               	bsf	14,1	;volatile
  3526                           
  3527                           ;interface.c: 33: TRISCbits.TRISC2 = 0;
  3528  16BA  110E               	bcf	14,2	;volatile
  3529                           
  3530                           ;interface.c: 34: TRISCbits.TRISC0 = 0;
  3531  16BB  100E               	bcf	14,0	;volatile
  3532                           
  3533                           ;interface.c: 36: SSP1CON1bits.SSPEN = 0;
  3534  16BC  0024               	movlb	4	; select bank4
  3535  16BD  1295               	bcf	21,5	;volatile
  3536                           
  3537                           ;interface.c: 38: RC1PPSbits.RC1PPS = 0b10001;
  3538  16BE  003D               	movlb	29	; select bank29
  3539  16BF  0821               	movf	33,w	;volatile
  3540  16C0  39E0               	andlw	-32
  3541  16C1  3811               	iorlw	17
  3542  16C2  00A1               	movwf	33	;volatile
  3543                           
  3544                           ;interface.c: 39: RC2PPSbits.RC2PPS = 0b11001;
  3545  16C3  0822               	movf	34,w	;volatile
  3546  16C4  39E0               	andlw	-32
  3547  16C5  3819               	iorlw	25
  3548  16C6  00A2               	movwf	34	;volatile
  3549                           
  3550                           ;interface.c: 40: RC0PPSbits.RC0PPS = 0b11000;
  3551  16C7  0820               	movf	32,w	;volatile
  3552  16C8  39E0               	andlw	-32
  3553  16C9  3818               	iorlw	24
  3554  16CA  00A0               	movwf	32	;volatile
  3555                           
  3556                           ;interface.c: 42: SSP1CON1bits.CKP = 0;
  3557  16CB  0024               	movlb	4	; select bank4
  3558  16CC  1215               	bcf	21,4	;volatile
  3559                           
  3560                           ;interface.c: 43: SSP1STATbits.CKE = 1;
  3561  16CD  1714               	bsf	20,6	;volatile
  3562                           
  3563                           ;interface.c: 44: SSP1CON1bits.SSPM = 0b0000;
  3564  16CE  30F0               	movlw	-16
  3565  16CF  0595               	andwf	21,f	;volatile
  3566                           
  3567                           ;interface.c: 46: SSP1CON1bits.SSPEN = 1;
  3568  16D0  1695               	bsf	21,5	;volatile
  3569  16D1  0008               	return
  3570  16D2                     __end_of_nrf24l01InterfaceInit:	
  3571                           
  3572                           	psect	text4
  3573  03A9                     __ptext4:	
  3574 ;; *************** function _nrf24l01InitRegisters *****************
  3575 ;; Defined at:
  3576 ;;		line 358 in file "nrf24l01.c"
  3577 ;; Parameters:    Size  Location     Type
  3578 ;;		None
  3579 ;; Auto vars:     Size  Location     Type
  3580 ;;  i               2   17[BANK0 ] unsigned int 
  3581 ;;  config          1   16[BANK0 ] struct .
  3582 ;;  DynPD           1   15[BANK0 ] struct .
  3583 ;;  enAA            1   14[BANK0 ] struct .
  3584 ;;  status          1   13[BANK0 ] struct .
  3585 ;;  rfSetup         1   12[BANK0 ] struct .
  3586 ;;  feature         1   11[BANK0 ] struct .
  3587 ;;  setupAW         1   10[BANK0 ] struct .
  3588 ;;  channel         1    9[BANK0 ] struct .
  3589 ;; Return value:  Size  Location     Type
  3590 ;;                  1    wreg      void 
  3591 ;; Registers used:
  3592 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3593 ;; Tracked objects:
  3594 ;;		On entry : 0/0
  3595 ;;		On exit  : 0/0
  3596 ;;		Unchanged: 0/0
  3597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3599 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3600 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3601 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3602 ;;Total ram usage:       12 bytes
  3603 ;; Hardware stack levels used:    1
  3604 ;; Hardware stack levels required when called:   11
  3605 ;; This function calls:
  3606 ;;		___bmul
  3607 ;;		_nrf24l01SPIEnd
  3608 ;;		_nrf24l01SPISend
  3609 ;;		_nrf24l01SPIStart
  3610 ;;		_nrf24l01Send
  3611 ;;		_nrf24l01SetRXPipe
  3612 ;;		_nrf24l01SetTXPipe
  3613 ;; This function is called by:
  3614 ;;		_nrf24l01Init
  3615 ;; This function uses a non-reentrant model
  3616 ;;
  3617                           
  3618                           
  3619                           ;psect for function _nrf24l01InitRegisters
  3620  03A9                     _nrf24l01InitRegisters:	
  3621                           
  3622                           ;nrf24l01.c: 360: n_CONFIG_t config;;nrf24l01.c: 362: config.PWR_UP = 0;
  3623                           
  3624                           ;incstack = 0
  3625                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3626  03A9  0020               	movlb	0	; select bank0
  3627  03AA  10B0               	bcf	nrf24l01InitRegisters@config,1
  3628                           
  3629                           ;nrf24l01.c: 363: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3630  03AB  0830               	movf	nrf24l01InitRegisters@config,w
  3631  03AC  00A7               	movwf	??_nrf24l01InitRegisters
  3632  03AD  0827               	movf	??_nrf24l01InitRegisters,w
  3633  03AE  00A0               	movwf	nrf24l01Send@data
  3634  03AF  3020               	movlw	32
  3635  03B0  3197  272B  3183   	fcall	_nrf24l01Send
  3636                           
  3637                           ;nrf24l01.c: 365: n_SETUP_AW_t setupAW;;nrf24l01.c: 366: setupAW.byte = 0x00;
  3638  03B3  0020               	movlb	0	; select bank0
  3639  03B4  01AA               	clrf	nrf24l01InitRegisters@setupAW
  3640                           
  3641                           ;nrf24l01.c: 367: setupAW.AW = 0b11;
  3642  03B5  3003               	movlw	3
  3643  03B6  04AA               	iorwf	nrf24l01InitRegisters@setupAW,f
  3644                           
  3645                           ;nrf24l01.c: 368: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x02, setupAW.byte);
  3646  03B7  082A               	movf	nrf24l01InitRegisters@setupAW,w
  3647  03B8  00A7               	movwf	??_nrf24l01InitRegisters
  3648  03B9  0827               	movf	??_nrf24l01InitRegisters,w
  3649  03BA  00A0               	movwf	nrf24l01Send@data
  3650  03BB  3022               	movlw	34
  3651  03BC  3197  272B  3183   	fcall	_nrf24l01Send
  3652                           
  3653                           ;nrf24l01.c: 371: n_RF_CH_t channel;;nrf24l01.c: 372: channel.RF_CH = 2;
  3654  03BF  0020               	movlb	0	; select bank0
  3655  03C0  0829               	movf	nrf24l01InitRegisters@channel,w
  3656  03C1  3980               	andlw	-128
  3657  03C2  3802               	iorlw	2
  3658  03C3  00A9               	movwf	nrf24l01InitRegisters@channel
  3659                           
  3660                           ;nrf24l01.c: 373: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3661  03C4  0829               	movf	nrf24l01InitRegisters@channel,w
  3662  03C5  00A7               	movwf	??_nrf24l01InitRegisters
  3663  03C6  0827               	movf	??_nrf24l01InitRegisters,w
  3664  03C7  00A0               	movwf	nrf24l01Send@data
  3665  03C8  3025               	movlw	37
  3666  03C9  3197  272B  3183   	fcall	_nrf24l01Send
  3667                           
  3668                           ;nrf24l01.c: 376: n_RF_SETUP_t rfSetup;;nrf24l01.c: 377: rfSetup.byte = 0x00;
  3669  03CC  0020               	movlb	0	; select bank0
  3670  03CD  01AC               	clrf	nrf24l01InitRegisters@rfSetup
  3671                           
  3672                           ;nrf24l01.c: 378: rfSetup.RF_DR_LOW = 0;
  3673  03CE  12AC               	bcf	nrf24l01InitRegisters@rfSetup,5
  3674                           
  3675                           ;nrf24l01.c: 379: rfSetup.RF_DR_HIGH = 1;
  3676  03CF  15AC               	bsf	nrf24l01InitRegisters@rfSetup,3
  3677                           
  3678                           ;nrf24l01.c: 380: rfSetup.RF_PWR = 3;
  3679  03D0  3006               	movlw	6
  3680  03D1  04AC               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3681                           
  3682                           ;nrf24l01.c: 381: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3683  03D2  082C               	movf	nrf24l01InitRegisters@rfSetup,w
  3684  03D3  00A7               	movwf	??_nrf24l01InitRegisters
  3685  03D4  0827               	movf	??_nrf24l01InitRegisters,w
  3686  03D5  00A0               	movwf	nrf24l01Send@data
  3687  03D6  3026               	movlw	38
  3688  03D7  3197  272B  3183   	fcall	_nrf24l01Send
  3689                           
  3690                           ;nrf24l01.c: 384: nrf24l01SetRXPipe(0xFF);
  3691  03DA  30FF               	movlw	255
  3692  03DB  3197  274B  3183   	fcall	_nrf24l01SetRXPipe
  3693                           
  3694                           ;nrf24l01.c: 387: n_EN_AA_t enAA;;nrf24l01.c: 388: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3695  03DE  0020               	movlb	0	; select bank0
  3696  03DF  01A0               	clrf	nrf24l01Send@data
  3697  03E0  3001               	movlw	1
  3698  03E1  3197  272B  3183   	fcall	_nrf24l01Send
  3699  03E4  0020               	movlb	0	; select bank0
  3700  03E5  00A7               	movwf	??_nrf24l01InitRegisters
  3701  03E6  0827               	movf	??_nrf24l01InitRegisters,w
  3702  03E7  00AE               	movwf	nrf24l01InitRegisters@enAA
  3703                           
  3704                           ;nrf24l01.c: 389: enAA.ENAA_P0 = 0;
  3705  03E8  102E               	bcf	nrf24l01InitRegisters@enAA,0
  3706                           
  3707                           ;nrf24l01.c: 390: enAA.ENAA_P1 = 0;
  3708  03E9  10AE               	bcf	nrf24l01InitRegisters@enAA,1
  3709                           
  3710                           ;nrf24l01.c: 391: enAA.ENAA_P2 = 0;
  3711  03EA  112E               	bcf	nrf24l01InitRegisters@enAA,2
  3712                           
  3713                           ;nrf24l01.c: 392: enAA.ENAA_P3 = 0;
  3714  03EB  11AE               	bcf	nrf24l01InitRegisters@enAA,3
  3715                           
  3716                           ;nrf24l01.c: 393: enAA.ENAA_P4 = 0;
  3717  03EC  122E               	bcf	nrf24l01InitRegisters@enAA,4
  3718                           
  3719                           ;nrf24l01.c: 394: enAA.ENAA_P5 = 0;
  3720  03ED  12AE               	bcf	nrf24l01InitRegisters@enAA,5
  3721                           
  3722                           ;nrf24l01.c: 395: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3723  03EE  082E               	movf	nrf24l01InitRegisters@enAA,w
  3724  03EF  00A7               	movwf	??_nrf24l01InitRegisters
  3725  03F0  0827               	movf	??_nrf24l01InitRegisters,w
  3726  03F1  00A0               	movwf	nrf24l01Send@data
  3727  03F2  3021               	movlw	33
  3728  03F3  3197  272B  3183   	fcall	_nrf24l01Send
  3729                           
  3730                           ;nrf24l01.c: 399: n_FEATURE_t feature;;nrf24l01.c: 400: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3731  03F6  0020               	movlb	0	; select bank0
  3732  03F7  01A0               	clrf	nrf24l01Send@data
  3733  03F8  301D               	movlw	29
  3734  03F9  3197  272B  3183   	fcall	_nrf24l01Send
  3735  03FC  0020               	movlb	0	; select bank0
  3736  03FD  00A7               	movwf	??_nrf24l01InitRegisters
  3737  03FE  0827               	movf	??_nrf24l01InitRegisters,w
  3738  03FF  00AB               	movwf	nrf24l01InitRegisters@feature
  3739                           
  3740                           ;nrf24l01.c: 401: feature.EN_DPL = 1;
  3741  0400  152B               	bsf	nrf24l01InitRegisters@feature,2
  3742                           
  3743                           ;nrf24l01.c: 402: feature.EN_DYN_ACK = 1;
  3744  0401  142B               	bsf	nrf24l01InitRegisters@feature,0
  3745                           
  3746                           ;nrf24l01.c: 403: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3747  0402  082B               	movf	nrf24l01InitRegisters@feature,w
  3748  0403  00A7               	movwf	??_nrf24l01InitRegisters
  3749  0404  0827               	movf	??_nrf24l01InitRegisters,w
  3750  0405  00A0               	movwf	nrf24l01Send@data
  3751  0406  303D               	movlw	61
  3752  0407  3197  272B  3183   	fcall	_nrf24l01Send
  3753                           
  3754                           ;nrf24l01.c: 405: n_DYNPD_t DynPD;;nrf24l01.c: 406: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3755  040A  0020               	movlb	0	; select bank0
  3756  040B  01A0               	clrf	nrf24l01Send@data
  3757  040C  301C               	movlw	28
  3758  040D  3197  272B  3183   	fcall	_nrf24l01Send
  3759  0410  0020               	movlb	0	; select bank0
  3760  0411  00A7               	movwf	??_nrf24l01InitRegisters
  3761  0412  0827               	movf	??_nrf24l01InitRegisters,w
  3762  0413  00AF               	movwf	nrf24l01InitRegisters@DynPD
  3763                           
  3764                           ;nrf24l01.c: 407: DynPD.DPL_P0 = 1;
  3765  0414  142F               	bsf	nrf24l01InitRegisters@DynPD,0
  3766                           
  3767                           ;nrf24l01.c: 408: DynPD.DPL_P1 = 1;
  3768  0415  14AF               	bsf	nrf24l01InitRegisters@DynPD,1
  3769                           
  3770                           ;nrf24l01.c: 409: DynPD.DPL_P2 = 1;
  3771  0416  152F               	bsf	nrf24l01InitRegisters@DynPD,2
  3772                           
  3773                           ;nrf24l01.c: 410: DynPD.DPL_P3 = 1;
  3774  0417  15AF               	bsf	nrf24l01InitRegisters@DynPD,3
  3775                           
  3776                           ;nrf24l01.c: 411: DynPD.DPL_P4 = 1;
  3777  0418  162F               	bsf	nrf24l01InitRegisters@DynPD,4
  3778                           
  3779                           ;nrf24l01.c: 412: DynPD.DPL_P5 = 1;
  3780  0419  16AF               	bsf	nrf24l01InitRegisters@DynPD,5
  3781                           
  3782                           ;nrf24l01.c: 413: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3783  041A  082F               	movf	nrf24l01InitRegisters@DynPD,w
  3784  041B  00A7               	movwf	??_nrf24l01InitRegisters
  3785  041C  0827               	movf	??_nrf24l01InitRegisters,w
  3786  041D  00A0               	movwf	nrf24l01Send@data
  3787  041E  303C               	movlw	60
  3788  041F  3197  272B  3183   	fcall	_nrf24l01Send
  3789                           
  3790                           ;nrf24l01.c: 416: unsigned int i;;nrf24l01.c: 417: for (i = 0; i < 6; i++){
  3791  0422  0020               	movlb	0	; select bank0
  3792  0423  01B1               	clrf	nrf24l01InitRegisters@i
  3793  0424  01B2               	clrf	nrf24l01InitRegisters@i+1
  3794  0425  3000               	movlw	0
  3795  0426  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3796  0427  3006               	movlw	6
  3797  0428  1903               	skipnz
  3798  0429  0231               	subwf	nrf24l01InitRegisters@i,w
  3799  042A  1803               	btfsc	3,0
  3800  042B  2C85               	goto	l3423
  3801  042C                     l3409:	
  3802                           
  3803                           ;nrf24l01.c: 419: nrf24l01SPIStart();
  3804  042C  3195  25B7  3183   	fcall	_nrf24l01SPIStart
  3805                           
  3806                           ;nrf24l01.c: 420: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  3807  042F  0020               	movlb	0	; select bank0
  3808  0430  0831               	movf	nrf24l01InitRegisters@i,w
  3809  0431  3E0A               	addlw	10
  3810  0432  3820               	iorlw	32
  3811  0433  3195  25C8  3183   	fcall	_nrf24l01SPISend
  3812                           
  3813                           ;nrf24l01.c: 422: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  3814  0436  301D               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3815  0437  0084               	movwf	4
  3816  0438  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3817  0439  0085               	movwf	5
  3818  043A  0800               	movf	0,w	;code access
  3819  043B  0020               	movlb	0	; select bank0
  3820  043C  00A7               	movwf	??_nrf24l01InitRegisters
  3821  043D  0831               	movf	nrf24l01InitRegisters@i,w
  3822  043E  00A8               	movwf	??_nrf24l01InitRegisters+1
  3823  043F  0828               	movf	??_nrf24l01InitRegisters+1,w
  3824  0440  00A0               	movwf	___bmul@multiplicand
  3825  0441  3000               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3826  0442  0084               	movwf	4
  3827  0443  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3828  0444  0085               	movwf	5
  3829  0445  0800               	movf	0,w	;code access
  3830  0446  3195  25E4  3183   	fcall	___bmul
  3831  0449  0020               	movlb	0	; select bank0
  3832  044A  0727               	addwf	??_nrf24l01InitRegisters,w
  3833  044B  3195  25C8  3183   	fcall	_nrf24l01SPISend
  3834                           
  3835                           ;nrf24l01.c: 424: if (i < 2){
  3836  044E  3000               	movlw	0
  3837  044F  0020               	movlb	0	; select bank0
  3838  0450  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3839  0451  3002               	movlw	2
  3840  0452  1903               	skipnz
  3841  0453  0231               	subwf	nrf24l01InitRegisters@i,w
  3842  0454  1803               	skipnc
  3843  0455  2C76               	goto	l3417
  3844                           
  3845                           ;nrf24l01.c: 425: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3846  0456  301C               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3847  0457  0084               	movwf	4
  3848  0458  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3849  0459  0085               	movwf	5
  3850  045A  0800               	movf	0,w	;code access
  3851  045B  3195  25C8  3183   	fcall	_nrf24l01SPISend
  3852                           
  3853                           ;nrf24l01.c: 426: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3854  045E  301B               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3855  045F  0084               	movwf	4
  3856  0460  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3857  0461  0085               	movwf	5
  3858  0462  0800               	movf	0,w	;code access
  3859  0463  3195  25C8  3183   	fcall	_nrf24l01SPISend
  3860                           
  3861                           ;nrf24l01.c: 427: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3862  0466  301A               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3863  0467  0084               	movwf	4
  3864  0468  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3865  0469  0085               	movwf	5
  3866  046A  0800               	movf	0,w	;code access
  3867  046B  3195  25C8  3183   	fcall	_nrf24l01SPISend
  3868                           
  3869                           ;nrf24l01.c: 428: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3870  046E  3019               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3871  046F  0084               	movwf	4
  3872  0470  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3873  0471  0085               	movwf	5
  3874  0472  0800               	movf	0,w	;code access
  3875  0473  3195  25C8  3183   	fcall	_nrf24l01SPISend
  3876  0476                     l3417:	
  3877                           
  3878                           ;nrf24l01.c: 429: };nrf24l01.c: 431: nrf24l01SPIEnd();
  3879  0476  3195  25A8  3183   	fcall	_nrf24l01SPIEnd
  3880  0479  3001               	movlw	1
  3881  047A  0020               	movlb	0	; select bank0
  3882  047B  07B1               	addwf	nrf24l01InitRegisters@i,f
  3883  047C  3000               	movlw	0
  3884  047D  3DB2               	addwfc	nrf24l01InitRegisters@i+1,f
  3885  047E  3000               	movlw	0
  3886  047F  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3887  0480  3006               	movlw	6
  3888  0481  1903               	skipnz
  3889  0482  0231               	subwf	nrf24l01InitRegisters@i,w
  3890  0483  1C03               	skipc
  3891  0484  2C2C               	goto	l3409
  3892  0485                     l3423:	
  3893                           
  3894                           ;nrf24l01.c: 432: };nrf24l01.c: 434: nrf24l01SetTXPipe(0);
  3895  0485  3000               	movlw	0
  3896  0486  318A  2273  3183   	fcall	_nrf24l01SetTXPipe
  3897                           
  3898                           ;nrf24l01.c: 438: n_STATUS_t status;;nrf24l01.c: 439: status.byte = 0x00;
  3899  0489  0020               	movlb	0	; select bank0
  3900  048A  01AD               	clrf	nrf24l01InitRegisters@status
  3901                           
  3902                           ;nrf24l01.c: 440: status.RX_DR = 1;
  3903  048B  172D               	bsf	nrf24l01InitRegisters@status,6
  3904                           
  3905                           ;nrf24l01.c: 441: status.TX_DS = 1;
  3906  048C  16AD               	bsf	nrf24l01InitRegisters@status,5
  3907                           
  3908                           ;nrf24l01.c: 442: status.MAX_RT = 1;
  3909  048D  162D               	bsf	nrf24l01InitRegisters@status,4
  3910                           
  3911                           ;nrf24l01.c: 443: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.byte);
  3912  048E  082D               	movf	nrf24l01InitRegisters@status,w
  3913  048F  00A7               	movwf	??_nrf24l01InitRegisters
  3914  0490  0827               	movf	??_nrf24l01InitRegisters,w
  3915  0491  00A0               	movwf	nrf24l01Send@data
  3916  0492  3027               	movlw	39
  3917  0493  3197  272B  3183   	fcall	_nrf24l01Send
  3918                           
  3919                           ;nrf24l01.c: 446: nrf24l01Send((unsigned) 0b11100001, 0);
  3920  0496  0020               	movlb	0	; select bank0
  3921  0497  01A0               	clrf	nrf24l01Send@data
  3922  0498  30E1               	movlw	225
  3923  0499  3197  272B  3183   	fcall	_nrf24l01Send
  3924                           
  3925                           ;nrf24l01.c: 447: nrf24l01Send((unsigned) 0b11100010, 0);
  3926  049C  0020               	movlb	0	; select bank0
  3927  049D  01A0               	clrf	nrf24l01Send@data
  3928  049E  30E2               	movlw	226
  3929  049F  3197  272B  3183   	fcall	_nrf24l01Send
  3930                           
  3931                           ;nrf24l01.c: 450: config.PRIM_RX = 1;
  3932  04A2  0020               	movlb	0	; select bank0
  3933  04A3  1430               	bsf	nrf24l01InitRegisters@config,0
  3934                           
  3935                           ;nrf24l01.c: 451: config.EN_CRC = 1;
  3936  04A4  15B0               	bsf	nrf24l01InitRegisters@config,3
  3937                           
  3938                           ;nrf24l01.c: 452: config.CRCO = 1;
  3939  04A5  1530               	bsf	nrf24l01InitRegisters@config,2
  3940                           
  3941                           ;nrf24l01.c: 453: config.PWR_UP = 1;
  3942  04A6  14B0               	bsf	nrf24l01InitRegisters@config,1
  3943                           
  3944                           ;nrf24l01.c: 454: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3945  04A7  0830               	movf	nrf24l01InitRegisters@config,w
  3946  04A8  00A7               	movwf	??_nrf24l01InitRegisters
  3947  04A9  0827               	movf	??_nrf24l01InitRegisters,w
  3948  04AA  00A0               	movwf	nrf24l01Send@data
  3949  04AB  3020               	movlw	32
  3950  04AC  3197  272B         	fcall	_nrf24l01Send
  3951  04AE  0008               	return
  3952  04AF                     __end_of_nrf24l01InitRegisters:	
  3953                           
  3954                           	psect	text5
  3955  174B                     __ptext5:	
  3956 ;; *************** function _nrf24l01SetRXPipe *****************
  3957 ;; Defined at:
  3958 ;;		line 337 in file "nrf24l01.c"
  3959 ;; Parameters:    Size  Location     Type
  3960 ;;  pipe            1    wreg     unsigned char 
  3961 ;; Auto vars:     Size  Location     Type
  3962 ;;  pipe            1    5[BANK0 ] unsigned char 
  3963 ;;  enRXAddr        1    6[BANK0 ] struct .
  3964 ;; Return value:  Size  Location     Type
  3965 ;;                  1    wreg      void 
  3966 ;; Registers used:
  3967 ;;		wreg, status,2, status,0, pclath, cstack
  3968 ;; Tracked objects:
  3969 ;;		On entry : 0/0
  3970 ;;		On exit  : 0/0
  3971 ;;		Unchanged: 0/0
  3972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3974 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3975 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3976 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3977 ;;Total ram usage:        4 bytes
  3978 ;; Hardware stack levels used:    1
  3979 ;; Hardware stack levels required when called:   10
  3980 ;; This function calls:
  3981 ;;		_nrf24l01Send
  3982 ;; This function is called by:
  3983 ;;		_main
  3984 ;;		_nrf24l01InitRegisters
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           
  3989                           ;psect for function _nrf24l01SetRXPipe
  3990  174B                     _nrf24l01SetRXPipe:	
  3991                           
  3992                           ;incstack = 0
  3993                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  3994                           ;nrf24l01SetRXPipe@pipe stored from wreg
  3995  174B  0020               	movlb	0	; select bank0
  3996  174C  00A5               	movwf	nrf24l01SetRXPipe@pipe
  3997                           
  3998                           ;nrf24l01.c: 339: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 341: if (pipe > 5){
  3999  174D  3006               	movlw	6
  4000  174E  0225               	subwf	nrf24l01SetRXPipe@pipe,w
  4001  174F  1C03               	skipc
  4002  1750  2F58               	goto	l338
  4003                           
  4004                           ;nrf24l01.c: 342: enRXAddr.ERX_P0 = 1;
  4005  1751  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4006                           
  4007                           ;nrf24l01.c: 343: enRXAddr.ERX_P1 = 1;
  4008  1752  14A6               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4009                           
  4010                           ;nrf24l01.c: 344: enRXAddr.ERX_P2 = 1;
  4011  1753  1526               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4012                           
  4013                           ;nrf24l01.c: 345: enRXAddr.ERX_P3 = 1;
  4014  1754  15A6               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4015                           
  4016                           ;nrf24l01.c: 346: enRXAddr.ERX_P4 = 1;
  4017  1755  1626               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4018                           
  4019                           ;nrf24l01.c: 347: enRXAddr.ERX_P5 = 1;
  4020  1756  16A6               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4021                           
  4022                           ;nrf24l01.c: 348: }
  4023  1757  2F64               	goto	l3161
  4024  1758                     l338:	
  4025                           
  4026                           ;nrf24l01.c: 350: else{;nrf24l01.c: 351: enRXAddr.ERX_P0 = 1;
  4027  1758  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4028                           
  4029                           ;nrf24l01.c: 352: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4030  1759  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4031  175A  00A3               	movwf	??_nrf24l01SetRXPipe
  4032  175B  0A25               	incf	nrf24l01SetRXPipe@pipe,w
  4033  175C  2F5E               	goto	u3284
  4034  175D                     u3285:	
  4035  175D  35A3               	lslf	??_nrf24l01SetRXPipe,f
  4036  175E                     u3284:	
  4037  175E  0B89               	decfsz	9,f
  4038  175F  2F5D               	goto	u3285
  4039  1760  0823               	movf	??_nrf24l01SetRXPipe,w
  4040  1761  00A4               	movwf	??_nrf24l01SetRXPipe+1
  4041  1762  0824               	movf	??_nrf24l01SetRXPipe+1,w
  4042  1763  00A6               	movwf	nrf24l01SetRXPipe@enRXAddr
  4043  1764                     l3161:	
  4044                           
  4045                           ;nrf24l01.c: 353: };nrf24l01.c: 355: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4046  1764  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4047  1765  00A3               	movwf	??_nrf24l01SetRXPipe
  4048  1766  0823               	movf	??_nrf24l01SetRXPipe,w
  4049  1767  00A0               	movwf	nrf24l01Send@data
  4050  1768  3022               	movlw	34
  4051  1769  3197  272B         	fcall	_nrf24l01Send
  4052  176B  0008               	return
  4053  176C                     __end_of_nrf24l01SetRXPipe:	
  4054                           
  4055                           	psect	text6
  4056  0939                     __ptext6:	
  4057 ;; *************** function _nrf24l01GetPipe *****************
  4058 ;; Defined at:
  4059 ;;		line 233 in file "main.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;  name            1    wreg     PTR unsigned char 
  4062 ;;		 -> romDataMap(28), 
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4065 ;;		 -> romDataMap(28), 
  4066 ;;  i               1   10[BANK0 ] unsigned char 
  4067 ;;  pipe            1    8[BANK0 ] unsigned char 
  4068 ;; Return value:  Size  Location     Type
  4069 ;;                  1    wreg      unsigned char 
  4070 ;; Registers used:
  4071 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4072 ;; Tracked objects:
  4073 ;;		On entry : 0/0
  4074 ;;		On exit  : 0/0
  4075 ;;		Unchanged: 0/0
  4076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4078 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4079 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4080 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4081 ;;Total ram usage:        5 bytes
  4082 ;; Hardware stack levels used:    1
  4083 ;; Hardware stack levels required when called:    8
  4084 ;; This function calls:
  4085 ;;		___lwmod
  4086 ;;		_strlen
  4087 ;; This function is called by:
  4088 ;;		_main
  4089 ;; This function uses a non-reentrant model
  4090 ;;
  4091                           
  4092                           
  4093                           ;psect for function _nrf24l01GetPipe
  4094  0939                     _nrf24l01GetPipe:	
  4095                           
  4096                           ;incstack = 0
  4097                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4098                           ;nrf24l01GetPipe@name stored from wreg
  4099  0939  0020               	movlb	0	; select bank0
  4100  093A  00A9               	movwf	nrf24l01GetPipe@name
  4101                           
  4102                           ;main.c: 234: unsigned char pipe = 0;
  4103  093B  01A8               	clrf	nrf24l01GetPipe@pipe
  4104                           
  4105                           ;main.c: 235: unsigned char i = 0;
  4106  093C  01AA               	clrf	nrf24l01GetPipe@i
  4107                           
  4108                           ;main.c: 238: for (i = 0; i < strlen(name); i++){
  4109  093D  01AA               	clrf	nrf24l01GetPipe@i
  4110  093E                     l3611:	
  4111  093E  0829               	movf	nrf24l01GetPipe@name,w
  4112  093F  00A0               	movwf	strlen@s
  4113  0940  3001               	movlw	1
  4114  0941  00A1               	movwf	strlen@s+1
  4115  0942  3197  270C  3189   	fcall	_strlen
  4116  0945  0020               	movlb	0	; select bank0
  4117  0946  082A               	movf	nrf24l01GetPipe@i,w
  4118  0947  00A6               	movwf	??_nrf24l01GetPipe
  4119  0948  01A7               	clrf	??_nrf24l01GetPipe+1
  4120  0949  0821               	movf	?_strlen+1,w
  4121  094A  0227               	subwf	??_nrf24l01GetPipe+1,w
  4122  094B  1D03               	skipz
  4123  094C  294F               	goto	u3665
  4124  094D  0820               	movf	?_strlen,w
  4125  094E  0226               	subwf	??_nrf24l01GetPipe,w
  4126  094F                     u3665:	
  4127  094F  1803               	btfsc	3,0
  4128  0950  2961               	goto	l3613
  4129                           
  4130                           ;main.c: 239: pipe+= name[i];
  4131  0951  082A               	movf	nrf24l01GetPipe@i,w
  4132  0952  0729               	addwf	nrf24l01GetPipe@name,w
  4133  0953  00A6               	movwf	??_nrf24l01GetPipe
  4134  0954  0826               	movf	??_nrf24l01GetPipe,w
  4135  0955  0086               	movwf	6
  4136  0956  3001               	movlw	1	; select bank2/3
  4137  0957  0087               	movwf	7
  4138  0958  0801               	movf	1,w
  4139  0959  00A7               	movwf	??_nrf24l01GetPipe+1
  4140  095A  0827               	movf	??_nrf24l01GetPipe+1,w
  4141  095B  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4142  095C  3001               	movlw	1
  4143  095D  00A6               	movwf	??_nrf24l01GetPipe
  4144  095E  0826               	movf	??_nrf24l01GetPipe,w
  4145  095F  07AA               	addwf	nrf24l01GetPipe@i,f
  4146  0960  293E               	goto	l3611
  4147  0961                     l3613:	
  4148                           
  4149                           ;main.c: 240: };main.c: 242: return (unsigned) pipe % 6;
  4150  0961  3006               	movlw	6
  4151  0962  00A0               	movwf	___lwmod@divisor
  4152  0963  3000               	movlw	0
  4153  0964  00A1               	movwf	___lwmod@divisor+1
  4154  0965  0828               	movf	nrf24l01GetPipe@pipe,w
  4155  0966  00A6               	movwf	??_nrf24l01GetPipe
  4156  0967  01A7               	clrf	??_nrf24l01GetPipe+1
  4157  0968  0826               	movf	??_nrf24l01GetPipe,w
  4158  0969  00A2               	movwf	___lwmod@dividend
  4159  096A  0827               	movf	??_nrf24l01GetPipe+1,w
  4160  096B  00A3               	movwf	___lwmod@dividend+1
  4161  096C  3188  2080         	fcall	___lwmod
  4162  096E  0020               	movlb	0	; select bank0
  4163  096F  0820               	movf	?___lwmod,w
  4164  0970  0008               	return
  4165  0971                     __end_of_nrf24l01GetPipe:	
  4166                           
  4167                           	psect	text7
  4168  0880                     __ptext7:	
  4169 ;; *************** function ___lwmod *****************
  4170 ;; Defined at:
  4171 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;  divisor         2    0[BANK0 ] unsigned int 
  4174 ;;  dividend        2    2[BANK0 ] unsigned int 
  4175 ;; Auto vars:     Size  Location     Type
  4176 ;;  counter         1    5[BANK0 ] unsigned char 
  4177 ;; Return value:  Size  Location     Type
  4178 ;;                  2    0[BANK0 ] unsigned int 
  4179 ;; Registers used:
  4180 ;;		wreg, status,2, status,0
  4181 ;; Tracked objects:
  4182 ;;		On entry : 0/0
  4183 ;;		On exit  : 0/0
  4184 ;;		Unchanged: 0/0
  4185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4186 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4187 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4188 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4189 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4190 ;;Total ram usage:        6 bytes
  4191 ;; Hardware stack levels used:    1
  4192 ;; Hardware stack levels required when called:    7
  4193 ;; This function calls:
  4194 ;;		Nothing
  4195 ;; This function is called by:
  4196 ;;		_nrf24l01GetPipe
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           
  4201                           ;psect for function ___lwmod
  4202  0880                     ___lwmod:	
  4203                           
  4204                           ;incstack = 0
  4205                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4206  0880  0020               	movlb	0	; select bank0
  4207  0881  0820               	movf	___lwmod@divisor,w
  4208  0882  0421               	iorwf	___lwmod@divisor+1,w
  4209  0883  1903               	btfsc	3,2
  4210  0884  28A8               	goto	l3471
  4211  0885  01A5               	clrf	___lwmod@counter
  4212  0886  0AA5               	incf	___lwmod@counter,f
  4213  0887                     l3461:	
  4214  0887  1BA1               	btfsc	___lwmod@divisor+1,7
  4215  0888  2893               	goto	l3463
  4216  0889  3001               	movlw	1
  4217  088A                     u3555:	
  4218  088A  35A0               	lslf	___lwmod@divisor,f
  4219  088B  0DA1               	rlf	___lwmod@divisor+1,f
  4220  088C  0B89               	decfsz	9,f
  4221  088D  288A               	goto	u3555
  4222  088E  3001               	movlw	1
  4223  088F  00A4               	movwf	??___lwmod
  4224  0890  0824               	movf	??___lwmod,w
  4225  0891  07A5               	addwf	___lwmod@counter,f
  4226  0892  2887               	goto	l3461
  4227  0893                     l3463:	
  4228  0893  0821               	movf	___lwmod@divisor+1,w
  4229  0894  0223               	subwf	___lwmod@dividend+1,w
  4230  0895  1D03               	skipz
  4231  0896  2899               	goto	u3575
  4232  0897  0820               	movf	___lwmod@divisor,w
  4233  0898  0222               	subwf	___lwmod@dividend,w
  4234  0899                     u3575:	
  4235  0899  1C03               	skipc
  4236  089A  289F               	goto	l3467
  4237  089B  0820               	movf	___lwmod@divisor,w
  4238  089C  02A2               	subwf	___lwmod@dividend,f
  4239  089D  0821               	movf	___lwmod@divisor+1,w
  4240  089E  3BA3               	subwfb	___lwmod@dividend+1,f
  4241  089F                     l3467:	
  4242  089F  3001               	movlw	1
  4243  08A0                     u3585:	
  4244  08A0  36A1               	lsrf	___lwmod@divisor+1,f
  4245  08A1  0CA0               	rrf	___lwmod@divisor,f
  4246  08A2  0B89               	decfsz	9,f
  4247  08A3  28A0               	goto	u3585
  4248  08A4  3001               	movlw	1
  4249  08A5  02A5               	subwf	___lwmod@counter,f
  4250  08A6  1D03               	btfss	3,2
  4251  08A7  2893               	goto	l3463
  4252  08A8                     l3471:	
  4253  08A8  0823               	movf	___lwmod@dividend+1,w
  4254  08A9  00A1               	movwf	?___lwmod+1
  4255  08AA  0822               	movf	___lwmod@dividend,w
  4256  08AB  00A0               	movwf	?___lwmod
  4257  08AC  0008               	return
  4258  08AD                     __end_of___lwmod:	
  4259                           
  4260                           	psect	text8
  4261  01FA                     __ptext8:	
  4262 ;; *************** function _loop *****************
  4263 ;; Defined at:
  4264 ;;		line 165 in file "main.c"
  4265 ;; Parameters:    Size  Location     Type
  4266 ;;		None
  4267 ;; Auto vars:     Size  Location     Type
  4268 ;;  packet         33   15[BANK2 ] struct .
  4269 ;;  ta              3    3[BANK2 ] float 
  4270 ;;  vt              3    0[BANK2 ] float 
  4271 ;;  rfSetup         1   14[BANK2 ] struct .
  4272 ;; Return value:  Size  Location     Type
  4273 ;;                  1    wreg      void 
  4274 ;; Registers used:
  4275 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4276 ;; Tracked objects:
  4277 ;;		On entry : 0/0
  4278 ;;		On exit  : 0/0
  4279 ;;		Unchanged: 0/0
  4280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4282 ;;      Locals:         0       0       0      48       0       0       0       0       0       0       0       0       
      +0       0
  4283 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4284 ;;      Totals:         0       0       1      48       0       0       0       0       0       0       0       0       
      +0       0
  4285 ;;Total ram usage:       49 bytes
  4286 ;; Hardware stack levels used:    1
  4287 ;; Hardware stack levels required when called:   17
  4288 ;; This function calls:
  4289 ;;		___awtoft
  4290 ;;		___ftadd
  4291 ;;		___ftdiv
  4292 ;;		___ftmul
  4293 ;;		___ftneg
  4294 ;;		___lbtoft
  4295 ;;		_checkTXPower
  4296 ;;		_getADCValue
  4297 ;;		_nrf24l01Send
  4298 ;;		_nrf24l01SendPacket
  4299 ;;		_setMessage
  4300 ;;		_sleep
  4301 ;; This function is called by:
  4302 ;;		_main
  4303 ;; This function uses a non-reentrant model
  4304 ;;
  4305                           
  4306                           
  4307                           ;psect for function _loop
  4308  01FA                     _loop:	
  4309                           
  4310                           ;main.c: 168: nrf24l01Packet_t packet;;main.c: 170: setMessage(&packet, "DBG", counter);
  4311                           
  4312                           ;incstack = 0
  4313 ;; hardware stack exceeded
  4314                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4315  01FA  302F               	movlw	low loop@packet
  4316  01FB  0021               	movlb	1	; select bank1
  4317  01FC  00B9               	movwf	setMessage@packet^(0+128)
  4318  01FD  3001               	movlw	high loop@packet
  4319  01FE  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4320  01FF  302D               	movlw	low (STR_3| (0+32768))
  4321  0200  00BB               	movwf	setMessage@topic^(0+128)
  4322  0201  3098               	movlw	high (STR_3| (0+32768))
  4323  0202  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4324  0203  0022               	movlb	2	; select bank2
  4325  0204  0850               	movf	_counter^(0+256),w
  4326  0205  0021               	movlb	1	; select bank1
  4327  0206  00BD               	movwf	setMessage@value^(0+128)
  4328  0207  0022               	movlb	2	; select bank2
  4329  0208  0851               	movf	(_counter+1)^(0+256),w
  4330  0209  0021               	movlb	1	; select bank1
  4331  020A  00BE               	movwf	(setMessage@value+1)^(0+128)
  4332  020B  0022               	movlb	2	; select bank2
  4333  020C  0852               	movf	(_counter+2)^(0+256),w
  4334  020D  0021               	movlb	1	; select bank1
  4335  020E  00BF               	movwf	(setMessage@value+2)^(0+128)
  4336  020F  318C  24F7  3181   	fcall	_setMessage
  4337                           
  4338                           ;main.c: 171: packet.packetData.byte = 0;
  4339  0212  0022               	movlb	2	; select bank2
  4340  0213  01AF               	clrf	loop@packet^(0+256)
  4341                           
  4342                           ;main.c: 172: packet.packetData.ACKRequest = 0;
  4343  0214  112F               	bcf	loop@packet^(0+256),2
  4344                           
  4345                           ;main.c: 173: nrf24l01SendPacket(&packet);
  4346  0215  302F               	movlw	low loop@packet
  4347  0216  0020               	movlb	0	; select bank0
  4348  0217  00AD               	movwf	nrf24l01SendPacket@Packet
  4349  0218  3001               	movlw	high loop@packet
  4350  0219  00AE               	movwf	nrf24l01SendPacket@Packet+1
  4351  021A  3186  2697  3181   	fcall	_nrf24l01SendPacket
  4352                           
  4353                           ;main.c: 174: checkTXPower();
  4354  021D  3196  2608  3181   	fcall	_checkTXPower
  4355                           
  4356                           ;main.c: 175: sleep(2000);
  4357  0220  30D0               	movlw	208
  4358  0221  0020               	movlb	0	; select bank0
  4359  0222  00B8               	movwf	sleep@milliseconds
  4360  0223  3007               	movlw	7
  4361  0224  00B9               	movwf	sleep@milliseconds+1
  4362  0225  3189  2109  3181   	fcall	_sleep
  4363                           
  4364                           ;main.c: 179: FVRCONbits.TSEN = 1;
  4365  0228  0022               	movlb	2	; select bank2
  4366  0229  1697               	bsf	23,5	;volatile
  4367                           
  4368                           ;main.c: 180: float vt = (2.048 - getADCValue(0b111101)) / (FVRCONbits.TSRNG ? 2 : 4);
  4369  022A  1A17               	btfsc	23,4	;volatile
  4370  022B  2A2E               	goto	l3543
  4371  022C  3004               	movlw	4
  4372  022D  2A2F               	goto	L1
  4373  022E                     l3543:	
  4374  022E  3002               	movlw	2
  4375  022F                     L1:	
  4376  022F  00AC               	movwf	_loop$877^(0+256)
  4377  0230  3000               	movlw	0
  4378  0231  00AD               	movwf	(_loop$877^(0+256)+1)
  4379  0232  303D               	movlw	61
  4380  0233  3187  2768  3181   	fcall	_getADCValue
  4381  0236  0020               	movlb	0	; select bank0
  4382  0237  084B               	movf	?_getADCValue,w
  4383  0238  00D7               	movwf	___ftneg@f1
  4384  0239  084C               	movf	?_getADCValue+1,w
  4385  023A  00D8               	movwf	___ftneg@f1+1
  4386  023B  084D               	movf	?_getADCValue+2,w
  4387  023C  00D9               	movwf	___ftneg@f1+2
  4388  023D  3195  25BF  3181   	fcall	___ftneg
  4389  0240  0020               	movlb	0	; select bank0
  4390  0241  0857               	movf	?___ftneg,w
  4391  0242  0022               	movlb	2	; select bank2
  4392  0243  00A6               	movwf	_loop$2064^(0+256)
  4393  0244  0020               	movlb	0	; select bank0
  4394  0245  0858               	movf	?___ftneg+1,w
  4395  0246  0022               	movlb	2	; select bank2
  4396  0247  00A7               	movwf	(_loop$2064+1)^(0+256)
  4397  0248  0020               	movlb	0	; select bank0
  4398  0249  0859               	movf	?___ftneg+2,w
  4399  024A  0022               	movlb	2	; select bank2
  4400  024B  00A8               	movwf	(_loop$2064+2)^(0+256)
  4401  024C  082D               	movf	(_loop$877+1)^(0+256),w
  4402  024D  0020               	movlb	0	; select bank0
  4403  024E  00A9               	movwf	___awtoft@c+1
  4404  024F  0022               	movlb	2	; select bank2
  4405  0250  082C               	movf	_loop$877^(0+256),w
  4406  0251  0020               	movlb	0	; select bank0
  4407  0252  00A8               	movwf	___awtoft@c
  4408  0253  3197  276C  3181   	fcall	___awtoft
  4409  0256  0020               	movlb	0	; select bank0
  4410  0257  0828               	movf	?___awtoft,w
  4411  0258  00BB               	movwf	___ftdiv@f2
  4412  0259  0829               	movf	?___awtoft+1,w
  4413  025A  00BC               	movwf	___ftdiv@f2+1
  4414  025B  082A               	movf	?___awtoft+2,w
  4415  025C  00BD               	movwf	___ftdiv@f2+2
  4416  025D  3012               	movlw	18
  4417  025E  00AE               	movwf	___ftadd@f1
  4418  025F  3003               	movlw	3
  4419  0260  00AF               	movwf	___ftadd@f1+1
  4420  0261  3040               	movlw	64
  4421  0262  00B0               	movwf	___ftadd@f1+2
  4422  0263  0022               	movlb	2	; select bank2
  4423  0264  0826               	movf	_loop$2064^(0+256),w
  4424  0265  0020               	movlb	0	; select bank0
  4425  0266  00B1               	movwf	___ftadd@f2
  4426  0267  0022               	movlb	2	; select bank2
  4427  0268  0827               	movf	(_loop$2064+1)^(0+256),w
  4428  0269  0020               	movlb	0	; select bank0
  4429  026A  00B2               	movwf	___ftadd@f2+1
  4430  026B  0022               	movlb	2	; select bank2
  4431  026C  0828               	movf	(_loop$2064+2)^(0+256),w
  4432  026D  0020               	movlb	0	; select bank0
  4433  026E  00B3               	movwf	___ftadd@f2+2
  4434  026F  3184  24AF  3181   	fcall	___ftadd
  4435  0272  0020               	movlb	0	; select bank0
  4436  0273  082E               	movf	?___ftadd,w
  4437  0274  00BE               	movwf	___ftdiv@f1
  4438  0275  082F               	movf	?___ftadd+1,w
  4439  0276  00BF               	movwf	___ftdiv@f1+1
  4440  0277  0830               	movf	?___ftadd+2,w
  4441  0278  00C0               	movwf	___ftdiv@f1+2
  4442  0279  318E  26A3  3181   	fcall	___ftdiv
  4443  027C  0020               	movlb	0	; select bank0
  4444  027D  083B               	movf	?___ftdiv,w
  4445  027E  0022               	movlb	2	; select bank2
  4446  027F  00A0               	movwf	loop@vt^(0+256)
  4447  0280  0020               	movlb	0	; select bank0
  4448  0281  083C               	movf	?___ftdiv+1,w
  4449  0282  0022               	movlb	2	; select bank2
  4450  0283  00A1               	movwf	(loop@vt+1)^(0+256)
  4451  0284  0020               	movlb	0	; select bank0
  4452  0285  083D               	movf	?___ftdiv+2,w
  4453  0286  0022               	movlb	2	; select bank2
  4454  0287  00A2               	movwf	(loop@vt+2)^(0+256)
  4455                           
  4456                           ;main.c: 181: FVRCONbits.TSEN = 0;
  4457  0288  1297               	bcf	23,5	;volatile
  4458                           
  4459                           ;main.c: 189: float ta = (vt / -0.0014) - (0.6063 / -0.0014) - 40;
  4460  0289  3089               	movlw	137
  4461  028A  0020               	movlb	0	; select bank0
  4462  028B  00AE               	movwf	___ftadd@f1
  4463  028C  30C4               	movlw	196
  4464  028D  00AF               	movwf	___ftadd@f1+1
  4465  028E  3043               	movlw	67
  4466  028F  00B0               	movwf	___ftadd@f1+2
  4467  0290  3080               	movlw	128
  4468  0291  00BB               	movwf	___ftdiv@f2
  4469  0292  30B7               	movlw	183
  4470  0293  00BC               	movwf	___ftdiv@f2+1
  4471  0294  30BA               	movlw	186
  4472  0295  00BD               	movwf	___ftdiv@f2+2
  4473  0296  0022               	movlb	2	; select bank2
  4474  0297  0820               	movf	loop@vt^(0+256),w
  4475  0298  0020               	movlb	0	; select bank0
  4476  0299  00BE               	movwf	___ftdiv@f1
  4477  029A  0022               	movlb	2	; select bank2
  4478  029B  0821               	movf	(loop@vt+1)^(0+256),w
  4479  029C  0020               	movlb	0	; select bank0
  4480  029D  00BF               	movwf	___ftdiv@f1+1
  4481  029E  0022               	movlb	2	; select bank2
  4482  029F  0822               	movf	(loop@vt+2)^(0+256),w
  4483  02A0  0020               	movlb	0	; select bank0
  4484  02A1  00C0               	movwf	___ftdiv@f1+2
  4485  02A2  318E  26A3  3181   	fcall	___ftdiv
  4486  02A5  0020               	movlb	0	; select bank0
  4487  02A6  083B               	movf	?___ftdiv,w
  4488  02A7  00B1               	movwf	___ftadd@f2
  4489  02A8  083C               	movf	?___ftdiv+1,w
  4490  02A9  00B2               	movwf	___ftadd@f2+1
  4491  02AA  083D               	movf	?___ftdiv+2,w
  4492  02AB  00B3               	movwf	___ftadd@f2+2
  4493  02AC  3184  24AF  3181   	fcall	___ftadd
  4494  02AF  0020               	movlb	0	; select bank0
  4495  02B0  082E               	movf	?___ftadd,w
  4496  02B1  0022               	movlb	2	; select bank2
  4497  02B2  00A3               	movwf	loop@ta^(0+256)
  4498  02B3  0020               	movlb	0	; select bank0
  4499  02B4  082F               	movf	?___ftadd+1,w
  4500  02B5  0022               	movlb	2	; select bank2
  4501  02B6  00A4               	movwf	(loop@ta+1)^(0+256)
  4502  02B7  0020               	movlb	0	; select bank0
  4503  02B8  0830               	movf	?___ftadd+2,w
  4504  02B9  0022               	movlb	2	; select bank2
  4505  02BA  00A5               	movwf	(loop@ta+2)^(0+256)
  4506                           
  4507                           ;main.c: 191: setMessage(&packet, "TEMP", ta);
  4508  02BB  302F               	movlw	low loop@packet
  4509  02BC  0021               	movlb	1	; select bank1
  4510  02BD  00B9               	movwf	setMessage@packet^(0+128)
  4511  02BE  3001               	movlw	high loop@packet
  4512  02BF  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4513  02C0  301E               	movlw	low (STR_4| (0+32768))
  4514  02C1  00BB               	movwf	setMessage@topic^(0+128)
  4515  02C2  3098               	movlw	high (STR_4| (0+32768))
  4516  02C3  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4517  02C4  0022               	movlb	2	; select bank2
  4518  02C5  0823               	movf	loop@ta^(0+256),w
  4519  02C6  0021               	movlb	1	; select bank1
  4520  02C7  00BD               	movwf	setMessage@value^(0+128)
  4521  02C8  0022               	movlb	2	; select bank2
  4522  02C9  0824               	movf	(loop@ta+1)^(0+256),w
  4523  02CA  0021               	movlb	1	; select bank1
  4524  02CB  00BE               	movwf	(setMessage@value+1)^(0+128)
  4525  02CC  0022               	movlb	2	; select bank2
  4526  02CD  0825               	movf	(loop@ta+2)^(0+256),w
  4527  02CE  0021               	movlb	1	; select bank1
  4528  02CF  00BF               	movwf	(setMessage@value+2)^(0+128)
  4529  02D0  318C  24F7  3181   	fcall	_setMessage
  4530                           
  4531                           ;main.c: 192: packet.packetData.byte = 0;
  4532  02D3  0022               	movlb	2	; select bank2
  4533  02D4  01AF               	clrf	loop@packet^(0+256)
  4534                           
  4535                           ;main.c: 193: packet.packetData.ACKRequest = 1;
  4536  02D5  152F               	bsf	loop@packet^(0+256),2
  4537                           
  4538                           ;main.c: 194: nrf24l01SendPacket(&packet);
  4539  02D6  302F               	movlw	low loop@packet
  4540  02D7  0020               	movlb	0	; select bank0
  4541  02D8  00AD               	movwf	nrf24l01SendPacket@Packet
  4542  02D9  3001               	movlw	high loop@packet
  4543  02DA  00AE               	movwf	nrf24l01SendPacket@Packet+1
  4544  02DB  3186  2697  3181   	fcall	_nrf24l01SendPacket
  4545                           
  4546                           ;main.c: 195: checkTXPower();
  4547  02DE  3196  2608  3181   	fcall	_checkTXPower
  4548                           
  4549                           ;main.c: 196: sleep(2000);
  4550  02E1  30D0               	movlw	208
  4551  02E2  0020               	movlb	0	; select bank0
  4552  02E3  00B8               	movwf	sleep@milliseconds
  4553  02E4  3007               	movlw	7
  4554  02E5  00B9               	movwf	sleep@milliseconds+1
  4555  02E6  3189  2109  3181   	fcall	_sleep
  4556                           
  4557                           ;main.c: 203: setMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4558  02E9  30CF               	movlw	207
  4559  02EA  0020               	movlb	0	; select bank0
  4560  02EB  00D7               	movwf	___ftmul@f1
  4561  02EC  3046               	movlw	70
  4562  02ED  00D8               	movwf	___ftmul@f1+1
  4563  02EE  3040               	movlw	64
  4564  02EF  00D9               	movwf	___ftmul@f1+2
  4565  02F0  3004               	movlw	4
  4566  02F1  3187  2768  3181   	fcall	_getADCValue
  4567  02F4  0020               	movlb	0	; select bank0
  4568  02F5  084B               	movf	?_getADCValue,w
  4569  02F6  00DA               	movwf	___ftmul@f2
  4570  02F7  084C               	movf	?_getADCValue+1,w
  4571  02F8  00DB               	movwf	___ftmul@f2+1
  4572  02F9  084D               	movf	?_getADCValue+2,w
  4573  02FA  00DC               	movwf	___ftmul@f2+2
  4574  02FB  318F  274C  3181   	fcall	___ftmul
  4575  02FE  0020               	movlb	0	; select bank0
  4576  02FF  0857               	movf	?___ftmul,w
  4577  0300  0022               	movlb	2	; select bank2
  4578  0301  00A9               	movwf	_loop$2065^(0+256)
  4579  0302  0020               	movlb	0	; select bank0
  4580  0303  0858               	movf	?___ftmul+1,w
  4581  0304  0022               	movlb	2	; select bank2
  4582  0305  00AA               	movwf	(_loop$2065+1)^(0+256)
  4583  0306  0020               	movlb	0	; select bank0
  4584  0307  0859               	movf	?___ftmul+2,w
  4585  0308  0022               	movlb	2	; select bank2
  4586  0309  00AB               	movwf	(_loop$2065+2)^(0+256)
  4587                           
  4588                           ;main.c: 203: setMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4589  030A  302F               	movlw	low loop@packet
  4590  030B  0021               	movlb	1	; select bank1
  4591  030C  00B9               	movwf	setMessage@packet^(0+128)
  4592  030D  3001               	movlw	high loop@packet
  4593  030E  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4594  030F  3023               	movlw	low (STR_5| (0+32768))
  4595  0310  00BB               	movwf	setMessage@topic^(0+128)
  4596  0311  3098               	movlw	high (STR_5| (0+32768))
  4597  0312  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4598  0313  0022               	movlb	2	; select bank2
  4599  0314  0829               	movf	_loop$2065^(0+256),w
  4600  0315  0021               	movlb	1	; select bank1
  4601  0316  00BD               	movwf	setMessage@value^(0+128)
  4602  0317  0022               	movlb	2	; select bank2
  4603  0318  082A               	movf	(_loop$2065+1)^(0+256),w
  4604  0319  0021               	movlb	1	; select bank1
  4605  031A  00BE               	movwf	(setMessage@value+1)^(0+128)
  4606  031B  0022               	movlb	2	; select bank2
  4607  031C  082B               	movf	(_loop$2065+2)^(0+256),w
  4608  031D  0021               	movlb	1	; select bank1
  4609  031E  00BF               	movwf	(setMessage@value+2)^(0+128)
  4610  031F  318C  24F7  3181   	fcall	_setMessage
  4611                           
  4612                           ;main.c: 204: packet.packetData.byte = 0;
  4613  0322  0022               	movlb	2	; select bank2
  4614  0323  01AF               	clrf	loop@packet^(0+256)
  4615                           
  4616                           ;main.c: 205: packet.packetData.ACKRequest = 0;
  4617  0324  112F               	bcf	loop@packet^(0+256),2
  4618                           
  4619                           ;main.c: 206: nrf24l01SendPacket(&packet);
  4620  0325  302F               	movlw	low loop@packet
  4621  0326  0020               	movlb	0	; select bank0
  4622  0327  00AD               	movwf	nrf24l01SendPacket@Packet
  4623  0328  3001               	movlw	high loop@packet
  4624  0329  00AE               	movwf	nrf24l01SendPacket@Packet+1
  4625  032A  3186  2697  3181   	fcall	_nrf24l01SendPacket
  4626                           
  4627                           ;main.c: 207: checkTXPower();
  4628  032D  3196  2608  3181   	fcall	_checkTXPower
  4629                           
  4630                           ;main.c: 208: sleep(2000);
  4631  0330  30D0               	movlw	208
  4632  0331  0020               	movlb	0	; select bank0
  4633  0332  00B8               	movwf	sleep@milliseconds
  4634  0333  3007               	movlw	7
  4635  0334  00B9               	movwf	sleep@milliseconds+1
  4636  0335  3189  2109  3181   	fcall	_sleep
  4637                           
  4638                           ;main.c: 211: setMessage(&packet, "ANC3mV", getADCValue(0b010011));
  4639  0338  302F               	movlw	low loop@packet
  4640  0339  0021               	movlb	1	; select bank1
  4641  033A  00B9               	movwf	setMessage@packet^(0+128)
  4642  033B  3001               	movlw	high loop@packet
  4643  033C  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4644  033D  300C               	movlw	low (STR_6| (0+32768))
  4645  033E  00BB               	movwf	setMessage@topic^(0+128)
  4646  033F  3098               	movlw	high (STR_6| (0+32768))
  4647  0340  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4648  0341  3013               	movlw	19
  4649  0342  3187  2768  3181   	fcall	_getADCValue
  4650  0345  0020               	movlb	0	; select bank0
  4651  0346  084B               	movf	?_getADCValue,w
  4652  0347  0021               	movlb	1	; select bank1
  4653  0348  00BD               	movwf	setMessage@value^(0+128)
  4654  0349  0020               	movlb	0	; select bank0
  4655  034A  084C               	movf	?_getADCValue+1,w
  4656  034B  0021               	movlb	1	; select bank1
  4657  034C  00BE               	movwf	(setMessage@value+1)^(0+128)
  4658  034D  0020               	movlb	0	; select bank0
  4659  034E  084D               	movf	?_getADCValue+2,w
  4660  034F  0021               	movlb	1	; select bank1
  4661  0350  00BF               	movwf	(setMessage@value+2)^(0+128)
  4662  0351  318C  24F7  3181   	fcall	_setMessage
  4663                           
  4664                           ;main.c: 212: packet.packetData.byte = 0;
  4665  0354  0022               	movlb	2	; select bank2
  4666  0355  01AF               	clrf	loop@packet^(0+256)
  4667                           
  4668                           ;main.c: 213: packet.packetData.ACKRequest = 1;
  4669  0356  152F               	bsf	loop@packet^(0+256),2
  4670                           
  4671                           ;main.c: 214: nrf24l01SendPacket(&packet);
  4672  0357  302F               	movlw	low loop@packet
  4673  0358  0020               	movlb	0	; select bank0
  4674  0359  00AD               	movwf	nrf24l01SendPacket@Packet
  4675  035A  3001               	movlw	high loop@packet
  4676  035B  00AE               	movwf	nrf24l01SendPacket@Packet+1
  4677  035C  3186  2697  3181   	fcall	_nrf24l01SendPacket
  4678                           
  4679                           ;main.c: 215: checkTXPower();
  4680  035F  3196  2608  3181   	fcall	_checkTXPower
  4681                           
  4682                           ;main.c: 216: sleep(2000);
  4683  0362  30D0               	movlw	208
  4684  0363  0020               	movlb	0	; select bank0
  4685  0364  00B8               	movwf	sleep@milliseconds
  4686  0365  3007               	movlw	7
  4687  0366  00B9               	movwf	sleep@milliseconds+1
  4688  0367  3189  2109  3181   	fcall	_sleep
  4689                           
  4690                           ;main.c: 219: n_RF_SETUP_t rfSetup;;main.c: 220: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4691  036A  0020               	movlb	0	; select bank0
  4692  036B  01A0               	clrf	nrf24l01Send@data
  4693  036C  3006               	movlw	6
  4694  036D  3197  272B  3181   	fcall	_nrf24l01Send
  4695  0370  0021               	movlb	1	; select bank1
  4696  0371  00C3               	movwf	??_loop^(0+128)
  4697  0372  0843               	movf	??_loop^(0+128),w
  4698  0373  0022               	movlb	2	; select bank2
  4699  0374  00AE               	movwf	loop@rfSetup^(0+256)
  4700                           
  4701                           ;main.c: 222: setMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4702  0375  302F               	movlw	low loop@packet
  4703  0376  0021               	movlb	1	; select bank1
  4704  0377  00B9               	movwf	setMessage@packet^(0+128)
  4705  0378  3001               	movlw	high loop@packet
  4706  0379  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4707  037A  3013               	movlw	low (STR_7| (0+32768))
  4708  037B  00BB               	movwf	setMessage@topic^(0+128)
  4709  037C  3098               	movlw	high (STR_7| (0+32768))
  4710  037D  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4711  037E  0022               	movlb	2	; select bank2
  4712  037F  0C2E               	rrf	loop@rfSetup^(0+256),w
  4713  0380  3903               	andlw	3
  4714  0381  3196  267F  3181   	fcall	___lbtoft
  4715  0384  0020               	movlb	0	; select bank0
  4716  0385  0828               	movf	?___lbtoft,w
  4717  0386  0021               	movlb	1	; select bank1
  4718  0387  00BD               	movwf	setMessage@value^(0+128)
  4719  0388  0020               	movlb	0	; select bank0
  4720  0389  0829               	movf	?___lbtoft+1,w
  4721  038A  0021               	movlb	1	; select bank1
  4722  038B  00BE               	movwf	(setMessage@value+1)^(0+128)
  4723  038C  0020               	movlb	0	; select bank0
  4724  038D  082A               	movf	?___lbtoft+2,w
  4725  038E  0021               	movlb	1	; select bank1
  4726  038F  00BF               	movwf	(setMessage@value+2)^(0+128)
  4727  0390  318C  24F7  3181   	fcall	_setMessage
  4728                           
  4729                           ;main.c: 223: packet.packetData.byte = 0;
  4730  0393  0022               	movlb	2	; select bank2
  4731  0394  01AF               	clrf	loop@packet^(0+256)
  4732                           
  4733                           ;main.c: 224: packet.packetData.ACKRequest = 1;
  4734  0395  152F               	bsf	loop@packet^(0+256),2
  4735                           
  4736                           ;main.c: 225: nrf24l01SendPacket(&packet);
  4737  0396  302F               	movlw	low loop@packet
  4738  0397  0020               	movlb	0	; select bank0
  4739  0398  00AD               	movwf	nrf24l01SendPacket@Packet
  4740  0399  3001               	movlw	high loop@packet
  4741  039A  00AE               	movwf	nrf24l01SendPacket@Packet+1
  4742  039B  3186  2697  3181   	fcall	_nrf24l01SendPacket
  4743                           
  4744                           ;main.c: 226: checkTXPower();
  4745  039E  3196  2608  3181   	fcall	_checkTXPower
  4746                           
  4747                           ;main.c: 227: sleep(2000);
  4748  03A1  30D0               	movlw	208
  4749  03A2  0020               	movlb	0	; select bank0
  4750  03A3  00B8               	movwf	sleep@milliseconds
  4751  03A4  3007               	movlw	7
  4752  03A5  00B9               	movwf	sleep@milliseconds+1
  4753  03A6  3189  2109         	fcall	_sleep
  4754  03A8  0008               	return
  4755  03A9                     __end_of_loop:	
  4756                           
  4757                           	psect	text9
  4758  0909                     __ptext9:	
  4759 ;; *************** function _sleep *****************
  4760 ;; Defined at:
  4761 ;;		line 72 in file "main.c"
  4762 ;; Parameters:    Size  Location     Type
  4763 ;;  milliseconds    2   24[BANK0 ] unsigned int 
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;		None
  4766 ;; Return value:  Size  Location     Type
  4767 ;;                  1    wreg      void 
  4768 ;; Registers used:
  4769 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4770 ;; Tracked objects:
  4771 ;;		On entry : 0/0
  4772 ;;		On exit  : 0/0
  4773 ;;		Unchanged: 0/0
  4774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4775 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4777 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4778 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4779 ;;Total ram usage:        4 bytes
  4780 ;; Hardware stack levels used:    1
  4781 ;; Hardware stack levels required when called:   16
  4782 ;; This function calls:
  4783 ;;		_doWDTSleep
  4784 ;;		_handleRXData
  4785 ;;		_nrf24l01SetRXMode
  4786 ;; This function is called by:
  4787 ;;		_loop
  4788 ;;		_main
  4789 ;; This function uses a non-reentrant model
  4790 ;;
  4791                           
  4792                           
  4793                           ;psect for function _sleep
  4794  0909                     _sleep:	
  4795                           
  4796                           ;main.c: 75: if (!milliseconds){
  4797                           
  4798                           ;incstack = 0
  4799 ;; hardware stack exceeded
  4800                           ; Regs used in _sleep: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4801  0909  0020               	movlb	0	; select bank0
  4802  090A  0838               	movf	sleep@milliseconds,w
  4803  090B  0439               	iorwf	sleep@milliseconds+1,w
  4804  090C  1D03               	btfss	3,2
  4805  090D  2912               	goto	l3283
  4806                           
  4807                           ;main.c: 76: doWDTSleep(0b00000);
  4808  090E  3000               	movlw	0
  4809  090F  3196  261C         	fcall	_doWDTSleep
  4810                           
  4811                           ;main.c: 77: return;
  4812  0911  0008               	return
  4813  0912                     l3283:	
  4814                           
  4815                           ;main.c: 78: };main.c: 83: milliseconds = (unsigned int) (milliseconds / (256));
  4816  0912  0020               	movlb	0	; select bank0
  4817  0913  0839               	movf	sleep@milliseconds+1,w
  4818  0914  00BB               	movwf	??_sleep+1
  4819  0915  0838               	movf	sleep@milliseconds,w
  4820  0916  00BA               	movwf	??_sleep
  4821  0917  083B               	movf	??_sleep+1,w
  4822  0918  00BA               	movwf	??_sleep
  4823  0919  01BB               	clrf	??_sleep+1
  4824  091A  083A               	movf	??_sleep,w
  4825  091B  00B8               	movwf	sleep@milliseconds
  4826  091C  083B               	movf	??_sleep+1,w
  4827  091D  00B9               	movwf	sleep@milliseconds+1
  4828                           
  4829                           ;main.c: 86: milliseconds++;
  4830  091E  3001               	movlw	1
  4831  091F  07B8               	addwf	sleep@milliseconds,f
  4832  0920  3000               	movlw	0
  4833  0921  3DB9               	addwfc	sleep@milliseconds+1,f
  4834  0922                     l3293:	
  4835                           ;main.c: 89: while (--milliseconds){
  4836                           
  4837  0922  3001               	movlw	1
  4838  0923  0020               	movlb	0	; select bank0
  4839  0924  02B8               	subwf	sleep@milliseconds,f
  4840  0925  3000               	movlw	0
  4841  0926  3BB9               	subwfb	sleep@milliseconds+1,f
  4842  0927  0838               	movf	sleep@milliseconds,w
  4843  0928  0439               	iorwf	sleep@milliseconds+1,w
  4844  0929  1903               	btfsc	3,2
  4845  092A  0008               	return
  4846                           
  4847                           ;main.c: 92: nrf24l01SetRXMode(1);
  4848  092B  3001               	movlw	1
  4849  092C  318B  2300  3189   	fcall	_nrf24l01SetRXMode
  4850                           
  4851                           ;main.c: 95: doWDTSleep(0b01000);
  4852  092F  3008               	movlw	8
  4853  0930  3196  261C  3189   	fcall	_doWDTSleep
  4854                           
  4855                           ;main.c: 101: if (nrf24l01.RXPending){
  4856  0933  1CFD               	btfss	_nrf24l01,1	;volatile
  4857  0934  2922               	goto	l3293
  4858                           
  4859                           ;main.c: 102: handleRXData();
  4860  0935  3195  25F6  3189   	fcall	_handleRXData
  4861  0938  2922               	goto	l3293
  4862  0939                     __end_of_sleep:	
  4863                           
  4864                           	psect	text10
  4865  15F6                     __ptext10:	
  4866 ;; *************** function _handleRXData *****************
  4867 ;; Defined at:
  4868 ;;		line 36 in file "main.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;		None
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;  RXPacket        1   23[BANK0 ] PTR struct .
  4873 ;;		 -> RXPacket(33), 
  4874 ;; Return value:  Size  Location     Type
  4875 ;;                  1    wreg      void 
  4876 ;; Registers used:
  4877 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4878 ;; Tracked objects:
  4879 ;;		On entry : 0/0
  4880 ;;		On exit  : 0/0
  4881 ;;		Unchanged: 0/0
  4882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4884 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4885 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4886 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4887 ;;Total ram usage:        2 bytes
  4888 ;; Hardware stack levels used:    1
  4889 ;; Hardware stack levels required when called:   15
  4890 ;; This function calls:
  4891 ;;		_nrf24l01GetRXPacket
  4892 ;;		_nrf24l01SendACK
  4893 ;; This function is called by:
  4894 ;;		_sleep
  4895 ;; This function uses a non-reentrant model
  4896 ;;
  4897                           
  4898                           
  4899                           ;psect for function _handleRXData
  4900  15F6                     _handleRXData:	
  4901                           
  4902                           ;main.c: 38: nrf24l01Packet_t * RXPacket = nrf24l01GetRXPacket();
  4903                           
  4904                           ;incstack = 0
  4905 ;; hardware stack exceeded
  4906                           ; Regs used in _handleRXData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4907  15F6  3195  259A  3195   	fcall	_nrf24l01GetRXPacket
  4908  15F9  0020               	movlb	0	; select bank0
  4909  15FA  00B6               	movwf	??_handleRXData
  4910  15FB  0836               	movf	??_handleRXData,w
  4911  15FC  00B7               	movwf	handleRXData@RXPacket
  4912                           
  4913                           ;main.c: 52: if (RXPacket->packetData.ACKRequest){
  4914  15FD  0837               	movf	handleRXData@RXPacket,w
  4915  15FE  0086               	movwf	6
  4916  15FF  3001               	movlw	1	; select bank2/3
  4917  1600  0087               	movwf	7
  4918  1601  1D01               	btfss	1,2
  4919  1602  2E06               	goto	l3121
  4920                           
  4921                           ;main.c: 53: nrf24l01SendACK(RXPacket);
  4922  1603  0837               	movf	handleRXData@RXPacket,w
  4923  1604  3188  20DB         	fcall	_nrf24l01SendACK
  4924  1606                     l3121:	
  4925                           
  4926                           ;main.c: 54: };main.c: 68: nrf24l01.RXPending = 0;
  4927  1606  10FD               	bcf	_nrf24l01,1	;volatile
  4928  1607  0008               	return
  4929  1608                     __end_of_handleRXData:	
  4930                           
  4931                           	psect	text11
  4932  08DB                     __ptext11:	
  4933 ;; *************** function _nrf24l01SendACK *****************
  4934 ;; Defined at:
  4935 ;;		line 92 in file "nrf24l01.c"
  4936 ;; Parameters:    Size  Location     Type
  4937 ;;  packet          1    wreg     PTR struct .
  4938 ;;		 -> RXPacket(33), 
  4939 ;; Auto vars:     Size  Location     Type
  4940 ;;  packet          1   21[BANK0 ] PTR struct .
  4941 ;;		 -> RXPacket(33), 
  4942 ;; Return value:  Size  Location     Type
  4943 ;;                  1    wreg      void 
  4944 ;; Registers used:
  4945 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4946 ;; Tracked objects:
  4947 ;;		On entry : 0/0
  4948 ;;		On exit  : 0/0
  4949 ;;		Unchanged: 0/0
  4950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4952 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4953 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4954 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4955 ;;Total ram usage:        2 bytes
  4956 ;; Hardware stack levels used:    1
  4957 ;; Hardware stack levels required when called:   14
  4958 ;; This function calls:
  4959 ;;		_nrf24l01SendPacket
  4960 ;;		_nrf24l01SetTXPipe
  4961 ;; This function is called by:
  4962 ;;		_handleRXData
  4963 ;; This function uses a non-reentrant model
  4964 ;;
  4965                           
  4966                           
  4967                           ;psect for function _nrf24l01SendACK
  4968  08DB                     _nrf24l01SendACK:	
  4969                           
  4970                           ;incstack = 0
  4971 ;; hardware stack exceeded
  4972                           ; Regs used in _nrf24l01SendACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4973                           ;nrf24l01SendACK@packet stored from wreg
  4974  08DB  0020               	movlb	0	; select bank0
  4975  08DC  00B5               	movwf	nrf24l01SendACK@packet
  4976                           
  4977                           ;nrf24l01.c: 94: nrf24l01SetTXPipe(packet->packetData.Pipe);
  4978  08DD  0835               	movf	nrf24l01SendACK@packet,w
  4979  08DE  0086               	movwf	6
  4980  08DF  3001               	movlw	1	; select bank2/3
  4981  08E0  0087               	movwf	7
  4982  08E1  0E01               	swapf	1,w
  4983  08E2  3907               	andlw	7
  4984  08E3  318A  2273  3188   	fcall	_nrf24l01SetTXPipe
  4985                           
  4986                           ;nrf24l01.c: 96: packet->packetData.ACKRequest = 0;
  4987  08E6  0020               	movlb	0	; select bank0
  4988  08E7  0835               	movf	nrf24l01SendACK@packet,w
  4989  08E8  0086               	movwf	6
  4990  08E9  3001               	movlw	1	; select bank2/3
  4991  08EA  0087               	movwf	7
  4992  08EB  1101               	bcf	1,2
  4993                           
  4994                           ;nrf24l01.c: 97: packet->packetData.IsACK = 1;
  4995  08EC  0835               	movf	nrf24l01SendACK@packet,w
  4996  08ED  0086               	movwf	6
  4997  08EE  3001               	movlw	1	; select bank2/3
  4998  08EF  0087               	movwf	7
  4999  08F0  1581               	bsf	1,3
  5000                           
  5001                           ;nrf24l01.c: 98: packet->packetData.ACKRPD = packet->packetData.RPD;
  5002  08F1  0835               	movf	nrf24l01SendACK@packet,w
  5003  08F2  0086               	movwf	6
  5004  08F3  3001               	movlw	1	; select bank2/3
  5005  08F4  0087               	movwf	7
  5006  08F5  0801               	movf	1,w
  5007  08F6  3901               	andlw	1
  5008  08F7  00B4               	movwf	??_nrf24l01SendACK
  5009  08F8  0835               	movf	nrf24l01SendACK@packet,w
  5010  08F9  0086               	movwf	6
  5011  08FA  3001               	movlw	1	; select bank2/3
  5012  08FB  0087               	movwf	7
  5013  08FC  0DB4               	rlf	??_nrf24l01SendACK,f
  5014  08FD  0801               	movf	1,w
  5015  08FE  0634               	xorwf	??_nrf24l01SendACK,w
  5016  08FF  39FD               	andlw	-3
  5017  0900  0634               	xorwf	??_nrf24l01SendACK,w
  5018  0901  0081               	movwf	1
  5019                           
  5020                           ;nrf24l01.c: 101: nrf24l01SendPacket(packet);
  5021  0902  0835               	movf	nrf24l01SendACK@packet,w
  5022  0903  00AD               	movwf	nrf24l01SendPacket@Packet
  5023  0904  3001               	movlw	1
  5024  0905  00AE               	movwf	nrf24l01SendPacket@Packet+1
  5025  0906  3186  2697         	fcall	_nrf24l01SendPacket
  5026  0908  0008               	return
  5027  0909                     __end_of_nrf24l01SendACK:	
  5028                           
  5029                           	psect	text12
  5030  0A73                     __ptext12:	
  5031 ;; *************** function _nrf24l01SetTXPipe *****************
  5032 ;; Defined at:
  5033 ;;		line 324 in file "nrf24l01.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;  pipe            1    wreg     unsigned char 
  5036 ;; Auto vars:     Size  Location     Type
  5037 ;;  pipe            1    6[BANK0 ] unsigned char 
  5038 ;; Return value:  Size  Location     Type
  5039 ;;                  1    wreg      void 
  5040 ;; Registers used:
  5041 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5042 ;; Tracked objects:
  5043 ;;		On entry : 0/0
  5044 ;;		On exit  : 0/0
  5045 ;;		Unchanged: 0/0
  5046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5048 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5049 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5050 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5051 ;;Total ram usage:        3 bytes
  5052 ;; Hardware stack levels used:    1
  5053 ;; Hardware stack levels required when called:    9
  5054 ;; This function calls:
  5055 ;;		___bmul
  5056 ;;		_nrf24l01SPIEnd
  5057 ;;		_nrf24l01SPISend
  5058 ;;		_nrf24l01SPIStart
  5059 ;; This function is called by:
  5060 ;;		_main
  5061 ;;		_nrf24l01SendACK
  5062 ;;		_nrf24l01InitRegisters
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065                           
  5066                           
  5067                           ;psect for function _nrf24l01SetTXPipe
  5068  0A73                     _nrf24l01SetTXPipe:	
  5069                           
  5070                           ;incstack = 0
  5071                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5072                           ;nrf24l01SetTXPipe@pipe stored from wreg
  5073  0A73  0020               	movlb	0	; select bank0
  5074  0A74  00A6               	movwf	nrf24l01SetTXPipe@pipe
  5075                           
  5076                           ;nrf24l01.c: 327: nrf24l01SPIStart();
  5077  0A75  3195  25B7  318A   	fcall	_nrf24l01SPIStart
  5078                           
  5079                           ;nrf24l01.c: 328: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  5080  0A78  3030               	movlw	48
  5081  0A79  3195  25C8  318A   	fcall	_nrf24l01SPISend
  5082                           
  5083                           ;nrf24l01.c: 329: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  5084  0A7C  301D               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  5085  0A7D  0084               	movwf	4
  5086  0A7E  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  5087  0A7F  0085               	movwf	5
  5088  0A80  0800               	movf	0,w	;code access
  5089  0A81  0020               	movlb	0	; select bank0
  5090  0A82  00A4               	movwf	??_nrf24l01SetTXPipe
  5091  0A83  3000               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  5092  0A84  0084               	movwf	4
  5093  0A85  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  5094  0A86  0085               	movwf	5
  5095  0A87  0800               	movf	0,w	;code access
  5096  0A88  00A5               	movwf	??_nrf24l01SetTXPipe+1
  5097  0A89  0825               	movf	??_nrf24l01SetTXPipe+1,w
  5098  0A8A  00A0               	movwf	___bmul@multiplicand
  5099  0A8B  0826               	movf	nrf24l01SetTXPipe@pipe,w
  5100  0A8C  3195  25E4  318A   	fcall	___bmul
  5101  0A8F  0020               	movlb	0	; select bank0
  5102  0A90  0724               	addwf	??_nrf24l01SetTXPipe,w
  5103  0A91  3195  25C8  318A   	fcall	_nrf24l01SPISend
  5104                           
  5105                           ;nrf24l01.c: 330: nrf24l01SPISend(n_ADDRESS_P0[3]);
  5106  0A94  301C               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  5107  0A95  0084               	movwf	4
  5108  0A96  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  5109  0A97  0085               	movwf	5
  5110  0A98  0800               	movf	0,w	;code access
  5111  0A99  3195  25C8  318A   	fcall	_nrf24l01SPISend
  5112                           
  5113                           ;nrf24l01.c: 331: nrf24l01SPISend(n_ADDRESS_P0[2]);
  5114  0A9C  301B               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  5115  0A9D  0084               	movwf	4
  5116  0A9E  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  5117  0A9F  0085               	movwf	5
  5118  0AA0  0800               	movf	0,w	;code access
  5119  0AA1  3195  25C8  318A   	fcall	_nrf24l01SPISend
  5120                           
  5121                           ;nrf24l01.c: 332: nrf24l01SPISend(n_ADDRESS_P0[1]);
  5122  0AA4  301A               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  5123  0AA5  0084               	movwf	4
  5124  0AA6  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  5125  0AA7  0085               	movwf	5
  5126  0AA8  0800               	movf	0,w	;code access
  5127  0AA9  3195  25C8  318A   	fcall	_nrf24l01SPISend
  5128                           
  5129                           ;nrf24l01.c: 333: nrf24l01SPISend(n_ADDRESS_P0[0]);
  5130  0AAC  3019               	movlw	low (_n_ADDRESS_P0| (0+32768))
  5131  0AAD  0084               	movwf	4
  5132  0AAE  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  5133  0AAF  0085               	movwf	5
  5134  0AB0  0800               	movf	0,w	;code access
  5135  0AB1  3195  25C8  318A   	fcall	_nrf24l01SPISend
  5136                           
  5137                           ;nrf24l01.c: 334: nrf24l01SPIEnd();
  5138  0AB4  3195  25A8         	fcall	_nrf24l01SPIEnd
  5139  0AB6  0008               	return
  5140  0AB7                     __end_of_nrf24l01SetTXPipe:	
  5141                           
  5142                           	psect	text13
  5143  15E4                     __ptext13:	
  5144 ;; *************** function ___bmul *****************
  5145 ;; Defined at:
  5146 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;  multiplier      1    wreg     unsigned char 
  5149 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;  multiplier      1    3[BANK0 ] unsigned char 
  5152 ;;  product         1    2[BANK0 ] unsigned char 
  5153 ;; Return value:  Size  Location     Type
  5154 ;;                  1    wreg      unsigned char 
  5155 ;; Registers used:
  5156 ;;		wreg, status,2, status,0
  5157 ;; Tracked objects:
  5158 ;;		On entry : 0/0
  5159 ;;		On exit  : 0/0
  5160 ;;		Unchanged: 0/0
  5161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5162 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5163 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5164 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5165 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5166 ;;Total ram usage:        4 bytes
  5167 ;; Hardware stack levels used:    1
  5168 ;; Hardware stack levels required when called:    7
  5169 ;; This function calls:
  5170 ;;		Nothing
  5171 ;; This function is called by:
  5172 ;;		_nrf24l01SetTXPipe
  5173 ;;		_nrf24l01InitRegisters
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           
  5178                           ;psect for function ___bmul
  5179  15E4                     ___bmul:	
  5180                           
  5181                           ;incstack = 0
  5182                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5183                           ;___bmul@multiplier stored from wreg
  5184  15E4  0020               	movlb	0	; select bank0
  5185  15E5  00A3               	movwf	___bmul@multiplier
  5186  15E6  01A2               	clrf	___bmul@product
  5187  15E7                     l2555:	
  5188  15E7  1C23               	btfss	___bmul@multiplier,0
  5189  15E8  2DED               	goto	l2559
  5190  15E9  0820               	movf	___bmul@multiplicand,w
  5191  15EA  00A1               	movwf	??___bmul
  5192  15EB  0821               	movf	??___bmul,w
  5193  15EC  07A2               	addwf	___bmul@product,f
  5194  15ED                     l2559:	
  5195  15ED  1003               	clrc
  5196  15EE  0DA0               	rlf	___bmul@multiplicand,f
  5197  15EF  1003               	clrc
  5198  15F0  0CA3               	rrf	___bmul@multiplier,f
  5199  15F1  0823               	movf	___bmul@multiplier,w
  5200  15F2  1D03               	btfss	3,2
  5201  15F3  2DE7               	goto	l2555
  5202  15F4  0822               	movf	___bmul@product,w
  5203  15F5  0008               	return
  5204  15F6                     __end_of___bmul:	
  5205                           
  5206                           	psect	text14
  5207  0697                     __ptext14:	
  5208 ;; *************** function _nrf24l01SendPacket *****************
  5209 ;; Defined at:
  5210 ;;		line 176 in file "nrf24l01.c"
  5211 ;; Parameters:    Size  Location     Type
  5212 ;;  Packet          2   13[BANK0 ] PTR struct .
  5213 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;  i               1   19[BANK0 ] unsigned char 
  5216 ;; Return value:  Size  Location     Type
  5217 ;;                  1    wreg      void 
  5218 ;; Registers used:
  5219 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/0
  5222 ;;		On exit  : 0/0
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5225 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5227 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5228 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5229 ;;Total ram usage:        7 bytes
  5230 ;; Hardware stack levels used:    1
  5231 ;; Hardware stack levels required when called:   13
  5232 ;; This function calls:
  5233 ;;		_enableInterrupts
  5234 ;;		_nrf24l01CEHigh
  5235 ;;		_nrf24l01CELow
  5236 ;;		_nrf24l01ChangeTXPower
  5237 ;;		_nrf24l01ISR
  5238 ;;		_nrf24l01SPIEnd
  5239 ;;		_nrf24l01SPISend
  5240 ;;		_nrf24l01SPIStart
  5241 ;;		_nrf24l01SetRXMode
  5242 ;;		_strlen
  5243 ;; This function is called by:
  5244 ;;		_loop
  5245 ;;		_main
  5246 ;;		_nrf24l01SendACK
  5247 ;; This function uses a non-reentrant model
  5248 ;;
  5249                           
  5250                           
  5251                           ;psect for function _nrf24l01SendPacket
  5252  0697                     _nrf24l01SendPacket:	
  5253  0697                     l303:	
  5254                           ;incstack = 0
  5255 ;; hardware stack exceeded
  5256                           ; Regs used in _nrf24l01SendPacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5257                           ;nrf24l01.c: 179: unsigned char i;;nrf24l01.c: 183: RESEND:
  5258                           
  5259                           
  5260                           ;nrf24l01.c: 186: i = 0xFF;
  5261  0697  30FF               	movlw	255
  5262  0698  0020               	movlb	0	; select bank0
  5263  0699  00AF               	movwf	??_nrf24l01SendPacket
  5264  069A  082F               	movf	??_nrf24l01SendPacket,w
  5265  069B  00B3               	movwf	nrf24l01SendPacket@i
  5266  069C                     l2627:	
  5267                           ;nrf24l01.c: 187: while (nrf24l01.TXBusy){
  5268                           
  5269  069C  1C7D               	btfss	_nrf24l01,0	;volatile
  5270  069D  2EAB               	goto	l2629
  5271                           
  5272                           ;nrf24l01.c: 189: nrf24l01ISR();
  5273  069E  318C  243C  3186   	fcall	_nrf24l01ISR
  5274                           
  5275                           ;nrf24l01.c: 191: if (!--i) {
  5276  06A1  3001               	movlw	1
  5277  06A2  0020               	movlb	0	; select bank0
  5278  06A3  02B3               	subwf	nrf24l01SendPacket@i,f
  5279  06A4  1903               	btfsc	3,2
  5280  06A5  2E97               	goto	l303
  5281                           
  5282                           ;nrf24l01.c: 193: };nrf24l01.c: 194: _delay((unsigned long)((100)*(32000000/4000000.0)))
      +                          ;
  5283                           
  5284                           ;nrf24l01.c: 192: goto RESEND;
  5285  06A6  30A0               	movlw	160
  5286  06A7                     u3787:	
  5287  06A7  3200               	nop2
  5288  06A8  0B89               	decfsz	9,f
  5289  06A9  2EA7               	goto	u3787
  5290  06AA  2E9C               	goto	l2627
  5291  06AB                     l2629:	
  5292                           
  5293                           ;nrf24l01.c: 195: };nrf24l01.c: 197: TXPacket = Packet;
  5294  06AB  0020               	movlb	0	; select bank0
  5295  06AC  082E               	movf	nrf24l01SendPacket@Packet+1,w
  5296  06AD  0021               	movlb	1	; select bank1
  5297  06AE  00E9               	movwf	(_TXPacket+1)^(0+128)
  5298  06AF  0020               	movlb	0	; select bank0
  5299  06B0  082D               	movf	nrf24l01SendPacket@Packet,w
  5300  06B1  0021               	movlb	1	; select bank1
  5301  06B2  00E8               	movwf	_TXPacket^(0+128)
  5302                           
  5303                           ;nrf24l01.c: 200: nrf24l01.TXBusy = 1;
  5304  06B3  147D               	bsf	_nrf24l01,0	;volatile
  5305                           
  5306                           ;nrf24l01.c: 203: enableInterrupts(0);
  5307  06B4  3000               	movlw	0
  5308  06B5  3195  25AF  3186   	fcall	_enableInterrupts
  5309                           
  5310                           ;nrf24l01.c: 206: nrf24l01SetRXMode(0);
  5311  06B8  3000               	movlw	0
  5312  06B9  318B  2300  3186   	fcall	_nrf24l01SetRXMode
  5313                           
  5314                           ;nrf24l01.c: 209: nrf24l01SPIStart();
  5315  06BC  3195  25B7  3186   	fcall	_nrf24l01SPIStart
  5316                           
  5317                           ;nrf24l01.c: 212: nrf24l01SPISend((unsigned) 0b10110000);
  5318  06BF  30B0               	movlw	176
  5319  06C0  3195  25C8  3186   	fcall	_nrf24l01SPISend
  5320                           
  5321                           ;nrf24l01.c: 214: nrf24l01SPISend(TXPacket->packetData.byte);
  5322  06C3  0021               	movlb	1	; select bank1
  5323  06C4  0868               	movf	_TXPacket^(0+128),w
  5324  06C5  0086               	movwf	6
  5325  06C6  0869               	movf	(_TXPacket+1)^(0+128),w
  5326  06C7  0087               	movwf	7
  5327  06C8  0801               	movf	1,w
  5328  06C9  3195  25C8  3186   	fcall	_nrf24l01SPISend
  5329                           
  5330                           ;nrf24l01.c: 217: for (i = 0; (i < strlen(TXPacket->Message)) && (i < sizeof(TXPacket->M
      +                          essage)); i++){
  5331  06CC  0020               	movlb	0	; select bank0
  5332  06CD  01B3               	clrf	nrf24l01SendPacket@i
  5333  06CE  2EE8               	goto	l2649
  5334  06CF                     l2645:	
  5335                           
  5336                           ;nrf24l01.c: 218: nrf24l01SPISend(TXPacket->Message[i]);
  5337  06CF  0833               	movf	nrf24l01SendPacket@i,w
  5338  06D0  3E01               	addlw	1
  5339  06D1  00AF               	movwf	??_nrf24l01SendPacket
  5340  06D2  3000               	movlw	0
  5341  06D3  1803               	skipnc
  5342  06D4  3001               	movlw	1
  5343  06D5  00B0               	movwf	??_nrf24l01SendPacket+1
  5344  06D6  082F               	movf	??_nrf24l01SendPacket,w
  5345  06D7  0021               	movlb	1	; select bank1
  5346  06D8  0768               	addwf	_TXPacket^(0+128),w
  5347  06D9  0086               	movwf	6
  5348  06DA  0020               	movlb	0	; select bank0
  5349  06DB  0830               	movf	??_nrf24l01SendPacket+1,w
  5350  06DC  0021               	movlb	1	; select bank1
  5351  06DD  3D69               	addwfc	(_TXPacket+1)^(0+128),w
  5352  06DE  0087               	movwf	7
  5353  06DF  0801               	movf	1,w
  5354  06E0  3195  25C8  3186   	fcall	_nrf24l01SPISend
  5355  06E3  3001               	movlw	1
  5356  06E4  0020               	movlb	0	; select bank0
  5357  06E5  00AF               	movwf	??_nrf24l01SendPacket
  5358  06E6  082F               	movf	??_nrf24l01SendPacket,w
  5359  06E7  07B3               	addwf	nrf24l01SendPacket@i,f
  5360  06E8                     l2649:	
  5361  06E8  0021               	movlb	1	; select bank1
  5362  06E9  0868               	movf	_TXPacket^(0+128),w
  5363  06EA  3E01               	addlw	1
  5364  06EB  0020               	movlb	0	; select bank0
  5365  06EC  00AF               	movwf	??_nrf24l01SendPacket
  5366  06ED  3000               	movlw	0
  5367  06EE  0021               	movlb	1	; select bank1
  5368  06EF  3D69               	addwfc	(_TXPacket+1)^(0+128),w
  5369  06F0  0020               	movlb	0	; select bank0
  5370  06F1  00B0               	movwf	??_nrf24l01SendPacket+1
  5371  06F2  082F               	movf	??_nrf24l01SendPacket,w
  5372  06F3  00A0               	movwf	strlen@s
  5373  06F4  0830               	movf	??_nrf24l01SendPacket+1,w
  5374  06F5  00A1               	movwf	strlen@s+1
  5375  06F6  3197  270C  3186   	fcall	_strlen
  5376  06F9  0020               	movlb	0	; select bank0
  5377  06FA  0833               	movf	nrf24l01SendPacket@i,w
  5378  06FB  00B1               	movwf	??_nrf24l01SendPacket+2
  5379  06FC  01B2               	clrf	??_nrf24l01SendPacket+3
  5380  06FD  0821               	movf	?_strlen+1,w
  5381  06FE  0232               	subwf	??_nrf24l01SendPacket+3,w
  5382  06FF  1D03               	skipz
  5383  0700  2F03               	goto	u2285
  5384  0701  0820               	movf	?_strlen,w
  5385  0702  0231               	subwf	??_nrf24l01SendPacket+2,w
  5386  0703                     u2285:	
  5387  0703  1803               	skipnc
  5388  0704  2F09               	goto	l2653
  5389  0705  3020               	movlw	32
  5390  0706  0233               	subwf	nrf24l01SendPacket@i,w
  5391  0707  1C03               	skipc
  5392  0708  2ECF               	goto	l2645
  5393  0709                     l2653:	
  5394                           
  5395                           ;nrf24l01.c: 219: };nrf24l01.c: 222: nrf24l01SPIEnd();
  5396  0709  3195  25A8  3186   	fcall	_nrf24l01SPIEnd
  5397                           
  5398                           ;nrf24l01.c: 225: nrf24l01CEHigh();
  5399  070C  3195  259C  3186   	fcall	_nrf24l01CEHigh
  5400                           
  5401                           ;nrf24l01.c: 226: _delay((unsigned long)((20)*(32000000/4000000.0)));
  5402  070F  3035               	movlw	53
  5403  0710                     u3797:	
  5404  0710  0B89               	decfsz	9,f
  5405  0711  2F10               	goto	u3797
  5406  0712  0000               	nop
  5407                           
  5408                           ;nrf24l01.c: 227: nrf24l01CELow();
  5409  0713  3195  259F  3186   	fcall	_nrf24l01CELow
  5410                           
  5411                           ;nrf24l01.c: 230: enableInterrupts(1);
  5412  0716  3001               	movlw	1
  5413  0717  3195  25AF  3186   	fcall	_enableInterrupts
  5414                           
  5415                           ;nrf24l01.c: 233: i = 0xFF;
  5416  071A  30FF               	movlw	255
  5417  071B  0020               	movlb	0	; select bank0
  5418  071C  00AF               	movwf	??_nrf24l01SendPacket
  5419  071D  082F               	movf	??_nrf24l01SendPacket,w
  5420  071E  00B3               	movwf	nrf24l01SendPacket@i
  5421  071F                     l2669:	
  5422                           ;nrf24l01.c: 234: while (nrf24l01.TXBusy){
  5423                           
  5424  071F  1C7D               	btfss	_nrf24l01,0	;volatile
  5425  0720  2F2E               	goto	l2671
  5426                           
  5427                           ;nrf24l01.c: 236: nrf24l01ISR();
  5428  0721  318C  243C  3186   	fcall	_nrf24l01ISR
  5429                           
  5430                           ;nrf24l01.c: 238: if (!--i) {
  5431  0724  3001               	movlw	1
  5432  0725  0020               	movlb	0	; select bank0
  5433  0726  02B3               	subwf	nrf24l01SendPacket@i,f
  5434  0727  1903               	btfsc	3,2
  5435  0728  2E97               	goto	l303
  5436                           
  5437                           ;nrf24l01.c: 240: };nrf24l01.c: 241: _delay((unsigned long)((100)*(32000000/4000000.0)))
      +                          ;
  5438                           
  5439                           ;nrf24l01.c: 239: goto RESEND;
  5440  0729  30A0               	movlw	160
  5441  072A                     u3807:	
  5442  072A  3200               	nop2
  5443  072B  0B89               	decfsz	9,f
  5444  072C  2F2A               	goto	u3807
  5445  072D  2F1F               	goto	l2669
  5446  072E                     l2671:	
  5447                           
  5448                           ;nrf24l01.c: 242: };nrf24l01.c: 246: i = 0xFF;
  5449  072E  30FF               	movlw	255
  5450  072F  0020               	movlb	0	; select bank0
  5451  0730  00AF               	movwf	??_nrf24l01SendPacket
  5452  0731  082F               	movf	??_nrf24l01SendPacket,w
  5453  0732  00B3               	movwf	nrf24l01SendPacket@i
  5454  0733                     l2683:	
  5455                           ;nrf24l01.c: 247: while (TXPacket->packetData.ACKRequest){
  5456                           
  5457  0733  0021               	movlb	1	; select bank1
  5458  0734  0868               	movf	_TXPacket^(0+128),w
  5459  0735  0086               	movwf	6
  5460  0736  0869               	movf	(_TXPacket+1)^(0+128),w
  5461  0737  0087               	movwf	7
  5462  0738  1D01               	btfss	1,2
  5463  0739  0008               	return
  5464                           
  5465                           ;nrf24l01.c: 249: nrf24l01ISR();
  5466  073A  318C  243C  3186   	fcall	_nrf24l01ISR
  5467                           
  5468                           ;nrf24l01.c: 251: if (!--i) {
  5469  073D  3001               	movlw	1
  5470  073E  0020               	movlb	0	; select bank0
  5471  073F  02B3               	subwf	nrf24l01SendPacket@i,f
  5472  0740  1D03               	btfss	3,2
  5473  0741  2F63               	goto	l2681
  5474                           
  5475                           ;nrf24l01.c: 252: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  5476  0742  3003               	movlw	3
  5477  0743  0020               	movlb	0	; select bank0
  5478  0744  00B0               	movwf	??_nrf24l01SendPacket+1
  5479  0745  3008               	movlw	8
  5480  0746  00AF               	movwf	??_nrf24l01SendPacket
  5481  0747  3077               	movlw	119
  5482  0748                     u3817:	
  5483  0748  0B89               	decfsz	9,f
  5484  0749  2F48               	goto	u3817
  5485  074A  0BAF               	decfsz	??_nrf24l01SendPacket,f
  5486  074B  2F48               	goto	u3817
  5487  074C  0BB0               	decfsz	??_nrf24l01SendPacket+1,f
  5488  074D  2F48               	goto	u3817
  5489                           
  5490                           ;nrf24l01.c: 253: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  5491  074E  3003               	movlw	3
  5492  074F  0020               	movlb	0	; select bank0
  5493  0750  00B0               	movwf	??_nrf24l01SendPacket+1
  5494  0751  3008               	movlw	8
  5495  0752  00AF               	movwf	??_nrf24l01SendPacket
  5496  0753  3077               	movlw	119
  5497  0754                     u3827:	
  5498  0754  0B89               	decfsz	9,f
  5499  0755  2F54               	goto	u3827
  5500  0756  0BAF               	decfsz	??_nrf24l01SendPacket,f
  5501  0757  2F54               	goto	u3827
  5502  0758  0BB0               	decfsz	??_nrf24l01SendPacket+1,f
  5503  0759  2F54               	goto	u3827
  5504                           
  5505                           ;nrf24l01.c: 254: nrf24l01ChangeTXPower(1);
  5506  075A  3001               	movlw	1
  5507  075B  0020               	movlb	0	; select bank0
  5508  075C  00A3               	movwf	nrf24l01ChangeTXPower@addPower
  5509  075D  3000               	movlw	0
  5510  075E  00A4               	movwf	nrf24l01ChangeTXPower@addPower+1
  5511  075F  3189  21AD  3186   	fcall	_nrf24l01ChangeTXPower
  5512                           
  5513                           ;nrf24l01.c: 255: goto RESEND;
  5514  0762  2E97               	goto	l303
  5515  0763                     l2681:	
  5516                           
  5517                           ;nrf24l01.c: 256: };nrf24l01.c: 257: _delay((unsigned long)((100)*(32000000/4000000.0)))
      +                          ;
  5518  0763  30A0               	movlw	160
  5519  0764                     u3837:	
  5520  0764  3200               	nop2
  5521  0765  0B89               	decfsz	9,f
  5522  0766  2F64               	goto	u3837
  5523  0767  2F33               	goto	l2683
  5524  0768                     __end_of_nrf24l01SendPacket:	
  5525                           
  5526                           	psect	text15
  5527  170C                     __ptext15:	
  5528 ;; *************** function _strlen *****************
  5529 ;; Defined at:
  5530 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  5531 ;; Parameters:    Size  Location     Type
  5532 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  5533 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), RXPacket.Message(32), 
  5534 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5535 ;; Auto vars:     Size  Location     Type
  5536 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  5537 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), RXPacket.Message(32), 
  5538 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5539 ;; Return value:  Size  Location     Type
  5540 ;;                  2    0[BANK0 ] unsigned int 
  5541 ;; Registers used:
  5542 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5543 ;; Tracked objects:
  5544 ;;		On entry : 0/0
  5545 ;;		On exit  : 0/0
  5546 ;;		Unchanged: 0/0
  5547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5548 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5549 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5550 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5551 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5552 ;;Total ram usage:        6 bytes
  5553 ;; Hardware stack levels used:    1
  5554 ;; Hardware stack levels required when called:    7
  5555 ;; This function calls:
  5556 ;;		Nothing
  5557 ;; This function is called by:
  5558 ;;		_nrf24l01GetPipe
  5559 ;;		_nrf24l01SendPacket
  5560 ;; This function uses a non-reentrant model
  5561 ;;
  5562                           
  5563                           
  5564                           ;psect for function _strlen
  5565  170C                     _strlen:	
  5566                           
  5567                           ;incstack = 0
  5568                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5569  170C  0020               	movlb	0	; select bank0
  5570  170D  0821               	movf	strlen@s+1,w
  5571  170E  00A5               	movwf	strlen@cp+1
  5572  170F  0820               	movf	strlen@s,w
  5573  1710  00A4               	movwf	strlen@cp
  5574  1711                     l2547:	
  5575  1711  0824               	movf	strlen@cp,w
  5576  1712  0086               	movwf	6
  5577  1713  0825               	movf	strlen@cp+1,w
  5578  1714  0087               	movwf	7
  5579  1715  0801               	movf	1,w
  5580  1716  1903               	btfsc	3,2
  5581  1717  2F1D               	goto	l2549
  5582  1718  3001               	movlw	1
  5583  1719  07A4               	addwf	strlen@cp,f
  5584  171A  3000               	movlw	0
  5585  171B  3DA5               	addwfc	strlen@cp+1,f
  5586  171C  2F11               	goto	l2547
  5587  171D                     l2549:	
  5588  171D  0920               	comf	strlen@s,w
  5589  171E  00A2               	movwf	??_strlen
  5590  171F  0921               	comf	strlen@s+1,w
  5591  1720  00A3               	movwf	??_strlen+1
  5592  1721  0AA2               	incf	??_strlen,f
  5593  1722  1903               	skipnz
  5594  1723  0AA3               	incf	??_strlen+1,f
  5595  1724  0824               	movf	strlen@cp,w
  5596  1725  0722               	addwf	??_strlen,w
  5597  1726  00A0               	movwf	?_strlen
  5598  1727  0825               	movf	strlen@cp+1,w
  5599  1728  3D23               	addwfc	??_strlen+1,w
  5600  1729  00A1               	movwf	?_strlen+1
  5601  172A  0008               	return
  5602  172B                     __end_of_strlen:	
  5603                           
  5604                           	psect	text16
  5605  0C3C                     __ptext16:	
  5606 ;; *************** function _nrf24l01ISR *****************
  5607 ;; Defined at:
  5608 ;;		line 261 in file "nrf24l01.c"
  5609 ;; Parameters:    Size  Location     Type
  5610 ;;		None
  5611 ;; Auto vars:     Size  Location     Type
  5612 ;;  status          1   12[BANK0 ] struct .
  5613 ;; Return value:  Size  Location     Type
  5614 ;;                  1    wreg      void 
  5615 ;; Registers used:
  5616 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5617 ;; Tracked objects:
  5618 ;;		On entry : 0/0
  5619 ;;		On exit  : 0/0
  5620 ;;		Unchanged: 0/0
  5621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5623 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5624 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5625 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5626 ;;Total ram usage:        2 bytes
  5627 ;; Hardware stack levels used:    1
  5628 ;; Hardware stack levels required when called:   12
  5629 ;; This function calls:
  5630 ;;		_exception
  5631 ;;		_nrf24l01CheckACK
  5632 ;;		_nrf24l01ReceivePacket
  5633 ;;		_nrf24l01Send
  5634 ;;		_nrf24l01SetRXMode
  5635 ;; This function is called by:
  5636 ;;		_nrf24l01SendPacket
  5637 ;; This function uses a non-reentrant model
  5638 ;;
  5639                           
  5640                           
  5641                           ;psect for function _nrf24l01ISR
  5642  0C3C                     _nrf24l01ISR:	
  5643                           
  5644                           ;nrf24l01.c: 263: n_STATUS_t status;;nrf24l01.c: 264: status.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x07, 0);
  5645                           
  5646                           ;incstack = 0
  5647 ;; hardware stack exceeded
  5648                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5649  0C3C  0020               	movlb	0	; select bank0
  5650  0C3D  01A0               	clrf	nrf24l01Send@data
  5651  0C3E  3007               	movlw	7
  5652  0C3F  3197  272B  318C   	fcall	_nrf24l01Send
  5653  0C42  0020               	movlb	0	; select bank0
  5654  0C43  00AB               	movwf	??_nrf24l01ISR
  5655  0C44  082B               	movf	??_nrf24l01ISR,w
  5656  0C45  00AC               	movwf	nrf24l01ISR@status
  5657                           
  5658                           ;nrf24l01.c: 269: };nrf24l01.c: 272: if (status.byte == 0xFF){
  5659  0C46  0A2C               	incf	nrf24l01ISR@status,w
  5660  0C47  1D03               	btfss	3,2
  5661  0C48  2C4D               	goto	l2503
  5662                           
  5663                           ;nrf24l01.c: 273: exception(2);
  5664  0C49  3002               	movlw	2
  5665  0C4A  3180  2002  318C   	fcall	_exception
  5666  0C4D                     l2503:	
  5667                           
  5668                           ;nrf24l01.c: 274: };nrf24l01.c: 276: if (status.TX_DS){
  5669  0C4D  0020               	movlb	0	; select bank0
  5670  0C4E  1EAC               	btfss	nrf24l01ISR@status,5
  5671  0C4F  2C5E               	goto	l2511
  5672                           
  5673                           ;nrf24l01.c: 279: nrf24l01.TXBusy = 0;
  5674  0C50  107D               	bcf	_nrf24l01,0	;volatile
  5675                           
  5676                           ;nrf24l01.c: 282: if (!nrf24l01.RXMode){
  5677  0C51  197D               	btfsc	_nrf24l01,2	;volatile
  5678  0C52  2C5E               	goto	l2511
  5679                           
  5680                           ;nrf24l01.c: 283: if (TXPacket->packetData.ACKRequest){
  5681  0C53  0021               	movlb	1	; select bank1
  5682  0C54  0868               	movf	_TXPacket^(0+128),w
  5683  0C55  0086               	movwf	6
  5684  0C56  0869               	movf	(_TXPacket+1)^(0+128),w
  5685  0C57  0087               	movwf	7
  5686  0C58  1D01               	btfss	1,2
  5687  0C59  2C5E               	goto	l2511
  5688                           
  5689                           ;nrf24l01.c: 286: nrf24l01SetRXMode(1);
  5690  0C5A  3001               	movlw	1
  5691  0C5B  318B  2300  318C   	fcall	_nrf24l01SetRXMode
  5692  0C5E                     l2511:	
  5693                           
  5694                           ;nrf24l01.c: 287: };nrf24l01.c: 288: };nrf24l01.c: 289: };nrf24l01.c: 292: if (status.RX
      +                          _DR){
  5695  0C5E  0020               	movlb	0	; select bank0
  5696  0C5F  1F2C               	btfss	nrf24l01ISR@status,6
  5697  0C60  2C89               	goto	l2525
  5698                           
  5699                           ;nrf24l01.c: 295: if (!nrf24l01.RXPending){
  5700  0C61  18FD               	btfsc	_nrf24l01,1	;volatile
  5701  0C62  2C88               	goto	l330
  5702                           
  5703                           ;nrf24l01.c: 298: nrf24l01.RXPending = 1;
  5704  0C63  14FD               	bsf	_nrf24l01,1	;volatile
  5705                           
  5706                           ;nrf24l01.c: 300: nrf24l01ReceivePacket();
  5707  0C64  318B  23E9  318C   	fcall	_nrf24l01ReceivePacket
  5708                           
  5709                           ;nrf24l01.c: 303: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  5710  0C67  0020               	movlb	0	; select bank0
  5711  0C68  01A0               	clrf	nrf24l01Send@data
  5712  0C69  3009               	movlw	9
  5713  0C6A  3197  272B  318C   	fcall	_nrf24l01Send
  5714  0C6D  0020               	movlb	0	; select bank0
  5715  0C6E  00AB               	movwf	??_nrf24l01ISR
  5716  0C6F  0023               	movlb	3	; select bank3
  5717  0C70  0820               	movf	_RXPacket^(0+384),w
  5718  0C71  0020               	movlb	0	; select bank0
  5719  0C72  062B               	xorwf	??_nrf24l01ISR,w
  5720  0C73  39FE               	andlw	-2
  5721  0C74  062B               	xorwf	??_nrf24l01ISR,w
  5722  0C75  0023               	movlb	3	; select bank3
  5723  0C76  00A0               	movwf	_RXPacket^(0+384)
  5724                           
  5725                           ;nrf24l01.c: 306: RXPacket.packetData.Pipe = status.RX_P_NO;
  5726  0C77  0020               	movlb	0	; select bank0
  5727  0C78  0C2C               	rrf	nrf24l01ISR@status,w
  5728  0C79  3907               	andlw	7
  5729  0C7A  00AB               	movwf	??_nrf24l01ISR
  5730  0C7B  0EAB               	swapf	??_nrf24l01ISR,f
  5731  0C7C  0023               	movlb	3	; select bank3
  5732  0C7D  0820               	movf	_RXPacket^(0+384),w
  5733  0C7E  0020               	movlb	0	; select bank0
  5734  0C7F  062B               	xorwf	??_nrf24l01ISR,w
  5735  0C80  398F               	andlw	-113
  5736  0C81  062B               	xorwf	??_nrf24l01ISR,w
  5737  0C82  0023               	movlb	3	; select bank3
  5738  0C83  00A0               	movwf	_RXPacket^(0+384)
  5739                           
  5740                           ;nrf24l01.c: 308: nrf24l01CheckACK();
  5741  0C84  3188  20AD  318C   	fcall	_nrf24l01CheckACK
  5742                           
  5743                           ;nrf24l01.c: 309: }
  5744  0C87  2C89               	goto	l2525
  5745  0C88                     l330:	
  5746                           
  5747                           ;nrf24l01.c: 312: else{;nrf24l01.c: 315: status.RX_DR = 0;
  5748  0C88  132C               	bcf	nrf24l01ISR@status,6
  5749  0C89                     l2525:	
  5750                           
  5751                           ;nrf24l01.c: 316: };nrf24l01.c: 318: };nrf24l01.c: 321: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.byte);
  5752  0C89  0020               	movlb	0	; select bank0
  5753  0C8A  082C               	movf	nrf24l01ISR@status,w
  5754  0C8B  00AB               	movwf	??_nrf24l01ISR
  5755  0C8C  082B               	movf	??_nrf24l01ISR,w
  5756  0C8D  00A0               	movwf	nrf24l01Send@data
  5757  0C8E  3027               	movlw	39
  5758  0C8F  3197  272B         	fcall	_nrf24l01Send
  5759  0C91  0008               	return
  5760  0C92                     __end_of_nrf24l01ISR:	
  5761                           
  5762                           	psect	text17
  5763  0BE9                     __ptext17:	
  5764 ;; *************** function _nrf24l01ReceivePacket *****************
  5765 ;; Defined at:
  5766 ;;		line 141 in file "nrf24l01.c"
  5767 ;; Parameters:    Size  Location     Type
  5768 ;;		None
  5769 ;; Auto vars:     Size  Location     Type
  5770 ;;  i               1   10[BANK0 ] unsigned char 
  5771 ;;  width           1    9[BANK0 ] unsigned char 
  5772 ;; Return value:  Size  Location     Type
  5773 ;;                  1    wreg      void 
  5774 ;; Registers used:
  5775 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5776 ;; Tracked objects:
  5777 ;;		On entry : 0/0
  5778 ;;		On exit  : 0/0
  5779 ;;		Unchanged: 0/0
  5780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5782 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5783 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5784 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5785 ;;Total ram usage:        3 bytes
  5786 ;; Hardware stack levels used:    1
  5787 ;; Hardware stack levels required when called:   10
  5788 ;; This function calls:
  5789 ;;		_memset
  5790 ;;		_nrf24l01CEHigh
  5791 ;;		_nrf24l01CELow
  5792 ;;		_nrf24l01SPIEnd
  5793 ;;		_nrf24l01SPISend
  5794 ;;		_nrf24l01SPIStart
  5795 ;;		_nrf24l01Send
  5796 ;; This function is called by:
  5797 ;;		_nrf24l01ISR
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           
  5802                           ;psect for function _nrf24l01ReceivePacket
  5803  0BE9                     _nrf24l01ReceivePacket:	
  5804                           
  5805                           ;nrf24l01.c: 144: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  5806                           
  5807                           ;incstack = 0
  5808                           ; Regs used in _nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5809  0BE9  30A1               	movlw	low (_RXPacket+1)
  5810  0BEA  0020               	movlb	0	; select bank0
  5811  0BEB  00A0               	movwf	memset@p1
  5812  0BEC  3001               	movlw	high (_RXPacket+1)
  5813  0BED  00A1               	movwf	memset@p1+1
  5814  0BEE  3000               	movlw	0
  5815  0BEF  00A2               	movwf	memset@c
  5816  0BF0  00A3               	movwf	memset@c+1
  5817  0BF1  3020               	movlw	32
  5818  0BF2  00A4               	movwf	memset@n
  5819  0BF3  3000               	movlw	0
  5820  0BF4  00A5               	movwf	memset@n+1
  5821  0BF5  3196  264B  318B   	fcall	_memset
  5822                           
  5823                           ;nrf24l01.c: 145: RXPacket.packetData.byte = 0x00;
  5824  0BF8  0023               	movlb	3	; select bank3
  5825  0BF9  01A0               	clrf	_RXPacket^(0+384)
  5826                           
  5827                           ;nrf24l01.c: 148: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  5828  0BFA  0020               	movlb	0	; select bank0
  5829  0BFB  01A0               	clrf	nrf24l01Send@data
  5830  0BFC  3060               	movlw	96
  5831  0BFD  3197  272B  318B   	fcall	_nrf24l01Send
  5832  0C00  0020               	movlb	0	; select bank0
  5833  0C01  00A8               	movwf	??_nrf24l01ReceivePacket
  5834  0C02  0828               	movf	??_nrf24l01ReceivePacket,w
  5835  0C03  00A9               	movwf	nrf24l01ReceivePacket@width
  5836                           
  5837                           ;nrf24l01.c: 149: unsigned char i = 0;
  5838  0C04  01AA               	clrf	nrf24l01ReceivePacket@i
  5839                           
  5840                           ;nrf24l01.c: 152: nrf24l01CELow();
  5841  0C05  3195  259F  318B   	fcall	_nrf24l01CELow
  5842                           
  5843                           ;nrf24l01.c: 155: nrf24l01SPIStart();
  5844  0C08  3195  25B7  318B   	fcall	_nrf24l01SPIStart
  5845                           
  5846                           ;nrf24l01.c: 158: nrf24l01SPISend((unsigned) 0b01100001);
  5847  0C0B  3061               	movlw	97
  5848  0C0C  3195  25C8  318B   	fcall	_nrf24l01SPISend
  5849                           
  5850                           ;nrf24l01.c: 161: RXPacket.packetData.byte = nrf24l01SPISend(0);
  5851  0C0F  3000               	movlw	0
  5852  0C10  3195  25C8  318B   	fcall	_nrf24l01SPISend
  5853  0C13  0020               	movlb	0	; select bank0
  5854  0C14  00A8               	movwf	??_nrf24l01ReceivePacket
  5855  0C15  0828               	movf	??_nrf24l01ReceivePacket,w
  5856  0C16  0023               	movlb	3	; select bank3
  5857  0C17  00A0               	movwf	_RXPacket^(0+384)
  5858                           
  5859                           ;nrf24l01.c: 162: width--;
  5860  0C18  3001               	movlw	1
  5861  0C19  0020               	movlb	0	; select bank0
  5862  0C1A  02A9               	subwf	nrf24l01ReceivePacket@width,f
  5863                           
  5864                           ;nrf24l01.c: 164: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
  5865  0C1B  01AA               	clrf	nrf24l01ReceivePacket@i
  5866  0C1C  2C2E               	goto	l2483
  5867  0C1D                     l2479:	
  5868                           
  5869                           ;nrf24l01.c: 166: RXPacket.Message[i] = nrf24l01SPISend(0);
  5870  0C1D  3000               	movlw	0
  5871  0C1E  3195  25C8  318B   	fcall	_nrf24l01SPISend
  5872  0C21  0020               	movlb	0	; select bank0
  5873  0C22  00A8               	movwf	??_nrf24l01ReceivePacket
  5874  0C23  082A               	movf	nrf24l01ReceivePacket@i,w
  5875  0C24  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5876  0C25  0086               	movwf	6
  5877  0C26  3001               	movlw	1	; select bank3/4
  5878  0C27  0087               	movwf	7
  5879  0C28  0828               	movf	??_nrf24l01ReceivePacket,w
  5880  0C29  0081               	movwf	1
  5881  0C2A  3001               	movlw	1
  5882  0C2B  00A8               	movwf	??_nrf24l01ReceivePacket
  5883  0C2C  0828               	movf	??_nrf24l01ReceivePacket,w
  5884  0C2D  07AA               	addwf	nrf24l01ReceivePacket@i,f
  5885  0C2E                     l2483:	
  5886  0C2E  0829               	movf	nrf24l01ReceivePacket@width,w
  5887  0C2F  022A               	subwf	nrf24l01ReceivePacket@i,w
  5888  0C30  1803               	skipnc
  5889  0C31  2C36               	goto	l2487
  5890  0C32  3020               	movlw	32
  5891  0C33  022A               	subwf	nrf24l01ReceivePacket@i,w
  5892  0C34  1C03               	skipc
  5893  0C35  2C1D               	goto	l2479
  5894  0C36                     l2487:	
  5895                           
  5896                           ;nrf24l01.c: 167: };nrf24l01.c: 170: nrf24l01SPIEnd();
  5897  0C36  3195  25A8  318B   	fcall	_nrf24l01SPIEnd
  5898                           
  5899                           ;nrf24l01.c: 173: nrf24l01CEHigh();
  5900  0C39  3195  259C         	fcall	_nrf24l01CEHigh
  5901  0C3B  0008               	return
  5902  0C3C                     __end_of_nrf24l01ReceivePacket:	
  5903                           
  5904                           	psect	text18
  5905  08AD                     __ptext18:	
  5906 ;; *************** function _nrf24l01CheckACK *****************
  5907 ;; Defined at:
  5908 ;;		line 104 in file "nrf24l01.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;		None
  5911 ;; Auto vars:     Size  Location     Type
  5912 ;;		None
  5913 ;; Return value:  Size  Location     Type
  5914 ;;                  1    wreg      void 
  5915 ;; Registers used:
  5916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5917 ;; Tracked objects:
  5918 ;;		On entry : 0/0
  5919 ;;		On exit  : 0/0
  5920 ;;		Unchanged: 0/0
  5921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5924 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5925 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5926 ;;Total ram usage:        3 bytes
  5927 ;; Hardware stack levels used:    1
  5928 ;; Hardware stack levels required when called:   11
  5929 ;; This function calls:
  5930 ;;		_nrf24l01SetRXMode
  5931 ;;		_strcmp
  5932 ;; This function is called by:
  5933 ;;		_nrf24l01ISR
  5934 ;; This function uses a non-reentrant model
  5935 ;;
  5936                           
  5937                           
  5938                           ;psect for function _nrf24l01CheckACK
  5939  08AD                     _nrf24l01CheckACK:	
  5940                           
  5941                           ;nrf24l01.c: 108: if (!RXPacket.packetData.IsACK){
  5942                           
  5943                           ;incstack = 0
  5944 ;; hardware stack exceeded
  5945                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5946  08AD  0023               	movlb	3	; select bank3
  5947  08AE  1DA0               	btfss	_RXPacket^(0+384),3
  5948  08AF  0008               	return
  5949                           
  5950                           ;nrf24l01.c: 110: };nrf24l01.c: 113: nrf24l01.RXPending = 0;
  5951                           
  5952                           ;nrf24l01.c: 109: return;
  5953  08B0  10FD               	bcf	_nrf24l01,1	;volatile
  5954                           
  5955                           ;nrf24l01.c: 116: if (!TXPacket->packetData.ACKRequest){
  5956  08B1  0021               	movlb	1	; select bank1
  5957  08B2  0868               	movf	_TXPacket^(0+128),w
  5958  08B3  0086               	movwf	6
  5959  08B4  0869               	movf	(_TXPacket+1)^(0+128),w
  5960  08B5  0087               	movwf	7
  5961  08B6  1D01               	btfss	1,2
  5962  08B7  0008               	return
  5963                           
  5964                           ;nrf24l01.c: 118: };nrf24l01.c: 121: if (strcmp(TXPacket->Message, RXPacket.Message) != 
      +                          0){
  5965                           
  5966                           ;nrf24l01.c: 117: return;
  5967  08B8  0868               	movf	_TXPacket^(0+128),w
  5968  08B9  3E01               	addlw	1
  5969  08BA  0020               	movlb	0	; select bank0
  5970  08BB  00A6               	movwf	??_nrf24l01CheckACK
  5971  08BC  3000               	movlw	0
  5972  08BD  0021               	movlb	1	; select bank1
  5973  08BE  3D69               	addwfc	(_TXPacket+1)^(0+128),w
  5974  08BF  0020               	movlb	0	; select bank0
  5975  08C0  00A7               	movwf	??_nrf24l01CheckACK+1
  5976  08C1  0826               	movf	??_nrf24l01CheckACK,w
  5977  08C2  00A0               	movwf	strcmp@s1
  5978  08C3  0827               	movf	??_nrf24l01CheckACK+1,w
  5979  08C4  00A1               	movwf	strcmp@s1+1
  5980  08C5  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5981  08C6  00A8               	movwf	??_nrf24l01CheckACK+2
  5982  08C7  0828               	movf	??_nrf24l01CheckACK+2,w
  5983  08C8  00A2               	movwf	strcmp@s2
  5984  08C9  3188  2003  3188   	fcall	_strcmp
  5985  08CC  0020               	movlb	0	; select bank0
  5986  08CD  0820               	movf	?_strcmp,w
  5987  08CE  0421               	iorwf	?_strcmp+1,w
  5988  08CF  1D03               	btfss	3,2
  5989  08D0  0008               	return
  5990                           
  5991                           ;nrf24l01.c: 123: };nrf24l01.c: 130: TXPacket->packetData.ACKRequest = 0;
  5992                           
  5993                           ;nrf24l01.c: 122: return;
  5994  08D1  0021               	movlb	1	; select bank1
  5995  08D2  0868               	movf	_TXPacket^(0+128),w
  5996  08D3  0086               	movwf	6
  5997  08D4  0869               	movf	(_TXPacket+1)^(0+128),w
  5998  08D5  0087               	movwf	7
  5999  08D6  1101               	bcf	1,2
  6000                           
  6001                           ;nrf24l01.c: 133: nrf24l01SetRXMode(0);
  6002  08D7  3000               	movlw	0
  6003  08D8  318B  2300         	fcall	_nrf24l01SetRXMode
  6004  08DA  0008               	return
  6005  08DB                     __end_of_nrf24l01CheckACK:	
  6006                           
  6007                           	psect	text19
  6008  0803                     __ptext19:	
  6009 ;; *************** function _strcmp *****************
  6010 ;; Defined at:
  6011 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  6012 ;; Parameters:    Size  Location     Type
  6013 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  6014 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), RXPacket.Message(32), 
  6015 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6016 ;;  s2              1    2[BANK0 ] PTR const unsigned char 
  6017 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  6018 ;; Auto vars:     Size  Location     Type
  6019 ;;  r               1    4[BANK0 ] char 
  6020 ;; Return value:  Size  Location     Type
  6021 ;;                  2    0[BANK0 ] int 
  6022 ;; Registers used:
  6023 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6024 ;; Tracked objects:
  6025 ;;		On entry : 0/0
  6026 ;;		On exit  : 0/0
  6027 ;;		Unchanged: 0/0
  6028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6029 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6030 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6031 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6032 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6033 ;;Total ram usage:        5 bytes
  6034 ;; Hardware stack levels used:    1
  6035 ;; Hardware stack levels required when called:    7
  6036 ;; This function calls:
  6037 ;;		Nothing
  6038 ;; This function is called by:
  6039 ;;		_nrf24l01CheckACK
  6040 ;; This function uses a non-reentrant model
  6041 ;;
  6042                           
  6043                           
  6044                           ;psect for function _strcmp
  6045  0803                     _strcmp:	
  6046                           
  6047                           ;incstack = 0
  6048                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
  6049  0803  280D               	goto	l2433
  6050  0804                     l2429:	
  6051  0804  3001               	movlw	1
  6052  0805  0020               	movlb	0	; select bank0
  6053  0806  07A0               	addwf	strcmp@s1,f
  6054  0807  3000               	movlw	0
  6055  0808  3DA1               	addwfc	strcmp@s1+1,f
  6056  0809  3001               	movlw	1
  6057  080A  00A3               	movwf	??_strcmp
  6058  080B  0823               	movf	??_strcmp,w
  6059  080C  07A2               	addwf	strcmp@s2,f
  6060  080D                     l2433:	
  6061  080D  0020               	movlb	0	; select bank0
  6062  080E  0820               	movf	strcmp@s1,w
  6063  080F  0086               	movwf	6
  6064  0810  0821               	movf	strcmp@s1+1,w
  6065  0811  0087               	movwf	7
  6066  0812  0822               	movf	strcmp@s2,w
  6067  0813  0084               	movwf	4
  6068  0814  3001               	movlw	1	; select bank2/3
  6069  0815  0085               	movwf	5
  6070  0816  0300               	decf	0,w
  6071  0817  3AFF               	xorlw	255
  6072  0818  0701               	addwf	1,w
  6073  0819  00A3               	movwf	??_strcmp
  6074  081A  0823               	movf	??_strcmp,w
  6075  081B  00A4               	movwf	strcmp@r
  6076  081C  0824               	movf	strcmp@r,w
  6077  081D  1D03               	btfss	3,2
  6078  081E  2826               	goto	l2437
  6079  081F  0820               	movf	strcmp@s1,w
  6080  0820  0086               	movwf	6
  6081  0821  0821               	movf	strcmp@s1+1,w
  6082  0822  0087               	movwf	7
  6083  0823  0801               	movf	1,w
  6084  0824  1D03               	btfss	3,2
  6085  0825  2804               	goto	l2429
  6086  0826                     l2437:	
  6087  0826  0824               	movf	strcmp@r,w
  6088  0827  00A0               	movwf	?_strcmp
  6089  0828  01A1               	clrf	?_strcmp+1
  6090  0829  1BA0               	btfsc	?_strcmp,7
  6091  082A  03A1               	decf	?_strcmp+1,f
  6092  082B  0008               	return
  6093  082C                     __end_of_strcmp:	
  6094                           
  6095                           	psect	text20
  6096  0B00                     __ptext20:	
  6097 ;; *************** function _nrf24l01SetRXMode *****************
  6098 ;; Defined at:
  6099 ;;		line 54 in file "nrf24l01.c"
  6100 ;; Parameters:    Size  Location     Type
  6101 ;;  rxMode          1    wreg     unsigned char 
  6102 ;; Auto vars:     Size  Location     Type
  6103 ;;  rxMode          1    5[BANK0 ] unsigned char 
  6104 ;;  config          1    4[BANK0 ] struct .
  6105 ;; Return value:  Size  Location     Type
  6106 ;;                  1    wreg      void 
  6107 ;; Registers used:
  6108 ;;		wreg, status,2, status,0, pclath, cstack
  6109 ;; Tracked objects:
  6110 ;;		On entry : 0/0
  6111 ;;		On exit  : 0/0
  6112 ;;		Unchanged: 0/0
  6113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6115 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6116 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6117 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6118 ;;Total ram usage:        3 bytes
  6119 ;; Hardware stack levels used:    1
  6120 ;; Hardware stack levels required when called:   10
  6121 ;; This function calls:
  6122 ;;		_nrf24l01CEHigh
  6123 ;;		_nrf24l01CELow
  6124 ;;		_nrf24l01Send
  6125 ;; This function is called by:
  6126 ;;		_sleep
  6127 ;;		_nrf24l01CheckACK
  6128 ;;		_nrf24l01SendPacket
  6129 ;;		_nrf24l01ISR
  6130 ;; This function uses a non-reentrant model
  6131 ;;
  6132                           
  6133                           
  6134                           ;psect for function _nrf24l01SetRXMode
  6135  0B00                     _nrf24l01SetRXMode:	
  6136                           
  6137                           ;incstack = 0
  6138                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  6139                           ;nrf24l01SetRXMode@rxMode stored from wreg
  6140  0B00  0020               	movlb	0	; select bank0
  6141  0B01  00A5               	movwf	nrf24l01SetRXMode@rxMode
  6142                           
  6143                           ;nrf24l01.c: 56: if (rxMode){
  6144  0B02  0825               	movf	nrf24l01SetRXMode@rxMode,w
  6145  0B03  1903               	btfsc	3,2
  6146  0B04  2B07               	goto	l2397
  6147                           
  6148                           ;nrf24l01.c: 57: if (nrf24l01.TXBusy){
  6149  0B05  187D               	btfsc	_nrf24l01,0	;volatile
  6150  0B06  0008               	return
  6151  0B07                     l2397:	
  6152                           ;nrf24l01.c: 58: return;
  6153                           
  6154                           
  6155                           ;nrf24l01.c: 59: };nrf24l01.c: 60: };nrf24l01.c: 62: n_CONFIG_t config;;nrf24l01.c: 65: 
      +                          config.byte = nrf24l01Send((unsigned) 0b00000000 | (unsigned) 0x00, 0);
  6156  0B07  01A0               	clrf	nrf24l01Send@data
  6157  0B08  3000               	movlw	0
  6158  0B09  3197  272B  318B   	fcall	_nrf24l01Send
  6159  0B0C  0020               	movlb	0	; select bank0
  6160  0B0D  00A3               	movwf	??_nrf24l01SetRXMode
  6161  0B0E  0823               	movf	??_nrf24l01SetRXMode,w
  6162  0B0F  00A4               	movwf	nrf24l01SetRXMode@config
  6163                           
  6164                           ;nrf24l01.c: 68: if (config.PRIM_RX != rxMode){
  6165  0B10  0824               	movf	nrf24l01SetRXMode@config,w
  6166  0B11  3901               	andlw	1
  6167  0B12  0625               	xorwf	nrf24l01SetRXMode@rxMode,w
  6168  0B13  1903               	skipnz
  6169  0B14  2B42               	goto	l2417
  6170                           
  6171                           ;nrf24l01.c: 71: nrf24l01CELow();
  6172  0B15  3195  259F  318B   	fcall	_nrf24l01CELow
  6173                           
  6174                           ;nrf24l01.c: 72: _delay((unsigned long)((200)*(32000000/4000000.0)));
  6175  0B18  30E4               	movlw	228
  6176  0B19                     u3847:	
  6177  0B19  3200               	nop2
  6178  0B1A  3200               	nop2
  6179  0B1B  0B89               	decfsz	9,f
  6180  0B1C  2B19               	goto	u3847
  6181  0B1D  3200               	nop2
  6182  0B1E  3200               	nop2
  6183                           
  6184                           ;nrf24l01.c: 75: config.PRIM_RX = rxMode;
  6185  0B1F  0020               	movlb	0	; select bank0
  6186  0B20  0825               	movf	nrf24l01SetRXMode@rxMode,w
  6187  0B21  3901               	andlw	1
  6188  0B22  1024               	bcf	nrf24l01SetRXMode@config,0
  6189  0B23  1D03               	skipz
  6190  0B24  1424               	bsf	nrf24l01SetRXMode@config,0
  6191                           
  6192                           ;nrf24l01.c: 76: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  6193  0B25  0824               	movf	nrf24l01SetRXMode@config,w
  6194  0B26  00A3               	movwf	??_nrf24l01SetRXMode
  6195  0B27  0823               	movf	??_nrf24l01SetRXMode,w
  6196  0B28  00A0               	movwf	nrf24l01Send@data
  6197  0B29  3020               	movlw	32
  6198  0B2A  3197  272B  318B   	fcall	_nrf24l01Send
  6199                           
  6200                           ;nrf24l01.c: 79: _delay((unsigned long)((200)*(32000000/4000000.0)));
  6201  0B2D  30E4               	movlw	228
  6202  0B2E                     u3857:	
  6203  0B2E  3200               	nop2
  6204  0B2F  3200               	nop2
  6205  0B30  0B89               	decfsz	9,f
  6206  0B31  2B2E               	goto	u3857
  6207  0B32  3200               	nop2
  6208  0B33  3200               	nop2
  6209                           
  6210                           ;nrf24l01.c: 82: if (rxMode){
  6211  0B34  0020               	movlb	0	; select bank0
  6212  0B35  0825               	movf	nrf24l01SetRXMode@rxMode,w
  6213  0B36  1903               	btfsc	3,2
  6214  0B37  2B42               	goto	l2417
  6215                           
  6216                           ;nrf24l01.c: 83: nrf24l01CEHigh();
  6217  0B38  3195  259C  318B   	fcall	_nrf24l01CEHigh
  6218                           
  6219                           ;nrf24l01.c: 84: _delay((unsigned long)((200)*(32000000/4000000.0)));
  6220  0B3B  30E4               	movlw	228
  6221  0B3C                     u3867:	
  6222  0B3C  3200               	nop2
  6223  0B3D  3200               	nop2
  6224  0B3E  0B89               	decfsz	9,f
  6225  0B3F  2B3C               	goto	u3867
  6226  0B40  3200               	nop2
  6227  0B41  3200               	nop2
  6228  0B42                     l2417:	
  6229                           
  6230                           ;nrf24l01.c: 85: };nrf24l01.c: 86: };nrf24l01.c: 89: nrf24l01.RXMode = rxMode;
  6231  0B42  0020               	movlb	0	; select bank0
  6232  0B43  0825               	movf	nrf24l01SetRXMode@rxMode,w
  6233  0B44  3901               	andlw	1
  6234  0B45  117D               	bcf	_nrf24l01,2	;volatile
  6235  0B46  1D03               	skipz
  6236  0B47  157D               	bsf	_nrf24l01,2	;volatile
  6237  0B48  0008               	return
  6238  0B49                     __end_of_nrf24l01SetRXMode:	
  6239                           
  6240                           	psect	text21
  6241  0002                     __ptext21:	
  6242 ;; *************** function _exception *****************
  6243 ;; Defined at:
  6244 ;;		line 80 in file "interface.c"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;  exception       1    wreg     unsigned char 
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;  exception       1    0[COMMON] unsigned char 
  6249 ;; Return value:  Size  Location     Type
  6250 ;;                  1    wreg      void 
  6251 ;; Registers used:
  6252 ;;		wreg
  6253 ;; Tracked objects:
  6254 ;;		On entry : 0/0
  6255 ;;		On exit  : 0/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6262 ;;Total ram usage:        0 bytes
  6263 ;; Hardware stack levels used:    1
  6264 ;; Hardware stack levels required when called:    7
  6265 ;; This function calls:
  6266 ;;		Nothing
  6267 ;; This function is called by:
  6268 ;;		_nrf24l01ISR
  6269 ;; This function uses a non-reentrant model
  6270 ;;
  6271                           
  6272                           
  6273                           ;psect for function _exception
  6274  0002                     _exception:	
  6275                           
  6276                           ;incstack = 0
  6277                           ; Regs used in _exception: [wreg]
  6278  0002  0001               	reset	;# 
  6279  0003  0008               	return
  6280  0004                     __end_of_exception:	
  6281                           
  6282                           	psect	text22
  6283  0CF7                     __ptext22:	
  6284 ;; *************** function _setMessage *****************
  6285 ;; Defined at:
  6286 ;;		line 144 in file "main.c"
  6287 ;; Parameters:    Size  Location     Type
  6288 ;;  packet          2   25[BANK1 ] PTR struct .
  6289 ;;		 -> main@packet(33), loop@packet(33), 
  6290 ;;  topic           2   27[BANK1 ] PTR const unsigned char 
  6291 ;;		 -> STR_9(5), STR_7(6), STR_6(7), STR_5(5), 
  6292 ;;		 -> STR_4(5), STR_3(4), 
  6293 ;;  value           3   29[BANK1 ] float 
  6294 ;; Auto vars:     Size  Location     Type
  6295 ;;  status          2   33[BANK1 ] int 
  6296 ;; Return value:  Size  Location     Type
  6297 ;;                  1    wreg      void 
  6298 ;; Registers used:
  6299 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6300 ;; Tracked objects:
  6301 ;;		On entry : 0/0
  6302 ;;		On exit  : 0/0
  6303 ;;		Unchanged: 0/0
  6304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6305 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6306 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6307 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6308 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  6309 ;;Total ram usage:       10 bytes
  6310 ;; Hardware stack levels used:    1
  6311 ;; Hardware stack levels required when called:   11
  6312 ;; This function calls:
  6313 ;;		_ftoa
  6314 ;;		_memset
  6315 ;;		_strcat
  6316 ;; This function is called by:
  6317 ;;		_loop
  6318 ;;		_main
  6319 ;; This function uses a non-reentrant model
  6320 ;;
  6321                           
  6322                           
  6323                           ;psect for function _setMessage
  6324  0CF7                     _setMessage:	
  6325                           
  6326                           ;main.c: 145: memset(packet->Message, 0, sizeof(packet->Message));
  6327                           
  6328                           ;incstack = 0
  6329                           ; Regs used in _setMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6330  0CF7  0021               	movlb	1	; select bank1
  6331  0CF8  0839               	movf	setMessage@packet^(0+128),w
  6332  0CF9  3E01               	addlw	1
  6333  0CFA  0020               	movlb	0	; select bank0
  6334  0CFB  00A0               	movwf	memset@p1
  6335  0CFC  3000               	movlw	0
  6336  0CFD  0021               	movlb	1	; select bank1
  6337  0CFE  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  6338  0CFF  0020               	movlb	0	; select bank0
  6339  0D00  00A1               	movwf	memset@p1+1
  6340  0D01  3000               	movlw	0
  6341  0D02  00A2               	movwf	memset@c
  6342  0D03  00A3               	movwf	memset@c+1
  6343  0D04  3020               	movlw	32
  6344  0D05  00A4               	movwf	memset@n
  6345  0D06  3000               	movlw	0
  6346  0D07  00A5               	movwf	memset@n+1
  6347  0D08  3196  264B  318C   	fcall	_memset
  6348                           
  6349                           ;main.c: 147: strcat(packet->Message, romData->name);
  6350  0D0B  0021               	movlb	1	; select bank1
  6351  0D0C  0839               	movf	setMessage@packet^(0+128),w
  6352  0D0D  3E01               	addlw	1
  6353  0D0E  00B3               	movwf	strcat@to^(0+128)
  6354  0D0F  3000               	movlw	0
  6355  0D10  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  6356  0D11  00B4               	movwf	(strcat@to+1)^(0+128)
  6357  0D12  086B               	movf	_romData^(0+128),w
  6358  0D13  3E01               	addlw	1
  6359  0D14  00B5               	movwf	strcat@from^(0+128)
  6360  0D15  3001               	movlw	1
  6361  0D16  00B6               	movwf	(strcat@from+1)^(0+128)
  6362  0D17  3197  27D9  318C   	fcall	_strcat
  6363                           
  6364                           ;main.c: 149: strcat(packet->Message, "/");
  6365  0D1A  0021               	movlb	1	; select bank1
  6366  0D1B  0839               	movf	setMessage@packet^(0+128),w
  6367  0D1C  3E01               	addlw	1
  6368  0D1D  00B3               	movwf	strcat@to^(0+128)
  6369  0D1E  3000               	movlw	0
  6370  0D1F  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  6371  0D20  00B4               	movwf	(strcat@to+1)^(0+128)
  6372  0D21  3035               	movlw	low (STR_1| (0+32768))
  6373  0D22  00B5               	movwf	strcat@from^(0+128)
  6374  0D23  3098               	movlw	high (STR_1| (0+32768))
  6375  0D24  00B6               	movwf	(strcat@from^(0+128)+1)
  6376  0D25  3197  27D9  318C   	fcall	_strcat
  6377                           
  6378                           ;main.c: 150: strcat(packet->Message, topic);
  6379  0D28  0021               	movlb	1	; select bank1
  6380  0D29  0839               	movf	setMessage@packet^(0+128),w
  6381  0D2A  3E01               	addlw	1
  6382  0D2B  00B3               	movwf	strcat@to^(0+128)
  6383  0D2C  3000               	movlw	0
  6384  0D2D  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  6385  0D2E  00B4               	movwf	(strcat@to+1)^(0+128)
  6386  0D2F  083C               	movf	(setMessage@topic+1)^(0+128),w
  6387  0D30  00B6               	movwf	(strcat@from+1)^(0+128)
  6388  0D31  083B               	movf	setMessage@topic^(0+128),w
  6389  0D32  00B5               	movwf	strcat@from^(0+128)
  6390  0D33  3197  27D9  318C   	fcall	_strcat
  6391                           
  6392                           ;main.c: 152: int status;;main.c: 153: strcat(packet->Message, "/");
  6393  0D36  0021               	movlb	1	; select bank1
  6394  0D37  0839               	movf	setMessage@packet^(0+128),w
  6395  0D38  3E01               	addlw	1
  6396  0D39  00B3               	movwf	strcat@to^(0+128)
  6397  0D3A  3000               	movlw	0
  6398  0D3B  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  6399  0D3C  00B4               	movwf	(strcat@to+1)^(0+128)
  6400  0D3D  3035               	movlw	low (STR_1| (0+32768))
  6401  0D3E  00B5               	movwf	strcat@from^(0+128)
  6402  0D3F  3098               	movlw	high (STR_1| (0+32768))
  6403  0D40  00B6               	movwf	(strcat@from^(0+128)+1)
  6404  0D41  3197  27D9  318C   	fcall	_strcat
  6405                           
  6406                           ;main.c: 154: strcat(packet->Message, ftoa(value, &status));
  6407  0D44  0021               	movlb	1	; select bank1
  6408  0D45  0839               	movf	setMessage@packet^(0+128),w
  6409  0D46  3E01               	addlw	1
  6410  0D47  00B3               	movwf	strcat@to^(0+128)
  6411  0D48  3000               	movlw	0
  6412  0D49  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  6413  0D4A  00B4               	movwf	(strcat@to+1)^(0+128)
  6414  0D4B  083D               	movf	setMessage@value^(0+128),w
  6415  0D4C  00A6               	movwf	ftoa@f^(0+128)
  6416  0D4D  083E               	movf	(setMessage@value+1)^(0+128),w
  6417  0D4E  00A7               	movwf	(ftoa@f+1)^(0+128)
  6418  0D4F  083F               	movf	(setMessage@value+2)^(0+128),w
  6419  0D50  00A8               	movwf	(ftoa@f+2)^(0+128)
  6420  0D51  30C1               	movlw	(low (setMessage@status| 0))& (0+255)
  6421  0D52  00C0               	movwf	??_setMessage^(0+128)
  6422  0D53  0840               	movf	??_setMessage^(0+128),w
  6423  0D54  00A9               	movwf	ftoa@status^(0+128)
  6424  0D55  3185  25A5  318C   	fcall	_ftoa
  6425  0D58  0021               	movlb	1	; select bank1
  6426  0D59  00B5               	movwf	strcat@from^(0+128)
  6427  0D5A  3001               	movlw	1
  6428  0D5B  00B6               	movwf	(strcat@from+1)^(0+128)
  6429  0D5C  3197  27D9         	fcall	_strcat
  6430  0D5E  0008               	return
  6431  0D5F                     __end_of_setMessage:	
  6432                           
  6433                           	psect	text23
  6434  17D9                     __ptext23:	
  6435 ;; *************** function _strcat *****************
  6436 ;; Defined at:
  6437 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  6438 ;; Parameters:    Size  Location     Type
  6439 ;;  to              2   19[BANK1 ] PTR unsigned char 
  6440 ;;		 -> main@packet(33), loop@packet(33), 
  6441 ;;  from            2   21[BANK1 ] PTR const unsigned char 
  6442 ;;		 -> romDataMap.name(16), ftoa@buf(17), STR_9(5), STR_7(6), 
  6443 ;;		 -> STR_6(7), STR_5(5), STR_4(5), STR_3(4), 
  6444 ;;		 -> STR_2(2), STR_1(2), romDataMap(28), 
  6445 ;; Auto vars:     Size  Location     Type
  6446 ;;  cp              2   23[BANK1 ] PTR unsigned char 
  6447 ;;		 -> main@packet(33), loop@packet(33), 
  6448 ;; Return value:  Size  Location     Type
  6449 ;;                  2   19[BANK1 ] PTR unsigned char 
  6450 ;; Registers used:
  6451 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6452 ;; Tracked objects:
  6453 ;;		On entry : 0/0
  6454 ;;		On exit  : 0/0
  6455 ;;		Unchanged: 0/0
  6456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6457 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6458 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6460 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6461 ;;Total ram usage:        6 bytes
  6462 ;; Hardware stack levels used:    1
  6463 ;; Hardware stack levels required when called:    7
  6464 ;; This function calls:
  6465 ;;		Nothing
  6466 ;; This function is called by:
  6467 ;;		_setMessage
  6468 ;; This function uses a non-reentrant model
  6469 ;;
  6470                           
  6471                           
  6472                           ;psect for function _strcat
  6473  17D9                     _strcat:	
  6474                           
  6475                           ;incstack = 0
  6476                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  6477  17D9  0021               	movlb	1	; select bank1
  6478  17DA  0834               	movf	(strcat@to+1)^(0+128),w
  6479  17DB  00B8               	movwf	(strcat@cp+1)^(0+128)
  6480  17DC  0833               	movf	strcat@to^(0+128),w
  6481  17DD  00B7               	movwf	strcat@cp^(0+128)
  6482  17DE                     l3127:	
  6483  17DE  0837               	movf	strcat@cp^(0+128),w
  6484  17DF  0086               	movwf	6
  6485  17E0  0838               	movf	(strcat@cp+1)^(0+128),w
  6486  17E1  0087               	movwf	7
  6487  17E2  0801               	movf	1,w
  6488  17E3  1903               	btfsc	3,2
  6489  17E4  2FF2               	goto	l3131
  6490  17E5  3001               	movlw	1
  6491  17E6  07B7               	addwf	strcat@cp^(0+128),f
  6492  17E7  3000               	movlw	0
  6493  17E8  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  6494  17E9  2FDE               	goto	l3127
  6495  17EA                     l3129:	
  6496  17EA  3001               	movlw	1
  6497  17EB  07B7               	addwf	strcat@cp^(0+128),f
  6498  17EC  3000               	movlw	0
  6499  17ED  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  6500  17EE  3001               	movlw	1
  6501  17EF  07B5               	addwf	strcat@from^(0+128),f
  6502  17F0  3000               	movlw	0
  6503  17F1  3DB6               	addwfc	(strcat@from+1)^(0+128),f
  6504  17F2                     l3131:	
  6505  17F2  0837               	movf	strcat@cp^(0+128),w
  6506  17F3  0086               	movwf	6
  6507  17F4  0838               	movf	(strcat@cp+1)^(0+128),w
  6508  17F5  0087               	movwf	7
  6509  17F6  0835               	movf	strcat@from^(0+128),w
  6510  17F7  0084               	movwf	4
  6511  17F8  0836               	movf	(strcat@from+1)^(0+128),w
  6512  17F9  0085               	movwf	5
  6513  17FA  0800               	movf	0,w	;code access
  6514  17FB  3FC0               	movwi [0]fsr1
  6515  17FC  0889               	movf	9,f
  6516  17FD  1903               	btfsc	3,2
  6517  17FE  0008               	return
  6518  17FF  2FEA               	goto	l3129
  6519  1800                     __end_of_strcat:	
  6520                           ;	Return value of _strcat is never used
  6521                           
  6522                           
  6523                           	psect	text24
  6524  164B                     __ptext24:	
  6525 ;; *************** function _memset *****************
  6526 ;; Defined at:
  6527 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6528 ;; Parameters:    Size  Location     Type
  6529 ;;  p1              2    0[BANK0 ] PTR void 
  6530 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6531 ;;  c               2    2[BANK0 ] int 
  6532 ;;  n               2    4[BANK0 ] unsigned int 
  6533 ;; Auto vars:     Size  Location     Type
  6534 ;;  p               2    6[BANK0 ] PTR unsigned char 
  6535 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6536 ;; Return value:  Size  Location     Type
  6537 ;;                  2    0[BANK0 ] PTR void 
  6538 ;; Registers used:
  6539 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6540 ;; Tracked objects:
  6541 ;;		On entry : 0/0
  6542 ;;		On exit  : 0/0
  6543 ;;		Unchanged: 0/0
  6544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6545 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6546 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;Total ram usage:        8 bytes
  6550 ;; Hardware stack levels used:    1
  6551 ;; Hardware stack levels required when called:    7
  6552 ;; This function calls:
  6553 ;;		Nothing
  6554 ;; This function is called by:
  6555 ;;		_setMessage
  6556 ;;		_nrf24l01ReceivePacket
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           
  6561                           ;psect for function _memset
  6562  164B                     _memset:	
  6563                           
  6564                           ;incstack = 0
  6565                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6566  164B  0020               	movlb	0	; select bank0
  6567  164C  0821               	movf	memset@p1+1,w
  6568  164D  00A7               	movwf	memset@p+1
  6569  164E  0820               	movf	memset@p1,w
  6570  164F  00A6               	movwf	memset@p
  6571  1650                     l2425:	
  6572  1650  3001               	movlw	1
  6573  1651  02A4               	subwf	memset@n,f
  6574  1652  3000               	movlw	0
  6575  1653  3BA5               	subwfb	memset@n+1,f
  6576  1654  0A24               	incf	memset@n,w
  6577  1655  1903               	btfsc	3,2
  6578  1656  0A25               	incf	memset@n+1,w
  6579  1657  1903               	btfsc	3,2
  6580  1658  0008               	return
  6581  1659  0826               	movf	memset@p,w
  6582  165A  0086               	movwf	6
  6583  165B  0827               	movf	memset@p+1,w
  6584  165C  0087               	movwf	7
  6585  165D  0822               	movf	memset@c,w
  6586  165E  0081               	movwf	1
  6587  165F  3001               	movlw	1
  6588  1660  07A6               	addwf	memset@p,f
  6589  1661  3000               	movlw	0
  6590  1662  3DA7               	addwfc	memset@p+1,f
  6591  1663  2E50               	goto	l2425
  6592  1664                     __end_of_memset:	
  6593                           ;	Return value of _memset is never used
  6594                           
  6595                           
  6596                           	psect	text25
  6597  05A5                     __ptext25:	
  6598 ;; *************** function _ftoa *****************
  6599 ;; Defined at:
  6600 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6601 ;; Parameters:    Size  Location     Type
  6602 ;;  f               3    6[BANK1 ] float 
  6603 ;;  status          1    9[BANK1 ] PTR int 
  6604 ;;		 -> setMessage@status(2), 
  6605 ;; Auto vars:     Size  Location     Type
  6606 ;;  l               4   14[BANK1 ] unsigned long 
  6607 ;;  rem             4   10[BANK1 ] unsigned long 
  6608 ;;  cp              1   18[BANK1 ] PTR unsigned char 
  6609 ;;		 -> ftoa@buf(17), 
  6610 ;; Return value:  Size  Location     Type
  6611 ;;                  1    wreg      PTR unsigned char 
  6612 ;; Registers used:
  6613 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6614 ;; Tracked objects:
  6615 ;;		On entry : 0/0
  6616 ;;		On exit  : 0/0
  6617 ;;		Unchanged: 0/0
  6618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6619 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6620 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6621 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6622 ;;      Totals:         0       1      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6623 ;;Total ram usage:       14 bytes
  6624 ;; Hardware stack levels used:    1
  6625 ;; Hardware stack levels required when called:   10
  6626 ;; This function calls:
  6627 ;;		___ftge
  6628 ;;		___ftmul
  6629 ;;		___ftneg
  6630 ;;		___ftsub
  6631 ;;		___fttol
  6632 ;;		___lltoft
  6633 ;;		_sprintf
  6634 ;; This function is called by:
  6635 ;;		_setMessage
  6636 ;; This function uses a non-reentrant model
  6637 ;;
  6638                           
  6639                           
  6640                           ;psect for function _ftoa
  6641  05A5                     _ftoa:	
  6642                           
  6643                           ;incstack = 0
  6644                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6645  05A5  3053               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6646  05A6  0020               	movlb	0	; select bank0
  6647  05A7  00EF               	movwf	??_ftoa
  6648  05A8  086F               	movf	??_ftoa,w
  6649  05A9  0021               	movlb	1	; select bank1
  6650  05AA  00B2               	movwf	ftoa@cp^(0+128)
  6651  05AB  0826               	movf	ftoa@f^(0+128),w
  6652  05AC  0020               	movlb	0	; select bank0
  6653  05AD  00A0               	movwf	___ftge@ff1
  6654  05AE  0021               	movlb	1	; select bank1
  6655  05AF  0827               	movf	(ftoa@f+1)^(0+128),w
  6656  05B0  0020               	movlb	0	; select bank0
  6657  05B1  00A1               	movwf	___ftge@ff1+1
  6658  05B2  0021               	movlb	1	; select bank1
  6659  05B3  0828               	movf	(ftoa@f+2)^(0+128),w
  6660  05B4  0020               	movlb	0	; select bank0
  6661  05B5  00A2               	movwf	___ftge@ff1+2
  6662  05B6  3000               	movlw	0
  6663  05B7  00A3               	movwf	___ftge@ff2
  6664  05B8  3000               	movlw	0
  6665  05B9  00A4               	movwf	___ftge@ff2+1
  6666  05BA  3000               	movlw	0
  6667  05BB  00A5               	movwf	___ftge@ff2+2
  6668  05BC  3189  2171  3185   	fcall	___ftge
  6669  05BF  1803               	btfsc	3,0
  6670  05C0  2DEB               	goto	l3143
  6671  05C1  302D               	movlw	45
  6672  05C2  0020               	movlb	0	; select bank0
  6673  05C3  00EF               	movwf	??_ftoa
  6674  05C4  0021               	movlb	1	; select bank1
  6675  05C5  0832               	movf	ftoa@cp^(0+128),w
  6676  05C6  0086               	movwf	6
  6677  05C7  3001               	movlw	1	; select bank2/3
  6678  05C8  0087               	movwf	7
  6679  05C9  0020               	movlb	0	; select bank0
  6680  05CA  086F               	movf	??_ftoa,w
  6681  05CB  0081               	movwf	1
  6682  05CC  3001               	movlw	1
  6683  05CD  00EF               	movwf	??_ftoa
  6684  05CE  086F               	movf	??_ftoa,w
  6685  05CF  0021               	movlb	1	; select bank1
  6686  05D0  07B2               	addwf	ftoa@cp^(0+128),f
  6687  05D1  0826               	movf	ftoa@f^(0+128),w
  6688  05D2  0020               	movlb	0	; select bank0
  6689  05D3  00D7               	movwf	___ftneg@f1
  6690  05D4  0021               	movlb	1	; select bank1
  6691  05D5  0827               	movf	(ftoa@f+1)^(0+128),w
  6692  05D6  0020               	movlb	0	; select bank0
  6693  05D7  00D8               	movwf	___ftneg@f1+1
  6694  05D8  0021               	movlb	1	; select bank1
  6695  05D9  0828               	movf	(ftoa@f+2)^(0+128),w
  6696  05DA  0020               	movlb	0	; select bank0
  6697  05DB  00D9               	movwf	___ftneg@f1+2
  6698  05DC  3195  25BF  3185   	fcall	___ftneg
  6699  05DF  0020               	movlb	0	; select bank0
  6700  05E0  0857               	movf	?___ftneg,w
  6701  05E1  0021               	movlb	1	; select bank1
  6702  05E2  00A6               	movwf	ftoa@f^(0+128)
  6703  05E3  0020               	movlb	0	; select bank0
  6704  05E4  0858               	movf	?___ftneg+1,w
  6705  05E5  0021               	movlb	1	; select bank1
  6706  05E6  00A7               	movwf	(ftoa@f+1)^(0+128)
  6707  05E7  0020               	movlb	0	; select bank0
  6708  05E8  0859               	movf	?___ftneg+2,w
  6709  05E9  0021               	movlb	1	; select bank1
  6710  05EA  00A8               	movwf	(ftoa@f+2)^(0+128)
  6711  05EB                     l3143:	
  6712  05EB  0021               	movlb	1	; select bank1
  6713  05EC  0826               	movf	ftoa@f^(0+128),w
  6714  05ED  0020               	movlb	0	; select bank0
  6715  05EE  00E7               	movwf	___fttol@f1
  6716  05EF  0021               	movlb	1	; select bank1
  6717  05F0  0827               	movf	(ftoa@f+1)^(0+128),w
  6718  05F1  0020               	movlb	0	; select bank0
  6719  05F2  00E8               	movwf	___fttol@f1+1
  6720  05F3  0021               	movlb	1	; select bank1
  6721  05F4  0828               	movf	(ftoa@f+2)^(0+128),w
  6722  05F5  0020               	movlb	0	; select bank0
  6723  05F6  00E9               	movwf	___fttol@f1+2
  6724  05F7  318D  255F  3185   	fcall	___fttol
  6725  05FA  0020               	movlb	0	; select bank0
  6726  05FB  086A               	movf	?___fttol+3,w
  6727  05FC  0021               	movlb	1	; select bank1
  6728  05FD  00B1               	movwf	(ftoa@l+3)^(0+128)
  6729  05FE  0020               	movlb	0	; select bank0
  6730  05FF  0869               	movf	?___fttol+2,w
  6731  0600  0021               	movlb	1	; select bank1
  6732  0601  00B0               	movwf	(ftoa@l+2)^(0+128)
  6733  0602  0020               	movlb	0	; select bank0
  6734  0603  0868               	movf	?___fttol+1,w
  6735  0604  0021               	movlb	1	; select bank1
  6736  0605  00AF               	movwf	(ftoa@l+1)^(0+128)
  6737  0606  0020               	movlb	0	; select bank0
  6738  0607  0867               	movf	?___fttol,w
  6739  0608  0021               	movlb	1	; select bank1
  6740  0609  00AE               	movwf	ftoa@l^(0+128)
  6741  060A  0831               	movf	(ftoa@l+3)^(0+128),w
  6742  060B  0020               	movlb	0	; select bank0
  6743  060C  00AB               	movwf	___lltoft@c+3
  6744  060D  0021               	movlb	1	; select bank1
  6745  060E  0830               	movf	(ftoa@l+2)^(0+128),w
  6746  060F  0020               	movlb	0	; select bank0
  6747  0610  00AA               	movwf	___lltoft@c+2
  6748  0611  0021               	movlb	1	; select bank1
  6749  0612  082F               	movf	(ftoa@l+1)^(0+128),w
  6750  0613  0020               	movlb	0	; select bank0
  6751  0614  00A9               	movwf	___lltoft@c+1
  6752  0615  0021               	movlb	1	; select bank1
  6753  0616  082E               	movf	ftoa@l^(0+128),w
  6754  0617  0020               	movlb	0	; select bank0
  6755  0618  00A8               	movwf	___lltoft@c
  6756  0619  3188  2056  3185   	fcall	___lltoft
  6757  061C  0020               	movlb	0	; select bank0
  6758  061D  0828               	movf	?___lltoft,w
  6759  061E  00BB               	movwf	___ftsub@f2
  6760  061F  0829               	movf	?___lltoft+1,w
  6761  0620  00BC               	movwf	___ftsub@f2+1
  6762  0621  082A               	movf	?___lltoft+2,w
  6763  0622  00BD               	movwf	___ftsub@f2+2
  6764  0623  0021               	movlb	1	; select bank1
  6765  0624  0826               	movf	ftoa@f^(0+128),w
  6766  0625  0020               	movlb	0	; select bank0
  6767  0626  00BE               	movwf	___ftsub@f1
  6768  0627  0021               	movlb	1	; select bank1
  6769  0628  0827               	movf	(ftoa@f+1)^(0+128),w
  6770  0629  0020               	movlb	0	; select bank0
  6771  062A  00BF               	movwf	___ftsub@f1+1
  6772  062B  0021               	movlb	1	; select bank1
  6773  062C  0828               	movf	(ftoa@f+2)^(0+128),w
  6774  062D  0020               	movlb	0	; select bank0
  6775  062E  00C0               	movwf	___ftsub@f1+2
  6776  062F  3196  26EE  3185   	fcall	___ftsub
  6777  0632  0020               	movlb	0	; select bank0
  6778  0633  083B               	movf	?___ftsub,w
  6779  0634  0021               	movlb	1	; select bank1
  6780  0635  00A6               	movwf	ftoa@f^(0+128)
  6781  0636  0020               	movlb	0	; select bank0
  6782  0637  083C               	movf	?___ftsub+1,w
  6783  0638  0021               	movlb	1	; select bank1
  6784  0639  00A7               	movwf	(ftoa@f+1)^(0+128)
  6785  063A  0020               	movlb	0	; select bank0
  6786  063B  083D               	movf	?___ftsub+2,w
  6787  063C  0021               	movlb	1	; select bank1
  6788  063D  00A8               	movwf	(ftoa@f+2)^(0+128)
  6789  063E  0826               	movf	ftoa@f^(0+128),w
  6790  063F  0020               	movlb	0	; select bank0
  6791  0640  00DA               	movwf	___ftmul@f2
  6792  0641  0021               	movlb	1	; select bank1
  6793  0642  0827               	movf	(ftoa@f+1)^(0+128),w
  6794  0643  0020               	movlb	0	; select bank0
  6795  0644  00DB               	movwf	___ftmul@f2+1
  6796  0645  0021               	movlb	1	; select bank1
  6797  0646  0828               	movf	(ftoa@f+2)^(0+128),w
  6798  0647  0020               	movlb	0	; select bank0
  6799  0648  00DC               	movwf	___ftmul@f2+2
  6800  0649  3024               	movlw	36
  6801  064A  00D7               	movwf	___ftmul@f1
  6802  064B  3074               	movlw	116
  6803  064C  00D8               	movwf	___ftmul@f1+1
  6804  064D  3049               	movlw	73
  6805  064E  00D9               	movwf	___ftmul@f1+2
  6806  064F  318F  274C  3185   	fcall	___ftmul
  6807  0652  0020               	movlb	0	; select bank0
  6808  0653  0857               	movf	?___ftmul,w
  6809  0654  00E7               	movwf	___fttol@f1
  6810  0655  0858               	movf	?___ftmul+1,w
  6811  0656  00E8               	movwf	___fttol@f1+1
  6812  0657  0859               	movf	?___ftmul+2,w
  6813  0658  00E9               	movwf	___fttol@f1+2
  6814  0659  318D  255F  3185   	fcall	___fttol
  6815  065C  0020               	movlb	0	; select bank0
  6816  065D  086A               	movf	?___fttol+3,w
  6817  065E  0021               	movlb	1	; select bank1
  6818  065F  00AD               	movwf	(ftoa@rem+3)^(0+128)
  6819  0660  0020               	movlb	0	; select bank0
  6820  0661  0869               	movf	?___fttol+2,w
  6821  0662  0021               	movlb	1	; select bank1
  6822  0663  00AC               	movwf	(ftoa@rem+2)^(0+128)
  6823  0664  0020               	movlb	0	; select bank0
  6824  0665  0868               	movf	?___fttol+1,w
  6825  0666  0021               	movlb	1	; select bank1
  6826  0667  00AB               	movwf	(ftoa@rem+1)^(0+128)
  6827  0668  0020               	movlb	0	; select bank0
  6828  0669  0867               	movf	?___fttol,w
  6829  066A  0021               	movlb	1	; select bank1
  6830  066B  00AA               	movwf	ftoa@rem^(0+128)
  6831  066C  3001               	movlw	low (STR_10| (0+32768))
  6832  066D  0020               	movlb	0	; select bank0
  6833  066E  00B8               	movwf	sprintf@f
  6834  066F  3098               	movlw	high (STR_10| (0+32768))
  6835  0670  00B9               	movwf	sprintf@f+1
  6836  0671  0021               	movlb	1	; select bank1
  6837  0672  0831               	movf	(ftoa@l+3)^(0+128),w
  6838  0673  0020               	movlb	0	; select bank0
  6839  0674  00BD               	movwf	?_sprintf+5
  6840  0675  0021               	movlb	1	; select bank1
  6841  0676  0830               	movf	(ftoa@l+2)^(0+128),w
  6842  0677  0020               	movlb	0	; select bank0
  6843  0678  00BC               	movwf	?_sprintf+4
  6844  0679  0021               	movlb	1	; select bank1
  6845  067A  082F               	movf	(ftoa@l+1)^(0+128),w
  6846  067B  0020               	movlb	0	; select bank0
  6847  067C  00BB               	movwf	?_sprintf+3
  6848  067D  0021               	movlb	1	; select bank1
  6849  067E  082E               	movf	ftoa@l^(0+128),w
  6850  067F  0020               	movlb	0	; select bank0
  6851  0680  00BA               	movwf	?_sprintf+2
  6852  0681  0021               	movlb	1	; select bank1
  6853  0682  082D               	movf	(ftoa@rem+3)^(0+128),w
  6854  0683  0020               	movlb	0	; select bank0
  6855  0684  00C1               	movwf	?_sprintf+9
  6856  0685  0021               	movlb	1	; select bank1
  6857  0686  082C               	movf	(ftoa@rem+2)^(0+128),w
  6858  0687  0020               	movlb	0	; select bank0
  6859  0688  00C0               	movwf	?_sprintf+8
  6860  0689  0021               	movlb	1	; select bank1
  6861  068A  082B               	movf	(ftoa@rem+1)^(0+128),w
  6862  068B  0020               	movlb	0	; select bank0
  6863  068C  00BF               	movwf	?_sprintf+7
  6864  068D  0021               	movlb	1	; select bank1
  6865  068E  082A               	movf	ftoa@rem^(0+128),w
  6866  068F  0020               	movlb	0	; select bank0
  6867  0690  00BE               	movwf	?_sprintf+6
  6868  0691  0021               	movlb	1	; select bank1
  6869  0692  0832               	movf	ftoa@cp^(0+128),w
  6870  0693  3180  202D         	fcall	_sprintf
  6871  0695  3053               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6872  0696  0008               	return
  6873  0697                     __end_of_ftoa:	
  6874                           
  6875                           	psect	text26
  6876  002D                     __ptext26:	
  6877 ;; *************** function _sprintf *****************
  6878 ;; Defined at:
  6879 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  6880 ;; Parameters:    Size  Location     Type
  6881 ;;  sp              1    wreg     PTR unsigned char 
  6882 ;;		 -> ftoa@buf(17), 
  6883 ;;  f               2   24[BANK0 ] PTR const unsigned char 
  6884 ;;		 -> STR_10(11), 
  6885 ;; Auto vars:     Size  Location     Type
  6886 ;;  sp              1   46[BANK0 ] PTR unsigned char 
  6887 ;;		 -> ftoa@buf(17), 
  6888 ;;  val             4   42[BANK0 ] unsigned long 
  6889 ;;  tmpval          4    0        struct .
  6890 ;;  prec            2   49[BANK0 ] int 
  6891 ;;  width           2   47[BANK0 ] int 
  6892 ;;  cp              2    0        PTR const unsigned char 
  6893 ;;  len             2    0        unsigned int 
  6894 ;;  c               1   51[BANK0 ] unsigned char 
  6895 ;;  ap              1   41[BANK0 ] PTR void [1]
  6896 ;;		 -> ?_sprintf(2), 
  6897 ;;  flag            1   40[BANK0 ] unsigned char 
  6898 ;; Return value:  Size  Location     Type
  6899 ;;                  2   24[BANK0 ] int 
  6900 ;; Registers used:
  6901 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6902 ;; Tracked objects:
  6903 ;;		On entry : 0/0
  6904 ;;		On exit  : 0/0
  6905 ;;		Unchanged: 0/0
  6906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6907 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6908 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6909 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6910 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6911 ;;Total ram usage:       28 bytes
  6912 ;; Hardware stack levels used:    1
  6913 ;; Hardware stack levels required when called:    8
  6914 ;; This function calls:
  6915 ;;		___lldiv
  6916 ;;		___llmod
  6917 ;;		___wmul
  6918 ;;		_isdigit
  6919 ;; This function is called by:
  6920 ;;		_ftoa
  6921 ;; This function uses a non-reentrant model
  6922 ;;
  6923                           
  6924                           
  6925                           ;psect for function _sprintf
  6926  002D                     _sprintf:	
  6927                           
  6928                           ;incstack = 0
  6929                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6930                           ;sprintf@sp stored from wreg
  6931  002D  0020               	movlb	0	; select bank0
  6932  002E  00CE               	movwf	sprintf@sp
  6933                           
  6934                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  6935  002F  303A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  6936  0030  00C2               	movwf	??_sprintf
  6937  0031  0842               	movf	??_sprintf,w
  6938  0032  00C9               	movwf	sprintf@ap
  6939  0033                     l2953:	
  6940                           ;doprnt.c: 548: while((c = *f++)) {
  6941                           
  6942  0033  0839               	movf	sprintf@f+1,w
  6943  0034  00C3               	movwf	??_sprintf+1
  6944  0035  0838               	movf	sprintf@f,w
  6945  0036  00C2               	movwf	??_sprintf
  6946  0037  0AB8               	incf	sprintf@f,f
  6947  0038  1903               	skipnz
  6948  0039  0AB9               	incf	sprintf@f+1,f
  6949  003A  0842               	movf	??_sprintf,w
  6950  003B  0084               	movwf	4
  6951  003C  0843               	movf	??_sprintf+1,w
  6952  003D  0085               	movwf	5
  6953  003E  0800               	movf	0,w	;code access
  6954  003F  00C4               	movwf	??_sprintf+2
  6955  0040  0844               	movf	??_sprintf+2,w
  6956  0041  00D3               	movwf	sprintf@c
  6957  0042  0853               	movf	sprintf@c,w
  6958  0043  1903               	btfsc	3,2
  6959  0044  29F4               	goto	l2955
  6960                           
  6961                           ;doprnt.c: 550: if(c != '%')
  6962  0045  3025               	movlw	37
  6963  0046  0653               	xorwf	sprintf@c,w
  6964  0047  1903               	btfsc	3,2
  6965  0048  2856               	goto	l2865
  6966                           
  6967                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  6968  0049  0853               	movf	sprintf@c,w
  6969  004A  00C2               	movwf	??_sprintf
  6970  004B  084E               	movf	sprintf@sp,w
  6971  004C  0086               	movwf	6
  6972  004D  3001               	movlw	1	; select bank2/3
  6973  004E  0087               	movwf	7
  6974  004F  0842               	movf	??_sprintf,w
  6975  0050  0081               	movwf	1
  6976  0051  3001               	movlw	1
  6977  0052  00C2               	movwf	??_sprintf
  6978  0053  0842               	movf	??_sprintf,w
  6979  0054  07CE               	addwf	sprintf@sp,f
  6980                           
  6981                           ;doprnt.c: 554: continue;
  6982  0055  2833               	goto	l2953
  6983  0056                     l2865:	
  6984                           
  6985                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  6986  0056  01CF               	clrf	sprintf@width
  6987  0057  01D0               	clrf	sprintf@width+1
  6988                           
  6989                           ;doprnt.c: 560: flag = 0;
  6990  0058  01C8               	clrf	sprintf@flag
  6991                           
  6992                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  6993  0059  0838               	movf	sprintf@f,w
  6994  005A  0084               	movwf	4
  6995  005B  0839               	movf	sprintf@f+1,w
  6996  005C  0085               	movwf	5
  6997  005D  0800               	movf	0,w	;code access
  6998  005E  3195  25D5  3180   	fcall	_isdigit
  6999  0061  1C03               	btfss	3,0
  7000  0062  2894               	goto	l2879
  7001                           
  7002                           ;doprnt.c: 610: width = 0;
  7003  0063  0020               	movlb	0	; select bank0
  7004  0064  01CF               	clrf	sprintf@width
  7005  0065  01D0               	clrf	sprintf@width+1
  7006  0066                     l2871:	
  7007                           ;doprnt.c: 611: do {
  7008                           
  7009                           
  7010                           ;doprnt.c: 612: width *= 10;
  7011  0066  300A               	movlw	10
  7012  0067  0020               	movlb	0	; select bank0
  7013  0068  00A0               	movwf	___wmul@multiplier
  7014  0069  3000               	movlw	0
  7015  006A  00A1               	movwf	___wmul@multiplier+1
  7016  006B  0850               	movf	sprintf@width+1,w
  7017  006C  00A3               	movwf	___wmul@multiplicand+1
  7018  006D  084F               	movf	sprintf@width,w
  7019  006E  00A2               	movwf	___wmul@multiplicand
  7020  006F  3196  269A  3180   	fcall	___wmul
  7021  0072  0020               	movlb	0	; select bank0
  7022  0073  0821               	movf	?___wmul+1,w
  7023  0074  00D0               	movwf	sprintf@width+1
  7024  0075  0820               	movf	?___wmul,w
  7025  0076  00CF               	movwf	sprintf@width
  7026                           
  7027                           ;doprnt.c: 613: width += *f++ - '0';
  7028  0077  0838               	movf	sprintf@f,w
  7029  0078  0084               	movwf	4
  7030  0079  0839               	movf	sprintf@f+1,w
  7031  007A  0085               	movwf	5
  7032  007B  0800               	movf	0,w	;code access
  7033  007C  3ED0               	addlw	208
  7034  007D  00C2               	movwf	??_sprintf
  7035  007E  30FF               	movlw	255
  7036  007F  1803               	skipnc
  7037  0080  3000               	movlw	0
  7038  0081  00C3               	movwf	??_sprintf+1
  7039  0082  0842               	movf	??_sprintf,w
  7040  0083  07CF               	addwf	sprintf@width,f
  7041  0084  0843               	movf	??_sprintf+1,w
  7042  0085  3DD0               	addwfc	sprintf@width+1,f
  7043  0086  3001               	movlw	1
  7044  0087  07B8               	addwf	sprintf@f,f
  7045  0088  3000               	movlw	0
  7046  0089  3DB9               	addwfc	sprintf@f+1,f
  7047                           
  7048                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  7049  008A  0838               	movf	sprintf@f,w
  7050  008B  0084               	movwf	4
  7051  008C  0839               	movf	sprintf@f+1,w
  7052  008D  0085               	movwf	5
  7053  008E  0800               	movf	0,w	;code access
  7054  008F  3195  25D5  3180   	fcall	_isdigit
  7055  0092  1803               	btfsc	3,0
  7056  0093  2866               	goto	l2871
  7057  0094                     l2879:	
  7058                           
  7059                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  7060  0094  0020               	movlb	0	; select bank0
  7061  0095  0838               	movf	sprintf@f,w
  7062  0096  0084               	movwf	4
  7063  0097  0839               	movf	sprintf@f+1,w
  7064  0098  0085               	movwf	5
  7065  0099  0012               	moviw fsr0++
  7066  009A  3A2E               	xorlw	46
  7067  009B  1D03               	btfss	3,2
  7068  009C  28D2               	goto	l2891
  7069                           
  7070                           ;doprnt.c: 625: f++;
  7071  009D  3001               	movlw	1
  7072  009E  07B8               	addwf	sprintf@f,f
  7073  009F  3000               	movlw	0
  7074  00A0  3DB9               	addwfc	sprintf@f+1,f
  7075                           
  7076                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  7077  00A1  01D1               	clrf	sprintf@prec
  7078  00A2  01D2               	clrf	sprintf@prec+1
  7079  00A3                     l2889:	
  7080                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  7081                           
  7082  00A3  0838               	movf	sprintf@f,w
  7083  00A4  0084               	movwf	4
  7084  00A5  0839               	movf	sprintf@f+1,w
  7085  00A6  0085               	movwf	5
  7086  00A7  0800               	movf	0,w	;code access
  7087  00A8  3195  25D5  3180   	fcall	_isdigit
  7088  00AB  1C03               	btfss	3,0
  7089  00AC  28DD               	goto	l2897
  7090                           
  7091                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  7092  00AD  0020               	movlb	0	; select bank0
  7093  00AE  0838               	movf	sprintf@f,w
  7094  00AF  0084               	movwf	4
  7095  00B0  0839               	movf	sprintf@f+1,w
  7096  00B1  0085               	movwf	5
  7097  00B2  0800               	movf	0,w	;code access
  7098  00B3  00C2               	movwf	??_sprintf
  7099  00B4  01C3               	clrf	??_sprintf+1
  7100  00B5  0852               	movf	sprintf@prec+1,w
  7101  00B6  00A1               	movwf	___wmul@multiplier+1
  7102  00B7  0851               	movf	sprintf@prec,w
  7103  00B8  00A0               	movwf	___wmul@multiplier
  7104  00B9  300A               	movlw	10
  7105  00BA  00A2               	movwf	___wmul@multiplicand
  7106  00BB  3000               	movlw	0
  7107  00BC  00A3               	movwf	___wmul@multiplicand+1
  7108  00BD  3196  269A  3180   	fcall	___wmul
  7109  00C0  0020               	movlb	0	; select bank0
  7110  00C1  0842               	movf	??_sprintf,w
  7111  00C2  0720               	addwf	?___wmul,w
  7112  00C3  00C4               	movwf	??_sprintf+2
  7113  00C4  0843               	movf	??_sprintf+1,w
  7114  00C5  3D21               	addwfc	?___wmul+1,w
  7115  00C6  00C5               	movwf	??_sprintf+3
  7116  00C7  0844               	movf	??_sprintf+2,w
  7117  00C8  3ED0               	addlw	208
  7118  00C9  00D1               	movwf	sprintf@prec
  7119  00CA  30FF               	movlw	255
  7120  00CB  3D45               	addwfc	??_sprintf+3,w
  7121  00CC  00D2               	movwf	sprintf@prec+1
  7122  00CD  3001               	movlw	1
  7123  00CE  07B8               	addwf	sprintf@f,f
  7124  00CF  3000               	movlw	0
  7125  00D0  3DB9               	addwfc	sprintf@f+1,f
  7126  00D1  28A3               	goto	l2889
  7127  00D2                     l2891:	
  7128                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  7129                           
  7130                           
  7131                           ;doprnt.c: 645: prec = 0;
  7132  00D2  0020               	movlb	0	; select bank0
  7133  00D3  01D1               	clrf	sprintf@prec
  7134  00D4  01D2               	clrf	sprintf@prec+1
  7135                           
  7136                           ;doprnt.c: 654: switch(c = *f++) {
  7137                           
  7138                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  7139  00D5  28DD               	goto	l2897
  7140  00D6                     l459:	
  7141                           ;doprnt.c: 660: case 'l':
  7142                           
  7143                           ;doprnt.c: 657: goto alldone;
  7144                           
  7145                           ;doprnt.c: 656: case 0:
  7146                           
  7147                           
  7148                           ;doprnt.c: 662: flag |= 0x10;
  7149  00D6  1648               	bsf	sprintf@flag,4
  7150                           
  7151                           ;doprnt.c: 663: goto loop;
  7152  00D7  28DD               	goto	l2897
  7153  00D8                     l2893:	
  7154                           ;doprnt.c: 836: case 'u':
  7155                           
  7156                           ;doprnt.c: 832: continue;
  7157                           
  7158                           ;doprnt.c: 821: default:
  7159                           
  7160                           
  7161                           ;doprnt.c: 837: flag |= 0xC0;
  7162  00D8  30C0               	movlw	192
  7163  00D9  00C2               	movwf	??_sprintf
  7164  00DA  0842               	movf	??_sprintf,w
  7165  00DB  04C8               	iorwf	sprintf@flag,f
  7166                           
  7167                           ;doprnt.c: 841: }
  7168                           
  7169                           ;doprnt.c: 838: break;
  7170  00DC  28F5               	goto	l462
  7171  00DD                     l2897:	
  7172  00DD  0020               	movlb	0	; select bank0
  7173  00DE  0839               	movf	sprintf@f+1,w
  7174  00DF  00C3               	movwf	??_sprintf+1
  7175  00E0  0838               	movf	sprintf@f,w
  7176  00E1  00C2               	movwf	??_sprintf
  7177  00E2  0AB8               	incf	sprintf@f,f
  7178  00E3  1903               	skipnz
  7179  00E4  0AB9               	incf	sprintf@f+1,f
  7180  00E5  0842               	movf	??_sprintf,w
  7181  00E6  0084               	movwf	4
  7182  00E7  0843               	movf	??_sprintf+1,w
  7183  00E8  0085               	movwf	5
  7184  00E9  0800               	movf	0,w	;code access
  7185  00EA  00D3               	movwf	sprintf@c
  7186                           
  7187                           ; Switch size 1, requested type "space"
  7188                           ; Number of cases is 3, Range of values is 0 to 117
  7189                           ; switch strategies available:
  7190                           ; Name         Instructions Cycles
  7191                           ; simple_byte           10     6 (average)
  7192                           ; direct_byte          242     6 (fixed)
  7193                           ; jumptable            260     6 (fixed)
  7194                           ;	Chosen strategy is simple_byte
  7195  00EB  3A00               	xorlw	0	; case 0
  7196  00EC  1903               	skipnz
  7197  00ED  29F4               	goto	l2955
  7198  00EE  3A6C               	xorlw	108	; case 108
  7199  00EF  1903               	skipnz
  7200  00F0  28D6               	goto	l459
  7201  00F1  3A19               	xorlw	25	; case 117
  7202  00F2  1903               	skipnz
  7203  00F3  28D8               	goto	l2893
  7204  00F4  2833               	goto	l2953
  7205  00F5                     l462:	
  7206                           
  7207                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  7208  00F5  1E48               	btfss	sprintf@flag,4
  7209  00F6  2904               	goto	l2903
  7210                           
  7211                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7212  00F7  0849               	movf	sprintf@ap,w
  7213  00F8  0086               	movwf	6
  7214  00F9  0187               	clrf	7
  7215  00FA  3F40               	moviw [0]fsr1
  7216  00FB  00CA               	movwf	sprintf@val
  7217  00FC  3F41               	moviw [1]fsr1
  7218  00FD  00CB               	movwf	sprintf@val+1
  7219  00FE  3F42               	moviw [2]fsr1
  7220  00FF  00CC               	movwf	sprintf@val+2
  7221  0100  3F43               	moviw [3]fsr1
  7222  0101  00CD               	movwf	sprintf@val+3
  7223  0102  3004               	movlw	4
  7224  0103  2912               	goto	L2
  7225  0104                     l2903:	
  7226                           
  7227                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  7228  0104  0849               	movf	sprintf@ap,w
  7229  0105  0086               	movwf	6
  7230  0106  0187               	clrf	7
  7231  0107  3F40               	moviw [0]fsr1
  7232  0108  00C2               	movwf	??_sprintf
  7233  0109  3F41               	moviw [1]fsr1
  7234  010A  00C3               	movwf	??_sprintf+1
  7235  010B  0842               	movf	??_sprintf,w
  7236  010C  00CA               	movwf	sprintf@val
  7237  010D  0843               	movf	??_sprintf+1,w
  7238  010E  00CB               	movwf	sprintf@val+1
  7239  010F  01CC               	clrf	sprintf@val+2
  7240  0110  01CD               	clrf	sprintf@val+3
  7241  0111  3002               	movlw	2
  7242  0112                     L2:	
  7243  0112  00C2               	movwf	??_sprintf
  7244  0113  0842               	movf	??_sprintf,w
  7245  0114  07C9               	addwf	sprintf@ap,f
  7246                           
  7247                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  7248  0115  0851               	movf	sprintf@prec,w
  7249  0116  0452               	iorwf	sprintf@prec+1,w
  7250  0117  1D03               	btfss	3,2
  7251  0118  2923               	goto	l2913
  7252  0119  084D               	movf	sprintf@val+3,w
  7253  011A  044C               	iorwf	sprintf@val+2,w
  7254  011B  044B               	iorwf	sprintf@val+1,w
  7255  011C  044A               	iorwf	sprintf@val,w
  7256  011D  1D03               	skipz
  7257  011E  2923               	goto	l2913
  7258                           
  7259                           ;doprnt.c: 1310: prec++;
  7260  011F  3001               	movlw	1
  7261  0120  07D1               	addwf	sprintf@prec,f
  7262  0121  3000               	movlw	0
  7263  0122  3DD2               	addwfc	sprintf@prec+1,f
  7264  0123                     l2913:	
  7265                           
  7266                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7267  0123  01D3               	clrf	sprintf@c
  7268  0124  0AD3               	incf	sprintf@c,f
  7269  0125  300A               	movlw	10
  7270  0126  0653               	xorwf	sprintf@c,w
  7271  0127  1903               	btfsc	3,2
  7272  0128  2956               	goto	l2925
  7273  0129                     l2919:	
  7274                           
  7275                           ;doprnt.c: 1325: if(val < dpowers[c])
  7276  0129  0853               	movf	sprintf@c,w
  7277  012A  00C2               	movwf	??_sprintf
  7278  012B  01C3               	clrf	??_sprintf+1
  7279  012C  35C2               	lslf	??_sprintf,f
  7280  012D  0DC3               	rlf	??_sprintf+1,f
  7281  012E  35C2               	lslf	??_sprintf,f
  7282  012F  0DC3               	rlf	??_sprintf+1,f
  7283  0130  3000               	movlw	low (_dpowers| (0+32768))
  7284  0131  0742               	addwf	??_sprintf,w
  7285  0132  0084               	movwf	4
  7286  0133  3090               	movlw	high (_dpowers| (0+32768))
  7287  0134  3D43               	addwfc	??_sprintf+1,w
  7288  0135  0085               	movwf	5
  7289  0136  3F00               	moviw [0]fsr0
  7290  0137  00C4               	movwf	??_sprintf+2
  7291  0138  3F01               	moviw [1]fsr0
  7292  0139  00C5               	movwf	??_sprintf+3
  7293  013A  3F02               	moviw [2]fsr0
  7294  013B  00C6               	movwf	??_sprintf+4
  7295  013C  3F03               	moviw [3]fsr0
  7296  013D  00C7               	movwf	??_sprintf+5
  7297  013E  0847               	movf	??_sprintf+5,w
  7298  013F  024D               	subwf	sprintf@val+3,w
  7299  0140  1D03               	skipz
  7300  0141  294C               	goto	u2855
  7301  0142  0846               	movf	??_sprintf+4,w
  7302  0143  024C               	subwf	sprintf@val+2,w
  7303  0144  1D03               	skipz
  7304  0145  294C               	goto	u2855
  7305  0146  0845               	movf	??_sprintf+3,w
  7306  0147  024B               	subwf	sprintf@val+1,w
  7307  0148  1D03               	skipz
  7308  0149  294C               	goto	u2855
  7309  014A  0844               	movf	??_sprintf+2,w
  7310  014B  024A               	subwf	sprintf@val,w
  7311  014C                     u2855:	
  7312  014C  1C03               	btfss	3,0
  7313  014D  2956               	goto	l2925
  7314                           
  7315                           ;doprnt.c: 1326: break;
  7316  014E  3001               	movlw	1
  7317  014F  00C2               	movwf	??_sprintf
  7318  0150  0842               	movf	??_sprintf,w
  7319  0151  07D3               	addwf	sprintf@c,f
  7320  0152  300A               	movlw	10
  7321  0153  0653               	xorwf	sprintf@c,w
  7322  0154  1D03               	btfss	3,2
  7323  0155  2929               	goto	l2919
  7324  0156                     l2925:	
  7325                           
  7326                           ;doprnt.c: 1358: if(c < prec)
  7327  0156  0852               	movf	sprintf@prec+1,w
  7328  0157  3A80               	xorlw	128
  7329  0158  3C80               	sublw	128
  7330  0159  1D03               	skipz
  7331  015A  295D               	goto	u2875
  7332  015B  0851               	movf	sprintf@prec,w
  7333  015C  0253               	subwf	sprintf@c,w
  7334  015D                     u2875:	
  7335  015D  1803               	skipnc
  7336  015E  2965               	goto	l2929
  7337                           
  7338                           ;doprnt.c: 1359: c = prec;
  7339  015F  0020               	movlb	0	; select bank0
  7340  0160  0851               	movf	sprintf@prec,w
  7341  0161  00C2               	movwf	??_sprintf
  7342  0162  0842               	movf	??_sprintf,w
  7343  0163  00D3               	movwf	sprintf@c
  7344  0164  2979               	goto	l470
  7345  0165                     l2929:	
  7346                           
  7347                           ;doprnt.c: 1360: else if(prec < c)
  7348  0165  0020               	movlb	0	; select bank0
  7349  0166  0852               	movf	sprintf@prec+1,w
  7350  0167  3A80               	xorlw	128
  7351  0168  00C2               	movwf	??_sprintf
  7352  0169  3080               	movlw	128
  7353  016A  0242               	subwf	??_sprintf,w
  7354  016B  1D03               	skipz
  7355  016C  296F               	goto	u2885
  7356  016D  0853               	movf	sprintf@c,w
  7357  016E  0251               	subwf	sprintf@prec,w
  7358  016F                     u2885:	
  7359  016F  1803               	skipnc
  7360  0170  2979               	goto	l470
  7361                           
  7362                           ;doprnt.c: 1361: prec = c;
  7363  0171  0020               	movlb	0	; select bank0
  7364  0172  0853               	movf	sprintf@c,w
  7365  0173  00C2               	movwf	??_sprintf
  7366  0174  01C3               	clrf	??_sprintf+1
  7367  0175  0842               	movf	??_sprintf,w
  7368  0176  00D1               	movwf	sprintf@prec
  7369  0177  0843               	movf	??_sprintf+1,w
  7370  0178  00D2               	movwf	sprintf@prec+1
  7371  0179                     l470:	
  7372                           
  7373                           ;doprnt.c: 1400: if(width > c)
  7374  0179  0020               	movlb	0	; select bank0
  7375  017A  0850               	movf	sprintf@width+1,w
  7376  017B  3A80               	xorlw	128
  7377  017C  3C80               	sublw	128
  7378  017D  1D03               	skipz
  7379  017E  2981               	goto	u2895
  7380  017F  084F               	movf	sprintf@width,w
  7381  0180  0253               	subwf	sprintf@c,w
  7382  0181                     u2895:	
  7383  0181  1803               	skipnc
  7384  0182  298C               	goto	l2935
  7385                           
  7386                           ;doprnt.c: 1401: width -= c;
  7387  0183  0020               	movlb	0	; select bank0
  7388  0184  0853               	movf	sprintf@c,w
  7389  0185  00C2               	movwf	??_sprintf
  7390  0186  01C3               	clrf	??_sprintf+1
  7391  0187  0842               	movf	??_sprintf,w
  7392  0188  02CF               	subwf	sprintf@width,f
  7393  0189  0843               	movf	??_sprintf+1,w
  7394  018A  3BD0               	subwfb	sprintf@width+1,f
  7395  018B  298F               	goto	l2937
  7396  018C                     l2935:	
  7397                           
  7398                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  7399  018C  0020               	movlb	0	; select bank0
  7400  018D  01CF               	clrf	sprintf@width
  7401  018E  01D0               	clrf	sprintf@width+1
  7402  018F                     l2937:	
  7403                           
  7404                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  7405  018F  084F               	movf	sprintf@width,w
  7406  0190  0450               	iorwf	sprintf@width+1,w
  7407  0191  1903               	btfsc	3,2
  7408  0192  29E9               	goto	l2951
  7409                           
  7410                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  7411                           
  7412                           ;doprnt.c: 1448: do
  7413  0193  3020               	movlw	32
  7414  0194  00C2               	movwf	??_sprintf
  7415  0195  084E               	movf	sprintf@sp,w
  7416  0196  0086               	movwf	6
  7417  0197  3001               	movlw	1	; select bank2/3
  7418  0198  0087               	movwf	7
  7419  0199  0842               	movf	??_sprintf,w
  7420  019A  0081               	movwf	1
  7421  019B  3001               	movlw	1
  7422  019C  00C2               	movwf	??_sprintf
  7423  019D  0842               	movf	??_sprintf,w
  7424  019E  07CE               	addwf	sprintf@sp,f
  7425                           
  7426                           ;doprnt.c: 1450: while(--width);
  7427  019F  30FF               	movlw	255
  7428  01A0  07CF               	addwf	sprintf@width,f
  7429  01A1  30FF               	movlw	255
  7430  01A2  3DD0               	addwfc	sprintf@width+1,f
  7431  01A3  298F               	goto	l2937
  7432  01A4                     l2945:	
  7433                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  7434                           
  7435                           
  7436                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  7437  01A4  3000               	movlw	0
  7438  01A5  00B1               	movwf	___llmod@divisor+3
  7439  01A6  3000               	movlw	0
  7440  01A7  00B0               	movwf	___llmod@divisor+2
  7441  01A8  3000               	movlw	0
  7442  01A9  00AF               	movwf	___llmod@divisor+1
  7443  01AA  300A               	movlw	10
  7444  01AB  00AE               	movwf	___llmod@divisor
  7445  01AC  0852               	movf	sprintf@prec+1,w
  7446  01AD  0085               	movwf	5
  7447  01AE  0851               	movf	sprintf@prec,w
  7448  01AF  0084               	movwf	4
  7449  01B0  3584               	lslf	4,f
  7450  01B1  0D85               	rlf	5,f
  7451  01B2  3584               	lslf	4,f
  7452  01B3  0D85               	rlf	5,f
  7453  01B4  3000               	movlw	low (_dpowers| (0+32768))
  7454  01B5  0784               	addwf	4,f
  7455  01B6  3090               	movlw	high (_dpowers| (0+32768))
  7456  01B7  3D85               	addwfc	5,f
  7457  01B8  3F00               	moviw [0]fsr0
  7458  01B9  00A0               	movwf	___lldiv@divisor
  7459  01BA  3F01               	moviw [1]fsr0
  7460  01BB  00A1               	movwf	___lldiv@divisor+1
  7461  01BC  3F02               	moviw [2]fsr0
  7462  01BD  00A2               	movwf	___lldiv@divisor+2
  7463  01BE  3F03               	moviw [3]fsr0
  7464  01BF  00A3               	movwf	___lldiv@divisor+3
  7465  01C0  084D               	movf	sprintf@val+3,w
  7466  01C1  00A7               	movwf	___lldiv@dividend+3
  7467  01C2  084C               	movf	sprintf@val+2,w
  7468  01C3  00A6               	movwf	___lldiv@dividend+2
  7469  01C4  084B               	movf	sprintf@val+1,w
  7470  01C5  00A5               	movwf	___lldiv@dividend+1
  7471  01C6  084A               	movf	sprintf@val,w
  7472  01C7  00A4               	movwf	___lldiv@dividend
  7473  01C8  318B  2396  3180   	fcall	___lldiv
  7474  01CB  0020               	movlb	0	; select bank0
  7475  01CC  0823               	movf	?___lldiv+3,w
  7476  01CD  00B5               	movwf	___llmod@dividend+3
  7477  01CE  0822               	movf	?___lldiv+2,w
  7478  01CF  00B4               	movwf	___llmod@dividend+2
  7479  01D0  0821               	movf	?___lldiv+1,w
  7480  01D1  00B3               	movwf	___llmod@dividend+1
  7481  01D2  0820               	movf	?___lldiv,w
  7482  01D3  00B2               	movwf	___llmod@dividend
  7483  01D4  3189  21EC  3180   	fcall	___llmod
  7484  01D7  0020               	movlb	0	; select bank0
  7485  01D8  082E               	movf	?___llmod,w
  7486  01D9  3E30               	addlw	48
  7487  01DA  00C2               	movwf	??_sprintf
  7488  01DB  0842               	movf	??_sprintf,w
  7489  01DC  00D3               	movwf	sprintf@c
  7490                           
  7491                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7492  01DD  0853               	movf	sprintf@c,w
  7493  01DE  00C2               	movwf	??_sprintf
  7494  01DF  084E               	movf	sprintf@sp,w
  7495  01E0  0086               	movwf	6
  7496  01E1  3001               	movlw	1	; select bank2/3
  7497  01E2  0087               	movwf	7
  7498  01E3  0842               	movf	??_sprintf,w
  7499  01E4  0081               	movwf	1
  7500  01E5  3001               	movlw	1
  7501  01E6  00C2               	movwf	??_sprintf
  7502  01E7  0842               	movf	??_sprintf,w
  7503  01E8  07CE               	addwf	sprintf@sp,f
  7504  01E9                     l2951:	
  7505  01E9  30FF               	movlw	255
  7506  01EA  07D1               	addwf	sprintf@prec,f
  7507  01EB  30FF               	movlw	255
  7508  01EC  3DD2               	addwfc	sprintf@prec+1,f
  7509  01ED  0A51               	incf	sprintf@prec,w
  7510  01EE  1D03               	skipz
  7511  01EF  29A4               	goto	l2945
  7512  01F0  0A52               	incf	sprintf@prec+1,w
  7513  01F1  1903               	btfsc	3,2
  7514  01F2  2833               	goto	l2953
  7515  01F3  29A4               	goto	l2945
  7516  01F4                     l2955:	
  7517                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7518                           
  7519                           
  7520                           ;doprnt.c: 1557: *sp = 0;
  7521  01F4  084E               	movf	sprintf@sp,w
  7522  01F5  0086               	movwf	6
  7523  01F6  3001               	movlw	1	; select bank2/3
  7524  01F7  0087               	movwf	7
  7525  01F8  0181               	clrf	1
  7526  01F9  0008               	return
  7527  01FA                     __end_of_sprintf:	
  7528                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7529                           
  7530                           
  7531                           	psect	text27
  7532  15D5                     __ptext27:	
  7533 ;; *************** function _isdigit *****************
  7534 ;; Defined at:
  7535 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7536 ;; Parameters:    Size  Location     Type
  7537 ;;  c               1    wreg     unsigned char 
  7538 ;; Auto vars:     Size  Location     Type
  7539 ;;  c               1    1[BANK0 ] unsigned char 
  7540 ;; Return value:  Size  Location     Type
  7541 ;;		None               void
  7542 ;; Registers used:
  7543 ;;		wreg, status,2, status,0
  7544 ;; Tracked objects:
  7545 ;;		On entry : 0/0
  7546 ;;		On exit  : 0/0
  7547 ;;		Unchanged: 0/0
  7548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7550 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7552 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7553 ;;Total ram usage:        2 bytes
  7554 ;; Hardware stack levels used:    1
  7555 ;; Hardware stack levels required when called:    7
  7556 ;; This function calls:
  7557 ;;		Nothing
  7558 ;; This function is called by:
  7559 ;;		_sprintf
  7560 ;; This function uses a non-reentrant model
  7561 ;;
  7562                           
  7563                           
  7564                           ;psect for function _isdigit
  7565  15D5                     _isdigit:	
  7566                           
  7567                           ;incstack = 0
  7568                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7569                           ;isdigit@c stored from wreg
  7570  15D5  0020               	movlb	0	; select bank0
  7571  15D6  00A1               	movwf	isdigit@c
  7572  15D7  01A0               	clrf	_isdigit$1813
  7573  15D8  303A               	movlw	58
  7574  15D9  0221               	subwf	isdigit@c,w
  7575  15DA  1803               	skipnc
  7576  15DB  2DE2               	goto	l2707
  7577  15DC  3030               	movlw	48
  7578  15DD  0221               	subwf	isdigit@c,w
  7579  15DE  1C03               	skipc
  7580  15DF  2DE2               	goto	l2707
  7581  15E0  01A0               	clrf	_isdigit$1813
  7582  15E1  0AA0               	incf	_isdigit$1813,f
  7583  15E2                     l2707:	
  7584  15E2  0C20               	rrf	_isdigit$1813,w
  7585  15E3  0008               	return
  7586  15E4                     __end_of_isdigit:	
  7587                           
  7588                           	psect	text28
  7589  169A                     __ptext28:	
  7590 ;; *************** function ___wmul *****************
  7591 ;; Defined at:
  7592 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7595 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7596 ;; Auto vars:     Size  Location     Type
  7597 ;;  product         2    4[BANK0 ] unsigned int 
  7598 ;; Return value:  Size  Location     Type
  7599 ;;                  2    0[BANK0 ] unsigned int 
  7600 ;; Registers used:
  7601 ;;		wreg, status,2, status,0
  7602 ;; Tracked objects:
  7603 ;;		On entry : 0/0
  7604 ;;		On exit  : 0/0
  7605 ;;		Unchanged: 0/0
  7606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7607 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7608 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7610 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7611 ;;Total ram usage:        6 bytes
  7612 ;; Hardware stack levels used:    1
  7613 ;; Hardware stack levels required when called:    7
  7614 ;; This function calls:
  7615 ;;		Nothing
  7616 ;; This function is called by:
  7617 ;;		_sprintf
  7618 ;; This function uses a non-reentrant model
  7619 ;;
  7620                           
  7621                           
  7622                           ;psect for function ___wmul
  7623  169A                     ___wmul:	
  7624                           
  7625                           ;incstack = 0
  7626                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7627  169A  0020               	movlb	0	; select bank0
  7628  169B  01A4               	clrf	___wmul@product
  7629  169C  01A5               	clrf	___wmul@product+1
  7630  169D                     l2713:	
  7631  169D  1C20               	btfss	___wmul@multiplier,0
  7632  169E  2EA3               	goto	l485
  7633  169F  0822               	movf	___wmul@multiplicand,w
  7634  16A0  07A4               	addwf	___wmul@product,f
  7635  16A1  0823               	movf	___wmul@multiplicand+1,w
  7636  16A2  3DA5               	addwfc	___wmul@product+1,f
  7637  16A3                     l485:	
  7638  16A3  3001               	movlw	1
  7639  16A4                     u2375:	
  7640  16A4  35A2               	lslf	___wmul@multiplicand,f
  7641  16A5  0DA3               	rlf	___wmul@multiplicand+1,f
  7642  16A6  0B89               	decfsz	9,f
  7643  16A7  2EA4               	goto	u2375
  7644  16A8  3001               	movlw	1
  7645  16A9                     u2385:	
  7646  16A9  36A1               	lsrf	___wmul@multiplier+1,f
  7647  16AA  0CA0               	rrf	___wmul@multiplier,f
  7648  16AB  0B89               	decfsz	9,f
  7649  16AC  2EA9               	goto	u2385
  7650  16AD  0820               	movf	___wmul@multiplier,w
  7651  16AE  0421               	iorwf	___wmul@multiplier+1,w
  7652  16AF  1D03               	btfss	3,2
  7653  16B0  2E9D               	goto	l2713
  7654  16B1  0825               	movf	___wmul@product+1,w
  7655  16B2  00A1               	movwf	?___wmul+1
  7656  16B3  0824               	movf	___wmul@product,w
  7657  16B4  00A0               	movwf	?___wmul
  7658  16B5  0008               	return
  7659  16B6                     __end_of___wmul:	
  7660                           
  7661                           	psect	text29
  7662  09EC                     __ptext29:	
  7663 ;; *************** function ___llmod *****************
  7664 ;; Defined at:
  7665 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  7666 ;; Parameters:    Size  Location     Type
  7667 ;;  divisor         4   14[BANK0 ] unsigned long 
  7668 ;;  dividend        4   18[BANK0 ] unsigned long 
  7669 ;; Auto vars:     Size  Location     Type
  7670 ;;  counter         1   23[BANK0 ] unsigned char 
  7671 ;; Return value:  Size  Location     Type
  7672 ;;                  4   14[BANK0 ] unsigned long 
  7673 ;; Registers used:
  7674 ;;		wreg, status,2, status,0
  7675 ;; Tracked objects:
  7676 ;;		On entry : 0/0
  7677 ;;		On exit  : 0/0
  7678 ;;		Unchanged: 0/0
  7679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7680 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7681 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7682 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7683 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7684 ;;Total ram usage:       10 bytes
  7685 ;; Hardware stack levels used:    1
  7686 ;; Hardware stack levels required when called:    7
  7687 ;; This function calls:
  7688 ;;		Nothing
  7689 ;; This function is called by:
  7690 ;;		_sprintf
  7691 ;; This function uses a non-reentrant model
  7692 ;;
  7693                           
  7694                           
  7695                           ;psect for function ___llmod
  7696  09EC                     ___llmod:	
  7697                           
  7698                           ;incstack = 0
  7699                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  7700  09EC  0020               	movlb	0	; select bank0
  7701  09ED  0831               	movf	___llmod@divisor+3,w
  7702  09EE  0430               	iorwf	___llmod@divisor+2,w
  7703  09EF  042F               	iorwf	___llmod@divisor+1,w
  7704  09F0  042E               	iorwf	___llmod@divisor,w
  7705  09F1  1903               	skipnz
  7706  09F2  2A26               	goto	l2835
  7707  09F3  01B7               	clrf	___llmod@counter
  7708  09F4  0AB7               	incf	___llmod@counter,f
  7709  09F5                     l2825:	
  7710  09F5  1BB1               	btfsc	___llmod@divisor+3,7
  7711  09F6  2A03               	goto	l2827
  7712  09F7  3001               	movlw	1
  7713  09F8                     u2715:	
  7714  09F8  35AE               	lslf	___llmod@divisor,f
  7715  09F9  0DAF               	rlf	___llmod@divisor+1,f
  7716  09FA  0DB0               	rlf	___llmod@divisor+2,f
  7717  09FB  0DB1               	rlf	___llmod@divisor+3,f
  7718  09FC  0B89               	decfsz	9,f
  7719  09FD  29F8               	goto	u2715
  7720  09FE  3001               	movlw	1
  7721  09FF  00B6               	movwf	??___llmod
  7722  0A00  0836               	movf	??___llmod,w
  7723  0A01  07B7               	addwf	___llmod@counter,f
  7724  0A02  29F5               	goto	l2825
  7725  0A03                     l2827:	
  7726  0A03  0831               	movf	___llmod@divisor+3,w
  7727  0A04  0235               	subwf	___llmod@dividend+3,w
  7728  0A05  1D03               	skipz
  7729  0A06  2A11               	goto	u2735
  7730  0A07  0830               	movf	___llmod@divisor+2,w
  7731  0A08  0234               	subwf	___llmod@dividend+2,w
  7732  0A09  1D03               	skipz
  7733  0A0A  2A11               	goto	u2735
  7734  0A0B  082F               	movf	___llmod@divisor+1,w
  7735  0A0C  0233               	subwf	___llmod@dividend+1,w
  7736  0A0D  1D03               	skipz
  7737  0A0E  2A11               	goto	u2735
  7738  0A0F  082E               	movf	___llmod@divisor,w
  7739  0A10  0232               	subwf	___llmod@dividend,w
  7740  0A11                     u2735:	
  7741  0A11  1C03               	skipc
  7742  0A12  2A1B               	goto	l2831
  7743  0A13  082E               	movf	___llmod@divisor,w
  7744  0A14  02B2               	subwf	___llmod@dividend,f
  7745  0A15  082F               	movf	___llmod@divisor+1,w
  7746  0A16  3BB3               	subwfb	___llmod@dividend+1,f
  7747  0A17  0830               	movf	___llmod@divisor+2,w
  7748  0A18  3BB4               	subwfb	___llmod@dividend+2,f
  7749  0A19  0831               	movf	___llmod@divisor+3,w
  7750  0A1A  3BB5               	subwfb	___llmod@dividend+3,f
  7751  0A1B                     l2831:	
  7752  0A1B  3001               	movlw	1
  7753  0A1C                     u2745:	
  7754  0A1C  36B1               	lsrf	___llmod@divisor+3,f
  7755  0A1D  0CB0               	rrf	___llmod@divisor+2,f
  7756  0A1E  0CAF               	rrf	___llmod@divisor+1,f
  7757  0A1F  0CAE               	rrf	___llmod@divisor,f
  7758  0A20  0B89               	decfsz	9,f
  7759  0A21  2A1C               	goto	u2745
  7760  0A22  3001               	movlw	1
  7761  0A23  02B7               	subwf	___llmod@counter,f
  7762  0A24  1D03               	btfss	3,2
  7763  0A25  2A03               	goto	l2827
  7764  0A26                     l2835:	
  7765  0A26  0835               	movf	___llmod@dividend+3,w
  7766  0A27  00B1               	movwf	?___llmod+3
  7767  0A28  0834               	movf	___llmod@dividend+2,w
  7768  0A29  00B0               	movwf	?___llmod+2
  7769  0A2A  0833               	movf	___llmod@dividend+1,w
  7770  0A2B  00AF               	movwf	?___llmod+1
  7771  0A2C  0832               	movf	___llmod@dividend,w
  7772  0A2D  00AE               	movwf	?___llmod
  7773  0A2E  0008               	return
  7774  0A2F                     __end_of___llmod:	
  7775                           
  7776                           	psect	text30
  7777  0B96                     __ptext30:	
  7778 ;; *************** function ___lldiv *****************
  7779 ;; Defined at:
  7780 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  7781 ;; Parameters:    Size  Location     Type
  7782 ;;  divisor         4    0[BANK0 ] unsigned long 
  7783 ;;  dividend        4    4[BANK0 ] unsigned long 
  7784 ;; Auto vars:     Size  Location     Type
  7785 ;;  quotient        4    9[BANK0 ] unsigned long 
  7786 ;;  counter         1   13[BANK0 ] unsigned char 
  7787 ;; Return value:  Size  Location     Type
  7788 ;;                  4    0[BANK0 ] unsigned long 
  7789 ;; Registers used:
  7790 ;;		wreg, status,2, status,0
  7791 ;; Tracked objects:
  7792 ;;		On entry : 0/0
  7793 ;;		On exit  : 0/0
  7794 ;;		Unchanged: 0/0
  7795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7796 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7797 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7798 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7799 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7800 ;;Total ram usage:       14 bytes
  7801 ;; Hardware stack levels used:    1
  7802 ;; Hardware stack levels required when called:    7
  7803 ;; This function calls:
  7804 ;;		Nothing
  7805 ;; This function is called by:
  7806 ;;		_sprintf
  7807 ;; This function uses a non-reentrant model
  7808 ;;
  7809                           
  7810                           
  7811                           ;psect for function ___lldiv
  7812  0B96                     ___lldiv:	
  7813                           
  7814                           ;incstack = 0
  7815                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7816  0B96  3000               	movlw	0
  7817  0B97  0020               	movlb	0	; select bank0
  7818  0B98  00AC               	movwf	___lldiv@quotient+3
  7819  0B99  3000               	movlw	0
  7820  0B9A  00AB               	movwf	___lldiv@quotient+2
  7821  0B9B  3000               	movlw	0
  7822  0B9C  00AA               	movwf	___lldiv@quotient+1
  7823  0B9D  3000               	movlw	0
  7824  0B9E  00A9               	movwf	___lldiv@quotient
  7825  0B9F  0823               	movf	___lldiv@divisor+3,w
  7826  0BA0  0422               	iorwf	___lldiv@divisor+2,w
  7827  0BA1  0421               	iorwf	___lldiv@divisor+1,w
  7828  0BA2  0420               	iorwf	___lldiv@divisor,w
  7829  0BA3  1903               	skipnz
  7830  0BA4  2BE0               	goto	l2745
  7831  0BA5  01AD               	clrf	___lldiv@counter
  7832  0BA6  0AAD               	incf	___lldiv@counter,f
  7833  0BA7                     l2731:	
  7834  0BA7  1BA3               	btfsc	___lldiv@divisor+3,7
  7835  0BA8  2BB5               	goto	l2733
  7836  0BA9  3001               	movlw	1
  7837  0BAA                     u2415:	
  7838  0BAA  35A0               	lslf	___lldiv@divisor,f
  7839  0BAB  0DA1               	rlf	___lldiv@divisor+1,f
  7840  0BAC  0DA2               	rlf	___lldiv@divisor+2,f
  7841  0BAD  0DA3               	rlf	___lldiv@divisor+3,f
  7842  0BAE  0B89               	decfsz	9,f
  7843  0BAF  2BAA               	goto	u2415
  7844  0BB0  3001               	movlw	1
  7845  0BB1  00A8               	movwf	??___lldiv
  7846  0BB2  0828               	movf	??___lldiv,w
  7847  0BB3  07AD               	addwf	___lldiv@counter,f
  7848  0BB4  2BA7               	goto	l2731
  7849  0BB5                     l2733:	
  7850  0BB5  3001               	movlw	1
  7851  0BB6                     u2435:	
  7852  0BB6  35A9               	lslf	___lldiv@quotient,f
  7853  0BB7  0DAA               	rlf	___lldiv@quotient+1,f
  7854  0BB8  0DAB               	rlf	___lldiv@quotient+2,f
  7855  0BB9  0DAC               	rlf	___lldiv@quotient+3,f
  7856  0BBA  0B89               	decfsz	9,f
  7857  0BBB  2BB6               	goto	u2435
  7858  0BBC  0823               	movf	___lldiv@divisor+3,w
  7859  0BBD  0227               	subwf	___lldiv@dividend+3,w
  7860  0BBE  1D03               	skipz
  7861  0BBF  2BCA               	goto	u2445
  7862  0BC0  0822               	movf	___lldiv@divisor+2,w
  7863  0BC1  0226               	subwf	___lldiv@dividend+2,w
  7864  0BC2  1D03               	skipz
  7865  0BC3  2BCA               	goto	u2445
  7866  0BC4  0821               	movf	___lldiv@divisor+1,w
  7867  0BC5  0225               	subwf	___lldiv@dividend+1,w
  7868  0BC6  1D03               	skipz
  7869  0BC7  2BCA               	goto	u2445
  7870  0BC8  0820               	movf	___lldiv@divisor,w
  7871  0BC9  0224               	subwf	___lldiv@dividend,w
  7872  0BCA                     u2445:	
  7873  0BCA  1C03               	skipc
  7874  0BCB  2BD5               	goto	l2741
  7875  0BCC  0820               	movf	___lldiv@divisor,w
  7876  0BCD  02A4               	subwf	___lldiv@dividend,f
  7877  0BCE  0821               	movf	___lldiv@divisor+1,w
  7878  0BCF  3BA5               	subwfb	___lldiv@dividend+1,f
  7879  0BD0  0822               	movf	___lldiv@divisor+2,w
  7880  0BD1  3BA6               	subwfb	___lldiv@dividend+2,f
  7881  0BD2  0823               	movf	___lldiv@divisor+3,w
  7882  0BD3  3BA7               	subwfb	___lldiv@dividend+3,f
  7883  0BD4  1429               	bsf	___lldiv@quotient,0
  7884  0BD5                     l2741:	
  7885  0BD5  3001               	movlw	1
  7886  0BD6                     u2455:	
  7887  0BD6  36A3               	lsrf	___lldiv@divisor+3,f
  7888  0BD7  0CA2               	rrf	___lldiv@divisor+2,f
  7889  0BD8  0CA1               	rrf	___lldiv@divisor+1,f
  7890  0BD9  0CA0               	rrf	___lldiv@divisor,f
  7891  0BDA  0B89               	decfsz	9,f
  7892  0BDB  2BD6               	goto	u2455
  7893  0BDC  3001               	movlw	1
  7894  0BDD  02AD               	subwf	___lldiv@counter,f
  7895  0BDE  1D03               	btfss	3,2
  7896  0BDF  2BB5               	goto	l2733
  7897  0BE0                     l2745:	
  7898  0BE0  082C               	movf	___lldiv@quotient+3,w
  7899  0BE1  00A3               	movwf	?___lldiv+3
  7900  0BE2  082B               	movf	___lldiv@quotient+2,w
  7901  0BE3  00A2               	movwf	?___lldiv+2
  7902  0BE4  082A               	movf	___lldiv@quotient+1,w
  7903  0BE5  00A1               	movwf	?___lldiv+1
  7904  0BE6  0829               	movf	___lldiv@quotient,w
  7905  0BE7  00A0               	movwf	?___lldiv
  7906  0BE8  0008               	return
  7907  0BE9                     __end_of___lldiv:	
  7908                           
  7909                           	psect	text31
  7910  0856                     __ptext31:	
  7911 ;; *************** function ___lltoft *****************
  7912 ;; Defined at:
  7913 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  7914 ;; Parameters:    Size  Location     Type
  7915 ;;  c               4    8[BANK0 ] unsigned long 
  7916 ;; Auto vars:     Size  Location     Type
  7917 ;;  exp             1   13[BANK0 ] unsigned char 
  7918 ;; Return value:  Size  Location     Type
  7919 ;;                  3    8[BANK0 ] float 
  7920 ;; Registers used:
  7921 ;;		wreg, status,2, status,0, pclath, cstack
  7922 ;; Tracked objects:
  7923 ;;		On entry : 0/0
  7924 ;;		On exit  : 0/0
  7925 ;;		Unchanged: 0/0
  7926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7927 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7928 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7929 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7930 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7931 ;;Total ram usage:        6 bytes
  7932 ;; Hardware stack levels used:    1
  7933 ;; Hardware stack levels required when called:    8
  7934 ;; This function calls:
  7935 ;;		___ftpack
  7936 ;; This function is called by:
  7937 ;;		_ftoa
  7938 ;; This function uses a non-reentrant model
  7939 ;;
  7940                           
  7941                           
  7942                           ;psect for function ___lltoft
  7943  0856                     ___lltoft:	
  7944                           
  7945                           ;incstack = 0
  7946                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  7947  0856  308E               	movlw	142
  7948  0857  0020               	movlb	0	; select bank0
  7949  0858  00AC               	movwf	??___lltoft
  7950  0859  082C               	movf	??___lltoft,w
  7951  085A  00AD               	movwf	___lltoft@exp
  7952  085B                     l3091:	
  7953  085B  30FF               	movlw	255
  7954  085C  052B               	andwf	___lltoft@c+3,w
  7955  085D  1903               	btfsc	3,2
  7956  085E  286B               	goto	l3093
  7957  085F  3001               	movlw	1
  7958  0860                     u3215:	
  7959  0860  36AB               	lsrf	___lltoft@c+3,f
  7960  0861  0CAA               	rrf	___lltoft@c+2,f
  7961  0862  0CA9               	rrf	___lltoft@c+1,f
  7962  0863  0CA8               	rrf	___lltoft@c,f
  7963  0864  0B89               	decfsz	9,f
  7964  0865  2860               	goto	u3215
  7965  0866  3001               	movlw	1
  7966  0867  00AC               	movwf	??___lltoft
  7967  0868  082C               	movf	??___lltoft,w
  7968  0869  07AD               	addwf	___lltoft@exp,f
  7969  086A  285B               	goto	l3091
  7970  086B                     l3093:	
  7971  086B  0828               	movf	___lltoft@c,w
  7972  086C  00A0               	movwf	___ftpack@arg
  7973  086D  0829               	movf	___lltoft@c+1,w
  7974  086E  00A1               	movwf	___ftpack@arg+1
  7975  086F  082A               	movf	___lltoft@c+2,w
  7976  0870  00A2               	movwf	___ftpack@arg+2
  7977  0871  082D               	movf	___lltoft@exp,w
  7978  0872  00AC               	movwf	??___lltoft
  7979  0873  082C               	movf	??___lltoft,w
  7980  0874  00A3               	movwf	___ftpack@exp
  7981  0875  01A4               	clrf	___ftpack@sign
  7982  0876  318C  2492         	fcall	___ftpack
  7983  0878  0020               	movlb	0	; select bank0
  7984  0879  0820               	movf	?___ftpack,w
  7985  087A  00A8               	movwf	?___lltoft
  7986  087B  0821               	movf	?___ftpack+1,w
  7987  087C  00A9               	movwf	?___lltoft+1
  7988  087D  0822               	movf	?___ftpack+2,w
  7989  087E  00AA               	movwf	?___lltoft+2
  7990  087F  0008               	return
  7991  0880                     __end_of___lltoft:	
  7992                           
  7993                           	psect	text32
  7994  0D5F                     __ptext32:	
  7995 ;; *************** function ___fttol *****************
  7996 ;; Defined at:
  7997 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  7998 ;; Parameters:    Size  Location     Type
  7999 ;;  f1              3   71[BANK0 ] float 
  8000 ;; Auto vars:     Size  Location     Type
  8001 ;;  lval            4    1[BANK1 ] unsigned long 
  8002 ;;  exp1            1    5[BANK1 ] unsigned char 
  8003 ;;  sign1           1    0[BANK1 ] unsigned char 
  8004 ;; Return value:  Size  Location     Type
  8005 ;;                  4   71[BANK0 ] long 
  8006 ;; Registers used:
  8007 ;;		wreg, status,2, status,0
  8008 ;; Tracked objects:
  8009 ;;		On entry : 0/0
  8010 ;;		On exit  : 0/0
  8011 ;;		Unchanged: 0/0
  8012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8013 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8014 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  8015 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8016 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
  8017 ;;Total ram usage:       14 bytes
  8018 ;; Hardware stack levels used:    1
  8019 ;; Hardware stack levels required when called:    7
  8020 ;; This function calls:
  8021 ;;		Nothing
  8022 ;; This function is called by:
  8023 ;;		_ftoa
  8024 ;; This function uses a non-reentrant model
  8025 ;;
  8026                           
  8027                           
  8028                           ;psect for function ___fttol
  8029  0D5F                     ___fttol:	
  8030                           
  8031                           ;incstack = 0
  8032                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8033  0D5F  0020               	movlb	0	; select bank0
  8034  0D60  0867               	movf	___fttol@f1,w
  8035  0D61  00EB               	movwf	??___fttol
  8036  0D62  0868               	movf	___fttol@f1+1,w
  8037  0D63  00EC               	movwf	??___fttol+1
  8038  0D64  0869               	movf	___fttol@f1+2,w
  8039  0D65  00ED               	movwf	??___fttol+2
  8040  0D66  1003               	clrc
  8041  0D67  0D6C               	rlf	??___fttol+1,w
  8042  0D68  0D6D               	rlf	??___fttol+2,w
  8043  0D69  00EE               	movwf	??___fttol+3
  8044  0D6A  086E               	movf	??___fttol+3,w
  8045  0D6B  0021               	movlb	1	; select bank1
  8046  0D6C  00A5               	movwf	___fttol@exp1^(0+128)
  8047  0D6D  0825               	movf	___fttol@exp1^(0+128),w
  8048  0D6E  1D03               	btfss	3,2
  8049  0D6F  2D7A               	goto	l3051
  8050  0D70  3000               	movlw	0
  8051  0D71  0020               	movlb	0	; select bank0
  8052  0D72  00EA               	movwf	?___fttol+3
  8053  0D73  3000               	movlw	0
  8054  0D74  00E9               	movwf	?___fttol+2
  8055  0D75  3000               	movlw	0
  8056  0D76  00E8               	movwf	?___fttol+1
  8057  0D77  3000               	movlw	0
  8058  0D78  00E7               	movwf	?___fttol
  8059  0D79  0008               	return
  8060  0D7A                     l3051:	
  8061  0D7A  0020               	movlb	0	; select bank0
  8062  0D7B  0867               	movf	___fttol@f1,w
  8063  0D7C  00EB               	movwf	??___fttol
  8064  0D7D  0868               	movf	___fttol@f1+1,w
  8065  0D7E  00EC               	movwf	??___fttol+1
  8066  0D7F  0869               	movf	___fttol@f1+2,w
  8067  0D80  00ED               	movwf	??___fttol+2
  8068  0D81  3017               	movlw	23
  8069  0D82                     u3125:	
  8070  0D82  36ED               	lsrf	??___fttol+2,f
  8071  0D83  0CEC               	rrf	??___fttol+1,f
  8072  0D84  0CEB               	rrf	??___fttol,f
  8073  0D85  0B89               	decfsz	9,f
  8074  0D86  2D82               	goto	u3125
  8075  0D87  086B               	movf	??___fttol,w
  8076  0D88  00EE               	movwf	??___fttol+3
  8077  0D89  086E               	movf	??___fttol+3,w
  8078  0D8A  0021               	movlb	1	; select bank1
  8079  0D8B  00A0               	movwf	___fttol@sign1^(0+128)
  8080  0D8C  0020               	movlb	0	; select bank0
  8081  0D8D  17E8               	bsf	___fttol@f1+1,7
  8082  0D8E  30FF               	movlw	255
  8083  0D8F  05E7               	andwf	___fttol@f1,f
  8084  0D90  30FF               	movlw	255
  8085  0D91  05E8               	andwf	___fttol@f1+1,f
  8086  0D92  3000               	movlw	0
  8087  0D93  05E9               	andwf	___fttol@f1+2,f
  8088  0D94  0867               	movf	___fttol@f1,w
  8089  0D95  0021               	movlb	1	; select bank1
  8090  0D96  00A1               	movwf	___fttol@lval^(0+128)
  8091  0D97  0020               	movlb	0	; select bank0
  8092  0D98  0868               	movf	___fttol@f1+1,w
  8093  0D99  0021               	movlb	1	; select bank1
  8094  0D9A  00A2               	movwf	(___fttol@lval^(0+128)+1)
  8095  0D9B  0020               	movlb	0	; select bank0
  8096  0D9C  0869               	movf	___fttol@f1+2,w
  8097  0D9D  0021               	movlb	1	; select bank1
  8098  0D9E  00A3               	movwf	(___fttol@lval^(0+128)+2)
  8099  0D9F  01A4               	clrf	(___fttol@lval^(0+128)+3)
  8100  0DA0  308E               	movlw	142
  8101  0DA1  02A5               	subwf	___fttol@exp1^(0+128),f
  8102  0DA2  1FA5               	btfss	___fttol@exp1^(0+128),7
  8103  0DA3  2DC4               	goto	l3071
  8104  0DA4  0825               	movf	___fttol@exp1^(0+128),w
  8105  0DA5  3A80               	xorlw	128
  8106  0DA6  3E8F               	addlw	143
  8107  0DA7  1803               	skipnc
  8108  0DA8  2DB3               	goto	l3069
  8109  0DA9  3000               	movlw	0
  8110  0DAA  0020               	movlb	0	; select bank0
  8111  0DAB  00EA               	movwf	?___fttol+3
  8112  0DAC  3000               	movlw	0
  8113  0DAD  00E9               	movwf	?___fttol+2
  8114  0DAE  3000               	movlw	0
  8115  0DAF  00E8               	movwf	?___fttol+1
  8116  0DB0  3000               	movlw	0
  8117  0DB1  00E7               	movwf	?___fttol
  8118  0DB2  0008               	return
  8119  0DB3                     l3069:	
  8120  0DB3  3001               	movlw	1
  8121  0DB4                     u3155:	
  8122  0DB4  0021               	movlb	1	; select bank1
  8123  0DB5  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
  8124  0DB6  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
  8125  0DB7  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
  8126  0DB8  0CA1               	rrf	___fttol@lval^(0+128),f
  8127  0DB9  0B89               	decfsz	9,f
  8128  0DBA  2DB4               	goto	u3155
  8129  0DBB  3001               	movlw	1
  8130  0DBC  0020               	movlb	0	; select bank0
  8131  0DBD  00EB               	movwf	??___fttol
  8132  0DBE  086B               	movf	??___fttol,w
  8133  0DBF  0021               	movlb	1	; select bank1
  8134  0DC0  07A5               	addwf	___fttol@exp1^(0+128),f
  8135  0DC1  1903               	btfsc	3,2
  8136  0DC2  2DE0               	goto	l3079
  8137  0DC3  2DB3               	goto	l3069
  8138  0DC4                     l3071:	
  8139  0DC4  3018               	movlw	24
  8140  0DC5  0225               	subwf	___fttol@exp1^(0+128),w
  8141  0DC6  1C03               	skipc
  8142  0DC7  2DDC               	goto	l779
  8143  0DC8  3000               	movlw	0
  8144  0DC9  0020               	movlb	0	; select bank0
  8145  0DCA  00EA               	movwf	?___fttol+3
  8146  0DCB  3000               	movlw	0
  8147  0DCC  00E9               	movwf	?___fttol+2
  8148  0DCD  3000               	movlw	0
  8149  0DCE  00E8               	movwf	?___fttol+1
  8150  0DCF  3000               	movlw	0
  8151  0DD0  00E7               	movwf	?___fttol
  8152  0DD1  0008               	return
  8153  0DD2                     l3077:	
  8154  0DD2  3001               	movlw	1
  8155  0DD3                     u3185:	
  8156  0DD3  0021               	movlb	1	; select bank1
  8157  0DD4  35A1               	lslf	___fttol@lval^(0+128),f
  8158  0DD5  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
  8159  0DD6  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
  8160  0DD7  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
  8161  0DD8  0B89               	decfsz	9,f
  8162  0DD9  2DD3               	goto	u3185
  8163  0DDA  3001               	movlw	1
  8164  0DDB  02A5               	subwf	___fttol@exp1^(0+128),f
  8165  0DDC                     l779:	
  8166  0DDC  0021               	movlb	1	; select bank1
  8167  0DDD  0825               	movf	___fttol@exp1^(0+128),w
  8168  0DDE  1D03               	btfss	3,2
  8169  0DDF  2DD2               	goto	l3077
  8170  0DE0                     l3079:	
  8171  0DE0  0820               	movf	___fttol@sign1^(0+128),w
  8172  0DE1  1903               	btfsc	3,2
  8173  0DE2  2DEE               	goto	l3083
  8174  0DE3  09A1               	comf	___fttol@lval^(0+128),f
  8175  0DE4  09A2               	comf	(___fttol@lval+1)^(0+128),f
  8176  0DE5  09A3               	comf	(___fttol@lval+2)^(0+128),f
  8177  0DE6  09A4               	comf	(___fttol@lval+3)^(0+128),f
  8178  0DE7  0AA1               	incf	___fttol@lval^(0+128),f
  8179  0DE8  1903               	skipnz
  8180  0DE9  0AA2               	incf	(___fttol@lval+1)^(0+128),f
  8181  0DEA  1903               	skipnz
  8182  0DEB  0AA3               	incf	(___fttol@lval+2)^(0+128),f
  8183  0DEC  1903               	skipnz
  8184  0DED  0AA4               	incf	(___fttol@lval+3)^(0+128),f
  8185  0DEE                     l3083:	
  8186  0DEE  0824               	movf	(___fttol@lval+3)^(0+128),w
  8187  0DEF  0020               	movlb	0	; select bank0
  8188  0DF0  00EA               	movwf	?___fttol+3
  8189  0DF1  0021               	movlb	1	; select bank1
  8190  0DF2  0823               	movf	(___fttol@lval+2)^(0+128),w
  8191  0DF3  0020               	movlb	0	; select bank0
  8192  0DF4  00E9               	movwf	?___fttol+2
  8193  0DF5  0021               	movlb	1	; select bank1
  8194  0DF6  0822               	movf	(___fttol@lval+1)^(0+128),w
  8195  0DF7  0020               	movlb	0	; select bank0
  8196  0DF8  00E8               	movwf	?___fttol+1
  8197  0DF9  0021               	movlb	1	; select bank1
  8198  0DFA  0821               	movf	___fttol@lval^(0+128),w
  8199  0DFB  0020               	movlb	0	; select bank0
  8200  0DFC  00E7               	movwf	?___fttol
  8201  0DFD  0008               	return
  8202  0DFE                     __end_of___fttol:	
  8203                           
  8204                           	psect	text33
  8205  16EE                     __ptext33:	
  8206 ;; *************** function ___ftsub *****************
  8207 ;; Defined at:
  8208 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  8209 ;; Parameters:    Size  Location     Type
  8210 ;;  f2              3   27[BANK0 ] float 
  8211 ;;  f1              3   30[BANK0 ] float 
  8212 ;; Auto vars:     Size  Location     Type
  8213 ;;		None
  8214 ;; Return value:  Size  Location     Type
  8215 ;;                  3   27[BANK0 ] float 
  8216 ;; Registers used:
  8217 ;;		wreg, status,2, status,0, pclath, cstack
  8218 ;; Tracked objects:
  8219 ;;		On entry : 0/0
  8220 ;;		On exit  : 0/0
  8221 ;;		Unchanged: 0/0
  8222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8223 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;Total ram usage:        6 bytes
  8228 ;; Hardware stack levels used:    1
  8229 ;; Hardware stack levels required when called:    9
  8230 ;; This function calls:
  8231 ;;		___ftadd
  8232 ;; This function is called by:
  8233 ;;		_ftoa
  8234 ;; This function uses a non-reentrant model
  8235 ;;
  8236                           
  8237                           
  8238                           ;psect for function ___ftsub
  8239  16EE                     ___ftsub:	
  8240                           
  8241                           ;incstack = 0
  8242                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  8243  16EE  0020               	movlb	0	; select bank0
  8244  16EF  083D               	movf	___ftsub@f2+2,w
  8245  16F0  043C               	iorwf	___ftsub@f2+1,w
  8246  16F1  043B               	iorwf	___ftsub@f2,w
  8247  16F2  1903               	skipnz
  8248  16F3  2EF6               	goto	l3041
  8249  16F4  3080               	movlw	128
  8250  16F5  06BD               	xorwf	___ftsub@f2+2,f
  8251  16F6                     l3041:	
  8252  16F6  083E               	movf	___ftsub@f1,w
  8253  16F7  00AE               	movwf	___ftadd@f1
  8254  16F8  083F               	movf	___ftsub@f1+1,w
  8255  16F9  00AF               	movwf	___ftadd@f1+1
  8256  16FA  0840               	movf	___ftsub@f1+2,w
  8257  16FB  00B0               	movwf	___ftadd@f1+2
  8258  16FC  083B               	movf	___ftsub@f2,w
  8259  16FD  00B1               	movwf	___ftadd@f2
  8260  16FE  083C               	movf	___ftsub@f2+1,w
  8261  16FF  00B2               	movwf	___ftadd@f2+1
  8262  1700  083D               	movf	___ftsub@f2+2,w
  8263  1701  00B3               	movwf	___ftadd@f2+2
  8264  1702  3184  24AF         	fcall	___ftadd
  8265  1704  0020               	movlb	0	; select bank0
  8266  1705  082E               	movf	?___ftadd,w
  8267  1706  00BB               	movwf	?___ftsub
  8268  1707  082F               	movf	?___ftadd+1,w
  8269  1708  00BC               	movwf	?___ftsub+1
  8270  1709  0830               	movf	?___ftadd+2,w
  8271  170A  00BD               	movwf	?___ftsub+2
  8272  170B  0008               	return
  8273  170C                     __end_of___ftsub:	
  8274                           
  8275                           	psect	text34
  8276  15BF                     __ptext34:	
  8277 ;; *************** function ___ftneg *****************
  8278 ;; Defined at:
  8279 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  8280 ;; Parameters:    Size  Location     Type
  8281 ;;  f1              3   55[BANK0 ] float 
  8282 ;; Auto vars:     Size  Location     Type
  8283 ;;		None
  8284 ;; Return value:  Size  Location     Type
  8285 ;;                  3   55[BANK0 ] float 
  8286 ;; Registers used:
  8287 ;;		wreg
  8288 ;; Tracked objects:
  8289 ;;		On entry : 0/0
  8290 ;;		On exit  : 0/0
  8291 ;;		Unchanged: 0/0
  8292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8293 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;Total ram usage:        3 bytes
  8298 ;; Hardware stack levels used:    1
  8299 ;; Hardware stack levels required when called:    7
  8300 ;; This function calls:
  8301 ;;		Nothing
  8302 ;; This function is called by:
  8303 ;;		_loop
  8304 ;;		_ftoa
  8305 ;; This function uses a non-reentrant model
  8306 ;;
  8307                           
  8308                           
  8309                           ;psect for function ___ftneg
  8310  15BF                     ___ftneg:	
  8311                           
  8312                           ;incstack = 0
  8313                           ; Regs used in ___ftneg: [wreg]
  8314  15BF  0020               	movlb	0	; select bank0
  8315  15C0  0859               	movf	___ftneg@f1+2,w
  8316  15C1  0458               	iorwf	___ftneg@f1+1,w
  8317  15C2  0457               	iorwf	___ftneg@f1,w
  8318  15C3  1903               	skipnz
  8319  15C4  0008               	return
  8320  15C5  3080               	movlw	128
  8321  15C6  06D9               	xorwf	___ftneg@f1+2,f
  8322  15C7  0008               	return
  8323  15C8                     __end_of___ftneg:	
  8324                           
  8325                           	psect	text35
  8326  0F4C                     __ptext35:	
  8327 ;; *************** function ___ftmul *****************
  8328 ;; Defined at:
  8329 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  8330 ;; Parameters:    Size  Location     Type
  8331 ;;  f1              3   55[BANK0 ] float 
  8332 ;;  f2              3   58[BANK0 ] float 
  8333 ;; Auto vars:     Size  Location     Type
  8334 ;;  f3_as_produc    3   66[BANK0 ] unsigned um
  8335 ;;  sign            1   70[BANK0 ] unsigned char 
  8336 ;;  cntr            1   69[BANK0 ] unsigned char 
  8337 ;;  exp             1   65[BANK0 ] unsigned char 
  8338 ;; Return value:  Size  Location     Type
  8339 ;;                  3   55[BANK0 ] float 
  8340 ;; Registers used:
  8341 ;;		wreg, status,2, status,0, pclath, cstack
  8342 ;; Tracked objects:
  8343 ;;		On entry : 0/0
  8344 ;;		On exit  : 0/0
  8345 ;;		Unchanged: 0/0
  8346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8347 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8348 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8349 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;Total ram usage:       16 bytes
  8352 ;; Hardware stack levels used:    1
  8353 ;; Hardware stack levels required when called:    8
  8354 ;; This function calls:
  8355 ;;		___ftpack
  8356 ;; This function is called by:
  8357 ;;		_loop
  8358 ;;		_ftoa
  8359 ;; This function uses a non-reentrant model
  8360 ;;
  8361                           
  8362                           
  8363                           ;psect for function ___ftmul
  8364  0F4C                     ___ftmul:	
  8365                           
  8366                           ;incstack = 0
  8367                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8368  0F4C  0020               	movlb	0	; select bank0
  8369  0F4D  0857               	movf	___ftmul@f1,w
  8370  0F4E  00DD               	movwf	??___ftmul
  8371  0F4F  0858               	movf	___ftmul@f1+1,w
  8372  0F50  00DE               	movwf	??___ftmul+1
  8373  0F51  0859               	movf	___ftmul@f1+2,w
  8374  0F52  00DF               	movwf	??___ftmul+2
  8375  0F53  1003               	clrc
  8376  0F54  0D5E               	rlf	??___ftmul+1,w
  8377  0F55  0D5F               	rlf	??___ftmul+2,w
  8378  0F56  00E0               	movwf	??___ftmul+3
  8379  0F57  0860               	movf	??___ftmul+3,w
  8380  0F58  00E1               	movwf	___ftmul@exp
  8381  0F59  0861               	movf	___ftmul@exp,w
  8382  0F5A  1D03               	btfss	3,2
  8383  0F5B  2F63               	goto	l2985
  8384  0F5C  3000               	movlw	0
  8385  0F5D  00D7               	movwf	?___ftmul
  8386  0F5E  3000               	movlw	0
  8387  0F5F  00D8               	movwf	?___ftmul+1
  8388  0F60  3000               	movlw	0
  8389  0F61  00D9               	movwf	?___ftmul+2
  8390  0F62  0008               	return
  8391  0F63                     l2985:	
  8392  0F63  085A               	movf	___ftmul@f2,w
  8393  0F64  00DD               	movwf	??___ftmul
  8394  0F65  085B               	movf	___ftmul@f2+1,w
  8395  0F66  00DE               	movwf	??___ftmul+1
  8396  0F67  085C               	movf	___ftmul@f2+2,w
  8397  0F68  00DF               	movwf	??___ftmul+2
  8398  0F69  1003               	clrc
  8399  0F6A  0D5E               	rlf	??___ftmul+1,w
  8400  0F6B  0D5F               	rlf	??___ftmul+2,w
  8401  0F6C  00E0               	movwf	??___ftmul+3
  8402  0F6D  0860               	movf	??___ftmul+3,w
  8403  0F6E  00E6               	movwf	___ftmul@sign
  8404  0F6F  0866               	movf	___ftmul@sign,w
  8405  0F70  1D03               	btfss	3,2
  8406  0F71  2F79               	goto	l2991
  8407  0F72  3000               	movlw	0
  8408  0F73  00D7               	movwf	?___ftmul
  8409  0F74  3000               	movlw	0
  8410  0F75  00D8               	movwf	?___ftmul+1
  8411  0F76  3000               	movlw	0
  8412  0F77  00D9               	movwf	?___ftmul+2
  8413  0F78  0008               	return
  8414  0F79                     l2991:	
  8415  0F79  0866               	movf	___ftmul@sign,w
  8416  0F7A  3E7B               	addlw	123
  8417  0F7B  00DD               	movwf	??___ftmul
  8418  0F7C  085D               	movf	??___ftmul,w
  8419  0F7D  07E1               	addwf	___ftmul@exp,f
  8420  0F7E  0857               	movf	___ftmul@f1,w
  8421  0F7F  00DD               	movwf	??___ftmul
  8422  0F80  0858               	movf	___ftmul@f1+1,w
  8423  0F81  00DE               	movwf	??___ftmul+1
  8424  0F82  0859               	movf	___ftmul@f1+2,w
  8425  0F83  00DF               	movwf	??___ftmul+2
  8426  0F84  3010               	movlw	16
  8427  0F85                     u2995:	
  8428  0F85  36DF               	lsrf	??___ftmul+2,f
  8429  0F86  0CDE               	rrf	??___ftmul+1,f
  8430  0F87  0CDD               	rrf	??___ftmul,f
  8431  0F88  0B89               	decfsz	9,f
  8432  0F89  2F85               	goto	u2995
  8433  0F8A  085D               	movf	??___ftmul,w
  8434  0F8B  00E0               	movwf	??___ftmul+3
  8435  0F8C  0860               	movf	??___ftmul+3,w
  8436  0F8D  00E6               	movwf	___ftmul@sign
  8437  0F8E  085A               	movf	___ftmul@f2,w
  8438  0F8F  00DD               	movwf	??___ftmul
  8439  0F90  085B               	movf	___ftmul@f2+1,w
  8440  0F91  00DE               	movwf	??___ftmul+1
  8441  0F92  085C               	movf	___ftmul@f2+2,w
  8442  0F93  00DF               	movwf	??___ftmul+2
  8443  0F94  3010               	movlw	16
  8444  0F95                     u3005:	
  8445  0F95  36DF               	lsrf	??___ftmul+2,f
  8446  0F96  0CDE               	rrf	??___ftmul+1,f
  8447  0F97  0CDD               	rrf	??___ftmul,f
  8448  0F98  0B89               	decfsz	9,f
  8449  0F99  2F95               	goto	u3005
  8450  0F9A  085D               	movf	??___ftmul,w
  8451  0F9B  00E0               	movwf	??___ftmul+3
  8452  0F9C  0860               	movf	??___ftmul+3,w
  8453  0F9D  06E6               	xorwf	___ftmul@sign,f
  8454  0F9E  3080               	movlw	128
  8455  0F9F  00DD               	movwf	??___ftmul
  8456  0FA0  085D               	movf	??___ftmul,w
  8457  0FA1  05E6               	andwf	___ftmul@sign,f
  8458  0FA2  17D8               	bsf	___ftmul@f1+1,7
  8459  0FA3  17DB               	bsf	___ftmul@f2+1,7
  8460  0FA4  30FF               	movlw	255
  8461  0FA5  05DA               	andwf	___ftmul@f2,f
  8462  0FA6  30FF               	movlw	255
  8463  0FA7  05DB               	andwf	___ftmul@f2+1,f
  8464  0FA8  3000               	movlw	0
  8465  0FA9  05DC               	andwf	___ftmul@f2+2,f
  8466  0FAA  3000               	movlw	0
  8467  0FAB  00E2               	movwf	___ftmul@f3_as_product
  8468  0FAC  3000               	movlw	0
  8469  0FAD  00E3               	movwf	___ftmul@f3_as_product+1
  8470  0FAE  3000               	movlw	0
  8471  0FAF  00E4               	movwf	___ftmul@f3_as_product+2
  8472  0FB0  3007               	movlw	7
  8473  0FB1  00DD               	movwf	??___ftmul
  8474  0FB2  085D               	movf	??___ftmul,w
  8475  0FB3  00E5               	movwf	___ftmul@cntr
  8476  0FB4                     l3003:	
  8477  0FB4  1C57               	btfss	___ftmul@f1,0
  8478  0FB5  2FBC               	goto	l3007
  8479  0FB6  085A               	movf	___ftmul@f2,w
  8480  0FB7  07E2               	addwf	___ftmul@f3_as_product,f
  8481  0FB8  085B               	movf	___ftmul@f2+1,w
  8482  0FB9  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  8483  0FBA  085C               	movf	___ftmul@f2+2,w
  8484  0FBB  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  8485  0FBC                     l3007:	
  8486  0FBC  3001               	movlw	1
  8487  0FBD                     u3025:	
  8488  0FBD  36D9               	lsrf	___ftmul@f1+2,f
  8489  0FBE  0CD8               	rrf	___ftmul@f1+1,f
  8490  0FBF  0CD7               	rrf	___ftmul@f1,f
  8491  0FC0  0B89               	decfsz	9,f
  8492  0FC1  2FBD               	goto	u3025
  8493  0FC2  3001               	movlw	1
  8494  0FC3                     u3035:	
  8495  0FC3  35DA               	lslf	___ftmul@f2,f
  8496  0FC4  0DDB               	rlf	___ftmul@f2+1,f
  8497  0FC5  0DDC               	rlf	___ftmul@f2+2,f
  8498  0FC6  0B89               	decfsz	9,f
  8499  0FC7  2FC3               	goto	u3035
  8500  0FC8  3001               	movlw	1
  8501  0FC9  02E5               	subwf	___ftmul@cntr,f
  8502  0FCA  1D03               	btfss	3,2
  8503  0FCB  2FB4               	goto	l3003
  8504  0FCC  3009               	movlw	9
  8505  0FCD  00DD               	movwf	??___ftmul
  8506  0FCE  085D               	movf	??___ftmul,w
  8507  0FCF  00E5               	movwf	___ftmul@cntr
  8508  0FD0                     l3015:	
  8509  0FD0  1C57               	btfss	___ftmul@f1,0
  8510  0FD1  2FD8               	goto	l3019
  8511  0FD2  085A               	movf	___ftmul@f2,w
  8512  0FD3  07E2               	addwf	___ftmul@f3_as_product,f
  8513  0FD4  085B               	movf	___ftmul@f2+1,w
  8514  0FD5  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  8515  0FD6  085C               	movf	___ftmul@f2+2,w
  8516  0FD7  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  8517  0FD8                     l3019:	
  8518  0FD8  3001               	movlw	1
  8519  0FD9                     u3065:	
  8520  0FD9  36D9               	lsrf	___ftmul@f1+2,f
  8521  0FDA  0CD8               	rrf	___ftmul@f1+1,f
  8522  0FDB  0CD7               	rrf	___ftmul@f1,f
  8523  0FDC  0B89               	decfsz	9,f
  8524  0FDD  2FD9               	goto	u3065
  8525  0FDE  3001               	movlw	1
  8526  0FDF                     u3075:	
  8527  0FDF  36E4               	lsrf	___ftmul@f3_as_product+2,f
  8528  0FE0  0CE3               	rrf	___ftmul@f3_as_product+1,f
  8529  0FE1  0CE2               	rrf	___ftmul@f3_as_product,f
  8530  0FE2  0B89               	decfsz	9,f
  8531  0FE3  2FDF               	goto	u3075
  8532  0FE4  3001               	movlw	1
  8533  0FE5  02E5               	subwf	___ftmul@cntr,f
  8534  0FE6  1D03               	btfss	3,2
  8535  0FE7  2FD0               	goto	l3015
  8536  0FE8  0862               	movf	___ftmul@f3_as_product,w
  8537  0FE9  00A0               	movwf	___ftpack@arg
  8538  0FEA  0863               	movf	___ftmul@f3_as_product+1,w
  8539  0FEB  00A1               	movwf	___ftpack@arg+1
  8540  0FEC  0864               	movf	___ftmul@f3_as_product+2,w
  8541  0FED  00A2               	movwf	___ftpack@arg+2
  8542  0FEE  0861               	movf	___ftmul@exp,w
  8543  0FEF  00DD               	movwf	??___ftmul
  8544  0FF0  085D               	movf	??___ftmul,w
  8545  0FF1  00A3               	movwf	___ftpack@exp
  8546  0FF2  0866               	movf	___ftmul@sign,w
  8547  0FF3  00DE               	movwf	??___ftmul+1
  8548  0FF4  085E               	movf	??___ftmul+1,w
  8549  0FF5  00A4               	movwf	___ftpack@sign
  8550  0FF6  318C  2492         	fcall	___ftpack
  8551  0FF8  0020               	movlb	0	; select bank0
  8552  0FF9  0820               	movf	?___ftpack,w
  8553  0FFA  00D7               	movwf	?___ftmul
  8554  0FFB  0821               	movf	?___ftpack+1,w
  8555  0FFC  00D8               	movwf	?___ftmul+1
  8556  0FFD  0822               	movf	?___ftpack+2,w
  8557  0FFE  00D9               	movwf	?___ftmul+2
  8558  0FFF  0008               	return
  8559  1000                     __end_of___ftmul:	
  8560                           
  8561                           	psect	text36
  8562  0971                     __ptext36:	
  8563 ;; *************** function ___ftge *****************
  8564 ;; Defined at:
  8565 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8566 ;; Parameters:    Size  Location     Type
  8567 ;;  ff1             3    0[BANK0 ] float 
  8568 ;;  ff2             3    3[BANK0 ] float 
  8569 ;; Auto vars:     Size  Location     Type
  8570 ;;		None
  8571 ;; Return value:  Size  Location     Type
  8572 ;;		None               void
  8573 ;; Registers used:
  8574 ;;		wreg, status,2, status,0
  8575 ;; Tracked objects:
  8576 ;;		On entry : 0/0
  8577 ;;		On exit  : 0/0
  8578 ;;		Unchanged: 0/0
  8579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8580 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8582 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8583 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8584 ;;Total ram usage:        9 bytes
  8585 ;; Hardware stack levels used:    1
  8586 ;; Hardware stack levels required when called:    7
  8587 ;; This function calls:
  8588 ;;		Nothing
  8589 ;; This function is called by:
  8590 ;;		_ftoa
  8591 ;; This function uses a non-reentrant model
  8592 ;;
  8593                           
  8594                           
  8595                           ;psect for function ___ftge
  8596  0971                     ___ftge:	
  8597                           
  8598                           ;incstack = 0
  8599                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8600  0971  0020               	movlb	0	; select bank0
  8601  0972  1FA2               	btfss	___ftge@ff1+2,7
  8602  0973  2988               	goto	l2963
  8603  0974  0920               	comf	___ftge@ff1,w
  8604  0975  00A6               	movwf	??___ftge
  8605  0976  0921               	comf	___ftge@ff1+1,w
  8606  0977  00A7               	movwf	??___ftge+1
  8607  0978  0922               	comf	___ftge@ff1+2,w
  8608  0979  00A8               	movwf	??___ftge+2
  8609  097A  0AA6               	incf	??___ftge,f
  8610  097B  1903               	skipnz
  8611  097C  0AA7               	incf	??___ftge+1,f
  8612  097D  1903               	skipnz
  8613  097E  0AA8               	incf	??___ftge+2,f
  8614  097F  3000               	movlw	0
  8615  0980  0726               	addwf	??___ftge,w
  8616  0981  00A0               	movwf	___ftge@ff1
  8617  0982  3000               	movlw	0
  8618  0983  3D27               	addwfc	??___ftge+1,w
  8619  0984  00A1               	movwf	___ftge@ff1+1
  8620  0985  3080               	movlw	128
  8621  0986  3D28               	addwfc	??___ftge+2,w
  8622  0987  00A2               	movwf	___ftge@ff1+2
  8623  0988                     l2963:	
  8624  0988  1FA5               	btfss	___ftge@ff2+2,7
  8625  0989  299E               	goto	l2967
  8626  098A  0923               	comf	___ftge@ff2,w
  8627  098B  00A6               	movwf	??___ftge
  8628  098C  0924               	comf	___ftge@ff2+1,w
  8629  098D  00A7               	movwf	??___ftge+1
  8630  098E  0925               	comf	___ftge@ff2+2,w
  8631  098F  00A8               	movwf	??___ftge+2
  8632  0990  0AA6               	incf	??___ftge,f
  8633  0991  1903               	skipnz
  8634  0992  0AA7               	incf	??___ftge+1,f
  8635  0993  1903               	skipnz
  8636  0994  0AA8               	incf	??___ftge+2,f
  8637  0995  3000               	movlw	0
  8638  0996  0726               	addwf	??___ftge,w
  8639  0997  00A3               	movwf	___ftge@ff2
  8640  0998  3000               	movlw	0
  8641  0999  3D27               	addwfc	??___ftge+1,w
  8642  099A  00A4               	movwf	___ftge@ff2+1
  8643  099B  3080               	movlw	128
  8644  099C  3D28               	addwfc	??___ftge+2,w
  8645  099D  00A5               	movwf	___ftge@ff2+2
  8646  099E                     l2967:	
  8647  099E  3080               	movlw	128
  8648  099F  06A2               	xorwf	___ftge@ff1+2,f
  8649  09A0  3080               	movlw	128
  8650  09A1  06A5               	xorwf	___ftge@ff2+2,f
  8651  09A2  0825               	movf	___ftge@ff2+2,w
  8652  09A3  0222               	subwf	___ftge@ff1+2,w
  8653  09A4  1D03               	skipz
  8654  09A5  0008               	return
  8655  09A6  0824               	movf	___ftge@ff2+1,w
  8656  09A7  0221               	subwf	___ftge@ff1+1,w
  8657  09A8  1D03               	skipz
  8658  09A9  0008               	return
  8659  09AA  0823               	movf	___ftge@ff2,w
  8660  09AB  0220               	subwf	___ftge@ff1,w
  8661  09AC  0008               	return
  8662  09AD                     __end_of___ftge:	
  8663                           
  8664                           	psect	text37
  8665  0768                     __ptext37:	
  8666 ;; *************** function _getADCValue *****************
  8667 ;; Defined at:
  8668 ;;		line 110 in file "main.c"
  8669 ;; Parameters:    Size  Location     Type
  8670 ;;  channel         1    wreg     unsigned char 
  8671 ;; Auto vars:     Size  Location     Type
  8672 ;;  channel         1   51[BANK0 ] unsigned char 
  8673 ;;  adcSum          3   52[BANK0 ] float 
  8674 ;;  adcLoop         2   49[BANK0 ] unsigned int 
  8675 ;; Return value:  Size  Location     Type
  8676 ;;                  3   43[BANK0 ] float 
  8677 ;; Registers used:
  8678 ;;		wreg, status,2, status,0, pclath, cstack
  8679 ;; Tracked objects:
  8680 ;;		On entry : 0/0
  8681 ;;		On exit  : 0/0
  8682 ;;		Unchanged: 0/0
  8683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8684 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8685 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8686 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8687 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8688 ;;Total ram usage:       12 bytes
  8689 ;; Hardware stack levels used:    1
  8690 ;; Hardware stack levels required when called:    9
  8691 ;; This function calls:
  8692 ;;		___awtoft
  8693 ;;		___ftadd
  8694 ;;		___ftdiv
  8695 ;;		_doWDTSleep
  8696 ;; This function is called by:
  8697 ;;		_loop
  8698 ;; This function uses a non-reentrant model
  8699 ;;
  8700                           
  8701                           
  8702                           ;psect for function _getADCValue
  8703  0768                     _getADCValue:	
  8704                           
  8705                           ;incstack = 0
  8706                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  8707                           ;getADCValue@channel stored from wreg
  8708  0768  0020               	movlb	0	; select bank0
  8709  0769  00D3               	movwf	getADCValue@channel
  8710                           
  8711                           ;main.c: 113: float adcSum = 0;
  8712  076A  3000               	movlw	0
  8713  076B  00D4               	movwf	getADCValue@adcSum
  8714  076C  3000               	movlw	0
  8715  076D  00D5               	movwf	getADCValue@adcSum+1
  8716  076E  3000               	movlw	0
  8717  076F  00D6               	movwf	getADCValue@adcSum+2
  8718                           
  8719                           ;main.c: 114: unsigned int adcLoop = 1000;
  8720  0770  30E8               	movlw	232
  8721  0771  00D1               	movwf	getADCValue@adcLoop
  8722  0772  3003               	movlw	3
  8723  0773  00D2               	movwf	getADCValue@adcLoop+1
  8724                           
  8725                           ;main.c: 116: ADCON0bits.CHS = channel;
  8726  0774  0853               	movf	getADCValue@channel,w
  8727  0775  00CE               	movwf	??_getADCValue
  8728  0776  0DCE               	rlf	??_getADCValue,f
  8729  0777  0DCE               	rlf	??_getADCValue,f
  8730  0778  0021               	movlb	1	; select bank1
  8731  0779  081D               	movf	29,w	;volatile
  8732  077A  0020               	movlb	0	; select bank0
  8733  077B  064E               	xorwf	??_getADCValue,w
  8734  077C  3903               	andlw	-253
  8735  077D  064E               	xorwf	??_getADCValue,w
  8736  077E  0021               	movlb	1	; select bank1
  8737  077F  009D               	movwf	29	;volatile
  8738                           
  8739                           ;main.c: 117: FVRCONbits.FVREN = 1;
  8740  0780  0022               	movlb	2	; select bank2
  8741  0781  1797               	bsf	23,7	;volatile
  8742                           
  8743                           ;main.c: 118: ADCON0bits.ADON = 1;
  8744  0782  0021               	movlb	1	; select bank1
  8745  0783  141D               	bsf	29,0	;volatile
  8746                           
  8747                           ;main.c: 120: doWDTSleep(0b00000);
  8748  0784  3000               	movlw	0
  8749  0785  3196  261C  3187   	fcall	_doWDTSleep
  8750  0788                     l3311:	
  8751                           ;main.c: 122: while (adcLoop--){
  8752                           
  8753  0788  3001               	movlw	1
  8754  0789  0020               	movlb	0	; select bank0
  8755  078A  02D1               	subwf	getADCValue@adcLoop,f
  8756  078B  3000               	movlw	0
  8757  078C  3BD2               	subwfb	getADCValue@adcLoop+1,f
  8758  078D  0A51               	incf	getADCValue@adcLoop,w
  8759  078E  1903               	btfsc	3,2
  8760  078F  0A52               	incf	getADCValue@adcLoop+1,w
  8761  0790  1903               	btfsc	3,2
  8762  0791  2FC5               	goto	l190
  8763                           
  8764                           ;main.c: 124: ADCON0bits.ADGO = 1;
  8765  0792  0021               	movlb	1	; select bank1
  8766  0793  149D               	bsf	29,1	;volatile
  8767  0794                     l3307:	
  8768                           ;main.c: 126: while (ADCON0bits.ADGO){
  8769                           
  8770  0794  0021               	movlb	1	; select bank1
  8771  0795  1C9D               	btfss	29,1	;volatile
  8772  0796  2F9C               	goto	l3309
  8773                           
  8774                           ;main.c: 127: doWDTSleep(0b00000);
  8775  0797  3000               	movlw	0
  8776  0798  3196  261C  3187   	fcall	_doWDTSleep
  8777  079B  2F94               	goto	l3307
  8778  079C                     l3309:	
  8779                           
  8780                           ;main.c: 128: };main.c: 130: adcSum+= (ADRESL | (ADRESH << 8));
  8781  079C  081C               	movf	28,w	;volatile
  8782  079D  0020               	movlb	0	; select bank0
  8783  079E  00CE               	movwf	??_getADCValue
  8784  079F  01CF               	clrf	??_getADCValue+1
  8785  07A0  084E               	movf	??_getADCValue,w
  8786  07A1  00CF               	movwf	??_getADCValue+1
  8787  07A2  01CE               	clrf	??_getADCValue
  8788  07A3  084E               	movf	??_getADCValue,w
  8789  07A4  0021               	movlb	1	; select bank1
  8790  07A5  041B               	iorwf	27,w	;volatile
  8791  07A6  0020               	movlb	0	; select bank0
  8792  07A7  00A8               	movwf	___awtoft@c
  8793  07A8  084F               	movf	??_getADCValue+1,w
  8794  07A9  00A9               	movwf	___awtoft@c+1
  8795  07AA  3197  276C  3187   	fcall	___awtoft
  8796  07AD  0020               	movlb	0	; select bank0
  8797  07AE  0828               	movf	?___awtoft,w
  8798  07AF  00AE               	movwf	___ftadd@f1
  8799  07B0  0829               	movf	?___awtoft+1,w
  8800  07B1  00AF               	movwf	___ftadd@f1+1
  8801  07B2  082A               	movf	?___awtoft+2,w
  8802  07B3  00B0               	movwf	___ftadd@f1+2
  8803  07B4  0854               	movf	getADCValue@adcSum,w
  8804  07B5  00B1               	movwf	___ftadd@f2
  8805  07B6  0855               	movf	getADCValue@adcSum+1,w
  8806  07B7  00B2               	movwf	___ftadd@f2+1
  8807  07B8  0856               	movf	getADCValue@adcSum+2,w
  8808  07B9  00B3               	movwf	___ftadd@f2+2
  8809  07BA  3184  24AF  3187   	fcall	___ftadd
  8810  07BD  0020               	movlb	0	; select bank0
  8811  07BE  082E               	movf	?___ftadd,w
  8812  07BF  00D4               	movwf	getADCValue@adcSum
  8813  07C0  082F               	movf	?___ftadd+1,w
  8814  07C1  00D5               	movwf	getADCValue@adcSum+1
  8815  07C2  0830               	movf	?___ftadd+2,w
  8816  07C3  00D6               	movwf	getADCValue@adcSum+2
  8817  07C4  2F88               	goto	l3311
  8818  07C5                     l190:	
  8819                           
  8820                           ;main.c: 132: };main.c: 134: FVRCONbits.FVREN = 0;
  8821  07C5  0022               	movlb	2	; select bank2
  8822  07C6  1397               	bcf	23,7	;volatile
  8823                           
  8824                           ;main.c: 135: ADCON0bits.ADON = 0;
  8825  07C7  0021               	movlb	1	; select bank1
  8826  07C8  101D               	bcf	29,0	;volatile
  8827                           
  8828                           ;main.c: 138: adcSum/= 1000;
  8829  07C9  3000               	movlw	0
  8830  07CA  0020               	movlb	0	; select bank0
  8831  07CB  00BB               	movwf	___ftdiv@f2
  8832  07CC  307A               	movlw	122
  8833  07CD  00BC               	movwf	___ftdiv@f2+1
  8834  07CE  3044               	movlw	68
  8835  07CF  00BD               	movwf	___ftdiv@f2+2
  8836  07D0  0854               	movf	getADCValue@adcSum,w
  8837  07D1  00BE               	movwf	___ftdiv@f1
  8838  07D2  0855               	movf	getADCValue@adcSum+1,w
  8839  07D3  00BF               	movwf	___ftdiv@f1+1
  8840  07D4  0856               	movf	getADCValue@adcSum+2,w
  8841  07D5  00C0               	movwf	___ftdiv@f1+2
  8842  07D6  318E  26A3  3187   	fcall	___ftdiv
  8843  07D9  0020               	movlb	0	; select bank0
  8844  07DA  083B               	movf	?___ftdiv,w
  8845  07DB  00D4               	movwf	getADCValue@adcSum
  8846  07DC  083C               	movf	?___ftdiv+1,w
  8847  07DD  00D5               	movwf	getADCValue@adcSum+1
  8848  07DE  083D               	movf	?___ftdiv+2,w
  8849  07DF  00D6               	movwf	getADCValue@adcSum+2
  8850                           
  8851                           ;main.c: 139: adcSum/= 500;
  8852  07E0  3000               	movlw	0
  8853  07E1  00BB               	movwf	___ftdiv@f2
  8854  07E2  30FA               	movlw	250
  8855  07E3  00BC               	movwf	___ftdiv@f2+1
  8856  07E4  3043               	movlw	67
  8857  07E5  00BD               	movwf	___ftdiv@f2+2
  8858  07E6  0854               	movf	getADCValue@adcSum,w
  8859  07E7  00BE               	movwf	___ftdiv@f1
  8860  07E8  0855               	movf	getADCValue@adcSum+1,w
  8861  07E9  00BF               	movwf	___ftdiv@f1+1
  8862  07EA  0856               	movf	getADCValue@adcSum+2,w
  8863  07EB  00C0               	movwf	___ftdiv@f1+2
  8864  07EC  318E  26A3         	fcall	___ftdiv
  8865  07EE  0020               	movlb	0	; select bank0
  8866  07EF  083B               	movf	?___ftdiv,w
  8867  07F0  00D4               	movwf	getADCValue@adcSum
  8868  07F1  083C               	movf	?___ftdiv+1,w
  8869  07F2  00D5               	movwf	getADCValue@adcSum+1
  8870  07F3  083D               	movf	?___ftdiv+2,w
  8871  07F4  00D6               	movwf	getADCValue@adcSum+2
  8872                           
  8873                           ;main.c: 141: return adcSum;
  8874  07F5  0854               	movf	getADCValue@adcSum,w
  8875  07F6  00CB               	movwf	?_getADCValue
  8876  07F7  0855               	movf	getADCValue@adcSum+1,w
  8877  07F8  00CC               	movwf	?_getADCValue+1
  8878  07F9  0856               	movf	getADCValue@adcSum+2,w
  8879  07FA  00CD               	movwf	?_getADCValue+2
  8880  07FB  0008               	return
  8881  07FC                     __end_of_getADCValue:	
  8882                           
  8883                           	psect	text38
  8884  161C                     __ptext38:	
  8885 ;; *************** function _doWDTSleep *****************
  8886 ;; Defined at:
  8887 ;;		line 22 in file "main.c"
  8888 ;; Parameters:    Size  Location     Type
  8889 ;;  wdtps           1    wreg     unsigned char 
  8890 ;; Auto vars:     Size  Location     Type
  8891 ;;  wdtps           1    1[BANK0 ] unsigned char 
  8892 ;; Return value:  Size  Location     Type
  8893 ;;                  1    wreg      void 
  8894 ;; Registers used:
  8895 ;;		wreg, status,2, status,0
  8896 ;; Tracked objects:
  8897 ;;		On entry : 0/0
  8898 ;;		On exit  : 0/0
  8899 ;;		Unchanged: 0/0
  8900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8902 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8903 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8904 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8905 ;;Total ram usage:        2 bytes
  8906 ;; Hardware stack levels used:    1
  8907 ;; Hardware stack levels required when called:    7
  8908 ;; This function calls:
  8909 ;;		Nothing
  8910 ;; This function is called by:
  8911 ;;		_sleep
  8912 ;;		_getADCValue
  8913 ;; This function uses a non-reentrant model
  8914 ;;
  8915                           
  8916                           
  8917                           ;psect for function _doWDTSleep
  8918  161C                     _doWDTSleep:	
  8919                           
  8920                           ;incstack = 0
  8921                           ; Regs used in _doWDTSleep: [wreg+status,2+status,0]
  8922                           ;doWDTSleep@wdtps stored from wreg
  8923  161C  0020               	movlb	0	; select bank0
  8924  161D  00A1               	movwf	doWDTSleep@wdtps
  8925                           
  8926                           ;main.c: 25: WDTCONbits.WDTPS = wdtps;
  8927  161E  0821               	movf	doWDTSleep@wdtps,w
  8928  161F  00A0               	movwf	??_doWDTSleep
  8929  1620  0DA0               	rlf	??_doWDTSleep,f
  8930  1621  0021               	movlb	1	; select bank1
  8931  1622  0817               	movf	23,w	;volatile
  8932  1623  0020               	movlb	0	; select bank0
  8933  1624  0620               	xorwf	??_doWDTSleep,w
  8934  1625  39C1               	andlw	-63
  8935  1626  0620               	xorwf	??_doWDTSleep,w
  8936  1627  0021               	movlb	1	; select bank1
  8937  1628  0097               	movwf	23	;volatile
  8938  1629  0063               	sleep	;# 
  8939                           
  8940                           ;main.c: 29: __nop();
  8941  162A  0000               	nop
  8942                           
  8943                           ;main.c: 30: __nop();
  8944  162B  0000               	nop
  8945                           
  8946                           ;main.c: 32: WDTCONbits.WDTPS = 0b01101;
  8947  162C  0021               	movlb	1	; select bank1
  8948  162D  0817               	movf	23,w	;volatile
  8949  162E  39C1               	andlw	-63
  8950  162F  381A               	iorlw	26
  8951  1630  0097               	movwf	23	;volatile
  8952  1631  0064               	clrwdt	;# 
  8953  1632  0008               	return
  8954  1633                     __end_of_doWDTSleep:	
  8955                           
  8956                           	psect	text39
  8957  0EA3                     __ptext39:	
  8958 ;; *************** function ___ftdiv *****************
  8959 ;; Defined at:
  8960 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  8961 ;; Parameters:    Size  Location     Type
  8962 ;;  f2              3   27[BANK0 ] float 
  8963 ;;  f1              3   30[BANK0 ] float 
  8964 ;; Auto vars:     Size  Location     Type
  8965 ;;  f3              3   38[BANK0 ] float 
  8966 ;;  sign            1   42[BANK0 ] unsigned char 
  8967 ;;  exp             1   41[BANK0 ] unsigned char 
  8968 ;;  cntr            1   37[BANK0 ] unsigned char 
  8969 ;; Return value:  Size  Location     Type
  8970 ;;                  3   27[BANK0 ] float 
  8971 ;; Registers used:
  8972 ;;		wreg, status,2, status,0, pclath, cstack
  8973 ;; Tracked objects:
  8974 ;;		On entry : 0/0
  8975 ;;		On exit  : 0/0
  8976 ;;		Unchanged: 0/0
  8977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8978 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8979 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8980 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8981 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8982 ;;Total ram usage:       16 bytes
  8983 ;; Hardware stack levels used:    1
  8984 ;; Hardware stack levels required when called:    8
  8985 ;; This function calls:
  8986 ;;		___ftpack
  8987 ;; This function is called by:
  8988 ;;		_getADCValue
  8989 ;;		_loop
  8990 ;; This function uses a non-reentrant model
  8991 ;;
  8992                           
  8993                           
  8994                           ;psect for function ___ftdiv
  8995  0EA3                     ___ftdiv:	
  8996                           
  8997                           ;incstack = 0
  8998                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  8999  0EA3  0020               	movlb	0	; select bank0
  9000  0EA4  083E               	movf	___ftdiv@f1,w
  9001  0EA5  00C1               	movwf	??___ftdiv
  9002  0EA6  083F               	movf	___ftdiv@f1+1,w
  9003  0EA7  00C2               	movwf	??___ftdiv+1
  9004  0EA8  0840               	movf	___ftdiv@f1+2,w
  9005  0EA9  00C3               	movwf	??___ftdiv+2
  9006  0EAA  1003               	clrc
  9007  0EAB  0D42               	rlf	??___ftdiv+1,w
  9008  0EAC  0D43               	rlf	??___ftdiv+2,w
  9009  0EAD  00C4               	movwf	??___ftdiv+3
  9010  0EAE  0844               	movf	??___ftdiv+3,w
  9011  0EAF  00C9               	movwf	___ftdiv@exp
  9012  0EB0  0849               	movf	___ftdiv@exp,w
  9013  0EB1  1D03               	btfss	3,2
  9014  0EB2  2EBA               	goto	l3181
  9015  0EB3  3000               	movlw	0
  9016  0EB4  00BB               	movwf	?___ftdiv
  9017  0EB5  3000               	movlw	0
  9018  0EB6  00BC               	movwf	?___ftdiv+1
  9019  0EB7  3000               	movlw	0
  9020  0EB8  00BD               	movwf	?___ftdiv+2
  9021  0EB9  0008               	return
  9022  0EBA                     l3181:	
  9023  0EBA  083B               	movf	___ftdiv@f2,w
  9024  0EBB  00C1               	movwf	??___ftdiv
  9025  0EBC  083C               	movf	___ftdiv@f2+1,w
  9026  0EBD  00C2               	movwf	??___ftdiv+1
  9027  0EBE  083D               	movf	___ftdiv@f2+2,w
  9028  0EBF  00C3               	movwf	??___ftdiv+2
  9029  0EC0  1003               	clrc
  9030  0EC1  0D42               	rlf	??___ftdiv+1,w
  9031  0EC2  0D43               	rlf	??___ftdiv+2,w
  9032  0EC3  00C4               	movwf	??___ftdiv+3
  9033  0EC4  0844               	movf	??___ftdiv+3,w
  9034  0EC5  00CA               	movwf	___ftdiv@sign
  9035  0EC6  084A               	movf	___ftdiv@sign,w
  9036  0EC7  1D03               	btfss	3,2
  9037  0EC8  2ED0               	goto	l3187
  9038  0EC9  3000               	movlw	0
  9039  0ECA  00BB               	movwf	?___ftdiv
  9040  0ECB  3000               	movlw	0
  9041  0ECC  00BC               	movwf	?___ftdiv+1
  9042  0ECD  3000               	movlw	0
  9043  0ECE  00BD               	movwf	?___ftdiv+2
  9044  0ECF  0008               	return
  9045  0ED0                     l3187:	
  9046  0ED0  3000               	movlw	0
  9047  0ED1  00C6               	movwf	___ftdiv@f3
  9048  0ED2  3000               	movlw	0
  9049  0ED3  00C7               	movwf	___ftdiv@f3+1
  9050  0ED4  3000               	movlw	0
  9051  0ED5  00C8               	movwf	___ftdiv@f3+2
  9052  0ED6  3089               	movlw	137
  9053  0ED7  074A               	addwf	___ftdiv@sign,w
  9054  0ED8  00C1               	movwf	??___ftdiv
  9055  0ED9  0841               	movf	??___ftdiv,w
  9056  0EDA  02C9               	subwf	___ftdiv@exp,f
  9057  0EDB  083E               	movf	___ftdiv@f1,w
  9058  0EDC  00C1               	movwf	??___ftdiv
  9059  0EDD  083F               	movf	___ftdiv@f1+1,w
  9060  0EDE  00C2               	movwf	??___ftdiv+1
  9061  0EDF  0840               	movf	___ftdiv@f1+2,w
  9062  0EE0  00C3               	movwf	??___ftdiv+2
  9063  0EE1  3010               	movlw	16
  9064  0EE2                     u3325:	
  9065  0EE2  36C3               	lsrf	??___ftdiv+2,f
  9066  0EE3  0CC2               	rrf	??___ftdiv+1,f
  9067  0EE4  0CC1               	rrf	??___ftdiv,f
  9068  0EE5  0B89               	decfsz	9,f
  9069  0EE6  2EE2               	goto	u3325
  9070  0EE7  0841               	movf	??___ftdiv,w
  9071  0EE8  00C4               	movwf	??___ftdiv+3
  9072  0EE9  0844               	movf	??___ftdiv+3,w
  9073  0EEA  00CA               	movwf	___ftdiv@sign
  9074  0EEB  083B               	movf	___ftdiv@f2,w
  9075  0EEC  00C1               	movwf	??___ftdiv
  9076  0EED  083C               	movf	___ftdiv@f2+1,w
  9077  0EEE  00C2               	movwf	??___ftdiv+1
  9078  0EEF  083D               	movf	___ftdiv@f2+2,w
  9079  0EF0  00C3               	movwf	??___ftdiv+2
  9080  0EF1  3010               	movlw	16
  9081  0EF2                     u3335:	
  9082  0EF2  36C3               	lsrf	??___ftdiv+2,f
  9083  0EF3  0CC2               	rrf	??___ftdiv+1,f
  9084  0EF4  0CC1               	rrf	??___ftdiv,f
  9085  0EF5  0B89               	decfsz	9,f
  9086  0EF6  2EF2               	goto	u3335
  9087  0EF7  0841               	movf	??___ftdiv,w
  9088  0EF8  00C4               	movwf	??___ftdiv+3
  9089  0EF9  0844               	movf	??___ftdiv+3,w
  9090  0EFA  06CA               	xorwf	___ftdiv@sign,f
  9091  0EFB  3080               	movlw	128
  9092  0EFC  00C1               	movwf	??___ftdiv
  9093  0EFD  0841               	movf	??___ftdiv,w
  9094  0EFE  05CA               	andwf	___ftdiv@sign,f
  9095  0EFF  17BF               	bsf	___ftdiv@f1+1,7
  9096  0F00  30FF               	movlw	255
  9097  0F01  05BE               	andwf	___ftdiv@f1,f
  9098  0F02  30FF               	movlw	255
  9099  0F03  05BF               	andwf	___ftdiv@f1+1,f
  9100  0F04  3000               	movlw	0
  9101  0F05  05C0               	andwf	___ftdiv@f1+2,f
  9102  0F06  17BC               	bsf	___ftdiv@f2+1,7
  9103  0F07  30FF               	movlw	255
  9104  0F08  05BB               	andwf	___ftdiv@f2,f
  9105  0F09  30FF               	movlw	255
  9106  0F0A  05BC               	andwf	___ftdiv@f2+1,f
  9107  0F0B  3000               	movlw	0
  9108  0F0C  05BD               	andwf	___ftdiv@f2+2,f
  9109  0F0D  3018               	movlw	24
  9110  0F0E  00C1               	movwf	??___ftdiv
  9111  0F0F  0841               	movf	??___ftdiv,w
  9112  0F10  00C5               	movwf	___ftdiv@cntr
  9113  0F11                     l3201:	
  9114  0F11  3001               	movlw	1
  9115  0F12                     u3345:	
  9116  0F12  35C6               	lslf	___ftdiv@f3,f
  9117  0F13  0DC7               	rlf	___ftdiv@f3+1,f
  9118  0F14  0DC8               	rlf	___ftdiv@f3+2,f
  9119  0F15  0B89               	decfsz	9,f
  9120  0F16  2F12               	goto	u3345
  9121  0F17  083D               	movf	___ftdiv@f2+2,w
  9122  0F18  0240               	subwf	___ftdiv@f1+2,w
  9123  0F19  1D03               	skipz
  9124  0F1A  2F21               	goto	u3355
  9125  0F1B  083C               	movf	___ftdiv@f2+1,w
  9126  0F1C  023F               	subwf	___ftdiv@f1+1,w
  9127  0F1D  1D03               	skipz
  9128  0F1E  2F21               	goto	u3355
  9129  0F1F  083B               	movf	___ftdiv@f2,w
  9130  0F20  023E               	subwf	___ftdiv@f1,w
  9131  0F21                     u3355:	
  9132  0F21  1C03               	skipc
  9133  0F22  2F2A               	goto	l3209
  9134  0F23  083B               	movf	___ftdiv@f2,w
  9135  0F24  02BE               	subwf	___ftdiv@f1,f
  9136  0F25  083C               	movf	___ftdiv@f2+1,w
  9137  0F26  3BBF               	subwfb	___ftdiv@f1+1,f
  9138  0F27  083D               	movf	___ftdiv@f2+2,w
  9139  0F28  3BC0               	subwfb	___ftdiv@f1+2,f
  9140  0F29  1446               	bsf	___ftdiv@f3,0
  9141  0F2A                     l3209:	
  9142  0F2A  3001               	movlw	1
  9143  0F2B                     u3365:	
  9144  0F2B  35BE               	lslf	___ftdiv@f1,f
  9145  0F2C  0DBF               	rlf	___ftdiv@f1+1,f
  9146  0F2D  0DC0               	rlf	___ftdiv@f1+2,f
  9147  0F2E  0B89               	decfsz	9,f
  9148  0F2F  2F2B               	goto	u3365
  9149  0F30  3001               	movlw	1
  9150  0F31  02C5               	subwf	___ftdiv@cntr,f
  9151  0F32  1D03               	btfss	3,2
  9152  0F33  2F11               	goto	l3201
  9153  0F34  0846               	movf	___ftdiv@f3,w
  9154  0F35  00A0               	movwf	___ftpack@arg
  9155  0F36  0847               	movf	___ftdiv@f3+1,w
  9156  0F37  00A1               	movwf	___ftpack@arg+1
  9157  0F38  0848               	movf	___ftdiv@f3+2,w
  9158  0F39  00A2               	movwf	___ftpack@arg+2
  9159  0F3A  0849               	movf	___ftdiv@exp,w
  9160  0F3B  00C1               	movwf	??___ftdiv
  9161  0F3C  0841               	movf	??___ftdiv,w
  9162  0F3D  00A3               	movwf	___ftpack@exp
  9163  0F3E  084A               	movf	___ftdiv@sign,w
  9164  0F3F  00C2               	movwf	??___ftdiv+1
  9165  0F40  0842               	movf	??___ftdiv+1,w
  9166  0F41  00A4               	movwf	___ftpack@sign
  9167  0F42  318C  2492         	fcall	___ftpack
  9168  0F44  0020               	movlb	0	; select bank0
  9169  0F45  0820               	movf	?___ftpack,w
  9170  0F46  00BB               	movwf	?___ftdiv
  9171  0F47  0821               	movf	?___ftpack+1,w
  9172  0F48  00BC               	movwf	?___ftdiv+1
  9173  0F49  0822               	movf	?___ftpack+2,w
  9174  0F4A  00BD               	movwf	?___ftdiv+2
  9175  0F4B  0008               	return
  9176  0F4C                     __end_of___ftdiv:	
  9177                           
  9178                           	psect	text40
  9179  04AF                     __ptext40:	
  9180 ;; *************** function ___ftadd *****************
  9181 ;; Defined at:
  9182 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  9183 ;; Parameters:    Size  Location     Type
  9184 ;;  f1              3   14[BANK0 ] float 
  9185 ;;  f2              3   17[BANK0 ] float 
  9186 ;; Auto vars:     Size  Location     Type
  9187 ;;  exp1            1   26[BANK0 ] unsigned char 
  9188 ;;  exp2            1   25[BANK0 ] unsigned char 
  9189 ;;  sign            1   24[BANK0 ] unsigned char 
  9190 ;; Return value:  Size  Location     Type
  9191 ;;                  3   14[BANK0 ] float 
  9192 ;; Registers used:
  9193 ;;		wreg, status,2, status,0, pclath, cstack
  9194 ;; Tracked objects:
  9195 ;;		On entry : 0/0
  9196 ;;		On exit  : 0/0
  9197 ;;		Unchanged: 0/0
  9198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9199 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9201 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9202 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9203 ;;Total ram usage:       13 bytes
  9204 ;; Hardware stack levels used:    1
  9205 ;; Hardware stack levels required when called:    8
  9206 ;; This function calls:
  9207 ;;		___ftpack
  9208 ;; This function is called by:
  9209 ;;		_getADCValue
  9210 ;;		_loop
  9211 ;;		___ftsub
  9212 ;; This function uses a non-reentrant model
  9213 ;;
  9214                           
  9215                           
  9216                           ;psect for function ___ftadd
  9217  04AF                     ___ftadd:	
  9218                           
  9219                           ;incstack = 0
  9220                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9221  04AF  0020               	movlb	0	; select bank0
  9222  04B0  082E               	movf	___ftadd@f1,w
  9223  04B1  00B4               	movwf	??___ftadd
  9224  04B2  082F               	movf	___ftadd@f1+1,w
  9225  04B3  00B5               	movwf	??___ftadd+1
  9226  04B4  0830               	movf	___ftadd@f1+2,w
  9227  04B5  00B6               	movwf	??___ftadd+2
  9228  04B6  1003               	clrc
  9229  04B7  0D35               	rlf	??___ftadd+1,w
  9230  04B8  0D36               	rlf	??___ftadd+2,w
  9231  04B9  00B7               	movwf	??___ftadd+3
  9232  04BA  0837               	movf	??___ftadd+3,w
  9233  04BB  00BA               	movwf	___ftadd@exp1
  9234  04BC  0831               	movf	___ftadd@f2,w
  9235  04BD  00B4               	movwf	??___ftadd
  9236  04BE  0832               	movf	___ftadd@f2+1,w
  9237  04BF  00B5               	movwf	??___ftadd+1
  9238  04C0  0833               	movf	___ftadd@f2+2,w
  9239  04C1  00B6               	movwf	??___ftadd+2
  9240  04C2  1003               	clrc
  9241  04C3  0D35               	rlf	??___ftadd+1,w
  9242  04C4  0D36               	rlf	??___ftadd+2,w
  9243  04C5  00B7               	movwf	??___ftadd+3
  9244  04C6  0837               	movf	??___ftadd+3,w
  9245  04C7  00B9               	movwf	___ftadd@exp2
  9246  04C8  083A               	movf	___ftadd@exp1,w
  9247  04C9  1903               	btfsc	3,2
  9248  04CA  2CD7               	goto	l2755
  9249  04CB  0839               	movf	___ftadd@exp2,w
  9250  04CC  023A               	subwf	___ftadd@exp1,w
  9251  04CD  1803               	skipnc
  9252  04CE  2CDE               	goto	l2759
  9253  04CF  033A               	decf	___ftadd@exp1,w
  9254  04D0  3AFF               	xorlw	255
  9255  04D1  0739               	addwf	___ftadd@exp2,w
  9256  04D2  00B4               	movwf	??___ftadd
  9257  04D3  3019               	movlw	25
  9258  04D4  0234               	subwf	??___ftadd,w
  9259  04D5  1C03               	skipc
  9260  04D6  2CDE               	goto	l2759
  9261  04D7                     l2755:	
  9262  04D7  0831               	movf	___ftadd@f2,w
  9263  04D8  00AE               	movwf	?___ftadd
  9264  04D9  0832               	movf	___ftadd@f2+1,w
  9265  04DA  00AF               	movwf	?___ftadd+1
  9266  04DB  0833               	movf	___ftadd@f2+2,w
  9267  04DC  00B0               	movwf	?___ftadd+2
  9268  04DD  0008               	return
  9269  04DE                     l2759:	
  9270  04DE  0839               	movf	___ftadd@exp2,w
  9271  04DF  1903               	btfsc	3,2
  9272  04E0  0008               	return
  9273  04E1  083A               	movf	___ftadd@exp1,w
  9274  04E2  0239               	subwf	___ftadd@exp2,w
  9275  04E3  1803               	skipnc
  9276  04E4  2CED               	goto	l2765
  9277  04E5  0339               	decf	___ftadd@exp2,w
  9278  04E6  3AFF               	xorlw	255
  9279  04E7  073A               	addwf	___ftadd@exp1,w
  9280  04E8  00B4               	movwf	??___ftadd
  9281  04E9  3019               	movlw	25
  9282  04EA  0234               	subwf	??___ftadd,w
  9283  04EB  1803               	btfsc	3,0
  9284  04EC  0008               	return
  9285  04ED                     l2765:	
  9286  04ED  3006               	movlw	6
  9287  04EE  00B4               	movwf	??___ftadd
  9288  04EF  0834               	movf	??___ftadd,w
  9289  04F0  00B8               	movwf	___ftadd@sign
  9290  04F1  1BB0               	btfsc	___ftadd@f1+2,7
  9291  04F2  17B8               	bsf	___ftadd@sign,7
  9292  04F3  1BB3               	btfsc	___ftadd@f2+2,7
  9293  04F4  1738               	bsf	___ftadd@sign,6
  9294  04F5  17AF               	bsf	___ftadd@f1+1,7
  9295  04F6  30FF               	movlw	255
  9296  04F7  05AE               	andwf	___ftadd@f1,f
  9297  04F8  30FF               	movlw	255
  9298  04F9  05AF               	andwf	___ftadd@f1+1,f
  9299  04FA  3000               	movlw	0
  9300  04FB  05B0               	andwf	___ftadd@f1+2,f
  9301  04FC  17B2               	bsf	___ftadd@f2+1,7
  9302  04FD  30FF               	movlw	255
  9303  04FE  05B1               	andwf	___ftadd@f2,f
  9304  04FF  30FF               	movlw	255
  9305  0500  05B2               	andwf	___ftadd@f2+1,f
  9306  0501  3000               	movlw	0
  9307  0502  05B3               	andwf	___ftadd@f2+2,f
  9308  0503  0839               	movf	___ftadd@exp2,w
  9309  0504  023A               	subwf	___ftadd@exp1,w
  9310  0505  1803               	skipnc
  9311  0506  2D29               	goto	l2787
  9312  0507                     l2777:	
  9313  0507  3001               	movlw	1
  9314  0508                     u2565:	
  9315  0508  35B1               	lslf	___ftadd@f2,f
  9316  0509  0DB2               	rlf	___ftadd@f2+1,f
  9317  050A  0DB3               	rlf	___ftadd@f2+2,f
  9318  050B  0B89               	decfsz	9,f
  9319  050C  2D08               	goto	u2565
  9320  050D  3001               	movlw	1
  9321  050E  02B9               	subwf	___ftadd@exp2,f
  9322  050F  0839               	movf	___ftadd@exp2,w
  9323  0510  063A               	xorwf	___ftadd@exp1,w
  9324  0511  1903               	skipnz
  9325  0512  2D24               	goto	l2785
  9326  0513  3001               	movlw	1
  9327  0514  02B8               	subwf	___ftadd@sign,f
  9328  0515  0838               	movf	___ftadd@sign,w
  9329  0516  3907               	andlw	7
  9330  0517  1903               	btfsc	3,2
  9331  0518  2D24               	goto	l2785
  9332  0519  2D07               	goto	l2777
  9333  051A                     l2783:	
  9334  051A  3001               	movlw	1
  9335  051B                     u2595:	
  9336  051B  36B0               	lsrf	___ftadd@f1+2,f
  9337  051C  0CAF               	rrf	___ftadd@f1+1,f
  9338  051D  0CAE               	rrf	___ftadd@f1,f
  9339  051E  0B89               	decfsz	9,f
  9340  051F  2D1B               	goto	u2595
  9341  0520  3001               	movlw	1
  9342  0521  00B4               	movwf	??___ftadd
  9343  0522  0834               	movf	??___ftadd,w
  9344  0523  07BA               	addwf	___ftadd@exp1,f
  9345  0524                     l2785:	
  9346  0524  083A               	movf	___ftadd@exp1,w
  9347  0525  0639               	xorwf	___ftadd@exp2,w
  9348  0526  1903               	btfsc	3,2
  9349  0527  2D4E               	goto	l719
  9350  0528  2D1A               	goto	l2783
  9351  0529                     l2787:	
  9352  0529  083A               	movf	___ftadd@exp1,w
  9353  052A  0239               	subwf	___ftadd@exp2,w
  9354  052B  1803               	skipnc
  9355  052C  2D4E               	goto	l719
  9356  052D                     l2789:	
  9357  052D  3001               	movlw	1
  9358  052E                     u2625:	
  9359  052E  35AE               	lslf	___ftadd@f1,f
  9360  052F  0DAF               	rlf	___ftadd@f1+1,f
  9361  0530  0DB0               	rlf	___ftadd@f1+2,f
  9362  0531  0B89               	decfsz	9,f
  9363  0532  2D2E               	goto	u2625
  9364  0533  3001               	movlw	1
  9365  0534  02BA               	subwf	___ftadd@exp1,f
  9366  0535  0839               	movf	___ftadd@exp2,w
  9367  0536  063A               	xorwf	___ftadd@exp1,w
  9368  0537  1903               	skipnz
  9369  0538  2D4A               	goto	l2797
  9370  0539  3001               	movlw	1
  9371  053A  02B8               	subwf	___ftadd@sign,f
  9372  053B  0838               	movf	___ftadd@sign,w
  9373  053C  3907               	andlw	7
  9374  053D  1903               	btfsc	3,2
  9375  053E  2D4A               	goto	l2797
  9376  053F  2D2D               	goto	l2789
  9377  0540                     l2795:	
  9378  0540  3001               	movlw	1
  9379  0541                     u2655:	
  9380  0541  36B3               	lsrf	___ftadd@f2+2,f
  9381  0542  0CB2               	rrf	___ftadd@f2+1,f
  9382  0543  0CB1               	rrf	___ftadd@f2,f
  9383  0544  0B89               	decfsz	9,f
  9384  0545  2D41               	goto	u2655
  9385  0546  3001               	movlw	1
  9386  0547  00B4               	movwf	??___ftadd
  9387  0548  0834               	movf	??___ftadd,w
  9388  0549  07B9               	addwf	___ftadd@exp2,f
  9389  054A                     l2797:	
  9390  054A  083A               	movf	___ftadd@exp1,w
  9391  054B  0639               	xorwf	___ftadd@exp2,w
  9392  054C  1D03               	skipz
  9393  054D  2D40               	goto	l2795
  9394  054E                     l719:	
  9395  054E  1FB8               	btfss	___ftadd@sign,7
  9396  054F  2D60               	goto	l2801
  9397  0550  30FF               	movlw	255
  9398  0551  06AE               	xorwf	___ftadd@f1,f
  9399  0552  30FF               	movlw	255
  9400  0553  06AF               	xorwf	___ftadd@f1+1,f
  9401  0554  30FF               	movlw	255
  9402  0555  06B0               	xorwf	___ftadd@f1+2,f
  9403  0556  3001               	movlw	1
  9404  0557  07AE               	addwf	___ftadd@f1,f
  9405  0558  3000               	movlw	0
  9406  0559  1803               	skipnc
  9407  055A  3001               	movlw	1
  9408  055B  07AF               	addwf	___ftadd@f1+1,f
  9409  055C  3000               	movlw	0
  9410  055D  1803               	skipnc
  9411  055E  3001               	movlw	1
  9412  055F  07B0               	addwf	___ftadd@f1+2,f
  9413  0560                     l2801:	
  9414  0560  1F38               	btfss	___ftadd@sign,6
  9415  0561  2D72               	goto	l2805
  9416  0562  30FF               	movlw	255
  9417  0563  06B1               	xorwf	___ftadd@f2,f
  9418  0564  30FF               	movlw	255
  9419  0565  06B2               	xorwf	___ftadd@f2+1,f
  9420  0566  30FF               	movlw	255
  9421  0567  06B3               	xorwf	___ftadd@f2+2,f
  9422  0568  3001               	movlw	1
  9423  0569  07B1               	addwf	___ftadd@f2,f
  9424  056A  3000               	movlw	0
  9425  056B  1803               	skipnc
  9426  056C  3001               	movlw	1
  9427  056D  07B2               	addwf	___ftadd@f2+1,f
  9428  056E  3000               	movlw	0
  9429  056F  1803               	skipnc
  9430  0570  3001               	movlw	1
  9431  0571  07B3               	addwf	___ftadd@f2+2,f
  9432  0572                     l2805:	
  9433  0572  01B8               	clrf	___ftadd@sign
  9434  0573  082E               	movf	___ftadd@f1,w
  9435  0574  07B1               	addwf	___ftadd@f2,f
  9436  0575  082F               	movf	___ftadd@f1+1,w
  9437  0576  3DB2               	addwfc	___ftadd@f2+1,f
  9438  0577  0830               	movf	___ftadd@f1+2,w
  9439  0578  3DB3               	addwfc	___ftadd@f2+2,f
  9440  0579  1FB3               	btfss	___ftadd@f2+2,7
  9441  057A  2D8D               	goto	l2815
  9442  057B  30FF               	movlw	255
  9443  057C  06B1               	xorwf	___ftadd@f2,f
  9444  057D  30FF               	movlw	255
  9445  057E  06B2               	xorwf	___ftadd@f2+1,f
  9446  057F  30FF               	movlw	255
  9447  0580  06B3               	xorwf	___ftadd@f2+2,f
  9448  0581  3001               	movlw	1
  9449  0582  07B1               	addwf	___ftadd@f2,f
  9450  0583  3000               	movlw	0
  9451  0584  1803               	skipnc
  9452  0585  3001               	movlw	1
  9453  0586  07B2               	addwf	___ftadd@f2+1,f
  9454  0587  3000               	movlw	0
  9455  0588  1803               	skipnc
  9456  0589  3001               	movlw	1
  9457  058A  07B3               	addwf	___ftadd@f2+2,f
  9458  058B  01B8               	clrf	___ftadd@sign
  9459  058C  0AB8               	incf	___ftadd@sign,f
  9460  058D                     l2815:	
  9461  058D  0831               	movf	___ftadd@f2,w
  9462  058E  00A0               	movwf	___ftpack@arg
  9463  058F  0832               	movf	___ftadd@f2+1,w
  9464  0590  00A1               	movwf	___ftpack@arg+1
  9465  0591  0833               	movf	___ftadd@f2+2,w
  9466  0592  00A2               	movwf	___ftpack@arg+2
  9467  0593  083A               	movf	___ftadd@exp1,w
  9468  0594  00B4               	movwf	??___ftadd
  9469  0595  0834               	movf	??___ftadd,w
  9470  0596  00A3               	movwf	___ftpack@exp
  9471  0597  0838               	movf	___ftadd@sign,w
  9472  0598  00B5               	movwf	??___ftadd+1
  9473  0599  0835               	movf	??___ftadd+1,w
  9474  059A  00A4               	movwf	___ftpack@sign
  9475  059B  318C  2492         	fcall	___ftpack
  9476  059D  0020               	movlb	0	; select bank0
  9477  059E  0820               	movf	?___ftpack,w
  9478  059F  00AE               	movwf	?___ftadd
  9479  05A0  0821               	movf	?___ftpack+1,w
  9480  05A1  00AF               	movwf	?___ftadd+1
  9481  05A2  0822               	movf	?___ftpack+2,w
  9482  05A3  00B0               	movwf	?___ftadd+2
  9483  05A4  0008               	return
  9484  05A5                     __end_of___ftadd:	
  9485                           
  9486                           	psect	text41
  9487  176C                     __ptext41:	
  9488 ;; *************** function ___awtoft *****************
  9489 ;; Defined at:
  9490 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9491 ;; Parameters:    Size  Location     Type
  9492 ;;  c               2    8[BANK0 ] int 
  9493 ;; Auto vars:     Size  Location     Type
  9494 ;;  sign            1   13[BANK0 ] unsigned char 
  9495 ;; Return value:  Size  Location     Type
  9496 ;;                  3    8[BANK0 ] float 
  9497 ;; Registers used:
  9498 ;;		wreg, status,2, status,0, pclath, cstack
  9499 ;; Tracked objects:
  9500 ;;		On entry : 0/0
  9501 ;;		On exit  : 0/0
  9502 ;;		Unchanged: 0/0
  9503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9504 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9505 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9506 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9507 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9508 ;;Total ram usage:        6 bytes
  9509 ;; Hardware stack levels used:    1
  9510 ;; Hardware stack levels required when called:    8
  9511 ;; This function calls:
  9512 ;;		___ftpack
  9513 ;; This function is called by:
  9514 ;;		_getADCValue
  9515 ;;		_loop
  9516 ;; This function uses a non-reentrant model
  9517 ;;
  9518                           
  9519                           
  9520                           ;psect for function ___awtoft
  9521  176C                     ___awtoft:	
  9522                           
  9523                           ;incstack = 0
  9524                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  9525  176C  0020               	movlb	0	; select bank0
  9526  176D  01AD               	clrf	___awtoft@sign
  9527  176E  1FA9               	btfss	___awtoft@c+1,7
  9528  176F  2F77               	goto	l3171
  9529  1770  09A8               	comf	___awtoft@c,f
  9530  1771  09A9               	comf	___awtoft@c+1,f
  9531  1772  0AA8               	incf	___awtoft@c,f
  9532  1773  1903               	skipnz
  9533  1774  0AA9               	incf	___awtoft@c+1,f
  9534  1775  01AD               	clrf	___awtoft@sign
  9535  1776  0AAD               	incf	___awtoft@sign,f
  9536  1777                     l3171:	
  9537  1777  0828               	movf	___awtoft@c,w
  9538  1778  00A0               	movwf	___ftpack@arg
  9539  1779  0829               	movf	___awtoft@c+1,w
  9540  177A  00A1               	movwf	___ftpack@arg+1
  9541  177B  01A2               	clrf	___ftpack@arg+2
  9542  177C  308E               	movlw	142
  9543  177D  00AB               	movwf	??___awtoft
  9544  177E  082B               	movf	??___awtoft,w
  9545  177F  00A3               	movwf	___ftpack@exp
  9546  1780  082D               	movf	___awtoft@sign,w
  9547  1781  00AC               	movwf	??___awtoft+1
  9548  1782  082C               	movf	??___awtoft+1,w
  9549  1783  00A4               	movwf	___ftpack@sign
  9550  1784  318C  2492         	fcall	___ftpack
  9551  1786  0020               	movlb	0	; select bank0
  9552  1787  0820               	movf	?___ftpack,w
  9553  1788  00A8               	movwf	?___awtoft
  9554  1789  0821               	movf	?___ftpack+1,w
  9555  178A  00A9               	movwf	?___awtoft+1
  9556  178B  0822               	movf	?___ftpack+2,w
  9557  178C  00AA               	movwf	?___awtoft+2
  9558  178D  0008               	return
  9559  178E                     __end_of___awtoft:	
  9560                           
  9561                           	psect	text42
  9562  1608                     __ptext42:	
  9563 ;; *************** function _checkTXPower *****************
  9564 ;; Defined at:
  9565 ;;		line 157 in file "main.c"
  9566 ;; Parameters:    Size  Location     Type
  9567 ;;		None
  9568 ;; Auto vars:     Size  Location     Type
  9569 ;;  rxPacket        1    8[BANK0 ] PTR struct .
  9570 ;;		 -> RXPacket(33), 
  9571 ;; Return value:  Size  Location     Type
  9572 ;;                  1    wreg      void 
  9573 ;; Registers used:
  9574 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9575 ;; Tracked objects:
  9576 ;;		On entry : 0/0
  9577 ;;		On exit  : 0/0
  9578 ;;		Unchanged: 0/0
  9579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9581 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9582 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9583 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9584 ;;Total ram usage:        2 bytes
  9585 ;; Hardware stack levels used:    1
  9586 ;; Hardware stack levels required when called:   11
  9587 ;; This function calls:
  9588 ;;		_nrf24l01ChangeTXPower
  9589 ;;		_nrf24l01GetRXPacket
  9590 ;; This function is called by:
  9591 ;;		_loop
  9592 ;; This function uses a non-reentrant model
  9593 ;;
  9594                           
  9595                           
  9596                           ;psect for function _checkTXPower
  9597  1608                     _checkTXPower:	
  9598                           
  9599                           ;main.c: 158: nrf24l01Packet_t * rxPacket = nrf24l01GetRXPacket();
  9600                           
  9601                           ;incstack = 0
  9602                           ; Regs used in _checkTXPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9603  1608  3195  259A  3196   	fcall	_nrf24l01GetRXPacket
  9604  160B  0020               	movlb	0	; select bank0
  9605  160C  00A7               	movwf	??_checkTXPower
  9606  160D  0827               	movf	??_checkTXPower,w
  9607  160E  00A8               	movwf	checkTXPower@rxPacket
  9608                           
  9609                           ;main.c: 160: if (rxPacket->packetData.ACKRPD){
  9610  160F  0828               	movf	checkTXPower@rxPacket,w
  9611  1610  0086               	movwf	6
  9612  1611  3001               	movlw	1	; select bank2/3
  9613  1612  0087               	movwf	7
  9614  1613  1C81               	btfss	1,1
  9615  1614  0008               	return
  9616                           
  9617                           ;main.c: 161: nrf24l01ChangeTXPower(-1);
  9618  1615  30FF               	movlw	255
  9619  1616  00A3               	movwf	nrf24l01ChangeTXPower@addPower
  9620  1617  30FF               	movlw	255
  9621  1618  00A4               	movwf	nrf24l01ChangeTXPower@addPower+1
  9622  1619  3189  21AD         	fcall	_nrf24l01ChangeTXPower
  9623  161B  0008               	return
  9624  161C                     __end_of_checkTXPower:	
  9625                           
  9626                           	psect	text43
  9627  159A                     __ptext43:	
  9628 ;; *************** function _nrf24l01GetRXPacket *****************
  9629 ;; Defined at:
  9630 ;;		line 137 in file "nrf24l01.c"
  9631 ;; Parameters:    Size  Location     Type
  9632 ;;		None
  9633 ;; Auto vars:     Size  Location     Type
  9634 ;;		None
  9635 ;; Return value:  Size  Location     Type
  9636 ;;                  1    wreg      PTR struct .
  9637 ;; Registers used:
  9638 ;;		wreg
  9639 ;; Tracked objects:
  9640 ;;		On entry : 0/0
  9641 ;;		On exit  : 0/0
  9642 ;;		Unchanged: 0/0
  9643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9648 ;;Total ram usage:        0 bytes
  9649 ;; Hardware stack levels used:    1
  9650 ;; Hardware stack levels required when called:    7
  9651 ;; This function calls:
  9652 ;;		Nothing
  9653 ;; This function is called by:
  9654 ;;		_handleRXData
  9655 ;;		_checkTXPower
  9656 ;; This function uses a non-reentrant model
  9657 ;;
  9658                           
  9659                           
  9660                           ;psect for function _nrf24l01GetRXPacket
  9661  159A                     _nrf24l01GetRXPacket:	
  9662                           
  9663                           ;nrf24l01.c: 138: return &RXPacket;
  9664                           
  9665                           ;incstack = 0
  9666                           ; Regs used in _nrf24l01GetRXPacket: [wreg]
  9667  159A  30A0               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  9668  159B  0008               	return
  9669  159C                     __end_of_nrf24l01GetRXPacket:	
  9670                           
  9671                           	psect	text44
  9672  09AD                     __ptext44:	
  9673 ;; *************** function _nrf24l01ChangeTXPower *****************
  9674 ;; Defined at:
  9675 ;;		line 33 in file "nrf24l01.c"
  9676 ;; Parameters:    Size  Location     Type
  9677 ;;  addPower        2    3[BANK0 ] int 
  9678 ;; Auto vars:     Size  Location     Type
  9679 ;;  rfSetup         1    6[BANK0 ] struct .
  9680 ;; Return value:  Size  Location     Type
  9681 ;;                  1    wreg      void 
  9682 ;; Registers used:
  9683 ;;		wreg, status,2, status,0, pclath, cstack
  9684 ;; Tracked objects:
  9685 ;;		On entry : 0/0
  9686 ;;		On exit  : 0/0
  9687 ;;		Unchanged: 0/0
  9688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9689 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9690 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9691 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9692 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9693 ;;Total ram usage:        4 bytes
  9694 ;; Hardware stack levels used:    1
  9695 ;; Hardware stack levels required when called:   10
  9696 ;; This function calls:
  9697 ;;		_nrf24l01Send
  9698 ;; This function is called by:
  9699 ;;		_checkTXPower
  9700 ;;		_nrf24l01SendPacket
  9701 ;; This function uses a non-reentrant model
  9702 ;;
  9703                           
  9704                           
  9705                           ;psect for function _nrf24l01ChangeTXPower
  9706  09AD                     _nrf24l01ChangeTXPower:	
  9707                           
  9708                           ;nrf24l01.c: 35: n_RF_SETUP_t rfSetup;;nrf24l01.c: 36: rfSetup.byte = nrf24l01Send((unsi
      +                          gned) 0b00000000 | (unsigned) 0x06, 0);
  9709                           
  9710                           ;incstack = 0
  9711                           ; Regs used in _nrf24l01ChangeTXPower: [wreg+status,2+status,0+pclath+cstack]
  9712  09AD  0020               	movlb	0	; select bank0
  9713  09AE  01A0               	clrf	nrf24l01Send@data
  9714  09AF  3006               	movlw	6
  9715  09B0  3197  272B  3189   	fcall	_nrf24l01Send
  9716  09B3  0020               	movlb	0	; select bank0
  9717  09B4  00A5               	movwf	??_nrf24l01ChangeTXPower
  9718  09B5  0825               	movf	??_nrf24l01ChangeTXPower,w
  9719  09B6  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
  9720                           
  9721                           ;nrf24l01.c: 38: if (addPower > 0){
  9722  09B7  0824               	movf	nrf24l01ChangeTXPower@addPower+1,w
  9723  09B8  3A80               	xorlw	128
  9724  09B9  00A5               	movwf	??_nrf24l01ChangeTXPower
  9725  09BA  3080               	movlw	128
  9726  09BB  0225               	subwf	??_nrf24l01ChangeTXPower,w
  9727  09BC  1D03               	skipz
  9728  09BD  29C0               	goto	u2065
  9729  09BE  3001               	movlw	1
  9730  09BF  0223               	subwf	nrf24l01ChangeTXPower@addPower,w
  9731  09C0                     u2065:	
  9732  09C0  1C03               	skipc
  9733  09C1  29D2               	goto	l2535
  9734                           
  9735                           ;nrf24l01.c: 39: if (rfSetup.RF_PWR < 3){
  9736  09C2  0020               	movlb	0	; select bank0
  9737  09C3  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9738  09C4  3903               	andlw	3
  9739  09C5  3A03               	xorlw	3
  9740  09C6  1903               	skipnz
  9741  09C7  29D2               	goto	l2535
  9742                           
  9743                           ;nrf24l01.c: 40: rfSetup.RF_PWR++;
  9744  09C8  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9745  09C9  3903               	andlw	3
  9746  09CA  00A5               	movwf	??_nrf24l01ChangeTXPower
  9747  09CB  0AA5               	incf	??_nrf24l01ChangeTXPower,f
  9748  09CC  0DA5               	rlf	??_nrf24l01ChangeTXPower,f
  9749  09CD  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
  9750  09CE  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  9751  09CF  39F9               	andlw	-7
  9752  09D0  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  9753  09D1  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
  9754  09D2                     l2535:	
  9755                           
  9756                           ;nrf24l01.c: 41: };nrf24l01.c: 42: };nrf24l01.c: 44: if (addPower < 0){
  9757  09D2  0020               	movlb	0	; select bank0
  9758  09D3  1FA4               	btfss	nrf24l01ChangeTXPower@addPower+1,7
  9759  09D4  29E4               	goto	l2541
  9760                           
  9761                           ;nrf24l01.c: 45: if (rfSetup.RF_PWR > 0){
  9762  09D5  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9763  09D6  3903               	andlw	3
  9764  09D7  3A00               	xorlw	0
  9765  09D8  1903               	skipnz
  9766  09D9  29E4               	goto	l2541
  9767                           
  9768                           ;nrf24l01.c: 46: rfSetup.RF_PWR--;
  9769  09DA  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9770  09DB  3903               	andlw	3
  9771  09DC  00A5               	movwf	??_nrf24l01ChangeTXPower
  9772  09DD  03A5               	decf	??_nrf24l01ChangeTXPower,f
  9773  09DE  0DA5               	rlf	??_nrf24l01ChangeTXPower,f
  9774  09DF  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
  9775  09E0  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  9776  09E1  39F9               	andlw	-7
  9777  09E2  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  9778  09E3  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
  9779  09E4                     l2541:	
  9780                           
  9781                           ;nrf24l01.c: 47: };nrf24l01.c: 48: };nrf24l01.c: 50: nrf24l01Send((unsigned) 0b00100000 
      +                          | (unsigned) 0x06, rfSetup.byte);
  9782  09E4  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
  9783  09E5  00A5               	movwf	??_nrf24l01ChangeTXPower
  9784  09E6  0825               	movf	??_nrf24l01ChangeTXPower,w
  9785  09E7  00A0               	movwf	nrf24l01Send@data
  9786  09E8  3026               	movlw	38
  9787  09E9  3197  272B         	fcall	_nrf24l01Send
  9788  09EB  0008               	return
  9789  09EC                     __end_of_nrf24l01ChangeTXPower:	
  9790                           
  9791                           	psect	text45
  9792  172B                     __ptext45:	
  9793 ;; *************** function _nrf24l01Send *****************
  9794 ;; Defined at:
  9795 ;;		line 9 in file "nrf24l01.c"
  9796 ;; Parameters:    Size  Location     Type
  9797 ;;  command         1    wreg     unsigned char 
  9798 ;;  data            1    0[BANK0 ] unsigned char 
  9799 ;; Auto vars:     Size  Location     Type
  9800 ;;  command         1    2[BANK0 ] unsigned char 
  9801 ;; Return value:  Size  Location     Type
  9802 ;;                  1    wreg      unsigned char 
  9803 ;; Registers used:
  9804 ;;		wreg, status,2, status,0, pclath, cstack
  9805 ;; Tracked objects:
  9806 ;;		On entry : 0/0
  9807 ;;		On exit  : 0/0
  9808 ;;		Unchanged: 0/0
  9809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9810 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9811 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9812 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9813 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;Total ram usage:        3 bytes
  9815 ;; Hardware stack levels used:    1
  9816 ;; Hardware stack levels required when called:    9
  9817 ;; This function calls:
  9818 ;;		_enableInterrupts
  9819 ;;		_nrf24l01SPIEnd
  9820 ;;		_nrf24l01SPISend
  9821 ;;		_nrf24l01SPIStart
  9822 ;; This function is called by:
  9823 ;;		_loop
  9824 ;;		_nrf24l01ChangeTXPower
  9825 ;;		_nrf24l01SetRXMode
  9826 ;;		_nrf24l01ReceivePacket
  9827 ;;		_nrf24l01ISR
  9828 ;;		_nrf24l01SetRXPipe
  9829 ;;		_nrf24l01InitRegisters
  9830 ;; This function uses a non-reentrant model
  9831 ;;
  9832                           
  9833                           
  9834                           ;psect for function _nrf24l01Send
  9835  172B                     _nrf24l01Send:	
  9836                           
  9837                           ;incstack = 0
  9838                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  9839                           ;nrf24l01Send@command stored from wreg
  9840  172B  0020               	movlb	0	; select bank0
  9841  172C  00A2               	movwf	nrf24l01Send@command
  9842                           
  9843                           ;nrf24l01.c: 12: enableInterrupts(0);
  9844  172D  3000               	movlw	0
  9845  172E  3195  25AF  3197   	fcall	_enableInterrupts
  9846                           
  9847                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  9848  1731  3195  25B7  3197   	fcall	_nrf24l01SPIStart
  9849                           
  9850                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  9851  1734  0020               	movlb	0	; select bank0
  9852  1735  0822               	movf	nrf24l01Send@command,w
  9853  1736  3195  25C8  3197   	fcall	_nrf24l01SPISend
  9854                           
  9855                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  9856  1739  0020               	movlb	0	; select bank0
  9857  173A  0820               	movf	nrf24l01Send@data,w
  9858  173B  3195  25C8  3197   	fcall	_nrf24l01SPISend
  9859  173E  0020               	movlb	0	; select bank0
  9860  173F  00A1               	movwf	??_nrf24l01Send
  9861  1740  0821               	movf	??_nrf24l01Send,w
  9862  1741  00A0               	movwf	nrf24l01Send@data
  9863                           
  9864                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  9865  1742  3195  25A8  3197   	fcall	_nrf24l01SPIEnd
  9866                           
  9867                           ;nrf24l01.c: 27: enableInterrupts(1);
  9868  1745  3001               	movlw	1
  9869  1746  3195  25AF         	fcall	_enableInterrupts
  9870                           
  9871                           ;nrf24l01.c: 29: return data;
  9872  1748  0020               	movlb	0	; select bank0
  9873  1749  0820               	movf	nrf24l01Send@data,w
  9874  174A  0008               	return
  9875  174B                     __end_of_nrf24l01Send:	
  9876                           
  9877                           	psect	text46
  9878  167F                     __ptext46:	
  9879 ;; *************** function ___lbtoft *****************
  9880 ;; Defined at:
  9881 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
  9882 ;; Parameters:    Size  Location     Type
  9883 ;;  c               1    wreg     unsigned char 
  9884 ;; Auto vars:     Size  Location     Type
  9885 ;;  c               1   15[BANK0 ] unsigned char 
  9886 ;; Return value:  Size  Location     Type
  9887 ;;                  3    8[BANK0 ] float 
  9888 ;; Registers used:
  9889 ;;		wreg, status,2, status,0, pclath, cstack
  9890 ;; Tracked objects:
  9891 ;;		On entry : 0/0
  9892 ;;		On exit  : 0/0
  9893 ;;		Unchanged: 0/0
  9894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9895 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9896 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9897 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9898 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9899 ;;Total ram usage:        8 bytes
  9900 ;; Hardware stack levels used:    1
  9901 ;; Hardware stack levels required when called:    8
  9902 ;; This function calls:
  9903 ;;		___ftpack
  9904 ;; This function is called by:
  9905 ;;		_loop
  9906 ;;		_main
  9907 ;; This function uses a non-reentrant model
  9908 ;;
  9909                           
  9910                           
  9911                           ;psect for function ___lbtoft
  9912  167F                     ___lbtoft:	
  9913                           
  9914                           ;incstack = 0
  9915                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  9916                           ;___lbtoft@c stored from wreg
  9917  167F  0020               	movlb	0	; select bank0
  9918  1680  00AF               	movwf	___lbtoft@c
  9919  1681  082F               	movf	___lbtoft@c,w
  9920  1682  00AB               	movwf	??___lbtoft
  9921  1683  01AC               	clrf	??___lbtoft+1
  9922  1684  01AD               	clrf	??___lbtoft+2
  9923  1685  082B               	movf	??___lbtoft,w
  9924  1686  00A0               	movwf	___ftpack@arg
  9925  1687  082C               	movf	??___lbtoft+1,w
  9926  1688  00A1               	movwf	___ftpack@arg+1
  9927  1689  082D               	movf	??___lbtoft+2,w
  9928  168A  00A2               	movwf	___ftpack@arg+2
  9929  168B  308E               	movlw	142
  9930  168C  00AE               	movwf	??___lbtoft+3
  9931  168D  082E               	movf	??___lbtoft+3,w
  9932  168E  00A3               	movwf	___ftpack@exp
  9933  168F  01A4               	clrf	___ftpack@sign
  9934  1690  318C  2492         	fcall	___ftpack
  9935  1692  0020               	movlb	0	; select bank0
  9936  1693  0820               	movf	?___ftpack,w
  9937  1694  00A8               	movwf	?___lbtoft
  9938  1695  0821               	movf	?___ftpack+1,w
  9939  1696  00A9               	movwf	?___lbtoft+1
  9940  1697  0822               	movf	?___ftpack+2,w
  9941  1698  00AA               	movwf	?___lbtoft+2
  9942  1699  0008               	return
  9943  169A                     __end_of___lbtoft:	
  9944                           
  9945                           	psect	text47
  9946  0C92                     __ptext47:	
  9947 ;; *************** function ___ftpack *****************
  9948 ;; Defined at:
  9949 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  9950 ;; Parameters:    Size  Location     Type
  9951 ;;  arg             3    0[BANK0 ] unsigned um
  9952 ;;  exp             1    3[BANK0 ] unsigned char 
  9953 ;;  sign            1    4[BANK0 ] unsigned char 
  9954 ;; Auto vars:     Size  Location     Type
  9955 ;;		None
  9956 ;; Return value:  Size  Location     Type
  9957 ;;                  3    0[BANK0 ] float 
  9958 ;; Registers used:
  9959 ;;		wreg, status,2, status,0
  9960 ;; Tracked objects:
  9961 ;;		On entry : 0/0
  9962 ;;		On exit  : 0/0
  9963 ;;		Unchanged: 0/0
  9964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9965 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9968 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9969 ;;Total ram usage:        8 bytes
  9970 ;; Hardware stack levels used:    1
  9971 ;; Hardware stack levels required when called:    7
  9972 ;; This function calls:
  9973 ;;		Nothing
  9974 ;; This function is called by:
  9975 ;;		___awtoft
  9976 ;;		___ftadd
  9977 ;;		___ftdiv
  9978 ;;		___ftmul
  9979 ;;		___lbtoft
  9980 ;;		___lltoft
  9981 ;; This function uses a non-reentrant model
  9982 ;;
  9983                           
  9984                           
  9985                           ;psect for function ___ftpack
  9986  0C92                     ___ftpack:	
  9987                           
  9988                           ;incstack = 0
  9989                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9990  0C92  0020               	movlb	0	; select bank0
  9991  0C93  0823               	movf	___ftpack@exp,w
  9992  0C94  1903               	btfsc	3,2
  9993  0C95  2C9B               	goto	l2571
  9994  0C96  0822               	movf	___ftpack@arg+2,w
  9995  0C97  0421               	iorwf	___ftpack@arg+1,w
  9996  0C98  0420               	iorwf	___ftpack@arg,w
  9997  0C99  1D03               	skipz
  9998  0C9A  2CAC               	goto	l2577
  9999  0C9B                     l2571:	
 10000  0C9B  3000               	movlw	0
 10001  0C9C  00A0               	movwf	?___ftpack
 10002  0C9D  3000               	movlw	0
 10003  0C9E  00A1               	movwf	?___ftpack+1
 10004  0C9F  3000               	movlw	0
 10005  0CA0  00A2               	movwf	?___ftpack+2
 10006  0CA1  0008               	return
 10007  0CA2                     l2575:	
 10008  0CA2  3001               	movlw	1
 10009  0CA3  00A5               	movwf	??___ftpack
 10010  0CA4  0825               	movf	??___ftpack,w
 10011  0CA5  07A3               	addwf	___ftpack@exp,f
 10012  0CA6  3001               	movlw	1
 10013  0CA7                     u2155:	
 10014  0CA7  36A2               	lsrf	___ftpack@arg+2,f
 10015  0CA8  0CA1               	rrf	___ftpack@arg+1,f
 10016  0CA9  0CA0               	rrf	___ftpack@arg,f
 10017  0CAA  0B89               	decfsz	9,f
 10018  0CAB  2CA7               	goto	u2155
 10019  0CAC                     l2577:	
 10020  0CAC  30FE               	movlw	254
 10021  0CAD  0522               	andwf	___ftpack@arg+2,w
 10022  0CAE  1903               	btfsc	3,2
 10023  0CAF  2CC5               	goto	l688
 10024  0CB0  2CA2               	goto	l2575
 10025  0CB1                     l2579:	
 10026  0CB1  3001               	movlw	1
 10027  0CB2  00A5               	movwf	??___ftpack
 10028  0CB3  0825               	movf	??___ftpack,w
 10029  0CB4  07A3               	addwf	___ftpack@exp,f
 10030  0CB5  3001               	movlw	1
 10031  0CB6  07A0               	addwf	___ftpack@arg,f
 10032  0CB7  3000               	movlw	0
 10033  0CB8  1803               	skipnc
 10034  0CB9  3001               	movlw	1
 10035  0CBA  07A1               	addwf	___ftpack@arg+1,f
 10036  0CBB  3000               	movlw	0
 10037  0CBC  1803               	skipnc
 10038  0CBD  3001               	movlw	1
 10039  0CBE  07A2               	addwf	___ftpack@arg+2,f
 10040  0CBF  3001               	movlw	1
 10041  0CC0                     u2175:	
 10042  0CC0  36A2               	lsrf	___ftpack@arg+2,f
 10043  0CC1  0CA1               	rrf	___ftpack@arg+1,f
 10044  0CC2  0CA0               	rrf	___ftpack@arg,f
 10045  0CC3  0B89               	decfsz	9,f
 10046  0CC4  2CC0               	goto	u2175
 10047  0CC5                     l688:	
 10048  0CC5  30FF               	movlw	255
 10049  0CC6  0522               	andwf	___ftpack@arg+2,w
 10050  0CC7  1903               	btfsc	3,2
 10051  0CC8  2CD2               	goto	l2587
 10052  0CC9  2CB1               	goto	l2579
 10053  0CCA                     l2585:	
 10054  0CCA  3001               	movlw	1
 10055  0CCB  02A3               	subwf	___ftpack@exp,f
 10056  0CCC  3001               	movlw	1
 10057  0CCD                     u2195:	
 10058  0CCD  35A0               	lslf	___ftpack@arg,f
 10059  0CCE  0DA1               	rlf	___ftpack@arg+1,f
 10060  0CCF  0DA2               	rlf	___ftpack@arg+2,f
 10061  0CD0  0B89               	decfsz	9,f
 10062  0CD1  2CCD               	goto	u2195
 10063  0CD2                     l2587:	
 10064  0CD2  1BA1               	btfsc	___ftpack@arg+1,7
 10065  0CD3  2CD8               	goto	l695
 10066  0CD4  3002               	movlw	2
 10067  0CD5  0223               	subwf	___ftpack@exp,w
 10068  0CD6  1803               	skipnc
 10069  0CD7  2CCA               	goto	l2585
 10070  0CD8                     l695:	
 10071  0CD8  1823               	btfsc	___ftpack@exp,0
 10072  0CD9  2CE0               	goto	l696
 10073  0CDA  30FF               	movlw	255
 10074  0CDB  05A0               	andwf	___ftpack@arg,f
 10075  0CDC  307F               	movlw	127
 10076  0CDD  05A1               	andwf	___ftpack@arg+1,f
 10077  0CDE  30FF               	movlw	255
 10078  0CDF  05A2               	andwf	___ftpack@arg+2,f
 10079  0CE0                     l696:	
 10080  0CE0  1003               	clrc
 10081  0CE1  0CA3               	rrf	___ftpack@exp,f
 10082  0CE2  0823               	movf	___ftpack@exp,w
 10083  0CE3  00A5               	movwf	??___ftpack
 10084  0CE4  01A6               	clrf	??___ftpack+1
 10085  0CE5  01A7               	clrf	??___ftpack+2
 10086  0CE6  3010               	movlw	16
 10087  0CE7                     u2235:	
 10088  0CE7  35A5               	lslf	??___ftpack,f
 10089  0CE8  0DA6               	rlf	??___ftpack+1,f
 10090  0CE9  0DA7               	rlf	??___ftpack+2,f
 10091  0CEA  0B89               	decfsz	9,f
 10092  0CEB  2CE7               	goto	u2235
 10093  0CEC  0825               	movf	??___ftpack,w
 10094  0CED  04A0               	iorwf	___ftpack@arg,f
 10095  0CEE  0826               	movf	??___ftpack+1,w
 10096  0CEF  04A1               	iorwf	___ftpack@arg+1,f
 10097  0CF0  0827               	movf	??___ftpack+2,w
 10098  0CF1  04A2               	iorwf	___ftpack@arg+2,f
 10099  0CF2  0824               	movf	___ftpack@sign,w
 10100  0CF3  1903               	btfsc	3,2
 10101  0CF4  0008               	return
 10102  0CF5  17A2               	bsf	___ftpack@arg+2,7
 10103  0CF6  0008               	return
 10104  0CF7                     __end_of___ftpack:	
 10105                           
 10106                           	psect	intentry
 10107  0004                     __pintentry:	
 10108 ;; *************** function _ISR *****************
 10109 ;; Defined at:
 10110 ;;		line 14 in file "main.c"
 10111 ;; Parameters:    Size  Location     Type
 10112 ;;		None
 10113 ;; Auto vars:     Size  Location     Type
 10114 ;;		None
 10115 ;; Return value:  Size  Location     Type
 10116 ;;                  1    wreg      void 
 10117 ;; Registers used:
 10118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10119 ;; Tracked objects:
 10120 ;;		On entry : 0/0
 10121 ;;		On exit  : 0/0
 10122 ;;		Unchanged: 0/0
 10123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10128 ;;Total ram usage:        0 bytes
 10129 ;; Hardware stack levels used:    1
 10130 ;; Hardware stack levels required when called:    6
 10131 ;; This function calls:
 10132 ;;		i1_nrf24l01ISR
 10133 ;; This function is called by:
 10134 ;;		Interrupt level 1
 10135 ;; This function uses a non-reentrant model
 10136 ;;
 10137                           
 10138  0004                     _ISR:	
 10139                           
 10140                           ;incstack = 0
 10141 ;; hardware stack exceeded
 10142  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10143                           
 10144                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10145  0005  3180               	pagesel	$
 10146                           
 10147                           ;main.c: 16: if (PIR0bits.INTF){
 10148  0006  0020               	movlb	0	; select bank0
 10149  0007  1C10               	btfss	16,0	;volatile
 10150  0008  280D               	goto	i1l167
 10151                           
 10152                           ;main.c: 17: nrf24l01ISR();
 10153  0009  318A  22B7         	fcall	i1_nrf24l01ISR
 10154                           
 10155                           ;main.c: 18: PIR0bits.INTF = 0;
 10156  000B  0020               	movlb	0	; select bank0
 10157  000C  1010               	bcf	16,0	;volatile
 10158  000D                     i1l167:	
 10159  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10160  000E  0009               	retfie
 10161  000F                     __end_of_ISR:	
 10162                           
 10163                           	psect	text49
 10164  0AB7                     __ptext49:	
 10165 ;; *************** function i1_nrf24l01ISR *****************
 10166 ;; Defined at:
 10167 ;;		line 261 in file "nrf24l01.c"
 10168 ;; Parameters:    Size  Location     Type
 10169 ;;		None
 10170 ;; Auto vars:     Size  Location     Type
 10171 ;;  nrf24l01ISR     1   12[COMMON] struct .
 10172 ;; Return value:  Size  Location     Type
 10173 ;;                  1    wreg      void 
 10174 ;; Registers used:
 10175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10176 ;; Tracked objects:
 10177 ;;		On entry : 0/0
 10178 ;;		On exit  : 0/0
 10179 ;;		Unchanged: 0/0
 10180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10182 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10183 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10184 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10185 ;;Total ram usage:        2 bytes
 10186 ;; Hardware stack levels used:    1
 10187 ;; Hardware stack levels required when called:    5
 10188 ;; This function calls:
 10189 ;;		i1_exception
 10190 ;;		i1_nrf24l01CheckACK
 10191 ;;		i1_nrf24l01ReceivePacket
 10192 ;;		i1_nrf24l01Send
 10193 ;;		i1_nrf24l01SetRXMode
 10194 ;; This function is called by:
 10195 ;;		_ISR
 10196 ;; This function uses a non-reentrant model
 10197 ;;
 10198                           
 10199                           
 10200                           ;psect for function i1_nrf24l01ISR
 10201  0AB7                     i1_nrf24l01ISR:	
 10202                           
 10203                           ;nrf24l01.c: 263: n_STATUS_t status;;nrf24l01.c: 264: status.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x07, 0);
 10204                           
 10205                           ;incstack = 0
 10206 ;; hardware stack exceeded
 10207                           ; Regs used in i1_nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10208  0AB7  01F1               	clrf	i1nrf24l01Send@data
 10209  0AB8  3007               	movlw	7
 10210  0AB9  3196  2664  318A   	fcall	i1_nrf24l01Send
 10211  0ABC  00FB               	movwf	??i1_nrf24l01ISR
 10212  0ABD  087B               	movf	??i1_nrf24l01ISR,w
 10213  0ABE  00FC               	movwf	i1nrf24l01ISR@status
 10214                           
 10215                           ;nrf24l01.c: 269: };nrf24l01.c: 272: if (status.byte == 0xFF){
 10216  0ABF  0A7C               	incf	i1nrf24l01ISR@status,w
 10217  0AC0  1D03               	btfss	3,2
 10218  0AC1  2AC6               	goto	i1l3643
 10219                           
 10220                           ;nrf24l01.c: 273: exception(2);
 10221  0AC2  3002               	movlw	2
 10222  0AC3  3195  2598  318A   	fcall	i1_exception
 10223  0AC6                     i1l3643:	
 10224                           
 10225                           ;nrf24l01.c: 274: };nrf24l01.c: 276: if (status.TX_DS){
 10226  0AC6  1EFC               	btfss	i1nrf24l01ISR@status,5
 10227  0AC7  2AD6               	goto	i1l3651
 10228                           
 10229                           ;nrf24l01.c: 279: nrf24l01.TXBusy = 0;
 10230  0AC8  107D               	bcf	_nrf24l01,0	;volatile
 10231                           
 10232                           ;nrf24l01.c: 282: if (!nrf24l01.RXMode){
 10233  0AC9  197D               	btfsc	_nrf24l01,2	;volatile
 10234  0ACA  2AD6               	goto	i1l3651
 10235                           
 10236                           ;nrf24l01.c: 283: if (TXPacket->packetData.ACKRequest){
 10237  0ACB  0021               	movlb	1	; select bank1
 10238  0ACC  0868               	movf	_TXPacket^(0+128),w
 10239  0ACD  0086               	movwf	6
 10240  0ACE  0869               	movf	(_TXPacket+1)^(0+128),w
 10241  0ACF  0087               	movwf	7
 10242  0AD0  1D01               	btfss	1,2
 10243  0AD1  2AD6               	goto	i1l3651
 10244                           
 10245                           ;nrf24l01.c: 286: nrf24l01SetRXMode(1);
 10246  0AD2  3001               	movlw	1
 10247  0AD3  318A  222F  318A   	fcall	i1_nrf24l01SetRXMode
 10248  0AD6                     i1l3651:	
 10249                           
 10250                           ;nrf24l01.c: 287: };nrf24l01.c: 288: };nrf24l01.c: 289: };nrf24l01.c: 292: if (status.RX
      +                          _DR){
 10251  0AD6  1F7C               	btfss	i1nrf24l01ISR@status,6
 10252  0AD7  2AF8               	goto	i1l3665
 10253                           
 10254                           ;nrf24l01.c: 295: if (!nrf24l01.RXPending){
 10255  0AD8  18FD               	btfsc	_nrf24l01,1	;volatile
 10256  0AD9  2AF7               	goto	i1l330
 10257                           
 10258                           ;nrf24l01.c: 298: nrf24l01.RXPending = 1;
 10259  0ADA  14FD               	bsf	_nrf24l01,1	;volatile
 10260                           
 10261                           ;nrf24l01.c: 300: nrf24l01ReceivePacket();
 10262  0ADB  318B  2349  318A   	fcall	i1_nrf24l01ReceivePacket
 10263                           
 10264                           ;nrf24l01.c: 303: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
 10265  0ADE  01F1               	clrf	i1nrf24l01Send@data
 10266  0ADF  3009               	movlw	9
 10267  0AE0  3196  2664  318A   	fcall	i1_nrf24l01Send
 10268  0AE3  00FB               	movwf	??i1_nrf24l01ISR
 10269  0AE4  0023               	movlb	3	; select bank3
 10270  0AE5  0820               	movf	_RXPacket^(0+384),w
 10271  0AE6  067B               	xorwf	??i1_nrf24l01ISR,w
 10272  0AE7  39FE               	andlw	-2
 10273  0AE8  067B               	xorwf	??i1_nrf24l01ISR,w
 10274  0AE9  00A0               	movwf	_RXPacket^(0+384)
 10275                           
 10276                           ;nrf24l01.c: 306: RXPacket.packetData.Pipe = status.RX_P_NO;
 10277  0AEA  0C7C               	rrf	i1nrf24l01ISR@status,w
 10278  0AEB  3907               	andlw	7
 10279  0AEC  00FB               	movwf	??i1_nrf24l01ISR
 10280  0AED  0EFB               	swapf	??i1_nrf24l01ISR,f
 10281  0AEE  0820               	movf	_RXPacket^(0+384),w
 10282  0AEF  067B               	xorwf	??i1_nrf24l01ISR,w
 10283  0AF0  398F               	andlw	-113
 10284  0AF1  067B               	xorwf	??i1_nrf24l01ISR,w
 10285  0AF2  00A0               	movwf	_RXPacket^(0+384)
 10286                           
 10287                           ;nrf24l01.c: 308: nrf24l01CheckACK();
 10288  0AF3  3188  202C  318A   	fcall	i1_nrf24l01CheckACK
 10289                           
 10290                           ;nrf24l01.c: 309: }
 10291  0AF6  2AF8               	goto	i1l3665
 10292  0AF7                     i1l330:	
 10293                           
 10294                           ;nrf24l01.c: 312: else{;nrf24l01.c: 315: status.RX_DR = 0;
 10295  0AF7  137C               	bcf	i1nrf24l01ISR@status,6
 10296  0AF8                     i1l3665:	
 10297                           
 10298                           ;nrf24l01.c: 316: };nrf24l01.c: 318: };nrf24l01.c: 321: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.byte);
 10299  0AF8  087C               	movf	i1nrf24l01ISR@status,w
 10300  0AF9  00FB               	movwf	??i1_nrf24l01ISR
 10301  0AFA  087B               	movf	??i1_nrf24l01ISR,w
 10302  0AFB  00F1               	movwf	i1nrf24l01Send@data
 10303  0AFC  3027               	movlw	39
 10304  0AFD  3196  2664         	fcall	i1_nrf24l01Send
 10305  0AFF  0008               	return
 10306  0B00                     __end_ofi1_nrf24l01ISR:	
 10307                           
 10308                           	psect	text50
 10309  0B49                     __ptext50:	
 10310 ;; *************** function i1_nrf24l01ReceivePacket *****************
 10311 ;; Defined at:
 10312 ;;		line 141 in file "nrf24l01.c"
 10313 ;; Parameters:    Size  Location     Type
 10314 ;;		None
 10315 ;; Auto vars:     Size  Location     Type
 10316 ;;  nrf24l01Rece    1   10[COMMON] unsigned char 
 10317 ;;  nrf24l01Rece    1    9[COMMON] unsigned char 
 10318 ;; Return value:  Size  Location     Type
 10319 ;;                  1    wreg      void 
 10320 ;; Registers used:
 10321 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10322 ;; Tracked objects:
 10323 ;;		On entry : 0/0
 10324 ;;		On exit  : 0/0
 10325 ;;		Unchanged: 0/0
 10326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10328 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10329 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10330 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10331 ;;Total ram usage:        3 bytes
 10332 ;; Hardware stack levels used:    1
 10333 ;; Hardware stack levels required when called:    3
 10334 ;; This function calls:
 10335 ;;		_nrf24l01CEHigh
 10336 ;;		_nrf24l01CELow
 10337 ;;		_nrf24l01SPIEnd
 10338 ;;		_nrf24l01SPISend
 10339 ;;		_nrf24l01SPIStart
 10340 ;;		i1_memset
 10341 ;;		i1_nrf24l01Send
 10342 ;; This function is called by:
 10343 ;;		i1_nrf24l01ISR
 10344 ;; This function uses a non-reentrant model
 10345 ;;
 10346                           
 10347                           
 10348                           ;psect for function i1_nrf24l01ReceivePacket
 10349  0B49                     i1_nrf24l01ReceivePacket:	
 10350                           
 10351                           ;nrf24l01.c: 144: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
 10352                           
 10353                           ;incstack = 0
 10354 ;; hardware stack exceeded
 10355                           ; Regs used in i1_nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10356  0B49  30A1               	movlw	low (_RXPacket+1)
 10357  0B4A  00F0               	movwf	i1memset@p1
 10358  0B4B  3001               	movlw	high (_RXPacket+1)
 10359  0B4C  00F1               	movwf	i1memset@p1+1
 10360  0B4D  3000               	movlw	0
 10361  0B4E  00F2               	movwf	i1memset@c
 10362  0B4F  00F3               	movwf	i1memset@c+1
 10363  0B50  3020               	movlw	32
 10364  0B51  00F4               	movwf	i1memset@n
 10365  0B52  3000               	movlw	0
 10366  0B53  00F5               	movwf	i1memset@n+1
 10367  0B54  3196  2633  318B   	fcall	i1_memset
 10368                           
 10369                           ;nrf24l01.c: 145: RXPacket.packetData.byte = 0x00;
 10370  0B57  0023               	movlb	3	; select bank3
 10371  0B58  01A0               	clrf	_RXPacket^(0+384)
 10372                           
 10373                           ;nrf24l01.c: 148: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
 10374  0B59  01F1               	clrf	i1nrf24l01Send@data
 10375  0B5A  3060               	movlw	96
 10376  0B5B  3196  2664  318B   	fcall	i1_nrf24l01Send
 10377  0B5E  00F8               	movwf	??i1_nrf24l01ReceivePacket
 10378  0B5F  0878               	movf	??i1_nrf24l01ReceivePacket,w
 10379  0B60  00F9               	movwf	i1nrf24l01ReceivePacket@width
 10380                           
 10381                           ;nrf24l01.c: 149: unsigned char i = 0;
 10382  0B61  01FA               	clrf	i1nrf24l01ReceivePacket@i
 10383                           
 10384                           ;nrf24l01.c: 152: nrf24l01CELow();
 10385  0B62  3195  259F  318B   	fcall	_nrf24l01CELow
 10386                           
 10387                           ;nrf24l01.c: 155: nrf24l01SPIStart();
 10388  0B65  3195  25B7  318B   	fcall	_nrf24l01SPIStart
 10389                           
 10390                           ;nrf24l01.c: 158: nrf24l01SPISend((unsigned) 0b01100001);
 10391  0B68  3061               	movlw	97
 10392  0B69  3195  25C8  318B   	fcall	_nrf24l01SPISend
 10393                           
 10394                           ;nrf24l01.c: 161: RXPacket.packetData.byte = nrf24l01SPISend(0);
 10395  0B6C  3000               	movlw	0
 10396  0B6D  3195  25C8  318B   	fcall	_nrf24l01SPISend
 10397  0B70  00F8               	movwf	??i1_nrf24l01ReceivePacket
 10398  0B71  0878               	movf	??i1_nrf24l01ReceivePacket,w
 10399  0B72  0023               	movlb	3	; select bank3
 10400  0B73  00A0               	movwf	_RXPacket^(0+384)
 10401                           
 10402                           ;nrf24l01.c: 162: width--;
 10403  0B74  3001               	movlw	1
 10404  0B75  02F9               	subwf	i1nrf24l01ReceivePacket@width,f
 10405                           
 10406                           ;nrf24l01.c: 164: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
 10407  0B76  01FA               	clrf	i1nrf24l01ReceivePacket@i
 10408  0B77  2B88               	goto	i1l3517
 10409  0B78                     i1l3513:	
 10410                           
 10411                           ;nrf24l01.c: 166: RXPacket.Message[i] = nrf24l01SPISend(0);
 10412  0B78  3000               	movlw	0
 10413  0B79  3195  25C8  318B   	fcall	_nrf24l01SPISend
 10414  0B7C  00F8               	movwf	??i1_nrf24l01ReceivePacket
 10415  0B7D  087A               	movf	i1nrf24l01ReceivePacket@i,w
 10416  0B7E  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 10417  0B7F  0086               	movwf	6
 10418  0B80  3001               	movlw	1	; select bank3/4
 10419  0B81  0087               	movwf	7
 10420  0B82  0878               	movf	??i1_nrf24l01ReceivePacket,w
 10421  0B83  0081               	movwf	1
 10422  0B84  3001               	movlw	1
 10423  0B85  00F8               	movwf	??i1_nrf24l01ReceivePacket
 10424  0B86  0878               	movf	??i1_nrf24l01ReceivePacket,w
 10425  0B87  07FA               	addwf	i1nrf24l01ReceivePacket@i,f
 10426  0B88                     i1l3517:	
 10427  0B88  0879               	movf	i1nrf24l01ReceivePacket@width,w
 10428  0B89  027A               	subwf	i1nrf24l01ReceivePacket@i,w
 10429  0B8A  1803               	skipnc
 10430  0B8B  2B90               	goto	i1l3521
 10431  0B8C  3020               	movlw	32
 10432  0B8D  027A               	subwf	i1nrf24l01ReceivePacket@i,w
 10433  0B8E  1C03               	skipc
 10434  0B8F  2B78               	goto	i1l3513
 10435  0B90                     i1l3521:	
 10436                           
 10437                           ;nrf24l01.c: 167: };nrf24l01.c: 170: nrf24l01SPIEnd();
 10438  0B90  3195  25A8  318B   	fcall	_nrf24l01SPIEnd
 10439                           
 10440                           ;nrf24l01.c: 173: nrf24l01CEHigh();
 10441  0B93  3195  259C         	fcall	_nrf24l01CEHigh
 10442  0B95  0008               	return
 10443  0B96                     __end_ofi1_nrf24l01ReceivePacket:	
 10444                           
 10445                           	psect	text51
 10446  1633                     __ptext51:	
 10447 ;; *************** function i1_memset *****************
 10448 ;; Defined at:
 10449 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
 10450 ;; Parameters:    Size  Location     Type
 10451 ;;  p1              2    0[COMMON] PTR void 
 10452 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 10453 ;;  c               2    2[COMMON] int 
 10454 ;;  n               2    4[COMMON] unsigned int 
 10455 ;; Auto vars:     Size  Location     Type
 10456 ;;  memset          2    6[COMMON] PTR unsigned char 
 10457 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 10458 ;; Return value:  Size  Location     Type
 10459 ;;                  1    wreg      PTR void 
 10460 ;; Registers used:
 10461 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10462 ;; Tracked objects:
 10463 ;;		On entry : 0/0
 10464 ;;		On exit  : 0/0
 10465 ;;		Unchanged: 0/0
 10466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10467 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10468 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10470 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10471 ;;Total ram usage:        8 bytes
 10472 ;; Hardware stack levels used:    1
 10473 ;; This function calls:
 10474 ;;		Nothing
 10475 ;; This function is called by:
 10476 ;;		i1_nrf24l01ReceivePacket
 10477 ;; This function uses a non-reentrant model
 10478 ;;
 10479                           
 10480                           
 10481                           ;psect for function i1_memset
 10482  1633                     i1_memset:	
 10483                           
 10484                           ;incstack = 0
 10485                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 10486  1633  0871               	movf	i1memset@p1+1,w
 10487  1634  00F7               	movwf	i1memset@p+1
 10488  1635  0870               	movf	i1memset@p1,w
 10489  1636  00F6               	movwf	i1memset@p
 10490  1637                     i1l3251:	
 10491  1637  3001               	movlw	1
 10492  1638  02F4               	subwf	i1memset@n,f
 10493  1639  3000               	movlw	0
 10494  163A  3BF5               	subwfb	i1memset@n+1,f
 10495  163B  0A74               	incf	i1memset@n,w
 10496  163C  1903               	btfsc	3,2
 10497  163D  0A75               	incf	i1memset@n+1,w
 10498  163E  1903               	btfsc	3,2
 10499  163F  0008               	return
 10500  1640  0876               	movf	i1memset@p,w
 10501  1641  0086               	movwf	6
 10502  1642  0877               	movf	i1memset@p+1,w
 10503  1643  0087               	movwf	7
 10504  1644  0872               	movf	i1memset@c,w
 10505  1645  0081               	movwf	1
 10506  1646  3001               	movlw	1
 10507  1647  07F6               	addwf	i1memset@p,f
 10508  1648  3000               	movlw	0
 10509  1649  3DF7               	addwfc	i1memset@p+1,f
 10510  164A  2E37               	goto	i1l3251
 10511  164B                     __end_ofi1_memset:	
 10512                           ;	Return value of i1_memset is never used
 10513                           
 10514                           
 10515                           	psect	text52
 10516  082C                     __ptext52:	
 10517 ;; *************** function i1_nrf24l01CheckACK *****************
 10518 ;; Defined at:
 10519 ;;		line 104 in file "nrf24l01.c"
 10520 ;; Parameters:    Size  Location     Type
 10521 ;;		None
 10522 ;; Auto vars:     Size  Location     Type
 10523 ;;		None
 10524 ;; Return value:  Size  Location     Type
 10525 ;;                  1    wreg      void 
 10526 ;; Registers used:
 10527 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10528 ;; Tracked objects:
 10529 ;;		On entry : 0/0
 10530 ;;		On exit  : 0/0
 10531 ;;		Unchanged: 0/0
 10532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10535 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10536 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10537 ;;Total ram usage:        3 bytes
 10538 ;; Hardware stack levels used:    1
 10539 ;; Hardware stack levels required when called:    4
 10540 ;; This function calls:
 10541 ;;		i1_nrf24l01SetRXMode
 10542 ;;		i1_strcmp
 10543 ;; This function is called by:
 10544 ;;		i1_nrf24l01ISR
 10545 ;; This function uses a non-reentrant model
 10546 ;;
 10547                           
 10548                           
 10549                           ;psect for function i1_nrf24l01CheckACK
 10550  082C                     i1_nrf24l01CheckACK:	
 10551                           
 10552                           ;nrf24l01.c: 108: if (!RXPacket.packetData.IsACK){
 10553                           
 10554                           ;incstack = 0
 10555 ;; hardware stack exceeded
 10556                           ; Regs used in i1_nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10557  082C  0023               	movlb	3	; select bank3
 10558  082D  1DA0               	btfss	_RXPacket^(0+384),3
 10559  082E  0008               	return
 10560                           
 10561                           ;nrf24l01.c: 110: };nrf24l01.c: 113: nrf24l01.RXPending = 0;
 10562                           
 10563                           ;nrf24l01.c: 109: return;
 10564  082F  10FD               	bcf	_nrf24l01,1	;volatile
 10565                           
 10566                           ;nrf24l01.c: 116: if (!TXPacket->packetData.ACKRequest){
 10567  0830  0021               	movlb	1	; select bank1
 10568  0831  0868               	movf	_TXPacket^(0+128),w
 10569  0832  0086               	movwf	6
 10570  0833  0869               	movf	(_TXPacket+1)^(0+128),w
 10571  0834  0087               	movwf	7
 10572  0835  1D01               	btfss	1,2
 10573  0836  0008               	return
 10574                           
 10575                           ;nrf24l01.c: 118: };nrf24l01.c: 121: if (strcmp(TXPacket->Message, RXPacket.Message) != 
      +                          0){
 10576                           
 10577                           ;nrf24l01.c: 117: return;
 10578  0837  0868               	movf	_TXPacket^(0+128),w
 10579  0838  3E01               	addlw	1
 10580  0839  00F7               	movwf	??i1_nrf24l01CheckACK
 10581  083A  3000               	movlw	0
 10582  083B  3D69               	addwfc	(_TXPacket+1)^(0+128),w
 10583  083C  00F8               	movwf	??i1_nrf24l01CheckACK+1
 10584  083D  0877               	movf	??i1_nrf24l01CheckACK,w
 10585  083E  00F0               	movwf	i1strcmp@s1
 10586  083F  0878               	movf	??i1_nrf24l01CheckACK+1,w
 10587  0840  00F1               	movwf	i1strcmp@s1+1
 10588  0841  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 10589  0842  00F9               	movwf	??i1_nrf24l01CheckACK+2
 10590  0843  0879               	movf	??i1_nrf24l01CheckACK+2,w
 10591  0844  00F2               	movwf	i1strcmp@s2
 10592  0845  3197  27B2  3188   	fcall	i1_strcmp
 10593  0848  0870               	movf	?i1_strcmp,w
 10594  0849  0471               	iorwf	?i1_strcmp+1,w
 10595  084A  1D03               	btfss	3,2
 10596  084B  0008               	return
 10597                           
 10598                           ;nrf24l01.c: 123: };nrf24l01.c: 130: TXPacket->packetData.ACKRequest = 0;
 10599                           
 10600                           ;nrf24l01.c: 122: return;
 10601  084C  0021               	movlb	1	; select bank1
 10602  084D  0868               	movf	_TXPacket^(0+128),w
 10603  084E  0086               	movwf	6
 10604  084F  0869               	movf	(_TXPacket+1)^(0+128),w
 10605  0850  0087               	movwf	7
 10606  0851  1101               	bcf	1,2
 10607                           
 10608                           ;nrf24l01.c: 133: nrf24l01SetRXMode(0);
 10609  0852  3000               	movlw	0
 10610  0853  318A  222F         	fcall	i1_nrf24l01SetRXMode
 10611  0855  0008               	return
 10612  0856                     __end_ofi1_nrf24l01CheckACK:	
 10613                           
 10614                           	psect	text53
 10615  17B2                     __ptext53:	
 10616 ;; *************** function i1_strcmp *****************
 10617 ;; Defined at:
 10618 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
 10619 ;; Parameters:    Size  Location     Type
 10620 ;;  s1              2    0[COMMON] PTR const unsigned char 
 10621 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), RXPacket.Message(32), 
 10622 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 10623 ;;  s2              1    2[COMMON] PTR const unsigned char 
 10624 ;;		 -> RXPacket.Message(32), RXPacket(33), 
 10625 ;; Auto vars:     Size  Location     Type
 10626 ;;  strcmp          1    4[COMMON] char 
 10627 ;; Return value:  Size  Location     Type
 10628 ;;                  2    0[COMMON] int 
 10629 ;; Registers used:
 10630 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10631 ;; Tracked objects:
 10632 ;;		On entry : 0/0
 10633 ;;		On exit  : 0/0
 10634 ;;		Unchanged: 0/0
 10635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10636 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10637 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10638 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10639 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10640 ;;Total ram usage:        5 bytes
 10641 ;; Hardware stack levels used:    1
 10642 ;; This function calls:
 10643 ;;		Nothing
 10644 ;; This function is called by:
 10645 ;;		i1_nrf24l01CheckACK
 10646 ;; This function uses a non-reentrant model
 10647 ;;
 10648                           
 10649                           
 10650                           ;psect for function i1_strcmp
 10651  17B2                     i1_strcmp:	
 10652                           
 10653                           ;incstack = 0
 10654                           ; Regs used in i1_strcmp: [wreg-fsr1h+status,2+status,0]
 10655  17B2  2FBB               	goto	i1l3259
 10656  17B3                     i1l3255:	
 10657  17B3  3001               	movlw	1
 10658  17B4  07F0               	addwf	i1strcmp@s1,f
 10659  17B5  3000               	movlw	0
 10660  17B6  3DF1               	addwfc	i1strcmp@s1+1,f
 10661  17B7  3001               	movlw	1
 10662  17B8  00F3               	movwf	??i1_strcmp
 10663  17B9  0873               	movf	??i1_strcmp,w
 10664  17BA  07F2               	addwf	i1strcmp@s2,f
 10665  17BB                     i1l3259:	
 10666  17BB  0870               	movf	i1strcmp@s1,w
 10667  17BC  0086               	movwf	6
 10668  17BD  0871               	movf	i1strcmp@s1+1,w
 10669  17BE  0087               	movwf	7
 10670  17BF  0872               	movf	i1strcmp@s2,w
 10671  17C0  0084               	movwf	4
 10672  17C1  3001               	movlw	1	; select bank2/3
 10673  17C2  0085               	movwf	5
 10674  17C3  0300               	decf	0,w
 10675  17C4  3AFF               	xorlw	255
 10676  17C5  0701               	addwf	1,w
 10677  17C6  00F3               	movwf	??i1_strcmp
 10678  17C7  0873               	movf	??i1_strcmp,w
 10679  17C8  00F4               	movwf	i1strcmp@r
 10680  17C9  0874               	movf	i1strcmp@r,w
 10681  17CA  1D03               	btfss	3,2
 10682  17CB  2FD3               	goto	i1l3263
 10683  17CC  0870               	movf	i1strcmp@s1,w
 10684  17CD  0086               	movwf	6
 10685  17CE  0871               	movf	i1strcmp@s1+1,w
 10686  17CF  0087               	movwf	7
 10687  17D0  0801               	movf	1,w
 10688  17D1  1D03               	btfss	3,2
 10689  17D2  2FB3               	goto	i1l3255
 10690  17D3                     i1l3263:	
 10691  17D3  0874               	movf	i1strcmp@r,w
 10692  17D4  00F0               	movwf	?i1_strcmp
 10693  17D5  01F1               	clrf	?i1_strcmp+1
 10694  17D6  1BF0               	btfsc	?i1_strcmp,7
 10695  17D7  03F1               	decf	?i1_strcmp+1,f
 10696  17D8  0008               	return
 10697  17D9                     __end_ofi1_strcmp:	
 10698                           
 10699                           	psect	text54
 10700  0A2F                     __ptext54:	
 10701 ;; *************** function i1_nrf24l01SetRXMode *****************
 10702 ;; Defined at:
 10703 ;;		line 54 in file "nrf24l01.c"
 10704 ;; Parameters:    Size  Location     Type
 10705 ;;  rxMode          1    wreg     unsigned char 
 10706 ;; Auto vars:     Size  Location     Type
 10707 ;;  rxMode          1    6[COMMON] unsigned char 
 10708 ;;  nrf24l01SetR    1    5[COMMON] struct .
 10709 ;; Return value:  Size  Location     Type
 10710 ;;                  1    wreg      void 
 10711 ;; Registers used:
 10712 ;;		wreg, status,2, status,0, pclath, cstack
 10713 ;; Tracked objects:
 10714 ;;		On entry : 0/0
 10715 ;;		On exit  : 0/0
 10716 ;;		Unchanged: 0/0
 10717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10719 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10720 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10721 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10722 ;;Total ram usage:        3 bytes
 10723 ;; Hardware stack levels used:    1
 10724 ;; Hardware stack levels required when called:    3
 10725 ;; This function calls:
 10726 ;;		_nrf24l01CEHigh
 10727 ;;		_nrf24l01CELow
 10728 ;;		i1_nrf24l01Send
 10729 ;; This function is called by:
 10730 ;;		i1_nrf24l01CheckACK
 10731 ;;		i1_nrf24l01ISR
 10732 ;; This function uses a non-reentrant model
 10733 ;;
 10734                           
 10735                           
 10736                           ;psect for function i1_nrf24l01SetRXMode
 10737  0A2F                     i1_nrf24l01SetRXMode:	
 10738                           
 10739                           ;incstack = 0
 10740 ;; hardware stack exceeded
 10741                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
 10742                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
 10743  0A2F  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
 10744                           
 10745                           ;nrf24l01.c: 56: if (rxMode){
 10746  0A30  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 10747  0A31  1903               	btfsc	3,2
 10748  0A32  2A35               	goto	i1l3223
 10749                           
 10750                           ;nrf24l01.c: 57: if (nrf24l01.TXBusy){
 10751  0A33  187D               	btfsc	_nrf24l01,0	;volatile
 10752  0A34  0008               	return
 10753  0A35                     i1l3223:	
 10754                           ;nrf24l01.c: 58: return;
 10755                           
 10756                           
 10757                           ;nrf24l01.c: 59: };nrf24l01.c: 60: };nrf24l01.c: 62: n_CONFIG_t config;;nrf24l01.c: 65: 
      +                          config.byte = nrf24l01Send((unsigned) 0b00000000 | (unsigned) 0x00, 0);
 10758  0A35  01F1               	clrf	i1nrf24l01Send@data
 10759  0A36  3000               	movlw	0
 10760  0A37  3196  2664  318A   	fcall	i1_nrf24l01Send
 10761  0A3A  00F4               	movwf	??i1_nrf24l01SetRXMode
 10762  0A3B  0874               	movf	??i1_nrf24l01SetRXMode,w
 10763  0A3C  00F5               	movwf	i1nrf24l01SetRXMode@config
 10764                           
 10765                           ;nrf24l01.c: 68: if (config.PRIM_RX != rxMode){
 10766  0A3D  0875               	movf	i1nrf24l01SetRXMode@config,w
 10767  0A3E  3901               	andlw	1
 10768  0A3F  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
 10769  0A40  1903               	skipnz
 10770  0A41  2A6D               	goto	i1l3243
 10771                           
 10772                           ;nrf24l01.c: 71: nrf24l01CELow();
 10773  0A42  3195  259F  318A   	fcall	_nrf24l01CELow
 10774                           
 10775                           ;nrf24l01.c: 72: _delay((unsigned long)((200)*(32000000/4000000.0)));
 10776  0A45  30E4               	movlw	228
 10777  0A46                     u387_27:	
 10778  0A46  3200               	nop2
 10779  0A47  3200               	nop2
 10780  0A48  0B89               	decfsz	9,f
 10781  0A49  2A46               	goto	u387_27
 10782  0A4A  3200               	nop2
 10783  0A4B  3200               	nop2
 10784                           
 10785                           ;nrf24l01.c: 75: config.PRIM_RX = rxMode;
 10786  0A4C  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 10787  0A4D  3901               	andlw	1
 10788  0A4E  1075               	bcf	i1nrf24l01SetRXMode@config,0
 10789  0A4F  1D03               	skipz
 10790  0A50  1475               	bsf	i1nrf24l01SetRXMode@config,0
 10791                           
 10792                           ;nrf24l01.c: 76: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
 10793  0A51  0875               	movf	i1nrf24l01SetRXMode@config,w
 10794  0A52  00F4               	movwf	??i1_nrf24l01SetRXMode
 10795  0A53  0874               	movf	??i1_nrf24l01SetRXMode,w
 10796  0A54  00F1               	movwf	i1nrf24l01Send@data
 10797  0A55  3020               	movlw	32
 10798  0A56  3196  2664  318A   	fcall	i1_nrf24l01Send
 10799                           
 10800                           ;nrf24l01.c: 79: _delay((unsigned long)((200)*(32000000/4000000.0)));
 10801  0A59  30E4               	movlw	228
 10802  0A5A                     u388_27:	
 10803  0A5A  3200               	nop2
 10804  0A5B  3200               	nop2
 10805  0A5C  0B89               	decfsz	9,f
 10806  0A5D  2A5A               	goto	u388_27
 10807  0A5E  3200               	nop2
 10808  0A5F  3200               	nop2
 10809                           
 10810                           ;nrf24l01.c: 82: if (rxMode){
 10811  0A60  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 10812  0A61  1903               	btfsc	3,2
 10813  0A62  2A6D               	goto	i1l3243
 10814                           
 10815                           ;nrf24l01.c: 83: nrf24l01CEHigh();
 10816  0A63  3195  259C  318A   	fcall	_nrf24l01CEHigh
 10817                           
 10818                           ;nrf24l01.c: 84: _delay((unsigned long)((200)*(32000000/4000000.0)));
 10819  0A66  30E4               	movlw	228
 10820  0A67                     u389_27:	
 10821  0A67  3200               	nop2
 10822  0A68  3200               	nop2
 10823  0A69  0B89               	decfsz	9,f
 10824  0A6A  2A67               	goto	u389_27
 10825  0A6B  3200               	nop2
 10826  0A6C  3200               	nop2
 10827  0A6D                     i1l3243:	
 10828                           
 10829                           ;nrf24l01.c: 85: };nrf24l01.c: 86: };nrf24l01.c: 89: nrf24l01.RXMode = rxMode;
 10830  0A6D  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 10831  0A6E  3901               	andlw	1
 10832  0A6F  117D               	bcf	_nrf24l01,2	;volatile
 10833  0A70  1D03               	skipz
 10834  0A71  157D               	bsf	_nrf24l01,2	;volatile
 10835  0A72  0008               	return
 10836  0A73                     __end_ofi1_nrf24l01SetRXMode:	
 10837                           
 10838                           	psect	text55
 10839  1664                     __ptext55:	
 10840 ;; *************** function i1_nrf24l01Send *****************
 10841 ;; Defined at:
 10842 ;;		line 9 in file "nrf24l01.c"
 10843 ;; Parameters:    Size  Location     Type
 10844 ;;  command         1    wreg     unsigned char 
 10845 ;;  data            1    1[COMMON] unsigned char 
 10846 ;; Auto vars:     Size  Location     Type
 10847 ;;  command         1    3[COMMON] unsigned char 
 10848 ;; Return value:  Size  Location     Type
 10849 ;;                  1    wreg      unsigned char 
 10850 ;; Registers used:
 10851 ;;		wreg, status,2, status,0, pclath, cstack
 10852 ;; Tracked objects:
 10853 ;;		On entry : 0/0
 10854 ;;		On exit  : 0/0
 10855 ;;		Unchanged: 0/0
 10856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10857 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10858 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10859 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10860 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10861 ;;Total ram usage:        3 bytes
 10862 ;; Hardware stack levels used:    1
 10863 ;; Hardware stack levels required when called:    2
 10864 ;; This function calls:
 10865 ;;		_enableInterrupts
 10866 ;;		_nrf24l01SPIEnd
 10867 ;;		_nrf24l01SPISend
 10868 ;;		_nrf24l01SPIStart
 10869 ;; This function is called by:
 10870 ;;		i1_nrf24l01SetRXMode
 10871 ;;		i1_nrf24l01ReceivePacket
 10872 ;;		i1_nrf24l01ISR
 10873 ;; This function uses a non-reentrant model
 10874 ;;
 10875                           
 10876                           
 10877                           ;psect for function i1_nrf24l01Send
 10878  1664                     i1_nrf24l01Send:	
 10879                           
 10880                           ;incstack = 0
 10881 ;; hardware stack exceeded
 10882                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
 10883                           ;i1nrf24l01Send@command stored from wreg
 10884  1664  00F3               	movwf	i1nrf24l01Send@command
 10885                           
 10886                           ;nrf24l01.c: 12: enableInterrupts(0);
 10887  1665  3000               	movlw	0
 10888  1666  3195  25AF  3196   	fcall	_enableInterrupts
 10889                           
 10890                           ;nrf24l01.c: 15: nrf24l01SPIStart();
 10891  1669  3195  25B7  3196   	fcall	_nrf24l01SPIStart
 10892                           
 10893                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
 10894  166C  0873               	movf	i1nrf24l01Send@command,w
 10895  166D  3195  25C8  3196   	fcall	_nrf24l01SPISend
 10896                           
 10897                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
 10898  1670  0871               	movf	i1nrf24l01Send@data,w
 10899  1671  3195  25C8  3196   	fcall	_nrf24l01SPISend
 10900  1674  00F2               	movwf	??i1_nrf24l01Send
 10901  1675  0872               	movf	??i1_nrf24l01Send,w
 10902  1676  00F1               	movwf	i1nrf24l01Send@data
 10903                           
 10904                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
 10905  1677  3195  25A8  3196   	fcall	_nrf24l01SPIEnd
 10906                           
 10907                           ;nrf24l01.c: 27: enableInterrupts(1);
 10908  167A  3001               	movlw	1
 10909  167B  3195  25AF         	fcall	_enableInterrupts
 10910                           
 10911                           ;nrf24l01.c: 29: return data;
 10912  167D  0871               	movf	i1nrf24l01Send@data,w
 10913  167E  0008               	return
 10914  167F                     __end_ofi1_nrf24l01Send:	
 10915                           
 10916                           	psect	text56
 10917  15B7                     __ptext56:	
 10918 ;; *************** function _nrf24l01SPIStart *****************
 10919 ;; Defined at:
 10920 ;;		line 64 in file "interface.c"
 10921 ;; Parameters:    Size  Location     Type
 10922 ;;		None
 10923 ;; Auto vars:     Size  Location     Type
 10924 ;;		None
 10925 ;; Return value:  Size  Location     Type
 10926 ;;                  1    wreg      void 
 10927 ;; Registers used:
 10928 ;;		wreg, status,2, status,0, pclath, cstack
 10929 ;; Tracked objects:
 10930 ;;		On entry : 0/0
 10931 ;;		On exit  : 0/0
 10932 ;;		Unchanged: 0/0
 10933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10938 ;;Total ram usage:        0 bytes
 10939 ;; Hardware stack levels used:    1
 10940 ;; Hardware stack levels required when called:    8
 10941 ;; This function calls:
 10942 ;;		_nrf24l01CSLow
 10943 ;; This function is called by:
 10944 ;;		_nrf24l01Send
 10945 ;;		_nrf24l01ReceivePacket
 10946 ;;		_nrf24l01SendPacket
 10947 ;;		_nrf24l01SetTXPipe
 10948 ;;		_nrf24l01InitRegisters
 10949 ;;		i1_nrf24l01Send
 10950 ;;		i1_nrf24l01ReceivePacket
 10951 ;; This function uses a non-reentrant model
 10952 ;;
 10953                           
 10954                           
 10955                           ;psect for function _nrf24l01SPIStart
 10956  15B7                     _nrf24l01SPIStart:	
 10957                           
 10958                           ;interface.c: 65: nrf24l01CSLow();
 10959                           
 10960                           ;incstack = 0
 10961 ;; hardware stack exceeded
 10962                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
 10963  15B7  3187  27FC  3195   	fcall	_nrf24l01CSLow
 10964                           
 10965                           ;interface.c: 66: _delay((unsigned long)((10)*(32000000/4000000.0)));
 10966  15BA  301A               	movlw	26
 10967  15BB                     u390_27:	
 10968  15BB  0B89               	decfsz	9,f
 10969  15BC  2DBB               	goto	u390_27
 10970  15BD  3200               	nop2
 10971  15BE  0008               	return
 10972  15BF                     __end_of_nrf24l01SPIStart:	
 10973                           
 10974                           	psect	text57
 10975  07FC                     __ptext57:	
 10976 ;; *************** function _nrf24l01CSLow *****************
 10977 ;; Defined at:
 10978 ;;		line 17 in file "interface.c"
 10979 ;; Parameters:    Size  Location     Type
 10980 ;;		None
 10981 ;; Auto vars:     Size  Location     Type
 10982 ;;		None
 10983 ;; Return value:  Size  Location     Type
 10984 ;;                  1    wreg      void 
 10985 ;; Registers used:
 10986 ;;		None
 10987 ;; Tracked objects:
 10988 ;;		On entry : 0/0
 10989 ;;		On exit  : 0/0
 10990 ;;		Unchanged: 0/0
 10991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10996 ;;Total ram usage:        0 bytes
 10997 ;; Hardware stack levels used:    1
 10998 ;; Hardware stack levels required when called:    7
 10999 ;; This function calls:
 11000 ;;		Nothing
 11001 ;; This function is called by:
 11002 ;;		_nrf24l01SPIStart
 11003 ;; This function uses a non-reentrant model
 11004 ;;
 11005                           
 11006                           
 11007                           ;psect for function _nrf24l01CSLow
 11008  07FC                     _nrf24l01CSLow:	
 11009                           
 11010                           ;interface.c: 18: PORTAbits.RA1 = 0;
 11011                           
 11012                           ;incstack = 0
 11013 ;; hardware stack exceeded
 11014                           ; Regs used in _nrf24l01CSLow: []
 11015  07FC  0020               	movlb	0	; select bank0
 11016  07FD  108C               	bcf	12,1	;volatile
 11017  07FE  0008               	return
 11018  07FF                     __end_of_nrf24l01CSLow:	
 11019                           
 11020                           	psect	text58
 11021  15C8                     __ptext58:	
 11022 ;; *************** function _nrf24l01SPISend *****************
 11023 ;; Defined at:
 11024 ;;		line 51 in file "interface.c"
 11025 ;; Parameters:    Size  Location     Type
 11026 ;;  data            1    wreg     unsigned char 
 11027 ;; Auto vars:     Size  Location     Type
 11028 ;;  data            1    0[COMMON] unsigned char 
 11029 ;; Return value:  Size  Location     Type
 11030 ;;                  1    wreg      unsigned char 
 11031 ;; Registers used:
 11032 ;;		wreg
 11033 ;; Tracked objects:
 11034 ;;		On entry : 0/0
 11035 ;;		On exit  : 0/0
 11036 ;;		Unchanged: 0/0
 11037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11042 ;;Total ram usage:        0 bytes
 11043 ;; Hardware stack levels used:    1
 11044 ;; Hardware stack levels required when called:    7
 11045 ;; This function calls:
 11046 ;;		Nothing
 11047 ;; This function is called by:
 11048 ;;		_nrf24l01Send
 11049 ;;		_nrf24l01ReceivePacket
 11050 ;;		_nrf24l01SendPacket
 11051 ;;		_nrf24l01SetTXPipe
 11052 ;;		_nrf24l01InitRegisters
 11053 ;;		i1_nrf24l01Send
 11054 ;;		i1_nrf24l01ReceivePacket
 11055 ;; This function uses a non-reentrant model
 11056 ;;
 11057                           
 11058                           
 11059                           ;psect for function _nrf24l01SPISend
 11060  15C8                     _nrf24l01SPISend:	
 11061                           
 11062                           ;incstack = 0
 11063 ;; hardware stack exceeded
 11064                           ; Regs used in _nrf24l01SPISend: [wreg]
 11065                           ;nrf24l01SPISend@data stored from wreg
 11066  15C8  00F0               	movwf	nrf24l01SPISend@data
 11067                           
 11068                           ;interface.c: 52: SSP1BUF = data;
 11069  15C9  0870               	movf	nrf24l01SPISend@data,w
 11070  15CA  0024               	movlb	4	; select bank4
 11071  15CB  0091               	movwf	17	;volatile
 11072                           
 11073                           ;interface.c: 54: PORTCbits.RC4 = 1;
 11074  15CC  0020               	movlb	0	; select bank0
 11075  15CD  160E               	bsf	14,4	;volatile
 11076  15CE                     i1l48:	
 11077                           ;interface.c: 56: while (!SSP1STATbits.BF){
 11078                           
 11079  15CE  0024               	movlb	4	; select bank4
 11080  15CF  1814               	btfsc	20,0	;volatile
 11081  15D0  2DD3               	goto	i1l2603
 11082                           
 11083                           ;interface.c: 57: __nop();
 11084  15D1  0000               	nop
 11085  15D2  2DCE               	goto	i1l48
 11086  15D3                     i1l2603:	
 11087                           
 11088                           ;interface.c: 58: };interface.c: 60: return SSP1BUF;
 11089  15D3  0811               	movf	17,w	;volatile
 11090  15D4  0008               	return
 11091  15D5                     __end_of_nrf24l01SPISend:	
 11092                           
 11093                           	psect	text59
 11094  15A8                     __ptext59:	
 11095 ;; *************** function _nrf24l01SPIEnd *****************
 11096 ;; Defined at:
 11097 ;;		line 70 in file "interface.c"
 11098 ;; Parameters:    Size  Location     Type
 11099 ;;		None
 11100 ;; Auto vars:     Size  Location     Type
 11101 ;;		None
 11102 ;; Return value:  Size  Location     Type
 11103 ;;                  1    wreg      void 
 11104 ;; Registers used:
 11105 ;;		wreg, status,2, status,0, pclath, cstack
 11106 ;; Tracked objects:
 11107 ;;		On entry : 0/0
 11108 ;;		On exit  : 0/0
 11109 ;;		Unchanged: 0/0
 11110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11115 ;;Total ram usage:        0 bytes
 11116 ;; Hardware stack levels used:    1
 11117 ;; Hardware stack levels required when called:    8
 11118 ;; This function calls:
 11119 ;;		_nrf24l01CSHigh
 11120 ;; This function is called by:
 11121 ;;		_nrf24l01Send
 11122 ;;		_nrf24l01ReceivePacket
 11123 ;;		_nrf24l01SendPacket
 11124 ;;		_nrf24l01SetTXPipe
 11125 ;;		_nrf24l01InitRegisters
 11126 ;;		i1_nrf24l01Send
 11127 ;;		i1_nrf24l01ReceivePacket
 11128 ;; This function uses a non-reentrant model
 11129 ;;
 11130                           
 11131                           
 11132                           ;psect for function _nrf24l01SPIEnd
 11133  15A8                     _nrf24l01SPIEnd:	
 11134                           
 11135                           ;interface.c: 71: _delay((unsigned long)((10)*(32000000/4000000.0)));
 11136                           
 11137                           ;incstack = 0
 11138 ;; hardware stack exceeded
 11139                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
 11140  15A8  301A               	movlw	26
 11141  15A9                     u391_27:	
 11142  15A9  0B89               	decfsz	9,f
 11143  15AA  2DA9               	goto	u391_27
 11144  15AB  3200               	nop2
 11145                           
 11146                           ;interface.c: 72: nrf24l01CSHigh();
 11147  15AC  3188  2000         	fcall	_nrf24l01CSHigh
 11148  15AE  0008               	return
 11149  15AF                     __end_of_nrf24l01SPIEnd:	
 11150                           
 11151                           	psect	text60
 11152  0800                     __ptext60:	
 11153 ;; *************** function _nrf24l01CSHigh *****************
 11154 ;; Defined at:
 11155 ;;		line 22 in file "interface.c"
 11156 ;; Parameters:    Size  Location     Type
 11157 ;;		None
 11158 ;; Auto vars:     Size  Location     Type
 11159 ;;		None
 11160 ;; Return value:  Size  Location     Type
 11161 ;;                  1    wreg      void 
 11162 ;; Registers used:
 11163 ;;		None
 11164 ;; Tracked objects:
 11165 ;;		On entry : 0/0
 11166 ;;		On exit  : 0/0
 11167 ;;		Unchanged: 0/0
 11168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11173 ;;Total ram usage:        0 bytes
 11174 ;; Hardware stack levels used:    1
 11175 ;; Hardware stack levels required when called:    7
 11176 ;; This function calls:
 11177 ;;		Nothing
 11178 ;; This function is called by:
 11179 ;;		_nrf24l01SPIEnd
 11180 ;; This function uses a non-reentrant model
 11181 ;;
 11182                           
 11183                           
 11184                           ;psect for function _nrf24l01CSHigh
 11185  0800                     _nrf24l01CSHigh:	
 11186                           
 11187                           ;interface.c: 23: PORTAbits.RA1 = 1;
 11188                           
 11189                           ;incstack = 0
 11190 ;; hardware stack exceeded
 11191                           ; Regs used in _nrf24l01CSHigh: []
 11192  0800  0020               	movlb	0	; select bank0
 11193  0801  148C               	bsf	12,1	;volatile
 11194  0802  0008               	return
 11195  0803                     __end_of_nrf24l01CSHigh:	
 11196                           
 11197                           	psect	text61
 11198  15AF                     __ptext61:	
 11199 ;; *************** function _enableInterrupts *****************
 11200 ;; Defined at:
 11201 ;;		line 76 in file "interface.c"
 11202 ;; Parameters:    Size  Location     Type
 11203 ;;  enable          1    wreg     unsigned char 
 11204 ;; Auto vars:     Size  Location     Type
 11205 ;;  enable          1    0[COMMON] unsigned char 
 11206 ;; Return value:  Size  Location     Type
 11207 ;;                  1    wreg      void 
 11208 ;; Registers used:
 11209 ;;		wreg, status,0
 11210 ;; Tracked objects:
 11211 ;;		On entry : 0/0
 11212 ;;		On exit  : 0/0
 11213 ;;		Unchanged: 0/0
 11214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11218 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11219 ;;Total ram usage:        0 bytes
 11220 ;; Hardware stack levels used:    1
 11221 ;; Hardware stack levels required when called:    7
 11222 ;; This function calls:
 11223 ;;		Nothing
 11224 ;; This function is called by:
 11225 ;;		_nrf24l01Send
 11226 ;;		_nrf24l01SendPacket
 11227 ;;		i1_nrf24l01Send
 11228 ;; This function uses a non-reentrant model
 11229 ;;
 11230                           
 11231                           
 11232                           ;psect for function _enableInterrupts
 11233  15AF                     _enableInterrupts:	
 11234                           
 11235                           ;incstack = 0
 11236 ;; hardware stack exceeded
 11237                           ; Regs used in _enableInterrupts: [wreg+status,0]
 11238                           ;enableInterrupts@enable stored from wreg
 11239  15AF  00F0               	movwf	enableInterrupts@enable
 11240                           
 11241                           ;interface.c: 77: PIE0bits.INTE = enable;
 11242  15B0  0C70               	rrf	enableInterrupts@enable,w
 11243  15B1  0021               	movlb	1	; select bank1
 11244  15B2  1C03               	skipc
 11245  15B3  1010               	bcf	16,0	;volatile
 11246  15B4  1803               	skipnc
 11247  15B5  1410               	bsf	16,0	;volatile
 11248  15B6  0008               	return
 11249  15B7                     __end_of_enableInterrupts:	
 11250                           
 11251                           	psect	text62
 11252  159F                     __ptext62:	
 11253 ;; *************** function _nrf24l01CELow *****************
 11254 ;; Defined at:
 11255 ;;		line 7 in file "interface.c"
 11256 ;; Parameters:    Size  Location     Type
 11257 ;;		None
 11258 ;; Auto vars:     Size  Location     Type
 11259 ;;		None
 11260 ;; Return value:  Size  Location     Type
 11261 ;;                  1    wreg      void 
 11262 ;; Registers used:
 11263 ;;		None
 11264 ;; Tracked objects:
 11265 ;;		On entry : 0/0
 11266 ;;		On exit  : 0/0
 11267 ;;		Unchanged: 0/0
 11268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11273 ;;Total ram usage:        0 bytes
 11274 ;; Hardware stack levels used:    1
 11275 ;; Hardware stack levels required when called:    7
 11276 ;; This function calls:
 11277 ;;		Nothing
 11278 ;; This function is called by:
 11279 ;;		_nrf24l01SetRXMode
 11280 ;;		_nrf24l01ReceivePacket
 11281 ;;		_nrf24l01SendPacket
 11282 ;;		_nrf24l01Init
 11283 ;;		i1_nrf24l01SetRXMode
 11284 ;;		i1_nrf24l01ReceivePacket
 11285 ;; This function uses a non-reentrant model
 11286 ;;
 11287                           
 11288                           
 11289                           ;psect for function _nrf24l01CELow
 11290  159F                     _nrf24l01CELow:	
 11291                           
 11292                           ;interface.c: 8: PORTAbits.RA0 = 0;
 11293                           
 11294                           ;incstack = 0
 11295 ;; hardware stack exceeded
 11296                           ; Regs used in _nrf24l01CELow: []
 11297  159F  0020               	movlb	0	; select bank0
 11298  15A0  100C               	bcf	12,0	;volatile
 11299  15A1  0008               	return
 11300  15A2                     __end_of_nrf24l01CELow:	
 11301                           
 11302                           	psect	text63
 11303  159C                     __ptext63:	
 11304 ;; *************** function _nrf24l01CEHigh *****************
 11305 ;; Defined at:
 11306 ;;		line 12 in file "interface.c"
 11307 ;; Parameters:    Size  Location     Type
 11308 ;;		None
 11309 ;; Auto vars:     Size  Location     Type
 11310 ;;		None
 11311 ;; Return value:  Size  Location     Type
 11312 ;;                  1    wreg      void 
 11313 ;; Registers used:
 11314 ;;		None
 11315 ;; Tracked objects:
 11316 ;;		On entry : 0/0
 11317 ;;		On exit  : 0/0
 11318 ;;		Unchanged: 0/0
 11319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11324 ;;Total ram usage:        0 bytes
 11325 ;; Hardware stack levels used:    1
 11326 ;; Hardware stack levels required when called:    7
 11327 ;; This function calls:
 11328 ;;		Nothing
 11329 ;; This function is called by:
 11330 ;;		_nrf24l01SetRXMode
 11331 ;;		_nrf24l01ReceivePacket
 11332 ;;		_nrf24l01SendPacket
 11333 ;;		_nrf24l01Init
 11334 ;;		i1_nrf24l01SetRXMode
 11335 ;;		i1_nrf24l01ReceivePacket
 11336 ;; This function uses a non-reentrant model
 11337 ;;
 11338                           
 11339                           
 11340                           ;psect for function _nrf24l01CEHigh
 11341  159C                     _nrf24l01CEHigh:	
 11342                           
 11343                           ;interface.c: 13: PORTAbits.RA0 = 1;
 11344                           
 11345                           ;incstack = 0
 11346 ;; hardware stack exceeded
 11347                           ; Regs used in _nrf24l01CEHigh: []
 11348  159C  0020               	movlb	0	; select bank0
 11349  159D  140C               	bsf	12,0	;volatile
 11350  159E  0008               	return
 11351  159F                     __end_of_nrf24l01CEHigh:	
 11352                           
 11353                           	psect	text64
 11354  1598                     __ptext64:	
 11355 ;; *************** function i1_exception *****************
 11356 ;; Defined at:
 11357 ;;		line 80 in file "interface.c"
 11358 ;; Parameters:    Size  Location     Type
 11359 ;;  exception       1    wreg     unsigned char 
 11360 ;; Auto vars:     Size  Location     Type
 11361 ;;  exception       1  (no storage) unsigned char 
 11362 ;; Return value:  Size  Location     Type
 11363 ;;                  1    wreg      void 
 11364 ;; Registers used:
 11365 ;;		wreg
 11366 ;; Tracked objects:
 11367 ;;		On entry : 0/0
 11368 ;;		On exit  : 0/0
 11369 ;;		Unchanged: 0/0
 11370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11375 ;;Total ram usage:        0 bytes
 11376 ;; Hardware stack levels used:    1
 11377 ;; This function calls:
 11378 ;;		Nothing
 11379 ;; This function is called by:
 11380 ;;		i1_nrf24l01ISR
 11381 ;; This function uses a non-reentrant model
 11382 ;;
 11383                           
 11384                           
 11385                           ;psect for function i1_exception
 11386  1598                     i1_exception:	
 11387                           
 11388                           ;incstack = 0
 11389                           ; Regs used in i1_exception: [wreg]
 11390  1598  0001               	reset	;# 
 11391  1599  0008               	return
 11392  159A                     __end_ofi1_exception:	
 11393  007E                     btemp	set	126	;btemp
 11394  007E                     int$flags	set	126
 11395  007E                     wtemp0	set	126


Data Sizes:
    Strings     49
    Constant    46
    Data        1
    BSS         85
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80     72      76
    BANK2            80     48      68
    BANK3            80      0      61
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> setMessage@status(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), RXPacket.Message(BANK3[32]), 
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), RXPacket.Message(BANK3[32]), 
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), RXPacket.Message(BANK3[32]), 
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 28
		 -> romDataMap.name(BANK3[16]), ftoa@buf(BANK2[17]), STR_9(CODE[5]), STR_7(CODE[6]), 
		 -> STR_6(CODE[7]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[4]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), romDataMap(BANK3[28]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_10(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendPacket@Packet	PTR struct . size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    TXPacket	PTR struct . size(2) Largest target is 33
		 -> NULL(NULL[0]), RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    nrf24l01SendACK@packet	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    checkTXPower@rxPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    setMessage@topic	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_9(CODE[5]), STR_7(CODE[6]), STR_6(CODE[7]), STR_5(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[4]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    setMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    handleRXData@RXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->i1_nrf24l01ISR
    i1_nrf24l01ISR->i1_nrf24l01ReceivePacket
    i1_nrf24l01ReceivePacket->i1_memset
    i1_nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->___lwmod
    _nrf24l01GetPipe->_strlen
    _sleep->_handleRXData
    _handleRXData->_nrf24l01SendACK
    _nrf24l01SendACK->_nrf24l01SendPacket
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SendPacket->_nrf24l01ISR
    _nrf24l01ISR->_nrf24l01ReceivePacket
    _nrf24l01ReceivePacket->_memset
    _nrf24l01CheckACK->_nrf24l01SetRXMode
    _nrf24l01SetRXMode->_nrf24l01Send
    _setMessage->_ftoa
    _strcat->_ftoa
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    _checkTXPower->_nrf24l01ChangeTXPower
    _nrf24l01ChangeTXPower->_nrf24l01Send
    ___lbtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_loop
    _loop->_setMessage
    _setMessage->_strcat
    _strcat->_ftoa
    _ftoa->___fttol

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_loop

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0  154440
                                             36 BANK1     36    36      0
                           ___lbtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                 _nrf24l01SendPacket
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                         _setMessage
                              _sleep
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     200
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    5539
                                             19 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               12    12      0    5539
                                              7 BANK0     12    12      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    4     4      0    2343
                                              3 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      5     5      0     658
                                              6 BANK0      5     5      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     337
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _loop                                                49    49      0   88975
                                             35 BANK1      1     1      0
                                              0 BANK2     48    48      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
                       _checkTXPower
                        _getADCValue
                       _nrf24l01Send
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                4     2      2   19449
                                             24 BANK0      4     2      2
                         _doWDTSleep
                       _handleRXData
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (2) _handleRXData                                         2     2      0   16422
                                             22 BANK0      2     2      0
                _nrf24l01GetRXPacket
                    _nrf24l01SendACK
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SendACK                                      2     2      0   16377
                                             20 BANK0      2     2      0
                 _nrf24l01SendPacket
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SetTXPipe                                    3     3      0     314
                                              4 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SendPacket                                   7     5      2   15895
                                             13 BANK0      7     5      2
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01ChangeTXPower
                        _nrf24l01ISR
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     170
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _nrf24l01ISR                                          2     2      0   10301
                                             11 BANK0      2     2      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceivePacket
                       _nrf24l01Send
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (6) _nrf24l01ReceivePacket                                3     3      0    2894
                                              8 BANK0      3     3      0
                             _memset
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (6) _nrf24l01CheckACK                                     3     3      0    2623
                                              6 BANK0      3     3      0
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (7) _strcmp                                               5     2      3     220
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    2403
                                              3 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _exception                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _setMessage                                          10     3      7   17937
                                             25 BANK1     10     3      7
                           ___lbtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     743
                                             19 BANK1      6     2      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (7) _memset                                               8     2      6     532
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                14    10      4   15156
                                             79 BANK0      1     1      0
                                              6 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             36    26     10    2229
                                             24 BANK0     28    18     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     337
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     340
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    3131
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     430
                                             71 BANK0      8     4      4
                                              0 BANK1      6     6      0
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4770
                                             27 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     223
                                             55 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3655
                                             55 BANK0     16    10      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     314
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         12     9      3   11891
                                             43 BANK0     12     9      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                         _doWDTSleep
 ---------------------------------------------------------------------------------
 (2) _doWDTSleep                                           2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    3965
                                             27 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    4525
                                             14 BANK0     13     7      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    3242
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _checkTXPower                                         2     2      0    2561
                                              7 BANK0      2     2      0
              _nrf24l01ChangeTXPower
                _nrf24l01GetRXPacket
 ---------------------------------------------------------------------------------
 (3) _nrf24l01GetRXPacket                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _nrf24l01ChangeTXPower                                4     2      2    2538
                                              3 BANK0      4     2      2
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Send                                         3     2      1    2247
                                              0 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (16) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (17) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (16) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (17) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    2995
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2973
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR                                                 0     0      0    1902
                      i1_nrf24l01ISR
 ---------------------------------------------------------------------------------
 (13) i1_nrf24l01ISR                                       2     2      0    1902
                                             11 COMMON     2     2      0
                        i1_exception
                 i1_nrf24l01CheckACK
            i1_nrf24l01ReceivePacket
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (14) i1_nrf24l01ReceivePacket                             3     3      0     534
                                              8 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (15) i1_memset                                            8     2      6     152
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (14) i1_nrf24l01CheckACK                                  3     3      0     544
                                              7 COMMON     3     3      0
                i1_nrf24l01SetRXMode
                           i1_strcmp
 ---------------------------------------------------------------------------------
 (15) i1_strcmp                                            5     2      3     121
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (14) i1_nrf24l01SetRXMode                                 3     3      0     423
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (15) i1_nrf24l01Send                                      3     2      1     267
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (16) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (17) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (16) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (17) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_exception                                         1     1      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lbtoft
     ___ftpack
   _loop
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___lbtoft
       ___ftpack
     _checkTXPower
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01GetRXPacket
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _nrf24l01SendPacket
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01ISR
         _exception
         _nrf24l01CheckACK
           _nrf24l01SetRXMode
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _strcmp
         _nrf24l01ReceivePacket
           _memset
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
           _nrf24l01Send
             _enableInterrupts
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
         _nrf24l01SetRXMode
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01Send
             _enableInterrupts
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strlen
     _setMessage
       ___lbtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
       _memset (ARG)
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _doWDTSleep
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
     _sleep
       _doWDTSleep
       _handleRXData
         _nrf24l01GetRXPacket
         _nrf24l01SendACK
           _nrf24l01SendPacket
             _enableInterrupts
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01ChangeTXPower
               _nrf24l01Send
                 _enableInterrupts
                 _nrf24l01SPIEnd
                   _nrf24l01CSHigh
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
                   _nrf24l01CSLow
             _nrf24l01ISR
               _exception
               _nrf24l01CheckACK
                 _nrf24l01SetRXMode
                   _nrf24l01CEHigh
                   _nrf24l01CELow
                   _nrf24l01Send
                     _enableInterrupts
                     _nrf24l01SPIEnd
                       _nrf24l01CSHigh
                     _nrf24l01SPISend
                     _nrf24l01SPIStart
                       _nrf24l01CSLow
                 _strcmp
               _nrf24l01ReceivePacket
                 _memset
                 _nrf24l01CEHigh
                 _nrf24l01CELow
                 _nrf24l01SPIEnd
                   _nrf24l01CSHigh
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
                   _nrf24l01CSLow
                 _nrf24l01Send
                   _enableInterrupts
                   _nrf24l01SPIEnd
                     _nrf24l01CSHigh
                   _nrf24l01SPISend
                   _nrf24l01SPIStart
                     _nrf24l01CSLow
               _nrf24l01Send
                 _enableInterrupts
                 _nrf24l01SPIEnd
                   _nrf24l01CSHigh
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
                   _nrf24l01CSLow
               _nrf24l01SetRXMode
                 _nrf24l01CEHigh
                 _nrf24l01CELow
                 _nrf24l01Send
                   _enableInterrupts
                   _nrf24l01SPIEnd
                     _nrf24l01CSHigh
                   _nrf24l01SPISend
                   _nrf24l01SPIStart
                     _nrf24l01CSLow
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
             _nrf24l01SetRXMode
               _nrf24l01CEHigh
               _nrf24l01CELow
               _nrf24l01Send
                 _enableInterrupts
                 _nrf24l01SPIEnd
                   _nrf24l01CSHigh
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
                   _nrf24l01CSLow
             _strlen
           _nrf24l01SetTXPipe
             ___bmul
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendPacket
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01ChangeTXPower
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01ISR
       _exception
       _nrf24l01CheckACK
         _nrf24l01SetRXMode
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01Send
             _enableInterrupts
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
         _strcmp
       _nrf24l01ReceivePacket
         _memset
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _strlen
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _setMessage
     ___lbtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _memset (ARG)
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
   _sleep
     _doWDTSleep
     _handleRXData
       _nrf24l01GetRXPacket
       _nrf24l01SendACK
         _nrf24l01SendPacket
           _enableInterrupts
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01ChangeTXPower
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _nrf24l01ISR
             _exception
             _nrf24l01CheckACK
               _nrf24l01SetRXMode
                 _nrf24l01CEHigh
                 _nrf24l01CELow
                 _nrf24l01Send
                   _enableInterrupts
                   _nrf24l01SPIEnd
                     _nrf24l01CSHigh
                   _nrf24l01SPISend
                   _nrf24l01SPIStart
                     _nrf24l01CSLow
               _strcmp
             _nrf24l01ReceivePacket
               _memset
               _nrf24l01CEHigh
               _nrf24l01CELow
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
               _nrf24l01Send
                 _enableInterrupts
                 _nrf24l01SPIEnd
                   _nrf24l01CSHigh
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
                   _nrf24l01CSLow
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
             _nrf24l01SetRXMode
               _nrf24l01CEHigh
               _nrf24l01CELow
               _nrf24l01Send
                 _enableInterrupts
                 _nrf24l01SPIEnd
                   _nrf24l01CSHigh
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
                   _nrf24l01CSLow
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
           _nrf24l01SetRXMode
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _strlen
         _nrf24l01SetTXPipe
           ___bmul
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
   _strcpy

 _ISR (ROOT)
   i1_nrf24l01ISR
     i1_exception
     i1_nrf24l01CheckACK
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       i1_strcmp
     i1_nrf24l01ReceivePacket
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     48      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     30      44       9       85.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      3D      11       76.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     12B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     12B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Jul 27 16:59:50 2018

                  ___bmul@product 0022                       __CFG_CP$OFF 0000               ___wmul@multiplicand 0022  
             nrf24l01Send@command 0022                      ___ftadd@exp1 003A                      ___ftadd@exp2 0039  
                     __CFG_LVP$ON 0000                      ___ftadd@sign 0038                               l303 0697  
                             l330 0C88                               l190 07C5                               l338 1758  
                             l470 0179                               l462 00F5                               l459 00D6  
                             l485 16A3                               l719 054E                               l695 0CD8  
                             l696 0CE0                               l688 0CC5                               l779 0DDC  
                    __CFG_CPD$OFF 0000                               _ISR 0004        __end_ofi1_nrf24l01CheckACK 0856  
                             wreg 0009                 sleep@milliseconds 0038               nrf24l01SendPacket@i 0033  
                            ?_ISR 0070                      ___ftdiv@cntr 0045                      ___ftdiv@sign 004A  
                  ??_nrf24l01Init 0033                              l3003 0FB4                              l3015 0FD0  
                            l3007 0FBC                              l3201 0F11                              l3041 16F6  
                            l3121 1606                              l3019 0FD8                              l3051 0D7A  
                            l3131 17F2                              l3311 0788                              l3071 0DC4  
                            l3143 05EB                              l3127 17DE                              l2511 0C5E  
                            l2503 0C4D                              l3209 0F2A                              l2425 1650  
                            l3129 17EA                              l2417 0B42                              l2433 080D  
                            l3161 1764                              l3171 1777                              l3307 0794  
                            l3083 0DEE                              l3091 085B                              l2541 09E4  
                            l3181 0EBA                              l3309 079C                              l3077 0DD2  
                            l3069 0DB3                              l3093 086B                              l2437 0826  
                            l2429 0804                              l2525 0C89                              l2535 09D2  
                            l3079 0DE0                              l3423 0485                              l2801 0560  
                            l2713 169D                              l3417 0476                              l3409 042C  
                  ??_nrf24l01Send 0021                              l2571 0C9B                              l3187 0ED0  
                            l2731 0BA7                              l2707 15E2                              l2483 0C2E  
                            l2547 1711                              l2627 069C                              l2555 15E7  
                            l3283 0912                              l3611 093E                              l2805 0572  
                            l2741 0BD5                              l2733 0BB5                              l2397 0B07  
                            l2549 171D                              l2653 0709                              l2645 06CF  
                            l2629 06AB                              l3293 0922                              l3461 0887  
                            l3613 0961                              l2575 0CA2                              l2815 058D  
                            l2831 0A1B                              l2903 0104                              l2487 0C36  
                            l2479 0C1D                              l2671 072E                              l2559 15ED  
                            l3543 022E                              l3463 0893                              l3471 08A8  
                            l3623 16D8                              l2585 0CCA                              l2577 0CAC  
                            l2745 0BE0                              l2825 09F5                              l2913 0123  
                            l2681 0763                              l2649 06E8                              l2587 0CD2  
                            l2579 0CB1                              l2755 04D7                              l2827 0A03  
                            l2835 0A26                              l2683 0733                              l3467 089F  
                            l2765 04ED                              l2925 0156                              l2669 071F  
                            l2783 051A                              l2759 04DE                              l2951 01E9  
                            l2935 018C                              l2919 0129                              l2871 0066  
                            l2785 0524                              l2777 0507                              l2945 01A4  
                            l2937 018F                              l2929 0165                              l2865 0056  
                            l2953 0033                              l2795 0540                              l2787 0529  
                            l2963 0988                              l2955 01F4                              l2891 00D2  
                            l2797 054A                              l2789 052D                              l2893 00D8  
                            l3773 0E9F                              l2967 099E                              l2991 0F79  
                            l2879 0094                              l2985 0F63                              l2897 00DD  
                            l2889 00A3                              STR_1 1835                      __CFG_WDTE$ON 0000  
                            STR_2 1835                              STR_3 182D                              STR_4 181E  
                            STR_5 1823                              STR_6 180C                              STR_7 1813  
                            STR_8 1831                              STR_9 1828                              u3005 0F95  
                            u2065 09C0                              u3025 0FBD                              u2235 0CE7  
                            u2155 0CA7                              u3035 0FC3                              u3125 0D82  
                            u2175 0CC0                              u3215 0860                              u2415 0BAA  
                            u3065 0FD9                              u2195 0CCD                              u3075 0FDF  
                            u3155 0DB4                              u2435 0BB6                              u3325 0EE2  
                            u2445 0BCA                              u2285 0703                              u3335 0EF2  
                            u2455 0BD6                              u2375 16A4                              u2625 052E  
                            u3345 0F12                              u3185 0DD3                              u2385 16A9  
                            u3355 0F21                              u2715 09F8                              u3284 175E  
                            u2565 0508                              u3365 0F2B                              u3285 175D  
                            u2655 0541                              u2735 0A11                              u2745 0A1C  
                            u2595 051B                              u3555 088A                              u2855 014C  
                            u3807 072A                              u3575 0899                              u3817 0748  
                            u3585 08A0                              u3665 094F                              u2875 015D  
                            u3827 0754                              u2885 016F                              u3837 0764  
                            u3757 0E20                              u2895 0181                              u3847 0B19  
                            u3767 179A                              i1l48 15CE                              u3857 0B2E  
                            u3777 17A9                              u2995 0F85                              u3867 0B3C  
                            u3787 06A7                              u3797 0710                              _WPUA 020C  
                            _WPUC 020E    __size_of_nrf24l01InterfaceInit 001C                      __CFG_WRT$OFF 0000  
                   __CFG_FCMEN$ON 0000     __end_of_nrf24l01InterfaceInit 16D2                              _main 0DFE  
                            _ftoa 05A5                      ___ftpack@arg 0020                              _loop 01FA  
                    ___ftpack@exp 0023                              fsr0h 0005                              fsr1h 0007  
                            indf0 0000                              fsr0l 0004                              indf1 0001  
                            fsr1l 0006                              btemp 007E    __size_of_nrf24l01ReceivePacket 0053  
                   __CFG_BORV$LOW 0000     __end_of_nrf24l01ReceivePacket 0C3C                              start 000F  
           nrf24l01SetRXPipe@pipe 0025  __size_ofi1_nrf24l01ReceivePacket 004D                     __CFG_CSWEN$ON 0000  
               ___bmul@multiplier 0023                     __CFG_MCLRE$ON 0000                      ___ftmul@cntr 0065  
                    ___ftmul@sign 0066       __size_of_nrf24l01SendPacket 00D1                             ??_ISR 007D  
                    ___fttol@exp1 00A5              __size_of_getADCValue 0094                   ??_nrf24l01CELow 0070  
                    ___fttol@lval 00A1                   ??_nrf24l01CSLow 0070                             ?_main 0070  
                           ?_ftoa 00A6                       i1_exception 1598                             ?_loop 0070  
                 __end_of___ftadd 05A5                             STR_10 1801                   __end_of___ftdiv 0F4C  
                 __end_of___ftneg 15C8                   __end_of___lldiv 0BE9                   __end_of___ftmul 1000  
                 __end_of___llmod 0A2F                   __end_of___ftsub 170C                   __end_of___fttol 0DFE  
                  __CFG_DEBUG$OFF 0000                             i1l330 0AF7                             i1l167 000D  
                 __end_of___lwmod 08AD            enableInterrupts@enable 0070                        i1memset@p1 0070  
                   __CFG_PWRTE$ON 0000             nrf24l01SetTXPipe@pipe 0026                      ___lltoft@exp 002D  
                   ___awtoft@sign 002D                   __end_of_dpowers 1028                   __end_of_isdigit 15E4  
                           _sleep 0909                     ___ftpack@sign 0024                             ftoa@f 00A6  
                           ftoa@l 00AE                    __CFG_BOREN$OFF 0000                  _enableInterrupts 15AF  
                           status 0003                             wtemp0 007E                   __end_of_sprintf 01FA  
     __end_ofi1_nrf24l01SetRXMode 0A73                  __end_ofi1_memset 164B    __size_of_nrf24l01ChangeTXPower 003F  
               getADCValue@adcSum 0054     __end_of_nrf24l01ChangeTXPower 09EC                  __end_ofi1_strcmp 17D9  
                _nrf24l01SPIStart 15B7                   __initialization 0011                  _nrf24l01CheckACK 08AD  
          nrf24l01InitRegisters@i 0031                      __end_of_main 0EA3                      __end_of_ftoa 0697  
            __end_of_handleRXData 1608                      __end_of_loop 03A9      i1nrf24l01ReceivePacket@width 0079  
             i1nrf24l01ISR@status 007C      nrf24l01ChangeTXPower@rfSetup 0026                  ??_nrf24l01CEHigh 0070  
                      i1strcmp@s1 0070                        i1strcmp@s2 0072                            ??_main 00C4  
                          ??_ftoa 006F                     ___fttol@sign1 00A0                            ??_loop 00C3  
                ??_nrf24l01CSHigh 0070                  ??_nrf24l01SPIEnd 0070               _nrf24l01GetRXPacket 159A  
          __size_ofi1_nrf24l01ISR 0049          __size_of_nrf24l01SPISend 000D                  ___llmod@dividend 0032  
                          _ADRESH 009C                            _ADRESL 009B                            ?_sleep 0038  
                __end_of___awtoft 178E                            _ANSELA 018C                            _ANSELC 018E  
                __end_of___ftpack 0CF7                  __end_of___lbtoft 169A                  __end_of___lltoft 0880  
                          _ODCONA 028C          __size_of_nrf24l01GetPipe 0038                            _ODCONC 028E  
                          i1l3223 0A35                            i1l2603 15D3                            i1l3243 0A6D  
                          i1l3251 1637                            i1l3263 17D3                            i1l3255 17B3  
                          i1l3521 0B90                            i1l3513 0B78                            i1l3259 17BB  
                          i1l3517 0B88                            i1l3651 0AD6                            i1l3643 0AC6  
                          i1l3665 0AF8                            _INLVLA 038C                            _INLVLC 038E  
           __size_of_checkTXPower 0014                            u390_27 15BB                            u391_27 15A9  
                          u387_27 0A46                            u388_27 0A5A                            u389_27 0A67  
                          _STATUS 0003          __size_of_nrf24l01SendACK 002E              ?_nrf24l01GetRXPacket 0070  
            __size_of_nrf24l01ISR 0056           nrf24l01SetRXMode@config 0024                            ___bmul 15E4  
                          ___ftge 0971           nrf24l01SetRXMode@rxMode 0025                            ___wmul 169A  
                       ??___ftadd 0034                    __CFG_STVREN$ON 0000                         ??___ftdiv 0041  
                       ??___ftneg 005A                         ??___lldiv 0028                         ??___ftmul 005D  
                       ??___llmod 0036                         ??___ftsub 0041                         ??___fttol 006B  
                       ??___lwmod 0024              __end_of_nrf24l01Init 17B2              __end_of_nrf24l01Send 174B  
                          _memset 164B             _nrf24l01InitRegisters 03A9                            _strcat 17D9  
                          _strcmp 0803                            _strcpy 16D2                            _strlen 170C  
                          ftoa@cp 00B2             ___ftmul@f3_as_product 0062         i1nrf24l01SetRXMode@config 0075  
                       ??_isdigit 0020                            loop@ta 0123                            loop@vt 0120  
       i1nrf24l01SetRXMode@rxMode 0076                      _checkTXPower 1608                         ??_sprintf 0042  
              getADCValue@adcLoop 0051           __end_of__initialization 0029                        ___ftadd@f1 002E  
                      ___ftadd@f2 0031                        ___ftge@ff1 0020                        ___ftge@ff2 0023  
           ??_nrf24l01GetRXPacket 0020          nrf24l01SendPacket@Packet 002D                getADCValue@channel 0053  
                      ___ftdiv@f1 003E                        ___ftdiv@f2 003B                        ___ftdiv@f3 0046  
                   i1_nrf24l01ISR 0AB7           i1_nrf24l01ReceivePacket 0B49                        ___ftneg@f1 0057  
                      ___awtoft@c 0028                        ___lbtoft@c 002F               ___bmul@multiplicand 0020  
                      ___ftmul@f1 0057                        ___ftmul@f2 005A                        ___ftsub@f1 003E  
                      ___ftsub@f2 003B                        ___fttol@f1 0067                    __pcstackCOMMON 0070  
                    __pidataBANK1 07FF                        ___lltoft@c 0028                        _doWDTSleep 161C  
                   __end_of_sleep 0939                         ?i1_memset 0070                         ?i1_strcmp 0070  
                         ??_sleep 003A                      sprintf@width 004F                       loop@rfSetup 012E  
                      __pbssBANK1 00E8                        __pbssBANK2 0150                        __pbssBANK3 01A0  
              i1_nrf24l01CheckACK 082C                 ??_nrf24l01SPISend 0070                __size_of_exception 0002  
                  ?i1_nrf24l01ISR 0070             __size_of_handleRXData 0012           __size_ofi1_nrf24l01Send 001B  
               ??_nrf24l01GetPipe 0026                        __pmaintext 0DFE                    main@bootStatus 00C5  
             ?i1_nrf24l01CheckACK 0070                           ?___bmul 0020                           ?___ftge 0020  
                         ?___wmul 0020                 ??_nrf24l01SendACK 0034                   __CFG_PPS1WAY$ON 0000  
               _nrf24l01SetRXMode 0B00                 _nrf24l01SetRXPipe 174B            ?_nrf24l01InitRegisters 0070  
                      __pintentry 0004                 _nrf24l01SetTXPipe 0A73               nrf24l01SPISend@data 0070  
                         ?_memset 0020                ?_nrf24l01SetRXMode 0070                         ?___awtoft 0028  
                       ?___ftpack 0020                         ?___lbtoft 0028                ?_nrf24l01SetRXPipe 0070  
        __end_of_enableInterrupts 15B7                ?_nrf24l01SetTXPipe 0070                         ?___lltoft 0028  
             __CFG_RSTOSC$HFINT32 0000                      ?i1_exception 0070                           ?_strcat 00B3  
                         ?_strcmp 0020                           ?_strcpy 0020                           ?_strlen 0020  
           __end_of_n_ADDRESS_MUL 1801                        ??i1_memset 0076               ??_nrf24l01SetRXMode 0023  
        __end_of_nrf24l01SPIStart 15BF               ??_nrf24l01SetRXPipe 0023               ??_nrf24l01SetTXPipe 0024  
            ??i1_nrf24l01CheckACK 0077                        ??i1_strcmp 0073                           _SSP1BUF 0211  
        __end_of_nrf24l01CheckACK 08DB                      _handleRXData 15F6         ??i1_nrf24l01ReceivePacket 0078  
           _nrf24l01InterfaceInit 16B6        __end_of_nrf24l01SendPacket 0768                     ??_getADCValue 004E  
           __size_of_nrf24l01Init 0024             __size_of_nrf24l01Send 0020         __end_of_nrf24l01SetRXMode 0B49  
       __end_of_nrf24l01SetRXPipe 176C         __end_of_nrf24l01SetTXPipe 0AB7             _nrf24l01ReceivePacket 0BE9  
                 __size_of___bmul 0012                   __size_of___ftge 003C                           ___ftadd 04AF  
                     ?_doWDTSleep 0070                           ___ftdiv 0EA3                           ___ftneg 15BF  
                         ___lldiv 0B96                   __size_of___wmul 001C                           ___ftmul 0F4C  
                         ___llmod 09EC                           ___ftsub 16EE                           ___fttol 0D5F  
                         ___lwmod 0880                        ??___awtoft 002B                        ??___ftpack 0025  
                      ??___lbtoft 002B             __end_of_nrf24l01CELow 15A2                   __size_of_memset 0019  
           __end_of_nrf24l01CSLow 07FF                        ??___lltoft 002C                           __ptext1 16D2  
                         __ptext2 178E                           __ptext3 16B6                           __ptext4 03A9  
                         __ptext5 174B                           __ptext6 0939                           __ptext7 0880  
                         __ptext8 01FA                           __ptext9 0909                   __size_of_strcat 0027  
                 __size_of_strcmp 0029                 __end_of_exception 0004                   __size_of_strcpy 001C  
                 __size_of_strlen 001F                      __size_of_ISR 000B                           _counter 0150  
                         _dpowers 1000                           _isdigit 15D5                           _romData 00EB  
                         _sprintf 002D                           clrloop0 15A3              end_of_initialization 0029  
                         ftoa@buf 0153                           ftoa@rem 00AA                      _nrf24l01Init 178E  
                      _setMessage 0CF7                      _nrf24l01Send 172B                   ??i1_nrf24l01ISR 007B  
                      _romDataMap 01C1                           memset@c 0022                           memset@n 0024  
                         memset@p 0026                  nrf24l01GetPipe@i 002A                   ___lldiv@divisor 0020  
                 ___lldiv@counter 002D             _nrf24l01ChangeTXPower 09AD                  setMessage@packet 00B9  
    __size_ofi1_nrf24l01SetRXMode 0044                  setMessage@status 00C1                           strcmp@r 0024  
           i1nrf24l01Send@command 0073                           strlen@s 0020               __end_of_getADCValue 07FC  
                       _PORTAbits 000C                         _PORTCbits 000E                         _TRISAbits 008C  
                       _TRISCbits 008E                  nrf24l01Send@data 0020                  __CFG_FEXTOSC$OFF 0000  
             __size_of_doWDTSleep 0017                     ??_nrf24l01ISR 002B            ?_nrf24l01InterfaceInit 0070  
                     ___ftdiv@exp 0049                    i1_nrf24l01Send 1664                        main@packet 00C7  
          ?_nrf24l01ReceivePacket 0070        __size_of_nrf24l01SetRXMode 0049        __size_of_nrf24l01SetRXPipe 0021  
                     ___ftmul@exp 0061        __size_of_nrf24l01SetTXPipe 0044                    __end_of___bmul 15F6  
                  __end_of___ftge 09AD                    __end_of___wmul 16B6                         i1memset@c 0072  
                       i1memset@n 0074                         i1memset@p 0076                    __end_of_memset 1664  
                  __end_of_strcat 1800                    __end_of_strcmp 082C                    __end_of_strcpy 16EE  
                  __end_of_strlen 172B              __size_ofi1_exception 0002               start_initialization 0011  
                 _nrf24l01SPISend 15C8                       __end_of_ISR 000F                        ftoa@status 00A9  
               __size_ofi1_memset 0018         nrf24l01SetRXPipe@enRXAddr 0026                   _nrf24l01GetPipe 0939  
     __end_of_nrf24l01GetRXPacket 159C           __size_of_nrf24l01CEHigh 0003                         i1strcmp@r 0074  
               __size_ofi1_strcmp 0027           __size_of_nrf24l01CSHigh 0003                       ?_setMessage 00B9  
          __end_ofi1_nrf24l01Send 167F                   _nrf24l01SendACK 08DB           __size_of_nrf24l01SPIEnd 0007  
                 ___llmod@divisor 002E                   ___llmod@counter 0037            ?_nrf24l01ChangeTXPower 0023  
         ??_nrf24l01InitRegisters 0027                  __CFG_LPBOREN$OFF 0000                       _getADCValue 0768  
        i1nrf24l01ReceivePacket@i 007A                          ??___bmul 0021                          ??___ftge 0026  
             __end_of_nrf24l01ISR 0C92                          ??___wmul 0024                       __pdataBANK1 00EB  
                        ??_memset 0026                 ?_enableInterrupts 0070                          ??_strcat 0070  
                        ??_strcmp 0023                          ??_strcpy 0022                          ??_strlen 0022  
               __size_of___awtoft 0022                 __size_of___ftpack 0065                 __size_of___lbtoft 001B  
              ??_enableInterrupts 0070                 __size_of___lltoft 002A                       __pbssCOMMON 007D  
                       ___latbits 0002                     __pcstackBANK0 0020                     __pcstackBANK1 00A0  
                   __pcstackBANK2 0120                   doWDTSleep@wdtps 0021                 ?_nrf24l01SPIStart 0070  
            checkTXPower@rxPacket 0028                      _isdigit$1813 0020                 ?_nrf24l01CheckACK 0070  
              ??_nrf24l01SPIStart 0070                ??_nrf24l01CheckACK 0026                   ?i1_nrf24l01Send 0071  
                     sprintf@flag 0048                       sprintf@prec 0051                        loop@packet 012F  
             nrf24l01GetPipe@name 0029               nrf24l01GetPipe@pipe 0028                      ??_doWDTSleep 0020  
                        ?___ftadd 002E                          ?___ftdiv 003B                          ?___ftneg 0057  
                        ?___lldiv 0020                          ?___ftmul 0057                          ?___llmod 002E  
                        ?___ftsub 003B                          ?___fttol 0067                          ?___lwmod 0020  
            __end_of_n_ADDRESS_P0 181E           __end_of_nrf24l01SPISend 15D5                i1nrf24l01Send@data 0071  
       nrf24l01InitRegisters@enAA 002E               __size_of_setMessage 0068                _nrf24l01SendPacket 0697  
         __end_of_nrf24l01GetPipe 0971                          ?_isdigit 0070                         _loop$2064 0126  
                       _loop$2065 0129           __end_of_nrf24l01SendACK 0909                         _exception 0002  
     __size_ofi1_nrf24l01CheckACK 002A               ?_nrf24l01SendPacket 002D                          ?_sprintf 0038  
             i1_nrf24l01SetRXMode 0A2F                    __size_of_sleep 0030                __end_of_doWDTSleep 1633  
                  ___wmul@product 0024                       _nrf24l01ISR 0C3C                         clear_ram0 15A2  
                        _PIE0bits 0090                          _PIR0bits 0010                         _sleepLoop 00EA  
            ??_nrf24l01SendPacket 002F                   setMessage@value 00BD                   setMessage@topic 00BB  
            ?i1_nrf24l01SetRXMode 0070                        _ADCON0bits 009D                        _ADCON1bits 009E  
               ___wmul@multiplier 0020                          _WPUAbits 020C                          i1_memset 1633  
                   ?_checkTXPower 0070                          _RXPacket 01A0                          _TXPacket 00E8  
                        i1_strcmp 17B2                        ?_exception 0070          ?i1_nrf24l01ReceivePacket 0070  
                  _nrf24l01CEHigh 159C           ??_nrf24l01InterfaceInit 0020                    _nrf24l01CSHigh 0800  
               nrf24l01ISR@status 002C                    _nrf24l01SPIEnd 15A8           ??_nrf24l01ReceivePacket 0028  
          __size_of_nrf24l01CELow 0003             __end_ofi1_nrf24l01ISR 0B00            __size_of_nrf24l01CSLow 0003  
           ??i1_nrf24l01SetRXMode 0074                  __size_of___ftadd 00F6                  __size_of___ftdiv 00A9  
                __size_of___ftneg 0009                  __size_of___lldiv 0053                  __size_of___ftmul 00B4  
                __size_of___llmod 0043                  __size_of___ftsub 001E                  __size_of___fttol 009F  
           nrf24l01SendACK@packet 0035                  __size_of___lwmod 002D                          ___awtoft 176C  
                        ___ftpack 0C92                          ___lbtoft 167F                  ?_nrf24l01SPISend 0070  
                        ___lltoft 0856                        _ANSELAbits 018C                        _ANSELCbits 018E  
                  ??_checkTXPower 0027                  ?_nrf24l01GetPipe 0070                        sprintf@val 004A  
                   _n_ADDRESS_MUL 1800                        strcat@from 00B5            __end_of_nrf24l01CEHigh 159F  
                __size_of_isdigit 000F            __end_of_nrf24l01CSHigh 0803                  ?_nrf24l01SendACK 0070  
                        __ptext10 15F6                          __ptext11 08DB                          __ptext20 0B00  
                        __ptext12 0A73                          __ptext21 0002                          __ptext13 15E4  
                        __ptext30 0B96                          __ptext22 0CF7                          __ptext14 0697  
                        __ptext31 0856                          __ptext23 17D9                          __ptext15 170C  
                        __ptext40 04AF                          __ptext32 0D5F                          __ptext24 164B  
                        __ptext16 0C3C                          __ptext41 176C                          __ptext33 16EE  
                        __ptext25 05A5                          __ptext17 0BE9                          __ptext50 0B49  
                        __ptext42 1608                          __ptext34 15BF                          __ptext26 002D  
                        __ptext18 08AD                          __ptext51 1633                          __ptext43 159A  
                        __ptext35 0F4C                          __ptext27 15D5                          __ptext19 0803  
                        __ptext60 0800                          __ptext52 082C                          __ptext44 09AD  
                        __ptext36 0971                          __ptext28 169A                          __ptext61 15AF  
                        __ptext53 17B2                          __ptext45 172B                          __ptext37 0768  
                        __ptext29 09EC                          __ptext62 159F                          __ptext54 0A2F  
                        __ptext46 167F                          __ptext38 161C                          __ptext63 159C  
                        __ptext55 1664                          __ptext47 0C92                          __ptext39 0EA3  
                        __ptext64 1598                          __ptext56 15B7                          __ptext57 07FC  
                        __ptext49 0AB7                          __ptext58 15C8                          __ptext59 15A8  
                    _SSP1CON1bits 0215            __end_of_nrf24l01SPIEnd 15AF                          _nrf24l01 007D  
                __size_of_sprintf 01CD                       _OSCCON1bits 0919                      ??_setMessage 00C0  
                      strcpy@from 0020     nrf24l01ChangeTXPower@addPower 0023                          _loop$877 012C  
         ??_nrf24l01ChangeTXPower 0025                     __size_of_main 00A5                     __size_of_ftoa 00F2  
                   __size_of_loop 01AF      nrf24l01InitRegisters@channel 0029      nrf24l01InitRegisters@feature 002B  
              exception@exception 0070                        _RC0PPSbits 0EA0      nrf24l01InitRegisters@rfSetup 002C  
                      _RC1PPSbits 0EA1                      ?_getADCValue 004B                        _RC2PPSbits 0EA2  
  __size_of_nrf24l01InitRegisters 0106     __end_of_nrf24l01InitRegisters 04AF                          int$flags 007E  
    nrf24l01InitRegisters@setupAW 002A                        _ODCONAbits 028C                      _SSP1STATbits 0214  
                        main@pipe 00C6                     ??i1_exception 0070            nrf24l01ReceivePacket@i 002A  
                   _nrf24l01CELow 159F                     _nrf24l01CSLow 07FC                __end_of_setMessage 0D5F  
 __end_ofi1_nrf24l01ReceivePacket 0B96                        _INTCONbits 000B                   ?_nrf24l01CEHigh 0070  
                      _FVRCONbits 0117                  ??i1_nrf24l01Send 0072                       ??_exception 0020  
                 ?_nrf24l01CSHigh 0070                    __pstringtext10 1831                    __pstringtext11 1835  
                  __pstringtext12 0000                          isdigit@c 0021                          memset@p1 0020  
                   ?_handleRXData 0070                   ?_nrf24l01SPIEnd 0070              handleRXData@RXPacket 0037  
                        intlevel1 0000                         sprintf@ap 0049                         sprintf@sp 004E  
                    _n_ADDRESS_P0 1819         __size_of_enableInterrupts 0008                  ___lwmod@dividend 0022  
                ___lldiv@dividend 0024                 __CFG_CLKOUTEN$OFF 0000      __size_of_nrf24l01GetRXPacket 0002  
     nrf24l01InitRegisters@config 0030         __size_of_nrf24l01SPIStart 0008         __size_of_nrf24l01CheckACK 002E  
     nrf24l01InitRegisters@status 002D        nrf24l01ReceivePacket@width 0029                    ?_nrf24l01CELow 0070  
                   __pstringtext1 1000                     __pstringtext2 1819                     __pstringtext3 1800  
                   __pstringtext4 180C                     __pstringtext5 1813                     __pstringtext6 181E  
                   __pstringtext7 1823                     __pstringtext8 1828                     __pstringtext9 182D  
                  ?_nrf24l01CSLow 0070                          sprintf@c 0053                          sprintf@f 0038  
      nrf24l01InitRegisters@DynPD 002F                          strcat@cp 00B7                          strcat@to 00B3  
                        strcmp@s1 0020                          strcmp@s2 0022                  ___lldiv@quotient 0029  
                 ___lwmod@divisor 0020                          strcpy@cp 0024                          strlen@cp 0024  
                        strcpy@to 0023                   ___lwmod@counter 0025                    ??_handleRXData 0036  
             __end_ofi1_exception 159A                        _WDTCONbits 0097                     ?_nrf24l01Init 0070  
                   ?_nrf24l01Send 0020                      ?_nrf24l01ISR 0070              __end_of_checkTXPower 161C  
