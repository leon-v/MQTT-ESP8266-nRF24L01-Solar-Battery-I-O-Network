

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Thu Jul 19 13:15:05 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	_romArray_text,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	clrtext,global,class=CODE,delta=2
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    27                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text2,local,class=CODE,merge=1,delta=2
    29                           	psect	text3,local,class=CODE,merge=1,delta=2
    30                           	psect	text4,local,class=CODE,merge=1,delta=2
    31                           	psect	text5,local,class=CODE,merge=1,delta=2
    32                           	psect	text6,local,class=CODE,merge=1,delta=2
    33                           	psect	text7,local,class=CODE,merge=1,delta=2
    34                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text12,local,class=CODE,merge=1,delta=2
    39                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text14,local,class=CODE,merge=1,delta=2
    41                           	psect	text15,local,class=CODE,merge=1,delta=2
    42                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text18,local,class=CODE,merge=1,delta=2
    45                           	psect	text19,local,class=CODE,merge=1,delta=2
    46                           	psect	text20,local,class=CODE,merge=1,delta=2
    47                           	psect	text21,local,class=CODE,merge=1,delta=2
    48                           	psect	text22,local,class=CODE,merge=1,delta=2
    49                           	psect	text23,local,class=CODE,merge=1,delta=2
    50                           	psect	text24,local,class=CODE,merge=1,delta=2
    51                           	psect	text25,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	psect	text27,local,class=CODE,merge=1,delta=2
    54                           	psect	text28,local,class=CODE,merge=1,delta=2
    55                           	psect	text29,local,class=CODE,merge=1,delta=2
    56                           	psect	text30,local,class=CODE,merge=1,delta=2
    57                           	psect	text31,local,class=CODE,merge=1,delta=2
    58                           	psect	text32,local,class=CODE,merge=1,delta=2
    59                           	psect	text33,local,class=CODE,merge=1,delta=2
    60                           	psect	text34,local,class=CODE,merge=1,delta=2
    61                           	psect	text35,local,class=CODE,merge=1,delta=2
    62                           	psect	text36,local,class=CODE,merge=1,delta=2
    63                           	psect	text37,local,class=CODE,merge=1,delta=2
    64                           	psect	text38,local,class=CODE,merge=1,delta=2
    65                           	psect	text39,local,class=CODE,merge=1,delta=2
    66                           	psect	text40,local,class=CODE,merge=1,delta=2
    67                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    68                           	psect	text42,local,class=CODE,merge=1,delta=2
    69                           	psect	text43,local,class=CODE,merge=1,delta=2
    70                           	psect	text44,local,class=CODE,merge=1,delta=2
    71                           	psect	text45,local,class=CODE,merge=1,delta=2,group=1
    72                           	dabs	1,0x7E,2
    73  0000                     
    74                           ; Version 2.00
    75                           ; Generated 27/05/2018 GMT
    76                           ; 
    77                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC16LF18325 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  0006                     	;# 
   115  0007                     	;# 
   116  0008                     	;# 
   117  0009                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000E                     	;# 
   122  0010                     	;# 
   123  0011                     	;# 
   124  0012                     	;# 
   125  0013                     	;# 
   126  0014                     	;# 
   127  0015                     	;# 
   128  0015                     	;# 
   129  0016                     	;# 
   130  0016                     	;# 
   131  0017                     	;# 
   132  0018                     	;# 
   133  0019                     	;# 
   134  0019                     	;# 
   135  001A                     	;# 
   136  001B                     	;# 
   137  001C                     	;# 
   138  001D                     	;# 
   139  001E                     	;# 
   140  001F                     	;# 
   141  008C                     	;# 
   142  008E                     	;# 
   143  0090                     	;# 
   144  0091                     	;# 
   145  0092                     	;# 
   146  0093                     	;# 
   147  0094                     	;# 
   148  0097                     	;# 
   149  009B                     	;# 
   150  009B                     	;# 
   151  009C                     	;# 
   152  009D                     	;# 
   153  009E                     	;# 
   154  009F                     	;# 
   155  010C                     	;# 
   156  010E                     	;# 
   157  0111                     	;# 
   158  0112                     	;# 
   159  0113                     	;# 
   160  0114                     	;# 
   161  0115                     	;# 
   162  0116                     	;# 
   163  0117                     	;# 
   164  0118                     	;# 
   165  0119                     	;# 
   166  018C                     	;# 
   167  018E                     	;# 
   168  0199                     	;# 
   169  0199                     	;# 
   170  0199                     	;# 
   171  019A                     	;# 
   172  019A                     	;# 
   173  019A                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019C                     	;# 
   182  019D                     	;# 
   183  019D                     	;# 
   184  019D                     	;# 
   185  019E                     	;# 
   186  019E                     	;# 
   187  019E                     	;# 
   188  019F                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  019F                     	;# 
   193  020C                     	;# 
   194  020E                     	;# 
   195  0211                     	;# 
   196  0211                     	;# 
   197  0212                     	;# 
   198  0212                     	;# 
   199  0213                     	;# 
   200  0213                     	;# 
   201  0214                     	;# 
   202  0214                     	;# 
   203  0215                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0215                     	;# 
   207  0216                     	;# 
   208  0216                     	;# 
   209  0217                     	;# 
   210  0217                     	;# 
   211  0219                     	;# 
   212  021A                     	;# 
   213  021B                     	;# 
   214  021C                     	;# 
   215  021D                     	;# 
   216  021D                     	;# 
   217  021E                     	;# 
   218  021F                     	;# 
   219  028C                     	;# 
   220  028E                     	;# 
   221  0291                     	;# 
   222  0291                     	;# 
   223  0292                     	;# 
   224  0293                     	;# 
   225  0294                     	;# 
   226  0295                     	;# 
   227  0295                     	;# 
   228  0296                     	;# 
   229  0297                     	;# 
   230  0298                     	;# 
   231  029F                     	;# 
   232  030C                     	;# 
   233  030E                     	;# 
   234  0311                     	;# 
   235  0311                     	;# 
   236  0312                     	;# 
   237  0313                     	;# 
   238  0314                     	;# 
   239  0315                     	;# 
   240  0315                     	;# 
   241  0316                     	;# 
   242  0317                     	;# 
   243  0318                     	;# 
   244  038C                     	;# 
   245  038E                     	;# 
   246  0391                     	;# 
   247  0392                     	;# 
   248  0393                     	;# 
   249  0397                     	;# 
   250  0398                     	;# 
   251  0399                     	;# 
   252  039A                     	;# 
   253  039C                     	;# 
   254  039D                     	;# 
   255  039E                     	;# 
   256  039F                     	;# 
   257  0411                     	;# 
   258  0411                     	;# 
   259  0412                     	;# 
   260  0413                     	;# 
   261  0414                     	;# 
   262  0415                     	;# 
   263  0416                     	;# 
   264  0417                     	;# 
   265  0418                     	;# 
   266  0418                     	;# 
   267  0419                     	;# 
   268  041A                     	;# 
   269  041B                     	;# 
   270  041C                     	;# 
   271  041D                     	;# 
   272  041E                     	;# 
   273  041F                     	;# 
   274  0498                     	;# 
   275  0498                     	;# 
   276  0499                     	;# 
   277  049A                     	;# 
   278  049B                     	;# 
   279  049B                     	;# 
   280  049C                     	;# 
   281  049D                     	;# 
   282  049E                     	;# 
   283  049F                     	;# 
   284  0617                     	;# 
   285  0618                     	;# 
   286  0619                     	;# 
   287  0619                     	;# 
   288  061A                     	;# 
   289  061B                     	;# 
   290  061C                     	;# 
   291  061C                     	;# 
   292  061F                     	;# 
   293  0691                     	;# 
   294  0692                     	;# 
   295  0693                     	;# 
   296  0694                     	;# 
   297  0695                     	;# 
   298  0696                     	;# 
   299  0697                     	;# 
   300  0698                     	;# 
   301  0699                     	;# 
   302  0711                     	;# 
   303  0712                     	;# 
   304  0713                     	;# 
   305  0714                     	;# 
   306  0715                     	;# 
   307  0716                     	;# 
   308  0717                     	;# 
   309  0718                     	;# 
   310  0719                     	;# 
   311  0891                     	;# 
   312  0891                     	;# 
   313  0891                     	;# 
   314  0891                     	;# 
   315  0891                     	;# 
   316  0891                     	;# 
   317  0892                     	;# 
   318  0892                     	;# 
   319  0892                     	;# 
   320  0893                     	;# 
   321  0893                     	;# 
   322  0893                     	;# 
   323  0893                     	;# 
   324  0893                     	;# 
   325  0893                     	;# 
   326  0894                     	;# 
   327  0894                     	;# 
   328  0894                     	;# 
   329  0895                     	;# 
   330  0895                     	;# 
   331  0895                     	;# 
   332  0896                     	;# 
   333  0896                     	;# 
   334  0896                     	;# 
   335  089B                     	;# 
   336  0911                     	;# 
   337  0912                     	;# 
   338  0913                     	;# 
   339  0914                     	;# 
   340  0915                     	;# 
   341  0916                     	;# 
   342  0918                     	;# 
   343  0919                     	;# 
   344  091A                     	;# 
   345  091B                     	;# 
   346  091C                     	;# 
   347  091D                     	;# 
   348  091E                     	;# 
   349  091F                     	;# 
   350  0E0F                     	;# 
   351  0E10                     	;# 
   352  0E11                     	;# 
   353  0E12                     	;# 
   354  0E13                     	;# 
   355  0E14                     	;# 
   356  0E15                     	;# 
   357  0E16                     	;# 
   358  0E17                     	;# 
   359  0E18                     	;# 
   360  0E19                     	;# 
   361  0E1A                     	;# 
   362  0E1B                     	;# 
   363  0E1C                     	;# 
   364  0E1D                     	;# 
   365  0E1E                     	;# 
   366  0E1F                     	;# 
   367  0E20                     	;# 
   368  0E21                     	;# 
   369  0E22                     	;# 
   370  0E24                     	;# 
   371  0E25                     	;# 
   372  0E28                     	;# 
   373  0E29                     	;# 
   374  0E2A                     	;# 
   375  0E2B                     	;# 
   376  0E2C                     	;# 
   377  0E2D                     	;# 
   378  0E2E                     	;# 
   379  0E2F                     	;# 
   380  0E90                     	;# 
   381  0E91                     	;# 
   382  0E92                     	;# 
   383  0E94                     	;# 
   384  0E95                     	;# 
   385  0EA0                     	;# 
   386  0EA1                     	;# 
   387  0EA2                     	;# 
   388  0EA3                     	;# 
   389  0EA4                     	;# 
   390  0EA5                     	;# 
   391  0F0F                     	;# 
   392  0F10                     	;# 
   393  0F11                     	;# 
   394  0F12                     	;# 
   395  0F13                     	;# 
   396  0F14                     	;# 
   397  0F15                     	;# 
   398  0F16                     	;# 
   399  0F17                     	;# 
   400  0F18                     	;# 
   401  0F19                     	;# 
   402  0F1A                     	;# 
   403  0F1B                     	;# 
   404  0F1C                     	;# 
   405  0F1D                     	;# 
   406  0F1E                     	;# 
   407  0F1F                     	;# 
   408  0F20                     	;# 
   409  0F21                     	;# 
   410  0F22                     	;# 
   411  0F23                     	;# 
   412  0F24                     	;# 
   413  0F25                     	;# 
   414  0F26                     	;# 
   415  0F27                     	;# 
   416  0F28                     	;# 
   417  0F29                     	;# 
   418  0F2A                     	;# 
   419  0F2B                     	;# 
   420  0F2C                     	;# 
   421  0F2D                     	;# 
   422  0F2E                     	;# 
   423  0F2F                     	;# 
   424  0F30                     	;# 
   425  0F31                     	;# 
   426  0F32                     	;# 
   427  0F33                     	;# 
   428  0F34                     	;# 
   429  0F35                     	;# 
   430  0F36                     	;# 
   431  0F37                     	;# 
   432  0FE4                     	;# 
   433  0FE5                     	;# 
   434  0FE6                     	;# 
   435  0FE7                     	;# 
   436  0FE8                     	;# 
   437  0FE9                     	;# 
   438  0FEA                     	;# 
   439  0FEB                     	;# 
   440  0FED                     	;# 
   441  0FEE                     	;# 
   442  0FEF                     	;# 
   443  0000                     	;# 
   444  0001                     	;# 
   445  0002                     	;# 
   446  0003                     	;# 
   447  0004                     	;# 
   448  0005                     	;# 
   449  0006                     	;# 
   450  0007                     	;# 
   451  0008                     	;# 
   452  0009                     	;# 
   453  000A                     	;# 
   454  000B                     	;# 
   455  000C                     	;# 
   456  000E                     	;# 
   457  0010                     	;# 
   458  0011                     	;# 
   459  0012                     	;# 
   460  0013                     	;# 
   461  0014                     	;# 
   462  0015                     	;# 
   463  0015                     	;# 
   464  0016                     	;# 
   465  0016                     	;# 
   466  0017                     	;# 
   467  0018                     	;# 
   468  0019                     	;# 
   469  0019                     	;# 
   470  001A                     	;# 
   471  001B                     	;# 
   472  001C                     	;# 
   473  001D                     	;# 
   474  001E                     	;# 
   475  001F                     	;# 
   476  008C                     	;# 
   477  008E                     	;# 
   478  0090                     	;# 
   479  0091                     	;# 
   480  0092                     	;# 
   481  0093                     	;# 
   482  0094                     	;# 
   483  0097                     	;# 
   484  009B                     	;# 
   485  009B                     	;# 
   486  009C                     	;# 
   487  009D                     	;# 
   488  009E                     	;# 
   489  009F                     	;# 
   490  010C                     	;# 
   491  010E                     	;# 
   492  0111                     	;# 
   493  0112                     	;# 
   494  0113                     	;# 
   495  0114                     	;# 
   496  0115                     	;# 
   497  0116                     	;# 
   498  0117                     	;# 
   499  0118                     	;# 
   500  0119                     	;# 
   501  018C                     	;# 
   502  018E                     	;# 
   503  0199                     	;# 
   504  0199                     	;# 
   505  0199                     	;# 
   506  019A                     	;# 
   507  019A                     	;# 
   508  019A                     	;# 
   509  019B                     	;# 
   510  019B                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019B                     	;# 
   514  019C                     	;# 
   515  019C                     	;# 
   516  019C                     	;# 
   517  019D                     	;# 
   518  019D                     	;# 
   519  019D                     	;# 
   520  019E                     	;# 
   521  019E                     	;# 
   522  019E                     	;# 
   523  019F                     	;# 
   524  019F                     	;# 
   525  019F                     	;# 
   526  019F                     	;# 
   527  019F                     	;# 
   528  020C                     	;# 
   529  020E                     	;# 
   530  0211                     	;# 
   531  0211                     	;# 
   532  0212                     	;# 
   533  0212                     	;# 
   534  0213                     	;# 
   535  0213                     	;# 
   536  0214                     	;# 
   537  0214                     	;# 
   538  0215                     	;# 
   539  0215                     	;# 
   540  0215                     	;# 
   541  0215                     	;# 
   542  0216                     	;# 
   543  0216                     	;# 
   544  0217                     	;# 
   545  0217                     	;# 
   546  0219                     	;# 
   547  021A                     	;# 
   548  021B                     	;# 
   549  021C                     	;# 
   550  021D                     	;# 
   551  021D                     	;# 
   552  021E                     	;# 
   553  021F                     	;# 
   554  028C                     	;# 
   555  028E                     	;# 
   556  0291                     	;# 
   557  0291                     	;# 
   558  0292                     	;# 
   559  0293                     	;# 
   560  0294                     	;# 
   561  0295                     	;# 
   562  0295                     	;# 
   563  0296                     	;# 
   564  0297                     	;# 
   565  0298                     	;# 
   566  029F                     	;# 
   567  030C                     	;# 
   568  030E                     	;# 
   569  0311                     	;# 
   570  0311                     	;# 
   571  0312                     	;# 
   572  0313                     	;# 
   573  0314                     	;# 
   574  0315                     	;# 
   575  0315                     	;# 
   576  0316                     	;# 
   577  0317                     	;# 
   578  0318                     	;# 
   579  038C                     	;# 
   580  038E                     	;# 
   581  0391                     	;# 
   582  0392                     	;# 
   583  0393                     	;# 
   584  0397                     	;# 
   585  0398                     	;# 
   586  0399                     	;# 
   587  039A                     	;# 
   588  039C                     	;# 
   589  039D                     	;# 
   590  039E                     	;# 
   591  039F                     	;# 
   592  0411                     	;# 
   593  0411                     	;# 
   594  0412                     	;# 
   595  0413                     	;# 
   596  0414                     	;# 
   597  0415                     	;# 
   598  0416                     	;# 
   599  0417                     	;# 
   600  0418                     	;# 
   601  0418                     	;# 
   602  0419                     	;# 
   603  041A                     	;# 
   604  041B                     	;# 
   605  041C                     	;# 
   606  041D                     	;# 
   607  041E                     	;# 
   608  041F                     	;# 
   609  0498                     	;# 
   610  0498                     	;# 
   611  0499                     	;# 
   612  049A                     	;# 
   613  049B                     	;# 
   614  049B                     	;# 
   615  049C                     	;# 
   616  049D                     	;# 
   617  049E                     	;# 
   618  049F                     	;# 
   619  0617                     	;# 
   620  0618                     	;# 
   621  0619                     	;# 
   622  0619                     	;# 
   623  061A                     	;# 
   624  061B                     	;# 
   625  061C                     	;# 
   626  061C                     	;# 
   627  061F                     	;# 
   628  0691                     	;# 
   629  0692                     	;# 
   630  0693                     	;# 
   631  0694                     	;# 
   632  0695                     	;# 
   633  0696                     	;# 
   634  0697                     	;# 
   635  0698                     	;# 
   636  0699                     	;# 
   637  0711                     	;# 
   638  0712                     	;# 
   639  0713                     	;# 
   640  0714                     	;# 
   641  0715                     	;# 
   642  0716                     	;# 
   643  0717                     	;# 
   644  0718                     	;# 
   645  0719                     	;# 
   646  0891                     	;# 
   647  0891                     	;# 
   648  0891                     	;# 
   649  0891                     	;# 
   650  0891                     	;# 
   651  0891                     	;# 
   652  0892                     	;# 
   653  0892                     	;# 
   654  0892                     	;# 
   655  0893                     	;# 
   656  0893                     	;# 
   657  0893                     	;# 
   658  0893                     	;# 
   659  0893                     	;# 
   660  0893                     	;# 
   661  0894                     	;# 
   662  0894                     	;# 
   663  0894                     	;# 
   664  0895                     	;# 
   665  0895                     	;# 
   666  0895                     	;# 
   667  0896                     	;# 
   668  0896                     	;# 
   669  0896                     	;# 
   670  089B                     	;# 
   671  0911                     	;# 
   672  0912                     	;# 
   673  0913                     	;# 
   674  0914                     	;# 
   675  0915                     	;# 
   676  0916                     	;# 
   677  0918                     	;# 
   678  0919                     	;# 
   679  091A                     	;# 
   680  091B                     	;# 
   681  091C                     	;# 
   682  091D                     	;# 
   683  091E                     	;# 
   684  091F                     	;# 
   685  0E0F                     	;# 
   686  0E10                     	;# 
   687  0E11                     	;# 
   688  0E12                     	;# 
   689  0E13                     	;# 
   690  0E14                     	;# 
   691  0E15                     	;# 
   692  0E16                     	;# 
   693  0E17                     	;# 
   694  0E18                     	;# 
   695  0E19                     	;# 
   696  0E1A                     	;# 
   697  0E1B                     	;# 
   698  0E1C                     	;# 
   699  0E1D                     	;# 
   700  0E1E                     	;# 
   701  0E1F                     	;# 
   702  0E20                     	;# 
   703  0E21                     	;# 
   704  0E22                     	;# 
   705  0E24                     	;# 
   706  0E25                     	;# 
   707  0E28                     	;# 
   708  0E29                     	;# 
   709  0E2A                     	;# 
   710  0E2B                     	;# 
   711  0E2C                     	;# 
   712  0E2D                     	;# 
   713  0E2E                     	;# 
   714  0E2F                     	;# 
   715  0E90                     	;# 
   716  0E91                     	;# 
   717  0E92                     	;# 
   718  0E94                     	;# 
   719  0E95                     	;# 
   720  0EA0                     	;# 
   721  0EA1                     	;# 
   722  0EA2                     	;# 
   723  0EA3                     	;# 
   724  0EA4                     	;# 
   725  0EA5                     	;# 
   726  0F0F                     	;# 
   727  0F10                     	;# 
   728  0F11                     	;# 
   729  0F12                     	;# 
   730  0F13                     	;# 
   731  0F14                     	;# 
   732  0F15                     	;# 
   733  0F16                     	;# 
   734  0F17                     	;# 
   735  0F18                     	;# 
   736  0F19                     	;# 
   737  0F1A                     	;# 
   738  0F1B                     	;# 
   739  0F1C                     	;# 
   740  0F1D                     	;# 
   741  0F1E                     	;# 
   742  0F1F                     	;# 
   743  0F20                     	;# 
   744  0F21                     	;# 
   745  0F22                     	;# 
   746  0F23                     	;# 
   747  0F24                     	;# 
   748  0F25                     	;# 
   749  0F26                     	;# 
   750  0F27                     	;# 
   751  0F28                     	;# 
   752  0F29                     	;# 
   753  0F2A                     	;# 
   754  0F2B                     	;# 
   755  0F2C                     	;# 
   756  0F2D                     	;# 
   757  0F2E                     	;# 
   758  0F2F                     	;# 
   759  0F30                     	;# 
   760  0F31                     	;# 
   761  0F32                     	;# 
   762  0F33                     	;# 
   763  0F34                     	;# 
   764  0F35                     	;# 
   765  0F36                     	;# 
   766  0F37                     	;# 
   767  0FE4                     	;# 
   768  0FE5                     	;# 
   769  0FE6                     	;# 
   770  0FE7                     	;# 
   771  0FE8                     	;# 
   772  0FE9                     	;# 
   773  0FEA                     	;# 
   774  0FEB                     	;# 
   775  0FED                     	;# 
   776  0FEE                     	;# 
   777  0FEF                     	;# 
   778  0000                     	;# 
   779  0001                     	;# 
   780  0002                     	;# 
   781  0003                     	;# 
   782  0004                     	;# 
   783  0005                     	;# 
   784  0006                     	;# 
   785  0007                     	;# 
   786  0008                     	;# 
   787  0009                     	;# 
   788  000A                     	;# 
   789  000B                     	;# 
   790  000C                     	;# 
   791  000E                     	;# 
   792  0010                     	;# 
   793  0011                     	;# 
   794  0012                     	;# 
   795  0013                     	;# 
   796  0014                     	;# 
   797  0015                     	;# 
   798  0015                     	;# 
   799  0016                     	;# 
   800  0016                     	;# 
   801  0017                     	;# 
   802  0018                     	;# 
   803  0019                     	;# 
   804  0019                     	;# 
   805  001A                     	;# 
   806  001B                     	;# 
   807  001C                     	;# 
   808  001D                     	;# 
   809  001E                     	;# 
   810  001F                     	;# 
   811  008C                     	;# 
   812  008E                     	;# 
   813  0090                     	;# 
   814  0091                     	;# 
   815  0092                     	;# 
   816  0093                     	;# 
   817  0094                     	;# 
   818  0097                     	;# 
   819  009B                     	;# 
   820  009B                     	;# 
   821  009C                     	;# 
   822  009D                     	;# 
   823  009E                     	;# 
   824  009F                     	;# 
   825  010C                     	;# 
   826  010E                     	;# 
   827  0111                     	;# 
   828  0112                     	;# 
   829  0113                     	;# 
   830  0114                     	;# 
   831  0115                     	;# 
   832  0116                     	;# 
   833  0117                     	;# 
   834  0118                     	;# 
   835  0119                     	;# 
   836  018C                     	;# 
   837  018E                     	;# 
   838  0199                     	;# 
   839  0199                     	;# 
   840  0199                     	;# 
   841  019A                     	;# 
   842  019A                     	;# 
   843  019A                     	;# 
   844  019B                     	;# 
   845  019B                     	;# 
   846  019B                     	;# 
   847  019B                     	;# 
   848  019B                     	;# 
   849  019C                     	;# 
   850  019C                     	;# 
   851  019C                     	;# 
   852  019D                     	;# 
   853  019D                     	;# 
   854  019D                     	;# 
   855  019E                     	;# 
   856  019E                     	;# 
   857  019E                     	;# 
   858  019F                     	;# 
   859  019F                     	;# 
   860  019F                     	;# 
   861  019F                     	;# 
   862  019F                     	;# 
   863  020C                     	;# 
   864  020E                     	;# 
   865  0211                     	;# 
   866  0211                     	;# 
   867  0212                     	;# 
   868  0212                     	;# 
   869  0213                     	;# 
   870  0213                     	;# 
   871  0214                     	;# 
   872  0214                     	;# 
   873  0215                     	;# 
   874  0215                     	;# 
   875  0215                     	;# 
   876  0215                     	;# 
   877  0216                     	;# 
   878  0216                     	;# 
   879  0217                     	;# 
   880  0217                     	;# 
   881  0219                     	;# 
   882  021A                     	;# 
   883  021B                     	;# 
   884  021C                     	;# 
   885  021D                     	;# 
   886  021D                     	;# 
   887  021E                     	;# 
   888  021F                     	;# 
   889  028C                     	;# 
   890  028E                     	;# 
   891  0291                     	;# 
   892  0291                     	;# 
   893  0292                     	;# 
   894  0293                     	;# 
   895  0294                     	;# 
   896  0295                     	;# 
   897  0295                     	;# 
   898  0296                     	;# 
   899  0297                     	;# 
   900  0298                     	;# 
   901  029F                     	;# 
   902  030C                     	;# 
   903  030E                     	;# 
   904  0311                     	;# 
   905  0311                     	;# 
   906  0312                     	;# 
   907  0313                     	;# 
   908  0314                     	;# 
   909  0315                     	;# 
   910  0315                     	;# 
   911  0316                     	;# 
   912  0317                     	;# 
   913  0318                     	;# 
   914  038C                     	;# 
   915  038E                     	;# 
   916  0391                     	;# 
   917  0392                     	;# 
   918  0393                     	;# 
   919  0397                     	;# 
   920  0398                     	;# 
   921  0399                     	;# 
   922  039A                     	;# 
   923  039C                     	;# 
   924  039D                     	;# 
   925  039E                     	;# 
   926  039F                     	;# 
   927  0411                     	;# 
   928  0411                     	;# 
   929  0412                     	;# 
   930  0413                     	;# 
   931  0414                     	;# 
   932  0415                     	;# 
   933  0416                     	;# 
   934  0417                     	;# 
   935  0418                     	;# 
   936  0418                     	;# 
   937  0419                     	;# 
   938  041A                     	;# 
   939  041B                     	;# 
   940  041C                     	;# 
   941  041D                     	;# 
   942  041E                     	;# 
   943  041F                     	;# 
   944  0498                     	;# 
   945  0498                     	;# 
   946  0499                     	;# 
   947  049A                     	;# 
   948  049B                     	;# 
   949  049B                     	;# 
   950  049C                     	;# 
   951  049D                     	;# 
   952  049E                     	;# 
   953  049F                     	;# 
   954  0617                     	;# 
   955  0618                     	;# 
   956  0619                     	;# 
   957  0619                     	;# 
   958  061A                     	;# 
   959  061B                     	;# 
   960  061C                     	;# 
   961  061C                     	;# 
   962  061F                     	;# 
   963  0691                     	;# 
   964  0692                     	;# 
   965  0693                     	;# 
   966  0694                     	;# 
   967  0695                     	;# 
   968  0696                     	;# 
   969  0697                     	;# 
   970  0698                     	;# 
   971  0699                     	;# 
   972  0711                     	;# 
   973  0712                     	;# 
   974  0713                     	;# 
   975  0714                     	;# 
   976  0715                     	;# 
   977  0716                     	;# 
   978  0717                     	;# 
   979  0718                     	;# 
   980  0719                     	;# 
   981  0891                     	;# 
   982  0891                     	;# 
   983  0891                     	;# 
   984  0891                     	;# 
   985  0891                     	;# 
   986  0891                     	;# 
   987  0892                     	;# 
   988  0892                     	;# 
   989  0892                     	;# 
   990  0893                     	;# 
   991  0893                     	;# 
   992  0893                     	;# 
   993  0893                     	;# 
   994  0893                     	;# 
   995  0893                     	;# 
   996  0894                     	;# 
   997  0894                     	;# 
   998  0894                     	;# 
   999  0895                     	;# 
  1000  0895                     	;# 
  1001  0895                     	;# 
  1002  0896                     	;# 
  1003  0896                     	;# 
  1004  0896                     	;# 
  1005  089B                     	;# 
  1006  0911                     	;# 
  1007  0912                     	;# 
  1008  0913                     	;# 
  1009  0914                     	;# 
  1010  0915                     	;# 
  1011  0916                     	;# 
  1012  0918                     	;# 
  1013  0919                     	;# 
  1014  091A                     	;# 
  1015  091B                     	;# 
  1016  091C                     	;# 
  1017  091D                     	;# 
  1018  091E                     	;# 
  1019  091F                     	;# 
  1020  0E0F                     	;# 
  1021  0E10                     	;# 
  1022  0E11                     	;# 
  1023  0E12                     	;# 
  1024  0E13                     	;# 
  1025  0E14                     	;# 
  1026  0E15                     	;# 
  1027  0E16                     	;# 
  1028  0E17                     	;# 
  1029  0E18                     	;# 
  1030  0E19                     	;# 
  1031  0E1A                     	;# 
  1032  0E1B                     	;# 
  1033  0E1C                     	;# 
  1034  0E1D                     	;# 
  1035  0E1E                     	;# 
  1036  0E1F                     	;# 
  1037  0E20                     	;# 
  1038  0E21                     	;# 
  1039  0E22                     	;# 
  1040  0E24                     	;# 
  1041  0E25                     	;# 
  1042  0E28                     	;# 
  1043  0E29                     	;# 
  1044  0E2A                     	;# 
  1045  0E2B                     	;# 
  1046  0E2C                     	;# 
  1047  0E2D                     	;# 
  1048  0E2E                     	;# 
  1049  0E2F                     	;# 
  1050  0E90                     	;# 
  1051  0E91                     	;# 
  1052  0E92                     	;# 
  1053  0E94                     	;# 
  1054  0E95                     	;# 
  1055  0EA0                     	;# 
  1056  0EA1                     	;# 
  1057  0EA2                     	;# 
  1058  0EA3                     	;# 
  1059  0EA4                     	;# 
  1060  0EA5                     	;# 
  1061  0F0F                     	;# 
  1062  0F10                     	;# 
  1063  0F11                     	;# 
  1064  0F12                     	;# 
  1065  0F13                     	;# 
  1066  0F14                     	;# 
  1067  0F15                     	;# 
  1068  0F16                     	;# 
  1069  0F17                     	;# 
  1070  0F18                     	;# 
  1071  0F19                     	;# 
  1072  0F1A                     	;# 
  1073  0F1B                     	;# 
  1074  0F1C                     	;# 
  1075  0F1D                     	;# 
  1076  0F1E                     	;# 
  1077  0F1F                     	;# 
  1078  0F20                     	;# 
  1079  0F21                     	;# 
  1080  0F22                     	;# 
  1081  0F23                     	;# 
  1082  0F24                     	;# 
  1083  0F25                     	;# 
  1084  0F26                     	;# 
  1085  0F27                     	;# 
  1086  0F28                     	;# 
  1087  0F29                     	;# 
  1088  0F2A                     	;# 
  1089  0F2B                     	;# 
  1090  0F2C                     	;# 
  1091  0F2D                     	;# 
  1092  0F2E                     	;# 
  1093  0F2F                     	;# 
  1094  0F30                     	;# 
  1095  0F31                     	;# 
  1096  0F32                     	;# 
  1097  0F33                     	;# 
  1098  0F34                     	;# 
  1099  0F35                     	;# 
  1100  0F36                     	;# 
  1101  0F37                     	;# 
  1102  0FE4                     	;# 
  1103  0FE5                     	;# 
  1104  0FE6                     	;# 
  1105  0FE7                     	;# 
  1106  0FE8                     	;# 
  1107  0FE9                     	;# 
  1108  0FEA                     	;# 
  1109  0FEB                     	;# 
  1110  0FED                     	;# 
  1111  0FEE                     	;# 
  1112  0FEF                     	;# 
  1113  0000                     	;# 
  1114  0001                     	;# 
  1115  0002                     	;# 
  1116  0003                     	;# 
  1117  0004                     	;# 
  1118  0005                     	;# 
  1119  0006                     	;# 
  1120  0007                     	;# 
  1121  0008                     	;# 
  1122  0009                     	;# 
  1123  000A                     	;# 
  1124  000B                     	;# 
  1125  000C                     	;# 
  1126  000E                     	;# 
  1127  0010                     	;# 
  1128  0011                     	;# 
  1129  0012                     	;# 
  1130  0013                     	;# 
  1131  0014                     	;# 
  1132  0015                     	;# 
  1133  0015                     	;# 
  1134  0016                     	;# 
  1135  0016                     	;# 
  1136  0017                     	;# 
  1137  0018                     	;# 
  1138  0019                     	;# 
  1139  0019                     	;# 
  1140  001A                     	;# 
  1141  001B                     	;# 
  1142  001C                     	;# 
  1143  001D                     	;# 
  1144  001E                     	;# 
  1145  001F                     	;# 
  1146  008C                     	;# 
  1147  008E                     	;# 
  1148  0090                     	;# 
  1149  0091                     	;# 
  1150  0092                     	;# 
  1151  0093                     	;# 
  1152  0094                     	;# 
  1153  0097                     	;# 
  1154  009B                     	;# 
  1155  009B                     	;# 
  1156  009C                     	;# 
  1157  009D                     	;# 
  1158  009E                     	;# 
  1159  009F                     	;# 
  1160  010C                     	;# 
  1161  010E                     	;# 
  1162  0111                     	;# 
  1163  0112                     	;# 
  1164  0113                     	;# 
  1165  0114                     	;# 
  1166  0115                     	;# 
  1167  0116                     	;# 
  1168  0117                     	;# 
  1169  0118                     	;# 
  1170  0119                     	;# 
  1171  018C                     	;# 
  1172  018E                     	;# 
  1173  0199                     	;# 
  1174  0199                     	;# 
  1175  0199                     	;# 
  1176  019A                     	;# 
  1177  019A                     	;# 
  1178  019A                     	;# 
  1179  019B                     	;# 
  1180  019B                     	;# 
  1181  019B                     	;# 
  1182  019B                     	;# 
  1183  019B                     	;# 
  1184  019C                     	;# 
  1185  019C                     	;# 
  1186  019C                     	;# 
  1187  019D                     	;# 
  1188  019D                     	;# 
  1189  019D                     	;# 
  1190  019E                     	;# 
  1191  019E                     	;# 
  1192  019E                     	;# 
  1193  019F                     	;# 
  1194  019F                     	;# 
  1195  019F                     	;# 
  1196  019F                     	;# 
  1197  019F                     	;# 
  1198  020C                     	;# 
  1199  020E                     	;# 
  1200  0211                     	;# 
  1201  0211                     	;# 
  1202  0212                     	;# 
  1203  0212                     	;# 
  1204  0213                     	;# 
  1205  0213                     	;# 
  1206  0214                     	;# 
  1207  0214                     	;# 
  1208  0215                     	;# 
  1209  0215                     	;# 
  1210  0215                     	;# 
  1211  0215                     	;# 
  1212  0216                     	;# 
  1213  0216                     	;# 
  1214  0217                     	;# 
  1215  0217                     	;# 
  1216  0219                     	;# 
  1217  021A                     	;# 
  1218  021B                     	;# 
  1219  021C                     	;# 
  1220  021D                     	;# 
  1221  021D                     	;# 
  1222  021E                     	;# 
  1223  021F                     	;# 
  1224  028C                     	;# 
  1225  028E                     	;# 
  1226  0291                     	;# 
  1227  0291                     	;# 
  1228  0292                     	;# 
  1229  0293                     	;# 
  1230  0294                     	;# 
  1231  0295                     	;# 
  1232  0295                     	;# 
  1233  0296                     	;# 
  1234  0297                     	;# 
  1235  0298                     	;# 
  1236  029F                     	;# 
  1237  030C                     	;# 
  1238  030E                     	;# 
  1239  0311                     	;# 
  1240  0311                     	;# 
  1241  0312                     	;# 
  1242  0313                     	;# 
  1243  0314                     	;# 
  1244  0315                     	;# 
  1245  0315                     	;# 
  1246  0316                     	;# 
  1247  0317                     	;# 
  1248  0318                     	;# 
  1249  038C                     	;# 
  1250  038E                     	;# 
  1251  0391                     	;# 
  1252  0392                     	;# 
  1253  0393                     	;# 
  1254  0397                     	;# 
  1255  0398                     	;# 
  1256  0399                     	;# 
  1257  039A                     	;# 
  1258  039C                     	;# 
  1259  039D                     	;# 
  1260  039E                     	;# 
  1261  039F                     	;# 
  1262  0411                     	;# 
  1263  0411                     	;# 
  1264  0412                     	;# 
  1265  0413                     	;# 
  1266  0414                     	;# 
  1267  0415                     	;# 
  1268  0416                     	;# 
  1269  0417                     	;# 
  1270  0418                     	;# 
  1271  0418                     	;# 
  1272  0419                     	;# 
  1273  041A                     	;# 
  1274  041B                     	;# 
  1275  041C                     	;# 
  1276  041D                     	;# 
  1277  041E                     	;# 
  1278  041F                     	;# 
  1279  0498                     	;# 
  1280  0498                     	;# 
  1281  0499                     	;# 
  1282  049A                     	;# 
  1283  049B                     	;# 
  1284  049B                     	;# 
  1285  049C                     	;# 
  1286  049D                     	;# 
  1287  049E                     	;# 
  1288  049F                     	;# 
  1289  0617                     	;# 
  1290  0618                     	;# 
  1291  0619                     	;# 
  1292  0619                     	;# 
  1293  061A                     	;# 
  1294  061B                     	;# 
  1295  061C                     	;# 
  1296  061C                     	;# 
  1297  061F                     	;# 
  1298  0691                     	;# 
  1299  0692                     	;# 
  1300  0693                     	;# 
  1301  0694                     	;# 
  1302  0695                     	;# 
  1303  0696                     	;# 
  1304  0697                     	;# 
  1305  0698                     	;# 
  1306  0699                     	;# 
  1307  0711                     	;# 
  1308  0712                     	;# 
  1309  0713                     	;# 
  1310  0714                     	;# 
  1311  0715                     	;# 
  1312  0716                     	;# 
  1313  0717                     	;# 
  1314  0718                     	;# 
  1315  0719                     	;# 
  1316  0891                     	;# 
  1317  0891                     	;# 
  1318  0891                     	;# 
  1319  0891                     	;# 
  1320  0891                     	;# 
  1321  0891                     	;# 
  1322  0892                     	;# 
  1323  0892                     	;# 
  1324  0892                     	;# 
  1325  0893                     	;# 
  1326  0893                     	;# 
  1327  0893                     	;# 
  1328  0893                     	;# 
  1329  0893                     	;# 
  1330  0893                     	;# 
  1331  0894                     	;# 
  1332  0894                     	;# 
  1333  0894                     	;# 
  1334  0895                     	;# 
  1335  0895                     	;# 
  1336  0895                     	;# 
  1337  0896                     	;# 
  1338  0896                     	;# 
  1339  0896                     	;# 
  1340  089B                     	;# 
  1341  0911                     	;# 
  1342  0912                     	;# 
  1343  0913                     	;# 
  1344  0914                     	;# 
  1345  0915                     	;# 
  1346  0916                     	;# 
  1347  0918                     	;# 
  1348  0919                     	;# 
  1349  091A                     	;# 
  1350  091B                     	;# 
  1351  091C                     	;# 
  1352  091D                     	;# 
  1353  091E                     	;# 
  1354  091F                     	;# 
  1355  0E0F                     	;# 
  1356  0E10                     	;# 
  1357  0E11                     	;# 
  1358  0E12                     	;# 
  1359  0E13                     	;# 
  1360  0E14                     	;# 
  1361  0E15                     	;# 
  1362  0E16                     	;# 
  1363  0E17                     	;# 
  1364  0E18                     	;# 
  1365  0E19                     	;# 
  1366  0E1A                     	;# 
  1367  0E1B                     	;# 
  1368  0E1C                     	;# 
  1369  0E1D                     	;# 
  1370  0E1E                     	;# 
  1371  0E1F                     	;# 
  1372  0E20                     	;# 
  1373  0E21                     	;# 
  1374  0E22                     	;# 
  1375  0E24                     	;# 
  1376  0E25                     	;# 
  1377  0E28                     	;# 
  1378  0E29                     	;# 
  1379  0E2A                     	;# 
  1380  0E2B                     	;# 
  1381  0E2C                     	;# 
  1382  0E2D                     	;# 
  1383  0E2E                     	;# 
  1384  0E2F                     	;# 
  1385  0E90                     	;# 
  1386  0E91                     	;# 
  1387  0E92                     	;# 
  1388  0E94                     	;# 
  1389  0E95                     	;# 
  1390  0EA0                     	;# 
  1391  0EA1                     	;# 
  1392  0EA2                     	;# 
  1393  0EA3                     	;# 
  1394  0EA4                     	;# 
  1395  0EA5                     	;# 
  1396  0F0F                     	;# 
  1397  0F10                     	;# 
  1398  0F11                     	;# 
  1399  0F12                     	;# 
  1400  0F13                     	;# 
  1401  0F14                     	;# 
  1402  0F15                     	;# 
  1403  0F16                     	;# 
  1404  0F17                     	;# 
  1405  0F18                     	;# 
  1406  0F19                     	;# 
  1407  0F1A                     	;# 
  1408  0F1B                     	;# 
  1409  0F1C                     	;# 
  1410  0F1D                     	;# 
  1411  0F1E                     	;# 
  1412  0F1F                     	;# 
  1413  0F20                     	;# 
  1414  0F21                     	;# 
  1415  0F22                     	;# 
  1416  0F23                     	;# 
  1417  0F24                     	;# 
  1418  0F25                     	;# 
  1419  0F26                     	;# 
  1420  0F27                     	;# 
  1421  0F28                     	;# 
  1422  0F29                     	;# 
  1423  0F2A                     	;# 
  1424  0F2B                     	;# 
  1425  0F2C                     	;# 
  1426  0F2D                     	;# 
  1427  0F2E                     	;# 
  1428  0F2F                     	;# 
  1429  0F30                     	;# 
  1430  0F31                     	;# 
  1431  0F32                     	;# 
  1432  0F33                     	;# 
  1433  0F34                     	;# 
  1434  0F35                     	;# 
  1435  0F36                     	;# 
  1436  0F37                     	;# 
  1437  0FE4                     	;# 
  1438  0FE5                     	;# 
  1439  0FE6                     	;# 
  1440  0FE7                     	;# 
  1441  0FE8                     	;# 
  1442  0FE9                     	;# 
  1443  0FEA                     	;# 
  1444  0FEB                     	;# 
  1445  0FED                     	;# 
  1446  0FEE                     	;# 
  1447  0FEF                     	;# 
  1448  0000                     	;# 
  1449  0001                     	;# 
  1450  0002                     	;# 
  1451  0003                     	;# 
  1452  0004                     	;# 
  1453  0005                     	;# 
  1454  0006                     	;# 
  1455  0007                     	;# 
  1456  0008                     	;# 
  1457  0009                     	;# 
  1458  000A                     	;# 
  1459  000B                     	;# 
  1460  000C                     	;# 
  1461  000E                     	;# 
  1462  0010                     	;# 
  1463  0011                     	;# 
  1464  0012                     	;# 
  1465  0013                     	;# 
  1466  0014                     	;# 
  1467  0015                     	;# 
  1468  0015                     	;# 
  1469  0016                     	;# 
  1470  0016                     	;# 
  1471  0017                     	;# 
  1472  0018                     	;# 
  1473  0019                     	;# 
  1474  0019                     	;# 
  1475  001A                     	;# 
  1476  001B                     	;# 
  1477  001C                     	;# 
  1478  001D                     	;# 
  1479  001E                     	;# 
  1480  001F                     	;# 
  1481  008C                     	;# 
  1482  008E                     	;# 
  1483  0090                     	;# 
  1484  0091                     	;# 
  1485  0092                     	;# 
  1486  0093                     	;# 
  1487  0094                     	;# 
  1488  0097                     	;# 
  1489  009B                     	;# 
  1490  009B                     	;# 
  1491  009C                     	;# 
  1492  009D                     	;# 
  1493  009E                     	;# 
  1494  009F                     	;# 
  1495  010C                     	;# 
  1496  010E                     	;# 
  1497  0111                     	;# 
  1498  0112                     	;# 
  1499  0113                     	;# 
  1500  0114                     	;# 
  1501  0115                     	;# 
  1502  0116                     	;# 
  1503  0117                     	;# 
  1504  0118                     	;# 
  1505  0119                     	;# 
  1506  018C                     	;# 
  1507  018E                     	;# 
  1508  0199                     	;# 
  1509  0199                     	;# 
  1510  0199                     	;# 
  1511  019A                     	;# 
  1512  019A                     	;# 
  1513  019A                     	;# 
  1514  019B                     	;# 
  1515  019B                     	;# 
  1516  019B                     	;# 
  1517  019B                     	;# 
  1518  019B                     	;# 
  1519  019C                     	;# 
  1520  019C                     	;# 
  1521  019C                     	;# 
  1522  019D                     	;# 
  1523  019D                     	;# 
  1524  019D                     	;# 
  1525  019E                     	;# 
  1526  019E                     	;# 
  1527  019E                     	;# 
  1528  019F                     	;# 
  1529  019F                     	;# 
  1530  019F                     	;# 
  1531  019F                     	;# 
  1532  019F                     	;# 
  1533  020C                     	;# 
  1534  020E                     	;# 
  1535  0211                     	;# 
  1536  0211                     	;# 
  1537  0212                     	;# 
  1538  0212                     	;# 
  1539  0213                     	;# 
  1540  0213                     	;# 
  1541  0214                     	;# 
  1542  0214                     	;# 
  1543  0215                     	;# 
  1544  0215                     	;# 
  1545  0215                     	;# 
  1546  0215                     	;# 
  1547  0216                     	;# 
  1548  0216                     	;# 
  1549  0217                     	;# 
  1550  0217                     	;# 
  1551  0219                     	;# 
  1552  021A                     	;# 
  1553  021B                     	;# 
  1554  021C                     	;# 
  1555  021D                     	;# 
  1556  021D                     	;# 
  1557  021E                     	;# 
  1558  021F                     	;# 
  1559  028C                     	;# 
  1560  028E                     	;# 
  1561  0291                     	;# 
  1562  0291                     	;# 
  1563  0292                     	;# 
  1564  0293                     	;# 
  1565  0294                     	;# 
  1566  0295                     	;# 
  1567  0295                     	;# 
  1568  0296                     	;# 
  1569  0297                     	;# 
  1570  0298                     	;# 
  1571  029F                     	;# 
  1572  030C                     	;# 
  1573  030E                     	;# 
  1574  0311                     	;# 
  1575  0311                     	;# 
  1576  0312                     	;# 
  1577  0313                     	;# 
  1578  0314                     	;# 
  1579  0315                     	;# 
  1580  0315                     	;# 
  1581  0316                     	;# 
  1582  0317                     	;# 
  1583  0318                     	;# 
  1584  038C                     	;# 
  1585  038E                     	;# 
  1586  0391                     	;# 
  1587  0392                     	;# 
  1588  0393                     	;# 
  1589  0397                     	;# 
  1590  0398                     	;# 
  1591  0399                     	;# 
  1592  039A                     	;# 
  1593  039C                     	;# 
  1594  039D                     	;# 
  1595  039E                     	;# 
  1596  039F                     	;# 
  1597  0411                     	;# 
  1598  0411                     	;# 
  1599  0412                     	;# 
  1600  0413                     	;# 
  1601  0414                     	;# 
  1602  0415                     	;# 
  1603  0416                     	;# 
  1604  0417                     	;# 
  1605  0418                     	;# 
  1606  0418                     	;# 
  1607  0419                     	;# 
  1608  041A                     	;# 
  1609  041B                     	;# 
  1610  041C                     	;# 
  1611  041D                     	;# 
  1612  041E                     	;# 
  1613  041F                     	;# 
  1614  0498                     	;# 
  1615  0498                     	;# 
  1616  0499                     	;# 
  1617  049A                     	;# 
  1618  049B                     	;# 
  1619  049B                     	;# 
  1620  049C                     	;# 
  1621  049D                     	;# 
  1622  049E                     	;# 
  1623  049F                     	;# 
  1624  0617                     	;# 
  1625  0618                     	;# 
  1626  0619                     	;# 
  1627  0619                     	;# 
  1628  061A                     	;# 
  1629  061B                     	;# 
  1630  061C                     	;# 
  1631  061C                     	;# 
  1632  061F                     	;# 
  1633  0691                     	;# 
  1634  0692                     	;# 
  1635  0693                     	;# 
  1636  0694                     	;# 
  1637  0695                     	;# 
  1638  0696                     	;# 
  1639  0697                     	;# 
  1640  0698                     	;# 
  1641  0699                     	;# 
  1642  0711                     	;# 
  1643  0712                     	;# 
  1644  0713                     	;# 
  1645  0714                     	;# 
  1646  0715                     	;# 
  1647  0716                     	;# 
  1648  0717                     	;# 
  1649  0718                     	;# 
  1650  0719                     	;# 
  1651  0891                     	;# 
  1652  0891                     	;# 
  1653  0891                     	;# 
  1654  0891                     	;# 
  1655  0891                     	;# 
  1656  0891                     	;# 
  1657  0892                     	;# 
  1658  0892                     	;# 
  1659  0892                     	;# 
  1660  0893                     	;# 
  1661  0893                     	;# 
  1662  0893                     	;# 
  1663  0893                     	;# 
  1664  0893                     	;# 
  1665  0893                     	;# 
  1666  0894                     	;# 
  1667  0894                     	;# 
  1668  0894                     	;# 
  1669  0895                     	;# 
  1670  0895                     	;# 
  1671  0895                     	;# 
  1672  0896                     	;# 
  1673  0896                     	;# 
  1674  0896                     	;# 
  1675  089B                     	;# 
  1676  0911                     	;# 
  1677  0912                     	;# 
  1678  0913                     	;# 
  1679  0914                     	;# 
  1680  0915                     	;# 
  1681  0916                     	;# 
  1682  0918                     	;# 
  1683  0919                     	;# 
  1684  091A                     	;# 
  1685  091B                     	;# 
  1686  091C                     	;# 
  1687  091D                     	;# 
  1688  091E                     	;# 
  1689  091F                     	;# 
  1690  0E0F                     	;# 
  1691  0E10                     	;# 
  1692  0E11                     	;# 
  1693  0E12                     	;# 
  1694  0E13                     	;# 
  1695  0E14                     	;# 
  1696  0E15                     	;# 
  1697  0E16                     	;# 
  1698  0E17                     	;# 
  1699  0E18                     	;# 
  1700  0E19                     	;# 
  1701  0E1A                     	;# 
  1702  0E1B                     	;# 
  1703  0E1C                     	;# 
  1704  0E1D                     	;# 
  1705  0E1E                     	;# 
  1706  0E1F                     	;# 
  1707  0E20                     	;# 
  1708  0E21                     	;# 
  1709  0E22                     	;# 
  1710  0E24                     	;# 
  1711  0E25                     	;# 
  1712  0E28                     	;# 
  1713  0E29                     	;# 
  1714  0E2A                     	;# 
  1715  0E2B                     	;# 
  1716  0E2C                     	;# 
  1717  0E2D                     	;# 
  1718  0E2E                     	;# 
  1719  0E2F                     	;# 
  1720  0E90                     	;# 
  1721  0E91                     	;# 
  1722  0E92                     	;# 
  1723  0E94                     	;# 
  1724  0E95                     	;# 
  1725  0EA0                     	;# 
  1726  0EA1                     	;# 
  1727  0EA2                     	;# 
  1728  0EA3                     	;# 
  1729  0EA4                     	;# 
  1730  0EA5                     	;# 
  1731  0F0F                     	;# 
  1732  0F10                     	;# 
  1733  0F11                     	;# 
  1734  0F12                     	;# 
  1735  0F13                     	;# 
  1736  0F14                     	;# 
  1737  0F15                     	;# 
  1738  0F16                     	;# 
  1739  0F17                     	;# 
  1740  0F18                     	;# 
  1741  0F19                     	;# 
  1742  0F1A                     	;# 
  1743  0F1B                     	;# 
  1744  0F1C                     	;# 
  1745  0F1D                     	;# 
  1746  0F1E                     	;# 
  1747  0F1F                     	;# 
  1748  0F20                     	;# 
  1749  0F21                     	;# 
  1750  0F22                     	;# 
  1751  0F23                     	;# 
  1752  0F24                     	;# 
  1753  0F25                     	;# 
  1754  0F26                     	;# 
  1755  0F27                     	;# 
  1756  0F28                     	;# 
  1757  0F29                     	;# 
  1758  0F2A                     	;# 
  1759  0F2B                     	;# 
  1760  0F2C                     	;# 
  1761  0F2D                     	;# 
  1762  0F2E                     	;# 
  1763  0F2F                     	;# 
  1764  0F30                     	;# 
  1765  0F31                     	;# 
  1766  0F32                     	;# 
  1767  0F33                     	;# 
  1768  0F34                     	;# 
  1769  0F35                     	;# 
  1770  0F36                     	;# 
  1771  0F37                     	;# 
  1772  0FE4                     	;# 
  1773  0FE5                     	;# 
  1774  0FE6                     	;# 
  1775  0FE7                     	;# 
  1776  0FE8                     	;# 
  1777  0FE9                     	;# 
  1778  0FEA                     	;# 
  1779  0FEB                     	;# 
  1780  0FED                     	;# 
  1781  0FEE                     	;# 
  1782  0FEF                     	;# 
  1783  0000                     	;# 
  1784  0001                     	;# 
  1785  0002                     	;# 
  1786  0003                     	;# 
  1787  0004                     	;# 
  1788  0005                     	;# 
  1789  0006                     	;# 
  1790  0007                     	;# 
  1791  0008                     	;# 
  1792  0009                     	;# 
  1793  000A                     	;# 
  1794  000B                     	;# 
  1795  000C                     	;# 
  1796  000E                     	;# 
  1797  0010                     	;# 
  1798  0011                     	;# 
  1799  0012                     	;# 
  1800  0013                     	;# 
  1801  0014                     	;# 
  1802  0015                     	;# 
  1803  0015                     	;# 
  1804  0016                     	;# 
  1805  0016                     	;# 
  1806  0017                     	;# 
  1807  0018                     	;# 
  1808  0019                     	;# 
  1809  0019                     	;# 
  1810  001A                     	;# 
  1811  001B                     	;# 
  1812  001C                     	;# 
  1813  001D                     	;# 
  1814  001E                     	;# 
  1815  001F                     	;# 
  1816  008C                     	;# 
  1817  008E                     	;# 
  1818  0090                     	;# 
  1819  0091                     	;# 
  1820  0092                     	;# 
  1821  0093                     	;# 
  1822  0094                     	;# 
  1823  0097                     	;# 
  1824  009B                     	;# 
  1825  009B                     	;# 
  1826  009C                     	;# 
  1827  009D                     	;# 
  1828  009E                     	;# 
  1829  009F                     	;# 
  1830  010C                     	;# 
  1831  010E                     	;# 
  1832  0111                     	;# 
  1833  0112                     	;# 
  1834  0113                     	;# 
  1835  0114                     	;# 
  1836  0115                     	;# 
  1837  0116                     	;# 
  1838  0117                     	;# 
  1839  0118                     	;# 
  1840  0119                     	;# 
  1841  018C                     	;# 
  1842  018E                     	;# 
  1843  0199                     	;# 
  1844  0199                     	;# 
  1845  0199                     	;# 
  1846  019A                     	;# 
  1847  019A                     	;# 
  1848  019A                     	;# 
  1849  019B                     	;# 
  1850  019B                     	;# 
  1851  019B                     	;# 
  1852  019B                     	;# 
  1853  019B                     	;# 
  1854  019C                     	;# 
  1855  019C                     	;# 
  1856  019C                     	;# 
  1857  019D                     	;# 
  1858  019D                     	;# 
  1859  019D                     	;# 
  1860  019E                     	;# 
  1861  019E                     	;# 
  1862  019E                     	;# 
  1863  019F                     	;# 
  1864  019F                     	;# 
  1865  019F                     	;# 
  1866  019F                     	;# 
  1867  019F                     	;# 
  1868  020C                     	;# 
  1869  020E                     	;# 
  1870  0211                     	;# 
  1871  0211                     	;# 
  1872  0212                     	;# 
  1873  0212                     	;# 
  1874  0213                     	;# 
  1875  0213                     	;# 
  1876  0214                     	;# 
  1877  0214                     	;# 
  1878  0215                     	;# 
  1879  0215                     	;# 
  1880  0215                     	;# 
  1881  0215                     	;# 
  1882  0216                     	;# 
  1883  0216                     	;# 
  1884  0217                     	;# 
  1885  0217                     	;# 
  1886  0219                     	;# 
  1887  021A                     	;# 
  1888  021B                     	;# 
  1889  021C                     	;# 
  1890  021D                     	;# 
  1891  021D                     	;# 
  1892  021E                     	;# 
  1893  021F                     	;# 
  1894  028C                     	;# 
  1895  028E                     	;# 
  1896  0291                     	;# 
  1897  0291                     	;# 
  1898  0292                     	;# 
  1899  0293                     	;# 
  1900  0294                     	;# 
  1901  0295                     	;# 
  1902  0295                     	;# 
  1903  0296                     	;# 
  1904  0297                     	;# 
  1905  0298                     	;# 
  1906  029F                     	;# 
  1907  030C                     	;# 
  1908  030E                     	;# 
  1909  0311                     	;# 
  1910  0311                     	;# 
  1911  0312                     	;# 
  1912  0313                     	;# 
  1913  0314                     	;# 
  1914  0315                     	;# 
  1915  0315                     	;# 
  1916  0316                     	;# 
  1917  0317                     	;# 
  1918  0318                     	;# 
  1919  038C                     	;# 
  1920  038E                     	;# 
  1921  0391                     	;# 
  1922  0392                     	;# 
  1923  0393                     	;# 
  1924  0397                     	;# 
  1925  0398                     	;# 
  1926  0399                     	;# 
  1927  039A                     	;# 
  1928  039C                     	;# 
  1929  039D                     	;# 
  1930  039E                     	;# 
  1931  039F                     	;# 
  1932  0411                     	;# 
  1933  0411                     	;# 
  1934  0412                     	;# 
  1935  0413                     	;# 
  1936  0414                     	;# 
  1937  0415                     	;# 
  1938  0416                     	;# 
  1939  0417                     	;# 
  1940  0418                     	;# 
  1941  0418                     	;# 
  1942  0419                     	;# 
  1943  041A                     	;# 
  1944  041B                     	;# 
  1945  041C                     	;# 
  1946  041D                     	;# 
  1947  041E                     	;# 
  1948  041F                     	;# 
  1949  0498                     	;# 
  1950  0498                     	;# 
  1951  0499                     	;# 
  1952  049A                     	;# 
  1953  049B                     	;# 
  1954  049B                     	;# 
  1955  049C                     	;# 
  1956  049D                     	;# 
  1957  049E                     	;# 
  1958  049F                     	;# 
  1959  0617                     	;# 
  1960  0618                     	;# 
  1961  0619                     	;# 
  1962  0619                     	;# 
  1963  061A                     	;# 
  1964  061B                     	;# 
  1965  061C                     	;# 
  1966  061C                     	;# 
  1967  061F                     	;# 
  1968  0691                     	;# 
  1969  0692                     	;# 
  1970  0693                     	;# 
  1971  0694                     	;# 
  1972  0695                     	;# 
  1973  0696                     	;# 
  1974  0697                     	;# 
  1975  0698                     	;# 
  1976  0699                     	;# 
  1977  0711                     	;# 
  1978  0712                     	;# 
  1979  0713                     	;# 
  1980  0714                     	;# 
  1981  0715                     	;# 
  1982  0716                     	;# 
  1983  0717                     	;# 
  1984  0718                     	;# 
  1985  0719                     	;# 
  1986  0891                     	;# 
  1987  0891                     	;# 
  1988  0891                     	;# 
  1989  0891                     	;# 
  1990  0891                     	;# 
  1991  0891                     	;# 
  1992  0892                     	;# 
  1993  0892                     	;# 
  1994  0892                     	;# 
  1995  0893                     	;# 
  1996  0893                     	;# 
  1997  0893                     	;# 
  1998  0893                     	;# 
  1999  0893                     	;# 
  2000  0893                     	;# 
  2001  0894                     	;# 
  2002  0894                     	;# 
  2003  0894                     	;# 
  2004  0895                     	;# 
  2005  0895                     	;# 
  2006  0895                     	;# 
  2007  0896                     	;# 
  2008  0896                     	;# 
  2009  0896                     	;# 
  2010  089B                     	;# 
  2011  0911                     	;# 
  2012  0912                     	;# 
  2013  0913                     	;# 
  2014  0914                     	;# 
  2015  0915                     	;# 
  2016  0916                     	;# 
  2017  0918                     	;# 
  2018  0919                     	;# 
  2019  091A                     	;# 
  2020  091B                     	;# 
  2021  091C                     	;# 
  2022  091D                     	;# 
  2023  091E                     	;# 
  2024  091F                     	;# 
  2025  0E0F                     	;# 
  2026  0E10                     	;# 
  2027  0E11                     	;# 
  2028  0E12                     	;# 
  2029  0E13                     	;# 
  2030  0E14                     	;# 
  2031  0E15                     	;# 
  2032  0E16                     	;# 
  2033  0E17                     	;# 
  2034  0E18                     	;# 
  2035  0E19                     	;# 
  2036  0E1A                     	;# 
  2037  0E1B                     	;# 
  2038  0E1C                     	;# 
  2039  0E1D                     	;# 
  2040  0E1E                     	;# 
  2041  0E1F                     	;# 
  2042  0E20                     	;# 
  2043  0E21                     	;# 
  2044  0E22                     	;# 
  2045  0E24                     	;# 
  2046  0E25                     	;# 
  2047  0E28                     	;# 
  2048  0E29                     	;# 
  2049  0E2A                     	;# 
  2050  0E2B                     	;# 
  2051  0E2C                     	;# 
  2052  0E2D                     	;# 
  2053  0E2E                     	;# 
  2054  0E2F                     	;# 
  2055  0E90                     	;# 
  2056  0E91                     	;# 
  2057  0E92                     	;# 
  2058  0E94                     	;# 
  2059  0E95                     	;# 
  2060  0EA0                     	;# 
  2061  0EA1                     	;# 
  2062  0EA2                     	;# 
  2063  0EA3                     	;# 
  2064  0EA4                     	;# 
  2065  0EA5                     	;# 
  2066  0F0F                     	;# 
  2067  0F10                     	;# 
  2068  0F11                     	;# 
  2069  0F12                     	;# 
  2070  0F13                     	;# 
  2071  0F14                     	;# 
  2072  0F15                     	;# 
  2073  0F16                     	;# 
  2074  0F17                     	;# 
  2075  0F18                     	;# 
  2076  0F19                     	;# 
  2077  0F1A                     	;# 
  2078  0F1B                     	;# 
  2079  0F1C                     	;# 
  2080  0F1D                     	;# 
  2081  0F1E                     	;# 
  2082  0F1F                     	;# 
  2083  0F20                     	;# 
  2084  0F21                     	;# 
  2085  0F22                     	;# 
  2086  0F23                     	;# 
  2087  0F24                     	;# 
  2088  0F25                     	;# 
  2089  0F26                     	;# 
  2090  0F27                     	;# 
  2091  0F28                     	;# 
  2092  0F29                     	;# 
  2093  0F2A                     	;# 
  2094  0F2B                     	;# 
  2095  0F2C                     	;# 
  2096  0F2D                     	;# 
  2097  0F2E                     	;# 
  2098  0F2F                     	;# 
  2099  0F30                     	;# 
  2100  0F31                     	;# 
  2101  0F32                     	;# 
  2102  0F33                     	;# 
  2103  0F34                     	;# 
  2104  0F35                     	;# 
  2105  0F36                     	;# 
  2106  0F37                     	;# 
  2107  0FE4                     	;# 
  2108  0FE5                     	;# 
  2109  0FE6                     	;# 
  2110  0FE7                     	;# 
  2111  0FE8                     	;# 
  2112  0FE9                     	;# 
  2113  0FEA                     	;# 
  2114  0FEB                     	;# 
  2115  0FED                     	;# 
  2116  0FEE                     	;# 
  2117  0FEF                     	;# 
  2118  1FE0                     _romArray_absaddr	set	8160
  2119                           
  2120                           	psect	stringtext1
  2121  1000                     __pstringtext1:	
  2122  1000                     _resetRomData:	
  2123  1000  34AA               	retlw	170
  2124  1001  3455               	retlw	85
  2125  1002  346E               	retlw	110
  2126  1003  3463               	retlw	99
  2127  1004  346F               	retlw	111
  2128  1005  346E               	retlw	110
  2129  1006  3466               	retlw	102
  2130  1007  3469               	retlw	105
  2131  1008  3467               	retlw	103
  2132  1009  3475               	retlw	117
  2133  100A  3472               	retlw	114
  2134  100B  3465               	retlw	101
  2135  100C  3464               	retlw	100
  2136  100D  3400               	retlw	0
  2137  100E  3400               	retlw	0
  2138  100F  3400               	retlw	0
  2139  1010  3400               	retlw	0
  2140  1011  3400               	retlw	0
  2141  1012  3400               	retlw	0
  2142  1013                     __end_of_resetRomData:	
  2143                           
  2144                           	psect	stringtext2
  2145  1019                     __pstringtext2:	
  2146  1019                     _n_ADDRESS_P0:	
  2147  1019  34AD               	retlw	173
  2148  101A  3487               	retlw	135
  2149  101B  3466               	retlw	102
  2150  101C  34BC               	retlw	188
  2151  101D  34BB               	retlw	187
  2152  101E                     __end_of_n_ADDRESS_P0:	
  2153                           
  2154                           	psect	stringtext3
  2155  1040                     __pstringtext3:	
  2156  1040                     _n_ADDRESS_MUL:	
  2157  1040  3421               	retlw	33
  2158  1041                     __end_of_n_ADDRESS_MUL:	
  2159  1FE0                     _romArray_absaddr	set	8160
  2160                           
  2161                           	psect	_romArray_text
  2162  1FE0                     __p_romArray_text:	
  2163  1FE0                     _romArray:	
  2164  1FE0  3400               	retlw	0
  2165  1FE1  3400               	retlw	0
  2166  1FE2  3400               	retlw	0
  2167  1FE3  3400               	retlw	0
  2168  1FE4  3400               	retlw	0
  2169  1FE5  3400               	retlw	0
  2170  1FE6  3400               	retlw	0
  2171  1FE7  3400               	retlw	0
  2172  1FE8  3400               	retlw	0
  2173  1FE9  3400               	retlw	0
  2174  1FEA  3400               	retlw	0
  2175  1FEB  3400               	retlw	0
  2176  1FEC  3400               	retlw	0
  2177  1FED  3400               	retlw	0
  2178  1FEE  3400               	retlw	0
  2179  1FEF  3400               	retlw	0
  2180  1FF0  3400               	retlw	0
  2181  1FF1  3400               	retlw	0
  2182  1FF2  3400               	retlw	0
  2183  1FF3  3400               	retlw	0
  2184  1FF4  3400               	retlw	0
  2185  1FF5  3400               	retlw	0
  2186  1FF6  3400               	retlw	0
  2187  1FF7  3400               	retlw	0
  2188  1FF8  3400               	retlw	0
  2189  1FF9  3400               	retlw	0
  2190  1FFA  3400               	retlw	0
  2191  1FFB  3400               	retlw	0
  2192  1FFC  3400               	retlw	0
  2193  1FFD  3400               	retlw	0
  2194  1FFE  3400               	retlw	0
  2195  1FFF  3400               	retlw	0
  2196  2000                     __end_of_romArray:	
  2197  0003                     _STATUSbits	set	3
  2198  0010                     _PIR0bits	set	16
  2199  000E                     _PORTCbits	set	14
  2200  000C                     _PORTAbits	set	12
  2201  000B                     _INTCONbits	set	11
  2202  0097                     _WDTCONbits	set	151
  2203  009E                     _ADCON1bits	set	158
  2204  009C                     _ADRESH	set	156
  2205  009B                     _ADRESL	set	155
  2206  009D                     _ADCON0bits	set	157
  2207  0090                     _PIE0bits	set	144
  2208  008E                     _TRISCbits	set	142
  2209  008C                     _TRISAbits	set	140
  2210  0117                     _FVRCONbits	set	279
  2211  018E                     _ANSELCbits	set	398
  2212  018C                     _ANSELAbits	set	396
  2213  018E                     _ANSELC	set	398
  2214  018C                     _ANSELA	set	396
  2215  020C                     _WPUAbits	set	524
  2216  020E                     _WPUC	set	526
  2217  020C                     _WPUA	set	524
  2218  0211                     _SSP1BUF	set	529
  2219  0214                     _SSP1STATbits	set	532
  2220  0215                     _SSP1CON1bits	set	533
  2221  028E                     _ODCONC	set	654
  2222  028C                     _ODCONA	set	652
  2223  038E                     _INLVLC	set	910
  2224  038C                     _INLVLA	set	908
  2225  0894                     _PMDATH	set	2196
  2226  0893                     _PMDATL	set	2195
  2227  0896                     _PMCON2	set	2198
  2228  0895                     _PMCON1bits	set	2197
  2229  0892                     _PMADRH	set	2194
  2230  0891                     _PMADRL	set	2193
  2231  0895                     _PMCON1	set	2197
  2232  0919                     _OSCCON1bits	set	2329
  2233  0EA0                     _RC0PPSbits	set	3744
  2234  0EA2                     _RC2PPSbits	set	3746
  2235  0EA1                     _RC1PPSbits	set	3745
  2236                           
  2237                           	psect	stringtext4
  2238  1013                     __pstringtext4:	
  2239  1013                     STR_8:	
  2240  1013  3452               	retlw	82	;'R'
  2241  1014  3446               	retlw	70	;'F'
  2242  1015  3450               	retlw	80	;'P'
  2243  1016  3457               	retlw	87	;'W'
  2244  1017  3452               	retlw	82	;'R'
  2245  1018  3400               	retlw	0
  2246                           
  2247                           	psect	stringtext5
  2248  101E                     __pstringtext5:	
  2249  101E                     STR_5:	
  2250  101E  3441               	retlw	65	;'A'
  2251  101F  344E               	retlw	78	;'N'
  2252  1020  3443               	retlw	67	;'C'
  2253  1021  3433               	retlw	51	;'3'
  2254  1022  3400               	retlw	0
  2255                           
  2256                           	psect	stringtext6
  2257  1023                     __pstringtext6:	
  2258  1023                     STR_7:	
  2259  1023  3454               	retlw	84	;'T'
  2260  1024  3445               	retlw	69	;'E'
  2261  1025  344D               	retlw	77	;'M'
  2262  1026  3450               	retlw	80	;'P'
  2263  1027  3400               	retlw	0
  2264                           
  2265                           	psect	stringtext7
  2266  1028                     __pstringtext7:	
  2267  1028                     STR_4:	
  2268  1028  3456               	retlw	86	;'V'
  2269  1029  3442               	retlw	66	;'B'
  2270  102A  3441               	retlw	65	;'A'
  2271  102B  3454               	retlw	84	;'T'
  2272  102C  3400               	retlw	0
  2273                           
  2274                           	psect	stringtext8
  2275  102D                     __pstringtext8:	
  2276  102D                     STR_10:	
  2277  102D  3442               	retlw	66	;'B'
  2278  102E  344F               	retlw	79	;'O'
  2279  102F  344F               	retlw	79	;'O'
  2280  1030  3454               	retlw	84	;'T'
  2281  1031  3400               	retlw	0
  2282                           
  2283                           	psect	stringtext9
  2284  1032                     __pstringtext9:	
  2285  1032                     STR_9:	
  2286  1032  3455               	retlw	85	;'U'
  2287  1033  3457               	retlw	87	;'W'
  2288  1034  3432               	retlw	50	;'2'
  2289  1035  3400               	retlw	0
  2290                           
  2291                           	psect	stringtext10
  2292  1036                     __pstringtext10:	
  2293  1036                     STR_3:	
  2294  1036  3444               	retlw	68	;'D'
  2295  1037  3442               	retlw	66	;'B'
  2296  1038  3447               	retlw	71	;'G'
  2297  1039  3400               	retlw	0
  2298                           
  2299                           	psect	stringtext11
  2300  103A                     __pstringtext11:	
  2301  103A                     STR_6:	
  2302  103A  3446               	retlw	70	;'F'
  2303  103B  3456               	retlw	86	;'V'
  2304  103C  3452               	retlw	82	;'R'
  2305  103D  3400               	retlw	0
  2306                           
  2307                           	psect	stringtext12
  2308  103E                     __pstringtext12:	
  2309  103E                     STR_1:	
  2310  103E  342F               	retlw	47	;'/'
  2311  103F  3400               	retlw	0
  2312                           
  2313                           	psect	stringtext13
  2314  0000                     __pstringtext13:	
  2315  103E                     
  2316                           ; #config settings
  2317  0000                     
  2318                           	psect	cinit
  2319  0011                     start_initialization:	
  2320  0011                     __initialization:	
  2321                           
  2322                           ; Clear objects allocated to BANK0
  2323  0011  3059               	movlw	low __pbssBANK0
  2324  0012  0084               	movwf	4
  2325  0013  3000               	movlw	high __pbssBANK0
  2326  0014  0085               	movwf	5
  2327  0015  3016               	movlw	22
  2328  0016  318E  26A2  3180   	fcall	clear_ram0
  2329                           
  2330                           ; Clear objects allocated to BANK1
  2331  0019  0021               	movlb	1	; select bank1
  2332  001A  01E3               	clrf	__pbssBANK1& (0+127)
  2333  001B  01E4               	clrf	(__pbssBANK1+1)& (0+127)
  2334  001C  01E5               	clrf	(__pbssBANK1+2)& (0+127)
  2335  001D  01E6               	clrf	(__pbssBANK1+3)& (0+127)
  2336                           
  2337                           ; Clear objects allocated to BANK2
  2338  001E  3020               	movlw	low __pbssBANK2
  2339  001F  0084               	movwf	4
  2340  0020  3001               	movlw	high __pbssBANK2
  2341  0021  0085               	movwf	5
  2342  0022  3041               	movlw	65
  2343  0023  318E  26A2         	fcall	clear_ram0
  2344  0025                     end_of_initialization:	
  2345                           ;End of C runtime variable initialization code
  2346                           
  2347  0025                     __end_of__initialization:	
  2348  0025  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2349  0026  0020               	movlb	0
  2350  0027  3183  2B14         	ljmp	_main	;jump to C main() function
  2351                           
  2352                           	psect	bssBANK0
  2353  0059                     __pbssBANK0:	
  2354  0059                     _TXPacket:	
  2355  0059                     	ds	1
  2356  005A                     _sleepLoop:	
  2357  005A                     	ds	1
  2358  005B                     _nrf24l01:	
  2359  005B                     	ds	1
  2360  005C                     _romData:	
  2361  005C                     	ds	19
  2362                           
  2363                           	psect	bssBANK1
  2364  00E3                     __pbssBANK1:	
  2365  00E3                     _counter:	
  2366  00E3                     	ds	4
  2367                           
  2368                           	psect	bssBANK2
  2369  0120                     __pbssBANK2:	
  2370  0120                     _romHolder:	
  2371  0120                     	ds	32
  2372  0140                     _RXPacket:	
  2373  0140                     	ds	33
  2374                           
  2375                           	psect	clrtext
  2376  0EA2                     clear_ram0:	
  2377                           ;	Called with FSR0 containing the base address, and
  2378                           ;	WREG with the size to clear
  2379                           
  2380  0EA2  0064               	clrwdt	;clear the watchdog before getting into this loop
  2381  0EA3                     clrloop0:	
  2382  0EA3  0180               	clrf	0	;clear RAM location pointed to by FSR
  2383  0EA4  3101               	addfsr 0,1
  2384  0EA5  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2385  0EA6  2EA3               	goto	clrloop0	;have we reached the end yet?
  2386  0EA7  3400               	retlw	0	;all done for this memory range, return
  2387                           
  2388                           	psect	cstackBANK1
  2389  00A0                     __pcstackBANK1:	
  2390  00A0                     loop@rfSetup:	
  2391                           
  2392                           ; 1 bytes @ 0x0
  2393  00A0                     	ds	1
  2394  00A1                     loop@packet:	
  2395                           
  2396                           ; 33 bytes @ 0x1
  2397  00A1                     	ds	33
  2398  00C2                     main@packet:	
  2399                           
  2400                           ; 33 bytes @ 0x22
  2401  00C2                     	ds	33
  2402                           
  2403                           	psect	cstackCOMMON
  2404  0070                     __pcstackCOMMON:	
  2405  0070                     ?_nrf24l01ISR:	
  2406  0070                     ?_nrf24l01SetRXMode:	
  2407                           ; 1 bytes @ 0x0
  2408                           
  2409  0070                     ?_nrf24l01GetRXPacket:	
  2410                           ; 1 bytes @ 0x0
  2411                           
  2412  0070                     ?_nrf24l01SendPacket:	
  2413                           ; 1 bytes @ 0x0
  2414                           
  2415  0070                     ?_nrf24l01Init:	
  2416                           ; 1 bytes @ 0x0
  2417                           
  2418  0070                     ?_flashRealod:	
  2419                           ; 1 bytes @ 0x0
  2420                           
  2421  0070                     ?_flashUpdate:	
  2422                           ; 1 bytes @ 0x0
  2423                           
  2424  0070                     ?_nrf24l01CELow:	
  2425                           ; 1 bytes @ 0x0
  2426                           
  2427  0070                     ??_nrf24l01CELow:	
  2428                           ; 1 bytes @ 0x0
  2429                           
  2430  0070                     ?_nrf24l01CEHigh:	
  2431                           ; 1 bytes @ 0x0
  2432                           
  2433  0070                     ??_nrf24l01CEHigh:	
  2434                           ; 1 bytes @ 0x0
  2435                           
  2436  0070                     ?_nrf24l01CSLow:	
  2437                           ; 1 bytes @ 0x0
  2438                           
  2439  0070                     ??_nrf24l01CSLow:	
  2440                           ; 1 bytes @ 0x0
  2441                           
  2442  0070                     ?_nrf24l01CSHigh:	
  2443                           ; 1 bytes @ 0x0
  2444                           
  2445  0070                     ??_nrf24l01CSHigh:	
  2446                           ; 1 bytes @ 0x0
  2447                           
  2448  0070                     ?_nrf24l01InterfaceInit:	
  2449                           ; 1 bytes @ 0x0
  2450                           
  2451  0070                     ?_nrf24l01SPISend:	
  2452                           ; 1 bytes @ 0x0
  2453                           
  2454  0070                     ??_nrf24l01SPISend:	
  2455                           ; 1 bytes @ 0x0
  2456                           
  2457  0070                     ?_nrf24l01SPIStart:	
  2458                           ; 1 bytes @ 0x0
  2459                           
  2460  0070                     ??_nrf24l01SPIStart:	
  2461                           ; 1 bytes @ 0x0
  2462                           
  2463  0070                     ?_nrf24l01SPIEnd:	
  2464                           ; 1 bytes @ 0x0
  2465                           
  2466  0070                     ??_nrf24l01SPIEnd:	
  2467                           ; 1 bytes @ 0x0
  2468                           
  2469  0070                     ?_enableInterrupts:	
  2470                           ; 1 bytes @ 0x0
  2471                           
  2472  0070                     ??_enableInterrupts:	
  2473                           ; 1 bytes @ 0x0
  2474                           
  2475  0070                     ?_exception:	
  2476                           ; 1 bytes @ 0x0
  2477                           
  2478  0070                     ?_ISR:	
  2479                           ; 1 bytes @ 0x0
  2480                           
  2481  0070                     ?_sleep:	
  2482                           ; 1 bytes @ 0x0
  2483                           
  2484  0070                     ?_checkTXPower:	
  2485                           ; 1 bytes @ 0x0
  2486                           
  2487  0070                     ?_loop:	
  2488                           ; 1 bytes @ 0x0
  2489                           
  2490  0070                     ?_main:	
  2491                           ; 1 bytes @ 0x0
  2492                           
  2493  0070                     ?_nrf24l01CheckACK:	
  2494                           ; 1 bytes @ 0x0
  2495                           
  2496  0070                     ?_nrf24l01ReceivePacket:	
  2497                           ; 1 bytes @ 0x0
  2498                           
  2499  0070                     ?_nrf24l01InitRegisters:	
  2500                           ; 1 bytes @ 0x0
  2501                           
  2502  0070                     ?i1_flashWriteByte:	
  2503                           ; 1 bytes @ 0x0
  2504                           
  2505  0070                     ?i1_flashUpdate:	
  2506                           ; 1 bytes @ 0x0
  2507                           
  2508  0070                     ?i1_nrf24l01SetRXMode:	
  2509                           ; 1 bytes @ 0x0
  2510                           
  2511  0070                     ?i1_memset:	
  2512                           ; 1 bytes @ 0x0
  2513                           
  2514  0070                     ?_strcmp:	
  2515                           ; 1 bytes @ 0x0
  2516                           
  2517  0070                     ?___wmul:	
  2518                           ; 2 bytes @ 0x0
  2519                           
  2520  0070                     nrf24l01SPISend@data:	
  2521                           ; 2 bytes @ 0x0
  2522                           
  2523  0070                     enableInterrupts@enable:	
  2524                           ; 1 bytes @ 0x0
  2525                           
  2526  0070                     strcmp@s2:	
  2527                           ; 1 bytes @ 0x0
  2528                           
  2529  0070                     ___wmul@multiplier:	
  2530                           ; 1 bytes @ 0x0
  2531                           
  2532  0070                     i1flashWriteByte@offset:	
  2533                           ; 2 bytes @ 0x0
  2534                           
  2535  0070                     i1memset@p1:	
  2536                           ; 2 bytes @ 0x0
  2537                           
  2538                           
  2539                           ; 2 bytes @ 0x0
  2540  0070                     	ds	1
  2541  0071                     ?i1_nrf24l01Send:	
  2542  0071                     i1nrf24l01Send@data:	
  2543                           ; 1 bytes @ 0x1
  2544                           
  2545                           
  2546                           ; 1 bytes @ 0x1
  2547  0071                     	ds	1
  2548  0072                     ??_strcmp:	
  2549  0072                     ??i1_nrf24l01Send:	
  2550                           ; 1 bytes @ 0x2
  2551                           
  2552  0072                     ___wmul@multiplicand:	
  2553                           ; 1 bytes @ 0x2
  2554                           
  2555  0072                     i1flashWriteByte@data:	
  2556                           ; 2 bytes @ 0x2
  2557                           
  2558  0072                     i1memset@c:	
  2559                           ; 2 bytes @ 0x2
  2560                           
  2561                           
  2562                           ; 2 bytes @ 0x2
  2563  0072                     	ds	1
  2564  0073                     strcmp@r:	
  2565  0073                     i1nrf24l01Send@command:	
  2566                           ; 1 bytes @ 0x3
  2567                           
  2568                           
  2569                           ; 1 bytes @ 0x3
  2570  0073                     	ds	1
  2571  0074                     ??___wmul:	
  2572  0074                     ??i1_flashWriteByte:	
  2573                           ; 1 bytes @ 0x4
  2574                           
  2575  0074                     ??i1_nrf24l01SetRXMode:	
  2576                           ; 1 bytes @ 0x4
  2577                           
  2578  0074                     strcmp@s1:	
  2579                           ; 1 bytes @ 0x4
  2580                           
  2581  0074                     ___wmul@product:	
  2582                           ; 1 bytes @ 0x4
  2583                           
  2584  0074                     i1flashWriteByte@address:	
  2585                           ; 2 bytes @ 0x4
  2586                           
  2587  0074                     i1memset@n:	
  2588                           ; 2 bytes @ 0x4
  2589                           
  2590                           
  2591                           ; 2 bytes @ 0x4
  2592  0074                     	ds	1
  2593  0075                     i1nrf24l01SetRXMode@config:	
  2594                           
  2595                           ; 1 bytes @ 0x5
  2596  0075                     	ds	1
  2597  0076                     ??i1_flashUpdate:	
  2598  0076                     ??i1_memset:	
  2599                           ; 1 bytes @ 0x6
  2600                           
  2601  0076                     i1nrf24l01SetRXMode@rxMode:	
  2602                           ; 1 bytes @ 0x6
  2603                           
  2604  0076                     i1memset@p:	
  2605                           ; 1 bytes @ 0x6
  2606                           
  2607                           
  2608                           ; 2 bytes @ 0x6
  2609  0076                     	ds	1
  2610  0077                     ??_nrf24l01CheckACK:	
  2611                           
  2612                           ; 1 bytes @ 0x7
  2613  0077                     	ds	1
  2614  0078                     ??_nrf24l01ReceivePacket:	
  2615  0078                     i1flashUpdate@i:	
  2616                           ; 1 bytes @ 0x8
  2617                           
  2618                           
  2619                           ; 2 bytes @ 0x8
  2620  0078                     	ds	1
  2621  0079                     nrf24l01ReceivePacket@width:	
  2622                           
  2623                           ; 1 bytes @ 0x9
  2624  0079                     	ds	1
  2625  007A                     ??_exception:	
  2626  007A                     nrf24l01ReceivePacket@i:	
  2627                           ; 1 bytes @ 0xA
  2628                           
  2629                           
  2630                           ; 1 bytes @ 0xA
  2631  007A                     	ds	2
  2632  007C                     exception@exception:	
  2633                           
  2634                           ; 1 bytes @ 0xC
  2635  007C                     	ds	1
  2636  007D                     ??_nrf24l01ISR:	
  2637                           
  2638                           ; 1 bytes @ 0xD
  2639  007D                     	ds	1
  2640  007E                     ??_ISR:	
  2641                           
  2642                           	psect	cstackBANK0
  2643  0020                     __pcstackBANK0:	
  2644                           ; 1 bytes @ 0xE
  2645                           
  2646  0020                     nrf24l01ISR@status:	
  2647                           
  2648                           ; 1 bytes @ 0x0
  2649  0020                     	ds	1
  2650  0021                     ?_strcat:	
  2651  0021                     ??_nrf24l01GetRXPacket:	
  2652                           ; 1 bytes @ 0x1
  2653                           
  2654  0021                     ?_nrf24l01Send:	
  2655                           ; 1 bytes @ 0x1
  2656                           
  2657  0021                     ?_strcpy:	
  2658                           ; 1 bytes @ 0x1
  2659                           
  2660  0021                     ?_flashWriteByte:	
  2661                           ; 1 bytes @ 0x1
  2662                           
  2663  0021                     ??_nrf24l01InterfaceInit:	
  2664                           ; 1 bytes @ 0x1
  2665                           
  2666  0021                     ??_sleep:	
  2667                           ; 1 bytes @ 0x1
  2668                           
  2669  0021                     ?_memset:	
  2670                           ; 1 bytes @ 0x1
  2671                           
  2672  0021                     ?_strlen:	
  2673                           ; 2 bytes @ 0x1
  2674                           
  2675  0021                     ?_flashReadByte:	
  2676                           ; 2 bytes @ 0x1
  2677                           
  2678  0021                     ?___lmul:	
  2679                           ; 2 bytes @ 0x1
  2680                           
  2681  0021                     ?___lldiv:	
  2682                           ; 4 bytes @ 0x1
  2683                           
  2684  0021                     ?___llmod:	
  2685                           ; 4 bytes @ 0x1
  2686                           
  2687  0021                     nrf24l01Send@data:	
  2688                           ; 4 bytes @ 0x1
  2689                           
  2690  0021                     flashWriteByte@offset:	
  2691                           ; 1 bytes @ 0x1
  2692                           
  2693  0021                     flashReadByte@offset:	
  2694                           ; 2 bytes @ 0x1
  2695                           
  2696  0021                     memset@p1:	
  2697                           ; 2 bytes @ 0x1
  2698                           
  2699  0021                     strcat@from:	
  2700                           ; 2 bytes @ 0x1
  2701                           
  2702  0021                     strcpy@from:	
  2703                           ; 2 bytes @ 0x1
  2704                           
  2705  0021                     ___lmul@multiplier:	
  2706                           ; 2 bytes @ 0x1
  2707                           
  2708  0021                     ___lldiv@divisor:	
  2709                           ; 4 bytes @ 0x1
  2710                           
  2711  0021                     ___llmod@divisor:	
  2712                           ; 4 bytes @ 0x1
  2713                           
  2714                           
  2715                           ; 4 bytes @ 0x1
  2716  0021                     	ds	1
  2717  0022                     ??_nrf24l01Send:	
  2718                           
  2719                           ; 1 bytes @ 0x2
  2720  0022                     	ds	1
  2721  0023                     ??_strcat:	
  2722  0023                     ??_strcpy:	
  2723                           ; 1 bytes @ 0x3
  2724                           
  2725  0023                     ??_strlen:	
  2726                           ; 1 bytes @ 0x3
  2727                           
  2728  0023                     ??_flashReadByte:	
  2729                           ; 1 bytes @ 0x3
  2730                           
  2731  0023                     nrf24l01Send@command:	
  2732                           ; 1 bytes @ 0x3
  2733                           
  2734  0023                     flashWriteByte@data:	
  2735                           ; 1 bytes @ 0x3
  2736                           
  2737  0023                     memset@c:	
  2738                           ; 2 bytes @ 0x3
  2739                           
  2740                           
  2741                           ; 2 bytes @ 0x3
  2742  0023                     	ds	1
  2743  0024                     ??_nrf24l01SetRXMode:	
  2744  0024                     ?_nrf24l01ChangeTXPower:	
  2745                           ; 1 bytes @ 0x4
  2746                           
  2747  0024                     ??_nrf24l01InitRegisters:	
  2748                           ; 1 bytes @ 0x4
  2749                           
  2750  0024                     strcat@cp:	
  2751                           ; 1 bytes @ 0x4
  2752                           
  2753  0024                     strcpy@to:	
  2754                           ; 1 bytes @ 0x4
  2755                           
  2756  0024                     nrf24l01ChangeTXPower@addPower:	
  2757                           ; 1 bytes @ 0x4
  2758                           
  2759                           
  2760                           ; 2 bytes @ 0x4
  2761  0024                     	ds	1
  2762  0025                     ??_flashWriteByte:	
  2763  0025                     nrf24l01SetRXMode@config:	
  2764                           ; 1 bytes @ 0x5
  2765                           
  2766  0025                     nrf24l01InitRegisters@setupAW:	
  2767                           ; 1 bytes @ 0x5
  2768                           
  2769  0025                     strcat@to:	
  2770                           ; 1 bytes @ 0x5
  2771                           
  2772  0025                     strcpy@cp:	
  2773                           ; 1 bytes @ 0x5
  2774                           
  2775  0025                     flashWriteByte@address:	
  2776                           ; 1 bytes @ 0x5
  2777                           
  2778  0025                     memset@n:	
  2779                           ; 2 bytes @ 0x5
  2780                           
  2781  0025                     ___lmul@multiplicand:	
  2782                           ; 2 bytes @ 0x5
  2783                           
  2784  0025                     ___lldiv@dividend:	
  2785                           ; 4 bytes @ 0x5
  2786                           
  2787  0025                     ___llmod@dividend:	
  2788                           ; 4 bytes @ 0x5
  2789                           
  2790                           
  2791                           ; 4 bytes @ 0x5
  2792  0025                     	ds	1
  2793  0026                     ??_nrf24l01ChangeTXPower:	
  2794  0026                     nrf24l01SetRXMode@rxMode:	
  2795                           ; 1 bytes @ 0x6
  2796                           
  2797  0026                     nrf24l01InitRegisters@channel:	
  2798                           ; 1 bytes @ 0x6
  2799                           
  2800  0026                     flashReadByte@result:	
  2801                           ; 1 bytes @ 0x6
  2802                           
  2803                           
  2804                           ; 2 bytes @ 0x6
  2805  0026                     	ds	1
  2806  0027                     ??_memset:	
  2807  0027                     ??_flashUpdate:	
  2808                           ; 1 bytes @ 0x7
  2809                           
  2810  0027                     nrf24l01ChangeTXPower@rfSetup:	
  2811                           ; 1 bytes @ 0x7
  2812                           
  2813  0027                     nrf24l01InitRegisters@feature:	
  2814                           ; 1 bytes @ 0x7
  2815                           
  2816  0027                     strlen@s:	
  2817                           ; 1 bytes @ 0x7
  2818                           
  2819  0027                     memset@p:	
  2820                           ; 1 bytes @ 0x7
  2821                           
  2822                           
  2823                           ; 2 bytes @ 0x7
  2824  0027                     	ds	1
  2825  0028                     ??_checkTXPower:	
  2826  0028                     nrf24l01InitRegisters@status:	
  2827                           ; 1 bytes @ 0x8
  2828                           
  2829  0028                     strlen@cp:	
  2830                           ; 1 bytes @ 0x8
  2831                           
  2832  0028                     flashReadByte@address:	
  2833                           ; 1 bytes @ 0x8
  2834                           
  2835                           
  2836                           ; 2 bytes @ 0x8
  2837  0028                     	ds	1
  2838  0029                     ??_nrf24l01SendPacket:	
  2839  0029                     ??___lmul:	
  2840                           ; 1 bytes @ 0x9
  2841                           
  2842  0029                     ??___lldiv:	
  2843                           ; 1 bytes @ 0x9
  2844                           
  2845  0029                     ??___llmod:	
  2846                           ; 1 bytes @ 0x9
  2847                           
  2848  0029                     checkTXPower@rxPacket:	
  2849                           ; 1 bytes @ 0x9
  2850                           
  2851  0029                     nrf24l01InitRegisters@enAA:	
  2852                           ; 1 bytes @ 0x9
  2853                           
  2854  0029                     flashUpdate@i:	
  2855                           ; 1 bytes @ 0x9
  2856                           
  2857  0029                     ___lmul@product:	
  2858                           ; 2 bytes @ 0x9
  2859                           
  2860                           
  2861                           ; 4 bytes @ 0x9
  2862  0029                     	ds	1
  2863  002A                     ??_flashRealod:	
  2864  002A                     nrf24l01InitRegisters@rfSetup:	
  2865                           ; 1 bytes @ 0xA
  2866                           
  2867  002A                     ___llmod@counter:	
  2868                           ; 1 bytes @ 0xA
  2869                           
  2870  002A                     ___lldiv@quotient:	
  2871                           ; 1 bytes @ 0xA
  2872                           
  2873                           
  2874                           ; 4 bytes @ 0xA
  2875  002A                     	ds	1
  2876  002B                     nrf24l01SendPacket@Packet:	
  2877  002B                     nrf24l01InitRegisters@enRXAddr:	
  2878                           ; 1 bytes @ 0xB
  2879                           
  2880  002B                     flashRealod@i:	
  2881                           ; 1 bytes @ 0xB
  2882                           
  2883                           
  2884                           ; 2 bytes @ 0xB
  2885  002B                     	ds	1
  2886  002C                     nrf24l01SendPacket@i:	
  2887  002C                     nrf24l01InitRegisters@DynPD:	
  2888                           ; 1 bytes @ 0xC
  2889                           
  2890                           
  2891                           ; 1 bytes @ 0xC
  2892  002C                     	ds	1
  2893  002D                     nrf24l01InitRegisters@config:	
  2894                           
  2895                           ; 1 bytes @ 0xD
  2896  002D                     	ds	1
  2897  002E                     ??_nrf24l01Init:	
  2898  002E                     ___lldiv@counter:	
  2899                           ; 1 bytes @ 0xE
  2900                           
  2901                           
  2902                           ; 1 bytes @ 0xE
  2903  002E                     	ds	1
  2904  002F                     ?_ultoa:	
  2905  002F                     ?_getADCValue:	
  2906                           ; 1 bytes @ 0xF
  2907                           
  2908  002F                     getADCValue@divider:	
  2909                           ; 4 bytes @ 0xF
  2910                           
  2911  002F                     ultoa@val:	
  2912                           ; 4 bytes @ 0xF
  2913                           
  2914                           
  2915                           ; 4 bytes @ 0xF
  2916  002F                     	ds	4
  2917  0033                     ??_getADCValue:	
  2918  0033                     ultoa@base:	
  2919                           ; 1 bytes @ 0x13
  2920                           
  2921                           
  2922                           ; 2 bytes @ 0x13
  2923  0033                     	ds	2
  2924  0035                     ??_ultoa:	
  2925                           
  2926                           ; 1 bytes @ 0x15
  2927  0035                     	ds	1
  2928  0036                     ultoa@v:	
  2929                           
  2930                           ; 4 bytes @ 0x16
  2931  0036                     	ds	1
  2932  0037                     getADCValue@channel:	
  2933                           
  2934                           ; 1 bytes @ 0x17
  2935  0037                     	ds	1
  2936  0038                     getADCValue@adcLoop:	
  2937                           
  2938                           ; 1 bytes @ 0x18
  2939  0038                     	ds	1
  2940  0039                     getADCValue@adcSum:	
  2941                           
  2942                           ; 4 bytes @ 0x19
  2943  0039                     	ds	1
  2944  003A                     ultoa@c:	
  2945                           
  2946                           ; 1 bytes @ 0x1A
  2947  003A                     	ds	1
  2948  003B                     ultoa@buf:	
  2949                           
  2950                           ; 1 bytes @ 0x1B
  2951  003B                     	ds	2
  2952  003D                     ?_setMessage:	
  2953  003D                     setMessage@topic:	
  2954                           ; 1 bytes @ 0x1D
  2955                           
  2956                           
  2957                           ; 2 bytes @ 0x1D
  2958  003D                     	ds	2
  2959  003F                     setMessage@value:	
  2960                           
  2961                           ; 4 bytes @ 0x1F
  2962  003F                     	ds	4
  2963  0043                     ??_setMessage:	
  2964  0043                     setMessage@tempString:	
  2965                           ; 1 bytes @ 0x23
  2966                           
  2967                           
  2968                           ; 16 bytes @ 0x23
  2969  0043                     	ds	16
  2970  0053                     setMessage@packet:	
  2971                           
  2972                           ; 1 bytes @ 0x33
  2973  0053                     	ds	1
  2974  0054                     ??_loop:	
  2975                           
  2976                           ; 1 bytes @ 0x34
  2977  0054                     	ds	4
  2978  0058                     ??_main:	
  2979                           
  2980                           ; 1 bytes @ 0x38
  2981  0058                     	ds	1
  2982                           
  2983                           	psect	maintext
  2984  0314                     __pmaintext:	
  2985 ;;
  2986 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2987 ;;
  2988 ;; *************** function _main *****************
  2989 ;; Defined at:
  2990 ;;		line 157 in file "main.c"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;		None
  2993 ;; Auto vars:     Size  Location     Type
  2994 ;;  packet         33   34[BANK1 ] struct .
  2995 ;; Return value:  Size  Location     Type
  2996 ;;                  1    wreg      void 
  2997 ;; Registers used:
  2998 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2999 ;; Tracked objects:
  3000 ;;		On entry : B1F/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3005 ;;      Locals:         0       0      33       0       0       0       0       0       0       0       0       0       
      +0       0
  3006 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3007 ;;      Totals:         0       1      33       0       0       0       0       0       0       0       0       0       
      +0       0
  3008 ;;Total ram usage:       34 bytes
  3009 ;; Hardware stack levels required when called:   13
  3010 ;; This function calls:
  3011 ;;		_flashRealod
  3012 ;;		_flashUpdate
  3013 ;;		_loop
  3014 ;;		_nrf24l01Init
  3015 ;;		_nrf24l01SendPacket
  3016 ;;		_setMessage
  3017 ;;		_sleep
  3018 ;;		_strcpy
  3019 ;; This function is called by:
  3020 ;;		Startup code after reset
  3021 ;; This function uses a non-reentrant model
  3022 ;;
  3023                           
  3024                           
  3025                           ;psect for function _main
  3026  0314                     _main:	
  3027                           
  3028                           ;main.c: 160: ANSELA = 0x00;
  3029                           
  3030                           ;incstack = 0
  3031                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3032  0314  0023               	movlb	3	; select bank3
  3033  0315  018C               	clrf	12	;volatile
  3034                           
  3035                           ;main.c: 161: ANSELC = 0x00;
  3036  0316  018E               	clrf	14	;volatile
  3037                           
  3038                           ;main.c: 163: ODCONA = 0x00;
  3039  0317  0025               	movlb	5	; select bank5
  3040  0318  018C               	clrf	12	;volatile
  3041                           
  3042                           ;main.c: 164: ODCONC = 0x00;
  3043  0319  018E               	clrf	14	;volatile
  3044                           
  3045                           ;main.c: 169: INLVLA = 0x00;
  3046  031A  0027               	movlb	7	; select bank7
  3047  031B  018C               	clrf	12	;volatile
  3048                           
  3049                           ;main.c: 170: INLVLC = 0x00;
  3050  031C  018E               	clrf	14	;volatile
  3051                           
  3052                           ;main.c: 172: WPUA = 0x00;
  3053  031D  0024               	movlb	4	; select bank4
  3054  031E  018C               	clrf	12	;volatile
  3055                           
  3056                           ;main.c: 173: WPUC = 0x00;
  3057  031F  018E               	clrf	14	;volatile
  3058                           
  3059                           ;main.c: 175: TRISCbits.TRISC5 = 0;
  3060  0320  0021               	movlb	1	; select bank1
  3061  0321  128E               	bcf	14,5	;volatile
  3062                           
  3063                           ;main.c: 176: TRISCbits.TRISC4 = 0;
  3064  0322  120E               	bcf	14,4	;volatile
  3065                           
  3066                           ;main.c: 178: PORTCbits.RC4 = 0;
  3067  0323  0020               	movlb	0	; select bank0
  3068  0324  120E               	bcf	14,4	;volatile
  3069                           
  3070                           ;main.c: 185: INTCONbits.PEIE = 0;
  3071  0325  130B               	bcf	11,6	;volatile
  3072                           
  3073                           ;main.c: 186: INTCONbits.GIE = 0;
  3074  0326  138B               	bcf	11,7	;volatile
  3075                           
  3076                           ;main.c: 188: OSCCON1bits.NOSC = 0b000;
  3077  0327  308F               	movlw	-113
  3078  0328  0032               	movlb	18	; select bank18
  3079  0329  0599               	andwf	25,f	;volatile
  3080                           
  3081                           ;main.c: 189: OSCCON1bits.NDIV = 0b000;
  3082  032A  30F0               	movlw	-16
  3083  032B  0599               	andwf	25,f	;volatile
  3084                           
  3085                           ;main.c: 191: _delay((unsigned long)((10)*(16000000/4000.0)));
  3086  032C  3034               	movlw	52
  3087  032D  0020               	movlb	0	; select bank0
  3088  032E  00D8               	movwf	??_main
  3089  032F  30F1               	movlw	241
  3090  0330                     u1597:	
  3091  0330  0B89               	decfsz	9,f
  3092  0331  2B30               	goto	u1597
  3093  0332  0BD8               	decfsz	??_main,f
  3094  0333  2B30               	goto	u1597
  3095  0334  3200               	nop2
  3096                           
  3097                           ;main.c: 193: flashRealod();
  3098  0335  318F  27C0  3183   	fcall	_flashRealod
  3099                           
  3100                           ;main.c: 195: if (romData.check != 0x07){
  3101  0338  3007               	movlw	7
  3102  0339  0020               	movlb	0	; select bank0
  3103  033A  065C               	xorwf	_romData,w
  3104  033B  1903               	btfsc	3,2
  3105  033C  2B4F               	goto	l2974
  3106                           
  3107                           ;main.c: 196: romData.check = 0x07;
  3108  033D  3007               	movlw	7
  3109  033E  00D8               	movwf	??_main
  3110  033F  0858               	movf	??_main,w
  3111  0340  00DC               	movwf	_romData
  3112                           
  3113                           ;main.c: 197: strcpy(romData.name, "UW2");
  3114  0341  3032               	movlw	low (STR_9| (0+32768))
  3115  0342  00A1               	movwf	strcpy@from
  3116  0343  3090               	movlw	high (STR_9| (0+32768))
  3117  0344  00A2               	movwf	strcpy@from+1
  3118  0345  305D               	movlw	(low ((_romData| 0+1)))& (0+255)
  3119  0346  318F  2769  3183   	fcall	_strcpy
  3120                           
  3121                           ;main.c: 198: romData.bootMode = 0x00;
  3122  0349  0020               	movlb	0	; select bank0
  3123  034A  01ED               	clrf	_romData+17
  3124  034B  01EE               	clrf	_romData+18
  3125                           
  3126                           ;main.c: 199: flashUpdate();
  3127  034C  3187  27B3  3183   	fcall	_flashUpdate
  3128  034F                     l2974:	
  3129                           
  3130                           ;main.c: 200: };main.c: 202: nrf24l01Init();
  3131  034F  3187  271C  3183   	fcall	_nrf24l01Init
  3132                           
  3133                           ;main.c: 208: ADCON0bits.ADON = 0;
  3134  0352  0021               	movlb	1	; select bank1
  3135  0353  101D               	bcf	29,0	;volatile
  3136                           
  3137                           ;main.c: 211: ANSELAbits.ANSA4 = 1;
  3138  0354  0023               	movlb	3	; select bank3
  3139  0355  160C               	bsf	12,4	;volatile
  3140                           
  3141                           ;main.c: 212: TRISAbits.TRISA4 = 1;
  3142  0356  0021               	movlb	1	; select bank1
  3143  0357  160C               	bsf	12,4	;volatile
  3144                           
  3145                           ;main.c: 213: WPUAbits.WPUA4 = 0;
  3146  0358  0024               	movlb	4	; select bank4
  3147  0359  120C               	bcf	12,4	;volatile
  3148                           
  3149                           ;main.c: 216: ANSELCbits.ANSC3 = 1;
  3150  035A  0023               	movlb	3	; select bank3
  3151  035B  158E               	bsf	14,3	;volatile
  3152                           
  3153                           ;main.c: 217: TRISCbits.TRISC3 = 1;
  3154  035C  0021               	movlb	1	; select bank1
  3155  035D  158E               	bsf	14,3	;volatile
  3156                           
  3157                           ;main.c: 220: FVRCONbits.TSEN = 0;
  3158  035E  0022               	movlb	2	; select bank2
  3159  035F  1297               	bcf	23,5	;volatile
  3160                           
  3161                           ;main.c: 221: FVRCONbits.TSRNG = 0;
  3162  0360  1217               	bcf	23,4	;volatile
  3163                           
  3164                           ;main.c: 222: FVRCONbits.TSEN = 1;
  3165  0361  1697               	bsf	23,5	;volatile
  3166                           
  3167                           ;main.c: 225: FVRCONbits.FVREN = 0;
  3168  0362  1397               	bcf	23,7	;volatile
  3169                           
  3170                           ;main.c: 226: FVRCONbits.ADFVR = 1;
  3171  0363  0817               	movf	23,w	;volatile
  3172  0364  39FC               	andlw	-4
  3173  0365  3801               	iorlw	1
  3174  0366  0097               	movwf	23	;volatile
  3175                           
  3176                           ;main.c: 227: FVRCONbits.FVREN = 1;
  3177  0367  1797               	bsf	23,7	;volatile
  3178                           
  3179                           ;main.c: 229: ADCON1bits.ADCS = 0b111;
  3180  0368  3070               	movlw	112
  3181  0369  0021               	movlb	1	; select bank1
  3182  036A  049E               	iorwf	30,f	;volatile
  3183                           
  3184                           ;main.c: 230: ADCON1bits.ADFM = 1;
  3185  036B  179E               	bsf	30,7	;volatile
  3186                           
  3187                           ;main.c: 231: ADCON1bits.ADNREF = 0b0;
  3188  036C  111E               	bcf	30,2	;volatile
  3189                           
  3190                           ;main.c: 232: ADCON1bits.ADPREF = 0b00;
  3191  036D  30FC               	movlw	-4
  3192  036E  059E               	andwf	30,f	;volatile
  3193                           
  3194                           ;main.c: 234: ADCON0bits.CHS = 3;
  3195  036F  081D               	movf	29,w	;volatile
  3196  0370  3903               	andlw	-253
  3197  0371  380C               	iorlw	12
  3198  0372  009D               	movwf	29	;volatile
  3199                           
  3200                           ;main.c: 235: ADCON0bits.ADON = 1;
  3201  0373  141D               	bsf	29,0	;volatile
  3202                           
  3203                           ;main.c: 240: TRISAbits.TRISA2 = 1;
  3204  0374  150C               	bsf	12,2	;volatile
  3205                           
  3206                           ;main.c: 241: PIE0bits.INTE = 1;
  3207  0375  1410               	bsf	16,0	;volatile
  3208                           
  3209                           ;main.c: 242: INTCONbits.INTEDG = 0;
  3210  0376  100B               	bcf	11,0	;volatile
  3211                           
  3212                           ;main.c: 246: WDTCONbits.WDTPS = 10;
  3213  0377  0817               	movf	23,w	;volatile
  3214  0378  39C1               	andlw	-63
  3215  0379  3814               	iorlw	20
  3216  037A  0097               	movwf	23	;volatile
  3217                           
  3218                           ;main.c: 249: TRISAbits.TRISA5 = 0;
  3219  037B  128C               	bcf	12,5	;volatile
  3220                           
  3221                           ;main.c: 250: PORTAbits.RA5 = 0;
  3222  037C  0020               	movlb	0	; select bank0
  3223  037D  128C               	bcf	12,5	;volatile
  3224                           
  3225                           ;main.c: 253: INTCONbits.PEIE = 1;
  3226  037E  170B               	bsf	11,6	;volatile
  3227                           
  3228                           ;main.c: 254: INTCONbits.GIE = 1;
  3229  037F  178B               	bsf	11,7	;volatile
  3230                           
  3231                           ;main.c: 256: nrf24l01Packet_t packet;;main.c: 258: setMessage(&packet, "BOOT", romData.
      +                          bootMode);
  3232  0380  302D               	movlw	low (STR_10| (0+32768))
  3233  0381  00BD               	movwf	setMessage@topic
  3234  0382  3090               	movlw	high (STR_10| (0+32768))
  3235  0383  00BE               	movwf	setMessage@topic+1
  3236  0384  086D               	movf	_romData+17,w
  3237  0385  00BF               	movwf	setMessage@value
  3238  0386  086E               	movf	_romData+18,w
  3239  0387  00C0               	movwf	setMessage@value+1
  3240  0388  01C1               	clrf	setMessage@value+2
  3241  0389  01C2               	clrf	setMessage@value+3
  3242  038A  30C2               	movlw	(low (main@packet| 0))& (0+255)
  3243  038B  3184  247D  3183   	fcall	_setMessage
  3244                           
  3245                           ;main.c: 259: packet.packetData.byte = 0;
  3246  038E  0021               	movlb	1	; select bank1
  3247  038F  01C2               	clrf	main@packet^(0+128)
  3248                           
  3249                           ;main.c: 260: packet.packetData.ACKRequest = 0;
  3250  0390  1142               	bcf	main@packet^(0+128),2
  3251                           
  3252                           ;main.c: 261: nrf24l01SendPacket(&packet);
  3253  0391  30C2               	movlw	(low (main@packet| 0))& (0+255)
  3254  0392  3181  213D  3183   	fcall	_nrf24l01SendPacket
  3255                           
  3256                           ;main.c: 262: sleep();
  3257  0395  318E  26C4  3183   	fcall	_sleep
  3258  0398                     l3038:	
  3259                           ;main.c: 264: while(1){
  3260                           
  3261                           
  3262                           ;main.c: 265: loop();
  3263  0398  3180  2029  3183   	fcall	_loop
  3264  039B  2B98               	goto	l3038
  3265  039C                     __end_of_main:	
  3266                           ;main.c: 266: };main.c: 268: return;
  3267                           
  3268                           
  3269                           	psect	text1
  3270  0F69                     __ptext1:	
  3271 ;; *************** function _strcpy *****************
  3272 ;; Defined at:
  3273 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  3274 ;; Parameters:    Size  Location     Type
  3275 ;;  to              1    wreg     PTR unsigned char 
  3276 ;;		 -> romData(19), 
  3277 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  3278 ;;		 -> STR_9(4), 
  3279 ;; Auto vars:     Size  Location     Type
  3280 ;;  to              1    4[BANK0 ] PTR unsigned char 
  3281 ;;		 -> romData(19), 
  3282 ;;  cp              1    5[BANK0 ] PTR unsigned char 
  3283 ;;		 -> romData(19), 
  3284 ;; Return value:  Size  Location     Type
  3285 ;;                  1    wreg      PTR unsigned char 
  3286 ;; Registers used:
  3287 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3288 ;; Tracked objects:
  3289 ;;		On entry : 0/0
  3290 ;;		On exit  : 0/0
  3291 ;;		Unchanged: 0/0
  3292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3293 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3294 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3295 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3296 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3297 ;;Total ram usage:        5 bytes
  3298 ;; Hardware stack levels used:    1
  3299 ;; Hardware stack levels required when called:    7
  3300 ;; This function calls:
  3301 ;;		Nothing
  3302 ;; This function is called by:
  3303 ;;		_main
  3304 ;; This function uses a non-reentrant model
  3305 ;;
  3306                           
  3307                           
  3308                           ;psect for function _strcpy
  3309  0F69                     _strcpy:	
  3310                           
  3311                           ;incstack = 0
  3312                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3313                           ;strcpy@to stored from wreg
  3314  0F69  0020               	movlb	0	; select bank0
  3315  0F6A  00A4               	movwf	strcpy@to
  3316  0F6B  0824               	movf	strcpy@to,w
  3317  0F6C  00A3               	movwf	??_strcpy
  3318  0F6D  0823               	movf	??_strcpy,w
  3319  0F6E  00A5               	movwf	strcpy@cp
  3320  0F6F                     l2654:	
  3321  0F6F  0825               	movf	strcpy@cp,w
  3322  0F70  0086               	movwf	6
  3323  0F71  0187               	clrf	7
  3324  0F72  0821               	movf	strcpy@from,w
  3325  0F73  0084               	movwf	4
  3326  0F74  0822               	movf	strcpy@from+1,w
  3327  0F75  0085               	movwf	5
  3328  0F76  0800               	movf	0,w	;code access
  3329  0F77  3FC0               	movwi [0]fsr1
  3330  0F78  0889               	movf	9,f
  3331  0F79  1903               	btfsc	3,2
  3332  0F7A  0008               	return
  3333  0F7B  3001               	movlw	1
  3334  0F7C  00A3               	movwf	??_strcpy
  3335  0F7D  0823               	movf	??_strcpy,w
  3336  0F7E  07A5               	addwf	strcpy@cp,f
  3337  0F7F  3001               	movlw	1
  3338  0F80  07A1               	addwf	strcpy@from,f
  3339  0F81  3000               	movlw	0
  3340  0F82  3DA2               	addwfc	strcpy@from+1,f
  3341  0F83  2F6F               	goto	l2654
  3342  0F84                     __end_of_strcpy:	
  3343                           ;	Return value of _strcpy is never used
  3344                           
  3345                           
  3346                           	psect	text2
  3347  071C                     __ptext2:	
  3348 ;; *************** function _nrf24l01Init *****************
  3349 ;; Defined at:
  3350 ;;		line 488 in file "nrf24l01.c"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;		None
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;		None
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  1    wreg      void 
  3357 ;; Registers used:
  3358 ;;		wreg, status,2, status,0, pclath, cstack
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3366 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3367 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3368 ;;Total ram usage:        2 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:   11
  3371 ;; This function calls:
  3372 ;;		_nrf24l01CEHigh
  3373 ;;		_nrf24l01CELow
  3374 ;;		_nrf24l01InitRegisters
  3375 ;;		_nrf24l01InterfaceInit
  3376 ;; This function is called by:
  3377 ;;		_main
  3378 ;; This function uses a non-reentrant model
  3379 ;;
  3380                           
  3381                           
  3382                           ;psect for function _nrf24l01Init
  3383  071C                     _nrf24l01Init:	
  3384                           
  3385                           ;nrf24l01.c: 491: nrf24l01InterfaceInit();
  3386                           
  3387                           ;incstack = 0
  3388                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  3389  071C  318F  2784  3187   	fcall	_nrf24l01InterfaceInit
  3390                           
  3391                           ;nrf24l01.c: 496: nrf24l01CELow();
  3392  071F  318E  2699  3187   	fcall	_nrf24l01CELow
  3393                           
  3394                           ;nrf24l01.c: 498: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3395  0722  3002               	movlw	2
  3396  0723  0020               	movlb	0	; select bank0
  3397  0724  00AF               	movwf	??_nrf24l01Init+1
  3398  0725  3004               	movlw	4
  3399  0726  00AE               	movwf	??_nrf24l01Init
  3400  0727  30BA               	movlw	186
  3401  0728                     u1607:	
  3402  0728  0B89               	decfsz	9,f
  3403  0729  2F28               	goto	u1607
  3404  072A  0BAE               	decfsz	??_nrf24l01Init,f
  3405  072B  2F28               	goto	u1607
  3406  072C  0BAF               	decfsz	??_nrf24l01Init+1,f
  3407  072D  2F28               	goto	u1607
  3408  072E  0000               	nop
  3409                           
  3410                           ;nrf24l01.c: 500: nrf24l01InitRegisters();
  3411  072F  3181  21F7  3187   	fcall	_nrf24l01InitRegisters
  3412                           
  3413                           ;nrf24l01.c: 502: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3414  0732  3002               	movlw	2
  3415  0733  0020               	movlb	0	; select bank0
  3416  0734  00AF               	movwf	??_nrf24l01Init+1
  3417  0735  3004               	movlw	4
  3418  0736  00AE               	movwf	??_nrf24l01Init
  3419  0737  30BA               	movlw	186
  3420  0738                     u1617:	
  3421  0738  0B89               	decfsz	9,f
  3422  0739  2F38               	goto	u1617
  3423  073A  0BAE               	decfsz	??_nrf24l01Init,f
  3424  073B  2F38               	goto	u1617
  3425  073C  0BAF               	decfsz	??_nrf24l01Init+1,f
  3426  073D  2F38               	goto	u1617
  3427  073E  0000               	nop
  3428                           
  3429                           ;nrf24l01.c: 504: nrf24l01CEHigh();
  3430  073F  318E  2696         	fcall	_nrf24l01CEHigh
  3431  0741  0008               	return
  3432  0742                     __end_of_nrf24l01Init:	
  3433                           
  3434                           	psect	text3
  3435  0F84                     __ptext3:	
  3436 ;; *************** function _nrf24l01InterfaceInit *****************
  3437 ;; Defined at:
  3438 ;;		line 28 in file "interface.c"
  3439 ;; Parameters:    Size  Location     Type
  3440 ;;		None
  3441 ;; Auto vars:     Size  Location     Type
  3442 ;;		None
  3443 ;; Return value:  Size  Location     Type
  3444 ;;                  1    wreg      void 
  3445 ;; Registers used:
  3446 ;;		wreg, status,2, status,0
  3447 ;; Tracked objects:
  3448 ;;		On entry : 0/0
  3449 ;;		On exit  : 0/0
  3450 ;;		Unchanged: 0/0
  3451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3456 ;;Total ram usage:        0 bytes
  3457 ;; Hardware stack levels used:    1
  3458 ;; Hardware stack levels required when called:    7
  3459 ;; This function calls:
  3460 ;;		Nothing
  3461 ;; This function is called by:
  3462 ;;		_nrf24l01Init
  3463 ;; This function uses a non-reentrant model
  3464 ;;
  3465                           
  3466                           
  3467                           ;psect for function _nrf24l01InterfaceInit
  3468  0F84                     _nrf24l01InterfaceInit:	
  3469                           
  3470                           ;interface.c: 30: TRISAbits.TRISA0 = 0;
  3471                           
  3472                           ;incstack = 0
  3473                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3474  0F84  0021               	movlb	1	; select bank1
  3475  0F85  100C               	bcf	12,0	;volatile
  3476                           
  3477                           ;interface.c: 31: TRISAbits.TRISA1 = 0;
  3478  0F86  108C               	bcf	12,1	;volatile
  3479                           
  3480                           ;interface.c: 33: TRISCbits.TRISC1 = 1;
  3481  0F87  148E               	bsf	14,1	;volatile
  3482                           
  3483                           ;interface.c: 34: TRISCbits.TRISC2 = 0;
  3484  0F88  110E               	bcf	14,2	;volatile
  3485                           
  3486                           ;interface.c: 35: TRISCbits.TRISC0 = 0;
  3487  0F89  100E               	bcf	14,0	;volatile
  3488                           
  3489                           ;interface.c: 37: SSP1CON1bits.SSPEN = 0;
  3490  0F8A  0024               	movlb	4	; select bank4
  3491  0F8B  1295               	bcf	21,5	;volatile
  3492                           
  3493                           ;interface.c: 39: RC1PPSbits.RC1PPS = 0b10001;
  3494  0F8C  003D               	movlb	29	; select bank29
  3495  0F8D  0821               	movf	33,w	;volatile
  3496  0F8E  39E0               	andlw	-32
  3497  0F8F  3811               	iorlw	17
  3498  0F90  00A1               	movwf	33	;volatile
  3499                           
  3500                           ;interface.c: 40: RC2PPSbits.RC2PPS = 0b11001;
  3501  0F91  0822               	movf	34,w	;volatile
  3502  0F92  39E0               	andlw	-32
  3503  0F93  3819               	iorlw	25
  3504  0F94  00A2               	movwf	34	;volatile
  3505                           
  3506                           ;interface.c: 41: RC0PPSbits.RC0PPS = 0b11000;
  3507  0F95  0820               	movf	32,w	;volatile
  3508  0F96  39E0               	andlw	-32
  3509  0F97  3818               	iorlw	24
  3510  0F98  00A0               	movwf	32	;volatile
  3511                           
  3512                           ;interface.c: 43: SSP1CON1bits.CKP = 0;
  3513  0F99  0024               	movlb	4	; select bank4
  3514  0F9A  1215               	bcf	21,4	;volatile
  3515                           
  3516                           ;interface.c: 44: SSP1STATbits.CKE = 1;
  3517  0F9B  1714               	bsf	20,6	;volatile
  3518                           
  3519                           ;interface.c: 45: SSP1CON1bits.SSPM = 0b0000;
  3520  0F9C  30F0               	movlw	-16
  3521  0F9D  0595               	andwf	21,f	;volatile
  3522                           
  3523                           ;interface.c: 47: SSP1CON1bits.SSPEN = 1;
  3524  0F9E  1695               	bsf	21,5	;volatile
  3525  0F9F  0008               	return
  3526  0FA0                     __end_of_nrf24l01InterfaceInit:	
  3527                           
  3528                           	psect	text4
  3529  01F7                     __ptext4:	
  3530 ;; *************** function _nrf24l01InitRegisters *****************
  3531 ;; Defined at:
  3532 ;;		line 357 in file "nrf24l01.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;		None
  3535 ;; Auto vars:     Size  Location     Type
  3536 ;;  config          1   13[BANK0 ] struct .
  3537 ;;  DynPD           1   12[BANK0 ] struct .
  3538 ;;  enRXAddr        1   11[BANK0 ] struct .
  3539 ;;  rfSetup         1   10[BANK0 ] struct .
  3540 ;;  enAA            1    9[BANK0 ] struct .
  3541 ;;  status          1    8[BANK0 ] struct .
  3542 ;;  feature         1    7[BANK0 ] struct .
  3543 ;;  channel         1    6[BANK0 ] struct .
  3544 ;;  setupAW         1    5[BANK0 ] struct .
  3545 ;; Return value:  Size  Location     Type
  3546 ;;                  1    wreg      void 
  3547 ;; Registers used:
  3548 ;;		wreg, status,2, status,0, pclath, cstack
  3549 ;; Tracked objects:
  3550 ;;		On entry : 0/0
  3551 ;;		On exit  : 0/0
  3552 ;;		Unchanged: 0/0
  3553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3555 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3556 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3557 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3558 ;;Total ram usage:       10 bytes
  3559 ;; Hardware stack levels used:    1
  3560 ;; Hardware stack levels required when called:   10
  3561 ;; This function calls:
  3562 ;;		_nrf24l01Send
  3563 ;; This function is called by:
  3564 ;;		_nrf24l01Init
  3565 ;; This function uses a non-reentrant model
  3566 ;;
  3567                           
  3568                           
  3569                           ;psect for function _nrf24l01InitRegisters
  3570  01F7                     _nrf24l01InitRegisters:	
  3571                           
  3572                           ;nrf24l01.c: 360: n_CONFIG_t config;;nrf24l01.c: 361: config.PRIM_RX = 0;
  3573                           
  3574                           ;incstack = 0
  3575                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  3576  01F7  0020               	movlb	0	; select bank0
  3577  01F8  102D               	bcf	nrf24l01InitRegisters@config,0
  3578                           
  3579                           ;nrf24l01.c: 362: config.PWR_UP = 1;
  3580  01F9  14AD               	bsf	nrf24l01InitRegisters@config,1
  3581                           
  3582                           ;nrf24l01.c: 363: config.CRCO = 1;
  3583  01FA  152D               	bsf	nrf24l01InitRegisters@config,2
  3584                           
  3585                           ;nrf24l01.c: 364: config.EN_CRC = 1;
  3586  01FB  15AD               	bsf	nrf24l01InitRegisters@config,3
  3587                           
  3588                           ;nrf24l01.c: 365: config.MASK_MAX_RT = 0;
  3589  01FC  122D               	bcf	nrf24l01InitRegisters@config,4
  3590                           
  3591                           ;nrf24l01.c: 366: config.MASK_TX_DS = 0;
  3592  01FD  12AD               	bcf	nrf24l01InitRegisters@config,5
  3593                           
  3594                           ;nrf24l01.c: 367: config.MASK_RX_DR = 0;
  3595  01FE  132D               	bcf	nrf24l01InitRegisters@config,6
  3596                           
  3597                           ;nrf24l01.c: 368: config.Reserved = 0;
  3598  01FF  13AD               	bcf	nrf24l01InitRegisters@config,7
  3599                           
  3600                           ;nrf24l01.c: 369: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3601  0200  082D               	movf	nrf24l01InitRegisters@config,w
  3602  0201  00A4               	movwf	??_nrf24l01InitRegisters
  3603  0202  0824               	movf	??_nrf24l01InitRegisters,w
  3604  0203  00A1               	movwf	nrf24l01Send@data
  3605  0204  3020               	movlw	32
  3606  0205  318F  27E0  3181   	fcall	_nrf24l01Send
  3607                           
  3608                           ;nrf24l01.c: 373: n_EN_AA_t enAA;;nrf24l01.c: 374: enAA.ENAA_P0 = 0;
  3609  0208  0020               	movlb	0	; select bank0
  3610  0209  1029               	bcf	nrf24l01InitRegisters@enAA,0
  3611                           
  3612                           ;nrf24l01.c: 375: enAA.ENAA_P1 = 0;
  3613  020A  10A9               	bcf	nrf24l01InitRegisters@enAA,1
  3614                           
  3615                           ;nrf24l01.c: 376: enAA.ENAA_P2 = 0;
  3616  020B  1129               	bcf	nrf24l01InitRegisters@enAA,2
  3617                           
  3618                           ;nrf24l01.c: 377: enAA.ENAA_P3 = 0;
  3619  020C  11A9               	bcf	nrf24l01InitRegisters@enAA,3
  3620                           
  3621                           ;nrf24l01.c: 378: enAA.ENAA_P4 = 0;
  3622  020D  1229               	bcf	nrf24l01InitRegisters@enAA,4
  3623                           
  3624                           ;nrf24l01.c: 379: enAA.ENAA_P5 = 0;
  3625  020E  12A9               	bcf	nrf24l01InitRegisters@enAA,5
  3626                           
  3627                           ;nrf24l01.c: 380: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3628  020F  0829               	movf	nrf24l01InitRegisters@enAA,w
  3629  0210  00A4               	movwf	??_nrf24l01InitRegisters
  3630  0211  0824               	movf	??_nrf24l01InitRegisters,w
  3631  0212  00A1               	movwf	nrf24l01Send@data
  3632  0213  3021               	movlw	33
  3633  0214  318F  27E0  3181   	fcall	_nrf24l01Send
  3634                           
  3635                           ;nrf24l01.c: 382: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 383: enRXAddr.Reserved = 0;
  3636  0217  303F               	movlw	-193
  3637  0218  0020               	movlb	0	; select bank0
  3638  0219  05AB               	andwf	nrf24l01InitRegisters@enRXAddr,f
  3639                           
  3640                           ;nrf24l01.c: 384: enRXAddr.ERX_P0 = 1;
  3641  021A  142B               	bsf	nrf24l01InitRegisters@enRXAddr,0
  3642                           
  3643                           ;nrf24l01.c: 385: enRXAddr.ERX_P1 = 1;
  3644  021B  14AB               	bsf	nrf24l01InitRegisters@enRXAddr,1
  3645                           
  3646                           ;nrf24l01.c: 386: enRXAddr.ERX_P2 = 1;
  3647  021C  152B               	bsf	nrf24l01InitRegisters@enRXAddr,2
  3648                           
  3649                           ;nrf24l01.c: 387: enRXAddr.ERX_P3 = 1;
  3650  021D  15AB               	bsf	nrf24l01InitRegisters@enRXAddr,3
  3651                           
  3652                           ;nrf24l01.c: 388: enRXAddr.ERX_P4 = 1;
  3653  021E  162B               	bsf	nrf24l01InitRegisters@enRXAddr,4
  3654                           
  3655                           ;nrf24l01.c: 389: enRXAddr.ERX_P5 = 1;
  3656  021F  16AB               	bsf	nrf24l01InitRegisters@enRXAddr,5
  3657                           
  3658                           ;nrf24l01.c: 390: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x02, enRXAddr.byte);
  3659  0220  082B               	movf	nrf24l01InitRegisters@enRXAddr,w
  3660  0221  00A4               	movwf	??_nrf24l01InitRegisters
  3661  0222  0824               	movf	??_nrf24l01InitRegisters,w
  3662  0223  00A1               	movwf	nrf24l01Send@data
  3663  0224  3022               	movlw	34
  3664  0225  318F  27E0  3181   	fcall	_nrf24l01Send
  3665                           
  3666                           ;nrf24l01.c: 393: n_SETUP_AW_t setupAW;;nrf24l01.c: 394: setupAW.Reserved = 0;
  3667  0228  3003               	movlw	-253
  3668  0229  0020               	movlb	0	; select bank0
  3669  022A  05A5               	andwf	nrf24l01InitRegisters@setupAW,f
  3670                           
  3671                           ;nrf24l01.c: 395: setupAW.AW = 0b11;
  3672  022B  3003               	movlw	3
  3673  022C  04A5               	iorwf	nrf24l01InitRegisters@setupAW,f
  3674                           
  3675                           ;nrf24l01.c: 396: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x02, setupAW.byte);
  3676  022D  0825               	movf	nrf24l01InitRegisters@setupAW,w
  3677  022E  00A4               	movwf	??_nrf24l01InitRegisters
  3678  022F  0824               	movf	??_nrf24l01InitRegisters,w
  3679  0230  00A1               	movwf	nrf24l01Send@data
  3680  0231  3022               	movlw	34
  3681  0232  318F  27E0  3181   	fcall	_nrf24l01Send
  3682                           
  3683                           ;nrf24l01.c: 399: n_RF_CH_t channel;;nrf24l01.c: 400: channel.Reserved = 0;
  3684  0235  0020               	movlb	0	; select bank0
  3685  0236  13A6               	bcf	nrf24l01InitRegisters@channel,7
  3686                           
  3687                           ;nrf24l01.c: 401: channel.RF_CH = 2;
  3688  0237  0826               	movf	nrf24l01InitRegisters@channel,w
  3689  0238  3980               	andlw	-128
  3690  0239  3802               	iorlw	2
  3691  023A  00A6               	movwf	nrf24l01InitRegisters@channel
  3692                           
  3693                           ;nrf24l01.c: 402: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3694  023B  0826               	movf	nrf24l01InitRegisters@channel,w
  3695  023C  00A4               	movwf	??_nrf24l01InitRegisters
  3696  023D  0824               	movf	??_nrf24l01InitRegisters,w
  3697  023E  00A1               	movwf	nrf24l01Send@data
  3698  023F  3025               	movlw	37
  3699  0240  318F  27E0  3181   	fcall	_nrf24l01Send
  3700                           
  3701                           ;nrf24l01.c: 405: n_RF_SETUP_t rfSetup;;nrf24l01.c: 406: rfSetup.CONT_WAVE = 0;
  3702  0243  0020               	movlb	0	; select bank0
  3703  0244  13AA               	bcf	nrf24l01InitRegisters@rfSetup,7
  3704                           
  3705                           ;nrf24l01.c: 407: rfSetup.Reserved = 0;
  3706  0245  132A               	bcf	nrf24l01InitRegisters@rfSetup,6
  3707                           
  3708                           ;nrf24l01.c: 408: rfSetup.RF_DR_LOW = 0;
  3709  0246  12AA               	bcf	nrf24l01InitRegisters@rfSetup,5
  3710                           
  3711                           ;nrf24l01.c: 409: rfSetup.RF_DR_HIGH = 1;
  3712  0247  15AA               	bsf	nrf24l01InitRegisters@rfSetup,3
  3713                           
  3714                           ;nrf24l01.c: 410: rfSetup.RF_PWR = 3;
  3715  0248  3006               	movlw	6
  3716  0249  04AA               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3717                           
  3718                           ;nrf24l01.c: 411: rfSetup.Obsolete = 0;
  3719  024A  102A               	bcf	nrf24l01InitRegisters@rfSetup,0
  3720                           
  3721                           ;nrf24l01.c: 412: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3722  024B  082A               	movf	nrf24l01InitRegisters@rfSetup,w
  3723  024C  00A4               	movwf	??_nrf24l01InitRegisters
  3724  024D  0824               	movf	??_nrf24l01InitRegisters,w
  3725  024E  00A1               	movwf	nrf24l01Send@data
  3726  024F  3026               	movlw	38
  3727  0250  318F  27E0  3181   	fcall	_nrf24l01Send
  3728                           
  3729                           ;nrf24l01.c: 457: n_DYNPD_t DynPD;;nrf24l01.c: 458: DynPD.DPL_P0 = 1;
  3730  0253  0020               	movlb	0	; select bank0
  3731  0254  142C               	bsf	nrf24l01InitRegisters@DynPD,0
  3732                           
  3733                           ;nrf24l01.c: 459: DynPD.DPL_P1 = 1;
  3734  0255  14AC               	bsf	nrf24l01InitRegisters@DynPD,1
  3735                           
  3736                           ;nrf24l01.c: 460: DynPD.DPL_P2 = 1;
  3737  0256  152C               	bsf	nrf24l01InitRegisters@DynPD,2
  3738                           
  3739                           ;nrf24l01.c: 461: DynPD.DPL_P3 = 1;
  3740  0257  15AC               	bsf	nrf24l01InitRegisters@DynPD,3
  3741                           
  3742                           ;nrf24l01.c: 462: DynPD.DPL_P4 = 1;
  3743  0258  162C               	bsf	nrf24l01InitRegisters@DynPD,4
  3744                           
  3745                           ;nrf24l01.c: 463: DynPD.DPL_P5 = 1;
  3746  0259  16AC               	bsf	nrf24l01InitRegisters@DynPD,5
  3747                           
  3748                           ;nrf24l01.c: 464: DynPD.Reserved = 0;
  3749  025A  303F               	movlw	-193
  3750  025B  05AC               	andwf	nrf24l01InitRegisters@DynPD,f
  3751                           
  3752                           ;nrf24l01.c: 465: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3753  025C  082C               	movf	nrf24l01InitRegisters@DynPD,w
  3754  025D  00A4               	movwf	??_nrf24l01InitRegisters
  3755  025E  0824               	movf	??_nrf24l01InitRegisters,w
  3756  025F  00A1               	movwf	nrf24l01Send@data
  3757  0260  303C               	movlw	60
  3758  0261  318F  27E0  3181   	fcall	_nrf24l01Send
  3759                           
  3760                           ;nrf24l01.c: 468: n_FEATURE_t feature;;nrf24l01.c: 469: feature.EN_DYN_ACK = 1;
  3761  0264  0020               	movlb	0	; select bank0
  3762  0265  1427               	bsf	nrf24l01InitRegisters@feature,0
  3763                           
  3764                           ;nrf24l01.c: 470: feature.EN_ACK_PAY = 0;
  3765  0266  10A7               	bcf	nrf24l01InitRegisters@feature,1
  3766                           
  3767                           ;nrf24l01.c: 471: feature.EN_DPL = 0;
  3768  0267  1127               	bcf	nrf24l01InitRegisters@feature,2
  3769                           
  3770                           ;nrf24l01.c: 472: feature.Reserved = 0;
  3771  0268  3007               	movlw	-249
  3772  0269  05A7               	andwf	nrf24l01InitRegisters@feature,f
  3773                           
  3774                           ;nrf24l01.c: 473: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3775  026A  0827               	movf	nrf24l01InitRegisters@feature,w
  3776  026B  00A4               	movwf	??_nrf24l01InitRegisters
  3777  026C  0824               	movf	??_nrf24l01InitRegisters,w
  3778  026D  00A1               	movwf	nrf24l01Send@data
  3779  026E  303D               	movlw	61
  3780  026F  318F  27E0  3181   	fcall	_nrf24l01Send
  3781                           
  3782                           ;nrf24l01.c: 476: n_STATUS_t status;;nrf24l01.c: 477: status.byte = 0x00;
  3783  0272  0020               	movlb	0	; select bank0
  3784  0273  01A8               	clrf	nrf24l01InitRegisters@status
  3785                           
  3786                           ;nrf24l01.c: 478: status.RX_DR = 1;
  3787  0274  1728               	bsf	nrf24l01InitRegisters@status,6
  3788                           
  3789                           ;nrf24l01.c: 479: status.TX_DS = 1;
  3790  0275  16A8               	bsf	nrf24l01InitRegisters@status,5
  3791                           
  3792                           ;nrf24l01.c: 480: status.MAX_RT = 1;
  3793  0276  1628               	bsf	nrf24l01InitRegisters@status,4
  3794                           
  3795                           ;nrf24l01.c: 481: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.byte);
  3796  0277  0828               	movf	nrf24l01InitRegisters@status,w
  3797  0278  00A4               	movwf	??_nrf24l01InitRegisters
  3798  0279  0824               	movf	??_nrf24l01InitRegisters,w
  3799  027A  00A1               	movwf	nrf24l01Send@data
  3800  027B  3027               	movlw	39
  3801  027C  318F  27E0  3181   	fcall	_nrf24l01Send
  3802                           
  3803                           ;nrf24l01.c: 484: nrf24l01Send((unsigned) 0b11100001, 0);
  3804  027F  0020               	movlb	0	; select bank0
  3805  0280  01A1               	clrf	nrf24l01Send@data
  3806  0281  30E1               	movlw	225
  3807  0282  318F  27E0  3181   	fcall	_nrf24l01Send
  3808                           
  3809                           ;nrf24l01.c: 485: nrf24l01Send((unsigned) 0b11100010, 0);
  3810  0285  0020               	movlb	0	; select bank0
  3811  0286  01A1               	clrf	nrf24l01Send@data
  3812  0287  30E2               	movlw	226
  3813  0288  318F  27E0         	fcall	_nrf24l01Send
  3814  028A  0008               	return
  3815  028B                     __end_of_nrf24l01InitRegisters:	
  3816                           
  3817                           	psect	text5
  3818  0029                     __ptext5:	
  3819 ;; *************** function _loop *****************
  3820 ;; Defined at:
  3821 ;;		line 100 in file "main.c"
  3822 ;; Parameters:    Size  Location     Type
  3823 ;;		None
  3824 ;; Auto vars:     Size  Location     Type
  3825 ;;  packet         33    1[BANK1 ] struct .
  3826 ;;  rfSetup         1    0[BANK1 ] struct .
  3827 ;; Return value:  Size  Location     Type
  3828 ;;                  1    wreg      void 
  3829 ;; Registers used:
  3830 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3831 ;; Tracked objects:
  3832 ;;		On entry : 0/0
  3833 ;;		On exit  : 0/0
  3834 ;;		Unchanged: 0/0
  3835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3837 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3838 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3839 ;;      Totals:         0       4      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3840 ;;Total ram usage:       38 bytes
  3841 ;; Hardware stack levels used:    1
  3842 ;; Hardware stack levels required when called:   12
  3843 ;; This function calls:
  3844 ;;		_checkTXPower
  3845 ;;		_getADCValue
  3846 ;;		_nrf24l01Send
  3847 ;;		_nrf24l01SendPacket
  3848 ;;		_setMessage
  3849 ;;		_sleep
  3850 ;; This function is called by:
  3851 ;;		_main
  3852 ;; This function uses a non-reentrant model
  3853 ;;
  3854                           
  3855                           
  3856                           ;psect for function _loop
  3857  0029                     _loop:	
  3858                           
  3859                           ;incstack = 0
  3860                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3861  0029  0064               	clrwdt	;# 
  3862                           
  3863                           ;main.c: 105: nrf24l01Packet_t packet;;main.c: 107: setMessage(&packet, "DBG", counter);
  3864  002A  3036               	movlw	low (STR_3| (0+32768))
  3865  002B  0020               	movlb	0	; select bank0
  3866  002C  00BD               	movwf	setMessage@topic
  3867  002D  3090               	movlw	high (STR_3| (0+32768))
  3868  002E  00BE               	movwf	setMessage@topic+1
  3869  002F  0021               	movlb	1	; select bank1
  3870  0030  0866               	movf	(_counter+3)^(0+128),w
  3871  0031  0020               	movlb	0	; select bank0
  3872  0032  00C2               	movwf	setMessage@value+3
  3873  0033  0021               	movlb	1	; select bank1
  3874  0034  0865               	movf	(_counter+2)^(0+128),w
  3875  0035  0020               	movlb	0	; select bank0
  3876  0036  00C1               	movwf	setMessage@value+2
  3877  0037  0021               	movlb	1	; select bank1
  3878  0038  0864               	movf	(_counter+1)^(0+128),w
  3879  0039  0020               	movlb	0	; select bank0
  3880  003A  00C0               	movwf	setMessage@value+1
  3881  003B  0021               	movlb	1	; select bank1
  3882  003C  0863               	movf	_counter^(0+128),w
  3883  003D  0020               	movlb	0	; select bank0
  3884  003E  00BF               	movwf	setMessage@value
  3885  003F  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  3886  0040  3184  247D  3180   	fcall	_setMessage
  3887                           
  3888                           ;main.c: 108: packet.packetData.byte = 0;
  3889  0043  0021               	movlb	1	; select bank1
  3890  0044  01A1               	clrf	loop@packet^(0+128)
  3891                           
  3892                           ;main.c: 109: packet.packetData.ACKRequest = 0;
  3893  0045  1121               	bcf	loop@packet^(0+128),2
  3894                           
  3895                           ;main.c: 110: nrf24l01SendPacket(&packet);
  3896  0046  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  3897  0047  3181  213D  3180   	fcall	_nrf24l01SendPacket
  3898                           
  3899                           ;main.c: 111: checkTXPower();
  3900  004A  318E  26D6  3180   	fcall	_checkTXPower
  3901                           
  3902                           ;main.c: 112: sleep();
  3903  004D  318E  26C4  3180   	fcall	_sleep
  3904                           
  3905                           ;main.c: 114: setMessage(&packet, "VBAT", getADCValue(0b000100, 2526));
  3906  0050  3028               	movlw	low (STR_4| (0+32768))
  3907  0051  0020               	movlb	0	; select bank0
  3908  0052  00BD               	movwf	setMessage@topic
  3909  0053  3090               	movlw	high (STR_4| (0+32768))
  3910  0054  00BE               	movwf	setMessage@topic+1
  3911  0055  3000               	movlw	0
  3912  0056  00B2               	movwf	getADCValue@divider+3
  3913  0057  3000               	movlw	0
  3914  0058  00B1               	movwf	getADCValue@divider+2
  3915  0059  3009               	movlw	9
  3916  005A  00B0               	movwf	getADCValue@divider+1
  3917  005B  30DE               	movlw	222
  3918  005C  00AF               	movwf	getADCValue@divider
  3919  005D  3004               	movlw	4
  3920  005E  3183  239C  3180   	fcall	_getADCValue
  3921  0061  0020               	movlb	0	; select bank0
  3922  0062  0832               	movf	?_getADCValue+3,w
  3923  0063  00C2               	movwf	setMessage@value+3
  3924  0064  0831               	movf	?_getADCValue+2,w
  3925  0065  00C1               	movwf	setMessage@value+2
  3926  0066  0830               	movf	?_getADCValue+1,w
  3927  0067  00C0               	movwf	setMessage@value+1
  3928  0068  082F               	movf	?_getADCValue,w
  3929  0069  00BF               	movwf	setMessage@value
  3930  006A  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  3931  006B  3184  247D  3180   	fcall	_setMessage
  3932                           
  3933                           ;main.c: 115: packet.packetData.byte = 0;
  3934  006E  0021               	movlb	1	; select bank1
  3935  006F  01A1               	clrf	loop@packet^(0+128)
  3936                           
  3937                           ;main.c: 116: packet.packetData.ACKRequest = 0;
  3938  0070  1121               	bcf	loop@packet^(0+128),2
  3939                           
  3940                           ;main.c: 117: nrf24l01SendPacket(&packet);
  3941  0071  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  3942  0072  3181  213D  3180   	fcall	_nrf24l01SendPacket
  3943                           
  3944                           ;main.c: 118: checkTXPower();
  3945  0075  318E  26D6  3180   	fcall	_checkTXPower
  3946                           
  3947                           ;main.c: 119: sleep();
  3948  0078  318E  26C4  3180   	fcall	_sleep
  3949                           
  3950                           ;main.c: 122: setMessage(&packet, "ANC3", getADCValue(0b010011, 2500));
  3951  007B  301E               	movlw	low (STR_5| (0+32768))
  3952  007C  0020               	movlb	0	; select bank0
  3953  007D  00BD               	movwf	setMessage@topic
  3954  007E  3090               	movlw	high (STR_5| (0+32768))
  3955  007F  00BE               	movwf	setMessage@topic+1
  3956  0080  3000               	movlw	0
  3957  0081  00B2               	movwf	getADCValue@divider+3
  3958  0082  3000               	movlw	0
  3959  0083  00B1               	movwf	getADCValue@divider+2
  3960  0084  3009               	movlw	9
  3961  0085  00B0               	movwf	getADCValue@divider+1
  3962  0086  30C4               	movlw	196
  3963  0087  00AF               	movwf	getADCValue@divider
  3964  0088  3013               	movlw	19
  3965  0089  3183  239C  3180   	fcall	_getADCValue
  3966  008C  0020               	movlb	0	; select bank0
  3967  008D  0832               	movf	?_getADCValue+3,w
  3968  008E  00C2               	movwf	setMessage@value+3
  3969  008F  0831               	movf	?_getADCValue+2,w
  3970  0090  00C1               	movwf	setMessage@value+2
  3971  0091  0830               	movf	?_getADCValue+1,w
  3972  0092  00C0               	movwf	setMessage@value+1
  3973  0093  082F               	movf	?_getADCValue,w
  3974  0094  00BF               	movwf	setMessage@value
  3975  0095  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  3976  0096  3184  247D  3180   	fcall	_setMessage
  3977                           
  3978                           ;main.c: 123: packet.packetData.byte = 0;
  3979  0099  0021               	movlb	1	; select bank1
  3980  009A  01A1               	clrf	loop@packet^(0+128)
  3981                           
  3982                           ;main.c: 124: packet.packetData.ACKRequest = 0;
  3983  009B  1121               	bcf	loop@packet^(0+128),2
  3984                           
  3985                           ;main.c: 125: nrf24l01SendPacket(&packet);
  3986  009C  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  3987  009D  3181  213D  3180   	fcall	_nrf24l01SendPacket
  3988                           
  3989                           ;main.c: 126: checkTXPower();
  3990  00A0  318E  26D6  3180   	fcall	_checkTXPower
  3991                           
  3992                           ;main.c: 127: sleep();
  3993  00A3  318E  26C4  3180   	fcall	_sleep
  3994                           
  3995                           ;main.c: 129: setMessage(&packet, "FVR", getADCValue(0b111111, 2500));
  3996  00A6  303A               	movlw	low (STR_6| (0+32768))
  3997  00A7  0020               	movlb	0	; select bank0
  3998  00A8  00BD               	movwf	setMessage@topic
  3999  00A9  3090               	movlw	high (STR_6| (0+32768))
  4000  00AA  00BE               	movwf	setMessage@topic+1
  4001  00AB  3000               	movlw	0
  4002  00AC  00B2               	movwf	getADCValue@divider+3
  4003  00AD  3000               	movlw	0
  4004  00AE  00B1               	movwf	getADCValue@divider+2
  4005  00AF  3009               	movlw	9
  4006  00B0  00B0               	movwf	getADCValue@divider+1
  4007  00B1  30C4               	movlw	196
  4008  00B2  00AF               	movwf	getADCValue@divider
  4009  00B3  303F               	movlw	63
  4010  00B4  3183  239C  3180   	fcall	_getADCValue
  4011  00B7  0020               	movlb	0	; select bank0
  4012  00B8  0832               	movf	?_getADCValue+3,w
  4013  00B9  00C2               	movwf	setMessage@value+3
  4014  00BA  0831               	movf	?_getADCValue+2,w
  4015  00BB  00C1               	movwf	setMessage@value+2
  4016  00BC  0830               	movf	?_getADCValue+1,w
  4017  00BD  00C0               	movwf	setMessage@value+1
  4018  00BE  082F               	movf	?_getADCValue,w
  4019  00BF  00BF               	movwf	setMessage@value
  4020  00C0  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4021  00C1  3184  247D  3180   	fcall	_setMessage
  4022                           
  4023                           ;main.c: 130: packet.packetData.byte = 0;
  4024  00C4  0021               	movlb	1	; select bank1
  4025  00C5  01A1               	clrf	loop@packet^(0+128)
  4026                           
  4027                           ;main.c: 131: packet.packetData.ACKRequest = 0;
  4028  00C6  1121               	bcf	loop@packet^(0+128),2
  4029                           
  4030                           ;main.c: 132: nrf24l01SendPacket(&packet);
  4031  00C7  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4032  00C8  3181  213D  3180   	fcall	_nrf24l01SendPacket
  4033                           
  4034                           ;main.c: 133: checkTXPower();
  4035  00CB  318E  26D6  3180   	fcall	_checkTXPower
  4036                           
  4037                           ;main.c: 134: sleep();
  4038  00CE  318E  26C4  3180   	fcall	_sleep
  4039                           
  4040                           ;main.c: 136: setMessage(&packet, "TEMP", getADCValue(0b111101, 162) - 40000);
  4041  00D1  3023               	movlw	low (STR_7| (0+32768))
  4042  00D2  0020               	movlb	0	; select bank0
  4043  00D3  00BD               	movwf	setMessage@topic
  4044  00D4  3090               	movlw	high (STR_7| (0+32768))
  4045  00D5  00BE               	movwf	setMessage@topic+1
  4046  00D6  30C0               	movlw	192
  4047  00D7  00D4               	movwf	??_loop
  4048  00D8  3063               	movlw	99
  4049  00D9  00D5               	movwf	??_loop+1
  4050  00DA  30FF               	movlw	255
  4051  00DB  00D6               	movwf	??_loop+2
  4052  00DC  30FF               	movlw	255
  4053  00DD  00D7               	movwf	??_loop+3
  4054  00DE  3000               	movlw	0
  4055  00DF  00B2               	movwf	getADCValue@divider+3
  4056  00E0  3000               	movlw	0
  4057  00E1  00B1               	movwf	getADCValue@divider+2
  4058  00E2  3000               	movlw	0
  4059  00E3  00B0               	movwf	getADCValue@divider+1
  4060  00E4  30A2               	movlw	162
  4061  00E5  00AF               	movwf	getADCValue@divider
  4062  00E6  303D               	movlw	61
  4063  00E7  3183  239C  3180   	fcall	_getADCValue
  4064  00EA  0020               	movlb	0	; select bank0
  4065  00EB  082F               	movf	?_getADCValue,w
  4066  00EC  07D4               	addwf	??_loop,f
  4067  00ED  0830               	movf	?_getADCValue+1,w
  4068  00EE  3DD5               	addwfc	??_loop+1,f
  4069  00EF  0831               	movf	?_getADCValue+2,w
  4070  00F0  3DD6               	addwfc	??_loop+2,f
  4071  00F1  0832               	movf	?_getADCValue+3,w
  4072  00F2  3DD7               	addwfc	??_loop+3,f
  4073  00F3  0857               	movf	??_loop+3,w
  4074  00F4  00C2               	movwf	setMessage@value+3
  4075  00F5  0856               	movf	??_loop+2,w
  4076  00F6  00C1               	movwf	setMessage@value+2
  4077  00F7  0855               	movf	??_loop+1,w
  4078  00F8  00C0               	movwf	setMessage@value+1
  4079  00F9  0854               	movf	??_loop,w
  4080  00FA  00BF               	movwf	setMessage@value
  4081  00FB  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4082  00FC  3184  247D  3180   	fcall	_setMessage
  4083                           
  4084                           ;main.c: 137: packet.packetData.byte = 0;
  4085  00FF  0021               	movlb	1	; select bank1
  4086  0100  01A1               	clrf	loop@packet^(0+128)
  4087                           
  4088                           ;main.c: 138: packet.packetData.ACKRequest = 0;
  4089  0101  1121               	bcf	loop@packet^(0+128),2
  4090                           
  4091                           ;main.c: 139: nrf24l01SendPacket(&packet);
  4092  0102  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4093  0103  3181  213D  3180   	fcall	_nrf24l01SendPacket
  4094                           
  4095                           ;main.c: 140: checkTXPower();
  4096  0106  318E  26D6  3180   	fcall	_checkTXPower
  4097                           
  4098                           ;main.c: 141: sleep();
  4099  0109  318E  26C4  3180   	fcall	_sleep
  4100                           
  4101                           ;main.c: 143: n_RF_SETUP_t rfSetup;;main.c: 144: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4102  010C  0020               	movlb	0	; select bank0
  4103  010D  01A1               	clrf	nrf24l01Send@data
  4104  010E  3006               	movlw	6
  4105  010F  318F  27E0  3180   	fcall	_nrf24l01Send
  4106  0112  0020               	movlb	0	; select bank0
  4107  0113  00D4               	movwf	??_loop
  4108  0114  0854               	movf	??_loop,w
  4109  0115  0021               	movlb	1	; select bank1
  4110  0116  00A0               	movwf	loop@rfSetup^(0+128)
  4111                           
  4112                           ;main.c: 146: setMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4113  0117  3013               	movlw	low (STR_8| (0+32768))
  4114  0118  0020               	movlb	0	; select bank0
  4115  0119  00BD               	movwf	setMessage@topic
  4116  011A  3090               	movlw	high (STR_8| (0+32768))
  4117  011B  00BE               	movwf	setMessage@topic+1
  4118  011C  0021               	movlb	1	; select bank1
  4119  011D  0C20               	rrf	loop@rfSetup^(0+128),w
  4120  011E  3903               	andlw	3
  4121  011F  0020               	movlb	0	; select bank0
  4122  0120  00D4               	movwf	??_loop
  4123  0121  01D5               	clrf	??_loop+1
  4124  0122  01D6               	clrf	??_loop+2
  4125  0123  01D7               	clrf	??_loop+3
  4126  0124  0857               	movf	??_loop+3,w
  4127  0125  00C2               	movwf	setMessage@value+3
  4128  0126  0856               	movf	??_loop+2,w
  4129  0127  00C1               	movwf	setMessage@value+2
  4130  0128  0855               	movf	??_loop+1,w
  4131  0129  00C0               	movwf	setMessage@value+1
  4132  012A  0854               	movf	??_loop,w
  4133  012B  00BF               	movwf	setMessage@value
  4134  012C  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4135  012D  3184  247D  3180   	fcall	_setMessage
  4136                           
  4137                           ;main.c: 147: packet.packetData.byte = 0;
  4138  0130  0021               	movlb	1	; select bank1
  4139  0131  01A1               	clrf	loop@packet^(0+128)
  4140                           
  4141                           ;main.c: 148: packet.packetData.ACKRequest = 1;
  4142  0132  1521               	bsf	loop@packet^(0+128),2
  4143                           
  4144                           ;main.c: 149: nrf24l01SendPacket(&packet);
  4145  0133  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4146  0134  3181  213D  3180   	fcall	_nrf24l01SendPacket
  4147                           
  4148                           ;main.c: 150: checkTXPower();
  4149  0137  318E  26D6  3180   	fcall	_checkTXPower
  4150                           
  4151                           ;main.c: 151: sleep();
  4152  013A  318E  26C4         	fcall	_sleep
  4153  013C  0008               	return
  4154  013D                     __end_of_loop:	
  4155                           
  4156                           	psect	text6
  4157  0EC4                     __ptext6:	
  4158 ;; *************** function _sleep *****************
  4159 ;; Defined at:
  4160 ;;		line 49 in file "main.c"
  4161 ;; Parameters:    Size  Location     Type
  4162 ;;		None
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;		None
  4165 ;; Return value:  Size  Location     Type
  4166 ;;                  1    wreg      void 
  4167 ;; Registers used:
  4168 ;;		wreg
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4178 ;;Total ram usage:        0 bytes
  4179 ;; Hardware stack levels used:    1
  4180 ;; Hardware stack levels required when called:    7
  4181 ;; This function calls:
  4182 ;;		Nothing
  4183 ;; This function is called by:
  4184 ;;		_loop
  4185 ;;		_main
  4186 ;;		_checkRxData
  4187 ;; This function uses a non-reentrant model
  4188 ;;
  4189                           
  4190                           
  4191                           ;psect for function _sleep
  4192  0EC4                     _sleep:	
  4193  0EC4                     l221:	
  4194                           ;incstack = 0
  4195                           ; Regs used in _sleep: [wreg]
  4196                           ;main.c: 50: while (1){
  4197                           
  4198                           
  4199                           ;main.c: 52: counter++;
  4200  0EC4  3001               	movlw	1
  4201  0EC5  0021               	movlb	1	; select bank1
  4202  0EC6  07E3               	addwf	_counter^(0+128),f
  4203  0EC7  3000               	movlw	0
  4204  0EC8  3DE4               	addwfc	(_counter+1)^(0+128),f
  4205  0EC9  3000               	movlw	0
  4206  0ECA  3DE5               	addwfc	(_counter+2)^(0+128),f
  4207  0ECB  3000               	movlw	0
  4208  0ECC  3DE6               	addwfc	(_counter+3)^(0+128),f
  4209  0ECD  0063               	sleep	;# 
  4210                           
  4211                           ;main.c: 55: __nop();
  4212  0ECE  0000               	nop
  4213                           
  4214                           ;main.c: 56: __nop();
  4215  0ECF  0000               	nop
  4216                           
  4217                           ;main.c: 58: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  4218  0ED0  0020               	movlb	0	; select bank0
  4219  0ED1  1A03               	btfsc	3,4	;volatile
  4220  0ED2  2EC4               	goto	l221
  4221  0ED3  1D83               	btfss	3,3	;volatile
  4222  0ED4  0008               	return
  4223  0ED5  2EC4               	goto	l221
  4224  0ED6                     __end_of_sleep:	
  4225                           ;main.c: 59: return;
  4226                           
  4227                           
  4228                           	psect	text7
  4229  047D                     __ptext7:	
  4230 ;; *************** function _setMessage *****************
  4231 ;; Defined at:
  4232 ;;		line 76 in file "main.c"
  4233 ;; Parameters:    Size  Location     Type
  4234 ;;  packet          1    wreg     PTR struct .
  4235 ;;		 -> main@packet(33), loop@packet(33), 
  4236 ;;  topic           2   29[BANK0 ] PTR const unsigned char 
  4237 ;;		 -> STR_10(5), STR_8(6), STR_7(5), STR_6(4), 
  4238 ;;		 -> STR_5(5), STR_4(5), STR_3(4), 
  4239 ;;  value           4   31[BANK0 ] unsigned long 
  4240 ;; Auto vars:     Size  Location     Type
  4241 ;;  packet          1   51[BANK0 ] PTR struct .
  4242 ;;		 -> main@packet(33), loop@packet(33), 
  4243 ;;  tempString     16   35[BANK0 ] unsigned char [16]
  4244 ;; Return value:  Size  Location     Type
  4245 ;;                  1    wreg      void 
  4246 ;; Registers used:
  4247 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4248 ;; Tracked objects:
  4249 ;;		On entry : 0/0
  4250 ;;		On exit  : 0/0
  4251 ;;		Unchanged: 0/0
  4252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4253 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4254 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4256 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4257 ;;Total ram usage:       23 bytes
  4258 ;; Hardware stack levels used:    1
  4259 ;; Hardware stack levels required when called:    9
  4260 ;; This function calls:
  4261 ;;		_memset
  4262 ;;		_strcat
  4263 ;;		_ultoa
  4264 ;; This function is called by:
  4265 ;;		_loop
  4266 ;;		_main
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           
  4271                           ;psect for function _setMessage
  4272  047D                     _setMessage:	
  4273                           
  4274                           ;incstack = 0
  4275                           ; Regs used in _setMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4276                           ;setMessage@packet stored from wreg
  4277  047D  0020               	movlb	0	; select bank0
  4278  047E  00D3               	movwf	setMessage@packet
  4279                           
  4280                           ;main.c: 77: memset(packet->Message, 0, sizeof(packet->Message));
  4281  047F  0853               	movf	setMessage@packet,w
  4282  0480  3E01               	addlw	1
  4283  0481  00A1               	movwf	memset@p1
  4284  0482  3000               	movlw	0
  4285  0483  00A2               	movwf	memset@p1+1
  4286  0484  3000               	movlw	0
  4287  0485  00A3               	movwf	memset@c
  4288  0486  00A4               	movwf	memset@c+1
  4289  0487  3020               	movlw	32
  4290  0488  00A5               	movwf	memset@n
  4291  0489  3000               	movlw	0
  4292  048A  00A6               	movwf	memset@n+1
  4293  048B  318F  271A  3184   	fcall	_memset
  4294                           
  4295                           ;main.c: 79: strcat(packet->Message, romData.name);
  4296  048E  305D               	movlw	low (_romData+1)
  4297  048F  0020               	movlb	0	; select bank0
  4298  0490  00A1               	movwf	strcat@from
  4299  0491  3000               	movlw	high (_romData+1)
  4300  0492  00A2               	movwf	strcat@from+1
  4301  0493  0853               	movf	setMessage@packet,w
  4302  0494  3E01               	addlw	1
  4303  0495  3187  2742  3184   	fcall	_strcat
  4304                           
  4305                           ;main.c: 81: strcat(packet->Message, "/");
  4306  0498  303E               	movlw	low (STR_1| (0+32768))
  4307  0499  0020               	movlb	0	; select bank0
  4308  049A  00A1               	movwf	strcat@from
  4309  049B  3090               	movlw	high (STR_1| (0+32768))
  4310  049C  00A2               	movwf	strcat@from+1
  4311  049D  0853               	movf	setMessage@packet,w
  4312  049E  3E01               	addlw	1
  4313  049F  3187  2742  3184   	fcall	_strcat
  4314                           
  4315                           ;main.c: 82: strcat(packet->Message, topic);
  4316  04A2  0020               	movlb	0	; select bank0
  4317  04A3  083E               	movf	setMessage@topic+1,w
  4318  04A4  00A2               	movwf	strcat@from+1
  4319  04A5  083D               	movf	setMessage@topic,w
  4320  04A6  00A1               	movwf	strcat@from
  4321  04A7  0853               	movf	setMessage@packet,w
  4322  04A8  3E01               	addlw	1
  4323  04A9  3187  2742  3184   	fcall	_strcat
  4324                           
  4325                           ;main.c: 84: char tempString[16];;main.c: 86: ultoa(tempString, value, 10);
  4326  04AC  0020               	movlb	0	; select bank0
  4327  04AD  0842               	movf	setMessage@value+3,w
  4328  04AE  00B2               	movwf	ultoa@val+3
  4329  04AF  0841               	movf	setMessage@value+2,w
  4330  04B0  00B1               	movwf	ultoa@val+2
  4331  04B1  0840               	movf	setMessage@value+1,w
  4332  04B2  00B0               	movwf	ultoa@val+1
  4333  04B3  083F               	movf	setMessage@value,w
  4334  04B4  00AF               	movwf	ultoa@val
  4335  04B5  300A               	movlw	10
  4336  04B6  00B3               	movwf	ultoa@base
  4337  04B7  3000               	movlw	0
  4338  04B8  00B4               	movwf	ultoa@base+1
  4339  04B9  3043               	movlw	(low (setMessage@tempString| 0))& (0+255)
  4340  04BA  3182  228B  3184   	fcall	_ultoa
  4341                           
  4342                           ;main.c: 88: strcat(packet->Message, "/");
  4343  04BD  303E               	movlw	low (STR_1| (0+32768))
  4344  04BE  0020               	movlb	0	; select bank0
  4345  04BF  00A1               	movwf	strcat@from
  4346  04C0  3090               	movlw	high (STR_1| (0+32768))
  4347  04C1  00A2               	movwf	strcat@from+1
  4348  04C2  0853               	movf	setMessage@packet,w
  4349  04C3  3E01               	addlw	1
  4350  04C4  3187  2742  3184   	fcall	_strcat
  4351                           
  4352                           ;main.c: 89: strcat(packet->Message, tempString);
  4353  04C7  3043               	movlw	low setMessage@tempString
  4354  04C8  0020               	movlb	0	; select bank0
  4355  04C9  00A1               	movwf	strcat@from
  4356  04CA  3000               	movlw	high setMessage@tempString
  4357  04CB  00A2               	movwf	strcat@from+1
  4358  04CC  0853               	movf	setMessage@packet,w
  4359  04CD  3E01               	addlw	1
  4360  04CE  3187  2742         	fcall	_strcat
  4361  04D0  0008               	return
  4362  04D1                     __end_of_setMessage:	
  4363                           
  4364                           	psect	text8
  4365  028B                     __ptext8:	
  4366 ;; *************** function _ultoa *****************
  4367 ;; Defined at:
  4368 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ltoa.c"
  4369 ;; Parameters:    Size  Location     Type
  4370 ;;  buf             1    wreg     PTR unsigned char 
  4371 ;;		 -> setMessage@tempString(16), 
  4372 ;;  val             4   15[BANK0 ] unsigned long 
  4373 ;;  base            2   19[BANK0 ] int 
  4374 ;; Auto vars:     Size  Location     Type
  4375 ;;  buf             1   27[BANK0 ] PTR unsigned char 
  4376 ;;		 -> setMessage@tempString(16), 
  4377 ;;  v               4   22[BANK0 ] unsigned long 
  4378 ;;  c               1   26[BANK0 ] unsigned char 
  4379 ;; Return value:  Size  Location     Type
  4380 ;;                  1    wreg      PTR unsigned char 
  4381 ;; Registers used:
  4382 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4383 ;; Tracked objects:
  4384 ;;		On entry : 0/0
  4385 ;;		On exit  : 0/0
  4386 ;;		Unchanged: 0/0
  4387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4388 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4389 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4390 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4391 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4392 ;;Total ram usage:       13 bytes
  4393 ;; Hardware stack levels used:    1
  4394 ;; Hardware stack levels required when called:    8
  4395 ;; This function calls:
  4396 ;;		___lldiv
  4397 ;;		___llmod
  4398 ;; This function is called by:
  4399 ;;		_setMessage
  4400 ;; This function uses a non-reentrant model
  4401 ;;
  4402                           
  4403                           
  4404                           ;psect for function _ultoa
  4405  028B                     _ultoa:	
  4406                           
  4407                           ;incstack = 0
  4408                           ; Regs used in _ultoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4409                           ;ultoa@buf stored from wreg
  4410  028B  0020               	movlb	0	; select bank0
  4411  028C  00BB               	movwf	ultoa@buf
  4412  028D  0832               	movf	ultoa@val+3,w
  4413  028E  00B9               	movwf	ultoa@v+3
  4414  028F  0831               	movf	ultoa@val+2,w
  4415  0290  00B8               	movwf	ultoa@v+2
  4416  0291  0830               	movf	ultoa@val+1,w
  4417  0292  00B7               	movwf	ultoa@v+1
  4418  0293  082F               	movf	ultoa@val,w
  4419  0294  00B6               	movwf	ultoa@v
  4420  0295                     l2054:	
  4421  0295  0833               	movf	ultoa@base,w
  4422  0296  00A1               	movwf	___lldiv@divisor
  4423  0297  0834               	movf	ultoa@base+1,w
  4424  0298  00A2               	movwf	___lldiv@divisor+1
  4425  0299  0D89               	rlf	9,f
  4426  029A  3B89               	subwfb	9,f
  4427  029B  0989               	comf	9,f
  4428  029C  00A3               	movwf	___lldiv@divisor+2
  4429  029D  00A4               	movwf	___lldiv@divisor+3
  4430  029E  0839               	movf	ultoa@v+3,w
  4431  029F  00A8               	movwf	___lldiv@dividend+3
  4432  02A0  0838               	movf	ultoa@v+2,w
  4433  02A1  00A7               	movwf	___lldiv@dividend+2
  4434  02A2  0837               	movf	ultoa@v+1,w
  4435  02A3  00A6               	movwf	___lldiv@dividend+1
  4436  02A4  0836               	movf	ultoa@v,w
  4437  02A5  00A5               	movwf	___lldiv@dividend
  4438  02A6  3184  24D1  3182   	fcall	___lldiv
  4439  02A9  0020               	movlb	0	; select bank0
  4440  02AA  0824               	movf	?___lldiv+3,w
  4441  02AB  00B9               	movwf	ultoa@v+3
  4442  02AC  0823               	movf	?___lldiv+2,w
  4443  02AD  00B8               	movwf	ultoa@v+2
  4444  02AE  0822               	movf	?___lldiv+1,w
  4445  02AF  00B7               	movwf	ultoa@v+1
  4446  02B0  0821               	movf	?___lldiv,w
  4447  02B1  00B6               	movwf	ultoa@v
  4448  02B2  3001               	movlw	1
  4449  02B3  00B5               	movwf	??_ultoa
  4450  02B4  0835               	movf	??_ultoa,w
  4451  02B5  07BB               	addwf	ultoa@buf,f
  4452  02B6  0839               	movf	ultoa@v+3,w
  4453  02B7  0438               	iorwf	ultoa@v+2,w
  4454  02B8  0437               	iorwf	ultoa@v+1,w
  4455  02B9  0436               	iorwf	ultoa@v,w
  4456  02BA  1D03               	skipz
  4457  02BB  2A95               	goto	l2054
  4458  02BC  083B               	movf	ultoa@buf,w
  4459  02BD  0086               	movwf	6
  4460  02BE  0187               	clrf	7
  4461  02BF  0181               	clrf	1
  4462  02C0  3001               	movlw	1
  4463  02C1  02BB               	subwf	ultoa@buf,f
  4464  02C2                     l2064:	
  4465  02C2  0833               	movf	ultoa@base,w
  4466  02C3  00A1               	movwf	___llmod@divisor
  4467  02C4  0834               	movf	ultoa@base+1,w
  4468  02C5  00A2               	movwf	___llmod@divisor+1
  4469  02C6  0D89               	rlf	9,f
  4470  02C7  3B89               	subwfb	9,f
  4471  02C8  0989               	comf	9,f
  4472  02C9  00A3               	movwf	___llmod@divisor+2
  4473  02CA  00A4               	movwf	___llmod@divisor+3
  4474  02CB  0832               	movf	ultoa@val+3,w
  4475  02CC  00A8               	movwf	___llmod@dividend+3
  4476  02CD  0831               	movf	ultoa@val+2,w
  4477  02CE  00A7               	movwf	___llmod@dividend+2
  4478  02CF  0830               	movf	ultoa@val+1,w
  4479  02D0  00A6               	movwf	___llmod@dividend+1
  4480  02D1  082F               	movf	ultoa@val,w
  4481  02D2  00A5               	movwf	___llmod@dividend
  4482  02D3  3185  2524  3182   	fcall	___llmod
  4483  02D6  0020               	movlb	0	; select bank0
  4484  02D7  0821               	movf	?___llmod,w
  4485  02D8  00B5               	movwf	??_ultoa
  4486  02D9  0835               	movf	??_ultoa,w
  4487  02DA  00BA               	movwf	ultoa@c
  4488  02DB  0833               	movf	ultoa@base,w
  4489  02DC  00A1               	movwf	___lldiv@divisor
  4490  02DD  0834               	movf	ultoa@base+1,w
  4491  02DE  00A2               	movwf	___lldiv@divisor+1
  4492  02DF  0D89               	rlf	9,f
  4493  02E0  3B89               	subwfb	9,f
  4494  02E1  0989               	comf	9,f
  4495  02E2  00A3               	movwf	___lldiv@divisor+2
  4496  02E3  00A4               	movwf	___lldiv@divisor+3
  4497  02E4  0832               	movf	ultoa@val+3,w
  4498  02E5  00A8               	movwf	___lldiv@dividend+3
  4499  02E6  0831               	movf	ultoa@val+2,w
  4500  02E7  00A7               	movwf	___lldiv@dividend+2
  4501  02E8  0830               	movf	ultoa@val+1,w
  4502  02E9  00A6               	movwf	___lldiv@dividend+1
  4503  02EA  082F               	movf	ultoa@val,w
  4504  02EB  00A5               	movwf	___lldiv@dividend
  4505  02EC  3184  24D1  3182   	fcall	___lldiv
  4506  02EF  0020               	movlb	0	; select bank0
  4507  02F0  0824               	movf	?___lldiv+3,w
  4508  02F1  00B2               	movwf	ultoa@val+3
  4509  02F2  0823               	movf	?___lldiv+2,w
  4510  02F3  00B1               	movwf	ultoa@val+2
  4511  02F4  0822               	movf	?___lldiv+1,w
  4512  02F5  00B0               	movwf	ultoa@val+1
  4513  02F6  0821               	movf	?___lldiv,w
  4514  02F7  00AF               	movwf	ultoa@val
  4515  02F8  300A               	movlw	10
  4516  02F9  023A               	subwf	ultoa@c,w
  4517  02FA  1C03               	skipc
  4518  02FB  2B00               	goto	l865
  4519  02FC  3007               	movlw	7
  4520  02FD  00B5               	movwf	??_ultoa
  4521  02FE  0835               	movf	??_ultoa,w
  4522  02FF  07BA               	addwf	ultoa@c,f
  4523  0300                     l865:	
  4524  0300  3030               	movlw	48
  4525  0301  00B5               	movwf	??_ultoa
  4526  0302  0835               	movf	??_ultoa,w
  4527  0303  07BA               	addwf	ultoa@c,f
  4528  0304  083A               	movf	ultoa@c,w
  4529  0305  00B5               	movwf	??_ultoa
  4530  0306  083B               	movf	ultoa@buf,w
  4531  0307  0086               	movwf	6
  4532  0308  0187               	clrf	7
  4533  0309  0835               	movf	??_ultoa,w
  4534  030A  0081               	movwf	1
  4535  030B  3001               	movlw	1
  4536  030C  02BB               	subwf	ultoa@buf,f
  4537  030D  0832               	movf	ultoa@val+3,w
  4538  030E  0431               	iorwf	ultoa@val+2,w
  4539  030F  0430               	iorwf	ultoa@val+1,w
  4540  0310  042F               	iorwf	ultoa@val,w
  4541  0311  1903               	btfsc	3,2
  4542  0312  0008               	return
  4543  0313  2AC2               	goto	l2064
  4544  0314                     __end_of_ultoa:	
  4545                           ;	Return value of _ultoa is never used
  4546                           
  4547                           
  4548                           	psect	text9
  4549  0524                     __ptext9:	
  4550 ;; *************** function ___llmod *****************
  4551 ;; Defined at:
  4552 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  4553 ;; Parameters:    Size  Location     Type
  4554 ;;  divisor         4    1[BANK0 ] unsigned long 
  4555 ;;  dividend        4    5[BANK0 ] unsigned long 
  4556 ;; Auto vars:     Size  Location     Type
  4557 ;;  counter         1   10[BANK0 ] unsigned char 
  4558 ;; Return value:  Size  Location     Type
  4559 ;;                  4    1[BANK0 ] unsigned long 
  4560 ;; Registers used:
  4561 ;;		wreg, status,2, status,0
  4562 ;; Tracked objects:
  4563 ;;		On entry : 0/0
  4564 ;;		On exit  : 0/0
  4565 ;;		Unchanged: 0/0
  4566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4567 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4568 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4569 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4570 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4571 ;;Total ram usage:       10 bytes
  4572 ;; Hardware stack levels used:    1
  4573 ;; Hardware stack levels required when called:    7
  4574 ;; This function calls:
  4575 ;;		Nothing
  4576 ;; This function is called by:
  4577 ;;		_ultoa
  4578 ;; This function uses a non-reentrant model
  4579 ;;
  4580                           
  4581                           
  4582                           ;psect for function ___llmod
  4583  0524                     ___llmod:	
  4584                           
  4585                           ;incstack = 0
  4586                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  4587  0524  0020               	movlb	0	; select bank0
  4588  0525  0824               	movf	___llmod@divisor+3,w
  4589  0526  0423               	iorwf	___llmod@divisor+2,w
  4590  0527  0422               	iorwf	___llmod@divisor+1,w
  4591  0528  0421               	iorwf	___llmod@divisor,w
  4592  0529  1903               	skipnz
  4593  052A  2D5E               	goto	l1936
  4594  052B  01AA               	clrf	___llmod@counter
  4595  052C  0AAA               	incf	___llmod@counter,f
  4596  052D                     l1926:	
  4597  052D  1BA4               	btfsc	___llmod@divisor+3,7
  4598  052E  2D3B               	goto	l1928
  4599  052F  3001               	movlw	1
  4600  0530                     u835:	
  4601  0530  35A1               	lslf	___llmod@divisor,f
  4602  0531  0DA2               	rlf	___llmod@divisor+1,f
  4603  0532  0DA3               	rlf	___llmod@divisor+2,f
  4604  0533  0DA4               	rlf	___llmod@divisor+3,f
  4605  0534  0B89               	decfsz	9,f
  4606  0535  2D30               	goto	u835
  4607  0536  3001               	movlw	1
  4608  0537  00A9               	movwf	??___llmod
  4609  0538  0829               	movf	??___llmod,w
  4610  0539  07AA               	addwf	___llmod@counter,f
  4611  053A  2D2D               	goto	l1926
  4612  053B                     l1928:	
  4613  053B  0824               	movf	___llmod@divisor+3,w
  4614  053C  0228               	subwf	___llmod@dividend+3,w
  4615  053D  1D03               	skipz
  4616  053E  2D49               	goto	u855
  4617  053F  0823               	movf	___llmod@divisor+2,w
  4618  0540  0227               	subwf	___llmod@dividend+2,w
  4619  0541  1D03               	skipz
  4620  0542  2D49               	goto	u855
  4621  0543  0822               	movf	___llmod@divisor+1,w
  4622  0544  0226               	subwf	___llmod@dividend+1,w
  4623  0545  1D03               	skipz
  4624  0546  2D49               	goto	u855
  4625  0547  0821               	movf	___llmod@divisor,w
  4626  0548  0225               	subwf	___llmod@dividend,w
  4627  0549                     u855:	
  4628  0549  1C03               	skipc
  4629  054A  2D53               	goto	l1932
  4630  054B  0821               	movf	___llmod@divisor,w
  4631  054C  02A5               	subwf	___llmod@dividend,f
  4632  054D  0822               	movf	___llmod@divisor+1,w
  4633  054E  3BA6               	subwfb	___llmod@dividend+1,f
  4634  054F  0823               	movf	___llmod@divisor+2,w
  4635  0550  3BA7               	subwfb	___llmod@dividend+2,f
  4636  0551  0824               	movf	___llmod@divisor+3,w
  4637  0552  3BA8               	subwfb	___llmod@dividend+3,f
  4638  0553                     l1932:	
  4639  0553  3001               	movlw	1
  4640  0554                     u865:	
  4641  0554  36A4               	lsrf	___llmod@divisor+3,f
  4642  0555  0CA3               	rrf	___llmod@divisor+2,f
  4643  0556  0CA2               	rrf	___llmod@divisor+1,f
  4644  0557  0CA1               	rrf	___llmod@divisor,f
  4645  0558  0B89               	decfsz	9,f
  4646  0559  2D54               	goto	u865
  4647  055A  3001               	movlw	1
  4648  055B  02AA               	subwf	___llmod@counter,f
  4649  055C  1D03               	btfss	3,2
  4650  055D  2D3B               	goto	l1928
  4651  055E                     l1936:	
  4652  055E  0828               	movf	___llmod@dividend+3,w
  4653  055F  00A4               	movwf	?___llmod+3
  4654  0560  0827               	movf	___llmod@dividend+2,w
  4655  0561  00A3               	movwf	?___llmod+2
  4656  0562  0826               	movf	___llmod@dividend+1,w
  4657  0563  00A2               	movwf	?___llmod+1
  4658  0564  0825               	movf	___llmod@dividend,w
  4659  0565  00A1               	movwf	?___llmod
  4660  0566  0008               	return
  4661  0567                     __end_of___llmod:	
  4662                           
  4663                           	psect	text10
  4664  0742                     __ptext10:	
  4665 ;; *************** function _strcat *****************
  4666 ;; Defined at:
  4667 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  4668 ;; Parameters:    Size  Location     Type
  4669 ;;  to              1    wreg     PTR unsigned char 
  4670 ;;		 -> main@packet(33), loop@packet(33), 
  4671 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  4672 ;;		 -> STR_10(5), STR_8(6), STR_7(5), STR_6(4), 
  4673 ;;		 -> STR_5(5), STR_4(5), STR_3(4), STR_2(2), 
  4674 ;;		 -> setMessage@tempString(16), STR_1(2), romData.name(16), romData(19), 
  4675 ;; Auto vars:     Size  Location     Type
  4676 ;;  to              1    5[BANK0 ] PTR unsigned char 
  4677 ;;		 -> main@packet(33), loop@packet(33), 
  4678 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  4679 ;;		 -> main@packet(33), loop@packet(33), 
  4680 ;; Return value:  Size  Location     Type
  4681 ;;                  1    wreg      PTR unsigned char 
  4682 ;; Registers used:
  4683 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4684 ;; Tracked objects:
  4685 ;;		On entry : 0/0
  4686 ;;		On exit  : 0/0
  4687 ;;		Unchanged: 0/0
  4688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4689 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4690 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4691 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4692 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4693 ;;Total ram usage:        5 bytes
  4694 ;; Hardware stack levels used:    1
  4695 ;; Hardware stack levels required when called:    7
  4696 ;; This function calls:
  4697 ;;		Nothing
  4698 ;; This function is called by:
  4699 ;;		_setMessage
  4700 ;; This function uses a non-reentrant model
  4701 ;;
  4702                           
  4703                           
  4704                           ;psect for function _strcat
  4705  0742                     _strcat:	
  4706                           
  4707                           ;incstack = 0
  4708                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  4709                           ;strcat@to stored from wreg
  4710  0742  0020               	movlb	0	; select bank0
  4711  0743  00A5               	movwf	strcat@to
  4712  0744  0825               	movf	strcat@to,w
  4713  0745  00A3               	movwf	??_strcat
  4714  0746  0823               	movf	??_strcat,w
  4715  0747  00A4               	movwf	strcat@cp
  4716  0748                     l2044:	
  4717  0748  0824               	movf	strcat@cp,w
  4718  0749  0086               	movwf	6
  4719  074A  0187               	clrf	7
  4720  074B  0801               	movf	1,w
  4721  074C  1903               	btfsc	3,2
  4722  074D  2F5B               	goto	l2050
  4723  074E  3001               	movlw	1
  4724  074F  00A3               	movwf	??_strcat
  4725  0750  0823               	movf	??_strcat,w
  4726  0751  07A4               	addwf	strcat@cp,f
  4727  0752  2F48               	goto	l2044
  4728  0753                     l2046:	
  4729  0753  3001               	movlw	1
  4730  0754  00A3               	movwf	??_strcat
  4731  0755  0823               	movf	??_strcat,w
  4732  0756  07A4               	addwf	strcat@cp,f
  4733  0757  3001               	movlw	1
  4734  0758  07A1               	addwf	strcat@from,f
  4735  0759  3000               	movlw	0
  4736  075A  3DA2               	addwfc	strcat@from+1,f
  4737  075B                     l2050:	
  4738  075B  0824               	movf	strcat@cp,w
  4739  075C  0086               	movwf	6
  4740  075D  0187               	clrf	7
  4741  075E  0821               	movf	strcat@from,w
  4742  075F  0084               	movwf	4
  4743  0760  0822               	movf	strcat@from+1,w
  4744  0761  0085               	movwf	5
  4745  0762  0800               	movf	0,w	;code access
  4746  0763  3FC0               	movwi [0]fsr1
  4747  0764  0889               	movf	9,f
  4748  0765  1903               	btfsc	3,2
  4749  0766  0008               	return
  4750  0767  2F53               	goto	l2046
  4751  0768                     __end_of_strcat:	
  4752                           ;	Return value of _strcat is never used
  4753                           
  4754                           
  4755                           	psect	text11
  4756  0F1A                     __ptext11:	
  4757 ;; *************** function _memset *****************
  4758 ;; Defined at:
  4759 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  4760 ;; Parameters:    Size  Location     Type
  4761 ;;  p1              2    1[BANK0 ] PTR void 
  4762 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  4763 ;;  c               2    3[BANK0 ] int 
  4764 ;;  n               2    5[BANK0 ] unsigned int 
  4765 ;; Auto vars:     Size  Location     Type
  4766 ;;  p               2    7[BANK0 ] PTR unsigned char 
  4767 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  2    1[BANK0 ] PTR void 
  4770 ;; Registers used:
  4771 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4772 ;; Tracked objects:
  4773 ;;		On entry : 0/0
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4777 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4778 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4780 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4781 ;;Total ram usage:        8 bytes
  4782 ;; Hardware stack levels used:    1
  4783 ;; Hardware stack levels required when called:    7
  4784 ;; This function calls:
  4785 ;;		Nothing
  4786 ;; This function is called by:
  4787 ;;		_setMessage
  4788 ;; This function uses a non-reentrant model
  4789 ;;
  4790                           
  4791                           
  4792                           ;psect for function _memset
  4793  0F1A                     _memset:	
  4794                           
  4795                           ;incstack = 0
  4796                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  4797  0F1A  0020               	movlb	0	; select bank0
  4798  0F1B  0822               	movf	memset@p1+1,w
  4799  0F1C  00A8               	movwf	memset@p+1
  4800  0F1D  0821               	movf	memset@p1,w
  4801  0F1E  00A7               	movwf	memset@p
  4802  0F1F                     l2786:	
  4803  0F1F  3001               	movlw	1
  4804  0F20  02A5               	subwf	memset@n,f
  4805  0F21  3000               	movlw	0
  4806  0F22  3BA6               	subwfb	memset@n+1,f
  4807  0F23  0A25               	incf	memset@n,w
  4808  0F24  1903               	btfsc	3,2
  4809  0F25  0A26               	incf	memset@n+1,w
  4810  0F26  1903               	btfsc	3,2
  4811  0F27  0008               	return
  4812  0F28  0827               	movf	memset@p,w
  4813  0F29  0086               	movwf	6
  4814  0F2A  0828               	movf	memset@p+1,w
  4815  0F2B  0087               	movwf	7
  4816  0F2C  0823               	movf	memset@c,w
  4817  0F2D  0081               	movwf	1
  4818  0F2E  3001               	movlw	1
  4819  0F2F  07A7               	addwf	memset@p,f
  4820  0F30  3000               	movlw	0
  4821  0F31  3DA8               	addwfc	memset@p+1,f
  4822  0F32  2F1F               	goto	l2786
  4823  0F33                     __end_of_memset:	
  4824                           ;	Return value of _memset is never used
  4825                           
  4826                           
  4827                           	psect	text12
  4828  013D                     __ptext12:	
  4829 ;; *************** function _nrf24l01SendPacket *****************
  4830 ;; Defined at:
  4831 ;;		line 170 in file "nrf24l01.c"
  4832 ;; Parameters:    Size  Location     Type
  4833 ;;  Packet          1    wreg     PTR struct .
  4834 ;;		 -> main@packet(33), loop@packet(33), 
  4835 ;; Auto vars:     Size  Location     Type
  4836 ;;  Packet          1   11[BANK0 ] PTR struct .
  4837 ;;		 -> main@packet(33), loop@packet(33), 
  4838 ;;  i               1   12[BANK0 ] unsigned char 
  4839 ;; Return value:  Size  Location     Type
  4840 ;;                  1    wreg      void 
  4841 ;; Registers used:
  4842 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4843 ;; Tracked objects:
  4844 ;;		On entry : 0/0
  4845 ;;		On exit  : 0/0
  4846 ;;		Unchanged: 0/0
  4847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4849 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4850 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4851 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4852 ;;Total ram usage:        4 bytes
  4853 ;; Hardware stack levels used:    1
  4854 ;; Hardware stack levels required when called:   11
  4855 ;; This function calls:
  4856 ;;		_enableInterrupts
  4857 ;;		_nrf24l01CEHigh
  4858 ;;		_nrf24l01CELow
  4859 ;;		_nrf24l01ChangeTXPower
  4860 ;;		_nrf24l01SPIEnd
  4861 ;;		_nrf24l01SPISend
  4862 ;;		_nrf24l01SPIStart
  4863 ;;		_nrf24l01SetRXMode
  4864 ;;		_strlen
  4865 ;; This function is called by:
  4866 ;;		_loop
  4867 ;;		_main
  4868 ;;		_nrf24l01SendACK
  4869 ;; This function uses a non-reentrant model
  4870 ;;
  4871                           
  4872                           
  4873                           ;psect for function _nrf24l01SendPacket
  4874  013D                     _nrf24l01SendPacket:	
  4875                           
  4876                           ;incstack = 0
  4877                           ; Regs used in _nrf24l01SendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4878                           ;nrf24l01SendPacket@Packet stored from wreg
  4879  013D  0020               	movlb	0	; select bank0
  4880  013E  00AB               	movwf	nrf24l01SendPacket@Packet
  4881                           
  4882                           ;nrf24l01.c: 172: TXPacket = Packet;
  4883  013F  082B               	movf	nrf24l01SendPacket@Packet,w
  4884  0140  00A9               	movwf	??_nrf24l01SendPacket
  4885  0141  0829               	movf	??_nrf24l01SendPacket,w
  4886  0142  00D9               	movwf	_TXPacket
  4887  0143                     l324:	
  4888                           ;nrf24l01.c: 175: unsigned char i;;nrf24l01.c: 179: RESEND:
  4889                           
  4890                           
  4891                           ;nrf24l01.c: 182: i = 0xFF;
  4892  0143  30FF               	movlw	255
  4893  0144  0020               	movlb	0	; select bank0
  4894  0145  00A9               	movwf	??_nrf24l01SendPacket
  4895  0146  0829               	movf	??_nrf24l01SendPacket,w
  4896  0147  00AC               	movwf	nrf24l01SendPacket@i
  4897  0148                     l2344:	
  4898                           ;nrf24l01.c: 183: while (nrf24l01.TXBusy){
  4899                           
  4900  0148  0020               	movlb	0	; select bank0
  4901  0149  1C5B               	btfss	_nrf24l01,0	;volatile
  4902  014A  2959               	goto	l328
  4903                           
  4904                           ;nrf24l01.c: 184: if (!--i) {
  4905  014B  3001               	movlw	1
  4906  014C  02AC               	subwf	nrf24l01SendPacket@i,f
  4907  014D  1903               	btfsc	3,2
  4908  014E  2943               	goto	l324
  4909                           
  4910                           ;nrf24l01.c: 186: };nrf24l01.c: 187: _delay((unsigned long)((10000)*(16000000/4000000.0)
      +                          ));
  4911                           
  4912                           ;nrf24l01.c: 185: goto RESEND;
  4913  014F  3034               	movlw	52
  4914  0150  0020               	movlb	0	; select bank0
  4915  0151  00A9               	movwf	??_nrf24l01SendPacket
  4916  0152  30F1               	movlw	241
  4917  0153                     u1627:	
  4918  0153  0B89               	decfsz	9,f
  4919  0154  2953               	goto	u1627
  4920  0155  0BA9               	decfsz	??_nrf24l01SendPacket,f
  4921  0156  2953               	goto	u1627
  4922  0157  3200               	nop2
  4923  0158  2948               	goto	l2344
  4924  0159                     l328:	
  4925                           
  4926                           ;nrf24l01.c: 188: };nrf24l01.c: 191: nrf24l01.TXBusy = 1;
  4927  0159  145B               	bsf	_nrf24l01,0	;volatile
  4928                           
  4929                           ;nrf24l01.c: 194: enableInterrupts(0);
  4930  015A  3000               	movlw	0
  4931  015B  318E  26AF  3181   	fcall	_enableInterrupts
  4932                           
  4933                           ;nrf24l01.c: 197: nrf24l01SetRXMode(0);
  4934  015E  3000               	movlw	0
  4935  015F  3185  25E2  3181   	fcall	_nrf24l01SetRXMode
  4936                           
  4937                           ;nrf24l01.c: 200: nrf24l01SPIStart();
  4938  0162  3187  27F7  3181   	fcall	_nrf24l01SPIStart
  4939                           
  4940                           ;nrf24l01.c: 203: nrf24l01SPISend((unsigned) 0b10110000);
  4941  0165  30B0               	movlw	176
  4942  0166  318E  26B7  3181   	fcall	_nrf24l01SPISend
  4943                           
  4944                           ;nrf24l01.c: 205: nrf24l01SPISend(TXPacket->packetData.byte);
  4945  0169  0020               	movlb	0	; select bank0
  4946  016A  0859               	movf	_TXPacket,w
  4947  016B  0086               	movwf	6
  4948  016C  0187               	clrf	7
  4949  016D  0801               	movf	1,w
  4950  016E  318E  26B7  3181   	fcall	_nrf24l01SPISend
  4951                           
  4952                           ;nrf24l01.c: 208: for (i = 0; (i < strlen(TXPacket->Message)) && (i < sizeof(TXPacket->M
      +                          essage)); i++){
  4953  0171  0020               	movlb	0	; select bank0
  4954  0172  01AC               	clrf	nrf24l01SendPacket@i
  4955  0173  2984               	goto	l2356
  4956  0174                     l2352:	
  4957                           
  4958                           ;nrf24l01.c: 209: nrf24l01SPISend(TXPacket->Message[i]);
  4959  0174  082C               	movf	nrf24l01SendPacket@i,w
  4960  0175  3E01               	addlw	1
  4961  0176  0759               	addwf	_TXPacket,w
  4962  0177  00A9               	movwf	??_nrf24l01SendPacket
  4963  0178  0829               	movf	??_nrf24l01SendPacket,w
  4964  0179  0086               	movwf	6
  4965  017A  0187               	clrf	7
  4966  017B  0801               	movf	1,w
  4967  017C  318E  26B7  3181   	fcall	_nrf24l01SPISend
  4968  017F  3001               	movlw	1
  4969  0180  0020               	movlb	0	; select bank0
  4970  0181  00A9               	movwf	??_nrf24l01SendPacket
  4971  0182  0829               	movf	??_nrf24l01SendPacket,w
  4972  0183  07AC               	addwf	nrf24l01SendPacket@i,f
  4973  0184                     l2356:	
  4974  0184  0859               	movf	_TXPacket,w
  4975  0185  3E01               	addlw	1
  4976  0186  3187  278E  3181   	fcall	_strlen
  4977  0189  0020               	movlb	0	; select bank0
  4978  018A  082C               	movf	nrf24l01SendPacket@i,w
  4979  018B  00A9               	movwf	??_nrf24l01SendPacket
  4980  018C  01AA               	clrf	??_nrf24l01SendPacket+1
  4981  018D  0822               	movf	?_strlen+1,w
  4982  018E  022A               	subwf	??_nrf24l01SendPacket+1,w
  4983  018F  1D03               	skipz
  4984  0190  2993               	goto	u1235
  4985  0191  0821               	movf	?_strlen,w
  4986  0192  0229               	subwf	??_nrf24l01SendPacket,w
  4987  0193                     u1235:	
  4988  0193  1803               	skipnc
  4989  0194  2999               	goto	l2360
  4990  0195  3020               	movlw	32
  4991  0196  022C               	subwf	nrf24l01SendPacket@i,w
  4992  0197  1C03               	skipc
  4993  0198  2974               	goto	l2352
  4994  0199                     l2360:	
  4995                           
  4996                           ;nrf24l01.c: 210: };nrf24l01.c: 213: nrf24l01SPIEnd();
  4997  0199  318E  26A8  3181   	fcall	_nrf24l01SPIEnd
  4998                           
  4999                           ;nrf24l01.c: 216: nrf24l01CEHigh();
  5000  019C  318E  2696  3181   	fcall	_nrf24l01CEHigh
  5001                           
  5002                           ;nrf24l01.c: 217: _delay((unsigned long)((20)*(16000000/4000000.0)));
  5003  019F  301A               	movlw	26
  5004  01A0                     u1637:	
  5005  01A0  0B89               	decfsz	9,f
  5006  01A1  29A0               	goto	u1637
  5007  01A2  3200               	nop2
  5008                           
  5009                           ;nrf24l01.c: 218: nrf24l01CELow();
  5010  01A3  318E  2699  3181   	fcall	_nrf24l01CELow
  5011                           
  5012                           ;nrf24l01.c: 221: enableInterrupts(1);
  5013  01A6  3001               	movlw	1
  5014  01A7  318E  26AF  3181   	fcall	_enableInterrupts
  5015                           
  5016                           ;nrf24l01.c: 224: i = 0xFF;
  5017  01AA  30FF               	movlw	255
  5018  01AB  0020               	movlb	0	; select bank0
  5019  01AC  00A9               	movwf	??_nrf24l01SendPacket
  5020  01AD  0829               	movf	??_nrf24l01SendPacket,w
  5021  01AE  00AC               	movwf	nrf24l01SendPacket@i
  5022  01AF                     l2374:	
  5023                           ;nrf24l01.c: 225: while (nrf24l01.TXBusy){
  5024                           
  5025  01AF  0020               	movlb	0	; select bank0
  5026  01B0  1C5B               	btfss	_nrf24l01,0	;volatile
  5027  01B1  29C9               	goto	l2376
  5028                           
  5029                           ;nrf24l01.c: 227: if (!--i) {
  5030  01B2  3001               	movlw	1
  5031  01B3  02AC               	subwf	nrf24l01SendPacket@i,f
  5032  01B4  1D03               	btfss	3,2
  5033  01B5  29C4               	goto	l2372
  5034                           
  5035                           ;nrf24l01.c: 228: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  5036  01B6  3002               	movlw	2
  5037  01B7  0020               	movlb	0	; select bank0
  5038  01B8  00AA               	movwf	??_nrf24l01SendPacket+1
  5039  01B9  3004               	movlw	4
  5040  01BA  00A9               	movwf	??_nrf24l01SendPacket
  5041  01BB  30BA               	movlw	186
  5042  01BC                     u1647:	
  5043  01BC  0B89               	decfsz	9,f
  5044  01BD  29BC               	goto	u1647
  5045  01BE  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5046  01BF  29BC               	goto	u1647
  5047  01C0  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  5048  01C1  29BC               	goto	u1647
  5049  01C2  0000               	nop
  5050                           
  5051                           ;nrf24l01.c: 229: goto RESEND;
  5052  01C3  2943               	goto	l324
  5053  01C4                     l2372:	
  5054                           
  5055                           ;nrf24l01.c: 230: };nrf24l01.c: 232: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  5056  01C4  3085               	movlw	133
  5057  01C5                     u1657:	
  5058  01C5  0B89               	decfsz	9,f
  5059  01C6  29C5               	goto	u1657
  5060  01C7  0000               	nop
  5061  01C8  29AF               	goto	l2374
  5062  01C9                     l2376:	
  5063                           
  5064                           ;nrf24l01.c: 233: };nrf24l01.c: 237: i = 0xFF;
  5065  01C9  30FF               	movlw	255
  5066  01CA  00A9               	movwf	??_nrf24l01SendPacket
  5067  01CB  0829               	movf	??_nrf24l01SendPacket,w
  5068  01CC  00AC               	movwf	nrf24l01SendPacket@i
  5069  01CD                     l2386:	
  5070                           ;nrf24l01.c: 238: while (TXPacket->packetData.ACKRequest){
  5071                           
  5072  01CD  0020               	movlb	0	; select bank0
  5073  01CE  0859               	movf	_TXPacket,w
  5074  01CF  0086               	movwf	6
  5075  01D0  0187               	clrf	7
  5076  01D1  1D01               	btfss	1,2
  5077  01D2  0008               	return
  5078                           
  5079                           ;nrf24l01.c: 239: if (!--i) {
  5080  01D3  3001               	movlw	1
  5081  01D4  02AC               	subwf	nrf24l01SendPacket@i,f
  5082  01D5  1D03               	btfss	3,2
  5083  01D6  29ED               	goto	l2384
  5084                           
  5085                           ;nrf24l01.c: 240: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  5086  01D7  3002               	movlw	2
  5087  01D8  0020               	movlb	0	; select bank0
  5088  01D9  00AA               	movwf	??_nrf24l01SendPacket+1
  5089  01DA  3004               	movlw	4
  5090  01DB  00A9               	movwf	??_nrf24l01SendPacket
  5091  01DC  30BA               	movlw	186
  5092  01DD                     u1667:	
  5093  01DD  0B89               	decfsz	9,f
  5094  01DE  29DD               	goto	u1667
  5095  01DF  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5096  01E0  29DD               	goto	u1667
  5097  01E1  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  5098  01E2  29DD               	goto	u1667
  5099  01E3  0000               	nop
  5100                           
  5101                           ;nrf24l01.c: 241: nrf24l01ChangeTXPower(1);
  5102  01E4  3001               	movlw	1
  5103  01E5  0020               	movlb	0	; select bank0
  5104  01E6  00A4               	movwf	nrf24l01ChangeTXPower@addPower
  5105  01E7  3000               	movlw	0
  5106  01E8  00A5               	movwf	nrf24l01ChangeTXPower@addPower+1
  5107  01E9  3185  2567  3181   	fcall	_nrf24l01ChangeTXPower
  5108                           
  5109                           ;nrf24l01.c: 242: goto RESEND;
  5110  01EC  2943               	goto	l324
  5111  01ED                     l2384:	
  5112                           
  5113                           ;nrf24l01.c: 243: };nrf24l01.c: 244: _delay((unsigned long)((1000)*(16000000/4000000.0))
      +                          );
  5114  01ED  3006               	movlw	6
  5115  01EE  0020               	movlb	0	; select bank0
  5116  01EF  00A9               	movwf	??_nrf24l01SendPacket
  5117  01F0  3030               	movlw	48
  5118  01F1                     u1677:	
  5119  01F1  0B89               	decfsz	9,f
  5120  01F2  29F1               	goto	u1677
  5121  01F3  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5122  01F4  29F1               	goto	u1677
  5123  01F5  0000               	nop
  5124  01F6  29CD               	goto	l2386
  5125  01F7                     __end_of_nrf24l01SendPacket:	
  5126                           
  5127                           	psect	text13
  5128  078E                     __ptext13:	
  5129 ;; *************** function _strlen *****************
  5130 ;; Defined at:
  5131 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  5132 ;; Parameters:    Size  Location     Type
  5133 ;;  s               1    wreg     PTR const unsigned char 
  5134 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5135 ;;		 -> loop@packet(33), 
  5136 ;; Auto vars:     Size  Location     Type
  5137 ;;  s               1    7[BANK0 ] PTR const unsigned char 
  5138 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5139 ;;		 -> loop@packet(33), 
  5140 ;;  cp              1    8[BANK0 ] PTR const unsigned char 
  5141 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5142 ;;		 -> loop@packet(33), 
  5143 ;; Return value:  Size  Location     Type
  5144 ;;                  2    1[BANK0 ] unsigned int 
  5145 ;; Registers used:
  5146 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5147 ;; Tracked objects:
  5148 ;;		On entry : 0/0
  5149 ;;		On exit  : 0/0
  5150 ;;		Unchanged: 0/0
  5151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5152 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5153 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5154 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5155 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5156 ;;Total ram usage:        8 bytes
  5157 ;; Hardware stack levels used:    1
  5158 ;; Hardware stack levels required when called:    7
  5159 ;; This function calls:
  5160 ;;		Nothing
  5161 ;; This function is called by:
  5162 ;;		_nrf24l01SendPacket
  5163 ;; This function uses a non-reentrant model
  5164 ;;
  5165                           
  5166                           
  5167                           ;psect for function _strlen
  5168  078E                     _strlen:	
  5169                           
  5170                           ;incstack = 0
  5171                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5172                           ;strlen@s stored from wreg
  5173  078E  0020               	movlb	0	; select bank0
  5174  078F  00A7               	movwf	strlen@s
  5175  0790  0827               	movf	strlen@s,w
  5176  0791  00A3               	movwf	??_strlen
  5177  0792  0823               	movf	??_strlen,w
  5178  0793  00A8               	movwf	strlen@cp
  5179  0794                     l2116:	
  5180  0794  0828               	movf	strlen@cp,w
  5181  0795  0086               	movwf	6
  5182  0796  0187               	clrf	7
  5183  0797  0801               	movf	1,w
  5184  0798  1903               	btfsc	3,2
  5185  0799  2F9F               	goto	l2118
  5186  079A  3001               	movlw	1
  5187  079B  00A3               	movwf	??_strlen
  5188  079C  0823               	movf	??_strlen,w
  5189  079D  07A8               	addwf	strlen@cp,f
  5190  079E  2F94               	goto	l2116
  5191  079F                     l2118:	
  5192  079F  0827               	movf	strlen@s,w
  5193  07A0  00A3               	movwf	??_strlen
  5194  07A1  3000               	movlw	0
  5195  07A2  00A4               	movwf	??_strlen+1
  5196  07A3  09A3               	comf	??_strlen,f
  5197  07A4  09A4               	comf	??_strlen+1,f
  5198  07A5  0AA3               	incf	??_strlen,f
  5199  07A6  1903               	skipnz
  5200  07A7  0AA4               	incf	??_strlen+1,f
  5201  07A8  0828               	movf	strlen@cp,w
  5202  07A9  00A5               	movwf	??_strlen+2
  5203  07AA  3000               	movlw	0
  5204  07AB  00A6               	movwf	??_strlen+3
  5205  07AC  0823               	movf	??_strlen,w
  5206  07AD  0725               	addwf	??_strlen+2,w
  5207  07AE  00A1               	movwf	?_strlen
  5208  07AF  0824               	movf	??_strlen+1,w
  5209  07B0  3D26               	addwfc	??_strlen+3,w
  5210  07B1  00A2               	movwf	?_strlen+1
  5211  07B2  0008               	return
  5212  07B3                     __end_of_strlen:	
  5213                           
  5214                           	psect	text14
  5215  05E2                     __ptext14:	
  5216 ;; *************** function _nrf24l01SetRXMode *****************
  5217 ;; Defined at:
  5218 ;;		line 54 in file "nrf24l01.c"
  5219 ;; Parameters:    Size  Location     Type
  5220 ;;  rxMode          1    wreg     unsigned char 
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;  rxMode          1    6[BANK0 ] unsigned char 
  5223 ;;  config          1    5[BANK0 ] struct .
  5224 ;; Return value:  Size  Location     Type
  5225 ;;                  1    wreg      void 
  5226 ;; Registers used:
  5227 ;;		wreg, status,2, status,0, pclath, cstack
  5228 ;; Tracked objects:
  5229 ;;		On entry : 0/0
  5230 ;;		On exit  : 0/0
  5231 ;;		Unchanged: 0/0
  5232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5234 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5235 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5236 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5237 ;;Total ram usage:        3 bytes
  5238 ;; Hardware stack levels used:    1
  5239 ;; Hardware stack levels required when called:   10
  5240 ;; This function calls:
  5241 ;;		_nrf24l01CEHigh
  5242 ;;		_nrf24l01CELow
  5243 ;;		_nrf24l01Send
  5244 ;; This function is called by:
  5245 ;;		_nrf24l01SendPacket
  5246 ;;		_checkRxData
  5247 ;; This function uses a non-reentrant model
  5248 ;;
  5249                           
  5250                           
  5251                           ;psect for function _nrf24l01SetRXMode
  5252  05E2                     _nrf24l01SetRXMode:	
  5253                           
  5254                           ;incstack = 0
  5255                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  5256                           ;nrf24l01SetRXMode@rxMode stored from wreg
  5257  05E2  0020               	movlb	0	; select bank0
  5258  05E3  00A6               	movwf	nrf24l01SetRXMode@rxMode
  5259                           
  5260                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  5261  05E4  01A1               	clrf	nrf24l01Send@data
  5262  05E5  3000               	movlw	0
  5263  05E6  318F  27E0  3185   	fcall	_nrf24l01Send
  5264  05E9  0020               	movlb	0	; select bank0
  5265  05EA  00A4               	movwf	??_nrf24l01SetRXMode
  5266  05EB  0824               	movf	??_nrf24l01SetRXMode,w
  5267  05EC  00A5               	movwf	nrf24l01SetRXMode@config
  5268                           
  5269                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  5270  05ED  0825               	movf	nrf24l01SetRXMode@config,w
  5271  05EE  3901               	andlw	1
  5272  05EF  0626               	xorwf	nrf24l01SetRXMode@rxMode,w
  5273  05F0  1903               	skipnz
  5274  05F1  2E16               	goto	l2030
  5275                           
  5276                           ;nrf24l01.c: 65: nrf24l01CELow();
  5277  05F2  318E  2699  3185   	fcall	_nrf24l01CELow
  5278                           
  5279                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5280  05F5  30A0               	movlw	160
  5281  05F6                     u1687:	
  5282  05F6  3200               	nop2
  5283  05F7  0B89               	decfsz	9,f
  5284  05F8  2DF6               	goto	u1687
  5285                           
  5286                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  5287  05F9  0020               	movlb	0	; select bank0
  5288  05FA  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5289  05FB  3901               	andlw	1
  5290  05FC  1025               	bcf	nrf24l01SetRXMode@config,0
  5291  05FD  1D03               	skipz
  5292  05FE  1425               	bsf	nrf24l01SetRXMode@config,0
  5293                           
  5294                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  5295  05FF  0825               	movf	nrf24l01SetRXMode@config,w
  5296  0600  00A4               	movwf	??_nrf24l01SetRXMode
  5297  0601  0824               	movf	??_nrf24l01SetRXMode,w
  5298  0602  00A1               	movwf	nrf24l01Send@data
  5299  0603  3020               	movlw	32
  5300  0604  318F  27E0  3185   	fcall	_nrf24l01Send
  5301                           
  5302                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5303  0607  30A0               	movlw	160
  5304  0608                     u1697:	
  5305  0608  3200               	nop2
  5306  0609  0B89               	decfsz	9,f
  5307  060A  2E08               	goto	u1697
  5308                           
  5309                           ;nrf24l01.c: 76: if (rxMode){
  5310  060B  0020               	movlb	0	; select bank0
  5311  060C  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5312  060D  1903               	btfsc	3,2
  5313  060E  2E16               	goto	l2030
  5314                           
  5315                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  5316  060F  318E  2696  3185   	fcall	_nrf24l01CEHigh
  5317                           
  5318                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5319  0612  30A0               	movlw	160
  5320  0613                     u1707:	
  5321  0613  3200               	nop2
  5322  0614  0B89               	decfsz	9,f
  5323  0615  2E13               	goto	u1707
  5324  0616                     l2030:	
  5325                           
  5326                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  5327  0616  0020               	movlb	0	; select bank0
  5328  0617  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5329  0618  3901               	andlw	1
  5330  0619  115B               	bcf	_nrf24l01,2	;volatile
  5331  061A  1D03               	skipz
  5332  061B  155B               	bsf	_nrf24l01,2	;volatile
  5333  061C  0008               	return
  5334  061D                     __end_of_nrf24l01SetRXMode:	
  5335                           
  5336                           	psect	text15
  5337  039C                     __ptext15:	
  5338 ;; *************** function _getADCValue *****************
  5339 ;; Defined at:
  5340 ;;		line 23 in file "main.c"
  5341 ;; Parameters:    Size  Location     Type
  5342 ;;  channel         1    wreg     unsigned char 
  5343 ;;  divider         4   15[BANK0 ] unsigned long 
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;  channel         1   23[BANK0 ] unsigned char 
  5346 ;;  adcSum          4   25[BANK0 ] unsigned long 
  5347 ;;  adcLoop         1   24[BANK0 ] unsigned char 
  5348 ;; Return value:  Size  Location     Type
  5349 ;;                  4   15[BANK0 ] unsigned long 
  5350 ;; Registers used:
  5351 ;;		wreg, status,2, status,0, pclath, cstack
  5352 ;; Tracked objects:
  5353 ;;		On entry : 0/0
  5354 ;;		On exit  : 0/0
  5355 ;;		Unchanged: 0/0
  5356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5357 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5358 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5359 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5360 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5361 ;;Total ram usage:       14 bytes
  5362 ;; Hardware stack levels used:    1
  5363 ;; Hardware stack levels required when called:    8
  5364 ;; This function calls:
  5365 ;;		___lldiv
  5366 ;;		___lmul
  5367 ;; This function is called by:
  5368 ;;		_loop
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           
  5373                           ;psect for function _getADCValue
  5374  039C                     _getADCValue:	
  5375                           
  5376                           ;incstack = 0
  5377                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  5378                           ;getADCValue@channel stored from wreg
  5379  039C  0020               	movlb	0	; select bank0
  5380  039D  00B7               	movwf	getADCValue@channel
  5381                           
  5382                           ;main.c: 25: unsigned long adcSum = 0;
  5383  039E  3000               	movlw	0
  5384  039F  00BC               	movwf	getADCValue@adcSum+3
  5385  03A0  3000               	movlw	0
  5386  03A1  00BB               	movwf	getADCValue@adcSum+2
  5387  03A2  3000               	movlw	0
  5388  03A3  00BA               	movwf	getADCValue@adcSum+1
  5389  03A4  3000               	movlw	0
  5390  03A5  00B9               	movwf	getADCValue@adcSum
  5391                           
  5392                           ;main.c: 26: unsigned char adcLoop = 255;
  5393  03A6  30FF               	movlw	255
  5394  03A7  00B3               	movwf	??_getADCValue
  5395  03A8  0833               	movf	??_getADCValue,w
  5396  03A9  00B8               	movwf	getADCValue@adcLoop
  5397                           
  5398                           ;main.c: 28: ADCON0bits.CHS = channel;
  5399  03AA  0837               	movf	getADCValue@channel,w
  5400  03AB  00B3               	movwf	??_getADCValue
  5401  03AC  0DB3               	rlf	??_getADCValue,f
  5402  03AD  0DB3               	rlf	??_getADCValue,f
  5403  03AE  0021               	movlb	1	; select bank1
  5404  03AF  081D               	movf	29,w	;volatile
  5405  03B0  0020               	movlb	0	; select bank0
  5406  03B1  0633               	xorwf	??_getADCValue,w
  5407  03B2  3903               	andlw	-253
  5408  03B3  0633               	xorwf	??_getADCValue,w
  5409  03B4  0021               	movlb	1	; select bank1
  5410  03B5  009D               	movwf	29	;volatile
  5411                           
  5412                           ;main.c: 29: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5413  03B6  30A0               	movlw	160
  5414  03B7                     u1717:	
  5415  03B7  3200               	nop2
  5416  03B8  0B89               	decfsz	9,f
  5417  03B9  2BB7               	goto	u1717
  5418  03BA                     l2300:	
  5419                           ;main.c: 31: while (--adcLoop){
  5420                           
  5421  03BA  3001               	movlw	1
  5422  03BB  0020               	movlb	0	; select bank0
  5423  03BC  02B8               	subwf	getADCValue@adcLoop,f
  5424  03BD  1903               	btfsc	3,2
  5425  03BE  2BE4               	goto	l2302
  5426                           
  5427                           ;main.c: 33: ADCON0bits.ADGO = 1;
  5428  03BF  0021               	movlb	1	; select bank1
  5429  03C0  149D               	bsf	29,1	;volatile
  5430  03C1                     l214:	
  5431                           ;main.c: 35: while (ADCON0bits.ADGO){
  5432                           
  5433  03C1  0021               	movlb	1	; select bank1
  5434  03C2  1C9D               	btfss	29,1	;volatile
  5435  03C3  2BC6               	goto	l2298
  5436                           
  5437                           ;main.c: 36: __nop();
  5438  03C4  0000               	nop
  5439  03C5  2BC1               	goto	l214
  5440  03C6                     l2298:	
  5441                           
  5442                           ;main.c: 37: };main.c: 39: adcSum+= ADRESL;
  5443  03C6  081B               	movf	27,w	;volatile
  5444  03C7  0020               	movlb	0	; select bank0
  5445  03C8  00B3               	movwf	??_getADCValue
  5446  03C9  01B4               	clrf	??_getADCValue+1
  5447  03CA  01B5               	clrf	??_getADCValue+2
  5448  03CB  01B6               	clrf	??_getADCValue+3
  5449  03CC  0833               	movf	??_getADCValue,w
  5450  03CD  07B9               	addwf	getADCValue@adcSum,f
  5451  03CE  0834               	movf	??_getADCValue+1,w
  5452  03CF  3DBA               	addwfc	getADCValue@adcSum+1,f
  5453  03D0  0835               	movf	??_getADCValue+2,w
  5454  03D1  3DBB               	addwfc	getADCValue@adcSum+2,f
  5455  03D2  0836               	movf	??_getADCValue+3,w
  5456  03D3  3DBC               	addwfc	getADCValue@adcSum+3,f
  5457                           
  5458                           ;main.c: 40: adcSum+= (unsigned) (ADRESH << 8);
  5459  03D4  0021               	movlb	1	; select bank1
  5460  03D5  081C               	movf	28,w	;volatile
  5461  03D6  0020               	movlb	0	; select bank0
  5462  03D7  00B3               	movwf	??_getADCValue
  5463  03D8  01B4               	clrf	??_getADCValue+1
  5464  03D9  0833               	movf	??_getADCValue,w
  5465  03DA  00B4               	movwf	??_getADCValue+1
  5466  03DB  01B3               	clrf	??_getADCValue
  5467  03DC  0833               	movf	??_getADCValue,w
  5468  03DD  07B9               	addwf	getADCValue@adcSum,f
  5469  03DE  0834               	movf	??_getADCValue+1,w
  5470  03DF  3DBA               	addwfc	getADCValue@adcSum+1,f
  5471  03E0  3000               	movlw	0
  5472  03E1  3DBB               	addwfc	getADCValue@adcSum+2,f
  5473  03E2  3DBC               	addwfc	getADCValue@adcSum+3,f
  5474  03E3  2BBA               	goto	l2300
  5475  03E4                     l2302:	
  5476                           
  5477                           ;main.c: 41: };main.c: 43: adcSum*= 100;
  5478  03E4  3000               	movlw	0
  5479  03E5  00A4               	movwf	___lmul@multiplier+3
  5480  03E6  3000               	movlw	0
  5481  03E7  00A3               	movwf	___lmul@multiplier+2
  5482  03E8  3000               	movlw	0
  5483  03E9  00A2               	movwf	___lmul@multiplier+1
  5484  03EA  3064               	movlw	100
  5485  03EB  00A1               	movwf	___lmul@multiplier
  5486  03EC  083C               	movf	getADCValue@adcSum+3,w
  5487  03ED  00A8               	movwf	___lmul@multiplicand+3
  5488  03EE  083B               	movf	getADCValue@adcSum+2,w
  5489  03EF  00A7               	movwf	___lmul@multiplicand+2
  5490  03F0  083A               	movf	getADCValue@adcSum+1,w
  5491  03F1  00A6               	movwf	___lmul@multiplicand+1
  5492  03F2  0839               	movf	getADCValue@adcSum,w
  5493  03F3  00A5               	movwf	___lmul@multiplicand
  5494  03F4  3186  26BC  3183   	fcall	___lmul
  5495  03F7  0020               	movlb	0	; select bank0
  5496  03F8  0824               	movf	?___lmul+3,w
  5497  03F9  00BC               	movwf	getADCValue@adcSum+3
  5498  03FA  0823               	movf	?___lmul+2,w
  5499  03FB  00BB               	movwf	getADCValue@adcSum+2
  5500  03FC  0822               	movf	?___lmul+1,w
  5501  03FD  00BA               	movwf	getADCValue@adcSum+1
  5502  03FE  0821               	movf	?___lmul,w
  5503  03FF  00B9               	movwf	getADCValue@adcSum
  5504                           
  5505                           ;main.c: 44: adcSum/= divider;
  5506  0400  0832               	movf	getADCValue@divider+3,w
  5507  0401  00A4               	movwf	___lldiv@divisor+3
  5508  0402  0831               	movf	getADCValue@divider+2,w
  5509  0403  00A3               	movwf	___lldiv@divisor+2
  5510  0404  0830               	movf	getADCValue@divider+1,w
  5511  0405  00A2               	movwf	___lldiv@divisor+1
  5512  0406  082F               	movf	getADCValue@divider,w
  5513  0407  00A1               	movwf	___lldiv@divisor
  5514  0408  083C               	movf	getADCValue@adcSum+3,w
  5515  0409  00A8               	movwf	___lldiv@dividend+3
  5516  040A  083B               	movf	getADCValue@adcSum+2,w
  5517  040B  00A7               	movwf	___lldiv@dividend+2
  5518  040C  083A               	movf	getADCValue@adcSum+1,w
  5519  040D  00A6               	movwf	___lldiv@dividend+1
  5520  040E  0839               	movf	getADCValue@adcSum,w
  5521  040F  00A5               	movwf	___lldiv@dividend
  5522  0410  3184  24D1         	fcall	___lldiv
  5523  0412  0020               	movlb	0	; select bank0
  5524  0413  0824               	movf	?___lldiv+3,w
  5525  0414  00BC               	movwf	getADCValue@adcSum+3
  5526  0415  0823               	movf	?___lldiv+2,w
  5527  0416  00BB               	movwf	getADCValue@adcSum+2
  5528  0417  0822               	movf	?___lldiv+1,w
  5529  0418  00BA               	movwf	getADCValue@adcSum+1
  5530  0419  0821               	movf	?___lldiv,w
  5531  041A  00B9               	movwf	getADCValue@adcSum
  5532                           
  5533                           ;main.c: 46: return adcSum;
  5534  041B  083C               	movf	getADCValue@adcSum+3,w
  5535  041C  00B2               	movwf	?_getADCValue+3
  5536  041D  083B               	movf	getADCValue@adcSum+2,w
  5537  041E  00B1               	movwf	?_getADCValue+2
  5538  041F  083A               	movf	getADCValue@adcSum+1,w
  5539  0420  00B0               	movwf	?_getADCValue+1
  5540  0421  0839               	movf	getADCValue@adcSum,w
  5541  0422  00AF               	movwf	?_getADCValue
  5542  0423  0008               	return
  5543  0424                     __end_of_getADCValue:	
  5544                           
  5545                           	psect	text16
  5546  06BC                     __ptext16:	
  5547 ;; *************** function ___lmul *****************
  5548 ;; Defined at:
  5549 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
  5550 ;; Parameters:    Size  Location     Type
  5551 ;;  multiplier      4    1[BANK0 ] unsigned long 
  5552 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;  product         4    9[BANK0 ] unsigned long 
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  4    1[BANK0 ] unsigned long 
  5557 ;; Registers used:
  5558 ;;		wreg, status,2, status,0
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 0/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5564 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5565 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5567 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5568 ;;Total ram usage:       12 bytes
  5569 ;; Hardware stack levels used:    1
  5570 ;; Hardware stack levels required when called:    7
  5571 ;; This function calls:
  5572 ;;		Nothing
  5573 ;; This function is called by:
  5574 ;;		_getADCValue
  5575 ;; This function uses a non-reentrant model
  5576 ;;
  5577                           
  5578                           
  5579                           ;psect for function ___lmul
  5580  06BC                     ___lmul:	
  5581                           
  5582                           ;incstack = 0
  5583                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5584  06BC  3000               	movlw	0
  5585  06BD  0020               	movlb	0	; select bank0
  5586  06BE  00AC               	movwf	___lmul@product+3
  5587  06BF  3000               	movlw	0
  5588  06C0  00AB               	movwf	___lmul@product+2
  5589  06C1  3000               	movlw	0
  5590  06C2  00AA               	movwf	___lmul@product+1
  5591  06C3  3000               	movlw	0
  5592  06C4  00A9               	movwf	___lmul@product
  5593  06C5                     l2138:	
  5594  06C5  1C21               	btfss	___lmul@multiplier,0
  5595  06C6  2ECF               	goto	l2142
  5596  06C7  0825               	movf	___lmul@multiplicand,w
  5597  06C8  07A9               	addwf	___lmul@product,f
  5598  06C9  0826               	movf	___lmul@multiplicand+1,w
  5599  06CA  3DAA               	addwfc	___lmul@product+1,f
  5600  06CB  0827               	movf	___lmul@multiplicand+2,w
  5601  06CC  3DAB               	addwfc	___lmul@product+2,f
  5602  06CD  0828               	movf	___lmul@multiplicand+3,w
  5603  06CE  3DAC               	addwfc	___lmul@product+3,f
  5604  06CF                     l2142:	
  5605  06CF  3001               	movlw	1
  5606  06D0                     u1085:	
  5607  06D0  35A5               	lslf	___lmul@multiplicand,f
  5608  06D1  0DA6               	rlf	___lmul@multiplicand+1,f
  5609  06D2  0DA7               	rlf	___lmul@multiplicand+2,f
  5610  06D3  0DA8               	rlf	___lmul@multiplicand+3,f
  5611  06D4  0B89               	decfsz	9,f
  5612  06D5  2ED0               	goto	u1085
  5613  06D6  3001               	movlw	1
  5614  06D7                     u1095:	
  5615  06D7  36A4               	lsrf	___lmul@multiplier+3,f
  5616  06D8  0CA3               	rrf	___lmul@multiplier+2,f
  5617  06D9  0CA2               	rrf	___lmul@multiplier+1,f
  5618  06DA  0CA1               	rrf	___lmul@multiplier,f
  5619  06DB  0B89               	decfsz	9,f
  5620  06DC  2ED7               	goto	u1095
  5621  06DD  0824               	movf	___lmul@multiplier+3,w
  5622  06DE  0423               	iorwf	___lmul@multiplier+2,w
  5623  06DF  0422               	iorwf	___lmul@multiplier+1,w
  5624  06E0  0421               	iorwf	___lmul@multiplier,w
  5625  06E1  1D03               	skipz
  5626  06E2  2EC5               	goto	l2138
  5627  06E3  082C               	movf	___lmul@product+3,w
  5628  06E4  00A4               	movwf	?___lmul+3
  5629  06E5  082B               	movf	___lmul@product+2,w
  5630  06E6  00A3               	movwf	?___lmul+2
  5631  06E7  082A               	movf	___lmul@product+1,w
  5632  06E8  00A2               	movwf	?___lmul+1
  5633  06E9  0829               	movf	___lmul@product,w
  5634  06EA  00A1               	movwf	?___lmul
  5635  06EB  0008               	return
  5636  06EC                     __end_of___lmul:	
  5637                           
  5638                           	psect	text17
  5639  04D1                     __ptext17:	
  5640 ;; *************** function ___lldiv *****************
  5641 ;; Defined at:
  5642 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  5643 ;; Parameters:    Size  Location     Type
  5644 ;;  divisor         4    1[BANK0 ] unsigned long 
  5645 ;;  dividend        4    5[BANK0 ] unsigned long 
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;  quotient        4   10[BANK0 ] unsigned long 
  5648 ;;  counter         1   14[BANK0 ] unsigned char 
  5649 ;; Return value:  Size  Location     Type
  5650 ;;                  4    1[BANK0 ] unsigned long 
  5651 ;; Registers used:
  5652 ;;		wreg, status,2, status,0
  5653 ;; Tracked objects:
  5654 ;;		On entry : 0/0
  5655 ;;		On exit  : 0/0
  5656 ;;		Unchanged: 0/0
  5657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5658 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5659 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5660 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5661 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5662 ;;Total ram usage:       14 bytes
  5663 ;; Hardware stack levels used:    1
  5664 ;; Hardware stack levels required when called:    7
  5665 ;; This function calls:
  5666 ;;		Nothing
  5667 ;; This function is called by:
  5668 ;;		_getADCValue
  5669 ;;		_ultoa
  5670 ;; This function uses a non-reentrant model
  5671 ;;
  5672                           
  5673                           
  5674                           ;psect for function ___lldiv
  5675  04D1                     ___lldiv:	
  5676                           
  5677                           ;incstack = 0
  5678                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5679  04D1  3000               	movlw	0
  5680  04D2  0020               	movlb	0	; select bank0
  5681  04D3  00AD               	movwf	___lldiv@quotient+3
  5682  04D4  3000               	movlw	0
  5683  04D5  00AC               	movwf	___lldiv@quotient+2
  5684  04D6  3000               	movlw	0
  5685  04D7  00AB               	movwf	___lldiv@quotient+1
  5686  04D8  3000               	movlw	0
  5687  04D9  00AA               	movwf	___lldiv@quotient
  5688  04DA  0824               	movf	___lldiv@divisor+3,w
  5689  04DB  0423               	iorwf	___lldiv@divisor+2,w
  5690  04DC  0422               	iorwf	___lldiv@divisor+1,w
  5691  04DD  0421               	iorwf	___lldiv@divisor,w
  5692  04DE  1903               	skipnz
  5693  04DF  2D1B               	goto	l1916
  5694  04E0  01AE               	clrf	___lldiv@counter
  5695  04E1  0AAE               	incf	___lldiv@counter,f
  5696  04E2                     l1902:	
  5697  04E2  1BA4               	btfsc	___lldiv@divisor+3,7
  5698  04E3  2CF0               	goto	l1904
  5699  04E4  3001               	movlw	1
  5700  04E5                     u765:	
  5701  04E5  35A1               	lslf	___lldiv@divisor,f
  5702  04E6  0DA2               	rlf	___lldiv@divisor+1,f
  5703  04E7  0DA3               	rlf	___lldiv@divisor+2,f
  5704  04E8  0DA4               	rlf	___lldiv@divisor+3,f
  5705  04E9  0B89               	decfsz	9,f
  5706  04EA  2CE5               	goto	u765
  5707  04EB  3001               	movlw	1
  5708  04EC  00A9               	movwf	??___lldiv
  5709  04ED  0829               	movf	??___lldiv,w
  5710  04EE  07AE               	addwf	___lldiv@counter,f
  5711  04EF  2CE2               	goto	l1902
  5712  04F0                     l1904:	
  5713  04F0  3001               	movlw	1
  5714  04F1                     u785:	
  5715  04F1  35AA               	lslf	___lldiv@quotient,f
  5716  04F2  0DAB               	rlf	___lldiv@quotient+1,f
  5717  04F3  0DAC               	rlf	___lldiv@quotient+2,f
  5718  04F4  0DAD               	rlf	___lldiv@quotient+3,f
  5719  04F5  0B89               	decfsz	9,f
  5720  04F6  2CF1               	goto	u785
  5721  04F7  0824               	movf	___lldiv@divisor+3,w
  5722  04F8  0228               	subwf	___lldiv@dividend+3,w
  5723  04F9  1D03               	skipz
  5724  04FA  2D05               	goto	u795
  5725  04FB  0823               	movf	___lldiv@divisor+2,w
  5726  04FC  0227               	subwf	___lldiv@dividend+2,w
  5727  04FD  1D03               	skipz
  5728  04FE  2D05               	goto	u795
  5729  04FF  0822               	movf	___lldiv@divisor+1,w
  5730  0500  0226               	subwf	___lldiv@dividend+1,w
  5731  0501  1D03               	skipz
  5732  0502  2D05               	goto	u795
  5733  0503  0821               	movf	___lldiv@divisor,w
  5734  0504  0225               	subwf	___lldiv@dividend,w
  5735  0505                     u795:	
  5736  0505  1C03               	skipc
  5737  0506  2D10               	goto	l1912
  5738  0507  0821               	movf	___lldiv@divisor,w
  5739  0508  02A5               	subwf	___lldiv@dividend,f
  5740  0509  0822               	movf	___lldiv@divisor+1,w
  5741  050A  3BA6               	subwfb	___lldiv@dividend+1,f
  5742  050B  0823               	movf	___lldiv@divisor+2,w
  5743  050C  3BA7               	subwfb	___lldiv@dividend+2,f
  5744  050D  0824               	movf	___lldiv@divisor+3,w
  5745  050E  3BA8               	subwfb	___lldiv@dividend+3,f
  5746  050F  142A               	bsf	___lldiv@quotient,0
  5747  0510                     l1912:	
  5748  0510  3001               	movlw	1
  5749  0511                     u805:	
  5750  0511  36A4               	lsrf	___lldiv@divisor+3,f
  5751  0512  0CA3               	rrf	___lldiv@divisor+2,f
  5752  0513  0CA2               	rrf	___lldiv@divisor+1,f
  5753  0514  0CA1               	rrf	___lldiv@divisor,f
  5754  0515  0B89               	decfsz	9,f
  5755  0516  2D11               	goto	u805
  5756  0517  3001               	movlw	1
  5757  0518  02AE               	subwf	___lldiv@counter,f
  5758  0519  1D03               	btfss	3,2
  5759  051A  2CF0               	goto	l1904
  5760  051B                     l1916:	
  5761  051B  082D               	movf	___lldiv@quotient+3,w
  5762  051C  00A4               	movwf	?___lldiv+3
  5763  051D  082C               	movf	___lldiv@quotient+2,w
  5764  051E  00A3               	movwf	?___lldiv+2
  5765  051F  082B               	movf	___lldiv@quotient+1,w
  5766  0520  00A2               	movwf	?___lldiv+1
  5767  0521  082A               	movf	___lldiv@quotient,w
  5768  0522  00A1               	movwf	?___lldiv
  5769  0523  0008               	return
  5770  0524                     __end_of___lldiv:	
  5771                           
  5772                           	psect	text18
  5773  0ED6                     __ptext18:	
  5774 ;; *************** function _checkTXPower *****************
  5775 ;; Defined at:
  5776 ;;		line 92 in file "main.c"
  5777 ;; Parameters:    Size  Location     Type
  5778 ;;		None
  5779 ;; Auto vars:     Size  Location     Type
  5780 ;;  rxPacket        1    9[BANK0 ] PTR struct .
  5781 ;;		 -> RXPacket(33), 
  5782 ;; Return value:  Size  Location     Type
  5783 ;;                  1    wreg      void 
  5784 ;; Registers used:
  5785 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5786 ;; Tracked objects:
  5787 ;;		On entry : 0/0
  5788 ;;		On exit  : 0/0
  5789 ;;		Unchanged: 0/0
  5790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5792 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5793 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5794 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5795 ;;Total ram usage:        2 bytes
  5796 ;; Hardware stack levels used:    1
  5797 ;; Hardware stack levels required when called:   11
  5798 ;; This function calls:
  5799 ;;		_nrf24l01ChangeTXPower
  5800 ;;		_nrf24l01GetRXPacket
  5801 ;; This function is called by:
  5802 ;;		_loop
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           
  5807                           ;psect for function _checkTXPower
  5808  0ED6                     _checkTXPower:	
  5809                           
  5810                           ;main.c: 93: nrf24l01Packet_t * rxPacket = nrf24l01GetRXPacket();
  5811                           
  5812                           ;incstack = 0
  5813                           ; Regs used in _checkTXPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5814  0ED6  3180  2002  318E   	fcall	_nrf24l01GetRXPacket
  5815  0ED9  0020               	movlb	0	; select bank0
  5816  0EDA  00A8               	movwf	??_checkTXPower
  5817  0EDB  0828               	movf	??_checkTXPower,w
  5818  0EDC  00A9               	movwf	checkTXPower@rxPacket
  5819                           
  5820                           ;main.c: 95: if (rxPacket->packetData.ACKRPD){
  5821  0EDD  0829               	movf	checkTXPower@rxPacket,w
  5822  0EDE  0086               	movwf	6
  5823  0EDF  3001               	movlw	1	; select bank2/3
  5824  0EE0  0087               	movwf	7
  5825  0EE1  1C81               	btfss	1,1
  5826  0EE2  0008               	return
  5827                           
  5828                           ;main.c: 96: nrf24l01ChangeTXPower(-1);
  5829  0EE3  30FF               	movlw	255
  5830  0EE4  00A4               	movwf	nrf24l01ChangeTXPower@addPower
  5831  0EE5  30FF               	movlw	255
  5832  0EE6  00A5               	movwf	nrf24l01ChangeTXPower@addPower+1
  5833  0EE7  3185  2567         	fcall	_nrf24l01ChangeTXPower
  5834  0EE9  0008               	return
  5835  0EEA                     __end_of_checkTXPower:	
  5836                           
  5837                           	psect	text19
  5838  0002                     __ptext19:	
  5839 ;; *************** function _nrf24l01GetRXPacket *****************
  5840 ;; Defined at:
  5841 ;;		line 129 in file "nrf24l01.c"
  5842 ;; Parameters:    Size  Location     Type
  5843 ;;		None
  5844 ;; Auto vars:     Size  Location     Type
  5845 ;;		None
  5846 ;; Return value:  Size  Location     Type
  5847 ;;                  1    wreg      PTR struct .
  5848 ;; Registers used:
  5849 ;;		wreg
  5850 ;; Tracked objects:
  5851 ;;		On entry : 0/0
  5852 ;;		On exit  : 0/0
  5853 ;;		Unchanged: 0/0
  5854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5859 ;;Total ram usage:        0 bytes
  5860 ;; Hardware stack levels used:    1
  5861 ;; Hardware stack levels required when called:    7
  5862 ;; This function calls:
  5863 ;;		Nothing
  5864 ;; This function is called by:
  5865 ;;		_checkTXPower
  5866 ;; This function uses a non-reentrant model
  5867 ;;
  5868                           
  5869                           
  5870                           ;psect for function _nrf24l01GetRXPacket
  5871  0002                     _nrf24l01GetRXPacket:	
  5872                           
  5873                           ;nrf24l01.c: 130: return &RXPacket;
  5874                           
  5875                           ;incstack = 0
  5876                           ; Regs used in _nrf24l01GetRXPacket: [wreg]
  5877  0002  3040               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  5878  0003  0008               	return
  5879  0004                     __end_of_nrf24l01GetRXPacket:	
  5880                           
  5881                           	psect	text20
  5882  0567                     __ptext20:	
  5883 ;; *************** function _nrf24l01ChangeTXPower *****************
  5884 ;; Defined at:
  5885 ;;		line 33 in file "nrf24l01.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;  addPower        2    4[BANK0 ] int 
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;  rfSetup         1    7[BANK0 ] struct .
  5890 ;; Return value:  Size  Location     Type
  5891 ;;                  1    wreg      void 
  5892 ;; Registers used:
  5893 ;;		wreg, status,2, status,0, pclath, cstack
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5899 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5900 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5901 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5902 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5903 ;;Total ram usage:        4 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; Hardware stack levels required when called:   10
  5906 ;; This function calls:
  5907 ;;		_nrf24l01Send
  5908 ;; This function is called by:
  5909 ;;		_checkTXPower
  5910 ;;		_nrf24l01SendPacket
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           
  5915                           ;psect for function _nrf24l01ChangeTXPower
  5916  0567                     _nrf24l01ChangeTXPower:	
  5917                           
  5918                           ;nrf24l01.c: 35: n_RF_SETUP_t rfSetup;;nrf24l01.c: 36: rfSetup.byte = nrf24l01Send((unsi
      +                          gned) 0b00000000 | (unsigned) 0x06, 0);
  5919                           
  5920                           ;incstack = 0
  5921                           ; Regs used in _nrf24l01ChangeTXPower: [wreg+status,2+status,0+pclath+cstack]
  5922  0567  0020               	movlb	0	; select bank0
  5923  0568  01A1               	clrf	nrf24l01Send@data
  5924  0569  3006               	movlw	6
  5925  056A  318F  27E0  3185   	fcall	_nrf24l01Send
  5926  056D  0020               	movlb	0	; select bank0
  5927  056E  00A6               	movwf	??_nrf24l01ChangeTXPower
  5928  056F  0826               	movf	??_nrf24l01ChangeTXPower,w
  5929  0570  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  5930                           
  5931                           ;nrf24l01.c: 38: if (addPower > 0){
  5932  0571  0825               	movf	nrf24l01ChangeTXPower@addPower+1,w
  5933  0572  3A80               	xorlw	128
  5934  0573  00A6               	movwf	??_nrf24l01ChangeTXPower
  5935  0574  3080               	movlw	128
  5936  0575  0226               	subwf	??_nrf24l01ChangeTXPower,w
  5937  0576  1D03               	skipz
  5938  0577  2D7A               	goto	u965
  5939  0578  3001               	movlw	1
  5940  0579  0224               	subwf	nrf24l01ChangeTXPower@addPower,w
  5941  057A                     u965:	
  5942  057A  1C03               	skipc
  5943  057B  2D8C               	goto	l2090
  5944                           
  5945                           ;nrf24l01.c: 39: if (rfSetup.RF_PWR < 3){
  5946  057C  0020               	movlb	0	; select bank0
  5947  057D  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  5948  057E  3903               	andlw	3
  5949  057F  3A03               	xorlw	3
  5950  0580  1903               	skipnz
  5951  0581  2D8C               	goto	l2090
  5952                           
  5953                           ;nrf24l01.c: 40: rfSetup.RF_PWR++;
  5954  0582  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  5955  0583  3903               	andlw	3
  5956  0584  00A6               	movwf	??_nrf24l01ChangeTXPower
  5957  0585  0AA6               	incf	??_nrf24l01ChangeTXPower,f
  5958  0586  0DA6               	rlf	??_nrf24l01ChangeTXPower,f
  5959  0587  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  5960  0588  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  5961  0589  39F9               	andlw	-7
  5962  058A  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  5963  058B  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  5964  058C                     l2090:	
  5965                           
  5966                           ;nrf24l01.c: 41: };nrf24l01.c: 42: };nrf24l01.c: 44: if (addPower < 0){
  5967  058C  0020               	movlb	0	; select bank0
  5968  058D  1FA5               	btfss	nrf24l01ChangeTXPower@addPower+1,7
  5969  058E  2D9E               	goto	l2096
  5970                           
  5971                           ;nrf24l01.c: 45: if (rfSetup.RF_PWR > 0){
  5972  058F  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  5973  0590  3903               	andlw	3
  5974  0591  3A00               	xorlw	0
  5975  0592  1903               	skipnz
  5976  0593  2D9E               	goto	l2096
  5977                           
  5978                           ;nrf24l01.c: 46: rfSetup.RF_PWR--;
  5979  0594  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  5980  0595  3903               	andlw	3
  5981  0596  00A6               	movwf	??_nrf24l01ChangeTXPower
  5982  0597  03A6               	decf	??_nrf24l01ChangeTXPower,f
  5983  0598  0DA6               	rlf	??_nrf24l01ChangeTXPower,f
  5984  0599  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  5985  059A  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  5986  059B  39F9               	andlw	-7
  5987  059C  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  5988  059D  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  5989  059E                     l2096:	
  5990                           
  5991                           ;nrf24l01.c: 47: };nrf24l01.c: 48: };nrf24l01.c: 50: nrf24l01Send((unsigned) 0b00100000 
      +                          | (unsigned) 0x06, rfSetup.byte);
  5992  059E  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  5993  059F  00A6               	movwf	??_nrf24l01ChangeTXPower
  5994  05A0  0826               	movf	??_nrf24l01ChangeTXPower,w
  5995  05A1  00A1               	movwf	nrf24l01Send@data
  5996  05A2  3026               	movlw	38
  5997  05A3  318F  27E0         	fcall	_nrf24l01Send
  5998  05A5  0008               	return
  5999  05A6                     __end_of_nrf24l01ChangeTXPower:	
  6000                           
  6001                           	psect	text21
  6002  0FE0                     __ptext21:	
  6003 ;; *************** function _nrf24l01Send *****************
  6004 ;; Defined at:
  6005 ;;		line 9 in file "nrf24l01.c"
  6006 ;; Parameters:    Size  Location     Type
  6007 ;;  command         1    wreg     unsigned char 
  6008 ;;  data            1    1[BANK0 ] unsigned char 
  6009 ;; Auto vars:     Size  Location     Type
  6010 ;;  command         1    3[BANK0 ] unsigned char 
  6011 ;; Return value:  Size  Location     Type
  6012 ;;                  1    wreg      unsigned char 
  6013 ;; Registers used:
  6014 ;;		wreg, status,2, status,0, pclath, cstack
  6015 ;; Tracked objects:
  6016 ;;		On entry : 0/0
  6017 ;;		On exit  : 0/0
  6018 ;;		Unchanged: 0/0
  6019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6020 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6021 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6022 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6023 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6024 ;;Total ram usage:        3 bytes
  6025 ;; Hardware stack levels used:    1
  6026 ;; Hardware stack levels required when called:    9
  6027 ;; This function calls:
  6028 ;;		_enableInterrupts
  6029 ;;		_nrf24l01SPIEnd
  6030 ;;		_nrf24l01SPISend
  6031 ;;		_nrf24l01SPIStart
  6032 ;; This function is called by:
  6033 ;;		_loop
  6034 ;;		_nrf24l01ChangeTXPower
  6035 ;;		_nrf24l01SetRXMode
  6036 ;;		_nrf24l01InitRegisters
  6037 ;; This function uses a non-reentrant model
  6038 ;;
  6039                           
  6040                           
  6041                           ;psect for function _nrf24l01Send
  6042  0FE0                     _nrf24l01Send:	
  6043                           
  6044                           ;incstack = 0
  6045                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  6046                           ;nrf24l01Send@command stored from wreg
  6047  0FE0  0020               	movlb	0	; select bank0
  6048  0FE1  00A3               	movwf	nrf24l01Send@command
  6049                           
  6050                           ;nrf24l01.c: 12: enableInterrupts(0);
  6051  0FE2  3000               	movlw	0
  6052  0FE3  318E  26AF  318F   	fcall	_enableInterrupts
  6053                           
  6054                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  6055  0FE6  3187  27F7  318F   	fcall	_nrf24l01SPIStart
  6056                           
  6057                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  6058  0FE9  0020               	movlb	0	; select bank0
  6059  0FEA  0823               	movf	nrf24l01Send@command,w
  6060  0FEB  318E  26B7  318F   	fcall	_nrf24l01SPISend
  6061                           
  6062                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  6063  0FEE  0020               	movlb	0	; select bank0
  6064  0FEF  0821               	movf	nrf24l01Send@data,w
  6065  0FF0  318E  26B7  318F   	fcall	_nrf24l01SPISend
  6066  0FF3  0020               	movlb	0	; select bank0
  6067  0FF4  00A2               	movwf	??_nrf24l01Send
  6068  0FF5  0822               	movf	??_nrf24l01Send,w
  6069  0FF6  00A1               	movwf	nrf24l01Send@data
  6070                           
  6071                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  6072  0FF7  318E  26A8  318F   	fcall	_nrf24l01SPIEnd
  6073                           
  6074                           ;nrf24l01.c: 27: enableInterrupts(1);
  6075  0FFA  3001               	movlw	1
  6076  0FFB  318E  26AF         	fcall	_enableInterrupts
  6077                           
  6078                           ;nrf24l01.c: 29: return data;
  6079  0FFD  0020               	movlb	0	; select bank0
  6080  0FFE  0821               	movf	nrf24l01Send@data,w
  6081  0FFF  0008               	return
  6082  1000                     __end_of_nrf24l01Send:	
  6083                           
  6084                           	psect	text22
  6085  07B3                     __ptext22:	
  6086 ;; *************** function _flashUpdate *****************
  6087 ;; Defined at:
  6088 ;;		line 97 in file "flash.c"
  6089 ;; Parameters:    Size  Location     Type
  6090 ;;		None
  6091 ;; Auto vars:     Size  Location     Type
  6092 ;;  i               2    9[BANK0 ] unsigned int 
  6093 ;; Return value:  Size  Location     Type
  6094 ;;                  1    wreg      void 
  6095 ;; Registers used:
  6096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6097 ;; Tracked objects:
  6098 ;;		On entry : 0/0
  6099 ;;		On exit  : 0/0
  6100 ;;		Unchanged: 0/0
  6101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6103 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6104 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6105 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6106 ;;Total ram usage:        4 bytes
  6107 ;; Hardware stack levels used:    1
  6108 ;; Hardware stack levels required when called:    8
  6109 ;; This function calls:
  6110 ;;		_flashWriteByte
  6111 ;; This function is called by:
  6112 ;;		_main
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           
  6117                           ;psect for function _flashUpdate
  6118  07B3                     _flashUpdate:	
  6119                           
  6120                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  6121                           
  6122                           ;incstack = 0
  6123                           ; Regs used in _flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6124  07B3  0020               	movlb	0	; select bank0
  6125  07B4  01A9               	clrf	flashUpdate@i
  6126  07B5  01AA               	clrf	flashUpdate@i+1
  6127  07B6                     L1:	
  6128  07B6  3000               	movlw	0
  6129  07B7  022A               	subwf	flashUpdate@i+1,w
  6130  07B8  3020               	movlw	32
  6131  07B9  1903               	skipnz
  6132  07BA  0229               	subwf	flashUpdate@i,w
  6133  07BB  1803               	btfsc	3,0
  6134  07BC  0008               	return
  6135                           
  6136                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  6137  07BD  082A               	movf	flashUpdate@i+1,w
  6138  07BE  00A2               	movwf	flashWriteByte@offset+1
  6139  07BF  0829               	movf	flashUpdate@i,w
  6140  07C0  00A1               	movwf	flashWriteByte@offset
  6141  07C1  0829               	movf	flashUpdate@i,w
  6142  07C2  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  6143  07C3  0086               	movwf	6
  6144  07C4  3001               	movlw	1	; select bank2/3
  6145  07C5  0087               	movwf	7
  6146  07C6  0801               	movf	1,w
  6147  07C7  00A7               	movwf	??_flashUpdate
  6148  07C8  01A8               	clrf	??_flashUpdate+1
  6149  07C9  0827               	movf	??_flashUpdate,w
  6150  07CA  00A3               	movwf	flashWriteByte@data
  6151  07CB  0828               	movf	??_flashUpdate+1,w
  6152  07CC  00A4               	movwf	flashWriteByte@data+1
  6153  07CD  3185  25A6  3187   	fcall	_flashWriteByte
  6154  07D0  3001               	movlw	1
  6155  07D1  0020               	movlb	0	; select bank0
  6156  07D2  07A9               	addwf	flashUpdate@i,f
  6157  07D3  3000               	movlw	0
  6158  07D4  3DAA               	addwfc	flashUpdate@i+1,f
  6159  07D5  2FB6               	goto	L1
  6160  07D6                     __end_of_flashUpdate:	
  6161                           
  6162                           	psect	text23
  6163  05A6                     __ptext23:	
  6164 ;; *************** function _flashWriteByte *****************
  6165 ;; Defined at:
  6166 ;;		line 8 in file "flash.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;  offset          2    1[BANK0 ] unsigned int 
  6169 ;;  data            2    3[BANK0 ] unsigned int 
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;  address         2    5[BANK0 ] unsigned int 
  6172 ;; Return value:  Size  Location     Type
  6173 ;;                  1    wreg      void 
  6174 ;; Registers used:
  6175 ;;		wreg, status,2, status,0
  6176 ;; Tracked objects:
  6177 ;;		On entry : 0/0
  6178 ;;		On exit  : 0/0
  6179 ;;		Unchanged: 0/0
  6180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6181 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6182 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6184 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6185 ;;Total ram usage:        6 bytes
  6186 ;; Hardware stack levels used:    1
  6187 ;; Hardware stack levels required when called:    7
  6188 ;; This function calls:
  6189 ;;		Nothing
  6190 ;; This function is called by:
  6191 ;;		_flashUpdate
  6192 ;; This function uses a non-reentrant model
  6193 ;;
  6194                           
  6195                           
  6196                           ;psect for function _flashWriteByte
  6197  05A6                     _flashWriteByte:	
  6198                           
  6199                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  6200                           
  6201                           ;incstack = 0
  6202                           ; Regs used in _flashWriteByte: [wreg+status,2+status,0]
  6203  05A6  138B               	bcf	11,7	;volatile
  6204                           
  6205                           ;flash.c: 15: PMCON1 = 0x00;
  6206  05A7  0031               	movlb	17	; select bank17
  6207  05A8  0195               	clrf	21	;volsfr
  6208                           
  6209                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  6210  05A9  0020               	movlb	0	; select bank0
  6211  05AA  0821               	movf	flashWriteByte@offset,w
  6212  05AB  3EE0               	addlw	224
  6213  05AC  00A5               	movwf	flashWriteByte@address
  6214  05AD  301F               	movlw	31
  6215  05AE  3D22               	addwfc	flashWriteByte@offset+1,w
  6216  05AF  00A6               	movwf	flashWriteByte@address+1
  6217                           
  6218                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  6219  05B0  0825               	movf	flashWriteByte@address,w
  6220  05B1  0031               	movlb	17	; select bank17
  6221  05B2  0091               	movwf	17	;volatile
  6222                           
  6223                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  6224  05B3  0020               	movlb	0	; select bank0
  6225  05B4  0826               	movf	flashWriteByte@address+1,w
  6226  05B5  0031               	movlb	17	; select bank17
  6227  05B6  0092               	movwf	18	;volatile
  6228                           
  6229                           ;flash.c: 21: PMCON1bits.FREE = 1;
  6230  05B7  1615               	bsf	21,4	;volsfr
  6231                           
  6232                           ;flash.c: 22: PMCON1bits.WREN = 1;
  6233  05B8  1515               	bsf	21,2	;volsfr
  6234                           
  6235                           ;flash.c: 24: PMCON2 = 0x55;
  6236  05B9  3055               	movlw	85
  6237  05BA  0096               	movwf	22	;volsfr
  6238                           
  6239                           ;flash.c: 25: PMCON2 = 0xAA;
  6240  05BB  30AA               	movlw	170
  6241  05BC  0096               	movwf	22	;volsfr
  6242                           
  6243                           ;flash.c: 27: PMCON1bits.WR = 1;
  6244  05BD  1495               	bsf	21,1	;volsfr
  6245                           
  6246                           ;flash.c: 29: __nop();
  6247  05BE  0000               	nop
  6248                           
  6249                           ;flash.c: 30: __nop();
  6250  05BF  0000               	nop
  6251                           
  6252                           ;flash.c: 32: PMCON1bits.WREN = 0;
  6253  05C0  0031               	movlb	17	; select bank17
  6254  05C1  1115               	bcf	21,2	;volsfr
  6255                           
  6256                           ;flash.c: 36: PMCON1 = 0x00;
  6257  05C2  0195               	clrf	21	;volsfr
  6258                           
  6259                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  6260  05C3  0020               	movlb	0	; select bank0
  6261  05C4  0825               	movf	flashWriteByte@address,w
  6262  05C5  0031               	movlb	17	; select bank17
  6263  05C6  0091               	movwf	17	;volatile
  6264                           
  6265                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  6266  05C7  0020               	movlb	0	; select bank0
  6267  05C8  0826               	movf	flashWriteByte@address+1,w
  6268  05C9  0031               	movlb	17	; select bank17
  6269  05CA  0092               	movwf	18	;volatile
  6270                           
  6271                           ;flash.c: 41: PMCON1bits.FREE = 0;
  6272  05CB  1215               	bcf	21,4	;volsfr
  6273                           
  6274                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  6275  05CC  1695               	bsf	21,5	;volsfr
  6276                           
  6277                           ;flash.c: 43: PMCON1bits.WREN = 1;
  6278  05CD  1515               	bsf	21,2	;volsfr
  6279                           
  6280                           ;flash.c: 45: PMDATL = (data >> 0);
  6281  05CE  0020               	movlb	0	; select bank0
  6282  05CF  0823               	movf	flashWriteByte@data,w
  6283  05D0  0031               	movlb	17	; select bank17
  6284  05D1  0093               	movwf	19	;volatile
  6285                           
  6286                           ;flash.c: 46: PMDATH = (data >> 8);
  6287  05D2  0020               	movlb	0	; select bank0
  6288  05D3  0824               	movf	flashWriteByte@data+1,w
  6289  05D4  0031               	movlb	17	; select bank17
  6290  05D5  0094               	movwf	20	;volatile
  6291                           
  6292                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  6293  05D6  1295               	bcf	21,5	;volsfr
  6294                           
  6295                           ;flash.c: 50: PMCON2 = 0x55;
  6296  05D7  3055               	movlw	85
  6297  05D8  0096               	movwf	22	;volsfr
  6298                           
  6299                           ;flash.c: 51: PMCON2 = 0xAA;
  6300  05D9  30AA               	movlw	170
  6301  05DA  0096               	movwf	22	;volsfr
  6302                           
  6303                           ;flash.c: 53: PMCON1bits.WR = 1;
  6304  05DB  1495               	bsf	21,1	;volsfr
  6305                           
  6306                           ;flash.c: 55: __nop();
  6307  05DC  0000               	nop
  6308                           
  6309                           ;flash.c: 56: __nop();
  6310  05DD  0000               	nop
  6311                           
  6312                           ;flash.c: 58: PMCON1bits.WREN = 0;
  6313  05DE  0031               	movlb	17	; select bank17
  6314  05DF  1115               	bcf	21,2	;volsfr
  6315                           
  6316                           ;flash.c: 61: INTCONbits.GIE = 1;
  6317  05E0  178B               	bsf	11,7	;volatile
  6318  05E1  0008               	return
  6319  05E2                     __end_of_flashWriteByte:	
  6320                           
  6321                           	psect	text24
  6322  0FC0                     __ptext24:	
  6323 ;; *************** function _flashRealod *****************
  6324 ;; Defined at:
  6325 ;;		line 90 in file "flash.c"
  6326 ;; Parameters:    Size  Location     Type
  6327 ;;		None
  6328 ;; Auto vars:     Size  Location     Type
  6329 ;;  i               2   11[BANK0 ] unsigned int 
  6330 ;; Return value:  Size  Location     Type
  6331 ;;                  1    wreg      void 
  6332 ;; Registers used:
  6333 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6334 ;; Tracked objects:
  6335 ;;		On entry : 0/0
  6336 ;;		On exit  : 0/0
  6337 ;;		Unchanged: 0/0
  6338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6340 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6341 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6342 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6343 ;;Total ram usage:        3 bytes
  6344 ;; Hardware stack levels used:    1
  6345 ;; Hardware stack levels required when called:    8
  6346 ;; This function calls:
  6347 ;;		_flashReadByte
  6348 ;; This function is called by:
  6349 ;;		_main
  6350 ;; This function uses a non-reentrant model
  6351 ;;
  6352                           
  6353                           
  6354                           ;psect for function _flashRealod
  6355  0FC0                     _flashRealod:	
  6356                           
  6357                           ;flash.c: 92: for (unsigned int i = 0; i < 32; i++){
  6358                           
  6359                           ;incstack = 0
  6360                           ; Regs used in _flashRealod: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6361  0FC0  0020               	movlb	0	; select bank0
  6362  0FC1  01AB               	clrf	flashRealod@i
  6363  0FC2  01AC               	clrf	flashRealod@i+1
  6364  0FC3                     L2:	
  6365  0FC3  3000               	movlw	0
  6366  0FC4  022C               	subwf	flashRealod@i+1,w
  6367  0FC5  3020               	movlw	32
  6368  0FC6  1903               	skipnz
  6369  0FC7  022B               	subwf	flashRealod@i,w
  6370  0FC8  1803               	btfsc	3,0
  6371  0FC9  0008               	return
  6372                           
  6373                           ;flash.c: 93: romHolder.array[i] = flashReadByte(i);
  6374  0FCA  082C               	movf	flashRealod@i+1,w
  6375  0FCB  00A2               	movwf	flashReadByte@offset+1
  6376  0FCC  082B               	movf	flashRealod@i,w
  6377  0FCD  00A1               	movwf	flashReadByte@offset
  6378  0FCE  3186  268A  318F   	fcall	_flashReadByte
  6379  0FD1  0020               	movlb	0	; select bank0
  6380  0FD2  0821               	movf	?_flashReadByte,w
  6381  0FD3  00AA               	movwf	??_flashRealod
  6382  0FD4  082B               	movf	flashRealod@i,w
  6383  0FD5  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  6384  0FD6  0086               	movwf	6
  6385  0FD7  3001               	movlw	1	; select bank2/3
  6386  0FD8  0087               	movwf	7
  6387  0FD9  082A               	movf	??_flashRealod,w
  6388  0FDA  0081               	movwf	1
  6389  0FDB  3001               	movlw	1
  6390  0FDC  07AB               	addwf	flashRealod@i,f
  6391  0FDD  3000               	movlw	0
  6392  0FDE  3DAC               	addwfc	flashRealod@i+1,f
  6393  0FDF  2FC3               	goto	L2
  6394  0FE0                     __end_of_flashRealod:	
  6395                           
  6396                           	psect	text25
  6397  068A                     __ptext25:	
  6398 ;; *************** function _flashReadByte *****************
  6399 ;; Defined at:
  6400 ;;		line 64 in file "flash.c"
  6401 ;; Parameters:    Size  Location     Type
  6402 ;;  offset          2    1[BANK0 ] unsigned int 
  6403 ;; Auto vars:     Size  Location     Type
  6404 ;;  address         2    8[BANK0 ] unsigned int 
  6405 ;;  result          2    6[BANK0 ] unsigned int 
  6406 ;; Return value:  Size  Location     Type
  6407 ;;                  2    1[BANK0 ] unsigned int 
  6408 ;; Registers used:
  6409 ;;		wreg, status,2, status,0
  6410 ;; Tracked objects:
  6411 ;;		On entry : 0/0
  6412 ;;		On exit  : 0/0
  6413 ;;		Unchanged: 0/0
  6414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6415 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6416 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6417 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6418 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6419 ;;Total ram usage:        9 bytes
  6420 ;; Hardware stack levels used:    1
  6421 ;; Hardware stack levels required when called:    7
  6422 ;; This function calls:
  6423 ;;		Nothing
  6424 ;; This function is called by:
  6425 ;;		_flashRealod
  6426 ;; This function uses a non-reentrant model
  6427 ;;
  6428                           
  6429                           
  6430                           ;psect for function _flashReadByte
  6431  068A                     _flashReadByte:	
  6432                           
  6433                           ;flash.c: 66: unsigned int address;;flash.c: 68: INTCONbits.GIE = 0;
  6434                           
  6435                           ;incstack = 0
  6436                           ; Regs used in _flashReadByte: [wreg+status,2+status,0]
  6437  068A  138B               	bcf	11,7	;volatile
  6438                           
  6439                           ;flash.c: 70: PMCON1 = 0x00;
  6440  068B  0031               	movlb	17	; select bank17
  6441  068C  0195               	clrf	21	;volsfr
  6442                           
  6443                           ;flash.c: 72: address = (0x2000U - 32) + offset;
  6444  068D  0020               	movlb	0	; select bank0
  6445  068E  0821               	movf	flashReadByte@offset,w
  6446  068F  3EE0               	addlw	224
  6447  0690  00A8               	movwf	flashReadByte@address
  6448  0691  301F               	movlw	31
  6449  0692  3D22               	addwfc	flashReadByte@offset+1,w
  6450  0693  00A9               	movwf	flashReadByte@address+1
  6451                           
  6452                           ;flash.c: 73: PMADRL = (char) (address >> 0);
  6453  0694  0828               	movf	flashReadByte@address,w
  6454  0695  0031               	movlb	17	; select bank17
  6455  0696  0091               	movwf	17	;volatile
  6456                           
  6457                           ;flash.c: 74: PMADRH = (char) (address >> 8);
  6458  0697  0020               	movlb	0	; select bank0
  6459  0698  0829               	movf	flashReadByte@address+1,w
  6460  0699  0031               	movlb	17	; select bank17
  6461  069A  0092               	movwf	18	;volatile
  6462                           
  6463                           ;flash.c: 76: PMCON1bits.RD = 1;
  6464  069B  1415               	bsf	21,0	;volsfr
  6465                           
  6466                           ;flash.c: 78: __nop();
  6467  069C  0000               	nop
  6468                           
  6469                           ;flash.c: 79: __nop();
  6470  069D  0000               	nop
  6471                           
  6472                           ;flash.c: 81: unsigned int result = 0;
  6473  069E  0020               	movlb	0	; select bank0
  6474  069F  01A6               	clrf	flashReadByte@result
  6475  06A0  01A7               	clrf	flashReadByte@result+1
  6476                           
  6477                           ;flash.c: 82: result = PMDATL;
  6478  06A1  0031               	movlb	17	; select bank17
  6479  06A2  0813               	movf	19,w	;volatile
  6480  06A3  0020               	movlb	0	; select bank0
  6481  06A4  00A3               	movwf	??_flashReadByte
  6482  06A5  01A4               	clrf	??_flashReadByte+1
  6483  06A6  0823               	movf	??_flashReadByte,w
  6484  06A7  00A6               	movwf	flashReadByte@result
  6485  06A8  0824               	movf	??_flashReadByte+1,w
  6486  06A9  00A7               	movwf	flashReadByte@result+1
  6487                           
  6488                           ;flash.c: 83: result|= ( (unsigned) (PMDATH) << 8);
  6489  06AA  0031               	movlb	17	; select bank17
  6490  06AB  0814               	movf	20,w	;volatile
  6491  06AC  0020               	movlb	0	; select bank0
  6492  06AD  00A3               	movwf	??_flashReadByte
  6493  06AE  01A4               	clrf	??_flashReadByte+1
  6494  06AF  0823               	movf	??_flashReadByte,w
  6495  06B0  00A4               	movwf	??_flashReadByte+1
  6496  06B1  01A3               	clrf	??_flashReadByte
  6497  06B2  0823               	movf	??_flashReadByte,w
  6498  06B3  04A6               	iorwf	flashReadByte@result,f
  6499  06B4  0824               	movf	??_flashReadByte+1,w
  6500  06B5  04A7               	iorwf	flashReadByte@result+1,f
  6501                           
  6502                           ;flash.c: 85: INTCONbits.GIE = 1;
  6503  06B6  178B               	bsf	11,7	;volatile
  6504                           
  6505                           ;flash.c: 87: return result;
  6506  06B7  0827               	movf	flashReadByte@result+1,w
  6507  06B8  00A2               	movwf	?_flashReadByte+1
  6508  06B9  0826               	movf	flashReadByte@result,w
  6509  06BA  00A1               	movwf	?_flashReadByte
  6510  06BB  0008               	return
  6511  06BC                     __end_of_flashReadByte:	
  6512                           
  6513                           	psect	intentry
  6514  0004                     __pintentry:	
  6515 ;; *************** function _ISR *****************
  6516 ;; Defined at:
  6517 ;;		line 15 in file "main.c"
  6518 ;; Parameters:    Size  Location     Type
  6519 ;;		None
  6520 ;; Auto vars:     Size  Location     Type
  6521 ;;		None
  6522 ;; Return value:  Size  Location     Type
  6523 ;;                  1    wreg      void 
  6524 ;; Registers used:
  6525 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6526 ;; Tracked objects:
  6527 ;;		On entry : 0/0
  6528 ;;		On exit  : 0/0
  6529 ;;		Unchanged: 0/0
  6530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6535 ;;Total ram usage:        0 bytes
  6536 ;; Hardware stack levels used:    1
  6537 ;; Hardware stack levels required when called:    6
  6538 ;; This function calls:
  6539 ;;		_nrf24l01ISR
  6540 ;; This function is called by:
  6541 ;;		Interrupt level 1
  6542 ;; This function uses a non-reentrant model
  6543 ;;
  6544                           
  6545  0004                     _ISR:	
  6546                           
  6547                           ;incstack = 0
  6548  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6549                           
  6550                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6551  0005  3180               	pagesel	$
  6552                           
  6553                           ;main.c: 17: if (PIR0bits.INTF){
  6554  0006  0020               	movlb	0	; select bank0
  6555  0007  1C10               	btfss	16,0	;volatile
  6556  0008  280D               	goto	i1l209
  6557                           
  6558                           ;main.c: 18: nrf24l01ISR();
  6559  0009  3186  2654         	fcall	_nrf24l01ISR
  6560                           
  6561                           ;main.c: 19: PIR0bits.INTF = 0;
  6562  000B  0020               	movlb	0	; select bank0
  6563  000C  1010               	bcf	16,0	;volatile
  6564  000D                     i1l209:	
  6565  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6566  000E  0009               	retfie
  6567  000F                     __end_of_ISR:	
  6568                           
  6569                           	psect	text27
  6570  0654                     __ptext27:	
  6571 ;; *************** function _nrf24l01ISR *****************
  6572 ;; Defined at:
  6573 ;;		line 248 in file "nrf24l01.c"
  6574 ;; Parameters:    Size  Location     Type
  6575 ;;		None
  6576 ;; Auto vars:     Size  Location     Type
  6577 ;;  status          1    0[BANK0 ] struct .
  6578 ;; Return value:  Size  Location     Type
  6579 ;;                  1    wreg      void 
  6580 ;; Registers used:
  6581 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6582 ;; Tracked objects:
  6583 ;;		On entry : 0/0
  6584 ;;		On exit  : 0/0
  6585 ;;		Unchanged: 0/0
  6586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6588 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6589 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6590 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6591 ;;Total ram usage:        2 bytes
  6592 ;; Hardware stack levels used:    1
  6593 ;; Hardware stack levels required when called:    5
  6594 ;; This function calls:
  6595 ;;		_exception
  6596 ;;		_nrf24l01CheckACK
  6597 ;;		_nrf24l01ReceivePacket
  6598 ;;		i1_nrf24l01Send
  6599 ;;		i1_nrf24l01SetRXMode
  6600 ;; This function is called by:
  6601 ;;		_ISR
  6602 ;; This function uses a non-reentrant model
  6603 ;;
  6604                           
  6605                           
  6606                           ;psect for function _nrf24l01ISR
  6607  0654                     _nrf24l01ISR:	
  6608                           
  6609                           ;nrf24l01.c: 250: n_STATUS_t status;;nrf24l01.c: 251: status.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x07, 0);
  6610                           
  6611                           ;incstack = 0
  6612                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6613  0654  01F1               	clrf	i1nrf24l01Send@data
  6614  0655  3007               	movlw	7
  6615  0656  318F  274E  3186   	fcall	i1_nrf24l01Send
  6616  0659  00FD               	movwf	??_nrf24l01ISR
  6617  065A  087D               	movf	??_nrf24l01ISR,w
  6618  065B  0020               	movlb	0	; select bank0
  6619  065C  00A0               	movwf	nrf24l01ISR@status
  6620                           
  6621                           ;nrf24l01.c: 256: };nrf24l01.c: 259: if (status.byte == 0xFF){
  6622  065D  0A20               	incf	nrf24l01ISR@status,w
  6623  065E  1D03               	btfss	3,2
  6624  065F  2E64               	goto	i1l2846
  6625                           
  6626                           ;nrf24l01.c: 260: exception(2);
  6627  0660  3002               	movlw	2
  6628  0661  318E  26EA  3186   	fcall	_exception
  6629  0664                     i1l2846:	
  6630                           
  6631                           ;nrf24l01.c: 261: };nrf24l01.c: 263: if (status.TX_DS){
  6632  0664  0020               	movlb	0	; select bank0
  6633  0665  1EA0               	btfss	nrf24l01ISR@status,5
  6634  0666  2E73               	goto	i1l2854
  6635                           
  6636                           ;nrf24l01.c: 266: nrf24l01.TXBusy = 0;
  6637  0667  105B               	bcf	_nrf24l01,0	;volatile
  6638                           
  6639                           ;nrf24l01.c: 269: if (!nrf24l01.RXMode){
  6640  0668  195B               	btfsc	_nrf24l01,2	;volatile
  6641  0669  2E73               	goto	i1l2854
  6642                           
  6643                           ;nrf24l01.c: 270: if (TXPacket->packetData.ACKRequest){
  6644  066A  0859               	movf	_TXPacket,w
  6645  066B  0086               	movwf	6
  6646  066C  0187               	clrf	7
  6647  066D  1D01               	btfss	1,2
  6648  066E  2E73               	goto	i1l2854
  6649                           
  6650                           ;nrf24l01.c: 273: nrf24l01SetRXMode(1);
  6651  066F  3001               	movlw	1
  6652  0670  3186  261D  3186   	fcall	i1_nrf24l01SetRXMode
  6653  0673                     i1l2854:	
  6654                           
  6655                           ;nrf24l01.c: 274: };nrf24l01.c: 275: };nrf24l01.c: 276: };nrf24l01.c: 279: if (status.RX
      +                          _DR){
  6656  0673  0020               	movlb	0	; select bank0
  6657  0674  1F20               	btfss	nrf24l01ISR@status,6
  6658  0675  2E81               	goto	i1l2864
  6659                           
  6660                           ;nrf24l01.c: 282: if (!nrf24l01.RXPending){
  6661  0676  18DB               	btfsc	_nrf24l01,1	;volatile
  6662  0677  2E80               	goto	i1l351
  6663                           
  6664                           ;nrf24l01.c: 285: nrf24l01.RXPending = 1;
  6665  0678  14DB               	bsf	_nrf24l01,1	;volatile
  6666                           
  6667                           ;nrf24l01.c: 286: nrf24l01ReceivePacket();
  6668  0679  3184  2424  3186   	fcall	_nrf24l01ReceivePacket
  6669                           
  6670                           ;nrf24l01.c: 287: nrf24l01CheckACK();
  6671  067C  318F  27A0  3186   	fcall	_nrf24l01CheckACK
  6672                           
  6673                           ;nrf24l01.c: 288: }
  6674  067F  2E81               	goto	i1l2864
  6675  0680                     i1l351:	
  6676                           
  6677                           ;nrf24l01.c: 291: else{;nrf24l01.c: 294: status.RX_DR = 0;
  6678  0680  1320               	bcf	nrf24l01ISR@status,6
  6679  0681                     i1l2864:	
  6680                           
  6681                           ;nrf24l01.c: 295: };nrf24l01.c: 297: };nrf24l01.c: 300: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.byte);
  6682  0681  0020               	movlb	0	; select bank0
  6683  0682  0820               	movf	nrf24l01ISR@status,w
  6684  0683  00FD               	movwf	??_nrf24l01ISR
  6685  0684  087D               	movf	??_nrf24l01ISR,w
  6686  0685  00F1               	movwf	i1nrf24l01Send@data
  6687  0686  3027               	movlw	39
  6688  0687  318F  274E         	fcall	i1_nrf24l01Send
  6689  0689  0008               	return
  6690  068A                     __end_of_nrf24l01ISR:	
  6691                           
  6692                           	psect	text28
  6693  0424                     __ptext28:	
  6694 ;; *************** function _nrf24l01ReceivePacket *****************
  6695 ;; Defined at:
  6696 ;;		line 133 in file "nrf24l01.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;		None
  6699 ;; Auto vars:     Size  Location     Type
  6700 ;;  i               1   10[COMMON] unsigned char 
  6701 ;;  width           1    9[COMMON] unsigned char 
  6702 ;; Return value:  Size  Location     Type
  6703 ;;                  1    wreg      void 
  6704 ;; Registers used:
  6705 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6706 ;; Tracked objects:
  6707 ;;		On entry : 0/0
  6708 ;;		On exit  : 0/0
  6709 ;;		Unchanged: 0/0
  6710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6712 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6713 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6714 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6715 ;;Total ram usage:        3 bytes
  6716 ;; Hardware stack levels used:    1
  6717 ;; Hardware stack levels required when called:    3
  6718 ;; This function calls:
  6719 ;;		_nrf24l01CEHigh
  6720 ;;		_nrf24l01CELow
  6721 ;;		_nrf24l01SPIEnd
  6722 ;;		_nrf24l01SPISend
  6723 ;;		_nrf24l01SPIStart
  6724 ;;		i1_memset
  6725 ;;		i1_nrf24l01Send
  6726 ;; This function is called by:
  6727 ;;		_nrf24l01ISR
  6728 ;; This function uses a non-reentrant model
  6729 ;;
  6730                           
  6731                           
  6732                           ;psect for function _nrf24l01ReceivePacket
  6733  0424                     _nrf24l01ReceivePacket:	
  6734                           
  6735                           ;nrf24l01.c: 136: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  6736                           
  6737                           ;incstack = 0
  6738                           ; Regs used in _nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6739  0424  3041               	movlw	low (_RXPacket+1)
  6740  0425  00F0               	movwf	i1memset@p1
  6741  0426  3001               	movlw	high (_RXPacket+1)
  6742  0427  00F1               	movwf	i1memset@p1+1
  6743  0428  3000               	movlw	0
  6744  0429  00F2               	movwf	i1memset@c
  6745  042A  00F3               	movwf	i1memset@c+1
  6746  042B  3020               	movlw	32
  6747  042C  00F4               	movwf	i1memset@n
  6748  042D  3000               	movlw	0
  6749  042E  00F5               	movwf	i1memset@n+1
  6750  042F  318F  2702  3184   	fcall	i1_memset
  6751                           
  6752                           ;nrf24l01.c: 137: RXPacket.packetData.byte = 0x00;
  6753  0432  0022               	movlb	2	; select bank2
  6754  0433  01C0               	clrf	_RXPacket^(0+256)
  6755                           
  6756                           ;nrf24l01.c: 140: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  6757  0434  01F1               	clrf	i1nrf24l01Send@data
  6758  0435  3060               	movlw	96
  6759  0436  318F  274E  3184   	fcall	i1_nrf24l01Send
  6760  0439  00F8               	movwf	??_nrf24l01ReceivePacket
  6761  043A  0878               	movf	??_nrf24l01ReceivePacket,w
  6762  043B  00F9               	movwf	nrf24l01ReceivePacket@width
  6763                           
  6764                           ;nrf24l01.c: 141: unsigned char i = 0;
  6765  043C  01FA               	clrf	nrf24l01ReceivePacket@i
  6766                           
  6767                           ;nrf24l01.c: 144: nrf24l01CELow();
  6768  043D  318E  2699  3184   	fcall	_nrf24l01CELow
  6769                           
  6770                           ;nrf24l01.c: 147: nrf24l01SPIStart();
  6771  0440  3187  27F7  3184   	fcall	_nrf24l01SPIStart
  6772                           
  6773                           ;nrf24l01.c: 150: nrf24l01SPISend((unsigned) 0b01100001);
  6774  0443  3061               	movlw	97
  6775  0444  318E  26B7  3184   	fcall	_nrf24l01SPISend
  6776                           
  6777                           ;nrf24l01.c: 153: RXPacket.packetData.byte = nrf24l01SPISend(0);
  6778  0447  3000               	movlw	0
  6779  0448  318E  26B7  3184   	fcall	_nrf24l01SPISend
  6780  044B  00F8               	movwf	??_nrf24l01ReceivePacket
  6781  044C  0878               	movf	??_nrf24l01ReceivePacket,w
  6782  044D  0022               	movlb	2	; select bank2
  6783  044E  00C0               	movwf	_RXPacket^(0+256)
  6784                           
  6785                           ;nrf24l01.c: 154: width--;
  6786  044F  3001               	movlw	1
  6787  0450  02F9               	subwf	nrf24l01ReceivePacket@width,f
  6788                           
  6789                           ;nrf24l01.c: 156: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
  6790  0451  01FA               	clrf	nrf24l01ReceivePacket@i
  6791  0452  2C63               	goto	i1l2830
  6792  0453                     i1l2826:	
  6793                           
  6794                           ;nrf24l01.c: 158: RXPacket.Message[i] = nrf24l01SPISend(0);
  6795  0453  3000               	movlw	0
  6796  0454  318E  26B7  3184   	fcall	_nrf24l01SPISend
  6797  0457  00F8               	movwf	??_nrf24l01ReceivePacket
  6798  0458  087A               	movf	nrf24l01ReceivePacket@i,w
  6799  0459  3E41               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  6800  045A  0086               	movwf	6
  6801  045B  3001               	movlw	1	; select bank2/3
  6802  045C  0087               	movwf	7
  6803  045D  0878               	movf	??_nrf24l01ReceivePacket,w
  6804  045E  0081               	movwf	1
  6805  045F  3001               	movlw	1
  6806  0460  00F8               	movwf	??_nrf24l01ReceivePacket
  6807  0461  0878               	movf	??_nrf24l01ReceivePacket,w
  6808  0462  07FA               	addwf	nrf24l01ReceivePacket@i,f
  6809  0463                     i1l2830:	
  6810  0463  0879               	movf	nrf24l01ReceivePacket@width,w
  6811  0464  027A               	subwf	nrf24l01ReceivePacket@i,w
  6812  0465  1803               	skipnc
  6813  0466  2C6B               	goto	i1l2834
  6814  0467  3020               	movlw	32
  6815  0468  027A               	subwf	nrf24l01ReceivePacket@i,w
  6816  0469  1C03               	skipc
  6817  046A  2C53               	goto	i1l2826
  6818  046B                     i1l2834:	
  6819                           
  6820                           ;nrf24l01.c: 159: };nrf24l01.c: 162: nrf24l01SPIEnd();
  6821  046B  318E  26A8  3184   	fcall	_nrf24l01SPIEnd
  6822                           
  6823                           ;nrf24l01.c: 164: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  6824  046E  01F1               	clrf	i1nrf24l01Send@data
  6825  046F  3009               	movlw	9
  6826  0470  318F  274E  3184   	fcall	i1_nrf24l01Send
  6827  0473  00F8               	movwf	??_nrf24l01ReceivePacket
  6828  0474  0022               	movlb	2	; select bank2
  6829  0475  0840               	movf	_RXPacket^(0+256),w
  6830  0476  0678               	xorwf	??_nrf24l01ReceivePacket,w
  6831  0477  39FE               	andlw	-2
  6832  0478  0678               	xorwf	??_nrf24l01ReceivePacket,w
  6833  0479  00C0               	movwf	_RXPacket^(0+256)
  6834                           
  6835                           ;nrf24l01.c: 167: nrf24l01CEHigh();
  6836  047A  318E  2696         	fcall	_nrf24l01CEHigh
  6837  047C  0008               	return
  6838  047D                     __end_of_nrf24l01ReceivePacket:	
  6839                           
  6840                           	psect	text29
  6841  0F02                     __ptext29:	
  6842 ;; *************** function i1_memset *****************
  6843 ;; Defined at:
  6844 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6845 ;; Parameters:    Size  Location     Type
  6846 ;;  p1              2    0[COMMON] PTR void 
  6847 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6848 ;;  c               2    2[COMMON] int 
  6849 ;;  n               2    4[COMMON] unsigned int 
  6850 ;; Auto vars:     Size  Location     Type
  6851 ;;  memset          2    6[COMMON] PTR unsigned char 
  6852 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6853 ;; Return value:  Size  Location     Type
  6854 ;;                  1    wreg      PTR void 
  6855 ;; Registers used:
  6856 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6857 ;; Tracked objects:
  6858 ;;		On entry : 0/0
  6859 ;;		On exit  : 0/0
  6860 ;;		Unchanged: 0/0
  6861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6862 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6863 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6865 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6866 ;;Total ram usage:        8 bytes
  6867 ;; Hardware stack levels used:    1
  6868 ;; This function calls:
  6869 ;;		Nothing
  6870 ;; This function is called by:
  6871 ;;		_nrf24l01ReceivePacket
  6872 ;; This function uses a non-reentrant model
  6873 ;;
  6874                           
  6875                           
  6876                           ;psect for function i1_memset
  6877  0F02                     i1_memset:	
  6878                           
  6879                           ;incstack = 0
  6880                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6881  0F02  0871               	movf	i1memset@p1+1,w
  6882  0F03  00F7               	movwf	i1memset@p+1
  6883  0F04  0870               	movf	i1memset@p1,w
  6884  0F05  00F6               	movwf	i1memset@p
  6885  0F06                     i1l2794:	
  6886  0F06  3001               	movlw	1
  6887  0F07  02F4               	subwf	i1memset@n,f
  6888  0F08  3000               	movlw	0
  6889  0F09  3BF5               	subwfb	i1memset@n+1,f
  6890  0F0A  0A74               	incf	i1memset@n,w
  6891  0F0B  1903               	btfsc	3,2
  6892  0F0C  0A75               	incf	i1memset@n+1,w
  6893  0F0D  1903               	btfsc	3,2
  6894  0F0E  0008               	return
  6895  0F0F  0876               	movf	i1memset@p,w
  6896  0F10  0086               	movwf	6
  6897  0F11  0877               	movf	i1memset@p+1,w
  6898  0F12  0087               	movwf	7
  6899  0F13  0872               	movf	i1memset@c,w
  6900  0F14  0081               	movwf	1
  6901  0F15  3001               	movlw	1
  6902  0F16  07F6               	addwf	i1memset@p,f
  6903  0F17  3000               	movlw	0
  6904  0F18  3DF7               	addwfc	i1memset@p+1,f
  6905  0F19  2F06               	goto	i1l2794
  6906  0F1A                     __end_ofi1_memset:	
  6907                           ;	Return value of i1_memset is never used
  6908                           
  6909                           
  6910                           	psect	text30
  6911  0FA0                     __ptext30:	
  6912 ;; *************** function _nrf24l01CheckACK *****************
  6913 ;; Defined at:
  6914 ;;		line 96 in file "nrf24l01.c"
  6915 ;; Parameters:    Size  Location     Type
  6916 ;;		None
  6917 ;; Auto vars:     Size  Location     Type
  6918 ;;		None
  6919 ;; Return value:  Size  Location     Type
  6920 ;;                  1    wreg      void 
  6921 ;; Registers used:
  6922 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6923 ;; Tracked objects:
  6924 ;;		On entry : 0/0
  6925 ;;		On exit  : 0/0
  6926 ;;		Unchanged: 0/0
  6927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6930 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6931 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6932 ;;Total ram usage:        1 bytes
  6933 ;; Hardware stack levels used:    1
  6934 ;; Hardware stack levels required when called:    4
  6935 ;; This function calls:
  6936 ;;		_strcmp
  6937 ;;		i1_nrf24l01SetRXMode
  6938 ;; This function is called by:
  6939 ;;		_nrf24l01ISR
  6940 ;; This function uses a non-reentrant model
  6941 ;;
  6942                           
  6943                           
  6944                           ;psect for function _nrf24l01CheckACK
  6945  0FA0                     _nrf24l01CheckACK:	
  6946                           
  6947                           ;nrf24l01.c: 100: if (!RXPacket.packetData.IsACK){
  6948                           
  6949                           ;incstack = 0
  6950                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6951  0FA0  0022               	movlb	2	; select bank2
  6952  0FA1  1DC0               	btfss	_RXPacket^(0+256),3
  6953  0FA2  0008               	return
  6954                           
  6955                           ;nrf24l01.c: 102: };nrf24l01.c: 105: nrf24l01.RXPending = 0;
  6956                           
  6957                           ;nrf24l01.c: 101: return;
  6958  0FA3  0020               	movlb	0	; select bank0
  6959  0FA4  10DB               	bcf	_nrf24l01,1	;volatile
  6960                           
  6961                           ;nrf24l01.c: 108: if (!TXPacket->packetData.ACKRequest){
  6962  0FA5  0859               	movf	_TXPacket,w
  6963  0FA6  0086               	movwf	6
  6964  0FA7  0187               	clrf	7
  6965  0FA8  1D01               	btfss	1,2
  6966  0FA9  0008               	return
  6967                           
  6968                           ;nrf24l01.c: 110: };nrf24l01.c: 113: if (strcmp(TXPacket->Message, RXPacket.Message) != 
      +                          0){
  6969                           
  6970                           ;nrf24l01.c: 109: return;
  6971  0FAA  3041               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  6972  0FAB  00F7               	movwf	??_nrf24l01CheckACK
  6973  0FAC  0877               	movf	??_nrf24l01CheckACK,w
  6974  0FAD  00F0               	movwf	strcmp@s2
  6975  0FAE  0859               	movf	_TXPacket,w
  6976  0FAF  3E01               	addlw	1
  6977  0FB0  3187  2768  318F   	fcall	_strcmp
  6978  0FB3  0870               	movf	?_strcmp,w
  6979  0FB4  0471               	iorwf	?_strcmp+1,w
  6980  0FB5  1D03               	btfss	3,2
  6981  0FB6  0008               	return
  6982                           
  6983                           ;nrf24l01.c: 115: };nrf24l01.c: 122: TXPacket->packetData.ACKRequest = 0;
  6984                           
  6985                           ;nrf24l01.c: 114: return;
  6986  0FB7  0020               	movlb	0	; select bank0
  6987  0FB8  0859               	movf	_TXPacket,w
  6988  0FB9  0086               	movwf	6
  6989  0FBA  0187               	clrf	7
  6990  0FBB  1101               	bcf	1,2
  6991                           
  6992                           ;nrf24l01.c: 125: nrf24l01SetRXMode(0);
  6993  0FBC  3000               	movlw	0
  6994  0FBD  3186  261D         	fcall	i1_nrf24l01SetRXMode
  6995  0FBF  0008               	return
  6996  0FC0                     __end_of_nrf24l01CheckACK:	
  6997                           
  6998                           	psect	text31
  6999  061D                     __ptext31:	
  7000 ;; *************** function i1_nrf24l01SetRXMode *****************
  7001 ;; Defined at:
  7002 ;;		line 54 in file "nrf24l01.c"
  7003 ;; Parameters:    Size  Location     Type
  7004 ;;  rxMode          1    wreg     unsigned char 
  7005 ;; Auto vars:     Size  Location     Type
  7006 ;;  rxMode          1    6[COMMON] unsigned char 
  7007 ;;  nrf24l01SetR    1    5[COMMON] struct .
  7008 ;; Return value:  Size  Location     Type
  7009 ;;                  1    wreg      void 
  7010 ;; Registers used:
  7011 ;;		wreg, status,2, status,0, pclath, cstack
  7012 ;; Tracked objects:
  7013 ;;		On entry : 0/0
  7014 ;;		On exit  : 0/0
  7015 ;;		Unchanged: 0/0
  7016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7018 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7019 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7020 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7021 ;;Total ram usage:        3 bytes
  7022 ;; Hardware stack levels used:    1
  7023 ;; Hardware stack levels required when called:    3
  7024 ;; This function calls:
  7025 ;;		_nrf24l01CEHigh
  7026 ;;		_nrf24l01CELow
  7027 ;;		i1_nrf24l01Send
  7028 ;; This function is called by:
  7029 ;;		_nrf24l01CheckACK
  7030 ;;		_nrf24l01ISR
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034                           
  7035                           ;psect for function i1_nrf24l01SetRXMode
  7036  061D                     i1_nrf24l01SetRXMode:	
  7037                           
  7038                           ;incstack = 0
  7039                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  7040                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
  7041  061D  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
  7042                           
  7043                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  7044  061E  01F1               	clrf	i1nrf24l01Send@data
  7045  061F  3000               	movlw	0
  7046  0620  318F  274E  3186   	fcall	i1_nrf24l01Send
  7047  0623  00F4               	movwf	??i1_nrf24l01SetRXMode
  7048  0624  0874               	movf	??i1_nrf24l01SetRXMode,w
  7049  0625  00F5               	movwf	i1nrf24l01SetRXMode@config
  7050                           
  7051                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  7052  0626  0875               	movf	i1nrf24l01SetRXMode@config,w
  7053  0627  3901               	andlw	1
  7054  0628  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
  7055  0629  1903               	skipnz
  7056  062A  2E4D               	goto	i1l2182
  7057                           
  7058                           ;nrf24l01.c: 65: nrf24l01CELow();
  7059  062B  318E  2699  3186   	fcall	_nrf24l01CELow
  7060                           
  7061                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7062  062E  30A0               	movlw	160
  7063  062F                     u172_27:	
  7064  062F  3200               	nop2
  7065  0630  0B89               	decfsz	9,f
  7066  0631  2E2F               	goto	u172_27
  7067                           
  7068                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  7069  0632  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  7070  0633  3901               	andlw	1
  7071  0634  1075               	bcf	i1nrf24l01SetRXMode@config,0
  7072  0635  1D03               	skipz
  7073  0636  1475               	bsf	i1nrf24l01SetRXMode@config,0
  7074                           
  7075                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  7076  0637  0875               	movf	i1nrf24l01SetRXMode@config,w
  7077  0638  00F4               	movwf	??i1_nrf24l01SetRXMode
  7078  0639  0874               	movf	??i1_nrf24l01SetRXMode,w
  7079  063A  00F1               	movwf	i1nrf24l01Send@data
  7080  063B  3020               	movlw	32
  7081  063C  318F  274E  3186   	fcall	i1_nrf24l01Send
  7082                           
  7083                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7084  063F  30A0               	movlw	160
  7085  0640                     u173_27:	
  7086  0640  3200               	nop2
  7087  0641  0B89               	decfsz	9,f
  7088  0642  2E40               	goto	u173_27
  7089                           
  7090                           ;nrf24l01.c: 76: if (rxMode){
  7091  0643  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  7092  0644  1903               	btfsc	3,2
  7093  0645  2E4D               	goto	i1l2182
  7094                           
  7095                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  7096  0646  318E  2696  3186   	fcall	_nrf24l01CEHigh
  7097                           
  7098                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7099  0649  30A0               	movlw	160
  7100  064A                     u174_27:	
  7101  064A  3200               	nop2
  7102  064B  0B89               	decfsz	9,f
  7103  064C  2E4A               	goto	u174_27
  7104  064D                     i1l2182:	
  7105                           
  7106                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  7107  064D  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  7108  064E  3901               	andlw	1
  7109  064F  0020               	movlb	0	; select bank0
  7110  0650  115B               	bcf	_nrf24l01,2	;volatile
  7111  0651  1D03               	skipz
  7112  0652  155B               	bsf	_nrf24l01,2	;volatile
  7113  0653  0008               	return
  7114  0654                     __end_ofi1_nrf24l01SetRXMode:	
  7115                           
  7116                           	psect	text32
  7117  0F4E                     __ptext32:	
  7118 ;; *************** function i1_nrf24l01Send *****************
  7119 ;; Defined at:
  7120 ;;		line 9 in file "nrf24l01.c"
  7121 ;; Parameters:    Size  Location     Type
  7122 ;;  command         1    wreg     unsigned char 
  7123 ;;  data            1    1[COMMON] unsigned char 
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;  command         1    3[COMMON] unsigned char 
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  1    wreg      unsigned char 
  7128 ;; Registers used:
  7129 ;;		wreg, status,2, status,0, pclath, cstack
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7135 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7136 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7137 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7138 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7139 ;;Total ram usage:        3 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; Hardware stack levels required when called:    2
  7142 ;; This function calls:
  7143 ;;		_enableInterrupts
  7144 ;;		_nrf24l01SPIEnd
  7145 ;;		_nrf24l01SPISend
  7146 ;;		_nrf24l01SPIStart
  7147 ;; This function is called by:
  7148 ;;		_nrf24l01ReceivePacket
  7149 ;;		_nrf24l01ISR
  7150 ;;		i1_nrf24l01SetRXMode
  7151 ;; This function uses a non-reentrant model
  7152 ;;
  7153                           
  7154                           
  7155                           ;psect for function i1_nrf24l01Send
  7156  0F4E                     i1_nrf24l01Send:	
  7157                           
  7158                           ;incstack = 0
  7159                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  7160                           ;i1nrf24l01Send@command stored from wreg
  7161  0F4E  00F3               	movwf	i1nrf24l01Send@command
  7162                           
  7163                           ;nrf24l01.c: 12: enableInterrupts(0);
  7164  0F4F  3000               	movlw	0
  7165  0F50  318E  26AF  318F   	fcall	_enableInterrupts
  7166                           
  7167                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  7168  0F53  3187  27F7  318F   	fcall	_nrf24l01SPIStart
  7169                           
  7170                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  7171  0F56  0873               	movf	i1nrf24l01Send@command,w
  7172  0F57  318E  26B7  318F   	fcall	_nrf24l01SPISend
  7173                           
  7174                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  7175  0F5A  0871               	movf	i1nrf24l01Send@data,w
  7176  0F5B  318E  26B7  318F   	fcall	_nrf24l01SPISend
  7177  0F5E  00F2               	movwf	??i1_nrf24l01Send
  7178  0F5F  0872               	movf	??i1_nrf24l01Send,w
  7179  0F60  00F1               	movwf	i1nrf24l01Send@data
  7180                           
  7181                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  7182  0F61  318E  26A8  318F   	fcall	_nrf24l01SPIEnd
  7183                           
  7184                           ;nrf24l01.c: 27: enableInterrupts(1);
  7185  0F64  3001               	movlw	1
  7186  0F65  318E  26AF         	fcall	_enableInterrupts
  7187                           
  7188                           ;nrf24l01.c: 29: return data;
  7189  0F67  0871               	movf	i1nrf24l01Send@data,w
  7190  0F68  0008               	return
  7191  0F69                     __end_ofi1_nrf24l01Send:	
  7192                           
  7193                           	psect	text33
  7194  07F7                     __ptext33:	
  7195 ;; *************** function _nrf24l01SPIStart *****************
  7196 ;; Defined at:
  7197 ;;		line 65 in file "interface.c"
  7198 ;; Parameters:    Size  Location     Type
  7199 ;;		None
  7200 ;; Auto vars:     Size  Location     Type
  7201 ;;		None
  7202 ;; Return value:  Size  Location     Type
  7203 ;;                  1    wreg      void 
  7204 ;; Registers used:
  7205 ;;		wreg, status,2, status,0, pclath, cstack
  7206 ;; Tracked objects:
  7207 ;;		On entry : 0/0
  7208 ;;		On exit  : 0/0
  7209 ;;		Unchanged: 0/0
  7210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7215 ;;Total ram usage:        0 bytes
  7216 ;; Hardware stack levels used:    1
  7217 ;; Hardware stack levels required when called:    8
  7218 ;; This function calls:
  7219 ;;		_nrf24l01CSLow
  7220 ;; This function is called by:
  7221 ;;		_nrf24l01Send
  7222 ;;		_nrf24l01ReceivePacket
  7223 ;;		_nrf24l01SendPacket
  7224 ;;		i1_nrf24l01Send
  7225 ;; This function uses a non-reentrant model
  7226 ;;
  7227                           
  7228                           
  7229                           ;psect for function _nrf24l01SPIStart
  7230  07F7                     _nrf24l01SPIStart:	
  7231                           
  7232                           ;interface.c: 66: nrf24l01CSLow();
  7233                           
  7234                           ;incstack = 0
  7235 ;; hardware stack exceeded
  7236                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
  7237  07F7  318E  269F  3187   	fcall	_nrf24l01CSLow
  7238                           
  7239                           ;interface.c: 67: _delay((unsigned long)((10)*(16000000/4000000.0)));
  7240  07FA  300D               	movlw	13
  7241  07FB                     u175_27:	
  7242  07FB  0B89               	decfsz	9,f
  7243  07FC  2FFB               	goto	u175_27
  7244  07FD  0000               	nop
  7245  07FE  0008               	return
  7246  07FF                     __end_of_nrf24l01SPIStart:	
  7247                           
  7248                           	psect	text34
  7249  0E9F                     __ptext34:	
  7250 ;; *************** function _nrf24l01CSLow *****************
  7251 ;; Defined at:
  7252 ;;		line 18 in file "interface.c"
  7253 ;; Parameters:    Size  Location     Type
  7254 ;;		None
  7255 ;; Auto vars:     Size  Location     Type
  7256 ;;		None
  7257 ;; Return value:  Size  Location     Type
  7258 ;;                  1    wreg      void 
  7259 ;; Registers used:
  7260 ;;		None
  7261 ;; Tracked objects:
  7262 ;;		On entry : 0/0
  7263 ;;		On exit  : 0/0
  7264 ;;		Unchanged: 0/0
  7265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7270 ;;Total ram usage:        0 bytes
  7271 ;; Hardware stack levels used:    1
  7272 ;; Hardware stack levels required when called:    7
  7273 ;; This function calls:
  7274 ;;		Nothing
  7275 ;; This function is called by:
  7276 ;;		_nrf24l01SPIStart
  7277 ;; This function uses a non-reentrant model
  7278 ;;
  7279                           
  7280                           
  7281                           ;psect for function _nrf24l01CSLow
  7282  0E9F                     _nrf24l01CSLow:	
  7283                           
  7284                           ;interface.c: 19: PORTAbits.RA1 = 0;
  7285                           
  7286                           ;incstack = 0
  7287 ;; hardware stack exceeded
  7288                           ; Regs used in _nrf24l01CSLow: []
  7289  0E9F  0020               	movlb	0	; select bank0
  7290  0EA0  108C               	bcf	12,1	;volatile
  7291  0EA1  0008               	return
  7292  0EA2                     __end_of_nrf24l01CSLow:	
  7293                           
  7294                           	psect	text35
  7295  0EB7                     __ptext35:	
  7296 ;; *************** function _nrf24l01SPISend *****************
  7297 ;; Defined at:
  7298 ;;		line 52 in file "interface.c"
  7299 ;; Parameters:    Size  Location     Type
  7300 ;;  data            1    wreg     unsigned char 
  7301 ;; Auto vars:     Size  Location     Type
  7302 ;;  data            1    0[COMMON] unsigned char 
  7303 ;; Return value:  Size  Location     Type
  7304 ;;                  1    wreg      unsigned char 
  7305 ;; Registers used:
  7306 ;;		wreg
  7307 ;; Tracked objects:
  7308 ;;		On entry : 0/0
  7309 ;;		On exit  : 0/0
  7310 ;;		Unchanged: 0/0
  7311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7316 ;;Total ram usage:        0 bytes
  7317 ;; Hardware stack levels used:    1
  7318 ;; Hardware stack levels required when called:    7
  7319 ;; This function calls:
  7320 ;;		Nothing
  7321 ;; This function is called by:
  7322 ;;		_nrf24l01Send
  7323 ;;		_nrf24l01ReceivePacket
  7324 ;;		_nrf24l01SendPacket
  7325 ;;		i1_nrf24l01Send
  7326 ;; This function uses a non-reentrant model
  7327 ;;
  7328                           
  7329                           
  7330                           ;psect for function _nrf24l01SPISend
  7331  0EB7                     _nrf24l01SPISend:	
  7332                           
  7333                           ;incstack = 0
  7334 ;; hardware stack exceeded
  7335                           ; Regs used in _nrf24l01SPISend: [wreg]
  7336                           ;nrf24l01SPISend@data stored from wreg
  7337  0EB7  00F0               	movwf	nrf24l01SPISend@data
  7338                           
  7339                           ;interface.c: 53: SSP1BUF = data;
  7340  0EB8  0870               	movf	nrf24l01SPISend@data,w
  7341  0EB9  0024               	movlb	4	; select bank4
  7342  0EBA  0091               	movwf	17	;volatile
  7343                           
  7344                           ;interface.c: 55: PORTCbits.RC4 = 1;
  7345  0EBB  0020               	movlb	0	; select bank0
  7346  0EBC  160E               	bsf	14,4	;volatile
  7347  0EBD                     i1l94:	
  7348                           ;interface.c: 57: while (!SSP1STATbits.BF){
  7349                           
  7350  0EBD  0024               	movlb	4	; select bank4
  7351  0EBE  1814               	btfsc	20,0	;volatile
  7352  0EBF  2EC2               	goto	i1l1866
  7353                           
  7354                           ;interface.c: 58: __nop();
  7355  0EC0  0000               	nop
  7356  0EC1  2EBD               	goto	i1l94
  7357  0EC2                     i1l1866:	
  7358                           
  7359                           ;interface.c: 59: };interface.c: 61: return SSP1BUF;
  7360  0EC2  0811               	movf	17,w	;volatile
  7361  0EC3  0008               	return
  7362  0EC4                     __end_of_nrf24l01SPISend:	
  7363                           
  7364                           	psect	text36
  7365  0EA8                     __ptext36:	
  7366 ;; *************** function _nrf24l01SPIEnd *****************
  7367 ;; Defined at:
  7368 ;;		line 71 in file "interface.c"
  7369 ;; Parameters:    Size  Location     Type
  7370 ;;		None
  7371 ;; Auto vars:     Size  Location     Type
  7372 ;;		None
  7373 ;; Return value:  Size  Location     Type
  7374 ;;                  1    wreg      void 
  7375 ;; Registers used:
  7376 ;;		wreg, status,2, status,0, pclath, cstack
  7377 ;; Tracked objects:
  7378 ;;		On entry : 0/0
  7379 ;;		On exit  : 0/0
  7380 ;;		Unchanged: 0/0
  7381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7386 ;;Total ram usage:        0 bytes
  7387 ;; Hardware stack levels used:    1
  7388 ;; Hardware stack levels required when called:    8
  7389 ;; This function calls:
  7390 ;;		_nrf24l01CSHigh
  7391 ;; This function is called by:
  7392 ;;		_nrf24l01Send
  7393 ;;		_nrf24l01ReceivePacket
  7394 ;;		_nrf24l01SendPacket
  7395 ;;		i1_nrf24l01Send
  7396 ;; This function uses a non-reentrant model
  7397 ;;
  7398                           
  7399                           
  7400                           ;psect for function _nrf24l01SPIEnd
  7401  0EA8                     _nrf24l01SPIEnd:	
  7402                           
  7403                           ;interface.c: 72: _delay((unsigned long)((10)*(16000000/4000000.0)));
  7404                           
  7405                           ;incstack = 0
  7406 ;; hardware stack exceeded
  7407                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
  7408  0EA8  300D               	movlw	13
  7409  0EA9                     u176_27:	
  7410  0EA9  0B89               	decfsz	9,f
  7411  0EAA  2EA9               	goto	u176_27
  7412  0EAB  0000               	nop
  7413                           
  7414                           ;interface.c: 73: nrf24l01CSHigh();
  7415  0EAC  318E  269C         	fcall	_nrf24l01CSHigh
  7416  0EAE  0008               	return
  7417  0EAF                     __end_of_nrf24l01SPIEnd:	
  7418                           
  7419                           	psect	text37
  7420  0E9C                     __ptext37:	
  7421 ;; *************** function _nrf24l01CSHigh *****************
  7422 ;; Defined at:
  7423 ;;		line 23 in file "interface.c"
  7424 ;; Parameters:    Size  Location     Type
  7425 ;;		None
  7426 ;; Auto vars:     Size  Location     Type
  7427 ;;		None
  7428 ;; Return value:  Size  Location     Type
  7429 ;;                  1    wreg      void 
  7430 ;; Registers used:
  7431 ;;		None
  7432 ;; Tracked objects:
  7433 ;;		On entry : 0/0
  7434 ;;		On exit  : 0/0
  7435 ;;		Unchanged: 0/0
  7436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7441 ;;Total ram usage:        0 bytes
  7442 ;; Hardware stack levels used:    1
  7443 ;; Hardware stack levels required when called:    7
  7444 ;; This function calls:
  7445 ;;		Nothing
  7446 ;; This function is called by:
  7447 ;;		_nrf24l01SPIEnd
  7448 ;; This function uses a non-reentrant model
  7449 ;;
  7450                           
  7451                           
  7452                           ;psect for function _nrf24l01CSHigh
  7453  0E9C                     _nrf24l01CSHigh:	
  7454                           
  7455                           ;interface.c: 24: PORTAbits.RA1 = 1;
  7456                           
  7457                           ;incstack = 0
  7458 ;; hardware stack exceeded
  7459                           ; Regs used in _nrf24l01CSHigh: []
  7460  0E9C  0020               	movlb	0	; select bank0
  7461  0E9D  148C               	bsf	12,1	;volatile
  7462  0E9E  0008               	return
  7463  0E9F                     __end_of_nrf24l01CSHigh:	
  7464                           
  7465                           	psect	text38
  7466  0EAF                     __ptext38:	
  7467 ;; *************** function _enableInterrupts *****************
  7468 ;; Defined at:
  7469 ;;		line 77 in file "interface.c"
  7470 ;; Parameters:    Size  Location     Type
  7471 ;;  enable          1    wreg     unsigned char 
  7472 ;; Auto vars:     Size  Location     Type
  7473 ;;  enable          1    0[COMMON] unsigned char 
  7474 ;; Return value:  Size  Location     Type
  7475 ;;                  1    wreg      void 
  7476 ;; Registers used:
  7477 ;;		wreg, status,0
  7478 ;; Tracked objects:
  7479 ;;		On entry : 0/0
  7480 ;;		On exit  : 0/0
  7481 ;;		Unchanged: 0/0
  7482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7487 ;;Total ram usage:        0 bytes
  7488 ;; Hardware stack levels used:    1
  7489 ;; Hardware stack levels required when called:    7
  7490 ;; This function calls:
  7491 ;;		Nothing
  7492 ;; This function is called by:
  7493 ;;		_nrf24l01Send
  7494 ;;		_nrf24l01SendPacket
  7495 ;;		i1_nrf24l01Send
  7496 ;; This function uses a non-reentrant model
  7497 ;;
  7498                           
  7499                           
  7500                           ;psect for function _enableInterrupts
  7501  0EAF                     _enableInterrupts:	
  7502                           
  7503                           ;incstack = 0
  7504 ;; hardware stack exceeded
  7505                           ; Regs used in _enableInterrupts: [wreg+status,0]
  7506                           ;enableInterrupts@enable stored from wreg
  7507  0EAF  00F0               	movwf	enableInterrupts@enable
  7508                           
  7509                           ;interface.c: 78: PIE0bits.INTE = enable;
  7510  0EB0  0C70               	rrf	enableInterrupts@enable,w
  7511  0EB1  0021               	movlb	1	; select bank1
  7512  0EB2  1C03               	skipc
  7513  0EB3  1010               	bcf	16,0	;volatile
  7514  0EB4  1803               	skipnc
  7515  0EB5  1410               	bsf	16,0	;volatile
  7516  0EB6  0008               	return
  7517  0EB7                     __end_of_enableInterrupts:	
  7518                           
  7519                           	psect	text39
  7520  0E99                     __ptext39:	
  7521 ;; *************** function _nrf24l01CELow *****************
  7522 ;; Defined at:
  7523 ;;		line 8 in file "interface.c"
  7524 ;; Parameters:    Size  Location     Type
  7525 ;;		None
  7526 ;; Auto vars:     Size  Location     Type
  7527 ;;		None
  7528 ;; Return value:  Size  Location     Type
  7529 ;;                  1    wreg      void 
  7530 ;; Registers used:
  7531 ;;		None
  7532 ;; Tracked objects:
  7533 ;;		On entry : 0/0
  7534 ;;		On exit  : 0/0
  7535 ;;		Unchanged: 0/0
  7536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7541 ;;Total ram usage:        0 bytes
  7542 ;; Hardware stack levels used:    1
  7543 ;; Hardware stack levels required when called:    7
  7544 ;; This function calls:
  7545 ;;		Nothing
  7546 ;; This function is called by:
  7547 ;;		_nrf24l01SetRXMode
  7548 ;;		_nrf24l01ReceivePacket
  7549 ;;		_nrf24l01SendPacket
  7550 ;;		_nrf24l01Init
  7551 ;;		i1_nrf24l01SetRXMode
  7552 ;; This function uses a non-reentrant model
  7553 ;;
  7554                           
  7555                           
  7556                           ;psect for function _nrf24l01CELow
  7557  0E99                     _nrf24l01CELow:	
  7558                           
  7559                           ;interface.c: 9: PORTAbits.RA0 = 0;
  7560                           
  7561                           ;incstack = 0
  7562 ;; hardware stack exceeded
  7563                           ; Regs used in _nrf24l01CELow: []
  7564  0E99  0020               	movlb	0	; select bank0
  7565  0E9A  100C               	bcf	12,0	;volatile
  7566  0E9B  0008               	return
  7567  0E9C                     __end_of_nrf24l01CELow:	
  7568                           
  7569                           	psect	text40
  7570  0E96                     __ptext40:	
  7571 ;; *************** function _nrf24l01CEHigh *****************
  7572 ;; Defined at:
  7573 ;;		line 13 in file "interface.c"
  7574 ;; Parameters:    Size  Location     Type
  7575 ;;		None
  7576 ;; Auto vars:     Size  Location     Type
  7577 ;;		None
  7578 ;; Return value:  Size  Location     Type
  7579 ;;                  1    wreg      void 
  7580 ;; Registers used:
  7581 ;;		None
  7582 ;; Tracked objects:
  7583 ;;		On entry : 0/0
  7584 ;;		On exit  : 0/0
  7585 ;;		Unchanged: 0/0
  7586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7591 ;;Total ram usage:        0 bytes
  7592 ;; Hardware stack levels used:    1
  7593 ;; Hardware stack levels required when called:    7
  7594 ;; This function calls:
  7595 ;;		Nothing
  7596 ;; This function is called by:
  7597 ;;		_nrf24l01SetRXMode
  7598 ;;		_nrf24l01ReceivePacket
  7599 ;;		_nrf24l01SendPacket
  7600 ;;		_nrf24l01Init
  7601 ;;		i1_nrf24l01SetRXMode
  7602 ;; This function uses a non-reentrant model
  7603 ;;
  7604                           
  7605                           
  7606                           ;psect for function _nrf24l01CEHigh
  7607  0E96                     _nrf24l01CEHigh:	
  7608                           
  7609                           ;interface.c: 14: PORTAbits.RA0 = 1;
  7610                           
  7611                           ;incstack = 0
  7612 ;; hardware stack exceeded
  7613                           ; Regs used in _nrf24l01CEHigh: []
  7614  0E96  0020               	movlb	0	; select bank0
  7615  0E97  140C               	bsf	12,0	;volatile
  7616  0E98  0008               	return
  7617  0E99                     __end_of_nrf24l01CEHigh:	
  7618                           
  7619                           	psect	text41
  7620  0768                     __ptext41:	
  7621 ;; *************** function _strcmp *****************
  7622 ;; Defined at:
  7623 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  7624 ;; Parameters:    Size  Location     Type
  7625 ;;  s1              1    wreg     PTR const unsigned char 
  7626 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7627 ;;		 -> loop@packet(33), 
  7628 ;;  s2              1    0[COMMON] PTR const unsigned char 
  7629 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  7630 ;; Auto vars:     Size  Location     Type
  7631 ;;  s1              1    4[COMMON] PTR const unsigned char 
  7632 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7633 ;;		 -> loop@packet(33), 
  7634 ;;  r               1    3[COMMON] char 
  7635 ;; Return value:  Size  Location     Type
  7636 ;;                  2    0[COMMON] int 
  7637 ;; Registers used:
  7638 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7639 ;; Tracked objects:
  7640 ;;		On entry : 0/0
  7641 ;;		On exit  : 0/0
  7642 ;;		Unchanged: 0/0
  7643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7644 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7645 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7646 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7647 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7648 ;;Total ram usage:        5 bytes
  7649 ;; Hardware stack levels used:    1
  7650 ;; This function calls:
  7651 ;;		Nothing
  7652 ;; This function is called by:
  7653 ;;		_nrf24l01CheckACK
  7654 ;; This function uses a non-reentrant model
  7655 ;;
  7656                           
  7657                           
  7658                           ;psect for function _strcmp
  7659  0768                     _strcmp:	
  7660                           
  7661                           ;incstack = 0
  7662                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
  7663                           ;strcmp@s1 stored from wreg
  7664  0768  00F4               	movwf	strcmp@s1
  7665  0769  2F72               	goto	i1l2104
  7666  076A                     i1l2100:	
  7667  076A  3001               	movlw	1
  7668  076B  00F2               	movwf	??_strcmp
  7669  076C  0872               	movf	??_strcmp,w
  7670  076D  07F4               	addwf	strcmp@s1,f
  7671  076E  3001               	movlw	1
  7672  076F  00F2               	movwf	??_strcmp
  7673  0770  0872               	movf	??_strcmp,w
  7674  0771  07F0               	addwf	strcmp@s2,f
  7675  0772                     i1l2104:	
  7676  0772  0874               	movf	strcmp@s1,w
  7677  0773  0086               	movwf	6
  7678  0774  0187               	clrf	7
  7679  0775  0870               	movf	strcmp@s2,w
  7680  0776  0084               	movwf	4
  7681  0777  3001               	movlw	1	; select bank2/3
  7682  0778  0085               	movwf	5
  7683  0779  0300               	decf	0,w
  7684  077A  3AFF               	xorlw	255
  7685  077B  0701               	addwf	1,w
  7686  077C  00F2               	movwf	??_strcmp
  7687  077D  0872               	movf	??_strcmp,w
  7688  077E  00F3               	movwf	strcmp@r
  7689  077F  0873               	movf	strcmp@r,w
  7690  0780  1D03               	btfss	3,2
  7691  0781  2F88               	goto	i1l2108
  7692  0782  0874               	movf	strcmp@s1,w
  7693  0783  0086               	movwf	6
  7694  0784  0187               	clrf	7
  7695  0785  0801               	movf	1,w
  7696  0786  1D03               	btfss	3,2
  7697  0787  2F6A               	goto	i1l2100
  7698  0788                     i1l2108:	
  7699  0788  0873               	movf	strcmp@r,w
  7700  0789  00F0               	movwf	?_strcmp
  7701  078A  01F1               	clrf	?_strcmp+1
  7702  078B  1BF0               	btfsc	?_strcmp,7
  7703  078C  03F1               	decf	?_strcmp+1,f
  7704  078D  0008               	return
  7705  078E                     __end_of_strcmp:	
  7706                           
  7707                           	psect	text42
  7708  0EEA                     __ptext42:	
  7709 ;; *************** function _exception *****************
  7710 ;; Defined at:
  7711 ;;		line 81 in file "interface.c"
  7712 ;; Parameters:    Size  Location     Type
  7713 ;;  exception       1    wreg     unsigned char 
  7714 ;; Auto vars:     Size  Location     Type
  7715 ;;  exception       1   12[COMMON] unsigned char 
  7716 ;; Return value:  Size  Location     Type
  7717 ;;                  1    wreg      void 
  7718 ;; Registers used:
  7719 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7720 ;; Tracked objects:
  7721 ;;		On entry : 0/0
  7722 ;;		On exit  : 0/0
  7723 ;;		Unchanged: 0/0
  7724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7726 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7727 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7728 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7729 ;;Total ram usage:        3 bytes
  7730 ;; Hardware stack levels used:    1
  7731 ;; Hardware stack levels required when called:    2
  7732 ;; This function calls:
  7733 ;;		___wmul
  7734 ;;		i1_flashUpdate
  7735 ;; This function is called by:
  7736 ;;		_nrf24l01ISR
  7737 ;; This function uses a non-reentrant model
  7738 ;;
  7739                           
  7740                           
  7741                           ;psect for function _exception
  7742  0EEA                     _exception:	
  7743                           
  7744                           ;incstack = 0
  7745                           ; Regs used in _exception: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7746                           ;exception@exception stored from wreg
  7747  0EEA  00FC               	movwf	exception@exception
  7748                           
  7749                           ;interface.c: 82: romData.bootMode = (unsigned) (exception * 10);
  7750  0EEB  087C               	movf	exception@exception,w
  7751  0EEC  00FA               	movwf	??_exception
  7752  0EED  01FB               	clrf	??_exception+1
  7753  0EEE  087A               	movf	??_exception,w
  7754  0EEF  00F0               	movwf	___wmul@multiplier
  7755  0EF0  087B               	movf	??_exception+1,w
  7756  0EF1  00F1               	movwf	___wmul@multiplier+1
  7757  0EF2  300A               	movlw	10
  7758  0EF3  00F2               	movwf	___wmul@multiplicand
  7759  0EF4  3000               	movlw	0
  7760  0EF5  00F3               	movwf	___wmul@multiplicand+1
  7761  0EF6  318F  2733  318E   	fcall	___wmul
  7762  0EF9  0871               	movf	?___wmul+1,w
  7763  0EFA  0020               	movlb	0	; select bank0
  7764  0EFB  00EE               	movwf	_romData+18
  7765  0EFC  0870               	movf	?___wmul,w
  7766  0EFD  00ED               	movwf	_romData+17
  7767                           
  7768                           ;interface.c: 83: flashUpdate();
  7769  0EFE  3187  27D6         	fcall	i1_flashUpdate
  7770  0F00  0001               	reset	;# 
  7771  0F01  0008               	return
  7772  0F02                     __end_of_exception:	
  7773                           
  7774                           	psect	text43
  7775  07D6                     __ptext43:	
  7776 ;; *************** function i1_flashUpdate *****************
  7777 ;; Defined at:
  7778 ;;		line 97 in file "flash.c"
  7779 ;; Parameters:    Size  Location     Type
  7780 ;;		None
  7781 ;; Auto vars:     Size  Location     Type
  7782 ;;  flashUpdate     2    8[COMMON] unsigned int 
  7783 ;; Return value:  Size  Location     Type
  7784 ;;                  1    wreg      void 
  7785 ;; Registers used:
  7786 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7787 ;; Tracked objects:
  7788 ;;		On entry : 0/0
  7789 ;;		On exit  : 0/0
  7790 ;;		Unchanged: 0/0
  7791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7793 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7794 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7795 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7796 ;;Total ram usage:        4 bytes
  7797 ;; Hardware stack levels used:    1
  7798 ;; Hardware stack levels required when called:    1
  7799 ;; This function calls:
  7800 ;;		i1_flashWriteByte
  7801 ;; This function is called by:
  7802 ;;		_exception
  7803 ;; This function uses a non-reentrant model
  7804 ;;
  7805                           
  7806                           
  7807                           ;psect for function i1_flashUpdate
  7808  07D6                     i1_flashUpdate:	
  7809                           
  7810                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  7811                           
  7812                           ;incstack = 0
  7813                           ; Regs used in i1_flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7814  07D6  01F8               	clrf	i1flashUpdate@i
  7815  07D7  01F9               	clrf	i1flashUpdate@i+1
  7816  07D8                     L3:	
  7817  07D8  3000               	movlw	0
  7818  07D9  0279               	subwf	i1flashUpdate@i+1,w
  7819  07DA  3020               	movlw	32
  7820  07DB  1903               	skipnz
  7821  07DC  0278               	subwf	i1flashUpdate@i,w
  7822  07DD  1803               	btfsc	3,0
  7823  07DE  0008               	return
  7824                           
  7825                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  7826  07DF  0879               	movf	i1flashUpdate@i+1,w
  7827  07E0  00F1               	movwf	i1flashWriteByte@offset+1
  7828  07E1  0878               	movf	i1flashUpdate@i,w
  7829  07E2  00F0               	movwf	i1flashWriteByte@offset
  7830  07E3  0878               	movf	i1flashUpdate@i,w
  7831  07E4  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  7832  07E5  0086               	movwf	6
  7833  07E6  3001               	movlw	1	; select bank2/3
  7834  07E7  0087               	movwf	7
  7835  07E8  0801               	movf	1,w
  7836  07E9  00F6               	movwf	??i1_flashUpdate
  7837  07EA  01F7               	clrf	??i1_flashUpdate+1
  7838  07EB  0876               	movf	??i1_flashUpdate,w
  7839  07EC  00F2               	movwf	i1flashWriteByte@data
  7840  07ED  0877               	movf	??i1_flashUpdate+1,w
  7841  07EE  00F3               	movwf	i1flashWriteByte@data+1
  7842  07EF  3186  26EC  3187   	fcall	i1_flashWriteByte
  7843  07F2  3001               	movlw	1
  7844  07F3  07F8               	addwf	i1flashUpdate@i,f
  7845  07F4  3000               	movlw	0
  7846  07F5  3DF9               	addwfc	i1flashUpdate@i+1,f
  7847  07F6  2FD8               	goto	L3
  7848  07F7                     __end_ofi1_flashUpdate:	
  7849                           
  7850                           	psect	text44
  7851  06EC                     __ptext44:	
  7852 ;; *************** function i1_flashWriteByte *****************
  7853 ;; Defined at:
  7854 ;;		line 8 in file "flash.c"
  7855 ;; Parameters:    Size  Location     Type
  7856 ;;  offset          2    0[COMMON] unsigned int 
  7857 ;;  data            2    2[COMMON] unsigned int 
  7858 ;; Auto vars:     Size  Location     Type
  7859 ;;  flashWriteBy    2    4[COMMON] unsigned int 
  7860 ;; Return value:  Size  Location     Type
  7861 ;;                  1    wreg      void 
  7862 ;; Registers used:
  7863 ;;		wreg, status,2, status,0
  7864 ;; Tracked objects:
  7865 ;;		On entry : 0/0
  7866 ;;		On exit  : 0/0
  7867 ;;		Unchanged: 0/0
  7868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7869 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7870 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7872 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7873 ;;Total ram usage:        6 bytes
  7874 ;; Hardware stack levels used:    1
  7875 ;; This function calls:
  7876 ;;		Nothing
  7877 ;; This function is called by:
  7878 ;;		i1_flashUpdate
  7879 ;; This function uses a non-reentrant model
  7880 ;;
  7881                           
  7882                           
  7883                           ;psect for function i1_flashWriteByte
  7884  06EC                     i1_flashWriteByte:	
  7885                           
  7886                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  7887                           
  7888                           ;incstack = 0
  7889                           ; Regs used in i1_flashWriteByte: [wreg+status,2+status,0]
  7890  06EC  138B               	bcf	11,7	;volatile
  7891                           
  7892                           ;flash.c: 15: PMCON1 = 0x00;
  7893  06ED  0031               	movlb	17	; select bank17
  7894  06EE  0195               	clrf	21	;volsfr
  7895                           
  7896                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  7897  06EF  0870               	movf	i1flashWriteByte@offset,w
  7898  06F0  3EE0               	addlw	224
  7899  06F1  00F4               	movwf	i1flashWriteByte@address
  7900  06F2  301F               	movlw	31
  7901  06F3  3D71               	addwfc	i1flashWriteByte@offset+1,w
  7902  06F4  00F5               	movwf	i1flashWriteByte@address+1
  7903                           
  7904                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  7905  06F5  0874               	movf	i1flashWriteByte@address,w
  7906  06F6  0091               	movwf	17	;volatile
  7907                           
  7908                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  7909  06F7  0875               	movf	i1flashWriteByte@address+1,w
  7910  06F8  0092               	movwf	18	;volatile
  7911                           
  7912                           ;flash.c: 21: PMCON1bits.FREE = 1;
  7913  06F9  1615               	bsf	21,4	;volsfr
  7914                           
  7915                           ;flash.c: 22: PMCON1bits.WREN = 1;
  7916  06FA  1515               	bsf	21,2	;volsfr
  7917                           
  7918                           ;flash.c: 24: PMCON2 = 0x55;
  7919  06FB  3055               	movlw	85
  7920  06FC  0096               	movwf	22	;volsfr
  7921                           
  7922                           ;flash.c: 25: PMCON2 = 0xAA;
  7923  06FD  30AA               	movlw	170
  7924  06FE  0096               	movwf	22	;volsfr
  7925                           
  7926                           ;flash.c: 27: PMCON1bits.WR = 1;
  7927  06FF  1495               	bsf	21,1	;volsfr
  7928                           
  7929                           ;flash.c: 29: __nop();
  7930  0700  0000               	nop
  7931                           
  7932                           ;flash.c: 30: __nop();
  7933  0701  0000               	nop
  7934                           
  7935                           ;flash.c: 32: PMCON1bits.WREN = 0;
  7936  0702  0031               	movlb	17	; select bank17
  7937  0703  1115               	bcf	21,2	;volsfr
  7938                           
  7939                           ;flash.c: 36: PMCON1 = 0x00;
  7940  0704  0195               	clrf	21	;volsfr
  7941                           
  7942                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  7943  0705  0874               	movf	i1flashWriteByte@address,w
  7944  0706  0091               	movwf	17	;volatile
  7945                           
  7946                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  7947  0707  0875               	movf	i1flashWriteByte@address+1,w
  7948  0708  0092               	movwf	18	;volatile
  7949                           
  7950                           ;flash.c: 41: PMCON1bits.FREE = 0;
  7951  0709  1215               	bcf	21,4	;volsfr
  7952                           
  7953                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  7954  070A  1695               	bsf	21,5	;volsfr
  7955                           
  7956                           ;flash.c: 43: PMCON1bits.WREN = 1;
  7957  070B  1515               	bsf	21,2	;volsfr
  7958                           
  7959                           ;flash.c: 45: PMDATL = (data >> 0);
  7960  070C  0872               	movf	i1flashWriteByte@data,w
  7961  070D  0093               	movwf	19	;volatile
  7962                           
  7963                           ;flash.c: 46: PMDATH = (data >> 8);
  7964  070E  0873               	movf	i1flashWriteByte@data+1,w
  7965  070F  0094               	movwf	20	;volatile
  7966                           
  7967                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  7968  0710  1295               	bcf	21,5	;volsfr
  7969                           
  7970                           ;flash.c: 50: PMCON2 = 0x55;
  7971  0711  3055               	movlw	85
  7972  0712  0096               	movwf	22	;volsfr
  7973                           
  7974                           ;flash.c: 51: PMCON2 = 0xAA;
  7975  0713  30AA               	movlw	170
  7976  0714  0096               	movwf	22	;volsfr
  7977                           
  7978                           ;flash.c: 53: PMCON1bits.WR = 1;
  7979  0715  1495               	bsf	21,1	;volsfr
  7980                           
  7981                           ;flash.c: 55: __nop();
  7982  0716  0000               	nop
  7983                           
  7984                           ;flash.c: 56: __nop();
  7985  0717  0000               	nop
  7986                           
  7987                           ;flash.c: 58: PMCON1bits.WREN = 0;
  7988  0718  0031               	movlb	17	; select bank17
  7989  0719  1115               	bcf	21,2	;volsfr
  7990                           
  7991                           ;flash.c: 61: INTCONbits.GIE = 1;
  7992  071A  178B               	bsf	11,7	;volatile
  7993  071B  0008               	return
  7994  071C                     __end_ofi1_flashWriteByte:	
  7995                           
  7996                           	psect	text45
  7997  0F33                     __ptext45:	
  7998 ;; *************** function ___wmul *****************
  7999 ;; Defined at:
  8000 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  8001 ;; Parameters:    Size  Location     Type
  8002 ;;  multiplier      2    0[COMMON] unsigned int 
  8003 ;;  multiplicand    2    2[COMMON] unsigned int 
  8004 ;; Auto vars:     Size  Location     Type
  8005 ;;  product         2    4[COMMON] unsigned int 
  8006 ;; Return value:  Size  Location     Type
  8007 ;;                  2    0[COMMON] unsigned int 
  8008 ;; Registers used:
  8009 ;;		wreg, status,2, status,0
  8010 ;; Tracked objects:
  8011 ;;		On entry : 0/0
  8012 ;;		On exit  : 0/0
  8013 ;;		Unchanged: 0/0
  8014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8015 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8016 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8018 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8019 ;;Total ram usage:        6 bytes
  8020 ;; Hardware stack levels used:    1
  8021 ;; This function calls:
  8022 ;;		Nothing
  8023 ;; This function is called by:
  8024 ;;		_exception
  8025 ;; This function uses a non-reentrant model
  8026 ;;
  8027                           
  8028                           
  8029                           ;psect for function ___wmul
  8030  0F33                     ___wmul:	
  8031                           
  8032                           ;incstack = 0
  8033                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8034  0F33  01F4               	clrf	___wmul@product
  8035  0F34  01F5               	clrf	___wmul@product+1
  8036  0F35                     i1l2124:	
  8037  0F35  1C70               	btfss	___wmul@multiplier,0
  8038  0F36  2F3B               	goto	i1l447
  8039  0F37  0872               	movf	___wmul@multiplicand,w
  8040  0F38  07F4               	addwf	___wmul@product,f
  8041  0F39  0873               	movf	___wmul@multiplicand+1,w
  8042  0F3A  3DF5               	addwfc	___wmul@product+1,f
  8043  0F3B                     i1l447:	
  8044  0F3B  3001               	movlw	1
  8045  0F3C                     u104_25:	
  8046  0F3C  35F2               	lslf	___wmul@multiplicand,f
  8047  0F3D  0DF3               	rlf	___wmul@multiplicand+1,f
  8048  0F3E  0B89               	decfsz	9,f
  8049  0F3F  2F3C               	goto	u104_25
  8050  0F40  3001               	movlw	1
  8051  0F41                     u105_25:	
  8052  0F41  36F1               	lsrf	___wmul@multiplier+1,f
  8053  0F42  0CF0               	rrf	___wmul@multiplier,f
  8054  0F43  0B89               	decfsz	9,f
  8055  0F44  2F41               	goto	u105_25
  8056  0F45  0870               	movf	___wmul@multiplier,w
  8057  0F46  0471               	iorwf	___wmul@multiplier+1,w
  8058  0F47  1D03               	btfss	3,2
  8059  0F48  2F35               	goto	i1l2124
  8060  0F49  0875               	movf	___wmul@product+1,w
  8061  0F4A  00F1               	movwf	?___wmul+1
  8062  0F4B  0874               	movf	___wmul@product,w
  8063  0F4C  00F0               	movwf	?___wmul
  8064  0F4D  0008               	return
  8065  0F4E                     __end_of___wmul:	
  8066  007E                     btemp	set	126	;btemp
  8067  007E                     int$flags	set	126
  8068  007E                     wtemp0	set	126


Data Sizes:
    Strings     40
    Constant    25
    Data        0
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     57      79
    BANK1            80     67      71
    BANK2            80      0      65
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_9(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK2[32]), RXPacket(BANK2[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_10(CODE[5]), STR_8(CODE[6]), STR_7(CODE[5]), STR_6(CODE[4]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[4]), STR_2(CODE[2]), 
		 -> setMessage@tempString(BANK0[16]), STR_1(CODE[2]), romData.name(BANK0[16]), romData(BANK0[19]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    ultoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> setMessage@tempString(BANK0[16]), 

    sp__ltoa	PTR unsigned char  size(1) Largest target is 0

    nrf24l01SendPacket@Packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    TXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), 

    checkTXPower@rxPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), 

    sp__ultoa	PTR unsigned char  size(1) Largest target is 16
		 -> setMessage@tempString(BANK0[16]), 

    setMessage@topic	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_10(CODE[5]), STR_8(CODE[6]), STR_7(CODE[5]), STR_6(CODE[4]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[4]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    setMessage@packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_exception
    _nrf24l01ReceivePacket->i1_memset
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send
    _exception->i1_flashUpdate
    i1_flashUpdate->i1_flashWriteByte

Critical Paths under _main in BANK0

    _main->_loop
    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01Send
    _loop->_setMessage
    _setMessage->_getADCValue
    _ultoa->___lldiv
    _nrf24l01SendPacket->_strlen
    _nrf24l01SetRXMode->_nrf24l01Send
    _getADCValue->___lldiv
    _checkTXPower->_nrf24l01ChangeTXPower
    _nrf24l01ChangeTXPower->_nrf24l01Send
    _flashUpdate->_flashWriteByte
    _flashRealod->_flashReadByte

Critical Paths under _ISR in BANK0

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK1

    _main->_loop

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                34    34      0   28267
                                             56 BANK0      1     1      0
                                             34 BANK1     33    33      0
                        _flashRealod
                        _flashUpdate
                               _loop
                       _nrf24l01Init
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     200
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    2031
                                             14 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               10    10      0    2031
                                              4 BANK0     10    10      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                38    38      0   15532
                                             52 BANK0      4     4      0
                                              0 BANK1     34    34      0
                       _checkTXPower
                        _getADCValue
                       _nrf24l01Send
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setMessage                                          23    17      6    5078
                                             29 BANK0     23    17      6
                        _getADCValue (ARG)
                             _memset
                             _strcat
                              _ultoa
 ---------------------------------------------------------------------------------
 (2) _ultoa                                               13     7      6    1736
                                             15 BANK0     13     7      6
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     337
                                              1 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (2) _strcat                                               5     3      2     723
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     565
                                              1 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendPacket                                   4     4      0    4616
                                              9 BANK0      4     4      0
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01ChangeTXPower
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               8     6      2     126
                                              1 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    1921
                                              4 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         14    10      4    1460
                                             15 BANK0     14    10      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     270
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     696
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _checkTXPower                                         2     2      0    2101
                                              8 BANK0      2     2      0
              _nrf24l01ChangeTXPower
                _nrf24l01GetRXPacket
 ---------------------------------------------------------------------------------
 (3) _nrf24l01GetRXPacket                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01ChangeTXPower                                4     2      2    2078
                                              4 BANK0      4     2      2
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Send                                         3     2      1    1787
                                              1 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (1) _flashUpdate                                          4     4      0     423
                                              7 BANK0      4     4      0
                     _flashWriteByte
 ---------------------------------------------------------------------------------
 (2) _flashWriteByte                                       6     2      4     333
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _flashRealod                                          3     3      0     271
                                             10 BANK0      3     3      0
                      _flashReadByte
 ---------------------------------------------------------------------------------
 (2) _flashReadByte                                        9     7      2     181
                                              1 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    2674
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (8) _nrf24l01ISR                                          2     2      0    2674
                                             13 COMMON     1     1      0
                                              0 BANK0      1     1      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceivePacket
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) _nrf24l01ReceivePacket                                3     3      0     639
                                              8 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_memset                                            8     2      6     211
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (9) _nrf24l01CheckACK                                     1     1      0     617
                                              7 COMMON     1     1      0
                             _strcmp
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) i1_nrf24l01SetRXMode                                  3     3      0     401
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_nrf24l01Send                                      3     2      1     267
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _strcmp                                              5     3      2     216
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (9) _exception                                            3     3      0     589
                                             10 COMMON     3     3      0
                             ___wmul
                      i1_flashUpdate
 ---------------------------------------------------------------------------------
 (10) i1_flashUpdate                                       4     4      0     297
                                              6 COMMON     4     4      0
                   i1_flashWriteByte
 ---------------------------------------------------------------------------------
 (11) i1_flashWriteByte                                    6     2      4     207
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     270
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _flashRealod
     _flashReadByte
   _flashUpdate
     _flashWriteByte
   _loop
     _checkTXPower
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01GetRXPacket
     _getADCValue
       ___lldiv
       ___lmul
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _nrf24l01SendPacket
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strlen
     _setMessage
       _getADCValue (ARG)
         ___lldiv
         ___lmul
       _memset (ARG)
       _strcat (ARG)
       _ultoa (ARG)
         ___lldiv
         ___llmod
     _sleep
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendPacket
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01ChangeTXPower
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _strlen
   _setMessage
     _getADCValue (ARG)
       ___lldiv
       ___lmul
     _memset (ARG)
     _strcat (ARG)
     _ultoa (ARG)
       ___lldiv
       ___llmod
   _sleep
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
       ___wmul
       i1_flashUpdate
         i1_flashWriteByte
     _nrf24l01CheckACK
       _strcmp
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01ReceivePacket
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     39      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     43      47       7       88.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      41       9       81.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      E5      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      E5      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Thu Jul 19 13:15:05 2018

           flashReadByte@result 0026                    flashRealod@i 002B                     __CFG_CP$OFF 0000  
           ___wmul@multiplicand 0072             nrf24l01Send@command 0023                     __CFG_LVP$ON 0000  
                           l221 0EC4                             l214 03C1                             l324 0143  
                           l328 0159                             l865 0300                    flashUpdate@i 0029  
                  __CFG_CPD$OFF 0000                             _ISR 0004                             u805 0511  
                           u835 0530                             u765 04E5                             u855 0549  
                           u785 04F1                             u865 0554                             u795 0505  
                           u965 057A                             wreg 0009             nrf24l01SendPacket@i 002C  
                          ?_ISR 0070                  ??_nrf24l01Init 002E                            l2030 0616  
                          l2050 075B                            l2300 03BA                            l2116 0794  
                          l2044 0748                            l2142 06CF                            l2302 03E4  
                          l2118 079F                            l2046 0753                            l2054 0295  
                          l2064 02C2                            l2090 058C                            l2138 06C5  
                          l3038 0398                            l2096 059E                            l2360 0199  
                          l2352 0174                            l2344 0148                            l2372 01C4  
                          l2356 0184                            l1902 04E2                            l2374 01AF  
                          l1912 0510                            l1904 04F0                            l2384 01ED  
                          l2376 01C9                  ??_nrf24l01Send 0022                            l2298 03C6  
                          l2386 01CD                            l1916 051B                            l1932 0553  
                          l1926 052D                            l2654 0F6F                            l1928 053B  
                          l1936 055E                            l2786 0F1F                            l2974 034F  
                          STR_1 103E                    __CFG_WDTE$ON 0000                            STR_2 103E  
                          STR_3 1036                            STR_4 1028                            STR_5 101E  
                          STR_6 103A                            STR_7 1023                            STR_8 1013  
                          STR_9 1032                            u1235 0193                            u1085 06D0  
                          u1095 06D7                            u1607 0728                            u1617 0738  
                          u1707 0613                            u1627 0153                            u1717 03B7  
                          u1637 01A0                            u1647 01BC                            u1657 01C5  
                          u1667 01DD                            u1677 01F1                            u1597 0330  
                          u1687 05F6                            u1697 0608                            i1l94 0EBD  
                          _WPUA 020C                            _WPUC 020E  __size_of_nrf24l01InterfaceInit 001C  
                  __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 0FA0  
                          _main 0314                            _loop 0029                 ??_flashReadByte 0023  
                          fsr0h 0005                            fsr1h 0007                            indf0 0000  
                          fsr0l 0004                            indf1 0001                            fsr1l 0006  
                          btemp 007E  __size_of_nrf24l01ReceivePacket 0059                   __CFG_BORV$LOW 0000  
 __end_of_nrf24l01ReceivePacket 047D                            start 000F                   __CFG_CSWEN$ON 0000  
                 __CFG_MCLRE$ON 0000     __size_of_nrf24l01SendPacket 00BA                           ??_ISR 007E  
          __size_of_getADCValue 0088                 ??_nrf24l01CELow 0070                 ??_nrf24l01CSLow 0070  
                         ?_main 0070                           ?_loop 0070                           STR_10 102D  
               __end_of___lldiv 0524                 __end_of___llmod 0567                  __CFG_DEBUG$OFF 0000  
                         i1l209 000D                           i1l351 0680                           i1l447 0F3B  
        enableInterrupts@enable 0070                i1_flashWriteByte 06EC                      i1memset@p1 0070  
                i1flashUpdate@i 0078             ___lmul@multiplicand 0025                   __CFG_PWRTE$ON 0000  
                         _sleep 0EC4                           _ultoa 028B                  __CFG_BOREN$OFF 0000  
              _enableInterrupts 0EAF                           status 0003                           wtemp0 007E  
   __end_ofi1_nrf24l01SetRXMode 0654                __end_ofi1_memset 0F1A  __size_of_nrf24l01ChangeTXPower 003F  
             getADCValue@adcSum 0039   __end_of_nrf24l01ChangeTXPower 05A6                _nrf24l01SPIStart 07F7  
               __initialization 0011                _nrf24l01CheckACK 0FA0                    __end_of_main 039C  
                  __end_of_loop 013D    nrf24l01ChangeTXPower@rfSetup 0027                ??_nrf24l01CEHigh 0070  
                        ??_main 0058                          ??_loop 0054                ??_nrf24l01CSHigh 0070  
              ??_nrf24l01SPIEnd 0070             _nrf24l01GetRXPacket 0002          __size_ofi1_flashUpdate 0021  
      __size_of_nrf24l01SPISend 000D                ___llmod@dividend 0025                          _ADRESH 009C  
                        _ADRESL 009B                          ?_sleep 0070                          _ANSELA 018C  
                        _ANSELC 018E                          ?_ultoa 002F                ??_flashWriteByte 0025  
                        i1l2100 076A                          i1l2104 0772                          i1l2124 0F35  
                        i1l2108 0788                          _ODCONA 028C                          _ODCONC 028E  
                        u104_25 0F3C                          i1l2182 064D                          u105_25 0F41  
                        i1l2830 0463                          i1l1866 0EC2                          i1l2834 046B  
                        i1l2826 0453                          i1l2854 0673                          i1l2846 0664  
                        i1l2864 0681                          i1l2794 0F06                          _INLVLA 038C  
                        _INLVLC 038E                          u172_27 062F           __size_of_checkTXPower 0014  
                        u173_27 0640                          u174_27 064A                          u175_27 07FB  
                        _PMADRH 0892                          u176_27 0EA9                          _PMADRL 0891  
                        _PMDATH 0894                          _PMDATL 0893                          _PMCON1 0895  
                        _PMCON2 0896            ?_nrf24l01GetRXPacket 0070            __size_of_flashRealod 0020  
            flashWriteByte@data 0023            __size_of_flashUpdate 0023            __size_of_nrf24l01ISR 0036  
       nrf24l01SetRXMode@config 0025                          ___lmul 06BC         nrf24l01SetRXMode@rxMode 0026  
                        ___wmul 0F33                  __CFG_STVREN$ON 0000                       ??___lldiv 0029  
                     ??___llmod 0029            __end_of_nrf24l01Init 0742            __end_of_nrf24l01Send 1000  
                        _memset 0F1A           _nrf24l01InitRegisters 01F7                          _strcat 0742  
                        _strcmp 0768                          _strcpy 0F69                          _strlen 078E  
     i1nrf24l01SetRXMode@config 0075                __end_of_romArray 2000       i1nrf24l01SetRXMode@rxMode 0076  
                  _checkTXPower 0ED6                          ultoa@c 003A                          ultoa@v 0036  
            getADCValue@adcLoop 0038         __end_of__initialization 0025           ??_nrf24l01GetRXPacket 0021  
      nrf24l01SendPacket@Packet 002B              getADCValue@channel 0037                   i1_flashUpdate 07D6  
            getADCValue@divider 002F                  __pcstackCOMMON 0070                   __end_of_sleep 0ED6  
                 __end_of_ultoa 0314   nrf24l01InitRegisters@enRXAddr 002B                       ?i1_memset 0070  
                       ??_sleep 0021                     loop@rfSetup 00A0                         ??_ultoa 0035  
                    __pbssBANK0 0059                      __pbssBANK1 00E3                      __pbssBANK2 0120  
             ??_nrf24l01SPISend 0070              __size_of_exception 0018                  ?i1_flashUpdate 0070  
       __size_ofi1_nrf24l01Send 001B        __end_ofi1_flashWriteByte 071C                      __pmaintext 0314  
                       ?___lmul 0021                         ?___wmul 0070                 __CFG_PPS1WAY$ON 0000  
             _nrf24l01SetRXMode 05E2          ?_nrf24l01InitRegisters 0070                      __pintentry 0004  
           nrf24l01SPISend@data 0070                         ?_memset 0021                  ___lmul@product 0029  
            ?_nrf24l01SetRXMode 0070        __end_of_enableInterrupts 0EB7             __CFG_RSTOSC$HFINT32 0000  
                       ?_strcat 0021                         ?_strcmp 0070                         ?_strcpy 0021  
                       ?_strlen 0021           __end_of_n_ADDRESS_MUL 1041                      ??i1_memset 0076  
           ??_nrf24l01SetRXMode 0024        __end_of_nrf24l01SPIStart 07FF                         _SSP1BUF 0211  
      __end_of_nrf24l01CheckACK 0FC0           _nrf24l01InterfaceInit 0F84           __end_of_flashReadByte 06BC  
              __p_romArray_text 1FE0      __end_of_nrf24l01SendPacket 01F7                   ??_getADCValue 0033  
         __size_of_nrf24l01Init 0026           __size_of_nrf24l01Send 0020       __end_of_nrf24l01SetRXMode 061D  
         _nrf24l01ReceivePacket 0424                 __size_of___lmul 0030                         ___lldiv 04D1  
               __size_of___wmul 001B                         ___llmod 0524           __end_of_nrf24l01CELow 0E9C  
               __size_of_memset 0019           __end_of_nrf24l01CSLow 0EA2                         __ptext1 0F69  
                       __ptext2 071C                         __ptext3 0F84                         __ptext4 01F7  
                       __ptext5 0029                         __ptext6 0EC4                         __ptext7 047D  
                       __ptext8 028B                         __ptext9 0524                 __size_of_strcat 0026  
               __size_of_strcmp 0026               __end_of_exception 0F02                 __size_of_strcpy 001B  
               __size_of_strlen 0025                    __size_of_ISR 000B                         _counter 00E3  
       i1flashWriteByte@address 0074                _romArray_absaddr 1FE0                         _romData 005C  
                       clrloop0 0EA3            end_of_initialization 0025                    _nrf24l01Init 071C  
                    _setMessage 047D                 ??i1_flashUpdate 0076                    _nrf24l01Send 0FE0  
                       memset@c 0023                         memset@n 0025                         memset@p 0027  
               ___lldiv@divisor 0021                 ___lldiv@counter 002E           _nrf24l01ChangeTXPower 0567  
              setMessage@packet 0053    __size_ofi1_nrf24l01SetRXMode 0037                         strcmp@r 0073  
         i1nrf24l01Send@command 0073                         strlen@s 0027             __end_of_getADCValue 0424  
                     _PORTAbits 000C                       _PORTCbits 000E                       _TRISAbits 008C  
                     _TRISCbits 008E                nrf24l01Send@data 0021                __CFG_FEXTOSC$OFF 0000  
                 ??_flashRealod 002A                   ??_flashUpdate 0027                   ??_nrf24l01ISR 007D  
        ?_nrf24l01InterfaceInit 0070                  i1_nrf24l01Send 0F4E                      main@packet 00C2  
        ?_nrf24l01ReceivePacket 0070      __size_of_nrf24l01SetRXMode 003B                  __end_of___lmul 06EC  
                __end_of___wmul 0F4E                       i1memset@c 0072                       i1memset@n 0074  
                     i1memset@p 0076                  __end_of_memset 0F33                  __end_of_strcat 0768  
                __end_of_strcmp 078E                  __end_of_strcpy 0F84                  __end_of_strlen 07B3  
           start_initialization 0011                 _nrf24l01SPISend 0EB7                     __end_of_ISR 000F  
         flashWriteByte@address 0025               __size_ofi1_memset 0018     __end_of_nrf24l01GetRXPacket 0004  
       __size_of_nrf24l01CEHigh 0003         __size_of_nrf24l01CSHigh 0003                     ?_setMessage 003D  
        __end_ofi1_nrf24l01Send 0F69         __size_of_nrf24l01SPIEnd 0007                 ___llmod@divisor 0021  
               ___llmod@counter 002A          ?_nrf24l01ChangeTXPower 0024         ??_nrf24l01InitRegisters 0024  
              __CFG_LPBOREN$OFF 0000               ?i1_flashWriteByte 0070             __end_of_flashRealod 0FE0  
                   _getADCValue 039C         __size_of_flashWriteByte 003C             __end_of_flashUpdate 07D6  
                      ??___lmul 0029             __end_of_nrf24l01ISR 068A            setMessage@tempString 0043  
                      ??___wmul 0074              ??i1_flashWriteByte 0074            __end_of_resetRomData 1013  
                      ??_memset 0027               ?_enableInterrupts 0070                        ??_strcat 0023  
                      ??_strcmp 0072                        ??_strcpy 0023                        ??_strlen 0023  
            ??_enableInterrupts 0070                       ___latbits 0002                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0               ?_nrf24l01SPIStart 0070            checkTXPower@rxPacket 0029  
             ?_nrf24l01CheckACK 0070              ??_nrf24l01SPIStart 0070              ??_nrf24l01CheckACK 0077  
               ?i1_nrf24l01Send 0071                      loop@packet 00A1                        ?___lldiv 0021  
                      ?___llmod 0021            __end_of_n_ADDRESS_P0 101E         __end_of_nrf24l01SPISend 0EC4  
            i1nrf24l01Send@data 0071       nrf24l01InitRegisters@enAA 0029             __size_of_setMessage 0054  
            _nrf24l01SendPacket 013D                       _exception 0EEA             ?_nrf24l01SendPacket 0070  
           i1_nrf24l01SetRXMode 061D                  __size_of_sleep 0012                  __size_of_ultoa 0089  
                   _flashRealod 0FC0                  ___wmul@product 0074          i1flashWriteByte@offset 0070  
                   _flashUpdate 07B3                     _nrf24l01ISR 0654                       clear_ram0 0EA2  
                      _PIE0bits 0090                        _PIR0bits 0010                       _romHolder 0120  
                     _sleepLoop 005A            ??_nrf24l01SendPacket 0029                 setMessage@value 003F  
               setMessage@topic 003D            ?i1_nrf24l01SetRXMode 0070                      _ADCON0bits 009D  
                    _ADCON1bits 009E               ___wmul@multiplier 0070                        _WPUAbits 020C  
                      i1_memset 0F02                   ?_checkTXPower 0070                        _RXPacket 0140  
        __size_of_flashReadByte 0032                        _TXPacket 0059                      ?_exception 0070  
                _nrf24l01CEHigh 0E96               ___lmul@multiplier 0021         ??_nrf24l01InterfaceInit 0021  
                _nrf24l01CSHigh 0E9C               nrf24l01ISR@status 0020                  _nrf24l01SPIEnd 0EA8  
       ??_nrf24l01ReceivePacket 0078          __size_of_nrf24l01CELow 0003           __end_ofi1_flashUpdate 07F7  
        __size_of_nrf24l01CSLow 0003            flashWriteByte@offset 0021                  _flashWriteByte 05A6  
         ??i1_nrf24l01SetRXMode 0074                __size_of___lldiv 0053                __size_of___llmod 0043  
              ?_nrf24l01SPISend 0070                      _ANSELAbits 018C                      _ANSELCbits 018E  
                ??_checkTXPower 0028                   _n_ADDRESS_MUL 1040                      strcat@from 0021  
        __end_of_nrf24l01CEHigh 0E99          __end_of_nrf24l01CSHigh 0E9F                        __ptext10 0742  
                      __ptext11 0F1A                        __ptext20 0567                        __ptext12 013D  
                      __ptext21 0FE0                        __ptext13 078E                        __ptext30 0FA0  
                      __ptext22 07B3                        __ptext14 05E2                        __ptext31 061D  
                      __ptext23 05A6                        __ptext15 039C                        __ptext40 0E96  
                      __ptext32 0F4E                        __ptext24 0FC0                        __ptext16 06BC  
                      __ptext41 0768                        __ptext33 07F7                        __ptext25 068A  
                      __ptext17 04D1                        __ptext42 0EEA                        __ptext34 0E9F  
                      __ptext18 0ED6                        __ptext43 07D6                        __ptext35 0EB7  
                      __ptext27 0654                        __ptext19 0002                        __ptext44 06EC  
                      __ptext36 0EA8                        __ptext28 0424                        __ptext45 0F33  
                      __ptext37 0E9C                        __ptext29 0F02                        __ptext38 0EAF  
                      __ptext39 0E99                    _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 0EAF  
                      _nrf24l01 005B                    _resetRomData 1000                     _OSCCON1bits 0919  
                  ??_setMessage 0043                      strcpy@from 0021   nrf24l01ChangeTXPower@addPower 0024  
       ??_nrf24l01ChangeTXPower 0026                   __size_of_main 0088                   __size_of_loop 0114  
  nrf24l01InitRegisters@channel 0026          __end_of_flashWriteByte 05E2    nrf24l01InitRegisters@feature 0027  
            exception@exception 007C                      _RC0PPSbits 0EA0                        _romArray 1FE0  
                 _flashReadByte 068A    nrf24l01InitRegisters@rfSetup 002A                      _RC1PPSbits 0EA1  
                  ?_getADCValue 002F                      _RC2PPSbits 0EA2  __size_of_nrf24l01InitRegisters 0094  
 __end_of_nrf24l01InitRegisters 028B                        int$flags 007E    nrf24l01InitRegisters@setupAW 0025  
                  _SSP1STATbits 0214          nrf24l01ReceivePacket@i 007A                   _nrf24l01CELow 0E99  
                 _nrf24l01CSLow 0E9F              __end_of_setMessage 04D1                      _INTCONbits 000B  
     __size_ofi1_flashWriteByte 0030                 ?_nrf24l01CEHigh 0070                      _FVRCONbits 0117  
              ??i1_nrf24l01Send 0072                     ??_exception 007A                 ?_nrf24l01CSHigh 0070  
                __pstringtext10 1036                  __pstringtext11 103A                  __pstringtext12 103E  
                __pstringtext13 0000                        memset@p1 0021                       ultoa@base 0033  
               ?_nrf24l01SPIEnd 0070                        intlevel1 0000                    _n_ADDRESS_P0 1019  
     __size_of_enableInterrupts 0008                      _PMCON1bits 0895                ___lldiv@dividend 0025  
             __CFG_CLKOUTEN$OFF 0000                 ?_flashWriteByte 0021    __size_of_nrf24l01GetRXPacket 0002  
                ?_flashReadByte 0021            i1flashWriteByte@data 0072     nrf24l01InitRegisters@config 002D  
     __size_of_nrf24l01SPIStart 0008       __size_of_nrf24l01CheckACK 0020     nrf24l01InitRegisters@status 0028  
    nrf24l01ReceivePacket@width 0079                  ?_nrf24l01CELow 0070                   __pstringtext1 1000  
                 __pstringtext2 1019                   __pstringtext3 1040                   __pstringtext4 1013  
                 __pstringtext5 101E                   __pstringtext6 1023                   __pstringtext7 1028  
                 __pstringtext8 102D                   __pstringtext9 1032                  ?_nrf24l01CSLow 0070  
                      ultoa@buf 003B                        ultoa@val 002F      nrf24l01InitRegisters@DynPD 002C  
                      strcat@cp 0024                        strcat@to 0025                        strcmp@s1 0074  
                      strcmp@s2 0070                ___lldiv@quotient 002A                        strcpy@cp 0025  
                      strlen@cp 0028                        strcpy@to 0024                      _WDTCONbits 0097  
                 ?_nrf24l01Init 0070                   ?_nrf24l01Send 0021                    ?_flashRealod 0070  
                    _STATUSbits 0003            flashReadByte@address 0028                    ?_flashUpdate 0070  
                  ?_nrf24l01ISR 0070            __end_of_checkTXPower 0EEA             flashReadByte@offset 0021  
