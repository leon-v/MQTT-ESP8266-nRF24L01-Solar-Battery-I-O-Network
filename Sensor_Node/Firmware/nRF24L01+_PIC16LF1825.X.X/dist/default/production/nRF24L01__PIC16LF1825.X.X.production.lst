

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Sep 03 16:41:22 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    27                           	psect	text1,local,class=CODE,merge=1,delta=2
    28                           	psect	text2,local,class=CODE,merge=1,delta=2
    29                           	psect	text3,local,class=CODE,merge=1,delta=2
    30                           	psect	text4,local,class=CODE,merge=1,delta=2
    31                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text6,local,class=CODE,merge=1,delta=2
    33                           	psect	text7,local,class=CODE,merge=1,delta=2
    34                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text9,local,class=CODE,merge=1,delta=2
    36                           	psect	text10,local,class=CODE,merge=1,delta=2
    37                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text12,local,class=CODE,merge=1,delta=2
    39                           	psect	text13,local,class=CODE,merge=1,delta=2
    40                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text15,local,class=CODE,merge=1,delta=2
    42                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text17,local,class=CODE,merge=1,delta=2
    44                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text19,local,class=CODE,merge=1,delta=2
    46                           	psect	text20,local,class=CODE,merge=1,delta=2
    47                           	psect	text21,local,class=CODE,merge=1,delta=2
    48                           	psect	text22,local,class=CODE,merge=1,delta=2
    49                           	psect	text23,local,class=CODE,merge=1,delta=2
    50                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text25,local,class=CODE,merge=1,delta=2
    52                           	psect	text26,local,class=CODE,merge=1,delta=2
    53                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text28,local,class=CODE,merge=1,delta=2
    55                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text39,local,class=CODE,merge=1,delta=2
    66                           	psect	text40,local,class=CODE,merge=1,delta=2
    67                           	psect	text41,local,class=CODE,merge=1,delta=2
    68                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    69                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text45,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	text46,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text47,local,class=CODE,merge=1,delta=2,group=1
    74                           	psect	text48,local,class=CODE,merge=1,delta=2
    75                           	psect	intentry,global,class=CODE,delta=2
    76                           	psect	text50,local,class=CODE,merge=1,delta=2
    77                           	dabs	1,0x74,12
    78  0000                     
    79                           ; Version 2.00
    80                           ; Generated 27/05/2018 GMT
    81                           ; 
    82                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC16LF18325 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000E                     	;# 
   127  0010                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0013                     	;# 
   131  0014                     	;# 
   132  0015                     	;# 
   133  0015                     	;# 
   134  0016                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001B                     	;# 
   142  001C                     	;# 
   143  001D                     	;# 
   144  001E                     	;# 
   145  001F                     	;# 
   146  008C                     	;# 
   147  008E                     	;# 
   148  0090                     	;# 
   149  0091                     	;# 
   150  0092                     	;# 
   151  0093                     	;# 
   152  0094                     	;# 
   153  0097                     	;# 
   154  009B                     	;# 
   155  009B                     	;# 
   156  009C                     	;# 
   157  009D                     	;# 
   158  009E                     	;# 
   159  009F                     	;# 
   160  010C                     	;# 
   161  010E                     	;# 
   162  0111                     	;# 
   163  0112                     	;# 
   164  0113                     	;# 
   165  0114                     	;# 
   166  0115                     	;# 
   167  0116                     	;# 
   168  0117                     	;# 
   169  0118                     	;# 
   170  0119                     	;# 
   171  018C                     	;# 
   172  018E                     	;# 
   173  0199                     	;# 
   174  0199                     	;# 
   175  0199                     	;# 
   176  019A                     	;# 
   177  019A                     	;# 
   178  019A                     	;# 
   179  019B                     	;# 
   180  019B                     	;# 
   181  019B                     	;# 
   182  019B                     	;# 
   183  019B                     	;# 
   184  019C                     	;# 
   185  019C                     	;# 
   186  019C                     	;# 
   187  019D                     	;# 
   188  019D                     	;# 
   189  019D                     	;# 
   190  019E                     	;# 
   191  019E                     	;# 
   192  019E                     	;# 
   193  019F                     	;# 
   194  019F                     	;# 
   195  019F                     	;# 
   196  019F                     	;# 
   197  019F                     	;# 
   198  020C                     	;# 
   199  020E                     	;# 
   200  0211                     	;# 
   201  0211                     	;# 
   202  0212                     	;# 
   203  0212                     	;# 
   204  0213                     	;# 
   205  0213                     	;# 
   206  0214                     	;# 
   207  0214                     	;# 
   208  0215                     	;# 
   209  0215                     	;# 
   210  0215                     	;# 
   211  0215                     	;# 
   212  0216                     	;# 
   213  0216                     	;# 
   214  0217                     	;# 
   215  0217                     	;# 
   216  0219                     	;# 
   217  021A                     	;# 
   218  021B                     	;# 
   219  021C                     	;# 
   220  021D                     	;# 
   221  021D                     	;# 
   222  021E                     	;# 
   223  021F                     	;# 
   224  028C                     	;# 
   225  028E                     	;# 
   226  0291                     	;# 
   227  0291                     	;# 
   228  0292                     	;# 
   229  0293                     	;# 
   230  0294                     	;# 
   231  0295                     	;# 
   232  0295                     	;# 
   233  0296                     	;# 
   234  0297                     	;# 
   235  0298                     	;# 
   236  029F                     	;# 
   237  030C                     	;# 
   238  030E                     	;# 
   239  0311                     	;# 
   240  0311                     	;# 
   241  0312                     	;# 
   242  0313                     	;# 
   243  0314                     	;# 
   244  0315                     	;# 
   245  0315                     	;# 
   246  0316                     	;# 
   247  0317                     	;# 
   248  0318                     	;# 
   249  038C                     	;# 
   250  038E                     	;# 
   251  0391                     	;# 
   252  0392                     	;# 
   253  0393                     	;# 
   254  0397                     	;# 
   255  0398                     	;# 
   256  0399                     	;# 
   257  039A                     	;# 
   258  039C                     	;# 
   259  039D                     	;# 
   260  039E                     	;# 
   261  039F                     	;# 
   262  0411                     	;# 
   263  0411                     	;# 
   264  0412                     	;# 
   265  0413                     	;# 
   266  0414                     	;# 
   267  0415                     	;# 
   268  0416                     	;# 
   269  0417                     	;# 
   270  0418                     	;# 
   271  0418                     	;# 
   272  0419                     	;# 
   273  041A                     	;# 
   274  041B                     	;# 
   275  041C                     	;# 
   276  041D                     	;# 
   277  041E                     	;# 
   278  041F                     	;# 
   279  0498                     	;# 
   280  0498                     	;# 
   281  0499                     	;# 
   282  049A                     	;# 
   283  049B                     	;# 
   284  049B                     	;# 
   285  049C                     	;# 
   286  049D                     	;# 
   287  049E                     	;# 
   288  049F                     	;# 
   289  0617                     	;# 
   290  0618                     	;# 
   291  0619                     	;# 
   292  0619                     	;# 
   293  061A                     	;# 
   294  061B                     	;# 
   295  061C                     	;# 
   296  061C                     	;# 
   297  061F                     	;# 
   298  0691                     	;# 
   299  0692                     	;# 
   300  0693                     	;# 
   301  0694                     	;# 
   302  0695                     	;# 
   303  0696                     	;# 
   304  0697                     	;# 
   305  0698                     	;# 
   306  0699                     	;# 
   307  0711                     	;# 
   308  0712                     	;# 
   309  0713                     	;# 
   310  0714                     	;# 
   311  0715                     	;# 
   312  0716                     	;# 
   313  0717                     	;# 
   314  0718                     	;# 
   315  0719                     	;# 
   316  0891                     	;# 
   317  0891                     	;# 
   318  0891                     	;# 
   319  0891                     	;# 
   320  0891                     	;# 
   321  0891                     	;# 
   322  0892                     	;# 
   323  0892                     	;# 
   324  0892                     	;# 
   325  0893                     	;# 
   326  0893                     	;# 
   327  0893                     	;# 
   328  0893                     	;# 
   329  0893                     	;# 
   330  0893                     	;# 
   331  0894                     	;# 
   332  0894                     	;# 
   333  0894                     	;# 
   334  0895                     	;# 
   335  0895                     	;# 
   336  0895                     	;# 
   337  0896                     	;# 
   338  0896                     	;# 
   339  0896                     	;# 
   340  089B                     	;# 
   341  0911                     	;# 
   342  0912                     	;# 
   343  0913                     	;# 
   344  0914                     	;# 
   345  0915                     	;# 
   346  0916                     	;# 
   347  0918                     	;# 
   348  0919                     	;# 
   349  091A                     	;# 
   350  091B                     	;# 
   351  091C                     	;# 
   352  091D                     	;# 
   353  091E                     	;# 
   354  091F                     	;# 
   355  0E0F                     	;# 
   356  0E10                     	;# 
   357  0E11                     	;# 
   358  0E12                     	;# 
   359  0E13                     	;# 
   360  0E14                     	;# 
   361  0E15                     	;# 
   362  0E16                     	;# 
   363  0E17                     	;# 
   364  0E18                     	;# 
   365  0E19                     	;# 
   366  0E1A                     	;# 
   367  0E1B                     	;# 
   368  0E1C                     	;# 
   369  0E1D                     	;# 
   370  0E1E                     	;# 
   371  0E1F                     	;# 
   372  0E20                     	;# 
   373  0E21                     	;# 
   374  0E22                     	;# 
   375  0E24                     	;# 
   376  0E25                     	;# 
   377  0E28                     	;# 
   378  0E29                     	;# 
   379  0E2A                     	;# 
   380  0E2B                     	;# 
   381  0E2C                     	;# 
   382  0E2D                     	;# 
   383  0E2E                     	;# 
   384  0E2F                     	;# 
   385  0E90                     	;# 
   386  0E91                     	;# 
   387  0E92                     	;# 
   388  0E94                     	;# 
   389  0E95                     	;# 
   390  0EA0                     	;# 
   391  0EA1                     	;# 
   392  0EA2                     	;# 
   393  0EA3                     	;# 
   394  0EA4                     	;# 
   395  0EA5                     	;# 
   396  0F0F                     	;# 
   397  0F10                     	;# 
   398  0F11                     	;# 
   399  0F12                     	;# 
   400  0F13                     	;# 
   401  0F14                     	;# 
   402  0F15                     	;# 
   403  0F16                     	;# 
   404  0F17                     	;# 
   405  0F18                     	;# 
   406  0F19                     	;# 
   407  0F1A                     	;# 
   408  0F1B                     	;# 
   409  0F1C                     	;# 
   410  0F1D                     	;# 
   411  0F1E                     	;# 
   412  0F1F                     	;# 
   413  0F20                     	;# 
   414  0F21                     	;# 
   415  0F22                     	;# 
   416  0F23                     	;# 
   417  0F24                     	;# 
   418  0F25                     	;# 
   419  0F26                     	;# 
   420  0F27                     	;# 
   421  0F28                     	;# 
   422  0F29                     	;# 
   423  0F2A                     	;# 
   424  0F2B                     	;# 
   425  0F2C                     	;# 
   426  0F2D                     	;# 
   427  0F2E                     	;# 
   428  0F2F                     	;# 
   429  0F30                     	;# 
   430  0F31                     	;# 
   431  0F32                     	;# 
   432  0F33                     	;# 
   433  0F34                     	;# 
   434  0F35                     	;# 
   435  0F36                     	;# 
   436  0F37                     	;# 
   437  0FE4                     	;# 
   438  0FE5                     	;# 
   439  0FE6                     	;# 
   440  0FE7                     	;# 
   441  0FE8                     	;# 
   442  0FE9                     	;# 
   443  0FEA                     	;# 
   444  0FEB                     	;# 
   445  0FED                     	;# 
   446  0FEE                     	;# 
   447  0FEF                     	;# 
   448  0000                     	;# 
   449  0001                     	;# 
   450  0002                     	;# 
   451  0003                     	;# 
   452  0004                     	;# 
   453  0005                     	;# 
   454  0006                     	;# 
   455  0007                     	;# 
   456  0008                     	;# 
   457  0009                     	;# 
   458  000A                     	;# 
   459  000B                     	;# 
   460  000C                     	;# 
   461  000E                     	;# 
   462  0010                     	;# 
   463  0011                     	;# 
   464  0012                     	;# 
   465  0013                     	;# 
   466  0014                     	;# 
   467  0015                     	;# 
   468  0015                     	;# 
   469  0016                     	;# 
   470  0016                     	;# 
   471  0017                     	;# 
   472  0018                     	;# 
   473  0019                     	;# 
   474  0019                     	;# 
   475  001A                     	;# 
   476  001B                     	;# 
   477  001C                     	;# 
   478  001D                     	;# 
   479  001E                     	;# 
   480  001F                     	;# 
   481  008C                     	;# 
   482  008E                     	;# 
   483  0090                     	;# 
   484  0091                     	;# 
   485  0092                     	;# 
   486  0093                     	;# 
   487  0094                     	;# 
   488  0097                     	;# 
   489  009B                     	;# 
   490  009B                     	;# 
   491  009C                     	;# 
   492  009D                     	;# 
   493  009E                     	;# 
   494  009F                     	;# 
   495  010C                     	;# 
   496  010E                     	;# 
   497  0111                     	;# 
   498  0112                     	;# 
   499  0113                     	;# 
   500  0114                     	;# 
   501  0115                     	;# 
   502  0116                     	;# 
   503  0117                     	;# 
   504  0118                     	;# 
   505  0119                     	;# 
   506  018C                     	;# 
   507  018E                     	;# 
   508  0199                     	;# 
   509  0199                     	;# 
   510  0199                     	;# 
   511  019A                     	;# 
   512  019A                     	;# 
   513  019A                     	;# 
   514  019B                     	;# 
   515  019B                     	;# 
   516  019B                     	;# 
   517  019B                     	;# 
   518  019B                     	;# 
   519  019C                     	;# 
   520  019C                     	;# 
   521  019C                     	;# 
   522  019D                     	;# 
   523  019D                     	;# 
   524  019D                     	;# 
   525  019E                     	;# 
   526  019E                     	;# 
   527  019E                     	;# 
   528  019F                     	;# 
   529  019F                     	;# 
   530  019F                     	;# 
   531  019F                     	;# 
   532  019F                     	;# 
   533  020C                     	;# 
   534  020E                     	;# 
   535  0211                     	;# 
   536  0211                     	;# 
   537  0212                     	;# 
   538  0212                     	;# 
   539  0213                     	;# 
   540  0213                     	;# 
   541  0214                     	;# 
   542  0214                     	;# 
   543  0215                     	;# 
   544  0215                     	;# 
   545  0215                     	;# 
   546  0215                     	;# 
   547  0216                     	;# 
   548  0216                     	;# 
   549  0217                     	;# 
   550  0217                     	;# 
   551  0219                     	;# 
   552  021A                     	;# 
   553  021B                     	;# 
   554  021C                     	;# 
   555  021D                     	;# 
   556  021D                     	;# 
   557  021E                     	;# 
   558  021F                     	;# 
   559  028C                     	;# 
   560  028E                     	;# 
   561  0291                     	;# 
   562  0291                     	;# 
   563  0292                     	;# 
   564  0293                     	;# 
   565  0294                     	;# 
   566  0295                     	;# 
   567  0295                     	;# 
   568  0296                     	;# 
   569  0297                     	;# 
   570  0298                     	;# 
   571  029F                     	;# 
   572  030C                     	;# 
   573  030E                     	;# 
   574  0311                     	;# 
   575  0311                     	;# 
   576  0312                     	;# 
   577  0313                     	;# 
   578  0314                     	;# 
   579  0315                     	;# 
   580  0315                     	;# 
   581  0316                     	;# 
   582  0317                     	;# 
   583  0318                     	;# 
   584  038C                     	;# 
   585  038E                     	;# 
   586  0391                     	;# 
   587  0392                     	;# 
   588  0393                     	;# 
   589  0397                     	;# 
   590  0398                     	;# 
   591  0399                     	;# 
   592  039A                     	;# 
   593  039C                     	;# 
   594  039D                     	;# 
   595  039E                     	;# 
   596  039F                     	;# 
   597  0411                     	;# 
   598  0411                     	;# 
   599  0412                     	;# 
   600  0413                     	;# 
   601  0414                     	;# 
   602  0415                     	;# 
   603  0416                     	;# 
   604  0417                     	;# 
   605  0418                     	;# 
   606  0418                     	;# 
   607  0419                     	;# 
   608  041A                     	;# 
   609  041B                     	;# 
   610  041C                     	;# 
   611  041D                     	;# 
   612  041E                     	;# 
   613  041F                     	;# 
   614  0498                     	;# 
   615  0498                     	;# 
   616  0499                     	;# 
   617  049A                     	;# 
   618  049B                     	;# 
   619  049B                     	;# 
   620  049C                     	;# 
   621  049D                     	;# 
   622  049E                     	;# 
   623  049F                     	;# 
   624  0617                     	;# 
   625  0618                     	;# 
   626  0619                     	;# 
   627  0619                     	;# 
   628  061A                     	;# 
   629  061B                     	;# 
   630  061C                     	;# 
   631  061C                     	;# 
   632  061F                     	;# 
   633  0691                     	;# 
   634  0692                     	;# 
   635  0693                     	;# 
   636  0694                     	;# 
   637  0695                     	;# 
   638  0696                     	;# 
   639  0697                     	;# 
   640  0698                     	;# 
   641  0699                     	;# 
   642  0711                     	;# 
   643  0712                     	;# 
   644  0713                     	;# 
   645  0714                     	;# 
   646  0715                     	;# 
   647  0716                     	;# 
   648  0717                     	;# 
   649  0718                     	;# 
   650  0719                     	;# 
   651  0891                     	;# 
   652  0891                     	;# 
   653  0891                     	;# 
   654  0891                     	;# 
   655  0891                     	;# 
   656  0891                     	;# 
   657  0892                     	;# 
   658  0892                     	;# 
   659  0892                     	;# 
   660  0893                     	;# 
   661  0893                     	;# 
   662  0893                     	;# 
   663  0893                     	;# 
   664  0893                     	;# 
   665  0893                     	;# 
   666  0894                     	;# 
   667  0894                     	;# 
   668  0894                     	;# 
   669  0895                     	;# 
   670  0895                     	;# 
   671  0895                     	;# 
   672  0896                     	;# 
   673  0896                     	;# 
   674  0896                     	;# 
   675  089B                     	;# 
   676  0911                     	;# 
   677  0912                     	;# 
   678  0913                     	;# 
   679  0914                     	;# 
   680  0915                     	;# 
   681  0916                     	;# 
   682  0918                     	;# 
   683  0919                     	;# 
   684  091A                     	;# 
   685  091B                     	;# 
   686  091C                     	;# 
   687  091D                     	;# 
   688  091E                     	;# 
   689  091F                     	;# 
   690  0E0F                     	;# 
   691  0E10                     	;# 
   692  0E11                     	;# 
   693  0E12                     	;# 
   694  0E13                     	;# 
   695  0E14                     	;# 
   696  0E15                     	;# 
   697  0E16                     	;# 
   698  0E17                     	;# 
   699  0E18                     	;# 
   700  0E19                     	;# 
   701  0E1A                     	;# 
   702  0E1B                     	;# 
   703  0E1C                     	;# 
   704  0E1D                     	;# 
   705  0E1E                     	;# 
   706  0E1F                     	;# 
   707  0E20                     	;# 
   708  0E21                     	;# 
   709  0E22                     	;# 
   710  0E24                     	;# 
   711  0E25                     	;# 
   712  0E28                     	;# 
   713  0E29                     	;# 
   714  0E2A                     	;# 
   715  0E2B                     	;# 
   716  0E2C                     	;# 
   717  0E2D                     	;# 
   718  0E2E                     	;# 
   719  0E2F                     	;# 
   720  0E90                     	;# 
   721  0E91                     	;# 
   722  0E92                     	;# 
   723  0E94                     	;# 
   724  0E95                     	;# 
   725  0EA0                     	;# 
   726  0EA1                     	;# 
   727  0EA2                     	;# 
   728  0EA3                     	;# 
   729  0EA4                     	;# 
   730  0EA5                     	;# 
   731  0F0F                     	;# 
   732  0F10                     	;# 
   733  0F11                     	;# 
   734  0F12                     	;# 
   735  0F13                     	;# 
   736  0F14                     	;# 
   737  0F15                     	;# 
   738  0F16                     	;# 
   739  0F17                     	;# 
   740  0F18                     	;# 
   741  0F19                     	;# 
   742  0F1A                     	;# 
   743  0F1B                     	;# 
   744  0F1C                     	;# 
   745  0F1D                     	;# 
   746  0F1E                     	;# 
   747  0F1F                     	;# 
   748  0F20                     	;# 
   749  0F21                     	;# 
   750  0F22                     	;# 
   751  0F23                     	;# 
   752  0F24                     	;# 
   753  0F25                     	;# 
   754  0F26                     	;# 
   755  0F27                     	;# 
   756  0F28                     	;# 
   757  0F29                     	;# 
   758  0F2A                     	;# 
   759  0F2B                     	;# 
   760  0F2C                     	;# 
   761  0F2D                     	;# 
   762  0F2E                     	;# 
   763  0F2F                     	;# 
   764  0F30                     	;# 
   765  0F31                     	;# 
   766  0F32                     	;# 
   767  0F33                     	;# 
   768  0F34                     	;# 
   769  0F35                     	;# 
   770  0F36                     	;# 
   771  0F37                     	;# 
   772  0FE4                     	;# 
   773  0FE5                     	;# 
   774  0FE6                     	;# 
   775  0FE7                     	;# 
   776  0FE8                     	;# 
   777  0FE9                     	;# 
   778  0FEA                     	;# 
   779  0FEB                     	;# 
   780  0FED                     	;# 
   781  0FEE                     	;# 
   782  0FEF                     	;# 
   783  0000                     	;# 
   784  0001                     	;# 
   785  0002                     	;# 
   786  0003                     	;# 
   787  0004                     	;# 
   788  0005                     	;# 
   789  0006                     	;# 
   790  0007                     	;# 
   791  0008                     	;# 
   792  0009                     	;# 
   793  000A                     	;# 
   794  000B                     	;# 
   795  000C                     	;# 
   796  000E                     	;# 
   797  0010                     	;# 
   798  0011                     	;# 
   799  0012                     	;# 
   800  0013                     	;# 
   801  0014                     	;# 
   802  0015                     	;# 
   803  0015                     	;# 
   804  0016                     	;# 
   805  0016                     	;# 
   806  0017                     	;# 
   807  0018                     	;# 
   808  0019                     	;# 
   809  0019                     	;# 
   810  001A                     	;# 
   811  001B                     	;# 
   812  001C                     	;# 
   813  001D                     	;# 
   814  001E                     	;# 
   815  001F                     	;# 
   816  008C                     	;# 
   817  008E                     	;# 
   818  0090                     	;# 
   819  0091                     	;# 
   820  0092                     	;# 
   821  0093                     	;# 
   822  0094                     	;# 
   823  0097                     	;# 
   824  009B                     	;# 
   825  009B                     	;# 
   826  009C                     	;# 
   827  009D                     	;# 
   828  009E                     	;# 
   829  009F                     	;# 
   830  010C                     	;# 
   831  010E                     	;# 
   832  0111                     	;# 
   833  0112                     	;# 
   834  0113                     	;# 
   835  0114                     	;# 
   836  0115                     	;# 
   837  0116                     	;# 
   838  0117                     	;# 
   839  0118                     	;# 
   840  0119                     	;# 
   841  018C                     	;# 
   842  018E                     	;# 
   843  0199                     	;# 
   844  0199                     	;# 
   845  0199                     	;# 
   846  019A                     	;# 
   847  019A                     	;# 
   848  019A                     	;# 
   849  019B                     	;# 
   850  019B                     	;# 
   851  019B                     	;# 
   852  019B                     	;# 
   853  019B                     	;# 
   854  019C                     	;# 
   855  019C                     	;# 
   856  019C                     	;# 
   857  019D                     	;# 
   858  019D                     	;# 
   859  019D                     	;# 
   860  019E                     	;# 
   861  019E                     	;# 
   862  019E                     	;# 
   863  019F                     	;# 
   864  019F                     	;# 
   865  019F                     	;# 
   866  019F                     	;# 
   867  019F                     	;# 
   868  020C                     	;# 
   869  020E                     	;# 
   870  0211                     	;# 
   871  0211                     	;# 
   872  0212                     	;# 
   873  0212                     	;# 
   874  0213                     	;# 
   875  0213                     	;# 
   876  0214                     	;# 
   877  0214                     	;# 
   878  0215                     	;# 
   879  0215                     	;# 
   880  0215                     	;# 
   881  0215                     	;# 
   882  0216                     	;# 
   883  0216                     	;# 
   884  0217                     	;# 
   885  0217                     	;# 
   886  0219                     	;# 
   887  021A                     	;# 
   888  021B                     	;# 
   889  021C                     	;# 
   890  021D                     	;# 
   891  021D                     	;# 
   892  021E                     	;# 
   893  021F                     	;# 
   894  028C                     	;# 
   895  028E                     	;# 
   896  0291                     	;# 
   897  0291                     	;# 
   898  0292                     	;# 
   899  0293                     	;# 
   900  0294                     	;# 
   901  0295                     	;# 
   902  0295                     	;# 
   903  0296                     	;# 
   904  0297                     	;# 
   905  0298                     	;# 
   906  029F                     	;# 
   907  030C                     	;# 
   908  030E                     	;# 
   909  0311                     	;# 
   910  0311                     	;# 
   911  0312                     	;# 
   912  0313                     	;# 
   913  0314                     	;# 
   914  0315                     	;# 
   915  0315                     	;# 
   916  0316                     	;# 
   917  0317                     	;# 
   918  0318                     	;# 
   919  038C                     	;# 
   920  038E                     	;# 
   921  0391                     	;# 
   922  0392                     	;# 
   923  0393                     	;# 
   924  0397                     	;# 
   925  0398                     	;# 
   926  0399                     	;# 
   927  039A                     	;# 
   928  039C                     	;# 
   929  039D                     	;# 
   930  039E                     	;# 
   931  039F                     	;# 
   932  0411                     	;# 
   933  0411                     	;# 
   934  0412                     	;# 
   935  0413                     	;# 
   936  0414                     	;# 
   937  0415                     	;# 
   938  0416                     	;# 
   939  0417                     	;# 
   940  0418                     	;# 
   941  0418                     	;# 
   942  0419                     	;# 
   943  041A                     	;# 
   944  041B                     	;# 
   945  041C                     	;# 
   946  041D                     	;# 
   947  041E                     	;# 
   948  041F                     	;# 
   949  0498                     	;# 
   950  0498                     	;# 
   951  0499                     	;# 
   952  049A                     	;# 
   953  049B                     	;# 
   954  049B                     	;# 
   955  049C                     	;# 
   956  049D                     	;# 
   957  049E                     	;# 
   958  049F                     	;# 
   959  0617                     	;# 
   960  0618                     	;# 
   961  0619                     	;# 
   962  0619                     	;# 
   963  061A                     	;# 
   964  061B                     	;# 
   965  061C                     	;# 
   966  061C                     	;# 
   967  061F                     	;# 
   968  0691                     	;# 
   969  0692                     	;# 
   970  0693                     	;# 
   971  0694                     	;# 
   972  0695                     	;# 
   973  0696                     	;# 
   974  0697                     	;# 
   975  0698                     	;# 
   976  0699                     	;# 
   977  0711                     	;# 
   978  0712                     	;# 
   979  0713                     	;# 
   980  0714                     	;# 
   981  0715                     	;# 
   982  0716                     	;# 
   983  0717                     	;# 
   984  0718                     	;# 
   985  0719                     	;# 
   986  0891                     	;# 
   987  0891                     	;# 
   988  0891                     	;# 
   989  0891                     	;# 
   990  0891                     	;# 
   991  0891                     	;# 
   992  0892                     	;# 
   993  0892                     	;# 
   994  0892                     	;# 
   995  0893                     	;# 
   996  0893                     	;# 
   997  0893                     	;# 
   998  0893                     	;# 
   999  0893                     	;# 
  1000  0893                     	;# 
  1001  0894                     	;# 
  1002  0894                     	;# 
  1003  0894                     	;# 
  1004  0895                     	;# 
  1005  0895                     	;# 
  1006  0895                     	;# 
  1007  0896                     	;# 
  1008  0896                     	;# 
  1009  0896                     	;# 
  1010  089B                     	;# 
  1011  0911                     	;# 
  1012  0912                     	;# 
  1013  0913                     	;# 
  1014  0914                     	;# 
  1015  0915                     	;# 
  1016  0916                     	;# 
  1017  0918                     	;# 
  1018  0919                     	;# 
  1019  091A                     	;# 
  1020  091B                     	;# 
  1021  091C                     	;# 
  1022  091D                     	;# 
  1023  091E                     	;# 
  1024  091F                     	;# 
  1025  0E0F                     	;# 
  1026  0E10                     	;# 
  1027  0E11                     	;# 
  1028  0E12                     	;# 
  1029  0E13                     	;# 
  1030  0E14                     	;# 
  1031  0E15                     	;# 
  1032  0E16                     	;# 
  1033  0E17                     	;# 
  1034  0E18                     	;# 
  1035  0E19                     	;# 
  1036  0E1A                     	;# 
  1037  0E1B                     	;# 
  1038  0E1C                     	;# 
  1039  0E1D                     	;# 
  1040  0E1E                     	;# 
  1041  0E1F                     	;# 
  1042  0E20                     	;# 
  1043  0E21                     	;# 
  1044  0E22                     	;# 
  1045  0E24                     	;# 
  1046  0E25                     	;# 
  1047  0E28                     	;# 
  1048  0E29                     	;# 
  1049  0E2A                     	;# 
  1050  0E2B                     	;# 
  1051  0E2C                     	;# 
  1052  0E2D                     	;# 
  1053  0E2E                     	;# 
  1054  0E2F                     	;# 
  1055  0E90                     	;# 
  1056  0E91                     	;# 
  1057  0E92                     	;# 
  1058  0E94                     	;# 
  1059  0E95                     	;# 
  1060  0EA0                     	;# 
  1061  0EA1                     	;# 
  1062  0EA2                     	;# 
  1063  0EA3                     	;# 
  1064  0EA4                     	;# 
  1065  0EA5                     	;# 
  1066  0F0F                     	;# 
  1067  0F10                     	;# 
  1068  0F11                     	;# 
  1069  0F12                     	;# 
  1070  0F13                     	;# 
  1071  0F14                     	;# 
  1072  0F15                     	;# 
  1073  0F16                     	;# 
  1074  0F17                     	;# 
  1075  0F18                     	;# 
  1076  0F19                     	;# 
  1077  0F1A                     	;# 
  1078  0F1B                     	;# 
  1079  0F1C                     	;# 
  1080  0F1D                     	;# 
  1081  0F1E                     	;# 
  1082  0F1F                     	;# 
  1083  0F20                     	;# 
  1084  0F21                     	;# 
  1085  0F22                     	;# 
  1086  0F23                     	;# 
  1087  0F24                     	;# 
  1088  0F25                     	;# 
  1089  0F26                     	;# 
  1090  0F27                     	;# 
  1091  0F28                     	;# 
  1092  0F29                     	;# 
  1093  0F2A                     	;# 
  1094  0F2B                     	;# 
  1095  0F2C                     	;# 
  1096  0F2D                     	;# 
  1097  0F2E                     	;# 
  1098  0F2F                     	;# 
  1099  0F30                     	;# 
  1100  0F31                     	;# 
  1101  0F32                     	;# 
  1102  0F33                     	;# 
  1103  0F34                     	;# 
  1104  0F35                     	;# 
  1105  0F36                     	;# 
  1106  0F37                     	;# 
  1107  0FE4                     	;# 
  1108  0FE5                     	;# 
  1109  0FE6                     	;# 
  1110  0FE7                     	;# 
  1111  0FE8                     	;# 
  1112  0FE9                     	;# 
  1113  0FEA                     	;# 
  1114  0FEB                     	;# 
  1115  0FED                     	;# 
  1116  0FEE                     	;# 
  1117  0FEF                     	;# 
  1118  0000                     	;# 
  1119  0001                     	;# 
  1120  0002                     	;# 
  1121  0003                     	;# 
  1122  0004                     	;# 
  1123  0005                     	;# 
  1124  0006                     	;# 
  1125  0007                     	;# 
  1126  0008                     	;# 
  1127  0009                     	;# 
  1128  000A                     	;# 
  1129  000B                     	;# 
  1130  000C                     	;# 
  1131  000E                     	;# 
  1132  0010                     	;# 
  1133  0011                     	;# 
  1134  0012                     	;# 
  1135  0013                     	;# 
  1136  0014                     	;# 
  1137  0015                     	;# 
  1138  0015                     	;# 
  1139  0016                     	;# 
  1140  0016                     	;# 
  1141  0017                     	;# 
  1142  0018                     	;# 
  1143  0019                     	;# 
  1144  0019                     	;# 
  1145  001A                     	;# 
  1146  001B                     	;# 
  1147  001C                     	;# 
  1148  001D                     	;# 
  1149  001E                     	;# 
  1150  001F                     	;# 
  1151  008C                     	;# 
  1152  008E                     	;# 
  1153  0090                     	;# 
  1154  0091                     	;# 
  1155  0092                     	;# 
  1156  0093                     	;# 
  1157  0094                     	;# 
  1158  0097                     	;# 
  1159  009B                     	;# 
  1160  009B                     	;# 
  1161  009C                     	;# 
  1162  009D                     	;# 
  1163  009E                     	;# 
  1164  009F                     	;# 
  1165  010C                     	;# 
  1166  010E                     	;# 
  1167  0111                     	;# 
  1168  0112                     	;# 
  1169  0113                     	;# 
  1170  0114                     	;# 
  1171  0115                     	;# 
  1172  0116                     	;# 
  1173  0117                     	;# 
  1174  0118                     	;# 
  1175  0119                     	;# 
  1176  018C                     	;# 
  1177  018E                     	;# 
  1178  0199                     	;# 
  1179  0199                     	;# 
  1180  0199                     	;# 
  1181  019A                     	;# 
  1182  019A                     	;# 
  1183  019A                     	;# 
  1184  019B                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019B                     	;# 
  1189  019C                     	;# 
  1190  019C                     	;# 
  1191  019C                     	;# 
  1192  019D                     	;# 
  1193  019D                     	;# 
  1194  019D                     	;# 
  1195  019E                     	;# 
  1196  019E                     	;# 
  1197  019E                     	;# 
  1198  019F                     	;# 
  1199  019F                     	;# 
  1200  019F                     	;# 
  1201  019F                     	;# 
  1202  019F                     	;# 
  1203  020C                     	;# 
  1204  020E                     	;# 
  1205  0211                     	;# 
  1206  0211                     	;# 
  1207  0212                     	;# 
  1208  0212                     	;# 
  1209  0213                     	;# 
  1210  0213                     	;# 
  1211  0214                     	;# 
  1212  0214                     	;# 
  1213  0215                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0215                     	;# 
  1217  0216                     	;# 
  1218  0216                     	;# 
  1219  0217                     	;# 
  1220  0217                     	;# 
  1221  0219                     	;# 
  1222  021A                     	;# 
  1223  021B                     	;# 
  1224  021C                     	;# 
  1225  021D                     	;# 
  1226  021D                     	;# 
  1227  021E                     	;# 
  1228  021F                     	;# 
  1229  028C                     	;# 
  1230  028E                     	;# 
  1231  0291                     	;# 
  1232  0291                     	;# 
  1233  0292                     	;# 
  1234  0293                     	;# 
  1235  0294                     	;# 
  1236  0295                     	;# 
  1237  0295                     	;# 
  1238  0296                     	;# 
  1239  0297                     	;# 
  1240  0298                     	;# 
  1241  029F                     	;# 
  1242  030C                     	;# 
  1243  030E                     	;# 
  1244  0311                     	;# 
  1245  0311                     	;# 
  1246  0312                     	;# 
  1247  0313                     	;# 
  1248  0314                     	;# 
  1249  0315                     	;# 
  1250  0315                     	;# 
  1251  0316                     	;# 
  1252  0317                     	;# 
  1253  0318                     	;# 
  1254  038C                     	;# 
  1255  038E                     	;# 
  1256  0391                     	;# 
  1257  0392                     	;# 
  1258  0393                     	;# 
  1259  0397                     	;# 
  1260  0398                     	;# 
  1261  0399                     	;# 
  1262  039A                     	;# 
  1263  039C                     	;# 
  1264  039D                     	;# 
  1265  039E                     	;# 
  1266  039F                     	;# 
  1267  0411                     	;# 
  1268  0411                     	;# 
  1269  0412                     	;# 
  1270  0413                     	;# 
  1271  0414                     	;# 
  1272  0415                     	;# 
  1273  0416                     	;# 
  1274  0417                     	;# 
  1275  0418                     	;# 
  1276  0418                     	;# 
  1277  0419                     	;# 
  1278  041A                     	;# 
  1279  041B                     	;# 
  1280  041C                     	;# 
  1281  041D                     	;# 
  1282  041E                     	;# 
  1283  041F                     	;# 
  1284  0498                     	;# 
  1285  0498                     	;# 
  1286  0499                     	;# 
  1287  049A                     	;# 
  1288  049B                     	;# 
  1289  049B                     	;# 
  1290  049C                     	;# 
  1291  049D                     	;# 
  1292  049E                     	;# 
  1293  049F                     	;# 
  1294  0617                     	;# 
  1295  0618                     	;# 
  1296  0619                     	;# 
  1297  0619                     	;# 
  1298  061A                     	;# 
  1299  061B                     	;# 
  1300  061C                     	;# 
  1301  061C                     	;# 
  1302  061F                     	;# 
  1303  0691                     	;# 
  1304  0692                     	;# 
  1305  0693                     	;# 
  1306  0694                     	;# 
  1307  0695                     	;# 
  1308  0696                     	;# 
  1309  0697                     	;# 
  1310  0698                     	;# 
  1311  0699                     	;# 
  1312  0711                     	;# 
  1313  0712                     	;# 
  1314  0713                     	;# 
  1315  0714                     	;# 
  1316  0715                     	;# 
  1317  0716                     	;# 
  1318  0717                     	;# 
  1319  0718                     	;# 
  1320  0719                     	;# 
  1321  0891                     	;# 
  1322  0891                     	;# 
  1323  0891                     	;# 
  1324  0891                     	;# 
  1325  0891                     	;# 
  1326  0891                     	;# 
  1327  0892                     	;# 
  1328  0892                     	;# 
  1329  0892                     	;# 
  1330  0893                     	;# 
  1331  0893                     	;# 
  1332  0893                     	;# 
  1333  0893                     	;# 
  1334  0893                     	;# 
  1335  0893                     	;# 
  1336  0894                     	;# 
  1337  0894                     	;# 
  1338  0894                     	;# 
  1339  0895                     	;# 
  1340  0895                     	;# 
  1341  0895                     	;# 
  1342  0896                     	;# 
  1343  0896                     	;# 
  1344  0896                     	;# 
  1345  089B                     	;# 
  1346  0911                     	;# 
  1347  0912                     	;# 
  1348  0913                     	;# 
  1349  0914                     	;# 
  1350  0915                     	;# 
  1351  0916                     	;# 
  1352  0918                     	;# 
  1353  0919                     	;# 
  1354  091A                     	;# 
  1355  091B                     	;# 
  1356  091C                     	;# 
  1357  091D                     	;# 
  1358  091E                     	;# 
  1359  091F                     	;# 
  1360  0E0F                     	;# 
  1361  0E10                     	;# 
  1362  0E11                     	;# 
  1363  0E12                     	;# 
  1364  0E13                     	;# 
  1365  0E14                     	;# 
  1366  0E15                     	;# 
  1367  0E16                     	;# 
  1368  0E17                     	;# 
  1369  0E18                     	;# 
  1370  0E19                     	;# 
  1371  0E1A                     	;# 
  1372  0E1B                     	;# 
  1373  0E1C                     	;# 
  1374  0E1D                     	;# 
  1375  0E1E                     	;# 
  1376  0E1F                     	;# 
  1377  0E20                     	;# 
  1378  0E21                     	;# 
  1379  0E22                     	;# 
  1380  0E24                     	;# 
  1381  0E25                     	;# 
  1382  0E28                     	;# 
  1383  0E29                     	;# 
  1384  0E2A                     	;# 
  1385  0E2B                     	;# 
  1386  0E2C                     	;# 
  1387  0E2D                     	;# 
  1388  0E2E                     	;# 
  1389  0E2F                     	;# 
  1390  0E90                     	;# 
  1391  0E91                     	;# 
  1392  0E92                     	;# 
  1393  0E94                     	;# 
  1394  0E95                     	;# 
  1395  0EA0                     	;# 
  1396  0EA1                     	;# 
  1397  0EA2                     	;# 
  1398  0EA3                     	;# 
  1399  0EA4                     	;# 
  1400  0EA5                     	;# 
  1401  0F0F                     	;# 
  1402  0F10                     	;# 
  1403  0F11                     	;# 
  1404  0F12                     	;# 
  1405  0F13                     	;# 
  1406  0F14                     	;# 
  1407  0F15                     	;# 
  1408  0F16                     	;# 
  1409  0F17                     	;# 
  1410  0F18                     	;# 
  1411  0F19                     	;# 
  1412  0F1A                     	;# 
  1413  0F1B                     	;# 
  1414  0F1C                     	;# 
  1415  0F1D                     	;# 
  1416  0F1E                     	;# 
  1417  0F1F                     	;# 
  1418  0F20                     	;# 
  1419  0F21                     	;# 
  1420  0F22                     	;# 
  1421  0F23                     	;# 
  1422  0F24                     	;# 
  1423  0F25                     	;# 
  1424  0F26                     	;# 
  1425  0F27                     	;# 
  1426  0F28                     	;# 
  1427  0F29                     	;# 
  1428  0F2A                     	;# 
  1429  0F2B                     	;# 
  1430  0F2C                     	;# 
  1431  0F2D                     	;# 
  1432  0F2E                     	;# 
  1433  0F2F                     	;# 
  1434  0F30                     	;# 
  1435  0F31                     	;# 
  1436  0F32                     	;# 
  1437  0F33                     	;# 
  1438  0F34                     	;# 
  1439  0F35                     	;# 
  1440  0F36                     	;# 
  1441  0F37                     	;# 
  1442  0FE4                     	;# 
  1443  0FE5                     	;# 
  1444  0FE6                     	;# 
  1445  0FE7                     	;# 
  1446  0FE8                     	;# 
  1447  0FE9                     	;# 
  1448  0FEA                     	;# 
  1449  0FEB                     	;# 
  1450  0FED                     	;# 
  1451  0FEE                     	;# 
  1452  0FEF                     	;# 
  1453  0000                     	;# 
  1454  0001                     	;# 
  1455  0002                     	;# 
  1456  0003                     	;# 
  1457  0004                     	;# 
  1458  0005                     	;# 
  1459  0006                     	;# 
  1460  0007                     	;# 
  1461  0008                     	;# 
  1462  0009                     	;# 
  1463  000A                     	;# 
  1464  000B                     	;# 
  1465  000C                     	;# 
  1466  000E                     	;# 
  1467  0010                     	;# 
  1468  0011                     	;# 
  1469  0012                     	;# 
  1470  0013                     	;# 
  1471  0014                     	;# 
  1472  0015                     	;# 
  1473  0015                     	;# 
  1474  0016                     	;# 
  1475  0016                     	;# 
  1476  0017                     	;# 
  1477  0018                     	;# 
  1478  0019                     	;# 
  1479  0019                     	;# 
  1480  001A                     	;# 
  1481  001B                     	;# 
  1482  001C                     	;# 
  1483  001D                     	;# 
  1484  001E                     	;# 
  1485  001F                     	;# 
  1486  008C                     	;# 
  1487  008E                     	;# 
  1488  0090                     	;# 
  1489  0091                     	;# 
  1490  0092                     	;# 
  1491  0093                     	;# 
  1492  0094                     	;# 
  1493  0097                     	;# 
  1494  009B                     	;# 
  1495  009B                     	;# 
  1496  009C                     	;# 
  1497  009D                     	;# 
  1498  009E                     	;# 
  1499  009F                     	;# 
  1500  010C                     	;# 
  1501  010E                     	;# 
  1502  0111                     	;# 
  1503  0112                     	;# 
  1504  0113                     	;# 
  1505  0114                     	;# 
  1506  0115                     	;# 
  1507  0116                     	;# 
  1508  0117                     	;# 
  1509  0118                     	;# 
  1510  0119                     	;# 
  1511  018C                     	;# 
  1512  018E                     	;# 
  1513  0199                     	;# 
  1514  0199                     	;# 
  1515  0199                     	;# 
  1516  019A                     	;# 
  1517  019A                     	;# 
  1518  019A                     	;# 
  1519  019B                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019C                     	;# 
  1525  019C                     	;# 
  1526  019C                     	;# 
  1527  019D                     	;# 
  1528  019D                     	;# 
  1529  019D                     	;# 
  1530  019E                     	;# 
  1531  019E                     	;# 
  1532  019E                     	;# 
  1533  019F                     	;# 
  1534  019F                     	;# 
  1535  019F                     	;# 
  1536  019F                     	;# 
  1537  019F                     	;# 
  1538  020C                     	;# 
  1539  020E                     	;# 
  1540  0211                     	;# 
  1541  0211                     	;# 
  1542  0212                     	;# 
  1543  0212                     	;# 
  1544  0213                     	;# 
  1545  0213                     	;# 
  1546  0214                     	;# 
  1547  0214                     	;# 
  1548  0215                     	;# 
  1549  0215                     	;# 
  1550  0215                     	;# 
  1551  0215                     	;# 
  1552  0216                     	;# 
  1553  0216                     	;# 
  1554  0217                     	;# 
  1555  0217                     	;# 
  1556  0219                     	;# 
  1557  021A                     	;# 
  1558  021B                     	;# 
  1559  021C                     	;# 
  1560  021D                     	;# 
  1561  021D                     	;# 
  1562  021E                     	;# 
  1563  021F                     	;# 
  1564  028C                     	;# 
  1565  028E                     	;# 
  1566  0291                     	;# 
  1567  0291                     	;# 
  1568  0292                     	;# 
  1569  0293                     	;# 
  1570  0294                     	;# 
  1571  0295                     	;# 
  1572  0295                     	;# 
  1573  0296                     	;# 
  1574  0297                     	;# 
  1575  0298                     	;# 
  1576  029F                     	;# 
  1577  030C                     	;# 
  1578  030E                     	;# 
  1579  0311                     	;# 
  1580  0311                     	;# 
  1581  0312                     	;# 
  1582  0313                     	;# 
  1583  0314                     	;# 
  1584  0315                     	;# 
  1585  0315                     	;# 
  1586  0316                     	;# 
  1587  0317                     	;# 
  1588  0318                     	;# 
  1589  038C                     	;# 
  1590  038E                     	;# 
  1591  0391                     	;# 
  1592  0392                     	;# 
  1593  0393                     	;# 
  1594  0397                     	;# 
  1595  0398                     	;# 
  1596  0399                     	;# 
  1597  039A                     	;# 
  1598  039C                     	;# 
  1599  039D                     	;# 
  1600  039E                     	;# 
  1601  039F                     	;# 
  1602  0411                     	;# 
  1603  0411                     	;# 
  1604  0412                     	;# 
  1605  0413                     	;# 
  1606  0414                     	;# 
  1607  0415                     	;# 
  1608  0416                     	;# 
  1609  0417                     	;# 
  1610  0418                     	;# 
  1611  0418                     	;# 
  1612  0419                     	;# 
  1613  041A                     	;# 
  1614  041B                     	;# 
  1615  041C                     	;# 
  1616  041D                     	;# 
  1617  041E                     	;# 
  1618  041F                     	;# 
  1619  0498                     	;# 
  1620  0498                     	;# 
  1621  0499                     	;# 
  1622  049A                     	;# 
  1623  049B                     	;# 
  1624  049B                     	;# 
  1625  049C                     	;# 
  1626  049D                     	;# 
  1627  049E                     	;# 
  1628  049F                     	;# 
  1629  0617                     	;# 
  1630  0618                     	;# 
  1631  0619                     	;# 
  1632  0619                     	;# 
  1633  061A                     	;# 
  1634  061B                     	;# 
  1635  061C                     	;# 
  1636  061C                     	;# 
  1637  061F                     	;# 
  1638  0691                     	;# 
  1639  0692                     	;# 
  1640  0693                     	;# 
  1641  0694                     	;# 
  1642  0695                     	;# 
  1643  0696                     	;# 
  1644  0697                     	;# 
  1645  0698                     	;# 
  1646  0699                     	;# 
  1647  0711                     	;# 
  1648  0712                     	;# 
  1649  0713                     	;# 
  1650  0714                     	;# 
  1651  0715                     	;# 
  1652  0716                     	;# 
  1653  0717                     	;# 
  1654  0718                     	;# 
  1655  0719                     	;# 
  1656  0891                     	;# 
  1657  0891                     	;# 
  1658  0891                     	;# 
  1659  0891                     	;# 
  1660  0891                     	;# 
  1661  0891                     	;# 
  1662  0892                     	;# 
  1663  0892                     	;# 
  1664  0892                     	;# 
  1665  0893                     	;# 
  1666  0893                     	;# 
  1667  0893                     	;# 
  1668  0893                     	;# 
  1669  0893                     	;# 
  1670  0893                     	;# 
  1671  0894                     	;# 
  1672  0894                     	;# 
  1673  0894                     	;# 
  1674  0895                     	;# 
  1675  0895                     	;# 
  1676  0895                     	;# 
  1677  0896                     	;# 
  1678  0896                     	;# 
  1679  0896                     	;# 
  1680  089B                     	;# 
  1681  0911                     	;# 
  1682  0912                     	;# 
  1683  0913                     	;# 
  1684  0914                     	;# 
  1685  0915                     	;# 
  1686  0916                     	;# 
  1687  0918                     	;# 
  1688  0919                     	;# 
  1689  091A                     	;# 
  1690  091B                     	;# 
  1691  091C                     	;# 
  1692  091D                     	;# 
  1693  091E                     	;# 
  1694  091F                     	;# 
  1695  0E0F                     	;# 
  1696  0E10                     	;# 
  1697  0E11                     	;# 
  1698  0E12                     	;# 
  1699  0E13                     	;# 
  1700  0E14                     	;# 
  1701  0E15                     	;# 
  1702  0E16                     	;# 
  1703  0E17                     	;# 
  1704  0E18                     	;# 
  1705  0E19                     	;# 
  1706  0E1A                     	;# 
  1707  0E1B                     	;# 
  1708  0E1C                     	;# 
  1709  0E1D                     	;# 
  1710  0E1E                     	;# 
  1711  0E1F                     	;# 
  1712  0E20                     	;# 
  1713  0E21                     	;# 
  1714  0E22                     	;# 
  1715  0E24                     	;# 
  1716  0E25                     	;# 
  1717  0E28                     	;# 
  1718  0E29                     	;# 
  1719  0E2A                     	;# 
  1720  0E2B                     	;# 
  1721  0E2C                     	;# 
  1722  0E2D                     	;# 
  1723  0E2E                     	;# 
  1724  0E2F                     	;# 
  1725  0E90                     	;# 
  1726  0E91                     	;# 
  1727  0E92                     	;# 
  1728  0E94                     	;# 
  1729  0E95                     	;# 
  1730  0EA0                     	;# 
  1731  0EA1                     	;# 
  1732  0EA2                     	;# 
  1733  0EA3                     	;# 
  1734  0EA4                     	;# 
  1735  0EA5                     	;# 
  1736  0F0F                     	;# 
  1737  0F10                     	;# 
  1738  0F11                     	;# 
  1739  0F12                     	;# 
  1740  0F13                     	;# 
  1741  0F14                     	;# 
  1742  0F15                     	;# 
  1743  0F16                     	;# 
  1744  0F17                     	;# 
  1745  0F18                     	;# 
  1746  0F19                     	;# 
  1747  0F1A                     	;# 
  1748  0F1B                     	;# 
  1749  0F1C                     	;# 
  1750  0F1D                     	;# 
  1751  0F1E                     	;# 
  1752  0F1F                     	;# 
  1753  0F20                     	;# 
  1754  0F21                     	;# 
  1755  0F22                     	;# 
  1756  0F23                     	;# 
  1757  0F24                     	;# 
  1758  0F25                     	;# 
  1759  0F26                     	;# 
  1760  0F27                     	;# 
  1761  0F28                     	;# 
  1762  0F29                     	;# 
  1763  0F2A                     	;# 
  1764  0F2B                     	;# 
  1765  0F2C                     	;# 
  1766  0F2D                     	;# 
  1767  0F2E                     	;# 
  1768  0F2F                     	;# 
  1769  0F30                     	;# 
  1770  0F31                     	;# 
  1771  0F32                     	;# 
  1772  0F33                     	;# 
  1773  0F34                     	;# 
  1774  0F35                     	;# 
  1775  0F36                     	;# 
  1776  0F37                     	;# 
  1777  0FE4                     	;# 
  1778  0FE5                     	;# 
  1779  0FE6                     	;# 
  1780  0FE7                     	;# 
  1781  0FE8                     	;# 
  1782  0FE9                     	;# 
  1783  0FEA                     	;# 
  1784  0FEB                     	;# 
  1785  0FED                     	;# 
  1786  0FEE                     	;# 
  1787  0FEF                     	;# 
  1788  0000                     	;# 
  1789  0001                     	;# 
  1790  0002                     	;# 
  1791  0003                     	;# 
  1792  0004                     	;# 
  1793  0005                     	;# 
  1794  0006                     	;# 
  1795  0007                     	;# 
  1796  0008                     	;# 
  1797  0009                     	;# 
  1798  000A                     	;# 
  1799  000B                     	;# 
  1800  000C                     	;# 
  1801  000E                     	;# 
  1802  0010                     	;# 
  1803  0011                     	;# 
  1804  0012                     	;# 
  1805  0013                     	;# 
  1806  0014                     	;# 
  1807  0015                     	;# 
  1808  0015                     	;# 
  1809  0016                     	;# 
  1810  0016                     	;# 
  1811  0017                     	;# 
  1812  0018                     	;# 
  1813  0019                     	;# 
  1814  0019                     	;# 
  1815  001A                     	;# 
  1816  001B                     	;# 
  1817  001C                     	;# 
  1818  001D                     	;# 
  1819  001E                     	;# 
  1820  001F                     	;# 
  1821  008C                     	;# 
  1822  008E                     	;# 
  1823  0090                     	;# 
  1824  0091                     	;# 
  1825  0092                     	;# 
  1826  0093                     	;# 
  1827  0094                     	;# 
  1828  0097                     	;# 
  1829  009B                     	;# 
  1830  009B                     	;# 
  1831  009C                     	;# 
  1832  009D                     	;# 
  1833  009E                     	;# 
  1834  009F                     	;# 
  1835  010C                     	;# 
  1836  010E                     	;# 
  1837  0111                     	;# 
  1838  0112                     	;# 
  1839  0113                     	;# 
  1840  0114                     	;# 
  1841  0115                     	;# 
  1842  0116                     	;# 
  1843  0117                     	;# 
  1844  0118                     	;# 
  1845  0119                     	;# 
  1846  018C                     	;# 
  1847  018E                     	;# 
  1848  0199                     	;# 
  1849  0199                     	;# 
  1850  0199                     	;# 
  1851  019A                     	;# 
  1852  019A                     	;# 
  1853  019A                     	;# 
  1854  019B                     	;# 
  1855  019B                     	;# 
  1856  019B                     	;# 
  1857  019B                     	;# 
  1858  019B                     	;# 
  1859  019C                     	;# 
  1860  019C                     	;# 
  1861  019C                     	;# 
  1862  019D                     	;# 
  1863  019D                     	;# 
  1864  019D                     	;# 
  1865  019E                     	;# 
  1866  019E                     	;# 
  1867  019E                     	;# 
  1868  019F                     	;# 
  1869  019F                     	;# 
  1870  019F                     	;# 
  1871  019F                     	;# 
  1872  019F                     	;# 
  1873  020C                     	;# 
  1874  020E                     	;# 
  1875  0211                     	;# 
  1876  0211                     	;# 
  1877  0212                     	;# 
  1878  0212                     	;# 
  1879  0213                     	;# 
  1880  0213                     	;# 
  1881  0214                     	;# 
  1882  0214                     	;# 
  1883  0215                     	;# 
  1884  0215                     	;# 
  1885  0215                     	;# 
  1886  0215                     	;# 
  1887  0216                     	;# 
  1888  0216                     	;# 
  1889  0217                     	;# 
  1890  0217                     	;# 
  1891  0219                     	;# 
  1892  021A                     	;# 
  1893  021B                     	;# 
  1894  021C                     	;# 
  1895  021D                     	;# 
  1896  021D                     	;# 
  1897  021E                     	;# 
  1898  021F                     	;# 
  1899  028C                     	;# 
  1900  028E                     	;# 
  1901  0291                     	;# 
  1902  0291                     	;# 
  1903  0292                     	;# 
  1904  0293                     	;# 
  1905  0294                     	;# 
  1906  0295                     	;# 
  1907  0295                     	;# 
  1908  0296                     	;# 
  1909  0297                     	;# 
  1910  0298                     	;# 
  1911  029F                     	;# 
  1912  030C                     	;# 
  1913  030E                     	;# 
  1914  0311                     	;# 
  1915  0311                     	;# 
  1916  0312                     	;# 
  1917  0313                     	;# 
  1918  0314                     	;# 
  1919  0315                     	;# 
  1920  0315                     	;# 
  1921  0316                     	;# 
  1922  0317                     	;# 
  1923  0318                     	;# 
  1924  038C                     	;# 
  1925  038E                     	;# 
  1926  0391                     	;# 
  1927  0392                     	;# 
  1928  0393                     	;# 
  1929  0397                     	;# 
  1930  0398                     	;# 
  1931  0399                     	;# 
  1932  039A                     	;# 
  1933  039C                     	;# 
  1934  039D                     	;# 
  1935  039E                     	;# 
  1936  039F                     	;# 
  1937  0411                     	;# 
  1938  0411                     	;# 
  1939  0412                     	;# 
  1940  0413                     	;# 
  1941  0414                     	;# 
  1942  0415                     	;# 
  1943  0416                     	;# 
  1944  0417                     	;# 
  1945  0418                     	;# 
  1946  0418                     	;# 
  1947  0419                     	;# 
  1948  041A                     	;# 
  1949  041B                     	;# 
  1950  041C                     	;# 
  1951  041D                     	;# 
  1952  041E                     	;# 
  1953  041F                     	;# 
  1954  0498                     	;# 
  1955  0498                     	;# 
  1956  0499                     	;# 
  1957  049A                     	;# 
  1958  049B                     	;# 
  1959  049B                     	;# 
  1960  049C                     	;# 
  1961  049D                     	;# 
  1962  049E                     	;# 
  1963  049F                     	;# 
  1964  0617                     	;# 
  1965  0618                     	;# 
  1966  0619                     	;# 
  1967  0619                     	;# 
  1968  061A                     	;# 
  1969  061B                     	;# 
  1970  061C                     	;# 
  1971  061C                     	;# 
  1972  061F                     	;# 
  1973  0691                     	;# 
  1974  0692                     	;# 
  1975  0693                     	;# 
  1976  0694                     	;# 
  1977  0695                     	;# 
  1978  0696                     	;# 
  1979  0697                     	;# 
  1980  0698                     	;# 
  1981  0699                     	;# 
  1982  0711                     	;# 
  1983  0712                     	;# 
  1984  0713                     	;# 
  1985  0714                     	;# 
  1986  0715                     	;# 
  1987  0716                     	;# 
  1988  0717                     	;# 
  1989  0718                     	;# 
  1990  0719                     	;# 
  1991  0891                     	;# 
  1992  0891                     	;# 
  1993  0891                     	;# 
  1994  0891                     	;# 
  1995  0891                     	;# 
  1996  0891                     	;# 
  1997  0892                     	;# 
  1998  0892                     	;# 
  1999  0892                     	;# 
  2000  0893                     	;# 
  2001  0893                     	;# 
  2002  0893                     	;# 
  2003  0893                     	;# 
  2004  0893                     	;# 
  2005  0893                     	;# 
  2006  0894                     	;# 
  2007  0894                     	;# 
  2008  0894                     	;# 
  2009  0895                     	;# 
  2010  0895                     	;# 
  2011  0895                     	;# 
  2012  0896                     	;# 
  2013  0896                     	;# 
  2014  0896                     	;# 
  2015  089B                     	;# 
  2016  0911                     	;# 
  2017  0912                     	;# 
  2018  0913                     	;# 
  2019  0914                     	;# 
  2020  0915                     	;# 
  2021  0916                     	;# 
  2022  0918                     	;# 
  2023  0919                     	;# 
  2024  091A                     	;# 
  2025  091B                     	;# 
  2026  091C                     	;# 
  2027  091D                     	;# 
  2028  091E                     	;# 
  2029  091F                     	;# 
  2030  0E0F                     	;# 
  2031  0E10                     	;# 
  2032  0E11                     	;# 
  2033  0E12                     	;# 
  2034  0E13                     	;# 
  2035  0E14                     	;# 
  2036  0E15                     	;# 
  2037  0E16                     	;# 
  2038  0E17                     	;# 
  2039  0E18                     	;# 
  2040  0E19                     	;# 
  2041  0E1A                     	;# 
  2042  0E1B                     	;# 
  2043  0E1C                     	;# 
  2044  0E1D                     	;# 
  2045  0E1E                     	;# 
  2046  0E1F                     	;# 
  2047  0E20                     	;# 
  2048  0E21                     	;# 
  2049  0E22                     	;# 
  2050  0E24                     	;# 
  2051  0E25                     	;# 
  2052  0E28                     	;# 
  2053  0E29                     	;# 
  2054  0E2A                     	;# 
  2055  0E2B                     	;# 
  2056  0E2C                     	;# 
  2057  0E2D                     	;# 
  2058  0E2E                     	;# 
  2059  0E2F                     	;# 
  2060  0E90                     	;# 
  2061  0E91                     	;# 
  2062  0E92                     	;# 
  2063  0E94                     	;# 
  2064  0E95                     	;# 
  2065  0EA0                     	;# 
  2066  0EA1                     	;# 
  2067  0EA2                     	;# 
  2068  0EA3                     	;# 
  2069  0EA4                     	;# 
  2070  0EA5                     	;# 
  2071  0F0F                     	;# 
  2072  0F10                     	;# 
  2073  0F11                     	;# 
  2074  0F12                     	;# 
  2075  0F13                     	;# 
  2076  0F14                     	;# 
  2077  0F15                     	;# 
  2078  0F16                     	;# 
  2079  0F17                     	;# 
  2080  0F18                     	;# 
  2081  0F19                     	;# 
  2082  0F1A                     	;# 
  2083  0F1B                     	;# 
  2084  0F1C                     	;# 
  2085  0F1D                     	;# 
  2086  0F1E                     	;# 
  2087  0F1F                     	;# 
  2088  0F20                     	;# 
  2089  0F21                     	;# 
  2090  0F22                     	;# 
  2091  0F23                     	;# 
  2092  0F24                     	;# 
  2093  0F25                     	;# 
  2094  0F26                     	;# 
  2095  0F27                     	;# 
  2096  0F28                     	;# 
  2097  0F29                     	;# 
  2098  0F2A                     	;# 
  2099  0F2B                     	;# 
  2100  0F2C                     	;# 
  2101  0F2D                     	;# 
  2102  0F2E                     	;# 
  2103  0F2F                     	;# 
  2104  0F30                     	;# 
  2105  0F31                     	;# 
  2106  0F32                     	;# 
  2107  0F33                     	;# 
  2108  0F34                     	;# 
  2109  0F35                     	;# 
  2110  0F36                     	;# 
  2111  0F37                     	;# 
  2112  0FE4                     	;# 
  2113  0FE5                     	;# 
  2114  0FE6                     	;# 
  2115  0FE7                     	;# 
  2116  0FE8                     	;# 
  2117  0FE9                     	;# 
  2118  0FEA                     	;# 
  2119  0FEB                     	;# 
  2120  0FED                     	;# 
  2121  0FEE                     	;# 
  2122  0FEF                     	;# 
  2123  0000                     	;# 
  2124  0001                     	;# 
  2125  0002                     	;# 
  2126  0003                     	;# 
  2127  0004                     	;# 
  2128  0005                     	;# 
  2129  0006                     	;# 
  2130  0007                     	;# 
  2131  0008                     	;# 
  2132  0009                     	;# 
  2133  000A                     	;# 
  2134  000B                     	;# 
  2135  000C                     	;# 
  2136  000E                     	;# 
  2137  0010                     	;# 
  2138  0011                     	;# 
  2139  0012                     	;# 
  2140  0013                     	;# 
  2141  0014                     	;# 
  2142  0015                     	;# 
  2143  0015                     	;# 
  2144  0016                     	;# 
  2145  0016                     	;# 
  2146  0017                     	;# 
  2147  0018                     	;# 
  2148  0019                     	;# 
  2149  0019                     	;# 
  2150  001A                     	;# 
  2151  001B                     	;# 
  2152  001C                     	;# 
  2153  001D                     	;# 
  2154  001E                     	;# 
  2155  001F                     	;# 
  2156  008C                     	;# 
  2157  008E                     	;# 
  2158  0090                     	;# 
  2159  0091                     	;# 
  2160  0092                     	;# 
  2161  0093                     	;# 
  2162  0094                     	;# 
  2163  0097                     	;# 
  2164  009B                     	;# 
  2165  009B                     	;# 
  2166  009C                     	;# 
  2167  009D                     	;# 
  2168  009E                     	;# 
  2169  009F                     	;# 
  2170  010C                     	;# 
  2171  010E                     	;# 
  2172  0111                     	;# 
  2173  0112                     	;# 
  2174  0113                     	;# 
  2175  0114                     	;# 
  2176  0115                     	;# 
  2177  0116                     	;# 
  2178  0117                     	;# 
  2179  0118                     	;# 
  2180  0119                     	;# 
  2181  018C                     	;# 
  2182  018E                     	;# 
  2183  0199                     	;# 
  2184  0199                     	;# 
  2185  0199                     	;# 
  2186  019A                     	;# 
  2187  019A                     	;# 
  2188  019A                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019B                     	;# 
  2192  019B                     	;# 
  2193  019B                     	;# 
  2194  019C                     	;# 
  2195  019C                     	;# 
  2196  019C                     	;# 
  2197  019D                     	;# 
  2198  019D                     	;# 
  2199  019D                     	;# 
  2200  019E                     	;# 
  2201  019E                     	;# 
  2202  019E                     	;# 
  2203  019F                     	;# 
  2204  019F                     	;# 
  2205  019F                     	;# 
  2206  019F                     	;# 
  2207  019F                     	;# 
  2208  020C                     	;# 
  2209  020E                     	;# 
  2210  0211                     	;# 
  2211  0211                     	;# 
  2212  0212                     	;# 
  2213  0212                     	;# 
  2214  0213                     	;# 
  2215  0213                     	;# 
  2216  0214                     	;# 
  2217  0214                     	;# 
  2218  0215                     	;# 
  2219  0215                     	;# 
  2220  0215                     	;# 
  2221  0215                     	;# 
  2222  0216                     	;# 
  2223  0216                     	;# 
  2224  0217                     	;# 
  2225  0217                     	;# 
  2226  0219                     	;# 
  2227  021A                     	;# 
  2228  021B                     	;# 
  2229  021C                     	;# 
  2230  021D                     	;# 
  2231  021D                     	;# 
  2232  021E                     	;# 
  2233  021F                     	;# 
  2234  028C                     	;# 
  2235  028E                     	;# 
  2236  0291                     	;# 
  2237  0291                     	;# 
  2238  0292                     	;# 
  2239  0293                     	;# 
  2240  0294                     	;# 
  2241  0295                     	;# 
  2242  0295                     	;# 
  2243  0296                     	;# 
  2244  0297                     	;# 
  2245  0298                     	;# 
  2246  029F                     	;# 
  2247  030C                     	;# 
  2248  030E                     	;# 
  2249  0311                     	;# 
  2250  0311                     	;# 
  2251  0312                     	;# 
  2252  0313                     	;# 
  2253  0314                     	;# 
  2254  0315                     	;# 
  2255  0315                     	;# 
  2256  0316                     	;# 
  2257  0317                     	;# 
  2258  0318                     	;# 
  2259  038C                     	;# 
  2260  038E                     	;# 
  2261  0391                     	;# 
  2262  0392                     	;# 
  2263  0393                     	;# 
  2264  0397                     	;# 
  2265  0398                     	;# 
  2266  0399                     	;# 
  2267  039A                     	;# 
  2268  039C                     	;# 
  2269  039D                     	;# 
  2270  039E                     	;# 
  2271  039F                     	;# 
  2272  0411                     	;# 
  2273  0411                     	;# 
  2274  0412                     	;# 
  2275  0413                     	;# 
  2276  0414                     	;# 
  2277  0415                     	;# 
  2278  0416                     	;# 
  2279  0417                     	;# 
  2280  0418                     	;# 
  2281  0418                     	;# 
  2282  0419                     	;# 
  2283  041A                     	;# 
  2284  041B                     	;# 
  2285  041C                     	;# 
  2286  041D                     	;# 
  2287  041E                     	;# 
  2288  041F                     	;# 
  2289  0498                     	;# 
  2290  0498                     	;# 
  2291  0499                     	;# 
  2292  049A                     	;# 
  2293  049B                     	;# 
  2294  049B                     	;# 
  2295  049C                     	;# 
  2296  049D                     	;# 
  2297  049E                     	;# 
  2298  049F                     	;# 
  2299  0617                     	;# 
  2300  0618                     	;# 
  2301  0619                     	;# 
  2302  0619                     	;# 
  2303  061A                     	;# 
  2304  061B                     	;# 
  2305  061C                     	;# 
  2306  061C                     	;# 
  2307  061F                     	;# 
  2308  0691                     	;# 
  2309  0692                     	;# 
  2310  0693                     	;# 
  2311  0694                     	;# 
  2312  0695                     	;# 
  2313  0696                     	;# 
  2314  0697                     	;# 
  2315  0698                     	;# 
  2316  0699                     	;# 
  2317  0711                     	;# 
  2318  0712                     	;# 
  2319  0713                     	;# 
  2320  0714                     	;# 
  2321  0715                     	;# 
  2322  0716                     	;# 
  2323  0717                     	;# 
  2324  0718                     	;# 
  2325  0719                     	;# 
  2326  0891                     	;# 
  2327  0891                     	;# 
  2328  0891                     	;# 
  2329  0891                     	;# 
  2330  0891                     	;# 
  2331  0891                     	;# 
  2332  0892                     	;# 
  2333  0892                     	;# 
  2334  0892                     	;# 
  2335  0893                     	;# 
  2336  0893                     	;# 
  2337  0893                     	;# 
  2338  0893                     	;# 
  2339  0893                     	;# 
  2340  0893                     	;# 
  2341  0894                     	;# 
  2342  0894                     	;# 
  2343  0894                     	;# 
  2344  0895                     	;# 
  2345  0895                     	;# 
  2346  0895                     	;# 
  2347  0896                     	;# 
  2348  0896                     	;# 
  2349  0896                     	;# 
  2350  089B                     	;# 
  2351  0911                     	;# 
  2352  0912                     	;# 
  2353  0913                     	;# 
  2354  0914                     	;# 
  2355  0915                     	;# 
  2356  0916                     	;# 
  2357  0918                     	;# 
  2358  0919                     	;# 
  2359  091A                     	;# 
  2360  091B                     	;# 
  2361  091C                     	;# 
  2362  091D                     	;# 
  2363  091E                     	;# 
  2364  091F                     	;# 
  2365  0E0F                     	;# 
  2366  0E10                     	;# 
  2367  0E11                     	;# 
  2368  0E12                     	;# 
  2369  0E13                     	;# 
  2370  0E14                     	;# 
  2371  0E15                     	;# 
  2372  0E16                     	;# 
  2373  0E17                     	;# 
  2374  0E18                     	;# 
  2375  0E19                     	;# 
  2376  0E1A                     	;# 
  2377  0E1B                     	;# 
  2378  0E1C                     	;# 
  2379  0E1D                     	;# 
  2380  0E1E                     	;# 
  2381  0E1F                     	;# 
  2382  0E20                     	;# 
  2383  0E21                     	;# 
  2384  0E22                     	;# 
  2385  0E24                     	;# 
  2386  0E25                     	;# 
  2387  0E28                     	;# 
  2388  0E29                     	;# 
  2389  0E2A                     	;# 
  2390  0E2B                     	;# 
  2391  0E2C                     	;# 
  2392  0E2D                     	;# 
  2393  0E2E                     	;# 
  2394  0E2F                     	;# 
  2395  0E90                     	;# 
  2396  0E91                     	;# 
  2397  0E92                     	;# 
  2398  0E94                     	;# 
  2399  0E95                     	;# 
  2400  0EA0                     	;# 
  2401  0EA1                     	;# 
  2402  0EA2                     	;# 
  2403  0EA3                     	;# 
  2404  0EA4                     	;# 
  2405  0EA5                     	;# 
  2406  0F0F                     	;# 
  2407  0F10                     	;# 
  2408  0F11                     	;# 
  2409  0F12                     	;# 
  2410  0F13                     	;# 
  2411  0F14                     	;# 
  2412  0F15                     	;# 
  2413  0F16                     	;# 
  2414  0F17                     	;# 
  2415  0F18                     	;# 
  2416  0F19                     	;# 
  2417  0F1A                     	;# 
  2418  0F1B                     	;# 
  2419  0F1C                     	;# 
  2420  0F1D                     	;# 
  2421  0F1E                     	;# 
  2422  0F1F                     	;# 
  2423  0F20                     	;# 
  2424  0F21                     	;# 
  2425  0F22                     	;# 
  2426  0F23                     	;# 
  2427  0F24                     	;# 
  2428  0F25                     	;# 
  2429  0F26                     	;# 
  2430  0F27                     	;# 
  2431  0F28                     	;# 
  2432  0F29                     	;# 
  2433  0F2A                     	;# 
  2434  0F2B                     	;# 
  2435  0F2C                     	;# 
  2436  0F2D                     	;# 
  2437  0F2E                     	;# 
  2438  0F2F                     	;# 
  2439  0F30                     	;# 
  2440  0F31                     	;# 
  2441  0F32                     	;# 
  2442  0F33                     	;# 
  2443  0F34                     	;# 
  2444  0F35                     	;# 
  2445  0F36                     	;# 
  2446  0F37                     	;# 
  2447  0FE4                     	;# 
  2448  0FE5                     	;# 
  2449  0FE6                     	;# 
  2450  0FE7                     	;# 
  2451  0FE8                     	;# 
  2452  0FE9                     	;# 
  2453  0FEA                     	;# 
  2454  0FEB                     	;# 
  2455  0FED                     	;# 
  2456  0FEE                     	;# 
  2457  0FEF                     	;# 
  2458                           
  2459                           	psect	idataBANK1
  2460  0003                     __pidataBANK1:	
  2461 ;;nrf24l01Service@width	offset	0
  2462 ;;nrf24l01Service@i	offset	1
  2463 ;;strcmp@s1	offset	0
  2464 ;;strcmp@r	offset	1
  2465 ;;strcmp@s2	offset=-1 (param)
  2466 ;;nrf24l01SendTXBuffer@packet	offset	0
  2467 ;;nrf24l01SendTXBuffer@i	offset	1
  2468 ;;nrf24l01SendTXBuffer@width	offset	2
  2469 ;;strlen@s	offset	0
  2470 ;;strlen@cp	offset	1
  2471 ;;nrf24l01SetRXMode@rxMode	offset	0
  2472 ;;nrf24l01Send@command	offset	0
  2473 ;;nrf24l01Send@data	offset=-1 (param)
  2474 ;;nrf24l01SPISend@data	offset	0
  2475 ;;memset@p	offset	0
  2476 ;;memset@p1	offset=-2 (param)
  2477 ;;memset@c	offset=-4 (param)
  2478 ;;memset@n	offset=-6 (param)
  2479 ;;nrf24l01Service@width	offset	0
  2480 ;;nrf24l01Service@i	offset	1
  2481 ;;strcmp@s1	offset	0
  2482 ;;strcmp@r	offset	1
  2483 ;;strcmp@s2	offset=-1 (param)
  2484 ;;nrf24l01SendTXBuffer@packet	offset	0
  2485 ;;nrf24l01SendTXBuffer@i	offset	1
  2486 ;;nrf24l01SendTXBuffer@width	offset	2
  2487 ;;strlen@s	offset	0
  2488 ;;strlen@cp	offset	1
  2489 ;;nrf24l01SetRXMode@rxMode	offset	0
  2490 ;;nrf24l01Send@command	offset	0
  2491 ;;nrf24l01Send@data	offset=-1 (param)
  2492 ;;nrf24l01SPISend@data	offset	0
  2493 ;;memset@p	offset	0
  2494 ;;memset@p1	offset=-2 (param)
  2495 ;;memset@c	offset=-4 (param)
  2496 ;;memset@n	offset=-6 (param)
  2497                           
  2498                           
  2499                           ;initializer for _romData
  2500  0003  3420               	retlw	low (_romDataMap| (0+256))
  2501                           
  2502                           	psect	stringtext1
  2503  1000                     __pstringtext1:	
  2504  1000                     _dpowers:	
  2505  1000  3401               	retlw	1
  2506  1001  3400               	retlw	0
  2507  1002  3400               	retlw	0
  2508  1003  3400               	retlw	0
  2509  1004  340A               	retlw	10
  2510  1005  3400               	retlw	0
  2511  1006  3400               	retlw	0
  2512  1007  3400               	retlw	0
  2513  1008  3464               	retlw	100
  2514  1009  3400               	retlw	0
  2515  100A  3400               	retlw	0
  2516  100B  3400               	retlw	0
  2517  100C  34E8               	retlw	232
  2518  100D  3403               	retlw	3
  2519  100E  3400               	retlw	0
  2520  100F  3400               	retlw	0
  2521  1010  3410               	retlw	16
  2522  1011  3427               	retlw	39
  2523  1012  3400               	retlw	0
  2524  1013  3400               	retlw	0
  2525  1014  34A0               	retlw	160
  2526  1015  3486               	retlw	134
  2527  1016  3401               	retlw	1
  2528  1017  3400               	retlw	0
  2529  1018  3440               	retlw	64
  2530  1019  3442               	retlw	66
  2531  101A  340F               	retlw	15
  2532  101B  3400               	retlw	0
  2533  101C  3480               	retlw	128
  2534  101D  3496               	retlw	150
  2535  101E  3498               	retlw	152
  2536  101F  3400               	retlw	0
  2537  1020  3400               	retlw	0
  2538  1021  34E1               	retlw	225
  2539  1022  34F5               	retlw	245
  2540  1023  3405               	retlw	5
  2541  1024  3400               	retlw	0
  2542  1025  34CA               	retlw	202
  2543  1026  349A               	retlw	154
  2544  1027  343B               	retlw	59
  2545  1028                     __end_of_dpowers:	
  2546                           
  2547                           	psect	stringtext2
  2548  103A                     __pstringtext2:	
  2549  103A                     _n_ADDRESS_P0:	
  2550  103A  34AD               	retlw	173
  2551  103B  3487               	retlw	135
  2552  103C  3466               	retlw	102
  2553  103D  34BC               	retlw	188
  2554  103E  34BB               	retlw	187
  2555  103F                     __end_of_n_ADDRESS_P0:	
  2556                           
  2557                           	psect	stringtext3
  2558  1028                     __pstringtext3:	
  2559  1028                     _n_ADDRESS_MUL:	
  2560  1028  3421               	retlw	33
  2561  1029                     __end_of_n_ADDRESS_MUL:	
  2562  001A                     _TMR1H	set	26
  2563  0019                     _TMR1L	set	25
  2564  001C                     _T1GCONbits	set	28
  2565  001B                     _T1CONbits	set	27
  2566  000B                     _INTCONbits	set	11
  2567  0011                     _PIR1bits	set	17
  2568  0010                     _PIR0bits	set	16
  2569  000C                     _PORTAbits	set	12
  2570  000E                     _PORTCbits	set	14
  2571  0003                     _STATUSbits	set	3
  2572  0091                     _PIE1bits	set	145
  2573  009E                     _ADCON1bits	set	158
  2574  009C                     _ADRESH	set	156
  2575  009B                     _ADRESL	set	155
  2576  009D                     _ADCON0bits	set	157
  2577  0090                     _PIE0bits	set	144
  2578  0097                     _WDTCONbits	set	151
  2579  008E                     _TRISCbits	set	142
  2580  008C                     _TRISAbits	set	140
  2581  0117                     _FVRCONbits	set	279
  2582  018E                     _ANSELCbits	set	398
  2583  018C                     _ANSELAbits	set	396
  2584  018E                     _ANSELC	set	398
  2585  018C                     _ANSELA	set	396
  2586  020C                     _WPUAbits	set	524
  2587  020E                     _WPUC	set	526
  2588  020C                     _WPUA	set	524
  2589  0211                     _SSP1BUF	set	529
  2590  0214                     _SSP1STATbits	set	532
  2591  0215                     _SSP1CON1bits	set	533
  2592  028C                     _ODCONAbits	set	652
  2593  028E                     _ODCONC	set	654
  2594  028C                     _ODCONA	set	652
  2595  0391                     _IOCAPbits	set	913
  2596  038E                     _INLVLC	set	910
  2597  038C                     _INLVLA	set	908
  2598  0896                     _NVMCON2	set	2198
  2599  0895                     _NVMCON1bits	set	2197
  2600  0893                     _NVMDATL	set	2195
  2601  0891                     _NVMADRL	set	2193
  2602  0892                     _NVMADRH	set	2194
  2603  0919                     _OSCCON1bits	set	2329
  2604  0EA0                     _RC0PPSbits	set	3744
  2605  0EA2                     _RC2PPSbits	set	3746
  2606  0EA1                     _RC1PPSbits	set	3745
  2607  1029                     STR_8:	
  2608  1029  3425               	retlw	37	;'%'
  2609  102A  346C               	retlw	108	;'l'
  2610  102B  3475               	retlw	117	;'u'
  2611  102C  342E               	retlw	46	;'.'
  2612  102D  3425               	retlw	37	;'%'
  2613  102E  3436               	retlw	54	;'6'
  2614  102F  342E               	retlw	46	;'.'
  2615  1030  3436               	retlw	54	;'6'
  2616  1031  346C               	retlw	108	;'l'
  2617  1032  3475               	retlw	117	;'u'
  2618  1033  3400               	retlw	0
  2619                           
  2620                           	psect	stringtext4
  2621  1034                     __pstringtext4:	
  2622  1034                     STR_3:	
  2623  1034  3443               	retlw	67	;'C'
  2624  1035  344F               	retlw	79	;'O'
  2625  1036  3455               	retlw	85	;'U'
  2626  1037  344E               	retlw	78	;'N'
  2627  1038  3454               	retlw	84	;'T'
  2628  1039  3400               	retlw	0
  2629                           
  2630                           	psect	stringtext5
  2631  103F                     __pstringtext5:	
  2632  103F                     STR_5:	
  2633  103F  3454               	retlw	84	;'T'
  2634  1040  3445               	retlw	69	;'E'
  2635  1041  344D               	retlw	77	;'M'
  2636  1042  3450               	retlw	80	;'P'
  2637  1043  3400               	retlw	0
  2638                           
  2639                           	psect	stringtext6
  2640  1044                     __pstringtext6:	
  2641  1044                     STR_4:	
  2642  1044  3456               	retlw	86	;'V'
  2643  1045  3442               	retlw	66	;'B'
  2644  1046  3441               	retlw	65	;'A'
  2645  1047  3454               	retlw	84	;'T'
  2646  1048  3400               	retlw	0
  2647                           
  2648                           	psect	stringtext7
  2649  1049                     __pstringtext7:	
  2650  1049                     STR_7:	
  2651  1049  3442               	retlw	66	;'B'
  2652  104A  344F               	retlw	79	;'O'
  2653  104B  344F               	retlw	79	;'O'
  2654  104C  3454               	retlw	84	;'T'
  2655  104D  3400               	retlw	0
  2656                           
  2657                           	psect	stringtext8
  2658  104E                     __pstringtext8:	
  2659  104E                     STR_6:	
  2660  104E  3455               	retlw	85	;'U'
  2661  104F  3457               	retlw	87	;'W'
  2662  1050  3454               	retlw	84	;'T'
  2663  1051  3400               	retlw	0
  2664                           
  2665                           	psect	stringtext9
  2666  1052                     __pstringtext9:	
  2667  1052                     STR_1:	
  2668  1052  342F               	retlw	47	;'/'
  2669  1053  3400               	retlw	0
  2670                           
  2671                           	psect	stringtext10
  2672  0000                     __pstringtext10:	
  2673  1052                     
  2674                           ; #config settings
  2675  0000                     
  2676                           	psect	cinit
  2677  002B                     start_initialization:	
  2678  002B                     __initialization:	
  2679                           
  2680                           ; Initialize objects allocated to BANK1
  2681  002B  0021               	movlb	1	; select bank1
  2682  002C  3180  2003  3180   	fcall	__pidataBANK1	;fetch initializer
  2683  002F  00E9               	movwf	__pdataBANK1& (0+127)
  2684                           
  2685                           ; Clear objects allocated to BANK0
  2686  0030  0020               	movlb	0	; select bank0
  2687  0031  01E4               	clrf	__pbssBANK0& (0+127)
  2688  0032  01E5               	clrf	(__pbssBANK0+1)& (0+127)
  2689  0033  01E6               	clrf	(__pbssBANK0+2)& (0+127)
  2690  0034  01E7               	clrf	(__pbssBANK0+3)& (0+127)
  2691  0035  01E8               	clrf	(__pbssBANK0+4)& (0+127)
  2692  0036  01E9               	clrf	(__pbssBANK0+5)& (0+127)
  2693                           
  2694                           ; Clear objects allocated to BANK1
  2695  0037  30DC               	movlw	low __pbssBANK1
  2696  0038  0084               	movwf	4
  2697  0039  3000               	movlw	high __pbssBANK1
  2698  003A  0085               	movwf	5
  2699  003B  300D               	movlw	13
  2700  003C  3187  27FA  3180   	fcall	clear_ram0
  2701                           
  2702                           ; Clear objects allocated to BANK2
  2703  003F  3020               	movlw	low __pbssBANK2
  2704  0040  0084               	movwf	4
  2705  0041  3001               	movlw	high __pbssBANK2
  2706  0042  0085               	movwf	5
  2707  0043  302D               	movlw	45
  2708  0044  3187  27FA  3180   	fcall	clear_ram0
  2709                           
  2710                           ; Clear objects allocated to BANK3
  2711  0047  30A0               	movlw	low __pbssBANK3
  2712  0048  0084               	movwf	4
  2713  0049  3001               	movlw	high __pbssBANK3
  2714  004A  0085               	movwf	5
  2715  004B  3042               	movlw	66
  2716  004C  3187  27FA         	fcall	clear_ram0
  2717  004E                     end_of_initialization:	
  2718                           ;End of C runtime variable initialization code
  2719                           
  2720  004E                     __end_of__initialization:	
  2721  004E  0020               	movlb	0
  2722                           
  2723                           ;Initialize the stack pointer (FSR1)
  2724  004F  306D               	movlw	low ___sp
  2725  0050  0086               	movwf	6
  2726  0051  3021               	movlw	high ___sp
  2727  0052  0087               	movwf	7
  2728  0053  318E  2ECC         	ljmp	_main	;jump to C main() function
  2729                           
  2730                           	psect	bssBANK0
  2731  0064                     __pbssBANK0:	
  2732  0064                     _status:	
  2733  0064                     	ds	5
  2734  0069                     _lastTXPacket:	
  2735  0069                     	ds	1
  2736                           
  2737                           	psect	bssBANK1
  2738  00DC                     __pbssBANK1:	
  2739  00DC                     _distance:	
  2740  00DC                     	ds	2
  2741  00DE                     _testCount:	
  2742  00DE                     	ds	2
  2743  00E0                     _rcount:	
  2744  00E0                     	ds	2
  2745  00E2                     _rlimit:	
  2746  00E2                     	ds	2
  2747  00E4                     _rloop:	
  2748  00E4                     	ds	2
  2749  00E6                     _counter:	
  2750  00E6                     	ds	2
  2751  00E8                     _waiting:	
  2752  00E8                     	ds	1
  2753                           
  2754                           	psect	dataBANK1
  2755  00E9                     __pdataBANK1:	
  2756  00E9                     _romData:	
  2757  00E9                     	ds	1
  2758                           
  2759                           	psect	bssBANK2
  2760  0120                     __pbssBANK2:	
  2761  0120                     _romDataMap:	
  2762  0120                     	ds	28
  2763  013C                     ftoa@buf:	
  2764  013C                     	ds	17
  2765                           
  2766                           	psect	bssBANK3
  2767  01A0                     __pbssBANK3:	
  2768  01A0                     _RXPacket:	
  2769  01A0                     	ds	33
  2770  01C1                     _TXPacket:	
  2771  01C1                     	ds	33
  2772                           
  2773                           	psect	clrtext
  2774  07FA                     clear_ram0:	
  2775                           ;	Called with FSR0 containing the base address, and
  2776                           ;	WREG with the size to clear
  2777                           
  2778  07FA  0064               	clrwdt	;clear the watchdog before getting into this loop
  2779  07FB                     clrloop0:	
  2780  07FB  0180               	clrf	0	;clear RAM location pointed to by FSR
  2781  07FC  3101               	addfsr 0,1
  2782  07FD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2783  07FE  2FFB               	goto	clrloop0	;have we reached the end yet?
  2784  07FF  3400               	retlw	0	;all done for this memory range, return
  2785                           
  2786                           	psect	cstackBANK4
  2787  0220                     __pcstackBANK4:	
  2788  0220                     loop@vt:	
  2789                           
  2790                           ; 3 bytes @ 0x0
  2791  0220                     	ds	3
  2792  0223                     loop@ta:	
  2793                           
  2794                           ; 3 bytes @ 0x3
  2795  0223                     	ds	3
  2796  0226                     _loop$2247:	
  2797                           
  2798                           ; 3 bytes @ 0x6
  2799  0226                     	ds	3
  2800  0229                     _loop$2248:	
  2801                           
  2802                           ; 3 bytes @ 0x9
  2803  0229                     	ds	3
  2804  022C                     loop@packet:	
  2805                           
  2806                           ; 33 bytes @ 0xC
  2807  022C                     	ds	33
  2808                           
  2809                           	psect	cstackBANK1
  2810  00A0                     __pcstackBANK1:	
  2811  00A0                     ?_ftoa:	
  2812  00A0                     ftoa@f:	
  2813                           ; 1 bytes @ 0x0
  2814                           
  2815                           
  2816                           ; 3 bytes @ 0x0
  2817  00A0                     	ds	3
  2818  00A3                     ftoa@status:	
  2819                           
  2820                           ; 1 bytes @ 0x3
  2821  00A3                     	ds	1
  2822  00A4                     ftoa@rem:	
  2823                           
  2824                           ; 4 bytes @ 0x4
  2825  00A4                     	ds	4
  2826  00A8                     ftoa@l:	
  2827                           
  2828                           ; 4 bytes @ 0x8
  2829  00A8                     	ds	4
  2830  00AC                     ftoa@cp:	
  2831                           
  2832                           ; 1 bytes @ 0xC
  2833  00AC                     	ds	1
  2834  00AD                     ?_strcat:	
  2835  00AD                     strcat@to:	
  2836                           ; 2 bytes @ 0xD
  2837                           
  2838                           
  2839                           ; 2 bytes @ 0xD
  2840  00AD                     	ds	2
  2841  00AF                     strcat@from:	
  2842                           
  2843                           ; 2 bytes @ 0xF
  2844  00AF                     	ds	2
  2845  00B1                     ?_sendMessage:	
  2846  00B1                     sendMessage@packet:	
  2847                           ; 1 bytes @ 0x11
  2848                           
  2849                           
  2850                           ; 2 bytes @ 0x11
  2851  00B1                     	ds	2
  2852  00B3                     sendMessage@topic:	
  2853                           
  2854                           ; 2 bytes @ 0x13
  2855  00B3                     	ds	2
  2856  00B5                     sendMessage@value:	
  2857                           
  2858                           ; 3 bytes @ 0x15
  2859  00B5                     	ds	3
  2860  00B8                     sendMessage@ftoaStatus:	
  2861                           
  2862                           ; 2 bytes @ 0x18
  2863  00B8                     	ds	2
  2864  00BA                     main@pipe:	
  2865                           
  2866                           ; 1 bytes @ 0x1A
  2867  00BA                     	ds	1
  2868  00BB                     main@packet:	
  2869                           
  2870                           ; 33 bytes @ 0x1B
  2871  00BB                     	ds	33
  2872                           
  2873                           	psect	cstackCOMMON
  2874  0070                     __pcstackCOMMON:	
  2875  0070                     ?_isdigit:	
  2876  0070                     ?_EEPROMWrite:	
  2877                           ; 1 bit 
  2878                           
  2879  0070                     ?_nrf24l01ISR:	
  2880                           ; 1 bytes @ 0x0
  2881                           
  2882  0070                     ??_nrf24l01ISR:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0070                     ?_nrf24l01Init:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0070                     ?_nrf24l01SetTXPipe:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0070                     ?_nrf24l01SetRXPipe:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0070                     ??_nrf24l01SetRXPipe:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     ?_EEPROMRead:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ??_isdigit:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ??___ftpack:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ?_nrf24l01InterfaceInit:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     ??_nrf24l01InterfaceInit:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ?_resetWDT:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     ??_resetWDT:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0070                     ?_sleepMs:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0070                     ?_exception:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ?_ISR:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     ?_loop:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     ?_nrf24l01GetPipe:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     ?_main:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     ?_nrf24l01InitRegisters:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0070                     ?___bmul:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0070                     ??___lldiv:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0070                     ??___ftge:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0070                     ??___llmod:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0070                     ?_strcpy:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0070                     ?___wmul:	
  2955                           ; 2 bytes @ 0x0
  2956                           
  2957  0070                     ?___lwmod:	
  2958                           ; 2 bytes @ 0x0
  2959                           
  2960  0070                     ?___awtoft:	
  2961                           ; 2 bytes @ 0x0
  2962                           
  2963  0070                     ?___lbtoft:	
  2964                           ; 3 bytes @ 0x0
  2965                           
  2966  0070                     ?___lltoft:	
  2967                           ; 3 bytes @ 0x0
  2968                           
  2969  0070                     ?___lwtoft:	
  2970                           ; 3 bytes @ 0x0
  2971                           
  2972  0070                     ___bmul@multiplicand:	
  2973                           ; 3 bytes @ 0x0
  2974                           
  2975  0070                     ___llmod@counter:	
  2976                           ; 1 bytes @ 0x0
  2977                           
  2978  0070                     _isdigit$1994:	
  2979                           ; 1 bytes @ 0x0
  2980                           
  2981  0070                     sleepMs@milliseconds:	
  2982                           ; 1 bytes @ 0x0
  2983                           
  2984  0070                     EEPROMWrite@address:	
  2985                           ; 2 bytes @ 0x0
  2986                           
  2987  0070                     EEPROMRead@address:	
  2988                           ; 2 bytes @ 0x0
  2989                           
  2990  0070                     ___wmul@multiplier:	
  2991                           ; 2 bytes @ 0x0
  2992                           
  2993  0070                     ___awtoft@c:	
  2994                           ; 2 bytes @ 0x0
  2995                           
  2996  0070                     ___lwmod@divisor:	
  2997                           ; 2 bytes @ 0x0
  2998                           
  2999  0070                     ___lwtoft@c:	
  3000                           ; 2 bytes @ 0x0
  3001                           
  3002  0070                     strcpy@to:	
  3003                           ; 2 bytes @ 0x0
  3004                           
  3005  0070                     ___lltoft@c:	
  3006                           ; 2 bytes @ 0x0
  3007                           
  3008                           
  3009                           ; 4 bytes @ 0x0
  3010  0070                     	ds	1
  3011  0071                     ??___bmul:	
  3012  0071                     nrf24l01SetRXPipe@pipe:	
  3013                           ; 1 bytes @ 0x1
  3014                           
  3015  0071                     ___bmul@product:	
  3016                           ; 1 bytes @ 0x1
  3017                           
  3018  0071                     isdigit@c:	
  3019                           ; 1 bytes @ 0x1
  3020                           
  3021                           
  3022                           ; 1 bytes @ 0x1
  3023  0071                     	ds	1
  3024  0072                     ??_EEPROMRead:	
  3025  0072                     ??_sleepMs:	
  3026                           ; 1 bytes @ 0x2
  3027                           
  3028  0072                     nrf24l01SetRXPipe@enRXAddr:	
  3029                           ; 1 bytes @ 0x2
  3030                           
  3031  0072                     EEPROMWrite@data:	
  3032                           ; 1 bytes @ 0x2
  3033                           
  3034  0072                     ___bmul@multiplier:	
  3035                           ; 1 bytes @ 0x2
  3036                           
  3037  0072                     ___wmul@multiplicand:	
  3038                           ; 1 bytes @ 0x2
  3039                           
  3040  0072                     ___lwmod@dividend:	
  3041                           ; 2 bytes @ 0x2
  3042                           
  3043  0072                     strcpy@from:	
  3044                           ; 2 bytes @ 0x2
  3045                           
  3046                           
  3047                           ; 2 bytes @ 0x2
  3048  0072                     	ds	1
  3049  0073                     ??_EEPROMWrite:	
  3050  0073                     ??_nrf24l01SetTXPipe:	
  3051                           ; 1 bytes @ 0x3
  3052                           
  3053  0073                     ??___awtoft:	
  3054                           ; 1 bytes @ 0x3
  3055                           
  3056  0073                     ??___lwtoft:	
  3057                           ; 1 bytes @ 0x3
  3058                           
  3059  0073                     sleepMs@wdtps:	
  3060                           ; 1 bytes @ 0x3
  3061                           
  3062  0073                     EEPROMWrite@GIEBitValue:	
  3063                           ; 1 bytes @ 0x3
  3064                           
  3065  0073                     ___awtoft@sign:	
  3066                           ; 1 bytes @ 0x3
  3067                           
  3068                           
  3069                           ; 1 bytes @ 0x3
  3070  0073                     	ds	1
  3071  0074                     ??_strcpy:	
  3072  0074                     ??_strcat:	
  3073                           ; 1 bytes @ 0x4
  3074                           
  3075  0074                     ??_ftoa:	
  3076                           ; 1 bytes @ 0x4
  3077                           
  3078  0074                     ??_nrf24l01SendPacket:	
  3079                           ; 1 bytes @ 0x4
  3080                           
  3081  0074                     ??_exception:	
  3082                           ; 1 bytes @ 0x4
  3083                           
  3084  0074                     ??_sleepListren:	
  3085                           ; 1 bytes @ 0x4
  3086                           
  3087  0074                     ??_sendMessage:	
  3088                           ; 1 bytes @ 0x4
  3089                           
  3090  0074                     ??_loop:	
  3091                           ; 1 bytes @ 0x4
  3092                           
  3093  0074                     ??___wmul:	
  3094                           ; 1 bytes @ 0x4
  3095                           
  3096  0074                     ??___ftmul:	
  3097                           ; 1 bytes @ 0x4
  3098                           
  3099  0074                     ??___ftneg:	
  3100                           ; 1 bytes @ 0x4
  3101                           
  3102  0074                     ??___ftsub:	
  3103                           ; 1 bytes @ 0x4
  3104                           
  3105  0074                     ??___fttol:	
  3106                           ; 1 bytes @ 0x4
  3107                           
  3108  0074                     ??___lbtoft:	
  3109                           ; 1 bytes @ 0x4
  3110                           
  3111  0074                     ??___lltoft:	
  3112                           ; 1 bytes @ 0x4
  3113                           
  3114  0074                     ??___lwmod:	
  3115                           ; 1 bytes @ 0x4
  3116                           
  3117                           
  3118                           	psect	cstackBANK0
  3119  0020                     __pcstackBANK0:	
  3120                           ; 1 bytes @ 0x4
  3121                           
  3122  0020                     ??_ISR:	
  3123                           
  3124                           ; 1 bytes @ 0x0
  3125  0020                     	ds	6
  3126  0026                     ?___ftge:	
  3127  0026                     ?_sleepListren:	
  3128                           ; 1 bit 
  3129                           
  3130  0026                     ?___ftpack:	
  3131                           ; 1 bytes @ 0x6
  3132                           
  3133  0026                     ?___lldiv:	
  3134                           ; 3 bytes @ 0x6
  3135                           
  3136  0026                     exception@exception:	
  3137                           ; 4 bytes @ 0x6
  3138                           
  3139  0026                     nrf24l01SetTXPipe@pipe:	
  3140                           ; 1 bytes @ 0x6
  3141                           
  3142  0026                     ___lwmod@counter:	
  3143                           ; 1 bytes @ 0x6
  3144                           
  3145  0026                     sleepListren@seconds:	
  3146                           ; 1 bytes @ 0x6
  3147                           
  3148  0026                     ___wmul@product:	
  3149                           ; 2 bytes @ 0x6
  3150                           
  3151  0026                     strcpy@cp:	
  3152                           ; 2 bytes @ 0x6
  3153                           
  3154  0026                     ___ftpack@arg:	
  3155                           ; 2 bytes @ 0x6
  3156                           
  3157  0026                     ___ftge@ff1:	
  3158                           ; 3 bytes @ 0x6
  3159                           
  3160  0026                     ___lldiv@divisor:	
  3161                           ; 3 bytes @ 0x6
  3162                           
  3163                           
  3164                           ; 4 bytes @ 0x6
  3165  0026                     	ds	1
  3166  0027                     ??_nrf24l01GetPipe:	
  3167  0027                     ??_nrf24l01InitRegisters:	
  3168                           ; 1 bytes @ 0x7
  3169                           
  3170                           
  3171                           ; 1 bytes @ 0x7
  3172  0027                     	ds	1
  3173  0028                     ?_nrf24l01SendPacket:	
  3174  0028                     nrf24l01GetPipe@pipe:	
  3175                           ; 1 bytes @ 0x8
  3176                           
  3177  0028                     nrf24l01InitRegisters@channel:	
  3178                           ; 1 bytes @ 0x8
  3179                           
  3180  0028                     nrf24l01SendPacket@txPacket:	
  3181                           ; 1 bytes @ 0x8
  3182                           
  3183                           
  3184                           ; 2 bytes @ 0x8
  3185  0028                     	ds	1
  3186  0029                     nrf24l01GetPipe@name:	
  3187  0029                     nrf24l01InitRegisters@setupAW:	
  3188                           ; 1 bytes @ 0x9
  3189                           
  3190  0029                     ___ftpack@exp:	
  3191                           ; 1 bytes @ 0x9
  3192                           
  3193  0029                     ___ftge@ff2:	
  3194                           ; 1 bytes @ 0x9
  3195                           
  3196                           
  3197                           ; 3 bytes @ 0x9
  3198  0029                     	ds	1
  3199  002A                     nrf24l01GetPipe@i:	
  3200  002A                     nrf24l01InitRegisters@feature:	
  3201                           ; 1 bytes @ 0xA
  3202                           
  3203  002A                     ___ftpack@sign:	
  3204                           ; 1 bytes @ 0xA
  3205                           
  3206  002A                     nrf24l01SendPacket@loopCount:	
  3207                           ; 1 bytes @ 0xA
  3208                           
  3209  002A                     ___lldiv@dividend:	
  3210                           ; 2 bytes @ 0xA
  3211                           
  3212                           
  3213                           ; 4 bytes @ 0xA
  3214  002A                     	ds	1
  3215  002B                     ?___ftadd:	
  3216  002B                     nrf24l01InitRegisters@rfSetup:	
  3217                           ; 3 bytes @ 0xB
  3218                           
  3219  002B                     ___lbtoft@c:	
  3220                           ; 1 bytes @ 0xB
  3221                           
  3222  002B                     ___lltoft@exp:	
  3223                           ; 1 bytes @ 0xB
  3224                           
  3225  002B                     ___ftadd@f1:	
  3226                           ; 1 bytes @ 0xB
  3227                           
  3228                           
  3229                           ; 3 bytes @ 0xB
  3230  002B                     	ds	1
  3231  002C                     nrf24l01InitRegisters@enAA:	
  3232                           
  3233                           ; 1 bytes @ 0xC
  3234  002C                     	ds	1
  3235  002D                     nrf24l01InitRegisters@DynPD:	
  3236                           
  3237                           ; 1 bytes @ 0xD
  3238  002D                     	ds	1
  3239  002E                     nrf24l01InitRegisters@i:	
  3240  002E                     ___ftadd@f2:	
  3241                           ; 2 bytes @ 0xE
  3242                           
  3243  002E                     ___lldiv@quotient:	
  3244                           ; 3 bytes @ 0xE
  3245                           
  3246                           
  3247                           ; 4 bytes @ 0xE
  3248  002E                     	ds	2
  3249  0030                     ??_nrf24l01Init:	
  3250                           
  3251                           ; 1 bytes @ 0x10
  3252  0030                     	ds	1
  3253  0031                     ??___ftadd:	
  3254                           
  3255                           ; 1 bytes @ 0x11
  3256  0031                     	ds	1
  3257  0032                     ___lldiv@counter:	
  3258  0032                     ___ftadd@sign:	
  3259                           ; 1 bytes @ 0x12
  3260                           
  3261                           
  3262                           ; 1 bytes @ 0x12
  3263  0032                     	ds	1
  3264  0033                     ?___llmod:	
  3265  0033                     ___ftadd@exp2:	
  3266                           ; 4 bytes @ 0x13
  3267                           
  3268  0033                     ___llmod@divisor:	
  3269                           ; 1 bytes @ 0x13
  3270                           
  3271                           
  3272                           ; 4 bytes @ 0x13
  3273  0033                     	ds	1
  3274  0034                     ___ftadd@exp1:	
  3275                           
  3276                           ; 1 bytes @ 0x14
  3277  0034                     	ds	1
  3278  0035                     ?___ftdiv:	
  3279  0035                     ?___ftsub:	
  3280                           ; 3 bytes @ 0x15
  3281                           
  3282  0035                     ___ftdiv@f2:	
  3283                           ; 3 bytes @ 0x15
  3284                           
  3285  0035                     ___ftsub@f2:	
  3286                           ; 3 bytes @ 0x15
  3287                           
  3288                           
  3289                           ; 3 bytes @ 0x15
  3290  0035                     	ds	2
  3291  0037                     ___llmod@dividend:	
  3292                           
  3293                           ; 4 bytes @ 0x17
  3294  0037                     	ds	1
  3295  0038                     ___ftdiv@f1:	
  3296  0038                     ___ftsub@f1:	
  3297                           ; 3 bytes @ 0x18
  3298                           
  3299                           
  3300                           ; 3 bytes @ 0x18
  3301  0038                     	ds	3
  3302  003B                     ??___ftdiv:	
  3303  003B                     ?_sprintf:	
  3304                           ; 1 bytes @ 0x1B
  3305                           
  3306  003B                     sprintf@f:	
  3307                           ; 2 bytes @ 0x1B
  3308                           
  3309                           
  3310                           ; 2 bytes @ 0x1B
  3311  003B                     	ds	1
  3312  003C                     ___ftdiv@cntr:	
  3313                           
  3314                           ; 1 bytes @ 0x1C
  3315  003C                     	ds	1
  3316  003D                     ___ftdiv@f3:	
  3317                           
  3318                           ; 3 bytes @ 0x1D
  3319  003D                     	ds	3
  3320  0040                     ___ftdiv@exp:	
  3321                           
  3322                           ; 1 bytes @ 0x20
  3323  0040                     	ds	1
  3324  0041                     ___ftdiv@sign:	
  3325                           
  3326                           ; 1 bytes @ 0x21
  3327  0041                     	ds	1
  3328  0042                     ?_getADCValue:	
  3329                           
  3330                           ; 3 bytes @ 0x22
  3331  0042                     	ds	3
  3332  0045                     ??_sprintf:	
  3333  0045                     ??_getADCValue:	
  3334                           ; 1 bytes @ 0x25
  3335                           
  3336                           
  3337                           ; 1 bytes @ 0x25
  3338  0045                     	ds	1
  3339  0046                     getADCValue@channel:	
  3340                           
  3341                           ; 1 bytes @ 0x26
  3342  0046                     	ds	1
  3343  0047                     getADCValue@adcLoop:	
  3344                           
  3345                           ; 1 bytes @ 0x27
  3346  0047                     	ds	1
  3347  0048                     getADCValue@adcSum:	
  3348                           
  3349                           ; 3 bytes @ 0x28
  3350  0048                     	ds	1
  3351  0049                     sprintf@flag:	
  3352                           
  3353                           ; 1 bytes @ 0x29
  3354  0049                     	ds	1
  3355  004A                     sprintf@ap:	
  3356                           
  3357                           ; 1 bytes @ 0x2A
  3358  004A                     	ds	1
  3359  004B                     ?___ftmul:	
  3360  004B                     ?___ftneg:	
  3361                           ; 3 bytes @ 0x2B
  3362                           
  3363  004B                     ___ftmul@f1:	
  3364                           ; 3 bytes @ 0x2B
  3365                           
  3366  004B                     ___ftneg@f1:	
  3367                           ; 3 bytes @ 0x2B
  3368                           
  3369  004B                     sprintf@val:	
  3370                           ; 3 bytes @ 0x2B
  3371                           
  3372                           
  3373                           ; 4 bytes @ 0x2B
  3374  004B                     	ds	3
  3375  004E                     ___ftmul@f2:	
  3376                           
  3377                           ; 3 bytes @ 0x2E
  3378  004E                     	ds	1
  3379  004F                     sprintf@sp:	
  3380                           
  3381                           ; 1 bytes @ 0x2F
  3382  004F                     	ds	1
  3383  0050                     sprintf@width:	
  3384                           
  3385                           ; 2 bytes @ 0x30
  3386  0050                     	ds	1
  3387  0051                     ___ftmul@exp:	
  3388                           
  3389                           ; 1 bytes @ 0x31
  3390  0051                     	ds	1
  3391  0052                     sprintf@prec:	
  3392  0052                     ___ftmul@f3_as_product:	
  3393                           ; 2 bytes @ 0x32
  3394                           
  3395                           
  3396                           ; 3 bytes @ 0x32
  3397  0052                     	ds	2
  3398  0054                     sprintf@c:	
  3399                           
  3400                           ; 1 bytes @ 0x34
  3401  0054                     	ds	1
  3402  0055                     ___ftmul@cntr:	
  3403                           
  3404                           ; 1 bytes @ 0x35
  3405  0055                     	ds	1
  3406  0056                     ___ftmul@sign:	
  3407                           
  3408                           ; 1 bytes @ 0x36
  3409  0056                     	ds	1
  3410  0057                     ?___fttol:	
  3411  0057                     ___fttol@f1:	
  3412                           ; 4 bytes @ 0x37
  3413                           
  3414                           
  3415                           ; 3 bytes @ 0x37
  3416  0057                     	ds	4
  3417  005B                     ___fttol@sign1:	
  3418                           
  3419                           ; 1 bytes @ 0x3B
  3420  005B                     	ds	1
  3421  005C                     ___fttol@lval:	
  3422                           
  3423                           ; 4 bytes @ 0x3C
  3424  005C                     	ds	4
  3425  0060                     ___fttol@exp1:	
  3426                           
  3427                           ; 1 bytes @ 0x40
  3428  0060                     	ds	1
  3429  0061                     strcat@cp:	
  3430                           
  3431                           ; 2 bytes @ 0x41
  3432  0061                     	ds	2
  3433  0063                     ??_main:	
  3434                           
  3435                           ; 1 bytes @ 0x43
  3436  0063                     	ds	1
  3437                           
  3438                           	psect	maintext
  3439  0ECC                     __pmaintext:	
  3440 ;;
  3441 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3442 ;;
  3443 ;; *************** function _main *****************
  3444 ;; Defined at:
  3445 ;;		line 173 in file "main.c"
  3446 ;; Parameters:    Size  Location     Type
  3447 ;;		None
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;  packet         33   27[BANK1 ] struct .
  3450 ;;  pipe            1   26[BANK1 ] unsigned char 
  3451 ;; Return value:  Size  Location     Type
  3452 ;;                  1    wreg      void 
  3453 ;; Registers used:
  3454 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  3455 ;; Tracked objects:
  3456 ;;		On entry : B1F/0
  3457 ;;		On exit  : 0/0
  3458 ;;		Unchanged: 0/0
  3459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3461 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3462 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3463 ;;      Totals:         0       1      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3464 ;;Total ram usage:       35 bytes
  3465 ;; Hardware stack levels required when called:   15
  3466 ;; This function calls:
  3467 ;;		_EEPROMRead
  3468 ;;		___lbtoft
  3469 ;;		_loop
  3470 ;;		_nrf24l01GetPipe
  3471 ;;		_nrf24l01Init
  3472 ;;		_nrf24l01SetRXPipe
  3473 ;;		_nrf24l01SetTXPipe
  3474 ;;		_sendMessage
  3475 ;;		_strcpy
  3476 ;; This function is called by:
  3477 ;;		Startup code after reset
  3478 ;; This function uses a non-reentrant model
  3479 ;;
  3480                           
  3481                           
  3482                           ;psect for function _main
  3483  0ECC                     _main:	
  3484                           
  3485                           ;main.c: 177: ANSELA = 0x00;
  3486                           
  3487                           ;incstack = 0
  3488                           ; Regs used in _main: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  3489  0ECC  0023               	movlb	3	; select bank3
  3490  0ECD  018C               	clrf	12	;volatile
  3491                           
  3492                           ;main.c: 178: ANSELC = 0x00;
  3493  0ECE  018E               	clrf	14	;volatile
  3494                           
  3495                           ;main.c: 180: ODCONA = 0x00;
  3496  0ECF  0025               	movlb	5	; select bank5
  3497  0ED0  018C               	clrf	12	;volatile
  3498                           
  3499                           ;main.c: 181: ODCONC = 0x00;
  3500  0ED1  018E               	clrf	14	;volatile
  3501                           
  3502                           ;main.c: 186: INLVLA = 0x00;
  3503  0ED2  0027               	movlb	7	; select bank7
  3504  0ED3  018C               	clrf	12	;volatile
  3505                           
  3506                           ;main.c: 187: INLVLC = 0x00;
  3507  0ED4  018E               	clrf	14	;volatile
  3508                           
  3509                           ;main.c: 189: WPUA = 0x00;
  3510  0ED5  0024               	movlb	4	; select bank4
  3511  0ED6  018C               	clrf	12	;volatile
  3512                           
  3513                           ;main.c: 190: WPUC = 0x00;
  3514  0ED7  018E               	clrf	14	;volatile
  3515                           
  3516                           ;main.c: 192: TRISCbits.TRISC5 = 0;
  3517  0ED8  0021               	movlb	1	; select bank1
  3518  0ED9  128E               	bcf	14,5	;volatile
  3519                           
  3520                           ;main.c: 193: TRISCbits.TRISC4 = 0;
  3521  0EDA  120E               	bcf	14,4	;volatile
  3522                           
  3523                           ;main.c: 195: PORTCbits.RC4 = 0;
  3524  0EDB  0020               	movlb	0	; select bank0
  3525  0EDC  120E               	bcf	14,4	;volatile
  3526                           
  3527                           ;main.c: 202: INTCONbits.PEIE = 0;
  3528  0EDD  130B               	bcf	11,6	;volatile
  3529                           
  3530                           ;main.c: 203: INTCONbits.GIE = 0;
  3531  0EDE  138B               	bcf	11,7	;volatile
  3532                           
  3533                           ;main.c: 205: OSCCON1bits.NOSC = 0b000;
  3534  0EDF  308F               	movlw	-113
  3535  0EE0  0032               	movlb	18	; select bank18
  3536  0EE1  0599               	andwf	25,f	;volatile
  3537                           
  3538                           ;main.c: 206: OSCCON1bits.NDIV = 0b000;
  3539  0EE2  30F0               	movlw	-16
  3540  0EE3  0599               	andwf	25,f	;volatile
  3541                           
  3542                           ;main.c: 208: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3543  0EE4  300B               	movlw	11
  3544  0EE5  0020               	movlb	0	; select bank0
  3545  0EE6  00E3               	movwf	??_main
  3546  0EE7  3062               	movlw	98
  3547  0EE8                     u5387:	
  3548  0EE8  0B89               	decfsz	9,f
  3549  0EE9  2EE8               	goto	u5387
  3550  0EEA  0BE3               	decfsz	??_main,f
  3551  0EEB  2EE8               	goto	u5387
  3552  0EEC  0000               	nop
  3553                           
  3554                           ;main.c: 212: strcpy(romData->name, "UWT");
  3555  0EED  0021               	movlb	1	; select bank1
  3556  0EEE  0869               	movf	_romData^(0+128),w
  3557  0EEF  3E01               	addlw	1
  3558  0EF0  00F0               	movwf	strcpy@to
  3559  0EF1  3001               	movlw	1
  3560  0EF2  00F1               	movwf	strcpy@to+1
  3561  0EF3  304E               	movlw	low (STR_6| (0+32768))
  3562  0EF4  00F2               	movwf	strcpy@from
  3563  0EF5  3090               	movlw	high (STR_6| (0+32768))
  3564  0EF6  00F3               	movwf	strcpy@from+1
  3565  0EF7  3188  20E6  318E   	fcall	_strcpy
  3566                           
  3567                           ;main.c: 214: nrf24l01Init();
  3568  0EFA  3189  21B8  318E   	fcall	_nrf24l01Init
  3569                           
  3570                           ;main.c: 216: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3571  0EFD  0021               	movlb	1	; select bank1
  3572  0EFE  0869               	movf	_romData^(0+128),w
  3573  0EFF  3E01               	addlw	1
  3574  0F00  318B  2306  318E   	fcall	_nrf24l01GetPipe
  3575  0F03  00FF               	movwf	127
  3576  0F04  087F               	movf	127,w
  3577  0F05  0021               	movlb	1	; select bank1
  3578  0F06  00BA               	movwf	main@pipe^(0+128)
  3579                           
  3580                           ;main.c: 217: nrf24l01SetTXPipe(pipe);
  3581  0F07  083A               	movf	main@pipe^(0+128),w
  3582  0F08  318C  2437  318E   	fcall	_nrf24l01SetTXPipe
  3583                           
  3584                           ;main.c: 218: nrf24l01SetRXPipe(pipe);
  3585  0F0B  0021               	movlb	1	; select bank1
  3586  0F0C  083A               	movf	main@pipe^(0+128),w
  3587  0F0D  3189  215D  318E   	fcall	_nrf24l01SetRXPipe
  3588                           
  3589                           ;main.c: 222: ADCON0bits.ADON = 0;
  3590  0F10  0021               	movlb	1	; select bank1
  3591  0F11  101D               	bcf	29,0	;volatile
  3592                           
  3593                           ;main.c: 225: PORTAbits.RA4 = 0;
  3594  0F12  0020               	movlb	0	; select bank0
  3595  0F13  120C               	bcf	12,4	;volatile
  3596                           
  3597                           ;main.c: 226: TRISAbits.TRISA4 = 1;
  3598  0F14  0021               	movlb	1	; select bank1
  3599  0F15  160C               	bsf	12,4	;volatile
  3600                           
  3601                           ;main.c: 227: WPUAbits.WPUA4 = 0;
  3602  0F16  0024               	movlb	4	; select bank4
  3603  0F17  120C               	bcf	12,4	;volatile
  3604                           
  3605                           ;main.c: 228: ODCONAbits.ODCA4 = 1;
  3606  0F18  0025               	movlb	5	; select bank5
  3607  0F19  160C               	bsf	12,4	;volatile
  3608                           
  3609                           ;main.c: 229: ANSELAbits.ANSA4 = 1;
  3610  0F1A  0023               	movlb	3	; select bank3
  3611  0F1B  160C               	bsf	12,4	;volatile
  3612                           
  3613                           ;main.c: 232: ANSELCbits.ANSC3 = 1;
  3614  0F1C  158E               	bsf	14,3	;volatile
  3615                           
  3616                           ;main.c: 233: TRISCbits.TRISC3 = 1;
  3617  0F1D  0021               	movlb	1	; select bank1
  3618  0F1E  158E               	bsf	14,3	;volatile
  3619                           
  3620                           ;main.c: 236: FVRCONbits.TSEN = 1;
  3621  0F1F  0022               	movlb	2	; select bank2
  3622  0F20  1697               	bsf	23,5	;volatile
  3623                           
  3624                           ;main.c: 237: FVRCONbits.TSRNG = 1;
  3625  0F21  1617               	bsf	23,4	;volatile
  3626                           
  3627                           ;main.c: 240: FVRCONbits.FVREN = 0;
  3628  0F22  1397               	bcf	23,7	;volatile
  3629                           
  3630                           ;main.c: 241: FVRCONbits.ADFVR = 0b10;
  3631  0F23  0817               	movf	23,w	;volatile
  3632  0F24  39FC               	andlw	-4
  3633  0F25  3802               	iorlw	2
  3634  0F26  0097               	movwf	23	;volatile
  3635                           
  3636                           ;main.c: 243: ADCON1bits.ADCS = 0b111;
  3637  0F27  3070               	movlw	112
  3638  0F28  0021               	movlb	1	; select bank1
  3639  0F29  049E               	iorwf	30,f	;volatile
  3640                           
  3641                           ;main.c: 244: ADCON1bits.ADFM = 1;
  3642  0F2A  179E               	bsf	30,7	;volatile
  3643                           
  3644                           ;main.c: 245: ADCON1bits.ADPREF = 0b11;
  3645  0F2B  3003               	movlw	3
  3646  0F2C  049E               	iorwf	30,f	;volatile
  3647                           
  3648                           ;main.c: 246: ADCON1bits.ADNREF = 0b00;
  3649  0F2D  111E               	bcf	30,2	;volatile
  3650                           
  3651                           ;main.c: 247: PIE1bits.ADIE = 1;
  3652  0F2E  1711               	bsf	17,6	;volatile
  3653                           
  3654                           ;main.c: 250: ADCON0bits.CHS = 3;
  3655  0F2F  081D               	movf	29,w	;volatile
  3656  0F30  3903               	andlw	-253
  3657  0F31  380C               	iorlw	12
  3658  0F32  009D               	movwf	29	;volatile
  3659                           
  3660                           ;main.c: 255: TRISAbits.TRISA2 = 1;
  3661  0F33  150C               	bsf	12,2	;volatile
  3662                           
  3663                           ;main.c: 256: PIE0bits.INTE = 1;
  3664  0F34  1410               	bsf	16,0	;volatile
  3665                           
  3666                           ;main.c: 257: INTCONbits.INTEDG = 0;
  3667  0F35  100B               	bcf	11,0	;volatile
  3668                           
  3669                           ;main.c: 260: TRISAbits.TRISA5 = 0;
  3670  0F36  128C               	bcf	12,5	;volatile
  3671                           
  3672                           ;main.c: 261: PORTAbits.RA5 = 0;
  3673  0F37  0020               	movlb	0	; select bank0
  3674  0F38  128C               	bcf	12,5	;volatile
  3675                           
  3676                           ;main.c: 266: INTCONbits.PEIE = 1;
  3677  0F39  170B               	bsf	11,6	;volatile
  3678                           
  3679                           ;main.c: 267: INTCONbits.GIE = 1;
  3680  0F3A  178B               	bsf	11,7	;volatile
  3681                           
  3682                           ;main.c: 269: nrf24l01Packet_t packet;;main.c: 271: sendMessage(&packet, "BOOT", EEPROMR
      +                          ead(0));
  3683  0F3B  30BB               	movlw	low main@packet
  3684  0F3C  0021               	movlb	1	; select bank1
  3685  0F3D  00B1               	movwf	sendMessage@packet^(0+128)
  3686  0F3E  3000               	movlw	high main@packet
  3687  0F3F  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  3688  0F40  3049               	movlw	low (STR_7| (0+32768))
  3689  0F41  00B3               	movwf	sendMessage@topic^(0+128)
  3690  0F42  3090               	movlw	high (STR_7| (0+32768))
  3691  0F43  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  3692  0F44  3000               	movlw	0
  3693  0F45  00F0               	movwf	EEPROMRead@address
  3694  0F46  00F1               	movwf	EEPROMRead@address+1
  3695  0F47  3188  2043  318E   	fcall	_EEPROMRead
  3696  0F4A  3188  20CB  318E   	fcall	___lbtoft
  3697  0F4D  0870               	movf	?___lbtoft,w
  3698  0F4E  0021               	movlb	1	; select bank1
  3699  0F4F  00B5               	movwf	sendMessage@value^(0+128)
  3700  0F50  0871               	movf	?___lbtoft+1,w
  3701  0F51  00B6               	movwf	(sendMessage@value+1)^(0+128)
  3702  0F52  0872               	movf	?___lbtoft+2,w
  3703  0F53  00B7               	movwf	(sendMessage@value+2)^(0+128)
  3704  0F54  318D  25BF  318E   	fcall	_sendMessage
  3705  0F57                     l4853:	
  3706                           ;main.c: 275: while(1){
  3707                           
  3708                           
  3709                           ;main.c: 276: loop();
  3710  0F57  3184  241F  318E   	fcall	_loop
  3711  0F5A  2F57               	goto	l4853
  3712  0F5B                     __end_of_main:	
  3713                           ;main.c: 277: };main.c: 279: return;
  3714                           
  3715                           
  3716                           	psect	text1
  3717  09B8                     __ptext1:	
  3718 ;; *************** function _nrf24l01Init *****************
  3719 ;; Defined at:
  3720 ;;		line 429 in file "nrf24l01.c"
  3721 ;; Parameters:    Size  Location     Type
  3722 ;;		None
  3723 ;; Auto vars:     Size  Location     Type
  3724 ;;		None
  3725 ;; Return value:  Size  Location     Type
  3726 ;;                  1    wreg      void 
  3727 ;; Registers used:
  3728 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  3729 ;; Tracked objects:
  3730 ;;		On entry : 0/0
  3731 ;;		On exit  : 0/0
  3732 ;;		Unchanged: 0/0
  3733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3737 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3738 ;;Total ram usage:        1 bytes
  3739 ;; Hardware stack levels used:    1
  3740 ;; Hardware stack levels required when called:   11
  3741 ;; This function calls:
  3742 ;;		_nrf24l01InitRegisters
  3743 ;;		_nrf24l01InterfaceInit
  3744 ;; This function is called by:
  3745 ;;		_main
  3746 ;; This function uses a non-reentrant model
  3747 ;;
  3748                           
  3749                           
  3750                           ;psect for function _nrf24l01Init
  3751  09B8                     _nrf24l01Init:	
  3752                           
  3753                           ;nrf24l01.c: 432: nrf24l01InterfaceInit();
  3754                           
  3755                           ;incstack = 0
  3756                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+11+pclath+
      +                          cstack]
  3757  09B8  3189  217B  3189   	fcall	_nrf24l01InterfaceInit
  3758                           
  3759                           ;nrf24l01.c: 437: PORTAbits.RA0 = 0;
  3760  09BB  0020               	movlb	0	; select bank0
  3761  09BC  100C               	bcf	12,0	;volatile
  3762                           
  3763                           ;nrf24l01.c: 439: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3764  09BD  300B               	movlw	11
  3765  09BE  0020               	movlb	0	; select bank0
  3766  09BF  00B0               	movwf	??_nrf24l01Init
  3767  09C0  3062               	movlw	98
  3768  09C1                     u5397:	
  3769  09C1  0B89               	decfsz	9,f
  3770  09C2  29C1               	goto	u5397
  3771  09C3  0BB0               	decfsz	??_nrf24l01Init,f
  3772  09C4  29C1               	goto	u5397
  3773  09C5  0000               	nop
  3774                           
  3775                           ;nrf24l01.c: 441: nrf24l01InitRegisters();
  3776  09C6  3182  2222  3189   	fcall	_nrf24l01InitRegisters
  3777                           
  3778                           ;nrf24l01.c: 443: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3779  09C9  300B               	movlw	11
  3780  09CA  0020               	movlb	0	; select bank0
  3781  09CB  00B0               	movwf	??_nrf24l01Init
  3782  09CC  3062               	movlw	98
  3783  09CD                     u5407:	
  3784  09CD  0B89               	decfsz	9,f
  3785  09CE  29CD               	goto	u5407
  3786  09CF  0BB0               	decfsz	??_nrf24l01Init,f
  3787  09D0  29CD               	goto	u5407
  3788  09D1  0000               	nop
  3789                           
  3790                           ;nrf24l01.c: 445: PORTAbits.RA0 = 1;
  3791  09D2  0020               	movlb	0	; select bank0
  3792  09D3  140C               	bsf	12,0	;volatile
  3793                           
  3794                           ;nrf24l01.c: 447: status.TX = 0;
  3795  09D4  01E4               	clrf	_status	;volatile
  3796                           
  3797                           ;nrf24l01.c: 448: status.RX = 0;
  3798  09D5  01E5               	clrf	_status+1	;volatile
  3799  09D6  0008               	return
  3800  09D7                     __end_of_nrf24l01Init:	
  3801                           
  3802                           	psect	text2
  3803  097B                     __ptext2:	
  3804 ;; *************** function _nrf24l01InterfaceInit *****************
  3805 ;; Defined at:
  3806 ;;		line 9 in file "interface.c"
  3807 ;; Parameters:    Size  Location     Type
  3808 ;;		None
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;		None
  3811 ;; Return value:  Size  Location     Type
  3812 ;;                  1    wreg      void 
  3813 ;; Registers used:
  3814 ;;		wreg, status,2, status,0
  3815 ;; Tracked objects:
  3816 ;;		On entry : 0/0
  3817 ;;		On exit  : 0/0
  3818 ;;		Unchanged: 0/0
  3819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3824 ;;Total ram usage:        0 bytes
  3825 ;; Hardware stack levels used:    1
  3826 ;; Hardware stack levels required when called:    7
  3827 ;; This function calls:
  3828 ;;		Nothing
  3829 ;; This function is called by:
  3830 ;;		_nrf24l01Init
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833                           
  3834                           
  3835                           ;psect for function _nrf24l01InterfaceInit
  3836  097B                     _nrf24l01InterfaceInit:	
  3837                           
  3838                           ;interface.c: 11: TRISAbits.TRISA0 = 0;
  3839                           
  3840                           ;incstack = 0
  3841                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3842  097B  0021               	movlb	1	; select bank1
  3843  097C  100C               	bcf	12,0	;volatile
  3844                           
  3845                           ;interface.c: 12: TRISAbits.TRISA1 = 0;
  3846  097D  108C               	bcf	12,1	;volatile
  3847                           
  3848                           ;interface.c: 14: TRISCbits.TRISC1 = 1;
  3849  097E  148E               	bsf	14,1	;volatile
  3850                           
  3851                           ;interface.c: 15: TRISCbits.TRISC2 = 0;
  3852  097F  110E               	bcf	14,2	;volatile
  3853                           
  3854                           ;interface.c: 16: TRISCbits.TRISC0 = 0;
  3855  0980  100E               	bcf	14,0	;volatile
  3856                           
  3857                           ;interface.c: 18: SSP1CON1bits.SSPEN = 0;
  3858  0981  0024               	movlb	4	; select bank4
  3859  0982  1295               	bcf	21,5	;volatile
  3860                           
  3861                           ;interface.c: 20: RC1PPSbits.RC1PPS = 0b10001;
  3862  0983  003D               	movlb	29	; select bank29
  3863  0984  0821               	movf	33,w	;volatile
  3864  0985  39E0               	andlw	-32
  3865  0986  3811               	iorlw	17
  3866  0987  00A1               	movwf	33	;volatile
  3867                           
  3868                           ;interface.c: 21: RC2PPSbits.RC2PPS = 0b11001;
  3869  0988  0822               	movf	34,w	;volatile
  3870  0989  39E0               	andlw	-32
  3871  098A  3819               	iorlw	25
  3872  098B  00A2               	movwf	34	;volatile
  3873                           
  3874                           ;interface.c: 22: RC0PPSbits.RC0PPS = 0b11000;
  3875  098C  0820               	movf	32,w	;volatile
  3876  098D  39E0               	andlw	-32
  3877  098E  3818               	iorlw	24
  3878  098F  00A0               	movwf	32	;volatile
  3879                           
  3880                           ;interface.c: 24: SSP1CON1bits.CKP = 0;
  3881  0990  0024               	movlb	4	; select bank4
  3882  0991  1215               	bcf	21,4	;volatile
  3883                           
  3884                           ;interface.c: 25: SSP1STATbits.CKE = 1;
  3885  0992  1714               	bsf	20,6	;volatile
  3886                           
  3887                           ;interface.c: 26: SSP1CON1bits.SSPM = 0b0001;
  3888  0993  0815               	movf	21,w	;volatile
  3889  0994  39F0               	andlw	-16
  3890  0995  3801               	iorlw	1
  3891  0996  0095               	movwf	21	;volatile
  3892                           
  3893                           ;interface.c: 28: SSP1CON1bits.SSPEN = 1;
  3894  0997  1695               	bsf	21,5	;volatile
  3895  0998  0008               	return
  3896  0999                     __end_of_nrf24l01InterfaceInit:	
  3897                           
  3898                           	psect	text3
  3899  0222                     __ptext3:	
  3900 ;; *************** function _nrf24l01InitRegisters *****************
  3901 ;; Defined at:
  3902 ;;		line 328 in file "nrf24l01.c"
  3903 ;; Parameters:    Size  Location     Type
  3904 ;;		None
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;  i               2   14[BANK0 ] unsigned int 
  3907 ;;  DynPD           1   13[BANK0 ] struct .
  3908 ;;  enAA            1   12[BANK0 ] struct .
  3909 ;;  rfSetup         1   11[BANK0 ] struct .
  3910 ;;  feature         1   10[BANK0 ] struct .
  3911 ;;  setupAW         1    9[BANK0 ] struct .
  3912 ;;  channel         1    8[BANK0 ] struct .
  3913 ;; Return value:  Size  Location     Type
  3914 ;;                  1    wreg      void 
  3915 ;; Registers used:
  3916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  3917 ;; Tracked objects:
  3918 ;;		On entry : 0/0
  3919 ;;		On exit  : 0/0
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3923 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3925 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3926 ;;Total ram usage:        9 bytes
  3927 ;; Hardware stack levels used:    1
  3928 ;; Hardware stack levels required when called:   10
  3929 ;; This function calls:
  3930 ;;		___bmul
  3931 ;;		_nrf24l01SPIEnd
  3932 ;;		_nrf24l01SPISend
  3933 ;;		_nrf24l01SPIStart
  3934 ;;		_nrf24l01Send
  3935 ;;		_nrf24l01SetRXPipe
  3936 ;;		_nrf24l01SetTXPipe
  3937 ;; This function is called by:
  3938 ;;		_nrf24l01Init
  3939 ;; This function uses a non-reentrant model
  3940 ;;
  3941                           
  3942                           
  3943                           ;psect for function _nrf24l01InitRegisters
  3944  0222                     _nrf24l01InitRegisters:	
  3945                           
  3946                           ;nrf24l01.c: 330: status.configRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x00, 0);
  3947                           
  3948                           ;incstack = 0
  3949                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+1
      +                          1+pclath+cstack]
  3950  0222  3000               	movlw	0
  3951  0223  001E               	movwi fsr1++
  3952  0224  3000               	movlw	0
  3953  0225  3188  208A  3182   	fcall	_nrf24l01Send
  3954  0228  00FF               	movwf	127
  3955  0229  087F               	movf	127,w
  3956  022A  0020               	movlb	0	; select bank0
  3957  022B  00E7               	movwf	_status+3	;volatile
  3958                           
  3959                           ;nrf24l01.c: 332: status.configRegister.PWR_UP = 0;
  3960  022C  10E7               	bcf	_status+3,1	;volatile
  3961                           
  3962                           ;nrf24l01.c: 333: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3963  022D  0867               	movf	_status+3,w	;volatile
  3964  022E  001E               	movwi fsr1++
  3965  022F  3020               	movlw	32
  3966  0230  3188  208A  3182   	fcall	_nrf24l01Send
  3967                           
  3968                           ;nrf24l01.c: 335: n_SETUP_AW_t setupAW;;nrf24l01.c: 336: setupAW.byte = 0x00;
  3969  0233  0020               	movlb	0	; select bank0
  3970  0234  01A9               	clrf	nrf24l01InitRegisters@setupAW
  3971                           
  3972                           ;nrf24l01.c: 337: setupAW.AW = 0b11;
  3973  0235  3003               	movlw	3
  3974  0236  04A9               	iorwf	nrf24l01InitRegisters@setupAW,f
  3975                           
  3976                           ;nrf24l01.c: 338: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x03, setupAW.byte);
  3977  0237  0829               	movf	nrf24l01InitRegisters@setupAW,w
  3978  0238  001E               	movwi fsr1++
  3979  0239  3023               	movlw	35
  3980  023A  3188  208A  3182   	fcall	_nrf24l01Send
  3981                           
  3982                           ;nrf24l01.c: 341: n_RF_CH_t channel;;nrf24l01.c: 342: channel.RF_CH = 2;
  3983  023D  0020               	movlb	0	; select bank0
  3984  023E  0828               	movf	nrf24l01InitRegisters@channel,w
  3985  023F  3980               	andlw	-128
  3986  0240  3802               	iorlw	2
  3987  0241  00A8               	movwf	nrf24l01InitRegisters@channel
  3988                           
  3989                           ;nrf24l01.c: 343: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3990  0242  0828               	movf	nrf24l01InitRegisters@channel,w
  3991  0243  001E               	movwi fsr1++
  3992  0244  3025               	movlw	37
  3993  0245  3188  208A  3182   	fcall	_nrf24l01Send
  3994                           
  3995                           ;nrf24l01.c: 346: n_RF_SETUP_t rfSetup;;nrf24l01.c: 347: rfSetup.byte = 0x00;
  3996  0248  0020               	movlb	0	; select bank0
  3997  0249  01AB               	clrf	nrf24l01InitRegisters@rfSetup
  3998                           
  3999                           ;nrf24l01.c: 348: rfSetup.RF_DR_LOW = 0;
  4000  024A  12AB               	bcf	nrf24l01InitRegisters@rfSetup,5
  4001                           
  4002                           ;nrf24l01.c: 349: rfSetup.RF_DR_HIGH = 1;
  4003  024B  15AB               	bsf	nrf24l01InitRegisters@rfSetup,3
  4004                           
  4005                           ;nrf24l01.c: 350: rfSetup.RF_PWR = 3;
  4006  024C  3006               	movlw	6
  4007  024D  04AB               	iorwf	nrf24l01InitRegisters@rfSetup,f
  4008                           
  4009                           ;nrf24l01.c: 351: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  4010  024E  082B               	movf	nrf24l01InitRegisters@rfSetup,w
  4011  024F  001E               	movwi fsr1++
  4012  0250  3026               	movlw	38
  4013  0251  3188  208A  3182   	fcall	_nrf24l01Send
  4014                           
  4015                           ;nrf24l01.c: 354: nrf24l01SetRXPipe(0xFF);
  4016  0254  30FF               	movlw	255
  4017  0255  3189  215D  3182   	fcall	_nrf24l01SetRXPipe
  4018                           
  4019                           ;nrf24l01.c: 357: n_EN_AA_t enAA;;nrf24l01.c: 358: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  4020  0258  3000               	movlw	0
  4021  0259  001E               	movwi fsr1++
  4022  025A  3001               	movlw	1
  4023  025B  3188  208A  3182   	fcall	_nrf24l01Send
  4024  025E  00FF               	movwf	127
  4025  025F  087F               	movf	127,w
  4026  0260  0020               	movlb	0	; select bank0
  4027  0261  00AC               	movwf	nrf24l01InitRegisters@enAA
  4028                           
  4029                           ;nrf24l01.c: 359: enAA.ENAA_P0 = 0;
  4030  0262  102C               	bcf	nrf24l01InitRegisters@enAA,0
  4031                           
  4032                           ;nrf24l01.c: 360: enAA.ENAA_P1 = 0;
  4033  0263  10AC               	bcf	nrf24l01InitRegisters@enAA,1
  4034                           
  4035                           ;nrf24l01.c: 361: enAA.ENAA_P2 = 0;
  4036  0264  112C               	bcf	nrf24l01InitRegisters@enAA,2
  4037                           
  4038                           ;nrf24l01.c: 362: enAA.ENAA_P3 = 0;
  4039  0265  11AC               	bcf	nrf24l01InitRegisters@enAA,3
  4040                           
  4041                           ;nrf24l01.c: 363: enAA.ENAA_P4 = 0;
  4042  0266  122C               	bcf	nrf24l01InitRegisters@enAA,4
  4043                           
  4044                           ;nrf24l01.c: 364: enAA.ENAA_P5 = 0;
  4045  0267  12AC               	bcf	nrf24l01InitRegisters@enAA,5
  4046                           
  4047                           ;nrf24l01.c: 365: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  4048  0268  082C               	movf	nrf24l01InitRegisters@enAA,w
  4049  0269  001E               	movwi fsr1++
  4050  026A  3021               	movlw	33
  4051  026B  3188  208A  3182   	fcall	_nrf24l01Send
  4052                           
  4053                           ;nrf24l01.c: 369: n_FEATURE_t feature;;nrf24l01.c: 370: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  4054  026E  3000               	movlw	0
  4055  026F  001E               	movwi fsr1++
  4056  0270  301D               	movlw	29
  4057  0271  3188  208A  3182   	fcall	_nrf24l01Send
  4058  0274  00FF               	movwf	127
  4059  0275  087F               	movf	127,w
  4060  0276  0020               	movlb	0	; select bank0
  4061  0277  00AA               	movwf	nrf24l01InitRegisters@feature
  4062                           
  4063                           ;nrf24l01.c: 371: feature.EN_DPL = 1;
  4064  0278  152A               	bsf	nrf24l01InitRegisters@feature,2
  4065                           
  4066                           ;nrf24l01.c: 372: feature.EN_DYN_ACK = 1;
  4067  0279  142A               	bsf	nrf24l01InitRegisters@feature,0
  4068                           
  4069                           ;nrf24l01.c: 373: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  4070  027A  082A               	movf	nrf24l01InitRegisters@feature,w
  4071  027B  001E               	movwi fsr1++
  4072  027C  303D               	movlw	61
  4073  027D  3188  208A  3182   	fcall	_nrf24l01Send
  4074                           
  4075                           ;nrf24l01.c: 375: n_DYNPD_t DynPD;;nrf24l01.c: 376: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  4076  0280  3000               	movlw	0
  4077  0281  001E               	movwi fsr1++
  4078  0282  301C               	movlw	28
  4079  0283  3188  208A  3182   	fcall	_nrf24l01Send
  4080  0286  00FF               	movwf	127
  4081  0287  087F               	movf	127,w
  4082  0288  0020               	movlb	0	; select bank0
  4083  0289  00AD               	movwf	nrf24l01InitRegisters@DynPD
  4084                           
  4085                           ;nrf24l01.c: 377: DynPD.DPL_P0 = 1;
  4086  028A  142D               	bsf	nrf24l01InitRegisters@DynPD,0
  4087                           
  4088                           ;nrf24l01.c: 378: DynPD.DPL_P1 = 1;
  4089  028B  14AD               	bsf	nrf24l01InitRegisters@DynPD,1
  4090                           
  4091                           ;nrf24l01.c: 379: DynPD.DPL_P2 = 1;
  4092  028C  152D               	bsf	nrf24l01InitRegisters@DynPD,2
  4093                           
  4094                           ;nrf24l01.c: 380: DynPD.DPL_P3 = 1;
  4095  028D  15AD               	bsf	nrf24l01InitRegisters@DynPD,3
  4096                           
  4097                           ;nrf24l01.c: 381: DynPD.DPL_P4 = 1;
  4098  028E  162D               	bsf	nrf24l01InitRegisters@DynPD,4
  4099                           
  4100                           ;nrf24l01.c: 382: DynPD.DPL_P5 = 1;
  4101  028F  16AD               	bsf	nrf24l01InitRegisters@DynPD,5
  4102                           
  4103                           ;nrf24l01.c: 383: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  4104  0290  082D               	movf	nrf24l01InitRegisters@DynPD,w
  4105  0291  001E               	movwi fsr1++
  4106  0292  303C               	movlw	60
  4107  0293  3188  208A  3182   	fcall	_nrf24l01Send
  4108                           
  4109                           ;nrf24l01.c: 386: unsigned int i;;nrf24l01.c: 387: for (i = 0; i < 6; i++){
  4110  0296  0020               	movlb	0	; select bank0
  4111  0297  01AE               	clrf	nrf24l01InitRegisters@i
  4112  0298  01AF               	clrf	nrf24l01InitRegisters@i+1
  4113  0299  3000               	movlw	0
  4114  029A  022F               	subwf	nrf24l01InitRegisters@i+1,w
  4115  029B  3006               	movlw	6
  4116  029C  1903               	skipnz
  4117  029D  022E               	subwf	nrf24l01InitRegisters@i,w
  4118  029E  1803               	btfsc	3,0
  4119  029F  2AF9               	goto	l4617
  4120  02A0                     l4601:	
  4121                           
  4122                           ;nrf24l01.c: 389: nrf24l01SPIStart();
  4123  02A0  3188  203A  3182   	fcall	_nrf24l01SPIStart
  4124                           
  4125                           ;nrf24l01.c: 390: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  4126  02A3  0020               	movlb	0	; select bank0
  4127  02A4  082E               	movf	nrf24l01InitRegisters@i,w
  4128  02A5  3E0A               	addlw	10
  4129  02A6  3820               	iorlw	32
  4130  02A7  3188  206A  3182   	fcall	_nrf24l01SPISend
  4131                           
  4132                           ;nrf24l01.c: 392: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  4133  02AA  303E               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4134  02AB  0084               	movwf	4
  4135  02AC  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4136  02AD  0085               	movwf	5
  4137  02AE  0800               	movf	0,w	;code access
  4138  02AF  0020               	movlb	0	; select bank0
  4139  02B0  00A7               	movwf	??_nrf24l01InitRegisters
  4140  02B1  082E               	movf	nrf24l01InitRegisters@i,w
  4141  02B2  00FF               	movwf	127
  4142  02B3  087F               	movf	127,w
  4143  02B4  00F0               	movwf	___bmul@multiplicand
  4144  02B5  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4145  02B6  0084               	movwf	4
  4146  02B7  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4147  02B8  0085               	movwf	5
  4148  02B9  0800               	movf	0,w	;code access
  4149  02BA  3188  2079  3182   	fcall	___bmul
  4150  02BD  0020               	movlb	0	; select bank0
  4151  02BE  0727               	addwf	??_nrf24l01InitRegisters,w
  4152  02BF  3188  206A  3182   	fcall	_nrf24l01SPISend
  4153                           
  4154                           ;nrf24l01.c: 394: if (i < 2){
  4155  02C2  3000               	movlw	0
  4156  02C3  0020               	movlb	0	; select bank0
  4157  02C4  022F               	subwf	nrf24l01InitRegisters@i+1,w
  4158  02C5  3002               	movlw	2
  4159  02C6  1903               	skipnz
  4160  02C7  022E               	subwf	nrf24l01InitRegisters@i,w
  4161  02C8  1803               	skipnc
  4162  02C9  2AEA               	goto	l4611
  4163                           
  4164                           ;nrf24l01.c: 395: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4165  02CA  303D               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4166  02CB  0084               	movwf	4
  4167  02CC  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4168  02CD  0085               	movwf	5
  4169  02CE  0800               	movf	0,w	;code access
  4170  02CF  3188  206A  3182   	fcall	_nrf24l01SPISend
  4171                           
  4172                           ;nrf24l01.c: 396: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4173  02D2  303C               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4174  02D3  0084               	movwf	4
  4175  02D4  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4176  02D5  0085               	movwf	5
  4177  02D6  0800               	movf	0,w	;code access
  4178  02D7  3188  206A  3182   	fcall	_nrf24l01SPISend
  4179                           
  4180                           ;nrf24l01.c: 397: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4181  02DA  303B               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4182  02DB  0084               	movwf	4
  4183  02DC  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4184  02DD  0085               	movwf	5
  4185  02DE  0800               	movf	0,w	;code access
  4186  02DF  3188  206A  3182   	fcall	_nrf24l01SPISend
  4187                           
  4188                           ;nrf24l01.c: 398: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4189  02E2  303A               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4190  02E3  0084               	movwf	4
  4191  02E4  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4192  02E5  0085               	movwf	5
  4193  02E6  0800               	movf	0,w	;code access
  4194  02E7  3188  206A  3182   	fcall	_nrf24l01SPISend
  4195  02EA                     l4611:	
  4196                           
  4197                           ;nrf24l01.c: 399: };nrf24l01.c: 401: nrf24l01SPIEnd();
  4198  02EA  3188  2031  3182   	fcall	_nrf24l01SPIEnd
  4199  02ED  3001               	movlw	1
  4200  02EE  0020               	movlb	0	; select bank0
  4201  02EF  07AE               	addwf	nrf24l01InitRegisters@i,f
  4202  02F0  3000               	movlw	0
  4203  02F1  3DAF               	addwfc	nrf24l01InitRegisters@i+1,f
  4204  02F2  3000               	movlw	0
  4205  02F3  022F               	subwf	nrf24l01InitRegisters@i+1,w
  4206  02F4  3006               	movlw	6
  4207  02F5  1903               	skipnz
  4208  02F6  022E               	subwf	nrf24l01InitRegisters@i,w
  4209  02F7  1C03               	skipc
  4210  02F8  2AA0               	goto	l4601
  4211  02F9                     l4617:	
  4212                           
  4213                           ;nrf24l01.c: 402: };nrf24l01.c: 404: nrf24l01SetTXPipe(0);
  4214  02F9  3000               	movlw	0
  4215  02FA  318C  2437  3182   	fcall	_nrf24l01SetTXPipe
  4216                           
  4217                           ;nrf24l01.c: 408: status.statusRegister.byte = 0x00;
  4218  02FD  0020               	movlb	0	; select bank0
  4219  02FE  01E6               	clrf	_status+2	;volatile
  4220                           
  4221                           ;nrf24l01.c: 409: status.statusRegister.RX_DR = 1;
  4222  02FF  1766               	bsf	_status+2,6	;volatile
  4223                           
  4224                           ;nrf24l01.c: 410: status.statusRegister.TX_DS = 1;
  4225  0300  16E6               	bsf	_status+2,5	;volatile
  4226                           
  4227                           ;nrf24l01.c: 411: status.statusRegister.MAX_RT = 1;
  4228  0301  1666               	bsf	_status+2,4	;volatile
  4229                           
  4230                           ;nrf24l01.c: 412: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.statusReg
      +                          ister.byte);
  4231  0302  0866               	movf	_status+2,w	;volatile
  4232  0303  001E               	movwi fsr1++
  4233  0304  3027               	movlw	39
  4234  0305  3188  208A  3182   	fcall	_nrf24l01Send
  4235                           
  4236                           ;nrf24l01.c: 414: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  4237  0308  3000               	movlw	0
  4238  0309  001E               	movwi fsr1++
  4239  030A  3007               	movlw	7
  4240  030B  3188  208A  3182   	fcall	_nrf24l01Send
  4241  030E  00FF               	movwf	127
  4242  030F  087F               	movf	127,w
  4243  0310  0020               	movlb	0	; select bank0
  4244  0311  00E6               	movwf	_status+2	;volatile
  4245                           
  4246                           ;nrf24l01.c: 417: nrf24l01Send((unsigned) 0b11100001, 0);
  4247  0312  3000               	movlw	0
  4248  0313  001E               	movwi fsr1++
  4249  0314  30E1               	movlw	225
  4250  0315  3188  208A  3182   	fcall	_nrf24l01Send
  4251                           
  4252                           ;nrf24l01.c: 418: nrf24l01Send((unsigned) 0b11100010, 0);
  4253  0318  3000               	movlw	0
  4254  0319  001E               	movwi fsr1++
  4255  031A  30E2               	movlw	226
  4256  031B  3188  208A  3182   	fcall	_nrf24l01Send
  4257                           
  4258                           ;nrf24l01.c: 421: status.configRegister.PRIM_RX = 1;
  4259  031E  0020               	movlb	0	; select bank0
  4260  031F  1467               	bsf	_status+3,0	;volatile
  4261                           
  4262                           ;nrf24l01.c: 422: status.configRegister.EN_CRC = 1;
  4263  0320  15E7               	bsf	_status+3,3	;volatile
  4264                           
  4265                           ;nrf24l01.c: 423: status.configRegister.CRCO = 1;
  4266  0321  1567               	bsf	_status+3,2	;volatile
  4267                           
  4268                           ;nrf24l01.c: 424: status.configRegister.PWR_UP = 1;
  4269  0322  14E7               	bsf	_status+3,1	;volatile
  4270                           
  4271                           ;nrf24l01.c: 425: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  4272  0323  0867               	movf	_status+3,w	;volatile
  4273  0324  001E               	movwi fsr1++
  4274  0325  3020               	movlw	32
  4275  0326  3188  208A         	fcall	_nrf24l01Send
  4276  0328  0008               	return
  4277  0329                     __end_of_nrf24l01InitRegisters:	
  4278                           
  4279                           	psect	text4
  4280  0C37                     __ptext4:	
  4281 ;; *************** function _nrf24l01SetTXPipe *****************
  4282 ;; Defined at:
  4283 ;;		line 96 in file "nrf24l01.c"
  4284 ;; Parameters:    Size  Location     Type
  4285 ;;  pipe            1    wreg     unsigned char 
  4286 ;; Auto vars:     Size  Location     Type
  4287 ;;  pipe            1    6[BANK0 ] unsigned char 
  4288 ;; Return value:  Size  Location     Type
  4289 ;;                  1    wreg      void 
  4290 ;; Registers used:
  4291 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  4292 ;; Tracked objects:
  4293 ;;		On entry : 0/0
  4294 ;;		On exit  : 0/0
  4295 ;;		Unchanged: 0/0
  4296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4298 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4299 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4300 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4301 ;;Total ram usage:        2 bytes
  4302 ;; Hardware stack levels used:    1
  4303 ;; Hardware stack levels required when called:    8
  4304 ;; This function calls:
  4305 ;;		___bmul
  4306 ;;		_nrf24l01SPIEnd
  4307 ;;		_nrf24l01SPISend
  4308 ;;		_nrf24l01SPIStart
  4309 ;; This function is called by:
  4310 ;;		_main
  4311 ;;		_nrf24l01InitRegisters
  4312 ;; This function uses a non-reentrant model
  4313 ;;
  4314                           
  4315                           
  4316                           ;psect for function _nrf24l01SetTXPipe
  4317  0C37                     _nrf24l01SetTXPipe:	
  4318                           
  4319                           ;incstack = 0
  4320                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+11+pc
      +                          lath+cstack]
  4321                           ;nrf24l01SetTXPipe@pipe stored from wreg
  4322  0C37  0020               	movlb	0	; select bank0
  4323  0C38  00A6               	movwf	nrf24l01SetTXPipe@pipe
  4324                           
  4325                           ;nrf24l01.c: 99: nrf24l01SPIStart();
  4326  0C39  3188  203A  318C   	fcall	_nrf24l01SPIStart
  4327                           
  4328                           ;nrf24l01.c: 100: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  4329  0C3C  3030               	movlw	48
  4330  0C3D  3188  206A  318C   	fcall	_nrf24l01SPISend
  4331                           
  4332                           ;nrf24l01.c: 101: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  4333  0C40  303E               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4334  0C41  0084               	movwf	4
  4335  0C42  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4336  0C43  0085               	movwf	5
  4337  0C44  0800               	movf	0,w	;code access
  4338  0C45  00F3               	movwf	??_nrf24l01SetTXPipe
  4339  0C46  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4340  0C47  0084               	movwf	4
  4341  0C48  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4342  0C49  0085               	movwf	5
  4343  0C4A  0800               	movf	0,w	;code access
  4344  0C4B  00FF               	movwf	127
  4345  0C4C  087F               	movf	127,w
  4346  0C4D  00F0               	movwf	___bmul@multiplicand
  4347  0C4E  0020               	movlb	0	; select bank0
  4348  0C4F  0826               	movf	nrf24l01SetTXPipe@pipe,w
  4349  0C50  3188  2079  318C   	fcall	___bmul
  4350  0C53  0773               	addwf	??_nrf24l01SetTXPipe,w
  4351  0C54  3188  206A  318C   	fcall	_nrf24l01SPISend
  4352                           
  4353                           ;nrf24l01.c: 102: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4354  0C57  303D               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4355  0C58  0084               	movwf	4
  4356  0C59  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4357  0C5A  0085               	movwf	5
  4358  0C5B  0800               	movf	0,w	;code access
  4359  0C5C  3188  206A  318C   	fcall	_nrf24l01SPISend
  4360                           
  4361                           ;nrf24l01.c: 103: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4362  0C5F  303C               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4363  0C60  0084               	movwf	4
  4364  0C61  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4365  0C62  0085               	movwf	5
  4366  0C63  0800               	movf	0,w	;code access
  4367  0C64  3188  206A  318C   	fcall	_nrf24l01SPISend
  4368                           
  4369                           ;nrf24l01.c: 104: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4370  0C67  303B               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4371  0C68  0084               	movwf	4
  4372  0C69  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4373  0C6A  0085               	movwf	5
  4374  0C6B  0800               	movf	0,w	;code access
  4375  0C6C  3188  206A  318C   	fcall	_nrf24l01SPISend
  4376                           
  4377                           ;nrf24l01.c: 105: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4378  0C6F  303A               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4379  0C70  0084               	movwf	4
  4380  0C71  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4381  0C72  0085               	movwf	5
  4382  0C73  0800               	movf	0,w	;code access
  4383  0C74  3188  206A  318C   	fcall	_nrf24l01SPISend
  4384                           
  4385                           ;nrf24l01.c: 106: nrf24l01SPIEnd();
  4386  0C77  3188  2031         	fcall	_nrf24l01SPIEnd
  4387  0C79  0008               	return
  4388  0C7A                     __end_of_nrf24l01SetTXPipe:	
  4389                           
  4390                           	psect	text5
  4391  0879                     __ptext5:	
  4392 ;; *************** function ___bmul *****************
  4393 ;; Defined at:
  4394 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  4395 ;; Parameters:    Size  Location     Type
  4396 ;;  multiplier      1    wreg     unsigned char 
  4397 ;;  multiplicand    1    0[COMMON] unsigned char 
  4398 ;; Auto vars:     Size  Location     Type
  4399 ;;  multiplier      1    2[COMMON] unsigned char 
  4400 ;;  product         1    1[COMMON] unsigned char 
  4401 ;; Return value:  Size  Location     Type
  4402 ;;                  1    wreg      unsigned char 
  4403 ;; Registers used:
  4404 ;;		wreg, status,2, status,0, btemp+11
  4405 ;; Tracked objects:
  4406 ;;		On entry : 0/0
  4407 ;;		On exit  : 0/0
  4408 ;;		Unchanged: 0/0
  4409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4410 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4411 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4413 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4414 ;;Total ram usage:        3 bytes
  4415 ;; Hardware stack levels used:    1
  4416 ;; Hardware stack levels required when called:    7
  4417 ;; This function calls:
  4418 ;;		Nothing
  4419 ;; This function is called by:
  4420 ;;		_nrf24l01SetTXPipe
  4421 ;;		_nrf24l01InitRegisters
  4422 ;; This function uses a non-reentrant model
  4423 ;;
  4424                           
  4425                           
  4426                           ;psect for function ___bmul
  4427  0879                     ___bmul:	
  4428                           
  4429                           ;incstack = 0
  4430                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+11]
  4431                           ;___bmul@multiplier stored from wreg
  4432  0879  00F2               	movwf	___bmul@multiplier
  4433  087A  01F1               	clrf	___bmul@product
  4434  087B                     l4045:	
  4435  087B  1C72               	btfss	___bmul@multiplier,0
  4436  087C  2881               	goto	l4049
  4437  087D  0870               	movf	___bmul@multiplicand,w
  4438  087E  00FF               	movwf	127
  4439  087F  087F               	movf	127,w
  4440  0880  07F1               	addwf	___bmul@product,f
  4441  0881                     l4049:	
  4442  0881  1003               	clrc
  4443  0882  0DF0               	rlf	___bmul@multiplicand,f
  4444  0883  1003               	clrc
  4445  0884  0CF2               	rrf	___bmul@multiplier,f
  4446  0885  0872               	movf	___bmul@multiplier,w
  4447  0886  1D03               	btfss	3,2
  4448  0887  287B               	goto	l4045
  4449  0888  0871               	movf	___bmul@product,w
  4450  0889  0008               	return
  4451  088A                     __end_of___bmul:	
  4452                           
  4453                           	psect	text6
  4454  095D                     __ptext6:	
  4455 ;; *************** function _nrf24l01SetRXPipe *****************
  4456 ;; Defined at:
  4457 ;;		line 109 in file "nrf24l01.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;  pipe            1    wreg     unsigned char 
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;  pipe            1    1[COMMON] unsigned char 
  4462 ;;  enRXAddr        1    2[COMMON] struct .
  4463 ;; Return value:  Size  Location     Type
  4464 ;;                  1    wreg      void 
  4465 ;; Registers used:
  4466 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath
  4467 ;; Tracked objects:
  4468 ;;		On entry : 0/0
  4469 ;;		On exit  : 0/0
  4470 ;;		Unchanged: 0/0
  4471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4473 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4474 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4475 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4476 ;;Total ram usage:        3 bytes
  4477 ;; Hardware stack levels used:    1
  4478 ;; Hardware stack levels required when called:    9
  4479 ;; This function calls:
  4480 ;;		_nrf24l01Send
  4481 ;; This function is called by:
  4482 ;;		_main
  4483 ;;		_nrf24l01InitRegisters
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           
  4488                           ;psect for function _nrf24l01SetRXPipe
  4489  095D                     _nrf24l01SetRXPipe:	
  4490                           
  4491                           ;incstack = 0
  4492                           ; Regs used in _nrf24l01SetRXPipe: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+11+pclath]
  4493                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4494  095D  00F1               	movwf	nrf24l01SetRXPipe@pipe
  4495                           
  4496                           ;nrf24l01.c: 111: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 113: if (pipe > 5){
  4497  095E  3006               	movlw	6
  4498  095F  0271               	subwf	nrf24l01SetRXPipe@pipe,w
  4499  0960  1C03               	skipc
  4500  0961  2969               	goto	l279
  4501                           
  4502                           ;nrf24l01.c: 114: enRXAddr.ERX_P0 = 1;
  4503  0962  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4504                           
  4505                           ;nrf24l01.c: 115: enRXAddr.ERX_P1 = 1;
  4506  0963  14F2               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4507                           
  4508                           ;nrf24l01.c: 116: enRXAddr.ERX_P2 = 1;
  4509  0964  1572               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4510                           
  4511                           ;nrf24l01.c: 117: enRXAddr.ERX_P3 = 1;
  4512  0965  15F2               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4513                           
  4514                           ;nrf24l01.c: 118: enRXAddr.ERX_P4 = 1;
  4515  0966  1672               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4516                           
  4517                           ;nrf24l01.c: 119: enRXAddr.ERX_P5 = 1;
  4518  0967  16F2               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4519                           
  4520                           ;nrf24l01.c: 120: }
  4521  0968  2975               	goto	l4291
  4522  0969                     l279:	
  4523                           
  4524                           ;nrf24l01.c: 122: else{;nrf24l01.c: 123: enRXAddr.ERX_P0 = 1;
  4525  0969  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4526                           
  4527                           ;nrf24l01.c: 124: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4528  096A  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4529  096B  00F0               	movwf	??_nrf24l01SetRXPipe
  4530  096C  0A71               	incf	nrf24l01SetRXPipe@pipe,w
  4531  096D  296F               	goto	u4864
  4532  096E                     u4865:	
  4533  096E  35F0               	lslf	??_nrf24l01SetRXPipe,f
  4534  096F                     u4864:	
  4535  096F  0B89               	decfsz	9,f
  4536  0970  296E               	goto	u4865
  4537  0971  0870               	movf	??_nrf24l01SetRXPipe,w
  4538  0972  00FF               	movwf	127
  4539  0973  087F               	movf	127,w
  4540  0974  00F2               	movwf	nrf24l01SetRXPipe@enRXAddr
  4541  0975                     l4291:	
  4542                           
  4543                           ;nrf24l01.c: 125: };nrf24l01.c: 127: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4544  0975  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4545  0976  001E               	movwi fsr1++
  4546  0977  3022               	movlw	34
  4547  0978  3188  208A         	fcall	_nrf24l01Send
  4548  097A  0008               	return
  4549  097B                     __end_of_nrf24l01SetRXPipe:	
  4550                           
  4551                           	psect	text7
  4552  0B06                     __ptext7:	
  4553 ;; *************** function _nrf24l01GetPipe *****************
  4554 ;; Defined at:
  4555 ;;		line 161 in file "main.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;  name            1    wreg     PTR unsigned char 
  4558 ;;		 -> romDataMap(28), 
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4561 ;;		 -> romDataMap(28), 
  4562 ;;  i               1   10[BANK0 ] unsigned char 
  4563 ;;  pipe            1    8[BANK0 ] unsigned char 
  4564 ;; Return value:  Size  Location     Type
  4565 ;;                  1    wreg      unsigned char 
  4566 ;; Registers used:
  4567 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+10, btemp+11, pclath, cstack
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4574 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4575 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4576 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4577 ;;Total ram usage:        4 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; Hardware stack levels required when called:    8
  4580 ;; This function calls:
  4581 ;;		___lwmod
  4582 ;;		_strlen
  4583 ;; This function is called by:
  4584 ;;		_main
  4585 ;; This function uses a non-reentrant model
  4586 ;;
  4587                           
  4588                           
  4589                           ;psect for function _nrf24l01GetPipe
  4590  0B06                     _nrf24l01GetPipe:	
  4591                           
  4592                           ;incstack = 0
  4593                           ; Regs used in _nrf24l01GetPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+10+btemp
      +                          +11+pclath+cstack]
  4594                           ;nrf24l01GetPipe@name stored from wreg
  4595  0B06  0020               	movlb	0	; select bank0
  4596  0B07  00A9               	movwf	nrf24l01GetPipe@name
  4597                           
  4598                           ;main.c: 162: unsigned char pipe = 0;
  4599  0B08  01A8               	clrf	nrf24l01GetPipe@pipe
  4600                           
  4601                           ;main.c: 163: unsigned char i = 0;
  4602  0B09  01AA               	clrf	nrf24l01GetPipe@i
  4603                           
  4604                           ;main.c: 166: for (i = 0; i < strlen(name); i++){
  4605  0B0A  01AA               	clrf	nrf24l01GetPipe@i
  4606  0B0B                     l4721:	
  4607  0B0B  0829               	movf	nrf24l01GetPipe@name,w
  4608  0B0C  3189  213F  318B   	fcall	_strlen
  4609  0B0F  0020               	movlb	0	; select bank0
  4610  0B10  082A               	movf	nrf24l01GetPipe@i,w
  4611  0B11  00FE               	movwf	126
  4612  0B12  01FF               	clrf	127
  4613  0B13  0875               	movf	117,w
  4614  0B14  027F               	subwf	127,w
  4615  0B15  1D03               	skipz
  4616  0B16  2B19               	goto	u5275
  4617  0B17  0874               	movf	116,w
  4618  0B18  027E               	subwf	126,w
  4619  0B19                     u5275:	
  4620  0B19  1803               	btfsc	3,0
  4621  0B1A  2B2B               	goto	l4723
  4622                           
  4623                           ;main.c: 167: pipe+= name[i];
  4624  0B1B  082A               	movf	nrf24l01GetPipe@i,w
  4625  0B1C  0729               	addwf	nrf24l01GetPipe@name,w
  4626  0B1D  00A7               	movwf	??_nrf24l01GetPipe
  4627  0B1E  0827               	movf	??_nrf24l01GetPipe,w
  4628  0B1F  0084               	movwf	4
  4629  0B20  3001               	movlw	1	; select bank2/3
  4630  0B21  0085               	movwf	5
  4631  0B22  0800               	movf	0,w
  4632  0B23  00FF               	movwf	127
  4633  0B24  087F               	movf	127,w
  4634  0B25  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4635  0B26  3001               	movlw	1
  4636  0B27  00FF               	movwf	127
  4637  0B28  087F               	movf	127,w
  4638  0B29  07AA               	addwf	nrf24l01GetPipe@i,f
  4639  0B2A  2B0B               	goto	l4721
  4640  0B2B                     l4723:	
  4641                           
  4642                           ;main.c: 168: };main.c: 170: return (unsigned) pipe % 6;
  4643  0B2B  3006               	movlw	6
  4644  0B2C  00F0               	movwf	___lwmod@divisor
  4645  0B2D  3000               	movlw	0
  4646  0B2E  00F1               	movwf	___lwmod@divisor+1
  4647  0B2F  0828               	movf	nrf24l01GetPipe@pipe,w
  4648  0B30  00FE               	movwf	126
  4649  0B31  01FF               	clrf	127
  4650  0B32  087E               	movf	126,w
  4651  0B33  00F2               	movwf	___lwmod@dividend
  4652  0B34  087F               	movf	127,w
  4653  0B35  00F3               	movwf	___lwmod@dividend+1
  4654  0B36  318A  2278         	fcall	___lwmod
  4655  0B38  0870               	movf	?___lwmod,w
  4656  0B39  0008               	return
  4657  0B3A                     __end_of_nrf24l01GetPipe:	
  4658                           
  4659                           	psect	text8
  4660  0A78                     __ptext8:	
  4661 ;; *************** function ___lwmod *****************
  4662 ;; Defined at:
  4663 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4664 ;; Parameters:    Size  Location     Type
  4665 ;;  divisor         2    0[COMMON] unsigned int 
  4666 ;;  dividend        2    2[COMMON] unsigned int 
  4667 ;; Auto vars:     Size  Location     Type
  4668 ;;  counter         1    6[BANK0 ] unsigned char 
  4669 ;; Return value:  Size  Location     Type
  4670 ;;                  2    0[COMMON] unsigned int 
  4671 ;; Registers used:
  4672 ;;		wreg, status,2, status,0, btemp+11
  4673 ;; Tracked objects:
  4674 ;;		On entry : 0/0
  4675 ;;		On exit  : 0/0
  4676 ;;		Unchanged: 0/0
  4677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4678 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4679 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4681 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4682 ;;Total ram usage:        5 bytes
  4683 ;; Hardware stack levels used:    1
  4684 ;; Hardware stack levels required when called:    7
  4685 ;; This function calls:
  4686 ;;		Nothing
  4687 ;; This function is called by:
  4688 ;;		_nrf24l01GetPipe
  4689 ;; This function uses a non-reentrant model
  4690 ;;
  4691                           
  4692                           
  4693                           ;psect for function ___lwmod
  4694  0A78                     ___lwmod:	
  4695                           
  4696                           ;incstack = 0
  4697                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+11]
  4698  0A78  0870               	movf	___lwmod@divisor,w
  4699  0A79  0471               	iorwf	___lwmod@divisor+1,w
  4700  0A7A  1903               	btfsc	3,2
  4701  0A7B  2AA0               	goto	l4663
  4702  0A7C  0020               	movlb	0	; select bank0
  4703  0A7D  01A6               	clrf	___lwmod@counter
  4704  0A7E  0AA6               	incf	___lwmod@counter,f
  4705  0A7F                     l4653:	
  4706  0A7F  1BF1               	btfsc	___lwmod@divisor+1,7
  4707  0A80  2A8B               	goto	l4655
  4708  0A81  3001               	movlw	1
  4709  0A82                     u5175:	
  4710  0A82  35F0               	lslf	___lwmod@divisor,f
  4711  0A83  0DF1               	rlf	___lwmod@divisor+1,f
  4712  0A84  0B89               	decfsz	9,f
  4713  0A85  2A82               	goto	u5175
  4714  0A86  3001               	movlw	1
  4715  0A87  00FF               	movwf	127
  4716  0A88  087F               	movf	127,w
  4717  0A89  07A6               	addwf	___lwmod@counter,f
  4718  0A8A  2A7F               	goto	l4653
  4719  0A8B                     l4655:	
  4720  0A8B  0871               	movf	___lwmod@divisor+1,w
  4721  0A8C  0273               	subwf	___lwmod@dividend+1,w
  4722  0A8D  1D03               	skipz
  4723  0A8E  2A91               	goto	u5195
  4724  0A8F  0870               	movf	___lwmod@divisor,w
  4725  0A90  0272               	subwf	___lwmod@dividend,w
  4726  0A91                     u5195:	
  4727  0A91  1C03               	skipc
  4728  0A92  2A97               	goto	l4659
  4729  0A93  0870               	movf	___lwmod@divisor,w
  4730  0A94  02F2               	subwf	___lwmod@dividend,f
  4731  0A95  0871               	movf	___lwmod@divisor+1,w
  4732  0A96  3BF3               	subwfb	___lwmod@dividend+1,f
  4733  0A97                     l4659:	
  4734  0A97  3001               	movlw	1
  4735  0A98                     u5205:	
  4736  0A98  36F1               	lsrf	___lwmod@divisor+1,f
  4737  0A99  0CF0               	rrf	___lwmod@divisor,f
  4738  0A9A  0B89               	decfsz	9,f
  4739  0A9B  2A98               	goto	u5205
  4740  0A9C  3001               	movlw	1
  4741  0A9D  02A6               	subwf	___lwmod@counter,f
  4742  0A9E  1D03               	btfss	3,2
  4743  0A9F  2A8B               	goto	l4655
  4744  0AA0                     l4663:	
  4745  0AA0  0873               	movf	___lwmod@dividend+1,w
  4746  0AA1  00F1               	movwf	?___lwmod+1
  4747  0AA2  0872               	movf	___lwmod@dividend,w
  4748  0AA3  00F0               	movwf	?___lwmod
  4749  0AA4  0008               	return
  4750  0AA5                     __end_of___lwmod:	
  4751                           
  4752                           	psect	text9
  4753  041F                     __ptext9:	
  4754 ;; *************** function _loop *****************
  4755 ;; Defined at:
  4756 ;;		line 107 in file "main.c"
  4757 ;; Parameters:    Size  Location     Type
  4758 ;;		None
  4759 ;; Auto vars:     Size  Location     Type
  4760 ;;  packet         33   12[BANK4 ] struct .
  4761 ;;  ta              3    3[BANK4 ] float 
  4762 ;;  vt              3    0[BANK4 ] float 
  4763 ;; Return value:  Size  Location     Type
  4764 ;;                  1    wreg      void 
  4765 ;; Registers used:
  4766 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  4767 ;; Tracked objects:
  4768 ;;		On entry : 0/0
  4769 ;;		On exit  : 0/0
  4770 ;;		Unchanged: 0/0
  4771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4773 ;;      Locals:         0       0       0       0       0      45       0       0       0       0       0       0       
      +0       0
  4774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4775 ;;      Totals:         0       0       0       0       0      45       0       0       0       0       0       0       
      +0       0
  4776 ;;Total ram usage:       45 bytes
  4777 ;; Hardware stack levels used:    1
  4778 ;; Hardware stack levels required when called:   14
  4779 ;; This function calls:
  4780 ;;		___ftadd
  4781 ;;		___ftdiv
  4782 ;;		___ftmul
  4783 ;;		___ftneg
  4784 ;;		___lwtoft
  4785 ;;		_getADCValue
  4786 ;;		_sendMessage
  4787 ;; This function is called by:
  4788 ;;		_main
  4789 ;; This function uses a non-reentrant model
  4790 ;;
  4791                           
  4792                           
  4793                           ;psect for function _loop
  4794  041F                     _loop:	
  4795                           
  4796                           ;main.c: 109: nrf24l01Packet_t packet;;main.c: 117: sendMessage(&packet, "COUNT", counte
      +                          r);
  4797                           
  4798                           ;incstack = 0
  4799                           ; Regs used in _loop: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  4800  041F  302C               	movlw	low loop@packet
  4801  0420  0021               	movlb	1	; select bank1
  4802  0421  00B1               	movwf	sendMessage@packet^(0+128)
  4803  0422  3002               	movlw	high loop@packet
  4804  0423  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  4805  0424  3034               	movlw	low (STR_3| (0+32768))
  4806  0425  00B3               	movwf	sendMessage@topic^(0+128)
  4807  0426  3090               	movlw	high (STR_3| (0+32768))
  4808  0427  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  4809  0428  0867               	movf	(_counter+1)^(0+128),w
  4810  0429  00F1               	movwf	___lwtoft@c+1
  4811  042A  0866               	movf	_counter^(0+128),w
  4812  042B  00F0               	movwf	___lwtoft@c
  4813  042C  3188  209D  3184   	fcall	___lwtoft
  4814  042F  0870               	movf	?___lwtoft,w
  4815  0430  0021               	movlb	1	; select bank1
  4816  0431  00B5               	movwf	sendMessage@value^(0+128)
  4817  0432  0871               	movf	?___lwtoft+1,w
  4818  0433  00B6               	movwf	(sendMessage@value+1)^(0+128)
  4819  0434  0872               	movf	?___lwtoft+2,w
  4820  0435  00B7               	movwf	(sendMessage@value+2)^(0+128)
  4821  0436  318D  25BF  3184   	fcall	_sendMessage
  4822                           
  4823                           ;main.c: 124: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4824  0439  30CF               	movlw	207
  4825  043A  0020               	movlb	0	; select bank0
  4826  043B  00CB               	movwf	___ftmul@f1
  4827  043C  3046               	movlw	70
  4828  043D  00CC               	movwf	___ftmul@f1+1
  4829  043E  3040               	movlw	64
  4830  043F  00CD               	movwf	___ftmul@f1+2
  4831  0440  3004               	movlw	4
  4832  0441  318F  275B  3184   	fcall	_getADCValue
  4833  0444  0020               	movlb	0	; select bank0
  4834  0445  0842               	movf	?_getADCValue,w
  4835  0446  00CE               	movwf	___ftmul@f2
  4836  0447  0843               	movf	?_getADCValue+1,w
  4837  0448  00CF               	movwf	___ftmul@f2+1
  4838  0449  0844               	movf	?_getADCValue+2,w
  4839  044A  00D0               	movwf	___ftmul@f2+2
  4840  044B  3185  25F3  3184   	fcall	___ftmul
  4841  044E  0020               	movlb	0	; select bank0
  4842  044F  084B               	movf	?___ftmul,w
  4843  0450  0024               	movlb	4	; select bank4
  4844  0451  00A6               	movwf	_loop$2247^(0+512)
  4845  0452  0020               	movlb	0	; select bank0
  4846  0453  084C               	movf	?___ftmul+1,w
  4847  0454  0024               	movlb	4	; select bank4
  4848  0455  00A7               	movwf	(_loop$2247+1)^(0+512)
  4849  0456  0020               	movlb	0	; select bank0
  4850  0457  084D               	movf	?___ftmul+2,w
  4851  0458  0024               	movlb	4	; select bank4
  4852  0459  00A8               	movwf	(_loop$2247+2)^(0+512)
  4853                           
  4854                           ;main.c: 124: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4855  045A  302C               	movlw	low loop@packet
  4856  045B  0021               	movlb	1	; select bank1
  4857  045C  00B1               	movwf	sendMessage@packet^(0+128)
  4858  045D  3002               	movlw	high loop@packet
  4859  045E  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  4860  045F  3044               	movlw	low (STR_4| (0+32768))
  4861  0460  00B3               	movwf	sendMessage@topic^(0+128)
  4862  0461  3090               	movlw	high (STR_4| (0+32768))
  4863  0462  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  4864  0463  0024               	movlb	4	; select bank4
  4865  0464  0826               	movf	_loop$2247^(0+512),w
  4866  0465  0021               	movlb	1	; select bank1
  4867  0466  00B5               	movwf	sendMessage@value^(0+128)
  4868  0467  0024               	movlb	4	; select bank4
  4869  0468  0827               	movf	(_loop$2247+1)^(0+512),w
  4870  0469  0021               	movlb	1	; select bank1
  4871  046A  00B6               	movwf	(sendMessage@value+1)^(0+128)
  4872  046B  0024               	movlb	4	; select bank4
  4873  046C  0828               	movf	(_loop$2247+2)^(0+512),w
  4874  046D  0021               	movlb	1	; select bank1
  4875  046E  00B7               	movwf	(sendMessage@value+2)^(0+128)
  4876  046F  318D  25BF  3184   	fcall	_sendMessage
  4877                           
  4878                           ;main.c: 136: FVRCONbits.TSEN = 1;
  4879  0472  0022               	movlb	2	; select bank2
  4880  0473  1697               	bsf	23,5	;volatile
  4881                           
  4882                           ;main.c: 137: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4883  0474  303D               	movlw	61
  4884  0475  318F  275B  3184   	fcall	_getADCValue
  4885  0478  0020               	movlb	0	; select bank0
  4886  0479  0842               	movf	?_getADCValue,w
  4887  047A  00CB               	movwf	___ftneg@f1
  4888  047B  0843               	movf	?_getADCValue+1,w
  4889  047C  00CC               	movwf	___ftneg@f1+1
  4890  047D  0844               	movf	?_getADCValue+2,w
  4891  047E  00CD               	movwf	___ftneg@f1+2
  4892  047F  3188  2028  3184   	fcall	___ftneg
  4893  0482  0020               	movlb	0	; select bank0
  4894  0483  084B               	movf	?___ftneg,w
  4895  0484  0024               	movlb	4	; select bank4
  4896  0485  00A9               	movwf	_loop$2248^(0+512)
  4897  0486  0020               	movlb	0	; select bank0
  4898  0487  084C               	movf	?___ftneg+1,w
  4899  0488  0024               	movlb	4	; select bank4
  4900  0489  00AA               	movwf	(_loop$2248+1)^(0+512)
  4901  048A  0020               	movlb	0	; select bank0
  4902  048B  084D               	movf	?___ftneg+2,w
  4903  048C  0024               	movlb	4	; select bank4
  4904  048D  00AB               	movwf	(_loop$2248+2)^(0+512)
  4905                           
  4906                           ;main.c: 137: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4907  048E  3000               	movlw	0
  4908  048F  0020               	movlb	0	; select bank0
  4909  0490  00B5               	movwf	___ftdiv@f2
  4910  0491  3000               	movlw	0
  4911  0492  00B6               	movwf	___ftdiv@f2+1
  4912  0493  3040               	movlw	64
  4913  0494  00B7               	movwf	___ftdiv@f2+2
  4914  0495  3012               	movlw	18
  4915  0496  00AB               	movwf	___ftadd@f1
  4916  0497  3003               	movlw	3
  4917  0498  00AC               	movwf	___ftadd@f1+1
  4918  0499  3040               	movlw	64
  4919  049A  00AD               	movwf	___ftadd@f1+2
  4920  049B  0024               	movlb	4	; select bank4
  4921  049C  0829               	movf	_loop$2248^(0+512),w
  4922  049D  0020               	movlb	0	; select bank0
  4923  049E  00AE               	movwf	___ftadd@f2
  4924  049F  0024               	movlb	4	; select bank4
  4925  04A0  082A               	movf	(_loop$2248+1)^(0+512),w
  4926  04A1  0020               	movlb	0	; select bank0
  4927  04A2  00AF               	movwf	___ftadd@f2+1
  4928  04A3  0024               	movlb	4	; select bank4
  4929  04A4  082B               	movf	(_loop$2248+2)^(0+512),w
  4930  04A5  0020               	movlb	0	; select bank0
  4931  04A6  00B0               	movwf	___ftadd@f2+2
  4932  04A7  3183  2329  3184   	fcall	___ftadd
  4933  04AA  0020               	movlb	0	; select bank0
  4934  04AB  082B               	movf	?___ftadd,w
  4935  04AC  00B8               	movwf	___ftdiv@f1
  4936  04AD  082C               	movf	?___ftadd+1,w
  4937  04AE  00B9               	movwf	___ftdiv@f1+1
  4938  04AF  082D               	movf	?___ftadd+2,w
  4939  04B0  00BA               	movwf	___ftdiv@f1+2
  4940  04B1  3187  2751  3184   	fcall	___ftdiv
  4941  04B4  0020               	movlb	0	; select bank0
  4942  04B5  0835               	movf	?___ftdiv,w
  4943  04B6  0024               	movlb	4	; select bank4
  4944  04B7  00A0               	movwf	loop@vt^(0+512)
  4945  04B8  0020               	movlb	0	; select bank0
  4946  04B9  0836               	movf	?___ftdiv+1,w
  4947  04BA  0024               	movlb	4	; select bank4
  4948  04BB  00A1               	movwf	(loop@vt+1)^(0+512)
  4949  04BC  0020               	movlb	0	; select bank0
  4950  04BD  0837               	movf	?___ftdiv+2,w
  4951  04BE  0024               	movlb	4	; select bank4
  4952  04BF  00A2               	movwf	(loop@vt+2)^(0+512)
  4953                           
  4954                           ;main.c: 138: FVRCONbits.TSEN = 0;
  4955  04C0  0022               	movlb	2	; select bank2
  4956  04C1  1297               	bcf	23,5	;volatile
  4957                           
  4958                           ;main.c: 143: float ta = (vt / -0.00132) - (0.6063 / -0.00132) - 40;
  4959  04C2  30A9               	movlw	169
  4960  04C3  0020               	movlb	0	; select bank0
  4961  04C4  00AB               	movwf	___ftadd@f1
  4962  04C5  30D1               	movlw	209
  4963  04C6  00AC               	movwf	___ftadd@f1+1
  4964  04C7  3043               	movlw	67
  4965  04C8  00AD               	movwf	___ftadd@f1+2
  4966  04C9  3004               	movlw	4
  4967  04CA  00B5               	movwf	___ftdiv@f2
  4968  04CB  30AD               	movlw	173
  4969  04CC  00B6               	movwf	___ftdiv@f2+1
  4970  04CD  30BA               	movlw	186
  4971  04CE  00B7               	movwf	___ftdiv@f2+2
  4972  04CF  0024               	movlb	4	; select bank4
  4973  04D0  0820               	movf	loop@vt^(0+512),w
  4974  04D1  0020               	movlb	0	; select bank0
  4975  04D2  00B8               	movwf	___ftdiv@f1
  4976  04D3  0024               	movlb	4	; select bank4
  4977  04D4  0821               	movf	(loop@vt+1)^(0+512),w
  4978  04D5  0020               	movlb	0	; select bank0
  4979  04D6  00B9               	movwf	___ftdiv@f1+1
  4980  04D7  0024               	movlb	4	; select bank4
  4981  04D8  0822               	movf	(loop@vt+2)^(0+512),w
  4982  04D9  0020               	movlb	0	; select bank0
  4983  04DA  00BA               	movwf	___ftdiv@f1+2
  4984  04DB  3187  2751  3184   	fcall	___ftdiv
  4985  04DE  0020               	movlb	0	; select bank0
  4986  04DF  0835               	movf	?___ftdiv,w
  4987  04E0  00AE               	movwf	___ftadd@f2
  4988  04E1  0836               	movf	?___ftdiv+1,w
  4989  04E2  00AF               	movwf	___ftadd@f2+1
  4990  04E3  0837               	movf	?___ftdiv+2,w
  4991  04E4  00B0               	movwf	___ftadd@f2+2
  4992  04E5  3183  2329  3184   	fcall	___ftadd
  4993  04E8  0020               	movlb	0	; select bank0
  4994  04E9  082B               	movf	?___ftadd,w
  4995  04EA  0024               	movlb	4	; select bank4
  4996  04EB  00A3               	movwf	loop@ta^(0+512)
  4997  04EC  0020               	movlb	0	; select bank0
  4998  04ED  082C               	movf	?___ftadd+1,w
  4999  04EE  0024               	movlb	4	; select bank4
  5000  04EF  00A4               	movwf	(loop@ta+1)^(0+512)
  5001  04F0  0020               	movlb	0	; select bank0
  5002  04F1  082D               	movf	?___ftadd+2,w
  5003  04F2  0024               	movlb	4	; select bank4
  5004  04F3  00A5               	movwf	(loop@ta+2)^(0+512)
  5005                           
  5006                           ;main.c: 145: sendMessage(&packet, "TEMP", ta);
  5007  04F4  302C               	movlw	low loop@packet
  5008  04F5  0021               	movlb	1	; select bank1
  5009  04F6  00B1               	movwf	sendMessage@packet^(0+128)
  5010  04F7  3002               	movlw	high loop@packet
  5011  04F8  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  5012  04F9  303F               	movlw	low (STR_5| (0+32768))
  5013  04FA  00B3               	movwf	sendMessage@topic^(0+128)
  5014  04FB  3090               	movlw	high (STR_5| (0+32768))
  5015  04FC  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  5016  04FD  0024               	movlb	4	; select bank4
  5017  04FE  0823               	movf	loop@ta^(0+512),w
  5018  04FF  0021               	movlb	1	; select bank1
  5019  0500  00B5               	movwf	sendMessage@value^(0+128)
  5020  0501  0024               	movlb	4	; select bank4
  5021  0502  0824               	movf	(loop@ta+1)^(0+512),w
  5022  0503  0021               	movlb	1	; select bank1
  5023  0504  00B6               	movwf	(sendMessage@value+1)^(0+128)
  5024  0505  0024               	movlb	4	; select bank4
  5025  0506  0825               	movf	(loop@ta+2)^(0+512),w
  5026  0507  0021               	movlb	1	; select bank1
  5027  0508  00B7               	movwf	(sendMessage@value+2)^(0+128)
  5028  0509  318D  25BF         	fcall	_sendMessage
  5029  050B  0008               	return
  5030  050C                     __end_of_loop:	
  5031                           
  5032                           	psect	text10
  5033  0DBF                     __ptext10:	
  5034 ;; *************** function _sendMessage *****************
  5035 ;; Defined at:
  5036 ;;		line 87 in file "main.c"
  5037 ;; Parameters:    Size  Location     Type
  5038 ;;  packet          2   17[BANK1 ] PTR struct .
  5039 ;;		 -> main@packet(33), loop@packet(33), 
  5040 ;;  topic           2   19[BANK1 ] PTR const unsigned char 
  5041 ;;		 -> STR_7(5), STR_5(5), STR_4(5), STR_3(6), 
  5042 ;;  value           3   21[BANK1 ] float 
  5043 ;; Auto vars:     Size  Location     Type
  5044 ;;  ftoaStatus      2   24[BANK1 ] int 
  5045 ;; Return value:  Size  Location     Type
  5046 ;;                  1    wreg      void 
  5047 ;; Registers used:
  5048 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  5049 ;; Tracked objects:
  5050 ;;		On entry : 0/0
  5051 ;;		On exit  : 0/0
  5052 ;;		Unchanged: 0/0
  5053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5054 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5055 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5057 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  5058 ;;Total ram usage:        9 bytes
  5059 ;; Hardware stack levels used:    1
  5060 ;; Hardware stack levels required when called:   13
  5061 ;; This function calls:
  5062 ;;		_ftoa
  5063 ;;		_memset
  5064 ;;		_nrf24l01SendPacket
  5065 ;;		_sleepListren
  5066 ;;		_strcat
  5067 ;;		_strcpy
  5068 ;; This function is called by:
  5069 ;;		_loop
  5070 ;;		_main
  5071 ;; This function uses a non-reentrant model
  5072 ;;
  5073                           
  5074                           
  5075                           ;psect for function _sendMessage
  5076  0DBF                     _sendMessage:	
  5077                           
  5078                           ;main.c: 89: int ftoaStatus;;main.c: 91: memset(packet->Message, 0, sizeof(packet->Messa
      +                          ge));
  5079                           
  5080                           ;incstack = 0
  5081                           ; Regs used in _sendMessage: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+p
      +                          clath+cstack]
  5082  0DBF  3020               	movlw	32
  5083  0DC0  001E               	movwi fsr1++
  5084  0DC1  3000               	movlw	0
  5085  0DC2  001E               	movwi fsr1++
  5086  0DC3  3000               	movlw	0
  5087  0DC4  001E               	movwi fsr1++
  5088  0DC5  001E               	movwi fsr1++
  5089  0DC6  0021               	movlb	1	; select bank1
  5090  0DC7  0831               	movf	sendMessage@packet^(0+128),w
  5091  0DC8  3E01               	addlw	1
  5092  0DC9  00FE               	movwf	126
  5093  0DCA  3000               	movlw	0
  5094  0DCB  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5095  0DCC  00FF               	movwf	127
  5096  0DCD  087E               	movf	126,w
  5097  0DCE  001E               	movwi fsr1++
  5098  0DCF  087F               	movf	127,w
  5099  0DD0  001E               	movwi fsr1++
  5100  0DD1  318A  22D4  318D   	fcall	_memset
  5101                           
  5102                           ;main.c: 92: strcpy(packet->Message, romData->name);
  5103  0DD4  0021               	movlb	1	; select bank1
  5104  0DD5  0831               	movf	sendMessage@packet^(0+128),w
  5105  0DD6  3E01               	addlw	1
  5106  0DD7  00F0               	movwf	strcpy@to
  5107  0DD8  3000               	movlw	0
  5108  0DD9  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5109  0DDA  00F1               	movwf	strcpy@to+1
  5110  0DDB  0869               	movf	_romData^(0+128),w
  5111  0DDC  3E01               	addlw	1
  5112  0DDD  00F2               	movwf	strcpy@from
  5113  0DDE  3001               	movlw	1
  5114  0DDF  00F3               	movwf	strcpy@from+1
  5115  0DE0  3188  20E6  318D   	fcall	_strcpy
  5116                           
  5117                           ;main.c: 93: strcat(packet->Message, "/");
  5118  0DE3  0021               	movlb	1	; select bank1
  5119  0DE4  0831               	movf	sendMessage@packet^(0+128),w
  5120  0DE5  3E01               	addlw	1
  5121  0DE6  00AD               	movwf	strcat@to^(0+128)
  5122  0DE7  3000               	movlw	0
  5123  0DE8  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5124  0DE9  00AE               	movwf	(strcat@to+1)^(0+128)
  5125  0DEA  3052               	movlw	low (STR_1| (0+32768))
  5126  0DEB  00AF               	movwf	strcat@from^(0+128)
  5127  0DEC  3090               	movlw	high (STR_1| (0+32768))
  5128  0DED  00B0               	movwf	(strcat@from^(0+128)+1)
  5129  0DEE  318A  22A5  318D   	fcall	_strcat
  5130                           
  5131                           ;main.c: 94: strcat(packet->Message, topic);
  5132  0DF1  0021               	movlb	1	; select bank1
  5133  0DF2  0831               	movf	sendMessage@packet^(0+128),w
  5134  0DF3  3E01               	addlw	1
  5135  0DF4  00AD               	movwf	strcat@to^(0+128)
  5136  0DF5  3000               	movlw	0
  5137  0DF6  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5138  0DF7  00AE               	movwf	(strcat@to+1)^(0+128)
  5139  0DF8  0834               	movf	(sendMessage@topic+1)^(0+128),w
  5140  0DF9  00B0               	movwf	(strcat@from+1)^(0+128)
  5141  0DFA  0833               	movf	sendMessage@topic^(0+128),w
  5142  0DFB  00AF               	movwf	strcat@from^(0+128)
  5143  0DFC  318A  22A5  318D   	fcall	_strcat
  5144                           
  5145                           ;main.c: 95: strcat(packet->Message, "/");
  5146  0DFF  0021               	movlb	1	; select bank1
  5147  0E00  0831               	movf	sendMessage@packet^(0+128),w
  5148  0E01  3E01               	addlw	1
  5149  0E02  00AD               	movwf	strcat@to^(0+128)
  5150  0E03  3000               	movlw	0
  5151  0E04  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5152  0E05  00AE               	movwf	(strcat@to+1)^(0+128)
  5153  0E06  3052               	movlw	low (STR_1| (0+32768))
  5154  0E07  00AF               	movwf	strcat@from^(0+128)
  5155  0E08  3090               	movlw	high (STR_1| (0+32768))
  5156  0E09  00B0               	movwf	(strcat@from^(0+128)+1)
  5157  0E0A  318A  22A5  318D   	fcall	_strcat
  5158                           
  5159                           ;main.c: 96: strcat(packet->Message, ftoa(value, &ftoaStatus));
  5160  0E0D  0021               	movlb	1	; select bank1
  5161  0E0E  0831               	movf	sendMessage@packet^(0+128),w
  5162  0E0F  3E01               	addlw	1
  5163  0E10  00AD               	movwf	strcat@to^(0+128)
  5164  0E11  3000               	movlw	0
  5165  0E12  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5166  0E13  00AE               	movwf	(strcat@to+1)^(0+128)
  5167  0E14  0835               	movf	sendMessage@value^(0+128),w
  5168  0E15  00A0               	movwf	ftoa@f^(0+128)
  5169  0E16  0836               	movf	(sendMessage@value+1)^(0+128),w
  5170  0E17  00A1               	movwf	(ftoa@f+1)^(0+128)
  5171  0E18  0837               	movf	(sendMessage@value+2)^(0+128),w
  5172  0E19  00A2               	movwf	(ftoa@f+2)^(0+128)
  5173  0E1A  30B8               	movlw	(low (sendMessage@ftoaStatus| 0))& (0+255)
  5174  0E1B  00FF               	movwf	127
  5175  0E1C  087F               	movf	127,w
  5176  0E1D  00A3               	movwf	ftoa@status^(0+128)
  5177  0E1E  3185  250C  318D   	fcall	_ftoa
  5178  0E21  0021               	movlb	1	; select bank1
  5179  0E22  00AF               	movwf	strcat@from^(0+128)
  5180  0E23  3001               	movlw	1
  5181  0E24  00B0               	movwf	(strcat@from+1)^(0+128)
  5182  0E25  318A  22A5  318D   	fcall	_strcat
  5183                           
  5184                           ;main.c: 98: packet->packetData.byte = 0;
  5185  0E28  0021               	movlb	1	; select bank1
  5186  0E29  0831               	movf	sendMessage@packet^(0+128),w
  5187  0E2A  0084               	movwf	4
  5188  0E2B  0832               	movf	(sendMessage@packet+1)^(0+128),w
  5189  0E2C  0085               	movwf	5
  5190  0E2D  0180               	clrf	0
  5191                           
  5192                           ;main.c: 99: packet->packetData.ACKRequest = 1;
  5193  0E2E  0831               	movf	sendMessage@packet^(0+128),w
  5194  0E2F  0084               	movwf	4
  5195  0E30  0832               	movf	(sendMessage@packet+1)^(0+128),w
  5196  0E31  0085               	movwf	5
  5197  0E32  1500               	bsf	0,2
  5198                           
  5199                           ;main.c: 101: nrf24l01SendPacket(packet);
  5200  0E33  0832               	movf	(sendMessage@packet+1)^(0+128),w
  5201  0E34  0020               	movlb	0	; select bank0
  5202  0E35  00A9               	movwf	nrf24l01SendPacket@txPacket+1
  5203  0E36  0021               	movlb	1	; select bank1
  5204  0E37  0831               	movf	sendMessage@packet^(0+128),w
  5205  0E38  0020               	movlb	0	; select bank0
  5206  0E39  00A8               	movwf	nrf24l01SendPacket@txPacket
  5207  0E3A  318B  23F4  318D   	fcall	_nrf24l01SendPacket
  5208                           
  5209                           ;main.c: 103: sleepListren(3);
  5210  0E3D  3003               	movlw	3
  5211  0E3E  0020               	movlb	0	; select bank0
  5212  0E3F  00A6               	movwf	sleepListren@seconds
  5213  0E40  3000               	movlw	0
  5214  0E41  00A7               	movwf	sleepListren@seconds+1
  5215  0E42  3188  20B2         	fcall	_sleepListren
  5216  0E44  0008               	return
  5217  0E45                     __end_of_sendMessage:	
  5218                           
  5219                           	psect	text11
  5220  0AA5                     __ptext11:	
  5221 ;; *************** function _strcat *****************
  5222 ;; Defined at:
  5223 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5224 ;; Parameters:    Size  Location     Type
  5225 ;;  to              2   13[BANK1 ] PTR unsigned char 
  5226 ;;		 -> main@packet(33), loop@packet(33), 
  5227 ;;  from            2   15[BANK1 ] PTR const unsigned char 
  5228 ;;		 -> ftoa@buf(17), STR_7(5), STR_5(5), STR_4(5), 
  5229 ;;		 -> STR_3(6), STR_2(2), STR_1(2), 
  5230 ;; Auto vars:     Size  Location     Type
  5231 ;;  cp              2   65[BANK0 ] PTR unsigned char 
  5232 ;;		 -> main@packet(33), loop@packet(33), 
  5233 ;; Return value:  Size  Location     Type
  5234 ;;                  2   13[BANK1 ] PTR unsigned char 
  5235 ;; Registers used:
  5236 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5237 ;; Tracked objects:
  5238 ;;		On entry : 0/0
  5239 ;;		On exit  : 0/0
  5240 ;;		Unchanged: 0/0
  5241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5242 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5243 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5245 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5246 ;;Total ram usage:        6 bytes
  5247 ;; Hardware stack levels used:    1
  5248 ;; Hardware stack levels required when called:    7
  5249 ;; This function calls:
  5250 ;;		Nothing
  5251 ;; This function is called by:
  5252 ;;		_sendMessage
  5253 ;; This function uses a non-reentrant model
  5254 ;;
  5255                           
  5256                           
  5257                           ;psect for function _strcat
  5258  0AA5                     _strcat:	
  5259                           
  5260                           ;incstack = 0
  5261                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5262  0AA5  0021               	movlb	1	; select bank1
  5263  0AA6  082E               	movf	(strcat@to+1)^(0+128),w
  5264  0AA7  0020               	movlb	0	; select bank0
  5265  0AA8  00E2               	movwf	strcat@cp+1
  5266  0AA9  0021               	movlb	1	; select bank1
  5267  0AAA  082D               	movf	strcat@to^(0+128),w
  5268  0AAB  0020               	movlb	0	; select bank0
  5269  0AAC  00E1               	movwf	strcat@cp
  5270  0AAD                     l4223:	
  5271  0AAD  0861               	movf	strcat@cp,w
  5272  0AAE  0084               	movwf	4
  5273  0AAF  0862               	movf	strcat@cp+1,w
  5274  0AB0  0085               	movwf	5
  5275  0AB1  0800               	movf	0,w
  5276  0AB2  1903               	btfsc	3,2
  5277  0AB3  2AC2               	goto	l4227
  5278  0AB4  3001               	movlw	1
  5279  0AB5  07E1               	addwf	strcat@cp,f
  5280  0AB6  3000               	movlw	0
  5281  0AB7  3DE2               	addwfc	strcat@cp+1,f
  5282  0AB8  2AAD               	goto	l4223
  5283  0AB9                     l4225:	
  5284  0AB9  3001               	movlw	1
  5285  0ABA  07E1               	addwf	strcat@cp,f
  5286  0ABB  3000               	movlw	0
  5287  0ABC  3DE2               	addwfc	strcat@cp+1,f
  5288  0ABD  3001               	movlw	1
  5289  0ABE  0021               	movlb	1	; select bank1
  5290  0ABF  07AF               	addwf	strcat@from^(0+128),f
  5291  0AC0  3000               	movlw	0
  5292  0AC1  3DB0               	addwfc	(strcat@from+1)^(0+128),f
  5293  0AC2                     l4227:	
  5294  0AC2  0021               	movlb	1	; select bank1
  5295  0AC3  082F               	movf	strcat@from^(0+128),w
  5296  0AC4  0084               	movwf	4
  5297  0AC5  0830               	movf	(strcat@from+1)^(0+128),w
  5298  0AC6  0085               	movwf	5
  5299  0AC7  0800               	movf	0,w	;code access
  5300  0AC8  00FF               	movwf	127
  5301  0AC9  0020               	movlb	0	; select bank0
  5302  0ACA  0861               	movf	strcat@cp,w
  5303  0ACB  0084               	movwf	4
  5304  0ACC  0862               	movf	strcat@cp+1,w
  5305  0ACD  0085               	movwf	5
  5306  0ACE  087F               	movf	127,w
  5307  0ACF  0080               	movwf	0
  5308  0AD0  0800               	movf	0,w
  5309  0AD1  1903               	btfsc	3,2
  5310  0AD2  0008               	return
  5311  0AD3  2AB9               	goto	l4225
  5312  0AD4                     __end_of_strcat:	
  5313                           ;	Return value of _strcat is never used
  5314                           
  5315                           
  5316                           	psect	text12
  5317  08B2                     __ptext12:	
  5318 ;; *************** function _sleepListren *****************
  5319 ;; Defined at:
  5320 ;;		line 74 in file "main.c"
  5321 ;; Parameters:    Size  Location     Type
  5322 ;;  seconds         2    6[BANK0 ] unsigned int 
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;		None
  5325 ;; Return value:  Size  Location     Type
  5326 ;;                  1    wreg      void 
  5327 ;; Registers used:
  5328 ;;		wreg, status,2, status,0, btemp+10, btemp+11, pclath, cstack
  5329 ;; Tracked objects:
  5330 ;;		On entry : 0/0
  5331 ;;		On exit  : 0/0
  5332 ;;		Unchanged: 0/0
  5333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5334 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5337 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5338 ;;Total ram usage:        2 bytes
  5339 ;; Hardware stack levels used:    1
  5340 ;; Hardware stack levels required when called:    9
  5341 ;; This function calls:
  5342 ;;		_sleepMs
  5343 ;; This function is called by:
  5344 ;;		_sendMessage
  5345 ;; This function uses a non-reentrant model
  5346 ;;
  5347                           
  5348                           
  5349                           ;psect for function _sleepListren
  5350  08B2                     _sleepListren:	
  5351  08B2                     l4209:	
  5352                           ;main.c: 77: while(seconds--){
  5353                           
  5354                           ;incstack = 0
  5355                           ; Regs used in _sleepListren: [wreg+status,2+status,0+btemp+10+btemp+11+pclath+cstack]
  5356                           
  5357  08B2  3001               	movlw	1
  5358  08B3  0020               	movlb	0	; select bank0
  5359  08B4  02A6               	subwf	sleepListren@seconds,f
  5360  08B5  3000               	movlw	0
  5361  08B6  3BA7               	subwfb	sleepListren@seconds+1,f
  5362  08B7  0A26               	incf	sleepListren@seconds,w
  5363  08B8  1903               	btfsc	3,2
  5364  08B9  0A27               	incf	sleepListren@seconds+1,w
  5365  08BA  1903               	btfsc	3,2
  5366  08BB  0008               	return
  5367                           
  5368                           ;main.c: 80: sleepMs(100);
  5369  08BC  3064               	movlw	100
  5370  08BD  00F0               	movwf	sleepMs@milliseconds
  5371  08BE  3000               	movlw	0
  5372  08BF  00F1               	movwf	sleepMs@milliseconds+1
  5373  08C0  318A  224C  3188   	fcall	_sleepMs
  5374                           
  5375                           ;main.c: 83: sleepMs(900);
  5376  08C3  3084               	movlw	132
  5377  08C4  00F0               	movwf	sleepMs@milliseconds
  5378  08C5  3003               	movlw	3
  5379  08C6  00F1               	movwf	sleepMs@milliseconds+1
  5380  08C7  318A  224C  3188   	fcall	_sleepMs
  5381  08CA  28B2               	goto	l4209
  5382  08CB                     __end_of_sleepListren:	
  5383                           
  5384                           	psect	text13
  5385  0BF4                     __ptext13:	
  5386 ;; *************** function _nrf24l01SendPacket *****************
  5387 ;; Defined at:
  5388 ;;		line 132 in file "nrf24l01.c"
  5389 ;; Parameters:    Size  Location     Type
  5390 ;;  txPacket        2    8[BANK0 ] PTR struct .
  5391 ;;		 -> main@packet(33), loop@packet(33), 
  5392 ;; Auto vars:     Size  Location     Type
  5393 ;;  loopCount       2   10[BANK0 ] unsigned int 
  5394 ;; Return value:  Size  Location     Type
  5395 ;;                  1    wreg      void 
  5396 ;; Registers used:
  5397 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  5398 ;; Tracked objects:
  5399 ;;		On entry : 0/0
  5400 ;;		On exit  : 0/0
  5401 ;;		Unchanged: 0/0
  5402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5403 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5404 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5406 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5407 ;;Total ram usage:        4 bytes
  5408 ;; Hardware stack levels used:    1
  5409 ;; Hardware stack levels required when called:   12
  5410 ;; This function calls:
  5411 ;;		_exception
  5412 ;;		_nrf24l01Service
  5413 ;;		_sleepMs
  5414 ;;		_strcpy
  5415 ;; This function is called by:
  5416 ;;		_sendMessage
  5417 ;; This function uses a non-reentrant model
  5418 ;;
  5419                           
  5420                           
  5421                           ;psect for function _nrf24l01SendPacket
  5422  0BF4                     _nrf24l01SendPacket:	
  5423                           
  5424                           ;nrf24l01.c: 134: unsigned int loopCount = 1000;
  5425                           
  5426                           ;incstack = 0
  5427                           ; Regs used in _nrf24l01SendPacket: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-bte
      +                          mp+11+pclath+cstack]
  5428  0BF4  30E8               	movlw	232
  5429  0BF5  0020               	movlb	0	; select bank0
  5430  0BF6  00AA               	movwf	nrf24l01SendPacket@loopCount
  5431  0BF7  3003               	movlw	3
  5432  0BF8  00AB               	movwf	nrf24l01SendPacket@loopCount+1
  5433  0BF9                     l4261:	
  5434                           ;nrf24l01.c: 135: while (status.TX != 0){
  5435                           
  5436  0BF9  0020               	movlb	0	; select bank0
  5437  0BFA  0864               	movf	_status,w	;volatile
  5438  0BFB  1903               	btfsc	3,2
  5439  0BFC  2C17               	goto	l4263
  5440                           
  5441                           ;nrf24l01.c: 136: sleepMs(1);
  5442  0BFD  3001               	movlw	1
  5443  0BFE  00F0               	movwf	sleepMs@milliseconds
  5444  0BFF  3000               	movlw	0
  5445  0C00  00F1               	movwf	sleepMs@milliseconds+1
  5446  0C01  318A  224C  318B   	fcall	_sleepMs
  5447                           
  5448                           ;nrf24l01.c: 137: nrf24l01Service();
  5449  0C04  3186  26A7  318B   	fcall	_nrf24l01Service
  5450                           
  5451                           ;nrf24l01.c: 139: if (!loopCount--){
  5452  0C07  3001               	movlw	1
  5453  0C08  0020               	movlb	0	; select bank0
  5454  0C09  02AA               	subwf	nrf24l01SendPacket@loopCount,f
  5455  0C0A  3000               	movlw	0
  5456  0C0B  3BAB               	subwfb	nrf24l01SendPacket@loopCount+1,f
  5457  0C0C  0A2A               	incf	nrf24l01SendPacket@loopCount,w
  5458  0C0D  1D03               	skipz
  5459  0C0E  2BF9               	goto	l4261
  5460  0C0F  0A2B               	incf	nrf24l01SendPacket@loopCount+1,w
  5461  0C10  1D03               	btfss	3,2
  5462  0C11  2BF9               	goto	l4261
  5463                           
  5464                           ;nrf24l01.c: 140: exception(21);
  5465  0C12  3015               	movlw	21
  5466  0C13  3188  204F  318B   	fcall	_exception
  5467  0C16  2BF9               	goto	l4261
  5468  0C17                     l4263:	
  5469                           
  5470                           ;nrf24l01.c: 141: };nrf24l01.c: 142: };nrf24l01.c: 144: strcpy(TXPacket.Message, txPacke
      +                          t->Message);
  5471  0C17  30C2               	movlw	low (_TXPacket+1)
  5472  0C18  00F0               	movwf	strcpy@to
  5473  0C19  3001               	movlw	high (_TXPacket+1)
  5474  0C1A  00F1               	movwf	strcpy@to+1
  5475  0C1B  0828               	movf	nrf24l01SendPacket@txPacket,w
  5476  0C1C  3E01               	addlw	1
  5477  0C1D  00FE               	movwf	126
  5478  0C1E  3000               	movlw	0
  5479  0C1F  3D29               	addwfc	nrf24l01SendPacket@txPacket+1,w
  5480  0C20  00FF               	movwf	127
  5481  0C21  087E               	movf	126,w
  5482  0C22  00F2               	movwf	strcpy@from
  5483  0C23  087F               	movf	127,w
  5484  0C24  00F3               	movwf	strcpy@from+1
  5485  0C25  3188  20E6         	fcall	_strcpy
  5486                           
  5487                           ;nrf24l01.c: 145: TXPacket.packetData = txPacket->packetData;
  5488  0C27  0020               	movlb	0	; select bank0
  5489  0C28  0828               	movf	nrf24l01SendPacket@txPacket,w
  5490  0C29  0084               	movwf	4
  5491  0C2A  0829               	movf	nrf24l01SendPacket@txPacket+1,w
  5492  0C2B  0085               	movwf	5
  5493  0C2C  0800               	movf	0,w
  5494  0C2D  00FF               	movwf	127
  5495  0C2E  087F               	movf	127,w
  5496  0C2F  0023               	movlb	3	; select bank3
  5497  0C30  00C1               	movwf	_TXPacket^(0+384)
  5498                           
  5499                           ;nrf24l01.c: 147: status.TX = 1;
  5500  0C31  3001               	movlw	1
  5501  0C32  00FF               	movwf	127
  5502  0C33  087F               	movf	127,w
  5503  0C34  0020               	movlb	0	; select bank0
  5504  0C35  00E4               	movwf	_status	;volatile
  5505  0C36  0008               	return
  5506  0C37                     __end_of_nrf24l01SendPacket:	
  5507                           
  5508                           	psect	text14
  5509  08E6                     __ptext14:	
  5510 ;; *************** function _strcpy *****************
  5511 ;; Defined at:
  5512 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  5513 ;; Parameters:    Size  Location     Type
  5514 ;;  to              2    0[COMMON] PTR unsigned char 
  5515 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5516 ;;  from            2    2[COMMON] PTR const unsigned char 
  5517 ;;		 -> romDataMap.name(16), packet.Message(32), packet.Message(32), main@packet(33), 
  5518 ;;		 -> STR_6(4), loop@packet(33), romDataMap(28), 
  5519 ;; Auto vars:     Size  Location     Type
  5520 ;;  cp              2    6[BANK0 ] PTR unsigned char 
  5521 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5522 ;; Return value:  Size  Location     Type
  5523 ;;                  2    0[COMMON] PTR unsigned char 
  5524 ;; Registers used:
  5525 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5526 ;; Tracked objects:
  5527 ;;		On entry : 0/0
  5528 ;;		On exit  : 0/0
  5529 ;;		Unchanged: 0/0
  5530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5531 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5532 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5534 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5535 ;;Total ram usage:        6 bytes
  5536 ;; Hardware stack levels used:    1
  5537 ;; Hardware stack levels required when called:    7
  5538 ;; This function calls:
  5539 ;;		Nothing
  5540 ;; This function is called by:
  5541 ;;		_sendMessage
  5542 ;;		_main
  5543 ;;		_nrf24l01SendPacket
  5544 ;; This function uses a non-reentrant model
  5545 ;;
  5546                           
  5547                           
  5548                           ;psect for function _strcpy
  5549  08E6                     _strcpy:	
  5550                           
  5551                           ;incstack = 0
  5552                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5553  08E6  0871               	movf	strcpy@to+1,w
  5554  08E7  0020               	movlb	0	; select bank0
  5555  08E8  00A7               	movwf	strcpy@cp+1
  5556  08E9  0870               	movf	strcpy@to,w
  5557  08EA  00A6               	movwf	strcpy@cp
  5558  08EB                     l3895:	
  5559  08EB  0872               	movf	strcpy@from,w
  5560  08EC  0084               	movwf	4
  5561  08ED  0873               	movf	strcpy@from+1,w
  5562  08EE  0085               	movwf	5
  5563  08EF  0800               	movf	0,w	;code access
  5564  08F0  00FF               	movwf	127
  5565  08F1  0826               	movf	strcpy@cp,w
  5566  08F2  0084               	movwf	4
  5567  08F3  0827               	movf	strcpy@cp+1,w
  5568  08F4  0085               	movwf	5
  5569  08F5  087F               	movf	127,w
  5570  08F6  0080               	movwf	0
  5571  08F7  0800               	movf	0,w
  5572  08F8  1903               	btfsc	3,2
  5573  08F9  0008               	return
  5574  08FA  3001               	movlw	1
  5575  08FB  07A6               	addwf	strcpy@cp,f
  5576  08FC  3000               	movlw	0
  5577  08FD  3DA7               	addwfc	strcpy@cp+1,f
  5578  08FE  3001               	movlw	1
  5579  08FF  07F2               	addwf	strcpy@from,f
  5580  0900  3000               	movlw	0
  5581  0901  3DF3               	addwfc	strcpy@from+1,f
  5582  0902  28EB               	goto	l3895
  5583  0903                     __end_of_strcpy:	
  5584                           ;	Return value of _strcpy is never used
  5585                           
  5586                           
  5587                           	psect	text15
  5588  06A7                     __ptext15:	
  5589 ;; *************** function _nrf24l01Service *****************
  5590 ;; Defined at:
  5591 ;;		line 237 in file "nrf24l01.c"
  5592 ;; Parameters:    Size  Location     Type
  5593 ;;		None
  5594 ;; Auto vars:     Size  Location     Type
  5595 ;;  width           1  [STACK] unsigned char 
  5596 ;;  i               1  [STACK] unsigned char 
  5597 ;; Return value:  Size  Location     Type
  5598 ;;                  1    wreg      void 
  5599 ;; Registers used:
  5600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath
  5601 ;; Tracked objects:
  5602 ;;		On entry : 0/0
  5603 ;;		On exit  : 1C/0
  5604 ;;		Unchanged: 0/0
  5605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5610 ;;Total ram usage:        0 bytes
  5611 ;; Hardware stack levels used:    1
  5612 ;; Hardware stack levels required when called:   11
  5613 ;; This function calls:
  5614 ;;		_memset
  5615 ;;		_nrf24l01SPIEnd
  5616 ;;		_nrf24l01SPISend
  5617 ;;		_nrf24l01SPIStart
  5618 ;;		_nrf24l01Send
  5619 ;;		_nrf24l01SendTXBuffer
  5620 ;;		_nrf24l01SetRXMode
  5621 ;;		_strcmp
  5622 ;; This function is called by:
  5623 ;;		_nrf24l01SendPacket
  5624 ;;		_nrf24l01ISR
  5625 ;; This function uses a reentrant model
  5626 ;;
  5627                           
  5628                           
  5629                           ;psect for function _nrf24l01Service
  5630  06A7                     _nrf24l01Service:	
  5631                           
  5632                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5633  06A7  3142               	addfsr 1,2
  5634                           
  5635                           ;nrf24l01.c: 239: unsigned char i;;nrf24l01.c: 241: if (status.TX == 1){
  5636                           
  5637                           ;incstack = 0
  5638 ;; hardware stack exceeded
  5639                           ; Regs used in _nrf24l01Service: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+
      +                          9+btemp+11+pclath]
  5640  06A8  0020               	movlb	0	; select bank0
  5641  06A9  0364               	decf	_status,w	;volatile
  5642  06AA  1D03               	btfss	3,2
  5643  06AB  2EB2               	goto	l4465
  5644                           
  5645                           ;nrf24l01.c: 244: status.TX = 2;
  5646  06AC  3002               	movlw	2
  5647  06AD  00E4               	movwf	_status	;volatile
  5648                           
  5649                           ;nrf24l01.c: 245: nrf24l01SendTXBuffer(&TXPacket);
  5650  06AE  30C1               	movlw	(low (_TXPacket| (0+256)))& (0+255)
  5651  06AF  318C  24C0  3186   	fcall	_nrf24l01SendTXBuffer
  5652  06B2                     l4465:	
  5653                           
  5654                           ;nrf24l01.c: 246: };nrf24l01.c: 248: if (status.TX == 3){
  5655  06B2  3003               	movlw	3
  5656  06B3  0664               	xorwf	_status,w	;volatile
  5657  06B4  1D03               	btfss	3,2
  5658  06B5  2EC1               	goto	l311
  5659                           
  5660                           ;nrf24l01.c: 249: if (!status.retryCount--){
  5661  06B6  03E8               	decf	_status+4,f	;volatile
  5662  06B7  0A68               	incf	_status+4,w	;volatile
  5663  06B8  1D03               	btfss	3,2
  5664  06B9  2EC1               	goto	l311
  5665                           
  5666                           ;nrf24l01.c: 250: counter++;
  5667  06BA  0021               	movlb	1	; select bank1
  5668  06BB  0AE6               	incf	_counter^(0+128),f
  5669  06BC  1903               	skipnz
  5670  06BD  0AE7               	incf	(_counter+1)^(0+128),f
  5671                           
  5672                           ;nrf24l01.c: 251: status.TX = 1;
  5673  06BE  3001               	movlw	1
  5674  06BF  0020               	movlb	0	; select bank0
  5675  06C0  00E4               	movwf	_status	;volatile
  5676  06C1                     l311:	
  5677                           
  5678                           ;nrf24l01.c: 252: };nrf24l01.c: 253: };nrf24l01.c: 255: if (status.RX == 1){
  5679  06C1  0365               	decf	_status+1,w	;volatile
  5680  06C2  1D03               	btfss	3,2
  5681  06C3  2F25               	goto	l4507
  5682                           
  5683                           ;nrf24l01.c: 258: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  5684  06C4  3020               	movlw	32
  5685  06C5  001E               	movwi fsr1++
  5686  06C6  3000               	movlw	0
  5687  06C7  001E               	movwi fsr1++
  5688  06C8  3000               	movlw	0
  5689  06C9  001E               	movwi fsr1++
  5690  06CA  001E               	movwi fsr1++
  5691  06CB  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5692  06CC  001E               	movwi fsr1++
  5693  06CD  3001               	movlw	1
  5694  06CE  001E               	movwi fsr1++
  5695  06CF  318A  22D4  3186   	fcall	_memset
  5696                           
  5697                           ;nrf24l01.c: 259: RXPacket.packetData.byte = 0x00;
  5698  06D2  0023               	movlb	3	; select bank3
  5699  06D3  01A0               	clrf	_RXPacket^(0+384)
  5700                           
  5701                           ;nrf24l01.c: 262: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  5702  06D4  3000               	movlw	0
  5703  06D5  001E               	movwi fsr1++
  5704  06D6  3060               	movlw	96
  5705  06D7  3188  208A  3186   	fcall	_nrf24l01Send
  5706                           
  5707                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5708  06DA  3FFE               	movwi [-2]fsr1
  5709                           
  5710                           ;nrf24l01.c: 265: PORTAbits.RA0 = 0;
  5711  06DB  0020               	movlb	0	; select bank0
  5712  06DC  100C               	bcf	12,0	;volatile
  5713                           
  5714                           ;nrf24l01.c: 268: nrf24l01SPIStart();
  5715  06DD  3188  203A  3186   	fcall	_nrf24l01SPIStart
  5716                           
  5717                           ;nrf24l01.c: 271: nrf24l01SPISend((unsigned) 0b01100001);
  5718  06E0  3061               	movlw	97
  5719  06E1  3188  206A  3186   	fcall	_nrf24l01SPISend
  5720                           
  5721                           ;nrf24l01.c: 274: RXPacket.packetData.byte = nrf24l01SPISend(0);
  5722  06E4  3000               	movlw	0
  5723  06E5  3188  206A  3186   	fcall	_nrf24l01SPISend
  5724  06E8  0023               	movlb	3	; select bank3
  5725  06E9  00A0               	movwf	_RXPacket^(0+384)
  5726                           
  5727                           ;nrf24l01.c: 275: width--;
  5728                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5729  06EA  3F7E               	moviw [-2]fsr1
  5730  06EB  00F4               	movwf	116
  5731  06EC  3001               	movlw	1
  5732  06ED  0274               	subwf	116,w
  5733  06EE  3FFE               	movwi [-2]fsr1
  5734                           
  5735                           ;nrf24l01.c: 277: for (i = 0; i < width; i++) {
  5736                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5737  06EF  3000               	movlw	0
  5738  06F0  3FFF               	movwi [-1]fsr1
  5739  06F1                     l4495:	
  5740                           
  5741                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5742  06F1  3F7F               	moviw [-1]fsr1
  5743  06F2  00FF               	movwf	127
  5744                           
  5745                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5746  06F3  3F7E               	moviw [-2]fsr1
  5747  06F4  027F               	subwf	127,w
  5748  06F5  1803               	btfsc	3,0
  5749  06F6  2F06               	goto	l4497
  5750                           
  5751                           ;nrf24l01.c: 279: RXPacket.Message[i] = nrf24l01SPISend(0);
  5752                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5753  06F7  3F7F               	moviw [-1]fsr1
  5754  06F8  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5755  06F9  0084               	movwf	4
  5756  06FA  3001               	movlw	1	; select bank3/4
  5757  06FB  3001               	movlw	1	; select bank3/4
  5758  06FC  0085               	movwf	5
  5759  06FD  3000               	movlw	0
  5760  06FE  3188  206A  3186   	fcall	_nrf24l01SPISend
  5761  0701  0080               	movwf	0
  5762                           
  5763                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5764  0702  3F7F               	moviw [-1]fsr1
  5765  0703  3E01               	addlw	1
  5766  0704  3FFF               	movwi [-1]fsr1
  5767  0705  2EF1               	goto	l4495
  5768  0706                     l4497:	
  5769                           
  5770                           ;nrf24l01.c: 280: };nrf24l01.c: 283: nrf24l01SPIEnd();
  5771  0706  3188  2031  3186   	fcall	_nrf24l01SPIEnd
  5772                           
  5773                           ;nrf24l01.c: 286: PORTAbits.RA0 = 1;
  5774  0709  0020               	movlb	0	; select bank0
  5775  070A  140C               	bsf	12,0	;volatile
  5776                           
  5777                           ;nrf24l01.c: 289: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
  5778  070B  0C66               	rrf	_status+2,w	;volatile
  5779  070C  3907               	andlw	7
  5780  070D  00FF               	movwf	127
  5781  070E  0EFF               	swapf	127,f
  5782  070F  0023               	movlb	3	; select bank3
  5783  0710  0820               	movf	_RXPacket^(0+384),w
  5784  0711  067F               	xorwf	127,w
  5785  0712  398F               	andlw	-113
  5786  0713  067F               	xorwf	127,w
  5787  0714  00A0               	movwf	_RXPacket^(0+384)
  5788                           
  5789                           ;nrf24l01.c: 292: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  5790  0715  3000               	movlw	0
  5791  0716  001E               	movwi fsr1++
  5792  0717  3009               	movlw	9
  5793  0718  3188  208A  3186   	fcall	_nrf24l01Send
  5794  071B  00FF               	movwf	127
  5795  071C  0023               	movlb	3	; select bank3
  5796  071D  0820               	movf	_RXPacket^(0+384),w
  5797  071E  067F               	xorwf	127,w
  5798  071F  39FE               	andlw	-2
  5799  0720  067F               	xorwf	127,w
  5800  0721  00A0               	movwf	_RXPacket^(0+384)
  5801                           
  5802                           ;nrf24l01.c: 294: status.RX = 2;
  5803  0722  3002               	movlw	2
  5804  0723  0020               	movlb	0	; select bank0
  5805  0724  00E5               	movwf	_status+1	;volatile
  5806  0725                     l4507:	
  5807                           
  5808                           ;nrf24l01.c: 295: };nrf24l01.c: 297: if (status.RX == 2){
  5809  0725  3002               	movlw	2
  5810  0726  0665               	xorwf	_status+1,w	;volatile
  5811  0727  1D03               	btfss	3,2
  5812  0728  2F42               	goto	l4519
  5813                           
  5814                           ;nrf24l01.c: 300: if (RXPacket.packetData.IsACK){
  5815  0729  0023               	movlb	3	; select bank3
  5816  072A  1DA0               	btfss	_RXPacket^(0+384),3
  5817  072B  2F42               	goto	l4519
  5818                           
  5819                           ;nrf24l01.c: 302: if (status.TX == 3){
  5820  072C  3003               	movlw	3
  5821  072D  0020               	movlb	0	; select bank0
  5822  072E  0664               	xorwf	_status,w	;volatile
  5823  072F  1D03               	btfss	3,2
  5824  0730  2F42               	goto	l4519
  5825                           
  5826                           ;nrf24l01.c: 304: if (strcmp(RXPacket.Message, TXPacket.Message) == 0){
  5827  0731  30C2               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  5828  0732  001E               	movwi fsr1++
  5829  0733  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5830  0734  3189  21F9  3186   	fcall	_strcmp
  5831  0737  0874               	movf	116,w
  5832  0738  0475               	iorwf	117,w
  5833  0739  1D03               	btfss	3,2
  5834  073A  2F42               	goto	l4519
  5835                           
  5836                           ;nrf24l01.c: 305: status.TX = 0;
  5837  073B  0020               	movlb	0	; select bank0
  5838  073C  01E4               	clrf	_status	;volatile
  5839                           
  5840                           ;nrf24l01.c: 306: status.RX = 0;
  5841  073D  01E5               	clrf	_status+1	;volatile
  5842                           
  5843                           ;nrf24l01.c: 308: nrf24l01SetRXMode(0);
  5844  073E  3000               	movlw	0
  5845  073F  318B  233A  3186   	fcall	_nrf24l01SetRXMode
  5846  0742                     l4519:	
  5847                           
  5848                           ;nrf24l01.c: 310: };nrf24l01.c: 311: };nrf24l01.c: 312: };nrf24l01.c: 313: };nrf24l01.c:
      +                           315: if (status.RX == 2){
  5849  0742  3002               	movlw	2
  5850  0743  0020               	movlb	0	; select bank0
  5851  0744  0665               	xorwf	_status+1,w	;volatile
  5852  0745  1D03               	btfss	3,2
  5853  0746  2F4F               	goto	l323
  5854                           
  5855                           ;nrf24l01.c: 317: if (RXPacket.packetData.ACKRequest){
  5856  0747  0023               	movlb	3	; select bank3
  5857  0748  1D20               	btfss	_RXPacket^(0+384),2
  5858  0749  2F4F               	goto	l323
  5859                           
  5860                           ;nrf24l01.c: 319: RXPacket.packetData.ACKRequest = 0;
  5861  074A  1120               	bcf	_RXPacket^(0+384),2
  5862                           
  5863                           ;nrf24l01.c: 320: RXPacket.packetData.IsACK = 1;
  5864  074B  15A0               	bsf	_RXPacket^(0+384),3
  5865                           
  5866                           ;nrf24l01.c: 322: nrf24l01SendTXBuffer(&RXPacket);
  5867  074C  30A0               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  5868  074D  318C  24C0         	fcall	_nrf24l01SendTXBuffer
  5869  074F                     l323:	
  5870                           
  5871                           ; _nrf24l01Service: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  5872  074F  317E               	addfsr 1,-2
  5873  0750  0008               	return
  5874  0751                     __end_of_nrf24l01Service:	
  5875                           
  5876                           	psect	text16
  5877  09F9                     __ptext16:	
  5878 ;; *************** function _strcmp *****************
  5879 ;; Defined at:
  5880 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  5881 ;; Parameters:    Size  Location     Type
  5882 ;;  s1              1    wreg     PTR const unsigned char 
  5883 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5884 ;;  s2              1  [STACK] PTR const unsigned char 
  5885 ;;		 -> TXPacket.Message(32), TXPacket(33), 
  5886 ;; Auto vars:     Size  Location     Type
  5887 ;;  s1              1  [STACK] PTR const unsigned char 
  5888 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5889 ;;  r               1  [STACK] char 
  5890 ;; Return value:  Size  Location     Type
  5891 ;;                  2  [STACK] int 
  5892 ;; Registers used:
  5893 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  5894 ;; Tracked objects:
  5895 ;;		On entry : 1F/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5903 ;;Total ram usage:        0 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; Hardware stack levels required when called:    7
  5906 ;; This function calls:
  5907 ;;		Nothing
  5908 ;; This function is called by:
  5909 ;;		_nrf24l01Service
  5910 ;; This function uses a reentrant model
  5911 ;;
  5912                           
  5913                           
  5914                           ;psect for function _strcmp
  5915  09F9                     _strcmp:	
  5916                           
  5917                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5918  09F9  3142               	addfsr 1,2
  5919                           
  5920                           ;incstack = 0
  5921 ;; hardware stack exceeded
  5922                           ; Regs used in _strcmp: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  5923                           ;strcmp@s1 stored from wreg
  5924                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5925  09FA  3FFE               	movwi [-2]fsr1
  5926  09FB  2A09               	goto	l4327
  5927  09FC                     l4329:	
  5928                           
  5929                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5930  09FC  3F7E               	moviw [-2]fsr1
  5931  09FD  0084               	movwf	4
  5932  09FE  3001               	movlw	1	; select bank2/3
  5933  09FF  0085               	movwf	5
  5934  0A00  0800               	movf	0,w
  5935  0A01  1903               	btfsc	3,2
  5936  0A02  2A1B               	goto	l4331
  5937                           
  5938                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5939  0A03  3F7E               	moviw [-2]fsr1
  5940  0A04  3E01               	addlw	1
  5941  0A05  3FFE               	movwi [-2]fsr1
  5942                           
  5943                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5944  0A06  3F7D               	moviw [-3]fsr1
  5945  0A07  3E01               	addlw	1
  5946  0A08  3FFD               	movwi [-3]fsr1
  5947  0A09                     l4327:	
  5948                           
  5949                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5950  0A09  3F7D               	moviw [-3]fsr1
  5951  0A0A  0084               	movwf	4
  5952  0A0B  3001               	movlw	1	; select bank2/3
  5953  0A0C  0085               	movwf	5
  5954  0A0D  0800               	movf	0,w
  5955  0A0E  00FF               	movwf	127
  5956                           
  5957                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5958  0A0F  3F7E               	moviw [-2]fsr1
  5959  0A10  0084               	movwf	4
  5960  0A11  3001               	movlw	1	; select bank2/3
  5961  0A12  0085               	movwf	5
  5962  0A13  0800               	movf	0,w
  5963  0A14  00F4               	movwf	116
  5964  0A15  087F               	movf	127,w
  5965  0A16  0274               	subwf	116,w
  5966                           
  5967                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5968  0A17  3FFF               	movwi [-1]fsr1
  5969  0A18  0889               	movf	9,f
  5970  0A19  1903               	btfsc	3,2
  5971  0A1A  29FC               	goto	l4329
  5972  0A1B                     l4331:	
  5973                           
  5974                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5975  0A1B  3F7F               	moviw [-1]fsr1
  5976  0A1C  00F4               	movwf	116
  5977  0A1D  01F5               	clrf	117
  5978  0A1E  1BF4               	btfsc	116,7
  5979  0A1F  03F5               	decf	117,f
  5980                           
  5981                           ; _strcmp: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsiz
      +                          e = 1, vargsize = 0
  5982  0A20  317D               	addfsr 1,-3
  5983  0A21  0008               	return
  5984  0A22                     __end_of_strcmp:	
  5985                           
  5986                           	psect	text17
  5987  0CC0                     __ptext17:	
  5988 ;; *************** function _nrf24l01SendTXBuffer *****************
  5989 ;; Defined at:
  5990 ;;		line 201 in file "nrf24l01.c"
  5991 ;; Parameters:    Size  Location     Type
  5992 ;;  packet          1    wreg     PTR struct .
  5993 ;;		 -> TXPacket(33), RXPacket(33), 
  5994 ;; Auto vars:     Size  Location     Type
  5995 ;;  packet          1  [STACK] PTR struct .
  5996 ;;		 -> TXPacket(33), RXPacket(33), 
  5997 ;;  i               1  [STACK] unsigned char 
  5998 ;;  width           1  [STACK] unsigned char 
  5999 ;; Return value:  Size  Location     Type
  6000 ;;                  1    wreg      void 
  6001 ;; Registers used:
  6002 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11, pclath
  6003 ;; Tracked objects:
  6004 ;;		On entry : 1C/0
  6005 ;;		On exit  : 1F/0
  6006 ;;		Unchanged: 0/0
  6007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6012 ;;Total ram usage:        0 bytes
  6013 ;; Hardware stack levels used:    1
  6014 ;; Hardware stack levels required when called:   10
  6015 ;; This function calls:
  6016 ;;		_nrf24l01SPIEnd
  6017 ;;		_nrf24l01SPISend
  6018 ;;		_nrf24l01SPIStart
  6019 ;;		_nrf24l01SetRXMode
  6020 ;;		_strlen
  6021 ;; This function is called by:
  6022 ;;		_nrf24l01Service
  6023 ;; This function uses a reentrant model
  6024 ;;
  6025                           
  6026                           
  6027                           ;psect for function _nrf24l01SendTXBuffer
  6028  0CC0                     _nrf24l01SendTXBuffer:	
  6029                           
  6030                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6031  0CC0  3143               	addfsr 1,3
  6032                           
  6033                           ;incstack = 0
  6034 ;; hardware stack exceeded
  6035                           ; Regs used in _nrf24l01SendTXBuffer: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11+
      +                          pclath]
  6036                           ;nrf24l01SendTXBuffer@packet stored from wreg
  6037                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  6038  0CC1  3FFD               	movwi [-3]fsr1
  6039                           
  6040                           ;nrf24l01.c: 203: lastTXPacket = packet;
  6041                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  6042  0CC2  3F7D               	moviw [-3]fsr1
  6043  0CC3  0020               	movlb	0	; select bank0
  6044  0CC4  00E9               	movwf	_lastTXPacket
  6045                           
  6046                           ;nrf24l01.c: 205: unsigned char i;;nrf24l01.c: 208: nrf24l01SetRXMode(0);
  6047  0CC5  3000               	movlw	0
  6048  0CC6  318B  233A  318C   	fcall	_nrf24l01SetRXMode
  6049                           
  6050                           ;nrf24l01.c: 211: nrf24l01SPIStart();
  6051  0CC9  3188  203A  318C   	fcall	_nrf24l01SPIStart
  6052                           
  6053                           ;nrf24l01.c: 214: nrf24l01SPISend((unsigned) 0b10110000);
  6054  0CCC  30B0               	movlw	176
  6055  0CCD  3188  206A  318C   	fcall	_nrf24l01SPISend
  6056                           
  6057                           ;nrf24l01.c: 216: nrf24l01SPISend(lastTXPacket->packetData.byte);
  6058  0CD0  0020               	movlb	0	; select bank0
  6059  0CD1  0869               	movf	_lastTXPacket,w
  6060  0CD2  0084               	movwf	4
  6061  0CD3  3001               	movlw	1	; select bank2/3
  6062  0CD4  3001               	movlw	1	; select bank2/3
  6063  0CD5  0085               	movwf	5
  6064  0CD6  0800               	movf	0,w
  6065  0CD7  3188  206A  318C   	fcall	_nrf24l01SPISend
  6066                           
  6067                           ;nrf24l01.c: 220: unsigned char width = strlen(lastTXPacket->Message);
  6068  0CDA  0020               	movlb	0	; select bank0
  6069  0CDB  0869               	movf	_lastTXPacket,w
  6070  0CDC  3E01               	addlw	1
  6071  0CDD  3189  213F  318C   	fcall	_strlen
  6072  0CE0  0874               	movf	116,w
  6073                           
  6074                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  6075  0CE1  3FFF               	movwi [-1]fsr1
  6076                           
  6077                           ;nrf24l01.c: 222: for (i = 0; i < width; i++) {
  6078                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6079  0CE2  3000               	movlw	0
  6080  0CE3  3FFE               	movwi [-2]fsr1
  6081  0CE4                     l4311:	
  6082                           
  6083                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6084  0CE4  3F7E               	moviw [-2]fsr1
  6085  0CE5  00FF               	movwf	127
  6086                           
  6087                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  6088  0CE6  3F7F               	moviw [-1]fsr1
  6089  0CE7  027F               	subwf	127,w
  6090  0CE8  1803               	btfsc	3,0
  6091  0CE9  2CFB               	goto	l4313
  6092                           
  6093                           ;nrf24l01.c: 223: nrf24l01SPISend(lastTXPacket->Message[i]);
  6094                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6095  0CEA  3F7E               	moviw [-2]fsr1
  6096  0CEB  0020               	movlb	0	; select bank0
  6097  0CEC  0769               	addwf	_lastTXPacket,w
  6098  0CED  00FF               	movwf	127
  6099  0CEE  0A7F               	incf	127,w
  6100  0CEF  0084               	movwf	4
  6101  0CF0  3001               	movlw	1	; select bank2/3
  6102  0CF1  3001               	movlw	1	; select bank2/3
  6103  0CF2  0085               	movwf	5
  6104  0CF3  0800               	movf	0,w
  6105  0CF4  3188  206A  318C   	fcall	_nrf24l01SPISend
  6106                           
  6107                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6108  0CF7  3F7E               	moviw [-2]fsr1
  6109  0CF8  3E01               	addlw	1
  6110  0CF9  3FFE               	movwi [-2]fsr1
  6111  0CFA  2CE4               	goto	l4311
  6112  0CFB                     l4313:	
  6113                           
  6114                           ;nrf24l01.c: 224: };nrf24l01.c: 227: nrf24l01SPIEnd();
  6115  0CFB  3188  2031  318C   	fcall	_nrf24l01SPIEnd
  6116                           
  6117                           ;nrf24l01.c: 230: PORTAbits.RA0 = 1;
  6118  0CFE  0020               	movlb	0	; select bank0
  6119  0CFF  140C               	bsf	12,0	;volatile
  6120                           
  6121                           ;nrf24l01.c: 231: _delay((unsigned long)((12)*(32000000/4000000.0)));
  6122  0D00  3020               	movlw	32
  6123  0D01                     u5417:	
  6124  0D01  0B89               	decfsz	9,f
  6125  0D02  2D01               	goto	u5417
  6126                           
  6127                           ;nrf24l01.c: 232: PORTAbits.RA0 = 0;
  6128  0D03  0020               	movlb	0	; select bank0
  6129  0D04  100C               	bcf	12,0	;volatile
  6130                           
  6131                           ; _nrf24l01SendTXBuffer: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 0, argsize = 0, vargsize = 0
  6132  0D05  317D               	addfsr 1,-3
  6133  0D06  0008               	return
  6134  0D07                     __end_of_nrf24l01SendTXBuffer:	
  6135                           
  6136                           	psect	text18
  6137  093F                     __ptext18:	
  6138 ;; *************** function _strlen *****************
  6139 ;; Defined at:
  6140 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  6141 ;; Parameters:    Size  Location     Type
  6142 ;;  s               1    wreg     PTR const unsigned char 
  6143 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6144 ;;		 -> RXPacket(33), romDataMap(28), 
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;  s               1  [STACK] PTR const unsigned char 
  6147 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6148 ;;		 -> RXPacket(33), romDataMap(28), 
  6149 ;;  cp              1  [STACK] PTR const unsigned char 
  6150 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6151 ;;		 -> RXPacket(33), romDataMap(28), 
  6152 ;; Return value:  Size  Location     Type
  6153 ;;                  2  [STACK] unsigned int 
  6154 ;; Registers used:
  6155 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  6156 ;; Tracked objects:
  6157 ;;		On entry : 1F/0
  6158 ;;		On exit  : 0/0
  6159 ;;		Unchanged: 0/0
  6160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6165 ;;Total ram usage:        0 bytes
  6166 ;; Hardware stack levels used:    1
  6167 ;; Hardware stack levels required when called:    7
  6168 ;; This function calls:
  6169 ;;		Nothing
  6170 ;; This function is called by:
  6171 ;;		_nrf24l01GetPipe
  6172 ;;		_nrf24l01SendTXBuffer
  6173 ;; This function uses a reentrant model
  6174 ;;
  6175                           
  6176                           
  6177                           ;psect for function _strlen
  6178  093F                     _strlen:	
  6179                           
  6180                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6181  093F  3142               	addfsr 1,2
  6182                           
  6183                           ;incstack = 0
  6184 ;; hardware stack exceeded
  6185                           ; Regs used in _strlen: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  6186                           ;strlen@s stored from wreg
  6187                           ;stkvar	strlen@s @ sp[(-2)+0]
  6188  0940  3FFE               	movwi [-2]fsr1
  6189                           
  6190                           ;stkvar	strlen@s @ sp[(-2)+0]
  6191  0941  0806               	movf	6,w
  6192  0942  0084               	movwf	4
  6193  0943  0807               	movf	7,w
  6194  0944  0085               	movwf	5
  6195  0945  313E               	addfsr 0,-2
  6196                           
  6197                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6198  0946  3F00               	moviw [0]fsr0
  6199  0947  3FFF               	movwi [-1]fsr1
  6200  0948                     l3901:	
  6201                           
  6202                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6203  0948  3F7F               	moviw [-1]fsr1
  6204  0949  0084               	movwf	4
  6205  094A  3001               	movlw	1	; select bank2/3
  6206  094B  0085               	movwf	5
  6207  094C  0800               	movf	0,w
  6208  094D  1903               	btfsc	3,2
  6209  094E  2953               	goto	l3903
  6210                           
  6211                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6212  094F  3F7F               	moviw [-1]fsr1
  6213  0950  3E01               	addlw	1
  6214  0951  3FFF               	movwi [-1]fsr1
  6215  0952  2948               	goto	l3901
  6216  0953                     l3903:	
  6217                           
  6218                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6219  0953  3F7F               	moviw [-1]fsr1
  6220  0954  00FF               	movwf	127
  6221                           
  6222                           ;stkvar	strlen@s @ sp[(-2)+0]
  6223  0955  3F7E               	moviw [-2]fsr1
  6224  0956  027F               	subwf	127,w
  6225  0957  00F4               	movwf	116
  6226  0958  01F5               	clrf	117
  6227  0959  1BF4               	btfsc	116,7
  6228  095A  03F5               	decf	117,f
  6229                           
  6230                           ; _strlen: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsiz
      +                          e = 0, vargsize = 0
  6231  095B  317E               	addfsr 1,-2
  6232  095C  0008               	return
  6233  095D                     __end_of_strlen:	
  6234                           
  6235                           	psect	text19
  6236  0B3A                     __ptext19:	
  6237 ;; *************** function _nrf24l01SetRXMode *****************
  6238 ;; Defined at:
  6239 ;;		line 50 in file "nrf24l01.c"
  6240 ;; Parameters:    Size  Location     Type
  6241 ;;  rxMode          1    wreg     unsigned char 
  6242 ;; Auto vars:     Size  Location     Type
  6243 ;;  rxMode          1  [STACK] unsigned char 
  6244 ;; Return value:  Size  Location     Type
  6245 ;;                  1    wreg      void 
  6246 ;; Registers used:
  6247 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+11, pclath
  6248 ;; Tracked objects:
  6249 ;;		On entry : 1F/0
  6250 ;;		On exit  : 0/0
  6251 ;;		Unchanged: 0/0
  6252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6257 ;;Total ram usage:        0 bytes
  6258 ;; Hardware stack levels used:    1
  6259 ;; Hardware stack levels required when called:    9
  6260 ;; This function calls:
  6261 ;;		_nrf24l01Send
  6262 ;; This function is called by:
  6263 ;;		_nrf24l01ISR
  6264 ;;		_nrf24l01SendTXBuffer
  6265 ;;		_nrf24l01Service
  6266 ;; This function uses a reentrant model
  6267 ;;
  6268                           
  6269                           
  6270                           ;psect for function _nrf24l01SetRXMode
  6271  0B3A                     _nrf24l01SetRXMode:	
  6272                           
  6273                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6274  0B3A  3141               	addfsr 1,1
  6275                           
  6276                           ;incstack = 0
  6277 ;; hardware stack exceeded
  6278                           ; Regs used in _nrf24l01SetRXMode: [wreg+fsr1l+fsr1h+status,2-btemp+0+btemp+11+pclath]
  6279                           ;nrf24l01SetRXMode@rxMode stored from wreg
  6280                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6281  0B3B  3FFF               	movwi [-1]fsr1
  6282                           
  6283                           ;nrf24l01.c: 53: if (rxMode){
  6284                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6285  0B3C  3F7F               	moviw [-1]fsr1
  6286  0B3D  1903               	btfsc	3,2
  6287  0B3E  2B44               	goto	l3913
  6288                           
  6289                           ;nrf24l01.c: 54: if (status.TX == 2){
  6290  0B3F  3002               	movlw	2
  6291  0B40  0020               	movlb	0	; select bank0
  6292  0B41  0664               	xorwf	_status,w	;volatile
  6293  0B42  1903               	btfsc	3,2
  6294  0B43  2B73               	goto	l266
  6295  0B44                     l3913:	
  6296                           
  6297                           ;nrf24l01.c: 56: };nrf24l01.c: 57: };nrf24l01.c: 60: if (!rxMode){
  6298                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6299  0B44  3F7F               	moviw [-1]fsr1
  6300  0B45  1D03               	btfss	3,2
  6301  0B46  2B4C               	goto	l3919
  6302                           
  6303                           ;nrf24l01.c: 61: if (status.TX == 3){
  6304  0B47  3003               	movlw	3
  6305  0B48  0020               	movlb	0	; select bank0
  6306  0B49  0664               	xorwf	_status,w	;volatile
  6307  0B4A  1903               	btfsc	3,2
  6308  0B4B  2B73               	goto	l266
  6309  0B4C                     l3919:	
  6310                           
  6311                           ;nrf24l01.c: 63: };nrf24l01.c: 64: };nrf24l01.c: 70: if (status.configRegister.PRIM_RX !
      +                          = rxMode){
  6312                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6313  0B4C  3F7F               	moviw [-1]fsr1
  6314  0B4D  00FF               	movwf	127
  6315  0B4E  0020               	movlb	0	; select bank0
  6316  0B4F  0867               	movf	_status+3,w	;volatile
  6317  0B50  3901               	andlw	1
  6318  0B51  067F               	xorwf	127,w
  6319  0B52  1903               	skipnz
  6320  0B53  2B73               	goto	l266
  6321                           
  6322                           ;nrf24l01.c: 73: PORTAbits.RA0 = 0;
  6323  0B54  100C               	bcf	12,0	;volatile
  6324                           
  6325                           ;nrf24l01.c: 74: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6326  0B55  30C0               	movlw	192
  6327  0B56                     u5427:	
  6328  0B56  3200               	nop2
  6329  0B57  0B89               	decfsz	9,f
  6330  0B58  2B56               	goto	u5427
  6331                           
  6332                           ;nrf24l01.c: 77: status.configRegister.PRIM_RX = rxMode;
  6333                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6334  0B59  3F7F               	moviw [-1]fsr1
  6335  0B5A  3901               	andlw	1
  6336  0B5B  0020               	movlb	0	; select bank0
  6337  0B5C  1D03               	skipz
  6338  0B5D  1467               	bsf	_status+3,0	;volatile
  6339  0B5E  1903               	skipnz
  6340  0B5F  1067               	bcf	_status+3,0	;volatile
  6341                           
  6342                           ;nrf24l01.c: 78: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configRegi
      +                          ster.byte);
  6343  0B60  0867               	movf	_status+3,w	;volatile
  6344  0B61  001E               	movwi fsr1++
  6345  0B62  3020               	movlw	32
  6346  0B63  3188  208A  318B   	fcall	_nrf24l01Send
  6347                           
  6348                           ;nrf24l01.c: 81: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6349  0B66  30C0               	movlw	192
  6350  0B67                     u5437:	
  6351  0B67  3200               	nop2
  6352  0B68  0B89               	decfsz	9,f
  6353  0B69  2B67               	goto	u5437
  6354                           
  6355                           ;nrf24l01.c: 84: if (rxMode){
  6356                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6357  0B6A  3F7F               	moviw [-1]fsr1
  6358  0B6B  1903               	btfsc	3,2
  6359  0B6C  2B73               	goto	l266
  6360                           
  6361                           ;nrf24l01.c: 85: PORTAbits.RA0 = 1;
  6362  0B6D  0020               	movlb	0	; select bank0
  6363  0B6E  140C               	bsf	12,0	;volatile
  6364                           
  6365                           ;nrf24l01.c: 86: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6366  0B6F  30C0               	movlw	192
  6367  0B70                     u5447:	
  6368  0B70  3200               	nop2
  6369  0B71  0B89               	decfsz	9,f
  6370  0B72  2B70               	goto	u5447
  6371  0B73                     l266:	
  6372                           
  6373                           ; _nrf24l01SetRXMode: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
  6374  0B73  317F               	addfsr 1,-1
  6375  0B74  0008               	return
  6376  0B75                     __end_of_nrf24l01SetRXMode:	
  6377                           
  6378                           	psect	text20
  6379  088A                     __ptext20:	
  6380 ;; *************** function _nrf24l01Send *****************
  6381 ;; Defined at:
  6382 ;;		line 11 in file "nrf24l01.c"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;  command         1    wreg     unsigned char 
  6385 ;;  data            1  [STACK] unsigned char 
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;  command         1  [STACK] unsigned char 
  6388 ;; Return value:  Size  Location     Type
  6389 ;;                  1    wreg      unsigned char 
  6390 ;; Registers used:
  6391 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath
  6392 ;; Tracked objects:
  6393 ;;		On entry : 0/0
  6394 ;;		On exit  : 1F/1
  6395 ;;		Unchanged: 0/0
  6396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6401 ;;Total ram usage:        0 bytes
  6402 ;; Hardware stack levels used:    1
  6403 ;; Hardware stack levels required when called:    8
  6404 ;; This function calls:
  6405 ;;		_nrf24l01SPIEnd
  6406 ;;		_nrf24l01SPISend
  6407 ;;		_nrf24l01SPIStart
  6408 ;; This function is called by:
  6409 ;;		_nrf24l01SetRXMode
  6410 ;;		_nrf24l01SetRXPipe
  6411 ;;		_nrf24l01ISR
  6412 ;;		_nrf24l01Service
  6413 ;;		_nrf24l01InitRegisters
  6414 ;;		_nrf24l01ChangeTXPower
  6415 ;; This function uses a reentrant model
  6416 ;;
  6417                           
  6418                           
  6419                           ;psect for function _nrf24l01Send
  6420  088A                     _nrf24l01Send:	
  6421                           
  6422                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6423  088A  3141               	addfsr 1,1
  6424                           
  6425                           ;incstack = 0
  6426 ;; hardware stack exceeded
  6427                           ; Regs used in _nrf24l01Send: [wreg+fsr1l+fsr1h+status,2+status,0+pclath]
  6428                           ;nrf24l01Send@command stored from wreg
  6429                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6430  088B  3FFF               	movwi [-1]fsr1
  6431                           
  6432                           ;nrf24l01.c: 14: nrf24l01SPIStart();
  6433  088C  3188  203A  3188   	fcall	_nrf24l01SPIStart
  6434                           
  6435                           ;nrf24l01.c: 17: nrf24l01SPISend(command);
  6436                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6437  088F  3F7F               	moviw [-1]fsr1
  6438  0890  3188  206A  3188   	fcall	_nrf24l01SPISend
  6439                           
  6440                           ;nrf24l01.c: 20: data = nrf24l01SPISend(data);
  6441                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6442  0893  3F7E               	moviw [-2]fsr1
  6443  0894  3188  206A  3188   	fcall	_nrf24l01SPISend
  6444                           
  6445                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6446  0897  3FFE               	movwi [-2]fsr1
  6447                           
  6448                           ;nrf24l01.c: 23: nrf24l01SPIEnd();
  6449  0898  3188  2031         	fcall	_nrf24l01SPIEnd
  6450                           
  6451                           ;nrf24l01.c: 25: return data;
  6452                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6453  089A  3F7E               	moviw [-2]fsr1
  6454                           
  6455                           ; _nrf24l01Send: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, 
      +                          argsize = 1, vargsize = 0
  6456  089B  317E               	addfsr 1,-2
  6457  089C  0008               	return
  6458  089D                     __end_of_nrf24l01Send:	
  6459                           
  6460                           	psect	text21
  6461  083A                     __ptext21:	
  6462 ;; *************** function _nrf24l01SPIStart *****************
  6463 ;; Defined at:
  6464 ;;		line 69 in file "interface.c"
  6465 ;; Parameters:    Size  Location     Type
  6466 ;;		None
  6467 ;; Auto vars:     Size  Location     Type
  6468 ;;		None
  6469 ;; Return value:  Size  Location     Type
  6470 ;;                  1    wreg      void 
  6471 ;; Registers used:
  6472 ;;		wreg
  6473 ;; Tracked objects:
  6474 ;;		On entry : 0/0
  6475 ;;		On exit  : 0/0
  6476 ;;		Unchanged: 0/0
  6477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6482 ;;Total ram usage:        0 bytes
  6483 ;; Hardware stack levels used:    1
  6484 ;; Hardware stack levels required when called:    7
  6485 ;; This function calls:
  6486 ;;		Nothing
  6487 ;; This function is called by:
  6488 ;;		_nrf24l01Send
  6489 ;;		_nrf24l01SetTXPipe
  6490 ;;		_nrf24l01SendTXBuffer
  6491 ;;		_nrf24l01Service
  6492 ;;		_nrf24l01InitRegisters
  6493 ;; This function uses a reentrant model
  6494 ;;
  6495                           
  6496                           
  6497                           ;psect for function _nrf24l01SPIStart
  6498  083A                     _nrf24l01SPIStart:	
  6499                           
  6500                           ;interface.c: 70: PIE0bits.INTE = 0;
  6501                           
  6502                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6503                           ;incstack = 0
  6504 ;; hardware stack exceeded
  6505                           ; Regs used in _nrf24l01SPIStart: [wreg]
  6506  083A  0021               	movlb	1	; select bank1
  6507  083B  1010               	bcf	16,0	;volatile
  6508                           
  6509                           ;interface.c: 71: PORTAbits.RA1 = 0;
  6510  083C  0020               	movlb	0	; select bank0
  6511  083D  108C               	bcf	12,1	;volatile
  6512                           
  6513                           ;interface.c: 72: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6514  083E  301A               	movlw	26
  6515  083F                     u5457:	
  6516  083F  0B89               	decfsz	9,f
  6517  0840  283F               	goto	u5457
  6518  0841  3200               	nop2
  6519                           
  6520                           ; _nrf24l01SPIStart: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           0, argsize = 0, vargsize = 0
  6521  0842  0008               	return
  6522  0843                     __end_of_nrf24l01SPIStart:	
  6523                           
  6524                           	psect	text22
  6525  086A                     __ptext22:	
  6526 ;; *************** function _nrf24l01SPISend *****************
  6527 ;; Defined at:
  6528 ;;		line 57 in file "interface.c"
  6529 ;; Parameters:    Size  Location     Type
  6530 ;;  data            1    wreg     unsigned char 
  6531 ;; Auto vars:     Size  Location     Type
  6532 ;;  data            1  [STACK] unsigned char 
  6533 ;; Return value:  Size  Location     Type
  6534 ;;                  1    wreg      unsigned char 
  6535 ;; Registers used:
  6536 ;;		wreg, fsr1l, fsr1h
  6537 ;; Tracked objects:
  6538 ;;		On entry : 0/0
  6539 ;;		On exit  : 1F/4
  6540 ;;		Unchanged: 0/0
  6541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6546 ;;Total ram usage:        0 bytes
  6547 ;; Hardware stack levels used:    1
  6548 ;; Hardware stack levels required when called:    7
  6549 ;; This function calls:
  6550 ;;		Nothing
  6551 ;; This function is called by:
  6552 ;;		_nrf24l01Send
  6553 ;;		_nrf24l01SetTXPipe
  6554 ;;		_nrf24l01SendTXBuffer
  6555 ;;		_nrf24l01Service
  6556 ;;		_nrf24l01InitRegisters
  6557 ;; This function uses a reentrant model
  6558 ;;
  6559                           
  6560                           
  6561                           ;psect for function _nrf24l01SPISend
  6562  086A                     _nrf24l01SPISend:	
  6563                           
  6564                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6565  086A  3141               	addfsr 1,1
  6566                           
  6567                           ;incstack = 0
  6568 ;; hardware stack exceeded
  6569                           ; Regs used in _nrf24l01SPISend: [wreg+fsr1l+fsr1h]
  6570                           ;nrf24l01SPISend@data stored from wreg
  6571                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6572  086B  3FFF               	movwi [-1]fsr1
  6573                           
  6574                           ;interface.c: 58: SSP1BUF = data;
  6575                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6576  086C  3F7F               	moviw [-1]fsr1
  6577  086D  0024               	movlb	4	; select bank4
  6578  086E  0091               	movwf	17	;volatile
  6579                           
  6580                           ;interface.c: 60: PORTCbits.RC4 = 1;
  6581  086F  0020               	movlb	0	; select bank0
  6582  0870  160E               	bsf	14,4	;volatile
  6583  0871                     l55:	
  6584                           ;interface.c: 62: while (!SSP1STATbits.BF){
  6585                           
  6586  0871  0024               	movlb	4	; select bank4
  6587  0872  1814               	btfsc	20,0	;volatile
  6588  0873  2876               	goto	l3633
  6589                           
  6590                           ;interface.c: 63: __nop();
  6591  0874  0000               	nop
  6592  0875  2871               	goto	l55
  6593  0876                     l3633:	
  6594                           
  6595                           ;interface.c: 64: };interface.c: 66: return SSP1BUF;
  6596  0876  0811               	movf	17,w	;volatile
  6597                           
  6598                           ; _nrf24l01SPISend: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  6599  0877  317F               	addfsr 1,-1
  6600  0878  0008               	return
  6601  0879                     __end_of_nrf24l01SPISend:	
  6602                           
  6603                           	psect	text23
  6604  0831                     __ptext23:	
  6605 ;; *************** function _nrf24l01SPIEnd *****************
  6606 ;; Defined at:
  6607 ;;		line 75 in file "interface.c"
  6608 ;; Parameters:    Size  Location     Type
  6609 ;;		None
  6610 ;; Auto vars:     Size  Location     Type
  6611 ;;		None
  6612 ;; Return value:  Size  Location     Type
  6613 ;;                  1    wreg      void 
  6614 ;; Registers used:
  6615 ;;		wreg
  6616 ;; Tracked objects:
  6617 ;;		On entry : 0/0
  6618 ;;		On exit  : 1F/1
  6619 ;;		Unchanged: 0/0
  6620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6625 ;;Total ram usage:        0 bytes
  6626 ;; Hardware stack levels used:    1
  6627 ;; Hardware stack levels required when called:    7
  6628 ;; This function calls:
  6629 ;;		Nothing
  6630 ;; This function is called by:
  6631 ;;		_nrf24l01Send
  6632 ;;		_nrf24l01SetTXPipe
  6633 ;;		_nrf24l01SendTXBuffer
  6634 ;;		_nrf24l01Service
  6635 ;;		_nrf24l01InitRegisters
  6636 ;; This function uses a reentrant model
  6637 ;;
  6638                           
  6639                           
  6640                           ;psect for function _nrf24l01SPIEnd
  6641  0831                     _nrf24l01SPIEnd:	
  6642                           
  6643                           ;interface.c: 76: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6644                           
  6645                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6646                           ;incstack = 0
  6647 ;; hardware stack exceeded
  6648                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  6649  0831  301A               	movlw	26
  6650  0832                     u5467:	
  6651  0832  0B89               	decfsz	9,f
  6652  0833  2832               	goto	u5467
  6653  0834  3200               	nop2
  6654                           
  6655                           ;interface.c: 77: PORTAbits.RA1 = 1;
  6656  0835  0020               	movlb	0	; select bank0
  6657  0836  148C               	bsf	12,1	;volatile
  6658                           
  6659                           ;interface.c: 78: PIE0bits.INTE = 1;
  6660  0837  0021               	movlb	1	; select bank1
  6661  0838  1410               	bsf	16,0	;volatile
  6662                           
  6663                           ; _nrf24l01SPIEnd: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  6664  0839  0008               	return
  6665  083A                     __end_of_nrf24l01SPIEnd:	
  6666                           
  6667                           	psect	text24
  6668  0AD4                     __ptext24:	
  6669 ;; *************** function _memset *****************
  6670 ;; Defined at:
  6671 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6672 ;; Parameters:    Size  Location     Type
  6673 ;;  p1              2  [STACK] PTR void 
  6674 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6675 ;;  c               2  [STACK] int 
  6676 ;;  n               2  [STACK] unsigned int 
  6677 ;; Auto vars:     Size  Location     Type
  6678 ;;  p               2  [STACK] PTR unsigned char 
  6679 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6680 ;; Return value:  Size  Location     Type
  6681 ;;                  2  [STACK] PTR void 
  6682 ;; Registers used:
  6683 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+8, btemp+9, btemp+11
  6684 ;; Tracked objects:
  6685 ;;		On entry : 1E/1
  6686 ;;		On exit  : 0/0
  6687 ;;		Unchanged: 0/0
  6688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6693 ;;Total ram usage:        0 bytes
  6694 ;; Hardware stack levels used:    1
  6695 ;; Hardware stack levels required when called:    7
  6696 ;; This function calls:
  6697 ;;		Nothing
  6698 ;; This function is called by:
  6699 ;;		_sendMessage
  6700 ;;		_nrf24l01Service
  6701 ;; This function uses a reentrant model
  6702 ;;
  6703                           
  6704                           
  6705                           ;psect for function _memset
  6706  0AD4                     _memset:	
  6707                           
  6708                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6709  0AD4  3142               	addfsr 1,2
  6710                           
  6711                           ;stkvar	memset@p1 @ sp[(-2)+-2]
  6712                           
  6713                           ;incstack = 0
  6714 ;; hardware stack exceeded
  6715                           ; Regs used in _memset: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+8+btemp+9+btemp+1
      +                          1]
  6716  0AD5  0806               	movf	6,w
  6717  0AD6  0084               	movwf	4
  6718  0AD7  0807               	movf	7,w
  6719  0AD8  0085               	movwf	5
  6720  0AD9  313C               	addfsr 0,-4
  6721                           
  6722                           ;stkvar	memset@p @ sp[(-2)+0]
  6723  0ADA  3F00               	moviw [0]fsr0
  6724  0ADB  3FFE               	movwi [-2]fsr1
  6725  0ADC  3F01               	moviw [1]fsr0
  6726  0ADD  3FFF               	movwi [-1]fsr1
  6727  0ADE                     l4217:	
  6728                           
  6729                           ;stkvar	memset@n @ sp[(-2)+-6]
  6730  0ADE  3F78               	moviw [-8]fsr1
  6731  0ADF  00F4               	movwf	116
  6732  0AE0  3001               	movlw	1
  6733  0AE1  0274               	subwf	116,w
  6734  0AE2  3FF8               	movwi [-8]fsr1
  6735  0AE3  3F79               	moviw [-7]fsr1
  6736  0AE4  00F4               	movwf	116
  6737  0AE5  3000               	movlw	0
  6738  0AE6  3B74               	subwfb	116,w
  6739  0AE7  3FF9               	movwi [-7]fsr1
  6740  0AE8  3F78               	moviw [-8]fsr1
  6741  0AE9  3AFF               	xorlw	255
  6742  0AEA  00F4               	movwf	116
  6743  0AEB  3F79               	moviw [-7]fsr1
  6744  0AEC  3AFF               	xorlw	255
  6745  0AED  04F4               	iorwf	116,f
  6746  0AEE  1903               	btfsc	3,2
  6747  0AEF  2B04               	goto	l968
  6748                           
  6749                           ;stkvar	memset@c @ sp[(-2)+-4]
  6750  0AF0  3F7A               	moviw [-6]fsr1
  6751  0AF1  00FF               	movwf	127
  6752                           
  6753                           ;stkvar	memset@p @ sp[(-2)+0]
  6754  0AF2  3F7E               	moviw [-2]fsr1
  6755  0AF3  00FC               	movwf	124
  6756  0AF4  3F7F               	moviw [-1]fsr1
  6757  0AF5  00FD               	movwf	125
  6758  0AF6  087C               	movf	124,w
  6759  0AF7  0084               	movwf	4
  6760  0AF8  087D               	movf	125,w
  6761  0AF9  0085               	movwf	5
  6762  0AFA  087F               	movf	127,w
  6763  0AFB  0080               	movwf	0
  6764                           
  6765                           ;stkvar	memset@p @ sp[(-2)+0]
  6766  0AFC  3F7E               	moviw [-2]fsr1
  6767  0AFD  3E01               	addlw	1
  6768  0AFE  3FFE               	movwi [-2]fsr1
  6769  0AFF  01F4               	clrf	116
  6770  0B00  3F7F               	moviw [-1]fsr1
  6771  0B01  3D74               	addwfc	116,w
  6772  0B02  3FFF               	movwi [-1]fsr1
  6773  0B03  2ADE               	goto	l4217
  6774  0B04                     l968:	
  6775                           
  6776                           ; _memset: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsiz
      +                          e = 6, vargsize = 0
  6777  0B04  3178               	addfsr 1,-8
  6778  0B05  0008               	return
  6779  0B06                     __end_of_memset:	
  6780                           
  6781                           	psect	text25
  6782  084F                     __ptext25:	
  6783 ;; *************** function _exception *****************
  6784 ;; Defined at:
  6785 ;;		line 81 in file "interface.c"
  6786 ;; Parameters:    Size  Location     Type
  6787 ;;  exception       1    wreg     unsigned char 
  6788 ;; Auto vars:     Size  Location     Type
  6789 ;;  exception       1    6[BANK0 ] unsigned char 
  6790 ;; Return value:  Size  Location     Type
  6791 ;;                  1    wreg      void 
  6792 ;; Registers used:
  6793 ;;		wreg, status,2, status,0, btemp+11, pclath, cstack
  6794 ;; Tracked objects:
  6795 ;;		On entry : 0/0
  6796 ;;		On exit  : 0/0
  6797 ;;		Unchanged: 0/0
  6798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6800 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6802 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6803 ;;Total ram usage:        1 bytes
  6804 ;; Hardware stack levels used:    1
  6805 ;; Hardware stack levels required when called:    8
  6806 ;; This function calls:
  6807 ;;		_EEPROMWrite
  6808 ;; This function is called by:
  6809 ;;		_nrf24l01SendPacket
  6810 ;; This function uses a non-reentrant model
  6811 ;;
  6812                           
  6813                           
  6814                           ;psect for function _exception
  6815  084F                     _exception:	
  6816                           
  6817                           ;incstack = 0
  6818                           ; Regs used in _exception: [wreg+status,2+status,0+btemp+11+pclath+cstack]
  6819                           ;exception@exception stored from wreg
  6820  084F  0020               	movlb	0	; select bank0
  6821  0850  00A6               	movwf	exception@exception
  6822                           
  6823                           ;interface.c: 82: EEPROMWrite(0, exception);
  6824  0851  3000               	movlw	0
  6825  0852  00F0               	movwf	EEPROMWrite@address
  6826  0853  00F1               	movwf	EEPROMWrite@address+1
  6827  0854  0826               	movf	exception@exception,w
  6828  0855  00FF               	movwf	127
  6829  0856  087F               	movf	127,w
  6830  0857  00F2               	movwf	EEPROMWrite@data
  6831  0858  3189  2199         	fcall	_EEPROMWrite
  6832  085A  0001               	reset	;# 
  6833  085B  0008               	return
  6834  085C                     __end_of_exception:	
  6835                           
  6836                           	psect	text26
  6837  0999                     __ptext26:	
  6838 ;; *************** function _EEPROMWrite *****************
  6839 ;; Defined at:
  6840 ;;		line 7 in file "eeprom.c"
  6841 ;; Parameters:    Size  Location     Type
  6842 ;;  address         2    0[COMMON] unsigned int 
  6843 ;;  data            1    2[COMMON] unsigned char 
  6844 ;; Auto vars:     Size  Location     Type
  6845 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  6846 ;; Return value:  Size  Location     Type
  6847 ;;                  1    wreg      void 
  6848 ;; Registers used:
  6849 ;;		wreg, status,2, status,0
  6850 ;; Tracked objects:
  6851 ;;		On entry : 0/0
  6852 ;;		On exit  : 0/0
  6853 ;;		Unchanged: 0/0
  6854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6855 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6856 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6858 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6859 ;;Total ram usage:        4 bytes
  6860 ;; Hardware stack levels used:    1
  6861 ;; Hardware stack levels required when called:    7
  6862 ;; This function calls:
  6863 ;;		Nothing
  6864 ;; This function is called by:
  6865 ;;		_exception
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           
  6870                           ;psect for function _EEPROMWrite
  6871  0999                     _EEPROMWrite:	
  6872                           
  6873                           ;eeprom.c: 9: unsigned char GIEBitValue = INTCONbits.GIE;
  6874                           
  6875                           ;incstack = 0
  6876                           ; Regs used in _EEPROMWrite: [wreg+status,2+status,0]
  6877  0999  3000               	movlw	0
  6878  099A  1B8B               	btfsc	11,7	;volatile
  6879  099B  3001               	movlw	1
  6880  099C  00F3               	movwf	EEPROMWrite@GIEBitValue
  6881                           
  6882                           ;eeprom.c: 11: NVMADRH = ((address >> 8) & 0xFF);
  6883  099D  0871               	movf	EEPROMWrite@address+1,w
  6884  099E  0031               	movlb	17	; select bank17
  6885  099F  0092               	movwf	18	;volatile
  6886                           
  6887                           ;eeprom.c: 12: NVMADRL = (address & 0xFF);
  6888  09A0  0870               	movf	EEPROMWrite@address,w
  6889  09A1  0091               	movwf	17	;volatile
  6890                           
  6891                           ;eeprom.c: 13: NVMDATL = data;
  6892  09A2  0872               	movf	EEPROMWrite@data,w
  6893  09A3  0093               	movwf	19	;volatile
  6894                           
  6895                           ;eeprom.c: 14: NVMCON1bits.NVMREGS = 1;
  6896  09A4  1715               	bsf	21,6	;volsfr
  6897                           
  6898                           ;eeprom.c: 15: NVMCON1bits.WREN = 1;
  6899  09A5  1515               	bsf	21,2	;volsfr
  6900                           
  6901                           ;eeprom.c: 16: INTCONbits.GIE = 0;
  6902  09A6  138B               	bcf	11,7	;volatile
  6903                           
  6904                           ;eeprom.c: 17: NVMCON2 = 0x55;
  6905  09A7  3055               	movlw	85
  6906  09A8  0096               	movwf	22	;volsfr
  6907                           
  6908                           ;eeprom.c: 18: NVMCON2 = 0xAA;
  6909  09A9  30AA               	movlw	170
  6910  09AA  0096               	movwf	22	;volsfr
  6911                           
  6912                           ;eeprom.c: 19: NVMCON1bits.WR = 1;
  6913  09AB  1495               	bsf	21,1	;volsfr
  6914                           
  6915                           ;eeprom.c: 21: while (NVMCON1bits.WR){
  6916  09AC  29AE               	goto	l349
  6917  09AD                     l350:	
  6918                           
  6919                           ;eeprom.c: 22: __nop();
  6920  09AD  0000               	nop
  6921  09AE                     l349:	
  6922  09AE  0031               	movlb	17	; select bank17
  6923  09AF  1895               	btfsc	21,1	;volsfr
  6924  09B0  29AD               	goto	l350
  6925                           
  6926                           ;eeprom.c: 23: };eeprom.c: 25: NVMCON1bits.WREN = 0;
  6927  09B1  1115               	bcf	21,2	;volsfr
  6928                           
  6929                           ;eeprom.c: 26: INTCONbits.GIE = GIEBitValue;
  6930  09B2  0C73               	rrf	EEPROMWrite@GIEBitValue,w
  6931  09B3  1C03               	skipc
  6932  09B4  138B               	bcf	11,7	;volatile
  6933  09B5  1803               	skipnc
  6934  09B6  178B               	bsf	11,7	;volatile
  6935  09B7  0008               	return
  6936  09B8                     __end_of_EEPROMWrite:	
  6937                           
  6938                           	psect	text27
  6939  050C                     __ptext27:	
  6940 ;; *************** function _ftoa *****************
  6941 ;; Defined at:
  6942 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6943 ;; Parameters:    Size  Location     Type
  6944 ;;  f               3    0[BANK1 ] float 
  6945 ;;  status          1    3[BANK1 ] PTR int 
  6946 ;;		 -> sendMessage@ftoaStatus(2), 
  6947 ;; Auto vars:     Size  Location     Type
  6948 ;;  l               4    8[BANK1 ] unsigned long 
  6949 ;;  rem             4    4[BANK1 ] unsigned long 
  6950 ;;  cp              1   12[BANK1 ] PTR unsigned char 
  6951 ;;		 -> ftoa@buf(17), 
  6952 ;; Return value:  Size  Location     Type
  6953 ;;                  1    wreg      PTR unsigned char 
  6954 ;; Registers used:
  6955 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  6956 ;; Tracked objects:
  6957 ;;		On entry : 0/0
  6958 ;;		On exit  : 0/0
  6959 ;;		Unchanged: 0/0
  6960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6961 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6962 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6964 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6965 ;;Total ram usage:       13 bytes
  6966 ;; Hardware stack levels used:    1
  6967 ;; Hardware stack levels required when called:   10
  6968 ;; This function calls:
  6969 ;;		___ftge
  6970 ;;		___ftmul
  6971 ;;		___ftneg
  6972 ;;		___ftsub
  6973 ;;		___fttol
  6974 ;;		___lltoft
  6975 ;;		_sprintf
  6976 ;; This function is called by:
  6977 ;;		_sendMessage
  6978 ;; This function uses a non-reentrant model
  6979 ;;
  6980                           
  6981                           
  6982                           ;psect for function _ftoa
  6983  050C                     _ftoa:	
  6984                           
  6985                           ;incstack = 0
  6986                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  6987  050C  303C               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6988  050D  00FF               	movwf	127
  6989  050E  087F               	movf	127,w
  6990  050F  0021               	movlb	1	; select bank1
  6991  0510  00AC               	movwf	ftoa@cp^(0+128)
  6992  0511  0820               	movf	ftoa@f^(0+128),w
  6993  0512  0020               	movlb	0	; select bank0
  6994  0513  00A6               	movwf	___ftge@ff1
  6995  0514  0021               	movlb	1	; select bank1
  6996  0515  0821               	movf	(ftoa@f+1)^(0+128),w
  6997  0516  0020               	movlb	0	; select bank0
  6998  0517  00A7               	movwf	___ftge@ff1+1
  6999  0518  0021               	movlb	1	; select bank1
  7000  0519  0822               	movf	(ftoa@f+2)^(0+128),w
  7001  051A  0020               	movlb	0	; select bank0
  7002  051B  00A8               	movwf	___ftge@ff1+2
  7003  051C  3000               	movlw	0
  7004  051D  00A9               	movwf	___ftge@ff2
  7005  051E  3000               	movlw	0
  7006  051F  00AA               	movwf	___ftge@ff2+1
  7007  0520  3000               	movlw	0
  7008  0521  00AB               	movwf	___ftge@ff2+2
  7009  0522  318B  2375  3185   	fcall	___ftge
  7010  0525  1803               	btfsc	3,0
  7011  0526  2D4E               	goto	l4239
  7012  0527  302D               	movlw	45
  7013  0528  00FF               	movwf	127
  7014  0529  0021               	movlb	1	; select bank1
  7015  052A  082C               	movf	ftoa@cp^(0+128),w
  7016  052B  0084               	movwf	4
  7017  052C  3001               	movlw	1	; select bank2/3
  7018  052D  0085               	movwf	5
  7019  052E  087F               	movf	127,w
  7020  052F  0080               	movwf	0
  7021  0530  3001               	movlw	1
  7022  0531  00FF               	movwf	127
  7023  0532  087F               	movf	127,w
  7024  0533  07AC               	addwf	ftoa@cp^(0+128),f
  7025  0534  0820               	movf	ftoa@f^(0+128),w
  7026  0535  0020               	movlb	0	; select bank0
  7027  0536  00CB               	movwf	___ftneg@f1
  7028  0537  0021               	movlb	1	; select bank1
  7029  0538  0821               	movf	(ftoa@f+1)^(0+128),w
  7030  0539  0020               	movlb	0	; select bank0
  7031  053A  00CC               	movwf	___ftneg@f1+1
  7032  053B  0021               	movlb	1	; select bank1
  7033  053C  0822               	movf	(ftoa@f+2)^(0+128),w
  7034  053D  0020               	movlb	0	; select bank0
  7035  053E  00CD               	movwf	___ftneg@f1+2
  7036  053F  3188  2028  3185   	fcall	___ftneg
  7037  0542  0020               	movlb	0	; select bank0
  7038  0543  084B               	movf	?___ftneg,w
  7039  0544  0021               	movlb	1	; select bank1
  7040  0545  00A0               	movwf	ftoa@f^(0+128)
  7041  0546  0020               	movlb	0	; select bank0
  7042  0547  084C               	movf	?___ftneg+1,w
  7043  0548  0021               	movlb	1	; select bank1
  7044  0549  00A1               	movwf	(ftoa@f+1)^(0+128)
  7045  054A  0020               	movlb	0	; select bank0
  7046  054B  084D               	movf	?___ftneg+2,w
  7047  054C  0021               	movlb	1	; select bank1
  7048  054D  00A2               	movwf	(ftoa@f+2)^(0+128)
  7049  054E                     l4239:	
  7050  054E  0021               	movlb	1	; select bank1
  7051  054F  0820               	movf	ftoa@f^(0+128),w
  7052  0550  0020               	movlb	0	; select bank0
  7053  0551  00D7               	movwf	___fttol@f1
  7054  0552  0021               	movlb	1	; select bank1
  7055  0553  0821               	movf	(ftoa@f+1)^(0+128),w
  7056  0554  0020               	movlb	0	; select bank0
  7057  0555  00D8               	movwf	___fttol@f1+1
  7058  0556  0021               	movlb	1	; select bank1
  7059  0557  0822               	movf	(ftoa@f+2)^(0+128),w
  7060  0558  0020               	movlb	0	; select bank0
  7061  0559  00D9               	movwf	___fttol@f1+2
  7062  055A  318E  2645  3185   	fcall	___fttol
  7063  055D  0020               	movlb	0	; select bank0
  7064  055E  085A               	movf	?___fttol+3,w
  7065  055F  0021               	movlb	1	; select bank1
  7066  0560  00AB               	movwf	(ftoa@l+3)^(0+128)
  7067  0561  0020               	movlb	0	; select bank0
  7068  0562  0859               	movf	?___fttol+2,w
  7069  0563  0021               	movlb	1	; select bank1
  7070  0564  00AA               	movwf	(ftoa@l+2)^(0+128)
  7071  0565  0020               	movlb	0	; select bank0
  7072  0566  0858               	movf	?___fttol+1,w
  7073  0567  0021               	movlb	1	; select bank1
  7074  0568  00A9               	movwf	(ftoa@l+1)^(0+128)
  7075  0569  0020               	movlb	0	; select bank0
  7076  056A  0857               	movf	?___fttol,w
  7077  056B  0021               	movlb	1	; select bank1
  7078  056C  00A8               	movwf	ftoa@l^(0+128)
  7079  056D  082B               	movf	(ftoa@l+3)^(0+128),w
  7080  056E  00F3               	movwf	___lltoft@c+3
  7081  056F  082A               	movf	(ftoa@l+2)^(0+128),w
  7082  0570  00F2               	movwf	___lltoft@c+2
  7083  0571  0829               	movf	(ftoa@l+1)^(0+128),w
  7084  0572  00F1               	movwf	___lltoft@c+1
  7085  0573  0828               	movf	ftoa@l^(0+128),w
  7086  0574  00F0               	movwf	___lltoft@c
  7087  0575  318A  2222  3185   	fcall	___lltoft
  7088  0578  0870               	movf	?___lltoft,w
  7089  0579  0020               	movlb	0	; select bank0
  7090  057A  00B5               	movwf	___ftsub@f2
  7091  057B  0871               	movf	?___lltoft+1,w
  7092  057C  00B6               	movwf	___ftsub@f2+1
  7093  057D  0872               	movf	?___lltoft+2,w
  7094  057E  00B7               	movwf	___ftsub@f2+2
  7095  057F  0021               	movlb	1	; select bank1
  7096  0580  0820               	movf	ftoa@f^(0+128),w
  7097  0581  0020               	movlb	0	; select bank0
  7098  0582  00B8               	movwf	___ftsub@f1
  7099  0583  0021               	movlb	1	; select bank1
  7100  0584  0821               	movf	(ftoa@f+1)^(0+128),w
  7101  0585  0020               	movlb	0	; select bank0
  7102  0586  00B9               	movwf	___ftsub@f1+1
  7103  0587  0021               	movlb	1	; select bank1
  7104  0588  0822               	movf	(ftoa@f+2)^(0+128),w
  7105  0589  0020               	movlb	0	; select bank0
  7106  058A  00BA               	movwf	___ftsub@f1+2
  7107  058B  3189  2103  3185   	fcall	___ftsub
  7108  058E  0020               	movlb	0	; select bank0
  7109  058F  0835               	movf	?___ftsub,w
  7110  0590  0021               	movlb	1	; select bank1
  7111  0591  00A0               	movwf	ftoa@f^(0+128)
  7112  0592  0020               	movlb	0	; select bank0
  7113  0593  0836               	movf	?___ftsub+1,w
  7114  0594  0021               	movlb	1	; select bank1
  7115  0595  00A1               	movwf	(ftoa@f+1)^(0+128)
  7116  0596  0020               	movlb	0	; select bank0
  7117  0597  0837               	movf	?___ftsub+2,w
  7118  0598  0021               	movlb	1	; select bank1
  7119  0599  00A2               	movwf	(ftoa@f+2)^(0+128)
  7120  059A  0820               	movf	ftoa@f^(0+128),w
  7121  059B  0020               	movlb	0	; select bank0
  7122  059C  00CE               	movwf	___ftmul@f2
  7123  059D  0021               	movlb	1	; select bank1
  7124  059E  0821               	movf	(ftoa@f+1)^(0+128),w
  7125  059F  0020               	movlb	0	; select bank0
  7126  05A0  00CF               	movwf	___ftmul@f2+1
  7127  05A1  0021               	movlb	1	; select bank1
  7128  05A2  0822               	movf	(ftoa@f+2)^(0+128),w
  7129  05A3  0020               	movlb	0	; select bank0
  7130  05A4  00D0               	movwf	___ftmul@f2+2
  7131  05A5  3024               	movlw	36
  7132  05A6  00CB               	movwf	___ftmul@f1
  7133  05A7  3074               	movlw	116
  7134  05A8  00CC               	movwf	___ftmul@f1+1
  7135  05A9  3049               	movlw	73
  7136  05AA  00CD               	movwf	___ftmul@f1+2
  7137  05AB  3185  25F3  3185   	fcall	___ftmul
  7138  05AE  0020               	movlb	0	; select bank0
  7139  05AF  084B               	movf	?___ftmul,w
  7140  05B0  00D7               	movwf	___fttol@f1
  7141  05B1  084C               	movf	?___ftmul+1,w
  7142  05B2  00D8               	movwf	___fttol@f1+1
  7143  05B3  084D               	movf	?___ftmul+2,w
  7144  05B4  00D9               	movwf	___fttol@f1+2
  7145  05B5  318E  2645  3185   	fcall	___fttol
  7146  05B8  0020               	movlb	0	; select bank0
  7147  05B9  085A               	movf	?___fttol+3,w
  7148  05BA  0021               	movlb	1	; select bank1
  7149  05BB  00A7               	movwf	(ftoa@rem+3)^(0+128)
  7150  05BC  0020               	movlb	0	; select bank0
  7151  05BD  0859               	movf	?___fttol+2,w
  7152  05BE  0021               	movlb	1	; select bank1
  7153  05BF  00A6               	movwf	(ftoa@rem+2)^(0+128)
  7154  05C0  0020               	movlb	0	; select bank0
  7155  05C1  0858               	movf	?___fttol+1,w
  7156  05C2  0021               	movlb	1	; select bank1
  7157  05C3  00A5               	movwf	(ftoa@rem+1)^(0+128)
  7158  05C4  0020               	movlb	0	; select bank0
  7159  05C5  0857               	movf	?___fttol,w
  7160  05C6  0021               	movlb	1	; select bank1
  7161  05C7  00A4               	movwf	ftoa@rem^(0+128)
  7162  05C8  3029               	movlw	low (STR_8| (0+32768))
  7163  05C9  0020               	movlb	0	; select bank0
  7164  05CA  00BB               	movwf	sprintf@f
  7165  05CB  3090               	movlw	high (STR_8| (0+32768))
  7166  05CC  00BC               	movwf	sprintf@f+1
  7167  05CD  0021               	movlb	1	; select bank1
  7168  05CE  082B               	movf	(ftoa@l+3)^(0+128),w
  7169  05CF  0020               	movlb	0	; select bank0
  7170  05D0  00C0               	movwf	?_sprintf+5
  7171  05D1  0021               	movlb	1	; select bank1
  7172  05D2  082A               	movf	(ftoa@l+2)^(0+128),w
  7173  05D3  0020               	movlb	0	; select bank0
  7174  05D4  00BF               	movwf	?_sprintf+4
  7175  05D5  0021               	movlb	1	; select bank1
  7176  05D6  0829               	movf	(ftoa@l+1)^(0+128),w
  7177  05D7  0020               	movlb	0	; select bank0
  7178  05D8  00BE               	movwf	?_sprintf+3
  7179  05D9  0021               	movlb	1	; select bank1
  7180  05DA  0828               	movf	ftoa@l^(0+128),w
  7181  05DB  0020               	movlb	0	; select bank0
  7182  05DC  00BD               	movwf	?_sprintf+2
  7183  05DD  0021               	movlb	1	; select bank1
  7184  05DE  0827               	movf	(ftoa@rem+3)^(0+128),w
  7185  05DF  0020               	movlb	0	; select bank0
  7186  05E0  00C4               	movwf	?_sprintf+9
  7187  05E1  0021               	movlb	1	; select bank1
  7188  05E2  0826               	movf	(ftoa@rem+2)^(0+128),w
  7189  05E3  0020               	movlb	0	; select bank0
  7190  05E4  00C3               	movwf	?_sprintf+8
  7191  05E5  0021               	movlb	1	; select bank1
  7192  05E6  0825               	movf	(ftoa@rem+1)^(0+128),w
  7193  05E7  0020               	movlb	0	; select bank0
  7194  05E8  00C2               	movwf	?_sprintf+7
  7195  05E9  0021               	movlb	1	; select bank1
  7196  05EA  0824               	movf	ftoa@rem^(0+128),w
  7197  05EB  0020               	movlb	0	; select bank0
  7198  05EC  00C1               	movwf	?_sprintf+6
  7199  05ED  0021               	movlb	1	; select bank1
  7200  05EE  082C               	movf	ftoa@cp^(0+128),w
  7201  05EF  3180  2055         	fcall	_sprintf
  7202  05F1  303C               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  7203  05F2  0008               	return
  7204  05F3                     __end_of_ftoa:	
  7205                           
  7206                           	psect	text28
  7207  0055                     __ptext28:	
  7208 ;; *************** function _sprintf *****************
  7209 ;; Defined at:
  7210 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;  sp              1    wreg     PTR unsigned char 
  7213 ;;		 -> ftoa@buf(17), 
  7214 ;;  f               2   27[BANK0 ] PTR const unsigned char 
  7215 ;;		 -> STR_8(11), 
  7216 ;; Auto vars:     Size  Location     Type
  7217 ;;  sp              1   47[BANK0 ] PTR unsigned char 
  7218 ;;		 -> ftoa@buf(17), 
  7219 ;;  val             4   43[BANK0 ] unsigned long 
  7220 ;;  tmpval          4    0        struct .
  7221 ;;  prec            2   50[BANK0 ] int 
  7222 ;;  width           2   48[BANK0 ] int 
  7223 ;;  cp              2    0        PTR const unsigned char 
  7224 ;;  len             2    0        unsigned int 
  7225 ;;  c               1   52[BANK0 ] unsigned char 
  7226 ;;  ap              1   42[BANK0 ] PTR void [1]
  7227 ;;		 -> ?_sprintf(2), 
  7228 ;;  flag            1   41[BANK0 ] unsigned char 
  7229 ;; Return value:  Size  Location     Type
  7230 ;;                  2   27[BANK0 ] int 
  7231 ;; Registers used:
  7232 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  7233 ;; Tracked objects:
  7234 ;;		On entry : 0/0
  7235 ;;		On exit  : 0/0
  7236 ;;		Unchanged: 0/0
  7237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7238 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7239 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7240 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7241 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7242 ;;Total ram usage:       26 bytes
  7243 ;; Hardware stack levels used:    1
  7244 ;; Hardware stack levels required when called:    8
  7245 ;; This function calls:
  7246 ;;		___lldiv
  7247 ;;		___llmod
  7248 ;;		___wmul
  7249 ;;		_isdigit
  7250 ;; This function is called by:
  7251 ;;		_ftoa
  7252 ;; This function uses a non-reentrant model
  7253 ;;
  7254                           
  7255                           
  7256                           ;psect for function _sprintf
  7257  0055                     _sprintf:	
  7258                           
  7259                           ;incstack = 0
  7260                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  7261                           ;sprintf@sp stored from wreg
  7262  0055  0020               	movlb	0	; select bank0
  7263  0056  00CF               	movwf	sprintf@sp
  7264                           
  7265                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  7266  0057  303D               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  7267  0058  00FF               	movwf	127
  7268  0059  087F               	movf	127,w
  7269  005A  00CA               	movwf	sprintf@ap
  7270  005B                     l4037:	
  7271                           ;doprnt.c: 548: while((c = *f++)) {
  7272                           
  7273  005B  083C               	movf	sprintf@f+1,w
  7274  005C  00FF               	movwf	127
  7275  005D  083B               	movf	sprintf@f,w
  7276  005E  00FE               	movwf	126
  7277  005F  0ABB               	incf	sprintf@f,f
  7278  0060  1903               	skipnz
  7279  0061  0ABC               	incf	sprintf@f+1,f
  7280  0062  087E               	movf	126,w
  7281  0063  0084               	movwf	4
  7282  0064  087F               	movf	127,w
  7283  0065  0085               	movwf	5
  7284  0066  0800               	movf	0,w	;code access
  7285  0067  00FF               	movwf	127
  7286  0068  087F               	movf	127,w
  7287  0069  00D4               	movwf	sprintf@c
  7288  006A  0854               	movf	sprintf@c,w
  7289  006B  1903               	btfsc	3,2
  7290  006C  2A1C               	goto	l4039
  7291                           
  7292                           ;doprnt.c: 550: if(c != '%')
  7293  006D  3025               	movlw	37
  7294  006E  0654               	xorwf	sprintf@c,w
  7295  006F  1903               	btfsc	3,2
  7296  0070  287E               	goto	l3945
  7297                           
  7298                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  7299  0071  0854               	movf	sprintf@c,w
  7300  0072  00FF               	movwf	127
  7301  0073  084F               	movf	sprintf@sp,w
  7302  0074  0084               	movwf	4
  7303  0075  3001               	movlw	1	; select bank2/3
  7304  0076  0085               	movwf	5
  7305  0077  087F               	movf	127,w
  7306  0078  0080               	movwf	0
  7307  0079  3001               	movlw	1
  7308  007A  00FF               	movwf	127
  7309  007B  087F               	movf	127,w
  7310  007C  07CF               	addwf	sprintf@sp,f
  7311                           
  7312                           ;doprnt.c: 554: continue;
  7313  007D  285B               	goto	l4037
  7314  007E                     l3945:	
  7315                           
  7316                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  7317  007E  01D0               	clrf	sprintf@width
  7318  007F  01D1               	clrf	sprintf@width+1
  7319                           
  7320                           ;doprnt.c: 560: flag = 0;
  7321  0080  01C9               	clrf	sprintf@flag
  7322                           
  7323                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  7324  0081  083B               	movf	sprintf@f,w
  7325  0082  0084               	movwf	4
  7326  0083  083C               	movf	sprintf@f+1,w
  7327  0084  0085               	movwf	5
  7328  0085  0800               	movf	0,w	;code access
  7329  0086  3188  205C  3180   	fcall	_isdigit
  7330  0089  1C03               	btfss	3,0
  7331  008A  28BC               	goto	l3959
  7332                           
  7333                           ;doprnt.c: 610: width = 0;
  7334  008B  0020               	movlb	0	; select bank0
  7335  008C  01D0               	clrf	sprintf@width
  7336  008D  01D1               	clrf	sprintf@width+1
  7337  008E                     l3951:	
  7338                           ;doprnt.c: 611: do {
  7339                           
  7340                           
  7341                           ;doprnt.c: 612: width *= 10;
  7342  008E  300A               	movlw	10
  7343  008F  00F0               	movwf	___wmul@multiplier
  7344  0090  3000               	movlw	0
  7345  0091  00F1               	movwf	___wmul@multiplier+1
  7346  0092  0020               	movlb	0	; select bank0
  7347  0093  0851               	movf	sprintf@width+1,w
  7348  0094  00F3               	movwf	___wmul@multiplicand+1
  7349  0095  0850               	movf	sprintf@width,w
  7350  0096  00F2               	movwf	___wmul@multiplicand
  7351  0097  3189  2121  3180   	fcall	___wmul
  7352  009A  0871               	movf	?___wmul+1,w
  7353  009B  0020               	movlb	0	; select bank0
  7354  009C  00D1               	movwf	sprintf@width+1
  7355  009D  0870               	movf	?___wmul,w
  7356  009E  00D0               	movwf	sprintf@width
  7357                           
  7358                           ;doprnt.c: 613: width += *f++ - '0';
  7359  009F  083B               	movf	sprintf@f,w
  7360  00A0  0084               	movwf	4
  7361  00A1  083C               	movf	sprintf@f+1,w
  7362  00A2  0085               	movwf	5
  7363  00A3  0800               	movf	0,w	;code access
  7364  00A4  3ED0               	addlw	208
  7365  00A5  00FE               	movwf	126
  7366  00A6  30FF               	movlw	255
  7367  00A7  1803               	skipnc
  7368  00A8  3000               	movlw	0
  7369  00A9  00FF               	movwf	127
  7370  00AA  087E               	movf	126,w
  7371  00AB  07D0               	addwf	sprintf@width,f
  7372  00AC  087F               	movf	127,w
  7373  00AD  3DD1               	addwfc	sprintf@width+1,f
  7374  00AE  3001               	movlw	1
  7375  00AF  07BB               	addwf	sprintf@f,f
  7376  00B0  3000               	movlw	0
  7377  00B1  3DBC               	addwfc	sprintf@f+1,f
  7378                           
  7379                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  7380  00B2  083B               	movf	sprintf@f,w
  7381  00B3  0084               	movwf	4
  7382  00B4  083C               	movf	sprintf@f+1,w
  7383  00B5  0085               	movwf	5
  7384  00B6  0800               	movf	0,w	;code access
  7385  00B7  3188  205C  3180   	fcall	_isdigit
  7386  00BA  1803               	btfsc	3,0
  7387  00BB  288E               	goto	l3951
  7388  00BC                     l3959:	
  7389                           
  7390                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  7391  00BC  0020               	movlb	0	; select bank0
  7392  00BD  083B               	movf	sprintf@f,w
  7393  00BE  0084               	movwf	4
  7394  00BF  083C               	movf	sprintf@f+1,w
  7395  00C0  0085               	movwf	5
  7396  00C1  0012               	moviw fsr0++
  7397  00C2  3A2E               	xorlw	46
  7398  00C3  1D03               	btfss	3,2
  7399  00C4  28FA               	goto	l3971
  7400                           
  7401                           ;doprnt.c: 625: f++;
  7402  00C5  3001               	movlw	1
  7403  00C6  07BB               	addwf	sprintf@f,f
  7404  00C7  3000               	movlw	0
  7405  00C8  3DBC               	addwfc	sprintf@f+1,f
  7406                           
  7407                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  7408  00C9  01D2               	clrf	sprintf@prec
  7409  00CA  01D3               	clrf	sprintf@prec+1
  7410  00CB                     l3969:	
  7411                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  7412                           
  7413  00CB  083B               	movf	sprintf@f,w
  7414  00CC  0084               	movwf	4
  7415  00CD  083C               	movf	sprintf@f+1,w
  7416  00CE  0085               	movwf	5
  7417  00CF  0800               	movf	0,w	;code access
  7418  00D0  3188  205C  3180   	fcall	_isdigit
  7419  00D3  1C03               	btfss	3,0
  7420  00D4  2905               	goto	l3977
  7421                           
  7422                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  7423  00D5  0020               	movlb	0	; select bank0
  7424  00D6  083B               	movf	sprintf@f,w
  7425  00D7  0084               	movwf	4
  7426  00D8  083C               	movf	sprintf@f+1,w
  7427  00D9  0085               	movwf	5
  7428  00DA  0800               	movf	0,w	;code access
  7429  00DB  00FE               	movwf	126
  7430  00DC  01FF               	clrf	127
  7431  00DD  0853               	movf	sprintf@prec+1,w
  7432  00DE  00F1               	movwf	___wmul@multiplier+1
  7433  00DF  0852               	movf	sprintf@prec,w
  7434  00E0  00F0               	movwf	___wmul@multiplier
  7435  00E1  300A               	movlw	10
  7436  00E2  00F2               	movwf	___wmul@multiplicand
  7437  00E3  3000               	movlw	0
  7438  00E4  00F3               	movwf	___wmul@multiplicand+1
  7439  00E5  3189  2121  3180   	fcall	___wmul
  7440  00E8  087E               	movf	126,w
  7441  00E9  0770               	addwf	?___wmul,w
  7442  00EA  00FC               	movwf	124
  7443  00EB  087F               	movf	127,w
  7444  00EC  3D71               	addwfc	?___wmul+1,w
  7445  00ED  00FD               	movwf	125
  7446  00EE  087C               	movf	124,w
  7447  00EF  3ED0               	addlw	208
  7448  00F0  0020               	movlb	0	; select bank0
  7449  00F1  00D2               	movwf	sprintf@prec
  7450  00F2  30FF               	movlw	255
  7451  00F3  3D7D               	addwfc	125,w
  7452  00F4  00D3               	movwf	sprintf@prec+1
  7453  00F5  3001               	movlw	1
  7454  00F6  07BB               	addwf	sprintf@f,f
  7455  00F7  3000               	movlw	0
  7456  00F8  3DBC               	addwfc	sprintf@f+1,f
  7457  00F9  28CB               	goto	l3969
  7458  00FA                     l3971:	
  7459                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  7460                           
  7461                           
  7462                           ;doprnt.c: 645: prec = 0;
  7463  00FA  0020               	movlb	0	; select bank0
  7464  00FB  01D2               	clrf	sprintf@prec
  7465  00FC  01D3               	clrf	sprintf@prec+1
  7466                           
  7467                           ;doprnt.c: 654: switch(c = *f++) {
  7468                           
  7469                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  7470  00FD  2905               	goto	l3977
  7471  00FE                     l517:	
  7472                           ;doprnt.c: 660: case 'l':
  7473                           
  7474                           ;doprnt.c: 657: goto alldone;
  7475                           
  7476                           ;doprnt.c: 656: case 0:
  7477                           
  7478                           
  7479                           ;doprnt.c: 662: flag |= 0x10;
  7480  00FE  1649               	bsf	sprintf@flag,4
  7481                           
  7482                           ;doprnt.c: 663: goto loop;
  7483  00FF  2905               	goto	l3977
  7484  0100                     l3973:	
  7485                           ;doprnt.c: 836: case 'u':
  7486                           
  7487                           ;doprnt.c: 832: continue;
  7488                           
  7489                           ;doprnt.c: 821: default:
  7490                           
  7491                           
  7492                           ;doprnt.c: 837: flag |= 0xC0;
  7493  0100  30C0               	movlw	192
  7494  0101  00FF               	movwf	127
  7495  0102  087F               	movf	127,w
  7496  0103  04C9               	iorwf	sprintf@flag,f
  7497                           
  7498                           ;doprnt.c: 841: }
  7499                           
  7500                           ;doprnt.c: 838: break;
  7501  0104  291D               	goto	l520
  7502  0105                     l3977:	
  7503  0105  0020               	movlb	0	; select bank0
  7504  0106  083C               	movf	sprintf@f+1,w
  7505  0107  00FF               	movwf	127
  7506  0108  083B               	movf	sprintf@f,w
  7507  0109  00FE               	movwf	126
  7508  010A  0ABB               	incf	sprintf@f,f
  7509  010B  1903               	skipnz
  7510  010C  0ABC               	incf	sprintf@f+1,f
  7511  010D  087E               	movf	126,w
  7512  010E  0084               	movwf	4
  7513  010F  087F               	movf	127,w
  7514  0110  0085               	movwf	5
  7515  0111  0800               	movf	0,w	;code access
  7516  0112  00D4               	movwf	sprintf@c
  7517                           
  7518                           ; Switch size 1, requested type "space"
  7519                           ; Number of cases is 3, Range of values is 0 to 117
  7520                           ; switch strategies available:
  7521                           ; Name         Instructions Cycles
  7522                           ; simple_byte           10     6 (average)
  7523                           ; direct_byte          242     6 (fixed)
  7524                           ; jumptable            260     6 (fixed)
  7525                           ;	Chosen strategy is simple_byte
  7526  0113  3A00               	xorlw	0	; case 0
  7527  0114  1903               	skipnz
  7528  0115  2A1C               	goto	l4039
  7529  0116  3A6C               	xorlw	108	; case 108
  7530  0117  1903               	skipnz
  7531  0118  28FE               	goto	l517
  7532  0119  3A19               	xorlw	25	; case 117
  7533  011A  1903               	skipnz
  7534  011B  2900               	goto	l3973
  7535  011C  285B               	goto	l4037
  7536  011D                     l520:	
  7537                           
  7538                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  7539  011D  1E49               	btfss	sprintf@flag,4
  7540  011E  292C               	goto	l3983
  7541                           
  7542                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7543  011F  084A               	movf	sprintf@ap,w
  7544  0120  0084               	movwf	4
  7545  0121  0185               	clrf	5
  7546  0122  3F00               	moviw [0]fsr0
  7547  0123  00CB               	movwf	sprintf@val
  7548  0124  3F01               	moviw [1]fsr0
  7549  0125  00CC               	movwf	sprintf@val+1
  7550  0126  3F02               	moviw [2]fsr0
  7551  0127  00CD               	movwf	sprintf@val+2
  7552  0128  3F03               	moviw [3]fsr0
  7553  0129  00CE               	movwf	sprintf@val+3
  7554  012A  3004               	movlw	4
  7555  012B  293A               	goto	L1
  7556  012C                     l3983:	
  7557                           
  7558                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  7559  012C  084A               	movf	sprintf@ap,w
  7560  012D  0084               	movwf	4
  7561  012E  0185               	clrf	5
  7562  012F  3F00               	moviw [0]fsr0
  7563  0130  00FE               	movwf	126
  7564  0131  3F01               	moviw [1]fsr0
  7565  0132  00FF               	movwf	127
  7566  0133  087E               	movf	126,w
  7567  0134  00CB               	movwf	sprintf@val
  7568  0135  087F               	movf	127,w
  7569  0136  00CC               	movwf	sprintf@val+1
  7570  0137  01CD               	clrf	sprintf@val+2
  7571  0138  01CE               	clrf	sprintf@val+3
  7572  0139  3002               	movlw	2
  7573  013A                     L1:	
  7574  013A  00FF               	movwf	127
  7575  013B  087F               	movf	127,w
  7576  013C  07CA               	addwf	sprintf@ap,f
  7577                           
  7578                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  7579  013D  0852               	movf	sprintf@prec,w
  7580  013E  0453               	iorwf	sprintf@prec+1,w
  7581  013F  1D03               	btfss	3,2
  7582  0140  294B               	goto	l3993
  7583  0141  084E               	movf	sprintf@val+3,w
  7584  0142  044D               	iorwf	sprintf@val+2,w
  7585  0143  044C               	iorwf	sprintf@val+1,w
  7586  0144  044B               	iorwf	sprintf@val,w
  7587  0145  1D03               	skipz
  7588  0146  294B               	goto	l3993
  7589                           
  7590                           ;doprnt.c: 1310: prec++;
  7591  0147  3001               	movlw	1
  7592  0148  07D2               	addwf	sprintf@prec,f
  7593  0149  3000               	movlw	0
  7594  014A  3DD3               	addwfc	sprintf@prec+1,f
  7595  014B                     l3993:	
  7596                           
  7597                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7598  014B  01D4               	clrf	sprintf@c
  7599  014C  0AD4               	incf	sprintf@c,f
  7600  014D  300A               	movlw	10
  7601  014E  0654               	xorwf	sprintf@c,w
  7602  014F  1903               	btfsc	3,2
  7603  0150  297E               	goto	l4007
  7604  0151                     l3999:	
  7605                           
  7606                           ;doprnt.c: 1325: if(val < dpowers[c])
  7607  0151  0854               	movf	sprintf@c,w
  7608  0152  00FE               	movwf	126
  7609  0153  01FF               	clrf	127
  7610  0154  35FE               	lslf	126,f
  7611  0155  0DFF               	rlf	127,f
  7612  0156  35FE               	lslf	126,f
  7613  0157  0DFF               	rlf	127,f
  7614  0158  3000               	movlw	low (_dpowers| (0+32768))
  7615  0159  077E               	addwf	126,w
  7616  015A  0084               	movwf	4
  7617  015B  3090               	movlw	high (_dpowers| (0+32768))
  7618  015C  3D7F               	addwfc	127,w
  7619  015D  0085               	movwf	5
  7620  015E  3F00               	moviw [0]fsr0
  7621  015F  00C5               	movwf	??_sprintf
  7622  0160  3F01               	moviw [1]fsr0
  7623  0161  00C6               	movwf	??_sprintf+1
  7624  0162  3F02               	moviw [2]fsr0
  7625  0163  00C7               	movwf	??_sprintf+2
  7626  0164  3F03               	moviw [3]fsr0
  7627  0165  00C8               	movwf	??_sprintf+3
  7628  0166  0848               	movf	??_sprintf+3,w
  7629  0167  024E               	subwf	sprintf@val+3,w
  7630  0168  1D03               	skipz
  7631  0169  2974               	goto	u4385
  7632  016A  0847               	movf	??_sprintf+2,w
  7633  016B  024D               	subwf	sprintf@val+2,w
  7634  016C  1D03               	skipz
  7635  016D  2974               	goto	u4385
  7636  016E  0846               	movf	??_sprintf+1,w
  7637  016F  024C               	subwf	sprintf@val+1,w
  7638  0170  1D03               	skipz
  7639  0171  2974               	goto	u4385
  7640  0172  0845               	movf	??_sprintf,w
  7641  0173  024B               	subwf	sprintf@val,w
  7642  0174                     u4385:	
  7643  0174  1C03               	btfss	3,0
  7644  0175  297E               	goto	l4007
  7645                           
  7646                           ;doprnt.c: 1326: break;
  7647  0176  3001               	movlw	1
  7648  0177  00FF               	movwf	127
  7649  0178  087F               	movf	127,w
  7650  0179  07D4               	addwf	sprintf@c,f
  7651  017A  300A               	movlw	10
  7652  017B  0654               	xorwf	sprintf@c,w
  7653  017C  1D03               	btfss	3,2
  7654  017D  2951               	goto	l3999
  7655  017E                     l4007:	
  7656                           
  7657                           ;doprnt.c: 1358: if(c < prec)
  7658  017E  0853               	movf	sprintf@prec+1,w
  7659  017F  3A80               	xorlw	128
  7660  0180  3C80               	sublw	128
  7661  0181  1D03               	skipz
  7662  0182  2985               	goto	u4405
  7663  0183  0852               	movf	sprintf@prec,w
  7664  0184  0254               	subwf	sprintf@c,w
  7665  0185                     u4405:	
  7666  0185  1803               	skipnc
  7667  0186  298D               	goto	l4011
  7668                           
  7669                           ;doprnt.c: 1359: c = prec;
  7670  0187  0020               	movlb	0	; select bank0
  7671  0188  0852               	movf	sprintf@prec,w
  7672  0189  00FF               	movwf	127
  7673  018A  087F               	movf	127,w
  7674  018B  00D4               	movwf	sprintf@c
  7675  018C  29A1               	goto	l4015
  7676  018D                     l4011:	
  7677                           
  7678                           ;doprnt.c: 1360: else if(prec < c)
  7679  018D  0020               	movlb	0	; select bank0
  7680  018E  0853               	movf	sprintf@prec+1,w
  7681  018F  3A80               	xorlw	128
  7682  0190  00C5               	movwf	??_sprintf
  7683  0191  3080               	movlw	128
  7684  0192  0245               	subwf	??_sprintf,w
  7685  0193  1D03               	skipz
  7686  0194  2997               	goto	u4415
  7687  0195  0854               	movf	sprintf@c,w
  7688  0196  0252               	subwf	sprintf@prec,w
  7689  0197                     u4415:	
  7690  0197  1803               	skipnc
  7691  0198  29A1               	goto	l4015
  7692                           
  7693                           ;doprnt.c: 1361: prec = c;
  7694  0199  0020               	movlb	0	; select bank0
  7695  019A  0854               	movf	sprintf@c,w
  7696  019B  00FE               	movwf	126
  7697  019C  01FF               	clrf	127
  7698  019D  087E               	movf	126,w
  7699  019E  00D2               	movwf	sprintf@prec
  7700  019F  087F               	movf	127,w
  7701  01A0  00D3               	movwf	sprintf@prec+1
  7702  01A1                     l4015:	
  7703                           
  7704                           ;doprnt.c: 1400: if(width > c)
  7705  01A1  0020               	movlb	0	; select bank0
  7706  01A2  0851               	movf	sprintf@width+1,w
  7707  01A3  3A80               	xorlw	128
  7708  01A4  3C80               	sublw	128
  7709  01A5  1D03               	skipz
  7710  01A6  29A9               	goto	u4425
  7711  01A7  0850               	movf	sprintf@width,w
  7712  01A8  0254               	subwf	sprintf@c,w
  7713  01A9                     u4425:	
  7714  01A9  1803               	skipnc
  7715  01AA  29B4               	goto	l4019
  7716                           
  7717                           ;doprnt.c: 1401: width -= c;
  7718  01AB  0020               	movlb	0	; select bank0
  7719  01AC  0854               	movf	sprintf@c,w
  7720  01AD  00FE               	movwf	126
  7721  01AE  01FF               	clrf	127
  7722  01AF  087E               	movf	126,w
  7723  01B0  02D0               	subwf	sprintf@width,f
  7724  01B1  087F               	movf	127,w
  7725  01B2  3BD1               	subwfb	sprintf@width+1,f
  7726  01B3  29B7               	goto	l4021
  7727  01B4                     l4019:	
  7728                           
  7729                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  7730  01B4  0020               	movlb	0	; select bank0
  7731  01B5  01D0               	clrf	sprintf@width
  7732  01B6  01D1               	clrf	sprintf@width+1
  7733  01B7                     l4021:	
  7734                           
  7735                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  7736  01B7  0850               	movf	sprintf@width,w
  7737  01B8  0451               	iorwf	sprintf@width+1,w
  7738  01B9  1903               	btfsc	3,2
  7739  01BA  2A11               	goto	l4035
  7740                           
  7741                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  7742                           
  7743                           ;doprnt.c: 1448: do
  7744  01BB  3020               	movlw	32
  7745  01BC  00FF               	movwf	127
  7746  01BD  084F               	movf	sprintf@sp,w
  7747  01BE  0084               	movwf	4
  7748  01BF  3001               	movlw	1	; select bank2/3
  7749  01C0  0085               	movwf	5
  7750  01C1  087F               	movf	127,w
  7751  01C2  0080               	movwf	0
  7752  01C3  3001               	movlw	1
  7753  01C4  00FF               	movwf	127
  7754  01C5  087F               	movf	127,w
  7755  01C6  07CF               	addwf	sprintf@sp,f
  7756                           
  7757                           ;doprnt.c: 1450: while(--width);
  7758  01C7  30FF               	movlw	255
  7759  01C8  07D0               	addwf	sprintf@width,f
  7760  01C9  30FF               	movlw	255
  7761  01CA  3DD1               	addwfc	sprintf@width+1,f
  7762  01CB  29B7               	goto	l4021
  7763  01CC                     l4029:	
  7764                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  7765                           
  7766                           
  7767                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  7768  01CC  3000               	movlw	0
  7769  01CD  00B6               	movwf	___llmod@divisor+3
  7770  01CE  3000               	movlw	0
  7771  01CF  00B5               	movwf	___llmod@divisor+2
  7772  01D0  3000               	movlw	0
  7773  01D1  00B4               	movwf	___llmod@divisor+1
  7774  01D2  300A               	movlw	10
  7775  01D3  00B3               	movwf	___llmod@divisor
  7776  01D4  0853               	movf	sprintf@prec+1,w
  7777  01D5  0085               	movwf	5
  7778  01D6  0852               	movf	sprintf@prec,w
  7779  01D7  0084               	movwf	4
  7780  01D8  3584               	lslf	4,f
  7781  01D9  0D85               	rlf	5,f
  7782  01DA  3584               	lslf	4,f
  7783  01DB  0D85               	rlf	5,f
  7784  01DC  3000               	movlw	low (_dpowers| (0+32768))
  7785  01DD  0784               	addwf	4,f
  7786  01DE  3090               	movlw	high (_dpowers| (0+32768))
  7787  01DF  3D85               	addwfc	5,f
  7788  01E0  3F00               	moviw [0]fsr0
  7789  01E1  00A6               	movwf	___lldiv@divisor
  7790  01E2  3F01               	moviw [1]fsr0
  7791  01E3  00A7               	movwf	___lldiv@divisor+1
  7792  01E4  3F02               	moviw [2]fsr0
  7793  01E5  00A8               	movwf	___lldiv@divisor+2
  7794  01E6  3F03               	moviw [3]fsr0
  7795  01E7  00A9               	movwf	___lldiv@divisor+3
  7796  01E8  084E               	movf	sprintf@val+3,w
  7797  01E9  00AD               	movwf	___lldiv@dividend+3
  7798  01EA  084D               	movf	sprintf@val+2,w
  7799  01EB  00AC               	movwf	___lldiv@dividend+2
  7800  01EC  084C               	movf	sprintf@val+1,w
  7801  01ED  00AB               	movwf	___lldiv@dividend+1
  7802  01EE  084B               	movf	sprintf@val,w
  7803  01EF  00AA               	movwf	___lldiv@dividend
  7804  01F0  318D  2507  3180   	fcall	___lldiv
  7805  01F3  0020               	movlb	0	; select bank0
  7806  01F4  0829               	movf	?___lldiv+3,w
  7807  01F5  00BA               	movwf	___llmod@dividend+3
  7808  01F6  0828               	movf	?___lldiv+2,w
  7809  01F7  00B9               	movwf	___llmod@dividend+2
  7810  01F8  0827               	movf	?___lldiv+1,w
  7811  01F9  00B8               	movwf	___llmod@dividend+1
  7812  01FA  0826               	movf	?___lldiv,w
  7813  01FB  00B7               	movwf	___llmod@dividend
  7814  01FC  318B  23B1  3180   	fcall	___llmod
  7815  01FF  0020               	movlb	0	; select bank0
  7816  0200  0833               	movf	?___llmod,w
  7817  0201  3E30               	addlw	48
  7818  0202  00FF               	movwf	127
  7819  0203  087F               	movf	127,w
  7820  0204  00D4               	movwf	sprintf@c
  7821                           
  7822                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7823  0205  0854               	movf	sprintf@c,w
  7824  0206  00FF               	movwf	127
  7825  0207  084F               	movf	sprintf@sp,w
  7826  0208  0084               	movwf	4
  7827  0209  3001               	movlw	1	; select bank2/3
  7828  020A  0085               	movwf	5
  7829  020B  087F               	movf	127,w
  7830  020C  0080               	movwf	0
  7831  020D  3001               	movlw	1
  7832  020E  00FF               	movwf	127
  7833  020F  087F               	movf	127,w
  7834  0210  07CF               	addwf	sprintf@sp,f
  7835  0211                     l4035:	
  7836  0211  30FF               	movlw	255
  7837  0212  07D2               	addwf	sprintf@prec,f
  7838  0213  30FF               	movlw	255
  7839  0214  3DD3               	addwfc	sprintf@prec+1,f
  7840  0215  0A52               	incf	sprintf@prec,w
  7841  0216  1D03               	skipz
  7842  0217  29CC               	goto	l4029
  7843  0218  0A53               	incf	sprintf@prec+1,w
  7844  0219  1903               	btfsc	3,2
  7845  021A  285B               	goto	l4037
  7846  021B  29CC               	goto	l4029
  7847  021C                     l4039:	
  7848                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7849                           
  7850                           
  7851                           ;doprnt.c: 1557: *sp = 0;
  7852  021C  084F               	movf	sprintf@sp,w
  7853  021D  0084               	movwf	4
  7854  021E  3001               	movlw	1	; select bank2/3
  7855  021F  0085               	movwf	5
  7856  0220  0180               	clrf	0
  7857  0221  0008               	return
  7858  0222                     __end_of_sprintf:	
  7859                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7860                           
  7861                           
  7862                           	psect	text29
  7863  085C                     __ptext29:	
  7864 ;; *************** function _isdigit *****************
  7865 ;; Defined at:
  7866 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7867 ;; Parameters:    Size  Location     Type
  7868 ;;  c               1    wreg     unsigned char 
  7869 ;; Auto vars:     Size  Location     Type
  7870 ;;  c               1    1[COMMON] unsigned char 
  7871 ;; Return value:  Size  Location     Type
  7872 ;;		None               void
  7873 ;; Registers used:
  7874 ;;		wreg, status,2, status,0
  7875 ;; Tracked objects:
  7876 ;;		On entry : 0/0
  7877 ;;		On exit  : 0/0
  7878 ;;		Unchanged: 0/0
  7879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7881 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7883 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7884 ;;Total ram usage:        2 bytes
  7885 ;; Hardware stack levels used:    1
  7886 ;; Hardware stack levels required when called:    7
  7887 ;; This function calls:
  7888 ;;		Nothing
  7889 ;; This function is called by:
  7890 ;;		_sprintf
  7891 ;; This function uses a non-reentrant model
  7892 ;;
  7893                           
  7894                           
  7895                           ;psect for function _isdigit
  7896  085C                     _isdigit:	
  7897                           
  7898                           ;incstack = 0
  7899                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7900                           ;isdigit@c stored from wreg
  7901  085C  00F1               	movwf	isdigit@c
  7902  085D  01F0               	clrf	_isdigit$1994
  7903  085E  303A               	movlw	58
  7904  085F  0271               	subwf	isdigit@c,w
  7905  0860  1803               	skipnc
  7906  0861  2868               	goto	l3723
  7907  0862  3030               	movlw	48
  7908  0863  0271               	subwf	isdigit@c,w
  7909  0864  1C03               	skipc
  7910  0865  2868               	goto	l3723
  7911  0866  01F0               	clrf	_isdigit$1994
  7912  0867  0AF0               	incf	_isdigit$1994,f
  7913  0868                     l3723:	
  7914  0868  0C70               	rrf	_isdigit$1994,w
  7915  0869  0008               	return
  7916  086A                     __end_of_isdigit:	
  7917                           
  7918                           	psect	text30
  7919  0921                     __ptext30:	
  7920 ;; *************** function ___wmul *****************
  7921 ;; Defined at:
  7922 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7923 ;; Parameters:    Size  Location     Type
  7924 ;;  multiplier      2    0[COMMON] unsigned int 
  7925 ;;  multiplicand    2    2[COMMON] unsigned int 
  7926 ;; Auto vars:     Size  Location     Type
  7927 ;;  product         2    6[BANK0 ] unsigned int 
  7928 ;; Return value:  Size  Location     Type
  7929 ;;                  2    0[COMMON] unsigned int 
  7930 ;; Registers used:
  7931 ;;		wreg, status,2, status,0
  7932 ;; Tracked objects:
  7933 ;;		On entry : 0/0
  7934 ;;		On exit  : 0/0
  7935 ;;		Unchanged: 0/0
  7936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7937 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7938 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7940 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7941 ;;Total ram usage:        6 bytes
  7942 ;; Hardware stack levels used:    1
  7943 ;; Hardware stack levels required when called:    7
  7944 ;; This function calls:
  7945 ;;		Nothing
  7946 ;; This function is called by:
  7947 ;;		_sprintf
  7948 ;; This function uses a non-reentrant model
  7949 ;;
  7950                           
  7951                           
  7952                           ;psect for function ___wmul
  7953  0921                     ___wmul:	
  7954                           
  7955                           ;incstack = 0
  7956                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7957  0921  0020               	movlb	0	; select bank0
  7958  0922  01A6               	clrf	___wmul@product
  7959  0923  01A7               	clrf	___wmul@product+1
  7960  0924                     l3729:	
  7961  0924  1C70               	btfss	___wmul@multiplier,0
  7962  0925  292B               	goto	l543
  7963  0926  0872               	movf	___wmul@multiplicand,w
  7964  0927  0020               	movlb	0	; select bank0
  7965  0928  07A6               	addwf	___wmul@product,f
  7966  0929  0873               	movf	___wmul@multiplicand+1,w
  7967  092A  3DA7               	addwfc	___wmul@product+1,f
  7968  092B                     l543:	
  7969  092B  3001               	movlw	1
  7970  092C                     u3765:	
  7971  092C  35F2               	lslf	___wmul@multiplicand,f
  7972  092D  0DF3               	rlf	___wmul@multiplicand+1,f
  7973  092E  0B89               	decfsz	9,f
  7974  092F  292C               	goto	u3765
  7975  0930  3001               	movlw	1
  7976  0931                     u3775:	
  7977  0931  36F1               	lsrf	___wmul@multiplier+1,f
  7978  0932  0CF0               	rrf	___wmul@multiplier,f
  7979  0933  0B89               	decfsz	9,f
  7980  0934  2931               	goto	u3775
  7981  0935  0870               	movf	___wmul@multiplier,w
  7982  0936  0471               	iorwf	___wmul@multiplier+1,w
  7983  0937  1D03               	btfss	3,2
  7984  0938  2924               	goto	l3729
  7985  0939  0020               	movlb	0	; select bank0
  7986  093A  0827               	movf	___wmul@product+1,w
  7987  093B  00F1               	movwf	?___wmul+1
  7988  093C  0826               	movf	___wmul@product,w
  7989  093D  00F0               	movwf	?___wmul
  7990  093E  0008               	return
  7991  093F                     __end_of___wmul:	
  7992                           
  7993                           	psect	text31
  7994  0BB1                     __ptext31:	
  7995 ;; *************** function ___llmod *****************
  7996 ;; Defined at:
  7997 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  7998 ;; Parameters:    Size  Location     Type
  7999 ;;  divisor         4   19[BANK0 ] unsigned long 
  8000 ;;  dividend        4   23[BANK0 ] unsigned long 
  8001 ;; Auto vars:     Size  Location     Type
  8002 ;;  counter         1    0[COMMON] unsigned char 
  8003 ;; Return value:  Size  Location     Type
  8004 ;;                  4   19[BANK0 ] unsigned long 
  8005 ;; Registers used:
  8006 ;;		wreg, status,2, status,0, btemp+11
  8007 ;; Tracked objects:
  8008 ;;		On entry : 0/0
  8009 ;;		On exit  : 0/0
  8010 ;;		Unchanged: 0/0
  8011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8012 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8013 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8015 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8016 ;;Total ram usage:        9 bytes
  8017 ;; Hardware stack levels used:    1
  8018 ;; Hardware stack levels required when called:    7
  8019 ;; This function calls:
  8020 ;;		Nothing
  8021 ;; This function is called by:
  8022 ;;		_sprintf
  8023 ;; This function uses a non-reentrant model
  8024 ;;
  8025                           
  8026                           
  8027                           ;psect for function ___llmod
  8028  0BB1                     ___llmod:	
  8029                           
  8030                           ;incstack = 0
  8031                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+11]
  8032  0BB1  0020               	movlb	0	; select bank0
  8033  0BB2  0836               	movf	___llmod@divisor+3,w
  8034  0BB3  0435               	iorwf	___llmod@divisor+2,w
  8035  0BB4  0434               	iorwf	___llmod@divisor+1,w
  8036  0BB5  0433               	iorwf	___llmod@divisor,w
  8037  0BB6  1903               	skipnz
  8038  0BB7  2BEB               	goto	l3861
  8039  0BB8  01F0               	clrf	___llmod@counter
  8040  0BB9  0AF0               	incf	___llmod@counter,f
  8041  0BBA                     l3851:	
  8042  0BBA  1BB6               	btfsc	___llmod@divisor+3,7
  8043  0BBB  2BC8               	goto	l3853
  8044  0BBC  3001               	movlw	1
  8045  0BBD                     u4105:	
  8046  0BBD  35B3               	lslf	___llmod@divisor,f
  8047  0BBE  0DB4               	rlf	___llmod@divisor+1,f
  8048  0BBF  0DB5               	rlf	___llmod@divisor+2,f
  8049  0BC0  0DB6               	rlf	___llmod@divisor+3,f
  8050  0BC1  0B89               	decfsz	9,f
  8051  0BC2  2BBD               	goto	u4105
  8052  0BC3  3001               	movlw	1
  8053  0BC4  00FF               	movwf	127
  8054  0BC5  087F               	movf	127,w
  8055  0BC6  07F0               	addwf	___llmod@counter,f
  8056  0BC7  2BBA               	goto	l3851
  8057  0BC8                     l3853:	
  8058  0BC8  0836               	movf	___llmod@divisor+3,w
  8059  0BC9  023A               	subwf	___llmod@dividend+3,w
  8060  0BCA  1D03               	skipz
  8061  0BCB  2BD6               	goto	u4125
  8062  0BCC  0835               	movf	___llmod@divisor+2,w
  8063  0BCD  0239               	subwf	___llmod@dividend+2,w
  8064  0BCE  1D03               	skipz
  8065  0BCF  2BD6               	goto	u4125
  8066  0BD0  0834               	movf	___llmod@divisor+1,w
  8067  0BD1  0238               	subwf	___llmod@dividend+1,w
  8068  0BD2  1D03               	skipz
  8069  0BD3  2BD6               	goto	u4125
  8070  0BD4  0833               	movf	___llmod@divisor,w
  8071  0BD5  0237               	subwf	___llmod@dividend,w
  8072  0BD6                     u4125:	
  8073  0BD6  1C03               	skipc
  8074  0BD7  2BE0               	goto	l3857
  8075  0BD8  0833               	movf	___llmod@divisor,w
  8076  0BD9  02B7               	subwf	___llmod@dividend,f
  8077  0BDA  0834               	movf	___llmod@divisor+1,w
  8078  0BDB  3BB8               	subwfb	___llmod@dividend+1,f
  8079  0BDC  0835               	movf	___llmod@divisor+2,w
  8080  0BDD  3BB9               	subwfb	___llmod@dividend+2,f
  8081  0BDE  0836               	movf	___llmod@divisor+3,w
  8082  0BDF  3BBA               	subwfb	___llmod@dividend+3,f
  8083  0BE0                     l3857:	
  8084  0BE0  3001               	movlw	1
  8085  0BE1                     u4135:	
  8086  0BE1  36B6               	lsrf	___llmod@divisor+3,f
  8087  0BE2  0CB5               	rrf	___llmod@divisor+2,f
  8088  0BE3  0CB4               	rrf	___llmod@divisor+1,f
  8089  0BE4  0CB3               	rrf	___llmod@divisor,f
  8090  0BE5  0B89               	decfsz	9,f
  8091  0BE6  2BE1               	goto	u4135
  8092  0BE7  3001               	movlw	1
  8093  0BE8  02F0               	subwf	___llmod@counter,f
  8094  0BE9  1D03               	btfss	3,2
  8095  0BEA  2BC8               	goto	l3853
  8096  0BEB                     l3861:	
  8097  0BEB  083A               	movf	___llmod@dividend+3,w
  8098  0BEC  00B6               	movwf	?___llmod+3
  8099  0BED  0839               	movf	___llmod@dividend+2,w
  8100  0BEE  00B5               	movwf	?___llmod+2
  8101  0BEF  0838               	movf	___llmod@dividend+1,w
  8102  0BF0  00B4               	movwf	?___llmod+1
  8103  0BF1  0837               	movf	___llmod@dividend,w
  8104  0BF2  00B3               	movwf	?___llmod
  8105  0BF3  0008               	return
  8106  0BF4                     __end_of___llmod:	
  8107                           
  8108                           	psect	text32
  8109  0D07                     __ptext32:	
  8110 ;; *************** function ___lldiv *****************
  8111 ;; Defined at:
  8112 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  8113 ;; Parameters:    Size  Location     Type
  8114 ;;  divisor         4    6[BANK0 ] unsigned long 
  8115 ;;  dividend        4   10[BANK0 ] unsigned long 
  8116 ;; Auto vars:     Size  Location     Type
  8117 ;;  quotient        4   14[BANK0 ] unsigned long 
  8118 ;;  counter         1   18[BANK0 ] unsigned char 
  8119 ;; Return value:  Size  Location     Type
  8120 ;;                  4    6[BANK0 ] unsigned long 
  8121 ;; Registers used:
  8122 ;;		wreg, status,2, status,0, btemp+11
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8128 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8129 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8131 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8132 ;;Total ram usage:       13 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; Hardware stack levels required when called:    7
  8135 ;; This function calls:
  8136 ;;		Nothing
  8137 ;; This function is called by:
  8138 ;;		_sprintf
  8139 ;; This function uses a non-reentrant model
  8140 ;;
  8141                           
  8142                           
  8143                           ;psect for function ___lldiv
  8144  0D07                     ___lldiv:	
  8145                           
  8146                           ;incstack = 0
  8147                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+11]
  8148  0D07  3000               	movlw	0
  8149  0D08  0020               	movlb	0	; select bank0
  8150  0D09  00B1               	movwf	___lldiv@quotient+3
  8151  0D0A  3000               	movlw	0
  8152  0D0B  00B0               	movwf	___lldiv@quotient+2
  8153  0D0C  3000               	movlw	0
  8154  0D0D  00AF               	movwf	___lldiv@quotient+1
  8155  0D0E  3000               	movlw	0
  8156  0D0F  00AE               	movwf	___lldiv@quotient
  8157  0D10  0829               	movf	___lldiv@divisor+3,w
  8158  0D11  0428               	iorwf	___lldiv@divisor+2,w
  8159  0D12  0427               	iorwf	___lldiv@divisor+1,w
  8160  0D13  0426               	iorwf	___lldiv@divisor,w
  8161  0D14  1903               	skipnz
  8162  0D15  2D51               	goto	l3763
  8163  0D16  01B2               	clrf	___lldiv@counter
  8164  0D17  0AB2               	incf	___lldiv@counter,f
  8165  0D18                     l3749:	
  8166  0D18  1BA9               	btfsc	___lldiv@divisor+3,7
  8167  0D19  2D26               	goto	l3751
  8168  0D1A  3001               	movlw	1
  8169  0D1B                     u3805:	
  8170  0D1B  35A6               	lslf	___lldiv@divisor,f
  8171  0D1C  0DA7               	rlf	___lldiv@divisor+1,f
  8172  0D1D  0DA8               	rlf	___lldiv@divisor+2,f
  8173  0D1E  0DA9               	rlf	___lldiv@divisor+3,f
  8174  0D1F  0B89               	decfsz	9,f
  8175  0D20  2D1B               	goto	u3805
  8176  0D21  3001               	movlw	1
  8177  0D22  00FF               	movwf	127
  8178  0D23  087F               	movf	127,w
  8179  0D24  07B2               	addwf	___lldiv@counter,f
  8180  0D25  2D18               	goto	l3749
  8181  0D26                     l3751:	
  8182  0D26  3001               	movlw	1
  8183  0D27                     u3825:	
  8184  0D27  35AE               	lslf	___lldiv@quotient,f
  8185  0D28  0DAF               	rlf	___lldiv@quotient+1,f
  8186  0D29  0DB0               	rlf	___lldiv@quotient+2,f
  8187  0D2A  0DB1               	rlf	___lldiv@quotient+3,f
  8188  0D2B  0B89               	decfsz	9,f
  8189  0D2C  2D27               	goto	u3825
  8190  0D2D  0829               	movf	___lldiv@divisor+3,w
  8191  0D2E  022D               	subwf	___lldiv@dividend+3,w
  8192  0D2F  1D03               	skipz
  8193  0D30  2D3B               	goto	u3835
  8194  0D31  0828               	movf	___lldiv@divisor+2,w
  8195  0D32  022C               	subwf	___lldiv@dividend+2,w
  8196  0D33  1D03               	skipz
  8197  0D34  2D3B               	goto	u3835
  8198  0D35  0827               	movf	___lldiv@divisor+1,w
  8199  0D36  022B               	subwf	___lldiv@dividend+1,w
  8200  0D37  1D03               	skipz
  8201  0D38  2D3B               	goto	u3835
  8202  0D39  0826               	movf	___lldiv@divisor,w
  8203  0D3A  022A               	subwf	___lldiv@dividend,w
  8204  0D3B                     u3835:	
  8205  0D3B  1C03               	skipc
  8206  0D3C  2D46               	goto	l3759
  8207  0D3D  0826               	movf	___lldiv@divisor,w
  8208  0D3E  02AA               	subwf	___lldiv@dividend,f
  8209  0D3F  0827               	movf	___lldiv@divisor+1,w
  8210  0D40  3BAB               	subwfb	___lldiv@dividend+1,f
  8211  0D41  0828               	movf	___lldiv@divisor+2,w
  8212  0D42  3BAC               	subwfb	___lldiv@dividend+2,f
  8213  0D43  0829               	movf	___lldiv@divisor+3,w
  8214  0D44  3BAD               	subwfb	___lldiv@dividend+3,f
  8215  0D45  142E               	bsf	___lldiv@quotient,0
  8216  0D46                     l3759:	
  8217  0D46  3001               	movlw	1
  8218  0D47                     u3845:	
  8219  0D47  36A9               	lsrf	___lldiv@divisor+3,f
  8220  0D48  0CA8               	rrf	___lldiv@divisor+2,f
  8221  0D49  0CA7               	rrf	___lldiv@divisor+1,f
  8222  0D4A  0CA6               	rrf	___lldiv@divisor,f
  8223  0D4B  0B89               	decfsz	9,f
  8224  0D4C  2D47               	goto	u3845
  8225  0D4D  3001               	movlw	1
  8226  0D4E  02B2               	subwf	___lldiv@counter,f
  8227  0D4F  1D03               	btfss	3,2
  8228  0D50  2D26               	goto	l3751
  8229  0D51                     l3763:	
  8230  0D51  0831               	movf	___lldiv@quotient+3,w
  8231  0D52  00A9               	movwf	?___lldiv+3
  8232  0D53  0830               	movf	___lldiv@quotient+2,w
  8233  0D54  00A8               	movwf	?___lldiv+2
  8234  0D55  082F               	movf	___lldiv@quotient+1,w
  8235  0D56  00A7               	movwf	?___lldiv+1
  8236  0D57  082E               	movf	___lldiv@quotient,w
  8237  0D58  00A6               	movwf	?___lldiv
  8238  0D59  0008               	return
  8239  0D5A                     __end_of___lldiv:	
  8240                           
  8241                           	psect	text33
  8242  0A22                     __ptext33:	
  8243 ;; *************** function ___lltoft *****************
  8244 ;; Defined at:
  8245 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  8246 ;; Parameters:    Size  Location     Type
  8247 ;;  c               4    0[COMMON] unsigned long 
  8248 ;; Auto vars:     Size  Location     Type
  8249 ;;  exp             1   11[BANK0 ] unsigned char 
  8250 ;; Return value:  Size  Location     Type
  8251 ;;                  3    0[COMMON] float 
  8252 ;; Registers used:
  8253 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8254 ;; Tracked objects:
  8255 ;;		On entry : 0/0
  8256 ;;		On exit  : 0/0
  8257 ;;		Unchanged: 0/0
  8258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8259 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8260 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8262 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8263 ;;Total ram usage:        5 bytes
  8264 ;; Hardware stack levels used:    1
  8265 ;; Hardware stack levels required when called:    8
  8266 ;; This function calls:
  8267 ;;		___ftpack
  8268 ;; This function is called by:
  8269 ;;		_ftoa
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           
  8274                           ;psect for function ___lltoft
  8275  0A22                     ___lltoft:	
  8276                           
  8277                           ;incstack = 0
  8278                           ; Regs used in ___lltoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8279  0A22  308E               	movlw	142
  8280  0A23  00FF               	movwf	127
  8281  0A24  087F               	movf	127,w
  8282  0A25  0020               	movlb	0	; select bank0
  8283  0A26  00AB               	movwf	___lltoft@exp
  8284  0A27                     l4199:	
  8285  0A27  30FF               	movlw	255
  8286  0A28  0573               	andwf	___lltoft@c+3,w
  8287  0A29  1903               	btfsc	3,2
  8288  0A2A  2A37               	goto	l4201
  8289  0A2B  3001               	movlw	1
  8290  0A2C                     u4765:	
  8291  0A2C  36F3               	lsrf	___lltoft@c+3,f
  8292  0A2D  0CF2               	rrf	___lltoft@c+2,f
  8293  0A2E  0CF1               	rrf	___lltoft@c+1,f
  8294  0A2F  0CF0               	rrf	___lltoft@c,f
  8295  0A30  0B89               	decfsz	9,f
  8296  0A31  2A2C               	goto	u4765
  8297  0A32  3001               	movlw	1
  8298  0A33  00FF               	movwf	127
  8299  0A34  087F               	movf	127,w
  8300  0A35  07AB               	addwf	___lltoft@exp,f
  8301  0A36  2A27               	goto	l4199
  8302  0A37                     l4201:	
  8303  0A37  0870               	movf	___lltoft@c,w
  8304  0A38  00A6               	movwf	___ftpack@arg
  8305  0A39  0871               	movf	___lltoft@c+1,w
  8306  0A3A  00A7               	movwf	___ftpack@arg+1
  8307  0A3B  0872               	movf	___lltoft@c+2,w
  8308  0A3C  00A8               	movwf	___ftpack@arg+2
  8309  0A3D  082B               	movf	___lltoft@exp,w
  8310  0A3E  00FF               	movwf	127
  8311  0A3F  087F               	movf	127,w
  8312  0A40  00A9               	movwf	___ftpack@exp
  8313  0A41  01AA               	clrf	___ftpack@sign
  8314  0A42  318D  255A         	fcall	___ftpack
  8315  0A44  0020               	movlb	0	; select bank0
  8316  0A45  0826               	movf	?___ftpack,w
  8317  0A46  00F0               	movwf	?___lltoft
  8318  0A47  0827               	movf	?___ftpack+1,w
  8319  0A48  00F1               	movwf	?___lltoft+1
  8320  0A49  0828               	movf	?___ftpack+2,w
  8321  0A4A  00F2               	movwf	?___lltoft+2
  8322  0A4B  0008               	return
  8323  0A4C                     __end_of___lltoft:	
  8324                           
  8325                           	psect	text34
  8326  0E45                     __ptext34:	
  8327 ;; *************** function ___fttol *****************
  8328 ;; Defined at:
  8329 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  8330 ;; Parameters:    Size  Location     Type
  8331 ;;  f1              3   55[BANK0 ] float 
  8332 ;; Auto vars:     Size  Location     Type
  8333 ;;  lval            4   60[BANK0 ] unsigned long 
  8334 ;;  exp1            1   64[BANK0 ] unsigned char 
  8335 ;;  sign1           1   59[BANK0 ] unsigned char 
  8336 ;; Return value:  Size  Location     Type
  8337 ;;                  4   55[BANK0 ] long 
  8338 ;; Registers used:
  8339 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8340 ;; Tracked objects:
  8341 ;;		On entry : 0/0
  8342 ;;		On exit  : 0/0
  8343 ;;		Unchanged: 0/0
  8344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8345 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8346 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8348 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8349 ;;Total ram usage:       10 bytes
  8350 ;; Hardware stack levels used:    1
  8351 ;; Hardware stack levels required when called:    7
  8352 ;; This function calls:
  8353 ;;		Nothing
  8354 ;; This function is called by:
  8355 ;;		_ftoa
  8356 ;; This function uses a non-reentrant model
  8357 ;;
  8358                           
  8359                           
  8360                           ;psect for function ___fttol
  8361  0E45                     ___fttol:	
  8362                           
  8363                           ;incstack = 0
  8364                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+9-btemp+11]
  8365  0E45  0020               	movlb	0	; select bank0
  8366  0E46  0857               	movf	___fttol@f1,w
  8367  0E47  00FD               	movwf	125
  8368  0E48  0858               	movf	___fttol@f1+1,w
  8369  0E49  00FE               	movwf	126
  8370  0E4A  0859               	movf	___fttol@f1+2,w
  8371  0E4B  00FF               	movwf	127
  8372  0E4C  1003               	clrc
  8373  0E4D  0D7E               	rlf	126,w
  8374  0E4E  0D7F               	rlf	127,w
  8375  0E4F  00FF               	movwf	127
  8376  0E50  087F               	movf	127,w
  8377  0E51  00E0               	movwf	___fttol@exp1
  8378  0E52  0860               	movf	___fttol@exp1,w
  8379  0E53  1D03               	btfss	3,2
  8380  0E54  2E5E               	goto	l4155
  8381  0E55  3000               	movlw	0
  8382  0E56  00DA               	movwf	?___fttol+3
  8383  0E57  3000               	movlw	0
  8384  0E58  00D9               	movwf	?___fttol+2
  8385  0E59  3000               	movlw	0
  8386  0E5A  00D8               	movwf	?___fttol+1
  8387  0E5B  3000               	movlw	0
  8388  0E5C  00D7               	movwf	?___fttol
  8389  0E5D  0008               	return
  8390  0E5E                     l4155:	
  8391  0E5E  0857               	movf	___fttol@f1,w
  8392  0E5F  00FD               	movwf	125
  8393  0E60  0858               	movf	___fttol@f1+1,w
  8394  0E61  00FE               	movwf	126
  8395  0E62  0859               	movf	___fttol@f1+2,w
  8396  0E63  00FF               	movwf	127
  8397  0E64  3017               	movlw	23
  8398  0E65                     u4675:	
  8399  0E65  36FF               	lsrf	127,f
  8400  0E66  0CFE               	rrf	126,f
  8401  0E67  0CFD               	rrf	125,f
  8402  0E68  0B89               	decfsz	9,f
  8403  0E69  2E65               	goto	u4675
  8404  0E6A  087D               	movf	125,w
  8405  0E6B  00FF               	movwf	127
  8406  0E6C  087F               	movf	127,w
  8407  0E6D  00DB               	movwf	___fttol@sign1
  8408  0E6E  17D8               	bsf	___fttol@f1+1,7
  8409  0E6F  30FF               	movlw	255
  8410  0E70  05D7               	andwf	___fttol@f1,f
  8411  0E71  30FF               	movlw	255
  8412  0E72  05D8               	andwf	___fttol@f1+1,f
  8413  0E73  3000               	movlw	0
  8414  0E74  05D9               	andwf	___fttol@f1+2,f
  8415  0E75  0857               	movf	___fttol@f1,w
  8416  0E76  00DC               	movwf	___fttol@lval
  8417  0E77  0858               	movf	___fttol@f1+1,w
  8418  0E78  00DD               	movwf	___fttol@lval+1
  8419  0E79  0859               	movf	___fttol@f1+2,w
  8420  0E7A  00DE               	movwf	___fttol@lval+2
  8421  0E7B  01DF               	clrf	___fttol@lval+3
  8422  0E7C  308E               	movlw	142
  8423  0E7D  02E0               	subwf	___fttol@exp1,f
  8424  0E7E  1FE0               	btfss	___fttol@exp1,7
  8425  0E7F  2E9C               	goto	l4177
  8426  0E80  0860               	movf	___fttol@exp1,w
  8427  0E81  3A80               	xorlw	128
  8428  0E82  3E8F               	addlw	143
  8429  0E83  1803               	skipnc
  8430  0E84  2E8E               	goto	l4173
  8431  0E85  3000               	movlw	0
  8432  0E86  00DA               	movwf	?___fttol+3
  8433  0E87  3000               	movlw	0
  8434  0E88  00D9               	movwf	?___fttol+2
  8435  0E89  3000               	movlw	0
  8436  0E8A  00D8               	movwf	?___fttol+1
  8437  0E8B  3000               	movlw	0
  8438  0E8C  00D7               	movwf	?___fttol
  8439  0E8D  0008               	return
  8440  0E8E                     l4173:	
  8441  0E8E  3001               	movlw	1
  8442  0E8F                     u4705:	
  8443  0E8F  36DF               	lsrf	___fttol@lval+3,f
  8444  0E90  0CDE               	rrf	___fttol@lval+2,f
  8445  0E91  0CDD               	rrf	___fttol@lval+1,f
  8446  0E92  0CDC               	rrf	___fttol@lval,f
  8447  0E93  0B89               	decfsz	9,f
  8448  0E94  2E8F               	goto	u4705
  8449  0E95  3001               	movlw	1
  8450  0E96  00FF               	movwf	127
  8451  0E97  087F               	movf	127,w
  8452  0E98  07E0               	addwf	___fttol@exp1,f
  8453  0E99  1903               	btfsc	3,2
  8454  0E9A  2EB5               	goto	l4185
  8455  0E9B  2E8E               	goto	l4173
  8456  0E9C                     l4177:	
  8457  0E9C  3018               	movlw	24
  8458  0E9D  0260               	subwf	___fttol@exp1,w
  8459  0E9E  1C03               	skipc
  8460  0E9F  2EB2               	goto	l837
  8461  0EA0  3000               	movlw	0
  8462  0EA1  00DA               	movwf	?___fttol+3
  8463  0EA2  3000               	movlw	0
  8464  0EA3  00D9               	movwf	?___fttol+2
  8465  0EA4  3000               	movlw	0
  8466  0EA5  00D8               	movwf	?___fttol+1
  8467  0EA6  3000               	movlw	0
  8468  0EA7  00D7               	movwf	?___fttol
  8469  0EA8  0008               	return
  8470  0EA9                     l4183:	
  8471  0EA9  3001               	movlw	1
  8472  0EAA                     u4735:	
  8473  0EAA  35DC               	lslf	___fttol@lval,f
  8474  0EAB  0DDD               	rlf	___fttol@lval+1,f
  8475  0EAC  0DDE               	rlf	___fttol@lval+2,f
  8476  0EAD  0DDF               	rlf	___fttol@lval+3,f
  8477  0EAE  0B89               	decfsz	9,f
  8478  0EAF  2EAA               	goto	u4735
  8479  0EB0  3001               	movlw	1
  8480  0EB1  02E0               	subwf	___fttol@exp1,f
  8481  0EB2                     l837:	
  8482  0EB2  0860               	movf	___fttol@exp1,w
  8483  0EB3  1D03               	btfss	3,2
  8484  0EB4  2EA9               	goto	l4183
  8485  0EB5                     l4185:	
  8486  0EB5  085B               	movf	___fttol@sign1,w
  8487  0EB6  1903               	btfsc	3,2
  8488  0EB7  2EC3               	goto	l4189
  8489  0EB8  09DC               	comf	___fttol@lval,f
  8490  0EB9  09DD               	comf	___fttol@lval+1,f
  8491  0EBA  09DE               	comf	___fttol@lval+2,f
  8492  0EBB  09DF               	comf	___fttol@lval+3,f
  8493  0EBC  0ADC               	incf	___fttol@lval,f
  8494  0EBD  1903               	skipnz
  8495  0EBE  0ADD               	incf	___fttol@lval+1,f
  8496  0EBF  1903               	skipnz
  8497  0EC0  0ADE               	incf	___fttol@lval+2,f
  8498  0EC1  1903               	skipnz
  8499  0EC2  0ADF               	incf	___fttol@lval+3,f
  8500  0EC3                     l4189:	
  8501  0EC3  085F               	movf	___fttol@lval+3,w
  8502  0EC4  00DA               	movwf	?___fttol+3
  8503  0EC5  085E               	movf	___fttol@lval+2,w
  8504  0EC6  00D9               	movwf	?___fttol+2
  8505  0EC7  085D               	movf	___fttol@lval+1,w
  8506  0EC8  00D8               	movwf	?___fttol+1
  8507  0EC9  085C               	movf	___fttol@lval,w
  8508  0ECA  00D7               	movwf	?___fttol
  8509  0ECB  0008               	return
  8510  0ECC                     __end_of___fttol:	
  8511                           
  8512                           	psect	text35
  8513  0903                     __ptext35:	
  8514 ;; *************** function ___ftsub *****************
  8515 ;; Defined at:
  8516 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;  f2              3   21[BANK0 ] float 
  8519 ;;  f1              3   24[BANK0 ] float 
  8520 ;; Auto vars:     Size  Location     Type
  8521 ;;		None
  8522 ;; Return value:  Size  Location     Type
  8523 ;;                  3   21[BANK0 ] float 
  8524 ;; Registers used:
  8525 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8526 ;; Tracked objects:
  8527 ;;		On entry : 0/0
  8528 ;;		On exit  : 0/0
  8529 ;;		Unchanged: 0/0
  8530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8531 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8534 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8535 ;;Total ram usage:        6 bytes
  8536 ;; Hardware stack levels used:    1
  8537 ;; Hardware stack levels required when called:    9
  8538 ;; This function calls:
  8539 ;;		___ftadd
  8540 ;; This function is called by:
  8541 ;;		_ftoa
  8542 ;; This function uses a non-reentrant model
  8543 ;;
  8544                           
  8545                           
  8546                           ;psect for function ___ftsub
  8547  0903                     ___ftsub:	
  8548                           
  8549                           ;incstack = 0
  8550                           ; Regs used in ___ftsub: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8551  0903  0020               	movlb	0	; select bank0
  8552  0904  0837               	movf	___ftsub@f2+2,w
  8553  0905  0436               	iorwf	___ftsub@f2+1,w
  8554  0906  0435               	iorwf	___ftsub@f2,w
  8555  0907  1903               	skipnz
  8556  0908  290B               	goto	l4145
  8557  0909  3080               	movlw	128
  8558  090A  06B7               	xorwf	___ftsub@f2+2,f
  8559  090B                     l4145:	
  8560  090B  0838               	movf	___ftsub@f1,w
  8561  090C  00AB               	movwf	___ftadd@f1
  8562  090D  0839               	movf	___ftsub@f1+1,w
  8563  090E  00AC               	movwf	___ftadd@f1+1
  8564  090F  083A               	movf	___ftsub@f1+2,w
  8565  0910  00AD               	movwf	___ftadd@f1+2
  8566  0911  0835               	movf	___ftsub@f2,w
  8567  0912  00AE               	movwf	___ftadd@f2
  8568  0913  0836               	movf	___ftsub@f2+1,w
  8569  0914  00AF               	movwf	___ftadd@f2+1
  8570  0915  0837               	movf	___ftsub@f2+2,w
  8571  0916  00B0               	movwf	___ftadd@f2+2
  8572  0917  3183  2329         	fcall	___ftadd
  8573  0919  0020               	movlb	0	; select bank0
  8574  091A  082B               	movf	?___ftadd,w
  8575  091B  00B5               	movwf	?___ftsub
  8576  091C  082C               	movf	?___ftadd+1,w
  8577  091D  00B6               	movwf	?___ftsub+1
  8578  091E  082D               	movf	?___ftadd+2,w
  8579  091F  00B7               	movwf	?___ftsub+2
  8580  0920  0008               	return
  8581  0921                     __end_of___ftsub:	
  8582                           
  8583                           	psect	text36
  8584  0828                     __ptext36:	
  8585 ;; *************** function ___ftneg *****************
  8586 ;; Defined at:
  8587 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  8588 ;; Parameters:    Size  Location     Type
  8589 ;;  f1              3   43[BANK0 ] float 
  8590 ;; Auto vars:     Size  Location     Type
  8591 ;;		None
  8592 ;; Return value:  Size  Location     Type
  8593 ;;                  3   43[BANK0 ] float 
  8594 ;; Registers used:
  8595 ;;		wreg
  8596 ;; Tracked objects:
  8597 ;;		On entry : 0/0
  8598 ;;		On exit  : 0/0
  8599 ;;		Unchanged: 0/0
  8600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8601 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8604 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8605 ;;Total ram usage:        3 bytes
  8606 ;; Hardware stack levels used:    1
  8607 ;; Hardware stack levels required when called:    7
  8608 ;; This function calls:
  8609 ;;		Nothing
  8610 ;; This function is called by:
  8611 ;;		_loop
  8612 ;;		_ftoa
  8613 ;; This function uses a non-reentrant model
  8614 ;;
  8615                           
  8616                           
  8617                           ;psect for function ___ftneg
  8618  0828                     ___ftneg:	
  8619                           
  8620                           ;incstack = 0
  8621                           ; Regs used in ___ftneg: [wreg]
  8622  0828  0020               	movlb	0	; select bank0
  8623  0829  084D               	movf	___ftneg@f1+2,w
  8624  082A  044C               	iorwf	___ftneg@f1+1,w
  8625  082B  044B               	iorwf	___ftneg@f1,w
  8626  082C  1903               	skipnz
  8627  082D  0008               	return
  8628  082E  3080               	movlw	128
  8629  082F  06CD               	xorwf	___ftneg@f1+2,f
  8630  0830  0008               	return
  8631  0831                     __end_of___ftneg:	
  8632                           
  8633                           	psect	text37
  8634  05F3                     __ptext37:	
  8635 ;; *************** function ___ftmul *****************
  8636 ;; Defined at:
  8637 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  8638 ;; Parameters:    Size  Location     Type
  8639 ;;  f1              3   43[BANK0 ] float 
  8640 ;;  f2              3   46[BANK0 ] float 
  8641 ;; Auto vars:     Size  Location     Type
  8642 ;;  f3_as_produc    3   50[BANK0 ] unsigned um
  8643 ;;  sign            1   54[BANK0 ] unsigned char 
  8644 ;;  cntr            1   53[BANK0 ] unsigned char 
  8645 ;;  exp             1   49[BANK0 ] unsigned char 
  8646 ;; Return value:  Size  Location     Type
  8647 ;;                  3   43[BANK0 ] float 
  8648 ;; Registers used:
  8649 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8650 ;; Tracked objects:
  8651 ;;		On entry : 0/0
  8652 ;;		On exit  : 0/0
  8653 ;;		Unchanged: 0/0
  8654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8655 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8656 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8658 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8659 ;;Total ram usage:       12 bytes
  8660 ;; Hardware stack levels used:    1
  8661 ;; Hardware stack levels required when called:    8
  8662 ;; This function calls:
  8663 ;;		___ftpack
  8664 ;; This function is called by:
  8665 ;;		_loop
  8666 ;;		_ftoa
  8667 ;; This function uses a non-reentrant model
  8668 ;;
  8669                           
  8670                           
  8671                           ;psect for function ___ftmul
  8672  05F3                     ___ftmul:	
  8673                           
  8674                           ;incstack = 0
  8675                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8676  05F3  0020               	movlb	0	; select bank0
  8677  05F4  084B               	movf	___ftmul@f1,w
  8678  05F5  00FD               	movwf	125
  8679  05F6  084C               	movf	___ftmul@f1+1,w
  8680  05F7  00FE               	movwf	126
  8681  05F8  084D               	movf	___ftmul@f1+2,w
  8682  05F9  00FF               	movwf	127
  8683  05FA  1003               	clrc
  8684  05FB  0D7E               	rlf	126,w
  8685  05FC  0D7F               	rlf	127,w
  8686  05FD  00FF               	movwf	127
  8687  05FE  087F               	movf	127,w
  8688  05FF  00D1               	movwf	___ftmul@exp
  8689  0600  0851               	movf	___ftmul@exp,w
  8690  0601  1D03               	btfss	3,2
  8691  0602  2E0A               	goto	l4085
  8692  0603  3000               	movlw	0
  8693  0604  00CB               	movwf	?___ftmul
  8694  0605  3000               	movlw	0
  8695  0606  00CC               	movwf	?___ftmul+1
  8696  0607  3000               	movlw	0
  8697  0608  00CD               	movwf	?___ftmul+2
  8698  0609  0008               	return
  8699  060A                     l4085:	
  8700  060A  084E               	movf	___ftmul@f2,w
  8701  060B  00FD               	movwf	125
  8702  060C  084F               	movf	___ftmul@f2+1,w
  8703  060D  00FE               	movwf	126
  8704  060E  0850               	movf	___ftmul@f2+2,w
  8705  060F  00FF               	movwf	127
  8706  0610  1003               	clrc
  8707  0611  0D7E               	rlf	126,w
  8708  0612  0D7F               	rlf	127,w
  8709  0613  00FF               	movwf	127
  8710  0614  087F               	movf	127,w
  8711  0615  00D6               	movwf	___ftmul@sign
  8712  0616  0856               	movf	___ftmul@sign,w
  8713  0617  1D03               	btfss	3,2
  8714  0618  2E20               	goto	l4091
  8715  0619  3000               	movlw	0
  8716  061A  00CB               	movwf	?___ftmul
  8717  061B  3000               	movlw	0
  8718  061C  00CC               	movwf	?___ftmul+1
  8719  061D  3000               	movlw	0
  8720  061E  00CD               	movwf	?___ftmul+2
  8721  061F  0008               	return
  8722  0620                     l4091:	
  8723  0620  0856               	movf	___ftmul@sign,w
  8724  0621  3E7B               	addlw	123
  8725  0622  00FF               	movwf	127
  8726  0623  087F               	movf	127,w
  8727  0624  07D1               	addwf	___ftmul@exp,f
  8728  0625  084B               	movf	___ftmul@f1,w
  8729  0626  00FD               	movwf	125
  8730  0627  084C               	movf	___ftmul@f1+1,w
  8731  0628  00FE               	movwf	126
  8732  0629  084D               	movf	___ftmul@f1+2,w
  8733  062A  00FF               	movwf	127
  8734  062B  3010               	movlw	16
  8735  062C                     u4545:	
  8736  062C  36FF               	lsrf	127,f
  8737  062D  0CFE               	rrf	126,f
  8738  062E  0CFD               	rrf	125,f
  8739  062F  0B89               	decfsz	9,f
  8740  0630  2E2C               	goto	u4545
  8741  0631  087D               	movf	125,w
  8742  0632  00FF               	movwf	127
  8743  0633  087F               	movf	127,w
  8744  0634  00D6               	movwf	___ftmul@sign
  8745  0635  084E               	movf	___ftmul@f2,w
  8746  0636  00FD               	movwf	125
  8747  0637  084F               	movf	___ftmul@f2+1,w
  8748  0638  00FE               	movwf	126
  8749  0639  0850               	movf	___ftmul@f2+2,w
  8750  063A  00FF               	movwf	127
  8751  063B  3010               	movlw	16
  8752  063C                     u4555:	
  8753  063C  36FF               	lsrf	127,f
  8754  063D  0CFE               	rrf	126,f
  8755  063E  0CFD               	rrf	125,f
  8756  063F  0B89               	decfsz	9,f
  8757  0640  2E3C               	goto	u4555
  8758  0641  087D               	movf	125,w
  8759  0642  00FF               	movwf	127
  8760  0643  087F               	movf	127,w
  8761  0644  06D6               	xorwf	___ftmul@sign,f
  8762  0645  3080               	movlw	128
  8763  0646  00FF               	movwf	127
  8764  0647  087F               	movf	127,w
  8765  0648  05D6               	andwf	___ftmul@sign,f
  8766  0649  17CC               	bsf	___ftmul@f1+1,7
  8767  064A  17CF               	bsf	___ftmul@f2+1,7
  8768  064B  30FF               	movlw	255
  8769  064C  05CE               	andwf	___ftmul@f2,f
  8770  064D  30FF               	movlw	255
  8771  064E  05CF               	andwf	___ftmul@f2+1,f
  8772  064F  3000               	movlw	0
  8773  0650  05D0               	andwf	___ftmul@f2+2,f
  8774  0651  3000               	movlw	0
  8775  0652  00D2               	movwf	___ftmul@f3_as_product
  8776  0653  3000               	movlw	0
  8777  0654  00D3               	movwf	___ftmul@f3_as_product+1
  8778  0655  3000               	movlw	0
  8779  0656  00D4               	movwf	___ftmul@f3_as_product+2
  8780  0657  3007               	movlw	7
  8781  0658  00FF               	movwf	127
  8782  0659  087F               	movf	127,w
  8783  065A  00D5               	movwf	___ftmul@cntr
  8784  065B                     l4107:	
  8785  065B  1C4B               	btfss	___ftmul@f1,0
  8786  065C  2E63               	goto	l4111
  8787  065D  084E               	movf	___ftmul@f2,w
  8788  065E  07D2               	addwf	___ftmul@f3_as_product,f
  8789  065F  084F               	movf	___ftmul@f2+1,w
  8790  0660  3DD3               	addwfc	___ftmul@f3_as_product+1,f
  8791  0661  0850               	movf	___ftmul@f2+2,w
  8792  0662  3DD4               	addwfc	___ftmul@f3_as_product+2,f
  8793  0663                     l4111:	
  8794  0663  3001               	movlw	1
  8795  0664                     u4575:	
  8796  0664  36CD               	lsrf	___ftmul@f1+2,f
  8797  0665  0CCC               	rrf	___ftmul@f1+1,f
  8798  0666  0CCB               	rrf	___ftmul@f1,f
  8799  0667  0B89               	decfsz	9,f
  8800  0668  2E64               	goto	u4575
  8801  0669  3001               	movlw	1
  8802  066A                     u4585:	
  8803  066A  35CE               	lslf	___ftmul@f2,f
  8804  066B  0DCF               	rlf	___ftmul@f2+1,f
  8805  066C  0DD0               	rlf	___ftmul@f2+2,f
  8806  066D  0B89               	decfsz	9,f
  8807  066E  2E6A               	goto	u4585
  8808  066F  3001               	movlw	1
  8809  0670  02D5               	subwf	___ftmul@cntr,f
  8810  0671  1D03               	btfss	3,2
  8811  0672  2E5B               	goto	l4107
  8812  0673  3009               	movlw	9
  8813  0674  00FF               	movwf	127
  8814  0675  087F               	movf	127,w
  8815  0676  00D5               	movwf	___ftmul@cntr
  8816  0677                     l4119:	
  8817  0677  1C4B               	btfss	___ftmul@f1,0
  8818  0678  2E7F               	goto	l4123
  8819  0679  084E               	movf	___ftmul@f2,w
  8820  067A  07D2               	addwf	___ftmul@f3_as_product,f
  8821  067B  084F               	movf	___ftmul@f2+1,w
  8822  067C  3DD3               	addwfc	___ftmul@f3_as_product+1,f
  8823  067D  0850               	movf	___ftmul@f2+2,w
  8824  067E  3DD4               	addwfc	___ftmul@f3_as_product+2,f
  8825  067F                     l4123:	
  8826  067F  3001               	movlw	1
  8827  0680                     u4615:	
  8828  0680  36CD               	lsrf	___ftmul@f1+2,f
  8829  0681  0CCC               	rrf	___ftmul@f1+1,f
  8830  0682  0CCB               	rrf	___ftmul@f1,f
  8831  0683  0B89               	decfsz	9,f
  8832  0684  2E80               	goto	u4615
  8833  0685  3001               	movlw	1
  8834  0686                     u4625:	
  8835  0686  36D4               	lsrf	___ftmul@f3_as_product+2,f
  8836  0687  0CD3               	rrf	___ftmul@f3_as_product+1,f
  8837  0688  0CD2               	rrf	___ftmul@f3_as_product,f
  8838  0689  0B89               	decfsz	9,f
  8839  068A  2E86               	goto	u4625
  8840  068B  3001               	movlw	1
  8841  068C  02D5               	subwf	___ftmul@cntr,f
  8842  068D  1D03               	btfss	3,2
  8843  068E  2E77               	goto	l4119
  8844  068F  0852               	movf	___ftmul@f3_as_product,w
  8845  0690  00A6               	movwf	___ftpack@arg
  8846  0691  0853               	movf	___ftmul@f3_as_product+1,w
  8847  0692  00A7               	movwf	___ftpack@arg+1
  8848  0693  0854               	movf	___ftmul@f3_as_product+2,w
  8849  0694  00A8               	movwf	___ftpack@arg+2
  8850  0695  0851               	movf	___ftmul@exp,w
  8851  0696  00FF               	movwf	127
  8852  0697  087F               	movf	127,w
  8853  0698  00A9               	movwf	___ftpack@exp
  8854  0699  0856               	movf	___ftmul@sign,w
  8855  069A  00FF               	movwf	127
  8856  069B  087F               	movf	127,w
  8857  069C  00AA               	movwf	___ftpack@sign
  8858  069D  318D  255A         	fcall	___ftpack
  8859  069F  0020               	movlb	0	; select bank0
  8860  06A0  0826               	movf	?___ftpack,w
  8861  06A1  00CB               	movwf	?___ftmul
  8862  06A2  0827               	movf	?___ftpack+1,w
  8863  06A3  00CC               	movwf	?___ftmul+1
  8864  06A4  0828               	movf	?___ftpack+2,w
  8865  06A5  00CD               	movwf	?___ftmul+2
  8866  06A6  0008               	return
  8867  06A7                     __end_of___ftmul:	
  8868                           
  8869                           	psect	text38
  8870  0B75                     __ptext38:	
  8871 ;; *************** function ___ftge *****************
  8872 ;; Defined at:
  8873 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8874 ;; Parameters:    Size  Location     Type
  8875 ;;  ff1             3    6[BANK0 ] float 
  8876 ;;  ff2             3    9[BANK0 ] float 
  8877 ;; Auto vars:     Size  Location     Type
  8878 ;;		None
  8879 ;; Return value:  Size  Location     Type
  8880 ;;		None               void
  8881 ;; Registers used:
  8882 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8883 ;; Tracked objects:
  8884 ;;		On entry : 0/0
  8885 ;;		On exit  : 0/0
  8886 ;;		Unchanged: 0/0
  8887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8888 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8891 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8892 ;;Total ram usage:        6 bytes
  8893 ;; Hardware stack levels used:    1
  8894 ;; Hardware stack levels required when called:    7
  8895 ;; This function calls:
  8896 ;;		Nothing
  8897 ;; This function is called by:
  8898 ;;		_ftoa
  8899 ;; This function uses a non-reentrant model
  8900 ;;
  8901                           
  8902                           
  8903                           ;psect for function ___ftge
  8904  0B75                     ___ftge:	
  8905                           
  8906                           ;incstack = 0
  8907                           ; Regs used in ___ftge: [wreg+status,2+status,0+btemp+9-btemp+11]
  8908  0B75  0020               	movlb	0	; select bank0
  8909  0B76  1FA8               	btfss	___ftge@ff1+2,7
  8910  0B77  2B8C               	goto	l4063
  8911  0B78  0926               	comf	___ftge@ff1,w
  8912  0B79  00FD               	movwf	125
  8913  0B7A  0927               	comf	___ftge@ff1+1,w
  8914  0B7B  00FE               	movwf	126
  8915  0B7C  0928               	comf	___ftge@ff1+2,w
  8916  0B7D  00FF               	movwf	127
  8917  0B7E  0AFD               	incf	125,f
  8918  0B7F  1903               	skipnz
  8919  0B80  0AFE               	incf	126,f
  8920  0B81  1903               	skipnz
  8921  0B82  0AFF               	incf	127,f
  8922  0B83  3000               	movlw	0
  8923  0B84  077D               	addwf	125,w
  8924  0B85  00A6               	movwf	___ftge@ff1
  8925  0B86  3000               	movlw	0
  8926  0B87  3D7E               	addwfc	126,w
  8927  0B88  00A7               	movwf	___ftge@ff1+1
  8928  0B89  3080               	movlw	128
  8929  0B8A  3D7F               	addwfc	127,w
  8930  0B8B  00A8               	movwf	___ftge@ff1+2
  8931  0B8C                     l4063:	
  8932  0B8C  1FAB               	btfss	___ftge@ff2+2,7
  8933  0B8D  2BA2               	goto	l4067
  8934  0B8E  0929               	comf	___ftge@ff2,w
  8935  0B8F  00FD               	movwf	125
  8936  0B90  092A               	comf	___ftge@ff2+1,w
  8937  0B91  00FE               	movwf	126
  8938  0B92  092B               	comf	___ftge@ff2+2,w
  8939  0B93  00FF               	movwf	127
  8940  0B94  0AFD               	incf	125,f
  8941  0B95  1903               	skipnz
  8942  0B96  0AFE               	incf	126,f
  8943  0B97  1903               	skipnz
  8944  0B98  0AFF               	incf	127,f
  8945  0B99  3000               	movlw	0
  8946  0B9A  077D               	addwf	125,w
  8947  0B9B  00A9               	movwf	___ftge@ff2
  8948  0B9C  3000               	movlw	0
  8949  0B9D  3D7E               	addwfc	126,w
  8950  0B9E  00AA               	movwf	___ftge@ff2+1
  8951  0B9F  3080               	movlw	128
  8952  0BA0  3D7F               	addwfc	127,w
  8953  0BA1  00AB               	movwf	___ftge@ff2+2
  8954  0BA2                     l4067:	
  8955  0BA2  3080               	movlw	128
  8956  0BA3  06A8               	xorwf	___ftge@ff1+2,f
  8957  0BA4  3080               	movlw	128
  8958  0BA5  06AB               	xorwf	___ftge@ff2+2,f
  8959  0BA6  082B               	movf	___ftge@ff2+2,w
  8960  0BA7  0228               	subwf	___ftge@ff1+2,w
  8961  0BA8  1D03               	skipz
  8962  0BA9  0008               	return
  8963  0BAA  082A               	movf	___ftge@ff2+1,w
  8964  0BAB  0227               	subwf	___ftge@ff1+1,w
  8965  0BAC  1D03               	skipz
  8966  0BAD  0008               	return
  8967  0BAE  0829               	movf	___ftge@ff2,w
  8968  0BAF  0226               	subwf	___ftge@ff1,w
  8969  0BB0  0008               	return
  8970  0BB1                     __end_of___ftge:	
  8971                           
  8972                           	psect	text39
  8973  0F5B                     __ptext39:	
  8974 ;; *************** function _getADCValue *****************
  8975 ;; Defined at:
  8976 ;;		line 31 in file "main.c"
  8977 ;; Parameters:    Size  Location     Type
  8978 ;;  channel         1    wreg     unsigned char 
  8979 ;; Auto vars:     Size  Location     Type
  8980 ;;  channel         1   38[BANK0 ] unsigned char 
  8981 ;;  adcSum          3   40[BANK0 ] float 
  8982 ;;  adcLoop         1   39[BANK0 ] unsigned char 
  8983 ;; Return value:  Size  Location     Type
  8984 ;;                  3   34[BANK0 ] float 
  8985 ;; Registers used:
  8986 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8987 ;; Tracked objects:
  8988 ;;		On entry : 0/0
  8989 ;;		On exit  : 0/0
  8990 ;;		Unchanged: 0/0
  8991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8992 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8993 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8994 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8995 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8996 ;;Total ram usage:        9 bytes
  8997 ;; Hardware stack levels used:    1
  8998 ;; Hardware stack levels required when called:    9
  8999 ;; This function calls:
  9000 ;;		___awtoft
  9001 ;;		___ftadd
  9002 ;;		___ftdiv
  9003 ;;		_sleepMs
  9004 ;; This function is called by:
  9005 ;;		_loop
  9006 ;; This function uses a non-reentrant model
  9007 ;;
  9008                           
  9009                           
  9010                           ;psect for function _getADCValue
  9011  0F5B                     _getADCValue:	
  9012                           
  9013                           ;incstack = 0
  9014                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2-btemp+0+btemp+9-btemp+11+pclath+cstack
      +                          ]
  9015                           ;getADCValue@channel stored from wreg
  9016  0F5B  0020               	movlb	0	; select bank0
  9017  0F5C  00C6               	movwf	getADCValue@channel
  9018                           
  9019                           ;main.c: 34: float adcSum = 0;
  9020  0F5D  3000               	movlw	0
  9021  0F5E  00C8               	movwf	getADCValue@adcSum
  9022  0F5F  3000               	movlw	0
  9023  0F60  00C9               	movwf	getADCValue@adcSum+1
  9024  0F61  3000               	movlw	0
  9025  0F62  00CA               	movwf	getADCValue@adcSum+2
  9026                           
  9027                           ;main.c: 35: unsigned char adcLoop = 111;
  9028  0F63  306F               	movlw	111
  9029  0F64  00FF               	movwf	127
  9030  0F65  087F               	movf	127,w
  9031  0F66  00C7               	movwf	getADCValue@adcLoop
  9032                           
  9033                           ;main.c: 37: ADCON0bits.CHS = channel;
  9034  0F67  0846               	movf	getADCValue@channel,w
  9035  0F68  00C5               	movwf	??_getADCValue
  9036  0F69  0DC5               	rlf	??_getADCValue,f
  9037  0F6A  0DC5               	rlf	??_getADCValue,f
  9038  0F6B  0021               	movlb	1	; select bank1
  9039  0F6C  081D               	movf	29,w	;volatile
  9040  0F6D  0020               	movlb	0	; select bank0
  9041  0F6E  0645               	xorwf	??_getADCValue,w
  9042  0F6F  3903               	andlw	-253
  9043  0F70  0645               	xorwf	??_getADCValue,w
  9044  0F71  0021               	movlb	1	; select bank1
  9045  0F72  009D               	movwf	29	;volatile
  9046                           
  9047                           ;main.c: 38: FVRCONbits.FVREN = 1;
  9048  0F73  0022               	movlb	2	; select bank2
  9049  0F74  1797               	bsf	23,7	;volatile
  9050                           
  9051                           ;main.c: 39: ADCON0bits.ADON = 1;
  9052  0F75  0021               	movlb	1	; select bank1
  9053  0F76  141D               	bsf	29,0	;volatile
  9054                           
  9055                           ;main.c: 41: sleepMs(1);
  9056  0F77  3001               	movlw	1
  9057  0F78  00F0               	movwf	sleepMs@milliseconds
  9058  0F79  3000               	movlw	0
  9059  0F7A  00F1               	movwf	sleepMs@milliseconds+1
  9060  0F7B  318A  224C  318F   	fcall	_sleepMs
  9061  0F7E                     l4421:	
  9062                           ;main.c: 43: while (adcLoop--){
  9063                           
  9064  0F7E  3001               	movlw	1
  9065  0F7F  0020               	movlb	0	; select bank0
  9066  0F80  02C7               	subwf	getADCValue@adcLoop,f
  9067  0F81  0A47               	incf	getADCValue@adcLoop,w
  9068  0F82  1903               	btfsc	3,2
  9069  0F83  2FB7               	goto	l176
  9070                           
  9071                           ;main.c: 45: ADCON0bits.ADGO = 1;
  9072  0F84  0021               	movlb	1	; select bank1
  9073  0F85  149D               	bsf	29,1	;volatile
  9074  0F86                     l4417:	
  9075                           ;main.c: 47: while (ADCON0bits.ADGO){
  9076                           
  9077  0F86  0021               	movlb	1	; select bank1
  9078  0F87  1C9D               	btfss	29,1	;volatile
  9079  0F88  2F91               	goto	l4419
  9080                           
  9081                           ;main.c: 48: sleepMs(1);
  9082  0F89  3001               	movlw	1
  9083  0F8A  00F0               	movwf	sleepMs@milliseconds
  9084  0F8B  3000               	movlw	0
  9085  0F8C  00F1               	movwf	sleepMs@milliseconds+1
  9086  0F8D  318A  224C  318F   	fcall	_sleepMs
  9087  0F90  2F86               	goto	l4417
  9088  0F91                     l4419:	
  9089                           
  9090                           ;main.c: 49: };main.c: 51: adcSum+= (ADRESL | (ADRESH << 8));
  9091  0F91  081C               	movf	28,w	;volatile
  9092  0F92  00FE               	movwf	126
  9093  0F93  01FF               	clrf	127
  9094  0F94  087E               	movf	126,w
  9095  0F95  00FF               	movwf	127
  9096  0F96  01FE               	clrf	126
  9097  0F97  087E               	movf	126,w
  9098  0F98  041B               	iorwf	27,w	;volatile
  9099  0F99  00F0               	movwf	___awtoft@c
  9100  0F9A  087F               	movf	127,w
  9101  0F9B  00F1               	movwf	___awtoft@c+1
  9102  0F9C  3189  21D7  318F   	fcall	___awtoft
  9103  0F9F  0870               	movf	?___awtoft,w
  9104  0FA0  0020               	movlb	0	; select bank0
  9105  0FA1  00AB               	movwf	___ftadd@f1
  9106  0FA2  0871               	movf	?___awtoft+1,w
  9107  0FA3  00AC               	movwf	___ftadd@f1+1
  9108  0FA4  0872               	movf	?___awtoft+2,w
  9109  0FA5  00AD               	movwf	___ftadd@f1+2
  9110  0FA6  0848               	movf	getADCValue@adcSum,w
  9111  0FA7  00AE               	movwf	___ftadd@f2
  9112  0FA8  0849               	movf	getADCValue@adcSum+1,w
  9113  0FA9  00AF               	movwf	___ftadd@f2+1
  9114  0FAA  084A               	movf	getADCValue@adcSum+2,w
  9115  0FAB  00B0               	movwf	___ftadd@f2+2
  9116  0FAC  3183  2329  318F   	fcall	___ftadd
  9117  0FAF  0020               	movlb	0	; select bank0
  9118  0FB0  082B               	movf	?___ftadd,w
  9119  0FB1  00C8               	movwf	getADCValue@adcSum
  9120  0FB2  082C               	movf	?___ftadd+1,w
  9121  0FB3  00C9               	movwf	getADCValue@adcSum+1
  9122  0FB4  082D               	movf	?___ftadd+2,w
  9123  0FB5  00CA               	movwf	getADCValue@adcSum+2
  9124  0FB6  2F7E               	goto	l4421
  9125  0FB7                     l176:	
  9126                           
  9127                           ;main.c: 53: };main.c: 55: FVRCONbits.FVREN = 0;
  9128  0FB7  0022               	movlb	2	; select bank2
  9129  0FB8  1397               	bcf	23,7	;volatile
  9130                           
  9131                           ;main.c: 56: ADCON0bits.ADON = 0;
  9132  0FB9  0021               	movlb	1	; select bank1
  9133  0FBA  101D               	bcf	29,0	;volatile
  9134                           
  9135                           ;main.c: 59: adcSum/= 111;
  9136  0FBB  3000               	movlw	0
  9137  0FBC  0020               	movlb	0	; select bank0
  9138  0FBD  00B5               	movwf	___ftdiv@f2
  9139  0FBE  30DE               	movlw	222
  9140  0FBF  00B6               	movwf	___ftdiv@f2+1
  9141  0FC0  3042               	movlw	66
  9142  0FC1  00B7               	movwf	___ftdiv@f2+2
  9143  0FC2  0848               	movf	getADCValue@adcSum,w
  9144  0FC3  00B8               	movwf	___ftdiv@f1
  9145  0FC4  0849               	movf	getADCValue@adcSum+1,w
  9146  0FC5  00B9               	movwf	___ftdiv@f1+1
  9147  0FC6  084A               	movf	getADCValue@adcSum+2,w
  9148  0FC7  00BA               	movwf	___ftdiv@f1+2
  9149  0FC8  3187  2751  318F   	fcall	___ftdiv
  9150  0FCB  0020               	movlb	0	; select bank0
  9151  0FCC  0835               	movf	?___ftdiv,w
  9152  0FCD  00C8               	movwf	getADCValue@adcSum
  9153  0FCE  0836               	movf	?___ftdiv+1,w
  9154  0FCF  00C9               	movwf	getADCValue@adcSum+1
  9155  0FD0  0837               	movf	?___ftdiv+2,w
  9156  0FD1  00CA               	movwf	getADCValue@adcSum+2
  9157                           
  9158                           ;main.c: 62: if (ADCON1bits.ADPREF == 0b11){
  9159  0FD2  0021               	movlb	1	; select bank1
  9160  0FD3  081E               	movf	30,w	;volatile
  9161  0FD4  3903               	andlw	3
  9162  0FD5  3A03               	xorlw	3
  9163  0FD6  1903               	btfsc	3,2
  9164  0FD7  2FF1               	goto	l4433
  9165  0FD8  2FF8               	goto	l4435
  9166  0FD9                     l4429:	
  9167                           ;main.c: 64: case 0b10:
  9168                           
  9169                           ;main.c: 63: switch (FVRCONbits.ADFVR){
  9170                           
  9171                           
  9172                           ;main.c: 65: adcSum/= 500;
  9173  0FD9  3000               	movlw	0
  9174  0FDA  0020               	movlb	0	; select bank0
  9175  0FDB  00B5               	movwf	___ftdiv@f2
  9176  0FDC  30FA               	movlw	250
  9177  0FDD  00B6               	movwf	___ftdiv@f2+1
  9178  0FDE  3043               	movlw	67
  9179  0FDF  00B7               	movwf	___ftdiv@f2+2
  9180  0FE0  0848               	movf	getADCValue@adcSum,w
  9181  0FE1  00B8               	movwf	___ftdiv@f1
  9182  0FE2  0849               	movf	getADCValue@adcSum+1,w
  9183  0FE3  00B9               	movwf	___ftdiv@f1+1
  9184  0FE4  084A               	movf	getADCValue@adcSum+2,w
  9185  0FE5  00BA               	movwf	___ftdiv@f1+2
  9186  0FE6  3187  2751  318F   	fcall	___ftdiv
  9187  0FE9  0020               	movlb	0	; select bank0
  9188  0FEA  0835               	movf	?___ftdiv,w
  9189  0FEB  00C8               	movwf	getADCValue@adcSum
  9190  0FEC  0836               	movf	?___ftdiv+1,w
  9191  0FED  00C9               	movwf	getADCValue@adcSum+1
  9192  0FEE  0837               	movf	?___ftdiv+2,w
  9193  0FEF  00CA               	movwf	getADCValue@adcSum+2
  9194                           
  9195                           ;main.c: 67: }
  9196                           
  9197                           ;main.c: 66: break;
  9198  0FF0  2FF8               	goto	l4435
  9199  0FF1                     l4433:	
  9200  0FF1  0022               	movlb	2	; select bank2
  9201  0FF2  0817               	movf	23,w	;volatile
  9202  0FF3  3903               	andlw	3
  9203                           
  9204                           ; Switch size 1, requested type "space"
  9205                           ; Number of cases is 1, Range of values is 2 to 2
  9206                           ; switch strategies available:
  9207                           ; Name         Instructions Cycles
  9208                           ; simple_byte            4     3 (average)
  9209                           ; direct_byte           11     9 (fixed)
  9210                           ; jumptable            263     9 (fixed)
  9211                           ;	Chosen strategy is simple_byte
  9212  0FF4  3A02               	xorlw	2	; case 2
  9213  0FF5  1903               	skipnz
  9214  0FF6  2FD9               	goto	l4429
  9215  0FF7  2FF8               	goto	l4435
  9216  0FF8                     l4435:	
  9217                           
  9218                           ;main.c: 68: };main.c: 71: return adcSum;
  9219  0FF8  0020               	movlb	0	; select bank0
  9220  0FF9  0848               	movf	getADCValue@adcSum,w
  9221  0FFA  00C2               	movwf	?_getADCValue
  9222  0FFB  0849               	movf	getADCValue@adcSum+1,w
  9223  0FFC  00C3               	movwf	?_getADCValue+1
  9224  0FFD  084A               	movf	getADCValue@adcSum+2,w
  9225  0FFE  00C4               	movwf	?_getADCValue+2
  9226  0FFF  0008               	return
  9227  1000                     __end_of_getADCValue:	
  9228                           
  9229                           	psect	text40
  9230  0A4C                     __ptext40:	
  9231 ;; *************** function _sleepMs *****************
  9232 ;; Defined at:
  9233 ;;		line 37 in file "interface.c"
  9234 ;; Parameters:    Size  Location     Type
  9235 ;;  milliseconds    2    0[COMMON] unsigned int 
  9236 ;; Auto vars:     Size  Location     Type
  9237 ;;  wdtps           1    3[COMMON] unsigned char 
  9238 ;; Return value:  Size  Location     Type
  9239 ;;                  1    wreg      void 
  9240 ;; Registers used:
  9241 ;;		wreg, status,2, status,0, btemp+10, btemp+11, pclath, cstack
  9242 ;; Tracked objects:
  9243 ;;		On entry : 0/0
  9244 ;;		On exit  : 0/0
  9245 ;;		Unchanged: 0/0
  9246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9247 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9249 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9250 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9251 ;;Total ram usage:        4 bytes
  9252 ;; Hardware stack levels used:    1
  9253 ;; Hardware stack levels required when called:    8
  9254 ;; This function calls:
  9255 ;;		_resetWDT
  9256 ;; This function is called by:
  9257 ;;		_getADCValue
  9258 ;;		_sleepListren
  9259 ;;		_nrf24l01SendPacket
  9260 ;;		_hcsr04GetAerage
  9261 ;; This function uses a non-reentrant model
  9262 ;;
  9263                           
  9264                           
  9265                           ;psect for function _sleepMs
  9266  0A4C                     _sleepMs:	
  9267                           
  9268                           ;interface.c: 39: unsigned char wdtps;;interface.c: 40: for (wdtps = 0; wdtps <= 0b10010
      +                          ; wdtps++){
  9269                           
  9270                           ;incstack = 0
  9271                           ; Regs used in _sleepMs: [wreg+status,2+status,0+btemp+10+btemp+11+pclath+cstack]
  9272  0A4C  01F3               	clrf	sleepMs@wdtps
  9273  0A4D  3013               	movlw	19
  9274  0A4E  0273               	subwf	sleepMs@wdtps,w
  9275  0A4F  1803               	btfsc	3,0
  9276  0A50  2A75               	goto	l3887
  9277  0A51                     l3871:	
  9278                           
  9279                           ;interface.c: 41: if ((milliseconds >> wdtps) & 0b1){
  9280  0A51  0871               	movf	sleepMs@milliseconds+1,w
  9281  0A52  00FF               	movwf	127
  9282  0A53  0870               	movf	sleepMs@milliseconds,w
  9283  0A54  00FE               	movwf	126
  9284  0A55  0A73               	incf	sleepMs@wdtps,w
  9285  0A56  2A59               	goto	u4164
  9286  0A57                     u4165:	
  9287  0A57  36FF               	lsrf	127,f
  9288  0A58  0CFE               	rrf	126,f
  9289  0A59                     u4164:	
  9290  0A59  0B89               	decfsz	9,f
  9291  0A5A  2A57               	goto	u4165
  9292  0A5B  1C7E               	btfss	126,0
  9293  0A5C  2A6D               	goto	l3883
  9294  0A5D                     l3873:	
  9295                           ;interface.c: 42: START_SLEEP:
  9296                           
  9297                           
  9298                           ;interface.c: 43: WDTCONbits.WDTPS = wdtps;
  9299  0A5D  0873               	movf	sleepMs@wdtps,w
  9300  0A5E  00F2               	movwf	??_sleepMs
  9301  0A5F  0DF2               	rlf	??_sleepMs,f
  9302  0A60  0021               	movlb	1	; select bank1
  9303  0A61  0817               	movf	23,w	;volatile
  9304  0A62  0672               	xorwf	??_sleepMs,w
  9305  0A63  39C1               	andlw	-63
  9306  0A64  0672               	xorwf	??_sleepMs,w
  9307  0A65  0097               	movwf	23	;volatile
  9308  0A66  0063               	sleep	;# 
  9309                           
  9310                           ;interface.c: 45: __nop();
  9311  0A67  0000               	nop
  9312                           
  9313                           ;interface.c: 46: __nop();
  9314  0A68  0000               	nop
  9315                           
  9316                           ;interface.c: 48: if( STATUSbits.nTO || STATUSbits.nPD){
  9317  0A69  0020               	movlb	0	; select bank0
  9318  0A6A  1E03               	btfss	3,4	;volatile
  9319  0A6B  1983               	btfsc	3,3	;volatile
  9320                           
  9321                           ;interface.c: 49: goto START_SLEEP;
  9322  0A6C  2A5D               	goto	l3873
  9323  0A6D                     l3883:	
  9324  0A6D  3001               	movlw	1
  9325  0A6E  00FF               	movwf	127
  9326  0A6F  087F               	movf	127,w
  9327  0A70  07F3               	addwf	sleepMs@wdtps,f
  9328  0A71  3013               	movlw	19
  9329  0A72  0273               	subwf	sleepMs@wdtps,w
  9330  0A73  1C03               	skipc
  9331  0A74  2A51               	goto	l3871
  9332  0A75                     l3887:	
  9333                           
  9334                           ;interface.c: 50: };interface.c: 51: };interface.c: 52: };interface.c: 54: resetWDT();
  9335  0A75  3188  2021         	fcall	_resetWDT
  9336  0A77  0008               	return
  9337  0A78                     __end_of_sleepMs:	
  9338                           
  9339                           	psect	text41
  9340  0821                     __ptext41:	
  9341 ;; *************** function _resetWDT *****************
  9342 ;; Defined at:
  9343 ;;		line 32 in file "interface.c"
  9344 ;; Parameters:    Size  Location     Type
  9345 ;;		None
  9346 ;; Auto vars:     Size  Location     Type
  9347 ;;		None
  9348 ;; Return value:  Size  Location     Type
  9349 ;;                  1    wreg      void 
  9350 ;; Registers used:
  9351 ;;		wreg, status,2, status,0
  9352 ;; Tracked objects:
  9353 ;;		On entry : 0/0
  9354 ;;		On exit  : 0/0
  9355 ;;		Unchanged: 0/0
  9356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9361 ;;Total ram usage:        0 bytes
  9362 ;; Hardware stack levels used:    1
  9363 ;; Hardware stack levels required when called:    7
  9364 ;; This function calls:
  9365 ;;		Nothing
  9366 ;; This function is called by:
  9367 ;;		_sleepMs
  9368 ;; This function uses a non-reentrant model
  9369 ;;
  9370                           
  9371                           
  9372                           ;psect for function _resetWDT
  9373  0821                     _resetWDT:	
  9374                           
  9375                           ;interface.c: 33: WDTCONbits.WDTPS = 0b01100;
  9376                           
  9377                           ;incstack = 0
  9378                           ; Regs used in _resetWDT: [wreg+status,2+status,0]
  9379  0821  0021               	movlb	1	; select bank1
  9380  0822  0817               	movf	23,w	;volatile
  9381  0823  39C1               	andlw	-63
  9382  0824  3818               	iorlw	24
  9383  0825  0097               	movwf	23	;volatile
  9384  0826  0064               	clrwdt	;# 
  9385  0827  0008               	return
  9386  0828                     __end_of_resetWDT:	
  9387                           
  9388                           	psect	text42
  9389  0751                     __ptext42:	
  9390 ;; *************** function ___ftdiv *****************
  9391 ;; Defined at:
  9392 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  9393 ;; Parameters:    Size  Location     Type
  9394 ;;  f2              3   21[BANK0 ] float 
  9395 ;;  f1              3   24[BANK0 ] float 
  9396 ;; Auto vars:     Size  Location     Type
  9397 ;;  f3              3   29[BANK0 ] float 
  9398 ;;  sign            1   33[BANK0 ] unsigned char 
  9399 ;;  exp             1   32[BANK0 ] unsigned char 
  9400 ;;  cntr            1   28[BANK0 ] unsigned char 
  9401 ;; Return value:  Size  Location     Type
  9402 ;;                  3   21[BANK0 ] float 
  9403 ;; Registers used:
  9404 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9405 ;; Tracked objects:
  9406 ;;		On entry : 0/0
  9407 ;;		On exit  : 0/0
  9408 ;;		Unchanged: 0/0
  9409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9410 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9411 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9412 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9413 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9414 ;;Total ram usage:       13 bytes
  9415 ;; Hardware stack levels used:    1
  9416 ;; Hardware stack levels required when called:    8
  9417 ;; This function calls:
  9418 ;;		___ftpack
  9419 ;; This function is called by:
  9420 ;;		_getADCValue
  9421 ;;		_loop
  9422 ;;		_hcsr04GetAerage
  9423 ;; This function uses a non-reentrant model
  9424 ;;
  9425                           
  9426                           
  9427                           ;psect for function ___ftdiv
  9428  0751                     ___ftdiv:	
  9429                           
  9430                           ;incstack = 0
  9431                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9432  0751  0020               	movlb	0	; select bank0
  9433  0752  0838               	movf	___ftdiv@f1,w
  9434  0753  00FD               	movwf	125
  9435  0754  0839               	movf	___ftdiv@f1+1,w
  9436  0755  00FE               	movwf	126
  9437  0756  083A               	movf	___ftdiv@f1+2,w
  9438  0757  00FF               	movwf	127
  9439  0758  1003               	clrc
  9440  0759  0D7E               	rlf	126,w
  9441  075A  0D7F               	rlf	127,w
  9442  075B  00FF               	movwf	127
  9443  075C  087F               	movf	127,w
  9444  075D  00C0               	movwf	___ftdiv@exp
  9445  075E  0840               	movf	___ftdiv@exp,w
  9446  075F  1D03               	btfss	3,2
  9447  0760  2F68               	goto	l4353
  9448  0761  3000               	movlw	0
  9449  0762  00B5               	movwf	?___ftdiv
  9450  0763  3000               	movlw	0
  9451  0764  00B6               	movwf	?___ftdiv+1
  9452  0765  3000               	movlw	0
  9453  0766  00B7               	movwf	?___ftdiv+2
  9454  0767  0008               	return
  9455  0768                     l4353:	
  9456  0768  0835               	movf	___ftdiv@f2,w
  9457  0769  00FD               	movwf	125
  9458  076A  0836               	movf	___ftdiv@f2+1,w
  9459  076B  00FE               	movwf	126
  9460  076C  0837               	movf	___ftdiv@f2+2,w
  9461  076D  00FF               	movwf	127
  9462  076E  1003               	clrc
  9463  076F  0D7E               	rlf	126,w
  9464  0770  0D7F               	rlf	127,w
  9465  0771  00FF               	movwf	127
  9466  0772  087F               	movf	127,w
  9467  0773  00C1               	movwf	___ftdiv@sign
  9468  0774  0841               	movf	___ftdiv@sign,w
  9469  0775  1D03               	btfss	3,2
  9470  0776  2F7E               	goto	l4359
  9471  0777  3000               	movlw	0
  9472  0778  00B5               	movwf	?___ftdiv
  9473  0779  3000               	movlw	0
  9474  077A  00B6               	movwf	?___ftdiv+1
  9475  077B  3000               	movlw	0
  9476  077C  00B7               	movwf	?___ftdiv+2
  9477  077D  0008               	return
  9478  077E                     l4359:	
  9479  077E  3000               	movlw	0
  9480  077F  00BD               	movwf	___ftdiv@f3
  9481  0780  3000               	movlw	0
  9482  0781  00BE               	movwf	___ftdiv@f3+1
  9483  0782  3000               	movlw	0
  9484  0783  00BF               	movwf	___ftdiv@f3+2
  9485  0784  3089               	movlw	137
  9486  0785  0741               	addwf	___ftdiv@sign,w
  9487  0786  00BB               	movwf	??___ftdiv
  9488  0787  083B               	movf	??___ftdiv,w
  9489  0788  02C0               	subwf	___ftdiv@exp,f
  9490  0789  0838               	movf	___ftdiv@f1,w
  9491  078A  00FD               	movwf	125
  9492  078B  0839               	movf	___ftdiv@f1+1,w
  9493  078C  00FE               	movwf	126
  9494  078D  083A               	movf	___ftdiv@f1+2,w
  9495  078E  00FF               	movwf	127
  9496  078F  3010               	movlw	16
  9497  0790                     u4935:	
  9498  0790  36FF               	lsrf	127,f
  9499  0791  0CFE               	rrf	126,f
  9500  0792  0CFD               	rrf	125,f
  9501  0793  0B89               	decfsz	9,f
  9502  0794  2F90               	goto	u4935
  9503  0795  087D               	movf	125,w
  9504  0796  00FF               	movwf	127
  9505  0797  087F               	movf	127,w
  9506  0798  00C1               	movwf	___ftdiv@sign
  9507  0799  0835               	movf	___ftdiv@f2,w
  9508  079A  00FD               	movwf	125
  9509  079B  0836               	movf	___ftdiv@f2+1,w
  9510  079C  00FE               	movwf	126
  9511  079D  0837               	movf	___ftdiv@f2+2,w
  9512  079E  00FF               	movwf	127
  9513  079F  3010               	movlw	16
  9514  07A0                     u4945:	
  9515  07A0  36FF               	lsrf	127,f
  9516  07A1  0CFE               	rrf	126,f
  9517  07A2  0CFD               	rrf	125,f
  9518  07A3  0B89               	decfsz	9,f
  9519  07A4  2FA0               	goto	u4945
  9520  07A5  087D               	movf	125,w
  9521  07A6  00FF               	movwf	127
  9522  07A7  087F               	movf	127,w
  9523  07A8  06C1               	xorwf	___ftdiv@sign,f
  9524  07A9  3080               	movlw	128
  9525  07AA  00FF               	movwf	127
  9526  07AB  087F               	movf	127,w
  9527  07AC  05C1               	andwf	___ftdiv@sign,f
  9528  07AD  17B9               	bsf	___ftdiv@f1+1,7
  9529  07AE  30FF               	movlw	255
  9530  07AF  05B8               	andwf	___ftdiv@f1,f
  9531  07B0  30FF               	movlw	255
  9532  07B1  05B9               	andwf	___ftdiv@f1+1,f
  9533  07B2  3000               	movlw	0
  9534  07B3  05BA               	andwf	___ftdiv@f1+2,f
  9535  07B4  17B6               	bsf	___ftdiv@f2+1,7
  9536  07B5  30FF               	movlw	255
  9537  07B6  05B5               	andwf	___ftdiv@f2,f
  9538  07B7  30FF               	movlw	255
  9539  07B8  05B6               	andwf	___ftdiv@f2+1,f
  9540  07B9  3000               	movlw	0
  9541  07BA  05B7               	andwf	___ftdiv@f2+2,f
  9542  07BB  3018               	movlw	24
  9543  07BC  00FF               	movwf	127
  9544  07BD  087F               	movf	127,w
  9545  07BE  00BC               	movwf	___ftdiv@cntr
  9546  07BF                     l4377:	
  9547  07BF  3001               	movlw	1
  9548  07C0                     u4955:	
  9549  07C0  35BD               	lslf	___ftdiv@f3,f
  9550  07C1  0DBE               	rlf	___ftdiv@f3+1,f
  9551  07C2  0DBF               	rlf	___ftdiv@f3+2,f
  9552  07C3  0B89               	decfsz	9,f
  9553  07C4  2FC0               	goto	u4955
  9554  07C5  0837               	movf	___ftdiv@f2+2,w
  9555  07C6  023A               	subwf	___ftdiv@f1+2,w
  9556  07C7  1D03               	skipz
  9557  07C8  2FCF               	goto	u4965
  9558  07C9  0836               	movf	___ftdiv@f2+1,w
  9559  07CA  0239               	subwf	___ftdiv@f1+1,w
  9560  07CB  1D03               	skipz
  9561  07CC  2FCF               	goto	u4965
  9562  07CD  0835               	movf	___ftdiv@f2,w
  9563  07CE  0238               	subwf	___ftdiv@f1,w
  9564  07CF                     u4965:	
  9565  07CF  1C03               	skipc
  9566  07D0  2FD8               	goto	l4385
  9567  07D1  0835               	movf	___ftdiv@f2,w
  9568  07D2  02B8               	subwf	___ftdiv@f1,f
  9569  07D3  0836               	movf	___ftdiv@f2+1,w
  9570  07D4  3BB9               	subwfb	___ftdiv@f1+1,f
  9571  07D5  0837               	movf	___ftdiv@f2+2,w
  9572  07D6  3BBA               	subwfb	___ftdiv@f1+2,f
  9573  07D7  143D               	bsf	___ftdiv@f3,0
  9574  07D8                     l4385:	
  9575  07D8  3001               	movlw	1
  9576  07D9                     u4975:	
  9577  07D9  35B8               	lslf	___ftdiv@f1,f
  9578  07DA  0DB9               	rlf	___ftdiv@f1+1,f
  9579  07DB  0DBA               	rlf	___ftdiv@f1+2,f
  9580  07DC  0B89               	decfsz	9,f
  9581  07DD  2FD9               	goto	u4975
  9582  07DE  3001               	movlw	1
  9583  07DF  02BC               	subwf	___ftdiv@cntr,f
  9584  07E0  1D03               	btfss	3,2
  9585  07E1  2FBF               	goto	l4377
  9586  07E2  083D               	movf	___ftdiv@f3,w
  9587  07E3  00A6               	movwf	___ftpack@arg
  9588  07E4  083E               	movf	___ftdiv@f3+1,w
  9589  07E5  00A7               	movwf	___ftpack@arg+1
  9590  07E6  083F               	movf	___ftdiv@f3+2,w
  9591  07E7  00A8               	movwf	___ftpack@arg+2
  9592  07E8  0840               	movf	___ftdiv@exp,w
  9593  07E9  00FF               	movwf	127
  9594  07EA  087F               	movf	127,w
  9595  07EB  00A9               	movwf	___ftpack@exp
  9596  07EC  0841               	movf	___ftdiv@sign,w
  9597  07ED  00FF               	movwf	127
  9598  07EE  087F               	movf	127,w
  9599  07EF  00AA               	movwf	___ftpack@sign
  9600  07F0  318D  255A         	fcall	___ftpack
  9601  07F2  0020               	movlb	0	; select bank0
  9602  07F3  0826               	movf	?___ftpack,w
  9603  07F4  00B5               	movwf	?___ftdiv
  9604  07F5  0827               	movf	?___ftpack+1,w
  9605  07F6  00B6               	movwf	?___ftdiv+1
  9606  07F7  0828               	movf	?___ftpack+2,w
  9607  07F8  00B7               	movwf	?___ftdiv+2
  9608  07F9  0008               	return
  9609  07FA                     __end_of___ftdiv:	
  9610                           
  9611                           	psect	text43
  9612  0329                     __ptext43:	
  9613 ;; *************** function ___ftadd *****************
  9614 ;; Defined at:
  9615 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  9616 ;; Parameters:    Size  Location     Type
  9617 ;;  f1              3   11[BANK0 ] float 
  9618 ;;  f2              3   14[BANK0 ] float 
  9619 ;; Auto vars:     Size  Location     Type
  9620 ;;  exp1            1   20[BANK0 ] unsigned char 
  9621 ;;  exp2            1   19[BANK0 ] unsigned char 
  9622 ;;  sign            1   18[BANK0 ] unsigned char 
  9623 ;; Return value:  Size  Location     Type
  9624 ;;                  3   11[BANK0 ] float 
  9625 ;; Registers used:
  9626 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9627 ;; Tracked objects:
  9628 ;;		On entry : 0/0
  9629 ;;		On exit  : 0/0
  9630 ;;		Unchanged: 0/0
  9631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9632 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;Total ram usage:       10 bytes
  9637 ;; Hardware stack levels used:    1
  9638 ;; Hardware stack levels required when called:    8
  9639 ;; This function calls:
  9640 ;;		___ftpack
  9641 ;; This function is called by:
  9642 ;;		_getADCValue
  9643 ;;		_loop
  9644 ;;		___ftsub
  9645 ;;		_hcsr04GetAerage
  9646 ;; This function uses a non-reentrant model
  9647 ;;
  9648                           
  9649                           
  9650                           ;psect for function ___ftadd
  9651  0329                     ___ftadd:	
  9652                           
  9653                           ;incstack = 0
  9654                           ; Regs used in ___ftadd: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9655  0329  0020               	movlb	0	; select bank0
  9656  032A  082B               	movf	___ftadd@f1,w
  9657  032B  00FD               	movwf	125
  9658  032C  082C               	movf	___ftadd@f1+1,w
  9659  032D  00FE               	movwf	126
  9660  032E  082D               	movf	___ftadd@f1+2,w
  9661  032F  00FF               	movwf	127
  9662  0330  1003               	clrc
  9663  0331  0D7E               	rlf	126,w
  9664  0332  0D7F               	rlf	127,w
  9665  0333  00FF               	movwf	127
  9666  0334  087F               	movf	127,w
  9667  0335  00B4               	movwf	___ftadd@exp1
  9668  0336  082E               	movf	___ftadd@f2,w
  9669  0337  00FD               	movwf	125
  9670  0338  082F               	movf	___ftadd@f2+1,w
  9671  0339  00FE               	movwf	126
  9672  033A  0830               	movf	___ftadd@f2+2,w
  9673  033B  00FF               	movwf	127
  9674  033C  1003               	clrc
  9675  033D  0D7E               	rlf	126,w
  9676  033E  0D7F               	rlf	127,w
  9677  033F  00FF               	movwf	127
  9678  0340  087F               	movf	127,w
  9679  0341  00B3               	movwf	___ftadd@exp2
  9680  0342  0834               	movf	___ftadd@exp1,w
  9681  0343  1903               	btfsc	3,2
  9682  0344  2B51               	goto	l3775
  9683  0345  0833               	movf	___ftadd@exp2,w
  9684  0346  0234               	subwf	___ftadd@exp1,w
  9685  0347  1803               	skipnc
  9686  0348  2B58               	goto	l3779
  9687  0349  0334               	decf	___ftadd@exp1,w
  9688  034A  3AFF               	xorlw	255
  9689  034B  0733               	addwf	___ftadd@exp2,w
  9690  034C  00B1               	movwf	??___ftadd
  9691  034D  3019               	movlw	25
  9692  034E  0231               	subwf	??___ftadd,w
  9693  034F  1C03               	skipc
  9694  0350  2B58               	goto	l3779
  9695  0351                     l3775:	
  9696  0351  082E               	movf	___ftadd@f2,w
  9697  0352  00AB               	movwf	?___ftadd
  9698  0353  082F               	movf	___ftadd@f2+1,w
  9699  0354  00AC               	movwf	?___ftadd+1
  9700  0355  0830               	movf	___ftadd@f2+2,w
  9701  0356  00AD               	movwf	?___ftadd+2
  9702  0357  0008               	return
  9703  0358                     l3779:	
  9704  0358  0833               	movf	___ftadd@exp2,w
  9705  0359  1903               	btfsc	3,2
  9706  035A  0008               	return
  9707  035B  0834               	movf	___ftadd@exp1,w
  9708  035C  0233               	subwf	___ftadd@exp2,w
  9709  035D  1803               	skipnc
  9710  035E  2B67               	goto	l3785
  9711  035F  0333               	decf	___ftadd@exp2,w
  9712  0360  3AFF               	xorlw	255
  9713  0361  0734               	addwf	___ftadd@exp1,w
  9714  0362  00B1               	movwf	??___ftadd
  9715  0363  3019               	movlw	25
  9716  0364  0231               	subwf	??___ftadd,w
  9717  0365  1803               	btfsc	3,0
  9718  0366  0008               	return
  9719  0367                     l3785:	
  9720  0367  3006               	movlw	6
  9721  0368  00FF               	movwf	127
  9722  0369  087F               	movf	127,w
  9723  036A  00B2               	movwf	___ftadd@sign
  9724  036B  1BAD               	btfsc	___ftadd@f1+2,7
  9725  036C  17B2               	bsf	___ftadd@sign,7
  9726  036D  1BB0               	btfsc	___ftadd@f2+2,7
  9727  036E  1732               	bsf	___ftadd@sign,6
  9728  036F  17AC               	bsf	___ftadd@f1+1,7
  9729  0370  30FF               	movlw	255
  9730  0371  05AB               	andwf	___ftadd@f1,f
  9731  0372  30FF               	movlw	255
  9732  0373  05AC               	andwf	___ftadd@f1+1,f
  9733  0374  3000               	movlw	0
  9734  0375  05AD               	andwf	___ftadd@f1+2,f
  9735  0376  17AF               	bsf	___ftadd@f2+1,7
  9736  0377  30FF               	movlw	255
  9737  0378  05AE               	andwf	___ftadd@f2,f
  9738  0379  30FF               	movlw	255
  9739  037A  05AF               	andwf	___ftadd@f2+1,f
  9740  037B  3000               	movlw	0
  9741  037C  05B0               	andwf	___ftadd@f2+2,f
  9742  037D  0833               	movf	___ftadd@exp2,w
  9743  037E  0234               	subwf	___ftadd@exp1,w
  9744  037F  1803               	skipnc
  9745  0380  2BA3               	goto	l3809
  9746  0381                     l3797:	
  9747  0381  3001               	movlw	1
  9748  0382                     u3955:	
  9749  0382  35AE               	lslf	___ftadd@f2,f
  9750  0383  0DAF               	rlf	___ftadd@f2+1,f
  9751  0384  0DB0               	rlf	___ftadd@f2+2,f
  9752  0385  0B89               	decfsz	9,f
  9753  0386  2B82               	goto	u3955
  9754  0387  3001               	movlw	1
  9755  0388  02B3               	subwf	___ftadd@exp2,f
  9756  0389  0833               	movf	___ftadd@exp2,w
  9757  038A  0634               	xorwf	___ftadd@exp1,w
  9758  038B  1903               	skipnz
  9759  038C  2B9E               	goto	l3807
  9760  038D  3001               	movlw	1
  9761  038E  02B2               	subwf	___ftadd@sign,f
  9762  038F  0832               	movf	___ftadd@sign,w
  9763  0390  3907               	andlw	7
  9764  0391  1903               	btfsc	3,2
  9765  0392  2B9E               	goto	l3807
  9766  0393  2B81               	goto	l3797
  9767  0394                     l3803:	
  9768  0394  3001               	movlw	1
  9769  0395                     u3985:	
  9770  0395  36AD               	lsrf	___ftadd@f1+2,f
  9771  0396  0CAC               	rrf	___ftadd@f1+1,f
  9772  0397  0CAB               	rrf	___ftadd@f1,f
  9773  0398  0B89               	decfsz	9,f
  9774  0399  2B95               	goto	u3985
  9775  039A  3001               	movlw	1
  9776  039B  00FF               	movwf	127
  9777  039C  087F               	movf	127,w
  9778  039D  07B4               	addwf	___ftadd@exp1,f
  9779  039E                     l3807:	
  9780  039E  0834               	movf	___ftadd@exp1,w
  9781  039F  0633               	xorwf	___ftadd@exp2,w
  9782  03A0  1903               	btfsc	3,2
  9783  03A1  2BC8               	goto	l777
  9784  03A2  2B94               	goto	l3803
  9785  03A3                     l3809:	
  9786  03A3  0834               	movf	___ftadd@exp1,w
  9787  03A4  0233               	subwf	___ftadd@exp2,w
  9788  03A5  1803               	skipnc
  9789  03A6  2BC8               	goto	l777
  9790  03A7                     l3811:	
  9791  03A7  3001               	movlw	1
  9792  03A8                     u4015:	
  9793  03A8  35AB               	lslf	___ftadd@f1,f
  9794  03A9  0DAC               	rlf	___ftadd@f1+1,f
  9795  03AA  0DAD               	rlf	___ftadd@f1+2,f
  9796  03AB  0B89               	decfsz	9,f
  9797  03AC  2BA8               	goto	u4015
  9798  03AD  3001               	movlw	1
  9799  03AE  02B4               	subwf	___ftadd@exp1,f
  9800  03AF  0833               	movf	___ftadd@exp2,w
  9801  03B0  0634               	xorwf	___ftadd@exp1,w
  9802  03B1  1903               	skipnz
  9803  03B2  2BC4               	goto	l3821
  9804  03B3  3001               	movlw	1
  9805  03B4  02B2               	subwf	___ftadd@sign,f
  9806  03B5  0832               	movf	___ftadd@sign,w
  9807  03B6  3907               	andlw	7
  9808  03B7  1903               	btfsc	3,2
  9809  03B8  2BC4               	goto	l3821
  9810  03B9  2BA7               	goto	l3811
  9811  03BA                     l3817:	
  9812  03BA  3001               	movlw	1
  9813  03BB                     u4045:	
  9814  03BB  36B0               	lsrf	___ftadd@f2+2,f
  9815  03BC  0CAF               	rrf	___ftadd@f2+1,f
  9816  03BD  0CAE               	rrf	___ftadd@f2,f
  9817  03BE  0B89               	decfsz	9,f
  9818  03BF  2BBB               	goto	u4045
  9819  03C0  3001               	movlw	1
  9820  03C1  00FF               	movwf	127
  9821  03C2  087F               	movf	127,w
  9822  03C3  07B3               	addwf	___ftadd@exp2,f
  9823  03C4                     l3821:	
  9824  03C4  0834               	movf	___ftadd@exp1,w
  9825  03C5  0633               	xorwf	___ftadd@exp2,w
  9826  03C6  1D03               	skipz
  9827  03C7  2BBA               	goto	l3817
  9828  03C8                     l777:	
  9829  03C8  1FB2               	btfss	___ftadd@sign,7
  9830  03C9  2BDA               	goto	l3825
  9831  03CA  30FF               	movlw	255
  9832  03CB  06AB               	xorwf	___ftadd@f1,f
  9833  03CC  30FF               	movlw	255
  9834  03CD  06AC               	xorwf	___ftadd@f1+1,f
  9835  03CE  30FF               	movlw	255
  9836  03CF  06AD               	xorwf	___ftadd@f1+2,f
  9837  03D0  3001               	movlw	1
  9838  03D1  07AB               	addwf	___ftadd@f1,f
  9839  03D2  3000               	movlw	0
  9840  03D3  1803               	skipnc
  9841  03D4  3001               	movlw	1
  9842  03D5  07AC               	addwf	___ftadd@f1+1,f
  9843  03D6  3000               	movlw	0
  9844  03D7  1803               	skipnc
  9845  03D8  3001               	movlw	1
  9846  03D9  07AD               	addwf	___ftadd@f1+2,f
  9847  03DA                     l3825:	
  9848  03DA  1F32               	btfss	___ftadd@sign,6
  9849  03DB  2BEC               	goto	l3829
  9850  03DC  30FF               	movlw	255
  9851  03DD  06AE               	xorwf	___ftadd@f2,f
  9852  03DE  30FF               	movlw	255
  9853  03DF  06AF               	xorwf	___ftadd@f2+1,f
  9854  03E0  30FF               	movlw	255
  9855  03E1  06B0               	xorwf	___ftadd@f2+2,f
  9856  03E2  3001               	movlw	1
  9857  03E3  07AE               	addwf	___ftadd@f2,f
  9858  03E4  3000               	movlw	0
  9859  03E5  1803               	skipnc
  9860  03E6  3001               	movlw	1
  9861  03E7  07AF               	addwf	___ftadd@f2+1,f
  9862  03E8  3000               	movlw	0
  9863  03E9  1803               	skipnc
  9864  03EA  3001               	movlw	1
  9865  03EB  07B0               	addwf	___ftadd@f2+2,f
  9866  03EC                     l3829:	
  9867  03EC  01B2               	clrf	___ftadd@sign
  9868  03ED  082B               	movf	___ftadd@f1,w
  9869  03EE  07AE               	addwf	___ftadd@f2,f
  9870  03EF  082C               	movf	___ftadd@f1+1,w
  9871  03F0  3DAF               	addwfc	___ftadd@f2+1,f
  9872  03F1  082D               	movf	___ftadd@f1+2,w
  9873  03F2  3DB0               	addwfc	___ftadd@f2+2,f
  9874  03F3  1FB0               	btfss	___ftadd@f2+2,7
  9875  03F4  2C07               	goto	l3839
  9876  03F5  30FF               	movlw	255
  9877  03F6  06AE               	xorwf	___ftadd@f2,f
  9878  03F7  30FF               	movlw	255
  9879  03F8  06AF               	xorwf	___ftadd@f2+1,f
  9880  03F9  30FF               	movlw	255
  9881  03FA  06B0               	xorwf	___ftadd@f2+2,f
  9882  03FB  3001               	movlw	1
  9883  03FC  07AE               	addwf	___ftadd@f2,f
  9884  03FD  3000               	movlw	0
  9885  03FE  1803               	skipnc
  9886  03FF  3001               	movlw	1
  9887  0400  07AF               	addwf	___ftadd@f2+1,f
  9888  0401  3000               	movlw	0
  9889  0402  1803               	skipnc
  9890  0403  3001               	movlw	1
  9891  0404  07B0               	addwf	___ftadd@f2+2,f
  9892  0405  01B2               	clrf	___ftadd@sign
  9893  0406  0AB2               	incf	___ftadd@sign,f
  9894  0407                     l3839:	
  9895  0407  082E               	movf	___ftadd@f2,w
  9896  0408  00A6               	movwf	___ftpack@arg
  9897  0409  082F               	movf	___ftadd@f2+1,w
  9898  040A  00A7               	movwf	___ftpack@arg+1
  9899  040B  0830               	movf	___ftadd@f2+2,w
  9900  040C  00A8               	movwf	___ftpack@arg+2
  9901  040D  0834               	movf	___ftadd@exp1,w
  9902  040E  00FF               	movwf	127
  9903  040F  087F               	movf	127,w
  9904  0410  00A9               	movwf	___ftpack@exp
  9905  0411  0832               	movf	___ftadd@sign,w
  9906  0412  00FF               	movwf	127
  9907  0413  087F               	movf	127,w
  9908  0414  00AA               	movwf	___ftpack@sign
  9909  0415  318D  255A         	fcall	___ftpack
  9910  0417  0020               	movlb	0	; select bank0
  9911  0418  0826               	movf	?___ftpack,w
  9912  0419  00AB               	movwf	?___ftadd
  9913  041A  0827               	movf	?___ftpack+1,w
  9914  041B  00AC               	movwf	?___ftadd+1
  9915  041C  0828               	movf	?___ftpack+2,w
  9916  041D  00AD               	movwf	?___ftadd+2
  9917  041E  0008               	return
  9918  041F                     __end_of___ftadd:	
  9919                           
  9920                           	psect	text44
  9921  09D7                     __ptext44:	
  9922 ;; *************** function ___awtoft *****************
  9923 ;; Defined at:
  9924 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9925 ;; Parameters:    Size  Location     Type
  9926 ;;  c               2    0[COMMON] int 
  9927 ;; Auto vars:     Size  Location     Type
  9928 ;;  sign            1    3[COMMON] unsigned char 
  9929 ;; Return value:  Size  Location     Type
  9930 ;;                  3    0[COMMON] float 
  9931 ;; Registers used:
  9932 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9933 ;; Tracked objects:
  9934 ;;		On entry : 0/0
  9935 ;;		On exit  : 0/0
  9936 ;;		Unchanged: 0/0
  9937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9938 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9939 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9941 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9942 ;;Total ram usage:        4 bytes
  9943 ;; Hardware stack levels used:    1
  9944 ;; Hardware stack levels required when called:    8
  9945 ;; This function calls:
  9946 ;;		___ftpack
  9947 ;; This function is called by:
  9948 ;;		_getADCValue
  9949 ;; This function uses a non-reentrant model
  9950 ;;
  9951                           
  9952                           
  9953                           ;psect for function ___awtoft
  9954  09D7                     ___awtoft:	
  9955                           
  9956                           ;incstack = 0
  9957                           ; Regs used in ___awtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9958  09D7  01F3               	clrf	___awtoft@sign
  9959  09D8  1FF1               	btfss	___awtoft@c+1,7
  9960  09D9  29E1               	goto	l4343
  9961  09DA  09F0               	comf	___awtoft@c,f
  9962  09DB  09F1               	comf	___awtoft@c+1,f
  9963  09DC  0AF0               	incf	___awtoft@c,f
  9964  09DD  1903               	skipnz
  9965  09DE  0AF1               	incf	___awtoft@c+1,f
  9966  09DF  01F3               	clrf	___awtoft@sign
  9967  09E0  0AF3               	incf	___awtoft@sign,f
  9968  09E1                     l4343:	
  9969  09E1  0870               	movf	___awtoft@c,w
  9970  09E2  0020               	movlb	0	; select bank0
  9971  09E3  00A6               	movwf	___ftpack@arg
  9972  09E4  0871               	movf	___awtoft@c+1,w
  9973  09E5  00A7               	movwf	___ftpack@arg+1
  9974  09E6  01A8               	clrf	___ftpack@arg+2
  9975  09E7  308E               	movlw	142
  9976  09E8  00FF               	movwf	127
  9977  09E9  087F               	movf	127,w
  9978  09EA  00A9               	movwf	___ftpack@exp
  9979  09EB  0873               	movf	___awtoft@sign,w
  9980  09EC  00FF               	movwf	127
  9981  09ED  087F               	movf	127,w
  9982  09EE  00AA               	movwf	___ftpack@sign
  9983  09EF  318D  255A         	fcall	___ftpack
  9984  09F1  0020               	movlb	0	; select bank0
  9985  09F2  0826               	movf	?___ftpack,w
  9986  09F3  00F0               	movwf	?___awtoft
  9987  09F4  0827               	movf	?___ftpack+1,w
  9988  09F5  00F1               	movwf	?___awtoft+1
  9989  09F6  0828               	movf	?___ftpack+2,w
  9990  09F7  00F2               	movwf	?___awtoft+2
  9991  09F8  0008               	return
  9992  09F9                     __end_of___awtoft:	
  9993                           
  9994                           	psect	text45
  9995  089D                     __ptext45:	
  9996 ;; *************** function ___lwtoft *****************
  9997 ;; Defined at:
  9998 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
  9999 ;; Parameters:    Size  Location     Type
 10000 ;;  c               2    0[COMMON] unsigned int 
 10001 ;; Auto vars:     Size  Location     Type
 10002 ;;		None
 10003 ;; Return value:  Size  Location     Type
 10004 ;;                  3    0[COMMON] float 
 10005 ;; Registers used:
 10006 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
 10007 ;; Tracked objects:
 10008 ;;		On entry : 0/0
 10009 ;;		On exit  : 0/0
 10010 ;;		Unchanged: 0/0
 10011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10012 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10015 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10016 ;;Total ram usage:        3 bytes
 10017 ;; Hardware stack levels used:    1
 10018 ;; Hardware stack levels required when called:    8
 10019 ;; This function calls:
 10020 ;;		___ftpack
 10021 ;; This function is called by:
 10022 ;;		_loop
 10023 ;;		_hcsr04GetAerage
 10024 ;; This function uses a non-reentrant model
 10025 ;;
 10026                           
 10027                           
 10028                           ;psect for function ___lwtoft
 10029  089D                     ___lwtoft:	
 10030                           
 10031                           ;incstack = 0
 10032                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
 10033  089D  0870               	movf	___lwtoft@c,w
 10034  089E  0020               	movlb	0	; select bank0
 10035  089F  00A6               	movwf	___ftpack@arg
 10036  08A0  0871               	movf	___lwtoft@c+1,w
 10037  08A1  00A7               	movwf	___ftpack@arg+1
 10038  08A2  01A8               	clrf	___ftpack@arg+2
 10039  08A3  308E               	movlw	142
 10040  08A4  00FF               	movwf	127
 10041  08A5  087F               	movf	127,w
 10042  08A6  00A9               	movwf	___ftpack@exp
 10043  08A7  01AA               	clrf	___ftpack@sign
 10044  08A8  318D  255A         	fcall	___ftpack
 10045  08AA  0020               	movlb	0	; select bank0
 10046  08AB  0826               	movf	?___ftpack,w
 10047  08AC  00F0               	movwf	?___lwtoft
 10048  08AD  0827               	movf	?___ftpack+1,w
 10049  08AE  00F1               	movwf	?___lwtoft+1
 10050  08AF  0828               	movf	?___ftpack+2,w
 10051  08B0  00F2               	movwf	?___lwtoft+2
 10052  08B1  0008               	return
 10053  08B2                     __end_of___lwtoft:	
 10054                           
 10055                           	psect	text46
 10056  08CB                     __ptext46:	
 10057 ;; *************** function ___lbtoft *****************
 10058 ;; Defined at:
 10059 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
 10060 ;; Parameters:    Size  Location     Type
 10061 ;;  c               1    wreg     unsigned char 
 10062 ;; Auto vars:     Size  Location     Type
 10063 ;;  c               1   11[BANK0 ] unsigned char 
 10064 ;; Return value:  Size  Location     Type
 10065 ;;                  3    0[COMMON] float 
 10066 ;; Registers used:
 10067 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
 10068 ;; Tracked objects:
 10069 ;;		On entry : 0/0
 10070 ;;		On exit  : 0/0
 10071 ;;		Unchanged: 0/0
 10072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10073 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10074 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10076 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10077 ;;Total ram usage:        5 bytes
 10078 ;; Hardware stack levels used:    1
 10079 ;; Hardware stack levels required when called:    8
 10080 ;; This function calls:
 10081 ;;		___ftpack
 10082 ;; This function is called by:
 10083 ;;		_main
 10084 ;; This function uses a non-reentrant model
 10085 ;;
 10086                           
 10087                           
 10088                           ;psect for function ___lbtoft
 10089  08CB                     ___lbtoft:	
 10090                           
 10091                           ;incstack = 0
 10092                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
 10093                           ;___lbtoft@c stored from wreg
 10094  08CB  0020               	movlb	0	; select bank0
 10095  08CC  00AB               	movwf	___lbtoft@c
 10096  08CD  082B               	movf	___lbtoft@c,w
 10097  08CE  00FD               	movwf	125
 10098  08CF  01FE               	clrf	126
 10099  08D0  01FF               	clrf	127
 10100  08D1  087D               	movf	125,w
 10101  08D2  00A6               	movwf	___ftpack@arg
 10102  08D3  087E               	movf	126,w
 10103  08D4  00A7               	movwf	___ftpack@arg+1
 10104  08D5  087F               	movf	127,w
 10105  08D6  00A8               	movwf	___ftpack@arg+2
 10106  08D7  308E               	movlw	142
 10107  08D8  00FF               	movwf	127
 10108  08D9  087F               	movf	127,w
 10109  08DA  00A9               	movwf	___ftpack@exp
 10110  08DB  01AA               	clrf	___ftpack@sign
 10111  08DC  318D  255A         	fcall	___ftpack
 10112  08DE  0020               	movlb	0	; select bank0
 10113  08DF  0826               	movf	?___ftpack,w
 10114  08E0  00F0               	movwf	?___lbtoft
 10115  08E1  0827               	movf	?___ftpack+1,w
 10116  08E2  00F1               	movwf	?___lbtoft+1
 10117  08E3  0828               	movf	?___ftpack+2,w
 10118  08E4  00F2               	movwf	?___lbtoft+2
 10119  08E5  0008               	return
 10120  08E6                     __end_of___lbtoft:	
 10121                           
 10122                           	psect	text47
 10123  0D5A                     __ptext47:	
 10124 ;; *************** function ___ftpack *****************
 10125 ;; Defined at:
 10126 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
 10127 ;; Parameters:    Size  Location     Type
 10128 ;;  arg             3    6[BANK0 ] unsigned um
 10129 ;;  exp             1    9[BANK0 ] unsigned char 
 10130 ;;  sign            1   10[BANK0 ] unsigned char 
 10131 ;; Auto vars:     Size  Location     Type
 10132 ;;		None
 10133 ;; Return value:  Size  Location     Type
 10134 ;;                  3    6[BANK0 ] float 
 10135 ;; Registers used:
 10136 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
 10137 ;; Tracked objects:
 10138 ;;		On entry : 0/0
 10139 ;;		On exit  : 0/0
 10140 ;;		Unchanged: 0/0
 10141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10142 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10145 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10146 ;;Total ram usage:        5 bytes
 10147 ;; Hardware stack levels used:    1
 10148 ;; Hardware stack levels required when called:    7
 10149 ;; This function calls:
 10150 ;;		Nothing
 10151 ;; This function is called by:
 10152 ;;		___awtoft
 10153 ;;		___ftadd
 10154 ;;		___ftdiv
 10155 ;;		___ftmul
 10156 ;;		___lbtoft
 10157 ;;		___lltoft
 10158 ;;		___lwtoft
 10159 ;; This function uses a non-reentrant model
 10160 ;;
 10161                           
 10162                           
 10163                           ;psect for function ___ftpack
 10164  0D5A                     ___ftpack:	
 10165                           
 10166                           ;incstack = 0
 10167                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+9-btemp+11]
 10168  0D5A  0020               	movlb	0	; select bank0
 10169  0D5B  0829               	movf	___ftpack@exp,w
 10170  0D5C  1903               	btfsc	3,2
 10171  0D5D  2D63               	goto	l3651
 10172  0D5E  0828               	movf	___ftpack@arg+2,w
 10173  0D5F  0427               	iorwf	___ftpack@arg+1,w
 10174  0D60  0426               	iorwf	___ftpack@arg,w
 10175  0D61  1D03               	skipz
 10176  0D62  2D74               	goto	l3659
 10177  0D63                     l3651:	
 10178  0D63  3000               	movlw	0
 10179  0D64  00A6               	movwf	?___ftpack
 10180  0D65  3000               	movlw	0
 10181  0D66  00A7               	movwf	?___ftpack+1
 10182  0D67  3000               	movlw	0
 10183  0D68  00A8               	movwf	?___ftpack+2
 10184  0D69  0008               	return
 10185  0D6A                     l3655:	
 10186  0D6A  3001               	movlw	1
 10187  0D6B  00FF               	movwf	127
 10188  0D6C  087F               	movf	127,w
 10189  0D6D  07A9               	addwf	___ftpack@exp,f
 10190  0D6E  3001               	movlw	1
 10191  0D6F                     u3625:	
 10192  0D6F  36A8               	lsrf	___ftpack@arg+2,f
 10193  0D70  0CA7               	rrf	___ftpack@arg+1,f
 10194  0D71  0CA6               	rrf	___ftpack@arg,f
 10195  0D72  0B89               	decfsz	9,f
 10196  0D73  2D6F               	goto	u3625
 10197  0D74                     l3659:	
 10198  0D74  30FE               	movlw	254
 10199  0D75  0528               	andwf	___ftpack@arg+2,w
 10200  0D76  1903               	btfsc	3,2
 10201  0D77  2D8D               	goto	l3667
 10202  0D78  2D6A               	goto	l3655
 10203  0D79                     l3661:	
 10204  0D79  3001               	movlw	1
 10205  0D7A  00FF               	movwf	127
 10206  0D7B  087F               	movf	127,w
 10207  0D7C  07A9               	addwf	___ftpack@exp,f
 10208  0D7D  3001               	movlw	1
 10209  0D7E  07A6               	addwf	___ftpack@arg,f
 10210  0D7F  3000               	movlw	0
 10211  0D80  1803               	skipnc
 10212  0D81  3001               	movlw	1
 10213  0D82  07A7               	addwf	___ftpack@arg+1,f
 10214  0D83  3000               	movlw	0
 10215  0D84  1803               	skipnc
 10216  0D85  3001               	movlw	1
 10217  0D86  07A8               	addwf	___ftpack@arg+2,f
 10218  0D87  3001               	movlw	1
 10219  0D88                     u3645:	
 10220  0D88  36A8               	lsrf	___ftpack@arg+2,f
 10221  0D89  0CA7               	rrf	___ftpack@arg+1,f
 10222  0D8A  0CA6               	rrf	___ftpack@arg,f
 10223  0D8B  0B89               	decfsz	9,f
 10224  0D8C  2D88               	goto	u3645
 10225  0D8D                     l3667:	
 10226  0D8D  30FF               	movlw	255
 10227  0D8E  0528               	andwf	___ftpack@arg+2,w
 10228  0D8F  1903               	btfsc	3,2
 10229  0D90  2D9A               	goto	l3671
 10230  0D91  2D79               	goto	l3661
 10231  0D92                     l3669:	
 10232  0D92  3001               	movlw	1
 10233  0D93  02A9               	subwf	___ftpack@exp,f
 10234  0D94  3001               	movlw	1
 10235  0D95                     u3665:	
 10236  0D95  35A6               	lslf	___ftpack@arg,f
 10237  0D96  0DA7               	rlf	___ftpack@arg+1,f
 10238  0D97  0DA8               	rlf	___ftpack@arg+2,f
 10239  0D98  0B89               	decfsz	9,f
 10240  0D99  2D95               	goto	u3665
 10241  0D9A                     l3671:	
 10242  0D9A  1BA7               	btfsc	___ftpack@arg+1,7
 10243  0D9B  2DA0               	goto	l753
 10244  0D9C  3002               	movlw	2
 10245  0D9D  0229               	subwf	___ftpack@exp,w
 10246  0D9E  1803               	skipnc
 10247  0D9F  2D92               	goto	l3669
 10248  0DA0                     l753:	
 10249  0DA0  1829               	btfsc	___ftpack@exp,0
 10250  0DA1  2DA8               	goto	l754
 10251  0DA2  30FF               	movlw	255
 10252  0DA3  05A6               	andwf	___ftpack@arg,f
 10253  0DA4  307F               	movlw	127
 10254  0DA5  05A7               	andwf	___ftpack@arg+1,f
 10255  0DA6  30FF               	movlw	255
 10256  0DA7  05A8               	andwf	___ftpack@arg+2,f
 10257  0DA8                     l754:	
 10258  0DA8  1003               	clrc
 10259  0DA9  0CA9               	rrf	___ftpack@exp,f
 10260  0DAA  0829               	movf	___ftpack@exp,w
 10261  0DAB  00FD               	movwf	125
 10262  0DAC  01FE               	clrf	126
 10263  0DAD  01FF               	clrf	127
 10264  0DAE  3010               	movlw	16
 10265  0DAF                     u3705:	
 10266  0DAF  35FD               	lslf	125,f
 10267  0DB0  0DFE               	rlf	126,f
 10268  0DB1  0DFF               	rlf	127,f
 10269  0DB2  0B89               	decfsz	9,f
 10270  0DB3  2DAF               	goto	u3705
 10271  0DB4  087D               	movf	125,w
 10272  0DB5  04A6               	iorwf	___ftpack@arg,f
 10273  0DB6  087E               	movf	126,w
 10274  0DB7  04A7               	iorwf	___ftpack@arg+1,f
 10275  0DB8  087F               	movf	127,w
 10276  0DB9  04A8               	iorwf	___ftpack@arg+2,f
 10277  0DBA  082A               	movf	___ftpack@sign,w
 10278  0DBB  1903               	btfsc	3,2
 10279  0DBC  0008               	return
 10280  0DBD  17A8               	bsf	___ftpack@arg+2,7
 10281  0DBE  0008               	return
 10282  0DBF                     __end_of___ftpack:	
 10283                           
 10284                           	psect	text48
 10285  0843                     __ptext48:	
 10286 ;; *************** function _EEPROMRead *****************
 10287 ;; Defined at:
 10288 ;;		line 29 in file "eeprom.c"
 10289 ;; Parameters:    Size  Location     Type
 10290 ;;  address         2    0[COMMON] unsigned int 
 10291 ;; Auto vars:     Size  Location     Type
 10292 ;;		None
 10293 ;; Return value:  Size  Location     Type
 10294 ;;                  1    wreg      unsigned char 
 10295 ;; Registers used:
 10296 ;;		wreg, status,2
 10297 ;; Tracked objects:
 10298 ;;		On entry : 0/0
 10299 ;;		On exit  : 0/0
 10300 ;;		Unchanged: 0/0
 10301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10302 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;Total ram usage:        2 bytes
 10307 ;; Hardware stack levels used:    1
 10308 ;; Hardware stack levels required when called:    7
 10309 ;; This function calls:
 10310 ;;		Nothing
 10311 ;; This function is called by:
 10312 ;;		_main
 10313 ;; This function uses a non-reentrant model
 10314 ;;
 10315                           
 10316                           
 10317                           ;psect for function _EEPROMRead
 10318  0843                     _EEPROMRead:	
 10319                           
 10320                           ;eeprom.c: 30: NVMADRH = ((address >> 8) & 0xFF);
 10321                           
 10322                           ;incstack = 0
 10323                           ; Regs used in _EEPROMRead: [wreg+status,2]
 10324  0843  0871               	movf	EEPROMRead@address+1,w
 10325  0844  0031               	movlb	17	; select bank17
 10326  0845  0092               	movwf	18	;volatile
 10327                           
 10328                           ;eeprom.c: 31: NVMADRL = (address & 0xFF);
 10329  0846  0870               	movf	EEPROMRead@address,w
 10330  0847  0091               	movwf	17	;volatile
 10331                           
 10332                           ;eeprom.c: 32: NVMCON1bits.NVMREGS = 1;
 10333  0848  1715               	bsf	21,6	;volsfr
 10334                           
 10335                           ;eeprom.c: 33: NVMCON1bits.RD = 1;
 10336  0849  1415               	bsf	21,0	;volsfr
 10337                           
 10338                           ;eeprom.c: 34: __nop();
 10339  084A  0000               	nop
 10340                           
 10341                           ;eeprom.c: 35: __nop();
 10342  084B  0000               	nop
 10343                           
 10344                           ;eeprom.c: 37: return (NVMDATL);
 10345  084C  0031               	movlb	17	; select bank17
 10346  084D  0813               	movf	19,w	;volatile
 10347  084E  0008               	return
 10348  084F                     __end_of_EEPROMRead:	
 10349                           
 10350                           	psect	intentry
 10351  0004                     __pintentry:	
 10352 ;; *************** function _ISR *****************
 10353 ;; Defined at:
 10354 ;;		line 13 in file "main.c"
 10355 ;; Parameters:    Size  Location     Type
 10356 ;;		None
 10357 ;; Auto vars:     Size  Location     Type
 10358 ;;		None
 10359 ;; Return value:  Size  Location     Type
 10360 ;;                  1    wreg      void 
 10361 ;; Registers used:
 10362 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath, cstack
 10363 ;; Tracked objects:
 10364 ;;		On entry : 0/0
 10365 ;;		On exit  : 0/0
 10366 ;;		Unchanged: 0/0
 10367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10370 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10371 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10372 ;;Total ram usage:        6 bytes
 10373 ;; Hardware stack levels used:    1
 10374 ;; Hardware stack levels required when called:    6
 10375 ;; This function calls:
 10376 ;;		_nrf24l01ISR
 10377 ;; This function is called by:
 10378 ;;		Interrupt level 1
 10379 ;; This function uses a non-reentrant model
 10380 ;;
 10381                           
 10382  0004                     _ISR:	
 10383                           
 10384                           ;incstack = 0
 10385                           ; Regs used in _ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+9+btemp+11+p
      +                          clath+cstack]
 10386  0004  3180               	pagesel	$
 10387  0005  0874               	movf	116,w
 10388  0006  0020               	movlb	0	; select bank0
 10389  0007  00A0               	movwf	??_ISR
 10390  0008  0875               	movf	117,w
 10391  0009  00A1               	movwf	??_ISR+1
 10392  000A  087C               	movf	124,w
 10393  000B  00A2               	movwf	??_ISR+2
 10394  000C  087D               	movf	125,w
 10395  000D  00A3               	movwf	??_ISR+3
 10396  000E  087F               	movf	127,w
 10397  000F  00A4               	movwf	??_ISR+4
 10398  0010  30AF               	movlw	low ___int_sp
 10399  0011  0086               	movwf	6
 10400  0012  3022               	movlw	high ___int_sp
 10401  0013  0087               	movwf	7
 10402  0014  0875               	movf	117,w
 10403  0015  00A5               	movwf	??_ISR+5
 10404                           
 10405                           ;main.c: 20: if (PIR0bits.INTF){
 10406  0016  1C10               	btfss	16,0	;volatile
 10407  0017  281C               	goto	i1l4769
 10408                           
 10409                           ;main.c: 21: nrf24l01ISR();
 10410  0018  318C  247A         	fcall	_nrf24l01ISR
 10411                           
 10412                           ;main.c: 22: PIR0bits.INTF = 0;
 10413  001A  0020               	movlb	0	; select bank0
 10414  001B  1010               	bcf	16,0	;volatile
 10415  001C                     i1l4769:	
 10416                           
 10417                           ;main.c: 23: };main.c: 25: if (PIR1bits.ADIF){
 10418  001C  1B11               	btfsc	17,6	;volatile
 10419                           
 10420                           ;main.c: 26: PIR1bits.ADIF = 0;
 10421  001D  1311               	bcf	17,6	;volatile
 10422  001E  0825               	movf	??_ISR+5,w
 10423  001F  00FF               	movwf	127
 10424  0020  0824               	movf	??_ISR+4,w
 10425  0021  00FD               	movwf	125
 10426  0022  0823               	movf	??_ISR+3,w
 10427  0023  00FC               	movwf	124
 10428  0024  0822               	movf	??_ISR+2,w
 10429  0025  00F5               	movwf	117
 10430  0026  0821               	movf	??_ISR+1,w
 10431  0027  00F4               	movwf	116
 10432  0028  0009               	retfie
 10433  0029                     __end_of_ISR:	
 10434                           
 10435                           	psect	text50
 10436  0C7A                     __ptext50:	
 10437 ;; *************** function _nrf24l01ISR *****************
 10438 ;; Defined at:
 10439 ;;		line 151 in file "nrf24l01.c"
 10440 ;; Parameters:    Size  Location     Type
 10441 ;;		None
 10442 ;; Auto vars:     Size  Location     Type
 10443 ;;		None
 10444 ;; Return value:  Size  Location     Type
 10445 ;;                  1    wreg      void 
 10446 ;; Registers used:
 10447 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath
 10448 ;; Tracked objects:
 10449 ;;		On entry : 0/0
 10450 ;;		On exit  : 0/0
 10451 ;;		Unchanged: 0/0
 10452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10457 ;;Total ram usage:        0 bytes
 10458 ;; Hardware stack levels used:    1
 10459 ;; Hardware stack levels required when called:    5
 10460 ;; This function calls:
 10461 ;;		_nrf24l01Send
 10462 ;;		_nrf24l01Service
 10463 ;;		_nrf24l01SetRXMode
 10464 ;; This function is called by:
 10465 ;;		_ISR
 10466 ;; This function uses a non-reentrant model
 10467 ;;
 10468                           
 10469                           
 10470                           ;psect for function _nrf24l01ISR
 10471  0C7A                     _nrf24l01ISR:	
 10472                           
 10473                           ;nrf24l01.c: 153: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
 10474                           
 10475                           ;incstack = 0
 10476                           ; Regs used in _nrf24l01ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+9+bt
      +                          emp+11+pclath]
 10477  0C7A  3000               	movlw	0
 10478  0C7B  001E               	movwi fsr1++
 10479  0C7C  3007               	movlw	7
 10480  0C7D  3188  208A  318C   	fcall	_nrf24l01Send
 10481  0C80  00FF               	movwf	127
 10482  0C81  087F               	movf	127,w
 10483  0C82  0020               	movlb	0	; select bank0
 10484  0C83  00E6               	movwf	_status+2	;volatile
 10485                           
 10486                           ;nrf24l01.c: 156: if (status.statusRegister.RX_DR){
 10487  0C84  1F66               	btfss	_status+2,6	;volatile
 10488  0C85  2C92               	goto	i1l4681
 10489                           
 10490                           ;nrf24l01.c: 159: if (status.RX == 0){
 10491  0C86  0865               	movf	_status+1,w	;volatile
 10492  0C87  1D03               	btfss	3,2
 10493  0C88  2C8E               	goto	i1l294
 10494                           
 10495                           ;nrf24l01.c: 160: status.RX = 1;
 10496  0C89  3001               	movlw	1
 10497  0C8A  00FF               	movwf	127
 10498  0C8B  087F               	movf	127,w
 10499  0C8C  00E5               	movwf	_status+1	;volatile
 10500                           
 10501                           ;nrf24l01.c: 161: }
 10502  0C8D  2C8F               	goto	i1l4679
 10503  0C8E                     i1l294:	
 10504                           
 10505                           ;nrf24l01.c: 163: else{;nrf24l01.c: 164: status.statusRegister.RX_DR = 0;
 10506  0C8E  1366               	bcf	_status+2,6	;volatile
 10507  0C8F                     i1l4679:	
 10508                           
 10509                           ;nrf24l01.c: 165: };nrf24l01.c: 167: nrf24l01Service();
 10510  0C8F  3186  26A7  318C   	fcall	_nrf24l01Service
 10511  0C92                     i1l4681:	
 10512                           
 10513                           ;nrf24l01.c: 168: };nrf24l01.c: 170: if (status.statusRegister.TX_DS){
 10514  0C92  0020               	movlb	0	; select bank0
 10515  0C93  1EE6               	btfss	_status+2,5	;volatile
 10516  0C94  2CB9               	goto	i1l4697
 10517                           
 10518                           ;nrf24l01.c: 175: if (lastTXPacket->packetData.ACKRequest){
 10519  0C95  0869               	movf	_lastTXPacket,w
 10520  0C96  0084               	movwf	4
 10521  0C97  3001               	movlw	1	; select bank2/3
 10522  0C98  0085               	movwf	5
 10523  0C99  1D00               	btfss	0,2
 10524  0C9A  2CA8               	goto	i1l4689
 10525                           
 10526                           ;nrf24l01.c: 176: status.TX = 3;
 10527  0C9B  3003               	movlw	3
 10528  0C9C  00FF               	movwf	127
 10529  0C9D  087F               	movf	127,w
 10530  0C9E  00E4               	movwf	_status	;volatile
 10531                           
 10532                           ;nrf24l01.c: 177: status.retryCount = 0xFF;
 10533  0C9F  30FF               	movlw	255
 10534  0CA0  00FF               	movwf	127
 10535  0CA1  087F               	movf	127,w
 10536  0CA2  00E8               	movwf	_status+4	;volatile
 10537                           
 10538                           ;nrf24l01.c: 178: nrf24l01SetRXMode(1);
 10539  0CA3  3001               	movlw	1
 10540  0CA4  318B  233A  318C   	fcall	_nrf24l01SetRXMode
 10541                           
 10542                           ;nrf24l01.c: 179: }
 10543  0CA7  2CB6               	goto	i1l4695
 10544  0CA8                     i1l4689:	
 10545                           
 10546                           ;nrf24l01.c: 183: else if(lastTXPacket->packetData.IsACK){
 10547  0CA8  0020               	movlb	0	; select bank0
 10548  0CA9  0869               	movf	_lastTXPacket,w
 10549  0CAA  0084               	movwf	4
 10550  0CAB  3001               	movlw	1	; select bank2/3
 10551  0CAC  0085               	movwf	5
 10552  0CAD  1D80               	btfss	0,3
 10553  0CAE  2CB4               	goto	i1l4693
 10554                           
 10555                           ;nrf24l01.c: 184: nrf24l01SetRXMode(1);
 10556  0CAF  3001               	movlw	1
 10557  0CB0  318B  233A  318C   	fcall	_nrf24l01SetRXMode
 10558                           
 10559                           ;nrf24l01.c: 185: }
 10560  0CB3  2CB6               	goto	i1l4695
 10561  0CB4                     i1l4693:	
 10562                           
 10563                           ;nrf24l01.c: 188: else{;nrf24l01.c: 189: status.TX = 0;
 10564  0CB4  0020               	movlb	0	; select bank0
 10565  0CB5  01E4               	clrf	_status	;volatile
 10566  0CB6                     i1l4695:	
 10567                           
 10568                           ;nrf24l01.c: 190: };nrf24l01.c: 192: nrf24l01Service();
 10569  0CB6  3186  26A7  318C   	fcall	_nrf24l01Service
 10570  0CB9                     i1l4697:	
 10571                           
 10572                           ;nrf24l01.c: 193: };nrf24l01.c: 198: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          7, status.statusRegister.byte);
 10573  0CB9  0020               	movlb	0	; select bank0
 10574  0CBA  0866               	movf	_status+2,w	;volatile
 10575  0CBB  001E               	movwi fsr1++
 10576  0CBC  3027               	movlw	39
 10577  0CBD  3188  208A         	fcall	_nrf24l01Send
 10578  0CBF  0008               	return
 10579  0CC0                     __end_of_nrf24l01ISR:	
 10580  0074                     btemp	set	116	;btemp
 10581  0074                     wtemp0	set	116
 10582  0076                     wtemp1	set	118
 10583  0078                     wtemp2	set	120
 10584  007A                     wtemp3	set	122
 10585  007C                     wtemp4	set	124
 10586  007E                     wtemp5	set	126
 10587  0074                     ttemp0	set	116
 10588  0077                     ttemp1	set	119
 10589  007A                     ttemp2	set	122
 10590  007D                     ttemp3	set	125
 10591  0074                     ltemp0	set	116
 10592  0078                     ltemp1	set	120
 10593  007C                     ltemp2	set	124
 10594  0076                     ltemp3	set	118


Data Sizes:
    Strings     38
    Constant    46
    Data        1
    BSS         130
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            4      4       4
    BANK0            80     68      74
    BANK1            80     60      74
    BANK2            80      0      45
    BANK3            80      0      66
    BANK4            80     45      45
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> sendMessage@ftoaStatus(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK3[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 
		 -> RXPacket(BANK3[33]), romDataMap(BANK2[28]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK3[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 
		 -> RXPacket(BANK3[33]), romDataMap(BANK2[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 33
		 -> romDataMap.name(BANK2[16]), packet.Message(BANK0[32]), packet.Message(BANK0[32]), main@packet(BANK1[33]), 
		 -> STR_6(CODE[4]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK2[17]), STR_7(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[6]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendTXBuffer@packet	PTR struct . size(1) Largest target is 33
		 -> TXPacket(BANK3[33]), RXPacket(BANK3[33]), 

    lastTXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), TXPacket(BANK3[33]), RXPacket(BANK3[33]), 

    nrf24l01SendPacket@txPacket	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK2[28]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sendMessage@topic	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_7(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[6]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    sendMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK2[28]), 


Critical Paths under _main in COMMON

    _main->___lbtoft
    _main->_nrf24l01SetTXPipe
    _main->_strcpy
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01GetPipe->___lwmod
    _sendMessage->___lbtoft
    _sendMessage->_strcpy
    _sleepListren->_sleepMs
    _nrf24l01SendPacket->_sleepMs
    _nrf24l01SendPacket->_strcpy
    _exception->_EEPROMWrite
    _ftoa->___lltoft
    _sprintf->___wmul
    ___ftsub->___lltoft
    _getADCValue->___awtoft
    _getADCValue->_sleepMs
    ___ftadd->___awtoft

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01GetPipe->___lwmod
    _sendMessage->_strcat
    _nrf24l01SendPacket->_strcpy
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    ___lwtoft->___ftpack
    ___lbtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sendMessage
    _loop->_sendMessage
    _sendMessage->_strcat
    _strcat->_ftoa

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_loop

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   98478
                                             67 BANK0      1     1      0
                                             26 BANK1     34    34      0
                         _EEPROMRead
                           ___lbtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                        _sendMessage
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    2274
                                             16 BANK0      1     1      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                9     9      0    2274
                                              7 BANK0      9     9      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    2     2      0     406
                                              3 COMMON     1     1      0
                                              6 BANK0      1     1      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     344
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    3     3      0     611
                                              0 COMMON     3     3      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      4     4      0     807
                                              7 BANK0      4     4      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     440
                                              0 COMMON     4     0      4
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _loop                                                45    45      0   62577
                                              0 BANK4     45    45      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft
                        _getADCValue
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _sendMessage                                          9     2      7   27374
                                             17 BANK1      9     2      7
                         _EEPROMRead (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                 _nrf24l01SendPacket
                       _sleepListren
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     751
                                             65 BANK0      2     2      0
                                             13 BANK1      4     0      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _sleepListren                                         2     0      2     920
                                              6 BANK0      2     0      2
                            _sleepMs
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendPacket                                   4     2      2    4427
                                              8 BANK0      4     2      2
                          _exception
                    _nrf24l01Service
                            _sleepMs
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     565
                                              0 COMMON     4     0      4
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    2567
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     968
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     618
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     463
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 (3) _exception                                            1     1      0     366
                                              6 BANK0      1     1      0
                        _EEPROMWrite
 ---------------------------------------------------------------------------------
 (4) _EEPROMWrite                                          4     1      3     335
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                13     9      4   19094
                                              0 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             34    24     10    3016
                                             27 BANK0     26    16     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      99
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     552
                                              0 COMMON     4     0      4
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     440
                                              0 COMMON     1     1      0
                                             19 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     449
                                              6 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             5     1      4    3741
                                              0 COMMON     4     0      4
                                             11 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             10     6      4     579
                                             55 BANK0     10     6      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6104
                                             21 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     273
                                             43 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             12     6      6    4439
                                             43 BANK0     12     6      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               6     0      6     406
                                              6 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                          9     6      3   15553
                                             34 BANK0      9     6      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            _sleepMs
 ---------------------------------------------------------------------------------
 (3) _sleepMs                                              4     2      2     785
                                              0 COMMON     4     2      2
                           _resetWDT
 ---------------------------------------------------------------------------------
 (4) _resetWDT                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             13     7      6    4995
                                             21 BANK0     13     7      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             10     4      6    5800
                                             11 BANK0     10     4      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3772
                                              0 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3878
                                              0 COMMON     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___lbtoft                                             5     1      4    3566
                                              0 COMMON     4     0      4
                                             11 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             5     0      5    3535
                                              6 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (1) _EEPROMRead                                           2     0      2     166
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  6     6      0    3648
                                              0 BANK0      6     6      0
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (10) _nrf24l01ISR                                         0     0      0    3648
                       _nrf24l01Send
                    _nrf24l01Service
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    2567
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     968
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     618
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     463
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROMRead
   ___lbtoft
     ___ftpack
   _loop
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
     ___lwtoft
       ___ftpack
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleepMs
         _resetWDT
     _sendMessage
       _EEPROMRead (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
       _memset (ARG)
       _nrf24l01SendPacket (ARG)
         _exception
           _EEPROMWrite
         _nrf24l01Service
           _memset
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
           _nrf24l01SendTXBuffer
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
             _nrf24l01SetRXMode
               _nrf24l01Send
                 _nrf24l01SPIEnd
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
             _strlen
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _strcmp
         _sleepMs
           _resetWDT
         _strcpy
       _sleepListren (ARG)
         _sleepMs
           _resetWDT
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _sleepMs
                   _resetWDT
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
       _strcpy (ARG)
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
     _nrf24l01SPISend
     _nrf24l01SPIStart
   _sendMessage
     _EEPROMRead (ARG)
     ___lbtoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleepMs
             _resetWDT
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleepMs
             _resetWDT
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleepMs
         _resetWDT
     _memset (ARG)
     _nrf24l01SendPacket (ARG)
       _exception
         _EEPROMWrite
       _nrf24l01Service
         _memset
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
         _nrf24l01SendTXBuffer
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _strlen
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _strcmp
       _sleepMs
         _resetWDT
       _strcpy
     _sleepListren (ARG)
       _sleepMs
         _resetWDT
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
     _strcpy (ARG)
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
     _nrf24l01Service
       _memset
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SendTXBuffer
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _strlen
       _nrf24l01SetRXMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _strcmp
     _nrf24l01SetRXMode
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            4      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               4      4       4       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       8       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     44      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     3C      4A       7       92.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      2D       9       56.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      42      11       82.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50     2D      2D      13       56.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     134      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     13C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Sep 03 16:41:22 2018

                ___bmul@product 0071                     __CFG_CP$OFF 0000                              l55 0871  
              sendMessage@value 00B5                sendMessage@topic 00B3             ___wmul@multiplicand 0072  
                  ___ftadd@exp1 0034                    ___ftadd@exp2 0033               sendMessage@packet 00B1  
                   __CFG_LVP$ON 0000                    ___ftadd@sign 0032                             l311 06C1  
                           l323 074F                             l350 09AD                             l176 0FB7  
                           l520 011D                             l266 0B73                             l517 00FE  
                           l349 09AE                             l543 092B                             l279 0969  
                           l753 0DA0                             l754 0DA8                             l837 0EB2  
                           l777 03C8                             l968 0B04                    __CFG_CPD$OFF 0000  
                           _ISR 0004                             wreg 0009                            ?_ISR 0070  
                  ___ftdiv@cntr 003C                    ___ftdiv@sign 0041                  ??_nrf24l01Init 0030  
                          l4011 018D                            l4021 01B7                            l4111 0663  
                          l4015 01A1                            l4007 017E                            l4201 0A37  
                          l4123 067F                            l4107 065B                            l4035 0211  
                          l4019 01B4                            l4029 01CC                            l4037 005B  
                          l4045 087B                            l4063 0B8C                            l4119 0677  
                          l4039 021C                            l4311 0CE4                            l4223 0AAD  
                          l4145 090B                            l4217 0ADE                            l4313 0CFB  
                          l4209 08B2                            l4225 0AB9                            l4049 0881  
                          l4067 0BA2                            l4091 0620                            l4155 0E5E  
                          l4331 0A1B                            l4227 0AC2                            l4421 0F7E  
                          l4085 060A                            l4173 0E8E                            l4261 0BF9  
                          l4343 09E1                            l4183 0EA9                            l4239 054E  
                          l4327 0A09                            l4263 0C17                            l4353 0768  
                          l4433 0FF1                            l4417 0F86                            l4185 0EB5  
                          l4177 0E9C                            l3633 0876                            l4329 09FC  
                          l4601 02A0                            l3651 0D63                            l3811 03A7  
                          l3803 0394                            l4435 0FF8                            l4419 0F91  
                          l3723 0868                            l4507 0725                            l4291 0975  
                          l4611 02EA                            l3661 0D79                            l3821 03C4  
                          l4429 0FD9                            l4189 0EC3                            l3901 0948  
                          l3671 0D9A                            l3655 0D6A                            l3807 039E  
                          l4359 077E                            l4199 0A27                            l3751 0D26  
                          l3903 0953                            l4519 0742                            l3825 03DA  
                          l3817 03BA                            l3809 03A3                            l4385 07D8  
                          l4377 07BF                            l3729 0924                            l3913 0B44  
                          l4465 06B2                            l4721 0B0B                            l4617 02F9  
                          l3667 0D8D                            l3659 0D74                            l3763 0D51  
                          l3851 0BBA                            l4723 0B2B                            l3669 0D92  
                          l3829 03EC                            l3749 0D18                            l3853 0BC8  
                          l3861 0BEB                            l4653 0A7F                            l3839 0407  
                          l3775 0351                            l3871 0A51                            l3759 0D46  
                          l3951 008E                            l3919 0B4C                            l4495 06F1  
                          l4655 0A8B                            l4663 0AA0                            l3785 0367  
                          l3873 0A5D                            l3857 0BE0                            l3945 007E  
                          l4497 0706                            l3779 0358                            l3883 0A6D  
                          l3971 00FA                            l4659 0A97                            l3797 0381  
                          l3973 0100                            l4853 0F57                            l3887 0A75  
                          l3983 012C                            l3959 00BC                            l3895 08EB  
                          l3993 014B                            l3977 0105                            l3969 00CB  
                          l3999 0151                            STR_1 1052                    __CFG_WDTE$ON 0000  
                          STR_2 1052                            STR_3 1034                            STR_4 1044  
                          STR_5 103F                            STR_6 104E                            STR_7 1049  
                          STR_8 1029                            u4015 03A8                            u4105 0BBD  
                          u4045 03BB                            u4125 0BD6                            u4135 0BE1  
                          u4164 0A59                            u4165 0A57                            u4405 0185  
                          u5205 0A98                            u4415 0197                            u3705 0DAF  
                          u3625 0D6F                            u4425 01A9                            u3645 0D88  
                          u3805 0D1B                            u4615 0680                            u5175 0A82  
                          u5407 09CD                            u3665 0D95                            u4625 0686  
                          u4545 062C                            u4705 0E8F                            u3825 0D27  
                          u4385 0174                            u5417 0D01                            u4555 063C  
                          u3835 0D3B                            u5427 0B56                            u5195 0A91  
                          u5275 0B19                            u3845 0D47                            u3765 092C  
                          u5437 0B67                            u4575 0664                            u4735 0EAA  
                          u3775 0931                            u5447 0B70                            u4585 066A  
                          u5457 083F                            u3955 0382                            u4675 0E65  
                          u5467 0832                            u5387 0EE8                            u4765 0A2C  
                          u5397 09C1                            u4935 0790                            u4864 096F  
                          u3985 0395                            u4945 07A0                            u4865 096E  
                          u4955 07C0                            u4965 07CF                            u4975 07D9  
                          _WPUA 020C                            _WPUC 020E  __size_of_nrf24l01InterfaceInit 001E  
                  __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 0999  
                          ___sp 216D                            _main 0ECC                            _ftoa 050C  
                  ___ftpack@arg 0026                            _loop 041F                    ___ftpack@exp 0029  
                          fsr0h 0005                            fsr1h 0007                            indf0 0000  
                          fsr0l 0004                            fsr1l 0006                            btemp 0074  
                 __CFG_BORV$LOW 0000                            start 0029           nrf24l01SetRXPipe@pipe 0071  
           __size_of_EEPROMRead 000C                   __CFG_CSWEN$ON 0000               ___bmul@multiplier 0072  
                 __CFG_MCLRE$ON 0000                    ___ftmul@cntr 0055                    ___ftmul@sign 0056  
   __size_of_nrf24l01SendPacket 0043                           ??_ISR 0020                    ___fttol@exp1 0060  
          __size_of_getADCValue 00A5                    ___fttol@lval 005C                           ?_main 0070  
                         ?_ftoa 00A0                           ?_loop 0070                 __end_of___ftadd 041F  
               __end_of___ftdiv 07FA                 __end_of___ftneg 0831                 __end_of___lldiv 0D5A  
               __end_of___ftmul 06A7                 EEPROMWrite@data 0072                 __end_of___llmod 0BF4  
               __end_of___ftsub 0921                 __end_of___fttol 0ECC                  __CFG_DEBUG$OFF 0000  
               __end_of___lwmod 0AA5                           i1l294 0C8E                           _TMR1H 001A  
                         _TMR1L 0019                   __CFG_PWRTE$ON 0000           nrf24l01SetTXPipe@pipe 0026  
                  ___lltoft@exp 002B                   ___awtoft@sign 0073                 __end_of_dpowers 1028  
               __end_of_isdigit 086A                   ___ftpack@sign 002A                           _rloop 00E4  
                         ftoa@f 00A0                           ftoa@l 00A8                  __CFG_BOREN$OFF 0000  
               __end_of_sleepMs 0A78                           ltemp0 0074                           ltemp1 0078  
                         ltemp2 007C                           ltemp3 0076                           ttemp0 0074  
                         ttemp1 0077                           ttemp2 007A                           ttemp3 007D  
                         status 0003                           wtemp0 0074                           wtemp1 0076  
                         wtemp2 0078                           wtemp3 007A                           wtemp4 007C  
                         wtemp5 007E                 __end_of_sprintf 0222               getADCValue@adcSum 0048  
              _nrf24l01SPIStart 083A            __size_of_EEPROMWrite 001F                 __initialization 002B  
        nrf24l01InitRegisters@i 002E                    __end_of_main 0F5B                    __end_of_ftoa 05F3  
                  __end_of_loop 050C                          ??_main 0063                   ___fttol@sign1 005B  
                        ??_ftoa 0074                          ??_loop 0074                    ?_sendMessage 00B1  
      __size_of_nrf24l01SPISend 000F                ___llmod@dividend 0037                          _ADRESH 009C  
                        _ADRESL 009B                __end_of___awtoft 09F9                          _ANSELA 018C  
                        _ANSELC 018E                __end_of___ftpack 0DBF                __end_of___lbtoft 08E6  
              __end_of___lltoft 0A4C                          _ODCONA 028C        __size_of_nrf24l01GetPipe 0034  
                        _ODCONC 028E                          i1l4681 0C92                          i1l4693 0CB4  
                        i1l4695 0CB6                          i1l4679 0C8F                          i1l4689 0CA8  
                        i1l4697 0CB9                          i1l4769 001C                          _INLVLA 038C  
                        _INLVLC 038E                __end_of___lwtoft 08B2        __size_of_nrf24l01Service 00AA  
          __size_of_nrf24l01ISR 0046                          ___bmul 0879                          ___ftge 0B75  
                        ___wmul 0921                       ??___ftadd 0031                  __CFG_STVREN$ON 0000  
                     ??___ftdiv 003B                       ??___ftneg 0074                       ??___lldiv 0070  
                     ??___ftmul 0074                       ??___llmod 0070                       ??___ftsub 0074  
                     ??___fttol 0074                       ??___lwmod 0074            __end_of_nrf24l01Init 09D7  
          __end_of_nrf24l01Send 089D                          _memset 0AD4           _nrf24l01InitRegisters 0222  
                        _rcount 00E0                          _rlimit 00E2                          _status 0064  
                        _strcat 0AA5                          _strcmp 09F9                          _strcpy 08E6  
                        _strlen 093F                          ftoa@cp 00AC           ___ftmul@f3_as_product 0052  
              __end_of_resetWDT 0828                    ??_EEPROMRead 0072                       ??_isdigit 0070  
                        loop@ta 0223                          loop@vt 0220                       ??_sleepMs 0072  
                     ??_sprintf 0045              getADCValue@adcLoop 0047         __end_of__initialization 004E  
                    ___ftadd@f1 002B                      ___ftadd@f2 002E                      ___ftge@ff1 0026  
                    ___ftge@ff2 0029              getADCValue@channel 0046                      ___ftdiv@f1 0038  
                    ___ftdiv@f2 0035                      ___ftdiv@f3 003D                      ___ftneg@f1 004B  
                    ___awtoft@c 0070                      ___lbtoft@c 002B             ___bmul@multiplicand 0070  
                    ___ftmul@f1 004B                      ___ftmul@f2 004E              __end_of_EEPROMRead 084F  
                    ___ftsub@f1 0038                      ___ftsub@f2 0035                      ___fttol@f1 0057  
                __pcstackCOMMON 0070                    __pidataBANK1 0003   __size_of_nrf24l01SendTXBuffer 0047  
                    ___lltoft@c 0070                      ___lwtoft@c 0070                    sprintf@width 0050  
                    __pbssBANK0 0064                      __pbssBANK1 00DC                      __pbssBANK2 0120  
                    __pbssBANK3 01A0           sendMessage@ftoaStatus 00B8              __size_of_exception 000D  
             ??_nrf24l01GetPipe 0027                      __pmaintext 0ECC                         ?___bmul 0070  
                       ?___ftge 0026                         ?___wmul 0070                 __CFG_PPS1WAY$ON 0000  
             _nrf24l01SetRXMode 0B3A               _nrf24l01SetRXPipe 095D          ?_nrf24l01InitRegisters 0070  
                    __pintentry 0004               _nrf24l01SetTXPipe 0C37                       ?___awtoft 0070  
                     ?___ftpack 0026                       ?___lbtoft 0070              ?_nrf24l01SetRXPipe 0070  
            ?_nrf24l01SetTXPipe 0070                       ?___lltoft 0070             __CFG_RSTOSC$HFINT32 0000  
                       ?_strcat 00AD                         ?_strcpy 0070                       ?___lwtoft 0070  
         __end_of_n_ADDRESS_MUL 1029            __size_of_sendMessage 0086        __end_of_nrf24l01SPIStart 0843  
           ??_nrf24l01SetRXPipe 0070             ??_nrf24l01SetTXPipe 0073                         _NVMADRH 0892  
                       _NVMADRL 0891                         _NVMDATL 0893                         _NVMCON2 0896  
                       _SSP1BUF 0211           _nrf24l01InterfaceInit 097B      __end_of_nrf24l01SendPacket 0C37  
                     ?_resetWDT 0070                   ??_getADCValue 0045           __size_of_nrf24l01Init 001F  
         __size_of_nrf24l01Send 0013       __end_of_nrf24l01SetRXMode 0B75       __end_of_nrf24l01SetRXPipe 097B  
                 ?_sleepListren 0026       __end_of_nrf24l01SetTXPipe 0C7A                 __size_of___bmul 0011  
               __size_of___ftge 003C                         ___ftadd 0329                         ___ftdiv 0751  
                       ___ftneg 0828                         ___lldiv 0D07                 __size_of___wmul 001E  
                       ___ftmul 05F3                         ___llmod 0BB1                         ___ftsub 0903  
                       ___fttol 0E45                         ___lwmod 0A78                      ??___awtoft 0073  
                    ??___ftpack 0070                      ??___lbtoft 0074                 __size_of_memset 0032  
        EEPROMWrite@GIEBitValue 0073                      ??___lltoft 0074                         __ptext1 09B8  
                       __ptext2 097B                         __ptext3 0222                         __ptext4 0C37  
                       __ptext5 0879                         __ptext6 095D                         __ptext7 0B06  
                       __ptext8 0A78                         __ptext9 041F                      ??___lwtoft 0073  
               __size_of_strcat 002F                 __size_of_strcmp 0029               __end_of_exception 085C  
               __size_of_strcpy 001D                 __size_of_strlen 001E                    __size_of_ISR 0025  
                     _T1CONbits 001B                         _counter 00E6                         _dpowers 1000  
                       _isdigit 085C                         _romData 00E9                         _sleepMs 0A4C  
                     _IOCAPbits 0391                         _waiting 00E8                         _sprintf 0055  
                       clrloop0 07FB            end_of_initialization 004E                         ftoa@buf 013C  
                       ftoa@rem 00A4                    _nrf24l01Init 09B8                    _nrf24l01Send 088A  
                    _romDataMap 0120                   ??_EEPROMWrite 0073                nrf24l01GetPipe@i 002A  
               ___lldiv@divisor 0026                 ___lldiv@counter 0032                      ??_resetWDT 0070  
                ??_sleepListren 0074             __end_of_getADCValue 1000                       _PORTAbits 000C  
                     _PORTCbits 000E                       _TRISAbits 008C                       _TRISCbits 008E  
              __CFG_FEXTOSC$OFF 0000                   ??_nrf24l01ISR 0070          ?_nrf24l01InterfaceInit 0070  
                   ___ftdiv@exp 0040                      main@packet 00BB      __size_of_nrf24l01SetRXMode 003B  
    __size_of_nrf24l01SetRXPipe 001E                     ___ftmul@exp 0051      __size_of_nrf24l01SetTXPipe 0043  
           __end_of_EEPROMWrite 09B8                  __end_of___bmul 088A                  __end_of___ftge 0BB1  
                __end_of___wmul 093F                  __end_of_memset 0B06                  __end_of_strcat 0AD4  
                __end_of_strcmp 0A22                    _lastTXPacket 0069                  __end_of_strcpy 0903  
                __end_of_strlen 095D             start_initialization 002B                 _nrf24l01SPISend 086A  
                   __end_of_ISR 0029    __end_of_nrf24l01SendTXBuffer 0D07                      ftoa@status 00A3  
     nrf24l01SetRXPipe@enRXAddr 0072                 _nrf24l01GetPipe 0B06         __size_of_nrf24l01SPIEnd 0009  
               ___llmod@divisor 0033                 ___llmod@counter 0070                 _nrf24l01Service 06A7  
       ??_nrf24l01InitRegisters 0027                __CFG_LPBOREN$OFF 0000                     _getADCValue 0F5B  
                      ??___bmul 0071                        ??___ftge 0070             __end_of_nrf24l01ISR 0CC0  
                      ??___wmul 0074                     __pdataBANK1 00E9                        ??_strcat 0074  
                      ??_strcpy 0074               __size_of___awtoft 0022               __size_of___ftpack 0065  
             __size_of___lbtoft 001B               __size_of___lltoft 002A                       ___latbits 0002  
             __size_of___lwtoft 0015                   __pcstackBANK0 0020                   __pcstackBANK1 00A0  
                 __pcstackBANK4 0220            __end_of_sleepListren 08CB                    _isdigit$1994 0070  
                   sprintf@flag 0049                     sprintf@prec 0052                      loop@packet 022C  
                   _EEPROMWrite 0999             nrf24l01GetPipe@name 0029             nrf24l01GetPipe@pipe 0028  
             __size_of_resetWDT 0007                        ?___ftadd 002B                        ?___ftdiv 0035  
                      ?___ftneg 004B                        ?___lldiv 0026                        ?___ftmul 004B  
                      ?___llmod 0033                        ?___ftsub 0035                        ?___fttol 0057  
                      ?___lwmod 0070            __end_of_n_ADDRESS_P0 103F         __end_of_nrf24l01SPISend 0879  
     nrf24l01InitRegisters@enAA 002C                   ??_sendMessage 0074              _nrf24l01SendPacket 0BF4  
           sleepMs@milliseconds 0070         __end_of_nrf24l01GetPipe 0B3A                        ?_isdigit 0070  
                     _loop$2247 0226                       _loop$2248 0229                        ?_sleepMs 0070  
                     _exception 084F             ?_nrf24l01SendPacket 0028                        ?_sprintf 003B  
            EEPROMWrite@address 0070         __end_of_nrf24l01Service 0751                  ___wmul@product 0026  
                   _nrf24l01ISR 0C7A                       clear_ram0 07FA                        _PIE0bits 0090  
                      _PIE1bits 0091                        _PIR0bits 0010                        _PIR1bits 0011  
          ??_nrf24l01SendPacket 0074                       _testCount 00DE            _nrf24l01SendTXBuffer 0CC0  
   nrf24l01SendPacket@loopCount 002A                      _ADCON0bits 009D                      _ADCON1bits 009E  
             ___wmul@multiplier 0070                        _WPUAbits 020C                        _RXPacket 01A0  
                      _TXPacket 01C1                      ?_exception 0070             sleepListren@seconds 0026  
           __end_of_sendMessage 0E45         ??_nrf24l01InterfaceInit 0070                  _nrf24l01SPIEnd 0831  
             EEPROMRead@address 0070                __size_of___ftadd 00F6                __size_of___ftdiv 00A9  
              __size_of___ftneg 0009                __size_of___lldiv 0053                __size_of___ftmul 00B4  
              __size_of___llmod 0043                __size_of___ftsub 001E                __size_of___fttol 0087  
              __size_of___lwmod 002D                        ___awtoft 09D7                        ___ftpack 0D5A  
                      ___lbtoft 08CB                        ___int_sp 22AF                        ___lltoft 0A22  
         __size_of_sleepListren 0019                      _ANSELAbits 018C                        ___lwtoft 089D  
                    _ANSELCbits 018E                      _EEPROMRead 0843                ?_nrf24l01GetPipe 0070  
                    sprintf@val 004B                   _n_ADDRESS_MUL 1028                      strcat@from 00AF  
              __size_of_isdigit 000E                        __ptext10 0DBF                        __ptext11 0AA5  
                      __ptext20 088A                        __ptext12 08B2                        __ptext21 083A  
                      __ptext13 0BF4                      _T1GCONbits 001C                        __ptext30 0921  
                      __ptext22 086A                        __ptext14 08E6                        __ptext31 0BB1  
                      __ptext23 0831                        __ptext15 06A7                        __ptext40 0A4C  
                      __ptext32 0D07                        __ptext24 0AD4                        __ptext16 09F9  
                      __ptext41 0821                        __ptext33 0A22                        __ptext25 084F  
                      __ptext17 0CC0                        __ptext50 0C7A                        __ptext42 0751  
                      __ptext34 0E45                        __ptext26 0999                        __ptext18 093F  
                      __ptext43 0329                        __ptext35 0903                        __ptext27 050C  
                      __ptext19 0B3A                        __ptext44 09D7                        __ptext36 0828  
                      __ptext28 0055                        __ptext45 089D                        __ptext37 05F3  
                      __ptext29 085C                        __ptext46 08CB                        __ptext38 0B75  
                      __ptext47 0D5A                        __ptext39 0F5B                        __ptext48 0843  
              __size_of_sleepMs 002C                    _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 083A  
                      _distance 00DC                __size_of_sprintf 01CD                     _OSCCON1bits 0919  
                    strcpy@from 0072                   __size_of_main 008F                   __size_of_ftoa 00E7  
                 __size_of_loop 00ED    nrf24l01InitRegisters@channel 0028    nrf24l01InitRegisters@feature 002A  
                  sleepMs@wdtps 0073              exception@exception 0026                      _RC0PPSbits 0EA0  
                      _resetWDT 0821    nrf24l01InitRegisters@rfSetup 002B                      _RC1PPSbits 0EA1  
                  ?_getADCValue 0042                      _RC2PPSbits 0EA2                    _sleepListren 08B2  
__size_of_nrf24l01InitRegisters 0107   __end_of_nrf24l01InitRegisters 0329    nrf24l01InitRegisters@setupAW 0029  
                    _ODCONAbits 028C                    _SSP1STATbits 0214                        main@pipe 00BA  
    nrf24l01SendPacket@txPacket 0028                     _sendMessage 0DBF                      _INTCONbits 000B  
                   _NVMCON1bits 0895                      _FVRCONbits 0117                     ??_exception 0074  
                __pstringtext10 0000                        isdigit@c 0071                        intlevel1 0000  
                     sprintf@ap 004A                       sprintf@sp 004F                    _n_ADDRESS_P0 103A  
              ___lwmod@dividend 0072                ___lldiv@dividend 002A                    ?_EEPROMWrite 0070  
             __CFG_CLKOUTEN$OFF 0000       __size_of_nrf24l01SPIStart 0009                   __pstringtext1 1000  
                 __pstringtext2 103A                   __pstringtext3 1028                   __pstringtext4 1034  
                 __pstringtext5 103F                   __pstringtext6 1044                   __pstringtext7 1049  
                 __pstringtext8 104E                   __pstringtext9 1052                        sprintf@c 0054  
                      sprintf@f 003B      nrf24l01InitRegisters@DynPD 002D                        strcat@cp 0061  
                      strcat@to 00AD                     ?_EEPROMRead 0070                ___lldiv@quotient 002E  
               ___lwmod@divisor 0070                        strcpy@cp 0026                        strcpy@to 0070  
               ___lwmod@counter 0026                      _WDTCONbits 0097                   ?_nrf24l01Init 0070  
                    _STATUSbits 0003                    ?_nrf24l01ISR 0070  
