

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Jul 23 08:42:39 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	_romArray_text,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	clrtext,global,class=CODE,delta=2
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    27                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text2,local,class=CODE,merge=1,delta=2
    29                           	psect	text3,local,class=CODE,merge=1,delta=2
    30                           	psect	text4,local,class=CODE,merge=1,delta=2
    31                           	psect	text5,local,class=CODE,merge=1,delta=2
    32                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text7,local,class=CODE,merge=1,delta=2
    34                           	psect	text8,local,class=CODE,merge=1,delta=2
    35                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text10,local,class=CODE,merge=1,delta=2
    37                           	psect	text11,local,class=CODE,merge=1,delta=2
    38                           	psect	text12,local,class=CODE,merge=1,delta=2
    39                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text16,local,class=CODE,merge=1,delta=2
    43                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text26,local,class=CODE,merge=1,delta=2
    53                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text28,local,class=CODE,merge=1,delta=2
    55                           	psect	text29,local,class=CODE,merge=1,delta=2
    56                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text36,local,class=CODE,merge=1,delta=2
    63                           	psect	text37,local,class=CODE,merge=1,delta=2
    64                           	psect	text38,local,class=CODE,merge=1,delta=2
    65                           	psect	text39,local,class=CODE,merge=1,delta=2
    66                           	psect	text40,local,class=CODE,merge=1,delta=2
    67                           	psect	text41,local,class=CODE,merge=1,delta=2
    68                           	psect	intentry,global,class=CODE,delta=2
    69                           	psect	text43,local,class=CODE,merge=1,delta=2
    70                           	psect	text44,local,class=CODE,merge=1,delta=2
    71                           	psect	text45,local,class=CODE,merge=1,delta=2
    72                           	psect	text46,local,class=CODE,merge=1,delta=2
    73                           	psect	text47,local,class=CODE,merge=1,delta=2
    74                           	psect	text48,local,class=CODE,merge=1,delta=2
    75                           	psect	text49,local,class=CODE,merge=1,delta=2
    76                           	psect	text50,local,class=CODE,merge=1,delta=2
    77                           	psect	text51,local,class=CODE,merge=1,delta=2
    78                           	psect	text52,local,class=CODE,merge=1,delta=2
    79                           	psect	text53,local,class=CODE,merge=1,delta=2
    80                           	psect	text54,local,class=CODE,merge=1,delta=2
    81                           	psect	text55,local,class=CODE,merge=1,delta=2
    82                           	psect	text56,local,class=CODE,merge=1,delta=2
    83                           	psect	text57,local,class=CODE,merge=1,delta=2,group=2
    84                           	psect	text58,local,class=CODE,merge=1,delta=2
    85                           	psect	text59,local,class=CODE,merge=1,delta=2
    86                           	psect	text60,local,class=CODE,merge=1,delta=2
    87                           	psect	text61,local,class=CODE,merge=1,delta=2
    88                           	dabs	1,0x7E,2
    89  0000                     
    90                           ; Version 2.00
    91                           ; Generated 27/05/2018 GMT
    92                           ; 
    93                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    94                           ; All rights reserved.
    95                           ; 
    96                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    97                           ; 
    98                           ; Redistribution and use in source and binary forms, with or without modification, are
    99                           ; permitted provided that the following conditions are met:
   100                           ; 
   101                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   102                           ;        conditions and the following disclaimer.
   103                           ; 
   104                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   105                           ;        of conditions and the following disclaimer in the documentation and/or other
   106                           ;        materials provided with the distribution.
   107                           ; 
   108                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   109                           ;        software without specific prior written permission.
   110                           ; 
   111                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   112                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   113                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   114                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   115                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   116                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   117                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   118                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   119                           ; 
   120                           ; 
   121                           ; Code-generator required, PIC16LF18325 Definitions
   122                           ; 
   123                           ; SFR Addresses
   124  0000                     	;# 
   125  0001                     	;# 
   126  0002                     	;# 
   127  0003                     	;# 
   128  0004                     	;# 
   129  0005                     	;# 
   130  0006                     	;# 
   131  0007                     	;# 
   132  0008                     	;# 
   133  0009                     	;# 
   134  000A                     	;# 
   135  000B                     	;# 
   136  000C                     	;# 
   137  000E                     	;# 
   138  0010                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0013                     	;# 
   142  0014                     	;# 
   143  0015                     	;# 
   144  0015                     	;# 
   145  0016                     	;# 
   146  0016                     	;# 
   147  0017                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  0019                     	;# 
   151  001A                     	;# 
   152  001B                     	;# 
   153  001C                     	;# 
   154  001D                     	;# 
   155  001E                     	;# 
   156  001F                     	;# 
   157  008C                     	;# 
   158  008E                     	;# 
   159  0090                     	;# 
   160  0091                     	;# 
   161  0092                     	;# 
   162  0093                     	;# 
   163  0094                     	;# 
   164  0097                     	;# 
   165  009B                     	;# 
   166  009B                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  009F                     	;# 
   171  010C                     	;# 
   172  010E                     	;# 
   173  0111                     	;# 
   174  0112                     	;# 
   175  0113                     	;# 
   176  0114                     	;# 
   177  0115                     	;# 
   178  0116                     	;# 
   179  0117                     	;# 
   180  0118                     	;# 
   181  0119                     	;# 
   182  018C                     	;# 
   183  018E                     	;# 
   184  0199                     	;# 
   185  0199                     	;# 
   186  0199                     	;# 
   187  019A                     	;# 
   188  019A                     	;# 
   189  019A                     	;# 
   190  019B                     	;# 
   191  019B                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019B                     	;# 
   195  019C                     	;# 
   196  019C                     	;# 
   197  019C                     	;# 
   198  019D                     	;# 
   199  019D                     	;# 
   200  019D                     	;# 
   201  019E                     	;# 
   202  019E                     	;# 
   203  019E                     	;# 
   204  019F                     	;# 
   205  019F                     	;# 
   206  019F                     	;# 
   207  019F                     	;# 
   208  019F                     	;# 
   209  020C                     	;# 
   210  020E                     	;# 
   211  0211                     	;# 
   212  0211                     	;# 
   213  0212                     	;# 
   214  0212                     	;# 
   215  0213                     	;# 
   216  0213                     	;# 
   217  0214                     	;# 
   218  0214                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0216                     	;# 
   224  0216                     	;# 
   225  0217                     	;# 
   226  0217                     	;# 
   227  0219                     	;# 
   228  021A                     	;# 
   229  021B                     	;# 
   230  021C                     	;# 
   231  021D                     	;# 
   232  021D                     	;# 
   233  021E                     	;# 
   234  021F                     	;# 
   235  028C                     	;# 
   236  028E                     	;# 
   237  0291                     	;# 
   238  0291                     	;# 
   239  0292                     	;# 
   240  0293                     	;# 
   241  0294                     	;# 
   242  0295                     	;# 
   243  0295                     	;# 
   244  0296                     	;# 
   245  0297                     	;# 
   246  0298                     	;# 
   247  029F                     	;# 
   248  030C                     	;# 
   249  030E                     	;# 
   250  0311                     	;# 
   251  0311                     	;# 
   252  0312                     	;# 
   253  0313                     	;# 
   254  0314                     	;# 
   255  0315                     	;# 
   256  0315                     	;# 
   257  0316                     	;# 
   258  0317                     	;# 
   259  0318                     	;# 
   260  038C                     	;# 
   261  038E                     	;# 
   262  0391                     	;# 
   263  0392                     	;# 
   264  0393                     	;# 
   265  0397                     	;# 
   266  0398                     	;# 
   267  0399                     	;# 
   268  039A                     	;# 
   269  039C                     	;# 
   270  039D                     	;# 
   271  039E                     	;# 
   272  039F                     	;# 
   273  0411                     	;# 
   274  0411                     	;# 
   275  0412                     	;# 
   276  0413                     	;# 
   277  0414                     	;# 
   278  0415                     	;# 
   279  0416                     	;# 
   280  0417                     	;# 
   281  0418                     	;# 
   282  0418                     	;# 
   283  0419                     	;# 
   284  041A                     	;# 
   285  041B                     	;# 
   286  041C                     	;# 
   287  041D                     	;# 
   288  041E                     	;# 
   289  041F                     	;# 
   290  0498                     	;# 
   291  0498                     	;# 
   292  0499                     	;# 
   293  049A                     	;# 
   294  049B                     	;# 
   295  049B                     	;# 
   296  049C                     	;# 
   297  049D                     	;# 
   298  049E                     	;# 
   299  049F                     	;# 
   300  0617                     	;# 
   301  0618                     	;# 
   302  0619                     	;# 
   303  0619                     	;# 
   304  061A                     	;# 
   305  061B                     	;# 
   306  061C                     	;# 
   307  061C                     	;# 
   308  061F                     	;# 
   309  0691                     	;# 
   310  0692                     	;# 
   311  0693                     	;# 
   312  0694                     	;# 
   313  0695                     	;# 
   314  0696                     	;# 
   315  0697                     	;# 
   316  0698                     	;# 
   317  0699                     	;# 
   318  0711                     	;# 
   319  0712                     	;# 
   320  0713                     	;# 
   321  0714                     	;# 
   322  0715                     	;# 
   323  0716                     	;# 
   324  0717                     	;# 
   325  0718                     	;# 
   326  0719                     	;# 
   327  0891                     	;# 
   328  0891                     	;# 
   329  0891                     	;# 
   330  0891                     	;# 
   331  0891                     	;# 
   332  0891                     	;# 
   333  0892                     	;# 
   334  0892                     	;# 
   335  0892                     	;# 
   336  0893                     	;# 
   337  0893                     	;# 
   338  0893                     	;# 
   339  0893                     	;# 
   340  0893                     	;# 
   341  0893                     	;# 
   342  0894                     	;# 
   343  0894                     	;# 
   344  0894                     	;# 
   345  0895                     	;# 
   346  0895                     	;# 
   347  0895                     	;# 
   348  0896                     	;# 
   349  0896                     	;# 
   350  0896                     	;# 
   351  089B                     	;# 
   352  0911                     	;# 
   353  0912                     	;# 
   354  0913                     	;# 
   355  0914                     	;# 
   356  0915                     	;# 
   357  0916                     	;# 
   358  0918                     	;# 
   359  0919                     	;# 
   360  091A                     	;# 
   361  091B                     	;# 
   362  091C                     	;# 
   363  091D                     	;# 
   364  091E                     	;# 
   365  091F                     	;# 
   366  0E0F                     	;# 
   367  0E10                     	;# 
   368  0E11                     	;# 
   369  0E12                     	;# 
   370  0E13                     	;# 
   371  0E14                     	;# 
   372  0E15                     	;# 
   373  0E16                     	;# 
   374  0E17                     	;# 
   375  0E18                     	;# 
   376  0E19                     	;# 
   377  0E1A                     	;# 
   378  0E1B                     	;# 
   379  0E1C                     	;# 
   380  0E1D                     	;# 
   381  0E1E                     	;# 
   382  0E1F                     	;# 
   383  0E20                     	;# 
   384  0E21                     	;# 
   385  0E22                     	;# 
   386  0E24                     	;# 
   387  0E25                     	;# 
   388  0E28                     	;# 
   389  0E29                     	;# 
   390  0E2A                     	;# 
   391  0E2B                     	;# 
   392  0E2C                     	;# 
   393  0E2D                     	;# 
   394  0E2E                     	;# 
   395  0E2F                     	;# 
   396  0E90                     	;# 
   397  0E91                     	;# 
   398  0E92                     	;# 
   399  0E94                     	;# 
   400  0E95                     	;# 
   401  0EA0                     	;# 
   402  0EA1                     	;# 
   403  0EA2                     	;# 
   404  0EA3                     	;# 
   405  0EA4                     	;# 
   406  0EA5                     	;# 
   407  0F0F                     	;# 
   408  0F10                     	;# 
   409  0F11                     	;# 
   410  0F12                     	;# 
   411  0F13                     	;# 
   412  0F14                     	;# 
   413  0F15                     	;# 
   414  0F16                     	;# 
   415  0F17                     	;# 
   416  0F18                     	;# 
   417  0F19                     	;# 
   418  0F1A                     	;# 
   419  0F1B                     	;# 
   420  0F1C                     	;# 
   421  0F1D                     	;# 
   422  0F1E                     	;# 
   423  0F1F                     	;# 
   424  0F20                     	;# 
   425  0F21                     	;# 
   426  0F22                     	;# 
   427  0F23                     	;# 
   428  0F24                     	;# 
   429  0F25                     	;# 
   430  0F26                     	;# 
   431  0F27                     	;# 
   432  0F28                     	;# 
   433  0F29                     	;# 
   434  0F2A                     	;# 
   435  0F2B                     	;# 
   436  0F2C                     	;# 
   437  0F2D                     	;# 
   438  0F2E                     	;# 
   439  0F2F                     	;# 
   440  0F30                     	;# 
   441  0F31                     	;# 
   442  0F32                     	;# 
   443  0F33                     	;# 
   444  0F34                     	;# 
   445  0F35                     	;# 
   446  0F36                     	;# 
   447  0F37                     	;# 
   448  0FE4                     	;# 
   449  0FE5                     	;# 
   450  0FE6                     	;# 
   451  0FE7                     	;# 
   452  0FE8                     	;# 
   453  0FE9                     	;# 
   454  0FEA                     	;# 
   455  0FEB                     	;# 
   456  0FED                     	;# 
   457  0FEE                     	;# 
   458  0FEF                     	;# 
   459  0000                     	;# 
   460  0001                     	;# 
   461  0002                     	;# 
   462  0003                     	;# 
   463  0004                     	;# 
   464  0005                     	;# 
   465  0006                     	;# 
   466  0007                     	;# 
   467  0008                     	;# 
   468  0009                     	;# 
   469  000A                     	;# 
   470  000B                     	;# 
   471  000C                     	;# 
   472  000E                     	;# 
   473  0010                     	;# 
   474  0011                     	;# 
   475  0012                     	;# 
   476  0013                     	;# 
   477  0014                     	;# 
   478  0015                     	;# 
   479  0015                     	;# 
   480  0016                     	;# 
   481  0016                     	;# 
   482  0017                     	;# 
   483  0018                     	;# 
   484  0019                     	;# 
   485  0019                     	;# 
   486  001A                     	;# 
   487  001B                     	;# 
   488  001C                     	;# 
   489  001D                     	;# 
   490  001E                     	;# 
   491  001F                     	;# 
   492  008C                     	;# 
   493  008E                     	;# 
   494  0090                     	;# 
   495  0091                     	;# 
   496  0092                     	;# 
   497  0093                     	;# 
   498  0094                     	;# 
   499  0097                     	;# 
   500  009B                     	;# 
   501  009B                     	;# 
   502  009C                     	;# 
   503  009D                     	;# 
   504  009E                     	;# 
   505  009F                     	;# 
   506  010C                     	;# 
   507  010E                     	;# 
   508  0111                     	;# 
   509  0112                     	;# 
   510  0113                     	;# 
   511  0114                     	;# 
   512  0115                     	;# 
   513  0116                     	;# 
   514  0117                     	;# 
   515  0118                     	;# 
   516  0119                     	;# 
   517  018C                     	;# 
   518  018E                     	;# 
   519  0199                     	;# 
   520  0199                     	;# 
   521  0199                     	;# 
   522  019A                     	;# 
   523  019A                     	;# 
   524  019A                     	;# 
   525  019B                     	;# 
   526  019B                     	;# 
   527  019B                     	;# 
   528  019B                     	;# 
   529  019B                     	;# 
   530  019C                     	;# 
   531  019C                     	;# 
   532  019C                     	;# 
   533  019D                     	;# 
   534  019D                     	;# 
   535  019D                     	;# 
   536  019E                     	;# 
   537  019E                     	;# 
   538  019E                     	;# 
   539  019F                     	;# 
   540  019F                     	;# 
   541  019F                     	;# 
   542  019F                     	;# 
   543  019F                     	;# 
   544  020C                     	;# 
   545  020E                     	;# 
   546  0211                     	;# 
   547  0211                     	;# 
   548  0212                     	;# 
   549  0212                     	;# 
   550  0213                     	;# 
   551  0213                     	;# 
   552  0214                     	;# 
   553  0214                     	;# 
   554  0215                     	;# 
   555  0215                     	;# 
   556  0215                     	;# 
   557  0215                     	;# 
   558  0216                     	;# 
   559  0216                     	;# 
   560  0217                     	;# 
   561  0217                     	;# 
   562  0219                     	;# 
   563  021A                     	;# 
   564  021B                     	;# 
   565  021C                     	;# 
   566  021D                     	;# 
   567  021D                     	;# 
   568  021E                     	;# 
   569  021F                     	;# 
   570  028C                     	;# 
   571  028E                     	;# 
   572  0291                     	;# 
   573  0291                     	;# 
   574  0292                     	;# 
   575  0293                     	;# 
   576  0294                     	;# 
   577  0295                     	;# 
   578  0295                     	;# 
   579  0296                     	;# 
   580  0297                     	;# 
   581  0298                     	;# 
   582  029F                     	;# 
   583  030C                     	;# 
   584  030E                     	;# 
   585  0311                     	;# 
   586  0311                     	;# 
   587  0312                     	;# 
   588  0313                     	;# 
   589  0314                     	;# 
   590  0315                     	;# 
   591  0315                     	;# 
   592  0316                     	;# 
   593  0317                     	;# 
   594  0318                     	;# 
   595  038C                     	;# 
   596  038E                     	;# 
   597  0391                     	;# 
   598  0392                     	;# 
   599  0393                     	;# 
   600  0397                     	;# 
   601  0398                     	;# 
   602  0399                     	;# 
   603  039A                     	;# 
   604  039C                     	;# 
   605  039D                     	;# 
   606  039E                     	;# 
   607  039F                     	;# 
   608  0411                     	;# 
   609  0411                     	;# 
   610  0412                     	;# 
   611  0413                     	;# 
   612  0414                     	;# 
   613  0415                     	;# 
   614  0416                     	;# 
   615  0417                     	;# 
   616  0418                     	;# 
   617  0418                     	;# 
   618  0419                     	;# 
   619  041A                     	;# 
   620  041B                     	;# 
   621  041C                     	;# 
   622  041D                     	;# 
   623  041E                     	;# 
   624  041F                     	;# 
   625  0498                     	;# 
   626  0498                     	;# 
   627  0499                     	;# 
   628  049A                     	;# 
   629  049B                     	;# 
   630  049B                     	;# 
   631  049C                     	;# 
   632  049D                     	;# 
   633  049E                     	;# 
   634  049F                     	;# 
   635  0617                     	;# 
   636  0618                     	;# 
   637  0619                     	;# 
   638  0619                     	;# 
   639  061A                     	;# 
   640  061B                     	;# 
   641  061C                     	;# 
   642  061C                     	;# 
   643  061F                     	;# 
   644  0691                     	;# 
   645  0692                     	;# 
   646  0693                     	;# 
   647  0694                     	;# 
   648  0695                     	;# 
   649  0696                     	;# 
   650  0697                     	;# 
   651  0698                     	;# 
   652  0699                     	;# 
   653  0711                     	;# 
   654  0712                     	;# 
   655  0713                     	;# 
   656  0714                     	;# 
   657  0715                     	;# 
   658  0716                     	;# 
   659  0717                     	;# 
   660  0718                     	;# 
   661  0719                     	;# 
   662  0891                     	;# 
   663  0891                     	;# 
   664  0891                     	;# 
   665  0891                     	;# 
   666  0891                     	;# 
   667  0891                     	;# 
   668  0892                     	;# 
   669  0892                     	;# 
   670  0892                     	;# 
   671  0893                     	;# 
   672  0893                     	;# 
   673  0893                     	;# 
   674  0893                     	;# 
   675  0893                     	;# 
   676  0893                     	;# 
   677  0894                     	;# 
   678  0894                     	;# 
   679  0894                     	;# 
   680  0895                     	;# 
   681  0895                     	;# 
   682  0895                     	;# 
   683  0896                     	;# 
   684  0896                     	;# 
   685  0896                     	;# 
   686  089B                     	;# 
   687  0911                     	;# 
   688  0912                     	;# 
   689  0913                     	;# 
   690  0914                     	;# 
   691  0915                     	;# 
   692  0916                     	;# 
   693  0918                     	;# 
   694  0919                     	;# 
   695  091A                     	;# 
   696  091B                     	;# 
   697  091C                     	;# 
   698  091D                     	;# 
   699  091E                     	;# 
   700  091F                     	;# 
   701  0E0F                     	;# 
   702  0E10                     	;# 
   703  0E11                     	;# 
   704  0E12                     	;# 
   705  0E13                     	;# 
   706  0E14                     	;# 
   707  0E15                     	;# 
   708  0E16                     	;# 
   709  0E17                     	;# 
   710  0E18                     	;# 
   711  0E19                     	;# 
   712  0E1A                     	;# 
   713  0E1B                     	;# 
   714  0E1C                     	;# 
   715  0E1D                     	;# 
   716  0E1E                     	;# 
   717  0E1F                     	;# 
   718  0E20                     	;# 
   719  0E21                     	;# 
   720  0E22                     	;# 
   721  0E24                     	;# 
   722  0E25                     	;# 
   723  0E28                     	;# 
   724  0E29                     	;# 
   725  0E2A                     	;# 
   726  0E2B                     	;# 
   727  0E2C                     	;# 
   728  0E2D                     	;# 
   729  0E2E                     	;# 
   730  0E2F                     	;# 
   731  0E90                     	;# 
   732  0E91                     	;# 
   733  0E92                     	;# 
   734  0E94                     	;# 
   735  0E95                     	;# 
   736  0EA0                     	;# 
   737  0EA1                     	;# 
   738  0EA2                     	;# 
   739  0EA3                     	;# 
   740  0EA4                     	;# 
   741  0EA5                     	;# 
   742  0F0F                     	;# 
   743  0F10                     	;# 
   744  0F11                     	;# 
   745  0F12                     	;# 
   746  0F13                     	;# 
   747  0F14                     	;# 
   748  0F15                     	;# 
   749  0F16                     	;# 
   750  0F17                     	;# 
   751  0F18                     	;# 
   752  0F19                     	;# 
   753  0F1A                     	;# 
   754  0F1B                     	;# 
   755  0F1C                     	;# 
   756  0F1D                     	;# 
   757  0F1E                     	;# 
   758  0F1F                     	;# 
   759  0F20                     	;# 
   760  0F21                     	;# 
   761  0F22                     	;# 
   762  0F23                     	;# 
   763  0F24                     	;# 
   764  0F25                     	;# 
   765  0F26                     	;# 
   766  0F27                     	;# 
   767  0F28                     	;# 
   768  0F29                     	;# 
   769  0F2A                     	;# 
   770  0F2B                     	;# 
   771  0F2C                     	;# 
   772  0F2D                     	;# 
   773  0F2E                     	;# 
   774  0F2F                     	;# 
   775  0F30                     	;# 
   776  0F31                     	;# 
   777  0F32                     	;# 
   778  0F33                     	;# 
   779  0F34                     	;# 
   780  0F35                     	;# 
   781  0F36                     	;# 
   782  0F37                     	;# 
   783  0FE4                     	;# 
   784  0FE5                     	;# 
   785  0FE6                     	;# 
   786  0FE7                     	;# 
   787  0FE8                     	;# 
   788  0FE9                     	;# 
   789  0FEA                     	;# 
   790  0FEB                     	;# 
   791  0FED                     	;# 
   792  0FEE                     	;# 
   793  0FEF                     	;# 
   794  0000                     	;# 
   795  0001                     	;# 
   796  0002                     	;# 
   797  0003                     	;# 
   798  0004                     	;# 
   799  0005                     	;# 
   800  0006                     	;# 
   801  0007                     	;# 
   802  0008                     	;# 
   803  0009                     	;# 
   804  000A                     	;# 
   805  000B                     	;# 
   806  000C                     	;# 
   807  000E                     	;# 
   808  0010                     	;# 
   809  0011                     	;# 
   810  0012                     	;# 
   811  0013                     	;# 
   812  0014                     	;# 
   813  0015                     	;# 
   814  0015                     	;# 
   815  0016                     	;# 
   816  0016                     	;# 
   817  0017                     	;# 
   818  0018                     	;# 
   819  0019                     	;# 
   820  0019                     	;# 
   821  001A                     	;# 
   822  001B                     	;# 
   823  001C                     	;# 
   824  001D                     	;# 
   825  001E                     	;# 
   826  001F                     	;# 
   827  008C                     	;# 
   828  008E                     	;# 
   829  0090                     	;# 
   830  0091                     	;# 
   831  0092                     	;# 
   832  0093                     	;# 
   833  0094                     	;# 
   834  0097                     	;# 
   835  009B                     	;# 
   836  009B                     	;# 
   837  009C                     	;# 
   838  009D                     	;# 
   839  009E                     	;# 
   840  009F                     	;# 
   841  010C                     	;# 
   842  010E                     	;# 
   843  0111                     	;# 
   844  0112                     	;# 
   845  0113                     	;# 
   846  0114                     	;# 
   847  0115                     	;# 
   848  0116                     	;# 
   849  0117                     	;# 
   850  0118                     	;# 
   851  0119                     	;# 
   852  018C                     	;# 
   853  018E                     	;# 
   854  0199                     	;# 
   855  0199                     	;# 
   856  0199                     	;# 
   857  019A                     	;# 
   858  019A                     	;# 
   859  019A                     	;# 
   860  019B                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019C                     	;# 
   866  019C                     	;# 
   867  019C                     	;# 
   868  019D                     	;# 
   869  019D                     	;# 
   870  019D                     	;# 
   871  019E                     	;# 
   872  019E                     	;# 
   873  019E                     	;# 
   874  019F                     	;# 
   875  019F                     	;# 
   876  019F                     	;# 
   877  019F                     	;# 
   878  019F                     	;# 
   879  020C                     	;# 
   880  020E                     	;# 
   881  0211                     	;# 
   882  0211                     	;# 
   883  0212                     	;# 
   884  0212                     	;# 
   885  0213                     	;# 
   886  0213                     	;# 
   887  0214                     	;# 
   888  0214                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0215                     	;# 
   893  0216                     	;# 
   894  0216                     	;# 
   895  0217                     	;# 
   896  0217                     	;# 
   897  0219                     	;# 
   898  021A                     	;# 
   899  021B                     	;# 
   900  021C                     	;# 
   901  021D                     	;# 
   902  021D                     	;# 
   903  021E                     	;# 
   904  021F                     	;# 
   905  028C                     	;# 
   906  028E                     	;# 
   907  0291                     	;# 
   908  0291                     	;# 
   909  0292                     	;# 
   910  0293                     	;# 
   911  0294                     	;# 
   912  0295                     	;# 
   913  0295                     	;# 
   914  0296                     	;# 
   915  0297                     	;# 
   916  0298                     	;# 
   917  029F                     	;# 
   918  030C                     	;# 
   919  030E                     	;# 
   920  0311                     	;# 
   921  0311                     	;# 
   922  0312                     	;# 
   923  0313                     	;# 
   924  0314                     	;# 
   925  0315                     	;# 
   926  0315                     	;# 
   927  0316                     	;# 
   928  0317                     	;# 
   929  0318                     	;# 
   930  038C                     	;# 
   931  038E                     	;# 
   932  0391                     	;# 
   933  0392                     	;# 
   934  0393                     	;# 
   935  0397                     	;# 
   936  0398                     	;# 
   937  0399                     	;# 
   938  039A                     	;# 
   939  039C                     	;# 
   940  039D                     	;# 
   941  039E                     	;# 
   942  039F                     	;# 
   943  0411                     	;# 
   944  0411                     	;# 
   945  0412                     	;# 
   946  0413                     	;# 
   947  0414                     	;# 
   948  0415                     	;# 
   949  0416                     	;# 
   950  0417                     	;# 
   951  0418                     	;# 
   952  0418                     	;# 
   953  0419                     	;# 
   954  041A                     	;# 
   955  041B                     	;# 
   956  041C                     	;# 
   957  041D                     	;# 
   958  041E                     	;# 
   959  041F                     	;# 
   960  0498                     	;# 
   961  0498                     	;# 
   962  0499                     	;# 
   963  049A                     	;# 
   964  049B                     	;# 
   965  049B                     	;# 
   966  049C                     	;# 
   967  049D                     	;# 
   968  049E                     	;# 
   969  049F                     	;# 
   970  0617                     	;# 
   971  0618                     	;# 
   972  0619                     	;# 
   973  0619                     	;# 
   974  061A                     	;# 
   975  061B                     	;# 
   976  061C                     	;# 
   977  061C                     	;# 
   978  061F                     	;# 
   979  0691                     	;# 
   980  0692                     	;# 
   981  0693                     	;# 
   982  0694                     	;# 
   983  0695                     	;# 
   984  0696                     	;# 
   985  0697                     	;# 
   986  0698                     	;# 
   987  0699                     	;# 
   988  0711                     	;# 
   989  0712                     	;# 
   990  0713                     	;# 
   991  0714                     	;# 
   992  0715                     	;# 
   993  0716                     	;# 
   994  0717                     	;# 
   995  0718                     	;# 
   996  0719                     	;# 
   997  0891                     	;# 
   998  0891                     	;# 
   999  0891                     	;# 
  1000  0891                     	;# 
  1001  0891                     	;# 
  1002  0891                     	;# 
  1003  0892                     	;# 
  1004  0892                     	;# 
  1005  0892                     	;# 
  1006  0893                     	;# 
  1007  0893                     	;# 
  1008  0893                     	;# 
  1009  0893                     	;# 
  1010  0893                     	;# 
  1011  0893                     	;# 
  1012  0894                     	;# 
  1013  0894                     	;# 
  1014  0894                     	;# 
  1015  0895                     	;# 
  1016  0895                     	;# 
  1017  0895                     	;# 
  1018  0896                     	;# 
  1019  0896                     	;# 
  1020  0896                     	;# 
  1021  089B                     	;# 
  1022  0911                     	;# 
  1023  0912                     	;# 
  1024  0913                     	;# 
  1025  0914                     	;# 
  1026  0915                     	;# 
  1027  0916                     	;# 
  1028  0918                     	;# 
  1029  0919                     	;# 
  1030  091A                     	;# 
  1031  091B                     	;# 
  1032  091C                     	;# 
  1033  091D                     	;# 
  1034  091E                     	;# 
  1035  091F                     	;# 
  1036  0E0F                     	;# 
  1037  0E10                     	;# 
  1038  0E11                     	;# 
  1039  0E12                     	;# 
  1040  0E13                     	;# 
  1041  0E14                     	;# 
  1042  0E15                     	;# 
  1043  0E16                     	;# 
  1044  0E17                     	;# 
  1045  0E18                     	;# 
  1046  0E19                     	;# 
  1047  0E1A                     	;# 
  1048  0E1B                     	;# 
  1049  0E1C                     	;# 
  1050  0E1D                     	;# 
  1051  0E1E                     	;# 
  1052  0E1F                     	;# 
  1053  0E20                     	;# 
  1054  0E21                     	;# 
  1055  0E22                     	;# 
  1056  0E24                     	;# 
  1057  0E25                     	;# 
  1058  0E28                     	;# 
  1059  0E29                     	;# 
  1060  0E2A                     	;# 
  1061  0E2B                     	;# 
  1062  0E2C                     	;# 
  1063  0E2D                     	;# 
  1064  0E2E                     	;# 
  1065  0E2F                     	;# 
  1066  0E90                     	;# 
  1067  0E91                     	;# 
  1068  0E92                     	;# 
  1069  0E94                     	;# 
  1070  0E95                     	;# 
  1071  0EA0                     	;# 
  1072  0EA1                     	;# 
  1073  0EA2                     	;# 
  1074  0EA3                     	;# 
  1075  0EA4                     	;# 
  1076  0EA5                     	;# 
  1077  0F0F                     	;# 
  1078  0F10                     	;# 
  1079  0F11                     	;# 
  1080  0F12                     	;# 
  1081  0F13                     	;# 
  1082  0F14                     	;# 
  1083  0F15                     	;# 
  1084  0F16                     	;# 
  1085  0F17                     	;# 
  1086  0F18                     	;# 
  1087  0F19                     	;# 
  1088  0F1A                     	;# 
  1089  0F1B                     	;# 
  1090  0F1C                     	;# 
  1091  0F1D                     	;# 
  1092  0F1E                     	;# 
  1093  0F1F                     	;# 
  1094  0F20                     	;# 
  1095  0F21                     	;# 
  1096  0F22                     	;# 
  1097  0F23                     	;# 
  1098  0F24                     	;# 
  1099  0F25                     	;# 
  1100  0F26                     	;# 
  1101  0F27                     	;# 
  1102  0F28                     	;# 
  1103  0F29                     	;# 
  1104  0F2A                     	;# 
  1105  0F2B                     	;# 
  1106  0F2C                     	;# 
  1107  0F2D                     	;# 
  1108  0F2E                     	;# 
  1109  0F2F                     	;# 
  1110  0F30                     	;# 
  1111  0F31                     	;# 
  1112  0F32                     	;# 
  1113  0F33                     	;# 
  1114  0F34                     	;# 
  1115  0F35                     	;# 
  1116  0F36                     	;# 
  1117  0F37                     	;# 
  1118  0FE4                     	;# 
  1119  0FE5                     	;# 
  1120  0FE6                     	;# 
  1121  0FE7                     	;# 
  1122  0FE8                     	;# 
  1123  0FE9                     	;# 
  1124  0FEA                     	;# 
  1125  0FEB                     	;# 
  1126  0FED                     	;# 
  1127  0FEE                     	;# 
  1128  0FEF                     	;# 
  1129  0000                     	;# 
  1130  0001                     	;# 
  1131  0002                     	;# 
  1132  0003                     	;# 
  1133  0004                     	;# 
  1134  0005                     	;# 
  1135  0006                     	;# 
  1136  0007                     	;# 
  1137  0008                     	;# 
  1138  0009                     	;# 
  1139  000A                     	;# 
  1140  000B                     	;# 
  1141  000C                     	;# 
  1142  000E                     	;# 
  1143  0010                     	;# 
  1144  0011                     	;# 
  1145  0012                     	;# 
  1146  0013                     	;# 
  1147  0014                     	;# 
  1148  0015                     	;# 
  1149  0015                     	;# 
  1150  0016                     	;# 
  1151  0016                     	;# 
  1152  0017                     	;# 
  1153  0018                     	;# 
  1154  0019                     	;# 
  1155  0019                     	;# 
  1156  001A                     	;# 
  1157  001B                     	;# 
  1158  001C                     	;# 
  1159  001D                     	;# 
  1160  001E                     	;# 
  1161  001F                     	;# 
  1162  008C                     	;# 
  1163  008E                     	;# 
  1164  0090                     	;# 
  1165  0091                     	;# 
  1166  0092                     	;# 
  1167  0093                     	;# 
  1168  0094                     	;# 
  1169  0097                     	;# 
  1170  009B                     	;# 
  1171  009B                     	;# 
  1172  009C                     	;# 
  1173  009D                     	;# 
  1174  009E                     	;# 
  1175  009F                     	;# 
  1176  010C                     	;# 
  1177  010E                     	;# 
  1178  0111                     	;# 
  1179  0112                     	;# 
  1180  0113                     	;# 
  1181  0114                     	;# 
  1182  0115                     	;# 
  1183  0116                     	;# 
  1184  0117                     	;# 
  1185  0118                     	;# 
  1186  0119                     	;# 
  1187  018C                     	;# 
  1188  018E                     	;# 
  1189  0199                     	;# 
  1190  0199                     	;# 
  1191  0199                     	;# 
  1192  019A                     	;# 
  1193  019A                     	;# 
  1194  019A                     	;# 
  1195  019B                     	;# 
  1196  019B                     	;# 
  1197  019B                     	;# 
  1198  019B                     	;# 
  1199  019B                     	;# 
  1200  019C                     	;# 
  1201  019C                     	;# 
  1202  019C                     	;# 
  1203  019D                     	;# 
  1204  019D                     	;# 
  1205  019D                     	;# 
  1206  019E                     	;# 
  1207  019E                     	;# 
  1208  019E                     	;# 
  1209  019F                     	;# 
  1210  019F                     	;# 
  1211  019F                     	;# 
  1212  019F                     	;# 
  1213  019F                     	;# 
  1214  020C                     	;# 
  1215  020E                     	;# 
  1216  0211                     	;# 
  1217  0211                     	;# 
  1218  0212                     	;# 
  1219  0212                     	;# 
  1220  0213                     	;# 
  1221  0213                     	;# 
  1222  0214                     	;# 
  1223  0214                     	;# 
  1224  0215                     	;# 
  1225  0215                     	;# 
  1226  0215                     	;# 
  1227  0215                     	;# 
  1228  0216                     	;# 
  1229  0216                     	;# 
  1230  0217                     	;# 
  1231  0217                     	;# 
  1232  0219                     	;# 
  1233  021A                     	;# 
  1234  021B                     	;# 
  1235  021C                     	;# 
  1236  021D                     	;# 
  1237  021D                     	;# 
  1238  021E                     	;# 
  1239  021F                     	;# 
  1240  028C                     	;# 
  1241  028E                     	;# 
  1242  0291                     	;# 
  1243  0291                     	;# 
  1244  0292                     	;# 
  1245  0293                     	;# 
  1246  0294                     	;# 
  1247  0295                     	;# 
  1248  0295                     	;# 
  1249  0296                     	;# 
  1250  0297                     	;# 
  1251  0298                     	;# 
  1252  029F                     	;# 
  1253  030C                     	;# 
  1254  030E                     	;# 
  1255  0311                     	;# 
  1256  0311                     	;# 
  1257  0312                     	;# 
  1258  0313                     	;# 
  1259  0314                     	;# 
  1260  0315                     	;# 
  1261  0315                     	;# 
  1262  0316                     	;# 
  1263  0317                     	;# 
  1264  0318                     	;# 
  1265  038C                     	;# 
  1266  038E                     	;# 
  1267  0391                     	;# 
  1268  0392                     	;# 
  1269  0393                     	;# 
  1270  0397                     	;# 
  1271  0398                     	;# 
  1272  0399                     	;# 
  1273  039A                     	;# 
  1274  039C                     	;# 
  1275  039D                     	;# 
  1276  039E                     	;# 
  1277  039F                     	;# 
  1278  0411                     	;# 
  1279  0411                     	;# 
  1280  0412                     	;# 
  1281  0413                     	;# 
  1282  0414                     	;# 
  1283  0415                     	;# 
  1284  0416                     	;# 
  1285  0417                     	;# 
  1286  0418                     	;# 
  1287  0418                     	;# 
  1288  0419                     	;# 
  1289  041A                     	;# 
  1290  041B                     	;# 
  1291  041C                     	;# 
  1292  041D                     	;# 
  1293  041E                     	;# 
  1294  041F                     	;# 
  1295  0498                     	;# 
  1296  0498                     	;# 
  1297  0499                     	;# 
  1298  049A                     	;# 
  1299  049B                     	;# 
  1300  049B                     	;# 
  1301  049C                     	;# 
  1302  049D                     	;# 
  1303  049E                     	;# 
  1304  049F                     	;# 
  1305  0617                     	;# 
  1306  0618                     	;# 
  1307  0619                     	;# 
  1308  0619                     	;# 
  1309  061A                     	;# 
  1310  061B                     	;# 
  1311  061C                     	;# 
  1312  061C                     	;# 
  1313  061F                     	;# 
  1314  0691                     	;# 
  1315  0692                     	;# 
  1316  0693                     	;# 
  1317  0694                     	;# 
  1318  0695                     	;# 
  1319  0696                     	;# 
  1320  0697                     	;# 
  1321  0698                     	;# 
  1322  0699                     	;# 
  1323  0711                     	;# 
  1324  0712                     	;# 
  1325  0713                     	;# 
  1326  0714                     	;# 
  1327  0715                     	;# 
  1328  0716                     	;# 
  1329  0717                     	;# 
  1330  0718                     	;# 
  1331  0719                     	;# 
  1332  0891                     	;# 
  1333  0891                     	;# 
  1334  0891                     	;# 
  1335  0891                     	;# 
  1336  0891                     	;# 
  1337  0891                     	;# 
  1338  0892                     	;# 
  1339  0892                     	;# 
  1340  0892                     	;# 
  1341  0893                     	;# 
  1342  0893                     	;# 
  1343  0893                     	;# 
  1344  0893                     	;# 
  1345  0893                     	;# 
  1346  0893                     	;# 
  1347  0894                     	;# 
  1348  0894                     	;# 
  1349  0894                     	;# 
  1350  0895                     	;# 
  1351  0895                     	;# 
  1352  0895                     	;# 
  1353  0896                     	;# 
  1354  0896                     	;# 
  1355  0896                     	;# 
  1356  089B                     	;# 
  1357  0911                     	;# 
  1358  0912                     	;# 
  1359  0913                     	;# 
  1360  0914                     	;# 
  1361  0915                     	;# 
  1362  0916                     	;# 
  1363  0918                     	;# 
  1364  0919                     	;# 
  1365  091A                     	;# 
  1366  091B                     	;# 
  1367  091C                     	;# 
  1368  091D                     	;# 
  1369  091E                     	;# 
  1370  091F                     	;# 
  1371  0E0F                     	;# 
  1372  0E10                     	;# 
  1373  0E11                     	;# 
  1374  0E12                     	;# 
  1375  0E13                     	;# 
  1376  0E14                     	;# 
  1377  0E15                     	;# 
  1378  0E16                     	;# 
  1379  0E17                     	;# 
  1380  0E18                     	;# 
  1381  0E19                     	;# 
  1382  0E1A                     	;# 
  1383  0E1B                     	;# 
  1384  0E1C                     	;# 
  1385  0E1D                     	;# 
  1386  0E1E                     	;# 
  1387  0E1F                     	;# 
  1388  0E20                     	;# 
  1389  0E21                     	;# 
  1390  0E22                     	;# 
  1391  0E24                     	;# 
  1392  0E25                     	;# 
  1393  0E28                     	;# 
  1394  0E29                     	;# 
  1395  0E2A                     	;# 
  1396  0E2B                     	;# 
  1397  0E2C                     	;# 
  1398  0E2D                     	;# 
  1399  0E2E                     	;# 
  1400  0E2F                     	;# 
  1401  0E90                     	;# 
  1402  0E91                     	;# 
  1403  0E92                     	;# 
  1404  0E94                     	;# 
  1405  0E95                     	;# 
  1406  0EA0                     	;# 
  1407  0EA1                     	;# 
  1408  0EA2                     	;# 
  1409  0EA3                     	;# 
  1410  0EA4                     	;# 
  1411  0EA5                     	;# 
  1412  0F0F                     	;# 
  1413  0F10                     	;# 
  1414  0F11                     	;# 
  1415  0F12                     	;# 
  1416  0F13                     	;# 
  1417  0F14                     	;# 
  1418  0F15                     	;# 
  1419  0F16                     	;# 
  1420  0F17                     	;# 
  1421  0F18                     	;# 
  1422  0F19                     	;# 
  1423  0F1A                     	;# 
  1424  0F1B                     	;# 
  1425  0F1C                     	;# 
  1426  0F1D                     	;# 
  1427  0F1E                     	;# 
  1428  0F1F                     	;# 
  1429  0F20                     	;# 
  1430  0F21                     	;# 
  1431  0F22                     	;# 
  1432  0F23                     	;# 
  1433  0F24                     	;# 
  1434  0F25                     	;# 
  1435  0F26                     	;# 
  1436  0F27                     	;# 
  1437  0F28                     	;# 
  1438  0F29                     	;# 
  1439  0F2A                     	;# 
  1440  0F2B                     	;# 
  1441  0F2C                     	;# 
  1442  0F2D                     	;# 
  1443  0F2E                     	;# 
  1444  0F2F                     	;# 
  1445  0F30                     	;# 
  1446  0F31                     	;# 
  1447  0F32                     	;# 
  1448  0F33                     	;# 
  1449  0F34                     	;# 
  1450  0F35                     	;# 
  1451  0F36                     	;# 
  1452  0F37                     	;# 
  1453  0FE4                     	;# 
  1454  0FE5                     	;# 
  1455  0FE6                     	;# 
  1456  0FE7                     	;# 
  1457  0FE8                     	;# 
  1458  0FE9                     	;# 
  1459  0FEA                     	;# 
  1460  0FEB                     	;# 
  1461  0FED                     	;# 
  1462  0FEE                     	;# 
  1463  0FEF                     	;# 
  1464  0000                     	;# 
  1465  0001                     	;# 
  1466  0002                     	;# 
  1467  0003                     	;# 
  1468  0004                     	;# 
  1469  0005                     	;# 
  1470  0006                     	;# 
  1471  0007                     	;# 
  1472  0008                     	;# 
  1473  0009                     	;# 
  1474  000A                     	;# 
  1475  000B                     	;# 
  1476  000C                     	;# 
  1477  000E                     	;# 
  1478  0010                     	;# 
  1479  0011                     	;# 
  1480  0012                     	;# 
  1481  0013                     	;# 
  1482  0014                     	;# 
  1483  0015                     	;# 
  1484  0015                     	;# 
  1485  0016                     	;# 
  1486  0016                     	;# 
  1487  0017                     	;# 
  1488  0018                     	;# 
  1489  0019                     	;# 
  1490  0019                     	;# 
  1491  001A                     	;# 
  1492  001B                     	;# 
  1493  001C                     	;# 
  1494  001D                     	;# 
  1495  001E                     	;# 
  1496  001F                     	;# 
  1497  008C                     	;# 
  1498  008E                     	;# 
  1499  0090                     	;# 
  1500  0091                     	;# 
  1501  0092                     	;# 
  1502  0093                     	;# 
  1503  0094                     	;# 
  1504  0097                     	;# 
  1505  009B                     	;# 
  1506  009B                     	;# 
  1507  009C                     	;# 
  1508  009D                     	;# 
  1509  009E                     	;# 
  1510  009F                     	;# 
  1511  010C                     	;# 
  1512  010E                     	;# 
  1513  0111                     	;# 
  1514  0112                     	;# 
  1515  0113                     	;# 
  1516  0114                     	;# 
  1517  0115                     	;# 
  1518  0116                     	;# 
  1519  0117                     	;# 
  1520  0118                     	;# 
  1521  0119                     	;# 
  1522  018C                     	;# 
  1523  018E                     	;# 
  1524  0199                     	;# 
  1525  0199                     	;# 
  1526  0199                     	;# 
  1527  019A                     	;# 
  1528  019A                     	;# 
  1529  019A                     	;# 
  1530  019B                     	;# 
  1531  019B                     	;# 
  1532  019B                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019C                     	;# 
  1536  019C                     	;# 
  1537  019C                     	;# 
  1538  019D                     	;# 
  1539  019D                     	;# 
  1540  019D                     	;# 
  1541  019E                     	;# 
  1542  019E                     	;# 
  1543  019E                     	;# 
  1544  019F                     	;# 
  1545  019F                     	;# 
  1546  019F                     	;# 
  1547  019F                     	;# 
  1548  019F                     	;# 
  1549  020C                     	;# 
  1550  020E                     	;# 
  1551  0211                     	;# 
  1552  0211                     	;# 
  1553  0212                     	;# 
  1554  0212                     	;# 
  1555  0213                     	;# 
  1556  0213                     	;# 
  1557  0214                     	;# 
  1558  0214                     	;# 
  1559  0215                     	;# 
  1560  0215                     	;# 
  1561  0215                     	;# 
  1562  0215                     	;# 
  1563  0216                     	;# 
  1564  0216                     	;# 
  1565  0217                     	;# 
  1566  0217                     	;# 
  1567  0219                     	;# 
  1568  021A                     	;# 
  1569  021B                     	;# 
  1570  021C                     	;# 
  1571  021D                     	;# 
  1572  021D                     	;# 
  1573  021E                     	;# 
  1574  021F                     	;# 
  1575  028C                     	;# 
  1576  028E                     	;# 
  1577  0291                     	;# 
  1578  0291                     	;# 
  1579  0292                     	;# 
  1580  0293                     	;# 
  1581  0294                     	;# 
  1582  0295                     	;# 
  1583  0295                     	;# 
  1584  0296                     	;# 
  1585  0297                     	;# 
  1586  0298                     	;# 
  1587  029F                     	;# 
  1588  030C                     	;# 
  1589  030E                     	;# 
  1590  0311                     	;# 
  1591  0311                     	;# 
  1592  0312                     	;# 
  1593  0313                     	;# 
  1594  0314                     	;# 
  1595  0315                     	;# 
  1596  0315                     	;# 
  1597  0316                     	;# 
  1598  0317                     	;# 
  1599  0318                     	;# 
  1600  038C                     	;# 
  1601  038E                     	;# 
  1602  0391                     	;# 
  1603  0392                     	;# 
  1604  0393                     	;# 
  1605  0397                     	;# 
  1606  0398                     	;# 
  1607  0399                     	;# 
  1608  039A                     	;# 
  1609  039C                     	;# 
  1610  039D                     	;# 
  1611  039E                     	;# 
  1612  039F                     	;# 
  1613  0411                     	;# 
  1614  0411                     	;# 
  1615  0412                     	;# 
  1616  0413                     	;# 
  1617  0414                     	;# 
  1618  0415                     	;# 
  1619  0416                     	;# 
  1620  0417                     	;# 
  1621  0418                     	;# 
  1622  0418                     	;# 
  1623  0419                     	;# 
  1624  041A                     	;# 
  1625  041B                     	;# 
  1626  041C                     	;# 
  1627  041D                     	;# 
  1628  041E                     	;# 
  1629  041F                     	;# 
  1630  0498                     	;# 
  1631  0498                     	;# 
  1632  0499                     	;# 
  1633  049A                     	;# 
  1634  049B                     	;# 
  1635  049B                     	;# 
  1636  049C                     	;# 
  1637  049D                     	;# 
  1638  049E                     	;# 
  1639  049F                     	;# 
  1640  0617                     	;# 
  1641  0618                     	;# 
  1642  0619                     	;# 
  1643  0619                     	;# 
  1644  061A                     	;# 
  1645  061B                     	;# 
  1646  061C                     	;# 
  1647  061C                     	;# 
  1648  061F                     	;# 
  1649  0691                     	;# 
  1650  0692                     	;# 
  1651  0693                     	;# 
  1652  0694                     	;# 
  1653  0695                     	;# 
  1654  0696                     	;# 
  1655  0697                     	;# 
  1656  0698                     	;# 
  1657  0699                     	;# 
  1658  0711                     	;# 
  1659  0712                     	;# 
  1660  0713                     	;# 
  1661  0714                     	;# 
  1662  0715                     	;# 
  1663  0716                     	;# 
  1664  0717                     	;# 
  1665  0718                     	;# 
  1666  0719                     	;# 
  1667  0891                     	;# 
  1668  0891                     	;# 
  1669  0891                     	;# 
  1670  0891                     	;# 
  1671  0891                     	;# 
  1672  0891                     	;# 
  1673  0892                     	;# 
  1674  0892                     	;# 
  1675  0892                     	;# 
  1676  0893                     	;# 
  1677  0893                     	;# 
  1678  0893                     	;# 
  1679  0893                     	;# 
  1680  0893                     	;# 
  1681  0893                     	;# 
  1682  0894                     	;# 
  1683  0894                     	;# 
  1684  0894                     	;# 
  1685  0895                     	;# 
  1686  0895                     	;# 
  1687  0895                     	;# 
  1688  0896                     	;# 
  1689  0896                     	;# 
  1690  0896                     	;# 
  1691  089B                     	;# 
  1692  0911                     	;# 
  1693  0912                     	;# 
  1694  0913                     	;# 
  1695  0914                     	;# 
  1696  0915                     	;# 
  1697  0916                     	;# 
  1698  0918                     	;# 
  1699  0919                     	;# 
  1700  091A                     	;# 
  1701  091B                     	;# 
  1702  091C                     	;# 
  1703  091D                     	;# 
  1704  091E                     	;# 
  1705  091F                     	;# 
  1706  0E0F                     	;# 
  1707  0E10                     	;# 
  1708  0E11                     	;# 
  1709  0E12                     	;# 
  1710  0E13                     	;# 
  1711  0E14                     	;# 
  1712  0E15                     	;# 
  1713  0E16                     	;# 
  1714  0E17                     	;# 
  1715  0E18                     	;# 
  1716  0E19                     	;# 
  1717  0E1A                     	;# 
  1718  0E1B                     	;# 
  1719  0E1C                     	;# 
  1720  0E1D                     	;# 
  1721  0E1E                     	;# 
  1722  0E1F                     	;# 
  1723  0E20                     	;# 
  1724  0E21                     	;# 
  1725  0E22                     	;# 
  1726  0E24                     	;# 
  1727  0E25                     	;# 
  1728  0E28                     	;# 
  1729  0E29                     	;# 
  1730  0E2A                     	;# 
  1731  0E2B                     	;# 
  1732  0E2C                     	;# 
  1733  0E2D                     	;# 
  1734  0E2E                     	;# 
  1735  0E2F                     	;# 
  1736  0E90                     	;# 
  1737  0E91                     	;# 
  1738  0E92                     	;# 
  1739  0E94                     	;# 
  1740  0E95                     	;# 
  1741  0EA0                     	;# 
  1742  0EA1                     	;# 
  1743  0EA2                     	;# 
  1744  0EA3                     	;# 
  1745  0EA4                     	;# 
  1746  0EA5                     	;# 
  1747  0F0F                     	;# 
  1748  0F10                     	;# 
  1749  0F11                     	;# 
  1750  0F12                     	;# 
  1751  0F13                     	;# 
  1752  0F14                     	;# 
  1753  0F15                     	;# 
  1754  0F16                     	;# 
  1755  0F17                     	;# 
  1756  0F18                     	;# 
  1757  0F19                     	;# 
  1758  0F1A                     	;# 
  1759  0F1B                     	;# 
  1760  0F1C                     	;# 
  1761  0F1D                     	;# 
  1762  0F1E                     	;# 
  1763  0F1F                     	;# 
  1764  0F20                     	;# 
  1765  0F21                     	;# 
  1766  0F22                     	;# 
  1767  0F23                     	;# 
  1768  0F24                     	;# 
  1769  0F25                     	;# 
  1770  0F26                     	;# 
  1771  0F27                     	;# 
  1772  0F28                     	;# 
  1773  0F29                     	;# 
  1774  0F2A                     	;# 
  1775  0F2B                     	;# 
  1776  0F2C                     	;# 
  1777  0F2D                     	;# 
  1778  0F2E                     	;# 
  1779  0F2F                     	;# 
  1780  0F30                     	;# 
  1781  0F31                     	;# 
  1782  0F32                     	;# 
  1783  0F33                     	;# 
  1784  0F34                     	;# 
  1785  0F35                     	;# 
  1786  0F36                     	;# 
  1787  0F37                     	;# 
  1788  0FE4                     	;# 
  1789  0FE5                     	;# 
  1790  0FE6                     	;# 
  1791  0FE7                     	;# 
  1792  0FE8                     	;# 
  1793  0FE9                     	;# 
  1794  0FEA                     	;# 
  1795  0FEB                     	;# 
  1796  0FED                     	;# 
  1797  0FEE                     	;# 
  1798  0FEF                     	;# 
  1799  0000                     	;# 
  1800  0001                     	;# 
  1801  0002                     	;# 
  1802  0003                     	;# 
  1803  0004                     	;# 
  1804  0005                     	;# 
  1805  0006                     	;# 
  1806  0007                     	;# 
  1807  0008                     	;# 
  1808  0009                     	;# 
  1809  000A                     	;# 
  1810  000B                     	;# 
  1811  000C                     	;# 
  1812  000E                     	;# 
  1813  0010                     	;# 
  1814  0011                     	;# 
  1815  0012                     	;# 
  1816  0013                     	;# 
  1817  0014                     	;# 
  1818  0015                     	;# 
  1819  0015                     	;# 
  1820  0016                     	;# 
  1821  0016                     	;# 
  1822  0017                     	;# 
  1823  0018                     	;# 
  1824  0019                     	;# 
  1825  0019                     	;# 
  1826  001A                     	;# 
  1827  001B                     	;# 
  1828  001C                     	;# 
  1829  001D                     	;# 
  1830  001E                     	;# 
  1831  001F                     	;# 
  1832  008C                     	;# 
  1833  008E                     	;# 
  1834  0090                     	;# 
  1835  0091                     	;# 
  1836  0092                     	;# 
  1837  0093                     	;# 
  1838  0094                     	;# 
  1839  0097                     	;# 
  1840  009B                     	;# 
  1841  009B                     	;# 
  1842  009C                     	;# 
  1843  009D                     	;# 
  1844  009E                     	;# 
  1845  009F                     	;# 
  1846  010C                     	;# 
  1847  010E                     	;# 
  1848  0111                     	;# 
  1849  0112                     	;# 
  1850  0113                     	;# 
  1851  0114                     	;# 
  1852  0115                     	;# 
  1853  0116                     	;# 
  1854  0117                     	;# 
  1855  0118                     	;# 
  1856  0119                     	;# 
  1857  018C                     	;# 
  1858  018E                     	;# 
  1859  0199                     	;# 
  1860  0199                     	;# 
  1861  0199                     	;# 
  1862  019A                     	;# 
  1863  019A                     	;# 
  1864  019A                     	;# 
  1865  019B                     	;# 
  1866  019B                     	;# 
  1867  019B                     	;# 
  1868  019B                     	;# 
  1869  019B                     	;# 
  1870  019C                     	;# 
  1871  019C                     	;# 
  1872  019C                     	;# 
  1873  019D                     	;# 
  1874  019D                     	;# 
  1875  019D                     	;# 
  1876  019E                     	;# 
  1877  019E                     	;# 
  1878  019E                     	;# 
  1879  019F                     	;# 
  1880  019F                     	;# 
  1881  019F                     	;# 
  1882  019F                     	;# 
  1883  019F                     	;# 
  1884  020C                     	;# 
  1885  020E                     	;# 
  1886  0211                     	;# 
  1887  0211                     	;# 
  1888  0212                     	;# 
  1889  0212                     	;# 
  1890  0213                     	;# 
  1891  0213                     	;# 
  1892  0214                     	;# 
  1893  0214                     	;# 
  1894  0215                     	;# 
  1895  0215                     	;# 
  1896  0215                     	;# 
  1897  0215                     	;# 
  1898  0216                     	;# 
  1899  0216                     	;# 
  1900  0217                     	;# 
  1901  0217                     	;# 
  1902  0219                     	;# 
  1903  021A                     	;# 
  1904  021B                     	;# 
  1905  021C                     	;# 
  1906  021D                     	;# 
  1907  021D                     	;# 
  1908  021E                     	;# 
  1909  021F                     	;# 
  1910  028C                     	;# 
  1911  028E                     	;# 
  1912  0291                     	;# 
  1913  0291                     	;# 
  1914  0292                     	;# 
  1915  0293                     	;# 
  1916  0294                     	;# 
  1917  0295                     	;# 
  1918  0295                     	;# 
  1919  0296                     	;# 
  1920  0297                     	;# 
  1921  0298                     	;# 
  1922  029F                     	;# 
  1923  030C                     	;# 
  1924  030E                     	;# 
  1925  0311                     	;# 
  1926  0311                     	;# 
  1927  0312                     	;# 
  1928  0313                     	;# 
  1929  0314                     	;# 
  1930  0315                     	;# 
  1931  0315                     	;# 
  1932  0316                     	;# 
  1933  0317                     	;# 
  1934  0318                     	;# 
  1935  038C                     	;# 
  1936  038E                     	;# 
  1937  0391                     	;# 
  1938  0392                     	;# 
  1939  0393                     	;# 
  1940  0397                     	;# 
  1941  0398                     	;# 
  1942  0399                     	;# 
  1943  039A                     	;# 
  1944  039C                     	;# 
  1945  039D                     	;# 
  1946  039E                     	;# 
  1947  039F                     	;# 
  1948  0411                     	;# 
  1949  0411                     	;# 
  1950  0412                     	;# 
  1951  0413                     	;# 
  1952  0414                     	;# 
  1953  0415                     	;# 
  1954  0416                     	;# 
  1955  0417                     	;# 
  1956  0418                     	;# 
  1957  0418                     	;# 
  1958  0419                     	;# 
  1959  041A                     	;# 
  1960  041B                     	;# 
  1961  041C                     	;# 
  1962  041D                     	;# 
  1963  041E                     	;# 
  1964  041F                     	;# 
  1965  0498                     	;# 
  1966  0498                     	;# 
  1967  0499                     	;# 
  1968  049A                     	;# 
  1969  049B                     	;# 
  1970  049B                     	;# 
  1971  049C                     	;# 
  1972  049D                     	;# 
  1973  049E                     	;# 
  1974  049F                     	;# 
  1975  0617                     	;# 
  1976  0618                     	;# 
  1977  0619                     	;# 
  1978  0619                     	;# 
  1979  061A                     	;# 
  1980  061B                     	;# 
  1981  061C                     	;# 
  1982  061C                     	;# 
  1983  061F                     	;# 
  1984  0691                     	;# 
  1985  0692                     	;# 
  1986  0693                     	;# 
  1987  0694                     	;# 
  1988  0695                     	;# 
  1989  0696                     	;# 
  1990  0697                     	;# 
  1991  0698                     	;# 
  1992  0699                     	;# 
  1993  0711                     	;# 
  1994  0712                     	;# 
  1995  0713                     	;# 
  1996  0714                     	;# 
  1997  0715                     	;# 
  1998  0716                     	;# 
  1999  0717                     	;# 
  2000  0718                     	;# 
  2001  0719                     	;# 
  2002  0891                     	;# 
  2003  0891                     	;# 
  2004  0891                     	;# 
  2005  0891                     	;# 
  2006  0891                     	;# 
  2007  0891                     	;# 
  2008  0892                     	;# 
  2009  0892                     	;# 
  2010  0892                     	;# 
  2011  0893                     	;# 
  2012  0893                     	;# 
  2013  0893                     	;# 
  2014  0893                     	;# 
  2015  0893                     	;# 
  2016  0893                     	;# 
  2017  0894                     	;# 
  2018  0894                     	;# 
  2019  0894                     	;# 
  2020  0895                     	;# 
  2021  0895                     	;# 
  2022  0895                     	;# 
  2023  0896                     	;# 
  2024  0896                     	;# 
  2025  0896                     	;# 
  2026  089B                     	;# 
  2027  0911                     	;# 
  2028  0912                     	;# 
  2029  0913                     	;# 
  2030  0914                     	;# 
  2031  0915                     	;# 
  2032  0916                     	;# 
  2033  0918                     	;# 
  2034  0919                     	;# 
  2035  091A                     	;# 
  2036  091B                     	;# 
  2037  091C                     	;# 
  2038  091D                     	;# 
  2039  091E                     	;# 
  2040  091F                     	;# 
  2041  0E0F                     	;# 
  2042  0E10                     	;# 
  2043  0E11                     	;# 
  2044  0E12                     	;# 
  2045  0E13                     	;# 
  2046  0E14                     	;# 
  2047  0E15                     	;# 
  2048  0E16                     	;# 
  2049  0E17                     	;# 
  2050  0E18                     	;# 
  2051  0E19                     	;# 
  2052  0E1A                     	;# 
  2053  0E1B                     	;# 
  2054  0E1C                     	;# 
  2055  0E1D                     	;# 
  2056  0E1E                     	;# 
  2057  0E1F                     	;# 
  2058  0E20                     	;# 
  2059  0E21                     	;# 
  2060  0E22                     	;# 
  2061  0E24                     	;# 
  2062  0E25                     	;# 
  2063  0E28                     	;# 
  2064  0E29                     	;# 
  2065  0E2A                     	;# 
  2066  0E2B                     	;# 
  2067  0E2C                     	;# 
  2068  0E2D                     	;# 
  2069  0E2E                     	;# 
  2070  0E2F                     	;# 
  2071  0E90                     	;# 
  2072  0E91                     	;# 
  2073  0E92                     	;# 
  2074  0E94                     	;# 
  2075  0E95                     	;# 
  2076  0EA0                     	;# 
  2077  0EA1                     	;# 
  2078  0EA2                     	;# 
  2079  0EA3                     	;# 
  2080  0EA4                     	;# 
  2081  0EA5                     	;# 
  2082  0F0F                     	;# 
  2083  0F10                     	;# 
  2084  0F11                     	;# 
  2085  0F12                     	;# 
  2086  0F13                     	;# 
  2087  0F14                     	;# 
  2088  0F15                     	;# 
  2089  0F16                     	;# 
  2090  0F17                     	;# 
  2091  0F18                     	;# 
  2092  0F19                     	;# 
  2093  0F1A                     	;# 
  2094  0F1B                     	;# 
  2095  0F1C                     	;# 
  2096  0F1D                     	;# 
  2097  0F1E                     	;# 
  2098  0F1F                     	;# 
  2099  0F20                     	;# 
  2100  0F21                     	;# 
  2101  0F22                     	;# 
  2102  0F23                     	;# 
  2103  0F24                     	;# 
  2104  0F25                     	;# 
  2105  0F26                     	;# 
  2106  0F27                     	;# 
  2107  0F28                     	;# 
  2108  0F29                     	;# 
  2109  0F2A                     	;# 
  2110  0F2B                     	;# 
  2111  0F2C                     	;# 
  2112  0F2D                     	;# 
  2113  0F2E                     	;# 
  2114  0F2F                     	;# 
  2115  0F30                     	;# 
  2116  0F31                     	;# 
  2117  0F32                     	;# 
  2118  0F33                     	;# 
  2119  0F34                     	;# 
  2120  0F35                     	;# 
  2121  0F36                     	;# 
  2122  0F37                     	;# 
  2123  0FE4                     	;# 
  2124  0FE5                     	;# 
  2125  0FE6                     	;# 
  2126  0FE7                     	;# 
  2127  0FE8                     	;# 
  2128  0FE9                     	;# 
  2129  0FEA                     	;# 
  2130  0FEB                     	;# 
  2131  0FED                     	;# 
  2132  0FEE                     	;# 
  2133  0FEF                     	;# 
  2134                           
  2135                           	psect	stringtext1
  2136  1000                     __pstringtext1:	
  2137  1000                     _dpowers:	
  2138  1000  3401               	retlw	1
  2139  1001  3400               	retlw	0
  2140  1002  3400               	retlw	0
  2141  1003  3400               	retlw	0
  2142  1004  340A               	retlw	10
  2143  1005  3400               	retlw	0
  2144  1006  3400               	retlw	0
  2145  1007  3400               	retlw	0
  2146  1008  3464               	retlw	100
  2147  1009  3400               	retlw	0
  2148  100A  3400               	retlw	0
  2149  100B  3400               	retlw	0
  2150  100C  34E8               	retlw	232
  2151  100D  3403               	retlw	3
  2152  100E  3400               	retlw	0
  2153  100F  3400               	retlw	0
  2154  1010  3410               	retlw	16
  2155  1011  3427               	retlw	39
  2156  1012  3400               	retlw	0
  2157  1013  3400               	retlw	0
  2158  1014  34A0               	retlw	160
  2159  1015  3486               	retlw	134
  2160  1016  3401               	retlw	1
  2161  1017  3400               	retlw	0
  2162  1018  3440               	retlw	64
  2163  1019  3442               	retlw	66
  2164  101A  340F               	retlw	15
  2165  101B  3400               	retlw	0
  2166  101C  3480               	retlw	128
  2167  101D  3496               	retlw	150
  2168  101E  3498               	retlw	152
  2169  101F  3400               	retlw	0
  2170  1020  3400               	retlw	0
  2171  1021  34E1               	retlw	225
  2172  1022  34F5               	retlw	245
  2173  1023  3405               	retlw	5
  2174  1024  3400               	retlw	0
  2175  1025  34CA               	retlw	202
  2176  1026  349A               	retlw	154
  2177  1027  343B               	retlw	59
  2178  1028                     __end_of_dpowers:	
  2179  1FE0                     _romArray_absaddr	set	8160
  2180                           
  2181                           	psect	stringtext2
  2182  1028                     __pstringtext2:	
  2183  1028                     _resetRomData:	
  2184  1028  34AA               	retlw	170
  2185  1029  3455               	retlw	85
  2186  102A  346E               	retlw	110
  2187  102B  3463               	retlw	99
  2188  102C  346F               	retlw	111
  2189  102D  346E               	retlw	110
  2190  102E  3466               	retlw	102
  2191  102F  3469               	retlw	105
  2192  1030  3467               	retlw	103
  2193  1031  3475               	retlw	117
  2194  1032  3472               	retlw	114
  2195  1033  3465               	retlw	101
  2196  1034  3464               	retlw	100
  2197  1035  3400               	retlw	0
  2198  1036  3400               	retlw	0
  2199  1037  3400               	retlw	0
  2200  1038  3400               	retlw	0
  2201  1039  3400               	retlw	0
  2202  103A  3400               	retlw	0
  2203  103B                     __end_of_resetRomData:	
  2204                           
  2205                           	psect	stringtext3
  2206  104C                     __pstringtext3:	
  2207  104C                     _n_ADDRESS_P0:	
  2208  104C  34AD               	retlw	173
  2209  104D  3487               	retlw	135
  2210  104E  3466               	retlw	102
  2211  104F  34BC               	retlw	188
  2212  1050  34BB               	retlw	187
  2213  1051                     __end_of_n_ADDRESS_P0:	
  2214                           
  2215                           	psect	stringtext4
  2216  1066                     __pstringtext4:	
  2217  1066                     _n_ADDRESS_MUL:	
  2218  1066  3421               	retlw	33
  2219  1067                     __end_of_n_ADDRESS_MUL:	
  2220  1FE0                     _romArray_absaddr	set	8160
  2221                           
  2222                           	psect	_romArray_text
  2223  1FE0                     __p_romArray_text:	
  2224  1FE0                     _romArray:	
  2225  1FE0  3400               	retlw	0
  2226  1FE1  3400               	retlw	0
  2227  1FE2  3400               	retlw	0
  2228  1FE3  3400               	retlw	0
  2229  1FE4  3400               	retlw	0
  2230  1FE5  3400               	retlw	0
  2231  1FE6  3400               	retlw	0
  2232  1FE7  3400               	retlw	0
  2233  1FE8  3400               	retlw	0
  2234  1FE9  3400               	retlw	0
  2235  1FEA  3400               	retlw	0
  2236  1FEB  3400               	retlw	0
  2237  1FEC  3400               	retlw	0
  2238  1FED  3400               	retlw	0
  2239  1FEE  3400               	retlw	0
  2240  1FEF  3400               	retlw	0
  2241  1FF0  3400               	retlw	0
  2242  1FF1  3400               	retlw	0
  2243  1FF2  3400               	retlw	0
  2244  1FF3  3400               	retlw	0
  2245  1FF4  3400               	retlw	0
  2246  1FF5  3400               	retlw	0
  2247  1FF6  3400               	retlw	0
  2248  1FF7  3400               	retlw	0
  2249  1FF8  3400               	retlw	0
  2250  1FF9  3400               	retlw	0
  2251  1FFA  3400               	retlw	0
  2252  1FFB  3400               	retlw	0
  2253  1FFC  3400               	retlw	0
  2254  1FFD  3400               	retlw	0
  2255  1FFE  3400               	retlw	0
  2256  1FFF  3400               	retlw	0
  2257  2000                     __end_of_romArray:	
  2258  0003                     _STATUSbits	set	3
  2259  0010                     _PIR0bits	set	16
  2260  000E                     _PORTCbits	set	14
  2261  000C                     _PORTAbits	set	12
  2262  000B                     _INTCONbits	set	11
  2263  0097                     _WDTCONbits	set	151
  2264  009E                     _ADCON1bits	set	158
  2265  009C                     _ADRESH	set	156
  2266  009B                     _ADRESL	set	155
  2267  009D                     _ADCON0bits	set	157
  2268  0090                     _PIE0bits	set	144
  2269  008E                     _TRISCbits	set	142
  2270  008C                     _TRISAbits	set	140
  2271  0117                     _FVRCONbits	set	279
  2272  018E                     _ANSELCbits	set	398
  2273  018C                     _ANSELAbits	set	396
  2274  018E                     _ANSELC	set	398
  2275  018C                     _ANSELA	set	396
  2276  020C                     _WPUAbits	set	524
  2277  020E                     _WPUC	set	526
  2278  020C                     _WPUA	set	524
  2279  0211                     _SSP1BUF	set	529
  2280  0214                     _SSP1STATbits	set	532
  2281  0215                     _SSP1CON1bits	set	533
  2282  028E                     _ODCONC	set	654
  2283  028C                     _ODCONA	set	652
  2284  038E                     _INLVLC	set	910
  2285  038C                     _INLVLA	set	908
  2286  0894                     _PMDATH	set	2196
  2287  0893                     _PMDATL	set	2195
  2288  0896                     _PMCON2	set	2198
  2289  0895                     _PMCON1bits	set	2197
  2290  0892                     _PMADRH	set	2194
  2291  0891                     _PMADRL	set	2193
  2292  0895                     _PMCON1	set	2197
  2293  0919                     _OSCCON1bits	set	2329
  2294  0EA0                     _RC0PPSbits	set	3744
  2295  0EA2                     _RC2PPSbits	set	3746
  2296  0EA1                     _RC1PPSbits	set	3745
  2297                           
  2298                           	psect	stringtext5
  2299  103B                     __pstringtext5:	
  2300  103B                     STR_8:	
  2301  103B  3425               	retlw	37	;'%'
  2302  103C  346C               	retlw	108	;'l'
  2303  103D  3475               	retlw	117	;'u'
  2304  103E  342E               	retlw	46	;'.'
  2305  103F  3425               	retlw	37	;'%'
  2306  1040  3436               	retlw	54	;'6'
  2307  1041  342E               	retlw	46	;'.'
  2308  1042  3436               	retlw	54	;'6'
  2309  1043  346C               	retlw	108	;'l'
  2310  1044  3475               	retlw	117	;'u'
  2311  1045  3400               	retlw	0
  2312                           
  2313                           	psect	stringtext6
  2314  1046                     __pstringtext6:	
  2315  1046                     STR_5:	
  2316  1046  3454               	retlw	84	;'T'
  2317  1047  3445               	retlw	69	;'E'
  2318  1048  344D               	retlw	77	;'M'
  2319  1049  3450               	retlw	80	;'P'
  2320  104A  3452               	retlw	82	;'R'
  2321  104B  3400               	retlw	0
  2322                           
  2323                           	psect	stringtext7
  2324  1051                     __pstringtext7:	
  2325  1051                     STR_4:	
  2326  1051  3454               	retlw	84	;'T'
  2327  1052  3445               	retlw	69	;'E'
  2328  1053  344D               	retlw	77	;'M'
  2329  1054  3450               	retlw	80	;'P'
  2330  1055  3400               	retlw	0
  2331                           
  2332                           	psect	stringtext8
  2333  1056                     __pstringtext8:	
  2334  1056                     STR_3:	
  2335  1056  3456               	retlw	86	;'V'
  2336  1057  3442               	retlw	66	;'B'
  2337  1058  3441               	retlw	65	;'A'
  2338  1059  3454               	retlw	84	;'T'
  2339  105A  3400               	retlw	0
  2340                           
  2341                           	psect	stringtext9
  2342  105B                     __pstringtext9:	
  2343  105B                     STR_7:	
  2344  105B  3442               	retlw	66	;'B'
  2345  105C  344F               	retlw	79	;'O'
  2346  105D  344F               	retlw	79	;'O'
  2347  105E  3454               	retlw	84	;'T'
  2348  105F  3400               	retlw	0
  2349                           
  2350                           	psect	stringtext10
  2351  1060                     __pstringtext10:	
  2352  1060                     STR_6:	
  2353  1060  3455               	retlw	85	;'U'
  2354  1061  3457               	retlw	87	;'W'
  2355  1062  3430               	retlw	48	;'0'
  2356  1063  3400               	retlw	0
  2357                           
  2358                           	psect	stringtext11
  2359  1064                     __pstringtext11:	
  2360  1064                     STR_1:	
  2361  1064  342F               	retlw	47	;'/'
  2362  1065  3400               	retlw	0
  2363                           
  2364                           	psect	stringtext12
  2365  0000                     __pstringtext12:	
  2366  1064                     
  2367                           ; #config settings
  2368  0000                     
  2369                           	psect	cinit
  2370  0011                     start_initialization:	
  2371  0011                     __initialization:	
  2372                           
  2373                           ; Clear objects allocated to BANK0
  2374  0011  0020               	movlb	0	; select bank0
  2375  0012  01EE               	clrf	__pbssBANK0& (0+127)
  2376                           
  2377                           ; Clear objects allocated to BANK1
  2378  0013  0021               	movlb	1	; select bank1
  2379  0014  01ED               	clrf	__pbssBANK1& (0+127)
  2380  0015  01EE               	clrf	(__pbssBANK1+1)& (0+127)
  2381                           
  2382                           ; Clear objects allocated to BANK2
  2383  0016  3020               	movlw	low __pbssBANK2
  2384  0017  0084               	movwf	4
  2385  0018  3001               	movlw	high __pbssBANK2
  2386  0019  0085               	movwf	5
  2387  001A  3049               	movlw	73
  2388  001B  3188  2012  3180   	fcall	clear_ram0
  2389                           
  2390                           ; Clear objects allocated to BANK3
  2391  001E  30A0               	movlw	low __pbssBANK3
  2392  001F  0084               	movwf	4
  2393  0020  3001               	movlw	high __pbssBANK3
  2394  0021  0085               	movwf	5
  2395  0022  3020               	movlw	32
  2396  0023  3188  2012         	fcall	clear_ram0
  2397  0025                     end_of_initialization:	
  2398                           ;End of C runtime variable initialization code
  2399                           
  2400  0025                     __end_of__initialization:	
  2401  0025  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2402  0026  0020               	movlb	0
  2403  0027  318F  2F69         	ljmp	_main	;jump to C main() function
  2404                           
  2405                           	psect	bssBANK0
  2406  006E                     __pbssBANK0:	
  2407  006E                     _nrf24l01:	
  2408  006E                     	ds	1
  2409                           
  2410                           	psect	bssBANK1
  2411  00ED                     __pbssBANK1:	
  2412  00ED                     _TXPacket:	
  2413  00ED                     	ds	1
  2414  00EE                     _sleepLoop:	
  2415  00EE                     	ds	1
  2416                           
  2417                           	psect	bssBANK2
  2418  0120                     __pbssBANK2:	
  2419  0120                     _counter:	
  2420  0120                     	ds	4
  2421  0124                     _RXPacket:	
  2422  0124                     	ds	33
  2423  0145                     _romData:	
  2424  0145                     	ds	19
  2425  0158                     ftoa@buf:	
  2426  0158                     	ds	17
  2427                           
  2428                           	psect	bssBANK3
  2429  01A0                     __pbssBANK3:	
  2430  01A0                     _romHolder:	
  2431  01A0                     	ds	32
  2432                           
  2433                           	psect	clrtext
  2434  0812                     clear_ram0:	
  2435                           ;	Called with FSR0 containing the base address, and
  2436                           ;	WREG with the size to clear
  2437                           
  2438  0812  0064               	clrwdt	;clear the watchdog before getting into this loop
  2439  0813                     clrloop0:	
  2440  0813  0180               	clrf	0	;clear RAM location pointed to by FSR
  2441  0814  3101               	addfsr 0,1
  2442  0815  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2443  0816  2813               	goto	clrloop0	;have we reached the end yet?
  2444  0817  3400               	retlw	0	;all done for this memory range, return
  2445                           
  2446                           	psect	cstackBANK1
  2447  00A0                     __pcstackBANK1:	
  2448  00A0                     setMessage@status:	
  2449                           
  2450                           ; 2 bytes @ 0x0
  2451  00A0                     	ds	2
  2452  00A2                     setMessage@packet:	
  2453                           
  2454                           ; 1 bytes @ 0x2
  2455  00A2                     	ds	1
  2456  00A3                     _loop$2039:	
  2457                           
  2458                           ; 3 bytes @ 0x3
  2459  00A3                     	ds	3
  2460  00A6                     _loop$2040:	
  2461                           
  2462                           ; 3 bytes @ 0x6
  2463  00A6                     	ds	3
  2464  00A9                     loop@packet:	
  2465                           
  2466                           ; 33 bytes @ 0x9
  2467  00A9                     	ds	33
  2468  00CA                     ??_main:	
  2469                           
  2470                           ; 1 bytes @ 0x2A
  2471  00CA                     	ds	1
  2472  00CB                     main@pipe:	
  2473                           
  2474                           ; 1 bytes @ 0x2B
  2475  00CB                     	ds	1
  2476  00CC                     main@packet:	
  2477                           
  2478                           ; 33 bytes @ 0x2C
  2479  00CC                     	ds	33
  2480                           
  2481                           	psect	cstackCOMMON
  2482  0070                     __pcstackCOMMON:	
  2483  0070                     ?_isdigit:	
  2484  0070                     ?_nrf24l01ISR:	
  2485                           ; 1 bit 
  2486                           
  2487  0070                     ?_nrf24l01SetRXMode:	
  2488                           ; 1 bytes @ 0x0
  2489                           
  2490  0070                     ?_nrf24l01GetRXPacket:	
  2491                           ; 1 bytes @ 0x0
  2492                           
  2493  0070                     ?_nrf24l01SendPacket:	
  2494                           ; 1 bytes @ 0x0
  2495                           
  2496  0070                     ?_nrf24l01Init:	
  2497                           ; 1 bytes @ 0x0
  2498                           
  2499  0070                     ?_nrf24l01SetTXPipe:	
  2500                           ; 1 bytes @ 0x0
  2501                           
  2502  0070                     ?_nrf24l01SetRXPipe:	
  2503                           ; 1 bytes @ 0x0
  2504                           
  2505  0070                     ?_flashWriteByte:	
  2506                           ; 1 bytes @ 0x0
  2507                           
  2508  0070                     ?_flashRealod:	
  2509                           ; 1 bytes @ 0x0
  2510                           
  2511  0070                     ?_flashUpdate:	
  2512                           ; 1 bytes @ 0x0
  2513                           
  2514  0070                     ?_nrf24l01CELow:	
  2515                           ; 1 bytes @ 0x0
  2516                           
  2517  0070                     ??_nrf24l01CELow:	
  2518                           ; 1 bytes @ 0x0
  2519                           
  2520  0070                     ?_nrf24l01CEHigh:	
  2521                           ; 1 bytes @ 0x0
  2522                           
  2523  0070                     ??_nrf24l01CEHigh:	
  2524                           ; 1 bytes @ 0x0
  2525                           
  2526  0070                     ?_nrf24l01CSLow:	
  2527                           ; 1 bytes @ 0x0
  2528                           
  2529  0070                     ??_nrf24l01CSLow:	
  2530                           ; 1 bytes @ 0x0
  2531                           
  2532  0070                     ?_nrf24l01CSHigh:	
  2533                           ; 1 bytes @ 0x0
  2534                           
  2535  0070                     ??_nrf24l01CSHigh:	
  2536                           ; 1 bytes @ 0x0
  2537                           
  2538  0070                     ?_nrf24l01InterfaceInit:	
  2539                           ; 1 bytes @ 0x0
  2540                           
  2541  0070                     ?_nrf24l01SPISend:	
  2542                           ; 1 bytes @ 0x0
  2543                           
  2544  0070                     ??_nrf24l01SPISend:	
  2545                           ; 1 bytes @ 0x0
  2546                           
  2547  0070                     ?_nrf24l01SPIStart:	
  2548                           ; 1 bytes @ 0x0
  2549                           
  2550  0070                     ??_nrf24l01SPIStart:	
  2551                           ; 1 bytes @ 0x0
  2552                           
  2553  0070                     ?_nrf24l01SPIEnd:	
  2554                           ; 1 bytes @ 0x0
  2555                           
  2556  0070                     ??_nrf24l01SPIEnd:	
  2557                           ; 1 bytes @ 0x0
  2558                           
  2559  0070                     ?_enableInterrupts:	
  2560                           ; 1 bytes @ 0x0
  2561                           
  2562  0070                     ??_enableInterrupts:	
  2563                           ; 1 bytes @ 0x0
  2564                           
  2565  0070                     ?_exception:	
  2566                           ; 1 bytes @ 0x0
  2567                           
  2568  0070                     ?_ISR:	
  2569                           ; 1 bytes @ 0x0
  2570                           
  2571  0070                     ?_sleep:	
  2572                           ; 1 bytes @ 0x0
  2573                           
  2574  0070                     ?_checkTXPower:	
  2575                           ; 1 bytes @ 0x0
  2576                           
  2577  0070                     ?_loop:	
  2578                           ; 1 bytes @ 0x0
  2579                           
  2580  0070                     ?_nrf24l01GetPipe:	
  2581                           ; 1 bytes @ 0x0
  2582                           
  2583  0070                     ?_main:	
  2584                           ; 1 bytes @ 0x0
  2585                           
  2586  0070                     ?_nrf24l01CheckACK:	
  2587                           ; 1 bytes @ 0x0
  2588                           
  2589  0070                     ?_nrf24l01ReceivePacket:	
  2590                           ; 1 bytes @ 0x0
  2591                           
  2592  0070                     ?_nrf24l01InitRegisters:	
  2593                           ; 1 bytes @ 0x0
  2594                           
  2595  0070                     ?i1_nrf24l01SetRXMode:	
  2596                           ; 1 bytes @ 0x0
  2597                           
  2598  0070                     ?i1_memset:	
  2599                           ; 1 bytes @ 0x0
  2600                           
  2601  0070                     ?_strcmp:	
  2602                           ; 1 bytes @ 0x0
  2603                           
  2604  0070                     ?i1___wmul:	
  2605                           ; 2 bytes @ 0x0
  2606                           
  2607  0070                     nrf24l01SPISend@data:	
  2608                           ; 2 bytes @ 0x0
  2609                           
  2610  0070                     enableInterrupts@enable:	
  2611                           ; 1 bytes @ 0x0
  2612                           
  2613  0070                     strcmp@s2:	
  2614                           ; 1 bytes @ 0x0
  2615                           
  2616  0070                     flashWriteByte@offset:	
  2617                           ; 1 bytes @ 0x0
  2618                           
  2619  0070                     i1___wmul@multiplier:	
  2620                           ; 2 bytes @ 0x0
  2621                           
  2622  0070                     i1memset@p1:	
  2623                           ; 2 bytes @ 0x0
  2624                           
  2625                           
  2626                           ; 2 bytes @ 0x0
  2627  0070                     	ds	1
  2628  0071                     ?i1_nrf24l01Send:	
  2629  0071                     i1nrf24l01Send@data:	
  2630                           ; 1 bytes @ 0x1
  2631                           
  2632                           
  2633                           ; 1 bytes @ 0x1
  2634  0071                     	ds	1
  2635  0072                     ??_strcmp:	
  2636  0072                     ??i1_nrf24l01Send:	
  2637                           ; 1 bytes @ 0x2
  2638                           
  2639  0072                     flashWriteByte@data:	
  2640                           ; 1 bytes @ 0x2
  2641                           
  2642  0072                     i1___wmul@multiplicand:	
  2643                           ; 2 bytes @ 0x2
  2644                           
  2645  0072                     i1memset@c:	
  2646                           ; 2 bytes @ 0x2
  2647                           
  2648                           
  2649                           ; 2 bytes @ 0x2
  2650  0072                     	ds	1
  2651  0073                     strcmp@r:	
  2652  0073                     i1nrf24l01Send@command:	
  2653                           ; 1 bytes @ 0x3
  2654                           
  2655                           
  2656                           ; 1 bytes @ 0x3
  2657  0073                     	ds	1
  2658  0074                     ??_flashWriteByte:	
  2659  0074                     ??i1_nrf24l01SetRXMode:	
  2660                           ; 1 bytes @ 0x4
  2661                           
  2662  0074                     ??i1___wmul:	
  2663                           ; 1 bytes @ 0x4
  2664                           
  2665  0074                     strcmp@s1:	
  2666                           ; 1 bytes @ 0x4
  2667                           
  2668  0074                     flashWriteByte@address:	
  2669                           ; 1 bytes @ 0x4
  2670                           
  2671  0074                     i1___wmul@product:	
  2672                           ; 2 bytes @ 0x4
  2673                           
  2674  0074                     i1memset@n:	
  2675                           ; 2 bytes @ 0x4
  2676                           
  2677                           
  2678                           ; 2 bytes @ 0x4
  2679  0074                     	ds	1
  2680  0075                     i1nrf24l01SetRXMode@config:	
  2681                           
  2682                           ; 1 bytes @ 0x5
  2683  0075                     	ds	1
  2684  0076                     ??_flashUpdate:	
  2685  0076                     ??i1_memset:	
  2686                           ; 1 bytes @ 0x6
  2687                           
  2688  0076                     i1nrf24l01SetRXMode@rxMode:	
  2689                           ; 1 bytes @ 0x6
  2690                           
  2691  0076                     i1memset@p:	
  2692                           ; 1 bytes @ 0x6
  2693                           
  2694                           
  2695                           ; 2 bytes @ 0x6
  2696  0076                     	ds	1
  2697  0077                     ??_nrf24l01CheckACK:	
  2698                           
  2699                           ; 1 bytes @ 0x7
  2700  0077                     	ds	1
  2701  0078                     ??_nrf24l01ReceivePacket:	
  2702  0078                     flashUpdate@i:	
  2703                           ; 1 bytes @ 0x8
  2704                           
  2705                           
  2706                           ; 2 bytes @ 0x8
  2707  0078                     	ds	1
  2708  0079                     nrf24l01ReceivePacket@width:	
  2709                           
  2710                           ; 1 bytes @ 0x9
  2711  0079                     	ds	1
  2712  007A                     ??_exception:	
  2713  007A                     nrf24l01ReceivePacket@i:	
  2714                           ; 1 bytes @ 0xA
  2715                           
  2716                           
  2717                           ; 1 bytes @ 0xA
  2718  007A                     	ds	2
  2719  007C                     exception@exception:	
  2720                           
  2721                           ; 1 bytes @ 0xC
  2722  007C                     	ds	1
  2723  007D                     ??_nrf24l01ISR:	
  2724                           
  2725                           ; 1 bytes @ 0xD
  2726  007D                     	ds	1
  2727  007E                     ??_ISR:	
  2728                           
  2729                           	psect	cstackBANK0
  2730  0020                     __pcstackBANK0:	
  2731                           ; 1 bytes @ 0xE
  2732                           
  2733  0020                     nrf24l01ISR@status:	
  2734                           
  2735                           ; 1 bytes @ 0x0
  2736  0020                     	ds	1
  2737  0021                     ?___ftge:	
  2738  0021                     ??_nrf24l01GetRXPacket:	
  2739                           ; 1 bit 
  2740                           
  2741  0021                     ?_strcpy:	
  2742                           ; 1 bytes @ 0x1
  2743                           
  2744  0021                     ??_isdigit:	
  2745                           ; 1 bytes @ 0x1
  2746                           
  2747  0021                     ??_nrf24l01InterfaceInit:	
  2748                           ; 1 bytes @ 0x1
  2749                           
  2750  0021                     ??_sleep:	
  2751                           ; 1 bytes @ 0x1
  2752                           
  2753  0021                     ?_nrf24l01Send:	
  2754                           ; 1 bytes @ 0x1
  2755                           
  2756  0021                     ?___bmul:	
  2757                           ; 1 bytes @ 0x1
  2758                           
  2759  0021                     ?_memset:	
  2760                           ; 1 bytes @ 0x1
  2761                           
  2762  0021                     ?_strlen:	
  2763                           ; 2 bytes @ 0x1
  2764                           
  2765  0021                     ?_flashReadByte:	
  2766                           ; 2 bytes @ 0x1
  2767                           
  2768  0021                     ?___wmul:	
  2769                           ; 2 bytes @ 0x1
  2770                           
  2771  0021                     ?___lwmod:	
  2772                           ; 2 bytes @ 0x1
  2773                           
  2774  0021                     ?___ftpack:	
  2775                           ; 2 bytes @ 0x1
  2776                           
  2777  0021                     ?___ftneg:	
  2778                           ; 3 bytes @ 0x1
  2779                           
  2780  0021                     ?___lldiv:	
  2781                           ; 3 bytes @ 0x1
  2782                           
  2783  0021                     nrf24l01Send@data:	
  2784                           ; 4 bytes @ 0x1
  2785                           
  2786  0021                     ___bmul@multiplicand:	
  2787                           ; 1 bytes @ 0x1
  2788                           
  2789  0021                     _isdigit$1776:	
  2790                           ; 1 bytes @ 0x1
  2791                           
  2792  0021                     flashReadByte@offset:	
  2793                           ; 1 bytes @ 0x1
  2794                           
  2795  0021                     ___wmul@multiplier:	
  2796                           ; 2 bytes @ 0x1
  2797                           
  2798  0021                     ___lwmod@divisor:	
  2799                           ; 2 bytes @ 0x1
  2800                           
  2801  0021                     memset@p1:	
  2802                           ; 2 bytes @ 0x1
  2803                           
  2804  0021                     strcpy@from:	
  2805                           ; 2 bytes @ 0x1
  2806                           
  2807  0021                     strlen@s:	
  2808                           ; 2 bytes @ 0x1
  2809                           
  2810  0021                     ___ftpack@arg:	
  2811                           ; 2 bytes @ 0x1
  2812                           
  2813  0021                     ___ftge@ff1:	
  2814                           ; 3 bytes @ 0x1
  2815                           
  2816  0021                     ___ftneg@f1:	
  2817                           ; 3 bytes @ 0x1
  2818                           
  2819  0021                     ___lldiv@divisor:	
  2820                           ; 3 bytes @ 0x1
  2821                           
  2822                           
  2823                           ; 4 bytes @ 0x1
  2824  0021                     	ds	1
  2825  0022                     ??_nrf24l01Send:	
  2826  0022                     ??___bmul:	
  2827                           ; 1 bytes @ 0x2
  2828                           
  2829  0022                     isdigit@c:	
  2830                           ; 1 bytes @ 0x2
  2831                           
  2832                           
  2833                           ; 1 bytes @ 0x2
  2834  0022                     	ds	1
  2835  0023                     ??_strlen:	
  2836  0023                     ??_strcpy:	
  2837                           ; 1 bytes @ 0x3
  2838                           
  2839  0023                     ??_flashReadByte:	
  2840                           ; 1 bytes @ 0x3
  2841                           
  2842  0023                     nrf24l01Send@command:	
  2843                           ; 1 bytes @ 0x3
  2844                           
  2845  0023                     ___bmul@product:	
  2846                           ; 1 bytes @ 0x3
  2847                           
  2848  0023                     ___wmul@multiplicand:	
  2849                           ; 1 bytes @ 0x3
  2850                           
  2851  0023                     ___lwmod@dividend:	
  2852                           ; 2 bytes @ 0x3
  2853                           
  2854  0023                     memset@c:	
  2855                           ; 2 bytes @ 0x3
  2856                           
  2857                           
  2858                           ; 2 bytes @ 0x3
  2859  0023                     	ds	1
  2860  0024                     ??_nrf24l01SetRXMode:	
  2861  0024                     ?_nrf24l01ChangeTXPower:	
  2862                           ; 1 bytes @ 0x4
  2863                           
  2864  0024                     ??_nrf24l01SetRXPipe:	
  2865                           ; 1 bytes @ 0x4
  2866                           
  2867  0024                     ??___ftneg:	
  2868                           ; 1 bytes @ 0x4
  2869                           
  2870  0024                     ___bmul@multiplier:	
  2871                           ; 1 bytes @ 0x4
  2872                           
  2873  0024                     ___ftpack@exp:	
  2874                           ; 1 bytes @ 0x4
  2875                           
  2876  0024                     strcpy@to:	
  2877                           ; 1 bytes @ 0x4
  2878                           
  2879  0024                     nrf24l01ChangeTXPower@addPower:	
  2880                           ; 1 bytes @ 0x4
  2881                           
  2882  0024                     ___ftge@ff2:	
  2883                           ; 2 bytes @ 0x4
  2884                           
  2885                           
  2886                           ; 3 bytes @ 0x4
  2887  0024                     	ds	1
  2888  0025                     ??_nrf24l01SetTXPipe:	
  2889  0025                     ??___wmul:	
  2890                           ; 1 bytes @ 0x5
  2891                           
  2892  0025                     ??___lwmod:	
  2893                           ; 1 bytes @ 0x5
  2894                           
  2895  0025                     nrf24l01SetRXMode@config:	
  2896                           ; 1 bytes @ 0x5
  2897                           
  2898  0025                     ___ftpack@sign:	
  2899                           ; 1 bytes @ 0x5
  2900                           
  2901  0025                     strcpy@cp:	
  2902                           ; 1 bytes @ 0x5
  2903                           
  2904  0025                     ___wmul@product:	
  2905                           ; 1 bytes @ 0x5
  2906                           
  2907  0025                     memset@n:	
  2908                           ; 2 bytes @ 0x5
  2909                           
  2910  0025                     strlen@cp:	
  2911                           ; 2 bytes @ 0x5
  2912                           
  2913  0025                     ___lldiv@dividend:	
  2914                           ; 2 bytes @ 0x5
  2915                           
  2916                           
  2917                           ; 4 bytes @ 0x5
  2918  0025                     	ds	1
  2919  0026                     ??_nrf24l01ChangeTXPower:	
  2920  0026                     ??___ftpack:	
  2921                           ; 1 bytes @ 0x6
  2922                           
  2923  0026                     nrf24l01SetRXMode@rxMode:	
  2924                           ; 1 bytes @ 0x6
  2925                           
  2926  0026                     nrf24l01SetRXPipe@pipe:	
  2927                           ; 1 bytes @ 0x6
  2928                           
  2929  0026                     ___lwmod@counter:	
  2930                           ; 1 bytes @ 0x6
  2931                           
  2932  0026                     flashReadByte@result:	
  2933                           ; 1 bytes @ 0x6
  2934                           
  2935                           
  2936                           ; 2 bytes @ 0x6
  2937  0026                     	ds	1
  2938  0027                     ??_memset:	
  2939  0027                     ??_nrf24l01GetPipe:	
  2940                           ; 1 bytes @ 0x7
  2941                           
  2942  0027                     ??___ftge:	
  2943                           ; 1 bytes @ 0x7
  2944                           
  2945  0027                     nrf24l01ChangeTXPower@rfSetup:	
  2946                           ; 1 bytes @ 0x7
  2947                           
  2948  0027                     nrf24l01SetTXPipe@pipe:	
  2949                           ; 1 bytes @ 0x7
  2950                           
  2951  0027                     nrf24l01SetRXPipe@enRXAddr:	
  2952                           ; 1 bytes @ 0x7
  2953                           
  2954  0027                     memset@p:	
  2955                           ; 1 bytes @ 0x7
  2956                           
  2957                           
  2958                           ; 2 bytes @ 0x7
  2959  0027                     	ds	1
  2960  0028                     ??_nrf24l01SendPacket:	
  2961  0028                     ??_checkTXPower:	
  2962                           ; 1 bytes @ 0x8
  2963                           
  2964  0028                     ??_nrf24l01InitRegisters:	
  2965                           ; 1 bytes @ 0x8
  2966                           
  2967  0028                     flashReadByte@address:	
  2968                           ; 1 bytes @ 0x8
  2969                           
  2970                           
  2971                           ; 2 bytes @ 0x8
  2972  0028                     	ds	1
  2973  0029                     ??___lldiv:	
  2974  0029                     ?___ftdiv:	
  2975                           ; 1 bytes @ 0x9
  2976                           
  2977  0029                     ?___ftmul:	
  2978                           ; 3 bytes @ 0x9
  2979                           
  2980  0029                     ?___lbtoft:	
  2981                           ; 3 bytes @ 0x9
  2982                           
  2983  0029                     ?___lltoft:	
  2984                           ; 3 bytes @ 0x9
  2985                           
  2986  0029                     ?___lwtoft:	
  2987                           ; 3 bytes @ 0x9
  2988                           
  2989  0029                     checkTXPower@rxPacket:	
  2990                           ; 3 bytes @ 0x9
  2991                           
  2992  0029                     nrf24l01GetPipe@pipe:	
  2993                           ; 1 bytes @ 0x9
  2994                           
  2995  0029                     ___lwtoft@c:	
  2996                           ; 1 bytes @ 0x9
  2997                           
  2998  0029                     ___ftdiv@f2:	
  2999                           ; 2 bytes @ 0x9
  3000                           
  3001  0029                     ___ftmul@f1:	
  3002                           ; 3 bytes @ 0x9
  3003                           
  3004  0029                     ___lltoft@c:	
  3005                           ; 3 bytes @ 0x9
  3006                           
  3007                           
  3008                           ; 4 bytes @ 0x9
  3009  0029                     	ds	1
  3010  002A                     ??_flashRealod:	
  3011  002A                     nrf24l01GetPipe@name:	
  3012                           ; 1 bytes @ 0xA
  3013                           
  3014  002A                     nrf24l01SendPacket@Packet:	
  3015                           ; 1 bytes @ 0xA
  3016                           
  3017  002A                     nrf24l01InitRegisters@channel:	
  3018                           ; 1 bytes @ 0xA
  3019                           
  3020  002A                     ___lldiv@quotient:	
  3021                           ; 1 bytes @ 0xA
  3022                           
  3023                           
  3024                           ; 4 bytes @ 0xA
  3025  002A                     	ds	1
  3026  002B                     nrf24l01GetPipe@i:	
  3027  002B                     nrf24l01SendPacket@i:	
  3028                           ; 1 bytes @ 0xB
  3029                           
  3030  002B                     nrf24l01InitRegisters@setupAW:	
  3031                           ; 1 bytes @ 0xB
  3032                           
  3033  002B                     flashRealod@i:	
  3034                           ; 1 bytes @ 0xB
  3035                           
  3036                           
  3037                           ; 2 bytes @ 0xB
  3038  002B                     	ds	1
  3039  002C                     ??___lbtoft:	
  3040  002C                     ??___lwtoft:	
  3041                           ; 1 bytes @ 0xC
  3042                           
  3043  002C                     nrf24l01InitRegisters@feature:	
  3044                           ; 1 bytes @ 0xC
  3045                           
  3046  002C                     ___ftdiv@f1:	
  3047                           ; 1 bytes @ 0xC
  3048                           
  3049  002C                     ___ftmul@f2:	
  3050                           ; 3 bytes @ 0xC
  3051                           
  3052                           
  3053                           ; 3 bytes @ 0xC
  3054  002C                     	ds	1
  3055  002D                     ??___lltoft:	
  3056  002D                     nrf24l01InitRegisters@rfSetup:	
  3057                           ; 1 bytes @ 0xD
  3058                           
  3059                           
  3060                           ; 1 bytes @ 0xD
  3061  002D                     	ds	1
  3062  002E                     nrf24l01InitRegisters@status:	
  3063  002E                     ___lldiv@counter:	
  3064                           ; 1 bytes @ 0xE
  3065                           
  3066  002E                     ___lltoft@exp:	
  3067                           ; 1 bytes @ 0xE
  3068                           
  3069                           
  3070                           ; 1 bytes @ 0xE
  3071  002E                     	ds	1
  3072  002F                     ??___ftdiv:	
  3073  002F                     ??___ftmul:	
  3074                           ; 1 bytes @ 0xF
  3075                           
  3076  002F                     ?___llmod:	
  3077                           ; 1 bytes @ 0xF
  3078                           
  3079  002F                     nrf24l01InitRegisters@enAA:	
  3080                           ; 4 bytes @ 0xF
  3081                           
  3082  002F                     ___llmod@divisor:	
  3083                           ; 1 bytes @ 0xF
  3084                           
  3085                           
  3086                           ; 4 bytes @ 0xF
  3087  002F                     	ds	1
  3088  0030                     nrf24l01InitRegisters@DynPD:	
  3089  0030                     ___lbtoft@c:	
  3090                           ; 1 bytes @ 0x10
  3091                           
  3092                           
  3093                           ; 1 bytes @ 0x10
  3094  0030                     	ds	1
  3095  0031                     ?___ftadd:	
  3096  0031                     nrf24l01InitRegisters@config:	
  3097                           ; 3 bytes @ 0x11
  3098                           
  3099  0031                     ___ftadd@f1:	
  3100                           ; 1 bytes @ 0x11
  3101                           
  3102                           
  3103                           ; 3 bytes @ 0x11
  3104  0031                     	ds	1
  3105  0032                     nrf24l01InitRegisters@i:	
  3106                           
  3107                           ; 2 bytes @ 0x12
  3108  0032                     	ds	1
  3109  0033                     ___ftdiv@cntr:	
  3110  0033                     ___ftmul@exp:	
  3111                           ; 1 bytes @ 0x13
  3112                           
  3113  0033                     ___llmod@dividend:	
  3114                           ; 1 bytes @ 0x13
  3115                           
  3116                           
  3117                           ; 4 bytes @ 0x13
  3118  0033                     	ds	1
  3119  0034                     ??_nrf24l01Init:	
  3120  0034                     ___ftadd@f2:	
  3121                           ; 1 bytes @ 0x14
  3122                           
  3123  0034                     ___ftdiv@f3:	
  3124                           ; 3 bytes @ 0x14
  3125                           
  3126  0034                     ___ftmul@f3_as_product:	
  3127                           ; 3 bytes @ 0x14
  3128                           
  3129                           
  3130                           ; 3 bytes @ 0x14
  3131  0034                     	ds	3
  3132  0037                     ??___ftadd:	
  3133  0037                     ??___llmod:	
  3134                           ; 1 bytes @ 0x17
  3135                           
  3136  0037                     ___ftdiv@exp:	
  3137                           ; 1 bytes @ 0x17
  3138                           
  3139  0037                     ___ftmul@cntr:	
  3140                           ; 1 bytes @ 0x17
  3141                           
  3142                           
  3143                           ; 1 bytes @ 0x17
  3144  0037                     	ds	1
  3145  0038                     ___ftdiv@sign:	
  3146  0038                     ___ftmul@sign:	
  3147                           ; 1 bytes @ 0x18
  3148                           
  3149  0038                     ___llmod@counter:	
  3150                           ; 1 bytes @ 0x18
  3151                           
  3152                           
  3153                           ; 1 bytes @ 0x18
  3154  0038                     	ds	1
  3155  0039                     ?_sprintf:	
  3156  0039                     ?___fttol:	
  3157                           ; 2 bytes @ 0x19
  3158                           
  3159  0039                     sprintf@f:	
  3160                           ; 4 bytes @ 0x19
  3161                           
  3162  0039                     ___fttol@f1:	
  3163                           ; 2 bytes @ 0x19
  3164                           
  3165                           
  3166                           ; 3 bytes @ 0x19
  3167  0039                     	ds	2
  3168  003B                     ___ftadd@sign:	
  3169                           
  3170                           ; 1 bytes @ 0x1B
  3171  003B                     	ds	1
  3172  003C                     ___ftadd@exp2:	
  3173                           
  3174                           ; 1 bytes @ 0x1C
  3175  003C                     	ds	1
  3176  003D                     ??___fttol:	
  3177  003D                     ___ftadd@exp1:	
  3178                           ; 1 bytes @ 0x1D
  3179                           
  3180                           
  3181                           ; 1 bytes @ 0x1D
  3182  003D                     	ds	1
  3183  003E                     ?_getADCValue:	
  3184  003E                     ?___ftsub:	
  3185                           ; 3 bytes @ 0x1E
  3186                           
  3187  003E                     getADCValue@multiplier:	
  3188                           ; 3 bytes @ 0x1E
  3189                           
  3190  003E                     ___ftsub@f2:	
  3191                           ; 3 bytes @ 0x1E
  3192                           
  3193                           
  3194                           ; 3 bytes @ 0x1E
  3195  003E                     	ds	3
  3196  0041                     ??_getADCValue:	
  3197  0041                     ___fttol@sign1:	
  3198                           ; 1 bytes @ 0x21
  3199                           
  3200  0041                     ___ftsub@f1:	
  3201                           ; 1 bytes @ 0x21
  3202                           
  3203                           
  3204                           ; 3 bytes @ 0x21
  3205  0041                     	ds	1
  3206  0042                     ___fttol@lval:	
  3207                           
  3208                           ; 4 bytes @ 0x22
  3209  0042                     	ds	1
  3210  0043                     ??_sprintf:	
  3211                           
  3212                           ; 1 bytes @ 0x23
  3213  0043                     	ds	1
  3214  0044                     ??___ftsub:	
  3215  0044                     getADCValue@channel:	
  3216                           ; 1 bytes @ 0x24
  3217                           
  3218                           
  3219                           ; 1 bytes @ 0x24
  3220  0044                     	ds	1
  3221  0045                     getADCValue@adcLoop:	
  3222                           
  3223                           ; 1 bytes @ 0x25
  3224  0045                     	ds	1
  3225  0046                     ___fttol@exp1:	
  3226  0046                     getADCValue@adcSum:	
  3227                           ; 1 bytes @ 0x26
  3228                           
  3229                           
  3230                           ; 3 bytes @ 0x26
  3231  0046                     	ds	3
  3232  0049                     sprintf@flag:	
  3233                           
  3234                           ; 1 bytes @ 0x29
  3235  0049                     	ds	1
  3236  004A                     sprintf@ap:	
  3237                           
  3238                           ; 1 bytes @ 0x2A
  3239  004A                     	ds	1
  3240  004B                     sprintf@val:	
  3241                           
  3242                           ; 4 bytes @ 0x2B
  3243  004B                     	ds	4
  3244  004F                     sprintf@sp:	
  3245                           
  3246                           ; 1 bytes @ 0x2F
  3247  004F                     	ds	1
  3248  0050                     sprintf@width:	
  3249                           
  3250                           ; 2 bytes @ 0x30
  3251  0050                     	ds	2
  3252  0052                     sprintf@prec:	
  3253                           
  3254                           ; 2 bytes @ 0x32
  3255  0052                     	ds	2
  3256  0054                     sprintf@c:	
  3257                           
  3258                           ; 1 bytes @ 0x34
  3259  0054                     	ds	1
  3260  0055                     ?_ftoa:	
  3261  0055                     ftoa@f:	
  3262                           ; 1 bytes @ 0x35
  3263                           
  3264                           
  3265                           ; 3 bytes @ 0x35
  3266  0055                     	ds	3
  3267  0058                     ftoa@status:	
  3268                           
  3269                           ; 1 bytes @ 0x38
  3270  0058                     	ds	1
  3271  0059                     ??_ftoa:	
  3272                           
  3273                           ; 1 bytes @ 0x39
  3274  0059                     	ds	1
  3275  005A                     ftoa@rem:	
  3276                           
  3277                           ; 4 bytes @ 0x3A
  3278  005A                     	ds	4
  3279  005E                     ftoa@l:	
  3280                           
  3281                           ; 4 bytes @ 0x3E
  3282  005E                     	ds	4
  3283  0062                     ftoa@cp:	
  3284                           
  3285                           ; 1 bytes @ 0x42
  3286  0062                     	ds	1
  3287  0063                     ?_strcat:	
  3288  0063                     strcat@from:	
  3289                           ; 1 bytes @ 0x43
  3290                           
  3291                           
  3292                           ; 2 bytes @ 0x43
  3293  0063                     	ds	2
  3294  0065                     ??_strcat:	
  3295                           
  3296                           ; 1 bytes @ 0x45
  3297  0065                     	ds	1
  3298  0066                     strcat@cp:	
  3299                           
  3300                           ; 1 bytes @ 0x46
  3301  0066                     	ds	1
  3302  0067                     strcat@to:	
  3303                           
  3304                           ; 1 bytes @ 0x47
  3305  0067                     	ds	1
  3306  0068                     ?_setMessage:	
  3307  0068                     setMessage@topic:	
  3308                           ; 1 bytes @ 0x48
  3309                           
  3310                           
  3311                           ; 2 bytes @ 0x48
  3312  0068                     	ds	2
  3313  006A                     setMessage@value:	
  3314                           
  3315                           ; 3 bytes @ 0x4A
  3316  006A                     	ds	3
  3317  006D                     ??_setMessage:	
  3318                           
  3319                           ; 1 bytes @ 0x4D
  3320  006D                     	ds	1
  3321  006E                     ??_loop:	
  3322                           
  3323                           	psect	maintext
  3324  0F69                     __pmaintext:	
  3325                           ; 1 bytes @ 0x4E
  3326 ;;
  3327 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3328 ;;
  3329 ;; *************** function _main *****************
  3330 ;; Defined at:
  3331 ;;		line 177 in file "main.c"
  3332 ;; Parameters:    Size  Location     Type
  3333 ;;		None
  3334 ;; Auto vars:     Size  Location     Type
  3335 ;;  packet         33   44[BANK1 ] struct .
  3336 ;;  pipe            1   43[BANK1 ] unsigned char 
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  1    wreg      void 
  3339 ;; Registers used:
  3340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3341 ;; Tracked objects:
  3342 ;;		On entry : B1F/0
  3343 ;;		On exit  : 0/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3347 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3348 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3349 ;;      Totals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  3350 ;;Total ram usage:       35 bytes
  3351 ;; Hardware stack levels required when called:   13
  3352 ;; This function calls:
  3353 ;;		___lwtoft
  3354 ;;		_flashRealod
  3355 ;;		_loop
  3356 ;;		_nrf24l01GetPipe
  3357 ;;		_nrf24l01Init
  3358 ;;		_nrf24l01SendPacket
  3359 ;;		_nrf24l01SetRXPipe
  3360 ;;		_nrf24l01SetTXPipe
  3361 ;;		_setMessage
  3362 ;;		_sleep
  3363 ;;		_strcpy
  3364 ;; This function is called by:
  3365 ;;		Startup code after reset
  3366 ;; This function uses a non-reentrant model
  3367 ;;
  3368                           
  3369                           
  3370                           ;psect for function _main
  3371  0F69                     _main:	
  3372                           
  3373                           ;main.c: 180: ANSELA = 0x00;
  3374                           
  3375                           ;incstack = 0
  3376                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3377  0F69  0023               	movlb	3	; select bank3
  3378  0F6A  018C               	clrf	12	;volatile
  3379                           
  3380                           ;main.c: 181: ANSELC = 0x00;
  3381  0F6B  018E               	clrf	14	;volatile
  3382                           
  3383                           ;main.c: 183: ODCONA = 0x00;
  3384  0F6C  0025               	movlb	5	; select bank5
  3385  0F6D  018C               	clrf	12	;volatile
  3386                           
  3387                           ;main.c: 184: ODCONC = 0x00;
  3388  0F6E  018E               	clrf	14	;volatile
  3389                           
  3390                           ;main.c: 189: INLVLA = 0x00;
  3391  0F6F  0027               	movlb	7	; select bank7
  3392  0F70  018C               	clrf	12	;volatile
  3393                           
  3394                           ;main.c: 190: INLVLC = 0x00;
  3395  0F71  018E               	clrf	14	;volatile
  3396                           
  3397                           ;main.c: 192: WPUA = 0x00;
  3398  0F72  0024               	movlb	4	; select bank4
  3399  0F73  018C               	clrf	12	;volatile
  3400                           
  3401                           ;main.c: 193: WPUC = 0x00;
  3402  0F74  018E               	clrf	14	;volatile
  3403                           
  3404                           ;main.c: 195: TRISCbits.TRISC5 = 0;
  3405  0F75  0021               	movlb	1	; select bank1
  3406  0F76  128E               	bcf	14,5	;volatile
  3407                           
  3408                           ;main.c: 196: TRISCbits.TRISC4 = 0;
  3409  0F77  120E               	bcf	14,4	;volatile
  3410                           
  3411                           ;main.c: 198: PORTCbits.RC4 = 0;
  3412  0F78  0020               	movlb	0	; select bank0
  3413  0F79  120E               	bcf	14,4	;volatile
  3414                           
  3415                           ;main.c: 205: INTCONbits.PEIE = 0;
  3416  0F7A  130B               	bcf	11,6	;volatile
  3417                           
  3418                           ;main.c: 206: INTCONbits.GIE = 0;
  3419  0F7B  138B               	bcf	11,7	;volatile
  3420                           
  3421                           ;main.c: 208: OSCCON1bits.NOSC = 0b000;
  3422  0F7C  308F               	movlw	-113
  3423  0F7D  0032               	movlb	18	; select bank18
  3424  0F7E  0599               	andwf	25,f	;volatile
  3425                           
  3426                           ;main.c: 209: OSCCON1bits.NDIV = 0b000;
  3427  0F7F  30F0               	movlw	-16
  3428  0F80  0599               	andwf	25,f	;volatile
  3429                           
  3430                           ;main.c: 211: _delay((unsigned long)((10)*(16000000/4000.0)));
  3431  0F81  3034               	movlw	52
  3432  0F82  0021               	movlb	1	; select bank1
  3433  0F83  00CA               	movwf	??_main^(0+128)
  3434  0F84  30F1               	movlw	241
  3435  0F85                     u3707:	
  3436  0F85  0B89               	decfsz	9,f
  3437  0F86  2F85               	goto	u3707
  3438  0F87  0BCA               	decfsz	??_main^(0+128),f
  3439  0F88  2F85               	goto	u3707
  3440  0F89  3200               	nop2
  3441                           
  3442                           ;main.c: 223: strcpy(romData.name, "UW0");
  3443  0F8A  3060               	movlw	low (STR_6| (0+32768))
  3444  0F8B  0020               	movlb	0	; select bank0
  3445  0F8C  00A1               	movwf	strcpy@from
  3446  0F8D  3090               	movlw	high (STR_6| (0+32768))
  3447  0F8E  00A2               	movwf	strcpy@from+1
  3448  0F8F  3046               	movlw	(low ((_romData| (0+256)+1)))& (0+255)
  3449  0F90  3189  2166  318F   	fcall	_strcpy
  3450                           
  3451                           ;main.c: 225: flashRealod();
  3452  0F93  3189  21BF  318F   	fcall	_flashRealod
  3453                           
  3454                           ;main.c: 227: nrf24l01Init();
  3455  0F96  318A  22AE  318F   	fcall	_nrf24l01Init
  3456                           
  3457                           ;main.c: 229: unsigned char pipe = nrf24l01GetPipe(romData.name);
  3458  0F99  3046               	movlw	(low ((_romData| (0+256)+1)))& (0+255)
  3459  0F9A  318B  23C4  318F   	fcall	_nrf24l01GetPipe
  3460  0F9D  0021               	movlb	1	; select bank1
  3461  0F9E  00CA               	movwf	??_main^(0+128)
  3462  0F9F  084A               	movf	??_main^(0+128),w
  3463  0FA0  00CB               	movwf	main@pipe^(0+128)
  3464                           
  3465                           ;main.c: 230: nrf24l01SetTXPipe(pipe);
  3466  0FA1  084B               	movf	main@pipe^(0+128),w
  3467  0FA2  318C  24F5  318F   	fcall	_nrf24l01SetTXPipe
  3468                           
  3469                           ;main.c: 231: nrf24l01SetRXPipe(pipe);
  3470  0FA5  0021               	movlb	1	; select bank1
  3471  0FA6  084B               	movf	main@pipe^(0+128),w
  3472  0FA7  318A  2241  318F   	fcall	_nrf24l01SetRXPipe
  3473                           
  3474                           ;main.c: 235: ADCON0bits.ADON = 0;
  3475  0FAA  0021               	movlb	1	; select bank1
  3476  0FAB  101D               	bcf	29,0	;volatile
  3477                           
  3478                           ;main.c: 238: ANSELAbits.ANSA4 = 1;
  3479  0FAC  0023               	movlb	3	; select bank3
  3480  0FAD  160C               	bsf	12,4	;volatile
  3481                           
  3482                           ;main.c: 239: TRISAbits.TRISA4 = 1;
  3483  0FAE  0021               	movlb	1	; select bank1
  3484  0FAF  160C               	bsf	12,4	;volatile
  3485                           
  3486                           ;main.c: 240: WPUAbits.WPUA4 = 0;
  3487  0FB0  0024               	movlb	4	; select bank4
  3488  0FB1  120C               	bcf	12,4	;volatile
  3489                           
  3490                           ;main.c: 243: ANSELCbits.ANSC3 = 1;
  3491  0FB2  0023               	movlb	3	; select bank3
  3492  0FB3  158E               	bsf	14,3	;volatile
  3493                           
  3494                           ;main.c: 244: TRISCbits.TRISC3 = 1;
  3495  0FB4  0021               	movlb	1	; select bank1
  3496  0FB5  158E               	bsf	14,3	;volatile
  3497                           
  3498                           ;main.c: 247: FVRCONbits.TSEN = 0;
  3499  0FB6  0022               	movlb	2	; select bank2
  3500  0FB7  1297               	bcf	23,5	;volatile
  3501                           
  3502                           ;main.c: 248: FVRCONbits.TSRNG = 1;
  3503  0FB8  1617               	bsf	23,4	;volatile
  3504                           
  3505                           ;main.c: 249: FVRCONbits.TSEN = 1;
  3506  0FB9  1697               	bsf	23,5	;volatile
  3507                           
  3508                           ;main.c: 252: FVRCONbits.FVREN = 0;
  3509  0FBA  1397               	bcf	23,7	;volatile
  3510                           
  3511                           ;main.c: 253: FVRCONbits.ADFVR = 1;
  3512  0FBB  0817               	movf	23,w	;volatile
  3513  0FBC  39FC               	andlw	-4
  3514  0FBD  3801               	iorlw	1
  3515  0FBE  0097               	movwf	23	;volatile
  3516                           
  3517                           ;main.c: 254: FVRCONbits.FVREN = 1;
  3518  0FBF  1797               	bsf	23,7	;volatile
  3519                           
  3520                           ;main.c: 256: ADCON1bits.ADCS = 0b111;
  3521  0FC0  3070               	movlw	112
  3522  0FC1  0021               	movlb	1	; select bank1
  3523  0FC2  049E               	iorwf	30,f	;volatile
  3524                           
  3525                           ;main.c: 257: ADCON1bits.ADFM = 1;
  3526  0FC3  179E               	bsf	30,7	;volatile
  3527                           
  3528                           ;main.c: 258: ADCON1bits.ADNREF = 0b0;
  3529  0FC4  111E               	bcf	30,2	;volatile
  3530                           
  3531                           ;main.c: 259: ADCON1bits.ADPREF = 0b00;
  3532  0FC5  30FC               	movlw	-4
  3533  0FC6  059E               	andwf	30,f	;volatile
  3534                           
  3535                           ;main.c: 261: ADCON0bits.CHS = 3;
  3536  0FC7  081D               	movf	29,w	;volatile
  3537  0FC8  3903               	andlw	-253
  3538  0FC9  380C               	iorlw	12
  3539  0FCA  009D               	movwf	29	;volatile
  3540                           
  3541                           ;main.c: 262: ADCON0bits.ADON = 1;
  3542  0FCB  141D               	bsf	29,0	;volatile
  3543                           
  3544                           ;main.c: 267: TRISAbits.TRISA2 = 1;
  3545  0FCC  150C               	bsf	12,2	;volatile
  3546                           
  3547                           ;main.c: 268: PIE0bits.INTE = 1;
  3548  0FCD  1410               	bsf	16,0	;volatile
  3549                           
  3550                           ;main.c: 269: INTCONbits.INTEDG = 0;
  3551  0FCE  100B               	bcf	11,0	;volatile
  3552                           
  3553                           ;main.c: 273: WDTCONbits.WDTPS = 11;
  3554  0FCF  0817               	movf	23,w	;volatile
  3555  0FD0  39C1               	andlw	-63
  3556  0FD1  3816               	iorlw	22
  3557  0FD2  0097               	movwf	23	;volatile
  3558                           
  3559                           ;main.c: 276: TRISAbits.TRISA5 = 0;
  3560  0FD3  128C               	bcf	12,5	;volatile
  3561                           
  3562                           ;main.c: 277: PORTAbits.RA5 = 0;
  3563  0FD4  0020               	movlb	0	; select bank0
  3564  0FD5  128C               	bcf	12,5	;volatile
  3565                           
  3566                           ;main.c: 280: INTCONbits.PEIE = 1;
  3567  0FD6  170B               	bsf	11,6	;volatile
  3568                           
  3569                           ;main.c: 281: INTCONbits.GIE = 1;
  3570  0FD7  178B               	bsf	11,7	;volatile
  3571                           
  3572                           ;main.c: 283: nrf24l01Packet_t packet;;main.c: 285: setMessage(&packet, "BOOT", romData.
      +                          bootMode);
  3573  0FD8  305B               	movlw	low (STR_7| (0+32768))
  3574  0FD9  00E8               	movwf	setMessage@topic
  3575  0FDA  3090               	movlw	high (STR_7| (0+32768))
  3576  0FDB  00E9               	movwf	setMessage@topic+1
  3577  0FDC  0022               	movlb	2	; select bank2
  3578  0FDD  0857               	movf	((_romData+1)^(0+256)+17),w
  3579  0FDE  0020               	movlb	0	; select bank0
  3580  0FDF  00AA               	movwf	___lwtoft@c+1
  3581  0FE0  0022               	movlb	2	; select bank2
  3582  0FE1  0856               	movf	(_romData^(0+256)+17),w
  3583  0FE2  0020               	movlb	0	; select bank0
  3584  0FE3  00A9               	movwf	___lwtoft@c
  3585  0FE4  3188  207F  318F   	fcall	___lwtoft
  3586  0FE7  0020               	movlb	0	; select bank0
  3587  0FE8  0829               	movf	?___lwtoft,w
  3588  0FE9  00EA               	movwf	setMessage@value
  3589  0FEA  082A               	movf	?___lwtoft+1,w
  3590  0FEB  00EB               	movwf	setMessage@value+1
  3591  0FEC  082B               	movf	?___lwtoft+2,w
  3592  0FED  00EC               	movwf	setMessage@value+2
  3593  0FEE  30CC               	movlw	(low (main@packet| 0))& (0+255)
  3594  0FEF  318E  2627  318F   	fcall	_setMessage
  3595                           
  3596                           ;main.c: 286: packet.packetData.byte = 0;
  3597  0FF2  0021               	movlb	1	; select bank1
  3598  0FF3  01CC               	clrf	main@packet^(0+128)
  3599                           
  3600                           ;main.c: 287: packet.packetData.ACKRequest = 0;
  3601  0FF4  114C               	bcf	main@packet^(0+128),2
  3602                           
  3603                           ;main.c: 288: nrf24l01SendPacket(&packet);
  3604  0FF5  30CC               	movlw	(low (main@packet| 0))& (0+255)
  3605  0FF6  3183  23F2  318F   	fcall	_nrf24l01SendPacket
  3606                           
  3607                           ;main.c: 289: sleep();
  3608  0FF9  3188  2047  318F   	fcall	_sleep
  3609  0FFC                     l3967:	
  3610                           ;main.c: 291: while(1){
  3611                           
  3612                           
  3613                           ;main.c: 292: loop();
  3614  0FFC  3185  2560  318F   	fcall	_loop
  3615  0FFF  2FFC               	goto	l3967
  3616  1000                     __end_of_main:	
  3617                           ;main.c: 293: };main.c: 295: return;
  3618                           
  3619                           
  3620                           	psect	text1
  3621  0966                     __ptext1:	
  3622 ;; *************** function _strcpy *****************
  3623 ;; Defined at:
  3624 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  3625 ;; Parameters:    Size  Location     Type
  3626 ;;  to              1    wreg     PTR unsigned char 
  3627 ;;		 -> romData(19), 
  3628 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  3629 ;;		 -> STR_6(4), 
  3630 ;; Auto vars:     Size  Location     Type
  3631 ;;  to              1    4[BANK0 ] PTR unsigned char 
  3632 ;;		 -> romData(19), 
  3633 ;;  cp              1    5[BANK0 ] PTR unsigned char 
  3634 ;;		 -> romData(19), 
  3635 ;; Return value:  Size  Location     Type
  3636 ;;                  1    wreg      PTR unsigned char 
  3637 ;; Registers used:
  3638 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3639 ;; Tracked objects:
  3640 ;;		On entry : 0/0
  3641 ;;		On exit  : 0/0
  3642 ;;		Unchanged: 0/0
  3643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3644 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3645 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3646 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3647 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3648 ;;Total ram usage:        5 bytes
  3649 ;; Hardware stack levels used:    1
  3650 ;; Hardware stack levels required when called:    7
  3651 ;; This function calls:
  3652 ;;		Nothing
  3653 ;; This function is called by:
  3654 ;;		_main
  3655 ;; This function uses a non-reentrant model
  3656 ;;
  3657                           
  3658                           
  3659                           ;psect for function _strcpy
  3660  0966                     _strcpy:	
  3661                           
  3662                           ;incstack = 0
  3663                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3664                           ;strcpy@to stored from wreg
  3665  0966  0020               	movlb	0	; select bank0
  3666  0967  00A4               	movwf	strcpy@to
  3667  0968  0824               	movf	strcpy@to,w
  3668  0969  00A3               	movwf	??_strcpy
  3669  096A  0823               	movf	??_strcpy,w
  3670  096B  00A5               	movwf	strcpy@cp
  3671  096C                     l3535:	
  3672  096C  0825               	movf	strcpy@cp,w
  3673  096D  0086               	movwf	6
  3674  096E  3001               	movlw	1	; select bank2/3
  3675  096F  0087               	movwf	7
  3676  0970  0821               	movf	strcpy@from,w
  3677  0971  0084               	movwf	4
  3678  0972  0822               	movf	strcpy@from+1,w
  3679  0973  0085               	movwf	5
  3680  0974  0800               	movf	0,w	;code access
  3681  0975  3FC0               	movwi [0]fsr1
  3682  0976  0889               	movf	9,f
  3683  0977  1903               	btfsc	3,2
  3684  0978  0008               	return
  3685  0979  3001               	movlw	1
  3686  097A  00A3               	movwf	??_strcpy
  3687  097B  0823               	movf	??_strcpy,w
  3688  097C  07A5               	addwf	strcpy@cp,f
  3689  097D  3001               	movlw	1
  3690  097E  07A1               	addwf	strcpy@from,f
  3691  097F  3000               	movlw	0
  3692  0980  3DA2               	addwfc	strcpy@from+1,f
  3693  0981  296C               	goto	l3535
  3694  0982                     __end_of_strcpy:	
  3695                           ;	Return value of _strcpy is never used
  3696                           
  3697                           
  3698                           	psect	text2
  3699  0AAE                     __ptext2:	
  3700 ;; *************** function _nrf24l01Init *****************
  3701 ;; Defined at:
  3702 ;;		line 444 in file "nrf24l01.c"
  3703 ;; Parameters:    Size  Location     Type
  3704 ;;		None
  3705 ;; Auto vars:     Size  Location     Type
  3706 ;;		None
  3707 ;; Return value:  Size  Location     Type
  3708 ;;                  1    wreg      void 
  3709 ;; Registers used:
  3710 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3711 ;; Tracked objects:
  3712 ;;		On entry : 0/0
  3713 ;;		On exit  : 0/0
  3714 ;;		Unchanged: 0/0
  3715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3718 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3719 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3720 ;;Total ram usage:        2 bytes
  3721 ;; Hardware stack levels used:    1
  3722 ;; Hardware stack levels required when called:   12
  3723 ;; This function calls:
  3724 ;;		_nrf24l01CEHigh
  3725 ;;		_nrf24l01CELow
  3726 ;;		_nrf24l01InitRegisters
  3727 ;;		_nrf24l01InterfaceInit
  3728 ;; This function is called by:
  3729 ;;		_main
  3730 ;; This function uses a non-reentrant model
  3731 ;;
  3732                           
  3733                           
  3734                           ;psect for function _nrf24l01Init
  3735  0AAE                     _nrf24l01Init:	
  3736                           
  3737                           ;nrf24l01.c: 447: nrf24l01InterfaceInit();
  3738                           
  3739                           ;incstack = 0
  3740                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3741  0AAE  3189  214A  318A   	fcall	_nrf24l01InterfaceInit
  3742                           
  3743                           ;nrf24l01.c: 452: nrf24l01CELow();
  3744  0AB1  3188  2009  318A   	fcall	_nrf24l01CELow
  3745                           
  3746                           ;nrf24l01.c: 454: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3747  0AB4  3002               	movlw	2
  3748  0AB5  0020               	movlb	0	; select bank0
  3749  0AB6  00B5               	movwf	??_nrf24l01Init+1
  3750  0AB7  3004               	movlw	4
  3751  0AB8  00B4               	movwf	??_nrf24l01Init
  3752  0AB9  30BA               	movlw	186
  3753  0ABA                     u3717:	
  3754  0ABA  0B89               	decfsz	9,f
  3755  0ABB  2ABA               	goto	u3717
  3756  0ABC  0BB4               	decfsz	??_nrf24l01Init,f
  3757  0ABD  2ABA               	goto	u3717
  3758  0ABE  0BB5               	decfsz	??_nrf24l01Init+1,f
  3759  0ABF  2ABA               	goto	u3717
  3760  0AC0  0000               	nop
  3761                           
  3762                           ;nrf24l01.c: 456: nrf24l01InitRegisters();
  3763  0AC1  3181  21F6  318A   	fcall	_nrf24l01InitRegisters
  3764                           
  3765                           ;nrf24l01.c: 458: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3766  0AC4  3002               	movlw	2
  3767  0AC5  0020               	movlb	0	; select bank0
  3768  0AC6  00B5               	movwf	??_nrf24l01Init+1
  3769  0AC7  3004               	movlw	4
  3770  0AC8  00B4               	movwf	??_nrf24l01Init
  3771  0AC9  30BA               	movlw	186
  3772  0ACA                     u3727:	
  3773  0ACA  0B89               	decfsz	9,f
  3774  0ACB  2ACA               	goto	u3727
  3775  0ACC  0BB4               	decfsz	??_nrf24l01Init,f
  3776  0ACD  2ACA               	goto	u3727
  3777  0ACE  0BB5               	decfsz	??_nrf24l01Init+1,f
  3778  0ACF  2ACA               	goto	u3727
  3779  0AD0  0000               	nop
  3780                           
  3781                           ;nrf24l01.c: 460: nrf24l01CEHigh();
  3782  0AD1  3188  2006         	fcall	_nrf24l01CEHigh
  3783  0AD3  0008               	return
  3784  0AD4                     __end_of_nrf24l01Init:	
  3785                           
  3786                           	psect	text3
  3787  094A                     __ptext3:	
  3788 ;; *************** function _nrf24l01InterfaceInit *****************
  3789 ;; Defined at:
  3790 ;;		line 28 in file "interface.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;		None
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;		None
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  1    wreg      void 
  3797 ;; Registers used:
  3798 ;;		wreg, status,2, status,0
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3808 ;;Total ram usage:        0 bytes
  3809 ;; Hardware stack levels used:    1
  3810 ;; Hardware stack levels required when called:    7
  3811 ;; This function calls:
  3812 ;;		Nothing
  3813 ;; This function is called by:
  3814 ;;		_nrf24l01Init
  3815 ;; This function uses a non-reentrant model
  3816 ;;
  3817                           
  3818                           
  3819                           ;psect for function _nrf24l01InterfaceInit
  3820  094A                     _nrf24l01InterfaceInit:	
  3821                           
  3822                           ;interface.c: 30: TRISAbits.TRISA0 = 0;
  3823                           
  3824                           ;incstack = 0
  3825                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3826  094A  0021               	movlb	1	; select bank1
  3827  094B  100C               	bcf	12,0	;volatile
  3828                           
  3829                           ;interface.c: 31: TRISAbits.TRISA1 = 0;
  3830  094C  108C               	bcf	12,1	;volatile
  3831                           
  3832                           ;interface.c: 33: TRISCbits.TRISC1 = 1;
  3833  094D  148E               	bsf	14,1	;volatile
  3834                           
  3835                           ;interface.c: 34: TRISCbits.TRISC2 = 0;
  3836  094E  110E               	bcf	14,2	;volatile
  3837                           
  3838                           ;interface.c: 35: TRISCbits.TRISC0 = 0;
  3839  094F  100E               	bcf	14,0	;volatile
  3840                           
  3841                           ;interface.c: 37: SSP1CON1bits.SSPEN = 0;
  3842  0950  0024               	movlb	4	; select bank4
  3843  0951  1295               	bcf	21,5	;volatile
  3844                           
  3845                           ;interface.c: 39: RC1PPSbits.RC1PPS = 0b10001;
  3846  0952  003D               	movlb	29	; select bank29
  3847  0953  0821               	movf	33,w	;volatile
  3848  0954  39E0               	andlw	-32
  3849  0955  3811               	iorlw	17
  3850  0956  00A1               	movwf	33	;volatile
  3851                           
  3852                           ;interface.c: 40: RC2PPSbits.RC2PPS = 0b11001;
  3853  0957  0822               	movf	34,w	;volatile
  3854  0958  39E0               	andlw	-32
  3855  0959  3819               	iorlw	25
  3856  095A  00A2               	movwf	34	;volatile
  3857                           
  3858                           ;interface.c: 41: RC0PPSbits.RC0PPS = 0b11000;
  3859  095B  0820               	movf	32,w	;volatile
  3860  095C  39E0               	andlw	-32
  3861  095D  3818               	iorlw	24
  3862  095E  00A0               	movwf	32	;volatile
  3863                           
  3864                           ;interface.c: 43: SSP1CON1bits.CKP = 0;
  3865  095F  0024               	movlb	4	; select bank4
  3866  0960  1215               	bcf	21,4	;volatile
  3867                           
  3868                           ;interface.c: 44: SSP1STATbits.CKE = 1;
  3869  0961  1714               	bsf	20,6	;volatile
  3870                           
  3871                           ;interface.c: 45: SSP1CON1bits.SSPM = 0b0000;
  3872  0962  30F0               	movlw	-16
  3873  0963  0595               	andwf	21,f	;volatile
  3874                           
  3875                           ;interface.c: 47: SSP1CON1bits.SSPEN = 1;
  3876  0964  1695               	bsf	21,5	;volatile
  3877  0965  0008               	return
  3878  0966                     __end_of_nrf24l01InterfaceInit:	
  3879                           
  3880                           	psect	text4
  3881  01F6                     __ptext4:	
  3882 ;; *************** function _nrf24l01InitRegisters *****************
  3883 ;; Defined at:
  3884 ;;		line 343 in file "nrf24l01.c"
  3885 ;; Parameters:    Size  Location     Type
  3886 ;;		None
  3887 ;; Auto vars:     Size  Location     Type
  3888 ;;  i               2   18[BANK0 ] unsigned int 
  3889 ;;  config          1   17[BANK0 ] struct .
  3890 ;;  DynPD           1   16[BANK0 ] struct .
  3891 ;;  enAA            1   15[BANK0 ] struct .
  3892 ;;  status          1   14[BANK0 ] struct .
  3893 ;;  rfSetup         1   13[BANK0 ] struct .
  3894 ;;  feature         1   12[BANK0 ] struct .
  3895 ;;  setupAW         1   11[BANK0 ] struct .
  3896 ;;  channel         1   10[BANK0 ] struct .
  3897 ;; Return value:  Size  Location     Type
  3898 ;;                  1    wreg      void 
  3899 ;; Registers used:
  3900 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3901 ;; Tracked objects:
  3902 ;;		On entry : 0/0
  3903 ;;		On exit  : 0/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3907 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3908 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3909 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3910 ;;Total ram usage:       12 bytes
  3911 ;; Hardware stack levels used:    1
  3912 ;; Hardware stack levels required when called:   11
  3913 ;; This function calls:
  3914 ;;		___bmul
  3915 ;;		_nrf24l01SPIEnd
  3916 ;;		_nrf24l01SPISend
  3917 ;;		_nrf24l01SPIStart
  3918 ;;		_nrf24l01Send
  3919 ;;		_nrf24l01SetRXPipe
  3920 ;;		_nrf24l01SetTXPipe
  3921 ;; This function is called by:
  3922 ;;		_nrf24l01Init
  3923 ;; This function uses a non-reentrant model
  3924 ;;
  3925                           
  3926                           
  3927                           ;psect for function _nrf24l01InitRegisters
  3928  01F6                     _nrf24l01InitRegisters:	
  3929                           
  3930                           ;nrf24l01.c: 345: n_CONFIG_t config;;nrf24l01.c: 347: config.PWR_UP = 0;
  3931                           
  3932                           ;incstack = 0
  3933                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3934  01F6  0020               	movlb	0	; select bank0
  3935  01F7  10B1               	bcf	nrf24l01InitRegisters@config,1
  3936                           
  3937                           ;nrf24l01.c: 348: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3938  01F8  0831               	movf	nrf24l01InitRegisters@config,w
  3939  01F9  00A8               	movwf	??_nrf24l01InitRegisters
  3940  01FA  0828               	movf	??_nrf24l01InitRegisters,w
  3941  01FB  00A1               	movwf	nrf24l01Send@data
  3942  01FC  3020               	movlw	32
  3943  01FD  3189  21DF  3181   	fcall	_nrf24l01Send
  3944                           
  3945                           ;nrf24l01.c: 350: n_SETUP_AW_t setupAW;;nrf24l01.c: 351: setupAW.byte = 0x00;
  3946  0200  0020               	movlb	0	; select bank0
  3947  0201  01AB               	clrf	nrf24l01InitRegisters@setupAW
  3948                           
  3949                           ;nrf24l01.c: 352: setupAW.AW = 0b11;
  3950  0202  3003               	movlw	3
  3951  0203  04AB               	iorwf	nrf24l01InitRegisters@setupAW,f
  3952                           
  3953                           ;nrf24l01.c: 353: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x02, setupAW.byte);
  3954  0204  082B               	movf	nrf24l01InitRegisters@setupAW,w
  3955  0205  00A8               	movwf	??_nrf24l01InitRegisters
  3956  0206  0828               	movf	??_nrf24l01InitRegisters,w
  3957  0207  00A1               	movwf	nrf24l01Send@data
  3958  0208  3022               	movlw	34
  3959  0209  3189  21DF  3181   	fcall	_nrf24l01Send
  3960                           
  3961                           ;nrf24l01.c: 356: n_RF_CH_t channel;;nrf24l01.c: 357: channel.RF_CH = 2;
  3962  020C  0020               	movlb	0	; select bank0
  3963  020D  082A               	movf	nrf24l01InitRegisters@channel,w
  3964  020E  3980               	andlw	-128
  3965  020F  3802               	iorlw	2
  3966  0210  00AA               	movwf	nrf24l01InitRegisters@channel
  3967                           
  3968                           ;nrf24l01.c: 358: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3969  0211  082A               	movf	nrf24l01InitRegisters@channel,w
  3970  0212  00A8               	movwf	??_nrf24l01InitRegisters
  3971  0213  0828               	movf	??_nrf24l01InitRegisters,w
  3972  0214  00A1               	movwf	nrf24l01Send@data
  3973  0215  3025               	movlw	37
  3974  0216  3189  21DF  3181   	fcall	_nrf24l01Send
  3975                           
  3976                           ;nrf24l01.c: 361: n_RF_SETUP_t rfSetup;;nrf24l01.c: 362: rfSetup.byte = 0x00;
  3977  0219  0020               	movlb	0	; select bank0
  3978  021A  01AD               	clrf	nrf24l01InitRegisters@rfSetup
  3979                           
  3980                           ;nrf24l01.c: 363: rfSetup.RF_DR_LOW = 0;
  3981  021B  12AD               	bcf	nrf24l01InitRegisters@rfSetup,5
  3982                           
  3983                           ;nrf24l01.c: 364: rfSetup.RF_DR_HIGH = 1;
  3984  021C  15AD               	bsf	nrf24l01InitRegisters@rfSetup,3
  3985                           
  3986                           ;nrf24l01.c: 365: rfSetup.RF_PWR = 3;
  3987  021D  3006               	movlw	6
  3988  021E  04AD               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3989                           
  3990                           ;nrf24l01.c: 366: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3991  021F  082D               	movf	nrf24l01InitRegisters@rfSetup,w
  3992  0220  00A8               	movwf	??_nrf24l01InitRegisters
  3993  0221  0828               	movf	??_nrf24l01InitRegisters,w
  3994  0222  00A1               	movwf	nrf24l01Send@data
  3995  0223  3026               	movlw	38
  3996  0224  3189  21DF  3181   	fcall	_nrf24l01Send
  3997                           
  3998                           ;nrf24l01.c: 369: nrf24l01SetRXPipe(0xFF);
  3999  0227  30FF               	movlw	255
  4000  0228  318A  2241  3181   	fcall	_nrf24l01SetRXPipe
  4001                           
  4002                           ;nrf24l01.c: 372: n_EN_AA_t enAA;;nrf24l01.c: 373: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  4003  022B  0020               	movlb	0	; select bank0
  4004  022C  01A1               	clrf	nrf24l01Send@data
  4005  022D  3001               	movlw	1
  4006  022E  3189  21DF  3181   	fcall	_nrf24l01Send
  4007  0231  0020               	movlb	0	; select bank0
  4008  0232  00A8               	movwf	??_nrf24l01InitRegisters
  4009  0233  0828               	movf	??_nrf24l01InitRegisters,w
  4010  0234  00AF               	movwf	nrf24l01InitRegisters@enAA
  4011                           
  4012                           ;nrf24l01.c: 374: enAA.ENAA_P0 = 0;
  4013  0235  102F               	bcf	nrf24l01InitRegisters@enAA,0
  4014                           
  4015                           ;nrf24l01.c: 375: enAA.ENAA_P1 = 0;
  4016  0236  10AF               	bcf	nrf24l01InitRegisters@enAA,1
  4017                           
  4018                           ;nrf24l01.c: 376: enAA.ENAA_P2 = 0;
  4019  0237  112F               	bcf	nrf24l01InitRegisters@enAA,2
  4020                           
  4021                           ;nrf24l01.c: 377: enAA.ENAA_P3 = 0;
  4022  0238  11AF               	bcf	nrf24l01InitRegisters@enAA,3
  4023                           
  4024                           ;nrf24l01.c: 378: enAA.ENAA_P4 = 0;
  4025  0239  122F               	bcf	nrf24l01InitRegisters@enAA,4
  4026                           
  4027                           ;nrf24l01.c: 379: enAA.ENAA_P5 = 0;
  4028  023A  12AF               	bcf	nrf24l01InitRegisters@enAA,5
  4029                           
  4030                           ;nrf24l01.c: 380: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  4031  023B  082F               	movf	nrf24l01InitRegisters@enAA,w
  4032  023C  00A8               	movwf	??_nrf24l01InitRegisters
  4033  023D  0828               	movf	??_nrf24l01InitRegisters,w
  4034  023E  00A1               	movwf	nrf24l01Send@data
  4035  023F  3021               	movlw	33
  4036  0240  3189  21DF  3181   	fcall	_nrf24l01Send
  4037                           
  4038                           ;nrf24l01.c: 384: n_FEATURE_t feature;;nrf24l01.c: 385: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  4039  0243  0020               	movlb	0	; select bank0
  4040  0244  01A1               	clrf	nrf24l01Send@data
  4041  0245  301D               	movlw	29
  4042  0246  3189  21DF  3181   	fcall	_nrf24l01Send
  4043  0249  0020               	movlb	0	; select bank0
  4044  024A  00A8               	movwf	??_nrf24l01InitRegisters
  4045  024B  0828               	movf	??_nrf24l01InitRegisters,w
  4046  024C  00AC               	movwf	nrf24l01InitRegisters@feature
  4047                           
  4048                           ;nrf24l01.c: 386: feature.EN_DPL = 1;
  4049  024D  152C               	bsf	nrf24l01InitRegisters@feature,2
  4050                           
  4051                           ;nrf24l01.c: 387: feature.EN_DYN_ACK = 1;
  4052  024E  142C               	bsf	nrf24l01InitRegisters@feature,0
  4053                           
  4054                           ;nrf24l01.c: 388: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  4055  024F  082C               	movf	nrf24l01InitRegisters@feature,w
  4056  0250  00A8               	movwf	??_nrf24l01InitRegisters
  4057  0251  0828               	movf	??_nrf24l01InitRegisters,w
  4058  0252  00A1               	movwf	nrf24l01Send@data
  4059  0253  303D               	movlw	61
  4060  0254  3189  21DF  3181   	fcall	_nrf24l01Send
  4061                           
  4062                           ;nrf24l01.c: 390: n_DYNPD_t DynPD;;nrf24l01.c: 391: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  4063  0257  0020               	movlb	0	; select bank0
  4064  0258  01A1               	clrf	nrf24l01Send@data
  4065  0259  301C               	movlw	28
  4066  025A  3189  21DF  3181   	fcall	_nrf24l01Send
  4067  025D  0020               	movlb	0	; select bank0
  4068  025E  00A8               	movwf	??_nrf24l01InitRegisters
  4069  025F  0828               	movf	??_nrf24l01InitRegisters,w
  4070  0260  00B0               	movwf	nrf24l01InitRegisters@DynPD
  4071                           
  4072                           ;nrf24l01.c: 392: DynPD.DPL_P0 = 1;
  4073  0261  1430               	bsf	nrf24l01InitRegisters@DynPD,0
  4074                           
  4075                           ;nrf24l01.c: 393: DynPD.DPL_P1 = 1;
  4076  0262  14B0               	bsf	nrf24l01InitRegisters@DynPD,1
  4077                           
  4078                           ;nrf24l01.c: 394: DynPD.DPL_P2 = 1;
  4079  0263  1530               	bsf	nrf24l01InitRegisters@DynPD,2
  4080                           
  4081                           ;nrf24l01.c: 395: DynPD.DPL_P3 = 1;
  4082  0264  15B0               	bsf	nrf24l01InitRegisters@DynPD,3
  4083                           
  4084                           ;nrf24l01.c: 396: DynPD.DPL_P4 = 1;
  4085  0265  1630               	bsf	nrf24l01InitRegisters@DynPD,4
  4086                           
  4087                           ;nrf24l01.c: 397: DynPD.DPL_P5 = 1;
  4088  0266  16B0               	bsf	nrf24l01InitRegisters@DynPD,5
  4089                           
  4090                           ;nrf24l01.c: 398: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  4091  0267  0830               	movf	nrf24l01InitRegisters@DynPD,w
  4092  0268  00A8               	movwf	??_nrf24l01InitRegisters
  4093  0269  0828               	movf	??_nrf24l01InitRegisters,w
  4094  026A  00A1               	movwf	nrf24l01Send@data
  4095  026B  303C               	movlw	60
  4096  026C  3189  21DF  3181   	fcall	_nrf24l01Send
  4097                           
  4098                           ;nrf24l01.c: 401: unsigned int i;;nrf24l01.c: 402: for (i = 0; i < 6; i++){
  4099  026F  0020               	movlb	0	; select bank0
  4100  0270  01B2               	clrf	nrf24l01InitRegisters@i
  4101  0271  01B3               	clrf	nrf24l01InitRegisters@i+1
  4102  0272  3000               	movlw	0
  4103  0273  0233               	subwf	nrf24l01InitRegisters@i+1,w
  4104  0274  3006               	movlw	6
  4105  0275  1903               	skipnz
  4106  0276  0232               	subwf	nrf24l01InitRegisters@i,w
  4107  0277  1803               	btfsc	3,0
  4108  0278  2AD2               	goto	l3385
  4109  0279                     l3371:	
  4110                           
  4111                           ;nrf24l01.c: 404: nrf24l01SPIStart();
  4112  0279  3188  2027  3181   	fcall	_nrf24l01SPIStart
  4113                           
  4114                           ;nrf24l01.c: 405: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  4115  027C  0020               	movlb	0	; select bank0
  4116  027D  0832               	movf	nrf24l01InitRegisters@i,w
  4117  027E  3E0A               	addlw	10
  4118  027F  3820               	iorlw	32
  4119  0280  3187  27F2  3181   	fcall	_nrf24l01SPISend
  4120                           
  4121                           ;nrf24l01.c: 407: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  4122  0283  3050               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4123  0284  0084               	movwf	4
  4124  0285  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4125  0286  0085               	movwf	5
  4126  0287  0800               	movf	0,w	;code access
  4127  0288  0020               	movlb	0	; select bank0
  4128  0289  00A8               	movwf	??_nrf24l01InitRegisters
  4129  028A  0832               	movf	nrf24l01InitRegisters@i,w
  4130  028B  00A9               	movwf	??_nrf24l01InitRegisters+1
  4131  028C  0829               	movf	??_nrf24l01InitRegisters+1,w
  4132  028D  00A1               	movwf	___bmul@multiplicand
  4133  028E  3066               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4134  028F  0084               	movwf	4
  4135  0290  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4136  0291  0085               	movwf	5
  4137  0292  0800               	movf	0,w	;code access
  4138  0293  3188  2059  3181   	fcall	___bmul
  4139  0296  0020               	movlb	0	; select bank0
  4140  0297  0728               	addwf	??_nrf24l01InitRegisters,w
  4141  0298  3187  27F2  3181   	fcall	_nrf24l01SPISend
  4142                           
  4143                           ;nrf24l01.c: 409: if (i < 2){
  4144  029B  3000               	movlw	0
  4145  029C  0020               	movlb	0	; select bank0
  4146  029D  0233               	subwf	nrf24l01InitRegisters@i+1,w
  4147  029E  3002               	movlw	2
  4148  029F  1903               	skipnz
  4149  02A0  0232               	subwf	nrf24l01InitRegisters@i,w
  4150  02A1  1803               	skipnc
  4151  02A2  2AC3               	goto	l3379
  4152                           
  4153                           ;nrf24l01.c: 410: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4154  02A3  304F               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4155  02A4  0084               	movwf	4
  4156  02A5  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4157  02A6  0085               	movwf	5
  4158  02A7  0800               	movf	0,w	;code access
  4159  02A8  3187  27F2  3181   	fcall	_nrf24l01SPISend
  4160                           
  4161                           ;nrf24l01.c: 411: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4162  02AB  304E               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4163  02AC  0084               	movwf	4
  4164  02AD  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4165  02AE  0085               	movwf	5
  4166  02AF  0800               	movf	0,w	;code access
  4167  02B0  3187  27F2  3181   	fcall	_nrf24l01SPISend
  4168                           
  4169                           ;nrf24l01.c: 412: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4170  02B3  304D               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4171  02B4  0084               	movwf	4
  4172  02B5  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4173  02B6  0085               	movwf	5
  4174  02B7  0800               	movf	0,w	;code access
  4175  02B8  3187  27F2  3181   	fcall	_nrf24l01SPISend
  4176                           
  4177                           ;nrf24l01.c: 413: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4178  02BB  304C               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4179  02BC  0084               	movwf	4
  4180  02BD  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4181  02BE  0085               	movwf	5
  4182  02BF  0800               	movf	0,w	;code access
  4183  02C0  3187  27F2  3181   	fcall	_nrf24l01SPISend
  4184  02C3                     l3379:	
  4185                           
  4186                           ;nrf24l01.c: 414: };nrf24l01.c: 416: nrf24l01SPIEnd();
  4187  02C3  3188  2018  3181   	fcall	_nrf24l01SPIEnd
  4188  02C6  3001               	movlw	1
  4189  02C7  0020               	movlb	0	; select bank0
  4190  02C8  07B2               	addwf	nrf24l01InitRegisters@i,f
  4191  02C9  3000               	movlw	0
  4192  02CA  3DB3               	addwfc	nrf24l01InitRegisters@i+1,f
  4193  02CB  3000               	movlw	0
  4194  02CC  0233               	subwf	nrf24l01InitRegisters@i+1,w
  4195  02CD  3006               	movlw	6
  4196  02CE  1903               	skipnz
  4197  02CF  0232               	subwf	nrf24l01InitRegisters@i,w
  4198  02D0  1C03               	skipc
  4199  02D1  2A79               	goto	l3371
  4200  02D2                     l3385:	
  4201                           
  4202                           ;nrf24l01.c: 417: };nrf24l01.c: 419: nrf24l01SetTXPipe(0);
  4203  02D2  3000               	movlw	0
  4204  02D3  318C  24F5  3181   	fcall	_nrf24l01SetTXPipe
  4205                           
  4206                           ;nrf24l01.c: 423: n_STATUS_t status;;nrf24l01.c: 424: status.byte = 0x00;
  4207  02D6  0020               	movlb	0	; select bank0
  4208  02D7  01AE               	clrf	nrf24l01InitRegisters@status
  4209                           
  4210                           ;nrf24l01.c: 425: status.RX_DR = 1;
  4211  02D8  172E               	bsf	nrf24l01InitRegisters@status,6
  4212                           
  4213                           ;nrf24l01.c: 426: status.TX_DS = 1;
  4214  02D9  16AE               	bsf	nrf24l01InitRegisters@status,5
  4215                           
  4216                           ;nrf24l01.c: 427: status.MAX_RT = 1;
  4217  02DA  162E               	bsf	nrf24l01InitRegisters@status,4
  4218                           
  4219                           ;nrf24l01.c: 428: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.byte);
  4220  02DB  082E               	movf	nrf24l01InitRegisters@status,w
  4221  02DC  00A8               	movwf	??_nrf24l01InitRegisters
  4222  02DD  0828               	movf	??_nrf24l01InitRegisters,w
  4223  02DE  00A1               	movwf	nrf24l01Send@data
  4224  02DF  3027               	movlw	39
  4225  02E0  3189  21DF  3181   	fcall	_nrf24l01Send
  4226                           
  4227                           ;nrf24l01.c: 431: nrf24l01Send((unsigned) 0b11100001, 0);
  4228  02E3  0020               	movlb	0	; select bank0
  4229  02E4  01A1               	clrf	nrf24l01Send@data
  4230  02E5  30E1               	movlw	225
  4231  02E6  3189  21DF  3181   	fcall	_nrf24l01Send
  4232                           
  4233                           ;nrf24l01.c: 432: nrf24l01Send((unsigned) 0b11100010, 0);
  4234  02E9  0020               	movlb	0	; select bank0
  4235  02EA  01A1               	clrf	nrf24l01Send@data
  4236  02EB  30E2               	movlw	226
  4237  02EC  3189  21DF  3181   	fcall	_nrf24l01Send
  4238                           
  4239                           ;nrf24l01.c: 435: config.PRIM_RX = 1;
  4240  02EF  0020               	movlb	0	; select bank0
  4241  02F0  1431               	bsf	nrf24l01InitRegisters@config,0
  4242                           
  4243                           ;nrf24l01.c: 436: config.EN_CRC = 1;
  4244  02F1  15B1               	bsf	nrf24l01InitRegisters@config,3
  4245                           
  4246                           ;nrf24l01.c: 437: config.CRCO = 1;
  4247  02F2  1531               	bsf	nrf24l01InitRegisters@config,2
  4248                           
  4249                           ;nrf24l01.c: 438: config.PWR_UP = 1;
  4250  02F3  14B1               	bsf	nrf24l01InitRegisters@config,1
  4251                           
  4252                           ;nrf24l01.c: 439: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  4253  02F4  0831               	movf	nrf24l01InitRegisters@config,w
  4254  02F5  00A8               	movwf	??_nrf24l01InitRegisters
  4255  02F6  0828               	movf	??_nrf24l01InitRegisters,w
  4256  02F7  00A1               	movwf	nrf24l01Send@data
  4257  02F8  3020               	movlw	32
  4258  02F9  3189  21DF         	fcall	_nrf24l01Send
  4259  02FB  0008               	return
  4260  02FC                     __end_of_nrf24l01InitRegisters:	
  4261                           
  4262                           	psect	text5
  4263  0CF5                     __ptext5:	
  4264 ;; *************** function _nrf24l01SetTXPipe *****************
  4265 ;; Defined at:
  4266 ;;		line 309 in file "nrf24l01.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;  pipe            1    wreg     unsigned char 
  4269 ;; Auto vars:     Size  Location     Type
  4270 ;;  pipe            1    7[BANK0 ] unsigned char 
  4271 ;; Return value:  Size  Location     Type
  4272 ;;                  1    wreg      void 
  4273 ;; Registers used:
  4274 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4275 ;; Tracked objects:
  4276 ;;		On entry : 0/0
  4277 ;;		On exit  : 0/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4281 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4282 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4283 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4284 ;;Total ram usage:        3 bytes
  4285 ;; Hardware stack levels used:    1
  4286 ;; Hardware stack levels required when called:    9
  4287 ;; This function calls:
  4288 ;;		___bmul
  4289 ;;		_nrf24l01SPIEnd
  4290 ;;		_nrf24l01SPISend
  4291 ;;		_nrf24l01SPIStart
  4292 ;; This function is called by:
  4293 ;;		_main
  4294 ;;		_nrf24l01InitRegisters
  4295 ;;		_nrf24l01SendACK
  4296 ;; This function uses a non-reentrant model
  4297 ;;
  4298                           
  4299                           
  4300                           ;psect for function _nrf24l01SetTXPipe
  4301  0CF5                     _nrf24l01SetTXPipe:	
  4302                           
  4303                           ;incstack = 0
  4304                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4305                           ;nrf24l01SetTXPipe@pipe stored from wreg
  4306  0CF5  0020               	movlb	0	; select bank0
  4307  0CF6  00A7               	movwf	nrf24l01SetTXPipe@pipe
  4308                           
  4309                           ;nrf24l01.c: 312: nrf24l01SPIStart();
  4310  0CF7  3188  2027  318C   	fcall	_nrf24l01SPIStart
  4311                           
  4312                           ;nrf24l01.c: 313: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  4313  0CFA  3030               	movlw	48
  4314  0CFB  3187  27F2  318C   	fcall	_nrf24l01SPISend
  4315                           
  4316                           ;nrf24l01.c: 314: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  4317  0CFE  3050               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4318  0CFF  0084               	movwf	4
  4319  0D00  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4320  0D01  0085               	movwf	5
  4321  0D02  0800               	movf	0,w	;code access
  4322  0D03  0020               	movlb	0	; select bank0
  4323  0D04  00A5               	movwf	??_nrf24l01SetTXPipe
  4324  0D05  3066               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4325  0D06  0084               	movwf	4
  4326  0D07  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4327  0D08  0085               	movwf	5
  4328  0D09  0800               	movf	0,w	;code access
  4329  0D0A  00A6               	movwf	??_nrf24l01SetTXPipe+1
  4330  0D0B  0826               	movf	??_nrf24l01SetTXPipe+1,w
  4331  0D0C  00A1               	movwf	___bmul@multiplicand
  4332  0D0D  0827               	movf	nrf24l01SetTXPipe@pipe,w
  4333  0D0E  3188  2059  318C   	fcall	___bmul
  4334  0D11  0020               	movlb	0	; select bank0
  4335  0D12  0725               	addwf	??_nrf24l01SetTXPipe,w
  4336  0D13  3187  27F2  318C   	fcall	_nrf24l01SPISend
  4337                           
  4338                           ;nrf24l01.c: 315: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4339  0D16  304F               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4340  0D17  0084               	movwf	4
  4341  0D18  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4342  0D19  0085               	movwf	5
  4343  0D1A  0800               	movf	0,w	;code access
  4344  0D1B  3187  27F2  318C   	fcall	_nrf24l01SPISend
  4345                           
  4346                           ;nrf24l01.c: 316: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4347  0D1E  304E               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4348  0D1F  0084               	movwf	4
  4349  0D20  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4350  0D21  0085               	movwf	5
  4351  0D22  0800               	movf	0,w	;code access
  4352  0D23  3187  27F2  318C   	fcall	_nrf24l01SPISend
  4353                           
  4354                           ;nrf24l01.c: 317: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4355  0D26  304D               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4356  0D27  0084               	movwf	4
  4357  0D28  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4358  0D29  0085               	movwf	5
  4359  0D2A  0800               	movf	0,w	;code access
  4360  0D2B  3187  27F2  318C   	fcall	_nrf24l01SPISend
  4361                           
  4362                           ;nrf24l01.c: 318: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4363  0D2E  304C               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4364  0D2F  0084               	movwf	4
  4365  0D30  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4366  0D31  0085               	movwf	5
  4367  0D32  0800               	movf	0,w	;code access
  4368  0D33  3187  27F2  318C   	fcall	_nrf24l01SPISend
  4369                           
  4370                           ;nrf24l01.c: 319: nrf24l01SPIEnd();
  4371  0D36  3188  2018         	fcall	_nrf24l01SPIEnd
  4372  0D38  0008               	return
  4373  0D39                     __end_of_nrf24l01SetTXPipe:	
  4374                           
  4375                           	psect	text6
  4376  0859                     __ptext6:	
  4377 ;; *************** function ___bmul *****************
  4378 ;; Defined at:
  4379 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;  multiplier      1    wreg     unsigned char 
  4382 ;;  multiplicand    1    1[BANK0 ] unsigned char 
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;  multiplier      1    4[BANK0 ] unsigned char 
  4385 ;;  product         1    3[BANK0 ] unsigned char 
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  1    wreg      unsigned char 
  4388 ;; Registers used:
  4389 ;;		wreg, status,2, status,0
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4395 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4396 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4397 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4398 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4399 ;;Total ram usage:        4 bytes
  4400 ;; Hardware stack levels used:    1
  4401 ;; Hardware stack levels required when called:    7
  4402 ;; This function calls:
  4403 ;;		Nothing
  4404 ;; This function is called by:
  4405 ;;		_nrf24l01SetTXPipe
  4406 ;;		_nrf24l01InitRegisters
  4407 ;; This function uses a non-reentrant model
  4408 ;;
  4409                           
  4410                           
  4411                           ;psect for function ___bmul
  4412  0859                     ___bmul:	
  4413                           
  4414                           ;incstack = 0
  4415                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4416                           ;___bmul@multiplier stored from wreg
  4417  0859  0020               	movlb	0	; select bank0
  4418  085A  00A4               	movwf	___bmul@multiplier
  4419  085B  01A3               	clrf	___bmul@product
  4420  085C                     l2713:	
  4421  085C  1C24               	btfss	___bmul@multiplier,0
  4422  085D  2862               	goto	l2717
  4423  085E  0821               	movf	___bmul@multiplicand,w
  4424  085F  00A2               	movwf	??___bmul
  4425  0860  0822               	movf	??___bmul,w
  4426  0861  07A3               	addwf	___bmul@product,f
  4427  0862                     l2717:	
  4428  0862  1003               	clrc
  4429  0863  0DA1               	rlf	___bmul@multiplicand,f
  4430  0864  1003               	clrc
  4431  0865  0CA4               	rrf	___bmul@multiplier,f
  4432  0866  0824               	movf	___bmul@multiplier,w
  4433  0867  1D03               	btfss	3,2
  4434  0868  285C               	goto	l2713
  4435  0869  0823               	movf	___bmul@product,w
  4436  086A  0008               	return
  4437  086B                     __end_of___bmul:	
  4438                           
  4439                           	psect	text7
  4440  0A41                     __ptext7:	
  4441 ;; *************** function _nrf24l01SetRXPipe *****************
  4442 ;; Defined at:
  4443 ;;		line 322 in file "nrf24l01.c"
  4444 ;; Parameters:    Size  Location     Type
  4445 ;;  pipe            1    wreg     unsigned char 
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;  pipe            1    6[BANK0 ] unsigned char 
  4448 ;;  enRXAddr        1    7[BANK0 ] struct .
  4449 ;; Return value:  Size  Location     Type
  4450 ;;                  1    wreg      void 
  4451 ;; Registers used:
  4452 ;;		wreg, status,2, status,0, pclath, cstack
  4453 ;; Tracked objects:
  4454 ;;		On entry : 0/0
  4455 ;;		On exit  : 0/0
  4456 ;;		Unchanged: 0/0
  4457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4459 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4460 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4461 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4462 ;;Total ram usage:        4 bytes
  4463 ;; Hardware stack levels used:    1
  4464 ;; Hardware stack levels required when called:   10
  4465 ;; This function calls:
  4466 ;;		_nrf24l01Send
  4467 ;; This function is called by:
  4468 ;;		_main
  4469 ;;		_nrf24l01InitRegisters
  4470 ;; This function uses a non-reentrant model
  4471 ;;
  4472                           
  4473                           
  4474                           ;psect for function _nrf24l01SetRXPipe
  4475  0A41                     _nrf24l01SetRXPipe:	
  4476                           
  4477                           ;incstack = 0
  4478                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  4479                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4480  0A41  0020               	movlb	0	; select bank0
  4481  0A42  00A6               	movwf	nrf24l01SetRXPipe@pipe
  4482                           
  4483                           ;nrf24l01.c: 324: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 326: if (pipe > 5){
  4484  0A43  3006               	movlw	6
  4485  0A44  0226               	subwf	nrf24l01SetRXPipe@pipe,w
  4486  0A45  1C03               	skipc
  4487  0A46  2A4E               	goto	l368
  4488                           
  4489                           ;nrf24l01.c: 327: enRXAddr.ERX_P0 = 1;
  4490  0A47  1427               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4491                           
  4492                           ;nrf24l01.c: 328: enRXAddr.ERX_P1 = 1;
  4493  0A48  14A7               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4494                           
  4495                           ;nrf24l01.c: 329: enRXAddr.ERX_P2 = 1;
  4496  0A49  1527               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4497                           
  4498                           ;nrf24l01.c: 330: enRXAddr.ERX_P3 = 1;
  4499  0A4A  15A7               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4500                           
  4501                           ;nrf24l01.c: 331: enRXAddr.ERX_P4 = 1;
  4502  0A4B  1627               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4503                           
  4504                           ;nrf24l01.c: 332: enRXAddr.ERX_P5 = 1;
  4505  0A4C  16A7               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4506                           
  4507                           ;nrf24l01.c: 333: }
  4508  0A4D  2A5A               	goto	l3001
  4509  0A4E                     l368:	
  4510                           
  4511                           ;nrf24l01.c: 335: else{;nrf24l01.c: 336: enRXAddr.ERX_P0 = 1;
  4512  0A4E  1427               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4513                           
  4514                           ;nrf24l01.c: 337: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4515  0A4F  0827               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4516  0A50  00A4               	movwf	??_nrf24l01SetRXPipe
  4517  0A51  0A26               	incf	nrf24l01SetRXPipe@pipe,w
  4518  0A52  2A54               	goto	u2934
  4519  0A53                     u2935:	
  4520  0A53  35A4               	lslf	??_nrf24l01SetRXPipe,f
  4521  0A54                     u2934:	
  4522  0A54  0B89               	decfsz	9,f
  4523  0A55  2A53               	goto	u2935
  4524  0A56  0824               	movf	??_nrf24l01SetRXPipe,w
  4525  0A57  00A5               	movwf	??_nrf24l01SetRXPipe+1
  4526  0A58  0825               	movf	??_nrf24l01SetRXPipe+1,w
  4527  0A59  00A7               	movwf	nrf24l01SetRXPipe@enRXAddr
  4528  0A5A                     l3001:	
  4529                           
  4530                           ;nrf24l01.c: 338: };nrf24l01.c: 340: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4531  0A5A  0827               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4532  0A5B  00A4               	movwf	??_nrf24l01SetRXPipe
  4533  0A5C  0824               	movf	??_nrf24l01SetRXPipe,w
  4534  0A5D  00A1               	movwf	nrf24l01Send@data
  4535  0A5E  3022               	movlw	34
  4536  0A5F  3189  21DF         	fcall	_nrf24l01Send
  4537  0A61  0008               	return
  4538  0A62                     __end_of_nrf24l01SetRXPipe:	
  4539                           
  4540                           	psect	text8
  4541  0BC4                     __ptext8:	
  4542 ;; *************** function _nrf24l01GetPipe *****************
  4543 ;; Defined at:
  4544 ;;		line 165 in file "main.c"
  4545 ;; Parameters:    Size  Location     Type
  4546 ;;  name            1    wreg     PTR unsigned char 
  4547 ;;		 -> romData(19), 
  4548 ;; Auto vars:     Size  Location     Type
  4549 ;;  name            1   10[BANK0 ] PTR unsigned char 
  4550 ;;		 -> romData(19), 
  4551 ;;  i               1   11[BANK0 ] unsigned char 
  4552 ;;  pipe            1    9[BANK0 ] unsigned char 
  4553 ;; Return value:  Size  Location     Type
  4554 ;;                  1    wreg      unsigned char 
  4555 ;; Registers used:
  4556 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4557 ;; Tracked objects:
  4558 ;;		On entry : 0/0
  4559 ;;		On exit  : 0/0
  4560 ;;		Unchanged: 0/0
  4561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4563 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4564 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4565 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4566 ;;Total ram usage:        5 bytes
  4567 ;; Hardware stack levels used:    1
  4568 ;; Hardware stack levels required when called:    8
  4569 ;; This function calls:
  4570 ;;		___lwmod
  4571 ;;		_strlen
  4572 ;; This function is called by:
  4573 ;;		_main
  4574 ;; This function uses a non-reentrant model
  4575 ;;
  4576                           
  4577                           
  4578                           ;psect for function _nrf24l01GetPipe
  4579  0BC4                     _nrf24l01GetPipe:	
  4580                           
  4581                           ;incstack = 0
  4582                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4583                           ;nrf24l01GetPipe@name stored from wreg
  4584  0BC4  0020               	movlb	0	; select bank0
  4585  0BC5  00AA               	movwf	nrf24l01GetPipe@name
  4586                           
  4587                           ;main.c: 166: unsigned char pipe = 0;
  4588  0BC6  01A9               	clrf	nrf24l01GetPipe@pipe
  4589                           
  4590                           ;main.c: 167: unsigned char i = 0;
  4591  0BC7  01AB               	clrf	nrf24l01GetPipe@i
  4592                           
  4593                           ;main.c: 170: for (i = 0; i < strlen(name); i++){
  4594  0BC8  01AB               	clrf	nrf24l01GetPipe@i
  4595  0BC9                     l3863:	
  4596  0BC9  082A               	movf	nrf24l01GetPipe@name,w
  4597  0BCA  00A1               	movwf	strlen@s
  4598  0BCB  3001               	movlw	1
  4599  0BCC  00A2               	movwf	strlen@s+1
  4600  0BCD  3189  21A0  318B   	fcall	_strlen
  4601  0BD0  0020               	movlb	0	; select bank0
  4602  0BD1  082B               	movf	nrf24l01GetPipe@i,w
  4603  0BD2  00A7               	movwf	??_nrf24l01GetPipe
  4604  0BD3  01A8               	clrf	??_nrf24l01GetPipe+1
  4605  0BD4  0822               	movf	?_strlen+1,w
  4606  0BD5  0228               	subwf	??_nrf24l01GetPipe+1,w
  4607  0BD6  1D03               	skipz
  4608  0BD7  2BDA               	goto	u3685
  4609  0BD8  0821               	movf	?_strlen,w
  4610  0BD9  0227               	subwf	??_nrf24l01GetPipe,w
  4611  0BDA                     u3685:	
  4612  0BDA  1803               	btfsc	3,0
  4613  0BDB  2BEC               	goto	l3865
  4614                           
  4615                           ;main.c: 171: pipe+= name[i];
  4616  0BDC  082B               	movf	nrf24l01GetPipe@i,w
  4617  0BDD  072A               	addwf	nrf24l01GetPipe@name,w
  4618  0BDE  00A7               	movwf	??_nrf24l01GetPipe
  4619  0BDF  0827               	movf	??_nrf24l01GetPipe,w
  4620  0BE0  0086               	movwf	6
  4621  0BE1  3001               	movlw	1	; select bank2/3
  4622  0BE2  0087               	movwf	7
  4623  0BE3  0801               	movf	1,w
  4624  0BE4  00A8               	movwf	??_nrf24l01GetPipe+1
  4625  0BE5  0828               	movf	??_nrf24l01GetPipe+1,w
  4626  0BE6  07A9               	addwf	nrf24l01GetPipe@pipe,f
  4627  0BE7  3001               	movlw	1
  4628  0BE8  00A7               	movwf	??_nrf24l01GetPipe
  4629  0BE9  0827               	movf	??_nrf24l01GetPipe,w
  4630  0BEA  07AB               	addwf	nrf24l01GetPipe@i,f
  4631  0BEB  2BC9               	goto	l3863
  4632  0BEC                     l3865:	
  4633                           
  4634                           ;main.c: 172: };main.c: 174: return (unsigned) pipe % 6;
  4635  0BEC  3006               	movlw	6
  4636  0BED  00A1               	movwf	___lwmod@divisor
  4637  0BEE  3000               	movlw	0
  4638  0BEF  00A2               	movwf	___lwmod@divisor+1
  4639  0BF0  0829               	movf	nrf24l01GetPipe@pipe,w
  4640  0BF1  00A7               	movwf	??_nrf24l01GetPipe
  4641  0BF2  01A8               	clrf	??_nrf24l01GetPipe+1
  4642  0BF3  0827               	movf	??_nrf24l01GetPipe,w
  4643  0BF4  00A3               	movwf	___lwmod@dividend
  4644  0BF5  0828               	movf	??_nrf24l01GetPipe+1,w
  4645  0BF6  00A4               	movwf	___lwmod@dividend+1
  4646  0BF7  318A  22FE         	fcall	___lwmod
  4647  0BF9  0020               	movlb	0	; select bank0
  4648  0BFA  0821               	movf	?___lwmod,w
  4649  0BFB  0008               	return
  4650  0BFC                     __end_of_nrf24l01GetPipe:	
  4651                           
  4652                           	psect	text9
  4653  0AFE                     __ptext9:	
  4654 ;; *************** function ___lwmod *****************
  4655 ;; Defined at:
  4656 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4657 ;; Parameters:    Size  Location     Type
  4658 ;;  divisor         2    1[BANK0 ] unsigned int 
  4659 ;;  dividend        2    3[BANK0 ] unsigned int 
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;  counter         1    6[BANK0 ] unsigned char 
  4662 ;; Return value:  Size  Location     Type
  4663 ;;                  2    1[BANK0 ] unsigned int 
  4664 ;; Registers used:
  4665 ;;		wreg, status,2, status,0
  4666 ;; Tracked objects:
  4667 ;;		On entry : 0/0
  4668 ;;		On exit  : 0/0
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4671 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4672 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4673 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4674 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4675 ;;Total ram usage:        6 bytes
  4676 ;; Hardware stack levels used:    1
  4677 ;; Hardware stack levels required when called:    7
  4678 ;; This function calls:
  4679 ;;		Nothing
  4680 ;; This function is called by:
  4681 ;;		_nrf24l01GetPipe
  4682 ;; This function uses a non-reentrant model
  4683 ;;
  4684                           
  4685                           
  4686                           ;psect for function ___lwmod
  4687  0AFE                     ___lwmod:	
  4688                           
  4689                           ;incstack = 0
  4690                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4691  0AFE  0020               	movlb	0	; select bank0
  4692  0AFF  0821               	movf	___lwmod@divisor,w
  4693  0B00  0422               	iorwf	___lwmod@divisor+1,w
  4694  0B01  1903               	btfsc	3,2
  4695  0B02  2B26               	goto	l3429
  4696  0B03  01A6               	clrf	___lwmod@counter
  4697  0B04  0AA6               	incf	___lwmod@counter,f
  4698  0B05                     l3419:	
  4699  0B05  1BA2               	btfsc	___lwmod@divisor+1,7
  4700  0B06  2B11               	goto	l3421
  4701  0B07  3001               	movlw	1
  4702  0B08                     u3335:	
  4703  0B08  35A1               	lslf	___lwmod@divisor,f
  4704  0B09  0DA2               	rlf	___lwmod@divisor+1,f
  4705  0B0A  0B89               	decfsz	9,f
  4706  0B0B  2B08               	goto	u3335
  4707  0B0C  3001               	movlw	1
  4708  0B0D  00A5               	movwf	??___lwmod
  4709  0B0E  0825               	movf	??___lwmod,w
  4710  0B0F  07A6               	addwf	___lwmod@counter,f
  4711  0B10  2B05               	goto	l3419
  4712  0B11                     l3421:	
  4713  0B11  0822               	movf	___lwmod@divisor+1,w
  4714  0B12  0224               	subwf	___lwmod@dividend+1,w
  4715  0B13  1D03               	skipz
  4716  0B14  2B17               	goto	u3355
  4717  0B15  0821               	movf	___lwmod@divisor,w
  4718  0B16  0223               	subwf	___lwmod@dividend,w
  4719  0B17                     u3355:	
  4720  0B17  1C03               	skipc
  4721  0B18  2B1D               	goto	l3425
  4722  0B19  0821               	movf	___lwmod@divisor,w
  4723  0B1A  02A3               	subwf	___lwmod@dividend,f
  4724  0B1B  0822               	movf	___lwmod@divisor+1,w
  4725  0B1C  3BA4               	subwfb	___lwmod@dividend+1,f
  4726  0B1D                     l3425:	
  4727  0B1D  3001               	movlw	1
  4728  0B1E                     u3365:	
  4729  0B1E  36A2               	lsrf	___lwmod@divisor+1,f
  4730  0B1F  0CA1               	rrf	___lwmod@divisor,f
  4731  0B20  0B89               	decfsz	9,f
  4732  0B21  2B1E               	goto	u3365
  4733  0B22  3001               	movlw	1
  4734  0B23  02A6               	subwf	___lwmod@counter,f
  4735  0B24  1D03               	btfss	3,2
  4736  0B25  2B11               	goto	l3421
  4737  0B26                     l3429:	
  4738  0B26  0824               	movf	___lwmod@dividend+1,w
  4739  0B27  00A2               	movwf	?___lwmod+1
  4740  0B28  0823               	movf	___lwmod@dividend,w
  4741  0B29  00A1               	movwf	?___lwmod
  4742  0B2A  0008               	return
  4743  0B2B                     __end_of___lwmod:	
  4744                           
  4745                           	psect	text10
  4746  0560                     __ptext10:	
  4747 ;; *************** function _loop *****************
  4748 ;; Defined at:
  4749 ;;		line 97 in file "main.c"
  4750 ;; Parameters:    Size  Location     Type
  4751 ;;		None
  4752 ;; Auto vars:     Size  Location     Type
  4753 ;;  packet         33    9[BANK1 ] struct .
  4754 ;; Return value:  Size  Location     Type
  4755 ;;                  1    wreg      void 
  4756 ;; Registers used:
  4757 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4758 ;; Tracked objects:
  4759 ;;		On entry : 0/0
  4760 ;;		On exit  : 0/0
  4761 ;;		Unchanged: 0/0
  4762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4764 ;;      Locals:         0       0      39       0       0       0       0       0       0       0       0       0       
      +0       0
  4765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4766 ;;      Totals:         0       0      39       0       0       0       0       0       0       0       0       0       
      +0       0
  4767 ;;Total ram usage:       39 bytes
  4768 ;; Hardware stack levels used:    1
  4769 ;; Hardware stack levels required when called:   12
  4770 ;; This function calls:
  4771 ;;		___ftadd
  4772 ;;		_checkTXPower
  4773 ;;		_getADCValue
  4774 ;;		_nrf24l01SendPacket
  4775 ;;		_setMessage
  4776 ;;		_sleep
  4777 ;; This function is called by:
  4778 ;;		_main
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           
  4783                           ;psect for function _loop
  4784  0560                     _loop:	
  4785                           
  4786                           ;incstack = 0
  4787                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4788  0560  0064               	clrwdt	;# 
  4789                           
  4790                           ;main.c: 102: nrf24l01Packet_t packet;;main.c: 111: setMessage(&packet, "VBAT", getADCVa
      +                          lue(0b000100, 0.0101235));
  4791  0561  3056               	movlw	low (STR_3| (0+32768))
  4792  0562  0020               	movlb	0	; select bank0
  4793  0563  00E8               	movwf	setMessage@topic
  4794  0564  3090               	movlw	high (STR_3| (0+32768))
  4795  0565  00E9               	movwf	setMessage@topic+1
  4796  0566  30DD               	movlw	221
  4797  0567  00BE               	movwf	getADCValue@multiplier
  4798  0568  3025               	movlw	37
  4799  0569  00BF               	movwf	getADCValue@multiplier+1
  4800  056A  303C               	movlw	60
  4801  056B  00C0               	movwf	getADCValue@multiplier+2
  4802  056C  3004               	movlw	4
  4803  056D  3187  2756  3185   	fcall	_getADCValue
  4804  0570  0020               	movlb	0	; select bank0
  4805  0571  083E               	movf	?_getADCValue,w
  4806  0572  00EA               	movwf	setMessage@value
  4807  0573  083F               	movf	?_getADCValue+1,w
  4808  0574  00EB               	movwf	setMessage@value+1
  4809  0575  0840               	movf	?_getADCValue+2,w
  4810  0576  00EC               	movwf	setMessage@value+2
  4811  0577  30A9               	movlw	(low (loop@packet| 0))& (0+255)
  4812  0578  318E  2627  3185   	fcall	_setMessage
  4813                           
  4814                           ;main.c: 112: packet.packetData.byte = 0;
  4815  057B  0021               	movlb	1	; select bank1
  4816  057C  01A9               	clrf	loop@packet^(0+128)
  4817                           
  4818                           ;main.c: 113: packet.packetData.ACKRequest = 1;
  4819  057D  1529               	bsf	loop@packet^(0+128),2
  4820                           
  4821                           ;main.c: 114: nrf24l01SendPacket(&packet);
  4822  057E  30A9               	movlw	(low (loop@packet| 0))& (0+255)
  4823  057F  3183  23F2  3185   	fcall	_nrf24l01SendPacket
  4824                           
  4825                           ;main.c: 115: checkTXPower();
  4826  0582  3188  206B  3185   	fcall	_checkTXPower
  4827                           
  4828                           ;main.c: 116: sleep();
  4829  0585  3188  2047  3185   	fcall	_sleep
  4830                           
  4831                           ;main.c: 136: setMessage(&packet, "TEMP", getADCValue(0b111101, 0.5505378) - 146.5075148
      +                          238);
  4832  0588  30F0               	movlw	240
  4833  0589  0020               	movlb	0	; select bank0
  4834  058A  00BE               	movwf	getADCValue@multiplier
  4835  058B  300C               	movlw	12
  4836  058C  00BF               	movwf	getADCValue@multiplier+1
  4837  058D  303F               	movlw	63
  4838  058E  00C0               	movwf	getADCValue@multiplier+2
  4839  058F  303D               	movlw	61
  4840  0590  3187  2756  3185   	fcall	_getADCValue
  4841  0593  0020               	movlb	0	; select bank0
  4842  0594  083E               	movf	?_getADCValue,w
  4843  0595  0021               	movlb	1	; select bank1
  4844  0596  00A3               	movwf	_loop$2039^(0+128)
  4845  0597  0020               	movlb	0	; select bank0
  4846  0598  083F               	movf	?_getADCValue+1,w
  4847  0599  0021               	movlb	1	; select bank1
  4848  059A  00A4               	movwf	(_loop$2039+1)^(0+128)
  4849  059B  0020               	movlb	0	; select bank0
  4850  059C  0840               	movf	?_getADCValue+2,w
  4851  059D  0021               	movlb	1	; select bank1
  4852  059E  00A5               	movwf	(_loop$2039+2)^(0+128)
  4853                           
  4854                           ;main.c: 136: setMessage(&packet, "TEMP", getADCValue(0b111101, 0.5505378) - 146.5075148
      +                          238);
  4855  059F  3082               	movlw	130
  4856  05A0  0020               	movlb	0	; select bank0
  4857  05A1  00B1               	movwf	___ftadd@f1
  4858  05A2  3012               	movlw	18
  4859  05A3  00B2               	movwf	___ftadd@f1+1
  4860  05A4  30C3               	movlw	195
  4861  05A5  00B3               	movwf	___ftadd@f1+2
  4862  05A6  0021               	movlb	1	; select bank1
  4863  05A7  0823               	movf	_loop$2039^(0+128),w
  4864  05A8  0020               	movlb	0	; select bank0
  4865  05A9  00B4               	movwf	___ftadd@f2
  4866  05AA  0021               	movlb	1	; select bank1
  4867  05AB  0824               	movf	(_loop$2039+1)^(0+128),w
  4868  05AC  0020               	movlb	0	; select bank0
  4869  05AD  00B5               	movwf	___ftadd@f2+1
  4870  05AE  0021               	movlb	1	; select bank1
  4871  05AF  0825               	movf	(_loop$2039+2)^(0+128),w
  4872  05B0  0020               	movlb	0	; select bank0
  4873  05B1  00B6               	movwf	___ftadd@f2+2
  4874  05B2  3182  22FC  3185   	fcall	___ftadd
  4875  05B5  0020               	movlb	0	; select bank0
  4876  05B6  0831               	movf	?___ftadd,w
  4877  05B7  0021               	movlb	1	; select bank1
  4878  05B8  00A6               	movwf	_loop$2040^(0+128)
  4879  05B9  0020               	movlb	0	; select bank0
  4880  05BA  0832               	movf	?___ftadd+1,w
  4881  05BB  0021               	movlb	1	; select bank1
  4882  05BC  00A7               	movwf	(_loop$2040+1)^(0+128)
  4883  05BD  0020               	movlb	0	; select bank0
  4884  05BE  0833               	movf	?___ftadd+2,w
  4885  05BF  0021               	movlb	1	; select bank1
  4886  05C0  00A8               	movwf	(_loop$2040+2)^(0+128)
  4887                           
  4888                           ;main.c: 136: setMessage(&packet, "TEMP", getADCValue(0b111101, 0.5505378) - 146.5075148
      +                          238);
  4889  05C1  3051               	movlw	low (STR_4| (0+32768))
  4890  05C2  0020               	movlb	0	; select bank0
  4891  05C3  00E8               	movwf	setMessage@topic
  4892  05C4  3090               	movlw	high (STR_4| (0+32768))
  4893  05C5  00E9               	movwf	setMessage@topic+1
  4894  05C6  0021               	movlb	1	; select bank1
  4895  05C7  0826               	movf	_loop$2040^(0+128),w
  4896  05C8  0020               	movlb	0	; select bank0
  4897  05C9  00EA               	movwf	setMessage@value
  4898  05CA  0021               	movlb	1	; select bank1
  4899  05CB  0827               	movf	(_loop$2040+1)^(0+128),w
  4900  05CC  0020               	movlb	0	; select bank0
  4901  05CD  00EB               	movwf	setMessage@value+1
  4902  05CE  0021               	movlb	1	; select bank1
  4903  05CF  0828               	movf	(_loop$2040+2)^(0+128),w
  4904  05D0  0020               	movlb	0	; select bank0
  4905  05D1  00EC               	movwf	setMessage@value+2
  4906  05D2  30A9               	movlw	(low (loop@packet| 0))& (0+255)
  4907  05D3  318E  2627  3185   	fcall	_setMessage
  4908                           
  4909                           ;main.c: 137: packet.packetData.byte = 0;
  4910  05D6  0021               	movlb	1	; select bank1
  4911  05D7  01A9               	clrf	loop@packet^(0+128)
  4912                           
  4913                           ;main.c: 138: packet.packetData.ACKRequest = 1;
  4914  05D8  1529               	bsf	loop@packet^(0+128),2
  4915                           
  4916                           ;main.c: 139: nrf24l01SendPacket(&packet);
  4917  05D9  30A9               	movlw	(low (loop@packet| 0))& (0+255)
  4918  05DA  3183  23F2  3185   	fcall	_nrf24l01SendPacket
  4919                           
  4920                           ;main.c: 140: checkTXPower();
  4921  05DD  3188  206B  3185   	fcall	_checkTXPower
  4922                           
  4923                           ;main.c: 141: sleep();
  4924  05E0  3188  2047  3185   	fcall	_sleep
  4925                           
  4926                           ;main.c: 144: setMessage(&packet, "TEMPR", getADCValue(0b111101, 1));
  4927  05E3  3046               	movlw	low (STR_5| (0+32768))
  4928  05E4  0020               	movlb	0	; select bank0
  4929  05E5  00E8               	movwf	setMessage@topic
  4930  05E6  3090               	movlw	high (STR_5| (0+32768))
  4931  05E7  00E9               	movwf	setMessage@topic+1
  4932  05E8  3000               	movlw	0
  4933  05E9  00BE               	movwf	getADCValue@multiplier
  4934  05EA  3080               	movlw	128
  4935  05EB  00BF               	movwf	getADCValue@multiplier+1
  4936  05EC  303F               	movlw	63
  4937  05ED  00C0               	movwf	getADCValue@multiplier+2
  4938  05EE  303D               	movlw	61
  4939  05EF  3187  2756  3185   	fcall	_getADCValue
  4940  05F2  0020               	movlb	0	; select bank0
  4941  05F3  083E               	movf	?_getADCValue,w
  4942  05F4  00EA               	movwf	setMessage@value
  4943  05F5  083F               	movf	?_getADCValue+1,w
  4944  05F6  00EB               	movwf	setMessage@value+1
  4945  05F7  0840               	movf	?_getADCValue+2,w
  4946  05F8  00EC               	movwf	setMessage@value+2
  4947  05F9  30A9               	movlw	(low (loop@packet| 0))& (0+255)
  4948  05FA  318E  2627  3185   	fcall	_setMessage
  4949                           
  4950                           ;main.c: 145: packet.packetData.byte = 0;
  4951  05FD  0021               	movlb	1	; select bank1
  4952  05FE  01A9               	clrf	loop@packet^(0+128)
  4953                           
  4954                           ;main.c: 146: packet.packetData.ACKRequest = 1;
  4955  05FF  1529               	bsf	loop@packet^(0+128),2
  4956                           
  4957                           ;main.c: 147: nrf24l01SendPacket(&packet);
  4958  0600  30A9               	movlw	(low (loop@packet| 0))& (0+255)
  4959  0601  3183  23F2  3185   	fcall	_nrf24l01SendPacket
  4960                           
  4961                           ;main.c: 148: checkTXPower();
  4962  0604  3188  206B  3185   	fcall	_checkTXPower
  4963                           
  4964                           ;main.c: 149: sleep();
  4965  0607  3188  2047         	fcall	_sleep
  4966  0609  0008               	return
  4967  060A                     __end_of_loop:	
  4968                           
  4969                           	psect	text11
  4970  0847                     __ptext11:	
  4971 ;; *************** function _sleep *****************
  4972 ;; Defined at:
  4973 ;;		line 49 in file "main.c"
  4974 ;; Parameters:    Size  Location     Type
  4975 ;;		None
  4976 ;; Auto vars:     Size  Location     Type
  4977 ;;		None
  4978 ;; Return value:  Size  Location     Type
  4979 ;;                  1    wreg      void 
  4980 ;; Registers used:
  4981 ;;		wreg
  4982 ;; Tracked objects:
  4983 ;;		On entry : 0/0
  4984 ;;		On exit  : 0/0
  4985 ;;		Unchanged: 0/0
  4986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4991 ;;Total ram usage:        0 bytes
  4992 ;; Hardware stack levels used:    1
  4993 ;; Hardware stack levels required when called:    7
  4994 ;; This function calls:
  4995 ;;		Nothing
  4996 ;; This function is called by:
  4997 ;;		_loop
  4998 ;;		_main
  4999 ;;		_checkRxData
  5000 ;; This function uses a non-reentrant model
  5001 ;;
  5002                           
  5003                           
  5004                           ;psect for function _sleep
  5005  0847                     _sleep:	
  5006  0847                     l223:	
  5007                           ;incstack = 0
  5008                           ; Regs used in _sleep: [wreg]
  5009                           ;main.c: 50: while (1){
  5010                           
  5011                           
  5012                           ;main.c: 52: counter++;
  5013  0847  3001               	movlw	1
  5014  0848  0022               	movlb	2	; select bank2
  5015  0849  07A0               	addwf	_counter^(0+256),f
  5016  084A  3000               	movlw	0
  5017  084B  3DA1               	addwfc	(_counter+1)^(0+256),f
  5018  084C  3000               	movlw	0
  5019  084D  3DA2               	addwfc	(_counter+2)^(0+256),f
  5020  084E  3000               	movlw	0
  5021  084F  3DA3               	addwfc	(_counter+3)^(0+256),f
  5022  0850  0063               	sleep	;# 
  5023                           
  5024                           ;main.c: 55: __nop();
  5025  0851  0000               	nop
  5026                           
  5027                           ;main.c: 56: __nop();
  5028  0852  0000               	nop
  5029                           
  5030                           ;main.c: 58: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  5031  0853  0020               	movlb	0	; select bank0
  5032  0854  1A03               	btfsc	3,4	;volatile
  5033  0855  2847               	goto	l223
  5034  0856  1D83               	btfss	3,3	;volatile
  5035  0857  0008               	return
  5036  0858  2847               	goto	l223
  5037  0859                     __end_of_sleep:	
  5038                           ;main.c: 59: return;
  5039                           
  5040                           
  5041                           	psect	text12
  5042  0E27                     __ptext12:	
  5043 ;; *************** function _setMessage *****************
  5044 ;; Defined at:
  5045 ;;		line 76 in file "main.c"
  5046 ;; Parameters:    Size  Location     Type
  5047 ;;  packet          1    wreg     PTR struct .
  5048 ;;		 -> main@packet(33), loop@packet(33), 
  5049 ;;  topic           2   72[BANK0 ] PTR const unsigned char 
  5050 ;;		 -> STR_7(5), STR_5(6), STR_4(5), STR_3(5), 
  5051 ;;  value           3   74[BANK0 ] float 
  5052 ;; Auto vars:     Size  Location     Type
  5053 ;;  packet          1    2[BANK1 ] PTR struct .
  5054 ;;		 -> main@packet(33), loop@packet(33), 
  5055 ;;  status          2    0[BANK1 ] int 
  5056 ;; Return value:  Size  Location     Type
  5057 ;;                  1    wreg      void 
  5058 ;; Registers used:
  5059 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5060 ;; Tracked objects:
  5061 ;;		On entry : 0/0
  5062 ;;		On exit  : 0/0
  5063 ;;		Unchanged: 0/0
  5064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5065 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5066 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  5067 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5068 ;;      Totals:         0       6       3       0       0       0       0       0       0       0       0       0       
      +0       0
  5069 ;;Total ram usage:        9 bytes
  5070 ;; Hardware stack levels used:    1
  5071 ;; Hardware stack levels required when called:   11
  5072 ;; This function calls:
  5073 ;;		_ftoa
  5074 ;;		_memset
  5075 ;;		_strcat
  5076 ;; This function is called by:
  5077 ;;		_loop
  5078 ;;		_main
  5079 ;; This function uses a non-reentrant model
  5080 ;;
  5081                           
  5082                           
  5083                           ;psect for function _setMessage
  5084  0E27                     _setMessage:	
  5085                           
  5086                           ;incstack = 0
  5087                           ; Regs used in _setMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5088                           ;setMessage@packet stored from wreg
  5089  0E27  0021               	movlb	1	; select bank1
  5090  0E28  00A2               	movwf	setMessage@packet^(0+128)
  5091                           
  5092                           ;main.c: 77: memset(packet->Message, 0, sizeof(packet->Message));
  5093  0E29  0822               	movf	setMessage@packet^(0+128),w
  5094  0E2A  3E01               	addlw	1
  5095  0E2B  0020               	movlb	0	; select bank0
  5096  0E2C  00A1               	movwf	memset@p1
  5097  0E2D  3000               	movlw	0
  5098  0E2E  00A2               	movwf	memset@p1+1
  5099  0E2F  3000               	movlw	0
  5100  0E30  00A3               	movwf	memset@c
  5101  0E31  00A4               	movwf	memset@c+1
  5102  0E32  3020               	movlw	32
  5103  0E33  00A5               	movwf	memset@n
  5104  0E34  3000               	movlw	0
  5105  0E35  00A6               	movwf	memset@n+1
  5106  0E36  3188  20C4  318E   	fcall	_memset
  5107                           
  5108                           ;main.c: 79: strcat(packet->Message, romData.name);
  5109  0E39  3046               	movlw	low (_romData+1)
  5110  0E3A  0020               	movlb	0	; select bank0
  5111  0E3B  00E3               	movwf	strcat@from
  5112  0E3C  3001               	movlw	high (_romData+1)
  5113  0E3D  00E4               	movwf	strcat@from+1
  5114  0E3E  0021               	movlb	1	; select bank1
  5115  0E3F  0822               	movf	setMessage@packet^(0+128),w
  5116  0E40  3E01               	addlw	1
  5117  0E41  318A  2288  318E   	fcall	_strcat
  5118                           
  5119                           ;main.c: 81: strcat(packet->Message, "/");
  5120  0E44  3064               	movlw	low (STR_1| (0+32768))
  5121  0E45  0020               	movlb	0	; select bank0
  5122  0E46  00E3               	movwf	strcat@from
  5123  0E47  3090               	movlw	high (STR_1| (0+32768))
  5124  0E48  00E4               	movwf	strcat@from+1
  5125  0E49  0021               	movlb	1	; select bank1
  5126  0E4A  0822               	movf	setMessage@packet^(0+128),w
  5127  0E4B  3E01               	addlw	1
  5128  0E4C  318A  2288  318E   	fcall	_strcat
  5129                           
  5130                           ;main.c: 82: strcat(packet->Message, topic);
  5131  0E4F  0020               	movlb	0	; select bank0
  5132  0E50  0869               	movf	setMessage@topic+1,w
  5133  0E51  00E4               	movwf	strcat@from+1
  5134  0E52  0868               	movf	setMessage@topic,w
  5135  0E53  00E3               	movwf	strcat@from
  5136  0E54  0021               	movlb	1	; select bank1
  5137  0E55  0822               	movf	setMessage@packet^(0+128),w
  5138  0E56  3E01               	addlw	1
  5139  0E57  318A  2288  318E   	fcall	_strcat
  5140                           
  5141                           ;main.c: 84: int status;;main.c: 85: strcat(packet->Message, "/");
  5142  0E5A  3064               	movlw	low (STR_1| (0+32768))
  5143  0E5B  0020               	movlb	0	; select bank0
  5144  0E5C  00E3               	movwf	strcat@from
  5145  0E5D  3090               	movlw	high (STR_1| (0+32768))
  5146  0E5E  00E4               	movwf	strcat@from+1
  5147  0E5F  0021               	movlb	1	; select bank1
  5148  0E60  0822               	movf	setMessage@packet^(0+128),w
  5149  0E61  3E01               	addlw	1
  5150  0E62  318A  2288  318E   	fcall	_strcat
  5151                           
  5152                           ;main.c: 86: strcat(packet->Message, ftoa(value, &status));
  5153  0E65  0020               	movlb	0	; select bank0
  5154  0E66  086A               	movf	setMessage@value,w
  5155  0E67  00D5               	movwf	ftoa@f
  5156  0E68  086B               	movf	setMessage@value+1,w
  5157  0E69  00D6               	movwf	ftoa@f+1
  5158  0E6A  086C               	movf	setMessage@value+2,w
  5159  0E6B  00D7               	movwf	ftoa@f+2
  5160  0E6C  30A0               	movlw	(low (setMessage@status| 0))& (0+255)
  5161  0E6D  00ED               	movwf	??_setMessage
  5162  0E6E  086D               	movf	??_setMessage,w
  5163  0E6F  00D8               	movwf	ftoa@status
  5164  0E70  3186  26B3  318E   	fcall	_ftoa
  5165  0E73  0020               	movlb	0	; select bank0
  5166  0E74  00E3               	movwf	strcat@from
  5167  0E75  3001               	movlw	1
  5168  0E76  00E4               	movwf	strcat@from+1
  5169  0E77  0021               	movlb	1	; select bank1
  5170  0E78  0822               	movf	setMessage@packet^(0+128),w
  5171  0E79  3E01               	addlw	1
  5172  0E7A  318A  2288         	fcall	_strcat
  5173  0E7C  0008               	return
  5174  0E7D                     __end_of_setMessage:	
  5175                           
  5176                           	psect	text13
  5177  0A88                     __ptext13:	
  5178 ;; *************** function _strcat *****************
  5179 ;; Defined at:
  5180 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;  to              1    wreg     PTR unsigned char 
  5183 ;;		 -> main@packet(33), loop@packet(33), 
  5184 ;;  from            2   67[BANK0 ] PTR const unsigned char 
  5185 ;;		 -> ftoa@buf(17), STR_7(5), STR_5(6), STR_4(5), 
  5186 ;;		 -> STR_3(5), STR_2(2), STR_1(2), romData.name(16), 
  5187 ;;		 -> romData(19), 
  5188 ;; Auto vars:     Size  Location     Type
  5189 ;;  to              1   71[BANK0 ] PTR unsigned char 
  5190 ;;		 -> main@packet(33), loop@packet(33), 
  5191 ;;  cp              1   70[BANK0 ] PTR unsigned char 
  5192 ;;		 -> main@packet(33), loop@packet(33), 
  5193 ;; Return value:  Size  Location     Type
  5194 ;;                  1    wreg      PTR unsigned char 
  5195 ;; Registers used:
  5196 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5197 ;; Tracked objects:
  5198 ;;		On entry : 0/0
  5199 ;;		On exit  : 0/0
  5200 ;;		Unchanged: 0/0
  5201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5202 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5203 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5204 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5205 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5206 ;;Total ram usage:        5 bytes
  5207 ;; Hardware stack levels used:    1
  5208 ;; Hardware stack levels required when called:    7
  5209 ;; This function calls:
  5210 ;;		Nothing
  5211 ;; This function is called by:
  5212 ;;		_setMessage
  5213 ;; This function uses a non-reentrant model
  5214 ;;
  5215                           
  5216                           
  5217                           ;psect for function _strcat
  5218  0A88                     _strcat:	
  5219                           
  5220                           ;incstack = 0
  5221                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  5222                           ;strcat@to stored from wreg
  5223  0A88  0020               	movlb	0	; select bank0
  5224  0A89  00E7               	movwf	strcat@to
  5225  0A8A  0867               	movf	strcat@to,w
  5226  0A8B  00E5               	movwf	??_strcat
  5227  0A8C  0865               	movf	??_strcat,w
  5228  0A8D  00E6               	movwf	strcat@cp
  5229  0A8E                     l2921:	
  5230  0A8E  0866               	movf	strcat@cp,w
  5231  0A8F  0086               	movwf	6
  5232  0A90  0187               	clrf	7
  5233  0A91  0801               	movf	1,w
  5234  0A92  1903               	btfsc	3,2
  5235  0A93  2AA1               	goto	l2927
  5236  0A94  3001               	movlw	1
  5237  0A95  00E5               	movwf	??_strcat
  5238  0A96  0865               	movf	??_strcat,w
  5239  0A97  07E6               	addwf	strcat@cp,f
  5240  0A98  2A8E               	goto	l2921
  5241  0A99                     l2923:	
  5242  0A99  3001               	movlw	1
  5243  0A9A  00E5               	movwf	??_strcat
  5244  0A9B  0865               	movf	??_strcat,w
  5245  0A9C  07E6               	addwf	strcat@cp,f
  5246  0A9D  3001               	movlw	1
  5247  0A9E  07E3               	addwf	strcat@from,f
  5248  0A9F  3000               	movlw	0
  5249  0AA0  3DE4               	addwfc	strcat@from+1,f
  5250  0AA1                     l2927:	
  5251  0AA1  0866               	movf	strcat@cp,w
  5252  0AA2  0086               	movwf	6
  5253  0AA3  0187               	clrf	7
  5254  0AA4  0863               	movf	strcat@from,w
  5255  0AA5  0084               	movwf	4
  5256  0AA6  0864               	movf	strcat@from+1,w
  5257  0AA7  0085               	movwf	5
  5258  0AA8  0800               	movf	0,w	;code access
  5259  0AA9  3FC0               	movwi [0]fsr1
  5260  0AAA  0889               	movf	9,f
  5261  0AAB  1903               	btfsc	3,2
  5262  0AAC  0008               	return
  5263  0AAD  2A99               	goto	l2923
  5264  0AAE                     __end_of_strcat:	
  5265                           ;	Return value of _strcat is never used
  5266                           
  5267                           
  5268                           	psect	text14
  5269  08C4                     __ptext14:	
  5270 ;; *************** function _memset *****************
  5271 ;; Defined at:
  5272 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  5273 ;; Parameters:    Size  Location     Type
  5274 ;;  p1              2    1[BANK0 ] PTR void 
  5275 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5276 ;;  c               2    3[BANK0 ] int 
  5277 ;;  n               2    5[BANK0 ] unsigned int 
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;  p               2    7[BANK0 ] PTR unsigned char 
  5280 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5281 ;; Return value:  Size  Location     Type
  5282 ;;                  2    1[BANK0 ] PTR void 
  5283 ;; Registers used:
  5284 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5285 ;; Tracked objects:
  5286 ;;		On entry : 0/0
  5287 ;;		On exit  : 0/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5290 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5291 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5293 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5294 ;;Total ram usage:        8 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; Hardware stack levels required when called:    7
  5297 ;; This function calls:
  5298 ;;		Nothing
  5299 ;; This function is called by:
  5300 ;;		_setMessage
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           
  5305                           ;psect for function _memset
  5306  08C4                     _memset:	
  5307                           
  5308                           ;incstack = 0
  5309                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  5310  08C4  0020               	movlb	0	; select bank0
  5311  08C5  0822               	movf	memset@p1+1,w
  5312  08C6  00A8               	movwf	memset@p+1
  5313  08C7  0821               	movf	memset@p1,w
  5314  08C8  00A7               	movwf	memset@p
  5315  08C9                     l3669:	
  5316  08C9  3001               	movlw	1
  5317  08CA  02A5               	subwf	memset@n,f
  5318  08CB  3000               	movlw	0
  5319  08CC  3BA6               	subwfb	memset@n+1,f
  5320  08CD  0A25               	incf	memset@n,w
  5321  08CE  1903               	btfsc	3,2
  5322  08CF  0A26               	incf	memset@n+1,w
  5323  08D0  1903               	btfsc	3,2
  5324  08D1  0008               	return
  5325  08D2  0827               	movf	memset@p,w
  5326  08D3  0086               	movwf	6
  5327  08D4  0828               	movf	memset@p+1,w
  5328  08D5  0087               	movwf	7
  5329  08D6  0823               	movf	memset@c,w
  5330  08D7  0081               	movwf	1
  5331  08D8  3001               	movlw	1
  5332  08D9  07A7               	addwf	memset@p,f
  5333  08DA  3000               	movlw	0
  5334  08DB  3DA8               	addwfc	memset@p+1,f
  5335  08DC  28C9               	goto	l3669
  5336  08DD                     __end_of_memset:	
  5337                           ;	Return value of _memset is never used
  5338                           
  5339                           
  5340                           	psect	text15
  5341  06B3                     __ptext15:	
  5342 ;; *************** function _ftoa *****************
  5343 ;; Defined at:
  5344 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;  f               3   53[BANK0 ] float 
  5347 ;;  status          1   56[BANK0 ] PTR int 
  5348 ;;		 -> setMessage@status(2), 
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;  l               4   62[BANK0 ] unsigned long 
  5351 ;;  rem             4   58[BANK0 ] unsigned long 
  5352 ;;  cp              1   66[BANK0 ] PTR unsigned char 
  5353 ;;		 -> ftoa@buf(17), 
  5354 ;; Return value:  Size  Location     Type
  5355 ;;                  1    wreg      PTR unsigned char 
  5356 ;; Registers used:
  5357 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5358 ;; Tracked objects:
  5359 ;;		On entry : 0/0
  5360 ;;		On exit  : 0/0
  5361 ;;		Unchanged: 0/0
  5362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5363 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5364 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5365 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5366 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5367 ;;Total ram usage:       14 bytes
  5368 ;; Hardware stack levels used:    1
  5369 ;; Hardware stack levels required when called:   10
  5370 ;; This function calls:
  5371 ;;		___ftge
  5372 ;;		___ftmul
  5373 ;;		___ftneg
  5374 ;;		___ftsub
  5375 ;;		___fttol
  5376 ;;		___lltoft
  5377 ;;		_sprintf
  5378 ;; This function is called by:
  5379 ;;		_setMessage
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382                           
  5383                           
  5384                           ;psect for function _ftoa
  5385  06B3                     _ftoa:	
  5386                           
  5387                           ;incstack = 0
  5388                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5389  06B3  3058               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  5390  06B4  0020               	movlb	0	; select bank0
  5391  06B5  00D9               	movwf	??_ftoa
  5392  06B6  0859               	movf	??_ftoa,w
  5393  06B7  00E2               	movwf	ftoa@cp
  5394  06B8  0855               	movf	ftoa@f,w
  5395  06B9  00A1               	movwf	___ftge@ff1
  5396  06BA  0856               	movf	ftoa@f+1,w
  5397  06BB  00A2               	movwf	___ftge@ff1+1
  5398  06BC  0857               	movf	ftoa@f+2,w
  5399  06BD  00A3               	movwf	___ftge@ff1+2
  5400  06BE  3000               	movlw	0
  5401  06BF  00A4               	movwf	___ftge@ff2
  5402  06C0  3000               	movlw	0
  5403  06C1  00A5               	movwf	___ftge@ff2+1
  5404  06C2  3000               	movlw	0
  5405  06C3  00A6               	movwf	___ftge@ff2+2
  5406  06C4  318C  2437  3186   	fcall	___ftge
  5407  06C7  1803               	btfsc	3,0
  5408  06C8  2EE6               	goto	l2939
  5409  06C9  302D               	movlw	45
  5410  06CA  0020               	movlb	0	; select bank0
  5411  06CB  00D9               	movwf	??_ftoa
  5412  06CC  0862               	movf	ftoa@cp,w
  5413  06CD  0086               	movwf	6
  5414  06CE  3001               	movlw	1	; select bank2/3
  5415  06CF  0087               	movwf	7
  5416  06D0  0859               	movf	??_ftoa,w
  5417  06D1  0081               	movwf	1
  5418  06D2  3001               	movlw	1
  5419  06D3  00D9               	movwf	??_ftoa
  5420  06D4  0859               	movf	??_ftoa,w
  5421  06D5  07E2               	addwf	ftoa@cp,f
  5422  06D6  0855               	movf	ftoa@f,w
  5423  06D7  00A1               	movwf	___ftneg@f1
  5424  06D8  0856               	movf	ftoa@f+1,w
  5425  06D9  00A2               	movwf	___ftneg@f1+1
  5426  06DA  0857               	movf	ftoa@f+2,w
  5427  06DB  00A3               	movwf	___ftneg@f1+2
  5428  06DC  3188  202F  3186   	fcall	___ftneg
  5429  06DF  0020               	movlb	0	; select bank0
  5430  06E0  0821               	movf	?___ftneg,w
  5431  06E1  00D5               	movwf	ftoa@f
  5432  06E2  0822               	movf	?___ftneg+1,w
  5433  06E3  00D6               	movwf	ftoa@f+1
  5434  06E4  0823               	movf	?___ftneg+2,w
  5435  06E5  00D7               	movwf	ftoa@f+2
  5436  06E6                     l2939:	
  5437  06E6  0020               	movlb	0	; select bank0
  5438  06E7  0855               	movf	ftoa@f,w
  5439  06E8  00B9               	movwf	___fttol@f1
  5440  06E9  0856               	movf	ftoa@f+1,w
  5441  06EA  00BA               	movwf	___fttol@f1+1
  5442  06EB  0857               	movf	ftoa@f+2,w
  5443  06EC  00BB               	movwf	___fttol@f1+2
  5444  06ED  318E  26E2  3186   	fcall	___fttol
  5445  06F0  0020               	movlb	0	; select bank0
  5446  06F1  083C               	movf	?___fttol+3,w
  5447  06F2  00E1               	movwf	ftoa@l+3
  5448  06F3  083B               	movf	?___fttol+2,w
  5449  06F4  00E0               	movwf	ftoa@l+2
  5450  06F5  083A               	movf	?___fttol+1,w
  5451  06F6  00DF               	movwf	ftoa@l+1
  5452  06F7  0839               	movf	?___fttol,w
  5453  06F8  00DE               	movwf	ftoa@l
  5454  06F9  0861               	movf	ftoa@l+3,w
  5455  06FA  00AC               	movwf	___lltoft@c+3
  5456  06FB  0860               	movf	ftoa@l+2,w
  5457  06FC  00AB               	movwf	___lltoft@c+2
  5458  06FD  085F               	movf	ftoa@l+1,w
  5459  06FE  00AA               	movwf	___lltoft@c+1
  5460  06FF  085E               	movf	ftoa@l,w
  5461  0700  00A9               	movwf	___lltoft@c
  5462  0701  318A  22D4  3186   	fcall	___lltoft
  5463  0704  0020               	movlb	0	; select bank0
  5464  0705  0829               	movf	?___lltoft,w
  5465  0706  00BE               	movwf	___ftsub@f2
  5466  0707  082A               	movf	?___lltoft+1,w
  5467  0708  00BF               	movwf	___ftsub@f2+1
  5468  0709  082B               	movf	?___lltoft+2,w
  5469  070A  00C0               	movwf	___ftsub@f2+2
  5470  070B  0855               	movf	ftoa@f,w
  5471  070C  00C1               	movwf	___ftsub@f1
  5472  070D  0856               	movf	ftoa@f+1,w
  5473  070E  00C2               	movwf	___ftsub@f1+1
  5474  070F  0857               	movf	ftoa@f+2,w
  5475  0710  00C3               	movwf	___ftsub@f1+2
  5476  0711  3189  2182  3186   	fcall	___ftsub
  5477  0714  0020               	movlb	0	; select bank0
  5478  0715  083E               	movf	?___ftsub,w
  5479  0716  00D5               	movwf	ftoa@f
  5480  0717  083F               	movf	?___ftsub+1,w
  5481  0718  00D6               	movwf	ftoa@f+1
  5482  0719  0840               	movf	?___ftsub+2,w
  5483  071A  00D7               	movwf	ftoa@f+2
  5484  071B  0855               	movf	ftoa@f,w
  5485  071C  00AC               	movwf	___ftmul@f2
  5486  071D  0856               	movf	ftoa@f+1,w
  5487  071E  00AD               	movwf	___ftmul@f2+1
  5488  071F  0857               	movf	ftoa@f+2,w
  5489  0720  00AE               	movwf	___ftmul@f2+2
  5490  0721  3024               	movlw	36
  5491  0722  00A9               	movwf	___ftmul@f1
  5492  0723  3074               	movlw	116
  5493  0724  00AA               	movwf	___ftmul@f1+1
  5494  0725  3049               	movlw	73
  5495  0726  00AB               	movwf	___ftmul@f1+2
  5496  0727  3184  24AC  3186   	fcall	___ftmul
  5497  072A  0020               	movlb	0	; select bank0
  5498  072B  0829               	movf	?___ftmul,w
  5499  072C  00B9               	movwf	___fttol@f1
  5500  072D  082A               	movf	?___ftmul+1,w
  5501  072E  00BA               	movwf	___fttol@f1+1
  5502  072F  082B               	movf	?___ftmul+2,w
  5503  0730  00BB               	movwf	___fttol@f1+2
  5504  0731  318E  26E2  3186   	fcall	___fttol
  5505  0734  0020               	movlb	0	; select bank0
  5506  0735  083C               	movf	?___fttol+3,w
  5507  0736  00DD               	movwf	ftoa@rem+3
  5508  0737  083B               	movf	?___fttol+2,w
  5509  0738  00DC               	movwf	ftoa@rem+2
  5510  0739  083A               	movf	?___fttol+1,w
  5511  073A  00DB               	movwf	ftoa@rem+1
  5512  073B  0839               	movf	?___fttol,w
  5513  073C  00DA               	movwf	ftoa@rem
  5514  073D  303B               	movlw	low (STR_8| (0+32768))
  5515  073E  00B9               	movwf	sprintf@f
  5516  073F  3090               	movlw	high (STR_8| (0+32768))
  5517  0740  00BA               	movwf	sprintf@f+1
  5518  0741  0861               	movf	ftoa@l+3,w
  5519  0742  00BE               	movwf	?_sprintf+5
  5520  0743  0860               	movf	ftoa@l+2,w
  5521  0744  00BD               	movwf	?_sprintf+4
  5522  0745  085F               	movf	ftoa@l+1,w
  5523  0746  00BC               	movwf	?_sprintf+3
  5524  0747  085E               	movf	ftoa@l,w
  5525  0748  00BB               	movwf	?_sprintf+2
  5526  0749  085D               	movf	ftoa@rem+3,w
  5527  074A  00C2               	movwf	?_sprintf+9
  5528  074B  085C               	movf	ftoa@rem+2,w
  5529  074C  00C1               	movwf	?_sprintf+8
  5530  074D  085B               	movf	ftoa@rem+1,w
  5531  074E  00C0               	movwf	?_sprintf+7
  5532  074F  085A               	movf	ftoa@rem,w
  5533  0750  00BF               	movwf	?_sprintf+6
  5534  0751  0862               	movf	ftoa@cp,w
  5535  0752  3180  2029         	fcall	_sprintf
  5536  0754  3058               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  5537  0755  0008               	return
  5538  0756                     __end_of_ftoa:	
  5539                           
  5540                           	psect	text16
  5541  0029                     __ptext16:	
  5542 ;; *************** function _sprintf *****************
  5543 ;; Defined at:
  5544 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  5545 ;; Parameters:    Size  Location     Type
  5546 ;;  sp              1    wreg     PTR unsigned char 
  5547 ;;		 -> ftoa@buf(17), 
  5548 ;;  f               2   25[BANK0 ] PTR const unsigned char 
  5549 ;;		 -> STR_8(11), 
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;  sp              1   47[BANK0 ] PTR unsigned char 
  5552 ;;		 -> ftoa@buf(17), 
  5553 ;;  val             4   43[BANK0 ] unsigned long 
  5554 ;;  tmpval          4    0        struct .
  5555 ;;  prec            2   50[BANK0 ] int 
  5556 ;;  width           2   48[BANK0 ] int 
  5557 ;;  cp              2    0        PTR const unsigned char 
  5558 ;;  len             2    0        unsigned int 
  5559 ;;  c               1   52[BANK0 ] unsigned char 
  5560 ;;  ap              1   42[BANK0 ] PTR void [1]
  5561 ;;		 -> ?_sprintf(2), 
  5562 ;;  flag            1   41[BANK0 ] unsigned char 
  5563 ;; Return value:  Size  Location     Type
  5564 ;;                  2   25[BANK0 ] int 
  5565 ;; Registers used:
  5566 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5567 ;; Tracked objects:
  5568 ;;		On entry : 0/0
  5569 ;;		On exit  : 0/0
  5570 ;;		Unchanged: 0/0
  5571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5572 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5573 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5574 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5575 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5576 ;;Total ram usage:       28 bytes
  5577 ;; Hardware stack levels used:    1
  5578 ;; Hardware stack levels required when called:    8
  5579 ;; This function calls:
  5580 ;;		___lldiv
  5581 ;;		___llmod
  5582 ;;		___wmul
  5583 ;;		_isdigit
  5584 ;; This function is called by:
  5585 ;;		_ftoa
  5586 ;; This function uses a non-reentrant model
  5587 ;;
  5588                           
  5589                           
  5590                           ;psect for function _sprintf
  5591  0029                     _sprintf:	
  5592                           
  5593                           ;incstack = 0
  5594                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5595                           ;sprintf@sp stored from wreg
  5596  0029  0020               	movlb	0	; select bank0
  5597  002A  00CF               	movwf	sprintf@sp
  5598                           
  5599                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  5600  002B  303B               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5601  002C  00C3               	movwf	??_sprintf
  5602  002D  0843               	movf	??_sprintf,w
  5603  002E  00CA               	movwf	sprintf@ap
  5604  002F                     l2705:	
  5605                           ;doprnt.c: 548: while((c = *f++)) {
  5606                           
  5607  002F  083A               	movf	sprintf@f+1,w
  5608  0030  00C4               	movwf	??_sprintf+1
  5609  0031  0839               	movf	sprintf@f,w
  5610  0032  00C3               	movwf	??_sprintf
  5611  0033  0AB9               	incf	sprintf@f,f
  5612  0034  1903               	skipnz
  5613  0035  0ABA               	incf	sprintf@f+1,f
  5614  0036  0843               	movf	??_sprintf,w
  5615  0037  0084               	movwf	4
  5616  0038  0844               	movf	??_sprintf+1,w
  5617  0039  0085               	movwf	5
  5618  003A  0800               	movf	0,w	;code access
  5619  003B  00C5               	movwf	??_sprintf+2
  5620  003C  0845               	movf	??_sprintf+2,w
  5621  003D  00D4               	movwf	sprintf@c
  5622  003E  0854               	movf	sprintf@c,w
  5623  003F  1903               	btfsc	3,2
  5624  0040  29F0               	goto	l2707
  5625                           
  5626                           ;doprnt.c: 550: if(c != '%')
  5627  0041  3025               	movlw	37
  5628  0042  0654               	xorwf	sprintf@c,w
  5629  0043  1903               	btfsc	3,2
  5630  0044  2852               	goto	l2617
  5631                           
  5632                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  5633  0045  0854               	movf	sprintf@c,w
  5634  0046  00C3               	movwf	??_sprintf
  5635  0047  084F               	movf	sprintf@sp,w
  5636  0048  0086               	movwf	6
  5637  0049  3001               	movlw	1	; select bank2/3
  5638  004A  0087               	movwf	7
  5639  004B  0843               	movf	??_sprintf,w
  5640  004C  0081               	movwf	1
  5641  004D  3001               	movlw	1
  5642  004E  00C3               	movwf	??_sprintf
  5643  004F  0843               	movf	??_sprintf,w
  5644  0050  07CF               	addwf	sprintf@sp,f
  5645                           
  5646                           ;doprnt.c: 554: continue;
  5647  0051  282F               	goto	l2705
  5648  0052                     l2617:	
  5649                           
  5650                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  5651  0052  01D0               	clrf	sprintf@width
  5652  0053  01D1               	clrf	sprintf@width+1
  5653                           
  5654                           ;doprnt.c: 560: flag = 0;
  5655  0054  01C9               	clrf	sprintf@flag
  5656                           
  5657                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  5658  0055  0839               	movf	sprintf@f,w
  5659  0056  0084               	movwf	4
  5660  0057  083A               	movf	sprintf@f+1,w
  5661  0058  0085               	movwf	5
  5662  0059  0800               	movf	0,w	;code access
  5663  005A  3188  2038  3180   	fcall	_isdigit
  5664  005D  1C03               	btfss	3,0
  5665  005E  2890               	goto	l2631
  5666                           
  5667                           ;doprnt.c: 610: width = 0;
  5668  005F  0020               	movlb	0	; select bank0
  5669  0060  01D0               	clrf	sprintf@width
  5670  0061  01D1               	clrf	sprintf@width+1
  5671  0062                     l2623:	
  5672                           ;doprnt.c: 611: do {
  5673                           
  5674                           
  5675                           ;doprnt.c: 612: width *= 10;
  5676  0062  300A               	movlw	10
  5677  0063  0020               	movlb	0	; select bank0
  5678  0064  00A1               	movwf	___wmul@multiplier
  5679  0065  3000               	movlw	0
  5680  0066  00A2               	movwf	___wmul@multiplier+1
  5681  0067  0851               	movf	sprintf@width+1,w
  5682  0068  00A4               	movwf	___wmul@multiplicand+1
  5683  0069  0850               	movf	sprintf@width,w
  5684  006A  00A3               	movwf	___wmul@multiplicand
  5685  006B  3189  212E  3180   	fcall	___wmul
  5686  006E  0020               	movlb	0	; select bank0
  5687  006F  0822               	movf	?___wmul+1,w
  5688  0070  00D1               	movwf	sprintf@width+1
  5689  0071  0821               	movf	?___wmul,w
  5690  0072  00D0               	movwf	sprintf@width
  5691                           
  5692                           ;doprnt.c: 613: width += *f++ - '0';
  5693  0073  0839               	movf	sprintf@f,w
  5694  0074  0084               	movwf	4
  5695  0075  083A               	movf	sprintf@f+1,w
  5696  0076  0085               	movwf	5
  5697  0077  0800               	movf	0,w	;code access
  5698  0078  3ED0               	addlw	208
  5699  0079  00C3               	movwf	??_sprintf
  5700  007A  30FF               	movlw	255
  5701  007B  1803               	skipnc
  5702  007C  3000               	movlw	0
  5703  007D  00C4               	movwf	??_sprintf+1
  5704  007E  0843               	movf	??_sprintf,w
  5705  007F  07D0               	addwf	sprintf@width,f
  5706  0080  0844               	movf	??_sprintf+1,w
  5707  0081  3DD1               	addwfc	sprintf@width+1,f
  5708  0082  3001               	movlw	1
  5709  0083  07B9               	addwf	sprintf@f,f
  5710  0084  3000               	movlw	0
  5711  0085  3DBA               	addwfc	sprintf@f+1,f
  5712                           
  5713                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  5714  0086  0839               	movf	sprintf@f,w
  5715  0087  0084               	movwf	4
  5716  0088  083A               	movf	sprintf@f+1,w
  5717  0089  0085               	movwf	5
  5718  008A  0800               	movf	0,w	;code access
  5719  008B  3188  2038  3180   	fcall	_isdigit
  5720  008E  1803               	btfsc	3,0
  5721  008F  2862               	goto	l2623
  5722  0090                     l2631:	
  5723                           
  5724                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  5725  0090  0020               	movlb	0	; select bank0
  5726  0091  0839               	movf	sprintf@f,w
  5727  0092  0084               	movwf	4
  5728  0093  083A               	movf	sprintf@f+1,w
  5729  0094  0085               	movwf	5
  5730  0095  0012               	moviw fsr0++
  5731  0096  3A2E               	xorlw	46
  5732  0097  1D03               	btfss	3,2
  5733  0098  28CE               	goto	l2643
  5734                           
  5735                           ;doprnt.c: 625: f++;
  5736  0099  3001               	movlw	1
  5737  009A  07B9               	addwf	sprintf@f,f
  5738  009B  3000               	movlw	0
  5739  009C  3DBA               	addwfc	sprintf@f+1,f
  5740                           
  5741                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  5742  009D  01D2               	clrf	sprintf@prec
  5743  009E  01D3               	clrf	sprintf@prec+1
  5744  009F                     l2641:	
  5745                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  5746                           
  5747  009F  0839               	movf	sprintf@f,w
  5748  00A0  0084               	movwf	4
  5749  00A1  083A               	movf	sprintf@f+1,w
  5750  00A2  0085               	movwf	5
  5751  00A3  0800               	movf	0,w	;code access
  5752  00A4  3188  2038  3180   	fcall	_isdigit
  5753  00A7  1C03               	btfss	3,0
  5754  00A8  28D9               	goto	l2649
  5755                           
  5756                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  5757  00A9  0020               	movlb	0	; select bank0
  5758  00AA  0839               	movf	sprintf@f,w
  5759  00AB  0084               	movwf	4
  5760  00AC  083A               	movf	sprintf@f+1,w
  5761  00AD  0085               	movwf	5
  5762  00AE  0800               	movf	0,w	;code access
  5763  00AF  00C3               	movwf	??_sprintf
  5764  00B0  01C4               	clrf	??_sprintf+1
  5765  00B1  0853               	movf	sprintf@prec+1,w
  5766  00B2  00A2               	movwf	___wmul@multiplier+1
  5767  00B3  0852               	movf	sprintf@prec,w
  5768  00B4  00A1               	movwf	___wmul@multiplier
  5769  00B5  300A               	movlw	10
  5770  00B6  00A3               	movwf	___wmul@multiplicand
  5771  00B7  3000               	movlw	0
  5772  00B8  00A4               	movwf	___wmul@multiplicand+1
  5773  00B9  3189  212E  3180   	fcall	___wmul
  5774  00BC  0020               	movlb	0	; select bank0
  5775  00BD  0843               	movf	??_sprintf,w
  5776  00BE  0721               	addwf	?___wmul,w
  5777  00BF  00C5               	movwf	??_sprintf+2
  5778  00C0  0844               	movf	??_sprintf+1,w
  5779  00C1  3D22               	addwfc	?___wmul+1,w
  5780  00C2  00C6               	movwf	??_sprintf+3
  5781  00C3  0845               	movf	??_sprintf+2,w
  5782  00C4  3ED0               	addlw	208
  5783  00C5  00D2               	movwf	sprintf@prec
  5784  00C6  30FF               	movlw	255
  5785  00C7  3D46               	addwfc	??_sprintf+3,w
  5786  00C8  00D3               	movwf	sprintf@prec+1
  5787  00C9  3001               	movlw	1
  5788  00CA  07B9               	addwf	sprintf@f,f
  5789  00CB  3000               	movlw	0
  5790  00CC  3DBA               	addwfc	sprintf@f+1,f
  5791  00CD  289F               	goto	l2641
  5792  00CE                     l2643:	
  5793                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  5794                           
  5795                           
  5796                           ;doprnt.c: 645: prec = 0;
  5797  00CE  0020               	movlb	0	; select bank0
  5798  00CF  01D2               	clrf	sprintf@prec
  5799  00D0  01D3               	clrf	sprintf@prec+1
  5800                           
  5801                           ;doprnt.c: 654: switch(c = *f++) {
  5802                           
  5803                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  5804  00D1  28D9               	goto	l2649
  5805  00D2                     l489:	
  5806                           ;doprnt.c: 660: case 'l':
  5807                           
  5808                           ;doprnt.c: 657: goto alldone;
  5809                           
  5810                           ;doprnt.c: 656: case 0:
  5811                           
  5812                           
  5813                           ;doprnt.c: 662: flag |= 0x10;
  5814  00D2  1649               	bsf	sprintf@flag,4
  5815                           
  5816                           ;doprnt.c: 663: goto loop;
  5817  00D3  28D9               	goto	l2649
  5818  00D4                     l2645:	
  5819                           ;doprnt.c: 836: case 'u':
  5820                           
  5821                           ;doprnt.c: 832: continue;
  5822                           
  5823                           ;doprnt.c: 821: default:
  5824                           
  5825                           
  5826                           ;doprnt.c: 837: flag |= 0xC0;
  5827  00D4  30C0               	movlw	192
  5828  00D5  00C3               	movwf	??_sprintf
  5829  00D6  0843               	movf	??_sprintf,w
  5830  00D7  04C9               	iorwf	sprintf@flag,f
  5831                           
  5832                           ;doprnt.c: 841: }
  5833                           
  5834                           ;doprnt.c: 838: break;
  5835  00D8  28F1               	goto	l492
  5836  00D9                     l2649:	
  5837  00D9  0020               	movlb	0	; select bank0
  5838  00DA  083A               	movf	sprintf@f+1,w
  5839  00DB  00C4               	movwf	??_sprintf+1
  5840  00DC  0839               	movf	sprintf@f,w
  5841  00DD  00C3               	movwf	??_sprintf
  5842  00DE  0AB9               	incf	sprintf@f,f
  5843  00DF  1903               	skipnz
  5844  00E0  0ABA               	incf	sprintf@f+1,f
  5845  00E1  0843               	movf	??_sprintf,w
  5846  00E2  0084               	movwf	4
  5847  00E3  0844               	movf	??_sprintf+1,w
  5848  00E4  0085               	movwf	5
  5849  00E5  0800               	movf	0,w	;code access
  5850  00E6  00D4               	movwf	sprintf@c
  5851                           
  5852                           ; Switch size 1, requested type "space"
  5853                           ; Number of cases is 3, Range of values is 0 to 117
  5854                           ; switch strategies available:
  5855                           ; Name         Instructions Cycles
  5856                           ; simple_byte           10     6 (average)
  5857                           ; direct_byte          242     6 (fixed)
  5858                           ; jumptable            260     6 (fixed)
  5859                           ;	Chosen strategy is simple_byte
  5860  00E7  3A00               	xorlw	0	; case 0
  5861  00E8  1903               	skipnz
  5862  00E9  29F0               	goto	l2707
  5863  00EA  3A6C               	xorlw	108	; case 108
  5864  00EB  1903               	skipnz
  5865  00EC  28D2               	goto	l489
  5866  00ED  3A19               	xorlw	25	; case 117
  5867  00EE  1903               	skipnz
  5868  00EF  28D4               	goto	l2645
  5869  00F0  282F               	goto	l2705
  5870  00F1                     l492:	
  5871                           
  5872                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  5873  00F1  1E49               	btfss	sprintf@flag,4
  5874  00F2  2900               	goto	l2655
  5875                           
  5876                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  5877  00F3  084A               	movf	sprintf@ap,w
  5878  00F4  0086               	movwf	6
  5879  00F5  0187               	clrf	7
  5880  00F6  3F40               	moviw [0]fsr1
  5881  00F7  00CB               	movwf	sprintf@val
  5882  00F8  3F41               	moviw [1]fsr1
  5883  00F9  00CC               	movwf	sprintf@val+1
  5884  00FA  3F42               	moviw [2]fsr1
  5885  00FB  00CD               	movwf	sprintf@val+2
  5886  00FC  3F43               	moviw [3]fsr1
  5887  00FD  00CE               	movwf	sprintf@val+3
  5888  00FE  3004               	movlw	4
  5889  00FF  290E               	goto	L1
  5890  0100                     l2655:	
  5891                           
  5892                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  5893  0100  084A               	movf	sprintf@ap,w
  5894  0101  0086               	movwf	6
  5895  0102  0187               	clrf	7
  5896  0103  3F40               	moviw [0]fsr1
  5897  0104  00C3               	movwf	??_sprintf
  5898  0105  3F41               	moviw [1]fsr1
  5899  0106  00C4               	movwf	??_sprintf+1
  5900  0107  0843               	movf	??_sprintf,w
  5901  0108  00CB               	movwf	sprintf@val
  5902  0109  0844               	movf	??_sprintf+1,w
  5903  010A  00CC               	movwf	sprintf@val+1
  5904  010B  01CD               	clrf	sprintf@val+2
  5905  010C  01CE               	clrf	sprintf@val+3
  5906  010D  3002               	movlw	2
  5907  010E                     L1:	
  5908  010E  00C3               	movwf	??_sprintf
  5909  010F  0843               	movf	??_sprintf,w
  5910  0110  07CA               	addwf	sprintf@ap,f
  5911                           
  5912                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  5913  0111  0852               	movf	sprintf@prec,w
  5914  0112  0453               	iorwf	sprintf@prec+1,w
  5915  0113  1D03               	btfss	3,2
  5916  0114  291F               	goto	l2665
  5917  0115  084E               	movf	sprintf@val+3,w
  5918  0116  044D               	iorwf	sprintf@val+2,w
  5919  0117  044C               	iorwf	sprintf@val+1,w
  5920  0118  044B               	iorwf	sprintf@val,w
  5921  0119  1D03               	skipz
  5922  011A  291F               	goto	l2665
  5923                           
  5924                           ;doprnt.c: 1310: prec++;
  5925  011B  3001               	movlw	1
  5926  011C  07D2               	addwf	sprintf@prec,f
  5927  011D  3000               	movlw	0
  5928  011E  3DD3               	addwfc	sprintf@prec+1,f
  5929  011F                     l2665:	
  5930                           
  5931                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5932  011F  01D4               	clrf	sprintf@c
  5933  0120  0AD4               	incf	sprintf@c,f
  5934  0121  300A               	movlw	10
  5935  0122  0654               	xorwf	sprintf@c,w
  5936  0123  1903               	btfsc	3,2
  5937  0124  2952               	goto	l2677
  5938  0125                     l2671:	
  5939                           
  5940                           ;doprnt.c: 1325: if(val < dpowers[c])
  5941  0125  0854               	movf	sprintf@c,w
  5942  0126  00C3               	movwf	??_sprintf
  5943  0127  01C4               	clrf	??_sprintf+1
  5944  0128  35C3               	lslf	??_sprintf,f
  5945  0129  0DC4               	rlf	??_sprintf+1,f
  5946  012A  35C3               	lslf	??_sprintf,f
  5947  012B  0DC4               	rlf	??_sprintf+1,f
  5948  012C  3000               	movlw	low (_dpowers| (0+32768))
  5949  012D  0743               	addwf	??_sprintf,w
  5950  012E  0084               	movwf	4
  5951  012F  3090               	movlw	high (_dpowers| (0+32768))
  5952  0130  3D44               	addwfc	??_sprintf+1,w
  5953  0131  0085               	movwf	5
  5954  0132  3F00               	moviw [0]fsr0
  5955  0133  00C5               	movwf	??_sprintf+2
  5956  0134  3F01               	moviw [1]fsr0
  5957  0135  00C6               	movwf	??_sprintf+3
  5958  0136  3F02               	moviw [2]fsr0
  5959  0137  00C7               	movwf	??_sprintf+4
  5960  0138  3F03               	moviw [3]fsr0
  5961  0139  00C8               	movwf	??_sprintf+5
  5962  013A  0848               	movf	??_sprintf+5,w
  5963  013B  024E               	subwf	sprintf@val+3,w
  5964  013C  1D03               	skipz
  5965  013D  2948               	goto	u2395
  5966  013E  0847               	movf	??_sprintf+4,w
  5967  013F  024D               	subwf	sprintf@val+2,w
  5968  0140  1D03               	skipz
  5969  0141  2948               	goto	u2395
  5970  0142  0846               	movf	??_sprintf+3,w
  5971  0143  024C               	subwf	sprintf@val+1,w
  5972  0144  1D03               	skipz
  5973  0145  2948               	goto	u2395
  5974  0146  0845               	movf	??_sprintf+2,w
  5975  0147  024B               	subwf	sprintf@val,w
  5976  0148                     u2395:	
  5977  0148  1C03               	btfss	3,0
  5978  0149  2952               	goto	l2677
  5979                           
  5980                           ;doprnt.c: 1326: break;
  5981  014A  3001               	movlw	1
  5982  014B  00C3               	movwf	??_sprintf
  5983  014C  0843               	movf	??_sprintf,w
  5984  014D  07D4               	addwf	sprintf@c,f
  5985  014E  300A               	movlw	10
  5986  014F  0654               	xorwf	sprintf@c,w
  5987  0150  1D03               	btfss	3,2
  5988  0151  2925               	goto	l2671
  5989  0152                     l2677:	
  5990                           
  5991                           ;doprnt.c: 1358: if(c < prec)
  5992  0152  0853               	movf	sprintf@prec+1,w
  5993  0153  3A80               	xorlw	128
  5994  0154  3C80               	sublw	128
  5995  0155  1D03               	skipz
  5996  0156  2959               	goto	u2415
  5997  0157  0852               	movf	sprintf@prec,w
  5998  0158  0254               	subwf	sprintf@c,w
  5999  0159                     u2415:	
  6000  0159  1803               	skipnc
  6001  015A  2961               	goto	l2681
  6002                           
  6003                           ;doprnt.c: 1359: c = prec;
  6004  015B  0020               	movlb	0	; select bank0
  6005  015C  0852               	movf	sprintf@prec,w
  6006  015D  00C3               	movwf	??_sprintf
  6007  015E  0843               	movf	??_sprintf,w
  6008  015F  00D4               	movwf	sprintf@c
  6009  0160  2975               	goto	l500
  6010  0161                     l2681:	
  6011                           
  6012                           ;doprnt.c: 1360: else if(prec < c)
  6013  0161  0020               	movlb	0	; select bank0
  6014  0162  0853               	movf	sprintf@prec+1,w
  6015  0163  3A80               	xorlw	128
  6016  0164  00C3               	movwf	??_sprintf
  6017  0165  3080               	movlw	128
  6018  0166  0243               	subwf	??_sprintf,w
  6019  0167  1D03               	skipz
  6020  0168  296B               	goto	u2425
  6021  0169  0854               	movf	sprintf@c,w
  6022  016A  0252               	subwf	sprintf@prec,w
  6023  016B                     u2425:	
  6024  016B  1803               	skipnc
  6025  016C  2975               	goto	l500
  6026                           
  6027                           ;doprnt.c: 1361: prec = c;
  6028  016D  0020               	movlb	0	; select bank0
  6029  016E  0854               	movf	sprintf@c,w
  6030  016F  00C3               	movwf	??_sprintf
  6031  0170  01C4               	clrf	??_sprintf+1
  6032  0171  0843               	movf	??_sprintf,w
  6033  0172  00D2               	movwf	sprintf@prec
  6034  0173  0844               	movf	??_sprintf+1,w
  6035  0174  00D3               	movwf	sprintf@prec+1
  6036  0175                     l500:	
  6037                           
  6038                           ;doprnt.c: 1400: if(width > c)
  6039  0175  0020               	movlb	0	; select bank0
  6040  0176  0851               	movf	sprintf@width+1,w
  6041  0177  3A80               	xorlw	128
  6042  0178  3C80               	sublw	128
  6043  0179  1D03               	skipz
  6044  017A  297D               	goto	u2435
  6045  017B  0850               	movf	sprintf@width,w
  6046  017C  0254               	subwf	sprintf@c,w
  6047  017D                     u2435:	
  6048  017D  1803               	skipnc
  6049  017E  2988               	goto	l2687
  6050                           
  6051                           ;doprnt.c: 1401: width -= c;
  6052  017F  0020               	movlb	0	; select bank0
  6053  0180  0854               	movf	sprintf@c,w
  6054  0181  00C3               	movwf	??_sprintf
  6055  0182  01C4               	clrf	??_sprintf+1
  6056  0183  0843               	movf	??_sprintf,w
  6057  0184  02D0               	subwf	sprintf@width,f
  6058  0185  0844               	movf	??_sprintf+1,w
  6059  0186  3BD1               	subwfb	sprintf@width+1,f
  6060  0187  298B               	goto	l2689
  6061  0188                     l2687:	
  6062                           
  6063                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  6064  0188  0020               	movlb	0	; select bank0
  6065  0189  01D0               	clrf	sprintf@width
  6066  018A  01D1               	clrf	sprintf@width+1
  6067  018B                     l2689:	
  6068                           
  6069                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  6070  018B  0850               	movf	sprintf@width,w
  6071  018C  0451               	iorwf	sprintf@width+1,w
  6072  018D  1903               	btfsc	3,2
  6073  018E  29E5               	goto	l2703
  6074                           
  6075                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  6076                           
  6077                           ;doprnt.c: 1448: do
  6078  018F  3020               	movlw	32
  6079  0190  00C3               	movwf	??_sprintf
  6080  0191  084F               	movf	sprintf@sp,w
  6081  0192  0086               	movwf	6
  6082  0193  3001               	movlw	1	; select bank2/3
  6083  0194  0087               	movwf	7
  6084  0195  0843               	movf	??_sprintf,w
  6085  0196  0081               	movwf	1
  6086  0197  3001               	movlw	1
  6087  0198  00C3               	movwf	??_sprintf
  6088  0199  0843               	movf	??_sprintf,w
  6089  019A  07CF               	addwf	sprintf@sp,f
  6090                           
  6091                           ;doprnt.c: 1450: while(--width);
  6092  019B  30FF               	movlw	255
  6093  019C  07D0               	addwf	sprintf@width,f
  6094  019D  30FF               	movlw	255
  6095  019E  3DD1               	addwfc	sprintf@width+1,f
  6096  019F  298B               	goto	l2689
  6097  01A0                     l2697:	
  6098                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  6099                           
  6100                           
  6101                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  6102  01A0  3000               	movlw	0
  6103  01A1  00B2               	movwf	___llmod@divisor+3
  6104  01A2  3000               	movlw	0
  6105  01A3  00B1               	movwf	___llmod@divisor+2
  6106  01A4  3000               	movlw	0
  6107  01A5  00B0               	movwf	___llmod@divisor+1
  6108  01A6  300A               	movlw	10
  6109  01A7  00AF               	movwf	___llmod@divisor
  6110  01A8  0853               	movf	sprintf@prec+1,w
  6111  01A9  0085               	movwf	5
  6112  01AA  0852               	movf	sprintf@prec,w
  6113  01AB  0084               	movwf	4
  6114  01AC  3584               	lslf	4,f
  6115  01AD  0D85               	rlf	5,f
  6116  01AE  3584               	lslf	4,f
  6117  01AF  0D85               	rlf	5,f
  6118  01B0  3000               	movlw	low (_dpowers| (0+32768))
  6119  01B1  0784               	addwf	4,f
  6120  01B2  3090               	movlw	high (_dpowers| (0+32768))
  6121  01B3  3D85               	addwfc	5,f
  6122  01B4  3F00               	moviw [0]fsr0
  6123  01B5  00A1               	movwf	___lldiv@divisor
  6124  01B6  3F01               	moviw [1]fsr0
  6125  01B7  00A2               	movwf	___lldiv@divisor+1
  6126  01B8  3F02               	moviw [2]fsr0
  6127  01B9  00A3               	movwf	___lldiv@divisor+2
  6128  01BA  3F03               	moviw [3]fsr0
  6129  01BB  00A4               	movwf	___lldiv@divisor+3
  6130  01BC  084E               	movf	sprintf@val+3,w
  6131  01BD  00A8               	movwf	___lldiv@dividend+3
  6132  01BE  084D               	movf	sprintf@val+2,w
  6133  01BF  00A7               	movwf	___lldiv@dividend+2
  6134  01C0  084C               	movf	sprintf@val+1,w
  6135  01C1  00A6               	movwf	___lldiv@dividend+1
  6136  01C2  084B               	movf	sprintf@val,w
  6137  01C3  00A5               	movwf	___lldiv@dividend
  6138  01C4  318D  25D4  3180   	fcall	___lldiv
  6139  01C7  0020               	movlb	0	; select bank0
  6140  01C8  0824               	movf	?___lldiv+3,w
  6141  01C9  00B6               	movwf	___llmod@dividend+3
  6142  01CA  0823               	movf	?___lldiv+2,w
  6143  01CB  00B5               	movwf	___llmod@dividend+2
  6144  01CC  0822               	movf	?___lldiv+1,w
  6145  01CD  00B4               	movwf	___llmod@dividend+1
  6146  01CE  0821               	movf	?___lldiv,w
  6147  01CF  00B3               	movwf	___llmod@dividend
  6148  01D0  318C  24B2  3180   	fcall	___llmod
  6149  01D3  0020               	movlb	0	; select bank0
  6150  01D4  082F               	movf	?___llmod,w
  6151  01D5  3E30               	addlw	48
  6152  01D6  00C3               	movwf	??_sprintf
  6153  01D7  0843               	movf	??_sprintf,w
  6154  01D8  00D4               	movwf	sprintf@c
  6155                           
  6156                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  6157  01D9  0854               	movf	sprintf@c,w
  6158  01DA  00C3               	movwf	??_sprintf
  6159  01DB  084F               	movf	sprintf@sp,w
  6160  01DC  0086               	movwf	6
  6161  01DD  3001               	movlw	1	; select bank2/3
  6162  01DE  0087               	movwf	7
  6163  01DF  0843               	movf	??_sprintf,w
  6164  01E0  0081               	movwf	1
  6165  01E1  3001               	movlw	1
  6166  01E2  00C3               	movwf	??_sprintf
  6167  01E3  0843               	movf	??_sprintf,w
  6168  01E4  07CF               	addwf	sprintf@sp,f
  6169  01E5                     l2703:	
  6170  01E5  30FF               	movlw	255
  6171  01E6  07D2               	addwf	sprintf@prec,f
  6172  01E7  30FF               	movlw	255
  6173  01E8  3DD3               	addwfc	sprintf@prec+1,f
  6174  01E9  0A52               	incf	sprintf@prec,w
  6175  01EA  1D03               	skipz
  6176  01EB  29A0               	goto	l2697
  6177  01EC  0A53               	incf	sprintf@prec+1,w
  6178  01ED  1903               	btfsc	3,2
  6179  01EE  282F               	goto	l2705
  6180  01EF  29A0               	goto	l2697
  6181  01F0                     l2707:	
  6182                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  6183                           
  6184                           
  6185                           ;doprnt.c: 1557: *sp = 0;
  6186  01F0  084F               	movf	sprintf@sp,w
  6187  01F1  0086               	movwf	6
  6188  01F2  3001               	movlw	1	; select bank2/3
  6189  01F3  0087               	movwf	7
  6190  01F4  0181               	clrf	1
  6191  01F5  0008               	return
  6192  01F6                     __end_of_sprintf:	
  6193                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  6194                           
  6195                           
  6196                           	psect	text17
  6197  0838                     __ptext17:	
  6198 ;; *************** function _isdigit *****************
  6199 ;; Defined at:
  6200 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  6201 ;; Parameters:    Size  Location     Type
  6202 ;;  c               1    wreg     unsigned char 
  6203 ;; Auto vars:     Size  Location     Type
  6204 ;;  c               1    2[BANK0 ] unsigned char 
  6205 ;; Return value:  Size  Location     Type
  6206 ;;		None               void
  6207 ;; Registers used:
  6208 ;;		wreg, status,2, status,0
  6209 ;; Tracked objects:
  6210 ;;		On entry : 0/0
  6211 ;;		On exit  : 0/0
  6212 ;;		Unchanged: 0/0
  6213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6215 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6217 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6218 ;;Total ram usage:        2 bytes
  6219 ;; Hardware stack levels used:    1
  6220 ;; Hardware stack levels required when called:    7
  6221 ;; This function calls:
  6222 ;;		Nothing
  6223 ;; This function is called by:
  6224 ;;		_sprintf
  6225 ;; This function uses a non-reentrant model
  6226 ;;
  6227                           
  6228                           
  6229                           ;psect for function _isdigit
  6230  0838                     _isdigit:	
  6231                           
  6232                           ;incstack = 0
  6233                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6234                           ;isdigit@c stored from wreg
  6235  0838  0020               	movlb	0	; select bank0
  6236  0839  00A2               	movwf	isdigit@c
  6237  083A  01A1               	clrf	_isdigit$1776
  6238  083B  303A               	movlw	58
  6239  083C  0222               	subwf	isdigit@c,w
  6240  083D  1803               	skipnc
  6241  083E  2845               	goto	l2403
  6242  083F  3030               	movlw	48
  6243  0840  0222               	subwf	isdigit@c,w
  6244  0841  1C03               	skipc
  6245  0842  2845               	goto	l2403
  6246  0843  01A1               	clrf	_isdigit$1776
  6247  0844  0AA1               	incf	_isdigit$1776,f
  6248  0845                     l2403:	
  6249  0845  0C21               	rrf	_isdigit$1776,w
  6250  0846  0008               	return
  6251  0847                     __end_of_isdigit:	
  6252                           
  6253                           	psect	text18
  6254  092E                     __ptext18:	
  6255 ;; *************** function ___wmul *****************
  6256 ;; Defined at:
  6257 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  6258 ;; Parameters:    Size  Location     Type
  6259 ;;  multiplier      2    1[BANK0 ] unsigned int 
  6260 ;;  multiplicand    2    3[BANK0 ] unsigned int 
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;  product         2    5[BANK0 ] unsigned int 
  6263 ;; Return value:  Size  Location     Type
  6264 ;;                  2    1[BANK0 ] unsigned int 
  6265 ;; Registers used:
  6266 ;;		wreg, status,2, status,0
  6267 ;; Tracked objects:
  6268 ;;		On entry : 0/0
  6269 ;;		On exit  : 0/0
  6270 ;;		Unchanged: 0/0
  6271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6272 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6273 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6275 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6276 ;;Total ram usage:        6 bytes
  6277 ;; Hardware stack levels used:    1
  6278 ;; Hardware stack levels required when called:    7
  6279 ;; This function calls:
  6280 ;;		Nothing
  6281 ;; This function is called by:
  6282 ;;		_sprintf
  6283 ;; This function uses a non-reentrant model
  6284 ;;
  6285                           
  6286                           
  6287                           ;psect for function ___wmul
  6288  092E                     ___wmul:	
  6289                           
  6290                           ;incstack = 0
  6291                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6292  092E  0020               	movlb	0	; select bank0
  6293  092F  01A5               	clrf	___wmul@product
  6294  0930  01A6               	clrf	___wmul@product+1
  6295  0931                     l2409:	
  6296  0931  1C21               	btfss	___wmul@multiplier,0
  6297  0932  2937               	goto	l515
  6298  0933  0823               	movf	___wmul@multiplicand,w
  6299  0934  07A5               	addwf	___wmul@product,f
  6300  0935  0824               	movf	___wmul@multiplicand+1,w
  6301  0936  3DA6               	addwfc	___wmul@product+1,f
  6302  0937                     l515:	
  6303  0937  3001               	movlw	1
  6304  0938                     u1915:	
  6305  0938  35A3               	lslf	___wmul@multiplicand,f
  6306  0939  0DA4               	rlf	___wmul@multiplicand+1,f
  6307  093A  0B89               	decfsz	9,f
  6308  093B  2938               	goto	u1915
  6309  093C  3001               	movlw	1
  6310  093D                     u1925:	
  6311  093D  36A2               	lsrf	___wmul@multiplier+1,f
  6312  093E  0CA1               	rrf	___wmul@multiplier,f
  6313  093F  0B89               	decfsz	9,f
  6314  0940  293D               	goto	u1925
  6315  0941  0821               	movf	___wmul@multiplier,w
  6316  0942  0422               	iorwf	___wmul@multiplier+1,w
  6317  0943  1D03               	btfss	3,2
  6318  0944  2931               	goto	l2409
  6319  0945  0826               	movf	___wmul@product+1,w
  6320  0946  00A2               	movwf	?___wmul+1
  6321  0947  0825               	movf	___wmul@product,w
  6322  0948  00A1               	movwf	?___wmul
  6323  0949  0008               	return
  6324  094A                     __end_of___wmul:	
  6325                           
  6326                           	psect	text19
  6327  0CB2                     __ptext19:	
  6328 ;; *************** function ___llmod *****************
  6329 ;; Defined at:
  6330 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  6331 ;; Parameters:    Size  Location     Type
  6332 ;;  divisor         4   15[BANK0 ] unsigned long 
  6333 ;;  dividend        4   19[BANK0 ] unsigned long 
  6334 ;; Auto vars:     Size  Location     Type
  6335 ;;  counter         1   24[BANK0 ] unsigned char 
  6336 ;; Return value:  Size  Location     Type
  6337 ;;                  4   15[BANK0 ] unsigned long 
  6338 ;; Registers used:
  6339 ;;		wreg, status,2, status,0
  6340 ;; Tracked objects:
  6341 ;;		On entry : 0/0
  6342 ;;		On exit  : 0/0
  6343 ;;		Unchanged: 0/0
  6344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6345 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6346 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6347 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6348 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6349 ;;Total ram usage:       10 bytes
  6350 ;; Hardware stack levels used:    1
  6351 ;; Hardware stack levels required when called:    7
  6352 ;; This function calls:
  6353 ;;		Nothing
  6354 ;; This function is called by:
  6355 ;;		_sprintf
  6356 ;; This function uses a non-reentrant model
  6357 ;;
  6358                           
  6359                           
  6360                           ;psect for function ___llmod
  6361  0CB2                     ___llmod:	
  6362                           
  6363                           ;incstack = 0
  6364                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  6365  0CB2  0020               	movlb	0	; select bank0
  6366  0CB3  0832               	movf	___llmod@divisor+3,w
  6367  0CB4  0431               	iorwf	___llmod@divisor+2,w
  6368  0CB5  0430               	iorwf	___llmod@divisor+1,w
  6369  0CB6  042F               	iorwf	___llmod@divisor,w
  6370  0CB7  1903               	skipnz
  6371  0CB8  2CEC               	goto	l2531
  6372  0CB9  01B8               	clrf	___llmod@counter
  6373  0CBA  0AB8               	incf	___llmod@counter,f
  6374  0CBB                     l2521:	
  6375  0CBB  1BB2               	btfsc	___llmod@divisor+3,7
  6376  0CBC  2CC9               	goto	l2523
  6377  0CBD  3001               	movlw	1
  6378  0CBE                     u2255:	
  6379  0CBE  35AF               	lslf	___llmod@divisor,f
  6380  0CBF  0DB0               	rlf	___llmod@divisor+1,f
  6381  0CC0  0DB1               	rlf	___llmod@divisor+2,f
  6382  0CC1  0DB2               	rlf	___llmod@divisor+3,f
  6383  0CC2  0B89               	decfsz	9,f
  6384  0CC3  2CBE               	goto	u2255
  6385  0CC4  3001               	movlw	1
  6386  0CC5  00B7               	movwf	??___llmod
  6387  0CC6  0837               	movf	??___llmod,w
  6388  0CC7  07B8               	addwf	___llmod@counter,f
  6389  0CC8  2CBB               	goto	l2521
  6390  0CC9                     l2523:	
  6391  0CC9  0832               	movf	___llmod@divisor+3,w
  6392  0CCA  0236               	subwf	___llmod@dividend+3,w
  6393  0CCB  1D03               	skipz
  6394  0CCC  2CD7               	goto	u2275
  6395  0CCD  0831               	movf	___llmod@divisor+2,w
  6396  0CCE  0235               	subwf	___llmod@dividend+2,w
  6397  0CCF  1D03               	skipz
  6398  0CD0  2CD7               	goto	u2275
  6399  0CD1  0830               	movf	___llmod@divisor+1,w
  6400  0CD2  0234               	subwf	___llmod@dividend+1,w
  6401  0CD3  1D03               	skipz
  6402  0CD4  2CD7               	goto	u2275
  6403  0CD5  082F               	movf	___llmod@divisor,w
  6404  0CD6  0233               	subwf	___llmod@dividend,w
  6405  0CD7                     u2275:	
  6406  0CD7  1C03               	skipc
  6407  0CD8  2CE1               	goto	l2527
  6408  0CD9  082F               	movf	___llmod@divisor,w
  6409  0CDA  02B3               	subwf	___llmod@dividend,f
  6410  0CDB  0830               	movf	___llmod@divisor+1,w
  6411  0CDC  3BB4               	subwfb	___llmod@dividend+1,f
  6412  0CDD  0831               	movf	___llmod@divisor+2,w
  6413  0CDE  3BB5               	subwfb	___llmod@dividend+2,f
  6414  0CDF  0832               	movf	___llmod@divisor+3,w
  6415  0CE0  3BB6               	subwfb	___llmod@dividend+3,f
  6416  0CE1                     l2527:	
  6417  0CE1  3001               	movlw	1
  6418  0CE2                     u2285:	
  6419  0CE2  36B2               	lsrf	___llmod@divisor+3,f
  6420  0CE3  0CB1               	rrf	___llmod@divisor+2,f
  6421  0CE4  0CB0               	rrf	___llmod@divisor+1,f
  6422  0CE5  0CAF               	rrf	___llmod@divisor,f
  6423  0CE6  0B89               	decfsz	9,f
  6424  0CE7  2CE2               	goto	u2285
  6425  0CE8  3001               	movlw	1
  6426  0CE9  02B8               	subwf	___llmod@counter,f
  6427  0CEA  1D03               	btfss	3,2
  6428  0CEB  2CC9               	goto	l2523
  6429  0CEC                     l2531:	
  6430  0CEC  0836               	movf	___llmod@dividend+3,w
  6431  0CED  00B2               	movwf	?___llmod+3
  6432  0CEE  0835               	movf	___llmod@dividend+2,w
  6433  0CEF  00B1               	movwf	?___llmod+2
  6434  0CF0  0834               	movf	___llmod@dividend+1,w
  6435  0CF1  00B0               	movwf	?___llmod+1
  6436  0CF2  0833               	movf	___llmod@dividend,w
  6437  0CF3  00AF               	movwf	?___llmod
  6438  0CF4  0008               	return
  6439  0CF5                     __end_of___llmod:	
  6440                           
  6441                           	psect	text20
  6442  0DD4                     __ptext20:	
  6443 ;; *************** function ___lldiv *****************
  6444 ;; Defined at:
  6445 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  6446 ;; Parameters:    Size  Location     Type
  6447 ;;  divisor         4    1[BANK0 ] unsigned long 
  6448 ;;  dividend        4    5[BANK0 ] unsigned long 
  6449 ;; Auto vars:     Size  Location     Type
  6450 ;;  quotient        4   10[BANK0 ] unsigned long 
  6451 ;;  counter         1   14[BANK0 ] unsigned char 
  6452 ;; Return value:  Size  Location     Type
  6453 ;;                  4    1[BANK0 ] unsigned long 
  6454 ;; Registers used:
  6455 ;;		wreg, status,2, status,0
  6456 ;; Tracked objects:
  6457 ;;		On entry : 0/0
  6458 ;;		On exit  : 0/0
  6459 ;;		Unchanged: 0/0
  6460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6461 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6462 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6463 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6464 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6465 ;;Total ram usage:       14 bytes
  6466 ;; Hardware stack levels used:    1
  6467 ;; Hardware stack levels required when called:    7
  6468 ;; This function calls:
  6469 ;;		Nothing
  6470 ;; This function is called by:
  6471 ;;		_sprintf
  6472 ;; This function uses a non-reentrant model
  6473 ;;
  6474                           
  6475                           
  6476                           ;psect for function ___lldiv
  6477  0DD4                     ___lldiv:	
  6478                           
  6479                           ;incstack = 0
  6480                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6481  0DD4  3000               	movlw	0
  6482  0DD5  0020               	movlb	0	; select bank0
  6483  0DD6  00AD               	movwf	___lldiv@quotient+3
  6484  0DD7  3000               	movlw	0
  6485  0DD8  00AC               	movwf	___lldiv@quotient+2
  6486  0DD9  3000               	movlw	0
  6487  0DDA  00AB               	movwf	___lldiv@quotient+1
  6488  0DDB  3000               	movlw	0
  6489  0DDC  00AA               	movwf	___lldiv@quotient
  6490  0DDD  0824               	movf	___lldiv@divisor+3,w
  6491  0DDE  0423               	iorwf	___lldiv@divisor+2,w
  6492  0DDF  0422               	iorwf	___lldiv@divisor+1,w
  6493  0DE0  0421               	iorwf	___lldiv@divisor,w
  6494  0DE1  1903               	skipnz
  6495  0DE2  2E1E               	goto	l2441
  6496  0DE3  01AE               	clrf	___lldiv@counter
  6497  0DE4  0AAE               	incf	___lldiv@counter,f
  6498  0DE5                     l2427:	
  6499  0DE5  1BA4               	btfsc	___lldiv@divisor+3,7
  6500  0DE6  2DF3               	goto	l2429
  6501  0DE7  3001               	movlw	1
  6502  0DE8                     u1955:	
  6503  0DE8  35A1               	lslf	___lldiv@divisor,f
  6504  0DE9  0DA2               	rlf	___lldiv@divisor+1,f
  6505  0DEA  0DA3               	rlf	___lldiv@divisor+2,f
  6506  0DEB  0DA4               	rlf	___lldiv@divisor+3,f
  6507  0DEC  0B89               	decfsz	9,f
  6508  0DED  2DE8               	goto	u1955
  6509  0DEE  3001               	movlw	1
  6510  0DEF  00A9               	movwf	??___lldiv
  6511  0DF0  0829               	movf	??___lldiv,w
  6512  0DF1  07AE               	addwf	___lldiv@counter,f
  6513  0DF2  2DE5               	goto	l2427
  6514  0DF3                     l2429:	
  6515  0DF3  3001               	movlw	1
  6516  0DF4                     u1975:	
  6517  0DF4  35AA               	lslf	___lldiv@quotient,f
  6518  0DF5  0DAB               	rlf	___lldiv@quotient+1,f
  6519  0DF6  0DAC               	rlf	___lldiv@quotient+2,f
  6520  0DF7  0DAD               	rlf	___lldiv@quotient+3,f
  6521  0DF8  0B89               	decfsz	9,f
  6522  0DF9  2DF4               	goto	u1975
  6523  0DFA  0824               	movf	___lldiv@divisor+3,w
  6524  0DFB  0228               	subwf	___lldiv@dividend+3,w
  6525  0DFC  1D03               	skipz
  6526  0DFD  2E08               	goto	u1985
  6527  0DFE  0823               	movf	___lldiv@divisor+2,w
  6528  0DFF  0227               	subwf	___lldiv@dividend+2,w
  6529  0E00  1D03               	skipz
  6530  0E01  2E08               	goto	u1985
  6531  0E02  0822               	movf	___lldiv@divisor+1,w
  6532  0E03  0226               	subwf	___lldiv@dividend+1,w
  6533  0E04  1D03               	skipz
  6534  0E05  2E08               	goto	u1985
  6535  0E06  0821               	movf	___lldiv@divisor,w
  6536  0E07  0225               	subwf	___lldiv@dividend,w
  6537  0E08                     u1985:	
  6538  0E08  1C03               	skipc
  6539  0E09  2E13               	goto	l2437
  6540  0E0A  0821               	movf	___lldiv@divisor,w
  6541  0E0B  02A5               	subwf	___lldiv@dividend,f
  6542  0E0C  0822               	movf	___lldiv@divisor+1,w
  6543  0E0D  3BA6               	subwfb	___lldiv@dividend+1,f
  6544  0E0E  0823               	movf	___lldiv@divisor+2,w
  6545  0E0F  3BA7               	subwfb	___lldiv@dividend+2,f
  6546  0E10  0824               	movf	___lldiv@divisor+3,w
  6547  0E11  3BA8               	subwfb	___lldiv@dividend+3,f
  6548  0E12  142A               	bsf	___lldiv@quotient,0
  6549  0E13                     l2437:	
  6550  0E13  3001               	movlw	1
  6551  0E14                     u1995:	
  6552  0E14  36A4               	lsrf	___lldiv@divisor+3,f
  6553  0E15  0CA3               	rrf	___lldiv@divisor+2,f
  6554  0E16  0CA2               	rrf	___lldiv@divisor+1,f
  6555  0E17  0CA1               	rrf	___lldiv@divisor,f
  6556  0E18  0B89               	decfsz	9,f
  6557  0E19  2E14               	goto	u1995
  6558  0E1A  3001               	movlw	1
  6559  0E1B  02AE               	subwf	___lldiv@counter,f
  6560  0E1C  1D03               	btfss	3,2
  6561  0E1D  2DF3               	goto	l2429
  6562  0E1E                     l2441:	
  6563  0E1E  082D               	movf	___lldiv@quotient+3,w
  6564  0E1F  00A4               	movwf	?___lldiv+3
  6565  0E20  082C               	movf	___lldiv@quotient+2,w
  6566  0E21  00A3               	movwf	?___lldiv+2
  6567  0E22  082B               	movf	___lldiv@quotient+1,w
  6568  0E23  00A2               	movwf	?___lldiv+1
  6569  0E24  082A               	movf	___lldiv@quotient,w
  6570  0E25  00A1               	movwf	?___lldiv
  6571  0E26  0008               	return
  6572  0E27                     __end_of___lldiv:	
  6573                           
  6574                           	psect	text21
  6575  0AD4                     __ptext21:	
  6576 ;; *************** function ___lltoft *****************
  6577 ;; Defined at:
  6578 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  6579 ;; Parameters:    Size  Location     Type
  6580 ;;  c               4    9[BANK0 ] unsigned long 
  6581 ;; Auto vars:     Size  Location     Type
  6582 ;;  exp             1   14[BANK0 ] unsigned char 
  6583 ;; Return value:  Size  Location     Type
  6584 ;;                  3    9[BANK0 ] float 
  6585 ;; Registers used:
  6586 ;;		wreg, status,2, status,0, pclath, cstack
  6587 ;; Tracked objects:
  6588 ;;		On entry : 0/0
  6589 ;;		On exit  : 0/0
  6590 ;;		Unchanged: 0/0
  6591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6592 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6593 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6594 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6595 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6596 ;;Total ram usage:        6 bytes
  6597 ;; Hardware stack levels used:    1
  6598 ;; Hardware stack levels required when called:    8
  6599 ;; This function calls:
  6600 ;;		___ftpack
  6601 ;; This function is called by:
  6602 ;;		_ftoa
  6603 ;; This function uses a non-reentrant model
  6604 ;;
  6605                           
  6606                           
  6607                           ;psect for function ___lltoft
  6608  0AD4                     ___lltoft:	
  6609                           
  6610                           ;incstack = 0
  6611                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6612  0AD4  308E               	movlw	142
  6613  0AD5  0020               	movlb	0	; select bank0
  6614  0AD6  00AD               	movwf	??___lltoft
  6615  0AD7  082D               	movf	??___lltoft,w
  6616  0AD8  00AE               	movwf	___lltoft@exp
  6617  0AD9                     l2857:	
  6618  0AD9  30FF               	movlw	255
  6619  0ADA  052C               	andwf	___lltoft@c+3,w
  6620  0ADB  1903               	btfsc	3,2
  6621  0ADC  2AE9               	goto	l2859
  6622  0ADD  3001               	movlw	1
  6623  0ADE                     u2775:	
  6624  0ADE  36AC               	lsrf	___lltoft@c+3,f
  6625  0ADF  0CAB               	rrf	___lltoft@c+2,f
  6626  0AE0  0CAA               	rrf	___lltoft@c+1,f
  6627  0AE1  0CA9               	rrf	___lltoft@c,f
  6628  0AE2  0B89               	decfsz	9,f
  6629  0AE3  2ADE               	goto	u2775
  6630  0AE4  3001               	movlw	1
  6631  0AE5  00AD               	movwf	??___lltoft
  6632  0AE6  082D               	movf	??___lltoft,w
  6633  0AE7  07AE               	addwf	___lltoft@exp,f
  6634  0AE8  2AD9               	goto	l2857
  6635  0AE9                     l2859:	
  6636  0AE9  0829               	movf	___lltoft@c,w
  6637  0AEA  00A1               	movwf	___ftpack@arg
  6638  0AEB  082A               	movf	___lltoft@c+1,w
  6639  0AEC  00A2               	movwf	___ftpack@arg+1
  6640  0AED  082B               	movf	___lltoft@c+2,w
  6641  0AEE  00A3               	movwf	___ftpack@arg+2
  6642  0AEF  082E               	movf	___lltoft@exp,w
  6643  0AF0  00AD               	movwf	??___lltoft
  6644  0AF1  082D               	movf	??___lltoft,w
  6645  0AF2  00A4               	movwf	___ftpack@exp
  6646  0AF3  01A5               	clrf	___ftpack@sign
  6647  0AF4  318E  267D         	fcall	___ftpack
  6648  0AF6  0020               	movlb	0	; select bank0
  6649  0AF7  0821               	movf	?___ftpack,w
  6650  0AF8  00A9               	movwf	?___lltoft
  6651  0AF9  0822               	movf	?___ftpack+1,w
  6652  0AFA  00AA               	movwf	?___lltoft+1
  6653  0AFB  0823               	movf	?___ftpack+2,w
  6654  0AFC  00AB               	movwf	?___lltoft+2
  6655  0AFD  0008               	return
  6656  0AFE                     __end_of___lltoft:	
  6657                           
  6658                           	psect	text22
  6659  0EE2                     __ptext22:	
  6660 ;; *************** function ___fttol *****************
  6661 ;; Defined at:
  6662 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  6663 ;; Parameters:    Size  Location     Type
  6664 ;;  f1              3   25[BANK0 ] float 
  6665 ;; Auto vars:     Size  Location     Type
  6666 ;;  lval            4   34[BANK0 ] unsigned long 
  6667 ;;  exp1            1   38[BANK0 ] unsigned char 
  6668 ;;  sign1           1   33[BANK0 ] unsigned char 
  6669 ;; Return value:  Size  Location     Type
  6670 ;;                  4   25[BANK0 ] long 
  6671 ;; Registers used:
  6672 ;;		wreg, status,2, status,0
  6673 ;; Tracked objects:
  6674 ;;		On entry : 0/0
  6675 ;;		On exit  : 0/0
  6676 ;;		Unchanged: 0/0
  6677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6678 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6679 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6680 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6681 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6682 ;;Total ram usage:       14 bytes
  6683 ;; Hardware stack levels used:    1
  6684 ;; Hardware stack levels required when called:    7
  6685 ;; This function calls:
  6686 ;;		Nothing
  6687 ;; This function is called by:
  6688 ;;		_ftoa
  6689 ;; This function uses a non-reentrant model
  6690 ;;
  6691                           
  6692                           
  6693                           ;psect for function ___fttol
  6694  0EE2                     ___fttol:	
  6695                           
  6696                           ;incstack = 0
  6697                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6698  0EE2  0020               	movlb	0	; select bank0
  6699  0EE3  0839               	movf	___fttol@f1,w
  6700  0EE4  00BD               	movwf	??___fttol
  6701  0EE5  083A               	movf	___fttol@f1+1,w
  6702  0EE6  00BE               	movwf	??___fttol+1
  6703  0EE7  083B               	movf	___fttol@f1+2,w
  6704  0EE8  00BF               	movwf	??___fttol+2
  6705  0EE9  1003               	clrc
  6706  0EEA  0D3E               	rlf	??___fttol+1,w
  6707  0EEB  0D3F               	rlf	??___fttol+2,w
  6708  0EEC  00C0               	movwf	??___fttol+3
  6709  0EED  0840               	movf	??___fttol+3,w
  6710  0EEE  00C6               	movwf	___fttol@exp1
  6711  0EEF  0846               	movf	___fttol@exp1,w
  6712  0EF0  1D03               	btfss	3,2
  6713  0EF1  2EFB               	goto	l2817
  6714  0EF2  3000               	movlw	0
  6715  0EF3  00BC               	movwf	?___fttol+3
  6716  0EF4  3000               	movlw	0
  6717  0EF5  00BB               	movwf	?___fttol+2
  6718  0EF6  3000               	movlw	0
  6719  0EF7  00BA               	movwf	?___fttol+1
  6720  0EF8  3000               	movlw	0
  6721  0EF9  00B9               	movwf	?___fttol
  6722  0EFA  0008               	return
  6723  0EFB                     l2817:	
  6724  0EFB  0839               	movf	___fttol@f1,w
  6725  0EFC  00BD               	movwf	??___fttol
  6726  0EFD  083A               	movf	___fttol@f1+1,w
  6727  0EFE  00BE               	movwf	??___fttol+1
  6728  0EFF  083B               	movf	___fttol@f1+2,w
  6729  0F00  00BF               	movwf	??___fttol+2
  6730  0F01  3017               	movlw	23
  6731  0F02                     u2685:	
  6732  0F02  36BF               	lsrf	??___fttol+2,f
  6733  0F03  0CBE               	rrf	??___fttol+1,f
  6734  0F04  0CBD               	rrf	??___fttol,f
  6735  0F05  0B89               	decfsz	9,f
  6736  0F06  2F02               	goto	u2685
  6737  0F07  083D               	movf	??___fttol,w
  6738  0F08  00C0               	movwf	??___fttol+3
  6739  0F09  0840               	movf	??___fttol+3,w
  6740  0F0A  00C1               	movwf	___fttol@sign1
  6741  0F0B  17BA               	bsf	___fttol@f1+1,7
  6742  0F0C  30FF               	movlw	255
  6743  0F0D  05B9               	andwf	___fttol@f1,f
  6744  0F0E  30FF               	movlw	255
  6745  0F0F  05BA               	andwf	___fttol@f1+1,f
  6746  0F10  3000               	movlw	0
  6747  0F11  05BB               	andwf	___fttol@f1+2,f
  6748  0F12  0839               	movf	___fttol@f1,w
  6749  0F13  00C2               	movwf	___fttol@lval
  6750  0F14  083A               	movf	___fttol@f1+1,w
  6751  0F15  00C3               	movwf	___fttol@lval+1
  6752  0F16  083B               	movf	___fttol@f1+2,w
  6753  0F17  00C4               	movwf	___fttol@lval+2
  6754  0F18  01C5               	clrf	___fttol@lval+3
  6755  0F19  308E               	movlw	142
  6756  0F1A  02C6               	subwf	___fttol@exp1,f
  6757  0F1B  1FC6               	btfss	___fttol@exp1,7
  6758  0F1C  2F39               	goto	l2837
  6759  0F1D  0846               	movf	___fttol@exp1,w
  6760  0F1E  3A80               	xorlw	128
  6761  0F1F  3E8F               	addlw	143
  6762  0F20  1803               	skipnc
  6763  0F21  2F2B               	goto	l2835
  6764  0F22  3000               	movlw	0
  6765  0F23  00BC               	movwf	?___fttol+3
  6766  0F24  3000               	movlw	0
  6767  0F25  00BB               	movwf	?___fttol+2
  6768  0F26  3000               	movlw	0
  6769  0F27  00BA               	movwf	?___fttol+1
  6770  0F28  3000               	movlw	0
  6771  0F29  00B9               	movwf	?___fttol
  6772  0F2A  0008               	return
  6773  0F2B                     l2835:	
  6774  0F2B  3001               	movlw	1
  6775  0F2C                     u2715:	
  6776  0F2C  36C5               	lsrf	___fttol@lval+3,f
  6777  0F2D  0CC4               	rrf	___fttol@lval+2,f
  6778  0F2E  0CC3               	rrf	___fttol@lval+1,f
  6779  0F2F  0CC2               	rrf	___fttol@lval,f
  6780  0F30  0B89               	decfsz	9,f
  6781  0F31  2F2C               	goto	u2715
  6782  0F32  3001               	movlw	1
  6783  0F33  00BD               	movwf	??___fttol
  6784  0F34  083D               	movf	??___fttol,w
  6785  0F35  07C6               	addwf	___fttol@exp1,f
  6786  0F36  1903               	btfsc	3,2
  6787  0F37  2F52               	goto	l2845
  6788  0F38  2F2B               	goto	l2835
  6789  0F39                     l2837:	
  6790  0F39  3018               	movlw	24
  6791  0F3A  0246               	subwf	___fttol@exp1,w
  6792  0F3B  1C03               	skipc
  6793  0F3C  2F4F               	goto	l809
  6794  0F3D  3000               	movlw	0
  6795  0F3E  00BC               	movwf	?___fttol+3
  6796  0F3F  3000               	movlw	0
  6797  0F40  00BB               	movwf	?___fttol+2
  6798  0F41  3000               	movlw	0
  6799  0F42  00BA               	movwf	?___fttol+1
  6800  0F43  3000               	movlw	0
  6801  0F44  00B9               	movwf	?___fttol
  6802  0F45  0008               	return
  6803  0F46                     l2843:	
  6804  0F46  3001               	movlw	1
  6805  0F47                     u2745:	
  6806  0F47  35C2               	lslf	___fttol@lval,f
  6807  0F48  0DC3               	rlf	___fttol@lval+1,f
  6808  0F49  0DC4               	rlf	___fttol@lval+2,f
  6809  0F4A  0DC5               	rlf	___fttol@lval+3,f
  6810  0F4B  0B89               	decfsz	9,f
  6811  0F4C  2F47               	goto	u2745
  6812  0F4D  3001               	movlw	1
  6813  0F4E  02C6               	subwf	___fttol@exp1,f
  6814  0F4F                     l809:	
  6815  0F4F  0846               	movf	___fttol@exp1,w
  6816  0F50  1D03               	btfss	3,2
  6817  0F51  2F46               	goto	l2843
  6818  0F52                     l2845:	
  6819  0F52  0841               	movf	___fttol@sign1,w
  6820  0F53  1903               	btfsc	3,2
  6821  0F54  2F60               	goto	l2849
  6822  0F55  09C2               	comf	___fttol@lval,f
  6823  0F56  09C3               	comf	___fttol@lval+1,f
  6824  0F57  09C4               	comf	___fttol@lval+2,f
  6825  0F58  09C5               	comf	___fttol@lval+3,f
  6826  0F59  0AC2               	incf	___fttol@lval,f
  6827  0F5A  1903               	skipnz
  6828  0F5B  0AC3               	incf	___fttol@lval+1,f
  6829  0F5C  1903               	skipnz
  6830  0F5D  0AC4               	incf	___fttol@lval+2,f
  6831  0F5E  1903               	skipnz
  6832  0F5F  0AC5               	incf	___fttol@lval+3,f
  6833  0F60                     l2849:	
  6834  0F60  0845               	movf	___fttol@lval+3,w
  6835  0F61  00BC               	movwf	?___fttol+3
  6836  0F62  0844               	movf	___fttol@lval+2,w
  6837  0F63  00BB               	movwf	?___fttol+2
  6838  0F64  0843               	movf	___fttol@lval+1,w
  6839  0F65  00BA               	movwf	?___fttol+1
  6840  0F66  0842               	movf	___fttol@lval,w
  6841  0F67  00B9               	movwf	?___fttol
  6842  0F68  0008               	return
  6843  0F69                     __end_of___fttol:	
  6844                           
  6845                           	psect	text23
  6846  0982                     __ptext23:	
  6847 ;; *************** function ___ftsub *****************
  6848 ;; Defined at:
  6849 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  6850 ;; Parameters:    Size  Location     Type
  6851 ;;  f2              3   30[BANK0 ] float 
  6852 ;;  f1              3   33[BANK0 ] float 
  6853 ;; Auto vars:     Size  Location     Type
  6854 ;;		None
  6855 ;; Return value:  Size  Location     Type
  6856 ;;                  3   30[BANK0 ] float 
  6857 ;; Registers used:
  6858 ;;		wreg, status,2, status,0, pclath, cstack
  6859 ;; Tracked objects:
  6860 ;;		On entry : 0/0
  6861 ;;		On exit  : 0/0
  6862 ;;		Unchanged: 0/0
  6863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6864 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6867 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6868 ;;Total ram usage:        6 bytes
  6869 ;; Hardware stack levels used:    1
  6870 ;; Hardware stack levels required when called:    9
  6871 ;; This function calls:
  6872 ;;		___ftadd
  6873 ;; This function is called by:
  6874 ;;		_ftoa
  6875 ;; This function uses a non-reentrant model
  6876 ;;
  6877                           
  6878                           
  6879                           ;psect for function ___ftsub
  6880  0982                     ___ftsub:	
  6881                           
  6882                           ;incstack = 0
  6883                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6884  0982  0020               	movlb	0	; select bank0
  6885  0983  0840               	movf	___ftsub@f2+2,w
  6886  0984  043F               	iorwf	___ftsub@f2+1,w
  6887  0985  043E               	iorwf	___ftsub@f2,w
  6888  0986  1903               	skipnz
  6889  0987  298A               	goto	l2807
  6890  0988  3080               	movlw	128
  6891  0989  06C0               	xorwf	___ftsub@f2+2,f
  6892  098A                     l2807:	
  6893  098A  0841               	movf	___ftsub@f1,w
  6894  098B  00B1               	movwf	___ftadd@f1
  6895  098C  0842               	movf	___ftsub@f1+1,w
  6896  098D  00B2               	movwf	___ftadd@f1+1
  6897  098E  0843               	movf	___ftsub@f1+2,w
  6898  098F  00B3               	movwf	___ftadd@f1+2
  6899  0990  083E               	movf	___ftsub@f2,w
  6900  0991  00B4               	movwf	___ftadd@f2
  6901  0992  083F               	movf	___ftsub@f2+1,w
  6902  0993  00B5               	movwf	___ftadd@f2+1
  6903  0994  0840               	movf	___ftsub@f2+2,w
  6904  0995  00B6               	movwf	___ftadd@f2+2
  6905  0996  3182  22FC         	fcall	___ftadd
  6906  0998  0020               	movlb	0	; select bank0
  6907  0999  0831               	movf	?___ftadd,w
  6908  099A  00BE               	movwf	?___ftsub
  6909  099B  0832               	movf	?___ftadd+1,w
  6910  099C  00BF               	movwf	?___ftsub+1
  6911  099D  0833               	movf	?___ftadd+2,w
  6912  099E  00C0               	movwf	?___ftsub+2
  6913  099F  0008               	return
  6914  09A0                     __end_of___ftsub:	
  6915                           
  6916                           	psect	text24
  6917  082F                     __ptext24:	
  6918 ;; *************** function ___ftneg *****************
  6919 ;; Defined at:
  6920 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  6921 ;; Parameters:    Size  Location     Type
  6922 ;;  f1              3    1[BANK0 ] float 
  6923 ;; Auto vars:     Size  Location     Type
  6924 ;;		None
  6925 ;; Return value:  Size  Location     Type
  6926 ;;                  3    1[BANK0 ] float 
  6927 ;; Registers used:
  6928 ;;		wreg
  6929 ;; Tracked objects:
  6930 ;;		On entry : 0/0
  6931 ;;		On exit  : 0/0
  6932 ;;		Unchanged: 0/0
  6933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6934 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6937 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6938 ;;Total ram usage:        3 bytes
  6939 ;; Hardware stack levels used:    1
  6940 ;; Hardware stack levels required when called:    7
  6941 ;; This function calls:
  6942 ;;		Nothing
  6943 ;; This function is called by:
  6944 ;;		_ftoa
  6945 ;; This function uses a non-reentrant model
  6946 ;;
  6947                           
  6948                           
  6949                           ;psect for function ___ftneg
  6950  082F                     ___ftneg:	
  6951                           
  6952                           ;incstack = 0
  6953                           ; Regs used in ___ftneg: [wreg]
  6954  082F  0020               	movlb	0	; select bank0
  6955  0830  0823               	movf	___ftneg@f1+2,w
  6956  0831  0422               	iorwf	___ftneg@f1+1,w
  6957  0832  0421               	iorwf	___ftneg@f1,w
  6958  0833  1903               	skipnz
  6959  0834  0008               	return
  6960  0835  3080               	movlw	128
  6961  0836  06A3               	xorwf	___ftneg@f1+2,f
  6962  0837  0008               	return
  6963  0838                     __end_of___ftneg:	
  6964                           
  6965                           	psect	text25
  6966  0C37                     __ptext25:	
  6967 ;; *************** function ___ftge *****************
  6968 ;; Defined at:
  6969 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  6970 ;; Parameters:    Size  Location     Type
  6971 ;;  ff1             3    1[BANK0 ] float 
  6972 ;;  ff2             3    4[BANK0 ] float 
  6973 ;; Auto vars:     Size  Location     Type
  6974 ;;		None
  6975 ;; Return value:  Size  Location     Type
  6976 ;;		None               void
  6977 ;; Registers used:
  6978 ;;		wreg, status,2, status,0
  6979 ;; Tracked objects:
  6980 ;;		On entry : 0/0
  6981 ;;		On exit  : 0/0
  6982 ;;		Unchanged: 0/0
  6983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6984 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6986 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6987 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6988 ;;Total ram usage:        9 bytes
  6989 ;; Hardware stack levels used:    1
  6990 ;; Hardware stack levels required when called:    7
  6991 ;; This function calls:
  6992 ;;		Nothing
  6993 ;; This function is called by:
  6994 ;;		_ftoa
  6995 ;; This function uses a non-reentrant model
  6996 ;;
  6997                           
  6998                           
  6999                           ;psect for function ___ftge
  7000  0C37                     ___ftge:	
  7001                           
  7002                           ;incstack = 0
  7003                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7004  0C37  0020               	movlb	0	; select bank0
  7005  0C38  1FA3               	btfss	___ftge@ff1+2,7
  7006  0C39  2C4E               	goto	l2729
  7007  0C3A  0921               	comf	___ftge@ff1,w
  7008  0C3B  00A7               	movwf	??___ftge
  7009  0C3C  0922               	comf	___ftge@ff1+1,w
  7010  0C3D  00A8               	movwf	??___ftge+1
  7011  0C3E  0923               	comf	___ftge@ff1+2,w
  7012  0C3F  00A9               	movwf	??___ftge+2
  7013  0C40  0AA7               	incf	??___ftge,f
  7014  0C41  1903               	skipnz
  7015  0C42  0AA8               	incf	??___ftge+1,f
  7016  0C43  1903               	skipnz
  7017  0C44  0AA9               	incf	??___ftge+2,f
  7018  0C45  3000               	movlw	0
  7019  0C46  0727               	addwf	??___ftge,w
  7020  0C47  00A1               	movwf	___ftge@ff1
  7021  0C48  3000               	movlw	0
  7022  0C49  3D28               	addwfc	??___ftge+1,w
  7023  0C4A  00A2               	movwf	___ftge@ff1+1
  7024  0C4B  3080               	movlw	128
  7025  0C4C  3D29               	addwfc	??___ftge+2,w
  7026  0C4D  00A3               	movwf	___ftge@ff1+2
  7027  0C4E                     l2729:	
  7028  0C4E  1FA6               	btfss	___ftge@ff2+2,7
  7029  0C4F  2C64               	goto	l2733
  7030  0C50  0924               	comf	___ftge@ff2,w
  7031  0C51  00A7               	movwf	??___ftge
  7032  0C52  0925               	comf	___ftge@ff2+1,w
  7033  0C53  00A8               	movwf	??___ftge+1
  7034  0C54  0926               	comf	___ftge@ff2+2,w
  7035  0C55  00A9               	movwf	??___ftge+2
  7036  0C56  0AA7               	incf	??___ftge,f
  7037  0C57  1903               	skipnz
  7038  0C58  0AA8               	incf	??___ftge+1,f
  7039  0C59  1903               	skipnz
  7040  0C5A  0AA9               	incf	??___ftge+2,f
  7041  0C5B  3000               	movlw	0
  7042  0C5C  0727               	addwf	??___ftge,w
  7043  0C5D  00A4               	movwf	___ftge@ff2
  7044  0C5E  3000               	movlw	0
  7045  0C5F  3D28               	addwfc	??___ftge+1,w
  7046  0C60  00A5               	movwf	___ftge@ff2+1
  7047  0C61  3080               	movlw	128
  7048  0C62  3D29               	addwfc	??___ftge+2,w
  7049  0C63  00A6               	movwf	___ftge@ff2+2
  7050  0C64                     l2733:	
  7051  0C64  3080               	movlw	128
  7052  0C65  06A3               	xorwf	___ftge@ff1+2,f
  7053  0C66  3080               	movlw	128
  7054  0C67  06A6               	xorwf	___ftge@ff2+2,f
  7055  0C68  0826               	movf	___ftge@ff2+2,w
  7056  0C69  0223               	subwf	___ftge@ff1+2,w
  7057  0C6A  1D03               	skipz
  7058  0C6B  0008               	return
  7059  0C6C  0825               	movf	___ftge@ff2+1,w
  7060  0C6D  0222               	subwf	___ftge@ff1+1,w
  7061  0C6E  1D03               	skipz
  7062  0C6F  0008               	return
  7063  0C70  0824               	movf	___ftge@ff2,w
  7064  0C71  0221               	subwf	___ftge@ff1,w
  7065  0C72  0008               	return
  7066  0C73                     __end_of___ftge:	
  7067                           
  7068                           	psect	text26
  7069  03F2                     __ptext26:	
  7070 ;; *************** function _nrf24l01SendPacket *****************
  7071 ;; Defined at:
  7072 ;;		line 170 in file "nrf24l01.c"
  7073 ;; Parameters:    Size  Location     Type
  7074 ;;  Packet          1    wreg     PTR struct .
  7075 ;;		 -> main@packet(33), loop@packet(33), 
  7076 ;; Auto vars:     Size  Location     Type
  7077 ;;  Packet          1   10[BANK0 ] PTR struct .
  7078 ;;		 -> main@packet(33), loop@packet(33), 
  7079 ;;  i               1   11[BANK0 ] unsigned char 
  7080 ;; Return value:  Size  Location     Type
  7081 ;;                  1    wreg      void 
  7082 ;; Registers used:
  7083 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7084 ;; Tracked objects:
  7085 ;;		On entry : 0/0
  7086 ;;		On exit  : 0/0
  7087 ;;		Unchanged: 0/0
  7088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7090 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7091 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7092 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7093 ;;Total ram usage:        4 bytes
  7094 ;; Hardware stack levels used:    1
  7095 ;; Hardware stack levels required when called:   11
  7096 ;; This function calls:
  7097 ;;		_enableInterrupts
  7098 ;;		_nrf24l01CEHigh
  7099 ;;		_nrf24l01CELow
  7100 ;;		_nrf24l01ChangeTXPower
  7101 ;;		_nrf24l01SPIEnd
  7102 ;;		_nrf24l01SPISend
  7103 ;;		_nrf24l01SPIStart
  7104 ;;		_nrf24l01SetRXMode
  7105 ;;		_strlen
  7106 ;; This function is called by:
  7107 ;;		_loop
  7108 ;;		_main
  7109 ;;		_nrf24l01SendACK
  7110 ;; This function uses a non-reentrant model
  7111 ;;
  7112                           
  7113                           
  7114                           ;psect for function _nrf24l01SendPacket
  7115  03F2                     _nrf24l01SendPacket:	
  7116                           
  7117                           ;incstack = 0
  7118                           ; Regs used in _nrf24l01SendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7119                           ;nrf24l01SendPacket@Packet stored from wreg
  7120  03F2  0020               	movlb	0	; select bank0
  7121  03F3  00AA               	movwf	nrf24l01SendPacket@Packet
  7122                           
  7123                           ;nrf24l01.c: 172: TXPacket = Packet;
  7124  03F4  082A               	movf	nrf24l01SendPacket@Packet,w
  7125  03F5  00A8               	movwf	??_nrf24l01SendPacket
  7126  03F6  0828               	movf	??_nrf24l01SendPacket,w
  7127  03F7  0021               	movlb	1	; select bank1
  7128  03F8  00ED               	movwf	_TXPacket^(0+128)
  7129  03F9                     l333:	
  7130                           ;nrf24l01.c: 175: unsigned char i;;nrf24l01.c: 179: RESEND:
  7131                           
  7132                           
  7133                           ;nrf24l01.c: 182: i = 0xFF;
  7134  03F9  30FF               	movlw	255
  7135  03FA  0020               	movlb	0	; select bank0
  7136  03FB  00A8               	movwf	??_nrf24l01SendPacket
  7137  03FC  0828               	movf	??_nrf24l01SendPacket,w
  7138  03FD  00AB               	movwf	nrf24l01SendPacket@i
  7139  03FE                     l3709:	
  7140                           ;nrf24l01.c: 183: while (nrf24l01.TXBusy){
  7141                           
  7142  03FE  0020               	movlb	0	; select bank0
  7143  03FF  1C6E               	btfss	_nrf24l01,0	;volatile
  7144  0400  2C0A               	goto	l337
  7145                           
  7146                           ;nrf24l01.c: 184: if (!--i) {
  7147  0401  3001               	movlw	1
  7148  0402  02AB               	subwf	nrf24l01SendPacket@i,f
  7149  0403  1903               	btfsc	3,2
  7150  0404  2BF9               	goto	l333
  7151                           
  7152                           ;nrf24l01.c: 186: };nrf24l01.c: 187: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  7153                           
  7154                           ;nrf24l01.c: 185: goto RESEND;
  7155  0405  3085               	movlw	133
  7156  0406                     u3737:	
  7157  0406  0B89               	decfsz	9,f
  7158  0407  2C06               	goto	u3737
  7159  0408  0000               	nop
  7160  0409  2BFE               	goto	l3709
  7161  040A                     l337:	
  7162                           
  7163                           ;nrf24l01.c: 188: };nrf24l01.c: 191: nrf24l01.TXBusy = 1;
  7164  040A  146E               	bsf	_nrf24l01,0	;volatile
  7165                           
  7166                           ;nrf24l01.c: 194: enableInterrupts(0);
  7167  040B  3000               	movlw	0
  7168  040C  3188  201F  3183   	fcall	_enableInterrupts
  7169                           
  7170                           ;nrf24l01.c: 197: nrf24l01SetRXMode(0);
  7171  040F  3000               	movlw	0
  7172  0410  318B  23FC  3183   	fcall	_nrf24l01SetRXMode
  7173                           
  7174                           ;nrf24l01.c: 200: nrf24l01SPIStart();
  7175  0413  3188  2027  3183   	fcall	_nrf24l01SPIStart
  7176                           
  7177                           ;nrf24l01.c: 203: nrf24l01SPISend((unsigned) 0b10110000);
  7178  0416  30B0               	movlw	176
  7179  0417  3187  27F2  3183   	fcall	_nrf24l01SPISend
  7180                           
  7181                           ;nrf24l01.c: 205: nrf24l01SPISend(TXPacket->packetData.byte);
  7182  041A  0021               	movlb	1	; select bank1
  7183  041B  086D               	movf	_TXPacket^(0+128),w
  7184  041C  0086               	movwf	6
  7185  041D  0187               	clrf	7
  7186  041E  0801               	movf	1,w
  7187  041F  3187  27F2  3183   	fcall	_nrf24l01SPISend
  7188                           
  7189                           ;nrf24l01.c: 208: for (i = 0; (i < strlen(TXPacket->Message)) && (i < sizeof(TXPacket->M
      +                          essage)); i++){
  7190  0422  0020               	movlb	0	; select bank0
  7191  0423  01AB               	clrf	nrf24l01SendPacket@i
  7192  0424  2C37               	goto	l3721
  7193  0425                     l3717:	
  7194                           
  7195                           ;nrf24l01.c: 209: nrf24l01SPISend(TXPacket->Message[i]);
  7196  0425  082B               	movf	nrf24l01SendPacket@i,w
  7197  0426  3E01               	addlw	1
  7198  0427  0021               	movlb	1	; select bank1
  7199  0428  076D               	addwf	_TXPacket^(0+128),w
  7200  0429  0020               	movlb	0	; select bank0
  7201  042A  00A8               	movwf	??_nrf24l01SendPacket
  7202  042B  0828               	movf	??_nrf24l01SendPacket,w
  7203  042C  0086               	movwf	6
  7204  042D  0187               	clrf	7
  7205  042E  0801               	movf	1,w
  7206  042F  3187  27F2  3183   	fcall	_nrf24l01SPISend
  7207  0432  3001               	movlw	1
  7208  0433  0020               	movlb	0	; select bank0
  7209  0434  00A8               	movwf	??_nrf24l01SendPacket
  7210  0435  0828               	movf	??_nrf24l01SendPacket,w
  7211  0436  07AB               	addwf	nrf24l01SendPacket@i,f
  7212  0437                     l3721:	
  7213  0437  0021               	movlb	1	; select bank1
  7214  0438  086D               	movf	_TXPacket^(0+128),w
  7215  0439  3E01               	addlw	1
  7216  043A  0020               	movlb	0	; select bank0
  7217  043B  00A1               	movwf	strlen@s
  7218  043C  39FF               	andlw	255
  7219  043D  1D03               	skipz
  7220  043E  3000               	movlw	0
  7221  043F  00A2               	movwf	strlen@s+1
  7222  0440  3189  21A0  3183   	fcall	_strlen
  7223  0443  0020               	movlb	0	; select bank0
  7224  0444  082B               	movf	nrf24l01SendPacket@i,w
  7225  0445  00A8               	movwf	??_nrf24l01SendPacket
  7226  0446  01A9               	clrf	??_nrf24l01SendPacket+1
  7227  0447  0822               	movf	?_strlen+1,w
  7228  0448  0229               	subwf	??_nrf24l01SendPacket+1,w
  7229  0449  1D03               	skipz
  7230  044A  2C4D               	goto	u3545
  7231  044B  0821               	movf	?_strlen,w
  7232  044C  0228               	subwf	??_nrf24l01SendPacket,w
  7233  044D                     u3545:	
  7234  044D  1803               	skipnc
  7235  044E  2C53               	goto	l3725
  7236  044F  3020               	movlw	32
  7237  0450  022B               	subwf	nrf24l01SendPacket@i,w
  7238  0451  1C03               	skipc
  7239  0452  2C25               	goto	l3717
  7240  0453                     l3725:	
  7241                           
  7242                           ;nrf24l01.c: 210: };nrf24l01.c: 213: nrf24l01SPIEnd();
  7243  0453  3188  2018  3183   	fcall	_nrf24l01SPIEnd
  7244                           
  7245                           ;nrf24l01.c: 216: nrf24l01CEHigh();
  7246  0456  3188  2006  3183   	fcall	_nrf24l01CEHigh
  7247                           
  7248                           ;nrf24l01.c: 217: _delay((unsigned long)((20)*(16000000/4000000.0)));
  7249  0459  301A               	movlw	26
  7250  045A                     u3747:	
  7251  045A  0B89               	decfsz	9,f
  7252  045B  2C5A               	goto	u3747
  7253  045C  3200               	nop2
  7254                           
  7255                           ;nrf24l01.c: 218: nrf24l01CELow();
  7256  045D  3188  2009  3183   	fcall	_nrf24l01CELow
  7257                           
  7258                           ;nrf24l01.c: 221: enableInterrupts(1);
  7259  0460  3001               	movlw	1
  7260  0461  3188  201F  3183   	fcall	_enableInterrupts
  7261                           
  7262                           ;nrf24l01.c: 224: i = 0xFF;
  7263  0464  30FF               	movlw	255
  7264  0465  0020               	movlb	0	; select bank0
  7265  0466  00A8               	movwf	??_nrf24l01SendPacket
  7266  0467  0828               	movf	??_nrf24l01SendPacket,w
  7267  0468  00AB               	movwf	nrf24l01SendPacket@i
  7268  0469                     l3739:	
  7269                           ;nrf24l01.c: 225: while (nrf24l01.TXBusy){
  7270                           
  7271  0469  0020               	movlb	0	; select bank0
  7272  046A  1C6E               	btfss	_nrf24l01,0	;volatile
  7273  046B  2C75               	goto	l3741
  7274                           
  7275                           ;nrf24l01.c: 226: if (!--i) {
  7276  046C  3001               	movlw	1
  7277  046D  02AB               	subwf	nrf24l01SendPacket@i,f
  7278  046E  1903               	btfsc	3,2
  7279  046F  2BF9               	goto	l333
  7280                           
  7281                           ;nrf24l01.c: 228: };nrf24l01.c: 229: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  7282                           
  7283                           ;nrf24l01.c: 227: goto RESEND;
  7284  0470  3085               	movlw	133
  7285  0471                     u3757:	
  7286  0471  0B89               	decfsz	9,f
  7287  0472  2C71               	goto	u3757
  7288  0473  0000               	nop
  7289  0474  2C69               	goto	l3739
  7290  0475                     l3741:	
  7291                           
  7292                           ;nrf24l01.c: 230: };nrf24l01.c: 234: i = 0xFF;
  7293  0475  30FF               	movlw	255
  7294  0476  00A8               	movwf	??_nrf24l01SendPacket
  7295  0477  0828               	movf	??_nrf24l01SendPacket,w
  7296  0478  00AB               	movwf	nrf24l01SendPacket@i
  7297  0479                     l3751:	
  7298                           ;nrf24l01.c: 235: while (TXPacket->packetData.ACKRequest){
  7299                           
  7300  0479  0021               	movlb	1	; select bank1
  7301  047A  086D               	movf	_TXPacket^(0+128),w
  7302  047B  0086               	movwf	6
  7303  047C  0187               	clrf	7
  7304  047D  1D01               	btfss	1,2
  7305  047E  0008               	return
  7306                           
  7307                           ;nrf24l01.c: 236: if (!--i) {
  7308  047F  3001               	movlw	1
  7309  0480  0020               	movlb	0	; select bank0
  7310  0481  02AB               	subwf	nrf24l01SendPacket@i,f
  7311  0482  1D03               	btfss	3,2
  7312  0483  2CA7               	goto	l3749
  7313                           
  7314                           ;nrf24l01.c: 237: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  7315  0484  3002               	movlw	2
  7316  0485  0020               	movlb	0	; select bank0
  7317  0486  00A9               	movwf	??_nrf24l01SendPacket+1
  7318  0487  3004               	movlw	4
  7319  0488  00A8               	movwf	??_nrf24l01SendPacket
  7320  0489  30BA               	movlw	186
  7321  048A                     u3767:	
  7322  048A  0B89               	decfsz	9,f
  7323  048B  2C8A               	goto	u3767
  7324  048C  0BA8               	decfsz	??_nrf24l01SendPacket,f
  7325  048D  2C8A               	goto	u3767
  7326  048E  0BA9               	decfsz	??_nrf24l01SendPacket+1,f
  7327  048F  2C8A               	goto	u3767
  7328  0490  0000               	nop
  7329                           
  7330                           ;nrf24l01.c: 238: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  7331  0491  3002               	movlw	2
  7332  0492  0020               	movlb	0	; select bank0
  7333  0493  00A9               	movwf	??_nrf24l01SendPacket+1
  7334  0494  3004               	movlw	4
  7335  0495  00A8               	movwf	??_nrf24l01SendPacket
  7336  0496  30BA               	movlw	186
  7337  0497                     u3777:	
  7338  0497  0B89               	decfsz	9,f
  7339  0498  2C97               	goto	u3777
  7340  0499  0BA8               	decfsz	??_nrf24l01SendPacket,f
  7341  049A  2C97               	goto	u3777
  7342  049B  0BA9               	decfsz	??_nrf24l01SendPacket+1,f
  7343  049C  2C97               	goto	u3777
  7344  049D  0000               	nop
  7345                           
  7346                           ;nrf24l01.c: 239: nrf24l01ChangeTXPower(1);
  7347  049E  3001               	movlw	1
  7348  049F  0020               	movlb	0	; select bank0
  7349  04A0  00A4               	movwf	nrf24l01ChangeTXPower@addPower
  7350  04A1  3000               	movlw	0
  7351  04A2  00A5               	movwf	nrf24l01ChangeTXPower@addPower+1
  7352  04A3  318C  2473  3183   	fcall	_nrf24l01ChangeTXPower
  7353                           
  7354                           ;nrf24l01.c: 240: goto RESEND;
  7355  04A6  2BF9               	goto	l333
  7356  04A7                     l3749:	
  7357                           
  7358                           ;nrf24l01.c: 241: };nrf24l01.c: 242: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  7359  04A7  3085               	movlw	133
  7360  04A8                     u3787:	
  7361  04A8  0B89               	decfsz	9,f
  7362  04A9  2CA8               	goto	u3787
  7363  04AA  0000               	nop
  7364  04AB  2C79               	goto	l3751
  7365  04AC                     __end_of_nrf24l01SendPacket:	
  7366                           
  7367                           	psect	text27
  7368  09A0                     __ptext27:	
  7369 ;; *************** function _strlen *****************
  7370 ;; Defined at:
  7371 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  7372 ;; Parameters:    Size  Location     Type
  7373 ;;  s               2    1[BANK0 ] PTR const unsigned char 
  7374 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7375 ;;		 -> loop@packet(33), romData(19), 
  7376 ;; Auto vars:     Size  Location     Type
  7377 ;;  cp              2    5[BANK0 ] PTR const unsigned char 
  7378 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7379 ;;		 -> loop@packet(33), romData(19), 
  7380 ;; Return value:  Size  Location     Type
  7381 ;;                  2    1[BANK0 ] unsigned int 
  7382 ;; Registers used:
  7383 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7384 ;; Tracked objects:
  7385 ;;		On entry : 0/0
  7386 ;;		On exit  : 0/0
  7387 ;;		Unchanged: 0/0
  7388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7389 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7390 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7391 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7392 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7393 ;;Total ram usage:        6 bytes
  7394 ;; Hardware stack levels used:    1
  7395 ;; Hardware stack levels required when called:    7
  7396 ;; This function calls:
  7397 ;;		Nothing
  7398 ;; This function is called by:
  7399 ;;		_nrf24l01GetPipe
  7400 ;;		_nrf24l01SendPacket
  7401 ;; This function uses a non-reentrant model
  7402 ;;
  7403                           
  7404                           
  7405                           ;psect for function _strlen
  7406  09A0                     _strlen:	
  7407                           
  7408                           ;incstack = 0
  7409                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  7410  09A0  0020               	movlb	0	; select bank0
  7411  09A1  0822               	movf	strlen@s+1,w
  7412  09A2  00A6               	movwf	strlen@cp+1
  7413  09A3  0821               	movf	strlen@s,w
  7414  09A4  00A5               	movwf	strlen@cp
  7415  09A5                     l3675:	
  7416  09A5  0825               	movf	strlen@cp,w
  7417  09A6  0086               	movwf	6
  7418  09A7  0826               	movf	strlen@cp+1,w
  7419  09A8  0087               	movwf	7
  7420  09A9  0801               	movf	1,w
  7421  09AA  1903               	btfsc	3,2
  7422  09AB  29B1               	goto	l3677
  7423  09AC  3001               	movlw	1
  7424  09AD  07A5               	addwf	strlen@cp,f
  7425  09AE  3000               	movlw	0
  7426  09AF  3DA6               	addwfc	strlen@cp+1,f
  7427  09B0  29A5               	goto	l3675
  7428  09B1                     l3677:	
  7429  09B1  0921               	comf	strlen@s,w
  7430  09B2  00A3               	movwf	??_strlen
  7431  09B3  0922               	comf	strlen@s+1,w
  7432  09B4  00A4               	movwf	??_strlen+1
  7433  09B5  0AA3               	incf	??_strlen,f
  7434  09B6  1903               	skipnz
  7435  09B7  0AA4               	incf	??_strlen+1,f
  7436  09B8  0825               	movf	strlen@cp,w
  7437  09B9  0723               	addwf	??_strlen,w
  7438  09BA  00A1               	movwf	?_strlen
  7439  09BB  0826               	movf	strlen@cp+1,w
  7440  09BC  3D24               	addwfc	??_strlen+1,w
  7441  09BD  00A2               	movwf	?_strlen+1
  7442  09BE  0008               	return
  7443  09BF                     __end_of_strlen:	
  7444                           
  7445                           	psect	text28
  7446  0BFC                     __ptext28:	
  7447 ;; *************** function _nrf24l01SetRXMode *****************
  7448 ;; Defined at:
  7449 ;;		line 54 in file "nrf24l01.c"
  7450 ;; Parameters:    Size  Location     Type
  7451 ;;  rxMode          1    wreg     unsigned char 
  7452 ;; Auto vars:     Size  Location     Type
  7453 ;;  rxMode          1    6[BANK0 ] unsigned char 
  7454 ;;  config          1    5[BANK0 ] struct .
  7455 ;; Return value:  Size  Location     Type
  7456 ;;                  1    wreg      void 
  7457 ;; Registers used:
  7458 ;;		wreg, status,2, status,0, pclath, cstack
  7459 ;; Tracked objects:
  7460 ;;		On entry : 0/0
  7461 ;;		On exit  : 0/0
  7462 ;;		Unchanged: 0/0
  7463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7465 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7466 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7467 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7468 ;;Total ram usage:        3 bytes
  7469 ;; Hardware stack levels used:    1
  7470 ;; Hardware stack levels required when called:   10
  7471 ;; This function calls:
  7472 ;;		_nrf24l01CEHigh
  7473 ;;		_nrf24l01CELow
  7474 ;;		_nrf24l01Send
  7475 ;; This function is called by:
  7476 ;;		_nrf24l01SendPacket
  7477 ;;		_checkRxData
  7478 ;; This function uses a non-reentrant model
  7479 ;;
  7480                           
  7481                           
  7482                           ;psect for function _nrf24l01SetRXMode
  7483  0BFC                     _nrf24l01SetRXMode:	
  7484                           
  7485                           ;incstack = 0
  7486                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  7487                           ;nrf24l01SetRXMode@rxMode stored from wreg
  7488  0BFC  0020               	movlb	0	; select bank0
  7489  0BFD  00A6               	movwf	nrf24l01SetRXMode@rxMode
  7490                           
  7491                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  7492  0BFE  01A1               	clrf	nrf24l01Send@data
  7493  0BFF  3000               	movlw	0
  7494  0C00  3189  21DF  318B   	fcall	_nrf24l01Send
  7495  0C03  0020               	movlb	0	; select bank0
  7496  0C04  00A4               	movwf	??_nrf24l01SetRXMode
  7497  0C05  0824               	movf	??_nrf24l01SetRXMode,w
  7498  0C06  00A5               	movwf	nrf24l01SetRXMode@config
  7499                           
  7500                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  7501  0C07  0825               	movf	nrf24l01SetRXMode@config,w
  7502  0C08  3901               	andlw	1
  7503  0C09  0626               	xorwf	nrf24l01SetRXMode@rxMode,w
  7504  0C0A  1903               	skipnz
  7505  0C0B  2C30               	goto	l2907
  7506                           
  7507                           ;nrf24l01.c: 65: nrf24l01CELow();
  7508  0C0C  3188  2009  318B   	fcall	_nrf24l01CELow
  7509                           
  7510                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7511  0C0F  30A0               	movlw	160
  7512  0C10                     u3797:	
  7513  0C10  3200               	nop2
  7514  0C11  0B89               	decfsz	9,f
  7515  0C12  2C10               	goto	u3797
  7516                           
  7517                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  7518  0C13  0020               	movlb	0	; select bank0
  7519  0C14  0826               	movf	nrf24l01SetRXMode@rxMode,w
  7520  0C15  3901               	andlw	1
  7521  0C16  1025               	bcf	nrf24l01SetRXMode@config,0
  7522  0C17  1D03               	skipz
  7523  0C18  1425               	bsf	nrf24l01SetRXMode@config,0
  7524                           
  7525                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  7526  0C19  0825               	movf	nrf24l01SetRXMode@config,w
  7527  0C1A  00A4               	movwf	??_nrf24l01SetRXMode
  7528  0C1B  0824               	movf	??_nrf24l01SetRXMode,w
  7529  0C1C  00A1               	movwf	nrf24l01Send@data
  7530  0C1D  3020               	movlw	32
  7531  0C1E  3189  21DF  318B   	fcall	_nrf24l01Send
  7532                           
  7533                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7534  0C21  30A0               	movlw	160
  7535  0C22                     u3807:	
  7536  0C22  3200               	nop2
  7537  0C23  0B89               	decfsz	9,f
  7538  0C24  2C22               	goto	u3807
  7539                           
  7540                           ;nrf24l01.c: 76: if (rxMode){
  7541  0C25  0020               	movlb	0	; select bank0
  7542  0C26  0826               	movf	nrf24l01SetRXMode@rxMode,w
  7543  0C27  1903               	btfsc	3,2
  7544  0C28  2C30               	goto	l2907
  7545                           
  7546                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  7547  0C29  3188  2006  318B   	fcall	_nrf24l01CEHigh
  7548                           
  7549                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7550  0C2C  30A0               	movlw	160
  7551  0C2D                     u3817:	
  7552  0C2D  3200               	nop2
  7553  0C2E  0B89               	decfsz	9,f
  7554  0C2F  2C2D               	goto	u3817
  7555  0C30                     l2907:	
  7556                           
  7557                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  7558  0C30  0020               	movlb	0	; select bank0
  7559  0C31  0826               	movf	nrf24l01SetRXMode@rxMode,w
  7560  0C32  3901               	andlw	1
  7561  0C33  116E               	bcf	_nrf24l01,2	;volatile
  7562  0C34  1D03               	skipz
  7563  0C35  156E               	bsf	_nrf24l01,2	;volatile
  7564  0C36  0008               	return
  7565  0C37                     __end_of_nrf24l01SetRXMode:	
  7566                           
  7567                           	psect	text29
  7568  0756                     __ptext29:	
  7569 ;; *************** function _getADCValue *****************
  7570 ;; Defined at:
  7571 ;;		line 23 in file "main.c"
  7572 ;; Parameters:    Size  Location     Type
  7573 ;;  channel         1    wreg     unsigned char 
  7574 ;;  multiplier      3   30[BANK0 ] float 
  7575 ;; Auto vars:     Size  Location     Type
  7576 ;;  channel         1   36[BANK0 ] unsigned char 
  7577 ;;  adcSum          3   38[BANK0 ] float 
  7578 ;;  adcLoop         1   37[BANK0 ] unsigned char 
  7579 ;; Return value:  Size  Location     Type
  7580 ;;                  3   30[BANK0 ] float 
  7581 ;; Registers used:
  7582 ;;		wreg, status,2, status,0, pclath, cstack
  7583 ;; Tracked objects:
  7584 ;;		On entry : 0/0
  7585 ;;		On exit  : 0/0
  7586 ;;		Unchanged: 0/0
  7587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7588 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7589 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7590 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7591 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7592 ;;Total ram usage:       11 bytes
  7593 ;; Hardware stack levels used:    1
  7594 ;; Hardware stack levels required when called:    9
  7595 ;; This function calls:
  7596 ;;		___ftadd
  7597 ;;		___ftdiv
  7598 ;;		___ftmul
  7599 ;;		___lbtoft
  7600 ;;		___lwtoft
  7601 ;; This function is called by:
  7602 ;;		_loop
  7603 ;; This function uses a non-reentrant model
  7604 ;;
  7605                           
  7606                           
  7607                           ;psect for function _getADCValue
  7608  0756                     _getADCValue:	
  7609                           
  7610                           ;incstack = 0
  7611                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  7612                           ;getADCValue@channel stored from wreg
  7613  0756  0020               	movlb	0	; select bank0
  7614  0757  00C4               	movwf	getADCValue@channel
  7615                           
  7616                           ;main.c: 25: float adcSum = 0;
  7617  0758  3000               	movlw	0
  7618  0759  00C6               	movwf	getADCValue@adcSum
  7619  075A  3000               	movlw	0
  7620  075B  00C7               	movwf	getADCValue@adcSum+1
  7621  075C  3000               	movlw	0
  7622  075D  00C8               	movwf	getADCValue@adcSum+2
  7623                           
  7624                           ;main.c: 26: unsigned char adcLoop = 255;
  7625  075E  30FF               	movlw	255
  7626  075F  00C1               	movwf	??_getADCValue
  7627  0760  0841               	movf	??_getADCValue,w
  7628  0761  00C5               	movwf	getADCValue@adcLoop
  7629                           
  7630                           ;main.c: 28: ADCON0bits.CHS = channel;
  7631  0762  0844               	movf	getADCValue@channel,w
  7632  0763  00C1               	movwf	??_getADCValue
  7633  0764  0DC1               	rlf	??_getADCValue,f
  7634  0765  0DC1               	rlf	??_getADCValue,f
  7635  0766  0021               	movlb	1	; select bank1
  7636  0767  081D               	movf	29,w	;volatile
  7637  0768  0020               	movlb	0	; select bank0
  7638  0769  0641               	xorwf	??_getADCValue,w
  7639  076A  3903               	andlw	-253
  7640  076B  0641               	xorwf	??_getADCValue,w
  7641  076C  0021               	movlb	1	; select bank1
  7642  076D  009D               	movwf	29	;volatile
  7643                           
  7644                           ;main.c: 29: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7645  076E  30A0               	movlw	160
  7646  076F                     u3827:	
  7647  076F  3200               	nop2
  7648  0770  0B89               	decfsz	9,f
  7649  0771  2F6F               	goto	u3827
  7650  0772                     l3161:	
  7651                           ;main.c: 31: while (--adcLoop){
  7652                           
  7653  0772  3001               	movlw	1
  7654  0773  0020               	movlb	0	; select bank0
  7655  0774  02C5               	subwf	getADCValue@adcLoop,f
  7656  0775  1903               	btfsc	3,2
  7657  0776  2FC0               	goto	l3163
  7658                           
  7659                           ;main.c: 33: ADCON0bits.ADGO = 1;
  7660  0777  0021               	movlb	1	; select bank1
  7661  0778  149D               	bsf	29,1	;volatile
  7662  0779                     l216:	
  7663                           ;main.c: 35: while (ADCON0bits.ADGO){
  7664                           
  7665  0779  0021               	movlb	1	; select bank1
  7666  077A  1C9D               	btfss	29,1	;volatile
  7667  077B  2F7E               	goto	l3159
  7668                           
  7669                           ;main.c: 36: __nop();
  7670  077C  0000               	nop
  7671  077D  2F79               	goto	l216
  7672  077E                     l3159:	
  7673                           
  7674                           ;main.c: 37: };main.c: 39: adcSum+= ADRESL;
  7675  077E  081B               	movf	27,w	;volatile
  7676  077F  3189  2113  3187   	fcall	___lbtoft
  7677  0782  0020               	movlb	0	; select bank0
  7678  0783  0829               	movf	?___lbtoft,w
  7679  0784  00B1               	movwf	___ftadd@f1
  7680  0785  082A               	movf	?___lbtoft+1,w
  7681  0786  00B2               	movwf	___ftadd@f1+1
  7682  0787  082B               	movf	?___lbtoft+2,w
  7683  0788  00B3               	movwf	___ftadd@f1+2
  7684  0789  0846               	movf	getADCValue@adcSum,w
  7685  078A  00B4               	movwf	___ftadd@f2
  7686  078B  0847               	movf	getADCValue@adcSum+1,w
  7687  078C  00B5               	movwf	___ftadd@f2+1
  7688  078D  0848               	movf	getADCValue@adcSum+2,w
  7689  078E  00B6               	movwf	___ftadd@f2+2
  7690  078F  3182  22FC  3187   	fcall	___ftadd
  7691  0792  0020               	movlb	0	; select bank0
  7692  0793  0831               	movf	?___ftadd,w
  7693  0794  00C6               	movwf	getADCValue@adcSum
  7694  0795  0832               	movf	?___ftadd+1,w
  7695  0796  00C7               	movwf	getADCValue@adcSum+1
  7696  0797  0833               	movf	?___ftadd+2,w
  7697  0798  00C8               	movwf	getADCValue@adcSum+2
  7698                           
  7699                           ;main.c: 40: adcSum+= (unsigned) (ADRESH << 8);
  7700  0799  0021               	movlb	1	; select bank1
  7701  079A  081C               	movf	28,w	;volatile
  7702  079B  0020               	movlb	0	; select bank0
  7703  079C  00C1               	movwf	??_getADCValue
  7704  079D  01C2               	clrf	??_getADCValue+1
  7705  079E  0841               	movf	??_getADCValue,w
  7706  079F  00C2               	movwf	??_getADCValue+1
  7707  07A0  01C1               	clrf	??_getADCValue
  7708  07A1  0841               	movf	??_getADCValue,w
  7709  07A2  00A9               	movwf	___lwtoft@c
  7710  07A3  0842               	movf	??_getADCValue+1,w
  7711  07A4  00AA               	movwf	___lwtoft@c+1
  7712  07A5  3188  207F  3187   	fcall	___lwtoft
  7713  07A8  0020               	movlb	0	; select bank0
  7714  07A9  0829               	movf	?___lwtoft,w
  7715  07AA  00B1               	movwf	___ftadd@f1
  7716  07AB  082A               	movf	?___lwtoft+1,w
  7717  07AC  00B2               	movwf	___ftadd@f1+1
  7718  07AD  082B               	movf	?___lwtoft+2,w
  7719  07AE  00B3               	movwf	___ftadd@f1+2
  7720  07AF  0846               	movf	getADCValue@adcSum,w
  7721  07B0  00B4               	movwf	___ftadd@f2
  7722  07B1  0847               	movf	getADCValue@adcSum+1,w
  7723  07B2  00B5               	movwf	___ftadd@f2+1
  7724  07B3  0848               	movf	getADCValue@adcSum+2,w
  7725  07B4  00B6               	movwf	___ftadd@f2+2
  7726  07B5  3182  22FC  3187   	fcall	___ftadd
  7727  07B8  0020               	movlb	0	; select bank0
  7728  07B9  0831               	movf	?___ftadd,w
  7729  07BA  00C6               	movwf	getADCValue@adcSum
  7730  07BB  0832               	movf	?___ftadd+1,w
  7731  07BC  00C7               	movwf	getADCValue@adcSum+1
  7732  07BD  0833               	movf	?___ftadd+2,w
  7733  07BE  00C8               	movwf	getADCValue@adcSum+2
  7734  07BF  2F72               	goto	l3161
  7735  07C0                     l3163:	
  7736                           
  7737                           ;main.c: 41: };main.c: 43: adcSum/= 255;
  7738  07C0  3000               	movlw	0
  7739  07C1  00A9               	movwf	___ftdiv@f2
  7740  07C2  307F               	movlw	127
  7741  07C3  00AA               	movwf	___ftdiv@f2+1
  7742  07C4  3043               	movlw	67
  7743  07C5  00AB               	movwf	___ftdiv@f2+2
  7744  07C6  0846               	movf	getADCValue@adcSum,w
  7745  07C7  00AC               	movwf	___ftdiv@f1
  7746  07C8  0847               	movf	getADCValue@adcSum+1,w
  7747  07C9  00AD               	movwf	___ftdiv@f1+1
  7748  07CA  0848               	movf	getADCValue@adcSum+2,w
  7749  07CB  00AE               	movwf	___ftdiv@f1+2
  7750  07CC  3186  260A  3187   	fcall	___ftdiv
  7751  07CF  0020               	movlb	0	; select bank0
  7752  07D0  0829               	movf	?___ftdiv,w
  7753  07D1  00C6               	movwf	getADCValue@adcSum
  7754  07D2  082A               	movf	?___ftdiv+1,w
  7755  07D3  00C7               	movwf	getADCValue@adcSum+1
  7756  07D4  082B               	movf	?___ftdiv+2,w
  7757  07D5  00C8               	movwf	getADCValue@adcSum+2
  7758                           
  7759                           ;main.c: 44: adcSum*= multiplier;
  7760  07D6  083E               	movf	getADCValue@multiplier,w
  7761  07D7  00A9               	movwf	___ftmul@f1
  7762  07D8  083F               	movf	getADCValue@multiplier+1,w
  7763  07D9  00AA               	movwf	___ftmul@f1+1
  7764  07DA  0840               	movf	getADCValue@multiplier+2,w
  7765  07DB  00AB               	movwf	___ftmul@f1+2
  7766  07DC  0846               	movf	getADCValue@adcSum,w
  7767  07DD  00AC               	movwf	___ftmul@f2
  7768  07DE  0847               	movf	getADCValue@adcSum+1,w
  7769  07DF  00AD               	movwf	___ftmul@f2+1
  7770  07E0  0848               	movf	getADCValue@adcSum+2,w
  7771  07E1  00AE               	movwf	___ftmul@f2+2
  7772  07E2  3184  24AC         	fcall	___ftmul
  7773  07E4  0020               	movlb	0	; select bank0
  7774  07E5  0829               	movf	?___ftmul,w
  7775  07E6  00C6               	movwf	getADCValue@adcSum
  7776  07E7  082A               	movf	?___ftmul+1,w
  7777  07E8  00C7               	movwf	getADCValue@adcSum+1
  7778  07E9  082B               	movf	?___ftmul+2,w
  7779  07EA  00C8               	movwf	getADCValue@adcSum+2
  7780                           
  7781                           ;main.c: 46: return adcSum;
  7782  07EB  0846               	movf	getADCValue@adcSum,w
  7783  07EC  00BE               	movwf	?_getADCValue
  7784  07ED  0847               	movf	getADCValue@adcSum+1,w
  7785  07EE  00BF               	movwf	?_getADCValue+1
  7786  07EF  0848               	movf	getADCValue@adcSum+2,w
  7787  07F0  00C0               	movwf	?_getADCValue+2
  7788  07F1  0008               	return
  7789  07F2                     __end_of_getADCValue:	
  7790                           
  7791                           	psect	text30
  7792  087F                     __ptext30:	
  7793 ;; *************** function ___lwtoft *****************
  7794 ;; Defined at:
  7795 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
  7796 ;; Parameters:    Size  Location     Type
  7797 ;;  c               2    9[BANK0 ] unsigned int 
  7798 ;; Auto vars:     Size  Location     Type
  7799 ;;		None
  7800 ;; Return value:  Size  Location     Type
  7801 ;;                  3    9[BANK0 ] float 
  7802 ;; Registers used:
  7803 ;;		wreg, status,2, status,0, pclath, cstack
  7804 ;; Tracked objects:
  7805 ;;		On entry : 0/0
  7806 ;;		On exit  : 0/0
  7807 ;;		Unchanged: 0/0
  7808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7809 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7811 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7812 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7813 ;;Total ram usage:        4 bytes
  7814 ;; Hardware stack levels used:    1
  7815 ;; Hardware stack levels required when called:    8
  7816 ;; This function calls:
  7817 ;;		___ftpack
  7818 ;; This function is called by:
  7819 ;;		_getADCValue
  7820 ;;		_main
  7821 ;; This function uses a non-reentrant model
  7822 ;;
  7823                           
  7824                           
  7825                           ;psect for function ___lwtoft
  7826  087F                     ___lwtoft:	
  7827                           
  7828                           ;incstack = 0
  7829                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  7830  087F  0020               	movlb	0	; select bank0
  7831  0880  0829               	movf	___lwtoft@c,w
  7832  0881  00A1               	movwf	___ftpack@arg
  7833  0882  082A               	movf	___lwtoft@c+1,w
  7834  0883  00A2               	movwf	___ftpack@arg+1
  7835  0884  01A3               	clrf	___ftpack@arg+2
  7836  0885  308E               	movlw	142
  7837  0886  00AC               	movwf	??___lwtoft
  7838  0887  082C               	movf	??___lwtoft,w
  7839  0888  00A4               	movwf	___ftpack@exp
  7840  0889  01A5               	clrf	___ftpack@sign
  7841  088A  318E  267D         	fcall	___ftpack
  7842  088C  0020               	movlb	0	; select bank0
  7843  088D  0821               	movf	?___ftpack,w
  7844  088E  00A9               	movwf	?___lwtoft
  7845  088F  0822               	movf	?___ftpack+1,w
  7846  0890  00AA               	movwf	?___lwtoft+1
  7847  0891  0823               	movf	?___ftpack+2,w
  7848  0892  00AB               	movwf	?___lwtoft+2
  7849  0893  0008               	return
  7850  0894                     __end_of___lwtoft:	
  7851                           
  7852                           	psect	text31
  7853  0913                     __ptext31:	
  7854 ;; *************** function ___lbtoft *****************
  7855 ;; Defined at:
  7856 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
  7857 ;; Parameters:    Size  Location     Type
  7858 ;;  c               1    wreg     unsigned char 
  7859 ;; Auto vars:     Size  Location     Type
  7860 ;;  c               1   16[BANK0 ] unsigned char 
  7861 ;; Return value:  Size  Location     Type
  7862 ;;                  3    9[BANK0 ] float 
  7863 ;; Registers used:
  7864 ;;		wreg, status,2, status,0, pclath, cstack
  7865 ;; Tracked objects:
  7866 ;;		On entry : 0/0
  7867 ;;		On exit  : 0/0
  7868 ;;		Unchanged: 0/0
  7869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7870 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7871 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7872 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7873 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7874 ;;Total ram usage:        8 bytes
  7875 ;; Hardware stack levels used:    1
  7876 ;; Hardware stack levels required when called:    8
  7877 ;; This function calls:
  7878 ;;		___ftpack
  7879 ;; This function is called by:
  7880 ;;		_getADCValue
  7881 ;; This function uses a non-reentrant model
  7882 ;;
  7883                           
  7884                           
  7885                           ;psect for function ___lbtoft
  7886  0913                     ___lbtoft:	
  7887                           
  7888                           ;incstack = 0
  7889                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  7890                           ;___lbtoft@c stored from wreg
  7891  0913  0020               	movlb	0	; select bank0
  7892  0914  00B0               	movwf	___lbtoft@c
  7893  0915  0830               	movf	___lbtoft@c,w
  7894  0916  00AC               	movwf	??___lbtoft
  7895  0917  01AD               	clrf	??___lbtoft+1
  7896  0918  01AE               	clrf	??___lbtoft+2
  7897  0919  082C               	movf	??___lbtoft,w
  7898  091A  00A1               	movwf	___ftpack@arg
  7899  091B  082D               	movf	??___lbtoft+1,w
  7900  091C  00A2               	movwf	___ftpack@arg+1
  7901  091D  082E               	movf	??___lbtoft+2,w
  7902  091E  00A3               	movwf	___ftpack@arg+2
  7903  091F  308E               	movlw	142
  7904  0920  00AF               	movwf	??___lbtoft+3
  7905  0921  082F               	movf	??___lbtoft+3,w
  7906  0922  00A4               	movwf	___ftpack@exp
  7907  0923  01A5               	clrf	___ftpack@sign
  7908  0924  318E  267D         	fcall	___ftpack
  7909  0926  0020               	movlb	0	; select bank0
  7910  0927  0821               	movf	?___ftpack,w
  7911  0928  00A9               	movwf	?___lbtoft
  7912  0929  0822               	movf	?___ftpack+1,w
  7913  092A  00AA               	movwf	?___lbtoft+1
  7914  092B  0823               	movf	?___ftpack+2,w
  7915  092C  00AB               	movwf	?___lbtoft+2
  7916  092D  0008               	return
  7917  092E                     __end_of___lbtoft:	
  7918                           
  7919                           	psect	text32
  7920  04AC                     __ptext32:	
  7921 ;; *************** function ___ftmul *****************
  7922 ;; Defined at:
  7923 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  7924 ;; Parameters:    Size  Location     Type
  7925 ;;  f1              3    9[BANK0 ] float 
  7926 ;;  f2              3   12[BANK0 ] float 
  7927 ;; Auto vars:     Size  Location     Type
  7928 ;;  f3_as_produc    3   20[BANK0 ] unsigned um
  7929 ;;  sign            1   24[BANK0 ] unsigned char 
  7930 ;;  cntr            1   23[BANK0 ] unsigned char 
  7931 ;;  exp             1   19[BANK0 ] unsigned char 
  7932 ;; Return value:  Size  Location     Type
  7933 ;;                  3    9[BANK0 ] float 
  7934 ;; Registers used:
  7935 ;;		wreg, status,2, status,0, pclath, cstack
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7941 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7942 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7943 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7944 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7945 ;;Total ram usage:       16 bytes
  7946 ;; Hardware stack levels used:    1
  7947 ;; Hardware stack levels required when called:    8
  7948 ;; This function calls:
  7949 ;;		___ftpack
  7950 ;; This function is called by:
  7951 ;;		_getADCValue
  7952 ;;		_ftoa
  7953 ;; This function uses a non-reentrant model
  7954 ;;
  7955                           
  7956                           
  7957                           ;psect for function ___ftmul
  7958  04AC                     ___ftmul:	
  7959                           
  7960                           ;incstack = 0
  7961                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7962  04AC  0020               	movlb	0	; select bank0
  7963  04AD  0829               	movf	___ftmul@f1,w
  7964  04AE  00AF               	movwf	??___ftmul
  7965  04AF  082A               	movf	___ftmul@f1+1,w
  7966  04B0  00B0               	movwf	??___ftmul+1
  7967  04B1  082B               	movf	___ftmul@f1+2,w
  7968  04B2  00B1               	movwf	??___ftmul+2
  7969  04B3  1003               	clrc
  7970  04B4  0D30               	rlf	??___ftmul+1,w
  7971  04B5  0D31               	rlf	??___ftmul+2,w
  7972  04B6  00B2               	movwf	??___ftmul+3
  7973  04B7  0832               	movf	??___ftmul+3,w
  7974  04B8  00B3               	movwf	___ftmul@exp
  7975  04B9  0833               	movf	___ftmul@exp,w
  7976  04BA  1D03               	btfss	3,2
  7977  04BB  2CC3               	goto	l2751
  7978  04BC  3000               	movlw	0
  7979  04BD  00A9               	movwf	?___ftmul
  7980  04BE  3000               	movlw	0
  7981  04BF  00AA               	movwf	?___ftmul+1
  7982  04C0  3000               	movlw	0
  7983  04C1  00AB               	movwf	?___ftmul+2
  7984  04C2  0008               	return
  7985  04C3                     l2751:	
  7986  04C3  082C               	movf	___ftmul@f2,w
  7987  04C4  00AF               	movwf	??___ftmul
  7988  04C5  082D               	movf	___ftmul@f2+1,w
  7989  04C6  00B0               	movwf	??___ftmul+1
  7990  04C7  082E               	movf	___ftmul@f2+2,w
  7991  04C8  00B1               	movwf	??___ftmul+2
  7992  04C9  1003               	clrc
  7993  04CA  0D30               	rlf	??___ftmul+1,w
  7994  04CB  0D31               	rlf	??___ftmul+2,w
  7995  04CC  00B2               	movwf	??___ftmul+3
  7996  04CD  0832               	movf	??___ftmul+3,w
  7997  04CE  00B8               	movwf	___ftmul@sign
  7998  04CF  0838               	movf	___ftmul@sign,w
  7999  04D0  1D03               	btfss	3,2
  8000  04D1  2CD9               	goto	l2757
  8001  04D2  3000               	movlw	0
  8002  04D3  00A9               	movwf	?___ftmul
  8003  04D4  3000               	movlw	0
  8004  04D5  00AA               	movwf	?___ftmul+1
  8005  04D6  3000               	movlw	0
  8006  04D7  00AB               	movwf	?___ftmul+2
  8007  04D8  0008               	return
  8008  04D9                     l2757:	
  8009  04D9  0838               	movf	___ftmul@sign,w
  8010  04DA  3E7B               	addlw	123
  8011  04DB  00AF               	movwf	??___ftmul
  8012  04DC  082F               	movf	??___ftmul,w
  8013  04DD  07B3               	addwf	___ftmul@exp,f
  8014  04DE  0829               	movf	___ftmul@f1,w
  8015  04DF  00AF               	movwf	??___ftmul
  8016  04E0  082A               	movf	___ftmul@f1+1,w
  8017  04E1  00B0               	movwf	??___ftmul+1
  8018  04E2  082B               	movf	___ftmul@f1+2,w
  8019  04E3  00B1               	movwf	??___ftmul+2
  8020  04E4  3010               	movlw	16
  8021  04E5                     u2555:	
  8022  04E5  36B1               	lsrf	??___ftmul+2,f
  8023  04E6  0CB0               	rrf	??___ftmul+1,f
  8024  04E7  0CAF               	rrf	??___ftmul,f
  8025  04E8  0B89               	decfsz	9,f
  8026  04E9  2CE5               	goto	u2555
  8027  04EA  082F               	movf	??___ftmul,w
  8028  04EB  00B2               	movwf	??___ftmul+3
  8029  04EC  0832               	movf	??___ftmul+3,w
  8030  04ED  00B8               	movwf	___ftmul@sign
  8031  04EE  082C               	movf	___ftmul@f2,w
  8032  04EF  00AF               	movwf	??___ftmul
  8033  04F0  082D               	movf	___ftmul@f2+1,w
  8034  04F1  00B0               	movwf	??___ftmul+1
  8035  04F2  082E               	movf	___ftmul@f2+2,w
  8036  04F3  00B1               	movwf	??___ftmul+2
  8037  04F4  3010               	movlw	16
  8038  04F5                     u2565:	
  8039  04F5  36B1               	lsrf	??___ftmul+2,f
  8040  04F6  0CB0               	rrf	??___ftmul+1,f
  8041  04F7  0CAF               	rrf	??___ftmul,f
  8042  04F8  0B89               	decfsz	9,f
  8043  04F9  2CF5               	goto	u2565
  8044  04FA  082F               	movf	??___ftmul,w
  8045  04FB  00B2               	movwf	??___ftmul+3
  8046  04FC  0832               	movf	??___ftmul+3,w
  8047  04FD  06B8               	xorwf	___ftmul@sign,f
  8048  04FE  3080               	movlw	128
  8049  04FF  00AF               	movwf	??___ftmul
  8050  0500  082F               	movf	??___ftmul,w
  8051  0501  05B8               	andwf	___ftmul@sign,f
  8052  0502  17AA               	bsf	___ftmul@f1+1,7
  8053  0503  17AD               	bsf	___ftmul@f2+1,7
  8054  0504  30FF               	movlw	255
  8055  0505  05AC               	andwf	___ftmul@f2,f
  8056  0506  30FF               	movlw	255
  8057  0507  05AD               	andwf	___ftmul@f2+1,f
  8058  0508  3000               	movlw	0
  8059  0509  05AE               	andwf	___ftmul@f2+2,f
  8060  050A  3000               	movlw	0
  8061  050B  00B4               	movwf	___ftmul@f3_as_product
  8062  050C  3000               	movlw	0
  8063  050D  00B5               	movwf	___ftmul@f3_as_product+1
  8064  050E  3000               	movlw	0
  8065  050F  00B6               	movwf	___ftmul@f3_as_product+2
  8066  0510  3007               	movlw	7
  8067  0511  00AF               	movwf	??___ftmul
  8068  0512  082F               	movf	??___ftmul,w
  8069  0513  00B7               	movwf	___ftmul@cntr
  8070  0514                     l2769:	
  8071  0514  1C29               	btfss	___ftmul@f1,0
  8072  0515  2D1C               	goto	l2773
  8073  0516  082C               	movf	___ftmul@f2,w
  8074  0517  07B4               	addwf	___ftmul@f3_as_product,f
  8075  0518  082D               	movf	___ftmul@f2+1,w
  8076  0519  3DB5               	addwfc	___ftmul@f3_as_product+1,f
  8077  051A  082E               	movf	___ftmul@f2+2,w
  8078  051B  3DB6               	addwfc	___ftmul@f3_as_product+2,f
  8079  051C                     l2773:	
  8080  051C  3001               	movlw	1
  8081  051D                     u2585:	
  8082  051D  36AB               	lsrf	___ftmul@f1+2,f
  8083  051E  0CAA               	rrf	___ftmul@f1+1,f
  8084  051F  0CA9               	rrf	___ftmul@f1,f
  8085  0520  0B89               	decfsz	9,f
  8086  0521  2D1D               	goto	u2585
  8087  0522  3001               	movlw	1
  8088  0523                     u2595:	
  8089  0523  35AC               	lslf	___ftmul@f2,f
  8090  0524  0DAD               	rlf	___ftmul@f2+1,f
  8091  0525  0DAE               	rlf	___ftmul@f2+2,f
  8092  0526  0B89               	decfsz	9,f
  8093  0527  2D23               	goto	u2595
  8094  0528  3001               	movlw	1
  8095  0529  02B7               	subwf	___ftmul@cntr,f
  8096  052A  1D03               	btfss	3,2
  8097  052B  2D14               	goto	l2769
  8098  052C  3009               	movlw	9
  8099  052D  00AF               	movwf	??___ftmul
  8100  052E  082F               	movf	??___ftmul,w
  8101  052F  00B7               	movwf	___ftmul@cntr
  8102  0530                     l2781:	
  8103  0530  1C29               	btfss	___ftmul@f1,0
  8104  0531  2D38               	goto	l2785
  8105  0532  082C               	movf	___ftmul@f2,w
  8106  0533  07B4               	addwf	___ftmul@f3_as_product,f
  8107  0534  082D               	movf	___ftmul@f2+1,w
  8108  0535  3DB5               	addwfc	___ftmul@f3_as_product+1,f
  8109  0536  082E               	movf	___ftmul@f2+2,w
  8110  0537  3DB6               	addwfc	___ftmul@f3_as_product+2,f
  8111  0538                     l2785:	
  8112  0538  3001               	movlw	1
  8113  0539                     u2625:	
  8114  0539  36AB               	lsrf	___ftmul@f1+2,f
  8115  053A  0CAA               	rrf	___ftmul@f1+1,f
  8116  053B  0CA9               	rrf	___ftmul@f1,f
  8117  053C  0B89               	decfsz	9,f
  8118  053D  2D39               	goto	u2625
  8119  053E  3001               	movlw	1
  8120  053F                     u2635:	
  8121  053F  36B6               	lsrf	___ftmul@f3_as_product+2,f
  8122  0540  0CB5               	rrf	___ftmul@f3_as_product+1,f
  8123  0541  0CB4               	rrf	___ftmul@f3_as_product,f
  8124  0542  0B89               	decfsz	9,f
  8125  0543  2D3F               	goto	u2635
  8126  0544  3001               	movlw	1
  8127  0545  02B7               	subwf	___ftmul@cntr,f
  8128  0546  1D03               	btfss	3,2
  8129  0547  2D30               	goto	l2781
  8130  0548  0834               	movf	___ftmul@f3_as_product,w
  8131  0549  00A1               	movwf	___ftpack@arg
  8132  054A  0835               	movf	___ftmul@f3_as_product+1,w
  8133  054B  00A2               	movwf	___ftpack@arg+1
  8134  054C  0836               	movf	___ftmul@f3_as_product+2,w
  8135  054D  00A3               	movwf	___ftpack@arg+2
  8136  054E  0833               	movf	___ftmul@exp,w
  8137  054F  00AF               	movwf	??___ftmul
  8138  0550  082F               	movf	??___ftmul,w
  8139  0551  00A4               	movwf	___ftpack@exp
  8140  0552  0838               	movf	___ftmul@sign,w
  8141  0553  00B0               	movwf	??___ftmul+1
  8142  0554  0830               	movf	??___ftmul+1,w
  8143  0555  00A5               	movwf	___ftpack@sign
  8144  0556  318E  267D         	fcall	___ftpack
  8145  0558  0020               	movlb	0	; select bank0
  8146  0559  0821               	movf	?___ftpack,w
  8147  055A  00A9               	movwf	?___ftmul
  8148  055B  0822               	movf	?___ftpack+1,w
  8149  055C  00AA               	movwf	?___ftmul+1
  8150  055D  0823               	movf	?___ftpack+2,w
  8151  055E  00AB               	movwf	?___ftmul+2
  8152  055F  0008               	return
  8153  0560                     __end_of___ftmul:	
  8154                           
  8155                           	psect	text33
  8156  060A                     __ptext33:	
  8157 ;; *************** function ___ftdiv *****************
  8158 ;; Defined at:
  8159 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  8160 ;; Parameters:    Size  Location     Type
  8161 ;;  f2              3    9[BANK0 ] float 
  8162 ;;  f1              3   12[BANK0 ] float 
  8163 ;; Auto vars:     Size  Location     Type
  8164 ;;  f3              3   20[BANK0 ] float 
  8165 ;;  sign            1   24[BANK0 ] unsigned char 
  8166 ;;  exp             1   23[BANK0 ] unsigned char 
  8167 ;;  cntr            1   19[BANK0 ] unsigned char 
  8168 ;; Return value:  Size  Location     Type
  8169 ;;                  3    9[BANK0 ] float 
  8170 ;; Registers used:
  8171 ;;		wreg, status,2, status,0, pclath, cstack
  8172 ;; Tracked objects:
  8173 ;;		On entry : 0/0
  8174 ;;		On exit  : 0/0
  8175 ;;		Unchanged: 0/0
  8176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8177 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8178 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8179 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8180 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8181 ;;Total ram usage:       16 bytes
  8182 ;; Hardware stack levels used:    1
  8183 ;; Hardware stack levels required when called:    8
  8184 ;; This function calls:
  8185 ;;		___ftpack
  8186 ;; This function is called by:
  8187 ;;		_getADCValue
  8188 ;; This function uses a non-reentrant model
  8189 ;;
  8190                           
  8191                           
  8192                           ;psect for function ___ftdiv
  8193  060A                     ___ftdiv:	
  8194                           
  8195                           ;incstack = 0
  8196                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  8197  060A  0020               	movlb	0	; select bank0
  8198  060B  082C               	movf	___ftdiv@f1,w
  8199  060C  00AF               	movwf	??___ftdiv
  8200  060D  082D               	movf	___ftdiv@f1+1,w
  8201  060E  00B0               	movwf	??___ftdiv+1
  8202  060F  082E               	movf	___ftdiv@f1+2,w
  8203  0610  00B1               	movwf	??___ftdiv+2
  8204  0611  1003               	clrc
  8205  0612  0D30               	rlf	??___ftdiv+1,w
  8206  0613  0D31               	rlf	??___ftdiv+2,w
  8207  0614  00B2               	movwf	??___ftdiv+3
  8208  0615  0832               	movf	??___ftdiv+3,w
  8209  0616  00B7               	movwf	___ftdiv@exp
  8210  0617  0837               	movf	___ftdiv@exp,w
  8211  0618  1D03               	btfss	3,2
  8212  0619  2E21               	goto	l3023
  8213  061A  3000               	movlw	0
  8214  061B  00A9               	movwf	?___ftdiv
  8215  061C  3000               	movlw	0
  8216  061D  00AA               	movwf	?___ftdiv+1
  8217  061E  3000               	movlw	0
  8218  061F  00AB               	movwf	?___ftdiv+2
  8219  0620  0008               	return
  8220  0621                     l3023:	
  8221  0621  0829               	movf	___ftdiv@f2,w
  8222  0622  00AF               	movwf	??___ftdiv
  8223  0623  082A               	movf	___ftdiv@f2+1,w
  8224  0624  00B0               	movwf	??___ftdiv+1
  8225  0625  082B               	movf	___ftdiv@f2+2,w
  8226  0626  00B1               	movwf	??___ftdiv+2
  8227  0627  1003               	clrc
  8228  0628  0D30               	rlf	??___ftdiv+1,w
  8229  0629  0D31               	rlf	??___ftdiv+2,w
  8230  062A  00B2               	movwf	??___ftdiv+3
  8231  062B  0832               	movf	??___ftdiv+3,w
  8232  062C  00B8               	movwf	___ftdiv@sign
  8233  062D  0838               	movf	___ftdiv@sign,w
  8234  062E  1D03               	btfss	3,2
  8235  062F  2E37               	goto	l3029
  8236  0630  3000               	movlw	0
  8237  0631  00A9               	movwf	?___ftdiv
  8238  0632  3000               	movlw	0
  8239  0633  00AA               	movwf	?___ftdiv+1
  8240  0634  3000               	movlw	0
  8241  0635  00AB               	movwf	?___ftdiv+2
  8242  0636  0008               	return
  8243  0637                     l3029:	
  8244  0637  3000               	movlw	0
  8245  0638  00B4               	movwf	___ftdiv@f3
  8246  0639  3000               	movlw	0
  8247  063A  00B5               	movwf	___ftdiv@f3+1
  8248  063B  3000               	movlw	0
  8249  063C  00B6               	movwf	___ftdiv@f3+2
  8250  063D  3089               	movlw	137
  8251  063E  0738               	addwf	___ftdiv@sign,w
  8252  063F  00AF               	movwf	??___ftdiv
  8253  0640  082F               	movf	??___ftdiv,w
  8254  0641  02B7               	subwf	___ftdiv@exp,f
  8255  0642  082C               	movf	___ftdiv@f1,w
  8256  0643  00AF               	movwf	??___ftdiv
  8257  0644  082D               	movf	___ftdiv@f1+1,w
  8258  0645  00B0               	movwf	??___ftdiv+1
  8259  0646  082E               	movf	___ftdiv@f1+2,w
  8260  0647  00B1               	movwf	??___ftdiv+2
  8261  0648  3010               	movlw	16
  8262  0649                     u2985:	
  8263  0649  36B1               	lsrf	??___ftdiv+2,f
  8264  064A  0CB0               	rrf	??___ftdiv+1,f
  8265  064B  0CAF               	rrf	??___ftdiv,f
  8266  064C  0B89               	decfsz	9,f
  8267  064D  2E49               	goto	u2985
  8268  064E  082F               	movf	??___ftdiv,w
  8269  064F  00B2               	movwf	??___ftdiv+3
  8270  0650  0832               	movf	??___ftdiv+3,w
  8271  0651  00B8               	movwf	___ftdiv@sign
  8272  0652  0829               	movf	___ftdiv@f2,w
  8273  0653  00AF               	movwf	??___ftdiv
  8274  0654  082A               	movf	___ftdiv@f2+1,w
  8275  0655  00B0               	movwf	??___ftdiv+1
  8276  0656  082B               	movf	___ftdiv@f2+2,w
  8277  0657  00B1               	movwf	??___ftdiv+2
  8278  0658  3010               	movlw	16
  8279  0659                     u2995:	
  8280  0659  36B1               	lsrf	??___ftdiv+2,f
  8281  065A  0CB0               	rrf	??___ftdiv+1,f
  8282  065B  0CAF               	rrf	??___ftdiv,f
  8283  065C  0B89               	decfsz	9,f
  8284  065D  2E59               	goto	u2995
  8285  065E  082F               	movf	??___ftdiv,w
  8286  065F  00B2               	movwf	??___ftdiv+3
  8287  0660  0832               	movf	??___ftdiv+3,w
  8288  0661  06B8               	xorwf	___ftdiv@sign,f
  8289  0662  3080               	movlw	128
  8290  0663  00AF               	movwf	??___ftdiv
  8291  0664  082F               	movf	??___ftdiv,w
  8292  0665  05B8               	andwf	___ftdiv@sign,f
  8293  0666  17AD               	bsf	___ftdiv@f1+1,7
  8294  0667  30FF               	movlw	255
  8295  0668  05AC               	andwf	___ftdiv@f1,f
  8296  0669  30FF               	movlw	255
  8297  066A  05AD               	andwf	___ftdiv@f1+1,f
  8298  066B  3000               	movlw	0
  8299  066C  05AE               	andwf	___ftdiv@f1+2,f
  8300  066D  17AA               	bsf	___ftdiv@f2+1,7
  8301  066E  30FF               	movlw	255
  8302  066F  05A9               	andwf	___ftdiv@f2,f
  8303  0670  30FF               	movlw	255
  8304  0671  05AA               	andwf	___ftdiv@f2+1,f
  8305  0672  3000               	movlw	0
  8306  0673  05AB               	andwf	___ftdiv@f2+2,f
  8307  0674  3018               	movlw	24
  8308  0675  00AF               	movwf	??___ftdiv
  8309  0676  082F               	movf	??___ftdiv,w
  8310  0677  00B3               	movwf	___ftdiv@cntr
  8311  0678                     l3043:	
  8312  0678  3001               	movlw	1
  8313  0679                     u3005:	
  8314  0679  35B4               	lslf	___ftdiv@f3,f
  8315  067A  0DB5               	rlf	___ftdiv@f3+1,f
  8316  067B  0DB6               	rlf	___ftdiv@f3+2,f
  8317  067C  0B89               	decfsz	9,f
  8318  067D  2E79               	goto	u3005
  8319  067E  082B               	movf	___ftdiv@f2+2,w
  8320  067F  022E               	subwf	___ftdiv@f1+2,w
  8321  0680  1D03               	skipz
  8322  0681  2E88               	goto	u3015
  8323  0682  082A               	movf	___ftdiv@f2+1,w
  8324  0683  022D               	subwf	___ftdiv@f1+1,w
  8325  0684  1D03               	skipz
  8326  0685  2E88               	goto	u3015
  8327  0686  0829               	movf	___ftdiv@f2,w
  8328  0687  022C               	subwf	___ftdiv@f1,w
  8329  0688                     u3015:	
  8330  0688  1C03               	skipc
  8331  0689  2E91               	goto	l3051
  8332  068A  0829               	movf	___ftdiv@f2,w
  8333  068B  02AC               	subwf	___ftdiv@f1,f
  8334  068C  082A               	movf	___ftdiv@f2+1,w
  8335  068D  3BAD               	subwfb	___ftdiv@f1+1,f
  8336  068E  082B               	movf	___ftdiv@f2+2,w
  8337  068F  3BAE               	subwfb	___ftdiv@f1+2,f
  8338  0690  1434               	bsf	___ftdiv@f3,0
  8339  0691                     l3051:	
  8340  0691  3001               	movlw	1
  8341  0692                     u3025:	
  8342  0692  35AC               	lslf	___ftdiv@f1,f
  8343  0693  0DAD               	rlf	___ftdiv@f1+1,f
  8344  0694  0DAE               	rlf	___ftdiv@f1+2,f
  8345  0695  0B89               	decfsz	9,f
  8346  0696  2E92               	goto	u3025
  8347  0697  3001               	movlw	1
  8348  0698  02B3               	subwf	___ftdiv@cntr,f
  8349  0699  1D03               	btfss	3,2
  8350  069A  2E78               	goto	l3043
  8351  069B  0834               	movf	___ftdiv@f3,w
  8352  069C  00A1               	movwf	___ftpack@arg
  8353  069D  0835               	movf	___ftdiv@f3+1,w
  8354  069E  00A2               	movwf	___ftpack@arg+1
  8355  069F  0836               	movf	___ftdiv@f3+2,w
  8356  06A0  00A3               	movwf	___ftpack@arg+2
  8357  06A1  0837               	movf	___ftdiv@exp,w
  8358  06A2  00AF               	movwf	??___ftdiv
  8359  06A3  082F               	movf	??___ftdiv,w
  8360  06A4  00A4               	movwf	___ftpack@exp
  8361  06A5  0838               	movf	___ftdiv@sign,w
  8362  06A6  00B0               	movwf	??___ftdiv+1
  8363  06A7  0830               	movf	??___ftdiv+1,w
  8364  06A8  00A5               	movwf	___ftpack@sign
  8365  06A9  318E  267D         	fcall	___ftpack
  8366  06AB  0020               	movlb	0	; select bank0
  8367  06AC  0821               	movf	?___ftpack,w
  8368  06AD  00A9               	movwf	?___ftdiv
  8369  06AE  0822               	movf	?___ftpack+1,w
  8370  06AF  00AA               	movwf	?___ftdiv+1
  8371  06B0  0823               	movf	?___ftpack+2,w
  8372  06B1  00AB               	movwf	?___ftdiv+2
  8373  06B2  0008               	return
  8374  06B3                     __end_of___ftdiv:	
  8375                           
  8376                           	psect	text34
  8377  02FC                     __ptext34:	
  8378 ;; *************** function ___ftadd *****************
  8379 ;; Defined at:
  8380 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  8381 ;; Parameters:    Size  Location     Type
  8382 ;;  f1              3   17[BANK0 ] float 
  8383 ;;  f2              3   20[BANK0 ] float 
  8384 ;; Auto vars:     Size  Location     Type
  8385 ;;  exp1            1   29[BANK0 ] unsigned char 
  8386 ;;  exp2            1   28[BANK0 ] unsigned char 
  8387 ;;  sign            1   27[BANK0 ] unsigned char 
  8388 ;; Return value:  Size  Location     Type
  8389 ;;                  3   17[BANK0 ] float 
  8390 ;; Registers used:
  8391 ;;		wreg, status,2, status,0, pclath, cstack
  8392 ;; Tracked objects:
  8393 ;;		On entry : 0/0
  8394 ;;		On exit  : 0/0
  8395 ;;		Unchanged: 0/0
  8396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8397 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8398 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8399 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8400 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8401 ;;Total ram usage:       13 bytes
  8402 ;; Hardware stack levels used:    1
  8403 ;; Hardware stack levels required when called:    8
  8404 ;; This function calls:
  8405 ;;		___ftpack
  8406 ;; This function is called by:
  8407 ;;		_getADCValue
  8408 ;;		_loop
  8409 ;;		___ftsub
  8410 ;; This function uses a non-reentrant model
  8411 ;;
  8412                           
  8413                           
  8414                           ;psect for function ___ftadd
  8415  02FC                     ___ftadd:	
  8416                           
  8417                           ;incstack = 0
  8418                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8419  02FC  0020               	movlb	0	; select bank0
  8420  02FD  0831               	movf	___ftadd@f1,w
  8421  02FE  00B7               	movwf	??___ftadd
  8422  02FF  0832               	movf	___ftadd@f1+1,w
  8423  0300  00B8               	movwf	??___ftadd+1
  8424  0301  0833               	movf	___ftadd@f1+2,w
  8425  0302  00B9               	movwf	??___ftadd+2
  8426  0303  1003               	clrc
  8427  0304  0D38               	rlf	??___ftadd+1,w
  8428  0305  0D39               	rlf	??___ftadd+2,w
  8429  0306  00BA               	movwf	??___ftadd+3
  8430  0307  083A               	movf	??___ftadd+3,w
  8431  0308  00BD               	movwf	___ftadd@exp1
  8432  0309  0834               	movf	___ftadd@f2,w
  8433  030A  00B7               	movwf	??___ftadd
  8434  030B  0835               	movf	___ftadd@f2+1,w
  8435  030C  00B8               	movwf	??___ftadd+1
  8436  030D  0836               	movf	___ftadd@f2+2,w
  8437  030E  00B9               	movwf	??___ftadd+2
  8438  030F  1003               	clrc
  8439  0310  0D38               	rlf	??___ftadd+1,w
  8440  0311  0D39               	rlf	??___ftadd+2,w
  8441  0312  00BA               	movwf	??___ftadd+3
  8442  0313  083A               	movf	??___ftadd+3,w
  8443  0314  00BC               	movwf	___ftadd@exp2
  8444  0315  083D               	movf	___ftadd@exp1,w
  8445  0316  1903               	btfsc	3,2
  8446  0317  2B24               	goto	l2451
  8447  0318  083C               	movf	___ftadd@exp2,w
  8448  0319  023D               	subwf	___ftadd@exp1,w
  8449  031A  1803               	skipnc
  8450  031B  2B2B               	goto	l2455
  8451  031C  033D               	decf	___ftadd@exp1,w
  8452  031D  3AFF               	xorlw	255
  8453  031E  073C               	addwf	___ftadd@exp2,w
  8454  031F  00B7               	movwf	??___ftadd
  8455  0320  3019               	movlw	25
  8456  0321  0237               	subwf	??___ftadd,w
  8457  0322  1C03               	skipc
  8458  0323  2B2B               	goto	l2455
  8459  0324                     l2451:	
  8460  0324  0834               	movf	___ftadd@f2,w
  8461  0325  00B1               	movwf	?___ftadd
  8462  0326  0835               	movf	___ftadd@f2+1,w
  8463  0327  00B2               	movwf	?___ftadd+1
  8464  0328  0836               	movf	___ftadd@f2+2,w
  8465  0329  00B3               	movwf	?___ftadd+2
  8466  032A  0008               	return
  8467  032B                     l2455:	
  8468  032B  083C               	movf	___ftadd@exp2,w
  8469  032C  1903               	btfsc	3,2
  8470  032D  0008               	return
  8471  032E  083D               	movf	___ftadd@exp1,w
  8472  032F  023C               	subwf	___ftadd@exp2,w
  8473  0330  1803               	skipnc
  8474  0331  2B3A               	goto	l2461
  8475  0332  033C               	decf	___ftadd@exp2,w
  8476  0333  3AFF               	xorlw	255
  8477  0334  073D               	addwf	___ftadd@exp1,w
  8478  0335  00B7               	movwf	??___ftadd
  8479  0336  3019               	movlw	25
  8480  0337  0237               	subwf	??___ftadd,w
  8481  0338  1803               	btfsc	3,0
  8482  0339  0008               	return
  8483  033A                     l2461:	
  8484  033A  3006               	movlw	6
  8485  033B  00B7               	movwf	??___ftadd
  8486  033C  0837               	movf	??___ftadd,w
  8487  033D  00BB               	movwf	___ftadd@sign
  8488  033E  1BB3               	btfsc	___ftadd@f1+2,7
  8489  033F  17BB               	bsf	___ftadd@sign,7
  8490  0340  1BB6               	btfsc	___ftadd@f2+2,7
  8491  0341  173B               	bsf	___ftadd@sign,6
  8492  0342  17B2               	bsf	___ftadd@f1+1,7
  8493  0343  30FF               	movlw	255
  8494  0344  05B1               	andwf	___ftadd@f1,f
  8495  0345  30FF               	movlw	255
  8496  0346  05B2               	andwf	___ftadd@f1+1,f
  8497  0347  3000               	movlw	0
  8498  0348  05B3               	andwf	___ftadd@f1+2,f
  8499  0349  17B5               	bsf	___ftadd@f2+1,7
  8500  034A  30FF               	movlw	255
  8501  034B  05B4               	andwf	___ftadd@f2,f
  8502  034C  30FF               	movlw	255
  8503  034D  05B5               	andwf	___ftadd@f2+1,f
  8504  034E  3000               	movlw	0
  8505  034F  05B6               	andwf	___ftadd@f2+2,f
  8506  0350  083C               	movf	___ftadd@exp2,w
  8507  0351  023D               	subwf	___ftadd@exp1,w
  8508  0352  1803               	skipnc
  8509  0353  2B76               	goto	l2483
  8510  0354                     l2473:	
  8511  0354  3001               	movlw	1
  8512  0355                     u2105:	
  8513  0355  35B4               	lslf	___ftadd@f2,f
  8514  0356  0DB5               	rlf	___ftadd@f2+1,f
  8515  0357  0DB6               	rlf	___ftadd@f2+2,f
  8516  0358  0B89               	decfsz	9,f
  8517  0359  2B55               	goto	u2105
  8518  035A  3001               	movlw	1
  8519  035B  02BC               	subwf	___ftadd@exp2,f
  8520  035C  083C               	movf	___ftadd@exp2,w
  8521  035D  063D               	xorwf	___ftadd@exp1,w
  8522  035E  1903               	skipnz
  8523  035F  2B71               	goto	l2481
  8524  0360  3001               	movlw	1
  8525  0361  02BB               	subwf	___ftadd@sign,f
  8526  0362  083B               	movf	___ftadd@sign,w
  8527  0363  3907               	andlw	7
  8528  0364  1903               	btfsc	3,2
  8529  0365  2B71               	goto	l2481
  8530  0366  2B54               	goto	l2473
  8531  0367                     l2479:	
  8532  0367  3001               	movlw	1
  8533  0368                     u2135:	
  8534  0368  36B3               	lsrf	___ftadd@f1+2,f
  8535  0369  0CB2               	rrf	___ftadd@f1+1,f
  8536  036A  0CB1               	rrf	___ftadd@f1,f
  8537  036B  0B89               	decfsz	9,f
  8538  036C  2B68               	goto	u2135
  8539  036D  3001               	movlw	1
  8540  036E  00B7               	movwf	??___ftadd
  8541  036F  0837               	movf	??___ftadd,w
  8542  0370  07BD               	addwf	___ftadd@exp1,f
  8543  0371                     l2481:	
  8544  0371  083D               	movf	___ftadd@exp1,w
  8545  0372  063C               	xorwf	___ftadd@exp2,w
  8546  0373  1903               	btfsc	3,2
  8547  0374  2B9B               	goto	l749
  8548  0375  2B67               	goto	l2479
  8549  0376                     l2483:	
  8550  0376  083D               	movf	___ftadd@exp1,w
  8551  0377  023C               	subwf	___ftadd@exp2,w
  8552  0378  1803               	skipnc
  8553  0379  2B9B               	goto	l749
  8554  037A                     l2485:	
  8555  037A  3001               	movlw	1
  8556  037B                     u2165:	
  8557  037B  35B1               	lslf	___ftadd@f1,f
  8558  037C  0DB2               	rlf	___ftadd@f1+1,f
  8559  037D  0DB3               	rlf	___ftadd@f1+2,f
  8560  037E  0B89               	decfsz	9,f
  8561  037F  2B7B               	goto	u2165
  8562  0380  3001               	movlw	1
  8563  0381  02BD               	subwf	___ftadd@exp1,f
  8564  0382  083C               	movf	___ftadd@exp2,w
  8565  0383  063D               	xorwf	___ftadd@exp1,w
  8566  0384  1903               	skipnz
  8567  0385  2B97               	goto	l2493
  8568  0386  3001               	movlw	1
  8569  0387  02BB               	subwf	___ftadd@sign,f
  8570  0388  083B               	movf	___ftadd@sign,w
  8571  0389  3907               	andlw	7
  8572  038A  1903               	btfsc	3,2
  8573  038B  2B97               	goto	l2493
  8574  038C  2B7A               	goto	l2485
  8575  038D                     l2491:	
  8576  038D  3001               	movlw	1
  8577  038E                     u2195:	
  8578  038E  36B6               	lsrf	___ftadd@f2+2,f
  8579  038F  0CB5               	rrf	___ftadd@f2+1,f
  8580  0390  0CB4               	rrf	___ftadd@f2,f
  8581  0391  0B89               	decfsz	9,f
  8582  0392  2B8E               	goto	u2195
  8583  0393  3001               	movlw	1
  8584  0394  00B7               	movwf	??___ftadd
  8585  0395  0837               	movf	??___ftadd,w
  8586  0396  07BC               	addwf	___ftadd@exp2,f
  8587  0397                     l2493:	
  8588  0397  083D               	movf	___ftadd@exp1,w
  8589  0398  063C               	xorwf	___ftadd@exp2,w
  8590  0399  1D03               	skipz
  8591  039A  2B8D               	goto	l2491
  8592  039B                     l749:	
  8593  039B  1FBB               	btfss	___ftadd@sign,7
  8594  039C  2BAD               	goto	l2497
  8595  039D  30FF               	movlw	255
  8596  039E  06B1               	xorwf	___ftadd@f1,f
  8597  039F  30FF               	movlw	255
  8598  03A0  06B2               	xorwf	___ftadd@f1+1,f
  8599  03A1  30FF               	movlw	255
  8600  03A2  06B3               	xorwf	___ftadd@f1+2,f
  8601  03A3  3001               	movlw	1
  8602  03A4  07B1               	addwf	___ftadd@f1,f
  8603  03A5  3000               	movlw	0
  8604  03A6  1803               	skipnc
  8605  03A7  3001               	movlw	1
  8606  03A8  07B2               	addwf	___ftadd@f1+1,f
  8607  03A9  3000               	movlw	0
  8608  03AA  1803               	skipnc
  8609  03AB  3001               	movlw	1
  8610  03AC  07B3               	addwf	___ftadd@f1+2,f
  8611  03AD                     l2497:	
  8612  03AD  1F3B               	btfss	___ftadd@sign,6
  8613  03AE  2BBF               	goto	l2501
  8614  03AF  30FF               	movlw	255
  8615  03B0  06B4               	xorwf	___ftadd@f2,f
  8616  03B1  30FF               	movlw	255
  8617  03B2  06B5               	xorwf	___ftadd@f2+1,f
  8618  03B3  30FF               	movlw	255
  8619  03B4  06B6               	xorwf	___ftadd@f2+2,f
  8620  03B5  3001               	movlw	1
  8621  03B6  07B4               	addwf	___ftadd@f2,f
  8622  03B7  3000               	movlw	0
  8623  03B8  1803               	skipnc
  8624  03B9  3001               	movlw	1
  8625  03BA  07B5               	addwf	___ftadd@f2+1,f
  8626  03BB  3000               	movlw	0
  8627  03BC  1803               	skipnc
  8628  03BD  3001               	movlw	1
  8629  03BE  07B6               	addwf	___ftadd@f2+2,f
  8630  03BF                     l2501:	
  8631  03BF  01BB               	clrf	___ftadd@sign
  8632  03C0  0831               	movf	___ftadd@f1,w
  8633  03C1  07B4               	addwf	___ftadd@f2,f
  8634  03C2  0832               	movf	___ftadd@f1+1,w
  8635  03C3  3DB5               	addwfc	___ftadd@f2+1,f
  8636  03C4  0833               	movf	___ftadd@f1+2,w
  8637  03C5  3DB6               	addwfc	___ftadd@f2+2,f
  8638  03C6  1FB6               	btfss	___ftadd@f2+2,7
  8639  03C7  2BDA               	goto	l2511
  8640  03C8  30FF               	movlw	255
  8641  03C9  06B4               	xorwf	___ftadd@f2,f
  8642  03CA  30FF               	movlw	255
  8643  03CB  06B5               	xorwf	___ftadd@f2+1,f
  8644  03CC  30FF               	movlw	255
  8645  03CD  06B6               	xorwf	___ftadd@f2+2,f
  8646  03CE  3001               	movlw	1
  8647  03CF  07B4               	addwf	___ftadd@f2,f
  8648  03D0  3000               	movlw	0
  8649  03D1  1803               	skipnc
  8650  03D2  3001               	movlw	1
  8651  03D3  07B5               	addwf	___ftadd@f2+1,f
  8652  03D4  3000               	movlw	0
  8653  03D5  1803               	skipnc
  8654  03D6  3001               	movlw	1
  8655  03D7  07B6               	addwf	___ftadd@f2+2,f
  8656  03D8  01BB               	clrf	___ftadd@sign
  8657  03D9  0ABB               	incf	___ftadd@sign,f
  8658  03DA                     l2511:	
  8659  03DA  0834               	movf	___ftadd@f2,w
  8660  03DB  00A1               	movwf	___ftpack@arg
  8661  03DC  0835               	movf	___ftadd@f2+1,w
  8662  03DD  00A2               	movwf	___ftpack@arg+1
  8663  03DE  0836               	movf	___ftadd@f2+2,w
  8664  03DF  00A3               	movwf	___ftpack@arg+2
  8665  03E0  083D               	movf	___ftadd@exp1,w
  8666  03E1  00B7               	movwf	??___ftadd
  8667  03E2  0837               	movf	??___ftadd,w
  8668  03E3  00A4               	movwf	___ftpack@exp
  8669  03E4  083B               	movf	___ftadd@sign,w
  8670  03E5  00B8               	movwf	??___ftadd+1
  8671  03E6  0838               	movf	??___ftadd+1,w
  8672  03E7  00A5               	movwf	___ftpack@sign
  8673  03E8  318E  267D         	fcall	___ftpack
  8674  03EA  0020               	movlb	0	; select bank0
  8675  03EB  0821               	movf	?___ftpack,w
  8676  03EC  00B1               	movwf	?___ftadd
  8677  03ED  0822               	movf	?___ftpack+1,w
  8678  03EE  00B2               	movwf	?___ftadd+1
  8679  03EF  0823               	movf	?___ftpack+2,w
  8680  03F0  00B3               	movwf	?___ftadd+2
  8681  03F1  0008               	return
  8682  03F2                     __end_of___ftadd:	
  8683                           
  8684                           	psect	text35
  8685  0E7D                     __ptext35:	
  8686 ;; *************** function ___ftpack *****************
  8687 ;; Defined at:
  8688 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  8689 ;; Parameters:    Size  Location     Type
  8690 ;;  arg             3    1[BANK0 ] unsigned um
  8691 ;;  exp             1    4[BANK0 ] unsigned char 
  8692 ;;  sign            1    5[BANK0 ] unsigned char 
  8693 ;; Auto vars:     Size  Location     Type
  8694 ;;		None
  8695 ;; Return value:  Size  Location     Type
  8696 ;;                  3    1[BANK0 ] float 
  8697 ;; Registers used:
  8698 ;;		wreg, status,2, status,0
  8699 ;; Tracked objects:
  8700 ;;		On entry : 0/0
  8701 ;;		On exit  : 0/0
  8702 ;;		Unchanged: 0/0
  8703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8704 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8708 ;;Total ram usage:        8 bytes
  8709 ;; Hardware stack levels used:    1
  8710 ;; Hardware stack levels required when called:    7
  8711 ;; This function calls:
  8712 ;;		Nothing
  8713 ;; This function is called by:
  8714 ;;		___ftadd
  8715 ;;		___ftdiv
  8716 ;;		___ftmul
  8717 ;;		___lbtoft
  8718 ;;		___lltoft
  8719 ;;		___lwtoft
  8720 ;; This function uses a non-reentrant model
  8721 ;;
  8722                           
  8723                           
  8724                           ;psect for function ___ftpack
  8725  0E7D                     ___ftpack:	
  8726                           
  8727                           ;incstack = 0
  8728                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  8729  0E7D  0020               	movlb	0	; select bank0
  8730  0E7E  0824               	movf	___ftpack@exp,w
  8731  0E7F  1903               	btfsc	3,2
  8732  0E80  2E86               	goto	l2349
  8733  0E81  0823               	movf	___ftpack@arg+2,w
  8734  0E82  0422               	iorwf	___ftpack@arg+1,w
  8735  0E83  0421               	iorwf	___ftpack@arg,w
  8736  0E84  1D03               	skipz
  8737  0E85  2E97               	goto	l2355
  8738  0E86                     l2349:	
  8739  0E86  3000               	movlw	0
  8740  0E87  00A1               	movwf	?___ftpack
  8741  0E88  3000               	movlw	0
  8742  0E89  00A2               	movwf	?___ftpack+1
  8743  0E8A  3000               	movlw	0
  8744  0E8B  00A3               	movwf	?___ftpack+2
  8745  0E8C  0008               	return
  8746  0E8D                     l2353:	
  8747  0E8D  3001               	movlw	1
  8748  0E8E  00A6               	movwf	??___ftpack
  8749  0E8F  0826               	movf	??___ftpack,w
  8750  0E90  07A4               	addwf	___ftpack@exp,f
  8751  0E91  3001               	movlw	1
  8752  0E92                     u1775:	
  8753  0E92  36A3               	lsrf	___ftpack@arg+2,f
  8754  0E93  0CA2               	rrf	___ftpack@arg+1,f
  8755  0E94  0CA1               	rrf	___ftpack@arg,f
  8756  0E95  0B89               	decfsz	9,f
  8757  0E96  2E92               	goto	u1775
  8758  0E97                     l2355:	
  8759  0E97  30FE               	movlw	254
  8760  0E98  0523               	andwf	___ftpack@arg+2,w
  8761  0E99  1903               	btfsc	3,2
  8762  0E9A  2EB0               	goto	l718
  8763  0E9B  2E8D               	goto	l2353
  8764  0E9C                     l2357:	
  8765  0E9C  3001               	movlw	1
  8766  0E9D  00A6               	movwf	??___ftpack
  8767  0E9E  0826               	movf	??___ftpack,w
  8768  0E9F  07A4               	addwf	___ftpack@exp,f
  8769  0EA0  3001               	movlw	1
  8770  0EA1  07A1               	addwf	___ftpack@arg,f
  8771  0EA2  3000               	movlw	0
  8772  0EA3  1803               	skipnc
  8773  0EA4  3001               	movlw	1
  8774  0EA5  07A2               	addwf	___ftpack@arg+1,f
  8775  0EA6  3000               	movlw	0
  8776  0EA7  1803               	skipnc
  8777  0EA8  3001               	movlw	1
  8778  0EA9  07A3               	addwf	___ftpack@arg+2,f
  8779  0EAA  3001               	movlw	1
  8780  0EAB                     u1795:	
  8781  0EAB  36A3               	lsrf	___ftpack@arg+2,f
  8782  0EAC  0CA2               	rrf	___ftpack@arg+1,f
  8783  0EAD  0CA1               	rrf	___ftpack@arg,f
  8784  0EAE  0B89               	decfsz	9,f
  8785  0EAF  2EAB               	goto	u1795
  8786  0EB0                     l718:	
  8787  0EB0  30FF               	movlw	255
  8788  0EB1  0523               	andwf	___ftpack@arg+2,w
  8789  0EB2  1903               	btfsc	3,2
  8790  0EB3  2EBD               	goto	l2365
  8791  0EB4  2E9C               	goto	l2357
  8792  0EB5                     l2363:	
  8793  0EB5  3001               	movlw	1
  8794  0EB6  02A4               	subwf	___ftpack@exp,f
  8795  0EB7  3001               	movlw	1
  8796  0EB8                     u1815:	
  8797  0EB8  35A1               	lslf	___ftpack@arg,f
  8798  0EB9  0DA2               	rlf	___ftpack@arg+1,f
  8799  0EBA  0DA3               	rlf	___ftpack@arg+2,f
  8800  0EBB  0B89               	decfsz	9,f
  8801  0EBC  2EB8               	goto	u1815
  8802  0EBD                     l2365:	
  8803  0EBD  1BA2               	btfsc	___ftpack@arg+1,7
  8804  0EBE  2EC3               	goto	l725
  8805  0EBF  3002               	movlw	2
  8806  0EC0  0224               	subwf	___ftpack@exp,w
  8807  0EC1  1803               	skipnc
  8808  0EC2  2EB5               	goto	l2363
  8809  0EC3                     l725:	
  8810  0EC3  1824               	btfsc	___ftpack@exp,0
  8811  0EC4  2ECB               	goto	l726
  8812  0EC5  30FF               	movlw	255
  8813  0EC6  05A1               	andwf	___ftpack@arg,f
  8814  0EC7  307F               	movlw	127
  8815  0EC8  05A2               	andwf	___ftpack@arg+1,f
  8816  0EC9  30FF               	movlw	255
  8817  0ECA  05A3               	andwf	___ftpack@arg+2,f
  8818  0ECB                     l726:	
  8819  0ECB  1003               	clrc
  8820  0ECC  0CA4               	rrf	___ftpack@exp,f
  8821  0ECD  0824               	movf	___ftpack@exp,w
  8822  0ECE  00A6               	movwf	??___ftpack
  8823  0ECF  01A7               	clrf	??___ftpack+1
  8824  0ED0  01A8               	clrf	??___ftpack+2
  8825  0ED1  3010               	movlw	16
  8826  0ED2                     u1855:	
  8827  0ED2  35A6               	lslf	??___ftpack,f
  8828  0ED3  0DA7               	rlf	??___ftpack+1,f
  8829  0ED4  0DA8               	rlf	??___ftpack+2,f
  8830  0ED5  0B89               	decfsz	9,f
  8831  0ED6  2ED2               	goto	u1855
  8832  0ED7  0826               	movf	??___ftpack,w
  8833  0ED8  04A1               	iorwf	___ftpack@arg,f
  8834  0ED9  0827               	movf	??___ftpack+1,w
  8835  0EDA  04A2               	iorwf	___ftpack@arg+1,f
  8836  0EDB  0828               	movf	??___ftpack+2,w
  8837  0EDC  04A3               	iorwf	___ftpack@arg+2,f
  8838  0EDD  0825               	movf	___ftpack@sign,w
  8839  0EDE  1903               	btfsc	3,2
  8840  0EDF  0008               	return
  8841  0EE0  17A3               	bsf	___ftpack@arg+2,7
  8842  0EE1  0008               	return
  8843  0EE2                     __end_of___ftpack:	
  8844                           
  8845                           	psect	text36
  8846  086B                     __ptext36:	
  8847 ;; *************** function _checkTXPower *****************
  8848 ;; Defined at:
  8849 ;;		line 89 in file "main.c"
  8850 ;; Parameters:    Size  Location     Type
  8851 ;;		None
  8852 ;; Auto vars:     Size  Location     Type
  8853 ;;  rxPacket        1    9[BANK0 ] PTR struct .
  8854 ;;		 -> RXPacket(33), 
  8855 ;; Return value:  Size  Location     Type
  8856 ;;                  1    wreg      void 
  8857 ;; Registers used:
  8858 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8859 ;; Tracked objects:
  8860 ;;		On entry : 0/0
  8861 ;;		On exit  : 0/0
  8862 ;;		Unchanged: 0/0
  8863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8865 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8868 ;;Total ram usage:        2 bytes
  8869 ;; Hardware stack levels used:    1
  8870 ;; Hardware stack levels required when called:   11
  8871 ;; This function calls:
  8872 ;;		_nrf24l01ChangeTXPower
  8873 ;;		_nrf24l01GetRXPacket
  8874 ;; This function is called by:
  8875 ;;		_loop
  8876 ;; This function uses a non-reentrant model
  8877 ;;
  8878                           
  8879                           
  8880                           ;psect for function _checkTXPower
  8881  086B                     _checkTXPower:	
  8882                           
  8883                           ;main.c: 90: nrf24l01Packet_t * rxPacket = nrf24l01GetRXPacket();
  8884                           
  8885                           ;incstack = 0
  8886                           ; Regs used in _checkTXPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8887  086B  3180  2002  3188   	fcall	_nrf24l01GetRXPacket
  8888  086E  0020               	movlb	0	; select bank0
  8889  086F  00A8               	movwf	??_checkTXPower
  8890  0870  0828               	movf	??_checkTXPower,w
  8891  0871  00A9               	movwf	checkTXPower@rxPacket
  8892                           
  8893                           ;main.c: 92: if (rxPacket->packetData.ACKRPD){
  8894  0872  0829               	movf	checkTXPower@rxPacket,w
  8895  0873  0086               	movwf	6
  8896  0874  3001               	movlw	1	; select bank2/3
  8897  0875  0087               	movwf	7
  8898  0876  1C81               	btfss	1,1
  8899  0877  0008               	return
  8900                           
  8901                           ;main.c: 93: nrf24l01ChangeTXPower(-1);
  8902  0878  30FF               	movlw	255
  8903  0879  00A4               	movwf	nrf24l01ChangeTXPower@addPower
  8904  087A  30FF               	movlw	255
  8905  087B  00A5               	movwf	nrf24l01ChangeTXPower@addPower+1
  8906  087C  318C  2473         	fcall	_nrf24l01ChangeTXPower
  8907  087E  0008               	return
  8908  087F                     __end_of_checkTXPower:	
  8909                           
  8910                           	psect	text37
  8911  0002                     __ptext37:	
  8912 ;; *************** function _nrf24l01GetRXPacket *****************
  8913 ;; Defined at:
  8914 ;;		line 131 in file "nrf24l01.c"
  8915 ;; Parameters:    Size  Location     Type
  8916 ;;		None
  8917 ;; Auto vars:     Size  Location     Type
  8918 ;;		None
  8919 ;; Return value:  Size  Location     Type
  8920 ;;                  1    wreg      PTR struct .
  8921 ;; Registers used:
  8922 ;;		wreg
  8923 ;; Tracked objects:
  8924 ;;		On entry : 0/0
  8925 ;;		On exit  : 0/0
  8926 ;;		Unchanged: 0/0
  8927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8932 ;;Total ram usage:        0 bytes
  8933 ;; Hardware stack levels used:    1
  8934 ;; Hardware stack levels required when called:    7
  8935 ;; This function calls:
  8936 ;;		Nothing
  8937 ;; This function is called by:
  8938 ;;		_checkTXPower
  8939 ;; This function uses a non-reentrant model
  8940 ;;
  8941                           
  8942                           
  8943                           ;psect for function _nrf24l01GetRXPacket
  8944  0002                     _nrf24l01GetRXPacket:	
  8945                           
  8946                           ;nrf24l01.c: 132: return &RXPacket;
  8947                           
  8948                           ;incstack = 0
  8949                           ; Regs used in _nrf24l01GetRXPacket: [wreg]
  8950  0002  3024               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  8951  0003  0008               	return
  8952  0004                     __end_of_nrf24l01GetRXPacket:	
  8953                           
  8954                           	psect	text38
  8955  0C73                     __ptext38:	
  8956 ;; *************** function _nrf24l01ChangeTXPower *****************
  8957 ;; Defined at:
  8958 ;;		line 33 in file "nrf24l01.c"
  8959 ;; Parameters:    Size  Location     Type
  8960 ;;  addPower        2    4[BANK0 ] int 
  8961 ;; Auto vars:     Size  Location     Type
  8962 ;;  rfSetup         1    7[BANK0 ] struct .
  8963 ;; Return value:  Size  Location     Type
  8964 ;;                  1    wreg      void 
  8965 ;; Registers used:
  8966 ;;		wreg, status,2, status,0, pclath, cstack
  8967 ;; Tracked objects:
  8968 ;;		On entry : 0/0
  8969 ;;		On exit  : 0/0
  8970 ;;		Unchanged: 0/0
  8971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8972 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8973 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8974 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8975 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8976 ;;Total ram usage:        4 bytes
  8977 ;; Hardware stack levels used:    1
  8978 ;; Hardware stack levels required when called:   10
  8979 ;; This function calls:
  8980 ;;		_nrf24l01Send
  8981 ;; This function is called by:
  8982 ;;		_checkTXPower
  8983 ;;		_nrf24l01SendPacket
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           
  8988                           ;psect for function _nrf24l01ChangeTXPower
  8989  0C73                     _nrf24l01ChangeTXPower:	
  8990                           
  8991                           ;nrf24l01.c: 35: n_RF_SETUP_t rfSetup;;nrf24l01.c: 36: rfSetup.byte = nrf24l01Send((unsi
      +                          gned) 0b00000000 | (unsigned) 0x06, 0);
  8992                           
  8993                           ;incstack = 0
  8994                           ; Regs used in _nrf24l01ChangeTXPower: [wreg+status,2+status,0+pclath+cstack]
  8995  0C73  0020               	movlb	0	; select bank0
  8996  0C74  01A1               	clrf	nrf24l01Send@data
  8997  0C75  3006               	movlw	6
  8998  0C76  3189  21DF  318C   	fcall	_nrf24l01Send
  8999  0C79  0020               	movlb	0	; select bank0
  9000  0C7A  00A6               	movwf	??_nrf24l01ChangeTXPower
  9001  0C7B  0826               	movf	??_nrf24l01ChangeTXPower,w
  9002  0C7C  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  9003                           
  9004                           ;nrf24l01.c: 38: if (addPower > 0){
  9005  0C7D  0825               	movf	nrf24l01ChangeTXPower@addPower+1,w
  9006  0C7E  3A80               	xorlw	128
  9007  0C7F  00A6               	movwf	??_nrf24l01ChangeTXPower
  9008  0C80  3080               	movlw	128
  9009  0C81  0226               	subwf	??_nrf24l01ChangeTXPower,w
  9010  0C82  1D03               	skipz
  9011  0C83  2C86               	goto	u2875
  9012  0C84  3001               	movlw	1
  9013  0C85  0224               	subwf	nrf24l01ChangeTXPower@addPower,w
  9014  0C86                     u2875:	
  9015  0C86  1C03               	skipc
  9016  0C87  2C98               	goto	l2963
  9017                           
  9018                           ;nrf24l01.c: 39: if (rfSetup.RF_PWR < 3){
  9019  0C88  0020               	movlb	0	; select bank0
  9020  0C89  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9021  0C8A  3903               	andlw	3
  9022  0C8B  3A03               	xorlw	3
  9023  0C8C  1903               	skipnz
  9024  0C8D  2C98               	goto	l2963
  9025                           
  9026                           ;nrf24l01.c: 40: rfSetup.RF_PWR++;
  9027  0C8E  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9028  0C8F  3903               	andlw	3
  9029  0C90  00A6               	movwf	??_nrf24l01ChangeTXPower
  9030  0C91  0AA6               	incf	??_nrf24l01ChangeTXPower,f
  9031  0C92  0DA6               	rlf	??_nrf24l01ChangeTXPower,f
  9032  0C93  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  9033  0C94  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  9034  0C95  39F9               	andlw	-7
  9035  0C96  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  9036  0C97  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  9037  0C98                     l2963:	
  9038                           
  9039                           ;nrf24l01.c: 41: };nrf24l01.c: 42: };nrf24l01.c: 44: if (addPower < 0){
  9040  0C98  0020               	movlb	0	; select bank0
  9041  0C99  1FA5               	btfss	nrf24l01ChangeTXPower@addPower+1,7
  9042  0C9A  2CAA               	goto	l2969
  9043                           
  9044                           ;nrf24l01.c: 45: if (rfSetup.RF_PWR > 0){
  9045  0C9B  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9046  0C9C  3903               	andlw	3
  9047  0C9D  3A00               	xorlw	0
  9048  0C9E  1903               	skipnz
  9049  0C9F  2CAA               	goto	l2969
  9050                           
  9051                           ;nrf24l01.c: 46: rfSetup.RF_PWR--;
  9052  0CA0  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9053  0CA1  3903               	andlw	3
  9054  0CA2  00A6               	movwf	??_nrf24l01ChangeTXPower
  9055  0CA3  03A6               	decf	??_nrf24l01ChangeTXPower,f
  9056  0CA4  0DA6               	rlf	??_nrf24l01ChangeTXPower,f
  9057  0CA5  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  9058  0CA6  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  9059  0CA7  39F9               	andlw	-7
  9060  0CA8  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  9061  0CA9  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  9062  0CAA                     l2969:	
  9063                           
  9064                           ;nrf24l01.c: 47: };nrf24l01.c: 48: };nrf24l01.c: 50: nrf24l01Send((unsigned) 0b00100000 
      +                          | (unsigned) 0x06, rfSetup.byte);
  9065  0CAA  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  9066  0CAB  00A6               	movwf	??_nrf24l01ChangeTXPower
  9067  0CAC  0826               	movf	??_nrf24l01ChangeTXPower,w
  9068  0CAD  00A1               	movwf	nrf24l01Send@data
  9069  0CAE  3026               	movlw	38
  9070  0CAF  3189  21DF         	fcall	_nrf24l01Send
  9071  0CB1  0008               	return
  9072  0CB2                     __end_of_nrf24l01ChangeTXPower:	
  9073                           
  9074                           	psect	text39
  9075  09DF                     __ptext39:	
  9076 ;; *************** function _nrf24l01Send *****************
  9077 ;; Defined at:
  9078 ;;		line 9 in file "nrf24l01.c"
  9079 ;; Parameters:    Size  Location     Type
  9080 ;;  command         1    wreg     unsigned char 
  9081 ;;  data            1    1[BANK0 ] unsigned char 
  9082 ;; Auto vars:     Size  Location     Type
  9083 ;;  command         1    3[BANK0 ] unsigned char 
  9084 ;; Return value:  Size  Location     Type
  9085 ;;                  1    wreg      unsigned char 
  9086 ;; Registers used:
  9087 ;;		wreg, status,2, status,0, pclath, cstack
  9088 ;; Tracked objects:
  9089 ;;		On entry : 0/0
  9090 ;;		On exit  : 0/0
  9091 ;;		Unchanged: 0/0
  9092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9093 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9094 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9095 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9096 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9097 ;;Total ram usage:        3 bytes
  9098 ;; Hardware stack levels used:    1
  9099 ;; Hardware stack levels required when called:    9
  9100 ;; This function calls:
  9101 ;;		_enableInterrupts
  9102 ;;		_nrf24l01SPIEnd
  9103 ;;		_nrf24l01SPISend
  9104 ;;		_nrf24l01SPIStart
  9105 ;; This function is called by:
  9106 ;;		_nrf24l01ChangeTXPower
  9107 ;;		_nrf24l01SetRXMode
  9108 ;;		_nrf24l01SetRXPipe
  9109 ;;		_nrf24l01InitRegisters
  9110 ;; This function uses a non-reentrant model
  9111 ;;
  9112                           
  9113                           
  9114                           ;psect for function _nrf24l01Send
  9115  09DF                     _nrf24l01Send:	
  9116                           
  9117                           ;incstack = 0
  9118                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  9119                           ;nrf24l01Send@command stored from wreg
  9120  09DF  0020               	movlb	0	; select bank0
  9121  09E0  00A3               	movwf	nrf24l01Send@command
  9122                           
  9123                           ;nrf24l01.c: 12: enableInterrupts(0);
  9124  09E1  3000               	movlw	0
  9125  09E2  3188  201F  3189   	fcall	_enableInterrupts
  9126                           
  9127                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  9128  09E5  3188  2027  3189   	fcall	_nrf24l01SPIStart
  9129                           
  9130                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  9131  09E8  0020               	movlb	0	; select bank0
  9132  09E9  0823               	movf	nrf24l01Send@command,w
  9133  09EA  3187  27F2  3189   	fcall	_nrf24l01SPISend
  9134                           
  9135                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  9136  09ED  0020               	movlb	0	; select bank0
  9137  09EE  0821               	movf	nrf24l01Send@data,w
  9138  09EF  3187  27F2  3189   	fcall	_nrf24l01SPISend
  9139  09F2  0020               	movlb	0	; select bank0
  9140  09F3  00A2               	movwf	??_nrf24l01Send
  9141  09F4  0822               	movf	??_nrf24l01Send,w
  9142  09F5  00A1               	movwf	nrf24l01Send@data
  9143                           
  9144                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  9145  09F6  3188  2018  3189   	fcall	_nrf24l01SPIEnd
  9146                           
  9147                           ;nrf24l01.c: 27: enableInterrupts(1);
  9148  09F9  3001               	movlw	1
  9149  09FA  3188  201F         	fcall	_enableInterrupts
  9150                           
  9151                           ;nrf24l01.c: 29: return data;
  9152  09FC  0020               	movlb	0	; select bank0
  9153  09FD  0821               	movf	nrf24l01Send@data,w
  9154  09FE  0008               	return
  9155  09FF                     __end_of_nrf24l01Send:	
  9156                           
  9157                           	psect	text40
  9158  09BF                     __ptext40:	
  9159 ;; *************** function _flashRealod *****************
  9160 ;; Defined at:
  9161 ;;		line 90 in file "flash.c"
  9162 ;; Parameters:    Size  Location     Type
  9163 ;;		None
  9164 ;; Auto vars:     Size  Location     Type
  9165 ;;  i               2   11[BANK0 ] unsigned int 
  9166 ;; Return value:  Size  Location     Type
  9167 ;;                  1    wreg      void 
  9168 ;; Registers used:
  9169 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9170 ;; Tracked objects:
  9171 ;;		On entry : 0/0
  9172 ;;		On exit  : 0/0
  9173 ;;		Unchanged: 0/0
  9174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9176 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9177 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9178 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9179 ;;Total ram usage:        3 bytes
  9180 ;; Hardware stack levels used:    1
  9181 ;; Hardware stack levels required when called:    8
  9182 ;; This function calls:
  9183 ;;		_flashReadByte
  9184 ;; This function is called by:
  9185 ;;		_main
  9186 ;; This function uses a non-reentrant model
  9187 ;;
  9188                           
  9189                           
  9190                           ;psect for function _flashRealod
  9191  09BF                     _flashRealod:	
  9192                           
  9193                           ;flash.c: 92: for (unsigned int i = 0; i < 32; i++){
  9194                           
  9195                           ;incstack = 0
  9196                           ; Regs used in _flashRealod: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9197  09BF  0020               	movlb	0	; select bank0
  9198  09C0  01AB               	clrf	flashRealod@i
  9199  09C1  01AC               	clrf	flashRealod@i+1
  9200  09C2                     L3:	
  9201  09C2  3000               	movlw	0
  9202  09C3  022C               	subwf	flashRealod@i+1,w
  9203  09C4  3020               	movlw	32
  9204  09C5  1903               	skipnz
  9205  09C6  022B               	subwf	flashRealod@i,w
  9206  09C7  1803               	btfsc	3,0
  9207  09C8  0008               	return
  9208                           
  9209                           ;flash.c: 93: romHolder.array[i] = flashReadByte(i);
  9210  09C9  082C               	movf	flashRealod@i+1,w
  9211  09CA  00A2               	movwf	flashReadByte@offset+1
  9212  09CB  082B               	movf	flashRealod@i,w
  9213  09CC  00A1               	movwf	flashReadByte@offset
  9214  09CD  318B  235B  3189   	fcall	_flashReadByte
  9215  09D0  0020               	movlb	0	; select bank0
  9216  09D1  0821               	movf	?_flashReadByte,w
  9217  09D2  00AA               	movwf	??_flashRealod
  9218  09D3  082B               	movf	flashRealod@i,w
  9219  09D4  3EA0               	addlw	(low (_romHolder| (0+256)))& (0+255)
  9220  09D5  0086               	movwf	6
  9221  09D6  3001               	movlw	1	; select bank3/4
  9222  09D7  0087               	movwf	7
  9223  09D8  082A               	movf	??_flashRealod,w
  9224  09D9  0081               	movwf	1
  9225  09DA  3001               	movlw	1
  9226  09DB  07AB               	addwf	flashRealod@i,f
  9227  09DC  3000               	movlw	0
  9228  09DD  3DAC               	addwfc	flashRealod@i+1,f
  9229  09DE  29C2               	goto	L3
  9230  09DF                     __end_of_flashRealod:	
  9231                           
  9232                           	psect	text41
  9233  0B5B                     __ptext41:	
  9234 ;; *************** function _flashReadByte *****************
  9235 ;; Defined at:
  9236 ;;		line 64 in file "flash.c"
  9237 ;; Parameters:    Size  Location     Type
  9238 ;;  offset          2    1[BANK0 ] unsigned int 
  9239 ;; Auto vars:     Size  Location     Type
  9240 ;;  address         2    8[BANK0 ] unsigned int 
  9241 ;;  result          2    6[BANK0 ] unsigned int 
  9242 ;; Return value:  Size  Location     Type
  9243 ;;                  2    1[BANK0 ] unsigned int 
  9244 ;; Registers used:
  9245 ;;		wreg, status,2, status,0
  9246 ;; Tracked objects:
  9247 ;;		On entry : 0/0
  9248 ;;		On exit  : 0/0
  9249 ;;		Unchanged: 0/0
  9250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9251 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9252 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9253 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9254 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9255 ;;Total ram usage:        9 bytes
  9256 ;; Hardware stack levels used:    1
  9257 ;; Hardware stack levels required when called:    7
  9258 ;; This function calls:
  9259 ;;		Nothing
  9260 ;; This function is called by:
  9261 ;;		_flashRealod
  9262 ;; This function uses a non-reentrant model
  9263 ;;
  9264                           
  9265                           
  9266                           ;psect for function _flashReadByte
  9267  0B5B                     _flashReadByte:	
  9268                           
  9269                           ;flash.c: 66: unsigned int address;;flash.c: 68: INTCONbits.GIE = 0;
  9270                           
  9271                           ;incstack = 0
  9272                           ; Regs used in _flashReadByte: [wreg+status,2+status,0]
  9273  0B5B  138B               	bcf	11,7	;volatile
  9274                           
  9275                           ;flash.c: 70: PMCON1 = 0x00;
  9276  0B5C  0031               	movlb	17	; select bank17
  9277  0B5D  0195               	clrf	21	;volsfr
  9278                           
  9279                           ;flash.c: 72: address = (0x2000U - 32) + offset;
  9280  0B5E  0020               	movlb	0	; select bank0
  9281  0B5F  0821               	movf	flashReadByte@offset,w
  9282  0B60  3EE0               	addlw	224
  9283  0B61  00A8               	movwf	flashReadByte@address
  9284  0B62  301F               	movlw	31
  9285  0B63  3D22               	addwfc	flashReadByte@offset+1,w
  9286  0B64  00A9               	movwf	flashReadByte@address+1
  9287                           
  9288                           ;flash.c: 73: PMADRL = (char) (address >> 0);
  9289  0B65  0828               	movf	flashReadByte@address,w
  9290  0B66  0031               	movlb	17	; select bank17
  9291  0B67  0091               	movwf	17	;volatile
  9292                           
  9293                           ;flash.c: 74: PMADRH = (char) (address >> 8);
  9294  0B68  0020               	movlb	0	; select bank0
  9295  0B69  0829               	movf	flashReadByte@address+1,w
  9296  0B6A  0031               	movlb	17	; select bank17
  9297  0B6B  0092               	movwf	18	;volatile
  9298                           
  9299                           ;flash.c: 76: PMCON1bits.RD = 1;
  9300  0B6C  1415               	bsf	21,0	;volsfr
  9301                           
  9302                           ;flash.c: 78: __nop();
  9303  0B6D  0000               	nop
  9304                           
  9305                           ;flash.c: 79: __nop();
  9306  0B6E  0000               	nop
  9307                           
  9308                           ;flash.c: 81: unsigned int result = 0;
  9309  0B6F  0020               	movlb	0	; select bank0
  9310  0B70  01A6               	clrf	flashReadByte@result
  9311  0B71  01A7               	clrf	flashReadByte@result+1
  9312                           
  9313                           ;flash.c: 82: result = PMDATL;
  9314  0B72  0031               	movlb	17	; select bank17
  9315  0B73  0813               	movf	19,w	;volatile
  9316  0B74  0020               	movlb	0	; select bank0
  9317  0B75  00A3               	movwf	??_flashReadByte
  9318  0B76  01A4               	clrf	??_flashReadByte+1
  9319  0B77  0823               	movf	??_flashReadByte,w
  9320  0B78  00A6               	movwf	flashReadByte@result
  9321  0B79  0824               	movf	??_flashReadByte+1,w
  9322  0B7A  00A7               	movwf	flashReadByte@result+1
  9323                           
  9324                           ;flash.c: 83: result|= ( (unsigned) (PMDATH) << 8);
  9325  0B7B  0031               	movlb	17	; select bank17
  9326  0B7C  0814               	movf	20,w	;volatile
  9327  0B7D  0020               	movlb	0	; select bank0
  9328  0B7E  00A3               	movwf	??_flashReadByte
  9329  0B7F  01A4               	clrf	??_flashReadByte+1
  9330  0B80  0823               	movf	??_flashReadByte,w
  9331  0B81  00A4               	movwf	??_flashReadByte+1
  9332  0B82  01A3               	clrf	??_flashReadByte
  9333  0B83  0823               	movf	??_flashReadByte,w
  9334  0B84  04A6               	iorwf	flashReadByte@result,f
  9335  0B85  0824               	movf	??_flashReadByte+1,w
  9336  0B86  04A7               	iorwf	flashReadByte@result+1,f
  9337                           
  9338                           ;flash.c: 85: INTCONbits.GIE = 1;
  9339  0B87  178B               	bsf	11,7	;volatile
  9340                           
  9341                           ;flash.c: 87: return result;
  9342  0B88  0827               	movf	flashReadByte@result+1,w
  9343  0B89  00A2               	movwf	?_flashReadByte+1
  9344  0B8A  0826               	movf	flashReadByte@result,w
  9345  0B8B  00A1               	movwf	?_flashReadByte
  9346  0B8C  0008               	return
  9347  0B8D                     __end_of_flashReadByte:	
  9348                           
  9349                           	psect	intentry
  9350  0004                     __pintentry:	
  9351 ;; *************** function _ISR *****************
  9352 ;; Defined at:
  9353 ;;		line 15 in file "main.c"
  9354 ;; Parameters:    Size  Location     Type
  9355 ;;		None
  9356 ;; Auto vars:     Size  Location     Type
  9357 ;;		None
  9358 ;; Return value:  Size  Location     Type
  9359 ;;                  1    wreg      void 
  9360 ;; Registers used:
  9361 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9362 ;; Tracked objects:
  9363 ;;		On entry : 0/0
  9364 ;;		On exit  : 0/0
  9365 ;;		Unchanged: 0/0
  9366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9371 ;;Total ram usage:        0 bytes
  9372 ;; Hardware stack levels used:    1
  9373 ;; Hardware stack levels required when called:    6
  9374 ;; This function calls:
  9375 ;;		_nrf24l01ISR
  9376 ;; This function is called by:
  9377 ;;		Interrupt level 1
  9378 ;; This function uses a non-reentrant model
  9379 ;;
  9380                           
  9381  0004                     _ISR:	
  9382                           
  9383                           ;incstack = 0
  9384  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9385                           
  9386                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9387  0005  3180               	pagesel	$
  9388                           
  9389                           ;main.c: 17: if (PIR0bits.INTF){
  9390  0006  0020               	movlb	0	; select bank0
  9391  0007  1C10               	btfss	16,0	;volatile
  9392  0008  280D               	goto	i1l211
  9393                           
  9394                           ;main.c: 18: nrf24l01ISR();
  9395  0009  318D  2586         	fcall	_nrf24l01ISR
  9396                           
  9397                           ;main.c: 19: PIR0bits.INTF = 0;
  9398  000B  0020               	movlb	0	; select bank0
  9399  000C  1010               	bcf	16,0	;volatile
  9400  000D                     i1l211:	
  9401  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9402  000E  0009               	retfie
  9403  000F                     __end_of_ISR:	
  9404                           
  9405                           	psect	text43
  9406  0D86                     __ptext43:	
  9407 ;; *************** function _nrf24l01ISR *****************
  9408 ;; Defined at:
  9409 ;;		line 246 in file "nrf24l01.c"
  9410 ;; Parameters:    Size  Location     Type
  9411 ;;		None
  9412 ;; Auto vars:     Size  Location     Type
  9413 ;;  status          1    0[BANK0 ] struct .
  9414 ;; Return value:  Size  Location     Type
  9415 ;;                  1    wreg      void 
  9416 ;; Registers used:
  9417 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9418 ;; Tracked objects:
  9419 ;;		On entry : 0/0
  9420 ;;		On exit  : 0/0
  9421 ;;		Unchanged: 0/0
  9422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9424 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9425 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9426 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9427 ;;Total ram usage:        2 bytes
  9428 ;; Hardware stack levels used:    1
  9429 ;; Hardware stack levels required when called:    5
  9430 ;; This function calls:
  9431 ;;		_exception
  9432 ;;		_nrf24l01CheckACK
  9433 ;;		_nrf24l01ReceivePacket
  9434 ;;		i1_nrf24l01Send
  9435 ;;		i1_nrf24l01SetRXMode
  9436 ;; This function is called by:
  9437 ;;		_ISR
  9438 ;; This function uses a non-reentrant model
  9439 ;;
  9440                           
  9441                           
  9442                           ;psect for function _nrf24l01ISR
  9443  0D86                     _nrf24l01ISR:	
  9444                           
  9445                           ;nrf24l01.c: 248: n_STATUS_t status;;nrf24l01.c: 249: status.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x07, 0);
  9446                           
  9447                           ;incstack = 0
  9448                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9449  0D86  01F1               	clrf	i1nrf24l01Send@data
  9450  0D87  3007               	movlw	7
  9451  0D88  3188  20F8  318D   	fcall	i1_nrf24l01Send
  9452  0D8B  00FD               	movwf	??_nrf24l01ISR
  9453  0D8C  087D               	movf	??_nrf24l01ISR,w
  9454  0D8D  0020               	movlb	0	; select bank0
  9455  0D8E  00A0               	movwf	nrf24l01ISR@status
  9456                           
  9457                           ;nrf24l01.c: 254: };nrf24l01.c: 257: if (status.byte == 0xFF){
  9458  0D8F  0A20               	incf	nrf24l01ISR@status,w
  9459  0D90  1D03               	btfss	3,2
  9460  0D91  2D96               	goto	i1l3793
  9461                           
  9462                           ;nrf24l01.c: 258: exception(2);
  9463  0D92  3002               	movlw	2
  9464  0D93  3188  2094  318D   	fcall	_exception
  9465  0D96                     i1l3793:	
  9466                           
  9467                           ;nrf24l01.c: 259: };nrf24l01.c: 261: if (status.TX_DS){
  9468  0D96  0020               	movlb	0	; select bank0
  9469  0D97  1EA0               	btfss	nrf24l01ISR@status,5
  9470  0D98  2DA6               	goto	i1l3801
  9471                           
  9472                           ;nrf24l01.c: 264: nrf24l01.TXBusy = 0;
  9473  0D99  106E               	bcf	_nrf24l01,0	;volatile
  9474                           
  9475                           ;nrf24l01.c: 267: if (!nrf24l01.RXMode){
  9476  0D9A  196E               	btfsc	_nrf24l01,2	;volatile
  9477  0D9B  2DA6               	goto	i1l3801
  9478                           
  9479                           ;nrf24l01.c: 268: if (TXPacket->packetData.ACKRequest){
  9480  0D9C  0021               	movlb	1	; select bank1
  9481  0D9D  086D               	movf	_TXPacket^(0+128),w
  9482  0D9E  0086               	movwf	6
  9483  0D9F  0187               	clrf	7
  9484  0DA0  1D01               	btfss	1,2
  9485  0DA1  2DA6               	goto	i1l3801
  9486                           
  9487                           ;nrf24l01.c: 271: nrf24l01SetRXMode(1);
  9488  0DA2  3001               	movlw	1
  9489  0DA3  318B  238D  318D   	fcall	i1_nrf24l01SetRXMode
  9490  0DA6                     i1l3801:	
  9491                           
  9492                           ;nrf24l01.c: 272: };nrf24l01.c: 273: };nrf24l01.c: 274: };nrf24l01.c: 277: if (status.RX
      +                          _DR){
  9493  0DA6  0020               	movlb	0	; select bank0
  9494  0DA7  1F20               	btfss	nrf24l01ISR@status,6
  9495  0DA8  2DCB               	goto	i1l3815
  9496                           
  9497                           ;nrf24l01.c: 280: if (!nrf24l01.RXPending){
  9498  0DA9  18EE               	btfsc	_nrf24l01,1	;volatile
  9499  0DAA  2DCA               	goto	i1l360
  9500                           
  9501                           ;nrf24l01.c: 283: nrf24l01.RXPending = 1;
  9502  0DAB  14EE               	bsf	_nrf24l01,1	;volatile
  9503                           
  9504                           ;nrf24l01.c: 285: nrf24l01ReceivePacket();
  9505  0DAC  318D  2539  318D   	fcall	_nrf24l01ReceivePacket
  9506                           
  9507                           ;nrf24l01.c: 288: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  9508  0DAF  01F1               	clrf	i1nrf24l01Send@data
  9509  0DB0  3009               	movlw	9
  9510  0DB1  3188  20F8  318D   	fcall	i1_nrf24l01Send
  9511  0DB4  00FD               	movwf	??_nrf24l01ISR
  9512  0DB5  0022               	movlb	2	; select bank2
  9513  0DB6  0824               	movf	_RXPacket^(0+256),w
  9514  0DB7  067D               	xorwf	??_nrf24l01ISR,w
  9515  0DB8  39FE               	andlw	-2
  9516  0DB9  067D               	xorwf	??_nrf24l01ISR,w
  9517  0DBA  00A4               	movwf	_RXPacket^(0+256)
  9518                           
  9519                           ;nrf24l01.c: 291: RXPacket.packetData.Pipe = status.RX_P_NO;
  9520  0DBB  0020               	movlb	0	; select bank0
  9521  0DBC  0C20               	rrf	nrf24l01ISR@status,w
  9522  0DBD  3907               	andlw	7
  9523  0DBE  00FD               	movwf	??_nrf24l01ISR
  9524  0DBF  0EFD               	swapf	??_nrf24l01ISR,f
  9525  0DC0  0022               	movlb	2	; select bank2
  9526  0DC1  0824               	movf	_RXPacket^(0+256),w
  9527  0DC2  067D               	xorwf	??_nrf24l01ISR,w
  9528  0DC3  398F               	andlw	-113
  9529  0DC4  067D               	xorwf	??_nrf24l01ISR,w
  9530  0DC5  00A4               	movwf	_RXPacket^(0+256)
  9531                           
  9532                           ;nrf24l01.c: 293: nrf24l01CheckACK();
  9533  0DC6  318A  2220  318D   	fcall	_nrf24l01CheckACK
  9534                           
  9535                           ;nrf24l01.c: 294: }
  9536  0DC9  2DCB               	goto	i1l3815
  9537  0DCA                     i1l360:	
  9538                           
  9539                           ;nrf24l01.c: 297: else{;nrf24l01.c: 300: status.RX_DR = 0;
  9540  0DCA  1320               	bcf	nrf24l01ISR@status,6
  9541  0DCB                     i1l3815:	
  9542                           
  9543                           ;nrf24l01.c: 301: };nrf24l01.c: 303: };nrf24l01.c: 306: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.byte);
  9544  0DCB  0020               	movlb	0	; select bank0
  9545  0DCC  0820               	movf	nrf24l01ISR@status,w
  9546  0DCD  00FD               	movwf	??_nrf24l01ISR
  9547  0DCE  087D               	movf	??_nrf24l01ISR,w
  9548  0DCF  00F1               	movwf	i1nrf24l01Send@data
  9549  0DD0  3027               	movlw	39
  9550  0DD1  3188  20F8         	fcall	i1_nrf24l01Send
  9551  0DD3  0008               	return
  9552  0DD4                     __end_of_nrf24l01ISR:	
  9553                           
  9554                           	psect	text44
  9555  0D39                     __ptext44:	
  9556 ;; *************** function _nrf24l01ReceivePacket *****************
  9557 ;; Defined at:
  9558 ;;		line 135 in file "nrf24l01.c"
  9559 ;; Parameters:    Size  Location     Type
  9560 ;;		None
  9561 ;; Auto vars:     Size  Location     Type
  9562 ;;  i               1   10[COMMON] unsigned char 
  9563 ;;  width           1    9[COMMON] unsigned char 
  9564 ;; Return value:  Size  Location     Type
  9565 ;;                  1    wreg      void 
  9566 ;; Registers used:
  9567 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9568 ;; Tracked objects:
  9569 ;;		On entry : 0/0
  9570 ;;		On exit  : 0/0
  9571 ;;		Unchanged: 0/0
  9572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9574 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9575 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9576 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9577 ;;Total ram usage:        3 bytes
  9578 ;; Hardware stack levels used:    1
  9579 ;; Hardware stack levels required when called:    3
  9580 ;; This function calls:
  9581 ;;		_nrf24l01CEHigh
  9582 ;;		_nrf24l01CELow
  9583 ;;		_nrf24l01SPIEnd
  9584 ;;		_nrf24l01SPISend
  9585 ;;		_nrf24l01SPIStart
  9586 ;;		i1_memset
  9587 ;;		i1_nrf24l01Send
  9588 ;; This function is called by:
  9589 ;;		_nrf24l01ISR
  9590 ;; This function uses a non-reentrant model
  9591 ;;
  9592                           
  9593                           
  9594                           ;psect for function _nrf24l01ReceivePacket
  9595  0D39                     _nrf24l01ReceivePacket:	
  9596                           
  9597                           ;nrf24l01.c: 138: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  9598                           
  9599                           ;incstack = 0
  9600                           ; Regs used in _nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9601  0D39  3025               	movlw	low (_RXPacket+1)
  9602  0D3A  00F0               	movwf	i1memset@p1
  9603  0D3B  3001               	movlw	high (_RXPacket+1)
  9604  0D3C  00F1               	movwf	i1memset@p1+1
  9605  0D3D  3000               	movlw	0
  9606  0D3E  00F2               	movwf	i1memset@c
  9607  0D3F  00F3               	movwf	i1memset@c+1
  9608  0D40  3020               	movlw	32
  9609  0D41  00F4               	movwf	i1memset@n
  9610  0D42  3000               	movlw	0
  9611  0D43  00F5               	movwf	i1memset@n+1
  9612  0D44  3188  20AC  318D   	fcall	i1_memset
  9613                           
  9614                           ;nrf24l01.c: 139: RXPacket.packetData.byte = 0x00;
  9615  0D47  0022               	movlb	2	; select bank2
  9616  0D48  01A4               	clrf	_RXPacket^(0+256)
  9617                           
  9618                           ;nrf24l01.c: 142: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  9619  0D49  01F1               	clrf	i1nrf24l01Send@data
  9620  0D4A  3060               	movlw	96
  9621  0D4B  3188  20F8  318D   	fcall	i1_nrf24l01Send
  9622  0D4E  00F8               	movwf	??_nrf24l01ReceivePacket
  9623  0D4F  0878               	movf	??_nrf24l01ReceivePacket,w
  9624  0D50  00F9               	movwf	nrf24l01ReceivePacket@width
  9625                           
  9626                           ;nrf24l01.c: 143: unsigned char i = 0;
  9627  0D51  01FA               	clrf	nrf24l01ReceivePacket@i
  9628                           
  9629                           ;nrf24l01.c: 146: nrf24l01CELow();
  9630  0D52  3188  2009  318D   	fcall	_nrf24l01CELow
  9631                           
  9632                           ;nrf24l01.c: 149: nrf24l01SPIStart();
  9633  0D55  3188  2027  318D   	fcall	_nrf24l01SPIStart
  9634                           
  9635                           ;nrf24l01.c: 152: nrf24l01SPISend((unsigned) 0b01100001);
  9636  0D58  3061               	movlw	97
  9637  0D59  3187  27F2  318D   	fcall	_nrf24l01SPISend
  9638                           
  9639                           ;nrf24l01.c: 155: RXPacket.packetData.byte = nrf24l01SPISend(0);
  9640  0D5C  3000               	movlw	0
  9641  0D5D  3187  27F2  318D   	fcall	_nrf24l01SPISend
  9642  0D60  00F8               	movwf	??_nrf24l01ReceivePacket
  9643  0D61  0878               	movf	??_nrf24l01ReceivePacket,w
  9644  0D62  0022               	movlb	2	; select bank2
  9645  0D63  00A4               	movwf	_RXPacket^(0+256)
  9646                           
  9647                           ;nrf24l01.c: 156: width--;
  9648  0D64  3001               	movlw	1
  9649  0D65  02F9               	subwf	nrf24l01ReceivePacket@width,f
  9650                           
  9651                           ;nrf24l01.c: 158: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
  9652  0D66  01FA               	clrf	nrf24l01ReceivePacket@i
  9653  0D67  2D78               	goto	i1l3777
  9654  0D68                     i1l3773:	
  9655                           
  9656                           ;nrf24l01.c: 160: RXPacket.Message[i] = nrf24l01SPISend(0);
  9657  0D68  3000               	movlw	0
  9658  0D69  3187  27F2  318D   	fcall	_nrf24l01SPISend
  9659  0D6C  00F8               	movwf	??_nrf24l01ReceivePacket
  9660  0D6D  087A               	movf	nrf24l01ReceivePacket@i,w
  9661  0D6E  3E25               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  9662  0D6F  0086               	movwf	6
  9663  0D70  3001               	movlw	1	; select bank2/3
  9664  0D71  0087               	movwf	7
  9665  0D72  0878               	movf	??_nrf24l01ReceivePacket,w
  9666  0D73  0081               	movwf	1
  9667  0D74  3001               	movlw	1
  9668  0D75  00F8               	movwf	??_nrf24l01ReceivePacket
  9669  0D76  0878               	movf	??_nrf24l01ReceivePacket,w
  9670  0D77  07FA               	addwf	nrf24l01ReceivePacket@i,f
  9671  0D78                     i1l3777:	
  9672  0D78  0879               	movf	nrf24l01ReceivePacket@width,w
  9673  0D79  027A               	subwf	nrf24l01ReceivePacket@i,w
  9674  0D7A  1803               	skipnc
  9675  0D7B  2D80               	goto	i1l3781
  9676  0D7C  3020               	movlw	32
  9677  0D7D  027A               	subwf	nrf24l01ReceivePacket@i,w
  9678  0D7E  1C03               	skipc
  9679  0D7F  2D68               	goto	i1l3773
  9680  0D80                     i1l3781:	
  9681                           
  9682                           ;nrf24l01.c: 161: };nrf24l01.c: 164: nrf24l01SPIEnd();
  9683  0D80  3188  2018  318D   	fcall	_nrf24l01SPIEnd
  9684                           
  9685                           ;nrf24l01.c: 167: nrf24l01CEHigh();
  9686  0D83  3188  2006         	fcall	_nrf24l01CEHigh
  9687  0D85  0008               	return
  9688  0D86                     __end_of_nrf24l01ReceivePacket:	
  9689                           
  9690                           	psect	text45
  9691  08AC                     __ptext45:	
  9692 ;; *************** function i1_memset *****************
  9693 ;; Defined at:
  9694 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  9695 ;; Parameters:    Size  Location     Type
  9696 ;;  p1              2    0[COMMON] PTR void 
  9697 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  9698 ;;  c               2    2[COMMON] int 
  9699 ;;  n               2    4[COMMON] unsigned int 
  9700 ;; Auto vars:     Size  Location     Type
  9701 ;;  memset          2    6[COMMON] PTR unsigned char 
  9702 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  9703 ;; Return value:  Size  Location     Type
  9704 ;;                  1    wreg      PTR void 
  9705 ;; Registers used:
  9706 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9707 ;; Tracked objects:
  9708 ;;		On entry : 0/0
  9709 ;;		On exit  : 0/0
  9710 ;;		Unchanged: 0/0
  9711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9712 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9713 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9715 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9716 ;;Total ram usage:        8 bytes
  9717 ;; Hardware stack levels used:    1
  9718 ;; This function calls:
  9719 ;;		Nothing
  9720 ;; This function is called by:
  9721 ;;		_nrf24l01ReceivePacket
  9722 ;; This function uses a non-reentrant model
  9723 ;;
  9724                           
  9725                           
  9726                           ;psect for function i1_memset
  9727  08AC                     i1_memset:	
  9728                           
  9729                           ;incstack = 0
  9730                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  9731  08AC  0871               	movf	i1memset@p1+1,w
  9732  08AD  00F7               	movwf	i1memset@p+1
  9733  08AE  0870               	movf	i1memset@p1,w
  9734  08AF  00F6               	movwf	i1memset@p
  9735  08B0                     i1l3687:	
  9736  08B0  3001               	movlw	1
  9737  08B1  02F4               	subwf	i1memset@n,f
  9738  08B2  3000               	movlw	0
  9739  08B3  3BF5               	subwfb	i1memset@n+1,f
  9740  08B4  0A74               	incf	i1memset@n,w
  9741  08B5  1903               	btfsc	3,2
  9742  08B6  0A75               	incf	i1memset@n+1,w
  9743  08B7  1903               	btfsc	3,2
  9744  08B8  0008               	return
  9745  08B9  0876               	movf	i1memset@p,w
  9746  08BA  0086               	movwf	6
  9747  08BB  0877               	movf	i1memset@p+1,w
  9748  08BC  0087               	movwf	7
  9749  08BD  0872               	movf	i1memset@c,w
  9750  08BE  0081               	movwf	1
  9751  08BF  3001               	movlw	1
  9752  08C0  07F6               	addwf	i1memset@p,f
  9753  08C1  3000               	movlw	0
  9754  08C2  3DF7               	addwfc	i1memset@p+1,f
  9755  08C3  28B0               	goto	i1l3687
  9756  08C4                     __end_ofi1_memset:	
  9757                           ;	Return value of i1_memset is never used
  9758                           
  9759                           
  9760                           	psect	text46
  9761  0A20                     __ptext46:	
  9762 ;; *************** function _nrf24l01CheckACK *****************
  9763 ;; Defined at:
  9764 ;;		line 98 in file "nrf24l01.c"
  9765 ;; Parameters:    Size  Location     Type
  9766 ;;		None
  9767 ;; Auto vars:     Size  Location     Type
  9768 ;;		None
  9769 ;; Return value:  Size  Location     Type
  9770 ;;                  1    wreg      void 
  9771 ;; Registers used:
  9772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9773 ;; Tracked objects:
  9774 ;;		On entry : 0/0
  9775 ;;		On exit  : 0/0
  9776 ;;		Unchanged: 0/0
  9777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9780 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9781 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9782 ;;Total ram usage:        1 bytes
  9783 ;; Hardware stack levels used:    1
  9784 ;; Hardware stack levels required when called:    4
  9785 ;; This function calls:
  9786 ;;		_strcmp
  9787 ;;		i1_nrf24l01SetRXMode
  9788 ;; This function is called by:
  9789 ;;		_nrf24l01ISR
  9790 ;; This function uses a non-reentrant model
  9791 ;;
  9792                           
  9793                           
  9794                           ;psect for function _nrf24l01CheckACK
  9795  0A20                     _nrf24l01CheckACK:	
  9796                           
  9797                           ;nrf24l01.c: 102: if (!RXPacket.packetData.IsACK){
  9798                           
  9799                           ;incstack = 0
  9800                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9801  0A20  0022               	movlb	2	; select bank2
  9802  0A21  1DA4               	btfss	_RXPacket^(0+256),3
  9803  0A22  0008               	return
  9804                           
  9805                           ;nrf24l01.c: 104: };nrf24l01.c: 107: nrf24l01.RXPending = 0;
  9806                           
  9807                           ;nrf24l01.c: 103: return;
  9808  0A23  0020               	movlb	0	; select bank0
  9809  0A24  10EE               	bcf	_nrf24l01,1	;volatile
  9810                           
  9811                           ;nrf24l01.c: 110: if (!TXPacket->packetData.ACKRequest){
  9812  0A25  0021               	movlb	1	; select bank1
  9813  0A26  086D               	movf	_TXPacket^(0+128),w
  9814  0A27  0086               	movwf	6
  9815  0A28  0187               	clrf	7
  9816  0A29  1D01               	btfss	1,2
  9817  0A2A  0008               	return
  9818                           
  9819                           ;nrf24l01.c: 112: };nrf24l01.c: 115: if (strcmp(TXPacket->Message, RXPacket.Message) != 
      +                          0){
  9820                           
  9821                           ;nrf24l01.c: 111: return;
  9822  0A2B  3025               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  9823  0A2C  00F7               	movwf	??_nrf24l01CheckACK
  9824  0A2D  0877               	movf	??_nrf24l01CheckACK,w
  9825  0A2E  00F0               	movwf	strcmp@s2
  9826  0A2F  086D               	movf	_TXPacket^(0+128),w
  9827  0A30  3E01               	addlw	1
  9828  0A31  318A  2262  318A   	fcall	_strcmp
  9829  0A34  0870               	movf	?_strcmp,w
  9830  0A35  0471               	iorwf	?_strcmp+1,w
  9831  0A36  1D03               	btfss	3,2
  9832  0A37  0008               	return
  9833                           
  9834                           ;nrf24l01.c: 117: };nrf24l01.c: 124: TXPacket->packetData.ACKRequest = 0;
  9835                           
  9836                           ;nrf24l01.c: 116: return;
  9837  0A38  0021               	movlb	1	; select bank1
  9838  0A39  086D               	movf	_TXPacket^(0+128),w
  9839  0A3A  0086               	movwf	6
  9840  0A3B  0187               	clrf	7
  9841  0A3C  1101               	bcf	1,2
  9842                           
  9843                           ;nrf24l01.c: 127: nrf24l01SetRXMode(0);
  9844  0A3D  3000               	movlw	0
  9845  0A3E  318B  238D         	fcall	i1_nrf24l01SetRXMode
  9846  0A40  0008               	return
  9847  0A41                     __end_of_nrf24l01CheckACK:	
  9848                           
  9849                           	psect	text47
  9850  0B8D                     __ptext47:	
  9851 ;; *************** function i1_nrf24l01SetRXMode *****************
  9852 ;; Defined at:
  9853 ;;		line 54 in file "nrf24l01.c"
  9854 ;; Parameters:    Size  Location     Type
  9855 ;;  rxMode          1    wreg     unsigned char 
  9856 ;; Auto vars:     Size  Location     Type
  9857 ;;  rxMode          1    6[COMMON] unsigned char 
  9858 ;;  nrf24l01SetR    1    5[COMMON] struct .
  9859 ;; Return value:  Size  Location     Type
  9860 ;;                  1    wreg      void 
  9861 ;; Registers used:
  9862 ;;		wreg, status,2, status,0, pclath, cstack
  9863 ;; Tracked objects:
  9864 ;;		On entry : 0/0
  9865 ;;		On exit  : 0/0
  9866 ;;		Unchanged: 0/0
  9867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9869 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9870 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9871 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9872 ;;Total ram usage:        3 bytes
  9873 ;; Hardware stack levels used:    1
  9874 ;; Hardware stack levels required when called:    3
  9875 ;; This function calls:
  9876 ;;		_nrf24l01CEHigh
  9877 ;;		_nrf24l01CELow
  9878 ;;		i1_nrf24l01Send
  9879 ;; This function is called by:
  9880 ;;		_nrf24l01CheckACK
  9881 ;;		_nrf24l01ISR
  9882 ;; This function uses a non-reentrant model
  9883 ;;
  9884                           
  9885                           
  9886                           ;psect for function i1_nrf24l01SetRXMode
  9887  0B8D                     i1_nrf24l01SetRXMode:	
  9888                           
  9889                           ;incstack = 0
  9890                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  9891                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
  9892  0B8D  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
  9893                           
  9894                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  9895  0B8E  01F1               	clrf	i1nrf24l01Send@data
  9896  0B8F  3000               	movlw	0
  9897  0B90  3188  20F8  318B   	fcall	i1_nrf24l01Send
  9898  0B93  00F4               	movwf	??i1_nrf24l01SetRXMode
  9899  0B94  0874               	movf	??i1_nrf24l01SetRXMode,w
  9900  0B95  00F5               	movwf	i1nrf24l01SetRXMode@config
  9901                           
  9902                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  9903  0B96  0875               	movf	i1nrf24l01SetRXMode@config,w
  9904  0B97  3901               	andlw	1
  9905  0B98  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
  9906  0B99  1903               	skipnz
  9907  0B9A  2BBD               	goto	i1l3087
  9908                           
  9909                           ;nrf24l01.c: 65: nrf24l01CELow();
  9910  0B9B  3188  2009  318B   	fcall	_nrf24l01CELow
  9911                           
  9912                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(16000000/4000000.0)));
  9913  0B9E  30A0               	movlw	160
  9914  0B9F                     u383_27:	
  9915  0B9F  3200               	nop2
  9916  0BA0  0B89               	decfsz	9,f
  9917  0BA1  2B9F               	goto	u383_27
  9918                           
  9919                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  9920  0BA2  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  9921  0BA3  3901               	andlw	1
  9922  0BA4  1075               	bcf	i1nrf24l01SetRXMode@config,0
  9923  0BA5  1D03               	skipz
  9924  0BA6  1475               	bsf	i1nrf24l01SetRXMode@config,0
  9925                           
  9926                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  9927  0BA7  0875               	movf	i1nrf24l01SetRXMode@config,w
  9928  0BA8  00F4               	movwf	??i1_nrf24l01SetRXMode
  9929  0BA9  0874               	movf	??i1_nrf24l01SetRXMode,w
  9930  0BAA  00F1               	movwf	i1nrf24l01Send@data
  9931  0BAB  3020               	movlw	32
  9932  0BAC  3188  20F8  318B   	fcall	i1_nrf24l01Send
  9933                           
  9934                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(16000000/4000000.0)));
  9935  0BAF  30A0               	movlw	160
  9936  0BB0                     u384_27:	
  9937  0BB0  3200               	nop2
  9938  0BB1  0B89               	decfsz	9,f
  9939  0BB2  2BB0               	goto	u384_27
  9940                           
  9941                           ;nrf24l01.c: 76: if (rxMode){
  9942  0BB3  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  9943  0BB4  1903               	btfsc	3,2
  9944  0BB5  2BBD               	goto	i1l3087
  9945                           
  9946                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  9947  0BB6  3188  2006  318B   	fcall	_nrf24l01CEHigh
  9948                           
  9949                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(16000000/4000000.0)));
  9950  0BB9  30A0               	movlw	160
  9951  0BBA                     u385_27:	
  9952  0BBA  3200               	nop2
  9953  0BBB  0B89               	decfsz	9,f
  9954  0BBC  2BBA               	goto	u385_27
  9955  0BBD                     i1l3087:	
  9956                           
  9957                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  9958  0BBD  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  9959  0BBE  3901               	andlw	1
  9960  0BBF  0020               	movlb	0	; select bank0
  9961  0BC0  116E               	bcf	_nrf24l01,2	;volatile
  9962  0BC1  1D03               	skipz
  9963  0BC2  156E               	bsf	_nrf24l01,2	;volatile
  9964  0BC3  0008               	return
  9965  0BC4                     __end_ofi1_nrf24l01SetRXMode:	
  9966                           
  9967                           	psect	text48
  9968  08F8                     __ptext48:	
  9969 ;; *************** function i1_nrf24l01Send *****************
  9970 ;; Defined at:
  9971 ;;		line 9 in file "nrf24l01.c"
  9972 ;; Parameters:    Size  Location     Type
  9973 ;;  command         1    wreg     unsigned char 
  9974 ;;  data            1    1[COMMON] unsigned char 
  9975 ;; Auto vars:     Size  Location     Type
  9976 ;;  command         1    3[COMMON] unsigned char 
  9977 ;; Return value:  Size  Location     Type
  9978 ;;                  1    wreg      unsigned char 
  9979 ;; Registers used:
  9980 ;;		wreg, status,2, status,0, pclath, cstack
  9981 ;; Tracked objects:
  9982 ;;		On entry : 0/0
  9983 ;;		On exit  : 0/0
  9984 ;;		Unchanged: 0/0
  9985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9986 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9987 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9989 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9990 ;;Total ram usage:        3 bytes
  9991 ;; Hardware stack levels used:    1
  9992 ;; Hardware stack levels required when called:    2
  9993 ;; This function calls:
  9994 ;;		_enableInterrupts
  9995 ;;		_nrf24l01SPIEnd
  9996 ;;		_nrf24l01SPISend
  9997 ;;		_nrf24l01SPIStart
  9998 ;; This function is called by:
  9999 ;;		_nrf24l01ReceivePacket
 10000 ;;		_nrf24l01ISR
 10001 ;;		i1_nrf24l01SetRXMode
 10002 ;; This function uses a non-reentrant model
 10003 ;;
 10004                           
 10005                           
 10006                           ;psect for function i1_nrf24l01Send
 10007  08F8                     i1_nrf24l01Send:	
 10008                           
 10009                           ;incstack = 0
 10010                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
 10011                           ;i1nrf24l01Send@command stored from wreg
 10012  08F8  00F3               	movwf	i1nrf24l01Send@command
 10013                           
 10014                           ;nrf24l01.c: 12: enableInterrupts(0);
 10015  08F9  3000               	movlw	0
 10016  08FA  3188  201F  3188   	fcall	_enableInterrupts
 10017                           
 10018                           ;nrf24l01.c: 15: nrf24l01SPIStart();
 10019  08FD  3188  2027  3188   	fcall	_nrf24l01SPIStart
 10020                           
 10021                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
 10022  0900  0873               	movf	i1nrf24l01Send@command,w
 10023  0901  3187  27F2  3188   	fcall	_nrf24l01SPISend
 10024                           
 10025                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
 10026  0904  0871               	movf	i1nrf24l01Send@data,w
 10027  0905  3187  27F2  3188   	fcall	_nrf24l01SPISend
 10028  0908  00F2               	movwf	??i1_nrf24l01Send
 10029  0909  0872               	movf	??i1_nrf24l01Send,w
 10030  090A  00F1               	movwf	i1nrf24l01Send@data
 10031                           
 10032                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
 10033  090B  3188  2018  3188   	fcall	_nrf24l01SPIEnd
 10034                           
 10035                           ;nrf24l01.c: 27: enableInterrupts(1);
 10036  090E  3001               	movlw	1
 10037  090F  3188  201F         	fcall	_enableInterrupts
 10038                           
 10039                           ;nrf24l01.c: 29: return data;
 10040  0911  0871               	movf	i1nrf24l01Send@data,w
 10041  0912  0008               	return
 10042  0913                     __end_ofi1_nrf24l01Send:	
 10043                           
 10044                           	psect	text49
 10045  0827                     __ptext49:	
 10046 ;; *************** function _nrf24l01SPIStart *****************
 10047 ;; Defined at:
 10048 ;;		line 65 in file "interface.c"
 10049 ;; Parameters:    Size  Location     Type
 10050 ;;		None
 10051 ;; Auto vars:     Size  Location     Type
 10052 ;;		None
 10053 ;; Return value:  Size  Location     Type
 10054 ;;                  1    wreg      void 
 10055 ;; Registers used:
 10056 ;;		wreg, status,2, status,0, pclath, cstack
 10057 ;; Tracked objects:
 10058 ;;		On entry : 0/0
 10059 ;;		On exit  : 0/0
 10060 ;;		Unchanged: 0/0
 10061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10066 ;;Total ram usage:        0 bytes
 10067 ;; Hardware stack levels used:    1
 10068 ;; Hardware stack levels required when called:    8
 10069 ;; This function calls:
 10070 ;;		_nrf24l01CSLow
 10071 ;; This function is called by:
 10072 ;;		_nrf24l01Send
 10073 ;;		_nrf24l01ReceivePacket
 10074 ;;		_nrf24l01SendPacket
 10075 ;;		_nrf24l01SetTXPipe
 10076 ;;		_nrf24l01InitRegisters
 10077 ;;		i1_nrf24l01Send
 10078 ;; This function uses a non-reentrant model
 10079 ;;
 10080                           
 10081                           
 10082                           ;psect for function _nrf24l01SPIStart
 10083  0827                     _nrf24l01SPIStart:	
 10084                           
 10085                           ;interface.c: 66: nrf24l01CSLow();
 10086                           
 10087                           ;incstack = 0
 10088 ;; hardware stack exceeded
 10089                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
 10090  0827  3188  200F  3188   	fcall	_nrf24l01CSLow
 10091                           
 10092                           ;interface.c: 67: _delay((unsigned long)((10)*(16000000/4000000.0)));
 10093  082A  300D               	movlw	13
 10094  082B                     u386_27:	
 10095  082B  0B89               	decfsz	9,f
 10096  082C  282B               	goto	u386_27
 10097  082D  0000               	nop
 10098  082E  0008               	return
 10099  082F                     __end_of_nrf24l01SPIStart:	
 10100                           
 10101                           	psect	text50
 10102  080F                     __ptext50:	
 10103 ;; *************** function _nrf24l01CSLow *****************
 10104 ;; Defined at:
 10105 ;;		line 18 in file "interface.c"
 10106 ;; Parameters:    Size  Location     Type
 10107 ;;		None
 10108 ;; Auto vars:     Size  Location     Type
 10109 ;;		None
 10110 ;; Return value:  Size  Location     Type
 10111 ;;                  1    wreg      void 
 10112 ;; Registers used:
 10113 ;;		None
 10114 ;; Tracked objects:
 10115 ;;		On entry : 0/0
 10116 ;;		On exit  : 0/0
 10117 ;;		Unchanged: 0/0
 10118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10123 ;;Total ram usage:        0 bytes
 10124 ;; Hardware stack levels used:    1
 10125 ;; Hardware stack levels required when called:    7
 10126 ;; This function calls:
 10127 ;;		Nothing
 10128 ;; This function is called by:
 10129 ;;		_nrf24l01SPIStart
 10130 ;; This function uses a non-reentrant model
 10131 ;;
 10132                           
 10133                           
 10134                           ;psect for function _nrf24l01CSLow
 10135  080F                     _nrf24l01CSLow:	
 10136                           
 10137                           ;interface.c: 19: PORTAbits.RA1 = 0;
 10138                           
 10139                           ;incstack = 0
 10140 ;; hardware stack exceeded
 10141                           ; Regs used in _nrf24l01CSLow: []
 10142  080F  0020               	movlb	0	; select bank0
 10143  0810  108C               	bcf	12,1	;volatile
 10144  0811  0008               	return
 10145  0812                     __end_of_nrf24l01CSLow:	
 10146                           
 10147                           	psect	text51
 10148  07F2                     __ptext51:	
 10149 ;; *************** function _nrf24l01SPISend *****************
 10150 ;; Defined at:
 10151 ;;		line 52 in file "interface.c"
 10152 ;; Parameters:    Size  Location     Type
 10153 ;;  data            1    wreg     unsigned char 
 10154 ;; Auto vars:     Size  Location     Type
 10155 ;;  data            1    0[COMMON] unsigned char 
 10156 ;; Return value:  Size  Location     Type
 10157 ;;                  1    wreg      unsigned char 
 10158 ;; Registers used:
 10159 ;;		wreg
 10160 ;; Tracked objects:
 10161 ;;		On entry : 0/0
 10162 ;;		On exit  : 0/0
 10163 ;;		Unchanged: 0/0
 10164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10169 ;;Total ram usage:        0 bytes
 10170 ;; Hardware stack levels used:    1
 10171 ;; Hardware stack levels required when called:    7
 10172 ;; This function calls:
 10173 ;;		Nothing
 10174 ;; This function is called by:
 10175 ;;		_nrf24l01Send
 10176 ;;		_nrf24l01ReceivePacket
 10177 ;;		_nrf24l01SendPacket
 10178 ;;		_nrf24l01SetTXPipe
 10179 ;;		_nrf24l01InitRegisters
 10180 ;;		i1_nrf24l01Send
 10181 ;; This function uses a non-reentrant model
 10182 ;;
 10183                           
 10184                           
 10185                           ;psect for function _nrf24l01SPISend
 10186  07F2                     _nrf24l01SPISend:	
 10187                           
 10188                           ;incstack = 0
 10189 ;; hardware stack exceeded
 10190                           ; Regs used in _nrf24l01SPISend: [wreg]
 10191                           ;nrf24l01SPISend@data stored from wreg
 10192  07F2  00F0               	movwf	nrf24l01SPISend@data
 10193                           
 10194                           ;interface.c: 53: SSP1BUF = data;
 10195  07F3  0870               	movf	nrf24l01SPISend@data,w
 10196  07F4  0024               	movlb	4	; select bank4
 10197  07F5  0091               	movwf	17	;volatile
 10198                           
 10199                           ;interface.c: 55: PORTCbits.RC4 = 1;
 10200  07F6  0020               	movlb	0	; select bank0
 10201  07F7  160E               	bsf	14,4	;volatile
 10202  07F8                     i1l94:	
 10203                           ;interface.c: 57: while (!SSP1STATbits.BF){
 10204                           
 10205  07F8  0024               	movlb	4	; select bank4
 10206  07F9  1814               	btfsc	20,0	;volatile
 10207  07FA  2FFD               	goto	i1l2381
 10208                           
 10209                           ;interface.c: 58: __nop();
 10210  07FB  0000               	nop
 10211  07FC  2FF8               	goto	i1l94
 10212  07FD                     i1l2381:	
 10213                           
 10214                           ;interface.c: 59: };interface.c: 61: return SSP1BUF;
 10215  07FD  0811               	movf	17,w	;volatile
 10216  07FE  0008               	return
 10217  07FF                     __end_of_nrf24l01SPISend:	
 10218                           
 10219                           	psect	text52
 10220  0818                     __ptext52:	
 10221 ;; *************** function _nrf24l01SPIEnd *****************
 10222 ;; Defined at:
 10223 ;;		line 71 in file "interface.c"
 10224 ;; Parameters:    Size  Location     Type
 10225 ;;		None
 10226 ;; Auto vars:     Size  Location     Type
 10227 ;;		None
 10228 ;; Return value:  Size  Location     Type
 10229 ;;                  1    wreg      void 
 10230 ;; Registers used:
 10231 ;;		wreg, status,2, status,0, pclath, cstack
 10232 ;; Tracked objects:
 10233 ;;		On entry : 0/0
 10234 ;;		On exit  : 0/0
 10235 ;;		Unchanged: 0/0
 10236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10241 ;;Total ram usage:        0 bytes
 10242 ;; Hardware stack levels used:    1
 10243 ;; Hardware stack levels required when called:    8
 10244 ;; This function calls:
 10245 ;;		_nrf24l01CSHigh
 10246 ;; This function is called by:
 10247 ;;		_nrf24l01Send
 10248 ;;		_nrf24l01ReceivePacket
 10249 ;;		_nrf24l01SendPacket
 10250 ;;		_nrf24l01SetTXPipe
 10251 ;;		_nrf24l01InitRegisters
 10252 ;;		i1_nrf24l01Send
 10253 ;; This function uses a non-reentrant model
 10254 ;;
 10255                           
 10256                           
 10257                           ;psect for function _nrf24l01SPIEnd
 10258  0818                     _nrf24l01SPIEnd:	
 10259                           
 10260                           ;interface.c: 72: _delay((unsigned long)((10)*(16000000/4000000.0)));
 10261                           
 10262                           ;incstack = 0
 10263 ;; hardware stack exceeded
 10264                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
 10265  0818  300D               	movlw	13
 10266  0819                     u387_27:	
 10267  0819  0B89               	decfsz	9,f
 10268  081A  2819               	goto	u387_27
 10269  081B  0000               	nop
 10270                           
 10271                           ;interface.c: 73: nrf24l01CSHigh();
 10272  081C  3188  200C         	fcall	_nrf24l01CSHigh
 10273  081E  0008               	return
 10274  081F                     __end_of_nrf24l01SPIEnd:	
 10275                           
 10276                           	psect	text53
 10277  080C                     __ptext53:	
 10278 ;; *************** function _nrf24l01CSHigh *****************
 10279 ;; Defined at:
 10280 ;;		line 23 in file "interface.c"
 10281 ;; Parameters:    Size  Location     Type
 10282 ;;		None
 10283 ;; Auto vars:     Size  Location     Type
 10284 ;;		None
 10285 ;; Return value:  Size  Location     Type
 10286 ;;                  1    wreg      void 
 10287 ;; Registers used:
 10288 ;;		None
 10289 ;; Tracked objects:
 10290 ;;		On entry : 0/0
 10291 ;;		On exit  : 0/0
 10292 ;;		Unchanged: 0/0
 10293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10298 ;;Total ram usage:        0 bytes
 10299 ;; Hardware stack levels used:    1
 10300 ;; Hardware stack levels required when called:    7
 10301 ;; This function calls:
 10302 ;;		Nothing
 10303 ;; This function is called by:
 10304 ;;		_nrf24l01SPIEnd
 10305 ;; This function uses a non-reentrant model
 10306 ;;
 10307                           
 10308                           
 10309                           ;psect for function _nrf24l01CSHigh
 10310  080C                     _nrf24l01CSHigh:	
 10311                           
 10312                           ;interface.c: 24: PORTAbits.RA1 = 1;
 10313                           
 10314                           ;incstack = 0
 10315 ;; hardware stack exceeded
 10316                           ; Regs used in _nrf24l01CSHigh: []
 10317  080C  0020               	movlb	0	; select bank0
 10318  080D  148C               	bsf	12,1	;volatile
 10319  080E  0008               	return
 10320  080F                     __end_of_nrf24l01CSHigh:	
 10321                           
 10322                           	psect	text54
 10323  081F                     __ptext54:	
 10324 ;; *************** function _enableInterrupts *****************
 10325 ;; Defined at:
 10326 ;;		line 77 in file "interface.c"
 10327 ;; Parameters:    Size  Location     Type
 10328 ;;  enable          1    wreg     unsigned char 
 10329 ;; Auto vars:     Size  Location     Type
 10330 ;;  enable          1    0[COMMON] unsigned char 
 10331 ;; Return value:  Size  Location     Type
 10332 ;;                  1    wreg      void 
 10333 ;; Registers used:
 10334 ;;		wreg, status,0
 10335 ;; Tracked objects:
 10336 ;;		On entry : 0/0
 10337 ;;		On exit  : 0/0
 10338 ;;		Unchanged: 0/0
 10339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10344 ;;Total ram usage:        0 bytes
 10345 ;; Hardware stack levels used:    1
 10346 ;; Hardware stack levels required when called:    7
 10347 ;; This function calls:
 10348 ;;		Nothing
 10349 ;; This function is called by:
 10350 ;;		_nrf24l01Send
 10351 ;;		_nrf24l01SendPacket
 10352 ;;		i1_nrf24l01Send
 10353 ;; This function uses a non-reentrant model
 10354 ;;
 10355                           
 10356                           
 10357                           ;psect for function _enableInterrupts
 10358  081F                     _enableInterrupts:	
 10359                           
 10360                           ;incstack = 0
 10361 ;; hardware stack exceeded
 10362                           ; Regs used in _enableInterrupts: [wreg+status,0]
 10363                           ;enableInterrupts@enable stored from wreg
 10364  081F  00F0               	movwf	enableInterrupts@enable
 10365                           
 10366                           ;interface.c: 78: PIE0bits.INTE = enable;
 10367  0820  0C70               	rrf	enableInterrupts@enable,w
 10368  0821  0021               	movlb	1	; select bank1
 10369  0822  1C03               	skipc
 10370  0823  1010               	bcf	16,0	;volatile
 10371  0824  1803               	skipnc
 10372  0825  1410               	bsf	16,0	;volatile
 10373  0826  0008               	return
 10374  0827                     __end_of_enableInterrupts:	
 10375                           
 10376                           	psect	text55
 10377  0809                     __ptext55:	
 10378 ;; *************** function _nrf24l01CELow *****************
 10379 ;; Defined at:
 10380 ;;		line 8 in file "interface.c"
 10381 ;; Parameters:    Size  Location     Type
 10382 ;;		None
 10383 ;; Auto vars:     Size  Location     Type
 10384 ;;		None
 10385 ;; Return value:  Size  Location     Type
 10386 ;;                  1    wreg      void 
 10387 ;; Registers used:
 10388 ;;		None
 10389 ;; Tracked objects:
 10390 ;;		On entry : 0/0
 10391 ;;		On exit  : 0/0
 10392 ;;		Unchanged: 0/0
 10393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10398 ;;Total ram usage:        0 bytes
 10399 ;; Hardware stack levels used:    1
 10400 ;; Hardware stack levels required when called:    7
 10401 ;; This function calls:
 10402 ;;		Nothing
 10403 ;; This function is called by:
 10404 ;;		_nrf24l01SetRXMode
 10405 ;;		_nrf24l01ReceivePacket
 10406 ;;		_nrf24l01SendPacket
 10407 ;;		_nrf24l01Init
 10408 ;;		i1_nrf24l01SetRXMode
 10409 ;; This function uses a non-reentrant model
 10410 ;;
 10411                           
 10412                           
 10413                           ;psect for function _nrf24l01CELow
 10414  0809                     _nrf24l01CELow:	
 10415                           
 10416                           ;interface.c: 9: PORTAbits.RA0 = 0;
 10417                           
 10418                           ;incstack = 0
 10419 ;; hardware stack exceeded
 10420                           ; Regs used in _nrf24l01CELow: []
 10421  0809  0020               	movlb	0	; select bank0
 10422  080A  100C               	bcf	12,0	;volatile
 10423  080B  0008               	return
 10424  080C                     __end_of_nrf24l01CELow:	
 10425                           
 10426                           	psect	text56
 10427  0806                     __ptext56:	
 10428 ;; *************** function _nrf24l01CEHigh *****************
 10429 ;; Defined at:
 10430 ;;		line 13 in file "interface.c"
 10431 ;; Parameters:    Size  Location     Type
 10432 ;;		None
 10433 ;; Auto vars:     Size  Location     Type
 10434 ;;		None
 10435 ;; Return value:  Size  Location     Type
 10436 ;;                  1    wreg      void 
 10437 ;; Registers used:
 10438 ;;		None
 10439 ;; Tracked objects:
 10440 ;;		On entry : 0/0
 10441 ;;		On exit  : 0/0
 10442 ;;		Unchanged: 0/0
 10443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10448 ;;Total ram usage:        0 bytes
 10449 ;; Hardware stack levels used:    1
 10450 ;; Hardware stack levels required when called:    7
 10451 ;; This function calls:
 10452 ;;		Nothing
 10453 ;; This function is called by:
 10454 ;;		_nrf24l01SetRXMode
 10455 ;;		_nrf24l01ReceivePacket
 10456 ;;		_nrf24l01SendPacket
 10457 ;;		_nrf24l01Init
 10458 ;;		i1_nrf24l01SetRXMode
 10459 ;; This function uses a non-reentrant model
 10460 ;;
 10461                           
 10462                           
 10463                           ;psect for function _nrf24l01CEHigh
 10464  0806                     _nrf24l01CEHigh:	
 10465                           
 10466                           ;interface.c: 14: PORTAbits.RA0 = 1;
 10467                           
 10468                           ;incstack = 0
 10469 ;; hardware stack exceeded
 10470                           ; Regs used in _nrf24l01CEHigh: []
 10471  0806  0020               	movlb	0	; select bank0
 10472  0807  140C               	bsf	12,0	;volatile
 10473  0808  0008               	return
 10474  0809                     __end_of_nrf24l01CEHigh:	
 10475                           
 10476                           	psect	text57
 10477  0A62                     __ptext57:	
 10478 ;; *************** function _strcmp *****************
 10479 ;; Defined at:
 10480 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
 10481 ;; Parameters:    Size  Location     Type
 10482 ;;  s1              1    wreg     PTR const unsigned char 
 10483 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
 10484 ;;		 -> loop@packet(33), 
 10485 ;;  s2              1    0[COMMON] PTR const unsigned char 
 10486 ;;		 -> RXPacket.Message(32), RXPacket(33), 
 10487 ;; Auto vars:     Size  Location     Type
 10488 ;;  s1              1    4[COMMON] PTR const unsigned char 
 10489 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
 10490 ;;		 -> loop@packet(33), 
 10491 ;;  r               1    3[COMMON] char 
 10492 ;; Return value:  Size  Location     Type
 10493 ;;                  2    0[COMMON] int 
 10494 ;; Registers used:
 10495 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10496 ;; Tracked objects:
 10497 ;;		On entry : 0/0
 10498 ;;		On exit  : 0/0
 10499 ;;		Unchanged: 0/0
 10500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10501 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10502 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10503 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10504 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10505 ;;Total ram usage:        5 bytes
 10506 ;; Hardware stack levels used:    1
 10507 ;; This function calls:
 10508 ;;		Nothing
 10509 ;; This function is called by:
 10510 ;;		_nrf24l01CheckACK
 10511 ;; This function uses a non-reentrant model
 10512 ;;
 10513                           
 10514                           
 10515                           ;psect for function _strcmp
 10516  0A62                     _strcmp:	
 10517                           
 10518                           ;incstack = 0
 10519                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
 10520                           ;strcmp@s1 stored from wreg
 10521  0A62  00F4               	movwf	strcmp@s1
 10522  0A63  2A6C               	goto	i1l3009
 10523  0A64                     i1l3005:	
 10524  0A64  3001               	movlw	1
 10525  0A65  00F2               	movwf	??_strcmp
 10526  0A66  0872               	movf	??_strcmp,w
 10527  0A67  07F4               	addwf	strcmp@s1,f
 10528  0A68  3001               	movlw	1
 10529  0A69  00F2               	movwf	??_strcmp
 10530  0A6A  0872               	movf	??_strcmp,w
 10531  0A6B  07F0               	addwf	strcmp@s2,f
 10532  0A6C                     i1l3009:	
 10533  0A6C  0874               	movf	strcmp@s1,w
 10534  0A6D  0086               	movwf	6
 10535  0A6E  0187               	clrf	7
 10536  0A6F  0870               	movf	strcmp@s2,w
 10537  0A70  0084               	movwf	4
 10538  0A71  3001               	movlw	1	; select bank2/3
 10539  0A72  0085               	movwf	5
 10540  0A73  0300               	decf	0,w
 10541  0A74  3AFF               	xorlw	255
 10542  0A75  0701               	addwf	1,w
 10543  0A76  00F2               	movwf	??_strcmp
 10544  0A77  0872               	movf	??_strcmp,w
 10545  0A78  00F3               	movwf	strcmp@r
 10546  0A79  0873               	movf	strcmp@r,w
 10547  0A7A  1D03               	btfss	3,2
 10548  0A7B  2A82               	goto	i1l3013
 10549  0A7C  0874               	movf	strcmp@s1,w
 10550  0A7D  0086               	movwf	6
 10551  0A7E  0187               	clrf	7
 10552  0A7F  0801               	movf	1,w
 10553  0A80  1D03               	btfss	3,2
 10554  0A81  2A64               	goto	i1l3005
 10555  0A82                     i1l3013:	
 10556  0A82  0873               	movf	strcmp@r,w
 10557  0A83  00F0               	movwf	?_strcmp
 10558  0A84  01F1               	clrf	?_strcmp+1
 10559  0A85  1BF0               	btfsc	?_strcmp,7
 10560  0A86  03F1               	decf	?_strcmp+1,f
 10561  0A87  0008               	return
 10562  0A88                     __end_of_strcmp:	
 10563                           
 10564                           	psect	text58
 10565  0894                     __ptext58:	
 10566 ;; *************** function _exception *****************
 10567 ;; Defined at:
 10568 ;;		line 81 in file "interface.c"
 10569 ;; Parameters:    Size  Location     Type
 10570 ;;  exception       1    wreg     unsigned char 
 10571 ;; Auto vars:     Size  Location     Type
 10572 ;;  exception       1   12[COMMON] unsigned char 
 10573 ;; Return value:  Size  Location     Type
 10574 ;;                  1    wreg      void 
 10575 ;; Registers used:
 10576 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10577 ;; Tracked objects:
 10578 ;;		On entry : 0/0
 10579 ;;		On exit  : 0/0
 10580 ;;		Unchanged: 0/0
 10581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10583 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10584 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10585 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10586 ;;Total ram usage:        3 bytes
 10587 ;; Hardware stack levels used:    1
 10588 ;; Hardware stack levels required when called:    2
 10589 ;; This function calls:
 10590 ;;		_flashUpdate
 10591 ;;		i1___wmul
 10592 ;; This function is called by:
 10593 ;;		_nrf24l01ISR
 10594 ;; This function uses a non-reentrant model
 10595 ;;
 10596                           
 10597                           
 10598                           ;psect for function _exception
 10599  0894                     _exception:	
 10600                           
 10601                           ;incstack = 0
 10602                           ; Regs used in _exception: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10603                           ;exception@exception stored from wreg
 10604  0894  00FC               	movwf	exception@exception
 10605                           
 10606                           ;interface.c: 82: romData.bootMode = (unsigned) (exception * 10);
 10607  0895  087C               	movf	exception@exception,w
 10608  0896  00FA               	movwf	??_exception
 10609  0897  01FB               	clrf	??_exception+1
 10610  0898  087A               	movf	??_exception,w
 10611  0899  00F0               	movwf	i1___wmul@multiplier
 10612  089A  087B               	movf	??_exception+1,w
 10613  089B  00F1               	movwf	i1___wmul@multiplier+1
 10614  089C  300A               	movlw	10
 10615  089D  00F2               	movwf	i1___wmul@multiplicand
 10616  089E  3000               	movlw	0
 10617  089F  00F3               	movwf	i1___wmul@multiplicand+1
 10618  08A0  3188  20DD  3188   	fcall	i1___wmul
 10619  08A3  0871               	movf	?i1___wmul+1,w
 10620  08A4  0022               	movlb	2	; select bank2
 10621  08A5  00D7               	movwf	((_romData+1)^(0+256)+17)
 10622  08A6  0870               	movf	?i1___wmul,w
 10623  08A7  00D6               	movwf	(_romData^(0+256)+17)
 10624                           
 10625                           ;interface.c: 83: flashUpdate();
 10626  08A8  3189  21FF         	fcall	_flashUpdate
 10627  08AA  0001               	reset	;# 
 10628  08AB  0008               	return
 10629  08AC                     __end_of_exception:	
 10630                           
 10631                           	psect	text59
 10632  08DD                     __ptext59:	
 10633 ;; *************** function i1___wmul *****************
 10634 ;; Defined at:
 10635 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
 10636 ;; Parameters:    Size  Location     Type
 10637 ;;  multiplier      2    0[COMMON] unsigned int 
 10638 ;;  multiplicand    2    2[COMMON] unsigned int 
 10639 ;; Auto vars:     Size  Location     Type
 10640 ;;  __wmul          2    4[COMMON] unsigned int 
 10641 ;; Return value:  Size  Location     Type
 10642 ;;                  2    0[COMMON] unsigned int 
 10643 ;; Registers used:
 10644 ;;		wreg, status,2, status,0
 10645 ;; Tracked objects:
 10646 ;;		On entry : 0/0
 10647 ;;		On exit  : 0/0
 10648 ;;		Unchanged: 0/0
 10649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10650 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10651 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10653 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10654 ;;Total ram usage:        6 bytes
 10655 ;; Hardware stack levels used:    1
 10656 ;; This function calls:
 10657 ;;		Nothing
 10658 ;; This function is called by:
 10659 ;;		_exception
 10660 ;; This function uses a non-reentrant model
 10661 ;;
 10662                           
 10663                           
 10664                           ;psect for function i1___wmul
 10665  08DD                     i1___wmul:	
 10666                           
 10667                           ;incstack = 0
 10668                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 10669  08DD  01F4               	clrf	i1___wmul@product
 10670  08DE  01F5               	clrf	i1___wmul@product+1
 10671  08DF                     i1l3091:	
 10672  08DF  1C70               	btfss	i1___wmul@multiplier,0
 10673  08E0  28E5               	goto	i1l515
 10674  08E1  0872               	movf	i1___wmul@multiplicand,w
 10675  08E2  07F4               	addwf	i1___wmul@product,f
 10676  08E3  0873               	movf	i1___wmul@multiplicand+1,w
 10677  08E4  3DF5               	addwfc	i1___wmul@product+1,f
 10678  08E5                     i1l515:	
 10679  08E5  3001               	movlw	1
 10680  08E6                     u307_25:	
 10681  08E6  35F2               	lslf	i1___wmul@multiplicand,f
 10682  08E7  0DF3               	rlf	i1___wmul@multiplicand+1,f
 10683  08E8  0B89               	decfsz	9,f
 10684  08E9  28E6               	goto	u307_25
 10685  08EA  3001               	movlw	1
 10686  08EB                     u308_25:	
 10687  08EB  36F1               	lsrf	i1___wmul@multiplier+1,f
 10688  08EC  0CF0               	rrf	i1___wmul@multiplier,f
 10689  08ED  0B89               	decfsz	9,f
 10690  08EE  28EB               	goto	u308_25
 10691  08EF  0870               	movf	i1___wmul@multiplier,w
 10692  08F0  0471               	iorwf	i1___wmul@multiplier+1,w
 10693  08F1  1D03               	btfss	3,2
 10694  08F2  28DF               	goto	i1l3091
 10695  08F3  0875               	movf	i1___wmul@product+1,w
 10696  08F4  00F1               	movwf	?i1___wmul+1
 10697  08F5  0874               	movf	i1___wmul@product,w
 10698  08F6  00F0               	movwf	?i1___wmul
 10699  08F7  0008               	return
 10700  08F8                     __end_ofi1___wmul:	
 10701                           
 10702                           	psect	text60
 10703  09FF                     __ptext60:	
 10704 ;; *************** function _flashUpdate *****************
 10705 ;; Defined at:
 10706 ;;		line 97 in file "flash.c"
 10707 ;; Parameters:    Size  Location     Type
 10708 ;;		None
 10709 ;; Auto vars:     Size  Location     Type
 10710 ;;  i               2    8[COMMON] unsigned int 
 10711 ;; Return value:  Size  Location     Type
 10712 ;;                  1    wreg      void 
 10713 ;; Registers used:
 10714 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10715 ;; Tracked objects:
 10716 ;;		On entry : 0/0
 10717 ;;		On exit  : 0/0
 10718 ;;		Unchanged: 0/0
 10719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10721 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10722 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10723 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10724 ;;Total ram usage:        4 bytes
 10725 ;; Hardware stack levels used:    1
 10726 ;; Hardware stack levels required when called:    1
 10727 ;; This function calls:
 10728 ;;		_flashWriteByte
 10729 ;; This function is called by:
 10730 ;;		_exception
 10731 ;; This function uses a non-reentrant model
 10732 ;;
 10733                           
 10734                           
 10735                           ;psect for function _flashUpdate
 10736  09FF                     _flashUpdate:	
 10737                           
 10738                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
 10739                           
 10740                           ;incstack = 0
 10741                           ; Regs used in _flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10742  09FF  01F8               	clrf	flashUpdate@i
 10743  0A00  01F9               	clrf	flashUpdate@i+1
 10744  0A01                     L4:	
 10745  0A01  3000               	movlw	0
 10746  0A02  0279               	subwf	flashUpdate@i+1,w
 10747  0A03  3020               	movlw	32
 10748  0A04  1903               	skipnz
 10749  0A05  0278               	subwf	flashUpdate@i,w
 10750  0A06  1803               	btfsc	3,0
 10751  0A07  0008               	return
 10752                           
 10753                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
 10754  0A08  0879               	movf	flashUpdate@i+1,w
 10755  0A09  00F1               	movwf	flashWriteByte@offset+1
 10756  0A0A  0878               	movf	flashUpdate@i,w
 10757  0A0B  00F0               	movwf	flashWriteByte@offset
 10758  0A0C  0878               	movf	flashUpdate@i,w
 10759  0A0D  3EA0               	addlw	(low (_romHolder| (0+256)))& (0+255)
 10760  0A0E  0086               	movwf	6
 10761  0A0F  3001               	movlw	1	; select bank3/4
 10762  0A10  0087               	movwf	7
 10763  0A11  0801               	movf	1,w
 10764  0A12  00F6               	movwf	??_flashUpdate
 10765  0A13  01F7               	clrf	??_flashUpdate+1
 10766  0A14  0876               	movf	??_flashUpdate,w
 10767  0A15  00F2               	movwf	flashWriteByte@data
 10768  0A16  0877               	movf	??_flashUpdate+1,w
 10769  0A17  00F3               	movwf	flashWriteByte@data+1
 10770  0A18  318B  232B  3189   	fcall	_flashWriteByte
 10771  0A1B  3001               	movlw	1
 10772  0A1C  07F8               	addwf	flashUpdate@i,f
 10773  0A1D  3000               	movlw	0
 10774  0A1E  3DF9               	addwfc	flashUpdate@i+1,f
 10775  0A1F  2A01               	goto	L4
 10776  0A20                     __end_of_flashUpdate:	
 10777                           
 10778                           	psect	text61
 10779  0B2B                     __ptext61:	
 10780 ;; *************** function _flashWriteByte *****************
 10781 ;; Defined at:
 10782 ;;		line 8 in file "flash.c"
 10783 ;; Parameters:    Size  Location     Type
 10784 ;;  offset          2    0[COMMON] unsigned int 
 10785 ;;  data            2    2[COMMON] unsigned int 
 10786 ;; Auto vars:     Size  Location     Type
 10787 ;;  address         2    4[COMMON] unsigned int 
 10788 ;; Return value:  Size  Location     Type
 10789 ;;                  1    wreg      void 
 10790 ;; Registers used:
 10791 ;;		wreg, status,2, status,0
 10792 ;; Tracked objects:
 10793 ;;		On entry : 0/0
 10794 ;;		On exit  : 0/0
 10795 ;;		Unchanged: 0/0
 10796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10797 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10798 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10800 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10801 ;;Total ram usage:        6 bytes
 10802 ;; Hardware stack levels used:    1
 10803 ;; This function calls:
 10804 ;;		Nothing
 10805 ;; This function is called by:
 10806 ;;		_flashUpdate
 10807 ;; This function uses a non-reentrant model
 10808 ;;
 10809                           
 10810                           
 10811                           ;psect for function _flashWriteByte
 10812  0B2B                     _flashWriteByte:	
 10813                           
 10814                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
 10815                           
 10816                           ;incstack = 0
 10817                           ; Regs used in _flashWriteByte: [wreg+status,2+status,0]
 10818  0B2B  138B               	bcf	11,7	;volatile
 10819                           
 10820                           ;flash.c: 15: PMCON1 = 0x00;
 10821  0B2C  0031               	movlb	17	; select bank17
 10822  0B2D  0195               	clrf	21	;volsfr
 10823                           
 10824                           ;flash.c: 17: address = (0x2000U - 32) + offset;
 10825  0B2E  0870               	movf	flashWriteByte@offset,w
 10826  0B2F  3EE0               	addlw	224
 10827  0B30  00F4               	movwf	flashWriteByte@address
 10828  0B31  301F               	movlw	31
 10829  0B32  3D71               	addwfc	flashWriteByte@offset+1,w
 10830  0B33  00F5               	movwf	flashWriteByte@address+1
 10831                           
 10832                           ;flash.c: 18: PMADRL = (char) (address >> 0);
 10833  0B34  0874               	movf	flashWriteByte@address,w
 10834  0B35  0091               	movwf	17	;volatile
 10835                           
 10836                           ;flash.c: 19: PMADRH = (char) (address >> 8);
 10837  0B36  0875               	movf	flashWriteByte@address+1,w
 10838  0B37  0092               	movwf	18	;volatile
 10839                           
 10840                           ;flash.c: 21: PMCON1bits.FREE = 1;
 10841  0B38  1615               	bsf	21,4	;volsfr
 10842                           
 10843                           ;flash.c: 22: PMCON1bits.WREN = 1;
 10844  0B39  1515               	bsf	21,2	;volsfr
 10845                           
 10846                           ;flash.c: 24: PMCON2 = 0x55;
 10847  0B3A  3055               	movlw	85
 10848  0B3B  0096               	movwf	22	;volsfr
 10849                           
 10850                           ;flash.c: 25: PMCON2 = 0xAA;
 10851  0B3C  30AA               	movlw	170
 10852  0B3D  0096               	movwf	22	;volsfr
 10853                           
 10854                           ;flash.c: 27: PMCON1bits.WR = 1;
 10855  0B3E  1495               	bsf	21,1	;volsfr
 10856                           
 10857                           ;flash.c: 29: __nop();
 10858  0B3F  0000               	nop
 10859                           
 10860                           ;flash.c: 30: __nop();
 10861  0B40  0000               	nop
 10862                           
 10863                           ;flash.c: 32: PMCON1bits.WREN = 0;
 10864  0B41  0031               	movlb	17	; select bank17
 10865  0B42  1115               	bcf	21,2	;volsfr
 10866                           
 10867                           ;flash.c: 36: PMCON1 = 0x00;
 10868  0B43  0195               	clrf	21	;volsfr
 10869                           
 10870                           ;flash.c: 38: PMADRL = (char) (address >> 0);
 10871  0B44  0874               	movf	flashWriteByte@address,w
 10872  0B45  0091               	movwf	17	;volatile
 10873                           
 10874                           ;flash.c: 39: PMADRH = (char) (address >> 8);
 10875  0B46  0875               	movf	flashWriteByte@address+1,w
 10876  0B47  0092               	movwf	18	;volatile
 10877                           
 10878                           ;flash.c: 41: PMCON1bits.FREE = 0;
 10879  0B48  1215               	bcf	21,4	;volsfr
 10880                           
 10881                           ;flash.c: 42: PMCON1bits.LWLO = 1;
 10882  0B49  1695               	bsf	21,5	;volsfr
 10883                           
 10884                           ;flash.c: 43: PMCON1bits.WREN = 1;
 10885  0B4A  1515               	bsf	21,2	;volsfr
 10886                           
 10887                           ;flash.c: 45: PMDATL = (data >> 0);
 10888  0B4B  0872               	movf	flashWriteByte@data,w
 10889  0B4C  0093               	movwf	19	;volatile
 10890                           
 10891                           ;flash.c: 46: PMDATH = (data >> 8);
 10892  0B4D  0873               	movf	flashWriteByte@data+1,w
 10893  0B4E  0094               	movwf	20	;volatile
 10894                           
 10895                           ;flash.c: 48: PMCON1bits.LWLO = 0;
 10896  0B4F  1295               	bcf	21,5	;volsfr
 10897                           
 10898                           ;flash.c: 50: PMCON2 = 0x55;
 10899  0B50  3055               	movlw	85
 10900  0B51  0096               	movwf	22	;volsfr
 10901                           
 10902                           ;flash.c: 51: PMCON2 = 0xAA;
 10903  0B52  30AA               	movlw	170
 10904  0B53  0096               	movwf	22	;volsfr
 10905                           
 10906                           ;flash.c: 53: PMCON1bits.WR = 1;
 10907  0B54  1495               	bsf	21,1	;volsfr
 10908                           
 10909                           ;flash.c: 55: __nop();
 10910  0B55  0000               	nop
 10911                           
 10912                           ;flash.c: 56: __nop();
 10913  0B56  0000               	nop
 10914                           
 10915                           ;flash.c: 58: PMCON1bits.WREN = 0;
 10916  0B57  0031               	movlb	17	; select bank17
 10917  0B58  1115               	bcf	21,2	;volsfr
 10918                           
 10919                           ;flash.c: 61: INTCONbits.GIE = 1;
 10920  0B59  178B               	bsf	11,7	;volatile
 10921  0B5A  0008               	return
 10922  0B5B                     __end_of_flashWriteByte:	
 10923  007E                     btemp	set	126	;btemp
 10924  007E                     int$flags	set	126
 10925  007E                     wtemp0	set	126


Data Sizes:
    Strings     38
    Constant    65
    Data        0
    BSS         108
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      79
    BANK1            80     77      79
    BANK2            80      0      73
    BANK3            80      0      32
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> setMessage@status(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), romData(BANK2[19]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), romData(BANK2[19]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_6(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK2[19]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK2[19]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK2[32]), RXPacket(BANK2[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 19
		 -> ftoa@buf(BANK2[17]), STR_7(CODE[5]), STR_5(CODE[6]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[2]), STR_1(CODE[2]), romData.name(BANK2[16]), 
		 -> romData(BANK2[19]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendPacket@Packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    TXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK2[19]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK2[19]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), 

    checkTXPower@rxPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    setMessage@topic	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_7(CODE[5]), STR_5(CODE[6]), STR_4(CODE[5]), STR_3(CODE[5]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    setMessage@packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_exception
    _nrf24l01ReceivePacket->i1_memset
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send
    _exception->_flashUpdate
    _flashUpdate->_flashWriteByte

Critical Paths under _main in BANK0

    _main->_setMessage
    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->___lwmod
    _nrf24l01GetPipe->_strlen
    _loop->_setMessage
    _setMessage->_strcat
    _strcat->_ftoa
    _ftoa->_sprintf
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    _nrf24l01SendPacket->_nrf24l01ChangeTXPower
    _nrf24l01SetRXMode->_nrf24l01Send
    _getADCValue->___ftadd
    ___lwtoft->___ftpack
    ___lbtoft->___ftpack
    ___ftmul->___ftpack
    ___ftdiv->___ftpack
    ___ftadd->___lbtoft
    _checkTXPower->_nrf24l01ChangeTXPower
    _nrf24l01ChangeTXPower->_nrf24l01Send
    _flashRealod->_flashReadByte

Critical Paths under _ISR in BANK0

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK1

    _main->_loop
    _loop->_setMessage

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   83581
                                             42 BANK1     35    35      0
                           ___lwtoft
                        _flashRealod
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                 _nrf24l01SendPacket
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                         _setMessage
                              _sleep
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     200
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    5153
                                             20 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               12    12      0    5153
                                              8 BANK0     12    12      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    3     3      0     314
                                              5 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     270
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    4     4      0    2150
                                              4 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      5     5      0     762
                                              7 BANK0      5     5      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     337
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _loop                                                39    39      0   48409
                                              3 BANK1     39    39      0
                            ___ftadd
                       _checkTXPower
                        _getADCValue
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setMessage                                           9     4      5   17748
                                             72 BANK0      6     1      5
                                              0 BANK1      3     3      0
                           ___lwtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               5     3      2     723
                                             67 BANK0      5     3      2
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     565
                                              1 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                14    10      4   15193
                                             53 BANK0     14    10      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             36    26     10    2355
                                             25 BANK0     28    18     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     574
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     337
                                             15 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     340
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    3131
                                              9 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     430
                                             25 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4770
                                             30 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     134
                                              1 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     314
                                              1 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendPacket                                   4     4      0    5220
                                              8 BANK0      4     4      0
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01ChangeTXPower
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     216
                                              1 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    2188
                                              4 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         11     8      3   18228
                                             30 BANK0     11     8      3
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lbtoft
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             4     1      3    3173
                                              9 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             8     5      3    2995
                                              9 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3655
                                              9 BANK0     16    10      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    3431
                                              9 BANK0     16    10      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    4525
                                             17 BANK0     13     7      6
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2973
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _checkTXPower                                         2     2      0    2368
                                              8 BANK0      2     2      0
              _nrf24l01ChangeTXPower
                _nrf24l01GetRXPacket
 ---------------------------------------------------------------------------------
 (3) _nrf24l01GetRXPacket                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01ChangeTXPower                                4     2      2    2345
                                              4 BANK0      4     2      2
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (2) _nrf24l01Send                                         3     2      1    2054
                                              1 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (1) _flashRealod                                          3     3      0     271
                                             10 BANK0      3     3      0
                      _flashReadByte
 ---------------------------------------------------------------------------------
 (2) _flashReadByte                                        9     7      2     181
                                              1 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    2705
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (8) _nrf24l01ISR                                          2     2      0    2705
                                             13 COMMON     1     1      0
                                              0 BANK0      1     1      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceivePacket
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) _nrf24l01ReceivePacket                                3     3      0     639
                                              8 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_memset                                            8     2      6     211
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (9) _nrf24l01CheckACK                                     1     1      0     617
                                              7 COMMON     1     1      0
                             _strcmp
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) i1_nrf24l01SetRXMode                                  3     3      0     401
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_nrf24l01Send                                      3     2      1     267
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _strcmp                                              5     3      2     216
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (9) _exception                                            3     3      0     589
                                             10 COMMON     3     3      0
                        _flashUpdate
                           i1___wmul
 ---------------------------------------------------------------------------------
 (10) i1___wmul                                            6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) _flashUpdate                                         4     4      0     423
                                              6 COMMON     4     4      0
                     _flashWriteByte
 ---------------------------------------------------------------------------------
 (11) _flashWriteByte                                      6     2      4     333
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwtoft
     ___ftpack
   _flashRealod
     _flashReadByte
   _loop
     ___ftadd
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     _checkTXPower
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01GetRXPacket
     _getADCValue
       ___ftadd
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___ftpack
       ___ftmul
         ___ftpack
       ___lbtoft
         ___ftpack
       ___lwtoft
         ___ftpack
     _nrf24l01SendPacket
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strlen
     _setMessage
       ___lwtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___ftadd
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv
           ___ftpack
         ___ftmul
           ___ftpack
         ___lbtoft
           ___ftpack
         ___lwtoft
           ___ftpack
       _memset (ARG)
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
     _sleep
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendPacket
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01ChangeTXPower
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _strlen
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _setMessage
     ___lwtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___ftadd
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___ftpack
       ___ftmul
         ___ftpack
       ___lbtoft
         ___ftpack
       ___lwtoft
         ___ftpack
     _memset (ARG)
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
   _sleep
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
       _flashUpdate
         _flashWriteByte
       i1___wmul
     _nrf24l01CheckACK
       _strcmp
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01ReceivePacket
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4D      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      49       9       91.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      20      11       40.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     115      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     115      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Jul 23 08:42:39 2018

           flashReadByte@result 0026                    flashRealod@i 002B                  ___bmul@product 0023  
                   __CFG_CP$OFF 0000             ___wmul@multiplicand 0023                i1___wmul@product 0074  
           nrf24l01Send@command 0023                    ___ftadd@exp1 003D                    ___ftadd@exp2 003C  
                   __CFG_LVP$ON 0000                    ___ftadd@sign 003B                             l223 0847  
                           l216 0779                             l500 0175                             l333 03F9  
                           l337 040A                             l515 0937                             l368 0A4E  
                           l492 00F1                             l725 0EC3                             l726 0ECB  
                           l718 0EB0                             l809 0F4F                             l489 00D2  
                           l749 039B                    flashUpdate@i 0078                    __CFG_CPD$OFF 0000  
                           _ISR 0004                             wreg 0009             nrf24l01SendPacket@i 002B  
                          ?_ISR 0070                    ___ftdiv@cntr 0033                    ___ftdiv@sign 0038  
                ??_nrf24l01Init 0034                            l3001 0A5A                            l3023 0621  
                          l3051 0691                            l3043 0678                            l2403 0845  
                          l2501 03BF                            l3029 0637                            l2511 03DA  
                          l2353 0E8D                            l3161 0772                            l2441 0E1E  
                          l2521 0CBB                            l2409 0931                            l2363 0EB5  
                          l2355 0E97                            l2451 0324                            l3163 07C0  
                          l2427 0DE5                            l2523 0CC9                            l2531 0CEC  
                          l2365 0EBD                            l2357 0E9C                            l2349 0E86  
                          l2461 033A                            l2437 0E13                            l2429 0DF3  
                          l3421 0B11                            l2455 032B                            l3159 077E  
                          l2527 0CE1                            l2703 01E5                            l2623 0062  
                          l2631 0090                            l2481 0371                            l2473 0354  
                          l2641 009F                            l2617 0052                            l2705 002F  
                          l3425 0B1D                            l2713 085C                  ??_nrf24l01Send 0022  
                          l2491 038D                            l2483 0376                            l2707 01F0  
                          l2643 00CE                            l3419 0B05                            l3371 0279  
                          l2493 0397                            l2485 037A                            l2733 0C64  
                          l2645 00D4                            l3429 0B26                            l2717 0862  
                          l2479 0367                            l2751 04C3                            l2807 098A  
                          l2671 0125                            l2655 0100                            l3535 096C  
                          l2497 03AD                            l3721 0437                            l2729 0C4E  
                          l2817 0EFB                            l2681 0161                            l2665 011F  
                          l2649 00D9                            l2921 0A8E                            l3385 02D2  
                          l2907 0C30                            l2843 0F46                            l2835 0F2B  
                          l2923 0A99                            l3379 02C3                            l2781 0530  
                          l2773 051C                            l2757 04D9                            l3741 0475  
                          l3725 0453                            l3717 0425                            l3709 03FE  
                          l2845 0F52                            l2837 0F39                            l2677 0152  
                          l3751 0479                            l2687 0188                            l2927 0AA1  
                          l2785 0538                            l2769 0514                            l2849 0F60  
                          l2857 0AD9                            l2697 01A0                            l2689 018B  
                          l2963 0C98                            l3675 09A5                            l3739 0469  
                          l2859 0AE9                            l2939 06E6                            l3677 09B1  
                          l3749 04A7                            l3669 08C9                            l3863 0BC9  
                          l2969 0CAA                            l3865 0BEC                            l3967 0FFC  
                          STR_1 1064                    __CFG_WDTE$ON 0000                            STR_2 1064  
                          STR_3 1056                            STR_4 1051                            STR_5 1046  
                          STR_6 1060                            STR_7 105B                            STR_8 103B  
                          u2105 0355                            u3005 0679                            u2135 0368  
                          u3015 0688                            u3025 0692                            u2165 037B  
                          u2255 0CBE                            u2415 0159                            u2425 016B  
                          u2195 038E                            u2275 0CD7                            u2435 017D  
                          u2285 0CE2                            u1815 0EB8                            u3335 0B08  
                          u2625 0539                            u2635 053F                            u2555 04E5  
                          u2715 0F2C                            u1915 0938                            u2395 0148  
                          u3355 0B17                            u2565 04F5                            u1925 093D  
                          u3365 0B1E                            u1855 0ED2                            u1775 0E92  
                          u2585 051D                            u3545 044D                            u2745 0F47  
                          u1795 0EAB                            u2595 0523                            u1955 0DE8  
                          u3707 0F85                            u2685 0F02                            u3717 0ABA  
                          u2934 0A54                            u3807 0C22                            u2775 0ADE  
                          u1975 0DF4                            u2935 0A53                            u3727 0ACA  
                          u3817 0C2D                            u3737 0406                            u1985 0E08  
                          u2875 0C86                            u3827 076F                            u3747 045A  
                          u1995 0E14                            u3757 0471                            u3685 0BDA  
                          u3767 048A                            u2985 0649                            u3777 0497  
                          u2995 0659                            u3787 04A8                            u3797 0C10  
                          i1l94 07F8                            _WPUA 020C                            _WPUC 020E  
__size_of_nrf24l01InterfaceInit 001C                    __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000  
 __end_of_nrf24l01InterfaceInit 0966                            _main 0F69                            _ftoa 06B3  
                  ___ftpack@arg 0021                            _loop 0560                    ___ftpack@exp 0024  
               ??_flashReadByte 0023                            fsr0h 0005                            fsr1h 0007  
                          indf0 0000                            fsr0l 0004                            indf1 0001  
                          fsr1l 0006                            btemp 007E  __size_of_nrf24l01ReceivePacket 004D  
                 __CFG_BORV$LOW 0000   __end_of_nrf24l01ReceivePacket 0D86                            start 000F  
         nrf24l01SetRXPipe@pipe 0026                   __CFG_CSWEN$ON 0000               ___bmul@multiplier 0024  
                 __CFG_MCLRE$ON 0000                    ___ftmul@cntr 0037                    ___ftmul@sign 0038  
   __size_of_nrf24l01SendPacket 00BA                           ??_ISR 007E                    ___fttol@exp1 0046  
          __size_of_getADCValue 009C                 ??_nrf24l01CELow 0070                    ___fttol@lval 0042  
               ??_nrf24l01CSLow 0070                           ?_main 0070                           ?_ftoa 0055  
                         ?_loop 0070                 __end_of___ftadd 03F2                 __end_of___ftdiv 06B3  
               __end_of___ftneg 0838                 __end_of___lldiv 0E27                 __end_of___ftmul 0560  
               __end_of___llmod 0CF5                 __end_of___ftsub 09A0                 __end_of___fttol 0F69  
                __CFG_DEBUG$OFF 0000                           i1l211 000D                           i1l360 0DCA  
               __end_of___lwmod 0B2B                           i1l515 08E5          enableInterrupts@enable 0070  
                    i1memset@p1 0070                   __CFG_PWRTE$ON 0000           nrf24l01SetTXPipe@pipe 0027  
                  ___lltoft@exp 002E                 __end_of_dpowers 1028                 __end_of_isdigit 0847  
                         _sleep 0847                   ___ftpack@sign 0025                           ftoa@f 0055  
                         ftoa@l 005E                  __CFG_BOREN$OFF 0000                __end_ofi1___wmul 08F8  
              _enableInterrupts 081F                           status 0003             i1___wmul@multiplier 0070  
                         wtemp0 007E                 __end_of_sprintf 01F6     __end_ofi1_nrf24l01SetRXMode 0BC4  
              __end_ofi1_memset 08C4  __size_of_nrf24l01ChangeTXPower 003F               getADCValue@adcSum 0046  
 __end_of_nrf24l01ChangeTXPower 0CB2                _nrf24l01SPIStart 0827                 __initialization 0011  
              _nrf24l01CheckACK 0A20          nrf24l01InitRegisters@i 0032                    __end_of_main 1000  
                  __end_of_ftoa 0756                    __end_of_loop 060A    nrf24l01ChangeTXPower@rfSetup 0027  
              ??_nrf24l01CEHigh 0070                          ??_main 00CA                          ??_ftoa 0059  
                 ___fttol@sign1 0041                          ??_loop 006E                ??_nrf24l01CSHigh 0070  
              ??_nrf24l01SPIEnd 0070             _nrf24l01GetRXPacket 0002        __size_of_nrf24l01SPISend 000D  
              ___llmod@dividend 0033                          _ADRESH 009C                          _ADRESL 009B  
                        ?_sleep 0070                          _ANSELA 018C                          _ANSELC 018E  
              __end_of___ftpack 0EE2                __end_of___lbtoft 092E                ??_flashWriteByte 0074  
              __end_of___lltoft 0AFE                          i1l3013 0A82                          i1l3005 0A64  
                        i1l3009 0A6C                          _ODCONA 028C        __size_of_nrf24l01GetPipe 0038  
                        _ODCONC 028E                          i1l3091 08DF                          i1l2381 07FD  
                        i1l3087 0BBD                          i1l3801 0DA6                          i1l3815 0DCB  
                        i1l3781 0D80                          i1l3773 0D68                          i1l3687 08B0  
                        i1l3777 0D78                          i1l3793 0D96                          _INLVLA 038C  
                        _INLVLC 038E                          u307_25 08E6                          u308_25 08EB  
         __size_of_checkTXPower 0014                          _PMADRH 0892                          _PMADRL 0891  
              __end_of___lwtoft 0894                          _PMDATH 0894                          _PMDATL 0893  
                        _PMCON1 0895                          _PMCON2 0896                          u383_27 0B9F  
                        u384_27 0BB0                          u385_27 0BBA                          u386_27 082B  
                        u387_27 0819            ?_nrf24l01GetRXPacket 0070            __size_of_flashRealod 0020  
            flashWriteByte@data 0072            __size_of_flashUpdate 0021            __size_of_nrf24l01ISR 004E  
       nrf24l01SetRXMode@config 0025                          ___bmul 0859                          ___ftge 0C37  
       nrf24l01SetRXMode@rxMode 0026                          ___wmul 092E                       ??___ftadd 0037  
                __CFG_STVREN$ON 0000                       ??___ftdiv 002F                       ??___ftneg 0024  
                     ??___lldiv 0029                       ??___ftmul 002F                       ??___llmod 0037  
                     ??___ftsub 0044                       ??___fttol 003D                       ??___lwmod 0025  
          __end_of_nrf24l01Init 0AD4            __end_of_nrf24l01Send 09FF                          _memset 08C4  
         _nrf24l01InitRegisters 01F6                          _strcat 0A88                          _strcmp 0A62  
                        _strcpy 0966                          _strlen 09A0                          ftoa@cp 0062  
         ___ftmul@f3_as_product 0034       i1nrf24l01SetRXMode@config 0075                __end_of_romArray 2000  
                     ??_isdigit 0021       i1nrf24l01SetRXMode@rxMode 0076                    _checkTXPower 086B  
         getADCValue@multiplier 003E                       ??_sprintf 0043              getADCValue@adcLoop 0045  
       __end_of__initialization 0025                      ___ftadd@f1 0031                      ___ftadd@f2 0034  
                    ___ftge@ff1 0021                      ___ftge@ff2 0024           ??_nrf24l01GetRXPacket 0021  
      nrf24l01SendPacket@Packet 002A              getADCValue@channel 0044                      ___ftdiv@f1 002C  
                    ___ftdiv@f2 0029                      ___ftdiv@f3 0034                      ___ftneg@f1 0021  
                    ___lbtoft@c 0030             ___bmul@multiplicand 0021                      ___ftmul@f1 0029  
                    ___ftmul@f2 002C                      ___ftsub@f1 0041                      ___ftsub@f2 003E  
                    ___fttol@f1 0039                  __pcstackCOMMON 0070                      ___lltoft@c 0029  
                 __end_of_sleep 0859                      ___lwtoft@c 0029                       ?i1___wmul 0070  
                     ?i1_memset 0070                         ??_sleep 0021                    sprintf@width 0050  
                    __pbssBANK0 006E                      __pbssBANK1 00ED                      __pbssBANK2 0120  
                    __pbssBANK3 01A0               ??_nrf24l01SPISend 0070              __size_of_exception 0018  
       __size_ofi1_nrf24l01Send 001B               ??_nrf24l01GetPipe 0027                      __pmaintext 0F69  
                       ?___bmul 0021                         ?___ftge 0021                         ?___wmul 0021  
               __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 0BFC               _nrf24l01SetRXPipe 0A41  
        ?_nrf24l01InitRegisters 0070                      __pintentry 0004               _nrf24l01SetTXPipe 0CF5  
           nrf24l01SPISend@data 0070                         ?_memset 0021              ?_nrf24l01SetRXMode 0070  
                     ?___ftpack 0021                       ?___lbtoft 0029              ?_nrf24l01SetRXPipe 0070  
      __end_of_enableInterrupts 0827              ?_nrf24l01SetTXPipe 0070                       ?___lltoft 0029  
           __CFG_RSTOSC$HFINT32 0000                         ?_strcat 0063                      ??i1___wmul 0074  
                       ?_strcmp 0070                         ?_strcpy 0021                         ?_strlen 0021  
                     ?___lwtoft 0029           __end_of_n_ADDRESS_MUL 1067                      ??i1_memset 0076  
           ??_nrf24l01SetRXMode 0024        __end_of_nrf24l01SPIStart 082F             ??_nrf24l01SetRXPipe 0024  
           ??_nrf24l01SetTXPipe 0025                         _SSP1BUF 0211        __end_of_nrf24l01CheckACK 0A41  
         _nrf24l01InterfaceInit 094A           __end_of_flashReadByte 0B8D                __p_romArray_text 1FE0  
    __end_of_nrf24l01SendPacket 04AC                   ??_getADCValue 0041           __size_of_nrf24l01Init 0026  
         __size_of_nrf24l01Send 0020       __end_of_nrf24l01SetRXMode 0C37       __end_of_nrf24l01SetRXPipe 0A62  
     __end_of_nrf24l01SetTXPipe 0D39           _nrf24l01ReceivePacket 0D39                 __size_of___bmul 0012  
               __size_of___ftge 003C                         ___ftadd 02FC                         ___ftdiv 060A  
                       ___ftneg 082F                         ___lldiv 0DD4                 __size_of___wmul 001C  
                       ___ftmul 04AC                         ___llmod 0CB2                         ___ftsub 0982  
                       ___fttol 0EE2                         ___lwmod 0AFE                      ??___ftpack 0026  
                    ??___lbtoft 002C           __end_of_nrf24l01CELow 080C                 __size_of_memset 0019  
         __end_of_nrf24l01CSLow 0812                      ??___lltoft 002D                         __ptext1 0966  
                       __ptext2 0AAE                         __ptext3 094A                         __ptext4 01F6  
                       __ptext5 0CF5                         __ptext6 0859                         __ptext7 0A41  
                       __ptext8 0BC4                         __ptext9 0AFE                      ??___lwtoft 002C  
               __size_of_strcat 0026                 __size_of_strcmp 0026               __end_of_exception 08AC  
               __size_of_strcpy 001C                 __size_of_strlen 001F                    __size_of_ISR 000B  
                       _counter 0120                         _dpowers 1000                         _isdigit 0838  
              _romArray_absaddr 1FE0                         _romData 0145                         _sprintf 0029  
                       clrloop0 0813            end_of_initialization 0025                         ftoa@buf 0158  
                       ftoa@rem 005A                    _nrf24l01Init 0AAE                      _setMessage 0E27  
                  _nrf24l01Send 09DF                         memset@c 0023                         memset@n 0025  
                       memset@p 0027                nrf24l01GetPipe@i 002B                 ___lldiv@divisor 0021  
               ___lldiv@counter 002E           _nrf24l01ChangeTXPower 0C73                setMessage@packet 00A2  
  __size_ofi1_nrf24l01SetRXMode 0037                setMessage@status 00A0           i1___wmul@multiplicand 0072  
                       strcmp@r 0073           i1nrf24l01Send@command 0073                         strlen@s 0021  
           __end_of_getADCValue 07F2                       _PORTAbits 000C                       _PORTCbits 000E  
                     _TRISAbits 008C                       _TRISCbits 008E                nrf24l01Send@data 0021  
              __CFG_FEXTOSC$OFF 0000                   ??_flashRealod 002A                   ??_flashUpdate 0076  
                 ??_nrf24l01ISR 007D          ?_nrf24l01InterfaceInit 0070                     ___ftdiv@exp 0037  
                i1_nrf24l01Send 08F8                      main@packet 00CC          ?_nrf24l01ReceivePacket 0070  
    __size_of_nrf24l01SetRXMode 003B      __size_of_nrf24l01SetRXPipe 0021                     ___ftmul@exp 0033  
    __size_of_nrf24l01SetTXPipe 0044                  __end_of___bmul 086B                  __end_of___ftge 0C73  
                __end_of___wmul 094A                       i1memset@c 0072                       i1memset@n 0074  
                     i1memset@p 0076                  __end_of_memset 08DD                  __end_of_strcat 0AAE  
                __end_of_strcmp 0A88                  __end_of_strcpy 0982                  __end_of_strlen 09BF  
           start_initialization 0011               __size_ofi1___wmul 001B                 _nrf24l01SPISend 07F2  
                   __end_of_ISR 000F           flashWriteByte@address 0074                      ftoa@status 0058  
             __size_ofi1_memset 0018       nrf24l01SetRXPipe@enRXAddr 0027                 _nrf24l01GetPipe 0BC4  
   __end_of_nrf24l01GetRXPacket 0004         __size_of_nrf24l01CEHigh 0003         __size_of_nrf24l01CSHigh 0003  
                   ?_setMessage 0068          __end_ofi1_nrf24l01Send 0913         __size_of_nrf24l01SPIEnd 0007  
               ___llmod@divisor 002F                 ___llmod@counter 0038          ?_nrf24l01ChangeTXPower 0024  
       ??_nrf24l01InitRegisters 0028                __CFG_LPBOREN$OFF 0000             __end_of_flashRealod 09DF  
                   _getADCValue 0756         __size_of_flashWriteByte 0030                        ??___bmul 0022  
                      ??___ftge 0027             __end_of_flashUpdate 0A20             __end_of_nrf24l01ISR 0DD4  
                      ??___wmul 0025            __end_of_resetRomData 103B                        ??_memset 0027  
             ?_enableInterrupts 0070                        ??_strcat 0065                        ??_strcmp 0072  
                      ??_strcpy 0023                        ??_strlen 0023               __size_of___ftpack 0065  
             __size_of___lbtoft 001B              ??_enableInterrupts 0070               __size_of___lltoft 002A  
                     ___latbits 0002               __size_of___lwtoft 0015                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0               ?_nrf24l01SPIStart 0070            checkTXPower@rxPacket 0029  
                  _isdigit$1776 0021               ?_nrf24l01CheckACK 0070              ??_nrf24l01SPIStart 0070  
            ??_nrf24l01CheckACK 0077                 ?i1_nrf24l01Send 0071                     sprintf@flag 0049  
                   sprintf@prec 0052                      loop@packet 00A9             nrf24l01GetPipe@name 002A  
           nrf24l01GetPipe@pipe 0029                        ?___ftadd 0031                        ?___ftdiv 0029  
                      ?___ftneg 0021                        ?___lldiv 0021                        ?___ftmul 0029  
                      ?___llmod 002F                        ?___ftsub 003E                        ?___fttol 0039  
                      ?___lwmod 0021            __end_of_n_ADDRESS_P0 1051         __end_of_nrf24l01SPISend 07FF  
            i1nrf24l01Send@data 0071       nrf24l01InitRegisters@enAA 002F             __size_of_setMessage 0056  
            _nrf24l01SendPacket 03F2         __end_of_nrf24l01GetPipe 0BFC                        ?_isdigit 0070  
                     _loop$2040 00A6                       _loop$2039 00A3                       _exception 0894  
           ?_nrf24l01SendPacket 0070                        ?_sprintf 0039             i1_nrf24l01SetRXMode 0B8D  
                __size_of_sleep 0012                     _flashRealod 09BF                  ___wmul@product 0025  
                   _flashUpdate 09FF                     _nrf24l01ISR 0D86                       clear_ram0 0812  
                      _PIE0bits 0090                        _PIR0bits 0010                       _romHolder 01A0  
                     _sleepLoop 00EE            ??_nrf24l01SendPacket 0028                 setMessage@value 006A  
               setMessage@topic 0068            ?i1_nrf24l01SetRXMode 0070                      _ADCON0bits 009D  
                    _ADCON1bits 009E               ___wmul@multiplier 0021                        i1___wmul 08DD  
                      _WPUAbits 020C                        i1_memset 08AC                   ?_checkTXPower 0070  
                      _RXPacket 0124          __size_of_flashReadByte 0032                        _TXPacket 00ED  
                    ?_exception 0070                  _nrf24l01CEHigh 0806         ??_nrf24l01InterfaceInit 0021  
                _nrf24l01CSHigh 080C               nrf24l01ISR@status 0020                  _nrf24l01SPIEnd 0818  
       ??_nrf24l01ReceivePacket 0078          __size_of_nrf24l01CELow 0003          __size_of_nrf24l01CSLow 0003  
          flashWriteByte@offset 0070                  _flashWriteByte 0B2B           ??i1_nrf24l01SetRXMode 0074  
              __size_of___ftadd 00F6                __size_of___ftdiv 00A9                __size_of___ftneg 0009  
              __size_of___lldiv 0053                __size_of___ftmul 00B4                __size_of___llmod 0043  
              __size_of___ftsub 001E                __size_of___fttol 0087                __size_of___lwmod 002D  
                      ___ftpack 0E7D                        ___lbtoft 0913                ?_nrf24l01SPISend 0070  
                      ___lltoft 0AD4                      _ANSELAbits 018C                        ___lwtoft 087F  
                    _ANSELCbits 018E                  ??_checkTXPower 0028                ?_nrf24l01GetPipe 0070  
                    sprintf@val 004B                   _n_ADDRESS_MUL 1066                      strcat@from 0063  
        __end_of_nrf24l01CEHigh 0809                __size_of_isdigit 000F          __end_of_nrf24l01CSHigh 080F  
                      __ptext10 0560                        __ptext11 0847                        __ptext20 0DD4  
                      __ptext12 0E27                        __ptext21 0AD4                        __ptext13 0A88  
                      __ptext30 087F                        __ptext22 0EE2                        __ptext14 08C4  
                      __ptext31 0913                        __ptext23 0982                        __ptext15 06B3  
                      __ptext40 09BF                        __ptext32 04AC                        __ptext24 082F  
                      __ptext16 0029                        __ptext41 0B5B                        __ptext33 060A  
                      __ptext25 0C37                        __ptext17 0838                        __ptext50 080F  
                      __ptext34 02FC                        __ptext26 03F2                        __ptext18 092E  
                      __ptext51 07F2                        __ptext43 0D86                        __ptext35 0E7D  
                      __ptext27 09A0                        __ptext19 0CB2                        __ptext60 09FF  
                      __ptext52 0818                        __ptext44 0D39                        __ptext36 086B  
                      __ptext28 0BFC                        __ptext61 0B2B                        __ptext53 080C  
                      __ptext45 08AC                        __ptext37 0002                        __ptext29 0756  
                      __ptext54 081F                        __ptext46 0A20                        __ptext38 0C73  
                      __ptext55 0809                        __ptext47 0B8D                        __ptext39 09DF  
                      __ptext56 0806                        __ptext48 08F8                        __ptext57 0A62  
                      __ptext49 0827                        __ptext58 0894                        __ptext59 08DD  
                  _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 081F                        _nrf24l01 006E  
                  _resetRomData 1028                __size_of_sprintf 01CD                     _OSCCON1bits 0919  
                  ??_setMessage 006D                      strcpy@from 0021   nrf24l01ChangeTXPower@addPower 0024  
       ??_nrf24l01ChangeTXPower 0026                   __size_of_main 0097                   __size_of_ftoa 00A3  
                 __size_of_loop 00AA    nrf24l01InitRegisters@channel 002A          __end_of_flashWriteByte 0B5B  
  nrf24l01InitRegisters@feature 002C              exception@exception 007C                      _RC0PPSbits 0EA0  
                      _romArray 1FE0                   _flashReadByte 0B5B    nrf24l01InitRegisters@rfSetup 002D  
                    _RC1PPSbits 0EA1                    ?_getADCValue 003E                      _RC2PPSbits 0EA2  
__size_of_nrf24l01InitRegisters 0106   __end_of_nrf24l01InitRegisters 02FC                        int$flags 007E  
  nrf24l01InitRegisters@setupAW 002B                    _SSP1STATbits 0214                        main@pipe 00CB  
        nrf24l01ReceivePacket@i 007A                   _nrf24l01CELow 0809                   _nrf24l01CSLow 080F  
            __end_of_setMessage 0E7D                      _INTCONbits 000B                 ?_nrf24l01CEHigh 0070  
                    _FVRCONbits 0117                ??i1_nrf24l01Send 0072                     ??_exception 007A  
               ?_nrf24l01CSHigh 0070                  __pstringtext10 1060                  __pstringtext11 1064  
                __pstringtext12 0000                        isdigit@c 0022                        memset@p1 0021  
               ?_nrf24l01SPIEnd 0070                        intlevel1 0000                       sprintf@ap 004A  
                     sprintf@sp 004F                    _n_ADDRESS_P0 104C       __size_of_enableInterrupts 0008  
                    _PMCON1bits 0895                ___lwmod@dividend 0023                ___lldiv@dividend 0025  
             __CFG_CLKOUTEN$OFF 0000                 ?_flashWriteByte 0070    __size_of_nrf24l01GetRXPacket 0002  
                ?_flashReadByte 0021     nrf24l01InitRegisters@config 0031       __size_of_nrf24l01SPIStart 0008  
     __size_of_nrf24l01CheckACK 0021     nrf24l01InitRegisters@status 002E      nrf24l01ReceivePacket@width 0079  
                ?_nrf24l01CELow 0070                   __pstringtext1 1000                   __pstringtext2 1028  
                 __pstringtext3 104C                   __pstringtext4 1066                   __pstringtext5 103B  
                 __pstringtext6 1046                   __pstringtext7 1051                   __pstringtext8 1056  
                 __pstringtext9 105B                  ?_nrf24l01CSLow 0070                        sprintf@c 0054  
                      sprintf@f 0039      nrf24l01InitRegisters@DynPD 0030                        strcat@cp 0066  
                      strcat@to 0067                        strcmp@s1 0074                        strcmp@s2 0070  
              ___lldiv@quotient 002A                 ___lwmod@divisor 0021                        strcpy@cp 0025  
                      strlen@cp 0025                        strcpy@to 0024                 ___lwmod@counter 0026  
                    _WDTCONbits 0097                   ?_nrf24l01Init 0070                   ?_nrf24l01Send 0021  
                  ?_flashRealod 0070                      _STATUSbits 0003            flashReadByte@address 0028  
                  ?_flashUpdate 0070                    ?_nrf24l01ISR 0070            __end_of_checkTXPower 087F  
           flashReadByte@offset 0021  
