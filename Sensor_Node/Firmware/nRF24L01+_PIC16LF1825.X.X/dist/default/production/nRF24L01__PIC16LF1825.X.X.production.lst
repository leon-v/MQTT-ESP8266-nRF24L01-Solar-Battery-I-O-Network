

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Wed Aug 15 16:32:16 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	clrtext,global,class=CODE,delta=2
    25                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    26                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    27                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    28                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    29                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    30                           	psect	text1,local,class=CODE,merge=1,delta=2
    31                           	psect	text2,local,class=CODE,merge=1,delta=2
    32                           	psect	text3,local,class=CODE,merge=1,delta=2
    33                           	psect	text4,local,class=CODE,merge=1,delta=2
    34                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text6,local,class=CODE,merge=1,delta=2
    36                           	psect	text7,local,class=CODE,merge=1,delta=2
    37                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text9,local,class=CODE,merge=1,delta=2
    39                           	psect	text10,local,class=CODE,merge=1,delta=2
    40                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text12,local,class=CODE,merge=1,delta=2
    42                           	psect	text13,local,class=CODE,merge=1,delta=2
    43                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text15,local,class=CODE,merge=1,delta=2
    45                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text17,local,class=CODE,merge=1,delta=2
    47                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text19,local,class=CODE,merge=1,delta=2
    49                           	psect	text20,local,class=CODE,merge=1,delta=2
    50                           	psect	text21,local,class=CODE,merge=1,delta=2
    51                           	psect	text22,local,class=CODE,merge=1,delta=2
    52                           	psect	text23,local,class=CODE,merge=1,delta=2
    53                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text26,local,class=CODE,merge=1,delta=2
    56                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text37,local,class=CODE,merge=1,delta=2
    67                           	psect	text38,local,class=CODE,merge=1,delta=2
    68                           	psect	text39,local,class=CODE,merge=1,delta=2
    69                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    74                           	psect	text45,local,class=CODE,merge=1,delta=2
    75                           	psect	text46,local,class=CODE,merge=1,delta=2
    76                           	psect	intentry,global,class=CODE,delta=2
    77                           	psect	text48,local,class=CODE,merge=1,delta=2
    78                           	dabs	1,0x74,12
    79  0000                     
    80                           ; Version 2.00
    81                           ; Generated 27/05/2018 GMT
    82                           ; 
    83                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    84                           ; All rights reserved.
    85                           ; 
    86                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    87                           ; 
    88                           ; Redistribution and use in source and binary forms, with or without modification, are
    89                           ; permitted provided that the following conditions are met:
    90                           ; 
    91                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    92                           ;        conditions and the following disclaimer.
    93                           ; 
    94                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    95                           ;        of conditions and the following disclaimer in the documentation and/or other
    96                           ;        materials provided with the distribution.
    97                           ; 
    98                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    99                           ;        software without specific prior written permission.
   100                           ; 
   101                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   102                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   103                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   104                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   105                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   106                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   107                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   108                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   109                           ; 
   110                           ; 
   111                           ; Code-generator required, PIC16LF18325 Definitions
   112                           ; 
   113                           ; SFR Addresses
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  0007                     	;# 
   122  0008                     	;# 
   123  0009                     	;# 
   124  000A                     	;# 
   125  000B                     	;# 
   126  000C                     	;# 
   127  000E                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0014                     	;# 
   133  0015                     	;# 
   134  0015                     	;# 
   135  0016                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  0019                     	;# 
   141  001A                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  001D                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  008C                     	;# 
   148  008E                     	;# 
   149  0090                     	;# 
   150  0091                     	;# 
   151  0092                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0097                     	;# 
   155  009B                     	;# 
   156  009B                     	;# 
   157  009C                     	;# 
   158  009D                     	;# 
   159  009E                     	;# 
   160  009F                     	;# 
   161  010C                     	;# 
   162  010E                     	;# 
   163  0111                     	;# 
   164  0112                     	;# 
   165  0113                     	;# 
   166  0114                     	;# 
   167  0115                     	;# 
   168  0116                     	;# 
   169  0117                     	;# 
   170  0118                     	;# 
   171  0119                     	;# 
   172  018C                     	;# 
   173  018E                     	;# 
   174  0199                     	;# 
   175  0199                     	;# 
   176  0199                     	;# 
   177  019A                     	;# 
   178  019A                     	;# 
   179  019A                     	;# 
   180  019B                     	;# 
   181  019B                     	;# 
   182  019B                     	;# 
   183  019B                     	;# 
   184  019B                     	;# 
   185  019C                     	;# 
   186  019C                     	;# 
   187  019C                     	;# 
   188  019D                     	;# 
   189  019D                     	;# 
   190  019D                     	;# 
   191  019E                     	;# 
   192  019E                     	;# 
   193  019E                     	;# 
   194  019F                     	;# 
   195  019F                     	;# 
   196  019F                     	;# 
   197  019F                     	;# 
   198  019F                     	;# 
   199  020C                     	;# 
   200  020E                     	;# 
   201  0211                     	;# 
   202  0211                     	;# 
   203  0212                     	;# 
   204  0212                     	;# 
   205  0213                     	;# 
   206  0213                     	;# 
   207  0214                     	;# 
   208  0214                     	;# 
   209  0215                     	;# 
   210  0215                     	;# 
   211  0215                     	;# 
   212  0215                     	;# 
   213  0216                     	;# 
   214  0216                     	;# 
   215  0217                     	;# 
   216  0217                     	;# 
   217  0219                     	;# 
   218  021A                     	;# 
   219  021B                     	;# 
   220  021C                     	;# 
   221  021D                     	;# 
   222  021D                     	;# 
   223  021E                     	;# 
   224  021F                     	;# 
   225  028C                     	;# 
   226  028E                     	;# 
   227  0291                     	;# 
   228  0291                     	;# 
   229  0292                     	;# 
   230  0293                     	;# 
   231  0294                     	;# 
   232  0295                     	;# 
   233  0295                     	;# 
   234  0296                     	;# 
   235  0297                     	;# 
   236  0298                     	;# 
   237  029F                     	;# 
   238  030C                     	;# 
   239  030E                     	;# 
   240  0311                     	;# 
   241  0311                     	;# 
   242  0312                     	;# 
   243  0313                     	;# 
   244  0314                     	;# 
   245  0315                     	;# 
   246  0315                     	;# 
   247  0316                     	;# 
   248  0317                     	;# 
   249  0318                     	;# 
   250  038C                     	;# 
   251  038E                     	;# 
   252  0391                     	;# 
   253  0392                     	;# 
   254  0393                     	;# 
   255  0397                     	;# 
   256  0398                     	;# 
   257  0399                     	;# 
   258  039A                     	;# 
   259  039C                     	;# 
   260  039D                     	;# 
   261  039E                     	;# 
   262  039F                     	;# 
   263  0411                     	;# 
   264  0411                     	;# 
   265  0412                     	;# 
   266  0413                     	;# 
   267  0414                     	;# 
   268  0415                     	;# 
   269  0416                     	;# 
   270  0417                     	;# 
   271  0418                     	;# 
   272  0418                     	;# 
   273  0419                     	;# 
   274  041A                     	;# 
   275  041B                     	;# 
   276  041C                     	;# 
   277  041D                     	;# 
   278  041E                     	;# 
   279  041F                     	;# 
   280  0498                     	;# 
   281  0498                     	;# 
   282  0499                     	;# 
   283  049A                     	;# 
   284  049B                     	;# 
   285  049B                     	;# 
   286  049C                     	;# 
   287  049D                     	;# 
   288  049E                     	;# 
   289  049F                     	;# 
   290  0617                     	;# 
   291  0618                     	;# 
   292  0619                     	;# 
   293  0619                     	;# 
   294  061A                     	;# 
   295  061B                     	;# 
   296  061C                     	;# 
   297  061C                     	;# 
   298  061F                     	;# 
   299  0691                     	;# 
   300  0692                     	;# 
   301  0693                     	;# 
   302  0694                     	;# 
   303  0695                     	;# 
   304  0696                     	;# 
   305  0697                     	;# 
   306  0698                     	;# 
   307  0699                     	;# 
   308  0711                     	;# 
   309  0712                     	;# 
   310  0713                     	;# 
   311  0714                     	;# 
   312  0715                     	;# 
   313  0716                     	;# 
   314  0717                     	;# 
   315  0718                     	;# 
   316  0719                     	;# 
   317  0891                     	;# 
   318  0891                     	;# 
   319  0891                     	;# 
   320  0891                     	;# 
   321  0891                     	;# 
   322  0891                     	;# 
   323  0892                     	;# 
   324  0892                     	;# 
   325  0892                     	;# 
   326  0893                     	;# 
   327  0893                     	;# 
   328  0893                     	;# 
   329  0893                     	;# 
   330  0893                     	;# 
   331  0893                     	;# 
   332  0894                     	;# 
   333  0894                     	;# 
   334  0894                     	;# 
   335  0895                     	;# 
   336  0895                     	;# 
   337  0895                     	;# 
   338  0896                     	;# 
   339  0896                     	;# 
   340  0896                     	;# 
   341  089B                     	;# 
   342  0911                     	;# 
   343  0912                     	;# 
   344  0913                     	;# 
   345  0914                     	;# 
   346  0915                     	;# 
   347  0916                     	;# 
   348  0918                     	;# 
   349  0919                     	;# 
   350  091A                     	;# 
   351  091B                     	;# 
   352  091C                     	;# 
   353  091D                     	;# 
   354  091E                     	;# 
   355  091F                     	;# 
   356  0E0F                     	;# 
   357  0E10                     	;# 
   358  0E11                     	;# 
   359  0E12                     	;# 
   360  0E13                     	;# 
   361  0E14                     	;# 
   362  0E15                     	;# 
   363  0E16                     	;# 
   364  0E17                     	;# 
   365  0E18                     	;# 
   366  0E19                     	;# 
   367  0E1A                     	;# 
   368  0E1B                     	;# 
   369  0E1C                     	;# 
   370  0E1D                     	;# 
   371  0E1E                     	;# 
   372  0E1F                     	;# 
   373  0E20                     	;# 
   374  0E21                     	;# 
   375  0E22                     	;# 
   376  0E24                     	;# 
   377  0E25                     	;# 
   378  0E28                     	;# 
   379  0E29                     	;# 
   380  0E2A                     	;# 
   381  0E2B                     	;# 
   382  0E2C                     	;# 
   383  0E2D                     	;# 
   384  0E2E                     	;# 
   385  0E2F                     	;# 
   386  0E90                     	;# 
   387  0E91                     	;# 
   388  0E92                     	;# 
   389  0E94                     	;# 
   390  0E95                     	;# 
   391  0EA0                     	;# 
   392  0EA1                     	;# 
   393  0EA2                     	;# 
   394  0EA3                     	;# 
   395  0EA4                     	;# 
   396  0EA5                     	;# 
   397  0F0F                     	;# 
   398  0F10                     	;# 
   399  0F11                     	;# 
   400  0F12                     	;# 
   401  0F13                     	;# 
   402  0F14                     	;# 
   403  0F15                     	;# 
   404  0F16                     	;# 
   405  0F17                     	;# 
   406  0F18                     	;# 
   407  0F19                     	;# 
   408  0F1A                     	;# 
   409  0F1B                     	;# 
   410  0F1C                     	;# 
   411  0F1D                     	;# 
   412  0F1E                     	;# 
   413  0F1F                     	;# 
   414  0F20                     	;# 
   415  0F21                     	;# 
   416  0F22                     	;# 
   417  0F23                     	;# 
   418  0F24                     	;# 
   419  0F25                     	;# 
   420  0F26                     	;# 
   421  0F27                     	;# 
   422  0F28                     	;# 
   423  0F29                     	;# 
   424  0F2A                     	;# 
   425  0F2B                     	;# 
   426  0F2C                     	;# 
   427  0F2D                     	;# 
   428  0F2E                     	;# 
   429  0F2F                     	;# 
   430  0F30                     	;# 
   431  0F31                     	;# 
   432  0F32                     	;# 
   433  0F33                     	;# 
   434  0F34                     	;# 
   435  0F35                     	;# 
   436  0F36                     	;# 
   437  0F37                     	;# 
   438  0FE4                     	;# 
   439  0FE5                     	;# 
   440  0FE6                     	;# 
   441  0FE7                     	;# 
   442  0FE8                     	;# 
   443  0FE9                     	;# 
   444  0FEA                     	;# 
   445  0FEB                     	;# 
   446  0FED                     	;# 
   447  0FEE                     	;# 
   448  0FEF                     	;# 
   449  0000                     	;# 
   450  0001                     	;# 
   451  0002                     	;# 
   452  0003                     	;# 
   453  0004                     	;# 
   454  0005                     	;# 
   455  0006                     	;# 
   456  0007                     	;# 
   457  0008                     	;# 
   458  0009                     	;# 
   459  000A                     	;# 
   460  000B                     	;# 
   461  000C                     	;# 
   462  000E                     	;# 
   463  0010                     	;# 
   464  0011                     	;# 
   465  0012                     	;# 
   466  0013                     	;# 
   467  0014                     	;# 
   468  0015                     	;# 
   469  0015                     	;# 
   470  0016                     	;# 
   471  0016                     	;# 
   472  0017                     	;# 
   473  0018                     	;# 
   474  0019                     	;# 
   475  0019                     	;# 
   476  001A                     	;# 
   477  001B                     	;# 
   478  001C                     	;# 
   479  001D                     	;# 
   480  001E                     	;# 
   481  001F                     	;# 
   482  008C                     	;# 
   483  008E                     	;# 
   484  0090                     	;# 
   485  0091                     	;# 
   486  0092                     	;# 
   487  0093                     	;# 
   488  0094                     	;# 
   489  0097                     	;# 
   490  009B                     	;# 
   491  009B                     	;# 
   492  009C                     	;# 
   493  009D                     	;# 
   494  009E                     	;# 
   495  009F                     	;# 
   496  010C                     	;# 
   497  010E                     	;# 
   498  0111                     	;# 
   499  0112                     	;# 
   500  0113                     	;# 
   501  0114                     	;# 
   502  0115                     	;# 
   503  0116                     	;# 
   504  0117                     	;# 
   505  0118                     	;# 
   506  0119                     	;# 
   507  018C                     	;# 
   508  018E                     	;# 
   509  0199                     	;# 
   510  0199                     	;# 
   511  0199                     	;# 
   512  019A                     	;# 
   513  019A                     	;# 
   514  019A                     	;# 
   515  019B                     	;# 
   516  019B                     	;# 
   517  019B                     	;# 
   518  019B                     	;# 
   519  019B                     	;# 
   520  019C                     	;# 
   521  019C                     	;# 
   522  019C                     	;# 
   523  019D                     	;# 
   524  019D                     	;# 
   525  019D                     	;# 
   526  019E                     	;# 
   527  019E                     	;# 
   528  019E                     	;# 
   529  019F                     	;# 
   530  019F                     	;# 
   531  019F                     	;# 
   532  019F                     	;# 
   533  019F                     	;# 
   534  020C                     	;# 
   535  020E                     	;# 
   536  0211                     	;# 
   537  0211                     	;# 
   538  0212                     	;# 
   539  0212                     	;# 
   540  0213                     	;# 
   541  0213                     	;# 
   542  0214                     	;# 
   543  0214                     	;# 
   544  0215                     	;# 
   545  0215                     	;# 
   546  0215                     	;# 
   547  0215                     	;# 
   548  0216                     	;# 
   549  0216                     	;# 
   550  0217                     	;# 
   551  0217                     	;# 
   552  0219                     	;# 
   553  021A                     	;# 
   554  021B                     	;# 
   555  021C                     	;# 
   556  021D                     	;# 
   557  021D                     	;# 
   558  021E                     	;# 
   559  021F                     	;# 
   560  028C                     	;# 
   561  028E                     	;# 
   562  0291                     	;# 
   563  0291                     	;# 
   564  0292                     	;# 
   565  0293                     	;# 
   566  0294                     	;# 
   567  0295                     	;# 
   568  0295                     	;# 
   569  0296                     	;# 
   570  0297                     	;# 
   571  0298                     	;# 
   572  029F                     	;# 
   573  030C                     	;# 
   574  030E                     	;# 
   575  0311                     	;# 
   576  0311                     	;# 
   577  0312                     	;# 
   578  0313                     	;# 
   579  0314                     	;# 
   580  0315                     	;# 
   581  0315                     	;# 
   582  0316                     	;# 
   583  0317                     	;# 
   584  0318                     	;# 
   585  038C                     	;# 
   586  038E                     	;# 
   587  0391                     	;# 
   588  0392                     	;# 
   589  0393                     	;# 
   590  0397                     	;# 
   591  0398                     	;# 
   592  0399                     	;# 
   593  039A                     	;# 
   594  039C                     	;# 
   595  039D                     	;# 
   596  039E                     	;# 
   597  039F                     	;# 
   598  0411                     	;# 
   599  0411                     	;# 
   600  0412                     	;# 
   601  0413                     	;# 
   602  0414                     	;# 
   603  0415                     	;# 
   604  0416                     	;# 
   605  0417                     	;# 
   606  0418                     	;# 
   607  0418                     	;# 
   608  0419                     	;# 
   609  041A                     	;# 
   610  041B                     	;# 
   611  041C                     	;# 
   612  041D                     	;# 
   613  041E                     	;# 
   614  041F                     	;# 
   615  0498                     	;# 
   616  0498                     	;# 
   617  0499                     	;# 
   618  049A                     	;# 
   619  049B                     	;# 
   620  049B                     	;# 
   621  049C                     	;# 
   622  049D                     	;# 
   623  049E                     	;# 
   624  049F                     	;# 
   625  0617                     	;# 
   626  0618                     	;# 
   627  0619                     	;# 
   628  0619                     	;# 
   629  061A                     	;# 
   630  061B                     	;# 
   631  061C                     	;# 
   632  061C                     	;# 
   633  061F                     	;# 
   634  0691                     	;# 
   635  0692                     	;# 
   636  0693                     	;# 
   637  0694                     	;# 
   638  0695                     	;# 
   639  0696                     	;# 
   640  0697                     	;# 
   641  0698                     	;# 
   642  0699                     	;# 
   643  0711                     	;# 
   644  0712                     	;# 
   645  0713                     	;# 
   646  0714                     	;# 
   647  0715                     	;# 
   648  0716                     	;# 
   649  0717                     	;# 
   650  0718                     	;# 
   651  0719                     	;# 
   652  0891                     	;# 
   653  0891                     	;# 
   654  0891                     	;# 
   655  0891                     	;# 
   656  0891                     	;# 
   657  0891                     	;# 
   658  0892                     	;# 
   659  0892                     	;# 
   660  0892                     	;# 
   661  0893                     	;# 
   662  0893                     	;# 
   663  0893                     	;# 
   664  0893                     	;# 
   665  0893                     	;# 
   666  0893                     	;# 
   667  0894                     	;# 
   668  0894                     	;# 
   669  0894                     	;# 
   670  0895                     	;# 
   671  0895                     	;# 
   672  0895                     	;# 
   673  0896                     	;# 
   674  0896                     	;# 
   675  0896                     	;# 
   676  089B                     	;# 
   677  0911                     	;# 
   678  0912                     	;# 
   679  0913                     	;# 
   680  0914                     	;# 
   681  0915                     	;# 
   682  0916                     	;# 
   683  0918                     	;# 
   684  0919                     	;# 
   685  091A                     	;# 
   686  091B                     	;# 
   687  091C                     	;# 
   688  091D                     	;# 
   689  091E                     	;# 
   690  091F                     	;# 
   691  0E0F                     	;# 
   692  0E10                     	;# 
   693  0E11                     	;# 
   694  0E12                     	;# 
   695  0E13                     	;# 
   696  0E14                     	;# 
   697  0E15                     	;# 
   698  0E16                     	;# 
   699  0E17                     	;# 
   700  0E18                     	;# 
   701  0E19                     	;# 
   702  0E1A                     	;# 
   703  0E1B                     	;# 
   704  0E1C                     	;# 
   705  0E1D                     	;# 
   706  0E1E                     	;# 
   707  0E1F                     	;# 
   708  0E20                     	;# 
   709  0E21                     	;# 
   710  0E22                     	;# 
   711  0E24                     	;# 
   712  0E25                     	;# 
   713  0E28                     	;# 
   714  0E29                     	;# 
   715  0E2A                     	;# 
   716  0E2B                     	;# 
   717  0E2C                     	;# 
   718  0E2D                     	;# 
   719  0E2E                     	;# 
   720  0E2F                     	;# 
   721  0E90                     	;# 
   722  0E91                     	;# 
   723  0E92                     	;# 
   724  0E94                     	;# 
   725  0E95                     	;# 
   726  0EA0                     	;# 
   727  0EA1                     	;# 
   728  0EA2                     	;# 
   729  0EA3                     	;# 
   730  0EA4                     	;# 
   731  0EA5                     	;# 
   732  0F0F                     	;# 
   733  0F10                     	;# 
   734  0F11                     	;# 
   735  0F12                     	;# 
   736  0F13                     	;# 
   737  0F14                     	;# 
   738  0F15                     	;# 
   739  0F16                     	;# 
   740  0F17                     	;# 
   741  0F18                     	;# 
   742  0F19                     	;# 
   743  0F1A                     	;# 
   744  0F1B                     	;# 
   745  0F1C                     	;# 
   746  0F1D                     	;# 
   747  0F1E                     	;# 
   748  0F1F                     	;# 
   749  0F20                     	;# 
   750  0F21                     	;# 
   751  0F22                     	;# 
   752  0F23                     	;# 
   753  0F24                     	;# 
   754  0F25                     	;# 
   755  0F26                     	;# 
   756  0F27                     	;# 
   757  0F28                     	;# 
   758  0F29                     	;# 
   759  0F2A                     	;# 
   760  0F2B                     	;# 
   761  0F2C                     	;# 
   762  0F2D                     	;# 
   763  0F2E                     	;# 
   764  0F2F                     	;# 
   765  0F30                     	;# 
   766  0F31                     	;# 
   767  0F32                     	;# 
   768  0F33                     	;# 
   769  0F34                     	;# 
   770  0F35                     	;# 
   771  0F36                     	;# 
   772  0F37                     	;# 
   773  0FE4                     	;# 
   774  0FE5                     	;# 
   775  0FE6                     	;# 
   776  0FE7                     	;# 
   777  0FE8                     	;# 
   778  0FE9                     	;# 
   779  0FEA                     	;# 
   780  0FEB                     	;# 
   781  0FED                     	;# 
   782  0FEE                     	;# 
   783  0FEF                     	;# 
   784  0000                     	;# 
   785  0001                     	;# 
   786  0002                     	;# 
   787  0003                     	;# 
   788  0004                     	;# 
   789  0005                     	;# 
   790  0006                     	;# 
   791  0007                     	;# 
   792  0008                     	;# 
   793  0009                     	;# 
   794  000A                     	;# 
   795  000B                     	;# 
   796  000C                     	;# 
   797  000E                     	;# 
   798  0010                     	;# 
   799  0011                     	;# 
   800  0012                     	;# 
   801  0013                     	;# 
   802  0014                     	;# 
   803  0015                     	;# 
   804  0015                     	;# 
   805  0016                     	;# 
   806  0016                     	;# 
   807  0017                     	;# 
   808  0018                     	;# 
   809  0019                     	;# 
   810  0019                     	;# 
   811  001A                     	;# 
   812  001B                     	;# 
   813  001C                     	;# 
   814  001D                     	;# 
   815  001E                     	;# 
   816  001F                     	;# 
   817  008C                     	;# 
   818  008E                     	;# 
   819  0090                     	;# 
   820  0091                     	;# 
   821  0092                     	;# 
   822  0093                     	;# 
   823  0094                     	;# 
   824  0097                     	;# 
   825  009B                     	;# 
   826  009B                     	;# 
   827  009C                     	;# 
   828  009D                     	;# 
   829  009E                     	;# 
   830  009F                     	;# 
   831  010C                     	;# 
   832  010E                     	;# 
   833  0111                     	;# 
   834  0112                     	;# 
   835  0113                     	;# 
   836  0114                     	;# 
   837  0115                     	;# 
   838  0116                     	;# 
   839  0117                     	;# 
   840  0118                     	;# 
   841  0119                     	;# 
   842  018C                     	;# 
   843  018E                     	;# 
   844  0199                     	;# 
   845  0199                     	;# 
   846  0199                     	;# 
   847  019A                     	;# 
   848  019A                     	;# 
   849  019A                     	;# 
   850  019B                     	;# 
   851  019B                     	;# 
   852  019B                     	;# 
   853  019B                     	;# 
   854  019B                     	;# 
   855  019C                     	;# 
   856  019C                     	;# 
   857  019C                     	;# 
   858  019D                     	;# 
   859  019D                     	;# 
   860  019D                     	;# 
   861  019E                     	;# 
   862  019E                     	;# 
   863  019E                     	;# 
   864  019F                     	;# 
   865  019F                     	;# 
   866  019F                     	;# 
   867  019F                     	;# 
   868  019F                     	;# 
   869  020C                     	;# 
   870  020E                     	;# 
   871  0211                     	;# 
   872  0211                     	;# 
   873  0212                     	;# 
   874  0212                     	;# 
   875  0213                     	;# 
   876  0213                     	;# 
   877  0214                     	;# 
   878  0214                     	;# 
   879  0215                     	;# 
   880  0215                     	;# 
   881  0215                     	;# 
   882  0215                     	;# 
   883  0216                     	;# 
   884  0216                     	;# 
   885  0217                     	;# 
   886  0217                     	;# 
   887  0219                     	;# 
   888  021A                     	;# 
   889  021B                     	;# 
   890  021C                     	;# 
   891  021D                     	;# 
   892  021D                     	;# 
   893  021E                     	;# 
   894  021F                     	;# 
   895  028C                     	;# 
   896  028E                     	;# 
   897  0291                     	;# 
   898  0291                     	;# 
   899  0292                     	;# 
   900  0293                     	;# 
   901  0294                     	;# 
   902  0295                     	;# 
   903  0295                     	;# 
   904  0296                     	;# 
   905  0297                     	;# 
   906  0298                     	;# 
   907  029F                     	;# 
   908  030C                     	;# 
   909  030E                     	;# 
   910  0311                     	;# 
   911  0311                     	;# 
   912  0312                     	;# 
   913  0313                     	;# 
   914  0314                     	;# 
   915  0315                     	;# 
   916  0315                     	;# 
   917  0316                     	;# 
   918  0317                     	;# 
   919  0318                     	;# 
   920  038C                     	;# 
   921  038E                     	;# 
   922  0391                     	;# 
   923  0392                     	;# 
   924  0393                     	;# 
   925  0397                     	;# 
   926  0398                     	;# 
   927  0399                     	;# 
   928  039A                     	;# 
   929  039C                     	;# 
   930  039D                     	;# 
   931  039E                     	;# 
   932  039F                     	;# 
   933  0411                     	;# 
   934  0411                     	;# 
   935  0412                     	;# 
   936  0413                     	;# 
   937  0414                     	;# 
   938  0415                     	;# 
   939  0416                     	;# 
   940  0417                     	;# 
   941  0418                     	;# 
   942  0418                     	;# 
   943  0419                     	;# 
   944  041A                     	;# 
   945  041B                     	;# 
   946  041C                     	;# 
   947  041D                     	;# 
   948  041E                     	;# 
   949  041F                     	;# 
   950  0498                     	;# 
   951  0498                     	;# 
   952  0499                     	;# 
   953  049A                     	;# 
   954  049B                     	;# 
   955  049B                     	;# 
   956  049C                     	;# 
   957  049D                     	;# 
   958  049E                     	;# 
   959  049F                     	;# 
   960  0617                     	;# 
   961  0618                     	;# 
   962  0619                     	;# 
   963  0619                     	;# 
   964  061A                     	;# 
   965  061B                     	;# 
   966  061C                     	;# 
   967  061C                     	;# 
   968  061F                     	;# 
   969  0691                     	;# 
   970  0692                     	;# 
   971  0693                     	;# 
   972  0694                     	;# 
   973  0695                     	;# 
   974  0696                     	;# 
   975  0697                     	;# 
   976  0698                     	;# 
   977  0699                     	;# 
   978  0711                     	;# 
   979  0712                     	;# 
   980  0713                     	;# 
   981  0714                     	;# 
   982  0715                     	;# 
   983  0716                     	;# 
   984  0717                     	;# 
   985  0718                     	;# 
   986  0719                     	;# 
   987  0891                     	;# 
   988  0891                     	;# 
   989  0891                     	;# 
   990  0891                     	;# 
   991  0891                     	;# 
   992  0891                     	;# 
   993  0892                     	;# 
   994  0892                     	;# 
   995  0892                     	;# 
   996  0893                     	;# 
   997  0893                     	;# 
   998  0893                     	;# 
   999  0893                     	;# 
  1000  0893                     	;# 
  1001  0893                     	;# 
  1002  0894                     	;# 
  1003  0894                     	;# 
  1004  0894                     	;# 
  1005  0895                     	;# 
  1006  0895                     	;# 
  1007  0895                     	;# 
  1008  0896                     	;# 
  1009  0896                     	;# 
  1010  0896                     	;# 
  1011  089B                     	;# 
  1012  0911                     	;# 
  1013  0912                     	;# 
  1014  0913                     	;# 
  1015  0914                     	;# 
  1016  0915                     	;# 
  1017  0916                     	;# 
  1018  0918                     	;# 
  1019  0919                     	;# 
  1020  091A                     	;# 
  1021  091B                     	;# 
  1022  091C                     	;# 
  1023  091D                     	;# 
  1024  091E                     	;# 
  1025  091F                     	;# 
  1026  0E0F                     	;# 
  1027  0E10                     	;# 
  1028  0E11                     	;# 
  1029  0E12                     	;# 
  1030  0E13                     	;# 
  1031  0E14                     	;# 
  1032  0E15                     	;# 
  1033  0E16                     	;# 
  1034  0E17                     	;# 
  1035  0E18                     	;# 
  1036  0E19                     	;# 
  1037  0E1A                     	;# 
  1038  0E1B                     	;# 
  1039  0E1C                     	;# 
  1040  0E1D                     	;# 
  1041  0E1E                     	;# 
  1042  0E1F                     	;# 
  1043  0E20                     	;# 
  1044  0E21                     	;# 
  1045  0E22                     	;# 
  1046  0E24                     	;# 
  1047  0E25                     	;# 
  1048  0E28                     	;# 
  1049  0E29                     	;# 
  1050  0E2A                     	;# 
  1051  0E2B                     	;# 
  1052  0E2C                     	;# 
  1053  0E2D                     	;# 
  1054  0E2E                     	;# 
  1055  0E2F                     	;# 
  1056  0E90                     	;# 
  1057  0E91                     	;# 
  1058  0E92                     	;# 
  1059  0E94                     	;# 
  1060  0E95                     	;# 
  1061  0EA0                     	;# 
  1062  0EA1                     	;# 
  1063  0EA2                     	;# 
  1064  0EA3                     	;# 
  1065  0EA4                     	;# 
  1066  0EA5                     	;# 
  1067  0F0F                     	;# 
  1068  0F10                     	;# 
  1069  0F11                     	;# 
  1070  0F12                     	;# 
  1071  0F13                     	;# 
  1072  0F14                     	;# 
  1073  0F15                     	;# 
  1074  0F16                     	;# 
  1075  0F17                     	;# 
  1076  0F18                     	;# 
  1077  0F19                     	;# 
  1078  0F1A                     	;# 
  1079  0F1B                     	;# 
  1080  0F1C                     	;# 
  1081  0F1D                     	;# 
  1082  0F1E                     	;# 
  1083  0F1F                     	;# 
  1084  0F20                     	;# 
  1085  0F21                     	;# 
  1086  0F22                     	;# 
  1087  0F23                     	;# 
  1088  0F24                     	;# 
  1089  0F25                     	;# 
  1090  0F26                     	;# 
  1091  0F27                     	;# 
  1092  0F28                     	;# 
  1093  0F29                     	;# 
  1094  0F2A                     	;# 
  1095  0F2B                     	;# 
  1096  0F2C                     	;# 
  1097  0F2D                     	;# 
  1098  0F2E                     	;# 
  1099  0F2F                     	;# 
  1100  0F30                     	;# 
  1101  0F31                     	;# 
  1102  0F32                     	;# 
  1103  0F33                     	;# 
  1104  0F34                     	;# 
  1105  0F35                     	;# 
  1106  0F36                     	;# 
  1107  0F37                     	;# 
  1108  0FE4                     	;# 
  1109  0FE5                     	;# 
  1110  0FE6                     	;# 
  1111  0FE7                     	;# 
  1112  0FE8                     	;# 
  1113  0FE9                     	;# 
  1114  0FEA                     	;# 
  1115  0FEB                     	;# 
  1116  0FED                     	;# 
  1117  0FEE                     	;# 
  1118  0FEF                     	;# 
  1119  0000                     	;# 
  1120  0001                     	;# 
  1121  0002                     	;# 
  1122  0003                     	;# 
  1123  0004                     	;# 
  1124  0005                     	;# 
  1125  0006                     	;# 
  1126  0007                     	;# 
  1127  0008                     	;# 
  1128  0009                     	;# 
  1129  000A                     	;# 
  1130  000B                     	;# 
  1131  000C                     	;# 
  1132  000E                     	;# 
  1133  0010                     	;# 
  1134  0011                     	;# 
  1135  0012                     	;# 
  1136  0013                     	;# 
  1137  0014                     	;# 
  1138  0015                     	;# 
  1139  0015                     	;# 
  1140  0016                     	;# 
  1141  0016                     	;# 
  1142  0017                     	;# 
  1143  0018                     	;# 
  1144  0019                     	;# 
  1145  0019                     	;# 
  1146  001A                     	;# 
  1147  001B                     	;# 
  1148  001C                     	;# 
  1149  001D                     	;# 
  1150  001E                     	;# 
  1151  001F                     	;# 
  1152  008C                     	;# 
  1153  008E                     	;# 
  1154  0090                     	;# 
  1155  0091                     	;# 
  1156  0092                     	;# 
  1157  0093                     	;# 
  1158  0094                     	;# 
  1159  0097                     	;# 
  1160  009B                     	;# 
  1161  009B                     	;# 
  1162  009C                     	;# 
  1163  009D                     	;# 
  1164  009E                     	;# 
  1165  009F                     	;# 
  1166  010C                     	;# 
  1167  010E                     	;# 
  1168  0111                     	;# 
  1169  0112                     	;# 
  1170  0113                     	;# 
  1171  0114                     	;# 
  1172  0115                     	;# 
  1173  0116                     	;# 
  1174  0117                     	;# 
  1175  0118                     	;# 
  1176  0119                     	;# 
  1177  018C                     	;# 
  1178  018E                     	;# 
  1179  0199                     	;# 
  1180  0199                     	;# 
  1181  0199                     	;# 
  1182  019A                     	;# 
  1183  019A                     	;# 
  1184  019A                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019B                     	;# 
  1189  019B                     	;# 
  1190  019C                     	;# 
  1191  019C                     	;# 
  1192  019C                     	;# 
  1193  019D                     	;# 
  1194  019D                     	;# 
  1195  019D                     	;# 
  1196  019E                     	;# 
  1197  019E                     	;# 
  1198  019E                     	;# 
  1199  019F                     	;# 
  1200  019F                     	;# 
  1201  019F                     	;# 
  1202  019F                     	;# 
  1203  019F                     	;# 
  1204  020C                     	;# 
  1205  020E                     	;# 
  1206  0211                     	;# 
  1207  0211                     	;# 
  1208  0212                     	;# 
  1209  0212                     	;# 
  1210  0213                     	;# 
  1211  0213                     	;# 
  1212  0214                     	;# 
  1213  0214                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0215                     	;# 
  1217  0215                     	;# 
  1218  0216                     	;# 
  1219  0216                     	;# 
  1220  0217                     	;# 
  1221  0217                     	;# 
  1222  0219                     	;# 
  1223  021A                     	;# 
  1224  021B                     	;# 
  1225  021C                     	;# 
  1226  021D                     	;# 
  1227  021D                     	;# 
  1228  021E                     	;# 
  1229  021F                     	;# 
  1230  028C                     	;# 
  1231  028E                     	;# 
  1232  0291                     	;# 
  1233  0291                     	;# 
  1234  0292                     	;# 
  1235  0293                     	;# 
  1236  0294                     	;# 
  1237  0295                     	;# 
  1238  0295                     	;# 
  1239  0296                     	;# 
  1240  0297                     	;# 
  1241  0298                     	;# 
  1242  029F                     	;# 
  1243  030C                     	;# 
  1244  030E                     	;# 
  1245  0311                     	;# 
  1246  0311                     	;# 
  1247  0312                     	;# 
  1248  0313                     	;# 
  1249  0314                     	;# 
  1250  0315                     	;# 
  1251  0315                     	;# 
  1252  0316                     	;# 
  1253  0317                     	;# 
  1254  0318                     	;# 
  1255  038C                     	;# 
  1256  038E                     	;# 
  1257  0391                     	;# 
  1258  0392                     	;# 
  1259  0393                     	;# 
  1260  0397                     	;# 
  1261  0398                     	;# 
  1262  0399                     	;# 
  1263  039A                     	;# 
  1264  039C                     	;# 
  1265  039D                     	;# 
  1266  039E                     	;# 
  1267  039F                     	;# 
  1268  0411                     	;# 
  1269  0411                     	;# 
  1270  0412                     	;# 
  1271  0413                     	;# 
  1272  0414                     	;# 
  1273  0415                     	;# 
  1274  0416                     	;# 
  1275  0417                     	;# 
  1276  0418                     	;# 
  1277  0418                     	;# 
  1278  0419                     	;# 
  1279  041A                     	;# 
  1280  041B                     	;# 
  1281  041C                     	;# 
  1282  041D                     	;# 
  1283  041E                     	;# 
  1284  041F                     	;# 
  1285  0498                     	;# 
  1286  0498                     	;# 
  1287  0499                     	;# 
  1288  049A                     	;# 
  1289  049B                     	;# 
  1290  049B                     	;# 
  1291  049C                     	;# 
  1292  049D                     	;# 
  1293  049E                     	;# 
  1294  049F                     	;# 
  1295  0617                     	;# 
  1296  0618                     	;# 
  1297  0619                     	;# 
  1298  0619                     	;# 
  1299  061A                     	;# 
  1300  061B                     	;# 
  1301  061C                     	;# 
  1302  061C                     	;# 
  1303  061F                     	;# 
  1304  0691                     	;# 
  1305  0692                     	;# 
  1306  0693                     	;# 
  1307  0694                     	;# 
  1308  0695                     	;# 
  1309  0696                     	;# 
  1310  0697                     	;# 
  1311  0698                     	;# 
  1312  0699                     	;# 
  1313  0711                     	;# 
  1314  0712                     	;# 
  1315  0713                     	;# 
  1316  0714                     	;# 
  1317  0715                     	;# 
  1318  0716                     	;# 
  1319  0717                     	;# 
  1320  0718                     	;# 
  1321  0719                     	;# 
  1322  0891                     	;# 
  1323  0891                     	;# 
  1324  0891                     	;# 
  1325  0891                     	;# 
  1326  0891                     	;# 
  1327  0891                     	;# 
  1328  0892                     	;# 
  1329  0892                     	;# 
  1330  0892                     	;# 
  1331  0893                     	;# 
  1332  0893                     	;# 
  1333  0893                     	;# 
  1334  0893                     	;# 
  1335  0893                     	;# 
  1336  0893                     	;# 
  1337  0894                     	;# 
  1338  0894                     	;# 
  1339  0894                     	;# 
  1340  0895                     	;# 
  1341  0895                     	;# 
  1342  0895                     	;# 
  1343  0896                     	;# 
  1344  0896                     	;# 
  1345  0896                     	;# 
  1346  089B                     	;# 
  1347  0911                     	;# 
  1348  0912                     	;# 
  1349  0913                     	;# 
  1350  0914                     	;# 
  1351  0915                     	;# 
  1352  0916                     	;# 
  1353  0918                     	;# 
  1354  0919                     	;# 
  1355  091A                     	;# 
  1356  091B                     	;# 
  1357  091C                     	;# 
  1358  091D                     	;# 
  1359  091E                     	;# 
  1360  091F                     	;# 
  1361  0E0F                     	;# 
  1362  0E10                     	;# 
  1363  0E11                     	;# 
  1364  0E12                     	;# 
  1365  0E13                     	;# 
  1366  0E14                     	;# 
  1367  0E15                     	;# 
  1368  0E16                     	;# 
  1369  0E17                     	;# 
  1370  0E18                     	;# 
  1371  0E19                     	;# 
  1372  0E1A                     	;# 
  1373  0E1B                     	;# 
  1374  0E1C                     	;# 
  1375  0E1D                     	;# 
  1376  0E1E                     	;# 
  1377  0E1F                     	;# 
  1378  0E20                     	;# 
  1379  0E21                     	;# 
  1380  0E22                     	;# 
  1381  0E24                     	;# 
  1382  0E25                     	;# 
  1383  0E28                     	;# 
  1384  0E29                     	;# 
  1385  0E2A                     	;# 
  1386  0E2B                     	;# 
  1387  0E2C                     	;# 
  1388  0E2D                     	;# 
  1389  0E2E                     	;# 
  1390  0E2F                     	;# 
  1391  0E90                     	;# 
  1392  0E91                     	;# 
  1393  0E92                     	;# 
  1394  0E94                     	;# 
  1395  0E95                     	;# 
  1396  0EA0                     	;# 
  1397  0EA1                     	;# 
  1398  0EA2                     	;# 
  1399  0EA3                     	;# 
  1400  0EA4                     	;# 
  1401  0EA5                     	;# 
  1402  0F0F                     	;# 
  1403  0F10                     	;# 
  1404  0F11                     	;# 
  1405  0F12                     	;# 
  1406  0F13                     	;# 
  1407  0F14                     	;# 
  1408  0F15                     	;# 
  1409  0F16                     	;# 
  1410  0F17                     	;# 
  1411  0F18                     	;# 
  1412  0F19                     	;# 
  1413  0F1A                     	;# 
  1414  0F1B                     	;# 
  1415  0F1C                     	;# 
  1416  0F1D                     	;# 
  1417  0F1E                     	;# 
  1418  0F1F                     	;# 
  1419  0F20                     	;# 
  1420  0F21                     	;# 
  1421  0F22                     	;# 
  1422  0F23                     	;# 
  1423  0F24                     	;# 
  1424  0F25                     	;# 
  1425  0F26                     	;# 
  1426  0F27                     	;# 
  1427  0F28                     	;# 
  1428  0F29                     	;# 
  1429  0F2A                     	;# 
  1430  0F2B                     	;# 
  1431  0F2C                     	;# 
  1432  0F2D                     	;# 
  1433  0F2E                     	;# 
  1434  0F2F                     	;# 
  1435  0F30                     	;# 
  1436  0F31                     	;# 
  1437  0F32                     	;# 
  1438  0F33                     	;# 
  1439  0F34                     	;# 
  1440  0F35                     	;# 
  1441  0F36                     	;# 
  1442  0F37                     	;# 
  1443  0FE4                     	;# 
  1444  0FE5                     	;# 
  1445  0FE6                     	;# 
  1446  0FE7                     	;# 
  1447  0FE8                     	;# 
  1448  0FE9                     	;# 
  1449  0FEA                     	;# 
  1450  0FEB                     	;# 
  1451  0FED                     	;# 
  1452  0FEE                     	;# 
  1453  0FEF                     	;# 
  1454  0000                     	;# 
  1455  0001                     	;# 
  1456  0002                     	;# 
  1457  0003                     	;# 
  1458  0004                     	;# 
  1459  0005                     	;# 
  1460  0006                     	;# 
  1461  0007                     	;# 
  1462  0008                     	;# 
  1463  0009                     	;# 
  1464  000A                     	;# 
  1465  000B                     	;# 
  1466  000C                     	;# 
  1467  000E                     	;# 
  1468  0010                     	;# 
  1469  0011                     	;# 
  1470  0012                     	;# 
  1471  0013                     	;# 
  1472  0014                     	;# 
  1473  0015                     	;# 
  1474  0015                     	;# 
  1475  0016                     	;# 
  1476  0016                     	;# 
  1477  0017                     	;# 
  1478  0018                     	;# 
  1479  0019                     	;# 
  1480  0019                     	;# 
  1481  001A                     	;# 
  1482  001B                     	;# 
  1483  001C                     	;# 
  1484  001D                     	;# 
  1485  001E                     	;# 
  1486  001F                     	;# 
  1487  008C                     	;# 
  1488  008E                     	;# 
  1489  0090                     	;# 
  1490  0091                     	;# 
  1491  0092                     	;# 
  1492  0093                     	;# 
  1493  0094                     	;# 
  1494  0097                     	;# 
  1495  009B                     	;# 
  1496  009B                     	;# 
  1497  009C                     	;# 
  1498  009D                     	;# 
  1499  009E                     	;# 
  1500  009F                     	;# 
  1501  010C                     	;# 
  1502  010E                     	;# 
  1503  0111                     	;# 
  1504  0112                     	;# 
  1505  0113                     	;# 
  1506  0114                     	;# 
  1507  0115                     	;# 
  1508  0116                     	;# 
  1509  0117                     	;# 
  1510  0118                     	;# 
  1511  0119                     	;# 
  1512  018C                     	;# 
  1513  018E                     	;# 
  1514  0199                     	;# 
  1515  0199                     	;# 
  1516  0199                     	;# 
  1517  019A                     	;# 
  1518  019A                     	;# 
  1519  019A                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019B                     	;# 
  1525  019C                     	;# 
  1526  019C                     	;# 
  1527  019C                     	;# 
  1528  019D                     	;# 
  1529  019D                     	;# 
  1530  019D                     	;# 
  1531  019E                     	;# 
  1532  019E                     	;# 
  1533  019E                     	;# 
  1534  019F                     	;# 
  1535  019F                     	;# 
  1536  019F                     	;# 
  1537  019F                     	;# 
  1538  019F                     	;# 
  1539  020C                     	;# 
  1540  020E                     	;# 
  1541  0211                     	;# 
  1542  0211                     	;# 
  1543  0212                     	;# 
  1544  0212                     	;# 
  1545  0213                     	;# 
  1546  0213                     	;# 
  1547  0214                     	;# 
  1548  0214                     	;# 
  1549  0215                     	;# 
  1550  0215                     	;# 
  1551  0215                     	;# 
  1552  0215                     	;# 
  1553  0216                     	;# 
  1554  0216                     	;# 
  1555  0217                     	;# 
  1556  0217                     	;# 
  1557  0219                     	;# 
  1558  021A                     	;# 
  1559  021B                     	;# 
  1560  021C                     	;# 
  1561  021D                     	;# 
  1562  021D                     	;# 
  1563  021E                     	;# 
  1564  021F                     	;# 
  1565  028C                     	;# 
  1566  028E                     	;# 
  1567  0291                     	;# 
  1568  0291                     	;# 
  1569  0292                     	;# 
  1570  0293                     	;# 
  1571  0294                     	;# 
  1572  0295                     	;# 
  1573  0295                     	;# 
  1574  0296                     	;# 
  1575  0297                     	;# 
  1576  0298                     	;# 
  1577  029F                     	;# 
  1578  030C                     	;# 
  1579  030E                     	;# 
  1580  0311                     	;# 
  1581  0311                     	;# 
  1582  0312                     	;# 
  1583  0313                     	;# 
  1584  0314                     	;# 
  1585  0315                     	;# 
  1586  0315                     	;# 
  1587  0316                     	;# 
  1588  0317                     	;# 
  1589  0318                     	;# 
  1590  038C                     	;# 
  1591  038E                     	;# 
  1592  0391                     	;# 
  1593  0392                     	;# 
  1594  0393                     	;# 
  1595  0397                     	;# 
  1596  0398                     	;# 
  1597  0399                     	;# 
  1598  039A                     	;# 
  1599  039C                     	;# 
  1600  039D                     	;# 
  1601  039E                     	;# 
  1602  039F                     	;# 
  1603  0411                     	;# 
  1604  0411                     	;# 
  1605  0412                     	;# 
  1606  0413                     	;# 
  1607  0414                     	;# 
  1608  0415                     	;# 
  1609  0416                     	;# 
  1610  0417                     	;# 
  1611  0418                     	;# 
  1612  0418                     	;# 
  1613  0419                     	;# 
  1614  041A                     	;# 
  1615  041B                     	;# 
  1616  041C                     	;# 
  1617  041D                     	;# 
  1618  041E                     	;# 
  1619  041F                     	;# 
  1620  0498                     	;# 
  1621  0498                     	;# 
  1622  0499                     	;# 
  1623  049A                     	;# 
  1624  049B                     	;# 
  1625  049B                     	;# 
  1626  049C                     	;# 
  1627  049D                     	;# 
  1628  049E                     	;# 
  1629  049F                     	;# 
  1630  0617                     	;# 
  1631  0618                     	;# 
  1632  0619                     	;# 
  1633  0619                     	;# 
  1634  061A                     	;# 
  1635  061B                     	;# 
  1636  061C                     	;# 
  1637  061C                     	;# 
  1638  061F                     	;# 
  1639  0691                     	;# 
  1640  0692                     	;# 
  1641  0693                     	;# 
  1642  0694                     	;# 
  1643  0695                     	;# 
  1644  0696                     	;# 
  1645  0697                     	;# 
  1646  0698                     	;# 
  1647  0699                     	;# 
  1648  0711                     	;# 
  1649  0712                     	;# 
  1650  0713                     	;# 
  1651  0714                     	;# 
  1652  0715                     	;# 
  1653  0716                     	;# 
  1654  0717                     	;# 
  1655  0718                     	;# 
  1656  0719                     	;# 
  1657  0891                     	;# 
  1658  0891                     	;# 
  1659  0891                     	;# 
  1660  0891                     	;# 
  1661  0891                     	;# 
  1662  0891                     	;# 
  1663  0892                     	;# 
  1664  0892                     	;# 
  1665  0892                     	;# 
  1666  0893                     	;# 
  1667  0893                     	;# 
  1668  0893                     	;# 
  1669  0893                     	;# 
  1670  0893                     	;# 
  1671  0893                     	;# 
  1672  0894                     	;# 
  1673  0894                     	;# 
  1674  0894                     	;# 
  1675  0895                     	;# 
  1676  0895                     	;# 
  1677  0895                     	;# 
  1678  0896                     	;# 
  1679  0896                     	;# 
  1680  0896                     	;# 
  1681  089B                     	;# 
  1682  0911                     	;# 
  1683  0912                     	;# 
  1684  0913                     	;# 
  1685  0914                     	;# 
  1686  0915                     	;# 
  1687  0916                     	;# 
  1688  0918                     	;# 
  1689  0919                     	;# 
  1690  091A                     	;# 
  1691  091B                     	;# 
  1692  091C                     	;# 
  1693  091D                     	;# 
  1694  091E                     	;# 
  1695  091F                     	;# 
  1696  0E0F                     	;# 
  1697  0E10                     	;# 
  1698  0E11                     	;# 
  1699  0E12                     	;# 
  1700  0E13                     	;# 
  1701  0E14                     	;# 
  1702  0E15                     	;# 
  1703  0E16                     	;# 
  1704  0E17                     	;# 
  1705  0E18                     	;# 
  1706  0E19                     	;# 
  1707  0E1A                     	;# 
  1708  0E1B                     	;# 
  1709  0E1C                     	;# 
  1710  0E1D                     	;# 
  1711  0E1E                     	;# 
  1712  0E1F                     	;# 
  1713  0E20                     	;# 
  1714  0E21                     	;# 
  1715  0E22                     	;# 
  1716  0E24                     	;# 
  1717  0E25                     	;# 
  1718  0E28                     	;# 
  1719  0E29                     	;# 
  1720  0E2A                     	;# 
  1721  0E2B                     	;# 
  1722  0E2C                     	;# 
  1723  0E2D                     	;# 
  1724  0E2E                     	;# 
  1725  0E2F                     	;# 
  1726  0E90                     	;# 
  1727  0E91                     	;# 
  1728  0E92                     	;# 
  1729  0E94                     	;# 
  1730  0E95                     	;# 
  1731  0EA0                     	;# 
  1732  0EA1                     	;# 
  1733  0EA2                     	;# 
  1734  0EA3                     	;# 
  1735  0EA4                     	;# 
  1736  0EA5                     	;# 
  1737  0F0F                     	;# 
  1738  0F10                     	;# 
  1739  0F11                     	;# 
  1740  0F12                     	;# 
  1741  0F13                     	;# 
  1742  0F14                     	;# 
  1743  0F15                     	;# 
  1744  0F16                     	;# 
  1745  0F17                     	;# 
  1746  0F18                     	;# 
  1747  0F19                     	;# 
  1748  0F1A                     	;# 
  1749  0F1B                     	;# 
  1750  0F1C                     	;# 
  1751  0F1D                     	;# 
  1752  0F1E                     	;# 
  1753  0F1F                     	;# 
  1754  0F20                     	;# 
  1755  0F21                     	;# 
  1756  0F22                     	;# 
  1757  0F23                     	;# 
  1758  0F24                     	;# 
  1759  0F25                     	;# 
  1760  0F26                     	;# 
  1761  0F27                     	;# 
  1762  0F28                     	;# 
  1763  0F29                     	;# 
  1764  0F2A                     	;# 
  1765  0F2B                     	;# 
  1766  0F2C                     	;# 
  1767  0F2D                     	;# 
  1768  0F2E                     	;# 
  1769  0F2F                     	;# 
  1770  0F30                     	;# 
  1771  0F31                     	;# 
  1772  0F32                     	;# 
  1773  0F33                     	;# 
  1774  0F34                     	;# 
  1775  0F35                     	;# 
  1776  0F36                     	;# 
  1777  0F37                     	;# 
  1778  0FE4                     	;# 
  1779  0FE5                     	;# 
  1780  0FE6                     	;# 
  1781  0FE7                     	;# 
  1782  0FE8                     	;# 
  1783  0FE9                     	;# 
  1784  0FEA                     	;# 
  1785  0FEB                     	;# 
  1786  0FED                     	;# 
  1787  0FEE                     	;# 
  1788  0FEF                     	;# 
  1789  0000                     	;# 
  1790  0001                     	;# 
  1791  0002                     	;# 
  1792  0003                     	;# 
  1793  0004                     	;# 
  1794  0005                     	;# 
  1795  0006                     	;# 
  1796  0007                     	;# 
  1797  0008                     	;# 
  1798  0009                     	;# 
  1799  000A                     	;# 
  1800  000B                     	;# 
  1801  000C                     	;# 
  1802  000E                     	;# 
  1803  0010                     	;# 
  1804  0011                     	;# 
  1805  0012                     	;# 
  1806  0013                     	;# 
  1807  0014                     	;# 
  1808  0015                     	;# 
  1809  0015                     	;# 
  1810  0016                     	;# 
  1811  0016                     	;# 
  1812  0017                     	;# 
  1813  0018                     	;# 
  1814  0019                     	;# 
  1815  0019                     	;# 
  1816  001A                     	;# 
  1817  001B                     	;# 
  1818  001C                     	;# 
  1819  001D                     	;# 
  1820  001E                     	;# 
  1821  001F                     	;# 
  1822  008C                     	;# 
  1823  008E                     	;# 
  1824  0090                     	;# 
  1825  0091                     	;# 
  1826  0092                     	;# 
  1827  0093                     	;# 
  1828  0094                     	;# 
  1829  0097                     	;# 
  1830  009B                     	;# 
  1831  009B                     	;# 
  1832  009C                     	;# 
  1833  009D                     	;# 
  1834  009E                     	;# 
  1835  009F                     	;# 
  1836  010C                     	;# 
  1837  010E                     	;# 
  1838  0111                     	;# 
  1839  0112                     	;# 
  1840  0113                     	;# 
  1841  0114                     	;# 
  1842  0115                     	;# 
  1843  0116                     	;# 
  1844  0117                     	;# 
  1845  0118                     	;# 
  1846  0119                     	;# 
  1847  018C                     	;# 
  1848  018E                     	;# 
  1849  0199                     	;# 
  1850  0199                     	;# 
  1851  0199                     	;# 
  1852  019A                     	;# 
  1853  019A                     	;# 
  1854  019A                     	;# 
  1855  019B                     	;# 
  1856  019B                     	;# 
  1857  019B                     	;# 
  1858  019B                     	;# 
  1859  019B                     	;# 
  1860  019C                     	;# 
  1861  019C                     	;# 
  1862  019C                     	;# 
  1863  019D                     	;# 
  1864  019D                     	;# 
  1865  019D                     	;# 
  1866  019E                     	;# 
  1867  019E                     	;# 
  1868  019E                     	;# 
  1869  019F                     	;# 
  1870  019F                     	;# 
  1871  019F                     	;# 
  1872  019F                     	;# 
  1873  019F                     	;# 
  1874  020C                     	;# 
  1875  020E                     	;# 
  1876  0211                     	;# 
  1877  0211                     	;# 
  1878  0212                     	;# 
  1879  0212                     	;# 
  1880  0213                     	;# 
  1881  0213                     	;# 
  1882  0214                     	;# 
  1883  0214                     	;# 
  1884  0215                     	;# 
  1885  0215                     	;# 
  1886  0215                     	;# 
  1887  0215                     	;# 
  1888  0216                     	;# 
  1889  0216                     	;# 
  1890  0217                     	;# 
  1891  0217                     	;# 
  1892  0219                     	;# 
  1893  021A                     	;# 
  1894  021B                     	;# 
  1895  021C                     	;# 
  1896  021D                     	;# 
  1897  021D                     	;# 
  1898  021E                     	;# 
  1899  021F                     	;# 
  1900  028C                     	;# 
  1901  028E                     	;# 
  1902  0291                     	;# 
  1903  0291                     	;# 
  1904  0292                     	;# 
  1905  0293                     	;# 
  1906  0294                     	;# 
  1907  0295                     	;# 
  1908  0295                     	;# 
  1909  0296                     	;# 
  1910  0297                     	;# 
  1911  0298                     	;# 
  1912  029F                     	;# 
  1913  030C                     	;# 
  1914  030E                     	;# 
  1915  0311                     	;# 
  1916  0311                     	;# 
  1917  0312                     	;# 
  1918  0313                     	;# 
  1919  0314                     	;# 
  1920  0315                     	;# 
  1921  0315                     	;# 
  1922  0316                     	;# 
  1923  0317                     	;# 
  1924  0318                     	;# 
  1925  038C                     	;# 
  1926  038E                     	;# 
  1927  0391                     	;# 
  1928  0392                     	;# 
  1929  0393                     	;# 
  1930  0397                     	;# 
  1931  0398                     	;# 
  1932  0399                     	;# 
  1933  039A                     	;# 
  1934  039C                     	;# 
  1935  039D                     	;# 
  1936  039E                     	;# 
  1937  039F                     	;# 
  1938  0411                     	;# 
  1939  0411                     	;# 
  1940  0412                     	;# 
  1941  0413                     	;# 
  1942  0414                     	;# 
  1943  0415                     	;# 
  1944  0416                     	;# 
  1945  0417                     	;# 
  1946  0418                     	;# 
  1947  0418                     	;# 
  1948  0419                     	;# 
  1949  041A                     	;# 
  1950  041B                     	;# 
  1951  041C                     	;# 
  1952  041D                     	;# 
  1953  041E                     	;# 
  1954  041F                     	;# 
  1955  0498                     	;# 
  1956  0498                     	;# 
  1957  0499                     	;# 
  1958  049A                     	;# 
  1959  049B                     	;# 
  1960  049B                     	;# 
  1961  049C                     	;# 
  1962  049D                     	;# 
  1963  049E                     	;# 
  1964  049F                     	;# 
  1965  0617                     	;# 
  1966  0618                     	;# 
  1967  0619                     	;# 
  1968  0619                     	;# 
  1969  061A                     	;# 
  1970  061B                     	;# 
  1971  061C                     	;# 
  1972  061C                     	;# 
  1973  061F                     	;# 
  1974  0691                     	;# 
  1975  0692                     	;# 
  1976  0693                     	;# 
  1977  0694                     	;# 
  1978  0695                     	;# 
  1979  0696                     	;# 
  1980  0697                     	;# 
  1981  0698                     	;# 
  1982  0699                     	;# 
  1983  0711                     	;# 
  1984  0712                     	;# 
  1985  0713                     	;# 
  1986  0714                     	;# 
  1987  0715                     	;# 
  1988  0716                     	;# 
  1989  0717                     	;# 
  1990  0718                     	;# 
  1991  0719                     	;# 
  1992  0891                     	;# 
  1993  0891                     	;# 
  1994  0891                     	;# 
  1995  0891                     	;# 
  1996  0891                     	;# 
  1997  0891                     	;# 
  1998  0892                     	;# 
  1999  0892                     	;# 
  2000  0892                     	;# 
  2001  0893                     	;# 
  2002  0893                     	;# 
  2003  0893                     	;# 
  2004  0893                     	;# 
  2005  0893                     	;# 
  2006  0893                     	;# 
  2007  0894                     	;# 
  2008  0894                     	;# 
  2009  0894                     	;# 
  2010  0895                     	;# 
  2011  0895                     	;# 
  2012  0895                     	;# 
  2013  0896                     	;# 
  2014  0896                     	;# 
  2015  0896                     	;# 
  2016  089B                     	;# 
  2017  0911                     	;# 
  2018  0912                     	;# 
  2019  0913                     	;# 
  2020  0914                     	;# 
  2021  0915                     	;# 
  2022  0916                     	;# 
  2023  0918                     	;# 
  2024  0919                     	;# 
  2025  091A                     	;# 
  2026  091B                     	;# 
  2027  091C                     	;# 
  2028  091D                     	;# 
  2029  091E                     	;# 
  2030  091F                     	;# 
  2031  0E0F                     	;# 
  2032  0E10                     	;# 
  2033  0E11                     	;# 
  2034  0E12                     	;# 
  2035  0E13                     	;# 
  2036  0E14                     	;# 
  2037  0E15                     	;# 
  2038  0E16                     	;# 
  2039  0E17                     	;# 
  2040  0E18                     	;# 
  2041  0E19                     	;# 
  2042  0E1A                     	;# 
  2043  0E1B                     	;# 
  2044  0E1C                     	;# 
  2045  0E1D                     	;# 
  2046  0E1E                     	;# 
  2047  0E1F                     	;# 
  2048  0E20                     	;# 
  2049  0E21                     	;# 
  2050  0E22                     	;# 
  2051  0E24                     	;# 
  2052  0E25                     	;# 
  2053  0E28                     	;# 
  2054  0E29                     	;# 
  2055  0E2A                     	;# 
  2056  0E2B                     	;# 
  2057  0E2C                     	;# 
  2058  0E2D                     	;# 
  2059  0E2E                     	;# 
  2060  0E2F                     	;# 
  2061  0E90                     	;# 
  2062  0E91                     	;# 
  2063  0E92                     	;# 
  2064  0E94                     	;# 
  2065  0E95                     	;# 
  2066  0EA0                     	;# 
  2067  0EA1                     	;# 
  2068  0EA2                     	;# 
  2069  0EA3                     	;# 
  2070  0EA4                     	;# 
  2071  0EA5                     	;# 
  2072  0F0F                     	;# 
  2073  0F10                     	;# 
  2074  0F11                     	;# 
  2075  0F12                     	;# 
  2076  0F13                     	;# 
  2077  0F14                     	;# 
  2078  0F15                     	;# 
  2079  0F16                     	;# 
  2080  0F17                     	;# 
  2081  0F18                     	;# 
  2082  0F19                     	;# 
  2083  0F1A                     	;# 
  2084  0F1B                     	;# 
  2085  0F1C                     	;# 
  2086  0F1D                     	;# 
  2087  0F1E                     	;# 
  2088  0F1F                     	;# 
  2089  0F20                     	;# 
  2090  0F21                     	;# 
  2091  0F22                     	;# 
  2092  0F23                     	;# 
  2093  0F24                     	;# 
  2094  0F25                     	;# 
  2095  0F26                     	;# 
  2096  0F27                     	;# 
  2097  0F28                     	;# 
  2098  0F29                     	;# 
  2099  0F2A                     	;# 
  2100  0F2B                     	;# 
  2101  0F2C                     	;# 
  2102  0F2D                     	;# 
  2103  0F2E                     	;# 
  2104  0F2F                     	;# 
  2105  0F30                     	;# 
  2106  0F31                     	;# 
  2107  0F32                     	;# 
  2108  0F33                     	;# 
  2109  0F34                     	;# 
  2110  0F35                     	;# 
  2111  0F36                     	;# 
  2112  0F37                     	;# 
  2113  0FE4                     	;# 
  2114  0FE5                     	;# 
  2115  0FE6                     	;# 
  2116  0FE7                     	;# 
  2117  0FE8                     	;# 
  2118  0FE9                     	;# 
  2119  0FEA                     	;# 
  2120  0FEB                     	;# 
  2121  0FED                     	;# 
  2122  0FEE                     	;# 
  2123  0FEF                     	;# 
  2124                           
  2125                           	psect	idataBANK1
  2126  0003                     __pidataBANK1:	
  2127 ;;nrf24l01Service@width	offset	0
  2128 ;;nrf24l01Service@i	offset	1
  2129 ;;strcmp@s1	offset	0
  2130 ;;strcmp@r	offset	1
  2131 ;;strcmp@s2	offset=-1 (param)
  2132 ;;nrf24l01SendTXBuffer@packet	offset	0
  2133 ;;nrf24l01SendTXBuffer@i	offset	1
  2134 ;;nrf24l01SendTXBuffer@width	offset	2
  2135 ;;strlen@s	offset	0
  2136 ;;strlen@cp	offset	1
  2137 ;;nrf24l01SetRXMode@rxMode	offset	0
  2138 ;;nrf24l01Send@command	offset	0
  2139 ;;nrf24l01Send@data	offset=-1 (param)
  2140 ;;nrf24l01SPISend@data	offset	0
  2141 ;;memset@p	offset	0
  2142 ;;memset@p1	offset=-2 (param)
  2143 ;;memset@c	offset=-4 (param)
  2144 ;;memset@n	offset=-6 (param)
  2145 ;;nrf24l01Service@width	offset	0
  2146 ;;nrf24l01Service@i	offset	1
  2147 ;;strcmp@s1	offset	0
  2148 ;;strcmp@r	offset	1
  2149 ;;strcmp@s2	offset=-1 (param)
  2150 ;;nrf24l01SendTXBuffer@packet	offset	0
  2151 ;;nrf24l01SendTXBuffer@i	offset	1
  2152 ;;nrf24l01SendTXBuffer@width	offset	2
  2153 ;;strlen@s	offset	0
  2154 ;;strlen@cp	offset	1
  2155 ;;nrf24l01SetRXMode@rxMode	offset	0
  2156 ;;nrf24l01Send@command	offset	0
  2157 ;;nrf24l01Send@data	offset=-1 (param)
  2158 ;;nrf24l01SPISend@data	offset	0
  2159 ;;memset@p	offset	0
  2160 ;;memset@p1	offset=-2 (param)
  2161 ;;memset@c	offset=-4 (param)
  2162 ;;memset@n	offset=-6 (param)
  2163                           
  2164                           
  2165                           ;initializer for _romData
  2166  0003  3420               	retlw	low (_romDataMap| (0+256))
  2167                           
  2168                           	psect	stringtext1
  2169  1000                     __pstringtext1:	
  2170  1000                     _dpowers:	
  2171  1000  3401               	retlw	1
  2172  1001  3400               	retlw	0
  2173  1002  3400               	retlw	0
  2174  1003  3400               	retlw	0
  2175  1004  340A               	retlw	10
  2176  1005  3400               	retlw	0
  2177  1006  3400               	retlw	0
  2178  1007  3400               	retlw	0
  2179  1008  3464               	retlw	100
  2180  1009  3400               	retlw	0
  2181  100A  3400               	retlw	0
  2182  100B  3400               	retlw	0
  2183  100C  34E8               	retlw	232
  2184  100D  3403               	retlw	3
  2185  100E  3400               	retlw	0
  2186  100F  3400               	retlw	0
  2187  1010  3410               	retlw	16
  2188  1011  3427               	retlw	39
  2189  1012  3400               	retlw	0
  2190  1013  3400               	retlw	0
  2191  1014  34A0               	retlw	160
  2192  1015  3486               	retlw	134
  2193  1016  3401               	retlw	1
  2194  1017  3400               	retlw	0
  2195  1018  3440               	retlw	64
  2196  1019  3442               	retlw	66
  2197  101A  340F               	retlw	15
  2198  101B  3400               	retlw	0
  2199  101C  3480               	retlw	128
  2200  101D  3496               	retlw	150
  2201  101E  3498               	retlw	152
  2202  101F  3400               	retlw	0
  2203  1020  3400               	retlw	0
  2204  1021  34E1               	retlw	225
  2205  1022  34F5               	retlw	245
  2206  1023  3405               	retlw	5
  2207  1024  3400               	retlw	0
  2208  1025  34CA               	retlw	202
  2209  1026  349A               	retlw	154
  2210  1027  343B               	retlw	59
  2211  1028                     __end_of_dpowers:	
  2212                           
  2213                           	psect	stringtext2
  2214  182B                     __pstringtext2:	
  2215  182B                     _n_ADDRESS_P0:	
  2216  182B  34AD               	retlw	173
  2217  182C  3487               	retlw	135
  2218  182D  3466               	retlw	102
  2219  182E  34BC               	retlw	188
  2220  182F  34BB               	retlw	187
  2221  1830                     __end_of_n_ADDRESS_P0:	
  2222                           
  2223                           	psect	stringtext3
  2224  1800                     __pstringtext3:	
  2225  1800                     _n_ADDRESS_MUL:	
  2226  1800  3421               	retlw	33
  2227  1801                     __end_of_n_ADDRESS_MUL:	
  2228  000B                     _INTCONbits	set	11
  2229  0011                     _PIR1bits	set	17
  2230  0010                     _PIR0bits	set	16
  2231  000C                     _PORTAbits	set	12
  2232  000E                     _PORTCbits	set	14
  2233  0003                     _STATUSbits	set	3
  2234  0091                     _PIE1bits	set	145
  2235  009E                     _ADCON1bits	set	158
  2236  009C                     _ADRESH	set	156
  2237  009B                     _ADRESL	set	155
  2238  009D                     _ADCON0bits	set	157
  2239  0090                     _PIE0bits	set	144
  2240  0097                     _WDTCONbits	set	151
  2241  008E                     _TRISCbits	set	142
  2242  008C                     _TRISAbits	set	140
  2243  0117                     _FVRCONbits	set	279
  2244  018E                     _ANSELCbits	set	398
  2245  018C                     _ANSELAbits	set	396
  2246  018E                     _ANSELC	set	398
  2247  018C                     _ANSELA	set	396
  2248  020C                     _WPUAbits	set	524
  2249  020E                     _WPUC	set	526
  2250  020C                     _WPUA	set	524
  2251  0211                     _SSP1BUF	set	529
  2252  0214                     _SSP1STATbits	set	532
  2253  0215                     _SSP1CON1bits	set	533
  2254  028C                     _ODCONAbits	set	652
  2255  028E                     _ODCONC	set	654
  2256  028C                     _ODCONA	set	652
  2257  038E                     _INLVLC	set	910
  2258  038C                     _INLVLA	set	908
  2259  0896                     _NVMCON2	set	2198
  2260  0895                     _NVMCON1bits	set	2197
  2261  0893                     _NVMDATL	set	2195
  2262  0891                     _NVMADRL	set	2193
  2263  0892                     _NVMADRH	set	2194
  2264  0919                     _OSCCON1bits	set	2329
  2265  0EA0                     _RC0PPSbits	set	3744
  2266  0EA2                     _RC2PPSbits	set	3746
  2267  0EA1                     _RC1PPSbits	set	3745
  2268  1801                     STR_11:	
  2269  1801  3425               	retlw	37	;'%'
  2270  1802  346C               	retlw	108	;'l'
  2271  1803  3475               	retlw	117	;'u'
  2272  1804  342E               	retlw	46	;'.'
  2273  1805  3425               	retlw	37	;'%'
  2274  1806  3436               	retlw	54	;'6'
  2275  1807  342E               	retlw	46	;'.'
  2276  1808  3436               	retlw	54	;'6'
  2277  1809  346C               	retlw	108	;'l'
  2278  180A  3475               	retlw	117	;'u'
  2279  180B  3400               	retlw	0
  2280                           
  2281                           	psect	stringtext4
  2282  180C                     __pstringtext4:	
  2283  180C                     STR_5:	
  2284  180C  3441               	retlw	65	;'A'
  2285  180D  344E               	retlw	78	;'N'
  2286  180E  3443               	retlw	67	;'C'
  2287  180F  3433               	retlw	51	;'3'
  2288  1810  346D               	retlw	109	;'m'
  2289  1811  3456               	retlw	86	;'V'
  2290  1812  3400               	retlw	0
  2291                           
  2292                           	psect	stringtext5
  2293  1813                     __pstringtext5:	
  2294  1813                     STR_9:	
  2295  1813  3442               	retlw	66	;'B'
  2296  1814  344F               	retlw	79	;'O'
  2297  1815  344F               	retlw	79	;'O'
  2298  1816  3454               	retlw	84	;'T'
  2299  1817  3430               	retlw	48	;'0'
  2300  1818  3400               	retlw	0
  2301                           
  2302                           	psect	stringtext6
  2303  1819                     __pstringtext6:	
  2304  1819                     STR_10:	
  2305  1819  3442               	retlw	66	;'B'
  2306  181A  344F               	retlw	79	;'O'
  2307  181B  344F               	retlw	79	;'O'
  2308  181C  3454               	retlw	84	;'T'
  2309  181D  3431               	retlw	49	;'1'
  2310  181E  3400               	retlw	0
  2311                           
  2312                           	psect	stringtext7
  2313  181F                     __pstringtext7:	
  2314  181F                     STR_7:	
  2315  181F  3452               	retlw	82	;'R'
  2316  1820  3446               	retlw	70	;'F'
  2317  1821  3450               	retlw	80	;'P'
  2318  1822  3457               	retlw	87	;'W'
  2319  1823  3452               	retlw	82	;'R'
  2320  1824  3400               	retlw	0
  2321                           
  2322                           	psect	stringtext8
  2323  1825                     __pstringtext8:	
  2324  1825                     STR_3:	
  2325  1825  3443               	retlw	67	;'C'
  2326  1826  344F               	retlw	79	;'O'
  2327  1827  3455               	retlw	85	;'U'
  2328  1828  344E               	retlw	78	;'N'
  2329  1829  3454               	retlw	84	;'T'
  2330  182A  3400               	retlw	0
  2331                           
  2332                           	psect	stringtext9
  2333  1830                     __pstringtext9:	
  2334  1830                     STR_6:	
  2335  1830  3454               	retlw	84	;'T'
  2336  1831  3445               	retlw	69	;'E'
  2337  1832  344D               	retlw	77	;'M'
  2338  1833  3450               	retlw	80	;'P'
  2339  1834  3400               	retlw	0
  2340                           
  2341                           	psect	stringtext10
  2342  1835                     __pstringtext10:	
  2343  1835                     STR_4:	
  2344  1835  3456               	retlw	86	;'V'
  2345  1836  3442               	retlw	66	;'B'
  2346  1837  3441               	retlw	65	;'A'
  2347  1838  3454               	retlw	84	;'T'
  2348  1839  3400               	retlw	0
  2349                           
  2350                           	psect	stringtext11
  2351  183A                     __pstringtext11:	
  2352  183A                     STR_8:	
  2353  183A  3455               	retlw	85	;'U'
  2354  183B  3457               	retlw	87	;'W'
  2355  183C  3454               	retlw	84	;'T'
  2356  183D  3400               	retlw	0
  2357                           
  2358                           	psect	stringtext12
  2359  183E                     __pstringtext12:	
  2360  183E                     STR_1:	
  2361  183E  342F               	retlw	47	;'/'
  2362  183F  3400               	retlw	0
  2363                           
  2364                           	psect	stringtext13
  2365  0000                     __pstringtext13:	
  2366  183E                     
  2367                           ; #config settings
  2368  0000                     
  2369                           	psect	cinit
  2370  002F                     start_initialization:	
  2371  002F                     __initialization:	
  2372                           
  2373                           ; Initialize objects allocated to BANK1
  2374  002F  0021               	movlb	1	; select bank1
  2375  0030  3180  2003  3180   	fcall	__pidataBANK1	;fetch initializer
  2376  0033  00E3               	movwf	__pdataBANK1& (0+127)
  2377                           
  2378                           ; Clear objects allocated to BANK0
  2379  0034  0020               	movlb	0	; select bank0
  2380  0035  01E4               	clrf	__pbssBANK0& (0+127)
  2381  0036  01E5               	clrf	(__pbssBANK0+1)& (0+127)
  2382  0037  01E6               	clrf	(__pbssBANK0+2)& (0+127)
  2383  0038  01E7               	clrf	(__pbssBANK0+3)& (0+127)
  2384  0039  01E8               	clrf	(__pbssBANK0+4)& (0+127)
  2385  003A  01E9               	clrf	(__pbssBANK0+5)& (0+127)
  2386                           
  2387                           ; Clear objects allocated to BANK1
  2388  003B  0021               	movlb	1	; select bank1
  2389  003C  01DD               	clrf	__pbssBANK1& (0+127)
  2390  003D  01DE               	clrf	(__pbssBANK1+1)& (0+127)
  2391  003E  01DF               	clrf	(__pbssBANK1+2)& (0+127)
  2392  003F  01E0               	clrf	(__pbssBANK1+3)& (0+127)
  2393  0040  01E1               	clrf	(__pbssBANK1+4)& (0+127)
  2394  0041  01E2               	clrf	(__pbssBANK1+5)& (0+127)
  2395                           
  2396                           ; Clear objects allocated to BANK2
  2397  0042  3020               	movlw	low __pbssBANK2
  2398  0043  0084               	movwf	4
  2399  0044  3001               	movlw	high __pbssBANK2
  2400  0045  0085               	movwf	5
  2401  0046  302D               	movlw	45
  2402  0047  3197  27A6  3180   	fcall	clear_ram0
  2403                           
  2404                           ; Clear objects allocated to BANK3
  2405  004A  30A0               	movlw	low __pbssBANK3
  2406  004B  0084               	movwf	4
  2407  004C  3001               	movlw	high __pbssBANK3
  2408  004D  0085               	movwf	5
  2409  004E  3042               	movlw	66
  2410  004F  3197  27A6         	fcall	clear_ram0
  2411  0051                     end_of_initialization:	
  2412                           ;End of C runtime variable initialization code
  2413                           
  2414  0051                     __end_of__initialization:	
  2415  0051  0020               	movlb	0
  2416                           
  2417                           ;Initialize the stack pointer (FSR1)
  2418  0052  3071               	movlw	low ___sp
  2419  0053  0086               	movwf	6
  2420  0054  3021               	movlw	high ___sp
  2421  0055  0087               	movwf	7
  2422  0056  3186  2E50         	ljmp	_main	;jump to C main() function
  2423                           
  2424                           	psect	bssBANK0
  2425  0064                     __pbssBANK0:	
  2426  0064                     _status:	
  2427  0064                     	ds	5
  2428  0069                     _lastTXPacket:	
  2429  0069                     	ds	1
  2430                           
  2431                           	psect	bssBANK1
  2432  00DD                     __pbssBANK1:	
  2433  00DD                     _counter:	
  2434  00DD                     	ds	4
  2435  00E1                     _testCount:	
  2436  00E1                     	ds	2
  2437                           
  2438                           	psect	dataBANK1
  2439  00E3                     __pdataBANK1:	
  2440  00E3                     _romData:	
  2441  00E3                     	ds	1
  2442                           
  2443                           	psect	bssBANK2
  2444  0120                     __pbssBANK2:	
  2445  0120                     _romDataMap:	
  2446  0120                     	ds	28
  2447  013C                     ftoa@buf:	
  2448  013C                     	ds	17
  2449                           
  2450                           	psect	bssBANK3
  2451  01A0                     __pbssBANK3:	
  2452  01A0                     _RXPacket:	
  2453  01A0                     	ds	33
  2454  01C1                     _TXPacket:	
  2455  01C1                     	ds	33
  2456                           
  2457                           	psect	clrtext
  2458  17A6                     clear_ram0:	
  2459                           ;	Called with FSR0 containing the base address, and
  2460                           ;	WREG with the size to clear
  2461                           
  2462  17A6  0064               	clrwdt	;clear the watchdog before getting into this loop
  2463  17A7                     clrloop0:	
  2464  17A7  0180               	clrf	0	;clear RAM location pointed to by FSR
  2465  17A8  3101               	addfsr 0,1
  2466  17A9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2467  17AA  2FA7               	goto	clrloop0	;have we reached the end yet?
  2468  17AB  3400               	retlw	0	;all done for this memory range, return
  2469                           
  2470                           	psect	cstackBANK4
  2471  0220                     __pcstackBANK4:	
  2472  0220                     loop@vt:	
  2473                           
  2474                           ; 3 bytes @ 0x0
  2475  0220                     	ds	3
  2476  0223                     loop@ta:	
  2477                           
  2478                           ; 3 bytes @ 0x3
  2479  0223                     	ds	3
  2480  0226                     _loop$2114:	
  2481                           
  2482                           ; 3 bytes @ 0x6
  2483  0226                     	ds	3
  2484  0229                     _loop$2115:	
  2485                           
  2486                           ; 3 bytes @ 0x9
  2487  0229                     	ds	3
  2488  022C                     _loop$2116:	
  2489                           
  2490                           ; 3 bytes @ 0xC
  2491  022C                     	ds	3
  2492  022F                     loop@rfSetup:	
  2493                           
  2494                           ; 1 bytes @ 0xF
  2495  022F                     	ds	1
  2496  0230                     loop@packet:	
  2497                           
  2498                           ; 33 bytes @ 0x10
  2499  0230                     	ds	33
  2500                           
  2501                           	psect	cstackBANK1
  2502  00A0                     __pcstackBANK1:	
  2503  00A0                     ?_ftoa:	
  2504  00A0                     ftoa@f:	
  2505                           ; 1 bytes @ 0x0
  2506                           
  2507                           
  2508                           ; 3 bytes @ 0x0
  2509  00A0                     	ds	3
  2510  00A3                     ftoa@status:	
  2511                           
  2512                           ; 1 bytes @ 0x3
  2513  00A3                     	ds	1
  2514  00A4                     ftoa@rem:	
  2515                           
  2516                           ; 4 bytes @ 0x4
  2517  00A4                     	ds	4
  2518  00A8                     ftoa@l:	
  2519                           
  2520                           ; 4 bytes @ 0x8
  2521  00A8                     	ds	4
  2522  00AC                     ftoa@cp:	
  2523                           
  2524                           ; 1 bytes @ 0xC
  2525  00AC                     	ds	1
  2526  00AD                     ?_strcat:	
  2527  00AD                     strcat@to:	
  2528                           ; 2 bytes @ 0xD
  2529                           
  2530                           
  2531                           ; 2 bytes @ 0xD
  2532  00AD                     	ds	2
  2533  00AF                     strcat@from:	
  2534                           
  2535                           ; 2 bytes @ 0xF
  2536  00AF                     	ds	2
  2537  00B1                     ?_sendMessage:	
  2538  00B1                     sendMessage@packet:	
  2539                           ; 1 bytes @ 0x11
  2540                           
  2541                           
  2542                           ; 2 bytes @ 0x11
  2543  00B1                     	ds	2
  2544  00B3                     sendMessage@topic:	
  2545                           
  2546                           ; 2 bytes @ 0x13
  2547  00B3                     	ds	2
  2548  00B5                     sendMessage@value:	
  2549                           
  2550                           ; 3 bytes @ 0x15
  2551  00B5                     	ds	3
  2552  00B8                     sendMessage@ftoaStatus:	
  2553                           
  2554                           ; 2 bytes @ 0x18
  2555  00B8                     	ds	2
  2556  00BA                     ??_main:	
  2557                           
  2558                           ; 1 bytes @ 0x1A
  2559  00BA                     	ds	1
  2560  00BB                     main@pipe:	
  2561                           
  2562                           ; 1 bytes @ 0x1B
  2563  00BB                     	ds	1
  2564  00BC                     main@packet:	
  2565                           
  2566                           ; 33 bytes @ 0x1C
  2567  00BC                     	ds	33
  2568                           
  2569                           	psect	cstackCOMMON
  2570  0070                     __pcstackCOMMON:	
  2571  0070                     ?_isdigit:	
  2572  0070                     ?_nrf24l01ISR:	
  2573                           ; 1 bit 
  2574                           
  2575  0070                     ??_nrf24l01ISR:	
  2576                           ; 1 bytes @ 0x0
  2577                           
  2578  0070                     ?_EEPROMWrite:	
  2579                           ; 1 bytes @ 0x0
  2580                           
  2581  0070                     ?_nrf24l01Init:	
  2582                           ; 1 bytes @ 0x0
  2583                           
  2584  0070                     ?_nrf24l01SetTXPipe:	
  2585                           ; 1 bytes @ 0x0
  2586                           
  2587  0070                     ?_nrf24l01SetRXPipe:	
  2588                           ; 1 bytes @ 0x0
  2589                           
  2590  0070                     ??_nrf24l01SetRXPipe:	
  2591                           ; 1 bytes @ 0x0
  2592                           
  2593  0070                     ?_EEPROMRead:	
  2594                           ; 1 bytes @ 0x0
  2595                           
  2596  0070                     ??_isdigit:	
  2597                           ; 1 bytes @ 0x0
  2598                           
  2599  0070                     ??___ftpack:	
  2600                           ; 1 bytes @ 0x0
  2601                           
  2602  0070                     ?_nrf24l01InterfaceInit:	
  2603                           ; 1 bytes @ 0x0
  2604                           
  2605  0070                     ??_nrf24l01InterfaceInit:	
  2606                           ; 1 bytes @ 0x0
  2607                           
  2608  0070                     ?_sleepMs:	
  2609                           ; 1 bytes @ 0x0
  2610                           
  2611  0070                     ?_ISR:	
  2612                           ; 1 bytes @ 0x0
  2613                           
  2614  0070                     ?_loop:	
  2615                           ; 1 bytes @ 0x0
  2616                           
  2617  0070                     ?_nrf24l01GetPipe:	
  2618                           ; 1 bytes @ 0x0
  2619                           
  2620  0070                     ?_main:	
  2621                           ; 1 bytes @ 0x0
  2622                           
  2623  0070                     ?_nrf24l01InitRegisters:	
  2624                           ; 1 bytes @ 0x0
  2625                           
  2626  0070                     ?___bmul:	
  2627                           ; 1 bytes @ 0x0
  2628                           
  2629  0070                     ??___lldiv:	
  2630                           ; 1 bytes @ 0x0
  2631                           
  2632  0070                     ??___ftge:	
  2633                           ; 1 bytes @ 0x0
  2634                           
  2635  0070                     ??___llmod:	
  2636                           ; 1 bytes @ 0x0
  2637                           
  2638  0070                     ?_strcpy:	
  2639                           ; 1 bytes @ 0x0
  2640                           
  2641  0070                     ?___wmul:	
  2642                           ; 2 bytes @ 0x0
  2643                           
  2644  0070                     ?___lwmod:	
  2645                           ; 2 bytes @ 0x0
  2646                           
  2647  0070                     ?___awtoft:	
  2648                           ; 2 bytes @ 0x0
  2649                           
  2650  0070                     ?___lbtoft:	
  2651                           ; 3 bytes @ 0x0
  2652                           
  2653  0070                     ?___lltoft:	
  2654                           ; 3 bytes @ 0x0
  2655                           
  2656  0070                     ___bmul@multiplicand:	
  2657                           ; 3 bytes @ 0x0
  2658                           
  2659  0070                     ___llmod@counter:	
  2660                           ; 1 bytes @ 0x0
  2661                           
  2662  0070                     _isdigit$1873:	
  2663                           ; 1 bytes @ 0x0
  2664                           
  2665  0070                     sleepMs@milliseconds:	
  2666                           ; 1 bytes @ 0x0
  2667                           
  2668  0070                     EEPROMWrite@address:	
  2669                           ; 2 bytes @ 0x0
  2670                           
  2671  0070                     EEPROMRead@address:	
  2672                           ; 2 bytes @ 0x0
  2673                           
  2674  0070                     ___wmul@multiplier:	
  2675                           ; 2 bytes @ 0x0
  2676                           
  2677  0070                     ___awtoft@c:	
  2678                           ; 2 bytes @ 0x0
  2679                           
  2680  0070                     ___lwmod@divisor:	
  2681                           ; 2 bytes @ 0x0
  2682                           
  2683  0070                     strcpy@to:	
  2684                           ; 2 bytes @ 0x0
  2685                           
  2686  0070                     ___lltoft@c:	
  2687                           ; 2 bytes @ 0x0
  2688                           
  2689                           
  2690                           ; 4 bytes @ 0x0
  2691  0070                     	ds	1
  2692  0071                     ??___bmul:	
  2693  0071                     nrf24l01SetRXPipe@pipe:	
  2694                           ; 1 bytes @ 0x1
  2695                           
  2696  0071                     ___bmul@product:	
  2697                           ; 1 bytes @ 0x1
  2698                           
  2699  0071                     isdigit@c:	
  2700                           ; 1 bytes @ 0x1
  2701                           
  2702                           
  2703                           ; 1 bytes @ 0x1
  2704  0071                     	ds	1
  2705  0072                     ??_EEPROMRead:	
  2706  0072                     ??_sleepMs:	
  2707                           ; 1 bytes @ 0x2
  2708                           
  2709  0072                     nrf24l01SetRXPipe@enRXAddr:	
  2710                           ; 1 bytes @ 0x2
  2711                           
  2712  0072                     EEPROMWrite@data:	
  2713                           ; 1 bytes @ 0x2
  2714                           
  2715  0072                     ___bmul@multiplier:	
  2716                           ; 1 bytes @ 0x2
  2717                           
  2718  0072                     ___wmul@multiplicand:	
  2719                           ; 1 bytes @ 0x2
  2720                           
  2721  0072                     ___lwmod@dividend:	
  2722                           ; 2 bytes @ 0x2
  2723                           
  2724  0072                     strcpy@from:	
  2725                           ; 2 bytes @ 0x2
  2726                           
  2727                           
  2728                           ; 2 bytes @ 0x2
  2729  0072                     	ds	1
  2730  0073                     ??_EEPROMWrite:	
  2731  0073                     ??_nrf24l01SetTXPipe:	
  2732                           ; 1 bytes @ 0x3
  2733                           
  2734  0073                     ??___awtoft:	
  2735                           ; 1 bytes @ 0x3
  2736                           
  2737  0073                     sleepMs@wdtps:	
  2738                           ; 1 bytes @ 0x3
  2739                           
  2740  0073                     EEPROMWrite@GIEBitValue:	
  2741                           ; 1 bytes @ 0x3
  2742                           
  2743  0073                     ___awtoft@sign:	
  2744                           ; 1 bytes @ 0x3
  2745                           
  2746                           
  2747                           ; 1 bytes @ 0x3
  2748  0073                     	ds	1
  2749  0074                     ??_strcpy:	
  2750  0074                     ??_strcat:	
  2751                           ; 1 bytes @ 0x4
  2752                           
  2753  0074                     ??_ftoa:	
  2754                           ; 1 bytes @ 0x4
  2755                           
  2756  0074                     ??_nrf24l01SendPacket:	
  2757                           ; 1 bytes @ 0x4
  2758                           
  2759  0074                     ??_sleepListren:	
  2760                           ; 1 bytes @ 0x4
  2761                           
  2762  0074                     ??_sendMessage:	
  2763                           ; 1 bytes @ 0x4
  2764                           
  2765  0074                     ??_loop:	
  2766                           ; 1 bytes @ 0x4
  2767                           
  2768  0074                     ??___wmul:	
  2769                           ; 1 bytes @ 0x4
  2770                           
  2771  0074                     ??___ftmul:	
  2772                           ; 1 bytes @ 0x4
  2773                           
  2774  0074                     ??___ftneg:	
  2775                           ; 1 bytes @ 0x4
  2776                           
  2777  0074                     ??___ftsub:	
  2778                           ; 1 bytes @ 0x4
  2779                           
  2780  0074                     ??___fttol:	
  2781                           ; 1 bytes @ 0x4
  2782                           
  2783  0074                     ??___lbtoft:	
  2784                           ; 1 bytes @ 0x4
  2785                           
  2786  0074                     ??___lltoft:	
  2787                           ; 1 bytes @ 0x4
  2788                           
  2789  0074                     ??___lwmod:	
  2790                           ; 1 bytes @ 0x4
  2791                           
  2792                           
  2793                           	psect	cstackBANK0
  2794  0020                     __pcstackBANK0:	
  2795                           ; 1 bytes @ 0x4
  2796                           
  2797  0020                     ??_ISR:	
  2798                           
  2799                           ; 1 bytes @ 0x0
  2800  0020                     	ds	6
  2801  0026                     ?___ftge:	
  2802  0026                     ?_sleepListren:	
  2803                           ; 1 bit 
  2804                           
  2805  0026                     ?___ftpack:	
  2806                           ; 1 bytes @ 0x6
  2807                           
  2808  0026                     ?___lldiv:	
  2809                           ; 3 bytes @ 0x6
  2810                           
  2811  0026                     nrf24l01SetTXPipe@pipe:	
  2812                           ; 4 bytes @ 0x6
  2813                           
  2814  0026                     ___lwmod@counter:	
  2815                           ; 1 bytes @ 0x6
  2816                           
  2817  0026                     sleepListren@seconds:	
  2818                           ; 1 bytes @ 0x6
  2819                           
  2820  0026                     ___wmul@product:	
  2821                           ; 2 bytes @ 0x6
  2822                           
  2823  0026                     strcpy@cp:	
  2824                           ; 2 bytes @ 0x6
  2825                           
  2826  0026                     ___ftpack@arg:	
  2827                           ; 2 bytes @ 0x6
  2828                           
  2829  0026                     ___ftge@ff1:	
  2830                           ; 3 bytes @ 0x6
  2831                           
  2832  0026                     ___lldiv@divisor:	
  2833                           ; 3 bytes @ 0x6
  2834                           
  2835                           
  2836                           ; 4 bytes @ 0x6
  2837  0026                     	ds	1
  2838  0027                     ??_nrf24l01GetPipe:	
  2839  0027                     ??_nrf24l01InitRegisters:	
  2840                           ; 1 bytes @ 0x7
  2841                           
  2842                           
  2843                           ; 1 bytes @ 0x7
  2844  0027                     	ds	1
  2845  0028                     ?_nrf24l01SendPacket:	
  2846  0028                     nrf24l01GetPipe@pipe:	
  2847                           ; 1 bytes @ 0x8
  2848                           
  2849  0028                     nrf24l01InitRegisters@channel:	
  2850                           ; 1 bytes @ 0x8
  2851                           
  2852  0028                     nrf24l01SendPacket@txPacket:	
  2853                           ; 1 bytes @ 0x8
  2854                           
  2855                           
  2856                           ; 2 bytes @ 0x8
  2857  0028                     	ds	1
  2858  0029                     nrf24l01GetPipe@name:	
  2859  0029                     nrf24l01InitRegisters@setupAW:	
  2860                           ; 1 bytes @ 0x9
  2861                           
  2862  0029                     ___ftpack@exp:	
  2863                           ; 1 bytes @ 0x9
  2864                           
  2865  0029                     ___ftge@ff2:	
  2866                           ; 1 bytes @ 0x9
  2867                           
  2868                           
  2869                           ; 3 bytes @ 0x9
  2870  0029                     	ds	1
  2871  002A                     nrf24l01GetPipe@i:	
  2872  002A                     nrf24l01InitRegisters@feature:	
  2873                           ; 1 bytes @ 0xA
  2874                           
  2875  002A                     ___ftpack@sign:	
  2876                           ; 1 bytes @ 0xA
  2877                           
  2878  002A                     ___lldiv@dividend:	
  2879                           ; 1 bytes @ 0xA
  2880                           
  2881                           
  2882                           ; 4 bytes @ 0xA
  2883  002A                     	ds	1
  2884  002B                     ?___ftadd:	
  2885  002B                     nrf24l01InitRegisters@rfSetup:	
  2886                           ; 3 bytes @ 0xB
  2887                           
  2888  002B                     ___lbtoft@c:	
  2889                           ; 1 bytes @ 0xB
  2890                           
  2891  002B                     ___lltoft@exp:	
  2892                           ; 1 bytes @ 0xB
  2893                           
  2894  002B                     ___ftadd@f1:	
  2895                           ; 1 bytes @ 0xB
  2896                           
  2897                           
  2898                           ; 3 bytes @ 0xB
  2899  002B                     	ds	1
  2900  002C                     nrf24l01InitRegisters@enAA:	
  2901                           
  2902                           ; 1 bytes @ 0xC
  2903  002C                     	ds	1
  2904  002D                     nrf24l01InitRegisters@DynPD:	
  2905                           
  2906                           ; 1 bytes @ 0xD
  2907  002D                     	ds	1
  2908  002E                     nrf24l01InitRegisters@i:	
  2909  002E                     ___ftadd@f2:	
  2910                           ; 2 bytes @ 0xE
  2911                           
  2912  002E                     ___lldiv@quotient:	
  2913                           ; 3 bytes @ 0xE
  2914                           
  2915                           
  2916                           ; 4 bytes @ 0xE
  2917  002E                     	ds	2
  2918  0030                     ??_nrf24l01Init:	
  2919                           
  2920                           ; 1 bytes @ 0x10
  2921  0030                     	ds	1
  2922  0031                     ??___ftadd:	
  2923                           
  2924                           ; 1 bytes @ 0x11
  2925  0031                     	ds	1
  2926  0032                     ___lldiv@counter:	
  2927  0032                     ___ftadd@sign:	
  2928                           ; 1 bytes @ 0x12
  2929                           
  2930                           
  2931                           ; 1 bytes @ 0x12
  2932  0032                     	ds	1
  2933  0033                     ?___llmod:	
  2934  0033                     ___ftadd@exp2:	
  2935                           ; 4 bytes @ 0x13
  2936                           
  2937  0033                     ___llmod@divisor:	
  2938                           ; 1 bytes @ 0x13
  2939                           
  2940                           
  2941                           ; 4 bytes @ 0x13
  2942  0033                     	ds	1
  2943  0034                     ___ftadd@exp1:	
  2944                           
  2945                           ; 1 bytes @ 0x14
  2946  0034                     	ds	1
  2947  0035                     ?___ftdiv:	
  2948  0035                     ?___ftsub:	
  2949                           ; 3 bytes @ 0x15
  2950                           
  2951  0035                     ___ftdiv@f2:	
  2952                           ; 3 bytes @ 0x15
  2953                           
  2954  0035                     ___ftsub@f2:	
  2955                           ; 3 bytes @ 0x15
  2956                           
  2957                           
  2958                           ; 3 bytes @ 0x15
  2959  0035                     	ds	2
  2960  0037                     ___llmod@dividend:	
  2961                           
  2962                           ; 4 bytes @ 0x17
  2963  0037                     	ds	1
  2964  0038                     ___ftdiv@f1:	
  2965  0038                     ___ftsub@f1:	
  2966                           ; 3 bytes @ 0x18
  2967                           
  2968                           
  2969                           ; 3 bytes @ 0x18
  2970  0038                     	ds	3
  2971  003B                     ??___ftdiv:	
  2972  003B                     ?_sprintf:	
  2973                           ; 1 bytes @ 0x1B
  2974                           
  2975  003B                     sprintf@f:	
  2976                           ; 2 bytes @ 0x1B
  2977                           
  2978                           
  2979                           ; 2 bytes @ 0x1B
  2980  003B                     	ds	1
  2981  003C                     ___ftdiv@cntr:	
  2982                           
  2983                           ; 1 bytes @ 0x1C
  2984  003C                     	ds	1
  2985  003D                     ___ftdiv@f3:	
  2986                           
  2987                           ; 3 bytes @ 0x1D
  2988  003D                     	ds	3
  2989  0040                     ___ftdiv@exp:	
  2990                           
  2991                           ; 1 bytes @ 0x20
  2992  0040                     	ds	1
  2993  0041                     ___ftdiv@sign:	
  2994                           
  2995                           ; 1 bytes @ 0x21
  2996  0041                     	ds	1
  2997  0042                     ?_getADCValue:	
  2998                           
  2999                           ; 3 bytes @ 0x22
  3000  0042                     	ds	3
  3001  0045                     ??_sprintf:	
  3002  0045                     ??_getADCValue:	
  3003                           ; 1 bytes @ 0x25
  3004                           
  3005                           
  3006                           ; 1 bytes @ 0x25
  3007  0045                     	ds	1
  3008  0046                     getADCValue@channel:	
  3009                           
  3010                           ; 1 bytes @ 0x26
  3011  0046                     	ds	1
  3012  0047                     getADCValue@adcLoop:	
  3013                           
  3014                           ; 2 bytes @ 0x27
  3015  0047                     	ds	2
  3016  0049                     sprintf@flag:	
  3017  0049                     getADCValue@adcSum:	
  3018                           ; 1 bytes @ 0x29
  3019                           
  3020                           
  3021                           ; 3 bytes @ 0x29
  3022  0049                     	ds	1
  3023  004A                     sprintf@ap:	
  3024                           
  3025                           ; 1 bytes @ 0x2A
  3026  004A                     	ds	1
  3027  004B                     sprintf@val:	
  3028                           
  3029                           ; 4 bytes @ 0x2B
  3030  004B                     	ds	1
  3031  004C                     ?___ftmul:	
  3032  004C                     ?___ftneg:	
  3033                           ; 3 bytes @ 0x2C
  3034                           
  3035  004C                     ___ftmul@f1:	
  3036                           ; 3 bytes @ 0x2C
  3037                           
  3038  004C                     ___ftneg@f1:	
  3039                           ; 3 bytes @ 0x2C
  3040                           
  3041                           
  3042                           ; 3 bytes @ 0x2C
  3043  004C                     	ds	3
  3044  004F                     sprintf@sp:	
  3045  004F                     ___ftmul@f2:	
  3046                           ; 1 bytes @ 0x2F
  3047                           
  3048                           
  3049                           ; 3 bytes @ 0x2F
  3050  004F                     	ds	1
  3051  0050                     sprintf@width:	
  3052                           
  3053                           ; 2 bytes @ 0x30
  3054  0050                     	ds	2
  3055  0052                     ___ftmul@exp:	
  3056  0052                     sprintf@prec:	
  3057                           ; 1 bytes @ 0x32
  3058                           
  3059                           
  3060                           ; 2 bytes @ 0x32
  3061  0052                     	ds	1
  3062  0053                     ___ftmul@f3_as_product:	
  3063                           
  3064                           ; 3 bytes @ 0x33
  3065  0053                     	ds	1
  3066  0054                     sprintf@c:	
  3067                           
  3068                           ; 1 bytes @ 0x34
  3069  0054                     	ds	2
  3070  0056                     ___ftmul@cntr:	
  3071                           
  3072                           ; 1 bytes @ 0x36
  3073  0056                     	ds	1
  3074  0057                     ___ftmul@sign:	
  3075                           
  3076                           ; 1 bytes @ 0x37
  3077  0057                     	ds	1
  3078  0058                     ?___fttol:	
  3079  0058                     ___fttol@f1:	
  3080                           ; 4 bytes @ 0x38
  3081                           
  3082                           
  3083                           ; 3 bytes @ 0x38
  3084  0058                     	ds	4
  3085  005C                     ___fttol@sign1:	
  3086                           
  3087                           ; 1 bytes @ 0x3C
  3088  005C                     	ds	1
  3089  005D                     ___fttol@lval:	
  3090                           
  3091                           ; 4 bytes @ 0x3D
  3092  005D                     	ds	4
  3093  0061                     ___fttol@exp1:	
  3094                           
  3095                           ; 1 bytes @ 0x41
  3096  0061                     	ds	1
  3097  0062                     strcat@cp:	
  3098                           
  3099                           ; 2 bytes @ 0x42
  3100  0062                     	ds	2
  3101                           
  3102                           	psect	maintext
  3103  0650                     __pmaintext:	
  3104 ;;
  3105 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3106 ;;
  3107 ;; *************** function _main *****************
  3108 ;; Defined at:
  3109 ;;		line 156 in file "main.c"
  3110 ;; Parameters:    Size  Location     Type
  3111 ;;		None
  3112 ;; Auto vars:     Size  Location     Type
  3113 ;;  packet         33   28[BANK1 ] struct .
  3114 ;;  pipe            1   27[BANK1 ] unsigned char 
  3115 ;; Return value:  Size  Location     Type
  3116 ;;                  1    wreg      void 
  3117 ;; Registers used:
  3118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  3119 ;; Tracked objects:
  3120 ;;		On entry : B1F/0
  3121 ;;		On exit  : 0/0
  3122 ;;		Unchanged: 0/0
  3123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3125 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3126 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3127 ;;      Totals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  3128 ;;Total ram usage:       35 bytes
  3129 ;; Hardware stack levels required when called:   15
  3130 ;; This function calls:
  3131 ;;		_EEPROMRead
  3132 ;;		_EEPROMWrite
  3133 ;;		___lbtoft
  3134 ;;		_loop
  3135 ;;		_nrf24l01GetPipe
  3136 ;;		_nrf24l01Init
  3137 ;;		_nrf24l01SetRXPipe
  3138 ;;		_nrf24l01SetTXPipe
  3139 ;;		_sendMessage
  3140 ;;		_strcpy
  3141 ;; This function is called by:
  3142 ;;		Startup code after reset
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146                           
  3147                           ;psect for function _main
  3148  0650                     _main:	
  3149                           
  3150                           ;main.c: 159: ANSELA = 0x00;
  3151                           
  3152                           ;incstack = 0
  3153                           ; Regs used in _main: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  3154  0650  0023               	movlb	3	; select bank3
  3155  0651  018C               	clrf	12	;volatile
  3156                           
  3157                           ;main.c: 160: ANSELC = 0x00;
  3158  0652  018E               	clrf	14	;volatile
  3159                           
  3160                           ;main.c: 162: ODCONA = 0x00;
  3161  0653  0025               	movlb	5	; select bank5
  3162  0654  018C               	clrf	12	;volatile
  3163                           
  3164                           ;main.c: 163: ODCONC = 0x00;
  3165  0655  018E               	clrf	14	;volatile
  3166                           
  3167                           ;main.c: 168: INLVLA = 0x00;
  3168  0656  0027               	movlb	7	; select bank7
  3169  0657  018C               	clrf	12	;volatile
  3170                           
  3171                           ;main.c: 169: INLVLC = 0x00;
  3172  0658  018E               	clrf	14	;volatile
  3173                           
  3174                           ;main.c: 171: WPUA = 0x00;
  3175  0659  0024               	movlb	4	; select bank4
  3176  065A  018C               	clrf	12	;volatile
  3177                           
  3178                           ;main.c: 172: WPUC = 0x00;
  3179  065B  018E               	clrf	14	;volatile
  3180                           
  3181                           ;main.c: 174: TRISCbits.TRISC5 = 0;
  3182  065C  0021               	movlb	1	; select bank1
  3183  065D  128E               	bcf	14,5	;volatile
  3184                           
  3185                           ;main.c: 175: TRISCbits.TRISC4 = 0;
  3186  065E  120E               	bcf	14,4	;volatile
  3187                           
  3188                           ;main.c: 177: PORTCbits.RC4 = 0;
  3189  065F  0020               	movlb	0	; select bank0
  3190  0660  120E               	bcf	14,4	;volatile
  3191                           
  3192                           ;main.c: 184: INTCONbits.PEIE = 0;
  3193  0661  130B               	bcf	11,6	;volatile
  3194                           
  3195                           ;main.c: 185: INTCONbits.GIE = 0;
  3196  0662  138B               	bcf	11,7	;volatile
  3197                           
  3198                           ;main.c: 187: OSCCON1bits.NOSC = 0b000;
  3199  0663  308F               	movlw	-113
  3200  0664  0032               	movlb	18	; select bank18
  3201  0665  0599               	andwf	25,f	;volatile
  3202                           
  3203                           ;main.c: 188: OSCCON1bits.NDIV = 0b000;
  3204  0666  30F0               	movlw	-16
  3205  0667  0599               	andwf	25,f	;volatile
  3206                           
  3207                           ;main.c: 190: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3208  0668  300B               	movlw	11
  3209  0669  0021               	movlb	1	; select bank1
  3210  066A  00BA               	movwf	??_main^(0+128)
  3211  066B  3062               	movlw	98
  3212  066C                     u5267:	
  3213  066C  0B89               	decfsz	9,f
  3214  066D  2E6C               	goto	u5267
  3215  066E  0BBA               	decfsz	??_main^(0+128),f
  3216  066F  2E6C               	goto	u5267
  3217  0670  0000               	nop
  3218                           
  3219                           ;main.c: 194: strcpy(romData->name, "UWT");
  3220  0671  0021               	movlb	1	; select bank1
  3221  0672  0863               	movf	_romData^(0+128),w
  3222  0673  3E01               	addlw	1
  3223  0674  00F0               	movwf	strcpy@to
  3224  0675  3001               	movlw	1
  3225  0676  00F1               	movwf	strcpy@to+1
  3226  0677  303A               	movlw	low (STR_8| (0+32768))
  3227  0678  00F2               	movwf	strcpy@from
  3228  0679  3098               	movlw	high (STR_8| (0+32768))
  3229  067A  00F3               	movwf	strcpy@from+1
  3230  067B  3188  202A  3186   	fcall	_strcpy
  3231                           
  3232                           ;main.c: 196: nrf24l01Init();
  3233  067E  3189  215E  3186   	fcall	_nrf24l01Init
  3234                           
  3235                           ;main.c: 198: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3236  0681  0021               	movlb	1	; select bank1
  3237  0682  0863               	movf	_romData^(0+128),w
  3238  0683  3E01               	addlw	1
  3239  0684  318A  22BF  3186   	fcall	_nrf24l01GetPipe
  3240  0687  00FF               	movwf	127
  3241  0688  087F               	movf	127,w
  3242  0689  0021               	movlb	1	; select bank1
  3243  068A  00BB               	movwf	main@pipe^(0+128)
  3244                           
  3245                           ;main.c: 199: nrf24l01SetTXPipe(pipe);
  3246  068B  083B               	movf	main@pipe^(0+128),w
  3247  068C  318B  23B5  3186   	fcall	_nrf24l01SetTXPipe
  3248                           
  3249                           ;main.c: 200: nrf24l01SetRXPipe(pipe);
  3250  068F  0021               	movlb	1	; select bank1
  3251  0690  083B               	movf	main@pipe^(0+128),w
  3252  0691  3188  20A1  3186   	fcall	_nrf24l01SetRXPipe
  3253                           
  3254                           ;main.c: 204: ADCON0bits.ADON = 0;
  3255  0694  0021               	movlb	1	; select bank1
  3256  0695  101D               	bcf	29,0	;volatile
  3257                           
  3258                           ;main.c: 207: PORTAbits.RA4 = 0;
  3259  0696  0020               	movlb	0	; select bank0
  3260  0697  120C               	bcf	12,4	;volatile
  3261                           
  3262                           ;main.c: 208: TRISAbits.TRISA4 = 1;
  3263  0698  0021               	movlb	1	; select bank1
  3264  0699  160C               	bsf	12,4	;volatile
  3265                           
  3266                           ;main.c: 209: WPUAbits.WPUA4 = 0;
  3267  069A  0024               	movlb	4	; select bank4
  3268  069B  120C               	bcf	12,4	;volatile
  3269                           
  3270                           ;main.c: 210: ODCONAbits.ODCA4 = 1;
  3271  069C  0025               	movlb	5	; select bank5
  3272  069D  160C               	bsf	12,4	;volatile
  3273                           
  3274                           ;main.c: 211: ANSELAbits.ANSA4 = 1;
  3275  069E  0023               	movlb	3	; select bank3
  3276  069F  160C               	bsf	12,4	;volatile
  3277                           
  3278                           ;main.c: 214: ANSELCbits.ANSC3 = 1;
  3279  06A0  158E               	bsf	14,3	;volatile
  3280                           
  3281                           ;main.c: 215: TRISCbits.TRISC3 = 1;
  3282  06A1  0021               	movlb	1	; select bank1
  3283  06A2  158E               	bsf	14,3	;volatile
  3284                           
  3285                           ;main.c: 218: FVRCONbits.TSEN = 1;
  3286  06A3  0022               	movlb	2	; select bank2
  3287  06A4  1697               	bsf	23,5	;volatile
  3288                           
  3289                           ;main.c: 219: FVRCONbits.TSRNG = 1;
  3290  06A5  1617               	bsf	23,4	;volatile
  3291                           
  3292                           ;main.c: 222: FVRCONbits.FVREN = 0;
  3293  06A6  1397               	bcf	23,7	;volatile
  3294                           
  3295                           ;main.c: 223: FVRCONbits.ADFVR = 0b10;
  3296  06A7  0817               	movf	23,w	;volatile
  3297  06A8  39FC               	andlw	-4
  3298  06A9  3802               	iorlw	2
  3299  06AA  0097               	movwf	23	;volatile
  3300                           
  3301                           ;main.c: 225: ADCON1bits.ADCS = 0b111;
  3302  06AB  3070               	movlw	112
  3303  06AC  0021               	movlb	1	; select bank1
  3304  06AD  049E               	iorwf	30,f	;volatile
  3305                           
  3306                           ;main.c: 226: ADCON1bits.ADFM = 1;
  3307  06AE  179E               	bsf	30,7	;volatile
  3308                           
  3309                           ;main.c: 227: ADCON1bits.ADPREF = 0b11;
  3310  06AF  3003               	movlw	3
  3311  06B0  049E               	iorwf	30,f	;volatile
  3312                           
  3313                           ;main.c: 228: ADCON1bits.ADNREF = 0b00;
  3314  06B1  111E               	bcf	30,2	;volatile
  3315                           
  3316                           ;main.c: 229: PIE1bits.ADIE = 1;
  3317  06B2  1711               	bsf	17,6	;volatile
  3318                           
  3319                           ;main.c: 232: ADCON0bits.CHS = 3;
  3320  06B3  081D               	movf	29,w	;volatile
  3321  06B4  3903               	andlw	-253
  3322  06B5  380C               	iorlw	12
  3323  06B6  009D               	movwf	29	;volatile
  3324                           
  3325                           ;main.c: 237: TRISAbits.TRISA2 = 1;
  3326  06B7  150C               	bsf	12,2	;volatile
  3327                           
  3328                           ;main.c: 238: PIE0bits.INTE = 1;
  3329  06B8  1410               	bsf	16,0	;volatile
  3330                           
  3331                           ;main.c: 239: INTCONbits.INTEDG = 0;
  3332  06B9  100B               	bcf	11,0	;volatile
  3333                           
  3334                           ;main.c: 242: TRISAbits.TRISA5 = 0;
  3335  06BA  128C               	bcf	12,5	;volatile
  3336                           
  3337                           ;main.c: 243: PORTAbits.RA5 = 0;
  3338  06BB  0020               	movlb	0	; select bank0
  3339  06BC  128C               	bcf	12,5	;volatile
  3340                           
  3341                           ;main.c: 246: INTCONbits.PEIE = 1;
  3342  06BD  170B               	bsf	11,6	;volatile
  3343                           
  3344                           ;main.c: 247: INTCONbits.GIE = 1;
  3345  06BE  178B               	bsf	11,7	;volatile
  3346                           
  3347                           ;main.c: 249: nrf24l01Packet_t packet;;main.c: 251: sendMessage(&packet, "BOOT0", EEPROM
      +                          Read(0));
  3348  06BF  30BC               	movlw	low main@packet
  3349  06C0  0021               	movlb	1	; select bank1
  3350  06C1  00B1               	movwf	sendMessage@packet^(0+128)
  3351  06C2  3000               	movlw	high main@packet
  3352  06C3  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  3353  06C4  3013               	movlw	low (STR_9| (0+32768))
  3354  06C5  00B3               	movwf	sendMessage@topic^(0+128)
  3355  06C6  3098               	movlw	high (STR_9| (0+32768))
  3356  06C7  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  3357  06C8  3000               	movlw	0
  3358  06C9  00F0               	movwf	EEPROMRead@address
  3359  06CA  00F1               	movwf	EEPROMRead@address+1
  3360  06CB  3188  20DD  3186   	fcall	_EEPROMRead
  3361  06CE  3188  200F  3186   	fcall	___lbtoft
  3362  06D1  0870               	movf	?___lbtoft,w
  3363  06D2  0021               	movlb	1	; select bank1
  3364  06D3  00B5               	movwf	sendMessage@value^(0+128)
  3365  06D4  0871               	movf	?___lbtoft+1,w
  3366  06D5  00B6               	movwf	(sendMessage@value+1)^(0+128)
  3367  06D6  0872               	movf	?___lbtoft+2,w
  3368  06D7  00B7               	movwf	(sendMessage@value+2)^(0+128)
  3369  06D8  318C  24F7  3186   	fcall	_sendMessage
  3370                           
  3371                           ;main.c: 252: sendMessage(&packet, "BOOT1", EEPROMRead(1));
  3372  06DB  30BC               	movlw	low main@packet
  3373  06DC  0021               	movlb	1	; select bank1
  3374  06DD  00B1               	movwf	sendMessage@packet^(0+128)
  3375  06DE  3000               	movlw	high main@packet
  3376  06DF  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  3377  06E0  3019               	movlw	low (STR_10| (0+32768))
  3378  06E1  00B3               	movwf	sendMessage@topic^(0+128)
  3379  06E2  3098               	movlw	high (STR_10| (0+32768))
  3380  06E3  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  3381  06E4  3001               	movlw	1
  3382  06E5  00F0               	movwf	EEPROMRead@address
  3383  06E6  3000               	movlw	0
  3384  06E7  00F1               	movwf	EEPROMRead@address+1
  3385  06E8  3188  20DD  3186   	fcall	_EEPROMRead
  3386  06EB  3188  200F  3186   	fcall	___lbtoft
  3387  06EE  0870               	movf	?___lbtoft,w
  3388  06EF  0021               	movlb	1	; select bank1
  3389  06F0  00B5               	movwf	sendMessage@value^(0+128)
  3390  06F1  0871               	movf	?___lbtoft+1,w
  3391  06F2  00B6               	movwf	(sendMessage@value+1)^(0+128)
  3392  06F3  0872               	movf	?___lbtoft+2,w
  3393  06F4  00B7               	movwf	(sendMessage@value+2)^(0+128)
  3394  06F5  318C  24F7  3186   	fcall	_sendMessage
  3395                           
  3396                           ;main.c: 256: EEPROMWrite(0, 123);
  3397  06F8  3000               	movlw	0
  3398  06F9  00F0               	movwf	EEPROMWrite@address
  3399  06FA  00F1               	movwf	EEPROMWrite@address+1
  3400  06FB  307B               	movlw	123
  3401  06FC  00FF               	movwf	127
  3402  06FD  087F               	movf	127,w
  3403  06FE  00F2               	movwf	EEPROMWrite@data
  3404  06FF  3188  20FC  3186   	fcall	_EEPROMWrite
  3405                           
  3406                           ;main.c: 257: EEPROMWrite(1, 123);
  3407  0702  3001               	movlw	1
  3408  0703  00F0               	movwf	EEPROMWrite@address
  3409  0704  3000               	movlw	0
  3410  0705  00F1               	movwf	EEPROMWrite@address+1
  3411  0706  307B               	movlw	123
  3412  0707  00FF               	movwf	127
  3413  0708  087F               	movf	127,w
  3414  0709  00F2               	movwf	EEPROMWrite@data
  3415  070A  3188  20FC  3186   	fcall	_EEPROMWrite
  3416  070D                     l4862:	
  3417                           ;main.c: 259: while(1){
  3418                           
  3419                           
  3420                           ;main.c: 260: loop();
  3421  070D  3182  2225  3186   	fcall	_loop
  3422  0710  2F0D               	goto	l4862
  3423  0711                     __end_of_main:	
  3424                           ;main.c: 261: };main.c: 263: return;
  3425                           
  3426                           
  3427                           	psect	text1
  3428  095E                     __ptext1:	
  3429 ;; *************** function _nrf24l01Init *****************
  3430 ;; Defined at:
  3431 ;;		line 461 in file "nrf24l01.c"
  3432 ;; Parameters:    Size  Location     Type
  3433 ;;		None
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;		None
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  1    wreg      void 
  3438 ;; Registers used:
  3439 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3447 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3448 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3449 ;;Total ram usage:        2 bytes
  3450 ;; Hardware stack levels used:    1
  3451 ;; Hardware stack levels required when called:   11
  3452 ;; This function calls:
  3453 ;;		_nrf24l01InitRegisters
  3454 ;;		_nrf24l01InterfaceInit
  3455 ;; This function is called by:
  3456 ;;		_main
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           
  3461                           ;psect for function _nrf24l01Init
  3462  095E                     _nrf24l01Init:	
  3463                           
  3464                           ;nrf24l01.c: 464: nrf24l01InterfaceInit();
  3465                           
  3466                           ;incstack = 0
  3467                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+11+pclath+
      +                          cstack]
  3468  095E  3188  20BF  3189   	fcall	_nrf24l01InterfaceInit
  3469                           
  3470                           ;nrf24l01.c: 469: PORTAbits.RA0 = 0;
  3471  0961  0020               	movlb	0	; select bank0
  3472  0962  100C               	bcf	12,0	;volatile
  3473                           
  3474                           ;nrf24l01.c: 471: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3475  0963  3003               	movlw	3
  3476  0964  0020               	movlb	0	; select bank0
  3477  0965  00B1               	movwf	??_nrf24l01Init+1
  3478  0966  3008               	movlw	8
  3479  0967  00B0               	movwf	??_nrf24l01Init
  3480  0968  3077               	movlw	119
  3481  0969                     u5277:	
  3482  0969  0B89               	decfsz	9,f
  3483  096A  2969               	goto	u5277
  3484  096B  0BB0               	decfsz	??_nrf24l01Init,f
  3485  096C  2969               	goto	u5277
  3486  096D  0BB1               	decfsz	??_nrf24l01Init+1,f
  3487  096E  2969               	goto	u5277
  3488                           
  3489                           ;nrf24l01.c: 473: nrf24l01InitRegisters();
  3490  096F  3183  236C  3189   	fcall	_nrf24l01InitRegisters
  3491                           
  3492                           ;nrf24l01.c: 475: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3493  0972  3003               	movlw	3
  3494  0973  0020               	movlb	0	; select bank0
  3495  0974  00B1               	movwf	??_nrf24l01Init+1
  3496  0975  3008               	movlw	8
  3497  0976  00B0               	movwf	??_nrf24l01Init
  3498  0977  3077               	movlw	119
  3499  0978                     u5287:	
  3500  0978  0B89               	decfsz	9,f
  3501  0979  2978               	goto	u5287
  3502  097A  0BB0               	decfsz	??_nrf24l01Init,f
  3503  097B  2978               	goto	u5287
  3504  097C  0BB1               	decfsz	??_nrf24l01Init+1,f
  3505  097D  2978               	goto	u5287
  3506                           
  3507                           ;nrf24l01.c: 477: PORTAbits.RA0 = 1;
  3508  097E  0020               	movlb	0	; select bank0
  3509  097F  140C               	bsf	12,0	;volatile
  3510                           
  3511                           ;nrf24l01.c: 479: status.TX = 0;
  3512  0980  01E4               	clrf	_status	;volatile
  3513                           
  3514                           ;nrf24l01.c: 480: status.RX = 0;
  3515  0981  01E5               	clrf	_status+1	;volatile
  3516  0982  0008               	return
  3517  0983                     __end_of_nrf24l01Init:	
  3518                           
  3519                           	psect	text2
  3520  08BF                     __ptext2:	
  3521 ;; *************** function _nrf24l01InterfaceInit *****************
  3522 ;; Defined at:
  3523 ;;		line 8 in file "interface.c"
  3524 ;; Parameters:    Size  Location     Type
  3525 ;;		None
  3526 ;; Auto vars:     Size  Location     Type
  3527 ;;		None
  3528 ;; Return value:  Size  Location     Type
  3529 ;;                  1    wreg      void 
  3530 ;; Registers used:
  3531 ;;		wreg, status,2, status,0
  3532 ;; Tracked objects:
  3533 ;;		On entry : 0/0
  3534 ;;		On exit  : 0/0
  3535 ;;		Unchanged: 0/0
  3536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3541 ;;Total ram usage:        0 bytes
  3542 ;; Hardware stack levels used:    1
  3543 ;; Hardware stack levels required when called:    7
  3544 ;; This function calls:
  3545 ;;		Nothing
  3546 ;; This function is called by:
  3547 ;;		_nrf24l01Init
  3548 ;; This function uses a non-reentrant model
  3549 ;;
  3550                           
  3551                           
  3552                           ;psect for function _nrf24l01InterfaceInit
  3553  08BF                     _nrf24l01InterfaceInit:	
  3554                           
  3555                           ;interface.c: 10: TRISAbits.TRISA0 = 0;
  3556                           
  3557                           ;incstack = 0
  3558                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3559  08BF  0021               	movlb	1	; select bank1
  3560  08C0  100C               	bcf	12,0	;volatile
  3561                           
  3562                           ;interface.c: 11: TRISAbits.TRISA1 = 0;
  3563  08C1  108C               	bcf	12,1	;volatile
  3564                           
  3565                           ;interface.c: 13: TRISCbits.TRISC1 = 1;
  3566  08C2  148E               	bsf	14,1	;volatile
  3567                           
  3568                           ;interface.c: 14: TRISCbits.TRISC2 = 0;
  3569  08C3  110E               	bcf	14,2	;volatile
  3570                           
  3571                           ;interface.c: 15: TRISCbits.TRISC0 = 0;
  3572  08C4  100E               	bcf	14,0	;volatile
  3573                           
  3574                           ;interface.c: 17: SSP1CON1bits.SSPEN = 0;
  3575  08C5  0024               	movlb	4	; select bank4
  3576  08C6  1295               	bcf	21,5	;volatile
  3577                           
  3578                           ;interface.c: 19: RC1PPSbits.RC1PPS = 0b10001;
  3579  08C7  003D               	movlb	29	; select bank29
  3580  08C8  0821               	movf	33,w	;volatile
  3581  08C9  39E0               	andlw	-32
  3582  08CA  3811               	iorlw	17
  3583  08CB  00A1               	movwf	33	;volatile
  3584                           
  3585                           ;interface.c: 20: RC2PPSbits.RC2PPS = 0b11001;
  3586  08CC  0822               	movf	34,w	;volatile
  3587  08CD  39E0               	andlw	-32
  3588  08CE  3819               	iorlw	25
  3589  08CF  00A2               	movwf	34	;volatile
  3590                           
  3591                           ;interface.c: 21: RC0PPSbits.RC0PPS = 0b11000;
  3592  08D0  0820               	movf	32,w	;volatile
  3593  08D1  39E0               	andlw	-32
  3594  08D2  3818               	iorlw	24
  3595  08D3  00A0               	movwf	32	;volatile
  3596                           
  3597                           ;interface.c: 23: SSP1CON1bits.CKP = 0;
  3598  08D4  0024               	movlb	4	; select bank4
  3599  08D5  1215               	bcf	21,4	;volatile
  3600                           
  3601                           ;interface.c: 24: SSP1STATbits.CKE = 1;
  3602  08D6  1714               	bsf	20,6	;volatile
  3603                           
  3604                           ;interface.c: 25: SSP1CON1bits.SSPM = 0b0001;
  3605  08D7  0815               	movf	21,w	;volatile
  3606  08D8  39F0               	andlw	-16
  3607  08D9  3801               	iorlw	1
  3608  08DA  0095               	movwf	21	;volatile
  3609                           
  3610                           ;interface.c: 27: SSP1CON1bits.SSPEN = 1;
  3611  08DB  1695               	bsf	21,5	;volatile
  3612  08DC  0008               	return
  3613  08DD                     __end_of_nrf24l01InterfaceInit:	
  3614                           
  3615                           	psect	text3
  3616  036C                     __ptext3:	
  3617 ;; *************** function _nrf24l01InitRegisters *****************
  3618 ;; Defined at:
  3619 ;;		line 361 in file "nrf24l01.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;		None
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;  i               2   14[BANK0 ] unsigned int 
  3624 ;;  DynPD           1   13[BANK0 ] struct .
  3625 ;;  enAA            1   12[BANK0 ] struct .
  3626 ;;  rfSetup         1   11[BANK0 ] struct .
  3627 ;;  feature         1   10[BANK0 ] struct .
  3628 ;;  setupAW         1    9[BANK0 ] struct .
  3629 ;;  channel         1    8[BANK0 ] struct .
  3630 ;; Return value:  Size  Location     Type
  3631 ;;                  1    wreg      void 
  3632 ;; Registers used:
  3633 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  3634 ;; Tracked objects:
  3635 ;;		On entry : 0/0
  3636 ;;		On exit  : 0/0
  3637 ;;		Unchanged: 0/0
  3638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3640 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3641 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3642 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3643 ;;Total ram usage:        9 bytes
  3644 ;; Hardware stack levels used:    1
  3645 ;; Hardware stack levels required when called:   10
  3646 ;; This function calls:
  3647 ;;		___bmul
  3648 ;;		_nrf24l01SPIEnd
  3649 ;;		_nrf24l01SPISend
  3650 ;;		_nrf24l01SPIStart
  3651 ;;		_nrf24l01Send
  3652 ;;		_nrf24l01SetRXPipe
  3653 ;;		_nrf24l01SetTXPipe
  3654 ;; This function is called by:
  3655 ;;		_nrf24l01Init
  3656 ;; This function uses a non-reentrant model
  3657 ;;
  3658                           
  3659                           
  3660                           ;psect for function _nrf24l01InitRegisters
  3661  036C                     _nrf24l01InitRegisters:	
  3662                           
  3663                           ;nrf24l01.c: 363: status.configRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x00, 0);
  3664                           
  3665                           ;incstack = 0
  3666                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+1
      +                          1+pclath+cstack]
  3667  036C  3000               	movlw	0
  3668  036D  001E               	movwi fsr1++
  3669  036E  3000               	movlw	0
  3670  036F  3197  27ED  3183   	fcall	_nrf24l01Send
  3671  0372  00FF               	movwf	127
  3672  0373  087F               	movf	127,w
  3673  0374  0020               	movlb	0	; select bank0
  3674  0375  00E7               	movwf	_status+3	;volatile
  3675                           
  3676                           ;nrf24l01.c: 365: status.configRegister.PWR_UP = 0;
  3677  0376  10E7               	bcf	_status+3,1	;volatile
  3678                           
  3679                           ;nrf24l01.c: 366: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3680  0377  0867               	movf	_status+3,w	;volatile
  3681  0378  001E               	movwi fsr1++
  3682  0379  3020               	movlw	32
  3683  037A  3197  27ED  3183   	fcall	_nrf24l01Send
  3684                           
  3685                           ;nrf24l01.c: 368: n_SETUP_AW_t setupAW;;nrf24l01.c: 369: setupAW.byte = 0x00;
  3686  037D  0020               	movlb	0	; select bank0
  3687  037E  01A9               	clrf	nrf24l01InitRegisters@setupAW
  3688                           
  3689                           ;nrf24l01.c: 370: setupAW.AW = 0b11;
  3690  037F  3003               	movlw	3
  3691  0380  04A9               	iorwf	nrf24l01InitRegisters@setupAW,f
  3692                           
  3693                           ;nrf24l01.c: 371: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x03, setupAW.byte);
  3694  0381  0829               	movf	nrf24l01InitRegisters@setupAW,w
  3695  0382  001E               	movwi fsr1++
  3696  0383  3023               	movlw	35
  3697  0384  3197  27ED  3183   	fcall	_nrf24l01Send
  3698                           
  3699                           ;nrf24l01.c: 374: n_RF_CH_t channel;;nrf24l01.c: 375: channel.RF_CH = 2;
  3700  0387  0020               	movlb	0	; select bank0
  3701  0388  0828               	movf	nrf24l01InitRegisters@channel,w
  3702  0389  3980               	andlw	-128
  3703  038A  3802               	iorlw	2
  3704  038B  00A8               	movwf	nrf24l01InitRegisters@channel
  3705                           
  3706                           ;nrf24l01.c: 376: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3707  038C  0828               	movf	nrf24l01InitRegisters@channel,w
  3708  038D  001E               	movwi fsr1++
  3709  038E  3025               	movlw	37
  3710  038F  3197  27ED  3183   	fcall	_nrf24l01Send
  3711                           
  3712                           ;nrf24l01.c: 379: n_RF_SETUP_t rfSetup;;nrf24l01.c: 380: rfSetup.byte = 0x00;
  3713  0392  0020               	movlb	0	; select bank0
  3714  0393  01AB               	clrf	nrf24l01InitRegisters@rfSetup
  3715                           
  3716                           ;nrf24l01.c: 381: rfSetup.RF_DR_LOW = 0;
  3717  0394  12AB               	bcf	nrf24l01InitRegisters@rfSetup,5
  3718                           
  3719                           ;nrf24l01.c: 382: rfSetup.RF_DR_HIGH = 1;
  3720  0395  15AB               	bsf	nrf24l01InitRegisters@rfSetup,3
  3721                           
  3722                           ;nrf24l01.c: 383: rfSetup.RF_PWR = 3;
  3723  0396  3006               	movlw	6
  3724  0397  04AB               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3725                           
  3726                           ;nrf24l01.c: 384: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3727  0398  082B               	movf	nrf24l01InitRegisters@rfSetup,w
  3728  0399  001E               	movwi fsr1++
  3729  039A  3026               	movlw	38
  3730  039B  3197  27ED  3183   	fcall	_nrf24l01Send
  3731                           
  3732                           ;nrf24l01.c: 387: nrf24l01SetRXPipe(0xFF);
  3733  039E  30FF               	movlw	255
  3734  039F  3188  20A1  3183   	fcall	_nrf24l01SetRXPipe
  3735                           
  3736                           ;nrf24l01.c: 390: n_EN_AA_t enAA;;nrf24l01.c: 391: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3737  03A2  3000               	movlw	0
  3738  03A3  001E               	movwi fsr1++
  3739  03A4  3001               	movlw	1
  3740  03A5  3197  27ED  3183   	fcall	_nrf24l01Send
  3741  03A8  00FF               	movwf	127
  3742  03A9  087F               	movf	127,w
  3743  03AA  0020               	movlb	0	; select bank0
  3744  03AB  00AC               	movwf	nrf24l01InitRegisters@enAA
  3745                           
  3746                           ;nrf24l01.c: 392: enAA.ENAA_P0 = 0;
  3747  03AC  102C               	bcf	nrf24l01InitRegisters@enAA,0
  3748                           
  3749                           ;nrf24l01.c: 393: enAA.ENAA_P1 = 0;
  3750  03AD  10AC               	bcf	nrf24l01InitRegisters@enAA,1
  3751                           
  3752                           ;nrf24l01.c: 394: enAA.ENAA_P2 = 0;
  3753  03AE  112C               	bcf	nrf24l01InitRegisters@enAA,2
  3754                           
  3755                           ;nrf24l01.c: 395: enAA.ENAA_P3 = 0;
  3756  03AF  11AC               	bcf	nrf24l01InitRegisters@enAA,3
  3757                           
  3758                           ;nrf24l01.c: 396: enAA.ENAA_P4 = 0;
  3759  03B0  122C               	bcf	nrf24l01InitRegisters@enAA,4
  3760                           
  3761                           ;nrf24l01.c: 397: enAA.ENAA_P5 = 0;
  3762  03B1  12AC               	bcf	nrf24l01InitRegisters@enAA,5
  3763                           
  3764                           ;nrf24l01.c: 398: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3765  03B2  082C               	movf	nrf24l01InitRegisters@enAA,w
  3766  03B3  001E               	movwi fsr1++
  3767  03B4  3021               	movlw	33
  3768  03B5  3197  27ED  3183   	fcall	_nrf24l01Send
  3769                           
  3770                           ;nrf24l01.c: 402: n_FEATURE_t feature;;nrf24l01.c: 403: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3771  03B8  3000               	movlw	0
  3772  03B9  001E               	movwi fsr1++
  3773  03BA  301D               	movlw	29
  3774  03BB  3197  27ED  3183   	fcall	_nrf24l01Send
  3775  03BE  00FF               	movwf	127
  3776  03BF  087F               	movf	127,w
  3777  03C0  0020               	movlb	0	; select bank0
  3778  03C1  00AA               	movwf	nrf24l01InitRegisters@feature
  3779                           
  3780                           ;nrf24l01.c: 404: feature.EN_DPL = 1;
  3781  03C2  152A               	bsf	nrf24l01InitRegisters@feature,2
  3782                           
  3783                           ;nrf24l01.c: 405: feature.EN_DYN_ACK = 1;
  3784  03C3  142A               	bsf	nrf24l01InitRegisters@feature,0
  3785                           
  3786                           ;nrf24l01.c: 406: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3787  03C4  082A               	movf	nrf24l01InitRegisters@feature,w
  3788  03C5  001E               	movwi fsr1++
  3789  03C6  303D               	movlw	61
  3790  03C7  3197  27ED  3183   	fcall	_nrf24l01Send
  3791                           
  3792                           ;nrf24l01.c: 408: n_DYNPD_t DynPD;;nrf24l01.c: 409: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3793  03CA  3000               	movlw	0
  3794  03CB  001E               	movwi fsr1++
  3795  03CC  301C               	movlw	28
  3796  03CD  3197  27ED  3183   	fcall	_nrf24l01Send
  3797  03D0  00FF               	movwf	127
  3798  03D1  087F               	movf	127,w
  3799  03D2  0020               	movlb	0	; select bank0
  3800  03D3  00AD               	movwf	nrf24l01InitRegisters@DynPD
  3801                           
  3802                           ;nrf24l01.c: 410: DynPD.DPL_P0 = 1;
  3803  03D4  142D               	bsf	nrf24l01InitRegisters@DynPD,0
  3804                           
  3805                           ;nrf24l01.c: 411: DynPD.DPL_P1 = 1;
  3806  03D5  14AD               	bsf	nrf24l01InitRegisters@DynPD,1
  3807                           
  3808                           ;nrf24l01.c: 412: DynPD.DPL_P2 = 1;
  3809  03D6  152D               	bsf	nrf24l01InitRegisters@DynPD,2
  3810                           
  3811                           ;nrf24l01.c: 413: DynPD.DPL_P3 = 1;
  3812  03D7  15AD               	bsf	nrf24l01InitRegisters@DynPD,3
  3813                           
  3814                           ;nrf24l01.c: 414: DynPD.DPL_P4 = 1;
  3815  03D8  162D               	bsf	nrf24l01InitRegisters@DynPD,4
  3816                           
  3817                           ;nrf24l01.c: 415: DynPD.DPL_P5 = 1;
  3818  03D9  16AD               	bsf	nrf24l01InitRegisters@DynPD,5
  3819                           
  3820                           ;nrf24l01.c: 416: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3821  03DA  082D               	movf	nrf24l01InitRegisters@DynPD,w
  3822  03DB  001E               	movwi fsr1++
  3823  03DC  303C               	movlw	60
  3824  03DD  3197  27ED  3183   	fcall	_nrf24l01Send
  3825                           
  3826                           ;nrf24l01.c: 419: unsigned int i;;nrf24l01.c: 420: for (i = 0; i < 6; i++){
  3827  03E0  0020               	movlb	0	; select bank0
  3828  03E1  01AE               	clrf	nrf24l01InitRegisters@i
  3829  03E2  01AF               	clrf	nrf24l01InitRegisters@i+1
  3830  03E3  3000               	movlw	0
  3831  03E4  022F               	subwf	nrf24l01InitRegisters@i+1,w
  3832  03E5  3006               	movlw	6
  3833  03E6  1903               	skipnz
  3834  03E7  022E               	subwf	nrf24l01InitRegisters@i,w
  3835  03E8  1803               	btfsc	3,0
  3836  03E9  2C43               	goto	l4570
  3837  03EA                     l4554:	
  3838                           
  3839                           ;nrf24l01.c: 422: nrf24l01SPIStart();
  3840  03EA  3197  27C5  3183   	fcall	_nrf24l01SPIStart
  3841                           
  3842                           ;nrf24l01.c: 423: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  3843  03ED  0020               	movlb	0	; select bank0
  3844  03EE  082E               	movf	nrf24l01InitRegisters@i,w
  3845  03EF  3E0A               	addlw	10
  3846  03F0  3820               	iorlw	32
  3847  03F1  3188  2000  3183   	fcall	_nrf24l01SPISend
  3848                           
  3849                           ;nrf24l01.c: 425: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  3850  03F4  302F               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3851  03F5  0084               	movwf	4
  3852  03F6  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3853  03F7  0085               	movwf	5
  3854  03F8  0800               	movf	0,w	;code access
  3855  03F9  0020               	movlb	0	; select bank0
  3856  03FA  00A7               	movwf	??_nrf24l01InitRegisters
  3857  03FB  082E               	movf	nrf24l01InitRegisters@i,w
  3858  03FC  00FF               	movwf	127
  3859  03FD  087F               	movf	127,w
  3860  03FE  00F0               	movwf	___bmul@multiplicand
  3861  03FF  3000               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3862  0400  0084               	movwf	4
  3863  0401  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3864  0402  0085               	movwf	5
  3865  0403  0800               	movf	0,w	;code access
  3866  0404  3197  27DC  3183   	fcall	___bmul
  3867  0407  0020               	movlb	0	; select bank0
  3868  0408  0727               	addwf	??_nrf24l01InitRegisters,w
  3869  0409  3188  2000  3183   	fcall	_nrf24l01SPISend
  3870                           
  3871                           ;nrf24l01.c: 427: if (i < 2){
  3872  040C  3000               	movlw	0
  3873  040D  0020               	movlb	0	; select bank0
  3874  040E  022F               	subwf	nrf24l01InitRegisters@i+1,w
  3875  040F  3002               	movlw	2
  3876  0410  1903               	skipnz
  3877  0411  022E               	subwf	nrf24l01InitRegisters@i,w
  3878  0412  1803               	skipnc
  3879  0413  2C34               	goto	l4564
  3880                           
  3881                           ;nrf24l01.c: 428: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3882  0414  302E               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3883  0415  0084               	movwf	4
  3884  0416  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3885  0417  0085               	movwf	5
  3886  0418  0800               	movf	0,w	;code access
  3887  0419  3188  2000  3183   	fcall	_nrf24l01SPISend
  3888                           
  3889                           ;nrf24l01.c: 429: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3890  041C  302D               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3891  041D  0084               	movwf	4
  3892  041E  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3893  041F  0085               	movwf	5
  3894  0420  0800               	movf	0,w	;code access
  3895  0421  3188  2000  3183   	fcall	_nrf24l01SPISend
  3896                           
  3897                           ;nrf24l01.c: 430: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3898  0424  302C               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3899  0425  0084               	movwf	4
  3900  0426  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3901  0427  0085               	movwf	5
  3902  0428  0800               	movf	0,w	;code access
  3903  0429  3188  2000  3183   	fcall	_nrf24l01SPISend
  3904                           
  3905                           ;nrf24l01.c: 431: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3906  042C  302B               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3907  042D  0084               	movwf	4
  3908  042E  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3909  042F  0085               	movwf	5
  3910  0430  0800               	movf	0,w	;code access
  3911  0431  3188  2000  3183   	fcall	_nrf24l01SPISend
  3912  0434                     l4564:	
  3913                           
  3914                           ;nrf24l01.c: 432: };nrf24l01.c: 434: nrf24l01SPIEnd();
  3915  0434  3197  27BC  3183   	fcall	_nrf24l01SPIEnd
  3916  0437  3001               	movlw	1
  3917  0438  0020               	movlb	0	; select bank0
  3918  0439  07AE               	addwf	nrf24l01InitRegisters@i,f
  3919  043A  3000               	movlw	0
  3920  043B  3DAF               	addwfc	nrf24l01InitRegisters@i+1,f
  3921  043C  3000               	movlw	0
  3922  043D  022F               	subwf	nrf24l01InitRegisters@i+1,w
  3923  043E  3006               	movlw	6
  3924  043F  1903               	skipnz
  3925  0440  022E               	subwf	nrf24l01InitRegisters@i,w
  3926  0441  1C03               	skipc
  3927  0442  2BEA               	goto	l4554
  3928  0443                     l4570:	
  3929                           
  3930                           ;nrf24l01.c: 435: };nrf24l01.c: 437: nrf24l01SetTXPipe(0);
  3931  0443  3000               	movlw	0
  3932  0444  318B  23B5  3183   	fcall	_nrf24l01SetTXPipe
  3933                           
  3934                           ;nrf24l01.c: 441: status.statusRegister.byte = 0x00;
  3935  0447  0020               	movlb	0	; select bank0
  3936  0448  01E6               	clrf	_status+2	;volatile
  3937                           
  3938                           ;nrf24l01.c: 442: status.statusRegister.RX_DR = 1;
  3939  0449  1766               	bsf	_status+2,6	;volatile
  3940                           
  3941                           ;nrf24l01.c: 443: status.statusRegister.TX_DS = 1;
  3942  044A  16E6               	bsf	_status+2,5	;volatile
  3943                           
  3944                           ;nrf24l01.c: 444: status.statusRegister.MAX_RT = 1;
  3945  044B  1666               	bsf	_status+2,4	;volatile
  3946                           
  3947                           ;nrf24l01.c: 445: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.statusReg
      +                          ister.byte);
  3948  044C  0866               	movf	_status+2,w	;volatile
  3949  044D  001E               	movwi fsr1++
  3950  044E  3027               	movlw	39
  3951  044F  3197  27ED  3183   	fcall	_nrf24l01Send
  3952                           
  3953                           ;nrf24l01.c: 447: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  3954  0452  3000               	movlw	0
  3955  0453  001E               	movwi fsr1++
  3956  0454  3007               	movlw	7
  3957  0455  3197  27ED  3183   	fcall	_nrf24l01Send
  3958  0458  00FF               	movwf	127
  3959  0459  087F               	movf	127,w
  3960  045A  0020               	movlb	0	; select bank0
  3961  045B  00E6               	movwf	_status+2	;volatile
  3962                           
  3963                           ;nrf24l01.c: 450: nrf24l01Send((unsigned) 0b11100001, 0);
  3964  045C  3000               	movlw	0
  3965  045D  001E               	movwi fsr1++
  3966  045E  30E1               	movlw	225
  3967  045F  3197  27ED  3183   	fcall	_nrf24l01Send
  3968                           
  3969                           ;nrf24l01.c: 451: nrf24l01Send((unsigned) 0b11100010, 0);
  3970  0462  3000               	movlw	0
  3971  0463  001E               	movwi fsr1++
  3972  0464  30E2               	movlw	226
  3973  0465  3197  27ED  3183   	fcall	_nrf24l01Send
  3974                           
  3975                           ;nrf24l01.c: 454: status.configRegister.PRIM_RX = 0;
  3976  0468  0020               	movlb	0	; select bank0
  3977  0469  1067               	bcf	_status+3,0	;volatile
  3978                           
  3979                           ;nrf24l01.c: 455: status.configRegister.EN_CRC = 1;
  3980  046A  15E7               	bsf	_status+3,3	;volatile
  3981                           
  3982                           ;nrf24l01.c: 456: status.configRegister.CRCO = 1;
  3983  046B  1567               	bsf	_status+3,2	;volatile
  3984                           
  3985                           ;nrf24l01.c: 457: status.configRegister.PWR_UP = 1;
  3986  046C  14E7               	bsf	_status+3,1	;volatile
  3987                           
  3988                           ;nrf24l01.c: 458: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3989  046D  0867               	movf	_status+3,w	;volatile
  3990  046E  001E               	movwi fsr1++
  3991  046F  3020               	movlw	32
  3992  0470  3197  27ED         	fcall	_nrf24l01Send
  3993  0472  0008               	return
  3994  0473                     __end_of_nrf24l01InitRegisters:	
  3995                           
  3996                           	psect	text4
  3997  0BB5                     __ptext4:	
  3998 ;; *************** function _nrf24l01SetTXPipe *****************
  3999 ;; Defined at:
  4000 ;;		line 141 in file "nrf24l01.c"
  4001 ;; Parameters:    Size  Location     Type
  4002 ;;  pipe            1    wreg     unsigned char 
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;  pipe            1    6[BANK0 ] unsigned char 
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  1    wreg      void 
  4007 ;; Registers used:
  4008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4016 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4017 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4018 ;;Total ram usage:        2 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:    8
  4021 ;; This function calls:
  4022 ;;		___bmul
  4023 ;;		_nrf24l01SPIEnd
  4024 ;;		_nrf24l01SPISend
  4025 ;;		_nrf24l01SPIStart
  4026 ;; This function is called by:
  4027 ;;		_main
  4028 ;;		_nrf24l01InitRegisters
  4029 ;; This function uses a non-reentrant model
  4030 ;;
  4031                           
  4032                           
  4033                           ;psect for function _nrf24l01SetTXPipe
  4034  0BB5                     _nrf24l01SetTXPipe:	
  4035                           
  4036                           ;incstack = 0
  4037                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+11+pc
      +                          lath+cstack]
  4038                           ;nrf24l01SetTXPipe@pipe stored from wreg
  4039  0BB5  0020               	movlb	0	; select bank0
  4040  0BB6  00A6               	movwf	nrf24l01SetTXPipe@pipe
  4041                           
  4042                           ;nrf24l01.c: 144: nrf24l01SPIStart();
  4043  0BB7  3197  27C5  318B   	fcall	_nrf24l01SPIStart
  4044                           
  4045                           ;nrf24l01.c: 145: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  4046  0BBA  3030               	movlw	48
  4047  0BBB  3188  2000  318B   	fcall	_nrf24l01SPISend
  4048                           
  4049                           ;nrf24l01.c: 146: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  4050  0BBE  302F               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4051  0BBF  0084               	movwf	4
  4052  0BC0  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4053  0BC1  0085               	movwf	5
  4054  0BC2  0800               	movf	0,w	;code access
  4055  0BC3  00F3               	movwf	??_nrf24l01SetTXPipe
  4056  0BC4  3000               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4057  0BC5  0084               	movwf	4
  4058  0BC6  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4059  0BC7  0085               	movwf	5
  4060  0BC8  0800               	movf	0,w	;code access
  4061  0BC9  00FF               	movwf	127
  4062  0BCA  087F               	movf	127,w
  4063  0BCB  00F0               	movwf	___bmul@multiplicand
  4064  0BCC  0020               	movlb	0	; select bank0
  4065  0BCD  0826               	movf	nrf24l01SetTXPipe@pipe,w
  4066  0BCE  3197  27DC  318B   	fcall	___bmul
  4067  0BD1  0773               	addwf	??_nrf24l01SetTXPipe,w
  4068  0BD2  3188  2000  318B   	fcall	_nrf24l01SPISend
  4069                           
  4070                           ;nrf24l01.c: 147: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4071  0BD5  302E               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4072  0BD6  0084               	movwf	4
  4073  0BD7  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4074  0BD8  0085               	movwf	5
  4075  0BD9  0800               	movf	0,w	;code access
  4076  0BDA  3188  2000  318B   	fcall	_nrf24l01SPISend
  4077                           
  4078                           ;nrf24l01.c: 148: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4079  0BDD  302D               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4080  0BDE  0084               	movwf	4
  4081  0BDF  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4082  0BE0  0085               	movwf	5
  4083  0BE1  0800               	movf	0,w	;code access
  4084  0BE2  3188  2000  318B   	fcall	_nrf24l01SPISend
  4085                           
  4086                           ;nrf24l01.c: 149: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4087  0BE5  302C               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4088  0BE6  0084               	movwf	4
  4089  0BE7  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4090  0BE8  0085               	movwf	5
  4091  0BE9  0800               	movf	0,w	;code access
  4092  0BEA  3188  2000  318B   	fcall	_nrf24l01SPISend
  4093                           
  4094                           ;nrf24l01.c: 150: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4095  0BED  302B               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4096  0BEE  0084               	movwf	4
  4097  0BEF  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4098  0BF0  0085               	movwf	5
  4099  0BF1  0800               	movf	0,w	;code access
  4100  0BF2  3188  2000  318B   	fcall	_nrf24l01SPISend
  4101                           
  4102                           ;nrf24l01.c: 151: nrf24l01SPIEnd();
  4103  0BF5  3197  27BC         	fcall	_nrf24l01SPIEnd
  4104  0BF7  0008               	return
  4105  0BF8                     __end_of_nrf24l01SetTXPipe:	
  4106                           
  4107                           	psect	text5
  4108  17DC                     __ptext5:	
  4109 ;; *************** function ___bmul *****************
  4110 ;; Defined at:
  4111 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  4112 ;; Parameters:    Size  Location     Type
  4113 ;;  multiplier      1    wreg     unsigned char 
  4114 ;;  multiplicand    1    0[COMMON] unsigned char 
  4115 ;; Auto vars:     Size  Location     Type
  4116 ;;  multiplier      1    2[COMMON] unsigned char 
  4117 ;;  product         1    1[COMMON] unsigned char 
  4118 ;; Return value:  Size  Location     Type
  4119 ;;                  1    wreg      unsigned char 
  4120 ;; Registers used:
  4121 ;;		wreg, status,2, status,0, btemp+11
  4122 ;; Tracked objects:
  4123 ;;		On entry : 0/0
  4124 ;;		On exit  : 0/0
  4125 ;;		Unchanged: 0/0
  4126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4127 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4128 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4130 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4131 ;;Total ram usage:        3 bytes
  4132 ;; Hardware stack levels used:    1
  4133 ;; Hardware stack levels required when called:    7
  4134 ;; This function calls:
  4135 ;;		Nothing
  4136 ;; This function is called by:
  4137 ;;		_nrf24l01SetTXPipe
  4138 ;;		_nrf24l01InitRegisters
  4139 ;; This function uses a non-reentrant model
  4140 ;;
  4141                           
  4142                           
  4143                           ;psect for function ___bmul
  4144  17DC                     ___bmul:	
  4145                           
  4146                           ;incstack = 0
  4147                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+11]
  4148                           ;___bmul@multiplier stored from wreg
  4149  17DC  00F2               	movwf	___bmul@multiplier
  4150  17DD  01F1               	clrf	___bmul@product
  4151  17DE                     l3978:	
  4152  17DE  1C72               	btfss	___bmul@multiplier,0
  4153  17DF  2FE4               	goto	l3982
  4154  17E0  0870               	movf	___bmul@multiplicand,w
  4155  17E1  00FF               	movwf	127
  4156  17E2  087F               	movf	127,w
  4157  17E3  07F1               	addwf	___bmul@product,f
  4158  17E4                     l3982:	
  4159  17E4  1003               	clrc
  4160  17E5  0DF0               	rlf	___bmul@multiplicand,f
  4161  17E6  1003               	clrc
  4162  17E7  0CF2               	rrf	___bmul@multiplier,f
  4163  17E8  0872               	movf	___bmul@multiplier,w
  4164  17E9  1D03               	btfss	3,2
  4165  17EA  2FDE               	goto	l3978
  4166  17EB  0871               	movf	___bmul@product,w
  4167  17EC  0008               	return
  4168  17ED                     __end_of___bmul:	
  4169                           
  4170                           	psect	text6
  4171  08A1                     __ptext6:	
  4172 ;; *************** function _nrf24l01SetRXPipe *****************
  4173 ;; Defined at:
  4174 ;;		line 154 in file "nrf24l01.c"
  4175 ;; Parameters:    Size  Location     Type
  4176 ;;  pipe            1    wreg     unsigned char 
  4177 ;; Auto vars:     Size  Location     Type
  4178 ;;  pipe            1    1[COMMON] unsigned char 
  4179 ;;  enRXAddr        1    2[COMMON] struct .
  4180 ;; Return value:  Size  Location     Type
  4181 ;;                  1    wreg      void 
  4182 ;; Registers used:
  4183 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath
  4184 ;; Tracked objects:
  4185 ;;		On entry : 0/0
  4186 ;;		On exit  : 0/0
  4187 ;;		Unchanged: 0/0
  4188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4190 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4191 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4192 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4193 ;;Total ram usage:        3 bytes
  4194 ;; Hardware stack levels used:    1
  4195 ;; Hardware stack levels required when called:    9
  4196 ;; This function calls:
  4197 ;;		_nrf24l01Send
  4198 ;; This function is called by:
  4199 ;;		_main
  4200 ;;		_nrf24l01InitRegisters
  4201 ;; This function uses a non-reentrant model
  4202 ;;
  4203                           
  4204                           
  4205                           ;psect for function _nrf24l01SetRXPipe
  4206  08A1                     _nrf24l01SetRXPipe:	
  4207                           
  4208                           ;incstack = 0
  4209                           ; Regs used in _nrf24l01SetRXPipe: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+11+pclath]
  4210                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4211  08A1  00F1               	movwf	nrf24l01SetRXPipe@pipe
  4212                           
  4213                           ;nrf24l01.c: 156: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 158: if (pipe > 5){
  4214  08A2  3006               	movlw	6
  4215  08A3  0271               	subwf	nrf24l01SetRXPipe@pipe,w
  4216  08A4  1C03               	skipc
  4217  08A5  28AD               	goto	l277
  4218                           
  4219                           ;nrf24l01.c: 159: enRXAddr.ERX_P0 = 1;
  4220  08A6  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4221                           
  4222                           ;nrf24l01.c: 160: enRXAddr.ERX_P1 = 1;
  4223  08A7  14F2               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4224                           
  4225                           ;nrf24l01.c: 161: enRXAddr.ERX_P2 = 1;
  4226  08A8  1572               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4227                           
  4228                           ;nrf24l01.c: 162: enRXAddr.ERX_P3 = 1;
  4229  08A9  15F2               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4230                           
  4231                           ;nrf24l01.c: 163: enRXAddr.ERX_P4 = 1;
  4232  08AA  1672               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4233                           
  4234                           ;nrf24l01.c: 164: enRXAddr.ERX_P5 = 1;
  4235  08AB  16F2               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4236                           
  4237                           ;nrf24l01.c: 165: }
  4238  08AC  28B9               	goto	l4222
  4239  08AD                     l277:	
  4240                           
  4241                           ;nrf24l01.c: 167: else{;nrf24l01.c: 168: enRXAddr.ERX_P0 = 1;
  4242  08AD  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4243                           
  4244                           ;nrf24l01.c: 169: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4245  08AE  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4246  08AF  00F0               	movwf	??_nrf24l01SetRXPipe
  4247  08B0  0A71               	incf	nrf24l01SetRXPipe@pipe,w
  4248  08B1  28B3               	goto	u4764
  4249  08B2                     u4765:	
  4250  08B2  35F0               	lslf	??_nrf24l01SetRXPipe,f
  4251  08B3                     u4764:	
  4252  08B3  0B89               	decfsz	9,f
  4253  08B4  28B2               	goto	u4765
  4254  08B5  0870               	movf	??_nrf24l01SetRXPipe,w
  4255  08B6  00FF               	movwf	127
  4256  08B7  087F               	movf	127,w
  4257  08B8  00F2               	movwf	nrf24l01SetRXPipe@enRXAddr
  4258  08B9                     l4222:	
  4259                           
  4260                           ;nrf24l01.c: 170: };nrf24l01.c: 172: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4261  08B9  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4262  08BA  001E               	movwi fsr1++
  4263  08BB  3022               	movlw	34
  4264  08BC  3197  27ED         	fcall	_nrf24l01Send
  4265  08BE  0008               	return
  4266  08BF                     __end_of_nrf24l01SetRXPipe:	
  4267                           
  4268                           	psect	text7
  4269  0ABF                     __ptext7:	
  4270 ;; *************** function _nrf24l01GetPipe *****************
  4271 ;; Defined at:
  4272 ;;		line 144 in file "main.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;  name            1    wreg     PTR unsigned char 
  4275 ;;		 -> romDataMap(28), 
  4276 ;; Auto vars:     Size  Location     Type
  4277 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4278 ;;		 -> romDataMap(28), 
  4279 ;;  i               1   10[BANK0 ] unsigned char 
  4280 ;;  pipe            1    8[BANK0 ] unsigned char 
  4281 ;; Return value:  Size  Location     Type
  4282 ;;                  1    wreg      unsigned char 
  4283 ;; Registers used:
  4284 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+10, btemp+11, pclath, cstack
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4291 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4292 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4293 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4294 ;;Total ram usage:        4 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:    8
  4297 ;; This function calls:
  4298 ;;		___lwmod
  4299 ;;		_strlen
  4300 ;; This function is called by:
  4301 ;;		_main
  4302 ;; This function uses a non-reentrant model
  4303 ;;
  4304                           
  4305                           
  4306                           ;psect for function _nrf24l01GetPipe
  4307  0ABF                     _nrf24l01GetPipe:	
  4308                           
  4309                           ;incstack = 0
  4310                           ; Regs used in _nrf24l01GetPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+10+btemp
      +                          +11+pclath+cstack]
  4311                           ;nrf24l01GetPipe@name stored from wreg
  4312  0ABF  0020               	movlb	0	; select bank0
  4313  0AC0  00A9               	movwf	nrf24l01GetPipe@name
  4314                           
  4315                           ;main.c: 145: unsigned char pipe = 0;
  4316  0AC1  01A8               	clrf	nrf24l01GetPipe@pipe
  4317                           
  4318                           ;main.c: 146: unsigned char i = 0;
  4319  0AC2  01AA               	clrf	nrf24l01GetPipe@i
  4320                           
  4321                           ;main.c: 149: for (i = 0; i < strlen(name); i++){
  4322  0AC3  01AA               	clrf	nrf24l01GetPipe@i
  4323  0AC4                     l4688:	
  4324  0AC4  0829               	movf	nrf24l01GetPipe@name,w
  4325  0AC5  3188  2083  318A   	fcall	_strlen
  4326  0AC8  0020               	movlb	0	; select bank0
  4327  0AC9  082A               	movf	nrf24l01GetPipe@i,w
  4328  0ACA  00FE               	movwf	126
  4329  0ACB  01FF               	clrf	127
  4330  0ACC  0875               	movf	117,w
  4331  0ACD  027F               	subwf	127,w
  4332  0ACE  1D03               	skipz
  4333  0ACF  2AD2               	goto	u5195
  4334  0AD0  0874               	movf	116,w
  4335  0AD1  027E               	subwf	126,w
  4336  0AD2                     u5195:	
  4337  0AD2  1803               	btfsc	3,0
  4338  0AD3  2AE4               	goto	l4690
  4339                           
  4340                           ;main.c: 150: pipe+= name[i];
  4341  0AD4  082A               	movf	nrf24l01GetPipe@i,w
  4342  0AD5  0729               	addwf	nrf24l01GetPipe@name,w
  4343  0AD6  00A7               	movwf	??_nrf24l01GetPipe
  4344  0AD7  0827               	movf	??_nrf24l01GetPipe,w
  4345  0AD8  0084               	movwf	4
  4346  0AD9  3001               	movlw	1	; select bank2/3
  4347  0ADA  0085               	movwf	5
  4348  0ADB  0800               	movf	0,w
  4349  0ADC  00FF               	movwf	127
  4350  0ADD  087F               	movf	127,w
  4351  0ADE  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4352  0ADF  3001               	movlw	1
  4353  0AE0  00FF               	movwf	127
  4354  0AE1  087F               	movf	127,w
  4355  0AE2  07AA               	addwf	nrf24l01GetPipe@i,f
  4356  0AE3  2AC4               	goto	l4688
  4357  0AE4                     l4690:	
  4358                           
  4359                           ;main.c: 151: };main.c: 153: return (unsigned) pipe % 6;
  4360  0AE4  3006               	movlw	6
  4361  0AE5  00F0               	movwf	___lwmod@divisor
  4362  0AE6  3000               	movlw	0
  4363  0AE7  00F1               	movwf	___lwmod@divisor+1
  4364  0AE8  0828               	movf	nrf24l01GetPipe@pipe,w
  4365  0AE9  00FE               	movwf	126
  4366  0AEA  01FF               	clrf	127
  4367  0AEB  087E               	movf	126,w
  4368  0AEC  00F2               	movwf	___lwmod@dividend
  4369  0AED  087F               	movf	127,w
  4370  0AEE  00F3               	movwf	___lwmod@dividend+1
  4371  0AEF  318A  2202         	fcall	___lwmod
  4372  0AF1  0870               	movf	?___lwmod,w
  4373  0AF2  0008               	return
  4374  0AF3                     __end_of_nrf24l01GetPipe:	
  4375                           
  4376                           	psect	text8
  4377  0A02                     __ptext8:	
  4378 ;; *************** function ___lwmod *****************
  4379 ;; Defined at:
  4380 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;  divisor         2    0[COMMON] unsigned int 
  4383 ;;  dividend        2    2[COMMON] unsigned int 
  4384 ;; Auto vars:     Size  Location     Type
  4385 ;;  counter         1    6[BANK0 ] unsigned char 
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  2    0[COMMON] unsigned int 
  4388 ;; Registers used:
  4389 ;;		wreg, status,2, status,0, btemp+11
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4395 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4396 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4398 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4399 ;;Total ram usage:        5 bytes
  4400 ;; Hardware stack levels used:    1
  4401 ;; Hardware stack levels required when called:    7
  4402 ;; This function calls:
  4403 ;;		Nothing
  4404 ;; This function is called by:
  4405 ;;		_nrf24l01GetPipe
  4406 ;; This function uses a non-reentrant model
  4407 ;;
  4408                           
  4409                           
  4410                           ;psect for function ___lwmod
  4411  0A02                     ___lwmod:	
  4412                           
  4413                           ;incstack = 0
  4414                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+11]
  4415  0A02  0870               	movf	___lwmod@divisor,w
  4416  0A03  0471               	iorwf	___lwmod@divisor+1,w
  4417  0A04  1903               	btfsc	3,2
  4418  0A05  2A2A               	goto	l4620
  4419  0A06  0020               	movlb	0	; select bank0
  4420  0A07  01A6               	clrf	___lwmod@counter
  4421  0A08  0AA6               	incf	___lwmod@counter,f
  4422  0A09                     l4610:	
  4423  0A09  1BF1               	btfsc	___lwmod@divisor+1,7
  4424  0A0A  2A15               	goto	l4612
  4425  0A0B  3001               	movlw	1
  4426  0A0C                     u5095:	
  4427  0A0C  35F0               	lslf	___lwmod@divisor,f
  4428  0A0D  0DF1               	rlf	___lwmod@divisor+1,f
  4429  0A0E  0B89               	decfsz	9,f
  4430  0A0F  2A0C               	goto	u5095
  4431  0A10  3001               	movlw	1
  4432  0A11  00FF               	movwf	127
  4433  0A12  087F               	movf	127,w
  4434  0A13  07A6               	addwf	___lwmod@counter,f
  4435  0A14  2A09               	goto	l4610
  4436  0A15                     l4612:	
  4437  0A15  0871               	movf	___lwmod@divisor+1,w
  4438  0A16  0273               	subwf	___lwmod@dividend+1,w
  4439  0A17  1D03               	skipz
  4440  0A18  2A1B               	goto	u5115
  4441  0A19  0870               	movf	___lwmod@divisor,w
  4442  0A1A  0272               	subwf	___lwmod@dividend,w
  4443  0A1B                     u5115:	
  4444  0A1B  1C03               	skipc
  4445  0A1C  2A21               	goto	l4616
  4446  0A1D  0870               	movf	___lwmod@divisor,w
  4447  0A1E  02F2               	subwf	___lwmod@dividend,f
  4448  0A1F  0871               	movf	___lwmod@divisor+1,w
  4449  0A20  3BF3               	subwfb	___lwmod@dividend+1,f
  4450  0A21                     l4616:	
  4451  0A21  3001               	movlw	1
  4452  0A22                     u5125:	
  4453  0A22  36F1               	lsrf	___lwmod@divisor+1,f
  4454  0A23  0CF0               	rrf	___lwmod@divisor,f
  4455  0A24  0B89               	decfsz	9,f
  4456  0A25  2A22               	goto	u5125
  4457  0A26  3001               	movlw	1
  4458  0A27  02A6               	subwf	___lwmod@counter,f
  4459  0A28  1D03               	btfss	3,2
  4460  0A29  2A15               	goto	l4612
  4461  0A2A                     l4620:	
  4462  0A2A  0873               	movf	___lwmod@dividend+1,w
  4463  0A2B  00F1               	movwf	?___lwmod+1
  4464  0A2C  0872               	movf	___lwmod@dividend,w
  4465  0A2D  00F0               	movwf	?___lwmod
  4466  0A2E  0008               	return
  4467  0A2F                     __end_of___lwmod:	
  4468                           
  4469                           	psect	text9
  4470  0225                     __ptext9:	
  4471 ;; *************** function _loop *****************
  4472 ;; Defined at:
  4473 ;;		line 101 in file "main.c"
  4474 ;; Parameters:    Size  Location     Type
  4475 ;;		None
  4476 ;; Auto vars:     Size  Location     Type
  4477 ;;  packet         33   16[BANK4 ] struct .
  4478 ;;  ta              3    3[BANK4 ] float 
  4479 ;;  vt              3    0[BANK4 ] float 
  4480 ;;  rfSetup         1   15[BANK4 ] struct .
  4481 ;; Return value:  Size  Location     Type
  4482 ;;                  1    wreg      void 
  4483 ;; Registers used:
  4484 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  4485 ;; Tracked objects:
  4486 ;;		On entry : 0/0
  4487 ;;		On exit  : 0/0
  4488 ;;		Unchanged: 0/0
  4489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4491 ;;      Locals:         0       0       0       0       0      49       0       0       0       0       0       0       
      +0       0
  4492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4493 ;;      Totals:         0       0       0       0       0      49       0       0       0       0       0       0       
      +0       0
  4494 ;;Total ram usage:       49 bytes
  4495 ;; Hardware stack levels used:    1
  4496 ;; Hardware stack levels required when called:   14
  4497 ;; This function calls:
  4498 ;;		_EEPROMWrite
  4499 ;;		___ftadd
  4500 ;;		___ftdiv
  4501 ;;		___ftmul
  4502 ;;		___ftneg
  4503 ;;		___lbtoft
  4504 ;;		___lltoft
  4505 ;;		_getADCValue
  4506 ;;		_nrf24l01Send
  4507 ;;		_sendMessage
  4508 ;; This function is called by:
  4509 ;;		_main
  4510 ;; This function uses a non-reentrant model
  4511 ;;
  4512                           
  4513                           
  4514                           ;psect for function _loop
  4515  0225                     _loop:	
  4516                           
  4517                           ;main.c: 103: nrf24l01Packet_t packet;;main.c: 105: sendMessage(&packet, "COUNT", counte
      +                          r);
  4518                           
  4519                           ;incstack = 0
  4520                           ; Regs used in _loop: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  4521  0225  0021               	movlb	1	; select bank1
  4522  0226  0860               	movf	(_counter+3)^(0+128),w
  4523  0227  00F3               	movwf	___lltoft@c+3
  4524  0228  085F               	movf	(_counter+2)^(0+128),w
  4525  0229  00F2               	movwf	___lltoft@c+2
  4526  022A  085E               	movf	(_counter+1)^(0+128),w
  4527  022B  00F1               	movwf	___lltoft@c+1
  4528  022C  085D               	movf	_counter^(0+128),w
  4529  022D  00F0               	movwf	___lltoft@c
  4530  022E  3189  21AC  3182   	fcall	___lltoft
  4531  0231  0870               	movf	?___lltoft,w
  4532  0232  0024               	movlb	4	; select bank4
  4533  0233  00A6               	movwf	_loop$2114^(0+512)
  4534  0234  0871               	movf	?___lltoft+1,w
  4535  0235  00A7               	movwf	(_loop$2114+1)^(0+512)
  4536  0236  0872               	movf	?___lltoft+2,w
  4537  0237  00A8               	movwf	(_loop$2114+2)^(0+512)
  4538                           
  4539                           ;main.c: 103: nrf24l01Packet_t packet;;main.c: 105: sendMessage(&packet, "COUNT", counte
      +                          r);
  4540  0238  3030               	movlw	low loop@packet
  4541  0239  0021               	movlb	1	; select bank1
  4542  023A  00B1               	movwf	sendMessage@packet^(0+128)
  4543  023B  3002               	movlw	high loop@packet
  4544  023C  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  4545  023D  3025               	movlw	low (STR_3| (0+32768))
  4546  023E  00B3               	movwf	sendMessage@topic^(0+128)
  4547  023F  3098               	movlw	high (STR_3| (0+32768))
  4548  0240  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  4549  0241  0024               	movlb	4	; select bank4
  4550  0242  0826               	movf	_loop$2114^(0+512),w
  4551  0243  0021               	movlb	1	; select bank1
  4552  0244  00B5               	movwf	sendMessage@value^(0+128)
  4553  0245  0024               	movlb	4	; select bank4
  4554  0246  0827               	movf	(_loop$2114+1)^(0+512),w
  4555  0247  0021               	movlb	1	; select bank1
  4556  0248  00B6               	movwf	(sendMessage@value+1)^(0+128)
  4557  0249  0024               	movlb	4	; select bank4
  4558  024A  0828               	movf	(_loop$2114+2)^(0+512),w
  4559  024B  0021               	movlb	1	; select bank1
  4560  024C  00B7               	movwf	(sendMessage@value+2)^(0+128)
  4561  024D  318C  24F7  3182   	fcall	_sendMessage
  4562                           
  4563                           ;main.c: 111: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4564  0250  30CF               	movlw	207
  4565  0251  0020               	movlb	0	; select bank0
  4566  0252  00CC               	movwf	___ftmul@f1
  4567  0253  3046               	movlw	70
  4568  0254  00CD               	movwf	___ftmul@f1+1
  4569  0255  3040               	movlw	64
  4570  0256  00CE               	movwf	___ftmul@f1+2
  4571  0257  3004               	movlw	4
  4572  0258  318E  26AD  3182   	fcall	_getADCValue
  4573  025B  0020               	movlb	0	; select bank0
  4574  025C  0842               	movf	?_getADCValue,w
  4575  025D  00CF               	movwf	___ftmul@f2
  4576  025E  0843               	movf	?_getADCValue+1,w
  4577  025F  00D0               	movwf	___ftmul@f2+1
  4578  0260  0844               	movf	?_getADCValue+2,w
  4579  0261  00D1               	movwf	___ftmul@f2+2
  4580  0262  3187  2711  3182   	fcall	___ftmul
  4581  0265  0020               	movlb	0	; select bank0
  4582  0266  084C               	movf	?___ftmul,w
  4583  0267  0024               	movlb	4	; select bank4
  4584  0268  00A9               	movwf	_loop$2115^(0+512)
  4585  0269  0020               	movlb	0	; select bank0
  4586  026A  084D               	movf	?___ftmul+1,w
  4587  026B  0024               	movlb	4	; select bank4
  4588  026C  00AA               	movwf	(_loop$2115+1)^(0+512)
  4589  026D  0020               	movlb	0	; select bank0
  4590  026E  084E               	movf	?___ftmul+2,w
  4591  026F  0024               	movlb	4	; select bank4
  4592  0270  00AB               	movwf	(_loop$2115+2)^(0+512)
  4593                           
  4594                           ;main.c: 111: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4595  0271  3030               	movlw	low loop@packet
  4596  0272  0021               	movlb	1	; select bank1
  4597  0273  00B1               	movwf	sendMessage@packet^(0+128)
  4598  0274  3002               	movlw	high loop@packet
  4599  0275  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  4600  0276  3035               	movlw	low (STR_4| (0+32768))
  4601  0277  00B3               	movwf	sendMessage@topic^(0+128)
  4602  0278  3098               	movlw	high (STR_4| (0+32768))
  4603  0279  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  4604  027A  0024               	movlb	4	; select bank4
  4605  027B  0829               	movf	_loop$2115^(0+512),w
  4606  027C  0021               	movlb	1	; select bank1
  4607  027D  00B5               	movwf	sendMessage@value^(0+128)
  4608  027E  0024               	movlb	4	; select bank4
  4609  027F  082A               	movf	(_loop$2115+1)^(0+512),w
  4610  0280  0021               	movlb	1	; select bank1
  4611  0281  00B6               	movwf	(sendMessage@value+1)^(0+128)
  4612  0282  0024               	movlb	4	; select bank4
  4613  0283  082B               	movf	(_loop$2115+2)^(0+512),w
  4614  0284  0021               	movlb	1	; select bank1
  4615  0285  00B7               	movwf	(sendMessage@value+2)^(0+128)
  4616  0286  318C  24F7  3182   	fcall	_sendMessage
  4617                           
  4618                           ;main.c: 113: EEPROMWrite(0, (unsigned char) 22);
  4619  0289  3000               	movlw	0
  4620  028A  00F0               	movwf	EEPROMWrite@address
  4621  028B  00F1               	movwf	EEPROMWrite@address+1
  4622  028C  3016               	movlw	22
  4623  028D  00FF               	movwf	127
  4624  028E  087F               	movf	127,w
  4625  028F  00F2               	movwf	EEPROMWrite@data
  4626  0290  3188  20FC  3182   	fcall	_EEPROMWrite
  4627                           
  4628                           ;main.c: 115: sendMessage(&packet, "ANC3mV", getADCValue(0b010011));
  4629  0293  3030               	movlw	low loop@packet
  4630  0294  0021               	movlb	1	; select bank1
  4631  0295  00B1               	movwf	sendMessage@packet^(0+128)
  4632  0296  3002               	movlw	high loop@packet
  4633  0297  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  4634  0298  300C               	movlw	low (STR_5| (0+32768))
  4635  0299  00B3               	movwf	sendMessage@topic^(0+128)
  4636  029A  3098               	movlw	high (STR_5| (0+32768))
  4637  029B  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  4638  029C  3013               	movlw	19
  4639  029D  318E  26AD  3182   	fcall	_getADCValue
  4640  02A0  0020               	movlb	0	; select bank0
  4641  02A1  0842               	movf	?_getADCValue,w
  4642  02A2  0021               	movlb	1	; select bank1
  4643  02A3  00B5               	movwf	sendMessage@value^(0+128)
  4644  02A4  0020               	movlb	0	; select bank0
  4645  02A5  0843               	movf	?_getADCValue+1,w
  4646  02A6  0021               	movlb	1	; select bank1
  4647  02A7  00B6               	movwf	(sendMessage@value+1)^(0+128)
  4648  02A8  0020               	movlb	0	; select bank0
  4649  02A9  0844               	movf	?_getADCValue+2,w
  4650  02AA  0021               	movlb	1	; select bank1
  4651  02AB  00B7               	movwf	(sendMessage@value+2)^(0+128)
  4652  02AC  318C  24F7  3182   	fcall	_sendMessage
  4653                           
  4654                           ;main.c: 123: FVRCONbits.TSEN = 1;
  4655  02AF  0022               	movlb	2	; select bank2
  4656  02B0  1697               	bsf	23,5	;volatile
  4657                           
  4658                           ;main.c: 124: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4659  02B1  303D               	movlw	61
  4660  02B2  318E  26AD  3182   	fcall	_getADCValue
  4661  02B5  0020               	movlb	0	; select bank0
  4662  02B6  0842               	movf	?_getADCValue,w
  4663  02B7  00CC               	movwf	___ftneg@f1
  4664  02B8  0843               	movf	?_getADCValue+1,w
  4665  02B9  00CD               	movwf	___ftneg@f1+1
  4666  02BA  0844               	movf	?_getADCValue+2,w
  4667  02BB  00CE               	movwf	___ftneg@f1+2
  4668  02BC  3197  27B3  3182   	fcall	___ftneg
  4669  02BF  0020               	movlb	0	; select bank0
  4670  02C0  084C               	movf	?___ftneg,w
  4671  02C1  0024               	movlb	4	; select bank4
  4672  02C2  00AC               	movwf	_loop$2116^(0+512)
  4673  02C3  0020               	movlb	0	; select bank0
  4674  02C4  084D               	movf	?___ftneg+1,w
  4675  02C5  0024               	movlb	4	; select bank4
  4676  02C6  00AD               	movwf	(_loop$2116+1)^(0+512)
  4677  02C7  0020               	movlb	0	; select bank0
  4678  02C8  084E               	movf	?___ftneg+2,w
  4679  02C9  0024               	movlb	4	; select bank4
  4680  02CA  00AE               	movwf	(_loop$2116+2)^(0+512)
  4681                           
  4682                           ;main.c: 124: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4683  02CB  3000               	movlw	0
  4684  02CC  0020               	movlb	0	; select bank0
  4685  02CD  00B5               	movwf	___ftdiv@f2
  4686  02CE  3000               	movlw	0
  4687  02CF  00B6               	movwf	___ftdiv@f2+1
  4688  02D0  3040               	movlw	64
  4689  02D1  00B7               	movwf	___ftdiv@f2+2
  4690  02D2  3012               	movlw	18
  4691  02D3  00AB               	movwf	___ftadd@f1
  4692  02D4  3003               	movlw	3
  4693  02D5  00AC               	movwf	___ftadd@f1+1
  4694  02D6  3040               	movlw	64
  4695  02D7  00AD               	movwf	___ftadd@f1+2
  4696  02D8  0024               	movlb	4	; select bank4
  4697  02D9  082C               	movf	_loop$2116^(0+512),w
  4698  02DA  0020               	movlb	0	; select bank0
  4699  02DB  00AE               	movwf	___ftadd@f2
  4700  02DC  0024               	movlb	4	; select bank4
  4701  02DD  082D               	movf	(_loop$2116+1)^(0+512),w
  4702  02DE  0020               	movlb	0	; select bank0
  4703  02DF  00AF               	movwf	___ftadd@f2+1
  4704  02E0  0024               	movlb	4	; select bank4
  4705  02E1  082E               	movf	(_loop$2116+2)^(0+512),w
  4706  02E2  0020               	movlb	0	; select bank0
  4707  02E3  00B0               	movwf	___ftadd@f2+2
  4708  02E4  3184  2473  3182   	fcall	___ftadd
  4709  02E7  0020               	movlb	0	; select bank0
  4710  02E8  082B               	movf	?___ftadd,w
  4711  02E9  00B8               	movwf	___ftdiv@f1
  4712  02EA  082C               	movf	?___ftadd+1,w
  4713  02EB  00B9               	movwf	___ftdiv@f1+1
  4714  02EC  082D               	movf	?___ftadd+2,w
  4715  02ED  00BA               	movwf	___ftdiv@f1+2
  4716  02EE  318E  2604  3182   	fcall	___ftdiv
  4717  02F1  0020               	movlb	0	; select bank0
  4718  02F2  0835               	movf	?___ftdiv,w
  4719  02F3  0024               	movlb	4	; select bank4
  4720  02F4  00A0               	movwf	loop@vt^(0+512)
  4721  02F5  0020               	movlb	0	; select bank0
  4722  02F6  0836               	movf	?___ftdiv+1,w
  4723  02F7  0024               	movlb	4	; select bank4
  4724  02F8  00A1               	movwf	(loop@vt+1)^(0+512)
  4725  02F9  0020               	movlb	0	; select bank0
  4726  02FA  0837               	movf	?___ftdiv+2,w
  4727  02FB  0024               	movlb	4	; select bank4
  4728  02FC  00A2               	movwf	(loop@vt+2)^(0+512)
  4729                           
  4730                           ;main.c: 125: FVRCONbits.TSEN = 0;
  4731  02FD  0022               	movlb	2	; select bank2
  4732  02FE  1297               	bcf	23,5	;volatile
  4733                           
  4734                           ;main.c: 130: float ta = (vt / -0.00132) - (0.6063 / -0.00132) - 40;
  4735  02FF  30A9               	movlw	169
  4736  0300  0020               	movlb	0	; select bank0
  4737  0301  00AB               	movwf	___ftadd@f1
  4738  0302  30D1               	movlw	209
  4739  0303  00AC               	movwf	___ftadd@f1+1
  4740  0304  3043               	movlw	67
  4741  0305  00AD               	movwf	___ftadd@f1+2
  4742  0306  3004               	movlw	4
  4743  0307  00B5               	movwf	___ftdiv@f2
  4744  0308  30AD               	movlw	173
  4745  0309  00B6               	movwf	___ftdiv@f2+1
  4746  030A  30BA               	movlw	186
  4747  030B  00B7               	movwf	___ftdiv@f2+2
  4748  030C  0024               	movlb	4	; select bank4
  4749  030D  0820               	movf	loop@vt^(0+512),w
  4750  030E  0020               	movlb	0	; select bank0
  4751  030F  00B8               	movwf	___ftdiv@f1
  4752  0310  0024               	movlb	4	; select bank4
  4753  0311  0821               	movf	(loop@vt+1)^(0+512),w
  4754  0312  0020               	movlb	0	; select bank0
  4755  0313  00B9               	movwf	___ftdiv@f1+1
  4756  0314  0024               	movlb	4	; select bank4
  4757  0315  0822               	movf	(loop@vt+2)^(0+512),w
  4758  0316  0020               	movlb	0	; select bank0
  4759  0317  00BA               	movwf	___ftdiv@f1+2
  4760  0318  318E  2604  3182   	fcall	___ftdiv
  4761  031B  0020               	movlb	0	; select bank0
  4762  031C  0835               	movf	?___ftdiv,w
  4763  031D  00AE               	movwf	___ftadd@f2
  4764  031E  0836               	movf	?___ftdiv+1,w
  4765  031F  00AF               	movwf	___ftadd@f2+1
  4766  0320  0837               	movf	?___ftdiv+2,w
  4767  0321  00B0               	movwf	___ftadd@f2+2
  4768  0322  3184  2473  3182   	fcall	___ftadd
  4769  0325  0020               	movlb	0	; select bank0
  4770  0326  082B               	movf	?___ftadd,w
  4771  0327  0024               	movlb	4	; select bank4
  4772  0328  00A3               	movwf	loop@ta^(0+512)
  4773  0329  0020               	movlb	0	; select bank0
  4774  032A  082C               	movf	?___ftadd+1,w
  4775  032B  0024               	movlb	4	; select bank4
  4776  032C  00A4               	movwf	(loop@ta+1)^(0+512)
  4777  032D  0020               	movlb	0	; select bank0
  4778  032E  082D               	movf	?___ftadd+2,w
  4779  032F  0024               	movlb	4	; select bank4
  4780  0330  00A5               	movwf	(loop@ta+2)^(0+512)
  4781                           
  4782                           ;main.c: 132: sendMessage(&packet, "TEMP", ta);
  4783  0331  3030               	movlw	low loop@packet
  4784  0332  0021               	movlb	1	; select bank1
  4785  0333  00B1               	movwf	sendMessage@packet^(0+128)
  4786  0334  3002               	movlw	high loop@packet
  4787  0335  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  4788  0336  3030               	movlw	low (STR_6| (0+32768))
  4789  0337  00B3               	movwf	sendMessage@topic^(0+128)
  4790  0338  3098               	movlw	high (STR_6| (0+32768))
  4791  0339  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  4792  033A  0024               	movlb	4	; select bank4
  4793  033B  0823               	movf	loop@ta^(0+512),w
  4794  033C  0021               	movlb	1	; select bank1
  4795  033D  00B5               	movwf	sendMessage@value^(0+128)
  4796  033E  0024               	movlb	4	; select bank4
  4797  033F  0824               	movf	(loop@ta+1)^(0+512),w
  4798  0340  0021               	movlb	1	; select bank1
  4799  0341  00B6               	movwf	(sendMessage@value+1)^(0+128)
  4800  0342  0024               	movlb	4	; select bank4
  4801  0343  0825               	movf	(loop@ta+2)^(0+512),w
  4802  0344  0021               	movlb	1	; select bank1
  4803  0345  00B7               	movwf	(sendMessage@value+2)^(0+128)
  4804  0346  318C  24F7  3182   	fcall	_sendMessage
  4805                           
  4806                           ;main.c: 136: n_RF_SETUP_t rfSetup;;main.c: 137: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4807  0349  3000               	movlw	0
  4808  034A  001E               	movwi fsr1++
  4809  034B  3006               	movlw	6
  4810  034C  3197  27ED  3182   	fcall	_nrf24l01Send
  4811  034F  00FF               	movwf	127
  4812  0350  087F               	movf	127,w
  4813  0351  0024               	movlb	4	; select bank4
  4814  0352  00AF               	movwf	loop@rfSetup^(0+512)
  4815                           
  4816                           ;main.c: 139: sendMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4817  0353  3030               	movlw	low loop@packet
  4818  0354  0021               	movlb	1	; select bank1
  4819  0355  00B1               	movwf	sendMessage@packet^(0+128)
  4820  0356  3002               	movlw	high loop@packet
  4821  0357  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  4822  0358  301F               	movlw	low (STR_7| (0+32768))
  4823  0359  00B3               	movwf	sendMessage@topic^(0+128)
  4824  035A  3098               	movlw	high (STR_7| (0+32768))
  4825  035B  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  4826  035C  0024               	movlb	4	; select bank4
  4827  035D  0C2F               	rrf	loop@rfSetup^(0+512),w
  4828  035E  3903               	andlw	3
  4829  035F  3188  200F  3182   	fcall	___lbtoft
  4830  0362  0870               	movf	?___lbtoft,w
  4831  0363  0021               	movlb	1	; select bank1
  4832  0364  00B5               	movwf	sendMessage@value^(0+128)
  4833  0365  0871               	movf	?___lbtoft+1,w
  4834  0366  00B6               	movwf	(sendMessage@value+1)^(0+128)
  4835  0367  0872               	movf	?___lbtoft+2,w
  4836  0368  00B7               	movwf	(sendMessage@value+2)^(0+128)
  4837  0369  318C  24F7         	fcall	_sendMessage
  4838  036B  0008               	return
  4839  036C                     __end_of_loop:	
  4840                           
  4841                           	psect	text10
  4842  0CF7                     __ptext10:	
  4843 ;; *************** function _sendMessage *****************
  4844 ;; Defined at:
  4845 ;;		line 81 in file "main.c"
  4846 ;; Parameters:    Size  Location     Type
  4847 ;;  packet          2   17[BANK1 ] PTR struct .
  4848 ;;		 -> main@packet(33), loop@packet(33), 
  4849 ;;  topic           2   19[BANK1 ] PTR const unsigned char 
  4850 ;;		 -> STR_10(6), STR_9(6), STR_7(6), STR_6(5), 
  4851 ;;		 -> STR_5(7), STR_4(5), STR_3(6), 
  4852 ;;  value           3   21[BANK1 ] float 
  4853 ;; Auto vars:     Size  Location     Type
  4854 ;;  ftoaStatus      2   24[BANK1 ] int 
  4855 ;; Return value:  Size  Location     Type
  4856 ;;                  1    wreg      void 
  4857 ;; Registers used:
  4858 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  4859 ;; Tracked objects:
  4860 ;;		On entry : 0/0
  4861 ;;		On exit  : 0/0
  4862 ;;		Unchanged: 0/0
  4863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4864 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  4865 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4867 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  4868 ;;Total ram usage:        9 bytes
  4869 ;; Hardware stack levels used:    1
  4870 ;; Hardware stack levels required when called:   13
  4871 ;; This function calls:
  4872 ;;		_ftoa
  4873 ;;		_memset
  4874 ;;		_nrf24l01SendPacket
  4875 ;;		_sleepListren
  4876 ;;		_strcat
  4877 ;;		_strcpy
  4878 ;; This function is called by:
  4879 ;;		_loop
  4880 ;;		_main
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           
  4885                           ;psect for function _sendMessage
  4886  0CF7                     _sendMessage:	
  4887                           
  4888                           ;main.c: 83: int ftoaStatus;;main.c: 85: memset(packet->Message, 0, sizeof(packet->Messa
      +                          ge));
  4889                           
  4890                           ;incstack = 0
  4891                           ; Regs used in _sendMessage: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+p
      +                          clath+cstack]
  4892  0CF7  3020               	movlw	32
  4893  0CF8  001E               	movwi fsr1++
  4894  0CF9  3000               	movlw	0
  4895  0CFA  001E               	movwi fsr1++
  4896  0CFB  3000               	movlw	0
  4897  0CFC  001E               	movwi fsr1++
  4898  0CFD  001E               	movwi fsr1++
  4899  0CFE  0021               	movlb	1	; select bank1
  4900  0CFF  0831               	movf	sendMessage@packet^(0+128),w
  4901  0D00  3E01               	addlw	1
  4902  0D01  00FE               	movwf	126
  4903  0D02  3000               	movlw	0
  4904  0D03  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  4905  0D04  00FF               	movwf	127
  4906  0D05  087E               	movf	126,w
  4907  0D06  001E               	movwi fsr1++
  4908  0D07  087F               	movf	127,w
  4909  0D08  001E               	movwi fsr1++
  4910  0D09  318A  228D  318C   	fcall	_memset
  4911                           
  4912                           ;main.c: 86: strcpy(packet->Message, romData->name);
  4913  0D0C  0021               	movlb	1	; select bank1
  4914  0D0D  0831               	movf	sendMessage@packet^(0+128),w
  4915  0D0E  3E01               	addlw	1
  4916  0D0F  00F0               	movwf	strcpy@to
  4917  0D10  3000               	movlw	0
  4918  0D11  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  4919  0D12  00F1               	movwf	strcpy@to+1
  4920  0D13  0863               	movf	_romData^(0+128),w
  4921  0D14  3E01               	addlw	1
  4922  0D15  00F2               	movwf	strcpy@from
  4923  0D16  3001               	movlw	1
  4924  0D17  00F3               	movwf	strcpy@from+1
  4925  0D18  3188  202A  318C   	fcall	_strcpy
  4926                           
  4927                           ;main.c: 87: strcat(packet->Message, "/");
  4928  0D1B  0021               	movlb	1	; select bank1
  4929  0D1C  0831               	movf	sendMessage@packet^(0+128),w
  4930  0D1D  3E01               	addlw	1
  4931  0D1E  00AD               	movwf	strcat@to^(0+128)
  4932  0D1F  3000               	movlw	0
  4933  0D20  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  4934  0D21  00AE               	movwf	(strcat@to+1)^(0+128)
  4935  0D22  303E               	movlw	low (STR_1| (0+32768))
  4936  0D23  00AF               	movwf	strcat@from^(0+128)
  4937  0D24  3098               	movlw	high (STR_1| (0+32768))
  4938  0D25  00B0               	movwf	(strcat@from^(0+128)+1)
  4939  0D26  318A  225E  318C   	fcall	_strcat
  4940                           
  4941                           ;main.c: 88: strcat(packet->Message, topic);
  4942  0D29  0021               	movlb	1	; select bank1
  4943  0D2A  0831               	movf	sendMessage@packet^(0+128),w
  4944  0D2B  3E01               	addlw	1
  4945  0D2C  00AD               	movwf	strcat@to^(0+128)
  4946  0D2D  3000               	movlw	0
  4947  0D2E  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  4948  0D2F  00AE               	movwf	(strcat@to+1)^(0+128)
  4949  0D30  0834               	movf	(sendMessage@topic+1)^(0+128),w
  4950  0D31  00B0               	movwf	(strcat@from+1)^(0+128)
  4951  0D32  0833               	movf	sendMessage@topic^(0+128),w
  4952  0D33  00AF               	movwf	strcat@from^(0+128)
  4953  0D34  318A  225E  318C   	fcall	_strcat
  4954                           
  4955                           ;main.c: 89: strcat(packet->Message, "/");
  4956  0D37  0021               	movlb	1	; select bank1
  4957  0D38  0831               	movf	sendMessage@packet^(0+128),w
  4958  0D39  3E01               	addlw	1
  4959  0D3A  00AD               	movwf	strcat@to^(0+128)
  4960  0D3B  3000               	movlw	0
  4961  0D3C  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  4962  0D3D  00AE               	movwf	(strcat@to+1)^(0+128)
  4963  0D3E  303E               	movlw	low (STR_1| (0+32768))
  4964  0D3F  00AF               	movwf	strcat@from^(0+128)
  4965  0D40  3098               	movlw	high (STR_1| (0+32768))
  4966  0D41  00B0               	movwf	(strcat@from^(0+128)+1)
  4967  0D42  318A  225E  318C   	fcall	_strcat
  4968                           
  4969                           ;main.c: 90: strcat(packet->Message, ftoa(value, &ftoaStatus));
  4970  0D45  0021               	movlb	1	; select bank1
  4971  0D46  0831               	movf	sendMessage@packet^(0+128),w
  4972  0D47  3E01               	addlw	1
  4973  0D48  00AD               	movwf	strcat@to^(0+128)
  4974  0D49  3000               	movlw	0
  4975  0D4A  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  4976  0D4B  00AE               	movwf	(strcat@to+1)^(0+128)
  4977  0D4C  0835               	movf	sendMessage@value^(0+128),w
  4978  0D4D  00A0               	movwf	ftoa@f^(0+128)
  4979  0D4E  0836               	movf	(sendMessage@value+1)^(0+128),w
  4980  0D4F  00A1               	movwf	(ftoa@f+1)^(0+128)
  4981  0D50  0837               	movf	(sendMessage@value+2)^(0+128),w
  4982  0D51  00A2               	movwf	(ftoa@f+2)^(0+128)
  4983  0D52  30B8               	movlw	(low (sendMessage@ftoaStatus| 0))& (0+255)
  4984  0D53  00FF               	movwf	127
  4985  0D54  087F               	movf	127,w
  4986  0D55  00A3               	movwf	ftoa@status^(0+128)
  4987  0D56  3185  2569  318C   	fcall	_ftoa
  4988  0D59  0021               	movlb	1	; select bank1
  4989  0D5A  00AF               	movwf	strcat@from^(0+128)
  4990  0D5B  3001               	movlw	1
  4991  0D5C  00B0               	movwf	(strcat@from+1)^(0+128)
  4992  0D5D  318A  225E  318C   	fcall	_strcat
  4993                           
  4994                           ;main.c: 92: packet->packetData.byte = 0;
  4995  0D60  0021               	movlb	1	; select bank1
  4996  0D61  0831               	movf	sendMessage@packet^(0+128),w
  4997  0D62  0084               	movwf	4
  4998  0D63  0832               	movf	(sendMessage@packet+1)^(0+128),w
  4999  0D64  0085               	movwf	5
  5000  0D65  0180               	clrf	0
  5001                           
  5002                           ;main.c: 93: packet->packetData.ACKRequest = 0;
  5003  0D66  0831               	movf	sendMessage@packet^(0+128),w
  5004  0D67  0084               	movwf	4
  5005  0D68  0832               	movf	(sendMessage@packet+1)^(0+128),w
  5006  0D69  0085               	movwf	5
  5007  0D6A  1100               	bcf	0,2
  5008                           
  5009                           ;main.c: 95: nrf24l01SendPacket(packet);
  5010  0D6B  0832               	movf	(sendMessage@packet+1)^(0+128),w
  5011  0D6C  0020               	movlb	0	; select bank0
  5012  0D6D  00A9               	movwf	nrf24l01SendPacket@txPacket+1
  5013  0D6E  0021               	movlb	1	; select bank1
  5014  0D6F  0831               	movf	sendMessage@packet^(0+128),w
  5015  0D70  0020               	movlb	0	; select bank0
  5016  0D71  00A8               	movwf	nrf24l01SendPacket@txPacket
  5017  0D72  318A  222F  318C   	fcall	_nrf24l01SendPacket
  5018                           
  5019                           ;main.c: 97: sleepListren(1);
  5020  0D75  3001               	movlw	1
  5021  0D76  0020               	movlb	0	; select bank0
  5022  0D77  00A6               	movwf	sleepListren@seconds
  5023  0D78  3000               	movlw	0
  5024  0D79  00A7               	movwf	sleepListren@seconds+1
  5025  0D7A  3189  211B         	fcall	_sleepListren
  5026  0D7C  0008               	return
  5027  0D7D                     __end_of_sendMessage:	
  5028                           
  5029                           	psect	text11
  5030  0A5E                     __ptext11:	
  5031 ;; *************** function _strcat *****************
  5032 ;; Defined at:
  5033 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;  to              2   13[BANK1 ] PTR unsigned char 
  5036 ;;		 -> main@packet(33), loop@packet(33), 
  5037 ;;  from            2   15[BANK1 ] PTR const unsigned char 
  5038 ;;		 -> ftoa@buf(17), STR_10(6), STR_9(6), STR_7(6), 
  5039 ;;		 -> STR_6(5), STR_5(7), STR_4(5), STR_3(6), 
  5040 ;;		 -> STR_2(2), STR_1(2), 
  5041 ;; Auto vars:     Size  Location     Type
  5042 ;;  cp              2   66[BANK0 ] PTR unsigned char 
  5043 ;;		 -> main@packet(33), loop@packet(33), 
  5044 ;; Return value:  Size  Location     Type
  5045 ;;                  2   13[BANK1 ] PTR unsigned char 
  5046 ;; Registers used:
  5047 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5048 ;; Tracked objects:
  5049 ;;		On entry : 0/0
  5050 ;;		On exit  : 0/0
  5051 ;;		Unchanged: 0/0
  5052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5053 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5054 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5056 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5057 ;;Total ram usage:        6 bytes
  5058 ;; Hardware stack levels used:    1
  5059 ;; Hardware stack levels required when called:    7
  5060 ;; This function calls:
  5061 ;;		Nothing
  5062 ;; This function is called by:
  5063 ;;		_sendMessage
  5064 ;; This function uses a non-reentrant model
  5065 ;;
  5066                           
  5067                           
  5068                           ;psect for function _strcat
  5069  0A5E                     _strcat:	
  5070                           
  5071                           ;incstack = 0
  5072                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5073  0A5E  0021               	movlb	1	; select bank1
  5074  0A5F  082E               	movf	(strcat@to+1)^(0+128),w
  5075  0A60  0020               	movlb	0	; select bank0
  5076  0A61  00E3               	movwf	strcat@cp+1
  5077  0A62  0021               	movlb	1	; select bank1
  5078  0A63  082D               	movf	strcat@to^(0+128),w
  5079  0A64  0020               	movlb	0	; select bank0
  5080  0A65  00E2               	movwf	strcat@cp
  5081  0A66                     l4160:	
  5082  0A66  0862               	movf	strcat@cp,w
  5083  0A67  0084               	movwf	4
  5084  0A68  0863               	movf	strcat@cp+1,w
  5085  0A69  0085               	movwf	5
  5086  0A6A  0800               	movf	0,w
  5087  0A6B  1903               	btfsc	3,2
  5088  0A6C  2A7B               	goto	l4164
  5089  0A6D  3001               	movlw	1
  5090  0A6E  07E2               	addwf	strcat@cp,f
  5091  0A6F  3000               	movlw	0
  5092  0A70  3DE3               	addwfc	strcat@cp+1,f
  5093  0A71  2A66               	goto	l4160
  5094  0A72                     l4162:	
  5095  0A72  3001               	movlw	1
  5096  0A73  07E2               	addwf	strcat@cp,f
  5097  0A74  3000               	movlw	0
  5098  0A75  3DE3               	addwfc	strcat@cp+1,f
  5099  0A76  3001               	movlw	1
  5100  0A77  0021               	movlb	1	; select bank1
  5101  0A78  07AF               	addwf	strcat@from^(0+128),f
  5102  0A79  3000               	movlw	0
  5103  0A7A  3DB0               	addwfc	(strcat@from+1)^(0+128),f
  5104  0A7B                     l4164:	
  5105  0A7B  0021               	movlb	1	; select bank1
  5106  0A7C  082F               	movf	strcat@from^(0+128),w
  5107  0A7D  0084               	movwf	4
  5108  0A7E  0830               	movf	(strcat@from+1)^(0+128),w
  5109  0A7F  0085               	movwf	5
  5110  0A80  0800               	movf	0,w	;code access
  5111  0A81  00FF               	movwf	127
  5112  0A82  0020               	movlb	0	; select bank0
  5113  0A83  0862               	movf	strcat@cp,w
  5114  0A84  0084               	movwf	4
  5115  0A85  0863               	movf	strcat@cp+1,w
  5116  0A86  0085               	movwf	5
  5117  0A87  087F               	movf	127,w
  5118  0A88  0080               	movwf	0
  5119  0A89  0800               	movf	0,w
  5120  0A8A  1903               	btfsc	3,2
  5121  0A8B  0008               	return
  5122  0A8C  2A72               	goto	l4162
  5123  0A8D                     __end_of_strcat:	
  5124                           ;	Return value of _strcat is never used
  5125                           
  5126                           
  5127                           	psect	text12
  5128  091B                     __ptext12:	
  5129 ;; *************** function _sleepListren *****************
  5130 ;; Defined at:
  5131 ;;		line 68 in file "main.c"
  5132 ;; Parameters:    Size  Location     Type
  5133 ;;  seconds         2    6[BANK0 ] unsigned int 
  5134 ;; Auto vars:     Size  Location     Type
  5135 ;;		None
  5136 ;; Return value:  Size  Location     Type
  5137 ;;                  1    wreg      void 
  5138 ;; Registers used:
  5139 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+10, btemp+11, pclath, cstack
  5140 ;; Tracked objects:
  5141 ;;		On entry : 0/0
  5142 ;;		On exit  : 0/0
  5143 ;;		Unchanged: 0/0
  5144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5145 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5148 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5149 ;;Total ram usage:        2 bytes
  5150 ;; Hardware stack levels used:    1
  5151 ;; Hardware stack levels required when called:   10
  5152 ;; This function calls:
  5153 ;;		_nrf24l01SetRXMode
  5154 ;;		_sleepMs
  5155 ;; This function is called by:
  5156 ;;		_sendMessage
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           
  5161                           ;psect for function _sleepListren
  5162  091B                     _sleepListren:	
  5163  091B                     l4146:	
  5164                           ;main.c: 71: while(seconds--){
  5165                           
  5166                           ;incstack = 0
  5167                           ; Regs used in _sleepListren: [wreg+fsr1l+fsr1h+status,2-btemp+0+btemp+10+btemp+11+pclat
      +                          h+cstack]
  5168                           
  5169  091B  3001               	movlw	1
  5170  091C  0020               	movlb	0	; select bank0
  5171  091D  02A6               	subwf	sleepListren@seconds,f
  5172  091E  3000               	movlw	0
  5173  091F  3BA7               	subwfb	sleepListren@seconds+1,f
  5174  0920  0A26               	incf	sleepListren@seconds,w
  5175  0921  1903               	btfsc	3,2
  5176  0922  0A27               	incf	sleepListren@seconds+1,w
  5177  0923  1903               	btfsc	3,2
  5178  0924  0008               	return
  5179                           
  5180                           ;main.c: 73: nrf24l01SetRXMode(1);
  5181  0925  3001               	movlw	1
  5182  0926  3187  27C5  3189   	fcall	_nrf24l01SetRXMode
  5183                           
  5184                           ;main.c: 74: sleepMs(100);
  5185  0929  3064               	movlw	100
  5186  092A  00F0               	movwf	sleepMs@milliseconds
  5187  092B  3000               	movlw	0
  5188  092C  00F1               	movwf	sleepMs@milliseconds+1
  5189  092D  3189  21D6  3189   	fcall	_sleepMs
  5190                           
  5191                           ;main.c: 76: nrf24l01SetRXMode(0);
  5192  0930  3000               	movlw	0
  5193  0931  3187  27C5  3189   	fcall	_nrf24l01SetRXMode
  5194                           
  5195                           ;main.c: 77: sleepMs(900);
  5196  0934  3084               	movlw	132
  5197  0935  00F0               	movwf	sleepMs@milliseconds
  5198  0936  3003               	movlw	3
  5199  0937  00F1               	movwf	sleepMs@milliseconds+1
  5200  0938  3189  21D6  3189   	fcall	_sleepMs
  5201  093B  291B               	goto	l4146
  5202  093C                     __end_of_sleepListren:	
  5203                           
  5204                           	psect	text13
  5205  0A2F                     __ptext13:	
  5206 ;; *************** function _nrf24l01SendPacket *****************
  5207 ;; Defined at:
  5208 ;;		line 177 in file "nrf24l01.c"
  5209 ;; Parameters:    Size  Location     Type
  5210 ;;  txPacket        2    8[BANK0 ] PTR struct .
  5211 ;;		 -> main@packet(33), loop@packet(33), 
  5212 ;; Auto vars:     Size  Location     Type
  5213 ;;		None
  5214 ;; Return value:  Size  Location     Type
  5215 ;;                  1    wreg      void 
  5216 ;; Registers used:
  5217 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  5218 ;; Tracked objects:
  5219 ;;		On entry : 0/0
  5220 ;;		On exit  : 0/0
  5221 ;;		Unchanged: 0/0
  5222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5223 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5226 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5227 ;;Total ram usage:        2 bytes
  5228 ;; Hardware stack levels used:    1
  5229 ;; Hardware stack levels required when called:   12
  5230 ;; This function calls:
  5231 ;;		_nrf24l01Service
  5232 ;;		_sleepMs
  5233 ;;		_strcpy
  5234 ;; This function is called by:
  5235 ;;		_sendMessage
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           
  5240                           ;psect for function _nrf24l01SendPacket
  5241  0A2F                     _nrf24l01SendPacket:	
  5242                           
  5243                           ;nrf24l01.c: 179: strcpy(TXPacket.Message, txPacket->Message);
  5244                           
  5245                           ;incstack = 0
  5246                           ; Regs used in _nrf24l01SendPacket: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-bte
      +                          mp+11+pclath+cstack]
  5247  0A2F  30C2               	movlw	low (_TXPacket+1)
  5248  0A30  00F0               	movwf	strcpy@to
  5249  0A31  3001               	movlw	high (_TXPacket+1)
  5250  0A32  00F1               	movwf	strcpy@to+1
  5251  0A33  0020               	movlb	0	; select bank0
  5252  0A34  0828               	movf	nrf24l01SendPacket@txPacket,w
  5253  0A35  3E01               	addlw	1
  5254  0A36  00FE               	movwf	126
  5255  0A37  3000               	movlw	0
  5256  0A38  3D29               	addwfc	nrf24l01SendPacket@txPacket+1,w
  5257  0A39  00FF               	movwf	127
  5258  0A3A  087E               	movf	126,w
  5259  0A3B  00F2               	movwf	strcpy@from
  5260  0A3C  087F               	movf	127,w
  5261  0A3D  00F3               	movwf	strcpy@from+1
  5262  0A3E  3188  202A  318A   	fcall	_strcpy
  5263                           
  5264                           ;nrf24l01.c: 180: TXPacket.packetData = txPacket->packetData;
  5265  0A41  0020               	movlb	0	; select bank0
  5266  0A42  0828               	movf	nrf24l01SendPacket@txPacket,w
  5267  0A43  0084               	movwf	4
  5268  0A44  0829               	movf	nrf24l01SendPacket@txPacket+1,w
  5269  0A45  0085               	movwf	5
  5270  0A46  0800               	movf	0,w
  5271  0A47  00FF               	movwf	127
  5272  0A48  087F               	movf	127,w
  5273  0A49  0023               	movlb	3	; select bank3
  5274  0A4A  00C1               	movwf	_TXPacket^(0+384)
  5275                           
  5276                           ;nrf24l01.c: 182: status.TX = 1;
  5277  0A4B  3001               	movlw	1
  5278  0A4C  00FF               	movwf	127
  5279  0A4D  087F               	movf	127,w
  5280  0A4E  0020               	movlb	0	; select bank0
  5281  0A4F  00E4               	movwf	_status	;volatile
  5282  0A50                     l4198:	
  5283                           ;nrf24l01.c: 184: while (status.TX != 0){
  5284                           
  5285  0A50  0864               	movf	_status,w	;volatile
  5286  0A51  1903               	btfsc	3,2
  5287  0A52  0008               	return
  5288                           
  5289                           ;nrf24l01.c: 185: sleepMs(10);
  5290  0A53  300A               	movlw	10
  5291  0A54  00F0               	movwf	sleepMs@milliseconds
  5292  0A55  3000               	movlw	0
  5293  0A56  00F1               	movwf	sleepMs@milliseconds+1
  5294  0A57  3189  21D6  318A   	fcall	_sleepMs
  5295                           
  5296                           ;nrf24l01.c: 186: nrf24l01Service();
  5297  0A5A  318F  2756  318A   	fcall	_nrf24l01Service
  5298  0A5D  2A50               	goto	l4198
  5299  0A5E                     __end_of_nrf24l01SendPacket:	
  5300                           
  5301                           	psect	text14
  5302  082A                     __ptext14:	
  5303 ;; *************** function _strcpy *****************
  5304 ;; Defined at:
  5305 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  5306 ;; Parameters:    Size  Location     Type
  5307 ;;  to              2    0[COMMON] PTR unsigned char 
  5308 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5309 ;;  from            2    2[COMMON] PTR const unsigned char 
  5310 ;;		 -> romDataMap.name(16), packet.Message(32), packet.Message(32), main@packet(33), 
  5311 ;;		 -> STR_8(4), loop@packet(33), romDataMap(28), 
  5312 ;; Auto vars:     Size  Location     Type
  5313 ;;  cp              2    6[BANK0 ] PTR unsigned char 
  5314 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5315 ;; Return value:  Size  Location     Type
  5316 ;;                  2    0[COMMON] PTR unsigned char 
  5317 ;; Registers used:
  5318 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5319 ;; Tracked objects:
  5320 ;;		On entry : 0/0
  5321 ;;		On exit  : 0/0
  5322 ;;		Unchanged: 0/0
  5323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5324 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5325 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;Total ram usage:        6 bytes
  5329 ;; Hardware stack levels used:    1
  5330 ;; Hardware stack levels required when called:    7
  5331 ;; This function calls:
  5332 ;;		Nothing
  5333 ;; This function is called by:
  5334 ;;		_sendMessage
  5335 ;;		_main
  5336 ;;		_nrf24l01SendPacket
  5337 ;; This function uses a non-reentrant model
  5338 ;;
  5339                           
  5340                           
  5341                           ;psect for function _strcpy
  5342  082A                     _strcpy:	
  5343                           
  5344                           ;incstack = 0
  5345                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5346  082A  0871               	movf	strcpy@to+1,w
  5347  082B  0020               	movlb	0	; select bank0
  5348  082C  00A7               	movwf	strcpy@cp+1
  5349  082D  0870               	movf	strcpy@to,w
  5350  082E  00A6               	movwf	strcpy@cp
  5351  082F                     l3858:	
  5352  082F  0872               	movf	strcpy@from,w
  5353  0830  0084               	movwf	4
  5354  0831  0873               	movf	strcpy@from+1,w
  5355  0832  0085               	movwf	5
  5356  0833  0800               	movf	0,w	;code access
  5357  0834  00FF               	movwf	127
  5358  0835  0826               	movf	strcpy@cp,w
  5359  0836  0084               	movwf	4
  5360  0837  0827               	movf	strcpy@cp+1,w
  5361  0838  0085               	movwf	5
  5362  0839  087F               	movf	127,w
  5363  083A  0080               	movwf	0
  5364  083B  0800               	movf	0,w
  5365  083C  1903               	btfsc	3,2
  5366  083D  0008               	return
  5367  083E  3001               	movlw	1
  5368  083F  07A6               	addwf	strcpy@cp,f
  5369  0840  3000               	movlw	0
  5370  0841  3DA7               	addwfc	strcpy@cp+1,f
  5371  0842  3001               	movlw	1
  5372  0843  07F2               	addwf	strcpy@from,f
  5373  0844  3000               	movlw	0
  5374  0845  3DF3               	addwfc	strcpy@from+1,f
  5375  0846  282F               	goto	l3858
  5376  0847                     __end_of_strcpy:	
  5377                           ;	Return value of _strcpy is never used
  5378                           
  5379                           
  5380                           	psect	text15
  5381  0F56                     __ptext15:	
  5382 ;; *************** function _nrf24l01Service *****************
  5383 ;; Defined at:
  5384 ;;		line 268 in file "nrf24l01.c"
  5385 ;; Parameters:    Size  Location     Type
  5386 ;;		None
  5387 ;; Auto vars:     Size  Location     Type
  5388 ;;  width           1  [STACK] unsigned char 
  5389 ;;  i               1  [STACK] unsigned char 
  5390 ;; Return value:  Size  Location     Type
  5391 ;;                  1    wreg      void 
  5392 ;; Registers used:
  5393 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath
  5394 ;; Tracked objects:
  5395 ;;		On entry : 0/0
  5396 ;;		On exit  : 1F/0
  5397 ;;		Unchanged: 0/0
  5398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5403 ;;Total ram usage:        0 bytes
  5404 ;; Hardware stack levels used:    1
  5405 ;; Hardware stack levels required when called:   11
  5406 ;; This function calls:
  5407 ;;		_memset
  5408 ;;		_nrf24l01SPIEnd
  5409 ;;		_nrf24l01SPISend
  5410 ;;		_nrf24l01SPIStart
  5411 ;;		_nrf24l01Send
  5412 ;;		_nrf24l01SendTXBuffer
  5413 ;;		_nrf24l01SetRXMode
  5414 ;;		_strcmp
  5415 ;; This function is called by:
  5416 ;;		_nrf24l01SendPacket
  5417 ;;		_nrf24l01ISR
  5418 ;; This function uses a reentrant model
  5419 ;;
  5420                           
  5421                           
  5422                           ;psect for function _nrf24l01Service
  5423  0F56                     _nrf24l01Service:	
  5424                           
  5425                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5426  0F56  3142               	addfsr 1,2
  5427                           
  5428                           ;nrf24l01.c: 270: unsigned char i;;nrf24l01.c: 272: if (status.TX == 1){
  5429                           
  5430                           ;incstack = 0
  5431 ;; hardware stack exceeded
  5432                           ; Regs used in _nrf24l01Service: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+
      +                          9+btemp+11+pclath]
  5433  0F57  0020               	movlb	0	; select bank0
  5434  0F58  0364               	decf	_status,w	;volatile
  5435  0F59  1D03               	btfss	3,2
  5436  0F5A  2F61               	goto	l4414
  5437                           
  5438                           ;nrf24l01.c: 275: status.TX = 2;
  5439  0F5B  3002               	movlw	2
  5440  0F5C  00E4               	movwf	_status	;volatile
  5441                           
  5442                           ;nrf24l01.c: 276: nrf24l01SendTXBuffer(&TXPacket);
  5443  0F5D  30C1               	movlw	(low (_TXPacket| (0+256)))& (0+255)
  5444  0F5E  318B  23F8  318F   	fcall	_nrf24l01SendTXBuffer
  5445  0F61                     l4414:	
  5446                           
  5447                           ;nrf24l01.c: 277: };nrf24l01.c: 279: if (status.TX == 3){
  5448  0F61  3003               	movlw	3
  5449  0F62  0664               	xorwf	_status,w	;volatile
  5450  0F63  1D03               	btfss	3,2
  5451  0F64  2F6B               	goto	l4420
  5452                           
  5453                           ;nrf24l01.c: 280: if (!status.retryCount--){
  5454  0F65  03E8               	decf	_status+4,f	;volatile
  5455  0F66  0A68               	incf	_status+4,w	;volatile
  5456  0F67  1D03               	btfss	3,2
  5457  0F68  2F6B               	goto	l4420
  5458                           
  5459                           ;nrf24l01.c: 281: status.TX = 1;
  5460  0F69  3001               	movlw	1
  5461  0F6A  00E4               	movwf	_status	;volatile
  5462  0F6B                     l4420:	
  5463                           
  5464                           ;nrf24l01.c: 282: };nrf24l01.c: 283: };nrf24l01.c: 285: if (status.RX == 1){
  5465  0F6B  0365               	decf	_status+1,w	;volatile
  5466  0F6C  1D03               	btfss	3,2
  5467  0F6D  2FCF               	goto	l4456
  5468                           
  5469                           ;nrf24l01.c: 288: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  5470  0F6E  3020               	movlw	32
  5471  0F6F  001E               	movwi fsr1++
  5472  0F70  3000               	movlw	0
  5473  0F71  001E               	movwi fsr1++
  5474  0F72  3000               	movlw	0
  5475  0F73  001E               	movwi fsr1++
  5476  0F74  001E               	movwi fsr1++
  5477  0F75  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5478  0F76  001E               	movwi fsr1++
  5479  0F77  3001               	movlw	1
  5480  0F78  001E               	movwi fsr1++
  5481  0F79  318A  228D  318F   	fcall	_memset
  5482                           
  5483                           ;nrf24l01.c: 289: RXPacket.packetData.byte = 0x00;
  5484  0F7C  0023               	movlb	3	; select bank3
  5485  0F7D  01A0               	clrf	_RXPacket^(0+384)
  5486                           
  5487                           ;nrf24l01.c: 292: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  5488  0F7E  3000               	movlw	0
  5489  0F7F  001E               	movwi fsr1++
  5490  0F80  3060               	movlw	96
  5491  0F81  3197  27ED  318F   	fcall	_nrf24l01Send
  5492                           
  5493                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5494  0F84  3FFE               	movwi [-2]fsr1
  5495                           
  5496                           ;nrf24l01.c: 295: PORTAbits.RA0 = 0;
  5497  0F85  0020               	movlb	0	; select bank0
  5498  0F86  100C               	bcf	12,0	;volatile
  5499                           
  5500                           ;nrf24l01.c: 298: nrf24l01SPIStart();
  5501  0F87  3197  27C5  318F   	fcall	_nrf24l01SPIStart
  5502                           
  5503                           ;nrf24l01.c: 301: nrf24l01SPISend((unsigned) 0b01100001);
  5504  0F8A  3061               	movlw	97
  5505  0F8B  3188  2000  318F   	fcall	_nrf24l01SPISend
  5506                           
  5507                           ;nrf24l01.c: 304: RXPacket.packetData.byte = nrf24l01SPISend(0);
  5508  0F8E  3000               	movlw	0
  5509  0F8F  3188  2000  318F   	fcall	_nrf24l01SPISend
  5510  0F92  0023               	movlb	3	; select bank3
  5511  0F93  00A0               	movwf	_RXPacket^(0+384)
  5512                           
  5513                           ;nrf24l01.c: 305: width--;
  5514                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5515  0F94  3F7E               	moviw [-2]fsr1
  5516  0F95  00F4               	movwf	116
  5517  0F96  3001               	movlw	1
  5518  0F97  0274               	subwf	116,w
  5519  0F98  3FFE               	movwi [-2]fsr1
  5520                           
  5521                           ;nrf24l01.c: 307: for (i = 0; i < width; i++) {
  5522                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5523  0F99  3000               	movlw	0
  5524  0F9A  3FFF               	movwi [-1]fsr1
  5525  0F9B                     l4444:	
  5526                           
  5527                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5528  0F9B  3F7F               	moviw [-1]fsr1
  5529  0F9C  00FF               	movwf	127
  5530                           
  5531                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5532  0F9D  3F7E               	moviw [-2]fsr1
  5533  0F9E  027F               	subwf	127,w
  5534  0F9F  1803               	btfsc	3,0
  5535  0FA0  2FB0               	goto	l4446
  5536                           
  5537                           ;nrf24l01.c: 309: RXPacket.Message[i] = nrf24l01SPISend(0);
  5538                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5539  0FA1  3F7F               	moviw [-1]fsr1
  5540  0FA2  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5541  0FA3  0084               	movwf	4
  5542  0FA4  3001               	movlw	1	; select bank3/4
  5543  0FA5  3001               	movlw	1	; select bank3/4
  5544  0FA6  0085               	movwf	5
  5545  0FA7  3000               	movlw	0
  5546  0FA8  3188  2000  318F   	fcall	_nrf24l01SPISend
  5547  0FAB  0080               	movwf	0
  5548                           
  5549                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5550  0FAC  3F7F               	moviw [-1]fsr1
  5551  0FAD  3E01               	addlw	1
  5552  0FAE  3FFF               	movwi [-1]fsr1
  5553  0FAF  2F9B               	goto	l4444
  5554  0FB0                     l4446:	
  5555                           
  5556                           ;nrf24l01.c: 310: };nrf24l01.c: 313: nrf24l01SPIEnd();
  5557  0FB0  3197  27BC  318F   	fcall	_nrf24l01SPIEnd
  5558                           
  5559                           ;nrf24l01.c: 316: PORTAbits.RA0 = 1;
  5560  0FB3  0020               	movlb	0	; select bank0
  5561  0FB4  140C               	bsf	12,0	;volatile
  5562                           
  5563                           ;nrf24l01.c: 319: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
  5564  0FB5  0C66               	rrf	_status+2,w	;volatile
  5565  0FB6  3907               	andlw	7
  5566  0FB7  00FF               	movwf	127
  5567  0FB8  0EFF               	swapf	127,f
  5568  0FB9  0023               	movlb	3	; select bank3
  5569  0FBA  0820               	movf	_RXPacket^(0+384),w
  5570  0FBB  067F               	xorwf	127,w
  5571  0FBC  398F               	andlw	-113
  5572  0FBD  067F               	xorwf	127,w
  5573  0FBE  00A0               	movwf	_RXPacket^(0+384)
  5574                           
  5575                           ;nrf24l01.c: 322: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  5576  0FBF  3000               	movlw	0
  5577  0FC0  001E               	movwi fsr1++
  5578  0FC1  3009               	movlw	9
  5579  0FC2  3197  27ED  318F   	fcall	_nrf24l01Send
  5580  0FC5  00FF               	movwf	127
  5581  0FC6  0023               	movlb	3	; select bank3
  5582  0FC7  0820               	movf	_RXPacket^(0+384),w
  5583  0FC8  067F               	xorwf	127,w
  5584  0FC9  39FE               	andlw	-2
  5585  0FCA  067F               	xorwf	127,w
  5586  0FCB  00A0               	movwf	_RXPacket^(0+384)
  5587                           
  5588                           ;nrf24l01.c: 324: status.RX = 2;
  5589  0FCC  3002               	movlw	2
  5590  0FCD  0020               	movlb	0	; select bank0
  5591  0FCE  00E5               	movwf	_status+1	;volatile
  5592  0FCF                     l4456:	
  5593                           
  5594                           ;nrf24l01.c: 325: };nrf24l01.c: 327: if (status.RX == 2){
  5595  0FCF  3002               	movlw	2
  5596  0FD0  0665               	xorwf	_status+1,w	;volatile
  5597  0FD1  1D03               	btfss	3,2
  5598  0FD2  2FEC               	goto	l4468
  5599                           
  5600                           ;nrf24l01.c: 330: if (RXPacket.packetData.IsACK){
  5601  0FD3  0023               	movlb	3	; select bank3
  5602  0FD4  1DA0               	btfss	_RXPacket^(0+384),3
  5603  0FD5  2FEC               	goto	l4468
  5604                           
  5605                           ;nrf24l01.c: 332: if (status.TX == 3){
  5606  0FD6  3003               	movlw	3
  5607  0FD7  0020               	movlb	0	; select bank0
  5608  0FD8  0664               	xorwf	_status,w	;volatile
  5609  0FD9  1D03               	btfss	3,2
  5610  0FDA  2FEC               	goto	l4468
  5611                           
  5612                           ;nrf24l01.c: 334: if (strcmp(RXPacket.Message, TXPacket.Message) == 0){
  5613  0FDB  30C2               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  5614  0FDC  001E               	movwi fsr1++
  5615  0FDD  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5616  0FDE  3189  2183  318F   	fcall	_strcmp
  5617  0FE1  0874               	movf	116,w
  5618  0FE2  0475               	iorwf	117,w
  5619  0FE3  1D03               	btfss	3,2
  5620  0FE4  2FEC               	goto	l4468
  5621                           
  5622                           ;nrf24l01.c: 335: status.TX = 0;
  5623  0FE5  0020               	movlb	0	; select bank0
  5624  0FE6  01E4               	clrf	_status	;volatile
  5625                           
  5626                           ;nrf24l01.c: 336: status.RX = 0;
  5627  0FE7  01E5               	clrf	_status+1	;volatile
  5628                           
  5629                           ;nrf24l01.c: 338: nrf24l01SetRXMode(0);
  5630  0FE8  3000               	movlw	0
  5631  0FE9  3187  27C5  318F   	fcall	_nrf24l01SetRXMode
  5632  0FEC                     l4468:	
  5633                           
  5634                           ;nrf24l01.c: 340: };nrf24l01.c: 341: };nrf24l01.c: 342: };nrf24l01.c: 343: };nrf24l01.c:
      +                           345: if (status.RX == 2){
  5635  0FEC  3002               	movlw	2
  5636  0FED  0020               	movlb	0	; select bank0
  5637  0FEE  0665               	xorwf	_status+1,w	;volatile
  5638  0FEF  1D03               	btfss	3,2
  5639  0FF0  2FF9               	goto	l4476
  5640                           
  5641                           ;nrf24l01.c: 347: if (RXPacket.packetData.ACKRequest){
  5642  0FF1  0023               	movlb	3	; select bank3
  5643  0FF2  1D20               	btfss	_RXPacket^(0+384),2
  5644  0FF3  2FF9               	goto	l4476
  5645                           
  5646                           ;nrf24l01.c: 349: RXPacket.packetData.ACKRequest = 0;
  5647  0FF4  1120               	bcf	_RXPacket^(0+384),2
  5648                           
  5649                           ;nrf24l01.c: 350: RXPacket.packetData.IsACK = 1;
  5650  0FF5  15A0               	bsf	_RXPacket^(0+384),3
  5651                           
  5652                           ;nrf24l01.c: 352: nrf24l01SendTXBuffer(&RXPacket);
  5653  0FF6  30A0               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  5654  0FF7  318B  23F8         	fcall	_nrf24l01SendTXBuffer
  5655  0FF9                     l4476:	
  5656                           
  5657                           ;nrf24l01.c: 353: };nrf24l01.c: 354: };nrf24l01.c: 356: if (status.RX == 2){
  5658  0FF9  3002               	movlw	2
  5659  0FFA  0020               	movlb	0	; select bank0
  5660  0FFB  0665               	xorwf	_status+1,w	;volatile
  5661  0FFC  1903               	btfsc	3,2
  5662                           
  5663                           ;nrf24l01.c: 357: status.RX = 0;
  5664  0FFD  01E5               	clrf	_status+1	;volatile
  5665                           
  5666                           ; _nrf24l01Service: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  5667  0FFE  317E               	addfsr 1,-2
  5668  0FFF  0008               	return
  5669  1000                     __end_of_nrf24l01Service:	
  5670                           
  5671                           	psect	text16
  5672  0983                     __ptext16:	
  5673 ;; *************** function _strcmp *****************
  5674 ;; Defined at:
  5675 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  5676 ;; Parameters:    Size  Location     Type
  5677 ;;  s1              1    wreg     PTR const unsigned char 
  5678 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5679 ;;  s2              1  [STACK] PTR const unsigned char 
  5680 ;;		 -> TXPacket.Message(32), TXPacket(33), 
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;  s1              1  [STACK] PTR const unsigned char 
  5683 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5684 ;;  r               1  [STACK] char 
  5685 ;; Return value:  Size  Location     Type
  5686 ;;                  2  [STACK] int 
  5687 ;; Registers used:
  5688 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  5689 ;; Tracked objects:
  5690 ;;		On entry : 1F/0
  5691 ;;		On exit  : 0/0
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5698 ;;Total ram usage:        0 bytes
  5699 ;; Hardware stack levels used:    1
  5700 ;; Hardware stack levels required when called:    7
  5701 ;; This function calls:
  5702 ;;		Nothing
  5703 ;; This function is called by:
  5704 ;;		_nrf24l01Service
  5705 ;; This function uses a reentrant model
  5706 ;;
  5707                           
  5708                           
  5709                           ;psect for function _strcmp
  5710  0983                     _strcmp:	
  5711                           
  5712                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5713  0983  3142               	addfsr 1,2
  5714                           
  5715                           ;incstack = 0
  5716 ;; hardware stack exceeded
  5717                           ; Regs used in _strcmp: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  5718                           ;strcmp@s1 stored from wreg
  5719                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5720  0984  3FFE               	movwi [-2]fsr1
  5721  0985  2993               	goto	l4258
  5722  0986                     l4260:	
  5723                           
  5724                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5725  0986  3F7E               	moviw [-2]fsr1
  5726  0987  0084               	movwf	4
  5727  0988  3001               	movlw	1	; select bank2/3
  5728  0989  0085               	movwf	5
  5729  098A  0800               	movf	0,w
  5730  098B  1903               	btfsc	3,2
  5731  098C  29A5               	goto	l4262
  5732                           
  5733                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5734  098D  3F7E               	moviw [-2]fsr1
  5735  098E  3E01               	addlw	1
  5736  098F  3FFE               	movwi [-2]fsr1
  5737                           
  5738                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5739  0990  3F7D               	moviw [-3]fsr1
  5740  0991  3E01               	addlw	1
  5741  0992  3FFD               	movwi [-3]fsr1
  5742  0993                     l4258:	
  5743                           
  5744                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5745  0993  3F7D               	moviw [-3]fsr1
  5746  0994  0084               	movwf	4
  5747  0995  3001               	movlw	1	; select bank2/3
  5748  0996  0085               	movwf	5
  5749  0997  0800               	movf	0,w
  5750  0998  00FF               	movwf	127
  5751                           
  5752                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5753  0999  3F7E               	moviw [-2]fsr1
  5754  099A  0084               	movwf	4
  5755  099B  3001               	movlw	1	; select bank2/3
  5756  099C  0085               	movwf	5
  5757  099D  0800               	movf	0,w
  5758  099E  00F4               	movwf	116
  5759  099F  087F               	movf	127,w
  5760  09A0  0274               	subwf	116,w
  5761                           
  5762                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5763  09A1  3FFF               	movwi [-1]fsr1
  5764  09A2  0889               	movf	9,f
  5765  09A3  1903               	btfsc	3,2
  5766  09A4  2986               	goto	l4260
  5767  09A5                     l4262:	
  5768                           
  5769                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5770  09A5  3F7F               	moviw [-1]fsr1
  5771  09A6  00F4               	movwf	116
  5772  09A7  01F5               	clrf	117
  5773  09A8  1BF4               	btfsc	116,7
  5774  09A9  03F5               	decf	117,f
  5775                           
  5776                           ; _strcmp: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsiz
      +                          e = 1, vargsize = 0
  5777  09AA  317D               	addfsr 1,-3
  5778  09AB  0008               	return
  5779  09AC                     __end_of_strcmp:	
  5780                           
  5781                           	psect	text17
  5782  0BF8                     __ptext17:	
  5783 ;; *************** function _nrf24l01SendTXBuffer *****************
  5784 ;; Defined at:
  5785 ;;		line 232 in file "nrf24l01.c"
  5786 ;; Parameters:    Size  Location     Type
  5787 ;;  packet          1    wreg     PTR struct .
  5788 ;;		 -> TXPacket(33), RXPacket(33), 
  5789 ;; Auto vars:     Size  Location     Type
  5790 ;;  packet          1  [STACK] PTR struct .
  5791 ;;		 -> TXPacket(33), RXPacket(33), 
  5792 ;;  i               1  [STACK] unsigned char 
  5793 ;;  width           1  [STACK] unsigned char 
  5794 ;; Return value:  Size  Location     Type
  5795 ;;                  1    wreg      void 
  5796 ;; Registers used:
  5797 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11, pclath
  5798 ;; Tracked objects:
  5799 ;;		On entry : 1C/0
  5800 ;;		On exit  : 1F/0
  5801 ;;		Unchanged: 0/0
  5802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5807 ;;Total ram usage:        0 bytes
  5808 ;; Hardware stack levels used:    1
  5809 ;; Hardware stack levels required when called:   10
  5810 ;; This function calls:
  5811 ;;		_nrf24l01SPIEnd
  5812 ;;		_nrf24l01SPISend
  5813 ;;		_nrf24l01SPIStart
  5814 ;;		_nrf24l01SetRXMode
  5815 ;;		_strlen
  5816 ;; This function is called by:
  5817 ;;		_nrf24l01Service
  5818 ;; This function uses a reentrant model
  5819 ;;
  5820                           
  5821                           
  5822                           ;psect for function _nrf24l01SendTXBuffer
  5823  0BF8                     _nrf24l01SendTXBuffer:	
  5824                           
  5825                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5826  0BF8  3143               	addfsr 1,3
  5827                           
  5828                           ;incstack = 0
  5829 ;; hardware stack exceeded
  5830                           ; Regs used in _nrf24l01SendTXBuffer: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11+
      +                          pclath]
  5831                           ;nrf24l01SendTXBuffer@packet stored from wreg
  5832                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  5833  0BF9  3FFD               	movwi [-3]fsr1
  5834                           
  5835                           ;nrf24l01.c: 234: lastTXPacket = packet;
  5836                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  5837  0BFA  3F7D               	moviw [-3]fsr1
  5838  0BFB  0020               	movlb	0	; select bank0
  5839  0BFC  00E9               	movwf	_lastTXPacket
  5840                           
  5841                           ;nrf24l01.c: 236: unsigned char i;;nrf24l01.c: 239: nrf24l01SetRXMode(0);
  5842  0BFD  3000               	movlw	0
  5843  0BFE  3187  27C5  318B   	fcall	_nrf24l01SetRXMode
  5844                           
  5845                           ;nrf24l01.c: 242: nrf24l01SPIStart();
  5846  0C01  3197  27C5  318B   	fcall	_nrf24l01SPIStart
  5847                           
  5848                           ;nrf24l01.c: 245: nrf24l01SPISend((unsigned) 0b10110000);
  5849  0C04  30B0               	movlw	176
  5850  0C05  3188  2000  318B   	fcall	_nrf24l01SPISend
  5851                           
  5852                           ;nrf24l01.c: 247: nrf24l01SPISend(lastTXPacket->packetData.byte);
  5853  0C08  0020               	movlb	0	; select bank0
  5854  0C09  0869               	movf	_lastTXPacket,w
  5855  0C0A  0084               	movwf	4
  5856  0C0B  3001               	movlw	1	; select bank2/3
  5857  0C0C  3001               	movlw	1	; select bank2/3
  5858  0C0D  0085               	movwf	5
  5859  0C0E  0800               	movf	0,w
  5860  0C0F  3188  2000  318B   	fcall	_nrf24l01SPISend
  5861                           
  5862                           ;nrf24l01.c: 251: unsigned char width = strlen(lastTXPacket->Message);
  5863  0C12  0020               	movlb	0	; select bank0
  5864  0C13  0869               	movf	_lastTXPacket,w
  5865  0C14  3E01               	addlw	1
  5866  0C15  3188  2083  318B   	fcall	_strlen
  5867  0C18  0874               	movf	116,w
  5868                           
  5869                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  5870  0C19  3FFF               	movwi [-1]fsr1
  5871                           
  5872                           ;nrf24l01.c: 253: for (i = 0; i < width; i++) {
  5873                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  5874  0C1A  3000               	movlw	0
  5875  0C1B  3FFE               	movwi [-2]fsr1
  5876  0C1C                     l4242:	
  5877                           
  5878                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  5879  0C1C  3F7E               	moviw [-2]fsr1
  5880  0C1D  00FF               	movwf	127
  5881                           
  5882                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  5883  0C1E  3F7F               	moviw [-1]fsr1
  5884  0C1F  027F               	subwf	127,w
  5885  0C20  1803               	btfsc	3,0
  5886  0C21  2C33               	goto	l4244
  5887                           
  5888                           ;nrf24l01.c: 254: nrf24l01SPISend(lastTXPacket->Message[i]);
  5889                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  5890  0C22  3F7E               	moviw [-2]fsr1
  5891  0C23  0020               	movlb	0	; select bank0
  5892  0C24  0769               	addwf	_lastTXPacket,w
  5893  0C25  00FF               	movwf	127
  5894  0C26  0A7F               	incf	127,w
  5895  0C27  0084               	movwf	4
  5896  0C28  3001               	movlw	1	; select bank2/3
  5897  0C29  3001               	movlw	1	; select bank2/3
  5898  0C2A  0085               	movwf	5
  5899  0C2B  0800               	movf	0,w
  5900  0C2C  3188  2000  318B   	fcall	_nrf24l01SPISend
  5901                           
  5902                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  5903  0C2F  3F7E               	moviw [-2]fsr1
  5904  0C30  3E01               	addlw	1
  5905  0C31  3FFE               	movwi [-2]fsr1
  5906  0C32  2C1C               	goto	l4242
  5907  0C33                     l4244:	
  5908                           
  5909                           ;nrf24l01.c: 255: };nrf24l01.c: 258: nrf24l01SPIEnd();
  5910  0C33  3197  27BC  318B   	fcall	_nrf24l01SPIEnd
  5911                           
  5912                           ;nrf24l01.c: 261: PORTAbits.RA0 = 1;
  5913  0C36  0020               	movlb	0	; select bank0
  5914  0C37  140C               	bsf	12,0	;volatile
  5915                           
  5916                           ;nrf24l01.c: 262: _delay((unsigned long)((12)*(32000000/4000000.0)));
  5917  0C38  3020               	movlw	32
  5918  0C39                     u5297:	
  5919  0C39  0B89               	decfsz	9,f
  5920  0C3A  2C39               	goto	u5297
  5921                           
  5922                           ;nrf24l01.c: 263: PORTAbits.RA0 = 0;
  5923  0C3B  0020               	movlb	0	; select bank0
  5924  0C3C  100C               	bcf	12,0	;volatile
  5925                           
  5926                           ; _nrf24l01SendTXBuffer: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 0, argsize = 0, vargsize = 0
  5927  0C3D  317D               	addfsr 1,-3
  5928  0C3E  0008               	return
  5929  0C3F                     __end_of_nrf24l01SendTXBuffer:	
  5930                           
  5931                           	psect	text18
  5932  0883                     __ptext18:	
  5933 ;; *************** function _strlen *****************
  5934 ;; Defined at:
  5935 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  5936 ;; Parameters:    Size  Location     Type
  5937 ;;  s               1    wreg     PTR const unsigned char 
  5938 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  5939 ;;		 -> RXPacket(33), romDataMap(28), 
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;  s               1  [STACK] PTR const unsigned char 
  5942 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  5943 ;;		 -> RXPacket(33), romDataMap(28), 
  5944 ;;  cp              1  [STACK] PTR const unsigned char 
  5945 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  5946 ;;		 -> RXPacket(33), romDataMap(28), 
  5947 ;; Return value:  Size  Location     Type
  5948 ;;                  2  [STACK] unsigned int 
  5949 ;; Registers used:
  5950 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  5951 ;; Tracked objects:
  5952 ;;		On entry : 1F/0
  5953 ;;		On exit  : 0/0
  5954 ;;		Unchanged: 0/0
  5955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5960 ;;Total ram usage:        0 bytes
  5961 ;; Hardware stack levels used:    1
  5962 ;; Hardware stack levels required when called:    7
  5963 ;; This function calls:
  5964 ;;		Nothing
  5965 ;; This function is called by:
  5966 ;;		_nrf24l01GetPipe
  5967 ;;		_nrf24l01SendTXBuffer
  5968 ;; This function uses a reentrant model
  5969 ;;
  5970                           
  5971                           
  5972                           ;psect for function _strlen
  5973  0883                     _strlen:	
  5974                           
  5975                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5976  0883  3142               	addfsr 1,2
  5977                           
  5978                           ;incstack = 0
  5979 ;; hardware stack exceeded
  5980                           ; Regs used in _strlen: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  5981                           ;strlen@s stored from wreg
  5982                           ;stkvar	strlen@s @ sp[(-2)+0]
  5983  0884  3FFE               	movwi [-2]fsr1
  5984                           
  5985                           ;stkvar	strlen@s @ sp[(-2)+0]
  5986  0885  0806               	movf	6,w
  5987  0886  0084               	movwf	4
  5988  0887  0807               	movf	7,w
  5989  0888  0085               	movwf	5
  5990  0889  313E               	addfsr 0,-2
  5991                           
  5992                           ;stkvar	strlen@cp @ sp[(-2)+1]
  5993  088A  3F00               	moviw [0]fsr0
  5994  088B  3FFF               	movwi [-1]fsr1
  5995  088C                     l3864:	
  5996                           
  5997                           ;stkvar	strlen@cp @ sp[(-2)+1]
  5998  088C  3F7F               	moviw [-1]fsr1
  5999  088D  0084               	movwf	4
  6000  088E  3001               	movlw	1	; select bank2/3
  6001  088F  0085               	movwf	5
  6002  0890  0800               	movf	0,w
  6003  0891  1903               	btfsc	3,2
  6004  0892  2897               	goto	l3866
  6005                           
  6006                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6007  0893  3F7F               	moviw [-1]fsr1
  6008  0894  3E01               	addlw	1
  6009  0895  3FFF               	movwi [-1]fsr1
  6010  0896  288C               	goto	l3864
  6011  0897                     l3866:	
  6012                           
  6013                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6014  0897  3F7F               	moviw [-1]fsr1
  6015  0898  00FF               	movwf	127
  6016                           
  6017                           ;stkvar	strlen@s @ sp[(-2)+0]
  6018  0899  3F7E               	moviw [-2]fsr1
  6019  089A  027F               	subwf	127,w
  6020  089B  00F4               	movwf	116
  6021  089C  01F5               	clrf	117
  6022  089D  1BF4               	btfsc	116,7
  6023  089E  03F5               	decf	117,f
  6024                           
  6025                           ; _strlen: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsiz
      +                          e = 0, vargsize = 0
  6026  089F  317E               	addfsr 1,-2
  6027  08A0  0008               	return
  6028  08A1                     __end_of_strlen:	
  6029                           
  6030                           	psect	text19
  6031  07C5                     __ptext19:	
  6032 ;; *************** function _nrf24l01SetRXMode *****************
  6033 ;; Defined at:
  6034 ;;		line 51 in file "nrf24l01.c"
  6035 ;; Parameters:    Size  Location     Type
  6036 ;;  rxMode          1    wreg     unsigned char 
  6037 ;; Auto vars:     Size  Location     Type
  6038 ;;  rxMode          1  [STACK] unsigned char 
  6039 ;; Return value:  Size  Location     Type
  6040 ;;                  1    wreg      void 
  6041 ;; Registers used:
  6042 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+11, pclath
  6043 ;; Tracked objects:
  6044 ;;		On entry : 0/0
  6045 ;;		On exit  : 0/0
  6046 ;;		Unchanged: 0/0
  6047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6052 ;;Total ram usage:        0 bytes
  6053 ;; Hardware stack levels used:    1
  6054 ;; Hardware stack levels required when called:    9
  6055 ;; This function calls:
  6056 ;;		_nrf24l01Send
  6057 ;; This function is called by:
  6058 ;;		_sleepListren
  6059 ;;		_nrf24l01ISR
  6060 ;;		_nrf24l01SendTXBuffer
  6061 ;;		_nrf24l01Service
  6062 ;; This function uses a reentrant model
  6063 ;;
  6064                           
  6065                           
  6066                           ;psect for function _nrf24l01SetRXMode
  6067  07C5                     _nrf24l01SetRXMode:	
  6068                           
  6069                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6070  07C5  3141               	addfsr 1,1
  6071                           
  6072                           ;incstack = 0
  6073 ;; hardware stack exceeded
  6074                           ; Regs used in _nrf24l01SetRXMode: [wreg+fsr1l+fsr1h+status,2-btemp+0+btemp+11+pclath]
  6075                           ;nrf24l01SetRXMode@rxMode stored from wreg
  6076                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6077  07C6  3FFF               	movwi [-1]fsr1
  6078                           
  6079                           ;nrf24l01.c: 54: if (rxMode){
  6080                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6081  07C7  3F7F               	moviw [-1]fsr1
  6082  07C8  1903               	btfsc	3,2
  6083  07C9  2FCF               	goto	l3830
  6084                           
  6085                           ;nrf24l01.c: 55: if (status.TX == 2){
  6086  07CA  3002               	movlw	2
  6087  07CB  0020               	movlb	0	; select bank0
  6088  07CC  0664               	xorwf	_status,w	;volatile
  6089  07CD  1903               	btfsc	3,2
  6090  07CE  2FFE               	goto	l264
  6091  07CF                     l3830:	
  6092                           
  6093                           ;nrf24l01.c: 57: };nrf24l01.c: 58: };nrf24l01.c: 61: if (!rxMode){
  6094                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6095  07CF  3F7F               	moviw [-1]fsr1
  6096  07D0  1D03               	btfss	3,2
  6097  07D1  2FD7               	goto	l3836
  6098                           
  6099                           ;nrf24l01.c: 62: if (status.TX == 3){
  6100  07D2  3003               	movlw	3
  6101  07D3  0020               	movlb	0	; select bank0
  6102  07D4  0664               	xorwf	_status,w	;volatile
  6103  07D5  1903               	btfsc	3,2
  6104  07D6  2FFE               	goto	l264
  6105  07D7                     l3836:	
  6106                           
  6107                           ;nrf24l01.c: 64: };nrf24l01.c: 65: };nrf24l01.c: 71: if (status.configRegister.PRIM_RX !
      +                          = rxMode){
  6108                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6109  07D7  3F7F               	moviw [-1]fsr1
  6110  07D8  00FF               	movwf	127
  6111  07D9  0020               	movlb	0	; select bank0
  6112  07DA  0867               	movf	_status+3,w	;volatile
  6113  07DB  3901               	andlw	1
  6114  07DC  067F               	xorwf	127,w
  6115  07DD  1903               	skipnz
  6116  07DE  2FFE               	goto	l264
  6117                           
  6118                           ;nrf24l01.c: 74: PORTAbits.RA0 = 0;
  6119  07DF  100C               	bcf	12,0	;volatile
  6120                           
  6121                           ;nrf24l01.c: 75: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6122  07E0  30C0               	movlw	192
  6123  07E1                     u5307:	
  6124  07E1  3200               	nop2
  6125  07E2  0B89               	decfsz	9,f
  6126  07E3  2FE1               	goto	u5307
  6127                           
  6128                           ;nrf24l01.c: 78: status.configRegister.PRIM_RX = rxMode;
  6129                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6130  07E4  3F7F               	moviw [-1]fsr1
  6131  07E5  3901               	andlw	1
  6132  07E6  0020               	movlb	0	; select bank0
  6133  07E7  1D03               	skipz
  6134  07E8  1467               	bsf	_status+3,0	;volatile
  6135  07E9  1903               	skipnz
  6136  07EA  1067               	bcf	_status+3,0	;volatile
  6137                           
  6138                           ;nrf24l01.c: 79: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configRegi
      +                          ster.byte);
  6139  07EB  0867               	movf	_status+3,w	;volatile
  6140  07EC  001E               	movwi fsr1++
  6141  07ED  3020               	movlw	32
  6142  07EE  3197  27ED  3187   	fcall	_nrf24l01Send
  6143                           
  6144                           ;nrf24l01.c: 82: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6145  07F1  30C0               	movlw	192
  6146  07F2                     u5317:	
  6147  07F2  3200               	nop2
  6148  07F3  0B89               	decfsz	9,f
  6149  07F4  2FF2               	goto	u5317
  6150                           
  6151                           ;nrf24l01.c: 85: if (rxMode){
  6152                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6153  07F5  3F7F               	moviw [-1]fsr1
  6154  07F6  1903               	btfsc	3,2
  6155  07F7  2FFE               	goto	l264
  6156                           
  6157                           ;nrf24l01.c: 86: PORTAbits.RA0 = 1;
  6158  07F8  0020               	movlb	0	; select bank0
  6159  07F9  140C               	bsf	12,0	;volatile
  6160                           
  6161                           ;nrf24l01.c: 87: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6162  07FA  30C0               	movlw	192
  6163  07FB                     u5327:	
  6164  07FB  3200               	nop2
  6165  07FC  0B89               	decfsz	9,f
  6166  07FD  2FFB               	goto	u5327
  6167  07FE                     l264:	
  6168                           
  6169                           ; _nrf24l01SetRXMode: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
  6170  07FE  317F               	addfsr 1,-1
  6171  07FF  0008               	return
  6172  0800                     __end_of_nrf24l01SetRXMode:	
  6173                           
  6174                           	psect	text20
  6175  17ED                     __ptext20:	
  6176 ;; *************** function _nrf24l01Send *****************
  6177 ;; Defined at:
  6178 ;;		line 12 in file "nrf24l01.c"
  6179 ;; Parameters:    Size  Location     Type
  6180 ;;  command         1    wreg     unsigned char 
  6181 ;;  data            1  [STACK] unsigned char 
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;  command         1  [STACK] unsigned char 
  6184 ;; Return value:  Size  Location     Type
  6185 ;;                  1    wreg      unsigned char 
  6186 ;; Registers used:
  6187 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath
  6188 ;; Tracked objects:
  6189 ;;		On entry : 0/0
  6190 ;;		On exit  : 1F/1
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;Total ram usage:        0 bytes
  6198 ;; Hardware stack levels used:    1
  6199 ;; Hardware stack levels required when called:    8
  6200 ;; This function calls:
  6201 ;;		_nrf24l01SPIEnd
  6202 ;;		_nrf24l01SPISend
  6203 ;;		_nrf24l01SPIStart
  6204 ;; This function is called by:
  6205 ;;		_loop
  6206 ;;		_nrf24l01SetRXMode
  6207 ;;		_nrf24l01SetRXPipe
  6208 ;;		_nrf24l01ISR
  6209 ;;		_nrf24l01Service
  6210 ;;		_nrf24l01InitRegisters
  6211 ;;		_nrf24l01ChangeTXPower
  6212 ;; This function uses a reentrant model
  6213 ;;
  6214                           
  6215                           
  6216                           ;psect for function _nrf24l01Send
  6217  17ED                     _nrf24l01Send:	
  6218                           
  6219                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6220  17ED  3141               	addfsr 1,1
  6221                           
  6222                           ;incstack = 0
  6223 ;; hardware stack exceeded
  6224                           ; Regs used in _nrf24l01Send: [wreg+fsr1l+fsr1h+status,2+status,0+pclath]
  6225                           ;nrf24l01Send@command stored from wreg
  6226                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6227  17EE  3FFF               	movwi [-1]fsr1
  6228                           
  6229                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  6230  17EF  3197  27C5  3197   	fcall	_nrf24l01SPIStart
  6231                           
  6232                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  6233                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6234  17F2  3F7F               	moviw [-1]fsr1
  6235  17F3  3188  2000  3197   	fcall	_nrf24l01SPISend
  6236                           
  6237                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  6238                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6239  17F6  3F7E               	moviw [-2]fsr1
  6240  17F7  3188  2000  3197   	fcall	_nrf24l01SPISend
  6241                           
  6242                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6243  17FA  3FFE               	movwi [-2]fsr1
  6244                           
  6245                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  6246  17FB  3197  27BC         	fcall	_nrf24l01SPIEnd
  6247                           
  6248                           ;nrf24l01.c: 26: return data;
  6249                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6250  17FD  3F7E               	moviw [-2]fsr1
  6251                           
  6252                           ; _nrf24l01Send: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, 
      +                          argsize = 1, vargsize = 0
  6253  17FE  317E               	addfsr 1,-2
  6254  17FF  0008               	return
  6255  1800                     __end_of_nrf24l01Send:	
  6256                           
  6257                           	psect	text21
  6258  17C5                     __ptext21:	
  6259 ;; *************** function _nrf24l01SPIStart *****************
  6260 ;; Defined at:
  6261 ;;		line 68 in file "interface.c"
  6262 ;; Parameters:    Size  Location     Type
  6263 ;;		None
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;		None
  6266 ;; Return value:  Size  Location     Type
  6267 ;;                  1    wreg      void 
  6268 ;; Registers used:
  6269 ;;		wreg
  6270 ;; Tracked objects:
  6271 ;;		On entry : 0/0
  6272 ;;		On exit  : 0/0
  6273 ;;		Unchanged: 0/0
  6274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6279 ;;Total ram usage:        0 bytes
  6280 ;; Hardware stack levels used:    1
  6281 ;; Hardware stack levels required when called:    7
  6282 ;; This function calls:
  6283 ;;		Nothing
  6284 ;; This function is called by:
  6285 ;;		_nrf24l01Send
  6286 ;;		_nrf24l01SetTXPipe
  6287 ;;		_nrf24l01SendTXBuffer
  6288 ;;		_nrf24l01Service
  6289 ;;		_nrf24l01InitRegisters
  6290 ;; This function uses a reentrant model
  6291 ;;
  6292                           
  6293                           
  6294                           ;psect for function _nrf24l01SPIStart
  6295  17C5                     _nrf24l01SPIStart:	
  6296                           
  6297                           ;interface.c: 69: PIE0bits.INTE = 0;
  6298                           
  6299                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6300                           ;incstack = 0
  6301 ;; hardware stack exceeded
  6302                           ; Regs used in _nrf24l01SPIStart: [wreg]
  6303  17C5  0021               	movlb	1	; select bank1
  6304  17C6  1010               	bcf	16,0	;volatile
  6305                           
  6306                           ;interface.c: 70: PORTAbits.RA1 = 0;
  6307  17C7  0020               	movlb	0	; select bank0
  6308  17C8  108C               	bcf	12,1	;volatile
  6309                           
  6310                           ;interface.c: 71: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6311  17C9  301A               	movlw	26
  6312  17CA                     u5337:	
  6313  17CA  0B89               	decfsz	9,f
  6314  17CB  2FCA               	goto	u5337
  6315  17CC  3200               	nop2
  6316                           
  6317                           ; _nrf24l01SPIStart: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           0, argsize = 0, vargsize = 0
  6318  17CD  0008               	return
  6319  17CE                     __end_of_nrf24l01SPIStart:	
  6320                           
  6321                           	psect	text22
  6322  0800                     __ptext22:	
  6323 ;; *************** function _nrf24l01SPISend *****************
  6324 ;; Defined at:
  6325 ;;		line 56 in file "interface.c"
  6326 ;; Parameters:    Size  Location     Type
  6327 ;;  data            1    wreg     unsigned char 
  6328 ;; Auto vars:     Size  Location     Type
  6329 ;;  data            1  [STACK] unsigned char 
  6330 ;; Return value:  Size  Location     Type
  6331 ;;                  1    wreg      unsigned char 
  6332 ;; Registers used:
  6333 ;;		wreg, fsr1l, fsr1h
  6334 ;; Tracked objects:
  6335 ;;		On entry : 0/0
  6336 ;;		On exit  : 1F/4
  6337 ;;		Unchanged: 0/0
  6338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6343 ;;Total ram usage:        0 bytes
  6344 ;; Hardware stack levels used:    1
  6345 ;; Hardware stack levels required when called:    7
  6346 ;; This function calls:
  6347 ;;		Nothing
  6348 ;; This function is called by:
  6349 ;;		_nrf24l01Send
  6350 ;;		_nrf24l01SetTXPipe
  6351 ;;		_nrf24l01SendTXBuffer
  6352 ;;		_nrf24l01Service
  6353 ;;		_nrf24l01InitRegisters
  6354 ;; This function uses a reentrant model
  6355 ;;
  6356                           
  6357                           
  6358                           ;psect for function _nrf24l01SPISend
  6359  0800                     _nrf24l01SPISend:	
  6360                           
  6361                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6362  0800  3141               	addfsr 1,1
  6363                           
  6364                           ;incstack = 0
  6365 ;; hardware stack exceeded
  6366                           ; Regs used in _nrf24l01SPISend: [wreg+fsr1l+fsr1h]
  6367                           ;nrf24l01SPISend@data stored from wreg
  6368                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6369  0801  3FFF               	movwi [-1]fsr1
  6370                           
  6371                           ;interface.c: 57: SSP1BUF = data;
  6372                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6373  0802  3F7F               	moviw [-1]fsr1
  6374  0803  0024               	movlb	4	; select bank4
  6375  0804  0091               	movwf	17	;volatile
  6376                           
  6377                           ;interface.c: 59: PORTCbits.RC4 = 1;
  6378  0805  0020               	movlb	0	; select bank0
  6379  0806  160E               	bsf	14,4	;volatile
  6380  0807                     l53:	
  6381                           ;interface.c: 61: while (!SSP1STATbits.BF){
  6382                           
  6383  0807  0024               	movlb	4	; select bank4
  6384  0808  1814               	btfsc	20,0	;volatile
  6385  0809  280C               	goto	l3590
  6386                           
  6387                           ;interface.c: 62: __nop();
  6388  080A  0000               	nop
  6389  080B  2807               	goto	l53
  6390  080C                     l3590:	
  6391                           
  6392                           ;interface.c: 63: };interface.c: 65: return SSP1BUF;
  6393  080C  0811               	movf	17,w	;volatile
  6394                           
  6395                           ; _nrf24l01SPISend: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  6396  080D  317F               	addfsr 1,-1
  6397  080E  0008               	return
  6398  080F                     __end_of_nrf24l01SPISend:	
  6399                           
  6400                           	psect	text23
  6401  17BC                     __ptext23:	
  6402 ;; *************** function _nrf24l01SPIEnd *****************
  6403 ;; Defined at:
  6404 ;;		line 74 in file "interface.c"
  6405 ;; Parameters:    Size  Location     Type
  6406 ;;		None
  6407 ;; Auto vars:     Size  Location     Type
  6408 ;;		None
  6409 ;; Return value:  Size  Location     Type
  6410 ;;                  1    wreg      void 
  6411 ;; Registers used:
  6412 ;;		wreg
  6413 ;; Tracked objects:
  6414 ;;		On entry : 0/0
  6415 ;;		On exit  : 1F/1
  6416 ;;		Unchanged: 0/0
  6417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6422 ;;Total ram usage:        0 bytes
  6423 ;; Hardware stack levels used:    1
  6424 ;; Hardware stack levels required when called:    7
  6425 ;; This function calls:
  6426 ;;		Nothing
  6427 ;; This function is called by:
  6428 ;;		_nrf24l01Send
  6429 ;;		_nrf24l01SetTXPipe
  6430 ;;		_nrf24l01SendTXBuffer
  6431 ;;		_nrf24l01Service
  6432 ;;		_nrf24l01InitRegisters
  6433 ;; This function uses a reentrant model
  6434 ;;
  6435                           
  6436                           
  6437                           ;psect for function _nrf24l01SPIEnd
  6438  17BC                     _nrf24l01SPIEnd:	
  6439                           
  6440                           ;interface.c: 75: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6441                           
  6442                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6443                           ;incstack = 0
  6444 ;; hardware stack exceeded
  6445                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  6446  17BC  301A               	movlw	26
  6447  17BD                     u5347:	
  6448  17BD  0B89               	decfsz	9,f
  6449  17BE  2FBD               	goto	u5347
  6450  17BF  3200               	nop2
  6451                           
  6452                           ;interface.c: 76: PORTAbits.RA1 = 1;
  6453  17C0  0020               	movlb	0	; select bank0
  6454  17C1  148C               	bsf	12,1	;volatile
  6455                           
  6456                           ;interface.c: 77: PIE0bits.INTE = 1;
  6457  17C2  0021               	movlb	1	; select bank1
  6458  17C3  1410               	bsf	16,0	;volatile
  6459                           
  6460                           ; _nrf24l01SPIEnd: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  6461  17C4  0008               	return
  6462  17C5                     __end_of_nrf24l01SPIEnd:	
  6463                           
  6464                           	psect	text24
  6465  0A8D                     __ptext24:	
  6466 ;; *************** function _memset *****************
  6467 ;; Defined at:
  6468 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;  p1              2  [STACK] PTR void 
  6471 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6472 ;;  c               2  [STACK] int 
  6473 ;;  n               2  [STACK] unsigned int 
  6474 ;; Auto vars:     Size  Location     Type
  6475 ;;  p               2  [STACK] PTR unsigned char 
  6476 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6477 ;; Return value:  Size  Location     Type
  6478 ;;                  2  [STACK] PTR void 
  6479 ;; Registers used:
  6480 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+8, btemp+9, btemp+11
  6481 ;; Tracked objects:
  6482 ;;		On entry : 1E/1
  6483 ;;		On exit  : 0/0
  6484 ;;		Unchanged: 0/0
  6485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6490 ;;Total ram usage:        0 bytes
  6491 ;; Hardware stack levels used:    1
  6492 ;; Hardware stack levels required when called:    7
  6493 ;; This function calls:
  6494 ;;		Nothing
  6495 ;; This function is called by:
  6496 ;;		_sendMessage
  6497 ;;		_nrf24l01Service
  6498 ;; This function uses a reentrant model
  6499 ;;
  6500                           
  6501                           
  6502                           ;psect for function _memset
  6503  0A8D                     _memset:	
  6504                           
  6505                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6506  0A8D  3142               	addfsr 1,2
  6507                           
  6508                           ;stkvar	memset@p1 @ sp[(-2)+-2]
  6509                           
  6510                           ;incstack = 0
  6511 ;; hardware stack exceeded
  6512                           ; Regs used in _memset: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+8+btemp+9+btemp+1
      +                          1]
  6513  0A8E  0806               	movf	6,w
  6514  0A8F  0084               	movwf	4
  6515  0A90  0807               	movf	7,w
  6516  0A91  0085               	movwf	5
  6517  0A92  313C               	addfsr 0,-4
  6518                           
  6519                           ;stkvar	memset@p @ sp[(-2)+0]
  6520  0A93  3F00               	moviw [0]fsr0
  6521  0A94  3FFE               	movwi [-2]fsr1
  6522  0A95  3F01               	moviw [1]fsr0
  6523  0A96  3FFF               	movwi [-1]fsr1
  6524  0A97                     l4154:	
  6525                           
  6526                           ;stkvar	memset@n @ sp[(-2)+-6]
  6527  0A97  3F78               	moviw [-8]fsr1
  6528  0A98  00F4               	movwf	116
  6529  0A99  3001               	movlw	1
  6530  0A9A  0274               	subwf	116,w
  6531  0A9B  3FF8               	movwi [-8]fsr1
  6532  0A9C  3F79               	moviw [-7]fsr1
  6533  0A9D  00F4               	movwf	116
  6534  0A9E  3000               	movlw	0
  6535  0A9F  3B74               	subwfb	116,w
  6536  0AA0  3FF9               	movwi [-7]fsr1
  6537  0AA1  3F78               	moviw [-8]fsr1
  6538  0AA2  3AFF               	xorlw	255
  6539  0AA3  00F4               	movwf	116
  6540  0AA4  3F79               	moviw [-7]fsr1
  6541  0AA5  3AFF               	xorlw	255
  6542  0AA6  04F4               	iorwf	116,f
  6543  0AA7  1903               	btfsc	3,2
  6544  0AA8  2ABD               	goto	l913
  6545                           
  6546                           ;stkvar	memset@c @ sp[(-2)+-4]
  6547  0AA9  3F7A               	moviw [-6]fsr1
  6548  0AAA  00FF               	movwf	127
  6549                           
  6550                           ;stkvar	memset@p @ sp[(-2)+0]
  6551  0AAB  3F7E               	moviw [-2]fsr1
  6552  0AAC  00FC               	movwf	124
  6553  0AAD  3F7F               	moviw [-1]fsr1
  6554  0AAE  00FD               	movwf	125
  6555  0AAF  087C               	movf	124,w
  6556  0AB0  0084               	movwf	4
  6557  0AB1  087D               	movf	125,w
  6558  0AB2  0085               	movwf	5
  6559  0AB3  087F               	movf	127,w
  6560  0AB4  0080               	movwf	0
  6561                           
  6562                           ;stkvar	memset@p @ sp[(-2)+0]
  6563  0AB5  3F7E               	moviw [-2]fsr1
  6564  0AB6  3E01               	addlw	1
  6565  0AB7  3FFE               	movwi [-2]fsr1
  6566  0AB8  01F4               	clrf	116
  6567  0AB9  3F7F               	moviw [-1]fsr1
  6568  0ABA  3D74               	addwfc	116,w
  6569  0ABB  3FFF               	movwi [-1]fsr1
  6570  0ABC  2A97               	goto	l4154
  6571  0ABD                     l913:	
  6572                           
  6573                           ; _memset: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsiz
      +                          e = 6, vargsize = 0
  6574  0ABD  3178               	addfsr 1,-8
  6575  0ABE  0008               	return
  6576  0ABF                     __end_of_memset:	
  6577                           
  6578                           	psect	text25
  6579  0569                     __ptext25:	
  6580 ;; *************** function _ftoa *****************
  6581 ;; Defined at:
  6582 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6583 ;; Parameters:    Size  Location     Type
  6584 ;;  f               3    0[BANK1 ] float 
  6585 ;;  status          1    3[BANK1 ] PTR int 
  6586 ;;		 -> sendMessage@ftoaStatus(2), 
  6587 ;; Auto vars:     Size  Location     Type
  6588 ;;  l               4    8[BANK1 ] unsigned long 
  6589 ;;  rem             4    4[BANK1 ] unsigned long 
  6590 ;;  cp              1   12[BANK1 ] PTR unsigned char 
  6591 ;;		 -> ftoa@buf(17), 
  6592 ;; Return value:  Size  Location     Type
  6593 ;;                  1    wreg      PTR unsigned char 
  6594 ;; Registers used:
  6595 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  6596 ;; Tracked objects:
  6597 ;;		On entry : 0/0
  6598 ;;		On exit  : 0/0
  6599 ;;		Unchanged: 0/0
  6600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6601 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6602 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6604 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6605 ;;Total ram usage:       13 bytes
  6606 ;; Hardware stack levels used:    1
  6607 ;; Hardware stack levels required when called:   10
  6608 ;; This function calls:
  6609 ;;		___ftge
  6610 ;;		___ftmul
  6611 ;;		___ftneg
  6612 ;;		___ftsub
  6613 ;;		___fttol
  6614 ;;		___lltoft
  6615 ;;		_sprintf
  6616 ;; This function is called by:
  6617 ;;		_sendMessage
  6618 ;; This function uses a non-reentrant model
  6619 ;;
  6620                           
  6621                           
  6622                           ;psect for function _ftoa
  6623  0569                     _ftoa:	
  6624                           
  6625                           ;incstack = 0
  6626                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  6627  0569  303C               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6628  056A  00FF               	movwf	127
  6629  056B  087F               	movf	127,w
  6630  056C  0021               	movlb	1	; select bank1
  6631  056D  00AC               	movwf	ftoa@cp^(0+128)
  6632  056E  0820               	movf	ftoa@f^(0+128),w
  6633  056F  0020               	movlb	0	; select bank0
  6634  0570  00A6               	movwf	___ftge@ff1
  6635  0571  0021               	movlb	1	; select bank1
  6636  0572  0821               	movf	(ftoa@f+1)^(0+128),w
  6637  0573  0020               	movlb	0	; select bank0
  6638  0574  00A7               	movwf	___ftge@ff1+1
  6639  0575  0021               	movlb	1	; select bank1
  6640  0576  0822               	movf	(ftoa@f+2)^(0+128),w
  6641  0577  0020               	movlb	0	; select bank0
  6642  0578  00A8               	movwf	___ftge@ff1+2
  6643  0579  3000               	movlw	0
  6644  057A  00A9               	movwf	___ftge@ff2
  6645  057B  3000               	movlw	0
  6646  057C  00AA               	movwf	___ftge@ff2+1
  6647  057D  3000               	movlw	0
  6648  057E  00AB               	movwf	___ftge@ff2+2
  6649  057F  318A  22F3  3185   	fcall	___ftge
  6650  0582  1803               	btfsc	3,0
  6651  0583  2DAB               	goto	l4176
  6652  0584  302D               	movlw	45
  6653  0585  00FF               	movwf	127
  6654  0586  0021               	movlb	1	; select bank1
  6655  0587  082C               	movf	ftoa@cp^(0+128),w
  6656  0588  0084               	movwf	4
  6657  0589  3001               	movlw	1	; select bank2/3
  6658  058A  0085               	movwf	5
  6659  058B  087F               	movf	127,w
  6660  058C  0080               	movwf	0
  6661  058D  3001               	movlw	1
  6662  058E  00FF               	movwf	127
  6663  058F  087F               	movf	127,w
  6664  0590  07AC               	addwf	ftoa@cp^(0+128),f
  6665  0591  0820               	movf	ftoa@f^(0+128),w
  6666  0592  0020               	movlb	0	; select bank0
  6667  0593  00CC               	movwf	___ftneg@f1
  6668  0594  0021               	movlb	1	; select bank1
  6669  0595  0821               	movf	(ftoa@f+1)^(0+128),w
  6670  0596  0020               	movlb	0	; select bank0
  6671  0597  00CD               	movwf	___ftneg@f1+1
  6672  0598  0021               	movlb	1	; select bank1
  6673  0599  0822               	movf	(ftoa@f+2)^(0+128),w
  6674  059A  0020               	movlb	0	; select bank0
  6675  059B  00CE               	movwf	___ftneg@f1+2
  6676  059C  3197  27B3  3185   	fcall	___ftneg
  6677  059F  0020               	movlb	0	; select bank0
  6678  05A0  084C               	movf	?___ftneg,w
  6679  05A1  0021               	movlb	1	; select bank1
  6680  05A2  00A0               	movwf	ftoa@f^(0+128)
  6681  05A3  0020               	movlb	0	; select bank0
  6682  05A4  084D               	movf	?___ftneg+1,w
  6683  05A5  0021               	movlb	1	; select bank1
  6684  05A6  00A1               	movwf	(ftoa@f+1)^(0+128)
  6685  05A7  0020               	movlb	0	; select bank0
  6686  05A8  084E               	movf	?___ftneg+2,w
  6687  05A9  0021               	movlb	1	; select bank1
  6688  05AA  00A2               	movwf	(ftoa@f+2)^(0+128)
  6689  05AB                     l4176:	
  6690  05AB  0021               	movlb	1	; select bank1
  6691  05AC  0820               	movf	ftoa@f^(0+128),w
  6692  05AD  0020               	movlb	0	; select bank0
  6693  05AE  00D8               	movwf	___fttol@f1
  6694  05AF  0021               	movlb	1	; select bank1
  6695  05B0  0821               	movf	(ftoa@f+1)^(0+128),w
  6696  05B1  0020               	movlb	0	; select bank0
  6697  05B2  00D9               	movwf	___fttol@f1+1
  6698  05B3  0021               	movlb	1	; select bank1
  6699  05B4  0822               	movf	(ftoa@f+2)^(0+128),w
  6700  05B5  0020               	movlb	0	; select bank0
  6701  05B6  00DA               	movwf	___fttol@f1+2
  6702  05B7  318D  257D  3185   	fcall	___fttol
  6703  05BA  0020               	movlb	0	; select bank0
  6704  05BB  085B               	movf	?___fttol+3,w
  6705  05BC  0021               	movlb	1	; select bank1
  6706  05BD  00AB               	movwf	(ftoa@l+3)^(0+128)
  6707  05BE  0020               	movlb	0	; select bank0
  6708  05BF  085A               	movf	?___fttol+2,w
  6709  05C0  0021               	movlb	1	; select bank1
  6710  05C1  00AA               	movwf	(ftoa@l+2)^(0+128)
  6711  05C2  0020               	movlb	0	; select bank0
  6712  05C3  0859               	movf	?___fttol+1,w
  6713  05C4  0021               	movlb	1	; select bank1
  6714  05C5  00A9               	movwf	(ftoa@l+1)^(0+128)
  6715  05C6  0020               	movlb	0	; select bank0
  6716  05C7  0858               	movf	?___fttol,w
  6717  05C8  0021               	movlb	1	; select bank1
  6718  05C9  00A8               	movwf	ftoa@l^(0+128)
  6719  05CA  082B               	movf	(ftoa@l+3)^(0+128),w
  6720  05CB  00F3               	movwf	___lltoft@c+3
  6721  05CC  082A               	movf	(ftoa@l+2)^(0+128),w
  6722  05CD  00F2               	movwf	___lltoft@c+2
  6723  05CE  0829               	movf	(ftoa@l+1)^(0+128),w
  6724  05CF  00F1               	movwf	___lltoft@c+1
  6725  05D0  0828               	movf	ftoa@l^(0+128),w
  6726  05D1  00F0               	movwf	___lltoft@c
  6727  05D2  3189  21AC  3185   	fcall	___lltoft
  6728  05D5  0870               	movf	?___lltoft,w
  6729  05D6  0020               	movlb	0	; select bank0
  6730  05D7  00B5               	movwf	___ftsub@f2
  6731  05D8  0871               	movf	?___lltoft+1,w
  6732  05D9  00B6               	movwf	___ftsub@f2+1
  6733  05DA  0872               	movf	?___lltoft+2,w
  6734  05DB  00B7               	movwf	___ftsub@f2+2
  6735  05DC  0021               	movlb	1	; select bank1
  6736  05DD  0820               	movf	ftoa@f^(0+128),w
  6737  05DE  0020               	movlb	0	; select bank0
  6738  05DF  00B8               	movwf	___ftsub@f1
  6739  05E0  0021               	movlb	1	; select bank1
  6740  05E1  0821               	movf	(ftoa@f+1)^(0+128),w
  6741  05E2  0020               	movlb	0	; select bank0
  6742  05E3  00B9               	movwf	___ftsub@f1+1
  6743  05E4  0021               	movlb	1	; select bank1
  6744  05E5  0822               	movf	(ftoa@f+2)^(0+128),w
  6745  05E6  0020               	movlb	0	; select bank0
  6746  05E7  00BA               	movwf	___ftsub@f1+2
  6747  05E8  3188  2047  3185   	fcall	___ftsub
  6748  05EB  0020               	movlb	0	; select bank0
  6749  05EC  0835               	movf	?___ftsub,w
  6750  05ED  0021               	movlb	1	; select bank1
  6751  05EE  00A0               	movwf	ftoa@f^(0+128)
  6752  05EF  0020               	movlb	0	; select bank0
  6753  05F0  0836               	movf	?___ftsub+1,w
  6754  05F1  0021               	movlb	1	; select bank1
  6755  05F2  00A1               	movwf	(ftoa@f+1)^(0+128)
  6756  05F3  0020               	movlb	0	; select bank0
  6757  05F4  0837               	movf	?___ftsub+2,w
  6758  05F5  0021               	movlb	1	; select bank1
  6759  05F6  00A2               	movwf	(ftoa@f+2)^(0+128)
  6760  05F7  0820               	movf	ftoa@f^(0+128),w
  6761  05F8  0020               	movlb	0	; select bank0
  6762  05F9  00CF               	movwf	___ftmul@f2
  6763  05FA  0021               	movlb	1	; select bank1
  6764  05FB  0821               	movf	(ftoa@f+1)^(0+128),w
  6765  05FC  0020               	movlb	0	; select bank0
  6766  05FD  00D0               	movwf	___ftmul@f2+1
  6767  05FE  0021               	movlb	1	; select bank1
  6768  05FF  0822               	movf	(ftoa@f+2)^(0+128),w
  6769  0600  0020               	movlb	0	; select bank0
  6770  0601  00D1               	movwf	___ftmul@f2+2
  6771  0602  3024               	movlw	36
  6772  0603  00CC               	movwf	___ftmul@f1
  6773  0604  3074               	movlw	116
  6774  0605  00CD               	movwf	___ftmul@f1+1
  6775  0606  3049               	movlw	73
  6776  0607  00CE               	movwf	___ftmul@f1+2
  6777  0608  3187  2711  3185   	fcall	___ftmul
  6778  060B  0020               	movlb	0	; select bank0
  6779  060C  084C               	movf	?___ftmul,w
  6780  060D  00D8               	movwf	___fttol@f1
  6781  060E  084D               	movf	?___ftmul+1,w
  6782  060F  00D9               	movwf	___fttol@f1+1
  6783  0610  084E               	movf	?___ftmul+2,w
  6784  0611  00DA               	movwf	___fttol@f1+2
  6785  0612  318D  257D  3185   	fcall	___fttol
  6786  0615  0020               	movlb	0	; select bank0
  6787  0616  085B               	movf	?___fttol+3,w
  6788  0617  0021               	movlb	1	; select bank1
  6789  0618  00A7               	movwf	(ftoa@rem+3)^(0+128)
  6790  0619  0020               	movlb	0	; select bank0
  6791  061A  085A               	movf	?___fttol+2,w
  6792  061B  0021               	movlb	1	; select bank1
  6793  061C  00A6               	movwf	(ftoa@rem+2)^(0+128)
  6794  061D  0020               	movlb	0	; select bank0
  6795  061E  0859               	movf	?___fttol+1,w
  6796  061F  0021               	movlb	1	; select bank1
  6797  0620  00A5               	movwf	(ftoa@rem+1)^(0+128)
  6798  0621  0020               	movlb	0	; select bank0
  6799  0622  0858               	movf	?___fttol,w
  6800  0623  0021               	movlb	1	; select bank1
  6801  0624  00A4               	movwf	ftoa@rem^(0+128)
  6802  0625  3001               	movlw	low (STR_11| (0+32768))
  6803  0626  0020               	movlb	0	; select bank0
  6804  0627  00BB               	movwf	sprintf@f
  6805  0628  3098               	movlw	high (STR_11| (0+32768))
  6806  0629  00BC               	movwf	sprintf@f+1
  6807  062A  0021               	movlb	1	; select bank1
  6808  062B  082B               	movf	(ftoa@l+3)^(0+128),w
  6809  062C  0020               	movlb	0	; select bank0
  6810  062D  00C0               	movwf	?_sprintf+5
  6811  062E  0021               	movlb	1	; select bank1
  6812  062F  082A               	movf	(ftoa@l+2)^(0+128),w
  6813  0630  0020               	movlb	0	; select bank0
  6814  0631  00BF               	movwf	?_sprintf+4
  6815  0632  0021               	movlb	1	; select bank1
  6816  0633  0829               	movf	(ftoa@l+1)^(0+128),w
  6817  0634  0020               	movlb	0	; select bank0
  6818  0635  00BE               	movwf	?_sprintf+3
  6819  0636  0021               	movlb	1	; select bank1
  6820  0637  0828               	movf	ftoa@l^(0+128),w
  6821  0638  0020               	movlb	0	; select bank0
  6822  0639  00BD               	movwf	?_sprintf+2
  6823  063A  0021               	movlb	1	; select bank1
  6824  063B  0827               	movf	(ftoa@rem+3)^(0+128),w
  6825  063C  0020               	movlb	0	; select bank0
  6826  063D  00C4               	movwf	?_sprintf+9
  6827  063E  0021               	movlb	1	; select bank1
  6828  063F  0826               	movf	(ftoa@rem+2)^(0+128),w
  6829  0640  0020               	movlb	0	; select bank0
  6830  0641  00C3               	movwf	?_sprintf+8
  6831  0642  0021               	movlb	1	; select bank1
  6832  0643  0825               	movf	(ftoa@rem+1)^(0+128),w
  6833  0644  0020               	movlb	0	; select bank0
  6834  0645  00C2               	movwf	?_sprintf+7
  6835  0646  0021               	movlb	1	; select bank1
  6836  0647  0824               	movf	ftoa@rem^(0+128),w
  6837  0648  0020               	movlb	0	; select bank0
  6838  0649  00C1               	movwf	?_sprintf+6
  6839  064A  0021               	movlb	1	; select bank1
  6840  064B  082C               	movf	ftoa@cp^(0+128),w
  6841  064C  3180  2058         	fcall	_sprintf
  6842  064E  303C               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6843  064F  0008               	return
  6844  0650                     __end_of_ftoa:	
  6845                           
  6846                           	psect	text26
  6847  0058                     __ptext26:	
  6848 ;; *************** function _sprintf *****************
  6849 ;; Defined at:
  6850 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  6851 ;; Parameters:    Size  Location     Type
  6852 ;;  sp              1    wreg     PTR unsigned char 
  6853 ;;		 -> ftoa@buf(17), 
  6854 ;;  f               2   27[BANK0 ] PTR const unsigned char 
  6855 ;;		 -> STR_11(11), 
  6856 ;; Auto vars:     Size  Location     Type
  6857 ;;  sp              1   47[BANK0 ] PTR unsigned char 
  6858 ;;		 -> ftoa@buf(17), 
  6859 ;;  val             4   43[BANK0 ] unsigned long 
  6860 ;;  tmpval          4    0        struct .
  6861 ;;  prec            2   50[BANK0 ] int 
  6862 ;;  width           2   48[BANK0 ] int 
  6863 ;;  cp              2    0        PTR const unsigned char 
  6864 ;;  len             2    0        unsigned int 
  6865 ;;  c               1   52[BANK0 ] unsigned char 
  6866 ;;  ap              1   42[BANK0 ] PTR void [1]
  6867 ;;		 -> ?_sprintf(2), 
  6868 ;;  flag            1   41[BANK0 ] unsigned char 
  6869 ;; Return value:  Size  Location     Type
  6870 ;;                  2   27[BANK0 ] int 
  6871 ;; Registers used:
  6872 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  6873 ;; Tracked objects:
  6874 ;;		On entry : 0/0
  6875 ;;		On exit  : 0/0
  6876 ;;		Unchanged: 0/0
  6877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6878 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6879 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6880 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6881 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6882 ;;Total ram usage:       26 bytes
  6883 ;; Hardware stack levels used:    1
  6884 ;; Hardware stack levels required when called:    8
  6885 ;; This function calls:
  6886 ;;		___lldiv
  6887 ;;		___llmod
  6888 ;;		___wmul
  6889 ;;		_isdigit
  6890 ;; This function is called by:
  6891 ;;		_ftoa
  6892 ;; This function uses a non-reentrant model
  6893 ;;
  6894                           
  6895                           
  6896                           ;psect for function _sprintf
  6897  0058                     _sprintf:	
  6898                           
  6899                           ;incstack = 0
  6900                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  6901                           ;sprintf@sp stored from wreg
  6902  0058  0020               	movlb	0	; select bank0
  6903  0059  00CF               	movwf	sprintf@sp
  6904                           
  6905                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  6906  005A  303D               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  6907  005B  00FF               	movwf	127
  6908  005C  087F               	movf	127,w
  6909  005D  00CA               	movwf	sprintf@ap
  6910  005E                     l3970:	
  6911                           ;doprnt.c: 548: while((c = *f++)) {
  6912                           
  6913  005E  083C               	movf	sprintf@f+1,w
  6914  005F  00FF               	movwf	127
  6915  0060  083B               	movf	sprintf@f,w
  6916  0061  00FE               	movwf	126
  6917  0062  0ABB               	incf	sprintf@f,f
  6918  0063  1903               	skipnz
  6919  0064  0ABC               	incf	sprintf@f+1,f
  6920  0065  087E               	movf	126,w
  6921  0066  0084               	movwf	4
  6922  0067  087F               	movf	127,w
  6923  0068  0085               	movwf	5
  6924  0069  0800               	movf	0,w	;code access
  6925  006A  00FF               	movwf	127
  6926  006B  087F               	movf	127,w
  6927  006C  00D4               	movwf	sprintf@c
  6928  006D  0854               	movf	sprintf@c,w
  6929  006E  1903               	btfsc	3,2
  6930  006F  2A1F               	goto	l3972
  6931                           
  6932                           ;doprnt.c: 550: if(c != '%')
  6933  0070  3025               	movlw	37
  6934  0071  0654               	xorwf	sprintf@c,w
  6935  0072  1903               	btfsc	3,2
  6936  0073  2881               	goto	l3878
  6937                           
  6938                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  6939  0074  0854               	movf	sprintf@c,w
  6940  0075  00FF               	movwf	127
  6941  0076  084F               	movf	sprintf@sp,w
  6942  0077  0084               	movwf	4
  6943  0078  3001               	movlw	1	; select bank2/3
  6944  0079  0085               	movwf	5
  6945  007A  087F               	movf	127,w
  6946  007B  0080               	movwf	0
  6947  007C  3001               	movlw	1
  6948  007D  00FF               	movwf	127
  6949  007E  087F               	movf	127,w
  6950  007F  07CF               	addwf	sprintf@sp,f
  6951                           
  6952                           ;doprnt.c: 554: continue;
  6953  0080  285E               	goto	l3970
  6954  0081                     l3878:	
  6955                           
  6956                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  6957  0081  01D0               	clrf	sprintf@width
  6958  0082  01D1               	clrf	sprintf@width+1
  6959                           
  6960                           ;doprnt.c: 560: flag = 0;
  6961  0083  01C9               	clrf	sprintf@flag
  6962                           
  6963                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  6964  0084  083B               	movf	sprintf@f,w
  6965  0085  0084               	movwf	4
  6966  0086  083C               	movf	sprintf@f+1,w
  6967  0087  0085               	movwf	5
  6968  0088  0800               	movf	0,w	;code access
  6969  0089  3197  27CE  3180   	fcall	_isdigit
  6970  008C  1C03               	btfss	3,0
  6971  008D  28BF               	goto	l3892
  6972                           
  6973                           ;doprnt.c: 610: width = 0;
  6974  008E  0020               	movlb	0	; select bank0
  6975  008F  01D0               	clrf	sprintf@width
  6976  0090  01D1               	clrf	sprintf@width+1
  6977  0091                     l3884:	
  6978                           ;doprnt.c: 611: do {
  6979                           
  6980                           
  6981                           ;doprnt.c: 612: width *= 10;
  6982  0091  300A               	movlw	10
  6983  0092  00F0               	movwf	___wmul@multiplier
  6984  0093  3000               	movlw	0
  6985  0094  00F1               	movwf	___wmul@multiplier+1
  6986  0095  0020               	movlb	0	; select bank0
  6987  0096  0851               	movf	sprintf@width+1,w
  6988  0097  00F3               	movwf	___wmul@multiplicand+1
  6989  0098  0850               	movf	sprintf@width,w
  6990  0099  00F2               	movwf	___wmul@multiplicand
  6991  009A  3188  2065  3180   	fcall	___wmul
  6992  009D  0871               	movf	?___wmul+1,w
  6993  009E  0020               	movlb	0	; select bank0
  6994  009F  00D1               	movwf	sprintf@width+1
  6995  00A0  0870               	movf	?___wmul,w
  6996  00A1  00D0               	movwf	sprintf@width
  6997                           
  6998                           ;doprnt.c: 613: width += *f++ - '0';
  6999  00A2  083B               	movf	sprintf@f,w
  7000  00A3  0084               	movwf	4
  7001  00A4  083C               	movf	sprintf@f+1,w
  7002  00A5  0085               	movwf	5
  7003  00A6  0800               	movf	0,w	;code access
  7004  00A7  3ED0               	addlw	208
  7005  00A8  00FE               	movwf	126
  7006  00A9  30FF               	movlw	255
  7007  00AA  1803               	skipnc
  7008  00AB  3000               	movlw	0
  7009  00AC  00FF               	movwf	127
  7010  00AD  087E               	movf	126,w
  7011  00AE  07D0               	addwf	sprintf@width,f
  7012  00AF  087F               	movf	127,w
  7013  00B0  3DD1               	addwfc	sprintf@width+1,f
  7014  00B1  3001               	movlw	1
  7015  00B2  07BB               	addwf	sprintf@f,f
  7016  00B3  3000               	movlw	0
  7017  00B4  3DBC               	addwfc	sprintf@f+1,f
  7018                           
  7019                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  7020  00B5  083B               	movf	sprintf@f,w
  7021  00B6  0084               	movwf	4
  7022  00B7  083C               	movf	sprintf@f+1,w
  7023  00B8  0085               	movwf	5
  7024  00B9  0800               	movf	0,w	;code access
  7025  00BA  3197  27CE  3180   	fcall	_isdigit
  7026  00BD  1803               	btfsc	3,0
  7027  00BE  2891               	goto	l3884
  7028  00BF                     l3892:	
  7029                           
  7030                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  7031  00BF  0020               	movlb	0	; select bank0
  7032  00C0  083B               	movf	sprintf@f,w
  7033  00C1  0084               	movwf	4
  7034  00C2  083C               	movf	sprintf@f+1,w
  7035  00C3  0085               	movwf	5
  7036  00C4  0012               	moviw fsr0++
  7037  00C5  3A2E               	xorlw	46
  7038  00C6  1D03               	btfss	3,2
  7039  00C7  28FD               	goto	l3904
  7040                           
  7041                           ;doprnt.c: 625: f++;
  7042  00C8  3001               	movlw	1
  7043  00C9  07BB               	addwf	sprintf@f,f
  7044  00CA  3000               	movlw	0
  7045  00CB  3DBC               	addwfc	sprintf@f+1,f
  7046                           
  7047                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  7048  00CC  01D2               	clrf	sprintf@prec
  7049  00CD  01D3               	clrf	sprintf@prec+1
  7050  00CE                     l3902:	
  7051                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  7052                           
  7053  00CE  083B               	movf	sprintf@f,w
  7054  00CF  0084               	movwf	4
  7055  00D0  083C               	movf	sprintf@f+1,w
  7056  00D1  0085               	movwf	5
  7057  00D2  0800               	movf	0,w	;code access
  7058  00D3  3197  27CE  3180   	fcall	_isdigit
  7059  00D6  1C03               	btfss	3,0
  7060  00D7  2908               	goto	l3910
  7061                           
  7062                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  7063  00D8  0020               	movlb	0	; select bank0
  7064  00D9  083B               	movf	sprintf@f,w
  7065  00DA  0084               	movwf	4
  7066  00DB  083C               	movf	sprintf@f+1,w
  7067  00DC  0085               	movwf	5
  7068  00DD  0800               	movf	0,w	;code access
  7069  00DE  00FE               	movwf	126
  7070  00DF  01FF               	clrf	127
  7071  00E0  0853               	movf	sprintf@prec+1,w
  7072  00E1  00F1               	movwf	___wmul@multiplier+1
  7073  00E2  0852               	movf	sprintf@prec,w
  7074  00E3  00F0               	movwf	___wmul@multiplier
  7075  00E4  300A               	movlw	10
  7076  00E5  00F2               	movwf	___wmul@multiplicand
  7077  00E6  3000               	movlw	0
  7078  00E7  00F3               	movwf	___wmul@multiplicand+1
  7079  00E8  3188  2065  3180   	fcall	___wmul
  7080  00EB  087E               	movf	126,w
  7081  00EC  0770               	addwf	?___wmul,w
  7082  00ED  00FC               	movwf	124
  7083  00EE  087F               	movf	127,w
  7084  00EF  3D71               	addwfc	?___wmul+1,w
  7085  00F0  00FD               	movwf	125
  7086  00F1  087C               	movf	124,w
  7087  00F2  3ED0               	addlw	208
  7088  00F3  0020               	movlb	0	; select bank0
  7089  00F4  00D2               	movwf	sprintf@prec
  7090  00F5  30FF               	movlw	255
  7091  00F6  3D7D               	addwfc	125,w
  7092  00F7  00D3               	movwf	sprintf@prec+1
  7093  00F8  3001               	movlw	1
  7094  00F9  07BB               	addwf	sprintf@f,f
  7095  00FA  3000               	movlw	0
  7096  00FB  3DBC               	addwfc	sprintf@f+1,f
  7097  00FC  28CE               	goto	l3902
  7098  00FD                     l3904:	
  7099                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  7100                           
  7101                           
  7102                           ;doprnt.c: 645: prec = 0;
  7103  00FD  0020               	movlb	0	; select bank0
  7104  00FE  01D2               	clrf	sprintf@prec
  7105  00FF  01D3               	clrf	sprintf@prec+1
  7106                           
  7107                           ;doprnt.c: 654: switch(c = *f++) {
  7108                           
  7109                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  7110  0100  2908               	goto	l3910
  7111  0101                     l462:	
  7112                           ;doprnt.c: 660: case 'l':
  7113                           
  7114                           ;doprnt.c: 657: goto alldone;
  7115                           
  7116                           ;doprnt.c: 656: case 0:
  7117                           
  7118                           
  7119                           ;doprnt.c: 662: flag |= 0x10;
  7120  0101  1649               	bsf	sprintf@flag,4
  7121                           
  7122                           ;doprnt.c: 663: goto loop;
  7123  0102  2908               	goto	l3910
  7124  0103                     l3906:	
  7125                           ;doprnt.c: 836: case 'u':
  7126                           
  7127                           ;doprnt.c: 832: continue;
  7128                           
  7129                           ;doprnt.c: 821: default:
  7130                           
  7131                           
  7132                           ;doprnt.c: 837: flag |= 0xC0;
  7133  0103  30C0               	movlw	192
  7134  0104  00FF               	movwf	127
  7135  0105  087F               	movf	127,w
  7136  0106  04C9               	iorwf	sprintf@flag,f
  7137                           
  7138                           ;doprnt.c: 841: }
  7139                           
  7140                           ;doprnt.c: 838: break;
  7141  0107  2920               	goto	l465
  7142  0108                     l3910:	
  7143  0108  0020               	movlb	0	; select bank0
  7144  0109  083C               	movf	sprintf@f+1,w
  7145  010A  00FF               	movwf	127
  7146  010B  083B               	movf	sprintf@f,w
  7147  010C  00FE               	movwf	126
  7148  010D  0ABB               	incf	sprintf@f,f
  7149  010E  1903               	skipnz
  7150  010F  0ABC               	incf	sprintf@f+1,f
  7151  0110  087E               	movf	126,w
  7152  0111  0084               	movwf	4
  7153  0112  087F               	movf	127,w
  7154  0113  0085               	movwf	5
  7155  0114  0800               	movf	0,w	;code access
  7156  0115  00D4               	movwf	sprintf@c
  7157                           
  7158                           ; Switch size 1, requested type "space"
  7159                           ; Number of cases is 3, Range of values is 0 to 117
  7160                           ; switch strategies available:
  7161                           ; Name         Instructions Cycles
  7162                           ; simple_byte           10     6 (average)
  7163                           ; direct_byte          242     6 (fixed)
  7164                           ; jumptable            260     6 (fixed)
  7165                           ;	Chosen strategy is simple_byte
  7166  0116  3A00               	xorlw	0	; case 0
  7167  0117  1903               	skipnz
  7168  0118  2A1F               	goto	l3972
  7169  0119  3A6C               	xorlw	108	; case 108
  7170  011A  1903               	skipnz
  7171  011B  2901               	goto	l462
  7172  011C  3A19               	xorlw	25	; case 117
  7173  011D  1903               	skipnz
  7174  011E  2903               	goto	l3906
  7175  011F  285E               	goto	l3970
  7176  0120                     l465:	
  7177                           
  7178                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  7179  0120  1E49               	btfss	sprintf@flag,4
  7180  0121  292F               	goto	l3916
  7181                           
  7182                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7183  0122  084A               	movf	sprintf@ap,w
  7184  0123  0084               	movwf	4
  7185  0124  0185               	clrf	5
  7186  0125  3F00               	moviw [0]fsr0
  7187  0126  00CB               	movwf	sprintf@val
  7188  0127  3F01               	moviw [1]fsr0
  7189  0128  00CC               	movwf	sprintf@val+1
  7190  0129  3F02               	moviw [2]fsr0
  7191  012A  00CD               	movwf	sprintf@val+2
  7192  012B  3F03               	moviw [3]fsr0
  7193  012C  00CE               	movwf	sprintf@val+3
  7194  012D  3004               	movlw	4
  7195  012E  293D               	goto	L1
  7196  012F                     l3916:	
  7197                           
  7198                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  7199  012F  084A               	movf	sprintf@ap,w
  7200  0130  0084               	movwf	4
  7201  0131  0185               	clrf	5
  7202  0132  3F00               	moviw [0]fsr0
  7203  0133  00FE               	movwf	126
  7204  0134  3F01               	moviw [1]fsr0
  7205  0135  00FF               	movwf	127
  7206  0136  087E               	movf	126,w
  7207  0137  00CB               	movwf	sprintf@val
  7208  0138  087F               	movf	127,w
  7209  0139  00CC               	movwf	sprintf@val+1
  7210  013A  01CD               	clrf	sprintf@val+2
  7211  013B  01CE               	clrf	sprintf@val+3
  7212  013C  3002               	movlw	2
  7213  013D                     L1:	
  7214  013D  00FF               	movwf	127
  7215  013E  087F               	movf	127,w
  7216  013F  07CA               	addwf	sprintf@ap,f
  7217                           
  7218                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  7219  0140  0852               	movf	sprintf@prec,w
  7220  0141  0453               	iorwf	sprintf@prec+1,w
  7221  0142  1D03               	btfss	3,2
  7222  0143  294E               	goto	l3926
  7223  0144  084E               	movf	sprintf@val+3,w
  7224  0145  044D               	iorwf	sprintf@val+2,w
  7225  0146  044C               	iorwf	sprintf@val+1,w
  7226  0147  044B               	iorwf	sprintf@val,w
  7227  0148  1D03               	skipz
  7228  0149  294E               	goto	l3926
  7229                           
  7230                           ;doprnt.c: 1310: prec++;
  7231  014A  3001               	movlw	1
  7232  014B  07D2               	addwf	sprintf@prec,f
  7233  014C  3000               	movlw	0
  7234  014D  3DD3               	addwfc	sprintf@prec+1,f
  7235  014E                     l3926:	
  7236                           
  7237                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7238  014E  01D4               	clrf	sprintf@c
  7239  014F  0AD4               	incf	sprintf@c,f
  7240  0150  300A               	movlw	10
  7241  0151  0654               	xorwf	sprintf@c,w
  7242  0152  1903               	btfsc	3,2
  7243  0153  2981               	goto	l3940
  7244  0154                     l3932:	
  7245                           
  7246                           ;doprnt.c: 1325: if(val < dpowers[c])
  7247  0154  0854               	movf	sprintf@c,w
  7248  0155  00FE               	movwf	126
  7249  0156  01FF               	clrf	127
  7250  0157  35FE               	lslf	126,f
  7251  0158  0DFF               	rlf	127,f
  7252  0159  35FE               	lslf	126,f
  7253  015A  0DFF               	rlf	127,f
  7254  015B  3000               	movlw	low (_dpowers| (0+32768))
  7255  015C  077E               	addwf	126,w
  7256  015D  0084               	movwf	4
  7257  015E  3090               	movlw	high (_dpowers| (0+32768))
  7258  015F  3D7F               	addwfc	127,w
  7259  0160  0085               	movwf	5
  7260  0161  3F00               	moviw [0]fsr0
  7261  0162  00C5               	movwf	??_sprintf
  7262  0163  3F01               	moviw [1]fsr0
  7263  0164  00C6               	movwf	??_sprintf+1
  7264  0165  3F02               	moviw [2]fsr0
  7265  0166  00C7               	movwf	??_sprintf+2
  7266  0167  3F03               	moviw [3]fsr0
  7267  0168  00C8               	movwf	??_sprintf+3
  7268  0169  0848               	movf	??_sprintf+3,w
  7269  016A  024E               	subwf	sprintf@val+3,w
  7270  016B  1D03               	skipz
  7271  016C  2977               	goto	u4295
  7272  016D  0847               	movf	??_sprintf+2,w
  7273  016E  024D               	subwf	sprintf@val+2,w
  7274  016F  1D03               	skipz
  7275  0170  2977               	goto	u4295
  7276  0171  0846               	movf	??_sprintf+1,w
  7277  0172  024C               	subwf	sprintf@val+1,w
  7278  0173  1D03               	skipz
  7279  0174  2977               	goto	u4295
  7280  0175  0845               	movf	??_sprintf,w
  7281  0176  024B               	subwf	sprintf@val,w
  7282  0177                     u4295:	
  7283  0177  1C03               	btfss	3,0
  7284  0178  2981               	goto	l3940
  7285                           
  7286                           ;doprnt.c: 1326: break;
  7287  0179  3001               	movlw	1
  7288  017A  00FF               	movwf	127
  7289  017B  087F               	movf	127,w
  7290  017C  07D4               	addwf	sprintf@c,f
  7291  017D  300A               	movlw	10
  7292  017E  0654               	xorwf	sprintf@c,w
  7293  017F  1D03               	btfss	3,2
  7294  0180  2954               	goto	l3932
  7295  0181                     l3940:	
  7296                           
  7297                           ;doprnt.c: 1358: if(c < prec)
  7298  0181  0853               	movf	sprintf@prec+1,w
  7299  0182  3A80               	xorlw	128
  7300  0183  3C80               	sublw	128
  7301  0184  1D03               	skipz
  7302  0185  2988               	goto	u4315
  7303  0186  0852               	movf	sprintf@prec,w
  7304  0187  0254               	subwf	sprintf@c,w
  7305  0188                     u4315:	
  7306  0188  1803               	skipnc
  7307  0189  2990               	goto	l3944
  7308                           
  7309                           ;doprnt.c: 1359: c = prec;
  7310  018A  0020               	movlb	0	; select bank0
  7311  018B  0852               	movf	sprintf@prec,w
  7312  018C  00FF               	movwf	127
  7313  018D  087F               	movf	127,w
  7314  018E  00D4               	movwf	sprintf@c
  7315  018F  29A4               	goto	l3948
  7316  0190                     l3944:	
  7317                           
  7318                           ;doprnt.c: 1360: else if(prec < c)
  7319  0190  0020               	movlb	0	; select bank0
  7320  0191  0853               	movf	sprintf@prec+1,w
  7321  0192  3A80               	xorlw	128
  7322  0193  00C5               	movwf	??_sprintf
  7323  0194  3080               	movlw	128
  7324  0195  0245               	subwf	??_sprintf,w
  7325  0196  1D03               	skipz
  7326  0197  299A               	goto	u4325
  7327  0198  0854               	movf	sprintf@c,w
  7328  0199  0252               	subwf	sprintf@prec,w
  7329  019A                     u4325:	
  7330  019A  1803               	skipnc
  7331  019B  29A4               	goto	l3948
  7332                           
  7333                           ;doprnt.c: 1361: prec = c;
  7334  019C  0020               	movlb	0	; select bank0
  7335  019D  0854               	movf	sprintf@c,w
  7336  019E  00FE               	movwf	126
  7337  019F  01FF               	clrf	127
  7338  01A0  087E               	movf	126,w
  7339  01A1  00D2               	movwf	sprintf@prec
  7340  01A2  087F               	movf	127,w
  7341  01A3  00D3               	movwf	sprintf@prec+1
  7342  01A4                     l3948:	
  7343                           
  7344                           ;doprnt.c: 1400: if(width > c)
  7345  01A4  0020               	movlb	0	; select bank0
  7346  01A5  0851               	movf	sprintf@width+1,w
  7347  01A6  3A80               	xorlw	128
  7348  01A7  3C80               	sublw	128
  7349  01A8  1D03               	skipz
  7350  01A9  29AC               	goto	u4335
  7351  01AA  0850               	movf	sprintf@width,w
  7352  01AB  0254               	subwf	sprintf@c,w
  7353  01AC                     u4335:	
  7354  01AC  1803               	skipnc
  7355  01AD  29B7               	goto	l3952
  7356                           
  7357                           ;doprnt.c: 1401: width -= c;
  7358  01AE  0020               	movlb	0	; select bank0
  7359  01AF  0854               	movf	sprintf@c,w
  7360  01B0  00FE               	movwf	126
  7361  01B1  01FF               	clrf	127
  7362  01B2  087E               	movf	126,w
  7363  01B3  02D0               	subwf	sprintf@width,f
  7364  01B4  087F               	movf	127,w
  7365  01B5  3BD1               	subwfb	sprintf@width+1,f
  7366  01B6  29BA               	goto	l3954
  7367  01B7                     l3952:	
  7368                           
  7369                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  7370  01B7  0020               	movlb	0	; select bank0
  7371  01B8  01D0               	clrf	sprintf@width
  7372  01B9  01D1               	clrf	sprintf@width+1
  7373  01BA                     l3954:	
  7374                           
  7375                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  7376  01BA  0850               	movf	sprintf@width,w
  7377  01BB  0451               	iorwf	sprintf@width+1,w
  7378  01BC  1903               	btfsc	3,2
  7379  01BD  2A14               	goto	l3968
  7380                           
  7381                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  7382                           
  7383                           ;doprnt.c: 1448: do
  7384  01BE  3020               	movlw	32
  7385  01BF  00FF               	movwf	127
  7386  01C0  084F               	movf	sprintf@sp,w
  7387  01C1  0084               	movwf	4
  7388  01C2  3001               	movlw	1	; select bank2/3
  7389  01C3  0085               	movwf	5
  7390  01C4  087F               	movf	127,w
  7391  01C5  0080               	movwf	0
  7392  01C6  3001               	movlw	1
  7393  01C7  00FF               	movwf	127
  7394  01C8  087F               	movf	127,w
  7395  01C9  07CF               	addwf	sprintf@sp,f
  7396                           
  7397                           ;doprnt.c: 1450: while(--width);
  7398  01CA  30FF               	movlw	255
  7399  01CB  07D0               	addwf	sprintf@width,f
  7400  01CC  30FF               	movlw	255
  7401  01CD  3DD1               	addwfc	sprintf@width+1,f
  7402  01CE  29BA               	goto	l3954
  7403  01CF                     l3962:	
  7404                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  7405                           
  7406                           
  7407                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  7408  01CF  3000               	movlw	0
  7409  01D0  00B6               	movwf	___llmod@divisor+3
  7410  01D1  3000               	movlw	0
  7411  01D2  00B5               	movwf	___llmod@divisor+2
  7412  01D3  3000               	movlw	0
  7413  01D4  00B4               	movwf	___llmod@divisor+1
  7414  01D5  300A               	movlw	10
  7415  01D6  00B3               	movwf	___llmod@divisor
  7416  01D7  0853               	movf	sprintf@prec+1,w
  7417  01D8  0085               	movwf	5
  7418  01D9  0852               	movf	sprintf@prec,w
  7419  01DA  0084               	movwf	4
  7420  01DB  3584               	lslf	4,f
  7421  01DC  0D85               	rlf	5,f
  7422  01DD  3584               	lslf	4,f
  7423  01DE  0D85               	rlf	5,f
  7424  01DF  3000               	movlw	low (_dpowers| (0+32768))
  7425  01E0  0784               	addwf	4,f
  7426  01E1  3090               	movlw	high (_dpowers| (0+32768))
  7427  01E2  3D85               	addwfc	5,f
  7428  01E3  3F00               	moviw [0]fsr0
  7429  01E4  00A6               	movwf	___lldiv@divisor
  7430  01E5  3F01               	moviw [1]fsr0
  7431  01E6  00A7               	movwf	___lldiv@divisor+1
  7432  01E7  3F02               	moviw [2]fsr0
  7433  01E8  00A8               	movwf	___lldiv@divisor+2
  7434  01E9  3F03               	moviw [3]fsr0
  7435  01EA  00A9               	movwf	___lldiv@divisor+3
  7436  01EB  084E               	movf	sprintf@val+3,w
  7437  01EC  00AD               	movwf	___lldiv@dividend+3
  7438  01ED  084D               	movf	sprintf@val+2,w
  7439  01EE  00AC               	movwf	___lldiv@dividend+2
  7440  01EF  084C               	movf	sprintf@val+1,w
  7441  01F0  00AB               	movwf	___lldiv@dividend+1
  7442  01F1  084B               	movf	sprintf@val,w
  7443  01F2  00AA               	movwf	___lldiv@dividend
  7444  01F3  318C  243F  3180   	fcall	___lldiv
  7445  01F6  0020               	movlb	0	; select bank0
  7446  01F7  0829               	movf	?___lldiv+3,w
  7447  01F8  00BA               	movwf	___llmod@dividend+3
  7448  01F9  0828               	movf	?___lldiv+2,w
  7449  01FA  00B9               	movwf	___llmod@dividend+2
  7450  01FB  0827               	movf	?___lldiv+1,w
  7451  01FC  00B8               	movwf	___llmod@dividend+1
  7452  01FD  0826               	movf	?___lldiv,w
  7453  01FE  00B7               	movwf	___llmod@dividend
  7454  01FF  318B  2372  3180   	fcall	___llmod
  7455  0202  0020               	movlb	0	; select bank0
  7456  0203  0833               	movf	?___llmod,w
  7457  0204  3E30               	addlw	48
  7458  0205  00FF               	movwf	127
  7459  0206  087F               	movf	127,w
  7460  0207  00D4               	movwf	sprintf@c
  7461                           
  7462                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7463  0208  0854               	movf	sprintf@c,w
  7464  0209  00FF               	movwf	127
  7465  020A  084F               	movf	sprintf@sp,w
  7466  020B  0084               	movwf	4
  7467  020C  3001               	movlw	1	; select bank2/3
  7468  020D  0085               	movwf	5
  7469  020E  087F               	movf	127,w
  7470  020F  0080               	movwf	0
  7471  0210  3001               	movlw	1
  7472  0211  00FF               	movwf	127
  7473  0212  087F               	movf	127,w
  7474  0213  07CF               	addwf	sprintf@sp,f
  7475  0214                     l3968:	
  7476  0214  30FF               	movlw	255
  7477  0215  07D2               	addwf	sprintf@prec,f
  7478  0216  30FF               	movlw	255
  7479  0217  3DD3               	addwfc	sprintf@prec+1,f
  7480  0218  0A52               	incf	sprintf@prec,w
  7481  0219  1D03               	skipz
  7482  021A  29CF               	goto	l3962
  7483  021B  0A53               	incf	sprintf@prec+1,w
  7484  021C  1903               	btfsc	3,2
  7485  021D  285E               	goto	l3970
  7486  021E  29CF               	goto	l3962
  7487  021F                     l3972:	
  7488                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7489                           
  7490                           
  7491                           ;doprnt.c: 1557: *sp = 0;
  7492  021F  084F               	movf	sprintf@sp,w
  7493  0220  0084               	movwf	4
  7494  0221  3001               	movlw	1	; select bank2/3
  7495  0222  0085               	movwf	5
  7496  0223  0180               	clrf	0
  7497  0224  0008               	return
  7498  0225                     __end_of_sprintf:	
  7499                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7500                           
  7501                           
  7502                           	psect	text27
  7503  17CE                     __ptext27:	
  7504 ;; *************** function _isdigit *****************
  7505 ;; Defined at:
  7506 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7507 ;; Parameters:    Size  Location     Type
  7508 ;;  c               1    wreg     unsigned char 
  7509 ;; Auto vars:     Size  Location     Type
  7510 ;;  c               1    1[COMMON] unsigned char 
  7511 ;; Return value:  Size  Location     Type
  7512 ;;		None               void
  7513 ;; Registers used:
  7514 ;;		wreg, status,2, status,0
  7515 ;; Tracked objects:
  7516 ;;		On entry : 0/0
  7517 ;;		On exit  : 0/0
  7518 ;;		Unchanged: 0/0
  7519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7521 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7523 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7524 ;;Total ram usage:        2 bytes
  7525 ;; Hardware stack levels used:    1
  7526 ;; Hardware stack levels required when called:    7
  7527 ;; This function calls:
  7528 ;;		Nothing
  7529 ;; This function is called by:
  7530 ;;		_sprintf
  7531 ;; This function uses a non-reentrant model
  7532 ;;
  7533                           
  7534                           
  7535                           ;psect for function _isdigit
  7536  17CE                     _isdigit:	
  7537                           
  7538                           ;incstack = 0
  7539                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7540                           ;isdigit@c stored from wreg
  7541  17CE  00F1               	movwf	isdigit@c
  7542  17CF  01F0               	clrf	_isdigit$1873
  7543  17D0  303A               	movlw	58
  7544  17D1  0271               	subwf	isdigit@c,w
  7545  17D2  1803               	skipnc
  7546  17D3  2FDA               	goto	l3658
  7547  17D4  3030               	movlw	48
  7548  17D5  0271               	subwf	isdigit@c,w
  7549  17D6  1C03               	skipc
  7550  17D7  2FDA               	goto	l3658
  7551  17D8  01F0               	clrf	_isdigit$1873
  7552  17D9  0AF0               	incf	_isdigit$1873,f
  7553  17DA                     l3658:	
  7554  17DA  0C70               	rrf	_isdigit$1873,w
  7555  17DB  0008               	return
  7556  17DC                     __end_of_isdigit:	
  7557                           
  7558                           	psect	text28
  7559  0865                     __ptext28:	
  7560 ;; *************** function ___wmul *****************
  7561 ;; Defined at:
  7562 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7563 ;; Parameters:    Size  Location     Type
  7564 ;;  multiplier      2    0[COMMON] unsigned int 
  7565 ;;  multiplicand    2    2[COMMON] unsigned int 
  7566 ;; Auto vars:     Size  Location     Type
  7567 ;;  product         2    6[BANK0 ] unsigned int 
  7568 ;; Return value:  Size  Location     Type
  7569 ;;                  2    0[COMMON] unsigned int 
  7570 ;; Registers used:
  7571 ;;		wreg, status,2, status,0
  7572 ;; Tracked objects:
  7573 ;;		On entry : 0/0
  7574 ;;		On exit  : 0/0
  7575 ;;		Unchanged: 0/0
  7576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7577 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7578 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7580 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7581 ;;Total ram usage:        6 bytes
  7582 ;; Hardware stack levels used:    1
  7583 ;; Hardware stack levels required when called:    7
  7584 ;; This function calls:
  7585 ;;		Nothing
  7586 ;; This function is called by:
  7587 ;;		_sprintf
  7588 ;; This function uses a non-reentrant model
  7589 ;;
  7590                           
  7591                           
  7592                           ;psect for function ___wmul
  7593  0865                     ___wmul:	
  7594                           
  7595                           ;incstack = 0
  7596                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7597  0865  0020               	movlb	0	; select bank0
  7598  0866  01A6               	clrf	___wmul@product
  7599  0867  01A7               	clrf	___wmul@product+1
  7600  0868                     l3664:	
  7601  0868  1C70               	btfss	___wmul@multiplier,0
  7602  0869  286F               	goto	l488
  7603  086A  0872               	movf	___wmul@multiplicand,w
  7604  086B  0020               	movlb	0	; select bank0
  7605  086C  07A6               	addwf	___wmul@product,f
  7606  086D  0873               	movf	___wmul@multiplicand+1,w
  7607  086E  3DA7               	addwfc	___wmul@product+1,f
  7608  086F                     l488:	
  7609  086F  3001               	movlw	1
  7610  0870                     u3675:	
  7611  0870  35F2               	lslf	___wmul@multiplicand,f
  7612  0871  0DF3               	rlf	___wmul@multiplicand+1,f
  7613  0872  0B89               	decfsz	9,f
  7614  0873  2870               	goto	u3675
  7615  0874  3001               	movlw	1
  7616  0875                     u3685:	
  7617  0875  36F1               	lsrf	___wmul@multiplier+1,f
  7618  0876  0CF0               	rrf	___wmul@multiplier,f
  7619  0877  0B89               	decfsz	9,f
  7620  0878  2875               	goto	u3685
  7621  0879  0870               	movf	___wmul@multiplier,w
  7622  087A  0471               	iorwf	___wmul@multiplier+1,w
  7623  087B  1D03               	btfss	3,2
  7624  087C  2868               	goto	l3664
  7625  087D  0020               	movlb	0	; select bank0
  7626  087E  0827               	movf	___wmul@product+1,w
  7627  087F  00F1               	movwf	?___wmul+1
  7628  0880  0826               	movf	___wmul@product,w
  7629  0881  00F0               	movwf	?___wmul
  7630  0882  0008               	return
  7631  0883                     __end_of___wmul:	
  7632                           
  7633                           	psect	text29
  7634  0B72                     __ptext29:	
  7635 ;; *************** function ___llmod *****************
  7636 ;; Defined at:
  7637 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  7638 ;; Parameters:    Size  Location     Type
  7639 ;;  divisor         4   19[BANK0 ] unsigned long 
  7640 ;;  dividend        4   23[BANK0 ] unsigned long 
  7641 ;; Auto vars:     Size  Location     Type
  7642 ;;  counter         1    0[COMMON] unsigned char 
  7643 ;; Return value:  Size  Location     Type
  7644 ;;                  4   19[BANK0 ] unsigned long 
  7645 ;; Registers used:
  7646 ;;		wreg, status,2, status,0, btemp+11
  7647 ;; Tracked objects:
  7648 ;;		On entry : 0/0
  7649 ;;		On exit  : 0/0
  7650 ;;		Unchanged: 0/0
  7651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7652 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7653 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7655 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7656 ;;Total ram usage:        9 bytes
  7657 ;; Hardware stack levels used:    1
  7658 ;; Hardware stack levels required when called:    7
  7659 ;; This function calls:
  7660 ;;		Nothing
  7661 ;; This function is called by:
  7662 ;;		_sprintf
  7663 ;; This function uses a non-reentrant model
  7664 ;;
  7665                           
  7666                           
  7667                           ;psect for function ___llmod
  7668  0B72                     ___llmod:	
  7669                           
  7670                           ;incstack = 0
  7671                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+11]
  7672  0B72  0020               	movlb	0	; select bank0
  7673  0B73  0836               	movf	___llmod@divisor+3,w
  7674  0B74  0435               	iorwf	___llmod@divisor+2,w
  7675  0B75  0434               	iorwf	___llmod@divisor+1,w
  7676  0B76  0433               	iorwf	___llmod@divisor,w
  7677  0B77  1903               	skipnz
  7678  0B78  2BAC               	goto	l3796
  7679  0B79  01F0               	clrf	___llmod@counter
  7680  0B7A  0AF0               	incf	___llmod@counter,f
  7681  0B7B                     l3786:	
  7682  0B7B  1BB6               	btfsc	___llmod@divisor+3,7
  7683  0B7C  2B89               	goto	l3788
  7684  0B7D  3001               	movlw	1
  7685  0B7E                     u4015:	
  7686  0B7E  35B3               	lslf	___llmod@divisor,f
  7687  0B7F  0DB4               	rlf	___llmod@divisor+1,f
  7688  0B80  0DB5               	rlf	___llmod@divisor+2,f
  7689  0B81  0DB6               	rlf	___llmod@divisor+3,f
  7690  0B82  0B89               	decfsz	9,f
  7691  0B83  2B7E               	goto	u4015
  7692  0B84  3001               	movlw	1
  7693  0B85  00FF               	movwf	127
  7694  0B86  087F               	movf	127,w
  7695  0B87  07F0               	addwf	___llmod@counter,f
  7696  0B88  2B7B               	goto	l3786
  7697  0B89                     l3788:	
  7698  0B89  0836               	movf	___llmod@divisor+3,w
  7699  0B8A  023A               	subwf	___llmod@dividend+3,w
  7700  0B8B  1D03               	skipz
  7701  0B8C  2B97               	goto	u4035
  7702  0B8D  0835               	movf	___llmod@divisor+2,w
  7703  0B8E  0239               	subwf	___llmod@dividend+2,w
  7704  0B8F  1D03               	skipz
  7705  0B90  2B97               	goto	u4035
  7706  0B91  0834               	movf	___llmod@divisor+1,w
  7707  0B92  0238               	subwf	___llmod@dividend+1,w
  7708  0B93  1D03               	skipz
  7709  0B94  2B97               	goto	u4035
  7710  0B95  0833               	movf	___llmod@divisor,w
  7711  0B96  0237               	subwf	___llmod@dividend,w
  7712  0B97                     u4035:	
  7713  0B97  1C03               	skipc
  7714  0B98  2BA1               	goto	l3792
  7715  0B99  0833               	movf	___llmod@divisor,w
  7716  0B9A  02B7               	subwf	___llmod@dividend,f
  7717  0B9B  0834               	movf	___llmod@divisor+1,w
  7718  0B9C  3BB8               	subwfb	___llmod@dividend+1,f
  7719  0B9D  0835               	movf	___llmod@divisor+2,w
  7720  0B9E  3BB9               	subwfb	___llmod@dividend+2,f
  7721  0B9F  0836               	movf	___llmod@divisor+3,w
  7722  0BA0  3BBA               	subwfb	___llmod@dividend+3,f
  7723  0BA1                     l3792:	
  7724  0BA1  3001               	movlw	1
  7725  0BA2                     u4045:	
  7726  0BA2  36B6               	lsrf	___llmod@divisor+3,f
  7727  0BA3  0CB5               	rrf	___llmod@divisor+2,f
  7728  0BA4  0CB4               	rrf	___llmod@divisor+1,f
  7729  0BA5  0CB3               	rrf	___llmod@divisor,f
  7730  0BA6  0B89               	decfsz	9,f
  7731  0BA7  2BA2               	goto	u4045
  7732  0BA8  3001               	movlw	1
  7733  0BA9  02F0               	subwf	___llmod@counter,f
  7734  0BAA  1D03               	btfss	3,2
  7735  0BAB  2B89               	goto	l3788
  7736  0BAC                     l3796:	
  7737  0BAC  083A               	movf	___llmod@dividend+3,w
  7738  0BAD  00B6               	movwf	?___llmod+3
  7739  0BAE  0839               	movf	___llmod@dividend+2,w
  7740  0BAF  00B5               	movwf	?___llmod+2
  7741  0BB0  0838               	movf	___llmod@dividend+1,w
  7742  0BB1  00B4               	movwf	?___llmod+1
  7743  0BB2  0837               	movf	___llmod@dividend,w
  7744  0BB3  00B3               	movwf	?___llmod
  7745  0BB4  0008               	return
  7746  0BB5                     __end_of___llmod:	
  7747                           
  7748                           	psect	text30
  7749  0C3F                     __ptext30:	
  7750 ;; *************** function ___lldiv *****************
  7751 ;; Defined at:
  7752 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  7753 ;; Parameters:    Size  Location     Type
  7754 ;;  divisor         4    6[BANK0 ] unsigned long 
  7755 ;;  dividend        4   10[BANK0 ] unsigned long 
  7756 ;; Auto vars:     Size  Location     Type
  7757 ;;  quotient        4   14[BANK0 ] unsigned long 
  7758 ;;  counter         1   18[BANK0 ] unsigned char 
  7759 ;; Return value:  Size  Location     Type
  7760 ;;                  4    6[BANK0 ] unsigned long 
  7761 ;; Registers used:
  7762 ;;		wreg, status,2, status,0, btemp+11
  7763 ;; Tracked objects:
  7764 ;;		On entry : 0/0
  7765 ;;		On exit  : 0/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7768 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;Total ram usage:       13 bytes
  7773 ;; Hardware stack levels used:    1
  7774 ;; Hardware stack levels required when called:    7
  7775 ;; This function calls:
  7776 ;;		Nothing
  7777 ;; This function is called by:
  7778 ;;		_sprintf
  7779 ;; This function uses a non-reentrant model
  7780 ;;
  7781                           
  7782                           
  7783                           ;psect for function ___lldiv
  7784  0C3F                     ___lldiv:	
  7785                           
  7786                           ;incstack = 0
  7787                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+11]
  7788  0C3F  3000               	movlw	0
  7789  0C40  0020               	movlb	0	; select bank0
  7790  0C41  00B1               	movwf	___lldiv@quotient+3
  7791  0C42  3000               	movlw	0
  7792  0C43  00B0               	movwf	___lldiv@quotient+2
  7793  0C44  3000               	movlw	0
  7794  0C45  00AF               	movwf	___lldiv@quotient+1
  7795  0C46  3000               	movlw	0
  7796  0C47  00AE               	movwf	___lldiv@quotient
  7797  0C48  0829               	movf	___lldiv@divisor+3,w
  7798  0C49  0428               	iorwf	___lldiv@divisor+2,w
  7799  0C4A  0427               	iorwf	___lldiv@divisor+1,w
  7800  0C4B  0426               	iorwf	___lldiv@divisor,w
  7801  0C4C  1903               	skipnz
  7802  0C4D  2C89               	goto	l3698
  7803  0C4E  01B2               	clrf	___lldiv@counter
  7804  0C4F  0AB2               	incf	___lldiv@counter,f
  7805  0C50                     l3684:	
  7806  0C50  1BA9               	btfsc	___lldiv@divisor+3,7
  7807  0C51  2C5E               	goto	l3686
  7808  0C52  3001               	movlw	1
  7809  0C53                     u3715:	
  7810  0C53  35A6               	lslf	___lldiv@divisor,f
  7811  0C54  0DA7               	rlf	___lldiv@divisor+1,f
  7812  0C55  0DA8               	rlf	___lldiv@divisor+2,f
  7813  0C56  0DA9               	rlf	___lldiv@divisor+3,f
  7814  0C57  0B89               	decfsz	9,f
  7815  0C58  2C53               	goto	u3715
  7816  0C59  3001               	movlw	1
  7817  0C5A  00FF               	movwf	127
  7818  0C5B  087F               	movf	127,w
  7819  0C5C  07B2               	addwf	___lldiv@counter,f
  7820  0C5D  2C50               	goto	l3684
  7821  0C5E                     l3686:	
  7822  0C5E  3001               	movlw	1
  7823  0C5F                     u3735:	
  7824  0C5F  35AE               	lslf	___lldiv@quotient,f
  7825  0C60  0DAF               	rlf	___lldiv@quotient+1,f
  7826  0C61  0DB0               	rlf	___lldiv@quotient+2,f
  7827  0C62  0DB1               	rlf	___lldiv@quotient+3,f
  7828  0C63  0B89               	decfsz	9,f
  7829  0C64  2C5F               	goto	u3735
  7830  0C65  0829               	movf	___lldiv@divisor+3,w
  7831  0C66  022D               	subwf	___lldiv@dividend+3,w
  7832  0C67  1D03               	skipz
  7833  0C68  2C73               	goto	u3745
  7834  0C69  0828               	movf	___lldiv@divisor+2,w
  7835  0C6A  022C               	subwf	___lldiv@dividend+2,w
  7836  0C6B  1D03               	skipz
  7837  0C6C  2C73               	goto	u3745
  7838  0C6D  0827               	movf	___lldiv@divisor+1,w
  7839  0C6E  022B               	subwf	___lldiv@dividend+1,w
  7840  0C6F  1D03               	skipz
  7841  0C70  2C73               	goto	u3745
  7842  0C71  0826               	movf	___lldiv@divisor,w
  7843  0C72  022A               	subwf	___lldiv@dividend,w
  7844  0C73                     u3745:	
  7845  0C73  1C03               	skipc
  7846  0C74  2C7E               	goto	l3694
  7847  0C75  0826               	movf	___lldiv@divisor,w
  7848  0C76  02AA               	subwf	___lldiv@dividend,f
  7849  0C77  0827               	movf	___lldiv@divisor+1,w
  7850  0C78  3BAB               	subwfb	___lldiv@dividend+1,f
  7851  0C79  0828               	movf	___lldiv@divisor+2,w
  7852  0C7A  3BAC               	subwfb	___lldiv@dividend+2,f
  7853  0C7B  0829               	movf	___lldiv@divisor+3,w
  7854  0C7C  3BAD               	subwfb	___lldiv@dividend+3,f
  7855  0C7D  142E               	bsf	___lldiv@quotient,0
  7856  0C7E                     l3694:	
  7857  0C7E  3001               	movlw	1
  7858  0C7F                     u3755:	
  7859  0C7F  36A9               	lsrf	___lldiv@divisor+3,f
  7860  0C80  0CA8               	rrf	___lldiv@divisor+2,f
  7861  0C81  0CA7               	rrf	___lldiv@divisor+1,f
  7862  0C82  0CA6               	rrf	___lldiv@divisor,f
  7863  0C83  0B89               	decfsz	9,f
  7864  0C84  2C7F               	goto	u3755
  7865  0C85  3001               	movlw	1
  7866  0C86  02B2               	subwf	___lldiv@counter,f
  7867  0C87  1D03               	btfss	3,2
  7868  0C88  2C5E               	goto	l3686
  7869  0C89                     l3698:	
  7870  0C89  0831               	movf	___lldiv@quotient+3,w
  7871  0C8A  00A9               	movwf	?___lldiv+3
  7872  0C8B  0830               	movf	___lldiv@quotient+2,w
  7873  0C8C  00A8               	movwf	?___lldiv+2
  7874  0C8D  082F               	movf	___lldiv@quotient+1,w
  7875  0C8E  00A7               	movwf	?___lldiv+1
  7876  0C8F  082E               	movf	___lldiv@quotient,w
  7877  0C90  00A6               	movwf	?___lldiv
  7878  0C91  0008               	return
  7879  0C92                     __end_of___lldiv:	
  7880                           
  7881                           	psect	text31
  7882  09AC                     __ptext31:	
  7883 ;; *************** function ___lltoft *****************
  7884 ;; Defined at:
  7885 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  7886 ;; Parameters:    Size  Location     Type
  7887 ;;  c               4    0[COMMON] unsigned long 
  7888 ;; Auto vars:     Size  Location     Type
  7889 ;;  exp             1   11[BANK0 ] unsigned char 
  7890 ;; Return value:  Size  Location     Type
  7891 ;;                  3    0[COMMON] float 
  7892 ;; Registers used:
  7893 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  7894 ;; Tracked objects:
  7895 ;;		On entry : 0/0
  7896 ;;		On exit  : 0/0
  7897 ;;		Unchanged: 0/0
  7898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7899 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7900 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7902 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7903 ;;Total ram usage:        5 bytes
  7904 ;; Hardware stack levels used:    1
  7905 ;; Hardware stack levels required when called:    8
  7906 ;; This function calls:
  7907 ;;		___ftpack
  7908 ;; This function is called by:
  7909 ;;		_loop
  7910 ;;		_ftoa
  7911 ;; This function uses a non-reentrant model
  7912 ;;
  7913                           
  7914                           
  7915                           ;psect for function ___lltoft
  7916  09AC                     ___lltoft:	
  7917                           
  7918                           ;incstack = 0
  7919                           ; Regs used in ___lltoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  7920  09AC  308E               	movlw	142
  7921  09AD  00FF               	movwf	127
  7922  09AE  087F               	movf	127,w
  7923  09AF  0020               	movlb	0	; select bank0
  7924  09B0  00AB               	movwf	___lltoft@exp
  7925  09B1                     l4132:	
  7926  09B1  30FF               	movlw	255
  7927  09B2  0573               	andwf	___lltoft@c+3,w
  7928  09B3  1903               	btfsc	3,2
  7929  09B4  29C1               	goto	l4134
  7930  09B5  3001               	movlw	1
  7931  09B6                     u4675:	
  7932  09B6  36F3               	lsrf	___lltoft@c+3,f
  7933  09B7  0CF2               	rrf	___lltoft@c+2,f
  7934  09B8  0CF1               	rrf	___lltoft@c+1,f
  7935  09B9  0CF0               	rrf	___lltoft@c,f
  7936  09BA  0B89               	decfsz	9,f
  7937  09BB  29B6               	goto	u4675
  7938  09BC  3001               	movlw	1
  7939  09BD  00FF               	movwf	127
  7940  09BE  087F               	movf	127,w
  7941  09BF  07AB               	addwf	___lltoft@exp,f
  7942  09C0  29B1               	goto	l4132
  7943  09C1                     l4134:	
  7944  09C1  0870               	movf	___lltoft@c,w
  7945  09C2  00A6               	movwf	___ftpack@arg
  7946  09C3  0871               	movf	___lltoft@c+1,w
  7947  09C4  00A7               	movwf	___ftpack@arg+1
  7948  09C5  0872               	movf	___lltoft@c+2,w
  7949  09C6  00A8               	movwf	___ftpack@arg+2
  7950  09C7  082B               	movf	___lltoft@exp,w
  7951  09C8  00FF               	movwf	127
  7952  09C9  087F               	movf	127,w
  7953  09CA  00A9               	movwf	___ftpack@exp
  7954  09CB  01AA               	clrf	___ftpack@sign
  7955  09CC  318C  2492         	fcall	___ftpack
  7956  09CE  0020               	movlb	0	; select bank0
  7957  09CF  0826               	movf	?___ftpack,w
  7958  09D0  00F0               	movwf	?___lltoft
  7959  09D1  0827               	movf	?___ftpack+1,w
  7960  09D2  00F1               	movwf	?___lltoft+1
  7961  09D3  0828               	movf	?___ftpack+2,w
  7962  09D4  00F2               	movwf	?___lltoft+2
  7963  09D5  0008               	return
  7964  09D6                     __end_of___lltoft:	
  7965                           
  7966                           	psect	text32
  7967  0D7D                     __ptext32:	
  7968 ;; *************** function ___fttol *****************
  7969 ;; Defined at:
  7970 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  7971 ;; Parameters:    Size  Location     Type
  7972 ;;  f1              3   56[BANK0 ] float 
  7973 ;; Auto vars:     Size  Location     Type
  7974 ;;  lval            4   61[BANK0 ] unsigned long 
  7975 ;;  exp1            1   65[BANK0 ] unsigned char 
  7976 ;;  sign1           1   60[BANK0 ] unsigned char 
  7977 ;; Return value:  Size  Location     Type
  7978 ;;                  4   56[BANK0 ] long 
  7979 ;; Registers used:
  7980 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  7981 ;; Tracked objects:
  7982 ;;		On entry : 0/0
  7983 ;;		On exit  : 0/0
  7984 ;;		Unchanged: 0/0
  7985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7986 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7987 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7989 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7990 ;;Total ram usage:       10 bytes
  7991 ;; Hardware stack levels used:    1
  7992 ;; Hardware stack levels required when called:    7
  7993 ;; This function calls:
  7994 ;;		Nothing
  7995 ;; This function is called by:
  7996 ;;		_ftoa
  7997 ;; This function uses a non-reentrant model
  7998 ;;
  7999                           
  8000                           
  8001                           ;psect for function ___fttol
  8002  0D7D                     ___fttol:	
  8003                           
  8004                           ;incstack = 0
  8005                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+9-btemp+11]
  8006  0D7D  0020               	movlb	0	; select bank0
  8007  0D7E  0858               	movf	___fttol@f1,w
  8008  0D7F  00FD               	movwf	125
  8009  0D80  0859               	movf	___fttol@f1+1,w
  8010  0D81  00FE               	movwf	126
  8011  0D82  085A               	movf	___fttol@f1+2,w
  8012  0D83  00FF               	movwf	127
  8013  0D84  1003               	clrc
  8014  0D85  0D7E               	rlf	126,w
  8015  0D86  0D7F               	rlf	127,w
  8016  0D87  00FF               	movwf	127
  8017  0D88  087F               	movf	127,w
  8018  0D89  00E1               	movwf	___fttol@exp1
  8019  0D8A  0861               	movf	___fttol@exp1,w
  8020  0D8B  1D03               	btfss	3,2
  8021  0D8C  2D96               	goto	l4088
  8022  0D8D  3000               	movlw	0
  8023  0D8E  00DB               	movwf	?___fttol+3
  8024  0D8F  3000               	movlw	0
  8025  0D90  00DA               	movwf	?___fttol+2
  8026  0D91  3000               	movlw	0
  8027  0D92  00D9               	movwf	?___fttol+1
  8028  0D93  3000               	movlw	0
  8029  0D94  00D8               	movwf	?___fttol
  8030  0D95  0008               	return
  8031  0D96                     l4088:	
  8032  0D96  0858               	movf	___fttol@f1,w
  8033  0D97  00FD               	movwf	125
  8034  0D98  0859               	movf	___fttol@f1+1,w
  8035  0D99  00FE               	movwf	126
  8036  0D9A  085A               	movf	___fttol@f1+2,w
  8037  0D9B  00FF               	movwf	127
  8038  0D9C  3017               	movlw	23
  8039  0D9D                     u4585:	
  8040  0D9D  36FF               	lsrf	127,f
  8041  0D9E  0CFE               	rrf	126,f
  8042  0D9F  0CFD               	rrf	125,f
  8043  0DA0  0B89               	decfsz	9,f
  8044  0DA1  2D9D               	goto	u4585
  8045  0DA2  087D               	movf	125,w
  8046  0DA3  00FF               	movwf	127
  8047  0DA4  087F               	movf	127,w
  8048  0DA5  00DC               	movwf	___fttol@sign1
  8049  0DA6  17D9               	bsf	___fttol@f1+1,7
  8050  0DA7  30FF               	movlw	255
  8051  0DA8  05D8               	andwf	___fttol@f1,f
  8052  0DA9  30FF               	movlw	255
  8053  0DAA  05D9               	andwf	___fttol@f1+1,f
  8054  0DAB  3000               	movlw	0
  8055  0DAC  05DA               	andwf	___fttol@f1+2,f
  8056  0DAD  0858               	movf	___fttol@f1,w
  8057  0DAE  00DD               	movwf	___fttol@lval
  8058  0DAF  0859               	movf	___fttol@f1+1,w
  8059  0DB0  00DE               	movwf	___fttol@lval+1
  8060  0DB1  085A               	movf	___fttol@f1+2,w
  8061  0DB2  00DF               	movwf	___fttol@lval+2
  8062  0DB3  01E0               	clrf	___fttol@lval+3
  8063  0DB4  308E               	movlw	142
  8064  0DB5  02E1               	subwf	___fttol@exp1,f
  8065  0DB6  1FE1               	btfss	___fttol@exp1,7
  8066  0DB7  2DD4               	goto	l4110
  8067  0DB8  0861               	movf	___fttol@exp1,w
  8068  0DB9  3A80               	xorlw	128
  8069  0DBA  3E8F               	addlw	143
  8070  0DBB  1803               	skipnc
  8071  0DBC  2DC6               	goto	l4106
  8072  0DBD  3000               	movlw	0
  8073  0DBE  00DB               	movwf	?___fttol+3
  8074  0DBF  3000               	movlw	0
  8075  0DC0  00DA               	movwf	?___fttol+2
  8076  0DC1  3000               	movlw	0
  8077  0DC2  00D9               	movwf	?___fttol+1
  8078  0DC3  3000               	movlw	0
  8079  0DC4  00D8               	movwf	?___fttol
  8080  0DC5  0008               	return
  8081  0DC6                     l4106:	
  8082  0DC6  3001               	movlw	1
  8083  0DC7                     u4615:	
  8084  0DC7  36E0               	lsrf	___fttol@lval+3,f
  8085  0DC8  0CDF               	rrf	___fttol@lval+2,f
  8086  0DC9  0CDE               	rrf	___fttol@lval+1,f
  8087  0DCA  0CDD               	rrf	___fttol@lval,f
  8088  0DCB  0B89               	decfsz	9,f
  8089  0DCC  2DC7               	goto	u4615
  8090  0DCD  3001               	movlw	1
  8091  0DCE  00FF               	movwf	127
  8092  0DCF  087F               	movf	127,w
  8093  0DD0  07E1               	addwf	___fttol@exp1,f
  8094  0DD1  1903               	btfsc	3,2
  8095  0DD2  2DED               	goto	l4118
  8096  0DD3  2DC6               	goto	l4106
  8097  0DD4                     l4110:	
  8098  0DD4  3018               	movlw	24
  8099  0DD5  0261               	subwf	___fttol@exp1,w
  8100  0DD6  1C03               	skipc
  8101  0DD7  2DEA               	goto	l782
  8102  0DD8  3000               	movlw	0
  8103  0DD9  00DB               	movwf	?___fttol+3
  8104  0DDA  3000               	movlw	0
  8105  0DDB  00DA               	movwf	?___fttol+2
  8106  0DDC  3000               	movlw	0
  8107  0DDD  00D9               	movwf	?___fttol+1
  8108  0DDE  3000               	movlw	0
  8109  0DDF  00D8               	movwf	?___fttol
  8110  0DE0  0008               	return
  8111  0DE1                     l4116:	
  8112  0DE1  3001               	movlw	1
  8113  0DE2                     u4645:	
  8114  0DE2  35DD               	lslf	___fttol@lval,f
  8115  0DE3  0DDE               	rlf	___fttol@lval+1,f
  8116  0DE4  0DDF               	rlf	___fttol@lval+2,f
  8117  0DE5  0DE0               	rlf	___fttol@lval+3,f
  8118  0DE6  0B89               	decfsz	9,f
  8119  0DE7  2DE2               	goto	u4645
  8120  0DE8  3001               	movlw	1
  8121  0DE9  02E1               	subwf	___fttol@exp1,f
  8122  0DEA                     l782:	
  8123  0DEA  0861               	movf	___fttol@exp1,w
  8124  0DEB  1D03               	btfss	3,2
  8125  0DEC  2DE1               	goto	l4116
  8126  0DED                     l4118:	
  8127  0DED  085C               	movf	___fttol@sign1,w
  8128  0DEE  1903               	btfsc	3,2
  8129  0DEF  2DFB               	goto	l4122
  8130  0DF0  09DD               	comf	___fttol@lval,f
  8131  0DF1  09DE               	comf	___fttol@lval+1,f
  8132  0DF2  09DF               	comf	___fttol@lval+2,f
  8133  0DF3  09E0               	comf	___fttol@lval+3,f
  8134  0DF4  0ADD               	incf	___fttol@lval,f
  8135  0DF5  1903               	skipnz
  8136  0DF6  0ADE               	incf	___fttol@lval+1,f
  8137  0DF7  1903               	skipnz
  8138  0DF8  0ADF               	incf	___fttol@lval+2,f
  8139  0DF9  1903               	skipnz
  8140  0DFA  0AE0               	incf	___fttol@lval+3,f
  8141  0DFB                     l4122:	
  8142  0DFB  0860               	movf	___fttol@lval+3,w
  8143  0DFC  00DB               	movwf	?___fttol+3
  8144  0DFD  085F               	movf	___fttol@lval+2,w
  8145  0DFE  00DA               	movwf	?___fttol+2
  8146  0DFF  085E               	movf	___fttol@lval+1,w
  8147  0E00  00D9               	movwf	?___fttol+1
  8148  0E01  085D               	movf	___fttol@lval,w
  8149  0E02  00D8               	movwf	?___fttol
  8150  0E03  0008               	return
  8151  0E04                     __end_of___fttol:	
  8152                           
  8153                           	psect	text33
  8154  0847                     __ptext33:	
  8155 ;; *************** function ___ftsub *****************
  8156 ;; Defined at:
  8157 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  8158 ;; Parameters:    Size  Location     Type
  8159 ;;  f2              3   21[BANK0 ] float 
  8160 ;;  f1              3   24[BANK0 ] float 
  8161 ;; Auto vars:     Size  Location     Type
  8162 ;;		None
  8163 ;; Return value:  Size  Location     Type
  8164 ;;                  3   21[BANK0 ] float 
  8165 ;; Registers used:
  8166 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8167 ;; Tracked objects:
  8168 ;;		On entry : 0/0
  8169 ;;		On exit  : 0/0
  8170 ;;		Unchanged: 0/0
  8171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8172 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8175 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8176 ;;Total ram usage:        6 bytes
  8177 ;; Hardware stack levels used:    1
  8178 ;; Hardware stack levels required when called:    9
  8179 ;; This function calls:
  8180 ;;		___ftadd
  8181 ;; This function is called by:
  8182 ;;		_ftoa
  8183 ;; This function uses a non-reentrant model
  8184 ;;
  8185                           
  8186                           
  8187                           ;psect for function ___ftsub
  8188  0847                     ___ftsub:	
  8189                           
  8190                           ;incstack = 0
  8191                           ; Regs used in ___ftsub: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8192  0847  0020               	movlb	0	; select bank0
  8193  0848  0837               	movf	___ftsub@f2+2,w
  8194  0849  0436               	iorwf	___ftsub@f2+1,w
  8195  084A  0435               	iorwf	___ftsub@f2,w
  8196  084B  1903               	skipnz
  8197  084C  284F               	goto	l4078
  8198  084D  3080               	movlw	128
  8199  084E  06B7               	xorwf	___ftsub@f2+2,f
  8200  084F                     l4078:	
  8201  084F  0838               	movf	___ftsub@f1,w
  8202  0850  00AB               	movwf	___ftadd@f1
  8203  0851  0839               	movf	___ftsub@f1+1,w
  8204  0852  00AC               	movwf	___ftadd@f1+1
  8205  0853  083A               	movf	___ftsub@f1+2,w
  8206  0854  00AD               	movwf	___ftadd@f1+2
  8207  0855  0835               	movf	___ftsub@f2,w
  8208  0856  00AE               	movwf	___ftadd@f2
  8209  0857  0836               	movf	___ftsub@f2+1,w
  8210  0858  00AF               	movwf	___ftadd@f2+1
  8211  0859  0837               	movf	___ftsub@f2+2,w
  8212  085A  00B0               	movwf	___ftadd@f2+2
  8213  085B  3184  2473         	fcall	___ftadd
  8214  085D  0020               	movlb	0	; select bank0
  8215  085E  082B               	movf	?___ftadd,w
  8216  085F  00B5               	movwf	?___ftsub
  8217  0860  082C               	movf	?___ftadd+1,w
  8218  0861  00B6               	movwf	?___ftsub+1
  8219  0862  082D               	movf	?___ftadd+2,w
  8220  0863  00B7               	movwf	?___ftsub+2
  8221  0864  0008               	return
  8222  0865                     __end_of___ftsub:	
  8223                           
  8224                           	psect	text34
  8225  17B3                     __ptext34:	
  8226 ;; *************** function ___ftneg *****************
  8227 ;; Defined at:
  8228 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  8229 ;; Parameters:    Size  Location     Type
  8230 ;;  f1              3   44[BANK0 ] float 
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;		None
  8233 ;; Return value:  Size  Location     Type
  8234 ;;                  3   44[BANK0 ] float 
  8235 ;; Registers used:
  8236 ;;		wreg
  8237 ;; Tracked objects:
  8238 ;;		On entry : 0/0
  8239 ;;		On exit  : 0/0
  8240 ;;		Unchanged: 0/0
  8241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8242 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8245 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8246 ;;Total ram usage:        3 bytes
  8247 ;; Hardware stack levels used:    1
  8248 ;; Hardware stack levels required when called:    7
  8249 ;; This function calls:
  8250 ;;		Nothing
  8251 ;; This function is called by:
  8252 ;;		_loop
  8253 ;;		_ftoa
  8254 ;; This function uses a non-reentrant model
  8255 ;;
  8256                           
  8257                           
  8258                           ;psect for function ___ftneg
  8259  17B3                     ___ftneg:	
  8260                           
  8261                           ;incstack = 0
  8262                           ; Regs used in ___ftneg: [wreg]
  8263  17B3  0020               	movlb	0	; select bank0
  8264  17B4  084E               	movf	___ftneg@f1+2,w
  8265  17B5  044D               	iorwf	___ftneg@f1+1,w
  8266  17B6  044C               	iorwf	___ftneg@f1,w
  8267  17B7  1903               	skipnz
  8268  17B8  0008               	return
  8269  17B9  3080               	movlw	128
  8270  17BA  06CE               	xorwf	___ftneg@f1+2,f
  8271  17BB  0008               	return
  8272  17BC                     __end_of___ftneg:	
  8273                           
  8274                           	psect	text35
  8275  0711                     __ptext35:	
  8276 ;; *************** function ___ftmul *****************
  8277 ;; Defined at:
  8278 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  8279 ;; Parameters:    Size  Location     Type
  8280 ;;  f1              3   44[BANK0 ] float 
  8281 ;;  f2              3   47[BANK0 ] float 
  8282 ;; Auto vars:     Size  Location     Type
  8283 ;;  f3_as_produc    3   51[BANK0 ] unsigned um
  8284 ;;  sign            1   55[BANK0 ] unsigned char 
  8285 ;;  cntr            1   54[BANK0 ] unsigned char 
  8286 ;;  exp             1   50[BANK0 ] unsigned char 
  8287 ;; Return value:  Size  Location     Type
  8288 ;;                  3   44[BANK0 ] float 
  8289 ;; Registers used:
  8290 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8291 ;; Tracked objects:
  8292 ;;		On entry : 0/0
  8293 ;;		On exit  : 0/0
  8294 ;;		Unchanged: 0/0
  8295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8296 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8299 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8300 ;;Total ram usage:       12 bytes
  8301 ;; Hardware stack levels used:    1
  8302 ;; Hardware stack levels required when called:    8
  8303 ;; This function calls:
  8304 ;;		___ftpack
  8305 ;; This function is called by:
  8306 ;;		_loop
  8307 ;;		_ftoa
  8308 ;; This function uses a non-reentrant model
  8309 ;;
  8310                           
  8311                           
  8312                           ;psect for function ___ftmul
  8313  0711                     ___ftmul:	
  8314                           
  8315                           ;incstack = 0
  8316                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8317  0711  0020               	movlb	0	; select bank0
  8318  0712  084C               	movf	___ftmul@f1,w
  8319  0713  00FD               	movwf	125
  8320  0714  084D               	movf	___ftmul@f1+1,w
  8321  0715  00FE               	movwf	126
  8322  0716  084E               	movf	___ftmul@f1+2,w
  8323  0717  00FF               	movwf	127
  8324  0718  1003               	clrc
  8325  0719  0D7E               	rlf	126,w
  8326  071A  0D7F               	rlf	127,w
  8327  071B  00FF               	movwf	127
  8328  071C  087F               	movf	127,w
  8329  071D  00D2               	movwf	___ftmul@exp
  8330  071E  0852               	movf	___ftmul@exp,w
  8331  071F  1D03               	btfss	3,2
  8332  0720  2F28               	goto	l4018
  8333  0721  3000               	movlw	0
  8334  0722  00CC               	movwf	?___ftmul
  8335  0723  3000               	movlw	0
  8336  0724  00CD               	movwf	?___ftmul+1
  8337  0725  3000               	movlw	0
  8338  0726  00CE               	movwf	?___ftmul+2
  8339  0727  0008               	return
  8340  0728                     l4018:	
  8341  0728  084F               	movf	___ftmul@f2,w
  8342  0729  00FD               	movwf	125
  8343  072A  0850               	movf	___ftmul@f2+1,w
  8344  072B  00FE               	movwf	126
  8345  072C  0851               	movf	___ftmul@f2+2,w
  8346  072D  00FF               	movwf	127
  8347  072E  1003               	clrc
  8348  072F  0D7E               	rlf	126,w
  8349  0730  0D7F               	rlf	127,w
  8350  0731  00FF               	movwf	127
  8351  0732  087F               	movf	127,w
  8352  0733  00D7               	movwf	___ftmul@sign
  8353  0734  0857               	movf	___ftmul@sign,w
  8354  0735  1D03               	btfss	3,2
  8355  0736  2F3E               	goto	l4024
  8356  0737  3000               	movlw	0
  8357  0738  00CC               	movwf	?___ftmul
  8358  0739  3000               	movlw	0
  8359  073A  00CD               	movwf	?___ftmul+1
  8360  073B  3000               	movlw	0
  8361  073C  00CE               	movwf	?___ftmul+2
  8362  073D  0008               	return
  8363  073E                     l4024:	
  8364  073E  0857               	movf	___ftmul@sign,w
  8365  073F  3E7B               	addlw	123
  8366  0740  00FF               	movwf	127
  8367  0741  087F               	movf	127,w
  8368  0742  07D2               	addwf	___ftmul@exp,f
  8369  0743  084C               	movf	___ftmul@f1,w
  8370  0744  00FD               	movwf	125
  8371  0745  084D               	movf	___ftmul@f1+1,w
  8372  0746  00FE               	movwf	126
  8373  0747  084E               	movf	___ftmul@f1+2,w
  8374  0748  00FF               	movwf	127
  8375  0749  3010               	movlw	16
  8376  074A                     u4455:	
  8377  074A  36FF               	lsrf	127,f
  8378  074B  0CFE               	rrf	126,f
  8379  074C  0CFD               	rrf	125,f
  8380  074D  0B89               	decfsz	9,f
  8381  074E  2F4A               	goto	u4455
  8382  074F  087D               	movf	125,w
  8383  0750  00FF               	movwf	127
  8384  0751  087F               	movf	127,w
  8385  0752  00D7               	movwf	___ftmul@sign
  8386  0753  084F               	movf	___ftmul@f2,w
  8387  0754  00FD               	movwf	125
  8388  0755  0850               	movf	___ftmul@f2+1,w
  8389  0756  00FE               	movwf	126
  8390  0757  0851               	movf	___ftmul@f2+2,w
  8391  0758  00FF               	movwf	127
  8392  0759  3010               	movlw	16
  8393  075A                     u4465:	
  8394  075A  36FF               	lsrf	127,f
  8395  075B  0CFE               	rrf	126,f
  8396  075C  0CFD               	rrf	125,f
  8397  075D  0B89               	decfsz	9,f
  8398  075E  2F5A               	goto	u4465
  8399  075F  087D               	movf	125,w
  8400  0760  00FF               	movwf	127
  8401  0761  087F               	movf	127,w
  8402  0762  06D7               	xorwf	___ftmul@sign,f
  8403  0763  3080               	movlw	128
  8404  0764  00FF               	movwf	127
  8405  0765  087F               	movf	127,w
  8406  0766  05D7               	andwf	___ftmul@sign,f
  8407  0767  17CD               	bsf	___ftmul@f1+1,7
  8408  0768  17D0               	bsf	___ftmul@f2+1,7
  8409  0769  30FF               	movlw	255
  8410  076A  05CF               	andwf	___ftmul@f2,f
  8411  076B  30FF               	movlw	255
  8412  076C  05D0               	andwf	___ftmul@f2+1,f
  8413  076D  3000               	movlw	0
  8414  076E  05D1               	andwf	___ftmul@f2+2,f
  8415  076F  3000               	movlw	0
  8416  0770  00D3               	movwf	___ftmul@f3_as_product
  8417  0771  3000               	movlw	0
  8418  0772  00D4               	movwf	___ftmul@f3_as_product+1
  8419  0773  3000               	movlw	0
  8420  0774  00D5               	movwf	___ftmul@f3_as_product+2
  8421  0775  3007               	movlw	7
  8422  0776  00FF               	movwf	127
  8423  0777  087F               	movf	127,w
  8424  0778  00D6               	movwf	___ftmul@cntr
  8425  0779                     l4040:	
  8426  0779  1C4C               	btfss	___ftmul@f1,0
  8427  077A  2F81               	goto	l4044
  8428  077B  084F               	movf	___ftmul@f2,w
  8429  077C  07D3               	addwf	___ftmul@f3_as_product,f
  8430  077D  0850               	movf	___ftmul@f2+1,w
  8431  077E  3DD4               	addwfc	___ftmul@f3_as_product+1,f
  8432  077F  0851               	movf	___ftmul@f2+2,w
  8433  0780  3DD5               	addwfc	___ftmul@f3_as_product+2,f
  8434  0781                     l4044:	
  8435  0781  3001               	movlw	1
  8436  0782                     u4485:	
  8437  0782  36CE               	lsrf	___ftmul@f1+2,f
  8438  0783  0CCD               	rrf	___ftmul@f1+1,f
  8439  0784  0CCC               	rrf	___ftmul@f1,f
  8440  0785  0B89               	decfsz	9,f
  8441  0786  2F82               	goto	u4485
  8442  0787  3001               	movlw	1
  8443  0788                     u4495:	
  8444  0788  35CF               	lslf	___ftmul@f2,f
  8445  0789  0DD0               	rlf	___ftmul@f2+1,f
  8446  078A  0DD1               	rlf	___ftmul@f2+2,f
  8447  078B  0B89               	decfsz	9,f
  8448  078C  2F88               	goto	u4495
  8449  078D  3001               	movlw	1
  8450  078E  02D6               	subwf	___ftmul@cntr,f
  8451  078F  1D03               	btfss	3,2
  8452  0790  2F79               	goto	l4040
  8453  0791  3009               	movlw	9
  8454  0792  00FF               	movwf	127
  8455  0793  087F               	movf	127,w
  8456  0794  00D6               	movwf	___ftmul@cntr
  8457  0795                     l4052:	
  8458  0795  1C4C               	btfss	___ftmul@f1,0
  8459  0796  2F9D               	goto	l4056
  8460  0797  084F               	movf	___ftmul@f2,w
  8461  0798  07D3               	addwf	___ftmul@f3_as_product,f
  8462  0799  0850               	movf	___ftmul@f2+1,w
  8463  079A  3DD4               	addwfc	___ftmul@f3_as_product+1,f
  8464  079B  0851               	movf	___ftmul@f2+2,w
  8465  079C  3DD5               	addwfc	___ftmul@f3_as_product+2,f
  8466  079D                     l4056:	
  8467  079D  3001               	movlw	1
  8468  079E                     u4525:	
  8469  079E  36CE               	lsrf	___ftmul@f1+2,f
  8470  079F  0CCD               	rrf	___ftmul@f1+1,f
  8471  07A0  0CCC               	rrf	___ftmul@f1,f
  8472  07A1  0B89               	decfsz	9,f
  8473  07A2  2F9E               	goto	u4525
  8474  07A3  3001               	movlw	1
  8475  07A4                     u4535:	
  8476  07A4  36D5               	lsrf	___ftmul@f3_as_product+2,f
  8477  07A5  0CD4               	rrf	___ftmul@f3_as_product+1,f
  8478  07A6  0CD3               	rrf	___ftmul@f3_as_product,f
  8479  07A7  0B89               	decfsz	9,f
  8480  07A8  2FA4               	goto	u4535
  8481  07A9  3001               	movlw	1
  8482  07AA  02D6               	subwf	___ftmul@cntr,f
  8483  07AB  1D03               	btfss	3,2
  8484  07AC  2F95               	goto	l4052
  8485  07AD  0853               	movf	___ftmul@f3_as_product,w
  8486  07AE  00A6               	movwf	___ftpack@arg
  8487  07AF  0854               	movf	___ftmul@f3_as_product+1,w
  8488  07B0  00A7               	movwf	___ftpack@arg+1
  8489  07B1  0855               	movf	___ftmul@f3_as_product+2,w
  8490  07B2  00A8               	movwf	___ftpack@arg+2
  8491  07B3  0852               	movf	___ftmul@exp,w
  8492  07B4  00FF               	movwf	127
  8493  07B5  087F               	movf	127,w
  8494  07B6  00A9               	movwf	___ftpack@exp
  8495  07B7  0857               	movf	___ftmul@sign,w
  8496  07B8  00FF               	movwf	127
  8497  07B9  087F               	movf	127,w
  8498  07BA  00AA               	movwf	___ftpack@sign
  8499  07BB  318C  2492         	fcall	___ftpack
  8500  07BD  0020               	movlb	0	; select bank0
  8501  07BE  0826               	movf	?___ftpack,w
  8502  07BF  00CC               	movwf	?___ftmul
  8503  07C0  0827               	movf	?___ftpack+1,w
  8504  07C1  00CD               	movwf	?___ftmul+1
  8505  07C2  0828               	movf	?___ftpack+2,w
  8506  07C3  00CE               	movwf	?___ftmul+2
  8507  07C4  0008               	return
  8508  07C5                     __end_of___ftmul:	
  8509                           
  8510                           	psect	text36
  8511  0AF3                     __ptext36:	
  8512 ;; *************** function ___ftge *****************
  8513 ;; Defined at:
  8514 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8515 ;; Parameters:    Size  Location     Type
  8516 ;;  ff1             3    6[BANK0 ] float 
  8517 ;;  ff2             3    9[BANK0 ] float 
  8518 ;; Auto vars:     Size  Location     Type
  8519 ;;		None
  8520 ;; Return value:  Size  Location     Type
  8521 ;;		None               void
  8522 ;; Registers used:
  8523 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8524 ;; Tracked objects:
  8525 ;;		On entry : 0/0
  8526 ;;		On exit  : 0/0
  8527 ;;		Unchanged: 0/0
  8528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8529 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8532 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8533 ;;Total ram usage:        6 bytes
  8534 ;; Hardware stack levels used:    1
  8535 ;; Hardware stack levels required when called:    7
  8536 ;; This function calls:
  8537 ;;		Nothing
  8538 ;; This function is called by:
  8539 ;;		_ftoa
  8540 ;; This function uses a non-reentrant model
  8541 ;;
  8542                           
  8543                           
  8544                           ;psect for function ___ftge
  8545  0AF3                     ___ftge:	
  8546                           
  8547                           ;incstack = 0
  8548                           ; Regs used in ___ftge: [wreg+status,2+status,0+btemp+9-btemp+11]
  8549  0AF3  0020               	movlb	0	; select bank0
  8550  0AF4  1FA8               	btfss	___ftge@ff1+2,7
  8551  0AF5  2B0A               	goto	l3996
  8552  0AF6  0926               	comf	___ftge@ff1,w
  8553  0AF7  00FD               	movwf	125
  8554  0AF8  0927               	comf	___ftge@ff1+1,w
  8555  0AF9  00FE               	movwf	126
  8556  0AFA  0928               	comf	___ftge@ff1+2,w
  8557  0AFB  00FF               	movwf	127
  8558  0AFC  0AFD               	incf	125,f
  8559  0AFD  1903               	skipnz
  8560  0AFE  0AFE               	incf	126,f
  8561  0AFF  1903               	skipnz
  8562  0B00  0AFF               	incf	127,f
  8563  0B01  3000               	movlw	0
  8564  0B02  077D               	addwf	125,w
  8565  0B03  00A6               	movwf	___ftge@ff1
  8566  0B04  3000               	movlw	0
  8567  0B05  3D7E               	addwfc	126,w
  8568  0B06  00A7               	movwf	___ftge@ff1+1
  8569  0B07  3080               	movlw	128
  8570  0B08  3D7F               	addwfc	127,w
  8571  0B09  00A8               	movwf	___ftge@ff1+2
  8572  0B0A                     l3996:	
  8573  0B0A  1FAB               	btfss	___ftge@ff2+2,7
  8574  0B0B  2B20               	goto	l4000
  8575  0B0C  0929               	comf	___ftge@ff2,w
  8576  0B0D  00FD               	movwf	125
  8577  0B0E  092A               	comf	___ftge@ff2+1,w
  8578  0B0F  00FE               	movwf	126
  8579  0B10  092B               	comf	___ftge@ff2+2,w
  8580  0B11  00FF               	movwf	127
  8581  0B12  0AFD               	incf	125,f
  8582  0B13  1903               	skipnz
  8583  0B14  0AFE               	incf	126,f
  8584  0B15  1903               	skipnz
  8585  0B16  0AFF               	incf	127,f
  8586  0B17  3000               	movlw	0
  8587  0B18  077D               	addwf	125,w
  8588  0B19  00A9               	movwf	___ftge@ff2
  8589  0B1A  3000               	movlw	0
  8590  0B1B  3D7E               	addwfc	126,w
  8591  0B1C  00AA               	movwf	___ftge@ff2+1
  8592  0B1D  3080               	movlw	128
  8593  0B1E  3D7F               	addwfc	127,w
  8594  0B1F  00AB               	movwf	___ftge@ff2+2
  8595  0B20                     l4000:	
  8596  0B20  3080               	movlw	128
  8597  0B21  06A8               	xorwf	___ftge@ff1+2,f
  8598  0B22  3080               	movlw	128
  8599  0B23  06AB               	xorwf	___ftge@ff2+2,f
  8600  0B24  082B               	movf	___ftge@ff2+2,w
  8601  0B25  0228               	subwf	___ftge@ff1+2,w
  8602  0B26  1D03               	skipz
  8603  0B27  0008               	return
  8604  0B28  082A               	movf	___ftge@ff2+1,w
  8605  0B29  0227               	subwf	___ftge@ff1+1,w
  8606  0B2A  1D03               	skipz
  8607  0B2B  0008               	return
  8608  0B2C  0829               	movf	___ftge@ff2,w
  8609  0B2D  0226               	subwf	___ftge@ff1,w
  8610  0B2E  0008               	return
  8611  0B2F                     __end_of___ftge:	
  8612                           
  8613                           	psect	text37
  8614  0EAD                     __ptext37:	
  8615 ;; *************** function _getADCValue *****************
  8616 ;; Defined at:
  8617 ;;		line 25 in file "main.c"
  8618 ;; Parameters:    Size  Location     Type
  8619 ;;  channel         1    wreg     unsigned char 
  8620 ;; Auto vars:     Size  Location     Type
  8621 ;;  channel         1   38[BANK0 ] unsigned char 
  8622 ;;  adcSum          3   41[BANK0 ] float 
  8623 ;;  adcLoop         2   39[BANK0 ] unsigned int 
  8624 ;; Return value:  Size  Location     Type
  8625 ;;                  3   34[BANK0 ] float 
  8626 ;; Registers used:
  8627 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8628 ;; Tracked objects:
  8629 ;;		On entry : 0/0
  8630 ;;		On exit  : 0/0
  8631 ;;		Unchanged: 0/0
  8632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8633 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8634 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8635 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8636 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8637 ;;Total ram usage:       10 bytes
  8638 ;; Hardware stack levels used:    1
  8639 ;; Hardware stack levels required when called:    9
  8640 ;; This function calls:
  8641 ;;		___awtoft
  8642 ;;		___ftadd
  8643 ;;		___ftdiv
  8644 ;;		_sleepMs
  8645 ;; This function is called by:
  8646 ;;		_loop
  8647 ;; This function uses a non-reentrant model
  8648 ;;
  8649                           
  8650                           
  8651                           ;psect for function _getADCValue
  8652  0EAD                     _getADCValue:	
  8653                           
  8654                           ;incstack = 0
  8655                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2-btemp+0+btemp+9-btemp+11+pclath+cstack
      +                          ]
  8656                           ;getADCValue@channel stored from wreg
  8657  0EAD  0020               	movlb	0	; select bank0
  8658  0EAE  00C6               	movwf	getADCValue@channel
  8659                           
  8660                           ;main.c: 28: float adcSum = 0;
  8661  0EAF  3000               	movlw	0
  8662  0EB0  00C9               	movwf	getADCValue@adcSum
  8663  0EB1  3000               	movlw	0
  8664  0EB2  00CA               	movwf	getADCValue@adcSum+1
  8665  0EB3  3000               	movlw	0
  8666  0EB4  00CB               	movwf	getADCValue@adcSum+2
  8667                           
  8668                           ;main.c: 29: unsigned int adcLoop = 1000;
  8669  0EB5  30E8               	movlw	232
  8670  0EB6  00C7               	movwf	getADCValue@adcLoop
  8671  0EB7  3003               	movlw	3
  8672  0EB8  00C8               	movwf	getADCValue@adcLoop+1
  8673                           
  8674                           ;main.c: 31: ADCON0bits.CHS = channel;
  8675  0EB9  0846               	movf	getADCValue@channel,w
  8676  0EBA  00C5               	movwf	??_getADCValue
  8677  0EBB  0DC5               	rlf	??_getADCValue,f
  8678  0EBC  0DC5               	rlf	??_getADCValue,f
  8679  0EBD  0021               	movlb	1	; select bank1
  8680  0EBE  081D               	movf	29,w	;volatile
  8681  0EBF  0020               	movlb	0	; select bank0
  8682  0EC0  0645               	xorwf	??_getADCValue,w
  8683  0EC1  3903               	andlw	-253
  8684  0EC2  0645               	xorwf	??_getADCValue,w
  8685  0EC3  0021               	movlb	1	; select bank1
  8686  0EC4  009D               	movwf	29	;volatile
  8687                           
  8688                           ;main.c: 32: FVRCONbits.FVREN = 1;
  8689  0EC5  0022               	movlb	2	; select bank2
  8690  0EC6  1797               	bsf	23,7	;volatile
  8691                           
  8692                           ;main.c: 33: ADCON0bits.ADON = 1;
  8693  0EC7  0021               	movlb	1	; select bank1
  8694  0EC8  141D               	bsf	29,0	;volatile
  8695                           
  8696                           ;main.c: 35: sleepMs(1);
  8697  0EC9  3001               	movlw	1
  8698  0ECA  00F0               	movwf	sleepMs@milliseconds
  8699  0ECB  3000               	movlw	0
  8700  0ECC  00F1               	movwf	sleepMs@milliseconds+1
  8701  0ECD  3189  21D6  318E   	fcall	_sleepMs
  8702  0ED0                     l4350:	
  8703                           ;main.c: 37: while (adcLoop--){
  8704                           
  8705  0ED0  3001               	movlw	1
  8706  0ED1  0020               	movlb	0	; select bank0
  8707  0ED2  02C7               	subwf	getADCValue@adcLoop,f
  8708  0ED3  3000               	movlw	0
  8709  0ED4  3BC8               	subwfb	getADCValue@adcLoop+1,f
  8710  0ED5  0A47               	incf	getADCValue@adcLoop,w
  8711  0ED6  1903               	btfsc	3,2
  8712  0ED7  0A48               	incf	getADCValue@adcLoop+1,w
  8713  0ED8  1903               	btfsc	3,2
  8714  0ED9  2F0D               	goto	l176
  8715                           
  8716                           ;main.c: 39: ADCON0bits.ADGO = 1;
  8717  0EDA  0021               	movlb	1	; select bank1
  8718  0EDB  149D               	bsf	29,1	;volatile
  8719  0EDC                     l4346:	
  8720                           ;main.c: 41: while (ADCON0bits.ADGO){
  8721                           
  8722  0EDC  0021               	movlb	1	; select bank1
  8723  0EDD  1C9D               	btfss	29,1	;volatile
  8724  0EDE  2EE7               	goto	l4348
  8725                           
  8726                           ;main.c: 42: sleepMs(1);
  8727  0EDF  3001               	movlw	1
  8728  0EE0  00F0               	movwf	sleepMs@milliseconds
  8729  0EE1  3000               	movlw	0
  8730  0EE2  00F1               	movwf	sleepMs@milliseconds+1
  8731  0EE3  3189  21D6  318E   	fcall	_sleepMs
  8732  0EE6  2EDC               	goto	l4346
  8733  0EE7                     l4348:	
  8734                           
  8735                           ;main.c: 43: };main.c: 45: adcSum+= (ADRESL | (ADRESH << 8));
  8736  0EE7  081C               	movf	28,w	;volatile
  8737  0EE8  00FE               	movwf	126
  8738  0EE9  01FF               	clrf	127
  8739  0EEA  087E               	movf	126,w
  8740  0EEB  00FF               	movwf	127
  8741  0EEC  01FE               	clrf	126
  8742  0EED  087E               	movf	126,w
  8743  0EEE  041B               	iorwf	27,w	;volatile
  8744  0EEF  00F0               	movwf	___awtoft@c
  8745  0EF0  087F               	movf	127,w
  8746  0EF1  00F1               	movwf	___awtoft@c+1
  8747  0EF2  3189  213C  318E   	fcall	___awtoft
  8748  0EF5  0870               	movf	?___awtoft,w
  8749  0EF6  0020               	movlb	0	; select bank0
  8750  0EF7  00AB               	movwf	___ftadd@f1
  8751  0EF8  0871               	movf	?___awtoft+1,w
  8752  0EF9  00AC               	movwf	___ftadd@f1+1
  8753  0EFA  0872               	movf	?___awtoft+2,w
  8754  0EFB  00AD               	movwf	___ftadd@f1+2
  8755  0EFC  0849               	movf	getADCValue@adcSum,w
  8756  0EFD  00AE               	movwf	___ftadd@f2
  8757  0EFE  084A               	movf	getADCValue@adcSum+1,w
  8758  0EFF  00AF               	movwf	___ftadd@f2+1
  8759  0F00  084B               	movf	getADCValue@adcSum+2,w
  8760  0F01  00B0               	movwf	___ftadd@f2+2
  8761  0F02  3184  2473  318E   	fcall	___ftadd
  8762  0F05  0020               	movlb	0	; select bank0
  8763  0F06  082B               	movf	?___ftadd,w
  8764  0F07  00C9               	movwf	getADCValue@adcSum
  8765  0F08  082C               	movf	?___ftadd+1,w
  8766  0F09  00CA               	movwf	getADCValue@adcSum+1
  8767  0F0A  082D               	movf	?___ftadd+2,w
  8768  0F0B  00CB               	movwf	getADCValue@adcSum+2
  8769  0F0C  2ED0               	goto	l4350
  8770  0F0D                     l176:	
  8771                           
  8772                           ;main.c: 47: };main.c: 49: FVRCONbits.FVREN = 0;
  8773  0F0D  0022               	movlb	2	; select bank2
  8774  0F0E  1397               	bcf	23,7	;volatile
  8775                           
  8776                           ;main.c: 50: ADCON0bits.ADON = 0;
  8777  0F0F  0021               	movlb	1	; select bank1
  8778  0F10  101D               	bcf	29,0	;volatile
  8779                           
  8780                           ;main.c: 53: adcSum/= 1000;
  8781  0F11  3000               	movlw	0
  8782  0F12  0020               	movlb	0	; select bank0
  8783  0F13  00B5               	movwf	___ftdiv@f2
  8784  0F14  307A               	movlw	122
  8785  0F15  00B6               	movwf	___ftdiv@f2+1
  8786  0F16  3044               	movlw	68
  8787  0F17  00B7               	movwf	___ftdiv@f2+2
  8788  0F18  0849               	movf	getADCValue@adcSum,w
  8789  0F19  00B8               	movwf	___ftdiv@f1
  8790  0F1A  084A               	movf	getADCValue@adcSum+1,w
  8791  0F1B  00B9               	movwf	___ftdiv@f1+1
  8792  0F1C  084B               	movf	getADCValue@adcSum+2,w
  8793  0F1D  00BA               	movwf	___ftdiv@f1+2
  8794  0F1E  318E  2604  318E   	fcall	___ftdiv
  8795  0F21  0020               	movlb	0	; select bank0
  8796  0F22  0835               	movf	?___ftdiv,w
  8797  0F23  00C9               	movwf	getADCValue@adcSum
  8798  0F24  0836               	movf	?___ftdiv+1,w
  8799  0F25  00CA               	movwf	getADCValue@adcSum+1
  8800  0F26  0837               	movf	?___ftdiv+2,w
  8801  0F27  00CB               	movwf	getADCValue@adcSum+2
  8802                           
  8803                           ;main.c: 56: if (ADCON1bits.ADPREF == 0b11){
  8804  0F28  0021               	movlb	1	; select bank1
  8805  0F29  081E               	movf	30,w	;volatile
  8806  0F2A  3903               	andlw	3
  8807  0F2B  3A03               	xorlw	3
  8808  0F2C  1903               	btfsc	3,2
  8809  0F2D  2F47               	goto	l4362
  8810  0F2E  2F4E               	goto	l4364
  8811  0F2F                     l4358:	
  8812                           ;main.c: 58: case 0b10:
  8813                           
  8814                           ;main.c: 57: switch (FVRCONbits.ADFVR){
  8815                           
  8816                           
  8817                           ;main.c: 59: adcSum/= 500;
  8818  0F2F  3000               	movlw	0
  8819  0F30  0020               	movlb	0	; select bank0
  8820  0F31  00B5               	movwf	___ftdiv@f2
  8821  0F32  30FA               	movlw	250
  8822  0F33  00B6               	movwf	___ftdiv@f2+1
  8823  0F34  3043               	movlw	67
  8824  0F35  00B7               	movwf	___ftdiv@f2+2
  8825  0F36  0849               	movf	getADCValue@adcSum,w
  8826  0F37  00B8               	movwf	___ftdiv@f1
  8827  0F38  084A               	movf	getADCValue@adcSum+1,w
  8828  0F39  00B9               	movwf	___ftdiv@f1+1
  8829  0F3A  084B               	movf	getADCValue@adcSum+2,w
  8830  0F3B  00BA               	movwf	___ftdiv@f1+2
  8831  0F3C  318E  2604  318E   	fcall	___ftdiv
  8832  0F3F  0020               	movlb	0	; select bank0
  8833  0F40  0835               	movf	?___ftdiv,w
  8834  0F41  00C9               	movwf	getADCValue@adcSum
  8835  0F42  0836               	movf	?___ftdiv+1,w
  8836  0F43  00CA               	movwf	getADCValue@adcSum+1
  8837  0F44  0837               	movf	?___ftdiv+2,w
  8838  0F45  00CB               	movwf	getADCValue@adcSum+2
  8839                           
  8840                           ;main.c: 61: }
  8841                           
  8842                           ;main.c: 60: break;
  8843  0F46  2F4E               	goto	l4364
  8844  0F47                     l4362:	
  8845  0F47  0022               	movlb	2	; select bank2
  8846  0F48  0817               	movf	23,w	;volatile
  8847  0F49  3903               	andlw	3
  8848                           
  8849                           ; Switch size 1, requested type "space"
  8850                           ; Number of cases is 1, Range of values is 2 to 2
  8851                           ; switch strategies available:
  8852                           ; Name         Instructions Cycles
  8853                           ; simple_byte            4     3 (average)
  8854                           ; direct_byte           11     9 (fixed)
  8855                           ; jumptable            263     9 (fixed)
  8856                           ;	Chosen strategy is simple_byte
  8857  0F4A  3A02               	xorlw	2	; case 2
  8858  0F4B  1903               	skipnz
  8859  0F4C  2F2F               	goto	l4358
  8860  0F4D  2F4E               	goto	l4364
  8861  0F4E                     l4364:	
  8862                           
  8863                           ;main.c: 62: };main.c: 65: return adcSum;
  8864  0F4E  0020               	movlb	0	; select bank0
  8865  0F4F  0849               	movf	getADCValue@adcSum,w
  8866  0F50  00C2               	movwf	?_getADCValue
  8867  0F51  084A               	movf	getADCValue@adcSum+1,w
  8868  0F52  00C3               	movwf	?_getADCValue+1
  8869  0F53  084B               	movf	getADCValue@adcSum+2,w
  8870  0F54  00C4               	movwf	?_getADCValue+2
  8871  0F55  0008               	return
  8872  0F56                     __end_of_getADCValue:	
  8873                           
  8874                           	psect	text38
  8875  09D6                     __ptext38:	
  8876 ;; *************** function _sleepMs *****************
  8877 ;; Defined at:
  8878 ;;		line 36 in file "interface.c"
  8879 ;; Parameters:    Size  Location     Type
  8880 ;;  milliseconds    2    0[COMMON] unsigned int 
  8881 ;; Auto vars:     Size  Location     Type
  8882 ;;  wdtps           1    3[COMMON] unsigned char 
  8883 ;; Return value:  Size  Location     Type
  8884 ;;                  1    wreg      void 
  8885 ;; Registers used:
  8886 ;;		wreg, status,2, status,0, btemp+10, btemp+11, pclath
  8887 ;; Tracked objects:
  8888 ;;		On entry : 0/0
  8889 ;;		On exit  : 0/0
  8890 ;;		Unchanged: 0/0
  8891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8892 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8893 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8894 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8896 ;;Total ram usage:        4 bytes
  8897 ;; Hardware stack levels used:    1
  8898 ;; Hardware stack levels required when called:    8
  8899 ;; This function calls:
  8900 ;;		_resetWDT
  8901 ;; This function is called by:
  8902 ;;		_getADCValue
  8903 ;;		_sleepListren
  8904 ;;		_nrf24l01SendPacket
  8905 ;; This function uses a non-reentrant model
  8906 ;;
  8907                           
  8908                           
  8909                           ;psect for function _sleepMs
  8910  09D6                     _sleepMs:	
  8911                           
  8912                           ;interface.c: 38: unsigned char wdtps;;interface.c: 39: for (wdtps = 0; wdtps <= 0b10010
      +                          ; wdtps++){
  8913                           
  8914                           ;incstack = 0
  8915                           ; Regs used in _sleepMs: [wreg+status,2+status,0+btemp+10+btemp+11+pclath]
  8916  09D6  01F3               	clrf	sleepMs@wdtps
  8917  09D7  3013               	movlw	19
  8918  09D8  0273               	subwf	sleepMs@wdtps,w
  8919  09D9  1803               	btfsc	3,0
  8920  09DA  29FF               	goto	l3822
  8921  09DB                     l3806:	
  8922                           
  8923                           ;interface.c: 40: if ((milliseconds >> wdtps) & 0b1){
  8924  09DB  0871               	movf	sleepMs@milliseconds+1,w
  8925  09DC  00FF               	movwf	127
  8926  09DD  0870               	movf	sleepMs@milliseconds,w
  8927  09DE  00FE               	movwf	126
  8928  09DF  0A73               	incf	sleepMs@wdtps,w
  8929  09E0  29E3               	goto	u4074
  8930  09E1                     u4075:	
  8931  09E1  36FF               	lsrf	127,f
  8932  09E2  0CFE               	rrf	126,f
  8933  09E3                     u4074:	
  8934  09E3  0B89               	decfsz	9,f
  8935  09E4  29E1               	goto	u4075
  8936  09E5  1C7E               	btfss	126,0
  8937  09E6  29F7               	goto	l3818
  8938  09E7                     l3808:	
  8939                           ;interface.c: 41: START_SLEEP:
  8940                           
  8941                           
  8942                           ;interface.c: 42: WDTCONbits.WDTPS = wdtps;
  8943  09E7  0873               	movf	sleepMs@wdtps,w
  8944  09E8  00F2               	movwf	??_sleepMs
  8945  09E9  0DF2               	rlf	??_sleepMs,f
  8946  09EA  0021               	movlb	1	; select bank1
  8947  09EB  0817               	movf	23,w	;volatile
  8948  09EC  0672               	xorwf	??_sleepMs,w
  8949  09ED  39C1               	andlw	-63
  8950  09EE  0672               	xorwf	??_sleepMs,w
  8951  09EF  0097               	movwf	23	;volatile
  8952  09F0  0063               	sleep	;# 
  8953                           
  8954                           ;interface.c: 44: __nop();
  8955  09F1  0000               	nop
  8956                           
  8957                           ;interface.c: 45: __nop();
  8958  09F2  0000               	nop
  8959                           
  8960                           ;interface.c: 47: if( STATUSbits.nTO || STATUSbits.nPD){
  8961  09F3  0020               	movlb	0	; select bank0
  8962  09F4  1E03               	btfss	3,4	;volatile
  8963  09F5  1983               	btfsc	3,3	;volatile
  8964                           
  8965                           ;interface.c: 48: goto START_SLEEP;
  8966  09F6  29E7               	goto	l3808
  8967  09F7                     l3818:	
  8968  09F7  3001               	movlw	1
  8969  09F8  00FF               	movwf	127
  8970  09F9  087F               	movf	127,w
  8971  09FA  07F3               	addwf	sleepMs@wdtps,f
  8972  09FB  3013               	movlw	19
  8973  09FC  0273               	subwf	sleepMs@wdtps,w
  8974  09FD  1C03               	skipc
  8975  09FE  29DB               	goto	l3806
  8976  09FF                     l3822:	
  8977                           
  8978                           ;interface.c: 49: };interface.c: 50: };interface.c: 51: };interface.c: 53: resetWDT();
  8979  09FF  3197  27AC         	fcall	_resetWDT
  8980  0A01  0008               	return
  8981  0A02                     __end_of_sleepMs:	
  8982                           
  8983                           	psect	text39
  8984  17AC                     __ptext39:	
  8985 ;; *************** function _resetWDT *****************
  8986 ;; Defined at:
  8987 ;;		line 31 in file "interface.c"
  8988 ;; Parameters:    Size  Location     Type
  8989 ;;		None
  8990 ;; Auto vars:     Size  Location     Type
  8991 ;;		None
  8992 ;; Return value:  Size  Location     Type
  8993 ;;                  1    wreg      void 
  8994 ;; Registers used:
  8995 ;;		wreg, status,2, status,0
  8996 ;; Tracked objects:
  8997 ;;		On entry : 0/0
  8998 ;;		On exit  : 0/0
  8999 ;;		Unchanged: 0/0
  9000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9005 ;;Total ram usage:        0 bytes
  9006 ;; Hardware stack levels used:    1
  9007 ;; Hardware stack levels required when called:    7
  9008 ;; This function calls:
  9009 ;;		Nothing
  9010 ;; This function is called by:
  9011 ;;		_sleepMs
  9012 ;;		_ISR
  9013 ;; This function uses a reentrant model
  9014 ;;
  9015                           
  9016                           
  9017                           ;psect for function _resetWDT
  9018  17AC                     _resetWDT:	
  9019                           
  9020                           ;interface.c: 32: WDTCONbits.WDTPS = 0b01011;
  9021                           
  9022                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  9023                           ;incstack = 0
  9024 ;; hardware stack exceeded
  9025                           ; Regs used in _resetWDT: [wreg+status,2+status,0]
  9026  17AC  0021               	movlb	1	; select bank1
  9027  17AD  0817               	movf	23,w	;volatile
  9028  17AE  39C1               	andlw	-63
  9029  17AF  3816               	iorlw	22
  9030  17B0  0097               	movwf	23	;volatile
  9031  17B1  0064               	clrwdt	;# 
  9032                           
  9033                           ; _resetWDT: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, args
      +                          ize = 0, vargsize = 0
  9034  17B2  0008               	return
  9035  17B3                     __end_of_resetWDT:	
  9036                           
  9037                           	psect	text40
  9038  0E04                     __ptext40:	
  9039 ;; *************** function ___ftdiv *****************
  9040 ;; Defined at:
  9041 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  9042 ;; Parameters:    Size  Location     Type
  9043 ;;  f2              3   21[BANK0 ] float 
  9044 ;;  f1              3   24[BANK0 ] float 
  9045 ;; Auto vars:     Size  Location     Type
  9046 ;;  f3              3   29[BANK0 ] float 
  9047 ;;  sign            1   33[BANK0 ] unsigned char 
  9048 ;;  exp             1   32[BANK0 ] unsigned char 
  9049 ;;  cntr            1   28[BANK0 ] unsigned char 
  9050 ;; Return value:  Size  Location     Type
  9051 ;;                  3   21[BANK0 ] float 
  9052 ;; Registers used:
  9053 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9054 ;; Tracked objects:
  9055 ;;		On entry : 0/0
  9056 ;;		On exit  : 0/0
  9057 ;;		Unchanged: 0/0
  9058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9059 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9060 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9061 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9062 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9063 ;;Total ram usage:       13 bytes
  9064 ;; Hardware stack levels used:    1
  9065 ;; Hardware stack levels required when called:    8
  9066 ;; This function calls:
  9067 ;;		___ftpack
  9068 ;; This function is called by:
  9069 ;;		_getADCValue
  9070 ;;		_loop
  9071 ;; This function uses a non-reentrant model
  9072 ;;
  9073                           
  9074                           
  9075                           ;psect for function ___ftdiv
  9076  0E04                     ___ftdiv:	
  9077                           
  9078                           ;incstack = 0
  9079                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9080  0E04  0020               	movlb	0	; select bank0
  9081  0E05  0838               	movf	___ftdiv@f1,w
  9082  0E06  00FD               	movwf	125
  9083  0E07  0839               	movf	___ftdiv@f1+1,w
  9084  0E08  00FE               	movwf	126
  9085  0E09  083A               	movf	___ftdiv@f1+2,w
  9086  0E0A  00FF               	movwf	127
  9087  0E0B  1003               	clrc
  9088  0E0C  0D7E               	rlf	126,w
  9089  0E0D  0D7F               	rlf	127,w
  9090  0E0E  00FF               	movwf	127
  9091  0E0F  087F               	movf	127,w
  9092  0E10  00C0               	movwf	___ftdiv@exp
  9093  0E11  0840               	movf	___ftdiv@exp,w
  9094  0E12  1D03               	btfss	3,2
  9095  0E13  2E1B               	goto	l4284
  9096  0E14  3000               	movlw	0
  9097  0E15  00B5               	movwf	?___ftdiv
  9098  0E16  3000               	movlw	0
  9099  0E17  00B6               	movwf	?___ftdiv+1
  9100  0E18  3000               	movlw	0
  9101  0E19  00B7               	movwf	?___ftdiv+2
  9102  0E1A  0008               	return
  9103  0E1B                     l4284:	
  9104  0E1B  0835               	movf	___ftdiv@f2,w
  9105  0E1C  00FD               	movwf	125
  9106  0E1D  0836               	movf	___ftdiv@f2+1,w
  9107  0E1E  00FE               	movwf	126
  9108  0E1F  0837               	movf	___ftdiv@f2+2,w
  9109  0E20  00FF               	movwf	127
  9110  0E21  1003               	clrc
  9111  0E22  0D7E               	rlf	126,w
  9112  0E23  0D7F               	rlf	127,w
  9113  0E24  00FF               	movwf	127
  9114  0E25  087F               	movf	127,w
  9115  0E26  00C1               	movwf	___ftdiv@sign
  9116  0E27  0841               	movf	___ftdiv@sign,w
  9117  0E28  1D03               	btfss	3,2
  9118  0E29  2E31               	goto	l4290
  9119  0E2A  3000               	movlw	0
  9120  0E2B  00B5               	movwf	?___ftdiv
  9121  0E2C  3000               	movlw	0
  9122  0E2D  00B6               	movwf	?___ftdiv+1
  9123  0E2E  3000               	movlw	0
  9124  0E2F  00B7               	movwf	?___ftdiv+2
  9125  0E30  0008               	return
  9126  0E31                     l4290:	
  9127  0E31  3000               	movlw	0
  9128  0E32  00BD               	movwf	___ftdiv@f3
  9129  0E33  3000               	movlw	0
  9130  0E34  00BE               	movwf	___ftdiv@f3+1
  9131  0E35  3000               	movlw	0
  9132  0E36  00BF               	movwf	___ftdiv@f3+2
  9133  0E37  3089               	movlw	137
  9134  0E38  0741               	addwf	___ftdiv@sign,w
  9135  0E39  00BB               	movwf	??___ftdiv
  9136  0E3A  083B               	movf	??___ftdiv,w
  9137  0E3B  02C0               	subwf	___ftdiv@exp,f
  9138  0E3C  0838               	movf	___ftdiv@f1,w
  9139  0E3D  00FD               	movwf	125
  9140  0E3E  0839               	movf	___ftdiv@f1+1,w
  9141  0E3F  00FE               	movwf	126
  9142  0E40  083A               	movf	___ftdiv@f1+2,w
  9143  0E41  00FF               	movwf	127
  9144  0E42  3010               	movlw	16
  9145  0E43                     u4835:	
  9146  0E43  36FF               	lsrf	127,f
  9147  0E44  0CFE               	rrf	126,f
  9148  0E45  0CFD               	rrf	125,f
  9149  0E46  0B89               	decfsz	9,f
  9150  0E47  2E43               	goto	u4835
  9151  0E48  087D               	movf	125,w
  9152  0E49  00FF               	movwf	127
  9153  0E4A  087F               	movf	127,w
  9154  0E4B  00C1               	movwf	___ftdiv@sign
  9155  0E4C  0835               	movf	___ftdiv@f2,w
  9156  0E4D  00FD               	movwf	125
  9157  0E4E  0836               	movf	___ftdiv@f2+1,w
  9158  0E4F  00FE               	movwf	126
  9159  0E50  0837               	movf	___ftdiv@f2+2,w
  9160  0E51  00FF               	movwf	127
  9161  0E52  3010               	movlw	16
  9162  0E53                     u4845:	
  9163  0E53  36FF               	lsrf	127,f
  9164  0E54  0CFE               	rrf	126,f
  9165  0E55  0CFD               	rrf	125,f
  9166  0E56  0B89               	decfsz	9,f
  9167  0E57  2E53               	goto	u4845
  9168  0E58  087D               	movf	125,w
  9169  0E59  00FF               	movwf	127
  9170  0E5A  087F               	movf	127,w
  9171  0E5B  06C1               	xorwf	___ftdiv@sign,f
  9172  0E5C  3080               	movlw	128
  9173  0E5D  00FF               	movwf	127
  9174  0E5E  087F               	movf	127,w
  9175  0E5F  05C1               	andwf	___ftdiv@sign,f
  9176  0E60  17B9               	bsf	___ftdiv@f1+1,7
  9177  0E61  30FF               	movlw	255
  9178  0E62  05B8               	andwf	___ftdiv@f1,f
  9179  0E63  30FF               	movlw	255
  9180  0E64  05B9               	andwf	___ftdiv@f1+1,f
  9181  0E65  3000               	movlw	0
  9182  0E66  05BA               	andwf	___ftdiv@f1+2,f
  9183  0E67  17B6               	bsf	___ftdiv@f2+1,7
  9184  0E68  30FF               	movlw	255
  9185  0E69  05B5               	andwf	___ftdiv@f2,f
  9186  0E6A  30FF               	movlw	255
  9187  0E6B  05B6               	andwf	___ftdiv@f2+1,f
  9188  0E6C  3000               	movlw	0
  9189  0E6D  05B7               	andwf	___ftdiv@f2+2,f
  9190  0E6E  3018               	movlw	24
  9191  0E6F  00FF               	movwf	127
  9192  0E70  087F               	movf	127,w
  9193  0E71  00BC               	movwf	___ftdiv@cntr
  9194  0E72                     l4308:	
  9195  0E72  3001               	movlw	1
  9196  0E73                     u4855:	
  9197  0E73  35BD               	lslf	___ftdiv@f3,f
  9198  0E74  0DBE               	rlf	___ftdiv@f3+1,f
  9199  0E75  0DBF               	rlf	___ftdiv@f3+2,f
  9200  0E76  0B89               	decfsz	9,f
  9201  0E77  2E73               	goto	u4855
  9202  0E78  0837               	movf	___ftdiv@f2+2,w
  9203  0E79  023A               	subwf	___ftdiv@f1+2,w
  9204  0E7A  1D03               	skipz
  9205  0E7B  2E82               	goto	u4865
  9206  0E7C  0836               	movf	___ftdiv@f2+1,w
  9207  0E7D  0239               	subwf	___ftdiv@f1+1,w
  9208  0E7E  1D03               	skipz
  9209  0E7F  2E82               	goto	u4865
  9210  0E80  0835               	movf	___ftdiv@f2,w
  9211  0E81  0238               	subwf	___ftdiv@f1,w
  9212  0E82                     u4865:	
  9213  0E82  1C03               	skipc
  9214  0E83  2E8B               	goto	l4316
  9215  0E84  0835               	movf	___ftdiv@f2,w
  9216  0E85  02B8               	subwf	___ftdiv@f1,f
  9217  0E86  0836               	movf	___ftdiv@f2+1,w
  9218  0E87  3BB9               	subwfb	___ftdiv@f1+1,f
  9219  0E88  0837               	movf	___ftdiv@f2+2,w
  9220  0E89  3BBA               	subwfb	___ftdiv@f1+2,f
  9221  0E8A  143D               	bsf	___ftdiv@f3,0
  9222  0E8B                     l4316:	
  9223  0E8B  3001               	movlw	1
  9224  0E8C                     u4875:	
  9225  0E8C  35B8               	lslf	___ftdiv@f1,f
  9226  0E8D  0DB9               	rlf	___ftdiv@f1+1,f
  9227  0E8E  0DBA               	rlf	___ftdiv@f1+2,f
  9228  0E8F  0B89               	decfsz	9,f
  9229  0E90  2E8C               	goto	u4875
  9230  0E91  3001               	movlw	1
  9231  0E92  02BC               	subwf	___ftdiv@cntr,f
  9232  0E93  1D03               	btfss	3,2
  9233  0E94  2E72               	goto	l4308
  9234  0E95  083D               	movf	___ftdiv@f3,w
  9235  0E96  00A6               	movwf	___ftpack@arg
  9236  0E97  083E               	movf	___ftdiv@f3+1,w
  9237  0E98  00A7               	movwf	___ftpack@arg+1
  9238  0E99  083F               	movf	___ftdiv@f3+2,w
  9239  0E9A  00A8               	movwf	___ftpack@arg+2
  9240  0E9B  0840               	movf	___ftdiv@exp,w
  9241  0E9C  00FF               	movwf	127
  9242  0E9D  087F               	movf	127,w
  9243  0E9E  00A9               	movwf	___ftpack@exp
  9244  0E9F  0841               	movf	___ftdiv@sign,w
  9245  0EA0  00FF               	movwf	127
  9246  0EA1  087F               	movf	127,w
  9247  0EA2  00AA               	movwf	___ftpack@sign
  9248  0EA3  318C  2492         	fcall	___ftpack
  9249  0EA5  0020               	movlb	0	; select bank0
  9250  0EA6  0826               	movf	?___ftpack,w
  9251  0EA7  00B5               	movwf	?___ftdiv
  9252  0EA8  0827               	movf	?___ftpack+1,w
  9253  0EA9  00B6               	movwf	?___ftdiv+1
  9254  0EAA  0828               	movf	?___ftpack+2,w
  9255  0EAB  00B7               	movwf	?___ftdiv+2
  9256  0EAC  0008               	return
  9257  0EAD                     __end_of___ftdiv:	
  9258                           
  9259                           	psect	text41
  9260  0473                     __ptext41:	
  9261 ;; *************** function ___ftadd *****************
  9262 ;; Defined at:
  9263 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  9264 ;; Parameters:    Size  Location     Type
  9265 ;;  f1              3   11[BANK0 ] float 
  9266 ;;  f2              3   14[BANK0 ] float 
  9267 ;; Auto vars:     Size  Location     Type
  9268 ;;  exp1            1   20[BANK0 ] unsigned char 
  9269 ;;  exp2            1   19[BANK0 ] unsigned char 
  9270 ;;  sign            1   18[BANK0 ] unsigned char 
  9271 ;; Return value:  Size  Location     Type
  9272 ;;                  3   11[BANK0 ] float 
  9273 ;; Registers used:
  9274 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9275 ;; Tracked objects:
  9276 ;;		On entry : 0/0
  9277 ;;		On exit  : 0/0
  9278 ;;		Unchanged: 0/0
  9279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9280 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9281 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9282 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9283 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9284 ;;Total ram usage:       10 bytes
  9285 ;; Hardware stack levels used:    1
  9286 ;; Hardware stack levels required when called:    8
  9287 ;; This function calls:
  9288 ;;		___ftpack
  9289 ;; This function is called by:
  9290 ;;		_getADCValue
  9291 ;;		_loop
  9292 ;;		___ftsub
  9293 ;; This function uses a non-reentrant model
  9294 ;;
  9295                           
  9296                           
  9297                           ;psect for function ___ftadd
  9298  0473                     ___ftadd:	
  9299                           
  9300                           ;incstack = 0
  9301                           ; Regs used in ___ftadd: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9302  0473  0020               	movlb	0	; select bank0
  9303  0474  082B               	movf	___ftadd@f1,w
  9304  0475  00FD               	movwf	125
  9305  0476  082C               	movf	___ftadd@f1+1,w
  9306  0477  00FE               	movwf	126
  9307  0478  082D               	movf	___ftadd@f1+2,w
  9308  0479  00FF               	movwf	127
  9309  047A  1003               	clrc
  9310  047B  0D7E               	rlf	126,w
  9311  047C  0D7F               	rlf	127,w
  9312  047D  00FF               	movwf	127
  9313  047E  087F               	movf	127,w
  9314  047F  00B4               	movwf	___ftadd@exp1
  9315  0480  082E               	movf	___ftadd@f2,w
  9316  0481  00FD               	movwf	125
  9317  0482  082F               	movf	___ftadd@f2+1,w
  9318  0483  00FE               	movwf	126
  9319  0484  0830               	movf	___ftadd@f2+2,w
  9320  0485  00FF               	movwf	127
  9321  0486  1003               	clrc
  9322  0487  0D7E               	rlf	126,w
  9323  0488  0D7F               	rlf	127,w
  9324  0489  00FF               	movwf	127
  9325  048A  087F               	movf	127,w
  9326  048B  00B3               	movwf	___ftadd@exp2
  9327  048C  0834               	movf	___ftadd@exp1,w
  9328  048D  1903               	btfsc	3,2
  9329  048E  2C9B               	goto	l3710
  9330  048F  0833               	movf	___ftadd@exp2,w
  9331  0490  0234               	subwf	___ftadd@exp1,w
  9332  0491  1803               	skipnc
  9333  0492  2CA2               	goto	l3714
  9334  0493  0334               	decf	___ftadd@exp1,w
  9335  0494  3AFF               	xorlw	255
  9336  0495  0733               	addwf	___ftadd@exp2,w
  9337  0496  00B1               	movwf	??___ftadd
  9338  0497  3019               	movlw	25
  9339  0498  0231               	subwf	??___ftadd,w
  9340  0499  1C03               	skipc
  9341  049A  2CA2               	goto	l3714
  9342  049B                     l3710:	
  9343  049B  082E               	movf	___ftadd@f2,w
  9344  049C  00AB               	movwf	?___ftadd
  9345  049D  082F               	movf	___ftadd@f2+1,w
  9346  049E  00AC               	movwf	?___ftadd+1
  9347  049F  0830               	movf	___ftadd@f2+2,w
  9348  04A0  00AD               	movwf	?___ftadd+2
  9349  04A1  0008               	return
  9350  04A2                     l3714:	
  9351  04A2  0833               	movf	___ftadd@exp2,w
  9352  04A3  1903               	btfsc	3,2
  9353  04A4  0008               	return
  9354  04A5  0834               	movf	___ftadd@exp1,w
  9355  04A6  0233               	subwf	___ftadd@exp2,w
  9356  04A7  1803               	skipnc
  9357  04A8  2CB1               	goto	l3720
  9358  04A9  0333               	decf	___ftadd@exp2,w
  9359  04AA  3AFF               	xorlw	255
  9360  04AB  0734               	addwf	___ftadd@exp1,w
  9361  04AC  00B1               	movwf	??___ftadd
  9362  04AD  3019               	movlw	25
  9363  04AE  0231               	subwf	??___ftadd,w
  9364  04AF  1803               	btfsc	3,0
  9365  04B0  0008               	return
  9366  04B1                     l3720:	
  9367  04B1  3006               	movlw	6
  9368  04B2  00FF               	movwf	127
  9369  04B3  087F               	movf	127,w
  9370  04B4  00B2               	movwf	___ftadd@sign
  9371  04B5  1BAD               	btfsc	___ftadd@f1+2,7
  9372  04B6  17B2               	bsf	___ftadd@sign,7
  9373  04B7  1BB0               	btfsc	___ftadd@f2+2,7
  9374  04B8  1732               	bsf	___ftadd@sign,6
  9375  04B9  17AC               	bsf	___ftadd@f1+1,7
  9376  04BA  30FF               	movlw	255
  9377  04BB  05AB               	andwf	___ftadd@f1,f
  9378  04BC  30FF               	movlw	255
  9379  04BD  05AC               	andwf	___ftadd@f1+1,f
  9380  04BE  3000               	movlw	0
  9381  04BF  05AD               	andwf	___ftadd@f1+2,f
  9382  04C0  17AF               	bsf	___ftadd@f2+1,7
  9383  04C1  30FF               	movlw	255
  9384  04C2  05AE               	andwf	___ftadd@f2,f
  9385  04C3  30FF               	movlw	255
  9386  04C4  05AF               	andwf	___ftadd@f2+1,f
  9387  04C5  3000               	movlw	0
  9388  04C6  05B0               	andwf	___ftadd@f2+2,f
  9389  04C7  0833               	movf	___ftadd@exp2,w
  9390  04C8  0234               	subwf	___ftadd@exp1,w
  9391  04C9  1803               	skipnc
  9392  04CA  2CED               	goto	l3744
  9393  04CB                     l3732:	
  9394  04CB  3001               	movlw	1
  9395  04CC                     u3865:	
  9396  04CC  35AE               	lslf	___ftadd@f2,f
  9397  04CD  0DAF               	rlf	___ftadd@f2+1,f
  9398  04CE  0DB0               	rlf	___ftadd@f2+2,f
  9399  04CF  0B89               	decfsz	9,f
  9400  04D0  2CCC               	goto	u3865
  9401  04D1  3001               	movlw	1
  9402  04D2  02B3               	subwf	___ftadd@exp2,f
  9403  04D3  0833               	movf	___ftadd@exp2,w
  9404  04D4  0634               	xorwf	___ftadd@exp1,w
  9405  04D5  1903               	skipnz
  9406  04D6  2CE8               	goto	l3742
  9407  04D7  3001               	movlw	1
  9408  04D8  02B2               	subwf	___ftadd@sign,f
  9409  04D9  0832               	movf	___ftadd@sign,w
  9410  04DA  3907               	andlw	7
  9411  04DB  1903               	btfsc	3,2
  9412  04DC  2CE8               	goto	l3742
  9413  04DD  2CCB               	goto	l3732
  9414  04DE                     l3738:	
  9415  04DE  3001               	movlw	1
  9416  04DF                     u3895:	
  9417  04DF  36AD               	lsrf	___ftadd@f1+2,f
  9418  04E0  0CAC               	rrf	___ftadd@f1+1,f
  9419  04E1  0CAB               	rrf	___ftadd@f1,f
  9420  04E2  0B89               	decfsz	9,f
  9421  04E3  2CDF               	goto	u3895
  9422  04E4  3001               	movlw	1
  9423  04E5  00FF               	movwf	127
  9424  04E6  087F               	movf	127,w
  9425  04E7  07B4               	addwf	___ftadd@exp1,f
  9426  04E8                     l3742:	
  9427  04E8  0834               	movf	___ftadd@exp1,w
  9428  04E9  0633               	xorwf	___ftadd@exp2,w
  9429  04EA  1903               	btfsc	3,2
  9430  04EB  2D12               	goto	l722
  9431  04EC  2CDE               	goto	l3738
  9432  04ED                     l3744:	
  9433  04ED  0834               	movf	___ftadd@exp1,w
  9434  04EE  0233               	subwf	___ftadd@exp2,w
  9435  04EF  1803               	skipnc
  9436  04F0  2D12               	goto	l722
  9437  04F1                     l3746:	
  9438  04F1  3001               	movlw	1
  9439  04F2                     u3925:	
  9440  04F2  35AB               	lslf	___ftadd@f1,f
  9441  04F3  0DAC               	rlf	___ftadd@f1+1,f
  9442  04F4  0DAD               	rlf	___ftadd@f1+2,f
  9443  04F5  0B89               	decfsz	9,f
  9444  04F6  2CF2               	goto	u3925
  9445  04F7  3001               	movlw	1
  9446  04F8  02B4               	subwf	___ftadd@exp1,f
  9447  04F9  0833               	movf	___ftadd@exp2,w
  9448  04FA  0634               	xorwf	___ftadd@exp1,w
  9449  04FB  1903               	skipnz
  9450  04FC  2D0E               	goto	l3756
  9451  04FD  3001               	movlw	1
  9452  04FE  02B2               	subwf	___ftadd@sign,f
  9453  04FF  0832               	movf	___ftadd@sign,w
  9454  0500  3907               	andlw	7
  9455  0501  1903               	btfsc	3,2
  9456  0502  2D0E               	goto	l3756
  9457  0503  2CF1               	goto	l3746
  9458  0504                     l3752:	
  9459  0504  3001               	movlw	1
  9460  0505                     u3955:	
  9461  0505  36B0               	lsrf	___ftadd@f2+2,f
  9462  0506  0CAF               	rrf	___ftadd@f2+1,f
  9463  0507  0CAE               	rrf	___ftadd@f2,f
  9464  0508  0B89               	decfsz	9,f
  9465  0509  2D05               	goto	u3955
  9466  050A  3001               	movlw	1
  9467  050B  00FF               	movwf	127
  9468  050C  087F               	movf	127,w
  9469  050D  07B3               	addwf	___ftadd@exp2,f
  9470  050E                     l3756:	
  9471  050E  0834               	movf	___ftadd@exp1,w
  9472  050F  0633               	xorwf	___ftadd@exp2,w
  9473  0510  1D03               	skipz
  9474  0511  2D04               	goto	l3752
  9475  0512                     l722:	
  9476  0512  1FB2               	btfss	___ftadd@sign,7
  9477  0513  2D24               	goto	l3760
  9478  0514  30FF               	movlw	255
  9479  0515  06AB               	xorwf	___ftadd@f1,f
  9480  0516  30FF               	movlw	255
  9481  0517  06AC               	xorwf	___ftadd@f1+1,f
  9482  0518  30FF               	movlw	255
  9483  0519  06AD               	xorwf	___ftadd@f1+2,f
  9484  051A  3001               	movlw	1
  9485  051B  07AB               	addwf	___ftadd@f1,f
  9486  051C  3000               	movlw	0
  9487  051D  1803               	skipnc
  9488  051E  3001               	movlw	1
  9489  051F  07AC               	addwf	___ftadd@f1+1,f
  9490  0520  3000               	movlw	0
  9491  0521  1803               	skipnc
  9492  0522  3001               	movlw	1
  9493  0523  07AD               	addwf	___ftadd@f1+2,f
  9494  0524                     l3760:	
  9495  0524  1F32               	btfss	___ftadd@sign,6
  9496  0525  2D36               	goto	l3764
  9497  0526  30FF               	movlw	255
  9498  0527  06AE               	xorwf	___ftadd@f2,f
  9499  0528  30FF               	movlw	255
  9500  0529  06AF               	xorwf	___ftadd@f2+1,f
  9501  052A  30FF               	movlw	255
  9502  052B  06B0               	xorwf	___ftadd@f2+2,f
  9503  052C  3001               	movlw	1
  9504  052D  07AE               	addwf	___ftadd@f2,f
  9505  052E  3000               	movlw	0
  9506  052F  1803               	skipnc
  9507  0530  3001               	movlw	1
  9508  0531  07AF               	addwf	___ftadd@f2+1,f
  9509  0532  3000               	movlw	0
  9510  0533  1803               	skipnc
  9511  0534  3001               	movlw	1
  9512  0535  07B0               	addwf	___ftadd@f2+2,f
  9513  0536                     l3764:	
  9514  0536  01B2               	clrf	___ftadd@sign
  9515  0537  082B               	movf	___ftadd@f1,w
  9516  0538  07AE               	addwf	___ftadd@f2,f
  9517  0539  082C               	movf	___ftadd@f1+1,w
  9518  053A  3DAF               	addwfc	___ftadd@f2+1,f
  9519  053B  082D               	movf	___ftadd@f1+2,w
  9520  053C  3DB0               	addwfc	___ftadd@f2+2,f
  9521  053D  1FB0               	btfss	___ftadd@f2+2,7
  9522  053E  2D51               	goto	l3774
  9523  053F  30FF               	movlw	255
  9524  0540  06AE               	xorwf	___ftadd@f2,f
  9525  0541  30FF               	movlw	255
  9526  0542  06AF               	xorwf	___ftadd@f2+1,f
  9527  0543  30FF               	movlw	255
  9528  0544  06B0               	xorwf	___ftadd@f2+2,f
  9529  0545  3001               	movlw	1
  9530  0546  07AE               	addwf	___ftadd@f2,f
  9531  0547  3000               	movlw	0
  9532  0548  1803               	skipnc
  9533  0549  3001               	movlw	1
  9534  054A  07AF               	addwf	___ftadd@f2+1,f
  9535  054B  3000               	movlw	0
  9536  054C  1803               	skipnc
  9537  054D  3001               	movlw	1
  9538  054E  07B0               	addwf	___ftadd@f2+2,f
  9539  054F  01B2               	clrf	___ftadd@sign
  9540  0550  0AB2               	incf	___ftadd@sign,f
  9541  0551                     l3774:	
  9542  0551  082E               	movf	___ftadd@f2,w
  9543  0552  00A6               	movwf	___ftpack@arg
  9544  0553  082F               	movf	___ftadd@f2+1,w
  9545  0554  00A7               	movwf	___ftpack@arg+1
  9546  0555  0830               	movf	___ftadd@f2+2,w
  9547  0556  00A8               	movwf	___ftpack@arg+2
  9548  0557  0834               	movf	___ftadd@exp1,w
  9549  0558  00FF               	movwf	127
  9550  0559  087F               	movf	127,w
  9551  055A  00A9               	movwf	___ftpack@exp
  9552  055B  0832               	movf	___ftadd@sign,w
  9553  055C  00FF               	movwf	127
  9554  055D  087F               	movf	127,w
  9555  055E  00AA               	movwf	___ftpack@sign
  9556  055F  318C  2492         	fcall	___ftpack
  9557  0561  0020               	movlb	0	; select bank0
  9558  0562  0826               	movf	?___ftpack,w
  9559  0563  00AB               	movwf	?___ftadd
  9560  0564  0827               	movf	?___ftpack+1,w
  9561  0565  00AC               	movwf	?___ftadd+1
  9562  0566  0828               	movf	?___ftpack+2,w
  9563  0567  00AD               	movwf	?___ftadd+2
  9564  0568  0008               	return
  9565  0569                     __end_of___ftadd:	
  9566                           
  9567                           	psect	text42
  9568  093C                     __ptext42:	
  9569 ;; *************** function ___awtoft *****************
  9570 ;; Defined at:
  9571 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9572 ;; Parameters:    Size  Location     Type
  9573 ;;  c               2    0[COMMON] int 
  9574 ;; Auto vars:     Size  Location     Type
  9575 ;;  sign            1    3[COMMON] unsigned char 
  9576 ;; Return value:  Size  Location     Type
  9577 ;;                  3    0[COMMON] float 
  9578 ;; Registers used:
  9579 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9580 ;; Tracked objects:
  9581 ;;		On entry : 0/0
  9582 ;;		On exit  : 0/0
  9583 ;;		Unchanged: 0/0
  9584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9585 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9586 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9588 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;Total ram usage:        4 bytes
  9590 ;; Hardware stack levels used:    1
  9591 ;; Hardware stack levels required when called:    8
  9592 ;; This function calls:
  9593 ;;		___ftpack
  9594 ;; This function is called by:
  9595 ;;		_getADCValue
  9596 ;; This function uses a non-reentrant model
  9597 ;;
  9598                           
  9599                           
  9600                           ;psect for function ___awtoft
  9601  093C                     ___awtoft:	
  9602                           
  9603                           ;incstack = 0
  9604                           ; Regs used in ___awtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9605  093C  01F3               	clrf	___awtoft@sign
  9606  093D  1FF1               	btfss	___awtoft@c+1,7
  9607  093E  2946               	goto	l4274
  9608  093F  09F0               	comf	___awtoft@c,f
  9609  0940  09F1               	comf	___awtoft@c+1,f
  9610  0941  0AF0               	incf	___awtoft@c,f
  9611  0942  1903               	skipnz
  9612  0943  0AF1               	incf	___awtoft@c+1,f
  9613  0944  01F3               	clrf	___awtoft@sign
  9614  0945  0AF3               	incf	___awtoft@sign,f
  9615  0946                     l4274:	
  9616  0946  0870               	movf	___awtoft@c,w
  9617  0947  0020               	movlb	0	; select bank0
  9618  0948  00A6               	movwf	___ftpack@arg
  9619  0949  0871               	movf	___awtoft@c+1,w
  9620  094A  00A7               	movwf	___ftpack@arg+1
  9621  094B  01A8               	clrf	___ftpack@arg+2
  9622  094C  308E               	movlw	142
  9623  094D  00FF               	movwf	127
  9624  094E  087F               	movf	127,w
  9625  094F  00A9               	movwf	___ftpack@exp
  9626  0950  0873               	movf	___awtoft@sign,w
  9627  0951  00FF               	movwf	127
  9628  0952  087F               	movf	127,w
  9629  0953  00AA               	movwf	___ftpack@sign
  9630  0954  318C  2492         	fcall	___ftpack
  9631  0956  0020               	movlb	0	; select bank0
  9632  0957  0826               	movf	?___ftpack,w
  9633  0958  00F0               	movwf	?___awtoft
  9634  0959  0827               	movf	?___ftpack+1,w
  9635  095A  00F1               	movwf	?___awtoft+1
  9636  095B  0828               	movf	?___ftpack+2,w
  9637  095C  00F2               	movwf	?___awtoft+2
  9638  095D  0008               	return
  9639  095E                     __end_of___awtoft:	
  9640                           
  9641                           	psect	text43
  9642  080F                     __ptext43:	
  9643 ;; *************** function ___lbtoft *****************
  9644 ;; Defined at:
  9645 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
  9646 ;; Parameters:    Size  Location     Type
  9647 ;;  c               1    wreg     unsigned char 
  9648 ;; Auto vars:     Size  Location     Type
  9649 ;;  c               1   11[BANK0 ] unsigned char 
  9650 ;; Return value:  Size  Location     Type
  9651 ;;                  3    0[COMMON] float 
  9652 ;; Registers used:
  9653 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9654 ;; Tracked objects:
  9655 ;;		On entry : 0/0
  9656 ;;		On exit  : 0/0
  9657 ;;		Unchanged: 0/0
  9658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9659 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9663 ;;Total ram usage:        5 bytes
  9664 ;; Hardware stack levels used:    1
  9665 ;; Hardware stack levels required when called:    8
  9666 ;; This function calls:
  9667 ;;		___ftpack
  9668 ;; This function is called by:
  9669 ;;		_loop
  9670 ;;		_main
  9671 ;; This function uses a non-reentrant model
  9672 ;;
  9673                           
  9674                           
  9675                           ;psect for function ___lbtoft
  9676  080F                     ___lbtoft:	
  9677                           
  9678                           ;incstack = 0
  9679                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9680                           ;___lbtoft@c stored from wreg
  9681  080F  0020               	movlb	0	; select bank0
  9682  0810  00AB               	movwf	___lbtoft@c
  9683  0811  082B               	movf	___lbtoft@c,w
  9684  0812  00FD               	movwf	125
  9685  0813  01FE               	clrf	126
  9686  0814  01FF               	clrf	127
  9687  0815  087D               	movf	125,w
  9688  0816  00A6               	movwf	___ftpack@arg
  9689  0817  087E               	movf	126,w
  9690  0818  00A7               	movwf	___ftpack@arg+1
  9691  0819  087F               	movf	127,w
  9692  081A  00A8               	movwf	___ftpack@arg+2
  9693  081B  308E               	movlw	142
  9694  081C  00FF               	movwf	127
  9695  081D  087F               	movf	127,w
  9696  081E  00A9               	movwf	___ftpack@exp
  9697  081F  01AA               	clrf	___ftpack@sign
  9698  0820  318C  2492         	fcall	___ftpack
  9699  0822  0020               	movlb	0	; select bank0
  9700  0823  0826               	movf	?___ftpack,w
  9701  0824  00F0               	movwf	?___lbtoft
  9702  0825  0827               	movf	?___ftpack+1,w
  9703  0826  00F1               	movwf	?___lbtoft+1
  9704  0827  0828               	movf	?___ftpack+2,w
  9705  0828  00F2               	movwf	?___lbtoft+2
  9706  0829  0008               	return
  9707  082A                     __end_of___lbtoft:	
  9708                           
  9709                           	psect	text44
  9710  0C92                     __ptext44:	
  9711 ;; *************** function ___ftpack *****************
  9712 ;; Defined at:
  9713 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  9714 ;; Parameters:    Size  Location     Type
  9715 ;;  arg             3    6[BANK0 ] unsigned um
  9716 ;;  exp             1    9[BANK0 ] unsigned char 
  9717 ;;  sign            1   10[BANK0 ] unsigned char 
  9718 ;; Auto vars:     Size  Location     Type
  9719 ;;		None
  9720 ;; Return value:  Size  Location     Type
  9721 ;;                  3    6[BANK0 ] float 
  9722 ;; Registers used:
  9723 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  9724 ;; Tracked objects:
  9725 ;;		On entry : 0/0
  9726 ;;		On exit  : 0/0
  9727 ;;		Unchanged: 0/0
  9728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9729 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9732 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9733 ;;Total ram usage:        5 bytes
  9734 ;; Hardware stack levels used:    1
  9735 ;; Hardware stack levels required when called:    7
  9736 ;; This function calls:
  9737 ;;		Nothing
  9738 ;; This function is called by:
  9739 ;;		___awtoft
  9740 ;;		___ftadd
  9741 ;;		___ftdiv
  9742 ;;		___ftmul
  9743 ;;		___lbtoft
  9744 ;;		___lltoft
  9745 ;; This function uses a non-reentrant model
  9746 ;;
  9747                           
  9748                           
  9749                           ;psect for function ___ftpack
  9750  0C92                     ___ftpack:	
  9751                           
  9752                           ;incstack = 0
  9753                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+9-btemp+11]
  9754  0C92  0020               	movlb	0	; select bank0
  9755  0C93  0829               	movf	___ftpack@exp,w
  9756  0C94  1903               	btfsc	3,2
  9757  0C95  2C9B               	goto	l3608
  9758  0C96  0828               	movf	___ftpack@arg+2,w
  9759  0C97  0427               	iorwf	___ftpack@arg+1,w
  9760  0C98  0426               	iorwf	___ftpack@arg,w
  9761  0C99  1D03               	skipz
  9762  0C9A  2CAC               	goto	l3616
  9763  0C9B                     l3608:	
  9764  0C9B  3000               	movlw	0
  9765  0C9C  00A6               	movwf	?___ftpack
  9766  0C9D  3000               	movlw	0
  9767  0C9E  00A7               	movwf	?___ftpack+1
  9768  0C9F  3000               	movlw	0
  9769  0CA0  00A8               	movwf	?___ftpack+2
  9770  0CA1  0008               	return
  9771  0CA2                     l3612:	
  9772  0CA2  3001               	movlw	1
  9773  0CA3  00FF               	movwf	127
  9774  0CA4  087F               	movf	127,w
  9775  0CA5  07A9               	addwf	___ftpack@exp,f
  9776  0CA6  3001               	movlw	1
  9777  0CA7                     u3545:	
  9778  0CA7  36A8               	lsrf	___ftpack@arg+2,f
  9779  0CA8  0CA7               	rrf	___ftpack@arg+1,f
  9780  0CA9  0CA6               	rrf	___ftpack@arg,f
  9781  0CAA  0B89               	decfsz	9,f
  9782  0CAB  2CA7               	goto	u3545
  9783  0CAC                     l3616:	
  9784  0CAC  30FE               	movlw	254
  9785  0CAD  0528               	andwf	___ftpack@arg+2,w
  9786  0CAE  1903               	btfsc	3,2
  9787  0CAF  2CC5               	goto	l3624
  9788  0CB0  2CA2               	goto	l3612
  9789  0CB1                     l3618:	
  9790  0CB1  3001               	movlw	1
  9791  0CB2  00FF               	movwf	127
  9792  0CB3  087F               	movf	127,w
  9793  0CB4  07A9               	addwf	___ftpack@exp,f
  9794  0CB5  3001               	movlw	1
  9795  0CB6  07A6               	addwf	___ftpack@arg,f
  9796  0CB7  3000               	movlw	0
  9797  0CB8  1803               	skipnc
  9798  0CB9  3001               	movlw	1
  9799  0CBA  07A7               	addwf	___ftpack@arg+1,f
  9800  0CBB  3000               	movlw	0
  9801  0CBC  1803               	skipnc
  9802  0CBD  3001               	movlw	1
  9803  0CBE  07A8               	addwf	___ftpack@arg+2,f
  9804  0CBF  3001               	movlw	1
  9805  0CC0                     u3565:	
  9806  0CC0  36A8               	lsrf	___ftpack@arg+2,f
  9807  0CC1  0CA7               	rrf	___ftpack@arg+1,f
  9808  0CC2  0CA6               	rrf	___ftpack@arg,f
  9809  0CC3  0B89               	decfsz	9,f
  9810  0CC4  2CC0               	goto	u3565
  9811  0CC5                     l3624:	
  9812  0CC5  30FF               	movlw	255
  9813  0CC6  0528               	andwf	___ftpack@arg+2,w
  9814  0CC7  1903               	btfsc	3,2
  9815  0CC8  2CD2               	goto	l3628
  9816  0CC9  2CB1               	goto	l3618
  9817  0CCA                     l3626:	
  9818  0CCA  3001               	movlw	1
  9819  0CCB  02A9               	subwf	___ftpack@exp,f
  9820  0CCC  3001               	movlw	1
  9821  0CCD                     u3585:	
  9822  0CCD  35A6               	lslf	___ftpack@arg,f
  9823  0CCE  0DA7               	rlf	___ftpack@arg+1,f
  9824  0CCF  0DA8               	rlf	___ftpack@arg+2,f
  9825  0CD0  0B89               	decfsz	9,f
  9826  0CD1  2CCD               	goto	u3585
  9827  0CD2                     l3628:	
  9828  0CD2  1BA7               	btfsc	___ftpack@arg+1,7
  9829  0CD3  2CD8               	goto	l698
  9830  0CD4  3002               	movlw	2
  9831  0CD5  0229               	subwf	___ftpack@exp,w
  9832  0CD6  1803               	skipnc
  9833  0CD7  2CCA               	goto	l3626
  9834  0CD8                     l698:	
  9835  0CD8  1829               	btfsc	___ftpack@exp,0
  9836  0CD9  2CE0               	goto	l699
  9837  0CDA  30FF               	movlw	255
  9838  0CDB  05A6               	andwf	___ftpack@arg,f
  9839  0CDC  307F               	movlw	127
  9840  0CDD  05A7               	andwf	___ftpack@arg+1,f
  9841  0CDE  30FF               	movlw	255
  9842  0CDF  05A8               	andwf	___ftpack@arg+2,f
  9843  0CE0                     l699:	
  9844  0CE0  1003               	clrc
  9845  0CE1  0CA9               	rrf	___ftpack@exp,f
  9846  0CE2  0829               	movf	___ftpack@exp,w
  9847  0CE3  00FD               	movwf	125
  9848  0CE4  01FE               	clrf	126
  9849  0CE5  01FF               	clrf	127
  9850  0CE6  3010               	movlw	16
  9851  0CE7                     u3625:	
  9852  0CE7  35FD               	lslf	125,f
  9853  0CE8  0DFE               	rlf	126,f
  9854  0CE9  0DFF               	rlf	127,f
  9855  0CEA  0B89               	decfsz	9,f
  9856  0CEB  2CE7               	goto	u3625
  9857  0CEC  087D               	movf	125,w
  9858  0CED  04A6               	iorwf	___ftpack@arg,f
  9859  0CEE  087E               	movf	126,w
  9860  0CEF  04A7               	iorwf	___ftpack@arg+1,f
  9861  0CF0  087F               	movf	127,w
  9862  0CF1  04A8               	iorwf	___ftpack@arg+2,f
  9863  0CF2  082A               	movf	___ftpack@sign,w
  9864  0CF3  1903               	btfsc	3,2
  9865  0CF4  0008               	return
  9866  0CF5  17A8               	bsf	___ftpack@arg+2,7
  9867  0CF6  0008               	return
  9868  0CF7                     __end_of___ftpack:	
  9869                           
  9870                           	psect	text45
  9871  08FC                     __ptext45:	
  9872 ;; *************** function _EEPROMWrite *****************
  9873 ;; Defined at:
  9874 ;;		line 4 in file "eeprom.c"
  9875 ;; Parameters:    Size  Location     Type
  9876 ;;  address         2    0[COMMON] unsigned int 
  9877 ;;  data            1    2[COMMON] unsigned char 
  9878 ;; Auto vars:     Size  Location     Type
  9879 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  9880 ;; Return value:  Size  Location     Type
  9881 ;;                  1    wreg      void 
  9882 ;; Registers used:
  9883 ;;		wreg, status,2, status,0
  9884 ;; Tracked objects:
  9885 ;;		On entry : 0/0
  9886 ;;		On exit  : 0/0
  9887 ;;		Unchanged: 0/0
  9888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9889 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9890 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9893 ;;Total ram usage:        4 bytes
  9894 ;; Hardware stack levels used:    1
  9895 ;; Hardware stack levels required when called:    7
  9896 ;; This function calls:
  9897 ;;		Nothing
  9898 ;; This function is called by:
  9899 ;;		_loop
  9900 ;;		_main
  9901 ;; This function uses a non-reentrant model
  9902 ;;
  9903                           
  9904                           
  9905                           ;psect for function _EEPROMWrite
  9906  08FC                     _EEPROMWrite:	
  9907                           
  9908                           ;eeprom.c: 6: unsigned char GIEBitValue = INTCONbits.GIE;
  9909                           
  9910                           ;incstack = 0
  9911                           ; Regs used in _EEPROMWrite: [wreg+status,2+status,0]
  9912  08FC  3000               	movlw	0
  9913  08FD  1B8B               	btfsc	11,7	;volatile
  9914  08FE  3001               	movlw	1
  9915  08FF  00F3               	movwf	EEPROMWrite@GIEBitValue
  9916                           
  9917                           ;eeprom.c: 8: NVMADRH = ((address >> 8) & 0xFF);
  9918  0900  0871               	movf	EEPROMWrite@address+1,w
  9919  0901  0031               	movlb	17	; select bank17
  9920  0902  0092               	movwf	18	;volatile
  9921                           
  9922                           ;eeprom.c: 9: NVMADRL = (address & 0xFF);
  9923  0903  0870               	movf	EEPROMWrite@address,w
  9924  0904  0091               	movwf	17	;volatile
  9925                           
  9926                           ;eeprom.c: 10: NVMDATL = data;
  9927  0905  0872               	movf	EEPROMWrite@data,w
  9928  0906  0093               	movwf	19	;volatile
  9929                           
  9930                           ;eeprom.c: 11: NVMCON1bits.NVMREGS = 1;
  9931  0907  1715               	bsf	21,6	;volsfr
  9932                           
  9933                           ;eeprom.c: 12: NVMCON1bits.WREN = 1;
  9934  0908  1515               	bsf	21,2	;volsfr
  9935                           
  9936                           ;eeprom.c: 13: INTCONbits.GIE = 0;
  9937  0909  138B               	bcf	11,7	;volatile
  9938                           
  9939                           ;eeprom.c: 14: NVMCON2 = 0x55;
  9940  090A  3055               	movlw	85
  9941  090B  0096               	movwf	22	;volsfr
  9942                           
  9943                           ;eeprom.c: 15: NVMCON2 = 0xAA;
  9944  090C  30AA               	movlw	170
  9945  090D  0096               	movwf	22	;volsfr
  9946                           
  9947                           ;eeprom.c: 16: NVMCON1bits.WR = 1;
  9948  090E  1495               	bsf	21,1	;volsfr
  9949                           
  9950                           ;eeprom.c: 18: while (NVMCON1bits.WR){
  9951  090F  2911               	goto	l346
  9952  0910                     l347:	
  9953                           
  9954                           ;eeprom.c: 19: __nop();
  9955  0910  0000               	nop
  9956  0911                     l346:	
  9957  0911  0031               	movlb	17	; select bank17
  9958  0912  1895               	btfsc	21,1	;volsfr
  9959  0913  2910               	goto	l347
  9960                           
  9961                           ;eeprom.c: 20: };eeprom.c: 22: NVMCON1bits.WREN = 0;
  9962  0914  1115               	bcf	21,2	;volsfr
  9963                           
  9964                           ;eeprom.c: 23: INTCONbits.GIE = GIEBitValue;
  9965  0915  0C73               	rrf	EEPROMWrite@GIEBitValue,w
  9966  0916  1C03               	skipc
  9967  0917  138B               	bcf	11,7	;volatile
  9968  0918  1803               	skipnc
  9969  0919  178B               	bsf	11,7	;volatile
  9970  091A  0008               	return
  9971  091B                     __end_of_EEPROMWrite:	
  9972                           
  9973                           	psect	text46
  9974  08DD                     __ptext46:	
  9975 ;; *************** function _EEPROMRead *****************
  9976 ;; Defined at:
  9977 ;;		line 26 in file "eeprom.c"
  9978 ;; Parameters:    Size  Location     Type
  9979 ;;  address         2    0[COMMON] unsigned int 
  9980 ;; Auto vars:     Size  Location     Type
  9981 ;;		None
  9982 ;; Return value:  Size  Location     Type
  9983 ;;                  1    wreg      unsigned char 
  9984 ;; Registers used:
  9985 ;;		wreg, status,2
  9986 ;; Tracked objects:
  9987 ;;		On entry : 0/0
  9988 ;;		On exit  : 0/0
  9989 ;;		Unchanged: 0/0
  9990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9991 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9994 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9995 ;;Total ram usage:        2 bytes
  9996 ;; Hardware stack levels used:    1
  9997 ;; Hardware stack levels required when called:    7
  9998 ;; This function calls:
  9999 ;;		Nothing
 10000 ;; This function is called by:
 10001 ;;		_main
 10002 ;; This function uses a non-reentrant model
 10003 ;;
 10004                           
 10005                           
 10006                           ;psect for function _EEPROMRead
 10007  08DD                     _EEPROMRead:	
 10008                           
 10009                           ;eeprom.c: 27: NVMADRH = ((address >> 8) & 0xFF);
 10010                           
 10011                           ;incstack = 0
 10012                           ; Regs used in _EEPROMRead: [wreg+status,2]
 10013  08DD  0871               	movf	EEPROMRead@address+1,w
 10014  08DE  0031               	movlb	17	; select bank17
 10015  08DF  0092               	movwf	18	;volatile
 10016                           
 10017                           ;eeprom.c: 28: NVMADRL = (address & 0xFF);
 10018  08E0  0870               	movf	EEPROMRead@address,w
 10019  08E1  0091               	movwf	17	;volatile
 10020                           
 10021                           ;eeprom.c: 29: NVMCON1bits.NVMREGS = 1;
 10022  08E2  1715               	bsf	21,6	;volsfr
 10023                           
 10024                           ;eeprom.c: 30: NVMCON1bits.RD = 1;
 10025  08E3  1415               	bsf	21,0	;volsfr
 10026                           
 10027                           ;eeprom.c: 31: __nop();
 10028  08E4  0000               	nop
 10029                           
 10030                           ;eeprom.c: 32: __nop();
 10031  08E5  0000               	nop
 10032                           
 10033                           ;eeprom.c: 33: __nop();__nop();
 10034  08E6  0000               	nop
 10035  08E7  0000               	nop
 10036                           
 10037                           ;eeprom.c: 34: __nop();__nop();
 10038  08E8  0000               	nop
 10039  08E9  0000               	nop
 10040                           
 10041                           ;eeprom.c: 35: __nop();__nop();
 10042  08EA  0000               	nop
 10043  08EB  0000               	nop
 10044                           
 10045                           ;eeprom.c: 36: __nop();__nop();
 10046  08EC  0000               	nop
 10047  08ED  0000               	nop
 10048                           
 10049                           ;eeprom.c: 37: __nop();__nop();
 10050  08EE  0000               	nop
 10051  08EF  0000               	nop
 10052                           
 10053                           ;eeprom.c: 38: __nop();__nop();
 10054  08F0  0000               	nop
 10055  08F1  0000               	nop
 10056                           
 10057                           ;eeprom.c: 39: __nop();__nop();
 10058  08F2  0000               	nop
 10059  08F3  0000               	nop
 10060                           
 10061                           ;eeprom.c: 40: __nop();__nop();
 10062  08F4  0000               	nop
 10063  08F5  0000               	nop
 10064                           
 10065                           ;eeprom.c: 41: __nop();__nop();
 10066  08F6  0000               	nop
 10067  08F7  0000               	nop
 10068                           
 10069                           ;eeprom.c: 42: __nop();
 10070  08F8  0000               	nop
 10071                           
 10072                           ;eeprom.c: 44: return (NVMDATL);
 10073  08F9  0031               	movlb	17	; select bank17
 10074  08FA  0813               	movf	19,w	;volatile
 10075  08FB  0008               	return
 10076  08FC                     __end_of_EEPROMRead:	
 10077                           
 10078                           	psect	intentry
 10079  0004                     __pintentry:	
 10080 ;; *************** function _ISR *****************
 10081 ;; Defined at:
 10082 ;;		line 11 in file "main.c"
 10083 ;; Parameters:    Size  Location     Type
 10084 ;;		None
 10085 ;; Auto vars:     Size  Location     Type
 10086 ;;		None
 10087 ;; Return value:  Size  Location     Type
 10088 ;;                  1    wreg      void 
 10089 ;; Registers used:
 10090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath, cstack
 10091 ;; Tracked objects:
 10092 ;;		On entry : 0/0
 10093 ;;		On exit  : 0/0
 10094 ;;		Unchanged: 0/0
 10095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10098 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10099 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;Total ram usage:        6 bytes
 10101 ;; Hardware stack levels used:    1
 10102 ;; Hardware stack levels required when called:    6
 10103 ;; This function calls:
 10104 ;;		_nrf24l01ISR
 10105 ;;		_resetWDT
 10106 ;; This function is called by:
 10107 ;;		Interrupt level 1
 10108 ;; This function uses a non-reentrant model
 10109 ;;
 10110                           
 10111  0004                     _ISR:	
 10112                           
 10113                           ;incstack = 0
 10114                           ; Regs used in _ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+9+btemp+11+p
      +                          clath+cstack]
 10115  0004  3180               	pagesel	$
 10116  0005  0874               	movf	116,w
 10117  0006  0020               	movlb	0	; select bank0
 10118  0007  00A0               	movwf	??_ISR
 10119  0008  0875               	movf	117,w
 10120  0009  00A1               	movwf	??_ISR+1
 10121  000A  087C               	movf	124,w
 10122  000B  00A2               	movwf	??_ISR+2
 10123  000C  087D               	movf	125,w
 10124  000D  00A3               	movwf	??_ISR+3
 10125  000E  087F               	movf	127,w
 10126  000F  00A4               	movwf	??_ISR+4
 10127  0010  30B1               	movlw	low ___int_sp
 10128  0011  0086               	movwf	6
 10129  0012  3022               	movlw	high ___int_sp
 10130  0013  0087               	movwf	7
 10131  0014  0875               	movf	117,w
 10132  0015  00A5               	movwf	??_ISR+5
 10133                           
 10134                           ;main.c: 13: resetWDT();
 10135  0016  3197  27AC  3180   	fcall	_resetWDT
 10136                           
 10137                           ;main.c: 15: if (PIR0bits.INTF){
 10138  0019  0020               	movlb	0	; select bank0
 10139  001A  1C10               	btfss	16,0	;volatile
 10140  001B  2820               	goto	i1l4772
 10141                           
 10142                           ;main.c: 16: nrf24l01ISR();
 10143  001C  318B  232F         	fcall	_nrf24l01ISR
 10144                           
 10145                           ;main.c: 17: PIR0bits.INTF = 0;
 10146  001E  0020               	movlb	0	; select bank0
 10147  001F  1010               	bcf	16,0	;volatile
 10148  0020                     i1l4772:	
 10149                           
 10150                           ;main.c: 18: };main.c: 20: if (PIR1bits.ADIF){
 10151  0020  1B11               	btfsc	17,6	;volatile
 10152                           
 10153                           ;main.c: 21: PIR1bits.ADIF = 0;
 10154  0021  1311               	bcf	17,6	;volatile
 10155  0022  0825               	movf	??_ISR+5,w
 10156  0023  00FF               	movwf	127
 10157  0024  0824               	movf	??_ISR+4,w
 10158  0025  00FD               	movwf	125
 10159  0026  0823               	movf	??_ISR+3,w
 10160  0027  00FC               	movwf	124
 10161  0028  0822               	movf	??_ISR+2,w
 10162  0029  00F5               	movwf	117
 10163  002A  0821               	movf	??_ISR+1,w
 10164  002B  00F4               	movwf	116
 10165  002C  0009               	retfie
 10166  002D                     __end_of_ISR:	
 10167                           
 10168                           	psect	text48
 10169  0B2F                     __ptext48:	
 10170 ;; *************** function _nrf24l01ISR *****************
 10171 ;; Defined at:
 10172 ;;		line 191 in file "nrf24l01.c"
 10173 ;; Parameters:    Size  Location     Type
 10174 ;;		None
 10175 ;; Auto vars:     Size  Location     Type
 10176 ;;		None
 10177 ;; Return value:  Size  Location     Type
 10178 ;;                  1    wreg      void 
 10179 ;; Registers used:
 10180 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath
 10181 ;; Tracked objects:
 10182 ;;		On entry : 0/0
 10183 ;;		On exit  : 0/0
 10184 ;;		Unchanged: 0/0
 10185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10190 ;;Total ram usage:        0 bytes
 10191 ;; Hardware stack levels used:    1
 10192 ;; Hardware stack levels required when called:    5
 10193 ;; This function calls:
 10194 ;;		_nrf24l01Send
 10195 ;;		_nrf24l01Service
 10196 ;;		_nrf24l01SetRXMode
 10197 ;; This function is called by:
 10198 ;;		_ISR
 10199 ;; This function uses a non-reentrant model
 10200 ;;
 10201                           
 10202                           
 10203                           ;psect for function _nrf24l01ISR
 10204  0B2F                     _nrf24l01ISR:	
 10205                           
 10206                           ;nrf24l01.c: 193: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
 10207                           
 10208                           ;incstack = 0
 10209                           ; Regs used in _nrf24l01ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+9+bt
      +                          emp+11+pclath]
 10210  0B2F  3000               	movlw	0
 10211  0B30  001E               	movwi fsr1++
 10212  0B31  3007               	movlw	7
 10213  0B32  3197  27ED  318B   	fcall	_nrf24l01Send
 10214  0B35  00FF               	movwf	127
 10215  0B36  087F               	movf	127,w
 10216  0B37  0020               	movlb	0	; select bank0
 10217  0B38  00E6               	movwf	_status+2	;volatile
 10218                           
 10219                           ;nrf24l01.c: 196: if (status.statusRegister.RX_DR){
 10220  0B39  1F66               	btfss	_status+2,6	;volatile
 10221  0B3A  2B47               	goto	i1l4636
 10222                           
 10223                           ;nrf24l01.c: 198: if (status.RX == 0){
 10224  0B3B  0865               	movf	_status+1,w	;volatile
 10225  0B3C  1D03               	btfss	3,2
 10226  0B3D  2B43               	goto	i1l291
 10227                           
 10228                           ;nrf24l01.c: 199: status.RX = 1;
 10229  0B3E  3001               	movlw	1
 10230  0B3F  00FF               	movwf	127
 10231  0B40  087F               	movf	127,w
 10232  0B41  00E5               	movwf	_status+1	;volatile
 10233                           
 10234                           ;nrf24l01.c: 200: }
 10235  0B42  2B44               	goto	i1l4634
 10236  0B43                     i1l291:	
 10237                           
 10238                           ;nrf24l01.c: 202: else{;nrf24l01.c: 203: status.statusRegister.RX_DR = 0;
 10239  0B43  1366               	bcf	_status+2,6	;volatile
 10240  0B44                     i1l4634:	
 10241                           
 10242                           ;nrf24l01.c: 204: };nrf24l01.c: 206: nrf24l01Service();
 10243  0B44  318F  2756  318B   	fcall	_nrf24l01Service
 10244  0B47                     i1l4636:	
 10245                           
 10246                           ;nrf24l01.c: 207: };nrf24l01.c: 209: if (status.statusRegister.TX_DS){
 10247  0B47  1EE6               	btfss	_status+2,5	;volatile
 10248  0B48  2B6C               	goto	i1l4652
 10249                           
 10250                           ;nrf24l01.c: 211: if (lastTXPacket->packetData.ACKRequest){
 10251  0B49  0869               	movf	_lastTXPacket,w
 10252  0B4A  0084               	movwf	4
 10253  0B4B  3001               	movlw	1	; select bank2/3
 10254  0B4C  0085               	movwf	5
 10255  0B4D  1D00               	btfss	0,2
 10256  0B4E  2B5C               	goto	i1l4644
 10257                           
 10258                           ;nrf24l01.c: 212: status.TX = 3;
 10259  0B4F  3003               	movlw	3
 10260  0B50  00FF               	movwf	127
 10261  0B51  087F               	movf	127,w
 10262  0B52  00E4               	movwf	_status	;volatile
 10263                           
 10264                           ;nrf24l01.c: 213: status.retryCount = 0xFF;
 10265  0B53  30FF               	movlw	255
 10266  0B54  00FF               	movwf	127
 10267  0B55  087F               	movf	127,w
 10268  0B56  00E8               	movwf	_status+4	;volatile
 10269                           
 10270                           ;nrf24l01.c: 214: nrf24l01SetRXMode(1);
 10271  0B57  3001               	movlw	1
 10272  0B58  3187  27C5  318B   	fcall	_nrf24l01SetRXMode
 10273                           
 10274                           ;nrf24l01.c: 215: }else{
 10275  0B5B  2B5E               	goto	i1l4646
 10276  0B5C                     i1l4644:	
 10277                           
 10278                           ;nrf24l01.c: 216: status.TX = 0;
 10279  0B5C  0020               	movlb	0	; select bank0
 10280  0B5D  01E4               	clrf	_status	;volatile
 10281  0B5E                     i1l4646:	
 10282                           
 10283                           ;nrf24l01.c: 217: };nrf24l01.c: 219: if (lastTXPacket->packetData.IsACK){
 10284  0B5E  0020               	movlb	0	; select bank0
 10285  0B5F  0869               	movf	_lastTXPacket,w
 10286  0B60  0084               	movwf	4
 10287  0B61  3001               	movlw	1	; select bank2/3
 10288  0B62  0085               	movwf	5
 10289  0B63  1D80               	btfss	0,3
 10290  0B64  2B69               	goto	i1l4650
 10291                           
 10292                           ;nrf24l01.c: 220: nrf24l01SetRXMode(1);
 10293  0B65  3001               	movlw	1
 10294  0B66  3187  27C5  318B   	fcall	_nrf24l01SetRXMode
 10295  0B69                     i1l4650:	
 10296                           
 10297                           ;nrf24l01.c: 221: };nrf24l01.c: 223: nrf24l01Service();
 10298  0B69  318F  2756  318B   	fcall	_nrf24l01Service
 10299  0B6C                     i1l4652:	
 10300                           
 10301                           ;nrf24l01.c: 224: };nrf24l01.c: 229: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          7, status.statusRegister.byte);
 10302  0B6C  0866               	movf	_status+2,w	;volatile
 10303  0B6D  001E               	movwi fsr1++
 10304  0B6E  3027               	movlw	39
 10305  0B6F  3197  27ED         	fcall	_nrf24l01Send
 10306  0B71  0008               	return
 10307  0B72                     __end_of_nrf24l01ISR:	
 10308  0074                     btemp	set	116	;btemp
 10309  0074                     wtemp0	set	116
 10310  0076                     wtemp1	set	118
 10311  0078                     wtemp2	set	120
 10312  007A                     wtemp3	set	122
 10313  007C                     wtemp4	set	124
 10314  007E                     wtemp5	set	126
 10315  0074                     ttemp0	set	116
 10316  0077                     ttemp1	set	119
 10317  007A                     ttemp2	set	122
 10318  007D                     ttemp3	set	125
 10319  0074                     ltemp0	set	116
 10320  0078                     ltemp1	set	120
 10321  007C                     ltemp2	set	124
 10322  0076                     ltemp3	set	118


Data Sizes:
    Strings     58
    Constant    46
    Data        1
    BSS         123
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            4      4       4
    BANK0            80     68      74
    BANK1            80     61      68
    BANK2            80      0      45
    BANK3            80      0      66
    BANK4            80     49      49
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> sendMessage@ftoaStatus(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK3[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 
		 -> RXPacket(BANK3[33]), romDataMap(BANK2[28]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK3[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 
		 -> RXPacket(BANK3[33]), romDataMap(BANK2[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 33
		 -> romDataMap.name(BANK2[16]), packet.Message(BANK0[32]), packet.Message(BANK0[32]), main@packet(BANK1[33]), 
		 -> STR_8(CODE[4]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK2[17]), STR_10(CODE[6]), STR_9(CODE[6]), STR_7(CODE[6]), 
		 -> STR_6(CODE[5]), STR_5(CODE[7]), STR_4(CODE[5]), STR_3(CODE[6]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_11(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendTXBuffer@packet	PTR struct . size(1) Largest target is 33
		 -> TXPacket(BANK3[33]), RXPacket(BANK3[33]), 

    lastTXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), TXPacket(BANK3[33]), RXPacket(BANK3[33]), 

    nrf24l01SendPacket@txPacket	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK2[28]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sendMessage@topic	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_10(CODE[6]), STR_9(CODE[6]), STR_7(CODE[6]), STR_6(CODE[5]), 
		 -> STR_5(CODE[7]), STR_4(CODE[5]), STR_3(CODE[6]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    sendMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK2[28]), 


Critical Paths under _main in COMMON

    _main->_EEPROMWrite
    _main->___lbtoft
    _main->_nrf24l01SetTXPipe
    _main->_strcpy
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01GetPipe->___lwmod
    _loop->_EEPROMWrite
    _loop->___lbtoft
    _loop->___lltoft
    _sendMessage->___lbtoft
    _sendMessage->_strcpy
    _sleepListren->_sleepMs
    _nrf24l01SendPacket->_sleepMs
    _nrf24l01SendPacket->_strcpy
    _ftoa->___lltoft
    _sprintf->___wmul
    ___ftsub->___lltoft
    _getADCValue->___awtoft
    _getADCValue->_sleepMs
    ___ftadd->___awtoft

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01GetPipe->___lwmod
    _sendMessage->_strcat
    _nrf24l01SendPacket->_strcpy
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    ___lbtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sendMessage
    _loop->_sendMessage
    _sendMessage->_strcat
    _strcat->_ftoa

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_loop

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0  103921
                                             26 BANK1     35    35      0
                         _EEPROMRead
                        _EEPROMWrite
                           ___lbtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                        _sendMessage
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    2302
                                             16 BANK0      2     2      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                9     9      0    2302
                                              7 BANK0      9     9      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    2     2      0     406
                                              3 COMMON     1     1      0
                                              6 BANK0      1     1      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     344
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    3     3      0     625
                                              0 COMMON     3     3      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      4     4      0     807
                                              7 BANK0      4     4      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     440
                                              0 COMMON     4     0      4
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _loop                                                49    49      0   66602
                                              0 BANK4     49    49      0
                        _EEPROMWrite
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
                           ___lltoft
                        _getADCValue
                       _nrf24l01Send
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _sendMessage                                          9     2      7   27924
                                             17 BANK1      9     2      7
                         _EEPROMRead (ARG)
                           ___lbtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                 _nrf24l01SendPacket
                       _sleepListren
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     751
                                             66 BANK0      2     2      0
                                             13 BANK1      4     0      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _sleepListren                                         2     0      2    1448
                                              6 BANK0      2     0      2
                  _nrf24l01SetRXMode
                            _sleepMs
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendPacket                                   2     0      2    3965
                                              8 BANK0      2     0      2
                    _nrf24l01Service
                            _sleepMs
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     565
                                              0 COMMON     4     0      4
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    2609
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     982
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     632
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     477
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                13     9      4   18810
                                              0 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             34    24     10    3016
                                             27 BANK0     26    16     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      99
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     552
                                              0 COMMON     4     0      4
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     440
                                              0 COMMON     1     1      0
                                             19 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     449
                                              6 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             5     1      4    3785
                                              0 COMMON     4     0      4
                                             11 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             10     6      4     579
                                             56 BANK0     10     6      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5836
                                             21 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     273
                                             44 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             12     6      6    4379
                                             44 BANK0     12     6      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               6     0      6     406
                                              6 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         10     7      3   14853
                                             34 BANK0     10     7      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            _sleepMs
 ---------------------------------------------------------------------------------
 (3) _sleepMs                                              4     2      2     681
                                              0 COMMON     4     2      2
                           _resetWDT
 ---------------------------------------------------------------------------------
 (10) _resetWDT                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             13     7      6    4727
                                             21 BANK0     13     7      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             10     4      6    5532
                                             11 BANK0     10     4      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3712
                                              0 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             5     1      4    3506
                                              0 COMMON     4     0      4
                                             11 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             5     0      5    3475
                                              6 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (2) _EEPROMWrite                                          4     1      3     751
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _EEPROMRead                                           2     0      2     270
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  6     6      0    3718
                                              0 BANK0      6     6      0
                        _nrf24l01ISR
                           _resetWDT
 ---------------------------------------------------------------------------------
 (10) _resetWDT                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01ISR                                         0     0      0    3718
                       _nrf24l01Send
                    _nrf24l01Service
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    2609
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     982
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     632
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     477
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROMRead
   _EEPROMWrite
   ___lbtoft
     ___ftpack
   _loop
     _EEPROMWrite
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
     ___lbtoft
       ___ftpack
     ___lltoft
       ___ftpack
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleepMs
         _resetWDT
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
     _sendMessage
       _EEPROMRead (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
       _memset (ARG)
       _nrf24l01SendPacket (ARG)
         _nrf24l01Service
           _memset
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
           _nrf24l01SendTXBuffer
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
             _nrf24l01SetRXMode
               _nrf24l01Send
                 _nrf24l01SPIEnd
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
             _strlen
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _strcmp
         _sleepMs
           _resetWDT
         _strcpy
       _sleepListren (ARG)
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _sleepMs
           _resetWDT
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _sleepMs
                   _resetWDT
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
       _strcpy (ARG)
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
     _nrf24l01SPISend
     _nrf24l01SPIStart
   _sendMessage
     _EEPROMRead (ARG)
     ___lbtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleepMs
             _resetWDT
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleepMs
             _resetWDT
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleepMs
         _resetWDT
     _memset (ARG)
     _nrf24l01SendPacket (ARG)
       _nrf24l01Service
         _memset
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
         _nrf24l01SendTXBuffer
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _strlen
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _strcmp
       _sleepMs
         _resetWDT
       _strcpy
     _sleepListren (ARG)
       _nrf24l01SetRXMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _sleepMs
         _resetWDT
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
     _strcpy (ARG)
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
     _nrf24l01Service
       _memset
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SendTXBuffer
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _strlen
       _nrf24l01SetRXMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _strcmp
     _nrf24l01SetRXMode
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
   _resetWDT

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            4      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               4      4       4       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       9       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     44      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     3D      44       7       85.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      2D       9       56.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      42      11       82.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50     31      31      13       61.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     132      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     13B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Wed Aug 15 16:32:16 2018

                ___bmul@product 0071                     __CFG_CP$OFF 0000                              l53 0807  
              sendMessage@value 00B5                sendMessage@topic 00B3             ___wmul@multiplicand 0072  
                  ___ftadd@exp1 0034                    ___ftadd@exp2 0033               sendMessage@packet 00B1  
                   __CFG_LVP$ON 0000                    ___ftadd@sign 0032                             l176 0F0D  
                           l264 07FE                             l346 0911                             l347 0910  
                           l277 08AD                             l462 0101                             l465 0120  
                           l722 0512                             l488 086F                             l913 0ABD  
                           l782 0DEA                             l698 0CD8                             l699 0CE0  
                  __CFG_CPD$OFF 0000                             _ISR 0004                             wreg 0009  
                          ?_ISR 0070                    ___ftdiv@cntr 003C                    ___ftdiv@sign 0041  
                ??_nrf24l01Init 0030                            l4000 0B20                            l4110 0DD4  
                          l4040 0779                            l4024 073E                            l4018 0728  
                          l4122 0DFB                            l4106 0DC6                            l4052 0795  
                          l4044 0781                            l4116 0DE1                            l4132 09B1  
                          l4118 0DED                            l4134 09C1                            l4222 08B9  
                          l4056 079D                            l4160 0A66                            l4154 0A97  
                          l4242 0C1C                            l4146 091B                            l4162 0A72  
                          l3612 0CA2                            l4316 0E8B                            l4308 0E72  
                          l4244 0C33                            l4260 0986                            l4420 0F6B  
                          l4164 0A7B                            l3710 049B                            l4350 0ED0  
                          l4078 084F                            l4262 09A5                            l4414 0F61  
                          l3624 0CC5                            l3616 0CAC                            l3608 0C9B  
                          l3720 04B1                            l4088 0D96                            l4176 05AB  
                          l3626 0CCA                            l3618 0CB1                            l4274 0946  
                          l3714 04A2                            l4290 0E31                            l4362 0F47  
                          l4346 0EDC                            l4258 0993                            l4610 0A09  
                          l3628 0CD2                            l3732 04CB                            l4284 0E1B  
                          l4364 0F4E                            l4348 0EE7                            l4444 0F9B  
                          l4612 0A15                            l4620 0A2A                            l3742 04E8  
                          l3822 09FF                            l3806 09DB                            l4358 0F2F  
                          l3910 0108                            l3902 00CE                            l3590 080C  
                          l3830 07CF                            l4446 0FB0                            l4198 0A50  
                          l3760 0524                            l3752 0504                            l3744 04ED  
                          l3808 09E7                            l3664 0868                            l3904 00FD  
                          l4456 0FCF                            l4616 0A21                            l3746 04F1  
                          l3738 04DE                            l3818 09F7                            l3658 17DA  
                          l3906 0103                            l4570 0443                            l4554 03EA  
                          l3764 0536                            l3756 050E                            l3684 0C50  
                          l3940 0181                            l3932 0154                            l3916 012F  
                          l3836 07D7                            l4476 0FF9                            l4468 0FEC  
                          l4564 0434                            l3774 0551                            l3694 0C7E  
                          l3686 0C5E                            l3926 014E                            l3792 0BA1  
                          l3952 01B7                            l3944 0190                            l3864 088C  
                          l3698 0C89                            l3786 0B7B                            l3962 01CF  
                          l3954 01BA                            l3970 005E                            l3866 0897  
                          l3858 082F                            l4690 0AE4                            l3788 0B89  
                          l3796 0BAC                            l3948 01A4                            l3972 021F  
                          l3884 0091                            l3892 00BF                            l3878 0081  
                          l3982 17E4                            l4862 070D                            l3968 0214  
                          l4688 0AC4                            l3978 17DE                            l3996 0B0A  
                          STR_1 183E                    __CFG_WDTE$ON 0000                            STR_2 183E  
                          STR_3 1825                            STR_4 1835                            STR_5 180C  
                          STR_6 1830                            STR_7 181F                            STR_8 183A  
                          STR_9 1813                            u4015 0B7E                            u4035 0B97  
                          u4045 0BA2                            u4074 09E3                            u4075 09E1  
                          u4315 0188                            u5115 0A1B                            u4325 019A  
                          u5125 0A22                            u4335 01AC                            u3625 0CE7  
                          u3545 0CA7                            u3715 0C53                            u5307 07E1  
                          u3565 0CC0                            u4525 079E                            u5317 07F2  
                          u4535 07A4                            u4455 074A                            u4615 0DC7  
                          u3735 0C5F                            u4295 0177                            u5327 07FB  
                          u5095 0A0C                            u3585 0CCD                            u4465 075A  
                          u3745 0C73                            u5337 17CA                            u3755 0C7F  
                          u3675 0870                            u5347 17BD                            u5195 0AD2  
                          u5267 066C                            u3925 04F2                            u4485 0782  
                          u4645 0DE2                            u3685 0875                            u5277 0969  
                          u4495 0788                            u5287 0978                            u3865 04CC  
                          u4585 0D9D                            u5297 0C39                            u3955 0505  
                          u4835 0E43                            u4675 09B6                            u4764 08B3  
                          u4845 0E53                            u4765 08B2                            u3895 04DF  
                          u4855 0E73                            u4865 0E82                            u4875 0E8C  
                          _WPUA 020C                            _WPUC 020E  __size_of_nrf24l01InterfaceInit 001E  
                  __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 08DD  
                          ___sp 2171                            _main 0650                            _ftoa 0569  
                  ___ftpack@arg 0026                            _loop 0225                    ___ftpack@exp 0029  
                          fsr0h 0005                            fsr1h 0007                            indf0 0000  
                          fsr0l 0004                            fsr1l 0006                            btemp 0074  
                 __CFG_BORV$LOW 0000                            start 002D           nrf24l01SetRXPipe@pipe 0071  
           __size_of_EEPROMRead 001F                   __CFG_CSWEN$ON 0000               ___bmul@multiplier 0072  
                 __CFG_MCLRE$ON 0000                    ___ftmul@cntr 0056                    ___ftmul@sign 0057  
   __size_of_nrf24l01SendPacket 002F                           ??_ISR 0020                    ___fttol@exp1 0061  
          __size_of_getADCValue 00A9                    ___fttol@lval 005D                           ?_main 0070  
                         ?_ftoa 00A0                           ?_loop 0070                 __end_of___ftadd 0569  
                         STR_10 1819                           STR_11 1801                 __end_of___ftdiv 0EAD  
               __end_of___ftneg 17BC                 __end_of___lldiv 0C92                 __end_of___ftmul 07C5  
               EEPROMWrite@data 0072                 __end_of___llmod 0BB5                 __end_of___ftsub 0865  
               __end_of___fttol 0E04                  __CFG_DEBUG$OFF 0000                 __end_of___lwmod 0A2F  
                         i1l291 0B43                   __CFG_PWRTE$ON 0000           nrf24l01SetTXPipe@pipe 0026  
                  ___lltoft@exp 002B                   ___awtoft@sign 0073                 __end_of_dpowers 1028  
               __end_of_isdigit 17DC                   ___ftpack@sign 002A                           ftoa@f 00A0  
                         ftoa@l 00A8                  __CFG_BOREN$OFF 0000                 __end_of_sleepMs 0A02  
                         ltemp0 0074                           ltemp1 0078                           ltemp2 007C  
                         ltemp3 0076                           ttemp0 0074                           ttemp1 0077  
                         ttemp2 007A                           ttemp3 007D                           status 0003  
                         wtemp0 0074                           wtemp1 0076                           wtemp2 0078  
                         wtemp3 007A                           wtemp4 007C                           wtemp5 007E  
               __end_of_sprintf 0225               getADCValue@adcSum 0049                _nrf24l01SPIStart 17C5  
          __size_of_EEPROMWrite 001F                 __initialization 002F          nrf24l01InitRegisters@i 002E  
                  __end_of_main 0711                    __end_of_ftoa 0650                    __end_of_loop 036C  
                        ??_main 00BA                   ___fttol@sign1 005C                          ??_ftoa 0074  
                        ??_loop 0074                    ?_sendMessage 00B1        __size_of_nrf24l01SPISend 000F  
              ___llmod@dividend 0037                          _ADRESH 009C                          _ADRESL 009B  
              __end_of___awtoft 095E                          _ANSELA 018C                          _ANSELC 018E  
              __end_of___ftpack 0CF7                __end_of___lbtoft 082A                __end_of___lltoft 09D6  
                        _ODCONA 028C        __size_of_nrf24l01GetPipe 0034                          _ODCONC 028E  
                        i1l4650 0B69                          i1l4634 0B44                          i1l4644 0B5C  
                        i1l4652 0B6C                          i1l4636 0B47                          i1l4646 0B5E  
                        i1l4772 0020                          _INLVLA 038C                          _INLVLC 038E  
      __size_of_nrf24l01Service 00AA            __size_of_nrf24l01ISR 0043                          ___bmul 17DC  
                        ___ftge 0AF3                          ___wmul 0865                       ??___ftadd 0031  
                __CFG_STVREN$ON 0000                       ??___ftdiv 003B                       ??___ftneg 0074  
                     ??___lldiv 0070                       ??___ftmul 0074                       ??___llmod 0070  
                     ??___ftsub 0074                       ??___fttol 0074                       ??___lwmod 0074  
          __end_of_nrf24l01Init 0983            __end_of_nrf24l01Send 1800                          _memset 0A8D  
         _nrf24l01InitRegisters 036C                          _status 0064                          _strcat 0A5E  
                        _strcmp 0983                          _strcpy 082A                          _strlen 0883  
                        ftoa@cp 00AC           ___ftmul@f3_as_product 0053                __end_of_resetWDT 17B3  
                  ??_EEPROMRead 0072                       ??_isdigit 0070                          loop@ta 0223  
                        loop@vt 0220                       ??_sleepMs 0072                       ??_sprintf 0045  
            getADCValue@adcLoop 0047         __end_of__initialization 0051                      ___ftadd@f1 002B  
                    ___ftadd@f2 002E                      ___ftge@ff1 0026                      ___ftge@ff2 0029  
            getADCValue@channel 0046                      ___ftdiv@f1 0038                      ___ftdiv@f2 0035  
                    ___ftdiv@f3 003D                      ___ftneg@f1 004C                      ___awtoft@c 0070  
                    ___lbtoft@c 002B             ___bmul@multiplicand 0070                      ___ftmul@f1 004C  
                    ___ftmul@f2 004F              __end_of_EEPROMRead 08FC                      ___ftsub@f1 0038  
                    ___ftsub@f2 0035                      ___fttol@f1 0058                  __pcstackCOMMON 0070  
                  __pidataBANK1 0003   __size_of_nrf24l01SendTXBuffer 0047                      ___lltoft@c 0070  
                  sprintf@width 0050                     loop@rfSetup 022F                      __pbssBANK0 0064  
                    __pbssBANK1 00DD                      __pbssBANK2 0120                      __pbssBANK3 01A0  
         sendMessage@ftoaStatus 00B8               ??_nrf24l01GetPipe 0027                      __pmaintext 0650  
                       ?___bmul 0070                         ?___ftge 0026                         ?___wmul 0070  
               __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 07C5               _nrf24l01SetRXPipe 08A1  
        ?_nrf24l01InitRegisters 0070                      __pintentry 0004               _nrf24l01SetTXPipe 0BB5  
                     ?___awtoft 0070                       ?___ftpack 0026                       ?___lbtoft 0070  
            ?_nrf24l01SetRXPipe 0070              ?_nrf24l01SetTXPipe 0070                       ?___lltoft 0070  
           __CFG_RSTOSC$HFINT32 0000                         ?_strcat 00AD                         ?_strcpy 0070  
         __end_of_n_ADDRESS_MUL 1801            __size_of_sendMessage 0086        __end_of_nrf24l01SPIStart 17CE  
           ??_nrf24l01SetRXPipe 0070             ??_nrf24l01SetTXPipe 0073                         _NVMADRH 0892  
                       _NVMADRL 0891                         _NVMDATL 0893                         _NVMCON2 0896  
                       _SSP1BUF 0211           _nrf24l01InterfaceInit 08BF      __end_of_nrf24l01SendPacket 0A5E  
                 ??_getADCValue 0045           __size_of_nrf24l01Init 0025           __size_of_nrf24l01Send 0013  
     __end_of_nrf24l01SetRXMode 0800       __end_of_nrf24l01SetRXPipe 08BF                   ?_sleepListren 0026  
     __end_of_nrf24l01SetTXPipe 0BF8                 __size_of___bmul 0011                 __size_of___ftge 003C  
                       ___ftadd 0473                         ___ftdiv 0E04                         ___ftneg 17B3  
                       ___lldiv 0C3F                 __size_of___wmul 001E                         ___ftmul 0711  
                       ___llmod 0B72                         ___ftsub 0847                         ___fttol 0D7D  
                       ___lwmod 0A02                      ??___awtoft 0073                      ??___ftpack 0070  
                    ??___lbtoft 0074                 __size_of_memset 0032          EEPROMWrite@GIEBitValue 0073  
                    ??___lltoft 0074                         __ptext1 095E                         __ptext2 08BF  
                       __ptext3 036C                         __ptext4 0BB5                         __ptext5 17DC  
                       __ptext6 08A1                         __ptext7 0ABF                         __ptext8 0A02  
                       __ptext9 0225                 __size_of_strcat 002F                 __size_of_strcmp 0029  
               __size_of_strcpy 001D                 __size_of_strlen 001E                    __size_of_ISR 0029  
                       _counter 00DD                         _dpowers 1000                         _isdigit 17CE  
                       _romData 00E3                         _sleepMs 09D6                         _sprintf 0058  
                       clrloop0 17A7            end_of_initialization 0051                         ftoa@buf 013C  
                       ftoa@rem 00A4                    _nrf24l01Init 095E                    _nrf24l01Send 17ED  
                    _romDataMap 0120                   ??_EEPROMWrite 0073                nrf24l01GetPipe@i 002A  
               ___lldiv@divisor 0026                 ___lldiv@counter 0032                  ??_sleepListren 0074  
           __end_of_getADCValue 0F56                       _PORTAbits 000C                       _PORTCbits 000E  
                     _TRISAbits 008C                       _TRISCbits 008E                __CFG_FEXTOSC$OFF 0000  
                 ??_nrf24l01ISR 0070          ?_nrf24l01InterfaceInit 0070                     ___ftdiv@exp 0040  
                    main@packet 00BC      __size_of_nrf24l01SetRXMode 003B      __size_of_nrf24l01SetRXPipe 001E  
                   ___ftmul@exp 0052      __size_of_nrf24l01SetTXPipe 0043             __end_of_EEPROMWrite 091B  
                __end_of___bmul 17ED                  __end_of___ftge 0B2F                  __end_of___wmul 0883  
                __end_of_memset 0ABF                  __end_of_strcat 0A8D                  __end_of_strcmp 09AC  
                  _lastTXPacket 0069                  __end_of_strcpy 0847                  __end_of_strlen 08A1  
           start_initialization 002F                 _nrf24l01SPISend 0800                     __end_of_ISR 002D  
  __end_of_nrf24l01SendTXBuffer 0C3F                      ftoa@status 00A3       nrf24l01SetRXPipe@enRXAddr 0072  
               _nrf24l01GetPipe 0ABF         __size_of_nrf24l01SPIEnd 0009                 ___llmod@divisor 0033  
               ___llmod@counter 0070                 _nrf24l01Service 0F56         ??_nrf24l01InitRegisters 0027  
              __CFG_LPBOREN$OFF 0000                     _getADCValue 0EAD                        ??___bmul 0071  
                      ??___ftge 0070             __end_of_nrf24l01ISR 0B72                        ??___wmul 0074  
                   __pdataBANK1 00E3                        ??_strcat 0074                        ??_strcpy 0074  
             __size_of___awtoft 0022               __size_of___ftpack 0065               __size_of___lbtoft 001B  
             __size_of___lltoft 002A                       ___latbits 0002                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0                   __pcstackBANK4 0220            __end_of_sleepListren 093C  
                  _isdigit$1873 0070                     sprintf@flag 0049                     sprintf@prec 0052  
                    loop@packet 0230                     _EEPROMWrite 08FC             nrf24l01GetPipe@name 0029  
           nrf24l01GetPipe@pipe 0028               __size_of_resetWDT 0007                        ?___ftadd 002B  
                      ?___ftdiv 0035                        ?___ftneg 004C                        ?___lldiv 0026  
                      ?___ftmul 004C                        ?___llmod 0033                        ?___ftsub 0035  
                      ?___fttol 0058                        ?___lwmod 0070            __end_of_n_ADDRESS_P0 1830  
       __end_of_nrf24l01SPISend 080F       nrf24l01InitRegisters@enAA 002C                   ??_sendMessage 0074  
            _nrf24l01SendPacket 0A2F             sleepMs@milliseconds 0070         __end_of_nrf24l01GetPipe 0AF3  
                      ?_isdigit 0070                       _loop$2114 0226                       _loop$2115 0229  
                     _loop$2116 022C                        ?_sleepMs 0070             ?_nrf24l01SendPacket 0028  
                      ?_sprintf 003B              EEPROMWrite@address 0070         __end_of_nrf24l01Service 1000  
                ___wmul@product 0026                     _nrf24l01ISR 0B2F                       clear_ram0 17A6  
                      _PIE0bits 0090                        _PIE1bits 0091                        _PIR0bits 0010  
                      _PIR1bits 0011            ??_nrf24l01SendPacket 0074                       _testCount 00E1  
          _nrf24l01SendTXBuffer 0BF8                      _ADCON0bits 009D                      _ADCON1bits 009E  
             ___wmul@multiplier 0070                        _WPUAbits 020C                        _RXPacket 01A0  
                      _TXPacket 01C1             sleepListren@seconds 0026             __end_of_sendMessage 0D7D  
       ??_nrf24l01InterfaceInit 0070                  _nrf24l01SPIEnd 17BC               EEPROMRead@address 0070  
              __size_of___ftadd 00F6                __size_of___ftdiv 00A9                __size_of___ftneg 0009  
              __size_of___lldiv 0053                __size_of___ftmul 00B4                __size_of___llmod 0043  
              __size_of___ftsub 001E                __size_of___fttol 0087                __size_of___lwmod 002D  
                      ___awtoft 093C                        ___ftpack 0C92                        ___lbtoft 080F  
                      ___int_sp 22B1                        ___lltoft 09AC           __size_of_sleepListren 0021  
                    _ANSELAbits 018C                      _ANSELCbits 018E                      _EEPROMRead 08DD  
              ?_nrf24l01GetPipe 0070                      sprintf@val 004B                   _n_ADDRESS_MUL 1800  
                    strcat@from 00AF                __size_of_isdigit 000E                        __ptext10 0CF7  
                      __ptext11 0A5E                        __ptext20 17ED                        __ptext12 091B  
                      __ptext21 17C5                        __ptext13 0A2F                        __ptext30 0C3F  
                      __ptext22 0800                        __ptext14 082A                        __ptext31 09AC  
                      __ptext23 17BC                        __ptext15 0F56                        __ptext40 0E04  
                      __ptext32 0D7D                        __ptext24 0A8D                        __ptext16 0983  
                      __ptext41 0473                        __ptext33 0847                        __ptext25 0569  
                      __ptext17 0BF8                        __ptext42 093C                        __ptext34 17B3  
                      __ptext26 0058                        __ptext18 0883                        __ptext43 080F  
                      __ptext35 0711                        __ptext27 17CE                        __ptext19 07C5  
                      __ptext44 0C92                        __ptext36 0AF3                        __ptext28 0865  
                      __ptext45 08FC                        __ptext37 0EAD                        __ptext29 0B72  
                      __ptext46 08DD                        __ptext38 09D6                        __ptext39 17AC  
                      __ptext48 0B2F                __size_of_sleepMs 002C                    _SSP1CON1bits 0215  
        __end_of_nrf24l01SPIEnd 17C5                __size_of_sprintf 01CD                     _OSCCON1bits 0919  
                    strcpy@from 0072                   __size_of_main 00C1                   __size_of_ftoa 00E7  
                 __size_of_loop 0147    nrf24l01InitRegisters@channel 0028    nrf24l01InitRegisters@feature 002A  
                  sleepMs@wdtps 0073                      _RC0PPSbits 0EA0                        _resetWDT 17AC  
  nrf24l01InitRegisters@rfSetup 002B                      _RC1PPSbits 0EA1                    ?_getADCValue 0042  
                    _RC2PPSbits 0EA2                    _sleepListren 091B  __size_of_nrf24l01InitRegisters 0107  
 __end_of_nrf24l01InitRegisters 0473    nrf24l01InitRegisters@setupAW 0029                      _ODCONAbits 028C  
                  _SSP1STATbits 0214                        main@pipe 00BB      nrf24l01SendPacket@txPacket 0028  
                   _sendMessage 0CF7                      _INTCONbits 000B                     _NVMCON1bits 0895  
                    _FVRCONbits 0117                  __pstringtext10 1835                  __pstringtext11 183A  
                __pstringtext12 183E                  __pstringtext13 0000                        isdigit@c 0071  
                      intlevel1 0000                       sprintf@ap 004A                       sprintf@sp 004F  
                  _n_ADDRESS_P0 182B                ___lwmod@dividend 0072                ___lldiv@dividend 002A  
                  ?_EEPROMWrite 0070               __CFG_CLKOUTEN$OFF 0000       __size_of_nrf24l01SPIStart 0009  
                 __pstringtext1 1000                   __pstringtext2 182B                   __pstringtext3 1800  
                 __pstringtext4 180C                   __pstringtext5 1813                   __pstringtext6 1819  
                 __pstringtext7 181F                   __pstringtext8 1825                   __pstringtext9 1830  
                      sprintf@c 0054                        sprintf@f 003B      nrf24l01InitRegisters@DynPD 002D  
                      strcat@cp 0062                        strcat@to 00AD                     ?_EEPROMRead 0070  
              ___lldiv@quotient 002E                 ___lwmod@divisor 0070                        strcpy@cp 0026  
                      strcpy@to 0070                 ___lwmod@counter 0026                      _WDTCONbits 0097  
                 ?_nrf24l01Init 0070                      _STATUSbits 0003                    ?_nrf24l01ISR 0070  
