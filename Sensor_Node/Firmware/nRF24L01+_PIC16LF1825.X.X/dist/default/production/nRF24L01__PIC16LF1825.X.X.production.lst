

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Jul 20 13:35:57 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	_romArray_text,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	cinit,global,class=CODE,merge=1,delta=2
    20                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    25                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    26                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    27                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    28                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text2,local,class=CODE,merge=1,delta=2
    30                           	psect	text3,local,class=CODE,merge=1,delta=2
    31                           	psect	text4,local,class=CODE,merge=1,delta=2
    32                           	psect	text5,local,class=CODE,merge=1,delta=2
    33                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text7,local,class=CODE,merge=1,delta=2
    35                           	psect	text8,local,class=CODE,merge=1,delta=2
    36                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text10,local,class=CODE,merge=1,delta=2
    38                           	psect	text11,local,class=CODE,merge=1,delta=2
    39                           	psect	text12,local,class=CODE,merge=1,delta=2
    40                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text17,local,class=CODE,merge=1,delta=2
    45                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text19,local,class=CODE,merge=1,delta=2
    47                           	psect	text20,local,class=CODE,merge=1,delta=2
    48                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text23,local,class=CODE,merge=1,delta=2
    51                           	psect	text24,local,class=CODE,merge=1,delta=2
    52                           	psect	text25,local,class=CODE,merge=1,delta=2
    53                           	psect	text26,local,class=CODE,merge=1,delta=2
    54                           	psect	text27,local,class=CODE,merge=1,delta=2
    55                           	psect	text28,local,class=CODE,merge=1,delta=2
    56                           	psect	text29,local,class=CODE,merge=1,delta=2
    57                           	psect	text30,local,class=CODE,merge=1,delta=2
    58                           	psect	intentry,global,class=CODE,delta=2
    59                           	psect	text32,local,class=CODE,merge=1,delta=2
    60                           	psect	text33,local,class=CODE,merge=1,delta=2
    61                           	psect	text34,local,class=CODE,merge=1,delta=2
    62                           	psect	text35,local,class=CODE,merge=1,delta=2
    63                           	psect	text36,local,class=CODE,merge=1,delta=2
    64                           	psect	text37,local,class=CODE,merge=1,delta=2
    65                           	psect	text38,local,class=CODE,merge=1,delta=2
    66                           	psect	text39,local,class=CODE,merge=1,delta=2
    67                           	psect	text40,local,class=CODE,merge=1,delta=2
    68                           	psect	text41,local,class=CODE,merge=1,delta=2
    69                           	psect	text42,local,class=CODE,merge=1,delta=2
    70                           	psect	text43,local,class=CODE,merge=1,delta=2
    71                           	psect	text44,local,class=CODE,merge=1,delta=2
    72                           	psect	text45,local,class=CODE,merge=1,delta=2
    73                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
    74                           	psect	text47,local,class=CODE,merge=1,delta=2
    75                           	psect	text48,local,class=CODE,merge=1,delta=2
    76                           	psect	text49,local,class=CODE,merge=1,delta=2
    77                           	psect	text50,local,class=CODE,merge=1,delta=2,group=1
    78                           	dabs	1,0x7E,2
    79  0000                     
    80                           ; Version 2.00
    81                           ; Generated 27/05/2018 GMT
    82                           ; 
    83                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    84                           ; All rights reserved.
    85                           ; 
    86                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    87                           ; 
    88                           ; Redistribution and use in source and binary forms, with or without modification, are
    89                           ; permitted provided that the following conditions are met:
    90                           ; 
    91                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    92                           ;        conditions and the following disclaimer.
    93                           ; 
    94                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    95                           ;        of conditions and the following disclaimer in the documentation and/or other
    96                           ;        materials provided with the distribution.
    97                           ; 
    98                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    99                           ;        software without specific prior written permission.
   100                           ; 
   101                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   102                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   103                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   104                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   105                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   106                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   107                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   108                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   109                           ; 
   110                           ; 
   111                           ; Code-generator required, PIC16LF18325 Definitions
   112                           ; 
   113                           ; SFR Addresses
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  0007                     	;# 
   122  0008                     	;# 
   123  0009                     	;# 
   124  000A                     	;# 
   125  000B                     	;# 
   126  000C                     	;# 
   127  000E                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0014                     	;# 
   133  0015                     	;# 
   134  0015                     	;# 
   135  0016                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  0019                     	;# 
   141  001A                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  001D                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  008C                     	;# 
   148  008E                     	;# 
   149  0090                     	;# 
   150  0091                     	;# 
   151  0092                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0097                     	;# 
   155  009B                     	;# 
   156  009B                     	;# 
   157  009C                     	;# 
   158  009D                     	;# 
   159  009E                     	;# 
   160  009F                     	;# 
   161  010C                     	;# 
   162  010E                     	;# 
   163  0111                     	;# 
   164  0112                     	;# 
   165  0113                     	;# 
   166  0114                     	;# 
   167  0115                     	;# 
   168  0116                     	;# 
   169  0117                     	;# 
   170  0118                     	;# 
   171  0119                     	;# 
   172  018C                     	;# 
   173  018E                     	;# 
   174  0199                     	;# 
   175  0199                     	;# 
   176  0199                     	;# 
   177  019A                     	;# 
   178  019A                     	;# 
   179  019A                     	;# 
   180  019B                     	;# 
   181  019B                     	;# 
   182  019B                     	;# 
   183  019B                     	;# 
   184  019B                     	;# 
   185  019C                     	;# 
   186  019C                     	;# 
   187  019C                     	;# 
   188  019D                     	;# 
   189  019D                     	;# 
   190  019D                     	;# 
   191  019E                     	;# 
   192  019E                     	;# 
   193  019E                     	;# 
   194  019F                     	;# 
   195  019F                     	;# 
   196  019F                     	;# 
   197  019F                     	;# 
   198  019F                     	;# 
   199  020C                     	;# 
   200  020E                     	;# 
   201  0211                     	;# 
   202  0211                     	;# 
   203  0212                     	;# 
   204  0212                     	;# 
   205  0213                     	;# 
   206  0213                     	;# 
   207  0214                     	;# 
   208  0214                     	;# 
   209  0215                     	;# 
   210  0215                     	;# 
   211  0215                     	;# 
   212  0215                     	;# 
   213  0216                     	;# 
   214  0216                     	;# 
   215  0217                     	;# 
   216  0217                     	;# 
   217  0219                     	;# 
   218  021A                     	;# 
   219  021B                     	;# 
   220  021C                     	;# 
   221  021D                     	;# 
   222  021D                     	;# 
   223  021E                     	;# 
   224  021F                     	;# 
   225  028C                     	;# 
   226  028E                     	;# 
   227  0291                     	;# 
   228  0291                     	;# 
   229  0292                     	;# 
   230  0293                     	;# 
   231  0294                     	;# 
   232  0295                     	;# 
   233  0295                     	;# 
   234  0296                     	;# 
   235  0297                     	;# 
   236  0298                     	;# 
   237  029F                     	;# 
   238  030C                     	;# 
   239  030E                     	;# 
   240  0311                     	;# 
   241  0311                     	;# 
   242  0312                     	;# 
   243  0313                     	;# 
   244  0314                     	;# 
   245  0315                     	;# 
   246  0315                     	;# 
   247  0316                     	;# 
   248  0317                     	;# 
   249  0318                     	;# 
   250  038C                     	;# 
   251  038E                     	;# 
   252  0391                     	;# 
   253  0392                     	;# 
   254  0393                     	;# 
   255  0397                     	;# 
   256  0398                     	;# 
   257  0399                     	;# 
   258  039A                     	;# 
   259  039C                     	;# 
   260  039D                     	;# 
   261  039E                     	;# 
   262  039F                     	;# 
   263  0411                     	;# 
   264  0411                     	;# 
   265  0412                     	;# 
   266  0413                     	;# 
   267  0414                     	;# 
   268  0415                     	;# 
   269  0416                     	;# 
   270  0417                     	;# 
   271  0418                     	;# 
   272  0418                     	;# 
   273  0419                     	;# 
   274  041A                     	;# 
   275  041B                     	;# 
   276  041C                     	;# 
   277  041D                     	;# 
   278  041E                     	;# 
   279  041F                     	;# 
   280  0498                     	;# 
   281  0498                     	;# 
   282  0499                     	;# 
   283  049A                     	;# 
   284  049B                     	;# 
   285  049B                     	;# 
   286  049C                     	;# 
   287  049D                     	;# 
   288  049E                     	;# 
   289  049F                     	;# 
   290  0617                     	;# 
   291  0618                     	;# 
   292  0619                     	;# 
   293  0619                     	;# 
   294  061A                     	;# 
   295  061B                     	;# 
   296  061C                     	;# 
   297  061C                     	;# 
   298  061F                     	;# 
   299  0691                     	;# 
   300  0692                     	;# 
   301  0693                     	;# 
   302  0694                     	;# 
   303  0695                     	;# 
   304  0696                     	;# 
   305  0697                     	;# 
   306  0698                     	;# 
   307  0699                     	;# 
   308  0711                     	;# 
   309  0712                     	;# 
   310  0713                     	;# 
   311  0714                     	;# 
   312  0715                     	;# 
   313  0716                     	;# 
   314  0717                     	;# 
   315  0718                     	;# 
   316  0719                     	;# 
   317  0891                     	;# 
   318  0891                     	;# 
   319  0891                     	;# 
   320  0891                     	;# 
   321  0891                     	;# 
   322  0891                     	;# 
   323  0892                     	;# 
   324  0892                     	;# 
   325  0892                     	;# 
   326  0893                     	;# 
   327  0893                     	;# 
   328  0893                     	;# 
   329  0893                     	;# 
   330  0893                     	;# 
   331  0893                     	;# 
   332  0894                     	;# 
   333  0894                     	;# 
   334  0894                     	;# 
   335  0895                     	;# 
   336  0895                     	;# 
   337  0895                     	;# 
   338  0896                     	;# 
   339  0896                     	;# 
   340  0896                     	;# 
   341  089B                     	;# 
   342  0911                     	;# 
   343  0912                     	;# 
   344  0913                     	;# 
   345  0914                     	;# 
   346  0915                     	;# 
   347  0916                     	;# 
   348  0918                     	;# 
   349  0919                     	;# 
   350  091A                     	;# 
   351  091B                     	;# 
   352  091C                     	;# 
   353  091D                     	;# 
   354  091E                     	;# 
   355  091F                     	;# 
   356  0E0F                     	;# 
   357  0E10                     	;# 
   358  0E11                     	;# 
   359  0E12                     	;# 
   360  0E13                     	;# 
   361  0E14                     	;# 
   362  0E15                     	;# 
   363  0E16                     	;# 
   364  0E17                     	;# 
   365  0E18                     	;# 
   366  0E19                     	;# 
   367  0E1A                     	;# 
   368  0E1B                     	;# 
   369  0E1C                     	;# 
   370  0E1D                     	;# 
   371  0E1E                     	;# 
   372  0E1F                     	;# 
   373  0E20                     	;# 
   374  0E21                     	;# 
   375  0E22                     	;# 
   376  0E24                     	;# 
   377  0E25                     	;# 
   378  0E28                     	;# 
   379  0E29                     	;# 
   380  0E2A                     	;# 
   381  0E2B                     	;# 
   382  0E2C                     	;# 
   383  0E2D                     	;# 
   384  0E2E                     	;# 
   385  0E2F                     	;# 
   386  0E90                     	;# 
   387  0E91                     	;# 
   388  0E92                     	;# 
   389  0E94                     	;# 
   390  0E95                     	;# 
   391  0EA0                     	;# 
   392  0EA1                     	;# 
   393  0EA2                     	;# 
   394  0EA3                     	;# 
   395  0EA4                     	;# 
   396  0EA5                     	;# 
   397  0F0F                     	;# 
   398  0F10                     	;# 
   399  0F11                     	;# 
   400  0F12                     	;# 
   401  0F13                     	;# 
   402  0F14                     	;# 
   403  0F15                     	;# 
   404  0F16                     	;# 
   405  0F17                     	;# 
   406  0F18                     	;# 
   407  0F19                     	;# 
   408  0F1A                     	;# 
   409  0F1B                     	;# 
   410  0F1C                     	;# 
   411  0F1D                     	;# 
   412  0F1E                     	;# 
   413  0F1F                     	;# 
   414  0F20                     	;# 
   415  0F21                     	;# 
   416  0F22                     	;# 
   417  0F23                     	;# 
   418  0F24                     	;# 
   419  0F25                     	;# 
   420  0F26                     	;# 
   421  0F27                     	;# 
   422  0F28                     	;# 
   423  0F29                     	;# 
   424  0F2A                     	;# 
   425  0F2B                     	;# 
   426  0F2C                     	;# 
   427  0F2D                     	;# 
   428  0F2E                     	;# 
   429  0F2F                     	;# 
   430  0F30                     	;# 
   431  0F31                     	;# 
   432  0F32                     	;# 
   433  0F33                     	;# 
   434  0F34                     	;# 
   435  0F35                     	;# 
   436  0F36                     	;# 
   437  0F37                     	;# 
   438  0FE4                     	;# 
   439  0FE5                     	;# 
   440  0FE6                     	;# 
   441  0FE7                     	;# 
   442  0FE8                     	;# 
   443  0FE9                     	;# 
   444  0FEA                     	;# 
   445  0FEB                     	;# 
   446  0FED                     	;# 
   447  0FEE                     	;# 
   448  0FEF                     	;# 
   449  0000                     	;# 
   450  0001                     	;# 
   451  0002                     	;# 
   452  0003                     	;# 
   453  0004                     	;# 
   454  0005                     	;# 
   455  0006                     	;# 
   456  0007                     	;# 
   457  0008                     	;# 
   458  0009                     	;# 
   459  000A                     	;# 
   460  000B                     	;# 
   461  000C                     	;# 
   462  000E                     	;# 
   463  0010                     	;# 
   464  0011                     	;# 
   465  0012                     	;# 
   466  0013                     	;# 
   467  0014                     	;# 
   468  0015                     	;# 
   469  0015                     	;# 
   470  0016                     	;# 
   471  0016                     	;# 
   472  0017                     	;# 
   473  0018                     	;# 
   474  0019                     	;# 
   475  0019                     	;# 
   476  001A                     	;# 
   477  001B                     	;# 
   478  001C                     	;# 
   479  001D                     	;# 
   480  001E                     	;# 
   481  001F                     	;# 
   482  008C                     	;# 
   483  008E                     	;# 
   484  0090                     	;# 
   485  0091                     	;# 
   486  0092                     	;# 
   487  0093                     	;# 
   488  0094                     	;# 
   489  0097                     	;# 
   490  009B                     	;# 
   491  009B                     	;# 
   492  009C                     	;# 
   493  009D                     	;# 
   494  009E                     	;# 
   495  009F                     	;# 
   496  010C                     	;# 
   497  010E                     	;# 
   498  0111                     	;# 
   499  0112                     	;# 
   500  0113                     	;# 
   501  0114                     	;# 
   502  0115                     	;# 
   503  0116                     	;# 
   504  0117                     	;# 
   505  0118                     	;# 
   506  0119                     	;# 
   507  018C                     	;# 
   508  018E                     	;# 
   509  0199                     	;# 
   510  0199                     	;# 
   511  0199                     	;# 
   512  019A                     	;# 
   513  019A                     	;# 
   514  019A                     	;# 
   515  019B                     	;# 
   516  019B                     	;# 
   517  019B                     	;# 
   518  019B                     	;# 
   519  019B                     	;# 
   520  019C                     	;# 
   521  019C                     	;# 
   522  019C                     	;# 
   523  019D                     	;# 
   524  019D                     	;# 
   525  019D                     	;# 
   526  019E                     	;# 
   527  019E                     	;# 
   528  019E                     	;# 
   529  019F                     	;# 
   530  019F                     	;# 
   531  019F                     	;# 
   532  019F                     	;# 
   533  019F                     	;# 
   534  020C                     	;# 
   535  020E                     	;# 
   536  0211                     	;# 
   537  0211                     	;# 
   538  0212                     	;# 
   539  0212                     	;# 
   540  0213                     	;# 
   541  0213                     	;# 
   542  0214                     	;# 
   543  0214                     	;# 
   544  0215                     	;# 
   545  0215                     	;# 
   546  0215                     	;# 
   547  0215                     	;# 
   548  0216                     	;# 
   549  0216                     	;# 
   550  0217                     	;# 
   551  0217                     	;# 
   552  0219                     	;# 
   553  021A                     	;# 
   554  021B                     	;# 
   555  021C                     	;# 
   556  021D                     	;# 
   557  021D                     	;# 
   558  021E                     	;# 
   559  021F                     	;# 
   560  028C                     	;# 
   561  028E                     	;# 
   562  0291                     	;# 
   563  0291                     	;# 
   564  0292                     	;# 
   565  0293                     	;# 
   566  0294                     	;# 
   567  0295                     	;# 
   568  0295                     	;# 
   569  0296                     	;# 
   570  0297                     	;# 
   571  0298                     	;# 
   572  029F                     	;# 
   573  030C                     	;# 
   574  030E                     	;# 
   575  0311                     	;# 
   576  0311                     	;# 
   577  0312                     	;# 
   578  0313                     	;# 
   579  0314                     	;# 
   580  0315                     	;# 
   581  0315                     	;# 
   582  0316                     	;# 
   583  0317                     	;# 
   584  0318                     	;# 
   585  038C                     	;# 
   586  038E                     	;# 
   587  0391                     	;# 
   588  0392                     	;# 
   589  0393                     	;# 
   590  0397                     	;# 
   591  0398                     	;# 
   592  0399                     	;# 
   593  039A                     	;# 
   594  039C                     	;# 
   595  039D                     	;# 
   596  039E                     	;# 
   597  039F                     	;# 
   598  0411                     	;# 
   599  0411                     	;# 
   600  0412                     	;# 
   601  0413                     	;# 
   602  0414                     	;# 
   603  0415                     	;# 
   604  0416                     	;# 
   605  0417                     	;# 
   606  0418                     	;# 
   607  0418                     	;# 
   608  0419                     	;# 
   609  041A                     	;# 
   610  041B                     	;# 
   611  041C                     	;# 
   612  041D                     	;# 
   613  041E                     	;# 
   614  041F                     	;# 
   615  0498                     	;# 
   616  0498                     	;# 
   617  0499                     	;# 
   618  049A                     	;# 
   619  049B                     	;# 
   620  049B                     	;# 
   621  049C                     	;# 
   622  049D                     	;# 
   623  049E                     	;# 
   624  049F                     	;# 
   625  0617                     	;# 
   626  0618                     	;# 
   627  0619                     	;# 
   628  0619                     	;# 
   629  061A                     	;# 
   630  061B                     	;# 
   631  061C                     	;# 
   632  061C                     	;# 
   633  061F                     	;# 
   634  0691                     	;# 
   635  0692                     	;# 
   636  0693                     	;# 
   637  0694                     	;# 
   638  0695                     	;# 
   639  0696                     	;# 
   640  0697                     	;# 
   641  0698                     	;# 
   642  0699                     	;# 
   643  0711                     	;# 
   644  0712                     	;# 
   645  0713                     	;# 
   646  0714                     	;# 
   647  0715                     	;# 
   648  0716                     	;# 
   649  0717                     	;# 
   650  0718                     	;# 
   651  0719                     	;# 
   652  0891                     	;# 
   653  0891                     	;# 
   654  0891                     	;# 
   655  0891                     	;# 
   656  0891                     	;# 
   657  0891                     	;# 
   658  0892                     	;# 
   659  0892                     	;# 
   660  0892                     	;# 
   661  0893                     	;# 
   662  0893                     	;# 
   663  0893                     	;# 
   664  0893                     	;# 
   665  0893                     	;# 
   666  0893                     	;# 
   667  0894                     	;# 
   668  0894                     	;# 
   669  0894                     	;# 
   670  0895                     	;# 
   671  0895                     	;# 
   672  0895                     	;# 
   673  0896                     	;# 
   674  0896                     	;# 
   675  0896                     	;# 
   676  089B                     	;# 
   677  0911                     	;# 
   678  0912                     	;# 
   679  0913                     	;# 
   680  0914                     	;# 
   681  0915                     	;# 
   682  0916                     	;# 
   683  0918                     	;# 
   684  0919                     	;# 
   685  091A                     	;# 
   686  091B                     	;# 
   687  091C                     	;# 
   688  091D                     	;# 
   689  091E                     	;# 
   690  091F                     	;# 
   691  0E0F                     	;# 
   692  0E10                     	;# 
   693  0E11                     	;# 
   694  0E12                     	;# 
   695  0E13                     	;# 
   696  0E14                     	;# 
   697  0E15                     	;# 
   698  0E16                     	;# 
   699  0E17                     	;# 
   700  0E18                     	;# 
   701  0E19                     	;# 
   702  0E1A                     	;# 
   703  0E1B                     	;# 
   704  0E1C                     	;# 
   705  0E1D                     	;# 
   706  0E1E                     	;# 
   707  0E1F                     	;# 
   708  0E20                     	;# 
   709  0E21                     	;# 
   710  0E22                     	;# 
   711  0E24                     	;# 
   712  0E25                     	;# 
   713  0E28                     	;# 
   714  0E29                     	;# 
   715  0E2A                     	;# 
   716  0E2B                     	;# 
   717  0E2C                     	;# 
   718  0E2D                     	;# 
   719  0E2E                     	;# 
   720  0E2F                     	;# 
   721  0E90                     	;# 
   722  0E91                     	;# 
   723  0E92                     	;# 
   724  0E94                     	;# 
   725  0E95                     	;# 
   726  0EA0                     	;# 
   727  0EA1                     	;# 
   728  0EA2                     	;# 
   729  0EA3                     	;# 
   730  0EA4                     	;# 
   731  0EA5                     	;# 
   732  0F0F                     	;# 
   733  0F10                     	;# 
   734  0F11                     	;# 
   735  0F12                     	;# 
   736  0F13                     	;# 
   737  0F14                     	;# 
   738  0F15                     	;# 
   739  0F16                     	;# 
   740  0F17                     	;# 
   741  0F18                     	;# 
   742  0F19                     	;# 
   743  0F1A                     	;# 
   744  0F1B                     	;# 
   745  0F1C                     	;# 
   746  0F1D                     	;# 
   747  0F1E                     	;# 
   748  0F1F                     	;# 
   749  0F20                     	;# 
   750  0F21                     	;# 
   751  0F22                     	;# 
   752  0F23                     	;# 
   753  0F24                     	;# 
   754  0F25                     	;# 
   755  0F26                     	;# 
   756  0F27                     	;# 
   757  0F28                     	;# 
   758  0F29                     	;# 
   759  0F2A                     	;# 
   760  0F2B                     	;# 
   761  0F2C                     	;# 
   762  0F2D                     	;# 
   763  0F2E                     	;# 
   764  0F2F                     	;# 
   765  0F30                     	;# 
   766  0F31                     	;# 
   767  0F32                     	;# 
   768  0F33                     	;# 
   769  0F34                     	;# 
   770  0F35                     	;# 
   771  0F36                     	;# 
   772  0F37                     	;# 
   773  0FE4                     	;# 
   774  0FE5                     	;# 
   775  0FE6                     	;# 
   776  0FE7                     	;# 
   777  0FE8                     	;# 
   778  0FE9                     	;# 
   779  0FEA                     	;# 
   780  0FEB                     	;# 
   781  0FED                     	;# 
   782  0FEE                     	;# 
   783  0FEF                     	;# 
   784  0000                     	;# 
   785  0001                     	;# 
   786  0002                     	;# 
   787  0003                     	;# 
   788  0004                     	;# 
   789  0005                     	;# 
   790  0006                     	;# 
   791  0007                     	;# 
   792  0008                     	;# 
   793  0009                     	;# 
   794  000A                     	;# 
   795  000B                     	;# 
   796  000C                     	;# 
   797  000E                     	;# 
   798  0010                     	;# 
   799  0011                     	;# 
   800  0012                     	;# 
   801  0013                     	;# 
   802  0014                     	;# 
   803  0015                     	;# 
   804  0015                     	;# 
   805  0016                     	;# 
   806  0016                     	;# 
   807  0017                     	;# 
   808  0018                     	;# 
   809  0019                     	;# 
   810  0019                     	;# 
   811  001A                     	;# 
   812  001B                     	;# 
   813  001C                     	;# 
   814  001D                     	;# 
   815  001E                     	;# 
   816  001F                     	;# 
   817  008C                     	;# 
   818  008E                     	;# 
   819  0090                     	;# 
   820  0091                     	;# 
   821  0092                     	;# 
   822  0093                     	;# 
   823  0094                     	;# 
   824  0097                     	;# 
   825  009B                     	;# 
   826  009B                     	;# 
   827  009C                     	;# 
   828  009D                     	;# 
   829  009E                     	;# 
   830  009F                     	;# 
   831  010C                     	;# 
   832  010E                     	;# 
   833  0111                     	;# 
   834  0112                     	;# 
   835  0113                     	;# 
   836  0114                     	;# 
   837  0115                     	;# 
   838  0116                     	;# 
   839  0117                     	;# 
   840  0118                     	;# 
   841  0119                     	;# 
   842  018C                     	;# 
   843  018E                     	;# 
   844  0199                     	;# 
   845  0199                     	;# 
   846  0199                     	;# 
   847  019A                     	;# 
   848  019A                     	;# 
   849  019A                     	;# 
   850  019B                     	;# 
   851  019B                     	;# 
   852  019B                     	;# 
   853  019B                     	;# 
   854  019B                     	;# 
   855  019C                     	;# 
   856  019C                     	;# 
   857  019C                     	;# 
   858  019D                     	;# 
   859  019D                     	;# 
   860  019D                     	;# 
   861  019E                     	;# 
   862  019E                     	;# 
   863  019E                     	;# 
   864  019F                     	;# 
   865  019F                     	;# 
   866  019F                     	;# 
   867  019F                     	;# 
   868  019F                     	;# 
   869  020C                     	;# 
   870  020E                     	;# 
   871  0211                     	;# 
   872  0211                     	;# 
   873  0212                     	;# 
   874  0212                     	;# 
   875  0213                     	;# 
   876  0213                     	;# 
   877  0214                     	;# 
   878  0214                     	;# 
   879  0215                     	;# 
   880  0215                     	;# 
   881  0215                     	;# 
   882  0215                     	;# 
   883  0216                     	;# 
   884  0216                     	;# 
   885  0217                     	;# 
   886  0217                     	;# 
   887  0219                     	;# 
   888  021A                     	;# 
   889  021B                     	;# 
   890  021C                     	;# 
   891  021D                     	;# 
   892  021D                     	;# 
   893  021E                     	;# 
   894  021F                     	;# 
   895  028C                     	;# 
   896  028E                     	;# 
   897  0291                     	;# 
   898  0291                     	;# 
   899  0292                     	;# 
   900  0293                     	;# 
   901  0294                     	;# 
   902  0295                     	;# 
   903  0295                     	;# 
   904  0296                     	;# 
   905  0297                     	;# 
   906  0298                     	;# 
   907  029F                     	;# 
   908  030C                     	;# 
   909  030E                     	;# 
   910  0311                     	;# 
   911  0311                     	;# 
   912  0312                     	;# 
   913  0313                     	;# 
   914  0314                     	;# 
   915  0315                     	;# 
   916  0315                     	;# 
   917  0316                     	;# 
   918  0317                     	;# 
   919  0318                     	;# 
   920  038C                     	;# 
   921  038E                     	;# 
   922  0391                     	;# 
   923  0392                     	;# 
   924  0393                     	;# 
   925  0397                     	;# 
   926  0398                     	;# 
   927  0399                     	;# 
   928  039A                     	;# 
   929  039C                     	;# 
   930  039D                     	;# 
   931  039E                     	;# 
   932  039F                     	;# 
   933  0411                     	;# 
   934  0411                     	;# 
   935  0412                     	;# 
   936  0413                     	;# 
   937  0414                     	;# 
   938  0415                     	;# 
   939  0416                     	;# 
   940  0417                     	;# 
   941  0418                     	;# 
   942  0418                     	;# 
   943  0419                     	;# 
   944  041A                     	;# 
   945  041B                     	;# 
   946  041C                     	;# 
   947  041D                     	;# 
   948  041E                     	;# 
   949  041F                     	;# 
   950  0498                     	;# 
   951  0498                     	;# 
   952  0499                     	;# 
   953  049A                     	;# 
   954  049B                     	;# 
   955  049B                     	;# 
   956  049C                     	;# 
   957  049D                     	;# 
   958  049E                     	;# 
   959  049F                     	;# 
   960  0617                     	;# 
   961  0618                     	;# 
   962  0619                     	;# 
   963  0619                     	;# 
   964  061A                     	;# 
   965  061B                     	;# 
   966  061C                     	;# 
   967  061C                     	;# 
   968  061F                     	;# 
   969  0691                     	;# 
   970  0692                     	;# 
   971  0693                     	;# 
   972  0694                     	;# 
   973  0695                     	;# 
   974  0696                     	;# 
   975  0697                     	;# 
   976  0698                     	;# 
   977  0699                     	;# 
   978  0711                     	;# 
   979  0712                     	;# 
   980  0713                     	;# 
   981  0714                     	;# 
   982  0715                     	;# 
   983  0716                     	;# 
   984  0717                     	;# 
   985  0718                     	;# 
   986  0719                     	;# 
   987  0891                     	;# 
   988  0891                     	;# 
   989  0891                     	;# 
   990  0891                     	;# 
   991  0891                     	;# 
   992  0891                     	;# 
   993  0892                     	;# 
   994  0892                     	;# 
   995  0892                     	;# 
   996  0893                     	;# 
   997  0893                     	;# 
   998  0893                     	;# 
   999  0893                     	;# 
  1000  0893                     	;# 
  1001  0893                     	;# 
  1002  0894                     	;# 
  1003  0894                     	;# 
  1004  0894                     	;# 
  1005  0895                     	;# 
  1006  0895                     	;# 
  1007  0895                     	;# 
  1008  0896                     	;# 
  1009  0896                     	;# 
  1010  0896                     	;# 
  1011  089B                     	;# 
  1012  0911                     	;# 
  1013  0912                     	;# 
  1014  0913                     	;# 
  1015  0914                     	;# 
  1016  0915                     	;# 
  1017  0916                     	;# 
  1018  0918                     	;# 
  1019  0919                     	;# 
  1020  091A                     	;# 
  1021  091B                     	;# 
  1022  091C                     	;# 
  1023  091D                     	;# 
  1024  091E                     	;# 
  1025  091F                     	;# 
  1026  0E0F                     	;# 
  1027  0E10                     	;# 
  1028  0E11                     	;# 
  1029  0E12                     	;# 
  1030  0E13                     	;# 
  1031  0E14                     	;# 
  1032  0E15                     	;# 
  1033  0E16                     	;# 
  1034  0E17                     	;# 
  1035  0E18                     	;# 
  1036  0E19                     	;# 
  1037  0E1A                     	;# 
  1038  0E1B                     	;# 
  1039  0E1C                     	;# 
  1040  0E1D                     	;# 
  1041  0E1E                     	;# 
  1042  0E1F                     	;# 
  1043  0E20                     	;# 
  1044  0E21                     	;# 
  1045  0E22                     	;# 
  1046  0E24                     	;# 
  1047  0E25                     	;# 
  1048  0E28                     	;# 
  1049  0E29                     	;# 
  1050  0E2A                     	;# 
  1051  0E2B                     	;# 
  1052  0E2C                     	;# 
  1053  0E2D                     	;# 
  1054  0E2E                     	;# 
  1055  0E2F                     	;# 
  1056  0E90                     	;# 
  1057  0E91                     	;# 
  1058  0E92                     	;# 
  1059  0E94                     	;# 
  1060  0E95                     	;# 
  1061  0EA0                     	;# 
  1062  0EA1                     	;# 
  1063  0EA2                     	;# 
  1064  0EA3                     	;# 
  1065  0EA4                     	;# 
  1066  0EA5                     	;# 
  1067  0F0F                     	;# 
  1068  0F10                     	;# 
  1069  0F11                     	;# 
  1070  0F12                     	;# 
  1071  0F13                     	;# 
  1072  0F14                     	;# 
  1073  0F15                     	;# 
  1074  0F16                     	;# 
  1075  0F17                     	;# 
  1076  0F18                     	;# 
  1077  0F19                     	;# 
  1078  0F1A                     	;# 
  1079  0F1B                     	;# 
  1080  0F1C                     	;# 
  1081  0F1D                     	;# 
  1082  0F1E                     	;# 
  1083  0F1F                     	;# 
  1084  0F20                     	;# 
  1085  0F21                     	;# 
  1086  0F22                     	;# 
  1087  0F23                     	;# 
  1088  0F24                     	;# 
  1089  0F25                     	;# 
  1090  0F26                     	;# 
  1091  0F27                     	;# 
  1092  0F28                     	;# 
  1093  0F29                     	;# 
  1094  0F2A                     	;# 
  1095  0F2B                     	;# 
  1096  0F2C                     	;# 
  1097  0F2D                     	;# 
  1098  0F2E                     	;# 
  1099  0F2F                     	;# 
  1100  0F30                     	;# 
  1101  0F31                     	;# 
  1102  0F32                     	;# 
  1103  0F33                     	;# 
  1104  0F34                     	;# 
  1105  0F35                     	;# 
  1106  0F36                     	;# 
  1107  0F37                     	;# 
  1108  0FE4                     	;# 
  1109  0FE5                     	;# 
  1110  0FE6                     	;# 
  1111  0FE7                     	;# 
  1112  0FE8                     	;# 
  1113  0FE9                     	;# 
  1114  0FEA                     	;# 
  1115  0FEB                     	;# 
  1116  0FED                     	;# 
  1117  0FEE                     	;# 
  1118  0FEF                     	;# 
  1119  0000                     	;# 
  1120  0001                     	;# 
  1121  0002                     	;# 
  1122  0003                     	;# 
  1123  0004                     	;# 
  1124  0005                     	;# 
  1125  0006                     	;# 
  1126  0007                     	;# 
  1127  0008                     	;# 
  1128  0009                     	;# 
  1129  000A                     	;# 
  1130  000B                     	;# 
  1131  000C                     	;# 
  1132  000E                     	;# 
  1133  0010                     	;# 
  1134  0011                     	;# 
  1135  0012                     	;# 
  1136  0013                     	;# 
  1137  0014                     	;# 
  1138  0015                     	;# 
  1139  0015                     	;# 
  1140  0016                     	;# 
  1141  0016                     	;# 
  1142  0017                     	;# 
  1143  0018                     	;# 
  1144  0019                     	;# 
  1145  0019                     	;# 
  1146  001A                     	;# 
  1147  001B                     	;# 
  1148  001C                     	;# 
  1149  001D                     	;# 
  1150  001E                     	;# 
  1151  001F                     	;# 
  1152  008C                     	;# 
  1153  008E                     	;# 
  1154  0090                     	;# 
  1155  0091                     	;# 
  1156  0092                     	;# 
  1157  0093                     	;# 
  1158  0094                     	;# 
  1159  0097                     	;# 
  1160  009B                     	;# 
  1161  009B                     	;# 
  1162  009C                     	;# 
  1163  009D                     	;# 
  1164  009E                     	;# 
  1165  009F                     	;# 
  1166  010C                     	;# 
  1167  010E                     	;# 
  1168  0111                     	;# 
  1169  0112                     	;# 
  1170  0113                     	;# 
  1171  0114                     	;# 
  1172  0115                     	;# 
  1173  0116                     	;# 
  1174  0117                     	;# 
  1175  0118                     	;# 
  1176  0119                     	;# 
  1177  018C                     	;# 
  1178  018E                     	;# 
  1179  0199                     	;# 
  1180  0199                     	;# 
  1181  0199                     	;# 
  1182  019A                     	;# 
  1183  019A                     	;# 
  1184  019A                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019B                     	;# 
  1189  019B                     	;# 
  1190  019C                     	;# 
  1191  019C                     	;# 
  1192  019C                     	;# 
  1193  019D                     	;# 
  1194  019D                     	;# 
  1195  019D                     	;# 
  1196  019E                     	;# 
  1197  019E                     	;# 
  1198  019E                     	;# 
  1199  019F                     	;# 
  1200  019F                     	;# 
  1201  019F                     	;# 
  1202  019F                     	;# 
  1203  019F                     	;# 
  1204  020C                     	;# 
  1205  020E                     	;# 
  1206  0211                     	;# 
  1207  0211                     	;# 
  1208  0212                     	;# 
  1209  0212                     	;# 
  1210  0213                     	;# 
  1211  0213                     	;# 
  1212  0214                     	;# 
  1213  0214                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0215                     	;# 
  1217  0215                     	;# 
  1218  0216                     	;# 
  1219  0216                     	;# 
  1220  0217                     	;# 
  1221  0217                     	;# 
  1222  0219                     	;# 
  1223  021A                     	;# 
  1224  021B                     	;# 
  1225  021C                     	;# 
  1226  021D                     	;# 
  1227  021D                     	;# 
  1228  021E                     	;# 
  1229  021F                     	;# 
  1230  028C                     	;# 
  1231  028E                     	;# 
  1232  0291                     	;# 
  1233  0291                     	;# 
  1234  0292                     	;# 
  1235  0293                     	;# 
  1236  0294                     	;# 
  1237  0295                     	;# 
  1238  0295                     	;# 
  1239  0296                     	;# 
  1240  0297                     	;# 
  1241  0298                     	;# 
  1242  029F                     	;# 
  1243  030C                     	;# 
  1244  030E                     	;# 
  1245  0311                     	;# 
  1246  0311                     	;# 
  1247  0312                     	;# 
  1248  0313                     	;# 
  1249  0314                     	;# 
  1250  0315                     	;# 
  1251  0315                     	;# 
  1252  0316                     	;# 
  1253  0317                     	;# 
  1254  0318                     	;# 
  1255  038C                     	;# 
  1256  038E                     	;# 
  1257  0391                     	;# 
  1258  0392                     	;# 
  1259  0393                     	;# 
  1260  0397                     	;# 
  1261  0398                     	;# 
  1262  0399                     	;# 
  1263  039A                     	;# 
  1264  039C                     	;# 
  1265  039D                     	;# 
  1266  039E                     	;# 
  1267  039F                     	;# 
  1268  0411                     	;# 
  1269  0411                     	;# 
  1270  0412                     	;# 
  1271  0413                     	;# 
  1272  0414                     	;# 
  1273  0415                     	;# 
  1274  0416                     	;# 
  1275  0417                     	;# 
  1276  0418                     	;# 
  1277  0418                     	;# 
  1278  0419                     	;# 
  1279  041A                     	;# 
  1280  041B                     	;# 
  1281  041C                     	;# 
  1282  041D                     	;# 
  1283  041E                     	;# 
  1284  041F                     	;# 
  1285  0498                     	;# 
  1286  0498                     	;# 
  1287  0499                     	;# 
  1288  049A                     	;# 
  1289  049B                     	;# 
  1290  049B                     	;# 
  1291  049C                     	;# 
  1292  049D                     	;# 
  1293  049E                     	;# 
  1294  049F                     	;# 
  1295  0617                     	;# 
  1296  0618                     	;# 
  1297  0619                     	;# 
  1298  0619                     	;# 
  1299  061A                     	;# 
  1300  061B                     	;# 
  1301  061C                     	;# 
  1302  061C                     	;# 
  1303  061F                     	;# 
  1304  0691                     	;# 
  1305  0692                     	;# 
  1306  0693                     	;# 
  1307  0694                     	;# 
  1308  0695                     	;# 
  1309  0696                     	;# 
  1310  0697                     	;# 
  1311  0698                     	;# 
  1312  0699                     	;# 
  1313  0711                     	;# 
  1314  0712                     	;# 
  1315  0713                     	;# 
  1316  0714                     	;# 
  1317  0715                     	;# 
  1318  0716                     	;# 
  1319  0717                     	;# 
  1320  0718                     	;# 
  1321  0719                     	;# 
  1322  0891                     	;# 
  1323  0891                     	;# 
  1324  0891                     	;# 
  1325  0891                     	;# 
  1326  0891                     	;# 
  1327  0891                     	;# 
  1328  0892                     	;# 
  1329  0892                     	;# 
  1330  0892                     	;# 
  1331  0893                     	;# 
  1332  0893                     	;# 
  1333  0893                     	;# 
  1334  0893                     	;# 
  1335  0893                     	;# 
  1336  0893                     	;# 
  1337  0894                     	;# 
  1338  0894                     	;# 
  1339  0894                     	;# 
  1340  0895                     	;# 
  1341  0895                     	;# 
  1342  0895                     	;# 
  1343  0896                     	;# 
  1344  0896                     	;# 
  1345  0896                     	;# 
  1346  089B                     	;# 
  1347  0911                     	;# 
  1348  0912                     	;# 
  1349  0913                     	;# 
  1350  0914                     	;# 
  1351  0915                     	;# 
  1352  0916                     	;# 
  1353  0918                     	;# 
  1354  0919                     	;# 
  1355  091A                     	;# 
  1356  091B                     	;# 
  1357  091C                     	;# 
  1358  091D                     	;# 
  1359  091E                     	;# 
  1360  091F                     	;# 
  1361  0E0F                     	;# 
  1362  0E10                     	;# 
  1363  0E11                     	;# 
  1364  0E12                     	;# 
  1365  0E13                     	;# 
  1366  0E14                     	;# 
  1367  0E15                     	;# 
  1368  0E16                     	;# 
  1369  0E17                     	;# 
  1370  0E18                     	;# 
  1371  0E19                     	;# 
  1372  0E1A                     	;# 
  1373  0E1B                     	;# 
  1374  0E1C                     	;# 
  1375  0E1D                     	;# 
  1376  0E1E                     	;# 
  1377  0E1F                     	;# 
  1378  0E20                     	;# 
  1379  0E21                     	;# 
  1380  0E22                     	;# 
  1381  0E24                     	;# 
  1382  0E25                     	;# 
  1383  0E28                     	;# 
  1384  0E29                     	;# 
  1385  0E2A                     	;# 
  1386  0E2B                     	;# 
  1387  0E2C                     	;# 
  1388  0E2D                     	;# 
  1389  0E2E                     	;# 
  1390  0E2F                     	;# 
  1391  0E90                     	;# 
  1392  0E91                     	;# 
  1393  0E92                     	;# 
  1394  0E94                     	;# 
  1395  0E95                     	;# 
  1396  0EA0                     	;# 
  1397  0EA1                     	;# 
  1398  0EA2                     	;# 
  1399  0EA3                     	;# 
  1400  0EA4                     	;# 
  1401  0EA5                     	;# 
  1402  0F0F                     	;# 
  1403  0F10                     	;# 
  1404  0F11                     	;# 
  1405  0F12                     	;# 
  1406  0F13                     	;# 
  1407  0F14                     	;# 
  1408  0F15                     	;# 
  1409  0F16                     	;# 
  1410  0F17                     	;# 
  1411  0F18                     	;# 
  1412  0F19                     	;# 
  1413  0F1A                     	;# 
  1414  0F1B                     	;# 
  1415  0F1C                     	;# 
  1416  0F1D                     	;# 
  1417  0F1E                     	;# 
  1418  0F1F                     	;# 
  1419  0F20                     	;# 
  1420  0F21                     	;# 
  1421  0F22                     	;# 
  1422  0F23                     	;# 
  1423  0F24                     	;# 
  1424  0F25                     	;# 
  1425  0F26                     	;# 
  1426  0F27                     	;# 
  1427  0F28                     	;# 
  1428  0F29                     	;# 
  1429  0F2A                     	;# 
  1430  0F2B                     	;# 
  1431  0F2C                     	;# 
  1432  0F2D                     	;# 
  1433  0F2E                     	;# 
  1434  0F2F                     	;# 
  1435  0F30                     	;# 
  1436  0F31                     	;# 
  1437  0F32                     	;# 
  1438  0F33                     	;# 
  1439  0F34                     	;# 
  1440  0F35                     	;# 
  1441  0F36                     	;# 
  1442  0F37                     	;# 
  1443  0FE4                     	;# 
  1444  0FE5                     	;# 
  1445  0FE6                     	;# 
  1446  0FE7                     	;# 
  1447  0FE8                     	;# 
  1448  0FE9                     	;# 
  1449  0FEA                     	;# 
  1450  0FEB                     	;# 
  1451  0FED                     	;# 
  1452  0FEE                     	;# 
  1453  0FEF                     	;# 
  1454  0000                     	;# 
  1455  0001                     	;# 
  1456  0002                     	;# 
  1457  0003                     	;# 
  1458  0004                     	;# 
  1459  0005                     	;# 
  1460  0006                     	;# 
  1461  0007                     	;# 
  1462  0008                     	;# 
  1463  0009                     	;# 
  1464  000A                     	;# 
  1465  000B                     	;# 
  1466  000C                     	;# 
  1467  000E                     	;# 
  1468  0010                     	;# 
  1469  0011                     	;# 
  1470  0012                     	;# 
  1471  0013                     	;# 
  1472  0014                     	;# 
  1473  0015                     	;# 
  1474  0015                     	;# 
  1475  0016                     	;# 
  1476  0016                     	;# 
  1477  0017                     	;# 
  1478  0018                     	;# 
  1479  0019                     	;# 
  1480  0019                     	;# 
  1481  001A                     	;# 
  1482  001B                     	;# 
  1483  001C                     	;# 
  1484  001D                     	;# 
  1485  001E                     	;# 
  1486  001F                     	;# 
  1487  008C                     	;# 
  1488  008E                     	;# 
  1489  0090                     	;# 
  1490  0091                     	;# 
  1491  0092                     	;# 
  1492  0093                     	;# 
  1493  0094                     	;# 
  1494  0097                     	;# 
  1495  009B                     	;# 
  1496  009B                     	;# 
  1497  009C                     	;# 
  1498  009D                     	;# 
  1499  009E                     	;# 
  1500  009F                     	;# 
  1501  010C                     	;# 
  1502  010E                     	;# 
  1503  0111                     	;# 
  1504  0112                     	;# 
  1505  0113                     	;# 
  1506  0114                     	;# 
  1507  0115                     	;# 
  1508  0116                     	;# 
  1509  0117                     	;# 
  1510  0118                     	;# 
  1511  0119                     	;# 
  1512  018C                     	;# 
  1513  018E                     	;# 
  1514  0199                     	;# 
  1515  0199                     	;# 
  1516  0199                     	;# 
  1517  019A                     	;# 
  1518  019A                     	;# 
  1519  019A                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019B                     	;# 
  1525  019C                     	;# 
  1526  019C                     	;# 
  1527  019C                     	;# 
  1528  019D                     	;# 
  1529  019D                     	;# 
  1530  019D                     	;# 
  1531  019E                     	;# 
  1532  019E                     	;# 
  1533  019E                     	;# 
  1534  019F                     	;# 
  1535  019F                     	;# 
  1536  019F                     	;# 
  1537  019F                     	;# 
  1538  019F                     	;# 
  1539  020C                     	;# 
  1540  020E                     	;# 
  1541  0211                     	;# 
  1542  0211                     	;# 
  1543  0212                     	;# 
  1544  0212                     	;# 
  1545  0213                     	;# 
  1546  0213                     	;# 
  1547  0214                     	;# 
  1548  0214                     	;# 
  1549  0215                     	;# 
  1550  0215                     	;# 
  1551  0215                     	;# 
  1552  0215                     	;# 
  1553  0216                     	;# 
  1554  0216                     	;# 
  1555  0217                     	;# 
  1556  0217                     	;# 
  1557  0219                     	;# 
  1558  021A                     	;# 
  1559  021B                     	;# 
  1560  021C                     	;# 
  1561  021D                     	;# 
  1562  021D                     	;# 
  1563  021E                     	;# 
  1564  021F                     	;# 
  1565  028C                     	;# 
  1566  028E                     	;# 
  1567  0291                     	;# 
  1568  0291                     	;# 
  1569  0292                     	;# 
  1570  0293                     	;# 
  1571  0294                     	;# 
  1572  0295                     	;# 
  1573  0295                     	;# 
  1574  0296                     	;# 
  1575  0297                     	;# 
  1576  0298                     	;# 
  1577  029F                     	;# 
  1578  030C                     	;# 
  1579  030E                     	;# 
  1580  0311                     	;# 
  1581  0311                     	;# 
  1582  0312                     	;# 
  1583  0313                     	;# 
  1584  0314                     	;# 
  1585  0315                     	;# 
  1586  0315                     	;# 
  1587  0316                     	;# 
  1588  0317                     	;# 
  1589  0318                     	;# 
  1590  038C                     	;# 
  1591  038E                     	;# 
  1592  0391                     	;# 
  1593  0392                     	;# 
  1594  0393                     	;# 
  1595  0397                     	;# 
  1596  0398                     	;# 
  1597  0399                     	;# 
  1598  039A                     	;# 
  1599  039C                     	;# 
  1600  039D                     	;# 
  1601  039E                     	;# 
  1602  039F                     	;# 
  1603  0411                     	;# 
  1604  0411                     	;# 
  1605  0412                     	;# 
  1606  0413                     	;# 
  1607  0414                     	;# 
  1608  0415                     	;# 
  1609  0416                     	;# 
  1610  0417                     	;# 
  1611  0418                     	;# 
  1612  0418                     	;# 
  1613  0419                     	;# 
  1614  041A                     	;# 
  1615  041B                     	;# 
  1616  041C                     	;# 
  1617  041D                     	;# 
  1618  041E                     	;# 
  1619  041F                     	;# 
  1620  0498                     	;# 
  1621  0498                     	;# 
  1622  0499                     	;# 
  1623  049A                     	;# 
  1624  049B                     	;# 
  1625  049B                     	;# 
  1626  049C                     	;# 
  1627  049D                     	;# 
  1628  049E                     	;# 
  1629  049F                     	;# 
  1630  0617                     	;# 
  1631  0618                     	;# 
  1632  0619                     	;# 
  1633  0619                     	;# 
  1634  061A                     	;# 
  1635  061B                     	;# 
  1636  061C                     	;# 
  1637  061C                     	;# 
  1638  061F                     	;# 
  1639  0691                     	;# 
  1640  0692                     	;# 
  1641  0693                     	;# 
  1642  0694                     	;# 
  1643  0695                     	;# 
  1644  0696                     	;# 
  1645  0697                     	;# 
  1646  0698                     	;# 
  1647  0699                     	;# 
  1648  0711                     	;# 
  1649  0712                     	;# 
  1650  0713                     	;# 
  1651  0714                     	;# 
  1652  0715                     	;# 
  1653  0716                     	;# 
  1654  0717                     	;# 
  1655  0718                     	;# 
  1656  0719                     	;# 
  1657  0891                     	;# 
  1658  0891                     	;# 
  1659  0891                     	;# 
  1660  0891                     	;# 
  1661  0891                     	;# 
  1662  0891                     	;# 
  1663  0892                     	;# 
  1664  0892                     	;# 
  1665  0892                     	;# 
  1666  0893                     	;# 
  1667  0893                     	;# 
  1668  0893                     	;# 
  1669  0893                     	;# 
  1670  0893                     	;# 
  1671  0893                     	;# 
  1672  0894                     	;# 
  1673  0894                     	;# 
  1674  0894                     	;# 
  1675  0895                     	;# 
  1676  0895                     	;# 
  1677  0895                     	;# 
  1678  0896                     	;# 
  1679  0896                     	;# 
  1680  0896                     	;# 
  1681  089B                     	;# 
  1682  0911                     	;# 
  1683  0912                     	;# 
  1684  0913                     	;# 
  1685  0914                     	;# 
  1686  0915                     	;# 
  1687  0916                     	;# 
  1688  0918                     	;# 
  1689  0919                     	;# 
  1690  091A                     	;# 
  1691  091B                     	;# 
  1692  091C                     	;# 
  1693  091D                     	;# 
  1694  091E                     	;# 
  1695  091F                     	;# 
  1696  0E0F                     	;# 
  1697  0E10                     	;# 
  1698  0E11                     	;# 
  1699  0E12                     	;# 
  1700  0E13                     	;# 
  1701  0E14                     	;# 
  1702  0E15                     	;# 
  1703  0E16                     	;# 
  1704  0E17                     	;# 
  1705  0E18                     	;# 
  1706  0E19                     	;# 
  1707  0E1A                     	;# 
  1708  0E1B                     	;# 
  1709  0E1C                     	;# 
  1710  0E1D                     	;# 
  1711  0E1E                     	;# 
  1712  0E1F                     	;# 
  1713  0E20                     	;# 
  1714  0E21                     	;# 
  1715  0E22                     	;# 
  1716  0E24                     	;# 
  1717  0E25                     	;# 
  1718  0E28                     	;# 
  1719  0E29                     	;# 
  1720  0E2A                     	;# 
  1721  0E2B                     	;# 
  1722  0E2C                     	;# 
  1723  0E2D                     	;# 
  1724  0E2E                     	;# 
  1725  0E2F                     	;# 
  1726  0E90                     	;# 
  1727  0E91                     	;# 
  1728  0E92                     	;# 
  1729  0E94                     	;# 
  1730  0E95                     	;# 
  1731  0EA0                     	;# 
  1732  0EA1                     	;# 
  1733  0EA2                     	;# 
  1734  0EA3                     	;# 
  1735  0EA4                     	;# 
  1736  0EA5                     	;# 
  1737  0F0F                     	;# 
  1738  0F10                     	;# 
  1739  0F11                     	;# 
  1740  0F12                     	;# 
  1741  0F13                     	;# 
  1742  0F14                     	;# 
  1743  0F15                     	;# 
  1744  0F16                     	;# 
  1745  0F17                     	;# 
  1746  0F18                     	;# 
  1747  0F19                     	;# 
  1748  0F1A                     	;# 
  1749  0F1B                     	;# 
  1750  0F1C                     	;# 
  1751  0F1D                     	;# 
  1752  0F1E                     	;# 
  1753  0F1F                     	;# 
  1754  0F20                     	;# 
  1755  0F21                     	;# 
  1756  0F22                     	;# 
  1757  0F23                     	;# 
  1758  0F24                     	;# 
  1759  0F25                     	;# 
  1760  0F26                     	;# 
  1761  0F27                     	;# 
  1762  0F28                     	;# 
  1763  0F29                     	;# 
  1764  0F2A                     	;# 
  1765  0F2B                     	;# 
  1766  0F2C                     	;# 
  1767  0F2D                     	;# 
  1768  0F2E                     	;# 
  1769  0F2F                     	;# 
  1770  0F30                     	;# 
  1771  0F31                     	;# 
  1772  0F32                     	;# 
  1773  0F33                     	;# 
  1774  0F34                     	;# 
  1775  0F35                     	;# 
  1776  0F36                     	;# 
  1777  0F37                     	;# 
  1778  0FE4                     	;# 
  1779  0FE5                     	;# 
  1780  0FE6                     	;# 
  1781  0FE7                     	;# 
  1782  0FE8                     	;# 
  1783  0FE9                     	;# 
  1784  0FEA                     	;# 
  1785  0FEB                     	;# 
  1786  0FED                     	;# 
  1787  0FEE                     	;# 
  1788  0FEF                     	;# 
  1789  0000                     	;# 
  1790  0001                     	;# 
  1791  0002                     	;# 
  1792  0003                     	;# 
  1793  0004                     	;# 
  1794  0005                     	;# 
  1795  0006                     	;# 
  1796  0007                     	;# 
  1797  0008                     	;# 
  1798  0009                     	;# 
  1799  000A                     	;# 
  1800  000B                     	;# 
  1801  000C                     	;# 
  1802  000E                     	;# 
  1803  0010                     	;# 
  1804  0011                     	;# 
  1805  0012                     	;# 
  1806  0013                     	;# 
  1807  0014                     	;# 
  1808  0015                     	;# 
  1809  0015                     	;# 
  1810  0016                     	;# 
  1811  0016                     	;# 
  1812  0017                     	;# 
  1813  0018                     	;# 
  1814  0019                     	;# 
  1815  0019                     	;# 
  1816  001A                     	;# 
  1817  001B                     	;# 
  1818  001C                     	;# 
  1819  001D                     	;# 
  1820  001E                     	;# 
  1821  001F                     	;# 
  1822  008C                     	;# 
  1823  008E                     	;# 
  1824  0090                     	;# 
  1825  0091                     	;# 
  1826  0092                     	;# 
  1827  0093                     	;# 
  1828  0094                     	;# 
  1829  0097                     	;# 
  1830  009B                     	;# 
  1831  009B                     	;# 
  1832  009C                     	;# 
  1833  009D                     	;# 
  1834  009E                     	;# 
  1835  009F                     	;# 
  1836  010C                     	;# 
  1837  010E                     	;# 
  1838  0111                     	;# 
  1839  0112                     	;# 
  1840  0113                     	;# 
  1841  0114                     	;# 
  1842  0115                     	;# 
  1843  0116                     	;# 
  1844  0117                     	;# 
  1845  0118                     	;# 
  1846  0119                     	;# 
  1847  018C                     	;# 
  1848  018E                     	;# 
  1849  0199                     	;# 
  1850  0199                     	;# 
  1851  0199                     	;# 
  1852  019A                     	;# 
  1853  019A                     	;# 
  1854  019A                     	;# 
  1855  019B                     	;# 
  1856  019B                     	;# 
  1857  019B                     	;# 
  1858  019B                     	;# 
  1859  019B                     	;# 
  1860  019C                     	;# 
  1861  019C                     	;# 
  1862  019C                     	;# 
  1863  019D                     	;# 
  1864  019D                     	;# 
  1865  019D                     	;# 
  1866  019E                     	;# 
  1867  019E                     	;# 
  1868  019E                     	;# 
  1869  019F                     	;# 
  1870  019F                     	;# 
  1871  019F                     	;# 
  1872  019F                     	;# 
  1873  019F                     	;# 
  1874  020C                     	;# 
  1875  020E                     	;# 
  1876  0211                     	;# 
  1877  0211                     	;# 
  1878  0212                     	;# 
  1879  0212                     	;# 
  1880  0213                     	;# 
  1881  0213                     	;# 
  1882  0214                     	;# 
  1883  0214                     	;# 
  1884  0215                     	;# 
  1885  0215                     	;# 
  1886  0215                     	;# 
  1887  0215                     	;# 
  1888  0216                     	;# 
  1889  0216                     	;# 
  1890  0217                     	;# 
  1891  0217                     	;# 
  1892  0219                     	;# 
  1893  021A                     	;# 
  1894  021B                     	;# 
  1895  021C                     	;# 
  1896  021D                     	;# 
  1897  021D                     	;# 
  1898  021E                     	;# 
  1899  021F                     	;# 
  1900  028C                     	;# 
  1901  028E                     	;# 
  1902  0291                     	;# 
  1903  0291                     	;# 
  1904  0292                     	;# 
  1905  0293                     	;# 
  1906  0294                     	;# 
  1907  0295                     	;# 
  1908  0295                     	;# 
  1909  0296                     	;# 
  1910  0297                     	;# 
  1911  0298                     	;# 
  1912  029F                     	;# 
  1913  030C                     	;# 
  1914  030E                     	;# 
  1915  0311                     	;# 
  1916  0311                     	;# 
  1917  0312                     	;# 
  1918  0313                     	;# 
  1919  0314                     	;# 
  1920  0315                     	;# 
  1921  0315                     	;# 
  1922  0316                     	;# 
  1923  0317                     	;# 
  1924  0318                     	;# 
  1925  038C                     	;# 
  1926  038E                     	;# 
  1927  0391                     	;# 
  1928  0392                     	;# 
  1929  0393                     	;# 
  1930  0397                     	;# 
  1931  0398                     	;# 
  1932  0399                     	;# 
  1933  039A                     	;# 
  1934  039C                     	;# 
  1935  039D                     	;# 
  1936  039E                     	;# 
  1937  039F                     	;# 
  1938  0411                     	;# 
  1939  0411                     	;# 
  1940  0412                     	;# 
  1941  0413                     	;# 
  1942  0414                     	;# 
  1943  0415                     	;# 
  1944  0416                     	;# 
  1945  0417                     	;# 
  1946  0418                     	;# 
  1947  0418                     	;# 
  1948  0419                     	;# 
  1949  041A                     	;# 
  1950  041B                     	;# 
  1951  041C                     	;# 
  1952  041D                     	;# 
  1953  041E                     	;# 
  1954  041F                     	;# 
  1955  0498                     	;# 
  1956  0498                     	;# 
  1957  0499                     	;# 
  1958  049A                     	;# 
  1959  049B                     	;# 
  1960  049B                     	;# 
  1961  049C                     	;# 
  1962  049D                     	;# 
  1963  049E                     	;# 
  1964  049F                     	;# 
  1965  0617                     	;# 
  1966  0618                     	;# 
  1967  0619                     	;# 
  1968  0619                     	;# 
  1969  061A                     	;# 
  1970  061B                     	;# 
  1971  061C                     	;# 
  1972  061C                     	;# 
  1973  061F                     	;# 
  1974  0691                     	;# 
  1975  0692                     	;# 
  1976  0693                     	;# 
  1977  0694                     	;# 
  1978  0695                     	;# 
  1979  0696                     	;# 
  1980  0697                     	;# 
  1981  0698                     	;# 
  1982  0699                     	;# 
  1983  0711                     	;# 
  1984  0712                     	;# 
  1985  0713                     	;# 
  1986  0714                     	;# 
  1987  0715                     	;# 
  1988  0716                     	;# 
  1989  0717                     	;# 
  1990  0718                     	;# 
  1991  0719                     	;# 
  1992  0891                     	;# 
  1993  0891                     	;# 
  1994  0891                     	;# 
  1995  0891                     	;# 
  1996  0891                     	;# 
  1997  0891                     	;# 
  1998  0892                     	;# 
  1999  0892                     	;# 
  2000  0892                     	;# 
  2001  0893                     	;# 
  2002  0893                     	;# 
  2003  0893                     	;# 
  2004  0893                     	;# 
  2005  0893                     	;# 
  2006  0893                     	;# 
  2007  0894                     	;# 
  2008  0894                     	;# 
  2009  0894                     	;# 
  2010  0895                     	;# 
  2011  0895                     	;# 
  2012  0895                     	;# 
  2013  0896                     	;# 
  2014  0896                     	;# 
  2015  0896                     	;# 
  2016  089B                     	;# 
  2017  0911                     	;# 
  2018  0912                     	;# 
  2019  0913                     	;# 
  2020  0914                     	;# 
  2021  0915                     	;# 
  2022  0916                     	;# 
  2023  0918                     	;# 
  2024  0919                     	;# 
  2025  091A                     	;# 
  2026  091B                     	;# 
  2027  091C                     	;# 
  2028  091D                     	;# 
  2029  091E                     	;# 
  2030  091F                     	;# 
  2031  0E0F                     	;# 
  2032  0E10                     	;# 
  2033  0E11                     	;# 
  2034  0E12                     	;# 
  2035  0E13                     	;# 
  2036  0E14                     	;# 
  2037  0E15                     	;# 
  2038  0E16                     	;# 
  2039  0E17                     	;# 
  2040  0E18                     	;# 
  2041  0E19                     	;# 
  2042  0E1A                     	;# 
  2043  0E1B                     	;# 
  2044  0E1C                     	;# 
  2045  0E1D                     	;# 
  2046  0E1E                     	;# 
  2047  0E1F                     	;# 
  2048  0E20                     	;# 
  2049  0E21                     	;# 
  2050  0E22                     	;# 
  2051  0E24                     	;# 
  2052  0E25                     	;# 
  2053  0E28                     	;# 
  2054  0E29                     	;# 
  2055  0E2A                     	;# 
  2056  0E2B                     	;# 
  2057  0E2C                     	;# 
  2058  0E2D                     	;# 
  2059  0E2E                     	;# 
  2060  0E2F                     	;# 
  2061  0E90                     	;# 
  2062  0E91                     	;# 
  2063  0E92                     	;# 
  2064  0E94                     	;# 
  2065  0E95                     	;# 
  2066  0EA0                     	;# 
  2067  0EA1                     	;# 
  2068  0EA2                     	;# 
  2069  0EA3                     	;# 
  2070  0EA4                     	;# 
  2071  0EA5                     	;# 
  2072  0F0F                     	;# 
  2073  0F10                     	;# 
  2074  0F11                     	;# 
  2075  0F12                     	;# 
  2076  0F13                     	;# 
  2077  0F14                     	;# 
  2078  0F15                     	;# 
  2079  0F16                     	;# 
  2080  0F17                     	;# 
  2081  0F18                     	;# 
  2082  0F19                     	;# 
  2083  0F1A                     	;# 
  2084  0F1B                     	;# 
  2085  0F1C                     	;# 
  2086  0F1D                     	;# 
  2087  0F1E                     	;# 
  2088  0F1F                     	;# 
  2089  0F20                     	;# 
  2090  0F21                     	;# 
  2091  0F22                     	;# 
  2092  0F23                     	;# 
  2093  0F24                     	;# 
  2094  0F25                     	;# 
  2095  0F26                     	;# 
  2096  0F27                     	;# 
  2097  0F28                     	;# 
  2098  0F29                     	;# 
  2099  0F2A                     	;# 
  2100  0F2B                     	;# 
  2101  0F2C                     	;# 
  2102  0F2D                     	;# 
  2103  0F2E                     	;# 
  2104  0F2F                     	;# 
  2105  0F30                     	;# 
  2106  0F31                     	;# 
  2107  0F32                     	;# 
  2108  0F33                     	;# 
  2109  0F34                     	;# 
  2110  0F35                     	;# 
  2111  0F36                     	;# 
  2112  0F37                     	;# 
  2113  0FE4                     	;# 
  2114  0FE5                     	;# 
  2115  0FE6                     	;# 
  2116  0FE7                     	;# 
  2117  0FE8                     	;# 
  2118  0FE9                     	;# 
  2119  0FEA                     	;# 
  2120  0FEB                     	;# 
  2121  0FED                     	;# 
  2122  0FEE                     	;# 
  2123  0FEF                     	;# 
  2124  1FE0                     _romArray_absaddr	set	8160
  2125                           
  2126                           	psect	stringtext1
  2127  1000                     __pstringtext1:	
  2128  1000                     _resetRomData:	
  2129  1000  34AA               	retlw	170
  2130  1001  3455               	retlw	85
  2131  1002  346E               	retlw	110
  2132  1003  3463               	retlw	99
  2133  1004  346F               	retlw	111
  2134  1005  346E               	retlw	110
  2135  1006  3466               	retlw	102
  2136  1007  3469               	retlw	105
  2137  1008  3467               	retlw	103
  2138  1009  3475               	retlw	117
  2139  100A  3472               	retlw	114
  2140  100B  3465               	retlw	101
  2141  100C  3464               	retlw	100
  2142  100D  3400               	retlw	0
  2143  100E  3400               	retlw	0
  2144  100F  3400               	retlw	0
  2145  1010  3400               	retlw	0
  2146  1011  3400               	retlw	0
  2147  1012  3400               	retlw	0
  2148  1013                     __end_of_resetRomData:	
  2149                           
  2150                           	psect	stringtext2
  2151  1019                     __pstringtext2:	
  2152  1019                     _n_ADDRESS_P0:	
  2153  1019  34AD               	retlw	173
  2154  101A  3487               	retlw	135
  2155  101B  3466               	retlw	102
  2156  101C  34BC               	retlw	188
  2157  101D  34BB               	retlw	187
  2158  101E                     __end_of_n_ADDRESS_P0:	
  2159                           
  2160                           	psect	stringtext3
  2161  1044                     __pstringtext3:	
  2162  1044                     _n_ADDRESS_MUL:	
  2163  1044  3421               	retlw	33
  2164  1045                     __end_of_n_ADDRESS_MUL:	
  2165  1FE0                     _romArray_absaddr	set	8160
  2166                           
  2167                           	psect	_romArray_text
  2168  1FE0                     __p_romArray_text:	
  2169  1FE0                     _romArray:	
  2170  1FE0  3400               	retlw	0
  2171  1FE1  3400               	retlw	0
  2172  1FE2  3400               	retlw	0
  2173  1FE3  3400               	retlw	0
  2174  1FE4  3400               	retlw	0
  2175  1FE5  3400               	retlw	0
  2176  1FE6  3400               	retlw	0
  2177  1FE7  3400               	retlw	0
  2178  1FE8  3400               	retlw	0
  2179  1FE9  3400               	retlw	0
  2180  1FEA  3400               	retlw	0
  2181  1FEB  3400               	retlw	0
  2182  1FEC  3400               	retlw	0
  2183  1FED  3400               	retlw	0
  2184  1FEE  3400               	retlw	0
  2185  1FEF  3400               	retlw	0
  2186  1FF0  3400               	retlw	0
  2187  1FF1  3400               	retlw	0
  2188  1FF2  3400               	retlw	0
  2189  1FF3  3400               	retlw	0
  2190  1FF4  3400               	retlw	0
  2191  1FF5  3400               	retlw	0
  2192  1FF6  3400               	retlw	0
  2193  1FF7  3400               	retlw	0
  2194  1FF8  3400               	retlw	0
  2195  1FF9  3400               	retlw	0
  2196  1FFA  3400               	retlw	0
  2197  1FFB  3400               	retlw	0
  2198  1FFC  3400               	retlw	0
  2199  1FFD  3400               	retlw	0
  2200  1FFE  3400               	retlw	0
  2201  1FFF  3400               	retlw	0
  2202  2000                     __end_of_romArray:	
  2203  0003                     _STATUSbits	set	3
  2204  0010                     _PIR0bits	set	16
  2205  000E                     _PORTCbits	set	14
  2206  000C                     _PORTAbits	set	12
  2207  000B                     _INTCONbits	set	11
  2208  0097                     _WDTCONbits	set	151
  2209  009E                     _ADCON1bits	set	158
  2210  009C                     _ADRESH	set	156
  2211  009B                     _ADRESL	set	155
  2212  009D                     _ADCON0bits	set	157
  2213  0090                     _PIE0bits	set	144
  2214  008E                     _TRISCbits	set	142
  2215  008C                     _TRISAbits	set	140
  2216  0117                     _FVRCONbits	set	279
  2217  018E                     _ANSELCbits	set	398
  2218  018C                     _ANSELAbits	set	396
  2219  018E                     _ANSELC	set	398
  2220  018C                     _ANSELA	set	396
  2221  020C                     _WPUAbits	set	524
  2222  020E                     _WPUC	set	526
  2223  020C                     _WPUA	set	524
  2224  0211                     _SSP1BUF	set	529
  2225  0214                     _SSP1STATbits	set	532
  2226  0215                     _SSP1CON1bits	set	533
  2227  028E                     _ODCONC	set	654
  2228  028C                     _ODCONA	set	652
  2229  038E                     _INLVLC	set	910
  2230  038C                     _INLVLA	set	908
  2231  0894                     _PMDATH	set	2196
  2232  0893                     _PMDATL	set	2195
  2233  0896                     _PMCON2	set	2198
  2234  0895                     _PMCON1bits	set	2197
  2235  0892                     _PMADRH	set	2194
  2236  0891                     _PMADRL	set	2193
  2237  0895                     _PMCON1	set	2197
  2238  0919                     _OSCCON1bits	set	2329
  2239  0EA0                     _RC0PPSbits	set	3744
  2240  0EA2                     _RC2PPSbits	set	3746
  2241  0EA1                     _RC1PPSbits	set	3745
  2242                           
  2243                           	psect	stringtext4
  2244  1013                     __pstringtext4:	
  2245  1013                     STR_8:	
  2246  1013  3452               	retlw	82	;'R'
  2247  1014  3446               	retlw	70	;'F'
  2248  1015  3450               	retlw	80	;'P'
  2249  1016  3457               	retlw	87	;'W'
  2250  1017  3452               	retlw	82	;'R'
  2251  1018  3400               	retlw	0
  2252                           
  2253                           	psect	stringtext5
  2254  101E                     __pstringtext5:	
  2255  101E                     STR_5:	
  2256  101E  3441               	retlw	65	;'A'
  2257  101F  344E               	retlw	78	;'N'
  2258  1020  3443               	retlw	67	;'C'
  2259  1021  3433               	retlw	51	;'3'
  2260  1022  3400               	retlw	0
  2261                           
  2262                           	psect	stringtext6
  2263  1023                     __pstringtext6:	
  2264  1023                     STR_7:	
  2265  1023  3454               	retlw	84	;'T'
  2266  1024  3445               	retlw	69	;'E'
  2267  1025  344D               	retlw	77	;'M'
  2268  1026  3450               	retlw	80	;'P'
  2269  1027  3400               	retlw	0
  2270                           
  2271                           	psect	stringtext7
  2272  1028                     __pstringtext7:	
  2273  1028                     STR_4:	
  2274  1028  3456               	retlw	86	;'V'
  2275  1029  3442               	retlw	66	;'B'
  2276  102A  3441               	retlw	65	;'A'
  2277  102B  3454               	retlw	84	;'T'
  2278  102C  3400               	retlw	0
  2279                           
  2280                           	psect	stringtext8
  2281  102D                     __pstringtext8:	
  2282  102D                     STR_11:	
  2283  102D  3442               	retlw	66	;'B'
  2284  102E  344F               	retlw	79	;'O'
  2285  102F  344F               	retlw	79	;'O'
  2286  1030  3454               	retlw	84	;'T'
  2287  1031  3400               	retlw	0
  2288                           
  2289                           	psect	stringtext9
  2290  1032                     __pstringtext9:	
  2291  1032                     STR_9:	
  2292  1032  3455               	retlw	85	;'U'
  2293  1033  3457               	retlw	87	;'W'
  2294  1034  3430               	retlw	48	;'0'
  2295  1035  3400               	retlw	0
  2296                           
  2297                           	psect	stringtext10
  2298  1036                     __pstringtext10:	
  2299  1036                     STR_10:	
  2300  1036  3455               	retlw	85	;'U'
  2301  1037  3457               	retlw	87	;'W'
  2302  1038  3432               	retlw	50	;'2'
  2303  1039  3400               	retlw	0
  2304                           
  2305                           	psect	stringtext11
  2306  103A                     __pstringtext11:	
  2307  103A                     STR_3:	
  2308  103A  3444               	retlw	68	;'D'
  2309  103B  3442               	retlw	66	;'B'
  2310  103C  3447               	retlw	71	;'G'
  2311  103D  3400               	retlw	0
  2312                           
  2313                           	psect	stringtext12
  2314  103E                     __pstringtext12:	
  2315  103E                     STR_6:	
  2316  103E  3446               	retlw	70	;'F'
  2317  103F  3456               	retlw	86	;'V'
  2318  1040  3452               	retlw	82	;'R'
  2319  1041  3400               	retlw	0
  2320                           
  2321                           	psect	stringtext13
  2322  1042                     __pstringtext13:	
  2323  1042                     STR_1:	
  2324  1042  342F               	retlw	47	;'/'
  2325  1043  3400               	retlw	0
  2326                           
  2327                           	psect	stringtext14
  2328  0000                     __pstringtext14:	
  2329  1042                     
  2330                           ; #config settings
  2331  0000                     
  2332                           	psect	cinit
  2333  0011                     start_initialization:	
  2334  0011                     __initialization:	
  2335                           
  2336                           ; Clear objects allocated to BANK0
  2337  0011  3059               	movlw	low __pbssBANK0
  2338  0012  0084               	movwf	4
  2339  0013  3000               	movlw	high __pbssBANK0
  2340  0014  0085               	movwf	5
  2341  0015  3016               	movlw	22
  2342  0016  318D  2520  3180   	fcall	clear_ram0
  2343                           
  2344                           ; Clear objects allocated to BANK1
  2345  0019  0021               	movlb	1	; select bank1
  2346  001A  01E4               	clrf	__pbssBANK1& (0+127)
  2347  001B  01E5               	clrf	(__pbssBANK1+1)& (0+127)
  2348  001C  01E6               	clrf	(__pbssBANK1+2)& (0+127)
  2349  001D  01E7               	clrf	(__pbssBANK1+3)& (0+127)
  2350                           
  2351                           ; Clear objects allocated to BANK2
  2352  001E  3020               	movlw	low __pbssBANK2
  2353  001F  0084               	movwf	4
  2354  0020  3001               	movlw	high __pbssBANK2
  2355  0021  0085               	movwf	5
  2356  0022  3041               	movlw	65
  2357  0023  318D  2520         	fcall	clear_ram0
  2358  0025                     end_of_initialization:	
  2359                           ;End of C runtime variable initialization code
  2360                           
  2361  0025                     __end_of__initialization:	
  2362  0025  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2363  0026  0020               	movlb	0
  2364  0027  3182  2AF2         	ljmp	_main	;jump to C main() function
  2365                           
  2366                           	psect	bssBANK0
  2367  0059                     __pbssBANK0:	
  2368  0059                     _TXPacket:	
  2369  0059                     	ds	1
  2370  005A                     _sleepLoop:	
  2371  005A                     	ds	1
  2372  005B                     _nrf24l01:	
  2373  005B                     	ds	1
  2374  005C                     _romData:	
  2375  005C                     	ds	19
  2376                           
  2377                           	psect	bssBANK1
  2378  00E4                     __pbssBANK1:	
  2379  00E4                     _counter:	
  2380  00E4                     	ds	4
  2381                           
  2382                           	psect	bssBANK2
  2383  0120                     __pbssBANK2:	
  2384  0120                     _romHolder:	
  2385  0120                     	ds	32
  2386  0140                     _RXPacket:	
  2387  0140                     	ds	33
  2388                           
  2389                           	psect	clrtext
  2390  0D20                     clear_ram0:	
  2391                           ;	Called with FSR0 containing the base address, and
  2392                           ;	WREG with the size to clear
  2393                           
  2394  0D20  0064               	clrwdt	;clear the watchdog before getting into this loop
  2395  0D21                     clrloop0:	
  2396  0D21  0180               	clrf	0	;clear RAM location pointed to by FSR
  2397  0D22  3101               	addfsr 0,1
  2398  0D23  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2399  0D24  2D21               	goto	clrloop0	;have we reached the end yet?
  2400  0D25  3400               	retlw	0	;all done for this memory range, return
  2401                           
  2402                           	psect	cstackBANK1
  2403  00A0                     __pcstackBANK1:	
  2404  00A0                     loop@rfSetup:	
  2405                           
  2406                           ; 1 bytes @ 0x0
  2407  00A0                     	ds	1
  2408  00A1                     loop@packet:	
  2409                           
  2410                           ; 33 bytes @ 0x1
  2411  00A1                     	ds	33
  2412  00C2                     main@pipe:	
  2413                           
  2414                           ; 1 bytes @ 0x22
  2415  00C2                     	ds	1
  2416  00C3                     main@packet:	
  2417                           
  2418                           ; 33 bytes @ 0x23
  2419  00C3                     	ds	33
  2420                           
  2421                           	psect	cstackCOMMON
  2422  0070                     __pcstackCOMMON:	
  2423  0070                     ?_nrf24l01ISR:	
  2424  0070                     ?_nrf24l01SetRXMode:	
  2425                           ; 1 bytes @ 0x0
  2426                           
  2427  0070                     ?_nrf24l01GetRXPacket:	
  2428                           ; 1 bytes @ 0x0
  2429                           
  2430  0070                     ?_nrf24l01SendPacket:	
  2431                           ; 1 bytes @ 0x0
  2432                           
  2433  0070                     ?_nrf24l01Init:	
  2434                           ; 1 bytes @ 0x0
  2435                           
  2436  0070                     ?_nrf24l01SetTXPipe:	
  2437                           ; 1 bytes @ 0x0
  2438                           
  2439  0070                     ?_nrf24l01SetRXPipe:	
  2440                           ; 1 bytes @ 0x0
  2441                           
  2442  0070                     ?_flashRealod:	
  2443                           ; 1 bytes @ 0x0
  2444                           
  2445  0070                     ?_flashUpdate:	
  2446                           ; 1 bytes @ 0x0
  2447                           
  2448  0070                     ?_nrf24l01CELow:	
  2449                           ; 1 bytes @ 0x0
  2450                           
  2451  0070                     ??_nrf24l01CELow:	
  2452                           ; 1 bytes @ 0x0
  2453                           
  2454  0070                     ?_nrf24l01CEHigh:	
  2455                           ; 1 bytes @ 0x0
  2456                           
  2457  0070                     ??_nrf24l01CEHigh:	
  2458                           ; 1 bytes @ 0x0
  2459                           
  2460  0070                     ?_nrf24l01CSLow:	
  2461                           ; 1 bytes @ 0x0
  2462                           
  2463  0070                     ??_nrf24l01CSLow:	
  2464                           ; 1 bytes @ 0x0
  2465                           
  2466  0070                     ?_nrf24l01CSHigh:	
  2467                           ; 1 bytes @ 0x0
  2468                           
  2469  0070                     ??_nrf24l01CSHigh:	
  2470                           ; 1 bytes @ 0x0
  2471                           
  2472  0070                     ?_nrf24l01InterfaceInit:	
  2473                           ; 1 bytes @ 0x0
  2474                           
  2475  0070                     ?_nrf24l01SPISend:	
  2476                           ; 1 bytes @ 0x0
  2477                           
  2478  0070                     ??_nrf24l01SPISend:	
  2479                           ; 1 bytes @ 0x0
  2480                           
  2481  0070                     ?_nrf24l01SPIStart:	
  2482                           ; 1 bytes @ 0x0
  2483                           
  2484  0070                     ??_nrf24l01SPIStart:	
  2485                           ; 1 bytes @ 0x0
  2486                           
  2487  0070                     ?_nrf24l01SPIEnd:	
  2488                           ; 1 bytes @ 0x0
  2489                           
  2490  0070                     ??_nrf24l01SPIEnd:	
  2491                           ; 1 bytes @ 0x0
  2492                           
  2493  0070                     ?_enableInterrupts:	
  2494                           ; 1 bytes @ 0x0
  2495                           
  2496  0070                     ??_enableInterrupts:	
  2497                           ; 1 bytes @ 0x0
  2498                           
  2499  0070                     ?_exception:	
  2500                           ; 1 bytes @ 0x0
  2501                           
  2502  0070                     ?_ISR:	
  2503                           ; 1 bytes @ 0x0
  2504                           
  2505  0070                     ?_sleep:	
  2506                           ; 1 bytes @ 0x0
  2507                           
  2508  0070                     ?_checkTXPower:	
  2509                           ; 1 bytes @ 0x0
  2510                           
  2511  0070                     ?_loop:	
  2512                           ; 1 bytes @ 0x0
  2513                           
  2514  0070                     ?_nrf24l01GetPipe:	
  2515                           ; 1 bytes @ 0x0
  2516                           
  2517  0070                     ?_main:	
  2518                           ; 1 bytes @ 0x0
  2519                           
  2520  0070                     ?_nrf24l01CheckACK:	
  2521                           ; 1 bytes @ 0x0
  2522                           
  2523  0070                     ?_nrf24l01ReceivePacket:	
  2524                           ; 1 bytes @ 0x0
  2525                           
  2526  0070                     ?_nrf24l01InitRegisters:	
  2527                           ; 1 bytes @ 0x0
  2528                           
  2529  0070                     ?i1_flashWriteByte:	
  2530                           ; 1 bytes @ 0x0
  2531                           
  2532  0070                     ?i1_flashUpdate:	
  2533                           ; 1 bytes @ 0x0
  2534                           
  2535  0070                     ?i1_nrf24l01SetRXMode:	
  2536                           ; 1 bytes @ 0x0
  2537                           
  2538  0070                     ?i1_memset:	
  2539                           ; 1 bytes @ 0x0
  2540                           
  2541  0070                     ?_strcmp:	
  2542                           ; 1 bytes @ 0x0
  2543                           
  2544  0070                     ?___wmul:	
  2545                           ; 2 bytes @ 0x0
  2546                           
  2547  0070                     nrf24l01SPISend@data:	
  2548                           ; 2 bytes @ 0x0
  2549                           
  2550  0070                     enableInterrupts@enable:	
  2551                           ; 1 bytes @ 0x0
  2552                           
  2553  0070                     strcmp@s2:	
  2554                           ; 1 bytes @ 0x0
  2555                           
  2556  0070                     ___wmul@multiplier:	
  2557                           ; 1 bytes @ 0x0
  2558                           
  2559  0070                     i1flashWriteByte@offset:	
  2560                           ; 2 bytes @ 0x0
  2561                           
  2562  0070                     i1memset@p1:	
  2563                           ; 2 bytes @ 0x0
  2564                           
  2565                           
  2566                           ; 2 bytes @ 0x0
  2567  0070                     	ds	1
  2568  0071                     ?i1_nrf24l01Send:	
  2569  0071                     i1nrf24l01Send@data:	
  2570                           ; 1 bytes @ 0x1
  2571                           
  2572                           
  2573                           ; 1 bytes @ 0x1
  2574  0071                     	ds	1
  2575  0072                     ??_strcmp:	
  2576  0072                     ??i1_nrf24l01Send:	
  2577                           ; 1 bytes @ 0x2
  2578                           
  2579  0072                     ___wmul@multiplicand:	
  2580                           ; 1 bytes @ 0x2
  2581                           
  2582  0072                     i1flashWriteByte@data:	
  2583                           ; 2 bytes @ 0x2
  2584                           
  2585  0072                     i1memset@c:	
  2586                           ; 2 bytes @ 0x2
  2587                           
  2588                           
  2589                           ; 2 bytes @ 0x2
  2590  0072                     	ds	1
  2591  0073                     strcmp@r:	
  2592  0073                     i1nrf24l01Send@command:	
  2593                           ; 1 bytes @ 0x3
  2594                           
  2595                           
  2596                           ; 1 bytes @ 0x3
  2597  0073                     	ds	1
  2598  0074                     ??___wmul:	
  2599  0074                     ??i1_flashWriteByte:	
  2600                           ; 1 bytes @ 0x4
  2601                           
  2602  0074                     ??i1_nrf24l01SetRXMode:	
  2603                           ; 1 bytes @ 0x4
  2604                           
  2605  0074                     strcmp@s1:	
  2606                           ; 1 bytes @ 0x4
  2607                           
  2608  0074                     ___wmul@product:	
  2609                           ; 1 bytes @ 0x4
  2610                           
  2611  0074                     i1flashWriteByte@address:	
  2612                           ; 2 bytes @ 0x4
  2613                           
  2614  0074                     i1memset@n:	
  2615                           ; 2 bytes @ 0x4
  2616                           
  2617                           
  2618                           ; 2 bytes @ 0x4
  2619  0074                     	ds	1
  2620  0075                     i1nrf24l01SetRXMode@config:	
  2621                           
  2622                           ; 1 bytes @ 0x5
  2623  0075                     	ds	1
  2624  0076                     ??i1_flashUpdate:	
  2625  0076                     ??i1_memset:	
  2626                           ; 1 bytes @ 0x6
  2627                           
  2628  0076                     i1nrf24l01SetRXMode@rxMode:	
  2629                           ; 1 bytes @ 0x6
  2630                           
  2631  0076                     i1memset@p:	
  2632                           ; 1 bytes @ 0x6
  2633                           
  2634                           
  2635                           ; 2 bytes @ 0x6
  2636  0076                     	ds	1
  2637  0077                     ??_nrf24l01CheckACK:	
  2638                           
  2639                           ; 1 bytes @ 0x7
  2640  0077                     	ds	1
  2641  0078                     ??_nrf24l01ReceivePacket:	
  2642  0078                     i1flashUpdate@i:	
  2643                           ; 1 bytes @ 0x8
  2644                           
  2645                           
  2646                           ; 2 bytes @ 0x8
  2647  0078                     	ds	1
  2648  0079                     nrf24l01ReceivePacket@width:	
  2649                           
  2650                           ; 1 bytes @ 0x9
  2651  0079                     	ds	1
  2652  007A                     ??_exception:	
  2653  007A                     nrf24l01ReceivePacket@i:	
  2654                           ; 1 bytes @ 0xA
  2655                           
  2656                           
  2657                           ; 1 bytes @ 0xA
  2658  007A                     	ds	2
  2659  007C                     exception@exception:	
  2660                           
  2661                           ; 1 bytes @ 0xC
  2662  007C                     	ds	1
  2663  007D                     ??_nrf24l01ISR:	
  2664                           
  2665                           ; 1 bytes @ 0xD
  2666  007D                     	ds	1
  2667  007E                     ??_ISR:	
  2668                           
  2669                           	psect	cstackBANK0
  2670  0020                     __pcstackBANK0:	
  2671                           ; 1 bytes @ 0xE
  2672                           
  2673  0020                     nrf24l01ISR@status:	
  2674                           
  2675                           ; 1 bytes @ 0x0
  2676  0020                     	ds	1
  2677  0021                     ?_strcat:	
  2678  0021                     ??_nrf24l01GetRXPacket:	
  2679                           ; 1 bytes @ 0x1
  2680                           
  2681  0021                     ?_nrf24l01Send:	
  2682                           ; 1 bytes @ 0x1
  2683                           
  2684  0021                     ?_strcpy:	
  2685                           ; 1 bytes @ 0x1
  2686                           
  2687  0021                     ?_flashWriteByte:	
  2688                           ; 1 bytes @ 0x1
  2689                           
  2690  0021                     ??_nrf24l01InterfaceInit:	
  2691                           ; 1 bytes @ 0x1
  2692                           
  2693  0021                     ??_sleep:	
  2694                           ; 1 bytes @ 0x1
  2695                           
  2696  0021                     ?___bmul:	
  2697                           ; 1 bytes @ 0x1
  2698                           
  2699  0021                     ?_memset:	
  2700                           ; 1 bytes @ 0x1
  2701                           
  2702  0021                     ?_strlen:	
  2703                           ; 2 bytes @ 0x1
  2704                           
  2705  0021                     ?_flashReadByte:	
  2706                           ; 2 bytes @ 0x1
  2707                           
  2708  0021                     ?___awmod:	
  2709                           ; 2 bytes @ 0x1
  2710                           
  2711  0021                     ?___lmul:	
  2712                           ; 2 bytes @ 0x1
  2713                           
  2714  0021                     ?___lldiv:	
  2715                           ; 4 bytes @ 0x1
  2716                           
  2717  0021                     ?___llmod:	
  2718                           ; 4 bytes @ 0x1
  2719                           
  2720  0021                     nrf24l01Send@data:	
  2721                           ; 4 bytes @ 0x1
  2722                           
  2723  0021                     ___bmul@multiplicand:	
  2724                           ; 1 bytes @ 0x1
  2725                           
  2726  0021                     flashWriteByte@offset:	
  2727                           ; 1 bytes @ 0x1
  2728                           
  2729  0021                     flashReadByte@offset:	
  2730                           ; 2 bytes @ 0x1
  2731                           
  2732  0021                     ___awmod@divisor:	
  2733                           ; 2 bytes @ 0x1
  2734                           
  2735  0021                     memset@p1:	
  2736                           ; 2 bytes @ 0x1
  2737                           
  2738  0021                     strcat@from:	
  2739                           ; 2 bytes @ 0x1
  2740                           
  2741  0021                     strcpy@from:	
  2742                           ; 2 bytes @ 0x1
  2743                           
  2744  0021                     ___lmul@multiplier:	
  2745                           ; 2 bytes @ 0x1
  2746                           
  2747  0021                     ___lldiv@divisor:	
  2748                           ; 4 bytes @ 0x1
  2749                           
  2750  0021                     ___llmod@divisor:	
  2751                           ; 4 bytes @ 0x1
  2752                           
  2753                           
  2754                           ; 4 bytes @ 0x1
  2755  0021                     	ds	1
  2756  0022                     ??_nrf24l01Send:	
  2757  0022                     ??___bmul:	
  2758                           ; 1 bytes @ 0x2
  2759                           
  2760                           
  2761                           ; 1 bytes @ 0x2
  2762  0022                     	ds	1
  2763  0023                     ??_strcat:	
  2764  0023                     ??_strlen:	
  2765                           ; 1 bytes @ 0x3
  2766                           
  2767  0023                     ??_strcpy:	
  2768                           ; 1 bytes @ 0x3
  2769                           
  2770  0023                     ??_flashReadByte:	
  2771                           ; 1 bytes @ 0x3
  2772                           
  2773  0023                     nrf24l01Send@command:	
  2774                           ; 1 bytes @ 0x3
  2775                           
  2776  0023                     ___bmul@product:	
  2777                           ; 1 bytes @ 0x3
  2778                           
  2779  0023                     flashWriteByte@data:	
  2780                           ; 1 bytes @ 0x3
  2781                           
  2782  0023                     ___awmod@dividend:	
  2783                           ; 2 bytes @ 0x3
  2784                           
  2785  0023                     memset@c:	
  2786                           ; 2 bytes @ 0x3
  2787                           
  2788                           
  2789                           ; 2 bytes @ 0x3
  2790  0023                     	ds	1
  2791  0024                     ??_nrf24l01SetRXMode:	
  2792  0024                     ?_nrf24l01ChangeTXPower:	
  2793                           ; 1 bytes @ 0x4
  2794                           
  2795  0024                     ??_nrf24l01SetRXPipe:	
  2796                           ; 1 bytes @ 0x4
  2797                           
  2798  0024                     ___bmul@multiplier:	
  2799                           ; 1 bytes @ 0x4
  2800                           
  2801  0024                     strcat@cp:	
  2802                           ; 1 bytes @ 0x4
  2803                           
  2804  0024                     strcpy@cp:	
  2805                           ; 1 bytes @ 0x4
  2806                           
  2807  0024                     nrf24l01ChangeTXPower@addPower:	
  2808                           ; 1 bytes @ 0x4
  2809                           
  2810                           
  2811                           ; 2 bytes @ 0x4
  2812  0024                     	ds	1
  2813  0025                     ??_nrf24l01SetTXPipe:	
  2814  0025                     ??_flashWriteByte:	
  2815                           ; 1 bytes @ 0x5
  2816                           
  2817  0025                     ??___awmod:	
  2818                           ; 1 bytes @ 0x5
  2819                           
  2820  0025                     nrf24l01SetRXMode@config:	
  2821                           ; 1 bytes @ 0x5
  2822                           
  2823  0025                     strcat@to:	
  2824                           ; 1 bytes @ 0x5
  2825                           
  2826  0025                     strcpy@to:	
  2827                           ; 1 bytes @ 0x5
  2828                           
  2829  0025                     flashWriteByte@address:	
  2830                           ; 1 bytes @ 0x5
  2831                           
  2832  0025                     memset@n:	
  2833                           ; 2 bytes @ 0x5
  2834                           
  2835  0025                     ___lmul@multiplicand:	
  2836                           ; 2 bytes @ 0x5
  2837                           
  2838  0025                     ___lldiv@dividend:	
  2839                           ; 4 bytes @ 0x5
  2840                           
  2841  0025                     ___llmod@dividend:	
  2842                           ; 4 bytes @ 0x5
  2843                           
  2844                           
  2845                           ; 4 bytes @ 0x5
  2846  0025                     	ds	1
  2847  0026                     ??_nrf24l01ChangeTXPower:	
  2848  0026                     nrf24l01SetRXMode@rxMode:	
  2849                           ; 1 bytes @ 0x6
  2850                           
  2851  0026                     nrf24l01SetRXPipe@pipe:	
  2852                           ; 1 bytes @ 0x6
  2853                           
  2854  0026                     ___awmod@counter:	
  2855                           ; 1 bytes @ 0x6
  2856                           
  2857  0026                     flashReadByte@result:	
  2858                           ; 1 bytes @ 0x6
  2859                           
  2860                           
  2861                           ; 2 bytes @ 0x6
  2862  0026                     	ds	1
  2863  0027                     ??_memset:	
  2864  0027                     ??_flashUpdate:	
  2865                           ; 1 bytes @ 0x7
  2866                           
  2867  0027                     nrf24l01ChangeTXPower@rfSetup:	
  2868                           ; 1 bytes @ 0x7
  2869                           
  2870  0027                     nrf24l01SetTXPipe@pipe:	
  2871                           ; 1 bytes @ 0x7
  2872                           
  2873  0027                     nrf24l01SetRXPipe@enRXAddr:	
  2874                           ; 1 bytes @ 0x7
  2875                           
  2876  0027                     ___awmod@sign:	
  2877                           ; 1 bytes @ 0x7
  2878                           
  2879  0027                     strlen@cp:	
  2880                           ; 1 bytes @ 0x7
  2881                           
  2882  0027                     memset@p:	
  2883                           ; 1 bytes @ 0x7
  2884                           
  2885                           
  2886                           ; 2 bytes @ 0x7
  2887  0027                     	ds	1
  2888  0028                     ??_checkTXPower:	
  2889  0028                     ??_nrf24l01InitRegisters:	
  2890                           ; 1 bytes @ 0x8
  2891                           
  2892  0028                     strlen@s:	
  2893                           ; 1 bytes @ 0x8
  2894                           
  2895  0028                     flashReadByte@address:	
  2896                           ; 1 bytes @ 0x8
  2897                           
  2898                           
  2899                           ; 2 bytes @ 0x8
  2900  0028                     	ds	1
  2901  0029                     ??_nrf24l01SendPacket:	
  2902  0029                     ??_nrf24l01GetPipe:	
  2903                           ; 1 bytes @ 0x9
  2904                           
  2905  0029                     ??___lmul:	
  2906                           ; 1 bytes @ 0x9
  2907                           
  2908  0029                     ??___lldiv:	
  2909                           ; 1 bytes @ 0x9
  2910                           
  2911  0029                     ??___llmod:	
  2912                           ; 1 bytes @ 0x9
  2913                           
  2914  0029                     checkTXPower@rxPacket:	
  2915                           ; 1 bytes @ 0x9
  2916                           
  2917  0029                     flashUpdate@i:	
  2918                           ; 1 bytes @ 0x9
  2919                           
  2920  0029                     ___lmul@product:	
  2921                           ; 2 bytes @ 0x9
  2922                           
  2923                           
  2924                           ; 4 bytes @ 0x9
  2925  0029                     	ds	1
  2926  002A                     ??_flashRealod:	
  2927  002A                     nrf24l01InitRegisters@channel:	
  2928                           ; 1 bytes @ 0xA
  2929                           
  2930  002A                     ___llmod@counter:	
  2931                           ; 1 bytes @ 0xA
  2932                           
  2933  002A                     ___lldiv@quotient:	
  2934                           ; 1 bytes @ 0xA
  2935                           
  2936                           
  2937                           ; 4 bytes @ 0xA
  2938  002A                     	ds	1
  2939  002B                     nrf24l01GetPipe@pipe:	
  2940  002B                     nrf24l01SendPacket@Packet:	
  2941                           ; 1 bytes @ 0xB
  2942                           
  2943  002B                     nrf24l01InitRegisters@setupAW:	
  2944                           ; 1 bytes @ 0xB
  2945                           
  2946  002B                     flashRealod@i:	
  2947                           ; 1 bytes @ 0xB
  2948                           
  2949                           
  2950                           ; 2 bytes @ 0xB
  2951  002B                     	ds	1
  2952  002C                     nrf24l01GetPipe@name:	
  2953  002C                     nrf24l01SendPacket@i:	
  2954                           ; 1 bytes @ 0xC
  2955                           
  2956  002C                     nrf24l01InitRegisters@feature:	
  2957                           ; 1 bytes @ 0xC
  2958                           
  2959                           
  2960                           ; 1 bytes @ 0xC
  2961  002C                     	ds	1
  2962  002D                     nrf24l01GetPipe@i:	
  2963  002D                     nrf24l01InitRegisters@rfSetup:	
  2964                           ; 1 bytes @ 0xD
  2965                           
  2966                           
  2967                           ; 1 bytes @ 0xD
  2968  002D                     	ds	1
  2969  002E                     nrf24l01InitRegisters@status:	
  2970  002E                     ___lldiv@counter:	
  2971                           ; 1 bytes @ 0xE
  2972                           
  2973                           
  2974                           ; 1 bytes @ 0xE
  2975  002E                     	ds	1
  2976  002F                     ?_ultoa:	
  2977  002F                     ?_getADCValue:	
  2978                           ; 1 bytes @ 0xF
  2979                           
  2980  002F                     nrf24l01InitRegisters@enAA:	
  2981                           ; 4 bytes @ 0xF
  2982                           
  2983  002F                     getADCValue@divider:	
  2984                           ; 1 bytes @ 0xF
  2985                           
  2986  002F                     ultoa@val:	
  2987                           ; 4 bytes @ 0xF
  2988                           
  2989                           
  2990                           ; 4 bytes @ 0xF
  2991  002F                     	ds	1
  2992  0030                     nrf24l01InitRegisters@DynPD:	
  2993                           
  2994                           ; 1 bytes @ 0x10
  2995  0030                     	ds	1
  2996  0031                     nrf24l01InitRegisters@config:	
  2997                           
  2998                           ; 1 bytes @ 0x11
  2999  0031                     	ds	1
  3000  0032                     nrf24l01InitRegisters@i:	
  3001                           
  3002                           ; 2 bytes @ 0x12
  3003  0032                     	ds	1
  3004  0033                     ??_getADCValue:	
  3005  0033                     ultoa@base:	
  3006                           ; 1 bytes @ 0x13
  3007                           
  3008                           
  3009                           ; 2 bytes @ 0x13
  3010  0033                     	ds	1
  3011  0034                     ??_nrf24l01Init:	
  3012                           
  3013                           ; 1 bytes @ 0x14
  3014  0034                     	ds	1
  3015  0035                     ??_ultoa:	
  3016                           
  3017                           ; 1 bytes @ 0x15
  3018  0035                     	ds	1
  3019  0036                     ultoa@v:	
  3020                           
  3021                           ; 4 bytes @ 0x16
  3022  0036                     	ds	1
  3023  0037                     getADCValue@channel:	
  3024                           
  3025                           ; 1 bytes @ 0x17
  3026  0037                     	ds	1
  3027  0038                     getADCValue@adcLoop:	
  3028                           
  3029                           ; 1 bytes @ 0x18
  3030  0038                     	ds	1
  3031  0039                     getADCValue@adcSum:	
  3032                           
  3033                           ; 4 bytes @ 0x19
  3034  0039                     	ds	1
  3035  003A                     ultoa@c:	
  3036                           
  3037                           ; 1 bytes @ 0x1A
  3038  003A                     	ds	1
  3039  003B                     ultoa@buf:	
  3040                           
  3041                           ; 1 bytes @ 0x1B
  3042  003B                     	ds	2
  3043  003D                     ?_setMessage:	
  3044  003D                     setMessage@topic:	
  3045                           ; 1 bytes @ 0x1D
  3046                           
  3047                           
  3048                           ; 2 bytes @ 0x1D
  3049  003D                     	ds	2
  3050  003F                     setMessage@value:	
  3051                           
  3052                           ; 4 bytes @ 0x1F
  3053  003F                     	ds	4
  3054  0043                     ??_setMessage:	
  3055  0043                     setMessage@tempString:	
  3056                           ; 1 bytes @ 0x23
  3057                           
  3058                           
  3059                           ; 16 bytes @ 0x23
  3060  0043                     	ds	16
  3061  0053                     setMessage@packet:	
  3062                           
  3063                           ; 1 bytes @ 0x33
  3064  0053                     	ds	1
  3065  0054                     ??_loop:	
  3066                           
  3067                           ; 1 bytes @ 0x34
  3068  0054                     	ds	4
  3069  0058                     ??_main:	
  3070                           
  3071                           ; 1 bytes @ 0x38
  3072  0058                     	ds	1
  3073                           
  3074                           	psect	maintext
  3075  02F2                     __pmaintext:	
  3076 ;;
  3077 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3078 ;;
  3079 ;; *************** function _main *****************
  3080 ;; Defined at:
  3081 ;;		line 169 in file "main.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;		None
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;  packet         33   35[BANK1 ] struct .
  3086 ;;  pipe            1   34[BANK1 ] unsigned char 
  3087 ;; Return value:  Size  Location     Type
  3088 ;;                  1    wreg      void 
  3089 ;; Registers used:
  3090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3091 ;; Tracked objects:
  3092 ;;		On entry : B1F/0
  3093 ;;		On exit  : 0/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3097 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3098 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3099 ;;      Totals:         0       1      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3100 ;;Total ram usage:       35 bytes
  3101 ;; Hardware stack levels required when called:   13
  3102 ;; This function calls:
  3103 ;;		_flashRealod
  3104 ;;		_flashUpdate
  3105 ;;		_loop
  3106 ;;		_nrf24l01GetPipe
  3107 ;;		_nrf24l01Init
  3108 ;;		_nrf24l01SendPacket
  3109 ;;		_nrf24l01SetRXPipe
  3110 ;;		_nrf24l01SetTXPipe
  3111 ;;		_setMessage
  3112 ;;		_sleep
  3113 ;;		_strcpy
  3114 ;; This function is called by:
  3115 ;;		Startup code after reset
  3116 ;; This function uses a non-reentrant model
  3117 ;;
  3118                           
  3119                           
  3120                           ;psect for function _main
  3121  02F2                     _main:	
  3122                           
  3123                           ;main.c: 172: ANSELA = 0x00;
  3124                           
  3125                           ;incstack = 0
  3126                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3127  02F2  0023               	movlb	3	; select bank3
  3128  02F3  018C               	clrf	12	;volatile
  3129                           
  3130                           ;main.c: 173: ANSELC = 0x00;
  3131  02F4  018E               	clrf	14	;volatile
  3132                           
  3133                           ;main.c: 175: ODCONA = 0x00;
  3134  02F5  0025               	movlb	5	; select bank5
  3135  02F6  018C               	clrf	12	;volatile
  3136                           
  3137                           ;main.c: 176: ODCONC = 0x00;
  3138  02F7  018E               	clrf	14	;volatile
  3139                           
  3140                           ;main.c: 181: INLVLA = 0x00;
  3141  02F8  0027               	movlb	7	; select bank7
  3142  02F9  018C               	clrf	12	;volatile
  3143                           
  3144                           ;main.c: 182: INLVLC = 0x00;
  3145  02FA  018E               	clrf	14	;volatile
  3146                           
  3147                           ;main.c: 184: WPUA = 0x00;
  3148  02FB  0024               	movlb	4	; select bank4
  3149  02FC  018C               	clrf	12	;volatile
  3150                           
  3151                           ;main.c: 185: WPUC = 0x00;
  3152  02FD  018E               	clrf	14	;volatile
  3153                           
  3154                           ;main.c: 187: TRISCbits.TRISC5 = 0;
  3155  02FE  0021               	movlb	1	; select bank1
  3156  02FF  128E               	bcf	14,5	;volatile
  3157                           
  3158                           ;main.c: 188: TRISCbits.TRISC4 = 0;
  3159  0300  120E               	bcf	14,4	;volatile
  3160                           
  3161                           ;main.c: 190: PORTCbits.RC4 = 0;
  3162  0301  0020               	movlb	0	; select bank0
  3163  0302  120E               	bcf	14,4	;volatile
  3164                           
  3165                           ;main.c: 197: INTCONbits.PEIE = 0;
  3166  0303  130B               	bcf	11,6	;volatile
  3167                           
  3168                           ;main.c: 198: INTCONbits.GIE = 0;
  3169  0304  138B               	bcf	11,7	;volatile
  3170                           
  3171                           ;main.c: 200: OSCCON1bits.NOSC = 0b000;
  3172  0305  308F               	movlw	-113
  3173  0306  0032               	movlb	18	; select bank18
  3174  0307  0599               	andwf	25,f	;volatile
  3175                           
  3176                           ;main.c: 201: OSCCON1bits.NDIV = 0b000;
  3177  0308  30F0               	movlw	-16
  3178  0309  0599               	andwf	25,f	;volatile
  3179                           
  3180                           ;main.c: 203: _delay((unsigned long)((10)*(16000000/4000.0)));
  3181  030A  3034               	movlw	52
  3182  030B  0020               	movlb	0	; select bank0
  3183  030C  00D8               	movwf	??_main
  3184  030D  30F1               	movlw	241
  3185  030E                     u1937:	
  3186  030E  0B89               	decfsz	9,f
  3187  030F  2B0E               	goto	u1937
  3188  0310  0BD8               	decfsz	??_main,f
  3189  0311  2B0E               	goto	u1937
  3190  0312  3200               	nop2
  3191                           
  3192                           ;main.c: 205: flashRealod();
  3193  0313  318E  2658  3182   	fcall	_flashRealod
  3194                           
  3195                           ;main.c: 207: if (romData.check != 0x09){
  3196  0316  3009               	movlw	9
  3197  0317  0020               	movlb	0	; select bank0
  3198  0318  065C               	xorwf	_romData,w
  3199  0319  1903               	btfsc	3,2
  3200  031A  2B2D               	goto	l3259
  3201                           
  3202                           ;main.c: 208: romData.check = 0x09;
  3203  031B  3009               	movlw	9
  3204  031C  00D8               	movwf	??_main
  3205  031D  0858               	movf	??_main,w
  3206  031E  00DC               	movwf	_romData
  3207                           
  3208                           ;main.c: 209: strcpy(romData.name, "UW0");
  3209  031F  3032               	movlw	low (STR_9| (0+32768))
  3210  0320  00A1               	movwf	strcpy@from
  3211  0321  3090               	movlw	high (STR_9| (0+32768))
  3212  0322  00A2               	movwf	strcpy@from+1
  3213  0323  305D               	movlw	(low ((_romData| 0+1)))& (0+255)
  3214  0324  318E  2601  3182   	fcall	_strcpy
  3215                           
  3216                           ;main.c: 210: romData.bootMode = 0x00;
  3217  0327  0020               	movlb	0	; select bank0
  3218  0328  01ED               	clrf	_romData+17
  3219  0329  01EE               	clrf	_romData+18
  3220                           
  3221                           ;main.c: 211: flashUpdate();
  3222  032A  318E  26DA  3182   	fcall	_flashUpdate
  3223  032D                     l3259:	
  3224                           
  3225                           ;main.c: 212: };main.c: 214: strcpy(romData.name, "UW2");
  3226  032D  3036               	movlw	low (STR_10| (0+32768))
  3227  032E  0020               	movlb	0	; select bank0
  3228  032F  00A1               	movwf	strcpy@from
  3229  0330  3090               	movlw	high (STR_10| (0+32768))
  3230  0331  00A2               	movwf	strcpy@from+1
  3231  0332  305D               	movlw	(low ((_romData| 0+1)))& (0+255)
  3232  0333  318E  2601  3182   	fcall	_strcpy
  3233                           
  3234                           ;main.c: 216: flashRealod();
  3235  0336  318E  2658  3182   	fcall	_flashRealod
  3236                           
  3237                           ;main.c: 218: nrf24l01Init();
  3238  0339  3187  27D8  3182   	fcall	_nrf24l01Init
  3239                           
  3240                           ;main.c: 220: unsigned char pipe = nrf24l01GetPipe(romData.name);
  3241  033C  305D               	movlw	(low ((_romData| 0+1)))& (0+255)
  3242  033D  3187  27A4  3182   	fcall	_nrf24l01GetPipe
  3243  0340  0020               	movlb	0	; select bank0
  3244  0341  00D8               	movwf	??_main
  3245  0342  0858               	movf	??_main,w
  3246  0343  0021               	movlb	1	; select bank1
  3247  0344  00C2               	movwf	main@pipe^(0+128)
  3248                           
  3249                           ;main.c: 221: nrf24l01SetTXPipe(pipe);
  3250  0345  0842               	movf	main@pipe^(0+128),w
  3251  0346  3186  2630  3182   	fcall	_nrf24l01SetTXPipe
  3252                           
  3253                           ;main.c: 222: nrf24l01SetRXPipe(pipe);
  3254  0349  0021               	movlb	1	; select bank1
  3255  034A  0842               	movf	main@pipe^(0+128),w
  3256  034B  318E  26B9  3182   	fcall	_nrf24l01SetRXPipe
  3257                           
  3258                           ;main.c: 226: ADCON0bits.ADON = 0;
  3259  034E  0021               	movlb	1	; select bank1
  3260  034F  101D               	bcf	29,0	;volatile
  3261                           
  3262                           ;main.c: 229: ANSELAbits.ANSA4 = 1;
  3263  0350  0023               	movlb	3	; select bank3
  3264  0351  160C               	bsf	12,4	;volatile
  3265                           
  3266                           ;main.c: 230: TRISAbits.TRISA4 = 1;
  3267  0352  0021               	movlb	1	; select bank1
  3268  0353  160C               	bsf	12,4	;volatile
  3269                           
  3270                           ;main.c: 231: WPUAbits.WPUA4 = 0;
  3271  0354  0024               	movlb	4	; select bank4
  3272  0355  120C               	bcf	12,4	;volatile
  3273                           
  3274                           ;main.c: 234: ANSELCbits.ANSC3 = 1;
  3275  0356  0023               	movlb	3	; select bank3
  3276  0357  158E               	bsf	14,3	;volatile
  3277                           
  3278                           ;main.c: 235: TRISCbits.TRISC3 = 1;
  3279  0358  0021               	movlb	1	; select bank1
  3280  0359  158E               	bsf	14,3	;volatile
  3281                           
  3282                           ;main.c: 238: FVRCONbits.TSEN = 0;
  3283  035A  0022               	movlb	2	; select bank2
  3284  035B  1297               	bcf	23,5	;volatile
  3285                           
  3286                           ;main.c: 239: FVRCONbits.TSRNG = 0;
  3287  035C  1217               	bcf	23,4	;volatile
  3288                           
  3289                           ;main.c: 240: FVRCONbits.TSEN = 1;
  3290  035D  1697               	bsf	23,5	;volatile
  3291                           
  3292                           ;main.c: 243: FVRCONbits.FVREN = 0;
  3293  035E  1397               	bcf	23,7	;volatile
  3294                           
  3295                           ;main.c: 244: FVRCONbits.ADFVR = 1;
  3296  035F  0817               	movf	23,w	;volatile
  3297  0360  39FC               	andlw	-4
  3298  0361  3801               	iorlw	1
  3299  0362  0097               	movwf	23	;volatile
  3300                           
  3301                           ;main.c: 245: FVRCONbits.FVREN = 1;
  3302  0363  1797               	bsf	23,7	;volatile
  3303                           
  3304                           ;main.c: 247: ADCON1bits.ADCS = 0b111;
  3305  0364  3070               	movlw	112
  3306  0365  0021               	movlb	1	; select bank1
  3307  0366  049E               	iorwf	30,f	;volatile
  3308                           
  3309                           ;main.c: 248: ADCON1bits.ADFM = 1;
  3310  0367  179E               	bsf	30,7	;volatile
  3311                           
  3312                           ;main.c: 249: ADCON1bits.ADNREF = 0b0;
  3313  0368  111E               	bcf	30,2	;volatile
  3314                           
  3315                           ;main.c: 250: ADCON1bits.ADPREF = 0b00;
  3316  0369  30FC               	movlw	-4
  3317  036A  059E               	andwf	30,f	;volatile
  3318                           
  3319                           ;main.c: 252: ADCON0bits.CHS = 3;
  3320  036B  081D               	movf	29,w	;volatile
  3321  036C  3903               	andlw	-253
  3322  036D  380C               	iorlw	12
  3323  036E  009D               	movwf	29	;volatile
  3324                           
  3325                           ;main.c: 253: ADCON0bits.ADON = 1;
  3326  036F  141D               	bsf	29,0	;volatile
  3327                           
  3328                           ;main.c: 258: TRISAbits.TRISA2 = 1;
  3329  0370  150C               	bsf	12,2	;volatile
  3330                           
  3331                           ;main.c: 259: PIE0bits.INTE = 1;
  3332  0371  1410               	bsf	16,0	;volatile
  3333                           
  3334                           ;main.c: 260: INTCONbits.INTEDG = 0;
  3335  0372  100B               	bcf	11,0	;volatile
  3336                           
  3337                           ;main.c: 264: WDTCONbits.WDTPS = 11;
  3338  0373  0817               	movf	23,w	;volatile
  3339  0374  39C1               	andlw	-63
  3340  0375  3816               	iorlw	22
  3341  0376  0097               	movwf	23	;volatile
  3342                           
  3343                           ;main.c: 267: TRISAbits.TRISA5 = 0;
  3344  0377  128C               	bcf	12,5	;volatile
  3345                           
  3346                           ;main.c: 268: PORTAbits.RA5 = 0;
  3347  0378  0020               	movlb	0	; select bank0
  3348  0379  128C               	bcf	12,5	;volatile
  3349                           
  3350                           ;main.c: 271: INTCONbits.PEIE = 1;
  3351  037A  170B               	bsf	11,6	;volatile
  3352                           
  3353                           ;main.c: 272: INTCONbits.GIE = 1;
  3354  037B  178B               	bsf	11,7	;volatile
  3355                           
  3356                           ;main.c: 274: nrf24l01Packet_t packet;;main.c: 276: setMessage(&packet, "BOOT", romData.
      +                          bootMode);
  3357  037C  302D               	movlw	low (STR_11| (0+32768))
  3358  037D  00BD               	movwf	setMessage@topic
  3359  037E  3090               	movlw	high (STR_11| (0+32768))
  3360  037F  00BE               	movwf	setMessage@topic+1
  3361  0380  086D               	movf	_romData+17,w
  3362  0381  00BF               	movwf	setMessage@value
  3363  0382  086E               	movf	_romData+18,w
  3364  0383  00C0               	movwf	setMessage@value+1
  3365  0384  01C1               	clrf	setMessage@value+2
  3366  0385  01C2               	clrf	setMessage@value+3
  3367  0386  30C3               	movlw	(low (main@packet| 0))& (0+255)
  3368  0387  3184  24A9  3182   	fcall	_setMessage
  3369                           
  3370                           ;main.c: 277: packet.packetData.byte = 0;
  3371  038A  0021               	movlb	1	; select bank1
  3372  038B  01C3               	clrf	main@packet^(0+128)
  3373                           
  3374                           ;main.c: 278: packet.packetData.ACKRequest = 0;
  3375  038C  1143               	bcf	main@packet^(0+128),2
  3376                           
  3377                           ;main.c: 279: nrf24l01SendPacket(&packet);
  3378  038D  30C3               	movlw	(low (main@packet| 0))& (0+255)
  3379  038E  3182  2243  3182   	fcall	_nrf24l01SendPacket
  3380                           
  3381                           ;main.c: 280: sleep();
  3382  0391  318D  254A  3182   	fcall	_sleep
  3383  0394                     l3333:	
  3384                           ;main.c: 282: while(1){
  3385                           
  3386                           
  3387                           ;main.c: 283: loop();
  3388  0394  3180  2029  3182   	fcall	_loop
  3389  0397  2B94               	goto	l3333
  3390  0398                     __end_of_main:	
  3391                           ;main.c: 284: };main.c: 286: return;
  3392                           
  3393                           
  3394                           	psect	text1
  3395  0E01                     __ptext1:	
  3396 ;; *************** function _strcpy *****************
  3397 ;; Defined at:
  3398 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;  to              1    wreg     PTR unsigned char 
  3401 ;;		 -> romData(19), 
  3402 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  3403 ;;		 -> STR_10(4), STR_9(4), 
  3404 ;; Auto vars:     Size  Location     Type
  3405 ;;  to              1    5[BANK0 ] PTR unsigned char 
  3406 ;;		 -> romData(19), 
  3407 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  3408 ;;		 -> romData(19), 
  3409 ;; Return value:  Size  Location     Type
  3410 ;;                  1    wreg      PTR unsigned char 
  3411 ;; Registers used:
  3412 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3413 ;; Tracked objects:
  3414 ;;		On entry : 0/0
  3415 ;;		On exit  : 0/0
  3416 ;;		Unchanged: 0/0
  3417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3418 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3419 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3421 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3422 ;;Total ram usage:        5 bytes
  3423 ;; Hardware stack levels used:    1
  3424 ;; Hardware stack levels required when called:    7
  3425 ;; This function calls:
  3426 ;;		Nothing
  3427 ;; This function is called by:
  3428 ;;		_main
  3429 ;; This function uses a non-reentrant model
  3430 ;;
  3431                           
  3432                           
  3433                           ;psect for function _strcpy
  3434  0E01                     _strcpy:	
  3435                           
  3436                           ;incstack = 0
  3437                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3438                           ;strcpy@to stored from wreg
  3439  0E01  0020               	movlb	0	; select bank0
  3440  0E02  00A5               	movwf	strcpy@to
  3441  0E03  0825               	movf	strcpy@to,w
  3442  0E04  00A3               	movwf	??_strcpy
  3443  0E05  0823               	movf	??_strcpy,w
  3444  0E06  00A4               	movwf	strcpy@cp
  3445  0E07                     l2921:	
  3446  0E07  0824               	movf	strcpy@cp,w
  3447  0E08  0086               	movwf	6
  3448  0E09  0187               	clrf	7
  3449  0E0A  0821               	movf	strcpy@from,w
  3450  0E0B  0084               	movwf	4
  3451  0E0C  0822               	movf	strcpy@from+1,w
  3452  0E0D  0085               	movwf	5
  3453  0E0E  0800               	movf	0,w	;code access
  3454  0E0F  3FC0               	movwi [0]fsr1
  3455  0E10  0889               	movf	9,f
  3456  0E11  1903               	btfsc	3,2
  3457  0E12  0008               	return
  3458  0E13  3001               	movlw	1
  3459  0E14  00A3               	movwf	??_strcpy
  3460  0E15  0823               	movf	??_strcpy,w
  3461  0E16  07A4               	addwf	strcpy@cp,f
  3462  0E17  3001               	movlw	1
  3463  0E18  07A1               	addwf	strcpy@from,f
  3464  0E19  3000               	movlw	0
  3465  0E1A  3DA2               	addwfc	strcpy@from+1,f
  3466  0E1B  2E07               	goto	l2921
  3467  0E1C                     __end_of_strcpy:	
  3468                           ;	Return value of _strcpy is never used
  3469                           
  3470                           
  3471                           	psect	text2
  3472  07D8                     __ptext2:	
  3473 ;; *************** function _nrf24l01Init *****************
  3474 ;; Defined at:
  3475 ;;		line 444 in file "nrf24l01.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;		None
  3478 ;; Auto vars:     Size  Location     Type
  3479 ;;		None
  3480 ;; Return value:  Size  Location     Type
  3481 ;;                  1    wreg      void 
  3482 ;; Registers used:
  3483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3484 ;; Tracked objects:
  3485 ;;		On entry : 0/0
  3486 ;;		On exit  : 0/0
  3487 ;;		Unchanged: 0/0
  3488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3491 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3492 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3493 ;;Total ram usage:        2 bytes
  3494 ;; Hardware stack levels used:    1
  3495 ;; Hardware stack levels required when called:   12
  3496 ;; This function calls:
  3497 ;;		_nrf24l01CEHigh
  3498 ;;		_nrf24l01CELow
  3499 ;;		_nrf24l01InitRegisters
  3500 ;;		_nrf24l01InterfaceInit
  3501 ;; This function is called by:
  3502 ;;		_main
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           
  3507                           ;psect for function _nrf24l01Init
  3508  07D8                     _nrf24l01Init:	
  3509                           
  3510                           ;nrf24l01.c: 447: nrf24l01InterfaceInit();
  3511                           
  3512                           ;incstack = 0
  3513                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3514  07D8  318E  261C  3187   	fcall	_nrf24l01InterfaceInit
  3515                           
  3516                           ;nrf24l01.c: 452: nrf24l01CELow();
  3517  07DB  318D  2517  3187   	fcall	_nrf24l01CELow
  3518                           
  3519                           ;nrf24l01.c: 454: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3520  07DE  3002               	movlw	2
  3521  07DF  0020               	movlb	0	; select bank0
  3522  07E0  00B5               	movwf	??_nrf24l01Init+1
  3523  07E1  3004               	movlw	4
  3524  07E2  00B4               	movwf	??_nrf24l01Init
  3525  07E3  30BA               	movlw	186
  3526  07E4                     u1947:	
  3527  07E4  0B89               	decfsz	9,f
  3528  07E5  2FE4               	goto	u1947
  3529  07E6  0BB4               	decfsz	??_nrf24l01Init,f
  3530  07E7  2FE4               	goto	u1947
  3531  07E8  0BB5               	decfsz	??_nrf24l01Init+1,f
  3532  07E9  2FE4               	goto	u1947
  3533  07EA  0000               	nop
  3534                           
  3535                           ;nrf24l01.c: 456: nrf24l01InitRegisters();
  3536  07EB  3181  213D  3187   	fcall	_nrf24l01InitRegisters
  3537                           
  3538                           ;nrf24l01.c: 458: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3539  07EE  3002               	movlw	2
  3540  07EF  0020               	movlb	0	; select bank0
  3541  07F0  00B5               	movwf	??_nrf24l01Init+1
  3542  07F1  3004               	movlw	4
  3543  07F2  00B4               	movwf	??_nrf24l01Init
  3544  07F3  30BA               	movlw	186
  3545  07F4                     u1957:	
  3546  07F4  0B89               	decfsz	9,f
  3547  07F5  2FF4               	goto	u1957
  3548  07F6  0BB4               	decfsz	??_nrf24l01Init,f
  3549  07F7  2FF4               	goto	u1957
  3550  07F8  0BB5               	decfsz	??_nrf24l01Init+1,f
  3551  07F9  2FF4               	goto	u1957
  3552  07FA  0000               	nop
  3553                           
  3554                           ;nrf24l01.c: 460: nrf24l01CEHigh();
  3555  07FB  318D  2514         	fcall	_nrf24l01CEHigh
  3556  07FD  0008               	return
  3557  07FE                     __end_of_nrf24l01Init:	
  3558                           
  3559                           	psect	text3
  3560  0E1C                     __ptext3:	
  3561 ;; *************** function _nrf24l01InterfaceInit *****************
  3562 ;; Defined at:
  3563 ;;		line 28 in file "interface.c"
  3564 ;; Parameters:    Size  Location     Type
  3565 ;;		None
  3566 ;; Auto vars:     Size  Location     Type
  3567 ;;		None
  3568 ;; Return value:  Size  Location     Type
  3569 ;;                  1    wreg      void 
  3570 ;; Registers used:
  3571 ;;		wreg, status,2, status,0
  3572 ;; Tracked objects:
  3573 ;;		On entry : 0/0
  3574 ;;		On exit  : 0/0
  3575 ;;		Unchanged: 0/0
  3576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3581 ;;Total ram usage:        0 bytes
  3582 ;; Hardware stack levels used:    1
  3583 ;; Hardware stack levels required when called:    7
  3584 ;; This function calls:
  3585 ;;		Nothing
  3586 ;; This function is called by:
  3587 ;;		_nrf24l01Init
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591                           
  3592                           ;psect for function _nrf24l01InterfaceInit
  3593  0E1C                     _nrf24l01InterfaceInit:	
  3594                           
  3595                           ;interface.c: 30: TRISAbits.TRISA0 = 0;
  3596                           
  3597                           ;incstack = 0
  3598                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3599  0E1C  0021               	movlb	1	; select bank1
  3600  0E1D  100C               	bcf	12,0	;volatile
  3601                           
  3602                           ;interface.c: 31: TRISAbits.TRISA1 = 0;
  3603  0E1E  108C               	bcf	12,1	;volatile
  3604                           
  3605                           ;interface.c: 33: TRISCbits.TRISC1 = 1;
  3606  0E1F  148E               	bsf	14,1	;volatile
  3607                           
  3608                           ;interface.c: 34: TRISCbits.TRISC2 = 0;
  3609  0E20  110E               	bcf	14,2	;volatile
  3610                           
  3611                           ;interface.c: 35: TRISCbits.TRISC0 = 0;
  3612  0E21  100E               	bcf	14,0	;volatile
  3613                           
  3614                           ;interface.c: 37: SSP1CON1bits.SSPEN = 0;
  3615  0E22  0024               	movlb	4	; select bank4
  3616  0E23  1295               	bcf	21,5	;volatile
  3617                           
  3618                           ;interface.c: 39: RC1PPSbits.RC1PPS = 0b10001;
  3619  0E24  003D               	movlb	29	; select bank29
  3620  0E25  0821               	movf	33,w	;volatile
  3621  0E26  39E0               	andlw	-32
  3622  0E27  3811               	iorlw	17
  3623  0E28  00A1               	movwf	33	;volatile
  3624                           
  3625                           ;interface.c: 40: RC2PPSbits.RC2PPS = 0b11001;
  3626  0E29  0822               	movf	34,w	;volatile
  3627  0E2A  39E0               	andlw	-32
  3628  0E2B  3819               	iorlw	25
  3629  0E2C  00A2               	movwf	34	;volatile
  3630                           
  3631                           ;interface.c: 41: RC0PPSbits.RC0PPS = 0b11000;
  3632  0E2D  0820               	movf	32,w	;volatile
  3633  0E2E  39E0               	andlw	-32
  3634  0E2F  3818               	iorlw	24
  3635  0E30  00A0               	movwf	32	;volatile
  3636                           
  3637                           ;interface.c: 43: SSP1CON1bits.CKP = 0;
  3638  0E31  0024               	movlb	4	; select bank4
  3639  0E32  1215               	bcf	21,4	;volatile
  3640                           
  3641                           ;interface.c: 44: SSP1STATbits.CKE = 1;
  3642  0E33  1714               	bsf	20,6	;volatile
  3643                           
  3644                           ;interface.c: 45: SSP1CON1bits.SSPM = 0b0000;
  3645  0E34  30F0               	movlw	-16
  3646  0E35  0595               	andwf	21,f	;volatile
  3647                           
  3648                           ;interface.c: 47: SSP1CON1bits.SSPEN = 1;
  3649  0E36  1695               	bsf	21,5	;volatile
  3650  0E37  0008               	return
  3651  0E38                     __end_of_nrf24l01InterfaceInit:	
  3652                           
  3653                           	psect	text4
  3654  013D                     __ptext4:	
  3655 ;; *************** function _nrf24l01InitRegisters *****************
  3656 ;; Defined at:
  3657 ;;		line 343 in file "nrf24l01.c"
  3658 ;; Parameters:    Size  Location     Type
  3659 ;;		None
  3660 ;; Auto vars:     Size  Location     Type
  3661 ;;  i               2   18[BANK0 ] unsigned int 
  3662 ;;  config          1   17[BANK0 ] struct .
  3663 ;;  DynPD           1   16[BANK0 ] struct .
  3664 ;;  enAA            1   15[BANK0 ] struct .
  3665 ;;  status          1   14[BANK0 ] struct .
  3666 ;;  rfSetup         1   13[BANK0 ] struct .
  3667 ;;  feature         1   12[BANK0 ] struct .
  3668 ;;  setupAW         1   11[BANK0 ] struct .
  3669 ;;  channel         1   10[BANK0 ] struct .
  3670 ;; Return value:  Size  Location     Type
  3671 ;;                  1    wreg      void 
  3672 ;; Registers used:
  3673 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3674 ;; Tracked objects:
  3675 ;;		On entry : 0/0
  3676 ;;		On exit  : 0/0
  3677 ;;		Unchanged: 0/0
  3678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3680 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3681 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3682 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3683 ;;Total ram usage:       12 bytes
  3684 ;; Hardware stack levels used:    1
  3685 ;; Hardware stack levels required when called:   11
  3686 ;; This function calls:
  3687 ;;		___bmul
  3688 ;;		_nrf24l01SPIEnd
  3689 ;;		_nrf24l01SPISend
  3690 ;;		_nrf24l01SPIStart
  3691 ;;		_nrf24l01Send
  3692 ;;		_nrf24l01SetRXPipe
  3693 ;;		_nrf24l01SetTXPipe
  3694 ;; This function is called by:
  3695 ;;		_nrf24l01Init
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           
  3700                           ;psect for function _nrf24l01InitRegisters
  3701  013D                     _nrf24l01InitRegisters:	
  3702                           
  3703                           ;nrf24l01.c: 345: n_CONFIG_t config;;nrf24l01.c: 347: config.PWR_UP = 0;
  3704                           
  3705                           ;incstack = 0
  3706                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3707  013D  0020               	movlb	0	; select bank0
  3708  013E  10B1               	bcf	nrf24l01InitRegisters@config,1
  3709                           
  3710                           ;nrf24l01.c: 348: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3711  013F  0831               	movf	nrf24l01InitRegisters@config,w
  3712  0140  00A8               	movwf	??_nrf24l01InitRegisters
  3713  0141  0828               	movf	??_nrf24l01InitRegisters,w
  3714  0142  00A1               	movwf	nrf24l01Send@data
  3715  0143  3020               	movlw	32
  3716  0144  318E  2678  3181   	fcall	_nrf24l01Send
  3717                           
  3718                           ;nrf24l01.c: 350: n_SETUP_AW_t setupAW;;nrf24l01.c: 351: setupAW.byte = 0x00;
  3719  0147  0020               	movlb	0	; select bank0
  3720  0148  01AB               	clrf	nrf24l01InitRegisters@setupAW
  3721                           
  3722                           ;nrf24l01.c: 352: setupAW.AW = 0b11;
  3723  0149  3003               	movlw	3
  3724  014A  04AB               	iorwf	nrf24l01InitRegisters@setupAW,f
  3725                           
  3726                           ;nrf24l01.c: 353: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x02, setupAW.byte);
  3727  014B  082B               	movf	nrf24l01InitRegisters@setupAW,w
  3728  014C  00A8               	movwf	??_nrf24l01InitRegisters
  3729  014D  0828               	movf	??_nrf24l01InitRegisters,w
  3730  014E  00A1               	movwf	nrf24l01Send@data
  3731  014F  3022               	movlw	34
  3732  0150  318E  2678  3181   	fcall	_nrf24l01Send
  3733                           
  3734                           ;nrf24l01.c: 356: n_RF_CH_t channel;;nrf24l01.c: 357: channel.RF_CH = 2;
  3735  0153  0020               	movlb	0	; select bank0
  3736  0154  082A               	movf	nrf24l01InitRegisters@channel,w
  3737  0155  3980               	andlw	-128
  3738  0156  3802               	iorlw	2
  3739  0157  00AA               	movwf	nrf24l01InitRegisters@channel
  3740                           
  3741                           ;nrf24l01.c: 358: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3742  0158  082A               	movf	nrf24l01InitRegisters@channel,w
  3743  0159  00A8               	movwf	??_nrf24l01InitRegisters
  3744  015A  0828               	movf	??_nrf24l01InitRegisters,w
  3745  015B  00A1               	movwf	nrf24l01Send@data
  3746  015C  3025               	movlw	37
  3747  015D  318E  2678  3181   	fcall	_nrf24l01Send
  3748                           
  3749                           ;nrf24l01.c: 361: n_RF_SETUP_t rfSetup;;nrf24l01.c: 362: rfSetup.byte = 0x00;
  3750  0160  0020               	movlb	0	; select bank0
  3751  0161  01AD               	clrf	nrf24l01InitRegisters@rfSetup
  3752                           
  3753                           ;nrf24l01.c: 363: rfSetup.RF_DR_LOW = 0;
  3754  0162  12AD               	bcf	nrf24l01InitRegisters@rfSetup,5
  3755                           
  3756                           ;nrf24l01.c: 364: rfSetup.RF_DR_HIGH = 1;
  3757  0163  15AD               	bsf	nrf24l01InitRegisters@rfSetup,3
  3758                           
  3759                           ;nrf24l01.c: 365: rfSetup.RF_PWR = 3;
  3760  0164  3006               	movlw	6
  3761  0165  04AD               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3762                           
  3763                           ;nrf24l01.c: 366: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3764  0166  082D               	movf	nrf24l01InitRegisters@rfSetup,w
  3765  0167  00A8               	movwf	??_nrf24l01InitRegisters
  3766  0168  0828               	movf	??_nrf24l01InitRegisters,w
  3767  0169  00A1               	movwf	nrf24l01Send@data
  3768  016A  3026               	movlw	38
  3769  016B  318E  2678  3181   	fcall	_nrf24l01Send
  3770                           
  3771                           ;nrf24l01.c: 369: nrf24l01SetRXPipe(0xFF);
  3772  016E  30FF               	movlw	255
  3773  016F  318E  26B9  3181   	fcall	_nrf24l01SetRXPipe
  3774                           
  3775                           ;nrf24l01.c: 372: n_EN_AA_t enAA;;nrf24l01.c: 373: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3776  0172  0020               	movlb	0	; select bank0
  3777  0173  01A1               	clrf	nrf24l01Send@data
  3778  0174  3001               	movlw	1
  3779  0175  318E  2678  3181   	fcall	_nrf24l01Send
  3780  0178  0020               	movlb	0	; select bank0
  3781  0179  00A8               	movwf	??_nrf24l01InitRegisters
  3782  017A  0828               	movf	??_nrf24l01InitRegisters,w
  3783  017B  00AF               	movwf	nrf24l01InitRegisters@enAA
  3784                           
  3785                           ;nrf24l01.c: 374: enAA.ENAA_P0 = 0;
  3786  017C  102F               	bcf	nrf24l01InitRegisters@enAA,0
  3787                           
  3788                           ;nrf24l01.c: 375: enAA.ENAA_P1 = 0;
  3789  017D  10AF               	bcf	nrf24l01InitRegisters@enAA,1
  3790                           
  3791                           ;nrf24l01.c: 376: enAA.ENAA_P2 = 0;
  3792  017E  112F               	bcf	nrf24l01InitRegisters@enAA,2
  3793                           
  3794                           ;nrf24l01.c: 377: enAA.ENAA_P3 = 0;
  3795  017F  11AF               	bcf	nrf24l01InitRegisters@enAA,3
  3796                           
  3797                           ;nrf24l01.c: 378: enAA.ENAA_P4 = 0;
  3798  0180  122F               	bcf	nrf24l01InitRegisters@enAA,4
  3799                           
  3800                           ;nrf24l01.c: 379: enAA.ENAA_P5 = 0;
  3801  0181  12AF               	bcf	nrf24l01InitRegisters@enAA,5
  3802                           
  3803                           ;nrf24l01.c: 380: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3804  0182  082F               	movf	nrf24l01InitRegisters@enAA,w
  3805  0183  00A8               	movwf	??_nrf24l01InitRegisters
  3806  0184  0828               	movf	??_nrf24l01InitRegisters,w
  3807  0185  00A1               	movwf	nrf24l01Send@data
  3808  0186  3021               	movlw	33
  3809  0187  318E  2678  3181   	fcall	_nrf24l01Send
  3810                           
  3811                           ;nrf24l01.c: 384: n_FEATURE_t feature;;nrf24l01.c: 385: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3812  018A  0020               	movlb	0	; select bank0
  3813  018B  01A1               	clrf	nrf24l01Send@data
  3814  018C  301D               	movlw	29
  3815  018D  318E  2678  3181   	fcall	_nrf24l01Send
  3816  0190  0020               	movlb	0	; select bank0
  3817  0191  00A8               	movwf	??_nrf24l01InitRegisters
  3818  0192  0828               	movf	??_nrf24l01InitRegisters,w
  3819  0193  00AC               	movwf	nrf24l01InitRegisters@feature
  3820                           
  3821                           ;nrf24l01.c: 386: feature.EN_DPL = 1;
  3822  0194  152C               	bsf	nrf24l01InitRegisters@feature,2
  3823                           
  3824                           ;nrf24l01.c: 387: feature.EN_DYN_ACK = 1;
  3825  0195  142C               	bsf	nrf24l01InitRegisters@feature,0
  3826                           
  3827                           ;nrf24l01.c: 388: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3828  0196  082C               	movf	nrf24l01InitRegisters@feature,w
  3829  0197  00A8               	movwf	??_nrf24l01InitRegisters
  3830  0198  0828               	movf	??_nrf24l01InitRegisters,w
  3831  0199  00A1               	movwf	nrf24l01Send@data
  3832  019A  303D               	movlw	61
  3833  019B  318E  2678  3181   	fcall	_nrf24l01Send
  3834                           
  3835                           ;nrf24l01.c: 390: n_DYNPD_t DynPD;;nrf24l01.c: 391: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3836  019E  0020               	movlb	0	; select bank0
  3837  019F  01A1               	clrf	nrf24l01Send@data
  3838  01A0  301C               	movlw	28
  3839  01A1  318E  2678  3181   	fcall	_nrf24l01Send
  3840  01A4  0020               	movlb	0	; select bank0
  3841  01A5  00A8               	movwf	??_nrf24l01InitRegisters
  3842  01A6  0828               	movf	??_nrf24l01InitRegisters,w
  3843  01A7  00B0               	movwf	nrf24l01InitRegisters@DynPD
  3844                           
  3845                           ;nrf24l01.c: 392: DynPD.DPL_P0 = 1;
  3846  01A8  1430               	bsf	nrf24l01InitRegisters@DynPD,0
  3847                           
  3848                           ;nrf24l01.c: 393: DynPD.DPL_P1 = 1;
  3849  01A9  14B0               	bsf	nrf24l01InitRegisters@DynPD,1
  3850                           
  3851                           ;nrf24l01.c: 394: DynPD.DPL_P2 = 1;
  3852  01AA  1530               	bsf	nrf24l01InitRegisters@DynPD,2
  3853                           
  3854                           ;nrf24l01.c: 395: DynPD.DPL_P3 = 1;
  3855  01AB  15B0               	bsf	nrf24l01InitRegisters@DynPD,3
  3856                           
  3857                           ;nrf24l01.c: 396: DynPD.DPL_P4 = 1;
  3858  01AC  1630               	bsf	nrf24l01InitRegisters@DynPD,4
  3859                           
  3860                           ;nrf24l01.c: 397: DynPD.DPL_P5 = 1;
  3861  01AD  16B0               	bsf	nrf24l01InitRegisters@DynPD,5
  3862                           
  3863                           ;nrf24l01.c: 398: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3864  01AE  0830               	movf	nrf24l01InitRegisters@DynPD,w
  3865  01AF  00A8               	movwf	??_nrf24l01InitRegisters
  3866  01B0  0828               	movf	??_nrf24l01InitRegisters,w
  3867  01B1  00A1               	movwf	nrf24l01Send@data
  3868  01B2  303C               	movlw	60
  3869  01B3  318E  2678  3181   	fcall	_nrf24l01Send
  3870                           
  3871                           ;nrf24l01.c: 401: unsigned int i;;nrf24l01.c: 402: for (i = 0; i < 6; i++){
  3872  01B6  0020               	movlb	0	; select bank0
  3873  01B7  01B2               	clrf	nrf24l01InitRegisters@i
  3874  01B8  01B3               	clrf	nrf24l01InitRegisters@i+1
  3875  01B9  3000               	movlw	0
  3876  01BA  0233               	subwf	nrf24l01InitRegisters@i+1,w
  3877  01BB  3006               	movlw	6
  3878  01BC  1903               	skipnz
  3879  01BD  0232               	subwf	nrf24l01InitRegisters@i,w
  3880  01BE  1803               	btfsc	3,0
  3881  01BF  2A19               	goto	l2711
  3882  01C0                     l2697:	
  3883                           
  3884                           ;nrf24l01.c: 404: nrf24l01SPIStart();
  3885  01C0  318D  2535  3181   	fcall	_nrf24l01SPIStart
  3886                           
  3887                           ;nrf24l01.c: 405: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  3888  01C3  0020               	movlb	0	; select bank0
  3889  01C4  0832               	movf	nrf24l01InitRegisters@i,w
  3890  01C5  3E0A               	addlw	10
  3891  01C6  3820               	iorlw	32
  3892  01C7  318D  253D  3181   	fcall	_nrf24l01SPISend
  3893                           
  3894                           ;nrf24l01.c: 407: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  3895  01CA  301D               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3896  01CB  0084               	movwf	4
  3897  01CC  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3898  01CD  0085               	movwf	5
  3899  01CE  0800               	movf	0,w	;code access
  3900  01CF  0020               	movlb	0	; select bank0
  3901  01D0  00A8               	movwf	??_nrf24l01InitRegisters
  3902  01D1  0832               	movf	nrf24l01InitRegisters@i,w
  3903  01D2  00A9               	movwf	??_nrf24l01InitRegisters+1
  3904  01D3  0829               	movf	??_nrf24l01InitRegisters+1,w
  3905  01D4  00A1               	movwf	___bmul@multiplicand
  3906  01D5  3044               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3907  01D6  0084               	movwf	4
  3908  01D7  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3909  01D8  0085               	movwf	5
  3910  01D9  0800               	movf	0,w	;code access
  3911  01DA  318D  255C  3181   	fcall	___bmul
  3912  01DD  0020               	movlb	0	; select bank0
  3913  01DE  0728               	addwf	??_nrf24l01InitRegisters,w
  3914  01DF  318D  253D  3181   	fcall	_nrf24l01SPISend
  3915                           
  3916                           ;nrf24l01.c: 409: if (i < 2){
  3917  01E2  3000               	movlw	0
  3918  01E3  0020               	movlb	0	; select bank0
  3919  01E4  0233               	subwf	nrf24l01InitRegisters@i+1,w
  3920  01E5  3002               	movlw	2
  3921  01E6  1903               	skipnz
  3922  01E7  0232               	subwf	nrf24l01InitRegisters@i,w
  3923  01E8  1803               	skipnc
  3924  01E9  2A0A               	goto	l2705
  3925                           
  3926                           ;nrf24l01.c: 410: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3927  01EA  301C               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3928  01EB  0084               	movwf	4
  3929  01EC  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3930  01ED  0085               	movwf	5
  3931  01EE  0800               	movf	0,w	;code access
  3932  01EF  318D  253D  3181   	fcall	_nrf24l01SPISend
  3933                           
  3934                           ;nrf24l01.c: 411: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3935  01F2  301B               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3936  01F3  0084               	movwf	4
  3937  01F4  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3938  01F5  0085               	movwf	5
  3939  01F6  0800               	movf	0,w	;code access
  3940  01F7  318D  253D  3181   	fcall	_nrf24l01SPISend
  3941                           
  3942                           ;nrf24l01.c: 412: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3943  01FA  301A               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3944  01FB  0084               	movwf	4
  3945  01FC  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3946  01FD  0085               	movwf	5
  3947  01FE  0800               	movf	0,w	;code access
  3948  01FF  318D  253D  3181   	fcall	_nrf24l01SPISend
  3949                           
  3950                           ;nrf24l01.c: 413: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3951  0202  3019               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3952  0203  0084               	movwf	4
  3953  0204  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3954  0205  0085               	movwf	5
  3955  0206  0800               	movf	0,w	;code access
  3956  0207  318D  253D  3181   	fcall	_nrf24l01SPISend
  3957  020A                     l2705:	
  3958                           
  3959                           ;nrf24l01.c: 414: };nrf24l01.c: 416: nrf24l01SPIEnd();
  3960  020A  318D  2526  3181   	fcall	_nrf24l01SPIEnd
  3961  020D  3001               	movlw	1
  3962  020E  0020               	movlb	0	; select bank0
  3963  020F  07B2               	addwf	nrf24l01InitRegisters@i,f
  3964  0210  3000               	movlw	0
  3965  0211  3DB3               	addwfc	nrf24l01InitRegisters@i+1,f
  3966  0212  3000               	movlw	0
  3967  0213  0233               	subwf	nrf24l01InitRegisters@i+1,w
  3968  0214  3006               	movlw	6
  3969  0215  1903               	skipnz
  3970  0216  0232               	subwf	nrf24l01InitRegisters@i,w
  3971  0217  1C03               	skipc
  3972  0218  29C0               	goto	l2697
  3973  0219                     l2711:	
  3974                           
  3975                           ;nrf24l01.c: 417: };nrf24l01.c: 419: nrf24l01SetTXPipe(0);
  3976  0219  3000               	movlw	0
  3977  021A  3186  2630  3181   	fcall	_nrf24l01SetTXPipe
  3978                           
  3979                           ;nrf24l01.c: 423: n_STATUS_t status;;nrf24l01.c: 424: status.byte = 0x00;
  3980  021D  0020               	movlb	0	; select bank0
  3981  021E  01AE               	clrf	nrf24l01InitRegisters@status
  3982                           
  3983                           ;nrf24l01.c: 425: status.RX_DR = 1;
  3984  021F  172E               	bsf	nrf24l01InitRegisters@status,6
  3985                           
  3986                           ;nrf24l01.c: 426: status.TX_DS = 1;
  3987  0220  16AE               	bsf	nrf24l01InitRegisters@status,5
  3988                           
  3989                           ;nrf24l01.c: 427: status.MAX_RT = 1;
  3990  0221  162E               	bsf	nrf24l01InitRegisters@status,4
  3991                           
  3992                           ;nrf24l01.c: 428: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.byte);
  3993  0222  082E               	movf	nrf24l01InitRegisters@status,w
  3994  0223  00A8               	movwf	??_nrf24l01InitRegisters
  3995  0224  0828               	movf	??_nrf24l01InitRegisters,w
  3996  0225  00A1               	movwf	nrf24l01Send@data
  3997  0226  3027               	movlw	39
  3998  0227  318E  2678  3181   	fcall	_nrf24l01Send
  3999                           
  4000                           ;nrf24l01.c: 431: nrf24l01Send((unsigned) 0b11100001, 0);
  4001  022A  0020               	movlb	0	; select bank0
  4002  022B  01A1               	clrf	nrf24l01Send@data
  4003  022C  30E1               	movlw	225
  4004  022D  318E  2678  3181   	fcall	_nrf24l01Send
  4005                           
  4006                           ;nrf24l01.c: 432: nrf24l01Send((unsigned) 0b11100010, 0);
  4007  0230  0020               	movlb	0	; select bank0
  4008  0231  01A1               	clrf	nrf24l01Send@data
  4009  0232  30E2               	movlw	226
  4010  0233  318E  2678  3181   	fcall	_nrf24l01Send
  4011                           
  4012                           ;nrf24l01.c: 435: config.PRIM_RX = 1;
  4013  0236  0020               	movlb	0	; select bank0
  4014  0237  1431               	bsf	nrf24l01InitRegisters@config,0
  4015                           
  4016                           ;nrf24l01.c: 436: config.EN_CRC = 1;
  4017  0238  15B1               	bsf	nrf24l01InitRegisters@config,3
  4018                           
  4019                           ;nrf24l01.c: 437: config.CRCO = 1;
  4020  0239  1531               	bsf	nrf24l01InitRegisters@config,2
  4021                           
  4022                           ;nrf24l01.c: 438: config.PWR_UP = 1;
  4023  023A  14B1               	bsf	nrf24l01InitRegisters@config,1
  4024                           
  4025                           ;nrf24l01.c: 439: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  4026  023B  0831               	movf	nrf24l01InitRegisters@config,w
  4027  023C  00A8               	movwf	??_nrf24l01InitRegisters
  4028  023D  0828               	movf	??_nrf24l01InitRegisters,w
  4029  023E  00A1               	movwf	nrf24l01Send@data
  4030  023F  3020               	movlw	32
  4031  0240  318E  2678         	fcall	_nrf24l01Send
  4032  0242  0008               	return
  4033  0243                     __end_of_nrf24l01InitRegisters:	
  4034                           
  4035                           	psect	text5
  4036  0630                     __ptext5:	
  4037 ;; *************** function _nrf24l01SetTXPipe *****************
  4038 ;; Defined at:
  4039 ;;		line 309 in file "nrf24l01.c"
  4040 ;; Parameters:    Size  Location     Type
  4041 ;;  pipe            1    wreg     unsigned char 
  4042 ;; Auto vars:     Size  Location     Type
  4043 ;;  pipe            1    7[BANK0 ] unsigned char 
  4044 ;; Return value:  Size  Location     Type
  4045 ;;                  1    wreg      void 
  4046 ;; Registers used:
  4047 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4048 ;; Tracked objects:
  4049 ;;		On entry : 0/0
  4050 ;;		On exit  : 0/0
  4051 ;;		Unchanged: 0/0
  4052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4054 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4055 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4056 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4057 ;;Total ram usage:        3 bytes
  4058 ;; Hardware stack levels used:    1
  4059 ;; Hardware stack levels required when called:    9
  4060 ;; This function calls:
  4061 ;;		___bmul
  4062 ;;		_nrf24l01SPIEnd
  4063 ;;		_nrf24l01SPISend
  4064 ;;		_nrf24l01SPIStart
  4065 ;; This function is called by:
  4066 ;;		_main
  4067 ;;		_nrf24l01InitRegisters
  4068 ;;		_nrf24l01SendACK
  4069 ;; This function uses a non-reentrant model
  4070 ;;
  4071                           
  4072                           
  4073                           ;psect for function _nrf24l01SetTXPipe
  4074  0630                     _nrf24l01SetTXPipe:	
  4075                           
  4076                           ;incstack = 0
  4077                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4078                           ;nrf24l01SetTXPipe@pipe stored from wreg
  4079  0630  0020               	movlb	0	; select bank0
  4080  0631  00A7               	movwf	nrf24l01SetTXPipe@pipe
  4081                           
  4082                           ;nrf24l01.c: 312: nrf24l01SPIStart();
  4083  0632  318D  2535  3186   	fcall	_nrf24l01SPIStart
  4084                           
  4085                           ;nrf24l01.c: 313: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  4086  0635  3030               	movlw	48
  4087  0636  318D  253D  3186   	fcall	_nrf24l01SPISend
  4088                           
  4089                           ;nrf24l01.c: 314: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  4090  0639  301D               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4091  063A  0084               	movwf	4
  4092  063B  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4093  063C  0085               	movwf	5
  4094  063D  0800               	movf	0,w	;code access
  4095  063E  0020               	movlb	0	; select bank0
  4096  063F  00A5               	movwf	??_nrf24l01SetTXPipe
  4097  0640  3044               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4098  0641  0084               	movwf	4
  4099  0642  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4100  0643  0085               	movwf	5
  4101  0644  0800               	movf	0,w	;code access
  4102  0645  00A6               	movwf	??_nrf24l01SetTXPipe+1
  4103  0646  0826               	movf	??_nrf24l01SetTXPipe+1,w
  4104  0647  00A1               	movwf	___bmul@multiplicand
  4105  0648  0827               	movf	nrf24l01SetTXPipe@pipe,w
  4106  0649  318D  255C  3186   	fcall	___bmul
  4107  064C  0020               	movlb	0	; select bank0
  4108  064D  0725               	addwf	??_nrf24l01SetTXPipe,w
  4109  064E  318D  253D  3186   	fcall	_nrf24l01SPISend
  4110                           
  4111                           ;nrf24l01.c: 315: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4112  0651  301C               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4113  0652  0084               	movwf	4
  4114  0653  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4115  0654  0085               	movwf	5
  4116  0655  0800               	movf	0,w	;code access
  4117  0656  318D  253D  3186   	fcall	_nrf24l01SPISend
  4118                           
  4119                           ;nrf24l01.c: 316: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4120  0659  301B               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4121  065A  0084               	movwf	4
  4122  065B  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4123  065C  0085               	movwf	5
  4124  065D  0800               	movf	0,w	;code access
  4125  065E  318D  253D  3186   	fcall	_nrf24l01SPISend
  4126                           
  4127                           ;nrf24l01.c: 317: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4128  0661  301A               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4129  0662  0084               	movwf	4
  4130  0663  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4131  0664  0085               	movwf	5
  4132  0665  0800               	movf	0,w	;code access
  4133  0666  318D  253D  3186   	fcall	_nrf24l01SPISend
  4134                           
  4135                           ;nrf24l01.c: 318: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4136  0669  3019               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4137  066A  0084               	movwf	4
  4138  066B  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4139  066C  0085               	movwf	5
  4140  066D  0800               	movf	0,w	;code access
  4141  066E  318D  253D  3186   	fcall	_nrf24l01SPISend
  4142                           
  4143                           ;nrf24l01.c: 319: nrf24l01SPIEnd();
  4144  0671  318D  2526         	fcall	_nrf24l01SPIEnd
  4145  0673  0008               	return
  4146  0674                     __end_of_nrf24l01SetTXPipe:	
  4147                           
  4148                           	psect	text6
  4149  0D5C                     __ptext6:	
  4150 ;; *************** function ___bmul *****************
  4151 ;; Defined at:
  4152 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  4153 ;; Parameters:    Size  Location     Type
  4154 ;;  multiplier      1    wreg     unsigned char 
  4155 ;;  multiplicand    1    1[BANK0 ] unsigned char 
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;  multiplier      1    4[BANK0 ] unsigned char 
  4158 ;;  product         1    3[BANK0 ] unsigned char 
  4159 ;; Return value:  Size  Location     Type
  4160 ;;                  1    wreg      unsigned char 
  4161 ;; Registers used:
  4162 ;;		wreg, status,2, status,0
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4168 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4169 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4170 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4171 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4172 ;;Total ram usage:        4 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; Hardware stack levels required when called:    7
  4175 ;; This function calls:
  4176 ;;		Nothing
  4177 ;; This function is called by:
  4178 ;;		_nrf24l01SetTXPipe
  4179 ;;		_nrf24l01InitRegisters
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           
  4184                           ;psect for function ___bmul
  4185  0D5C                     ___bmul:	
  4186                           
  4187                           ;incstack = 0
  4188                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4189                           ;___bmul@multiplier stored from wreg
  4190  0D5C  0020               	movlb	0	; select bank0
  4191  0D5D  00A4               	movwf	___bmul@multiplier
  4192  0D5E  01A3               	clrf	___bmul@product
  4193  0D5F                     l2051:	
  4194  0D5F  1C24               	btfss	___bmul@multiplier,0
  4195  0D60  2D65               	goto	l2055
  4196  0D61  0821               	movf	___bmul@multiplicand,w
  4197  0D62  00A2               	movwf	??___bmul
  4198  0D63  0822               	movf	??___bmul,w
  4199  0D64  07A3               	addwf	___bmul@product,f
  4200  0D65                     l2055:	
  4201  0D65  1003               	clrc
  4202  0D66  0DA1               	rlf	___bmul@multiplicand,f
  4203  0D67  1003               	clrc
  4204  0D68  0CA4               	rrf	___bmul@multiplier,f
  4205  0D69  0824               	movf	___bmul@multiplier,w
  4206  0D6A  1D03               	btfss	3,2
  4207  0D6B  2D5F               	goto	l2051
  4208  0D6C  0823               	movf	___bmul@product,w
  4209  0D6D  0008               	return
  4210  0D6E                     __end_of___bmul:	
  4211                           
  4212                           	psect	text7
  4213  0EB9                     __ptext7:	
  4214 ;; *************** function _nrf24l01SetRXPipe *****************
  4215 ;; Defined at:
  4216 ;;		line 322 in file "nrf24l01.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;  pipe            1    wreg     unsigned char 
  4219 ;; Auto vars:     Size  Location     Type
  4220 ;;  pipe            1    6[BANK0 ] unsigned char 
  4221 ;;  enRXAddr        1    7[BANK0 ] struct .
  4222 ;; Return value:  Size  Location     Type
  4223 ;;                  1    wreg      void 
  4224 ;; Registers used:
  4225 ;;		wreg, status,2, status,0, pclath, cstack
  4226 ;; Tracked objects:
  4227 ;;		On entry : 0/0
  4228 ;;		On exit  : 0/0
  4229 ;;		Unchanged: 0/0
  4230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4232 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4233 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4234 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4235 ;;Total ram usage:        4 bytes
  4236 ;; Hardware stack levels used:    1
  4237 ;; Hardware stack levels required when called:   10
  4238 ;; This function calls:
  4239 ;;		_nrf24l01Send
  4240 ;; This function is called by:
  4241 ;;		_main
  4242 ;;		_nrf24l01InitRegisters
  4243 ;; This function uses a non-reentrant model
  4244 ;;
  4245                           
  4246                           
  4247                           ;psect for function _nrf24l01SetRXPipe
  4248  0EB9                     _nrf24l01SetRXPipe:	
  4249                           
  4250                           ;incstack = 0
  4251                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  4252                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4253  0EB9  0020               	movlb	0	; select bank0
  4254  0EBA  00A6               	movwf	nrf24l01SetRXPipe@pipe
  4255                           
  4256                           ;nrf24l01.c: 324: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 326: if (pipe > 5){
  4257  0EBB  3006               	movlw	6
  4258  0EBC  0226               	subwf	nrf24l01SetRXPipe@pipe,w
  4259  0EBD  1C03               	skipc
  4260  0EBE  2EC6               	goto	l373
  4261                           
  4262                           ;nrf24l01.c: 327: enRXAddr.ERX_P0 = 1;
  4263  0EBF  1427               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4264                           
  4265                           ;nrf24l01.c: 328: enRXAddr.ERX_P1 = 1;
  4266  0EC0  14A7               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4267                           
  4268                           ;nrf24l01.c: 329: enRXAddr.ERX_P2 = 1;
  4269  0EC1  1527               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4270                           
  4271                           ;nrf24l01.c: 330: enRXAddr.ERX_P3 = 1;
  4272  0EC2  15A7               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4273                           
  4274                           ;nrf24l01.c: 331: enRXAddr.ERX_P4 = 1;
  4275  0EC3  1627               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4276                           
  4277                           ;nrf24l01.c: 332: enRXAddr.ERX_P5 = 1;
  4278  0EC4  16A7               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4279                           
  4280                           ;nrf24l01.c: 333: }
  4281  0EC5  2ED2               	goto	l2295
  4282  0EC6                     l373:	
  4283                           
  4284                           ;nrf24l01.c: 335: else{;nrf24l01.c: 336: enRXAddr.ERX_P0 = 1;
  4285  0EC6  1427               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4286                           
  4287                           ;nrf24l01.c: 337: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4288  0EC7  0827               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4289  0EC8  00A4               	movwf	??_nrf24l01SetRXPipe
  4290  0EC9  0A26               	incf	nrf24l01SetRXPipe@pipe,w
  4291  0ECA  2ECC               	goto	u1214
  4292  0ECB                     u1215:	
  4293  0ECB  35A4               	lslf	??_nrf24l01SetRXPipe,f
  4294  0ECC                     u1214:	
  4295  0ECC  0B89               	decfsz	9,f
  4296  0ECD  2ECB               	goto	u1215
  4297  0ECE  0824               	movf	??_nrf24l01SetRXPipe,w
  4298  0ECF  00A5               	movwf	??_nrf24l01SetRXPipe+1
  4299  0ED0  0825               	movf	??_nrf24l01SetRXPipe+1,w
  4300  0ED1  00A7               	movwf	nrf24l01SetRXPipe@enRXAddr
  4301  0ED2                     l2295:	
  4302                           
  4303                           ;nrf24l01.c: 338: };nrf24l01.c: 340: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4304  0ED2  0827               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4305  0ED3  00A4               	movwf	??_nrf24l01SetRXPipe
  4306  0ED4  0824               	movf	??_nrf24l01SetRXPipe,w
  4307  0ED5  00A1               	movwf	nrf24l01Send@data
  4308  0ED6  3022               	movlw	34
  4309  0ED7  318E  2678         	fcall	_nrf24l01Send
  4310  0ED9  0008               	return
  4311  0EDA                     __end_of_nrf24l01SetRXPipe:	
  4312                           
  4313                           	psect	text8
  4314  07A4                     __ptext8:	
  4315 ;; *************** function _nrf24l01GetPipe *****************
  4316 ;; Defined at:
  4317 ;;		line 157 in file "main.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;  name            1    wreg     PTR unsigned char 
  4320 ;;		 -> romData(19), 
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;  name            1   12[BANK0 ] PTR unsigned char 
  4323 ;;		 -> romData(19), 
  4324 ;;  i               1   13[BANK0 ] unsigned char 
  4325 ;;  pipe            1   11[BANK0 ] unsigned char 
  4326 ;; Return value:  Size  Location     Type
  4327 ;;                  1    wreg      unsigned char 
  4328 ;; Registers used:
  4329 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4330 ;; Tracked objects:
  4331 ;;		On entry : 0/0
  4332 ;;		On exit  : 0/0
  4333 ;;		Unchanged: 0/0
  4334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4336 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4337 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4338 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4339 ;;Total ram usage:        5 bytes
  4340 ;; Hardware stack levels used:    1
  4341 ;; Hardware stack levels required when called:    8
  4342 ;; This function calls:
  4343 ;;		___awmod
  4344 ;;		_strlen
  4345 ;; This function is called by:
  4346 ;;		_main
  4347 ;; This function uses a non-reentrant model
  4348 ;;
  4349                           
  4350                           
  4351                           ;psect for function _nrf24l01GetPipe
  4352  07A4                     _nrf24l01GetPipe:	
  4353                           
  4354                           ;incstack = 0
  4355                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4356                           ;nrf24l01GetPipe@name stored from wreg
  4357  07A4  0020               	movlb	0	; select bank0
  4358  07A5  00AC               	movwf	nrf24l01GetPipe@name
  4359                           
  4360                           ;main.c: 158: unsigned char pipe = 0;
  4361  07A6  01AB               	clrf	nrf24l01GetPipe@pipe
  4362                           
  4363                           ;main.c: 159: unsigned char i = 0;
  4364  07A7  01AD               	clrf	nrf24l01GetPipe@i
  4365                           
  4366                           ;main.c: 162: for (i = 0; i < strlen(name); i++){
  4367  07A8  01AD               	clrf	nrf24l01GetPipe@i
  4368  07A9                     l2909:	
  4369  07A9  082C               	movf	nrf24l01GetPipe@name,w
  4370  07AA  318E  26FD  3187   	fcall	_strlen
  4371  07AD  0020               	movlb	0	; select bank0
  4372  07AE  082D               	movf	nrf24l01GetPipe@i,w
  4373  07AF  00A9               	movwf	??_nrf24l01GetPipe
  4374  07B0  01AA               	clrf	??_nrf24l01GetPipe+1
  4375  07B1  0822               	movf	?_strlen+1,w
  4376  07B2  022A               	subwf	??_nrf24l01GetPipe+1,w
  4377  07B3  1D03               	skipz
  4378  07B4  2FB7               	goto	u1775
  4379  07B5  0821               	movf	?_strlen,w
  4380  07B6  0229               	subwf	??_nrf24l01GetPipe,w
  4381  07B7                     u1775:	
  4382  07B7  1803               	btfsc	3,0
  4383  07B8  2FC8               	goto	l2911
  4384                           
  4385                           ;main.c: 163: pipe+= name[i];
  4386  07B9  082D               	movf	nrf24l01GetPipe@i,w
  4387  07BA  072C               	addwf	nrf24l01GetPipe@name,w
  4388  07BB  00A9               	movwf	??_nrf24l01GetPipe
  4389  07BC  0829               	movf	??_nrf24l01GetPipe,w
  4390  07BD  0086               	movwf	6
  4391  07BE  0187               	clrf	7
  4392  07BF  0801               	movf	1,w
  4393  07C0  00AA               	movwf	??_nrf24l01GetPipe+1
  4394  07C1  082A               	movf	??_nrf24l01GetPipe+1,w
  4395  07C2  07AB               	addwf	nrf24l01GetPipe@pipe,f
  4396  07C3  3001               	movlw	1
  4397  07C4  00A9               	movwf	??_nrf24l01GetPipe
  4398  07C5  0829               	movf	??_nrf24l01GetPipe,w
  4399  07C6  07AD               	addwf	nrf24l01GetPipe@i,f
  4400  07C7  2FA9               	goto	l2909
  4401  07C8                     l2911:	
  4402                           
  4403                           ;main.c: 164: };main.c: 166: return pipe % 6;
  4404  07C8  3006               	movlw	6
  4405  07C9  00A1               	movwf	___awmod@divisor
  4406  07CA  3000               	movlw	0
  4407  07CB  00A2               	movwf	___awmod@divisor+1
  4408  07CC  082B               	movf	nrf24l01GetPipe@pipe,w
  4409  07CD  00A9               	movwf	??_nrf24l01GetPipe
  4410  07CE  01AA               	clrf	??_nrf24l01GetPipe+1
  4411  07CF  0829               	movf	??_nrf24l01GetPipe,w
  4412  07D0  00A3               	movwf	___awmod@dividend
  4413  07D1  082A               	movf	??_nrf24l01GetPipe+1,w
  4414  07D2  00A4               	movwf	___awmod@dividend+1
  4415  07D3  3185  25EA         	fcall	___awmod
  4416  07D5  0020               	movlb	0	; select bank0
  4417  07D6  0821               	movf	?___awmod,w
  4418  07D7  0008               	return
  4419  07D8                     __end_of_nrf24l01GetPipe:	
  4420                           
  4421                           	psect	text9
  4422  05EA                     __ptext9:	
  4423 ;; *************** function ___awmod *****************
  4424 ;; Defined at:
  4425 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awmod.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;  divisor         2    1[BANK0 ] int 
  4428 ;;  dividend        2    3[BANK0 ] int 
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;  sign            1    7[BANK0 ] unsigned char 
  4431 ;;  counter         1    6[BANK0 ] unsigned char 
  4432 ;; Return value:  Size  Location     Type
  4433 ;;                  2    1[BANK0 ] int 
  4434 ;; Registers used:
  4435 ;;		wreg, status,2, status,0
  4436 ;; Tracked objects:
  4437 ;;		On entry : 0/0
  4438 ;;		On exit  : 0/0
  4439 ;;		Unchanged: 0/0
  4440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4441 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4442 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4443 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4444 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4445 ;;Total ram usage:        7 bytes
  4446 ;; Hardware stack levels used:    1
  4447 ;; Hardware stack levels required when called:    7
  4448 ;; This function calls:
  4449 ;;		Nothing
  4450 ;; This function is called by:
  4451 ;;		_nrf24l01GetPipe
  4452 ;; This function uses a non-reentrant model
  4453 ;;
  4454                           
  4455                           
  4456                           ;psect for function ___awmod
  4457  05EA                     ___awmod:	
  4458                           
  4459                           ;incstack = 0
  4460                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4461  05EA  0020               	movlb	0	; select bank0
  4462  05EB  01A7               	clrf	___awmod@sign
  4463  05EC  1FA4               	btfss	___awmod@dividend+1,7
  4464  05ED  2DF5               	goto	l2745
  4465  05EE  09A3               	comf	___awmod@dividend,f
  4466  05EF  09A4               	comf	___awmod@dividend+1,f
  4467  05F0  0AA3               	incf	___awmod@dividend,f
  4468  05F1  1903               	skipnz
  4469  05F2  0AA4               	incf	___awmod@dividend+1,f
  4470  05F3  01A7               	clrf	___awmod@sign
  4471  05F4  0AA7               	incf	___awmod@sign,f
  4472  05F5                     l2745:	
  4473  05F5  1FA2               	btfss	___awmod@divisor+1,7
  4474  05F6  2DFC               	goto	l2749
  4475  05F7  09A1               	comf	___awmod@divisor,f
  4476  05F8  09A2               	comf	___awmod@divisor+1,f
  4477  05F9  0AA1               	incf	___awmod@divisor,f
  4478  05FA  1903               	skipnz
  4479  05FB  0AA2               	incf	___awmod@divisor+1,f
  4480  05FC                     l2749:	
  4481  05FC  0821               	movf	___awmod@divisor,w
  4482  05FD  0422               	iorwf	___awmod@divisor+1,w
  4483  05FE  1903               	btfsc	3,2
  4484  05FF  2E23               	goto	l2767
  4485  0600  01A6               	clrf	___awmod@counter
  4486  0601  0AA6               	incf	___awmod@counter,f
  4487  0602                     l2757:	
  4488  0602  1BA2               	btfsc	___awmod@divisor+1,7
  4489  0603  2E0E               	goto	l2759
  4490  0604  3001               	movlw	1
  4491  0605                     u1615:	
  4492  0605  35A1               	lslf	___awmod@divisor,f
  4493  0606  0DA2               	rlf	___awmod@divisor+1,f
  4494  0607  0B89               	decfsz	9,f
  4495  0608  2E05               	goto	u1615
  4496  0609  3001               	movlw	1
  4497  060A  00A5               	movwf	??___awmod
  4498  060B  0825               	movf	??___awmod,w
  4499  060C  07A6               	addwf	___awmod@counter,f
  4500  060D  2E02               	goto	l2757
  4501  060E                     l2759:	
  4502  060E  0822               	movf	___awmod@divisor+1,w
  4503  060F  0224               	subwf	___awmod@dividend+1,w
  4504  0610  1D03               	skipz
  4505  0611  2E14               	goto	u1635
  4506  0612  0821               	movf	___awmod@divisor,w
  4507  0613  0223               	subwf	___awmod@dividend,w
  4508  0614                     u1635:	
  4509  0614  1C03               	skipc
  4510  0615  2E1A               	goto	l2763
  4511  0616  0821               	movf	___awmod@divisor,w
  4512  0617  02A3               	subwf	___awmod@dividend,f
  4513  0618  0822               	movf	___awmod@divisor+1,w
  4514  0619  3BA4               	subwfb	___awmod@dividend+1,f
  4515  061A                     l2763:	
  4516  061A  3001               	movlw	1
  4517  061B                     u1645:	
  4518  061B  36A2               	lsrf	___awmod@divisor+1,f
  4519  061C  0CA1               	rrf	___awmod@divisor,f
  4520  061D  0B89               	decfsz	9,f
  4521  061E  2E1B               	goto	u1645
  4522  061F  3001               	movlw	1
  4523  0620  02A6               	subwf	___awmod@counter,f
  4524  0621  1D03               	btfss	3,2
  4525  0622  2E0E               	goto	l2759
  4526  0623                     l2767:	
  4527  0623  0827               	movf	___awmod@sign,w
  4528  0624  1903               	btfsc	3,2
  4529  0625  2E2B               	goto	l2771
  4530  0626  09A3               	comf	___awmod@dividend,f
  4531  0627  09A4               	comf	___awmod@dividend+1,f
  4532  0628  0AA3               	incf	___awmod@dividend,f
  4533  0629  1903               	skipnz
  4534  062A  0AA4               	incf	___awmod@dividend+1,f
  4535  062B                     l2771:	
  4536  062B  0824               	movf	___awmod@dividend+1,w
  4537  062C  00A2               	movwf	?___awmod+1
  4538  062D  0823               	movf	___awmod@dividend,w
  4539  062E  00A1               	movwf	?___awmod
  4540  062F  0008               	return
  4541  0630                     __end_of___awmod:	
  4542                           
  4543                           	psect	text10
  4544  0029                     __ptext10:	
  4545 ;; *************** function _loop *****************
  4546 ;; Defined at:
  4547 ;;		line 100 in file "main.c"
  4548 ;; Parameters:    Size  Location     Type
  4549 ;;		None
  4550 ;; Auto vars:     Size  Location     Type
  4551 ;;  packet         33    1[BANK1 ] struct .
  4552 ;;  rfSetup         1    0[BANK1 ] struct .
  4553 ;; Return value:  Size  Location     Type
  4554 ;;                  1    wreg      void 
  4555 ;; Registers used:
  4556 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4557 ;; Tracked objects:
  4558 ;;		On entry : 0/0
  4559 ;;		On exit  : 0/0
  4560 ;;		Unchanged: 0/0
  4561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4563 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  4564 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4565 ;;      Totals:         0       4      34       0       0       0       0       0       0       0       0       0       
      +0       0
  4566 ;;Total ram usage:       38 bytes
  4567 ;; Hardware stack levels used:    1
  4568 ;; Hardware stack levels required when called:   12
  4569 ;; This function calls:
  4570 ;;		_checkTXPower
  4571 ;;		_getADCValue
  4572 ;;		_nrf24l01Send
  4573 ;;		_nrf24l01SendPacket
  4574 ;;		_setMessage
  4575 ;;		_sleep
  4576 ;; This function is called by:
  4577 ;;		_main
  4578 ;; This function uses a non-reentrant model
  4579 ;;
  4580                           
  4581                           
  4582                           ;psect for function _loop
  4583  0029                     _loop:	
  4584                           
  4585                           ;incstack = 0
  4586                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4587  0029  0064               	clrwdt	;# 
  4588                           
  4589                           ;main.c: 105: nrf24l01Packet_t packet;;main.c: 107: setMessage(&packet, "DBG", counter);
  4590  002A  303A               	movlw	low (STR_3| (0+32768))
  4591  002B  0020               	movlb	0	; select bank0
  4592  002C  00BD               	movwf	setMessage@topic
  4593  002D  3090               	movlw	high (STR_3| (0+32768))
  4594  002E  00BE               	movwf	setMessage@topic+1
  4595  002F  0021               	movlb	1	; select bank1
  4596  0030  0867               	movf	(_counter+3)^(0+128),w
  4597  0031  0020               	movlb	0	; select bank0
  4598  0032  00C2               	movwf	setMessage@value+3
  4599  0033  0021               	movlb	1	; select bank1
  4600  0034  0866               	movf	(_counter+2)^(0+128),w
  4601  0035  0020               	movlb	0	; select bank0
  4602  0036  00C1               	movwf	setMessage@value+2
  4603  0037  0021               	movlb	1	; select bank1
  4604  0038  0865               	movf	(_counter+1)^(0+128),w
  4605  0039  0020               	movlb	0	; select bank0
  4606  003A  00C0               	movwf	setMessage@value+1
  4607  003B  0021               	movlb	1	; select bank1
  4608  003C  0864               	movf	_counter^(0+128),w
  4609  003D  0020               	movlb	0	; select bank0
  4610  003E  00BF               	movwf	setMessage@value
  4611  003F  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4612  0040  3184  24A9  3180   	fcall	_setMessage
  4613                           
  4614                           ;main.c: 108: packet.packetData.byte = 0;
  4615  0043  0021               	movlb	1	; select bank1
  4616  0044  01A1               	clrf	loop@packet^(0+128)
  4617                           
  4618                           ;main.c: 109: packet.packetData.ACKRequest = 0;
  4619  0045  1121               	bcf	loop@packet^(0+128),2
  4620                           
  4621                           ;main.c: 110: nrf24l01SendPacket(&packet);
  4622  0046  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4623  0047  3182  2243  3180   	fcall	_nrf24l01SendPacket
  4624                           
  4625                           ;main.c: 111: checkTXPower();
  4626  004A  318D  256E  3180   	fcall	_checkTXPower
  4627                           
  4628                           ;main.c: 112: sleep();
  4629  004D  318D  254A  3180   	fcall	_sleep
  4630                           
  4631                           ;main.c: 114: setMessage(&packet, "VBAT", getADCValue(0b000100, 2526));
  4632  0050  3028               	movlw	low (STR_4| (0+32768))
  4633  0051  0020               	movlb	0	; select bank0
  4634  0052  00BD               	movwf	setMessage@topic
  4635  0053  3090               	movlw	high (STR_4| (0+32768))
  4636  0054  00BE               	movwf	setMessage@topic+1
  4637  0055  3000               	movlw	0
  4638  0056  00B2               	movwf	getADCValue@divider+3
  4639  0057  3000               	movlw	0
  4640  0058  00B1               	movwf	getADCValue@divider+2
  4641  0059  3009               	movlw	9
  4642  005A  00B0               	movwf	getADCValue@divider+1
  4643  005B  30DE               	movlw	222
  4644  005C  00AF               	movwf	getADCValue@divider
  4645  005D  3004               	movlw	4
  4646  005E  3184  2421  3180   	fcall	_getADCValue
  4647  0061  0020               	movlb	0	; select bank0
  4648  0062  0832               	movf	?_getADCValue+3,w
  4649  0063  00C2               	movwf	setMessage@value+3
  4650  0064  0831               	movf	?_getADCValue+2,w
  4651  0065  00C1               	movwf	setMessage@value+2
  4652  0066  0830               	movf	?_getADCValue+1,w
  4653  0067  00C0               	movwf	setMessage@value+1
  4654  0068  082F               	movf	?_getADCValue,w
  4655  0069  00BF               	movwf	setMessage@value
  4656  006A  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4657  006B  3184  24A9  3180   	fcall	_setMessage
  4658                           
  4659                           ;main.c: 115: packet.packetData.byte = 0;
  4660  006E  0021               	movlb	1	; select bank1
  4661  006F  01A1               	clrf	loop@packet^(0+128)
  4662                           
  4663                           ;main.c: 116: packet.packetData.ACKRequest = 1;
  4664  0070  1521               	bsf	loop@packet^(0+128),2
  4665                           
  4666                           ;main.c: 117: nrf24l01SendPacket(&packet);
  4667  0071  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4668  0072  3182  2243  3180   	fcall	_nrf24l01SendPacket
  4669                           
  4670                           ;main.c: 118: checkTXPower();
  4671  0075  318D  256E  3180   	fcall	_checkTXPower
  4672                           
  4673                           ;main.c: 119: sleep();
  4674  0078  318D  254A  3180   	fcall	_sleep
  4675                           
  4676                           ;main.c: 122: setMessage(&packet, "ANC3", getADCValue(0b010011, 2500));
  4677  007B  301E               	movlw	low (STR_5| (0+32768))
  4678  007C  0020               	movlb	0	; select bank0
  4679  007D  00BD               	movwf	setMessage@topic
  4680  007E  3090               	movlw	high (STR_5| (0+32768))
  4681  007F  00BE               	movwf	setMessage@topic+1
  4682  0080  3000               	movlw	0
  4683  0081  00B2               	movwf	getADCValue@divider+3
  4684  0082  3000               	movlw	0
  4685  0083  00B1               	movwf	getADCValue@divider+2
  4686  0084  3009               	movlw	9
  4687  0085  00B0               	movwf	getADCValue@divider+1
  4688  0086  30C4               	movlw	196
  4689  0087  00AF               	movwf	getADCValue@divider
  4690  0088  3013               	movlw	19
  4691  0089  3184  2421  3180   	fcall	_getADCValue
  4692  008C  0020               	movlb	0	; select bank0
  4693  008D  0832               	movf	?_getADCValue+3,w
  4694  008E  00C2               	movwf	setMessage@value+3
  4695  008F  0831               	movf	?_getADCValue+2,w
  4696  0090  00C1               	movwf	setMessage@value+2
  4697  0091  0830               	movf	?_getADCValue+1,w
  4698  0092  00C0               	movwf	setMessage@value+1
  4699  0093  082F               	movf	?_getADCValue,w
  4700  0094  00BF               	movwf	setMessage@value
  4701  0095  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4702  0096  3184  24A9  3180   	fcall	_setMessage
  4703                           
  4704                           ;main.c: 123: packet.packetData.byte = 0;
  4705  0099  0021               	movlb	1	; select bank1
  4706  009A  01A1               	clrf	loop@packet^(0+128)
  4707                           
  4708                           ;main.c: 124: packet.packetData.ACKRequest = 1;
  4709  009B  1521               	bsf	loop@packet^(0+128),2
  4710                           
  4711                           ;main.c: 125: nrf24l01SendPacket(&packet);
  4712  009C  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4713  009D  3182  2243  3180   	fcall	_nrf24l01SendPacket
  4714                           
  4715                           ;main.c: 126: checkTXPower();
  4716  00A0  318D  256E  3180   	fcall	_checkTXPower
  4717                           
  4718                           ;main.c: 127: sleep();
  4719  00A3  318D  254A  3180   	fcall	_sleep
  4720                           
  4721                           ;main.c: 129: setMessage(&packet, "FVR", getADCValue(0b111111, 2500));
  4722  00A6  303E               	movlw	low (STR_6| (0+32768))
  4723  00A7  0020               	movlb	0	; select bank0
  4724  00A8  00BD               	movwf	setMessage@topic
  4725  00A9  3090               	movlw	high (STR_6| (0+32768))
  4726  00AA  00BE               	movwf	setMessage@topic+1
  4727  00AB  3000               	movlw	0
  4728  00AC  00B2               	movwf	getADCValue@divider+3
  4729  00AD  3000               	movlw	0
  4730  00AE  00B1               	movwf	getADCValue@divider+2
  4731  00AF  3009               	movlw	9
  4732  00B0  00B0               	movwf	getADCValue@divider+1
  4733  00B1  30C4               	movlw	196
  4734  00B2  00AF               	movwf	getADCValue@divider
  4735  00B3  303F               	movlw	63
  4736  00B4  3184  2421  3180   	fcall	_getADCValue
  4737  00B7  0020               	movlb	0	; select bank0
  4738  00B8  0832               	movf	?_getADCValue+3,w
  4739  00B9  00C2               	movwf	setMessage@value+3
  4740  00BA  0831               	movf	?_getADCValue+2,w
  4741  00BB  00C1               	movwf	setMessage@value+2
  4742  00BC  0830               	movf	?_getADCValue+1,w
  4743  00BD  00C0               	movwf	setMessage@value+1
  4744  00BE  082F               	movf	?_getADCValue,w
  4745  00BF  00BF               	movwf	setMessage@value
  4746  00C0  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4747  00C1  3184  24A9  3180   	fcall	_setMessage
  4748                           
  4749                           ;main.c: 130: packet.packetData.byte = 0;
  4750  00C4  0021               	movlb	1	; select bank1
  4751  00C5  01A1               	clrf	loop@packet^(0+128)
  4752                           
  4753                           ;main.c: 131: packet.packetData.ACKRequest = 1;
  4754  00C6  1521               	bsf	loop@packet^(0+128),2
  4755                           
  4756                           ;main.c: 132: nrf24l01SendPacket(&packet);
  4757  00C7  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4758  00C8  3182  2243  3180   	fcall	_nrf24l01SendPacket
  4759                           
  4760                           ;main.c: 133: checkTXPower();
  4761  00CB  318D  256E  3180   	fcall	_checkTXPower
  4762                           
  4763                           ;main.c: 134: sleep();
  4764  00CE  318D  254A  3180   	fcall	_sleep
  4765                           
  4766                           ;main.c: 136: setMessage(&packet, "TEMP", getADCValue(0b111101, 162) - 40000);
  4767  00D1  3023               	movlw	low (STR_7| (0+32768))
  4768  00D2  0020               	movlb	0	; select bank0
  4769  00D3  00BD               	movwf	setMessage@topic
  4770  00D4  3090               	movlw	high (STR_7| (0+32768))
  4771  00D5  00BE               	movwf	setMessage@topic+1
  4772  00D6  30C0               	movlw	192
  4773  00D7  00D4               	movwf	??_loop
  4774  00D8  3063               	movlw	99
  4775  00D9  00D5               	movwf	??_loop+1
  4776  00DA  30FF               	movlw	255
  4777  00DB  00D6               	movwf	??_loop+2
  4778  00DC  30FF               	movlw	255
  4779  00DD  00D7               	movwf	??_loop+3
  4780  00DE  3000               	movlw	0
  4781  00DF  00B2               	movwf	getADCValue@divider+3
  4782  00E0  3000               	movlw	0
  4783  00E1  00B1               	movwf	getADCValue@divider+2
  4784  00E2  3000               	movlw	0
  4785  00E3  00B0               	movwf	getADCValue@divider+1
  4786  00E4  30A2               	movlw	162
  4787  00E5  00AF               	movwf	getADCValue@divider
  4788  00E6  303D               	movlw	61
  4789  00E7  3184  2421  3180   	fcall	_getADCValue
  4790  00EA  0020               	movlb	0	; select bank0
  4791  00EB  082F               	movf	?_getADCValue,w
  4792  00EC  07D4               	addwf	??_loop,f
  4793  00ED  0830               	movf	?_getADCValue+1,w
  4794  00EE  3DD5               	addwfc	??_loop+1,f
  4795  00EF  0831               	movf	?_getADCValue+2,w
  4796  00F0  3DD6               	addwfc	??_loop+2,f
  4797  00F1  0832               	movf	?_getADCValue+3,w
  4798  00F2  3DD7               	addwfc	??_loop+3,f
  4799  00F3  0857               	movf	??_loop+3,w
  4800  00F4  00C2               	movwf	setMessage@value+3
  4801  00F5  0856               	movf	??_loop+2,w
  4802  00F6  00C1               	movwf	setMessage@value+2
  4803  00F7  0855               	movf	??_loop+1,w
  4804  00F8  00C0               	movwf	setMessage@value+1
  4805  00F9  0854               	movf	??_loop,w
  4806  00FA  00BF               	movwf	setMessage@value
  4807  00FB  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4808  00FC  3184  24A9  3180   	fcall	_setMessage
  4809                           
  4810                           ;main.c: 137: packet.packetData.byte = 0;
  4811  00FF  0021               	movlb	1	; select bank1
  4812  0100  01A1               	clrf	loop@packet^(0+128)
  4813                           
  4814                           ;main.c: 138: packet.packetData.ACKRequest = 1;
  4815  0101  1521               	bsf	loop@packet^(0+128),2
  4816                           
  4817                           ;main.c: 139: nrf24l01SendPacket(&packet);
  4818  0102  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4819  0103  3182  2243  3180   	fcall	_nrf24l01SendPacket
  4820                           
  4821                           ;main.c: 140: checkTXPower();
  4822  0106  318D  256E  3180   	fcall	_checkTXPower
  4823                           
  4824                           ;main.c: 141: sleep();
  4825  0109  318D  254A  3180   	fcall	_sleep
  4826                           
  4827                           ;main.c: 143: n_RF_SETUP_t rfSetup;;main.c: 144: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4828  010C  0020               	movlb	0	; select bank0
  4829  010D  01A1               	clrf	nrf24l01Send@data
  4830  010E  3006               	movlw	6
  4831  010F  318E  2678  3180   	fcall	_nrf24l01Send
  4832  0112  0020               	movlb	0	; select bank0
  4833  0113  00D4               	movwf	??_loop
  4834  0114  0854               	movf	??_loop,w
  4835  0115  0021               	movlb	1	; select bank1
  4836  0116  00A0               	movwf	loop@rfSetup^(0+128)
  4837                           
  4838                           ;main.c: 146: setMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4839  0117  3013               	movlw	low (STR_8| (0+32768))
  4840  0118  0020               	movlb	0	; select bank0
  4841  0119  00BD               	movwf	setMessage@topic
  4842  011A  3090               	movlw	high (STR_8| (0+32768))
  4843  011B  00BE               	movwf	setMessage@topic+1
  4844  011C  0021               	movlb	1	; select bank1
  4845  011D  0C20               	rrf	loop@rfSetup^(0+128),w
  4846  011E  3903               	andlw	3
  4847  011F  0020               	movlb	0	; select bank0
  4848  0120  00D4               	movwf	??_loop
  4849  0121  01D5               	clrf	??_loop+1
  4850  0122  01D6               	clrf	??_loop+2
  4851  0123  01D7               	clrf	??_loop+3
  4852  0124  0857               	movf	??_loop+3,w
  4853  0125  00C2               	movwf	setMessage@value+3
  4854  0126  0856               	movf	??_loop+2,w
  4855  0127  00C1               	movwf	setMessage@value+2
  4856  0128  0855               	movf	??_loop+1,w
  4857  0129  00C0               	movwf	setMessage@value+1
  4858  012A  0854               	movf	??_loop,w
  4859  012B  00BF               	movwf	setMessage@value
  4860  012C  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4861  012D  3184  24A9  3180   	fcall	_setMessage
  4862                           
  4863                           ;main.c: 147: packet.packetData.byte = 0;
  4864  0130  0021               	movlb	1	; select bank1
  4865  0131  01A1               	clrf	loop@packet^(0+128)
  4866                           
  4867                           ;main.c: 148: packet.packetData.ACKRequest = 1;
  4868  0132  1521               	bsf	loop@packet^(0+128),2
  4869                           
  4870                           ;main.c: 149: nrf24l01SendPacket(&packet);
  4871  0133  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4872  0134  3182  2243  3180   	fcall	_nrf24l01SendPacket
  4873                           
  4874                           ;main.c: 150: checkTXPower();
  4875  0137  318D  256E  3180   	fcall	_checkTXPower
  4876                           
  4877                           ;main.c: 151: sleep();
  4878  013A  318D  254A         	fcall	_sleep
  4879  013C  0008               	return
  4880  013D                     __end_of_loop:	
  4881                           
  4882                           	psect	text11
  4883  0D4A                     __ptext11:	
  4884 ;; *************** function _sleep *****************
  4885 ;; Defined at:
  4886 ;;		line 49 in file "main.c"
  4887 ;; Parameters:    Size  Location     Type
  4888 ;;		None
  4889 ;; Auto vars:     Size  Location     Type
  4890 ;;		None
  4891 ;; Return value:  Size  Location     Type
  4892 ;;                  1    wreg      void 
  4893 ;; Registers used:
  4894 ;;		wreg
  4895 ;; Tracked objects:
  4896 ;;		On entry : 0/0
  4897 ;;		On exit  : 0/0
  4898 ;;		Unchanged: 0/0
  4899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4904 ;;Total ram usage:        0 bytes
  4905 ;; Hardware stack levels used:    1
  4906 ;; Hardware stack levels required when called:    7
  4907 ;; This function calls:
  4908 ;;		Nothing
  4909 ;; This function is called by:
  4910 ;;		_loop
  4911 ;;		_main
  4912 ;;		_checkRxData
  4913 ;; This function uses a non-reentrant model
  4914 ;;
  4915                           
  4916                           
  4917                           ;psect for function _sleep
  4918  0D4A                     _sleep:	
  4919  0D4A                     l227:	
  4920                           ;incstack = 0
  4921                           ; Regs used in _sleep: [wreg]
  4922                           ;main.c: 50: while (1){
  4923                           
  4924                           
  4925                           ;main.c: 52: counter++;
  4926  0D4A  3001               	movlw	1
  4927  0D4B  0021               	movlb	1	; select bank1
  4928  0D4C  07E4               	addwf	_counter^(0+128),f
  4929  0D4D  3000               	movlw	0
  4930  0D4E  3DE5               	addwfc	(_counter+1)^(0+128),f
  4931  0D4F  3000               	movlw	0
  4932  0D50  3DE6               	addwfc	(_counter+2)^(0+128),f
  4933  0D51  3000               	movlw	0
  4934  0D52  3DE7               	addwfc	(_counter+3)^(0+128),f
  4935  0D53  0063               	sleep	;# 
  4936                           
  4937                           ;main.c: 55: __nop();
  4938  0D54  0000               	nop
  4939                           
  4940                           ;main.c: 56: __nop();
  4941  0D55  0000               	nop
  4942                           
  4943                           ;main.c: 58: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  4944  0D56  0020               	movlb	0	; select bank0
  4945  0D57  1A03               	btfsc	3,4	;volatile
  4946  0D58  2D4A               	goto	l227
  4947  0D59  1D83               	btfss	3,3	;volatile
  4948  0D5A  0008               	return
  4949  0D5B  2D4A               	goto	l227
  4950  0D5C                     __end_of_sleep:	
  4951                           ;main.c: 59: return;
  4952                           
  4953                           
  4954                           	psect	text12
  4955  04A9                     __ptext12:	
  4956 ;; *************** function _setMessage *****************
  4957 ;; Defined at:
  4958 ;;		line 76 in file "main.c"
  4959 ;; Parameters:    Size  Location     Type
  4960 ;;  packet          1    wreg     PTR struct .
  4961 ;;		 -> main@packet(33), loop@packet(33), 
  4962 ;;  topic           2   29[BANK0 ] PTR const unsigned char 
  4963 ;;		 -> STR_11(5), STR_8(6), STR_7(5), STR_6(4), 
  4964 ;;		 -> STR_5(5), STR_4(5), STR_3(4), 
  4965 ;;  value           4   31[BANK0 ] unsigned long 
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;  packet          1   51[BANK0 ] PTR struct .
  4968 ;;		 -> main@packet(33), loop@packet(33), 
  4969 ;;  tempString     16   35[BANK0 ] unsigned char [16]
  4970 ;; Return value:  Size  Location     Type
  4971 ;;                  1    wreg      void 
  4972 ;; Registers used:
  4973 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4974 ;; Tracked objects:
  4975 ;;		On entry : 0/0
  4976 ;;		On exit  : 0/0
  4977 ;;		Unchanged: 0/0
  4978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4979 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4980 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4982 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4983 ;;Total ram usage:       23 bytes
  4984 ;; Hardware stack levels used:    1
  4985 ;; Hardware stack levels required when called:    9
  4986 ;; This function calls:
  4987 ;;		_memset
  4988 ;;		_strcat
  4989 ;;		_ultoa
  4990 ;; This function is called by:
  4991 ;;		_loop
  4992 ;;		_main
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995                           
  4996                           
  4997                           ;psect for function _setMessage
  4998  04A9                     _setMessage:	
  4999                           
  5000                           ;incstack = 0
  5001                           ; Regs used in _setMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5002                           ;setMessage@packet stored from wreg
  5003  04A9  0020               	movlb	0	; select bank0
  5004  04AA  00D3               	movwf	setMessage@packet
  5005                           
  5006                           ;main.c: 77: memset(packet->Message, 0, sizeof(packet->Message));
  5007  04AB  0853               	movf	setMessage@packet,w
  5008  04AC  3E01               	addlw	1
  5009  04AD  00A1               	movwf	memset@p1
  5010  04AE  3000               	movlw	0
  5011  04AF  00A2               	movwf	memset@p1+1
  5012  04B0  3000               	movlw	0
  5013  04B1  00A3               	movwf	memset@c
  5014  04B2  00A4               	movwf	memset@c+1
  5015  04B3  3020               	movlw	32
  5016  04B4  00A5               	movwf	memset@n
  5017  04B5  3000               	movlw	0
  5018  04B6  00A6               	movwf	memset@n+1
  5019  04B7  318D  25B2  3184   	fcall	_memset
  5020                           
  5021                           ;main.c: 79: strcat(packet->Message, romData.name);
  5022  04BA  305D               	movlw	low (_romData+1)
  5023  04BB  0020               	movlb	0	; select bank0
  5024  04BC  00A1               	movwf	strcat@from
  5025  04BD  3000               	movlw	high (_romData+1)
  5026  04BE  00A2               	movwf	strcat@from+1
  5027  04BF  0853               	movf	setMessage@packet,w
  5028  04C0  3E01               	addlw	1
  5029  04C1  318F  2748  3184   	fcall	_strcat
  5030                           
  5031                           ;main.c: 81: strcat(packet->Message, "/");
  5032  04C4  3042               	movlw	low (STR_1| (0+32768))
  5033  04C5  0020               	movlb	0	; select bank0
  5034  04C6  00A1               	movwf	strcat@from
  5035  04C7  3090               	movlw	high (STR_1| (0+32768))
  5036  04C8  00A2               	movwf	strcat@from+1
  5037  04C9  0853               	movf	setMessage@packet,w
  5038  04CA  3E01               	addlw	1
  5039  04CB  318F  2748  3184   	fcall	_strcat
  5040                           
  5041                           ;main.c: 82: strcat(packet->Message, topic);
  5042  04CE  0020               	movlb	0	; select bank0
  5043  04CF  083E               	movf	setMessage@topic+1,w
  5044  04D0  00A2               	movwf	strcat@from+1
  5045  04D1  083D               	movf	setMessage@topic,w
  5046  04D2  00A1               	movwf	strcat@from
  5047  04D3  0853               	movf	setMessage@packet,w
  5048  04D4  3E01               	addlw	1
  5049  04D5  318F  2748  3184   	fcall	_strcat
  5050                           
  5051                           ;main.c: 84: char tempString[16];;main.c: 86: ultoa(tempString, value, 10);
  5052  04D8  0020               	movlb	0	; select bank0
  5053  04D9  0842               	movf	setMessage@value+3,w
  5054  04DA  00B2               	movwf	ultoa@val+3
  5055  04DB  0841               	movf	setMessage@value+2,w
  5056  04DC  00B1               	movwf	ultoa@val+2
  5057  04DD  0840               	movf	setMessage@value+1,w
  5058  04DE  00B0               	movwf	ultoa@val+1
  5059  04DF  083F               	movf	setMessage@value,w
  5060  04E0  00AF               	movwf	ultoa@val
  5061  04E1  300A               	movlw	10
  5062  04E2  00B3               	movwf	ultoa@base
  5063  04E3  3000               	movlw	0
  5064  04E4  00B4               	movwf	ultoa@base+1
  5065  04E5  3043               	movlw	(low (setMessage@tempString| 0))& (0+255)
  5066  04E6  3183  2398  3184   	fcall	_ultoa
  5067                           
  5068                           ;main.c: 88: strcat(packet->Message, "/");
  5069  04E9  3042               	movlw	low (STR_1| (0+32768))
  5070  04EA  0020               	movlb	0	; select bank0
  5071  04EB  00A1               	movwf	strcat@from
  5072  04EC  3090               	movlw	high (STR_1| (0+32768))
  5073  04ED  00A2               	movwf	strcat@from+1
  5074  04EE  0853               	movf	setMessage@packet,w
  5075  04EF  3E01               	addlw	1
  5076  04F0  318F  2748  3184   	fcall	_strcat
  5077                           
  5078                           ;main.c: 89: strcat(packet->Message, tempString);
  5079  04F3  3043               	movlw	low setMessage@tempString
  5080  04F4  0020               	movlb	0	; select bank0
  5081  04F5  00A1               	movwf	strcat@from
  5082  04F6  3000               	movlw	high setMessage@tempString
  5083  04F7  00A2               	movwf	strcat@from+1
  5084  04F8  0853               	movf	setMessage@packet,w
  5085  04F9  3E01               	addlw	1
  5086  04FA  318F  2748         	fcall	_strcat
  5087  04FC  0008               	return
  5088  04FD                     __end_of_setMessage:	
  5089                           
  5090                           	psect	text13
  5091  0398                     __ptext13:	
  5092 ;; *************** function _ultoa *****************
  5093 ;; Defined at:
  5094 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ltoa.c"
  5095 ;; Parameters:    Size  Location     Type
  5096 ;;  buf             1    wreg     PTR unsigned char 
  5097 ;;		 -> setMessage@tempString(16), 
  5098 ;;  val             4   15[BANK0 ] unsigned long 
  5099 ;;  base            2   19[BANK0 ] int 
  5100 ;; Auto vars:     Size  Location     Type
  5101 ;;  buf             1   27[BANK0 ] PTR unsigned char 
  5102 ;;		 -> setMessage@tempString(16), 
  5103 ;;  v               4   22[BANK0 ] unsigned long 
  5104 ;;  c               1   26[BANK0 ] unsigned char 
  5105 ;; Return value:  Size  Location     Type
  5106 ;;                  1    wreg      PTR unsigned char 
  5107 ;; Registers used:
  5108 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5109 ;; Tracked objects:
  5110 ;;		On entry : 0/0
  5111 ;;		On exit  : 0/0
  5112 ;;		Unchanged: 0/0
  5113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5114 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5115 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5116 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5117 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5118 ;;Total ram usage:       13 bytes
  5119 ;; Hardware stack levels used:    1
  5120 ;; Hardware stack levels required when called:    8
  5121 ;; This function calls:
  5122 ;;		___lldiv
  5123 ;;		___llmod
  5124 ;; This function is called by:
  5125 ;;		_setMessage
  5126 ;; This function uses a non-reentrant model
  5127 ;;
  5128                           
  5129                           
  5130                           ;psect for function _ultoa
  5131  0398                     _ultoa:	
  5132                           
  5133                           ;incstack = 0
  5134                           ; Regs used in _ultoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5135                           ;ultoa@buf stored from wreg
  5136  0398  0020               	movlb	0	; select bank0
  5137  0399  00BB               	movwf	ultoa@buf
  5138  039A  0832               	movf	ultoa@val+3,w
  5139  039B  00B9               	movwf	ultoa@v+3
  5140  039C  0831               	movf	ultoa@val+2,w
  5141  039D  00B8               	movwf	ultoa@v+2
  5142  039E  0830               	movf	ultoa@val+1,w
  5143  039F  00B7               	movwf	ultoa@v+1
  5144  03A0  082F               	movf	ultoa@val,w
  5145  03A1  00B6               	movwf	ultoa@v
  5146  03A2                     l2221:	
  5147  03A2  0833               	movf	ultoa@base,w
  5148  03A3  00A1               	movwf	___lldiv@divisor
  5149  03A4  0834               	movf	ultoa@base+1,w
  5150  03A5  00A2               	movwf	___lldiv@divisor+1
  5151  03A6  0D89               	rlf	9,f
  5152  03A7  3B89               	subwfb	9,f
  5153  03A8  0989               	comf	9,f
  5154  03A9  00A3               	movwf	___lldiv@divisor+2
  5155  03AA  00A4               	movwf	___lldiv@divisor+3
  5156  03AB  0839               	movf	ultoa@v+3,w
  5157  03AC  00A8               	movwf	___lldiv@dividend+3
  5158  03AD  0838               	movf	ultoa@v+2,w
  5159  03AE  00A7               	movwf	___lldiv@dividend+2
  5160  03AF  0837               	movf	ultoa@v+1,w
  5161  03B0  00A6               	movwf	___lldiv@dividend+1
  5162  03B1  0836               	movf	ultoa@v,w
  5163  03B2  00A5               	movwf	___lldiv@dividend
  5164  03B3  3184  24FD  3183   	fcall	___lldiv
  5165  03B6  0020               	movlb	0	; select bank0
  5166  03B7  0824               	movf	?___lldiv+3,w
  5167  03B8  00B9               	movwf	ultoa@v+3
  5168  03B9  0823               	movf	?___lldiv+2,w
  5169  03BA  00B8               	movwf	ultoa@v+2
  5170  03BB  0822               	movf	?___lldiv+1,w
  5171  03BC  00B7               	movwf	ultoa@v+1
  5172  03BD  0821               	movf	?___lldiv,w
  5173  03BE  00B6               	movwf	ultoa@v
  5174  03BF  3001               	movlw	1
  5175  03C0  00B5               	movwf	??_ultoa
  5176  03C1  0835               	movf	??_ultoa,w
  5177  03C2  07BB               	addwf	ultoa@buf,f
  5178  03C3  0839               	movf	ultoa@v+3,w
  5179  03C4  0438               	iorwf	ultoa@v+2,w
  5180  03C5  0437               	iorwf	ultoa@v+1,w
  5181  03C6  0436               	iorwf	ultoa@v,w
  5182  03C7  1D03               	skipz
  5183  03C8  2BA2               	goto	l2221
  5184  03C9  083B               	movf	ultoa@buf,w
  5185  03CA  0086               	movwf	6
  5186  03CB  0187               	clrf	7
  5187  03CC  0181               	clrf	1
  5188  03CD  3001               	movlw	1
  5189  03CE  02BB               	subwf	ultoa@buf,f
  5190  03CF                     l2231:	
  5191  03CF  0833               	movf	ultoa@base,w
  5192  03D0  00A1               	movwf	___llmod@divisor
  5193  03D1  0834               	movf	ultoa@base+1,w
  5194  03D2  00A2               	movwf	___llmod@divisor+1
  5195  03D3  0D89               	rlf	9,f
  5196  03D4  3B89               	subwfb	9,f
  5197  03D5  0989               	comf	9,f
  5198  03D6  00A3               	movwf	___llmod@divisor+2
  5199  03D7  00A4               	movwf	___llmod@divisor+3
  5200  03D8  0832               	movf	ultoa@val+3,w
  5201  03D9  00A8               	movwf	___llmod@dividend+3
  5202  03DA  0831               	movf	ultoa@val+2,w
  5203  03DB  00A7               	movwf	___llmod@dividend+2
  5204  03DC  0830               	movf	ultoa@val+1,w
  5205  03DD  00A6               	movwf	___llmod@dividend+1
  5206  03DE  082F               	movf	ultoa@val,w
  5207  03DF  00A5               	movwf	___llmod@dividend
  5208  03E0  3186  2674  3183   	fcall	___llmod
  5209  03E3  0020               	movlb	0	; select bank0
  5210  03E4  0821               	movf	?___llmod,w
  5211  03E5  00B5               	movwf	??_ultoa
  5212  03E6  0835               	movf	??_ultoa,w
  5213  03E7  00BA               	movwf	ultoa@c
  5214  03E8  0833               	movf	ultoa@base,w
  5215  03E9  00A1               	movwf	___lldiv@divisor
  5216  03EA  0834               	movf	ultoa@base+1,w
  5217  03EB  00A2               	movwf	___lldiv@divisor+1
  5218  03EC  0D89               	rlf	9,f
  5219  03ED  3B89               	subwfb	9,f
  5220  03EE  0989               	comf	9,f
  5221  03EF  00A3               	movwf	___lldiv@divisor+2
  5222  03F0  00A4               	movwf	___lldiv@divisor+3
  5223  03F1  0832               	movf	ultoa@val+3,w
  5224  03F2  00A8               	movwf	___lldiv@dividend+3
  5225  03F3  0831               	movf	ultoa@val+2,w
  5226  03F4  00A7               	movwf	___lldiv@dividend+2
  5227  03F5  0830               	movf	ultoa@val+1,w
  5228  03F6  00A6               	movwf	___lldiv@dividend+1
  5229  03F7  082F               	movf	ultoa@val,w
  5230  03F8  00A5               	movwf	___lldiv@dividend
  5231  03F9  3184  24FD  3183   	fcall	___lldiv
  5232  03FC  0020               	movlb	0	; select bank0
  5233  03FD  0824               	movf	?___lldiv+3,w
  5234  03FE  00B2               	movwf	ultoa@val+3
  5235  03FF  0823               	movf	?___lldiv+2,w
  5236  0400  00B1               	movwf	ultoa@val+2
  5237  0401  0822               	movf	?___lldiv+1,w
  5238  0402  00B0               	movwf	ultoa@val+1
  5239  0403  0821               	movf	?___lldiv,w
  5240  0404  00AF               	movwf	ultoa@val
  5241  0405  300A               	movlw	10
  5242  0406  023A               	subwf	ultoa@c,w
  5243  0407  1C03               	skipc
  5244  0408  2C0D               	goto	l890
  5245  0409  3007               	movlw	7
  5246  040A  00B5               	movwf	??_ultoa
  5247  040B  0835               	movf	??_ultoa,w
  5248  040C  07BA               	addwf	ultoa@c,f
  5249  040D                     l890:	
  5250  040D  3030               	movlw	48
  5251  040E  00B5               	movwf	??_ultoa
  5252  040F  0835               	movf	??_ultoa,w
  5253  0410  07BA               	addwf	ultoa@c,f
  5254  0411  083A               	movf	ultoa@c,w
  5255  0412  00B5               	movwf	??_ultoa
  5256  0413  083B               	movf	ultoa@buf,w
  5257  0414  0086               	movwf	6
  5258  0415  0187               	clrf	7
  5259  0416  0835               	movf	??_ultoa,w
  5260  0417  0081               	movwf	1
  5261  0418  3001               	movlw	1
  5262  0419  02BB               	subwf	ultoa@buf,f
  5263  041A  0832               	movf	ultoa@val+3,w
  5264  041B  0431               	iorwf	ultoa@val+2,w
  5265  041C  0430               	iorwf	ultoa@val+1,w
  5266  041D  042F               	iorwf	ultoa@val,w
  5267  041E  1903               	btfsc	3,2
  5268  041F  0008               	return
  5269  0420  2BCF               	goto	l2231
  5270  0421                     __end_of_ultoa:	
  5271                           ;	Return value of _ultoa is never used
  5272                           
  5273                           
  5274                           	psect	text14
  5275  0674                     __ptext14:	
  5276 ;; *************** function ___llmod *****************
  5277 ;; Defined at:
  5278 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  5279 ;; Parameters:    Size  Location     Type
  5280 ;;  divisor         4    1[BANK0 ] unsigned long 
  5281 ;;  dividend        4    5[BANK0 ] unsigned long 
  5282 ;; Auto vars:     Size  Location     Type
  5283 ;;  counter         1   10[BANK0 ] unsigned char 
  5284 ;; Return value:  Size  Location     Type
  5285 ;;                  4    1[BANK0 ] unsigned long 
  5286 ;; Registers used:
  5287 ;;		wreg, status,2, status,0
  5288 ;; Tracked objects:
  5289 ;;		On entry : 0/0
  5290 ;;		On exit  : 0/0
  5291 ;;		Unchanged: 0/0
  5292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5293 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5294 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5295 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5296 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5297 ;;Total ram usage:       10 bytes
  5298 ;; Hardware stack levels used:    1
  5299 ;; Hardware stack levels required when called:    7
  5300 ;; This function calls:
  5301 ;;		Nothing
  5302 ;; This function is called by:
  5303 ;;		_ultoa
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           
  5308                           ;psect for function ___llmod
  5309  0674                     ___llmod:	
  5310                           
  5311                           ;incstack = 0
  5312                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5313  0674  0020               	movlb	0	; select bank0
  5314  0675  0824               	movf	___llmod@divisor+3,w
  5315  0676  0423               	iorwf	___llmod@divisor+2,w
  5316  0677  0422               	iorwf	___llmod@divisor+1,w
  5317  0678  0421               	iorwf	___llmod@divisor,w
  5318  0679  1903               	skipnz
  5319  067A  2EAE               	goto	l2103
  5320  067B  01AA               	clrf	___llmod@counter
  5321  067C  0AAA               	incf	___llmod@counter,f
  5322  067D                     l2093:	
  5323  067D  1BA4               	btfsc	___llmod@divisor+3,7
  5324  067E  2E8B               	goto	l2095
  5325  067F  3001               	movlw	1
  5326  0680                     u1025:	
  5327  0680  35A1               	lslf	___llmod@divisor,f
  5328  0681  0DA2               	rlf	___llmod@divisor+1,f
  5329  0682  0DA3               	rlf	___llmod@divisor+2,f
  5330  0683  0DA4               	rlf	___llmod@divisor+3,f
  5331  0684  0B89               	decfsz	9,f
  5332  0685  2E80               	goto	u1025
  5333  0686  3001               	movlw	1
  5334  0687  00A9               	movwf	??___llmod
  5335  0688  0829               	movf	??___llmod,w
  5336  0689  07AA               	addwf	___llmod@counter,f
  5337  068A  2E7D               	goto	l2093
  5338  068B                     l2095:	
  5339  068B  0824               	movf	___llmod@divisor+3,w
  5340  068C  0228               	subwf	___llmod@dividend+3,w
  5341  068D  1D03               	skipz
  5342  068E  2E99               	goto	u1045
  5343  068F  0823               	movf	___llmod@divisor+2,w
  5344  0690  0227               	subwf	___llmod@dividend+2,w
  5345  0691  1D03               	skipz
  5346  0692  2E99               	goto	u1045
  5347  0693  0822               	movf	___llmod@divisor+1,w
  5348  0694  0226               	subwf	___llmod@dividend+1,w
  5349  0695  1D03               	skipz
  5350  0696  2E99               	goto	u1045
  5351  0697  0821               	movf	___llmod@divisor,w
  5352  0698  0225               	subwf	___llmod@dividend,w
  5353  0699                     u1045:	
  5354  0699  1C03               	skipc
  5355  069A  2EA3               	goto	l2099
  5356  069B  0821               	movf	___llmod@divisor,w
  5357  069C  02A5               	subwf	___llmod@dividend,f
  5358  069D  0822               	movf	___llmod@divisor+1,w
  5359  069E  3BA6               	subwfb	___llmod@dividend+1,f
  5360  069F  0823               	movf	___llmod@divisor+2,w
  5361  06A0  3BA7               	subwfb	___llmod@dividend+2,f
  5362  06A1  0824               	movf	___llmod@divisor+3,w
  5363  06A2  3BA8               	subwfb	___llmod@dividend+3,f
  5364  06A3                     l2099:	
  5365  06A3  3001               	movlw	1
  5366  06A4                     u1055:	
  5367  06A4  36A4               	lsrf	___llmod@divisor+3,f
  5368  06A5  0CA3               	rrf	___llmod@divisor+2,f
  5369  06A6  0CA2               	rrf	___llmod@divisor+1,f
  5370  06A7  0CA1               	rrf	___llmod@divisor,f
  5371  06A8  0B89               	decfsz	9,f
  5372  06A9  2EA4               	goto	u1055
  5373  06AA  3001               	movlw	1
  5374  06AB  02AA               	subwf	___llmod@counter,f
  5375  06AC  1D03               	btfss	3,2
  5376  06AD  2E8B               	goto	l2095
  5377  06AE                     l2103:	
  5378  06AE  0828               	movf	___llmod@dividend+3,w
  5379  06AF  00A4               	movwf	?___llmod+3
  5380  06B0  0827               	movf	___llmod@dividend+2,w
  5381  06B1  00A3               	movwf	?___llmod+2
  5382  06B2  0826               	movf	___llmod@dividend+1,w
  5383  06B3  00A2               	movwf	?___llmod+1
  5384  06B4  0825               	movf	___llmod@dividend,w
  5385  06B5  00A1               	movwf	?___llmod
  5386  06B6  0008               	return
  5387  06B7                     __end_of___llmod:	
  5388                           
  5389                           	psect	text15
  5390  0F48                     __ptext15:	
  5391 ;; *************** function _strcat *****************
  5392 ;; Defined at:
  5393 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5394 ;; Parameters:    Size  Location     Type
  5395 ;;  to              1    wreg     PTR unsigned char 
  5396 ;;		 -> main@packet(33), loop@packet(33), 
  5397 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  5398 ;;		 -> STR_11(5), STR_8(6), STR_7(5), STR_6(4), 
  5399 ;;		 -> STR_5(5), STR_4(5), STR_3(4), STR_2(2), 
  5400 ;;		 -> setMessage@tempString(16), STR_1(2), romData.name(16), romData(19), 
  5401 ;; Auto vars:     Size  Location     Type
  5402 ;;  to              1    5[BANK0 ] PTR unsigned char 
  5403 ;;		 -> main@packet(33), loop@packet(33), 
  5404 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  5405 ;;		 -> main@packet(33), loop@packet(33), 
  5406 ;; Return value:  Size  Location     Type
  5407 ;;                  1    wreg      PTR unsigned char 
  5408 ;; Registers used:
  5409 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5410 ;; Tracked objects:
  5411 ;;		On entry : 0/0
  5412 ;;		On exit  : 0/0
  5413 ;;		Unchanged: 0/0
  5414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5415 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5416 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5417 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5418 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5419 ;;Total ram usage:        5 bytes
  5420 ;; Hardware stack levels used:    1
  5421 ;; Hardware stack levels required when called:    7
  5422 ;; This function calls:
  5423 ;;		Nothing
  5424 ;; This function is called by:
  5425 ;;		_setMessage
  5426 ;; This function uses a non-reentrant model
  5427 ;;
  5428                           
  5429                           
  5430                           ;psect for function _strcat
  5431  0F48                     _strcat:	
  5432                           
  5433                           ;incstack = 0
  5434                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  5435                           ;strcat@to stored from wreg
  5436  0F48  0020               	movlb	0	; select bank0
  5437  0F49  00A5               	movwf	strcat@to
  5438  0F4A  0825               	movf	strcat@to,w
  5439  0F4B  00A3               	movwf	??_strcat
  5440  0F4C  0823               	movf	??_strcat,w
  5441  0F4D  00A4               	movwf	strcat@cp
  5442  0F4E                     l2211:	
  5443  0F4E  0824               	movf	strcat@cp,w
  5444  0F4F  0086               	movwf	6
  5445  0F50  0187               	clrf	7
  5446  0F51  0801               	movf	1,w
  5447  0F52  1903               	btfsc	3,2
  5448  0F53  2F61               	goto	l2217
  5449  0F54  3001               	movlw	1
  5450  0F55  00A3               	movwf	??_strcat
  5451  0F56  0823               	movf	??_strcat,w
  5452  0F57  07A4               	addwf	strcat@cp,f
  5453  0F58  2F4E               	goto	l2211
  5454  0F59                     l2213:	
  5455  0F59  3001               	movlw	1
  5456  0F5A  00A3               	movwf	??_strcat
  5457  0F5B  0823               	movf	??_strcat,w
  5458  0F5C  07A4               	addwf	strcat@cp,f
  5459  0F5D  3001               	movlw	1
  5460  0F5E  07A1               	addwf	strcat@from,f
  5461  0F5F  3000               	movlw	0
  5462  0F60  3DA2               	addwfc	strcat@from+1,f
  5463  0F61                     l2217:	
  5464  0F61  0824               	movf	strcat@cp,w
  5465  0F62  0086               	movwf	6
  5466  0F63  0187               	clrf	7
  5467  0F64  0821               	movf	strcat@from,w
  5468  0F65  0084               	movwf	4
  5469  0F66  0822               	movf	strcat@from+1,w
  5470  0F67  0085               	movwf	5
  5471  0F68  0800               	movf	0,w	;code access
  5472  0F69  3FC0               	movwi [0]fsr1
  5473  0F6A  0889               	movf	9,f
  5474  0F6B  1903               	btfsc	3,2
  5475  0F6C  0008               	return
  5476  0F6D  2F59               	goto	l2213
  5477  0F6E                     __end_of_strcat:	
  5478                           ;	Return value of _strcat is never used
  5479                           
  5480                           
  5481                           	psect	text16
  5482  0DB2                     __ptext16:	
  5483 ;; *************** function _memset *****************
  5484 ;; Defined at:
  5485 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  5486 ;; Parameters:    Size  Location     Type
  5487 ;;  p1              2    1[BANK0 ] PTR void 
  5488 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5489 ;;  c               2    3[BANK0 ] int 
  5490 ;;  n               2    5[BANK0 ] unsigned int 
  5491 ;; Auto vars:     Size  Location     Type
  5492 ;;  p               2    7[BANK0 ] PTR unsigned char 
  5493 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5494 ;; Return value:  Size  Location     Type
  5495 ;;                  2    1[BANK0 ] PTR void 
  5496 ;; Registers used:
  5497 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5498 ;; Tracked objects:
  5499 ;;		On entry : 0/0
  5500 ;;		On exit  : 0/0
  5501 ;;		Unchanged: 0/0
  5502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5503 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5504 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5506 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5507 ;;Total ram usage:        8 bytes
  5508 ;; Hardware stack levels used:    1
  5509 ;; Hardware stack levels required when called:    7
  5510 ;; This function calls:
  5511 ;;		Nothing
  5512 ;; This function is called by:
  5513 ;;		_setMessage
  5514 ;; This function uses a non-reentrant model
  5515 ;;
  5516                           
  5517                           
  5518                           ;psect for function _memset
  5519  0DB2                     _memset:	
  5520                           
  5521                           ;incstack = 0
  5522                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  5523  0DB2  0020               	movlb	0	; select bank0
  5524  0DB3  0822               	movf	memset@p1+1,w
  5525  0DB4  00A8               	movwf	memset@p+1
  5526  0DB5  0821               	movf	memset@p1,w
  5527  0DB6  00A7               	movwf	memset@p
  5528  0DB7                     l3067:	
  5529  0DB7  3001               	movlw	1
  5530  0DB8  02A5               	subwf	memset@n,f
  5531  0DB9  3000               	movlw	0
  5532  0DBA  3BA6               	subwfb	memset@n+1,f
  5533  0DBB  0A25               	incf	memset@n,w
  5534  0DBC  1903               	btfsc	3,2
  5535  0DBD  0A26               	incf	memset@n+1,w
  5536  0DBE  1903               	btfsc	3,2
  5537  0DBF  0008               	return
  5538  0DC0  0827               	movf	memset@p,w
  5539  0DC1  0086               	movwf	6
  5540  0DC2  0828               	movf	memset@p+1,w
  5541  0DC3  0087               	movwf	7
  5542  0DC4  0823               	movf	memset@c,w
  5543  0DC5  0081               	movwf	1
  5544  0DC6  3001               	movlw	1
  5545  0DC7  07A7               	addwf	memset@p,f
  5546  0DC8  3000               	movlw	0
  5547  0DC9  3DA8               	addwfc	memset@p+1,f
  5548  0DCA  2DB7               	goto	l3067
  5549  0DCB                     __end_of_memset:	
  5550                           ;	Return value of _memset is never used
  5551                           
  5552                           
  5553                           	psect	text17
  5554  0243                     __ptext17:	
  5555 ;; *************** function _nrf24l01SendPacket *****************
  5556 ;; Defined at:
  5557 ;;		line 170 in file "nrf24l01.c"
  5558 ;; Parameters:    Size  Location     Type
  5559 ;;  Packet          1    wreg     PTR struct .
  5560 ;;		 -> main@packet(33), loop@packet(33), 
  5561 ;; Auto vars:     Size  Location     Type
  5562 ;;  Packet          1   11[BANK0 ] PTR struct .
  5563 ;;		 -> main@packet(33), loop@packet(33), 
  5564 ;;  i               1   12[BANK0 ] unsigned char 
  5565 ;; Return value:  Size  Location     Type
  5566 ;;                  1    wreg      void 
  5567 ;; Registers used:
  5568 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5575 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5576 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5577 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5578 ;;Total ram usage:        4 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; Hardware stack levels required when called:   11
  5581 ;; This function calls:
  5582 ;;		_enableInterrupts
  5583 ;;		_nrf24l01CEHigh
  5584 ;;		_nrf24l01CELow
  5585 ;;		_nrf24l01ChangeTXPower
  5586 ;;		_nrf24l01SPIEnd
  5587 ;;		_nrf24l01SPISend
  5588 ;;		_nrf24l01SPIStart
  5589 ;;		_nrf24l01SetRXMode
  5590 ;;		_strlen
  5591 ;; This function is called by:
  5592 ;;		_loop
  5593 ;;		_main
  5594 ;;		_nrf24l01SendACK
  5595 ;; This function uses a non-reentrant model
  5596 ;;
  5597                           
  5598                           
  5599                           ;psect for function _nrf24l01SendPacket
  5600  0243                     _nrf24l01SendPacket:	
  5601                           
  5602                           ;incstack = 0
  5603                           ; Regs used in _nrf24l01SendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5604                           ;nrf24l01SendPacket@Packet stored from wreg
  5605  0243  0020               	movlb	0	; select bank0
  5606  0244  00AB               	movwf	nrf24l01SendPacket@Packet
  5607                           
  5608                           ;nrf24l01.c: 172: TXPacket = Packet;
  5609  0245  082B               	movf	nrf24l01SendPacket@Packet,w
  5610  0246  00A9               	movwf	??_nrf24l01SendPacket
  5611  0247  0829               	movf	??_nrf24l01SendPacket,w
  5612  0248  00D9               	movwf	_TXPacket
  5613  0249                     l338:	
  5614                           ;nrf24l01.c: 175: unsigned char i;;nrf24l01.c: 179: RESEND:
  5615                           
  5616                           
  5617                           ;nrf24l01.c: 182: i = 0xFF;
  5618  0249  30FF               	movlw	255
  5619  024A  0020               	movlb	0	; select bank0
  5620  024B  00A9               	movwf	??_nrf24l01SendPacket
  5621  024C  0829               	movf	??_nrf24l01SendPacket,w
  5622  024D  00AC               	movwf	nrf24l01SendPacket@i
  5623  024E                     l2533:	
  5624                           ;nrf24l01.c: 183: while (nrf24l01.TXBusy){
  5625                           
  5626  024E  0020               	movlb	0	; select bank0
  5627  024F  1C5B               	btfss	_nrf24l01,0	;volatile
  5628  0250  2A5A               	goto	l342
  5629                           
  5630                           ;nrf24l01.c: 184: if (!--i) {
  5631  0251  3001               	movlw	1
  5632  0252  02AC               	subwf	nrf24l01SendPacket@i,f
  5633  0253  1903               	btfsc	3,2
  5634  0254  2A49               	goto	l338
  5635                           
  5636                           ;nrf24l01.c: 186: };nrf24l01.c: 187: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  5637                           
  5638                           ;nrf24l01.c: 185: goto RESEND;
  5639  0255  3085               	movlw	133
  5640  0256                     u1967:	
  5641  0256  0B89               	decfsz	9,f
  5642  0257  2A56               	goto	u1967
  5643  0258  0000               	nop
  5644  0259  2A4E               	goto	l2533
  5645  025A                     l342:	
  5646                           
  5647                           ;nrf24l01.c: 188: };nrf24l01.c: 191: nrf24l01.TXBusy = 1;
  5648  025A  145B               	bsf	_nrf24l01,0	;volatile
  5649                           
  5650                           ;nrf24l01.c: 194: enableInterrupts(0);
  5651  025B  3000               	movlw	0
  5652  025C  318D  252D  3182   	fcall	_enableInterrupts
  5653                           
  5654                           ;nrf24l01.c: 197: nrf24l01SetRXMode(0);
  5655  025F  3000               	movlw	0
  5656  0260  3187  2732  3182   	fcall	_nrf24l01SetRXMode
  5657                           
  5658                           ;nrf24l01.c: 200: nrf24l01SPIStart();
  5659  0263  318D  2535  3182   	fcall	_nrf24l01SPIStart
  5660                           
  5661                           ;nrf24l01.c: 203: nrf24l01SPISend((unsigned) 0b10110000);
  5662  0266  30B0               	movlw	176
  5663  0267  318D  253D  3182   	fcall	_nrf24l01SPISend
  5664                           
  5665                           ;nrf24l01.c: 205: nrf24l01SPISend(TXPacket->packetData.byte);
  5666  026A  0020               	movlb	0	; select bank0
  5667  026B  0859               	movf	_TXPacket,w
  5668  026C  0086               	movwf	6
  5669  026D  0187               	clrf	7
  5670  026E  0801               	movf	1,w
  5671  026F  318D  253D  3182   	fcall	_nrf24l01SPISend
  5672                           
  5673                           ;nrf24l01.c: 208: for (i = 0; (i < strlen(TXPacket->Message)) && (i < sizeof(TXPacket->M
      +                          essage)); i++){
  5674  0272  0020               	movlb	0	; select bank0
  5675  0273  01AC               	clrf	nrf24l01SendPacket@i
  5676  0274  2A85               	goto	l2545
  5677  0275                     l2541:	
  5678                           
  5679                           ;nrf24l01.c: 209: nrf24l01SPISend(TXPacket->Message[i]);
  5680  0275  082C               	movf	nrf24l01SendPacket@i,w
  5681  0276  3E01               	addlw	1
  5682  0277  0759               	addwf	_TXPacket,w
  5683  0278  00A9               	movwf	??_nrf24l01SendPacket
  5684  0279  0829               	movf	??_nrf24l01SendPacket,w
  5685  027A  0086               	movwf	6
  5686  027B  0187               	clrf	7
  5687  027C  0801               	movf	1,w
  5688  027D  318D  253D  3182   	fcall	_nrf24l01SPISend
  5689  0280  3001               	movlw	1
  5690  0281  0020               	movlb	0	; select bank0
  5691  0282  00A9               	movwf	??_nrf24l01SendPacket
  5692  0283  0829               	movf	??_nrf24l01SendPacket,w
  5693  0284  07AC               	addwf	nrf24l01SendPacket@i,f
  5694  0285                     l2545:	
  5695  0285  0859               	movf	_TXPacket,w
  5696  0286  3E01               	addlw	1
  5697  0287  318E  26FD  3182   	fcall	_strlen
  5698  028A  0020               	movlb	0	; select bank0
  5699  028B  082C               	movf	nrf24l01SendPacket@i,w
  5700  028C  00A9               	movwf	??_nrf24l01SendPacket
  5701  028D  01AA               	clrf	??_nrf24l01SendPacket+1
  5702  028E  0822               	movf	?_strlen+1,w
  5703  028F  022A               	subwf	??_nrf24l01SendPacket+1,w
  5704  0290  1D03               	skipz
  5705  0291  2A94               	goto	u1445
  5706  0292  0821               	movf	?_strlen,w
  5707  0293  0229               	subwf	??_nrf24l01SendPacket,w
  5708  0294                     u1445:	
  5709  0294  1803               	skipnc
  5710  0295  2A9A               	goto	l2549
  5711  0296  3020               	movlw	32
  5712  0297  022C               	subwf	nrf24l01SendPacket@i,w
  5713  0298  1C03               	skipc
  5714  0299  2A75               	goto	l2541
  5715  029A                     l2549:	
  5716                           
  5717                           ;nrf24l01.c: 210: };nrf24l01.c: 213: nrf24l01SPIEnd();
  5718  029A  318D  2526  3182   	fcall	_nrf24l01SPIEnd
  5719                           
  5720                           ;nrf24l01.c: 216: nrf24l01CEHigh();
  5721  029D  318D  2514  3182   	fcall	_nrf24l01CEHigh
  5722                           
  5723                           ;nrf24l01.c: 217: _delay((unsigned long)((20)*(16000000/4000000.0)));
  5724  02A0  301A               	movlw	26
  5725  02A1                     u1977:	
  5726  02A1  0B89               	decfsz	9,f
  5727  02A2  2AA1               	goto	u1977
  5728  02A3  3200               	nop2
  5729                           
  5730                           ;nrf24l01.c: 218: nrf24l01CELow();
  5731  02A4  318D  2517  3182   	fcall	_nrf24l01CELow
  5732                           
  5733                           ;nrf24l01.c: 221: enableInterrupts(1);
  5734  02A7  3001               	movlw	1
  5735  02A8  318D  252D  3182   	fcall	_enableInterrupts
  5736                           
  5737                           ;nrf24l01.c: 224: i = 0xFF;
  5738  02AB  30FF               	movlw	255
  5739  02AC  0020               	movlb	0	; select bank0
  5740  02AD  00A9               	movwf	??_nrf24l01SendPacket
  5741  02AE  0829               	movf	??_nrf24l01SendPacket,w
  5742  02AF  00AC               	movwf	nrf24l01SendPacket@i
  5743  02B0                     l2563:	
  5744                           ;nrf24l01.c: 225: while (nrf24l01.TXBusy){
  5745                           
  5746  02B0  0020               	movlb	0	; select bank0
  5747  02B1  1C5B               	btfss	_nrf24l01,0	;volatile
  5748  02B2  2ABC               	goto	l2565
  5749                           
  5750                           ;nrf24l01.c: 226: if (!--i) {
  5751  02B3  3001               	movlw	1
  5752  02B4  02AC               	subwf	nrf24l01SendPacket@i,f
  5753  02B5  1903               	btfsc	3,2
  5754  02B6  2A49               	goto	l338
  5755                           
  5756                           ;nrf24l01.c: 228: };nrf24l01.c: 229: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  5757                           
  5758                           ;nrf24l01.c: 227: goto RESEND;
  5759  02B7  3085               	movlw	133
  5760  02B8                     u1987:	
  5761  02B8  0B89               	decfsz	9,f
  5762  02B9  2AB8               	goto	u1987
  5763  02BA  0000               	nop
  5764  02BB  2AB0               	goto	l2563
  5765  02BC                     l2565:	
  5766                           
  5767                           ;nrf24l01.c: 230: };nrf24l01.c: 234: i = 0xFF;
  5768  02BC  30FF               	movlw	255
  5769  02BD  00A9               	movwf	??_nrf24l01SendPacket
  5770  02BE  0829               	movf	??_nrf24l01SendPacket,w
  5771  02BF  00AC               	movwf	nrf24l01SendPacket@i
  5772  02C0                     l2575:	
  5773                           ;nrf24l01.c: 235: while (TXPacket->packetData.ACKRequest){
  5774                           
  5775  02C0  0020               	movlb	0	; select bank0
  5776  02C1  0859               	movf	_TXPacket,w
  5777  02C2  0086               	movwf	6
  5778  02C3  0187               	clrf	7
  5779  02C4  1D01               	btfss	1,2
  5780  02C5  0008               	return
  5781                           
  5782                           ;nrf24l01.c: 236: if (!--i) {
  5783  02C6  3001               	movlw	1
  5784  02C7  02AC               	subwf	nrf24l01SendPacket@i,f
  5785  02C8  1D03               	btfss	3,2
  5786  02C9  2AED               	goto	l2573
  5787                           
  5788                           ;nrf24l01.c: 237: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  5789  02CA  3002               	movlw	2
  5790  02CB  0020               	movlb	0	; select bank0
  5791  02CC  00AA               	movwf	??_nrf24l01SendPacket+1
  5792  02CD  3004               	movlw	4
  5793  02CE  00A9               	movwf	??_nrf24l01SendPacket
  5794  02CF  30BA               	movlw	186
  5795  02D0                     u1997:	
  5796  02D0  0B89               	decfsz	9,f
  5797  02D1  2AD0               	goto	u1997
  5798  02D2  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5799  02D3  2AD0               	goto	u1997
  5800  02D4  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  5801  02D5  2AD0               	goto	u1997
  5802  02D6  0000               	nop
  5803                           
  5804                           ;nrf24l01.c: 238: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  5805  02D7  3002               	movlw	2
  5806  02D8  0020               	movlb	0	; select bank0
  5807  02D9  00AA               	movwf	??_nrf24l01SendPacket+1
  5808  02DA  3004               	movlw	4
  5809  02DB  00A9               	movwf	??_nrf24l01SendPacket
  5810  02DC  30BA               	movlw	186
  5811  02DD                     u2007:	
  5812  02DD  0B89               	decfsz	9,f
  5813  02DE  2ADD               	goto	u2007
  5814  02DF  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5815  02E0  2ADD               	goto	u2007
  5816  02E1  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  5817  02E2  2ADD               	goto	u2007
  5818  02E3  0000               	nop
  5819                           
  5820                           ;nrf24l01.c: 239: nrf24l01ChangeTXPower(1);
  5821  02E4  3001               	movlw	1
  5822  02E5  0020               	movlb	0	; select bank0
  5823  02E6  00A4               	movwf	nrf24l01ChangeTXPower@addPower
  5824  02E7  3000               	movlw	0
  5825  02E8  00A5               	movwf	nrf24l01ChangeTXPower@addPower+1
  5826  02E9  3186  26B7  3182   	fcall	_nrf24l01ChangeTXPower
  5827                           
  5828                           ;nrf24l01.c: 240: goto RESEND;
  5829  02EC  2A49               	goto	l338
  5830  02ED                     l2573:	
  5831                           
  5832                           ;nrf24l01.c: 241: };nrf24l01.c: 242: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  5833  02ED  3085               	movlw	133
  5834  02EE                     u2017:	
  5835  02EE  0B89               	decfsz	9,f
  5836  02EF  2AEE               	goto	u2017
  5837  02F0  0000               	nop
  5838  02F1  2AC0               	goto	l2575
  5839  02F2                     __end_of_nrf24l01SendPacket:	
  5840                           
  5841                           	psect	text18
  5842  0EFD                     __ptext18:	
  5843 ;; *************** function _strlen *****************
  5844 ;; Defined at:
  5845 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  5846 ;; Parameters:    Size  Location     Type
  5847 ;;  s               1    wreg     PTR const unsigned char 
  5848 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5849 ;;		 -> loop@packet(33), romData(19), 
  5850 ;; Auto vars:     Size  Location     Type
  5851 ;;  s               1    8[BANK0 ] PTR const unsigned char 
  5852 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5853 ;;		 -> loop@packet(33), romData(19), 
  5854 ;;  cp              1    7[BANK0 ] PTR const unsigned char 
  5855 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5856 ;;		 -> loop@packet(33), romData(19), 
  5857 ;; Return value:  Size  Location     Type
  5858 ;;                  2    1[BANK0 ] unsigned int 
  5859 ;; Registers used:
  5860 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5861 ;; Tracked objects:
  5862 ;;		On entry : 0/0
  5863 ;;		On exit  : 0/0
  5864 ;;		Unchanged: 0/0
  5865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5866 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5867 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5868 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5869 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5870 ;;Total ram usage:        8 bytes
  5871 ;; Hardware stack levels used:    1
  5872 ;; Hardware stack levels required when called:    7
  5873 ;; This function calls:
  5874 ;;		Nothing
  5875 ;; This function is called by:
  5876 ;;		_nrf24l01GetPipe
  5877 ;;		_nrf24l01SendPacket
  5878 ;; This function uses a non-reentrant model
  5879 ;;
  5880                           
  5881                           
  5882                           ;psect for function _strlen
  5883  0EFD                     _strlen:	
  5884                           
  5885                           ;incstack = 0
  5886                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5887                           ;strlen@s stored from wreg
  5888  0EFD  0020               	movlb	0	; select bank0
  5889  0EFE  00A8               	movwf	strlen@s
  5890  0EFF  0828               	movf	strlen@s,w
  5891  0F00  00A3               	movwf	??_strlen
  5892  0F01  0823               	movf	??_strlen,w
  5893  0F02  00A7               	movwf	strlen@cp
  5894  0F03                     l2269:	
  5895  0F03  0827               	movf	strlen@cp,w
  5896  0F04  0086               	movwf	6
  5897  0F05  0187               	clrf	7
  5898  0F06  0801               	movf	1,w
  5899  0F07  1903               	btfsc	3,2
  5900  0F08  2F0E               	goto	l2271
  5901  0F09  3001               	movlw	1
  5902  0F0A  00A3               	movwf	??_strlen
  5903  0F0B  0823               	movf	??_strlen,w
  5904  0F0C  07A7               	addwf	strlen@cp,f
  5905  0F0D  2F03               	goto	l2269
  5906  0F0E                     l2271:	
  5907  0F0E  0828               	movf	strlen@s,w
  5908  0F0F  00A3               	movwf	??_strlen
  5909  0F10  3000               	movlw	0
  5910  0F11  00A4               	movwf	??_strlen+1
  5911  0F12  09A3               	comf	??_strlen,f
  5912  0F13  09A4               	comf	??_strlen+1,f
  5913  0F14  0AA3               	incf	??_strlen,f
  5914  0F15  1903               	skipnz
  5915  0F16  0AA4               	incf	??_strlen+1,f
  5916  0F17  0827               	movf	strlen@cp,w
  5917  0F18  00A5               	movwf	??_strlen+2
  5918  0F19  3000               	movlw	0
  5919  0F1A  00A6               	movwf	??_strlen+3
  5920  0F1B  0823               	movf	??_strlen,w
  5921  0F1C  0725               	addwf	??_strlen+2,w
  5922  0F1D  00A1               	movwf	?_strlen
  5923  0F1E  0824               	movf	??_strlen+1,w
  5924  0F1F  3D26               	addwfc	??_strlen+3,w
  5925  0F20  00A2               	movwf	?_strlen+1
  5926  0F21  0008               	return
  5927  0F22                     __end_of_strlen:	
  5928                           
  5929                           	psect	text19
  5930  0732                     __ptext19:	
  5931 ;; *************** function _nrf24l01SetRXMode *****************
  5932 ;; Defined at:
  5933 ;;		line 54 in file "nrf24l01.c"
  5934 ;; Parameters:    Size  Location     Type
  5935 ;;  rxMode          1    wreg     unsigned char 
  5936 ;; Auto vars:     Size  Location     Type
  5937 ;;  rxMode          1    6[BANK0 ] unsigned char 
  5938 ;;  config          1    5[BANK0 ] struct .
  5939 ;; Return value:  Size  Location     Type
  5940 ;;                  1    wreg      void 
  5941 ;; Registers used:
  5942 ;;		wreg, status,2, status,0, pclath, cstack
  5943 ;; Tracked objects:
  5944 ;;		On entry : 0/0
  5945 ;;		On exit  : 0/0
  5946 ;;		Unchanged: 0/0
  5947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5949 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5950 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5951 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5952 ;;Total ram usage:        3 bytes
  5953 ;; Hardware stack levels used:    1
  5954 ;; Hardware stack levels required when called:   10
  5955 ;; This function calls:
  5956 ;;		_nrf24l01CEHigh
  5957 ;;		_nrf24l01CELow
  5958 ;;		_nrf24l01Send
  5959 ;; This function is called by:
  5960 ;;		_nrf24l01SendPacket
  5961 ;;		_checkRxData
  5962 ;; This function uses a non-reentrant model
  5963 ;;
  5964                           
  5965                           
  5966                           ;psect for function _nrf24l01SetRXMode
  5967  0732                     _nrf24l01SetRXMode:	
  5968                           
  5969                           ;incstack = 0
  5970                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  5971                           ;nrf24l01SetRXMode@rxMode stored from wreg
  5972  0732  0020               	movlb	0	; select bank0
  5973  0733  00A6               	movwf	nrf24l01SetRXMode@rxMode
  5974                           
  5975                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  5976  0734  01A1               	clrf	nrf24l01Send@data
  5977  0735  3000               	movlw	0
  5978  0736  318E  2678  3187   	fcall	_nrf24l01Send
  5979  0739  0020               	movlb	0	; select bank0
  5980  073A  00A4               	movwf	??_nrf24l01SetRXMode
  5981  073B  0824               	movf	??_nrf24l01SetRXMode,w
  5982  073C  00A5               	movwf	nrf24l01SetRXMode@config
  5983                           
  5984                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  5985  073D  0825               	movf	nrf24l01SetRXMode@config,w
  5986  073E  3901               	andlw	1
  5987  073F  0626               	xorwf	nrf24l01SetRXMode@rxMode,w
  5988  0740  1903               	skipnz
  5989  0741  2F66               	goto	l2197
  5990                           
  5991                           ;nrf24l01.c: 65: nrf24l01CELow();
  5992  0742  318D  2517  3187   	fcall	_nrf24l01CELow
  5993                           
  5994                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5995  0745  30A0               	movlw	160
  5996  0746                     u2027:	
  5997  0746  3200               	nop2
  5998  0747  0B89               	decfsz	9,f
  5999  0748  2F46               	goto	u2027
  6000                           
  6001                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  6002  0749  0020               	movlb	0	; select bank0
  6003  074A  0826               	movf	nrf24l01SetRXMode@rxMode,w
  6004  074B  3901               	andlw	1
  6005  074C  1025               	bcf	nrf24l01SetRXMode@config,0
  6006  074D  1D03               	skipz
  6007  074E  1425               	bsf	nrf24l01SetRXMode@config,0
  6008                           
  6009                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  6010  074F  0825               	movf	nrf24l01SetRXMode@config,w
  6011  0750  00A4               	movwf	??_nrf24l01SetRXMode
  6012  0751  0824               	movf	??_nrf24l01SetRXMode,w
  6013  0752  00A1               	movwf	nrf24l01Send@data
  6014  0753  3020               	movlw	32
  6015  0754  318E  2678  3187   	fcall	_nrf24l01Send
  6016                           
  6017                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(16000000/4000000.0)));
  6018  0757  30A0               	movlw	160
  6019  0758                     u2037:	
  6020  0758  3200               	nop2
  6021  0759  0B89               	decfsz	9,f
  6022  075A  2F58               	goto	u2037
  6023                           
  6024                           ;nrf24l01.c: 76: if (rxMode){
  6025  075B  0020               	movlb	0	; select bank0
  6026  075C  0826               	movf	nrf24l01SetRXMode@rxMode,w
  6027  075D  1903               	btfsc	3,2
  6028  075E  2F66               	goto	l2197
  6029                           
  6030                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  6031  075F  318D  2514  3187   	fcall	_nrf24l01CEHigh
  6032                           
  6033                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(16000000/4000000.0)));
  6034  0762  30A0               	movlw	160
  6035  0763                     u2047:	
  6036  0763  3200               	nop2
  6037  0764  0B89               	decfsz	9,f
  6038  0765  2F63               	goto	u2047
  6039  0766                     l2197:	
  6040                           
  6041                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  6042  0766  0020               	movlb	0	; select bank0
  6043  0767  0826               	movf	nrf24l01SetRXMode@rxMode,w
  6044  0768  3901               	andlw	1
  6045  0769  115B               	bcf	_nrf24l01,2	;volatile
  6046  076A  1D03               	skipz
  6047  076B  155B               	bsf	_nrf24l01,2	;volatile
  6048  076C  0008               	return
  6049  076D                     __end_of_nrf24l01SetRXMode:	
  6050                           
  6051                           	psect	text20
  6052  0421                     __ptext20:	
  6053 ;; *************** function _getADCValue *****************
  6054 ;; Defined at:
  6055 ;;		line 23 in file "main.c"
  6056 ;; Parameters:    Size  Location     Type
  6057 ;;  channel         1    wreg     unsigned char 
  6058 ;;  divider         4   15[BANK0 ] unsigned long 
  6059 ;; Auto vars:     Size  Location     Type
  6060 ;;  channel         1   23[BANK0 ] unsigned char 
  6061 ;;  adcSum          4   25[BANK0 ] unsigned long 
  6062 ;;  adcLoop         1   24[BANK0 ] unsigned char 
  6063 ;; Return value:  Size  Location     Type
  6064 ;;                  4   15[BANK0 ] unsigned long 
  6065 ;; Registers used:
  6066 ;;		wreg, status,2, status,0, pclath, cstack
  6067 ;; Tracked objects:
  6068 ;;		On entry : 0/0
  6069 ;;		On exit  : 0/0
  6070 ;;		Unchanged: 0/0
  6071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6072 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6073 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6074 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6075 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6076 ;;Total ram usage:       14 bytes
  6077 ;; Hardware stack levels used:    1
  6078 ;; Hardware stack levels required when called:    8
  6079 ;; This function calls:
  6080 ;;		___lldiv
  6081 ;;		___lmul
  6082 ;; This function is called by:
  6083 ;;		_loop
  6084 ;; This function uses a non-reentrant model
  6085 ;;
  6086                           
  6087                           
  6088                           ;psect for function _getADCValue
  6089  0421                     _getADCValue:	
  6090                           
  6091                           ;incstack = 0
  6092                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  6093                           ;getADCValue@channel stored from wreg
  6094  0421  0020               	movlb	0	; select bank0
  6095  0422  00B7               	movwf	getADCValue@channel
  6096                           
  6097                           ;main.c: 25: unsigned long adcSum = 0;
  6098  0423  3000               	movlw	0
  6099  0424  00BC               	movwf	getADCValue@adcSum+3
  6100  0425  3000               	movlw	0
  6101  0426  00BB               	movwf	getADCValue@adcSum+2
  6102  0427  3000               	movlw	0
  6103  0428  00BA               	movwf	getADCValue@adcSum+1
  6104  0429  3000               	movlw	0
  6105  042A  00B9               	movwf	getADCValue@adcSum
  6106                           
  6107                           ;main.c: 26: unsigned char adcLoop = 255;
  6108  042B  30FF               	movlw	255
  6109  042C  00B3               	movwf	??_getADCValue
  6110  042D  0833               	movf	??_getADCValue,w
  6111  042E  00B8               	movwf	getADCValue@adcLoop
  6112                           
  6113                           ;main.c: 28: ADCON0bits.CHS = channel;
  6114  042F  0837               	movf	getADCValue@channel,w
  6115  0430  00B3               	movwf	??_getADCValue
  6116  0431  0DB3               	rlf	??_getADCValue,f
  6117  0432  0DB3               	rlf	??_getADCValue,f
  6118  0433  0021               	movlb	1	; select bank1
  6119  0434  081D               	movf	29,w	;volatile
  6120  0435  0020               	movlb	0	; select bank0
  6121  0436  0633               	xorwf	??_getADCValue,w
  6122  0437  3903               	andlw	-253
  6123  0438  0633               	xorwf	??_getADCValue,w
  6124  0439  0021               	movlb	1	; select bank1
  6125  043A  009D               	movwf	29	;volatile
  6126                           
  6127                           ;main.c: 29: _delay((unsigned long)((200)*(16000000/4000000.0)));
  6128  043B  30A0               	movlw	160
  6129  043C                     u2057:	
  6130  043C  3200               	nop2
  6131  043D  0B89               	decfsz	9,f
  6132  043E  2C3C               	goto	u2057
  6133  043F                     l2489:	
  6134                           ;main.c: 31: while (--adcLoop){
  6135                           
  6136  043F  3001               	movlw	1
  6137  0440  0020               	movlb	0	; select bank0
  6138  0441  02B8               	subwf	getADCValue@adcLoop,f
  6139  0442  1903               	btfsc	3,2
  6140  0443  2C69               	goto	l2491
  6141                           
  6142                           ;main.c: 33: ADCON0bits.ADGO = 1;
  6143  0444  0021               	movlb	1	; select bank1
  6144  0445  149D               	bsf	29,1	;volatile
  6145  0446                     l220:	
  6146                           ;main.c: 35: while (ADCON0bits.ADGO){
  6147                           
  6148  0446  0021               	movlb	1	; select bank1
  6149  0447  1C9D               	btfss	29,1	;volatile
  6150  0448  2C4B               	goto	l2487
  6151                           
  6152                           ;main.c: 36: __nop();
  6153  0449  0000               	nop
  6154  044A  2C46               	goto	l220
  6155  044B                     l2487:	
  6156                           
  6157                           ;main.c: 37: };main.c: 39: adcSum+= ADRESL;
  6158  044B  081B               	movf	27,w	;volatile
  6159  044C  0020               	movlb	0	; select bank0
  6160  044D  00B3               	movwf	??_getADCValue
  6161  044E  01B4               	clrf	??_getADCValue+1
  6162  044F  01B5               	clrf	??_getADCValue+2
  6163  0450  01B6               	clrf	??_getADCValue+3
  6164  0451  0833               	movf	??_getADCValue,w
  6165  0452  07B9               	addwf	getADCValue@adcSum,f
  6166  0453  0834               	movf	??_getADCValue+1,w
  6167  0454  3DBA               	addwfc	getADCValue@adcSum+1,f
  6168  0455  0835               	movf	??_getADCValue+2,w
  6169  0456  3DBB               	addwfc	getADCValue@adcSum+2,f
  6170  0457  0836               	movf	??_getADCValue+3,w
  6171  0458  3DBC               	addwfc	getADCValue@adcSum+3,f
  6172                           
  6173                           ;main.c: 40: adcSum+= (unsigned) (ADRESH << 8);
  6174  0459  0021               	movlb	1	; select bank1
  6175  045A  081C               	movf	28,w	;volatile
  6176  045B  0020               	movlb	0	; select bank0
  6177  045C  00B3               	movwf	??_getADCValue
  6178  045D  01B4               	clrf	??_getADCValue+1
  6179  045E  0833               	movf	??_getADCValue,w
  6180  045F  00B4               	movwf	??_getADCValue+1
  6181  0460  01B3               	clrf	??_getADCValue
  6182  0461  0833               	movf	??_getADCValue,w
  6183  0462  07B9               	addwf	getADCValue@adcSum,f
  6184  0463  0834               	movf	??_getADCValue+1,w
  6185  0464  3DBA               	addwfc	getADCValue@adcSum+1,f
  6186  0465  3000               	movlw	0
  6187  0466  3DBB               	addwfc	getADCValue@adcSum+2,f
  6188  0467  3DBC               	addwfc	getADCValue@adcSum+3,f
  6189  0468  2C3F               	goto	l2489
  6190  0469                     l2491:	
  6191                           
  6192                           ;main.c: 41: };main.c: 43: adcSum*= 100;
  6193  0469  3000               	movlw	0
  6194  046A  00A4               	movwf	___lmul@multiplier+3
  6195  046B  3000               	movlw	0
  6196  046C  00A3               	movwf	___lmul@multiplier+2
  6197  046D  3000               	movlw	0
  6198  046E  00A2               	movwf	___lmul@multiplier+1
  6199  046F  3064               	movlw	100
  6200  0470  00A1               	movwf	___lmul@multiplier
  6201  0471  083C               	movf	getADCValue@adcSum+3,w
  6202  0472  00A8               	movwf	___lmul@multiplicand+3
  6203  0473  083B               	movf	getADCValue@adcSum+2,w
  6204  0474  00A7               	movwf	___lmul@multiplicand+2
  6205  0475  083A               	movf	getADCValue@adcSum+1,w
  6206  0476  00A6               	movwf	___lmul@multiplicand+1
  6207  0477  0839               	movf	getADCValue@adcSum,w
  6208  0478  00A5               	movwf	___lmul@multiplicand
  6209  0479  318F  279E  3184   	fcall	___lmul
  6210  047C  0020               	movlb	0	; select bank0
  6211  047D  0824               	movf	?___lmul+3,w
  6212  047E  00BC               	movwf	getADCValue@adcSum+3
  6213  047F  0823               	movf	?___lmul+2,w
  6214  0480  00BB               	movwf	getADCValue@adcSum+2
  6215  0481  0822               	movf	?___lmul+1,w
  6216  0482  00BA               	movwf	getADCValue@adcSum+1
  6217  0483  0821               	movf	?___lmul,w
  6218  0484  00B9               	movwf	getADCValue@adcSum
  6219                           
  6220                           ;main.c: 44: adcSum/= divider;
  6221  0485  0832               	movf	getADCValue@divider+3,w
  6222  0486  00A4               	movwf	___lldiv@divisor+3
  6223  0487  0831               	movf	getADCValue@divider+2,w
  6224  0488  00A3               	movwf	___lldiv@divisor+2
  6225  0489  0830               	movf	getADCValue@divider+1,w
  6226  048A  00A2               	movwf	___lldiv@divisor+1
  6227  048B  082F               	movf	getADCValue@divider,w
  6228  048C  00A1               	movwf	___lldiv@divisor
  6229  048D  083C               	movf	getADCValue@adcSum+3,w
  6230  048E  00A8               	movwf	___lldiv@dividend+3
  6231  048F  083B               	movf	getADCValue@adcSum+2,w
  6232  0490  00A7               	movwf	___lldiv@dividend+2
  6233  0491  083A               	movf	getADCValue@adcSum+1,w
  6234  0492  00A6               	movwf	___lldiv@dividend+1
  6235  0493  0839               	movf	getADCValue@adcSum,w
  6236  0494  00A5               	movwf	___lldiv@dividend
  6237  0495  3184  24FD         	fcall	___lldiv
  6238  0497  0020               	movlb	0	; select bank0
  6239  0498  0824               	movf	?___lldiv+3,w
  6240  0499  00BC               	movwf	getADCValue@adcSum+3
  6241  049A  0823               	movf	?___lldiv+2,w
  6242  049B  00BB               	movwf	getADCValue@adcSum+2
  6243  049C  0822               	movf	?___lldiv+1,w
  6244  049D  00BA               	movwf	getADCValue@adcSum+1
  6245  049E  0821               	movf	?___lldiv,w
  6246  049F  00B9               	movwf	getADCValue@adcSum
  6247                           
  6248                           ;main.c: 46: return adcSum;
  6249  04A0  083C               	movf	getADCValue@adcSum+3,w
  6250  04A1  00B2               	movwf	?_getADCValue+3
  6251  04A2  083B               	movf	getADCValue@adcSum+2,w
  6252  04A3  00B1               	movwf	?_getADCValue+2
  6253  04A4  083A               	movf	getADCValue@adcSum+1,w
  6254  04A5  00B0               	movwf	?_getADCValue+1
  6255  04A6  0839               	movf	getADCValue@adcSum,w
  6256  04A7  00AF               	movwf	?_getADCValue
  6257  04A8  0008               	return
  6258  04A9                     __end_of_getADCValue:	
  6259                           
  6260                           	psect	text21
  6261  0F9E                     __ptext21:	
  6262 ;; *************** function ___lmul *****************
  6263 ;; Defined at:
  6264 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;  multiplier      4    1[BANK0 ] unsigned long 
  6267 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  6268 ;; Auto vars:     Size  Location     Type
  6269 ;;  product         4    9[BANK0 ] unsigned long 
  6270 ;; Return value:  Size  Location     Type
  6271 ;;                  4    1[BANK0 ] unsigned long 
  6272 ;; Registers used:
  6273 ;;		wreg, status,2, status,0
  6274 ;; Tracked objects:
  6275 ;;		On entry : 0/0
  6276 ;;		On exit  : 0/0
  6277 ;;		Unchanged: 0/0
  6278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6279 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6280 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6282 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6283 ;;Total ram usage:       12 bytes
  6284 ;; Hardware stack levels used:    1
  6285 ;; Hardware stack levels required when called:    7
  6286 ;; This function calls:
  6287 ;;		Nothing
  6288 ;; This function is called by:
  6289 ;;		_getADCValue
  6290 ;; This function uses a non-reentrant model
  6291 ;;
  6292                           
  6293                           
  6294                           ;psect for function ___lmul
  6295  0F9E                     ___lmul:	
  6296                           
  6297                           ;incstack = 0
  6298                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6299  0F9E  3000               	movlw	0
  6300  0F9F  0020               	movlb	0	; select bank0
  6301  0FA0  00AC               	movwf	___lmul@product+3
  6302  0FA1  3000               	movlw	0
  6303  0FA2  00AB               	movwf	___lmul@product+2
  6304  0FA3  3000               	movlw	0
  6305  0FA4  00AA               	movwf	___lmul@product+1
  6306  0FA5  3000               	movlw	0
  6307  0FA6  00A9               	movwf	___lmul@product
  6308  0FA7                     l2327:	
  6309  0FA7  1C21               	btfss	___lmul@multiplier,0
  6310  0FA8  2FB1               	goto	l2331
  6311  0FA9  0825               	movf	___lmul@multiplicand,w
  6312  0FAA  07A9               	addwf	___lmul@product,f
  6313  0FAB  0826               	movf	___lmul@multiplicand+1,w
  6314  0FAC  3DAA               	addwfc	___lmul@product+1,f
  6315  0FAD  0827               	movf	___lmul@multiplicand+2,w
  6316  0FAE  3DAB               	addwfc	___lmul@product+2,f
  6317  0FAF  0828               	movf	___lmul@multiplicand+3,w
  6318  0FB0  3DAC               	addwfc	___lmul@product+3,f
  6319  0FB1                     l2331:	
  6320  0FB1  3001               	movlw	1
  6321  0FB2                     u1295:	
  6322  0FB2  35A5               	lslf	___lmul@multiplicand,f
  6323  0FB3  0DA6               	rlf	___lmul@multiplicand+1,f
  6324  0FB4  0DA7               	rlf	___lmul@multiplicand+2,f
  6325  0FB5  0DA8               	rlf	___lmul@multiplicand+3,f
  6326  0FB6  0B89               	decfsz	9,f
  6327  0FB7  2FB2               	goto	u1295
  6328  0FB8  3001               	movlw	1
  6329  0FB9                     u1305:	
  6330  0FB9  36A4               	lsrf	___lmul@multiplier+3,f
  6331  0FBA  0CA3               	rrf	___lmul@multiplier+2,f
  6332  0FBB  0CA2               	rrf	___lmul@multiplier+1,f
  6333  0FBC  0CA1               	rrf	___lmul@multiplier,f
  6334  0FBD  0B89               	decfsz	9,f
  6335  0FBE  2FB9               	goto	u1305
  6336  0FBF  0824               	movf	___lmul@multiplier+3,w
  6337  0FC0  0423               	iorwf	___lmul@multiplier+2,w
  6338  0FC1  0422               	iorwf	___lmul@multiplier+1,w
  6339  0FC2  0421               	iorwf	___lmul@multiplier,w
  6340  0FC3  1D03               	skipz
  6341  0FC4  2FA7               	goto	l2327
  6342  0FC5  082C               	movf	___lmul@product+3,w
  6343  0FC6  00A4               	movwf	?___lmul+3
  6344  0FC7  082B               	movf	___lmul@product+2,w
  6345  0FC8  00A3               	movwf	?___lmul+2
  6346  0FC9  082A               	movf	___lmul@product+1,w
  6347  0FCA  00A2               	movwf	?___lmul+1
  6348  0FCB  0829               	movf	___lmul@product,w
  6349  0FCC  00A1               	movwf	?___lmul
  6350  0FCD  0008               	return
  6351  0FCE                     __end_of___lmul:	
  6352                           
  6353                           	psect	text22
  6354  04FD                     __ptext22:	
  6355 ;; *************** function ___lldiv *****************
  6356 ;; Defined at:
  6357 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  6358 ;; Parameters:    Size  Location     Type
  6359 ;;  divisor         4    1[BANK0 ] unsigned long 
  6360 ;;  dividend        4    5[BANK0 ] unsigned long 
  6361 ;; Auto vars:     Size  Location     Type
  6362 ;;  quotient        4   10[BANK0 ] unsigned long 
  6363 ;;  counter         1   14[BANK0 ] unsigned char 
  6364 ;; Return value:  Size  Location     Type
  6365 ;;                  4    1[BANK0 ] unsigned long 
  6366 ;; Registers used:
  6367 ;;		wreg, status,2, status,0
  6368 ;; Tracked objects:
  6369 ;;		On entry : 0/0
  6370 ;;		On exit  : 0/0
  6371 ;;		Unchanged: 0/0
  6372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6373 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6374 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6375 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6376 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6377 ;;Total ram usage:       14 bytes
  6378 ;; Hardware stack levels used:    1
  6379 ;; Hardware stack levels required when called:    7
  6380 ;; This function calls:
  6381 ;;		Nothing
  6382 ;; This function is called by:
  6383 ;;		_getADCValue
  6384 ;;		_ultoa
  6385 ;; This function uses a non-reentrant model
  6386 ;;
  6387                           
  6388                           
  6389                           ;psect for function ___lldiv
  6390  04FD                     ___lldiv:	
  6391                           
  6392                           ;incstack = 0
  6393                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6394  04FD  3000               	movlw	0
  6395  04FE  0020               	movlb	0	; select bank0
  6396  04FF  00AD               	movwf	___lldiv@quotient+3
  6397  0500  3000               	movlw	0
  6398  0501  00AC               	movwf	___lldiv@quotient+2
  6399  0502  3000               	movlw	0
  6400  0503  00AB               	movwf	___lldiv@quotient+1
  6401  0504  3000               	movlw	0
  6402  0505  00AA               	movwf	___lldiv@quotient
  6403  0506  0824               	movf	___lldiv@divisor+3,w
  6404  0507  0423               	iorwf	___lldiv@divisor+2,w
  6405  0508  0422               	iorwf	___lldiv@divisor+1,w
  6406  0509  0421               	iorwf	___lldiv@divisor,w
  6407  050A  1903               	skipnz
  6408  050B  2D47               	goto	l2083
  6409  050C  01AE               	clrf	___lldiv@counter
  6410  050D  0AAE               	incf	___lldiv@counter,f
  6411  050E                     l2069:	
  6412  050E  1BA4               	btfsc	___lldiv@divisor+3,7
  6413  050F  2D1C               	goto	l2071
  6414  0510  3001               	movlw	1
  6415  0511                     u955:	
  6416  0511  35A1               	lslf	___lldiv@divisor,f
  6417  0512  0DA2               	rlf	___lldiv@divisor+1,f
  6418  0513  0DA3               	rlf	___lldiv@divisor+2,f
  6419  0514  0DA4               	rlf	___lldiv@divisor+3,f
  6420  0515  0B89               	decfsz	9,f
  6421  0516  2D11               	goto	u955
  6422  0517  3001               	movlw	1
  6423  0518  00A9               	movwf	??___lldiv
  6424  0519  0829               	movf	??___lldiv,w
  6425  051A  07AE               	addwf	___lldiv@counter,f
  6426  051B  2D0E               	goto	l2069
  6427  051C                     l2071:	
  6428  051C  3001               	movlw	1
  6429  051D                     u975:	
  6430  051D  35AA               	lslf	___lldiv@quotient,f
  6431  051E  0DAB               	rlf	___lldiv@quotient+1,f
  6432  051F  0DAC               	rlf	___lldiv@quotient+2,f
  6433  0520  0DAD               	rlf	___lldiv@quotient+3,f
  6434  0521  0B89               	decfsz	9,f
  6435  0522  2D1D               	goto	u975
  6436  0523  0824               	movf	___lldiv@divisor+3,w
  6437  0524  0228               	subwf	___lldiv@dividend+3,w
  6438  0525  1D03               	skipz
  6439  0526  2D31               	goto	u985
  6440  0527  0823               	movf	___lldiv@divisor+2,w
  6441  0528  0227               	subwf	___lldiv@dividend+2,w
  6442  0529  1D03               	skipz
  6443  052A  2D31               	goto	u985
  6444  052B  0822               	movf	___lldiv@divisor+1,w
  6445  052C  0226               	subwf	___lldiv@dividend+1,w
  6446  052D  1D03               	skipz
  6447  052E  2D31               	goto	u985
  6448  052F  0821               	movf	___lldiv@divisor,w
  6449  0530  0225               	subwf	___lldiv@dividend,w
  6450  0531                     u985:	
  6451  0531  1C03               	skipc
  6452  0532  2D3C               	goto	l2079
  6453  0533  0821               	movf	___lldiv@divisor,w
  6454  0534  02A5               	subwf	___lldiv@dividend,f
  6455  0535  0822               	movf	___lldiv@divisor+1,w
  6456  0536  3BA6               	subwfb	___lldiv@dividend+1,f
  6457  0537  0823               	movf	___lldiv@divisor+2,w
  6458  0538  3BA7               	subwfb	___lldiv@dividend+2,f
  6459  0539  0824               	movf	___lldiv@divisor+3,w
  6460  053A  3BA8               	subwfb	___lldiv@dividend+3,f
  6461  053B  142A               	bsf	___lldiv@quotient,0
  6462  053C                     l2079:	
  6463  053C  3001               	movlw	1
  6464  053D                     u995:	
  6465  053D  36A4               	lsrf	___lldiv@divisor+3,f
  6466  053E  0CA3               	rrf	___lldiv@divisor+2,f
  6467  053F  0CA2               	rrf	___lldiv@divisor+1,f
  6468  0540  0CA1               	rrf	___lldiv@divisor,f
  6469  0541  0B89               	decfsz	9,f
  6470  0542  2D3D               	goto	u995
  6471  0543  3001               	movlw	1
  6472  0544  02AE               	subwf	___lldiv@counter,f
  6473  0545  1D03               	btfss	3,2
  6474  0546  2D1C               	goto	l2071
  6475  0547                     l2083:	
  6476  0547  082D               	movf	___lldiv@quotient+3,w
  6477  0548  00A4               	movwf	?___lldiv+3
  6478  0549  082C               	movf	___lldiv@quotient+2,w
  6479  054A  00A3               	movwf	?___lldiv+2
  6480  054B  082B               	movf	___lldiv@quotient+1,w
  6481  054C  00A2               	movwf	?___lldiv+1
  6482  054D  082A               	movf	___lldiv@quotient,w
  6483  054E  00A1               	movwf	?___lldiv
  6484  054F  0008               	return
  6485  0550                     __end_of___lldiv:	
  6486                           
  6487                           	psect	text23
  6488  0D6E                     __ptext23:	
  6489 ;; *************** function _checkTXPower *****************
  6490 ;; Defined at:
  6491 ;;		line 92 in file "main.c"
  6492 ;; Parameters:    Size  Location     Type
  6493 ;;		None
  6494 ;; Auto vars:     Size  Location     Type
  6495 ;;  rxPacket        1    9[BANK0 ] PTR struct .
  6496 ;;		 -> RXPacket(33), 
  6497 ;; Return value:  Size  Location     Type
  6498 ;;                  1    wreg      void 
  6499 ;; Registers used:
  6500 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6507 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6508 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6509 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6510 ;;Total ram usage:        2 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:   11
  6513 ;; This function calls:
  6514 ;;		_nrf24l01ChangeTXPower
  6515 ;;		_nrf24l01GetRXPacket
  6516 ;; This function is called by:
  6517 ;;		_loop
  6518 ;; This function uses a non-reentrant model
  6519 ;;
  6520                           
  6521                           
  6522                           ;psect for function _checkTXPower
  6523  0D6E                     _checkTXPower:	
  6524                           
  6525                           ;main.c: 93: nrf24l01Packet_t * rxPacket = nrf24l01GetRXPacket();
  6526                           
  6527                           ;incstack = 0
  6528                           ; Regs used in _checkTXPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6529  0D6E  3187  27FE  318D   	fcall	_nrf24l01GetRXPacket
  6530  0D71  0020               	movlb	0	; select bank0
  6531  0D72  00A8               	movwf	??_checkTXPower
  6532  0D73  0828               	movf	??_checkTXPower,w
  6533  0D74  00A9               	movwf	checkTXPower@rxPacket
  6534                           
  6535                           ;main.c: 95: if (rxPacket->packetData.ACKRPD){
  6536  0D75  0829               	movf	checkTXPower@rxPacket,w
  6537  0D76  0086               	movwf	6
  6538  0D77  3001               	movlw	1	; select bank2/3
  6539  0D78  0087               	movwf	7
  6540  0D79  1C81               	btfss	1,1
  6541  0D7A  0008               	return
  6542                           
  6543                           ;main.c: 96: nrf24l01ChangeTXPower(-1);
  6544  0D7B  30FF               	movlw	255
  6545  0D7C  00A4               	movwf	nrf24l01ChangeTXPower@addPower
  6546  0D7D  30FF               	movlw	255
  6547  0D7E  00A5               	movwf	nrf24l01ChangeTXPower@addPower+1
  6548  0D7F  3186  26B7         	fcall	_nrf24l01ChangeTXPower
  6549  0D81  0008               	return
  6550  0D82                     __end_of_checkTXPower:	
  6551                           
  6552                           	psect	text24
  6553  07FE                     __ptext24:	
  6554 ;; *************** function _nrf24l01GetRXPacket *****************
  6555 ;; Defined at:
  6556 ;;		line 131 in file "nrf24l01.c"
  6557 ;; Parameters:    Size  Location     Type
  6558 ;;		None
  6559 ;; Auto vars:     Size  Location     Type
  6560 ;;		None
  6561 ;; Return value:  Size  Location     Type
  6562 ;;                  1    wreg      PTR struct .
  6563 ;; Registers used:
  6564 ;;		wreg
  6565 ;; Tracked objects:
  6566 ;;		On entry : 0/0
  6567 ;;		On exit  : 0/0
  6568 ;;		Unchanged: 0/0
  6569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6574 ;;Total ram usage:        0 bytes
  6575 ;; Hardware stack levels used:    1
  6576 ;; Hardware stack levels required when called:    7
  6577 ;; This function calls:
  6578 ;;		Nothing
  6579 ;; This function is called by:
  6580 ;;		_checkTXPower
  6581 ;; This function uses a non-reentrant model
  6582 ;;
  6583                           
  6584                           
  6585                           ;psect for function _nrf24l01GetRXPacket
  6586  07FE                     _nrf24l01GetRXPacket:	
  6587                           
  6588                           ;nrf24l01.c: 132: return &RXPacket;
  6589                           
  6590                           ;incstack = 0
  6591                           ; Regs used in _nrf24l01GetRXPacket: [wreg]
  6592  07FE  3040               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  6593  07FF  0008               	return
  6594  0800                     __end_of_nrf24l01GetRXPacket:	
  6595                           
  6596                           	psect	text25
  6597  06B7                     __ptext25:	
  6598 ;; *************** function _nrf24l01ChangeTXPower *****************
  6599 ;; Defined at:
  6600 ;;		line 33 in file "nrf24l01.c"
  6601 ;; Parameters:    Size  Location     Type
  6602 ;;  addPower        2    4[BANK0 ] int 
  6603 ;; Auto vars:     Size  Location     Type
  6604 ;;  rfSetup         1    7[BANK0 ] struct .
  6605 ;; Return value:  Size  Location     Type
  6606 ;;                  1    wreg      void 
  6607 ;; Registers used:
  6608 ;;		wreg, status,2, status,0, pclath, cstack
  6609 ;; Tracked objects:
  6610 ;;		On entry : 0/0
  6611 ;;		On exit  : 0/0
  6612 ;;		Unchanged: 0/0
  6613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6614 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6617 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6618 ;;Total ram usage:        4 bytes
  6619 ;; Hardware stack levels used:    1
  6620 ;; Hardware stack levels required when called:   10
  6621 ;; This function calls:
  6622 ;;		_nrf24l01Send
  6623 ;; This function is called by:
  6624 ;;		_checkTXPower
  6625 ;;		_nrf24l01SendPacket
  6626 ;; This function uses a non-reentrant model
  6627 ;;
  6628                           
  6629                           
  6630                           ;psect for function _nrf24l01ChangeTXPower
  6631  06B7                     _nrf24l01ChangeTXPower:	
  6632                           
  6633                           ;nrf24l01.c: 35: n_RF_SETUP_t rfSetup;;nrf24l01.c: 36: rfSetup.byte = nrf24l01Send((unsi
      +                          gned) 0b00000000 | (unsigned) 0x06, 0);
  6634                           
  6635                           ;incstack = 0
  6636                           ; Regs used in _nrf24l01ChangeTXPower: [wreg+status,2+status,0+pclath+cstack]
  6637  06B7  0020               	movlb	0	; select bank0
  6638  06B8  01A1               	clrf	nrf24l01Send@data
  6639  06B9  3006               	movlw	6
  6640  06BA  318E  2678  3186   	fcall	_nrf24l01Send
  6641  06BD  0020               	movlb	0	; select bank0
  6642  06BE  00A6               	movwf	??_nrf24l01ChangeTXPower
  6643  06BF  0826               	movf	??_nrf24l01ChangeTXPower,w
  6644  06C0  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  6645                           
  6646                           ;nrf24l01.c: 38: if (addPower > 0){
  6647  06C1  0825               	movf	nrf24l01ChangeTXPower@addPower+1,w
  6648  06C2  3A80               	xorlw	128
  6649  06C3  00A6               	movwf	??_nrf24l01ChangeTXPower
  6650  06C4  3080               	movlw	128
  6651  06C5  0226               	subwf	??_nrf24l01ChangeTXPower,w
  6652  06C6  1D03               	skipz
  6653  06C7  2ECA               	goto	u1155
  6654  06C8  3001               	movlw	1
  6655  06C9  0224               	subwf	nrf24l01ChangeTXPower@addPower,w
  6656  06CA                     u1155:	
  6657  06CA  1C03               	skipc
  6658  06CB  2EDC               	goto	l2257
  6659                           
  6660                           ;nrf24l01.c: 39: if (rfSetup.RF_PWR < 3){
  6661  06CC  0020               	movlb	0	; select bank0
  6662  06CD  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  6663  06CE  3903               	andlw	3
  6664  06CF  3A03               	xorlw	3
  6665  06D0  1903               	skipnz
  6666  06D1  2EDC               	goto	l2257
  6667                           
  6668                           ;nrf24l01.c: 40: rfSetup.RF_PWR++;
  6669  06D2  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  6670  06D3  3903               	andlw	3
  6671  06D4  00A6               	movwf	??_nrf24l01ChangeTXPower
  6672  06D5  0AA6               	incf	??_nrf24l01ChangeTXPower,f
  6673  06D6  0DA6               	rlf	??_nrf24l01ChangeTXPower,f
  6674  06D7  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  6675  06D8  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  6676  06D9  39F9               	andlw	-7
  6677  06DA  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  6678  06DB  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  6679  06DC                     l2257:	
  6680                           
  6681                           ;nrf24l01.c: 41: };nrf24l01.c: 42: };nrf24l01.c: 44: if (addPower < 0){
  6682  06DC  0020               	movlb	0	; select bank0
  6683  06DD  1FA5               	btfss	nrf24l01ChangeTXPower@addPower+1,7
  6684  06DE  2EEE               	goto	l2263
  6685                           
  6686                           ;nrf24l01.c: 45: if (rfSetup.RF_PWR > 0){
  6687  06DF  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  6688  06E0  3903               	andlw	3
  6689  06E1  3A00               	xorlw	0
  6690  06E2  1903               	skipnz
  6691  06E3  2EEE               	goto	l2263
  6692                           
  6693                           ;nrf24l01.c: 46: rfSetup.RF_PWR--;
  6694  06E4  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  6695  06E5  3903               	andlw	3
  6696  06E6  00A6               	movwf	??_nrf24l01ChangeTXPower
  6697  06E7  03A6               	decf	??_nrf24l01ChangeTXPower,f
  6698  06E8  0DA6               	rlf	??_nrf24l01ChangeTXPower,f
  6699  06E9  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  6700  06EA  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  6701  06EB  39F9               	andlw	-7
  6702  06EC  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  6703  06ED  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  6704  06EE                     l2263:	
  6705                           
  6706                           ;nrf24l01.c: 47: };nrf24l01.c: 48: };nrf24l01.c: 50: nrf24l01Send((unsigned) 0b00100000 
      +                          | (unsigned) 0x06, rfSetup.byte);
  6707  06EE  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  6708  06EF  00A6               	movwf	??_nrf24l01ChangeTXPower
  6709  06F0  0826               	movf	??_nrf24l01ChangeTXPower,w
  6710  06F1  00A1               	movwf	nrf24l01Send@data
  6711  06F2  3026               	movlw	38
  6712  06F3  318E  2678         	fcall	_nrf24l01Send
  6713  06F5  0008               	return
  6714  06F6                     __end_of_nrf24l01ChangeTXPower:	
  6715                           
  6716                           	psect	text26
  6717  0E78                     __ptext26:	
  6718 ;; *************** function _nrf24l01Send *****************
  6719 ;; Defined at:
  6720 ;;		line 9 in file "nrf24l01.c"
  6721 ;; Parameters:    Size  Location     Type
  6722 ;;  command         1    wreg     unsigned char 
  6723 ;;  data            1    1[BANK0 ] unsigned char 
  6724 ;; Auto vars:     Size  Location     Type
  6725 ;;  command         1    3[BANK0 ] unsigned char 
  6726 ;; Return value:  Size  Location     Type
  6727 ;;                  1    wreg      unsigned char 
  6728 ;; Registers used:
  6729 ;;		wreg, status,2, status,0, pclath, cstack
  6730 ;; Tracked objects:
  6731 ;;		On entry : 0/0
  6732 ;;		On exit  : 0/0
  6733 ;;		Unchanged: 0/0
  6734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6735 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6736 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6739 ;;Total ram usage:        3 bytes
  6740 ;; Hardware stack levels used:    1
  6741 ;; Hardware stack levels required when called:    9
  6742 ;; This function calls:
  6743 ;;		_enableInterrupts
  6744 ;;		_nrf24l01SPIEnd
  6745 ;;		_nrf24l01SPISend
  6746 ;;		_nrf24l01SPIStart
  6747 ;; This function is called by:
  6748 ;;		_loop
  6749 ;;		_nrf24l01ChangeTXPower
  6750 ;;		_nrf24l01SetRXMode
  6751 ;;		_nrf24l01SetRXPipe
  6752 ;;		_nrf24l01InitRegisters
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           
  6757                           ;psect for function _nrf24l01Send
  6758  0E78                     _nrf24l01Send:	
  6759                           
  6760                           ;incstack = 0
  6761                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  6762                           ;nrf24l01Send@command stored from wreg
  6763  0E78  0020               	movlb	0	; select bank0
  6764  0E79  00A3               	movwf	nrf24l01Send@command
  6765                           
  6766                           ;nrf24l01.c: 12: enableInterrupts(0);
  6767  0E7A  3000               	movlw	0
  6768  0E7B  318D  252D  318E   	fcall	_enableInterrupts
  6769                           
  6770                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  6771  0E7E  318D  2535  318E   	fcall	_nrf24l01SPIStart
  6772                           
  6773                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  6774  0E81  0020               	movlb	0	; select bank0
  6775  0E82  0823               	movf	nrf24l01Send@command,w
  6776  0E83  318D  253D  318E   	fcall	_nrf24l01SPISend
  6777                           
  6778                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  6779  0E86  0020               	movlb	0	; select bank0
  6780  0E87  0821               	movf	nrf24l01Send@data,w
  6781  0E88  318D  253D  318E   	fcall	_nrf24l01SPISend
  6782  0E8B  0020               	movlb	0	; select bank0
  6783  0E8C  00A2               	movwf	??_nrf24l01Send
  6784  0E8D  0822               	movf	??_nrf24l01Send,w
  6785  0E8E  00A1               	movwf	nrf24l01Send@data
  6786                           
  6787                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  6788  0E8F  318D  2526  318E   	fcall	_nrf24l01SPIEnd
  6789                           
  6790                           ;nrf24l01.c: 27: enableInterrupts(1);
  6791  0E92  3001               	movlw	1
  6792  0E93  318D  252D         	fcall	_enableInterrupts
  6793                           
  6794                           ;nrf24l01.c: 29: return data;
  6795  0E95  0020               	movlb	0	; select bank0
  6796  0E96  0821               	movf	nrf24l01Send@data,w
  6797  0E97  0008               	return
  6798  0E98                     __end_of_nrf24l01Send:	
  6799                           
  6800                           	psect	text27
  6801  0EDA                     __ptext27:	
  6802 ;; *************** function _flashUpdate *****************
  6803 ;; Defined at:
  6804 ;;		line 97 in file "flash.c"
  6805 ;; Parameters:    Size  Location     Type
  6806 ;;		None
  6807 ;; Auto vars:     Size  Location     Type
  6808 ;;  i               2    9[BANK0 ] unsigned int 
  6809 ;; Return value:  Size  Location     Type
  6810 ;;                  1    wreg      void 
  6811 ;; Registers used:
  6812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6813 ;; Tracked objects:
  6814 ;;		On entry : 0/0
  6815 ;;		On exit  : 0/0
  6816 ;;		Unchanged: 0/0
  6817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6819 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6820 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6821 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6822 ;;Total ram usage:        4 bytes
  6823 ;; Hardware stack levels used:    1
  6824 ;; Hardware stack levels required when called:    8
  6825 ;; This function calls:
  6826 ;;		_flashWriteByte
  6827 ;; This function is called by:
  6828 ;;		_main
  6829 ;; This function uses a non-reentrant model
  6830 ;;
  6831                           
  6832                           
  6833                           ;psect for function _flashUpdate
  6834  0EDA                     _flashUpdate:	
  6835                           
  6836                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  6837                           
  6838                           ;incstack = 0
  6839                           ; Regs used in _flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6840  0EDA  0020               	movlb	0	; select bank0
  6841  0EDB  01A9               	clrf	flashUpdate@i
  6842  0EDC  01AA               	clrf	flashUpdate@i+1
  6843  0EDD                     L1:	
  6844  0EDD  3000               	movlw	0
  6845  0EDE  022A               	subwf	flashUpdate@i+1,w
  6846  0EDF  3020               	movlw	32
  6847  0EE0  1903               	skipnz
  6848  0EE1  0229               	subwf	flashUpdate@i,w
  6849  0EE2  1803               	btfsc	3,0
  6850  0EE3  0008               	return
  6851                           
  6852                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  6853  0EE4  082A               	movf	flashUpdate@i+1,w
  6854  0EE5  00A2               	movwf	flashWriteByte@offset+1
  6855  0EE6  0829               	movf	flashUpdate@i,w
  6856  0EE7  00A1               	movwf	flashWriteByte@offset
  6857  0EE8  0829               	movf	flashUpdate@i,w
  6858  0EE9  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  6859  0EEA  0086               	movwf	6
  6860  0EEB  3001               	movlw	1	; select bank2/3
  6861  0EEC  0087               	movwf	7
  6862  0EED  0801               	movf	1,w
  6863  0EEE  00A7               	movwf	??_flashUpdate
  6864  0EEF  01A8               	clrf	??_flashUpdate+1
  6865  0EF0  0827               	movf	??_flashUpdate,w
  6866  0EF1  00A3               	movwf	flashWriteByte@data
  6867  0EF2  0828               	movf	??_flashUpdate+1,w
  6868  0EF3  00A4               	movwf	flashWriteByte@data+1
  6869  0EF4  3186  26F6  318E   	fcall	_flashWriteByte
  6870  0EF7  3001               	movlw	1
  6871  0EF8  0020               	movlb	0	; select bank0
  6872  0EF9  07A9               	addwf	flashUpdate@i,f
  6873  0EFA  3000               	movlw	0
  6874  0EFB  3DAA               	addwfc	flashUpdate@i+1,f
  6875  0EFC  2EDD               	goto	L1
  6876  0EFD                     __end_of_flashUpdate:	
  6877                           
  6878                           	psect	text28
  6879  06F6                     __ptext28:	
  6880 ;; *************** function _flashWriteByte *****************
  6881 ;; Defined at:
  6882 ;;		line 8 in file "flash.c"
  6883 ;; Parameters:    Size  Location     Type
  6884 ;;  offset          2    1[BANK0 ] unsigned int 
  6885 ;;  data            2    3[BANK0 ] unsigned int 
  6886 ;; Auto vars:     Size  Location     Type
  6887 ;;  address         2    5[BANK0 ] unsigned int 
  6888 ;; Return value:  Size  Location     Type
  6889 ;;                  1    wreg      void 
  6890 ;; Registers used:
  6891 ;;		wreg, status,2, status,0
  6892 ;; Tracked objects:
  6893 ;;		On entry : 0/0
  6894 ;;		On exit  : 0/0
  6895 ;;		Unchanged: 0/0
  6896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6897 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6898 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6900 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6901 ;;Total ram usage:        6 bytes
  6902 ;; Hardware stack levels used:    1
  6903 ;; Hardware stack levels required when called:    7
  6904 ;; This function calls:
  6905 ;;		Nothing
  6906 ;; This function is called by:
  6907 ;;		_flashUpdate
  6908 ;; This function uses a non-reentrant model
  6909 ;;
  6910                           
  6911                           
  6912                           ;psect for function _flashWriteByte
  6913  06F6                     _flashWriteByte:	
  6914                           
  6915                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  6916                           
  6917                           ;incstack = 0
  6918                           ; Regs used in _flashWriteByte: [wreg+status,2+status,0]
  6919  06F6  138B               	bcf	11,7	;volatile
  6920                           
  6921                           ;flash.c: 15: PMCON1 = 0x00;
  6922  06F7  0031               	movlb	17	; select bank17
  6923  06F8  0195               	clrf	21	;volsfr
  6924                           
  6925                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  6926  06F9  0020               	movlb	0	; select bank0
  6927  06FA  0821               	movf	flashWriteByte@offset,w
  6928  06FB  3EE0               	addlw	224
  6929  06FC  00A5               	movwf	flashWriteByte@address
  6930  06FD  301F               	movlw	31
  6931  06FE  3D22               	addwfc	flashWriteByte@offset+1,w
  6932  06FF  00A6               	movwf	flashWriteByte@address+1
  6933                           
  6934                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  6935  0700  0825               	movf	flashWriteByte@address,w
  6936  0701  0031               	movlb	17	; select bank17
  6937  0702  0091               	movwf	17	;volatile
  6938                           
  6939                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  6940  0703  0020               	movlb	0	; select bank0
  6941  0704  0826               	movf	flashWriteByte@address+1,w
  6942  0705  0031               	movlb	17	; select bank17
  6943  0706  0092               	movwf	18	;volatile
  6944                           
  6945                           ;flash.c: 21: PMCON1bits.FREE = 1;
  6946  0707  1615               	bsf	21,4	;volsfr
  6947                           
  6948                           ;flash.c: 22: PMCON1bits.WREN = 1;
  6949  0708  1515               	bsf	21,2	;volsfr
  6950                           
  6951                           ;flash.c: 24: PMCON2 = 0x55;
  6952  0709  3055               	movlw	85
  6953  070A  0096               	movwf	22	;volsfr
  6954                           
  6955                           ;flash.c: 25: PMCON2 = 0xAA;
  6956  070B  30AA               	movlw	170
  6957  070C  0096               	movwf	22	;volsfr
  6958                           
  6959                           ;flash.c: 27: PMCON1bits.WR = 1;
  6960  070D  1495               	bsf	21,1	;volsfr
  6961                           
  6962                           ;flash.c: 29: __nop();
  6963  070E  0000               	nop
  6964                           
  6965                           ;flash.c: 30: __nop();
  6966  070F  0000               	nop
  6967                           
  6968                           ;flash.c: 32: PMCON1bits.WREN = 0;
  6969  0710  0031               	movlb	17	; select bank17
  6970  0711  1115               	bcf	21,2	;volsfr
  6971                           
  6972                           ;flash.c: 36: PMCON1 = 0x00;
  6973  0712  0195               	clrf	21	;volsfr
  6974                           
  6975                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  6976  0713  0020               	movlb	0	; select bank0
  6977  0714  0825               	movf	flashWriteByte@address,w
  6978  0715  0031               	movlb	17	; select bank17
  6979  0716  0091               	movwf	17	;volatile
  6980                           
  6981                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  6982  0717  0020               	movlb	0	; select bank0
  6983  0718  0826               	movf	flashWriteByte@address+1,w
  6984  0719  0031               	movlb	17	; select bank17
  6985  071A  0092               	movwf	18	;volatile
  6986                           
  6987                           ;flash.c: 41: PMCON1bits.FREE = 0;
  6988  071B  1215               	bcf	21,4	;volsfr
  6989                           
  6990                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  6991  071C  1695               	bsf	21,5	;volsfr
  6992                           
  6993                           ;flash.c: 43: PMCON1bits.WREN = 1;
  6994  071D  1515               	bsf	21,2	;volsfr
  6995                           
  6996                           ;flash.c: 45: PMDATL = (data >> 0);
  6997  071E  0020               	movlb	0	; select bank0
  6998  071F  0823               	movf	flashWriteByte@data,w
  6999  0720  0031               	movlb	17	; select bank17
  7000  0721  0093               	movwf	19	;volatile
  7001                           
  7002                           ;flash.c: 46: PMDATH = (data >> 8);
  7003  0722  0020               	movlb	0	; select bank0
  7004  0723  0824               	movf	flashWriteByte@data+1,w
  7005  0724  0031               	movlb	17	; select bank17
  7006  0725  0094               	movwf	20	;volatile
  7007                           
  7008                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  7009  0726  1295               	bcf	21,5	;volsfr
  7010                           
  7011                           ;flash.c: 50: PMCON2 = 0x55;
  7012  0727  3055               	movlw	85
  7013  0728  0096               	movwf	22	;volsfr
  7014                           
  7015                           ;flash.c: 51: PMCON2 = 0xAA;
  7016  0729  30AA               	movlw	170
  7017  072A  0096               	movwf	22	;volsfr
  7018                           
  7019                           ;flash.c: 53: PMCON1bits.WR = 1;
  7020  072B  1495               	bsf	21,1	;volsfr
  7021                           
  7022                           ;flash.c: 55: __nop();
  7023  072C  0000               	nop
  7024                           
  7025                           ;flash.c: 56: __nop();
  7026  072D  0000               	nop
  7027                           
  7028                           ;flash.c: 58: PMCON1bits.WREN = 0;
  7029  072E  0031               	movlb	17	; select bank17
  7030  072F  1115               	bcf	21,2	;volsfr
  7031                           
  7032                           ;flash.c: 61: INTCONbits.GIE = 1;
  7033  0730  178B               	bsf	11,7	;volatile
  7034  0731  0008               	return
  7035  0732                     __end_of_flashWriteByte:	
  7036                           
  7037                           	psect	text29
  7038  0E58                     __ptext29:	
  7039 ;; *************** function _flashRealod *****************
  7040 ;; Defined at:
  7041 ;;		line 90 in file "flash.c"
  7042 ;; Parameters:    Size  Location     Type
  7043 ;;		None
  7044 ;; Auto vars:     Size  Location     Type
  7045 ;;  i               2   11[BANK0 ] unsigned int 
  7046 ;; Return value:  Size  Location     Type
  7047 ;;                  1    wreg      void 
  7048 ;; Registers used:
  7049 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7050 ;; Tracked objects:
  7051 ;;		On entry : 0/0
  7052 ;;		On exit  : 0/0
  7053 ;;		Unchanged: 0/0
  7054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7056 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7057 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7058 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7059 ;;Total ram usage:        3 bytes
  7060 ;; Hardware stack levels used:    1
  7061 ;; Hardware stack levels required when called:    8
  7062 ;; This function calls:
  7063 ;;		_flashReadByte
  7064 ;; This function is called by:
  7065 ;;		_main
  7066 ;; This function uses a non-reentrant model
  7067 ;;
  7068                           
  7069                           
  7070                           ;psect for function _flashRealod
  7071  0E58                     _flashRealod:	
  7072                           
  7073                           ;flash.c: 92: for (unsigned int i = 0; i < 32; i++){
  7074                           
  7075                           ;incstack = 0
  7076                           ; Regs used in _flashRealod: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7077  0E58  0020               	movlb	0	; select bank0
  7078  0E59  01AB               	clrf	flashRealod@i
  7079  0E5A  01AC               	clrf	flashRealod@i+1
  7080  0E5B                     L2:	
  7081  0E5B  3000               	movlw	0
  7082  0E5C  022C               	subwf	flashRealod@i+1,w
  7083  0E5D  3020               	movlw	32
  7084  0E5E  1903               	skipnz
  7085  0E5F  022B               	subwf	flashRealod@i,w
  7086  0E60  1803               	btfsc	3,0
  7087  0E61  0008               	return
  7088                           
  7089                           ;flash.c: 93: romHolder.array[i] = flashReadByte(i);
  7090  0E62  082C               	movf	flashRealod@i+1,w
  7091  0E63  00A2               	movwf	flashReadByte@offset+1
  7092  0E64  082B               	movf	flashRealod@i,w
  7093  0E65  00A1               	movwf	flashReadByte@offset
  7094  0E66  318F  27CE  318E   	fcall	_flashReadByte
  7095  0E69  0020               	movlb	0	; select bank0
  7096  0E6A  0821               	movf	?_flashReadByte,w
  7097  0E6B  00AA               	movwf	??_flashRealod
  7098  0E6C  082B               	movf	flashRealod@i,w
  7099  0E6D  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  7100  0E6E  0086               	movwf	6
  7101  0E6F  3001               	movlw	1	; select bank2/3
  7102  0E70  0087               	movwf	7
  7103  0E71  082A               	movf	??_flashRealod,w
  7104  0E72  0081               	movwf	1
  7105  0E73  3001               	movlw	1
  7106  0E74  07AB               	addwf	flashRealod@i,f
  7107  0E75  3000               	movlw	0
  7108  0E76  3DAC               	addwfc	flashRealod@i+1,f
  7109  0E77  2E5B               	goto	L2
  7110  0E78                     __end_of_flashRealod:	
  7111                           
  7112                           	psect	text30
  7113  0FCE                     __ptext30:	
  7114 ;; *************** function _flashReadByte *****************
  7115 ;; Defined at:
  7116 ;;		line 64 in file "flash.c"
  7117 ;; Parameters:    Size  Location     Type
  7118 ;;  offset          2    1[BANK0 ] unsigned int 
  7119 ;; Auto vars:     Size  Location     Type
  7120 ;;  address         2    8[BANK0 ] unsigned int 
  7121 ;;  result          2    6[BANK0 ] unsigned int 
  7122 ;; Return value:  Size  Location     Type
  7123 ;;                  2    1[BANK0 ] unsigned int 
  7124 ;; Registers used:
  7125 ;;		wreg, status,2, status,0
  7126 ;; Tracked objects:
  7127 ;;		On entry : 0/0
  7128 ;;		On exit  : 0/0
  7129 ;;		Unchanged: 0/0
  7130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7131 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7132 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7133 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7134 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7135 ;;Total ram usage:        9 bytes
  7136 ;; Hardware stack levels used:    1
  7137 ;; Hardware stack levels required when called:    7
  7138 ;; This function calls:
  7139 ;;		Nothing
  7140 ;; This function is called by:
  7141 ;;		_flashRealod
  7142 ;; This function uses a non-reentrant model
  7143 ;;
  7144                           
  7145                           
  7146                           ;psect for function _flashReadByte
  7147  0FCE                     _flashReadByte:	
  7148                           
  7149                           ;flash.c: 66: unsigned int address;;flash.c: 68: INTCONbits.GIE = 0;
  7150                           
  7151                           ;incstack = 0
  7152                           ; Regs used in _flashReadByte: [wreg+status,2+status,0]
  7153  0FCE  138B               	bcf	11,7	;volatile
  7154                           
  7155                           ;flash.c: 70: PMCON1 = 0x00;
  7156  0FCF  0031               	movlb	17	; select bank17
  7157  0FD0  0195               	clrf	21	;volsfr
  7158                           
  7159                           ;flash.c: 72: address = (0x2000U - 32) + offset;
  7160  0FD1  0020               	movlb	0	; select bank0
  7161  0FD2  0821               	movf	flashReadByte@offset,w
  7162  0FD3  3EE0               	addlw	224
  7163  0FD4  00A8               	movwf	flashReadByte@address
  7164  0FD5  301F               	movlw	31
  7165  0FD6  3D22               	addwfc	flashReadByte@offset+1,w
  7166  0FD7  00A9               	movwf	flashReadByte@address+1
  7167                           
  7168                           ;flash.c: 73: PMADRL = (char) (address >> 0);
  7169  0FD8  0828               	movf	flashReadByte@address,w
  7170  0FD9  0031               	movlb	17	; select bank17
  7171  0FDA  0091               	movwf	17	;volatile
  7172                           
  7173                           ;flash.c: 74: PMADRH = (char) (address >> 8);
  7174  0FDB  0020               	movlb	0	; select bank0
  7175  0FDC  0829               	movf	flashReadByte@address+1,w
  7176  0FDD  0031               	movlb	17	; select bank17
  7177  0FDE  0092               	movwf	18	;volatile
  7178                           
  7179                           ;flash.c: 76: PMCON1bits.RD = 1;
  7180  0FDF  1415               	bsf	21,0	;volsfr
  7181                           
  7182                           ;flash.c: 78: __nop();
  7183  0FE0  0000               	nop
  7184                           
  7185                           ;flash.c: 79: __nop();
  7186  0FE1  0000               	nop
  7187                           
  7188                           ;flash.c: 81: unsigned int result = 0;
  7189  0FE2  0020               	movlb	0	; select bank0
  7190  0FE3  01A6               	clrf	flashReadByte@result
  7191  0FE4  01A7               	clrf	flashReadByte@result+1
  7192                           
  7193                           ;flash.c: 82: result = PMDATL;
  7194  0FE5  0031               	movlb	17	; select bank17
  7195  0FE6  0813               	movf	19,w	;volatile
  7196  0FE7  0020               	movlb	0	; select bank0
  7197  0FE8  00A3               	movwf	??_flashReadByte
  7198  0FE9  01A4               	clrf	??_flashReadByte+1
  7199  0FEA  0823               	movf	??_flashReadByte,w
  7200  0FEB  00A6               	movwf	flashReadByte@result
  7201  0FEC  0824               	movf	??_flashReadByte+1,w
  7202  0FED  00A7               	movwf	flashReadByte@result+1
  7203                           
  7204                           ;flash.c: 83: result|= ( (unsigned) (PMDATH) << 8);
  7205  0FEE  0031               	movlb	17	; select bank17
  7206  0FEF  0814               	movf	20,w	;volatile
  7207  0FF0  0020               	movlb	0	; select bank0
  7208  0FF1  00A3               	movwf	??_flashReadByte
  7209  0FF2  01A4               	clrf	??_flashReadByte+1
  7210  0FF3  0823               	movf	??_flashReadByte,w
  7211  0FF4  00A4               	movwf	??_flashReadByte+1
  7212  0FF5  01A3               	clrf	??_flashReadByte
  7213  0FF6  0823               	movf	??_flashReadByte,w
  7214  0FF7  04A6               	iorwf	flashReadByte@result,f
  7215  0FF8  0824               	movf	??_flashReadByte+1,w
  7216  0FF9  04A7               	iorwf	flashReadByte@result+1,f
  7217                           
  7218                           ;flash.c: 85: INTCONbits.GIE = 1;
  7219  0FFA  178B               	bsf	11,7	;volatile
  7220                           
  7221                           ;flash.c: 87: return result;
  7222  0FFB  0827               	movf	flashReadByte@result+1,w
  7223  0FFC  00A2               	movwf	?_flashReadByte+1
  7224  0FFD  0826               	movf	flashReadByte@result,w
  7225  0FFE  00A1               	movwf	?_flashReadByte
  7226  0FFF  0008               	return
  7227  1000                     __end_of_flashReadByte:	
  7228                           
  7229                           	psect	intentry
  7230  0004                     __pintentry:	
  7231 ;; *************** function _ISR *****************
  7232 ;; Defined at:
  7233 ;;		line 15 in file "main.c"
  7234 ;; Parameters:    Size  Location     Type
  7235 ;;		None
  7236 ;; Auto vars:     Size  Location     Type
  7237 ;;		None
  7238 ;; Return value:  Size  Location     Type
  7239 ;;                  1    wreg      void 
  7240 ;; Registers used:
  7241 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7242 ;; Tracked objects:
  7243 ;;		On entry : 0/0
  7244 ;;		On exit  : 0/0
  7245 ;;		Unchanged: 0/0
  7246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7250 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7251 ;;Total ram usage:        0 bytes
  7252 ;; Hardware stack levels used:    1
  7253 ;; Hardware stack levels required when called:    6
  7254 ;; This function calls:
  7255 ;;		_nrf24l01ISR
  7256 ;; This function is called by:
  7257 ;;		Interrupt level 1
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261  0004                     _ISR:	
  7262                           
  7263                           ;incstack = 0
  7264  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7265                           
  7266                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7267  0005  3180               	pagesel	$
  7268                           
  7269                           ;main.c: 17: if (PIR0bits.INTF){
  7270  0006  0020               	movlb	0	; select bank0
  7271  0007  1C10               	btfss	16,0	;volatile
  7272  0008  280D               	goto	i1l215
  7273                           
  7274                           ;main.c: 18: nrf24l01ISR();
  7275  0009  3185  2550         	fcall	_nrf24l01ISR
  7276                           
  7277                           ;main.c: 19: PIR0bits.INTF = 0;
  7278  000B  0020               	movlb	0	; select bank0
  7279  000C  1010               	bcf	16,0	;volatile
  7280  000D                     i1l215:	
  7281  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7282  000E  0009               	retfie
  7283  000F                     __end_of_ISR:	
  7284                           
  7285                           	psect	text32
  7286  0550                     __ptext32:	
  7287 ;; *************** function _nrf24l01ISR *****************
  7288 ;; Defined at:
  7289 ;;		line 246 in file "nrf24l01.c"
  7290 ;; Parameters:    Size  Location     Type
  7291 ;;		None
  7292 ;; Auto vars:     Size  Location     Type
  7293 ;;  status          1    0[BANK0 ] struct .
  7294 ;; Return value:  Size  Location     Type
  7295 ;;                  1    wreg      void 
  7296 ;; Registers used:
  7297 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7298 ;; Tracked objects:
  7299 ;;		On entry : 0/0
  7300 ;;		On exit  : 0/0
  7301 ;;		Unchanged: 0/0
  7302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7304 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7305 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7306 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7307 ;;Total ram usage:        2 bytes
  7308 ;; Hardware stack levels used:    1
  7309 ;; Hardware stack levels required when called:    5
  7310 ;; This function calls:
  7311 ;;		_exception
  7312 ;;		_nrf24l01CheckACK
  7313 ;;		_nrf24l01ReceivePacket
  7314 ;;		i1_nrf24l01Send
  7315 ;;		i1_nrf24l01SetRXMode
  7316 ;; This function is called by:
  7317 ;;		_ISR
  7318 ;; This function uses a non-reentrant model
  7319 ;;
  7320                           
  7321                           
  7322                           ;psect for function _nrf24l01ISR
  7323  0550                     _nrf24l01ISR:	
  7324                           
  7325                           ;nrf24l01.c: 248: n_STATUS_t status;;nrf24l01.c: 249: status.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x07, 0);
  7326                           
  7327                           ;incstack = 0
  7328                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7329  0550  01F1               	clrf	i1nrf24l01Send@data
  7330  0551  3007               	movlw	7
  7331  0552  318D  25E6  3185   	fcall	i1_nrf24l01Send
  7332  0555  00FD               	movwf	??_nrf24l01ISR
  7333  0556  087D               	movf	??_nrf24l01ISR,w
  7334  0557  0020               	movlb	0	; select bank0
  7335  0558  00A0               	movwf	nrf24l01ISR@status
  7336                           
  7337                           ;nrf24l01.c: 254: };nrf24l01.c: 257: if (status.byte == 0xFF){
  7338  0559  0A20               	incf	nrf24l01ISR@status,w
  7339  055A  1D03               	btfss	3,2
  7340  055B  2D60               	goto	i1l3127
  7341                           
  7342                           ;nrf24l01.c: 258: exception(2);
  7343  055C  3002               	movlw	2
  7344  055D  318D  2582  3185   	fcall	_exception
  7345  0560                     i1l3127:	
  7346                           
  7347                           ;nrf24l01.c: 259: };nrf24l01.c: 261: if (status.TX_DS){
  7348  0560  0020               	movlb	0	; select bank0
  7349  0561  1EA0               	btfss	nrf24l01ISR@status,5
  7350  0562  2D6F               	goto	i1l3135
  7351                           
  7352                           ;nrf24l01.c: 264: nrf24l01.TXBusy = 0;
  7353  0563  105B               	bcf	_nrf24l01,0	;volatile
  7354                           
  7355                           ;nrf24l01.c: 267: if (!nrf24l01.RXMode){
  7356  0564  195B               	btfsc	_nrf24l01,2	;volatile
  7357  0565  2D6F               	goto	i1l3135
  7358                           
  7359                           ;nrf24l01.c: 268: if (TXPacket->packetData.ACKRequest){
  7360  0566  0859               	movf	_TXPacket,w
  7361  0567  0086               	movwf	6
  7362  0568  0187               	clrf	7
  7363  0569  1D01               	btfss	1,2
  7364  056A  2D6F               	goto	i1l3135
  7365                           
  7366                           ;nrf24l01.c: 271: nrf24l01SetRXMode(1);
  7367  056B  3001               	movlw	1
  7368  056C  3187  276D  3185   	fcall	i1_nrf24l01SetRXMode
  7369  056F                     i1l3135:	
  7370                           
  7371                           ;nrf24l01.c: 272: };nrf24l01.c: 273: };nrf24l01.c: 274: };nrf24l01.c: 277: if (status.RX
      +                          _DR){
  7372  056F  0020               	movlb	0	; select bank0
  7373  0570  1F20               	btfss	nrf24l01ISR@status,6
  7374  0571  2D94               	goto	i1l3149
  7375                           
  7376                           ;nrf24l01.c: 280: if (!nrf24l01.RXPending){
  7377  0572  18DB               	btfsc	_nrf24l01,1	;volatile
  7378  0573  2D93               	goto	i1l365
  7379                           
  7380                           ;nrf24l01.c: 283: nrf24l01.RXPending = 1;
  7381  0574  14DB               	bsf	_nrf24l01,1	;volatile
  7382                           
  7383                           ;nrf24l01.c: 285: nrf24l01ReceivePacket();
  7384  0575  3185  259D  3185   	fcall	_nrf24l01ReceivePacket
  7385                           
  7386                           ;nrf24l01.c: 288: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  7387  0578  01F1               	clrf	i1nrf24l01Send@data
  7388  0579  3009               	movlw	9
  7389  057A  318D  25E6  3185   	fcall	i1_nrf24l01Send
  7390  057D  00FD               	movwf	??_nrf24l01ISR
  7391  057E  0022               	movlb	2	; select bank2
  7392  057F  0840               	movf	_RXPacket^(0+256),w
  7393  0580  067D               	xorwf	??_nrf24l01ISR,w
  7394  0581  39FE               	andlw	-2
  7395  0582  067D               	xorwf	??_nrf24l01ISR,w
  7396  0583  00C0               	movwf	_RXPacket^(0+256)
  7397                           
  7398                           ;nrf24l01.c: 291: RXPacket.packetData.Pipe = status.RX_P_NO;
  7399  0584  0020               	movlb	0	; select bank0
  7400  0585  0C20               	rrf	nrf24l01ISR@status,w
  7401  0586  3907               	andlw	7
  7402  0587  00FD               	movwf	??_nrf24l01ISR
  7403  0588  0EFD               	swapf	??_nrf24l01ISR,f
  7404  0589  0022               	movlb	2	; select bank2
  7405  058A  0840               	movf	_RXPacket^(0+256),w
  7406  058B  067D               	xorwf	??_nrf24l01ISR,w
  7407  058C  398F               	andlw	-113
  7408  058D  067D               	xorwf	??_nrf24l01ISR,w
  7409  058E  00C0               	movwf	_RXPacket^(0+256)
  7410                           
  7411                           ;nrf24l01.c: 293: nrf24l01CheckACK();
  7412  058F  318E  2638  3185   	fcall	_nrf24l01CheckACK
  7413                           
  7414                           ;nrf24l01.c: 294: }
  7415  0592  2D94               	goto	i1l3149
  7416  0593                     i1l365:	
  7417                           
  7418                           ;nrf24l01.c: 297: else{;nrf24l01.c: 300: status.RX_DR = 0;
  7419  0593  1320               	bcf	nrf24l01ISR@status,6
  7420  0594                     i1l3149:	
  7421                           
  7422                           ;nrf24l01.c: 301: };nrf24l01.c: 303: };nrf24l01.c: 306: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.byte);
  7423  0594  0020               	movlb	0	; select bank0
  7424  0595  0820               	movf	nrf24l01ISR@status,w
  7425  0596  00FD               	movwf	??_nrf24l01ISR
  7426  0597  087D               	movf	??_nrf24l01ISR,w
  7427  0598  00F1               	movwf	i1nrf24l01Send@data
  7428  0599  3027               	movlw	39
  7429  059A  318D  25E6         	fcall	i1_nrf24l01Send
  7430  059C  0008               	return
  7431  059D                     __end_of_nrf24l01ISR:	
  7432                           
  7433                           	psect	text33
  7434  059D                     __ptext33:	
  7435 ;; *************** function _nrf24l01ReceivePacket *****************
  7436 ;; Defined at:
  7437 ;;		line 135 in file "nrf24l01.c"
  7438 ;; Parameters:    Size  Location     Type
  7439 ;;		None
  7440 ;; Auto vars:     Size  Location     Type
  7441 ;;  i               1   10[COMMON] unsigned char 
  7442 ;;  width           1    9[COMMON] unsigned char 
  7443 ;; Return value:  Size  Location     Type
  7444 ;;                  1    wreg      void 
  7445 ;; Registers used:
  7446 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7447 ;; Tracked objects:
  7448 ;;		On entry : 0/0
  7449 ;;		On exit  : 0/0
  7450 ;;		Unchanged: 0/0
  7451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7453 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7454 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7455 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7456 ;;Total ram usage:        3 bytes
  7457 ;; Hardware stack levels used:    1
  7458 ;; Hardware stack levels required when called:    3
  7459 ;; This function calls:
  7460 ;;		_nrf24l01CEHigh
  7461 ;;		_nrf24l01CELow
  7462 ;;		_nrf24l01SPIEnd
  7463 ;;		_nrf24l01SPISend
  7464 ;;		_nrf24l01SPIStart
  7465 ;;		i1_memset
  7466 ;;		i1_nrf24l01Send
  7467 ;; This function is called by:
  7468 ;;		_nrf24l01ISR
  7469 ;; This function uses a non-reentrant model
  7470 ;;
  7471                           
  7472                           
  7473                           ;psect for function _nrf24l01ReceivePacket
  7474  059D                     _nrf24l01ReceivePacket:	
  7475                           
  7476                           ;nrf24l01.c: 138: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  7477                           
  7478                           ;incstack = 0
  7479                           ; Regs used in _nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7480  059D  3041               	movlw	low (_RXPacket+1)
  7481  059E  00F0               	movwf	i1memset@p1
  7482  059F  3001               	movlw	high (_RXPacket+1)
  7483  05A0  00F1               	movwf	i1memset@p1+1
  7484  05A1  3000               	movlw	0
  7485  05A2  00F2               	movwf	i1memset@c
  7486  05A3  00F3               	movwf	i1memset@c+1
  7487  05A4  3020               	movlw	32
  7488  05A5  00F4               	movwf	i1memset@n
  7489  05A6  3000               	movlw	0
  7490  05A7  00F5               	movwf	i1memset@n+1
  7491  05A8  318D  259A  3185   	fcall	i1_memset
  7492                           
  7493                           ;nrf24l01.c: 139: RXPacket.packetData.byte = 0x00;
  7494  05AB  0022               	movlb	2	; select bank2
  7495  05AC  01C0               	clrf	_RXPacket^(0+256)
  7496                           
  7497                           ;nrf24l01.c: 142: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  7498  05AD  01F1               	clrf	i1nrf24l01Send@data
  7499  05AE  3060               	movlw	96
  7500  05AF  318D  25E6  3185   	fcall	i1_nrf24l01Send
  7501  05B2  00F8               	movwf	??_nrf24l01ReceivePacket
  7502  05B3  0878               	movf	??_nrf24l01ReceivePacket,w
  7503  05B4  00F9               	movwf	nrf24l01ReceivePacket@width
  7504                           
  7505                           ;nrf24l01.c: 143: unsigned char i = 0;
  7506  05B5  01FA               	clrf	nrf24l01ReceivePacket@i
  7507                           
  7508                           ;nrf24l01.c: 146: nrf24l01CELow();
  7509  05B6  318D  2517  3185   	fcall	_nrf24l01CELow
  7510                           
  7511                           ;nrf24l01.c: 149: nrf24l01SPIStart();
  7512  05B9  318D  2535  3185   	fcall	_nrf24l01SPIStart
  7513                           
  7514                           ;nrf24l01.c: 152: nrf24l01SPISend((unsigned) 0b01100001);
  7515  05BC  3061               	movlw	97
  7516  05BD  318D  253D  3185   	fcall	_nrf24l01SPISend
  7517                           
  7518                           ;nrf24l01.c: 155: RXPacket.packetData.byte = nrf24l01SPISend(0);
  7519  05C0  3000               	movlw	0
  7520  05C1  318D  253D  3185   	fcall	_nrf24l01SPISend
  7521  05C4  00F8               	movwf	??_nrf24l01ReceivePacket
  7522  05C5  0878               	movf	??_nrf24l01ReceivePacket,w
  7523  05C6  0022               	movlb	2	; select bank2
  7524  05C7  00C0               	movwf	_RXPacket^(0+256)
  7525                           
  7526                           ;nrf24l01.c: 156: width--;
  7527  05C8  3001               	movlw	1
  7528  05C9  02F9               	subwf	nrf24l01ReceivePacket@width,f
  7529                           
  7530                           ;nrf24l01.c: 158: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
  7531  05CA  01FA               	clrf	nrf24l01ReceivePacket@i
  7532  05CB  2DDC               	goto	i1l3111
  7533  05CC                     i1l3107:	
  7534                           
  7535                           ;nrf24l01.c: 160: RXPacket.Message[i] = nrf24l01SPISend(0);
  7536  05CC  3000               	movlw	0
  7537  05CD  318D  253D  3185   	fcall	_nrf24l01SPISend
  7538  05D0  00F8               	movwf	??_nrf24l01ReceivePacket
  7539  05D1  087A               	movf	nrf24l01ReceivePacket@i,w
  7540  05D2  3E41               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  7541  05D3  0086               	movwf	6
  7542  05D4  3001               	movlw	1	; select bank2/3
  7543  05D5  0087               	movwf	7
  7544  05D6  0878               	movf	??_nrf24l01ReceivePacket,w
  7545  05D7  0081               	movwf	1
  7546  05D8  3001               	movlw	1
  7547  05D9  00F8               	movwf	??_nrf24l01ReceivePacket
  7548  05DA  0878               	movf	??_nrf24l01ReceivePacket,w
  7549  05DB  07FA               	addwf	nrf24l01ReceivePacket@i,f
  7550  05DC                     i1l3111:	
  7551  05DC  0879               	movf	nrf24l01ReceivePacket@width,w
  7552  05DD  027A               	subwf	nrf24l01ReceivePacket@i,w
  7553  05DE  1803               	skipnc
  7554  05DF  2DE4               	goto	i1l3115
  7555  05E0  3020               	movlw	32
  7556  05E1  027A               	subwf	nrf24l01ReceivePacket@i,w
  7557  05E2  1C03               	skipc
  7558  05E3  2DCC               	goto	i1l3107
  7559  05E4                     i1l3115:	
  7560                           
  7561                           ;nrf24l01.c: 161: };nrf24l01.c: 164: nrf24l01SPIEnd();
  7562  05E4  318D  2526  3185   	fcall	_nrf24l01SPIEnd
  7563                           
  7564                           ;nrf24l01.c: 167: nrf24l01CEHigh();
  7565  05E7  318D  2514         	fcall	_nrf24l01CEHigh
  7566  05E9  0008               	return
  7567  05EA                     __end_of_nrf24l01ReceivePacket:	
  7568                           
  7569                           	psect	text34
  7570  0D9A                     __ptext34:	
  7571 ;; *************** function i1_memset *****************
  7572 ;; Defined at:
  7573 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  7574 ;; Parameters:    Size  Location     Type
  7575 ;;  p1              2    0[COMMON] PTR void 
  7576 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  7577 ;;  c               2    2[COMMON] int 
  7578 ;;  n               2    4[COMMON] unsigned int 
  7579 ;; Auto vars:     Size  Location     Type
  7580 ;;  memset          2    6[COMMON] PTR unsigned char 
  7581 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  7582 ;; Return value:  Size  Location     Type
  7583 ;;                  1    wreg      PTR void 
  7584 ;; Registers used:
  7585 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7586 ;; Tracked objects:
  7587 ;;		On entry : 0/0
  7588 ;;		On exit  : 0/0
  7589 ;;		Unchanged: 0/0
  7590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7591 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7592 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7594 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7595 ;;Total ram usage:        8 bytes
  7596 ;; Hardware stack levels used:    1
  7597 ;; This function calls:
  7598 ;;		Nothing
  7599 ;; This function is called by:
  7600 ;;		_nrf24l01ReceivePacket
  7601 ;; This function uses a non-reentrant model
  7602 ;;
  7603                           
  7604                           
  7605                           ;psect for function i1_memset
  7606  0D9A                     i1_memset:	
  7607                           
  7608                           ;incstack = 0
  7609                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7610  0D9A  0871               	movf	i1memset@p1+1,w
  7611  0D9B  00F7               	movwf	i1memset@p+1
  7612  0D9C  0870               	movf	i1memset@p1,w
  7613  0D9D  00F6               	movwf	i1memset@p
  7614  0D9E                     i1l3075:	
  7615  0D9E  3001               	movlw	1
  7616  0D9F  02F4               	subwf	i1memset@n,f
  7617  0DA0  3000               	movlw	0
  7618  0DA1  3BF5               	subwfb	i1memset@n+1,f
  7619  0DA2  0A74               	incf	i1memset@n,w
  7620  0DA3  1903               	btfsc	3,2
  7621  0DA4  0A75               	incf	i1memset@n+1,w
  7622  0DA5  1903               	btfsc	3,2
  7623  0DA6  0008               	return
  7624  0DA7  0876               	movf	i1memset@p,w
  7625  0DA8  0086               	movwf	6
  7626  0DA9  0877               	movf	i1memset@p+1,w
  7627  0DAA  0087               	movwf	7
  7628  0DAB  0872               	movf	i1memset@c,w
  7629  0DAC  0081               	movwf	1
  7630  0DAD  3001               	movlw	1
  7631  0DAE  07F6               	addwf	i1memset@p,f
  7632  0DAF  3000               	movlw	0
  7633  0DB0  3DF7               	addwfc	i1memset@p+1,f
  7634  0DB1  2D9E               	goto	i1l3075
  7635  0DB2                     __end_ofi1_memset:	
  7636                           ;	Return value of i1_memset is never used
  7637                           
  7638                           
  7639                           	psect	text35
  7640  0E38                     __ptext35:	
  7641 ;; *************** function _nrf24l01CheckACK *****************
  7642 ;; Defined at:
  7643 ;;		line 98 in file "nrf24l01.c"
  7644 ;; Parameters:    Size  Location     Type
  7645 ;;		None
  7646 ;; Auto vars:     Size  Location     Type
  7647 ;;		None
  7648 ;; Return value:  Size  Location     Type
  7649 ;;                  1    wreg      void 
  7650 ;; Registers used:
  7651 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7652 ;; Tracked objects:
  7653 ;;		On entry : 0/0
  7654 ;;		On exit  : 0/0
  7655 ;;		Unchanged: 0/0
  7656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7659 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7660 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7661 ;;Total ram usage:        1 bytes
  7662 ;; Hardware stack levels used:    1
  7663 ;; Hardware stack levels required when called:    4
  7664 ;; This function calls:
  7665 ;;		_strcmp
  7666 ;;		i1_nrf24l01SetRXMode
  7667 ;; This function is called by:
  7668 ;;		_nrf24l01ISR
  7669 ;; This function uses a non-reentrant model
  7670 ;;
  7671                           
  7672                           
  7673                           ;psect for function _nrf24l01CheckACK
  7674  0E38                     _nrf24l01CheckACK:	
  7675                           
  7676                           ;nrf24l01.c: 102: if (!RXPacket.packetData.IsACK){
  7677                           
  7678                           ;incstack = 0
  7679                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7680  0E38  0022               	movlb	2	; select bank2
  7681  0E39  1DC0               	btfss	_RXPacket^(0+256),3
  7682  0E3A  0008               	return
  7683                           
  7684                           ;nrf24l01.c: 104: };nrf24l01.c: 107: nrf24l01.RXPending = 0;
  7685                           
  7686                           ;nrf24l01.c: 103: return;
  7687  0E3B  0020               	movlb	0	; select bank0
  7688  0E3C  10DB               	bcf	_nrf24l01,1	;volatile
  7689                           
  7690                           ;nrf24l01.c: 110: if (!TXPacket->packetData.ACKRequest){
  7691  0E3D  0859               	movf	_TXPacket,w
  7692  0E3E  0086               	movwf	6
  7693  0E3F  0187               	clrf	7
  7694  0E40  1D01               	btfss	1,2
  7695  0E41  0008               	return
  7696                           
  7697                           ;nrf24l01.c: 112: };nrf24l01.c: 115: if (strcmp(TXPacket->Message, RXPacket.Message) != 
      +                          0){
  7698                           
  7699                           ;nrf24l01.c: 111: return;
  7700  0E42  3041               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  7701  0E43  00F7               	movwf	??_nrf24l01CheckACK
  7702  0E44  0877               	movf	??_nrf24l01CheckACK,w
  7703  0E45  00F0               	movwf	strcmp@s2
  7704  0E46  0859               	movf	_TXPacket,w
  7705  0E47  3E01               	addlw	1
  7706  0E48  318F  2722  318E   	fcall	_strcmp
  7707  0E4B  0870               	movf	?_strcmp,w
  7708  0E4C  0471               	iorwf	?_strcmp+1,w
  7709  0E4D  1D03               	btfss	3,2
  7710  0E4E  0008               	return
  7711                           
  7712                           ;nrf24l01.c: 117: };nrf24l01.c: 124: TXPacket->packetData.ACKRequest = 0;
  7713                           
  7714                           ;nrf24l01.c: 116: return;
  7715  0E4F  0020               	movlb	0	; select bank0
  7716  0E50  0859               	movf	_TXPacket,w
  7717  0E51  0086               	movwf	6
  7718  0E52  0187               	clrf	7
  7719  0E53  1101               	bcf	1,2
  7720                           
  7721                           ;nrf24l01.c: 127: nrf24l01SetRXMode(0);
  7722  0E54  3000               	movlw	0
  7723  0E55  3187  276D         	fcall	i1_nrf24l01SetRXMode
  7724  0E57  0008               	return
  7725  0E58                     __end_of_nrf24l01CheckACK:	
  7726                           
  7727                           	psect	text36
  7728  076D                     __ptext36:	
  7729 ;; *************** function i1_nrf24l01SetRXMode *****************
  7730 ;; Defined at:
  7731 ;;		line 54 in file "nrf24l01.c"
  7732 ;; Parameters:    Size  Location     Type
  7733 ;;  rxMode          1    wreg     unsigned char 
  7734 ;; Auto vars:     Size  Location     Type
  7735 ;;  rxMode          1    6[COMMON] unsigned char 
  7736 ;;  nrf24l01SetR    1    5[COMMON] struct .
  7737 ;; Return value:  Size  Location     Type
  7738 ;;                  1    wreg      void 
  7739 ;; Registers used:
  7740 ;;		wreg, status,2, status,0, pclath, cstack
  7741 ;; Tracked objects:
  7742 ;;		On entry : 0/0
  7743 ;;		On exit  : 0/0
  7744 ;;		Unchanged: 0/0
  7745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7747 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7748 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7749 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7750 ;;Total ram usage:        3 bytes
  7751 ;; Hardware stack levels used:    1
  7752 ;; Hardware stack levels required when called:    3
  7753 ;; This function calls:
  7754 ;;		_nrf24l01CEHigh
  7755 ;;		_nrf24l01CELow
  7756 ;;		i1_nrf24l01Send
  7757 ;; This function is called by:
  7758 ;;		_nrf24l01CheckACK
  7759 ;;		_nrf24l01ISR
  7760 ;; This function uses a non-reentrant model
  7761 ;;
  7762                           
  7763                           
  7764                           ;psect for function i1_nrf24l01SetRXMode
  7765  076D                     i1_nrf24l01SetRXMode:	
  7766                           
  7767                           ;incstack = 0
  7768                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  7769                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
  7770  076D  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
  7771                           
  7772                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  7773  076E  01F1               	clrf	i1nrf24l01Send@data
  7774  076F  3000               	movlw	0
  7775  0770  318D  25E6  3187   	fcall	i1_nrf24l01Send
  7776  0773  00F4               	movwf	??i1_nrf24l01SetRXMode
  7777  0774  0874               	movf	??i1_nrf24l01SetRXMode,w
  7778  0775  00F5               	movwf	i1nrf24l01SetRXMode@config
  7779                           
  7780                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  7781  0776  0875               	movf	i1nrf24l01SetRXMode@config,w
  7782  0777  3901               	andlw	1
  7783  0778  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
  7784  0779  1903               	skipnz
  7785  077A  2F9D               	goto	i1l2371
  7786                           
  7787                           ;nrf24l01.c: 65: nrf24l01CELow();
  7788  077B  318D  2517  3187   	fcall	_nrf24l01CELow
  7789                           
  7790                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7791  077E  30A0               	movlw	160
  7792  077F                     u206_27:	
  7793  077F  3200               	nop2
  7794  0780  0B89               	decfsz	9,f
  7795  0781  2F7F               	goto	u206_27
  7796                           
  7797                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  7798  0782  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  7799  0783  3901               	andlw	1
  7800  0784  1075               	bcf	i1nrf24l01SetRXMode@config,0
  7801  0785  1D03               	skipz
  7802  0786  1475               	bsf	i1nrf24l01SetRXMode@config,0
  7803                           
  7804                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  7805  0787  0875               	movf	i1nrf24l01SetRXMode@config,w
  7806  0788  00F4               	movwf	??i1_nrf24l01SetRXMode
  7807  0789  0874               	movf	??i1_nrf24l01SetRXMode,w
  7808  078A  00F1               	movwf	i1nrf24l01Send@data
  7809  078B  3020               	movlw	32
  7810  078C  318D  25E6  3187   	fcall	i1_nrf24l01Send
  7811                           
  7812                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7813  078F  30A0               	movlw	160
  7814  0790                     u207_27:	
  7815  0790  3200               	nop2
  7816  0791  0B89               	decfsz	9,f
  7817  0792  2F90               	goto	u207_27
  7818                           
  7819                           ;nrf24l01.c: 76: if (rxMode){
  7820  0793  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  7821  0794  1903               	btfsc	3,2
  7822  0795  2F9D               	goto	i1l2371
  7823                           
  7824                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  7825  0796  318D  2514  3187   	fcall	_nrf24l01CEHigh
  7826                           
  7827                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7828  0799  30A0               	movlw	160
  7829  079A                     u208_27:	
  7830  079A  3200               	nop2
  7831  079B  0B89               	decfsz	9,f
  7832  079C  2F9A               	goto	u208_27
  7833  079D                     i1l2371:	
  7834                           
  7835                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  7836  079D  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  7837  079E  3901               	andlw	1
  7838  079F  0020               	movlb	0	; select bank0
  7839  07A0  115B               	bcf	_nrf24l01,2	;volatile
  7840  07A1  1D03               	skipz
  7841  07A2  155B               	bsf	_nrf24l01,2	;volatile
  7842  07A3  0008               	return
  7843  07A4                     __end_ofi1_nrf24l01SetRXMode:	
  7844                           
  7845                           	psect	text37
  7846  0DE6                     __ptext37:	
  7847 ;; *************** function i1_nrf24l01Send *****************
  7848 ;; Defined at:
  7849 ;;		line 9 in file "nrf24l01.c"
  7850 ;; Parameters:    Size  Location     Type
  7851 ;;  command         1    wreg     unsigned char 
  7852 ;;  data            1    1[COMMON] unsigned char 
  7853 ;; Auto vars:     Size  Location     Type
  7854 ;;  command         1    3[COMMON] unsigned char 
  7855 ;; Return value:  Size  Location     Type
  7856 ;;                  1    wreg      unsigned char 
  7857 ;; Registers used:
  7858 ;;		wreg, status,2, status,0, pclath, cstack
  7859 ;; Tracked objects:
  7860 ;;		On entry : 0/0
  7861 ;;		On exit  : 0/0
  7862 ;;		Unchanged: 0/0
  7863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7864 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7865 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7866 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7867 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7868 ;;Total ram usage:        3 bytes
  7869 ;; Hardware stack levels used:    1
  7870 ;; Hardware stack levels required when called:    2
  7871 ;; This function calls:
  7872 ;;		_enableInterrupts
  7873 ;;		_nrf24l01SPIEnd
  7874 ;;		_nrf24l01SPISend
  7875 ;;		_nrf24l01SPIStart
  7876 ;; This function is called by:
  7877 ;;		_nrf24l01ReceivePacket
  7878 ;;		_nrf24l01ISR
  7879 ;;		i1_nrf24l01SetRXMode
  7880 ;; This function uses a non-reentrant model
  7881 ;;
  7882                           
  7883                           
  7884                           ;psect for function i1_nrf24l01Send
  7885  0DE6                     i1_nrf24l01Send:	
  7886                           
  7887                           ;incstack = 0
  7888                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  7889                           ;i1nrf24l01Send@command stored from wreg
  7890  0DE6  00F3               	movwf	i1nrf24l01Send@command
  7891                           
  7892                           ;nrf24l01.c: 12: enableInterrupts(0);
  7893  0DE7  3000               	movlw	0
  7894  0DE8  318D  252D  318D   	fcall	_enableInterrupts
  7895                           
  7896                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  7897  0DEB  318D  2535  318D   	fcall	_nrf24l01SPIStart
  7898                           
  7899                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  7900  0DEE  0873               	movf	i1nrf24l01Send@command,w
  7901  0DEF  318D  253D  318D   	fcall	_nrf24l01SPISend
  7902                           
  7903                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  7904  0DF2  0871               	movf	i1nrf24l01Send@data,w
  7905  0DF3  318D  253D  318D   	fcall	_nrf24l01SPISend
  7906  0DF6  00F2               	movwf	??i1_nrf24l01Send
  7907  0DF7  0872               	movf	??i1_nrf24l01Send,w
  7908  0DF8  00F1               	movwf	i1nrf24l01Send@data
  7909                           
  7910                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  7911  0DF9  318D  2526  318D   	fcall	_nrf24l01SPIEnd
  7912                           
  7913                           ;nrf24l01.c: 27: enableInterrupts(1);
  7914  0DFC  3001               	movlw	1
  7915  0DFD  318D  252D         	fcall	_enableInterrupts
  7916                           
  7917                           ;nrf24l01.c: 29: return data;
  7918  0DFF  0871               	movf	i1nrf24l01Send@data,w
  7919  0E00  0008               	return
  7920  0E01                     __end_ofi1_nrf24l01Send:	
  7921                           
  7922                           	psect	text38
  7923  0D35                     __ptext38:	
  7924 ;; *************** function _nrf24l01SPIStart *****************
  7925 ;; Defined at:
  7926 ;;		line 65 in file "interface.c"
  7927 ;; Parameters:    Size  Location     Type
  7928 ;;		None
  7929 ;; Auto vars:     Size  Location     Type
  7930 ;;		None
  7931 ;; Return value:  Size  Location     Type
  7932 ;;                  1    wreg      void 
  7933 ;; Registers used:
  7934 ;;		wreg, status,2, status,0, pclath, cstack
  7935 ;; Tracked objects:
  7936 ;;		On entry : 0/0
  7937 ;;		On exit  : 0/0
  7938 ;;		Unchanged: 0/0
  7939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7944 ;;Total ram usage:        0 bytes
  7945 ;; Hardware stack levels used:    1
  7946 ;; Hardware stack levels required when called:    8
  7947 ;; This function calls:
  7948 ;;		_nrf24l01CSLow
  7949 ;; This function is called by:
  7950 ;;		_nrf24l01Send
  7951 ;;		_nrf24l01ReceivePacket
  7952 ;;		_nrf24l01SendPacket
  7953 ;;		_nrf24l01SetTXPipe
  7954 ;;		_nrf24l01InitRegisters
  7955 ;;		i1_nrf24l01Send
  7956 ;; This function uses a non-reentrant model
  7957 ;;
  7958                           
  7959                           
  7960                           ;psect for function _nrf24l01SPIStart
  7961  0D35                     _nrf24l01SPIStart:	
  7962                           
  7963                           ;interface.c: 66: nrf24l01CSLow();
  7964                           
  7965                           ;incstack = 0
  7966 ;; hardware stack exceeded
  7967                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
  7968  0D35  318D  251D  318D   	fcall	_nrf24l01CSLow
  7969                           
  7970                           ;interface.c: 67: _delay((unsigned long)((10)*(16000000/4000000.0)));
  7971  0D38  300D               	movlw	13
  7972  0D39                     u209_27:	
  7973  0D39  0B89               	decfsz	9,f
  7974  0D3A  2D39               	goto	u209_27
  7975  0D3B  0000               	nop
  7976  0D3C  0008               	return
  7977  0D3D                     __end_of_nrf24l01SPIStart:	
  7978                           
  7979                           	psect	text39
  7980  0D1D                     __ptext39:	
  7981 ;; *************** function _nrf24l01CSLow *****************
  7982 ;; Defined at:
  7983 ;;		line 18 in file "interface.c"
  7984 ;; Parameters:    Size  Location     Type
  7985 ;;		None
  7986 ;; Auto vars:     Size  Location     Type
  7987 ;;		None
  7988 ;; Return value:  Size  Location     Type
  7989 ;;                  1    wreg      void 
  7990 ;; Registers used:
  7991 ;;		None
  7992 ;; Tracked objects:
  7993 ;;		On entry : 0/0
  7994 ;;		On exit  : 0/0
  7995 ;;		Unchanged: 0/0
  7996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8001 ;;Total ram usage:        0 bytes
  8002 ;; Hardware stack levels used:    1
  8003 ;; Hardware stack levels required when called:    7
  8004 ;; This function calls:
  8005 ;;		Nothing
  8006 ;; This function is called by:
  8007 ;;		_nrf24l01SPIStart
  8008 ;; This function uses a non-reentrant model
  8009 ;;
  8010                           
  8011                           
  8012                           ;psect for function _nrf24l01CSLow
  8013  0D1D                     _nrf24l01CSLow:	
  8014                           
  8015                           ;interface.c: 19: PORTAbits.RA1 = 0;
  8016                           
  8017                           ;incstack = 0
  8018 ;; hardware stack exceeded
  8019                           ; Regs used in _nrf24l01CSLow: []
  8020  0D1D  0020               	movlb	0	; select bank0
  8021  0D1E  108C               	bcf	12,1	;volatile
  8022  0D1F  0008               	return
  8023  0D20                     __end_of_nrf24l01CSLow:	
  8024                           
  8025                           	psect	text40
  8026  0D3D                     __ptext40:	
  8027 ;; *************** function _nrf24l01SPISend *****************
  8028 ;; Defined at:
  8029 ;;		line 52 in file "interface.c"
  8030 ;; Parameters:    Size  Location     Type
  8031 ;;  data            1    wreg     unsigned char 
  8032 ;; Auto vars:     Size  Location     Type
  8033 ;;  data            1    0[COMMON] unsigned char 
  8034 ;; Return value:  Size  Location     Type
  8035 ;;                  1    wreg      unsigned char 
  8036 ;; Registers used:
  8037 ;;		wreg
  8038 ;; Tracked objects:
  8039 ;;		On entry : 0/0
  8040 ;;		On exit  : 0/0
  8041 ;;		Unchanged: 0/0
  8042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;Total ram usage:        0 bytes
  8048 ;; Hardware stack levels used:    1
  8049 ;; Hardware stack levels required when called:    7
  8050 ;; This function calls:
  8051 ;;		Nothing
  8052 ;; This function is called by:
  8053 ;;		_nrf24l01Send
  8054 ;;		_nrf24l01ReceivePacket
  8055 ;;		_nrf24l01SendPacket
  8056 ;;		_nrf24l01SetTXPipe
  8057 ;;		_nrf24l01InitRegisters
  8058 ;;		i1_nrf24l01Send
  8059 ;; This function uses a non-reentrant model
  8060 ;;
  8061                           
  8062                           
  8063                           ;psect for function _nrf24l01SPISend
  8064  0D3D                     _nrf24l01SPISend:	
  8065                           
  8066                           ;incstack = 0
  8067 ;; hardware stack exceeded
  8068                           ; Regs used in _nrf24l01SPISend: [wreg]
  8069                           ;nrf24l01SPISend@data stored from wreg
  8070  0D3D  00F0               	movwf	nrf24l01SPISend@data
  8071                           
  8072                           ;interface.c: 53: SSP1BUF = data;
  8073  0D3E  0870               	movf	nrf24l01SPISend@data,w
  8074  0D3F  0024               	movlb	4	; select bank4
  8075  0D40  0091               	movwf	17	;volatile
  8076                           
  8077                           ;interface.c: 55: PORTCbits.RC4 = 1;
  8078  0D41  0020               	movlb	0	; select bank0
  8079  0D42  160E               	bsf	14,4	;volatile
  8080  0D43                     i1l94:	
  8081                           ;interface.c: 57: while (!SSP1STATbits.BF){
  8082                           
  8083  0D43  0024               	movlb	4	; select bank4
  8084  0D44  1814               	btfsc	20,0	;volatile
  8085  0D45  2D48               	goto	i1l2019
  8086                           
  8087                           ;interface.c: 58: __nop();
  8088  0D46  0000               	nop
  8089  0D47  2D43               	goto	i1l94
  8090  0D48                     i1l2019:	
  8091                           
  8092                           ;interface.c: 59: };interface.c: 61: return SSP1BUF;
  8093  0D48  0811               	movf	17,w	;volatile
  8094  0D49  0008               	return
  8095  0D4A                     __end_of_nrf24l01SPISend:	
  8096                           
  8097                           	psect	text41
  8098  0D26                     __ptext41:	
  8099 ;; *************** function _nrf24l01SPIEnd *****************
  8100 ;; Defined at:
  8101 ;;		line 71 in file "interface.c"
  8102 ;; Parameters:    Size  Location     Type
  8103 ;;		None
  8104 ;; Auto vars:     Size  Location     Type
  8105 ;;		None
  8106 ;; Return value:  Size  Location     Type
  8107 ;;                  1    wreg      void 
  8108 ;; Registers used:
  8109 ;;		wreg, status,2, status,0, pclath, cstack
  8110 ;; Tracked objects:
  8111 ;;		On entry : 0/0
  8112 ;;		On exit  : 0/0
  8113 ;;		Unchanged: 0/0
  8114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8119 ;;Total ram usage:        0 bytes
  8120 ;; Hardware stack levels used:    1
  8121 ;; Hardware stack levels required when called:    8
  8122 ;; This function calls:
  8123 ;;		_nrf24l01CSHigh
  8124 ;; This function is called by:
  8125 ;;		_nrf24l01Send
  8126 ;;		_nrf24l01ReceivePacket
  8127 ;;		_nrf24l01SendPacket
  8128 ;;		_nrf24l01SetTXPipe
  8129 ;;		_nrf24l01InitRegisters
  8130 ;;		i1_nrf24l01Send
  8131 ;; This function uses a non-reentrant model
  8132 ;;
  8133                           
  8134                           
  8135                           ;psect for function _nrf24l01SPIEnd
  8136  0D26                     _nrf24l01SPIEnd:	
  8137                           
  8138                           ;interface.c: 72: _delay((unsigned long)((10)*(16000000/4000000.0)));
  8139                           
  8140                           ;incstack = 0
  8141 ;; hardware stack exceeded
  8142                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
  8143  0D26  300D               	movlw	13
  8144  0D27                     u210_27:	
  8145  0D27  0B89               	decfsz	9,f
  8146  0D28  2D27               	goto	u210_27
  8147  0D29  0000               	nop
  8148                           
  8149                           ;interface.c: 73: nrf24l01CSHigh();
  8150  0D2A  318D  251A         	fcall	_nrf24l01CSHigh
  8151  0D2C  0008               	return
  8152  0D2D                     __end_of_nrf24l01SPIEnd:	
  8153                           
  8154                           	psect	text42
  8155  0D1A                     __ptext42:	
  8156 ;; *************** function _nrf24l01CSHigh *****************
  8157 ;; Defined at:
  8158 ;;		line 23 in file "interface.c"
  8159 ;; Parameters:    Size  Location     Type
  8160 ;;		None
  8161 ;; Auto vars:     Size  Location     Type
  8162 ;;		None
  8163 ;; Return value:  Size  Location     Type
  8164 ;;                  1    wreg      void 
  8165 ;; Registers used:
  8166 ;;		None
  8167 ;; Tracked objects:
  8168 ;;		On entry : 0/0
  8169 ;;		On exit  : 0/0
  8170 ;;		Unchanged: 0/0
  8171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8176 ;;Total ram usage:        0 bytes
  8177 ;; Hardware stack levels used:    1
  8178 ;; Hardware stack levels required when called:    7
  8179 ;; This function calls:
  8180 ;;		Nothing
  8181 ;; This function is called by:
  8182 ;;		_nrf24l01SPIEnd
  8183 ;; This function uses a non-reentrant model
  8184 ;;
  8185                           
  8186                           
  8187                           ;psect for function _nrf24l01CSHigh
  8188  0D1A                     _nrf24l01CSHigh:	
  8189                           
  8190                           ;interface.c: 24: PORTAbits.RA1 = 1;
  8191                           
  8192                           ;incstack = 0
  8193 ;; hardware stack exceeded
  8194                           ; Regs used in _nrf24l01CSHigh: []
  8195  0D1A  0020               	movlb	0	; select bank0
  8196  0D1B  148C               	bsf	12,1	;volatile
  8197  0D1C  0008               	return
  8198  0D1D                     __end_of_nrf24l01CSHigh:	
  8199                           
  8200                           	psect	text43
  8201  0D2D                     __ptext43:	
  8202 ;; *************** function _enableInterrupts *****************
  8203 ;; Defined at:
  8204 ;;		line 77 in file "interface.c"
  8205 ;; Parameters:    Size  Location     Type
  8206 ;;  enable          1    wreg     unsigned char 
  8207 ;; Auto vars:     Size  Location     Type
  8208 ;;  enable          1    0[COMMON] unsigned char 
  8209 ;; Return value:  Size  Location     Type
  8210 ;;                  1    wreg      void 
  8211 ;; Registers used:
  8212 ;;		wreg, status,0
  8213 ;; Tracked objects:
  8214 ;;		On entry : 0/0
  8215 ;;		On exit  : 0/0
  8216 ;;		Unchanged: 0/0
  8217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8222 ;;Total ram usage:        0 bytes
  8223 ;; Hardware stack levels used:    1
  8224 ;; Hardware stack levels required when called:    7
  8225 ;; This function calls:
  8226 ;;		Nothing
  8227 ;; This function is called by:
  8228 ;;		_nrf24l01Send
  8229 ;;		_nrf24l01SendPacket
  8230 ;;		i1_nrf24l01Send
  8231 ;; This function uses a non-reentrant model
  8232 ;;
  8233                           
  8234                           
  8235                           ;psect for function _enableInterrupts
  8236  0D2D                     _enableInterrupts:	
  8237                           
  8238                           ;incstack = 0
  8239 ;; hardware stack exceeded
  8240                           ; Regs used in _enableInterrupts: [wreg+status,0]
  8241                           ;enableInterrupts@enable stored from wreg
  8242  0D2D  00F0               	movwf	enableInterrupts@enable
  8243                           
  8244                           ;interface.c: 78: PIE0bits.INTE = enable;
  8245  0D2E  0C70               	rrf	enableInterrupts@enable,w
  8246  0D2F  0021               	movlb	1	; select bank1
  8247  0D30  1C03               	skipc
  8248  0D31  1010               	bcf	16,0	;volatile
  8249  0D32  1803               	skipnc
  8250  0D33  1410               	bsf	16,0	;volatile
  8251  0D34  0008               	return
  8252  0D35                     __end_of_enableInterrupts:	
  8253                           
  8254                           	psect	text44
  8255  0D17                     __ptext44:	
  8256 ;; *************** function _nrf24l01CELow *****************
  8257 ;; Defined at:
  8258 ;;		line 8 in file "interface.c"
  8259 ;; Parameters:    Size  Location     Type
  8260 ;;		None
  8261 ;; Auto vars:     Size  Location     Type
  8262 ;;		None
  8263 ;; Return value:  Size  Location     Type
  8264 ;;                  1    wreg      void 
  8265 ;; Registers used:
  8266 ;;		None
  8267 ;; Tracked objects:
  8268 ;;		On entry : 0/0
  8269 ;;		On exit  : 0/0
  8270 ;;		Unchanged: 0/0
  8271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8276 ;;Total ram usage:        0 bytes
  8277 ;; Hardware stack levels used:    1
  8278 ;; Hardware stack levels required when called:    7
  8279 ;; This function calls:
  8280 ;;		Nothing
  8281 ;; This function is called by:
  8282 ;;		_nrf24l01SetRXMode
  8283 ;;		_nrf24l01ReceivePacket
  8284 ;;		_nrf24l01SendPacket
  8285 ;;		_nrf24l01Init
  8286 ;;		i1_nrf24l01SetRXMode
  8287 ;; This function uses a non-reentrant model
  8288 ;;
  8289                           
  8290                           
  8291                           ;psect for function _nrf24l01CELow
  8292  0D17                     _nrf24l01CELow:	
  8293                           
  8294                           ;interface.c: 9: PORTAbits.RA0 = 0;
  8295                           
  8296                           ;incstack = 0
  8297 ;; hardware stack exceeded
  8298                           ; Regs used in _nrf24l01CELow: []
  8299  0D17  0020               	movlb	0	; select bank0
  8300  0D18  100C               	bcf	12,0	;volatile
  8301  0D19  0008               	return
  8302  0D1A                     __end_of_nrf24l01CELow:	
  8303                           
  8304                           	psect	text45
  8305  0D14                     __ptext45:	
  8306 ;; *************** function _nrf24l01CEHigh *****************
  8307 ;; Defined at:
  8308 ;;		line 13 in file "interface.c"
  8309 ;; Parameters:    Size  Location     Type
  8310 ;;		None
  8311 ;; Auto vars:     Size  Location     Type
  8312 ;;		None
  8313 ;; Return value:  Size  Location     Type
  8314 ;;                  1    wreg      void 
  8315 ;; Registers used:
  8316 ;;		None
  8317 ;; Tracked objects:
  8318 ;;		On entry : 0/0
  8319 ;;		On exit  : 0/0
  8320 ;;		Unchanged: 0/0
  8321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8326 ;;Total ram usage:        0 bytes
  8327 ;; Hardware stack levels used:    1
  8328 ;; Hardware stack levels required when called:    7
  8329 ;; This function calls:
  8330 ;;		Nothing
  8331 ;; This function is called by:
  8332 ;;		_nrf24l01SetRXMode
  8333 ;;		_nrf24l01ReceivePacket
  8334 ;;		_nrf24l01SendPacket
  8335 ;;		_nrf24l01Init
  8336 ;;		i1_nrf24l01SetRXMode
  8337 ;; This function uses a non-reentrant model
  8338 ;;
  8339                           
  8340                           
  8341                           ;psect for function _nrf24l01CEHigh
  8342  0D14                     _nrf24l01CEHigh:	
  8343                           
  8344                           ;interface.c: 14: PORTAbits.RA0 = 1;
  8345                           
  8346                           ;incstack = 0
  8347 ;; hardware stack exceeded
  8348                           ; Regs used in _nrf24l01CEHigh: []
  8349  0D14  0020               	movlb	0	; select bank0
  8350  0D15  140C               	bsf	12,0	;volatile
  8351  0D16  0008               	return
  8352  0D17                     __end_of_nrf24l01CEHigh:	
  8353                           
  8354                           	psect	text46
  8355  0F22                     __ptext46:	
  8356 ;; *************** function _strcmp *****************
  8357 ;; Defined at:
  8358 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  8359 ;; Parameters:    Size  Location     Type
  8360 ;;  s1              1    wreg     PTR const unsigned char 
  8361 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  8362 ;;		 -> loop@packet(33), 
  8363 ;;  s2              1    0[COMMON] PTR const unsigned char 
  8364 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  8365 ;; Auto vars:     Size  Location     Type
  8366 ;;  s1              1    4[COMMON] PTR const unsigned char 
  8367 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  8368 ;;		 -> loop@packet(33), 
  8369 ;;  r               1    3[COMMON] char 
  8370 ;; Return value:  Size  Location     Type
  8371 ;;                  2    0[COMMON] int 
  8372 ;; Registers used:
  8373 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8374 ;; Tracked objects:
  8375 ;;		On entry : 0/0
  8376 ;;		On exit  : 0/0
  8377 ;;		Unchanged: 0/0
  8378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8379 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8380 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8381 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8382 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8383 ;;Total ram usage:        5 bytes
  8384 ;; Hardware stack levels used:    1
  8385 ;; This function calls:
  8386 ;;		Nothing
  8387 ;; This function is called by:
  8388 ;;		_nrf24l01CheckACK
  8389 ;; This function uses a non-reentrant model
  8390 ;;
  8391                           
  8392                           
  8393                           ;psect for function _strcmp
  8394  0F22                     _strcmp:	
  8395                           
  8396                           ;incstack = 0
  8397                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
  8398                           ;strcmp@s1 stored from wreg
  8399  0F22  00F4               	movwf	strcmp@s1
  8400  0F23  2F2C               	goto	i1l2303
  8401  0F24                     i1l2299:	
  8402  0F24  3001               	movlw	1
  8403  0F25  00F2               	movwf	??_strcmp
  8404  0F26  0872               	movf	??_strcmp,w
  8405  0F27  07F4               	addwf	strcmp@s1,f
  8406  0F28  3001               	movlw	1
  8407  0F29  00F2               	movwf	??_strcmp
  8408  0F2A  0872               	movf	??_strcmp,w
  8409  0F2B  07F0               	addwf	strcmp@s2,f
  8410  0F2C                     i1l2303:	
  8411  0F2C  0874               	movf	strcmp@s1,w
  8412  0F2D  0086               	movwf	6
  8413  0F2E  0187               	clrf	7
  8414  0F2F  0870               	movf	strcmp@s2,w
  8415  0F30  0084               	movwf	4
  8416  0F31  3001               	movlw	1	; select bank2/3
  8417  0F32  0085               	movwf	5
  8418  0F33  0300               	decf	0,w
  8419  0F34  3AFF               	xorlw	255
  8420  0F35  0701               	addwf	1,w
  8421  0F36  00F2               	movwf	??_strcmp
  8422  0F37  0872               	movf	??_strcmp,w
  8423  0F38  00F3               	movwf	strcmp@r
  8424  0F39  0873               	movf	strcmp@r,w
  8425  0F3A  1D03               	btfss	3,2
  8426  0F3B  2F42               	goto	i1l2307
  8427  0F3C  0874               	movf	strcmp@s1,w
  8428  0F3D  0086               	movwf	6
  8429  0F3E  0187               	clrf	7
  8430  0F3F  0801               	movf	1,w
  8431  0F40  1D03               	btfss	3,2
  8432  0F41  2F24               	goto	i1l2299
  8433  0F42                     i1l2307:	
  8434  0F42  0873               	movf	strcmp@r,w
  8435  0F43  00F0               	movwf	?_strcmp
  8436  0F44  01F1               	clrf	?_strcmp+1
  8437  0F45  1BF0               	btfsc	?_strcmp,7
  8438  0F46  03F1               	decf	?_strcmp+1,f
  8439  0F47  0008               	return
  8440  0F48                     __end_of_strcmp:	
  8441                           
  8442                           	psect	text47
  8443  0D82                     __ptext47:	
  8444 ;; *************** function _exception *****************
  8445 ;; Defined at:
  8446 ;;		line 81 in file "interface.c"
  8447 ;; Parameters:    Size  Location     Type
  8448 ;;  exception       1    wreg     unsigned char 
  8449 ;; Auto vars:     Size  Location     Type
  8450 ;;  exception       1   12[COMMON] unsigned char 
  8451 ;; Return value:  Size  Location     Type
  8452 ;;                  1    wreg      void 
  8453 ;; Registers used:
  8454 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8455 ;; Tracked objects:
  8456 ;;		On entry : 0/0
  8457 ;;		On exit  : 0/0
  8458 ;;		Unchanged: 0/0
  8459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8461 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8462 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8463 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8464 ;;Total ram usage:        3 bytes
  8465 ;; Hardware stack levels used:    1
  8466 ;; Hardware stack levels required when called:    2
  8467 ;; This function calls:
  8468 ;;		___wmul
  8469 ;;		i1_flashUpdate
  8470 ;; This function is called by:
  8471 ;;		_nrf24l01ISR
  8472 ;; This function uses a non-reentrant model
  8473 ;;
  8474                           
  8475                           
  8476                           ;psect for function _exception
  8477  0D82                     _exception:	
  8478                           
  8479                           ;incstack = 0
  8480                           ; Regs used in _exception: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8481                           ;exception@exception stored from wreg
  8482  0D82  00FC               	movwf	exception@exception
  8483                           
  8484                           ;interface.c: 82: romData.bootMode = (unsigned) (exception * 10);
  8485  0D83  087C               	movf	exception@exception,w
  8486  0D84  00FA               	movwf	??_exception
  8487  0D85  01FB               	clrf	??_exception+1
  8488  0D86  087A               	movf	??_exception,w
  8489  0D87  00F0               	movwf	___wmul@multiplier
  8490  0D88  087B               	movf	??_exception+1,w
  8491  0D89  00F1               	movwf	___wmul@multiplier+1
  8492  0D8A  300A               	movlw	10
  8493  0D8B  00F2               	movwf	___wmul@multiplicand
  8494  0D8C  3000               	movlw	0
  8495  0D8D  00F3               	movwf	___wmul@multiplicand+1
  8496  0D8E  318D  25CB  318D   	fcall	___wmul
  8497  0D91  0871               	movf	?___wmul+1,w
  8498  0D92  0020               	movlb	0	; select bank0
  8499  0D93  00EE               	movwf	_romData+18
  8500  0D94  0870               	movf	?___wmul,w
  8501  0D95  00ED               	movwf	_romData+17
  8502                           
  8503                           ;interface.c: 83: flashUpdate();
  8504  0D96  318E  2698         	fcall	i1_flashUpdate
  8505  0D98  0001               	reset	;# 
  8506  0D99  0008               	return
  8507  0D9A                     __end_of_exception:	
  8508                           
  8509                           	psect	text48
  8510  0E98                     __ptext48:	
  8511 ;; *************** function i1_flashUpdate *****************
  8512 ;; Defined at:
  8513 ;;		line 97 in file "flash.c"
  8514 ;; Parameters:    Size  Location     Type
  8515 ;;		None
  8516 ;; Auto vars:     Size  Location     Type
  8517 ;;  flashUpdate     2    8[COMMON] unsigned int 
  8518 ;; Return value:  Size  Location     Type
  8519 ;;                  1    wreg      void 
  8520 ;; Registers used:
  8521 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8522 ;; Tracked objects:
  8523 ;;		On entry : 0/0
  8524 ;;		On exit  : 0/0
  8525 ;;		Unchanged: 0/0
  8526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8528 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8529 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8530 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8531 ;;Total ram usage:        4 bytes
  8532 ;; Hardware stack levels used:    1
  8533 ;; Hardware stack levels required when called:    1
  8534 ;; This function calls:
  8535 ;;		i1_flashWriteByte
  8536 ;; This function is called by:
  8537 ;;		_exception
  8538 ;; This function uses a non-reentrant model
  8539 ;;
  8540                           
  8541                           
  8542                           ;psect for function i1_flashUpdate
  8543  0E98                     i1_flashUpdate:	
  8544                           
  8545                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  8546                           
  8547                           ;incstack = 0
  8548                           ; Regs used in i1_flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8549  0E98  01F8               	clrf	i1flashUpdate@i
  8550  0E99  01F9               	clrf	i1flashUpdate@i+1
  8551  0E9A                     L3:	
  8552  0E9A  3000               	movlw	0
  8553  0E9B  0279               	subwf	i1flashUpdate@i+1,w
  8554  0E9C  3020               	movlw	32
  8555  0E9D  1903               	skipnz
  8556  0E9E  0278               	subwf	i1flashUpdate@i,w
  8557  0E9F  1803               	btfsc	3,0
  8558  0EA0  0008               	return
  8559                           
  8560                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  8561  0EA1  0879               	movf	i1flashUpdate@i+1,w
  8562  0EA2  00F1               	movwf	i1flashWriteByte@offset+1
  8563  0EA3  0878               	movf	i1flashUpdate@i,w
  8564  0EA4  00F0               	movwf	i1flashWriteByte@offset
  8565  0EA5  0878               	movf	i1flashUpdate@i,w
  8566  0EA6  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  8567  0EA7  0086               	movwf	6
  8568  0EA8  3001               	movlw	1	; select bank2/3
  8569  0EA9  0087               	movwf	7
  8570  0EAA  0801               	movf	1,w
  8571  0EAB  00F6               	movwf	??i1_flashUpdate
  8572  0EAC  01F7               	clrf	??i1_flashUpdate+1
  8573  0EAD  0876               	movf	??i1_flashUpdate,w
  8574  0EAE  00F2               	movwf	i1flashWriteByte@data
  8575  0EAF  0877               	movf	??i1_flashUpdate+1,w
  8576  0EB0  00F3               	movwf	i1flashWriteByte@data+1
  8577  0EB1  318F  276E  318E   	fcall	i1_flashWriteByte
  8578  0EB4  3001               	movlw	1
  8579  0EB5  07F8               	addwf	i1flashUpdate@i,f
  8580  0EB6  3000               	movlw	0
  8581  0EB7  3DF9               	addwfc	i1flashUpdate@i+1,f
  8582  0EB8  2E9A               	goto	L3
  8583  0EB9                     __end_ofi1_flashUpdate:	
  8584                           
  8585                           	psect	text49
  8586  0F6E                     __ptext49:	
  8587 ;; *************** function i1_flashWriteByte *****************
  8588 ;; Defined at:
  8589 ;;		line 8 in file "flash.c"
  8590 ;; Parameters:    Size  Location     Type
  8591 ;;  offset          2    0[COMMON] unsigned int 
  8592 ;;  data            2    2[COMMON] unsigned int 
  8593 ;; Auto vars:     Size  Location     Type
  8594 ;;  flashWriteBy    2    4[COMMON] unsigned int 
  8595 ;; Return value:  Size  Location     Type
  8596 ;;                  1    wreg      void 
  8597 ;; Registers used:
  8598 ;;		wreg, status,2, status,0
  8599 ;; Tracked objects:
  8600 ;;		On entry : 0/0
  8601 ;;		On exit  : 0/0
  8602 ;;		Unchanged: 0/0
  8603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8604 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8605 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8607 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8608 ;;Total ram usage:        6 bytes
  8609 ;; Hardware stack levels used:    1
  8610 ;; This function calls:
  8611 ;;		Nothing
  8612 ;; This function is called by:
  8613 ;;		i1_flashUpdate
  8614 ;; This function uses a non-reentrant model
  8615 ;;
  8616                           
  8617                           
  8618                           ;psect for function i1_flashWriteByte
  8619  0F6E                     i1_flashWriteByte:	
  8620                           
  8621                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  8622                           
  8623                           ;incstack = 0
  8624                           ; Regs used in i1_flashWriteByte: [wreg+status,2+status,0]
  8625  0F6E  138B               	bcf	11,7	;volatile
  8626                           
  8627                           ;flash.c: 15: PMCON1 = 0x00;
  8628  0F6F  0031               	movlb	17	; select bank17
  8629  0F70  0195               	clrf	21	;volsfr
  8630                           
  8631                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  8632  0F71  0870               	movf	i1flashWriteByte@offset,w
  8633  0F72  3EE0               	addlw	224
  8634  0F73  00F4               	movwf	i1flashWriteByte@address
  8635  0F74  301F               	movlw	31
  8636  0F75  3D71               	addwfc	i1flashWriteByte@offset+1,w
  8637  0F76  00F5               	movwf	i1flashWriteByte@address+1
  8638                           
  8639                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  8640  0F77  0874               	movf	i1flashWriteByte@address,w
  8641  0F78  0091               	movwf	17	;volatile
  8642                           
  8643                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  8644  0F79  0875               	movf	i1flashWriteByte@address+1,w
  8645  0F7A  0092               	movwf	18	;volatile
  8646                           
  8647                           ;flash.c: 21: PMCON1bits.FREE = 1;
  8648  0F7B  1615               	bsf	21,4	;volsfr
  8649                           
  8650                           ;flash.c: 22: PMCON1bits.WREN = 1;
  8651  0F7C  1515               	bsf	21,2	;volsfr
  8652                           
  8653                           ;flash.c: 24: PMCON2 = 0x55;
  8654  0F7D  3055               	movlw	85
  8655  0F7E  0096               	movwf	22	;volsfr
  8656                           
  8657                           ;flash.c: 25: PMCON2 = 0xAA;
  8658  0F7F  30AA               	movlw	170
  8659  0F80  0096               	movwf	22	;volsfr
  8660                           
  8661                           ;flash.c: 27: PMCON1bits.WR = 1;
  8662  0F81  1495               	bsf	21,1	;volsfr
  8663                           
  8664                           ;flash.c: 29: __nop();
  8665  0F82  0000               	nop
  8666                           
  8667                           ;flash.c: 30: __nop();
  8668  0F83  0000               	nop
  8669                           
  8670                           ;flash.c: 32: PMCON1bits.WREN = 0;
  8671  0F84  0031               	movlb	17	; select bank17
  8672  0F85  1115               	bcf	21,2	;volsfr
  8673                           
  8674                           ;flash.c: 36: PMCON1 = 0x00;
  8675  0F86  0195               	clrf	21	;volsfr
  8676                           
  8677                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  8678  0F87  0874               	movf	i1flashWriteByte@address,w
  8679  0F88  0091               	movwf	17	;volatile
  8680                           
  8681                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  8682  0F89  0875               	movf	i1flashWriteByte@address+1,w
  8683  0F8A  0092               	movwf	18	;volatile
  8684                           
  8685                           ;flash.c: 41: PMCON1bits.FREE = 0;
  8686  0F8B  1215               	bcf	21,4	;volsfr
  8687                           
  8688                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  8689  0F8C  1695               	bsf	21,5	;volsfr
  8690                           
  8691                           ;flash.c: 43: PMCON1bits.WREN = 1;
  8692  0F8D  1515               	bsf	21,2	;volsfr
  8693                           
  8694                           ;flash.c: 45: PMDATL = (data >> 0);
  8695  0F8E  0872               	movf	i1flashWriteByte@data,w
  8696  0F8F  0093               	movwf	19	;volatile
  8697                           
  8698                           ;flash.c: 46: PMDATH = (data >> 8);
  8699  0F90  0873               	movf	i1flashWriteByte@data+1,w
  8700  0F91  0094               	movwf	20	;volatile
  8701                           
  8702                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  8703  0F92  1295               	bcf	21,5	;volsfr
  8704                           
  8705                           ;flash.c: 50: PMCON2 = 0x55;
  8706  0F93  3055               	movlw	85
  8707  0F94  0096               	movwf	22	;volsfr
  8708                           
  8709                           ;flash.c: 51: PMCON2 = 0xAA;
  8710  0F95  30AA               	movlw	170
  8711  0F96  0096               	movwf	22	;volsfr
  8712                           
  8713                           ;flash.c: 53: PMCON1bits.WR = 1;
  8714  0F97  1495               	bsf	21,1	;volsfr
  8715                           
  8716                           ;flash.c: 55: __nop();
  8717  0F98  0000               	nop
  8718                           
  8719                           ;flash.c: 56: __nop();
  8720  0F99  0000               	nop
  8721                           
  8722                           ;flash.c: 58: PMCON1bits.WREN = 0;
  8723  0F9A  0031               	movlb	17	; select bank17
  8724  0F9B  1115               	bcf	21,2	;volsfr
  8725                           
  8726                           ;flash.c: 61: INTCONbits.GIE = 1;
  8727  0F9C  178B               	bsf	11,7	;volatile
  8728  0F9D  0008               	return
  8729  0F9E                     __end_ofi1_flashWriteByte:	
  8730                           
  8731                           	psect	text50
  8732  0DCB                     __ptext50:	
  8733 ;; *************** function ___wmul *****************
  8734 ;; Defined at:
  8735 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  8736 ;; Parameters:    Size  Location     Type
  8737 ;;  multiplier      2    0[COMMON] unsigned int 
  8738 ;;  multiplicand    2    2[COMMON] unsigned int 
  8739 ;; Auto vars:     Size  Location     Type
  8740 ;;  product         2    4[COMMON] unsigned int 
  8741 ;; Return value:  Size  Location     Type
  8742 ;;                  2    0[COMMON] unsigned int 
  8743 ;; Registers used:
  8744 ;;		wreg, status,2, status,0
  8745 ;; Tracked objects:
  8746 ;;		On entry : 0/0
  8747 ;;		On exit  : 0/0
  8748 ;;		Unchanged: 0/0
  8749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8750 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8751 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8753 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8754 ;;Total ram usage:        6 bytes
  8755 ;; Hardware stack levels used:    1
  8756 ;; This function calls:
  8757 ;;		Nothing
  8758 ;; This function is called by:
  8759 ;;		_exception
  8760 ;; This function uses a non-reentrant model
  8761 ;;
  8762                           
  8763                           
  8764                           ;psect for function ___wmul
  8765  0DCB                     ___wmul:	
  8766                           
  8767                           ;incstack = 0
  8768                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8769  0DCB  01F4               	clrf	___wmul@product
  8770  0DCC  01F5               	clrf	___wmul@product+1
  8771  0DCD                     i1l2313:	
  8772  0DCD  1C70               	btfss	___wmul@multiplier,0
  8773  0DCE  2DD3               	goto	i1l472
  8774  0DCF  0872               	movf	___wmul@multiplicand,w
  8775  0DD0  07F4               	addwf	___wmul@product,f
  8776  0DD1  0873               	movf	___wmul@multiplicand+1,w
  8777  0DD2  3DF5               	addwfc	___wmul@product+1,f
  8778  0DD3                     i1l472:	
  8779  0DD3  3001               	movlw	1
  8780  0DD4                     u125_25:	
  8781  0DD4  35F2               	lslf	___wmul@multiplicand,f
  8782  0DD5  0DF3               	rlf	___wmul@multiplicand+1,f
  8783  0DD6  0B89               	decfsz	9,f
  8784  0DD7  2DD4               	goto	u125_25
  8785  0DD8  3001               	movlw	1
  8786  0DD9                     u126_25:	
  8787  0DD9  36F1               	lsrf	___wmul@multiplier+1,f
  8788  0DDA  0CF0               	rrf	___wmul@multiplier,f
  8789  0DDB  0B89               	decfsz	9,f
  8790  0DDC  2DD9               	goto	u126_25
  8791  0DDD  0870               	movf	___wmul@multiplier,w
  8792  0DDE  0471               	iorwf	___wmul@multiplier+1,w
  8793  0DDF  1D03               	btfss	3,2
  8794  0DE0  2DCD               	goto	i1l2313
  8795  0DE1  0875               	movf	___wmul@product+1,w
  8796  0DE2  00F1               	movwf	?___wmul+1
  8797  0DE3  0874               	movf	___wmul@product,w
  8798  0DE4  00F0               	movwf	?___wmul
  8799  0DE5  0008               	return
  8800  0DE6                     __end_of___wmul:	
  8801  007E                     btemp	set	126	;btemp
  8802  007E                     int$flags	set	126
  8803  007E                     wtemp0	set	126


Data Sizes:
    Strings     44
    Constant    25
    Data        0
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     57      79
    BANK1            80     68      72
    BANK2            80      0      65
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), romData(BANK0[19]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), romData(BANK0[19]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_10(CODE[4]), STR_9(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK2[32]), RXPacket(BANK2[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_11(CODE[5]), STR_8(CODE[6]), STR_7(CODE[5]), STR_6(CODE[4]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[4]), STR_2(CODE[2]), 
		 -> setMessage@tempString(BANK0[16]), STR_1(CODE[2]), romData.name(BANK0[16]), romData(BANK0[19]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    ultoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> setMessage@tempString(BANK0[16]), 

    sp__ltoa	PTR unsigned char  size(1) Largest target is 0

    nrf24l01SendPacket@Packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    TXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), 

    checkTXPower@rxPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), 

    sp__ultoa	PTR unsigned char  size(1) Largest target is 16
		 -> setMessage@tempString(BANK0[16]), 

    setMessage@topic	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_11(CODE[5]), STR_8(CODE[6]), STR_7(CODE[5]), STR_6(CODE[4]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[4]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    setMessage@packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_exception
    _nrf24l01ReceivePacket->i1_memset
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send
    _exception->i1_flashUpdate
    i1_flashUpdate->i1_flashWriteByte

Critical Paths under _main in BANK0

    _main->_loop
    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->_strlen
    _loop->_setMessage
    _setMessage->_getADCValue
    _ultoa->___lldiv
    _nrf24l01SendPacket->_strlen
    _nrf24l01SetRXMode->_nrf24l01Send
    _getADCValue->___lldiv
    _checkTXPower->_nrf24l01ChangeTXPower
    _nrf24l01ChangeTXPower->_nrf24l01Send
    _flashUpdate->_flashWriteByte
    _flashRealod->_flashReadByte

Critical Paths under _ISR in BANK0

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK1

    _main->_loop

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   37305
                                             56 BANK0      1     1      0
                                             34 BANK1     34    34      0
                        _flashRealod
                        _flashUpdate
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                 _nrf24l01SendPacket
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                         _setMessage
                              _sleep
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     325
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    5331
                                             20 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               12    12      0    5331
                                              8 BANK0     12    12      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    3     3      0     314
                                              5 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     270
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    4     4      0    2239
                                              4 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      5     5      0     787
                                              9 BANK0      5     5      0
                            ___awmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     474
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _loop                                                38    38      0   16992
                                             52 BANK0      4     4      0
                                              0 BANK1     34    34      0
                       _checkTXPower
                        _getADCValue
                       _nrf24l01Send
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setMessage                                          23    17      6    5078
                                             29 BANK0     23    17      6
                        _getADCValue (ARG)
                             _memset
                             _strcat
                              _ultoa
 ---------------------------------------------------------------------------------
 (2) _ultoa                                               13     7      6    1736
                                             15 BANK0     13     7      6
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     337
                                              1 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (2) _strcat                                               5     3      2     723
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     565
                                              1 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendPacket                                   4     4      0    5364
                                              9 BANK0      4     4      0
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01ChangeTXPower
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               8     6      2     162
                                              1 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    2277
                                              4 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         14    10      4    1460
                                             15 BANK0     14    10      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     270
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     696
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _checkTXPower                                         2     2      0    2457
                                              8 BANK0      2     2      0
              _nrf24l01ChangeTXPower
                _nrf24l01GetRXPacket
 ---------------------------------------------------------------------------------
 (3) _nrf24l01GetRXPacket                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01ChangeTXPower                                4     2      2    2434
                                              4 BANK0      4     2      2
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (2) _nrf24l01Send                                         3     2      1    2143
                                              1 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (1) _flashUpdate                                          4     4      0     423
                                              7 BANK0      4     4      0
                     _flashWriteByte
 ---------------------------------------------------------------------------------
 (2) _flashWriteByte                                       6     2      4     333
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _flashRealod                                          3     3      0     271
                                             10 BANK0      3     3      0
                      _flashReadByte
 ---------------------------------------------------------------------------------
 (2) _flashReadByte                                        9     7      2     181
                                              1 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    2705
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (8) _nrf24l01ISR                                          2     2      0    2705
                                             13 COMMON     1     1      0
                                              0 BANK0      1     1      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceivePacket
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) _nrf24l01ReceivePacket                                3     3      0     639
                                              8 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_memset                                            8     2      6     211
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (9) _nrf24l01CheckACK                                     1     1      0     617
                                              7 COMMON     1     1      0
                             _strcmp
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) i1_nrf24l01SetRXMode                                  3     3      0     401
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_nrf24l01Send                                      3     2      1     267
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _strcmp                                              5     3      2     216
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (9) _exception                                            3     3      0     589
                                             10 COMMON     3     3      0
                             ___wmul
                      i1_flashUpdate
 ---------------------------------------------------------------------------------
 (10) i1_flashUpdate                                       4     4      0     297
                                              6 COMMON     4     4      0
                   i1_flashWriteByte
 ---------------------------------------------------------------------------------
 (11) i1_flashWriteByte                                    6     2      4     207
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     270
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _flashRealod
     _flashReadByte
   _flashUpdate
     _flashWriteByte
   _loop
     _checkTXPower
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01GetRXPacket
     _getADCValue
       ___lldiv
       ___lmul
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _nrf24l01SendPacket
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strlen
     _setMessage
       _getADCValue (ARG)
         ___lldiv
         ___lmul
       _memset (ARG)
       _strcat (ARG)
       _ultoa (ARG)
         ___lldiv
         ___llmod
     _sleep
   _nrf24l01GetPipe
     ___awmod
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendPacket
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01ChangeTXPower
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _strlen
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _setMessage
     _getADCValue (ARG)
       ___lldiv
       ___lmul
     _memset (ARG)
     _strcat (ARG)
     _ultoa (ARG)
       ___lldiv
       ___llmod
   _sleep
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
       ___wmul
       i1_flashUpdate
         i1_flashWriteByte
     _nrf24l01CheckACK
       _strcmp
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01ReceivePacket
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     39      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     44      48       7       90.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      41       9       81.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      E6      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      E6      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Jul 20 13:35:57 2018

           flashReadByte@result 0026                    flashRealod@i 002B                  ___bmul@product 0023  
                   __CFG_CP$OFF 0000             ___wmul@multiplicand 0072             nrf24l01Send@command 0023  
                   __CFG_LVP$ON 0000                             l220 0446                             l227 0D4A  
                           l342 025A                             l338 0249                             l373 0EC6  
                           l890 040D                    flashUpdate@i 0029                    __CFG_CPD$OFF 0000  
                           _ISR 0004                             u955 0511                             u975 051D  
                           u985 0531                             u995 053D                    ___awmod@sign 0027  
                           wreg 0009             nrf24l01SendPacket@i 002C                            ?_ISR 0070  
                ??_nrf24l01Init 0034                            l2103 06AE                            l2211 0F4E  
                          l2051 0D5F                            l2213 0F59                            l2221 03A2  
                          l2071 051C                            l2231 03CF                            l2055 0D65  
                          l2217 0F61                            l2083 0547                            l2331 0FB1  
                          l2069 050E                            l2093 067D                            l2263 06EE  
                          l2079 053C                            l2327 0FA7                            l2271 0F0E  
                          l2095 068B                            l2257 06DC                            l3067 0DB7  
                          l2099 06A3                            l2197 0766                            l2269 0F03  
                          l2541 0275                            l2533 024E                            l3333 0394  
                          l2295 0ED2                            l2711 0219                            l2545 0285  
                          l2705 020A                  ??_nrf24l01Send 0022                            l2491 0469  
                          l2563 02B0                            l3259 032D                            l2573 02ED  
                          l2565 02BC                            l2549 029A                            l2487 044B  
                          l2575 02C0                            l2911 07C8                            l2489 043F  
                          l2745 05F5                            l2921 0E07                            l2771 062B  
                          l2763 061A                            l2757 0602                            l2749 05FC  
                          l2909 07A9                            l2759 060E                            l2767 0623  
                          l2697 01C0                            STR_1 1042                    __CFG_WDTE$ON 0000  
                          STR_2 1042                            STR_3 103A                            STR_4 1028  
                          STR_5 101E                            STR_6 103E                            STR_7 1023  
                          STR_8 1013                            STR_9 1032                            u1025 0680  
                          u1045 0699                            u1214 0ECC                            u2007 02DD  
                          u1055 06A4                            u1215 0ECB                            u1305 0FB9  
                          u2017 02EE                            u1155 06CA                            u2027 0746  
                          u2037 0758                            u2047 0763                            u2057 043C  
                          u1445 0294                            u1295 0FB2                            u1615 0605  
                          u1635 0614                            u1645 061B                            u1775 07B7  
                          u1937 030E                            u1947 07E4                            u1957 07F4  
                          u1967 0256                            u1977 02A1                            u1987 02B8  
                          u1997 02D0                            i1l94 0D43                            _WPUA 020C  
                          _WPUC 020E  __size_of_nrf24l01InterfaceInit 001C                    __CFG_WRT$OFF 0000  
                 __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 0E38                            _main 02F2  
                          _loop 0029                 ??_flashReadByte 0023                            fsr0h 0005  
                          fsr1h 0007                            indf0 0000                            fsr0l 0004  
                          indf1 0001                            fsr1l 0006                            btemp 007E  
__size_of_nrf24l01ReceivePacket 004D                   __CFG_BORV$LOW 0000   __end_of_nrf24l01ReceivePacket 05EA  
                          start 000F           nrf24l01SetRXPipe@pipe 0026                   __CFG_CSWEN$ON 0000  
             ___bmul@multiplier 0024                   __CFG_MCLRE$ON 0000     __size_of_nrf24l01SendPacket 00AF  
                         ??_ISR 007E            __size_of_getADCValue 0088                 ??_nrf24l01CELow 0070  
               ??_nrf24l01CSLow 0070                           ?_main 0070                           ?_loop 0070  
                         STR_10 1036                           STR_11 102D                 __end_of___awmod 0630  
               __end_of___lldiv 0550                 __end_of___llmod 06B7                  __CFG_DEBUG$OFF 0000  
                         i1l215 000D                           i1l365 0593                           i1l472 0DD3  
        enableInterrupts@enable 0070                i1_flashWriteByte 0F6E                      i1memset@p1 0070  
                i1flashUpdate@i 0078             ___lmul@multiplicand 0025                   __CFG_PWRTE$ON 0000  
         nrf24l01SetTXPipe@pipe 0027                           _sleep 0D4A                           _ultoa 0398  
                __CFG_BOREN$OFF 0000                _enableInterrupts 0D2D                           status 0003  
                         wtemp0 007E     __end_ofi1_nrf24l01SetRXMode 07A4                __end_ofi1_memset 0DB2  
__size_of_nrf24l01ChangeTXPower 003F               getADCValue@adcSum 0039   __end_of_nrf24l01ChangeTXPower 06F6  
              _nrf24l01SPIStart 0D35                 __initialization 0011                _nrf24l01CheckACK 0E38  
        nrf24l01InitRegisters@i 0032                    __end_of_main 0398                    __end_of_loop 013D  
  nrf24l01ChangeTXPower@rfSetup 0027                ??_nrf24l01CEHigh 0070                          ??_main 0058  
                        ??_loop 0054                ??_nrf24l01CSHigh 0070                ??_nrf24l01SPIEnd 0070  
           _nrf24l01GetRXPacket 07FE          __size_ofi1_flashUpdate 0021        __size_of_nrf24l01SPISend 000D  
              ___llmod@dividend 0025                          _ADRESH 009C                          _ADRESL 009B  
                        ?_sleep 0070                          _ANSELA 018C                          _ANSELC 018E  
                        ?_ultoa 002F                ??_flashWriteByte 0025                          i1l2019 0D48  
                        i1l2303 0F2C                          i1l3111 05DC                          i1l2313 0DCD  
                        _ODCONA 028C        __size_of_nrf24l01GetPipe 0034                          i1l2307 0F42  
                        i1l3115 05E4                          i1l3107 05CC                          _ODCONC 028E  
                        i1l3135 056F                          i1l3127 0560                          i1l2371 079D  
                        i1l3075 0D9E                          i1l3149 0594                          i1l2299 0F24  
                        u210_27 0D27                          u125_25 0DD4                          u126_25 0DD9  
                        u206_27 077F                          u207_27 0790                          _INLVLA 038C  
                        _INLVLC 038E                          u208_27 079A                          u209_27 0D39  
         __size_of_checkTXPower 0014                          _PMADRH 0892                          _PMADRL 0891  
                        _PMDATH 0894                          _PMDATL 0893                          _PMCON1 0895  
                        _PMCON2 0896            ?_nrf24l01GetRXPacket 0070            __size_of_flashRealod 0020  
            flashWriteByte@data 0023            __size_of_flashUpdate 0023            __size_of_nrf24l01ISR 004D  
       nrf24l01SetRXMode@config 0025                          ___bmul 0D5C                          ___lmul 0F9E  
       nrf24l01SetRXMode@rxMode 0026                          ___wmul 0DCB                  __CFG_STVREN$ON 0000  
                     ??___awmod 0025                       ??___lldiv 0029                       ??___llmod 0029  
          __end_of_nrf24l01Init 07FE            __end_of_nrf24l01Send 0E98                          _memset 0DB2  
         _nrf24l01InitRegisters 013D                 ___awmod@divisor 0021                 ___awmod@counter 0026  
                        _strcat 0F48                          _strcmp 0F22                          _strcpy 0E01  
                        _strlen 0EFD       i1nrf24l01SetRXMode@config 0075                __end_of_romArray 2000  
     i1nrf24l01SetRXMode@rxMode 0076                    _checkTXPower 0D6E                          ultoa@c 003A  
                        ultoa@v 0036              getADCValue@adcLoop 0038         __end_of__initialization 0025  
         ??_nrf24l01GetRXPacket 0021        nrf24l01SendPacket@Packet 002B              getADCValue@channel 0037  
                 i1_flashUpdate 0E98             ___bmul@multiplicand 0021              getADCValue@divider 002F  
                __pcstackCOMMON 0070                   __end_of_sleep 0D5C                   __end_of_ultoa 0421  
                     ?i1_memset 0070                         ??_sleep 0021                     loop@rfSetup 00A0  
                       ??_ultoa 0035                      __pbssBANK0 0059                      __pbssBANK1 00E4  
                    __pbssBANK2 0120               ??_nrf24l01SPISend 0070              __size_of_exception 0018  
                ?i1_flashUpdate 0070         __size_ofi1_nrf24l01Send 001B        __end_ofi1_flashWriteByte 0F9E  
             ??_nrf24l01GetPipe 0029                      __pmaintext 02F2                         ?___bmul 0021  
                       ?___lmul 0021                         ?___wmul 0070                 __CFG_PPS1WAY$ON 0000  
             _nrf24l01SetRXMode 0732               _nrf24l01SetRXPipe 0EB9          ?_nrf24l01InitRegisters 0070  
                    __pintentry 0004               _nrf24l01SetTXPipe 0630             nrf24l01SPISend@data 0070  
                       ?_memset 0021                  ___lmul@product 0029              ?_nrf24l01SetRXMode 0070  
            ?_nrf24l01SetRXPipe 0070        __end_of_enableInterrupts 0D35              ?_nrf24l01SetTXPipe 0070  
           __CFG_RSTOSC$HFINT32 0000                         ?_strcat 0021                         ?_strcmp 0070  
                       ?_strcpy 0021                         ?_strlen 0021           __end_of_n_ADDRESS_MUL 1045  
                    ??i1_memset 0076             ??_nrf24l01SetRXMode 0024        __end_of_nrf24l01SPIStart 0D3D  
           ??_nrf24l01SetRXPipe 0024             ??_nrf24l01SetTXPipe 0025                         _SSP1BUF 0211  
      __end_of_nrf24l01CheckACK 0E58           _nrf24l01InterfaceInit 0E1C           __end_of_flashReadByte 1000  
              __p_romArray_text 1FE0      __end_of_nrf24l01SendPacket 02F2                   ??_getADCValue 0033  
         __size_of_nrf24l01Init 0026           __size_of_nrf24l01Send 0020       __end_of_nrf24l01SetRXMode 076D  
     __end_of_nrf24l01SetRXPipe 0EDA       __end_of_nrf24l01SetTXPipe 0674           _nrf24l01ReceivePacket 059D  
               __size_of___bmul 0012                 __size_of___lmul 0030                         ___awmod 05EA  
                       ___lldiv 04FD                 __size_of___wmul 001B                         ___llmod 0674  
         __end_of_nrf24l01CELow 0D1A                 __size_of_memset 0019           __end_of_nrf24l01CSLow 0D20  
                       __ptext1 0E01                         __ptext2 07D8                         __ptext3 0E1C  
                       __ptext4 013D                         __ptext5 0630                         __ptext6 0D5C  
                       __ptext7 0EB9                         __ptext8 07A4                         __ptext9 05EA  
               __size_of_strcat 0026                 __size_of_strcmp 0026               __end_of_exception 0D9A  
               __size_of_strcpy 001B                 __size_of_strlen 0025                    __size_of_ISR 000B  
                       _counter 00E4         i1flashWriteByte@address 0074                ___awmod@dividend 0023  
              _romArray_absaddr 1FE0                         _romData 005C                         clrloop0 0D21  
          end_of_initialization 0025                    _nrf24l01Init 07D8                      _setMessage 04A9  
               ??i1_flashUpdate 0076                    _nrf24l01Send 0E78                         memset@c 0023  
                       memset@n 0025                         memset@p 0027                nrf24l01GetPipe@i 002D  
               ___lldiv@divisor 0021                 ___lldiv@counter 002E           _nrf24l01ChangeTXPower 06B7  
              setMessage@packet 0053    __size_ofi1_nrf24l01SetRXMode 0037                         strcmp@r 0073  
         i1nrf24l01Send@command 0073                         strlen@s 0028             __end_of_getADCValue 04A9  
                     _PORTAbits 000C                       _PORTCbits 000E                       _TRISAbits 008C  
                     _TRISCbits 008E                nrf24l01Send@data 0021                __CFG_FEXTOSC$OFF 0000  
                 ??_flashRealod 002A                   ??_flashUpdate 0027                   ??_nrf24l01ISR 007D  
        ?_nrf24l01InterfaceInit 0070                  i1_nrf24l01Send 0DE6                      main@packet 00C3  
        ?_nrf24l01ReceivePacket 0070      __size_of_nrf24l01SetRXMode 003B      __size_of_nrf24l01SetRXPipe 0021  
    __size_of_nrf24l01SetTXPipe 0044                  __end_of___bmul 0D6E                  __end_of___lmul 0FCE  
                __end_of___wmul 0DE6                       i1memset@c 0072                       i1memset@n 0074  
                     i1memset@p 0076                  __end_of_memset 0DCB                  __end_of_strcat 0F6E  
                __end_of_strcmp 0F48                  __end_of_strcpy 0E1C                  __end_of_strlen 0F22  
           start_initialization 0011                 _nrf24l01SPISend 0D3D                     __end_of_ISR 000F  
         flashWriteByte@address 0025               __size_ofi1_memset 0018       nrf24l01SetRXPipe@enRXAddr 0027  
               _nrf24l01GetPipe 07A4     __end_of_nrf24l01GetRXPacket 0800         __size_of_nrf24l01CEHigh 0003  
       __size_of_nrf24l01CSHigh 0003                     ?_setMessage 003D          __end_ofi1_nrf24l01Send 0E01  
       __size_of_nrf24l01SPIEnd 0007                 ___llmod@divisor 0021                 ___llmod@counter 002A  
        ?_nrf24l01ChangeTXPower 0024         ??_nrf24l01InitRegisters 0028                __CFG_LPBOREN$OFF 0000  
             ?i1_flashWriteByte 0070             __end_of_flashRealod 0E78                     _getADCValue 0421  
       __size_of_flashWriteByte 003C                        ??___bmul 0022             __end_of_flashUpdate 0EFD  
                      ??___lmul 0029             __end_of_nrf24l01ISR 059D            setMessage@tempString 0043  
                      ??___wmul 0074              ??i1_flashWriteByte 0074            __end_of_resetRomData 1013  
                      ??_memset 0027               ?_enableInterrupts 0070                        ??_strcat 0023  
                      ??_strcmp 0072                        ??_strcpy 0023                        ??_strlen 0023  
            ??_enableInterrupts 0070                       ___latbits 0002                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0               ?_nrf24l01SPIStart 0070            checkTXPower@rxPacket 0029  
             ?_nrf24l01CheckACK 0070              ??_nrf24l01SPIStart 0070              ??_nrf24l01CheckACK 0077  
               ?i1_nrf24l01Send 0071                      loop@packet 00A1             nrf24l01GetPipe@name 002C  
           nrf24l01GetPipe@pipe 002B                        ?___awmod 0021                        ?___lldiv 0021  
                      ?___llmod 0021            __end_of_n_ADDRESS_P0 101E         __end_of_nrf24l01SPISend 0D4A  
            i1nrf24l01Send@data 0071       nrf24l01InitRegisters@enAA 002F             __size_of_setMessage 0054  
            _nrf24l01SendPacket 0243         __end_of_nrf24l01GetPipe 07D8                       _exception 0D82  
           ?_nrf24l01SendPacket 0070             i1_nrf24l01SetRXMode 076D                  __size_of_sleep 0012  
                __size_of_ultoa 0089                     _flashRealod 0E58                  ___wmul@product 0074  
        i1flashWriteByte@offset 0070                     _flashUpdate 0EDA                     _nrf24l01ISR 0550  
                     clear_ram0 0D20                        _PIE0bits 0090                        _PIR0bits 0010  
                     _romHolder 0120                       _sleepLoop 005A            ??_nrf24l01SendPacket 0029  
               setMessage@value 003F                 setMessage@topic 003D            ?i1_nrf24l01SetRXMode 0070  
                    _ADCON0bits 009D                      _ADCON1bits 009E               ___wmul@multiplier 0070  
                      _WPUAbits 020C                        i1_memset 0D9A                   ?_checkTXPower 0070  
                      _RXPacket 0140          __size_of_flashReadByte 0032                        _TXPacket 0059  
                    ?_exception 0070                  _nrf24l01CEHigh 0D14               ___lmul@multiplier 0021  
       ??_nrf24l01InterfaceInit 0021                  _nrf24l01CSHigh 0D1A               nrf24l01ISR@status 0020  
                _nrf24l01SPIEnd 0D26         ??_nrf24l01ReceivePacket 0078          __size_of_nrf24l01CELow 0003  
         __end_ofi1_flashUpdate 0EB9          __size_of_nrf24l01CSLow 0003            flashWriteByte@offset 0021  
                _flashWriteByte 06F6           ??i1_nrf24l01SetRXMode 0074                __size_of___awmod 0046  
              __size_of___lldiv 0053                __size_of___llmod 0043                ?_nrf24l01SPISend 0070  
                    _ANSELAbits 018C                      _ANSELCbits 018E                  ??_checkTXPower 0028  
              ?_nrf24l01GetPipe 0070                   _n_ADDRESS_MUL 1044                      strcat@from 0021  
        __end_of_nrf24l01CEHigh 0D17          __end_of_nrf24l01CSHigh 0D1D                        __ptext10 0029  
                      __ptext11 0D4A                        __ptext20 0421                        __ptext12 04A9  
                      __ptext21 0F9E                        __ptext13 0398                        __ptext30 0FCE  
                      __ptext22 04FD                        __ptext14 0674                        __ptext23 0D6E  
                      __ptext15 0F48                        __ptext40 0D3D                        __ptext32 0550  
                      __ptext24 07FE                        __ptext16 0DB2                        __ptext41 0D26  
                      __ptext33 059D                        __ptext25 06B7                        __ptext17 0243  
                      __ptext50 0DCB                        __ptext42 0D1A                        __ptext34 0D9A  
                      __ptext26 0E78                        __ptext18 0EFD                        __ptext43 0D2D  
                      __ptext35 0E38                        __ptext27 0EDA                        __ptext19 0732  
                      __ptext44 0D17                        __ptext36 076D                        __ptext28 06F6  
                      __ptext45 0D14                        __ptext37 0DE6                        __ptext29 0E58  
                      __ptext46 0F22                        __ptext38 0D35                        __ptext47 0D82  
                      __ptext39 0D1D                        __ptext48 0E98                        __ptext49 0F6E  
                  _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 0D2D                        _nrf24l01 005B  
                  _resetRomData 1000                     _OSCCON1bits 0919                    ??_setMessage 0043  
                    strcpy@from 0021   nrf24l01ChangeTXPower@addPower 0024         ??_nrf24l01ChangeTXPower 0026  
                 __size_of_main 00A6                   __size_of_loop 0114    nrf24l01InitRegisters@channel 002A  
        __end_of_flashWriteByte 0732    nrf24l01InitRegisters@feature 002C              exception@exception 007C  
                    _RC0PPSbits 0EA0                        _romArray 1FE0                   _flashReadByte 0FCE  
  nrf24l01InitRegisters@rfSetup 002D                      _RC1PPSbits 0EA1                    ?_getADCValue 002F  
                    _RC2PPSbits 0EA2  __size_of_nrf24l01InitRegisters 0106   __end_of_nrf24l01InitRegisters 0243  
                      int$flags 007E    nrf24l01InitRegisters@setupAW 002B                    _SSP1STATbits 0214  
                      main@pipe 00C2          nrf24l01ReceivePacket@i 007A                   _nrf24l01CELow 0D17  
                 _nrf24l01CSLow 0D1D              __end_of_setMessage 04FD                      _INTCONbits 000B  
     __size_ofi1_flashWriteByte 0030                 ?_nrf24l01CEHigh 0070                      _FVRCONbits 0117  
              ??i1_nrf24l01Send 0072                     ??_exception 007A                 ?_nrf24l01CSHigh 0070  
                __pstringtext10 1036                  __pstringtext11 103A                  __pstringtext12 103E  
                __pstringtext13 1042                  __pstringtext14 0000                        memset@p1 0021  
                     ultoa@base 0033                 ?_nrf24l01SPIEnd 0070                        intlevel1 0000  
                  _n_ADDRESS_P0 1019       __size_of_enableInterrupts 0008                      _PMCON1bits 0895  
              ___lldiv@dividend 0025               __CFG_CLKOUTEN$OFF 0000                 ?_flashWriteByte 0021  
  __size_of_nrf24l01GetRXPacket 0002                  ?_flashReadByte 0021            i1flashWriteByte@data 0072  
   nrf24l01InitRegisters@config 0031       __size_of_nrf24l01SPIStart 0008       __size_of_nrf24l01CheckACK 0020  
   nrf24l01InitRegisters@status 002E      nrf24l01ReceivePacket@width 0079                  ?_nrf24l01CELow 0070  
                 __pstringtext1 1000                   __pstringtext2 1019                   __pstringtext3 1044  
                 __pstringtext4 1013                   __pstringtext5 101E                   __pstringtext6 1023  
                 __pstringtext7 1028                   __pstringtext8 102D                   __pstringtext9 1032  
                ?_nrf24l01CSLow 0070                        ultoa@buf 003B                        ultoa@val 002F  
    nrf24l01InitRegisters@DynPD 0030                        strcat@cp 0024                        strcat@to 0025  
                      strcmp@s1 0074                        strcmp@s2 0070                ___lldiv@quotient 002A  
                      strcpy@cp 0024                        strlen@cp 0027                        strcpy@to 0025  
                    _WDTCONbits 0097                   ?_nrf24l01Init 0070                   ?_nrf24l01Send 0021  
                  ?_flashRealod 0070                      _STATUSbits 0003            flashReadByte@address 0028  
                  ?_flashUpdate 0070                    ?_nrf24l01ISR 0070            __end_of_checkTXPower 0D82  
           flashReadByte@offset 0021  
