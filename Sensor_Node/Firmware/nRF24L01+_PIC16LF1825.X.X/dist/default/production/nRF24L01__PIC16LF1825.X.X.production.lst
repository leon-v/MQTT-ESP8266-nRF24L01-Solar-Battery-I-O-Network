

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Tue Sep 04 13:49:19 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    27                           	psect	text1,local,class=CODE,merge=1,delta=2
    28                           	psect	text2,local,class=CODE,merge=1,delta=2
    29                           	psect	text3,local,class=CODE,merge=1,delta=2
    30                           	psect	text4,local,class=CODE,merge=1,delta=2
    31                           	psect	text5,local,class=CODE,merge=1,delta=2
    32                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text7,local,class=CODE,merge=1,delta=2
    34                           	psect	text8,local,class=CODE,merge=1,delta=2
    35                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text10,local,class=CODE,merge=1,delta=2
    37                           	psect	text11,local,class=CODE,merge=1,delta=2
    38                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text13,local,class=CODE,merge=1,delta=2
    40                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text15,local,class=CODE,merge=1,delta=2
    42                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text17,local,class=CODE,merge=1,delta=2
    44                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text19,local,class=CODE,merge=1,delta=2
    46                           	psect	text20,local,class=CODE,merge=1,delta=2
    47                           	psect	text21,local,class=CODE,merge=1,delta=2
    48                           	psect	text22,local,class=CODE,merge=1,delta=2
    49                           	psect	text23,local,class=CODE,merge=1,delta=2
    50                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text25,local,class=CODE,merge=1,delta=2
    52                           	psect	text26,local,class=CODE,merge=1,delta=2
    53                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text28,local,class=CODE,merge=1,delta=2
    55                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text39,local,class=CODE,merge=1,delta=2
    66                           	psect	text40,local,class=CODE,merge=1,delta=2
    67                           	psect	text41,local,class=CODE,merge=1,delta=2
    68                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    69                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text45,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	text46,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text47,local,class=CODE,merge=1,delta=2,group=1
    74                           	psect	text48,local,class=CODE,merge=1,delta=2
    75                           	psect	intentry,global,class=CODE,delta=2
    76                           	psect	text50,local,class=CODE,merge=1,delta=2
    77                           	dabs	1,0x74,12
    78  0000                     
    79                           ; Version 2.00
    80                           ; Generated 27/05/2018 GMT
    81                           ; 
    82                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC16LF18325 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000E                     	;# 
   127  0010                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0013                     	;# 
   131  0014                     	;# 
   132  0015                     	;# 
   133  0015                     	;# 
   134  0016                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001B                     	;# 
   142  001C                     	;# 
   143  001D                     	;# 
   144  001E                     	;# 
   145  001F                     	;# 
   146  008C                     	;# 
   147  008E                     	;# 
   148  0090                     	;# 
   149  0091                     	;# 
   150  0092                     	;# 
   151  0093                     	;# 
   152  0094                     	;# 
   153  0097                     	;# 
   154  009B                     	;# 
   155  009B                     	;# 
   156  009C                     	;# 
   157  009D                     	;# 
   158  009E                     	;# 
   159  009F                     	;# 
   160  010C                     	;# 
   161  010E                     	;# 
   162  0111                     	;# 
   163  0112                     	;# 
   164  0113                     	;# 
   165  0114                     	;# 
   166  0115                     	;# 
   167  0116                     	;# 
   168  0117                     	;# 
   169  0118                     	;# 
   170  0119                     	;# 
   171  018C                     	;# 
   172  018E                     	;# 
   173  0199                     	;# 
   174  0199                     	;# 
   175  0199                     	;# 
   176  019A                     	;# 
   177  019A                     	;# 
   178  019A                     	;# 
   179  019B                     	;# 
   180  019B                     	;# 
   181  019B                     	;# 
   182  019B                     	;# 
   183  019B                     	;# 
   184  019C                     	;# 
   185  019C                     	;# 
   186  019C                     	;# 
   187  019D                     	;# 
   188  019D                     	;# 
   189  019D                     	;# 
   190  019E                     	;# 
   191  019E                     	;# 
   192  019E                     	;# 
   193  019F                     	;# 
   194  019F                     	;# 
   195  019F                     	;# 
   196  019F                     	;# 
   197  019F                     	;# 
   198  020C                     	;# 
   199  020E                     	;# 
   200  0211                     	;# 
   201  0211                     	;# 
   202  0212                     	;# 
   203  0212                     	;# 
   204  0213                     	;# 
   205  0213                     	;# 
   206  0214                     	;# 
   207  0214                     	;# 
   208  0215                     	;# 
   209  0215                     	;# 
   210  0215                     	;# 
   211  0215                     	;# 
   212  0216                     	;# 
   213  0216                     	;# 
   214  0217                     	;# 
   215  0217                     	;# 
   216  0219                     	;# 
   217  021A                     	;# 
   218  021B                     	;# 
   219  021C                     	;# 
   220  021D                     	;# 
   221  021D                     	;# 
   222  021E                     	;# 
   223  021F                     	;# 
   224  028C                     	;# 
   225  028E                     	;# 
   226  0291                     	;# 
   227  0291                     	;# 
   228  0292                     	;# 
   229  0293                     	;# 
   230  0294                     	;# 
   231  0295                     	;# 
   232  0295                     	;# 
   233  0296                     	;# 
   234  0297                     	;# 
   235  0298                     	;# 
   236  029F                     	;# 
   237  030C                     	;# 
   238  030E                     	;# 
   239  0311                     	;# 
   240  0311                     	;# 
   241  0312                     	;# 
   242  0313                     	;# 
   243  0314                     	;# 
   244  0315                     	;# 
   245  0315                     	;# 
   246  0316                     	;# 
   247  0317                     	;# 
   248  0318                     	;# 
   249  038C                     	;# 
   250  038E                     	;# 
   251  0391                     	;# 
   252  0392                     	;# 
   253  0393                     	;# 
   254  0397                     	;# 
   255  0398                     	;# 
   256  0399                     	;# 
   257  039A                     	;# 
   258  039C                     	;# 
   259  039D                     	;# 
   260  039E                     	;# 
   261  039F                     	;# 
   262  0411                     	;# 
   263  0411                     	;# 
   264  0412                     	;# 
   265  0413                     	;# 
   266  0414                     	;# 
   267  0415                     	;# 
   268  0416                     	;# 
   269  0417                     	;# 
   270  0418                     	;# 
   271  0418                     	;# 
   272  0419                     	;# 
   273  041A                     	;# 
   274  041B                     	;# 
   275  041C                     	;# 
   276  041D                     	;# 
   277  041E                     	;# 
   278  041F                     	;# 
   279  0498                     	;# 
   280  0498                     	;# 
   281  0499                     	;# 
   282  049A                     	;# 
   283  049B                     	;# 
   284  049B                     	;# 
   285  049C                     	;# 
   286  049D                     	;# 
   287  049E                     	;# 
   288  049F                     	;# 
   289  0617                     	;# 
   290  0618                     	;# 
   291  0619                     	;# 
   292  0619                     	;# 
   293  061A                     	;# 
   294  061B                     	;# 
   295  061C                     	;# 
   296  061C                     	;# 
   297  061F                     	;# 
   298  0691                     	;# 
   299  0692                     	;# 
   300  0693                     	;# 
   301  0694                     	;# 
   302  0695                     	;# 
   303  0696                     	;# 
   304  0697                     	;# 
   305  0698                     	;# 
   306  0699                     	;# 
   307  0711                     	;# 
   308  0712                     	;# 
   309  0713                     	;# 
   310  0714                     	;# 
   311  0715                     	;# 
   312  0716                     	;# 
   313  0717                     	;# 
   314  0718                     	;# 
   315  0719                     	;# 
   316  0891                     	;# 
   317  0891                     	;# 
   318  0891                     	;# 
   319  0891                     	;# 
   320  0891                     	;# 
   321  0891                     	;# 
   322  0892                     	;# 
   323  0892                     	;# 
   324  0892                     	;# 
   325  0893                     	;# 
   326  0893                     	;# 
   327  0893                     	;# 
   328  0893                     	;# 
   329  0893                     	;# 
   330  0893                     	;# 
   331  0894                     	;# 
   332  0894                     	;# 
   333  0894                     	;# 
   334  0895                     	;# 
   335  0895                     	;# 
   336  0895                     	;# 
   337  0896                     	;# 
   338  0896                     	;# 
   339  0896                     	;# 
   340  089B                     	;# 
   341  0911                     	;# 
   342  0912                     	;# 
   343  0913                     	;# 
   344  0914                     	;# 
   345  0915                     	;# 
   346  0916                     	;# 
   347  0918                     	;# 
   348  0919                     	;# 
   349  091A                     	;# 
   350  091B                     	;# 
   351  091C                     	;# 
   352  091D                     	;# 
   353  091E                     	;# 
   354  091F                     	;# 
   355  0E0F                     	;# 
   356  0E10                     	;# 
   357  0E11                     	;# 
   358  0E12                     	;# 
   359  0E13                     	;# 
   360  0E14                     	;# 
   361  0E15                     	;# 
   362  0E16                     	;# 
   363  0E17                     	;# 
   364  0E18                     	;# 
   365  0E19                     	;# 
   366  0E1A                     	;# 
   367  0E1B                     	;# 
   368  0E1C                     	;# 
   369  0E1D                     	;# 
   370  0E1E                     	;# 
   371  0E1F                     	;# 
   372  0E20                     	;# 
   373  0E21                     	;# 
   374  0E22                     	;# 
   375  0E24                     	;# 
   376  0E25                     	;# 
   377  0E28                     	;# 
   378  0E29                     	;# 
   379  0E2A                     	;# 
   380  0E2B                     	;# 
   381  0E2C                     	;# 
   382  0E2D                     	;# 
   383  0E2E                     	;# 
   384  0E2F                     	;# 
   385  0E90                     	;# 
   386  0E91                     	;# 
   387  0E92                     	;# 
   388  0E94                     	;# 
   389  0E95                     	;# 
   390  0EA0                     	;# 
   391  0EA1                     	;# 
   392  0EA2                     	;# 
   393  0EA3                     	;# 
   394  0EA4                     	;# 
   395  0EA5                     	;# 
   396  0F0F                     	;# 
   397  0F10                     	;# 
   398  0F11                     	;# 
   399  0F12                     	;# 
   400  0F13                     	;# 
   401  0F14                     	;# 
   402  0F15                     	;# 
   403  0F16                     	;# 
   404  0F17                     	;# 
   405  0F18                     	;# 
   406  0F19                     	;# 
   407  0F1A                     	;# 
   408  0F1B                     	;# 
   409  0F1C                     	;# 
   410  0F1D                     	;# 
   411  0F1E                     	;# 
   412  0F1F                     	;# 
   413  0F20                     	;# 
   414  0F21                     	;# 
   415  0F22                     	;# 
   416  0F23                     	;# 
   417  0F24                     	;# 
   418  0F25                     	;# 
   419  0F26                     	;# 
   420  0F27                     	;# 
   421  0F28                     	;# 
   422  0F29                     	;# 
   423  0F2A                     	;# 
   424  0F2B                     	;# 
   425  0F2C                     	;# 
   426  0F2D                     	;# 
   427  0F2E                     	;# 
   428  0F2F                     	;# 
   429  0F30                     	;# 
   430  0F31                     	;# 
   431  0F32                     	;# 
   432  0F33                     	;# 
   433  0F34                     	;# 
   434  0F35                     	;# 
   435  0F36                     	;# 
   436  0F37                     	;# 
   437  0FE4                     	;# 
   438  0FE5                     	;# 
   439  0FE6                     	;# 
   440  0FE7                     	;# 
   441  0FE8                     	;# 
   442  0FE9                     	;# 
   443  0FEA                     	;# 
   444  0FEB                     	;# 
   445  0FED                     	;# 
   446  0FEE                     	;# 
   447  0FEF                     	;# 
   448  0000                     	;# 
   449  0001                     	;# 
   450  0002                     	;# 
   451  0003                     	;# 
   452  0004                     	;# 
   453  0005                     	;# 
   454  0006                     	;# 
   455  0007                     	;# 
   456  0008                     	;# 
   457  0009                     	;# 
   458  000A                     	;# 
   459  000B                     	;# 
   460  000C                     	;# 
   461  000E                     	;# 
   462  0010                     	;# 
   463  0011                     	;# 
   464  0012                     	;# 
   465  0013                     	;# 
   466  0014                     	;# 
   467  0015                     	;# 
   468  0015                     	;# 
   469  0016                     	;# 
   470  0016                     	;# 
   471  0017                     	;# 
   472  0018                     	;# 
   473  0019                     	;# 
   474  0019                     	;# 
   475  001A                     	;# 
   476  001B                     	;# 
   477  001C                     	;# 
   478  001D                     	;# 
   479  001E                     	;# 
   480  001F                     	;# 
   481  008C                     	;# 
   482  008E                     	;# 
   483  0090                     	;# 
   484  0091                     	;# 
   485  0092                     	;# 
   486  0093                     	;# 
   487  0094                     	;# 
   488  0097                     	;# 
   489  009B                     	;# 
   490  009B                     	;# 
   491  009C                     	;# 
   492  009D                     	;# 
   493  009E                     	;# 
   494  009F                     	;# 
   495  010C                     	;# 
   496  010E                     	;# 
   497  0111                     	;# 
   498  0112                     	;# 
   499  0113                     	;# 
   500  0114                     	;# 
   501  0115                     	;# 
   502  0116                     	;# 
   503  0117                     	;# 
   504  0118                     	;# 
   505  0119                     	;# 
   506  018C                     	;# 
   507  018E                     	;# 
   508  0199                     	;# 
   509  0199                     	;# 
   510  0199                     	;# 
   511  019A                     	;# 
   512  019A                     	;# 
   513  019A                     	;# 
   514  019B                     	;# 
   515  019B                     	;# 
   516  019B                     	;# 
   517  019B                     	;# 
   518  019B                     	;# 
   519  019C                     	;# 
   520  019C                     	;# 
   521  019C                     	;# 
   522  019D                     	;# 
   523  019D                     	;# 
   524  019D                     	;# 
   525  019E                     	;# 
   526  019E                     	;# 
   527  019E                     	;# 
   528  019F                     	;# 
   529  019F                     	;# 
   530  019F                     	;# 
   531  019F                     	;# 
   532  019F                     	;# 
   533  020C                     	;# 
   534  020E                     	;# 
   535  0211                     	;# 
   536  0211                     	;# 
   537  0212                     	;# 
   538  0212                     	;# 
   539  0213                     	;# 
   540  0213                     	;# 
   541  0214                     	;# 
   542  0214                     	;# 
   543  0215                     	;# 
   544  0215                     	;# 
   545  0215                     	;# 
   546  0215                     	;# 
   547  0216                     	;# 
   548  0216                     	;# 
   549  0217                     	;# 
   550  0217                     	;# 
   551  0219                     	;# 
   552  021A                     	;# 
   553  021B                     	;# 
   554  021C                     	;# 
   555  021D                     	;# 
   556  021D                     	;# 
   557  021E                     	;# 
   558  021F                     	;# 
   559  028C                     	;# 
   560  028E                     	;# 
   561  0291                     	;# 
   562  0291                     	;# 
   563  0292                     	;# 
   564  0293                     	;# 
   565  0294                     	;# 
   566  0295                     	;# 
   567  0295                     	;# 
   568  0296                     	;# 
   569  0297                     	;# 
   570  0298                     	;# 
   571  029F                     	;# 
   572  030C                     	;# 
   573  030E                     	;# 
   574  0311                     	;# 
   575  0311                     	;# 
   576  0312                     	;# 
   577  0313                     	;# 
   578  0314                     	;# 
   579  0315                     	;# 
   580  0315                     	;# 
   581  0316                     	;# 
   582  0317                     	;# 
   583  0318                     	;# 
   584  038C                     	;# 
   585  038E                     	;# 
   586  0391                     	;# 
   587  0392                     	;# 
   588  0393                     	;# 
   589  0397                     	;# 
   590  0398                     	;# 
   591  0399                     	;# 
   592  039A                     	;# 
   593  039C                     	;# 
   594  039D                     	;# 
   595  039E                     	;# 
   596  039F                     	;# 
   597  0411                     	;# 
   598  0411                     	;# 
   599  0412                     	;# 
   600  0413                     	;# 
   601  0414                     	;# 
   602  0415                     	;# 
   603  0416                     	;# 
   604  0417                     	;# 
   605  0418                     	;# 
   606  0418                     	;# 
   607  0419                     	;# 
   608  041A                     	;# 
   609  041B                     	;# 
   610  041C                     	;# 
   611  041D                     	;# 
   612  041E                     	;# 
   613  041F                     	;# 
   614  0498                     	;# 
   615  0498                     	;# 
   616  0499                     	;# 
   617  049A                     	;# 
   618  049B                     	;# 
   619  049B                     	;# 
   620  049C                     	;# 
   621  049D                     	;# 
   622  049E                     	;# 
   623  049F                     	;# 
   624  0617                     	;# 
   625  0618                     	;# 
   626  0619                     	;# 
   627  0619                     	;# 
   628  061A                     	;# 
   629  061B                     	;# 
   630  061C                     	;# 
   631  061C                     	;# 
   632  061F                     	;# 
   633  0691                     	;# 
   634  0692                     	;# 
   635  0693                     	;# 
   636  0694                     	;# 
   637  0695                     	;# 
   638  0696                     	;# 
   639  0697                     	;# 
   640  0698                     	;# 
   641  0699                     	;# 
   642  0711                     	;# 
   643  0712                     	;# 
   644  0713                     	;# 
   645  0714                     	;# 
   646  0715                     	;# 
   647  0716                     	;# 
   648  0717                     	;# 
   649  0718                     	;# 
   650  0719                     	;# 
   651  0891                     	;# 
   652  0891                     	;# 
   653  0891                     	;# 
   654  0891                     	;# 
   655  0891                     	;# 
   656  0891                     	;# 
   657  0892                     	;# 
   658  0892                     	;# 
   659  0892                     	;# 
   660  0893                     	;# 
   661  0893                     	;# 
   662  0893                     	;# 
   663  0893                     	;# 
   664  0893                     	;# 
   665  0893                     	;# 
   666  0894                     	;# 
   667  0894                     	;# 
   668  0894                     	;# 
   669  0895                     	;# 
   670  0895                     	;# 
   671  0895                     	;# 
   672  0896                     	;# 
   673  0896                     	;# 
   674  0896                     	;# 
   675  089B                     	;# 
   676  0911                     	;# 
   677  0912                     	;# 
   678  0913                     	;# 
   679  0914                     	;# 
   680  0915                     	;# 
   681  0916                     	;# 
   682  0918                     	;# 
   683  0919                     	;# 
   684  091A                     	;# 
   685  091B                     	;# 
   686  091C                     	;# 
   687  091D                     	;# 
   688  091E                     	;# 
   689  091F                     	;# 
   690  0E0F                     	;# 
   691  0E10                     	;# 
   692  0E11                     	;# 
   693  0E12                     	;# 
   694  0E13                     	;# 
   695  0E14                     	;# 
   696  0E15                     	;# 
   697  0E16                     	;# 
   698  0E17                     	;# 
   699  0E18                     	;# 
   700  0E19                     	;# 
   701  0E1A                     	;# 
   702  0E1B                     	;# 
   703  0E1C                     	;# 
   704  0E1D                     	;# 
   705  0E1E                     	;# 
   706  0E1F                     	;# 
   707  0E20                     	;# 
   708  0E21                     	;# 
   709  0E22                     	;# 
   710  0E24                     	;# 
   711  0E25                     	;# 
   712  0E28                     	;# 
   713  0E29                     	;# 
   714  0E2A                     	;# 
   715  0E2B                     	;# 
   716  0E2C                     	;# 
   717  0E2D                     	;# 
   718  0E2E                     	;# 
   719  0E2F                     	;# 
   720  0E90                     	;# 
   721  0E91                     	;# 
   722  0E92                     	;# 
   723  0E94                     	;# 
   724  0E95                     	;# 
   725  0EA0                     	;# 
   726  0EA1                     	;# 
   727  0EA2                     	;# 
   728  0EA3                     	;# 
   729  0EA4                     	;# 
   730  0EA5                     	;# 
   731  0F0F                     	;# 
   732  0F10                     	;# 
   733  0F11                     	;# 
   734  0F12                     	;# 
   735  0F13                     	;# 
   736  0F14                     	;# 
   737  0F15                     	;# 
   738  0F16                     	;# 
   739  0F17                     	;# 
   740  0F18                     	;# 
   741  0F19                     	;# 
   742  0F1A                     	;# 
   743  0F1B                     	;# 
   744  0F1C                     	;# 
   745  0F1D                     	;# 
   746  0F1E                     	;# 
   747  0F1F                     	;# 
   748  0F20                     	;# 
   749  0F21                     	;# 
   750  0F22                     	;# 
   751  0F23                     	;# 
   752  0F24                     	;# 
   753  0F25                     	;# 
   754  0F26                     	;# 
   755  0F27                     	;# 
   756  0F28                     	;# 
   757  0F29                     	;# 
   758  0F2A                     	;# 
   759  0F2B                     	;# 
   760  0F2C                     	;# 
   761  0F2D                     	;# 
   762  0F2E                     	;# 
   763  0F2F                     	;# 
   764  0F30                     	;# 
   765  0F31                     	;# 
   766  0F32                     	;# 
   767  0F33                     	;# 
   768  0F34                     	;# 
   769  0F35                     	;# 
   770  0F36                     	;# 
   771  0F37                     	;# 
   772  0FE4                     	;# 
   773  0FE5                     	;# 
   774  0FE6                     	;# 
   775  0FE7                     	;# 
   776  0FE8                     	;# 
   777  0FE9                     	;# 
   778  0FEA                     	;# 
   779  0FEB                     	;# 
   780  0FED                     	;# 
   781  0FEE                     	;# 
   782  0FEF                     	;# 
   783  0000                     	;# 
   784  0001                     	;# 
   785  0002                     	;# 
   786  0003                     	;# 
   787  0004                     	;# 
   788  0005                     	;# 
   789  0006                     	;# 
   790  0007                     	;# 
   791  0008                     	;# 
   792  0009                     	;# 
   793  000A                     	;# 
   794  000B                     	;# 
   795  000C                     	;# 
   796  000E                     	;# 
   797  0010                     	;# 
   798  0011                     	;# 
   799  0012                     	;# 
   800  0013                     	;# 
   801  0014                     	;# 
   802  0015                     	;# 
   803  0015                     	;# 
   804  0016                     	;# 
   805  0016                     	;# 
   806  0017                     	;# 
   807  0018                     	;# 
   808  0019                     	;# 
   809  0019                     	;# 
   810  001A                     	;# 
   811  001B                     	;# 
   812  001C                     	;# 
   813  001D                     	;# 
   814  001E                     	;# 
   815  001F                     	;# 
   816  008C                     	;# 
   817  008E                     	;# 
   818  0090                     	;# 
   819  0091                     	;# 
   820  0092                     	;# 
   821  0093                     	;# 
   822  0094                     	;# 
   823  0097                     	;# 
   824  009B                     	;# 
   825  009B                     	;# 
   826  009C                     	;# 
   827  009D                     	;# 
   828  009E                     	;# 
   829  009F                     	;# 
   830  010C                     	;# 
   831  010E                     	;# 
   832  0111                     	;# 
   833  0112                     	;# 
   834  0113                     	;# 
   835  0114                     	;# 
   836  0115                     	;# 
   837  0116                     	;# 
   838  0117                     	;# 
   839  0118                     	;# 
   840  0119                     	;# 
   841  018C                     	;# 
   842  018E                     	;# 
   843  0199                     	;# 
   844  0199                     	;# 
   845  0199                     	;# 
   846  019A                     	;# 
   847  019A                     	;# 
   848  019A                     	;# 
   849  019B                     	;# 
   850  019B                     	;# 
   851  019B                     	;# 
   852  019B                     	;# 
   853  019B                     	;# 
   854  019C                     	;# 
   855  019C                     	;# 
   856  019C                     	;# 
   857  019D                     	;# 
   858  019D                     	;# 
   859  019D                     	;# 
   860  019E                     	;# 
   861  019E                     	;# 
   862  019E                     	;# 
   863  019F                     	;# 
   864  019F                     	;# 
   865  019F                     	;# 
   866  019F                     	;# 
   867  019F                     	;# 
   868  020C                     	;# 
   869  020E                     	;# 
   870  0211                     	;# 
   871  0211                     	;# 
   872  0212                     	;# 
   873  0212                     	;# 
   874  0213                     	;# 
   875  0213                     	;# 
   876  0214                     	;# 
   877  0214                     	;# 
   878  0215                     	;# 
   879  0215                     	;# 
   880  0215                     	;# 
   881  0215                     	;# 
   882  0216                     	;# 
   883  0216                     	;# 
   884  0217                     	;# 
   885  0217                     	;# 
   886  0219                     	;# 
   887  021A                     	;# 
   888  021B                     	;# 
   889  021C                     	;# 
   890  021D                     	;# 
   891  021D                     	;# 
   892  021E                     	;# 
   893  021F                     	;# 
   894  028C                     	;# 
   895  028E                     	;# 
   896  0291                     	;# 
   897  0291                     	;# 
   898  0292                     	;# 
   899  0293                     	;# 
   900  0294                     	;# 
   901  0295                     	;# 
   902  0295                     	;# 
   903  0296                     	;# 
   904  0297                     	;# 
   905  0298                     	;# 
   906  029F                     	;# 
   907  030C                     	;# 
   908  030E                     	;# 
   909  0311                     	;# 
   910  0311                     	;# 
   911  0312                     	;# 
   912  0313                     	;# 
   913  0314                     	;# 
   914  0315                     	;# 
   915  0315                     	;# 
   916  0316                     	;# 
   917  0317                     	;# 
   918  0318                     	;# 
   919  038C                     	;# 
   920  038E                     	;# 
   921  0391                     	;# 
   922  0392                     	;# 
   923  0393                     	;# 
   924  0397                     	;# 
   925  0398                     	;# 
   926  0399                     	;# 
   927  039A                     	;# 
   928  039C                     	;# 
   929  039D                     	;# 
   930  039E                     	;# 
   931  039F                     	;# 
   932  0411                     	;# 
   933  0411                     	;# 
   934  0412                     	;# 
   935  0413                     	;# 
   936  0414                     	;# 
   937  0415                     	;# 
   938  0416                     	;# 
   939  0417                     	;# 
   940  0418                     	;# 
   941  0418                     	;# 
   942  0419                     	;# 
   943  041A                     	;# 
   944  041B                     	;# 
   945  041C                     	;# 
   946  041D                     	;# 
   947  041E                     	;# 
   948  041F                     	;# 
   949  0498                     	;# 
   950  0498                     	;# 
   951  0499                     	;# 
   952  049A                     	;# 
   953  049B                     	;# 
   954  049B                     	;# 
   955  049C                     	;# 
   956  049D                     	;# 
   957  049E                     	;# 
   958  049F                     	;# 
   959  0617                     	;# 
   960  0618                     	;# 
   961  0619                     	;# 
   962  0619                     	;# 
   963  061A                     	;# 
   964  061B                     	;# 
   965  061C                     	;# 
   966  061C                     	;# 
   967  061F                     	;# 
   968  0691                     	;# 
   969  0692                     	;# 
   970  0693                     	;# 
   971  0694                     	;# 
   972  0695                     	;# 
   973  0696                     	;# 
   974  0697                     	;# 
   975  0698                     	;# 
   976  0699                     	;# 
   977  0711                     	;# 
   978  0712                     	;# 
   979  0713                     	;# 
   980  0714                     	;# 
   981  0715                     	;# 
   982  0716                     	;# 
   983  0717                     	;# 
   984  0718                     	;# 
   985  0719                     	;# 
   986  0891                     	;# 
   987  0891                     	;# 
   988  0891                     	;# 
   989  0891                     	;# 
   990  0891                     	;# 
   991  0891                     	;# 
   992  0892                     	;# 
   993  0892                     	;# 
   994  0892                     	;# 
   995  0893                     	;# 
   996  0893                     	;# 
   997  0893                     	;# 
   998  0893                     	;# 
   999  0893                     	;# 
  1000  0893                     	;# 
  1001  0894                     	;# 
  1002  0894                     	;# 
  1003  0894                     	;# 
  1004  0895                     	;# 
  1005  0895                     	;# 
  1006  0895                     	;# 
  1007  0896                     	;# 
  1008  0896                     	;# 
  1009  0896                     	;# 
  1010  089B                     	;# 
  1011  0911                     	;# 
  1012  0912                     	;# 
  1013  0913                     	;# 
  1014  0914                     	;# 
  1015  0915                     	;# 
  1016  0916                     	;# 
  1017  0918                     	;# 
  1018  0919                     	;# 
  1019  091A                     	;# 
  1020  091B                     	;# 
  1021  091C                     	;# 
  1022  091D                     	;# 
  1023  091E                     	;# 
  1024  091F                     	;# 
  1025  0E0F                     	;# 
  1026  0E10                     	;# 
  1027  0E11                     	;# 
  1028  0E12                     	;# 
  1029  0E13                     	;# 
  1030  0E14                     	;# 
  1031  0E15                     	;# 
  1032  0E16                     	;# 
  1033  0E17                     	;# 
  1034  0E18                     	;# 
  1035  0E19                     	;# 
  1036  0E1A                     	;# 
  1037  0E1B                     	;# 
  1038  0E1C                     	;# 
  1039  0E1D                     	;# 
  1040  0E1E                     	;# 
  1041  0E1F                     	;# 
  1042  0E20                     	;# 
  1043  0E21                     	;# 
  1044  0E22                     	;# 
  1045  0E24                     	;# 
  1046  0E25                     	;# 
  1047  0E28                     	;# 
  1048  0E29                     	;# 
  1049  0E2A                     	;# 
  1050  0E2B                     	;# 
  1051  0E2C                     	;# 
  1052  0E2D                     	;# 
  1053  0E2E                     	;# 
  1054  0E2F                     	;# 
  1055  0E90                     	;# 
  1056  0E91                     	;# 
  1057  0E92                     	;# 
  1058  0E94                     	;# 
  1059  0E95                     	;# 
  1060  0EA0                     	;# 
  1061  0EA1                     	;# 
  1062  0EA2                     	;# 
  1063  0EA3                     	;# 
  1064  0EA4                     	;# 
  1065  0EA5                     	;# 
  1066  0F0F                     	;# 
  1067  0F10                     	;# 
  1068  0F11                     	;# 
  1069  0F12                     	;# 
  1070  0F13                     	;# 
  1071  0F14                     	;# 
  1072  0F15                     	;# 
  1073  0F16                     	;# 
  1074  0F17                     	;# 
  1075  0F18                     	;# 
  1076  0F19                     	;# 
  1077  0F1A                     	;# 
  1078  0F1B                     	;# 
  1079  0F1C                     	;# 
  1080  0F1D                     	;# 
  1081  0F1E                     	;# 
  1082  0F1F                     	;# 
  1083  0F20                     	;# 
  1084  0F21                     	;# 
  1085  0F22                     	;# 
  1086  0F23                     	;# 
  1087  0F24                     	;# 
  1088  0F25                     	;# 
  1089  0F26                     	;# 
  1090  0F27                     	;# 
  1091  0F28                     	;# 
  1092  0F29                     	;# 
  1093  0F2A                     	;# 
  1094  0F2B                     	;# 
  1095  0F2C                     	;# 
  1096  0F2D                     	;# 
  1097  0F2E                     	;# 
  1098  0F2F                     	;# 
  1099  0F30                     	;# 
  1100  0F31                     	;# 
  1101  0F32                     	;# 
  1102  0F33                     	;# 
  1103  0F34                     	;# 
  1104  0F35                     	;# 
  1105  0F36                     	;# 
  1106  0F37                     	;# 
  1107  0FE4                     	;# 
  1108  0FE5                     	;# 
  1109  0FE6                     	;# 
  1110  0FE7                     	;# 
  1111  0FE8                     	;# 
  1112  0FE9                     	;# 
  1113  0FEA                     	;# 
  1114  0FEB                     	;# 
  1115  0FED                     	;# 
  1116  0FEE                     	;# 
  1117  0FEF                     	;# 
  1118  0000                     	;# 
  1119  0001                     	;# 
  1120  0002                     	;# 
  1121  0003                     	;# 
  1122  0004                     	;# 
  1123  0005                     	;# 
  1124  0006                     	;# 
  1125  0007                     	;# 
  1126  0008                     	;# 
  1127  0009                     	;# 
  1128  000A                     	;# 
  1129  000B                     	;# 
  1130  000C                     	;# 
  1131  000E                     	;# 
  1132  0010                     	;# 
  1133  0011                     	;# 
  1134  0012                     	;# 
  1135  0013                     	;# 
  1136  0014                     	;# 
  1137  0015                     	;# 
  1138  0015                     	;# 
  1139  0016                     	;# 
  1140  0016                     	;# 
  1141  0017                     	;# 
  1142  0018                     	;# 
  1143  0019                     	;# 
  1144  0019                     	;# 
  1145  001A                     	;# 
  1146  001B                     	;# 
  1147  001C                     	;# 
  1148  001D                     	;# 
  1149  001E                     	;# 
  1150  001F                     	;# 
  1151  008C                     	;# 
  1152  008E                     	;# 
  1153  0090                     	;# 
  1154  0091                     	;# 
  1155  0092                     	;# 
  1156  0093                     	;# 
  1157  0094                     	;# 
  1158  0097                     	;# 
  1159  009B                     	;# 
  1160  009B                     	;# 
  1161  009C                     	;# 
  1162  009D                     	;# 
  1163  009E                     	;# 
  1164  009F                     	;# 
  1165  010C                     	;# 
  1166  010E                     	;# 
  1167  0111                     	;# 
  1168  0112                     	;# 
  1169  0113                     	;# 
  1170  0114                     	;# 
  1171  0115                     	;# 
  1172  0116                     	;# 
  1173  0117                     	;# 
  1174  0118                     	;# 
  1175  0119                     	;# 
  1176  018C                     	;# 
  1177  018E                     	;# 
  1178  0199                     	;# 
  1179  0199                     	;# 
  1180  0199                     	;# 
  1181  019A                     	;# 
  1182  019A                     	;# 
  1183  019A                     	;# 
  1184  019B                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019B                     	;# 
  1189  019C                     	;# 
  1190  019C                     	;# 
  1191  019C                     	;# 
  1192  019D                     	;# 
  1193  019D                     	;# 
  1194  019D                     	;# 
  1195  019E                     	;# 
  1196  019E                     	;# 
  1197  019E                     	;# 
  1198  019F                     	;# 
  1199  019F                     	;# 
  1200  019F                     	;# 
  1201  019F                     	;# 
  1202  019F                     	;# 
  1203  020C                     	;# 
  1204  020E                     	;# 
  1205  0211                     	;# 
  1206  0211                     	;# 
  1207  0212                     	;# 
  1208  0212                     	;# 
  1209  0213                     	;# 
  1210  0213                     	;# 
  1211  0214                     	;# 
  1212  0214                     	;# 
  1213  0215                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0215                     	;# 
  1217  0216                     	;# 
  1218  0216                     	;# 
  1219  0217                     	;# 
  1220  0217                     	;# 
  1221  0219                     	;# 
  1222  021A                     	;# 
  1223  021B                     	;# 
  1224  021C                     	;# 
  1225  021D                     	;# 
  1226  021D                     	;# 
  1227  021E                     	;# 
  1228  021F                     	;# 
  1229  028C                     	;# 
  1230  028E                     	;# 
  1231  0291                     	;# 
  1232  0291                     	;# 
  1233  0292                     	;# 
  1234  0293                     	;# 
  1235  0294                     	;# 
  1236  0295                     	;# 
  1237  0295                     	;# 
  1238  0296                     	;# 
  1239  0297                     	;# 
  1240  0298                     	;# 
  1241  029F                     	;# 
  1242  030C                     	;# 
  1243  030E                     	;# 
  1244  0311                     	;# 
  1245  0311                     	;# 
  1246  0312                     	;# 
  1247  0313                     	;# 
  1248  0314                     	;# 
  1249  0315                     	;# 
  1250  0315                     	;# 
  1251  0316                     	;# 
  1252  0317                     	;# 
  1253  0318                     	;# 
  1254  038C                     	;# 
  1255  038E                     	;# 
  1256  0391                     	;# 
  1257  0392                     	;# 
  1258  0393                     	;# 
  1259  0397                     	;# 
  1260  0398                     	;# 
  1261  0399                     	;# 
  1262  039A                     	;# 
  1263  039C                     	;# 
  1264  039D                     	;# 
  1265  039E                     	;# 
  1266  039F                     	;# 
  1267  0411                     	;# 
  1268  0411                     	;# 
  1269  0412                     	;# 
  1270  0413                     	;# 
  1271  0414                     	;# 
  1272  0415                     	;# 
  1273  0416                     	;# 
  1274  0417                     	;# 
  1275  0418                     	;# 
  1276  0418                     	;# 
  1277  0419                     	;# 
  1278  041A                     	;# 
  1279  041B                     	;# 
  1280  041C                     	;# 
  1281  041D                     	;# 
  1282  041E                     	;# 
  1283  041F                     	;# 
  1284  0498                     	;# 
  1285  0498                     	;# 
  1286  0499                     	;# 
  1287  049A                     	;# 
  1288  049B                     	;# 
  1289  049B                     	;# 
  1290  049C                     	;# 
  1291  049D                     	;# 
  1292  049E                     	;# 
  1293  049F                     	;# 
  1294  0617                     	;# 
  1295  0618                     	;# 
  1296  0619                     	;# 
  1297  0619                     	;# 
  1298  061A                     	;# 
  1299  061B                     	;# 
  1300  061C                     	;# 
  1301  061C                     	;# 
  1302  061F                     	;# 
  1303  0691                     	;# 
  1304  0692                     	;# 
  1305  0693                     	;# 
  1306  0694                     	;# 
  1307  0695                     	;# 
  1308  0696                     	;# 
  1309  0697                     	;# 
  1310  0698                     	;# 
  1311  0699                     	;# 
  1312  0711                     	;# 
  1313  0712                     	;# 
  1314  0713                     	;# 
  1315  0714                     	;# 
  1316  0715                     	;# 
  1317  0716                     	;# 
  1318  0717                     	;# 
  1319  0718                     	;# 
  1320  0719                     	;# 
  1321  0891                     	;# 
  1322  0891                     	;# 
  1323  0891                     	;# 
  1324  0891                     	;# 
  1325  0891                     	;# 
  1326  0891                     	;# 
  1327  0892                     	;# 
  1328  0892                     	;# 
  1329  0892                     	;# 
  1330  0893                     	;# 
  1331  0893                     	;# 
  1332  0893                     	;# 
  1333  0893                     	;# 
  1334  0893                     	;# 
  1335  0893                     	;# 
  1336  0894                     	;# 
  1337  0894                     	;# 
  1338  0894                     	;# 
  1339  0895                     	;# 
  1340  0895                     	;# 
  1341  0895                     	;# 
  1342  0896                     	;# 
  1343  0896                     	;# 
  1344  0896                     	;# 
  1345  089B                     	;# 
  1346  0911                     	;# 
  1347  0912                     	;# 
  1348  0913                     	;# 
  1349  0914                     	;# 
  1350  0915                     	;# 
  1351  0916                     	;# 
  1352  0918                     	;# 
  1353  0919                     	;# 
  1354  091A                     	;# 
  1355  091B                     	;# 
  1356  091C                     	;# 
  1357  091D                     	;# 
  1358  091E                     	;# 
  1359  091F                     	;# 
  1360  0E0F                     	;# 
  1361  0E10                     	;# 
  1362  0E11                     	;# 
  1363  0E12                     	;# 
  1364  0E13                     	;# 
  1365  0E14                     	;# 
  1366  0E15                     	;# 
  1367  0E16                     	;# 
  1368  0E17                     	;# 
  1369  0E18                     	;# 
  1370  0E19                     	;# 
  1371  0E1A                     	;# 
  1372  0E1B                     	;# 
  1373  0E1C                     	;# 
  1374  0E1D                     	;# 
  1375  0E1E                     	;# 
  1376  0E1F                     	;# 
  1377  0E20                     	;# 
  1378  0E21                     	;# 
  1379  0E22                     	;# 
  1380  0E24                     	;# 
  1381  0E25                     	;# 
  1382  0E28                     	;# 
  1383  0E29                     	;# 
  1384  0E2A                     	;# 
  1385  0E2B                     	;# 
  1386  0E2C                     	;# 
  1387  0E2D                     	;# 
  1388  0E2E                     	;# 
  1389  0E2F                     	;# 
  1390  0E90                     	;# 
  1391  0E91                     	;# 
  1392  0E92                     	;# 
  1393  0E94                     	;# 
  1394  0E95                     	;# 
  1395  0EA0                     	;# 
  1396  0EA1                     	;# 
  1397  0EA2                     	;# 
  1398  0EA3                     	;# 
  1399  0EA4                     	;# 
  1400  0EA5                     	;# 
  1401  0F0F                     	;# 
  1402  0F10                     	;# 
  1403  0F11                     	;# 
  1404  0F12                     	;# 
  1405  0F13                     	;# 
  1406  0F14                     	;# 
  1407  0F15                     	;# 
  1408  0F16                     	;# 
  1409  0F17                     	;# 
  1410  0F18                     	;# 
  1411  0F19                     	;# 
  1412  0F1A                     	;# 
  1413  0F1B                     	;# 
  1414  0F1C                     	;# 
  1415  0F1D                     	;# 
  1416  0F1E                     	;# 
  1417  0F1F                     	;# 
  1418  0F20                     	;# 
  1419  0F21                     	;# 
  1420  0F22                     	;# 
  1421  0F23                     	;# 
  1422  0F24                     	;# 
  1423  0F25                     	;# 
  1424  0F26                     	;# 
  1425  0F27                     	;# 
  1426  0F28                     	;# 
  1427  0F29                     	;# 
  1428  0F2A                     	;# 
  1429  0F2B                     	;# 
  1430  0F2C                     	;# 
  1431  0F2D                     	;# 
  1432  0F2E                     	;# 
  1433  0F2F                     	;# 
  1434  0F30                     	;# 
  1435  0F31                     	;# 
  1436  0F32                     	;# 
  1437  0F33                     	;# 
  1438  0F34                     	;# 
  1439  0F35                     	;# 
  1440  0F36                     	;# 
  1441  0F37                     	;# 
  1442  0FE4                     	;# 
  1443  0FE5                     	;# 
  1444  0FE6                     	;# 
  1445  0FE7                     	;# 
  1446  0FE8                     	;# 
  1447  0FE9                     	;# 
  1448  0FEA                     	;# 
  1449  0FEB                     	;# 
  1450  0FED                     	;# 
  1451  0FEE                     	;# 
  1452  0FEF                     	;# 
  1453  0000                     	;# 
  1454  0001                     	;# 
  1455  0002                     	;# 
  1456  0003                     	;# 
  1457  0004                     	;# 
  1458  0005                     	;# 
  1459  0006                     	;# 
  1460  0007                     	;# 
  1461  0008                     	;# 
  1462  0009                     	;# 
  1463  000A                     	;# 
  1464  000B                     	;# 
  1465  000C                     	;# 
  1466  000E                     	;# 
  1467  0010                     	;# 
  1468  0011                     	;# 
  1469  0012                     	;# 
  1470  0013                     	;# 
  1471  0014                     	;# 
  1472  0015                     	;# 
  1473  0015                     	;# 
  1474  0016                     	;# 
  1475  0016                     	;# 
  1476  0017                     	;# 
  1477  0018                     	;# 
  1478  0019                     	;# 
  1479  0019                     	;# 
  1480  001A                     	;# 
  1481  001B                     	;# 
  1482  001C                     	;# 
  1483  001D                     	;# 
  1484  001E                     	;# 
  1485  001F                     	;# 
  1486  008C                     	;# 
  1487  008E                     	;# 
  1488  0090                     	;# 
  1489  0091                     	;# 
  1490  0092                     	;# 
  1491  0093                     	;# 
  1492  0094                     	;# 
  1493  0097                     	;# 
  1494  009B                     	;# 
  1495  009B                     	;# 
  1496  009C                     	;# 
  1497  009D                     	;# 
  1498  009E                     	;# 
  1499  009F                     	;# 
  1500  010C                     	;# 
  1501  010E                     	;# 
  1502  0111                     	;# 
  1503  0112                     	;# 
  1504  0113                     	;# 
  1505  0114                     	;# 
  1506  0115                     	;# 
  1507  0116                     	;# 
  1508  0117                     	;# 
  1509  0118                     	;# 
  1510  0119                     	;# 
  1511  018C                     	;# 
  1512  018E                     	;# 
  1513  0199                     	;# 
  1514  0199                     	;# 
  1515  0199                     	;# 
  1516  019A                     	;# 
  1517  019A                     	;# 
  1518  019A                     	;# 
  1519  019B                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019C                     	;# 
  1525  019C                     	;# 
  1526  019C                     	;# 
  1527  019D                     	;# 
  1528  019D                     	;# 
  1529  019D                     	;# 
  1530  019E                     	;# 
  1531  019E                     	;# 
  1532  019E                     	;# 
  1533  019F                     	;# 
  1534  019F                     	;# 
  1535  019F                     	;# 
  1536  019F                     	;# 
  1537  019F                     	;# 
  1538  020C                     	;# 
  1539  020E                     	;# 
  1540  0211                     	;# 
  1541  0211                     	;# 
  1542  0212                     	;# 
  1543  0212                     	;# 
  1544  0213                     	;# 
  1545  0213                     	;# 
  1546  0214                     	;# 
  1547  0214                     	;# 
  1548  0215                     	;# 
  1549  0215                     	;# 
  1550  0215                     	;# 
  1551  0215                     	;# 
  1552  0216                     	;# 
  1553  0216                     	;# 
  1554  0217                     	;# 
  1555  0217                     	;# 
  1556  0219                     	;# 
  1557  021A                     	;# 
  1558  021B                     	;# 
  1559  021C                     	;# 
  1560  021D                     	;# 
  1561  021D                     	;# 
  1562  021E                     	;# 
  1563  021F                     	;# 
  1564  028C                     	;# 
  1565  028E                     	;# 
  1566  0291                     	;# 
  1567  0291                     	;# 
  1568  0292                     	;# 
  1569  0293                     	;# 
  1570  0294                     	;# 
  1571  0295                     	;# 
  1572  0295                     	;# 
  1573  0296                     	;# 
  1574  0297                     	;# 
  1575  0298                     	;# 
  1576  029F                     	;# 
  1577  030C                     	;# 
  1578  030E                     	;# 
  1579  0311                     	;# 
  1580  0311                     	;# 
  1581  0312                     	;# 
  1582  0313                     	;# 
  1583  0314                     	;# 
  1584  0315                     	;# 
  1585  0315                     	;# 
  1586  0316                     	;# 
  1587  0317                     	;# 
  1588  0318                     	;# 
  1589  038C                     	;# 
  1590  038E                     	;# 
  1591  0391                     	;# 
  1592  0392                     	;# 
  1593  0393                     	;# 
  1594  0397                     	;# 
  1595  0398                     	;# 
  1596  0399                     	;# 
  1597  039A                     	;# 
  1598  039C                     	;# 
  1599  039D                     	;# 
  1600  039E                     	;# 
  1601  039F                     	;# 
  1602  0411                     	;# 
  1603  0411                     	;# 
  1604  0412                     	;# 
  1605  0413                     	;# 
  1606  0414                     	;# 
  1607  0415                     	;# 
  1608  0416                     	;# 
  1609  0417                     	;# 
  1610  0418                     	;# 
  1611  0418                     	;# 
  1612  0419                     	;# 
  1613  041A                     	;# 
  1614  041B                     	;# 
  1615  041C                     	;# 
  1616  041D                     	;# 
  1617  041E                     	;# 
  1618  041F                     	;# 
  1619  0498                     	;# 
  1620  0498                     	;# 
  1621  0499                     	;# 
  1622  049A                     	;# 
  1623  049B                     	;# 
  1624  049B                     	;# 
  1625  049C                     	;# 
  1626  049D                     	;# 
  1627  049E                     	;# 
  1628  049F                     	;# 
  1629  0617                     	;# 
  1630  0618                     	;# 
  1631  0619                     	;# 
  1632  0619                     	;# 
  1633  061A                     	;# 
  1634  061B                     	;# 
  1635  061C                     	;# 
  1636  061C                     	;# 
  1637  061F                     	;# 
  1638  0691                     	;# 
  1639  0692                     	;# 
  1640  0693                     	;# 
  1641  0694                     	;# 
  1642  0695                     	;# 
  1643  0696                     	;# 
  1644  0697                     	;# 
  1645  0698                     	;# 
  1646  0699                     	;# 
  1647  0711                     	;# 
  1648  0712                     	;# 
  1649  0713                     	;# 
  1650  0714                     	;# 
  1651  0715                     	;# 
  1652  0716                     	;# 
  1653  0717                     	;# 
  1654  0718                     	;# 
  1655  0719                     	;# 
  1656  0891                     	;# 
  1657  0891                     	;# 
  1658  0891                     	;# 
  1659  0891                     	;# 
  1660  0891                     	;# 
  1661  0891                     	;# 
  1662  0892                     	;# 
  1663  0892                     	;# 
  1664  0892                     	;# 
  1665  0893                     	;# 
  1666  0893                     	;# 
  1667  0893                     	;# 
  1668  0893                     	;# 
  1669  0893                     	;# 
  1670  0893                     	;# 
  1671  0894                     	;# 
  1672  0894                     	;# 
  1673  0894                     	;# 
  1674  0895                     	;# 
  1675  0895                     	;# 
  1676  0895                     	;# 
  1677  0896                     	;# 
  1678  0896                     	;# 
  1679  0896                     	;# 
  1680  089B                     	;# 
  1681  0911                     	;# 
  1682  0912                     	;# 
  1683  0913                     	;# 
  1684  0914                     	;# 
  1685  0915                     	;# 
  1686  0916                     	;# 
  1687  0918                     	;# 
  1688  0919                     	;# 
  1689  091A                     	;# 
  1690  091B                     	;# 
  1691  091C                     	;# 
  1692  091D                     	;# 
  1693  091E                     	;# 
  1694  091F                     	;# 
  1695  0E0F                     	;# 
  1696  0E10                     	;# 
  1697  0E11                     	;# 
  1698  0E12                     	;# 
  1699  0E13                     	;# 
  1700  0E14                     	;# 
  1701  0E15                     	;# 
  1702  0E16                     	;# 
  1703  0E17                     	;# 
  1704  0E18                     	;# 
  1705  0E19                     	;# 
  1706  0E1A                     	;# 
  1707  0E1B                     	;# 
  1708  0E1C                     	;# 
  1709  0E1D                     	;# 
  1710  0E1E                     	;# 
  1711  0E1F                     	;# 
  1712  0E20                     	;# 
  1713  0E21                     	;# 
  1714  0E22                     	;# 
  1715  0E24                     	;# 
  1716  0E25                     	;# 
  1717  0E28                     	;# 
  1718  0E29                     	;# 
  1719  0E2A                     	;# 
  1720  0E2B                     	;# 
  1721  0E2C                     	;# 
  1722  0E2D                     	;# 
  1723  0E2E                     	;# 
  1724  0E2F                     	;# 
  1725  0E90                     	;# 
  1726  0E91                     	;# 
  1727  0E92                     	;# 
  1728  0E94                     	;# 
  1729  0E95                     	;# 
  1730  0EA0                     	;# 
  1731  0EA1                     	;# 
  1732  0EA2                     	;# 
  1733  0EA3                     	;# 
  1734  0EA4                     	;# 
  1735  0EA5                     	;# 
  1736  0F0F                     	;# 
  1737  0F10                     	;# 
  1738  0F11                     	;# 
  1739  0F12                     	;# 
  1740  0F13                     	;# 
  1741  0F14                     	;# 
  1742  0F15                     	;# 
  1743  0F16                     	;# 
  1744  0F17                     	;# 
  1745  0F18                     	;# 
  1746  0F19                     	;# 
  1747  0F1A                     	;# 
  1748  0F1B                     	;# 
  1749  0F1C                     	;# 
  1750  0F1D                     	;# 
  1751  0F1E                     	;# 
  1752  0F1F                     	;# 
  1753  0F20                     	;# 
  1754  0F21                     	;# 
  1755  0F22                     	;# 
  1756  0F23                     	;# 
  1757  0F24                     	;# 
  1758  0F25                     	;# 
  1759  0F26                     	;# 
  1760  0F27                     	;# 
  1761  0F28                     	;# 
  1762  0F29                     	;# 
  1763  0F2A                     	;# 
  1764  0F2B                     	;# 
  1765  0F2C                     	;# 
  1766  0F2D                     	;# 
  1767  0F2E                     	;# 
  1768  0F2F                     	;# 
  1769  0F30                     	;# 
  1770  0F31                     	;# 
  1771  0F32                     	;# 
  1772  0F33                     	;# 
  1773  0F34                     	;# 
  1774  0F35                     	;# 
  1775  0F36                     	;# 
  1776  0F37                     	;# 
  1777  0FE4                     	;# 
  1778  0FE5                     	;# 
  1779  0FE6                     	;# 
  1780  0FE7                     	;# 
  1781  0FE8                     	;# 
  1782  0FE9                     	;# 
  1783  0FEA                     	;# 
  1784  0FEB                     	;# 
  1785  0FED                     	;# 
  1786  0FEE                     	;# 
  1787  0FEF                     	;# 
  1788  0000                     	;# 
  1789  0001                     	;# 
  1790  0002                     	;# 
  1791  0003                     	;# 
  1792  0004                     	;# 
  1793  0005                     	;# 
  1794  0006                     	;# 
  1795  0007                     	;# 
  1796  0008                     	;# 
  1797  0009                     	;# 
  1798  000A                     	;# 
  1799  000B                     	;# 
  1800  000C                     	;# 
  1801  000E                     	;# 
  1802  0010                     	;# 
  1803  0011                     	;# 
  1804  0012                     	;# 
  1805  0013                     	;# 
  1806  0014                     	;# 
  1807  0015                     	;# 
  1808  0015                     	;# 
  1809  0016                     	;# 
  1810  0016                     	;# 
  1811  0017                     	;# 
  1812  0018                     	;# 
  1813  0019                     	;# 
  1814  0019                     	;# 
  1815  001A                     	;# 
  1816  001B                     	;# 
  1817  001C                     	;# 
  1818  001D                     	;# 
  1819  001E                     	;# 
  1820  001F                     	;# 
  1821  008C                     	;# 
  1822  008E                     	;# 
  1823  0090                     	;# 
  1824  0091                     	;# 
  1825  0092                     	;# 
  1826  0093                     	;# 
  1827  0094                     	;# 
  1828  0097                     	;# 
  1829  009B                     	;# 
  1830  009B                     	;# 
  1831  009C                     	;# 
  1832  009D                     	;# 
  1833  009E                     	;# 
  1834  009F                     	;# 
  1835  010C                     	;# 
  1836  010E                     	;# 
  1837  0111                     	;# 
  1838  0112                     	;# 
  1839  0113                     	;# 
  1840  0114                     	;# 
  1841  0115                     	;# 
  1842  0116                     	;# 
  1843  0117                     	;# 
  1844  0118                     	;# 
  1845  0119                     	;# 
  1846  018C                     	;# 
  1847  018E                     	;# 
  1848  0199                     	;# 
  1849  0199                     	;# 
  1850  0199                     	;# 
  1851  019A                     	;# 
  1852  019A                     	;# 
  1853  019A                     	;# 
  1854  019B                     	;# 
  1855  019B                     	;# 
  1856  019B                     	;# 
  1857  019B                     	;# 
  1858  019B                     	;# 
  1859  019C                     	;# 
  1860  019C                     	;# 
  1861  019C                     	;# 
  1862  019D                     	;# 
  1863  019D                     	;# 
  1864  019D                     	;# 
  1865  019E                     	;# 
  1866  019E                     	;# 
  1867  019E                     	;# 
  1868  019F                     	;# 
  1869  019F                     	;# 
  1870  019F                     	;# 
  1871  019F                     	;# 
  1872  019F                     	;# 
  1873  020C                     	;# 
  1874  020E                     	;# 
  1875  0211                     	;# 
  1876  0211                     	;# 
  1877  0212                     	;# 
  1878  0212                     	;# 
  1879  0213                     	;# 
  1880  0213                     	;# 
  1881  0214                     	;# 
  1882  0214                     	;# 
  1883  0215                     	;# 
  1884  0215                     	;# 
  1885  0215                     	;# 
  1886  0215                     	;# 
  1887  0216                     	;# 
  1888  0216                     	;# 
  1889  0217                     	;# 
  1890  0217                     	;# 
  1891  0219                     	;# 
  1892  021A                     	;# 
  1893  021B                     	;# 
  1894  021C                     	;# 
  1895  021D                     	;# 
  1896  021D                     	;# 
  1897  021E                     	;# 
  1898  021F                     	;# 
  1899  028C                     	;# 
  1900  028E                     	;# 
  1901  0291                     	;# 
  1902  0291                     	;# 
  1903  0292                     	;# 
  1904  0293                     	;# 
  1905  0294                     	;# 
  1906  0295                     	;# 
  1907  0295                     	;# 
  1908  0296                     	;# 
  1909  0297                     	;# 
  1910  0298                     	;# 
  1911  029F                     	;# 
  1912  030C                     	;# 
  1913  030E                     	;# 
  1914  0311                     	;# 
  1915  0311                     	;# 
  1916  0312                     	;# 
  1917  0313                     	;# 
  1918  0314                     	;# 
  1919  0315                     	;# 
  1920  0315                     	;# 
  1921  0316                     	;# 
  1922  0317                     	;# 
  1923  0318                     	;# 
  1924  038C                     	;# 
  1925  038E                     	;# 
  1926  0391                     	;# 
  1927  0392                     	;# 
  1928  0393                     	;# 
  1929  0397                     	;# 
  1930  0398                     	;# 
  1931  0399                     	;# 
  1932  039A                     	;# 
  1933  039C                     	;# 
  1934  039D                     	;# 
  1935  039E                     	;# 
  1936  039F                     	;# 
  1937  0411                     	;# 
  1938  0411                     	;# 
  1939  0412                     	;# 
  1940  0413                     	;# 
  1941  0414                     	;# 
  1942  0415                     	;# 
  1943  0416                     	;# 
  1944  0417                     	;# 
  1945  0418                     	;# 
  1946  0418                     	;# 
  1947  0419                     	;# 
  1948  041A                     	;# 
  1949  041B                     	;# 
  1950  041C                     	;# 
  1951  041D                     	;# 
  1952  041E                     	;# 
  1953  041F                     	;# 
  1954  0498                     	;# 
  1955  0498                     	;# 
  1956  0499                     	;# 
  1957  049A                     	;# 
  1958  049B                     	;# 
  1959  049B                     	;# 
  1960  049C                     	;# 
  1961  049D                     	;# 
  1962  049E                     	;# 
  1963  049F                     	;# 
  1964  0617                     	;# 
  1965  0618                     	;# 
  1966  0619                     	;# 
  1967  0619                     	;# 
  1968  061A                     	;# 
  1969  061B                     	;# 
  1970  061C                     	;# 
  1971  061C                     	;# 
  1972  061F                     	;# 
  1973  0691                     	;# 
  1974  0692                     	;# 
  1975  0693                     	;# 
  1976  0694                     	;# 
  1977  0695                     	;# 
  1978  0696                     	;# 
  1979  0697                     	;# 
  1980  0698                     	;# 
  1981  0699                     	;# 
  1982  0711                     	;# 
  1983  0712                     	;# 
  1984  0713                     	;# 
  1985  0714                     	;# 
  1986  0715                     	;# 
  1987  0716                     	;# 
  1988  0717                     	;# 
  1989  0718                     	;# 
  1990  0719                     	;# 
  1991  0891                     	;# 
  1992  0891                     	;# 
  1993  0891                     	;# 
  1994  0891                     	;# 
  1995  0891                     	;# 
  1996  0891                     	;# 
  1997  0892                     	;# 
  1998  0892                     	;# 
  1999  0892                     	;# 
  2000  0893                     	;# 
  2001  0893                     	;# 
  2002  0893                     	;# 
  2003  0893                     	;# 
  2004  0893                     	;# 
  2005  0893                     	;# 
  2006  0894                     	;# 
  2007  0894                     	;# 
  2008  0894                     	;# 
  2009  0895                     	;# 
  2010  0895                     	;# 
  2011  0895                     	;# 
  2012  0896                     	;# 
  2013  0896                     	;# 
  2014  0896                     	;# 
  2015  089B                     	;# 
  2016  0911                     	;# 
  2017  0912                     	;# 
  2018  0913                     	;# 
  2019  0914                     	;# 
  2020  0915                     	;# 
  2021  0916                     	;# 
  2022  0918                     	;# 
  2023  0919                     	;# 
  2024  091A                     	;# 
  2025  091B                     	;# 
  2026  091C                     	;# 
  2027  091D                     	;# 
  2028  091E                     	;# 
  2029  091F                     	;# 
  2030  0E0F                     	;# 
  2031  0E10                     	;# 
  2032  0E11                     	;# 
  2033  0E12                     	;# 
  2034  0E13                     	;# 
  2035  0E14                     	;# 
  2036  0E15                     	;# 
  2037  0E16                     	;# 
  2038  0E17                     	;# 
  2039  0E18                     	;# 
  2040  0E19                     	;# 
  2041  0E1A                     	;# 
  2042  0E1B                     	;# 
  2043  0E1C                     	;# 
  2044  0E1D                     	;# 
  2045  0E1E                     	;# 
  2046  0E1F                     	;# 
  2047  0E20                     	;# 
  2048  0E21                     	;# 
  2049  0E22                     	;# 
  2050  0E24                     	;# 
  2051  0E25                     	;# 
  2052  0E28                     	;# 
  2053  0E29                     	;# 
  2054  0E2A                     	;# 
  2055  0E2B                     	;# 
  2056  0E2C                     	;# 
  2057  0E2D                     	;# 
  2058  0E2E                     	;# 
  2059  0E2F                     	;# 
  2060  0E90                     	;# 
  2061  0E91                     	;# 
  2062  0E92                     	;# 
  2063  0E94                     	;# 
  2064  0E95                     	;# 
  2065  0EA0                     	;# 
  2066  0EA1                     	;# 
  2067  0EA2                     	;# 
  2068  0EA3                     	;# 
  2069  0EA4                     	;# 
  2070  0EA5                     	;# 
  2071  0F0F                     	;# 
  2072  0F10                     	;# 
  2073  0F11                     	;# 
  2074  0F12                     	;# 
  2075  0F13                     	;# 
  2076  0F14                     	;# 
  2077  0F15                     	;# 
  2078  0F16                     	;# 
  2079  0F17                     	;# 
  2080  0F18                     	;# 
  2081  0F19                     	;# 
  2082  0F1A                     	;# 
  2083  0F1B                     	;# 
  2084  0F1C                     	;# 
  2085  0F1D                     	;# 
  2086  0F1E                     	;# 
  2087  0F1F                     	;# 
  2088  0F20                     	;# 
  2089  0F21                     	;# 
  2090  0F22                     	;# 
  2091  0F23                     	;# 
  2092  0F24                     	;# 
  2093  0F25                     	;# 
  2094  0F26                     	;# 
  2095  0F27                     	;# 
  2096  0F28                     	;# 
  2097  0F29                     	;# 
  2098  0F2A                     	;# 
  2099  0F2B                     	;# 
  2100  0F2C                     	;# 
  2101  0F2D                     	;# 
  2102  0F2E                     	;# 
  2103  0F2F                     	;# 
  2104  0F30                     	;# 
  2105  0F31                     	;# 
  2106  0F32                     	;# 
  2107  0F33                     	;# 
  2108  0F34                     	;# 
  2109  0F35                     	;# 
  2110  0F36                     	;# 
  2111  0F37                     	;# 
  2112  0FE4                     	;# 
  2113  0FE5                     	;# 
  2114  0FE6                     	;# 
  2115  0FE7                     	;# 
  2116  0FE8                     	;# 
  2117  0FE9                     	;# 
  2118  0FEA                     	;# 
  2119  0FEB                     	;# 
  2120  0FED                     	;# 
  2121  0FEE                     	;# 
  2122  0FEF                     	;# 
  2123  0000                     	;# 
  2124  0001                     	;# 
  2125  0002                     	;# 
  2126  0003                     	;# 
  2127  0004                     	;# 
  2128  0005                     	;# 
  2129  0006                     	;# 
  2130  0007                     	;# 
  2131  0008                     	;# 
  2132  0009                     	;# 
  2133  000A                     	;# 
  2134  000B                     	;# 
  2135  000C                     	;# 
  2136  000E                     	;# 
  2137  0010                     	;# 
  2138  0011                     	;# 
  2139  0012                     	;# 
  2140  0013                     	;# 
  2141  0014                     	;# 
  2142  0015                     	;# 
  2143  0015                     	;# 
  2144  0016                     	;# 
  2145  0016                     	;# 
  2146  0017                     	;# 
  2147  0018                     	;# 
  2148  0019                     	;# 
  2149  0019                     	;# 
  2150  001A                     	;# 
  2151  001B                     	;# 
  2152  001C                     	;# 
  2153  001D                     	;# 
  2154  001E                     	;# 
  2155  001F                     	;# 
  2156  008C                     	;# 
  2157  008E                     	;# 
  2158  0090                     	;# 
  2159  0091                     	;# 
  2160  0092                     	;# 
  2161  0093                     	;# 
  2162  0094                     	;# 
  2163  0097                     	;# 
  2164  009B                     	;# 
  2165  009B                     	;# 
  2166  009C                     	;# 
  2167  009D                     	;# 
  2168  009E                     	;# 
  2169  009F                     	;# 
  2170  010C                     	;# 
  2171  010E                     	;# 
  2172  0111                     	;# 
  2173  0112                     	;# 
  2174  0113                     	;# 
  2175  0114                     	;# 
  2176  0115                     	;# 
  2177  0116                     	;# 
  2178  0117                     	;# 
  2179  0118                     	;# 
  2180  0119                     	;# 
  2181  018C                     	;# 
  2182  018E                     	;# 
  2183  0199                     	;# 
  2184  0199                     	;# 
  2185  0199                     	;# 
  2186  019A                     	;# 
  2187  019A                     	;# 
  2188  019A                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019B                     	;# 
  2192  019B                     	;# 
  2193  019B                     	;# 
  2194  019C                     	;# 
  2195  019C                     	;# 
  2196  019C                     	;# 
  2197  019D                     	;# 
  2198  019D                     	;# 
  2199  019D                     	;# 
  2200  019E                     	;# 
  2201  019E                     	;# 
  2202  019E                     	;# 
  2203  019F                     	;# 
  2204  019F                     	;# 
  2205  019F                     	;# 
  2206  019F                     	;# 
  2207  019F                     	;# 
  2208  020C                     	;# 
  2209  020E                     	;# 
  2210  0211                     	;# 
  2211  0211                     	;# 
  2212  0212                     	;# 
  2213  0212                     	;# 
  2214  0213                     	;# 
  2215  0213                     	;# 
  2216  0214                     	;# 
  2217  0214                     	;# 
  2218  0215                     	;# 
  2219  0215                     	;# 
  2220  0215                     	;# 
  2221  0215                     	;# 
  2222  0216                     	;# 
  2223  0216                     	;# 
  2224  0217                     	;# 
  2225  0217                     	;# 
  2226  0219                     	;# 
  2227  021A                     	;# 
  2228  021B                     	;# 
  2229  021C                     	;# 
  2230  021D                     	;# 
  2231  021D                     	;# 
  2232  021E                     	;# 
  2233  021F                     	;# 
  2234  028C                     	;# 
  2235  028E                     	;# 
  2236  0291                     	;# 
  2237  0291                     	;# 
  2238  0292                     	;# 
  2239  0293                     	;# 
  2240  0294                     	;# 
  2241  0295                     	;# 
  2242  0295                     	;# 
  2243  0296                     	;# 
  2244  0297                     	;# 
  2245  0298                     	;# 
  2246  029F                     	;# 
  2247  030C                     	;# 
  2248  030E                     	;# 
  2249  0311                     	;# 
  2250  0311                     	;# 
  2251  0312                     	;# 
  2252  0313                     	;# 
  2253  0314                     	;# 
  2254  0315                     	;# 
  2255  0315                     	;# 
  2256  0316                     	;# 
  2257  0317                     	;# 
  2258  0318                     	;# 
  2259  038C                     	;# 
  2260  038E                     	;# 
  2261  0391                     	;# 
  2262  0392                     	;# 
  2263  0393                     	;# 
  2264  0397                     	;# 
  2265  0398                     	;# 
  2266  0399                     	;# 
  2267  039A                     	;# 
  2268  039C                     	;# 
  2269  039D                     	;# 
  2270  039E                     	;# 
  2271  039F                     	;# 
  2272  0411                     	;# 
  2273  0411                     	;# 
  2274  0412                     	;# 
  2275  0413                     	;# 
  2276  0414                     	;# 
  2277  0415                     	;# 
  2278  0416                     	;# 
  2279  0417                     	;# 
  2280  0418                     	;# 
  2281  0418                     	;# 
  2282  0419                     	;# 
  2283  041A                     	;# 
  2284  041B                     	;# 
  2285  041C                     	;# 
  2286  041D                     	;# 
  2287  041E                     	;# 
  2288  041F                     	;# 
  2289  0498                     	;# 
  2290  0498                     	;# 
  2291  0499                     	;# 
  2292  049A                     	;# 
  2293  049B                     	;# 
  2294  049B                     	;# 
  2295  049C                     	;# 
  2296  049D                     	;# 
  2297  049E                     	;# 
  2298  049F                     	;# 
  2299  0617                     	;# 
  2300  0618                     	;# 
  2301  0619                     	;# 
  2302  0619                     	;# 
  2303  061A                     	;# 
  2304  061B                     	;# 
  2305  061C                     	;# 
  2306  061C                     	;# 
  2307  061F                     	;# 
  2308  0691                     	;# 
  2309  0692                     	;# 
  2310  0693                     	;# 
  2311  0694                     	;# 
  2312  0695                     	;# 
  2313  0696                     	;# 
  2314  0697                     	;# 
  2315  0698                     	;# 
  2316  0699                     	;# 
  2317  0711                     	;# 
  2318  0712                     	;# 
  2319  0713                     	;# 
  2320  0714                     	;# 
  2321  0715                     	;# 
  2322  0716                     	;# 
  2323  0717                     	;# 
  2324  0718                     	;# 
  2325  0719                     	;# 
  2326  0891                     	;# 
  2327  0891                     	;# 
  2328  0891                     	;# 
  2329  0891                     	;# 
  2330  0891                     	;# 
  2331  0891                     	;# 
  2332  0892                     	;# 
  2333  0892                     	;# 
  2334  0892                     	;# 
  2335  0893                     	;# 
  2336  0893                     	;# 
  2337  0893                     	;# 
  2338  0893                     	;# 
  2339  0893                     	;# 
  2340  0893                     	;# 
  2341  0894                     	;# 
  2342  0894                     	;# 
  2343  0894                     	;# 
  2344  0895                     	;# 
  2345  0895                     	;# 
  2346  0895                     	;# 
  2347  0896                     	;# 
  2348  0896                     	;# 
  2349  0896                     	;# 
  2350  089B                     	;# 
  2351  0911                     	;# 
  2352  0912                     	;# 
  2353  0913                     	;# 
  2354  0914                     	;# 
  2355  0915                     	;# 
  2356  0916                     	;# 
  2357  0918                     	;# 
  2358  0919                     	;# 
  2359  091A                     	;# 
  2360  091B                     	;# 
  2361  091C                     	;# 
  2362  091D                     	;# 
  2363  091E                     	;# 
  2364  091F                     	;# 
  2365  0E0F                     	;# 
  2366  0E10                     	;# 
  2367  0E11                     	;# 
  2368  0E12                     	;# 
  2369  0E13                     	;# 
  2370  0E14                     	;# 
  2371  0E15                     	;# 
  2372  0E16                     	;# 
  2373  0E17                     	;# 
  2374  0E18                     	;# 
  2375  0E19                     	;# 
  2376  0E1A                     	;# 
  2377  0E1B                     	;# 
  2378  0E1C                     	;# 
  2379  0E1D                     	;# 
  2380  0E1E                     	;# 
  2381  0E1F                     	;# 
  2382  0E20                     	;# 
  2383  0E21                     	;# 
  2384  0E22                     	;# 
  2385  0E24                     	;# 
  2386  0E25                     	;# 
  2387  0E28                     	;# 
  2388  0E29                     	;# 
  2389  0E2A                     	;# 
  2390  0E2B                     	;# 
  2391  0E2C                     	;# 
  2392  0E2D                     	;# 
  2393  0E2E                     	;# 
  2394  0E2F                     	;# 
  2395  0E90                     	;# 
  2396  0E91                     	;# 
  2397  0E92                     	;# 
  2398  0E94                     	;# 
  2399  0E95                     	;# 
  2400  0EA0                     	;# 
  2401  0EA1                     	;# 
  2402  0EA2                     	;# 
  2403  0EA3                     	;# 
  2404  0EA4                     	;# 
  2405  0EA5                     	;# 
  2406  0F0F                     	;# 
  2407  0F10                     	;# 
  2408  0F11                     	;# 
  2409  0F12                     	;# 
  2410  0F13                     	;# 
  2411  0F14                     	;# 
  2412  0F15                     	;# 
  2413  0F16                     	;# 
  2414  0F17                     	;# 
  2415  0F18                     	;# 
  2416  0F19                     	;# 
  2417  0F1A                     	;# 
  2418  0F1B                     	;# 
  2419  0F1C                     	;# 
  2420  0F1D                     	;# 
  2421  0F1E                     	;# 
  2422  0F1F                     	;# 
  2423  0F20                     	;# 
  2424  0F21                     	;# 
  2425  0F22                     	;# 
  2426  0F23                     	;# 
  2427  0F24                     	;# 
  2428  0F25                     	;# 
  2429  0F26                     	;# 
  2430  0F27                     	;# 
  2431  0F28                     	;# 
  2432  0F29                     	;# 
  2433  0F2A                     	;# 
  2434  0F2B                     	;# 
  2435  0F2C                     	;# 
  2436  0F2D                     	;# 
  2437  0F2E                     	;# 
  2438  0F2F                     	;# 
  2439  0F30                     	;# 
  2440  0F31                     	;# 
  2441  0F32                     	;# 
  2442  0F33                     	;# 
  2443  0F34                     	;# 
  2444  0F35                     	;# 
  2445  0F36                     	;# 
  2446  0F37                     	;# 
  2447  0FE4                     	;# 
  2448  0FE5                     	;# 
  2449  0FE6                     	;# 
  2450  0FE7                     	;# 
  2451  0FE8                     	;# 
  2452  0FE9                     	;# 
  2453  0FEA                     	;# 
  2454  0FEB                     	;# 
  2455  0FED                     	;# 
  2456  0FEE                     	;# 
  2457  0FEF                     	;# 
  2458                           
  2459                           	psect	idataBANK1
  2460  07FC                     __pidataBANK1:	
  2461 ;;nrf24l01Service@width	offset	0
  2462 ;;nrf24l01Service@i	offset	1
  2463 ;;strcmp@s1	offset	0
  2464 ;;strcmp@r	offset	1
  2465 ;;strcmp@s2	offset=-1 (param)
  2466 ;;nrf24l01SetTXPipe@pipe	offset	0
  2467 ;;___bmul@multiplier	offset	0
  2468 ;;___bmul@product	offset	1
  2469 ;;___bmul@multiplicand	offset=-1 (param)
  2470 ;;nrf24l01SendTXBuffer@packet	offset	0
  2471 ;;nrf24l01SendTXBuffer@i	offset	1
  2472 ;;nrf24l01SendTXBuffer@width	offset	2
  2473 ;;strlen@s	offset	0
  2474 ;;strlen@cp	offset	1
  2475 ;;nrf24l01SetRXMode@rxMode	offset	0
  2476 ;;nrf24l01Send@command	offset	0
  2477 ;;nrf24l01Send@data	offset=-1 (param)
  2478 ;;nrf24l01SPISend@data	offset	0
  2479 ;;memset@p	offset	0
  2480 ;;memset@p1	offset=-2 (param)
  2481 ;;memset@c	offset=-4 (param)
  2482 ;;memset@n	offset=-6 (param)
  2483 ;;nrf24l01Service@width	offset	0
  2484 ;;nrf24l01Service@i	offset	1
  2485 ;;strcmp@s1	offset	0
  2486 ;;strcmp@r	offset	1
  2487 ;;strcmp@s2	offset=-1 (param)
  2488 ;;nrf24l01SetTXPipe@pipe	offset	0
  2489 ;;___bmul@multiplier	offset	0
  2490 ;;___bmul@product	offset	1
  2491 ;;___bmul@multiplicand	offset=-1 (param)
  2492 ;;nrf24l01SendTXBuffer@packet	offset	0
  2493 ;;nrf24l01SendTXBuffer@i	offset	1
  2494 ;;nrf24l01SendTXBuffer@width	offset	2
  2495 ;;strlen@s	offset	0
  2496 ;;strlen@cp	offset	1
  2497 ;;nrf24l01SetRXMode@rxMode	offset	0
  2498 ;;nrf24l01Send@command	offset	0
  2499 ;;nrf24l01Send@data	offset=-1 (param)
  2500 ;;nrf24l01SPISend@data	offset	0
  2501 ;;memset@p	offset	0
  2502 ;;memset@p1	offset=-2 (param)
  2503 ;;memset@c	offset=-4 (param)
  2504 ;;memset@n	offset=-6 (param)
  2505                           
  2506                           
  2507                           ;initializer for _romData
  2508  07FC  3420               	retlw	low (_romDataMap| (0+256))
  2509                           
  2510                           	psect	stringtext1
  2511  1000                     __pstringtext1:	
  2512  1000                     _dpowers:	
  2513  1000  3401               	retlw	1
  2514  1001  3400               	retlw	0
  2515  1002  3400               	retlw	0
  2516  1003  3400               	retlw	0
  2517  1004  340A               	retlw	10
  2518  1005  3400               	retlw	0
  2519  1006  3400               	retlw	0
  2520  1007  3400               	retlw	0
  2521  1008  3464               	retlw	100
  2522  1009  3400               	retlw	0
  2523  100A  3400               	retlw	0
  2524  100B  3400               	retlw	0
  2525  100C  34E8               	retlw	232
  2526  100D  3403               	retlw	3
  2527  100E  3400               	retlw	0
  2528  100F  3400               	retlw	0
  2529  1010  3410               	retlw	16
  2530  1011  3427               	retlw	39
  2531  1012  3400               	retlw	0
  2532  1013  3400               	retlw	0
  2533  1014  34A0               	retlw	160
  2534  1015  3486               	retlw	134
  2535  1016  3401               	retlw	1
  2536  1017  3400               	retlw	0
  2537  1018  3440               	retlw	64
  2538  1019  3442               	retlw	66
  2539  101A  340F               	retlw	15
  2540  101B  3400               	retlw	0
  2541  101C  3480               	retlw	128
  2542  101D  3496               	retlw	150
  2543  101E  3498               	retlw	152
  2544  101F  3400               	retlw	0
  2545  1020  3400               	retlw	0
  2546  1021  34E1               	retlw	225
  2547  1022  34F5               	retlw	245
  2548  1023  3405               	retlw	5
  2549  1024  3400               	retlw	0
  2550  1025  34CA               	retlw	202
  2551  1026  349A               	retlw	154
  2552  1027  343B               	retlw	59
  2553  1028                     __end_of_dpowers:	
  2554                           
  2555                           	psect	stringtext2
  2556  103A                     __pstringtext2:	
  2557  103A                     _n_ADDRESS_P0:	
  2558  103A  34AD               	retlw	173
  2559  103B  3487               	retlw	135
  2560  103C  3466               	retlw	102
  2561  103D  34BC               	retlw	188
  2562  103E  34BB               	retlw	187
  2563  103F                     __end_of_n_ADDRESS_P0:	
  2564                           
  2565                           	psect	stringtext3
  2566  1028                     __pstringtext3:	
  2567  1028                     _n_ADDRESS_MUL:	
  2568  1028  3421               	retlw	33
  2569  1029                     __end_of_n_ADDRESS_MUL:	
  2570  001A                     _TMR1H	set	26
  2571  0019                     _TMR1L	set	25
  2572  001C                     _T1GCONbits	set	28
  2573  001B                     _T1CONbits	set	27
  2574  000B                     _INTCONbits	set	11
  2575  0011                     _PIR1bits	set	17
  2576  0010                     _PIR0bits	set	16
  2577  000C                     _PORTAbits	set	12
  2578  000E                     _PORTCbits	set	14
  2579  0003                     _STATUSbits	set	3
  2580  0091                     _PIE1bits	set	145
  2581  009E                     _ADCON1bits	set	158
  2582  009C                     _ADRESH	set	156
  2583  009B                     _ADRESL	set	155
  2584  009D                     _ADCON0bits	set	157
  2585  0090                     _PIE0bits	set	144
  2586  0097                     _WDTCONbits	set	151
  2587  008E                     _TRISCbits	set	142
  2588  008C                     _TRISAbits	set	140
  2589  0117                     _FVRCONbits	set	279
  2590  018E                     _ANSELCbits	set	398
  2591  018C                     _ANSELAbits	set	396
  2592  018E                     _ANSELC	set	398
  2593  018C                     _ANSELA	set	396
  2594  020C                     _WPUAbits	set	524
  2595  020E                     _WPUC	set	526
  2596  020C                     _WPUA	set	524
  2597  0211                     _SSP1BUF	set	529
  2598  0214                     _SSP1STATbits	set	532
  2599  0215                     _SSP1CON1bits	set	533
  2600  028C                     _ODCONAbits	set	652
  2601  028E                     _ODCONC	set	654
  2602  028C                     _ODCONA	set	652
  2603  0391                     _IOCAPbits	set	913
  2604  038E                     _INLVLC	set	910
  2605  038C                     _INLVLA	set	908
  2606  0896                     _NVMCON2	set	2198
  2607  0895                     _NVMCON1bits	set	2197
  2608  0893                     _NVMDATL	set	2195
  2609  0891                     _NVMADRL	set	2193
  2610  0892                     _NVMADRH	set	2194
  2611  0919                     _OSCCON1bits	set	2329
  2612  0EA0                     _RC0PPSbits	set	3744
  2613  0EA2                     _RC2PPSbits	set	3746
  2614  0EA1                     _RC1PPSbits	set	3745
  2615  1029                     STR_8:	
  2616  1029  3425               	retlw	37	;'%'
  2617  102A  346C               	retlw	108	;'l'
  2618  102B  3475               	retlw	117	;'u'
  2619  102C  342E               	retlw	46	;'.'
  2620  102D  3425               	retlw	37	;'%'
  2621  102E  3436               	retlw	54	;'6'
  2622  102F  342E               	retlw	46	;'.'
  2623  1030  3436               	retlw	54	;'6'
  2624  1031  346C               	retlw	108	;'l'
  2625  1032  3475               	retlw	117	;'u'
  2626  1033  3400               	retlw	0
  2627                           
  2628                           	psect	stringtext4
  2629  1034                     __pstringtext4:	
  2630  1034                     STR_3:	
  2631  1034  3443               	retlw	67	;'C'
  2632  1035  344F               	retlw	79	;'O'
  2633  1036  3455               	retlw	85	;'U'
  2634  1037  344E               	retlw	78	;'N'
  2635  1038  3454               	retlw	84	;'T'
  2636  1039  3400               	retlw	0
  2637                           
  2638                           	psect	stringtext5
  2639  103F                     __pstringtext5:	
  2640  103F                     STR_5:	
  2641  103F  3454               	retlw	84	;'T'
  2642  1040  3445               	retlw	69	;'E'
  2643  1041  344D               	retlw	77	;'M'
  2644  1042  3450               	retlw	80	;'P'
  2645  1043  3400               	retlw	0
  2646                           
  2647                           	psect	stringtext6
  2648  1044                     __pstringtext6:	
  2649  1044                     STR_4:	
  2650  1044  3456               	retlw	86	;'V'
  2651  1045  3442               	retlw	66	;'B'
  2652  1046  3441               	retlw	65	;'A'
  2653  1047  3454               	retlw	84	;'T'
  2654  1048  3400               	retlw	0
  2655                           
  2656                           	psect	stringtext7
  2657  1049                     __pstringtext7:	
  2658  1049                     STR_7:	
  2659  1049  3442               	retlw	66	;'B'
  2660  104A  344F               	retlw	79	;'O'
  2661  104B  344F               	retlw	79	;'O'
  2662  104C  3454               	retlw	84	;'T'
  2663  104D  3400               	retlw	0
  2664                           
  2665                           	psect	stringtext8
  2666  104E                     __pstringtext8:	
  2667  104E                     STR_6:	
  2668  104E  3455               	retlw	85	;'U'
  2669  104F  3457               	retlw	87	;'W'
  2670  1050  3454               	retlw	84	;'T'
  2671  1051  3400               	retlw	0
  2672                           
  2673                           	psect	stringtext9
  2674  1052                     __pstringtext9:	
  2675  1052                     STR_1:	
  2676  1052  342F               	retlw	47	;'/'
  2677  1053  3400               	retlw	0
  2678                           
  2679                           	psect	stringtext10
  2680  0000                     __pstringtext10:	
  2681  1052                     
  2682                           ; #config settings
  2683  0000                     
  2684                           	psect	cinit
  2685  002F                     start_initialization:	
  2686  002F                     __initialization:	
  2687                           
  2688                           ; Initialize objects allocated to BANK1
  2689  002F  0021               	movlb	1	; select bank1
  2690  0030  3187  27FC  3180   	fcall	__pidataBANK1	;fetch initializer
  2691  0033  00EB               	movwf	__pdataBANK1& (0+127)
  2692                           
  2693                           ; Clear objects allocated to BANK0
  2694  0034  3062               	movlw	low __pbssBANK0
  2695  0035  0084               	movwf	4
  2696  0036  3000               	movlw	high __pbssBANK0
  2697  0037  0085               	movwf	5
  2698  0038  3007               	movlw	7
  2699  0039  3188  2017  3180   	fcall	clear_ram0
  2700                           
  2701                           ; Clear objects allocated to BANK1
  2702  003C  30DF               	movlw	low __pbssBANK1
  2703  003D  0084               	movwf	4
  2704  003E  3000               	movlw	high __pbssBANK1
  2705  003F  0085               	movwf	5
  2706  0040  300C               	movlw	12
  2707  0041  3188  2017  3180   	fcall	clear_ram0
  2708                           
  2709                           ; Clear objects allocated to BANK2
  2710  0044  3020               	movlw	low __pbssBANK2
  2711  0045  0084               	movwf	4
  2712  0046  3001               	movlw	high __pbssBANK2
  2713  0047  0085               	movwf	5
  2714  0048  302D               	movlw	45
  2715  0049  3188  2017  3180   	fcall	clear_ram0
  2716                           
  2717                           ; Clear objects allocated to BANK3
  2718  004C  30A0               	movlw	low __pbssBANK3
  2719  004D  0084               	movwf	4
  2720  004E  3001               	movlw	high __pbssBANK3
  2721  004F  0085               	movwf	5
  2722  0050  3042               	movlw	66
  2723  0051  3188  2017         	fcall	clear_ram0
  2724  0053                     end_of_initialization:	
  2725                           ;End of C runtime variable initialization code
  2726                           
  2727  0053                     __end_of__initialization:	
  2728  0053  0020               	movlb	0
  2729                           
  2730                           ;Initialize the stack pointer (FSR1)
  2731  0054  306D               	movlw	low ___sp
  2732  0055  0086               	movwf	6
  2733  0056  3021               	movlw	high ___sp
  2734  0057  0087               	movwf	7
  2735  0058  318E  2EC6         	ljmp	_main	;jump to C main() function
  2736                           
  2737                           	psect	bssBANK0
  2738  0062                     __pbssBANK0:	
  2739  0062                     _status:	
  2740  0062                     	ds	5
  2741  0067                     _waiting:	
  2742  0067                     	ds	1
  2743  0068                     _lastTXPacket:	
  2744  0068                     	ds	1
  2745                           
  2746                           	psect	bssBANK1
  2747  00DF                     __pbssBANK1:	
  2748  00DF                     _distance:	
  2749  00DF                     	ds	2
  2750  00E1                     _isr:	
  2751  00E1                     	ds	2
  2752  00E3                     _rcount:	
  2753  00E3                     	ds	2
  2754  00E5                     _rlimit:	
  2755  00E5                     	ds	2
  2756  00E7                     _rloop:	
  2757  00E7                     	ds	2
  2758  00E9                     _counter:	
  2759  00E9                     	ds	2
  2760                           
  2761                           	psect	dataBANK1
  2762  00EB                     __pdataBANK1:	
  2763  00EB                     _romData:	
  2764  00EB                     	ds	1
  2765                           
  2766                           	psect	bssBANK2
  2767  0120                     __pbssBANK2:	
  2768  0120                     _romDataMap:	
  2769  0120                     	ds	28
  2770  013C                     ftoa@buf:	
  2771  013C                     	ds	17
  2772                           
  2773                           	psect	bssBANK3
  2774  01A0                     __pbssBANK3:	
  2775  01A0                     _RXPacket:	
  2776  01A0                     	ds	33
  2777  01C1                     _TXPacket:	
  2778  01C1                     	ds	33
  2779                           
  2780                           	psect	clrtext
  2781  0817                     clear_ram0:	
  2782                           ;	Called with FSR0 containing the base address, and
  2783                           ;	WREG with the size to clear
  2784                           
  2785  0817  0064               	clrwdt	;clear the watchdog before getting into this loop
  2786  0818                     clrloop0:	
  2787  0818  0180               	clrf	0	;clear RAM location pointed to by FSR
  2788  0819  3101               	addfsr 0,1
  2789  081A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2790  081B  2818               	goto	clrloop0	;have we reached the end yet?
  2791  081C  3400               	retlw	0	;all done for this memory range, return
  2792                           
  2793                           	psect	cstackBANK4
  2794  0220                     __pcstackBANK4:	
  2795  0220                     loop@vt:	
  2796                           
  2797                           ; 3 bytes @ 0x0
  2798  0220                     	ds	3
  2799  0223                     loop@ta:	
  2800                           
  2801                           ; 3 bytes @ 0x3
  2802  0223                     	ds	3
  2803  0226                     _loop$2248:	
  2804                           
  2805                           ; 3 bytes @ 0x6
  2806  0226                     	ds	3
  2807  0229                     _loop$2249:	
  2808                           
  2809                           ; 3 bytes @ 0x9
  2810  0229                     	ds	3
  2811  022C                     loop@packet:	
  2812                           
  2813                           ; 33 bytes @ 0xC
  2814  022C                     	ds	33
  2815                           
  2816                           	psect	cstackBANK1
  2817  00A0                     __pcstackBANK1:	
  2818  00A0                     ?_ftoa:	
  2819  00A0                     ftoa@f:	
  2820                           ; 1 bytes @ 0x0
  2821                           
  2822                           
  2823                           ; 3 bytes @ 0x0
  2824  00A0                     	ds	3
  2825  00A3                     ftoa@status:	
  2826                           
  2827                           ; 1 bytes @ 0x3
  2828  00A3                     	ds	1
  2829  00A4                     ftoa@rem:	
  2830                           
  2831                           ; 4 bytes @ 0x4
  2832  00A4                     	ds	4
  2833  00A8                     ftoa@l:	
  2834                           
  2835                           ; 4 bytes @ 0x8
  2836  00A8                     	ds	4
  2837  00AC                     ftoa@cp:	
  2838                           
  2839                           ; 1 bytes @ 0xC
  2840  00AC                     	ds	1
  2841  00AD                     ?_strcat:	
  2842  00AD                     strcat@to:	
  2843                           ; 2 bytes @ 0xD
  2844                           
  2845                           
  2846                           ; 2 bytes @ 0xD
  2847  00AD                     	ds	2
  2848  00AF                     strcat@from:	
  2849                           
  2850                           ; 2 bytes @ 0xF
  2851  00AF                     	ds	2
  2852  00B1                     strcat@cp:	
  2853                           
  2854                           ; 2 bytes @ 0x11
  2855  00B1                     	ds	2
  2856  00B3                     ?_sendMessage:	
  2857  00B3                     sendMessage@packet:	
  2858                           ; 1 bytes @ 0x13
  2859                           
  2860                           
  2861                           ; 2 bytes @ 0x13
  2862  00B3                     	ds	2
  2863  00B5                     sendMessage@topic:	
  2864                           
  2865                           ; 2 bytes @ 0x15
  2866  00B5                     	ds	2
  2867  00B7                     sendMessage@value:	
  2868                           
  2869                           ; 3 bytes @ 0x17
  2870  00B7                     	ds	3
  2871  00BA                     sendMessage@ftoaStatus:	
  2872                           
  2873                           ; 2 bytes @ 0x1A
  2874  00BA                     	ds	2
  2875  00BC                     ??_main:	
  2876                           
  2877                           ; 1 bytes @ 0x1C
  2878  00BC                     	ds	1
  2879  00BD                     main@pipe:	
  2880                           
  2881                           ; 1 bytes @ 0x1D
  2882  00BD                     	ds	1
  2883  00BE                     main@packet:	
  2884                           
  2885                           ; 33 bytes @ 0x1E
  2886  00BE                     	ds	33
  2887                           
  2888                           	psect	cstackCOMMON
  2889  0070                     __pcstackCOMMON:	
  2890  0070                     ?_isdigit:	
  2891  0070                     ?_EEPROMWrite:	
  2892                           ; 1 bit 
  2893                           
  2894  0070                     ?_nrf24l01ISR:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     ??_nrf24l01ISR:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ?_nrf24l01Init:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ?_nrf24l01SetRXPipe:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ??_nrf24l01SetRXPipe:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     ?_EEPROMRead:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ??_isdigit:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     ??___ftpack:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0070                     ?_nrf24l01InterfaceInit:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0070                     ??_nrf24l01InterfaceInit:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ?_resetWDT:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     ??_resetWDT:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     ?_sleepMs:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     ?_exception:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     ?_ISR:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0070                     ?_loop:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0070                     ?_nrf24l01GetPipe:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0070                     ?_main:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0070                     ?_nrf24l01InitRegisters:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0070                     ??___lldiv:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0070                     ??___ftge:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0070                     ??___llmod:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960  0070                     ?_strcpy:	
  2961                           ; 1 bytes @ 0x0
  2962                           
  2963  0070                     ?___wmul:	
  2964                           ; 2 bytes @ 0x0
  2965                           
  2966  0070                     ?___lwmod:	
  2967                           ; 2 bytes @ 0x0
  2968                           
  2969  0070                     ?___awtoft:	
  2970                           ; 2 bytes @ 0x0
  2971                           
  2972  0070                     ?___lbtoft:	
  2973                           ; 3 bytes @ 0x0
  2974                           
  2975  0070                     ?___lltoft:	
  2976                           ; 3 bytes @ 0x0
  2977                           
  2978  0070                     ?___lwtoft:	
  2979                           ; 3 bytes @ 0x0
  2980                           
  2981  0070                     ___llmod@counter:	
  2982                           ; 3 bytes @ 0x0
  2983                           
  2984  0070                     _isdigit$1995:	
  2985                           ; 1 bytes @ 0x0
  2986                           
  2987  0070                     sleepMs@milliseconds:	
  2988                           ; 1 bytes @ 0x0
  2989                           
  2990  0070                     EEPROMWrite@address:	
  2991                           ; 2 bytes @ 0x0
  2992                           
  2993  0070                     EEPROMRead@address:	
  2994                           ; 2 bytes @ 0x0
  2995                           
  2996  0070                     ___wmul@multiplier:	
  2997                           ; 2 bytes @ 0x0
  2998                           
  2999  0070                     ___awtoft@c:	
  3000                           ; 2 bytes @ 0x0
  3001                           
  3002  0070                     ___lwmod@divisor:	
  3003                           ; 2 bytes @ 0x0
  3004                           
  3005  0070                     ___lwtoft@c:	
  3006                           ; 2 bytes @ 0x0
  3007                           
  3008  0070                     strcpy@to:	
  3009                           ; 2 bytes @ 0x0
  3010                           
  3011  0070                     ___lltoft@c:	
  3012                           ; 2 bytes @ 0x0
  3013                           
  3014                           
  3015                           ; 4 bytes @ 0x0
  3016  0070                     	ds	1
  3017  0071                     nrf24l01SetRXPipe@pipe:	
  3018  0071                     isdigit@c:	
  3019                           ; 1 bytes @ 0x1
  3020                           
  3021                           
  3022                           ; 1 bytes @ 0x1
  3023  0071                     	ds	1
  3024  0072                     ??_EEPROMRead:	
  3025  0072                     ??_sleepMs:	
  3026                           ; 1 bytes @ 0x2
  3027                           
  3028  0072                     nrf24l01SetRXPipe@enRXAddr:	
  3029                           ; 1 bytes @ 0x2
  3030                           
  3031  0072                     EEPROMWrite@data:	
  3032                           ; 1 bytes @ 0x2
  3033                           
  3034  0072                     ___wmul@multiplicand:	
  3035                           ; 1 bytes @ 0x2
  3036                           
  3037  0072                     ___lwmod@dividend:	
  3038                           ; 2 bytes @ 0x2
  3039                           
  3040  0072                     strcpy@from:	
  3041                           ; 2 bytes @ 0x2
  3042                           
  3043                           
  3044                           ; 2 bytes @ 0x2
  3045  0072                     	ds	1
  3046  0073                     ??_EEPROMWrite:	
  3047  0073                     ??_nrf24l01InitRegisters:	
  3048                           ; 1 bytes @ 0x3
  3049                           
  3050  0073                     ??___awtoft:	
  3051                           ; 1 bytes @ 0x3
  3052                           
  3053  0073                     ??___lwtoft:	
  3054                           ; 1 bytes @ 0x3
  3055                           
  3056  0073                     sleepMs@wdtps:	
  3057                           ; 1 bytes @ 0x3
  3058                           
  3059  0073                     EEPROMWrite@GIEBitValue:	
  3060                           ; 1 bytes @ 0x3
  3061                           
  3062  0073                     ___awtoft@sign:	
  3063                           ; 1 bytes @ 0x3
  3064                           
  3065                           
  3066                           ; 1 bytes @ 0x3
  3067  0073                     	ds	1
  3068  0074                     ??_strcpy:	
  3069  0074                     ??_strcat:	
  3070                           ; 1 bytes @ 0x4
  3071                           
  3072  0074                     ??_ftoa:	
  3073                           ; 1 bytes @ 0x4
  3074                           
  3075  0074                     ??_nrf24l01SendPacket:	
  3076                           ; 1 bytes @ 0x4
  3077                           
  3078  0074                     ??_exception:	
  3079                           ; 1 bytes @ 0x4
  3080                           
  3081  0074                     ??_sleepListren:	
  3082                           ; 1 bytes @ 0x4
  3083                           
  3084  0074                     ??_sendMessage:	
  3085                           ; 1 bytes @ 0x4
  3086                           
  3087  0074                     ??_loop:	
  3088                           ; 1 bytes @ 0x4
  3089                           
  3090  0074                     ??___wmul:	
  3091                           ; 1 bytes @ 0x4
  3092                           
  3093  0074                     ??___ftmul:	
  3094                           ; 1 bytes @ 0x4
  3095                           
  3096  0074                     ??___ftneg:	
  3097                           ; 1 bytes @ 0x4
  3098                           
  3099  0074                     ??___ftsub:	
  3100                           ; 1 bytes @ 0x4
  3101                           
  3102  0074                     ??___fttol:	
  3103                           ; 1 bytes @ 0x4
  3104                           
  3105  0074                     ??___lbtoft:	
  3106                           ; 1 bytes @ 0x4
  3107                           
  3108  0074                     ??___lltoft:	
  3109                           ; 1 bytes @ 0x4
  3110                           
  3111  0074                     ??___lwmod:	
  3112                           ; 1 bytes @ 0x4
  3113                           
  3114                           
  3115                           	psect	cstackBANK0
  3116  0020                     __pcstackBANK0:	
  3117                           ; 1 bytes @ 0x4
  3118                           
  3119  0020                     ??_ISR:	
  3120                           
  3121                           ; 1 bytes @ 0x0
  3122  0020                     	ds	7
  3123  0027                     ?___ftge:	
  3124  0027                     ?_sleepListren:	
  3125                           ; 1 bit 
  3126                           
  3127  0027                     ?___ftpack:	
  3128                           ; 1 bytes @ 0x7
  3129                           
  3130  0027                     ?___lldiv:	
  3131                           ; 3 bytes @ 0x7
  3132                           
  3133  0027                     exception@exception:	
  3134                           ; 4 bytes @ 0x7
  3135                           
  3136  0027                     nrf24l01InitRegisters@channel:	
  3137                           ; 1 bytes @ 0x7
  3138                           
  3139  0027                     ___lwmod@counter:	
  3140                           ; 1 bytes @ 0x7
  3141                           
  3142  0027                     sleepListren@seconds:	
  3143                           ; 1 bytes @ 0x7
  3144                           
  3145  0027                     ___wmul@product:	
  3146                           ; 2 bytes @ 0x7
  3147                           
  3148  0027                     strcpy@cp:	
  3149                           ; 2 bytes @ 0x7
  3150                           
  3151  0027                     ___ftpack@arg:	
  3152                           ; 2 bytes @ 0x7
  3153                           
  3154  0027                     ___ftge@ff1:	
  3155                           ; 3 bytes @ 0x7
  3156                           
  3157  0027                     ___lldiv@divisor:	
  3158                           ; 3 bytes @ 0x7
  3159                           
  3160                           
  3161                           ; 4 bytes @ 0x7
  3162  0027                     	ds	1
  3163  0028                     ??_nrf24l01GetPipe:	
  3164  0028                     nrf24l01InitRegisters@setupAW:	
  3165                           ; 1 bytes @ 0x8
  3166                           
  3167                           
  3168                           ; 1 bytes @ 0x8
  3169  0028                     	ds	1
  3170  0029                     ?_nrf24l01SendPacket:	
  3171  0029                     nrf24l01GetPipe@pipe:	
  3172                           ; 1 bytes @ 0x9
  3173                           
  3174  0029                     nrf24l01InitRegisters@feature:	
  3175                           ; 1 bytes @ 0x9
  3176                           
  3177  0029                     nrf24l01SendPacket@txPacket:	
  3178                           ; 1 bytes @ 0x9
  3179                           
  3180                           
  3181                           ; 2 bytes @ 0x9
  3182  0029                     	ds	1
  3183  002A                     nrf24l01GetPipe@name:	
  3184  002A                     nrf24l01InitRegisters@rfSetup:	
  3185                           ; 1 bytes @ 0xA
  3186                           
  3187  002A                     ___ftpack@exp:	
  3188                           ; 1 bytes @ 0xA
  3189                           
  3190  002A                     ___ftge@ff2:	
  3191                           ; 1 bytes @ 0xA
  3192                           
  3193                           
  3194                           ; 3 bytes @ 0xA
  3195  002A                     	ds	1
  3196  002B                     nrf24l01GetPipe@i:	
  3197  002B                     nrf24l01InitRegisters@enAA:	
  3198                           ; 1 bytes @ 0xB
  3199                           
  3200  002B                     ___ftpack@sign:	
  3201                           ; 1 bytes @ 0xB
  3202                           
  3203  002B                     nrf24l01SendPacket@loopCount:	
  3204                           ; 1 bytes @ 0xB
  3205                           
  3206  002B                     ___lldiv@dividend:	
  3207                           ; 2 bytes @ 0xB
  3208                           
  3209                           
  3210                           ; 4 bytes @ 0xB
  3211  002B                     	ds	1
  3212  002C                     ?___ftadd:	
  3213  002C                     nrf24l01InitRegisters@DynPD:	
  3214                           ; 3 bytes @ 0xC
  3215                           
  3216  002C                     ___lbtoft@c:	
  3217                           ; 1 bytes @ 0xC
  3218                           
  3219  002C                     ___lltoft@exp:	
  3220                           ; 1 bytes @ 0xC
  3221                           
  3222  002C                     ___ftadd@f1:	
  3223                           ; 1 bytes @ 0xC
  3224                           
  3225                           
  3226                           ; 3 bytes @ 0xC
  3227  002C                     	ds	1
  3228  002D                     nrf24l01InitRegisters@i:	
  3229                           
  3230                           ; 2 bytes @ 0xD
  3231  002D                     	ds	2
  3232  002F                     ??_nrf24l01Init:	
  3233  002F                     ___ftadd@f2:	
  3234                           ; 1 bytes @ 0xF
  3235                           
  3236  002F                     ___lldiv@quotient:	
  3237                           ; 3 bytes @ 0xF
  3238                           
  3239                           
  3240                           ; 4 bytes @ 0xF
  3241  002F                     	ds	3
  3242  0032                     ??___ftadd:	
  3243                           
  3244                           ; 1 bytes @ 0x12
  3245  0032                     	ds	1
  3246  0033                     ___lldiv@counter:	
  3247  0033                     ___ftadd@sign:	
  3248                           ; 1 bytes @ 0x13
  3249                           
  3250                           
  3251                           ; 1 bytes @ 0x13
  3252  0033                     	ds	1
  3253  0034                     ?___llmod:	
  3254  0034                     ___ftadd@exp2:	
  3255                           ; 4 bytes @ 0x14
  3256                           
  3257  0034                     ___llmod@divisor:	
  3258                           ; 1 bytes @ 0x14
  3259                           
  3260                           
  3261                           ; 4 bytes @ 0x14
  3262  0034                     	ds	1
  3263  0035                     ___ftadd@exp1:	
  3264                           
  3265                           ; 1 bytes @ 0x15
  3266  0035                     	ds	1
  3267  0036                     ?___ftdiv:	
  3268  0036                     ?___ftsub:	
  3269                           ; 3 bytes @ 0x16
  3270                           
  3271  0036                     ___ftdiv@f2:	
  3272                           ; 3 bytes @ 0x16
  3273                           
  3274  0036                     ___ftsub@f2:	
  3275                           ; 3 bytes @ 0x16
  3276                           
  3277                           
  3278                           ; 3 bytes @ 0x16
  3279  0036                     	ds	2
  3280  0038                     ___llmod@dividend:	
  3281                           
  3282                           ; 4 bytes @ 0x18
  3283  0038                     	ds	1
  3284  0039                     ___ftdiv@f1:	
  3285  0039                     ___ftsub@f1:	
  3286                           ; 3 bytes @ 0x19
  3287                           
  3288                           
  3289                           ; 3 bytes @ 0x19
  3290  0039                     	ds	3
  3291  003C                     ??___ftdiv:	
  3292  003C                     ?_sprintf:	
  3293                           ; 1 bytes @ 0x1C
  3294                           
  3295  003C                     sprintf@f:	
  3296                           ; 2 bytes @ 0x1C
  3297                           
  3298                           
  3299                           ; 2 bytes @ 0x1C
  3300  003C                     	ds	1
  3301  003D                     ___ftdiv@cntr:	
  3302                           
  3303                           ; 1 bytes @ 0x1D
  3304  003D                     	ds	1
  3305  003E                     ___ftdiv@f3:	
  3306                           
  3307                           ; 3 bytes @ 0x1E
  3308  003E                     	ds	3
  3309  0041                     ___ftdiv@exp:	
  3310                           
  3311                           ; 1 bytes @ 0x21
  3312  0041                     	ds	1
  3313  0042                     ___ftdiv@sign:	
  3314                           
  3315                           ; 1 bytes @ 0x22
  3316  0042                     	ds	1
  3317  0043                     ?_getADCValue:	
  3318                           
  3319                           ; 3 bytes @ 0x23
  3320  0043                     	ds	3
  3321  0046                     ??_sprintf:	
  3322  0046                     ??_getADCValue:	
  3323                           ; 1 bytes @ 0x26
  3324                           
  3325                           
  3326                           ; 1 bytes @ 0x26
  3327  0046                     	ds	1
  3328  0047                     getADCValue@channel:	
  3329                           
  3330                           ; 1 bytes @ 0x27
  3331  0047                     	ds	1
  3332  0048                     getADCValue@adcLoop:	
  3333                           
  3334                           ; 1 bytes @ 0x28
  3335  0048                     	ds	1
  3336  0049                     getADCValue@adcSum:	
  3337                           
  3338                           ; 3 bytes @ 0x29
  3339  0049                     	ds	1
  3340  004A                     sprintf@flag:	
  3341                           
  3342                           ; 1 bytes @ 0x2A
  3343  004A                     	ds	1
  3344  004B                     sprintf@ap:	
  3345                           
  3346                           ; 1 bytes @ 0x2B
  3347  004B                     	ds	1
  3348  004C                     ?___ftmul:	
  3349  004C                     ?___ftneg:	
  3350                           ; 3 bytes @ 0x2C
  3351                           
  3352  004C                     ___ftmul@f1:	
  3353                           ; 3 bytes @ 0x2C
  3354                           
  3355  004C                     ___ftneg@f1:	
  3356                           ; 3 bytes @ 0x2C
  3357                           
  3358  004C                     sprintf@val:	
  3359                           ; 3 bytes @ 0x2C
  3360                           
  3361                           
  3362                           ; 4 bytes @ 0x2C
  3363  004C                     	ds	3
  3364  004F                     ___ftmul@f2:	
  3365                           
  3366                           ; 3 bytes @ 0x2F
  3367  004F                     	ds	1
  3368  0050                     sprintf@sp:	
  3369                           
  3370                           ; 1 bytes @ 0x30
  3371  0050                     	ds	1
  3372  0051                     sprintf@width:	
  3373                           
  3374                           ; 2 bytes @ 0x31
  3375  0051                     	ds	1
  3376  0052                     ___ftmul@exp:	
  3377                           
  3378                           ; 1 bytes @ 0x32
  3379  0052                     	ds	1
  3380  0053                     sprintf@prec:	
  3381  0053                     ___ftmul@f3_as_product:	
  3382                           ; 2 bytes @ 0x33
  3383                           
  3384                           
  3385                           ; 3 bytes @ 0x33
  3386  0053                     	ds	2
  3387  0055                     sprintf@c:	
  3388                           
  3389                           ; 1 bytes @ 0x35
  3390  0055                     	ds	1
  3391  0056                     ___ftmul@cntr:	
  3392                           
  3393                           ; 1 bytes @ 0x36
  3394  0056                     	ds	1
  3395  0057                     ___ftmul@sign:	
  3396                           
  3397                           ; 1 bytes @ 0x37
  3398  0057                     	ds	1
  3399  0058                     ?___fttol:	
  3400  0058                     ___fttol@f1:	
  3401                           ; 4 bytes @ 0x38
  3402                           
  3403                           
  3404                           ; 3 bytes @ 0x38
  3405  0058                     	ds	4
  3406  005C                     ___fttol@sign1:	
  3407                           
  3408                           ; 1 bytes @ 0x3C
  3409  005C                     	ds	1
  3410  005D                     ___fttol@lval:	
  3411                           
  3412                           ; 4 bytes @ 0x3D
  3413  005D                     	ds	4
  3414  0061                     ___fttol@exp1:	
  3415                           
  3416                           ; 1 bytes @ 0x41
  3417  0061                     	ds	1
  3418                           
  3419                           	psect	maintext
  3420  0EC6                     __pmaintext:	
  3421 ;;
  3422 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3423 ;;
  3424 ;; *************** function _main *****************
  3425 ;; Defined at:
  3426 ;;		line 173 in file "main.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;		None
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;  packet         33   30[BANK1 ] struct .
  3431 ;;  pipe            1   29[BANK1 ] unsigned char 
  3432 ;; Return value:  Size  Location     Type
  3433 ;;                  1    wreg      void 
  3434 ;; Registers used:
  3435 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  3436 ;; Tracked objects:
  3437 ;;		On entry : B1F/0
  3438 ;;		On exit  : 0/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3442 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3443 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3444 ;;      Totals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  3445 ;;Total ram usage:       35 bytes
  3446 ;; Hardware stack levels required when called:   15
  3447 ;; This function calls:
  3448 ;;		_EEPROMRead
  3449 ;;		_EEPROMWrite
  3450 ;;		___lbtoft
  3451 ;;		_loop
  3452 ;;		_nrf24l01GetPipe
  3453 ;;		_nrf24l01Init
  3454 ;;		_nrf24l01SetRXPipe
  3455 ;;		_nrf24l01SetTXPipe
  3456 ;;		_sendMessage
  3457 ;;		_strcpy
  3458 ;; This function is called by:
  3459 ;;		Startup code after reset
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           
  3464                           ;psect for function _main
  3465  0EC6                     _main:	
  3466                           
  3467                           ;main.c: 177: ANSELA = 0x00;
  3468                           
  3469                           ;incstack = 0
  3470                           ; Regs used in _main: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  3471  0EC6  0023               	movlb	3	; select bank3
  3472  0EC7  018C               	clrf	12	;volatile
  3473                           
  3474                           ;main.c: 178: ANSELC = 0x00;
  3475  0EC8  018E               	clrf	14	;volatile
  3476                           
  3477                           ;main.c: 180: ODCONA = 0x00;
  3478  0EC9  0025               	movlb	5	; select bank5
  3479  0ECA  018C               	clrf	12	;volatile
  3480                           
  3481                           ;main.c: 181: ODCONC = 0x00;
  3482  0ECB  018E               	clrf	14	;volatile
  3483                           
  3484                           ;main.c: 186: INLVLA = 0x00;
  3485  0ECC  0027               	movlb	7	; select bank7
  3486  0ECD  018C               	clrf	12	;volatile
  3487                           
  3488                           ;main.c: 187: INLVLC = 0x00;
  3489  0ECE  018E               	clrf	14	;volatile
  3490                           
  3491                           ;main.c: 189: WPUA = 0x00;
  3492  0ECF  0024               	movlb	4	; select bank4
  3493  0ED0  018C               	clrf	12	;volatile
  3494                           
  3495                           ;main.c: 190: WPUC = 0x00;
  3496  0ED1  018E               	clrf	14	;volatile
  3497                           
  3498                           ;main.c: 192: TRISCbits.TRISC5 = 0;
  3499  0ED2  0021               	movlb	1	; select bank1
  3500  0ED3  128E               	bcf	14,5	;volatile
  3501                           
  3502                           ;main.c: 193: TRISCbits.TRISC4 = 0;
  3503  0ED4  120E               	bcf	14,4	;volatile
  3504                           
  3505                           ;main.c: 195: PORTCbits.RC4 = 0;
  3506  0ED5  0020               	movlb	0	; select bank0
  3507  0ED6  120E               	bcf	14,4	;volatile
  3508                           
  3509                           ;main.c: 202: INTCONbits.PEIE = 0;
  3510  0ED7  130B               	bcf	11,6	;volatile
  3511                           
  3512                           ;main.c: 203: INTCONbits.GIE = 0;
  3513  0ED8  138B               	bcf	11,7	;volatile
  3514                           
  3515                           ;main.c: 205: OSCCON1bits.NOSC = 0b000;
  3516  0ED9  308F               	movlw	-113
  3517  0EDA  0032               	movlb	18	; select bank18
  3518  0EDB  0599               	andwf	25,f	;volatile
  3519                           
  3520                           ;main.c: 206: OSCCON1bits.NDIV = 0b000;
  3521  0EDC  30F0               	movlw	-16
  3522  0EDD  0599               	andwf	25,f	;volatile
  3523                           
  3524                           ;main.c: 208: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3525  0EDE  300B               	movlw	11
  3526  0EDF  0021               	movlb	1	; select bank1
  3527  0EE0  00BC               	movwf	??_main^(0+128)
  3528  0EE1  3062               	movlw	98
  3529  0EE2                     u5387:	
  3530  0EE2  0B89               	decfsz	9,f
  3531  0EE3  2EE2               	goto	u5387
  3532  0EE4  0BBC               	decfsz	??_main^(0+128),f
  3533  0EE5  2EE2               	goto	u5387
  3534  0EE6  0000               	nop
  3535                           
  3536                           ;main.c: 212: strcpy(romData->name, "UWT");
  3537  0EE7  0021               	movlb	1	; select bank1
  3538  0EE8  086B               	movf	_romData^(0+128),w
  3539  0EE9  3E01               	addlw	1
  3540  0EEA  00F0               	movwf	strcpy@to
  3541  0EEB  3001               	movlw	1
  3542  0EEC  00F1               	movwf	strcpy@to+1
  3543  0EED  304E               	movlw	low (STR_6| (0+32768))
  3544  0EEE  00F2               	movwf	strcpy@from
  3545  0EEF  3090               	movlw	high (STR_6| (0+32768))
  3546  0EF0  00F3               	movwf	strcpy@from+1
  3547  0EF1  3188  20E9  318E   	fcall	_strcpy
  3548                           
  3549                           ;main.c: 214: nrf24l01Init();
  3550  0EF4  3189  21BB  318E   	fcall	_nrf24l01Init
  3551                           
  3552                           ;main.c: 216: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3553  0EF7  0021               	movlb	1	; select bank1
  3554  0EF8  086B               	movf	_romData^(0+128),w
  3555  0EF9  3E01               	addlw	1
  3556  0EFA  318B  2303  318E   	fcall	_nrf24l01GetPipe
  3557  0EFD  00FF               	movwf	127
  3558  0EFE  087F               	movf	127,w
  3559  0EFF  0021               	movlb	1	; select bank1
  3560  0F00  00BD               	movwf	main@pipe^(0+128)
  3561                           
  3562                           ;main.c: 217: nrf24l01SetTXPipe(pipe);
  3563  0F01  083D               	movf	main@pipe^(0+128),w
  3564  0F02  318B  23AE  318E   	fcall	_nrf24l01SetTXPipe
  3565                           
  3566                           ;main.c: 218: nrf24l01SetRXPipe(pipe);
  3567  0F05  083D               	movf	main@pipe^(0+128),w
  3568  0F06  3189  2160  318E   	fcall	_nrf24l01SetRXPipe
  3569                           
  3570                           ;main.c: 222: ADCON0bits.ADON = 0;
  3571  0F09  0021               	movlb	1	; select bank1
  3572  0F0A  101D               	bcf	29,0	;volatile
  3573                           
  3574                           ;main.c: 225: PORTAbits.RA4 = 0;
  3575  0F0B  0020               	movlb	0	; select bank0
  3576  0F0C  120C               	bcf	12,4	;volatile
  3577                           
  3578                           ;main.c: 226: TRISAbits.TRISA4 = 1;
  3579  0F0D  0021               	movlb	1	; select bank1
  3580  0F0E  160C               	bsf	12,4	;volatile
  3581                           
  3582                           ;main.c: 227: WPUAbits.WPUA4 = 0;
  3583  0F0F  0024               	movlb	4	; select bank4
  3584  0F10  120C               	bcf	12,4	;volatile
  3585                           
  3586                           ;main.c: 228: ODCONAbits.ODCA4 = 1;
  3587  0F11  0025               	movlb	5	; select bank5
  3588  0F12  160C               	bsf	12,4	;volatile
  3589                           
  3590                           ;main.c: 229: ANSELAbits.ANSA4 = 1;
  3591  0F13  0023               	movlb	3	; select bank3
  3592  0F14  160C               	bsf	12,4	;volatile
  3593                           
  3594                           ;main.c: 232: ANSELCbits.ANSC3 = 1;
  3595  0F15  158E               	bsf	14,3	;volatile
  3596                           
  3597                           ;main.c: 233: TRISCbits.TRISC3 = 1;
  3598  0F16  0021               	movlb	1	; select bank1
  3599  0F17  158E               	bsf	14,3	;volatile
  3600                           
  3601                           ;main.c: 236: FVRCONbits.TSEN = 1;
  3602  0F18  0022               	movlb	2	; select bank2
  3603  0F19  1697               	bsf	23,5	;volatile
  3604                           
  3605                           ;main.c: 237: FVRCONbits.TSRNG = 1;
  3606  0F1A  1617               	bsf	23,4	;volatile
  3607                           
  3608                           ;main.c: 240: FVRCONbits.FVREN = 0;
  3609  0F1B  1397               	bcf	23,7	;volatile
  3610                           
  3611                           ;main.c: 241: FVRCONbits.ADFVR = 0b10;
  3612  0F1C  0817               	movf	23,w	;volatile
  3613  0F1D  39FC               	andlw	-4
  3614  0F1E  3802               	iorlw	2
  3615  0F1F  0097               	movwf	23	;volatile
  3616                           
  3617                           ;main.c: 243: ADCON1bits.ADCS = 0b111;
  3618  0F20  3070               	movlw	112
  3619  0F21  0021               	movlb	1	; select bank1
  3620  0F22  049E               	iorwf	30,f	;volatile
  3621                           
  3622                           ;main.c: 244: ADCON1bits.ADFM = 1;
  3623  0F23  179E               	bsf	30,7	;volatile
  3624                           
  3625                           ;main.c: 245: ADCON1bits.ADPREF = 0b11;
  3626  0F24  3003               	movlw	3
  3627  0F25  049E               	iorwf	30,f	;volatile
  3628                           
  3629                           ;main.c: 246: ADCON1bits.ADNREF = 0b00;
  3630  0F26  111E               	bcf	30,2	;volatile
  3631                           
  3632                           ;main.c: 247: PIE1bits.ADIE = 1;
  3633  0F27  1711               	bsf	17,6	;volatile
  3634                           
  3635                           ;main.c: 250: ADCON0bits.CHS = 3;
  3636  0F28  081D               	movf	29,w	;volatile
  3637  0F29  3903               	andlw	-253
  3638  0F2A  380C               	iorlw	12
  3639  0F2B  009D               	movwf	29	;volatile
  3640                           
  3641                           ;main.c: 255: TRISAbits.TRISA2 = 1;
  3642  0F2C  150C               	bsf	12,2	;volatile
  3643                           
  3644                           ;main.c: 256: PIE0bits.INTE = 1;
  3645  0F2D  1410               	bsf	16,0	;volatile
  3646                           
  3647                           ;main.c: 257: INTCONbits.INTEDG = 0;
  3648  0F2E  100B               	bcf	11,0	;volatile
  3649                           
  3650                           ;main.c: 260: TRISAbits.TRISA5 = 0;
  3651  0F2F  128C               	bcf	12,5	;volatile
  3652                           
  3653                           ;main.c: 261: PORTAbits.RA5 = 0;
  3654  0F30  0020               	movlb	0	; select bank0
  3655  0F31  128C               	bcf	12,5	;volatile
  3656                           
  3657                           ;main.c: 266: INTCONbits.PEIE = 1;
  3658  0F32  170B               	bsf	11,6	;volatile
  3659                           
  3660                           ;main.c: 267: INTCONbits.GIE = 1;
  3661  0F33  178B               	bsf	11,7	;volatile
  3662                           
  3663                           ;main.c: 269: nrf24l01Packet_t packet;;main.c: 271: sendMessage(&packet, "BOOT", EEPROMR
      +                          ead(0));
  3664  0F34  30BE               	movlw	low main@packet
  3665  0F35  0021               	movlb	1	; select bank1
  3666  0F36  00B3               	movwf	sendMessage@packet^(0+128)
  3667  0F37  3000               	movlw	high main@packet
  3668  0F38  00B4               	movwf	(sendMessage@packet+1)^(0+128)
  3669  0F39  3049               	movlw	low (STR_7| (0+32768))
  3670  0F3A  00B5               	movwf	sendMessage@topic^(0+128)
  3671  0F3B  3090               	movlw	high (STR_7| (0+32768))
  3672  0F3C  00B6               	movwf	(sendMessage@topic^(0+128)+1)
  3673  0F3D  3000               	movlw	0
  3674  0F3E  00F0               	movwf	EEPROMRead@address
  3675  0F3F  00F1               	movwf	EEPROMRead@address+1
  3676  0F40  3188  203F  318E   	fcall	_EEPROMRead
  3677  0F43  3188  20CE  318E   	fcall	___lbtoft
  3678  0F46  0870               	movf	?___lbtoft,w
  3679  0F47  0021               	movlb	1	; select bank1
  3680  0F48  00B7               	movwf	sendMessage@value^(0+128)
  3681  0F49  0871               	movf	?___lbtoft+1,w
  3682  0F4A  00B8               	movwf	(sendMessage@value+1)^(0+128)
  3683  0F4B  0872               	movf	?___lbtoft+2,w
  3684  0F4C  00B9               	movwf	(sendMessage@value+2)^(0+128)
  3685  0F4D  318D  25B9  318E   	fcall	_sendMessage
  3686                           
  3687                           ;main.c: 272: EEPROMWrite(0, 0);
  3688  0F50  3000               	movlw	0
  3689  0F51  00F0               	movwf	EEPROMWrite@address
  3690  0F52  00F1               	movwf	EEPROMWrite@address+1
  3691  0F53  01F2               	clrf	EEPROMWrite@data
  3692  0F54  3189  219C  318E   	fcall	_EEPROMWrite
  3693  0F57                     l4867:	
  3694                           ;main.c: 275: while(1){
  3695                           
  3696                           
  3697                           ;main.c: 276: loop();
  3698  0F57  3184  2421  318E   	fcall	_loop
  3699  0F5A  2F57               	goto	l4867
  3700  0F5B                     __end_of_main:	
  3701                           ;main.c: 277: };main.c: 279: return;
  3702                           
  3703                           
  3704                           	psect	text1
  3705  09BB                     __ptext1:	
  3706 ;; *************** function _nrf24l01Init *****************
  3707 ;; Defined at:
  3708 ;;		line 433 in file "nrf24l01.c"
  3709 ;; Parameters:    Size  Location     Type
  3710 ;;		None
  3711 ;; Auto vars:     Size  Location     Type
  3712 ;;		None
  3713 ;; Return value:  Size  Location     Type
  3714 ;;                  1    wreg      void 
  3715 ;; Registers used:
  3716 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+10, btemp+11, pclath, cstack
  3717 ;; Tracked objects:
  3718 ;;		On entry : 0/0
  3719 ;;		On exit  : 0/0
  3720 ;;		Unchanged: 0/0
  3721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3724 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3725 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3726 ;;Total ram usage:        1 bytes
  3727 ;; Hardware stack levels used:    1
  3728 ;; Hardware stack levels required when called:   11
  3729 ;; This function calls:
  3730 ;;		_nrf24l01InitRegisters
  3731 ;;		_nrf24l01InterfaceInit
  3732 ;; This function is called by:
  3733 ;;		_main
  3734 ;; This function uses a non-reentrant model
  3735 ;;
  3736                           
  3737                           
  3738                           ;psect for function _nrf24l01Init
  3739  09BB                     _nrf24l01Init:	
  3740                           
  3741                           ;nrf24l01.c: 436: nrf24l01InterfaceInit();
  3742                           
  3743                           ;incstack = 0
  3744                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+10+btemp+11
      +                          +pclath+cstack]
  3745  09BB  3189  217E  3189   	fcall	_nrf24l01InterfaceInit
  3746                           
  3747                           ;nrf24l01.c: 441: PORTAbits.RA0 = 0;
  3748  09BE  0020               	movlb	0	; select bank0
  3749  09BF  100C               	bcf	12,0	;volatile
  3750                           
  3751                           ;nrf24l01.c: 443: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3752  09C0  300B               	movlw	11
  3753  09C1  0020               	movlb	0	; select bank0
  3754  09C2  00AF               	movwf	??_nrf24l01Init
  3755  09C3  3062               	movlw	98
  3756  09C4                     u5397:	
  3757  09C4  0B89               	decfsz	9,f
  3758  09C5  29C4               	goto	u5397
  3759  09C6  0BAF               	decfsz	??_nrf24l01Init,f
  3760  09C7  29C4               	goto	u5397
  3761  09C8  0000               	nop
  3762                           
  3763                           ;nrf24l01.c: 445: nrf24l01InitRegisters();
  3764  09C9  3182  2227  3189   	fcall	_nrf24l01InitRegisters
  3765                           
  3766                           ;nrf24l01.c: 447: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3767  09CC  300B               	movlw	11
  3768  09CD  0020               	movlb	0	; select bank0
  3769  09CE  00AF               	movwf	??_nrf24l01Init
  3770  09CF  3062               	movlw	98
  3771  09D0                     u5407:	
  3772  09D0  0B89               	decfsz	9,f
  3773  09D1  29D0               	goto	u5407
  3774  09D2  0BAF               	decfsz	??_nrf24l01Init,f
  3775  09D3  29D0               	goto	u5407
  3776  09D4  0000               	nop
  3777                           
  3778                           ;nrf24l01.c: 449: PORTAbits.RA0 = 1;
  3779  09D5  0020               	movlb	0	; select bank0
  3780  09D6  140C               	bsf	12,0	;volatile
  3781                           
  3782                           ;nrf24l01.c: 451: status.TX = 0;
  3783  09D7  01E2               	clrf	_status	;volatile
  3784                           
  3785                           ;nrf24l01.c: 452: status.RX = 0;
  3786  09D8  01E3               	clrf	_status+1	;volatile
  3787  09D9  0008               	return
  3788  09DA                     __end_of_nrf24l01Init:	
  3789                           
  3790                           	psect	text2
  3791  097E                     __ptext2:	
  3792 ;; *************** function _nrf24l01InterfaceInit *****************
  3793 ;; Defined at:
  3794 ;;		line 9 in file "interface.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;		None
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;		None
  3799 ;; Return value:  Size  Location     Type
  3800 ;;                  1    wreg      void 
  3801 ;; Registers used:
  3802 ;;		wreg, status,2, status,0
  3803 ;; Tracked objects:
  3804 ;;		On entry : 0/0
  3805 ;;		On exit  : 0/0
  3806 ;;		Unchanged: 0/0
  3807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3812 ;;Total ram usage:        0 bytes
  3813 ;; Hardware stack levels used:    1
  3814 ;; Hardware stack levels required when called:    7
  3815 ;; This function calls:
  3816 ;;		Nothing
  3817 ;; This function is called by:
  3818 ;;		_nrf24l01Init
  3819 ;; This function uses a non-reentrant model
  3820 ;;
  3821                           
  3822                           
  3823                           ;psect for function _nrf24l01InterfaceInit
  3824  097E                     _nrf24l01InterfaceInit:	
  3825                           
  3826                           ;interface.c: 11: TRISAbits.TRISA0 = 0;
  3827                           
  3828                           ;incstack = 0
  3829                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3830  097E  0021               	movlb	1	; select bank1
  3831  097F  100C               	bcf	12,0	;volatile
  3832                           
  3833                           ;interface.c: 12: TRISAbits.TRISA1 = 0;
  3834  0980  108C               	bcf	12,1	;volatile
  3835                           
  3836                           ;interface.c: 14: TRISCbits.TRISC1 = 1;
  3837  0981  148E               	bsf	14,1	;volatile
  3838                           
  3839                           ;interface.c: 15: TRISCbits.TRISC2 = 0;
  3840  0982  110E               	bcf	14,2	;volatile
  3841                           
  3842                           ;interface.c: 16: TRISCbits.TRISC0 = 0;
  3843  0983  100E               	bcf	14,0	;volatile
  3844                           
  3845                           ;interface.c: 18: SSP1CON1bits.SSPEN = 0;
  3846  0984  0024               	movlb	4	; select bank4
  3847  0985  1295               	bcf	21,5	;volatile
  3848                           
  3849                           ;interface.c: 20: RC1PPSbits.RC1PPS = 0b10001;
  3850  0986  003D               	movlb	29	; select bank29
  3851  0987  0821               	movf	33,w	;volatile
  3852  0988  39E0               	andlw	-32
  3853  0989  3811               	iorlw	17
  3854  098A  00A1               	movwf	33	;volatile
  3855                           
  3856                           ;interface.c: 21: RC2PPSbits.RC2PPS = 0b11001;
  3857  098B  0822               	movf	34,w	;volatile
  3858  098C  39E0               	andlw	-32
  3859  098D  3819               	iorlw	25
  3860  098E  00A2               	movwf	34	;volatile
  3861                           
  3862                           ;interface.c: 22: RC0PPSbits.RC0PPS = 0b11000;
  3863  098F  0820               	movf	32,w	;volatile
  3864  0990  39E0               	andlw	-32
  3865  0991  3818               	iorlw	24
  3866  0992  00A0               	movwf	32	;volatile
  3867                           
  3868                           ;interface.c: 24: SSP1CON1bits.CKP = 0;
  3869  0993  0024               	movlb	4	; select bank4
  3870  0994  1215               	bcf	21,4	;volatile
  3871                           
  3872                           ;interface.c: 25: SSP1STATbits.CKE = 1;
  3873  0995  1714               	bsf	20,6	;volatile
  3874                           
  3875                           ;interface.c: 26: SSP1CON1bits.SSPM = 0b0001;
  3876  0996  0815               	movf	21,w	;volatile
  3877  0997  39F0               	andlw	-16
  3878  0998  3801               	iorlw	1
  3879  0999  0095               	movwf	21	;volatile
  3880                           
  3881                           ;interface.c: 28: SSP1CON1bits.SSPEN = 1;
  3882  099A  1695               	bsf	21,5	;volatile
  3883  099B  0008               	return
  3884  099C                     __end_of_nrf24l01InterfaceInit:	
  3885                           
  3886                           	psect	text3
  3887  0227                     __ptext3:	
  3888 ;; *************** function _nrf24l01InitRegisters *****************
  3889 ;; Defined at:
  3890 ;;		line 332 in file "nrf24l01.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;		None
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;  i               2   13[BANK0 ] unsigned int 
  3895 ;;  DynPD           1   12[BANK0 ] struct .
  3896 ;;  enAA            1   11[BANK0 ] struct .
  3897 ;;  rfSetup         1   10[BANK0 ] struct .
  3898 ;;  feature         1    9[BANK0 ] struct .
  3899 ;;  setupAW         1    8[BANK0 ] struct .
  3900 ;;  channel         1    7[BANK0 ] struct .
  3901 ;; Return value:  Size  Location     Type
  3902 ;;                  1    wreg      void 
  3903 ;; Registers used:
  3904 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+10, btemp+11, pclath, cstack
  3905 ;; Tracked objects:
  3906 ;;		On entry : 0/0
  3907 ;;		On exit  : 0/0
  3908 ;;		Unchanged: 0/0
  3909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3911 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3912 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3913 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3914 ;;Total ram usage:        9 bytes
  3915 ;; Hardware stack levels used:    1
  3916 ;; Hardware stack levels required when called:   10
  3917 ;; This function calls:
  3918 ;;		___bmul
  3919 ;;		_nrf24l01SPIEnd
  3920 ;;		_nrf24l01SPISend
  3921 ;;		_nrf24l01SPIStart
  3922 ;;		_nrf24l01Send
  3923 ;;		_nrf24l01SetRXPipe
  3924 ;;		_nrf24l01SetTXPipe
  3925 ;; This function is called by:
  3926 ;;		_nrf24l01Init
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930                           
  3931                           ;psect for function _nrf24l01InitRegisters
  3932  0227                     _nrf24l01InitRegisters:	
  3933                           
  3934                           ;nrf24l01.c: 334: status.configRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x00, 0);
  3935                           
  3936                           ;incstack = 0
  3937                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+10
      +                          +btemp+11+pclath+cstack]
  3938  0227  3000               	movlw	0
  3939  0228  001E               	movwi fsr1++
  3940  0229  3000               	movlw	0
  3941  022A  3188  2075  3182   	fcall	_nrf24l01Send
  3942  022D  00FF               	movwf	127
  3943  022E  087F               	movf	127,w
  3944  022F  0020               	movlb	0	; select bank0
  3945  0230  00E5               	movwf	_status+3	;volatile
  3946                           
  3947                           ;nrf24l01.c: 336: status.configRegister.PWR_UP = 0;
  3948  0231  10E5               	bcf	_status+3,1	;volatile
  3949                           
  3950                           ;nrf24l01.c: 337: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3951  0232  0865               	movf	_status+3,w	;volatile
  3952  0233  001E               	movwi fsr1++
  3953  0234  3020               	movlw	32
  3954  0235  3188  2075  3182   	fcall	_nrf24l01Send
  3955                           
  3956                           ;nrf24l01.c: 339: n_SETUP_AW_t setupAW;;nrf24l01.c: 340: setupAW.byte = 0x00;
  3957  0238  0020               	movlb	0	; select bank0
  3958  0239  01A8               	clrf	nrf24l01InitRegisters@setupAW
  3959                           
  3960                           ;nrf24l01.c: 341: setupAW.AW = 0b11;
  3961  023A  3003               	movlw	3
  3962  023B  04A8               	iorwf	nrf24l01InitRegisters@setupAW,f
  3963                           
  3964                           ;nrf24l01.c: 342: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x03, setupAW.byte);
  3965  023C  0828               	movf	nrf24l01InitRegisters@setupAW,w
  3966  023D  001E               	movwi fsr1++
  3967  023E  3023               	movlw	35
  3968  023F  3188  2075  3182   	fcall	_nrf24l01Send
  3969                           
  3970                           ;nrf24l01.c: 345: n_RF_CH_t channel;;nrf24l01.c: 346: channel.RF_CH = 2;
  3971  0242  0020               	movlb	0	; select bank0
  3972  0243  0827               	movf	nrf24l01InitRegisters@channel,w
  3973  0244  3980               	andlw	-128
  3974  0245  3802               	iorlw	2
  3975  0246  00A7               	movwf	nrf24l01InitRegisters@channel
  3976                           
  3977                           ;nrf24l01.c: 347: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3978  0247  0827               	movf	nrf24l01InitRegisters@channel,w
  3979  0248  001E               	movwi fsr1++
  3980  0249  3025               	movlw	37
  3981  024A  3188  2075  3182   	fcall	_nrf24l01Send
  3982                           
  3983                           ;nrf24l01.c: 350: n_RF_SETUP_t rfSetup;;nrf24l01.c: 351: rfSetup.byte = 0x00;
  3984  024D  0020               	movlb	0	; select bank0
  3985  024E  01AA               	clrf	nrf24l01InitRegisters@rfSetup
  3986                           
  3987                           ;nrf24l01.c: 352: rfSetup.RF_DR_LOW = 0;
  3988  024F  12AA               	bcf	nrf24l01InitRegisters@rfSetup,5
  3989                           
  3990                           ;nrf24l01.c: 353: rfSetup.RF_DR_HIGH = 1;
  3991  0250  15AA               	bsf	nrf24l01InitRegisters@rfSetup,3
  3992                           
  3993                           ;nrf24l01.c: 354: rfSetup.RF_PWR = 3;
  3994  0251  3006               	movlw	6
  3995  0252  04AA               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3996                           
  3997                           ;nrf24l01.c: 355: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3998  0253  082A               	movf	nrf24l01InitRegisters@rfSetup,w
  3999  0254  001E               	movwi fsr1++
  4000  0255  3026               	movlw	38
  4001  0256  3188  2075  3182   	fcall	_nrf24l01Send
  4002                           
  4003                           ;nrf24l01.c: 358: nrf24l01SetRXPipe(0xFF);
  4004  0259  30FF               	movlw	255
  4005  025A  3189  2160  3182   	fcall	_nrf24l01SetRXPipe
  4006                           
  4007                           ;nrf24l01.c: 361: n_EN_AA_t enAA;;nrf24l01.c: 362: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  4008  025D  3000               	movlw	0
  4009  025E  001E               	movwi fsr1++
  4010  025F  3001               	movlw	1
  4011  0260  3188  2075  3182   	fcall	_nrf24l01Send
  4012  0263  00FF               	movwf	127
  4013  0264  087F               	movf	127,w
  4014  0265  0020               	movlb	0	; select bank0
  4015  0266  00AB               	movwf	nrf24l01InitRegisters@enAA
  4016                           
  4017                           ;nrf24l01.c: 363: enAA.ENAA_P0 = 0;
  4018  0267  102B               	bcf	nrf24l01InitRegisters@enAA,0
  4019                           
  4020                           ;nrf24l01.c: 364: enAA.ENAA_P1 = 0;
  4021  0268  10AB               	bcf	nrf24l01InitRegisters@enAA,1
  4022                           
  4023                           ;nrf24l01.c: 365: enAA.ENAA_P2 = 0;
  4024  0269  112B               	bcf	nrf24l01InitRegisters@enAA,2
  4025                           
  4026                           ;nrf24l01.c: 366: enAA.ENAA_P3 = 0;
  4027  026A  11AB               	bcf	nrf24l01InitRegisters@enAA,3
  4028                           
  4029                           ;nrf24l01.c: 367: enAA.ENAA_P4 = 0;
  4030  026B  122B               	bcf	nrf24l01InitRegisters@enAA,4
  4031                           
  4032                           ;nrf24l01.c: 368: enAA.ENAA_P5 = 0;
  4033  026C  12AB               	bcf	nrf24l01InitRegisters@enAA,5
  4034                           
  4035                           ;nrf24l01.c: 369: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  4036  026D  082B               	movf	nrf24l01InitRegisters@enAA,w
  4037  026E  001E               	movwi fsr1++
  4038  026F  3021               	movlw	33
  4039  0270  3188  2075  3182   	fcall	_nrf24l01Send
  4040                           
  4041                           ;nrf24l01.c: 373: n_FEATURE_t feature;;nrf24l01.c: 374: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  4042  0273  3000               	movlw	0
  4043  0274  001E               	movwi fsr1++
  4044  0275  301D               	movlw	29
  4045  0276  3188  2075  3182   	fcall	_nrf24l01Send
  4046  0279  00FF               	movwf	127
  4047  027A  087F               	movf	127,w
  4048  027B  0020               	movlb	0	; select bank0
  4049  027C  00A9               	movwf	nrf24l01InitRegisters@feature
  4050                           
  4051                           ;nrf24l01.c: 375: feature.EN_DPL = 1;
  4052  027D  1529               	bsf	nrf24l01InitRegisters@feature,2
  4053                           
  4054                           ;nrf24l01.c: 376: feature.EN_DYN_ACK = 1;
  4055  027E  1429               	bsf	nrf24l01InitRegisters@feature,0
  4056                           
  4057                           ;nrf24l01.c: 377: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  4058  027F  0829               	movf	nrf24l01InitRegisters@feature,w
  4059  0280  001E               	movwi fsr1++
  4060  0281  303D               	movlw	61
  4061  0282  3188  2075  3182   	fcall	_nrf24l01Send
  4062                           
  4063                           ;nrf24l01.c: 379: n_DYNPD_t DynPD;;nrf24l01.c: 380: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  4064  0285  3000               	movlw	0
  4065  0286  001E               	movwi fsr1++
  4066  0287  301C               	movlw	28
  4067  0288  3188  2075  3182   	fcall	_nrf24l01Send
  4068  028B  00FF               	movwf	127
  4069  028C  087F               	movf	127,w
  4070  028D  0020               	movlb	0	; select bank0
  4071  028E  00AC               	movwf	nrf24l01InitRegisters@DynPD
  4072                           
  4073                           ;nrf24l01.c: 381: DynPD.DPL_P0 = 1;
  4074  028F  142C               	bsf	nrf24l01InitRegisters@DynPD,0
  4075                           
  4076                           ;nrf24l01.c: 382: DynPD.DPL_P1 = 1;
  4077  0290  14AC               	bsf	nrf24l01InitRegisters@DynPD,1
  4078                           
  4079                           ;nrf24l01.c: 383: DynPD.DPL_P2 = 1;
  4080  0291  152C               	bsf	nrf24l01InitRegisters@DynPD,2
  4081                           
  4082                           ;nrf24l01.c: 384: DynPD.DPL_P3 = 1;
  4083  0292  15AC               	bsf	nrf24l01InitRegisters@DynPD,3
  4084                           
  4085                           ;nrf24l01.c: 385: DynPD.DPL_P4 = 1;
  4086  0293  162C               	bsf	nrf24l01InitRegisters@DynPD,4
  4087                           
  4088                           ;nrf24l01.c: 386: DynPD.DPL_P5 = 1;
  4089  0294  16AC               	bsf	nrf24l01InitRegisters@DynPD,5
  4090                           
  4091                           ;nrf24l01.c: 387: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  4092  0295  082C               	movf	nrf24l01InitRegisters@DynPD,w
  4093  0296  001E               	movwi fsr1++
  4094  0297  303C               	movlw	60
  4095  0298  3188  2075  3182   	fcall	_nrf24l01Send
  4096                           
  4097                           ;nrf24l01.c: 390: unsigned int i;;nrf24l01.c: 391: for (i = 0; i < 6; i++){
  4098  029B  0020               	movlb	0	; select bank0
  4099  029C  01AD               	clrf	nrf24l01InitRegisters@i
  4100  029D  01AE               	clrf	nrf24l01InitRegisters@i+1
  4101  029E  3000               	movlw	0
  4102  029F  022E               	subwf	nrf24l01InitRegisters@i+1,w
  4103  02A0  3006               	movlw	6
  4104  02A1  1903               	skipnz
  4105  02A2  022D               	subwf	nrf24l01InitRegisters@i,w
  4106  02A3  1803               	btfsc	3,0
  4107  02A4  2AFB               	goto	l4629
  4108  02A5                     l4613:	
  4109                           
  4110                           ;nrf24l01.c: 393: nrf24l01SPIStart();
  4111  02A5  3188  2036  3182   	fcall	_nrf24l01SPIStart
  4112                           
  4113                           ;nrf24l01.c: 394: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  4114  02A8  0020               	movlb	0	; select bank0
  4115  02A9  082D               	movf	nrf24l01InitRegisters@i,w
  4116  02AA  3E0A               	addlw	10
  4117  02AB  3820               	iorlw	32
  4118  02AC  3188  2066  3182   	fcall	_nrf24l01SPISend
  4119                           
  4120                           ;nrf24l01.c: 396: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  4121  02AF  303E               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4122  02B0  0084               	movwf	4
  4123  02B1  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4124  02B2  0085               	movwf	5
  4125  02B3  0800               	movf	0,w	;code access
  4126  02B4  00F3               	movwf	??_nrf24l01InitRegisters
  4127  02B5  0020               	movlb	0	; select bank0
  4128  02B6  082D               	movf	nrf24l01InitRegisters@i,w
  4129  02B7  001E               	movwi fsr1++
  4130  02B8  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4131  02B9  0084               	movwf	4
  4132  02BA  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4133  02BB  0085               	movwf	5
  4134  02BC  0800               	movf	0,w	;code access
  4135  02BD  3188  209D  3182   	fcall	___bmul
  4136  02C0  0773               	addwf	??_nrf24l01InitRegisters,w
  4137  02C1  3188  2066  3182   	fcall	_nrf24l01SPISend
  4138                           
  4139                           ;nrf24l01.c: 398: if (i < 2){
  4140  02C4  3000               	movlw	0
  4141  02C5  0020               	movlb	0	; select bank0
  4142  02C6  022E               	subwf	nrf24l01InitRegisters@i+1,w
  4143  02C7  3002               	movlw	2
  4144  02C8  1903               	skipnz
  4145  02C9  022D               	subwf	nrf24l01InitRegisters@i,w
  4146  02CA  1803               	skipnc
  4147  02CB  2AEC               	goto	l4623
  4148                           
  4149                           ;nrf24l01.c: 399: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4150  02CC  303D               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4151  02CD  0084               	movwf	4
  4152  02CE  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4153  02CF  0085               	movwf	5
  4154  02D0  0800               	movf	0,w	;code access
  4155  02D1  3188  2066  3182   	fcall	_nrf24l01SPISend
  4156                           
  4157                           ;nrf24l01.c: 400: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4158  02D4  303C               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4159  02D5  0084               	movwf	4
  4160  02D6  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4161  02D7  0085               	movwf	5
  4162  02D8  0800               	movf	0,w	;code access
  4163  02D9  3188  2066  3182   	fcall	_nrf24l01SPISend
  4164                           
  4165                           ;nrf24l01.c: 401: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4166  02DC  303B               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4167  02DD  0084               	movwf	4
  4168  02DE  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4169  02DF  0085               	movwf	5
  4170  02E0  0800               	movf	0,w	;code access
  4171  02E1  3188  2066  3182   	fcall	_nrf24l01SPISend
  4172                           
  4173                           ;nrf24l01.c: 402: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4174  02E4  303A               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4175  02E5  0084               	movwf	4
  4176  02E6  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4177  02E7  0085               	movwf	5
  4178  02E8  0800               	movf	0,w	;code access
  4179  02E9  3188  2066  3182   	fcall	_nrf24l01SPISend
  4180  02EC                     l4623:	
  4181                           
  4182                           ;nrf24l01.c: 403: };nrf24l01.c: 405: nrf24l01SPIEnd();
  4183  02EC  3188  202D  3182   	fcall	_nrf24l01SPIEnd
  4184  02EF  3001               	movlw	1
  4185  02F0  0020               	movlb	0	; select bank0
  4186  02F1  07AD               	addwf	nrf24l01InitRegisters@i,f
  4187  02F2  3000               	movlw	0
  4188  02F3  3DAE               	addwfc	nrf24l01InitRegisters@i+1,f
  4189  02F4  3000               	movlw	0
  4190  02F5  022E               	subwf	nrf24l01InitRegisters@i+1,w
  4191  02F6  3006               	movlw	6
  4192  02F7  1903               	skipnz
  4193  02F8  022D               	subwf	nrf24l01InitRegisters@i,w
  4194  02F9  1C03               	skipc
  4195  02FA  2AA5               	goto	l4613
  4196  02FB                     l4629:	
  4197                           
  4198                           ;nrf24l01.c: 406: };nrf24l01.c: 408: nrf24l01SetTXPipe(0);
  4199  02FB  3000               	movlw	0
  4200  02FC  318B  23AE  3182   	fcall	_nrf24l01SetTXPipe
  4201                           
  4202                           ;nrf24l01.c: 412: status.statusRegister.byte = 0x00;
  4203  02FF  0020               	movlb	0	; select bank0
  4204  0300  01E4               	clrf	_status+2	;volatile
  4205                           
  4206                           ;nrf24l01.c: 413: status.statusRegister.RX_DR = 1;
  4207  0301  1764               	bsf	_status+2,6	;volatile
  4208                           
  4209                           ;nrf24l01.c: 414: status.statusRegister.TX_DS = 1;
  4210  0302  16E4               	bsf	_status+2,5	;volatile
  4211                           
  4212                           ;nrf24l01.c: 415: status.statusRegister.MAX_RT = 1;
  4213  0303  1664               	bsf	_status+2,4	;volatile
  4214                           
  4215                           ;nrf24l01.c: 416: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.statusReg
      +                          ister.byte);
  4216  0304  0864               	movf	_status+2,w	;volatile
  4217  0305  001E               	movwi fsr1++
  4218  0306  3027               	movlw	39
  4219  0307  3188  2075  3182   	fcall	_nrf24l01Send
  4220                           
  4221                           ;nrf24l01.c: 418: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  4222  030A  3000               	movlw	0
  4223  030B  001E               	movwi fsr1++
  4224  030C  3007               	movlw	7
  4225  030D  3188  2075  3182   	fcall	_nrf24l01Send
  4226  0310  00FF               	movwf	127
  4227  0311  087F               	movf	127,w
  4228  0312  0020               	movlb	0	; select bank0
  4229  0313  00E4               	movwf	_status+2	;volatile
  4230                           
  4231                           ;nrf24l01.c: 421: nrf24l01Send((unsigned) 0b11100001, 0);
  4232  0314  3000               	movlw	0
  4233  0315  001E               	movwi fsr1++
  4234  0316  30E1               	movlw	225
  4235  0317  3188  2075  3182   	fcall	_nrf24l01Send
  4236                           
  4237                           ;nrf24l01.c: 422: nrf24l01Send((unsigned) 0b11100010, 0);
  4238  031A  3000               	movlw	0
  4239  031B  001E               	movwi fsr1++
  4240  031C  30E2               	movlw	226
  4241  031D  3188  2075  3182   	fcall	_nrf24l01Send
  4242                           
  4243                           ;nrf24l01.c: 425: status.configRegister.PRIM_RX = 1;
  4244  0320  0020               	movlb	0	; select bank0
  4245  0321  1465               	bsf	_status+3,0	;volatile
  4246                           
  4247                           ;nrf24l01.c: 426: status.configRegister.EN_CRC = 1;
  4248  0322  15E5               	bsf	_status+3,3	;volatile
  4249                           
  4250                           ;nrf24l01.c: 427: status.configRegister.CRCO = 1;
  4251  0323  1565               	bsf	_status+3,2	;volatile
  4252                           
  4253                           ;nrf24l01.c: 428: status.configRegister.PWR_UP = 1;
  4254  0324  14E5               	bsf	_status+3,1	;volatile
  4255                           
  4256                           ;nrf24l01.c: 429: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  4257  0325  0865               	movf	_status+3,w	;volatile
  4258  0326  001E               	movwi fsr1++
  4259  0327  3020               	movlw	32
  4260  0328  3188  2075         	fcall	_nrf24l01Send
  4261  032A  0008               	return
  4262  032B                     __end_of_nrf24l01InitRegisters:	
  4263                           
  4264                           	psect	text4
  4265  0960                     __ptext4:	
  4266 ;; *************** function _nrf24l01SetRXPipe *****************
  4267 ;; Defined at:
  4268 ;;		line 110 in file "nrf24l01.c"
  4269 ;; Parameters:    Size  Location     Type
  4270 ;;  pipe            1    wreg     unsigned char 
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;  pipe            1    1[COMMON] unsigned char 
  4273 ;;  enRXAddr        1    2[COMMON] struct .
  4274 ;; Return value:  Size  Location     Type
  4275 ;;                  1    wreg      void 
  4276 ;; Registers used:
  4277 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath
  4278 ;; Tracked objects:
  4279 ;;		On entry : 0/0
  4280 ;;		On exit  : 0/0
  4281 ;;		Unchanged: 0/0
  4282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4284 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4285 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4286 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4287 ;;Total ram usage:        3 bytes
  4288 ;; Hardware stack levels used:    1
  4289 ;; Hardware stack levels required when called:    9
  4290 ;; This function calls:
  4291 ;;		_nrf24l01Send
  4292 ;; This function is called by:
  4293 ;;		_main
  4294 ;;		_nrf24l01InitRegisters
  4295 ;; This function uses a non-reentrant model
  4296 ;;
  4297                           
  4298                           
  4299                           ;psect for function _nrf24l01SetRXPipe
  4300  0960                     _nrf24l01SetRXPipe:	
  4301                           
  4302                           ;incstack = 0
  4303                           ; Regs used in _nrf24l01SetRXPipe: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+11+pclath]
  4304                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4305  0960  00F1               	movwf	nrf24l01SetRXPipe@pipe
  4306                           
  4307                           ;nrf24l01.c: 112: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 114: if (pipe > 5){
  4308  0961  3006               	movlw	6
  4309  0962  0271               	subwf	nrf24l01SetRXPipe@pipe,w
  4310  0963  1C03               	skipc
  4311  0964  296C               	goto	l281
  4312                           
  4313                           ;nrf24l01.c: 115: enRXAddr.ERX_P0 = 1;
  4314  0965  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4315                           
  4316                           ;nrf24l01.c: 116: enRXAddr.ERX_P1 = 1;
  4317  0966  14F2               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4318                           
  4319                           ;nrf24l01.c: 117: enRXAddr.ERX_P2 = 1;
  4320  0967  1572               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4321                           
  4322                           ;nrf24l01.c: 118: enRXAddr.ERX_P3 = 1;
  4323  0968  15F2               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4324                           
  4325                           ;nrf24l01.c: 119: enRXAddr.ERX_P4 = 1;
  4326  0969  1672               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4327                           
  4328                           ;nrf24l01.c: 120: enRXAddr.ERX_P5 = 1;
  4329  096A  16F2               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4330                           
  4331                           ;nrf24l01.c: 121: }
  4332  096B  2978               	goto	l4301
  4333  096C                     l281:	
  4334                           
  4335                           ;nrf24l01.c: 123: else{;nrf24l01.c: 124: enRXAddr.ERX_P0 = 1;
  4336  096C  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4337                           
  4338                           ;nrf24l01.c: 125: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4339  096D  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4340  096E  00F0               	movwf	??_nrf24l01SetRXPipe
  4341  096F  0A71               	incf	nrf24l01SetRXPipe@pipe,w
  4342  0970  2972               	goto	u4864
  4343  0971                     u4865:	
  4344  0971  35F0               	lslf	??_nrf24l01SetRXPipe,f
  4345  0972                     u4864:	
  4346  0972  0B89               	decfsz	9,f
  4347  0973  2971               	goto	u4865
  4348  0974  0870               	movf	??_nrf24l01SetRXPipe,w
  4349  0975  00FF               	movwf	127
  4350  0976  087F               	movf	127,w
  4351  0977  00F2               	movwf	nrf24l01SetRXPipe@enRXAddr
  4352  0978                     l4301:	
  4353                           
  4354                           ;nrf24l01.c: 126: };nrf24l01.c: 128: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4355  0978  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4356  0979  001E               	movwi fsr1++
  4357  097A  3022               	movlw	34
  4358  097B  3188  2075         	fcall	_nrf24l01Send
  4359  097D  0008               	return
  4360  097E                     __end_of_nrf24l01SetRXPipe:	
  4361                           
  4362                           	psect	text5
  4363  0B03                     __ptext5:	
  4364 ;; *************** function _nrf24l01GetPipe *****************
  4365 ;; Defined at:
  4366 ;;		line 161 in file "main.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;  name            1    wreg     PTR unsigned char 
  4369 ;;		 -> romDataMap(28), 
  4370 ;; Auto vars:     Size  Location     Type
  4371 ;;  name            1   10[BANK0 ] PTR unsigned char 
  4372 ;;		 -> romDataMap(28), 
  4373 ;;  i               1   11[BANK0 ] unsigned char 
  4374 ;;  pipe            1    9[BANK0 ] unsigned char 
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  1    wreg      unsigned char 
  4377 ;; Registers used:
  4378 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+10, btemp+11, pclath, cstack
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4385 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4386 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4387 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4388 ;;Total ram usage:        4 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    8
  4391 ;; This function calls:
  4392 ;;		___lwmod
  4393 ;;		_strlen
  4394 ;; This function is called by:
  4395 ;;		_main
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           
  4400                           ;psect for function _nrf24l01GetPipe
  4401  0B03                     _nrf24l01GetPipe:	
  4402                           
  4403                           ;incstack = 0
  4404                           ; Regs used in _nrf24l01GetPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+10+btemp
      +                          +11+pclath+cstack]
  4405                           ;nrf24l01GetPipe@name stored from wreg
  4406  0B03  0020               	movlb	0	; select bank0
  4407  0B04  00AA               	movwf	nrf24l01GetPipe@name
  4408                           
  4409                           ;main.c: 162: unsigned char pipe = 0;
  4410  0B05  01A9               	clrf	nrf24l01GetPipe@pipe
  4411                           
  4412                           ;main.c: 163: unsigned char i = 0;
  4413  0B06  01AB               	clrf	nrf24l01GetPipe@i
  4414                           
  4415                           ;main.c: 166: for (i = 0; i < strlen(name); i++){
  4416  0B07  01AB               	clrf	nrf24l01GetPipe@i
  4417  0B08                     l4733:	
  4418  0B08  082A               	movf	nrf24l01GetPipe@name,w
  4419  0B09  3189  2142  318B   	fcall	_strlen
  4420  0B0C  0020               	movlb	0	; select bank0
  4421  0B0D  082B               	movf	nrf24l01GetPipe@i,w
  4422  0B0E  00FE               	movwf	126
  4423  0B0F  01FF               	clrf	127
  4424  0B10  0875               	movf	117,w
  4425  0B11  027F               	subwf	127,w
  4426  0B12  1D03               	skipz
  4427  0B13  2B16               	goto	u5275
  4428  0B14  0874               	movf	116,w
  4429  0B15  027E               	subwf	126,w
  4430  0B16                     u5275:	
  4431  0B16  1803               	btfsc	3,0
  4432  0B17  2B28               	goto	l4735
  4433                           
  4434                           ;main.c: 167: pipe+= name[i];
  4435  0B18  082B               	movf	nrf24l01GetPipe@i,w
  4436  0B19  072A               	addwf	nrf24l01GetPipe@name,w
  4437  0B1A  00A8               	movwf	??_nrf24l01GetPipe
  4438  0B1B  0828               	movf	??_nrf24l01GetPipe,w
  4439  0B1C  0084               	movwf	4
  4440  0B1D  3001               	movlw	1	; select bank2/3
  4441  0B1E  0085               	movwf	5
  4442  0B1F  0800               	movf	0,w
  4443  0B20  00FF               	movwf	127
  4444  0B21  087F               	movf	127,w
  4445  0B22  07A9               	addwf	nrf24l01GetPipe@pipe,f
  4446  0B23  3001               	movlw	1
  4447  0B24  00FF               	movwf	127
  4448  0B25  087F               	movf	127,w
  4449  0B26  07AB               	addwf	nrf24l01GetPipe@i,f
  4450  0B27  2B08               	goto	l4733
  4451  0B28                     l4735:	
  4452                           
  4453                           ;main.c: 168: };main.c: 170: return (unsigned) pipe % 6;
  4454  0B28  3006               	movlw	6
  4455  0B29  00F0               	movwf	___lwmod@divisor
  4456  0B2A  3000               	movlw	0
  4457  0B2B  00F1               	movwf	___lwmod@divisor+1
  4458  0B2C  0829               	movf	nrf24l01GetPipe@pipe,w
  4459  0B2D  00FE               	movwf	126
  4460  0B2E  01FF               	clrf	127
  4461  0B2F  087E               	movf	126,w
  4462  0B30  00F2               	movwf	___lwmod@dividend
  4463  0B31  087F               	movf	127,w
  4464  0B32  00F3               	movwf	___lwmod@dividend+1
  4465  0B33  318A  22A4         	fcall	___lwmod
  4466  0B35  0870               	movf	?___lwmod,w
  4467  0B36  0008               	return
  4468  0B37                     __end_of_nrf24l01GetPipe:	
  4469                           
  4470                           	psect	text6
  4471  0AA4                     __ptext6:	
  4472 ;; *************** function ___lwmod *****************
  4473 ;; Defined at:
  4474 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;  divisor         2    0[COMMON] unsigned int 
  4477 ;;  dividend        2    2[COMMON] unsigned int 
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;  counter         1    7[BANK0 ] unsigned char 
  4480 ;; Return value:  Size  Location     Type
  4481 ;;                  2    0[COMMON] unsigned int 
  4482 ;; Registers used:
  4483 ;;		wreg, status,2, status,0, btemp+11
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4489 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4490 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4492 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4493 ;;Total ram usage:        5 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    7
  4496 ;; This function calls:
  4497 ;;		Nothing
  4498 ;; This function is called by:
  4499 ;;		_nrf24l01GetPipe
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           
  4504                           ;psect for function ___lwmod
  4505  0AA4                     ___lwmod:	
  4506                           
  4507                           ;incstack = 0
  4508                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+11]
  4509  0AA4  0870               	movf	___lwmod@divisor,w
  4510  0AA5  0471               	iorwf	___lwmod@divisor+1,w
  4511  0AA6  1903               	btfsc	3,2
  4512  0AA7  2ACC               	goto	l4675
  4513  0AA8  0020               	movlb	0	; select bank0
  4514  0AA9  01A7               	clrf	___lwmod@counter
  4515  0AAA  0AA7               	incf	___lwmod@counter,f
  4516  0AAB                     l4665:	
  4517  0AAB  1BF1               	btfsc	___lwmod@divisor+1,7
  4518  0AAC  2AB7               	goto	l4667
  4519  0AAD  3001               	movlw	1
  4520  0AAE                     u5175:	
  4521  0AAE  35F0               	lslf	___lwmod@divisor,f
  4522  0AAF  0DF1               	rlf	___lwmod@divisor+1,f
  4523  0AB0  0B89               	decfsz	9,f
  4524  0AB1  2AAE               	goto	u5175
  4525  0AB2  3001               	movlw	1
  4526  0AB3  00FF               	movwf	127
  4527  0AB4  087F               	movf	127,w
  4528  0AB5  07A7               	addwf	___lwmod@counter,f
  4529  0AB6  2AAB               	goto	l4665
  4530  0AB7                     l4667:	
  4531  0AB7  0871               	movf	___lwmod@divisor+1,w
  4532  0AB8  0273               	subwf	___lwmod@dividend+1,w
  4533  0AB9  1D03               	skipz
  4534  0ABA  2ABD               	goto	u5195
  4535  0ABB  0870               	movf	___lwmod@divisor,w
  4536  0ABC  0272               	subwf	___lwmod@dividend,w
  4537  0ABD                     u5195:	
  4538  0ABD  1C03               	skipc
  4539  0ABE  2AC3               	goto	l4671
  4540  0ABF  0870               	movf	___lwmod@divisor,w
  4541  0AC0  02F2               	subwf	___lwmod@dividend,f
  4542  0AC1  0871               	movf	___lwmod@divisor+1,w
  4543  0AC2  3BF3               	subwfb	___lwmod@dividend+1,f
  4544  0AC3                     l4671:	
  4545  0AC3  3001               	movlw	1
  4546  0AC4                     u5205:	
  4547  0AC4  36F1               	lsrf	___lwmod@divisor+1,f
  4548  0AC5  0CF0               	rrf	___lwmod@divisor,f
  4549  0AC6  0B89               	decfsz	9,f
  4550  0AC7  2AC4               	goto	u5205
  4551  0AC8  3001               	movlw	1
  4552  0AC9  02A7               	subwf	___lwmod@counter,f
  4553  0ACA  1D03               	btfss	3,2
  4554  0ACB  2AB7               	goto	l4667
  4555  0ACC                     l4675:	
  4556  0ACC  0873               	movf	___lwmod@dividend+1,w
  4557  0ACD  00F1               	movwf	?___lwmod+1
  4558  0ACE  0872               	movf	___lwmod@dividend,w
  4559  0ACF  00F0               	movwf	?___lwmod
  4560  0AD0  0008               	return
  4561  0AD1                     __end_of___lwmod:	
  4562                           
  4563                           	psect	text7
  4564  0421                     __ptext7:	
  4565 ;; *************** function _loop *****************
  4566 ;; Defined at:
  4567 ;;		line 107 in file "main.c"
  4568 ;; Parameters:    Size  Location     Type
  4569 ;;		None
  4570 ;; Auto vars:     Size  Location     Type
  4571 ;;  packet         33   12[BANK4 ] struct .
  4572 ;;  ta              3    3[BANK4 ] float 
  4573 ;;  vt              3    0[BANK4 ] float 
  4574 ;; Return value:  Size  Location     Type
  4575 ;;                  1    wreg      void 
  4576 ;; Registers used:
  4577 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4584 ;;      Locals:         0       0       0       0       0      45       0       0       0       0       0       0       
      +0       0
  4585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4586 ;;      Totals:         0       0       0       0       0      45       0       0       0       0       0       0       
      +0       0
  4587 ;;Total ram usage:       45 bytes
  4588 ;; Hardware stack levels used:    1
  4589 ;; Hardware stack levels required when called:   14
  4590 ;; This function calls:
  4591 ;;		___ftadd
  4592 ;;		___ftdiv
  4593 ;;		___ftmul
  4594 ;;		___ftneg
  4595 ;;		___lwtoft
  4596 ;;		_getADCValue
  4597 ;;		_sendMessage
  4598 ;; This function is called by:
  4599 ;;		_main
  4600 ;; This function uses a non-reentrant model
  4601 ;;
  4602                           
  4603                           
  4604                           ;psect for function _loop
  4605  0421                     _loop:	
  4606                           
  4607                           ;main.c: 109: nrf24l01Packet_t packet;;main.c: 117: sendMessage(&packet, "COUNT", counte
      +                          r);
  4608                           
  4609                           ;incstack = 0
  4610                           ; Regs used in _loop: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  4611  0421  302C               	movlw	low loop@packet
  4612  0422  0021               	movlb	1	; select bank1
  4613  0423  00B3               	movwf	sendMessage@packet^(0+128)
  4614  0424  3002               	movlw	high loop@packet
  4615  0425  00B4               	movwf	(sendMessage@packet+1)^(0+128)
  4616  0426  3034               	movlw	low (STR_3| (0+32768))
  4617  0427  00B5               	movwf	sendMessage@topic^(0+128)
  4618  0428  3090               	movlw	high (STR_3| (0+32768))
  4619  0429  00B6               	movwf	(sendMessage@topic^(0+128)+1)
  4620  042A  086A               	movf	(_counter+1)^(0+128),w
  4621  042B  00F1               	movwf	___lwtoft@c+1
  4622  042C  0869               	movf	_counter^(0+128),w
  4623  042D  00F0               	movwf	___lwtoft@c
  4624  042E  3188  2088  3184   	fcall	___lwtoft
  4625  0431  0870               	movf	?___lwtoft,w
  4626  0432  0021               	movlb	1	; select bank1
  4627  0433  00B7               	movwf	sendMessage@value^(0+128)
  4628  0434  0871               	movf	?___lwtoft+1,w
  4629  0435  00B8               	movwf	(sendMessage@value+1)^(0+128)
  4630  0436  0872               	movf	?___lwtoft+2,w
  4631  0437  00B9               	movwf	(sendMessage@value+2)^(0+128)
  4632  0438  318D  25B9  3184   	fcall	_sendMessage
  4633                           
  4634                           ;main.c: 124: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4635  043B  30CF               	movlw	207
  4636  043C  0020               	movlb	0	; select bank0
  4637  043D  00CC               	movwf	___ftmul@f1
  4638  043E  3046               	movlw	70
  4639  043F  00CD               	movwf	___ftmul@f1+1
  4640  0440  3040               	movlw	64
  4641  0441  00CE               	movwf	___ftmul@f1+2
  4642  0442  3004               	movlw	4
  4643  0443  318F  275B  3184   	fcall	_getADCValue
  4644  0446  0020               	movlb	0	; select bank0
  4645  0447  0843               	movf	?_getADCValue,w
  4646  0448  00CF               	movwf	___ftmul@f2
  4647  0449  0844               	movf	?_getADCValue+1,w
  4648  044A  00D0               	movwf	___ftmul@f2+1
  4649  044B  0845               	movf	?_getADCValue+2,w
  4650  044C  00D1               	movwf	___ftmul@f2+2
  4651  044D  3185  25F5  3184   	fcall	___ftmul
  4652  0450  0020               	movlb	0	; select bank0
  4653  0451  084C               	movf	?___ftmul,w
  4654  0452  0024               	movlb	4	; select bank4
  4655  0453  00A6               	movwf	_loop$2248^(0+512)
  4656  0454  0020               	movlb	0	; select bank0
  4657  0455  084D               	movf	?___ftmul+1,w
  4658  0456  0024               	movlb	4	; select bank4
  4659  0457  00A7               	movwf	(_loop$2248+1)^(0+512)
  4660  0458  0020               	movlb	0	; select bank0
  4661  0459  084E               	movf	?___ftmul+2,w
  4662  045A  0024               	movlb	4	; select bank4
  4663  045B  00A8               	movwf	(_loop$2248+2)^(0+512)
  4664                           
  4665                           ;main.c: 124: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4666  045C  302C               	movlw	low loop@packet
  4667  045D  0021               	movlb	1	; select bank1
  4668  045E  00B3               	movwf	sendMessage@packet^(0+128)
  4669  045F  3002               	movlw	high loop@packet
  4670  0460  00B4               	movwf	(sendMessage@packet+1)^(0+128)
  4671  0461  3044               	movlw	low (STR_4| (0+32768))
  4672  0462  00B5               	movwf	sendMessage@topic^(0+128)
  4673  0463  3090               	movlw	high (STR_4| (0+32768))
  4674  0464  00B6               	movwf	(sendMessage@topic^(0+128)+1)
  4675  0465  0024               	movlb	4	; select bank4
  4676  0466  0826               	movf	_loop$2248^(0+512),w
  4677  0467  0021               	movlb	1	; select bank1
  4678  0468  00B7               	movwf	sendMessage@value^(0+128)
  4679  0469  0024               	movlb	4	; select bank4
  4680  046A  0827               	movf	(_loop$2248+1)^(0+512),w
  4681  046B  0021               	movlb	1	; select bank1
  4682  046C  00B8               	movwf	(sendMessage@value+1)^(0+128)
  4683  046D  0024               	movlb	4	; select bank4
  4684  046E  0828               	movf	(_loop$2248+2)^(0+512),w
  4685  046F  0021               	movlb	1	; select bank1
  4686  0470  00B9               	movwf	(sendMessage@value+2)^(0+128)
  4687  0471  318D  25B9  3184   	fcall	_sendMessage
  4688                           
  4689                           ;main.c: 136: FVRCONbits.TSEN = 1;
  4690  0474  0022               	movlb	2	; select bank2
  4691  0475  1697               	bsf	23,5	;volatile
  4692                           
  4693                           ;main.c: 137: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4694  0476  303D               	movlw	61
  4695  0477  318F  275B  3184   	fcall	_getADCValue
  4696  047A  0020               	movlb	0	; select bank0
  4697  047B  0843               	movf	?_getADCValue,w
  4698  047C  00CC               	movwf	___ftneg@f1
  4699  047D  0844               	movf	?_getADCValue+1,w
  4700  047E  00CD               	movwf	___ftneg@f1+1
  4701  047F  0845               	movf	?_getADCValue+2,w
  4702  0480  00CE               	movwf	___ftneg@f1+2
  4703  0481  3188  2024  3184   	fcall	___ftneg
  4704  0484  0020               	movlb	0	; select bank0
  4705  0485  084C               	movf	?___ftneg,w
  4706  0486  0024               	movlb	4	; select bank4
  4707  0487  00A9               	movwf	_loop$2249^(0+512)
  4708  0488  0020               	movlb	0	; select bank0
  4709  0489  084D               	movf	?___ftneg+1,w
  4710  048A  0024               	movlb	4	; select bank4
  4711  048B  00AA               	movwf	(_loop$2249+1)^(0+512)
  4712  048C  0020               	movlb	0	; select bank0
  4713  048D  084E               	movf	?___ftneg+2,w
  4714  048E  0024               	movlb	4	; select bank4
  4715  048F  00AB               	movwf	(_loop$2249+2)^(0+512)
  4716                           
  4717                           ;main.c: 137: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4718  0490  3000               	movlw	0
  4719  0491  0020               	movlb	0	; select bank0
  4720  0492  00B6               	movwf	___ftdiv@f2
  4721  0493  3000               	movlw	0
  4722  0494  00B7               	movwf	___ftdiv@f2+1
  4723  0495  3040               	movlw	64
  4724  0496  00B8               	movwf	___ftdiv@f2+2
  4725  0497  3012               	movlw	18
  4726  0498  00AC               	movwf	___ftadd@f1
  4727  0499  3003               	movlw	3
  4728  049A  00AD               	movwf	___ftadd@f1+1
  4729  049B  3040               	movlw	64
  4730  049C  00AE               	movwf	___ftadd@f1+2
  4731  049D  0024               	movlb	4	; select bank4
  4732  049E  0829               	movf	_loop$2249^(0+512),w
  4733  049F  0020               	movlb	0	; select bank0
  4734  04A0  00AF               	movwf	___ftadd@f2
  4735  04A1  0024               	movlb	4	; select bank4
  4736  04A2  082A               	movf	(_loop$2249+1)^(0+512),w
  4737  04A3  0020               	movlb	0	; select bank0
  4738  04A4  00B0               	movwf	___ftadd@f2+1
  4739  04A5  0024               	movlb	4	; select bank4
  4740  04A6  082B               	movf	(_loop$2249+2)^(0+512),w
  4741  04A7  0020               	movlb	0	; select bank0
  4742  04A8  00B1               	movwf	___ftadd@f2+2
  4743  04A9  3183  232B  3184   	fcall	___ftadd
  4744  04AC  0020               	movlb	0	; select bank0
  4745  04AD  082C               	movf	?___ftadd,w
  4746  04AE  00B9               	movwf	___ftdiv@f1
  4747  04AF  082D               	movf	?___ftadd+1,w
  4748  04B0  00BA               	movwf	___ftdiv@f1+1
  4749  04B1  082E               	movf	?___ftadd+2,w
  4750  04B2  00BB               	movwf	___ftdiv@f1+2
  4751  04B3  3187  2753  3184   	fcall	___ftdiv
  4752  04B6  0020               	movlb	0	; select bank0
  4753  04B7  0836               	movf	?___ftdiv,w
  4754  04B8  0024               	movlb	4	; select bank4
  4755  04B9  00A0               	movwf	loop@vt^(0+512)
  4756  04BA  0020               	movlb	0	; select bank0
  4757  04BB  0837               	movf	?___ftdiv+1,w
  4758  04BC  0024               	movlb	4	; select bank4
  4759  04BD  00A1               	movwf	(loop@vt+1)^(0+512)
  4760  04BE  0020               	movlb	0	; select bank0
  4761  04BF  0838               	movf	?___ftdiv+2,w
  4762  04C0  0024               	movlb	4	; select bank4
  4763  04C1  00A2               	movwf	(loop@vt+2)^(0+512)
  4764                           
  4765                           ;main.c: 138: FVRCONbits.TSEN = 0;
  4766  04C2  0022               	movlb	2	; select bank2
  4767  04C3  1297               	bcf	23,5	;volatile
  4768                           
  4769                           ;main.c: 143: float ta = (vt / -0.00132) - (0.6063 / -0.00132) - 40;
  4770  04C4  30A9               	movlw	169
  4771  04C5  0020               	movlb	0	; select bank0
  4772  04C6  00AC               	movwf	___ftadd@f1
  4773  04C7  30D1               	movlw	209
  4774  04C8  00AD               	movwf	___ftadd@f1+1
  4775  04C9  3043               	movlw	67
  4776  04CA  00AE               	movwf	___ftadd@f1+2
  4777  04CB  3004               	movlw	4
  4778  04CC  00B6               	movwf	___ftdiv@f2
  4779  04CD  30AD               	movlw	173
  4780  04CE  00B7               	movwf	___ftdiv@f2+1
  4781  04CF  30BA               	movlw	186
  4782  04D0  00B8               	movwf	___ftdiv@f2+2
  4783  04D1  0024               	movlb	4	; select bank4
  4784  04D2  0820               	movf	loop@vt^(0+512),w
  4785  04D3  0020               	movlb	0	; select bank0
  4786  04D4  00B9               	movwf	___ftdiv@f1
  4787  04D5  0024               	movlb	4	; select bank4
  4788  04D6  0821               	movf	(loop@vt+1)^(0+512),w
  4789  04D7  0020               	movlb	0	; select bank0
  4790  04D8  00BA               	movwf	___ftdiv@f1+1
  4791  04D9  0024               	movlb	4	; select bank4
  4792  04DA  0822               	movf	(loop@vt+2)^(0+512),w
  4793  04DB  0020               	movlb	0	; select bank0
  4794  04DC  00BB               	movwf	___ftdiv@f1+2
  4795  04DD  3187  2753  3184   	fcall	___ftdiv
  4796  04E0  0020               	movlb	0	; select bank0
  4797  04E1  0836               	movf	?___ftdiv,w
  4798  04E2  00AF               	movwf	___ftadd@f2
  4799  04E3  0837               	movf	?___ftdiv+1,w
  4800  04E4  00B0               	movwf	___ftadd@f2+1
  4801  04E5  0838               	movf	?___ftdiv+2,w
  4802  04E6  00B1               	movwf	___ftadd@f2+2
  4803  04E7  3183  232B  3184   	fcall	___ftadd
  4804  04EA  0020               	movlb	0	; select bank0
  4805  04EB  082C               	movf	?___ftadd,w
  4806  04EC  0024               	movlb	4	; select bank4
  4807  04ED  00A3               	movwf	loop@ta^(0+512)
  4808  04EE  0020               	movlb	0	; select bank0
  4809  04EF  082D               	movf	?___ftadd+1,w
  4810  04F0  0024               	movlb	4	; select bank4
  4811  04F1  00A4               	movwf	(loop@ta+1)^(0+512)
  4812  04F2  0020               	movlb	0	; select bank0
  4813  04F3  082E               	movf	?___ftadd+2,w
  4814  04F4  0024               	movlb	4	; select bank4
  4815  04F5  00A5               	movwf	(loop@ta+2)^(0+512)
  4816                           
  4817                           ;main.c: 145: sendMessage(&packet, "TEMP", ta);
  4818  04F6  302C               	movlw	low loop@packet
  4819  04F7  0021               	movlb	1	; select bank1
  4820  04F8  00B3               	movwf	sendMessage@packet^(0+128)
  4821  04F9  3002               	movlw	high loop@packet
  4822  04FA  00B4               	movwf	(sendMessage@packet+1)^(0+128)
  4823  04FB  303F               	movlw	low (STR_5| (0+32768))
  4824  04FC  00B5               	movwf	sendMessage@topic^(0+128)
  4825  04FD  3090               	movlw	high (STR_5| (0+32768))
  4826  04FE  00B6               	movwf	(sendMessage@topic^(0+128)+1)
  4827  04FF  0024               	movlb	4	; select bank4
  4828  0500  0823               	movf	loop@ta^(0+512),w
  4829  0501  0021               	movlb	1	; select bank1
  4830  0502  00B7               	movwf	sendMessage@value^(0+128)
  4831  0503  0024               	movlb	4	; select bank4
  4832  0504  0824               	movf	(loop@ta+1)^(0+512),w
  4833  0505  0021               	movlb	1	; select bank1
  4834  0506  00B8               	movwf	(sendMessage@value+1)^(0+128)
  4835  0507  0024               	movlb	4	; select bank4
  4836  0508  0825               	movf	(loop@ta+2)^(0+512),w
  4837  0509  0021               	movlb	1	; select bank1
  4838  050A  00B9               	movwf	(sendMessage@value+2)^(0+128)
  4839  050B  318D  25B9         	fcall	_sendMessage
  4840  050D  0008               	return
  4841  050E                     __end_of_loop:	
  4842                           
  4843                           	psect	text8
  4844  0DB9                     __ptext8:	
  4845 ;; *************** function _sendMessage *****************
  4846 ;; Defined at:
  4847 ;;		line 87 in file "main.c"
  4848 ;; Parameters:    Size  Location     Type
  4849 ;;  packet          2   19[BANK1 ] PTR struct .
  4850 ;;		 -> main@packet(33), loop@packet(33), 
  4851 ;;  topic           2   21[BANK1 ] PTR const unsigned char 
  4852 ;;		 -> STR_7(5), STR_5(5), STR_4(5), STR_3(6), 
  4853 ;;  value           3   23[BANK1 ] float 
  4854 ;; Auto vars:     Size  Location     Type
  4855 ;;  ftoaStatus      2   26[BANK1 ] int 
  4856 ;; Return value:  Size  Location     Type
  4857 ;;                  1    wreg      void 
  4858 ;; Registers used:
  4859 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  4860 ;; Tracked objects:
  4861 ;;		On entry : 0/0
  4862 ;;		On exit  : 0/0
  4863 ;;		Unchanged: 0/0
  4864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4865 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  4866 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4868 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  4869 ;;Total ram usage:        9 bytes
  4870 ;; Hardware stack levels used:    1
  4871 ;; Hardware stack levels required when called:   13
  4872 ;; This function calls:
  4873 ;;		_ftoa
  4874 ;;		_memset
  4875 ;;		_nrf24l01SendPacket
  4876 ;;		_sleepListren
  4877 ;;		_strcat
  4878 ;;		_strcpy
  4879 ;; This function is called by:
  4880 ;;		_loop
  4881 ;;		_main
  4882 ;; This function uses a non-reentrant model
  4883 ;;
  4884                           
  4885                           
  4886                           ;psect for function _sendMessage
  4887  0DB9                     _sendMessage:	
  4888                           
  4889                           ;main.c: 89: int ftoaStatus;;main.c: 91: memset(packet->Message, 0, sizeof(packet->Messa
      +                          ge));
  4890                           
  4891                           ;incstack = 0
  4892                           ; Regs used in _sendMessage: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+p
      +                          clath+cstack]
  4893  0DB9  3020               	movlw	32
  4894  0DBA  001E               	movwi fsr1++
  4895  0DBB  3000               	movlw	0
  4896  0DBC  001E               	movwi fsr1++
  4897  0DBD  3000               	movlw	0
  4898  0DBE  001E               	movwi fsr1++
  4899  0DBF  001E               	movwi fsr1++
  4900  0DC0  0021               	movlb	1	; select bank1
  4901  0DC1  0833               	movf	sendMessage@packet^(0+128),w
  4902  0DC2  3E01               	addlw	1
  4903  0DC3  00FE               	movwf	126
  4904  0DC4  3000               	movlw	0
  4905  0DC5  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  4906  0DC6  00FF               	movwf	127
  4907  0DC7  087E               	movf	126,w
  4908  0DC8  001E               	movwi fsr1++
  4909  0DC9  087F               	movf	127,w
  4910  0DCA  001E               	movwi fsr1++
  4911  0DCB  318A  22D1  318D   	fcall	_memset
  4912                           
  4913                           ;main.c: 92: strcpy(packet->Message, romData->name);
  4914  0DCE  0021               	movlb	1	; select bank1
  4915  0DCF  0833               	movf	sendMessage@packet^(0+128),w
  4916  0DD0  3E01               	addlw	1
  4917  0DD1  00F0               	movwf	strcpy@to
  4918  0DD2  3000               	movlw	0
  4919  0DD3  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  4920  0DD4  00F1               	movwf	strcpy@to+1
  4921  0DD5  086B               	movf	_romData^(0+128),w
  4922  0DD6  3E01               	addlw	1
  4923  0DD7  00F2               	movwf	strcpy@from
  4924  0DD8  3001               	movlw	1
  4925  0DD9  00F3               	movwf	strcpy@from+1
  4926  0DDA  3188  20E9  318D   	fcall	_strcpy
  4927                           
  4928                           ;main.c: 93: strcat(packet->Message, "/");
  4929  0DDD  0021               	movlb	1	; select bank1
  4930  0DDE  0833               	movf	sendMessage@packet^(0+128),w
  4931  0DDF  3E01               	addlw	1
  4932  0DE0  00AD               	movwf	strcat@to^(0+128)
  4933  0DE1  3000               	movlw	0
  4934  0DE2  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  4935  0DE3  00AE               	movwf	(strcat@to+1)^(0+128)
  4936  0DE4  3052               	movlw	low (STR_1| (0+32768))
  4937  0DE5  00AF               	movwf	strcat@from^(0+128)
  4938  0DE6  3090               	movlw	high (STR_1| (0+32768))
  4939  0DE7  00B0               	movwf	(strcat@from^(0+128)+1)
  4940  0DE8  318A  2225  318D   	fcall	_strcat
  4941                           
  4942                           ;main.c: 94: strcat(packet->Message, topic);
  4943  0DEB  0021               	movlb	1	; select bank1
  4944  0DEC  0833               	movf	sendMessage@packet^(0+128),w
  4945  0DED  3E01               	addlw	1
  4946  0DEE  00AD               	movwf	strcat@to^(0+128)
  4947  0DEF  3000               	movlw	0
  4948  0DF0  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  4949  0DF1  00AE               	movwf	(strcat@to+1)^(0+128)
  4950  0DF2  0836               	movf	(sendMessage@topic+1)^(0+128),w
  4951  0DF3  00B0               	movwf	(strcat@from+1)^(0+128)
  4952  0DF4  0835               	movf	sendMessage@topic^(0+128),w
  4953  0DF5  00AF               	movwf	strcat@from^(0+128)
  4954  0DF6  318A  2225  318D   	fcall	_strcat
  4955                           
  4956                           ;main.c: 95: strcat(packet->Message, "/");
  4957  0DF9  0021               	movlb	1	; select bank1
  4958  0DFA  0833               	movf	sendMessage@packet^(0+128),w
  4959  0DFB  3E01               	addlw	1
  4960  0DFC  00AD               	movwf	strcat@to^(0+128)
  4961  0DFD  3000               	movlw	0
  4962  0DFE  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  4963  0DFF  00AE               	movwf	(strcat@to+1)^(0+128)
  4964  0E00  3052               	movlw	low (STR_1| (0+32768))
  4965  0E01  00AF               	movwf	strcat@from^(0+128)
  4966  0E02  3090               	movlw	high (STR_1| (0+32768))
  4967  0E03  00B0               	movwf	(strcat@from^(0+128)+1)
  4968  0E04  318A  2225  318D   	fcall	_strcat
  4969                           
  4970                           ;main.c: 96: strcat(packet->Message, ftoa(value, &ftoaStatus));
  4971  0E07  0021               	movlb	1	; select bank1
  4972  0E08  0833               	movf	sendMessage@packet^(0+128),w
  4973  0E09  3E01               	addlw	1
  4974  0E0A  00AD               	movwf	strcat@to^(0+128)
  4975  0E0B  3000               	movlw	0
  4976  0E0C  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  4977  0E0D  00AE               	movwf	(strcat@to+1)^(0+128)
  4978  0E0E  0837               	movf	sendMessage@value^(0+128),w
  4979  0E0F  00A0               	movwf	ftoa@f^(0+128)
  4980  0E10  0838               	movf	(sendMessage@value+1)^(0+128),w
  4981  0E11  00A1               	movwf	(ftoa@f+1)^(0+128)
  4982  0E12  0839               	movf	(sendMessage@value+2)^(0+128),w
  4983  0E13  00A2               	movwf	(ftoa@f+2)^(0+128)
  4984  0E14  30BA               	movlw	(low (sendMessage@ftoaStatus| 0))& (0+255)
  4985  0E15  00FF               	movwf	127
  4986  0E16  087F               	movf	127,w
  4987  0E17  00A3               	movwf	ftoa@status^(0+128)
  4988  0E18  3185  250E  318D   	fcall	_ftoa
  4989  0E1B  0021               	movlb	1	; select bank1
  4990  0E1C  00AF               	movwf	strcat@from^(0+128)
  4991  0E1D  3001               	movlw	1
  4992  0E1E  00B0               	movwf	(strcat@from+1)^(0+128)
  4993  0E1F  318A  2225  318D   	fcall	_strcat
  4994                           
  4995                           ;main.c: 98: packet->packetData.byte = 0;
  4996  0E22  0021               	movlb	1	; select bank1
  4997  0E23  0833               	movf	sendMessage@packet^(0+128),w
  4998  0E24  0084               	movwf	4
  4999  0E25  0834               	movf	(sendMessage@packet+1)^(0+128),w
  5000  0E26  0085               	movwf	5
  5001  0E27  0180               	clrf	0
  5002                           
  5003                           ;main.c: 99: packet->packetData.ACKRequest = 1;
  5004  0E28  0833               	movf	sendMessage@packet^(0+128),w
  5005  0E29  0084               	movwf	4
  5006  0E2A  0834               	movf	(sendMessage@packet+1)^(0+128),w
  5007  0E2B  0085               	movwf	5
  5008  0E2C  1500               	bsf	0,2
  5009                           
  5010                           ;main.c: 101: nrf24l01SendPacket(packet);
  5011  0E2D  0834               	movf	(sendMessage@packet+1)^(0+128),w
  5012  0E2E  0020               	movlb	0	; select bank0
  5013  0E2F  00AA               	movwf	nrf24l01SendPacket@txPacket+1
  5014  0E30  0021               	movlb	1	; select bank1
  5015  0E31  0833               	movf	sendMessage@packet^(0+128),w
  5016  0E32  0020               	movlb	0	; select bank0
  5017  0E33  00A9               	movwf	nrf24l01SendPacket@txPacket
  5018  0E34  318C  2474  318D   	fcall	_nrf24l01SendPacket
  5019                           
  5020                           ;main.c: 103: sleepListren(3);
  5021  0E37  3003               	movlw	3
  5022  0E38  0020               	movlb	0	; select bank0
  5023  0E39  00A7               	movwf	sleepListren@seconds
  5024  0E3A  3000               	movlw	0
  5025  0E3B  00A8               	movwf	sleepListren@seconds+1
  5026  0E3C  3188  20B5         	fcall	_sleepListren
  5027  0E3E  0008               	return
  5028  0E3F                     __end_of_sendMessage:	
  5029                           
  5030                           	psect	text9
  5031  0A25                     __ptext9:	
  5032 ;; *************** function _strcat *****************
  5033 ;; Defined at:
  5034 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5035 ;; Parameters:    Size  Location     Type
  5036 ;;  to              2   13[BANK1 ] PTR unsigned char 
  5037 ;;		 -> main@packet(33), loop@packet(33), 
  5038 ;;  from            2   15[BANK1 ] PTR const unsigned char 
  5039 ;;		 -> ftoa@buf(17), STR_7(5), STR_5(5), STR_4(5), 
  5040 ;;		 -> STR_3(6), STR_2(2), STR_1(2), 
  5041 ;; Auto vars:     Size  Location     Type
  5042 ;;  cp              2   17[BANK1 ] PTR unsigned char 
  5043 ;;		 -> main@packet(33), loop@packet(33), 
  5044 ;; Return value:  Size  Location     Type
  5045 ;;                  2   13[BANK1 ] PTR unsigned char 
  5046 ;; Registers used:
  5047 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5048 ;; Tracked objects:
  5049 ;;		On entry : 0/0
  5050 ;;		On exit  : 0/0
  5051 ;;		Unchanged: 0/0
  5052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5053 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5054 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5056 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5057 ;;Total ram usage:        6 bytes
  5058 ;; Hardware stack levels used:    1
  5059 ;; Hardware stack levels required when called:    7
  5060 ;; This function calls:
  5061 ;;		Nothing
  5062 ;; This function is called by:
  5063 ;;		_sendMessage
  5064 ;; This function uses a non-reentrant model
  5065 ;;
  5066                           
  5067                           
  5068                           ;psect for function _strcat
  5069  0A25                     _strcat:	
  5070                           
  5071                           ;incstack = 0
  5072                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5073  0A25  0021               	movlb	1	; select bank1
  5074  0A26  082E               	movf	(strcat@to+1)^(0+128),w
  5075  0A27  00B2               	movwf	(strcat@cp+1)^(0+128)
  5076  0A28  082D               	movf	strcat@to^(0+128),w
  5077  0A29  00B1               	movwf	strcat@cp^(0+128)
  5078  0A2A                     l4231:	
  5079  0A2A  0831               	movf	strcat@cp^(0+128),w
  5080  0A2B  0084               	movwf	4
  5081  0A2C  0832               	movf	(strcat@cp+1)^(0+128),w
  5082  0A2D  0085               	movwf	5
  5083  0A2E  0800               	movf	0,w
  5084  0A2F  1903               	btfsc	3,2
  5085  0A30  2A3E               	goto	l4235
  5086  0A31  3001               	movlw	1
  5087  0A32  07B1               	addwf	strcat@cp^(0+128),f
  5088  0A33  3000               	movlw	0
  5089  0A34  3DB2               	addwfc	(strcat@cp+1)^(0+128),f
  5090  0A35  2A2A               	goto	l4231
  5091  0A36                     l4233:	
  5092  0A36  3001               	movlw	1
  5093  0A37  07B1               	addwf	strcat@cp^(0+128),f
  5094  0A38  3000               	movlw	0
  5095  0A39  3DB2               	addwfc	(strcat@cp+1)^(0+128),f
  5096  0A3A  3001               	movlw	1
  5097  0A3B  07AF               	addwf	strcat@from^(0+128),f
  5098  0A3C  3000               	movlw	0
  5099  0A3D  3DB0               	addwfc	(strcat@from+1)^(0+128),f
  5100  0A3E                     l4235:	
  5101  0A3E  082F               	movf	strcat@from^(0+128),w
  5102  0A3F  0084               	movwf	4
  5103  0A40  0830               	movf	(strcat@from+1)^(0+128),w
  5104  0A41  0085               	movwf	5
  5105  0A42  0800               	movf	0,w	;code access
  5106  0A43  00FF               	movwf	127
  5107  0A44  0831               	movf	strcat@cp^(0+128),w
  5108  0A45  0084               	movwf	4
  5109  0A46  0832               	movf	(strcat@cp+1)^(0+128),w
  5110  0A47  0085               	movwf	5
  5111  0A48  087F               	movf	127,w
  5112  0A49  0080               	movwf	0
  5113  0A4A  0800               	movf	0,w
  5114  0A4B  1903               	btfsc	3,2
  5115  0A4C  0008               	return
  5116  0A4D  2A36               	goto	l4233
  5117  0A4E                     __end_of_strcat:	
  5118                           ;	Return value of _strcat is never used
  5119                           
  5120                           
  5121                           	psect	text10
  5122  08B5                     __ptext10:	
  5123 ;; *************** function _sleepListren *****************
  5124 ;; Defined at:
  5125 ;;		line 74 in file "main.c"
  5126 ;; Parameters:    Size  Location     Type
  5127 ;;  seconds         2    7[BANK0 ] unsigned int 
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;		None
  5130 ;; Return value:  Size  Location     Type
  5131 ;;                  1    wreg      void 
  5132 ;; Registers used:
  5133 ;;		wreg, status,2, status,0, btemp+10, btemp+11, pclath, cstack
  5134 ;; Tracked objects:
  5135 ;;		On entry : 0/0
  5136 ;;		On exit  : 0/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5139 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5142 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5143 ;;Total ram usage:        2 bytes
  5144 ;; Hardware stack levels used:    1
  5145 ;; Hardware stack levels required when called:    9
  5146 ;; This function calls:
  5147 ;;		_sleepMs
  5148 ;; This function is called by:
  5149 ;;		_sendMessage
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           
  5154                           ;psect for function _sleepListren
  5155  08B5                     _sleepListren:	
  5156  08B5                     l4217:	
  5157                           ;main.c: 77: while(seconds--){
  5158                           
  5159                           ;incstack = 0
  5160                           ; Regs used in _sleepListren: [wreg+status,2+status,0+btemp+10+btemp+11+pclath+cstack]
  5161                           
  5162  08B5  3001               	movlw	1
  5163  08B6  0020               	movlb	0	; select bank0
  5164  08B7  02A7               	subwf	sleepListren@seconds,f
  5165  08B8  3000               	movlw	0
  5166  08B9  3BA8               	subwfb	sleepListren@seconds+1,f
  5167  08BA  0A27               	incf	sleepListren@seconds,w
  5168  08BB  1903               	btfsc	3,2
  5169  08BC  0A28               	incf	sleepListren@seconds+1,w
  5170  08BD  1903               	btfsc	3,2
  5171  08BE  0008               	return
  5172                           
  5173                           ;main.c: 80: sleepMs(100);
  5174  08BF  3064               	movlw	100
  5175  08C0  00F0               	movwf	sleepMs@milliseconds
  5176  08C1  3000               	movlw	0
  5177  08C2  00F1               	movwf	sleepMs@milliseconds+1
  5178  08C3  318A  2278  3188   	fcall	_sleepMs
  5179                           
  5180                           ;main.c: 83: sleepMs(900);
  5181  08C6  3084               	movlw	132
  5182  08C7  00F0               	movwf	sleepMs@milliseconds
  5183  08C8  3003               	movlw	3
  5184  08C9  00F1               	movwf	sleepMs@milliseconds+1
  5185  08CA  318A  2278  3188   	fcall	_sleepMs
  5186  08CD  28B5               	goto	l4217
  5187  08CE                     __end_of_sleepListren:	
  5188                           
  5189                           	psect	text11
  5190  0C74                     __ptext11:	
  5191 ;; *************** function _nrf24l01SendPacket *****************
  5192 ;; Defined at:
  5193 ;;		line 133 in file "nrf24l01.c"
  5194 ;; Parameters:    Size  Location     Type
  5195 ;;  txPacket        2    9[BANK0 ] PTR struct .
  5196 ;;		 -> main@packet(33), loop@packet(33), 
  5197 ;; Auto vars:     Size  Location     Type
  5198 ;;  loopCount       2   11[BANK0 ] unsigned int 
  5199 ;; Return value:  Size  Location     Type
  5200 ;;                  1    wreg      void 
  5201 ;; Registers used:
  5202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  5203 ;; Tracked objects:
  5204 ;;		On entry : 0/0
  5205 ;;		On exit  : 0/0
  5206 ;;		Unchanged: 0/0
  5207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5208 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5209 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5211 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5212 ;;Total ram usage:        4 bytes
  5213 ;; Hardware stack levels used:    1
  5214 ;; Hardware stack levels required when called:   12
  5215 ;; This function calls:
  5216 ;;		_exception
  5217 ;;		_nrf24l01Service
  5218 ;;		_sleepMs
  5219 ;;		_strcpy
  5220 ;; This function is called by:
  5221 ;;		_sendMessage
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           
  5226                           ;psect for function _nrf24l01SendPacket
  5227  0C74                     _nrf24l01SendPacket:	
  5228                           
  5229                           ;nrf24l01.c: 135: unsigned int loopCount = 10000;
  5230                           
  5231                           ;incstack = 0
  5232                           ; Regs used in _nrf24l01SendPacket: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-bte
      +                          mp+11+pclath+cstack]
  5233  0C74  3010               	movlw	16
  5234  0C75  0020               	movlb	0	; select bank0
  5235  0C76  00AB               	movwf	nrf24l01SendPacket@loopCount
  5236  0C77  3027               	movlw	39
  5237  0C78  00AC               	movwf	nrf24l01SendPacket@loopCount+1
  5238  0C79                     l4269:	
  5239                           ;nrf24l01.c: 136: while (status.TX != 0){
  5240                           
  5241  0C79  0020               	movlb	0	; select bank0
  5242  0C7A  0862               	movf	_status,w	;volatile
  5243  0C7B  1903               	btfsc	3,2
  5244  0C7C  2C97               	goto	l4271
  5245                           
  5246                           ;nrf24l01.c: 137: sleepMs(1);
  5247  0C7D  3001               	movlw	1
  5248  0C7E  00F0               	movwf	sleepMs@milliseconds
  5249  0C7F  3000               	movlw	0
  5250  0C80  00F1               	movwf	sleepMs@milliseconds+1
  5251  0C81  318A  2278  318C   	fcall	_sleepMs
  5252                           
  5253                           ;nrf24l01.c: 138: nrf24l01Service();
  5254  0C84  3186  26A9  318C   	fcall	_nrf24l01Service
  5255                           
  5256                           ;nrf24l01.c: 140: if (!loopCount--){
  5257  0C87  3001               	movlw	1
  5258  0C88  0020               	movlb	0	; select bank0
  5259  0C89  02AB               	subwf	nrf24l01SendPacket@loopCount,f
  5260  0C8A  3000               	movlw	0
  5261  0C8B  3BAC               	subwfb	nrf24l01SendPacket@loopCount+1,f
  5262  0C8C  0A2B               	incf	nrf24l01SendPacket@loopCount,w
  5263  0C8D  1D03               	skipz
  5264  0C8E  2C79               	goto	l4269
  5265  0C8F  0A2C               	incf	nrf24l01SendPacket@loopCount+1,w
  5266  0C90  1D03               	btfss	3,2
  5267  0C91  2C79               	goto	l4269
  5268                           
  5269                           ;nrf24l01.c: 141: exception(21);
  5270  0C92  3015               	movlw	21
  5271  0C93  3188  204B  318C   	fcall	_exception
  5272  0C96  2C79               	goto	l4269
  5273  0C97                     l4271:	
  5274                           
  5275                           ;nrf24l01.c: 142: };nrf24l01.c: 143: };nrf24l01.c: 145: strcpy(TXPacket.Message, txPacke
      +                          t->Message);
  5276  0C97  30C2               	movlw	low (_TXPacket+1)
  5277  0C98  00F0               	movwf	strcpy@to
  5278  0C99  3001               	movlw	high (_TXPacket+1)
  5279  0C9A  00F1               	movwf	strcpy@to+1
  5280  0C9B  0829               	movf	nrf24l01SendPacket@txPacket,w
  5281  0C9C  3E01               	addlw	1
  5282  0C9D  00FE               	movwf	126
  5283  0C9E  3000               	movlw	0
  5284  0C9F  3D2A               	addwfc	nrf24l01SendPacket@txPacket+1,w
  5285  0CA0  00FF               	movwf	127
  5286  0CA1  087E               	movf	126,w
  5287  0CA2  00F2               	movwf	strcpy@from
  5288  0CA3  087F               	movf	127,w
  5289  0CA4  00F3               	movwf	strcpy@from+1
  5290  0CA5  3188  20E9  318C   	fcall	_strcpy
  5291                           
  5292                           ;nrf24l01.c: 146: TXPacket.packetData = txPacket->packetData;
  5293  0CA8  0020               	movlb	0	; select bank0
  5294  0CA9  0829               	movf	nrf24l01SendPacket@txPacket,w
  5295  0CAA  0084               	movwf	4
  5296  0CAB  082A               	movf	nrf24l01SendPacket@txPacket+1,w
  5297  0CAC  0085               	movwf	5
  5298  0CAD  0800               	movf	0,w
  5299  0CAE  00FF               	movwf	127
  5300  0CAF  087F               	movf	127,w
  5301  0CB0  0023               	movlb	3	; select bank3
  5302  0CB1  00C1               	movwf	_TXPacket^(0+384)
  5303                           
  5304                           ;nrf24l01.c: 148: status.TX = 1;
  5305  0CB2  3001               	movlw	1
  5306  0CB3  00FF               	movwf	127
  5307  0CB4  087F               	movf	127,w
  5308  0CB5  0020               	movlb	0	; select bank0
  5309  0CB6  00E2               	movwf	_status	;volatile
  5310                           
  5311                           ;nrf24l01.c: 150: nrf24l01Service();
  5312  0CB7  3186  26A9         	fcall	_nrf24l01Service
  5313  0CB9  0008               	return
  5314  0CBA                     __end_of_nrf24l01SendPacket:	
  5315                           
  5316                           	psect	text12
  5317  08E9                     __ptext12:	
  5318 ;; *************** function _strcpy *****************
  5319 ;; Defined at:
  5320 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  5321 ;; Parameters:    Size  Location     Type
  5322 ;;  to              2    0[COMMON] PTR unsigned char 
  5323 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5324 ;;  from            2    2[COMMON] PTR const unsigned char 
  5325 ;;		 -> romDataMap.name(16), packet.Message(32), packet.Message(32), main@packet(33), 
  5326 ;;		 -> STR_6(4), loop@packet(33), romDataMap(28), 
  5327 ;; Auto vars:     Size  Location     Type
  5328 ;;  cp              2    7[BANK0 ] PTR unsigned char 
  5329 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5330 ;; Return value:  Size  Location     Type
  5331 ;;                  2    0[COMMON] PTR unsigned char 
  5332 ;; Registers used:
  5333 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5334 ;; Tracked objects:
  5335 ;;		On entry : 0/0
  5336 ;;		On exit  : 0/0
  5337 ;;		Unchanged: 0/0
  5338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5339 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5340 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5342 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5343 ;;Total ram usage:        6 bytes
  5344 ;; Hardware stack levels used:    1
  5345 ;; Hardware stack levels required when called:    7
  5346 ;; This function calls:
  5347 ;;		Nothing
  5348 ;; This function is called by:
  5349 ;;		_sendMessage
  5350 ;;		_main
  5351 ;;		_nrf24l01SendPacket
  5352 ;; This function uses a non-reentrant model
  5353 ;;
  5354                           
  5355                           
  5356                           ;psect for function _strcpy
  5357  08E9                     _strcpy:	
  5358                           
  5359                           ;incstack = 0
  5360                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5361  08E9  0871               	movf	strcpy@to+1,w
  5362  08EA  0020               	movlb	0	; select bank0
  5363  08EB  00A8               	movwf	strcpy@cp+1
  5364  08EC  0870               	movf	strcpy@to,w
  5365  08ED  00A7               	movwf	strcpy@cp
  5366  08EE                     l3905:	
  5367  08EE  0872               	movf	strcpy@from,w
  5368  08EF  0084               	movwf	4
  5369  08F0  0873               	movf	strcpy@from+1,w
  5370  08F1  0085               	movwf	5
  5371  08F2  0800               	movf	0,w	;code access
  5372  08F3  00FF               	movwf	127
  5373  08F4  0827               	movf	strcpy@cp,w
  5374  08F5  0084               	movwf	4
  5375  08F6  0828               	movf	strcpy@cp+1,w
  5376  08F7  0085               	movwf	5
  5377  08F8  087F               	movf	127,w
  5378  08F9  0080               	movwf	0
  5379  08FA  0800               	movf	0,w
  5380  08FB  1903               	btfsc	3,2
  5381  08FC  0008               	return
  5382  08FD  3001               	movlw	1
  5383  08FE  07A7               	addwf	strcpy@cp,f
  5384  08FF  3000               	movlw	0
  5385  0900  3DA8               	addwfc	strcpy@cp+1,f
  5386  0901  3001               	movlw	1
  5387  0902  07F2               	addwf	strcpy@from,f
  5388  0903  3000               	movlw	0
  5389  0904  3DF3               	addwfc	strcpy@from+1,f
  5390  0905  28EE               	goto	l3905
  5391  0906                     __end_of_strcpy:	
  5392                           ;	Return value of _strcpy is never used
  5393                           
  5394                           
  5395                           	psect	text13
  5396  06A9                     __ptext13:	
  5397 ;; *************** function _nrf24l01Service *****************
  5398 ;; Defined at:
  5399 ;;		line 239 in file "nrf24l01.c"
  5400 ;; Parameters:    Size  Location     Type
  5401 ;;		None
  5402 ;; Auto vars:     Size  Location     Type
  5403 ;;  width           1  [STACK] unsigned char 
  5404 ;;  i               1  [STACK] unsigned char 
  5405 ;; Return value:  Size  Location     Type
  5406 ;;                  1    wreg      void 
  5407 ;; Registers used:
  5408 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
  5409 ;; Tracked objects:
  5410 ;;		On entry : 0/0
  5411 ;;		On exit  : 1C/0
  5412 ;;		Unchanged: 0/0
  5413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5418 ;;Total ram usage:        0 bytes
  5419 ;; Hardware stack levels used:    1
  5420 ;; Hardware stack levels required when called:   11
  5421 ;; This function calls:
  5422 ;;		_memset
  5423 ;;		_nrf24l01SPIEnd
  5424 ;;		_nrf24l01SPISend
  5425 ;;		_nrf24l01SPIStart
  5426 ;;		_nrf24l01Send
  5427 ;;		_nrf24l01SendTXBuffer
  5428 ;;		_nrf24l01SetRXMode
  5429 ;;		_nrf24l01SetTXPipe
  5430 ;;		_strcmp
  5431 ;; This function is called by:
  5432 ;;		_nrf24l01SendPacket
  5433 ;;		_nrf24l01ISR
  5434 ;; This function uses a reentrant model
  5435 ;;
  5436                           
  5437                           
  5438                           ;psect for function _nrf24l01Service
  5439  06A9                     _nrf24l01Service:	
  5440                           
  5441                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5442  06A9  3142               	addfsr 1,2
  5443                           
  5444                           ;nrf24l01.c: 241: unsigned char i;;nrf24l01.c: 243: if (status.TX == 1){
  5445                           
  5446                           ;incstack = 0
  5447 ;; hardware stack exceeded
  5448                           ; Regs used in _nrf24l01Service: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+
      +                          11+pclath]
  5449  06AA  0020               	movlb	0	; select bank0
  5450  06AB  0362               	decf	_status,w	;volatile
  5451  06AC  1D03               	btfss	3,2
  5452  06AD  2EB4               	goto	l4475
  5453                           
  5454                           ;nrf24l01.c: 246: status.TX = 2;
  5455  06AE  3002               	movlw	2
  5456  06AF  00E2               	movwf	_status	;volatile
  5457                           
  5458                           ;nrf24l01.c: 247: nrf24l01SendTXBuffer(&TXPacket);
  5459  06B0  30C1               	movlw	(low (_TXPacket| (0+256)))& (0+255)
  5460  06B1  318C  24BA  3186   	fcall	_nrf24l01SendTXBuffer
  5461  06B4                     l4475:	
  5462                           
  5463                           ;nrf24l01.c: 248: };nrf24l01.c: 250: if (status.TX == 3){
  5464  06B4  3003               	movlw	3
  5465  06B5  0662               	xorwf	_status,w	;volatile
  5466  06B6  1D03               	btfss	3,2
  5467  06B7  2EBE               	goto	l4481
  5468                           
  5469                           ;nrf24l01.c: 251: if (!status.retryCount--){
  5470  06B8  03E6               	decf	_status+4,f	;volatile
  5471  06B9  0A66               	incf	_status+4,w	;volatile
  5472  06BA  1D03               	btfss	3,2
  5473  06BB  2EBE               	goto	l4481
  5474                           
  5475                           ;nrf24l01.c: 252: status.TX = 1;
  5476  06BC  3001               	movlw	1
  5477  06BD  00E2               	movwf	_status	;volatile
  5478  06BE                     l4481:	
  5479                           
  5480                           ;nrf24l01.c: 253: };nrf24l01.c: 254: };nrf24l01.c: 256: if (status.RX == 1){
  5481  06BE  0363               	decf	_status+1,w	;volatile
  5482  06BF  1D03               	btfss	3,2
  5483  06C0  2F22               	goto	l4517
  5484                           
  5485                           ;nrf24l01.c: 259: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  5486  06C1  3020               	movlw	32
  5487  06C2  001E               	movwi fsr1++
  5488  06C3  3000               	movlw	0
  5489  06C4  001E               	movwi fsr1++
  5490  06C5  3000               	movlw	0
  5491  06C6  001E               	movwi fsr1++
  5492  06C7  001E               	movwi fsr1++
  5493  06C8  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5494  06C9  001E               	movwi fsr1++
  5495  06CA  3001               	movlw	1
  5496  06CB  001E               	movwi fsr1++
  5497  06CC  318A  22D1  3186   	fcall	_memset
  5498                           
  5499                           ;nrf24l01.c: 260: RXPacket.packetData.byte = 0x00;
  5500  06CF  0023               	movlb	3	; select bank3
  5501  06D0  01A0               	clrf	_RXPacket^(0+384)
  5502                           
  5503                           ;nrf24l01.c: 263: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  5504  06D1  3000               	movlw	0
  5505  06D2  001E               	movwi fsr1++
  5506  06D3  3060               	movlw	96
  5507  06D4  3188  2075  3186   	fcall	_nrf24l01Send
  5508                           
  5509                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5510  06D7  3FFE               	movwi [-2]fsr1
  5511                           
  5512                           ;nrf24l01.c: 266: PORTAbits.RA0 = 0;
  5513  06D8  0020               	movlb	0	; select bank0
  5514  06D9  100C               	bcf	12,0	;volatile
  5515                           
  5516                           ;nrf24l01.c: 269: nrf24l01SPIStart();
  5517  06DA  3188  2036  3186   	fcall	_nrf24l01SPIStart
  5518                           
  5519                           ;nrf24l01.c: 272: nrf24l01SPISend((unsigned) 0b01100001);
  5520  06DD  3061               	movlw	97
  5521  06DE  3188  2066  3186   	fcall	_nrf24l01SPISend
  5522                           
  5523                           ;nrf24l01.c: 275: RXPacket.packetData.byte = nrf24l01SPISend(0);
  5524  06E1  3000               	movlw	0
  5525  06E2  3188  2066  3186   	fcall	_nrf24l01SPISend
  5526  06E5  0023               	movlb	3	; select bank3
  5527  06E6  00A0               	movwf	_RXPacket^(0+384)
  5528                           
  5529                           ;nrf24l01.c: 276: width--;
  5530                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5531  06E7  3F7E               	moviw [-2]fsr1
  5532  06E8  00F4               	movwf	116
  5533  06E9  3001               	movlw	1
  5534  06EA  0274               	subwf	116,w
  5535  06EB  3FFE               	movwi [-2]fsr1
  5536                           
  5537                           ;nrf24l01.c: 278: for (i = 0; i < width; i++) {
  5538                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5539  06EC  3000               	movlw	0
  5540  06ED  3FFF               	movwi [-1]fsr1
  5541  06EE                     l4505:	
  5542                           
  5543                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5544  06EE  3F7F               	moviw [-1]fsr1
  5545  06EF  00FF               	movwf	127
  5546                           
  5547                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5548  06F0  3F7E               	moviw [-2]fsr1
  5549  06F1  027F               	subwf	127,w
  5550  06F2  1803               	btfsc	3,0
  5551  06F3  2F03               	goto	l4507
  5552                           
  5553                           ;nrf24l01.c: 280: RXPacket.Message[i] = nrf24l01SPISend(0);
  5554                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5555  06F4  3F7F               	moviw [-1]fsr1
  5556  06F5  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5557  06F6  0084               	movwf	4
  5558  06F7  3001               	movlw	1	; select bank3/4
  5559  06F8  3001               	movlw	1	; select bank3/4
  5560  06F9  0085               	movwf	5
  5561  06FA  3000               	movlw	0
  5562  06FB  3188  2066  3186   	fcall	_nrf24l01SPISend
  5563  06FE  0080               	movwf	0
  5564                           
  5565                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5566  06FF  3F7F               	moviw [-1]fsr1
  5567  0700  3E01               	addlw	1
  5568  0701  3FFF               	movwi [-1]fsr1
  5569  0702  2EEE               	goto	l4505
  5570  0703                     l4507:	
  5571                           
  5572                           ;nrf24l01.c: 281: };nrf24l01.c: 284: nrf24l01SPIEnd();
  5573  0703  3188  202D  3186   	fcall	_nrf24l01SPIEnd
  5574                           
  5575                           ;nrf24l01.c: 287: PORTAbits.RA0 = 1;
  5576  0706  0020               	movlb	0	; select bank0
  5577  0707  140C               	bsf	12,0	;volatile
  5578                           
  5579                           ;nrf24l01.c: 290: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
  5580  0708  0C64               	rrf	_status+2,w	;volatile
  5581  0709  3907               	andlw	7
  5582  070A  00FF               	movwf	127
  5583  070B  0EFF               	swapf	127,f
  5584  070C  0023               	movlb	3	; select bank3
  5585  070D  0820               	movf	_RXPacket^(0+384),w
  5586  070E  067F               	xorwf	127,w
  5587  070F  398F               	andlw	-113
  5588  0710  067F               	xorwf	127,w
  5589  0711  00A0               	movwf	_RXPacket^(0+384)
  5590                           
  5591                           ;nrf24l01.c: 293: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  5592  0712  3000               	movlw	0
  5593  0713  001E               	movwi fsr1++
  5594  0714  3009               	movlw	9
  5595  0715  3188  2075  3186   	fcall	_nrf24l01Send
  5596  0718  00FF               	movwf	127
  5597  0719  0023               	movlb	3	; select bank3
  5598  071A  0820               	movf	_RXPacket^(0+384),w
  5599  071B  067F               	xorwf	127,w
  5600  071C  39FE               	andlw	-2
  5601  071D  067F               	xorwf	127,w
  5602  071E  00A0               	movwf	_RXPacket^(0+384)
  5603                           
  5604                           ;nrf24l01.c: 295: status.RX = 2;
  5605  071F  3002               	movlw	2
  5606  0720  0020               	movlb	0	; select bank0
  5607  0721  00E3               	movwf	_status+1	;volatile
  5608  0722                     l4517:	
  5609                           
  5610                           ;nrf24l01.c: 296: };nrf24l01.c: 298: if (status.RX == 2){
  5611  0722  3002               	movlw	2
  5612  0723  0663               	xorwf	_status+1,w	;volatile
  5613  0724  1D03               	btfss	3,2
  5614  0725  2F3F               	goto	l4529
  5615                           
  5616                           ;nrf24l01.c: 301: if (RXPacket.packetData.IsACK){
  5617  0726  0023               	movlb	3	; select bank3
  5618  0727  1DA0               	btfss	_RXPacket^(0+384),3
  5619  0728  2F3F               	goto	l4529
  5620                           
  5621                           ;nrf24l01.c: 303: if (status.TX == 3){
  5622  0729  3003               	movlw	3
  5623  072A  0020               	movlb	0	; select bank0
  5624  072B  0662               	xorwf	_status,w	;volatile
  5625  072C  1D03               	btfss	3,2
  5626  072D  2F3F               	goto	l4529
  5627                           
  5628                           ;nrf24l01.c: 305: if (strcmp(RXPacket.Message, TXPacket.Message) == 0){
  5629  072E  30C2               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  5630  072F  001E               	movwi fsr1++
  5631  0730  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5632  0731  3189  21FC  3186   	fcall	_strcmp
  5633  0734  0874               	movf	116,w
  5634  0735  0475               	iorwf	117,w
  5635  0736  1D03               	btfss	3,2
  5636  0737  2F3F               	goto	l4529
  5637                           
  5638                           ;nrf24l01.c: 307: status.TX = 0;
  5639  0738  0020               	movlb	0	; select bank0
  5640  0739  01E2               	clrf	_status	;volatile
  5641                           
  5642                           ;nrf24l01.c: 308: status.RX = 0;
  5643  073A  01E3               	clrf	_status+1	;volatile
  5644                           
  5645                           ;nrf24l01.c: 310: nrf24l01SetRXMode(0);
  5646  073B  3000               	movlw	0
  5647  073C  318B  2337  3186   	fcall	_nrf24l01SetRXMode
  5648  073F                     l4529:	
  5649                           
  5650                           ;nrf24l01.c: 312: };nrf24l01.c: 313: };nrf24l01.c: 314: };nrf24l01.c: 315: };nrf24l01.c:
      +                           317: if (status.RX == 2){
  5651  073F  3002               	movlw	2
  5652  0740  0020               	movlb	0	; select bank0
  5653  0741  0663               	xorwf	_status+1,w	;volatile
  5654  0742  1D03               	btfss	3,2
  5655  0743  2F51               	goto	l325
  5656                           
  5657                           ;nrf24l01.c: 319: if (RXPacket.packetData.ACKRequest){
  5658  0744  0023               	movlb	3	; select bank3
  5659  0745  1D20               	btfss	_RXPacket^(0+384),2
  5660  0746  2F51               	goto	l325
  5661                           
  5662                           ;nrf24l01.c: 321: RXPacket.packetData.ACKRequest = 0;
  5663  0747  1120               	bcf	_RXPacket^(0+384),2
  5664                           
  5665                           ;nrf24l01.c: 322: RXPacket.packetData.IsACK = 1;
  5666  0748  15A0               	bsf	_RXPacket^(0+384),3
  5667                           
  5668                           ;nrf24l01.c: 324: nrf24l01SetTXPipe(RXPacket.packetData.Pipe);
  5669  0749  0E20               	swapf	_RXPacket^(0+384),w
  5670  074A  3907               	andlw	7
  5671  074B  318B  23AE  3186   	fcall	_nrf24l01SetTXPipe
  5672                           
  5673                           ;nrf24l01.c: 326: nrf24l01SendTXBuffer(&RXPacket);
  5674  074E  30A0               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  5675  074F  318C  24BA         	fcall	_nrf24l01SendTXBuffer
  5676  0751                     l325:	
  5677                           
  5678                           ; _nrf24l01Service: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  5679  0751  317E               	addfsr 1,-2
  5680  0752  0008               	return
  5681  0753                     __end_of_nrf24l01Service:	
  5682                           
  5683                           	psect	text14
  5684  09FC                     __ptext14:	
  5685 ;; *************** function _strcmp *****************
  5686 ;; Defined at:
  5687 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  5688 ;; Parameters:    Size  Location     Type
  5689 ;;  s1              1    wreg     PTR const unsigned char 
  5690 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5691 ;;  s2              1  [STACK] PTR const unsigned char 
  5692 ;;		 -> TXPacket.Message(32), TXPacket(33), 
  5693 ;; Auto vars:     Size  Location     Type
  5694 ;;  s1              1  [STACK] PTR const unsigned char 
  5695 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5696 ;;  r               1  [STACK] char 
  5697 ;; Return value:  Size  Location     Type
  5698 ;;                  2  [STACK] int 
  5699 ;; Registers used:
  5700 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  5701 ;; Tracked objects:
  5702 ;;		On entry : 1F/0
  5703 ;;		On exit  : 0/0
  5704 ;;		Unchanged: 0/0
  5705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5710 ;;Total ram usage:        0 bytes
  5711 ;; Hardware stack levels used:    1
  5712 ;; Hardware stack levels required when called:    7
  5713 ;; This function calls:
  5714 ;;		Nothing
  5715 ;; This function is called by:
  5716 ;;		_nrf24l01Service
  5717 ;; This function uses a reentrant model
  5718 ;;
  5719                           
  5720                           
  5721                           ;psect for function _strcmp
  5722  09FC                     _strcmp:	
  5723                           
  5724                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5725  09FC  3142               	addfsr 1,2
  5726                           
  5727                           ;incstack = 0
  5728 ;; hardware stack exceeded
  5729                           ; Regs used in _strcmp: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  5730                           ;strcmp@s1 stored from wreg
  5731                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5732  09FD  3FFE               	movwi [-2]fsr1
  5733  09FE  2A0C               	goto	l4337
  5734  09FF                     l4339:	
  5735                           
  5736                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5737  09FF  3F7E               	moviw [-2]fsr1
  5738  0A00  0084               	movwf	4
  5739  0A01  3001               	movlw	1	; select bank2/3
  5740  0A02  0085               	movwf	5
  5741  0A03  0800               	movf	0,w
  5742  0A04  1903               	btfsc	3,2
  5743  0A05  2A1E               	goto	l4341
  5744                           
  5745                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5746  0A06  3F7E               	moviw [-2]fsr1
  5747  0A07  3E01               	addlw	1
  5748  0A08  3FFE               	movwi [-2]fsr1
  5749                           
  5750                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5751  0A09  3F7D               	moviw [-3]fsr1
  5752  0A0A  3E01               	addlw	1
  5753  0A0B  3FFD               	movwi [-3]fsr1
  5754  0A0C                     l4337:	
  5755                           
  5756                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5757  0A0C  3F7D               	moviw [-3]fsr1
  5758  0A0D  0084               	movwf	4
  5759  0A0E  3001               	movlw	1	; select bank2/3
  5760  0A0F  0085               	movwf	5
  5761  0A10  0800               	movf	0,w
  5762  0A11  00FF               	movwf	127
  5763                           
  5764                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5765  0A12  3F7E               	moviw [-2]fsr1
  5766  0A13  0084               	movwf	4
  5767  0A14  3001               	movlw	1	; select bank2/3
  5768  0A15  0085               	movwf	5
  5769  0A16  0800               	movf	0,w
  5770  0A17  00F4               	movwf	116
  5771  0A18  087F               	movf	127,w
  5772  0A19  0274               	subwf	116,w
  5773                           
  5774                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5775  0A1A  3FFF               	movwi [-1]fsr1
  5776  0A1B  0889               	movf	9,f
  5777  0A1C  1903               	btfsc	3,2
  5778  0A1D  29FF               	goto	l4339
  5779  0A1E                     l4341:	
  5780                           
  5781                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5782  0A1E  3F7F               	moviw [-1]fsr1
  5783  0A1F  00F4               	movwf	116
  5784  0A20  01F5               	clrf	117
  5785  0A21  1BF4               	btfsc	116,7
  5786  0A22  03F5               	decf	117,f
  5787                           
  5788                           ; _strcmp: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsiz
      +                          e = 1, vargsize = 0
  5789  0A23  317D               	addfsr 1,-3
  5790  0A24  0008               	return
  5791  0A25                     __end_of_strcmp:	
  5792                           
  5793                           	psect	text15
  5794  0BAE                     __ptext15:	
  5795 ;; *************** function _nrf24l01SetTXPipe *****************
  5796 ;; Defined at:
  5797 ;;		line 97 in file "nrf24l01.c"
  5798 ;; Parameters:    Size  Location     Type
  5799 ;;  pipe            1    wreg     unsigned char 
  5800 ;; Auto vars:     Size  Location     Type
  5801 ;;  pipe            1  [STACK] unsigned char 
  5802 ;; Return value:  Size  Location     Type
  5803 ;;                  1    wreg      void 
  5804 ;; Registers used:
  5805 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+10, btemp+11, pclath
  5806 ;; Tracked objects:
  5807 ;;		On entry : 1C/1
  5808 ;;		On exit  : 1F/1
  5809 ;;		Unchanged: 0/0
  5810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5815 ;;Total ram usage:        0 bytes
  5816 ;; Hardware stack levels used:    1
  5817 ;; Hardware stack levels required when called:    8
  5818 ;; This function calls:
  5819 ;;		___bmul
  5820 ;;		_nrf24l01SPIEnd
  5821 ;;		_nrf24l01SPISend
  5822 ;;		_nrf24l01SPIStart
  5823 ;; This function is called by:
  5824 ;;		_main
  5825 ;;		_nrf24l01Service
  5826 ;;		_nrf24l01InitRegisters
  5827 ;; This function uses a reentrant model
  5828 ;;
  5829                           
  5830                           
  5831                           ;psect for function _nrf24l01SetTXPipe
  5832  0BAE                     _nrf24l01SetTXPipe:	
  5833                           
  5834                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5835  0BAE  3141               	addfsr 1,1
  5836                           
  5837                           ;incstack = 0
  5838 ;; hardware stack exceeded
  5839                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+10+bte
      +                          mp+11+pclath]
  5840                           ;nrf24l01SetTXPipe@pipe stored from wreg
  5841                           ;stkvar	nrf24l01SetTXPipe@pipe @ sp[(-1)+0]
  5842  0BAF  3FFF               	movwi [-1]fsr1
  5843                           
  5844                           ;nrf24l01.c: 100: nrf24l01SPIStart();
  5845  0BB0  3188  2036  318B   	fcall	_nrf24l01SPIStart
  5846                           
  5847                           ;nrf24l01.c: 101: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  5848  0BB3  3030               	movlw	48
  5849  0BB4  3188  2066  318B   	fcall	_nrf24l01SPISend
  5850                           
  5851                           ;nrf24l01.c: 102: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  5852  0BB7  303E               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  5853  0BB8  0084               	movwf	4
  5854  0BB9  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  5855  0BBA  0085               	movwf	5
  5856  0BBB  0800               	movf	0,w	;code access
  5857  0BBC  00FE               	movwf	126
  5858  0BBD  3021               	movlw	33
  5859  0BBE  001E               	movwi fsr1++
  5860                           
  5861                           ;stkvar	nrf24l01SetTXPipe@pipe @ sp[(-2)+0]
  5862  0BBF  3F7E               	moviw [-2]fsr1
  5863  0BC0  3188  209D  318B   	fcall	___bmul
  5864  0BC3  077E               	addwf	126,w
  5865  0BC4  3188  2066  318B   	fcall	_nrf24l01SPISend
  5866                           
  5867                           ;nrf24l01.c: 103: nrf24l01SPISend(n_ADDRESS_P0[3]);
  5868  0BC7  303D               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  5869  0BC8  0084               	movwf	4
  5870  0BC9  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  5871  0BCA  0085               	movwf	5
  5872  0BCB  0800               	movf	0,w	;code access
  5873  0BCC  3188  2066  318B   	fcall	_nrf24l01SPISend
  5874                           
  5875                           ;nrf24l01.c: 104: nrf24l01SPISend(n_ADDRESS_P0[2]);
  5876  0BCF  303C               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  5877  0BD0  0084               	movwf	4
  5878  0BD1  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  5879  0BD2  0085               	movwf	5
  5880  0BD3  0800               	movf	0,w	;code access
  5881  0BD4  3188  2066  318B   	fcall	_nrf24l01SPISend
  5882                           
  5883                           ;nrf24l01.c: 105: nrf24l01SPISend(n_ADDRESS_P0[1]);
  5884  0BD7  303B               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  5885  0BD8  0084               	movwf	4
  5886  0BD9  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  5887  0BDA  0085               	movwf	5
  5888  0BDB  0800               	movf	0,w	;code access
  5889  0BDC  3188  2066  318B   	fcall	_nrf24l01SPISend
  5890                           
  5891                           ;nrf24l01.c: 106: nrf24l01SPISend(n_ADDRESS_P0[0]);
  5892  0BDF  303A               	movlw	low (_n_ADDRESS_P0| (0+32768))
  5893  0BE0  0084               	movwf	4
  5894  0BE1  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  5895  0BE2  0085               	movwf	5
  5896  0BE3  0800               	movf	0,w	;code access
  5897  0BE4  3188  2066  318B   	fcall	_nrf24l01SPISend
  5898                           
  5899                           ;nrf24l01.c: 107: nrf24l01SPIEnd();
  5900  0BE7  3188  202D         	fcall	_nrf24l01SPIEnd
  5901                           
  5902                           ; _nrf24l01SetTXPipe: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
  5903  0BE9  317F               	addfsr 1,-1
  5904  0BEA  0008               	return
  5905  0BEB                     __end_of_nrf24l01SetTXPipe:	
  5906                           
  5907                           	psect	text16
  5908  089D                     __ptext16:	
  5909 ;; *************** function ___bmul *****************
  5910 ;; Defined at:
  5911 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  5912 ;; Parameters:    Size  Location     Type
  5913 ;;  multiplier      1    wreg     unsigned char 
  5914 ;;  multiplicand    1  [STACK] unsigned char 
  5915 ;; Auto vars:     Size  Location     Type
  5916 ;;  multiplier      1  [STACK] unsigned char 
  5917 ;;  product         1  [STACK] unsigned char 
  5918 ;; Return value:  Size  Location     Type
  5919 ;;                  1    wreg      unsigned char 
  5920 ;; Registers used:
  5921 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+11
  5922 ;; Tracked objects:
  5923 ;;		On entry : 1B/0
  5924 ;;		On exit  : 0/0
  5925 ;;		Unchanged: 0/0
  5926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5931 ;;Total ram usage:        0 bytes
  5932 ;; Hardware stack levels used:    1
  5933 ;; Hardware stack levels required when called:    7
  5934 ;; This function calls:
  5935 ;;		Nothing
  5936 ;; This function is called by:
  5937 ;;		_nrf24l01SetTXPipe
  5938 ;;		_nrf24l01InitRegisters
  5939 ;; This function uses a reentrant model
  5940 ;;
  5941                           
  5942                           
  5943                           ;psect for function ___bmul
  5944  089D                     ___bmul:	
  5945                           
  5946                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5947  089D  3142               	addfsr 1,2
  5948                           
  5949                           ;incstack = 0
  5950 ;; hardware stack exceeded
  5951                           ; Regs used in ___bmul: [wreg+fsr1l+fsr1h+status,2-btemp+0+btemp+11]
  5952                           ;___bmul@multiplier stored from wreg
  5953                           ;stkvar	___bmul@multiplier @ sp[(-2)+0]
  5954  089E  3FFE               	movwi [-2]fsr1
  5955                           
  5956                           ;stkvar	___bmul@product @ sp[(-2)+1]
  5957  089F  3000               	movlw	0
  5958  08A0  3FFF               	movwi [-1]fsr1
  5959  08A1                     l568:	
  5960                           
  5961                           ;stkvar	___bmul@multiplier @ sp[(-2)+0]
  5962  08A1  3F7E               	moviw [-2]fsr1
  5963  08A2  1C09               	btfss	9,0
  5964  08A3  28A9               	goto	l4057
  5965                           
  5966                           ;stkvar	___bmul@multiplicand @ sp[(-2)+-1]
  5967  08A4  3F7D               	moviw [-3]fsr1
  5968  08A5  00FF               	movwf	127
  5969                           
  5970                           ;stkvar	___bmul@product @ sp[(-2)+1]
  5971  08A6  3F7F               	moviw [-1]fsr1
  5972  08A7  077F               	addwf	127,w
  5973  08A8  3FFF               	movwi [-1]fsr1
  5974  08A9                     l4057:	
  5975                           
  5976                           ;stkvar	___bmul@multiplicand @ sp[(-2)+-1]
  5977  08A9  3F7D               	moviw [-3]fsr1
  5978  08AA  3589               	lslf	9,f
  5979  08AB  3FFD               	movwi [-3]fsr1
  5980                           
  5981                           ;stkvar	___bmul@multiplier @ sp[(-2)+0]
  5982  08AC  3F7E               	moviw [-2]fsr1
  5983  08AD  3689               	lsrf	9,f
  5984  08AE  3FFE               	movwi [-2]fsr1
  5985                           
  5986                           ;stkvar	___bmul@multiplier @ sp[(-2)+0]
  5987  08AF  3F7E               	moviw [-2]fsr1
  5988  08B0  1D03               	btfss	3,2
  5989  08B1  28A1               	goto	l568
  5990                           
  5991                           ;stkvar	___bmul@product @ sp[(-2)+1]
  5992  08B2  3F7F               	moviw [-1]fsr1
  5993                           
  5994                           ; ___bmul: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsiz
      +                          e = 1, vargsize = 0
  5995  08B3  317D               	addfsr 1,-3
  5996  08B4  0008               	return
  5997  08B5                     __end_of___bmul:	
  5998                           
  5999                           	psect	text17
  6000  0CBA                     __ptext17:	
  6001 ;; *************** function _nrf24l01SendTXBuffer *****************
  6002 ;; Defined at:
  6003 ;;		line 203 in file "nrf24l01.c"
  6004 ;; Parameters:    Size  Location     Type
  6005 ;;  packet          1    wreg     PTR struct .
  6006 ;;		 -> TXPacket(33), RXPacket(33), 
  6007 ;; Auto vars:     Size  Location     Type
  6008 ;;  packet          1  [STACK] PTR struct .
  6009 ;;		 -> TXPacket(33), RXPacket(33), 
  6010 ;;  i               1  [STACK] unsigned char 
  6011 ;;  width           1  [STACK] unsigned char 
  6012 ;; Return value:  Size  Location     Type
  6013 ;;                  1    wreg      void 
  6014 ;; Registers used:
  6015 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11, pclath
  6016 ;; Tracked objects:
  6017 ;;		On entry : 1E/0
  6018 ;;		On exit  : 1F/0
  6019 ;;		Unchanged: 0/0
  6020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6025 ;;Total ram usage:        0 bytes
  6026 ;; Hardware stack levels used:    1
  6027 ;; Hardware stack levels required when called:   10
  6028 ;; This function calls:
  6029 ;;		_nrf24l01SPIEnd
  6030 ;;		_nrf24l01SPISend
  6031 ;;		_nrf24l01SPIStart
  6032 ;;		_nrf24l01SetRXMode
  6033 ;;		_strlen
  6034 ;; This function is called by:
  6035 ;;		_nrf24l01Service
  6036 ;; This function uses a reentrant model
  6037 ;;
  6038                           
  6039                           
  6040                           ;psect for function _nrf24l01SendTXBuffer
  6041  0CBA                     _nrf24l01SendTXBuffer:	
  6042                           
  6043                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6044  0CBA  3143               	addfsr 1,3
  6045                           
  6046                           ;incstack = 0
  6047 ;; hardware stack exceeded
  6048                           ; Regs used in _nrf24l01SendTXBuffer: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11+
      +                          pclath]
  6049                           ;nrf24l01SendTXBuffer@packet stored from wreg
  6050                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  6051  0CBB  3FFD               	movwi [-3]fsr1
  6052                           
  6053                           ;nrf24l01.c: 205: lastTXPacket = packet;
  6054                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  6055  0CBC  3F7D               	moviw [-3]fsr1
  6056  0CBD  0020               	movlb	0	; select bank0
  6057  0CBE  00E8               	movwf	_lastTXPacket
  6058                           
  6059                           ;nrf24l01.c: 207: unsigned char i;;nrf24l01.c: 210: nrf24l01SetRXMode(0);
  6060  0CBF  3000               	movlw	0
  6061  0CC0  318B  2337  318C   	fcall	_nrf24l01SetRXMode
  6062                           
  6063                           ;nrf24l01.c: 213: nrf24l01SPIStart();
  6064  0CC3  3188  2036  318C   	fcall	_nrf24l01SPIStart
  6065                           
  6066                           ;nrf24l01.c: 216: nrf24l01SPISend((unsigned) 0b10110000);
  6067  0CC6  30B0               	movlw	176
  6068  0CC7  3188  2066  318C   	fcall	_nrf24l01SPISend
  6069                           
  6070                           ;nrf24l01.c: 218: nrf24l01SPISend(lastTXPacket->packetData.byte);
  6071  0CCA  0020               	movlb	0	; select bank0
  6072  0CCB  0868               	movf	_lastTXPacket,w
  6073  0CCC  0084               	movwf	4
  6074  0CCD  3001               	movlw	1	; select bank2/3
  6075  0CCE  3001               	movlw	1	; select bank2/3
  6076  0CCF  0085               	movwf	5
  6077  0CD0  0800               	movf	0,w
  6078  0CD1  3188  2066  318C   	fcall	_nrf24l01SPISend
  6079                           
  6080                           ;nrf24l01.c: 222: unsigned char width = strlen(lastTXPacket->Message);
  6081  0CD4  0020               	movlb	0	; select bank0
  6082  0CD5  0868               	movf	_lastTXPacket,w
  6083  0CD6  3E01               	addlw	1
  6084  0CD7  3189  2142  318C   	fcall	_strlen
  6085  0CDA  0874               	movf	116,w
  6086                           
  6087                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  6088  0CDB  3FFF               	movwi [-1]fsr1
  6089                           
  6090                           ;nrf24l01.c: 224: for (i = 0; i < width; i++) {
  6091                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6092  0CDC  3000               	movlw	0
  6093  0CDD  3FFE               	movwi [-2]fsr1
  6094  0CDE                     l4321:	
  6095                           
  6096                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6097  0CDE  3F7E               	moviw [-2]fsr1
  6098  0CDF  00FF               	movwf	127
  6099                           
  6100                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  6101  0CE0  3F7F               	moviw [-1]fsr1
  6102  0CE1  027F               	subwf	127,w
  6103  0CE2  1803               	btfsc	3,0
  6104  0CE3  2CF5               	goto	l4323
  6105                           
  6106                           ;nrf24l01.c: 225: nrf24l01SPISend(lastTXPacket->Message[i]);
  6107                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6108  0CE4  3F7E               	moviw [-2]fsr1
  6109  0CE5  0020               	movlb	0	; select bank0
  6110  0CE6  0768               	addwf	_lastTXPacket,w
  6111  0CE7  00FF               	movwf	127
  6112  0CE8  0A7F               	incf	127,w
  6113  0CE9  0084               	movwf	4
  6114  0CEA  3001               	movlw	1	; select bank2/3
  6115  0CEB  3001               	movlw	1	; select bank2/3
  6116  0CEC  0085               	movwf	5
  6117  0CED  0800               	movf	0,w
  6118  0CEE  3188  2066  318C   	fcall	_nrf24l01SPISend
  6119                           
  6120                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6121  0CF1  3F7E               	moviw [-2]fsr1
  6122  0CF2  3E01               	addlw	1
  6123  0CF3  3FFE               	movwi [-2]fsr1
  6124  0CF4  2CDE               	goto	l4321
  6125  0CF5                     l4323:	
  6126                           
  6127                           ;nrf24l01.c: 226: };nrf24l01.c: 229: nrf24l01SPIEnd();
  6128  0CF5  3188  202D  318C   	fcall	_nrf24l01SPIEnd
  6129                           
  6130                           ;nrf24l01.c: 232: PORTAbits.RA0 = 1;
  6131  0CF8  0020               	movlb	0	; select bank0
  6132  0CF9  140C               	bsf	12,0	;volatile
  6133                           
  6134                           ;nrf24l01.c: 233: _delay((unsigned long)((12)*(32000000/4000000.0)));
  6135  0CFA  3020               	movlw	32
  6136  0CFB                     u5417:	
  6137  0CFB  0B89               	decfsz	9,f
  6138  0CFC  2CFB               	goto	u5417
  6139                           
  6140                           ;nrf24l01.c: 234: PORTAbits.RA0 = 0;
  6141  0CFD  0020               	movlb	0	; select bank0
  6142  0CFE  100C               	bcf	12,0	;volatile
  6143                           
  6144                           ; _nrf24l01SendTXBuffer: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 0, argsize = 0, vargsize = 0
  6145  0CFF  317D               	addfsr 1,-3
  6146  0D00  0008               	return
  6147  0D01                     __end_of_nrf24l01SendTXBuffer:	
  6148                           
  6149                           	psect	text18
  6150  0942                     __ptext18:	
  6151 ;; *************** function _strlen *****************
  6152 ;; Defined at:
  6153 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  6154 ;; Parameters:    Size  Location     Type
  6155 ;;  s               1    wreg     PTR const unsigned char 
  6156 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6157 ;;		 -> RXPacket(33), romDataMap(28), 
  6158 ;; Auto vars:     Size  Location     Type
  6159 ;;  s               1  [STACK] PTR const unsigned char 
  6160 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6161 ;;		 -> RXPacket(33), romDataMap(28), 
  6162 ;;  cp              1  [STACK] PTR const unsigned char 
  6163 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6164 ;;		 -> RXPacket(33), romDataMap(28), 
  6165 ;; Return value:  Size  Location     Type
  6166 ;;                  2  [STACK] unsigned int 
  6167 ;; Registers used:
  6168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  6169 ;; Tracked objects:
  6170 ;;		On entry : 1F/0
  6171 ;;		On exit  : 0/0
  6172 ;;		Unchanged: 0/0
  6173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6178 ;;Total ram usage:        0 bytes
  6179 ;; Hardware stack levels used:    1
  6180 ;; Hardware stack levels required when called:    7
  6181 ;; This function calls:
  6182 ;;		Nothing
  6183 ;; This function is called by:
  6184 ;;		_nrf24l01GetPipe
  6185 ;;		_nrf24l01SendTXBuffer
  6186 ;; This function uses a reentrant model
  6187 ;;
  6188                           
  6189                           
  6190                           ;psect for function _strlen
  6191  0942                     _strlen:	
  6192                           
  6193                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6194  0942  3142               	addfsr 1,2
  6195                           
  6196                           ;incstack = 0
  6197 ;; hardware stack exceeded
  6198                           ; Regs used in _strlen: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  6199                           ;strlen@s stored from wreg
  6200                           ;stkvar	strlen@s @ sp[(-2)+0]
  6201  0943  3FFE               	movwi [-2]fsr1
  6202                           
  6203                           ;stkvar	strlen@s @ sp[(-2)+0]
  6204  0944  0806               	movf	6,w
  6205  0945  0084               	movwf	4
  6206  0946  0807               	movf	7,w
  6207  0947  0085               	movwf	5
  6208  0948  313E               	addfsr 0,-2
  6209                           
  6210                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6211  0949  3F00               	moviw [0]fsr0
  6212  094A  3FFF               	movwi [-1]fsr1
  6213  094B                     l3911:	
  6214                           
  6215                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6216  094B  3F7F               	moviw [-1]fsr1
  6217  094C  0084               	movwf	4
  6218  094D  3001               	movlw	1	; select bank2/3
  6219  094E  0085               	movwf	5
  6220  094F  0800               	movf	0,w
  6221  0950  1903               	btfsc	3,2
  6222  0951  2956               	goto	l3913
  6223                           
  6224                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6225  0952  3F7F               	moviw [-1]fsr1
  6226  0953  3E01               	addlw	1
  6227  0954  3FFF               	movwi [-1]fsr1
  6228  0955  294B               	goto	l3911
  6229  0956                     l3913:	
  6230                           
  6231                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6232  0956  3F7F               	moviw [-1]fsr1
  6233  0957  00FF               	movwf	127
  6234                           
  6235                           ;stkvar	strlen@s @ sp[(-2)+0]
  6236  0958  3F7E               	moviw [-2]fsr1
  6237  0959  027F               	subwf	127,w
  6238  095A  00F4               	movwf	116
  6239  095B  01F5               	clrf	117
  6240  095C  1BF4               	btfsc	116,7
  6241  095D  03F5               	decf	117,f
  6242                           
  6243                           ; _strlen: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsiz
      +                          e = 0, vargsize = 0
  6244  095E  317E               	addfsr 1,-2
  6245  095F  0008               	return
  6246  0960                     __end_of_strlen:	
  6247                           
  6248                           	psect	text19
  6249  0B37                     __ptext19:	
  6250 ;; *************** function _nrf24l01SetRXMode *****************
  6251 ;; Defined at:
  6252 ;;		line 50 in file "nrf24l01.c"
  6253 ;; Parameters:    Size  Location     Type
  6254 ;;  rxMode          1    wreg     unsigned char 
  6255 ;; Auto vars:     Size  Location     Type
  6256 ;;  rxMode          1  [STACK] unsigned char 
  6257 ;; Return value:  Size  Location     Type
  6258 ;;                  1    wreg      void 
  6259 ;; Registers used:
  6260 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+11, pclath
  6261 ;; Tracked objects:
  6262 ;;		On entry : 1F/0
  6263 ;;		On exit  : 0/0
  6264 ;;		Unchanged: 0/0
  6265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6270 ;;Total ram usage:        0 bytes
  6271 ;; Hardware stack levels used:    1
  6272 ;; Hardware stack levels required when called:    9
  6273 ;; This function calls:
  6274 ;;		_nrf24l01Send
  6275 ;; This function is called by:
  6276 ;;		_nrf24l01ISR
  6277 ;;		_nrf24l01SendTXBuffer
  6278 ;;		_nrf24l01Service
  6279 ;; This function uses a reentrant model
  6280 ;;
  6281                           
  6282                           
  6283                           ;psect for function _nrf24l01SetRXMode
  6284  0B37                     _nrf24l01SetRXMode:	
  6285                           
  6286                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6287  0B37  3141               	addfsr 1,1
  6288                           
  6289                           ;incstack = 0
  6290 ;; hardware stack exceeded
  6291                           ; Regs used in _nrf24l01SetRXMode: [wreg+fsr1l+fsr1h+status,2-btemp+0+btemp+11+pclath]
  6292                           ;nrf24l01SetRXMode@rxMode stored from wreg
  6293                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6294  0B38  3FFF               	movwi [-1]fsr1
  6295                           
  6296                           ;nrf24l01.c: 53: if (rxMode){
  6297                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6298  0B39  3F7F               	moviw [-1]fsr1
  6299  0B3A  1903               	btfsc	3,2
  6300  0B3B  2B41               	goto	l3923
  6301                           
  6302                           ;nrf24l01.c: 55: if (status.TX == 2){
  6303  0B3C  3002               	movlw	2
  6304  0B3D  0020               	movlb	0	; select bank0
  6305  0B3E  0662               	xorwf	_status,w	;volatile
  6306  0B3F  1903               	btfsc	3,2
  6307  0B40  2B70               	goto	l268
  6308  0B41                     l3923:	
  6309                           
  6310                           ;nrf24l01.c: 57: };nrf24l01.c: 58: };nrf24l01.c: 61: if (!rxMode){
  6311                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6312  0B41  3F7F               	moviw [-1]fsr1
  6313  0B42  1D03               	btfss	3,2
  6314  0B43  2B49               	goto	l3929
  6315                           
  6316                           ;nrf24l01.c: 62: if (status.TX == 3){
  6317  0B44  3003               	movlw	3
  6318  0B45  0020               	movlb	0	; select bank0
  6319  0B46  0662               	xorwf	_status,w	;volatile
  6320  0B47  1903               	btfsc	3,2
  6321  0B48  2B70               	goto	l268
  6322  0B49                     l3929:	
  6323                           
  6324                           ;nrf24l01.c: 64: };nrf24l01.c: 65: };nrf24l01.c: 71: if (status.configRegister.PRIM_RX !
      +                          = rxMode){
  6325                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6326  0B49  3F7F               	moviw [-1]fsr1
  6327  0B4A  00FF               	movwf	127
  6328  0B4B  0020               	movlb	0	; select bank0
  6329  0B4C  0865               	movf	_status+3,w	;volatile
  6330  0B4D  3901               	andlw	1
  6331  0B4E  067F               	xorwf	127,w
  6332  0B4F  1903               	skipnz
  6333  0B50  2B70               	goto	l268
  6334                           
  6335                           ;nrf24l01.c: 74: PORTAbits.RA0 = 0;
  6336  0B51  100C               	bcf	12,0	;volatile
  6337                           
  6338                           ;nrf24l01.c: 75: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6339  0B52  30C0               	movlw	192
  6340  0B53                     u5427:	
  6341  0B53  3200               	nop2
  6342  0B54  0B89               	decfsz	9,f
  6343  0B55  2B53               	goto	u5427
  6344                           
  6345                           ;nrf24l01.c: 78: status.configRegister.PRIM_RX = rxMode;
  6346                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6347  0B56  3F7F               	moviw [-1]fsr1
  6348  0B57  3901               	andlw	1
  6349  0B58  0020               	movlb	0	; select bank0
  6350  0B59  1D03               	skipz
  6351  0B5A  1465               	bsf	_status+3,0	;volatile
  6352  0B5B  1903               	skipnz
  6353  0B5C  1065               	bcf	_status+3,0	;volatile
  6354                           
  6355                           ;nrf24l01.c: 79: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configRegi
      +                          ster.byte);
  6356  0B5D  0865               	movf	_status+3,w	;volatile
  6357  0B5E  001E               	movwi fsr1++
  6358  0B5F  3020               	movlw	32
  6359  0B60  3188  2075  318B   	fcall	_nrf24l01Send
  6360                           
  6361                           ;nrf24l01.c: 82: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6362  0B63  30C0               	movlw	192
  6363  0B64                     u5437:	
  6364  0B64  3200               	nop2
  6365  0B65  0B89               	decfsz	9,f
  6366  0B66  2B64               	goto	u5437
  6367                           
  6368                           ;nrf24l01.c: 85: if (rxMode){
  6369                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6370  0B67  3F7F               	moviw [-1]fsr1
  6371  0B68  1903               	btfsc	3,2
  6372  0B69  2B70               	goto	l268
  6373                           
  6374                           ;nrf24l01.c: 86: PORTAbits.RA0 = 1;
  6375  0B6A  0020               	movlb	0	; select bank0
  6376  0B6B  140C               	bsf	12,0	;volatile
  6377                           
  6378                           ;nrf24l01.c: 87: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6379  0B6C  30C0               	movlw	192
  6380  0B6D                     u5447:	
  6381  0B6D  3200               	nop2
  6382  0B6E  0B89               	decfsz	9,f
  6383  0B6F  2B6D               	goto	u5447
  6384  0B70                     l268:	
  6385                           
  6386                           ; _nrf24l01SetRXMode: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
  6387  0B70  317F               	addfsr 1,-1
  6388  0B71  0008               	return
  6389  0B72                     __end_of_nrf24l01SetRXMode:	
  6390                           
  6391                           	psect	text20
  6392  0875                     __ptext20:	
  6393 ;; *************** function _nrf24l01Send *****************
  6394 ;; Defined at:
  6395 ;;		line 11 in file "nrf24l01.c"
  6396 ;; Parameters:    Size  Location     Type
  6397 ;;  command         1    wreg     unsigned char 
  6398 ;;  data            1  [STACK] unsigned char 
  6399 ;; Auto vars:     Size  Location     Type
  6400 ;;  command         1  [STACK] unsigned char 
  6401 ;; Return value:  Size  Location     Type
  6402 ;;                  1    wreg      unsigned char 
  6403 ;; Registers used:
  6404 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath
  6405 ;; Tracked objects:
  6406 ;;		On entry : 0/0
  6407 ;;		On exit  : 1F/1
  6408 ;;		Unchanged: 0/0
  6409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6414 ;;Total ram usage:        0 bytes
  6415 ;; Hardware stack levels used:    1
  6416 ;; Hardware stack levels required when called:    8
  6417 ;; This function calls:
  6418 ;;		_nrf24l01SPIEnd
  6419 ;;		_nrf24l01SPISend
  6420 ;;		_nrf24l01SPIStart
  6421 ;; This function is called by:
  6422 ;;		_nrf24l01SetRXMode
  6423 ;;		_nrf24l01SetRXPipe
  6424 ;;		_nrf24l01ISR
  6425 ;;		_nrf24l01Service
  6426 ;;		_nrf24l01InitRegisters
  6427 ;;		_nrf24l01ChangeTXPower
  6428 ;; This function uses a reentrant model
  6429 ;;
  6430                           
  6431                           
  6432                           ;psect for function _nrf24l01Send
  6433  0875                     _nrf24l01Send:	
  6434                           
  6435                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6436  0875  3141               	addfsr 1,1
  6437                           
  6438                           ;incstack = 0
  6439 ;; hardware stack exceeded
  6440                           ; Regs used in _nrf24l01Send: [wreg+fsr1l+fsr1h+status,2+status,0+pclath]
  6441                           ;nrf24l01Send@command stored from wreg
  6442                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6443  0876  3FFF               	movwi [-1]fsr1
  6444                           
  6445                           ;nrf24l01.c: 14: nrf24l01SPIStart();
  6446  0877  3188  2036  3188   	fcall	_nrf24l01SPIStart
  6447                           
  6448                           ;nrf24l01.c: 17: nrf24l01SPISend(command);
  6449                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6450  087A  3F7F               	moviw [-1]fsr1
  6451  087B  3188  2066  3188   	fcall	_nrf24l01SPISend
  6452                           
  6453                           ;nrf24l01.c: 20: data = nrf24l01SPISend(data);
  6454                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6455  087E  3F7E               	moviw [-2]fsr1
  6456  087F  3188  2066  3188   	fcall	_nrf24l01SPISend
  6457                           
  6458                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6459  0882  3FFE               	movwi [-2]fsr1
  6460                           
  6461                           ;nrf24l01.c: 23: nrf24l01SPIEnd();
  6462  0883  3188  202D         	fcall	_nrf24l01SPIEnd
  6463                           
  6464                           ;nrf24l01.c: 25: return data;
  6465                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6466  0885  3F7E               	moviw [-2]fsr1
  6467                           
  6468                           ; _nrf24l01Send: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, 
      +                          argsize = 1, vargsize = 0
  6469  0886  317E               	addfsr 1,-2
  6470  0887  0008               	return
  6471  0888                     __end_of_nrf24l01Send:	
  6472                           
  6473                           	psect	text21
  6474  0836                     __ptext21:	
  6475 ;; *************** function _nrf24l01SPIStart *****************
  6476 ;; Defined at:
  6477 ;;		line 69 in file "interface.c"
  6478 ;; Parameters:    Size  Location     Type
  6479 ;;		None
  6480 ;; Auto vars:     Size  Location     Type
  6481 ;;		None
  6482 ;; Return value:  Size  Location     Type
  6483 ;;                  1    wreg      void 
  6484 ;; Registers used:
  6485 ;;		wreg
  6486 ;; Tracked objects:
  6487 ;;		On entry : 0/0
  6488 ;;		On exit  : 0/0
  6489 ;;		Unchanged: 0/0
  6490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6495 ;;Total ram usage:        0 bytes
  6496 ;; Hardware stack levels used:    1
  6497 ;; Hardware stack levels required when called:    7
  6498 ;; This function calls:
  6499 ;;		Nothing
  6500 ;; This function is called by:
  6501 ;;		_nrf24l01Send
  6502 ;;		_nrf24l01SetTXPipe
  6503 ;;		_nrf24l01SendTXBuffer
  6504 ;;		_nrf24l01Service
  6505 ;;		_nrf24l01InitRegisters
  6506 ;; This function uses a reentrant model
  6507 ;;
  6508                           
  6509                           
  6510                           ;psect for function _nrf24l01SPIStart
  6511  0836                     _nrf24l01SPIStart:	
  6512                           
  6513                           ;interface.c: 70: PIE0bits.INTE = 0;
  6514                           
  6515                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6516                           ;incstack = 0
  6517 ;; hardware stack exceeded
  6518                           ; Regs used in _nrf24l01SPIStart: [wreg]
  6519  0836  0021               	movlb	1	; select bank1
  6520  0837  1010               	bcf	16,0	;volatile
  6521                           
  6522                           ;interface.c: 71: PORTAbits.RA1 = 0;
  6523  0838  0020               	movlb	0	; select bank0
  6524  0839  108C               	bcf	12,1	;volatile
  6525                           
  6526                           ;interface.c: 72: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6527  083A  301A               	movlw	26
  6528  083B                     u5457:	
  6529  083B  0B89               	decfsz	9,f
  6530  083C  283B               	goto	u5457
  6531  083D  3200               	nop2
  6532                           
  6533                           ; _nrf24l01SPIStart: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           0, argsize = 0, vargsize = 0
  6534  083E  0008               	return
  6535  083F                     __end_of_nrf24l01SPIStart:	
  6536                           
  6537                           	psect	text22
  6538  0866                     __ptext22:	
  6539 ;; *************** function _nrf24l01SPISend *****************
  6540 ;; Defined at:
  6541 ;;		line 57 in file "interface.c"
  6542 ;; Parameters:    Size  Location     Type
  6543 ;;  data            1    wreg     unsigned char 
  6544 ;; Auto vars:     Size  Location     Type
  6545 ;;  data            1  [STACK] unsigned char 
  6546 ;; Return value:  Size  Location     Type
  6547 ;;                  1    wreg      unsigned char 
  6548 ;; Registers used:
  6549 ;;		wreg, fsr1l, fsr1h
  6550 ;; Tracked objects:
  6551 ;;		On entry : 0/0
  6552 ;;		On exit  : 1F/4
  6553 ;;		Unchanged: 0/0
  6554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6559 ;;Total ram usage:        0 bytes
  6560 ;; Hardware stack levels used:    1
  6561 ;; Hardware stack levels required when called:    7
  6562 ;; This function calls:
  6563 ;;		Nothing
  6564 ;; This function is called by:
  6565 ;;		_nrf24l01Send
  6566 ;;		_nrf24l01SetTXPipe
  6567 ;;		_nrf24l01SendTXBuffer
  6568 ;;		_nrf24l01Service
  6569 ;;		_nrf24l01InitRegisters
  6570 ;; This function uses a reentrant model
  6571 ;;
  6572                           
  6573                           
  6574                           ;psect for function _nrf24l01SPISend
  6575  0866                     _nrf24l01SPISend:	
  6576                           
  6577                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6578  0866  3141               	addfsr 1,1
  6579                           
  6580                           ;incstack = 0
  6581 ;; hardware stack exceeded
  6582                           ; Regs used in _nrf24l01SPISend: [wreg+fsr1l+fsr1h]
  6583                           ;nrf24l01SPISend@data stored from wreg
  6584                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6585  0867  3FFF               	movwi [-1]fsr1
  6586                           
  6587                           ;interface.c: 58: SSP1BUF = data;
  6588                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6589  0868  3F7F               	moviw [-1]fsr1
  6590  0869  0024               	movlb	4	; select bank4
  6591  086A  0091               	movwf	17	;volatile
  6592                           
  6593                           ;interface.c: 60: PORTCbits.RC4 = 1;
  6594  086B  0020               	movlb	0	; select bank0
  6595  086C  160E               	bsf	14,4	;volatile
  6596  086D                     l55:	
  6597                           ;interface.c: 62: while (!SSP1STATbits.BF){
  6598                           
  6599  086D  0024               	movlb	4	; select bank4
  6600  086E  1814               	btfsc	20,0	;volatile
  6601  086F  2872               	goto	l3643
  6602                           
  6603                           ;interface.c: 63: __nop();
  6604  0870  0000               	nop
  6605  0871  286D               	goto	l55
  6606  0872                     l3643:	
  6607                           
  6608                           ;interface.c: 64: };interface.c: 66: return SSP1BUF;
  6609  0872  0811               	movf	17,w	;volatile
  6610                           
  6611                           ; _nrf24l01SPISend: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  6612  0873  317F               	addfsr 1,-1
  6613  0874  0008               	return
  6614  0875                     __end_of_nrf24l01SPISend:	
  6615                           
  6616                           	psect	text23
  6617  082D                     __ptext23:	
  6618 ;; *************** function _nrf24l01SPIEnd *****************
  6619 ;; Defined at:
  6620 ;;		line 75 in file "interface.c"
  6621 ;; Parameters:    Size  Location     Type
  6622 ;;		None
  6623 ;; Auto vars:     Size  Location     Type
  6624 ;;		None
  6625 ;; Return value:  Size  Location     Type
  6626 ;;                  1    wreg      void 
  6627 ;; Registers used:
  6628 ;;		wreg
  6629 ;; Tracked objects:
  6630 ;;		On entry : 0/0
  6631 ;;		On exit  : 1F/1
  6632 ;;		Unchanged: 0/0
  6633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6638 ;;Total ram usage:        0 bytes
  6639 ;; Hardware stack levels used:    1
  6640 ;; Hardware stack levels required when called:    7
  6641 ;; This function calls:
  6642 ;;		Nothing
  6643 ;; This function is called by:
  6644 ;;		_nrf24l01Send
  6645 ;;		_nrf24l01SetTXPipe
  6646 ;;		_nrf24l01SendTXBuffer
  6647 ;;		_nrf24l01Service
  6648 ;;		_nrf24l01InitRegisters
  6649 ;; This function uses a reentrant model
  6650 ;;
  6651                           
  6652                           
  6653                           ;psect for function _nrf24l01SPIEnd
  6654  082D                     _nrf24l01SPIEnd:	
  6655                           
  6656                           ;interface.c: 76: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6657                           
  6658                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6659                           ;incstack = 0
  6660 ;; hardware stack exceeded
  6661                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  6662  082D  301A               	movlw	26
  6663  082E                     u5467:	
  6664  082E  0B89               	decfsz	9,f
  6665  082F  282E               	goto	u5467
  6666  0830  3200               	nop2
  6667                           
  6668                           ;interface.c: 77: PORTAbits.RA1 = 1;
  6669  0831  0020               	movlb	0	; select bank0
  6670  0832  148C               	bsf	12,1	;volatile
  6671                           
  6672                           ;interface.c: 78: PIE0bits.INTE = 1;
  6673  0833  0021               	movlb	1	; select bank1
  6674  0834  1410               	bsf	16,0	;volatile
  6675                           
  6676                           ; _nrf24l01SPIEnd: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  6677  0835  0008               	return
  6678  0836                     __end_of_nrf24l01SPIEnd:	
  6679                           
  6680                           	psect	text24
  6681  0AD1                     __ptext24:	
  6682 ;; *************** function _memset *****************
  6683 ;; Defined at:
  6684 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6685 ;; Parameters:    Size  Location     Type
  6686 ;;  p1              2  [STACK] PTR void 
  6687 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6688 ;;  c               2  [STACK] int 
  6689 ;;  n               2  [STACK] unsigned int 
  6690 ;; Auto vars:     Size  Location     Type
  6691 ;;  p               2  [STACK] PTR unsigned char 
  6692 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6693 ;; Return value:  Size  Location     Type
  6694 ;;                  2  [STACK] PTR void 
  6695 ;; Registers used:
  6696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+8, btemp+9, btemp+11
  6697 ;; Tracked objects:
  6698 ;;		On entry : 1E/1
  6699 ;;		On exit  : 0/0
  6700 ;;		Unchanged: 0/0
  6701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6706 ;;Total ram usage:        0 bytes
  6707 ;; Hardware stack levels used:    1
  6708 ;; Hardware stack levels required when called:    7
  6709 ;; This function calls:
  6710 ;;		Nothing
  6711 ;; This function is called by:
  6712 ;;		_sendMessage
  6713 ;;		_nrf24l01Service
  6714 ;; This function uses a reentrant model
  6715 ;;
  6716                           
  6717                           
  6718                           ;psect for function _memset
  6719  0AD1                     _memset:	
  6720                           
  6721                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6722  0AD1  3142               	addfsr 1,2
  6723                           
  6724                           ;stkvar	memset@p1 @ sp[(-2)+-2]
  6725                           
  6726                           ;incstack = 0
  6727 ;; hardware stack exceeded
  6728                           ; Regs used in _memset: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+8+btemp+9+btemp+1
      +                          1]
  6729  0AD2  0806               	movf	6,w
  6730  0AD3  0084               	movwf	4
  6731  0AD4  0807               	movf	7,w
  6732  0AD5  0085               	movwf	5
  6733  0AD6  313C               	addfsr 0,-4
  6734                           
  6735                           ;stkvar	memset@p @ sp[(-2)+0]
  6736  0AD7  3F00               	moviw [0]fsr0
  6737  0AD8  3FFE               	movwi [-2]fsr1
  6738  0AD9  3F01               	moviw [1]fsr0
  6739  0ADA  3FFF               	movwi [-1]fsr1
  6740  0ADB                     l4225:	
  6741                           
  6742                           ;stkvar	memset@n @ sp[(-2)+-6]
  6743  0ADB  3F78               	moviw [-8]fsr1
  6744  0ADC  00F4               	movwf	116
  6745  0ADD  3001               	movlw	1
  6746  0ADE  0274               	subwf	116,w
  6747  0ADF  3FF8               	movwi [-8]fsr1
  6748  0AE0  3F79               	moviw [-7]fsr1
  6749  0AE1  00F4               	movwf	116
  6750  0AE2  3000               	movlw	0
  6751  0AE3  3B74               	subwfb	116,w
  6752  0AE4  3FF9               	movwi [-7]fsr1
  6753  0AE5  3F78               	moviw [-8]fsr1
  6754  0AE6  3AFF               	xorlw	255
  6755  0AE7  00F4               	movwf	116
  6756  0AE8  3F79               	moviw [-7]fsr1
  6757  0AE9  3AFF               	xorlw	255
  6758  0AEA  04F4               	iorwf	116,f
  6759  0AEB  1903               	btfsc	3,2
  6760  0AEC  2B01               	goto	l970
  6761                           
  6762                           ;stkvar	memset@c @ sp[(-2)+-4]
  6763  0AED  3F7A               	moviw [-6]fsr1
  6764  0AEE  00FF               	movwf	127
  6765                           
  6766                           ;stkvar	memset@p @ sp[(-2)+0]
  6767  0AEF  3F7E               	moviw [-2]fsr1
  6768  0AF0  00FC               	movwf	124
  6769  0AF1  3F7F               	moviw [-1]fsr1
  6770  0AF2  00FD               	movwf	125
  6771  0AF3  087C               	movf	124,w
  6772  0AF4  0084               	movwf	4
  6773  0AF5  087D               	movf	125,w
  6774  0AF6  0085               	movwf	5
  6775  0AF7  087F               	movf	127,w
  6776  0AF8  0080               	movwf	0
  6777                           
  6778                           ;stkvar	memset@p @ sp[(-2)+0]
  6779  0AF9  3F7E               	moviw [-2]fsr1
  6780  0AFA  3E01               	addlw	1
  6781  0AFB  3FFE               	movwi [-2]fsr1
  6782  0AFC  01F4               	clrf	116
  6783  0AFD  3F7F               	moviw [-1]fsr1
  6784  0AFE  3D74               	addwfc	116,w
  6785  0AFF  3FFF               	movwi [-1]fsr1
  6786  0B00  2ADB               	goto	l4225
  6787  0B01                     l970:	
  6788                           
  6789                           ; _memset: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsiz
      +                          e = 6, vargsize = 0
  6790  0B01  3178               	addfsr 1,-8
  6791  0B02  0008               	return
  6792  0B03                     __end_of_memset:	
  6793                           
  6794                           	psect	text25
  6795  084B                     __ptext25:	
  6796 ;; *************** function _exception *****************
  6797 ;; Defined at:
  6798 ;;		line 81 in file "interface.c"
  6799 ;; Parameters:    Size  Location     Type
  6800 ;;  exception       1    wreg     unsigned char 
  6801 ;; Auto vars:     Size  Location     Type
  6802 ;;  exception       1    7[BANK0 ] unsigned char 
  6803 ;; Return value:  Size  Location     Type
  6804 ;;                  1    wreg      void 
  6805 ;; Registers used:
  6806 ;;		wreg, status,2, status,0, btemp+11, pclath, cstack
  6807 ;; Tracked objects:
  6808 ;;		On entry : 0/0
  6809 ;;		On exit  : 0/0
  6810 ;;		Unchanged: 0/0
  6811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6813 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6815 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6816 ;;Total ram usage:        1 bytes
  6817 ;; Hardware stack levels used:    1
  6818 ;; Hardware stack levels required when called:    8
  6819 ;; This function calls:
  6820 ;;		_EEPROMWrite
  6821 ;; This function is called by:
  6822 ;;		_nrf24l01SendPacket
  6823 ;; This function uses a non-reentrant model
  6824 ;;
  6825                           
  6826                           
  6827                           ;psect for function _exception
  6828  084B                     _exception:	
  6829                           
  6830                           ;incstack = 0
  6831                           ; Regs used in _exception: [wreg+status,2+status,0+btemp+11+pclath+cstack]
  6832                           ;exception@exception stored from wreg
  6833  084B  0020               	movlb	0	; select bank0
  6834  084C  00A7               	movwf	exception@exception
  6835                           
  6836                           ;interface.c: 82: EEPROMWrite(0, exception);
  6837  084D  3000               	movlw	0
  6838  084E  00F0               	movwf	EEPROMWrite@address
  6839  084F  00F1               	movwf	EEPROMWrite@address+1
  6840  0850  0827               	movf	exception@exception,w
  6841  0851  00FF               	movwf	127
  6842  0852  087F               	movf	127,w
  6843  0853  00F2               	movwf	EEPROMWrite@data
  6844  0854  3189  219C         	fcall	_EEPROMWrite
  6845  0856  0001               	reset	;# 
  6846  0857  0008               	return
  6847  0858                     __end_of_exception:	
  6848                           
  6849                           	psect	text26
  6850  099C                     __ptext26:	
  6851 ;; *************** function _EEPROMWrite *****************
  6852 ;; Defined at:
  6853 ;;		line 7 in file "eeprom.c"
  6854 ;; Parameters:    Size  Location     Type
  6855 ;;  address         2    0[COMMON] unsigned int 
  6856 ;;  data            1    2[COMMON] unsigned char 
  6857 ;; Auto vars:     Size  Location     Type
  6858 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  6859 ;; Return value:  Size  Location     Type
  6860 ;;                  1    wreg      void 
  6861 ;; Registers used:
  6862 ;;		wreg, status,2, status,0
  6863 ;; Tracked objects:
  6864 ;;		On entry : 0/0
  6865 ;;		On exit  : 0/0
  6866 ;;		Unchanged: 0/0
  6867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6868 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6871 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6872 ;;Total ram usage:        4 bytes
  6873 ;; Hardware stack levels used:    1
  6874 ;; Hardware stack levels required when called:    7
  6875 ;; This function calls:
  6876 ;;		Nothing
  6877 ;; This function is called by:
  6878 ;;		_exception
  6879 ;;		_main
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           
  6884                           ;psect for function _EEPROMWrite
  6885  099C                     _EEPROMWrite:	
  6886                           
  6887                           ;eeprom.c: 9: unsigned char GIEBitValue = INTCONbits.GIE;
  6888                           
  6889                           ;incstack = 0
  6890                           ; Regs used in _EEPROMWrite: [wreg+status,2+status,0]
  6891  099C  3000               	movlw	0
  6892  099D  1B8B               	btfsc	11,7	;volatile
  6893  099E  3001               	movlw	1
  6894  099F  00F3               	movwf	EEPROMWrite@GIEBitValue
  6895                           
  6896                           ;eeprom.c: 11: NVMADRH = ((address >> 8) & 0xFF);
  6897  09A0  0871               	movf	EEPROMWrite@address+1,w
  6898  09A1  0031               	movlb	17	; select bank17
  6899  09A2  0092               	movwf	18	;volatile
  6900                           
  6901                           ;eeprom.c: 12: NVMADRL = (address & 0xFF);
  6902  09A3  0870               	movf	EEPROMWrite@address,w
  6903  09A4  0091               	movwf	17	;volatile
  6904                           
  6905                           ;eeprom.c: 13: NVMDATL = data;
  6906  09A5  0872               	movf	EEPROMWrite@data,w
  6907  09A6  0093               	movwf	19	;volatile
  6908                           
  6909                           ;eeprom.c: 14: NVMCON1bits.NVMREGS = 1;
  6910  09A7  1715               	bsf	21,6	;volsfr
  6911                           
  6912                           ;eeprom.c: 15: NVMCON1bits.WREN = 1;
  6913  09A8  1515               	bsf	21,2	;volsfr
  6914                           
  6915                           ;eeprom.c: 16: INTCONbits.GIE = 0;
  6916  09A9  138B               	bcf	11,7	;volatile
  6917                           
  6918                           ;eeprom.c: 17: NVMCON2 = 0x55;
  6919  09AA  3055               	movlw	85
  6920  09AB  0096               	movwf	22	;volsfr
  6921                           
  6922                           ;eeprom.c: 18: NVMCON2 = 0xAA;
  6923  09AC  30AA               	movlw	170
  6924  09AD  0096               	movwf	22	;volsfr
  6925                           
  6926                           ;eeprom.c: 19: NVMCON1bits.WR = 1;
  6927  09AE  1495               	bsf	21,1	;volsfr
  6928                           
  6929                           ;eeprom.c: 21: while (NVMCON1bits.WR){
  6930  09AF  29B1               	goto	l351
  6931  09B0                     l352:	
  6932                           
  6933                           ;eeprom.c: 22: __nop();
  6934  09B0  0000               	nop
  6935  09B1                     l351:	
  6936  09B1  0031               	movlb	17	; select bank17
  6937  09B2  1895               	btfsc	21,1	;volsfr
  6938  09B3  29B0               	goto	l352
  6939                           
  6940                           ;eeprom.c: 23: };eeprom.c: 25: NVMCON1bits.WREN = 0;
  6941  09B4  1115               	bcf	21,2	;volsfr
  6942                           
  6943                           ;eeprom.c: 26: INTCONbits.GIE = GIEBitValue;
  6944  09B5  0C73               	rrf	EEPROMWrite@GIEBitValue,w
  6945  09B6  1C03               	skipc
  6946  09B7  138B               	bcf	11,7	;volatile
  6947  09B8  1803               	skipnc
  6948  09B9  178B               	bsf	11,7	;volatile
  6949  09BA  0008               	return
  6950  09BB                     __end_of_EEPROMWrite:	
  6951                           
  6952                           	psect	text27
  6953  050E                     __ptext27:	
  6954 ;; *************** function _ftoa *****************
  6955 ;; Defined at:
  6956 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;  f               3    0[BANK1 ] float 
  6959 ;;  status          1    3[BANK1 ] PTR int 
  6960 ;;		 -> sendMessage@ftoaStatus(2), 
  6961 ;; Auto vars:     Size  Location     Type
  6962 ;;  l               4    8[BANK1 ] unsigned long 
  6963 ;;  rem             4    4[BANK1 ] unsigned long 
  6964 ;;  cp              1   12[BANK1 ] PTR unsigned char 
  6965 ;;		 -> ftoa@buf(17), 
  6966 ;; Return value:  Size  Location     Type
  6967 ;;                  1    wreg      PTR unsigned char 
  6968 ;; Registers used:
  6969 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  6970 ;; Tracked objects:
  6971 ;;		On entry : 0/0
  6972 ;;		On exit  : 0/0
  6973 ;;		Unchanged: 0/0
  6974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6975 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6976 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6978 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6979 ;;Total ram usage:       13 bytes
  6980 ;; Hardware stack levels used:    1
  6981 ;; Hardware stack levels required when called:   10
  6982 ;; This function calls:
  6983 ;;		___ftge
  6984 ;;		___ftmul
  6985 ;;		___ftneg
  6986 ;;		___ftsub
  6987 ;;		___fttol
  6988 ;;		___lltoft
  6989 ;;		_sprintf
  6990 ;; This function is called by:
  6991 ;;		_sendMessage
  6992 ;; This function uses a non-reentrant model
  6993 ;;
  6994                           
  6995                           
  6996                           ;psect for function _ftoa
  6997  050E                     _ftoa:	
  6998                           
  6999                           ;incstack = 0
  7000                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  7001  050E  303C               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  7002  050F  00FF               	movwf	127
  7003  0510  087F               	movf	127,w
  7004  0511  0021               	movlb	1	; select bank1
  7005  0512  00AC               	movwf	ftoa@cp^(0+128)
  7006  0513  0820               	movf	ftoa@f^(0+128),w
  7007  0514  0020               	movlb	0	; select bank0
  7008  0515  00A7               	movwf	___ftge@ff1
  7009  0516  0021               	movlb	1	; select bank1
  7010  0517  0821               	movf	(ftoa@f+1)^(0+128),w
  7011  0518  0020               	movlb	0	; select bank0
  7012  0519  00A8               	movwf	___ftge@ff1+1
  7013  051A  0021               	movlb	1	; select bank1
  7014  051B  0822               	movf	(ftoa@f+2)^(0+128),w
  7015  051C  0020               	movlb	0	; select bank0
  7016  051D  00A9               	movwf	___ftge@ff1+2
  7017  051E  3000               	movlw	0
  7018  051F  00AA               	movwf	___ftge@ff2
  7019  0520  3000               	movlw	0
  7020  0521  00AB               	movwf	___ftge@ff2+1
  7021  0522  3000               	movlw	0
  7022  0523  00AC               	movwf	___ftge@ff2+2
  7023  0524  318B  2372  3185   	fcall	___ftge
  7024  0527  1803               	btfsc	3,0
  7025  0528  2D50               	goto	l4247
  7026  0529  302D               	movlw	45
  7027  052A  00FF               	movwf	127
  7028  052B  0021               	movlb	1	; select bank1
  7029  052C  082C               	movf	ftoa@cp^(0+128),w
  7030  052D  0084               	movwf	4
  7031  052E  3001               	movlw	1	; select bank2/3
  7032  052F  0085               	movwf	5
  7033  0530  087F               	movf	127,w
  7034  0531  0080               	movwf	0
  7035  0532  3001               	movlw	1
  7036  0533  00FF               	movwf	127
  7037  0534  087F               	movf	127,w
  7038  0535  07AC               	addwf	ftoa@cp^(0+128),f
  7039  0536  0820               	movf	ftoa@f^(0+128),w
  7040  0537  0020               	movlb	0	; select bank0
  7041  0538  00CC               	movwf	___ftneg@f1
  7042  0539  0021               	movlb	1	; select bank1
  7043  053A  0821               	movf	(ftoa@f+1)^(0+128),w
  7044  053B  0020               	movlb	0	; select bank0
  7045  053C  00CD               	movwf	___ftneg@f1+1
  7046  053D  0021               	movlb	1	; select bank1
  7047  053E  0822               	movf	(ftoa@f+2)^(0+128),w
  7048  053F  0020               	movlb	0	; select bank0
  7049  0540  00CE               	movwf	___ftneg@f1+2
  7050  0541  3188  2024  3185   	fcall	___ftneg
  7051  0544  0020               	movlb	0	; select bank0
  7052  0545  084C               	movf	?___ftneg,w
  7053  0546  0021               	movlb	1	; select bank1
  7054  0547  00A0               	movwf	ftoa@f^(0+128)
  7055  0548  0020               	movlb	0	; select bank0
  7056  0549  084D               	movf	?___ftneg+1,w
  7057  054A  0021               	movlb	1	; select bank1
  7058  054B  00A1               	movwf	(ftoa@f+1)^(0+128)
  7059  054C  0020               	movlb	0	; select bank0
  7060  054D  084E               	movf	?___ftneg+2,w
  7061  054E  0021               	movlb	1	; select bank1
  7062  054F  00A2               	movwf	(ftoa@f+2)^(0+128)
  7063  0550                     l4247:	
  7064  0550  0021               	movlb	1	; select bank1
  7065  0551  0820               	movf	ftoa@f^(0+128),w
  7066  0552  0020               	movlb	0	; select bank0
  7067  0553  00D8               	movwf	___fttol@f1
  7068  0554  0021               	movlb	1	; select bank1
  7069  0555  0821               	movf	(ftoa@f+1)^(0+128),w
  7070  0556  0020               	movlb	0	; select bank0
  7071  0557  00D9               	movwf	___fttol@f1+1
  7072  0558  0021               	movlb	1	; select bank1
  7073  0559  0822               	movf	(ftoa@f+2)^(0+128),w
  7074  055A  0020               	movlb	0	; select bank0
  7075  055B  00DA               	movwf	___fttol@f1+2
  7076  055C  318E  263F  3185   	fcall	___fttol
  7077  055F  0020               	movlb	0	; select bank0
  7078  0560  085B               	movf	?___fttol+3,w
  7079  0561  0021               	movlb	1	; select bank1
  7080  0562  00AB               	movwf	(ftoa@l+3)^(0+128)
  7081  0563  0020               	movlb	0	; select bank0
  7082  0564  085A               	movf	?___fttol+2,w
  7083  0565  0021               	movlb	1	; select bank1
  7084  0566  00AA               	movwf	(ftoa@l+2)^(0+128)
  7085  0567  0020               	movlb	0	; select bank0
  7086  0568  0859               	movf	?___fttol+1,w
  7087  0569  0021               	movlb	1	; select bank1
  7088  056A  00A9               	movwf	(ftoa@l+1)^(0+128)
  7089  056B  0020               	movlb	0	; select bank0
  7090  056C  0858               	movf	?___fttol,w
  7091  056D  0021               	movlb	1	; select bank1
  7092  056E  00A8               	movwf	ftoa@l^(0+128)
  7093  056F  082B               	movf	(ftoa@l+3)^(0+128),w
  7094  0570  00F3               	movwf	___lltoft@c+3
  7095  0571  082A               	movf	(ftoa@l+2)^(0+128),w
  7096  0572  00F2               	movwf	___lltoft@c+2
  7097  0573  0829               	movf	(ftoa@l+1)^(0+128),w
  7098  0574  00F1               	movwf	___lltoft@c+1
  7099  0575  0828               	movf	ftoa@l^(0+128),w
  7100  0576  00F0               	movwf	___lltoft@c
  7101  0577  318A  224E  3185   	fcall	___lltoft
  7102  057A  0870               	movf	?___lltoft,w
  7103  057B  0020               	movlb	0	; select bank0
  7104  057C  00B6               	movwf	___ftsub@f2
  7105  057D  0871               	movf	?___lltoft+1,w
  7106  057E  00B7               	movwf	___ftsub@f2+1
  7107  057F  0872               	movf	?___lltoft+2,w
  7108  0580  00B8               	movwf	___ftsub@f2+2
  7109  0581  0021               	movlb	1	; select bank1
  7110  0582  0820               	movf	ftoa@f^(0+128),w
  7111  0583  0020               	movlb	0	; select bank0
  7112  0584  00B9               	movwf	___ftsub@f1
  7113  0585  0021               	movlb	1	; select bank1
  7114  0586  0821               	movf	(ftoa@f+1)^(0+128),w
  7115  0587  0020               	movlb	0	; select bank0
  7116  0588  00BA               	movwf	___ftsub@f1+1
  7117  0589  0021               	movlb	1	; select bank1
  7118  058A  0822               	movf	(ftoa@f+2)^(0+128),w
  7119  058B  0020               	movlb	0	; select bank0
  7120  058C  00BB               	movwf	___ftsub@f1+2
  7121  058D  3189  2106  3185   	fcall	___ftsub
  7122  0590  0020               	movlb	0	; select bank0
  7123  0591  0836               	movf	?___ftsub,w
  7124  0592  0021               	movlb	1	; select bank1
  7125  0593  00A0               	movwf	ftoa@f^(0+128)
  7126  0594  0020               	movlb	0	; select bank0
  7127  0595  0837               	movf	?___ftsub+1,w
  7128  0596  0021               	movlb	1	; select bank1
  7129  0597  00A1               	movwf	(ftoa@f+1)^(0+128)
  7130  0598  0020               	movlb	0	; select bank0
  7131  0599  0838               	movf	?___ftsub+2,w
  7132  059A  0021               	movlb	1	; select bank1
  7133  059B  00A2               	movwf	(ftoa@f+2)^(0+128)
  7134  059C  0820               	movf	ftoa@f^(0+128),w
  7135  059D  0020               	movlb	0	; select bank0
  7136  059E  00CF               	movwf	___ftmul@f2
  7137  059F  0021               	movlb	1	; select bank1
  7138  05A0  0821               	movf	(ftoa@f+1)^(0+128),w
  7139  05A1  0020               	movlb	0	; select bank0
  7140  05A2  00D0               	movwf	___ftmul@f2+1
  7141  05A3  0021               	movlb	1	; select bank1
  7142  05A4  0822               	movf	(ftoa@f+2)^(0+128),w
  7143  05A5  0020               	movlb	0	; select bank0
  7144  05A6  00D1               	movwf	___ftmul@f2+2
  7145  05A7  3024               	movlw	36
  7146  05A8  00CC               	movwf	___ftmul@f1
  7147  05A9  3074               	movlw	116
  7148  05AA  00CD               	movwf	___ftmul@f1+1
  7149  05AB  3049               	movlw	73
  7150  05AC  00CE               	movwf	___ftmul@f1+2
  7151  05AD  3185  25F5  3185   	fcall	___ftmul
  7152  05B0  0020               	movlb	0	; select bank0
  7153  05B1  084C               	movf	?___ftmul,w
  7154  05B2  00D8               	movwf	___fttol@f1
  7155  05B3  084D               	movf	?___ftmul+1,w
  7156  05B4  00D9               	movwf	___fttol@f1+1
  7157  05B5  084E               	movf	?___ftmul+2,w
  7158  05B6  00DA               	movwf	___fttol@f1+2
  7159  05B7  318E  263F  3185   	fcall	___fttol
  7160  05BA  0020               	movlb	0	; select bank0
  7161  05BB  085B               	movf	?___fttol+3,w
  7162  05BC  0021               	movlb	1	; select bank1
  7163  05BD  00A7               	movwf	(ftoa@rem+3)^(0+128)
  7164  05BE  0020               	movlb	0	; select bank0
  7165  05BF  085A               	movf	?___fttol+2,w
  7166  05C0  0021               	movlb	1	; select bank1
  7167  05C1  00A6               	movwf	(ftoa@rem+2)^(0+128)
  7168  05C2  0020               	movlb	0	; select bank0
  7169  05C3  0859               	movf	?___fttol+1,w
  7170  05C4  0021               	movlb	1	; select bank1
  7171  05C5  00A5               	movwf	(ftoa@rem+1)^(0+128)
  7172  05C6  0020               	movlb	0	; select bank0
  7173  05C7  0858               	movf	?___fttol,w
  7174  05C8  0021               	movlb	1	; select bank1
  7175  05C9  00A4               	movwf	ftoa@rem^(0+128)
  7176  05CA  3029               	movlw	low (STR_8| (0+32768))
  7177  05CB  0020               	movlb	0	; select bank0
  7178  05CC  00BC               	movwf	sprintf@f
  7179  05CD  3090               	movlw	high (STR_8| (0+32768))
  7180  05CE  00BD               	movwf	sprintf@f+1
  7181  05CF  0021               	movlb	1	; select bank1
  7182  05D0  082B               	movf	(ftoa@l+3)^(0+128),w
  7183  05D1  0020               	movlb	0	; select bank0
  7184  05D2  00C1               	movwf	?_sprintf+5
  7185  05D3  0021               	movlb	1	; select bank1
  7186  05D4  082A               	movf	(ftoa@l+2)^(0+128),w
  7187  05D5  0020               	movlb	0	; select bank0
  7188  05D6  00C0               	movwf	?_sprintf+4
  7189  05D7  0021               	movlb	1	; select bank1
  7190  05D8  0829               	movf	(ftoa@l+1)^(0+128),w
  7191  05D9  0020               	movlb	0	; select bank0
  7192  05DA  00BF               	movwf	?_sprintf+3
  7193  05DB  0021               	movlb	1	; select bank1
  7194  05DC  0828               	movf	ftoa@l^(0+128),w
  7195  05DD  0020               	movlb	0	; select bank0
  7196  05DE  00BE               	movwf	?_sprintf+2
  7197  05DF  0021               	movlb	1	; select bank1
  7198  05E0  0827               	movf	(ftoa@rem+3)^(0+128),w
  7199  05E1  0020               	movlb	0	; select bank0
  7200  05E2  00C5               	movwf	?_sprintf+9
  7201  05E3  0021               	movlb	1	; select bank1
  7202  05E4  0826               	movf	(ftoa@rem+2)^(0+128),w
  7203  05E5  0020               	movlb	0	; select bank0
  7204  05E6  00C4               	movwf	?_sprintf+8
  7205  05E7  0021               	movlb	1	; select bank1
  7206  05E8  0825               	movf	(ftoa@rem+1)^(0+128),w
  7207  05E9  0020               	movlb	0	; select bank0
  7208  05EA  00C3               	movwf	?_sprintf+7
  7209  05EB  0021               	movlb	1	; select bank1
  7210  05EC  0824               	movf	ftoa@rem^(0+128),w
  7211  05ED  0020               	movlb	0	; select bank0
  7212  05EE  00C2               	movwf	?_sprintf+6
  7213  05EF  0021               	movlb	1	; select bank1
  7214  05F0  082C               	movf	ftoa@cp^(0+128),w
  7215  05F1  3180  205A         	fcall	_sprintf
  7216  05F3  303C               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  7217  05F4  0008               	return
  7218  05F5                     __end_of_ftoa:	
  7219                           
  7220                           	psect	text28
  7221  005A                     __ptext28:	
  7222 ;; *************** function _sprintf *****************
  7223 ;; Defined at:
  7224 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  7225 ;; Parameters:    Size  Location     Type
  7226 ;;  sp              1    wreg     PTR unsigned char 
  7227 ;;		 -> ftoa@buf(17), 
  7228 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  7229 ;;		 -> STR_8(11), 
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;  sp              1   48[BANK0 ] PTR unsigned char 
  7232 ;;		 -> ftoa@buf(17), 
  7233 ;;  val             4   44[BANK0 ] unsigned long 
  7234 ;;  tmpval          4    0        struct .
  7235 ;;  prec            2   51[BANK0 ] int 
  7236 ;;  width           2   49[BANK0 ] int 
  7237 ;;  cp              2    0        PTR const unsigned char 
  7238 ;;  len             2    0        unsigned int 
  7239 ;;  c               1   53[BANK0 ] unsigned char 
  7240 ;;  ap              1   43[BANK0 ] PTR void [1]
  7241 ;;		 -> ?_sprintf(2), 
  7242 ;;  flag            1   42[BANK0 ] unsigned char 
  7243 ;; Return value:  Size  Location     Type
  7244 ;;                  2   28[BANK0 ] int 
  7245 ;; Registers used:
  7246 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  7247 ;; Tracked objects:
  7248 ;;		On entry : 0/0
  7249 ;;		On exit  : 0/0
  7250 ;;		Unchanged: 0/0
  7251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7252 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7253 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7254 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7255 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7256 ;;Total ram usage:       26 bytes
  7257 ;; Hardware stack levels used:    1
  7258 ;; Hardware stack levels required when called:    8
  7259 ;; This function calls:
  7260 ;;		___lldiv
  7261 ;;		___llmod
  7262 ;;		___wmul
  7263 ;;		_isdigit
  7264 ;; This function is called by:
  7265 ;;		_ftoa
  7266 ;; This function uses a non-reentrant model
  7267 ;;
  7268                           
  7269                           
  7270                           ;psect for function _sprintf
  7271  005A                     _sprintf:	
  7272                           
  7273                           ;incstack = 0
  7274                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  7275                           ;sprintf@sp stored from wreg
  7276  005A  0020               	movlb	0	; select bank0
  7277  005B  00D0               	movwf	sprintf@sp
  7278                           
  7279                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  7280  005C  303E               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  7281  005D  00FF               	movwf	127
  7282  005E  087F               	movf	127,w
  7283  005F  00CB               	movwf	sprintf@ap
  7284  0060                     l4047:	
  7285                           ;doprnt.c: 548: while((c = *f++)) {
  7286                           
  7287  0060  083D               	movf	sprintf@f+1,w
  7288  0061  00FF               	movwf	127
  7289  0062  083C               	movf	sprintf@f,w
  7290  0063  00FE               	movwf	126
  7291  0064  0ABC               	incf	sprintf@f,f
  7292  0065  1903               	skipnz
  7293  0066  0ABD               	incf	sprintf@f+1,f
  7294  0067  087E               	movf	126,w
  7295  0068  0084               	movwf	4
  7296  0069  087F               	movf	127,w
  7297  006A  0085               	movwf	5
  7298  006B  0800               	movf	0,w	;code access
  7299  006C  00FF               	movwf	127
  7300  006D  087F               	movf	127,w
  7301  006E  00D5               	movwf	sprintf@c
  7302  006F  0855               	movf	sprintf@c,w
  7303  0070  1903               	btfsc	3,2
  7304  0071  2A21               	goto	l4049
  7305                           
  7306                           ;doprnt.c: 550: if(c != '%')
  7307  0072  3025               	movlw	37
  7308  0073  0655               	xorwf	sprintf@c,w
  7309  0074  1903               	btfsc	3,2
  7310  0075  2883               	goto	l3955
  7311                           
  7312                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  7313  0076  0855               	movf	sprintf@c,w
  7314  0077  00FF               	movwf	127
  7315  0078  0850               	movf	sprintf@sp,w
  7316  0079  0084               	movwf	4
  7317  007A  3001               	movlw	1	; select bank2/3
  7318  007B  0085               	movwf	5
  7319  007C  087F               	movf	127,w
  7320  007D  0080               	movwf	0
  7321  007E  3001               	movlw	1
  7322  007F  00FF               	movwf	127
  7323  0080  087F               	movf	127,w
  7324  0081  07D0               	addwf	sprintf@sp,f
  7325                           
  7326                           ;doprnt.c: 554: continue;
  7327  0082  2860               	goto	l4047
  7328  0083                     l3955:	
  7329                           
  7330                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  7331  0083  01D1               	clrf	sprintf@width
  7332  0084  01D2               	clrf	sprintf@width+1
  7333                           
  7334                           ;doprnt.c: 560: flag = 0;
  7335  0085  01CA               	clrf	sprintf@flag
  7336                           
  7337                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  7338  0086  083C               	movf	sprintf@f,w
  7339  0087  0084               	movwf	4
  7340  0088  083D               	movf	sprintf@f+1,w
  7341  0089  0085               	movwf	5
  7342  008A  0800               	movf	0,w	;code access
  7343  008B  3188  2058  3180   	fcall	_isdigit
  7344  008E  1C03               	btfss	3,0
  7345  008F  28C1               	goto	l3969
  7346                           
  7347                           ;doprnt.c: 610: width = 0;
  7348  0090  0020               	movlb	0	; select bank0
  7349  0091  01D1               	clrf	sprintf@width
  7350  0092  01D2               	clrf	sprintf@width+1
  7351  0093                     l3961:	
  7352                           ;doprnt.c: 611: do {
  7353                           
  7354                           
  7355                           ;doprnt.c: 612: width *= 10;
  7356  0093  300A               	movlw	10
  7357  0094  00F0               	movwf	___wmul@multiplier
  7358  0095  3000               	movlw	0
  7359  0096  00F1               	movwf	___wmul@multiplier+1
  7360  0097  0020               	movlb	0	; select bank0
  7361  0098  0852               	movf	sprintf@width+1,w
  7362  0099  00F3               	movwf	___wmul@multiplicand+1
  7363  009A  0851               	movf	sprintf@width,w
  7364  009B  00F2               	movwf	___wmul@multiplicand
  7365  009C  3189  2124  3180   	fcall	___wmul
  7366  009F  0871               	movf	?___wmul+1,w
  7367  00A0  0020               	movlb	0	; select bank0
  7368  00A1  00D2               	movwf	sprintf@width+1
  7369  00A2  0870               	movf	?___wmul,w
  7370  00A3  00D1               	movwf	sprintf@width
  7371                           
  7372                           ;doprnt.c: 613: width += *f++ - '0';
  7373  00A4  083C               	movf	sprintf@f,w
  7374  00A5  0084               	movwf	4
  7375  00A6  083D               	movf	sprintf@f+1,w
  7376  00A7  0085               	movwf	5
  7377  00A8  0800               	movf	0,w	;code access
  7378  00A9  3ED0               	addlw	208
  7379  00AA  00FE               	movwf	126
  7380  00AB  30FF               	movlw	255
  7381  00AC  1803               	skipnc
  7382  00AD  3000               	movlw	0
  7383  00AE  00FF               	movwf	127
  7384  00AF  087E               	movf	126,w
  7385  00B0  07D1               	addwf	sprintf@width,f
  7386  00B1  087F               	movf	127,w
  7387  00B2  3DD2               	addwfc	sprintf@width+1,f
  7388  00B3  3001               	movlw	1
  7389  00B4  07BC               	addwf	sprintf@f,f
  7390  00B5  3000               	movlw	0
  7391  00B6  3DBD               	addwfc	sprintf@f+1,f
  7392                           
  7393                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  7394  00B7  083C               	movf	sprintf@f,w
  7395  00B8  0084               	movwf	4
  7396  00B9  083D               	movf	sprintf@f+1,w
  7397  00BA  0085               	movwf	5
  7398  00BB  0800               	movf	0,w	;code access
  7399  00BC  3188  2058  3180   	fcall	_isdigit
  7400  00BF  1803               	btfsc	3,0
  7401  00C0  2893               	goto	l3961
  7402  00C1                     l3969:	
  7403                           
  7404                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  7405  00C1  0020               	movlb	0	; select bank0
  7406  00C2  083C               	movf	sprintf@f,w
  7407  00C3  0084               	movwf	4
  7408  00C4  083D               	movf	sprintf@f+1,w
  7409  00C5  0085               	movwf	5
  7410  00C6  0012               	moviw fsr0++
  7411  00C7  3A2E               	xorlw	46
  7412  00C8  1D03               	btfss	3,2
  7413  00C9  28FF               	goto	l3981
  7414                           
  7415                           ;doprnt.c: 625: f++;
  7416  00CA  3001               	movlw	1
  7417  00CB  07BC               	addwf	sprintf@f,f
  7418  00CC  3000               	movlw	0
  7419  00CD  3DBD               	addwfc	sprintf@f+1,f
  7420                           
  7421                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  7422  00CE  01D3               	clrf	sprintf@prec
  7423  00CF  01D4               	clrf	sprintf@prec+1
  7424  00D0                     l3979:	
  7425                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  7426                           
  7427  00D0  083C               	movf	sprintf@f,w
  7428  00D1  0084               	movwf	4
  7429  00D2  083D               	movf	sprintf@f+1,w
  7430  00D3  0085               	movwf	5
  7431  00D4  0800               	movf	0,w	;code access
  7432  00D5  3188  2058  3180   	fcall	_isdigit
  7433  00D8  1C03               	btfss	3,0
  7434  00D9  290A               	goto	l3987
  7435                           
  7436                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  7437  00DA  0020               	movlb	0	; select bank0
  7438  00DB  083C               	movf	sprintf@f,w
  7439  00DC  0084               	movwf	4
  7440  00DD  083D               	movf	sprintf@f+1,w
  7441  00DE  0085               	movwf	5
  7442  00DF  0800               	movf	0,w	;code access
  7443  00E0  00FE               	movwf	126
  7444  00E1  01FF               	clrf	127
  7445  00E2  0854               	movf	sprintf@prec+1,w
  7446  00E3  00F1               	movwf	___wmul@multiplier+1
  7447  00E4  0853               	movf	sprintf@prec,w
  7448  00E5  00F0               	movwf	___wmul@multiplier
  7449  00E6  300A               	movlw	10
  7450  00E7  00F2               	movwf	___wmul@multiplicand
  7451  00E8  3000               	movlw	0
  7452  00E9  00F3               	movwf	___wmul@multiplicand+1
  7453  00EA  3189  2124  3180   	fcall	___wmul
  7454  00ED  087E               	movf	126,w
  7455  00EE  0770               	addwf	?___wmul,w
  7456  00EF  00FC               	movwf	124
  7457  00F0  087F               	movf	127,w
  7458  00F1  3D71               	addwfc	?___wmul+1,w
  7459  00F2  00FD               	movwf	125
  7460  00F3  087C               	movf	124,w
  7461  00F4  3ED0               	addlw	208
  7462  00F5  0020               	movlb	0	; select bank0
  7463  00F6  00D3               	movwf	sprintf@prec
  7464  00F7  30FF               	movlw	255
  7465  00F8  3D7D               	addwfc	125,w
  7466  00F9  00D4               	movwf	sprintf@prec+1
  7467  00FA  3001               	movlw	1
  7468  00FB  07BC               	addwf	sprintf@f,f
  7469  00FC  3000               	movlw	0
  7470  00FD  3DBD               	addwfc	sprintf@f+1,f
  7471  00FE  28D0               	goto	l3979
  7472  00FF                     l3981:	
  7473                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  7474                           
  7475                           
  7476                           ;doprnt.c: 645: prec = 0;
  7477  00FF  0020               	movlb	0	; select bank0
  7478  0100  01D3               	clrf	sprintf@prec
  7479  0101  01D4               	clrf	sprintf@prec+1
  7480                           
  7481                           ;doprnt.c: 654: switch(c = *f++) {
  7482                           
  7483                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  7484  0102  290A               	goto	l3987
  7485  0103                     l519:	
  7486                           ;doprnt.c: 660: case 'l':
  7487                           
  7488                           ;doprnt.c: 657: goto alldone;
  7489                           
  7490                           ;doprnt.c: 656: case 0:
  7491                           
  7492                           
  7493                           ;doprnt.c: 662: flag |= 0x10;
  7494  0103  164A               	bsf	sprintf@flag,4
  7495                           
  7496                           ;doprnt.c: 663: goto loop;
  7497  0104  290A               	goto	l3987
  7498  0105                     l3983:	
  7499                           ;doprnt.c: 836: case 'u':
  7500                           
  7501                           ;doprnt.c: 832: continue;
  7502                           
  7503                           ;doprnt.c: 821: default:
  7504                           
  7505                           
  7506                           ;doprnt.c: 837: flag |= 0xC0;
  7507  0105  30C0               	movlw	192
  7508  0106  00FF               	movwf	127
  7509  0107  087F               	movf	127,w
  7510  0108  04CA               	iorwf	sprintf@flag,f
  7511                           
  7512                           ;doprnt.c: 841: }
  7513                           
  7514                           ;doprnt.c: 838: break;
  7515  0109  2922               	goto	l522
  7516  010A                     l3987:	
  7517  010A  0020               	movlb	0	; select bank0
  7518  010B  083D               	movf	sprintf@f+1,w
  7519  010C  00FF               	movwf	127
  7520  010D  083C               	movf	sprintf@f,w
  7521  010E  00FE               	movwf	126
  7522  010F  0ABC               	incf	sprintf@f,f
  7523  0110  1903               	skipnz
  7524  0111  0ABD               	incf	sprintf@f+1,f
  7525  0112  087E               	movf	126,w
  7526  0113  0084               	movwf	4
  7527  0114  087F               	movf	127,w
  7528  0115  0085               	movwf	5
  7529  0116  0800               	movf	0,w	;code access
  7530  0117  00D5               	movwf	sprintf@c
  7531                           
  7532                           ; Switch size 1, requested type "space"
  7533                           ; Number of cases is 3, Range of values is 0 to 117
  7534                           ; switch strategies available:
  7535                           ; Name         Instructions Cycles
  7536                           ; simple_byte           10     6 (average)
  7537                           ; direct_byte          242     6 (fixed)
  7538                           ; jumptable            260     6 (fixed)
  7539                           ;	Chosen strategy is simple_byte
  7540  0118  3A00               	xorlw	0	; case 0
  7541  0119  1903               	skipnz
  7542  011A  2A21               	goto	l4049
  7543  011B  3A6C               	xorlw	108	; case 108
  7544  011C  1903               	skipnz
  7545  011D  2903               	goto	l519
  7546  011E  3A19               	xorlw	25	; case 117
  7547  011F  1903               	skipnz
  7548  0120  2905               	goto	l3983
  7549  0121  2860               	goto	l4047
  7550  0122                     l522:	
  7551                           
  7552                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  7553  0122  1E4A               	btfss	sprintf@flag,4
  7554  0123  2931               	goto	l3993
  7555                           
  7556                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7557  0124  084B               	movf	sprintf@ap,w
  7558  0125  0084               	movwf	4
  7559  0126  0185               	clrf	5
  7560  0127  3F00               	moviw [0]fsr0
  7561  0128  00CC               	movwf	sprintf@val
  7562  0129  3F01               	moviw [1]fsr0
  7563  012A  00CD               	movwf	sprintf@val+1
  7564  012B  3F02               	moviw [2]fsr0
  7565  012C  00CE               	movwf	sprintf@val+2
  7566  012D  3F03               	moviw [3]fsr0
  7567  012E  00CF               	movwf	sprintf@val+3
  7568  012F  3004               	movlw	4
  7569  0130  293F               	goto	L1
  7570  0131                     l3993:	
  7571                           
  7572                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  7573  0131  084B               	movf	sprintf@ap,w
  7574  0132  0084               	movwf	4
  7575  0133  0185               	clrf	5
  7576  0134  3F00               	moviw [0]fsr0
  7577  0135  00FE               	movwf	126
  7578  0136  3F01               	moviw [1]fsr0
  7579  0137  00FF               	movwf	127
  7580  0138  087E               	movf	126,w
  7581  0139  00CC               	movwf	sprintf@val
  7582  013A  087F               	movf	127,w
  7583  013B  00CD               	movwf	sprintf@val+1
  7584  013C  01CE               	clrf	sprintf@val+2
  7585  013D  01CF               	clrf	sprintf@val+3
  7586  013E  3002               	movlw	2
  7587  013F                     L1:	
  7588  013F  00FF               	movwf	127
  7589  0140  087F               	movf	127,w
  7590  0141  07CB               	addwf	sprintf@ap,f
  7591                           
  7592                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  7593  0142  0853               	movf	sprintf@prec,w
  7594  0143  0454               	iorwf	sprintf@prec+1,w
  7595  0144  1D03               	btfss	3,2
  7596  0145  2950               	goto	l4003
  7597  0146  084F               	movf	sprintf@val+3,w
  7598  0147  044E               	iorwf	sprintf@val+2,w
  7599  0148  044D               	iorwf	sprintf@val+1,w
  7600  0149  044C               	iorwf	sprintf@val,w
  7601  014A  1D03               	skipz
  7602  014B  2950               	goto	l4003
  7603                           
  7604                           ;doprnt.c: 1310: prec++;
  7605  014C  3001               	movlw	1
  7606  014D  07D3               	addwf	sprintf@prec,f
  7607  014E  3000               	movlw	0
  7608  014F  3DD4               	addwfc	sprintf@prec+1,f
  7609  0150                     l4003:	
  7610                           
  7611                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7612  0150  01D5               	clrf	sprintf@c
  7613  0151  0AD5               	incf	sprintf@c,f
  7614  0152  300A               	movlw	10
  7615  0153  0655               	xorwf	sprintf@c,w
  7616  0154  1903               	btfsc	3,2
  7617  0155  2983               	goto	l4017
  7618  0156                     l4009:	
  7619                           
  7620                           ;doprnt.c: 1325: if(val < dpowers[c])
  7621  0156  0855               	movf	sprintf@c,w
  7622  0157  00FE               	movwf	126
  7623  0158  01FF               	clrf	127
  7624  0159  35FE               	lslf	126,f
  7625  015A  0DFF               	rlf	127,f
  7626  015B  35FE               	lslf	126,f
  7627  015C  0DFF               	rlf	127,f
  7628  015D  3000               	movlw	low (_dpowers| (0+32768))
  7629  015E  077E               	addwf	126,w
  7630  015F  0084               	movwf	4
  7631  0160  3090               	movlw	high (_dpowers| (0+32768))
  7632  0161  3D7F               	addwfc	127,w
  7633  0162  0085               	movwf	5
  7634  0163  3F00               	moviw [0]fsr0
  7635  0164  00C6               	movwf	??_sprintf
  7636  0165  3F01               	moviw [1]fsr0
  7637  0166  00C7               	movwf	??_sprintf+1
  7638  0167  3F02               	moviw [2]fsr0
  7639  0168  00C8               	movwf	??_sprintf+2
  7640  0169  3F03               	moviw [3]fsr0
  7641  016A  00C9               	movwf	??_sprintf+3
  7642  016B  0849               	movf	??_sprintf+3,w
  7643  016C  024F               	subwf	sprintf@val+3,w
  7644  016D  1D03               	skipz
  7645  016E  2979               	goto	u4385
  7646  016F  0848               	movf	??_sprintf+2,w
  7647  0170  024E               	subwf	sprintf@val+2,w
  7648  0171  1D03               	skipz
  7649  0172  2979               	goto	u4385
  7650  0173  0847               	movf	??_sprintf+1,w
  7651  0174  024D               	subwf	sprintf@val+1,w
  7652  0175  1D03               	skipz
  7653  0176  2979               	goto	u4385
  7654  0177  0846               	movf	??_sprintf,w
  7655  0178  024C               	subwf	sprintf@val,w
  7656  0179                     u4385:	
  7657  0179  1C03               	btfss	3,0
  7658  017A  2983               	goto	l4017
  7659                           
  7660                           ;doprnt.c: 1326: break;
  7661  017B  3001               	movlw	1
  7662  017C  00FF               	movwf	127
  7663  017D  087F               	movf	127,w
  7664  017E  07D5               	addwf	sprintf@c,f
  7665  017F  300A               	movlw	10
  7666  0180  0655               	xorwf	sprintf@c,w
  7667  0181  1D03               	btfss	3,2
  7668  0182  2956               	goto	l4009
  7669  0183                     l4017:	
  7670                           
  7671                           ;doprnt.c: 1358: if(c < prec)
  7672  0183  0854               	movf	sprintf@prec+1,w
  7673  0184  3A80               	xorlw	128
  7674  0185  3C80               	sublw	128
  7675  0186  1D03               	skipz
  7676  0187  298A               	goto	u4405
  7677  0188  0853               	movf	sprintf@prec,w
  7678  0189  0255               	subwf	sprintf@c,w
  7679  018A                     u4405:	
  7680  018A  1803               	skipnc
  7681  018B  2992               	goto	l4021
  7682                           
  7683                           ;doprnt.c: 1359: c = prec;
  7684  018C  0020               	movlb	0	; select bank0
  7685  018D  0853               	movf	sprintf@prec,w
  7686  018E  00FF               	movwf	127
  7687  018F  087F               	movf	127,w
  7688  0190  00D5               	movwf	sprintf@c
  7689  0191  29A6               	goto	l4025
  7690  0192                     l4021:	
  7691                           
  7692                           ;doprnt.c: 1360: else if(prec < c)
  7693  0192  0020               	movlb	0	; select bank0
  7694  0193  0854               	movf	sprintf@prec+1,w
  7695  0194  3A80               	xorlw	128
  7696  0195  00C6               	movwf	??_sprintf
  7697  0196  3080               	movlw	128
  7698  0197  0246               	subwf	??_sprintf,w
  7699  0198  1D03               	skipz
  7700  0199  299C               	goto	u4415
  7701  019A  0855               	movf	sprintf@c,w
  7702  019B  0253               	subwf	sprintf@prec,w
  7703  019C                     u4415:	
  7704  019C  1803               	skipnc
  7705  019D  29A6               	goto	l4025
  7706                           
  7707                           ;doprnt.c: 1361: prec = c;
  7708  019E  0020               	movlb	0	; select bank0
  7709  019F  0855               	movf	sprintf@c,w
  7710  01A0  00FE               	movwf	126
  7711  01A1  01FF               	clrf	127
  7712  01A2  087E               	movf	126,w
  7713  01A3  00D3               	movwf	sprintf@prec
  7714  01A4  087F               	movf	127,w
  7715  01A5  00D4               	movwf	sprintf@prec+1
  7716  01A6                     l4025:	
  7717                           
  7718                           ;doprnt.c: 1400: if(width > c)
  7719  01A6  0020               	movlb	0	; select bank0
  7720  01A7  0852               	movf	sprintf@width+1,w
  7721  01A8  3A80               	xorlw	128
  7722  01A9  3C80               	sublw	128
  7723  01AA  1D03               	skipz
  7724  01AB  29AE               	goto	u4425
  7725  01AC  0851               	movf	sprintf@width,w
  7726  01AD  0255               	subwf	sprintf@c,w
  7727  01AE                     u4425:	
  7728  01AE  1803               	skipnc
  7729  01AF  29B9               	goto	l4029
  7730                           
  7731                           ;doprnt.c: 1401: width -= c;
  7732  01B0  0020               	movlb	0	; select bank0
  7733  01B1  0855               	movf	sprintf@c,w
  7734  01B2  00FE               	movwf	126
  7735  01B3  01FF               	clrf	127
  7736  01B4  087E               	movf	126,w
  7737  01B5  02D1               	subwf	sprintf@width,f
  7738  01B6  087F               	movf	127,w
  7739  01B7  3BD2               	subwfb	sprintf@width+1,f
  7740  01B8  29BC               	goto	l4031
  7741  01B9                     l4029:	
  7742                           
  7743                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  7744  01B9  0020               	movlb	0	; select bank0
  7745  01BA  01D1               	clrf	sprintf@width
  7746  01BB  01D2               	clrf	sprintf@width+1
  7747  01BC                     l4031:	
  7748                           
  7749                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  7750  01BC  0851               	movf	sprintf@width,w
  7751  01BD  0452               	iorwf	sprintf@width+1,w
  7752  01BE  1903               	btfsc	3,2
  7753  01BF  2A16               	goto	l4045
  7754                           
  7755                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  7756                           
  7757                           ;doprnt.c: 1448: do
  7758  01C0  3020               	movlw	32
  7759  01C1  00FF               	movwf	127
  7760  01C2  0850               	movf	sprintf@sp,w
  7761  01C3  0084               	movwf	4
  7762  01C4  3001               	movlw	1	; select bank2/3
  7763  01C5  0085               	movwf	5
  7764  01C6  087F               	movf	127,w
  7765  01C7  0080               	movwf	0
  7766  01C8  3001               	movlw	1
  7767  01C9  00FF               	movwf	127
  7768  01CA  087F               	movf	127,w
  7769  01CB  07D0               	addwf	sprintf@sp,f
  7770                           
  7771                           ;doprnt.c: 1450: while(--width);
  7772  01CC  30FF               	movlw	255
  7773  01CD  07D1               	addwf	sprintf@width,f
  7774  01CE  30FF               	movlw	255
  7775  01CF  3DD2               	addwfc	sprintf@width+1,f
  7776  01D0  29BC               	goto	l4031
  7777  01D1                     l4039:	
  7778                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  7779                           
  7780                           
  7781                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  7782  01D1  3000               	movlw	0
  7783  01D2  00B7               	movwf	___llmod@divisor+3
  7784  01D3  3000               	movlw	0
  7785  01D4  00B6               	movwf	___llmod@divisor+2
  7786  01D5  3000               	movlw	0
  7787  01D6  00B5               	movwf	___llmod@divisor+1
  7788  01D7  300A               	movlw	10
  7789  01D8  00B4               	movwf	___llmod@divisor
  7790  01D9  0854               	movf	sprintf@prec+1,w
  7791  01DA  0085               	movwf	5
  7792  01DB  0853               	movf	sprintf@prec,w
  7793  01DC  0084               	movwf	4
  7794  01DD  3584               	lslf	4,f
  7795  01DE  0D85               	rlf	5,f
  7796  01DF  3584               	lslf	4,f
  7797  01E0  0D85               	rlf	5,f
  7798  01E1  3000               	movlw	low (_dpowers| (0+32768))
  7799  01E2  0784               	addwf	4,f
  7800  01E3  3090               	movlw	high (_dpowers| (0+32768))
  7801  01E4  3D85               	addwfc	5,f
  7802  01E5  3F00               	moviw [0]fsr0
  7803  01E6  00A7               	movwf	___lldiv@divisor
  7804  01E7  3F01               	moviw [1]fsr0
  7805  01E8  00A8               	movwf	___lldiv@divisor+1
  7806  01E9  3F02               	moviw [2]fsr0
  7807  01EA  00A9               	movwf	___lldiv@divisor+2
  7808  01EB  3F03               	moviw [3]fsr0
  7809  01EC  00AA               	movwf	___lldiv@divisor+3
  7810  01ED  084F               	movf	sprintf@val+3,w
  7811  01EE  00AE               	movwf	___lldiv@dividend+3
  7812  01EF  084E               	movf	sprintf@val+2,w
  7813  01F0  00AD               	movwf	___lldiv@dividend+2
  7814  01F1  084D               	movf	sprintf@val+1,w
  7815  01F2  00AC               	movwf	___lldiv@dividend+1
  7816  01F3  084C               	movf	sprintf@val,w
  7817  01F4  00AB               	movwf	___lldiv@dividend
  7818  01F5  318D  2501  3180   	fcall	___lldiv
  7819  01F8  0020               	movlb	0	; select bank0
  7820  01F9  082A               	movf	?___lldiv+3,w
  7821  01FA  00BB               	movwf	___llmod@dividend+3
  7822  01FB  0829               	movf	?___lldiv+2,w
  7823  01FC  00BA               	movwf	___llmod@dividend+2
  7824  01FD  0828               	movf	?___lldiv+1,w
  7825  01FE  00B9               	movwf	___llmod@dividend+1
  7826  01FF  0827               	movf	?___lldiv,w
  7827  0200  00B8               	movwf	___llmod@dividend
  7828  0201  318B  23EB  3180   	fcall	___llmod
  7829  0204  0020               	movlb	0	; select bank0
  7830  0205  0834               	movf	?___llmod,w
  7831  0206  3E30               	addlw	48
  7832  0207  00FF               	movwf	127
  7833  0208  087F               	movf	127,w
  7834  0209  00D5               	movwf	sprintf@c
  7835                           
  7836                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7837  020A  0855               	movf	sprintf@c,w
  7838  020B  00FF               	movwf	127
  7839  020C  0850               	movf	sprintf@sp,w
  7840  020D  0084               	movwf	4
  7841  020E  3001               	movlw	1	; select bank2/3
  7842  020F  0085               	movwf	5
  7843  0210  087F               	movf	127,w
  7844  0211  0080               	movwf	0
  7845  0212  3001               	movlw	1
  7846  0213  00FF               	movwf	127
  7847  0214  087F               	movf	127,w
  7848  0215  07D0               	addwf	sprintf@sp,f
  7849  0216                     l4045:	
  7850  0216  30FF               	movlw	255
  7851  0217  07D3               	addwf	sprintf@prec,f
  7852  0218  30FF               	movlw	255
  7853  0219  3DD4               	addwfc	sprintf@prec+1,f
  7854  021A  0A53               	incf	sprintf@prec,w
  7855  021B  1D03               	skipz
  7856  021C  29D1               	goto	l4039
  7857  021D  0A54               	incf	sprintf@prec+1,w
  7858  021E  1903               	btfsc	3,2
  7859  021F  2860               	goto	l4047
  7860  0220  29D1               	goto	l4039
  7861  0221                     l4049:	
  7862                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7863                           
  7864                           
  7865                           ;doprnt.c: 1557: *sp = 0;
  7866  0221  0850               	movf	sprintf@sp,w
  7867  0222  0084               	movwf	4
  7868  0223  3001               	movlw	1	; select bank2/3
  7869  0224  0085               	movwf	5
  7870  0225  0180               	clrf	0
  7871  0226  0008               	return
  7872  0227                     __end_of_sprintf:	
  7873                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7874                           
  7875                           
  7876                           	psect	text29
  7877  0858                     __ptext29:	
  7878 ;; *************** function _isdigit *****************
  7879 ;; Defined at:
  7880 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7881 ;; Parameters:    Size  Location     Type
  7882 ;;  c               1    wreg     unsigned char 
  7883 ;; Auto vars:     Size  Location     Type
  7884 ;;  c               1    1[COMMON] unsigned char 
  7885 ;; Return value:  Size  Location     Type
  7886 ;;		None               void
  7887 ;; Registers used:
  7888 ;;		wreg, status,2, status,0
  7889 ;; Tracked objects:
  7890 ;;		On entry : 0/0
  7891 ;;		On exit  : 0/0
  7892 ;;		Unchanged: 0/0
  7893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7895 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7897 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7898 ;;Total ram usage:        2 bytes
  7899 ;; Hardware stack levels used:    1
  7900 ;; Hardware stack levels required when called:    7
  7901 ;; This function calls:
  7902 ;;		Nothing
  7903 ;; This function is called by:
  7904 ;;		_sprintf
  7905 ;; This function uses a non-reentrant model
  7906 ;;
  7907                           
  7908                           
  7909                           ;psect for function _isdigit
  7910  0858                     _isdigit:	
  7911                           
  7912                           ;incstack = 0
  7913                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7914                           ;isdigit@c stored from wreg
  7915  0858  00F1               	movwf	isdigit@c
  7916  0859  01F0               	clrf	_isdigit$1995
  7917  085A  303A               	movlw	58
  7918  085B  0271               	subwf	isdigit@c,w
  7919  085C  1803               	skipnc
  7920  085D  2864               	goto	l3733
  7921  085E  3030               	movlw	48
  7922  085F  0271               	subwf	isdigit@c,w
  7923  0860  1C03               	skipc
  7924  0861  2864               	goto	l3733
  7925  0862  01F0               	clrf	_isdigit$1995
  7926  0863  0AF0               	incf	_isdigit$1995,f
  7927  0864                     l3733:	
  7928  0864  0C70               	rrf	_isdigit$1995,w
  7929  0865  0008               	return
  7930  0866                     __end_of_isdigit:	
  7931                           
  7932                           	psect	text30
  7933  0924                     __ptext30:	
  7934 ;; *************** function ___wmul *****************
  7935 ;; Defined at:
  7936 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7937 ;; Parameters:    Size  Location     Type
  7938 ;;  multiplier      2    0[COMMON] unsigned int 
  7939 ;;  multiplicand    2    2[COMMON] unsigned int 
  7940 ;; Auto vars:     Size  Location     Type
  7941 ;;  product         2    7[BANK0 ] unsigned int 
  7942 ;; Return value:  Size  Location     Type
  7943 ;;                  2    0[COMMON] unsigned int 
  7944 ;; Registers used:
  7945 ;;		wreg, status,2, status,0
  7946 ;; Tracked objects:
  7947 ;;		On entry : 0/0
  7948 ;;		On exit  : 0/0
  7949 ;;		Unchanged: 0/0
  7950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7951 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7952 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7954 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7955 ;;Total ram usage:        6 bytes
  7956 ;; Hardware stack levels used:    1
  7957 ;; Hardware stack levels required when called:    7
  7958 ;; This function calls:
  7959 ;;		Nothing
  7960 ;; This function is called by:
  7961 ;;		_sprintf
  7962 ;; This function uses a non-reentrant model
  7963 ;;
  7964                           
  7965                           
  7966                           ;psect for function ___wmul
  7967  0924                     ___wmul:	
  7968                           
  7969                           ;incstack = 0
  7970                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7971  0924  0020               	movlb	0	; select bank0
  7972  0925  01A7               	clrf	___wmul@product
  7973  0926  01A8               	clrf	___wmul@product+1
  7974  0927                     l3739:	
  7975  0927  1C70               	btfss	___wmul@multiplier,0
  7976  0928  292E               	goto	l545
  7977  0929  0872               	movf	___wmul@multiplicand,w
  7978  092A  0020               	movlb	0	; select bank0
  7979  092B  07A7               	addwf	___wmul@product,f
  7980  092C  0873               	movf	___wmul@multiplicand+1,w
  7981  092D  3DA8               	addwfc	___wmul@product+1,f
  7982  092E                     l545:	
  7983  092E  3001               	movlw	1
  7984  092F                     u3765:	
  7985  092F  35F2               	lslf	___wmul@multiplicand,f
  7986  0930  0DF3               	rlf	___wmul@multiplicand+1,f
  7987  0931  0B89               	decfsz	9,f
  7988  0932  292F               	goto	u3765
  7989  0933  3001               	movlw	1
  7990  0934                     u3775:	
  7991  0934  36F1               	lsrf	___wmul@multiplier+1,f
  7992  0935  0CF0               	rrf	___wmul@multiplier,f
  7993  0936  0B89               	decfsz	9,f
  7994  0937  2934               	goto	u3775
  7995  0938  0870               	movf	___wmul@multiplier,w
  7996  0939  0471               	iorwf	___wmul@multiplier+1,w
  7997  093A  1D03               	btfss	3,2
  7998  093B  2927               	goto	l3739
  7999  093C  0020               	movlb	0	; select bank0
  8000  093D  0828               	movf	___wmul@product+1,w
  8001  093E  00F1               	movwf	?___wmul+1
  8002  093F  0827               	movf	___wmul@product,w
  8003  0940  00F0               	movwf	?___wmul
  8004  0941  0008               	return
  8005  0942                     __end_of___wmul:	
  8006                           
  8007                           	psect	text31
  8008  0BEB                     __ptext31:	
  8009 ;; *************** function ___llmod *****************
  8010 ;; Defined at:
  8011 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  8012 ;; Parameters:    Size  Location     Type
  8013 ;;  divisor         4   20[BANK0 ] unsigned long 
  8014 ;;  dividend        4   24[BANK0 ] unsigned long 
  8015 ;; Auto vars:     Size  Location     Type
  8016 ;;  counter         1    0[COMMON] unsigned char 
  8017 ;; Return value:  Size  Location     Type
  8018 ;;                  4   20[BANK0 ] unsigned long 
  8019 ;; Registers used:
  8020 ;;		wreg, status,2, status,0, btemp+11
  8021 ;; Tracked objects:
  8022 ;;		On entry : 0/0
  8023 ;;		On exit  : 0/0
  8024 ;;		Unchanged: 0/0
  8025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8026 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8027 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8029 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8030 ;;Total ram usage:        9 bytes
  8031 ;; Hardware stack levels used:    1
  8032 ;; Hardware stack levels required when called:    7
  8033 ;; This function calls:
  8034 ;;		Nothing
  8035 ;; This function is called by:
  8036 ;;		_sprintf
  8037 ;; This function uses a non-reentrant model
  8038 ;;
  8039                           
  8040                           
  8041                           ;psect for function ___llmod
  8042  0BEB                     ___llmod:	
  8043                           
  8044                           ;incstack = 0
  8045                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+11]
  8046  0BEB  0020               	movlb	0	; select bank0
  8047  0BEC  0837               	movf	___llmod@divisor+3,w
  8048  0BED  0436               	iorwf	___llmod@divisor+2,w
  8049  0BEE  0435               	iorwf	___llmod@divisor+1,w
  8050  0BEF  0434               	iorwf	___llmod@divisor,w
  8051  0BF0  1903               	skipnz
  8052  0BF1  2C25               	goto	l3871
  8053  0BF2  01F0               	clrf	___llmod@counter
  8054  0BF3  0AF0               	incf	___llmod@counter,f
  8055  0BF4                     l3861:	
  8056  0BF4  1BB7               	btfsc	___llmod@divisor+3,7
  8057  0BF5  2C02               	goto	l3863
  8058  0BF6  3001               	movlw	1
  8059  0BF7                     u4105:	
  8060  0BF7  35B4               	lslf	___llmod@divisor,f
  8061  0BF8  0DB5               	rlf	___llmod@divisor+1,f
  8062  0BF9  0DB6               	rlf	___llmod@divisor+2,f
  8063  0BFA  0DB7               	rlf	___llmod@divisor+3,f
  8064  0BFB  0B89               	decfsz	9,f
  8065  0BFC  2BF7               	goto	u4105
  8066  0BFD  3001               	movlw	1
  8067  0BFE  00FF               	movwf	127
  8068  0BFF  087F               	movf	127,w
  8069  0C00  07F0               	addwf	___llmod@counter,f
  8070  0C01  2BF4               	goto	l3861
  8071  0C02                     l3863:	
  8072  0C02  0837               	movf	___llmod@divisor+3,w
  8073  0C03  023B               	subwf	___llmod@dividend+3,w
  8074  0C04  1D03               	skipz
  8075  0C05  2C10               	goto	u4125
  8076  0C06  0836               	movf	___llmod@divisor+2,w
  8077  0C07  023A               	subwf	___llmod@dividend+2,w
  8078  0C08  1D03               	skipz
  8079  0C09  2C10               	goto	u4125
  8080  0C0A  0835               	movf	___llmod@divisor+1,w
  8081  0C0B  0239               	subwf	___llmod@dividend+1,w
  8082  0C0C  1D03               	skipz
  8083  0C0D  2C10               	goto	u4125
  8084  0C0E  0834               	movf	___llmod@divisor,w
  8085  0C0F  0238               	subwf	___llmod@dividend,w
  8086  0C10                     u4125:	
  8087  0C10  1C03               	skipc
  8088  0C11  2C1A               	goto	l3867
  8089  0C12  0834               	movf	___llmod@divisor,w
  8090  0C13  02B8               	subwf	___llmod@dividend,f
  8091  0C14  0835               	movf	___llmod@divisor+1,w
  8092  0C15  3BB9               	subwfb	___llmod@dividend+1,f
  8093  0C16  0836               	movf	___llmod@divisor+2,w
  8094  0C17  3BBA               	subwfb	___llmod@dividend+2,f
  8095  0C18  0837               	movf	___llmod@divisor+3,w
  8096  0C19  3BBB               	subwfb	___llmod@dividend+3,f
  8097  0C1A                     l3867:	
  8098  0C1A  3001               	movlw	1
  8099  0C1B                     u4135:	
  8100  0C1B  36B7               	lsrf	___llmod@divisor+3,f
  8101  0C1C  0CB6               	rrf	___llmod@divisor+2,f
  8102  0C1D  0CB5               	rrf	___llmod@divisor+1,f
  8103  0C1E  0CB4               	rrf	___llmod@divisor,f
  8104  0C1F  0B89               	decfsz	9,f
  8105  0C20  2C1B               	goto	u4135
  8106  0C21  3001               	movlw	1
  8107  0C22  02F0               	subwf	___llmod@counter,f
  8108  0C23  1D03               	btfss	3,2
  8109  0C24  2C02               	goto	l3863
  8110  0C25                     l3871:	
  8111  0C25  083B               	movf	___llmod@dividend+3,w
  8112  0C26  00B7               	movwf	?___llmod+3
  8113  0C27  083A               	movf	___llmod@dividend+2,w
  8114  0C28  00B6               	movwf	?___llmod+2
  8115  0C29  0839               	movf	___llmod@dividend+1,w
  8116  0C2A  00B5               	movwf	?___llmod+1
  8117  0C2B  0838               	movf	___llmod@dividend,w
  8118  0C2C  00B4               	movwf	?___llmod
  8119  0C2D  0008               	return
  8120  0C2E                     __end_of___llmod:	
  8121                           
  8122                           	psect	text32
  8123  0D01                     __ptext32:	
  8124 ;; *************** function ___lldiv *****************
  8125 ;; Defined at:
  8126 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  8127 ;; Parameters:    Size  Location     Type
  8128 ;;  divisor         4    7[BANK0 ] unsigned long 
  8129 ;;  dividend        4   11[BANK0 ] unsigned long 
  8130 ;; Auto vars:     Size  Location     Type
  8131 ;;  quotient        4   15[BANK0 ] unsigned long 
  8132 ;;  counter         1   19[BANK0 ] unsigned char 
  8133 ;; Return value:  Size  Location     Type
  8134 ;;                  4    7[BANK0 ] unsigned long 
  8135 ;; Registers used:
  8136 ;;		wreg, status,2, status,0, btemp+11
  8137 ;; Tracked objects:
  8138 ;;		On entry : 0/0
  8139 ;;		On exit  : 0/0
  8140 ;;		Unchanged: 0/0
  8141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8142 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8143 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8145 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8146 ;;Total ram usage:       13 bytes
  8147 ;; Hardware stack levels used:    1
  8148 ;; Hardware stack levels required when called:    7
  8149 ;; This function calls:
  8150 ;;		Nothing
  8151 ;; This function is called by:
  8152 ;;		_sprintf
  8153 ;; This function uses a non-reentrant model
  8154 ;;
  8155                           
  8156                           
  8157                           ;psect for function ___lldiv
  8158  0D01                     ___lldiv:	
  8159                           
  8160                           ;incstack = 0
  8161                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+11]
  8162  0D01  3000               	movlw	0
  8163  0D02  0020               	movlb	0	; select bank0
  8164  0D03  00B2               	movwf	___lldiv@quotient+3
  8165  0D04  3000               	movlw	0
  8166  0D05  00B1               	movwf	___lldiv@quotient+2
  8167  0D06  3000               	movlw	0
  8168  0D07  00B0               	movwf	___lldiv@quotient+1
  8169  0D08  3000               	movlw	0
  8170  0D09  00AF               	movwf	___lldiv@quotient
  8171  0D0A  082A               	movf	___lldiv@divisor+3,w
  8172  0D0B  0429               	iorwf	___lldiv@divisor+2,w
  8173  0D0C  0428               	iorwf	___lldiv@divisor+1,w
  8174  0D0D  0427               	iorwf	___lldiv@divisor,w
  8175  0D0E  1903               	skipnz
  8176  0D0F  2D4B               	goto	l3773
  8177  0D10  01B3               	clrf	___lldiv@counter
  8178  0D11  0AB3               	incf	___lldiv@counter,f
  8179  0D12                     l3759:	
  8180  0D12  1BAA               	btfsc	___lldiv@divisor+3,7
  8181  0D13  2D20               	goto	l3761
  8182  0D14  3001               	movlw	1
  8183  0D15                     u3805:	
  8184  0D15  35A7               	lslf	___lldiv@divisor,f
  8185  0D16  0DA8               	rlf	___lldiv@divisor+1,f
  8186  0D17  0DA9               	rlf	___lldiv@divisor+2,f
  8187  0D18  0DAA               	rlf	___lldiv@divisor+3,f
  8188  0D19  0B89               	decfsz	9,f
  8189  0D1A  2D15               	goto	u3805
  8190  0D1B  3001               	movlw	1
  8191  0D1C  00FF               	movwf	127
  8192  0D1D  087F               	movf	127,w
  8193  0D1E  07B3               	addwf	___lldiv@counter,f
  8194  0D1F  2D12               	goto	l3759
  8195  0D20                     l3761:	
  8196  0D20  3001               	movlw	1
  8197  0D21                     u3825:	
  8198  0D21  35AF               	lslf	___lldiv@quotient,f
  8199  0D22  0DB0               	rlf	___lldiv@quotient+1,f
  8200  0D23  0DB1               	rlf	___lldiv@quotient+2,f
  8201  0D24  0DB2               	rlf	___lldiv@quotient+3,f
  8202  0D25  0B89               	decfsz	9,f
  8203  0D26  2D21               	goto	u3825
  8204  0D27  082A               	movf	___lldiv@divisor+3,w
  8205  0D28  022E               	subwf	___lldiv@dividend+3,w
  8206  0D29  1D03               	skipz
  8207  0D2A  2D35               	goto	u3835
  8208  0D2B  0829               	movf	___lldiv@divisor+2,w
  8209  0D2C  022D               	subwf	___lldiv@dividend+2,w
  8210  0D2D  1D03               	skipz
  8211  0D2E  2D35               	goto	u3835
  8212  0D2F  0828               	movf	___lldiv@divisor+1,w
  8213  0D30  022C               	subwf	___lldiv@dividend+1,w
  8214  0D31  1D03               	skipz
  8215  0D32  2D35               	goto	u3835
  8216  0D33  0827               	movf	___lldiv@divisor,w
  8217  0D34  022B               	subwf	___lldiv@dividend,w
  8218  0D35                     u3835:	
  8219  0D35  1C03               	skipc
  8220  0D36  2D40               	goto	l3769
  8221  0D37  0827               	movf	___lldiv@divisor,w
  8222  0D38  02AB               	subwf	___lldiv@dividend,f
  8223  0D39  0828               	movf	___lldiv@divisor+1,w
  8224  0D3A  3BAC               	subwfb	___lldiv@dividend+1,f
  8225  0D3B  0829               	movf	___lldiv@divisor+2,w
  8226  0D3C  3BAD               	subwfb	___lldiv@dividend+2,f
  8227  0D3D  082A               	movf	___lldiv@divisor+3,w
  8228  0D3E  3BAE               	subwfb	___lldiv@dividend+3,f
  8229  0D3F  142F               	bsf	___lldiv@quotient,0
  8230  0D40                     l3769:	
  8231  0D40  3001               	movlw	1
  8232  0D41                     u3845:	
  8233  0D41  36AA               	lsrf	___lldiv@divisor+3,f
  8234  0D42  0CA9               	rrf	___lldiv@divisor+2,f
  8235  0D43  0CA8               	rrf	___lldiv@divisor+1,f
  8236  0D44  0CA7               	rrf	___lldiv@divisor,f
  8237  0D45  0B89               	decfsz	9,f
  8238  0D46  2D41               	goto	u3845
  8239  0D47  3001               	movlw	1
  8240  0D48  02B3               	subwf	___lldiv@counter,f
  8241  0D49  1D03               	btfss	3,2
  8242  0D4A  2D20               	goto	l3761
  8243  0D4B                     l3773:	
  8244  0D4B  0832               	movf	___lldiv@quotient+3,w
  8245  0D4C  00AA               	movwf	?___lldiv+3
  8246  0D4D  0831               	movf	___lldiv@quotient+2,w
  8247  0D4E  00A9               	movwf	?___lldiv+2
  8248  0D4F  0830               	movf	___lldiv@quotient+1,w
  8249  0D50  00A8               	movwf	?___lldiv+1
  8250  0D51  082F               	movf	___lldiv@quotient,w
  8251  0D52  00A7               	movwf	?___lldiv
  8252  0D53  0008               	return
  8253  0D54                     __end_of___lldiv:	
  8254                           
  8255                           	psect	text33
  8256  0A4E                     __ptext33:	
  8257 ;; *************** function ___lltoft *****************
  8258 ;; Defined at:
  8259 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  8260 ;; Parameters:    Size  Location     Type
  8261 ;;  c               4    0[COMMON] unsigned long 
  8262 ;; Auto vars:     Size  Location     Type
  8263 ;;  exp             1   12[BANK0 ] unsigned char 
  8264 ;; Return value:  Size  Location     Type
  8265 ;;                  3    0[COMMON] float 
  8266 ;; Registers used:
  8267 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8268 ;; Tracked objects:
  8269 ;;		On entry : 0/0
  8270 ;;		On exit  : 0/0
  8271 ;;		Unchanged: 0/0
  8272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8273 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8274 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8276 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8277 ;;Total ram usage:        5 bytes
  8278 ;; Hardware stack levels used:    1
  8279 ;; Hardware stack levels required when called:    8
  8280 ;; This function calls:
  8281 ;;		___ftpack
  8282 ;; This function is called by:
  8283 ;;		_ftoa
  8284 ;; This function uses a non-reentrant model
  8285 ;;
  8286                           
  8287                           
  8288                           ;psect for function ___lltoft
  8289  0A4E                     ___lltoft:	
  8290                           
  8291                           ;incstack = 0
  8292                           ; Regs used in ___lltoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8293  0A4E  308E               	movlw	142
  8294  0A4F  00FF               	movwf	127
  8295  0A50  087F               	movf	127,w
  8296  0A51  0020               	movlb	0	; select bank0
  8297  0A52  00AC               	movwf	___lltoft@exp
  8298  0A53                     l4207:	
  8299  0A53  30FF               	movlw	255
  8300  0A54  0573               	andwf	___lltoft@c+3,w
  8301  0A55  1903               	btfsc	3,2
  8302  0A56  2A63               	goto	l4209
  8303  0A57  3001               	movlw	1
  8304  0A58                     u4765:	
  8305  0A58  36F3               	lsrf	___lltoft@c+3,f
  8306  0A59  0CF2               	rrf	___lltoft@c+2,f
  8307  0A5A  0CF1               	rrf	___lltoft@c+1,f
  8308  0A5B  0CF0               	rrf	___lltoft@c,f
  8309  0A5C  0B89               	decfsz	9,f
  8310  0A5D  2A58               	goto	u4765
  8311  0A5E  3001               	movlw	1
  8312  0A5F  00FF               	movwf	127
  8313  0A60  087F               	movf	127,w
  8314  0A61  07AC               	addwf	___lltoft@exp,f
  8315  0A62  2A53               	goto	l4207
  8316  0A63                     l4209:	
  8317  0A63  0870               	movf	___lltoft@c,w
  8318  0A64  00A7               	movwf	___ftpack@arg
  8319  0A65  0871               	movf	___lltoft@c+1,w
  8320  0A66  00A8               	movwf	___ftpack@arg+1
  8321  0A67  0872               	movf	___lltoft@c+2,w
  8322  0A68  00A9               	movwf	___ftpack@arg+2
  8323  0A69  082C               	movf	___lltoft@exp,w
  8324  0A6A  00FF               	movwf	127
  8325  0A6B  087F               	movf	127,w
  8326  0A6C  00AA               	movwf	___ftpack@exp
  8327  0A6D  01AB               	clrf	___ftpack@sign
  8328  0A6E  318D  2554         	fcall	___ftpack
  8329  0A70  0020               	movlb	0	; select bank0
  8330  0A71  0827               	movf	?___ftpack,w
  8331  0A72  00F0               	movwf	?___lltoft
  8332  0A73  0828               	movf	?___ftpack+1,w
  8333  0A74  00F1               	movwf	?___lltoft+1
  8334  0A75  0829               	movf	?___ftpack+2,w
  8335  0A76  00F2               	movwf	?___lltoft+2
  8336  0A77  0008               	return
  8337  0A78                     __end_of___lltoft:	
  8338                           
  8339                           	psect	text34
  8340  0E3F                     __ptext34:	
  8341 ;; *************** function ___fttol *****************
  8342 ;; Defined at:
  8343 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  8344 ;; Parameters:    Size  Location     Type
  8345 ;;  f1              3   56[BANK0 ] float 
  8346 ;; Auto vars:     Size  Location     Type
  8347 ;;  lval            4   61[BANK0 ] unsigned long 
  8348 ;;  exp1            1   65[BANK0 ] unsigned char 
  8349 ;;  sign1           1   60[BANK0 ] unsigned char 
  8350 ;; Return value:  Size  Location     Type
  8351 ;;                  4   56[BANK0 ] long 
  8352 ;; Registers used:
  8353 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8354 ;; Tracked objects:
  8355 ;;		On entry : 0/0
  8356 ;;		On exit  : 0/0
  8357 ;;		Unchanged: 0/0
  8358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8359 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8360 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8362 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8363 ;;Total ram usage:       10 bytes
  8364 ;; Hardware stack levels used:    1
  8365 ;; Hardware stack levels required when called:    7
  8366 ;; This function calls:
  8367 ;;		Nothing
  8368 ;; This function is called by:
  8369 ;;		_ftoa
  8370 ;; This function uses a non-reentrant model
  8371 ;;
  8372                           
  8373                           
  8374                           ;psect for function ___fttol
  8375  0E3F                     ___fttol:	
  8376                           
  8377                           ;incstack = 0
  8378                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+9-btemp+11]
  8379  0E3F  0020               	movlb	0	; select bank0
  8380  0E40  0858               	movf	___fttol@f1,w
  8381  0E41  00FD               	movwf	125
  8382  0E42  0859               	movf	___fttol@f1+1,w
  8383  0E43  00FE               	movwf	126
  8384  0E44  085A               	movf	___fttol@f1+2,w
  8385  0E45  00FF               	movwf	127
  8386  0E46  1003               	clrc
  8387  0E47  0D7E               	rlf	126,w
  8388  0E48  0D7F               	rlf	127,w
  8389  0E49  00FF               	movwf	127
  8390  0E4A  087F               	movf	127,w
  8391  0E4B  00E1               	movwf	___fttol@exp1
  8392  0E4C  0861               	movf	___fttol@exp1,w
  8393  0E4D  1D03               	btfss	3,2
  8394  0E4E  2E58               	goto	l4163
  8395  0E4F  3000               	movlw	0
  8396  0E50  00DB               	movwf	?___fttol+3
  8397  0E51  3000               	movlw	0
  8398  0E52  00DA               	movwf	?___fttol+2
  8399  0E53  3000               	movlw	0
  8400  0E54  00D9               	movwf	?___fttol+1
  8401  0E55  3000               	movlw	0
  8402  0E56  00D8               	movwf	?___fttol
  8403  0E57  0008               	return
  8404  0E58                     l4163:	
  8405  0E58  0858               	movf	___fttol@f1,w
  8406  0E59  00FD               	movwf	125
  8407  0E5A  0859               	movf	___fttol@f1+1,w
  8408  0E5B  00FE               	movwf	126
  8409  0E5C  085A               	movf	___fttol@f1+2,w
  8410  0E5D  00FF               	movwf	127
  8411  0E5E  3017               	movlw	23
  8412  0E5F                     u4675:	
  8413  0E5F  36FF               	lsrf	127,f
  8414  0E60  0CFE               	rrf	126,f
  8415  0E61  0CFD               	rrf	125,f
  8416  0E62  0B89               	decfsz	9,f
  8417  0E63  2E5F               	goto	u4675
  8418  0E64  087D               	movf	125,w
  8419  0E65  00FF               	movwf	127
  8420  0E66  087F               	movf	127,w
  8421  0E67  00DC               	movwf	___fttol@sign1
  8422  0E68  17D9               	bsf	___fttol@f1+1,7
  8423  0E69  30FF               	movlw	255
  8424  0E6A  05D8               	andwf	___fttol@f1,f
  8425  0E6B  30FF               	movlw	255
  8426  0E6C  05D9               	andwf	___fttol@f1+1,f
  8427  0E6D  3000               	movlw	0
  8428  0E6E  05DA               	andwf	___fttol@f1+2,f
  8429  0E6F  0858               	movf	___fttol@f1,w
  8430  0E70  00DD               	movwf	___fttol@lval
  8431  0E71  0859               	movf	___fttol@f1+1,w
  8432  0E72  00DE               	movwf	___fttol@lval+1
  8433  0E73  085A               	movf	___fttol@f1+2,w
  8434  0E74  00DF               	movwf	___fttol@lval+2
  8435  0E75  01E0               	clrf	___fttol@lval+3
  8436  0E76  308E               	movlw	142
  8437  0E77  02E1               	subwf	___fttol@exp1,f
  8438  0E78  1FE1               	btfss	___fttol@exp1,7
  8439  0E79  2E96               	goto	l4185
  8440  0E7A  0861               	movf	___fttol@exp1,w
  8441  0E7B  3A80               	xorlw	128
  8442  0E7C  3E8F               	addlw	143
  8443  0E7D  1803               	skipnc
  8444  0E7E  2E88               	goto	l4181
  8445  0E7F  3000               	movlw	0
  8446  0E80  00DB               	movwf	?___fttol+3
  8447  0E81  3000               	movlw	0
  8448  0E82  00DA               	movwf	?___fttol+2
  8449  0E83  3000               	movlw	0
  8450  0E84  00D9               	movwf	?___fttol+1
  8451  0E85  3000               	movlw	0
  8452  0E86  00D8               	movwf	?___fttol
  8453  0E87  0008               	return
  8454  0E88                     l4181:	
  8455  0E88  3001               	movlw	1
  8456  0E89                     u4705:	
  8457  0E89  36E0               	lsrf	___fttol@lval+3,f
  8458  0E8A  0CDF               	rrf	___fttol@lval+2,f
  8459  0E8B  0CDE               	rrf	___fttol@lval+1,f
  8460  0E8C  0CDD               	rrf	___fttol@lval,f
  8461  0E8D  0B89               	decfsz	9,f
  8462  0E8E  2E89               	goto	u4705
  8463  0E8F  3001               	movlw	1
  8464  0E90  00FF               	movwf	127
  8465  0E91  087F               	movf	127,w
  8466  0E92  07E1               	addwf	___fttol@exp1,f
  8467  0E93  1903               	btfsc	3,2
  8468  0E94  2EAF               	goto	l4193
  8469  0E95  2E88               	goto	l4181
  8470  0E96                     l4185:	
  8471  0E96  3018               	movlw	24
  8472  0E97  0261               	subwf	___fttol@exp1,w
  8473  0E98  1C03               	skipc
  8474  0E99  2EAC               	goto	l839
  8475  0E9A  3000               	movlw	0
  8476  0E9B  00DB               	movwf	?___fttol+3
  8477  0E9C  3000               	movlw	0
  8478  0E9D  00DA               	movwf	?___fttol+2
  8479  0E9E  3000               	movlw	0
  8480  0E9F  00D9               	movwf	?___fttol+1
  8481  0EA0  3000               	movlw	0
  8482  0EA1  00D8               	movwf	?___fttol
  8483  0EA2  0008               	return
  8484  0EA3                     l4191:	
  8485  0EA3  3001               	movlw	1
  8486  0EA4                     u4735:	
  8487  0EA4  35DD               	lslf	___fttol@lval,f
  8488  0EA5  0DDE               	rlf	___fttol@lval+1,f
  8489  0EA6  0DDF               	rlf	___fttol@lval+2,f
  8490  0EA7  0DE0               	rlf	___fttol@lval+3,f
  8491  0EA8  0B89               	decfsz	9,f
  8492  0EA9  2EA4               	goto	u4735
  8493  0EAA  3001               	movlw	1
  8494  0EAB  02E1               	subwf	___fttol@exp1,f
  8495  0EAC                     l839:	
  8496  0EAC  0861               	movf	___fttol@exp1,w
  8497  0EAD  1D03               	btfss	3,2
  8498  0EAE  2EA3               	goto	l4191
  8499  0EAF                     l4193:	
  8500  0EAF  085C               	movf	___fttol@sign1,w
  8501  0EB0  1903               	btfsc	3,2
  8502  0EB1  2EBD               	goto	l4197
  8503  0EB2  09DD               	comf	___fttol@lval,f
  8504  0EB3  09DE               	comf	___fttol@lval+1,f
  8505  0EB4  09DF               	comf	___fttol@lval+2,f
  8506  0EB5  09E0               	comf	___fttol@lval+3,f
  8507  0EB6  0ADD               	incf	___fttol@lval,f
  8508  0EB7  1903               	skipnz
  8509  0EB8  0ADE               	incf	___fttol@lval+1,f
  8510  0EB9  1903               	skipnz
  8511  0EBA  0ADF               	incf	___fttol@lval+2,f
  8512  0EBB  1903               	skipnz
  8513  0EBC  0AE0               	incf	___fttol@lval+3,f
  8514  0EBD                     l4197:	
  8515  0EBD  0860               	movf	___fttol@lval+3,w
  8516  0EBE  00DB               	movwf	?___fttol+3
  8517  0EBF  085F               	movf	___fttol@lval+2,w
  8518  0EC0  00DA               	movwf	?___fttol+2
  8519  0EC1  085E               	movf	___fttol@lval+1,w
  8520  0EC2  00D9               	movwf	?___fttol+1
  8521  0EC3  085D               	movf	___fttol@lval,w
  8522  0EC4  00D8               	movwf	?___fttol
  8523  0EC5  0008               	return
  8524  0EC6                     __end_of___fttol:	
  8525                           
  8526                           	psect	text35
  8527  0906                     __ptext35:	
  8528 ;; *************** function ___ftsub *****************
  8529 ;; Defined at:
  8530 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  8531 ;; Parameters:    Size  Location     Type
  8532 ;;  f2              3   22[BANK0 ] float 
  8533 ;;  f1              3   25[BANK0 ] float 
  8534 ;; Auto vars:     Size  Location     Type
  8535 ;;		None
  8536 ;; Return value:  Size  Location     Type
  8537 ;;                  3   22[BANK0 ] float 
  8538 ;; Registers used:
  8539 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8540 ;; Tracked objects:
  8541 ;;		On entry : 0/0
  8542 ;;		On exit  : 0/0
  8543 ;;		Unchanged: 0/0
  8544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8545 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8548 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8549 ;;Total ram usage:        6 bytes
  8550 ;; Hardware stack levels used:    1
  8551 ;; Hardware stack levels required when called:    9
  8552 ;; This function calls:
  8553 ;;		___ftadd
  8554 ;; This function is called by:
  8555 ;;		_ftoa
  8556 ;; This function uses a non-reentrant model
  8557 ;;
  8558                           
  8559                           
  8560                           ;psect for function ___ftsub
  8561  0906                     ___ftsub:	
  8562                           
  8563                           ;incstack = 0
  8564                           ; Regs used in ___ftsub: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8565  0906  0020               	movlb	0	; select bank0
  8566  0907  0838               	movf	___ftsub@f2+2,w
  8567  0908  0437               	iorwf	___ftsub@f2+1,w
  8568  0909  0436               	iorwf	___ftsub@f2,w
  8569  090A  1903               	skipnz
  8570  090B  290E               	goto	l4153
  8571  090C  3080               	movlw	128
  8572  090D  06B8               	xorwf	___ftsub@f2+2,f
  8573  090E                     l4153:	
  8574  090E  0839               	movf	___ftsub@f1,w
  8575  090F  00AC               	movwf	___ftadd@f1
  8576  0910  083A               	movf	___ftsub@f1+1,w
  8577  0911  00AD               	movwf	___ftadd@f1+1
  8578  0912  083B               	movf	___ftsub@f1+2,w
  8579  0913  00AE               	movwf	___ftadd@f1+2
  8580  0914  0836               	movf	___ftsub@f2,w
  8581  0915  00AF               	movwf	___ftadd@f2
  8582  0916  0837               	movf	___ftsub@f2+1,w
  8583  0917  00B0               	movwf	___ftadd@f2+1
  8584  0918  0838               	movf	___ftsub@f2+2,w
  8585  0919  00B1               	movwf	___ftadd@f2+2
  8586  091A  3183  232B         	fcall	___ftadd
  8587  091C  0020               	movlb	0	; select bank0
  8588  091D  082C               	movf	?___ftadd,w
  8589  091E  00B6               	movwf	?___ftsub
  8590  091F  082D               	movf	?___ftadd+1,w
  8591  0920  00B7               	movwf	?___ftsub+1
  8592  0921  082E               	movf	?___ftadd+2,w
  8593  0922  00B8               	movwf	?___ftsub+2
  8594  0923  0008               	return
  8595  0924                     __end_of___ftsub:	
  8596                           
  8597                           	psect	text36
  8598  0824                     __ptext36:	
  8599 ;; *************** function ___ftneg *****************
  8600 ;; Defined at:
  8601 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  8602 ;; Parameters:    Size  Location     Type
  8603 ;;  f1              3   44[BANK0 ] float 
  8604 ;; Auto vars:     Size  Location     Type
  8605 ;;		None
  8606 ;; Return value:  Size  Location     Type
  8607 ;;                  3   44[BANK0 ] float 
  8608 ;; Registers used:
  8609 ;;		wreg
  8610 ;; Tracked objects:
  8611 ;;		On entry : 0/0
  8612 ;;		On exit  : 0/0
  8613 ;;		Unchanged: 0/0
  8614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8615 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;Total ram usage:        3 bytes
  8620 ;; Hardware stack levels used:    1
  8621 ;; Hardware stack levels required when called:    7
  8622 ;; This function calls:
  8623 ;;		Nothing
  8624 ;; This function is called by:
  8625 ;;		_loop
  8626 ;;		_ftoa
  8627 ;; This function uses a non-reentrant model
  8628 ;;
  8629                           
  8630                           
  8631                           ;psect for function ___ftneg
  8632  0824                     ___ftneg:	
  8633                           
  8634                           ;incstack = 0
  8635                           ; Regs used in ___ftneg: [wreg]
  8636  0824  0020               	movlb	0	; select bank0
  8637  0825  084E               	movf	___ftneg@f1+2,w
  8638  0826  044D               	iorwf	___ftneg@f1+1,w
  8639  0827  044C               	iorwf	___ftneg@f1,w
  8640  0828  1903               	skipnz
  8641  0829  0008               	return
  8642  082A  3080               	movlw	128
  8643  082B  06CE               	xorwf	___ftneg@f1+2,f
  8644  082C  0008               	return
  8645  082D                     __end_of___ftneg:	
  8646                           
  8647                           	psect	text37
  8648  05F5                     __ptext37:	
  8649 ;; *************** function ___ftmul *****************
  8650 ;; Defined at:
  8651 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  8652 ;; Parameters:    Size  Location     Type
  8653 ;;  f1              3   44[BANK0 ] float 
  8654 ;;  f2              3   47[BANK0 ] float 
  8655 ;; Auto vars:     Size  Location     Type
  8656 ;;  f3_as_produc    3   51[BANK0 ] unsigned um
  8657 ;;  sign            1   55[BANK0 ] unsigned char 
  8658 ;;  cntr            1   54[BANK0 ] unsigned char 
  8659 ;;  exp             1   50[BANK0 ] unsigned char 
  8660 ;; Return value:  Size  Location     Type
  8661 ;;                  3   44[BANK0 ] float 
  8662 ;; Registers used:
  8663 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8664 ;; Tracked objects:
  8665 ;;		On entry : 0/0
  8666 ;;		On exit  : 0/0
  8667 ;;		Unchanged: 0/0
  8668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8669 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8670 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8672 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8673 ;;Total ram usage:       12 bytes
  8674 ;; Hardware stack levels used:    1
  8675 ;; Hardware stack levels required when called:    8
  8676 ;; This function calls:
  8677 ;;		___ftpack
  8678 ;; This function is called by:
  8679 ;;		_loop
  8680 ;;		_ftoa
  8681 ;; This function uses a non-reentrant model
  8682 ;;
  8683                           
  8684                           
  8685                           ;psect for function ___ftmul
  8686  05F5                     ___ftmul:	
  8687                           
  8688                           ;incstack = 0
  8689                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8690  05F5  0020               	movlb	0	; select bank0
  8691  05F6  084C               	movf	___ftmul@f1,w
  8692  05F7  00FD               	movwf	125
  8693  05F8  084D               	movf	___ftmul@f1+1,w
  8694  05F9  00FE               	movwf	126
  8695  05FA  084E               	movf	___ftmul@f1+2,w
  8696  05FB  00FF               	movwf	127
  8697  05FC  1003               	clrc
  8698  05FD  0D7E               	rlf	126,w
  8699  05FE  0D7F               	rlf	127,w
  8700  05FF  00FF               	movwf	127
  8701  0600  087F               	movf	127,w
  8702  0601  00D2               	movwf	___ftmul@exp
  8703  0602  0852               	movf	___ftmul@exp,w
  8704  0603  1D03               	btfss	3,2
  8705  0604  2E0C               	goto	l4093
  8706  0605  3000               	movlw	0
  8707  0606  00CC               	movwf	?___ftmul
  8708  0607  3000               	movlw	0
  8709  0608  00CD               	movwf	?___ftmul+1
  8710  0609  3000               	movlw	0
  8711  060A  00CE               	movwf	?___ftmul+2
  8712  060B  0008               	return
  8713  060C                     l4093:	
  8714  060C  084F               	movf	___ftmul@f2,w
  8715  060D  00FD               	movwf	125
  8716  060E  0850               	movf	___ftmul@f2+1,w
  8717  060F  00FE               	movwf	126
  8718  0610  0851               	movf	___ftmul@f2+2,w
  8719  0611  00FF               	movwf	127
  8720  0612  1003               	clrc
  8721  0613  0D7E               	rlf	126,w
  8722  0614  0D7F               	rlf	127,w
  8723  0615  00FF               	movwf	127
  8724  0616  087F               	movf	127,w
  8725  0617  00D7               	movwf	___ftmul@sign
  8726  0618  0857               	movf	___ftmul@sign,w
  8727  0619  1D03               	btfss	3,2
  8728  061A  2E22               	goto	l4099
  8729  061B  3000               	movlw	0
  8730  061C  00CC               	movwf	?___ftmul
  8731  061D  3000               	movlw	0
  8732  061E  00CD               	movwf	?___ftmul+1
  8733  061F  3000               	movlw	0
  8734  0620  00CE               	movwf	?___ftmul+2
  8735  0621  0008               	return
  8736  0622                     l4099:	
  8737  0622  0857               	movf	___ftmul@sign,w
  8738  0623  3E7B               	addlw	123
  8739  0624  00FF               	movwf	127
  8740  0625  087F               	movf	127,w
  8741  0626  07D2               	addwf	___ftmul@exp,f
  8742  0627  084C               	movf	___ftmul@f1,w
  8743  0628  00FD               	movwf	125
  8744  0629  084D               	movf	___ftmul@f1+1,w
  8745  062A  00FE               	movwf	126
  8746  062B  084E               	movf	___ftmul@f1+2,w
  8747  062C  00FF               	movwf	127
  8748  062D  3010               	movlw	16
  8749  062E                     u4545:	
  8750  062E  36FF               	lsrf	127,f
  8751  062F  0CFE               	rrf	126,f
  8752  0630  0CFD               	rrf	125,f
  8753  0631  0B89               	decfsz	9,f
  8754  0632  2E2E               	goto	u4545
  8755  0633  087D               	movf	125,w
  8756  0634  00FF               	movwf	127
  8757  0635  087F               	movf	127,w
  8758  0636  00D7               	movwf	___ftmul@sign
  8759  0637  084F               	movf	___ftmul@f2,w
  8760  0638  00FD               	movwf	125
  8761  0639  0850               	movf	___ftmul@f2+1,w
  8762  063A  00FE               	movwf	126
  8763  063B  0851               	movf	___ftmul@f2+2,w
  8764  063C  00FF               	movwf	127
  8765  063D  3010               	movlw	16
  8766  063E                     u4555:	
  8767  063E  36FF               	lsrf	127,f
  8768  063F  0CFE               	rrf	126,f
  8769  0640  0CFD               	rrf	125,f
  8770  0641  0B89               	decfsz	9,f
  8771  0642  2E3E               	goto	u4555
  8772  0643  087D               	movf	125,w
  8773  0644  00FF               	movwf	127
  8774  0645  087F               	movf	127,w
  8775  0646  06D7               	xorwf	___ftmul@sign,f
  8776  0647  3080               	movlw	128
  8777  0648  00FF               	movwf	127
  8778  0649  087F               	movf	127,w
  8779  064A  05D7               	andwf	___ftmul@sign,f
  8780  064B  17CD               	bsf	___ftmul@f1+1,7
  8781  064C  17D0               	bsf	___ftmul@f2+1,7
  8782  064D  30FF               	movlw	255
  8783  064E  05CF               	andwf	___ftmul@f2,f
  8784  064F  30FF               	movlw	255
  8785  0650  05D0               	andwf	___ftmul@f2+1,f
  8786  0651  3000               	movlw	0
  8787  0652  05D1               	andwf	___ftmul@f2+2,f
  8788  0653  3000               	movlw	0
  8789  0654  00D3               	movwf	___ftmul@f3_as_product
  8790  0655  3000               	movlw	0
  8791  0656  00D4               	movwf	___ftmul@f3_as_product+1
  8792  0657  3000               	movlw	0
  8793  0658  00D5               	movwf	___ftmul@f3_as_product+2
  8794  0659  3007               	movlw	7
  8795  065A  00FF               	movwf	127
  8796  065B  087F               	movf	127,w
  8797  065C  00D6               	movwf	___ftmul@cntr
  8798  065D                     l4115:	
  8799  065D  1C4C               	btfss	___ftmul@f1,0
  8800  065E  2E65               	goto	l4119
  8801  065F  084F               	movf	___ftmul@f2,w
  8802  0660  07D3               	addwf	___ftmul@f3_as_product,f
  8803  0661  0850               	movf	___ftmul@f2+1,w
  8804  0662  3DD4               	addwfc	___ftmul@f3_as_product+1,f
  8805  0663  0851               	movf	___ftmul@f2+2,w
  8806  0664  3DD5               	addwfc	___ftmul@f3_as_product+2,f
  8807  0665                     l4119:	
  8808  0665  3001               	movlw	1
  8809  0666                     u4575:	
  8810  0666  36CE               	lsrf	___ftmul@f1+2,f
  8811  0667  0CCD               	rrf	___ftmul@f1+1,f
  8812  0668  0CCC               	rrf	___ftmul@f1,f
  8813  0669  0B89               	decfsz	9,f
  8814  066A  2E66               	goto	u4575
  8815  066B  3001               	movlw	1
  8816  066C                     u4585:	
  8817  066C  35CF               	lslf	___ftmul@f2,f
  8818  066D  0DD0               	rlf	___ftmul@f2+1,f
  8819  066E  0DD1               	rlf	___ftmul@f2+2,f
  8820  066F  0B89               	decfsz	9,f
  8821  0670  2E6C               	goto	u4585
  8822  0671  3001               	movlw	1
  8823  0672  02D6               	subwf	___ftmul@cntr,f
  8824  0673  1D03               	btfss	3,2
  8825  0674  2E5D               	goto	l4115
  8826  0675  3009               	movlw	9
  8827  0676  00FF               	movwf	127
  8828  0677  087F               	movf	127,w
  8829  0678  00D6               	movwf	___ftmul@cntr
  8830  0679                     l4127:	
  8831  0679  1C4C               	btfss	___ftmul@f1,0
  8832  067A  2E81               	goto	l4131
  8833  067B  084F               	movf	___ftmul@f2,w
  8834  067C  07D3               	addwf	___ftmul@f3_as_product,f
  8835  067D  0850               	movf	___ftmul@f2+1,w
  8836  067E  3DD4               	addwfc	___ftmul@f3_as_product+1,f
  8837  067F  0851               	movf	___ftmul@f2+2,w
  8838  0680  3DD5               	addwfc	___ftmul@f3_as_product+2,f
  8839  0681                     l4131:	
  8840  0681  3001               	movlw	1
  8841  0682                     u4615:	
  8842  0682  36CE               	lsrf	___ftmul@f1+2,f
  8843  0683  0CCD               	rrf	___ftmul@f1+1,f
  8844  0684  0CCC               	rrf	___ftmul@f1,f
  8845  0685  0B89               	decfsz	9,f
  8846  0686  2E82               	goto	u4615
  8847  0687  3001               	movlw	1
  8848  0688                     u4625:	
  8849  0688  36D5               	lsrf	___ftmul@f3_as_product+2,f
  8850  0689  0CD4               	rrf	___ftmul@f3_as_product+1,f
  8851  068A  0CD3               	rrf	___ftmul@f3_as_product,f
  8852  068B  0B89               	decfsz	9,f
  8853  068C  2E88               	goto	u4625
  8854  068D  3001               	movlw	1
  8855  068E  02D6               	subwf	___ftmul@cntr,f
  8856  068F  1D03               	btfss	3,2
  8857  0690  2E79               	goto	l4127
  8858  0691  0853               	movf	___ftmul@f3_as_product,w
  8859  0692  00A7               	movwf	___ftpack@arg
  8860  0693  0854               	movf	___ftmul@f3_as_product+1,w
  8861  0694  00A8               	movwf	___ftpack@arg+1
  8862  0695  0855               	movf	___ftmul@f3_as_product+2,w
  8863  0696  00A9               	movwf	___ftpack@arg+2
  8864  0697  0852               	movf	___ftmul@exp,w
  8865  0698  00FF               	movwf	127
  8866  0699  087F               	movf	127,w
  8867  069A  00AA               	movwf	___ftpack@exp
  8868  069B  0857               	movf	___ftmul@sign,w
  8869  069C  00FF               	movwf	127
  8870  069D  087F               	movf	127,w
  8871  069E  00AB               	movwf	___ftpack@sign
  8872  069F  318D  2554         	fcall	___ftpack
  8873  06A1  0020               	movlb	0	; select bank0
  8874  06A2  0827               	movf	?___ftpack,w
  8875  06A3  00CC               	movwf	?___ftmul
  8876  06A4  0828               	movf	?___ftpack+1,w
  8877  06A5  00CD               	movwf	?___ftmul+1
  8878  06A6  0829               	movf	?___ftpack+2,w
  8879  06A7  00CE               	movwf	?___ftmul+2
  8880  06A8  0008               	return
  8881  06A9                     __end_of___ftmul:	
  8882                           
  8883                           	psect	text38
  8884  0B72                     __ptext38:	
  8885 ;; *************** function ___ftge *****************
  8886 ;; Defined at:
  8887 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8888 ;; Parameters:    Size  Location     Type
  8889 ;;  ff1             3    7[BANK0 ] float 
  8890 ;;  ff2             3   10[BANK0 ] float 
  8891 ;; Auto vars:     Size  Location     Type
  8892 ;;		None
  8893 ;; Return value:  Size  Location     Type
  8894 ;;		None               void
  8895 ;; Registers used:
  8896 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8897 ;; Tracked objects:
  8898 ;;		On entry : 0/0
  8899 ;;		On exit  : 0/0
  8900 ;;		Unchanged: 0/0
  8901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8902 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8905 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8906 ;;Total ram usage:        6 bytes
  8907 ;; Hardware stack levels used:    1
  8908 ;; Hardware stack levels required when called:    7
  8909 ;; This function calls:
  8910 ;;		Nothing
  8911 ;; This function is called by:
  8912 ;;		_ftoa
  8913 ;; This function uses a non-reentrant model
  8914 ;;
  8915                           
  8916                           
  8917                           ;psect for function ___ftge
  8918  0B72                     ___ftge:	
  8919                           
  8920                           ;incstack = 0
  8921                           ; Regs used in ___ftge: [wreg+status,2+status,0+btemp+9-btemp+11]
  8922  0B72  0020               	movlb	0	; select bank0
  8923  0B73  1FA9               	btfss	___ftge@ff1+2,7
  8924  0B74  2B89               	goto	l4071
  8925  0B75  0927               	comf	___ftge@ff1,w
  8926  0B76  00FD               	movwf	125
  8927  0B77  0928               	comf	___ftge@ff1+1,w
  8928  0B78  00FE               	movwf	126
  8929  0B79  0929               	comf	___ftge@ff1+2,w
  8930  0B7A  00FF               	movwf	127
  8931  0B7B  0AFD               	incf	125,f
  8932  0B7C  1903               	skipnz
  8933  0B7D  0AFE               	incf	126,f
  8934  0B7E  1903               	skipnz
  8935  0B7F  0AFF               	incf	127,f
  8936  0B80  3000               	movlw	0
  8937  0B81  077D               	addwf	125,w
  8938  0B82  00A7               	movwf	___ftge@ff1
  8939  0B83  3000               	movlw	0
  8940  0B84  3D7E               	addwfc	126,w
  8941  0B85  00A8               	movwf	___ftge@ff1+1
  8942  0B86  3080               	movlw	128
  8943  0B87  3D7F               	addwfc	127,w
  8944  0B88  00A9               	movwf	___ftge@ff1+2
  8945  0B89                     l4071:	
  8946  0B89  1FAC               	btfss	___ftge@ff2+2,7
  8947  0B8A  2B9F               	goto	l4075
  8948  0B8B  092A               	comf	___ftge@ff2,w
  8949  0B8C  00FD               	movwf	125
  8950  0B8D  092B               	comf	___ftge@ff2+1,w
  8951  0B8E  00FE               	movwf	126
  8952  0B8F  092C               	comf	___ftge@ff2+2,w
  8953  0B90  00FF               	movwf	127
  8954  0B91  0AFD               	incf	125,f
  8955  0B92  1903               	skipnz
  8956  0B93  0AFE               	incf	126,f
  8957  0B94  1903               	skipnz
  8958  0B95  0AFF               	incf	127,f
  8959  0B96  3000               	movlw	0
  8960  0B97  077D               	addwf	125,w
  8961  0B98  00AA               	movwf	___ftge@ff2
  8962  0B99  3000               	movlw	0
  8963  0B9A  3D7E               	addwfc	126,w
  8964  0B9B  00AB               	movwf	___ftge@ff2+1
  8965  0B9C  3080               	movlw	128
  8966  0B9D  3D7F               	addwfc	127,w
  8967  0B9E  00AC               	movwf	___ftge@ff2+2
  8968  0B9F                     l4075:	
  8969  0B9F  3080               	movlw	128
  8970  0BA0  06A9               	xorwf	___ftge@ff1+2,f
  8971  0BA1  3080               	movlw	128
  8972  0BA2  06AC               	xorwf	___ftge@ff2+2,f
  8973  0BA3  082C               	movf	___ftge@ff2+2,w
  8974  0BA4  0229               	subwf	___ftge@ff1+2,w
  8975  0BA5  1D03               	skipz
  8976  0BA6  0008               	return
  8977  0BA7  082B               	movf	___ftge@ff2+1,w
  8978  0BA8  0228               	subwf	___ftge@ff1+1,w
  8979  0BA9  1D03               	skipz
  8980  0BAA  0008               	return
  8981  0BAB  082A               	movf	___ftge@ff2,w
  8982  0BAC  0227               	subwf	___ftge@ff1,w
  8983  0BAD  0008               	return
  8984  0BAE                     __end_of___ftge:	
  8985                           
  8986                           	psect	text39
  8987  0F5B                     __ptext39:	
  8988 ;; *************** function _getADCValue *****************
  8989 ;; Defined at:
  8990 ;;		line 31 in file "main.c"
  8991 ;; Parameters:    Size  Location     Type
  8992 ;;  channel         1    wreg     unsigned char 
  8993 ;; Auto vars:     Size  Location     Type
  8994 ;;  channel         1   39[BANK0 ] unsigned char 
  8995 ;;  adcSum          3   41[BANK0 ] float 
  8996 ;;  adcLoop         1   40[BANK0 ] unsigned char 
  8997 ;; Return value:  Size  Location     Type
  8998 ;;                  3   35[BANK0 ] float 
  8999 ;; Registers used:
  9000 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9001 ;; Tracked objects:
  9002 ;;		On entry : 0/0
  9003 ;;		On exit  : 0/0
  9004 ;;		Unchanged: 0/0
  9005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9006 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9007 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9008 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9009 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9010 ;;Total ram usage:        9 bytes
  9011 ;; Hardware stack levels used:    1
  9012 ;; Hardware stack levels required when called:    9
  9013 ;; This function calls:
  9014 ;;		___awtoft
  9015 ;;		___ftadd
  9016 ;;		___ftdiv
  9017 ;;		_sleepMs
  9018 ;; This function is called by:
  9019 ;;		_loop
  9020 ;; This function uses a non-reentrant model
  9021 ;;
  9022                           
  9023                           
  9024                           ;psect for function _getADCValue
  9025  0F5B                     _getADCValue:	
  9026                           
  9027                           ;incstack = 0
  9028                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2-btemp+0+btemp+9-btemp+11+pclath+cstack
      +                          ]
  9029                           ;getADCValue@channel stored from wreg
  9030  0F5B  0020               	movlb	0	; select bank0
  9031  0F5C  00C7               	movwf	getADCValue@channel
  9032                           
  9033                           ;main.c: 34: float adcSum = 0;
  9034  0F5D  3000               	movlw	0
  9035  0F5E  00C9               	movwf	getADCValue@adcSum
  9036  0F5F  3000               	movlw	0
  9037  0F60  00CA               	movwf	getADCValue@adcSum+1
  9038  0F61  3000               	movlw	0
  9039  0F62  00CB               	movwf	getADCValue@adcSum+2
  9040                           
  9041                           ;main.c: 35: unsigned char adcLoop = 111;
  9042  0F63  306F               	movlw	111
  9043  0F64  00FF               	movwf	127
  9044  0F65  087F               	movf	127,w
  9045  0F66  00C8               	movwf	getADCValue@adcLoop
  9046                           
  9047                           ;main.c: 37: ADCON0bits.CHS = channel;
  9048  0F67  0847               	movf	getADCValue@channel,w
  9049  0F68  00C6               	movwf	??_getADCValue
  9050  0F69  0DC6               	rlf	??_getADCValue,f
  9051  0F6A  0DC6               	rlf	??_getADCValue,f
  9052  0F6B  0021               	movlb	1	; select bank1
  9053  0F6C  081D               	movf	29,w	;volatile
  9054  0F6D  0020               	movlb	0	; select bank0
  9055  0F6E  0646               	xorwf	??_getADCValue,w
  9056  0F6F  3903               	andlw	-253
  9057  0F70  0646               	xorwf	??_getADCValue,w
  9058  0F71  0021               	movlb	1	; select bank1
  9059  0F72  009D               	movwf	29	;volatile
  9060                           
  9061                           ;main.c: 38: FVRCONbits.FVREN = 1;
  9062  0F73  0022               	movlb	2	; select bank2
  9063  0F74  1797               	bsf	23,7	;volatile
  9064                           
  9065                           ;main.c: 39: ADCON0bits.ADON = 1;
  9066  0F75  0021               	movlb	1	; select bank1
  9067  0F76  141D               	bsf	29,0	;volatile
  9068                           
  9069                           ;main.c: 41: sleepMs(1);
  9070  0F77  3001               	movlw	1
  9071  0F78  00F0               	movwf	sleepMs@milliseconds
  9072  0F79  3000               	movlw	0
  9073  0F7A  00F1               	movwf	sleepMs@milliseconds+1
  9074  0F7B  318A  2278  318F   	fcall	_sleepMs
  9075  0F7E                     l4431:	
  9076                           ;main.c: 43: while (adcLoop--){
  9077                           
  9078  0F7E  3001               	movlw	1
  9079  0F7F  0020               	movlb	0	; select bank0
  9080  0F80  02C8               	subwf	getADCValue@adcLoop,f
  9081  0F81  0A48               	incf	getADCValue@adcLoop,w
  9082  0F82  1903               	btfsc	3,2
  9083  0F83  2FB7               	goto	l178
  9084                           
  9085                           ;main.c: 45: ADCON0bits.ADGO = 1;
  9086  0F84  0021               	movlb	1	; select bank1
  9087  0F85  149D               	bsf	29,1	;volatile
  9088  0F86                     l4427:	
  9089                           ;main.c: 47: while (ADCON0bits.ADGO){
  9090                           
  9091  0F86  0021               	movlb	1	; select bank1
  9092  0F87  1C9D               	btfss	29,1	;volatile
  9093  0F88  2F91               	goto	l4429
  9094                           
  9095                           ;main.c: 48: sleepMs(1);
  9096  0F89  3001               	movlw	1
  9097  0F8A  00F0               	movwf	sleepMs@milliseconds
  9098  0F8B  3000               	movlw	0
  9099  0F8C  00F1               	movwf	sleepMs@milliseconds+1
  9100  0F8D  318A  2278  318F   	fcall	_sleepMs
  9101  0F90  2F86               	goto	l4427
  9102  0F91                     l4429:	
  9103                           
  9104                           ;main.c: 49: };main.c: 51: adcSum+= (ADRESL | (ADRESH << 8));
  9105  0F91  081C               	movf	28,w	;volatile
  9106  0F92  00FE               	movwf	126
  9107  0F93  01FF               	clrf	127
  9108  0F94  087E               	movf	126,w
  9109  0F95  00FF               	movwf	127
  9110  0F96  01FE               	clrf	126
  9111  0F97  087E               	movf	126,w
  9112  0F98  041B               	iorwf	27,w	;volatile
  9113  0F99  00F0               	movwf	___awtoft@c
  9114  0F9A  087F               	movf	127,w
  9115  0F9B  00F1               	movwf	___awtoft@c+1
  9116  0F9C  3189  21DA  318F   	fcall	___awtoft
  9117  0F9F  0870               	movf	?___awtoft,w
  9118  0FA0  0020               	movlb	0	; select bank0
  9119  0FA1  00AC               	movwf	___ftadd@f1
  9120  0FA2  0871               	movf	?___awtoft+1,w
  9121  0FA3  00AD               	movwf	___ftadd@f1+1
  9122  0FA4  0872               	movf	?___awtoft+2,w
  9123  0FA5  00AE               	movwf	___ftadd@f1+2
  9124  0FA6  0849               	movf	getADCValue@adcSum,w
  9125  0FA7  00AF               	movwf	___ftadd@f2
  9126  0FA8  084A               	movf	getADCValue@adcSum+1,w
  9127  0FA9  00B0               	movwf	___ftadd@f2+1
  9128  0FAA  084B               	movf	getADCValue@adcSum+2,w
  9129  0FAB  00B1               	movwf	___ftadd@f2+2
  9130  0FAC  3183  232B  318F   	fcall	___ftadd
  9131  0FAF  0020               	movlb	0	; select bank0
  9132  0FB0  082C               	movf	?___ftadd,w
  9133  0FB1  00C9               	movwf	getADCValue@adcSum
  9134  0FB2  082D               	movf	?___ftadd+1,w
  9135  0FB3  00CA               	movwf	getADCValue@adcSum+1
  9136  0FB4  082E               	movf	?___ftadd+2,w
  9137  0FB5  00CB               	movwf	getADCValue@adcSum+2
  9138  0FB6  2F7E               	goto	l4431
  9139  0FB7                     l178:	
  9140                           
  9141                           ;main.c: 53: };main.c: 55: FVRCONbits.FVREN = 0;
  9142  0FB7  0022               	movlb	2	; select bank2
  9143  0FB8  1397               	bcf	23,7	;volatile
  9144                           
  9145                           ;main.c: 56: ADCON0bits.ADON = 0;
  9146  0FB9  0021               	movlb	1	; select bank1
  9147  0FBA  101D               	bcf	29,0	;volatile
  9148                           
  9149                           ;main.c: 59: adcSum/= 111;
  9150  0FBB  3000               	movlw	0
  9151  0FBC  0020               	movlb	0	; select bank0
  9152  0FBD  00B6               	movwf	___ftdiv@f2
  9153  0FBE  30DE               	movlw	222
  9154  0FBF  00B7               	movwf	___ftdiv@f2+1
  9155  0FC0  3042               	movlw	66
  9156  0FC1  00B8               	movwf	___ftdiv@f2+2
  9157  0FC2  0849               	movf	getADCValue@adcSum,w
  9158  0FC3  00B9               	movwf	___ftdiv@f1
  9159  0FC4  084A               	movf	getADCValue@adcSum+1,w
  9160  0FC5  00BA               	movwf	___ftdiv@f1+1
  9161  0FC6  084B               	movf	getADCValue@adcSum+2,w
  9162  0FC7  00BB               	movwf	___ftdiv@f1+2
  9163  0FC8  3187  2753  318F   	fcall	___ftdiv
  9164  0FCB  0020               	movlb	0	; select bank0
  9165  0FCC  0836               	movf	?___ftdiv,w
  9166  0FCD  00C9               	movwf	getADCValue@adcSum
  9167  0FCE  0837               	movf	?___ftdiv+1,w
  9168  0FCF  00CA               	movwf	getADCValue@adcSum+1
  9169  0FD0  0838               	movf	?___ftdiv+2,w
  9170  0FD1  00CB               	movwf	getADCValue@adcSum+2
  9171                           
  9172                           ;main.c: 62: if (ADCON1bits.ADPREF == 0b11){
  9173  0FD2  0021               	movlb	1	; select bank1
  9174  0FD3  081E               	movf	30,w	;volatile
  9175  0FD4  3903               	andlw	3
  9176  0FD5  3A03               	xorlw	3
  9177  0FD6  1903               	btfsc	3,2
  9178  0FD7  2FF1               	goto	l4443
  9179  0FD8  2FF8               	goto	l4445
  9180  0FD9                     l4439:	
  9181                           ;main.c: 64: case 0b10:
  9182                           
  9183                           ;main.c: 63: switch (FVRCONbits.ADFVR){
  9184                           
  9185                           
  9186                           ;main.c: 65: adcSum/= 500;
  9187  0FD9  3000               	movlw	0
  9188  0FDA  0020               	movlb	0	; select bank0
  9189  0FDB  00B6               	movwf	___ftdiv@f2
  9190  0FDC  30FA               	movlw	250
  9191  0FDD  00B7               	movwf	___ftdiv@f2+1
  9192  0FDE  3043               	movlw	67
  9193  0FDF  00B8               	movwf	___ftdiv@f2+2
  9194  0FE0  0849               	movf	getADCValue@adcSum,w
  9195  0FE1  00B9               	movwf	___ftdiv@f1
  9196  0FE2  084A               	movf	getADCValue@adcSum+1,w
  9197  0FE3  00BA               	movwf	___ftdiv@f1+1
  9198  0FE4  084B               	movf	getADCValue@adcSum+2,w
  9199  0FE5  00BB               	movwf	___ftdiv@f1+2
  9200  0FE6  3187  2753  318F   	fcall	___ftdiv
  9201  0FE9  0020               	movlb	0	; select bank0
  9202  0FEA  0836               	movf	?___ftdiv,w
  9203  0FEB  00C9               	movwf	getADCValue@adcSum
  9204  0FEC  0837               	movf	?___ftdiv+1,w
  9205  0FED  00CA               	movwf	getADCValue@adcSum+1
  9206  0FEE  0838               	movf	?___ftdiv+2,w
  9207  0FEF  00CB               	movwf	getADCValue@adcSum+2
  9208                           
  9209                           ;main.c: 67: }
  9210                           
  9211                           ;main.c: 66: break;
  9212  0FF0  2FF8               	goto	l4445
  9213  0FF1                     l4443:	
  9214  0FF1  0022               	movlb	2	; select bank2
  9215  0FF2  0817               	movf	23,w	;volatile
  9216  0FF3  3903               	andlw	3
  9217                           
  9218                           ; Switch size 1, requested type "space"
  9219                           ; Number of cases is 1, Range of values is 2 to 2
  9220                           ; switch strategies available:
  9221                           ; Name         Instructions Cycles
  9222                           ; simple_byte            4     3 (average)
  9223                           ; direct_byte           11     9 (fixed)
  9224                           ; jumptable            263     9 (fixed)
  9225                           ;	Chosen strategy is simple_byte
  9226  0FF4  3A02               	xorlw	2	; case 2
  9227  0FF5  1903               	skipnz
  9228  0FF6  2FD9               	goto	l4439
  9229  0FF7  2FF8               	goto	l4445
  9230  0FF8                     l4445:	
  9231                           
  9232                           ;main.c: 68: };main.c: 71: return adcSum;
  9233  0FF8  0020               	movlb	0	; select bank0
  9234  0FF9  0849               	movf	getADCValue@adcSum,w
  9235  0FFA  00C3               	movwf	?_getADCValue
  9236  0FFB  084A               	movf	getADCValue@adcSum+1,w
  9237  0FFC  00C4               	movwf	?_getADCValue+1
  9238  0FFD  084B               	movf	getADCValue@adcSum+2,w
  9239  0FFE  00C5               	movwf	?_getADCValue+2
  9240  0FFF  0008               	return
  9241  1000                     __end_of_getADCValue:	
  9242                           
  9243                           	psect	text40
  9244  0A78                     __ptext40:	
  9245 ;; *************** function _sleepMs *****************
  9246 ;; Defined at:
  9247 ;;		line 37 in file "interface.c"
  9248 ;; Parameters:    Size  Location     Type
  9249 ;;  milliseconds    2    0[COMMON] unsigned int 
  9250 ;; Auto vars:     Size  Location     Type
  9251 ;;  wdtps           1    3[COMMON] unsigned char 
  9252 ;; Return value:  Size  Location     Type
  9253 ;;                  1    wreg      void 
  9254 ;; Registers used:
  9255 ;;		wreg, status,2, status,0, btemp+10, btemp+11, pclath, cstack
  9256 ;; Tracked objects:
  9257 ;;		On entry : 0/0
  9258 ;;		On exit  : 0/0
  9259 ;;		Unchanged: 0/0
  9260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9261 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9262 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9263 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9264 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9265 ;;Total ram usage:        4 bytes
  9266 ;; Hardware stack levels used:    1
  9267 ;; Hardware stack levels required when called:    8
  9268 ;; This function calls:
  9269 ;;		_resetWDT
  9270 ;; This function is called by:
  9271 ;;		_getADCValue
  9272 ;;		_sleepListren
  9273 ;;		_nrf24l01SendPacket
  9274 ;;		_hcsr04GetAerage
  9275 ;; This function uses a non-reentrant model
  9276 ;;
  9277                           
  9278                           
  9279                           ;psect for function _sleepMs
  9280  0A78                     _sleepMs:	
  9281                           
  9282                           ;interface.c: 39: unsigned char wdtps;;interface.c: 40: for (wdtps = 0; wdtps <= 0b10010
      +                          ; wdtps++){
  9283                           
  9284                           ;incstack = 0
  9285                           ; Regs used in _sleepMs: [wreg+status,2+status,0+btemp+10+btemp+11+pclath+cstack]
  9286  0A78  01F3               	clrf	sleepMs@wdtps
  9287  0A79  3013               	movlw	19
  9288  0A7A  0273               	subwf	sleepMs@wdtps,w
  9289  0A7B  1803               	btfsc	3,0
  9290  0A7C  2AA1               	goto	l3897
  9291  0A7D                     l3881:	
  9292                           
  9293                           ;interface.c: 41: if ((milliseconds >> wdtps) & 0b1){
  9294  0A7D  0871               	movf	sleepMs@milliseconds+1,w
  9295  0A7E  00FF               	movwf	127
  9296  0A7F  0870               	movf	sleepMs@milliseconds,w
  9297  0A80  00FE               	movwf	126
  9298  0A81  0A73               	incf	sleepMs@wdtps,w
  9299  0A82  2A85               	goto	u4164
  9300  0A83                     u4165:	
  9301  0A83  36FF               	lsrf	127,f
  9302  0A84  0CFE               	rrf	126,f
  9303  0A85                     u4164:	
  9304  0A85  0B89               	decfsz	9,f
  9305  0A86  2A83               	goto	u4165
  9306  0A87  1C7E               	btfss	126,0
  9307  0A88  2A99               	goto	l3893
  9308  0A89                     l3883:	
  9309                           ;interface.c: 42: START_SLEEP:
  9310                           
  9311                           
  9312                           ;interface.c: 43: WDTCONbits.WDTPS = wdtps;
  9313  0A89  0873               	movf	sleepMs@wdtps,w
  9314  0A8A  00F2               	movwf	??_sleepMs
  9315  0A8B  0DF2               	rlf	??_sleepMs,f
  9316  0A8C  0021               	movlb	1	; select bank1
  9317  0A8D  0817               	movf	23,w	;volatile
  9318  0A8E  0672               	xorwf	??_sleepMs,w
  9319  0A8F  39C1               	andlw	-63
  9320  0A90  0672               	xorwf	??_sleepMs,w
  9321  0A91  0097               	movwf	23	;volatile
  9322  0A92  0063               	sleep	;# 
  9323                           
  9324                           ;interface.c: 45: __nop();
  9325  0A93  0000               	nop
  9326                           
  9327                           ;interface.c: 46: __nop();
  9328  0A94  0000               	nop
  9329                           
  9330                           ;interface.c: 48: if( STATUSbits.nTO || STATUSbits.nPD){
  9331  0A95  0020               	movlb	0	; select bank0
  9332  0A96  1E03               	btfss	3,4	;volatile
  9333  0A97  1983               	btfsc	3,3	;volatile
  9334                           
  9335                           ;interface.c: 49: goto START_SLEEP;
  9336  0A98  2A89               	goto	l3883
  9337  0A99                     l3893:	
  9338  0A99  3001               	movlw	1
  9339  0A9A  00FF               	movwf	127
  9340  0A9B  087F               	movf	127,w
  9341  0A9C  07F3               	addwf	sleepMs@wdtps,f
  9342  0A9D  3013               	movlw	19
  9343  0A9E  0273               	subwf	sleepMs@wdtps,w
  9344  0A9F  1C03               	skipc
  9345  0AA0  2A7D               	goto	l3881
  9346  0AA1                     l3897:	
  9347                           
  9348                           ;interface.c: 50: };interface.c: 51: };interface.c: 52: };interface.c: 54: resetWDT();
  9349  0AA1  3188  201D         	fcall	_resetWDT
  9350  0AA3  0008               	return
  9351  0AA4                     __end_of_sleepMs:	
  9352                           
  9353                           	psect	text41
  9354  081D                     __ptext41:	
  9355 ;; *************** function _resetWDT *****************
  9356 ;; Defined at:
  9357 ;;		line 32 in file "interface.c"
  9358 ;; Parameters:    Size  Location     Type
  9359 ;;		None
  9360 ;; Auto vars:     Size  Location     Type
  9361 ;;		None
  9362 ;; Return value:  Size  Location     Type
  9363 ;;                  1    wreg      void 
  9364 ;; Registers used:
  9365 ;;		wreg, status,2, status,0
  9366 ;; Tracked objects:
  9367 ;;		On entry : 0/0
  9368 ;;		On exit  : 0/0
  9369 ;;		Unchanged: 0/0
  9370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9375 ;;Total ram usage:        0 bytes
  9376 ;; Hardware stack levels used:    1
  9377 ;; Hardware stack levels required when called:    7
  9378 ;; This function calls:
  9379 ;;		Nothing
  9380 ;; This function is called by:
  9381 ;;		_sleepMs
  9382 ;; This function uses a non-reentrant model
  9383 ;;
  9384                           
  9385                           
  9386                           ;psect for function _resetWDT
  9387  081D                     _resetWDT:	
  9388                           
  9389                           ;interface.c: 33: WDTCONbits.WDTPS = 0b01100;
  9390                           
  9391                           ;incstack = 0
  9392                           ; Regs used in _resetWDT: [wreg+status,2+status,0]
  9393  081D  0021               	movlb	1	; select bank1
  9394  081E  0817               	movf	23,w	;volatile
  9395  081F  39C1               	andlw	-63
  9396  0820  3818               	iorlw	24
  9397  0821  0097               	movwf	23	;volatile
  9398  0822  0064               	clrwdt	;# 
  9399  0823  0008               	return
  9400  0824                     __end_of_resetWDT:	
  9401                           
  9402                           	psect	text42
  9403  0753                     __ptext42:	
  9404 ;; *************** function ___ftdiv *****************
  9405 ;; Defined at:
  9406 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  9407 ;; Parameters:    Size  Location     Type
  9408 ;;  f2              3   22[BANK0 ] float 
  9409 ;;  f1              3   25[BANK0 ] float 
  9410 ;; Auto vars:     Size  Location     Type
  9411 ;;  f3              3   30[BANK0 ] float 
  9412 ;;  sign            1   34[BANK0 ] unsigned char 
  9413 ;;  exp             1   33[BANK0 ] unsigned char 
  9414 ;;  cntr            1   29[BANK0 ] unsigned char 
  9415 ;; Return value:  Size  Location     Type
  9416 ;;                  3   22[BANK0 ] float 
  9417 ;; Registers used:
  9418 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9419 ;; Tracked objects:
  9420 ;;		On entry : 0/0
  9421 ;;		On exit  : 0/0
  9422 ;;		Unchanged: 0/0
  9423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9424 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9425 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9426 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9427 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9428 ;;Total ram usage:       13 bytes
  9429 ;; Hardware stack levels used:    1
  9430 ;; Hardware stack levels required when called:    8
  9431 ;; This function calls:
  9432 ;;		___ftpack
  9433 ;; This function is called by:
  9434 ;;		_getADCValue
  9435 ;;		_loop
  9436 ;;		_hcsr04GetAerage
  9437 ;; This function uses a non-reentrant model
  9438 ;;
  9439                           
  9440                           
  9441                           ;psect for function ___ftdiv
  9442  0753                     ___ftdiv:	
  9443                           
  9444                           ;incstack = 0
  9445                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9446  0753  0020               	movlb	0	; select bank0
  9447  0754  0839               	movf	___ftdiv@f1,w
  9448  0755  00FD               	movwf	125
  9449  0756  083A               	movf	___ftdiv@f1+1,w
  9450  0757  00FE               	movwf	126
  9451  0758  083B               	movf	___ftdiv@f1+2,w
  9452  0759  00FF               	movwf	127
  9453  075A  1003               	clrc
  9454  075B  0D7E               	rlf	126,w
  9455  075C  0D7F               	rlf	127,w
  9456  075D  00FF               	movwf	127
  9457  075E  087F               	movf	127,w
  9458  075F  00C1               	movwf	___ftdiv@exp
  9459  0760  0841               	movf	___ftdiv@exp,w
  9460  0761  1D03               	btfss	3,2
  9461  0762  2F6A               	goto	l4363
  9462  0763  3000               	movlw	0
  9463  0764  00B6               	movwf	?___ftdiv
  9464  0765  3000               	movlw	0
  9465  0766  00B7               	movwf	?___ftdiv+1
  9466  0767  3000               	movlw	0
  9467  0768  00B8               	movwf	?___ftdiv+2
  9468  0769  0008               	return
  9469  076A                     l4363:	
  9470  076A  0836               	movf	___ftdiv@f2,w
  9471  076B  00FD               	movwf	125
  9472  076C  0837               	movf	___ftdiv@f2+1,w
  9473  076D  00FE               	movwf	126
  9474  076E  0838               	movf	___ftdiv@f2+2,w
  9475  076F  00FF               	movwf	127
  9476  0770  1003               	clrc
  9477  0771  0D7E               	rlf	126,w
  9478  0772  0D7F               	rlf	127,w
  9479  0773  00FF               	movwf	127
  9480  0774  087F               	movf	127,w
  9481  0775  00C2               	movwf	___ftdiv@sign
  9482  0776  0842               	movf	___ftdiv@sign,w
  9483  0777  1D03               	btfss	3,2
  9484  0778  2F80               	goto	l4369
  9485  0779  3000               	movlw	0
  9486  077A  00B6               	movwf	?___ftdiv
  9487  077B  3000               	movlw	0
  9488  077C  00B7               	movwf	?___ftdiv+1
  9489  077D  3000               	movlw	0
  9490  077E  00B8               	movwf	?___ftdiv+2
  9491  077F  0008               	return
  9492  0780                     l4369:	
  9493  0780  3000               	movlw	0
  9494  0781  00BE               	movwf	___ftdiv@f3
  9495  0782  3000               	movlw	0
  9496  0783  00BF               	movwf	___ftdiv@f3+1
  9497  0784  3000               	movlw	0
  9498  0785  00C0               	movwf	___ftdiv@f3+2
  9499  0786  3089               	movlw	137
  9500  0787  0742               	addwf	___ftdiv@sign,w
  9501  0788  00BC               	movwf	??___ftdiv
  9502  0789  083C               	movf	??___ftdiv,w
  9503  078A  02C1               	subwf	___ftdiv@exp,f
  9504  078B  0839               	movf	___ftdiv@f1,w
  9505  078C  00FD               	movwf	125
  9506  078D  083A               	movf	___ftdiv@f1+1,w
  9507  078E  00FE               	movwf	126
  9508  078F  083B               	movf	___ftdiv@f1+2,w
  9509  0790  00FF               	movwf	127
  9510  0791  3010               	movlw	16
  9511  0792                     u4935:	
  9512  0792  36FF               	lsrf	127,f
  9513  0793  0CFE               	rrf	126,f
  9514  0794  0CFD               	rrf	125,f
  9515  0795  0B89               	decfsz	9,f
  9516  0796  2F92               	goto	u4935
  9517  0797  087D               	movf	125,w
  9518  0798  00FF               	movwf	127
  9519  0799  087F               	movf	127,w
  9520  079A  00C2               	movwf	___ftdiv@sign
  9521  079B  0836               	movf	___ftdiv@f2,w
  9522  079C  00FD               	movwf	125
  9523  079D  0837               	movf	___ftdiv@f2+1,w
  9524  079E  00FE               	movwf	126
  9525  079F  0838               	movf	___ftdiv@f2+2,w
  9526  07A0  00FF               	movwf	127
  9527  07A1  3010               	movlw	16
  9528  07A2                     u4945:	
  9529  07A2  36FF               	lsrf	127,f
  9530  07A3  0CFE               	rrf	126,f
  9531  07A4  0CFD               	rrf	125,f
  9532  07A5  0B89               	decfsz	9,f
  9533  07A6  2FA2               	goto	u4945
  9534  07A7  087D               	movf	125,w
  9535  07A8  00FF               	movwf	127
  9536  07A9  087F               	movf	127,w
  9537  07AA  06C2               	xorwf	___ftdiv@sign,f
  9538  07AB  3080               	movlw	128
  9539  07AC  00FF               	movwf	127
  9540  07AD  087F               	movf	127,w
  9541  07AE  05C2               	andwf	___ftdiv@sign,f
  9542  07AF  17BA               	bsf	___ftdiv@f1+1,7
  9543  07B0  30FF               	movlw	255
  9544  07B1  05B9               	andwf	___ftdiv@f1,f
  9545  07B2  30FF               	movlw	255
  9546  07B3  05BA               	andwf	___ftdiv@f1+1,f
  9547  07B4  3000               	movlw	0
  9548  07B5  05BB               	andwf	___ftdiv@f1+2,f
  9549  07B6  17B7               	bsf	___ftdiv@f2+1,7
  9550  07B7  30FF               	movlw	255
  9551  07B8  05B6               	andwf	___ftdiv@f2,f
  9552  07B9  30FF               	movlw	255
  9553  07BA  05B7               	andwf	___ftdiv@f2+1,f
  9554  07BB  3000               	movlw	0
  9555  07BC  05B8               	andwf	___ftdiv@f2+2,f
  9556  07BD  3018               	movlw	24
  9557  07BE  00FF               	movwf	127
  9558  07BF  087F               	movf	127,w
  9559  07C0  00BD               	movwf	___ftdiv@cntr
  9560  07C1                     l4387:	
  9561  07C1  3001               	movlw	1
  9562  07C2                     u4955:	
  9563  07C2  35BE               	lslf	___ftdiv@f3,f
  9564  07C3  0DBF               	rlf	___ftdiv@f3+1,f
  9565  07C4  0DC0               	rlf	___ftdiv@f3+2,f
  9566  07C5  0B89               	decfsz	9,f
  9567  07C6  2FC2               	goto	u4955
  9568  07C7  0838               	movf	___ftdiv@f2+2,w
  9569  07C8  023B               	subwf	___ftdiv@f1+2,w
  9570  07C9  1D03               	skipz
  9571  07CA  2FD1               	goto	u4965
  9572  07CB  0837               	movf	___ftdiv@f2+1,w
  9573  07CC  023A               	subwf	___ftdiv@f1+1,w
  9574  07CD  1D03               	skipz
  9575  07CE  2FD1               	goto	u4965
  9576  07CF  0836               	movf	___ftdiv@f2,w
  9577  07D0  0239               	subwf	___ftdiv@f1,w
  9578  07D1                     u4965:	
  9579  07D1  1C03               	skipc
  9580  07D2  2FDA               	goto	l4395
  9581  07D3  0836               	movf	___ftdiv@f2,w
  9582  07D4  02B9               	subwf	___ftdiv@f1,f
  9583  07D5  0837               	movf	___ftdiv@f2+1,w
  9584  07D6  3BBA               	subwfb	___ftdiv@f1+1,f
  9585  07D7  0838               	movf	___ftdiv@f2+2,w
  9586  07D8  3BBB               	subwfb	___ftdiv@f1+2,f
  9587  07D9  143E               	bsf	___ftdiv@f3,0
  9588  07DA                     l4395:	
  9589  07DA  3001               	movlw	1
  9590  07DB                     u4975:	
  9591  07DB  35B9               	lslf	___ftdiv@f1,f
  9592  07DC  0DBA               	rlf	___ftdiv@f1+1,f
  9593  07DD  0DBB               	rlf	___ftdiv@f1+2,f
  9594  07DE  0B89               	decfsz	9,f
  9595  07DF  2FDB               	goto	u4975
  9596  07E0  3001               	movlw	1
  9597  07E1  02BD               	subwf	___ftdiv@cntr,f
  9598  07E2  1D03               	btfss	3,2
  9599  07E3  2FC1               	goto	l4387
  9600  07E4  083E               	movf	___ftdiv@f3,w
  9601  07E5  00A7               	movwf	___ftpack@arg
  9602  07E6  083F               	movf	___ftdiv@f3+1,w
  9603  07E7  00A8               	movwf	___ftpack@arg+1
  9604  07E8  0840               	movf	___ftdiv@f3+2,w
  9605  07E9  00A9               	movwf	___ftpack@arg+2
  9606  07EA  0841               	movf	___ftdiv@exp,w
  9607  07EB  00FF               	movwf	127
  9608  07EC  087F               	movf	127,w
  9609  07ED  00AA               	movwf	___ftpack@exp
  9610  07EE  0842               	movf	___ftdiv@sign,w
  9611  07EF  00FF               	movwf	127
  9612  07F0  087F               	movf	127,w
  9613  07F1  00AB               	movwf	___ftpack@sign
  9614  07F2  318D  2554         	fcall	___ftpack
  9615  07F4  0020               	movlb	0	; select bank0
  9616  07F5  0827               	movf	?___ftpack,w
  9617  07F6  00B6               	movwf	?___ftdiv
  9618  07F7  0828               	movf	?___ftpack+1,w
  9619  07F8  00B7               	movwf	?___ftdiv+1
  9620  07F9  0829               	movf	?___ftpack+2,w
  9621  07FA  00B8               	movwf	?___ftdiv+2
  9622  07FB  0008               	return
  9623  07FC                     __end_of___ftdiv:	
  9624                           
  9625                           	psect	text43
  9626  032B                     __ptext43:	
  9627 ;; *************** function ___ftadd *****************
  9628 ;; Defined at:
  9629 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  9630 ;; Parameters:    Size  Location     Type
  9631 ;;  f1              3   12[BANK0 ] float 
  9632 ;;  f2              3   15[BANK0 ] float 
  9633 ;; Auto vars:     Size  Location     Type
  9634 ;;  exp1            1   21[BANK0 ] unsigned char 
  9635 ;;  exp2            1   20[BANK0 ] unsigned char 
  9636 ;;  sign            1   19[BANK0 ] unsigned char 
  9637 ;; Return value:  Size  Location     Type
  9638 ;;                  3   12[BANK0 ] float 
  9639 ;; Registers used:
  9640 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9641 ;; Tracked objects:
  9642 ;;		On entry : 0/0
  9643 ;;		On exit  : 0/0
  9644 ;;		Unchanged: 0/0
  9645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9646 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9647 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9648 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9649 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9650 ;;Total ram usage:       10 bytes
  9651 ;; Hardware stack levels used:    1
  9652 ;; Hardware stack levels required when called:    8
  9653 ;; This function calls:
  9654 ;;		___ftpack
  9655 ;; This function is called by:
  9656 ;;		_getADCValue
  9657 ;;		_loop
  9658 ;;		___ftsub
  9659 ;;		_hcsr04GetAerage
  9660 ;; This function uses a non-reentrant model
  9661 ;;
  9662                           
  9663                           
  9664                           ;psect for function ___ftadd
  9665  032B                     ___ftadd:	
  9666                           
  9667                           ;incstack = 0
  9668                           ; Regs used in ___ftadd: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9669  032B  0020               	movlb	0	; select bank0
  9670  032C  082C               	movf	___ftadd@f1,w
  9671  032D  00FD               	movwf	125
  9672  032E  082D               	movf	___ftadd@f1+1,w
  9673  032F  00FE               	movwf	126
  9674  0330  082E               	movf	___ftadd@f1+2,w
  9675  0331  00FF               	movwf	127
  9676  0332  1003               	clrc
  9677  0333  0D7E               	rlf	126,w
  9678  0334  0D7F               	rlf	127,w
  9679  0335  00FF               	movwf	127
  9680  0336  087F               	movf	127,w
  9681  0337  00B5               	movwf	___ftadd@exp1
  9682  0338  082F               	movf	___ftadd@f2,w
  9683  0339  00FD               	movwf	125
  9684  033A  0830               	movf	___ftadd@f2+1,w
  9685  033B  00FE               	movwf	126
  9686  033C  0831               	movf	___ftadd@f2+2,w
  9687  033D  00FF               	movwf	127
  9688  033E  1003               	clrc
  9689  033F  0D7E               	rlf	126,w
  9690  0340  0D7F               	rlf	127,w
  9691  0341  00FF               	movwf	127
  9692  0342  087F               	movf	127,w
  9693  0343  00B4               	movwf	___ftadd@exp2
  9694  0344  0835               	movf	___ftadd@exp1,w
  9695  0345  1903               	btfsc	3,2
  9696  0346  2B53               	goto	l3785
  9697  0347  0834               	movf	___ftadd@exp2,w
  9698  0348  0235               	subwf	___ftadd@exp1,w
  9699  0349  1803               	skipnc
  9700  034A  2B5A               	goto	l3789
  9701  034B  0335               	decf	___ftadd@exp1,w
  9702  034C  3AFF               	xorlw	255
  9703  034D  0734               	addwf	___ftadd@exp2,w
  9704  034E  00B2               	movwf	??___ftadd
  9705  034F  3019               	movlw	25
  9706  0350  0232               	subwf	??___ftadd,w
  9707  0351  1C03               	skipc
  9708  0352  2B5A               	goto	l3789
  9709  0353                     l3785:	
  9710  0353  082F               	movf	___ftadd@f2,w
  9711  0354  00AC               	movwf	?___ftadd
  9712  0355  0830               	movf	___ftadd@f2+1,w
  9713  0356  00AD               	movwf	?___ftadd+1
  9714  0357  0831               	movf	___ftadd@f2+2,w
  9715  0358  00AE               	movwf	?___ftadd+2
  9716  0359  0008               	return
  9717  035A                     l3789:	
  9718  035A  0834               	movf	___ftadd@exp2,w
  9719  035B  1903               	btfsc	3,2
  9720  035C  0008               	return
  9721  035D  0835               	movf	___ftadd@exp1,w
  9722  035E  0234               	subwf	___ftadd@exp2,w
  9723  035F  1803               	skipnc
  9724  0360  2B69               	goto	l3795
  9725  0361  0334               	decf	___ftadd@exp2,w
  9726  0362  3AFF               	xorlw	255
  9727  0363  0735               	addwf	___ftadd@exp1,w
  9728  0364  00B2               	movwf	??___ftadd
  9729  0365  3019               	movlw	25
  9730  0366  0232               	subwf	??___ftadd,w
  9731  0367  1803               	btfsc	3,0
  9732  0368  0008               	return
  9733  0369                     l3795:	
  9734  0369  3006               	movlw	6
  9735  036A  00FF               	movwf	127
  9736  036B  087F               	movf	127,w
  9737  036C  00B3               	movwf	___ftadd@sign
  9738  036D  1BAE               	btfsc	___ftadd@f1+2,7
  9739  036E  17B3               	bsf	___ftadd@sign,7
  9740  036F  1BB1               	btfsc	___ftadd@f2+2,7
  9741  0370  1733               	bsf	___ftadd@sign,6
  9742  0371  17AD               	bsf	___ftadd@f1+1,7
  9743  0372  30FF               	movlw	255
  9744  0373  05AC               	andwf	___ftadd@f1,f
  9745  0374  30FF               	movlw	255
  9746  0375  05AD               	andwf	___ftadd@f1+1,f
  9747  0376  3000               	movlw	0
  9748  0377  05AE               	andwf	___ftadd@f1+2,f
  9749  0378  17B0               	bsf	___ftadd@f2+1,7
  9750  0379  30FF               	movlw	255
  9751  037A  05AF               	andwf	___ftadd@f2,f
  9752  037B  30FF               	movlw	255
  9753  037C  05B0               	andwf	___ftadd@f2+1,f
  9754  037D  3000               	movlw	0
  9755  037E  05B1               	andwf	___ftadd@f2+2,f
  9756  037F  0834               	movf	___ftadd@exp2,w
  9757  0380  0235               	subwf	___ftadd@exp1,w
  9758  0381  1803               	skipnc
  9759  0382  2BA5               	goto	l3819
  9760  0383                     l3807:	
  9761  0383  3001               	movlw	1
  9762  0384                     u3955:	
  9763  0384  35AF               	lslf	___ftadd@f2,f
  9764  0385  0DB0               	rlf	___ftadd@f2+1,f
  9765  0386  0DB1               	rlf	___ftadd@f2+2,f
  9766  0387  0B89               	decfsz	9,f
  9767  0388  2B84               	goto	u3955
  9768  0389  3001               	movlw	1
  9769  038A  02B4               	subwf	___ftadd@exp2,f
  9770  038B  0834               	movf	___ftadd@exp2,w
  9771  038C  0635               	xorwf	___ftadd@exp1,w
  9772  038D  1903               	skipnz
  9773  038E  2BA0               	goto	l3817
  9774  038F  3001               	movlw	1
  9775  0390  02B3               	subwf	___ftadd@sign,f
  9776  0391  0833               	movf	___ftadd@sign,w
  9777  0392  3907               	andlw	7
  9778  0393  1903               	btfsc	3,2
  9779  0394  2BA0               	goto	l3817
  9780  0395  2B83               	goto	l3807
  9781  0396                     l3813:	
  9782  0396  3001               	movlw	1
  9783  0397                     u3985:	
  9784  0397  36AE               	lsrf	___ftadd@f1+2,f
  9785  0398  0CAD               	rrf	___ftadd@f1+1,f
  9786  0399  0CAC               	rrf	___ftadd@f1,f
  9787  039A  0B89               	decfsz	9,f
  9788  039B  2B97               	goto	u3985
  9789  039C  3001               	movlw	1
  9790  039D  00FF               	movwf	127
  9791  039E  087F               	movf	127,w
  9792  039F  07B5               	addwf	___ftadd@exp1,f
  9793  03A0                     l3817:	
  9794  03A0  0835               	movf	___ftadd@exp1,w
  9795  03A1  0634               	xorwf	___ftadd@exp2,w
  9796  03A2  1903               	btfsc	3,2
  9797  03A3  2BCA               	goto	l779
  9798  03A4  2B96               	goto	l3813
  9799  03A5                     l3819:	
  9800  03A5  0835               	movf	___ftadd@exp1,w
  9801  03A6  0234               	subwf	___ftadd@exp2,w
  9802  03A7  1803               	skipnc
  9803  03A8  2BCA               	goto	l779
  9804  03A9                     l3821:	
  9805  03A9  3001               	movlw	1
  9806  03AA                     u4015:	
  9807  03AA  35AC               	lslf	___ftadd@f1,f
  9808  03AB  0DAD               	rlf	___ftadd@f1+1,f
  9809  03AC  0DAE               	rlf	___ftadd@f1+2,f
  9810  03AD  0B89               	decfsz	9,f
  9811  03AE  2BAA               	goto	u4015
  9812  03AF  3001               	movlw	1
  9813  03B0  02B5               	subwf	___ftadd@exp1,f
  9814  03B1  0834               	movf	___ftadd@exp2,w
  9815  03B2  0635               	xorwf	___ftadd@exp1,w
  9816  03B3  1903               	skipnz
  9817  03B4  2BC6               	goto	l3831
  9818  03B5  3001               	movlw	1
  9819  03B6  02B3               	subwf	___ftadd@sign,f
  9820  03B7  0833               	movf	___ftadd@sign,w
  9821  03B8  3907               	andlw	7
  9822  03B9  1903               	btfsc	3,2
  9823  03BA  2BC6               	goto	l3831
  9824  03BB  2BA9               	goto	l3821
  9825  03BC                     l3827:	
  9826  03BC  3001               	movlw	1
  9827  03BD                     u4045:	
  9828  03BD  36B1               	lsrf	___ftadd@f2+2,f
  9829  03BE  0CB0               	rrf	___ftadd@f2+1,f
  9830  03BF  0CAF               	rrf	___ftadd@f2,f
  9831  03C0  0B89               	decfsz	9,f
  9832  03C1  2BBD               	goto	u4045
  9833  03C2  3001               	movlw	1
  9834  03C3  00FF               	movwf	127
  9835  03C4  087F               	movf	127,w
  9836  03C5  07B4               	addwf	___ftadd@exp2,f
  9837  03C6                     l3831:	
  9838  03C6  0835               	movf	___ftadd@exp1,w
  9839  03C7  0634               	xorwf	___ftadd@exp2,w
  9840  03C8  1D03               	skipz
  9841  03C9  2BBC               	goto	l3827
  9842  03CA                     l779:	
  9843  03CA  1FB3               	btfss	___ftadd@sign,7
  9844  03CB  2BDC               	goto	l3835
  9845  03CC  30FF               	movlw	255
  9846  03CD  06AC               	xorwf	___ftadd@f1,f
  9847  03CE  30FF               	movlw	255
  9848  03CF  06AD               	xorwf	___ftadd@f1+1,f
  9849  03D0  30FF               	movlw	255
  9850  03D1  06AE               	xorwf	___ftadd@f1+2,f
  9851  03D2  3001               	movlw	1
  9852  03D3  07AC               	addwf	___ftadd@f1,f
  9853  03D4  3000               	movlw	0
  9854  03D5  1803               	skipnc
  9855  03D6  3001               	movlw	1
  9856  03D7  07AD               	addwf	___ftadd@f1+1,f
  9857  03D8  3000               	movlw	0
  9858  03D9  1803               	skipnc
  9859  03DA  3001               	movlw	1
  9860  03DB  07AE               	addwf	___ftadd@f1+2,f
  9861  03DC                     l3835:	
  9862  03DC  1F33               	btfss	___ftadd@sign,6
  9863  03DD  2BEE               	goto	l3839
  9864  03DE  30FF               	movlw	255
  9865  03DF  06AF               	xorwf	___ftadd@f2,f
  9866  03E0  30FF               	movlw	255
  9867  03E1  06B0               	xorwf	___ftadd@f2+1,f
  9868  03E2  30FF               	movlw	255
  9869  03E3  06B1               	xorwf	___ftadd@f2+2,f
  9870  03E4  3001               	movlw	1
  9871  03E5  07AF               	addwf	___ftadd@f2,f
  9872  03E6  3000               	movlw	0
  9873  03E7  1803               	skipnc
  9874  03E8  3001               	movlw	1
  9875  03E9  07B0               	addwf	___ftadd@f2+1,f
  9876  03EA  3000               	movlw	0
  9877  03EB  1803               	skipnc
  9878  03EC  3001               	movlw	1
  9879  03ED  07B1               	addwf	___ftadd@f2+2,f
  9880  03EE                     l3839:	
  9881  03EE  01B3               	clrf	___ftadd@sign
  9882  03EF  082C               	movf	___ftadd@f1,w
  9883  03F0  07AF               	addwf	___ftadd@f2,f
  9884  03F1  082D               	movf	___ftadd@f1+1,w
  9885  03F2  3DB0               	addwfc	___ftadd@f2+1,f
  9886  03F3  082E               	movf	___ftadd@f1+2,w
  9887  03F4  3DB1               	addwfc	___ftadd@f2+2,f
  9888  03F5  1FB1               	btfss	___ftadd@f2+2,7
  9889  03F6  2C09               	goto	l3849
  9890  03F7  30FF               	movlw	255
  9891  03F8  06AF               	xorwf	___ftadd@f2,f
  9892  03F9  30FF               	movlw	255
  9893  03FA  06B0               	xorwf	___ftadd@f2+1,f
  9894  03FB  30FF               	movlw	255
  9895  03FC  06B1               	xorwf	___ftadd@f2+2,f
  9896  03FD  3001               	movlw	1
  9897  03FE  07AF               	addwf	___ftadd@f2,f
  9898  03FF  3000               	movlw	0
  9899  0400  1803               	skipnc
  9900  0401  3001               	movlw	1
  9901  0402  07B0               	addwf	___ftadd@f2+1,f
  9902  0403  3000               	movlw	0
  9903  0404  1803               	skipnc
  9904  0405  3001               	movlw	1
  9905  0406  07B1               	addwf	___ftadd@f2+2,f
  9906  0407  01B3               	clrf	___ftadd@sign
  9907  0408  0AB3               	incf	___ftadd@sign,f
  9908  0409                     l3849:	
  9909  0409  082F               	movf	___ftadd@f2,w
  9910  040A  00A7               	movwf	___ftpack@arg
  9911  040B  0830               	movf	___ftadd@f2+1,w
  9912  040C  00A8               	movwf	___ftpack@arg+1
  9913  040D  0831               	movf	___ftadd@f2+2,w
  9914  040E  00A9               	movwf	___ftpack@arg+2
  9915  040F  0835               	movf	___ftadd@exp1,w
  9916  0410  00FF               	movwf	127
  9917  0411  087F               	movf	127,w
  9918  0412  00AA               	movwf	___ftpack@exp
  9919  0413  0833               	movf	___ftadd@sign,w
  9920  0414  00FF               	movwf	127
  9921  0415  087F               	movf	127,w
  9922  0416  00AB               	movwf	___ftpack@sign
  9923  0417  318D  2554         	fcall	___ftpack
  9924  0419  0020               	movlb	0	; select bank0
  9925  041A  0827               	movf	?___ftpack,w
  9926  041B  00AC               	movwf	?___ftadd
  9927  041C  0828               	movf	?___ftpack+1,w
  9928  041D  00AD               	movwf	?___ftadd+1
  9929  041E  0829               	movf	?___ftpack+2,w
  9930  041F  00AE               	movwf	?___ftadd+2
  9931  0420  0008               	return
  9932  0421                     __end_of___ftadd:	
  9933                           
  9934                           	psect	text44
  9935  09DA                     __ptext44:	
  9936 ;; *************** function ___awtoft *****************
  9937 ;; Defined at:
  9938 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9939 ;; Parameters:    Size  Location     Type
  9940 ;;  c               2    0[COMMON] int 
  9941 ;; Auto vars:     Size  Location     Type
  9942 ;;  sign            1    3[COMMON] unsigned char 
  9943 ;; Return value:  Size  Location     Type
  9944 ;;                  3    0[COMMON] float 
  9945 ;; Registers used:
  9946 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9947 ;; Tracked objects:
  9948 ;;		On entry : 0/0
  9949 ;;		On exit  : 0/0
  9950 ;;		Unchanged: 0/0
  9951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9952 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9953 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9955 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9956 ;;Total ram usage:        4 bytes
  9957 ;; Hardware stack levels used:    1
  9958 ;; Hardware stack levels required when called:    8
  9959 ;; This function calls:
  9960 ;;		___ftpack
  9961 ;; This function is called by:
  9962 ;;		_getADCValue
  9963 ;; This function uses a non-reentrant model
  9964 ;;
  9965                           
  9966                           
  9967                           ;psect for function ___awtoft
  9968  09DA                     ___awtoft:	
  9969                           
  9970                           ;incstack = 0
  9971                           ; Regs used in ___awtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9972  09DA  01F3               	clrf	___awtoft@sign
  9973  09DB  1FF1               	btfss	___awtoft@c+1,7
  9974  09DC  29E4               	goto	l4353
  9975  09DD  09F0               	comf	___awtoft@c,f
  9976  09DE  09F1               	comf	___awtoft@c+1,f
  9977  09DF  0AF0               	incf	___awtoft@c,f
  9978  09E0  1903               	skipnz
  9979  09E1  0AF1               	incf	___awtoft@c+1,f
  9980  09E2  01F3               	clrf	___awtoft@sign
  9981  09E3  0AF3               	incf	___awtoft@sign,f
  9982  09E4                     l4353:	
  9983  09E4  0870               	movf	___awtoft@c,w
  9984  09E5  0020               	movlb	0	; select bank0
  9985  09E6  00A7               	movwf	___ftpack@arg
  9986  09E7  0871               	movf	___awtoft@c+1,w
  9987  09E8  00A8               	movwf	___ftpack@arg+1
  9988  09E9  01A9               	clrf	___ftpack@arg+2
  9989  09EA  308E               	movlw	142
  9990  09EB  00FF               	movwf	127
  9991  09EC  087F               	movf	127,w
  9992  09ED  00AA               	movwf	___ftpack@exp
  9993  09EE  0873               	movf	___awtoft@sign,w
  9994  09EF  00FF               	movwf	127
  9995  09F0  087F               	movf	127,w
  9996  09F1  00AB               	movwf	___ftpack@sign
  9997  09F2  318D  2554         	fcall	___ftpack
  9998  09F4  0020               	movlb	0	; select bank0
  9999  09F5  0827               	movf	?___ftpack,w
 10000  09F6  00F0               	movwf	?___awtoft
 10001  09F7  0828               	movf	?___ftpack+1,w
 10002  09F8  00F1               	movwf	?___awtoft+1
 10003  09F9  0829               	movf	?___ftpack+2,w
 10004  09FA  00F2               	movwf	?___awtoft+2
 10005  09FB  0008               	return
 10006  09FC                     __end_of___awtoft:	
 10007                           
 10008                           	psect	text45
 10009  0888                     __ptext45:	
 10010 ;; *************** function ___lwtoft *****************
 10011 ;; Defined at:
 10012 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
 10013 ;; Parameters:    Size  Location     Type
 10014 ;;  c               2    0[COMMON] unsigned int 
 10015 ;; Auto vars:     Size  Location     Type
 10016 ;;		None
 10017 ;; Return value:  Size  Location     Type
 10018 ;;                  3    0[COMMON] float 
 10019 ;; Registers used:
 10020 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
 10021 ;; Tracked objects:
 10022 ;;		On entry : 0/0
 10023 ;;		On exit  : 0/0
 10024 ;;		Unchanged: 0/0
 10025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10026 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10029 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10030 ;;Total ram usage:        3 bytes
 10031 ;; Hardware stack levels used:    1
 10032 ;; Hardware stack levels required when called:    8
 10033 ;; This function calls:
 10034 ;;		___ftpack
 10035 ;; This function is called by:
 10036 ;;		_loop
 10037 ;;		_hcsr04GetAerage
 10038 ;; This function uses a non-reentrant model
 10039 ;;
 10040                           
 10041                           
 10042                           ;psect for function ___lwtoft
 10043  0888                     ___lwtoft:	
 10044                           
 10045                           ;incstack = 0
 10046                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
 10047  0888  0870               	movf	___lwtoft@c,w
 10048  0889  0020               	movlb	0	; select bank0
 10049  088A  00A7               	movwf	___ftpack@arg
 10050  088B  0871               	movf	___lwtoft@c+1,w
 10051  088C  00A8               	movwf	___ftpack@arg+1
 10052  088D  01A9               	clrf	___ftpack@arg+2
 10053  088E  308E               	movlw	142
 10054  088F  00FF               	movwf	127
 10055  0890  087F               	movf	127,w
 10056  0891  00AA               	movwf	___ftpack@exp
 10057  0892  01AB               	clrf	___ftpack@sign
 10058  0893  318D  2554         	fcall	___ftpack
 10059  0895  0020               	movlb	0	; select bank0
 10060  0896  0827               	movf	?___ftpack,w
 10061  0897  00F0               	movwf	?___lwtoft
 10062  0898  0828               	movf	?___ftpack+1,w
 10063  0899  00F1               	movwf	?___lwtoft+1
 10064  089A  0829               	movf	?___ftpack+2,w
 10065  089B  00F2               	movwf	?___lwtoft+2
 10066  089C  0008               	return
 10067  089D                     __end_of___lwtoft:	
 10068                           
 10069                           	psect	text46
 10070  08CE                     __ptext46:	
 10071 ;; *************** function ___lbtoft *****************
 10072 ;; Defined at:
 10073 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
 10074 ;; Parameters:    Size  Location     Type
 10075 ;;  c               1    wreg     unsigned char 
 10076 ;; Auto vars:     Size  Location     Type
 10077 ;;  c               1   12[BANK0 ] unsigned char 
 10078 ;; Return value:  Size  Location     Type
 10079 ;;                  3    0[COMMON] float 
 10080 ;; Registers used:
 10081 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
 10082 ;; Tracked objects:
 10083 ;;		On entry : 0/0
 10084 ;;		On exit  : 0/0
 10085 ;;		Unchanged: 0/0
 10086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10087 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10088 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10090 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10091 ;;Total ram usage:        5 bytes
 10092 ;; Hardware stack levels used:    1
 10093 ;; Hardware stack levels required when called:    8
 10094 ;; This function calls:
 10095 ;;		___ftpack
 10096 ;; This function is called by:
 10097 ;;		_main
 10098 ;; This function uses a non-reentrant model
 10099 ;;
 10100                           
 10101                           
 10102                           ;psect for function ___lbtoft
 10103  08CE                     ___lbtoft:	
 10104                           
 10105                           ;incstack = 0
 10106                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
 10107                           ;___lbtoft@c stored from wreg
 10108  08CE  0020               	movlb	0	; select bank0
 10109  08CF  00AC               	movwf	___lbtoft@c
 10110  08D0  082C               	movf	___lbtoft@c,w
 10111  08D1  00FD               	movwf	125
 10112  08D2  01FE               	clrf	126
 10113  08D3  01FF               	clrf	127
 10114  08D4  087D               	movf	125,w
 10115  08D5  00A7               	movwf	___ftpack@arg
 10116  08D6  087E               	movf	126,w
 10117  08D7  00A8               	movwf	___ftpack@arg+1
 10118  08D8  087F               	movf	127,w
 10119  08D9  00A9               	movwf	___ftpack@arg+2
 10120  08DA  308E               	movlw	142
 10121  08DB  00FF               	movwf	127
 10122  08DC  087F               	movf	127,w
 10123  08DD  00AA               	movwf	___ftpack@exp
 10124  08DE  01AB               	clrf	___ftpack@sign
 10125  08DF  318D  2554         	fcall	___ftpack
 10126  08E1  0020               	movlb	0	; select bank0
 10127  08E2  0827               	movf	?___ftpack,w
 10128  08E3  00F0               	movwf	?___lbtoft
 10129  08E4  0828               	movf	?___ftpack+1,w
 10130  08E5  00F1               	movwf	?___lbtoft+1
 10131  08E6  0829               	movf	?___ftpack+2,w
 10132  08E7  00F2               	movwf	?___lbtoft+2
 10133  08E8  0008               	return
 10134  08E9                     __end_of___lbtoft:	
 10135                           
 10136                           	psect	text47
 10137  0D54                     __ptext47:	
 10138 ;; *************** function ___ftpack *****************
 10139 ;; Defined at:
 10140 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
 10141 ;; Parameters:    Size  Location     Type
 10142 ;;  arg             3    7[BANK0 ] unsigned um
 10143 ;;  exp             1   10[BANK0 ] unsigned char 
 10144 ;;  sign            1   11[BANK0 ] unsigned char 
 10145 ;; Auto vars:     Size  Location     Type
 10146 ;;		None
 10147 ;; Return value:  Size  Location     Type
 10148 ;;                  3    7[BANK0 ] float 
 10149 ;; Registers used:
 10150 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
 10151 ;; Tracked objects:
 10152 ;;		On entry : 0/0
 10153 ;;		On exit  : 0/0
 10154 ;;		Unchanged: 0/0
 10155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10156 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10159 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10160 ;;Total ram usage:        5 bytes
 10161 ;; Hardware stack levels used:    1
 10162 ;; Hardware stack levels required when called:    7
 10163 ;; This function calls:
 10164 ;;		Nothing
 10165 ;; This function is called by:
 10166 ;;		___awtoft
 10167 ;;		___ftadd
 10168 ;;		___ftdiv
 10169 ;;		___ftmul
 10170 ;;		___lbtoft
 10171 ;;		___lltoft
 10172 ;;		___lwtoft
 10173 ;; This function uses a non-reentrant model
 10174 ;;
 10175                           
 10176                           
 10177                           ;psect for function ___ftpack
 10178  0D54                     ___ftpack:	
 10179                           
 10180                           ;incstack = 0
 10181                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+9-btemp+11]
 10182  0D54  0020               	movlb	0	; select bank0
 10183  0D55  082A               	movf	___ftpack@exp,w
 10184  0D56  1903               	btfsc	3,2
 10185  0D57  2D5D               	goto	l3661
 10186  0D58  0829               	movf	___ftpack@arg+2,w
 10187  0D59  0428               	iorwf	___ftpack@arg+1,w
 10188  0D5A  0427               	iorwf	___ftpack@arg,w
 10189  0D5B  1D03               	skipz
 10190  0D5C  2D6E               	goto	l3669
 10191  0D5D                     l3661:	
 10192  0D5D  3000               	movlw	0
 10193  0D5E  00A7               	movwf	?___ftpack
 10194  0D5F  3000               	movlw	0
 10195  0D60  00A8               	movwf	?___ftpack+1
 10196  0D61  3000               	movlw	0
 10197  0D62  00A9               	movwf	?___ftpack+2
 10198  0D63  0008               	return
 10199  0D64                     l3665:	
 10200  0D64  3001               	movlw	1
 10201  0D65  00FF               	movwf	127
 10202  0D66  087F               	movf	127,w
 10203  0D67  07AA               	addwf	___ftpack@exp,f
 10204  0D68  3001               	movlw	1
 10205  0D69                     u3625:	
 10206  0D69  36A9               	lsrf	___ftpack@arg+2,f
 10207  0D6A  0CA8               	rrf	___ftpack@arg+1,f
 10208  0D6B  0CA7               	rrf	___ftpack@arg,f
 10209  0D6C  0B89               	decfsz	9,f
 10210  0D6D  2D69               	goto	u3625
 10211  0D6E                     l3669:	
 10212  0D6E  30FE               	movlw	254
 10213  0D6F  0529               	andwf	___ftpack@arg+2,w
 10214  0D70  1903               	btfsc	3,2
 10215  0D71  2D87               	goto	l3677
 10216  0D72  2D64               	goto	l3665
 10217  0D73                     l3671:	
 10218  0D73  3001               	movlw	1
 10219  0D74  00FF               	movwf	127
 10220  0D75  087F               	movf	127,w
 10221  0D76  07AA               	addwf	___ftpack@exp,f
 10222  0D77  3001               	movlw	1
 10223  0D78  07A7               	addwf	___ftpack@arg,f
 10224  0D79  3000               	movlw	0
 10225  0D7A  1803               	skipnc
 10226  0D7B  3001               	movlw	1
 10227  0D7C  07A8               	addwf	___ftpack@arg+1,f
 10228  0D7D  3000               	movlw	0
 10229  0D7E  1803               	skipnc
 10230  0D7F  3001               	movlw	1
 10231  0D80  07A9               	addwf	___ftpack@arg+2,f
 10232  0D81  3001               	movlw	1
 10233  0D82                     u3645:	
 10234  0D82  36A9               	lsrf	___ftpack@arg+2,f
 10235  0D83  0CA8               	rrf	___ftpack@arg+1,f
 10236  0D84  0CA7               	rrf	___ftpack@arg,f
 10237  0D85  0B89               	decfsz	9,f
 10238  0D86  2D82               	goto	u3645
 10239  0D87                     l3677:	
 10240  0D87  30FF               	movlw	255
 10241  0D88  0529               	andwf	___ftpack@arg+2,w
 10242  0D89  1903               	btfsc	3,2
 10243  0D8A  2D94               	goto	l3681
 10244  0D8B  2D73               	goto	l3671
 10245  0D8C                     l3679:	
 10246  0D8C  3001               	movlw	1
 10247  0D8D  02AA               	subwf	___ftpack@exp,f
 10248  0D8E  3001               	movlw	1
 10249  0D8F                     u3665:	
 10250  0D8F  35A7               	lslf	___ftpack@arg,f
 10251  0D90  0DA8               	rlf	___ftpack@arg+1,f
 10252  0D91  0DA9               	rlf	___ftpack@arg+2,f
 10253  0D92  0B89               	decfsz	9,f
 10254  0D93  2D8F               	goto	u3665
 10255  0D94                     l3681:	
 10256  0D94  1BA8               	btfsc	___ftpack@arg+1,7
 10257  0D95  2D9A               	goto	l755
 10258  0D96  3002               	movlw	2
 10259  0D97  022A               	subwf	___ftpack@exp,w
 10260  0D98  1803               	skipnc
 10261  0D99  2D8C               	goto	l3679
 10262  0D9A                     l755:	
 10263  0D9A  182A               	btfsc	___ftpack@exp,0
 10264  0D9B  2DA2               	goto	l756
 10265  0D9C  30FF               	movlw	255
 10266  0D9D  05A7               	andwf	___ftpack@arg,f
 10267  0D9E  307F               	movlw	127
 10268  0D9F  05A8               	andwf	___ftpack@arg+1,f
 10269  0DA0  30FF               	movlw	255
 10270  0DA1  05A9               	andwf	___ftpack@arg+2,f
 10271  0DA2                     l756:	
 10272  0DA2  1003               	clrc
 10273  0DA3  0CAA               	rrf	___ftpack@exp,f
 10274  0DA4  082A               	movf	___ftpack@exp,w
 10275  0DA5  00FD               	movwf	125
 10276  0DA6  01FE               	clrf	126
 10277  0DA7  01FF               	clrf	127
 10278  0DA8  3010               	movlw	16
 10279  0DA9                     u3705:	
 10280  0DA9  35FD               	lslf	125,f
 10281  0DAA  0DFE               	rlf	126,f
 10282  0DAB  0DFF               	rlf	127,f
 10283  0DAC  0B89               	decfsz	9,f
 10284  0DAD  2DA9               	goto	u3705
 10285  0DAE  087D               	movf	125,w
 10286  0DAF  04A7               	iorwf	___ftpack@arg,f
 10287  0DB0  087E               	movf	126,w
 10288  0DB1  04A8               	iorwf	___ftpack@arg+1,f
 10289  0DB2  087F               	movf	127,w
 10290  0DB3  04A9               	iorwf	___ftpack@arg+2,f
 10291  0DB4  082B               	movf	___ftpack@sign,w
 10292  0DB5  1903               	btfsc	3,2
 10293  0DB6  0008               	return
 10294  0DB7  17A9               	bsf	___ftpack@arg+2,7
 10295  0DB8  0008               	return
 10296  0DB9                     __end_of___ftpack:	
 10297                           
 10298                           	psect	text48
 10299  083F                     __ptext48:	
 10300 ;; *************** function _EEPROMRead *****************
 10301 ;; Defined at:
 10302 ;;		line 29 in file "eeprom.c"
 10303 ;; Parameters:    Size  Location     Type
 10304 ;;  address         2    0[COMMON] unsigned int 
 10305 ;; Auto vars:     Size  Location     Type
 10306 ;;		None
 10307 ;; Return value:  Size  Location     Type
 10308 ;;                  1    wreg      unsigned char 
 10309 ;; Registers used:
 10310 ;;		wreg, status,2
 10311 ;; Tracked objects:
 10312 ;;		On entry : 0/0
 10313 ;;		On exit  : 0/0
 10314 ;;		Unchanged: 0/0
 10315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10316 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10319 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10320 ;;Total ram usage:        2 bytes
 10321 ;; Hardware stack levels used:    1
 10322 ;; Hardware stack levels required when called:    7
 10323 ;; This function calls:
 10324 ;;		Nothing
 10325 ;; This function is called by:
 10326 ;;		_main
 10327 ;; This function uses a non-reentrant model
 10328 ;;
 10329                           
 10330                           
 10331                           ;psect for function _EEPROMRead
 10332  083F                     _EEPROMRead:	
 10333                           
 10334                           ;eeprom.c: 30: NVMADRH = ((address >> 8) & 0xFF);
 10335                           
 10336                           ;incstack = 0
 10337                           ; Regs used in _EEPROMRead: [wreg+status,2]
 10338  083F  0871               	movf	EEPROMRead@address+1,w
 10339  0840  0031               	movlb	17	; select bank17
 10340  0841  0092               	movwf	18	;volatile
 10341                           
 10342                           ;eeprom.c: 31: NVMADRL = (address & 0xFF);
 10343  0842  0870               	movf	EEPROMRead@address,w
 10344  0843  0091               	movwf	17	;volatile
 10345                           
 10346                           ;eeprom.c: 32: NVMCON1bits.NVMREGS = 1;
 10347  0844  1715               	bsf	21,6	;volsfr
 10348                           
 10349                           ;eeprom.c: 33: NVMCON1bits.RD = 1;
 10350  0845  1415               	bsf	21,0	;volsfr
 10351                           
 10352                           ;eeprom.c: 34: __nop();
 10353  0846  0000               	nop
 10354                           
 10355                           ;eeprom.c: 35: __nop();
 10356  0847  0000               	nop
 10357                           
 10358                           ;eeprom.c: 37: return (NVMDATL);
 10359  0848  0031               	movlb	17	; select bank17
 10360  0849  0813               	movf	19,w	;volatile
 10361  084A  0008               	return
 10362  084B                     __end_of_EEPROMRead:	
 10363                           
 10364                           	psect	intentry
 10365  0004                     __pintentry:	
 10366 ;; *************** function _ISR *****************
 10367 ;; Defined at:
 10368 ;;		line 13 in file "main.c"
 10369 ;; Parameters:    Size  Location     Type
 10370 ;;		None
 10371 ;; Auto vars:     Size  Location     Type
 10372 ;;		None
 10373 ;; Return value:  Size  Location     Type
 10374 ;;                  1    wreg      void 
 10375 ;; Registers used:
 10376 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
 10377 ;; Tracked objects:
 10378 ;;		On entry : 0/0
 10379 ;;		On exit  : 0/0
 10380 ;;		Unchanged: 0/0
 10381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10384 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10385 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10386 ;;Total ram usage:        7 bytes
 10387 ;; Hardware stack levels used:    1
 10388 ;; Hardware stack levels required when called:    6
 10389 ;; This function calls:
 10390 ;;		_nrf24l01ISR
 10391 ;; This function is called by:
 10392 ;;		Interrupt level 1
 10393 ;; This function uses a non-reentrant model
 10394 ;;
 10395                           
 10396  0004                     _ISR:	
 10397                           
 10398                           ;incstack = 0
 10399                           ; Regs used in _ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+cs
      +                          tack]
 10400  0004  3180               	pagesel	$
 10401  0005  0874               	movf	116,w
 10402  0006  0020               	movlb	0	; select bank0
 10403  0007  00A0               	movwf	??_ISR
 10404  0008  0875               	movf	117,w
 10405  0009  00A1               	movwf	??_ISR+1
 10406  000A  087C               	movf	124,w
 10407  000B  00A2               	movwf	??_ISR+2
 10408  000C  087D               	movf	125,w
 10409  000D  00A3               	movwf	??_ISR+3
 10410  000E  087E               	movf	126,w
 10411  000F  00A4               	movwf	??_ISR+4
 10412  0010  087F               	movf	127,w
 10413  0011  00A5               	movwf	??_ISR+5
 10414  0012  30AF               	movlw	low ___int_sp
 10415  0013  0086               	movwf	6
 10416  0014  3022               	movlw	high ___int_sp
 10417  0015  0087               	movwf	7
 10418  0016  0875               	movf	117,w
 10419  0017  00A6               	movwf	??_ISR+6
 10420                           
 10421                           ;main.c: 20: if (PIR0bits.INTF){
 10422  0018  1C10               	btfss	16,0	;volatile
 10423  0019  281E               	goto	i1l4781
 10424                           
 10425                           ;main.c: 21: nrf24l01ISR();
 10426  001A  318C  242E         	fcall	_nrf24l01ISR
 10427                           
 10428                           ;main.c: 22: PIR0bits.INTF = 0;
 10429  001C  0020               	movlb	0	; select bank0
 10430  001D  1010               	bcf	16,0	;volatile
 10431  001E                     i1l4781:	
 10432                           
 10433                           ;main.c: 23: };main.c: 25: if (PIR1bits.ADIF){
 10434  001E  1B11               	btfsc	17,6	;volatile
 10435                           
 10436                           ;main.c: 26: PIR1bits.ADIF = 0;
 10437  001F  1311               	bcf	17,6	;volatile
 10438  0020  0826               	movf	??_ISR+6,w
 10439  0021  00FF               	movwf	127
 10440  0022  0825               	movf	??_ISR+5,w
 10441  0023  00FE               	movwf	126
 10442  0024  0824               	movf	??_ISR+4,w
 10443  0025  00FD               	movwf	125
 10444  0026  0823               	movf	??_ISR+3,w
 10445  0027  00FC               	movwf	124
 10446  0028  0822               	movf	??_ISR+2,w
 10447  0029  00F5               	movwf	117
 10448  002A  0821               	movf	??_ISR+1,w
 10449  002B  00F4               	movwf	116
 10450  002C  0009               	retfie
 10451  002D                     __end_of_ISR:	
 10452                           
 10453                           	psect	text50
 10454  0C2E                     __ptext50:	
 10455 ;; *************** function _nrf24l01ISR *****************
 10456 ;; Defined at:
 10457 ;;		line 154 in file "nrf24l01.c"
 10458 ;; Parameters:    Size  Location     Type
 10459 ;;		None
 10460 ;; Auto vars:     Size  Location     Type
 10461 ;;		None
 10462 ;; Return value:  Size  Location     Type
 10463 ;;                  1    wreg      void 
 10464 ;; Registers used:
 10465 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
 10466 ;; Tracked objects:
 10467 ;;		On entry : 0/0
 10468 ;;		On exit  : 0/0
 10469 ;;		Unchanged: 0/0
 10470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10475 ;;Total ram usage:        0 bytes
 10476 ;; Hardware stack levels used:    1
 10477 ;; Hardware stack levels required when called:    5
 10478 ;; This function calls:
 10479 ;;		_nrf24l01Send
 10480 ;;		_nrf24l01Service
 10481 ;;		_nrf24l01SetRXMode
 10482 ;; This function is called by:
 10483 ;;		_ISR
 10484 ;; This function uses a non-reentrant model
 10485 ;;
 10486                           
 10487                           
 10488                           ;psect for function _nrf24l01ISR
 10489  0C2E                     _nrf24l01ISR:	
 10490                           
 10491                           ;nrf24l01.c: 156: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
 10492                           
 10493                           ;incstack = 0
 10494                           ; Regs used in _nrf24l01ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+p
      +                          clath]
 10495  0C2E  3000               	movlw	0
 10496  0C2F  001E               	movwi fsr1++
 10497  0C30  3007               	movlw	7
 10498  0C31  3188  2075  318C   	fcall	_nrf24l01Send
 10499  0C34  00FF               	movwf	127
 10500  0C35  087F               	movf	127,w
 10501  0C36  0020               	movlb	0	; select bank0
 10502  0C37  00E4               	movwf	_status+2	;volatile
 10503                           
 10504                           ;nrf24l01.c: 159: if (status.statusRegister.RX_DR){
 10505  0C38  1F64               	btfss	_status+2,6	;volatile
 10506  0C39  2C46               	goto	i1l4693
 10507                           
 10508                           ;nrf24l01.c: 161: if (status.RX == 0){
 10509  0C3A  0863               	movf	_status+1,w	;volatile
 10510  0C3B  1D03               	btfss	3,2
 10511  0C3C  2C42               	goto	i1l296
 10512                           
 10513                           ;nrf24l01.c: 162: status.RX = 1;
 10514  0C3D  3001               	movlw	1
 10515  0C3E  00FF               	movwf	127
 10516  0C3F  087F               	movf	127,w
 10517  0C40  00E3               	movwf	_status+1	;volatile
 10518                           
 10519                           ;nrf24l01.c: 163: }
 10520  0C41  2C43               	goto	i1l4691
 10521  0C42                     i1l296:	
 10522                           
 10523                           ;nrf24l01.c: 165: else{;nrf24l01.c: 166: status.statusRegister.RX_DR = 0;
 10524  0C42  1364               	bcf	_status+2,6	;volatile
 10525  0C43                     i1l4691:	
 10526                           
 10527                           ;nrf24l01.c: 167: };nrf24l01.c: 169: nrf24l01Service();
 10528  0C43  3186  26A9  318C   	fcall	_nrf24l01Service
 10529  0C46                     i1l4693:	
 10530                           
 10531                           ;nrf24l01.c: 170: };nrf24l01.c: 172: if (status.statusRegister.TX_DS){
 10532  0C46  0020               	movlb	0	; select bank0
 10533  0C47  1EE4               	btfss	_status+2,5	;volatile
 10534  0C48  2C6D               	goto	i1l4709
 10535                           
 10536                           ;nrf24l01.c: 177: if (lastTXPacket->packetData.ACKRequest){
 10537  0C49  0868               	movf	_lastTXPacket,w
 10538  0C4A  0084               	movwf	4
 10539  0C4B  3001               	movlw	1	; select bank2/3
 10540  0C4C  0085               	movwf	5
 10541  0C4D  1D00               	btfss	0,2
 10542  0C4E  2C5C               	goto	i1l4701
 10543                           
 10544                           ;nrf24l01.c: 178: status.TX = 3;
 10545  0C4F  3003               	movlw	3
 10546  0C50  00FF               	movwf	127
 10547  0C51  087F               	movf	127,w
 10548  0C52  00E2               	movwf	_status	;volatile
 10549                           
 10550                           ;nrf24l01.c: 179: status.retryCount = 0xFF;
 10551  0C53  30FF               	movlw	255
 10552  0C54  00FF               	movwf	127
 10553  0C55  087F               	movf	127,w
 10554  0C56  00E6               	movwf	_status+4	;volatile
 10555                           
 10556                           ;nrf24l01.c: 180: nrf24l01SetRXMode(1);
 10557  0C57  3001               	movlw	1
 10558  0C58  318B  2337  318C   	fcall	_nrf24l01SetRXMode
 10559                           
 10560                           ;nrf24l01.c: 181: }
 10561  0C5B  2C6A               	goto	i1l4707
 10562  0C5C                     i1l4701:	
 10563                           
 10564                           ;nrf24l01.c: 185: else if(lastTXPacket->packetData.IsACK){
 10565  0C5C  0020               	movlb	0	; select bank0
 10566  0C5D  0868               	movf	_lastTXPacket,w
 10567  0C5E  0084               	movwf	4
 10568  0C5F  3001               	movlw	1	; select bank2/3
 10569  0C60  0085               	movwf	5
 10570  0C61  1D80               	btfss	0,3
 10571  0C62  2C68               	goto	i1l4705
 10572                           
 10573                           ;nrf24l01.c: 186: nrf24l01SetRXMode(1);
 10574  0C63  3001               	movlw	1
 10575  0C64  318B  2337  318C   	fcall	_nrf24l01SetRXMode
 10576                           
 10577                           ;nrf24l01.c: 187: }
 10578  0C67  2C6A               	goto	i1l4707
 10579  0C68                     i1l4705:	
 10580                           
 10581                           ;nrf24l01.c: 190: else{;nrf24l01.c: 191: status.TX = 0;
 10582  0C68  0020               	movlb	0	; select bank0
 10583  0C69  01E2               	clrf	_status	;volatile
 10584  0C6A                     i1l4707:	
 10585                           
 10586                           ;nrf24l01.c: 192: };nrf24l01.c: 194: nrf24l01Service();
 10587  0C6A  3186  26A9  318C   	fcall	_nrf24l01Service
 10588  0C6D                     i1l4709:	
 10589                           
 10590                           ;nrf24l01.c: 195: };nrf24l01.c: 200: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          7, status.statusRegister.byte);
 10591  0C6D  0020               	movlb	0	; select bank0
 10592  0C6E  0864               	movf	_status+2,w	;volatile
 10593  0C6F  001E               	movwi fsr1++
 10594  0C70  3027               	movlw	39
 10595  0C71  3188  2075         	fcall	_nrf24l01Send
 10596  0C73  0008               	return
 10597  0C74                     __end_of_nrf24l01ISR:	
 10598  0074                     btemp	set	116	;btemp
 10599  0074                     wtemp0	set	116
 10600  0076                     wtemp1	set	118
 10601  0078                     wtemp2	set	120
 10602  007A                     wtemp3	set	122
 10603  007C                     wtemp4	set	124
 10604  007E                     wtemp5	set	126
 10605  0074                     ttemp0	set	116
 10606  0077                     ttemp1	set	119
 10607  007A                     ttemp2	set	122
 10608  007D                     ttemp3	set	125
 10609  0074                     ltemp0	set	116
 10610  0078                     ltemp1	set	120
 10611  007C                     ltemp2	set	124
 10612  0076                     ltemp3	set	118


Data Sizes:
    Strings     38
    Constant    46
    Data        1
    BSS         130
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            4      4       4
    BANK0            80     66      73
    BANK1            80     63      76
    BANK2            80      0      45
    BANK3            80      0      66
    BANK4            80     45      45
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> sendMessage@ftoaStatus(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK3[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 
		 -> RXPacket(BANK3[33]), romDataMap(BANK2[28]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK3[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 
		 -> RXPacket(BANK3[33]), romDataMap(BANK2[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 33
		 -> romDataMap.name(BANK2[16]), packet.Message(BANK0[32]), packet.Message(BANK0[32]), main@packet(BANK1[33]), 
		 -> STR_6(CODE[4]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK2[17]), STR_7(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[6]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendTXBuffer@packet	PTR struct . size(1) Largest target is 33
		 -> TXPacket(BANK3[33]), RXPacket(BANK3[33]), 

    lastTXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), TXPacket(BANK3[33]), RXPacket(BANK3[33]), 

    nrf24l01SendPacket@txPacket	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK2[28]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sendMessage@topic	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_7(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[6]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    sendMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK2[28]), 


Critical Paths under _main in COMMON

    _main->_EEPROMWrite
    _main->___lbtoft
    _main->_strcpy
    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01GetPipe->___lwmod
    _sendMessage->___lbtoft
    _sendMessage->_strcpy
    _sleepListren->_sleepMs
    _nrf24l01SendPacket->_sleepMs
    _nrf24l01SendPacket->_strcpy
    _exception->_EEPROMWrite
    _ftoa->___lltoft
    _sprintf->___wmul
    ___ftsub->___lltoft
    _getADCValue->___awtoft
    _getADCValue->_sleepMs
    ___ftadd->___awtoft

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01GetPipe->___lwmod
    _nrf24l01SendPacket->_strcpy
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    ___lwtoft->___ftpack
    ___lbtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sendMessage
    _loop->_sendMessage
    _sendMessage->_strcat
    _strcat->_ftoa

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_loop

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   99349
                                             28 BANK1     35    35      0
                         _EEPROMRead
                        _EEPROMWrite
                           ___lbtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                        _sendMessage
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    1914
                                             15 BANK0      1     1      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                9     9      0    1914
                                              3 COMMON     1     1      0
                                              7 BANK0      8     8      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    3     3      0     611
                                              0 COMMON     3     3      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      4     4      0     807
                                              8 BANK0      4     4      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     440
                                              0 COMMON     4     0      4
                                              7 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _loop                                                45    45      0   63011
                                              0 BANK4     45    45      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft
                        _getADCValue
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _sendMessage                                          9     2      7   27808
                                             19 BANK1      9     2      7
                         _EEPROMRead (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                 _nrf24l01SendPacket
                       _sleepListren
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     751
                                             13 BANK1      6     2      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _sleepListren                                         2     0      2     920
                                              7 BANK0      2     0      2
                            _sleepMs
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendPacket                                   4     2      2    4861
                                              9 BANK0      4     2      2
                          _exception
                    _nrf24l01Service
                            _sleepMs
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     565
                                              0 COMMON     4     0      4
                                              7 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    2793
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                  _nrf24l01SetTXPipe
                             _strcmp
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SetTXPipe                                   1     1      0     226
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) ___bmul                                              3     2      1     164
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     968
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     618
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     463
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 (3) _exception                                            1     1      0     574
                                              7 BANK0      1     1      0
                        _EEPROMWrite
 ---------------------------------------------------------------------------------
 (4) _EEPROMWrite                                          4     1      3     543
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                13     9      4   19094
                                              0 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             34    24     10    3016
                                             28 BANK0     26    16     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      99
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     552
                                              0 COMMON     4     0      4
                                              7 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     440
                                              0 COMMON     1     1      0
                                             20 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     449
                                              7 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             5     1      4    3741
                                              0 COMMON     4     0      4
                                             12 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             10     6      4     579
                                             56 BANK0     10     6      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6104
                                             22 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     273
                                             44 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             12     6      6    4439
                                             44 BANK0     12     6      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               6     0      6     406
                                              7 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                          9     6      3   15553
                                             35 BANK0      9     6      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            _sleepMs
 ---------------------------------------------------------------------------------
 (3) _sleepMs                                              4     2      2     785
                                              0 COMMON     4     2      2
                           _resetWDT
 ---------------------------------------------------------------------------------
 (4) _resetWDT                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             13     7      6    4995
                                             22 BANK0     13     7      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             10     4      6    5800
                                             12 BANK0     10     4      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3772
                                              0 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3878
                                              0 COMMON     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___lbtoft                                             5     1      4    3566
                                              0 COMMON     4     0      4
                                             12 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             5     0      5    3535
                                              7 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (1) _EEPROMRead                                           2     0      2     166
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  7     7      0    3874
                                              0 BANK0      7     7      0
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (10) _nrf24l01ISR                                         0     0      0    3874
                       _nrf24l01Send
                    _nrf24l01Service
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    2793
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                  _nrf24l01SetTXPipe
                             _strcmp
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SetTXPipe                                   1     1      0     226
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) ___bmul                                              3     2      1     164
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     968
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     618
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     463
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROMRead
   _EEPROMWrite
   ___lbtoft
     ___ftpack
   _loop
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
     ___lwtoft
       ___ftpack
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleepMs
         _resetWDT
     _sendMessage
       _EEPROMRead (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
       _memset (ARG)
       _nrf24l01SendPacket (ARG)
         _exception
           _EEPROMWrite
         _nrf24l01Service
           _memset
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
           _nrf24l01SendTXBuffer
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
             _nrf24l01SetRXMode
               _nrf24l01Send
                 _nrf24l01SPIEnd
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
             _strlen
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _nrf24l01SetTXPipe
             ___bmul
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
           _strcmp
         _sleepMs
           _resetWDT
         _strcpy
       _sleepListren (ARG)
         _sleepMs
           _resetWDT
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _sleepMs
                   _resetWDT
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
       _strcpy (ARG)
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
     _nrf24l01SPISend
     _nrf24l01SPIStart
   _sendMessage
     _EEPROMRead (ARG)
     ___lbtoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleepMs
             _resetWDT
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleepMs
             _resetWDT
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleepMs
         _resetWDT
     _memset (ARG)
     _nrf24l01SendPacket (ARG)
       _exception
         _EEPROMWrite
       _nrf24l01Service
         _memset
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
         _nrf24l01SendTXBuffer
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _strlen
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _nrf24l01SetTXPipe
           ___bmul
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
         _strcmp
       _sleepMs
         _resetWDT
       _strcpy
     _sleepListren (ARG)
       _sleepMs
         _resetWDT
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
     _strcpy (ARG)
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
     _nrf24l01Service
       _memset
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SendTXBuffer
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _strlen
       _nrf24l01SetRXMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _strcmp
     _nrf24l01SetRXMode
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            4      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               4      4       4       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       8       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     42      49       5       91.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     3F      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      2D       9       56.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      42      11       82.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50     2D      2D      13       56.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     135      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     13D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Tue Sep 04 13:49:19 2018

                   __CFG_CP$OFF 0000                              l55 086D                sendMessage@value 00B7  
              sendMessage@topic 00B5             ___wmul@multiplicand 0072                    ___ftadd@exp1 0035  
                  ___ftadd@exp2 0034               sendMessage@packet 00B3                     __CFG_LVP$ON 0000  
                  ___ftadd@sign 0033                             l325 0751                             l351 09B1  
                           l352 09B0                             l281 096C                             l178 0FB7  
                           l522 0122                             l268 0B70                             l519 0103  
                           l545 092E                             l568 08A1                             l755 0D9A  
                           l756 0DA2                             l839 0EAC                             l970 0B01  
                           l779 03CA                    __CFG_CPD$OFF 0000                             _ISR 0004  
                           _isr 00E1                             wreg 0009                            ?_ISR 0070  
                  ___ftdiv@cntr 003D                    ___ftdiv@sign 0042                  ??_nrf24l01Init 002F  
                          l4003 0150                            l4021 0192                            l4031 01BC  
                          l4025 01A6                            l4017 0183                            l4009 0156  
                          l4131 0681                            l4115 065D                            l4045 0216  
                          l4029 01B9                            l4301 0978                            l4071 0B89  
                          l4127 0679                            l4119 0665                            l4207 0A53  
                          l4039 01D1                            l4047 0060                            l4231 0A2A  
                          l4153 090E                            l4209 0A63                            l4049 0221  
                          l4225 0ADB                            l4321 0CDE                            l4057 08A9  
                          l4217 08B5                            l4233 0A36                            l4075 0B9F  
                          l4163 0E58                            l4323 0CF5                            l4235 0A3E  
                          l4093 060C                            l4181 0E88                            l4341 0A1E  
                          l4431 0F7E                            l4191 0EA3                            l4247 0550  
                          l4271 0C97                            l4353 09E4                            l4193 0EAF  
                          l4185 0E96                            l4337 0A0C                            l4505 06EE  
                          l4363 076A                            l4443 0FF1                            l4427 0F86  
                          l4099 0622                            l3643 0872                            l4339 09FF  
                          l4507 0703                            l3661 0D5D                            l3821 03A9  
                          l3813 0396                            l4445 0FF8                            l4429 0F91  
                          l4197 0EBD                            l3733 0864                            l4517 0722  
                          l4269 0C79                            l4613 02A5                            l3671 0D73  
                          l3831 03C6                            l3807 0383                            l4439 0FD9  
                          l3911 094B                            l4623 02EC                            l3681 0D94  
                          l3665 0D64                            l3817 03A0                            l4369 0780  
                          l3761 0D20                            l3913 0956                            l4529 073F  
                          l4481 06BE                            l3905 08EE                            l3835 03DC  
                          l3827 03BC                            l3819 03A5                            l4395 07DA  
                          l4387 07C1                            l3739 0927                            l3923 0B41  
                          l4475 06B4                            l3677 0D87                            l3669 0D6E  
                          l3773 0D4B                            l3861 0BF4                            l4733 0B08  
                          l4629 02FB                            l3679 0D8C                            l3839 03EE  
                          l3759 0D12                            l3863 0C02                            l3871 0C25  
                          l4671 0AC3                            l4735 0B28                            l3849 0409  
                          l3785 0353                            l3881 0A7D                            l3769 0D40  
                          l3961 0093                            l3929 0B49                            l4665 0AAB  
                          l3795 0369                            l3883 0A89                            l3867 0C1A  
                          l3955 0083                            l4667 0AB7                            l4675 0ACC  
                          l3789 035A                            l3893 0A99                            l3981 00FF  
                          l3983 0105                            l3897 0AA1                            l3993 0131  
                          l3969 00C1                            l3987 010A                            l3979 00D0  
                          l4867 0F57                            STR_1 1052                    __CFG_WDTE$ON 0000  
                          STR_2 1052                            STR_3 1034                            STR_4 1044  
                          STR_5 103F                            STR_6 104E                            STR_7 1049  
                          STR_8 1029                            u4015 03AA                            u4105 0BF7  
                          u4045 03BD                            u4125 0C10                            u4135 0C1B  
                          u4164 0A85                            u4165 0A83                            u4405 018A  
                          u5205 0AC4                            u4415 019C                            u3705 0DA9  
                          u3625 0D69                            u4425 01AE                            u3645 0D82  
                          u3805 0D15                            u4615 0682                            u5175 0AAE  
                          u5407 09D0                            u3665 0D8F                            u4625 0688  
                          u4545 062E                            u4705 0E89                            u3825 0D21  
                          u4385 0179                            u5417 0CFB                            u4555 063E  
                          u3835 0D35                            u5427 0B53                            u5195 0ABD  
                          u5275 0B16                            u3845 0D41                            u3765 092F  
                          u5437 0B64                            u4575 0666                            u4735 0EA4  
                          u3775 0934                            u5447 0B6D                            u4585 066C  
                          u5457 083B                            u3955 0384                            u4675 0E5F  
                          u5467 082E                            u5387 0EE2                            u4765 0A58  
                          u5397 09C4                            u4935 0792                            u4864 0972  
                          u3985 0397                            u4945 07A2                            u4865 0971  
                          u4955 07C2                            u4965 07D1                            u4975 07DB  
                          _WPUA 020C                            _WPUC 020E  __size_of_nrf24l01InterfaceInit 001E  
                  __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 099C  
                          ___sp 216D                            _main 0EC6                            _ftoa 050E  
                  ___ftpack@arg 0027                            _loop 0421                    ___ftpack@exp 002A  
                          fsr0h 0005                            fsr1h 0007                            indf0 0000  
                          fsr0l 0004                            fsr1l 0006                            btemp 0074  
                 __CFG_BORV$LOW 0000                            start 002D           nrf24l01SetRXPipe@pipe 0071  
           __size_of_EEPROMRead 000C                   __CFG_CSWEN$ON 0000                   __CFG_MCLRE$ON 0000  
                  ___ftmul@cntr 0056                    ___ftmul@sign 0057     __size_of_nrf24l01SendPacket 0046  
                         ??_ISR 0020                    ___fttol@exp1 0061            __size_of_getADCValue 00A5  
                  ___fttol@lval 005D                           ?_main 0070                           ?_ftoa 00A0  
                         ?_loop 0070                 __end_of___ftadd 0421                 __end_of___ftdiv 07FC  
               __end_of___ftneg 082D                 __end_of___lldiv 0D54                 __end_of___ftmul 06A9  
               EEPROMWrite@data 0072                 __end_of___llmod 0C2E                 __end_of___ftsub 0924  
               __end_of___fttol 0EC6                  __CFG_DEBUG$OFF 0000                 __end_of___lwmod 0AD1  
                         i1l296 0C42                           _TMR1H 001A                           _TMR1L 0019  
                 __CFG_PWRTE$ON 0000                    ___lltoft@exp 002C                   ___awtoft@sign 0073  
               __end_of_dpowers 1028                 __end_of_isdigit 0866                   ___ftpack@sign 002B  
                         _rloop 00E7                           ftoa@f 00A0                           ftoa@l 00A8  
                __CFG_BOREN$OFF 0000                 __end_of_sleepMs 0AA4                           ltemp0 0074  
                         ltemp1 0078                           ltemp2 007C                           ltemp3 0076  
                         ttemp0 0074                           ttemp1 0077                           ttemp2 007A  
                         ttemp3 007D                           status 0003                           wtemp0 0074  
                         wtemp1 0076                           wtemp2 0078                           wtemp3 007A  
                         wtemp4 007C                           wtemp5 007E                 __end_of_sprintf 0227  
             getADCValue@adcSum 0049                _nrf24l01SPIStart 0836            __size_of_EEPROMWrite 001F  
               __initialization 002F          nrf24l01InitRegisters@i 002D                    __end_of_main 0F5B  
                  __end_of_ftoa 05F5                    __end_of_loop 050E                          ??_main 00BC  
                 ___fttol@sign1 005C                          ??_ftoa 0074                          ??_loop 0074  
                  ?_sendMessage 00B3        __size_of_nrf24l01SPISend 000F                ___llmod@dividend 0038  
                        _ADRESH 009C                          _ADRESL 009B                __end_of___awtoft 09FC  
                        _ANSELA 018C                          _ANSELC 018E                __end_of___ftpack 0DB9  
              __end_of___lbtoft 08E9                __end_of___lltoft 0A78                          _ODCONA 028C  
      __size_of_nrf24l01GetPipe 0034                          _ODCONC 028E                          i1l4701 0C5C  
                        i1l4705 0C68                          i1l4707 0C6A                          i1l4709 0C6D  
                        i1l4691 0C43                          i1l4693 0C46                          i1l4781 001E  
                        _INLVLA 038C                          _INLVLC 038E                __end_of___lwtoft 089D  
      __size_of_nrf24l01Service 00AA            __size_of_nrf24l01ISR 0046                          ___bmul 089D  
                        ___ftge 0B72                          ___wmul 0924                       ??___ftadd 0032  
                __CFG_STVREN$ON 0000                       ??___ftdiv 003C                       ??___ftneg 0074  
                     ??___lldiv 0070                       ??___ftmul 0074                       ??___llmod 0070  
                     ??___ftsub 0074                       ??___fttol 0074                       ??___lwmod 0074  
          __end_of_nrf24l01Init 09DA            __end_of_nrf24l01Send 0888                          _memset 0AD1  
         _nrf24l01InitRegisters 0227                          _rcount 00E3                          _rlimit 00E5  
                        _status 0062                          _strcat 0A25                          _strcmp 09FC  
                        _strcpy 08E9                          _strlen 0942                          ftoa@cp 00AC  
         ___ftmul@f3_as_product 0053                __end_of_resetWDT 0824                    ??_EEPROMRead 0072  
                     ??_isdigit 0070                          loop@ta 0223                          loop@vt 0220  
                     ??_sleepMs 0072                       ??_sprintf 0046              getADCValue@adcLoop 0048  
       __end_of__initialization 0053                      ___ftadd@f1 002C                      ___ftadd@f2 002F  
                    ___ftge@ff1 0027                      ___ftge@ff2 002A              getADCValue@channel 0047  
                    ___ftdiv@f1 0039                      ___ftdiv@f2 0036                      ___ftdiv@f3 003E  
                    ___ftneg@f1 004C                      ___awtoft@c 0070                      ___lbtoft@c 002C  
                    ___ftmul@f1 004C                      ___ftmul@f2 004F              __end_of_EEPROMRead 084B  
                    ___ftsub@f1 0039                      ___ftsub@f2 0036                      ___fttol@f1 0058  
                __pcstackCOMMON 0070                    __pidataBANK1 07FC   __size_of_nrf24l01SendTXBuffer 0047  
                    ___lltoft@c 0070                      ___lwtoft@c 0070                    sprintf@width 0051  
                    __pbssBANK0 0062                      __pbssBANK1 00DF                      __pbssBANK2 0120  
                    __pbssBANK3 01A0           sendMessage@ftoaStatus 00BA              __size_of_exception 000D  
             ??_nrf24l01GetPipe 0028                      __pmaintext 0EC6                         ?___ftge 0027  
                       ?___wmul 0070                 __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 0B37  
             _nrf24l01SetRXPipe 0960          ?_nrf24l01InitRegisters 0070                      __pintentry 0004  
             _nrf24l01SetTXPipe 0BAE                       ?___awtoft 0070                       ?___ftpack 0027  
                     ?___lbtoft 0070              ?_nrf24l01SetRXPipe 0070                       ?___lltoft 0070  
           __CFG_RSTOSC$HFINT32 0000                         ?_strcat 00AD                         ?_strcpy 0070  
                     ?___lwtoft 0070           __end_of_n_ADDRESS_MUL 1029            __size_of_sendMessage 0086  
      __end_of_nrf24l01SPIStart 083F             ??_nrf24l01SetRXPipe 0070                         _NVMADRH 0892  
                       _NVMADRL 0891                         _NVMDATL 0893                         _NVMCON2 0896  
                       _SSP1BUF 0211           _nrf24l01InterfaceInit 097E      __end_of_nrf24l01SendPacket 0CBA  
                     ?_resetWDT 0070                   ??_getADCValue 0046           __size_of_nrf24l01Init 001F  
         __size_of_nrf24l01Send 0013       __end_of_nrf24l01SetRXMode 0B72       __end_of_nrf24l01SetRXPipe 097E  
                 ?_sleepListren 0027       __end_of_nrf24l01SetTXPipe 0BEB                 __size_of___bmul 0018  
               __size_of___ftge 003C                         ___ftadd 032B                         ___ftdiv 0753  
                       ___ftneg 0824                         ___lldiv 0D01                 __size_of___wmul 001E  
                       ___ftmul 05F5                         ___llmod 0BEB                         ___ftsub 0906  
                       ___fttol 0E3F                         ___lwmod 0AA4                      ??___awtoft 0073  
                    ??___ftpack 0070                      ??___lbtoft 0074                 __size_of_memset 0032  
        EEPROMWrite@GIEBitValue 0073                      ??___lltoft 0074                         __ptext1 09BB  
                       __ptext2 097E                         __ptext3 0227                         __ptext4 0960  
                       __ptext5 0B03                         __ptext6 0AA4                         __ptext7 0421  
                       __ptext8 0DB9                         __ptext9 0A25                      ??___lwtoft 0073  
               __size_of_strcat 0029                 __size_of_strcmp 0029               __end_of_exception 0858  
               __size_of_strcpy 001D                 __size_of_strlen 001E                    __size_of_ISR 0029  
                     _T1CONbits 001B                         _counter 00E9                         _dpowers 1000  
                       _isdigit 0858                         _romData 00EB                         _sleepMs 0A78  
                     _IOCAPbits 0391                         _waiting 0067                         _sprintf 005A  
                       clrloop0 0818            end_of_initialization 0053                         ftoa@buf 013C  
                       ftoa@rem 00A4                    _nrf24l01Init 09BB                    _nrf24l01Send 0875  
                    _romDataMap 0120                   ??_EEPROMWrite 0073                nrf24l01GetPipe@i 002B  
               ___lldiv@divisor 0027                 ___lldiv@counter 0033                      ??_resetWDT 0070  
                ??_sleepListren 0074             __end_of_getADCValue 1000                       _PORTAbits 000C  
                     _PORTCbits 000E                       _TRISAbits 008C                       _TRISCbits 008E  
              __CFG_FEXTOSC$OFF 0000                   ??_nrf24l01ISR 0070          ?_nrf24l01InterfaceInit 0070  
                   ___ftdiv@exp 0041                      main@packet 00BE      __size_of_nrf24l01SetRXMode 003B  
    __size_of_nrf24l01SetRXPipe 001E                     ___ftmul@exp 0052      __size_of_nrf24l01SetTXPipe 003D  
           __end_of_EEPROMWrite 09BB                  __end_of___bmul 08B5                  __end_of___ftge 0BAE  
                __end_of___wmul 0942                  __end_of_memset 0B03                  __end_of_strcat 0A4E  
                __end_of_strcmp 0A25                    _lastTXPacket 0068                  __end_of_strcpy 0906  
                __end_of_strlen 0960             start_initialization 002F                 _nrf24l01SPISend 0866  
                   __end_of_ISR 002D    __end_of_nrf24l01SendTXBuffer 0D01                      ftoa@status 00A3  
     nrf24l01SetRXPipe@enRXAddr 0072                 _nrf24l01GetPipe 0B03         __size_of_nrf24l01SPIEnd 0009  
               ___llmod@divisor 0034                 ___llmod@counter 0070                 _nrf24l01Service 06A9  
       ??_nrf24l01InitRegisters 0073                __CFG_LPBOREN$OFF 0000                     _getADCValue 0F5B  
                      ??___ftge 0070             __end_of_nrf24l01ISR 0C74                        ??___wmul 0074  
                   __pdataBANK1 00EB                        ??_strcat 0074                        ??_strcpy 0074  
             __size_of___awtoft 0022               __size_of___ftpack 0065               __size_of___lbtoft 001B  
             __size_of___lltoft 002A                       ___latbits 0002               __size_of___lwtoft 0015  
                 __pcstackBANK0 0020                   __pcstackBANK1 00A0                   __pcstackBANK4 0220  
          __end_of_sleepListren 08CE                    _isdigit$1995 0070                     sprintf@flag 004A  
                   sprintf@prec 0053                      loop@packet 022C                     _EEPROMWrite 099C  
           nrf24l01GetPipe@name 002A             nrf24l01GetPipe@pipe 0029               __size_of_resetWDT 0007  
                      ?___ftadd 002C                        ?___ftdiv 0036                        ?___ftneg 004C  
                      ?___lldiv 0027                        ?___ftmul 004C                        ?___llmod 0034  
                      ?___ftsub 0036                        ?___fttol 0058                        ?___lwmod 0070  
          __end_of_n_ADDRESS_P0 103F         __end_of_nrf24l01SPISend 0875       nrf24l01InitRegisters@enAA 002B  
                 ??_sendMessage 0074              _nrf24l01SendPacket 0C74             sleepMs@milliseconds 0070  
       __end_of_nrf24l01GetPipe 0B37                        ?_isdigit 0070                       _loop$2248 0226  
                     _loop$2249 0229                        ?_sleepMs 0070                       _exception 084B  
           ?_nrf24l01SendPacket 0029                        ?_sprintf 003C              EEPROMWrite@address 0070  
       __end_of_nrf24l01Service 0753                  ___wmul@product 0027                     _nrf24l01ISR 0C2E  
                     clear_ram0 0817                        _PIE0bits 0090                        _PIE1bits 0091  
                      _PIR0bits 0010                        _PIR1bits 0011            ??_nrf24l01SendPacket 0074  
          _nrf24l01SendTXBuffer 0CBA     nrf24l01SendPacket@loopCount 002B                      _ADCON0bits 009D  
                    _ADCON1bits 009E               ___wmul@multiplier 0070                        _WPUAbits 020C  
                      _RXPacket 01A0                        _TXPacket 01C1                      ?_exception 0070  
           sleepListren@seconds 0027             __end_of_sendMessage 0E3F         ??_nrf24l01InterfaceInit 0070  
                _nrf24l01SPIEnd 082D               EEPROMRead@address 0070                __size_of___ftadd 00F6  
              __size_of___ftdiv 00A9                __size_of___ftneg 0009                __size_of___lldiv 0053  
              __size_of___ftmul 00B4                __size_of___llmod 0043                __size_of___ftsub 001E  
              __size_of___fttol 0087                __size_of___lwmod 002D                        ___awtoft 09DA  
                      ___ftpack 0D54                        ___lbtoft 08CE                        ___int_sp 22AF  
                      ___lltoft 0A4E           __size_of_sleepListren 0019                      _ANSELAbits 018C  
                      ___lwtoft 0888                      _ANSELCbits 018E                      _EEPROMRead 083F  
              ?_nrf24l01GetPipe 0070                      sprintf@val 004C                   _n_ADDRESS_MUL 1028  
                    strcat@from 00AF                __size_of_isdigit 000E                        __ptext10 08B5  
                      __ptext11 0C74                        __ptext20 0875                        __ptext12 08E9  
                      __ptext21 0836                        __ptext13 06A9                      _T1GCONbits 001C  
                      __ptext30 0924                        __ptext22 0866                        __ptext14 09FC  
                      __ptext31 0BEB                        __ptext23 082D                        __ptext15 0BAE  
                      __ptext40 0A78                        __ptext32 0D01                        __ptext24 0AD1  
                      __ptext16 089D                        __ptext41 081D                        __ptext33 0A4E  
                      __ptext25 084B                        __ptext17 0CBA                        __ptext50 0C2E  
                      __ptext42 0753                        __ptext34 0E3F                        __ptext26 099C  
                      __ptext18 0942                        __ptext43 032B                        __ptext35 0906  
                      __ptext27 050E                        __ptext19 0B37                        __ptext44 09DA  
                      __ptext36 0824                        __ptext28 005A                        __ptext45 0888  
                      __ptext37 05F5                        __ptext29 0858                        __ptext46 08CE  
                      __ptext38 0B72                        __ptext47 0D54                        __ptext39 0F5B  
                      __ptext48 083F                __size_of_sleepMs 002C                    _SSP1CON1bits 0215  
        __end_of_nrf24l01SPIEnd 0836                        _distance 00DF                __size_of_sprintf 01CD  
                   _OSCCON1bits 0919                      strcpy@from 0072                   __size_of_main 0095  
                 __size_of_ftoa 00E7                   __size_of_loop 00ED    nrf24l01InitRegisters@channel 0027  
  nrf24l01InitRegisters@feature 0029                    sleepMs@wdtps 0073              exception@exception 0027  
                    _RC0PPSbits 0EA0                        _resetWDT 081D    nrf24l01InitRegisters@rfSetup 002A  
                    _RC1PPSbits 0EA1                    ?_getADCValue 0043                      _RC2PPSbits 0EA2  
                  _sleepListren 08B5  __size_of_nrf24l01InitRegisters 0104   __end_of_nrf24l01InitRegisters 032B  
  nrf24l01InitRegisters@setupAW 0028                      _ODCONAbits 028C                    _SSP1STATbits 0214  
                      main@pipe 00BD      nrf24l01SendPacket@txPacket 0029                     _sendMessage 0DB9  
                    _INTCONbits 000B                     _NVMCON1bits 0895                      _FVRCONbits 0117  
                   ??_exception 0074                  __pstringtext10 0000                        isdigit@c 0071  
                      intlevel1 0000                       sprintf@ap 004B                       sprintf@sp 0050  
                  _n_ADDRESS_P0 103A                ___lwmod@dividend 0072                ___lldiv@dividend 002B  
                  ?_EEPROMWrite 0070               __CFG_CLKOUTEN$OFF 0000       __size_of_nrf24l01SPIStart 0009  
                 __pstringtext1 1000                   __pstringtext2 103A                   __pstringtext3 1028  
                 __pstringtext4 1034                   __pstringtext5 103F                   __pstringtext6 1044  
                 __pstringtext7 1049                   __pstringtext8 104E                   __pstringtext9 1052  
                      sprintf@c 0055                        sprintf@f 003C      nrf24l01InitRegisters@DynPD 002C  
                      strcat@cp 00B1                        strcat@to 00AD                     ?_EEPROMRead 0070  
              ___lldiv@quotient 002F                 ___lwmod@divisor 0070                        strcpy@cp 0027  
                      strcpy@to 0070                 ___lwmod@counter 0027                      _WDTCONbits 0097  
                 ?_nrf24l01Init 0070                      _STATUSbits 0003                    ?_nrf24l01ISR 0070  
