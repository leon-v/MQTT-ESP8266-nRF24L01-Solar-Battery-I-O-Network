

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sat Aug 04 06:53:17 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    25                           	psect	clrtext,global,class=CODE,delta=2
    26                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    27                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    28                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    29                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    30                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    31                           	psect	text1,local,class=CODE,merge=1,delta=2
    32                           	psect	text2,local,class=CODE,merge=1,delta=2
    33                           	psect	text3,local,class=CODE,merge=1,delta=2
    34                           	psect	text4,local,class=CODE,merge=1,delta=2
    35                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text6,local,class=CODE,merge=1,delta=2
    37                           	psect	text7,local,class=CODE,merge=1,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text9,local,class=CODE,merge=1,delta=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2
    41                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2
    43                           	psect	text13,local,class=CODE,merge=1,delta=2
    44                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2
    50                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text22,local,class=CODE,merge=1,delta=2
    53                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text33,local,class=CODE,merge=1,delta=2
    64                           	psect	text34,local,class=CODE,merge=1,delta=2
    65                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    69                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	intentry,global,class=CODE,delta=2
    72                           	psect	text42,local,class=CODE,merge=1,delta=2
    73                           	psect	text43,local,class=CODE,merge=1,delta=2
    74                           	psect	text44,local,class=CODE,merge=1,delta=2
    75                           	psect	text45,local,class=CODE,merge=1,delta=2
    76                           	psect	text46,local,class=CODE,merge=1,delta=2
    77                           	psect	text47,local,class=CODE,merge=1,delta=2
    78                           	psect	text48,local,class=CODE,merge=1,delta=2
    79                           	psect	text49,local,class=CODE,merge=1,delta=2
    80                           	psect	text50,local,class=CODE,merge=1,delta=2
    81                           	psect	text51,local,class=CODE,merge=1,delta=2
    82                           	psect	text52,local,class=CODE,merge=1,delta=2
    83                           	psect	text53,local,class=CODE,merge=1,delta=2
    84                           	psect	text54,local,class=CODE,merge=1,delta=2
    85                           	psect	text55,local,class=CODE,merge=1,delta=2
    86                           	psect	text56,local,class=CODE,merge=1,delta=2
    87                           	dabs	1,0x7E,2
    88  0000                     
    89                           ; Version 2.00
    90                           ; Generated 27/05/2018 GMT
    91                           ; 
    92                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    93                           ; All rights reserved.
    94                           ; 
    95                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    96                           ; 
    97                           ; Redistribution and use in source and binary forms, with or without modification, are
    98                           ; permitted provided that the following conditions are met:
    99                           ; 
   100                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   101                           ;        conditions and the following disclaimer.
   102                           ; 
   103                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   104                           ;        of conditions and the following disclaimer in the documentation and/or other
   105                           ;        materials provided with the distribution.
   106                           ; 
   107                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   108                           ;        software without specific prior written permission.
   109                           ; 
   110                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   111                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   112                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   113                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   114                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   115                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   116                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   117                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   118                           ; 
   119                           ; 
   120                           ; Code-generator required, PIC16LF18325 Definitions
   121                           ; 
   122                           ; SFR Addresses
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0006                     	;# 
   130  0007                     	;# 
   131  0008                     	;# 
   132  0009                     	;# 
   133  000A                     	;# 
   134  000B                     	;# 
   135  000C                     	;# 
   136  000E                     	;# 
   137  0010                     	;# 
   138  0011                     	;# 
   139  0012                     	;# 
   140  0013                     	;# 
   141  0014                     	;# 
   142  0015                     	;# 
   143  0015                     	;# 
   144  0016                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  0019                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001B                     	;# 
   152  001C                     	;# 
   153  001D                     	;# 
   154  001E                     	;# 
   155  001F                     	;# 
   156  008C                     	;# 
   157  008E                     	;# 
   158  0090                     	;# 
   159  0091                     	;# 
   160  0092                     	;# 
   161  0093                     	;# 
   162  0094                     	;# 
   163  0097                     	;# 
   164  009B                     	;# 
   165  009B                     	;# 
   166  009C                     	;# 
   167  009D                     	;# 
   168  009E                     	;# 
   169  009F                     	;# 
   170  010C                     	;# 
   171  010E                     	;# 
   172  0111                     	;# 
   173  0112                     	;# 
   174  0113                     	;# 
   175  0114                     	;# 
   176  0115                     	;# 
   177  0116                     	;# 
   178  0117                     	;# 
   179  0118                     	;# 
   180  0119                     	;# 
   181  018C                     	;# 
   182  018E                     	;# 
   183  0199                     	;# 
   184  0199                     	;# 
   185  0199                     	;# 
   186  019A                     	;# 
   187  019A                     	;# 
   188  019A                     	;# 
   189  019B                     	;# 
   190  019B                     	;# 
   191  019B                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019C                     	;# 
   195  019C                     	;# 
   196  019C                     	;# 
   197  019D                     	;# 
   198  019D                     	;# 
   199  019D                     	;# 
   200  019E                     	;# 
   201  019E                     	;# 
   202  019E                     	;# 
   203  019F                     	;# 
   204  019F                     	;# 
   205  019F                     	;# 
   206  019F                     	;# 
   207  019F                     	;# 
   208  020C                     	;# 
   209  020E                     	;# 
   210  0211                     	;# 
   211  0211                     	;# 
   212  0212                     	;# 
   213  0212                     	;# 
   214  0213                     	;# 
   215  0213                     	;# 
   216  0214                     	;# 
   217  0214                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0216                     	;# 
   223  0216                     	;# 
   224  0217                     	;# 
   225  0217                     	;# 
   226  0219                     	;# 
   227  021A                     	;# 
   228  021B                     	;# 
   229  021C                     	;# 
   230  021D                     	;# 
   231  021D                     	;# 
   232  021E                     	;# 
   233  021F                     	;# 
   234  028C                     	;# 
   235  028E                     	;# 
   236  0291                     	;# 
   237  0291                     	;# 
   238  0292                     	;# 
   239  0293                     	;# 
   240  0294                     	;# 
   241  0295                     	;# 
   242  0295                     	;# 
   243  0296                     	;# 
   244  0297                     	;# 
   245  0298                     	;# 
   246  029F                     	;# 
   247  030C                     	;# 
   248  030E                     	;# 
   249  0311                     	;# 
   250  0311                     	;# 
   251  0312                     	;# 
   252  0313                     	;# 
   253  0314                     	;# 
   254  0315                     	;# 
   255  0315                     	;# 
   256  0316                     	;# 
   257  0317                     	;# 
   258  0318                     	;# 
   259  038C                     	;# 
   260  038E                     	;# 
   261  0391                     	;# 
   262  0392                     	;# 
   263  0393                     	;# 
   264  0397                     	;# 
   265  0398                     	;# 
   266  0399                     	;# 
   267  039A                     	;# 
   268  039C                     	;# 
   269  039D                     	;# 
   270  039E                     	;# 
   271  039F                     	;# 
   272  0411                     	;# 
   273  0411                     	;# 
   274  0412                     	;# 
   275  0413                     	;# 
   276  0414                     	;# 
   277  0415                     	;# 
   278  0416                     	;# 
   279  0417                     	;# 
   280  0418                     	;# 
   281  0418                     	;# 
   282  0419                     	;# 
   283  041A                     	;# 
   284  041B                     	;# 
   285  041C                     	;# 
   286  041D                     	;# 
   287  041E                     	;# 
   288  041F                     	;# 
   289  0498                     	;# 
   290  0498                     	;# 
   291  0499                     	;# 
   292  049A                     	;# 
   293  049B                     	;# 
   294  049B                     	;# 
   295  049C                     	;# 
   296  049D                     	;# 
   297  049E                     	;# 
   298  049F                     	;# 
   299  0617                     	;# 
   300  0618                     	;# 
   301  0619                     	;# 
   302  0619                     	;# 
   303  061A                     	;# 
   304  061B                     	;# 
   305  061C                     	;# 
   306  061C                     	;# 
   307  061F                     	;# 
   308  0691                     	;# 
   309  0692                     	;# 
   310  0693                     	;# 
   311  0694                     	;# 
   312  0695                     	;# 
   313  0696                     	;# 
   314  0697                     	;# 
   315  0698                     	;# 
   316  0699                     	;# 
   317  0711                     	;# 
   318  0712                     	;# 
   319  0713                     	;# 
   320  0714                     	;# 
   321  0715                     	;# 
   322  0716                     	;# 
   323  0717                     	;# 
   324  0718                     	;# 
   325  0719                     	;# 
   326  0891                     	;# 
   327  0891                     	;# 
   328  0891                     	;# 
   329  0891                     	;# 
   330  0891                     	;# 
   331  0891                     	;# 
   332  0892                     	;# 
   333  0892                     	;# 
   334  0892                     	;# 
   335  0893                     	;# 
   336  0893                     	;# 
   337  0893                     	;# 
   338  0893                     	;# 
   339  0893                     	;# 
   340  0893                     	;# 
   341  0894                     	;# 
   342  0894                     	;# 
   343  0894                     	;# 
   344  0895                     	;# 
   345  0895                     	;# 
   346  0895                     	;# 
   347  0896                     	;# 
   348  0896                     	;# 
   349  0896                     	;# 
   350  089B                     	;# 
   351  0911                     	;# 
   352  0912                     	;# 
   353  0913                     	;# 
   354  0914                     	;# 
   355  0915                     	;# 
   356  0916                     	;# 
   357  0918                     	;# 
   358  0919                     	;# 
   359  091A                     	;# 
   360  091B                     	;# 
   361  091C                     	;# 
   362  091D                     	;# 
   363  091E                     	;# 
   364  091F                     	;# 
   365  0E0F                     	;# 
   366  0E10                     	;# 
   367  0E11                     	;# 
   368  0E12                     	;# 
   369  0E13                     	;# 
   370  0E14                     	;# 
   371  0E15                     	;# 
   372  0E16                     	;# 
   373  0E17                     	;# 
   374  0E18                     	;# 
   375  0E19                     	;# 
   376  0E1A                     	;# 
   377  0E1B                     	;# 
   378  0E1C                     	;# 
   379  0E1D                     	;# 
   380  0E1E                     	;# 
   381  0E1F                     	;# 
   382  0E20                     	;# 
   383  0E21                     	;# 
   384  0E22                     	;# 
   385  0E24                     	;# 
   386  0E25                     	;# 
   387  0E28                     	;# 
   388  0E29                     	;# 
   389  0E2A                     	;# 
   390  0E2B                     	;# 
   391  0E2C                     	;# 
   392  0E2D                     	;# 
   393  0E2E                     	;# 
   394  0E2F                     	;# 
   395  0E90                     	;# 
   396  0E91                     	;# 
   397  0E92                     	;# 
   398  0E94                     	;# 
   399  0E95                     	;# 
   400  0EA0                     	;# 
   401  0EA1                     	;# 
   402  0EA2                     	;# 
   403  0EA3                     	;# 
   404  0EA4                     	;# 
   405  0EA5                     	;# 
   406  0F0F                     	;# 
   407  0F10                     	;# 
   408  0F11                     	;# 
   409  0F12                     	;# 
   410  0F13                     	;# 
   411  0F14                     	;# 
   412  0F15                     	;# 
   413  0F16                     	;# 
   414  0F17                     	;# 
   415  0F18                     	;# 
   416  0F19                     	;# 
   417  0F1A                     	;# 
   418  0F1B                     	;# 
   419  0F1C                     	;# 
   420  0F1D                     	;# 
   421  0F1E                     	;# 
   422  0F1F                     	;# 
   423  0F20                     	;# 
   424  0F21                     	;# 
   425  0F22                     	;# 
   426  0F23                     	;# 
   427  0F24                     	;# 
   428  0F25                     	;# 
   429  0F26                     	;# 
   430  0F27                     	;# 
   431  0F28                     	;# 
   432  0F29                     	;# 
   433  0F2A                     	;# 
   434  0F2B                     	;# 
   435  0F2C                     	;# 
   436  0F2D                     	;# 
   437  0F2E                     	;# 
   438  0F2F                     	;# 
   439  0F30                     	;# 
   440  0F31                     	;# 
   441  0F32                     	;# 
   442  0F33                     	;# 
   443  0F34                     	;# 
   444  0F35                     	;# 
   445  0F36                     	;# 
   446  0F37                     	;# 
   447  0FE4                     	;# 
   448  0FE5                     	;# 
   449  0FE6                     	;# 
   450  0FE7                     	;# 
   451  0FE8                     	;# 
   452  0FE9                     	;# 
   453  0FEA                     	;# 
   454  0FEB                     	;# 
   455  0FED                     	;# 
   456  0FEE                     	;# 
   457  0FEF                     	;# 
   458  0000                     	;# 
   459  0001                     	;# 
   460  0002                     	;# 
   461  0003                     	;# 
   462  0004                     	;# 
   463  0005                     	;# 
   464  0006                     	;# 
   465  0007                     	;# 
   466  0008                     	;# 
   467  0009                     	;# 
   468  000A                     	;# 
   469  000B                     	;# 
   470  000C                     	;# 
   471  000E                     	;# 
   472  0010                     	;# 
   473  0011                     	;# 
   474  0012                     	;# 
   475  0013                     	;# 
   476  0014                     	;# 
   477  0015                     	;# 
   478  0015                     	;# 
   479  0016                     	;# 
   480  0016                     	;# 
   481  0017                     	;# 
   482  0018                     	;# 
   483  0019                     	;# 
   484  0019                     	;# 
   485  001A                     	;# 
   486  001B                     	;# 
   487  001C                     	;# 
   488  001D                     	;# 
   489  001E                     	;# 
   490  001F                     	;# 
   491  008C                     	;# 
   492  008E                     	;# 
   493  0090                     	;# 
   494  0091                     	;# 
   495  0092                     	;# 
   496  0093                     	;# 
   497  0094                     	;# 
   498  0097                     	;# 
   499  009B                     	;# 
   500  009B                     	;# 
   501  009C                     	;# 
   502  009D                     	;# 
   503  009E                     	;# 
   504  009F                     	;# 
   505  010C                     	;# 
   506  010E                     	;# 
   507  0111                     	;# 
   508  0112                     	;# 
   509  0113                     	;# 
   510  0114                     	;# 
   511  0115                     	;# 
   512  0116                     	;# 
   513  0117                     	;# 
   514  0118                     	;# 
   515  0119                     	;# 
   516  018C                     	;# 
   517  018E                     	;# 
   518  0199                     	;# 
   519  0199                     	;# 
   520  0199                     	;# 
   521  019A                     	;# 
   522  019A                     	;# 
   523  019A                     	;# 
   524  019B                     	;# 
   525  019B                     	;# 
   526  019B                     	;# 
   527  019B                     	;# 
   528  019B                     	;# 
   529  019C                     	;# 
   530  019C                     	;# 
   531  019C                     	;# 
   532  019D                     	;# 
   533  019D                     	;# 
   534  019D                     	;# 
   535  019E                     	;# 
   536  019E                     	;# 
   537  019E                     	;# 
   538  019F                     	;# 
   539  019F                     	;# 
   540  019F                     	;# 
   541  019F                     	;# 
   542  019F                     	;# 
   543  020C                     	;# 
   544  020E                     	;# 
   545  0211                     	;# 
   546  0211                     	;# 
   547  0212                     	;# 
   548  0212                     	;# 
   549  0213                     	;# 
   550  0213                     	;# 
   551  0214                     	;# 
   552  0214                     	;# 
   553  0215                     	;# 
   554  0215                     	;# 
   555  0215                     	;# 
   556  0215                     	;# 
   557  0216                     	;# 
   558  0216                     	;# 
   559  0217                     	;# 
   560  0217                     	;# 
   561  0219                     	;# 
   562  021A                     	;# 
   563  021B                     	;# 
   564  021C                     	;# 
   565  021D                     	;# 
   566  021D                     	;# 
   567  021E                     	;# 
   568  021F                     	;# 
   569  028C                     	;# 
   570  028E                     	;# 
   571  0291                     	;# 
   572  0291                     	;# 
   573  0292                     	;# 
   574  0293                     	;# 
   575  0294                     	;# 
   576  0295                     	;# 
   577  0295                     	;# 
   578  0296                     	;# 
   579  0297                     	;# 
   580  0298                     	;# 
   581  029F                     	;# 
   582  030C                     	;# 
   583  030E                     	;# 
   584  0311                     	;# 
   585  0311                     	;# 
   586  0312                     	;# 
   587  0313                     	;# 
   588  0314                     	;# 
   589  0315                     	;# 
   590  0315                     	;# 
   591  0316                     	;# 
   592  0317                     	;# 
   593  0318                     	;# 
   594  038C                     	;# 
   595  038E                     	;# 
   596  0391                     	;# 
   597  0392                     	;# 
   598  0393                     	;# 
   599  0397                     	;# 
   600  0398                     	;# 
   601  0399                     	;# 
   602  039A                     	;# 
   603  039C                     	;# 
   604  039D                     	;# 
   605  039E                     	;# 
   606  039F                     	;# 
   607  0411                     	;# 
   608  0411                     	;# 
   609  0412                     	;# 
   610  0413                     	;# 
   611  0414                     	;# 
   612  0415                     	;# 
   613  0416                     	;# 
   614  0417                     	;# 
   615  0418                     	;# 
   616  0418                     	;# 
   617  0419                     	;# 
   618  041A                     	;# 
   619  041B                     	;# 
   620  041C                     	;# 
   621  041D                     	;# 
   622  041E                     	;# 
   623  041F                     	;# 
   624  0498                     	;# 
   625  0498                     	;# 
   626  0499                     	;# 
   627  049A                     	;# 
   628  049B                     	;# 
   629  049B                     	;# 
   630  049C                     	;# 
   631  049D                     	;# 
   632  049E                     	;# 
   633  049F                     	;# 
   634  0617                     	;# 
   635  0618                     	;# 
   636  0619                     	;# 
   637  0619                     	;# 
   638  061A                     	;# 
   639  061B                     	;# 
   640  061C                     	;# 
   641  061C                     	;# 
   642  061F                     	;# 
   643  0691                     	;# 
   644  0692                     	;# 
   645  0693                     	;# 
   646  0694                     	;# 
   647  0695                     	;# 
   648  0696                     	;# 
   649  0697                     	;# 
   650  0698                     	;# 
   651  0699                     	;# 
   652  0711                     	;# 
   653  0712                     	;# 
   654  0713                     	;# 
   655  0714                     	;# 
   656  0715                     	;# 
   657  0716                     	;# 
   658  0717                     	;# 
   659  0718                     	;# 
   660  0719                     	;# 
   661  0891                     	;# 
   662  0891                     	;# 
   663  0891                     	;# 
   664  0891                     	;# 
   665  0891                     	;# 
   666  0891                     	;# 
   667  0892                     	;# 
   668  0892                     	;# 
   669  0892                     	;# 
   670  0893                     	;# 
   671  0893                     	;# 
   672  0893                     	;# 
   673  0893                     	;# 
   674  0893                     	;# 
   675  0893                     	;# 
   676  0894                     	;# 
   677  0894                     	;# 
   678  0894                     	;# 
   679  0895                     	;# 
   680  0895                     	;# 
   681  0895                     	;# 
   682  0896                     	;# 
   683  0896                     	;# 
   684  0896                     	;# 
   685  089B                     	;# 
   686  0911                     	;# 
   687  0912                     	;# 
   688  0913                     	;# 
   689  0914                     	;# 
   690  0915                     	;# 
   691  0916                     	;# 
   692  0918                     	;# 
   693  0919                     	;# 
   694  091A                     	;# 
   695  091B                     	;# 
   696  091C                     	;# 
   697  091D                     	;# 
   698  091E                     	;# 
   699  091F                     	;# 
   700  0E0F                     	;# 
   701  0E10                     	;# 
   702  0E11                     	;# 
   703  0E12                     	;# 
   704  0E13                     	;# 
   705  0E14                     	;# 
   706  0E15                     	;# 
   707  0E16                     	;# 
   708  0E17                     	;# 
   709  0E18                     	;# 
   710  0E19                     	;# 
   711  0E1A                     	;# 
   712  0E1B                     	;# 
   713  0E1C                     	;# 
   714  0E1D                     	;# 
   715  0E1E                     	;# 
   716  0E1F                     	;# 
   717  0E20                     	;# 
   718  0E21                     	;# 
   719  0E22                     	;# 
   720  0E24                     	;# 
   721  0E25                     	;# 
   722  0E28                     	;# 
   723  0E29                     	;# 
   724  0E2A                     	;# 
   725  0E2B                     	;# 
   726  0E2C                     	;# 
   727  0E2D                     	;# 
   728  0E2E                     	;# 
   729  0E2F                     	;# 
   730  0E90                     	;# 
   731  0E91                     	;# 
   732  0E92                     	;# 
   733  0E94                     	;# 
   734  0E95                     	;# 
   735  0EA0                     	;# 
   736  0EA1                     	;# 
   737  0EA2                     	;# 
   738  0EA3                     	;# 
   739  0EA4                     	;# 
   740  0EA5                     	;# 
   741  0F0F                     	;# 
   742  0F10                     	;# 
   743  0F11                     	;# 
   744  0F12                     	;# 
   745  0F13                     	;# 
   746  0F14                     	;# 
   747  0F15                     	;# 
   748  0F16                     	;# 
   749  0F17                     	;# 
   750  0F18                     	;# 
   751  0F19                     	;# 
   752  0F1A                     	;# 
   753  0F1B                     	;# 
   754  0F1C                     	;# 
   755  0F1D                     	;# 
   756  0F1E                     	;# 
   757  0F1F                     	;# 
   758  0F20                     	;# 
   759  0F21                     	;# 
   760  0F22                     	;# 
   761  0F23                     	;# 
   762  0F24                     	;# 
   763  0F25                     	;# 
   764  0F26                     	;# 
   765  0F27                     	;# 
   766  0F28                     	;# 
   767  0F29                     	;# 
   768  0F2A                     	;# 
   769  0F2B                     	;# 
   770  0F2C                     	;# 
   771  0F2D                     	;# 
   772  0F2E                     	;# 
   773  0F2F                     	;# 
   774  0F30                     	;# 
   775  0F31                     	;# 
   776  0F32                     	;# 
   777  0F33                     	;# 
   778  0F34                     	;# 
   779  0F35                     	;# 
   780  0F36                     	;# 
   781  0F37                     	;# 
   782  0FE4                     	;# 
   783  0FE5                     	;# 
   784  0FE6                     	;# 
   785  0FE7                     	;# 
   786  0FE8                     	;# 
   787  0FE9                     	;# 
   788  0FEA                     	;# 
   789  0FEB                     	;# 
   790  0FED                     	;# 
   791  0FEE                     	;# 
   792  0FEF                     	;# 
   793  0000                     	;# 
   794  0001                     	;# 
   795  0002                     	;# 
   796  0003                     	;# 
   797  0004                     	;# 
   798  0005                     	;# 
   799  0006                     	;# 
   800  0007                     	;# 
   801  0008                     	;# 
   802  0009                     	;# 
   803  000A                     	;# 
   804  000B                     	;# 
   805  000C                     	;# 
   806  000E                     	;# 
   807  0010                     	;# 
   808  0011                     	;# 
   809  0012                     	;# 
   810  0013                     	;# 
   811  0014                     	;# 
   812  0015                     	;# 
   813  0015                     	;# 
   814  0016                     	;# 
   815  0016                     	;# 
   816  0017                     	;# 
   817  0018                     	;# 
   818  0019                     	;# 
   819  0019                     	;# 
   820  001A                     	;# 
   821  001B                     	;# 
   822  001C                     	;# 
   823  001D                     	;# 
   824  001E                     	;# 
   825  001F                     	;# 
   826  008C                     	;# 
   827  008E                     	;# 
   828  0090                     	;# 
   829  0091                     	;# 
   830  0092                     	;# 
   831  0093                     	;# 
   832  0094                     	;# 
   833  0097                     	;# 
   834  009B                     	;# 
   835  009B                     	;# 
   836  009C                     	;# 
   837  009D                     	;# 
   838  009E                     	;# 
   839  009F                     	;# 
   840  010C                     	;# 
   841  010E                     	;# 
   842  0111                     	;# 
   843  0112                     	;# 
   844  0113                     	;# 
   845  0114                     	;# 
   846  0115                     	;# 
   847  0116                     	;# 
   848  0117                     	;# 
   849  0118                     	;# 
   850  0119                     	;# 
   851  018C                     	;# 
   852  018E                     	;# 
   853  0199                     	;# 
   854  0199                     	;# 
   855  0199                     	;# 
   856  019A                     	;# 
   857  019A                     	;# 
   858  019A                     	;# 
   859  019B                     	;# 
   860  019B                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019C                     	;# 
   865  019C                     	;# 
   866  019C                     	;# 
   867  019D                     	;# 
   868  019D                     	;# 
   869  019D                     	;# 
   870  019E                     	;# 
   871  019E                     	;# 
   872  019E                     	;# 
   873  019F                     	;# 
   874  019F                     	;# 
   875  019F                     	;# 
   876  019F                     	;# 
   877  019F                     	;# 
   878  020C                     	;# 
   879  020E                     	;# 
   880  0211                     	;# 
   881  0211                     	;# 
   882  0212                     	;# 
   883  0212                     	;# 
   884  0213                     	;# 
   885  0213                     	;# 
   886  0214                     	;# 
   887  0214                     	;# 
   888  0215                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0216                     	;# 
   893  0216                     	;# 
   894  0217                     	;# 
   895  0217                     	;# 
   896  0219                     	;# 
   897  021A                     	;# 
   898  021B                     	;# 
   899  021C                     	;# 
   900  021D                     	;# 
   901  021D                     	;# 
   902  021E                     	;# 
   903  021F                     	;# 
   904  028C                     	;# 
   905  028E                     	;# 
   906  0291                     	;# 
   907  0291                     	;# 
   908  0292                     	;# 
   909  0293                     	;# 
   910  0294                     	;# 
   911  0295                     	;# 
   912  0295                     	;# 
   913  0296                     	;# 
   914  0297                     	;# 
   915  0298                     	;# 
   916  029F                     	;# 
   917  030C                     	;# 
   918  030E                     	;# 
   919  0311                     	;# 
   920  0311                     	;# 
   921  0312                     	;# 
   922  0313                     	;# 
   923  0314                     	;# 
   924  0315                     	;# 
   925  0315                     	;# 
   926  0316                     	;# 
   927  0317                     	;# 
   928  0318                     	;# 
   929  038C                     	;# 
   930  038E                     	;# 
   931  0391                     	;# 
   932  0392                     	;# 
   933  0393                     	;# 
   934  0397                     	;# 
   935  0398                     	;# 
   936  0399                     	;# 
   937  039A                     	;# 
   938  039C                     	;# 
   939  039D                     	;# 
   940  039E                     	;# 
   941  039F                     	;# 
   942  0411                     	;# 
   943  0411                     	;# 
   944  0412                     	;# 
   945  0413                     	;# 
   946  0414                     	;# 
   947  0415                     	;# 
   948  0416                     	;# 
   949  0417                     	;# 
   950  0418                     	;# 
   951  0418                     	;# 
   952  0419                     	;# 
   953  041A                     	;# 
   954  041B                     	;# 
   955  041C                     	;# 
   956  041D                     	;# 
   957  041E                     	;# 
   958  041F                     	;# 
   959  0498                     	;# 
   960  0498                     	;# 
   961  0499                     	;# 
   962  049A                     	;# 
   963  049B                     	;# 
   964  049B                     	;# 
   965  049C                     	;# 
   966  049D                     	;# 
   967  049E                     	;# 
   968  049F                     	;# 
   969  0617                     	;# 
   970  0618                     	;# 
   971  0619                     	;# 
   972  0619                     	;# 
   973  061A                     	;# 
   974  061B                     	;# 
   975  061C                     	;# 
   976  061C                     	;# 
   977  061F                     	;# 
   978  0691                     	;# 
   979  0692                     	;# 
   980  0693                     	;# 
   981  0694                     	;# 
   982  0695                     	;# 
   983  0696                     	;# 
   984  0697                     	;# 
   985  0698                     	;# 
   986  0699                     	;# 
   987  0711                     	;# 
   988  0712                     	;# 
   989  0713                     	;# 
   990  0714                     	;# 
   991  0715                     	;# 
   992  0716                     	;# 
   993  0717                     	;# 
   994  0718                     	;# 
   995  0719                     	;# 
   996  0891                     	;# 
   997  0891                     	;# 
   998  0891                     	;# 
   999  0891                     	;# 
  1000  0891                     	;# 
  1001  0891                     	;# 
  1002  0892                     	;# 
  1003  0892                     	;# 
  1004  0892                     	;# 
  1005  0893                     	;# 
  1006  0893                     	;# 
  1007  0893                     	;# 
  1008  0893                     	;# 
  1009  0893                     	;# 
  1010  0893                     	;# 
  1011  0894                     	;# 
  1012  0894                     	;# 
  1013  0894                     	;# 
  1014  0895                     	;# 
  1015  0895                     	;# 
  1016  0895                     	;# 
  1017  0896                     	;# 
  1018  0896                     	;# 
  1019  0896                     	;# 
  1020  089B                     	;# 
  1021  0911                     	;# 
  1022  0912                     	;# 
  1023  0913                     	;# 
  1024  0914                     	;# 
  1025  0915                     	;# 
  1026  0916                     	;# 
  1027  0918                     	;# 
  1028  0919                     	;# 
  1029  091A                     	;# 
  1030  091B                     	;# 
  1031  091C                     	;# 
  1032  091D                     	;# 
  1033  091E                     	;# 
  1034  091F                     	;# 
  1035  0E0F                     	;# 
  1036  0E10                     	;# 
  1037  0E11                     	;# 
  1038  0E12                     	;# 
  1039  0E13                     	;# 
  1040  0E14                     	;# 
  1041  0E15                     	;# 
  1042  0E16                     	;# 
  1043  0E17                     	;# 
  1044  0E18                     	;# 
  1045  0E19                     	;# 
  1046  0E1A                     	;# 
  1047  0E1B                     	;# 
  1048  0E1C                     	;# 
  1049  0E1D                     	;# 
  1050  0E1E                     	;# 
  1051  0E1F                     	;# 
  1052  0E20                     	;# 
  1053  0E21                     	;# 
  1054  0E22                     	;# 
  1055  0E24                     	;# 
  1056  0E25                     	;# 
  1057  0E28                     	;# 
  1058  0E29                     	;# 
  1059  0E2A                     	;# 
  1060  0E2B                     	;# 
  1061  0E2C                     	;# 
  1062  0E2D                     	;# 
  1063  0E2E                     	;# 
  1064  0E2F                     	;# 
  1065  0E90                     	;# 
  1066  0E91                     	;# 
  1067  0E92                     	;# 
  1068  0E94                     	;# 
  1069  0E95                     	;# 
  1070  0EA0                     	;# 
  1071  0EA1                     	;# 
  1072  0EA2                     	;# 
  1073  0EA3                     	;# 
  1074  0EA4                     	;# 
  1075  0EA5                     	;# 
  1076  0F0F                     	;# 
  1077  0F10                     	;# 
  1078  0F11                     	;# 
  1079  0F12                     	;# 
  1080  0F13                     	;# 
  1081  0F14                     	;# 
  1082  0F15                     	;# 
  1083  0F16                     	;# 
  1084  0F17                     	;# 
  1085  0F18                     	;# 
  1086  0F19                     	;# 
  1087  0F1A                     	;# 
  1088  0F1B                     	;# 
  1089  0F1C                     	;# 
  1090  0F1D                     	;# 
  1091  0F1E                     	;# 
  1092  0F1F                     	;# 
  1093  0F20                     	;# 
  1094  0F21                     	;# 
  1095  0F22                     	;# 
  1096  0F23                     	;# 
  1097  0F24                     	;# 
  1098  0F25                     	;# 
  1099  0F26                     	;# 
  1100  0F27                     	;# 
  1101  0F28                     	;# 
  1102  0F29                     	;# 
  1103  0F2A                     	;# 
  1104  0F2B                     	;# 
  1105  0F2C                     	;# 
  1106  0F2D                     	;# 
  1107  0F2E                     	;# 
  1108  0F2F                     	;# 
  1109  0F30                     	;# 
  1110  0F31                     	;# 
  1111  0F32                     	;# 
  1112  0F33                     	;# 
  1113  0F34                     	;# 
  1114  0F35                     	;# 
  1115  0F36                     	;# 
  1116  0F37                     	;# 
  1117  0FE4                     	;# 
  1118  0FE5                     	;# 
  1119  0FE6                     	;# 
  1120  0FE7                     	;# 
  1121  0FE8                     	;# 
  1122  0FE9                     	;# 
  1123  0FEA                     	;# 
  1124  0FEB                     	;# 
  1125  0FED                     	;# 
  1126  0FEE                     	;# 
  1127  0FEF                     	;# 
  1128  0000                     	;# 
  1129  0001                     	;# 
  1130  0002                     	;# 
  1131  0003                     	;# 
  1132  0004                     	;# 
  1133  0005                     	;# 
  1134  0006                     	;# 
  1135  0007                     	;# 
  1136  0008                     	;# 
  1137  0009                     	;# 
  1138  000A                     	;# 
  1139  000B                     	;# 
  1140  000C                     	;# 
  1141  000E                     	;# 
  1142  0010                     	;# 
  1143  0011                     	;# 
  1144  0012                     	;# 
  1145  0013                     	;# 
  1146  0014                     	;# 
  1147  0015                     	;# 
  1148  0015                     	;# 
  1149  0016                     	;# 
  1150  0016                     	;# 
  1151  0017                     	;# 
  1152  0018                     	;# 
  1153  0019                     	;# 
  1154  0019                     	;# 
  1155  001A                     	;# 
  1156  001B                     	;# 
  1157  001C                     	;# 
  1158  001D                     	;# 
  1159  001E                     	;# 
  1160  001F                     	;# 
  1161  008C                     	;# 
  1162  008E                     	;# 
  1163  0090                     	;# 
  1164  0091                     	;# 
  1165  0092                     	;# 
  1166  0093                     	;# 
  1167  0094                     	;# 
  1168  0097                     	;# 
  1169  009B                     	;# 
  1170  009B                     	;# 
  1171  009C                     	;# 
  1172  009D                     	;# 
  1173  009E                     	;# 
  1174  009F                     	;# 
  1175  010C                     	;# 
  1176  010E                     	;# 
  1177  0111                     	;# 
  1178  0112                     	;# 
  1179  0113                     	;# 
  1180  0114                     	;# 
  1181  0115                     	;# 
  1182  0116                     	;# 
  1183  0117                     	;# 
  1184  0118                     	;# 
  1185  0119                     	;# 
  1186  018C                     	;# 
  1187  018E                     	;# 
  1188  0199                     	;# 
  1189  0199                     	;# 
  1190  0199                     	;# 
  1191  019A                     	;# 
  1192  019A                     	;# 
  1193  019A                     	;# 
  1194  019B                     	;# 
  1195  019B                     	;# 
  1196  019B                     	;# 
  1197  019B                     	;# 
  1198  019B                     	;# 
  1199  019C                     	;# 
  1200  019C                     	;# 
  1201  019C                     	;# 
  1202  019D                     	;# 
  1203  019D                     	;# 
  1204  019D                     	;# 
  1205  019E                     	;# 
  1206  019E                     	;# 
  1207  019E                     	;# 
  1208  019F                     	;# 
  1209  019F                     	;# 
  1210  019F                     	;# 
  1211  019F                     	;# 
  1212  019F                     	;# 
  1213  020C                     	;# 
  1214  020E                     	;# 
  1215  0211                     	;# 
  1216  0211                     	;# 
  1217  0212                     	;# 
  1218  0212                     	;# 
  1219  0213                     	;# 
  1220  0213                     	;# 
  1221  0214                     	;# 
  1222  0214                     	;# 
  1223  0215                     	;# 
  1224  0215                     	;# 
  1225  0215                     	;# 
  1226  0215                     	;# 
  1227  0216                     	;# 
  1228  0216                     	;# 
  1229  0217                     	;# 
  1230  0217                     	;# 
  1231  0219                     	;# 
  1232  021A                     	;# 
  1233  021B                     	;# 
  1234  021C                     	;# 
  1235  021D                     	;# 
  1236  021D                     	;# 
  1237  021E                     	;# 
  1238  021F                     	;# 
  1239  028C                     	;# 
  1240  028E                     	;# 
  1241  0291                     	;# 
  1242  0291                     	;# 
  1243  0292                     	;# 
  1244  0293                     	;# 
  1245  0294                     	;# 
  1246  0295                     	;# 
  1247  0295                     	;# 
  1248  0296                     	;# 
  1249  0297                     	;# 
  1250  0298                     	;# 
  1251  029F                     	;# 
  1252  030C                     	;# 
  1253  030E                     	;# 
  1254  0311                     	;# 
  1255  0311                     	;# 
  1256  0312                     	;# 
  1257  0313                     	;# 
  1258  0314                     	;# 
  1259  0315                     	;# 
  1260  0315                     	;# 
  1261  0316                     	;# 
  1262  0317                     	;# 
  1263  0318                     	;# 
  1264  038C                     	;# 
  1265  038E                     	;# 
  1266  0391                     	;# 
  1267  0392                     	;# 
  1268  0393                     	;# 
  1269  0397                     	;# 
  1270  0398                     	;# 
  1271  0399                     	;# 
  1272  039A                     	;# 
  1273  039C                     	;# 
  1274  039D                     	;# 
  1275  039E                     	;# 
  1276  039F                     	;# 
  1277  0411                     	;# 
  1278  0411                     	;# 
  1279  0412                     	;# 
  1280  0413                     	;# 
  1281  0414                     	;# 
  1282  0415                     	;# 
  1283  0416                     	;# 
  1284  0417                     	;# 
  1285  0418                     	;# 
  1286  0418                     	;# 
  1287  0419                     	;# 
  1288  041A                     	;# 
  1289  041B                     	;# 
  1290  041C                     	;# 
  1291  041D                     	;# 
  1292  041E                     	;# 
  1293  041F                     	;# 
  1294  0498                     	;# 
  1295  0498                     	;# 
  1296  0499                     	;# 
  1297  049A                     	;# 
  1298  049B                     	;# 
  1299  049B                     	;# 
  1300  049C                     	;# 
  1301  049D                     	;# 
  1302  049E                     	;# 
  1303  049F                     	;# 
  1304  0617                     	;# 
  1305  0618                     	;# 
  1306  0619                     	;# 
  1307  0619                     	;# 
  1308  061A                     	;# 
  1309  061B                     	;# 
  1310  061C                     	;# 
  1311  061C                     	;# 
  1312  061F                     	;# 
  1313  0691                     	;# 
  1314  0692                     	;# 
  1315  0693                     	;# 
  1316  0694                     	;# 
  1317  0695                     	;# 
  1318  0696                     	;# 
  1319  0697                     	;# 
  1320  0698                     	;# 
  1321  0699                     	;# 
  1322  0711                     	;# 
  1323  0712                     	;# 
  1324  0713                     	;# 
  1325  0714                     	;# 
  1326  0715                     	;# 
  1327  0716                     	;# 
  1328  0717                     	;# 
  1329  0718                     	;# 
  1330  0719                     	;# 
  1331  0891                     	;# 
  1332  0891                     	;# 
  1333  0891                     	;# 
  1334  0891                     	;# 
  1335  0891                     	;# 
  1336  0891                     	;# 
  1337  0892                     	;# 
  1338  0892                     	;# 
  1339  0892                     	;# 
  1340  0893                     	;# 
  1341  0893                     	;# 
  1342  0893                     	;# 
  1343  0893                     	;# 
  1344  0893                     	;# 
  1345  0893                     	;# 
  1346  0894                     	;# 
  1347  0894                     	;# 
  1348  0894                     	;# 
  1349  0895                     	;# 
  1350  0895                     	;# 
  1351  0895                     	;# 
  1352  0896                     	;# 
  1353  0896                     	;# 
  1354  0896                     	;# 
  1355  089B                     	;# 
  1356  0911                     	;# 
  1357  0912                     	;# 
  1358  0913                     	;# 
  1359  0914                     	;# 
  1360  0915                     	;# 
  1361  0916                     	;# 
  1362  0918                     	;# 
  1363  0919                     	;# 
  1364  091A                     	;# 
  1365  091B                     	;# 
  1366  091C                     	;# 
  1367  091D                     	;# 
  1368  091E                     	;# 
  1369  091F                     	;# 
  1370  0E0F                     	;# 
  1371  0E10                     	;# 
  1372  0E11                     	;# 
  1373  0E12                     	;# 
  1374  0E13                     	;# 
  1375  0E14                     	;# 
  1376  0E15                     	;# 
  1377  0E16                     	;# 
  1378  0E17                     	;# 
  1379  0E18                     	;# 
  1380  0E19                     	;# 
  1381  0E1A                     	;# 
  1382  0E1B                     	;# 
  1383  0E1C                     	;# 
  1384  0E1D                     	;# 
  1385  0E1E                     	;# 
  1386  0E1F                     	;# 
  1387  0E20                     	;# 
  1388  0E21                     	;# 
  1389  0E22                     	;# 
  1390  0E24                     	;# 
  1391  0E25                     	;# 
  1392  0E28                     	;# 
  1393  0E29                     	;# 
  1394  0E2A                     	;# 
  1395  0E2B                     	;# 
  1396  0E2C                     	;# 
  1397  0E2D                     	;# 
  1398  0E2E                     	;# 
  1399  0E2F                     	;# 
  1400  0E90                     	;# 
  1401  0E91                     	;# 
  1402  0E92                     	;# 
  1403  0E94                     	;# 
  1404  0E95                     	;# 
  1405  0EA0                     	;# 
  1406  0EA1                     	;# 
  1407  0EA2                     	;# 
  1408  0EA3                     	;# 
  1409  0EA4                     	;# 
  1410  0EA5                     	;# 
  1411  0F0F                     	;# 
  1412  0F10                     	;# 
  1413  0F11                     	;# 
  1414  0F12                     	;# 
  1415  0F13                     	;# 
  1416  0F14                     	;# 
  1417  0F15                     	;# 
  1418  0F16                     	;# 
  1419  0F17                     	;# 
  1420  0F18                     	;# 
  1421  0F19                     	;# 
  1422  0F1A                     	;# 
  1423  0F1B                     	;# 
  1424  0F1C                     	;# 
  1425  0F1D                     	;# 
  1426  0F1E                     	;# 
  1427  0F1F                     	;# 
  1428  0F20                     	;# 
  1429  0F21                     	;# 
  1430  0F22                     	;# 
  1431  0F23                     	;# 
  1432  0F24                     	;# 
  1433  0F25                     	;# 
  1434  0F26                     	;# 
  1435  0F27                     	;# 
  1436  0F28                     	;# 
  1437  0F29                     	;# 
  1438  0F2A                     	;# 
  1439  0F2B                     	;# 
  1440  0F2C                     	;# 
  1441  0F2D                     	;# 
  1442  0F2E                     	;# 
  1443  0F2F                     	;# 
  1444  0F30                     	;# 
  1445  0F31                     	;# 
  1446  0F32                     	;# 
  1447  0F33                     	;# 
  1448  0F34                     	;# 
  1449  0F35                     	;# 
  1450  0F36                     	;# 
  1451  0F37                     	;# 
  1452  0FE4                     	;# 
  1453  0FE5                     	;# 
  1454  0FE6                     	;# 
  1455  0FE7                     	;# 
  1456  0FE8                     	;# 
  1457  0FE9                     	;# 
  1458  0FEA                     	;# 
  1459  0FEB                     	;# 
  1460  0FED                     	;# 
  1461  0FEE                     	;# 
  1462  0FEF                     	;# 
  1463  0000                     	;# 
  1464  0001                     	;# 
  1465  0002                     	;# 
  1466  0003                     	;# 
  1467  0004                     	;# 
  1468  0005                     	;# 
  1469  0006                     	;# 
  1470  0007                     	;# 
  1471  0008                     	;# 
  1472  0009                     	;# 
  1473  000A                     	;# 
  1474  000B                     	;# 
  1475  000C                     	;# 
  1476  000E                     	;# 
  1477  0010                     	;# 
  1478  0011                     	;# 
  1479  0012                     	;# 
  1480  0013                     	;# 
  1481  0014                     	;# 
  1482  0015                     	;# 
  1483  0015                     	;# 
  1484  0016                     	;# 
  1485  0016                     	;# 
  1486  0017                     	;# 
  1487  0018                     	;# 
  1488  0019                     	;# 
  1489  0019                     	;# 
  1490  001A                     	;# 
  1491  001B                     	;# 
  1492  001C                     	;# 
  1493  001D                     	;# 
  1494  001E                     	;# 
  1495  001F                     	;# 
  1496  008C                     	;# 
  1497  008E                     	;# 
  1498  0090                     	;# 
  1499  0091                     	;# 
  1500  0092                     	;# 
  1501  0093                     	;# 
  1502  0094                     	;# 
  1503  0097                     	;# 
  1504  009B                     	;# 
  1505  009B                     	;# 
  1506  009C                     	;# 
  1507  009D                     	;# 
  1508  009E                     	;# 
  1509  009F                     	;# 
  1510  010C                     	;# 
  1511  010E                     	;# 
  1512  0111                     	;# 
  1513  0112                     	;# 
  1514  0113                     	;# 
  1515  0114                     	;# 
  1516  0115                     	;# 
  1517  0116                     	;# 
  1518  0117                     	;# 
  1519  0118                     	;# 
  1520  0119                     	;# 
  1521  018C                     	;# 
  1522  018E                     	;# 
  1523  0199                     	;# 
  1524  0199                     	;# 
  1525  0199                     	;# 
  1526  019A                     	;# 
  1527  019A                     	;# 
  1528  019A                     	;# 
  1529  019B                     	;# 
  1530  019B                     	;# 
  1531  019B                     	;# 
  1532  019B                     	;# 
  1533  019B                     	;# 
  1534  019C                     	;# 
  1535  019C                     	;# 
  1536  019C                     	;# 
  1537  019D                     	;# 
  1538  019D                     	;# 
  1539  019D                     	;# 
  1540  019E                     	;# 
  1541  019E                     	;# 
  1542  019E                     	;# 
  1543  019F                     	;# 
  1544  019F                     	;# 
  1545  019F                     	;# 
  1546  019F                     	;# 
  1547  019F                     	;# 
  1548  020C                     	;# 
  1549  020E                     	;# 
  1550  0211                     	;# 
  1551  0211                     	;# 
  1552  0212                     	;# 
  1553  0212                     	;# 
  1554  0213                     	;# 
  1555  0213                     	;# 
  1556  0214                     	;# 
  1557  0214                     	;# 
  1558  0215                     	;# 
  1559  0215                     	;# 
  1560  0215                     	;# 
  1561  0215                     	;# 
  1562  0216                     	;# 
  1563  0216                     	;# 
  1564  0217                     	;# 
  1565  0217                     	;# 
  1566  0219                     	;# 
  1567  021A                     	;# 
  1568  021B                     	;# 
  1569  021C                     	;# 
  1570  021D                     	;# 
  1571  021D                     	;# 
  1572  021E                     	;# 
  1573  021F                     	;# 
  1574  028C                     	;# 
  1575  028E                     	;# 
  1576  0291                     	;# 
  1577  0291                     	;# 
  1578  0292                     	;# 
  1579  0293                     	;# 
  1580  0294                     	;# 
  1581  0295                     	;# 
  1582  0295                     	;# 
  1583  0296                     	;# 
  1584  0297                     	;# 
  1585  0298                     	;# 
  1586  029F                     	;# 
  1587  030C                     	;# 
  1588  030E                     	;# 
  1589  0311                     	;# 
  1590  0311                     	;# 
  1591  0312                     	;# 
  1592  0313                     	;# 
  1593  0314                     	;# 
  1594  0315                     	;# 
  1595  0315                     	;# 
  1596  0316                     	;# 
  1597  0317                     	;# 
  1598  0318                     	;# 
  1599  038C                     	;# 
  1600  038E                     	;# 
  1601  0391                     	;# 
  1602  0392                     	;# 
  1603  0393                     	;# 
  1604  0397                     	;# 
  1605  0398                     	;# 
  1606  0399                     	;# 
  1607  039A                     	;# 
  1608  039C                     	;# 
  1609  039D                     	;# 
  1610  039E                     	;# 
  1611  039F                     	;# 
  1612  0411                     	;# 
  1613  0411                     	;# 
  1614  0412                     	;# 
  1615  0413                     	;# 
  1616  0414                     	;# 
  1617  0415                     	;# 
  1618  0416                     	;# 
  1619  0417                     	;# 
  1620  0418                     	;# 
  1621  0418                     	;# 
  1622  0419                     	;# 
  1623  041A                     	;# 
  1624  041B                     	;# 
  1625  041C                     	;# 
  1626  041D                     	;# 
  1627  041E                     	;# 
  1628  041F                     	;# 
  1629  0498                     	;# 
  1630  0498                     	;# 
  1631  0499                     	;# 
  1632  049A                     	;# 
  1633  049B                     	;# 
  1634  049B                     	;# 
  1635  049C                     	;# 
  1636  049D                     	;# 
  1637  049E                     	;# 
  1638  049F                     	;# 
  1639  0617                     	;# 
  1640  0618                     	;# 
  1641  0619                     	;# 
  1642  0619                     	;# 
  1643  061A                     	;# 
  1644  061B                     	;# 
  1645  061C                     	;# 
  1646  061C                     	;# 
  1647  061F                     	;# 
  1648  0691                     	;# 
  1649  0692                     	;# 
  1650  0693                     	;# 
  1651  0694                     	;# 
  1652  0695                     	;# 
  1653  0696                     	;# 
  1654  0697                     	;# 
  1655  0698                     	;# 
  1656  0699                     	;# 
  1657  0711                     	;# 
  1658  0712                     	;# 
  1659  0713                     	;# 
  1660  0714                     	;# 
  1661  0715                     	;# 
  1662  0716                     	;# 
  1663  0717                     	;# 
  1664  0718                     	;# 
  1665  0719                     	;# 
  1666  0891                     	;# 
  1667  0891                     	;# 
  1668  0891                     	;# 
  1669  0891                     	;# 
  1670  0891                     	;# 
  1671  0891                     	;# 
  1672  0892                     	;# 
  1673  0892                     	;# 
  1674  0892                     	;# 
  1675  0893                     	;# 
  1676  0893                     	;# 
  1677  0893                     	;# 
  1678  0893                     	;# 
  1679  0893                     	;# 
  1680  0893                     	;# 
  1681  0894                     	;# 
  1682  0894                     	;# 
  1683  0894                     	;# 
  1684  0895                     	;# 
  1685  0895                     	;# 
  1686  0895                     	;# 
  1687  0896                     	;# 
  1688  0896                     	;# 
  1689  0896                     	;# 
  1690  089B                     	;# 
  1691  0911                     	;# 
  1692  0912                     	;# 
  1693  0913                     	;# 
  1694  0914                     	;# 
  1695  0915                     	;# 
  1696  0916                     	;# 
  1697  0918                     	;# 
  1698  0919                     	;# 
  1699  091A                     	;# 
  1700  091B                     	;# 
  1701  091C                     	;# 
  1702  091D                     	;# 
  1703  091E                     	;# 
  1704  091F                     	;# 
  1705  0E0F                     	;# 
  1706  0E10                     	;# 
  1707  0E11                     	;# 
  1708  0E12                     	;# 
  1709  0E13                     	;# 
  1710  0E14                     	;# 
  1711  0E15                     	;# 
  1712  0E16                     	;# 
  1713  0E17                     	;# 
  1714  0E18                     	;# 
  1715  0E19                     	;# 
  1716  0E1A                     	;# 
  1717  0E1B                     	;# 
  1718  0E1C                     	;# 
  1719  0E1D                     	;# 
  1720  0E1E                     	;# 
  1721  0E1F                     	;# 
  1722  0E20                     	;# 
  1723  0E21                     	;# 
  1724  0E22                     	;# 
  1725  0E24                     	;# 
  1726  0E25                     	;# 
  1727  0E28                     	;# 
  1728  0E29                     	;# 
  1729  0E2A                     	;# 
  1730  0E2B                     	;# 
  1731  0E2C                     	;# 
  1732  0E2D                     	;# 
  1733  0E2E                     	;# 
  1734  0E2F                     	;# 
  1735  0E90                     	;# 
  1736  0E91                     	;# 
  1737  0E92                     	;# 
  1738  0E94                     	;# 
  1739  0E95                     	;# 
  1740  0EA0                     	;# 
  1741  0EA1                     	;# 
  1742  0EA2                     	;# 
  1743  0EA3                     	;# 
  1744  0EA4                     	;# 
  1745  0EA5                     	;# 
  1746  0F0F                     	;# 
  1747  0F10                     	;# 
  1748  0F11                     	;# 
  1749  0F12                     	;# 
  1750  0F13                     	;# 
  1751  0F14                     	;# 
  1752  0F15                     	;# 
  1753  0F16                     	;# 
  1754  0F17                     	;# 
  1755  0F18                     	;# 
  1756  0F19                     	;# 
  1757  0F1A                     	;# 
  1758  0F1B                     	;# 
  1759  0F1C                     	;# 
  1760  0F1D                     	;# 
  1761  0F1E                     	;# 
  1762  0F1F                     	;# 
  1763  0F20                     	;# 
  1764  0F21                     	;# 
  1765  0F22                     	;# 
  1766  0F23                     	;# 
  1767  0F24                     	;# 
  1768  0F25                     	;# 
  1769  0F26                     	;# 
  1770  0F27                     	;# 
  1771  0F28                     	;# 
  1772  0F29                     	;# 
  1773  0F2A                     	;# 
  1774  0F2B                     	;# 
  1775  0F2C                     	;# 
  1776  0F2D                     	;# 
  1777  0F2E                     	;# 
  1778  0F2F                     	;# 
  1779  0F30                     	;# 
  1780  0F31                     	;# 
  1781  0F32                     	;# 
  1782  0F33                     	;# 
  1783  0F34                     	;# 
  1784  0F35                     	;# 
  1785  0F36                     	;# 
  1786  0F37                     	;# 
  1787  0FE4                     	;# 
  1788  0FE5                     	;# 
  1789  0FE6                     	;# 
  1790  0FE7                     	;# 
  1791  0FE8                     	;# 
  1792  0FE9                     	;# 
  1793  0FEA                     	;# 
  1794  0FEB                     	;# 
  1795  0FED                     	;# 
  1796  0FEE                     	;# 
  1797  0FEF                     	;# 
  1798                           
  1799                           	psect	idataBANK1
  1800  07FF                     __pidataBANK1:	
  1801                           
  1802                           ;initializer for _romData
  1803  07FF  3420               	retlw	low (_romDataMap| (0+512))
  1804                           
  1805                           	psect	stringtext1
  1806  1800                     __pstringtext1:	
  1807  1800                     _dpowers:	
  1808  1800  3401               	retlw	1
  1809  1801  3400               	retlw	0
  1810  1802  3400               	retlw	0
  1811  1803  3400               	retlw	0
  1812  1804  340A               	retlw	10
  1813  1805  3400               	retlw	0
  1814  1806  3400               	retlw	0
  1815  1807  3400               	retlw	0
  1816  1808  3464               	retlw	100
  1817  1809  3400               	retlw	0
  1818  180A  3400               	retlw	0
  1819  180B  3400               	retlw	0
  1820  180C  34E8               	retlw	232
  1821  180D  3403               	retlw	3
  1822  180E  3400               	retlw	0
  1823  180F  3400               	retlw	0
  1824  1810  3410               	retlw	16
  1825  1811  3427               	retlw	39
  1826  1812  3400               	retlw	0
  1827  1813  3400               	retlw	0
  1828  1814  34A0               	retlw	160
  1829  1815  3486               	retlw	134
  1830  1816  3401               	retlw	1
  1831  1817  3400               	retlw	0
  1832  1818  3440               	retlw	64
  1833  1819  3442               	retlw	66
  1834  181A  340F               	retlw	15
  1835  181B  3400               	retlw	0
  1836  181C  3480               	retlw	128
  1837  181D  3496               	retlw	150
  1838  181E  3498               	retlw	152
  1839  181F  3400               	retlw	0
  1840  1820  3400               	retlw	0
  1841  1821  34E1               	retlw	225
  1842  1822  34F5               	retlw	245
  1843  1823  3405               	retlw	5
  1844  1824  3400               	retlw	0
  1845  1825  34CA               	retlw	202
  1846  1826  349A               	retlw	154
  1847  1827  343B               	retlw	59
  1848  1828                     __end_of_dpowers:	
  1849                           
  1850                           	psect	stringtext2
  1851  1834                     __pstringtext2:	
  1852  1834                     _statuses:	
  1853  1834  3400               	retlw	0
  1854  1835  3401               	retlw	1
  1855  1836  3402               	retlw	2
  1856  1837  3403               	retlw	3
  1857  1838  3400               	retlw	0
  1858  1839  3401               	retlw	1
  1859  183A  3402               	retlw	2
  1860  183B  3403               	retlw	3
  1861  183C  3404               	retlw	4
  1862  183D  3405               	retlw	5
  1863  183E                     __end_of_statuses:	
  1864                           
  1865                           	psect	stringtext3
  1866  184B                     __pstringtext3:	
  1867  184B                     _n_ADDRESS_P0:	
  1868  184B  34AD               	retlw	173
  1869  184C  3487               	retlw	135
  1870  184D  3466               	retlw	102
  1871  184E  34BC               	retlw	188
  1872  184F  34BB               	retlw	187
  1873  1850                     __end_of_n_ADDRESS_P0:	
  1874                           
  1875                           	psect	stringtext4
  1876  1828                     __pstringtext4:	
  1877  1828                     _n_ADDRESS_MUL:	
  1878  1828  3421               	retlw	33
  1879  1829                     __end_of_n_ADDRESS_MUL:	
  1880  000B                     _INTCONbits	set	11
  1881  0010                     _PIR0bits	set	16
  1882  000E                     _PORTCbits	set	14
  1883  000C                     _PORTAbits	set	12
  1884  009E                     _ADCON1bits	set	158
  1885  009C                     _ADRESH	set	156
  1886  009B                     _ADRESL	set	155
  1887  009D                     _ADCON0bits	set	157
  1888  0097                     _WDTCONbits	set	151
  1889  0090                     _PIE0bits	set	144
  1890  008E                     _TRISCbits	set	142
  1891  008C                     _TRISAbits	set	140
  1892  0117                     _FVRCONbits	set	279
  1893  018E                     _ANSELCbits	set	398
  1894  018C                     _ANSELAbits	set	396
  1895  018E                     _ANSELC	set	398
  1896  018C                     _ANSELA	set	396
  1897  020C                     _WPUAbits	set	524
  1898  020E                     _WPUC	set	526
  1899  020C                     _WPUA	set	524
  1900  0211                     _SSP1BUF	set	529
  1901  0214                     _SSP1STATbits	set	532
  1902  0215                     _SSP1CON1bits	set	533
  1903  028C                     _ODCONAbits	set	652
  1904  028E                     _ODCONC	set	654
  1905  028C                     _ODCONA	set	652
  1906  038E                     _INLVLC	set	910
  1907  038C                     _INLVLA	set	908
  1908  0919                     _OSCCON1bits	set	2329
  1909  0EA0                     _RC0PPSbits	set	3744
  1910  0EA2                     _RC2PPSbits	set	3746
  1911  0EA1                     _RC1PPSbits	set	3745
  1912  1829                     STR_10:	
  1913  1829  3425               	retlw	37	;'%'
  1914  182A  346C               	retlw	108	;'l'
  1915  182B  3475               	retlw	117	;'u'
  1916  182C  342E               	retlw	46	;'.'
  1917  182D  3425               	retlw	37	;'%'
  1918  182E  3436               	retlw	54	;'6'
  1919  182F  342E               	retlw	46	;'.'
  1920  1830  3436               	retlw	54	;'6'
  1921  1831  346C               	retlw	108	;'l'
  1922  1832  3475               	retlw	117	;'u'
  1923  1833  3400               	retlw	0
  1924                           
  1925                           	psect	stringtext5
  1926  183E                     __pstringtext5:	
  1927  183E                     STR_5:	
  1928  183E  3441               	retlw	65	;'A'
  1929  183F  344E               	retlw	78	;'N'
  1930  1840  3443               	retlw	67	;'C'
  1931  1841  3433               	retlw	51	;'3'
  1932  1842  346D               	retlw	109	;'m'
  1933  1843  3456               	retlw	86	;'V'
  1934  1844  3400               	retlw	0
  1935                           
  1936                           	psect	stringtext6
  1937  1845                     __pstringtext6:	
  1938  1845                     STR_7:	
  1939  1845  3452               	retlw	82	;'R'
  1940  1846  3446               	retlw	70	;'F'
  1941  1847  3450               	retlw	80	;'P'
  1942  1848  3457               	retlw	87	;'W'
  1943  1849  3452               	retlw	82	;'R'
  1944  184A  3400               	retlw	0
  1945                           
  1946                           	psect	stringtext7
  1947  1850                     __pstringtext7:	
  1948  1850                     STR_3:	
  1949  1850  3444               	retlw	68	;'D'
  1950  1851  3442               	retlw	66	;'B'
  1951  1852  3447               	retlw	71	;'G'
  1952  1853  3431               	retlw	49	;'1'
  1953  1854  3400               	retlw	0
  1954                           
  1955                           	psect	stringtext8
  1956  1855                     __pstringtext8:	
  1957  1855                     STR_6:	
  1958  1855  3454               	retlw	84	;'T'
  1959  1856  3445               	retlw	69	;'E'
  1960  1857  344D               	retlw	77	;'M'
  1961  1858  3450               	retlw	80	;'P'
  1962  1859  3400               	retlw	0
  1963                           
  1964                           	psect	stringtext9
  1965  185A                     __pstringtext9:	
  1966  185A                     STR_4:	
  1967  185A  3456               	retlw	86	;'V'
  1968  185B  3442               	retlw	66	;'B'
  1969  185C  3441               	retlw	65	;'A'
  1970  185D  3454               	retlw	84	;'T'
  1971  185E  3400               	retlw	0
  1972                           
  1973                           	psect	stringtext10
  1974  185F                     __pstringtext10:	
  1975  185F                     STR_9:	
  1976  185F  3442               	retlw	66	;'B'
  1977  1860  344F               	retlw	79	;'O'
  1978  1861  344F               	retlw	79	;'O'
  1979  1862  3454               	retlw	84	;'T'
  1980  1863  3400               	retlw	0
  1981                           
  1982                           	psect	stringtext11
  1983  1864                     __pstringtext11:	
  1984  1864                     STR_8:	
  1985  1864  3455               	retlw	85	;'U'
  1986  1865  3448               	retlw	72	;'H'
  1987  1866  3431               	retlw	49	;'1'
  1988  1867  3400               	retlw	0
  1989                           
  1990                           	psect	stringtext12
  1991  1868                     __pstringtext12:	
  1992  1868                     STR_1:	
  1993  1868  342F               	retlw	47	;'/'
  1994  1869  3400               	retlw	0
  1995                           
  1996                           	psect	stringtext13
  1997  0000                     __pstringtext13:	
  1998  1868                     
  1999                           ; #config settings
  2000  0000                     
  2001                           	psect	cinit
  2002  0011                     start_initialization:	
  2003  0011                     __initialization:	
  2004                           
  2005                           ; Initialize objects allocated to BANK1
  2006  0011  0021               	movlb	1	; select bank1
  2007  0012  3187  27FF  3180   	fcall	__pidataBANK1	;fetch initializer
  2008  0015  00EB               	movwf	__pdataBANK1& (0+127)
  2009                           
  2010                           ; Clear objects allocated to COMMON
  2011  0016  01FD               	clrf	__pbssCOMMON& (0+127)
  2012                           
  2013                           ; Clear objects allocated to BANK1
  2014  0017  01E7               	clrf	__pbssBANK1& (0+127)
  2015  0018  01E8               	clrf	(__pbssBANK1+1)& (0+127)
  2016  0019  01E9               	clrf	(__pbssBANK1+2)& (0+127)
  2017  001A  01EA               	clrf	(__pbssBANK1+3)& (0+127)
  2018                           
  2019                           ; Clear objects allocated to BANK2
  2020  001B  3051               	movlw	low __pbssBANK2
  2021  001C  0084               	movwf	4
  2022  001D  3001               	movlw	high __pbssBANK2
  2023  001E  0085               	movwf	5
  2024  001F  3015               	movlw	21
  2025  0020  3195  2549  3180   	fcall	clear_ram0
  2026                           
  2027                           ; Clear objects allocated to BANK3
  2028  0023  30A0               	movlw	low __pbssBANK3
  2029  0024  0084               	movwf	4
  2030  0025  3001               	movlw	high __pbssBANK3
  2031  0026  0085               	movwf	5
  2032  0027  3042               	movlw	66
  2033  0028  3195  2549  3180   	fcall	clear_ram0
  2034                           
  2035                           ; Clear objects allocated to BANK4
  2036  002B  3020               	movlw	low __pbssBANK4
  2037  002C  0084               	movwf	4
  2038  002D  3002               	movlw	high __pbssBANK4
  2039  002E  0085               	movwf	5
  2040  002F  301C               	movlw	28
  2041  0030  3195  2549         	fcall	clear_ram0
  2042  0032                     end_of_initialization:	
  2043                           ;End of C runtime variable initialization code
  2044                           
  2045  0032                     __end_of__initialization:	
  2046  0032  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2047  0033  0020               	movlb	0
  2048  0034  318B  2B97         	ljmp	_main	;jump to C main() function
  2049                           
  2050                           	psect	bssCOMMON
  2051  007D                     __pbssCOMMON:	
  2052  007D                     _sleepLoop:	
  2053  007D                     	ds	1
  2054                           
  2055                           	psect	bssBANK1
  2056  00E7                     __pbssBANK1:	
  2057  00E7                     _status:	
  2058  00E7                     	ds	4
  2059                           
  2060                           	psect	dataBANK1
  2061  00EB                     __pdataBANK1:	
  2062  00EB                     _romData:	
  2063  00EB                     	ds	1
  2064                           
  2065                           	psect	bssBANK2
  2066  0151                     __pbssBANK2:	
  2067  0151                     _counter:	
  2068  0151                     	ds	4
  2069  0155                     ftoa@buf:	
  2070  0155                     	ds	17
  2071                           
  2072                           	psect	bssBANK3
  2073  01A0                     __pbssBANK3:	
  2074  01A0                     _RXPacket:	
  2075  01A0                     	ds	33
  2076  01C1                     _TXPacket:	
  2077  01C1                     	ds	33
  2078                           
  2079                           	psect	bssBANK4
  2080  0220                     __pbssBANK4:	
  2081  0220                     _romDataMap:	
  2082  0220                     	ds	28
  2083                           
  2084                           	psect	clrtext
  2085  1549                     clear_ram0:	
  2086                           ;	Called with FSR0 containing the base address, and
  2087                           ;	WREG with the size to clear
  2088                           
  2089  1549  0064               	clrwdt	;clear the watchdog before getting into this loop
  2090  154A                     clrloop0:	
  2091  154A  0180               	clrf	0	;clear RAM location pointed to by FSR
  2092  154B  3101               	addfsr 0,1
  2093  154C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2094  154D  2D4A               	goto	clrloop0	;have we reached the end yet?
  2095  154E  3400               	retlw	0	;all done for this memory range, return
  2096                           
  2097                           	psect	cstackBANK2
  2098  0120                     __pcstackBANK2:	
  2099  0120                     loop@vt:	
  2100                           
  2101                           ; 3 bytes @ 0x0
  2102  0120                     	ds	3
  2103  0123                     loop@ta:	
  2104                           
  2105                           ; 3 bytes @ 0x3
  2106  0123                     	ds	3
  2107  0126                     _loop$1958:	
  2108                           
  2109                           ; 3 bytes @ 0x6
  2110  0126                     	ds	3
  2111  0129                     _loop$1959:	
  2112                           
  2113                           ; 3 bytes @ 0x9
  2114  0129                     	ds	3
  2115  012C                     _loop$1960:	
  2116                           
  2117                           ; 3 bytes @ 0xC
  2118  012C                     	ds	3
  2119  012F                     loop@rfSetup:	
  2120                           
  2121                           ; 1 bytes @ 0xF
  2122  012F                     	ds	1
  2123  0130                     loop@packet:	
  2124                           
  2125                           ; 33 bytes @ 0x10
  2126  0130                     	ds	33
  2127                           
  2128                           	psect	cstackBANK1
  2129  00A0                     __pcstackBANK1:	
  2130  00A0                     ___fttol@sign1:	
  2131                           
  2132                           ; 1 bytes @ 0x0
  2133  00A0                     	ds	1
  2134  00A1                     ___fttol@lval:	
  2135                           
  2136                           ; 4 bytes @ 0x1
  2137  00A1                     	ds	4
  2138  00A5                     ___fttol@exp1:	
  2139                           
  2140                           ; 1 bytes @ 0x5
  2141  00A5                     	ds	1
  2142  00A6                     ?_ftoa:	
  2143  00A6                     ftoa@f:	
  2144                           ; 1 bytes @ 0x6
  2145                           
  2146                           
  2147                           ; 3 bytes @ 0x6
  2148  00A6                     	ds	3
  2149  00A9                     ftoa@status:	
  2150                           
  2151                           ; 1 bytes @ 0x9
  2152  00A9                     	ds	1
  2153  00AA                     ftoa@rem:	
  2154                           
  2155                           ; 4 bytes @ 0xA
  2156  00AA                     	ds	4
  2157  00AE                     ftoa@l:	
  2158                           
  2159                           ; 4 bytes @ 0xE
  2160  00AE                     	ds	4
  2161  00B2                     ftoa@cp:	
  2162                           
  2163                           ; 1 bytes @ 0x12
  2164  00B2                     	ds	1
  2165  00B3                     ?_strcat:	
  2166  00B3                     strcat@to:	
  2167                           ; 2 bytes @ 0x13
  2168                           
  2169                           
  2170                           ; 2 bytes @ 0x13
  2171  00B3                     	ds	2
  2172  00B5                     strcat@from:	
  2173                           
  2174                           ; 2 bytes @ 0x15
  2175  00B5                     	ds	2
  2176  00B7                     strcat@cp:	
  2177                           
  2178                           ; 2 bytes @ 0x17
  2179  00B7                     	ds	2
  2180  00B9                     ?_sendMessage:	
  2181  00B9                     sendMessage@packet:	
  2182                           ; 1 bytes @ 0x19
  2183                           
  2184                           
  2185                           ; 2 bytes @ 0x19
  2186  00B9                     	ds	2
  2187  00BB                     sendMessage@topic:	
  2188                           
  2189                           ; 2 bytes @ 0x1B
  2190  00BB                     	ds	2
  2191  00BD                     sendMessage@value:	
  2192                           
  2193                           ; 3 bytes @ 0x1D
  2194  00BD                     	ds	3
  2195  00C0                     ??_sendMessage:	
  2196                           
  2197                           ; 1 bytes @ 0x20
  2198  00C0                     	ds	1
  2199  00C1                     sendMessage@status:	
  2200                           
  2201                           ; 2 bytes @ 0x21
  2202  00C1                     	ds	2
  2203  00C3                     ??_loop:	
  2204                           
  2205                           ; 1 bytes @ 0x23
  2206  00C3                     	ds	1
  2207  00C4                     ??_main:	
  2208                           
  2209                           ; 1 bytes @ 0x24
  2210  00C4                     	ds	1
  2211  00C5                     main@pipe:	
  2212                           
  2213                           ; 1 bytes @ 0x25
  2214  00C5                     	ds	1
  2215  00C6                     main@packet:	
  2216                           
  2217                           ; 33 bytes @ 0x26
  2218  00C6                     	ds	33
  2219                           
  2220                           	psect	cstackCOMMON
  2221  0070                     __pcstackCOMMON:	
  2222  0070                     ?_isdigit:	
  2223  0070                     ?_nrf24l01ISR:	
  2224                           ; 1 bit 
  2225                           
  2226  0070                     ?_nrf24l01Init:	
  2227                           ; 1 bytes @ 0x0
  2228                           
  2229  0070                     ?_nrf24l01SetTXPipe:	
  2230                           ; 1 bytes @ 0x0
  2231                           
  2232  0070                     ?_nrf24l01Service:	
  2233                           ; 1 bytes @ 0x0
  2234                           
  2235  0070                     ?_nrf24l01CELow:	
  2236                           ; 1 bytes @ 0x0
  2237                           
  2238  0070                     ??_nrf24l01CELow:	
  2239                           ; 1 bytes @ 0x0
  2240                           
  2241  0070                     ?_nrf24l01CEHigh:	
  2242                           ; 1 bytes @ 0x0
  2243                           
  2244  0070                     ??_nrf24l01CEHigh:	
  2245                           ; 1 bytes @ 0x0
  2246                           
  2247  0070                     ?_nrf24l01CSLow:	
  2248                           ; 1 bytes @ 0x0
  2249                           
  2250  0070                     ??_nrf24l01CSLow:	
  2251                           ; 1 bytes @ 0x0
  2252                           
  2253  0070                     ?_nrf24l01CSHigh:	
  2254                           ; 1 bytes @ 0x0
  2255                           
  2256  0070                     ??_nrf24l01CSHigh:	
  2257                           ; 1 bytes @ 0x0
  2258                           
  2259  0070                     ?_nrf24l01InterfaceInit:	
  2260                           ; 1 bytes @ 0x0
  2261                           
  2262  0070                     ?_nrf24l01SPISend:	
  2263                           ; 1 bytes @ 0x0
  2264                           
  2265  0070                     ??_nrf24l01SPISend:	
  2266                           ; 1 bytes @ 0x0
  2267                           
  2268  0070                     ?_nrf24l01SPIStart:	
  2269                           ; 1 bytes @ 0x0
  2270                           
  2271  0070                     ??_nrf24l01SPIStart:	
  2272                           ; 1 bytes @ 0x0
  2273                           
  2274  0070                     ?_nrf24l01SPIEnd:	
  2275                           ; 1 bytes @ 0x0
  2276                           
  2277  0070                     ??_nrf24l01SPIEnd:	
  2278                           ; 1 bytes @ 0x0
  2279                           
  2280  0070                     ?_enableInterrupts:	
  2281                           ; 1 bytes @ 0x0
  2282                           
  2283  0070                     ??_enableInterrupts:	
  2284                           ; 1 bytes @ 0x0
  2285                           
  2286  0070                     ?_ISR:	
  2287                           ; 1 bytes @ 0x0
  2288                           
  2289  0070                     ?_doWDTSleep:	
  2290                           ; 1 bytes @ 0x0
  2291                           
  2292  0070                     ?_loop:	
  2293                           ; 1 bytes @ 0x0
  2294                           
  2295  0070                     ?_nrf24l01GetPipe:	
  2296                           ; 1 bytes @ 0x0
  2297                           
  2298  0070                     ?_main:	
  2299                           ; 1 bytes @ 0x0
  2300                           
  2301  0070                     ?_nrf24l01SetRXMode:	
  2302                           ; 1 bytes @ 0x0
  2303                           
  2304  0070                     ?_nrf24l01SetRXPipe:	
  2305                           ; 1 bytes @ 0x0
  2306                           
  2307  0070                     ?_nrf24l01InitRegisters:	
  2308                           ; 1 bytes @ 0x0
  2309                           
  2310  0070                     ?i1_nrf24l01SetRXMode:	
  2311                           ; 1 bytes @ 0x0
  2312                           
  2313  0070                     ?i1_nrf24l01Service:	
  2314                           ; 1 bytes @ 0x0
  2315                           
  2316  0070                     ?i1_memset:	
  2317                           ; 1 bytes @ 0x0
  2318                           
  2319  0070                     ?i1_strcmp:	
  2320                           ; 1 bytes @ 0x0
  2321                           
  2322  0070                     ?i1_strlen:	
  2323                           ; 2 bytes @ 0x0
  2324                           
  2325  0070                     nrf24l01SPISend@data:	
  2326                           ; 2 bytes @ 0x0
  2327                           
  2328  0070                     enableInterrupts@enable:	
  2329                           ; 1 bytes @ 0x0
  2330                           
  2331  0070                     i1strcmp@s2:	
  2332                           ; 1 bytes @ 0x0
  2333                           
  2334  0070                     i1memset@p1:	
  2335                           ; 1 bytes @ 0x0
  2336                           
  2337  0070                     i1strlen@s:	
  2338                           ; 2 bytes @ 0x0
  2339                           
  2340                           
  2341                           ; 2 bytes @ 0x0
  2342  0070                     	ds	1
  2343  0071                     ?i1_nrf24l01Send:	
  2344  0071                     i1nrf24l01Send@data:	
  2345                           ; 1 bytes @ 0x1
  2346                           
  2347                           
  2348                           ; 1 bytes @ 0x1
  2349  0071                     	ds	1
  2350  0072                     ??i1_nrf24l01Send:	
  2351  0072                     ??i1_strcmp:	
  2352                           ; 1 bytes @ 0x2
  2353                           
  2354  0072                     ??i1_strlen:	
  2355                           ; 1 bytes @ 0x2
  2356                           
  2357  0072                     i1memset@c:	
  2358                           ; 1 bytes @ 0x2
  2359                           
  2360                           
  2361                           ; 2 bytes @ 0x2
  2362  0072                     	ds	1
  2363  0073                     i1nrf24l01Send@command:	
  2364  0073                     i1strcmp@r:	
  2365                           ; 1 bytes @ 0x3
  2366                           
  2367                           
  2368                           ; 1 bytes @ 0x3
  2369  0073                     	ds	1
  2370  0074                     ??i1_nrf24l01SetRXMode:	
  2371  0074                     i1strcmp@s1:	
  2372                           ; 1 bytes @ 0x4
  2373                           
  2374  0074                     i1memset@n:	
  2375                           ; 1 bytes @ 0x4
  2376                           
  2377  0074                     i1strlen@cp:	
  2378                           ; 2 bytes @ 0x4
  2379                           
  2380                           
  2381                           ; 2 bytes @ 0x4
  2382  0074                     	ds	1
  2383  0075                     i1nrf24l01SetRXMode@rxMode:	
  2384                           
  2385                           ; 1 bytes @ 0x5
  2386  0075                     	ds	1
  2387  0076                     ??i1_memset:	
  2388  0076                     i1memset@p:	
  2389                           ; 1 bytes @ 0x6
  2390                           
  2391                           
  2392                           ; 2 bytes @ 0x6
  2393  0076                     	ds	2
  2394  0078                     ??i1_nrf24l01Service:	
  2395                           
  2396                           ; 1 bytes @ 0x8
  2397  0078                     	ds	2
  2398  007A                     i1nrf24l01Service@width:	
  2399                           
  2400                           ; 1 bytes @ 0xA
  2401  007A                     	ds	1
  2402  007B                     i1nrf24l01Service@i:	
  2403                           
  2404                           ; 1 bytes @ 0xB
  2405  007B                     	ds	1
  2406  007C                     ??_nrf24l01ISR:	
  2407                           
  2408                           ; 1 bytes @ 0xC
  2409  007C                     	ds	1
  2410  007D                     ??_ISR:	
  2411                           
  2412                           	psect	cstackBANK0
  2413  0020                     __pcstackBANK0:	
  2414                           ; 1 bytes @ 0xD
  2415                           
  2416  0020                     ?___ftge:	
  2417  0020                     ?_nrf24l01Send:	
  2418                           ; 1 bit 
  2419                           
  2420  0020                     ??_isdigit:	
  2421                           ; 1 bytes @ 0x0
  2422                           
  2423  0020                     ??_nrf24l01InterfaceInit:	
  2424                           ; 1 bytes @ 0x0
  2425                           
  2426  0020                     ??_doWDTSleep:	
  2427                           ; 1 bytes @ 0x0
  2428                           
  2429  0020                     ?___bmul:	
  2430                           ; 1 bytes @ 0x0
  2431                           
  2432  0020                     ?_memset:	
  2433                           ; 1 bytes @ 0x0
  2434                           
  2435  0020                     ?_strcpy:	
  2436                           ; 2 bytes @ 0x0
  2437                           
  2438  0020                     ?_strlen:	
  2439                           ; 2 bytes @ 0x0
  2440                           
  2441  0020                     ?_strcmp:	
  2442                           ; 2 bytes @ 0x0
  2443                           
  2444  0020                     ?___wmul:	
  2445                           ; 2 bytes @ 0x0
  2446                           
  2447  0020                     ?___lwmod:	
  2448                           ; 2 bytes @ 0x0
  2449                           
  2450  0020                     ?___ftpack:	
  2451                           ; 2 bytes @ 0x0
  2452                           
  2453  0020                     ?___lldiv:	
  2454                           ; 3 bytes @ 0x0
  2455                           
  2456  0020                     nrf24l01Send@data:	
  2457                           ; 4 bytes @ 0x0
  2458                           
  2459  0020                     ___bmul@multiplicand:	
  2460                           ; 1 bytes @ 0x0
  2461                           
  2462  0020                     _isdigit$1708:	
  2463                           ; 1 bytes @ 0x0
  2464                           
  2465  0020                     strcmp@s2:	
  2466                           ; 1 bytes @ 0x0
  2467                           
  2468  0020                     ___wmul@multiplier:	
  2469                           ; 1 bytes @ 0x0
  2470                           
  2471  0020                     ___lwmod@divisor:	
  2472                           ; 2 bytes @ 0x0
  2473                           
  2474  0020                     memset@p1:	
  2475                           ; 2 bytes @ 0x0
  2476                           
  2477  0020                     strcpy@to:	
  2478                           ; 2 bytes @ 0x0
  2479                           
  2480  0020                     strlen@s:	
  2481                           ; 2 bytes @ 0x0
  2482                           
  2483  0020                     ___ftpack@arg:	
  2484                           ; 2 bytes @ 0x0
  2485                           
  2486  0020                     ___ftge@ff1:	
  2487                           ; 3 bytes @ 0x0
  2488                           
  2489  0020                     ___lldiv@divisor:	
  2490                           ; 3 bytes @ 0x0
  2491                           
  2492                           
  2493                           ; 4 bytes @ 0x0
  2494  0020                     	ds	1
  2495  0021                     ??_nrf24l01Send:	
  2496  0021                     ??___bmul:	
  2497                           ; 1 bytes @ 0x1
  2498                           
  2499  0021                     doWDTSleep@wdtps:	
  2500                           ; 1 bytes @ 0x1
  2501                           
  2502  0021                     isdigit@c:	
  2503                           ; 1 bytes @ 0x1
  2504                           
  2505                           
  2506                           ; 1 bytes @ 0x1
  2507  0021                     	ds	1
  2508  0022                     ??_strlen:	
  2509  0022                     ??_strcmp:	
  2510                           ; 1 bytes @ 0x2
  2511                           
  2512  0022                     ?_sleep:	
  2513                           ; 1 bytes @ 0x2
  2514                           
  2515  0022                     nrf24l01Send@command:	
  2516                           ; 1 bytes @ 0x2
  2517                           
  2518  0022                     ___bmul@product:	
  2519                           ; 1 bytes @ 0x2
  2520                           
  2521  0022                     sleep@milliseconds:	
  2522                           ; 1 bytes @ 0x2
  2523                           
  2524  0022                     ___wmul@multiplicand:	
  2525                           ; 2 bytes @ 0x2
  2526                           
  2527  0022                     ___lwmod@dividend:	
  2528                           ; 2 bytes @ 0x2
  2529                           
  2530  0022                     memset@c:	
  2531                           ; 2 bytes @ 0x2
  2532                           
  2533  0022                     strcpy@from:	
  2534                           ; 2 bytes @ 0x2
  2535                           
  2536                           
  2537                           ; 2 bytes @ 0x2
  2538  0022                     	ds	1
  2539  0023                     ??_nrf24l01SetRXMode:	
  2540  0023                     ??_nrf24l01SetRXPipe:	
  2541                           ; 1 bytes @ 0x3
  2542                           
  2543  0023                     ___bmul@multiplier:	
  2544                           ; 1 bytes @ 0x3
  2545                           
  2546  0023                     ___ftpack@exp:	
  2547                           ; 1 bytes @ 0x3
  2548                           
  2549  0023                     strcmp@r:	
  2550                           ; 1 bytes @ 0x3
  2551                           
  2552  0023                     ___ftge@ff2:	
  2553                           ; 1 bytes @ 0x3
  2554                           
  2555                           
  2556                           ; 3 bytes @ 0x3
  2557  0023                     	ds	1
  2558  0024                     ??_strcpy:	
  2559  0024                     ??_nrf24l01SetTXPipe:	
  2560                           ; 1 bytes @ 0x4
  2561                           
  2562  0024                     ??_sleep:	
  2563                           ; 1 bytes @ 0x4
  2564                           
  2565  0024                     ??___wmul:	
  2566                           ; 1 bytes @ 0x4
  2567                           
  2568  0024                     ??___lwmod:	
  2569                           ; 1 bytes @ 0x4
  2570                           
  2571  0024                     nrf24l01SetRXMode@rxMode:	
  2572                           ; 1 bytes @ 0x4
  2573                           
  2574  0024                     ___ftpack@sign:	
  2575                           ; 1 bytes @ 0x4
  2576                           
  2577  0024                     strcmp@s1:	
  2578                           ; 1 bytes @ 0x4
  2579                           
  2580  0024                     ___wmul@product:	
  2581                           ; 1 bytes @ 0x4
  2582                           
  2583  0024                     memset@n:	
  2584                           ; 2 bytes @ 0x4
  2585                           
  2586  0024                     strcpy@cp:	
  2587                           ; 2 bytes @ 0x4
  2588                           
  2589  0024                     strlen@cp:	
  2590                           ; 2 bytes @ 0x4
  2591                           
  2592  0024                     ___lldiv@dividend:	
  2593                           ; 2 bytes @ 0x4
  2594                           
  2595                           
  2596                           ; 4 bytes @ 0x4
  2597  0024                     	ds	1
  2598  0025                     ??___ftpack:	
  2599  0025                     nrf24l01SetRXPipe@pipe:	
  2600                           ; 1 bytes @ 0x5
  2601                           
  2602  0025                     ___lwmod@counter:	
  2603                           ; 1 bytes @ 0x5
  2604                           
  2605                           
  2606                           ; 1 bytes @ 0x5
  2607  0025                     	ds	1
  2608  0026                     ??_memset:	
  2609  0026                     ??_nrf24l01GetPipe:	
  2610                           ; 1 bytes @ 0x6
  2611                           
  2612  0026                     ??___ftge:	
  2613                           ; 1 bytes @ 0x6
  2614                           
  2615  0026                     nrf24l01SetTXPipe@pipe:	
  2616                           ; 1 bytes @ 0x6
  2617                           
  2618  0026                     nrf24l01SetRXPipe@enRXAddr:	
  2619                           ; 1 bytes @ 0x6
  2620                           
  2621  0026                     memset@p:	
  2622                           ; 1 bytes @ 0x6
  2623                           
  2624                           
  2625                           ; 2 bytes @ 0x6
  2626  0026                     	ds	1
  2627  0027                     ??_nrf24l01InitRegisters:	
  2628                           
  2629                           ; 1 bytes @ 0x7
  2630  0027                     	ds	1
  2631  0028                     ??_nrf24l01Service:	
  2632  0028                     ??___lldiv:	
  2633                           ; 1 bytes @ 0x8
  2634                           
  2635  0028                     ?___awtoft:	
  2636                           ; 1 bytes @ 0x8
  2637                           
  2638  0028                     ?___lbtoft:	
  2639                           ; 3 bytes @ 0x8
  2640                           
  2641  0028                     ?___lltoft:	
  2642                           ; 3 bytes @ 0x8
  2643                           
  2644  0028                     ?___lwtoft:	
  2645                           ; 3 bytes @ 0x8
  2646                           
  2647  0028                     nrf24l01GetPipe@pipe:	
  2648                           ; 3 bytes @ 0x8
  2649                           
  2650  0028                     ___awtoft@c:	
  2651                           ; 1 bytes @ 0x8
  2652                           
  2653  0028                     ___lwtoft@c:	
  2654                           ; 2 bytes @ 0x8
  2655                           
  2656  0028                     ___lltoft@c:	
  2657                           ; 2 bytes @ 0x8
  2658                           
  2659                           
  2660                           ; 4 bytes @ 0x8
  2661  0028                     	ds	1
  2662  0029                     nrf24l01GetPipe@name:	
  2663  0029                     nrf24l01InitRegisters@channel:	
  2664                           ; 1 bytes @ 0x9
  2665                           
  2666  0029                     ___lldiv@quotient:	
  2667                           ; 1 bytes @ 0x9
  2668                           
  2669                           
  2670                           ; 4 bytes @ 0x9
  2671  0029                     	ds	1
  2672  002A                     nrf24l01GetPipe@i:	
  2673  002A                     nrf24l01Service@width:	
  2674                           ; 1 bytes @ 0xA
  2675                           
  2676  002A                     nrf24l01InitRegisters@setupAW:	
  2677                           ; 1 bytes @ 0xA
  2678                           
  2679                           
  2680                           ; 1 bytes @ 0xA
  2681  002A                     	ds	1
  2682  002B                     ??___awtoft:	
  2683  002B                     ??___lbtoft:	
  2684                           ; 1 bytes @ 0xB
  2685                           
  2686  002B                     ??___lwtoft:	
  2687                           ; 1 bytes @ 0xB
  2688                           
  2689  002B                     nrf24l01Service@i:	
  2690                           ; 1 bytes @ 0xB
  2691                           
  2692  002B                     nrf24l01InitRegisters@feature:	
  2693                           ; 1 bytes @ 0xB
  2694                           
  2695                           
  2696                           ; 1 bytes @ 0xB
  2697  002B                     	ds	1
  2698  002C                     ?_nrf24l01SendPacket:	
  2699  002C                     ??___lltoft:	
  2700                           ; 1 bytes @ 0xC
  2701                           
  2702  002C                     nrf24l01InitRegisters@rfSetup:	
  2703                           ; 1 bytes @ 0xC
  2704                           
  2705  002C                     nrf24l01SendPacket@txPacket:	
  2706                           ; 1 bytes @ 0xC
  2707                           
  2708                           
  2709                           ; 2 bytes @ 0xC
  2710  002C                     	ds	1
  2711  002D                     nrf24l01InitRegisters@enAA:	
  2712  002D                     ___lldiv@counter:	
  2713                           ; 1 bytes @ 0xD
  2714                           
  2715  002D                     ___awtoft@sign:	
  2716                           ; 1 bytes @ 0xD
  2717                           
  2718  002D                     ___lltoft@exp:	
  2719                           ; 1 bytes @ 0xD
  2720                           
  2721                           
  2722                           ; 1 bytes @ 0xD
  2723  002D                     	ds	1
  2724  002E                     ??_nrf24l01SendPacket:	
  2725  002E                     ?___ftadd:	
  2726                           ; 1 bytes @ 0xE
  2727                           
  2728  002E                     ?___llmod:	
  2729                           ; 3 bytes @ 0xE
  2730                           
  2731  002E                     nrf24l01InitRegisters@DynPD:	
  2732                           ; 4 bytes @ 0xE
  2733                           
  2734  002E                     ___ftadd@f1:	
  2735                           ; 1 bytes @ 0xE
  2736                           
  2737  002E                     ___llmod@divisor:	
  2738                           ; 3 bytes @ 0xE
  2739                           
  2740                           
  2741                           ; 4 bytes @ 0xE
  2742  002E                     	ds	1
  2743  002F                     ___lbtoft@c:	
  2744  002F                     nrf24l01InitRegisters@i:	
  2745                           ; 1 bytes @ 0xF
  2746                           
  2747                           
  2748                           ; 2 bytes @ 0xF
  2749  002F                     	ds	2
  2750  0031                     ??_nrf24l01Init:	
  2751  0031                     ___ftadd@f2:	
  2752                           ; 1 bytes @ 0x11
  2753                           
  2754                           
  2755                           ; 3 bytes @ 0x11
  2756  0031                     	ds	1
  2757  0032                     ___llmod@dividend:	
  2758                           
  2759                           ; 4 bytes @ 0x12
  2760  0032                     	ds	2
  2761  0034                     ??___ftadd:	
  2762                           
  2763                           ; 1 bytes @ 0x14
  2764  0034                     	ds	2
  2765  0036                     ??___llmod:	
  2766                           
  2767                           ; 1 bytes @ 0x16
  2768  0036                     	ds	1
  2769  0037                     ___llmod@counter:	
  2770                           
  2771                           ; 1 bytes @ 0x17
  2772  0037                     	ds	1
  2773  0038                     ?_sprintf:	
  2774  0038                     ___ftadd@sign:	
  2775                           ; 2 bytes @ 0x18
  2776                           
  2777  0038                     sprintf@f:	
  2778                           ; 1 bytes @ 0x18
  2779                           
  2780                           
  2781                           ; 2 bytes @ 0x18
  2782  0038                     	ds	1
  2783  0039                     ___ftadd@exp2:	
  2784                           
  2785                           ; 1 bytes @ 0x19
  2786  0039                     	ds	1
  2787  003A                     ___ftadd@exp1:	
  2788                           
  2789                           ; 1 bytes @ 0x1A
  2790  003A                     	ds	1
  2791  003B                     ?___ftdiv:	
  2792  003B                     ?___ftsub:	
  2793                           ; 3 bytes @ 0x1B
  2794                           
  2795  003B                     ___ftdiv@f2:	
  2796                           ; 3 bytes @ 0x1B
  2797                           
  2798  003B                     ___ftsub@f2:	
  2799                           ; 3 bytes @ 0x1B
  2800                           
  2801                           
  2802                           ; 3 bytes @ 0x1B
  2803  003B                     	ds	3
  2804  003E                     ___ftdiv@f1:	
  2805  003E                     ___ftsub@f1:	
  2806                           ; 3 bytes @ 0x1E
  2807                           
  2808                           
  2809                           ; 3 bytes @ 0x1E
  2810  003E                     	ds	3
  2811  0041                     ??___ftdiv:	
  2812  0041                     ??___ftsub:	
  2813                           ; 1 bytes @ 0x21
  2814                           
  2815                           
  2816                           ; 1 bytes @ 0x21
  2817  0041                     	ds	1
  2818  0042                     ??_sprintf:	
  2819                           
  2820                           ; 1 bytes @ 0x22
  2821  0042                     	ds	3
  2822  0045                     ___ftdiv@cntr:	
  2823                           
  2824                           ; 1 bytes @ 0x25
  2825  0045                     	ds	1
  2826  0046                     ___ftdiv@f3:	
  2827                           
  2828                           ; 3 bytes @ 0x26
  2829  0046                     	ds	2
  2830  0048                     sprintf@flag:	
  2831                           
  2832                           ; 1 bytes @ 0x28
  2833  0048                     	ds	1
  2834  0049                     sprintf@ap:	
  2835  0049                     ___ftdiv@exp:	
  2836                           ; 1 bytes @ 0x29
  2837                           
  2838                           
  2839                           ; 1 bytes @ 0x29
  2840  0049                     	ds	1
  2841  004A                     ___ftdiv@sign:	
  2842  004A                     sprintf@val:	
  2843                           ; 1 bytes @ 0x2A
  2844                           
  2845                           
  2846                           ; 4 bytes @ 0x2A
  2847  004A                     	ds	1
  2848  004B                     ?_getADCValue:	
  2849                           
  2850                           ; 3 bytes @ 0x2B
  2851  004B                     	ds	3
  2852  004E                     ??_getADCValue:	
  2853  004E                     sprintf@sp:	
  2854                           ; 1 bytes @ 0x2E
  2855                           
  2856                           
  2857                           ; 1 bytes @ 0x2E
  2858  004E                     	ds	1
  2859  004F                     sprintf@width:	
  2860                           
  2861                           ; 2 bytes @ 0x2F
  2862  004F                     	ds	2
  2863  0051                     getADCValue@adcLoop:	
  2864  0051                     sprintf@prec:	
  2865                           ; 2 bytes @ 0x31
  2866                           
  2867                           
  2868                           ; 2 bytes @ 0x31
  2869  0051                     	ds	2
  2870  0053                     getADCValue@channel:	
  2871  0053                     sprintf@c:	
  2872                           ; 1 bytes @ 0x33
  2873                           
  2874                           
  2875                           ; 1 bytes @ 0x33
  2876  0053                     	ds	1
  2877  0054                     getADCValue@adcSum:	
  2878                           
  2879                           ; 3 bytes @ 0x34
  2880  0054                     	ds	3
  2881  0057                     ?___ftmul:	
  2882  0057                     ?___ftneg:	
  2883                           ; 3 bytes @ 0x37
  2884                           
  2885  0057                     ___ftmul@f1:	
  2886                           ; 3 bytes @ 0x37
  2887                           
  2888  0057                     ___ftneg@f1:	
  2889                           ; 3 bytes @ 0x37
  2890                           
  2891                           
  2892                           ; 3 bytes @ 0x37
  2893  0057                     	ds	3
  2894  005A                     ??___ftneg:	
  2895  005A                     ___ftmul@f2:	
  2896                           ; 1 bytes @ 0x3A
  2897                           
  2898                           
  2899                           ; 3 bytes @ 0x3A
  2900  005A                     	ds	3
  2901  005D                     ??___ftmul:	
  2902                           
  2903                           ; 1 bytes @ 0x3D
  2904  005D                     	ds	4
  2905  0061                     ___ftmul@exp:	
  2906                           
  2907                           ; 1 bytes @ 0x41
  2908  0061                     	ds	1
  2909  0062                     ___ftmul@f3_as_product:	
  2910                           
  2911                           ; 3 bytes @ 0x42
  2912  0062                     	ds	3
  2913  0065                     ___ftmul@cntr:	
  2914                           
  2915                           ; 1 bytes @ 0x45
  2916  0065                     	ds	1
  2917  0066                     ___ftmul@sign:	
  2918                           
  2919                           ; 1 bytes @ 0x46
  2920  0066                     	ds	1
  2921  0067                     ?___fttol:	
  2922  0067                     ___fttol@f1:	
  2923                           ; 4 bytes @ 0x47
  2924                           
  2925                           
  2926                           ; 3 bytes @ 0x47
  2927  0067                     	ds	4
  2928  006B                     ??___fttol:	
  2929                           
  2930                           ; 1 bytes @ 0x4B
  2931  006B                     	ds	4
  2932  006F                     ??_ftoa:	
  2933                           
  2934                           ; 1 bytes @ 0x4F
  2935  006F                     	ds	1
  2936  0070                     ??_strcat:	
  2937                           
  2938                           	psect	maintext
  2939  0B97                     __pmaintext:	
  2940                           ; 1 bytes @ 0x50
  2941 ;;
  2942 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2943 ;;
  2944 ;; *************** function _main *****************
  2945 ;; Defined at:
  2946 ;;		line 178 in file "main.c"
  2947 ;; Parameters:    Size  Location     Type
  2948 ;;		None
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;  packet         33   38[BANK1 ] struct .
  2951 ;;  pipe            1   37[BANK1 ] unsigned char 
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  1    wreg      void 
  2954 ;; Registers used:
  2955 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2956 ;; Tracked objects:
  2957 ;;		On entry : B1F/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2962 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  2963 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  2964 ;;      Totals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  2965 ;;Total ram usage:       35 bytes
  2966 ;; Hardware stack levels required when called:   15
  2967 ;; This function calls:
  2968 ;;		___lwtoft
  2969 ;;		_loop
  2970 ;;		_nrf24l01GetPipe
  2971 ;;		_nrf24l01Init
  2972 ;;		_nrf24l01SetTXPipe
  2973 ;;		_sendMessage
  2974 ;;		_strcpy
  2975 ;; This function is called by:
  2976 ;;		Startup code after reset
  2977 ;; This function uses a non-reentrant model
  2978 ;;
  2979                           
  2980                           
  2981                           ;psect for function _main
  2982  0B97                     _main:	
  2983                           
  2984                           ;main.c: 181: ANSELA = 0x00;
  2985                           
  2986                           ;incstack = 0
  2987                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2988  0B97  0023               	movlb	3	; select bank3
  2989  0B98  018C               	clrf	12	;volatile
  2990                           
  2991                           ;main.c: 182: ANSELC = 0x00;
  2992  0B99  018E               	clrf	14	;volatile
  2993                           
  2994                           ;main.c: 184: ODCONA = 0x00;
  2995  0B9A  0025               	movlb	5	; select bank5
  2996  0B9B  018C               	clrf	12	;volatile
  2997                           
  2998                           ;main.c: 185: ODCONC = 0x00;
  2999  0B9C  018E               	clrf	14	;volatile
  3000                           
  3001                           ;main.c: 190: INLVLA = 0x00;
  3002  0B9D  0027               	movlb	7	; select bank7
  3003  0B9E  018C               	clrf	12	;volatile
  3004                           
  3005                           ;main.c: 191: INLVLC = 0x00;
  3006  0B9F  018E               	clrf	14	;volatile
  3007                           
  3008                           ;main.c: 193: WPUA = 0x00;
  3009  0BA0  0024               	movlb	4	; select bank4
  3010  0BA1  018C               	clrf	12	;volatile
  3011                           
  3012                           ;main.c: 194: WPUC = 0x00;
  3013  0BA2  018E               	clrf	14	;volatile
  3014                           
  3015                           ;main.c: 196: TRISCbits.TRISC5 = 0;
  3016  0BA3  0021               	movlb	1	; select bank1
  3017  0BA4  128E               	bcf	14,5	;volatile
  3018                           
  3019                           ;main.c: 197: TRISCbits.TRISC4 = 0;
  3020  0BA5  120E               	bcf	14,4	;volatile
  3021                           
  3022                           ;main.c: 199: PORTCbits.RC4 = 0;
  3023  0BA6  0020               	movlb	0	; select bank0
  3024  0BA7  120E               	bcf	14,4	;volatile
  3025                           
  3026                           ;main.c: 206: INTCONbits.PEIE = 0;
  3027  0BA8  130B               	bcf	11,6	;volatile
  3028                           
  3029                           ;main.c: 207: INTCONbits.GIE = 0;
  3030  0BA9  138B               	bcf	11,7	;volatile
  3031                           
  3032                           ;main.c: 209: OSCCON1bits.NOSC = 0b000;
  3033  0BAA  308F               	movlw	-113
  3034  0BAB  0032               	movlb	18	; select bank18
  3035  0BAC  0599               	andwf	25,f	;volatile
  3036                           
  3037                           ;main.c: 210: OSCCON1bits.NDIV = 0b000;
  3038  0BAD  30F0               	movlw	-16
  3039  0BAE  0599               	andwf	25,f	;volatile
  3040                           
  3041                           ;main.c: 212: _delay((unsigned long)((10)*(32000000/4000.0)));
  3042  0BAF  3068               	movlw	104
  3043  0BB0  0021               	movlb	1	; select bank1
  3044  0BB1  00C4               	movwf	??_main^(0+128)
  3045  0BB2  30E4               	movlw	228
  3046  0BB3                     u4017:	
  3047  0BB3  0B89               	decfsz	9,f
  3048  0BB4  2BB3               	goto	u4017
  3049  0BB5  0BC4               	decfsz	??_main^(0+128),f
  3050  0BB6  2BB3               	goto	u4017
  3051  0BB7  0000               	nop
  3052                           
  3053                           ;main.c: 216: strcpy(romData->name, "UH1");
  3054  0BB8  0021               	movlb	1	; select bank1
  3055  0BB9  086B               	movf	_romData^(0+128),w
  3056  0BBA  3E01               	addlw	1
  3057  0BBB  0020               	movlb	0	; select bank0
  3058  0BBC  00A0               	movwf	strcpy@to
  3059  0BBD  3002               	movlw	2
  3060  0BBE  00A1               	movwf	strcpy@to+1
  3061  0BBF  3064               	movlw	low (STR_8| (0+32768))
  3062  0BC0  00A2               	movwf	strcpy@from
  3063  0BC1  3098               	movlw	high (STR_8| (0+32768))
  3064  0BC2  00A3               	movwf	strcpy@from+1
  3065  0BC3  3196  261E  318B   	fcall	_strcpy
  3066                           
  3067                           ;main.c: 218: nrf24l01Init();
  3068  0BC6  3189  2123  318B   	fcall	_nrf24l01Init
  3069                           
  3070                           ;main.c: 220: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3071  0BC9  0021               	movlb	1	; select bank1
  3072  0BCA  086B               	movf	_romData^(0+128),w
  3073  0BCB  3E01               	addlw	1
  3074  0BCC  3188  206C  318B   	fcall	_nrf24l01GetPipe
  3075  0BCF  0021               	movlb	1	; select bank1
  3076  0BD0  00C4               	movwf	??_main^(0+128)
  3077  0BD1  0844               	movf	??_main^(0+128),w
  3078  0BD2  00C5               	movwf	main@pipe^(0+128)
  3079                           
  3080                           ;main.c: 221: nrf24l01SetTXPipe(pipe);
  3081  0BD3  0845               	movf	main@pipe^(0+128),w
  3082  0BD4  3189  2166  318B   	fcall	_nrf24l01SetTXPipe
  3083                           
  3084                           ;main.c: 226: ADCON0bits.ADON = 0;
  3085  0BD7  0021               	movlb	1	; select bank1
  3086  0BD8  101D               	bcf	29,0	;volatile
  3087                           
  3088                           ;main.c: 229: PORTAbits.RA4 = 0;
  3089  0BD9  0020               	movlb	0	; select bank0
  3090  0BDA  120C               	bcf	12,4	;volatile
  3091                           
  3092                           ;main.c: 230: TRISAbits.TRISA4 = 1;
  3093  0BDB  0021               	movlb	1	; select bank1
  3094  0BDC  160C               	bsf	12,4	;volatile
  3095                           
  3096                           ;main.c: 231: WPUAbits.WPUA4 = 0;
  3097  0BDD  0024               	movlb	4	; select bank4
  3098  0BDE  120C               	bcf	12,4	;volatile
  3099                           
  3100                           ;main.c: 232: ODCONAbits.ODCA4 = 1;
  3101  0BDF  0025               	movlb	5	; select bank5
  3102  0BE0  160C               	bsf	12,4	;volatile
  3103                           
  3104                           ;main.c: 233: ANSELAbits.ANSA4 = 1;
  3105  0BE1  0023               	movlb	3	; select bank3
  3106  0BE2  160C               	bsf	12,4	;volatile
  3107                           
  3108                           ;main.c: 236: ANSELCbits.ANSC3 = 1;
  3109  0BE3  158E               	bsf	14,3	;volatile
  3110                           
  3111                           ;main.c: 237: TRISCbits.TRISC3 = 1;
  3112  0BE4  0021               	movlb	1	; select bank1
  3113  0BE5  158E               	bsf	14,3	;volatile
  3114                           
  3115                           ;main.c: 240: FVRCONbits.TSEN = 1;
  3116  0BE6  0022               	movlb	2	; select bank2
  3117  0BE7  1697               	bsf	23,5	;volatile
  3118                           
  3119                           ;main.c: 241: FVRCONbits.TSRNG = 1;
  3120  0BE8  1617               	bsf	23,4	;volatile
  3121                           
  3122                           ;main.c: 244: FVRCONbits.FVREN = 0;
  3123  0BE9  1397               	bcf	23,7	;volatile
  3124                           
  3125                           ;main.c: 245: FVRCONbits.ADFVR = 0b10;
  3126  0BEA  0817               	movf	23,w	;volatile
  3127  0BEB  39FC               	andlw	-4
  3128  0BEC  3802               	iorlw	2
  3129  0BED  0097               	movwf	23	;volatile
  3130                           
  3131                           ;main.c: 247: ADCON1bits.ADCS = 0b111;
  3132  0BEE  3070               	movlw	112
  3133  0BEF  0021               	movlb	1	; select bank1
  3134  0BF0  049E               	iorwf	30,f	;volatile
  3135                           
  3136                           ;main.c: 248: ADCON1bits.ADFM = 1;
  3137  0BF1  179E               	bsf	30,7	;volatile
  3138                           
  3139                           ;main.c: 249: ADCON1bits.ADPREF = 0b11;
  3140  0BF2  3003               	movlw	3
  3141  0BF3  049E               	iorwf	30,f	;volatile
  3142                           
  3143                           ;main.c: 250: ADCON1bits.ADNREF = 0b00;
  3144  0BF4  111E               	bcf	30,2	;volatile
  3145                           
  3146                           ;main.c: 253: ADCON0bits.CHS = 3;
  3147  0BF5  081D               	movf	29,w	;volatile
  3148  0BF6  3903               	andlw	-253
  3149  0BF7  380C               	iorlw	12
  3150  0BF8  009D               	movwf	29	;volatile
  3151                           
  3152                           ;main.c: 258: TRISAbits.TRISA2 = 1;
  3153  0BF9  150C               	bsf	12,2	;volatile
  3154                           
  3155                           ;main.c: 259: PIE0bits.INTE = 1;
  3156  0BFA  1410               	bsf	16,0	;volatile
  3157                           
  3158                           ;main.c: 260: INTCONbits.INTEDG = 0;
  3159  0BFB  100B               	bcf	11,0	;volatile
  3160                           
  3161                           ;main.c: 263: TRISAbits.TRISA5 = 0;
  3162  0BFC  128C               	bcf	12,5	;volatile
  3163                           
  3164                           ;main.c: 264: PORTAbits.RA5 = 0;
  3165  0BFD  0020               	movlb	0	; select bank0
  3166  0BFE  128C               	bcf	12,5	;volatile
  3167                           
  3168                           ;main.c: 267: INTCONbits.PEIE = 1;
  3169  0BFF  170B               	bsf	11,6	;volatile
  3170                           
  3171                           ;main.c: 268: INTCONbits.GIE = 1;
  3172  0C00  178B               	bsf	11,7	;volatile
  3173                           
  3174                           ;main.c: 270: nrf24l01Packet_t packet;;main.c: 272: sendMessage(&packet, "BOOT", romData
      +                          ->bootMode);
  3175  0C01  30C6               	movlw	low main@packet
  3176  0C02  0021               	movlb	1	; select bank1
  3177  0C03  00B9               	movwf	sendMessage@packet^(0+128)
  3178  0C04  3000               	movlw	high main@packet
  3179  0C05  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  3180  0C06  305F               	movlw	low (STR_9| (0+32768))
  3181  0C07  00BB               	movwf	sendMessage@topic^(0+128)
  3182  0C08  3098               	movlw	high (STR_9| (0+32768))
  3183  0C09  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  3184  0C0A  086B               	movf	_romData^(0+128),w
  3185  0C0B  3E11               	addlw	17
  3186  0C0C  0086               	movwf	6
  3187  0C0D  3002               	movlw	2	; select bank4/5
  3188  0C0E  0087               	movwf	7
  3189  0C0F  3F40               	moviw [0]fsr1
  3190  0C10  0020               	movlb	0	; select bank0
  3191  0C11  00A8               	movwf	___lwtoft@c
  3192  0C12  3F41               	moviw [1]fsr1
  3193  0C13  00A9               	movwf	___lwtoft@c+1
  3194  0C14  3195  258B  318B   	fcall	___lwtoft
  3195  0C17  0020               	movlb	0	; select bank0
  3196  0C18  0828               	movf	?___lwtoft,w
  3197  0C19  0021               	movlb	1	; select bank1
  3198  0C1A  00BD               	movwf	sendMessage@value^(0+128)
  3199  0C1B  0020               	movlb	0	; select bank0
  3200  0C1C  0829               	movf	?___lwtoft+1,w
  3201  0C1D  0021               	movlb	1	; select bank1
  3202  0C1E  00BE               	movwf	(sendMessage@value+1)^(0+128)
  3203  0C1F  0020               	movlb	0	; select bank0
  3204  0C20  082A               	movf	?___lwtoft+2,w
  3205  0C21  0021               	movlb	1	; select bank1
  3206  0C22  00BF               	movwf	(sendMessage@value+2)^(0+128)
  3207  0C23  318B  230D  318B   	fcall	_sendMessage
  3208  0C26                     l3857:	
  3209                           ;main.c: 274: while(1){
  3210                           
  3211                           
  3212                           ;main.c: 275: loop();
  3213  0C26  3183  237A  318B   	fcall	_loop
  3214  0C29  2C26               	goto	l3857
  3215  0C2A                     __end_of_main:	
  3216                           ;main.c: 276: };main.c: 278: return;
  3217                           
  3218                           
  3219                           	psect	text1
  3220  0923                     __ptext1:	
  3221 ;; *************** function _nrf24l01Init *****************
  3222 ;; Defined at:
  3223 ;;		line 483 in file "nrf24l01.c"
  3224 ;; Parameters:    Size  Location     Type
  3225 ;;		None
  3226 ;; Auto vars:     Size  Location     Type
  3227 ;;		None
  3228 ;; Return value:  Size  Location     Type
  3229 ;;                  1    wreg      void 
  3230 ;; Registers used:
  3231 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3232 ;; Tracked objects:
  3233 ;;		On entry : 0/0
  3234 ;;		On exit  : 0/0
  3235 ;;		Unchanged: 0/0
  3236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3239 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3240 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3241 ;;Total ram usage:        2 bytes
  3242 ;; Hardware stack levels used:    1
  3243 ;; Hardware stack levels required when called:   12
  3244 ;; This function calls:
  3245 ;;		_nrf24l01CEHigh
  3246 ;;		_nrf24l01CELow
  3247 ;;		_nrf24l01InitRegisters
  3248 ;;		_nrf24l01InterfaceInit
  3249 ;; This function is called by:
  3250 ;;		_main
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           
  3255                           ;psect for function _nrf24l01Init
  3256  0923                     _nrf24l01Init:	
  3257                           
  3258                           ;nrf24l01.c: 486: nrf24l01InterfaceInit();
  3259                           
  3260                           ;incstack = 0
  3261                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3262  0923  3196  2675  3189   	fcall	_nrf24l01InterfaceInit
  3263                           
  3264                           ;nrf24l01.c: 491: nrf24l01CELow();
  3265  0926  3195  2540  3189   	fcall	_nrf24l01CELow
  3266                           
  3267                           ;nrf24l01.c: 493: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3268  0929  3003               	movlw	3
  3269  092A  0020               	movlb	0	; select bank0
  3270  092B  00B2               	movwf	??_nrf24l01Init+1
  3271  092C  3008               	movlw	8
  3272  092D  00B1               	movwf	??_nrf24l01Init
  3273  092E  3077               	movlw	119
  3274  092F                     u4027:	
  3275  092F  0B89               	decfsz	9,f
  3276  0930  292F               	goto	u4027
  3277  0931  0BB1               	decfsz	??_nrf24l01Init,f
  3278  0932  292F               	goto	u4027
  3279  0933  0BB2               	decfsz	??_nrf24l01Init+1,f
  3280  0934  292F               	goto	u4027
  3281                           
  3282                           ;nrf24l01.c: 495: nrf24l01InitRegisters();
  3283  0935  3186  2611  3189   	fcall	_nrf24l01InitRegisters
  3284                           
  3285                           ;nrf24l01.c: 497: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3286  0938  3003               	movlw	3
  3287  0939  0020               	movlb	0	; select bank0
  3288  093A  00B2               	movwf	??_nrf24l01Init+1
  3289  093B  3008               	movlw	8
  3290  093C  00B1               	movwf	??_nrf24l01Init
  3291  093D  3077               	movlw	119
  3292  093E                     u4037:	
  3293  093E  0B89               	decfsz	9,f
  3294  093F  293E               	goto	u4037
  3295  0940  0BB1               	decfsz	??_nrf24l01Init,f
  3296  0941  293E               	goto	u4037
  3297  0942  0BB2               	decfsz	??_nrf24l01Init+1,f
  3298  0943  293E               	goto	u4037
  3299                           
  3300                           ;nrf24l01.c: 499: nrf24l01CEHigh();
  3301  0944  3195  253D         	fcall	_nrf24l01CEHigh
  3302                           
  3303                           ;nrf24l01.c: 501: status.TX = statuses.TX.Idle;
  3304  0946  3034               	movlw	low (_statuses| (0+32768))
  3305  0947  0084               	movwf	4
  3306  0948  3098               	movlw	high (_statuses| (0+32768))
  3307  0949  0085               	movwf	5
  3308  094A  0800               	movf	0,w	;code access
  3309  094B  0020               	movlb	0	; select bank0
  3310  094C  00B1               	movwf	??_nrf24l01Init
  3311  094D  0021               	movlb	1	; select bank1
  3312  094E  0867               	movf	_status^(0+128),w	;volatile
  3313  094F  0020               	movlb	0	; select bank0
  3314  0950  0631               	xorwf	??_nrf24l01Init,w
  3315  0951  39F0               	andlw	-16
  3316  0952  0631               	xorwf	??_nrf24l01Init,w
  3317  0953  0021               	movlb	1	; select bank1
  3318  0954  00E7               	movwf	_status^(0+128)	;volatile
  3319                           
  3320                           ;nrf24l01.c: 502: status.RX = statuses.RX.Idle;
  3321  0955  3038               	movlw	low ((_statuses+4)| (0+32768))
  3322  0956  0084               	movwf	4
  3323  0957  3098               	movlw	high ((_statuses+4)| (0+32768))
  3324  0958  0085               	movwf	5
  3325  0959  0800               	movf	0,w	;code access
  3326  095A  0020               	movlb	0	; select bank0
  3327  095B  00B1               	movwf	??_nrf24l01Init
  3328  095C  0EB1               	swapf	??_nrf24l01Init,f
  3329  095D  0021               	movlb	1	; select bank1
  3330  095E  0867               	movf	_status^(0+128),w	;volatile
  3331  095F  0020               	movlb	0	; select bank0
  3332  0960  0631               	xorwf	??_nrf24l01Init,w
  3333  0961  390F               	andlw	-241
  3334  0962  0631               	xorwf	??_nrf24l01Init,w
  3335  0963  0021               	movlb	1	; select bank1
  3336  0964  00E7               	movwf	_status^(0+128)	;volatile
  3337  0965  0008               	return
  3338  0966                     __end_of_nrf24l01Init:	
  3339                           
  3340                           	psect	text2
  3341  1675                     __ptext2:	
  3342 ;; *************** function _nrf24l01InterfaceInit *****************
  3343 ;; Defined at:
  3344 ;;		line 27 in file "interface.c"
  3345 ;; Parameters:    Size  Location     Type
  3346 ;;		None
  3347 ;; Auto vars:     Size  Location     Type
  3348 ;;		None
  3349 ;; Return value:  Size  Location     Type
  3350 ;;                  1    wreg      void 
  3351 ;; Registers used:
  3352 ;;		wreg, status,2, status,0
  3353 ;; Tracked objects:
  3354 ;;		On entry : 0/0
  3355 ;;		On exit  : 0/0
  3356 ;;		Unchanged: 0/0
  3357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3362 ;;Total ram usage:        0 bytes
  3363 ;; Hardware stack levels used:    1
  3364 ;; Hardware stack levels required when called:    7
  3365 ;; This function calls:
  3366 ;;		Nothing
  3367 ;; This function is called by:
  3368 ;;		_nrf24l01Init
  3369 ;; This function uses a non-reentrant model
  3370 ;;
  3371                           
  3372                           
  3373                           ;psect for function _nrf24l01InterfaceInit
  3374  1675                     _nrf24l01InterfaceInit:	
  3375                           
  3376                           ;interface.c: 29: TRISAbits.TRISA0 = 0;
  3377                           
  3378                           ;incstack = 0
  3379                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3380  1675  0021               	movlb	1	; select bank1
  3381  1676  100C               	bcf	12,0	;volatile
  3382                           
  3383                           ;interface.c: 30: TRISAbits.TRISA1 = 0;
  3384  1677  108C               	bcf	12,1	;volatile
  3385                           
  3386                           ;interface.c: 32: TRISCbits.TRISC1 = 1;
  3387  1678  148E               	bsf	14,1	;volatile
  3388                           
  3389                           ;interface.c: 33: TRISCbits.TRISC2 = 0;
  3390  1679  110E               	bcf	14,2	;volatile
  3391                           
  3392                           ;interface.c: 34: TRISCbits.TRISC0 = 0;
  3393  167A  100E               	bcf	14,0	;volatile
  3394                           
  3395                           ;interface.c: 36: SSP1CON1bits.SSPEN = 0;
  3396  167B  0024               	movlb	4	; select bank4
  3397  167C  1295               	bcf	21,5	;volatile
  3398                           
  3399                           ;interface.c: 38: RC1PPSbits.RC1PPS = 0b10001;
  3400  167D  003D               	movlb	29	; select bank29
  3401  167E  0821               	movf	33,w	;volatile
  3402  167F  39E0               	andlw	-32
  3403  1680  3811               	iorlw	17
  3404  1681  00A1               	movwf	33	;volatile
  3405                           
  3406                           ;interface.c: 39: RC2PPSbits.RC2PPS = 0b11001;
  3407  1682  0822               	movf	34,w	;volatile
  3408  1683  39E0               	andlw	-32
  3409  1684  3819               	iorlw	25
  3410  1685  00A2               	movwf	34	;volatile
  3411                           
  3412                           ;interface.c: 40: RC0PPSbits.RC0PPS = 0b11000;
  3413  1686  0820               	movf	32,w	;volatile
  3414  1687  39E0               	andlw	-32
  3415  1688  3818               	iorlw	24
  3416  1689  00A0               	movwf	32	;volatile
  3417                           
  3418                           ;interface.c: 42: SSP1CON1bits.CKP = 0;
  3419  168A  0024               	movlb	4	; select bank4
  3420  168B  1215               	bcf	21,4	;volatile
  3421                           
  3422                           ;interface.c: 43: SSP1STATbits.CKE = 1;
  3423  168C  1714               	bsf	20,6	;volatile
  3424                           
  3425                           ;interface.c: 44: SSP1CON1bits.SSPM = 0b0001;
  3426  168D  0815               	movf	21,w	;volatile
  3427  168E  39F0               	andlw	-16
  3428  168F  3801               	iorlw	1
  3429  1690  0095               	movwf	21	;volatile
  3430                           
  3431                           ;interface.c: 46: SSP1CON1bits.SSPEN = 1;
  3432  1691  1695               	bsf	21,5	;volatile
  3433  1692  0008               	return
  3434  1693                     __end_of_nrf24l01InterfaceInit:	
  3435                           
  3436                           	psect	text3
  3437  0611                     __ptext3:	
  3438 ;; *************** function _nrf24l01InitRegisters *****************
  3439 ;; Defined at:
  3440 ;;		line 383 in file "nrf24l01.c"
  3441 ;; Parameters:    Size  Location     Type
  3442 ;;		None
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;  i               2   15[BANK0 ] unsigned int 
  3445 ;;  DynPD           1   14[BANK0 ] struct .
  3446 ;;  enAA            1   13[BANK0 ] struct .
  3447 ;;  rfSetup         1   12[BANK0 ] struct .
  3448 ;;  feature         1   11[BANK0 ] struct .
  3449 ;;  setupAW         1   10[BANK0 ] struct .
  3450 ;;  channel         1    9[BANK0 ] struct .
  3451 ;; Return value:  Size  Location     Type
  3452 ;;                  1    wreg      void 
  3453 ;; Registers used:
  3454 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3455 ;; Tracked objects:
  3456 ;;		On entry : 0/0
  3457 ;;		On exit  : 0/0
  3458 ;;		Unchanged: 0/0
  3459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3461 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3462 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3463 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3464 ;;Total ram usage:       10 bytes
  3465 ;; Hardware stack levels used:    1
  3466 ;; Hardware stack levels required when called:   11
  3467 ;; This function calls:
  3468 ;;		___bmul
  3469 ;;		_nrf24l01SPIEnd
  3470 ;;		_nrf24l01SPISend
  3471 ;;		_nrf24l01SPIStart
  3472 ;;		_nrf24l01Send
  3473 ;;		_nrf24l01SetRXPipe
  3474 ;;		_nrf24l01SetTXPipe
  3475 ;; This function is called by:
  3476 ;;		_nrf24l01Init
  3477 ;; This function uses a non-reentrant model
  3478 ;;
  3479                           
  3480                           
  3481                           ;psect for function _nrf24l01InitRegisters
  3482  0611                     _nrf24l01InitRegisters:	
  3483                           
  3484                           ;nrf24l01.c: 385: status.configRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x00, 0);
  3485                           
  3486                           ;incstack = 0
  3487                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3488  0611  0020               	movlb	0	; select bank0
  3489  0612  01A0               	clrf	nrf24l01Send@data
  3490  0613  3000               	movlw	0
  3491  0614  3196  26B2  3186   	fcall	_nrf24l01Send
  3492  0617  0020               	movlb	0	; select bank0
  3493  0618  00A7               	movwf	??_nrf24l01InitRegisters
  3494  0619  0827               	movf	??_nrf24l01InitRegisters,w
  3495  061A  0021               	movlb	1	; select bank1
  3496  061B  00E9               	movwf	(_status^(0+128)+2)	;volatile
  3497                           
  3498                           ;nrf24l01.c: 387: status.configRegister.PWR_UP = 0;
  3499  061C  10E9               	bcf	(_status^(0+128)+2),1	;volatile
  3500                           
  3501                           ;nrf24l01.c: 388: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3502  061D  0869               	movf	(_status^(0+128)+2),w	;volatile
  3503  061E  0020               	movlb	0	; select bank0
  3504  061F  00A7               	movwf	??_nrf24l01InitRegisters
  3505  0620  0827               	movf	??_nrf24l01InitRegisters,w
  3506  0621  00A0               	movwf	nrf24l01Send@data
  3507  0622  3020               	movlw	32
  3508  0623  3196  26B2  3186   	fcall	_nrf24l01Send
  3509                           
  3510                           ;nrf24l01.c: 390: n_SETUP_AW_t setupAW;;nrf24l01.c: 391: setupAW.byte = 0x00;
  3511  0626  0020               	movlb	0	; select bank0
  3512  0627  01AA               	clrf	nrf24l01InitRegisters@setupAW
  3513                           
  3514                           ;nrf24l01.c: 392: setupAW.AW = 0b11;
  3515  0628  3003               	movlw	3
  3516  0629  04AA               	iorwf	nrf24l01InitRegisters@setupAW,f
  3517                           
  3518                           ;nrf24l01.c: 393: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x03, setupAW.byte);
  3519  062A  082A               	movf	nrf24l01InitRegisters@setupAW,w
  3520  062B  00A7               	movwf	??_nrf24l01InitRegisters
  3521  062C  0827               	movf	??_nrf24l01InitRegisters,w
  3522  062D  00A0               	movwf	nrf24l01Send@data
  3523  062E  3023               	movlw	35
  3524  062F  3196  26B2  3186   	fcall	_nrf24l01Send
  3525                           
  3526                           ;nrf24l01.c: 396: n_RF_CH_t channel;;nrf24l01.c: 397: channel.RF_CH = 2;
  3527  0632  0020               	movlb	0	; select bank0
  3528  0633  0829               	movf	nrf24l01InitRegisters@channel,w
  3529  0634  3980               	andlw	-128
  3530  0635  3802               	iorlw	2
  3531  0636  00A9               	movwf	nrf24l01InitRegisters@channel
  3532                           
  3533                           ;nrf24l01.c: 398: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3534  0637  0829               	movf	nrf24l01InitRegisters@channel,w
  3535  0638  00A7               	movwf	??_nrf24l01InitRegisters
  3536  0639  0827               	movf	??_nrf24l01InitRegisters,w
  3537  063A  00A0               	movwf	nrf24l01Send@data
  3538  063B  3025               	movlw	37
  3539  063C  3196  26B2  3186   	fcall	_nrf24l01Send
  3540                           
  3541                           ;nrf24l01.c: 401: n_RF_SETUP_t rfSetup;;nrf24l01.c: 402: rfSetup.byte = 0x00;
  3542  063F  0020               	movlb	0	; select bank0
  3543  0640  01AC               	clrf	nrf24l01InitRegisters@rfSetup
  3544                           
  3545                           ;nrf24l01.c: 403: rfSetup.RF_DR_LOW = 0;
  3546  0641  12AC               	bcf	nrf24l01InitRegisters@rfSetup,5
  3547                           
  3548                           ;nrf24l01.c: 404: rfSetup.RF_DR_HIGH = 1;
  3549  0642  15AC               	bsf	nrf24l01InitRegisters@rfSetup,3
  3550                           
  3551                           ;nrf24l01.c: 405: rfSetup.RF_PWR = 3;
  3552  0643  3006               	movlw	6
  3553  0644  04AC               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3554                           
  3555                           ;nrf24l01.c: 406: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3556  0645  082C               	movf	nrf24l01InitRegisters@rfSetup,w
  3557  0646  00A7               	movwf	??_nrf24l01InitRegisters
  3558  0647  0827               	movf	??_nrf24l01InitRegisters,w
  3559  0648  00A0               	movwf	nrf24l01Send@data
  3560  0649  3026               	movlw	38
  3561  064A  3196  26B2  3186   	fcall	_nrf24l01Send
  3562                           
  3563                           ;nrf24l01.c: 409: nrf24l01SetRXPipe(0xFF);
  3564  064D  30FF               	movlw	255
  3565  064E  3196  26D2  3186   	fcall	_nrf24l01SetRXPipe
  3566                           
  3567                           ;nrf24l01.c: 412: n_EN_AA_t enAA;;nrf24l01.c: 413: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3568  0651  0020               	movlb	0	; select bank0
  3569  0652  01A0               	clrf	nrf24l01Send@data
  3570  0653  3001               	movlw	1
  3571  0654  3196  26B2  3186   	fcall	_nrf24l01Send
  3572  0657  0020               	movlb	0	; select bank0
  3573  0658  00A7               	movwf	??_nrf24l01InitRegisters
  3574  0659  0827               	movf	??_nrf24l01InitRegisters,w
  3575  065A  00AD               	movwf	nrf24l01InitRegisters@enAA
  3576                           
  3577                           ;nrf24l01.c: 414: enAA.ENAA_P0 = 0;
  3578  065B  102D               	bcf	nrf24l01InitRegisters@enAA,0
  3579                           
  3580                           ;nrf24l01.c: 415: enAA.ENAA_P1 = 0;
  3581  065C  10AD               	bcf	nrf24l01InitRegisters@enAA,1
  3582                           
  3583                           ;nrf24l01.c: 416: enAA.ENAA_P2 = 0;
  3584  065D  112D               	bcf	nrf24l01InitRegisters@enAA,2
  3585                           
  3586                           ;nrf24l01.c: 417: enAA.ENAA_P3 = 0;
  3587  065E  11AD               	bcf	nrf24l01InitRegisters@enAA,3
  3588                           
  3589                           ;nrf24l01.c: 418: enAA.ENAA_P4 = 0;
  3590  065F  122D               	bcf	nrf24l01InitRegisters@enAA,4
  3591                           
  3592                           ;nrf24l01.c: 419: enAA.ENAA_P5 = 0;
  3593  0660  12AD               	bcf	nrf24l01InitRegisters@enAA,5
  3594                           
  3595                           ;nrf24l01.c: 420: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3596  0661  082D               	movf	nrf24l01InitRegisters@enAA,w
  3597  0662  00A7               	movwf	??_nrf24l01InitRegisters
  3598  0663  0827               	movf	??_nrf24l01InitRegisters,w
  3599  0664  00A0               	movwf	nrf24l01Send@data
  3600  0665  3021               	movlw	33
  3601  0666  3196  26B2  3186   	fcall	_nrf24l01Send
  3602                           
  3603                           ;nrf24l01.c: 424: n_FEATURE_t feature;;nrf24l01.c: 425: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3604  0669  0020               	movlb	0	; select bank0
  3605  066A  01A0               	clrf	nrf24l01Send@data
  3606  066B  301D               	movlw	29
  3607  066C  3196  26B2  3186   	fcall	_nrf24l01Send
  3608  066F  0020               	movlb	0	; select bank0
  3609  0670  00A7               	movwf	??_nrf24l01InitRegisters
  3610  0671  0827               	movf	??_nrf24l01InitRegisters,w
  3611  0672  00AB               	movwf	nrf24l01InitRegisters@feature
  3612                           
  3613                           ;nrf24l01.c: 426: feature.EN_DPL = 1;
  3614  0673  152B               	bsf	nrf24l01InitRegisters@feature,2
  3615                           
  3616                           ;nrf24l01.c: 427: feature.EN_DYN_ACK = 1;
  3617  0674  142B               	bsf	nrf24l01InitRegisters@feature,0
  3618                           
  3619                           ;nrf24l01.c: 428: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3620  0675  082B               	movf	nrf24l01InitRegisters@feature,w
  3621  0676  00A7               	movwf	??_nrf24l01InitRegisters
  3622  0677  0827               	movf	??_nrf24l01InitRegisters,w
  3623  0678  00A0               	movwf	nrf24l01Send@data
  3624  0679  303D               	movlw	61
  3625  067A  3196  26B2  3186   	fcall	_nrf24l01Send
  3626                           
  3627                           ;nrf24l01.c: 430: n_DYNPD_t DynPD;;nrf24l01.c: 431: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3628  067D  0020               	movlb	0	; select bank0
  3629  067E  01A0               	clrf	nrf24l01Send@data
  3630  067F  301C               	movlw	28
  3631  0680  3196  26B2  3186   	fcall	_nrf24l01Send
  3632  0683  0020               	movlb	0	; select bank0
  3633  0684  00A7               	movwf	??_nrf24l01InitRegisters
  3634  0685  0827               	movf	??_nrf24l01InitRegisters,w
  3635  0686  00AE               	movwf	nrf24l01InitRegisters@DynPD
  3636                           
  3637                           ;nrf24l01.c: 432: DynPD.DPL_P0 = 1;
  3638  0687  142E               	bsf	nrf24l01InitRegisters@DynPD,0
  3639                           
  3640                           ;nrf24l01.c: 433: DynPD.DPL_P1 = 1;
  3641  0688  14AE               	bsf	nrf24l01InitRegisters@DynPD,1
  3642                           
  3643                           ;nrf24l01.c: 434: DynPD.DPL_P2 = 1;
  3644  0689  152E               	bsf	nrf24l01InitRegisters@DynPD,2
  3645                           
  3646                           ;nrf24l01.c: 435: DynPD.DPL_P3 = 1;
  3647  068A  15AE               	bsf	nrf24l01InitRegisters@DynPD,3
  3648                           
  3649                           ;nrf24l01.c: 436: DynPD.DPL_P4 = 1;
  3650  068B  162E               	bsf	nrf24l01InitRegisters@DynPD,4
  3651                           
  3652                           ;nrf24l01.c: 437: DynPD.DPL_P5 = 1;
  3653  068C  16AE               	bsf	nrf24l01InitRegisters@DynPD,5
  3654                           
  3655                           ;nrf24l01.c: 438: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3656  068D  082E               	movf	nrf24l01InitRegisters@DynPD,w
  3657  068E  00A7               	movwf	??_nrf24l01InitRegisters
  3658  068F  0827               	movf	??_nrf24l01InitRegisters,w
  3659  0690  00A0               	movwf	nrf24l01Send@data
  3660  0691  303C               	movlw	60
  3661  0692  3196  26B2  3186   	fcall	_nrf24l01Send
  3662                           
  3663                           ;nrf24l01.c: 441: unsigned int i;;nrf24l01.c: 442: for (i = 0; i < 6; i++){
  3664  0695  0020               	movlb	0	; select bank0
  3665  0696  01AF               	clrf	nrf24l01InitRegisters@i
  3666  0697  01B0               	clrf	nrf24l01InitRegisters@i+1
  3667  0698  3000               	movlw	0
  3668  0699  0230               	subwf	nrf24l01InitRegisters@i+1,w
  3669  069A  3006               	movlw	6
  3670  069B  1903               	skipnz
  3671  069C  022F               	subwf	nrf24l01InitRegisters@i,w
  3672  069D  1803               	btfsc	3,0
  3673  069E  2EF8               	goto	l3175
  3674  069F                     l3161:	
  3675                           
  3676                           ;nrf24l01.c: 444: nrf24l01SPIStart();
  3677  069F  3195  255E  3186   	fcall	_nrf24l01SPIStart
  3678                           
  3679                           ;nrf24l01.c: 445: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  3680  06A2  0020               	movlb	0	; select bank0
  3681  06A3  082F               	movf	nrf24l01InitRegisters@i,w
  3682  06A4  3E0A               	addlw	10
  3683  06A5  3820               	iorlw	32
  3684  06A6  3195  256F  3186   	fcall	_nrf24l01SPISend
  3685                           
  3686                           ;nrf24l01.c: 447: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  3687  06A9  304F               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3688  06AA  0084               	movwf	4
  3689  06AB  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3690  06AC  0085               	movwf	5
  3691  06AD  0800               	movf	0,w	;code access
  3692  06AE  0020               	movlb	0	; select bank0
  3693  06AF  00A7               	movwf	??_nrf24l01InitRegisters
  3694  06B0  082F               	movf	nrf24l01InitRegisters@i,w
  3695  06B1  00A8               	movwf	??_nrf24l01InitRegisters+1
  3696  06B2  0828               	movf	??_nrf24l01InitRegisters+1,w
  3697  06B3  00A0               	movwf	___bmul@multiplicand
  3698  06B4  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3699  06B5  0084               	movwf	4
  3700  06B6  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3701  06B7  0085               	movwf	5
  3702  06B8  0800               	movf	0,w	;code access
  3703  06B9  3188  2001  3186   	fcall	___bmul
  3704  06BC  0020               	movlb	0	; select bank0
  3705  06BD  0727               	addwf	??_nrf24l01InitRegisters,w
  3706  06BE  3195  256F  3186   	fcall	_nrf24l01SPISend
  3707                           
  3708                           ;nrf24l01.c: 449: if (i < 2){
  3709  06C1  3000               	movlw	0
  3710  06C2  0020               	movlb	0	; select bank0
  3711  06C3  0230               	subwf	nrf24l01InitRegisters@i+1,w
  3712  06C4  3002               	movlw	2
  3713  06C5  1903               	skipnz
  3714  06C6  022F               	subwf	nrf24l01InitRegisters@i,w
  3715  06C7  1803               	skipnc
  3716  06C8  2EE9               	goto	l3169
  3717                           
  3718                           ;nrf24l01.c: 450: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3719  06C9  304E               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3720  06CA  0084               	movwf	4
  3721  06CB  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3722  06CC  0085               	movwf	5
  3723  06CD  0800               	movf	0,w	;code access
  3724  06CE  3195  256F  3186   	fcall	_nrf24l01SPISend
  3725                           
  3726                           ;nrf24l01.c: 451: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3727  06D1  304D               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3728  06D2  0084               	movwf	4
  3729  06D3  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3730  06D4  0085               	movwf	5
  3731  06D5  0800               	movf	0,w	;code access
  3732  06D6  3195  256F  3186   	fcall	_nrf24l01SPISend
  3733                           
  3734                           ;nrf24l01.c: 452: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3735  06D9  304C               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3736  06DA  0084               	movwf	4
  3737  06DB  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3738  06DC  0085               	movwf	5
  3739  06DD  0800               	movf	0,w	;code access
  3740  06DE  3195  256F  3186   	fcall	_nrf24l01SPISend
  3741                           
  3742                           ;nrf24l01.c: 453: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3743  06E1  304B               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3744  06E2  0084               	movwf	4
  3745  06E3  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3746  06E4  0085               	movwf	5
  3747  06E5  0800               	movf	0,w	;code access
  3748  06E6  3195  256F  3186   	fcall	_nrf24l01SPISend
  3749  06E9                     l3169:	
  3750                           
  3751                           ;nrf24l01.c: 454: };nrf24l01.c: 456: nrf24l01SPIEnd();
  3752  06E9  3195  254F  3186   	fcall	_nrf24l01SPIEnd
  3753  06EC  3001               	movlw	1
  3754  06ED  0020               	movlb	0	; select bank0
  3755  06EE  07AF               	addwf	nrf24l01InitRegisters@i,f
  3756  06EF  3000               	movlw	0
  3757  06F0  3DB0               	addwfc	nrf24l01InitRegisters@i+1,f
  3758  06F1  3000               	movlw	0
  3759  06F2  0230               	subwf	nrf24l01InitRegisters@i+1,w
  3760  06F3  3006               	movlw	6
  3761  06F4  1903               	skipnz
  3762  06F5  022F               	subwf	nrf24l01InitRegisters@i,w
  3763  06F6  1C03               	skipc
  3764  06F7  2E9F               	goto	l3161
  3765  06F8                     l3175:	
  3766                           
  3767                           ;nrf24l01.c: 457: };nrf24l01.c: 459: nrf24l01SetTXPipe(0);
  3768  06F8  3000               	movlw	0
  3769  06F9  3189  2166  3186   	fcall	_nrf24l01SetTXPipe
  3770                           
  3771                           ;nrf24l01.c: 463: status.statusRegister.byte = 0x00;
  3772  06FC  0021               	movlb	1	; select bank1
  3773  06FD  01E8               	clrf	(_status^(0+128)+1)	;volatile
  3774                           
  3775                           ;nrf24l01.c: 464: status.statusRegister.RX_DR = 1;
  3776  06FE  1768               	bsf	(_status^(0+128)+1),6	;volatile
  3777                           
  3778                           ;nrf24l01.c: 465: status.statusRegister.TX_DS = 1;
  3779  06FF  16E8               	bsf	(_status^(0+128)+1),5	;volatile
  3780                           
  3781                           ;nrf24l01.c: 466: status.statusRegister.MAX_RT = 1;
  3782  0700  1668               	bsf	(_status^(0+128)+1),4	;volatile
  3783                           
  3784                           ;nrf24l01.c: 467: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.statusReg
      +                          ister.byte);
  3785  0701  0868               	movf	(_status^(0+128)+1),w	;volatile
  3786  0702  0020               	movlb	0	; select bank0
  3787  0703  00A7               	movwf	??_nrf24l01InitRegisters
  3788  0704  0827               	movf	??_nrf24l01InitRegisters,w
  3789  0705  00A0               	movwf	nrf24l01Send@data
  3790  0706  3027               	movlw	39
  3791  0707  3196  26B2  3186   	fcall	_nrf24l01Send
  3792                           
  3793                           ;nrf24l01.c: 469: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  3794  070A  0020               	movlb	0	; select bank0
  3795  070B  01A0               	clrf	nrf24l01Send@data
  3796  070C  3007               	movlw	7
  3797  070D  3196  26B2  3186   	fcall	_nrf24l01Send
  3798  0710  0020               	movlb	0	; select bank0
  3799  0711  00A7               	movwf	??_nrf24l01InitRegisters
  3800  0712  0827               	movf	??_nrf24l01InitRegisters,w
  3801  0713  0021               	movlb	1	; select bank1
  3802  0714  00E8               	movwf	(_status^(0+128)+1)	;volatile
  3803                           
  3804                           ;nrf24l01.c: 472: nrf24l01Send((unsigned) 0b11100001, 0);
  3805  0715  0020               	movlb	0	; select bank0
  3806  0716  01A0               	clrf	nrf24l01Send@data
  3807  0717  30E1               	movlw	225
  3808  0718  3196  26B2  3186   	fcall	_nrf24l01Send
  3809                           
  3810                           ;nrf24l01.c: 473: nrf24l01Send((unsigned) 0b11100010, 0);
  3811  071B  0020               	movlb	0	; select bank0
  3812  071C  01A0               	clrf	nrf24l01Send@data
  3813  071D  30E2               	movlw	226
  3814  071E  3196  26B2  3186   	fcall	_nrf24l01Send
  3815                           
  3816                           ;nrf24l01.c: 476: status.configRegister.PRIM_RX = 0;
  3817  0721  0021               	movlb	1	; select bank1
  3818  0722  1069               	bcf	(_status^(0+128)+2),0	;volatile
  3819                           
  3820                           ;nrf24l01.c: 477: status.configRegister.EN_CRC = 1;
  3821  0723  15E9               	bsf	(_status^(0+128)+2),3	;volatile
  3822                           
  3823                           ;nrf24l01.c: 478: status.configRegister.CRCO = 1;
  3824  0724  1569               	bsf	(_status^(0+128)+2),2	;volatile
  3825                           
  3826                           ;nrf24l01.c: 479: status.configRegister.PWR_UP = 1;
  3827  0725  14E9               	bsf	(_status^(0+128)+2),1	;volatile
  3828                           
  3829                           ;nrf24l01.c: 480: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3830  0726  0869               	movf	(_status^(0+128)+2),w	;volatile
  3831  0727  0020               	movlb	0	; select bank0
  3832  0728  00A7               	movwf	??_nrf24l01InitRegisters
  3833  0729  0827               	movf	??_nrf24l01InitRegisters,w
  3834  072A  00A0               	movwf	nrf24l01Send@data
  3835  072B  3020               	movlw	32
  3836  072C  3196  26B2         	fcall	_nrf24l01Send
  3837  072E  0008               	return
  3838  072F                     __end_of_nrf24l01InitRegisters:	
  3839                           
  3840                           	psect	text4
  3841  0966                     __ptext4:	
  3842 ;; *************** function _nrf24l01SetTXPipe *****************
  3843 ;; Defined at:
  3844 ;;		line 183 in file "nrf24l01.c"
  3845 ;; Parameters:    Size  Location     Type
  3846 ;;  pipe            1    wreg     unsigned char 
  3847 ;; Auto vars:     Size  Location     Type
  3848 ;;  pipe            1    6[BANK0 ] unsigned char 
  3849 ;; Return value:  Size  Location     Type
  3850 ;;                  1    wreg      void 
  3851 ;; Registers used:
  3852 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3853 ;; Tracked objects:
  3854 ;;		On entry : 0/0
  3855 ;;		On exit  : 0/0
  3856 ;;		Unchanged: 0/0
  3857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3859 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3860 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3861 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3862 ;;Total ram usage:        3 bytes
  3863 ;; Hardware stack levels used:    1
  3864 ;; Hardware stack levels required when called:    9
  3865 ;; This function calls:
  3866 ;;		___bmul
  3867 ;;		_nrf24l01SPIEnd
  3868 ;;		_nrf24l01SPISend
  3869 ;;		_nrf24l01SPIStart
  3870 ;; This function is called by:
  3871 ;;		_main
  3872 ;;		_nrf24l01InitRegisters
  3873 ;; This function uses a non-reentrant model
  3874 ;;
  3875                           
  3876                           
  3877                           ;psect for function _nrf24l01SetTXPipe
  3878  0966                     _nrf24l01SetTXPipe:	
  3879                           
  3880                           ;incstack = 0
  3881                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3882                           ;nrf24l01SetTXPipe@pipe stored from wreg
  3883  0966  0020               	movlb	0	; select bank0
  3884  0967  00A6               	movwf	nrf24l01SetTXPipe@pipe
  3885                           
  3886                           ;nrf24l01.c: 186: nrf24l01SPIStart();
  3887  0968  3195  255E  3189   	fcall	_nrf24l01SPIStart
  3888                           
  3889                           ;nrf24l01.c: 187: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  3890  096B  3030               	movlw	48
  3891  096C  3195  256F  3189   	fcall	_nrf24l01SPISend
  3892                           
  3893                           ;nrf24l01.c: 188: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  3894  096F  304F               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3895  0970  0084               	movwf	4
  3896  0971  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3897  0972  0085               	movwf	5
  3898  0973  0800               	movf	0,w	;code access
  3899  0974  0020               	movlb	0	; select bank0
  3900  0975  00A4               	movwf	??_nrf24l01SetTXPipe
  3901  0976  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3902  0977  0084               	movwf	4
  3903  0978  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3904  0979  0085               	movwf	5
  3905  097A  0800               	movf	0,w	;code access
  3906  097B  00A5               	movwf	??_nrf24l01SetTXPipe+1
  3907  097C  0825               	movf	??_nrf24l01SetTXPipe+1,w
  3908  097D  00A0               	movwf	___bmul@multiplicand
  3909  097E  0826               	movf	nrf24l01SetTXPipe@pipe,w
  3910  097F  3188  2001  3189   	fcall	___bmul
  3911  0982  0020               	movlb	0	; select bank0
  3912  0983  0724               	addwf	??_nrf24l01SetTXPipe,w
  3913  0984  3195  256F  3189   	fcall	_nrf24l01SPISend
  3914                           
  3915                           ;nrf24l01.c: 189: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3916  0987  304E               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3917  0988  0084               	movwf	4
  3918  0989  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3919  098A  0085               	movwf	5
  3920  098B  0800               	movf	0,w	;code access
  3921  098C  3195  256F  3189   	fcall	_nrf24l01SPISend
  3922                           
  3923                           ;nrf24l01.c: 190: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3924  098F  304D               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3925  0990  0084               	movwf	4
  3926  0991  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3927  0992  0085               	movwf	5
  3928  0993  0800               	movf	0,w	;code access
  3929  0994  3195  256F  3189   	fcall	_nrf24l01SPISend
  3930                           
  3931                           ;nrf24l01.c: 191: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3932  0997  304C               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3933  0998  0084               	movwf	4
  3934  0999  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3935  099A  0085               	movwf	5
  3936  099B  0800               	movf	0,w	;code access
  3937  099C  3195  256F  3189   	fcall	_nrf24l01SPISend
  3938                           
  3939                           ;nrf24l01.c: 192: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3940  099F  304B               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3941  09A0  0084               	movwf	4
  3942  09A1  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3943  09A2  0085               	movwf	5
  3944  09A3  0800               	movf	0,w	;code access
  3945  09A4  3195  256F  3189   	fcall	_nrf24l01SPISend
  3946                           
  3947                           ;nrf24l01.c: 193: nrf24l01SPIEnd();
  3948  09A7  3195  254F         	fcall	_nrf24l01SPIEnd
  3949  09A9  0008               	return
  3950  09AA                     __end_of_nrf24l01SetTXPipe:	
  3951                           
  3952                           	psect	text5
  3953  0801                     __ptext5:	
  3954 ;; *************** function ___bmul *****************
  3955 ;; Defined at:
  3956 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  3957 ;; Parameters:    Size  Location     Type
  3958 ;;  multiplier      1    wreg     unsigned char 
  3959 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3960 ;; Auto vars:     Size  Location     Type
  3961 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3962 ;;  product         1    2[BANK0 ] unsigned char 
  3963 ;; Return value:  Size  Location     Type
  3964 ;;                  1    wreg      unsigned char 
  3965 ;; Registers used:
  3966 ;;		wreg, status,2, status,0
  3967 ;; Tracked objects:
  3968 ;;		On entry : 0/0
  3969 ;;		On exit  : 0/0
  3970 ;;		Unchanged: 0/0
  3971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3972 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3973 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3974 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3975 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3976 ;;Total ram usage:        4 bytes
  3977 ;; Hardware stack levels used:    1
  3978 ;; Hardware stack levels required when called:    7
  3979 ;; This function calls:
  3980 ;;		Nothing
  3981 ;; This function is called by:
  3982 ;;		_nrf24l01SetTXPipe
  3983 ;;		_nrf24l01InitRegisters
  3984 ;; This function uses a non-reentrant model
  3985 ;;
  3986                           
  3987                           
  3988                           ;psect for function ___bmul
  3989  0801                     ___bmul:	
  3990                           
  3991                           ;incstack = 0
  3992                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3993                           ;___bmul@multiplier stored from wreg
  3994  0801  0020               	movlb	0	; select bank0
  3995  0802  00A3               	movwf	___bmul@multiplier
  3996  0803  01A2               	clrf	___bmul@product
  3997  0804                     l2683:	
  3998  0804  1C23               	btfss	___bmul@multiplier,0
  3999  0805  280A               	goto	l2687
  4000  0806  0820               	movf	___bmul@multiplicand,w
  4001  0807  00A1               	movwf	??___bmul
  4002  0808  0821               	movf	??___bmul,w
  4003  0809  07A2               	addwf	___bmul@product,f
  4004  080A                     l2687:	
  4005  080A  1003               	clrc
  4006  080B  0DA0               	rlf	___bmul@multiplicand,f
  4007  080C  1003               	clrc
  4008  080D  0CA3               	rrf	___bmul@multiplier,f
  4009  080E  0823               	movf	___bmul@multiplier,w
  4010  080F  1D03               	btfss	3,2
  4011  0810  2804               	goto	l2683
  4012  0811  0822               	movf	___bmul@product,w
  4013  0812  0008               	return
  4014  0813                     __end_of___bmul:	
  4015                           
  4016                           	psect	text6
  4017  16D2                     __ptext6:	
  4018 ;; *************** function _nrf24l01SetRXPipe *****************
  4019 ;; Defined at:
  4020 ;;		line 196 in file "nrf24l01.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;  pipe            1    wreg     unsigned char 
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;  pipe            1    5[BANK0 ] unsigned char 
  4025 ;;  enRXAddr        1    6[BANK0 ] struct .
  4026 ;; Return value:  Size  Location     Type
  4027 ;;                  1    wreg      void 
  4028 ;; Registers used:
  4029 ;;		wreg, status,2, status,0, pclath, cstack
  4030 ;; Tracked objects:
  4031 ;;		On entry : 0/0
  4032 ;;		On exit  : 0/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4036 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4037 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4038 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4039 ;;Total ram usage:        4 bytes
  4040 ;; Hardware stack levels used:    1
  4041 ;; Hardware stack levels required when called:   10
  4042 ;; This function calls:
  4043 ;;		_nrf24l01Send
  4044 ;; This function is called by:
  4045 ;;		_nrf24l01InitRegisters
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           
  4050                           ;psect for function _nrf24l01SetRXPipe
  4051  16D2                     _nrf24l01SetRXPipe:	
  4052                           
  4053                           ;incstack = 0
  4054                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  4055                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4056  16D2  0020               	movlb	0	; select bank0
  4057  16D3  00A5               	movwf	nrf24l01SetRXPipe@pipe
  4058                           
  4059                           ;nrf24l01.c: 198: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 200: if (pipe > 5){
  4060  16D4  3006               	movlw	6
  4061  16D5  0225               	subwf	nrf24l01SetRXPipe@pipe,w
  4062  16D6  1C03               	skipc
  4063  16D7  2EDF               	goto	l263
  4064                           
  4065                           ;nrf24l01.c: 201: enRXAddr.ERX_P0 = 1;
  4066  16D8  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4067                           
  4068                           ;nrf24l01.c: 202: enRXAddr.ERX_P1 = 1;
  4069  16D9  14A6               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4070                           
  4071                           ;nrf24l01.c: 203: enRXAddr.ERX_P2 = 1;
  4072  16DA  1526               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4073                           
  4074                           ;nrf24l01.c: 204: enRXAddr.ERX_P3 = 1;
  4075  16DB  15A6               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4076                           
  4077                           ;nrf24l01.c: 205: enRXAddr.ERX_P4 = 1;
  4078  16DC  1626               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4079                           
  4080                           ;nrf24l01.c: 206: enRXAddr.ERX_P5 = 1;
  4081  16DD  16A6               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4082                           
  4083                           ;nrf24l01.c: 207: }
  4084  16DE  2EEB               	goto	l2921
  4085  16DF                     l263:	
  4086                           
  4087                           ;nrf24l01.c: 209: else{;nrf24l01.c: 210: enRXAddr.ERX_P0 = 1;
  4088  16DF  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4089                           
  4090                           ;nrf24l01.c: 211: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4091  16E0  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4092  16E1  00A3               	movwf	??_nrf24l01SetRXPipe
  4093  16E2  0A25               	incf	nrf24l01SetRXPipe@pipe,w
  4094  16E3  2EE5               	goto	u3134
  4095  16E4                     u3135:	
  4096  16E4  35A3               	lslf	??_nrf24l01SetRXPipe,f
  4097  16E5                     u3134:	
  4098  16E5  0B89               	decfsz	9,f
  4099  16E6  2EE4               	goto	u3135
  4100  16E7  0823               	movf	??_nrf24l01SetRXPipe,w
  4101  16E8  00A4               	movwf	??_nrf24l01SetRXPipe+1
  4102  16E9  0824               	movf	??_nrf24l01SetRXPipe+1,w
  4103  16EA  00A6               	movwf	nrf24l01SetRXPipe@enRXAddr
  4104  16EB                     l2921:	
  4105                           
  4106                           ;nrf24l01.c: 212: };nrf24l01.c: 214: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4107  16EB  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4108  16EC  00A3               	movwf	??_nrf24l01SetRXPipe
  4109  16ED  0823               	movf	??_nrf24l01SetRXPipe,w
  4110  16EE  00A0               	movwf	nrf24l01Send@data
  4111  16EF  3022               	movlw	34
  4112  16F0  3196  26B2         	fcall	_nrf24l01Send
  4113  16F2  0008               	return
  4114  16F3                     __end_of_nrf24l01SetRXPipe:	
  4115                           
  4116                           	psect	text7
  4117  086C                     __ptext7:	
  4118 ;; *************** function _nrf24l01GetPipe *****************
  4119 ;; Defined at:
  4120 ;;		line 166 in file "main.c"
  4121 ;; Parameters:    Size  Location     Type
  4122 ;;  name            1    wreg     PTR unsigned char 
  4123 ;;		 -> romDataMap(28), 
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4126 ;;		 -> romDataMap(28), 
  4127 ;;  i               1   10[BANK0 ] unsigned char 
  4128 ;;  pipe            1    8[BANK0 ] unsigned char 
  4129 ;; Return value:  Size  Location     Type
  4130 ;;                  1    wreg      unsigned char 
  4131 ;; Registers used:
  4132 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4133 ;; Tracked objects:
  4134 ;;		On entry : 0/0
  4135 ;;		On exit  : 0/0
  4136 ;;		Unchanged: 0/0
  4137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4139 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4140 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4141 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4142 ;;Total ram usage:        5 bytes
  4143 ;; Hardware stack levels used:    1
  4144 ;; Hardware stack levels required when called:    8
  4145 ;; This function calls:
  4146 ;;		___lwmod
  4147 ;;		_strlen
  4148 ;; This function is called by:
  4149 ;;		_main
  4150 ;; This function uses a non-reentrant model
  4151 ;;
  4152                           
  4153                           
  4154                           ;psect for function _nrf24l01GetPipe
  4155  086C                     _nrf24l01GetPipe:	
  4156                           
  4157                           ;incstack = 0
  4158                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4159                           ;nrf24l01GetPipe@name stored from wreg
  4160  086C  0020               	movlb	0	; select bank0
  4161  086D  00A9               	movwf	nrf24l01GetPipe@name
  4162                           
  4163                           ;main.c: 167: unsigned char pipe = 0;
  4164  086E  01A8               	clrf	nrf24l01GetPipe@pipe
  4165                           
  4166                           ;main.c: 168: unsigned char i = 0;
  4167  086F  01AA               	clrf	nrf24l01GetPipe@i
  4168                           
  4169                           ;main.c: 171: for (i = 0; i < strlen(name); i++){
  4170  0870  01AA               	clrf	nrf24l01GetPipe@i
  4171  0871                     l3769:	
  4172  0871  0829               	movf	nrf24l01GetPipe@name,w
  4173  0872  00A0               	movwf	strlen@s
  4174  0873  3002               	movlw	2
  4175  0874  00A1               	movwf	strlen@s+1
  4176  0875  3196  2693  3188   	fcall	_strlen
  4177  0878  0020               	movlb	0	; select bank0
  4178  0879  082A               	movf	nrf24l01GetPipe@i,w
  4179  087A  00A6               	movwf	??_nrf24l01GetPipe
  4180  087B  01A7               	clrf	??_nrf24l01GetPipe+1
  4181  087C  0821               	movf	?_strlen+1,w
  4182  087D  0227               	subwf	??_nrf24l01GetPipe+1,w
  4183  087E  1D03               	skipz
  4184  087F  2882               	goto	u3995
  4185  0880  0820               	movf	?_strlen,w
  4186  0881  0226               	subwf	??_nrf24l01GetPipe,w
  4187  0882                     u3995:	
  4188  0882  1803               	btfsc	3,0
  4189  0883  2894               	goto	l3771
  4190                           
  4191                           ;main.c: 172: pipe+= name[i];
  4192  0884  082A               	movf	nrf24l01GetPipe@i,w
  4193  0885  0729               	addwf	nrf24l01GetPipe@name,w
  4194  0886  00A6               	movwf	??_nrf24l01GetPipe
  4195  0887  0826               	movf	??_nrf24l01GetPipe,w
  4196  0888  0086               	movwf	6
  4197  0889  3002               	movlw	2	; select bank4/5
  4198  088A  0087               	movwf	7
  4199  088B  0801               	movf	1,w
  4200  088C  00A7               	movwf	??_nrf24l01GetPipe+1
  4201  088D  0827               	movf	??_nrf24l01GetPipe+1,w
  4202  088E  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4203  088F  3001               	movlw	1
  4204  0890  00A6               	movwf	??_nrf24l01GetPipe
  4205  0891  0826               	movf	??_nrf24l01GetPipe,w
  4206  0892  07AA               	addwf	nrf24l01GetPipe@i,f
  4207  0893  2871               	goto	l3769
  4208  0894                     l3771:	
  4209                           
  4210                           ;main.c: 173: };main.c: 175: return (unsigned) pipe % 6;
  4211  0894  3006               	movlw	6
  4212  0895  00A0               	movwf	___lwmod@divisor
  4213  0896  3000               	movlw	0
  4214  0897  00A1               	movwf	___lwmod@divisor+1
  4215  0898  0828               	movf	nrf24l01GetPipe@pipe,w
  4216  0899  00A6               	movwf	??_nrf24l01GetPipe
  4217  089A  01A7               	clrf	??_nrf24l01GetPipe+1
  4218  089B  0826               	movf	??_nrf24l01GetPipe,w
  4219  089C  00A2               	movwf	___lwmod@dividend
  4220  089D  0827               	movf	??_nrf24l01GetPipe+1,w
  4221  089E  00A3               	movwf	___lwmod@dividend+1
  4222  089F  3188  203F         	fcall	___lwmod
  4223  08A1  0020               	movlb	0	; select bank0
  4224  08A2  0820               	movf	?___lwmod,w
  4225  08A3  0008               	return
  4226  08A4                     __end_of_nrf24l01GetPipe:	
  4227                           
  4228                           	psect	text8
  4229  083F                     __ptext8:	
  4230 ;; *************** function ___lwmod *****************
  4231 ;; Defined at:
  4232 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4233 ;; Parameters:    Size  Location     Type
  4234 ;;  divisor         2    0[BANK0 ] unsigned int 
  4235 ;;  dividend        2    2[BANK0 ] unsigned int 
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;  counter         1    5[BANK0 ] unsigned char 
  4238 ;; Return value:  Size  Location     Type
  4239 ;;                  2    0[BANK0 ] unsigned int 
  4240 ;; Registers used:
  4241 ;;		wreg, status,2, status,0
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4247 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4248 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4249 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4250 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4251 ;;Total ram usage:        6 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    7
  4254 ;; This function calls:
  4255 ;;		Nothing
  4256 ;; This function is called by:
  4257 ;;		_nrf24l01GetPipe
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           
  4262                           ;psect for function ___lwmod
  4263  083F                     ___lwmod:	
  4264                           
  4265                           ;incstack = 0
  4266                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4267  083F  0020               	movlb	0	; select bank0
  4268  0840  0820               	movf	___lwmod@divisor,w
  4269  0841  0421               	iorwf	___lwmod@divisor+1,w
  4270  0842  1903               	btfsc	3,2
  4271  0843  2867               	goto	l3225
  4272  0844  01A5               	clrf	___lwmod@counter
  4273  0845  0AA5               	incf	___lwmod@counter,f
  4274  0846                     l3215:	
  4275  0846  1BA1               	btfsc	___lwmod@divisor+1,7
  4276  0847  2852               	goto	l3217
  4277  0848  3001               	movlw	1
  4278  0849                     u3365:	
  4279  0849  35A0               	lslf	___lwmod@divisor,f
  4280  084A  0DA1               	rlf	___lwmod@divisor+1,f
  4281  084B  0B89               	decfsz	9,f
  4282  084C  2849               	goto	u3365
  4283  084D  3001               	movlw	1
  4284  084E  00A4               	movwf	??___lwmod
  4285  084F  0824               	movf	??___lwmod,w
  4286  0850  07A5               	addwf	___lwmod@counter,f
  4287  0851  2846               	goto	l3215
  4288  0852                     l3217:	
  4289  0852  0821               	movf	___lwmod@divisor+1,w
  4290  0853  0223               	subwf	___lwmod@dividend+1,w
  4291  0854  1D03               	skipz
  4292  0855  2858               	goto	u3385
  4293  0856  0820               	movf	___lwmod@divisor,w
  4294  0857  0222               	subwf	___lwmod@dividend,w
  4295  0858                     u3385:	
  4296  0858  1C03               	skipc
  4297  0859  285E               	goto	l3221
  4298  085A  0820               	movf	___lwmod@divisor,w
  4299  085B  02A2               	subwf	___lwmod@dividend,f
  4300  085C  0821               	movf	___lwmod@divisor+1,w
  4301  085D  3BA3               	subwfb	___lwmod@dividend+1,f
  4302  085E                     l3221:	
  4303  085E  3001               	movlw	1
  4304  085F                     u3395:	
  4305  085F  36A1               	lsrf	___lwmod@divisor+1,f
  4306  0860  0CA0               	rrf	___lwmod@divisor,f
  4307  0861  0B89               	decfsz	9,f
  4308  0862  285F               	goto	u3395
  4309  0863  3001               	movlw	1
  4310  0864  02A5               	subwf	___lwmod@counter,f
  4311  0865  1D03               	btfss	3,2
  4312  0866  2852               	goto	l3217
  4313  0867                     l3225:	
  4314  0867  0823               	movf	___lwmod@dividend+1,w
  4315  0868  00A1               	movwf	?___lwmod+1
  4316  0869  0822               	movf	___lwmod@dividend,w
  4317  086A  00A0               	movwf	?___lwmod
  4318  086B  0008               	return
  4319  086C                     __end_of___lwmod:	
  4320                           
  4321                           	psect	text9
  4322  037A                     __ptext9:	
  4323 ;; *************** function _loop *****************
  4324 ;; Defined at:
  4325 ;;		line 124 in file "main.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;		None
  4328 ;; Auto vars:     Size  Location     Type
  4329 ;;  packet         33   16[BANK2 ] struct .
  4330 ;;  ta              3    3[BANK2 ] float 
  4331 ;;  vt              3    0[BANK2 ] float 
  4332 ;;  rfSetup         1   15[BANK2 ] struct .
  4333 ;; Return value:  Size  Location     Type
  4334 ;;                  1    wreg      void 
  4335 ;; Registers used:
  4336 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4337 ;; Tracked objects:
  4338 ;;		On entry : 0/0
  4339 ;;		On exit  : 0/0
  4340 ;;		Unchanged: 0/0
  4341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4343 ;;      Locals:         0       0       0      49       0       0       0       0       0       0       0       0       
      +0       0
  4344 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4345 ;;      Totals:         0       0       1      49       0       0       0       0       0       0       0       0       
      +0       0
  4346 ;;Total ram usage:       50 bytes
  4347 ;; Hardware stack levels used:    1
  4348 ;; Hardware stack levels required when called:   14
  4349 ;; This function calls:
  4350 ;;		___ftadd
  4351 ;;		___ftdiv
  4352 ;;		___ftmul
  4353 ;;		___ftneg
  4354 ;;		___lbtoft
  4355 ;;		___lltoft
  4356 ;;		_getADCValue
  4357 ;;		_nrf24l01Send
  4358 ;;		_sendMessage
  4359 ;; This function is called by:
  4360 ;;		_main
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           
  4365                           ;psect for function _loop
  4366  037A                     _loop:	
  4367                           
  4368                           ;main.c: 126: nrf24l01Packet_t packet;;main.c: 128: sendMessage(&packet, "DBG1", counter
      +                          );
  4369                           
  4370                           ;incstack = 0
  4371                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4372  037A  0022               	movlb	2	; select bank2
  4373  037B  0854               	movf	(_counter+3)^(0+256),w
  4374  037C  0020               	movlb	0	; select bank0
  4375  037D  00AB               	movwf	___lltoft@c+3
  4376  037E  0022               	movlb	2	; select bank2
  4377  037F  0853               	movf	(_counter+2)^(0+256),w
  4378  0380  0020               	movlb	0	; select bank0
  4379  0381  00AA               	movwf	___lltoft@c+2
  4380  0382  0022               	movlb	2	; select bank2
  4381  0383  0852               	movf	(_counter+1)^(0+256),w
  4382  0384  0020               	movlb	0	; select bank0
  4383  0385  00A9               	movwf	___lltoft@c+1
  4384  0386  0022               	movlb	2	; select bank2
  4385  0387  0851               	movf	_counter^(0+256),w
  4386  0388  0020               	movlb	0	; select bank0
  4387  0389  00A8               	movwf	___lltoft@c
  4388  038A  3197  27D6  3183   	fcall	___lltoft
  4389  038D  0020               	movlb	0	; select bank0
  4390  038E  0828               	movf	?___lltoft,w
  4391  038F  0022               	movlb	2	; select bank2
  4392  0390  00A6               	movwf	_loop$1958^(0+256)
  4393  0391  0020               	movlb	0	; select bank0
  4394  0392  0829               	movf	?___lltoft+1,w
  4395  0393  0022               	movlb	2	; select bank2
  4396  0394  00A7               	movwf	(_loop$1958+1)^(0+256)
  4397  0395  0020               	movlb	0	; select bank0
  4398  0396  082A               	movf	?___lltoft+2,w
  4399  0397  0022               	movlb	2	; select bank2
  4400  0398  00A8               	movwf	(_loop$1958+2)^(0+256)
  4401                           
  4402                           ;main.c: 126: nrf24l01Packet_t packet;;main.c: 128: sendMessage(&packet, "DBG1", counter
      +                          );
  4403  0399  3030               	movlw	low loop@packet
  4404  039A  0021               	movlb	1	; select bank1
  4405  039B  00B9               	movwf	sendMessage@packet^(0+128)
  4406  039C  3001               	movlw	high loop@packet
  4407  039D  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4408  039E  3050               	movlw	low (STR_3| (0+32768))
  4409  039F  00BB               	movwf	sendMessage@topic^(0+128)
  4410  03A0  3098               	movlw	high (STR_3| (0+32768))
  4411  03A1  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4412  03A2  0022               	movlb	2	; select bank2
  4413  03A3  0826               	movf	_loop$1958^(0+256),w
  4414  03A4  0021               	movlb	1	; select bank1
  4415  03A5  00BD               	movwf	sendMessage@value^(0+128)
  4416  03A6  0022               	movlb	2	; select bank2
  4417  03A7  0827               	movf	(_loop$1958+1)^(0+256),w
  4418  03A8  0021               	movlb	1	; select bank1
  4419  03A9  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4420  03AA  0022               	movlb	2	; select bank2
  4421  03AB  0828               	movf	(_loop$1958+2)^(0+256),w
  4422  03AC  0021               	movlb	1	; select bank1
  4423  03AD  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4424  03AE  318B  230D  3183   	fcall	_sendMessage
  4425                           
  4426                           ;main.c: 134: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4427  03B1  30CF               	movlw	207
  4428  03B2  0020               	movlb	0	; select bank0
  4429  03B3  00D7               	movwf	___ftmul@f1
  4430  03B4  3046               	movlw	70
  4431  03B5  00D8               	movwf	___ftmul@f1+1
  4432  03B6  3040               	movlw	64
  4433  03B7  00D9               	movwf	___ftmul@f1+2
  4434  03B8  3004               	movlw	4
  4435  03B9  318C  24C9  3183   	fcall	_getADCValue
  4436  03BC  0020               	movlb	0	; select bank0
  4437  03BD  084B               	movf	?_getADCValue,w
  4438  03BE  00DA               	movwf	___ftmul@f2
  4439  03BF  084C               	movf	?_getADCValue+1,w
  4440  03C0  00DB               	movwf	___ftmul@f2+1
  4441  03C1  084D               	movf	?_getADCValue+2,w
  4442  03C2  00DC               	movwf	___ftmul@f2+2
  4443  03C3  3187  272F  3183   	fcall	___ftmul
  4444  03C6  0020               	movlb	0	; select bank0
  4445  03C7  0857               	movf	?___ftmul,w
  4446  03C8  0022               	movlb	2	; select bank2
  4447  03C9  00A9               	movwf	_loop$1959^(0+256)
  4448  03CA  0020               	movlb	0	; select bank0
  4449  03CB  0858               	movf	?___ftmul+1,w
  4450  03CC  0022               	movlb	2	; select bank2
  4451  03CD  00AA               	movwf	(_loop$1959+1)^(0+256)
  4452  03CE  0020               	movlb	0	; select bank0
  4453  03CF  0859               	movf	?___ftmul+2,w
  4454  03D0  0022               	movlb	2	; select bank2
  4455  03D1  00AB               	movwf	(_loop$1959+2)^(0+256)
  4456                           
  4457                           ;main.c: 134: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4458  03D2  3030               	movlw	low loop@packet
  4459  03D3  0021               	movlb	1	; select bank1
  4460  03D4  00B9               	movwf	sendMessage@packet^(0+128)
  4461  03D5  3001               	movlw	high loop@packet
  4462  03D6  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4463  03D7  305A               	movlw	low (STR_4| (0+32768))
  4464  03D8  00BB               	movwf	sendMessage@topic^(0+128)
  4465  03D9  3098               	movlw	high (STR_4| (0+32768))
  4466  03DA  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4467  03DB  0022               	movlb	2	; select bank2
  4468  03DC  0829               	movf	_loop$1959^(0+256),w
  4469  03DD  0021               	movlb	1	; select bank1
  4470  03DE  00BD               	movwf	sendMessage@value^(0+128)
  4471  03DF  0022               	movlb	2	; select bank2
  4472  03E0  082A               	movf	(_loop$1959+1)^(0+256),w
  4473  03E1  0021               	movlb	1	; select bank1
  4474  03E2  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4475  03E3  0022               	movlb	2	; select bank2
  4476  03E4  082B               	movf	(_loop$1959+2)^(0+256),w
  4477  03E5  0021               	movlb	1	; select bank1
  4478  03E6  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4479  03E7  318B  230D  3183   	fcall	_sendMessage
  4480                           
  4481                           ;main.c: 139: sendMessage(&packet, "ANC3mV", getADCValue(0b010011));
  4482  03EA  3030               	movlw	low loop@packet
  4483  03EB  0021               	movlb	1	; select bank1
  4484  03EC  00B9               	movwf	sendMessage@packet^(0+128)
  4485  03ED  3001               	movlw	high loop@packet
  4486  03EE  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4487  03EF  303E               	movlw	low (STR_5| (0+32768))
  4488  03F0  00BB               	movwf	sendMessage@topic^(0+128)
  4489  03F1  3098               	movlw	high (STR_5| (0+32768))
  4490  03F2  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4491  03F3  3013               	movlw	19
  4492  03F4  318C  24C9  3183   	fcall	_getADCValue
  4493  03F7  0020               	movlb	0	; select bank0
  4494  03F8  084B               	movf	?_getADCValue,w
  4495  03F9  0021               	movlb	1	; select bank1
  4496  03FA  00BD               	movwf	sendMessage@value^(0+128)
  4497  03FB  0020               	movlb	0	; select bank0
  4498  03FC  084C               	movf	?_getADCValue+1,w
  4499  03FD  0021               	movlb	1	; select bank1
  4500  03FE  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4501  03FF  0020               	movlb	0	; select bank0
  4502  0400  084D               	movf	?_getADCValue+2,w
  4503  0401  0021               	movlb	1	; select bank1
  4504  0402  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4505  0403  318B  230D  3183   	fcall	_sendMessage
  4506                           
  4507                           ;main.c: 145: FVRCONbits.TSEN = 1;
  4508  0406  0022               	movlb	2	; select bank2
  4509  0407  1697               	bsf	23,5	;volatile
  4510                           
  4511                           ;main.c: 146: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4512  0408  303D               	movlw	61
  4513  0409  318C  24C9  3183   	fcall	_getADCValue
  4514  040C  0020               	movlb	0	; select bank0
  4515  040D  084B               	movf	?_getADCValue,w
  4516  040E  00D7               	movwf	___ftneg@f1
  4517  040F  084C               	movf	?_getADCValue+1,w
  4518  0410  00D8               	movwf	___ftneg@f1+1
  4519  0411  084D               	movf	?_getADCValue+2,w
  4520  0412  00D9               	movwf	___ftneg@f1+2
  4521  0413  3195  2566  3183   	fcall	___ftneg
  4522  0416  0020               	movlb	0	; select bank0
  4523  0417  0857               	movf	?___ftneg,w
  4524  0418  0022               	movlb	2	; select bank2
  4525  0419  00AC               	movwf	_loop$1960^(0+256)
  4526  041A  0020               	movlb	0	; select bank0
  4527  041B  0858               	movf	?___ftneg+1,w
  4528  041C  0022               	movlb	2	; select bank2
  4529  041D  00AD               	movwf	(_loop$1960+1)^(0+256)
  4530  041E  0020               	movlb	0	; select bank0
  4531  041F  0859               	movf	?___ftneg+2,w
  4532  0420  0022               	movlb	2	; select bank2
  4533  0421  00AE               	movwf	(_loop$1960+2)^(0+256)
  4534                           
  4535                           ;main.c: 146: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4536  0422  3000               	movlw	0
  4537  0423  0020               	movlb	0	; select bank0
  4538  0424  00BB               	movwf	___ftdiv@f2
  4539  0425  3000               	movlw	0
  4540  0426  00BC               	movwf	___ftdiv@f2+1
  4541  0427  3040               	movlw	64
  4542  0428  00BD               	movwf	___ftdiv@f2+2
  4543  0429  3012               	movlw	18
  4544  042A  00AE               	movwf	___ftadd@f1
  4545  042B  3003               	movlw	3
  4546  042C  00AF               	movwf	___ftadd@f1+1
  4547  042D  3040               	movlw	64
  4548  042E  00B0               	movwf	___ftadd@f1+2
  4549  042F  0022               	movlb	2	; select bank2
  4550  0430  082C               	movf	_loop$1960^(0+256),w
  4551  0431  0020               	movlb	0	; select bank0
  4552  0432  00B1               	movwf	___ftadd@f2
  4553  0433  0022               	movlb	2	; select bank2
  4554  0434  082D               	movf	(_loop$1960+1)^(0+256),w
  4555  0435  0020               	movlb	0	; select bank0
  4556  0436  00B2               	movwf	___ftadd@f2+1
  4557  0437  0022               	movlb	2	; select bank2
  4558  0438  082E               	movf	(_loop$1960+2)^(0+256),w
  4559  0439  0020               	movlb	0	; select bank0
  4560  043A  00B3               	movwf	___ftadd@f2+2
  4561  043B  318F  270A  3183   	fcall	___ftadd
  4562  043E  0020               	movlb	0	; select bank0
  4563  043F  082E               	movf	?___ftadd,w
  4564  0440  00BE               	movwf	___ftdiv@f1
  4565  0441  082F               	movf	?___ftadd+1,w
  4566  0442  00BF               	movwf	___ftdiv@f1+1
  4567  0443  0830               	movf	?___ftadd+2,w
  4568  0444  00C0               	movwf	___ftdiv@f1+2
  4569  0445  318D  256F  3183   	fcall	___ftdiv
  4570  0448  0020               	movlb	0	; select bank0
  4571  0449  083B               	movf	?___ftdiv,w
  4572  044A  0022               	movlb	2	; select bank2
  4573  044B  00A0               	movwf	loop@vt^(0+256)
  4574  044C  0020               	movlb	0	; select bank0
  4575  044D  083C               	movf	?___ftdiv+1,w
  4576  044E  0022               	movlb	2	; select bank2
  4577  044F  00A1               	movwf	(loop@vt+1)^(0+256)
  4578  0450  0020               	movlb	0	; select bank0
  4579  0451  083D               	movf	?___ftdiv+2,w
  4580  0452  0022               	movlb	2	; select bank2
  4581  0453  00A2               	movwf	(loop@vt+2)^(0+256)
  4582                           
  4583                           ;main.c: 147: FVRCONbits.TSEN = 0;
  4584  0454  1297               	bcf	23,5	;volatile
  4585                           
  4586                           ;main.c: 152: float ta = (vt / -0.00132) - (0.6063 / -0.00132) - 40;
  4587  0455  30A9               	movlw	169
  4588  0456  0020               	movlb	0	; select bank0
  4589  0457  00AE               	movwf	___ftadd@f1
  4590  0458  30D1               	movlw	209
  4591  0459  00AF               	movwf	___ftadd@f1+1
  4592  045A  3043               	movlw	67
  4593  045B  00B0               	movwf	___ftadd@f1+2
  4594  045C  3004               	movlw	4
  4595  045D  00BB               	movwf	___ftdiv@f2
  4596  045E  30AD               	movlw	173
  4597  045F  00BC               	movwf	___ftdiv@f2+1
  4598  0460  30BA               	movlw	186
  4599  0461  00BD               	movwf	___ftdiv@f2+2
  4600  0462  0022               	movlb	2	; select bank2
  4601  0463  0820               	movf	loop@vt^(0+256),w
  4602  0464  0020               	movlb	0	; select bank0
  4603  0465  00BE               	movwf	___ftdiv@f1
  4604  0466  0022               	movlb	2	; select bank2
  4605  0467  0821               	movf	(loop@vt+1)^(0+256),w
  4606  0468  0020               	movlb	0	; select bank0
  4607  0469  00BF               	movwf	___ftdiv@f1+1
  4608  046A  0022               	movlb	2	; select bank2
  4609  046B  0822               	movf	(loop@vt+2)^(0+256),w
  4610  046C  0020               	movlb	0	; select bank0
  4611  046D  00C0               	movwf	___ftdiv@f1+2
  4612  046E  318D  256F  3183   	fcall	___ftdiv
  4613  0471  0020               	movlb	0	; select bank0
  4614  0472  083B               	movf	?___ftdiv,w
  4615  0473  00B1               	movwf	___ftadd@f2
  4616  0474  083C               	movf	?___ftdiv+1,w
  4617  0475  00B2               	movwf	___ftadd@f2+1
  4618  0476  083D               	movf	?___ftdiv+2,w
  4619  0477  00B3               	movwf	___ftadd@f2+2
  4620  0478  318F  270A  3183   	fcall	___ftadd
  4621  047B  0020               	movlb	0	; select bank0
  4622  047C  082E               	movf	?___ftadd,w
  4623  047D  0022               	movlb	2	; select bank2
  4624  047E  00A3               	movwf	loop@ta^(0+256)
  4625  047F  0020               	movlb	0	; select bank0
  4626  0480  082F               	movf	?___ftadd+1,w
  4627  0481  0022               	movlb	2	; select bank2
  4628  0482  00A4               	movwf	(loop@ta+1)^(0+256)
  4629  0483  0020               	movlb	0	; select bank0
  4630  0484  0830               	movf	?___ftadd+2,w
  4631  0485  0022               	movlb	2	; select bank2
  4632  0486  00A5               	movwf	(loop@ta+2)^(0+256)
  4633                           
  4634                           ;main.c: 154: sendMessage(&packet, "TEMP", ta);
  4635  0487  3030               	movlw	low loop@packet
  4636  0488  0021               	movlb	1	; select bank1
  4637  0489  00B9               	movwf	sendMessage@packet^(0+128)
  4638  048A  3001               	movlw	high loop@packet
  4639  048B  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4640  048C  3055               	movlw	low (STR_6| (0+32768))
  4641  048D  00BB               	movwf	sendMessage@topic^(0+128)
  4642  048E  3098               	movlw	high (STR_6| (0+32768))
  4643  048F  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4644  0490  0022               	movlb	2	; select bank2
  4645  0491  0823               	movf	loop@ta^(0+256),w
  4646  0492  0021               	movlb	1	; select bank1
  4647  0493  00BD               	movwf	sendMessage@value^(0+128)
  4648  0494  0022               	movlb	2	; select bank2
  4649  0495  0824               	movf	(loop@ta+1)^(0+256),w
  4650  0496  0021               	movlb	1	; select bank1
  4651  0497  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4652  0498  0022               	movlb	2	; select bank2
  4653  0499  0825               	movf	(loop@ta+2)^(0+256),w
  4654  049A  0021               	movlb	1	; select bank1
  4655  049B  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4656  049C  318B  230D  3183   	fcall	_sendMessage
  4657                           
  4658                           ;main.c: 158: n_RF_SETUP_t rfSetup;;main.c: 159: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4659  049F  0020               	movlb	0	; select bank0
  4660  04A0  01A0               	clrf	nrf24l01Send@data
  4661  04A1  3006               	movlw	6
  4662  04A2  3196  26B2  3183   	fcall	_nrf24l01Send
  4663  04A5  0021               	movlb	1	; select bank1
  4664  04A6  00C3               	movwf	??_loop^(0+128)
  4665  04A7  0843               	movf	??_loop^(0+128),w
  4666  04A8  0022               	movlb	2	; select bank2
  4667  04A9  00AF               	movwf	loop@rfSetup^(0+256)
  4668                           
  4669                           ;main.c: 161: sendMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4670  04AA  3030               	movlw	low loop@packet
  4671  04AB  0021               	movlb	1	; select bank1
  4672  04AC  00B9               	movwf	sendMessage@packet^(0+128)
  4673  04AD  3001               	movlw	high loop@packet
  4674  04AE  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4675  04AF  3045               	movlw	low (STR_7| (0+32768))
  4676  04B0  00BB               	movwf	sendMessage@topic^(0+128)
  4677  04B1  3098               	movlw	high (STR_7| (0+32768))
  4678  04B2  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4679  04B3  0022               	movlb	2	; select bank2
  4680  04B4  0C2F               	rrf	loop@rfSetup^(0+256),w
  4681  04B5  3903               	andlw	3
  4682  04B6  3196  2603  3183   	fcall	___lbtoft
  4683  04B9  0020               	movlb	0	; select bank0
  4684  04BA  0828               	movf	?___lbtoft,w
  4685  04BB  0021               	movlb	1	; select bank1
  4686  04BC  00BD               	movwf	sendMessage@value^(0+128)
  4687  04BD  0020               	movlb	0	; select bank0
  4688  04BE  0829               	movf	?___lbtoft+1,w
  4689  04BF  0021               	movlb	1	; select bank1
  4690  04C0  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4691  04C1  0020               	movlb	0	; select bank0
  4692  04C2  082A               	movf	?___lbtoft+2,w
  4693  04C3  0021               	movlb	1	; select bank1
  4694  04C4  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4695  04C5  318B  230D         	fcall	_sendMessage
  4696  04C7  0008               	return
  4697  04C8                     __end_of_loop:	
  4698                           
  4699                           	psect	text10
  4700  0B0D                     __ptext10:	
  4701 ;; *************** function _sendMessage *****************
  4702 ;; Defined at:
  4703 ;;		line 104 in file "main.c"
  4704 ;; Parameters:    Size  Location     Type
  4705 ;;  packet          2   25[BANK1 ] PTR struct .
  4706 ;;		 -> main@packet(33), loop@packet(33), 
  4707 ;;  topic           2   27[BANK1 ] PTR const unsigned char 
  4708 ;;		 -> STR_9(5), STR_7(6), STR_6(5), STR_5(7), 
  4709 ;;		 -> STR_4(5), STR_3(5), 
  4710 ;;  value           3   29[BANK1 ] float 
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  status          2   33[BANK1 ] int 
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  1    wreg      void 
  4715 ;; Registers used:
  4716 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4717 ;; Tracked objects:
  4718 ;;		On entry : 0/0
  4719 ;;		On exit  : 0/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4722 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  4723 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4724 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4725 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  4726 ;;Total ram usage:       10 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; Hardware stack levels required when called:   13
  4729 ;; This function calls:
  4730 ;;		_ftoa
  4731 ;;		_memset
  4732 ;;		_nrf24l01SendPacket
  4733 ;;		_sleep
  4734 ;;		_strcat
  4735 ;;		_strcpy
  4736 ;; This function is called by:
  4737 ;;		_loop
  4738 ;;		_main
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           
  4743                           ;psect for function _sendMessage
  4744  0B0D                     _sendMessage:	
  4745                           
  4746                           ;main.c: 106: int status;;main.c: 108: memset(packet->Message, 0, sizeof(packet->Message
      +                          ));
  4747                           
  4748                           ;incstack = 0
  4749                           ; Regs used in _sendMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4750  0B0D  0021               	movlb	1	; select bank1
  4751  0B0E  0839               	movf	sendMessage@packet^(0+128),w
  4752  0B0F  3E01               	addlw	1
  4753  0B10  0020               	movlb	0	; select bank0
  4754  0B11  00A0               	movwf	memset@p1
  4755  0B12  3000               	movlw	0
  4756  0B13  0021               	movlb	1	; select bank1
  4757  0B14  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4758  0B15  0020               	movlb	0	; select bank0
  4759  0B16  00A1               	movwf	memset@p1+1
  4760  0B17  3000               	movlw	0
  4761  0B18  00A2               	movwf	memset@c
  4762  0B19  00A3               	movwf	memset@c+1
  4763  0B1A  3020               	movlw	32
  4764  0B1B  00A4               	movwf	memset@n
  4765  0B1C  3000               	movlw	0
  4766  0B1D  00A5               	movwf	memset@n+1
  4767  0B1E  3195  25CF  318B   	fcall	_memset
  4768                           
  4769                           ;main.c: 109: strcpy(packet->Message, romData->name);
  4770  0B21  0021               	movlb	1	; select bank1
  4771  0B22  0839               	movf	sendMessage@packet^(0+128),w
  4772  0B23  3E01               	addlw	1
  4773  0B24  0020               	movlb	0	; select bank0
  4774  0B25  00A0               	movwf	strcpy@to
  4775  0B26  3000               	movlw	0
  4776  0B27  0021               	movlb	1	; select bank1
  4777  0B28  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4778  0B29  0020               	movlb	0	; select bank0
  4779  0B2A  00A1               	movwf	strcpy@to+1
  4780  0B2B  0021               	movlb	1	; select bank1
  4781  0B2C  086B               	movf	_romData^(0+128),w
  4782  0B2D  3E01               	addlw	1
  4783  0B2E  0020               	movlb	0	; select bank0
  4784  0B2F  00A2               	movwf	strcpy@from
  4785  0B30  3002               	movlw	2
  4786  0B31  00A3               	movwf	strcpy@from+1
  4787  0B32  3196  261E  318B   	fcall	_strcpy
  4788                           
  4789                           ;main.c: 110: strcat(packet->Message, "/");
  4790  0B35  0021               	movlb	1	; select bank1
  4791  0B36  0839               	movf	sendMessage@packet^(0+128),w
  4792  0B37  3E01               	addlw	1
  4793  0B38  00B3               	movwf	strcat@to^(0+128)
  4794  0B39  3000               	movlw	0
  4795  0B3A  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4796  0B3B  00B4               	movwf	(strcat@to+1)^(0+128)
  4797  0B3C  3068               	movlw	low (STR_1| (0+32768))
  4798  0B3D  00B5               	movwf	strcat@from^(0+128)
  4799  0B3E  3098               	movlw	high (STR_1| (0+32768))
  4800  0B3F  00B6               	movwf	(strcat@from^(0+128)+1)
  4801  0B40  3197  275E  318B   	fcall	_strcat
  4802                           
  4803                           ;main.c: 111: strcat(packet->Message, topic);
  4804  0B43  0021               	movlb	1	; select bank1
  4805  0B44  0839               	movf	sendMessage@packet^(0+128),w
  4806  0B45  3E01               	addlw	1
  4807  0B46  00B3               	movwf	strcat@to^(0+128)
  4808  0B47  3000               	movlw	0
  4809  0B48  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4810  0B49  00B4               	movwf	(strcat@to+1)^(0+128)
  4811  0B4A  083C               	movf	(sendMessage@topic+1)^(0+128),w
  4812  0B4B  00B6               	movwf	(strcat@from+1)^(0+128)
  4813  0B4C  083B               	movf	sendMessage@topic^(0+128),w
  4814  0B4D  00B5               	movwf	strcat@from^(0+128)
  4815  0B4E  3197  275E  318B   	fcall	_strcat
  4816                           
  4817                           ;main.c: 112: strcat(packet->Message, "/");
  4818  0B51  0021               	movlb	1	; select bank1
  4819  0B52  0839               	movf	sendMessage@packet^(0+128),w
  4820  0B53  3E01               	addlw	1
  4821  0B54  00B3               	movwf	strcat@to^(0+128)
  4822  0B55  3000               	movlw	0
  4823  0B56  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4824  0B57  00B4               	movwf	(strcat@to+1)^(0+128)
  4825  0B58  3068               	movlw	low (STR_1| (0+32768))
  4826  0B59  00B5               	movwf	strcat@from^(0+128)
  4827  0B5A  3098               	movlw	high (STR_1| (0+32768))
  4828  0B5B  00B6               	movwf	(strcat@from^(0+128)+1)
  4829  0B5C  3197  275E  318B   	fcall	_strcat
  4830                           
  4831                           ;main.c: 113: strcat(packet->Message, ftoa(value, &status));
  4832  0B5F  0021               	movlb	1	; select bank1
  4833  0B60  0839               	movf	sendMessage@packet^(0+128),w
  4834  0B61  3E01               	addlw	1
  4835  0B62  00B3               	movwf	strcat@to^(0+128)
  4836  0B63  3000               	movlw	0
  4837  0B64  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4838  0B65  00B4               	movwf	(strcat@to+1)^(0+128)
  4839  0B66  083D               	movf	sendMessage@value^(0+128),w
  4840  0B67  00A6               	movwf	ftoa@f^(0+128)
  4841  0B68  083E               	movf	(sendMessage@value+1)^(0+128),w
  4842  0B69  00A7               	movwf	(ftoa@f+1)^(0+128)
  4843  0B6A  083F               	movf	(sendMessage@value+2)^(0+128),w
  4844  0B6B  00A8               	movwf	(ftoa@f+2)^(0+128)
  4845  0B6C  30C1               	movlw	(low (sendMessage@status| 0))& (0+255)
  4846  0B6D  00C0               	movwf	??_sendMessage^(0+128)
  4847  0B6E  0840               	movf	??_sendMessage^(0+128),w
  4848  0B6F  00A9               	movwf	ftoa@status^(0+128)
  4849  0B70  318E  2618  318B   	fcall	_ftoa
  4850  0B73  0021               	movlb	1	; select bank1
  4851  0B74  00B5               	movwf	strcat@from^(0+128)
  4852  0B75  3001               	movlw	1
  4853  0B76  00B6               	movwf	(strcat@from+1)^(0+128)
  4854  0B77  3197  275E  318B   	fcall	_strcat
  4855                           
  4856                           ;main.c: 115: packet->packetData.byte = 0;
  4857  0B7A  0021               	movlb	1	; select bank1
  4858  0B7B  0839               	movf	sendMessage@packet^(0+128),w
  4859  0B7C  0086               	movwf	6
  4860  0B7D  083A               	movf	(sendMessage@packet+1)^(0+128),w
  4861  0B7E  0087               	movwf	7
  4862  0B7F  0181               	clrf	1
  4863                           
  4864                           ;main.c: 116: packet->packetData.ACKRequest = 1;
  4865  0B80  0839               	movf	sendMessage@packet^(0+128),w
  4866  0B81  0086               	movwf	6
  4867  0B82  083A               	movf	(sendMessage@packet+1)^(0+128),w
  4868  0B83  0087               	movwf	7
  4869  0B84  1501               	bsf	1,2
  4870                           
  4871                           ;main.c: 118: nrf24l01SendPacket(packet);
  4872  0B85  083A               	movf	(sendMessage@packet+1)^(0+128),w
  4873  0B86  0020               	movlb	0	; select bank0
  4874  0B87  00AD               	movwf	nrf24l01SendPacket@txPacket+1
  4875  0B88  0021               	movlb	1	; select bank1
  4876  0B89  0839               	movf	sendMessage@packet^(0+128),w
  4877  0B8A  0020               	movlb	0	; select bank0
  4878  0B8B  00AC               	movwf	nrf24l01SendPacket@txPacket
  4879  0B8C  3189  21AA  318B   	fcall	_nrf24l01SendPacket
  4880                           
  4881                           ;main.c: 120: sleep(10000);
  4882  0B8F  3010               	movlw	16
  4883  0B90  0020               	movlb	0	; select bank0
  4884  0B91  00A2               	movwf	sleep@milliseconds
  4885  0B92  3027               	movlw	39
  4886  0B93  00A3               	movwf	sleep@milliseconds+1
  4887  0B94  3197  2715         	fcall	_sleep
  4888  0B96  0008               	return
  4889  0B97                     __end_of_sendMessage:	
  4890                           
  4891                           	psect	text11
  4892  175E                     __ptext11:	
  4893 ;; *************** function _strcat *****************
  4894 ;; Defined at:
  4895 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;  to              2   19[BANK1 ] PTR unsigned char 
  4898 ;;		 -> main@packet(33), loop@packet(33), 
  4899 ;;  from            2   21[BANK1 ] PTR const unsigned char 
  4900 ;;		 -> ftoa@buf(17), STR_9(5), STR_7(6), STR_6(5), 
  4901 ;;		 -> STR_5(7), STR_4(5), STR_3(5), STR_2(2), 
  4902 ;;		 -> STR_1(2), 
  4903 ;; Auto vars:     Size  Location     Type
  4904 ;;  cp              2   23[BANK1 ] PTR unsigned char 
  4905 ;;		 -> main@packet(33), loop@packet(33), 
  4906 ;; Return value:  Size  Location     Type
  4907 ;;                  2   19[BANK1 ] PTR unsigned char 
  4908 ;; Registers used:
  4909 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4910 ;; Tracked objects:
  4911 ;;		On entry : 0/0
  4912 ;;		On exit  : 0/0
  4913 ;;		Unchanged: 0/0
  4914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4915 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4916 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4918 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  4919 ;;Total ram usage:        6 bytes
  4920 ;; Hardware stack levels used:    1
  4921 ;; Hardware stack levels required when called:    7
  4922 ;; This function calls:
  4923 ;;		Nothing
  4924 ;; This function is called by:
  4925 ;;		_sendMessage
  4926 ;; This function uses a non-reentrant model
  4927 ;;
  4928                           
  4929                           
  4930                           ;psect for function _strcat
  4931  175E                     _strcat:	
  4932                           
  4933                           ;incstack = 0
  4934                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  4935  175E  0021               	movlb	1	; select bank1
  4936  175F  0834               	movf	(strcat@to+1)^(0+128),w
  4937  1760  00B8               	movwf	(strcat@cp+1)^(0+128)
  4938  1761  0833               	movf	strcat@to^(0+128),w
  4939  1762  00B7               	movwf	strcat@cp^(0+128)
  4940  1763                     l2857:	
  4941  1763  0837               	movf	strcat@cp^(0+128),w
  4942  1764  0086               	movwf	6
  4943  1765  0838               	movf	(strcat@cp+1)^(0+128),w
  4944  1766  0087               	movwf	7
  4945  1767  0801               	movf	1,w
  4946  1768  1903               	btfsc	3,2
  4947  1769  2F77               	goto	l2861
  4948  176A  3001               	movlw	1
  4949  176B  07B7               	addwf	strcat@cp^(0+128),f
  4950  176C  3000               	movlw	0
  4951  176D  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  4952  176E  2F63               	goto	l2857
  4953  176F                     l2859:	
  4954  176F  3001               	movlw	1
  4955  1770  07B7               	addwf	strcat@cp^(0+128),f
  4956  1771  3000               	movlw	0
  4957  1772  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  4958  1773  3001               	movlw	1
  4959  1774  07B5               	addwf	strcat@from^(0+128),f
  4960  1775  3000               	movlw	0
  4961  1776  3DB6               	addwfc	(strcat@from+1)^(0+128),f
  4962  1777                     l2861:	
  4963  1777  0837               	movf	strcat@cp^(0+128),w
  4964  1778  0086               	movwf	6
  4965  1779  0838               	movf	(strcat@cp+1)^(0+128),w
  4966  177A  0087               	movwf	7
  4967  177B  0835               	movf	strcat@from^(0+128),w
  4968  177C  0084               	movwf	4
  4969  177D  0836               	movf	(strcat@from+1)^(0+128),w
  4970  177E  0085               	movwf	5
  4971  177F  0800               	movf	0,w	;code access
  4972  1780  3FC0               	movwi [0]fsr1
  4973  1781  0889               	movf	9,f
  4974  1782  1903               	btfsc	3,2
  4975  1783  0008               	return
  4976  1784  2F6F               	goto	l2859
  4977  1785                     __end_of_strcat:	
  4978                           ;	Return value of _strcat is never used
  4979                           
  4980                           
  4981                           	psect	text12
  4982  1715                     __ptext12:	
  4983 ;; *************** function _sleep *****************
  4984 ;; Defined at:
  4985 ;;		line 78 in file "main.c"
  4986 ;; Parameters:    Size  Location     Type
  4987 ;;  milliseconds    2    2[BANK0 ] unsigned int 
  4988 ;; Auto vars:     Size  Location     Type
  4989 ;;		None
  4990 ;; Return value:  Size  Location     Type
  4991 ;;                  1    wreg      void 
  4992 ;; Registers used:
  4993 ;;		wreg, status,2, status,0, pclath, cstack
  4994 ;; Tracked objects:
  4995 ;;		On entry : 0/0
  4996 ;;		On exit  : 0/0
  4997 ;;		Unchanged: 0/0
  4998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4999 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5001 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5002 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5003 ;;Total ram usage:        4 bytes
  5004 ;; Hardware stack levels used:    1
  5005 ;; Hardware stack levels required when called:    8
  5006 ;; This function calls:
  5007 ;;		_doWDTSleep
  5008 ;; This function is called by:
  5009 ;;		_sendMessage
  5010 ;; This function uses a non-reentrant model
  5011 ;;
  5012                           
  5013                           
  5014                           ;psect for function _sleep
  5015  1715                     _sleep:	
  5016                           
  5017                           ;main.c: 81: milliseconds = (unsigned int) (milliseconds / (128 + 128));
  5018                           
  5019                           ;incstack = 0
  5020                           ; Regs used in _sleep: [wreg+status,2+status,0+pclath+cstack]
  5021  1715  0020               	movlb	0	; select bank0
  5022  1716  0823               	movf	sleep@milliseconds+1,w
  5023  1717  00A5               	movwf	??_sleep+1
  5024  1718  0822               	movf	sleep@milliseconds,w
  5025  1719  00A4               	movwf	??_sleep
  5026  171A  0825               	movf	??_sleep+1,w
  5027  171B  00A4               	movwf	??_sleep
  5028  171C  01A5               	clrf	??_sleep+1
  5029  171D  0824               	movf	??_sleep,w
  5030  171E  00A2               	movwf	sleep@milliseconds
  5031  171F  0825               	movf	??_sleep+1,w
  5032  1720  00A3               	movwf	sleep@milliseconds+1
  5033                           
  5034                           ;main.c: 84: milliseconds++;
  5035  1721  3001               	movlw	1
  5036  1722  07A2               	addwf	sleep@milliseconds,f
  5037  1723  3000               	movlw	0
  5038  1724  3DA3               	addwfc	sleep@milliseconds+1,f
  5039  1725                     l2851:	
  5040                           ;main.c: 87: while (--milliseconds){
  5041                           
  5042  1725  3001               	movlw	1
  5043  1726  0020               	movlb	0	; select bank0
  5044  1727  02A2               	subwf	sleep@milliseconds,f
  5045  1728  3000               	movlw	0
  5046  1729  3BA3               	subwfb	sleep@milliseconds+1,f
  5047  172A  0822               	movf	sleep@milliseconds,w
  5048  172B  0423               	iorwf	sleep@milliseconds+1,w
  5049  172C  1903               	btfsc	3,2
  5050  172D  0008               	return
  5051                           
  5052                           ;main.c: 93: doWDTSleep(0b00111);
  5053  172E  3007               	movlw	7
  5054  172F  3195  25A0  3197   	fcall	_doWDTSleep
  5055                           
  5056                           ;main.c: 99: doWDTSleep(0b00111);
  5057  1732  3007               	movlw	7
  5058  1733  3195  25A0  3197   	fcall	_doWDTSleep
  5059  1736  2F25               	goto	l2851
  5060  1737                     __end_of_sleep:	
  5061                           
  5062                           	psect	text13
  5063  09AA                     __ptext13:	
  5064 ;; *************** function _nrf24l01SendPacket *****************
  5065 ;; Defined at:
  5066 ;;		line 220 in file "nrf24l01.c"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;  txPacket        2   12[BANK0 ] PTR struct .
  5069 ;;		 -> main@packet(33), loop@packet(33), 
  5070 ;; Auto vars:     Size  Location     Type
  5071 ;;		None
  5072 ;; Return value:  Size  Location     Type
  5073 ;;                  1    wreg      void 
  5074 ;; Registers used:
  5075 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5076 ;; Tracked objects:
  5077 ;;		On entry : 0/0
  5078 ;;		On exit  : 0/0
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5081 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5083 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5084 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5085 ;;Total ram usage:        4 bytes
  5086 ;; Hardware stack levels used:    1
  5087 ;; Hardware stack levels required when called:   12
  5088 ;; This function calls:
  5089 ;;		_nrf24l01Service
  5090 ;;		_strcpy
  5091 ;; This function is called by:
  5092 ;;		_sendMessage
  5093 ;; This function uses a non-reentrant model
  5094 ;;
  5095                           
  5096                           
  5097                           ;psect for function _nrf24l01SendPacket
  5098  09AA                     _nrf24l01SendPacket:	
  5099  09AA                     l3591:	
  5100                           ;nrf24l01.c: 222: while (status.TX != statuses.TX.Idle){
  5101                           
  5102                           ;incstack = 0
  5103                           ; Regs used in _nrf24l01SendPacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5104                           
  5105  09AA  3034               	movlw	low (_statuses| (0+32768))
  5106  09AB  0084               	movwf	4
  5107  09AC  3098               	movlw	high (_statuses| (0+32768))
  5108  09AD  0085               	movwf	5
  5109  09AE  0800               	movf	0,w	;code access
  5110  09AF  0020               	movlb	0	; select bank0
  5111  09B0  00AE               	movwf	??_nrf24l01SendPacket
  5112  09B1  0021               	movlb	1	; select bank1
  5113  09B2  0867               	movf	_status^(0+128),w	;volatile
  5114  09B3  390F               	andlw	15
  5115  09B4  0020               	movlb	0	; select bank0
  5116  09B5  062E               	xorwf	??_nrf24l01SendPacket,w
  5117  09B6  1903               	btfsc	3,2
  5118  09B7  29C5               	goto	l3593
  5119                           
  5120                           ;nrf24l01.c: 223: _delay((unsigned long)((500)*(32000000/4000000.0)));
  5121  09B8  3006               	movlw	6
  5122  09B9  0020               	movlb	0	; select bank0
  5123  09BA  00AE               	movwf	??_nrf24l01SendPacket
  5124  09BB  3030               	movlw	48
  5125  09BC                     u4047:	
  5126  09BC  0B89               	decfsz	9,f
  5127  09BD  29BC               	goto	u4047
  5128  09BE  0BAE               	decfsz	??_nrf24l01SendPacket,f
  5129  09BF  29BC               	goto	u4047
  5130  09C0  0000               	nop
  5131                           
  5132                           ;nrf24l01.c: 224: nrf24l01Service();
  5133  09C1  3182  2203  3189   	fcall	_nrf24l01Service
  5134  09C4  29AA               	goto	l3591
  5135  09C5                     l3593:	
  5136                           
  5137                           ;nrf24l01.c: 225: };nrf24l01.c: 227: strcpy(TXPacket.Message, txPacket->Message);
  5138  09C5  30C2               	movlw	low (_TXPacket+1)
  5139  09C6  00A0               	movwf	strcpy@to
  5140  09C7  3001               	movlw	high (_TXPacket+1)
  5141  09C8  00A1               	movwf	strcpy@to+1
  5142  09C9  082C               	movf	nrf24l01SendPacket@txPacket,w
  5143  09CA  3E01               	addlw	1
  5144  09CB  00AE               	movwf	??_nrf24l01SendPacket
  5145  09CC  3000               	movlw	0
  5146  09CD  3D2D               	addwfc	nrf24l01SendPacket@txPacket+1,w
  5147  09CE  00AF               	movwf	??_nrf24l01SendPacket+1
  5148  09CF  082E               	movf	??_nrf24l01SendPacket,w
  5149  09D0  00A2               	movwf	strcpy@from
  5150  09D1  082F               	movf	??_nrf24l01SendPacket+1,w
  5151  09D2  00A3               	movwf	strcpy@from+1
  5152  09D3  3196  261E  3189   	fcall	_strcpy
  5153                           
  5154                           ;nrf24l01.c: 228: TXPacket.packetData = txPacket->packetData;
  5155  09D6  0020               	movlb	0	; select bank0
  5156  09D7  082C               	movf	nrf24l01SendPacket@txPacket,w
  5157  09D8  0086               	movwf	6
  5158  09D9  082D               	movf	nrf24l01SendPacket@txPacket+1,w
  5159  09DA  0087               	movwf	7
  5160  09DB  0801               	movf	1,w
  5161  09DC  00AE               	movwf	??_nrf24l01SendPacket
  5162  09DD  082E               	movf	??_nrf24l01SendPacket,w
  5163  09DE  0023               	movlb	3	; select bank3
  5164  09DF  00C1               	movwf	_TXPacket^(0+384)
  5165                           
  5166                           ;nrf24l01.c: 230: status.TX = statuses.TX.Ready;
  5167  09E0  3035               	movlw	low ((_statuses+1)| (0+32768))
  5168  09E1  0084               	movwf	4
  5169  09E2  3098               	movlw	high ((_statuses+1)| (0+32768))
  5170  09E3  0085               	movwf	5
  5171  09E4  0800               	movf	0,w	;code access
  5172  09E5  0020               	movlb	0	; select bank0
  5173  09E6  00AE               	movwf	??_nrf24l01SendPacket
  5174  09E7  0021               	movlb	1	; select bank1
  5175  09E8  0867               	movf	_status^(0+128),w	;volatile
  5176  09E9  0020               	movlb	0	; select bank0
  5177  09EA  062E               	xorwf	??_nrf24l01SendPacket,w
  5178  09EB  39F0               	andlw	-16
  5179  09EC  062E               	xorwf	??_nrf24l01SendPacket,w
  5180  09ED  0021               	movlb	1	; select bank1
  5181  09EE  00E7               	movwf	_status^(0+128)	;volatile
  5182                           
  5183                           ;nrf24l01.c: 232: nrf24l01Service();
  5184  09EF  3182  2203         	fcall	_nrf24l01Service
  5185  09F1  0008               	return
  5186  09F2                     __end_of_nrf24l01SendPacket:	
  5187                           
  5188                           	psect	text14
  5189  161E                     __ptext14:	
  5190 ;; *************** function _strcpy *****************
  5191 ;; Defined at:
  5192 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  5193 ;; Parameters:    Size  Location     Type
  5194 ;;  to              2    0[BANK0 ] PTR unsigned char 
  5195 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5196 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  5197 ;;		 -> romDataMap.name(16), packet.Message(32), packet.Message(32), main@packet(33), 
  5198 ;;		 -> STR_8(4), loop@packet(33), romDataMap(28), 
  5199 ;; Auto vars:     Size  Location     Type
  5200 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  5201 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5202 ;; Return value:  Size  Location     Type
  5203 ;;                  2    0[BANK0 ] PTR unsigned char 
  5204 ;; Registers used:
  5205 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  5206 ;; Tracked objects:
  5207 ;;		On entry : 0/0
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5211 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5212 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5214 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5215 ;;Total ram usage:        6 bytes
  5216 ;; Hardware stack levels used:    1
  5217 ;; Hardware stack levels required when called:    7
  5218 ;; This function calls:
  5219 ;;		Nothing
  5220 ;; This function is called by:
  5221 ;;		_sendMessage
  5222 ;;		_main
  5223 ;;		_nrf24l01SendPacket
  5224 ;; This function uses a non-reentrant model
  5225 ;;
  5226                           
  5227                           
  5228                           ;psect for function _strcpy
  5229  161E                     _strcpy:	
  5230                           
  5231                           ;incstack = 0
  5232                           ; Regs used in _strcpy: [wreg-fsr1h+pclath]
  5233  161E  0020               	movlb	0	; select bank0
  5234  161F  0821               	movf	strcpy@to+1,w
  5235  1620  00A5               	movwf	strcpy@cp+1
  5236  1621  0820               	movf	strcpy@to,w
  5237  1622  00A4               	movwf	strcpy@cp
  5238  1623                     l2493:	
  5239  1623  0824               	movf	strcpy@cp,w
  5240  1624  0086               	movwf	6
  5241  1625  0825               	movf	strcpy@cp+1,w
  5242  1626  0087               	movwf	7
  5243  1627  0822               	movf	strcpy@from,w
  5244  1628  0084               	movwf	4
  5245  1629  0823               	movf	strcpy@from+1,w
  5246  162A  0085               	movwf	5
  5247  162B  0800               	movf	0,w	;code access
  5248  162C  3FC0               	movwi [0]fsr1
  5249  162D  0889               	movf	9,f
  5250  162E  1903               	btfsc	3,2
  5251  162F  0008               	return
  5252  1630  3001               	movlw	1
  5253  1631  07A4               	addwf	strcpy@cp,f
  5254  1632  3000               	movlw	0
  5255  1633  3DA5               	addwfc	strcpy@cp+1,f
  5256  1634  3001               	movlw	1
  5257  1635  07A2               	addwf	strcpy@from,f
  5258  1636  3000               	movlw	0
  5259  1637  3DA3               	addwfc	strcpy@from+1,f
  5260  1638  2E23               	goto	l2493
  5261  1639                     __end_of_strcpy:	
  5262                           ;	Return value of _strcpy is never used
  5263                           
  5264                           
  5265                           	psect	text15
  5266  0203                     __ptext15:	
  5267 ;; *************** function _nrf24l01Service *****************
  5268 ;; Defined at:
  5269 ;;		line 276 in file "nrf24l01.c"
  5270 ;; Parameters:    Size  Location     Type
  5271 ;;		None
  5272 ;; Auto vars:     Size  Location     Type
  5273 ;;  width           1   10[BANK0 ] unsigned char 
  5274 ;;  i               1   11[BANK0 ] unsigned char 
  5275 ;; Return value:  Size  Location     Type
  5276 ;;                  1    wreg      void 
  5277 ;; Registers used:
  5278 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5279 ;; Tracked objects:
  5280 ;;		On entry : 0/0
  5281 ;;		On exit  : 0/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5285 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;Total ram usage:        4 bytes
  5289 ;; Hardware stack levels used:    1
  5290 ;; Hardware stack levels required when called:   11
  5291 ;; This function calls:
  5292 ;;		_memset
  5293 ;;		_nrf24l01CEHigh
  5294 ;;		_nrf24l01CELow
  5295 ;;		_nrf24l01SPIEnd
  5296 ;;		_nrf24l01SPISend
  5297 ;;		_nrf24l01SPIStart
  5298 ;;		_nrf24l01Send
  5299 ;;		_nrf24l01SetRXMode
  5300 ;;		_strcmp
  5301 ;;		_strlen
  5302 ;; This function is called by:
  5303 ;;		_nrf24l01SendPacket
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           
  5308                           ;psect for function _nrf24l01Service
  5309  0203                     _nrf24l01Service:	
  5310                           
  5311                           ;nrf24l01.c: 278: unsigned char i;;nrf24l01.c: 280: if (status.TX == statuses.TX.Ready){
  5312                           
  5313                           ;incstack = 0
  5314                           ; Regs used in _nrf24l01Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5315  0203  3035               	movlw	low ((_statuses+1)| (0+32768))
  5316  0204  0084               	movwf	4
  5317  0205  3098               	movlw	high ((_statuses+1)| (0+32768))
  5318  0206  0085               	movwf	5
  5319  0207  0800               	movf	0,w	;code access
  5320  0208  0020               	movlb	0	; select bank0
  5321  0209  00A8               	movwf	??_nrf24l01Service
  5322  020A  0021               	movlb	1	; select bank1
  5323  020B  0867               	movf	_status^(0+128),w	;volatile
  5324  020C  390F               	andlw	15
  5325  020D  0020               	movlb	0	; select bank0
  5326  020E  0628               	xorwf	??_nrf24l01Service,w
  5327  020F  1D03               	skipz
  5328  0210  2A64               	goto	l3525
  5329                           
  5330                           ;nrf24l01.c: 283: nrf24l01SetRXMode(0);
  5331  0211  3000               	movlw	0
  5332  0212  3188  2013  3182   	fcall	_nrf24l01SetRXMode
  5333                           
  5334                           ;nrf24l01.c: 286: nrf24l01SPIStart();
  5335  0215  3195  255E  3182   	fcall	_nrf24l01SPIStart
  5336                           
  5337                           ;nrf24l01.c: 289: nrf24l01SPISend((unsigned) 0b10110000);
  5338  0218  30B0               	movlw	176
  5339  0219  3195  256F  3182   	fcall	_nrf24l01SPISend
  5340                           
  5341                           ;nrf24l01.c: 291: nrf24l01SPISend(TXPacket.packetData.byte);
  5342  021C  0023               	movlb	3	; select bank3
  5343  021D  0841               	movf	_TXPacket^(0+384),w
  5344  021E  3195  256F  3182   	fcall	_nrf24l01SPISend
  5345                           
  5346                           ;nrf24l01.c: 294: for (i = 0; (i < strlen(TXPacket.Message)) && (i < 32); i++) {
  5347  0221  0020               	movlb	0	; select bank0
  5348  0222  01AB               	clrf	nrf24l01Service@i
  5349  0223  2A32               	goto	l3511
  5350  0224                     l3507:	
  5351                           
  5352                           ;nrf24l01.c: 295: nrf24l01SPISend(TXPacket.Message[i]);
  5353  0224  082B               	movf	nrf24l01Service@i,w
  5354  0225  3EC2               	addlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  5355  0226  0086               	movwf	6
  5356  0227  3001               	movlw	1	; select bank3/4
  5357  0228  0087               	movwf	7
  5358  0229  0801               	movf	1,w
  5359  022A  3195  256F  3182   	fcall	_nrf24l01SPISend
  5360  022D  3001               	movlw	1
  5361  022E  0020               	movlb	0	; select bank0
  5362  022F  00A8               	movwf	??_nrf24l01Service
  5363  0230  0828               	movf	??_nrf24l01Service,w
  5364  0231  07AB               	addwf	nrf24l01Service@i,f
  5365  0232                     l3511:	
  5366  0232  30C2               	movlw	low (_TXPacket+1)
  5367  0233  00A0               	movwf	strlen@s
  5368  0234  3001               	movlw	high (_TXPacket+1)
  5369  0235  00A1               	movwf	strlen@s+1
  5370  0236  3196  2693  3182   	fcall	_strlen
  5371  0239  0020               	movlb	0	; select bank0
  5372  023A  082B               	movf	nrf24l01Service@i,w
  5373  023B  00A8               	movwf	??_nrf24l01Service
  5374  023C  01A9               	clrf	??_nrf24l01Service+1
  5375  023D  0821               	movf	?_strlen+1,w
  5376  023E  0229               	subwf	??_nrf24l01Service+1,w
  5377  023F  1D03               	skipz
  5378  0240  2A43               	goto	u3675
  5379  0241  0820               	movf	?_strlen,w
  5380  0242  0228               	subwf	??_nrf24l01Service,w
  5381  0243                     u3675:	
  5382  0243  1803               	skipnc
  5383  0244  2A49               	goto	l3515
  5384  0245  3020               	movlw	32
  5385  0246  022B               	subwf	nrf24l01Service@i,w
  5386  0247  1C03               	skipc
  5387  0248  2A24               	goto	l3507
  5388  0249                     l3515:	
  5389                           
  5390                           ;nrf24l01.c: 296: };nrf24l01.c: 299: nrf24l01SPIEnd();
  5391  0249  3195  254F  3182   	fcall	_nrf24l01SPIEnd
  5392                           
  5393                           ;nrf24l01.c: 302: status.TX = statuses.TX.Sending;
  5394  024C  3036               	movlw	low ((_statuses+2)| (0+32768))
  5395  024D  0084               	movwf	4
  5396  024E  3098               	movlw	high ((_statuses+2)| (0+32768))
  5397  024F  0085               	movwf	5
  5398  0250  0800               	movf	0,w	;code access
  5399  0251  0020               	movlb	0	; select bank0
  5400  0252  00A8               	movwf	??_nrf24l01Service
  5401  0253  0021               	movlb	1	; select bank1
  5402  0254  0867               	movf	_status^(0+128),w	;volatile
  5403  0255  0020               	movlb	0	; select bank0
  5404  0256  0628               	xorwf	??_nrf24l01Service,w
  5405  0257  39F0               	andlw	-16
  5406  0258  0628               	xorwf	??_nrf24l01Service,w
  5407  0259  0021               	movlb	1	; select bank1
  5408  025A  00E7               	movwf	_status^(0+128)	;volatile
  5409                           
  5410                           ;nrf24l01.c: 305: nrf24l01CEHigh();
  5411  025B  3195  253D  3182   	fcall	_nrf24l01CEHigh
  5412                           
  5413                           ;nrf24l01.c: 306: _delay((unsigned long)((12)*(32000000/4000000.0)));
  5414  025E  3020               	movlw	32
  5415  025F                     u4057:	
  5416  025F  0B89               	decfsz	9,f
  5417  0260  2A5F               	goto	u4057
  5418                           
  5419                           ;nrf24l01.c: 307: nrf24l01CELow();
  5420  0261  3195  2540  3182   	fcall	_nrf24l01CELow
  5421  0264                     l3525:	
  5422                           
  5423                           ;nrf24l01.c: 308: };nrf24l01.c: 310: if (status.RX == statuses.RX.Pending){
  5424  0264  3039               	movlw	low ((_statuses+5)| (0+32768))
  5425  0265  0084               	movwf	4
  5426  0266  3098               	movlw	high ((_statuses+5)| (0+32768))
  5427  0267  0085               	movwf	5
  5428  0268  0800               	movf	0,w	;code access
  5429  0269  0020               	movlb	0	; select bank0
  5430  026A  00A8               	movwf	??_nrf24l01Service
  5431  026B  0021               	movlb	1	; select bank1
  5432  026C  0E67               	swapf	_status^(0+128),w	;volatile
  5433  026D  390F               	andlw	15
  5434  026E  0020               	movlb	0	; select bank0
  5435  026F  0628               	xorwf	??_nrf24l01Service,w
  5436  0270  1D03               	skipz
  5437  0271  2AF1               	goto	l3563
  5438                           
  5439                           ;nrf24l01.c: 313: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  5440  0272  30A1               	movlw	low (_RXPacket+1)
  5441  0273  00A0               	movwf	memset@p1
  5442  0274  3001               	movlw	high (_RXPacket+1)
  5443  0275  00A1               	movwf	memset@p1+1
  5444  0276  3000               	movlw	0
  5445  0277  00A2               	movwf	memset@c
  5446  0278  00A3               	movwf	memset@c+1
  5447  0279  3020               	movlw	32
  5448  027A  00A4               	movwf	memset@n
  5449  027B  3000               	movlw	0
  5450  027C  00A5               	movwf	memset@n+1
  5451  027D  3195  25CF  3182   	fcall	_memset
  5452                           
  5453                           ;nrf24l01.c: 314: RXPacket.packetData.byte = 0x00;
  5454  0280  0023               	movlb	3	; select bank3
  5455  0281  01A0               	clrf	_RXPacket^(0+384)
  5456                           
  5457                           ;nrf24l01.c: 317: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  5458  0282  0020               	movlb	0	; select bank0
  5459  0283  01A0               	clrf	nrf24l01Send@data
  5460  0284  3060               	movlw	96
  5461  0285  3196  26B2  3182   	fcall	_nrf24l01Send
  5462  0288  0020               	movlb	0	; select bank0
  5463  0289  00A8               	movwf	??_nrf24l01Service
  5464  028A  0828               	movf	??_nrf24l01Service,w
  5465  028B  00AA               	movwf	nrf24l01Service@width
  5466                           
  5467                           ;nrf24l01.c: 320: nrf24l01CELow();
  5468  028C  3195  2540  3182   	fcall	_nrf24l01CELow
  5469                           
  5470                           ;nrf24l01.c: 323: nrf24l01SPIStart();
  5471  028F  3195  255E  3182   	fcall	_nrf24l01SPIStart
  5472                           
  5473                           ;nrf24l01.c: 326: nrf24l01SPISend((unsigned) 0b01100001);
  5474  0292  3061               	movlw	97
  5475  0293  3195  256F  3182   	fcall	_nrf24l01SPISend
  5476                           
  5477                           ;nrf24l01.c: 329: RXPacket.packetData.byte = nrf24l01SPISend(0);
  5478  0296  3000               	movlw	0
  5479  0297  3195  256F  3182   	fcall	_nrf24l01SPISend
  5480  029A  0020               	movlb	0	; select bank0
  5481  029B  00A8               	movwf	??_nrf24l01Service
  5482  029C  0828               	movf	??_nrf24l01Service,w
  5483  029D  0023               	movlb	3	; select bank3
  5484  029E  00A0               	movwf	_RXPacket^(0+384)
  5485                           
  5486                           ;nrf24l01.c: 330: width--;
  5487  029F  3001               	movlw	1
  5488  02A0  0020               	movlb	0	; select bank0
  5489  02A1  02AA               	subwf	nrf24l01Service@width,f
  5490                           
  5491                           ;nrf24l01.c: 332: for (i = 0; (i < width) && (i < 32); i++){
  5492  02A2  01AB               	clrf	nrf24l01Service@i
  5493  02A3  2AB5               	goto	l3549
  5494  02A4                     l3545:	
  5495                           
  5496                           ;nrf24l01.c: 334: RXPacket.Message[i] = nrf24l01SPISend(0);
  5497  02A4  3000               	movlw	0
  5498  02A5  3195  256F  3182   	fcall	_nrf24l01SPISend
  5499  02A8  0020               	movlb	0	; select bank0
  5500  02A9  00A8               	movwf	??_nrf24l01Service
  5501  02AA  082B               	movf	nrf24l01Service@i,w
  5502  02AB  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5503  02AC  0086               	movwf	6
  5504  02AD  3001               	movlw	1	; select bank3/4
  5505  02AE  0087               	movwf	7
  5506  02AF  0828               	movf	??_nrf24l01Service,w
  5507  02B0  0081               	movwf	1
  5508  02B1  3001               	movlw	1
  5509  02B2  00A8               	movwf	??_nrf24l01Service
  5510  02B3  0828               	movf	??_nrf24l01Service,w
  5511  02B4  07AB               	addwf	nrf24l01Service@i,f
  5512  02B5                     l3549:	
  5513  02B5  082A               	movf	nrf24l01Service@width,w
  5514  02B6  022B               	subwf	nrf24l01Service@i,w
  5515  02B7  1803               	skipnc
  5516  02B8  2ABD               	goto	l3553
  5517  02B9  3020               	movlw	32
  5518  02BA  022B               	subwf	nrf24l01Service@i,w
  5519  02BB  1C03               	skipc
  5520  02BC  2AA4               	goto	l3545
  5521  02BD                     l3553:	
  5522                           
  5523                           ;nrf24l01.c: 335: };nrf24l01.c: 338: nrf24l01SPIEnd();
  5524  02BD  3195  254F  3182   	fcall	_nrf24l01SPIEnd
  5525                           
  5526                           ;nrf24l01.c: 341: nrf24l01CEHigh();
  5527  02C0  3195  253D  3182   	fcall	_nrf24l01CEHigh
  5528                           
  5529                           ;nrf24l01.c: 344: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
  5530  02C3  0021               	movlb	1	; select bank1
  5531  02C4  0C68               	rrf	(_status^(0+128)+1),w	;volatile
  5532  02C5  3907               	andlw	7
  5533  02C6  0020               	movlb	0	; select bank0
  5534  02C7  00A8               	movwf	??_nrf24l01Service
  5535  02C8  0EA8               	swapf	??_nrf24l01Service,f
  5536  02C9  0023               	movlb	3	; select bank3
  5537  02CA  0820               	movf	_RXPacket^(0+384),w
  5538  02CB  0020               	movlb	0	; select bank0
  5539  02CC  0628               	xorwf	??_nrf24l01Service,w
  5540  02CD  398F               	andlw	-113
  5541  02CE  0628               	xorwf	??_nrf24l01Service,w
  5542  02CF  0023               	movlb	3	; select bank3
  5543  02D0  00A0               	movwf	_RXPacket^(0+384)
  5544                           
  5545                           ;nrf24l01.c: 347: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  5546  02D1  0020               	movlb	0	; select bank0
  5547  02D2  01A0               	clrf	nrf24l01Send@data
  5548  02D3  3009               	movlw	9
  5549  02D4  3196  26B2  3182   	fcall	_nrf24l01Send
  5550  02D7  0020               	movlb	0	; select bank0
  5551  02D8  00A8               	movwf	??_nrf24l01Service
  5552  02D9  0023               	movlb	3	; select bank3
  5553  02DA  0820               	movf	_RXPacket^(0+384),w
  5554  02DB  0020               	movlb	0	; select bank0
  5555  02DC  0628               	xorwf	??_nrf24l01Service,w
  5556  02DD  39FE               	andlw	-2
  5557  02DE  0628               	xorwf	??_nrf24l01Service,w
  5558  02DF  0023               	movlb	3	; select bank3
  5559  02E0  00A0               	movwf	_RXPacket^(0+384)
  5560                           
  5561                           ;nrf24l01.c: 349: status.RX = statuses.RX.Ready;
  5562  02E1  303A               	movlw	low ((_statuses+6)| (0+32768))
  5563  02E2  0084               	movwf	4
  5564  02E3  3098               	movlw	high ((_statuses+6)| (0+32768))
  5565  02E4  0085               	movwf	5
  5566  02E5  0800               	movf	0,w	;code access
  5567  02E6  0020               	movlb	0	; select bank0
  5568  02E7  00A8               	movwf	??_nrf24l01Service
  5569  02E8  0EA8               	swapf	??_nrf24l01Service,f
  5570  02E9  0021               	movlb	1	; select bank1
  5571  02EA  0867               	movf	_status^(0+128),w	;volatile
  5572  02EB  0020               	movlb	0	; select bank0
  5573  02EC  0628               	xorwf	??_nrf24l01Service,w
  5574  02ED  390F               	andlw	-241
  5575  02EE  0628               	xorwf	??_nrf24l01Service,w
  5576  02EF  0021               	movlb	1	; select bank1
  5577  02F0  00E7               	movwf	_status^(0+128)	;volatile
  5578  02F1                     l3563:	
  5579                           
  5580                           ;nrf24l01.c: 350: };nrf24l01.c: 352: if (status.RX == statuses.RX.Ready){
  5581  02F1  303A               	movlw	low ((_statuses+6)| (0+32768))
  5582  02F2  0084               	movwf	4
  5583  02F3  3098               	movlw	high ((_statuses+6)| (0+32768))
  5584  02F4  0085               	movwf	5
  5585  02F5  0800               	movf	0,w	;code access
  5586  02F6  0020               	movlb	0	; select bank0
  5587  02F7  00A8               	movwf	??_nrf24l01Service
  5588  02F8  0021               	movlb	1	; select bank1
  5589  02F9  0E67               	swapf	_status^(0+128),w	;volatile
  5590  02FA  390F               	andlw	15
  5591  02FB  0020               	movlb	0	; select bank0
  5592  02FC  0628               	xorwf	??_nrf24l01Service,w
  5593  02FD  1D03               	skipz
  5594  02FE  2B3F               	goto	l3575
  5595                           
  5596                           ;nrf24l01.c: 355: if (RXPacket.packetData.IsACK){
  5597  02FF  0023               	movlb	3	; select bank3
  5598  0300  1DA0               	btfss	_RXPacket^(0+384),3
  5599  0301  2B3F               	goto	l3575
  5600                           
  5601                           ;nrf24l01.c: 357: if (status.TX == statuses.TX.PendingACK){
  5602  0302  3037               	movlw	low ((_statuses+3)| (0+32768))
  5603  0303  0084               	movwf	4
  5604  0304  3098               	movlw	high ((_statuses+3)| (0+32768))
  5605  0305  0085               	movwf	5
  5606  0306  0800               	movf	0,w	;code access
  5607  0307  0020               	movlb	0	; select bank0
  5608  0308  00A8               	movwf	??_nrf24l01Service
  5609  0309  0021               	movlb	1	; select bank1
  5610  030A  0867               	movf	_status^(0+128),w	;volatile
  5611  030B  390F               	andlw	15
  5612  030C  0020               	movlb	0	; select bank0
  5613  030D  0628               	xorwf	??_nrf24l01Service,w
  5614  030E  1D03               	skipz
  5615  030F  2B3F               	goto	l3575
  5616                           
  5617                           ;nrf24l01.c: 359: if (strcmp(RXPacket.Message, TXPacket.Message) == 0){
  5618  0310  30C2               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  5619  0311  00A8               	movwf	??_nrf24l01Service
  5620  0312  0828               	movf	??_nrf24l01Service,w
  5621  0313  00A0               	movwf	strcmp@s2
  5622  0314  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5623  0315  3197  27AD  3182   	fcall	_strcmp
  5624  0318  0020               	movlb	0	; select bank0
  5625  0319  0820               	movf	?_strcmp,w
  5626  031A  0421               	iorwf	?_strcmp+1,w
  5627  031B  1D03               	btfss	3,2
  5628  031C  2B3F               	goto	l3575
  5629                           
  5630                           ;nrf24l01.c: 360: status.TX = statuses.TX.Idle;
  5631  031D  3034               	movlw	low (_statuses| (0+32768))
  5632  031E  0084               	movwf	4
  5633  031F  3098               	movlw	high (_statuses| (0+32768))
  5634  0320  0085               	movwf	5
  5635  0321  0800               	movf	0,w	;code access
  5636  0322  00A8               	movwf	??_nrf24l01Service
  5637  0323  0021               	movlb	1	; select bank1
  5638  0324  0867               	movf	_status^(0+128),w	;volatile
  5639  0325  0020               	movlb	0	; select bank0
  5640  0326  0628               	xorwf	??_nrf24l01Service,w
  5641  0327  39F0               	andlw	-16
  5642  0328  0628               	xorwf	??_nrf24l01Service,w
  5643  0329  0021               	movlb	1	; select bank1
  5644  032A  00E7               	movwf	_status^(0+128)	;volatile
  5645                           
  5646                           ;nrf24l01.c: 361: status.RX = statuses.RX.Idle;
  5647  032B  3038               	movlw	low ((_statuses+4)| (0+32768))
  5648  032C  0084               	movwf	4
  5649  032D  3098               	movlw	high ((_statuses+4)| (0+32768))
  5650  032E  0085               	movwf	5
  5651  032F  0800               	movf	0,w	;code access
  5652  0330  0020               	movlb	0	; select bank0
  5653  0331  00A8               	movwf	??_nrf24l01Service
  5654  0332  0EA8               	swapf	??_nrf24l01Service,f
  5655  0333  0021               	movlb	1	; select bank1
  5656  0334  0867               	movf	_status^(0+128),w	;volatile
  5657  0335  0020               	movlb	0	; select bank0
  5658  0336  0628               	xorwf	??_nrf24l01Service,w
  5659  0337  390F               	andlw	-241
  5660  0338  0628               	xorwf	??_nrf24l01Service,w
  5661  0339  0021               	movlb	1	; select bank1
  5662  033A  00E7               	movwf	_status^(0+128)	;volatile
  5663                           
  5664                           ;nrf24l01.c: 363: nrf24l01SetRXMode(0);
  5665  033B  3000               	movlw	0
  5666  033C  3188  2013  3182   	fcall	_nrf24l01SetRXMode
  5667  033F                     l3575:	
  5668                           
  5669                           ;nrf24l01.c: 365: };nrf24l01.c: 366: };nrf24l01.c: 367: };nrf24l01.c: 370: };nrf24l01.c:
      +                           372: if (status.RX == statuses.RX.Ready){
  5670  033F  303A               	movlw	low ((_statuses+6)| (0+32768))
  5671  0340  0084               	movwf	4
  5672  0341  3098               	movlw	high ((_statuses+6)| (0+32768))
  5673  0342  0085               	movwf	5
  5674  0343  0800               	movf	0,w	;code access
  5675  0344  0020               	movlb	0	; select bank0
  5676  0345  00A8               	movwf	??_nrf24l01Service
  5677  0346  0021               	movlb	1	; select bank1
  5678  0347  0E67               	swapf	_status^(0+128),w	;volatile
  5679  0348  390F               	andlw	15
  5680  0349  0020               	movlb	0	; select bank0
  5681  034A  0628               	xorwf	??_nrf24l01Service,w
  5682  034B  1D03               	skipz
  5683  034C  2B56               	goto	l3579
  5684                           
  5685                           ;nrf24l01.c: 373: counter++;
  5686  034D  3001               	movlw	1
  5687  034E  0022               	movlb	2	; select bank2
  5688  034F  07D1               	addwf	_counter^(0+256),f
  5689  0350  3000               	movlw	0
  5690  0351  3DD2               	addwfc	(_counter+1)^(0+256),f
  5691  0352  3000               	movlw	0
  5692  0353  3DD3               	addwfc	(_counter+2)^(0+256),f
  5693  0354  3000               	movlw	0
  5694  0355  3DD4               	addwfc	(_counter+3)^(0+256),f
  5695  0356                     l3579:	
  5696                           
  5697                           ;nrf24l01.c: 374: };nrf24l01.c: 376: if (status.TX == statuses.TX.PendingACK){
  5698  0356  3037               	movlw	low ((_statuses+3)| (0+32768))
  5699  0357  0084               	movwf	4
  5700  0358  3098               	movlw	high ((_statuses+3)| (0+32768))
  5701  0359  0085               	movwf	5
  5702  035A  0800               	movf	0,w	;code access
  5703  035B  0020               	movlb	0	; select bank0
  5704  035C  00A8               	movwf	??_nrf24l01Service
  5705  035D  0021               	movlb	1	; select bank1
  5706  035E  0867               	movf	_status^(0+128),w	;volatile
  5707  035F  390F               	andlw	15
  5708  0360  0020               	movlb	0	; select bank0
  5709  0361  0628               	xorwf	??_nrf24l01Service,w
  5710  0362  1D03               	skipz
  5711  0363  0008               	return
  5712                           
  5713                           ;nrf24l01.c: 377: if (!status.retryCount--){
  5714  0364  3001               	movlw	1
  5715  0365  0021               	movlb	1	; select bank1
  5716  0366  02EA               	subwf	(_status^(0+128)+3),f	;volatile
  5717  0367  0A6A               	incf	(_status^(0+128)+3),w	;volatile
  5718  0368  1D03               	btfss	3,2
  5719  0369  0008               	return
  5720                           
  5721                           ;nrf24l01.c: 378: status.TX = statuses.TX.Ready;
  5722  036A  3035               	movlw	low ((_statuses+1)| (0+32768))
  5723  036B  0084               	movwf	4
  5724  036C  3098               	movlw	high ((_statuses+1)| (0+32768))
  5725  036D  0085               	movwf	5
  5726  036E  0800               	movf	0,w	;code access
  5727  036F  0020               	movlb	0	; select bank0
  5728  0370  00A8               	movwf	??_nrf24l01Service
  5729  0371  0021               	movlb	1	; select bank1
  5730  0372  0867               	movf	_status^(0+128),w	;volatile
  5731  0373  0020               	movlb	0	; select bank0
  5732  0374  0628               	xorwf	??_nrf24l01Service,w
  5733  0375  39F0               	andlw	-16
  5734  0376  0628               	xorwf	??_nrf24l01Service,w
  5735  0377  0021               	movlb	1	; select bank1
  5736  0378  00E7               	movwf	_status^(0+128)	;volatile
  5737  0379  0008               	return
  5738  037A                     __end_of_nrf24l01Service:	
  5739                           
  5740                           	psect	text16
  5741  1693                     __ptext16:	
  5742 ;; *************** function _strlen *****************
  5743 ;; Defined at:
  5744 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  5745 ;; Parameters:    Size  Location     Type
  5746 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  5747 ;;		 -> TXPacket.Message(32), TXPacket(33), romDataMap(28), 
  5748 ;; Auto vars:     Size  Location     Type
  5749 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  5750 ;;		 -> TXPacket.Message(32), TXPacket(33), romDataMap(28), 
  5751 ;; Return value:  Size  Location     Type
  5752 ;;                  2    0[BANK0 ] unsigned int 
  5753 ;; Registers used:
  5754 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5755 ;; Tracked objects:
  5756 ;;		On entry : 0/0
  5757 ;;		On exit  : 0/0
  5758 ;;		Unchanged: 0/0
  5759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5760 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5761 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5762 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5763 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5764 ;;Total ram usage:        6 bytes
  5765 ;; Hardware stack levels used:    1
  5766 ;; Hardware stack levels required when called:    7
  5767 ;; This function calls:
  5768 ;;		Nothing
  5769 ;; This function is called by:
  5770 ;;		_nrf24l01GetPipe
  5771 ;;		_nrf24l01Service
  5772 ;; This function uses a non-reentrant model
  5773 ;;
  5774                           
  5775                           
  5776                           ;psect for function _strlen
  5777  1693                     _strlen:	
  5778                           
  5779                           ;incstack = 0
  5780                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5781  1693  0020               	movlb	0	; select bank0
  5782  1694  0821               	movf	strlen@s+1,w
  5783  1695  00A5               	movwf	strlen@cp+1
  5784  1696  0820               	movf	strlen@s,w
  5785  1697  00A4               	movwf	strlen@cp
  5786  1698                     l3495:	
  5787  1698  0824               	movf	strlen@cp,w
  5788  1699  0086               	movwf	6
  5789  169A  0825               	movf	strlen@cp+1,w
  5790  169B  0087               	movwf	7
  5791  169C  0801               	movf	1,w
  5792  169D  1903               	btfsc	3,2
  5793  169E  2EA4               	goto	l3497
  5794  169F  3001               	movlw	1
  5795  16A0  07A4               	addwf	strlen@cp,f
  5796  16A1  3000               	movlw	0
  5797  16A2  3DA5               	addwfc	strlen@cp+1,f
  5798  16A3  2E98               	goto	l3495
  5799  16A4                     l3497:	
  5800  16A4  0920               	comf	strlen@s,w
  5801  16A5  00A2               	movwf	??_strlen
  5802  16A6  0921               	comf	strlen@s+1,w
  5803  16A7  00A3               	movwf	??_strlen+1
  5804  16A8  0AA2               	incf	??_strlen,f
  5805  16A9  1903               	skipnz
  5806  16AA  0AA3               	incf	??_strlen+1,f
  5807  16AB  0824               	movf	strlen@cp,w
  5808  16AC  0722               	addwf	??_strlen,w
  5809  16AD  00A0               	movwf	?_strlen
  5810  16AE  0825               	movf	strlen@cp+1,w
  5811  16AF  3D23               	addwfc	??_strlen+1,w
  5812  16B0  00A1               	movwf	?_strlen+1
  5813  16B1  0008               	return
  5814  16B2                     __end_of_strlen:	
  5815                           
  5816                           	psect	text17
  5817  17AD                     __ptext17:	
  5818 ;; *************** function _strcmp *****************
  5819 ;; Defined at:
  5820 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  5821 ;; Parameters:    Size  Location     Type
  5822 ;;  s1              1    wreg     PTR const unsigned char 
  5823 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5824 ;;  s2              1    0[BANK0 ] PTR const unsigned char 
  5825 ;;		 -> TXPacket.Message(32), TXPacket(33), 
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;  s1              1    4[BANK0 ] PTR const unsigned char 
  5828 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5829 ;;  r               1    3[BANK0 ] char 
  5830 ;; Return value:  Size  Location     Type
  5831 ;;                  2    0[BANK0 ] int 
  5832 ;; Registers used:
  5833 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5834 ;; Tracked objects:
  5835 ;;		On entry : 0/0
  5836 ;;		On exit  : 0/0
  5837 ;;		Unchanged: 0/0
  5838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5839 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5840 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5842 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5843 ;;Total ram usage:        5 bytes
  5844 ;; Hardware stack levels used:    1
  5845 ;; Hardware stack levels required when called:    7
  5846 ;; This function calls:
  5847 ;;		Nothing
  5848 ;; This function is called by:
  5849 ;;		_nrf24l01Service
  5850 ;; This function uses a non-reentrant model
  5851 ;;
  5852                           
  5853                           
  5854                           ;psect for function _strcmp
  5855  17AD                     _strcmp:	
  5856                           
  5857                           ;incstack = 0
  5858                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
  5859                           ;strcmp@s1 stored from wreg
  5860  17AD  0020               	movlb	0	; select bank0
  5861  17AE  00A4               	movwf	strcmp@s1
  5862  17AF  2FB8               	goto	l2331
  5863  17B0                     l2327:	
  5864  17B0  3001               	movlw	1
  5865  17B1  00A2               	movwf	??_strcmp
  5866  17B2  0822               	movf	??_strcmp,w
  5867  17B3  07A4               	addwf	strcmp@s1,f
  5868  17B4  3001               	movlw	1
  5869  17B5  00A2               	movwf	??_strcmp
  5870  17B6  0822               	movf	??_strcmp,w
  5871  17B7  07A0               	addwf	strcmp@s2,f
  5872  17B8                     l2331:	
  5873  17B8  0824               	movf	strcmp@s1,w
  5874  17B9  0086               	movwf	6
  5875  17BA  3001               	movlw	1	; select bank2/3
  5876  17BB  0087               	movwf	7
  5877  17BC  0820               	movf	strcmp@s2,w
  5878  17BD  0084               	movwf	4
  5879  17BE  3001               	movlw	1	; select bank2/3
  5880  17BF  0085               	movwf	5
  5881  17C0  0300               	decf	0,w
  5882  17C1  3AFF               	xorlw	255
  5883  17C2  0701               	addwf	1,w
  5884  17C3  00A2               	movwf	??_strcmp
  5885  17C4  0822               	movf	??_strcmp,w
  5886  17C5  00A3               	movwf	strcmp@r
  5887  17C6  0823               	movf	strcmp@r,w
  5888  17C7  1D03               	btfss	3,2
  5889  17C8  2FD0               	goto	l2335
  5890  17C9  0824               	movf	strcmp@s1,w
  5891  17CA  0086               	movwf	6
  5892  17CB  3001               	movlw	1	; select bank2/3
  5893  17CC  0087               	movwf	7
  5894  17CD  0801               	movf	1,w
  5895  17CE  1D03               	btfss	3,2
  5896  17CF  2FB0               	goto	l2327
  5897  17D0                     l2335:	
  5898  17D0  0823               	movf	strcmp@r,w
  5899  17D1  00A0               	movwf	?_strcmp
  5900  17D2  01A1               	clrf	?_strcmp+1
  5901  17D3  1BA0               	btfsc	?_strcmp,7
  5902  17D4  03A1               	decf	?_strcmp+1,f
  5903  17D5  0008               	return
  5904  17D6                     __end_of_strcmp:	
  5905                           
  5906                           	psect	text18
  5907  0813                     __ptext18:	
  5908 ;; *************** function _nrf24l01SetRXMode *****************
  5909 ;; Defined at:
  5910 ;;		line 91 in file "nrf24l01.c"
  5911 ;; Parameters:    Size  Location     Type
  5912 ;;  rxMode          1    wreg     unsigned char 
  5913 ;; Auto vars:     Size  Location     Type
  5914 ;;  rxMode          1    4[BANK0 ] unsigned char 
  5915 ;; Return value:  Size  Location     Type
  5916 ;;                  1    wreg      void 
  5917 ;; Registers used:
  5918 ;;		wreg, status,2, status,0, pclath, cstack
  5919 ;; Tracked objects:
  5920 ;;		On entry : 0/0
  5921 ;;		On exit  : 0/0
  5922 ;;		Unchanged: 0/0
  5923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5925 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5926 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5927 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5928 ;;Total ram usage:        2 bytes
  5929 ;; Hardware stack levels used:    1
  5930 ;; Hardware stack levels required when called:   10
  5931 ;; This function calls:
  5932 ;;		_nrf24l01CEHigh
  5933 ;;		_nrf24l01CELow
  5934 ;;		_nrf24l01Send
  5935 ;; This function is called by:
  5936 ;;		_nrf24l01Service
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940                           
  5941                           ;psect for function _nrf24l01SetRXMode
  5942  0813                     _nrf24l01SetRXMode:	
  5943                           
  5944                           ;incstack = 0
  5945                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  5946                           ;nrf24l01SetRXMode@rxMode stored from wreg
  5947  0813  0020               	movlb	0	; select bank0
  5948  0814  00A4               	movwf	nrf24l01SetRXMode@rxMode
  5949                           
  5950                           ;nrf24l01.c: 111: if (status.configRegister.PRIM_RX != rxMode){
  5951  0815  0021               	movlb	1	; select bank1
  5952  0816  0869               	movf	(_status^(0+128)+2),w	;volatile
  5953  0817  3901               	andlw	1
  5954  0818  0020               	movlb	0	; select bank0
  5955  0819  0624               	xorwf	nrf24l01SetRXMode@rxMode,w
  5956  081A  1903               	skipnz
  5957  081B  0008               	return
  5958                           
  5959                           ;nrf24l01.c: 114: nrf24l01CELow();
  5960  081C  3195  2540  3188   	fcall	_nrf24l01CELow
  5961                           
  5962                           ;nrf24l01.c: 118: status.configRegister.PRIM_RX = rxMode;
  5963  081F  0020               	movlb	0	; select bank0
  5964  0820  0C24               	rrf	nrf24l01SetRXMode@rxMode,w
  5965  0821  0021               	movlb	1	; select bank1
  5966  0822  1C03               	skipc
  5967  0823  1069               	bcf	(_status^(0+128)+2),0	;volatile
  5968  0824  1803               	skipnc
  5969  0825  1469               	bsf	(_status^(0+128)+2),0	;volatile
  5970                           
  5971                           ;nrf24l01.c: 119: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  5972  0826  0869               	movf	(_status^(0+128)+2),w	;volatile
  5973  0827  0020               	movlb	0	; select bank0
  5974  0828  00A3               	movwf	??_nrf24l01SetRXMode
  5975  0829  0823               	movf	??_nrf24l01SetRXMode,w
  5976  082A  00A0               	movwf	nrf24l01Send@data
  5977  082B  3020               	movlw	32
  5978  082C  3196  26B2  3188   	fcall	_nrf24l01Send
  5979                           
  5980                           ;nrf24l01.c: 122: _delay((unsigned long)((120)*(32000000/4000000.0)));
  5981  082F  30C0               	movlw	192
  5982  0830                     u4067:	
  5983  0830  3200               	nop2
  5984  0831  0B89               	decfsz	9,f
  5985  0832  2830               	goto	u4067
  5986                           
  5987                           ;nrf24l01.c: 125: if (rxMode){
  5988  0833  0020               	movlb	0	; select bank0
  5989  0834  0824               	movf	nrf24l01SetRXMode@rxMode,w
  5990  0835  1903               	btfsc	3,2
  5991  0836  0008               	return
  5992                           
  5993                           ;nrf24l01.c: 126: nrf24l01CEHigh();
  5994  0837  3195  253D  3188   	fcall	_nrf24l01CEHigh
  5995                           
  5996                           ;nrf24l01.c: 127: _delay((unsigned long)((120)*(32000000/4000000.0)));
  5997  083A  30C0               	movlw	192
  5998  083B                     u4077:	
  5999  083B  3200               	nop2
  6000  083C  0B89               	decfsz	9,f
  6001  083D  283B               	goto	u4077
  6002  083E  0008               	return
  6003  083F                     __end_of_nrf24l01SetRXMode:	
  6004                           
  6005                           	psect	text19
  6006  16B2                     __ptext19:	
  6007 ;; *************** function _nrf24l01Send *****************
  6008 ;; Defined at:
  6009 ;;		line 46 in file "nrf24l01.c"
  6010 ;; Parameters:    Size  Location     Type
  6011 ;;  command         1    wreg     unsigned char 
  6012 ;;  data            1    0[BANK0 ] unsigned char 
  6013 ;; Auto vars:     Size  Location     Type
  6014 ;;  command         1    2[BANK0 ] unsigned char 
  6015 ;; Return value:  Size  Location     Type
  6016 ;;                  1    wreg      unsigned char 
  6017 ;; Registers used:
  6018 ;;		wreg, status,2, status,0, pclath, cstack
  6019 ;; Tracked objects:
  6020 ;;		On entry : 0/0
  6021 ;;		On exit  : 0/0
  6022 ;;		Unchanged: 0/0
  6023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6024 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6025 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6026 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6027 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6028 ;;Total ram usage:        3 bytes
  6029 ;; Hardware stack levels used:    1
  6030 ;; Hardware stack levels required when called:    9
  6031 ;; This function calls:
  6032 ;;		_enableInterrupts
  6033 ;;		_nrf24l01SPIEnd
  6034 ;;		_nrf24l01SPISend
  6035 ;;		_nrf24l01SPIStart
  6036 ;; This function is called by:
  6037 ;;		_loop
  6038 ;;		_nrf24l01SetRXMode
  6039 ;;		_nrf24l01SetRXPipe
  6040 ;;		_nrf24l01Service
  6041 ;;		_nrf24l01InitRegisters
  6042 ;;		_nrf24l01ChangeTXPower
  6043 ;; This function uses a non-reentrant model
  6044 ;;
  6045                           
  6046                           
  6047                           ;psect for function _nrf24l01Send
  6048  16B2                     _nrf24l01Send:	
  6049                           
  6050                           ;incstack = 0
  6051                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  6052                           ;nrf24l01Send@command stored from wreg
  6053  16B2  0020               	movlb	0	; select bank0
  6054  16B3  00A2               	movwf	nrf24l01Send@command
  6055                           
  6056                           ;nrf24l01.c: 49: enableInterrupts(0);
  6057  16B4  3000               	movlw	0
  6058  16B5  3195  2556  3196   	fcall	_enableInterrupts
  6059                           
  6060                           ;nrf24l01.c: 52: nrf24l01SPIStart();
  6061  16B8  3195  255E  3196   	fcall	_nrf24l01SPIStart
  6062                           
  6063                           ;nrf24l01.c: 55: nrf24l01SPISend(command);
  6064  16BB  0020               	movlb	0	; select bank0
  6065  16BC  0822               	movf	nrf24l01Send@command,w
  6066  16BD  3195  256F  3196   	fcall	_nrf24l01SPISend
  6067                           
  6068                           ;nrf24l01.c: 58: data = nrf24l01SPISend(data);
  6069  16C0  0020               	movlb	0	; select bank0
  6070  16C1  0820               	movf	nrf24l01Send@data,w
  6071  16C2  3195  256F  3196   	fcall	_nrf24l01SPISend
  6072  16C5  0020               	movlb	0	; select bank0
  6073  16C6  00A1               	movwf	??_nrf24l01Send
  6074  16C7  0821               	movf	??_nrf24l01Send,w
  6075  16C8  00A0               	movwf	nrf24l01Send@data
  6076                           
  6077                           ;nrf24l01.c: 61: nrf24l01SPIEnd();
  6078  16C9  3195  254F  3196   	fcall	_nrf24l01SPIEnd
  6079                           
  6080                           ;nrf24l01.c: 64: enableInterrupts(1);
  6081  16CC  3001               	movlw	1
  6082  16CD  3195  2556         	fcall	_enableInterrupts
  6083                           
  6084                           ;nrf24l01.c: 66: return data;
  6085  16CF  0020               	movlb	0	; select bank0
  6086  16D0  0820               	movf	nrf24l01Send@data,w
  6087  16D1  0008               	return
  6088  16D2                     __end_of_nrf24l01Send:	
  6089                           
  6090                           	psect	text20
  6091  15CF                     __ptext20:	
  6092 ;; *************** function _memset *****************
  6093 ;; Defined at:
  6094 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6095 ;; Parameters:    Size  Location     Type
  6096 ;;  p1              2    0[BANK0 ] PTR void 
  6097 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6098 ;;  c               2    2[BANK0 ] int 
  6099 ;;  n               2    4[BANK0 ] unsigned int 
  6100 ;; Auto vars:     Size  Location     Type
  6101 ;;  p               2    6[BANK0 ] PTR unsigned char 
  6102 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6103 ;; Return value:  Size  Location     Type
  6104 ;;                  2    0[BANK0 ] PTR void 
  6105 ;; Registers used:
  6106 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6107 ;; Tracked objects:
  6108 ;;		On entry : 0/0
  6109 ;;		On exit  : 0/0
  6110 ;;		Unchanged: 0/0
  6111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6112 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6113 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6115 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6116 ;;Total ram usage:        8 bytes
  6117 ;; Hardware stack levels used:    1
  6118 ;; Hardware stack levels required when called:    7
  6119 ;; This function calls:
  6120 ;;		Nothing
  6121 ;; This function is called by:
  6122 ;;		_sendMessage
  6123 ;;		_nrf24l01Service
  6124 ;; This function uses a non-reentrant model
  6125 ;;
  6126                           
  6127                           
  6128                           ;psect for function _memset
  6129  15CF                     _memset:	
  6130                           
  6131                           ;incstack = 0
  6132                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6133  15CF  0020               	movlb	0	; select bank0
  6134  15D0  0821               	movf	memset@p1+1,w
  6135  15D1  00A7               	movwf	memset@p+1
  6136  15D2  0820               	movf	memset@p1,w
  6137  15D3  00A6               	movwf	memset@p
  6138  15D4                     l2297:	
  6139  15D4  3001               	movlw	1
  6140  15D5  02A4               	subwf	memset@n,f
  6141  15D6  3000               	movlw	0
  6142  15D7  3BA5               	subwfb	memset@n+1,f
  6143  15D8  0A24               	incf	memset@n,w
  6144  15D9  1903               	btfsc	3,2
  6145  15DA  0A25               	incf	memset@n+1,w
  6146  15DB  1903               	btfsc	3,2
  6147  15DC  0008               	return
  6148  15DD  0826               	movf	memset@p,w
  6149  15DE  0086               	movwf	6
  6150  15DF  0827               	movf	memset@p+1,w
  6151  15E0  0087               	movwf	7
  6152  15E1  0822               	movf	memset@c,w
  6153  15E2  0081               	movwf	1
  6154  15E3  3001               	movlw	1
  6155  15E4  07A6               	addwf	memset@p,f
  6156  15E5  3000               	movlw	0
  6157  15E6  3DA7               	addwfc	memset@p+1,f
  6158  15E7  2DD4               	goto	l2297
  6159  15E8                     __end_of_memset:	
  6160                           ;	Return value of _memset is never used
  6161                           
  6162                           
  6163                           	psect	text21
  6164  0E18                     __ptext21:	
  6165 ;; *************** function _ftoa *****************
  6166 ;; Defined at:
  6167 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6168 ;; Parameters:    Size  Location     Type
  6169 ;;  f               3    6[BANK1 ] float 
  6170 ;;  status          1    9[BANK1 ] PTR int 
  6171 ;;		 -> sendMessage@status(2), 
  6172 ;; Auto vars:     Size  Location     Type
  6173 ;;  l               4   14[BANK1 ] unsigned long 
  6174 ;;  rem             4   10[BANK1 ] unsigned long 
  6175 ;;  cp              1   18[BANK1 ] PTR unsigned char 
  6176 ;;		 -> ftoa@buf(17), 
  6177 ;; Return value:  Size  Location     Type
  6178 ;;                  1    wreg      PTR unsigned char 
  6179 ;; Registers used:
  6180 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6181 ;; Tracked objects:
  6182 ;;		On entry : 0/0
  6183 ;;		On exit  : 0/0
  6184 ;;		Unchanged: 0/0
  6185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6186 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6187 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6188 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6189 ;;      Totals:         0       1      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6190 ;;Total ram usage:       14 bytes
  6191 ;; Hardware stack levels used:    1
  6192 ;; Hardware stack levels required when called:   10
  6193 ;; This function calls:
  6194 ;;		___ftge
  6195 ;;		___ftmul
  6196 ;;		___ftneg
  6197 ;;		___ftsub
  6198 ;;		___fttol
  6199 ;;		___lltoft
  6200 ;;		_sprintf
  6201 ;; This function is called by:
  6202 ;;		_sendMessage
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206                           
  6207                           ;psect for function _ftoa
  6208  0E18                     _ftoa:	
  6209                           
  6210                           ;incstack = 0
  6211                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6212  0E18  3055               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6213  0E19  0020               	movlb	0	; select bank0
  6214  0E1A  00EF               	movwf	??_ftoa
  6215  0E1B  086F               	movf	??_ftoa,w
  6216  0E1C  0021               	movlb	1	; select bank1
  6217  0E1D  00B2               	movwf	ftoa@cp^(0+128)
  6218  0E1E  0826               	movf	ftoa@f^(0+128),w
  6219  0E1F  0020               	movlb	0	; select bank0
  6220  0E20  00A0               	movwf	___ftge@ff1
  6221  0E21  0021               	movlb	1	; select bank1
  6222  0E22  0827               	movf	(ftoa@f+1)^(0+128),w
  6223  0E23  0020               	movlb	0	; select bank0
  6224  0E24  00A1               	movwf	___ftge@ff1+1
  6225  0E25  0021               	movlb	1	; select bank1
  6226  0E26  0828               	movf	(ftoa@f+2)^(0+128),w
  6227  0E27  0020               	movlb	0	; select bank0
  6228  0E28  00A2               	movwf	___ftge@ff1+2
  6229  0E29  3000               	movlw	0
  6230  0E2A  00A3               	movwf	___ftge@ff2
  6231  0E2B  3000               	movlw	0
  6232  0E2C  00A4               	movwf	___ftge@ff2+1
  6233  0E2D  3000               	movlw	0
  6234  0E2E  00A5               	movwf	___ftge@ff2+2
  6235  0E2F  3188  20A4  318E   	fcall	___ftge
  6236  0E32  1803               	btfsc	3,0
  6237  0E33  2E5E               	goto	l2873
  6238  0E34  302D               	movlw	45
  6239  0E35  0020               	movlb	0	; select bank0
  6240  0E36  00EF               	movwf	??_ftoa
  6241  0E37  0021               	movlb	1	; select bank1
  6242  0E38  0832               	movf	ftoa@cp^(0+128),w
  6243  0E39  0086               	movwf	6
  6244  0E3A  3001               	movlw	1	; select bank2/3
  6245  0E3B  0087               	movwf	7
  6246  0E3C  0020               	movlb	0	; select bank0
  6247  0E3D  086F               	movf	??_ftoa,w
  6248  0E3E  0081               	movwf	1
  6249  0E3F  3001               	movlw	1
  6250  0E40  00EF               	movwf	??_ftoa
  6251  0E41  086F               	movf	??_ftoa,w
  6252  0E42  0021               	movlb	1	; select bank1
  6253  0E43  07B2               	addwf	ftoa@cp^(0+128),f
  6254  0E44  0826               	movf	ftoa@f^(0+128),w
  6255  0E45  0020               	movlb	0	; select bank0
  6256  0E46  00D7               	movwf	___ftneg@f1
  6257  0E47  0021               	movlb	1	; select bank1
  6258  0E48  0827               	movf	(ftoa@f+1)^(0+128),w
  6259  0E49  0020               	movlb	0	; select bank0
  6260  0E4A  00D8               	movwf	___ftneg@f1+1
  6261  0E4B  0021               	movlb	1	; select bank1
  6262  0E4C  0828               	movf	(ftoa@f+2)^(0+128),w
  6263  0E4D  0020               	movlb	0	; select bank0
  6264  0E4E  00D9               	movwf	___ftneg@f1+2
  6265  0E4F  3195  2566  318E   	fcall	___ftneg
  6266  0E52  0020               	movlb	0	; select bank0
  6267  0E53  0857               	movf	?___ftneg,w
  6268  0E54  0021               	movlb	1	; select bank1
  6269  0E55  00A6               	movwf	ftoa@f^(0+128)
  6270  0E56  0020               	movlb	0	; select bank0
  6271  0E57  0858               	movf	?___ftneg+1,w
  6272  0E58  0021               	movlb	1	; select bank1
  6273  0E59  00A7               	movwf	(ftoa@f+1)^(0+128)
  6274  0E5A  0020               	movlb	0	; select bank0
  6275  0E5B  0859               	movf	?___ftneg+2,w
  6276  0E5C  0021               	movlb	1	; select bank1
  6277  0E5D  00A8               	movwf	(ftoa@f+2)^(0+128)
  6278  0E5E                     l2873:	
  6279  0E5E  0021               	movlb	1	; select bank1
  6280  0E5F  0826               	movf	ftoa@f^(0+128),w
  6281  0E60  0020               	movlb	0	; select bank0
  6282  0E61  00E7               	movwf	___fttol@f1
  6283  0E62  0021               	movlb	1	; select bank1
  6284  0E63  0827               	movf	(ftoa@f+1)^(0+128),w
  6285  0E64  0020               	movlb	0	; select bank0
  6286  0E65  00E8               	movwf	___fttol@f1+1
  6287  0E66  0021               	movlb	1	; select bank1
  6288  0E67  0828               	movf	(ftoa@f+2)^(0+128),w
  6289  0E68  0020               	movlb	0	; select bank0
  6290  0E69  00E9               	movwf	___fttol@f1+2
  6291  0E6A  318C  242A  318E   	fcall	___fttol
  6292  0E6D  0020               	movlb	0	; select bank0
  6293  0E6E  086A               	movf	?___fttol+3,w
  6294  0E6F  0021               	movlb	1	; select bank1
  6295  0E70  00B1               	movwf	(ftoa@l+3)^(0+128)
  6296  0E71  0020               	movlb	0	; select bank0
  6297  0E72  0869               	movf	?___fttol+2,w
  6298  0E73  0021               	movlb	1	; select bank1
  6299  0E74  00B0               	movwf	(ftoa@l+2)^(0+128)
  6300  0E75  0020               	movlb	0	; select bank0
  6301  0E76  0868               	movf	?___fttol+1,w
  6302  0E77  0021               	movlb	1	; select bank1
  6303  0E78  00AF               	movwf	(ftoa@l+1)^(0+128)
  6304  0E79  0020               	movlb	0	; select bank0
  6305  0E7A  0867               	movf	?___fttol,w
  6306  0E7B  0021               	movlb	1	; select bank1
  6307  0E7C  00AE               	movwf	ftoa@l^(0+128)
  6308  0E7D  0831               	movf	(ftoa@l+3)^(0+128),w
  6309  0E7E  0020               	movlb	0	; select bank0
  6310  0E7F  00AB               	movwf	___lltoft@c+3
  6311  0E80  0021               	movlb	1	; select bank1
  6312  0E81  0830               	movf	(ftoa@l+2)^(0+128),w
  6313  0E82  0020               	movlb	0	; select bank0
  6314  0E83  00AA               	movwf	___lltoft@c+2
  6315  0E84  0021               	movlb	1	; select bank1
  6316  0E85  082F               	movf	(ftoa@l+1)^(0+128),w
  6317  0E86  0020               	movlb	0	; select bank0
  6318  0E87  00A9               	movwf	___lltoft@c+1
  6319  0E88  0021               	movlb	1	; select bank1
  6320  0E89  082E               	movf	ftoa@l^(0+128),w
  6321  0E8A  0020               	movlb	0	; select bank0
  6322  0E8B  00A8               	movwf	___lltoft@c
  6323  0E8C  3197  27D6  318E   	fcall	___lltoft
  6324  0E8F  0020               	movlb	0	; select bank0
  6325  0E90  0828               	movf	?___lltoft,w
  6326  0E91  00BB               	movwf	___ftsub@f2
  6327  0E92  0829               	movf	?___lltoft+1,w
  6328  0E93  00BC               	movwf	___ftsub@f2+1
  6329  0E94  082A               	movf	?___lltoft+2,w
  6330  0E95  00BD               	movwf	___ftsub@f2+2
  6331  0E96  0021               	movlb	1	; select bank1
  6332  0E97  0826               	movf	ftoa@f^(0+128),w
  6333  0E98  0020               	movlb	0	; select bank0
  6334  0E99  00BE               	movwf	___ftsub@f1
  6335  0E9A  0021               	movlb	1	; select bank1
  6336  0E9B  0827               	movf	(ftoa@f+1)^(0+128),w
  6337  0E9C  0020               	movlb	0	; select bank0
  6338  0E9D  00BF               	movwf	___ftsub@f1+1
  6339  0E9E  0021               	movlb	1	; select bank1
  6340  0E9F  0828               	movf	(ftoa@f+2)^(0+128),w
  6341  0EA0  0020               	movlb	0	; select bank0
  6342  0EA1  00C0               	movwf	___ftsub@f1+2
  6343  0EA2  3196  2657  318E   	fcall	___ftsub
  6344  0EA5  0020               	movlb	0	; select bank0
  6345  0EA6  083B               	movf	?___ftsub,w
  6346  0EA7  0021               	movlb	1	; select bank1
  6347  0EA8  00A6               	movwf	ftoa@f^(0+128)
  6348  0EA9  0020               	movlb	0	; select bank0
  6349  0EAA  083C               	movf	?___ftsub+1,w
  6350  0EAB  0021               	movlb	1	; select bank1
  6351  0EAC  00A7               	movwf	(ftoa@f+1)^(0+128)
  6352  0EAD  0020               	movlb	0	; select bank0
  6353  0EAE  083D               	movf	?___ftsub+2,w
  6354  0EAF  0021               	movlb	1	; select bank1
  6355  0EB0  00A8               	movwf	(ftoa@f+2)^(0+128)
  6356  0EB1  0826               	movf	ftoa@f^(0+128),w
  6357  0EB2  0020               	movlb	0	; select bank0
  6358  0EB3  00DA               	movwf	___ftmul@f2
  6359  0EB4  0021               	movlb	1	; select bank1
  6360  0EB5  0827               	movf	(ftoa@f+1)^(0+128),w
  6361  0EB6  0020               	movlb	0	; select bank0
  6362  0EB7  00DB               	movwf	___ftmul@f2+1
  6363  0EB8  0021               	movlb	1	; select bank1
  6364  0EB9  0828               	movf	(ftoa@f+2)^(0+128),w
  6365  0EBA  0020               	movlb	0	; select bank0
  6366  0EBB  00DC               	movwf	___ftmul@f2+2
  6367  0EBC  3024               	movlw	36
  6368  0EBD  00D7               	movwf	___ftmul@f1
  6369  0EBE  3074               	movlw	116
  6370  0EBF  00D8               	movwf	___ftmul@f1+1
  6371  0EC0  3049               	movlw	73
  6372  0EC1  00D9               	movwf	___ftmul@f1+2
  6373  0EC2  3187  272F  318E   	fcall	___ftmul
  6374  0EC5  0020               	movlb	0	; select bank0
  6375  0EC6  0857               	movf	?___ftmul,w
  6376  0EC7  00E7               	movwf	___fttol@f1
  6377  0EC8  0858               	movf	?___ftmul+1,w
  6378  0EC9  00E8               	movwf	___fttol@f1+1
  6379  0ECA  0859               	movf	?___ftmul+2,w
  6380  0ECB  00E9               	movwf	___fttol@f1+2
  6381  0ECC  318C  242A  318E   	fcall	___fttol
  6382  0ECF  0020               	movlb	0	; select bank0
  6383  0ED0  086A               	movf	?___fttol+3,w
  6384  0ED1  0021               	movlb	1	; select bank1
  6385  0ED2  00AD               	movwf	(ftoa@rem+3)^(0+128)
  6386  0ED3  0020               	movlb	0	; select bank0
  6387  0ED4  0869               	movf	?___fttol+2,w
  6388  0ED5  0021               	movlb	1	; select bank1
  6389  0ED6  00AC               	movwf	(ftoa@rem+2)^(0+128)
  6390  0ED7  0020               	movlb	0	; select bank0
  6391  0ED8  0868               	movf	?___fttol+1,w
  6392  0ED9  0021               	movlb	1	; select bank1
  6393  0EDA  00AB               	movwf	(ftoa@rem+1)^(0+128)
  6394  0EDB  0020               	movlb	0	; select bank0
  6395  0EDC  0867               	movf	?___fttol,w
  6396  0EDD  0021               	movlb	1	; select bank1
  6397  0EDE  00AA               	movwf	ftoa@rem^(0+128)
  6398  0EDF  3029               	movlw	low (STR_10| (0+32768))
  6399  0EE0  0020               	movlb	0	; select bank0
  6400  0EE1  00B8               	movwf	sprintf@f
  6401  0EE2  3098               	movlw	high (STR_10| (0+32768))
  6402  0EE3  00B9               	movwf	sprintf@f+1
  6403  0EE4  0021               	movlb	1	; select bank1
  6404  0EE5  0831               	movf	(ftoa@l+3)^(0+128),w
  6405  0EE6  0020               	movlb	0	; select bank0
  6406  0EE7  00BD               	movwf	?_sprintf+5
  6407  0EE8  0021               	movlb	1	; select bank1
  6408  0EE9  0830               	movf	(ftoa@l+2)^(0+128),w
  6409  0EEA  0020               	movlb	0	; select bank0
  6410  0EEB  00BC               	movwf	?_sprintf+4
  6411  0EEC  0021               	movlb	1	; select bank1
  6412  0EED  082F               	movf	(ftoa@l+1)^(0+128),w
  6413  0EEE  0020               	movlb	0	; select bank0
  6414  0EEF  00BB               	movwf	?_sprintf+3
  6415  0EF0  0021               	movlb	1	; select bank1
  6416  0EF1  082E               	movf	ftoa@l^(0+128),w
  6417  0EF2  0020               	movlb	0	; select bank0
  6418  0EF3  00BA               	movwf	?_sprintf+2
  6419  0EF4  0021               	movlb	1	; select bank1
  6420  0EF5  082D               	movf	(ftoa@rem+3)^(0+128),w
  6421  0EF6  0020               	movlb	0	; select bank0
  6422  0EF7  00C1               	movwf	?_sprintf+9
  6423  0EF8  0021               	movlb	1	; select bank1
  6424  0EF9  082C               	movf	(ftoa@rem+2)^(0+128),w
  6425  0EFA  0020               	movlb	0	; select bank0
  6426  0EFB  00C0               	movwf	?_sprintf+8
  6427  0EFC  0021               	movlb	1	; select bank1
  6428  0EFD  082B               	movf	(ftoa@rem+1)^(0+128),w
  6429  0EFE  0020               	movlb	0	; select bank0
  6430  0EFF  00BF               	movwf	?_sprintf+7
  6431  0F00  0021               	movlb	1	; select bank1
  6432  0F01  082A               	movf	ftoa@rem^(0+128),w
  6433  0F02  0020               	movlb	0	; select bank0
  6434  0F03  00BE               	movwf	?_sprintf+6
  6435  0F04  0021               	movlb	1	; select bank1
  6436  0F05  0832               	movf	ftoa@cp^(0+128),w
  6437  0F06  3180  2036         	fcall	_sprintf
  6438  0F08  3055               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6439  0F09  0008               	return
  6440  0F0A                     __end_of_ftoa:	
  6441                           
  6442                           	psect	text22
  6443  0036                     __ptext22:	
  6444 ;; *************** function _sprintf *****************
  6445 ;; Defined at:
  6446 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  6447 ;; Parameters:    Size  Location     Type
  6448 ;;  sp              1    wreg     PTR unsigned char 
  6449 ;;		 -> ftoa@buf(17), 
  6450 ;;  f               2   24[BANK0 ] PTR const unsigned char 
  6451 ;;		 -> STR_10(11), 
  6452 ;; Auto vars:     Size  Location     Type
  6453 ;;  sp              1   46[BANK0 ] PTR unsigned char 
  6454 ;;		 -> ftoa@buf(17), 
  6455 ;;  val             4   42[BANK0 ] unsigned long 
  6456 ;;  tmpval          4    0        struct .
  6457 ;;  prec            2   49[BANK0 ] int 
  6458 ;;  width           2   47[BANK0 ] int 
  6459 ;;  cp              2    0        PTR const unsigned char 
  6460 ;;  len             2    0        unsigned int 
  6461 ;;  c               1   51[BANK0 ] unsigned char 
  6462 ;;  ap              1   41[BANK0 ] PTR void [1]
  6463 ;;		 -> ?_sprintf(2), 
  6464 ;;  flag            1   40[BANK0 ] unsigned char 
  6465 ;; Return value:  Size  Location     Type
  6466 ;;                  2   24[BANK0 ] int 
  6467 ;; Registers used:
  6468 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6469 ;; Tracked objects:
  6470 ;;		On entry : 0/0
  6471 ;;		On exit  : 0/0
  6472 ;;		Unchanged: 0/0
  6473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6474 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6475 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6477 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6478 ;;Total ram usage:       28 bytes
  6479 ;; Hardware stack levels used:    1
  6480 ;; Hardware stack levels required when called:    8
  6481 ;; This function calls:
  6482 ;;		___lldiv
  6483 ;;		___llmod
  6484 ;;		___wmul
  6485 ;;		_isdigit
  6486 ;; This function is called by:
  6487 ;;		_ftoa
  6488 ;; This function uses a non-reentrant model
  6489 ;;
  6490                           
  6491                           
  6492                           ;psect for function _sprintf
  6493  0036                     _sprintf:	
  6494                           
  6495                           ;incstack = 0
  6496                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6497                           ;sprintf@sp stored from wreg
  6498  0036  0020               	movlb	0	; select bank0
  6499  0037  00CE               	movwf	sprintf@sp
  6500                           
  6501                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  6502  0038  303A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  6503  0039  00C2               	movwf	??_sprintf
  6504  003A  0842               	movf	??_sprintf,w
  6505  003B  00C9               	movwf	sprintf@ap
  6506  003C                     l2675:	
  6507                           ;doprnt.c: 548: while((c = *f++)) {
  6508                           
  6509  003C  0839               	movf	sprintf@f+1,w
  6510  003D  00C3               	movwf	??_sprintf+1
  6511  003E  0838               	movf	sprintf@f,w
  6512  003F  00C2               	movwf	??_sprintf
  6513  0040  0AB8               	incf	sprintf@f,f
  6514  0041  1903               	skipnz
  6515  0042  0AB9               	incf	sprintf@f+1,f
  6516  0043  0842               	movf	??_sprintf,w
  6517  0044  0084               	movwf	4
  6518  0045  0843               	movf	??_sprintf+1,w
  6519  0046  0085               	movwf	5
  6520  0047  0800               	movf	0,w	;code access
  6521  0048  00C4               	movwf	??_sprintf+2
  6522  0049  0844               	movf	??_sprintf+2,w
  6523  004A  00D3               	movwf	sprintf@c
  6524  004B  0853               	movf	sprintf@c,w
  6525  004C  1903               	btfsc	3,2
  6526  004D  29FD               	goto	l2677
  6527                           
  6528                           ;doprnt.c: 550: if(c != '%')
  6529  004E  3025               	movlw	37
  6530  004F  0653               	xorwf	sprintf@c,w
  6531  0050  1903               	btfsc	3,2
  6532  0051  285F               	goto	l2587
  6533                           
  6534                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  6535  0052  0853               	movf	sprintf@c,w
  6536  0053  00C2               	movwf	??_sprintf
  6537  0054  084E               	movf	sprintf@sp,w
  6538  0055  0086               	movwf	6
  6539  0056  3001               	movlw	1	; select bank2/3
  6540  0057  0087               	movwf	7
  6541  0058  0842               	movf	??_sprintf,w
  6542  0059  0081               	movwf	1
  6543  005A  3001               	movlw	1
  6544  005B  00C2               	movwf	??_sprintf
  6545  005C  0842               	movf	??_sprintf,w
  6546  005D  07CE               	addwf	sprintf@sp,f
  6547                           
  6548                           ;doprnt.c: 554: continue;
  6549  005E  283C               	goto	l2675
  6550  005F                     l2587:	
  6551                           
  6552                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  6553  005F  01CF               	clrf	sprintf@width
  6554  0060  01D0               	clrf	sprintf@width+1
  6555                           
  6556                           ;doprnt.c: 560: flag = 0;
  6557  0061  01C8               	clrf	sprintf@flag
  6558                           
  6559                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  6560  0062  0838               	movf	sprintf@f,w
  6561  0063  0084               	movwf	4
  6562  0064  0839               	movf	sprintf@f+1,w
  6563  0065  0085               	movwf	5
  6564  0066  0800               	movf	0,w	;code access
  6565  0067  3195  257C  3180   	fcall	_isdigit
  6566  006A  1C03               	btfss	3,0
  6567  006B  289D               	goto	l2601
  6568                           
  6569                           ;doprnt.c: 610: width = 0;
  6570  006C  0020               	movlb	0	; select bank0
  6571  006D  01CF               	clrf	sprintf@width
  6572  006E  01D0               	clrf	sprintf@width+1
  6573  006F                     l2593:	
  6574                           ;doprnt.c: 611: do {
  6575                           
  6576                           
  6577                           ;doprnt.c: 612: width *= 10;
  6578  006F  300A               	movlw	10
  6579  0070  0020               	movlb	0	; select bank0
  6580  0071  00A0               	movwf	___wmul@multiplier
  6581  0072  3000               	movlw	0
  6582  0073  00A1               	movwf	___wmul@multiplier+1
  6583  0074  0850               	movf	sprintf@width+1,w
  6584  0075  00A3               	movwf	___wmul@multiplicand+1
  6585  0076  084F               	movf	sprintf@width,w
  6586  0077  00A2               	movwf	___wmul@multiplicand
  6587  0078  3187  27E3  3180   	fcall	___wmul
  6588  007B  0020               	movlb	0	; select bank0
  6589  007C  0821               	movf	?___wmul+1,w
  6590  007D  00D0               	movwf	sprintf@width+1
  6591  007E  0820               	movf	?___wmul,w
  6592  007F  00CF               	movwf	sprintf@width
  6593                           
  6594                           ;doprnt.c: 613: width += *f++ - '0';
  6595  0080  0838               	movf	sprintf@f,w
  6596  0081  0084               	movwf	4
  6597  0082  0839               	movf	sprintf@f+1,w
  6598  0083  0085               	movwf	5
  6599  0084  0800               	movf	0,w	;code access
  6600  0085  3ED0               	addlw	208
  6601  0086  00C2               	movwf	??_sprintf
  6602  0087  30FF               	movlw	255
  6603  0088  1803               	skipnc
  6604  0089  3000               	movlw	0
  6605  008A  00C3               	movwf	??_sprintf+1
  6606  008B  0842               	movf	??_sprintf,w
  6607  008C  07CF               	addwf	sprintf@width,f
  6608  008D  0843               	movf	??_sprintf+1,w
  6609  008E  3DD0               	addwfc	sprintf@width+1,f
  6610  008F  3001               	movlw	1
  6611  0090  07B8               	addwf	sprintf@f,f
  6612  0091  3000               	movlw	0
  6613  0092  3DB9               	addwfc	sprintf@f+1,f
  6614                           
  6615                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  6616  0093  0838               	movf	sprintf@f,w
  6617  0094  0084               	movwf	4
  6618  0095  0839               	movf	sprintf@f+1,w
  6619  0096  0085               	movwf	5
  6620  0097  0800               	movf	0,w	;code access
  6621  0098  3195  257C  3180   	fcall	_isdigit
  6622  009B  1803               	btfsc	3,0
  6623  009C  286F               	goto	l2593
  6624  009D                     l2601:	
  6625                           
  6626                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  6627  009D  0020               	movlb	0	; select bank0
  6628  009E  0838               	movf	sprintf@f,w
  6629  009F  0084               	movwf	4
  6630  00A0  0839               	movf	sprintf@f+1,w
  6631  00A1  0085               	movwf	5
  6632  00A2  0012               	moviw fsr0++
  6633  00A3  3A2E               	xorlw	46
  6634  00A4  1D03               	btfss	3,2
  6635  00A5  28DB               	goto	l2613
  6636                           
  6637                           ;doprnt.c: 625: f++;
  6638  00A6  3001               	movlw	1
  6639  00A7  07B8               	addwf	sprintf@f,f
  6640  00A8  3000               	movlw	0
  6641  00A9  3DB9               	addwfc	sprintf@f+1,f
  6642                           
  6643                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  6644  00AA  01D1               	clrf	sprintf@prec
  6645  00AB  01D2               	clrf	sprintf@prec+1
  6646  00AC                     l2611:	
  6647                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  6648                           
  6649  00AC  0838               	movf	sprintf@f,w
  6650  00AD  0084               	movwf	4
  6651  00AE  0839               	movf	sprintf@f+1,w
  6652  00AF  0085               	movwf	5
  6653  00B0  0800               	movf	0,w	;code access
  6654  00B1  3195  257C  3180   	fcall	_isdigit
  6655  00B4  1C03               	btfss	3,0
  6656  00B5  28E6               	goto	l2619
  6657                           
  6658                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  6659  00B6  0020               	movlb	0	; select bank0
  6660  00B7  0838               	movf	sprintf@f,w
  6661  00B8  0084               	movwf	4
  6662  00B9  0839               	movf	sprintf@f+1,w
  6663  00BA  0085               	movwf	5
  6664  00BB  0800               	movf	0,w	;code access
  6665  00BC  00C2               	movwf	??_sprintf
  6666  00BD  01C3               	clrf	??_sprintf+1
  6667  00BE  0852               	movf	sprintf@prec+1,w
  6668  00BF  00A1               	movwf	___wmul@multiplier+1
  6669  00C0  0851               	movf	sprintf@prec,w
  6670  00C1  00A0               	movwf	___wmul@multiplier
  6671  00C2  300A               	movlw	10
  6672  00C3  00A2               	movwf	___wmul@multiplicand
  6673  00C4  3000               	movlw	0
  6674  00C5  00A3               	movwf	___wmul@multiplicand+1
  6675  00C6  3187  27E3  3180   	fcall	___wmul
  6676  00C9  0020               	movlb	0	; select bank0
  6677  00CA  0842               	movf	??_sprintf,w
  6678  00CB  0720               	addwf	?___wmul,w
  6679  00CC  00C4               	movwf	??_sprintf+2
  6680  00CD  0843               	movf	??_sprintf+1,w
  6681  00CE  3D21               	addwfc	?___wmul+1,w
  6682  00CF  00C5               	movwf	??_sprintf+3
  6683  00D0  0844               	movf	??_sprintf+2,w
  6684  00D1  3ED0               	addlw	208
  6685  00D2  00D1               	movwf	sprintf@prec
  6686  00D3  30FF               	movlw	255
  6687  00D4  3D45               	addwfc	??_sprintf+3,w
  6688  00D5  00D2               	movwf	sprintf@prec+1
  6689  00D6  3001               	movlw	1
  6690  00D7  07B8               	addwf	sprintf@f,f
  6691  00D8  3000               	movlw	0
  6692  00D9  3DB9               	addwfc	sprintf@f+1,f
  6693  00DA  28AC               	goto	l2611
  6694  00DB                     l2613:	
  6695                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  6696                           
  6697                           
  6698                           ;doprnt.c: 645: prec = 0;
  6699  00DB  0020               	movlb	0	; select bank0
  6700  00DC  01D1               	clrf	sprintf@prec
  6701  00DD  01D2               	clrf	sprintf@prec+1
  6702                           
  6703                           ;doprnt.c: 654: switch(c = *f++) {
  6704                           
  6705                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  6706  00DE  28E6               	goto	l2619
  6707  00DF                     l423:	
  6708                           ;doprnt.c: 660: case 'l':
  6709                           
  6710                           ;doprnt.c: 657: goto alldone;
  6711                           
  6712                           ;doprnt.c: 656: case 0:
  6713                           
  6714                           
  6715                           ;doprnt.c: 662: flag |= 0x10;
  6716  00DF  1648               	bsf	sprintf@flag,4
  6717                           
  6718                           ;doprnt.c: 663: goto loop;
  6719  00E0  28E6               	goto	l2619
  6720  00E1                     l2615:	
  6721                           ;doprnt.c: 836: case 'u':
  6722                           
  6723                           ;doprnt.c: 832: continue;
  6724                           
  6725                           ;doprnt.c: 821: default:
  6726                           
  6727                           
  6728                           ;doprnt.c: 837: flag |= 0xC0;
  6729  00E1  30C0               	movlw	192
  6730  00E2  00C2               	movwf	??_sprintf
  6731  00E3  0842               	movf	??_sprintf,w
  6732  00E4  04C8               	iorwf	sprintf@flag,f
  6733                           
  6734                           ;doprnt.c: 841: }
  6735                           
  6736                           ;doprnt.c: 838: break;
  6737  00E5  28FE               	goto	l426
  6738  00E6                     l2619:	
  6739  00E6  0020               	movlb	0	; select bank0
  6740  00E7  0839               	movf	sprintf@f+1,w
  6741  00E8  00C3               	movwf	??_sprintf+1
  6742  00E9  0838               	movf	sprintf@f,w
  6743  00EA  00C2               	movwf	??_sprintf
  6744  00EB  0AB8               	incf	sprintf@f,f
  6745  00EC  1903               	skipnz
  6746  00ED  0AB9               	incf	sprintf@f+1,f
  6747  00EE  0842               	movf	??_sprintf,w
  6748  00EF  0084               	movwf	4
  6749  00F0  0843               	movf	??_sprintf+1,w
  6750  00F1  0085               	movwf	5
  6751  00F2  0800               	movf	0,w	;code access
  6752  00F3  00D3               	movwf	sprintf@c
  6753                           
  6754                           ; Switch size 1, requested type "space"
  6755                           ; Number of cases is 3, Range of values is 0 to 117
  6756                           ; switch strategies available:
  6757                           ; Name         Instructions Cycles
  6758                           ; simple_byte           10     6 (average)
  6759                           ; direct_byte          242     6 (fixed)
  6760                           ; jumptable            260     6 (fixed)
  6761                           ;	Chosen strategy is simple_byte
  6762  00F4  3A00               	xorlw	0	; case 0
  6763  00F5  1903               	skipnz
  6764  00F6  29FD               	goto	l2677
  6765  00F7  3A6C               	xorlw	108	; case 108
  6766  00F8  1903               	skipnz
  6767  00F9  28DF               	goto	l423
  6768  00FA  3A19               	xorlw	25	; case 117
  6769  00FB  1903               	skipnz
  6770  00FC  28E1               	goto	l2615
  6771  00FD  283C               	goto	l2675
  6772  00FE                     l426:	
  6773                           
  6774                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  6775  00FE  1E48               	btfss	sprintf@flag,4
  6776  00FF  290D               	goto	l2625
  6777                           
  6778                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  6779  0100  0849               	movf	sprintf@ap,w
  6780  0101  0086               	movwf	6
  6781  0102  0187               	clrf	7
  6782  0103  3F40               	moviw [0]fsr1
  6783  0104  00CA               	movwf	sprintf@val
  6784  0105  3F41               	moviw [1]fsr1
  6785  0106  00CB               	movwf	sprintf@val+1
  6786  0107  3F42               	moviw [2]fsr1
  6787  0108  00CC               	movwf	sprintf@val+2
  6788  0109  3F43               	moviw [3]fsr1
  6789  010A  00CD               	movwf	sprintf@val+3
  6790  010B  3004               	movlw	4
  6791  010C  291B               	goto	L1
  6792  010D                     l2625:	
  6793                           
  6794                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  6795  010D  0849               	movf	sprintf@ap,w
  6796  010E  0086               	movwf	6
  6797  010F  0187               	clrf	7
  6798  0110  3F40               	moviw [0]fsr1
  6799  0111  00C2               	movwf	??_sprintf
  6800  0112  3F41               	moviw [1]fsr1
  6801  0113  00C3               	movwf	??_sprintf+1
  6802  0114  0842               	movf	??_sprintf,w
  6803  0115  00CA               	movwf	sprintf@val
  6804  0116  0843               	movf	??_sprintf+1,w
  6805  0117  00CB               	movwf	sprintf@val+1
  6806  0118  01CC               	clrf	sprintf@val+2
  6807  0119  01CD               	clrf	sprintf@val+3
  6808  011A  3002               	movlw	2
  6809  011B                     L1:	
  6810  011B  00C2               	movwf	??_sprintf
  6811  011C  0842               	movf	??_sprintf,w
  6812  011D  07C9               	addwf	sprintf@ap,f
  6813                           
  6814                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  6815  011E  0851               	movf	sprintf@prec,w
  6816  011F  0452               	iorwf	sprintf@prec+1,w
  6817  0120  1D03               	btfss	3,2
  6818  0121  292C               	goto	l2635
  6819  0122  084D               	movf	sprintf@val+3,w
  6820  0123  044C               	iorwf	sprintf@val+2,w
  6821  0124  044B               	iorwf	sprintf@val+1,w
  6822  0125  044A               	iorwf	sprintf@val,w
  6823  0126  1D03               	skipz
  6824  0127  292C               	goto	l2635
  6825                           
  6826                           ;doprnt.c: 1310: prec++;
  6827  0128  3001               	movlw	1
  6828  0129  07D1               	addwf	sprintf@prec,f
  6829  012A  3000               	movlw	0
  6830  012B  3DD2               	addwfc	sprintf@prec+1,f
  6831  012C                     l2635:	
  6832                           
  6833                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6834  012C  01D3               	clrf	sprintf@c
  6835  012D  0AD3               	incf	sprintf@c,f
  6836  012E  300A               	movlw	10
  6837  012F  0653               	xorwf	sprintf@c,w
  6838  0130  1903               	btfsc	3,2
  6839  0131  295F               	goto	l2647
  6840  0132                     l2641:	
  6841                           
  6842                           ;doprnt.c: 1325: if(val < dpowers[c])
  6843  0132  0853               	movf	sprintf@c,w
  6844  0133  00C2               	movwf	??_sprintf
  6845  0134  01C3               	clrf	??_sprintf+1
  6846  0135  35C2               	lslf	??_sprintf,f
  6847  0136  0DC3               	rlf	??_sprintf+1,f
  6848  0137  35C2               	lslf	??_sprintf,f
  6849  0138  0DC3               	rlf	??_sprintf+1,f
  6850  0139  3000               	movlw	low (_dpowers| (0+32768))
  6851  013A  0742               	addwf	??_sprintf,w
  6852  013B  0084               	movwf	4
  6853  013C  3098               	movlw	high (_dpowers| (0+32768))
  6854  013D  3D43               	addwfc	??_sprintf+1,w
  6855  013E  0085               	movwf	5
  6856  013F  3F00               	moviw [0]fsr0
  6857  0140  00C4               	movwf	??_sprintf+2
  6858  0141  3F01               	moviw [1]fsr0
  6859  0142  00C5               	movwf	??_sprintf+3
  6860  0143  3F02               	moviw [2]fsr0
  6861  0144  00C6               	movwf	??_sprintf+4
  6862  0145  3F03               	moviw [3]fsr0
  6863  0146  00C7               	movwf	??_sprintf+5
  6864  0147  0847               	movf	??_sprintf+5,w
  6865  0148  024D               	subwf	sprintf@val+3,w
  6866  0149  1D03               	skipz
  6867  014A  2955               	goto	u2675
  6868  014B  0846               	movf	??_sprintf+4,w
  6869  014C  024C               	subwf	sprintf@val+2,w
  6870  014D  1D03               	skipz
  6871  014E  2955               	goto	u2675
  6872  014F  0845               	movf	??_sprintf+3,w
  6873  0150  024B               	subwf	sprintf@val+1,w
  6874  0151  1D03               	skipz
  6875  0152  2955               	goto	u2675
  6876  0153  0844               	movf	??_sprintf+2,w
  6877  0154  024A               	subwf	sprintf@val,w
  6878  0155                     u2675:	
  6879  0155  1C03               	btfss	3,0
  6880  0156  295F               	goto	l2647
  6881                           
  6882                           ;doprnt.c: 1326: break;
  6883  0157  3001               	movlw	1
  6884  0158  00C2               	movwf	??_sprintf
  6885  0159  0842               	movf	??_sprintf,w
  6886  015A  07D3               	addwf	sprintf@c,f
  6887  015B  300A               	movlw	10
  6888  015C  0653               	xorwf	sprintf@c,w
  6889  015D  1D03               	btfss	3,2
  6890  015E  2932               	goto	l2641
  6891  015F                     l2647:	
  6892                           
  6893                           ;doprnt.c: 1358: if(c < prec)
  6894  015F  0852               	movf	sprintf@prec+1,w
  6895  0160  3A80               	xorlw	128
  6896  0161  3C80               	sublw	128
  6897  0162  1D03               	skipz
  6898  0163  2966               	goto	u2695
  6899  0164  0851               	movf	sprintf@prec,w
  6900  0165  0253               	subwf	sprintf@c,w
  6901  0166                     u2695:	
  6902  0166  1803               	skipnc
  6903  0167  296E               	goto	l2651
  6904                           
  6905                           ;doprnt.c: 1359: c = prec;
  6906  0168  0020               	movlb	0	; select bank0
  6907  0169  0851               	movf	sprintf@prec,w
  6908  016A  00C2               	movwf	??_sprintf
  6909  016B  0842               	movf	??_sprintf,w
  6910  016C  00D3               	movwf	sprintf@c
  6911  016D  2982               	goto	l434
  6912  016E                     l2651:	
  6913                           
  6914                           ;doprnt.c: 1360: else if(prec < c)
  6915  016E  0020               	movlb	0	; select bank0
  6916  016F  0852               	movf	sprintf@prec+1,w
  6917  0170  3A80               	xorlw	128
  6918  0171  00C2               	movwf	??_sprintf
  6919  0172  3080               	movlw	128
  6920  0173  0242               	subwf	??_sprintf,w
  6921  0174  1D03               	skipz
  6922  0175  2978               	goto	u2705
  6923  0176  0853               	movf	sprintf@c,w
  6924  0177  0251               	subwf	sprintf@prec,w
  6925  0178                     u2705:	
  6926  0178  1803               	skipnc
  6927  0179  2982               	goto	l434
  6928                           
  6929                           ;doprnt.c: 1361: prec = c;
  6930  017A  0020               	movlb	0	; select bank0
  6931  017B  0853               	movf	sprintf@c,w
  6932  017C  00C2               	movwf	??_sprintf
  6933  017D  01C3               	clrf	??_sprintf+1
  6934  017E  0842               	movf	??_sprintf,w
  6935  017F  00D1               	movwf	sprintf@prec
  6936  0180  0843               	movf	??_sprintf+1,w
  6937  0181  00D2               	movwf	sprintf@prec+1
  6938  0182                     l434:	
  6939                           
  6940                           ;doprnt.c: 1400: if(width > c)
  6941  0182  0020               	movlb	0	; select bank0
  6942  0183  0850               	movf	sprintf@width+1,w
  6943  0184  3A80               	xorlw	128
  6944  0185  3C80               	sublw	128
  6945  0186  1D03               	skipz
  6946  0187  298A               	goto	u2715
  6947  0188  084F               	movf	sprintf@width,w
  6948  0189  0253               	subwf	sprintf@c,w
  6949  018A                     u2715:	
  6950  018A  1803               	skipnc
  6951  018B  2995               	goto	l2657
  6952                           
  6953                           ;doprnt.c: 1401: width -= c;
  6954  018C  0020               	movlb	0	; select bank0
  6955  018D  0853               	movf	sprintf@c,w
  6956  018E  00C2               	movwf	??_sprintf
  6957  018F  01C3               	clrf	??_sprintf+1
  6958  0190  0842               	movf	??_sprintf,w
  6959  0191  02CF               	subwf	sprintf@width,f
  6960  0192  0843               	movf	??_sprintf+1,w
  6961  0193  3BD0               	subwfb	sprintf@width+1,f
  6962  0194  2998               	goto	l2659
  6963  0195                     l2657:	
  6964                           
  6965                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  6966  0195  0020               	movlb	0	; select bank0
  6967  0196  01CF               	clrf	sprintf@width
  6968  0197  01D0               	clrf	sprintf@width+1
  6969  0198                     l2659:	
  6970                           
  6971                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  6972  0198  084F               	movf	sprintf@width,w
  6973  0199  0450               	iorwf	sprintf@width+1,w
  6974  019A  1903               	btfsc	3,2
  6975  019B  29F2               	goto	l2673
  6976                           
  6977                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  6978                           
  6979                           ;doprnt.c: 1448: do
  6980  019C  3020               	movlw	32
  6981  019D  00C2               	movwf	??_sprintf
  6982  019E  084E               	movf	sprintf@sp,w
  6983  019F  0086               	movwf	6
  6984  01A0  3001               	movlw	1	; select bank2/3
  6985  01A1  0087               	movwf	7
  6986  01A2  0842               	movf	??_sprintf,w
  6987  01A3  0081               	movwf	1
  6988  01A4  3001               	movlw	1
  6989  01A5  00C2               	movwf	??_sprintf
  6990  01A6  0842               	movf	??_sprintf,w
  6991  01A7  07CE               	addwf	sprintf@sp,f
  6992                           
  6993                           ;doprnt.c: 1450: while(--width);
  6994  01A8  30FF               	movlw	255
  6995  01A9  07CF               	addwf	sprintf@width,f
  6996  01AA  30FF               	movlw	255
  6997  01AB  3DD0               	addwfc	sprintf@width+1,f
  6998  01AC  2998               	goto	l2659
  6999  01AD                     l2667:	
  7000                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  7001                           
  7002                           
  7003                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  7004  01AD  3000               	movlw	0
  7005  01AE  00B1               	movwf	___llmod@divisor+3
  7006  01AF  3000               	movlw	0
  7007  01B0  00B0               	movwf	___llmod@divisor+2
  7008  01B1  3000               	movlw	0
  7009  01B2  00AF               	movwf	___llmod@divisor+1
  7010  01B3  300A               	movlw	10
  7011  01B4  00AE               	movwf	___llmod@divisor
  7012  01B5  0852               	movf	sprintf@prec+1,w
  7013  01B6  0085               	movwf	5
  7014  01B7  0851               	movf	sprintf@prec,w
  7015  01B8  0084               	movwf	4
  7016  01B9  3584               	lslf	4,f
  7017  01BA  0D85               	rlf	5,f
  7018  01BB  3584               	lslf	4,f
  7019  01BC  0D85               	rlf	5,f
  7020  01BD  3000               	movlw	low (_dpowers| (0+32768))
  7021  01BE  0784               	addwf	4,f
  7022  01BF  3098               	movlw	high (_dpowers| (0+32768))
  7023  01C0  3D85               	addwfc	5,f
  7024  01C1  3F00               	moviw [0]fsr0
  7025  01C2  00A0               	movwf	___lldiv@divisor
  7026  01C3  3F01               	moviw [1]fsr0
  7027  01C4  00A1               	movwf	___lldiv@divisor+1
  7028  01C5  3F02               	moviw [2]fsr0
  7029  01C6  00A2               	movwf	___lldiv@divisor+2
  7030  01C7  3F03               	moviw [3]fsr0
  7031  01C8  00A3               	movwf	___lldiv@divisor+3
  7032  01C9  084D               	movf	sprintf@val+3,w
  7033  01CA  00A7               	movwf	___lldiv@dividend+3
  7034  01CB  084C               	movf	sprintf@val+2,w
  7035  01CC  00A6               	movwf	___lldiv@dividend+2
  7036  01CD  084B               	movf	sprintf@val+1,w
  7037  01CE  00A5               	movwf	___lldiv@dividend+1
  7038  01CF  084A               	movf	sprintf@val,w
  7039  01D0  00A4               	movwf	___lldiv@dividend
  7040  01D1  3189  21F2  3180   	fcall	___lldiv
  7041  01D4  0020               	movlb	0	; select bank0
  7042  01D5  0823               	movf	?___lldiv+3,w
  7043  01D6  00B5               	movwf	___llmod@dividend+3
  7044  01D7  0822               	movf	?___lldiv+2,w
  7045  01D8  00B4               	movwf	___llmod@dividend+2
  7046  01D9  0821               	movf	?___lldiv+1,w
  7047  01DA  00B3               	movwf	___llmod@dividend+1
  7048  01DB  0820               	movf	?___lldiv,w
  7049  01DC  00B2               	movwf	___llmod@dividend
  7050  01DD  3188  20E0  3180   	fcall	___llmod
  7051  01E0  0020               	movlb	0	; select bank0
  7052  01E1  082E               	movf	?___llmod,w
  7053  01E2  3E30               	addlw	48
  7054  01E3  00C2               	movwf	??_sprintf
  7055  01E4  0842               	movf	??_sprintf,w
  7056  01E5  00D3               	movwf	sprintf@c
  7057                           
  7058                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7059  01E6  0853               	movf	sprintf@c,w
  7060  01E7  00C2               	movwf	??_sprintf
  7061  01E8  084E               	movf	sprintf@sp,w
  7062  01E9  0086               	movwf	6
  7063  01EA  3001               	movlw	1	; select bank2/3
  7064  01EB  0087               	movwf	7
  7065  01EC  0842               	movf	??_sprintf,w
  7066  01ED  0081               	movwf	1
  7067  01EE  3001               	movlw	1
  7068  01EF  00C2               	movwf	??_sprintf
  7069  01F0  0842               	movf	??_sprintf,w
  7070  01F1  07CE               	addwf	sprintf@sp,f
  7071  01F2                     l2673:	
  7072  01F2  30FF               	movlw	255
  7073  01F3  07D1               	addwf	sprintf@prec,f
  7074  01F4  30FF               	movlw	255
  7075  01F5  3DD2               	addwfc	sprintf@prec+1,f
  7076  01F6  0A51               	incf	sprintf@prec,w
  7077  01F7  1D03               	skipz
  7078  01F8  29AD               	goto	l2667
  7079  01F9  0A52               	incf	sprintf@prec+1,w
  7080  01FA  1903               	btfsc	3,2
  7081  01FB  283C               	goto	l2675
  7082  01FC  29AD               	goto	l2667
  7083  01FD                     l2677:	
  7084                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7085                           
  7086                           
  7087                           ;doprnt.c: 1557: *sp = 0;
  7088  01FD  084E               	movf	sprintf@sp,w
  7089  01FE  0086               	movwf	6
  7090  01FF  3001               	movlw	1	; select bank2/3
  7091  0200  0087               	movwf	7
  7092  0201  0181               	clrf	1
  7093  0202  0008               	return
  7094  0203                     __end_of_sprintf:	
  7095                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7096                           
  7097                           
  7098                           	psect	text23
  7099  157C                     __ptext23:	
  7100 ;; *************** function _isdigit *****************
  7101 ;; Defined at:
  7102 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7103 ;; Parameters:    Size  Location     Type
  7104 ;;  c               1    wreg     unsigned char 
  7105 ;; Auto vars:     Size  Location     Type
  7106 ;;  c               1    1[BANK0 ] unsigned char 
  7107 ;; Return value:  Size  Location     Type
  7108 ;;		None               void
  7109 ;; Registers used:
  7110 ;;		wreg, status,2, status,0
  7111 ;; Tracked objects:
  7112 ;;		On entry : 0/0
  7113 ;;		On exit  : 0/0
  7114 ;;		Unchanged: 0/0
  7115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7117 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7119 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7120 ;;Total ram usage:        2 bytes
  7121 ;; Hardware stack levels used:    1
  7122 ;; Hardware stack levels required when called:    7
  7123 ;; This function calls:
  7124 ;;		Nothing
  7125 ;; This function is called by:
  7126 ;;		_sprintf
  7127 ;; This function uses a non-reentrant model
  7128 ;;
  7129                           
  7130                           
  7131                           ;psect for function _isdigit
  7132  157C                     _isdigit:	
  7133                           
  7134                           ;incstack = 0
  7135                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7136                           ;isdigit@c stored from wreg
  7137  157C  0020               	movlb	0	; select bank0
  7138  157D  00A1               	movwf	isdigit@c
  7139  157E  01A0               	clrf	_isdigit$1708
  7140  157F  303A               	movlw	58
  7141  1580  0221               	subwf	isdigit@c,w
  7142  1581  1803               	skipnc
  7143  1582  2D89               	goto	l2347
  7144  1583  3030               	movlw	48
  7145  1584  0221               	subwf	isdigit@c,w
  7146  1585  1C03               	skipc
  7147  1586  2D89               	goto	l2347
  7148  1587  01A0               	clrf	_isdigit$1708
  7149  1588  0AA0               	incf	_isdigit$1708,f
  7150  1589                     l2347:	
  7151  1589  0C20               	rrf	_isdigit$1708,w
  7152  158A  0008               	return
  7153  158B                     __end_of_isdigit:	
  7154                           
  7155                           	psect	text24
  7156  07E3                     __ptext24:	
  7157 ;; *************** function ___wmul *****************
  7158 ;; Defined at:
  7159 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7160 ;; Parameters:    Size  Location     Type
  7161 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7162 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7163 ;; Auto vars:     Size  Location     Type
  7164 ;;  product         2    4[BANK0 ] unsigned int 
  7165 ;; Return value:  Size  Location     Type
  7166 ;;                  2    0[BANK0 ] unsigned int 
  7167 ;; Registers used:
  7168 ;;		wreg, status,2, status,0
  7169 ;; Tracked objects:
  7170 ;;		On entry : 0/0
  7171 ;;		On exit  : 0/0
  7172 ;;		Unchanged: 0/0
  7173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7174 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7175 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7177 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7178 ;;Total ram usage:        6 bytes
  7179 ;; Hardware stack levels used:    1
  7180 ;; Hardware stack levels required when called:    7
  7181 ;; This function calls:
  7182 ;;		Nothing
  7183 ;; This function is called by:
  7184 ;;		_sprintf
  7185 ;; This function uses a non-reentrant model
  7186 ;;
  7187                           
  7188                           
  7189                           ;psect for function ___wmul
  7190  07E3                     ___wmul:	
  7191                           
  7192                           ;incstack = 0
  7193                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7194  07E3  0020               	movlb	0	; select bank0
  7195  07E4  01A4               	clrf	___wmul@product
  7196  07E5  01A5               	clrf	___wmul@product+1
  7197  07E6                     l2353:	
  7198  07E6  1C20               	btfss	___wmul@multiplier,0
  7199  07E7  2FEC               	goto	l449
  7200  07E8  0822               	movf	___wmul@multiplicand,w
  7201  07E9  07A4               	addwf	___wmul@product,f
  7202  07EA  0823               	movf	___wmul@multiplicand+1,w
  7203  07EB  3DA5               	addwfc	___wmul@product+1,f
  7204  07EC                     l449:	
  7205  07EC  3001               	movlw	1
  7206  07ED                     u2055:	
  7207  07ED  35A2               	lslf	___wmul@multiplicand,f
  7208  07EE  0DA3               	rlf	___wmul@multiplicand+1,f
  7209  07EF  0B89               	decfsz	9,f
  7210  07F0  2FED               	goto	u2055
  7211  07F1  3001               	movlw	1
  7212  07F2                     u2065:	
  7213  07F2  36A1               	lsrf	___wmul@multiplier+1,f
  7214  07F3  0CA0               	rrf	___wmul@multiplier,f
  7215  07F4  0B89               	decfsz	9,f
  7216  07F5  2FF2               	goto	u2065
  7217  07F6  0820               	movf	___wmul@multiplier,w
  7218  07F7  0421               	iorwf	___wmul@multiplier+1,w
  7219  07F8  1D03               	btfss	3,2
  7220  07F9  2FE6               	goto	l2353
  7221  07FA  0825               	movf	___wmul@product+1,w
  7222  07FB  00A1               	movwf	?___wmul+1
  7223  07FC  0824               	movf	___wmul@product,w
  7224  07FD  00A0               	movwf	?___wmul
  7225  07FE  0008               	return
  7226  07FF                     __end_of___wmul:	
  7227                           
  7228                           	psect	text25
  7229  08E0                     __ptext25:	
  7230 ;; *************** function ___llmod *****************
  7231 ;; Defined at:
  7232 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  7233 ;; Parameters:    Size  Location     Type
  7234 ;;  divisor         4   14[BANK0 ] unsigned long 
  7235 ;;  dividend        4   18[BANK0 ] unsigned long 
  7236 ;; Auto vars:     Size  Location     Type
  7237 ;;  counter         1   23[BANK0 ] unsigned char 
  7238 ;; Return value:  Size  Location     Type
  7239 ;;                  4   14[BANK0 ] unsigned long 
  7240 ;; Registers used:
  7241 ;;		wreg, status,2, status,0
  7242 ;; Tracked objects:
  7243 ;;		On entry : 0/0
  7244 ;;		On exit  : 0/0
  7245 ;;		Unchanged: 0/0
  7246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7247 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7248 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7249 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7250 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7251 ;;Total ram usage:       10 bytes
  7252 ;; Hardware stack levels used:    1
  7253 ;; Hardware stack levels required when called:    7
  7254 ;; This function calls:
  7255 ;;		Nothing
  7256 ;; This function is called by:
  7257 ;;		_sprintf
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261                           
  7262                           ;psect for function ___llmod
  7263  08E0                     ___llmod:	
  7264                           
  7265                           ;incstack = 0
  7266                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  7267  08E0  0020               	movlb	0	; select bank0
  7268  08E1  0831               	movf	___llmod@divisor+3,w
  7269  08E2  0430               	iorwf	___llmod@divisor+2,w
  7270  08E3  042F               	iorwf	___llmod@divisor+1,w
  7271  08E4  042E               	iorwf	___llmod@divisor,w
  7272  08E5  1903               	skipnz
  7273  08E6  291A               	goto	l2475
  7274  08E7  01B7               	clrf	___llmod@counter
  7275  08E8  0AB7               	incf	___llmod@counter,f
  7276  08E9                     l2465:	
  7277  08E9  1BB1               	btfsc	___llmod@divisor+3,7
  7278  08EA  28F7               	goto	l2467
  7279  08EB  3001               	movlw	1
  7280  08EC                     u2395:	
  7281  08EC  35AE               	lslf	___llmod@divisor,f
  7282  08ED  0DAF               	rlf	___llmod@divisor+1,f
  7283  08EE  0DB0               	rlf	___llmod@divisor+2,f
  7284  08EF  0DB1               	rlf	___llmod@divisor+3,f
  7285  08F0  0B89               	decfsz	9,f
  7286  08F1  28EC               	goto	u2395
  7287  08F2  3001               	movlw	1
  7288  08F3  00B6               	movwf	??___llmod
  7289  08F4  0836               	movf	??___llmod,w
  7290  08F5  07B7               	addwf	___llmod@counter,f
  7291  08F6  28E9               	goto	l2465
  7292  08F7                     l2467:	
  7293  08F7  0831               	movf	___llmod@divisor+3,w
  7294  08F8  0235               	subwf	___llmod@dividend+3,w
  7295  08F9  1D03               	skipz
  7296  08FA  2905               	goto	u2415
  7297  08FB  0830               	movf	___llmod@divisor+2,w
  7298  08FC  0234               	subwf	___llmod@dividend+2,w
  7299  08FD  1D03               	skipz
  7300  08FE  2905               	goto	u2415
  7301  08FF  082F               	movf	___llmod@divisor+1,w
  7302  0900  0233               	subwf	___llmod@dividend+1,w
  7303  0901  1D03               	skipz
  7304  0902  2905               	goto	u2415
  7305  0903  082E               	movf	___llmod@divisor,w
  7306  0904  0232               	subwf	___llmod@dividend,w
  7307  0905                     u2415:	
  7308  0905  1C03               	skipc
  7309  0906  290F               	goto	l2471
  7310  0907  082E               	movf	___llmod@divisor,w
  7311  0908  02B2               	subwf	___llmod@dividend,f
  7312  0909  082F               	movf	___llmod@divisor+1,w
  7313  090A  3BB3               	subwfb	___llmod@dividend+1,f
  7314  090B  0830               	movf	___llmod@divisor+2,w
  7315  090C  3BB4               	subwfb	___llmod@dividend+2,f
  7316  090D  0831               	movf	___llmod@divisor+3,w
  7317  090E  3BB5               	subwfb	___llmod@dividend+3,f
  7318  090F                     l2471:	
  7319  090F  3001               	movlw	1
  7320  0910                     u2425:	
  7321  0910  36B1               	lsrf	___llmod@divisor+3,f
  7322  0911  0CB0               	rrf	___llmod@divisor+2,f
  7323  0912  0CAF               	rrf	___llmod@divisor+1,f
  7324  0913  0CAE               	rrf	___llmod@divisor,f
  7325  0914  0B89               	decfsz	9,f
  7326  0915  2910               	goto	u2425
  7327  0916  3001               	movlw	1
  7328  0917  02B7               	subwf	___llmod@counter,f
  7329  0918  1D03               	btfss	3,2
  7330  0919  28F7               	goto	l2467
  7331  091A                     l2475:	
  7332  091A  0835               	movf	___llmod@dividend+3,w
  7333  091B  00B1               	movwf	?___llmod+3
  7334  091C  0834               	movf	___llmod@dividend+2,w
  7335  091D  00B0               	movwf	?___llmod+2
  7336  091E  0833               	movf	___llmod@dividend+1,w
  7337  091F  00AF               	movwf	?___llmod+1
  7338  0920  0832               	movf	___llmod@dividend,w
  7339  0921  00AE               	movwf	?___llmod
  7340  0922  0008               	return
  7341  0923                     __end_of___llmod:	
  7342                           
  7343                           	psect	text26
  7344  09F2                     __ptext26:	
  7345 ;; *************** function ___lldiv *****************
  7346 ;; Defined at:
  7347 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  7348 ;; Parameters:    Size  Location     Type
  7349 ;;  divisor         4    0[BANK0 ] unsigned long 
  7350 ;;  dividend        4    4[BANK0 ] unsigned long 
  7351 ;; Auto vars:     Size  Location     Type
  7352 ;;  quotient        4    9[BANK0 ] unsigned long 
  7353 ;;  counter         1   13[BANK0 ] unsigned char 
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  4    0[BANK0 ] unsigned long 
  7356 ;; Registers used:
  7357 ;;		wreg, status,2, status,0
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7363 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7364 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7365 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7366 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7367 ;;Total ram usage:       14 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; Hardware stack levels required when called:    7
  7370 ;; This function calls:
  7371 ;;		Nothing
  7372 ;; This function is called by:
  7373 ;;		_sprintf
  7374 ;; This function uses a non-reentrant model
  7375 ;;
  7376                           
  7377                           
  7378                           ;psect for function ___lldiv
  7379  09F2                     ___lldiv:	
  7380                           
  7381                           ;incstack = 0
  7382                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7383  09F2  3000               	movlw	0
  7384  09F3  0020               	movlb	0	; select bank0
  7385  09F4  00AC               	movwf	___lldiv@quotient+3
  7386  09F5  3000               	movlw	0
  7387  09F6  00AB               	movwf	___lldiv@quotient+2
  7388  09F7  3000               	movlw	0
  7389  09F8  00AA               	movwf	___lldiv@quotient+1
  7390  09F9  3000               	movlw	0
  7391  09FA  00A9               	movwf	___lldiv@quotient
  7392  09FB  0823               	movf	___lldiv@divisor+3,w
  7393  09FC  0422               	iorwf	___lldiv@divisor+2,w
  7394  09FD  0421               	iorwf	___lldiv@divisor+1,w
  7395  09FE  0420               	iorwf	___lldiv@divisor,w
  7396  09FF  1903               	skipnz
  7397  0A00  2A3C               	goto	l2385
  7398  0A01  01AD               	clrf	___lldiv@counter
  7399  0A02  0AAD               	incf	___lldiv@counter,f
  7400  0A03                     l2371:	
  7401  0A03  1BA3               	btfsc	___lldiv@divisor+3,7
  7402  0A04  2A11               	goto	l2373
  7403  0A05  3001               	movlw	1
  7404  0A06                     u2095:	
  7405  0A06  35A0               	lslf	___lldiv@divisor,f
  7406  0A07  0DA1               	rlf	___lldiv@divisor+1,f
  7407  0A08  0DA2               	rlf	___lldiv@divisor+2,f
  7408  0A09  0DA3               	rlf	___lldiv@divisor+3,f
  7409  0A0A  0B89               	decfsz	9,f
  7410  0A0B  2A06               	goto	u2095
  7411  0A0C  3001               	movlw	1
  7412  0A0D  00A8               	movwf	??___lldiv
  7413  0A0E  0828               	movf	??___lldiv,w
  7414  0A0F  07AD               	addwf	___lldiv@counter,f
  7415  0A10  2A03               	goto	l2371
  7416  0A11                     l2373:	
  7417  0A11  3001               	movlw	1
  7418  0A12                     u2115:	
  7419  0A12  35A9               	lslf	___lldiv@quotient,f
  7420  0A13  0DAA               	rlf	___lldiv@quotient+1,f
  7421  0A14  0DAB               	rlf	___lldiv@quotient+2,f
  7422  0A15  0DAC               	rlf	___lldiv@quotient+3,f
  7423  0A16  0B89               	decfsz	9,f
  7424  0A17  2A12               	goto	u2115
  7425  0A18  0823               	movf	___lldiv@divisor+3,w
  7426  0A19  0227               	subwf	___lldiv@dividend+3,w
  7427  0A1A  1D03               	skipz
  7428  0A1B  2A26               	goto	u2125
  7429  0A1C  0822               	movf	___lldiv@divisor+2,w
  7430  0A1D  0226               	subwf	___lldiv@dividend+2,w
  7431  0A1E  1D03               	skipz
  7432  0A1F  2A26               	goto	u2125
  7433  0A20  0821               	movf	___lldiv@divisor+1,w
  7434  0A21  0225               	subwf	___lldiv@dividend+1,w
  7435  0A22  1D03               	skipz
  7436  0A23  2A26               	goto	u2125
  7437  0A24  0820               	movf	___lldiv@divisor,w
  7438  0A25  0224               	subwf	___lldiv@dividend,w
  7439  0A26                     u2125:	
  7440  0A26  1C03               	skipc
  7441  0A27  2A31               	goto	l2381
  7442  0A28  0820               	movf	___lldiv@divisor,w
  7443  0A29  02A4               	subwf	___lldiv@dividend,f
  7444  0A2A  0821               	movf	___lldiv@divisor+1,w
  7445  0A2B  3BA5               	subwfb	___lldiv@dividend+1,f
  7446  0A2C  0822               	movf	___lldiv@divisor+2,w
  7447  0A2D  3BA6               	subwfb	___lldiv@dividend+2,f
  7448  0A2E  0823               	movf	___lldiv@divisor+3,w
  7449  0A2F  3BA7               	subwfb	___lldiv@dividend+3,f
  7450  0A30  1429               	bsf	___lldiv@quotient,0
  7451  0A31                     l2381:	
  7452  0A31  3001               	movlw	1
  7453  0A32                     u2135:	
  7454  0A32  36A3               	lsrf	___lldiv@divisor+3,f
  7455  0A33  0CA2               	rrf	___lldiv@divisor+2,f
  7456  0A34  0CA1               	rrf	___lldiv@divisor+1,f
  7457  0A35  0CA0               	rrf	___lldiv@divisor,f
  7458  0A36  0B89               	decfsz	9,f
  7459  0A37  2A32               	goto	u2135
  7460  0A38  3001               	movlw	1
  7461  0A39  02AD               	subwf	___lldiv@counter,f
  7462  0A3A  1D03               	btfss	3,2
  7463  0A3B  2A11               	goto	l2373
  7464  0A3C                     l2385:	
  7465  0A3C  082C               	movf	___lldiv@quotient+3,w
  7466  0A3D  00A3               	movwf	?___lldiv+3
  7467  0A3E  082B               	movf	___lldiv@quotient+2,w
  7468  0A3F  00A2               	movwf	?___lldiv+2
  7469  0A40  082A               	movf	___lldiv@quotient+1,w
  7470  0A41  00A1               	movwf	?___lldiv+1
  7471  0A42  0829               	movf	___lldiv@quotient,w
  7472  0A43  00A0               	movwf	?___lldiv
  7473  0A44  0008               	return
  7474  0A45                     __end_of___lldiv:	
  7475                           
  7476                           	psect	text27
  7477  17D6                     __ptext27:	
  7478 ;; *************** function ___lltoft *****************
  7479 ;; Defined at:
  7480 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  7481 ;; Parameters:    Size  Location     Type
  7482 ;;  c               4    8[BANK0 ] unsigned long 
  7483 ;; Auto vars:     Size  Location     Type
  7484 ;;  exp             1   13[BANK0 ] unsigned char 
  7485 ;; Return value:  Size  Location     Type
  7486 ;;                  3    8[BANK0 ] float 
  7487 ;; Registers used:
  7488 ;;		wreg, status,2, status,0, pclath, cstack
  7489 ;; Tracked objects:
  7490 ;;		On entry : 0/0
  7491 ;;		On exit  : 0/0
  7492 ;;		Unchanged: 0/0
  7493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7494 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7495 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7496 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7497 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7498 ;;Total ram usage:        6 bytes
  7499 ;; Hardware stack levels used:    1
  7500 ;; Hardware stack levels required when called:    8
  7501 ;; This function calls:
  7502 ;;		___ftpack
  7503 ;; This function is called by:
  7504 ;;		_loop
  7505 ;;		_ftoa
  7506 ;; This function uses a non-reentrant model
  7507 ;;
  7508                           
  7509                           
  7510                           ;psect for function ___lltoft
  7511  17D6                     ___lltoft:	
  7512                           
  7513                           ;incstack = 0
  7514                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  7515  17D6  308E               	movlw	142
  7516  17D7  0020               	movlb	0	; select bank0
  7517  17D8  00AC               	movwf	??___lltoft
  7518  17D9  082C               	movf	??___lltoft,w
  7519  17DA  00AD               	movwf	___lltoft@exp
  7520  17DB                     l2827:	
  7521  17DB  30FF               	movlw	255
  7522  17DC  052B               	andwf	___lltoft@c+3,w
  7523  17DD  1903               	btfsc	3,2
  7524  17DE  2FEB               	goto	l2829
  7525  17DF  3001               	movlw	1
  7526  17E0                     u3055:	
  7527  17E0  36AB               	lsrf	___lltoft@c+3,f
  7528  17E1  0CAA               	rrf	___lltoft@c+2,f
  7529  17E2  0CA9               	rrf	___lltoft@c+1,f
  7530  17E3  0CA8               	rrf	___lltoft@c,f
  7531  17E4  0B89               	decfsz	9,f
  7532  17E5  2FE0               	goto	u3055
  7533  17E6  3001               	movlw	1
  7534  17E7  00AC               	movwf	??___lltoft
  7535  17E8  082C               	movf	??___lltoft,w
  7536  17E9  07AD               	addwf	___lltoft@exp,f
  7537  17EA  2FDB               	goto	l2827
  7538  17EB                     l2829:	
  7539  17EB  0828               	movf	___lltoft@c,w
  7540  17EC  00A0               	movwf	___ftpack@arg
  7541  17ED  0829               	movf	___lltoft@c+1,w
  7542  17EE  00A1               	movwf	___ftpack@arg+1
  7543  17EF  082A               	movf	___lltoft@c+2,w
  7544  17F0  00A2               	movwf	___ftpack@arg+2
  7545  17F1  082D               	movf	___lltoft@exp,w
  7546  17F2  00AC               	movwf	??___lltoft
  7547  17F3  082C               	movf	??___lltoft,w
  7548  17F4  00A3               	movwf	___ftpack@exp
  7549  17F5  01A4               	clrf	___ftpack@sign
  7550  17F6  318A  22A8         	fcall	___ftpack
  7551  17F8  0020               	movlb	0	; select bank0
  7552  17F9  0820               	movf	?___ftpack,w
  7553  17FA  00A8               	movwf	?___lltoft
  7554  17FB  0821               	movf	?___ftpack+1,w
  7555  17FC  00A9               	movwf	?___lltoft+1
  7556  17FD  0822               	movf	?___ftpack+2,w
  7557  17FE  00AA               	movwf	?___lltoft+2
  7558  17FF  0008               	return
  7559  1800                     __end_of___lltoft:	
  7560                           
  7561                           	psect	text28
  7562  0C2A                     __ptext28:	
  7563 ;; *************** function ___fttol *****************
  7564 ;; Defined at:
  7565 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  7566 ;; Parameters:    Size  Location     Type
  7567 ;;  f1              3   71[BANK0 ] float 
  7568 ;; Auto vars:     Size  Location     Type
  7569 ;;  lval            4    1[BANK1 ] unsigned long 
  7570 ;;  exp1            1    5[BANK1 ] unsigned char 
  7571 ;;  sign1           1    0[BANK1 ] unsigned char 
  7572 ;; Return value:  Size  Location     Type
  7573 ;;                  4   71[BANK0 ] long 
  7574 ;; Registers used:
  7575 ;;		wreg, status,2, status,0
  7576 ;; Tracked objects:
  7577 ;;		On entry : 0/0
  7578 ;;		On exit  : 0/0
  7579 ;;		Unchanged: 0/0
  7580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7581 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7582 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7583 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7584 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7585 ;;Total ram usage:       14 bytes
  7586 ;; Hardware stack levels used:    1
  7587 ;; Hardware stack levels required when called:    7
  7588 ;; This function calls:
  7589 ;;		Nothing
  7590 ;; This function is called by:
  7591 ;;		_ftoa
  7592 ;; This function uses a non-reentrant model
  7593 ;;
  7594                           
  7595                           
  7596                           ;psect for function ___fttol
  7597  0C2A                     ___fttol:	
  7598                           
  7599                           ;incstack = 0
  7600                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7601  0C2A  0020               	movlb	0	; select bank0
  7602  0C2B  0867               	movf	___fttol@f1,w
  7603  0C2C  00EB               	movwf	??___fttol
  7604  0C2D  0868               	movf	___fttol@f1+1,w
  7605  0C2E  00EC               	movwf	??___fttol+1
  7606  0C2F  0869               	movf	___fttol@f1+2,w
  7607  0C30  00ED               	movwf	??___fttol+2
  7608  0C31  1003               	clrc
  7609  0C32  0D6C               	rlf	??___fttol+1,w
  7610  0C33  0D6D               	rlf	??___fttol+2,w
  7611  0C34  00EE               	movwf	??___fttol+3
  7612  0C35  086E               	movf	??___fttol+3,w
  7613  0C36  0021               	movlb	1	; select bank1
  7614  0C37  00A5               	movwf	___fttol@exp1^(0+128)
  7615  0C38  0825               	movf	___fttol@exp1^(0+128),w
  7616  0C39  1D03               	btfss	3,2
  7617  0C3A  2C45               	goto	l2787
  7618  0C3B  3000               	movlw	0
  7619  0C3C  0020               	movlb	0	; select bank0
  7620  0C3D  00EA               	movwf	?___fttol+3
  7621  0C3E  3000               	movlw	0
  7622  0C3F  00E9               	movwf	?___fttol+2
  7623  0C40  3000               	movlw	0
  7624  0C41  00E8               	movwf	?___fttol+1
  7625  0C42  3000               	movlw	0
  7626  0C43  00E7               	movwf	?___fttol
  7627  0C44  0008               	return
  7628  0C45                     l2787:	
  7629  0C45  0020               	movlb	0	; select bank0
  7630  0C46  0867               	movf	___fttol@f1,w
  7631  0C47  00EB               	movwf	??___fttol
  7632  0C48  0868               	movf	___fttol@f1+1,w
  7633  0C49  00EC               	movwf	??___fttol+1
  7634  0C4A  0869               	movf	___fttol@f1+2,w
  7635  0C4B  00ED               	movwf	??___fttol+2
  7636  0C4C  3017               	movlw	23
  7637  0C4D                     u2965:	
  7638  0C4D  36ED               	lsrf	??___fttol+2,f
  7639  0C4E  0CEC               	rrf	??___fttol+1,f
  7640  0C4F  0CEB               	rrf	??___fttol,f
  7641  0C50  0B89               	decfsz	9,f
  7642  0C51  2C4D               	goto	u2965
  7643  0C52  086B               	movf	??___fttol,w
  7644  0C53  00EE               	movwf	??___fttol+3
  7645  0C54  086E               	movf	??___fttol+3,w
  7646  0C55  0021               	movlb	1	; select bank1
  7647  0C56  00A0               	movwf	___fttol@sign1^(0+128)
  7648  0C57  0020               	movlb	0	; select bank0
  7649  0C58  17E8               	bsf	___fttol@f1+1,7
  7650  0C59  30FF               	movlw	255
  7651  0C5A  05E7               	andwf	___fttol@f1,f
  7652  0C5B  30FF               	movlw	255
  7653  0C5C  05E8               	andwf	___fttol@f1+1,f
  7654  0C5D  3000               	movlw	0
  7655  0C5E  05E9               	andwf	___fttol@f1+2,f
  7656  0C5F  0867               	movf	___fttol@f1,w
  7657  0C60  0021               	movlb	1	; select bank1
  7658  0C61  00A1               	movwf	___fttol@lval^(0+128)
  7659  0C62  0020               	movlb	0	; select bank0
  7660  0C63  0868               	movf	___fttol@f1+1,w
  7661  0C64  0021               	movlb	1	; select bank1
  7662  0C65  00A2               	movwf	(___fttol@lval^(0+128)+1)
  7663  0C66  0020               	movlb	0	; select bank0
  7664  0C67  0869               	movf	___fttol@f1+2,w
  7665  0C68  0021               	movlb	1	; select bank1
  7666  0C69  00A3               	movwf	(___fttol@lval^(0+128)+2)
  7667  0C6A  01A4               	clrf	(___fttol@lval^(0+128)+3)
  7668  0C6B  308E               	movlw	142
  7669  0C6C  02A5               	subwf	___fttol@exp1^(0+128),f
  7670  0C6D  1FA5               	btfss	___fttol@exp1^(0+128),7
  7671  0C6E  2C8F               	goto	l2807
  7672  0C6F  0825               	movf	___fttol@exp1^(0+128),w
  7673  0C70  3A80               	xorlw	128
  7674  0C71  3E8F               	addlw	143
  7675  0C72  1803               	skipnc
  7676  0C73  2C7E               	goto	l2805
  7677  0C74  3000               	movlw	0
  7678  0C75  0020               	movlb	0	; select bank0
  7679  0C76  00EA               	movwf	?___fttol+3
  7680  0C77  3000               	movlw	0
  7681  0C78  00E9               	movwf	?___fttol+2
  7682  0C79  3000               	movlw	0
  7683  0C7A  00E8               	movwf	?___fttol+1
  7684  0C7B  3000               	movlw	0
  7685  0C7C  00E7               	movwf	?___fttol
  7686  0C7D  0008               	return
  7687  0C7E                     l2805:	
  7688  0C7E  3001               	movlw	1
  7689  0C7F                     u2995:	
  7690  0C7F  0021               	movlb	1	; select bank1
  7691  0C80  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
  7692  0C81  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
  7693  0C82  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
  7694  0C83  0CA1               	rrf	___fttol@lval^(0+128),f
  7695  0C84  0B89               	decfsz	9,f
  7696  0C85  2C7F               	goto	u2995
  7697  0C86  3001               	movlw	1
  7698  0C87  0020               	movlb	0	; select bank0
  7699  0C88  00EB               	movwf	??___fttol
  7700  0C89  086B               	movf	??___fttol,w
  7701  0C8A  0021               	movlb	1	; select bank1
  7702  0C8B  07A5               	addwf	___fttol@exp1^(0+128),f
  7703  0C8C  1903               	btfsc	3,2
  7704  0C8D  2CAB               	goto	l2815
  7705  0C8E  2C7E               	goto	l2805
  7706  0C8F                     l2807:	
  7707  0C8F  3018               	movlw	24
  7708  0C90  0225               	subwf	___fttol@exp1^(0+128),w
  7709  0C91  1C03               	skipc
  7710  0C92  2CA7               	goto	l743
  7711  0C93  3000               	movlw	0
  7712  0C94  0020               	movlb	0	; select bank0
  7713  0C95  00EA               	movwf	?___fttol+3
  7714  0C96  3000               	movlw	0
  7715  0C97  00E9               	movwf	?___fttol+2
  7716  0C98  3000               	movlw	0
  7717  0C99  00E8               	movwf	?___fttol+1
  7718  0C9A  3000               	movlw	0
  7719  0C9B  00E7               	movwf	?___fttol
  7720  0C9C  0008               	return
  7721  0C9D                     l2813:	
  7722  0C9D  3001               	movlw	1
  7723  0C9E                     u3025:	
  7724  0C9E  0021               	movlb	1	; select bank1
  7725  0C9F  35A1               	lslf	___fttol@lval^(0+128),f
  7726  0CA0  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
  7727  0CA1  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
  7728  0CA2  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
  7729  0CA3  0B89               	decfsz	9,f
  7730  0CA4  2C9E               	goto	u3025
  7731  0CA5  3001               	movlw	1
  7732  0CA6  02A5               	subwf	___fttol@exp1^(0+128),f
  7733  0CA7                     l743:	
  7734  0CA7  0021               	movlb	1	; select bank1
  7735  0CA8  0825               	movf	___fttol@exp1^(0+128),w
  7736  0CA9  1D03               	btfss	3,2
  7737  0CAA  2C9D               	goto	l2813
  7738  0CAB                     l2815:	
  7739  0CAB  0820               	movf	___fttol@sign1^(0+128),w
  7740  0CAC  1903               	btfsc	3,2
  7741  0CAD  2CB9               	goto	l2819
  7742  0CAE  09A1               	comf	___fttol@lval^(0+128),f
  7743  0CAF  09A2               	comf	(___fttol@lval+1)^(0+128),f
  7744  0CB0  09A3               	comf	(___fttol@lval+2)^(0+128),f
  7745  0CB1  09A4               	comf	(___fttol@lval+3)^(0+128),f
  7746  0CB2  0AA1               	incf	___fttol@lval^(0+128),f
  7747  0CB3  1903               	skipnz
  7748  0CB4  0AA2               	incf	(___fttol@lval+1)^(0+128),f
  7749  0CB5  1903               	skipnz
  7750  0CB6  0AA3               	incf	(___fttol@lval+2)^(0+128),f
  7751  0CB7  1903               	skipnz
  7752  0CB8  0AA4               	incf	(___fttol@lval+3)^(0+128),f
  7753  0CB9                     l2819:	
  7754  0CB9  0824               	movf	(___fttol@lval+3)^(0+128),w
  7755  0CBA  0020               	movlb	0	; select bank0
  7756  0CBB  00EA               	movwf	?___fttol+3
  7757  0CBC  0021               	movlb	1	; select bank1
  7758  0CBD  0823               	movf	(___fttol@lval+2)^(0+128),w
  7759  0CBE  0020               	movlb	0	; select bank0
  7760  0CBF  00E9               	movwf	?___fttol+2
  7761  0CC0  0021               	movlb	1	; select bank1
  7762  0CC1  0822               	movf	(___fttol@lval+1)^(0+128),w
  7763  0CC2  0020               	movlb	0	; select bank0
  7764  0CC3  00E8               	movwf	?___fttol+1
  7765  0CC4  0021               	movlb	1	; select bank1
  7766  0CC5  0821               	movf	___fttol@lval^(0+128),w
  7767  0CC6  0020               	movlb	0	; select bank0
  7768  0CC7  00E7               	movwf	?___fttol
  7769  0CC8  0008               	return
  7770  0CC9                     __end_of___fttol:	
  7771                           
  7772                           	psect	text29
  7773  1657                     __ptext29:	
  7774 ;; *************** function ___ftsub *****************
  7775 ;; Defined at:
  7776 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  7777 ;; Parameters:    Size  Location     Type
  7778 ;;  f2              3   27[BANK0 ] float 
  7779 ;;  f1              3   30[BANK0 ] float 
  7780 ;; Auto vars:     Size  Location     Type
  7781 ;;		None
  7782 ;; Return value:  Size  Location     Type
  7783 ;;                  3   27[BANK0 ] float 
  7784 ;; Registers used:
  7785 ;;		wreg, status,2, status,0, pclath, cstack
  7786 ;; Tracked objects:
  7787 ;;		On entry : 0/0
  7788 ;;		On exit  : 0/0
  7789 ;;		Unchanged: 0/0
  7790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7791 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7794 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7795 ;;Total ram usage:        6 bytes
  7796 ;; Hardware stack levels used:    1
  7797 ;; Hardware stack levels required when called:    9
  7798 ;; This function calls:
  7799 ;;		___ftadd
  7800 ;; This function is called by:
  7801 ;;		_ftoa
  7802 ;; This function uses a non-reentrant model
  7803 ;;
  7804                           
  7805                           
  7806                           ;psect for function ___ftsub
  7807  1657                     ___ftsub:	
  7808                           
  7809                           ;incstack = 0
  7810                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  7811  1657  0020               	movlb	0	; select bank0
  7812  1658  083D               	movf	___ftsub@f2+2,w
  7813  1659  043C               	iorwf	___ftsub@f2+1,w
  7814  165A  043B               	iorwf	___ftsub@f2,w
  7815  165B  1903               	skipnz
  7816  165C  2E5F               	goto	l2777
  7817  165D  3080               	movlw	128
  7818  165E  06BD               	xorwf	___ftsub@f2+2,f
  7819  165F                     l2777:	
  7820  165F  083E               	movf	___ftsub@f1,w
  7821  1660  00AE               	movwf	___ftadd@f1
  7822  1661  083F               	movf	___ftsub@f1+1,w
  7823  1662  00AF               	movwf	___ftadd@f1+1
  7824  1663  0840               	movf	___ftsub@f1+2,w
  7825  1664  00B0               	movwf	___ftadd@f1+2
  7826  1665  083B               	movf	___ftsub@f2,w
  7827  1666  00B1               	movwf	___ftadd@f2
  7828  1667  083C               	movf	___ftsub@f2+1,w
  7829  1668  00B2               	movwf	___ftadd@f2+1
  7830  1669  083D               	movf	___ftsub@f2+2,w
  7831  166A  00B3               	movwf	___ftadd@f2+2
  7832  166B  318F  270A         	fcall	___ftadd
  7833  166D  0020               	movlb	0	; select bank0
  7834  166E  082E               	movf	?___ftadd,w
  7835  166F  00BB               	movwf	?___ftsub
  7836  1670  082F               	movf	?___ftadd+1,w
  7837  1671  00BC               	movwf	?___ftsub+1
  7838  1672  0830               	movf	?___ftadd+2,w
  7839  1673  00BD               	movwf	?___ftsub+2
  7840  1674  0008               	return
  7841  1675                     __end_of___ftsub:	
  7842                           
  7843                           	psect	text30
  7844  1566                     __ptext30:	
  7845 ;; *************** function ___ftneg *****************
  7846 ;; Defined at:
  7847 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  7848 ;; Parameters:    Size  Location     Type
  7849 ;;  f1              3   55[BANK0 ] float 
  7850 ;; Auto vars:     Size  Location     Type
  7851 ;;		None
  7852 ;; Return value:  Size  Location     Type
  7853 ;;                  3   55[BANK0 ] float 
  7854 ;; Registers used:
  7855 ;;		wreg
  7856 ;; Tracked objects:
  7857 ;;		On entry : 0/0
  7858 ;;		On exit  : 0/0
  7859 ;;		Unchanged: 0/0
  7860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7861 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7864 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7865 ;;Total ram usage:        3 bytes
  7866 ;; Hardware stack levels used:    1
  7867 ;; Hardware stack levels required when called:    7
  7868 ;; This function calls:
  7869 ;;		Nothing
  7870 ;; This function is called by:
  7871 ;;		_loop
  7872 ;;		_ftoa
  7873 ;; This function uses a non-reentrant model
  7874 ;;
  7875                           
  7876                           
  7877                           ;psect for function ___ftneg
  7878  1566                     ___ftneg:	
  7879                           
  7880                           ;incstack = 0
  7881                           ; Regs used in ___ftneg: [wreg]
  7882  1566  0020               	movlb	0	; select bank0
  7883  1567  0859               	movf	___ftneg@f1+2,w
  7884  1568  0458               	iorwf	___ftneg@f1+1,w
  7885  1569  0457               	iorwf	___ftneg@f1,w
  7886  156A  1903               	skipnz
  7887  156B  0008               	return
  7888  156C  3080               	movlw	128
  7889  156D  06D9               	xorwf	___ftneg@f1+2,f
  7890  156E  0008               	return
  7891  156F                     __end_of___ftneg:	
  7892                           
  7893                           	psect	text31
  7894  072F                     __ptext31:	
  7895 ;; *************** function ___ftmul *****************
  7896 ;; Defined at:
  7897 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  7898 ;; Parameters:    Size  Location     Type
  7899 ;;  f1              3   55[BANK0 ] float 
  7900 ;;  f2              3   58[BANK0 ] float 
  7901 ;; Auto vars:     Size  Location     Type
  7902 ;;  f3_as_produc    3   66[BANK0 ] unsigned um
  7903 ;;  sign            1   70[BANK0 ] unsigned char 
  7904 ;;  cntr            1   69[BANK0 ] unsigned char 
  7905 ;;  exp             1   65[BANK0 ] unsigned char 
  7906 ;; Return value:  Size  Location     Type
  7907 ;;                  3   55[BANK0 ] float 
  7908 ;; Registers used:
  7909 ;;		wreg, status,2, status,0, pclath, cstack
  7910 ;; Tracked objects:
  7911 ;;		On entry : 0/0
  7912 ;;		On exit  : 0/0
  7913 ;;		Unchanged: 0/0
  7914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7915 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7916 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7917 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7918 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7919 ;;Total ram usage:       16 bytes
  7920 ;; Hardware stack levels used:    1
  7921 ;; Hardware stack levels required when called:    8
  7922 ;; This function calls:
  7923 ;;		___ftpack
  7924 ;; This function is called by:
  7925 ;;		_loop
  7926 ;;		_ftoa
  7927 ;; This function uses a non-reentrant model
  7928 ;;
  7929                           
  7930                           
  7931                           ;psect for function ___ftmul
  7932  072F                     ___ftmul:	
  7933                           
  7934                           ;incstack = 0
  7935                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7936  072F  0020               	movlb	0	; select bank0
  7937  0730  0857               	movf	___ftmul@f1,w
  7938  0731  00DD               	movwf	??___ftmul
  7939  0732  0858               	movf	___ftmul@f1+1,w
  7940  0733  00DE               	movwf	??___ftmul+1
  7941  0734  0859               	movf	___ftmul@f1+2,w
  7942  0735  00DF               	movwf	??___ftmul+2
  7943  0736  1003               	clrc
  7944  0737  0D5E               	rlf	??___ftmul+1,w
  7945  0738  0D5F               	rlf	??___ftmul+2,w
  7946  0739  00E0               	movwf	??___ftmul+3
  7947  073A  0860               	movf	??___ftmul+3,w
  7948  073B  00E1               	movwf	___ftmul@exp
  7949  073C  0861               	movf	___ftmul@exp,w
  7950  073D  1D03               	btfss	3,2
  7951  073E  2F46               	goto	l2721
  7952  073F  3000               	movlw	0
  7953  0740  00D7               	movwf	?___ftmul
  7954  0741  3000               	movlw	0
  7955  0742  00D8               	movwf	?___ftmul+1
  7956  0743  3000               	movlw	0
  7957  0744  00D9               	movwf	?___ftmul+2
  7958  0745  0008               	return
  7959  0746                     l2721:	
  7960  0746  085A               	movf	___ftmul@f2,w
  7961  0747  00DD               	movwf	??___ftmul
  7962  0748  085B               	movf	___ftmul@f2+1,w
  7963  0749  00DE               	movwf	??___ftmul+1
  7964  074A  085C               	movf	___ftmul@f2+2,w
  7965  074B  00DF               	movwf	??___ftmul+2
  7966  074C  1003               	clrc
  7967  074D  0D5E               	rlf	??___ftmul+1,w
  7968  074E  0D5F               	rlf	??___ftmul+2,w
  7969  074F  00E0               	movwf	??___ftmul+3
  7970  0750  0860               	movf	??___ftmul+3,w
  7971  0751  00E6               	movwf	___ftmul@sign
  7972  0752  0866               	movf	___ftmul@sign,w
  7973  0753  1D03               	btfss	3,2
  7974  0754  2F5C               	goto	l2727
  7975  0755  3000               	movlw	0
  7976  0756  00D7               	movwf	?___ftmul
  7977  0757  3000               	movlw	0
  7978  0758  00D8               	movwf	?___ftmul+1
  7979  0759  3000               	movlw	0
  7980  075A  00D9               	movwf	?___ftmul+2
  7981  075B  0008               	return
  7982  075C                     l2727:	
  7983  075C  0866               	movf	___ftmul@sign,w
  7984  075D  3E7B               	addlw	123
  7985  075E  00DD               	movwf	??___ftmul
  7986  075F  085D               	movf	??___ftmul,w
  7987  0760  07E1               	addwf	___ftmul@exp,f
  7988  0761  0857               	movf	___ftmul@f1,w
  7989  0762  00DD               	movwf	??___ftmul
  7990  0763  0858               	movf	___ftmul@f1+1,w
  7991  0764  00DE               	movwf	??___ftmul+1
  7992  0765  0859               	movf	___ftmul@f1+2,w
  7993  0766  00DF               	movwf	??___ftmul+2
  7994  0767  3010               	movlw	16
  7995  0768                     u2835:	
  7996  0768  36DF               	lsrf	??___ftmul+2,f
  7997  0769  0CDE               	rrf	??___ftmul+1,f
  7998  076A  0CDD               	rrf	??___ftmul,f
  7999  076B  0B89               	decfsz	9,f
  8000  076C  2F68               	goto	u2835
  8001  076D  085D               	movf	??___ftmul,w
  8002  076E  00E0               	movwf	??___ftmul+3
  8003  076F  0860               	movf	??___ftmul+3,w
  8004  0770  00E6               	movwf	___ftmul@sign
  8005  0771  085A               	movf	___ftmul@f2,w
  8006  0772  00DD               	movwf	??___ftmul
  8007  0773  085B               	movf	___ftmul@f2+1,w
  8008  0774  00DE               	movwf	??___ftmul+1
  8009  0775  085C               	movf	___ftmul@f2+2,w
  8010  0776  00DF               	movwf	??___ftmul+2
  8011  0777  3010               	movlw	16
  8012  0778                     u2845:	
  8013  0778  36DF               	lsrf	??___ftmul+2,f
  8014  0779  0CDE               	rrf	??___ftmul+1,f
  8015  077A  0CDD               	rrf	??___ftmul,f
  8016  077B  0B89               	decfsz	9,f
  8017  077C  2F78               	goto	u2845
  8018  077D  085D               	movf	??___ftmul,w
  8019  077E  00E0               	movwf	??___ftmul+3
  8020  077F  0860               	movf	??___ftmul+3,w
  8021  0780  06E6               	xorwf	___ftmul@sign,f
  8022  0781  3080               	movlw	128
  8023  0782  00DD               	movwf	??___ftmul
  8024  0783  085D               	movf	??___ftmul,w
  8025  0784  05E6               	andwf	___ftmul@sign,f
  8026  0785  17D8               	bsf	___ftmul@f1+1,7
  8027  0786  17DB               	bsf	___ftmul@f2+1,7
  8028  0787  30FF               	movlw	255
  8029  0788  05DA               	andwf	___ftmul@f2,f
  8030  0789  30FF               	movlw	255
  8031  078A  05DB               	andwf	___ftmul@f2+1,f
  8032  078B  3000               	movlw	0
  8033  078C  05DC               	andwf	___ftmul@f2+2,f
  8034  078D  3000               	movlw	0
  8035  078E  00E2               	movwf	___ftmul@f3_as_product
  8036  078F  3000               	movlw	0
  8037  0790  00E3               	movwf	___ftmul@f3_as_product+1
  8038  0791  3000               	movlw	0
  8039  0792  00E4               	movwf	___ftmul@f3_as_product+2
  8040  0793  3007               	movlw	7
  8041  0794  00DD               	movwf	??___ftmul
  8042  0795  085D               	movf	??___ftmul,w
  8043  0796  00E5               	movwf	___ftmul@cntr
  8044  0797                     l2739:	
  8045  0797  1C57               	btfss	___ftmul@f1,0
  8046  0798  2F9F               	goto	l2743
  8047  0799  085A               	movf	___ftmul@f2,w
  8048  079A  07E2               	addwf	___ftmul@f3_as_product,f
  8049  079B  085B               	movf	___ftmul@f2+1,w
  8050  079C  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  8051  079D  085C               	movf	___ftmul@f2+2,w
  8052  079E  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  8053  079F                     l2743:	
  8054  079F  3001               	movlw	1
  8055  07A0                     u2865:	
  8056  07A0  36D9               	lsrf	___ftmul@f1+2,f
  8057  07A1  0CD8               	rrf	___ftmul@f1+1,f
  8058  07A2  0CD7               	rrf	___ftmul@f1,f
  8059  07A3  0B89               	decfsz	9,f
  8060  07A4  2FA0               	goto	u2865
  8061  07A5  3001               	movlw	1
  8062  07A6                     u2875:	
  8063  07A6  35DA               	lslf	___ftmul@f2,f
  8064  07A7  0DDB               	rlf	___ftmul@f2+1,f
  8065  07A8  0DDC               	rlf	___ftmul@f2+2,f
  8066  07A9  0B89               	decfsz	9,f
  8067  07AA  2FA6               	goto	u2875
  8068  07AB  3001               	movlw	1
  8069  07AC  02E5               	subwf	___ftmul@cntr,f
  8070  07AD  1D03               	btfss	3,2
  8071  07AE  2F97               	goto	l2739
  8072  07AF  3009               	movlw	9
  8073  07B0  00DD               	movwf	??___ftmul
  8074  07B1  085D               	movf	??___ftmul,w
  8075  07B2  00E5               	movwf	___ftmul@cntr
  8076  07B3                     l2751:	
  8077  07B3  1C57               	btfss	___ftmul@f1,0
  8078  07B4  2FBB               	goto	l2755
  8079  07B5  085A               	movf	___ftmul@f2,w
  8080  07B6  07E2               	addwf	___ftmul@f3_as_product,f
  8081  07B7  085B               	movf	___ftmul@f2+1,w
  8082  07B8  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  8083  07B9  085C               	movf	___ftmul@f2+2,w
  8084  07BA  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  8085  07BB                     l2755:	
  8086  07BB  3001               	movlw	1
  8087  07BC                     u2905:	
  8088  07BC  36D9               	lsrf	___ftmul@f1+2,f
  8089  07BD  0CD8               	rrf	___ftmul@f1+1,f
  8090  07BE  0CD7               	rrf	___ftmul@f1,f
  8091  07BF  0B89               	decfsz	9,f
  8092  07C0  2FBC               	goto	u2905
  8093  07C1  3001               	movlw	1
  8094  07C2                     u2915:	
  8095  07C2  36E4               	lsrf	___ftmul@f3_as_product+2,f
  8096  07C3  0CE3               	rrf	___ftmul@f3_as_product+1,f
  8097  07C4  0CE2               	rrf	___ftmul@f3_as_product,f
  8098  07C5  0B89               	decfsz	9,f
  8099  07C6  2FC2               	goto	u2915
  8100  07C7  3001               	movlw	1
  8101  07C8  02E5               	subwf	___ftmul@cntr,f
  8102  07C9  1D03               	btfss	3,2
  8103  07CA  2FB3               	goto	l2751
  8104  07CB  0862               	movf	___ftmul@f3_as_product,w
  8105  07CC  00A0               	movwf	___ftpack@arg
  8106  07CD  0863               	movf	___ftmul@f3_as_product+1,w
  8107  07CE  00A1               	movwf	___ftpack@arg+1
  8108  07CF  0864               	movf	___ftmul@f3_as_product+2,w
  8109  07D0  00A2               	movwf	___ftpack@arg+2
  8110  07D1  0861               	movf	___ftmul@exp,w
  8111  07D2  00DD               	movwf	??___ftmul
  8112  07D3  085D               	movf	??___ftmul,w
  8113  07D4  00A3               	movwf	___ftpack@exp
  8114  07D5  0866               	movf	___ftmul@sign,w
  8115  07D6  00DE               	movwf	??___ftmul+1
  8116  07D7  085E               	movf	??___ftmul+1,w
  8117  07D8  00A4               	movwf	___ftpack@sign
  8118  07D9  318A  22A8         	fcall	___ftpack
  8119  07DB  0020               	movlb	0	; select bank0
  8120  07DC  0820               	movf	?___ftpack,w
  8121  07DD  00D7               	movwf	?___ftmul
  8122  07DE  0821               	movf	?___ftpack+1,w
  8123  07DF  00D8               	movwf	?___ftmul+1
  8124  07E0  0822               	movf	?___ftpack+2,w
  8125  07E1  00D9               	movwf	?___ftmul+2
  8126  07E2  0008               	return
  8127  07E3                     __end_of___ftmul:	
  8128                           
  8129                           	psect	text32
  8130  08A4                     __ptext32:	
  8131 ;; *************** function ___ftge *****************
  8132 ;; Defined at:
  8133 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8134 ;; Parameters:    Size  Location     Type
  8135 ;;  ff1             3    0[BANK0 ] float 
  8136 ;;  ff2             3    3[BANK0 ] float 
  8137 ;; Auto vars:     Size  Location     Type
  8138 ;;		None
  8139 ;; Return value:  Size  Location     Type
  8140 ;;		None               void
  8141 ;; Registers used:
  8142 ;;		wreg, status,2, status,0
  8143 ;; Tracked objects:
  8144 ;;		On entry : 0/0
  8145 ;;		On exit  : 0/0
  8146 ;;		Unchanged: 0/0
  8147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8148 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8150 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8151 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8152 ;;Total ram usage:        9 bytes
  8153 ;; Hardware stack levels used:    1
  8154 ;; Hardware stack levels required when called:    7
  8155 ;; This function calls:
  8156 ;;		Nothing
  8157 ;; This function is called by:
  8158 ;;		_ftoa
  8159 ;; This function uses a non-reentrant model
  8160 ;;
  8161                           
  8162                           
  8163                           ;psect for function ___ftge
  8164  08A4                     ___ftge:	
  8165                           
  8166                           ;incstack = 0
  8167                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8168  08A4  0020               	movlb	0	; select bank0
  8169  08A5  1FA2               	btfss	___ftge@ff1+2,7
  8170  08A6  28BB               	goto	l2699
  8171  08A7  0920               	comf	___ftge@ff1,w
  8172  08A8  00A6               	movwf	??___ftge
  8173  08A9  0921               	comf	___ftge@ff1+1,w
  8174  08AA  00A7               	movwf	??___ftge+1
  8175  08AB  0922               	comf	___ftge@ff1+2,w
  8176  08AC  00A8               	movwf	??___ftge+2
  8177  08AD  0AA6               	incf	??___ftge,f
  8178  08AE  1903               	skipnz
  8179  08AF  0AA7               	incf	??___ftge+1,f
  8180  08B0  1903               	skipnz
  8181  08B1  0AA8               	incf	??___ftge+2,f
  8182  08B2  3000               	movlw	0
  8183  08B3  0726               	addwf	??___ftge,w
  8184  08B4  00A0               	movwf	___ftge@ff1
  8185  08B5  3000               	movlw	0
  8186  08B6  3D27               	addwfc	??___ftge+1,w
  8187  08B7  00A1               	movwf	___ftge@ff1+1
  8188  08B8  3080               	movlw	128
  8189  08B9  3D28               	addwfc	??___ftge+2,w
  8190  08BA  00A2               	movwf	___ftge@ff1+2
  8191  08BB                     l2699:	
  8192  08BB  1FA5               	btfss	___ftge@ff2+2,7
  8193  08BC  28D1               	goto	l2703
  8194  08BD  0923               	comf	___ftge@ff2,w
  8195  08BE  00A6               	movwf	??___ftge
  8196  08BF  0924               	comf	___ftge@ff2+1,w
  8197  08C0  00A7               	movwf	??___ftge+1
  8198  08C1  0925               	comf	___ftge@ff2+2,w
  8199  08C2  00A8               	movwf	??___ftge+2
  8200  08C3  0AA6               	incf	??___ftge,f
  8201  08C4  1903               	skipnz
  8202  08C5  0AA7               	incf	??___ftge+1,f
  8203  08C6  1903               	skipnz
  8204  08C7  0AA8               	incf	??___ftge+2,f
  8205  08C8  3000               	movlw	0
  8206  08C9  0726               	addwf	??___ftge,w
  8207  08CA  00A3               	movwf	___ftge@ff2
  8208  08CB  3000               	movlw	0
  8209  08CC  3D27               	addwfc	??___ftge+1,w
  8210  08CD  00A4               	movwf	___ftge@ff2+1
  8211  08CE  3080               	movlw	128
  8212  08CF  3D28               	addwfc	??___ftge+2,w
  8213  08D0  00A5               	movwf	___ftge@ff2+2
  8214  08D1                     l2703:	
  8215  08D1  3080               	movlw	128
  8216  08D2  06A2               	xorwf	___ftge@ff1+2,f
  8217  08D3  3080               	movlw	128
  8218  08D4  06A5               	xorwf	___ftge@ff2+2,f
  8219  08D5  0825               	movf	___ftge@ff2+2,w
  8220  08D6  0222               	subwf	___ftge@ff1+2,w
  8221  08D7  1D03               	skipz
  8222  08D8  0008               	return
  8223  08D9  0824               	movf	___ftge@ff2+1,w
  8224  08DA  0221               	subwf	___ftge@ff1+1,w
  8225  08DB  1D03               	skipz
  8226  08DC  0008               	return
  8227  08DD  0823               	movf	___ftge@ff2,w
  8228  08DE  0220               	subwf	___ftge@ff1,w
  8229  08DF  0008               	return
  8230  08E0                     __end_of___ftge:	
  8231                           
  8232                           	psect	text33
  8233  0CC9                     __ptext33:	
  8234 ;; *************** function _getADCValue *****************
  8235 ;; Defined at:
  8236 ;;		line 35 in file "main.c"
  8237 ;; Parameters:    Size  Location     Type
  8238 ;;  channel         1    wreg     unsigned char 
  8239 ;; Auto vars:     Size  Location     Type
  8240 ;;  channel         1   51[BANK0 ] unsigned char 
  8241 ;;  adcSum          3   52[BANK0 ] float 
  8242 ;;  adcLoop         2   49[BANK0 ] unsigned int 
  8243 ;; Return value:  Size  Location     Type
  8244 ;;                  3   43[BANK0 ] float 
  8245 ;; Registers used:
  8246 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8247 ;; Tracked objects:
  8248 ;;		On entry : 0/0
  8249 ;;		On exit  : 0/0
  8250 ;;		Unchanged: 0/0
  8251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8252 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8253 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8254 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8255 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8256 ;;Total ram usage:       12 bytes
  8257 ;; Hardware stack levels used:    1
  8258 ;; Hardware stack levels required when called:    9
  8259 ;; This function calls:
  8260 ;;		___awtoft
  8261 ;;		___ftadd
  8262 ;;		___ftdiv
  8263 ;;		_doWDTSleep
  8264 ;; This function is called by:
  8265 ;;		_loop
  8266 ;; This function uses a non-reentrant model
  8267 ;;
  8268                           
  8269                           
  8270                           ;psect for function _getADCValue
  8271  0CC9                     _getADCValue:	
  8272                           
  8273                           ;incstack = 0
  8274                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8275                           ;getADCValue@channel stored from wreg
  8276  0CC9  0020               	movlb	0	; select bank0
  8277  0CCA  00D3               	movwf	getADCValue@channel
  8278                           
  8279                           ;main.c: 38: float adcSum = 0;
  8280  0CCB  3000               	movlw	0
  8281  0CCC  00D4               	movwf	getADCValue@adcSum
  8282  0CCD  3000               	movlw	0
  8283  0CCE  00D5               	movwf	getADCValue@adcSum+1
  8284  0CCF  3000               	movlw	0
  8285  0CD0  00D6               	movwf	getADCValue@adcSum+2
  8286                           
  8287                           ;main.c: 39: unsigned int adcLoop = 1000;
  8288  0CD1  30E8               	movlw	232
  8289  0CD2  00D1               	movwf	getADCValue@adcLoop
  8290  0CD3  3003               	movlw	3
  8291  0CD4  00D2               	movwf	getADCValue@adcLoop+1
  8292                           
  8293                           ;main.c: 41: ADCON0bits.CHS = channel;
  8294  0CD5  0853               	movf	getADCValue@channel,w
  8295  0CD6  00CE               	movwf	??_getADCValue
  8296  0CD7  0DCE               	rlf	??_getADCValue,f
  8297  0CD8  0DCE               	rlf	??_getADCValue,f
  8298  0CD9  0021               	movlb	1	; select bank1
  8299  0CDA  081D               	movf	29,w	;volatile
  8300  0CDB  0020               	movlb	0	; select bank0
  8301  0CDC  064E               	xorwf	??_getADCValue,w
  8302  0CDD  3903               	andlw	-253
  8303  0CDE  064E               	xorwf	??_getADCValue,w
  8304  0CDF  0021               	movlb	1	; select bank1
  8305  0CE0  009D               	movwf	29	;volatile
  8306                           
  8307                           ;main.c: 42: FVRCONbits.FVREN = 1;
  8308  0CE1  0022               	movlb	2	; select bank2
  8309  0CE2  1797               	bsf	23,7	;volatile
  8310                           
  8311                           ;main.c: 43: ADCON0bits.ADON = 1;
  8312  0CE3  0021               	movlb	1	; select bank1
  8313  0CE4  141D               	bsf	29,0	;volatile
  8314                           
  8315                           ;main.c: 45: doWDTSleep(0b00000);
  8316  0CE5  3000               	movlw	0
  8317  0CE6  3195  25A0  318C   	fcall	_doWDTSleep
  8318  0CE9                     l3051:	
  8319                           ;main.c: 47: while (adcLoop--){
  8320                           
  8321  0CE9  3001               	movlw	1
  8322  0CEA  0020               	movlb	0	; select bank0
  8323  0CEB  02D1               	subwf	getADCValue@adcLoop,f
  8324  0CEC  3000               	movlw	0
  8325  0CED  3BD2               	subwfb	getADCValue@adcLoop+1,f
  8326  0CEE  0A51               	incf	getADCValue@adcLoop,w
  8327  0CEF  1903               	btfsc	3,2
  8328  0CF0  0A52               	incf	getADCValue@adcLoop+1,w
  8329  0CF1  1903               	btfsc	3,2
  8330  0CF2  2D26               	goto	l164
  8331                           
  8332                           ;main.c: 49: ADCON0bits.ADGO = 1;
  8333  0CF3  0021               	movlb	1	; select bank1
  8334  0CF4  149D               	bsf	29,1	;volatile
  8335  0CF5                     l3047:	
  8336                           ;main.c: 51: while (ADCON0bits.ADGO){
  8337                           
  8338  0CF5  0021               	movlb	1	; select bank1
  8339  0CF6  1C9D               	btfss	29,1	;volatile
  8340  0CF7  2CFD               	goto	l3049
  8341                           
  8342                           ;main.c: 52: doWDTSleep(0b00000);
  8343  0CF8  3000               	movlw	0
  8344  0CF9  3195  25A0  318C   	fcall	_doWDTSleep
  8345  0CFC  2CF5               	goto	l3047
  8346  0CFD                     l3049:	
  8347                           
  8348                           ;main.c: 53: };main.c: 55: adcSum+= (ADRESL | (ADRESH << 8));
  8349  0CFD  081C               	movf	28,w	;volatile
  8350  0CFE  0020               	movlb	0	; select bank0
  8351  0CFF  00CE               	movwf	??_getADCValue
  8352  0D00  01CF               	clrf	??_getADCValue+1
  8353  0D01  084E               	movf	??_getADCValue,w
  8354  0D02  00CF               	movwf	??_getADCValue+1
  8355  0D03  01CE               	clrf	??_getADCValue
  8356  0D04  084E               	movf	??_getADCValue,w
  8357  0D05  0021               	movlb	1	; select bank1
  8358  0D06  041B               	iorwf	27,w	;volatile
  8359  0D07  0020               	movlb	0	; select bank0
  8360  0D08  00A8               	movwf	___awtoft@c
  8361  0D09  084F               	movf	??_getADCValue+1,w
  8362  0D0A  00A9               	movwf	___awtoft@c+1
  8363  0D0B  3196  26F3  318C   	fcall	___awtoft
  8364  0D0E  0020               	movlb	0	; select bank0
  8365  0D0F  0828               	movf	?___awtoft,w
  8366  0D10  00AE               	movwf	___ftadd@f1
  8367  0D11  0829               	movf	?___awtoft+1,w
  8368  0D12  00AF               	movwf	___ftadd@f1+1
  8369  0D13  082A               	movf	?___awtoft+2,w
  8370  0D14  00B0               	movwf	___ftadd@f1+2
  8371  0D15  0854               	movf	getADCValue@adcSum,w
  8372  0D16  00B1               	movwf	___ftadd@f2
  8373  0D17  0855               	movf	getADCValue@adcSum+1,w
  8374  0D18  00B2               	movwf	___ftadd@f2+1
  8375  0D19  0856               	movf	getADCValue@adcSum+2,w
  8376  0D1A  00B3               	movwf	___ftadd@f2+2
  8377  0D1B  318F  270A  318C   	fcall	___ftadd
  8378  0D1E  0020               	movlb	0	; select bank0
  8379  0D1F  082E               	movf	?___ftadd,w
  8380  0D20  00D4               	movwf	getADCValue@adcSum
  8381  0D21  082F               	movf	?___ftadd+1,w
  8382  0D22  00D5               	movwf	getADCValue@adcSum+1
  8383  0D23  0830               	movf	?___ftadd+2,w
  8384  0D24  00D6               	movwf	getADCValue@adcSum+2
  8385  0D25  2CE9               	goto	l3051
  8386  0D26                     l164:	
  8387                           
  8388                           ;main.c: 57: };main.c: 59: FVRCONbits.FVREN = 0;
  8389  0D26  0022               	movlb	2	; select bank2
  8390  0D27  1397               	bcf	23,7	;volatile
  8391                           
  8392                           ;main.c: 60: ADCON0bits.ADON = 0;
  8393  0D28  0021               	movlb	1	; select bank1
  8394  0D29  101D               	bcf	29,0	;volatile
  8395                           
  8396                           ;main.c: 63: adcSum/= 1000;
  8397  0D2A  3000               	movlw	0
  8398  0D2B  0020               	movlb	0	; select bank0
  8399  0D2C  00BB               	movwf	___ftdiv@f2
  8400  0D2D  307A               	movlw	122
  8401  0D2E  00BC               	movwf	___ftdiv@f2+1
  8402  0D2F  3044               	movlw	68
  8403  0D30  00BD               	movwf	___ftdiv@f2+2
  8404  0D31  0854               	movf	getADCValue@adcSum,w
  8405  0D32  00BE               	movwf	___ftdiv@f1
  8406  0D33  0855               	movf	getADCValue@adcSum+1,w
  8407  0D34  00BF               	movwf	___ftdiv@f1+1
  8408  0D35  0856               	movf	getADCValue@adcSum+2,w
  8409  0D36  00C0               	movwf	___ftdiv@f1+2
  8410  0D37  318D  256F  318C   	fcall	___ftdiv
  8411  0D3A  0020               	movlb	0	; select bank0
  8412  0D3B  083B               	movf	?___ftdiv,w
  8413  0D3C  00D4               	movwf	getADCValue@adcSum
  8414  0D3D  083C               	movf	?___ftdiv+1,w
  8415  0D3E  00D5               	movwf	getADCValue@adcSum+1
  8416  0D3F  083D               	movf	?___ftdiv+2,w
  8417  0D40  00D6               	movwf	getADCValue@adcSum+2
  8418                           
  8419                           ;main.c: 66: if (ADCON1bits.ADPREF == 0b11){
  8420  0D41  0021               	movlb	1	; select bank1
  8421  0D42  081E               	movf	30,w	;volatile
  8422  0D43  3903               	andlw	3
  8423  0D44  3A03               	xorlw	3
  8424  0D45  1903               	btfsc	3,2
  8425  0D46  2D60               	goto	l3063
  8426  0D47  2D67               	goto	l3065
  8427  0D48                     l3059:	
  8428                           ;main.c: 68: case 0b10:
  8429                           
  8430                           ;main.c: 67: switch (FVRCONbits.ADFVR){
  8431                           
  8432                           
  8433                           ;main.c: 69: adcSum/= 500;
  8434  0D48  3000               	movlw	0
  8435  0D49  0020               	movlb	0	; select bank0
  8436  0D4A  00BB               	movwf	___ftdiv@f2
  8437  0D4B  30FA               	movlw	250
  8438  0D4C  00BC               	movwf	___ftdiv@f2+1
  8439  0D4D  3043               	movlw	67
  8440  0D4E  00BD               	movwf	___ftdiv@f2+2
  8441  0D4F  0854               	movf	getADCValue@adcSum,w
  8442  0D50  00BE               	movwf	___ftdiv@f1
  8443  0D51  0855               	movf	getADCValue@adcSum+1,w
  8444  0D52  00BF               	movwf	___ftdiv@f1+1
  8445  0D53  0856               	movf	getADCValue@adcSum+2,w
  8446  0D54  00C0               	movwf	___ftdiv@f1+2
  8447  0D55  318D  256F  318C   	fcall	___ftdiv
  8448  0D58  0020               	movlb	0	; select bank0
  8449  0D59  083B               	movf	?___ftdiv,w
  8450  0D5A  00D4               	movwf	getADCValue@adcSum
  8451  0D5B  083C               	movf	?___ftdiv+1,w
  8452  0D5C  00D5               	movwf	getADCValue@adcSum+1
  8453  0D5D  083D               	movf	?___ftdiv+2,w
  8454  0D5E  00D6               	movwf	getADCValue@adcSum+2
  8455                           
  8456                           ;main.c: 71: }
  8457                           
  8458                           ;main.c: 70: break;
  8459  0D5F  2D67               	goto	l3065
  8460  0D60                     l3063:	
  8461  0D60  0022               	movlb	2	; select bank2
  8462  0D61  0817               	movf	23,w	;volatile
  8463  0D62  3903               	andlw	3
  8464                           
  8465                           ; Switch size 1, requested type "space"
  8466                           ; Number of cases is 1, Range of values is 2 to 2
  8467                           ; switch strategies available:
  8468                           ; Name         Instructions Cycles
  8469                           ; simple_byte            4     3 (average)
  8470                           ; direct_byte           11     9 (fixed)
  8471                           ; jumptable            263     9 (fixed)
  8472                           ;	Chosen strategy is simple_byte
  8473  0D63  3A02               	xorlw	2	; case 2
  8474  0D64  1903               	skipnz
  8475  0D65  2D48               	goto	l3059
  8476  0D66  2D67               	goto	l3065
  8477  0D67                     l3065:	
  8478                           
  8479                           ;main.c: 72: };main.c: 75: return adcSum;
  8480  0D67  0020               	movlb	0	; select bank0
  8481  0D68  0854               	movf	getADCValue@adcSum,w
  8482  0D69  00CB               	movwf	?_getADCValue
  8483  0D6A  0855               	movf	getADCValue@adcSum+1,w
  8484  0D6B  00CC               	movwf	?_getADCValue+1
  8485  0D6C  0856               	movf	getADCValue@adcSum+2,w
  8486  0D6D  00CD               	movwf	?_getADCValue+2
  8487  0D6E  0008               	return
  8488  0D6F                     __end_of_getADCValue:	
  8489                           
  8490                           	psect	text34
  8491  15A0                     __ptext34:	
  8492 ;; *************** function _doWDTSleep *****************
  8493 ;; Defined at:
  8494 ;;		line 21 in file "main.c"
  8495 ;; Parameters:    Size  Location     Type
  8496 ;;  wdtps           1    wreg     unsigned char 
  8497 ;; Auto vars:     Size  Location     Type
  8498 ;;  wdtps           1    1[BANK0 ] unsigned char 
  8499 ;; Return value:  Size  Location     Type
  8500 ;;                  1    wreg      void 
  8501 ;; Registers used:
  8502 ;;		wreg, status,2, status,0
  8503 ;; Tracked objects:
  8504 ;;		On entry : 0/0
  8505 ;;		On exit  : 0/0
  8506 ;;		Unchanged: 0/0
  8507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8509 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8510 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8511 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8512 ;;Total ram usage:        2 bytes
  8513 ;; Hardware stack levels used:    1
  8514 ;; Hardware stack levels required when called:    7
  8515 ;; This function calls:
  8516 ;;		Nothing
  8517 ;; This function is called by:
  8518 ;;		_getADCValue
  8519 ;;		_sleep
  8520 ;; This function uses a non-reentrant model
  8521 ;;
  8522                           
  8523                           
  8524                           ;psect for function _doWDTSleep
  8525  15A0                     _doWDTSleep:	
  8526                           
  8527                           ;incstack = 0
  8528                           ; Regs used in _doWDTSleep: [wreg+status,2+status,0]
  8529                           ;doWDTSleep@wdtps stored from wreg
  8530  15A0  0020               	movlb	0	; select bank0
  8531  15A1  00A1               	movwf	doWDTSleep@wdtps
  8532                           
  8533                           ;main.c: 24: WDTCONbits.WDTPS = wdtps;
  8534  15A2  0821               	movf	doWDTSleep@wdtps,w
  8535  15A3  00A0               	movwf	??_doWDTSleep
  8536  15A4  0DA0               	rlf	??_doWDTSleep,f
  8537  15A5  0021               	movlb	1	; select bank1
  8538  15A6  0817               	movf	23,w	;volatile
  8539  15A7  0020               	movlb	0	; select bank0
  8540  15A8  0620               	xorwf	??_doWDTSleep,w
  8541  15A9  39C1               	andlw	-63
  8542  15AA  0620               	xorwf	??_doWDTSleep,w
  8543  15AB  0021               	movlb	1	; select bank1
  8544  15AC  0097               	movwf	23	;volatile
  8545  15AD  0063               	sleep	;# 
  8546                           
  8547                           ;main.c: 28: __nop();
  8548  15AE  0000               	nop
  8549                           
  8550                           ;main.c: 29: __nop();
  8551  15AF  0000               	nop
  8552                           
  8553                           ;main.c: 31: WDTCONbits.WDTPS = 0b01101;
  8554  15B0  0021               	movlb	1	; select bank1
  8555  15B1  0817               	movf	23,w	;volatile
  8556  15B2  39C1               	andlw	-63
  8557  15B3  381A               	iorlw	26
  8558  15B4  0097               	movwf	23	;volatile
  8559  15B5  0064               	clrwdt	;# 
  8560  15B6  0008               	return
  8561  15B7                     __end_of_doWDTSleep:	
  8562                           
  8563                           	psect	text35
  8564  0D6F                     __ptext35:	
  8565 ;; *************** function ___ftdiv *****************
  8566 ;; Defined at:
  8567 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  8568 ;; Parameters:    Size  Location     Type
  8569 ;;  f2              3   27[BANK0 ] float 
  8570 ;;  f1              3   30[BANK0 ] float 
  8571 ;; Auto vars:     Size  Location     Type
  8572 ;;  f3              3   38[BANK0 ] float 
  8573 ;;  sign            1   42[BANK0 ] unsigned char 
  8574 ;;  exp             1   41[BANK0 ] unsigned char 
  8575 ;;  cntr            1   37[BANK0 ] unsigned char 
  8576 ;; Return value:  Size  Location     Type
  8577 ;;                  3   27[BANK0 ] float 
  8578 ;; Registers used:
  8579 ;;		wreg, status,2, status,0, pclath, cstack
  8580 ;; Tracked objects:
  8581 ;;		On entry : 0/0
  8582 ;;		On exit  : 0/0
  8583 ;;		Unchanged: 0/0
  8584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8585 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8586 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8587 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8588 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8589 ;;Total ram usage:       16 bytes
  8590 ;; Hardware stack levels used:    1
  8591 ;; Hardware stack levels required when called:    8
  8592 ;; This function calls:
  8593 ;;		___ftpack
  8594 ;; This function is called by:
  8595 ;;		_getADCValue
  8596 ;;		_loop
  8597 ;; This function uses a non-reentrant model
  8598 ;;
  8599                           
  8600                           
  8601                           ;psect for function ___ftdiv
  8602  0D6F                     ___ftdiv:	
  8603                           
  8604                           ;incstack = 0
  8605                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  8606  0D6F  0020               	movlb	0	; select bank0
  8607  0D70  083E               	movf	___ftdiv@f1,w
  8608  0D71  00C1               	movwf	??___ftdiv
  8609  0D72  083F               	movf	___ftdiv@f1+1,w
  8610  0D73  00C2               	movwf	??___ftdiv+1
  8611  0D74  0840               	movf	___ftdiv@f1+2,w
  8612  0D75  00C3               	movwf	??___ftdiv+2
  8613  0D76  1003               	clrc
  8614  0D77  0D42               	rlf	??___ftdiv+1,w
  8615  0D78  0D43               	rlf	??___ftdiv+2,w
  8616  0D79  00C4               	movwf	??___ftdiv+3
  8617  0D7A  0844               	movf	??___ftdiv+3,w
  8618  0D7B  00C9               	movwf	___ftdiv@exp
  8619  0D7C  0849               	movf	___ftdiv@exp,w
  8620  0D7D  1D03               	btfss	3,2
  8621  0D7E  2D86               	goto	l2941
  8622  0D7F  3000               	movlw	0
  8623  0D80  00BB               	movwf	?___ftdiv
  8624  0D81  3000               	movlw	0
  8625  0D82  00BC               	movwf	?___ftdiv+1
  8626  0D83  3000               	movlw	0
  8627  0D84  00BD               	movwf	?___ftdiv+2
  8628  0D85  0008               	return
  8629  0D86                     l2941:	
  8630  0D86  083B               	movf	___ftdiv@f2,w
  8631  0D87  00C1               	movwf	??___ftdiv
  8632  0D88  083C               	movf	___ftdiv@f2+1,w
  8633  0D89  00C2               	movwf	??___ftdiv+1
  8634  0D8A  083D               	movf	___ftdiv@f2+2,w
  8635  0D8B  00C3               	movwf	??___ftdiv+2
  8636  0D8C  1003               	clrc
  8637  0D8D  0D42               	rlf	??___ftdiv+1,w
  8638  0D8E  0D43               	rlf	??___ftdiv+2,w
  8639  0D8F  00C4               	movwf	??___ftdiv+3
  8640  0D90  0844               	movf	??___ftdiv+3,w
  8641  0D91  00CA               	movwf	___ftdiv@sign
  8642  0D92  084A               	movf	___ftdiv@sign,w
  8643  0D93  1D03               	btfss	3,2
  8644  0D94  2D9C               	goto	l2947
  8645  0D95  3000               	movlw	0
  8646  0D96  00BB               	movwf	?___ftdiv
  8647  0D97  3000               	movlw	0
  8648  0D98  00BC               	movwf	?___ftdiv+1
  8649  0D99  3000               	movlw	0
  8650  0D9A  00BD               	movwf	?___ftdiv+2
  8651  0D9B  0008               	return
  8652  0D9C                     l2947:	
  8653  0D9C  3000               	movlw	0
  8654  0D9D  00C6               	movwf	___ftdiv@f3
  8655  0D9E  3000               	movlw	0
  8656  0D9F  00C7               	movwf	___ftdiv@f3+1
  8657  0DA0  3000               	movlw	0
  8658  0DA1  00C8               	movwf	___ftdiv@f3+2
  8659  0DA2  3089               	movlw	137
  8660  0DA3  074A               	addwf	___ftdiv@sign,w
  8661  0DA4  00C1               	movwf	??___ftdiv
  8662  0DA5  0841               	movf	??___ftdiv,w
  8663  0DA6  02C9               	subwf	___ftdiv@exp,f
  8664  0DA7  083E               	movf	___ftdiv@f1,w
  8665  0DA8  00C1               	movwf	??___ftdiv
  8666  0DA9  083F               	movf	___ftdiv@f1+1,w
  8667  0DAA  00C2               	movwf	??___ftdiv+1
  8668  0DAB  0840               	movf	___ftdiv@f1+2,w
  8669  0DAC  00C3               	movwf	??___ftdiv+2
  8670  0DAD  3010               	movlw	16
  8671  0DAE                     u3175:	
  8672  0DAE  36C3               	lsrf	??___ftdiv+2,f
  8673  0DAF  0CC2               	rrf	??___ftdiv+1,f
  8674  0DB0  0CC1               	rrf	??___ftdiv,f
  8675  0DB1  0B89               	decfsz	9,f
  8676  0DB2  2DAE               	goto	u3175
  8677  0DB3  0841               	movf	??___ftdiv,w
  8678  0DB4  00C4               	movwf	??___ftdiv+3
  8679  0DB5  0844               	movf	??___ftdiv+3,w
  8680  0DB6  00CA               	movwf	___ftdiv@sign
  8681  0DB7  083B               	movf	___ftdiv@f2,w
  8682  0DB8  00C1               	movwf	??___ftdiv
  8683  0DB9  083C               	movf	___ftdiv@f2+1,w
  8684  0DBA  00C2               	movwf	??___ftdiv+1
  8685  0DBB  083D               	movf	___ftdiv@f2+2,w
  8686  0DBC  00C3               	movwf	??___ftdiv+2
  8687  0DBD  3010               	movlw	16
  8688  0DBE                     u3185:	
  8689  0DBE  36C3               	lsrf	??___ftdiv+2,f
  8690  0DBF  0CC2               	rrf	??___ftdiv+1,f
  8691  0DC0  0CC1               	rrf	??___ftdiv,f
  8692  0DC1  0B89               	decfsz	9,f
  8693  0DC2  2DBE               	goto	u3185
  8694  0DC3  0841               	movf	??___ftdiv,w
  8695  0DC4  00C4               	movwf	??___ftdiv+3
  8696  0DC5  0844               	movf	??___ftdiv+3,w
  8697  0DC6  06CA               	xorwf	___ftdiv@sign,f
  8698  0DC7  3080               	movlw	128
  8699  0DC8  00C1               	movwf	??___ftdiv
  8700  0DC9  0841               	movf	??___ftdiv,w
  8701  0DCA  05CA               	andwf	___ftdiv@sign,f
  8702  0DCB  17BF               	bsf	___ftdiv@f1+1,7
  8703  0DCC  30FF               	movlw	255
  8704  0DCD  05BE               	andwf	___ftdiv@f1,f
  8705  0DCE  30FF               	movlw	255
  8706  0DCF  05BF               	andwf	___ftdiv@f1+1,f
  8707  0DD0  3000               	movlw	0
  8708  0DD1  05C0               	andwf	___ftdiv@f1+2,f
  8709  0DD2  17BC               	bsf	___ftdiv@f2+1,7
  8710  0DD3  30FF               	movlw	255
  8711  0DD4  05BB               	andwf	___ftdiv@f2,f
  8712  0DD5  30FF               	movlw	255
  8713  0DD6  05BC               	andwf	___ftdiv@f2+1,f
  8714  0DD7  3000               	movlw	0
  8715  0DD8  05BD               	andwf	___ftdiv@f2+2,f
  8716  0DD9  3018               	movlw	24
  8717  0DDA  00C1               	movwf	??___ftdiv
  8718  0DDB  0841               	movf	??___ftdiv,w
  8719  0DDC  00C5               	movwf	___ftdiv@cntr
  8720  0DDD                     l2961:	
  8721  0DDD  3001               	movlw	1
  8722  0DDE                     u3195:	
  8723  0DDE  35C6               	lslf	___ftdiv@f3,f
  8724  0DDF  0DC7               	rlf	___ftdiv@f3+1,f
  8725  0DE0  0DC8               	rlf	___ftdiv@f3+2,f
  8726  0DE1  0B89               	decfsz	9,f
  8727  0DE2  2DDE               	goto	u3195
  8728  0DE3  083D               	movf	___ftdiv@f2+2,w
  8729  0DE4  0240               	subwf	___ftdiv@f1+2,w
  8730  0DE5  1D03               	skipz
  8731  0DE6  2DED               	goto	u3205
  8732  0DE7  083C               	movf	___ftdiv@f2+1,w
  8733  0DE8  023F               	subwf	___ftdiv@f1+1,w
  8734  0DE9  1D03               	skipz
  8735  0DEA  2DED               	goto	u3205
  8736  0DEB  083B               	movf	___ftdiv@f2,w
  8737  0DEC  023E               	subwf	___ftdiv@f1,w
  8738  0DED                     u3205:	
  8739  0DED  1C03               	skipc
  8740  0DEE  2DF6               	goto	l2969
  8741  0DEF  083B               	movf	___ftdiv@f2,w
  8742  0DF0  02BE               	subwf	___ftdiv@f1,f
  8743  0DF1  083C               	movf	___ftdiv@f2+1,w
  8744  0DF2  3BBF               	subwfb	___ftdiv@f1+1,f
  8745  0DF3  083D               	movf	___ftdiv@f2+2,w
  8746  0DF4  3BC0               	subwfb	___ftdiv@f1+2,f
  8747  0DF5  1446               	bsf	___ftdiv@f3,0
  8748  0DF6                     l2969:	
  8749  0DF6  3001               	movlw	1
  8750  0DF7                     u3215:	
  8751  0DF7  35BE               	lslf	___ftdiv@f1,f
  8752  0DF8  0DBF               	rlf	___ftdiv@f1+1,f
  8753  0DF9  0DC0               	rlf	___ftdiv@f1+2,f
  8754  0DFA  0B89               	decfsz	9,f
  8755  0DFB  2DF7               	goto	u3215
  8756  0DFC  3001               	movlw	1
  8757  0DFD  02C5               	subwf	___ftdiv@cntr,f
  8758  0DFE  1D03               	btfss	3,2
  8759  0DFF  2DDD               	goto	l2961
  8760  0E00  0846               	movf	___ftdiv@f3,w
  8761  0E01  00A0               	movwf	___ftpack@arg
  8762  0E02  0847               	movf	___ftdiv@f3+1,w
  8763  0E03  00A1               	movwf	___ftpack@arg+1
  8764  0E04  0848               	movf	___ftdiv@f3+2,w
  8765  0E05  00A2               	movwf	___ftpack@arg+2
  8766  0E06  0849               	movf	___ftdiv@exp,w
  8767  0E07  00C1               	movwf	??___ftdiv
  8768  0E08  0841               	movf	??___ftdiv,w
  8769  0E09  00A3               	movwf	___ftpack@exp
  8770  0E0A  084A               	movf	___ftdiv@sign,w
  8771  0E0B  00C2               	movwf	??___ftdiv+1
  8772  0E0C  0842               	movf	??___ftdiv+1,w
  8773  0E0D  00A4               	movwf	___ftpack@sign
  8774  0E0E  318A  22A8         	fcall	___ftpack
  8775  0E10  0020               	movlb	0	; select bank0
  8776  0E11  0820               	movf	?___ftpack,w
  8777  0E12  00BB               	movwf	?___ftdiv
  8778  0E13  0821               	movf	?___ftpack+1,w
  8779  0E14  00BC               	movwf	?___ftdiv+1
  8780  0E15  0822               	movf	?___ftpack+2,w
  8781  0E16  00BD               	movwf	?___ftdiv+2
  8782  0E17  0008               	return
  8783  0E18                     __end_of___ftdiv:	
  8784                           
  8785                           	psect	text36
  8786  0F0A                     __ptext36:	
  8787 ;; *************** function ___ftadd *****************
  8788 ;; Defined at:
  8789 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  8790 ;; Parameters:    Size  Location     Type
  8791 ;;  f1              3   14[BANK0 ] float 
  8792 ;;  f2              3   17[BANK0 ] float 
  8793 ;; Auto vars:     Size  Location     Type
  8794 ;;  exp1            1   26[BANK0 ] unsigned char 
  8795 ;;  exp2            1   25[BANK0 ] unsigned char 
  8796 ;;  sign            1   24[BANK0 ] unsigned char 
  8797 ;; Return value:  Size  Location     Type
  8798 ;;                  3   14[BANK0 ] float 
  8799 ;; Registers used:
  8800 ;;		wreg, status,2, status,0, pclath, cstack
  8801 ;; Tracked objects:
  8802 ;;		On entry : 0/0
  8803 ;;		On exit  : 0/0
  8804 ;;		Unchanged: 0/0
  8805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8806 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8807 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8808 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;Total ram usage:       13 bytes
  8811 ;; Hardware stack levels used:    1
  8812 ;; Hardware stack levels required when called:    8
  8813 ;; This function calls:
  8814 ;;		___ftpack
  8815 ;; This function is called by:
  8816 ;;		_getADCValue
  8817 ;;		_loop
  8818 ;;		___ftsub
  8819 ;; This function uses a non-reentrant model
  8820 ;;
  8821                           
  8822                           
  8823                           ;psect for function ___ftadd
  8824  0F0A                     ___ftadd:	
  8825                           
  8826                           ;incstack = 0
  8827                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8828  0F0A  0020               	movlb	0	; select bank0
  8829  0F0B  082E               	movf	___ftadd@f1,w
  8830  0F0C  00B4               	movwf	??___ftadd
  8831  0F0D  082F               	movf	___ftadd@f1+1,w
  8832  0F0E  00B5               	movwf	??___ftadd+1
  8833  0F0F  0830               	movf	___ftadd@f1+2,w
  8834  0F10  00B6               	movwf	??___ftadd+2
  8835  0F11  1003               	clrc
  8836  0F12  0D35               	rlf	??___ftadd+1,w
  8837  0F13  0D36               	rlf	??___ftadd+2,w
  8838  0F14  00B7               	movwf	??___ftadd+3
  8839  0F15  0837               	movf	??___ftadd+3,w
  8840  0F16  00BA               	movwf	___ftadd@exp1
  8841  0F17  0831               	movf	___ftadd@f2,w
  8842  0F18  00B4               	movwf	??___ftadd
  8843  0F19  0832               	movf	___ftadd@f2+1,w
  8844  0F1A  00B5               	movwf	??___ftadd+1
  8845  0F1B  0833               	movf	___ftadd@f2+2,w
  8846  0F1C  00B6               	movwf	??___ftadd+2
  8847  0F1D  1003               	clrc
  8848  0F1E  0D35               	rlf	??___ftadd+1,w
  8849  0F1F  0D36               	rlf	??___ftadd+2,w
  8850  0F20  00B7               	movwf	??___ftadd+3
  8851  0F21  0837               	movf	??___ftadd+3,w
  8852  0F22  00B9               	movwf	___ftadd@exp2
  8853  0F23  083A               	movf	___ftadd@exp1,w
  8854  0F24  1903               	btfsc	3,2
  8855  0F25  2F32               	goto	l2395
  8856  0F26  0839               	movf	___ftadd@exp2,w
  8857  0F27  023A               	subwf	___ftadd@exp1,w
  8858  0F28  1803               	skipnc
  8859  0F29  2F39               	goto	l2399
  8860  0F2A  033A               	decf	___ftadd@exp1,w
  8861  0F2B  3AFF               	xorlw	255
  8862  0F2C  0739               	addwf	___ftadd@exp2,w
  8863  0F2D  00B4               	movwf	??___ftadd
  8864  0F2E  3019               	movlw	25
  8865  0F2F  0234               	subwf	??___ftadd,w
  8866  0F30  1C03               	skipc
  8867  0F31  2F39               	goto	l2399
  8868  0F32                     l2395:	
  8869  0F32  0831               	movf	___ftadd@f2,w
  8870  0F33  00AE               	movwf	?___ftadd
  8871  0F34  0832               	movf	___ftadd@f2+1,w
  8872  0F35  00AF               	movwf	?___ftadd+1
  8873  0F36  0833               	movf	___ftadd@f2+2,w
  8874  0F37  00B0               	movwf	?___ftadd+2
  8875  0F38  0008               	return
  8876  0F39                     l2399:	
  8877  0F39  0839               	movf	___ftadd@exp2,w
  8878  0F3A  1903               	btfsc	3,2
  8879  0F3B  0008               	return
  8880  0F3C  083A               	movf	___ftadd@exp1,w
  8881  0F3D  0239               	subwf	___ftadd@exp2,w
  8882  0F3E  1803               	skipnc
  8883  0F3F  2F48               	goto	l2405
  8884  0F40  0339               	decf	___ftadd@exp2,w
  8885  0F41  3AFF               	xorlw	255
  8886  0F42  073A               	addwf	___ftadd@exp1,w
  8887  0F43  00B4               	movwf	??___ftadd
  8888  0F44  3019               	movlw	25
  8889  0F45  0234               	subwf	??___ftadd,w
  8890  0F46  1803               	btfsc	3,0
  8891  0F47  0008               	return
  8892  0F48                     l2405:	
  8893  0F48  3006               	movlw	6
  8894  0F49  00B4               	movwf	??___ftadd
  8895  0F4A  0834               	movf	??___ftadd,w
  8896  0F4B  00B8               	movwf	___ftadd@sign
  8897  0F4C  1BB0               	btfsc	___ftadd@f1+2,7
  8898  0F4D  17B8               	bsf	___ftadd@sign,7
  8899  0F4E  1BB3               	btfsc	___ftadd@f2+2,7
  8900  0F4F  1738               	bsf	___ftadd@sign,6
  8901  0F50  17AF               	bsf	___ftadd@f1+1,7
  8902  0F51  30FF               	movlw	255
  8903  0F52  05AE               	andwf	___ftadd@f1,f
  8904  0F53  30FF               	movlw	255
  8905  0F54  05AF               	andwf	___ftadd@f1+1,f
  8906  0F55  3000               	movlw	0
  8907  0F56  05B0               	andwf	___ftadd@f1+2,f
  8908  0F57  17B2               	bsf	___ftadd@f2+1,7
  8909  0F58  30FF               	movlw	255
  8910  0F59  05B1               	andwf	___ftadd@f2,f
  8911  0F5A  30FF               	movlw	255
  8912  0F5B  05B2               	andwf	___ftadd@f2+1,f
  8913  0F5C  3000               	movlw	0
  8914  0F5D  05B3               	andwf	___ftadd@f2+2,f
  8915  0F5E  0839               	movf	___ftadd@exp2,w
  8916  0F5F  023A               	subwf	___ftadd@exp1,w
  8917  0F60  1803               	skipnc
  8918  0F61  2F84               	goto	l2427
  8919  0F62                     l2417:	
  8920  0F62  3001               	movlw	1
  8921  0F63                     u2245:	
  8922  0F63  35B1               	lslf	___ftadd@f2,f
  8923  0F64  0DB2               	rlf	___ftadd@f2+1,f
  8924  0F65  0DB3               	rlf	___ftadd@f2+2,f
  8925  0F66  0B89               	decfsz	9,f
  8926  0F67  2F63               	goto	u2245
  8927  0F68  3001               	movlw	1
  8928  0F69  02B9               	subwf	___ftadd@exp2,f
  8929  0F6A  0839               	movf	___ftadd@exp2,w
  8930  0F6B  063A               	xorwf	___ftadd@exp1,w
  8931  0F6C  1903               	skipnz
  8932  0F6D  2F7F               	goto	l2425
  8933  0F6E  3001               	movlw	1
  8934  0F6F  02B8               	subwf	___ftadd@sign,f
  8935  0F70  0838               	movf	___ftadd@sign,w
  8936  0F71  3907               	andlw	7
  8937  0F72  1903               	btfsc	3,2
  8938  0F73  2F7F               	goto	l2425
  8939  0F74  2F62               	goto	l2417
  8940  0F75                     l2423:	
  8941  0F75  3001               	movlw	1
  8942  0F76                     u2275:	
  8943  0F76  36B0               	lsrf	___ftadd@f1+2,f
  8944  0F77  0CAF               	rrf	___ftadd@f1+1,f
  8945  0F78  0CAE               	rrf	___ftadd@f1,f
  8946  0F79  0B89               	decfsz	9,f
  8947  0F7A  2F76               	goto	u2275
  8948  0F7B  3001               	movlw	1
  8949  0F7C  00B4               	movwf	??___ftadd
  8950  0F7D  0834               	movf	??___ftadd,w
  8951  0F7E  07BA               	addwf	___ftadd@exp1,f
  8952  0F7F                     l2425:	
  8953  0F7F  083A               	movf	___ftadd@exp1,w
  8954  0F80  0639               	xorwf	___ftadd@exp2,w
  8955  0F81  1903               	btfsc	3,2
  8956  0F82  2FA9               	goto	l683
  8957  0F83  2F75               	goto	l2423
  8958  0F84                     l2427:	
  8959  0F84  083A               	movf	___ftadd@exp1,w
  8960  0F85  0239               	subwf	___ftadd@exp2,w
  8961  0F86  1803               	skipnc
  8962  0F87  2FA9               	goto	l683
  8963  0F88                     l2429:	
  8964  0F88  3001               	movlw	1
  8965  0F89                     u2305:	
  8966  0F89  35AE               	lslf	___ftadd@f1,f
  8967  0F8A  0DAF               	rlf	___ftadd@f1+1,f
  8968  0F8B  0DB0               	rlf	___ftadd@f1+2,f
  8969  0F8C  0B89               	decfsz	9,f
  8970  0F8D  2F89               	goto	u2305
  8971  0F8E  3001               	movlw	1
  8972  0F8F  02BA               	subwf	___ftadd@exp1,f
  8973  0F90  0839               	movf	___ftadd@exp2,w
  8974  0F91  063A               	xorwf	___ftadd@exp1,w
  8975  0F92  1903               	skipnz
  8976  0F93  2FA5               	goto	l2437
  8977  0F94  3001               	movlw	1
  8978  0F95  02B8               	subwf	___ftadd@sign,f
  8979  0F96  0838               	movf	___ftadd@sign,w
  8980  0F97  3907               	andlw	7
  8981  0F98  1903               	btfsc	3,2
  8982  0F99  2FA5               	goto	l2437
  8983  0F9A  2F88               	goto	l2429
  8984  0F9B                     l2435:	
  8985  0F9B  3001               	movlw	1
  8986  0F9C                     u2335:	
  8987  0F9C  36B3               	lsrf	___ftadd@f2+2,f
  8988  0F9D  0CB2               	rrf	___ftadd@f2+1,f
  8989  0F9E  0CB1               	rrf	___ftadd@f2,f
  8990  0F9F  0B89               	decfsz	9,f
  8991  0FA0  2F9C               	goto	u2335
  8992  0FA1  3001               	movlw	1
  8993  0FA2  00B4               	movwf	??___ftadd
  8994  0FA3  0834               	movf	??___ftadd,w
  8995  0FA4  07B9               	addwf	___ftadd@exp2,f
  8996  0FA5                     l2437:	
  8997  0FA5  083A               	movf	___ftadd@exp1,w
  8998  0FA6  0639               	xorwf	___ftadd@exp2,w
  8999  0FA7  1D03               	skipz
  9000  0FA8  2F9B               	goto	l2435
  9001  0FA9                     l683:	
  9002  0FA9  1FB8               	btfss	___ftadd@sign,7
  9003  0FAA  2FBB               	goto	l2441
  9004  0FAB  30FF               	movlw	255
  9005  0FAC  06AE               	xorwf	___ftadd@f1,f
  9006  0FAD  30FF               	movlw	255
  9007  0FAE  06AF               	xorwf	___ftadd@f1+1,f
  9008  0FAF  30FF               	movlw	255
  9009  0FB0  06B0               	xorwf	___ftadd@f1+2,f
  9010  0FB1  3001               	movlw	1
  9011  0FB2  07AE               	addwf	___ftadd@f1,f
  9012  0FB3  3000               	movlw	0
  9013  0FB4  1803               	skipnc
  9014  0FB5  3001               	movlw	1
  9015  0FB6  07AF               	addwf	___ftadd@f1+1,f
  9016  0FB7  3000               	movlw	0
  9017  0FB8  1803               	skipnc
  9018  0FB9  3001               	movlw	1
  9019  0FBA  07B0               	addwf	___ftadd@f1+2,f
  9020  0FBB                     l2441:	
  9021  0FBB  1F38               	btfss	___ftadd@sign,6
  9022  0FBC  2FCD               	goto	l2445
  9023  0FBD  30FF               	movlw	255
  9024  0FBE  06B1               	xorwf	___ftadd@f2,f
  9025  0FBF  30FF               	movlw	255
  9026  0FC0  06B2               	xorwf	___ftadd@f2+1,f
  9027  0FC1  30FF               	movlw	255
  9028  0FC2  06B3               	xorwf	___ftadd@f2+2,f
  9029  0FC3  3001               	movlw	1
  9030  0FC4  07B1               	addwf	___ftadd@f2,f
  9031  0FC5  3000               	movlw	0
  9032  0FC6  1803               	skipnc
  9033  0FC7  3001               	movlw	1
  9034  0FC8  07B2               	addwf	___ftadd@f2+1,f
  9035  0FC9  3000               	movlw	0
  9036  0FCA  1803               	skipnc
  9037  0FCB  3001               	movlw	1
  9038  0FCC  07B3               	addwf	___ftadd@f2+2,f
  9039  0FCD                     l2445:	
  9040  0FCD  01B8               	clrf	___ftadd@sign
  9041  0FCE  082E               	movf	___ftadd@f1,w
  9042  0FCF  07B1               	addwf	___ftadd@f2,f
  9043  0FD0  082F               	movf	___ftadd@f1+1,w
  9044  0FD1  3DB2               	addwfc	___ftadd@f2+1,f
  9045  0FD2  0830               	movf	___ftadd@f1+2,w
  9046  0FD3  3DB3               	addwfc	___ftadd@f2+2,f
  9047  0FD4  1FB3               	btfss	___ftadd@f2+2,7
  9048  0FD5  2FE8               	goto	l2455
  9049  0FD6  30FF               	movlw	255
  9050  0FD7  06B1               	xorwf	___ftadd@f2,f
  9051  0FD8  30FF               	movlw	255
  9052  0FD9  06B2               	xorwf	___ftadd@f2+1,f
  9053  0FDA  30FF               	movlw	255
  9054  0FDB  06B3               	xorwf	___ftadd@f2+2,f
  9055  0FDC  3001               	movlw	1
  9056  0FDD  07B1               	addwf	___ftadd@f2,f
  9057  0FDE  3000               	movlw	0
  9058  0FDF  1803               	skipnc
  9059  0FE0  3001               	movlw	1
  9060  0FE1  07B2               	addwf	___ftadd@f2+1,f
  9061  0FE2  3000               	movlw	0
  9062  0FE3  1803               	skipnc
  9063  0FE4  3001               	movlw	1
  9064  0FE5  07B3               	addwf	___ftadd@f2+2,f
  9065  0FE6  01B8               	clrf	___ftadd@sign
  9066  0FE7  0AB8               	incf	___ftadd@sign,f
  9067  0FE8                     l2455:	
  9068  0FE8  0831               	movf	___ftadd@f2,w
  9069  0FE9  00A0               	movwf	___ftpack@arg
  9070  0FEA  0832               	movf	___ftadd@f2+1,w
  9071  0FEB  00A1               	movwf	___ftpack@arg+1
  9072  0FEC  0833               	movf	___ftadd@f2+2,w
  9073  0FED  00A2               	movwf	___ftpack@arg+2
  9074  0FEE  083A               	movf	___ftadd@exp1,w
  9075  0FEF  00B4               	movwf	??___ftadd
  9076  0FF0  0834               	movf	??___ftadd,w
  9077  0FF1  00A3               	movwf	___ftpack@exp
  9078  0FF2  0838               	movf	___ftadd@sign,w
  9079  0FF3  00B5               	movwf	??___ftadd+1
  9080  0FF4  0835               	movf	??___ftadd+1,w
  9081  0FF5  00A4               	movwf	___ftpack@sign
  9082  0FF6  318A  22A8         	fcall	___ftpack
  9083  0FF8  0020               	movlb	0	; select bank0
  9084  0FF9  0820               	movf	?___ftpack,w
  9085  0FFA  00AE               	movwf	?___ftadd
  9086  0FFB  0821               	movf	?___ftpack+1,w
  9087  0FFC  00AF               	movwf	?___ftadd+1
  9088  0FFD  0822               	movf	?___ftpack+2,w
  9089  0FFE  00B0               	movwf	?___ftadd+2
  9090  0FFF  0008               	return
  9091  1000                     __end_of___ftadd:	
  9092                           
  9093                           	psect	text37
  9094  16F3                     __ptext37:	
  9095 ;; *************** function ___awtoft *****************
  9096 ;; Defined at:
  9097 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9098 ;; Parameters:    Size  Location     Type
  9099 ;;  c               2    8[BANK0 ] int 
  9100 ;; Auto vars:     Size  Location     Type
  9101 ;;  sign            1   13[BANK0 ] unsigned char 
  9102 ;; Return value:  Size  Location     Type
  9103 ;;                  3    8[BANK0 ] float 
  9104 ;; Registers used:
  9105 ;;		wreg, status,2, status,0, pclath, cstack
  9106 ;; Tracked objects:
  9107 ;;		On entry : 0/0
  9108 ;;		On exit  : 0/0
  9109 ;;		Unchanged: 0/0
  9110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9111 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9112 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9113 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9114 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9115 ;;Total ram usage:        6 bytes
  9116 ;; Hardware stack levels used:    1
  9117 ;; Hardware stack levels required when called:    8
  9118 ;; This function calls:
  9119 ;;		___ftpack
  9120 ;; This function is called by:
  9121 ;;		_getADCValue
  9122 ;; This function uses a non-reentrant model
  9123 ;;
  9124                           
  9125                           
  9126                           ;psect for function ___awtoft
  9127  16F3                     ___awtoft:	
  9128                           
  9129                           ;incstack = 0
  9130                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  9131  16F3  0020               	movlb	0	; select bank0
  9132  16F4  01AD               	clrf	___awtoft@sign
  9133  16F5  1FA9               	btfss	___awtoft@c+1,7
  9134  16F6  2EFE               	goto	l2931
  9135  16F7  09A8               	comf	___awtoft@c,f
  9136  16F8  09A9               	comf	___awtoft@c+1,f
  9137  16F9  0AA8               	incf	___awtoft@c,f
  9138  16FA  1903               	skipnz
  9139  16FB  0AA9               	incf	___awtoft@c+1,f
  9140  16FC  01AD               	clrf	___awtoft@sign
  9141  16FD  0AAD               	incf	___awtoft@sign,f
  9142  16FE                     l2931:	
  9143  16FE  0828               	movf	___awtoft@c,w
  9144  16FF  00A0               	movwf	___ftpack@arg
  9145  1700  0829               	movf	___awtoft@c+1,w
  9146  1701  00A1               	movwf	___ftpack@arg+1
  9147  1702  01A2               	clrf	___ftpack@arg+2
  9148  1703  308E               	movlw	142
  9149  1704  00AB               	movwf	??___awtoft
  9150  1705  082B               	movf	??___awtoft,w
  9151  1706  00A3               	movwf	___ftpack@exp
  9152  1707  082D               	movf	___awtoft@sign,w
  9153  1708  00AC               	movwf	??___awtoft+1
  9154  1709  082C               	movf	??___awtoft+1,w
  9155  170A  00A4               	movwf	___ftpack@sign
  9156  170B  318A  22A8         	fcall	___ftpack
  9157  170D  0020               	movlb	0	; select bank0
  9158  170E  0820               	movf	?___ftpack,w
  9159  170F  00A8               	movwf	?___awtoft
  9160  1710  0821               	movf	?___ftpack+1,w
  9161  1711  00A9               	movwf	?___awtoft+1
  9162  1712  0822               	movf	?___ftpack+2,w
  9163  1713  00AA               	movwf	?___awtoft+2
  9164  1714  0008               	return
  9165  1715                     __end_of___awtoft:	
  9166                           
  9167                           	psect	text38
  9168  1603                     __ptext38:	
  9169 ;; *************** function ___lbtoft *****************
  9170 ;; Defined at:
  9171 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
  9172 ;; Parameters:    Size  Location     Type
  9173 ;;  c               1    wreg     unsigned char 
  9174 ;; Auto vars:     Size  Location     Type
  9175 ;;  c               1   15[BANK0 ] unsigned char 
  9176 ;; Return value:  Size  Location     Type
  9177 ;;                  3    8[BANK0 ] float 
  9178 ;; Registers used:
  9179 ;;		wreg, status,2, status,0, pclath, cstack
  9180 ;; Tracked objects:
  9181 ;;		On entry : 0/0
  9182 ;;		On exit  : 0/0
  9183 ;;		Unchanged: 0/0
  9184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9185 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9186 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9187 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9188 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9189 ;;Total ram usage:        8 bytes
  9190 ;; Hardware stack levels used:    1
  9191 ;; Hardware stack levels required when called:    8
  9192 ;; This function calls:
  9193 ;;		___ftpack
  9194 ;; This function is called by:
  9195 ;;		_loop
  9196 ;; This function uses a non-reentrant model
  9197 ;;
  9198                           
  9199                           
  9200                           ;psect for function ___lbtoft
  9201  1603                     ___lbtoft:	
  9202                           
  9203                           ;incstack = 0
  9204                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  9205                           ;___lbtoft@c stored from wreg
  9206  1603  0020               	movlb	0	; select bank0
  9207  1604  00AF               	movwf	___lbtoft@c
  9208  1605  082F               	movf	___lbtoft@c,w
  9209  1606  00AB               	movwf	??___lbtoft
  9210  1607  01AC               	clrf	??___lbtoft+1
  9211  1608  01AD               	clrf	??___lbtoft+2
  9212  1609  082B               	movf	??___lbtoft,w
  9213  160A  00A0               	movwf	___ftpack@arg
  9214  160B  082C               	movf	??___lbtoft+1,w
  9215  160C  00A1               	movwf	___ftpack@arg+1
  9216  160D  082D               	movf	??___lbtoft+2,w
  9217  160E  00A2               	movwf	___ftpack@arg+2
  9218  160F  308E               	movlw	142
  9219  1610  00AE               	movwf	??___lbtoft+3
  9220  1611  082E               	movf	??___lbtoft+3,w
  9221  1612  00A3               	movwf	___ftpack@exp
  9222  1613  01A4               	clrf	___ftpack@sign
  9223  1614  318A  22A8         	fcall	___ftpack
  9224  1616  0020               	movlb	0	; select bank0
  9225  1617  0820               	movf	?___ftpack,w
  9226  1618  00A8               	movwf	?___lbtoft
  9227  1619  0821               	movf	?___ftpack+1,w
  9228  161A  00A9               	movwf	?___lbtoft+1
  9229  161B  0822               	movf	?___ftpack+2,w
  9230  161C  00AA               	movwf	?___lbtoft+2
  9231  161D  0008               	return
  9232  161E                     __end_of___lbtoft:	
  9233                           
  9234                           	psect	text39
  9235  158B                     __ptext39:	
  9236 ;; *************** function ___lwtoft *****************
  9237 ;; Defined at:
  9238 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
  9239 ;; Parameters:    Size  Location     Type
  9240 ;;  c               2    8[BANK0 ] unsigned int 
  9241 ;; Auto vars:     Size  Location     Type
  9242 ;;		None
  9243 ;; Return value:  Size  Location     Type
  9244 ;;                  3    8[BANK0 ] float 
  9245 ;; Registers used:
  9246 ;;		wreg, status,2, status,0, pclath, cstack
  9247 ;; Tracked objects:
  9248 ;;		On entry : 0/0
  9249 ;;		On exit  : 0/0
  9250 ;;		Unchanged: 0/0
  9251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9252 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9254 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9255 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9256 ;;Total ram usage:        4 bytes
  9257 ;; Hardware stack levels used:    1
  9258 ;; Hardware stack levels required when called:    8
  9259 ;; This function calls:
  9260 ;;		___ftpack
  9261 ;; This function is called by:
  9262 ;;		_main
  9263 ;; This function uses a non-reentrant model
  9264 ;;
  9265                           
  9266                           
  9267                           ;psect for function ___lwtoft
  9268  158B                     ___lwtoft:	
  9269                           
  9270                           ;incstack = 0
  9271                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  9272  158B  0020               	movlb	0	; select bank0
  9273  158C  0828               	movf	___lwtoft@c,w
  9274  158D  00A0               	movwf	___ftpack@arg
  9275  158E  0829               	movf	___lwtoft@c+1,w
  9276  158F  00A1               	movwf	___ftpack@arg+1
  9277  1590  01A2               	clrf	___ftpack@arg+2
  9278  1591  308E               	movlw	142
  9279  1592  00AB               	movwf	??___lwtoft
  9280  1593  082B               	movf	??___lwtoft,w
  9281  1594  00A3               	movwf	___ftpack@exp
  9282  1595  01A4               	clrf	___ftpack@sign
  9283  1596  318A  22A8         	fcall	___ftpack
  9284  1598  0020               	movlb	0	; select bank0
  9285  1599  0820               	movf	?___ftpack,w
  9286  159A  00A8               	movwf	?___lwtoft
  9287  159B  0821               	movf	?___ftpack+1,w
  9288  159C  00A9               	movwf	?___lwtoft+1
  9289  159D  0822               	movf	?___ftpack+2,w
  9290  159E  00AA               	movwf	?___lwtoft+2
  9291  159F  0008               	return
  9292  15A0                     __end_of___lwtoft:	
  9293                           
  9294                           	psect	text40
  9295  0AA8                     __ptext40:	
  9296 ;; *************** function ___ftpack *****************
  9297 ;; Defined at:
  9298 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  9299 ;; Parameters:    Size  Location     Type
  9300 ;;  arg             3    0[BANK0 ] unsigned um
  9301 ;;  exp             1    3[BANK0 ] unsigned char 
  9302 ;;  sign            1    4[BANK0 ] unsigned char 
  9303 ;; Auto vars:     Size  Location     Type
  9304 ;;		None
  9305 ;; Return value:  Size  Location     Type
  9306 ;;                  3    0[BANK0 ] float 
  9307 ;; Registers used:
  9308 ;;		wreg, status,2, status,0
  9309 ;; Tracked objects:
  9310 ;;		On entry : 0/0
  9311 ;;		On exit  : 0/0
  9312 ;;		Unchanged: 0/0
  9313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9314 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9316 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;Total ram usage:        8 bytes
  9319 ;; Hardware stack levels used:    1
  9320 ;; Hardware stack levels required when called:    7
  9321 ;; This function calls:
  9322 ;;		Nothing
  9323 ;; This function is called by:
  9324 ;;		___awtoft
  9325 ;;		___ftadd
  9326 ;;		___ftdiv
  9327 ;;		___ftmul
  9328 ;;		___lbtoft
  9329 ;;		___lltoft
  9330 ;;		___lwtoft
  9331 ;; This function uses a non-reentrant model
  9332 ;;
  9333                           
  9334                           
  9335                           ;psect for function ___ftpack
  9336  0AA8                     ___ftpack:	
  9337                           
  9338                           ;incstack = 0
  9339                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9340  0AA8  0020               	movlb	0	; select bank0
  9341  0AA9  0823               	movf	___ftpack@exp,w
  9342  0AAA  1903               	btfsc	3,2
  9343  0AAB  2AB1               	goto	l2245
  9344  0AAC  0822               	movf	___ftpack@arg+2,w
  9345  0AAD  0421               	iorwf	___ftpack@arg+1,w
  9346  0AAE  0420               	iorwf	___ftpack@arg,w
  9347  0AAF  1D03               	skipz
  9348  0AB0  2AC2               	goto	l2251
  9349  0AB1                     l2245:	
  9350  0AB1  3000               	movlw	0
  9351  0AB2  00A0               	movwf	?___ftpack
  9352  0AB3  3000               	movlw	0
  9353  0AB4  00A1               	movwf	?___ftpack+1
  9354  0AB5  3000               	movlw	0
  9355  0AB6  00A2               	movwf	?___ftpack+2
  9356  0AB7  0008               	return
  9357  0AB8                     l2249:	
  9358  0AB8  3001               	movlw	1
  9359  0AB9  00A5               	movwf	??___ftpack
  9360  0ABA  0825               	movf	??___ftpack,w
  9361  0ABB  07A3               	addwf	___ftpack@exp,f
  9362  0ABC  3001               	movlw	1
  9363  0ABD                     u1855:	
  9364  0ABD  36A2               	lsrf	___ftpack@arg+2,f
  9365  0ABE  0CA1               	rrf	___ftpack@arg+1,f
  9366  0ABF  0CA0               	rrf	___ftpack@arg,f
  9367  0AC0  0B89               	decfsz	9,f
  9368  0AC1  2ABD               	goto	u1855
  9369  0AC2                     l2251:	
  9370  0AC2  30FE               	movlw	254
  9371  0AC3  0522               	andwf	___ftpack@arg+2,w
  9372  0AC4  1903               	btfsc	3,2
  9373  0AC5  2ADB               	goto	l652
  9374  0AC6  2AB8               	goto	l2249
  9375  0AC7                     l2253:	
  9376  0AC7  3001               	movlw	1
  9377  0AC8  00A5               	movwf	??___ftpack
  9378  0AC9  0825               	movf	??___ftpack,w
  9379  0ACA  07A3               	addwf	___ftpack@exp,f
  9380  0ACB  3001               	movlw	1
  9381  0ACC  07A0               	addwf	___ftpack@arg,f
  9382  0ACD  3000               	movlw	0
  9383  0ACE  1803               	skipnc
  9384  0ACF  3001               	movlw	1
  9385  0AD0  07A1               	addwf	___ftpack@arg+1,f
  9386  0AD1  3000               	movlw	0
  9387  0AD2  1803               	skipnc
  9388  0AD3  3001               	movlw	1
  9389  0AD4  07A2               	addwf	___ftpack@arg+2,f
  9390  0AD5  3001               	movlw	1
  9391  0AD6                     u1875:	
  9392  0AD6  36A2               	lsrf	___ftpack@arg+2,f
  9393  0AD7  0CA1               	rrf	___ftpack@arg+1,f
  9394  0AD8  0CA0               	rrf	___ftpack@arg,f
  9395  0AD9  0B89               	decfsz	9,f
  9396  0ADA  2AD6               	goto	u1875
  9397  0ADB                     l652:	
  9398  0ADB  30FF               	movlw	255
  9399  0ADC  0522               	andwf	___ftpack@arg+2,w
  9400  0ADD  1903               	btfsc	3,2
  9401  0ADE  2AE8               	goto	l2261
  9402  0ADF  2AC7               	goto	l2253
  9403  0AE0                     l2259:	
  9404  0AE0  3001               	movlw	1
  9405  0AE1  02A3               	subwf	___ftpack@exp,f
  9406  0AE2  3001               	movlw	1
  9407  0AE3                     u1895:	
  9408  0AE3  35A0               	lslf	___ftpack@arg,f
  9409  0AE4  0DA1               	rlf	___ftpack@arg+1,f
  9410  0AE5  0DA2               	rlf	___ftpack@arg+2,f
  9411  0AE6  0B89               	decfsz	9,f
  9412  0AE7  2AE3               	goto	u1895
  9413  0AE8                     l2261:	
  9414  0AE8  1BA1               	btfsc	___ftpack@arg+1,7
  9415  0AE9  2AEE               	goto	l659
  9416  0AEA  3002               	movlw	2
  9417  0AEB  0223               	subwf	___ftpack@exp,w
  9418  0AEC  1803               	skipnc
  9419  0AED  2AE0               	goto	l2259
  9420  0AEE                     l659:	
  9421  0AEE  1823               	btfsc	___ftpack@exp,0
  9422  0AEF  2AF6               	goto	l660
  9423  0AF0  30FF               	movlw	255
  9424  0AF1  05A0               	andwf	___ftpack@arg,f
  9425  0AF2  307F               	movlw	127
  9426  0AF3  05A1               	andwf	___ftpack@arg+1,f
  9427  0AF4  30FF               	movlw	255
  9428  0AF5  05A2               	andwf	___ftpack@arg+2,f
  9429  0AF6                     l660:	
  9430  0AF6  1003               	clrc
  9431  0AF7  0CA3               	rrf	___ftpack@exp,f
  9432  0AF8  0823               	movf	___ftpack@exp,w
  9433  0AF9  00A5               	movwf	??___ftpack
  9434  0AFA  01A6               	clrf	??___ftpack+1
  9435  0AFB  01A7               	clrf	??___ftpack+2
  9436  0AFC  3010               	movlw	16
  9437  0AFD                     u1935:	
  9438  0AFD  35A5               	lslf	??___ftpack,f
  9439  0AFE  0DA6               	rlf	??___ftpack+1,f
  9440  0AFF  0DA7               	rlf	??___ftpack+2,f
  9441  0B00  0B89               	decfsz	9,f
  9442  0B01  2AFD               	goto	u1935
  9443  0B02  0825               	movf	??___ftpack,w
  9444  0B03  04A0               	iorwf	___ftpack@arg,f
  9445  0B04  0826               	movf	??___ftpack+1,w
  9446  0B05  04A1               	iorwf	___ftpack@arg+1,f
  9447  0B06  0827               	movf	??___ftpack+2,w
  9448  0B07  04A2               	iorwf	___ftpack@arg+2,f
  9449  0B08  0824               	movf	___ftpack@sign,w
  9450  0B09  1903               	btfsc	3,2
  9451  0B0A  0008               	return
  9452  0B0B  17A2               	bsf	___ftpack@arg+2,7
  9453  0B0C  0008               	return
  9454  0B0D                     __end_of___ftpack:	
  9455                           
  9456                           	psect	intentry
  9457  0004                     __pintentry:	
  9458 ;; *************** function _ISR *****************
  9459 ;; Defined at:
  9460 ;;		line 13 in file "main.c"
  9461 ;; Parameters:    Size  Location     Type
  9462 ;;		None
  9463 ;; Auto vars:     Size  Location     Type
  9464 ;;		None
  9465 ;; Return value:  Size  Location     Type
  9466 ;;                  1    wreg      void 
  9467 ;; Registers used:
  9468 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9469 ;; Tracked objects:
  9470 ;;		On entry : 0/0
  9471 ;;		On exit  : 0/0
  9472 ;;		Unchanged: 0/0
  9473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9478 ;;Total ram usage:        0 bytes
  9479 ;; Hardware stack levels used:    1
  9480 ;; Hardware stack levels required when called:    6
  9481 ;; This function calls:
  9482 ;;		_nrf24l01ISR
  9483 ;; This function is called by:
  9484 ;;		Interrupt level 1
  9485 ;; This function uses a non-reentrant model
  9486 ;;
  9487                           
  9488  0004                     _ISR:	
  9489                           
  9490                           ;incstack = 0
  9491  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9492                           
  9493                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9494  0005  3180               	pagesel	$
  9495                           
  9496                           ;main.c: 15: if (PIR0bits.INTF){
  9497  0006  0020               	movlb	0	; select bank0
  9498  0007  1C10               	btfss	16,0	;volatile
  9499  0008  280D               	goto	i1l153
  9500                           
  9501                           ;main.c: 16: nrf24l01ISR();
  9502  0009  318A  2245         	fcall	_nrf24l01ISR
  9503                           
  9504                           ;main.c: 17: PIR0bits.INTF = 0;
  9505  000B  0020               	movlb	0	; select bank0
  9506  000C  1010               	bcf	16,0	;volatile
  9507  000D                     i1l153:	
  9508  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9509  000E  0009               	retfie
  9510  000F                     __end_of_ISR:	
  9511                           
  9512                           	psect	text42
  9513  0A45                     __ptext42:	
  9514 ;; *************** function _nrf24l01ISR *****************
  9515 ;; Defined at:
  9516 ;;		line 235 in file "nrf24l01.c"
  9517 ;; Parameters:    Size  Location     Type
  9518 ;;		None
  9519 ;; Auto vars:     Size  Location     Type
  9520 ;;		None
  9521 ;; Return value:  Size  Location     Type
  9522 ;;                  1    wreg      void 
  9523 ;; Registers used:
  9524 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9525 ;; Tracked objects:
  9526 ;;		On entry : 0/0
  9527 ;;		On exit  : 0/0
  9528 ;;		Unchanged: 0/0
  9529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9533 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9534 ;;Total ram usage:        1 bytes
  9535 ;; Hardware stack levels used:    1
  9536 ;; Hardware stack levels required when called:    5
  9537 ;; This function calls:
  9538 ;;		i1_nrf24l01Send
  9539 ;;		i1_nrf24l01Service
  9540 ;;		i1_nrf24l01SetRXMode
  9541 ;; This function is called by:
  9542 ;;		_ISR
  9543 ;; This function uses a non-reentrant model
  9544 ;;
  9545                           
  9546                           
  9547                           ;psect for function _nrf24l01ISR
  9548  0A45                     _nrf24l01ISR:	
  9549                           
  9550                           ;nrf24l01.c: 237: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  9551                           
  9552                           ;incstack = 0
  9553                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9554  0A45  01F1               	clrf	i1nrf24l01Send@data
  9555  0A46  3007               	movlw	7
  9556  0A47  3195  25E8  318A   	fcall	i1_nrf24l01Send
  9557  0A4A  00FC               	movwf	??_nrf24l01ISR
  9558  0A4B  087C               	movf	??_nrf24l01ISR,w
  9559  0A4C  0021               	movlb	1	; select bank1
  9560  0A4D  00E8               	movwf	(_status^(0+128)+1)	;volatile
  9561                           
  9562                           ;nrf24l01.c: 239: if (status.statusRegister.TX_DS){
  9563  0A4E  1EE8               	btfss	(_status^(0+128)+1),5	;volatile
  9564  0A4F  2A81               	goto	i1l274
  9565                           
  9566                           ;nrf24l01.c: 241: if (status.TX == statuses.TX.Sending){
  9567  0A50  3036               	movlw	low ((_statuses+2)| (0+32768))
  9568  0A51  0084               	movwf	4
  9569  0A52  3098               	movlw	high ((_statuses+2)| (0+32768))
  9570  0A53  0085               	movwf	5
  9571  0A54  0800               	movf	0,w	;code access
  9572  0A55  00FC               	movwf	??_nrf24l01ISR
  9573  0A56  0867               	movf	_status^(0+128),w	;volatile
  9574  0A57  390F               	andlw	15
  9575  0A58  067C               	xorwf	??_nrf24l01ISR,w
  9576  0A59  1D03               	skipz
  9577  0A5A  2A80               	goto	i1l275
  9578                           
  9579                           ;nrf24l01.c: 243: if (TXPacket.packetData.ACKRequest){
  9580  0A5B  0023               	movlb	3	; select bank3
  9581  0A5C  1D41               	btfss	_TXPacket^(0+384),2
  9582  0A5D  2A73               	goto	i1l3729
  9583                           
  9584                           ;nrf24l01.c: 244: status.TX = statuses.TX.PendingACK;
  9585  0A5E  3037               	movlw	low ((_statuses+3)| (0+32768))
  9586  0A5F  0084               	movwf	4
  9587  0A60  3098               	movlw	high ((_statuses+3)| (0+32768))
  9588  0A61  0085               	movwf	5
  9589  0A62  0800               	movf	0,w	;code access
  9590  0A63  00FC               	movwf	??_nrf24l01ISR
  9591  0A64  0021               	movlb	1	; select bank1
  9592  0A65  0867               	movf	_status^(0+128),w	;volatile
  9593  0A66  067C               	xorwf	??_nrf24l01ISR,w
  9594  0A67  39F0               	andlw	-16
  9595  0A68  067C               	xorwf	??_nrf24l01ISR,w
  9596  0A69  00E7               	movwf	_status^(0+128)	;volatile
  9597                           
  9598                           ;nrf24l01.c: 245: status.retryCount = 0xFF;
  9599  0A6A  30FF               	movlw	255
  9600  0A6B  00FC               	movwf	??_nrf24l01ISR
  9601  0A6C  087C               	movf	??_nrf24l01ISR,w
  9602  0A6D  00EA               	movwf	(_status^(0+128)+3)	;volatile
  9603                           
  9604                           ;nrf24l01.c: 246: nrf24l01SetRXMode(1);
  9605  0A6E  3001               	movlw	1
  9606  0A6F  3197  2737  318A   	fcall	i1_nrf24l01SetRXMode
  9607                           
  9608                           ;nrf24l01.c: 247: }else{
  9609  0A72  2A81               	goto	i1l274
  9610  0A73                     i1l3729:	
  9611                           
  9612                           ;nrf24l01.c: 248: status.TX = statuses.TX.Idle;
  9613  0A73  3034               	movlw	low (_statuses| (0+32768))
  9614  0A74  0084               	movwf	4
  9615  0A75  3098               	movlw	high (_statuses| (0+32768))
  9616  0A76  0085               	movwf	5
  9617  0A77  0800               	movf	0,w	;code access
  9618  0A78  00FC               	movwf	??_nrf24l01ISR
  9619  0A79  0021               	movlb	1	; select bank1
  9620  0A7A  0867               	movf	_status^(0+128),w	;volatile
  9621  0A7B  067C               	xorwf	??_nrf24l01ISR,w
  9622  0A7C  39F0               	andlw	-16
  9623  0A7D  067C               	xorwf	??_nrf24l01ISR,w
  9624  0A7E  00E7               	movwf	_status^(0+128)	;volatile
  9625                           
  9626                           ;nrf24l01.c: 249: };nrf24l01.c: 250: }
  9627  0A7F  2A81               	goto	i1l274
  9628  0A80                     i1l275:	
  9629                           
  9630                           ;nrf24l01.c: 252: else{;nrf24l01.c: 253: status.statusRegister.TX_DS = 0;
  9631  0A80  12E8               	bcf	(_status^(0+128)+1),5	;volatile
  9632  0A81                     i1l274:	
  9633                           
  9634                           ;nrf24l01.c: 254: };nrf24l01.c: 255: };nrf24l01.c: 258: if (status.statusRegister.RX_DR)
      +                          {
  9635  0A81  0021               	movlb	1	; select bank1
  9636  0A82  1F68               	btfss	(_status^(0+128)+1),6	;volatile
  9637  0A83  2A9D               	goto	i1l3735
  9638                           
  9639                           ;nrf24l01.c: 260: if (status.RX == statuses.RX.Idle){
  9640  0A84  3038               	movlw	low ((_statuses+4)| (0+32768))
  9641  0A85  0084               	movwf	4
  9642  0A86  3098               	movlw	high ((_statuses+4)| (0+32768))
  9643  0A87  0085               	movwf	5
  9644  0A88  0800               	movf	0,w	;code access
  9645  0A89  00FC               	movwf	??_nrf24l01ISR
  9646  0A8A  0E67               	swapf	_status^(0+128),w	;volatile
  9647  0A8B  390F               	andlw	15
  9648  0A8C  067C               	xorwf	??_nrf24l01ISR,w
  9649  0A8D  1D03               	skipz
  9650  0A8E  2A9C               	goto	i1l280
  9651                           
  9652                           ;nrf24l01.c: 261: status.RX = statuses.RX.Pending;
  9653  0A8F  3039               	movlw	low ((_statuses+5)| (0+32768))
  9654  0A90  0084               	movwf	4
  9655  0A91  3098               	movlw	high ((_statuses+5)| (0+32768))
  9656  0A92  0085               	movwf	5
  9657  0A93  0800               	movf	0,w	;code access
  9658  0A94  00FC               	movwf	??_nrf24l01ISR
  9659  0A95  0EFC               	swapf	??_nrf24l01ISR,f
  9660  0A96  0867               	movf	_status^(0+128),w	;volatile
  9661  0A97  067C               	xorwf	??_nrf24l01ISR,w
  9662  0A98  390F               	andlw	-241
  9663  0A99  067C               	xorwf	??_nrf24l01ISR,w
  9664  0A9A  00E7               	movwf	_status^(0+128)	;volatile
  9665                           
  9666                           ;nrf24l01.c: 262: }
  9667  0A9B  2A9D               	goto	i1l3735
  9668  0A9C                     i1l280:	
  9669                           
  9670                           ;nrf24l01.c: 264: else{;nrf24l01.c: 265: status.statusRegister.RX_DR = 0;
  9671  0A9C  1368               	bcf	(_status^(0+128)+1),6	;volatile
  9672  0A9D                     i1l3735:	
  9673                           
  9674                           ;nrf24l01.c: 266: };nrf24l01.c: 267: };nrf24l01.c: 270: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.statusRegister.byte);
  9675  0A9D  0868               	movf	(_status^(0+128)+1),w	;volatile
  9676  0A9E  00FC               	movwf	??_nrf24l01ISR
  9677  0A9F  087C               	movf	??_nrf24l01ISR,w
  9678  0AA0  00F1               	movwf	i1nrf24l01Send@data
  9679  0AA1  3027               	movlw	39
  9680  0AA2  3195  25E8  318A   	fcall	i1_nrf24l01Send
  9681                           
  9682                           ;nrf24l01.c: 272: nrf24l01Service();
  9683  0AA5  3184  24C8         	fcall	i1_nrf24l01Service
  9684  0AA7  0008               	return
  9685  0AA8                     __end_of_nrf24l01ISR:	
  9686                           
  9687                           	psect	text43
  9688  04C8                     __ptext43:	
  9689 ;; *************** function i1_nrf24l01Service *****************
  9690 ;; Defined at:
  9691 ;;		line 276 in file "nrf24l01.c"
  9692 ;; Parameters:    Size  Location     Type
  9693 ;;		None
  9694 ;; Auto vars:     Size  Location     Type
  9695 ;;  nrf24l01Serv    1   11[COMMON] unsigned char 
  9696 ;;  nrf24l01Serv    1   10[COMMON] unsigned char 
  9697 ;; Return value:  Size  Location     Type
  9698 ;;                  1    wreg      void 
  9699 ;; Registers used:
  9700 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9701 ;; Tracked objects:
  9702 ;;		On entry : 0/0
  9703 ;;		On exit  : 0/0
  9704 ;;		Unchanged: 0/0
  9705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9707 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9708 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9709 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9710 ;;Total ram usage:        4 bytes
  9711 ;; Hardware stack levels used:    1
  9712 ;; Hardware stack levels required when called:    4
  9713 ;; This function calls:
  9714 ;;		_nrf24l01CEHigh
  9715 ;;		_nrf24l01CELow
  9716 ;;		_nrf24l01SPIEnd
  9717 ;;		_nrf24l01SPISend
  9718 ;;		_nrf24l01SPIStart
  9719 ;;		i1_memset
  9720 ;;		i1_nrf24l01Send
  9721 ;;		i1_nrf24l01SetRXMode
  9722 ;;		i1_strcmp
  9723 ;;		i1_strlen
  9724 ;; This function is called by:
  9725 ;;		_nrf24l01ISR
  9726 ;; This function uses a non-reentrant model
  9727 ;;
  9728                           
  9729                           
  9730                           ;psect for function i1_nrf24l01Service
  9731  04C8                     i1_nrf24l01Service:	
  9732                           
  9733                           ;nrf24l01.c: 278: unsigned char i;;nrf24l01.c: 280: if (status.TX == statuses.TX.Ready){
  9734                           
  9735                           ;incstack = 0
  9736                           ; Regs used in i1_nrf24l01Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9737  04C8  3035               	movlw	low ((_statuses+1)| (0+32768))
  9738  04C9  0084               	movwf	4
  9739  04CA  3098               	movlw	high ((_statuses+1)| (0+32768))
  9740  04CB  0085               	movwf	5
  9741  04CC  0800               	movf	0,w	;code access
  9742  04CD  00F8               	movwf	??i1_nrf24l01Service
  9743  04CE  0021               	movlb	1	; select bank1
  9744  04CF  0867               	movf	_status^(0+128),w	;volatile
  9745  04D0  390F               	andlw	15
  9746  04D1  0678               	xorwf	??i1_nrf24l01Service,w
  9747  04D2  1D03               	skipz
  9748  04D3  2D21               	goto	i1l3655
  9749                           
  9750                           ;nrf24l01.c: 283: nrf24l01SetRXMode(0);
  9751  04D4  3000               	movlw	0
  9752  04D5  3197  2737  3184   	fcall	i1_nrf24l01SetRXMode
  9753                           
  9754                           ;nrf24l01.c: 286: nrf24l01SPIStart();
  9755  04D8  3195  255E  3184   	fcall	_nrf24l01SPIStart
  9756                           
  9757                           ;nrf24l01.c: 289: nrf24l01SPISend((unsigned) 0b10110000);
  9758  04DB  30B0               	movlw	176
  9759  04DC  3195  256F  3184   	fcall	_nrf24l01SPISend
  9760                           
  9761                           ;nrf24l01.c: 291: nrf24l01SPISend(TXPacket.packetData.byte);
  9762  04DF  0023               	movlb	3	; select bank3
  9763  04E0  0841               	movf	_TXPacket^(0+384),w
  9764  04E1  3195  256F  3184   	fcall	_nrf24l01SPISend
  9765                           
  9766                           ;nrf24l01.c: 294: for (i = 0; (i < strlen(TXPacket.Message)) && (i < 32); i++) {
  9767  04E4  01FB               	clrf	i1nrf24l01Service@i
  9768  04E5  2CF3               	goto	i1l3641
  9769  04E6                     i1l3637:	
  9770                           
  9771                           ;nrf24l01.c: 295: nrf24l01SPISend(TXPacket.Message[i]);
  9772  04E6  087B               	movf	i1nrf24l01Service@i,w
  9773  04E7  3EC2               	addlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  9774  04E8  0086               	movwf	6
  9775  04E9  3001               	movlw	1	; select bank3/4
  9776  04EA  0087               	movwf	7
  9777  04EB  0801               	movf	1,w
  9778  04EC  3195  256F  3184   	fcall	_nrf24l01SPISend
  9779  04EF  3001               	movlw	1
  9780  04F0  00F8               	movwf	??i1_nrf24l01Service
  9781  04F1  0878               	movf	??i1_nrf24l01Service,w
  9782  04F2  07FB               	addwf	i1nrf24l01Service@i,f
  9783  04F3                     i1l3641:	
  9784  04F3  30C2               	movlw	low (_TXPacket+1)
  9785  04F4  00F0               	movwf	i1strlen@s
  9786  04F5  3001               	movlw	high (_TXPacket+1)
  9787  04F6  00F1               	movwf	i1strlen@s+1
  9788  04F7  3196  2639  3184   	fcall	i1_strlen
  9789  04FA  087B               	movf	i1nrf24l01Service@i,w
  9790  04FB  00F8               	movwf	??i1_nrf24l01Service
  9791  04FC  01F9               	clrf	??i1_nrf24l01Service+1
  9792  04FD  0871               	movf	?i1_strlen+1,w
  9793  04FE  0279               	subwf	??i1_nrf24l01Service+1,w
  9794  04FF  1D03               	skipz
  9795  0500  2D03               	goto	u382_25
  9796  0501  0870               	movf	?i1_strlen,w
  9797  0502  0278               	subwf	??i1_nrf24l01Service,w
  9798  0503                     u382_25:	
  9799  0503  1803               	skipnc
  9800  0504  2D09               	goto	i1l3645
  9801  0505  3020               	movlw	32
  9802  0506  027B               	subwf	i1nrf24l01Service@i,w
  9803  0507  1C03               	skipc
  9804  0508  2CE6               	goto	i1l3637
  9805  0509                     i1l3645:	
  9806                           
  9807                           ;nrf24l01.c: 296: };nrf24l01.c: 299: nrf24l01SPIEnd();
  9808  0509  3195  254F  3184   	fcall	_nrf24l01SPIEnd
  9809                           
  9810                           ;nrf24l01.c: 302: status.TX = statuses.TX.Sending;
  9811  050C  3036               	movlw	low ((_statuses+2)| (0+32768))
  9812  050D  0084               	movwf	4
  9813  050E  3098               	movlw	high ((_statuses+2)| (0+32768))
  9814  050F  0085               	movwf	5
  9815  0510  0800               	movf	0,w	;code access
  9816  0511  00F8               	movwf	??i1_nrf24l01Service
  9817  0512  0021               	movlb	1	; select bank1
  9818  0513  0867               	movf	_status^(0+128),w	;volatile
  9819  0514  0678               	xorwf	??i1_nrf24l01Service,w
  9820  0515  39F0               	andlw	-16
  9821  0516  0678               	xorwf	??i1_nrf24l01Service,w
  9822  0517  00E7               	movwf	_status^(0+128)	;volatile
  9823                           
  9824                           ;nrf24l01.c: 305: nrf24l01CEHigh();
  9825  0518  3195  253D  3184   	fcall	_nrf24l01CEHigh
  9826                           
  9827                           ;nrf24l01.c: 306: _delay((unsigned long)((12)*(32000000/4000000.0)));
  9828  051B  3020               	movlw	32
  9829  051C                     u408_27:	
  9830  051C  0B89               	decfsz	9,f
  9831  051D  2D1C               	goto	u408_27
  9832                           
  9833                           ;nrf24l01.c: 307: nrf24l01CELow();
  9834  051E  3195  2540  3184   	fcall	_nrf24l01CELow
  9835  0521                     i1l3655:	
  9836                           
  9837                           ;nrf24l01.c: 308: };nrf24l01.c: 310: if (status.RX == statuses.RX.Pending){
  9838  0521  3039               	movlw	low ((_statuses+5)| (0+32768))
  9839  0522  0084               	movwf	4
  9840  0523  3098               	movlw	high ((_statuses+5)| (0+32768))
  9841  0524  0085               	movwf	5
  9842  0525  0800               	movf	0,w	;code access
  9843  0526  00F8               	movwf	??i1_nrf24l01Service
  9844  0527  0021               	movlb	1	; select bank1
  9845  0528  0E67               	swapf	_status^(0+128),w	;volatile
  9846  0529  390F               	andlw	15
  9847  052A  0678               	xorwf	??i1_nrf24l01Service,w
  9848  052B  1D03               	skipz
  9849  052C  2D9D               	goto	i1l3693
  9850                           
  9851                           ;nrf24l01.c: 313: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  9852  052D  30A1               	movlw	low (_RXPacket+1)
  9853  052E  00F0               	movwf	i1memset@p1
  9854  052F  3001               	movlw	high (_RXPacket+1)
  9855  0530  00F1               	movwf	i1memset@p1+1
  9856  0531  3000               	movlw	0
  9857  0532  00F2               	movwf	i1memset@c
  9858  0533  00F3               	movwf	i1memset@c+1
  9859  0534  3020               	movlw	32
  9860  0535  00F4               	movwf	i1memset@n
  9861  0536  3000               	movlw	0
  9862  0537  00F5               	movwf	i1memset@n+1
  9863  0538  3195  25B7  3184   	fcall	i1_memset
  9864                           
  9865                           ;nrf24l01.c: 314: RXPacket.packetData.byte = 0x00;
  9866  053B  0023               	movlb	3	; select bank3
  9867  053C  01A0               	clrf	_RXPacket^(0+384)
  9868                           
  9869                           ;nrf24l01.c: 317: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  9870  053D  01F1               	clrf	i1nrf24l01Send@data
  9871  053E  3060               	movlw	96
  9872  053F  3195  25E8  3184   	fcall	i1_nrf24l01Send
  9873  0542  00F8               	movwf	??i1_nrf24l01Service
  9874  0543  0878               	movf	??i1_nrf24l01Service,w
  9875  0544  00FA               	movwf	i1nrf24l01Service@width
  9876                           
  9877                           ;nrf24l01.c: 320: nrf24l01CELow();
  9878  0545  3195  2540  3184   	fcall	_nrf24l01CELow
  9879                           
  9880                           ;nrf24l01.c: 323: nrf24l01SPIStart();
  9881  0548  3195  255E  3184   	fcall	_nrf24l01SPIStart
  9882                           
  9883                           ;nrf24l01.c: 326: nrf24l01SPISend((unsigned) 0b01100001);
  9884  054B  3061               	movlw	97
  9885  054C  3195  256F  3184   	fcall	_nrf24l01SPISend
  9886                           
  9887                           ;nrf24l01.c: 329: RXPacket.packetData.byte = nrf24l01SPISend(0);
  9888  054F  3000               	movlw	0
  9889  0550  3195  256F  3184   	fcall	_nrf24l01SPISend
  9890  0553  00F8               	movwf	??i1_nrf24l01Service
  9891  0554  0878               	movf	??i1_nrf24l01Service,w
  9892  0555  0023               	movlb	3	; select bank3
  9893  0556  00A0               	movwf	_RXPacket^(0+384)
  9894                           
  9895                           ;nrf24l01.c: 330: width--;
  9896  0557  3001               	movlw	1
  9897  0558  02FA               	subwf	i1nrf24l01Service@width,f
  9898                           
  9899                           ;nrf24l01.c: 332: for (i = 0; (i < width) && (i < 32); i++){
  9900  0559  01FB               	clrf	i1nrf24l01Service@i
  9901  055A  2D6B               	goto	i1l3679
  9902  055B                     i1l3675:	
  9903                           
  9904                           ;nrf24l01.c: 334: RXPacket.Message[i] = nrf24l01SPISend(0);
  9905  055B  3000               	movlw	0
  9906  055C  3195  256F  3184   	fcall	_nrf24l01SPISend
  9907  055F  00F8               	movwf	??i1_nrf24l01Service
  9908  0560  087B               	movf	i1nrf24l01Service@i,w
  9909  0561  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  9910  0562  0086               	movwf	6
  9911  0563  3001               	movlw	1	; select bank3/4
  9912  0564  0087               	movwf	7
  9913  0565  0878               	movf	??i1_nrf24l01Service,w
  9914  0566  0081               	movwf	1
  9915  0567  3001               	movlw	1
  9916  0568  00F8               	movwf	??i1_nrf24l01Service
  9917  0569  0878               	movf	??i1_nrf24l01Service,w
  9918  056A  07FB               	addwf	i1nrf24l01Service@i,f
  9919  056B                     i1l3679:	
  9920  056B  087A               	movf	i1nrf24l01Service@width,w
  9921  056C  027B               	subwf	i1nrf24l01Service@i,w
  9922  056D  1803               	skipnc
  9923  056E  2D73               	goto	i1l3683
  9924  056F  3020               	movlw	32
  9925  0570  027B               	subwf	i1nrf24l01Service@i,w
  9926  0571  1C03               	skipc
  9927  0572  2D5B               	goto	i1l3675
  9928  0573                     i1l3683:	
  9929                           
  9930                           ;nrf24l01.c: 335: };nrf24l01.c: 338: nrf24l01SPIEnd();
  9931  0573  3195  254F  3184   	fcall	_nrf24l01SPIEnd
  9932                           
  9933                           ;nrf24l01.c: 341: nrf24l01CEHigh();
  9934  0576  3195  253D  3184   	fcall	_nrf24l01CEHigh
  9935                           
  9936                           ;nrf24l01.c: 344: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
  9937  0579  0021               	movlb	1	; select bank1
  9938  057A  0C68               	rrf	(_status^(0+128)+1),w	;volatile
  9939  057B  3907               	andlw	7
  9940  057C  00F8               	movwf	??i1_nrf24l01Service
  9941  057D  0EF8               	swapf	??i1_nrf24l01Service,f
  9942  057E  0023               	movlb	3	; select bank3
  9943  057F  0820               	movf	_RXPacket^(0+384),w
  9944  0580  0678               	xorwf	??i1_nrf24l01Service,w
  9945  0581  398F               	andlw	-113
  9946  0582  0678               	xorwf	??i1_nrf24l01Service,w
  9947  0583  00A0               	movwf	_RXPacket^(0+384)
  9948                           
  9949                           ;nrf24l01.c: 347: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  9950  0584  01F1               	clrf	i1nrf24l01Send@data
  9951  0585  3009               	movlw	9
  9952  0586  3195  25E8  3184   	fcall	i1_nrf24l01Send
  9953  0589  00F8               	movwf	??i1_nrf24l01Service
  9954  058A  0023               	movlb	3	; select bank3
  9955  058B  0820               	movf	_RXPacket^(0+384),w
  9956  058C  0678               	xorwf	??i1_nrf24l01Service,w
  9957  058D  39FE               	andlw	-2
  9958  058E  0678               	xorwf	??i1_nrf24l01Service,w
  9959  058F  00A0               	movwf	_RXPacket^(0+384)
  9960                           
  9961                           ;nrf24l01.c: 349: status.RX = statuses.RX.Ready;
  9962  0590  303A               	movlw	low ((_statuses+6)| (0+32768))
  9963  0591  0084               	movwf	4
  9964  0592  3098               	movlw	high ((_statuses+6)| (0+32768))
  9965  0593  0085               	movwf	5
  9966  0594  0800               	movf	0,w	;code access
  9967  0595  00F8               	movwf	??i1_nrf24l01Service
  9968  0596  0EF8               	swapf	??i1_nrf24l01Service,f
  9969  0597  0021               	movlb	1	; select bank1
  9970  0598  0867               	movf	_status^(0+128),w	;volatile
  9971  0599  0678               	xorwf	??i1_nrf24l01Service,w
  9972  059A  390F               	andlw	-241
  9973  059B  0678               	xorwf	??i1_nrf24l01Service,w
  9974  059C  00E7               	movwf	_status^(0+128)	;volatile
  9975  059D                     i1l3693:	
  9976                           
  9977                           ;nrf24l01.c: 350: };nrf24l01.c: 352: if (status.RX == statuses.RX.Ready){
  9978  059D  303A               	movlw	low ((_statuses+6)| (0+32768))
  9979  059E  0084               	movwf	4
  9980  059F  3098               	movlw	high ((_statuses+6)| (0+32768))
  9981  05A0  0085               	movwf	5
  9982  05A1  0800               	movf	0,w	;code access
  9983  05A2  00F8               	movwf	??i1_nrf24l01Service
  9984  05A3  0E67               	swapf	_status^(0+128),w	;volatile
  9985  05A4  390F               	andlw	15
  9986  05A5  0678               	xorwf	??i1_nrf24l01Service,w
  9987  05A6  1D03               	skipz
  9988  05A7  2DDF               	goto	i1l3705
  9989                           
  9990                           ;nrf24l01.c: 355: if (RXPacket.packetData.IsACK){
  9991  05A8  0023               	movlb	3	; select bank3
  9992  05A9  1DA0               	btfss	_RXPacket^(0+384),3
  9993  05AA  2DDF               	goto	i1l3705
  9994                           
  9995                           ;nrf24l01.c: 357: if (status.TX == statuses.TX.PendingACK){
  9996  05AB  3037               	movlw	low ((_statuses+3)| (0+32768))
  9997  05AC  0084               	movwf	4
  9998  05AD  3098               	movlw	high ((_statuses+3)| (0+32768))
  9999  05AE  0085               	movwf	5
 10000  05AF  0800               	movf	0,w	;code access
 10001  05B0  00F8               	movwf	??i1_nrf24l01Service
 10002  05B1  0021               	movlb	1	; select bank1
 10003  05B2  0867               	movf	_status^(0+128),w	;volatile
 10004  05B3  390F               	andlw	15
 10005  05B4  0678               	xorwf	??i1_nrf24l01Service,w
 10006  05B5  1D03               	skipz
 10007  05B6  2DDF               	goto	i1l3705
 10008                           
 10009                           ;nrf24l01.c: 359: if (strcmp(RXPacket.Message, TXPacket.Message) == 0){
 10010  05B7  30C2               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
 10011  05B8  00F8               	movwf	??i1_nrf24l01Service
 10012  05B9  0878               	movf	??i1_nrf24l01Service,w
 10013  05BA  00F0               	movwf	i1strcmp@s2
 10014  05BB  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 10015  05BC  3197  2785  3184   	fcall	i1_strcmp
 10016  05BF  0870               	movf	?i1_strcmp,w
 10017  05C0  0471               	iorwf	?i1_strcmp+1,w
 10018  05C1  1D03               	btfss	3,2
 10019  05C2  2DDF               	goto	i1l3705
 10020                           
 10021                           ;nrf24l01.c: 360: status.TX = statuses.TX.Idle;
 10022  05C3  3034               	movlw	low (_statuses| (0+32768))
 10023  05C4  0084               	movwf	4
 10024  05C5  3098               	movlw	high (_statuses| (0+32768))
 10025  05C6  0085               	movwf	5
 10026  05C7  0800               	movf	0,w	;code access
 10027  05C8  00F8               	movwf	??i1_nrf24l01Service
 10028  05C9  0021               	movlb	1	; select bank1
 10029  05CA  0867               	movf	_status^(0+128),w	;volatile
 10030  05CB  0678               	xorwf	??i1_nrf24l01Service,w
 10031  05CC  39F0               	andlw	-16
 10032  05CD  0678               	xorwf	??i1_nrf24l01Service,w
 10033  05CE  00E7               	movwf	_status^(0+128)	;volatile
 10034                           
 10035                           ;nrf24l01.c: 361: status.RX = statuses.RX.Idle;
 10036  05CF  3038               	movlw	low ((_statuses+4)| (0+32768))
 10037  05D0  0084               	movwf	4
 10038  05D1  3098               	movlw	high ((_statuses+4)| (0+32768))
 10039  05D2  0085               	movwf	5
 10040  05D3  0800               	movf	0,w	;code access
 10041  05D4  00F8               	movwf	??i1_nrf24l01Service
 10042  05D5  0EF8               	swapf	??i1_nrf24l01Service,f
 10043  05D6  0867               	movf	_status^(0+128),w	;volatile
 10044  05D7  0678               	xorwf	??i1_nrf24l01Service,w
 10045  05D8  390F               	andlw	-241
 10046  05D9  0678               	xorwf	??i1_nrf24l01Service,w
 10047  05DA  00E7               	movwf	_status^(0+128)	;volatile
 10048                           
 10049                           ;nrf24l01.c: 363: nrf24l01SetRXMode(0);
 10050  05DB  3000               	movlw	0
 10051  05DC  3197  2737  3184   	fcall	i1_nrf24l01SetRXMode
 10052  05DF                     i1l3705:	
 10053                           
 10054                           ;nrf24l01.c: 365: };nrf24l01.c: 366: };nrf24l01.c: 367: };nrf24l01.c: 370: };nrf24l01.c:
      +                           372: if (status.RX == statuses.RX.Ready){
 10055  05DF  303A               	movlw	low ((_statuses+6)| (0+32768))
 10056  05E0  0084               	movwf	4
 10057  05E1  3098               	movlw	high ((_statuses+6)| (0+32768))
 10058  05E2  0085               	movwf	5
 10059  05E3  0800               	movf	0,w	;code access
 10060  05E4  00F8               	movwf	??i1_nrf24l01Service
 10061  05E5  0021               	movlb	1	; select bank1
 10062  05E6  0E67               	swapf	_status^(0+128),w	;volatile
 10063  05E7  390F               	andlw	15
 10064  05E8  0678               	xorwf	??i1_nrf24l01Service,w
 10065  05E9  1D03               	skipz
 10066  05EA  2DF4               	goto	i1l3709
 10067                           
 10068                           ;nrf24l01.c: 373: counter++;
 10069  05EB  3001               	movlw	1
 10070  05EC  0022               	movlb	2	; select bank2
 10071  05ED  07D1               	addwf	_counter^(0+256),f
 10072  05EE  3000               	movlw	0
 10073  05EF  3DD2               	addwfc	(_counter+1)^(0+256),f
 10074  05F0  3000               	movlw	0
 10075  05F1  3DD3               	addwfc	(_counter+2)^(0+256),f
 10076  05F2  3000               	movlw	0
 10077  05F3  3DD4               	addwfc	(_counter+3)^(0+256),f
 10078  05F4                     i1l3709:	
 10079                           
 10080                           ;nrf24l01.c: 374: };nrf24l01.c: 376: if (status.TX == statuses.TX.PendingACK){
 10081  05F4  3037               	movlw	low ((_statuses+3)| (0+32768))
 10082  05F5  0084               	movwf	4
 10083  05F6  3098               	movlw	high ((_statuses+3)| (0+32768))
 10084  05F7  0085               	movwf	5
 10085  05F8  0800               	movf	0,w	;code access
 10086  05F9  00F8               	movwf	??i1_nrf24l01Service
 10087  05FA  0021               	movlb	1	; select bank1
 10088  05FB  0867               	movf	_status^(0+128),w	;volatile
 10089  05FC  390F               	andlw	15
 10090  05FD  0678               	xorwf	??i1_nrf24l01Service,w
 10091  05FE  1D03               	skipz
 10092  05FF  0008               	return
 10093                           
 10094                           ;nrf24l01.c: 377: if (!status.retryCount--){
 10095  0600  3001               	movlw	1
 10096  0601  02EA               	subwf	(_status^(0+128)+3),f	;volatile
 10097  0602  0A6A               	incf	(_status^(0+128)+3),w	;volatile
 10098  0603  1D03               	btfss	3,2
 10099  0604  0008               	return
 10100                           
 10101                           ;nrf24l01.c: 378: status.TX = statuses.TX.Ready;
 10102  0605  3035               	movlw	low ((_statuses+1)| (0+32768))
 10103  0606  0084               	movwf	4
 10104  0607  3098               	movlw	high ((_statuses+1)| (0+32768))
 10105  0608  0085               	movwf	5
 10106  0609  0800               	movf	0,w	;code access
 10107  060A  00F8               	movwf	??i1_nrf24l01Service
 10108  060B  0867               	movf	_status^(0+128),w	;volatile
 10109  060C  0678               	xorwf	??i1_nrf24l01Service,w
 10110  060D  39F0               	andlw	-16
 10111  060E  0678               	xorwf	??i1_nrf24l01Service,w
 10112  060F  00E7               	movwf	_status^(0+128)	;volatile
 10113  0610  0008               	return
 10114  0611                     __end_ofi1_nrf24l01Service:	
 10115                           
 10116                           	psect	text44
 10117  1639                     __ptext44:	
 10118 ;; *************** function i1_strlen *****************
 10119 ;; Defined at:
 10120 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
 10121 ;; Parameters:    Size  Location     Type
 10122 ;;  s               2    0[COMMON] PTR const unsigned char 
 10123 ;;		 -> TXPacket.Message(32), TXPacket(33), romDataMap(28), 
 10124 ;; Auto vars:     Size  Location     Type
 10125 ;;  strlen          2    4[COMMON] PTR const unsigned char 
 10126 ;;		 -> TXPacket.Message(32), TXPacket(33), romDataMap(28), 
 10127 ;; Return value:  Size  Location     Type
 10128 ;;                  2    0[COMMON] unsigned int 
 10129 ;; Registers used:
 10130 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10131 ;; Tracked objects:
 10132 ;;		On entry : 0/0
 10133 ;;		On exit  : 0/0
 10134 ;;		Unchanged: 0/0
 10135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10136 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10137 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10138 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10139 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10140 ;;Total ram usage:        6 bytes
 10141 ;; Hardware stack levels used:    1
 10142 ;; This function calls:
 10143 ;;		Nothing
 10144 ;; This function is called by:
 10145 ;;		i1_nrf24l01Service
 10146 ;; This function uses a non-reentrant model
 10147 ;;
 10148                           
 10149                           
 10150                           ;psect for function i1_strlen
 10151  1639                     i1_strlen:	
 10152                           
 10153                           ;incstack = 0
 10154                           ; Regs used in i1_strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
 10155  1639  0871               	movf	i1strlen@s+1,w
 10156  163A  00F5               	movwf	i1strlen@cp+1
 10157  163B  0870               	movf	i1strlen@s,w
 10158  163C  00F4               	movwf	i1strlen@cp
 10159  163D                     i1l3605:	
 10160  163D  0874               	movf	i1strlen@cp,w
 10161  163E  0086               	movwf	6
 10162  163F  0875               	movf	i1strlen@cp+1,w
 10163  1640  0087               	movwf	7
 10164  1641  0801               	movf	1,w
 10165  1642  1903               	btfsc	3,2
 10166  1643  2E49               	goto	i1l3607
 10167  1644  3001               	movlw	1
 10168  1645  07F4               	addwf	i1strlen@cp,f
 10169  1646  3000               	movlw	0
 10170  1647  3DF5               	addwfc	i1strlen@cp+1,f
 10171  1648  2E3D               	goto	i1l3605
 10172  1649                     i1l3607:	
 10173  1649  0970               	comf	i1strlen@s,w
 10174  164A  00F2               	movwf	??i1_strlen
 10175  164B  0971               	comf	i1strlen@s+1,w
 10176  164C  00F3               	movwf	??i1_strlen+1
 10177  164D  0AF2               	incf	??i1_strlen,f
 10178  164E  1903               	skipnz
 10179  164F  0AF3               	incf	??i1_strlen+1,f
 10180  1650  0874               	movf	i1strlen@cp,w
 10181  1651  0772               	addwf	??i1_strlen,w
 10182  1652  00F0               	movwf	?i1_strlen
 10183  1653  0875               	movf	i1strlen@cp+1,w
 10184  1654  3D73               	addwfc	??i1_strlen+1,w
 10185  1655  00F1               	movwf	?i1_strlen+1
 10186  1656  0008               	return
 10187  1657                     __end_ofi1_strlen:	
 10188                           
 10189                           	psect	text45
 10190  1785                     __ptext45:	
 10191 ;; *************** function i1_strcmp *****************
 10192 ;; Defined at:
 10193 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
 10194 ;; Parameters:    Size  Location     Type
 10195 ;;  s1              1    wreg     PTR const unsigned char 
 10196 ;;		 -> RXPacket.Message(32), RXPacket(33), 
 10197 ;;  s2              1    0[COMMON] PTR const unsigned char 
 10198 ;;		 -> TXPacket.Message(32), TXPacket(33), 
 10199 ;; Auto vars:     Size  Location     Type
 10200 ;;  s1              1    4[COMMON] PTR const unsigned char 
 10201 ;;		 -> RXPacket.Message(32), RXPacket(33), 
 10202 ;;  strcmp          1    3[COMMON] char 
 10203 ;; Return value:  Size  Location     Type
 10204 ;;                  2    0[COMMON] int 
 10205 ;; Registers used:
 10206 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10207 ;; Tracked objects:
 10208 ;;		On entry : 0/0
 10209 ;;		On exit  : 0/0
 10210 ;;		Unchanged: 0/0
 10211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10212 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10213 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10214 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10215 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10216 ;;Total ram usage:        5 bytes
 10217 ;; Hardware stack levels used:    1
 10218 ;; This function calls:
 10219 ;;		Nothing
 10220 ;; This function is called by:
 10221 ;;		i1_nrf24l01Service
 10222 ;; This function uses a non-reentrant model
 10223 ;;
 10224                           
 10225                           
 10226                           ;psect for function i1_strcmp
 10227  1785                     i1_strcmp:	
 10228                           
 10229                           ;incstack = 0
 10230                           ; Regs used in i1_strcmp: [wreg-fsr1h+status,2+status,0]
 10231                           ;i1strcmp@s1 stored from wreg
 10232  1785  00F4               	movwf	i1strcmp@s1
 10233  1786  2F8F               	goto	i1l3007
 10234  1787                     i1l3003:	
 10235  1787  3001               	movlw	1
 10236  1788  00F2               	movwf	??i1_strcmp
 10237  1789  0872               	movf	??i1_strcmp,w
 10238  178A  07F4               	addwf	i1strcmp@s1,f
 10239  178B  3001               	movlw	1
 10240  178C  00F2               	movwf	??i1_strcmp
 10241  178D  0872               	movf	??i1_strcmp,w
 10242  178E  07F0               	addwf	i1strcmp@s2,f
 10243  178F                     i1l3007:	
 10244  178F  0874               	movf	i1strcmp@s1,w
 10245  1790  0086               	movwf	6
 10246  1791  3001               	movlw	1	; select bank2/3
 10247  1792  0087               	movwf	7
 10248  1793  0870               	movf	i1strcmp@s2,w
 10249  1794  0084               	movwf	4
 10250  1795  3001               	movlw	1	; select bank2/3
 10251  1796  0085               	movwf	5
 10252  1797  0300               	decf	0,w
 10253  1798  3AFF               	xorlw	255
 10254  1799  0701               	addwf	1,w
 10255  179A  00F2               	movwf	??i1_strcmp
 10256  179B  0872               	movf	??i1_strcmp,w
 10257  179C  00F3               	movwf	i1strcmp@r
 10258  179D  0873               	movf	i1strcmp@r,w
 10259  179E  1D03               	btfss	3,2
 10260  179F  2FA7               	goto	i1l3011
 10261  17A0  0874               	movf	i1strcmp@s1,w
 10262  17A1  0086               	movwf	6
 10263  17A2  3001               	movlw	1	; select bank2/3
 10264  17A3  0087               	movwf	7
 10265  17A4  0801               	movf	1,w
 10266  17A5  1D03               	btfss	3,2
 10267  17A6  2F87               	goto	i1l3003
 10268  17A7                     i1l3011:	
 10269  17A7  0873               	movf	i1strcmp@r,w
 10270  17A8  00F0               	movwf	?i1_strcmp
 10271  17A9  01F1               	clrf	?i1_strcmp+1
 10272  17AA  1BF0               	btfsc	?i1_strcmp,7
 10273  17AB  03F1               	decf	?i1_strcmp+1,f
 10274  17AC  0008               	return
 10275  17AD                     __end_ofi1_strcmp:	
 10276                           
 10277                           	psect	text46
 10278  1737                     __ptext46:	
 10279 ;; *************** function i1_nrf24l01SetRXMode *****************
 10280 ;; Defined at:
 10281 ;;		line 91 in file "nrf24l01.c"
 10282 ;; Parameters:    Size  Location     Type
 10283 ;;  rxMode          1    wreg     unsigned char 
 10284 ;; Auto vars:     Size  Location     Type
 10285 ;;  rxMode          1    5[COMMON] unsigned char 
 10286 ;; Return value:  Size  Location     Type
 10287 ;;                  1    wreg      void 
 10288 ;; Registers used:
 10289 ;;		wreg, status,2, status,0, pclath, cstack
 10290 ;; Tracked objects:
 10291 ;;		On entry : 0/0
 10292 ;;		On exit  : 0/0
 10293 ;;		Unchanged: 0/0
 10294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10296 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10297 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10298 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10299 ;;Total ram usage:        2 bytes
 10300 ;; Hardware stack levels used:    1
 10301 ;; Hardware stack levels required when called:    3
 10302 ;; This function calls:
 10303 ;;		_nrf24l01CEHigh
 10304 ;;		_nrf24l01CELow
 10305 ;;		i1_nrf24l01Send
 10306 ;; This function is called by:
 10307 ;;		_nrf24l01ISR
 10308 ;;		i1_nrf24l01Service
 10309 ;; This function uses a non-reentrant model
 10310 ;;
 10311                           
 10312                           
 10313                           ;psect for function i1_nrf24l01SetRXMode
 10314  1737                     i1_nrf24l01SetRXMode:	
 10315                           
 10316                           ;incstack = 0
 10317                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
 10318                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
 10319  1737  00F5               	movwf	i1nrf24l01SetRXMode@rxMode
 10320                           
 10321                           ;nrf24l01.c: 111: if (status.configRegister.PRIM_RX != rxMode){
 10322  1738  0021               	movlb	1	; select bank1
 10323  1739  0869               	movf	(_status^(0+128)+2),w	;volatile
 10324  173A  3901               	andlw	1
 10325  173B  0675               	xorwf	i1nrf24l01SetRXMode@rxMode,w
 10326  173C  1903               	skipnz
 10327  173D  0008               	return
 10328                           
 10329                           ;nrf24l01.c: 114: nrf24l01CELow();
 10330  173E  3195  2540  3197   	fcall	_nrf24l01CELow
 10331                           
 10332                           ;nrf24l01.c: 118: status.configRegister.PRIM_RX = rxMode;
 10333  1741  0C75               	rrf	i1nrf24l01SetRXMode@rxMode,w
 10334  1742  0021               	movlb	1	; select bank1
 10335  1743  1C03               	skipc
 10336  1744  1069               	bcf	(_status^(0+128)+2),0	;volatile
 10337  1745  1803               	skipnc
 10338  1746  1469               	bsf	(_status^(0+128)+2),0	;volatile
 10339                           
 10340                           ;nrf24l01.c: 119: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
 10341  1747  0869               	movf	(_status^(0+128)+2),w	;volatile
 10342  1748  00F4               	movwf	??i1_nrf24l01SetRXMode
 10343  1749  0874               	movf	??i1_nrf24l01SetRXMode,w
 10344  174A  00F1               	movwf	i1nrf24l01Send@data
 10345  174B  3020               	movlw	32
 10346  174C  3195  25E8  3197   	fcall	i1_nrf24l01Send
 10347                           
 10348                           ;nrf24l01.c: 122: _delay((unsigned long)((120)*(32000000/4000000.0)));
 10349  174F  30C0               	movlw	192
 10350  1750                     u409_27:	
 10351  1750  3200               	nop2
 10352  1751  0B89               	decfsz	9,f
 10353  1752  2F50               	goto	u409_27
 10354                           
 10355                           ;nrf24l01.c: 125: if (rxMode){
 10356  1753  0875               	movf	i1nrf24l01SetRXMode@rxMode,w
 10357  1754  1903               	btfsc	3,2
 10358  1755  0008               	return
 10359                           
 10360                           ;nrf24l01.c: 126: nrf24l01CEHigh();
 10361  1756  3195  253D  3197   	fcall	_nrf24l01CEHigh
 10362                           
 10363                           ;nrf24l01.c: 127: _delay((unsigned long)((120)*(32000000/4000000.0)));
 10364  1759  30C0               	movlw	192
 10365  175A                     u410_27:	
 10366  175A  3200               	nop2
 10367  175B  0B89               	decfsz	9,f
 10368  175C  2F5A               	goto	u410_27
 10369  175D  0008               	return
 10370  175E                     __end_ofi1_nrf24l01SetRXMode:	
 10371                           
 10372                           	psect	text47
 10373  15E8                     __ptext47:	
 10374 ;; *************** function i1_nrf24l01Send *****************
 10375 ;; Defined at:
 10376 ;;		line 46 in file "nrf24l01.c"
 10377 ;; Parameters:    Size  Location     Type
 10378 ;;  command         1    wreg     unsigned char 
 10379 ;;  data            1    1[COMMON] unsigned char 
 10380 ;; Auto vars:     Size  Location     Type
 10381 ;;  command         1    3[COMMON] unsigned char 
 10382 ;; Return value:  Size  Location     Type
 10383 ;;                  1    wreg      unsigned char 
 10384 ;; Registers used:
 10385 ;;		wreg, status,2, status,0, pclath, cstack
 10386 ;; Tracked objects:
 10387 ;;		On entry : 0/0
 10388 ;;		On exit  : 0/0
 10389 ;;		Unchanged: 0/0
 10390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10391 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10392 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10393 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10394 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10395 ;;Total ram usage:        3 bytes
 10396 ;; Hardware stack levels used:    1
 10397 ;; Hardware stack levels required when called:    2
 10398 ;; This function calls:
 10399 ;;		_enableInterrupts
 10400 ;;		_nrf24l01SPIEnd
 10401 ;;		_nrf24l01SPISend
 10402 ;;		_nrf24l01SPIStart
 10403 ;; This function is called by:
 10404 ;;		_nrf24l01ISR
 10405 ;;		i1_nrf24l01SetRXMode
 10406 ;;		i1_nrf24l01Service
 10407 ;; This function uses a non-reentrant model
 10408 ;;
 10409                           
 10410                           
 10411                           ;psect for function i1_nrf24l01Send
 10412  15E8                     i1_nrf24l01Send:	
 10413                           
 10414                           ;incstack = 0
 10415                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
 10416                           ;i1nrf24l01Send@command stored from wreg
 10417  15E8  00F3               	movwf	i1nrf24l01Send@command
 10418                           
 10419                           ;nrf24l01.c: 49: enableInterrupts(0);
 10420  15E9  3000               	movlw	0
 10421  15EA  3195  2556  3195   	fcall	_enableInterrupts
 10422                           
 10423                           ;nrf24l01.c: 52: nrf24l01SPIStart();
 10424  15ED  3195  255E  3195   	fcall	_nrf24l01SPIStart
 10425                           
 10426                           ;nrf24l01.c: 55: nrf24l01SPISend(command);
 10427  15F0  0873               	movf	i1nrf24l01Send@command,w
 10428  15F1  3195  256F  3195   	fcall	_nrf24l01SPISend
 10429                           
 10430                           ;nrf24l01.c: 58: data = nrf24l01SPISend(data);
 10431  15F4  0871               	movf	i1nrf24l01Send@data,w
 10432  15F5  3195  256F  3195   	fcall	_nrf24l01SPISend
 10433  15F8  00F2               	movwf	??i1_nrf24l01Send
 10434  15F9  0872               	movf	??i1_nrf24l01Send,w
 10435  15FA  00F1               	movwf	i1nrf24l01Send@data
 10436                           
 10437                           ;nrf24l01.c: 61: nrf24l01SPIEnd();
 10438  15FB  3195  254F  3195   	fcall	_nrf24l01SPIEnd
 10439                           
 10440                           ;nrf24l01.c: 64: enableInterrupts(1);
 10441  15FE  3001               	movlw	1
 10442  15FF  3195  2556         	fcall	_enableInterrupts
 10443                           
 10444                           ;nrf24l01.c: 66: return data;
 10445  1601  0871               	movf	i1nrf24l01Send@data,w
 10446  1602  0008               	return
 10447  1603                     __end_ofi1_nrf24l01Send:	
 10448                           
 10449                           	psect	text48
 10450  155E                     __ptext48:	
 10451 ;; *************** function _nrf24l01SPIStart *****************
 10452 ;; Defined at:
 10453 ;;		line 64 in file "interface.c"
 10454 ;; Parameters:    Size  Location     Type
 10455 ;;		None
 10456 ;; Auto vars:     Size  Location     Type
 10457 ;;		None
 10458 ;; Return value:  Size  Location     Type
 10459 ;;                  1    wreg      void 
 10460 ;; Registers used:
 10461 ;;		wreg, status,2, status,0, pclath, cstack
 10462 ;; Tracked objects:
 10463 ;;		On entry : 0/0
 10464 ;;		On exit  : 0/0
 10465 ;;		Unchanged: 0/0
 10466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10471 ;;Total ram usage:        0 bytes
 10472 ;; Hardware stack levels used:    1
 10473 ;; Hardware stack levels required when called:    8
 10474 ;; This function calls:
 10475 ;;		_nrf24l01CSLow
 10476 ;; This function is called by:
 10477 ;;		_nrf24l01Send
 10478 ;;		_nrf24l01SetTXPipe
 10479 ;;		_nrf24l01Service
 10480 ;;		_nrf24l01InitRegisters
 10481 ;;		i1_nrf24l01Send
 10482 ;;		i1_nrf24l01Service
 10483 ;; This function uses a non-reentrant model
 10484 ;;
 10485                           
 10486                           
 10487                           ;psect for function _nrf24l01SPIStart
 10488  155E                     _nrf24l01SPIStart:	
 10489                           
 10490                           ;interface.c: 65: nrf24l01CSLow();
 10491                           
 10492                           ;incstack = 0
 10493 ;; hardware stack exceeded
 10494                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
 10495  155E  3195  2546  3195   	fcall	_nrf24l01CSLow
 10496                           
 10497                           ;interface.c: 66: _delay((unsigned long)((10)*(32000000/4000000.0)));
 10498  1561  301A               	movlw	26
 10499  1562                     u411_27:	
 10500  1562  0B89               	decfsz	9,f
 10501  1563  2D62               	goto	u411_27
 10502  1564  3200               	nop2
 10503  1565  0008               	return
 10504  1566                     __end_of_nrf24l01SPIStart:	
 10505                           
 10506                           	psect	text49
 10507  1546                     __ptext49:	
 10508 ;; *************** function _nrf24l01CSLow *****************
 10509 ;; Defined at:
 10510 ;;		line 17 in file "interface.c"
 10511 ;; Parameters:    Size  Location     Type
 10512 ;;		None
 10513 ;; Auto vars:     Size  Location     Type
 10514 ;;		None
 10515 ;; Return value:  Size  Location     Type
 10516 ;;                  1    wreg      void 
 10517 ;; Registers used:
 10518 ;;		None
 10519 ;; Tracked objects:
 10520 ;;		On entry : 0/0
 10521 ;;		On exit  : 0/0
 10522 ;;		Unchanged: 0/0
 10523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10528 ;;Total ram usage:        0 bytes
 10529 ;; Hardware stack levels used:    1
 10530 ;; Hardware stack levels required when called:    7
 10531 ;; This function calls:
 10532 ;;		Nothing
 10533 ;; This function is called by:
 10534 ;;		_nrf24l01SPIStart
 10535 ;; This function uses a non-reentrant model
 10536 ;;
 10537                           
 10538                           
 10539                           ;psect for function _nrf24l01CSLow
 10540  1546                     _nrf24l01CSLow:	
 10541                           
 10542                           ;interface.c: 18: PORTAbits.RA1 = 0;
 10543                           
 10544                           ;incstack = 0
 10545 ;; hardware stack exceeded
 10546                           ; Regs used in _nrf24l01CSLow: []
 10547  1546  0020               	movlb	0	; select bank0
 10548  1547  108C               	bcf	12,1	;volatile
 10549  1548  0008               	return
 10550  1549                     __end_of_nrf24l01CSLow:	
 10551                           
 10552                           	psect	text50
 10553  156F                     __ptext50:	
 10554 ;; *************** function _nrf24l01SPISend *****************
 10555 ;; Defined at:
 10556 ;;		line 51 in file "interface.c"
 10557 ;; Parameters:    Size  Location     Type
 10558 ;;  data            1    wreg     unsigned char 
 10559 ;; Auto vars:     Size  Location     Type
 10560 ;;  data            1    0[COMMON] unsigned char 
 10561 ;; Return value:  Size  Location     Type
 10562 ;;                  1    wreg      unsigned char 
 10563 ;; Registers used:
 10564 ;;		wreg
 10565 ;; Tracked objects:
 10566 ;;		On entry : 0/0
 10567 ;;		On exit  : 0/0
 10568 ;;		Unchanged: 0/0
 10569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10574 ;;Total ram usage:        0 bytes
 10575 ;; Hardware stack levels used:    1
 10576 ;; Hardware stack levels required when called:    7
 10577 ;; This function calls:
 10578 ;;		Nothing
 10579 ;; This function is called by:
 10580 ;;		_nrf24l01Send
 10581 ;;		_nrf24l01SetTXPipe
 10582 ;;		_nrf24l01Service
 10583 ;;		_nrf24l01InitRegisters
 10584 ;;		i1_nrf24l01Send
 10585 ;;		i1_nrf24l01Service
 10586 ;; This function uses a non-reentrant model
 10587 ;;
 10588                           
 10589                           
 10590                           ;psect for function _nrf24l01SPISend
 10591  156F                     _nrf24l01SPISend:	
 10592                           
 10593                           ;incstack = 0
 10594 ;; hardware stack exceeded
 10595                           ; Regs used in _nrf24l01SPISend: [wreg]
 10596                           ;nrf24l01SPISend@data stored from wreg
 10597  156F  00F0               	movwf	nrf24l01SPISend@data
 10598                           
 10599                           ;interface.c: 52: SSP1BUF = data;
 10600  1570  0870               	movf	nrf24l01SPISend@data,w
 10601  1571  0024               	movlb	4	; select bank4
 10602  1572  0091               	movwf	17	;volatile
 10603                           
 10604                           ;interface.c: 54: PORTCbits.RC4 = 1;
 10605  1573  0020               	movlb	0	; select bank0
 10606  1574  160E               	bsf	14,4	;volatile
 10607  1575                     i1l48:	
 10608                           ;interface.c: 56: while (!SSP1STATbits.BF){
 10609                           
 10610  1575  0024               	movlb	4	; select bank4
 10611  1576  1814               	btfsc	20,0	;volatile
 10612  1577  2D7A               	goto	i1l2277
 10613                           
 10614                           ;interface.c: 57: __nop();
 10615  1578  0000               	nop
 10616  1579  2D75               	goto	i1l48
 10617  157A                     i1l2277:	
 10618                           
 10619                           ;interface.c: 58: };interface.c: 60: return SSP1BUF;
 10620  157A  0811               	movf	17,w	;volatile
 10621  157B  0008               	return
 10622  157C                     __end_of_nrf24l01SPISend:	
 10623                           
 10624                           	psect	text51
 10625  154F                     __ptext51:	
 10626 ;; *************** function _nrf24l01SPIEnd *****************
 10627 ;; Defined at:
 10628 ;;		line 70 in file "interface.c"
 10629 ;; Parameters:    Size  Location     Type
 10630 ;;		None
 10631 ;; Auto vars:     Size  Location     Type
 10632 ;;		None
 10633 ;; Return value:  Size  Location     Type
 10634 ;;                  1    wreg      void 
 10635 ;; Registers used:
 10636 ;;		wreg, status,2, status,0, pclath, cstack
 10637 ;; Tracked objects:
 10638 ;;		On entry : 0/0
 10639 ;;		On exit  : 0/0
 10640 ;;		Unchanged: 0/0
 10641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10646 ;;Total ram usage:        0 bytes
 10647 ;; Hardware stack levels used:    1
 10648 ;; Hardware stack levels required when called:    8
 10649 ;; This function calls:
 10650 ;;		_nrf24l01CSHigh
 10651 ;; This function is called by:
 10652 ;;		_nrf24l01Send
 10653 ;;		_nrf24l01SetTXPipe
 10654 ;;		_nrf24l01Service
 10655 ;;		_nrf24l01InitRegisters
 10656 ;;		i1_nrf24l01Send
 10657 ;;		i1_nrf24l01Service
 10658 ;; This function uses a non-reentrant model
 10659 ;;
 10660                           
 10661                           
 10662                           ;psect for function _nrf24l01SPIEnd
 10663  154F                     _nrf24l01SPIEnd:	
 10664                           
 10665                           ;interface.c: 71: _delay((unsigned long)((10)*(32000000/4000000.0)));
 10666                           
 10667                           ;incstack = 0
 10668 ;; hardware stack exceeded
 10669                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
 10670  154F  301A               	movlw	26
 10671  1550                     u412_27:	
 10672  1550  0B89               	decfsz	9,f
 10673  1551  2D50               	goto	u412_27
 10674  1552  3200               	nop2
 10675                           
 10676                           ;interface.c: 72: nrf24l01CSHigh();
 10677  1553  3195  2543         	fcall	_nrf24l01CSHigh
 10678  1555  0008               	return
 10679  1556                     __end_of_nrf24l01SPIEnd:	
 10680                           
 10681                           	psect	text52
 10682  1543                     __ptext52:	
 10683 ;; *************** function _nrf24l01CSHigh *****************
 10684 ;; Defined at:
 10685 ;;		line 22 in file "interface.c"
 10686 ;; Parameters:    Size  Location     Type
 10687 ;;		None
 10688 ;; Auto vars:     Size  Location     Type
 10689 ;;		None
 10690 ;; Return value:  Size  Location     Type
 10691 ;;                  1    wreg      void 
 10692 ;; Registers used:
 10693 ;;		None
 10694 ;; Tracked objects:
 10695 ;;		On entry : 0/0
 10696 ;;		On exit  : 0/0
 10697 ;;		Unchanged: 0/0
 10698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10703 ;;Total ram usage:        0 bytes
 10704 ;; Hardware stack levels used:    1
 10705 ;; Hardware stack levels required when called:    7
 10706 ;; This function calls:
 10707 ;;		Nothing
 10708 ;; This function is called by:
 10709 ;;		_nrf24l01SPIEnd
 10710 ;; This function uses a non-reentrant model
 10711 ;;
 10712                           
 10713                           
 10714                           ;psect for function _nrf24l01CSHigh
 10715  1543                     _nrf24l01CSHigh:	
 10716                           
 10717                           ;interface.c: 23: PORTAbits.RA1 = 1;
 10718                           
 10719                           ;incstack = 0
 10720 ;; hardware stack exceeded
 10721                           ; Regs used in _nrf24l01CSHigh: []
 10722  1543  0020               	movlb	0	; select bank0
 10723  1544  148C               	bsf	12,1	;volatile
 10724  1545  0008               	return
 10725  1546                     __end_of_nrf24l01CSHigh:	
 10726                           
 10727                           	psect	text53
 10728  1556                     __ptext53:	
 10729 ;; *************** function _enableInterrupts *****************
 10730 ;; Defined at:
 10731 ;;		line 76 in file "interface.c"
 10732 ;; Parameters:    Size  Location     Type
 10733 ;;  enable          1    wreg     unsigned char 
 10734 ;; Auto vars:     Size  Location     Type
 10735 ;;  enable          1    0[COMMON] unsigned char 
 10736 ;; Return value:  Size  Location     Type
 10737 ;;                  1    wreg      void 
 10738 ;; Registers used:
 10739 ;;		wreg, status,0
 10740 ;; Tracked objects:
 10741 ;;		On entry : 0/0
 10742 ;;		On exit  : 0/0
 10743 ;;		Unchanged: 0/0
 10744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10749 ;;Total ram usage:        0 bytes
 10750 ;; Hardware stack levels used:    1
 10751 ;; Hardware stack levels required when called:    7
 10752 ;; This function calls:
 10753 ;;		Nothing
 10754 ;; This function is called by:
 10755 ;;		_nrf24l01Send
 10756 ;;		i1_nrf24l01Send
 10757 ;; This function uses a non-reentrant model
 10758 ;;
 10759                           
 10760                           
 10761                           ;psect for function _enableInterrupts
 10762  1556                     _enableInterrupts:	
 10763                           
 10764                           ;incstack = 0
 10765 ;; hardware stack exceeded
 10766                           ; Regs used in _enableInterrupts: [wreg+status,0]
 10767                           ;enableInterrupts@enable stored from wreg
 10768  1556  00F0               	movwf	enableInterrupts@enable
 10769                           
 10770                           ;interface.c: 77: PIE0bits.INTE = enable;
 10771  1557  0C70               	rrf	enableInterrupts@enable,w
 10772  1558  0021               	movlb	1	; select bank1
 10773  1559  1C03               	skipc
 10774  155A  1010               	bcf	16,0	;volatile
 10775  155B  1803               	skipnc
 10776  155C  1410               	bsf	16,0	;volatile
 10777  155D  0008               	return
 10778  155E                     __end_of_enableInterrupts:	
 10779                           
 10780                           	psect	text54
 10781  1540                     __ptext54:	
 10782 ;; *************** function _nrf24l01CELow *****************
 10783 ;; Defined at:
 10784 ;;		line 7 in file "interface.c"
 10785 ;; Parameters:    Size  Location     Type
 10786 ;;		None
 10787 ;; Auto vars:     Size  Location     Type
 10788 ;;		None
 10789 ;; Return value:  Size  Location     Type
 10790 ;;                  1    wreg      void 
 10791 ;; Registers used:
 10792 ;;		None
 10793 ;; Tracked objects:
 10794 ;;		On entry : 0/0
 10795 ;;		On exit  : 0/0
 10796 ;;		Unchanged: 0/0
 10797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10802 ;;Total ram usage:        0 bytes
 10803 ;; Hardware stack levels used:    1
 10804 ;; Hardware stack levels required when called:    7
 10805 ;; This function calls:
 10806 ;;		Nothing
 10807 ;; This function is called by:
 10808 ;;		_nrf24l01SetRXMode
 10809 ;;		_nrf24l01Service
 10810 ;;		_nrf24l01Init
 10811 ;;		i1_nrf24l01SetRXMode
 10812 ;;		i1_nrf24l01Service
 10813 ;; This function uses a non-reentrant model
 10814 ;;
 10815                           
 10816                           
 10817                           ;psect for function _nrf24l01CELow
 10818  1540                     _nrf24l01CELow:	
 10819                           
 10820                           ;interface.c: 8: PORTAbits.RA0 = 0;
 10821                           
 10822                           ;incstack = 0
 10823 ;; hardware stack exceeded
 10824                           ; Regs used in _nrf24l01CELow: []
 10825  1540  0020               	movlb	0	; select bank0
 10826  1541  100C               	bcf	12,0	;volatile
 10827  1542  0008               	return
 10828  1543                     __end_of_nrf24l01CELow:	
 10829                           
 10830                           	psect	text55
 10831  153D                     __ptext55:	
 10832 ;; *************** function _nrf24l01CEHigh *****************
 10833 ;; Defined at:
 10834 ;;		line 12 in file "interface.c"
 10835 ;; Parameters:    Size  Location     Type
 10836 ;;		None
 10837 ;; Auto vars:     Size  Location     Type
 10838 ;;		None
 10839 ;; Return value:  Size  Location     Type
 10840 ;;                  1    wreg      void 
 10841 ;; Registers used:
 10842 ;;		None
 10843 ;; Tracked objects:
 10844 ;;		On entry : 0/0
 10845 ;;		On exit  : 0/0
 10846 ;;		Unchanged: 0/0
 10847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10852 ;;Total ram usage:        0 bytes
 10853 ;; Hardware stack levels used:    1
 10854 ;; Hardware stack levels required when called:    7
 10855 ;; This function calls:
 10856 ;;		Nothing
 10857 ;; This function is called by:
 10858 ;;		_nrf24l01SetRXMode
 10859 ;;		_nrf24l01Service
 10860 ;;		_nrf24l01Init
 10861 ;;		i1_nrf24l01SetRXMode
 10862 ;;		i1_nrf24l01Service
 10863 ;; This function uses a non-reentrant model
 10864 ;;
 10865                           
 10866                           
 10867                           ;psect for function _nrf24l01CEHigh
 10868  153D                     _nrf24l01CEHigh:	
 10869                           
 10870                           ;interface.c: 13: PORTAbits.RA0 = 1;
 10871                           
 10872                           ;incstack = 0
 10873 ;; hardware stack exceeded
 10874                           ; Regs used in _nrf24l01CEHigh: []
 10875  153D  0020               	movlb	0	; select bank0
 10876  153E  140C               	bsf	12,0	;volatile
 10877  153F  0008               	return
 10878  1540                     __end_of_nrf24l01CEHigh:	
 10879                           
 10880                           	psect	text56
 10881  15B7                     __ptext56:	
 10882 ;; *************** function i1_memset *****************
 10883 ;; Defined at:
 10884 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
 10885 ;; Parameters:    Size  Location     Type
 10886 ;;  p1              2    0[COMMON] PTR void 
 10887 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 10888 ;;  c               2    2[COMMON] int 
 10889 ;;  n               2    4[COMMON] unsigned int 
 10890 ;; Auto vars:     Size  Location     Type
 10891 ;;  memset          2    6[COMMON] PTR unsigned char 
 10892 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 10893 ;; Return value:  Size  Location     Type
 10894 ;;                  1    wreg      PTR void 
 10895 ;; Registers used:
 10896 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10897 ;; Tracked objects:
 10898 ;;		On entry : 0/0
 10899 ;;		On exit  : 0/0
 10900 ;;		Unchanged: 0/0
 10901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10902 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10903 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10905 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10906 ;;Total ram usage:        8 bytes
 10907 ;; Hardware stack levels used:    1
 10908 ;; This function calls:
 10909 ;;		Nothing
 10910 ;; This function is called by:
 10911 ;;		i1_nrf24l01Service
 10912 ;; This function uses a non-reentrant model
 10913 ;;
 10914                           
 10915                           
 10916                           ;psect for function i1_memset
 10917  15B7                     i1_memset:	
 10918                           
 10919                           ;incstack = 0
 10920                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 10921  15B7  0871               	movf	i1memset@p1+1,w
 10922  15B8  00F7               	movwf	i1memset@p+1
 10923  15B9  0870               	movf	i1memset@p1,w
 10924  15BA  00F6               	movwf	i1memset@p
 10925  15BB                     i1l2999:	
 10926  15BB  3001               	movlw	1
 10927  15BC  02F4               	subwf	i1memset@n,f
 10928  15BD  3000               	movlw	0
 10929  15BE  3BF5               	subwfb	i1memset@n+1,f
 10930  15BF  0A74               	incf	i1memset@n,w
 10931  15C0  1903               	btfsc	3,2
 10932  15C1  0A75               	incf	i1memset@n+1,w
 10933  15C2  1903               	btfsc	3,2
 10934  15C3  0008               	return
 10935  15C4  0876               	movf	i1memset@p,w
 10936  15C5  0086               	movwf	6
 10937  15C6  0877               	movf	i1memset@p+1,w
 10938  15C7  0087               	movwf	7
 10939  15C8  0872               	movf	i1memset@c,w
 10940  15C9  0081               	movwf	1
 10941  15CA  3001               	movlw	1
 10942  15CB  07F6               	addwf	i1memset@p,f
 10943  15CC  3000               	movlw	0
 10944  15CD  3DF7               	addwfc	i1memset@p+1,f
 10945  15CE  2DBB               	goto	i1l2999
 10946  15CF                     __end_ofi1_memset:	
 10947                           ;	Return value of i1_memset is never used
 10948                           
 10949  007E                     btemp	set	126	;btemp
 10950  007E                     int$flags	set	126
 10951  007E                     wtemp0	set	126


Data Sizes:
    Strings     50
    Constant    56
    Data        1
    BSS         120
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80     71      76
    BANK2            80     49      70
    BANK3            80      0      66
    BANK4            80      0      28
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> sendMessage@status(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), romDataMap(BANK4[28]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), romDataMap(BANK4[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 33
		 -> romDataMap.name(BANK4[16]), packet.Message(BANK0[32]), packet.Message(BANK0[32]), main@packet(BANK1[33]), 
		 -> STR_8(CODE[4]), loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK2[17]), STR_9(CODE[5]), STR_7(CODE[6]), STR_6(CODE[5]), 
		 -> STR_5(CODE[7]), STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_10(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendPacket@txPacket	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK4[28]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sendMessage@topic	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_9(CODE[5]), STR_7(CODE[6]), STR_6(CODE[5]), STR_5(CODE[7]), 
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sendMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK4[28]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->i1_nrf24l01Service
    i1_nrf24l01Service->i1_memset
    i1_nrf24l01SetRXMode->i1_nrf24l01Send

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->___lwmod
    _nrf24l01GetPipe->_strlen
    _sendMessage->_ftoa
    _strcat->_ftoa
    _sleep->_doWDTSleep
    _nrf24l01SendPacket->_nrf24l01Service
    _nrf24l01Service->_memset
    _nrf24l01SetRXMode->_nrf24l01Send
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    ___lbtoft->___ftpack
    ___lwtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_loop
    _loop->_sendMessage
    _sendMessage->_strcat
    _strcat->_ftoa
    _ftoa->___fttol

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_loop

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   94612
                                             36 BANK1     35    35      0
                           ___lwtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                  _nrf24l01SetTXPipe
                        _sendMessage
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    5538
                                             17 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               10    10      0    5538
                                              7 BANK0     10    10      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    3     3      0     314
                                              4 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SetRXPipe                                    4     4      0    2380
                                              3 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      5     5      0     762
                                              6 BANK0      5     5      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     337
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _loop                                                50    50      0   58844
                                             35 BANK1      1     1      0
                                              0 BANK2     49    49      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
                           ___lltoft
                        _getADCValue
                       _nrf24l01Send
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _sendMessage                                         10     3      7   25462
                                             25 BANK1     10     3      7
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                 _nrf24l01SendPacket
                              _sleep
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     614
                                             19 BANK1      6     2      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _sleep                                                4     2      2     157
                                              2 BANK0      4     2      2
                         _doWDTSleep
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendPacket                                   4     2      2    6427
                                             12 BANK0      4     2      2
                    _nrf24l01Service
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     462
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Service                                      4     4      0    5855
                                              8 BANK0      4     4      0
                             _memset
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXMode
                             _strcmp
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     216
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _strcmp                                               5     3      2     216
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SetRXMode                                    2     2      0    2350
                                              3 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (5) _nrf24l01Send                                         3     2      1    2284
                                              0 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     532
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                14    10      4   15362
                                             79 BANK0      1     1      0
                                              6 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             36    26     10    2229
                                             24 BANK0     28    18     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     337
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     340
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    3259
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     430
                                             71 BANK0      8     4      4
                                              0 BANK1      6     6      0
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4809
                                             27 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     223
                                             55 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3694
                                             55 BANK0     16    10      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     314
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         12     9      3   11919
                                             43 BANK0     12     9      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                         _doWDTSleep
 ---------------------------------------------------------------------------------
 (3) _doWDTSleep                                           2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    4004
                                             27 BANK0     16    10      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    4564
                                             14 BANK0     13     7      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    3192
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    3034
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    3123
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    3012
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  0     0      0    1756
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (10) _nrf24l01ISR                                         1     1      0    1756
                                             12 COMMON     1     1      0
                     i1_nrf24l01Send
                  i1_nrf24l01Service
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (11) i1_nrf24l01Service                                   4     4      0    1208
                                              8 COMMON     4     4      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
                           i1_strcmp
                           i1_strlen
 ---------------------------------------------------------------------------------
 (12) i1_strlen                                            6     4      2     134
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (12) i1_strcmp                                            5     3      2     117
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (11) i1_nrf24l01SetRXMode                                 2     2      0     307
                                              4 COMMON     2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) i1_nrf24l01Send                                      3     2      1     241
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_memset                                            8     2      6     152
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwtoft
     ___ftpack
   _loop
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___lbtoft
       ___ftpack
     ___lltoft
       ___ftpack
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _sendMessage
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
       _memset (ARG)
       _nrf24l01SendPacket (ARG)
         _nrf24l01Service
           _memset
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
           _nrf24l01Send
             _enableInterrupts
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
           _nrf24l01SetRXMode
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _strcmp
           _strlen
         _strcpy
       _sleep (ARG)
         _doWDTSleep
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _doWDTSleep
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
       _strcpy (ARG)
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _sendMessage
     ___lbtoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _memset (ARG)
     _nrf24l01SendPacket (ARG)
       _nrf24l01Service
         _memset
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
         _nrf24l01SetRXMode
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01Send
             _enableInterrupts
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
         _strcmp
         _strlen
       _strcpy
     _sleep (ARG)
       _doWDTSleep
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
     _strcpy (ARG)
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01Service
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       i1_strcmp
       i1_strlen
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     47      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     31      46       9       87.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      42      11       82.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      1C      13       35.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     14E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     14E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sat Aug 04 06:53:17 2018

                ___bmul@product 0022                     __CFG_CP$OFF 0000                sendMessage@value 00BD  
              sendMessage@topic 00BB             ___wmul@multiplicand 0022             nrf24l01Send@command 0022  
                  ___ftadd@exp1 003A                    ___ftadd@exp2 0039               sendMessage@packet 00B9  
                   __CFG_LVP$ON 0000                    ___ftadd@sign 0038                             l164 0D26  
                           l423 00DF                             l263 16DF                             l434 0182  
                           l426 00FE                             l449 07EC                             l660 0AF6  
                           l652 0ADB                             l743 0CA7                             l659 0AEE  
                           l683 0FA9                    __CFG_CPD$OFF 0000                             _ISR 0004  
             sendMessage@status 00C1                             wreg 0009               sleep@milliseconds 0022  
                          ?_ISR 0070                    ___ftdiv@cntr 0045                    ___ftdiv@sign 004A  
                ??_nrf24l01Init 0031                            l2251 0AC2                            l3051 0CE9  
                          l2331 17B8                            l2261 0AE8                            l2253 0AC7  
                          l2245 0AB1                            l2405 0F48                            l3221 085E  
                          l2423 0F75                            l3063 0D60                            l3047 0CF5  
                          l2335 17D0                            l2327 17B0                            l3215 0846  
                          l2249 0AB8                            l2441 0FBB                            l2425 0F7F  
                          l2417 0F62                            l3065 0D67                            l3049 0CFD  
                          l2353 07E6                            l2601 009D                            l3217 0852  
                          l3225 0867                            l3161 069F                            l2259 0AE0  
                          l2435 0F9B                            l2427 0F84                            l3059 0D48  
                          l2371 0A03                            l2347 1589                            l2611 00AC  
                          l2445 0FCD                            l2437 0FA5                            l2429 0F88  
                          l2381 0A31                            l2373 0A11                            l2613 00DB  
                          l2455 0FE8                            l2703 08D1                            l2471 090F  
                          l2615 00E1                            l3511 0232                            l3175 06F8  
                          l2721 0746                            l2385 0A3C                            l2465 08E9  
                          l2641 0132                            l2625 010D                            l2297 15D4  
                          l3169 06E9                  ??_nrf24l01Send 0021                            l2395 0F32  
                          l2467 08F7                            l2475 091A                            l2651 016E  
                          l2635 012C                            l2619 00E6                            l3515 0249  
                          l3507 0224                            l2813 0C9D                            l2805 0C7E  
                          l3525 0264                            l2493 1623                            l2399 0F39  
                          l2751 07B3                            l2743 079F                            l2727 075C  
                          l2815 0CAB                            l2807 0C8F                            l2647 015F  
                          l2673 01F2                            l2657 0195                            l2593 006F  
                          l3553 02BD                            l3545 02A4                            l2921 16EB  
                          l2931 16FE                            l2755 07BB                            l2739 0797  
                          l2819 0CB9                            l2827 17DB                            l2667 01AD  
                          l2659 0198                            l2587 005F                            l2675 003C  
                          l3563 02F1                            l2851 1725                            l2683 0804  
                          l2941 0D86                            l2829 17EB                            l2677 01FD  
                          l3549 02B5                            l2861 1777                            l3495 1698  
                          l3575 033F                            l3591 09AA                            l2687 080A  
                          l2961 0DDD                            l2777 165F                            l2873 0E5E  
                          l3497 16A4                            l3593 09C5                            l2857 1763  
                          l2947 0D9C                            l2699 08BB                            l2787 0C45  
                          l3579 0356                            l2859 176F                            l3771 0894  
                          l2969 0DF6                            l3769 0871                            l3857 0C26  
                          STR_1 1868                    __CFG_WDTE$ON 0000                            STR_2 1868  
                          STR_3 1850                            STR_4 185A                            STR_5 183E  
                          STR_6 1855                            STR_7 1845                            STR_8 1864  
                          STR_9 185F                            u2115 0A12                            u2125 0A26  
                          u2135 0A32                            u2055 07ED                            u2305 0F89  
                          u3025 0C9E                            u2065 07F2                            u2245 0F63  
                          u3205 0DED                            u3134 16E5                            u2335 0F9C  
                          u3215 0DF7                            u3055 17E0                            u2095 0A06  
                          u2415 0905                            u3135 16E4                            u2425 0910  
                          u4017 0BB3                            u2275 0F76                            u4027 092F  
                          u4037 093E                            u3175 0DAE                            u4047 09BC  
                          u3185 0DBE                            u2705 0178                            u4057 025F  
                          u3195 0DDE                            u2395 08EC                            u2715 018A  
                          u4067 0830                            u4077 083B                            u3365 0849  
                          u1935 0AFD                            u1855 0ABD                            u2905 07BC  
                          u3385 0858                            u1875 0AD6                            u2915 07C2  
                          u2835 0768                            u2675 0155                            u3395 085F  
                          u2845 0778                            u1895 0AE3                            u2695 0166  
                          u2865 07A0                            u2875 07A6                            u3675 0243  
                          u2965 0C4D                            i1l48 1575                            u2995 0C7F  
                          u3995 0882                            _WPUA 020C                            _WPUC 020E  
__size_of_nrf24l01InterfaceInit 001E                    __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000  
 __end_of_nrf24l01InterfaceInit 1693                            _main 0B97                            _ftoa 0E18  
                  ___ftpack@arg 0020                            _loop 037A                    ___ftpack@exp 0023  
                          fsr0h 0005                            fsr1h 0007                            indf0 0000  
                          fsr0l 0004                            indf1 0001                            fsr1l 0006  
                          btemp 007E                   __CFG_BORV$LOW 0000                            start 000F  
         nrf24l01SetRXPipe@pipe 0025                   __CFG_CSWEN$ON 0000               ___bmul@multiplier 0023  
                 __CFG_MCLRE$ON 0000                    ___ftmul@cntr 0065                    ___ftmul@sign 0066  
   __size_of_nrf24l01SendPacket 0048                           ??_ISR 007D                    ___fttol@exp1 00A5  
          __size_of_getADCValue 00A6                 ??_nrf24l01CELow 0070                    ___fttol@lval 00A1  
               ??_nrf24l01CSLow 0070                           ?_main 0070                           ?_ftoa 00A6  
                         ?_loop 0070                 __end_of___ftadd 1000                           STR_10 1829  
               __end_of___ftdiv 0E18                 __end_of___ftneg 156F                 __end_of___lldiv 0A45  
               __end_of___ftmul 07E3                 __end_of___llmod 0923                 __end_of___ftsub 1675  
               __end_of___fttol 0CC9                  __CFG_DEBUG$OFF 0000                           i1l153 000D  
                         i1l280 0A9C                 __end_of___lwmod 086C                           i1l274 0A81  
                         i1l275 0A80          enableInterrupts@enable 0070                      i1memset@p1 0070  
                 __CFG_PWRTE$ON 0000           nrf24l01SetTXPipe@pipe 0026                    ___lltoft@exp 002D  
                 ___awtoft@sign 002D                 __end_of_dpowers 1828                 __end_of_isdigit 158B  
                         _sleep 1715                   ___ftpack@sign 0024                           ftoa@f 00A6  
                         ftoa@l 00AE                  __CFG_BOREN$OFF 0000                _enableInterrupts 1556  
                         status 0003                           wtemp0 007E                 __end_of_sprintf 0203  
   __end_ofi1_nrf24l01SetRXMode 175E                __end_ofi1_memset 15CF               getADCValue@adcSum 0054  
              __end_ofi1_strcmp 17AD                __end_ofi1_strlen 1657                _nrf24l01SPIStart 155E  
               __initialization 0011          nrf24l01InitRegisters@i 002F                    __end_of_main 0C2A  
                  __end_of_ftoa 0F0A                    __end_of_loop 04C8                ??_nrf24l01CEHigh 0070  
                    i1strcmp@s1 0074                      i1strcmp@s2 0070                          ??_main 00C4  
                        ??_ftoa 006F                   ___fttol@sign1 00A0                          ??_loop 00C3  
              ??_nrf24l01CSHigh 0070                      i1strlen@cp 0074                    ?_sendMessage 00B9  
              ??_nrf24l01SPIEnd 0070        __size_of_nrf24l01SPISend 000D                ___llmod@dividend 0032  
                        _ADRESH 009C                          _ADRESL 009B                          ?_sleep 0022  
              __end_of___awtoft 1715                          _ANSELA 018C                          _ANSELC 018E  
              __end_of___ftpack 0B0D                __end_of___lbtoft 161E                __end_of___lltoft 1800  
                        i1l3011 17A7                          i1l3003 1787                          i1l3007 178F  
                        _ODCONA 028C        __size_of_nrf24l01GetPipe 0038                          _ODCONC 028E  
                        i1l2277 157A                          i1l3605 163D                          i1l3607 1649  
                        i1l3705 05DF                          i1l3641 04F3                          i1l3709 05F4  
                        i1l3645 0509                          i1l3637 04E6                          i1l3655 0521  
                        i1l3735 0A9D                          i1l3729 0A73                          i1l3683 0573  
                        i1l3675 055B                          i1l3693 059D                          i1l3679 056B  
                        i1l2999 15BB                          _INLVLA 038C                          _INLVLC 038E  
                        u410_27 175A                          u411_27 1562                          u412_27 1550  
                        u408_27 051C                          u409_27 1750                __end_of___lwtoft 15A0  
                        u382_25 0503               i1_nrf24l01Service 04C8              ?i1_nrf24l01Service 0070  
      __size_of_nrf24l01Service 0177            __size_of_nrf24l01ISR 0063                          ___bmul 0801  
                        ___ftge 08A4         nrf24l01SetRXMode@rxMode 0024                          ___wmul 07E3  
           ??i1_nrf24l01Service 0078                       ??___ftadd 0034                  __CFG_STVREN$ON 0000  
                     ??___ftdiv 0041                       ??___ftneg 005A                       ??___lldiv 0028  
                     ??___ftmul 005D                       ??___llmod 0036                       ??___ftsub 0041  
                     ??___fttol 006B                       ??___lwmod 0024            __end_of_nrf24l01Init 0966  
          __end_of_nrf24l01Send 16D2                          _memset 15CF           _nrf24l01InitRegisters 0611  
                        _status 00E7                          _strcat 175E                          _strcmp 17AD  
                        _strcpy 161E                          _strlen 1693                          ftoa@cp 00B2  
         ___ftmul@f3_as_product 0062                       ??_isdigit 0020                          loop@ta 0123  
                        loop@vt 0120       i1nrf24l01SetRXMode@rxMode 0075                       ??_sprintf 0042  
              __end_of_statuses 183E       __end_ofi1_nrf24l01Service 0611              getADCValue@adcLoop 0051  
       __end_of__initialization 0032                      ___ftadd@f1 002E                      ___ftadd@f2 0031  
                    ___ftge@ff1 0020                      ___ftge@ff2 0023              getADCValue@channel 0053  
                    ___ftdiv@f1 003E                      ___ftdiv@f2 003B                      ___ftdiv@f3 0046  
                    ___ftneg@f1 0057                      ___awtoft@c 0028                      ___lbtoft@c 002F  
           ___bmul@multiplicand 0020                      ___ftmul@f1 0057                      ___ftmul@f2 005A  
                    ___ftsub@f1 003E                      ___ftsub@f2 003B                      ___fttol@f1 0067  
                __pcstackCOMMON 0070                    __pidataBANK1 07FF                      ___lltoft@c 0028  
                    _doWDTSleep 15A0                   __end_of_sleep 1737                      ___lwtoft@c 0028  
                     ?i1_memset 0070                       ?i1_strcmp 0070                       ?i1_strlen 0070  
                       ??_sleep 0024                    sprintf@width 004F                     loop@rfSetup 012F  
                    __pbssBANK1 00E7                      __pbssBANK2 0151                      __pbssBANK3 01A0  
                    __pbssBANK4 0220               ??_nrf24l01SPISend 0070          i1nrf24l01Service@width 007A  
       __size_ofi1_nrf24l01Send 001B               ??_nrf24l01GetPipe 0026                      __pmaintext 0B97  
                       ?___bmul 0020                         ?___ftge 0020                         ?___wmul 0020  
               __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 0813               _nrf24l01SetRXPipe 16D2  
        ?_nrf24l01InitRegisters 0070                      __pintentry 0004               _nrf24l01SetTXPipe 0966  
           nrf24l01SPISend@data 0070                         ?_memset 0020               ??_nrf24l01Service 0028  
            ?_nrf24l01SetRXMode 0070                       ?___awtoft 0028                       ?___ftpack 0020  
                     ?___lbtoft 0028              ?_nrf24l01SetRXPipe 0070        __end_of_enableInterrupts 155E  
            ?_nrf24l01SetTXPipe 0070                       ?___lltoft 0028             __CFG_RSTOSC$HFINT32 0000  
                       ?_strcat 00B3                         ?_strcmp 0020                         ?_strcpy 0020  
                       ?_strlen 0020                       ?___lwtoft 0028           __end_of_n_ADDRESS_MUL 1829  
                    ??i1_memset 0076            __size_of_sendMessage 008A             ??_nrf24l01SetRXMode 0023  
      __end_of_nrf24l01SPIStart 1566             ??_nrf24l01SetRXPipe 0023             ??_nrf24l01SetTXPipe 0024  
                    ??i1_strcmp 0072                      ??i1_strlen 0072                         _SSP1BUF 0211  
    __size_ofi1_nrf24l01Service 0149           _nrf24l01InterfaceInit 1675            nrf24l01Service@width 002A  
    __end_of_nrf24l01SendPacket 09F2                   ??_getADCValue 004E           __size_of_nrf24l01Init 0043  
         __size_of_nrf24l01Send 0020       __end_of_nrf24l01SetRXMode 083F       __end_of_nrf24l01SetRXPipe 16F3  
     __end_of_nrf24l01SetTXPipe 09AA                 __size_of___bmul 0012                 __size_of___ftge 003C  
                       ___ftadd 0F0A                     ?_doWDTSleep 0070                         ___ftdiv 0D6F  
                       ___ftneg 1566                         ___lldiv 09F2                 __size_of___wmul 001C  
                       ___ftmul 072F                         ___llmod 08E0                         ___ftsub 1657  
                       ___fttol 0C2A                         ___lwmod 083F                      ??___awtoft 002B  
                    ??___ftpack 0025                      ??___lbtoft 002B           __end_of_nrf24l01CELow 1543  
               __size_of_memset 0019           __end_of_nrf24l01CSLow 1549                      ??___lltoft 002C  
                       __ptext1 0923                         __ptext2 1675                         __ptext3 0611  
                       __ptext4 0966                         __ptext5 0801                         __ptext6 16D2  
                       __ptext7 086C                         __ptext8 083F                         __ptext9 037A  
                    ??___lwtoft 002B                 __size_of_strcat 0027                 __size_of_strcmp 0029  
               __size_of_strcpy 001B                 __size_of_strlen 001F                    __size_of_ISR 000B  
                       _counter 0151                         _dpowers 1800                         _isdigit 157C  
                       _romData 00EB                         _sprintf 0036                         clrloop0 154A  
          end_of_initialization 0032                         ftoa@buf 0155                         ftoa@rem 00AA  
                  _nrf24l01Init 0923                    _nrf24l01Send 16B2                      _romDataMap 0220  
                       memset@c 0022                         memset@n 0024                         memset@p 0026  
              nrf24l01GetPipe@i 002A                 ___lldiv@divisor 0020                 ___lldiv@counter 002D  
  __size_ofi1_nrf24l01SetRXMode 0027                         strcmp@r 0023           i1nrf24l01Send@command 0073  
                       strlen@s 0020             __end_of_getADCValue 0D6F                       _PORTAbits 000C  
                     _PORTCbits 000E                       _TRISAbits 008C                       _TRISCbits 008E  
              nrf24l01Send@data 0020                __CFG_FEXTOSC$OFF 0000             __size_of_doWDTSleep 0017  
                 ??_nrf24l01ISR 007C          ?_nrf24l01InterfaceInit 0070                     ___ftdiv@exp 0049  
                i1_nrf24l01Send 15E8                      main@packet 00C6                nrf24l01Service@i 002B  
    __size_of_nrf24l01SetRXMode 002C      __size_of_nrf24l01SetRXPipe 0021                     ___ftmul@exp 0061  
    __size_of_nrf24l01SetTXPipe 0044                  __end_of___bmul 0813                  __end_of___ftge 08E0  
                __end_of___wmul 07FF                       i1memset@c 0072                       i1memset@n 0074  
                     i1memset@p 0076                  __end_of_memset 15E8                  __end_of_strcat 1785  
                __end_of_strcmp 17D6                  __end_of_strcpy 1639                  __end_of_strlen 16B2  
           start_initialization 0011                 _nrf24l01SPISend 156F                     __end_of_ISR 000F  
                    ftoa@status 00A9               __size_ofi1_memset 0018       nrf24l01SetRXPipe@enRXAddr 0026  
               _nrf24l01GetPipe 086C         __size_of_nrf24l01CEHigh 0003                       i1strcmp@r 0073  
                     i1strlen@s 0070               __size_ofi1_strcmp 0028               __size_ofi1_strlen 001E  
       __size_of_nrf24l01CSHigh 0003          __end_ofi1_nrf24l01Send 1603         __size_of_nrf24l01SPIEnd 0007  
               ___llmod@divisor 002E                 ___llmod@counter 0037                 _nrf24l01Service 0203  
       ??_nrf24l01InitRegisters 0027                __CFG_LPBOREN$OFF 0000                     _getADCValue 0CC9  
                      ??___bmul 0021                        ??___ftge 0026             __end_of_nrf24l01ISR 0AA8  
                      ??___wmul 0024                     __pdataBANK1 00EB                        ??_memset 0026  
             ?_enableInterrupts 0070                        ??_strcat 0070                        ??_strcmp 0022  
                      ??_strcpy 0024                        ??_strlen 0022               __size_of___awtoft 0022  
             __size_of___ftpack 0065               __size_of___lbtoft 001B              ??_enableInterrupts 0070  
             __size_of___lltoft 002A                     __pbssCOMMON 007D                       ___latbits 0002  
             __size_of___lwtoft 0015                   __pcstackBANK0 0020                   __pcstackBANK1 00A0  
                 __pcstackBANK2 0120                 doWDTSleep@wdtps 0021               ?_nrf24l01SPIStart 0070  
                  _isdigit$1708 0020              ??_nrf24l01SPIStart 0070                 ?i1_nrf24l01Send 0071  
                   sprintf@flag 0048                     sprintf@prec 0051                      loop@packet 0130  
           nrf24l01GetPipe@name 0029             nrf24l01GetPipe@pipe 0028                    ??_doWDTSleep 0020  
                      ?___ftadd 002E                        ?___ftdiv 003B                        ?___ftneg 0057  
                      ?___lldiv 0020                        ?___ftmul 0057                        ?___llmod 002E  
                      ?___ftsub 003B                        ?___fttol 0067                        ?___lwmod 0020  
          __end_of_n_ADDRESS_P0 1850         __end_of_nrf24l01SPISend 157C              i1nrf24l01Send@data 0071  
     nrf24l01InitRegisters@enAA 002D                   ??_sendMessage 00C0              _nrf24l01SendPacket 09AA  
       __end_of_nrf24l01GetPipe 08A4                        ?_isdigit 0070                       _loop$1960 012C  
                     _loop$1958 0126                       _loop$1959 0129             ?_nrf24l01SendPacket 002C  
                      ?_sprintf 0038             i1_nrf24l01SetRXMode 1737              i1nrf24l01Service@i 007B  
       __end_of_nrf24l01Service 037A                  __size_of_sleep 0022              __end_of_doWDTSleep 15B7  
                ___wmul@product 0024                     _nrf24l01ISR 0A45                       clear_ram0 1549  
                      _PIE0bits 0090                        _PIR0bits 0010                       _sleepLoop 007D  
          ??_nrf24l01SendPacket 002E            ?i1_nrf24l01SetRXMode 0070                      _ADCON0bits 009D  
                    _ADCON1bits 009E               ___wmul@multiplier 0020                        _WPUAbits 020C  
                      i1_memset 15B7                        _RXPacket 01A0                        _TXPacket 01C1  
                      i1_strcmp 1785                        i1_strlen 1639             __end_of_sendMessage 0B97  
                _nrf24l01CEHigh 153D         ??_nrf24l01InterfaceInit 0020                  _nrf24l01CSHigh 1543  
                _nrf24l01SPIEnd 154F          __size_of_nrf24l01CELow 0003          __size_of_nrf24l01CSLow 0003  
         ??i1_nrf24l01SetRXMode 0074                __size_of___ftadd 00F6                __size_of___ftdiv 00A9  
              __size_of___ftneg 0009                __size_of___lldiv 0053                __size_of___ftmul 00B4  
              __size_of___llmod 0043                __size_of___ftsub 001E                __size_of___fttol 009F  
              __size_of___lwmod 002D                        ___awtoft 16F3                        ___ftpack 0AA8  
                      ___lbtoft 1603                ?_nrf24l01SPISend 0070                        ___lltoft 17D6  
                    _ANSELAbits 018C                        ___lwtoft 158B                      _ANSELCbits 018E  
              ?_nrf24l01GetPipe 0070                      sprintf@val 004A                   _n_ADDRESS_MUL 1828  
                    strcat@from 00B5          __end_of_nrf24l01CEHigh 1540                __size_of_isdigit 000F  
        __end_of_nrf24l01CSHigh 1546                        __ptext10 0B0D                        __ptext11 175E  
                      __ptext20 15CF                        __ptext12 1715                        __ptext21 0E18  
                      __ptext13 09AA                        __ptext30 1566                        __ptext22 0036  
                      __ptext14 161E                        __ptext31 072F                        __ptext23 157C  
                      __ptext15 0203                        __ptext40 0AA8                        __ptext32 08A4  
                      __ptext24 07E3                        __ptext16 1693                        __ptext33 0CC9  
                      __ptext25 08E0                        __ptext17 17AD                        __ptext50 156F  
                      __ptext42 0A45                        __ptext34 15A0                        __ptext26 09F2  
                      __ptext18 0813                        __ptext51 154F                        __ptext43 04C8  
                      __ptext35 0D6F                        __ptext27 17D6                        __ptext19 16B2  
                      __ptext52 1543                        __ptext44 1639                        __ptext36 0F0A  
                      __ptext28 0C2A                        __ptext53 1556                        __ptext45 1785  
                      __ptext37 16F3                        __ptext29 1657                        __ptext54 1540  
                      __ptext46 1737                        __ptext38 1603                        __ptext55 153D  
                      __ptext47 15E8                        __ptext39 158B                        __ptext56 15B7  
                      __ptext48 155E                        __ptext49 1546                    _SSP1CON1bits 0215  
        __end_of_nrf24l01SPIEnd 1556                ?_nrf24l01Service 0070                __size_of_sprintf 01CD  
                   _OSCCON1bits 0919                      strcpy@from 0022                   __size_of_main 0093  
                 __size_of_ftoa 00F2                   __size_of_loop 014E    nrf24l01InitRegisters@channel 0029  
  nrf24l01InitRegisters@feature 002B                      _RC0PPSbits 0EA0    nrf24l01InitRegisters@rfSetup 002C  
                    _RC1PPSbits 0EA1                    ?_getADCValue 004B                      _RC2PPSbits 0EA2  
__size_of_nrf24l01InitRegisters 011E   __end_of_nrf24l01InitRegisters 072F                        int$flags 007E  
  nrf24l01InitRegisters@setupAW 002A                      _ODCONAbits 028C                        _statuses 1834  
                  _SSP1STATbits 0214                        main@pipe 00C5      nrf24l01SendPacket@txPacket 002C  
                 _nrf24l01CELow 1540                     _sendMessage 0B0D                   _nrf24l01CSLow 1546  
                    _INTCONbits 000B                 ?_nrf24l01CEHigh 0070                      _FVRCONbits 0117  
              ??i1_nrf24l01Send 0072                 ?_nrf24l01CSHigh 0070                  __pstringtext10 185F  
                __pstringtext11 1864                  __pstringtext12 1868                  __pstringtext13 0000  
                      isdigit@c 0021                        memset@p1 0020                 ?_nrf24l01SPIEnd 0070  
                      intlevel1 0000                       sprintf@ap 0049                       sprintf@sp 004E  
                  _n_ADDRESS_P0 184B       __size_of_enableInterrupts 0008                ___lwmod@dividend 0022  
              ___lldiv@dividend 0024               __CFG_CLKOUTEN$OFF 0000       __size_of_nrf24l01SPIStart 0008  
                ?_nrf24l01CELow 0070                   __pstringtext1 1800                   __pstringtext2 1834  
                 __pstringtext3 184B                   __pstringtext4 1828                   __pstringtext5 183E  
                 __pstringtext6 1845                   __pstringtext7 1850                   __pstringtext8 1855  
                 __pstringtext9 185A                  ?_nrf24l01CSLow 0070                        sprintf@c 0053  
                      sprintf@f 0038      nrf24l01InitRegisters@DynPD 002E                        strcat@cp 00B7  
                      strcat@to 00B3                        strcmp@s1 0024                        strcmp@s2 0020  
              ___lldiv@quotient 0029                 ___lwmod@divisor 0020                        strcpy@cp 0024  
                      strlen@cp 0024                        strcpy@to 0020                 ___lwmod@counter 0025  
                    _WDTCONbits 0097                   ?_nrf24l01Init 0070                   ?_nrf24l01Send 0020  
                  ?_nrf24l01ISR 0070  
