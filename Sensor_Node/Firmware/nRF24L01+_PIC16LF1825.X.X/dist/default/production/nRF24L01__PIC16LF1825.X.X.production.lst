

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Tue Jul 17 14:31:10 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	_romArray_text,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	clrtext,global,class=CODE,delta=2
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    27                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text2,local,class=CODE,merge=1,delta=2
    29                           	psect	text3,local,class=CODE,merge=1,delta=2
    30                           	psect	text4,local,class=CODE,merge=1,delta=2
    31                           	psect	text5,local,class=CODE,merge=1,delta=2
    32                           	psect	text6,local,class=CODE,merge=1,delta=2
    33                           	psect	text7,local,class=CODE,merge=1,delta=2
    34                           	psect	text8,local,class=CODE,merge=1,delta=2
    35                           	psect	text9,local,class=CODE,merge=1,delta=2
    36                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text14,local,class=CODE,merge=1,delta=2
    41                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text16,local,class=CODE,merge=1,delta=2
    43                           	psect	text17,local,class=CODE,merge=1,delta=2
    44                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text20,local,class=CODE,merge=1,delta=2
    47                           	psect	text21,local,class=CODE,merge=1,delta=2
    48                           	psect	text22,local,class=CODE,merge=1,delta=2
    49                           	psect	text23,local,class=CODE,merge=1,delta=2
    50                           	psect	text24,local,class=CODE,merge=1,delta=2
    51                           	psect	text25,local,class=CODE,merge=1,delta=2
    52                           	psect	text26,local,class=CODE,merge=1,delta=2
    53                           	psect	text27,local,class=CODE,merge=1,delta=2
    54                           	psect	intentry,global,class=CODE,delta=2
    55                           	psect	text29,local,class=CODE,merge=1,delta=2
    56                           	psect	text30,local,class=CODE,merge=1,delta=2
    57                           	psect	text31,local,class=CODE,merge=1,delta=2
    58                           	psect	text32,local,class=CODE,merge=1,delta=2
    59                           	psect	text33,local,class=CODE,merge=1,delta=2
    60                           	psect	text34,local,class=CODE,merge=1,delta=2
    61                           	psect	text35,local,class=CODE,merge=1,delta=2
    62                           	psect	text36,local,class=CODE,merge=1,delta=2
    63                           	psect	text37,local,class=CODE,merge=1,delta=2
    64                           	psect	text38,local,class=CODE,merge=1,delta=2
    65                           	psect	text39,local,class=CODE,merge=1,delta=2
    66                           	psect	text40,local,class=CODE,merge=1,delta=2
    67                           	psect	text41,local,class=CODE,merge=1,delta=2
    68                           	psect	text42,local,class=CODE,merge=1,delta=2
    69                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    70                           	psect	text44,local,class=CODE,merge=1,delta=2
    71                           	psect	text45,local,class=CODE,merge=1,delta=2
    72                           	psect	text46,local,class=CODE,merge=1,delta=2
    73                           	psect	text47,local,class=CODE,merge=1,delta=2,group=1
    74                           	dabs	1,0x7E,2
    75  0000                     
    76                           ; Version 2.00
    77                           ; Generated 27/05/2018 GMT
    78                           ; 
    79                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC16LF18325 Definitions
   108                           ; 
   109                           ; SFR Addresses
   110  0000                     	;# 
   111  0001                     	;# 
   112  0002                     	;# 
   113  0003                     	;# 
   114  0004                     	;# 
   115  0005                     	;# 
   116  0006                     	;# 
   117  0007                     	;# 
   118  0008                     	;# 
   119  0009                     	;# 
   120  000A                     	;# 
   121  000B                     	;# 
   122  000C                     	;# 
   123  000E                     	;# 
   124  0010                     	;# 
   125  0011                     	;# 
   126  0012                     	;# 
   127  0013                     	;# 
   128  0014                     	;# 
   129  0015                     	;# 
   130  0015                     	;# 
   131  0016                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  0019                     	;# 
   137  001A                     	;# 
   138  001B                     	;# 
   139  001C                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  008C                     	;# 
   144  008E                     	;# 
   145  0090                     	;# 
   146  0091                     	;# 
   147  0092                     	;# 
   148  0093                     	;# 
   149  0094                     	;# 
   150  0097                     	;# 
   151  009B                     	;# 
   152  009B                     	;# 
   153  009C                     	;# 
   154  009D                     	;# 
   155  009E                     	;# 
   156  009F                     	;# 
   157  010C                     	;# 
   158  010E                     	;# 
   159  0111                     	;# 
   160  0112                     	;# 
   161  0113                     	;# 
   162  0114                     	;# 
   163  0115                     	;# 
   164  0116                     	;# 
   165  0117                     	;# 
   166  0118                     	;# 
   167  0119                     	;# 
   168  018C                     	;# 
   169  018E                     	;# 
   170  0199                     	;# 
   171  0199                     	;# 
   172  0199                     	;# 
   173  019A                     	;# 
   174  019A                     	;# 
   175  019A                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019B                     	;# 
   180  019B                     	;# 
   181  019C                     	;# 
   182  019C                     	;# 
   183  019C                     	;# 
   184  019D                     	;# 
   185  019D                     	;# 
   186  019D                     	;# 
   187  019E                     	;# 
   188  019E                     	;# 
   189  019E                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  019F                     	;# 
   193  019F                     	;# 
   194  019F                     	;# 
   195  020C                     	;# 
   196  020E                     	;# 
   197  0211                     	;# 
   198  0211                     	;# 
   199  0212                     	;# 
   200  0212                     	;# 
   201  0213                     	;# 
   202  0213                     	;# 
   203  0214                     	;# 
   204  0214                     	;# 
   205  0215                     	;# 
   206  0215                     	;# 
   207  0215                     	;# 
   208  0215                     	;# 
   209  0216                     	;# 
   210  0216                     	;# 
   211  0217                     	;# 
   212  0217                     	;# 
   213  0219                     	;# 
   214  021A                     	;# 
   215  021B                     	;# 
   216  021C                     	;# 
   217  021D                     	;# 
   218  021D                     	;# 
   219  021E                     	;# 
   220  021F                     	;# 
   221  028C                     	;# 
   222  028E                     	;# 
   223  0291                     	;# 
   224  0291                     	;# 
   225  0292                     	;# 
   226  0293                     	;# 
   227  0294                     	;# 
   228  0295                     	;# 
   229  0295                     	;# 
   230  0296                     	;# 
   231  0297                     	;# 
   232  0298                     	;# 
   233  029F                     	;# 
   234  030C                     	;# 
   235  030E                     	;# 
   236  0311                     	;# 
   237  0311                     	;# 
   238  0312                     	;# 
   239  0313                     	;# 
   240  0314                     	;# 
   241  0315                     	;# 
   242  0315                     	;# 
   243  0316                     	;# 
   244  0317                     	;# 
   245  0318                     	;# 
   246  038C                     	;# 
   247  038E                     	;# 
   248  0391                     	;# 
   249  0392                     	;# 
   250  0393                     	;# 
   251  0397                     	;# 
   252  0398                     	;# 
   253  0399                     	;# 
   254  039A                     	;# 
   255  039C                     	;# 
   256  039D                     	;# 
   257  039E                     	;# 
   258  039F                     	;# 
   259  0411                     	;# 
   260  0411                     	;# 
   261  0412                     	;# 
   262  0413                     	;# 
   263  0414                     	;# 
   264  0415                     	;# 
   265  0416                     	;# 
   266  0417                     	;# 
   267  0418                     	;# 
   268  0418                     	;# 
   269  0419                     	;# 
   270  041A                     	;# 
   271  041B                     	;# 
   272  041C                     	;# 
   273  041D                     	;# 
   274  041E                     	;# 
   275  041F                     	;# 
   276  0498                     	;# 
   277  0498                     	;# 
   278  0499                     	;# 
   279  049A                     	;# 
   280  049B                     	;# 
   281  049B                     	;# 
   282  049C                     	;# 
   283  049D                     	;# 
   284  049E                     	;# 
   285  049F                     	;# 
   286  0617                     	;# 
   287  0618                     	;# 
   288  0619                     	;# 
   289  0619                     	;# 
   290  061A                     	;# 
   291  061B                     	;# 
   292  061C                     	;# 
   293  061C                     	;# 
   294  061F                     	;# 
   295  0691                     	;# 
   296  0692                     	;# 
   297  0693                     	;# 
   298  0694                     	;# 
   299  0695                     	;# 
   300  0696                     	;# 
   301  0697                     	;# 
   302  0698                     	;# 
   303  0699                     	;# 
   304  0711                     	;# 
   305  0712                     	;# 
   306  0713                     	;# 
   307  0714                     	;# 
   308  0715                     	;# 
   309  0716                     	;# 
   310  0717                     	;# 
   311  0718                     	;# 
   312  0719                     	;# 
   313  0891                     	;# 
   314  0891                     	;# 
   315  0891                     	;# 
   316  0891                     	;# 
   317  0891                     	;# 
   318  0891                     	;# 
   319  0892                     	;# 
   320  0892                     	;# 
   321  0892                     	;# 
   322  0893                     	;# 
   323  0893                     	;# 
   324  0893                     	;# 
   325  0893                     	;# 
   326  0893                     	;# 
   327  0893                     	;# 
   328  0894                     	;# 
   329  0894                     	;# 
   330  0894                     	;# 
   331  0895                     	;# 
   332  0895                     	;# 
   333  0895                     	;# 
   334  0896                     	;# 
   335  0896                     	;# 
   336  0896                     	;# 
   337  089B                     	;# 
   338  0911                     	;# 
   339  0912                     	;# 
   340  0913                     	;# 
   341  0914                     	;# 
   342  0915                     	;# 
   343  0916                     	;# 
   344  0918                     	;# 
   345  0919                     	;# 
   346  091A                     	;# 
   347  091B                     	;# 
   348  091C                     	;# 
   349  091D                     	;# 
   350  091E                     	;# 
   351  091F                     	;# 
   352  0E0F                     	;# 
   353  0E10                     	;# 
   354  0E11                     	;# 
   355  0E12                     	;# 
   356  0E13                     	;# 
   357  0E14                     	;# 
   358  0E15                     	;# 
   359  0E16                     	;# 
   360  0E17                     	;# 
   361  0E18                     	;# 
   362  0E19                     	;# 
   363  0E1A                     	;# 
   364  0E1B                     	;# 
   365  0E1C                     	;# 
   366  0E1D                     	;# 
   367  0E1E                     	;# 
   368  0E1F                     	;# 
   369  0E20                     	;# 
   370  0E21                     	;# 
   371  0E22                     	;# 
   372  0E24                     	;# 
   373  0E25                     	;# 
   374  0E28                     	;# 
   375  0E29                     	;# 
   376  0E2A                     	;# 
   377  0E2B                     	;# 
   378  0E2C                     	;# 
   379  0E2D                     	;# 
   380  0E2E                     	;# 
   381  0E2F                     	;# 
   382  0E90                     	;# 
   383  0E91                     	;# 
   384  0E92                     	;# 
   385  0E94                     	;# 
   386  0E95                     	;# 
   387  0EA0                     	;# 
   388  0EA1                     	;# 
   389  0EA2                     	;# 
   390  0EA3                     	;# 
   391  0EA4                     	;# 
   392  0EA5                     	;# 
   393  0F0F                     	;# 
   394  0F10                     	;# 
   395  0F11                     	;# 
   396  0F12                     	;# 
   397  0F13                     	;# 
   398  0F14                     	;# 
   399  0F15                     	;# 
   400  0F16                     	;# 
   401  0F17                     	;# 
   402  0F18                     	;# 
   403  0F19                     	;# 
   404  0F1A                     	;# 
   405  0F1B                     	;# 
   406  0F1C                     	;# 
   407  0F1D                     	;# 
   408  0F1E                     	;# 
   409  0F1F                     	;# 
   410  0F20                     	;# 
   411  0F21                     	;# 
   412  0F22                     	;# 
   413  0F23                     	;# 
   414  0F24                     	;# 
   415  0F25                     	;# 
   416  0F26                     	;# 
   417  0F27                     	;# 
   418  0F28                     	;# 
   419  0F29                     	;# 
   420  0F2A                     	;# 
   421  0F2B                     	;# 
   422  0F2C                     	;# 
   423  0F2D                     	;# 
   424  0F2E                     	;# 
   425  0F2F                     	;# 
   426  0F30                     	;# 
   427  0F31                     	;# 
   428  0F32                     	;# 
   429  0F33                     	;# 
   430  0F34                     	;# 
   431  0F35                     	;# 
   432  0F36                     	;# 
   433  0F37                     	;# 
   434  0FE4                     	;# 
   435  0FE5                     	;# 
   436  0FE6                     	;# 
   437  0FE7                     	;# 
   438  0FE8                     	;# 
   439  0FE9                     	;# 
   440  0FEA                     	;# 
   441  0FEB                     	;# 
   442  0FED                     	;# 
   443  0FEE                     	;# 
   444  0FEF                     	;# 
   445  0000                     	;# 
   446  0001                     	;# 
   447  0002                     	;# 
   448  0003                     	;# 
   449  0004                     	;# 
   450  0005                     	;# 
   451  0006                     	;# 
   452  0007                     	;# 
   453  0008                     	;# 
   454  0009                     	;# 
   455  000A                     	;# 
   456  000B                     	;# 
   457  000C                     	;# 
   458  000E                     	;# 
   459  0010                     	;# 
   460  0011                     	;# 
   461  0012                     	;# 
   462  0013                     	;# 
   463  0014                     	;# 
   464  0015                     	;# 
   465  0015                     	;# 
   466  0016                     	;# 
   467  0016                     	;# 
   468  0017                     	;# 
   469  0018                     	;# 
   470  0019                     	;# 
   471  0019                     	;# 
   472  001A                     	;# 
   473  001B                     	;# 
   474  001C                     	;# 
   475  001D                     	;# 
   476  001E                     	;# 
   477  001F                     	;# 
   478  008C                     	;# 
   479  008E                     	;# 
   480  0090                     	;# 
   481  0091                     	;# 
   482  0092                     	;# 
   483  0093                     	;# 
   484  0094                     	;# 
   485  0097                     	;# 
   486  009B                     	;# 
   487  009B                     	;# 
   488  009C                     	;# 
   489  009D                     	;# 
   490  009E                     	;# 
   491  009F                     	;# 
   492  010C                     	;# 
   493  010E                     	;# 
   494  0111                     	;# 
   495  0112                     	;# 
   496  0113                     	;# 
   497  0114                     	;# 
   498  0115                     	;# 
   499  0116                     	;# 
   500  0117                     	;# 
   501  0118                     	;# 
   502  0119                     	;# 
   503  018C                     	;# 
   504  018E                     	;# 
   505  0199                     	;# 
   506  0199                     	;# 
   507  0199                     	;# 
   508  019A                     	;# 
   509  019A                     	;# 
   510  019A                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019B                     	;# 
   514  019B                     	;# 
   515  019B                     	;# 
   516  019C                     	;# 
   517  019C                     	;# 
   518  019C                     	;# 
   519  019D                     	;# 
   520  019D                     	;# 
   521  019D                     	;# 
   522  019E                     	;# 
   523  019E                     	;# 
   524  019E                     	;# 
   525  019F                     	;# 
   526  019F                     	;# 
   527  019F                     	;# 
   528  019F                     	;# 
   529  019F                     	;# 
   530  020C                     	;# 
   531  020E                     	;# 
   532  0211                     	;# 
   533  0211                     	;# 
   534  0212                     	;# 
   535  0212                     	;# 
   536  0213                     	;# 
   537  0213                     	;# 
   538  0214                     	;# 
   539  0214                     	;# 
   540  0215                     	;# 
   541  0215                     	;# 
   542  0215                     	;# 
   543  0215                     	;# 
   544  0216                     	;# 
   545  0216                     	;# 
   546  0217                     	;# 
   547  0217                     	;# 
   548  0219                     	;# 
   549  021A                     	;# 
   550  021B                     	;# 
   551  021C                     	;# 
   552  021D                     	;# 
   553  021D                     	;# 
   554  021E                     	;# 
   555  021F                     	;# 
   556  028C                     	;# 
   557  028E                     	;# 
   558  0291                     	;# 
   559  0291                     	;# 
   560  0292                     	;# 
   561  0293                     	;# 
   562  0294                     	;# 
   563  0295                     	;# 
   564  0295                     	;# 
   565  0296                     	;# 
   566  0297                     	;# 
   567  0298                     	;# 
   568  029F                     	;# 
   569  030C                     	;# 
   570  030E                     	;# 
   571  0311                     	;# 
   572  0311                     	;# 
   573  0312                     	;# 
   574  0313                     	;# 
   575  0314                     	;# 
   576  0315                     	;# 
   577  0315                     	;# 
   578  0316                     	;# 
   579  0317                     	;# 
   580  0318                     	;# 
   581  038C                     	;# 
   582  038E                     	;# 
   583  0391                     	;# 
   584  0392                     	;# 
   585  0393                     	;# 
   586  0397                     	;# 
   587  0398                     	;# 
   588  0399                     	;# 
   589  039A                     	;# 
   590  039C                     	;# 
   591  039D                     	;# 
   592  039E                     	;# 
   593  039F                     	;# 
   594  0411                     	;# 
   595  0411                     	;# 
   596  0412                     	;# 
   597  0413                     	;# 
   598  0414                     	;# 
   599  0415                     	;# 
   600  0416                     	;# 
   601  0417                     	;# 
   602  0418                     	;# 
   603  0418                     	;# 
   604  0419                     	;# 
   605  041A                     	;# 
   606  041B                     	;# 
   607  041C                     	;# 
   608  041D                     	;# 
   609  041E                     	;# 
   610  041F                     	;# 
   611  0498                     	;# 
   612  0498                     	;# 
   613  0499                     	;# 
   614  049A                     	;# 
   615  049B                     	;# 
   616  049B                     	;# 
   617  049C                     	;# 
   618  049D                     	;# 
   619  049E                     	;# 
   620  049F                     	;# 
   621  0617                     	;# 
   622  0618                     	;# 
   623  0619                     	;# 
   624  0619                     	;# 
   625  061A                     	;# 
   626  061B                     	;# 
   627  061C                     	;# 
   628  061C                     	;# 
   629  061F                     	;# 
   630  0691                     	;# 
   631  0692                     	;# 
   632  0693                     	;# 
   633  0694                     	;# 
   634  0695                     	;# 
   635  0696                     	;# 
   636  0697                     	;# 
   637  0698                     	;# 
   638  0699                     	;# 
   639  0711                     	;# 
   640  0712                     	;# 
   641  0713                     	;# 
   642  0714                     	;# 
   643  0715                     	;# 
   644  0716                     	;# 
   645  0717                     	;# 
   646  0718                     	;# 
   647  0719                     	;# 
   648  0891                     	;# 
   649  0891                     	;# 
   650  0891                     	;# 
   651  0891                     	;# 
   652  0891                     	;# 
   653  0891                     	;# 
   654  0892                     	;# 
   655  0892                     	;# 
   656  0892                     	;# 
   657  0893                     	;# 
   658  0893                     	;# 
   659  0893                     	;# 
   660  0893                     	;# 
   661  0893                     	;# 
   662  0893                     	;# 
   663  0894                     	;# 
   664  0894                     	;# 
   665  0894                     	;# 
   666  0895                     	;# 
   667  0895                     	;# 
   668  0895                     	;# 
   669  0896                     	;# 
   670  0896                     	;# 
   671  0896                     	;# 
   672  089B                     	;# 
   673  0911                     	;# 
   674  0912                     	;# 
   675  0913                     	;# 
   676  0914                     	;# 
   677  0915                     	;# 
   678  0916                     	;# 
   679  0918                     	;# 
   680  0919                     	;# 
   681  091A                     	;# 
   682  091B                     	;# 
   683  091C                     	;# 
   684  091D                     	;# 
   685  091E                     	;# 
   686  091F                     	;# 
   687  0E0F                     	;# 
   688  0E10                     	;# 
   689  0E11                     	;# 
   690  0E12                     	;# 
   691  0E13                     	;# 
   692  0E14                     	;# 
   693  0E15                     	;# 
   694  0E16                     	;# 
   695  0E17                     	;# 
   696  0E18                     	;# 
   697  0E19                     	;# 
   698  0E1A                     	;# 
   699  0E1B                     	;# 
   700  0E1C                     	;# 
   701  0E1D                     	;# 
   702  0E1E                     	;# 
   703  0E1F                     	;# 
   704  0E20                     	;# 
   705  0E21                     	;# 
   706  0E22                     	;# 
   707  0E24                     	;# 
   708  0E25                     	;# 
   709  0E28                     	;# 
   710  0E29                     	;# 
   711  0E2A                     	;# 
   712  0E2B                     	;# 
   713  0E2C                     	;# 
   714  0E2D                     	;# 
   715  0E2E                     	;# 
   716  0E2F                     	;# 
   717  0E90                     	;# 
   718  0E91                     	;# 
   719  0E92                     	;# 
   720  0E94                     	;# 
   721  0E95                     	;# 
   722  0EA0                     	;# 
   723  0EA1                     	;# 
   724  0EA2                     	;# 
   725  0EA3                     	;# 
   726  0EA4                     	;# 
   727  0EA5                     	;# 
   728  0F0F                     	;# 
   729  0F10                     	;# 
   730  0F11                     	;# 
   731  0F12                     	;# 
   732  0F13                     	;# 
   733  0F14                     	;# 
   734  0F15                     	;# 
   735  0F16                     	;# 
   736  0F17                     	;# 
   737  0F18                     	;# 
   738  0F19                     	;# 
   739  0F1A                     	;# 
   740  0F1B                     	;# 
   741  0F1C                     	;# 
   742  0F1D                     	;# 
   743  0F1E                     	;# 
   744  0F1F                     	;# 
   745  0F20                     	;# 
   746  0F21                     	;# 
   747  0F22                     	;# 
   748  0F23                     	;# 
   749  0F24                     	;# 
   750  0F25                     	;# 
   751  0F26                     	;# 
   752  0F27                     	;# 
   753  0F28                     	;# 
   754  0F29                     	;# 
   755  0F2A                     	;# 
   756  0F2B                     	;# 
   757  0F2C                     	;# 
   758  0F2D                     	;# 
   759  0F2E                     	;# 
   760  0F2F                     	;# 
   761  0F30                     	;# 
   762  0F31                     	;# 
   763  0F32                     	;# 
   764  0F33                     	;# 
   765  0F34                     	;# 
   766  0F35                     	;# 
   767  0F36                     	;# 
   768  0F37                     	;# 
   769  0FE4                     	;# 
   770  0FE5                     	;# 
   771  0FE6                     	;# 
   772  0FE7                     	;# 
   773  0FE8                     	;# 
   774  0FE9                     	;# 
   775  0FEA                     	;# 
   776  0FEB                     	;# 
   777  0FED                     	;# 
   778  0FEE                     	;# 
   779  0FEF                     	;# 
   780  0000                     	;# 
   781  0001                     	;# 
   782  0002                     	;# 
   783  0003                     	;# 
   784  0004                     	;# 
   785  0005                     	;# 
   786  0006                     	;# 
   787  0007                     	;# 
   788  0008                     	;# 
   789  0009                     	;# 
   790  000A                     	;# 
   791  000B                     	;# 
   792  000C                     	;# 
   793  000E                     	;# 
   794  0010                     	;# 
   795  0011                     	;# 
   796  0012                     	;# 
   797  0013                     	;# 
   798  0014                     	;# 
   799  0015                     	;# 
   800  0015                     	;# 
   801  0016                     	;# 
   802  0016                     	;# 
   803  0017                     	;# 
   804  0018                     	;# 
   805  0019                     	;# 
   806  0019                     	;# 
   807  001A                     	;# 
   808  001B                     	;# 
   809  001C                     	;# 
   810  001D                     	;# 
   811  001E                     	;# 
   812  001F                     	;# 
   813  008C                     	;# 
   814  008E                     	;# 
   815  0090                     	;# 
   816  0091                     	;# 
   817  0092                     	;# 
   818  0093                     	;# 
   819  0094                     	;# 
   820  0097                     	;# 
   821  009B                     	;# 
   822  009B                     	;# 
   823  009C                     	;# 
   824  009D                     	;# 
   825  009E                     	;# 
   826  009F                     	;# 
   827  010C                     	;# 
   828  010E                     	;# 
   829  0111                     	;# 
   830  0112                     	;# 
   831  0113                     	;# 
   832  0114                     	;# 
   833  0115                     	;# 
   834  0116                     	;# 
   835  0117                     	;# 
   836  0118                     	;# 
   837  0119                     	;# 
   838  018C                     	;# 
   839  018E                     	;# 
   840  0199                     	;# 
   841  0199                     	;# 
   842  0199                     	;# 
   843  019A                     	;# 
   844  019A                     	;# 
   845  019A                     	;# 
   846  019B                     	;# 
   847  019B                     	;# 
   848  019B                     	;# 
   849  019B                     	;# 
   850  019B                     	;# 
   851  019C                     	;# 
   852  019C                     	;# 
   853  019C                     	;# 
   854  019D                     	;# 
   855  019D                     	;# 
   856  019D                     	;# 
   857  019E                     	;# 
   858  019E                     	;# 
   859  019E                     	;# 
   860  019F                     	;# 
   861  019F                     	;# 
   862  019F                     	;# 
   863  019F                     	;# 
   864  019F                     	;# 
   865  020C                     	;# 
   866  020E                     	;# 
   867  0211                     	;# 
   868  0211                     	;# 
   869  0212                     	;# 
   870  0212                     	;# 
   871  0213                     	;# 
   872  0213                     	;# 
   873  0214                     	;# 
   874  0214                     	;# 
   875  0215                     	;# 
   876  0215                     	;# 
   877  0215                     	;# 
   878  0215                     	;# 
   879  0216                     	;# 
   880  0216                     	;# 
   881  0217                     	;# 
   882  0217                     	;# 
   883  0219                     	;# 
   884  021A                     	;# 
   885  021B                     	;# 
   886  021C                     	;# 
   887  021D                     	;# 
   888  021D                     	;# 
   889  021E                     	;# 
   890  021F                     	;# 
   891  028C                     	;# 
   892  028E                     	;# 
   893  0291                     	;# 
   894  0291                     	;# 
   895  0292                     	;# 
   896  0293                     	;# 
   897  0294                     	;# 
   898  0295                     	;# 
   899  0295                     	;# 
   900  0296                     	;# 
   901  0297                     	;# 
   902  0298                     	;# 
   903  029F                     	;# 
   904  030C                     	;# 
   905  030E                     	;# 
   906  0311                     	;# 
   907  0311                     	;# 
   908  0312                     	;# 
   909  0313                     	;# 
   910  0314                     	;# 
   911  0315                     	;# 
   912  0315                     	;# 
   913  0316                     	;# 
   914  0317                     	;# 
   915  0318                     	;# 
   916  038C                     	;# 
   917  038E                     	;# 
   918  0391                     	;# 
   919  0392                     	;# 
   920  0393                     	;# 
   921  0397                     	;# 
   922  0398                     	;# 
   923  0399                     	;# 
   924  039A                     	;# 
   925  039C                     	;# 
   926  039D                     	;# 
   927  039E                     	;# 
   928  039F                     	;# 
   929  0411                     	;# 
   930  0411                     	;# 
   931  0412                     	;# 
   932  0413                     	;# 
   933  0414                     	;# 
   934  0415                     	;# 
   935  0416                     	;# 
   936  0417                     	;# 
   937  0418                     	;# 
   938  0418                     	;# 
   939  0419                     	;# 
   940  041A                     	;# 
   941  041B                     	;# 
   942  041C                     	;# 
   943  041D                     	;# 
   944  041E                     	;# 
   945  041F                     	;# 
   946  0498                     	;# 
   947  0498                     	;# 
   948  0499                     	;# 
   949  049A                     	;# 
   950  049B                     	;# 
   951  049B                     	;# 
   952  049C                     	;# 
   953  049D                     	;# 
   954  049E                     	;# 
   955  049F                     	;# 
   956  0617                     	;# 
   957  0618                     	;# 
   958  0619                     	;# 
   959  0619                     	;# 
   960  061A                     	;# 
   961  061B                     	;# 
   962  061C                     	;# 
   963  061C                     	;# 
   964  061F                     	;# 
   965  0691                     	;# 
   966  0692                     	;# 
   967  0693                     	;# 
   968  0694                     	;# 
   969  0695                     	;# 
   970  0696                     	;# 
   971  0697                     	;# 
   972  0698                     	;# 
   973  0699                     	;# 
   974  0711                     	;# 
   975  0712                     	;# 
   976  0713                     	;# 
   977  0714                     	;# 
   978  0715                     	;# 
   979  0716                     	;# 
   980  0717                     	;# 
   981  0718                     	;# 
   982  0719                     	;# 
   983  0891                     	;# 
   984  0891                     	;# 
   985  0891                     	;# 
   986  0891                     	;# 
   987  0891                     	;# 
   988  0891                     	;# 
   989  0892                     	;# 
   990  0892                     	;# 
   991  0892                     	;# 
   992  0893                     	;# 
   993  0893                     	;# 
   994  0893                     	;# 
   995  0893                     	;# 
   996  0893                     	;# 
   997  0893                     	;# 
   998  0894                     	;# 
   999  0894                     	;# 
  1000  0894                     	;# 
  1001  0895                     	;# 
  1002  0895                     	;# 
  1003  0895                     	;# 
  1004  0896                     	;# 
  1005  0896                     	;# 
  1006  0896                     	;# 
  1007  089B                     	;# 
  1008  0911                     	;# 
  1009  0912                     	;# 
  1010  0913                     	;# 
  1011  0914                     	;# 
  1012  0915                     	;# 
  1013  0916                     	;# 
  1014  0918                     	;# 
  1015  0919                     	;# 
  1016  091A                     	;# 
  1017  091B                     	;# 
  1018  091C                     	;# 
  1019  091D                     	;# 
  1020  091E                     	;# 
  1021  091F                     	;# 
  1022  0E0F                     	;# 
  1023  0E10                     	;# 
  1024  0E11                     	;# 
  1025  0E12                     	;# 
  1026  0E13                     	;# 
  1027  0E14                     	;# 
  1028  0E15                     	;# 
  1029  0E16                     	;# 
  1030  0E17                     	;# 
  1031  0E18                     	;# 
  1032  0E19                     	;# 
  1033  0E1A                     	;# 
  1034  0E1B                     	;# 
  1035  0E1C                     	;# 
  1036  0E1D                     	;# 
  1037  0E1E                     	;# 
  1038  0E1F                     	;# 
  1039  0E20                     	;# 
  1040  0E21                     	;# 
  1041  0E22                     	;# 
  1042  0E24                     	;# 
  1043  0E25                     	;# 
  1044  0E28                     	;# 
  1045  0E29                     	;# 
  1046  0E2A                     	;# 
  1047  0E2B                     	;# 
  1048  0E2C                     	;# 
  1049  0E2D                     	;# 
  1050  0E2E                     	;# 
  1051  0E2F                     	;# 
  1052  0E90                     	;# 
  1053  0E91                     	;# 
  1054  0E92                     	;# 
  1055  0E94                     	;# 
  1056  0E95                     	;# 
  1057  0EA0                     	;# 
  1058  0EA1                     	;# 
  1059  0EA2                     	;# 
  1060  0EA3                     	;# 
  1061  0EA4                     	;# 
  1062  0EA5                     	;# 
  1063  0F0F                     	;# 
  1064  0F10                     	;# 
  1065  0F11                     	;# 
  1066  0F12                     	;# 
  1067  0F13                     	;# 
  1068  0F14                     	;# 
  1069  0F15                     	;# 
  1070  0F16                     	;# 
  1071  0F17                     	;# 
  1072  0F18                     	;# 
  1073  0F19                     	;# 
  1074  0F1A                     	;# 
  1075  0F1B                     	;# 
  1076  0F1C                     	;# 
  1077  0F1D                     	;# 
  1078  0F1E                     	;# 
  1079  0F1F                     	;# 
  1080  0F20                     	;# 
  1081  0F21                     	;# 
  1082  0F22                     	;# 
  1083  0F23                     	;# 
  1084  0F24                     	;# 
  1085  0F25                     	;# 
  1086  0F26                     	;# 
  1087  0F27                     	;# 
  1088  0F28                     	;# 
  1089  0F29                     	;# 
  1090  0F2A                     	;# 
  1091  0F2B                     	;# 
  1092  0F2C                     	;# 
  1093  0F2D                     	;# 
  1094  0F2E                     	;# 
  1095  0F2F                     	;# 
  1096  0F30                     	;# 
  1097  0F31                     	;# 
  1098  0F32                     	;# 
  1099  0F33                     	;# 
  1100  0F34                     	;# 
  1101  0F35                     	;# 
  1102  0F36                     	;# 
  1103  0F37                     	;# 
  1104  0FE4                     	;# 
  1105  0FE5                     	;# 
  1106  0FE6                     	;# 
  1107  0FE7                     	;# 
  1108  0FE8                     	;# 
  1109  0FE9                     	;# 
  1110  0FEA                     	;# 
  1111  0FEB                     	;# 
  1112  0FED                     	;# 
  1113  0FEE                     	;# 
  1114  0FEF                     	;# 
  1115  0000                     	;# 
  1116  0001                     	;# 
  1117  0002                     	;# 
  1118  0003                     	;# 
  1119  0004                     	;# 
  1120  0005                     	;# 
  1121  0006                     	;# 
  1122  0007                     	;# 
  1123  0008                     	;# 
  1124  0009                     	;# 
  1125  000A                     	;# 
  1126  000B                     	;# 
  1127  000C                     	;# 
  1128  000E                     	;# 
  1129  0010                     	;# 
  1130  0011                     	;# 
  1131  0012                     	;# 
  1132  0013                     	;# 
  1133  0014                     	;# 
  1134  0015                     	;# 
  1135  0015                     	;# 
  1136  0016                     	;# 
  1137  0016                     	;# 
  1138  0017                     	;# 
  1139  0018                     	;# 
  1140  0019                     	;# 
  1141  0019                     	;# 
  1142  001A                     	;# 
  1143  001B                     	;# 
  1144  001C                     	;# 
  1145  001D                     	;# 
  1146  001E                     	;# 
  1147  001F                     	;# 
  1148  008C                     	;# 
  1149  008E                     	;# 
  1150  0090                     	;# 
  1151  0091                     	;# 
  1152  0092                     	;# 
  1153  0093                     	;# 
  1154  0094                     	;# 
  1155  0097                     	;# 
  1156  009B                     	;# 
  1157  009B                     	;# 
  1158  009C                     	;# 
  1159  009D                     	;# 
  1160  009E                     	;# 
  1161  009F                     	;# 
  1162  010C                     	;# 
  1163  010E                     	;# 
  1164  0111                     	;# 
  1165  0112                     	;# 
  1166  0113                     	;# 
  1167  0114                     	;# 
  1168  0115                     	;# 
  1169  0116                     	;# 
  1170  0117                     	;# 
  1171  0118                     	;# 
  1172  0119                     	;# 
  1173  018C                     	;# 
  1174  018E                     	;# 
  1175  0199                     	;# 
  1176  0199                     	;# 
  1177  0199                     	;# 
  1178  019A                     	;# 
  1179  019A                     	;# 
  1180  019A                     	;# 
  1181  019B                     	;# 
  1182  019B                     	;# 
  1183  019B                     	;# 
  1184  019B                     	;# 
  1185  019B                     	;# 
  1186  019C                     	;# 
  1187  019C                     	;# 
  1188  019C                     	;# 
  1189  019D                     	;# 
  1190  019D                     	;# 
  1191  019D                     	;# 
  1192  019E                     	;# 
  1193  019E                     	;# 
  1194  019E                     	;# 
  1195  019F                     	;# 
  1196  019F                     	;# 
  1197  019F                     	;# 
  1198  019F                     	;# 
  1199  019F                     	;# 
  1200  020C                     	;# 
  1201  020E                     	;# 
  1202  0211                     	;# 
  1203  0211                     	;# 
  1204  0212                     	;# 
  1205  0212                     	;# 
  1206  0213                     	;# 
  1207  0213                     	;# 
  1208  0214                     	;# 
  1209  0214                     	;# 
  1210  0215                     	;# 
  1211  0215                     	;# 
  1212  0215                     	;# 
  1213  0215                     	;# 
  1214  0216                     	;# 
  1215  0216                     	;# 
  1216  0217                     	;# 
  1217  0217                     	;# 
  1218  0219                     	;# 
  1219  021A                     	;# 
  1220  021B                     	;# 
  1221  021C                     	;# 
  1222  021D                     	;# 
  1223  021D                     	;# 
  1224  021E                     	;# 
  1225  021F                     	;# 
  1226  028C                     	;# 
  1227  028E                     	;# 
  1228  0291                     	;# 
  1229  0291                     	;# 
  1230  0292                     	;# 
  1231  0293                     	;# 
  1232  0294                     	;# 
  1233  0295                     	;# 
  1234  0295                     	;# 
  1235  0296                     	;# 
  1236  0297                     	;# 
  1237  0298                     	;# 
  1238  029F                     	;# 
  1239  030C                     	;# 
  1240  030E                     	;# 
  1241  0311                     	;# 
  1242  0311                     	;# 
  1243  0312                     	;# 
  1244  0313                     	;# 
  1245  0314                     	;# 
  1246  0315                     	;# 
  1247  0315                     	;# 
  1248  0316                     	;# 
  1249  0317                     	;# 
  1250  0318                     	;# 
  1251  038C                     	;# 
  1252  038E                     	;# 
  1253  0391                     	;# 
  1254  0392                     	;# 
  1255  0393                     	;# 
  1256  0397                     	;# 
  1257  0398                     	;# 
  1258  0399                     	;# 
  1259  039A                     	;# 
  1260  039C                     	;# 
  1261  039D                     	;# 
  1262  039E                     	;# 
  1263  039F                     	;# 
  1264  0411                     	;# 
  1265  0411                     	;# 
  1266  0412                     	;# 
  1267  0413                     	;# 
  1268  0414                     	;# 
  1269  0415                     	;# 
  1270  0416                     	;# 
  1271  0417                     	;# 
  1272  0418                     	;# 
  1273  0418                     	;# 
  1274  0419                     	;# 
  1275  041A                     	;# 
  1276  041B                     	;# 
  1277  041C                     	;# 
  1278  041D                     	;# 
  1279  041E                     	;# 
  1280  041F                     	;# 
  1281  0498                     	;# 
  1282  0498                     	;# 
  1283  0499                     	;# 
  1284  049A                     	;# 
  1285  049B                     	;# 
  1286  049B                     	;# 
  1287  049C                     	;# 
  1288  049D                     	;# 
  1289  049E                     	;# 
  1290  049F                     	;# 
  1291  0617                     	;# 
  1292  0618                     	;# 
  1293  0619                     	;# 
  1294  0619                     	;# 
  1295  061A                     	;# 
  1296  061B                     	;# 
  1297  061C                     	;# 
  1298  061C                     	;# 
  1299  061F                     	;# 
  1300  0691                     	;# 
  1301  0692                     	;# 
  1302  0693                     	;# 
  1303  0694                     	;# 
  1304  0695                     	;# 
  1305  0696                     	;# 
  1306  0697                     	;# 
  1307  0698                     	;# 
  1308  0699                     	;# 
  1309  0711                     	;# 
  1310  0712                     	;# 
  1311  0713                     	;# 
  1312  0714                     	;# 
  1313  0715                     	;# 
  1314  0716                     	;# 
  1315  0717                     	;# 
  1316  0718                     	;# 
  1317  0719                     	;# 
  1318  0891                     	;# 
  1319  0891                     	;# 
  1320  0891                     	;# 
  1321  0891                     	;# 
  1322  0891                     	;# 
  1323  0891                     	;# 
  1324  0892                     	;# 
  1325  0892                     	;# 
  1326  0892                     	;# 
  1327  0893                     	;# 
  1328  0893                     	;# 
  1329  0893                     	;# 
  1330  0893                     	;# 
  1331  0893                     	;# 
  1332  0893                     	;# 
  1333  0894                     	;# 
  1334  0894                     	;# 
  1335  0894                     	;# 
  1336  0895                     	;# 
  1337  0895                     	;# 
  1338  0895                     	;# 
  1339  0896                     	;# 
  1340  0896                     	;# 
  1341  0896                     	;# 
  1342  089B                     	;# 
  1343  0911                     	;# 
  1344  0912                     	;# 
  1345  0913                     	;# 
  1346  0914                     	;# 
  1347  0915                     	;# 
  1348  0916                     	;# 
  1349  0918                     	;# 
  1350  0919                     	;# 
  1351  091A                     	;# 
  1352  091B                     	;# 
  1353  091C                     	;# 
  1354  091D                     	;# 
  1355  091E                     	;# 
  1356  091F                     	;# 
  1357  0E0F                     	;# 
  1358  0E10                     	;# 
  1359  0E11                     	;# 
  1360  0E12                     	;# 
  1361  0E13                     	;# 
  1362  0E14                     	;# 
  1363  0E15                     	;# 
  1364  0E16                     	;# 
  1365  0E17                     	;# 
  1366  0E18                     	;# 
  1367  0E19                     	;# 
  1368  0E1A                     	;# 
  1369  0E1B                     	;# 
  1370  0E1C                     	;# 
  1371  0E1D                     	;# 
  1372  0E1E                     	;# 
  1373  0E1F                     	;# 
  1374  0E20                     	;# 
  1375  0E21                     	;# 
  1376  0E22                     	;# 
  1377  0E24                     	;# 
  1378  0E25                     	;# 
  1379  0E28                     	;# 
  1380  0E29                     	;# 
  1381  0E2A                     	;# 
  1382  0E2B                     	;# 
  1383  0E2C                     	;# 
  1384  0E2D                     	;# 
  1385  0E2E                     	;# 
  1386  0E2F                     	;# 
  1387  0E90                     	;# 
  1388  0E91                     	;# 
  1389  0E92                     	;# 
  1390  0E94                     	;# 
  1391  0E95                     	;# 
  1392  0EA0                     	;# 
  1393  0EA1                     	;# 
  1394  0EA2                     	;# 
  1395  0EA3                     	;# 
  1396  0EA4                     	;# 
  1397  0EA5                     	;# 
  1398  0F0F                     	;# 
  1399  0F10                     	;# 
  1400  0F11                     	;# 
  1401  0F12                     	;# 
  1402  0F13                     	;# 
  1403  0F14                     	;# 
  1404  0F15                     	;# 
  1405  0F16                     	;# 
  1406  0F17                     	;# 
  1407  0F18                     	;# 
  1408  0F19                     	;# 
  1409  0F1A                     	;# 
  1410  0F1B                     	;# 
  1411  0F1C                     	;# 
  1412  0F1D                     	;# 
  1413  0F1E                     	;# 
  1414  0F1F                     	;# 
  1415  0F20                     	;# 
  1416  0F21                     	;# 
  1417  0F22                     	;# 
  1418  0F23                     	;# 
  1419  0F24                     	;# 
  1420  0F25                     	;# 
  1421  0F26                     	;# 
  1422  0F27                     	;# 
  1423  0F28                     	;# 
  1424  0F29                     	;# 
  1425  0F2A                     	;# 
  1426  0F2B                     	;# 
  1427  0F2C                     	;# 
  1428  0F2D                     	;# 
  1429  0F2E                     	;# 
  1430  0F2F                     	;# 
  1431  0F30                     	;# 
  1432  0F31                     	;# 
  1433  0F32                     	;# 
  1434  0F33                     	;# 
  1435  0F34                     	;# 
  1436  0F35                     	;# 
  1437  0F36                     	;# 
  1438  0F37                     	;# 
  1439  0FE4                     	;# 
  1440  0FE5                     	;# 
  1441  0FE6                     	;# 
  1442  0FE7                     	;# 
  1443  0FE8                     	;# 
  1444  0FE9                     	;# 
  1445  0FEA                     	;# 
  1446  0FEB                     	;# 
  1447  0FED                     	;# 
  1448  0FEE                     	;# 
  1449  0FEF                     	;# 
  1450  0000                     	;# 
  1451  0001                     	;# 
  1452  0002                     	;# 
  1453  0003                     	;# 
  1454  0004                     	;# 
  1455  0005                     	;# 
  1456  0006                     	;# 
  1457  0007                     	;# 
  1458  0008                     	;# 
  1459  0009                     	;# 
  1460  000A                     	;# 
  1461  000B                     	;# 
  1462  000C                     	;# 
  1463  000E                     	;# 
  1464  0010                     	;# 
  1465  0011                     	;# 
  1466  0012                     	;# 
  1467  0013                     	;# 
  1468  0014                     	;# 
  1469  0015                     	;# 
  1470  0015                     	;# 
  1471  0016                     	;# 
  1472  0016                     	;# 
  1473  0017                     	;# 
  1474  0018                     	;# 
  1475  0019                     	;# 
  1476  0019                     	;# 
  1477  001A                     	;# 
  1478  001B                     	;# 
  1479  001C                     	;# 
  1480  001D                     	;# 
  1481  001E                     	;# 
  1482  001F                     	;# 
  1483  008C                     	;# 
  1484  008E                     	;# 
  1485  0090                     	;# 
  1486  0091                     	;# 
  1487  0092                     	;# 
  1488  0093                     	;# 
  1489  0094                     	;# 
  1490  0097                     	;# 
  1491  009B                     	;# 
  1492  009B                     	;# 
  1493  009C                     	;# 
  1494  009D                     	;# 
  1495  009E                     	;# 
  1496  009F                     	;# 
  1497  010C                     	;# 
  1498  010E                     	;# 
  1499  0111                     	;# 
  1500  0112                     	;# 
  1501  0113                     	;# 
  1502  0114                     	;# 
  1503  0115                     	;# 
  1504  0116                     	;# 
  1505  0117                     	;# 
  1506  0118                     	;# 
  1507  0119                     	;# 
  1508  018C                     	;# 
  1509  018E                     	;# 
  1510  0199                     	;# 
  1511  0199                     	;# 
  1512  0199                     	;# 
  1513  019A                     	;# 
  1514  019A                     	;# 
  1515  019A                     	;# 
  1516  019B                     	;# 
  1517  019B                     	;# 
  1518  019B                     	;# 
  1519  019B                     	;# 
  1520  019B                     	;# 
  1521  019C                     	;# 
  1522  019C                     	;# 
  1523  019C                     	;# 
  1524  019D                     	;# 
  1525  019D                     	;# 
  1526  019D                     	;# 
  1527  019E                     	;# 
  1528  019E                     	;# 
  1529  019E                     	;# 
  1530  019F                     	;# 
  1531  019F                     	;# 
  1532  019F                     	;# 
  1533  019F                     	;# 
  1534  019F                     	;# 
  1535  020C                     	;# 
  1536  020E                     	;# 
  1537  0211                     	;# 
  1538  0211                     	;# 
  1539  0212                     	;# 
  1540  0212                     	;# 
  1541  0213                     	;# 
  1542  0213                     	;# 
  1543  0214                     	;# 
  1544  0214                     	;# 
  1545  0215                     	;# 
  1546  0215                     	;# 
  1547  0215                     	;# 
  1548  0215                     	;# 
  1549  0216                     	;# 
  1550  0216                     	;# 
  1551  0217                     	;# 
  1552  0217                     	;# 
  1553  0219                     	;# 
  1554  021A                     	;# 
  1555  021B                     	;# 
  1556  021C                     	;# 
  1557  021D                     	;# 
  1558  021D                     	;# 
  1559  021E                     	;# 
  1560  021F                     	;# 
  1561  028C                     	;# 
  1562  028E                     	;# 
  1563  0291                     	;# 
  1564  0291                     	;# 
  1565  0292                     	;# 
  1566  0293                     	;# 
  1567  0294                     	;# 
  1568  0295                     	;# 
  1569  0295                     	;# 
  1570  0296                     	;# 
  1571  0297                     	;# 
  1572  0298                     	;# 
  1573  029F                     	;# 
  1574  030C                     	;# 
  1575  030E                     	;# 
  1576  0311                     	;# 
  1577  0311                     	;# 
  1578  0312                     	;# 
  1579  0313                     	;# 
  1580  0314                     	;# 
  1581  0315                     	;# 
  1582  0315                     	;# 
  1583  0316                     	;# 
  1584  0317                     	;# 
  1585  0318                     	;# 
  1586  038C                     	;# 
  1587  038E                     	;# 
  1588  0391                     	;# 
  1589  0392                     	;# 
  1590  0393                     	;# 
  1591  0397                     	;# 
  1592  0398                     	;# 
  1593  0399                     	;# 
  1594  039A                     	;# 
  1595  039C                     	;# 
  1596  039D                     	;# 
  1597  039E                     	;# 
  1598  039F                     	;# 
  1599  0411                     	;# 
  1600  0411                     	;# 
  1601  0412                     	;# 
  1602  0413                     	;# 
  1603  0414                     	;# 
  1604  0415                     	;# 
  1605  0416                     	;# 
  1606  0417                     	;# 
  1607  0418                     	;# 
  1608  0418                     	;# 
  1609  0419                     	;# 
  1610  041A                     	;# 
  1611  041B                     	;# 
  1612  041C                     	;# 
  1613  041D                     	;# 
  1614  041E                     	;# 
  1615  041F                     	;# 
  1616  0498                     	;# 
  1617  0498                     	;# 
  1618  0499                     	;# 
  1619  049A                     	;# 
  1620  049B                     	;# 
  1621  049B                     	;# 
  1622  049C                     	;# 
  1623  049D                     	;# 
  1624  049E                     	;# 
  1625  049F                     	;# 
  1626  0617                     	;# 
  1627  0618                     	;# 
  1628  0619                     	;# 
  1629  0619                     	;# 
  1630  061A                     	;# 
  1631  061B                     	;# 
  1632  061C                     	;# 
  1633  061C                     	;# 
  1634  061F                     	;# 
  1635  0691                     	;# 
  1636  0692                     	;# 
  1637  0693                     	;# 
  1638  0694                     	;# 
  1639  0695                     	;# 
  1640  0696                     	;# 
  1641  0697                     	;# 
  1642  0698                     	;# 
  1643  0699                     	;# 
  1644  0711                     	;# 
  1645  0712                     	;# 
  1646  0713                     	;# 
  1647  0714                     	;# 
  1648  0715                     	;# 
  1649  0716                     	;# 
  1650  0717                     	;# 
  1651  0718                     	;# 
  1652  0719                     	;# 
  1653  0891                     	;# 
  1654  0891                     	;# 
  1655  0891                     	;# 
  1656  0891                     	;# 
  1657  0891                     	;# 
  1658  0891                     	;# 
  1659  0892                     	;# 
  1660  0892                     	;# 
  1661  0892                     	;# 
  1662  0893                     	;# 
  1663  0893                     	;# 
  1664  0893                     	;# 
  1665  0893                     	;# 
  1666  0893                     	;# 
  1667  0893                     	;# 
  1668  0894                     	;# 
  1669  0894                     	;# 
  1670  0894                     	;# 
  1671  0895                     	;# 
  1672  0895                     	;# 
  1673  0895                     	;# 
  1674  0896                     	;# 
  1675  0896                     	;# 
  1676  0896                     	;# 
  1677  089B                     	;# 
  1678  0911                     	;# 
  1679  0912                     	;# 
  1680  0913                     	;# 
  1681  0914                     	;# 
  1682  0915                     	;# 
  1683  0916                     	;# 
  1684  0918                     	;# 
  1685  0919                     	;# 
  1686  091A                     	;# 
  1687  091B                     	;# 
  1688  091C                     	;# 
  1689  091D                     	;# 
  1690  091E                     	;# 
  1691  091F                     	;# 
  1692  0E0F                     	;# 
  1693  0E10                     	;# 
  1694  0E11                     	;# 
  1695  0E12                     	;# 
  1696  0E13                     	;# 
  1697  0E14                     	;# 
  1698  0E15                     	;# 
  1699  0E16                     	;# 
  1700  0E17                     	;# 
  1701  0E18                     	;# 
  1702  0E19                     	;# 
  1703  0E1A                     	;# 
  1704  0E1B                     	;# 
  1705  0E1C                     	;# 
  1706  0E1D                     	;# 
  1707  0E1E                     	;# 
  1708  0E1F                     	;# 
  1709  0E20                     	;# 
  1710  0E21                     	;# 
  1711  0E22                     	;# 
  1712  0E24                     	;# 
  1713  0E25                     	;# 
  1714  0E28                     	;# 
  1715  0E29                     	;# 
  1716  0E2A                     	;# 
  1717  0E2B                     	;# 
  1718  0E2C                     	;# 
  1719  0E2D                     	;# 
  1720  0E2E                     	;# 
  1721  0E2F                     	;# 
  1722  0E90                     	;# 
  1723  0E91                     	;# 
  1724  0E92                     	;# 
  1725  0E94                     	;# 
  1726  0E95                     	;# 
  1727  0EA0                     	;# 
  1728  0EA1                     	;# 
  1729  0EA2                     	;# 
  1730  0EA3                     	;# 
  1731  0EA4                     	;# 
  1732  0EA5                     	;# 
  1733  0F0F                     	;# 
  1734  0F10                     	;# 
  1735  0F11                     	;# 
  1736  0F12                     	;# 
  1737  0F13                     	;# 
  1738  0F14                     	;# 
  1739  0F15                     	;# 
  1740  0F16                     	;# 
  1741  0F17                     	;# 
  1742  0F18                     	;# 
  1743  0F19                     	;# 
  1744  0F1A                     	;# 
  1745  0F1B                     	;# 
  1746  0F1C                     	;# 
  1747  0F1D                     	;# 
  1748  0F1E                     	;# 
  1749  0F1F                     	;# 
  1750  0F20                     	;# 
  1751  0F21                     	;# 
  1752  0F22                     	;# 
  1753  0F23                     	;# 
  1754  0F24                     	;# 
  1755  0F25                     	;# 
  1756  0F26                     	;# 
  1757  0F27                     	;# 
  1758  0F28                     	;# 
  1759  0F29                     	;# 
  1760  0F2A                     	;# 
  1761  0F2B                     	;# 
  1762  0F2C                     	;# 
  1763  0F2D                     	;# 
  1764  0F2E                     	;# 
  1765  0F2F                     	;# 
  1766  0F30                     	;# 
  1767  0F31                     	;# 
  1768  0F32                     	;# 
  1769  0F33                     	;# 
  1770  0F34                     	;# 
  1771  0F35                     	;# 
  1772  0F36                     	;# 
  1773  0F37                     	;# 
  1774  0FE4                     	;# 
  1775  0FE5                     	;# 
  1776  0FE6                     	;# 
  1777  0FE7                     	;# 
  1778  0FE8                     	;# 
  1779  0FE9                     	;# 
  1780  0FEA                     	;# 
  1781  0FEB                     	;# 
  1782  0FED                     	;# 
  1783  0FEE                     	;# 
  1784  0FEF                     	;# 
  1785  0000                     	;# 
  1786  0001                     	;# 
  1787  0002                     	;# 
  1788  0003                     	;# 
  1789  0004                     	;# 
  1790  0005                     	;# 
  1791  0006                     	;# 
  1792  0007                     	;# 
  1793  0008                     	;# 
  1794  0009                     	;# 
  1795  000A                     	;# 
  1796  000B                     	;# 
  1797  000C                     	;# 
  1798  000E                     	;# 
  1799  0010                     	;# 
  1800  0011                     	;# 
  1801  0012                     	;# 
  1802  0013                     	;# 
  1803  0014                     	;# 
  1804  0015                     	;# 
  1805  0015                     	;# 
  1806  0016                     	;# 
  1807  0016                     	;# 
  1808  0017                     	;# 
  1809  0018                     	;# 
  1810  0019                     	;# 
  1811  0019                     	;# 
  1812  001A                     	;# 
  1813  001B                     	;# 
  1814  001C                     	;# 
  1815  001D                     	;# 
  1816  001E                     	;# 
  1817  001F                     	;# 
  1818  008C                     	;# 
  1819  008E                     	;# 
  1820  0090                     	;# 
  1821  0091                     	;# 
  1822  0092                     	;# 
  1823  0093                     	;# 
  1824  0094                     	;# 
  1825  0097                     	;# 
  1826  009B                     	;# 
  1827  009B                     	;# 
  1828  009C                     	;# 
  1829  009D                     	;# 
  1830  009E                     	;# 
  1831  009F                     	;# 
  1832  010C                     	;# 
  1833  010E                     	;# 
  1834  0111                     	;# 
  1835  0112                     	;# 
  1836  0113                     	;# 
  1837  0114                     	;# 
  1838  0115                     	;# 
  1839  0116                     	;# 
  1840  0117                     	;# 
  1841  0118                     	;# 
  1842  0119                     	;# 
  1843  018C                     	;# 
  1844  018E                     	;# 
  1845  0199                     	;# 
  1846  0199                     	;# 
  1847  0199                     	;# 
  1848  019A                     	;# 
  1849  019A                     	;# 
  1850  019A                     	;# 
  1851  019B                     	;# 
  1852  019B                     	;# 
  1853  019B                     	;# 
  1854  019B                     	;# 
  1855  019B                     	;# 
  1856  019C                     	;# 
  1857  019C                     	;# 
  1858  019C                     	;# 
  1859  019D                     	;# 
  1860  019D                     	;# 
  1861  019D                     	;# 
  1862  019E                     	;# 
  1863  019E                     	;# 
  1864  019E                     	;# 
  1865  019F                     	;# 
  1866  019F                     	;# 
  1867  019F                     	;# 
  1868  019F                     	;# 
  1869  019F                     	;# 
  1870  020C                     	;# 
  1871  020E                     	;# 
  1872  0211                     	;# 
  1873  0211                     	;# 
  1874  0212                     	;# 
  1875  0212                     	;# 
  1876  0213                     	;# 
  1877  0213                     	;# 
  1878  0214                     	;# 
  1879  0214                     	;# 
  1880  0215                     	;# 
  1881  0215                     	;# 
  1882  0215                     	;# 
  1883  0215                     	;# 
  1884  0216                     	;# 
  1885  0216                     	;# 
  1886  0217                     	;# 
  1887  0217                     	;# 
  1888  0219                     	;# 
  1889  021A                     	;# 
  1890  021B                     	;# 
  1891  021C                     	;# 
  1892  021D                     	;# 
  1893  021D                     	;# 
  1894  021E                     	;# 
  1895  021F                     	;# 
  1896  028C                     	;# 
  1897  028E                     	;# 
  1898  0291                     	;# 
  1899  0291                     	;# 
  1900  0292                     	;# 
  1901  0293                     	;# 
  1902  0294                     	;# 
  1903  0295                     	;# 
  1904  0295                     	;# 
  1905  0296                     	;# 
  1906  0297                     	;# 
  1907  0298                     	;# 
  1908  029F                     	;# 
  1909  030C                     	;# 
  1910  030E                     	;# 
  1911  0311                     	;# 
  1912  0311                     	;# 
  1913  0312                     	;# 
  1914  0313                     	;# 
  1915  0314                     	;# 
  1916  0315                     	;# 
  1917  0315                     	;# 
  1918  0316                     	;# 
  1919  0317                     	;# 
  1920  0318                     	;# 
  1921  038C                     	;# 
  1922  038E                     	;# 
  1923  0391                     	;# 
  1924  0392                     	;# 
  1925  0393                     	;# 
  1926  0397                     	;# 
  1927  0398                     	;# 
  1928  0399                     	;# 
  1929  039A                     	;# 
  1930  039C                     	;# 
  1931  039D                     	;# 
  1932  039E                     	;# 
  1933  039F                     	;# 
  1934  0411                     	;# 
  1935  0411                     	;# 
  1936  0412                     	;# 
  1937  0413                     	;# 
  1938  0414                     	;# 
  1939  0415                     	;# 
  1940  0416                     	;# 
  1941  0417                     	;# 
  1942  0418                     	;# 
  1943  0418                     	;# 
  1944  0419                     	;# 
  1945  041A                     	;# 
  1946  041B                     	;# 
  1947  041C                     	;# 
  1948  041D                     	;# 
  1949  041E                     	;# 
  1950  041F                     	;# 
  1951  0498                     	;# 
  1952  0498                     	;# 
  1953  0499                     	;# 
  1954  049A                     	;# 
  1955  049B                     	;# 
  1956  049B                     	;# 
  1957  049C                     	;# 
  1958  049D                     	;# 
  1959  049E                     	;# 
  1960  049F                     	;# 
  1961  0617                     	;# 
  1962  0618                     	;# 
  1963  0619                     	;# 
  1964  0619                     	;# 
  1965  061A                     	;# 
  1966  061B                     	;# 
  1967  061C                     	;# 
  1968  061C                     	;# 
  1969  061F                     	;# 
  1970  0691                     	;# 
  1971  0692                     	;# 
  1972  0693                     	;# 
  1973  0694                     	;# 
  1974  0695                     	;# 
  1975  0696                     	;# 
  1976  0697                     	;# 
  1977  0698                     	;# 
  1978  0699                     	;# 
  1979  0711                     	;# 
  1980  0712                     	;# 
  1981  0713                     	;# 
  1982  0714                     	;# 
  1983  0715                     	;# 
  1984  0716                     	;# 
  1985  0717                     	;# 
  1986  0718                     	;# 
  1987  0719                     	;# 
  1988  0891                     	;# 
  1989  0891                     	;# 
  1990  0891                     	;# 
  1991  0891                     	;# 
  1992  0891                     	;# 
  1993  0891                     	;# 
  1994  0892                     	;# 
  1995  0892                     	;# 
  1996  0892                     	;# 
  1997  0893                     	;# 
  1998  0893                     	;# 
  1999  0893                     	;# 
  2000  0893                     	;# 
  2001  0893                     	;# 
  2002  0893                     	;# 
  2003  0894                     	;# 
  2004  0894                     	;# 
  2005  0894                     	;# 
  2006  0895                     	;# 
  2007  0895                     	;# 
  2008  0895                     	;# 
  2009  0896                     	;# 
  2010  0896                     	;# 
  2011  0896                     	;# 
  2012  089B                     	;# 
  2013  0911                     	;# 
  2014  0912                     	;# 
  2015  0913                     	;# 
  2016  0914                     	;# 
  2017  0915                     	;# 
  2018  0916                     	;# 
  2019  0918                     	;# 
  2020  0919                     	;# 
  2021  091A                     	;# 
  2022  091B                     	;# 
  2023  091C                     	;# 
  2024  091D                     	;# 
  2025  091E                     	;# 
  2026  091F                     	;# 
  2027  0E0F                     	;# 
  2028  0E10                     	;# 
  2029  0E11                     	;# 
  2030  0E12                     	;# 
  2031  0E13                     	;# 
  2032  0E14                     	;# 
  2033  0E15                     	;# 
  2034  0E16                     	;# 
  2035  0E17                     	;# 
  2036  0E18                     	;# 
  2037  0E19                     	;# 
  2038  0E1A                     	;# 
  2039  0E1B                     	;# 
  2040  0E1C                     	;# 
  2041  0E1D                     	;# 
  2042  0E1E                     	;# 
  2043  0E1F                     	;# 
  2044  0E20                     	;# 
  2045  0E21                     	;# 
  2046  0E22                     	;# 
  2047  0E24                     	;# 
  2048  0E25                     	;# 
  2049  0E28                     	;# 
  2050  0E29                     	;# 
  2051  0E2A                     	;# 
  2052  0E2B                     	;# 
  2053  0E2C                     	;# 
  2054  0E2D                     	;# 
  2055  0E2E                     	;# 
  2056  0E2F                     	;# 
  2057  0E90                     	;# 
  2058  0E91                     	;# 
  2059  0E92                     	;# 
  2060  0E94                     	;# 
  2061  0E95                     	;# 
  2062  0EA0                     	;# 
  2063  0EA1                     	;# 
  2064  0EA2                     	;# 
  2065  0EA3                     	;# 
  2066  0EA4                     	;# 
  2067  0EA5                     	;# 
  2068  0F0F                     	;# 
  2069  0F10                     	;# 
  2070  0F11                     	;# 
  2071  0F12                     	;# 
  2072  0F13                     	;# 
  2073  0F14                     	;# 
  2074  0F15                     	;# 
  2075  0F16                     	;# 
  2076  0F17                     	;# 
  2077  0F18                     	;# 
  2078  0F19                     	;# 
  2079  0F1A                     	;# 
  2080  0F1B                     	;# 
  2081  0F1C                     	;# 
  2082  0F1D                     	;# 
  2083  0F1E                     	;# 
  2084  0F1F                     	;# 
  2085  0F20                     	;# 
  2086  0F21                     	;# 
  2087  0F22                     	;# 
  2088  0F23                     	;# 
  2089  0F24                     	;# 
  2090  0F25                     	;# 
  2091  0F26                     	;# 
  2092  0F27                     	;# 
  2093  0F28                     	;# 
  2094  0F29                     	;# 
  2095  0F2A                     	;# 
  2096  0F2B                     	;# 
  2097  0F2C                     	;# 
  2098  0F2D                     	;# 
  2099  0F2E                     	;# 
  2100  0F2F                     	;# 
  2101  0F30                     	;# 
  2102  0F31                     	;# 
  2103  0F32                     	;# 
  2104  0F33                     	;# 
  2105  0F34                     	;# 
  2106  0F35                     	;# 
  2107  0F36                     	;# 
  2108  0F37                     	;# 
  2109  0FE4                     	;# 
  2110  0FE5                     	;# 
  2111  0FE6                     	;# 
  2112  0FE7                     	;# 
  2113  0FE8                     	;# 
  2114  0FE9                     	;# 
  2115  0FEA                     	;# 
  2116  0FEB                     	;# 
  2117  0FED                     	;# 
  2118  0FEE                     	;# 
  2119  0FEF                     	;# 
  2120  1FE0                     _romArray_absaddr	set	8160
  2121                           
  2122                           	psect	stringtext1
  2123  1000                     __pstringtext1:	
  2124  1000                     _resetRomData:	
  2125  1000  34AA               	retlw	170
  2126  1001  3455               	retlw	85
  2127  1002  346E               	retlw	110
  2128  1003  3463               	retlw	99
  2129  1004  346F               	retlw	111
  2130  1005  346E               	retlw	110
  2131  1006  3466               	retlw	102
  2132  1007  3469               	retlw	105
  2133  1008  3467               	retlw	103
  2134  1009  3475               	retlw	117
  2135  100A  3472               	retlw	114
  2136  100B  3465               	retlw	101
  2137  100C  3464               	retlw	100
  2138  100D  3400               	retlw	0
  2139  100E  3400               	retlw	0
  2140  100F  3400               	retlw	0
  2141  1010  3400               	retlw	0
  2142  1011  3400               	retlw	0
  2143  1012  3400               	retlw	0
  2144  1013                     __end_of_resetRomData:	
  2145                           
  2146                           	psect	stringtext2
  2147  1019                     __pstringtext2:	
  2148  1019                     _n_ADDRESS_P0:	
  2149  1019  34AD               	retlw	173
  2150  101A  3487               	retlw	135
  2151  101B  3466               	retlw	102
  2152  101C  34BC               	retlw	188
  2153  101D  34BB               	retlw	187
  2154  101E                     __end_of_n_ADDRESS_P0:	
  2155                           
  2156                           	psect	stringtext3
  2157  1040                     __pstringtext3:	
  2158  1040                     _n_ADDRESS_MUL:	
  2159  1040  3421               	retlw	33
  2160  1041                     __end_of_n_ADDRESS_MUL:	
  2161  1FE0                     _romArray_absaddr	set	8160
  2162                           
  2163                           	psect	_romArray_text
  2164  1FE0                     __p_romArray_text:	
  2165  1FE0                     _romArray:	
  2166  1FE0  3400               	retlw	0
  2167  1FE1  3400               	retlw	0
  2168  1FE2  3400               	retlw	0
  2169  1FE3  3400               	retlw	0
  2170  1FE4  3400               	retlw	0
  2171  1FE5  3400               	retlw	0
  2172  1FE6  3400               	retlw	0
  2173  1FE7  3400               	retlw	0
  2174  1FE8  3400               	retlw	0
  2175  1FE9  3400               	retlw	0
  2176  1FEA  3400               	retlw	0
  2177  1FEB  3400               	retlw	0
  2178  1FEC  3400               	retlw	0
  2179  1FED  3400               	retlw	0
  2180  1FEE  3400               	retlw	0
  2181  1FEF  3400               	retlw	0
  2182  1FF0  3400               	retlw	0
  2183  1FF1  3400               	retlw	0
  2184  1FF2  3400               	retlw	0
  2185  1FF3  3400               	retlw	0
  2186  1FF4  3400               	retlw	0
  2187  1FF5  3400               	retlw	0
  2188  1FF6  3400               	retlw	0
  2189  1FF7  3400               	retlw	0
  2190  1FF8  3400               	retlw	0
  2191  1FF9  3400               	retlw	0
  2192  1FFA  3400               	retlw	0
  2193  1FFB  3400               	retlw	0
  2194  1FFC  3400               	retlw	0
  2195  1FFD  3400               	retlw	0
  2196  1FFE  3400               	retlw	0
  2197  1FFF  3400               	retlw	0
  2198  2000                     __end_of_romArray:	
  2199  0003                     _STATUSbits	set	3
  2200  0010                     _PIR0bits	set	16
  2201  000E                     _PORTCbits	set	14
  2202  000C                     _PORTAbits	set	12
  2203  000B                     _INTCONbits	set	11
  2204  0097                     _WDTCONbits	set	151
  2205  009E                     _ADCON1bits	set	158
  2206  009C                     _ADRESH	set	156
  2207  009B                     _ADRESL	set	155
  2208  009D                     _ADCON0bits	set	157
  2209  0090                     _PIE0bits	set	144
  2210  008E                     _TRISCbits	set	142
  2211  008C                     _TRISAbits	set	140
  2212  0117                     _FVRCONbits	set	279
  2213  018E                     _ANSELCbits	set	398
  2214  018C                     _ANSELAbits	set	396
  2215  018E                     _ANSELC	set	398
  2216  018C                     _ANSELA	set	396
  2217  020C                     _WPUAbits	set	524
  2218  020E                     _WPUC	set	526
  2219  020C                     _WPUA	set	524
  2220  0211                     _SSP1BUF	set	529
  2221  0214                     _SSP1STATbits	set	532
  2222  0215                     _SSP1CON1bits	set	533
  2223  028E                     _ODCONC	set	654
  2224  028C                     _ODCONA	set	652
  2225  038E                     _INLVLC	set	910
  2226  038C                     _INLVLA	set	908
  2227  0894                     _PMDATH	set	2196
  2228  0893                     _PMDATL	set	2195
  2229  0896                     _PMCON2	set	2198
  2230  0895                     _PMCON1bits	set	2197
  2231  0892                     _PMADRH	set	2194
  2232  0891                     _PMADRL	set	2193
  2233  0895                     _PMCON1	set	2197
  2234  0919                     _OSCCON1bits	set	2329
  2235  0EA0                     _RC0PPSbits	set	3744
  2236  0EA2                     _RC2PPSbits	set	3746
  2237  0EA1                     _RC1PPSbits	set	3745
  2238                           
  2239                           	psect	stringtext4
  2240  1013                     __pstringtext4:	
  2241  1013                     STR_8:	
  2242  1013  3452               	retlw	82	;'R'
  2243  1014  3446               	retlw	70	;'F'
  2244  1015  3450               	retlw	80	;'P'
  2245  1016  3457               	retlw	87	;'W'
  2246  1017  3452               	retlw	82	;'R'
  2247  1018  3400               	retlw	0
  2248                           
  2249                           	psect	stringtext5
  2250  101E                     __pstringtext5:	
  2251  101E                     STR_5:	
  2252  101E  3441               	retlw	65	;'A'
  2253  101F  344E               	retlw	78	;'N'
  2254  1020  3443               	retlw	67	;'C'
  2255  1021  3433               	retlw	51	;'3'
  2256  1022  3400               	retlw	0
  2257                           
  2258                           	psect	stringtext6
  2259  1023                     __pstringtext6:	
  2260  1023                     STR_7:	
  2261  1023  3454               	retlw	84	;'T'
  2262  1024  3445               	retlw	69	;'E'
  2263  1025  344D               	retlw	77	;'M'
  2264  1026  3450               	retlw	80	;'P'
  2265  1027  3400               	retlw	0
  2266                           
  2267                           	psect	stringtext7
  2268  1028                     __pstringtext7:	
  2269  1028                     STR_4:	
  2270  1028  3456               	retlw	86	;'V'
  2271  1029  3442               	retlw	66	;'B'
  2272  102A  3441               	retlw	65	;'A'
  2273  102B  3454               	retlw	84	;'T'
  2274  102C  3400               	retlw	0
  2275                           
  2276                           	psect	stringtext8
  2277  102D                     __pstringtext8:	
  2278  102D                     STR_10:	
  2279  102D  3442               	retlw	66	;'B'
  2280  102E  344F               	retlw	79	;'O'
  2281  102F  344F               	retlw	79	;'O'
  2282  1030  3454               	retlw	84	;'T'
  2283  1031  3400               	retlw	0
  2284                           
  2285                           	psect	stringtext9
  2286  1032                     __pstringtext9:	
  2287  1032                     STR_9:	
  2288  1032  3455               	retlw	85	;'U'
  2289  1033  3457               	retlw	87	;'W'
  2290  1034  3432               	retlw	50	;'2'
  2291  1035  3400               	retlw	0
  2292                           
  2293                           	psect	stringtext10
  2294  1036                     __pstringtext10:	
  2295  1036                     STR_3:	
  2296  1036  3444               	retlw	68	;'D'
  2297  1037  3442               	retlw	66	;'B'
  2298  1038  3447               	retlw	71	;'G'
  2299  1039  3400               	retlw	0
  2300                           
  2301                           	psect	stringtext11
  2302  103A                     __pstringtext11:	
  2303  103A                     STR_6:	
  2304  103A  3446               	retlw	70	;'F'
  2305  103B  3456               	retlw	86	;'V'
  2306  103C  3452               	retlw	82	;'R'
  2307  103D  3400               	retlw	0
  2308                           
  2309                           	psect	stringtext12
  2310  103E                     __pstringtext12:	
  2311  103E                     STR_1:	
  2312  103E  342F               	retlw	47	;'/'
  2313  103F  3400               	retlw	0
  2314                           
  2315                           	psect	stringtext13
  2316  0000                     __pstringtext13:	
  2317  103E                     
  2318                           ; #config settings
  2319  0000                     
  2320                           	psect	cinit
  2321  0011                     start_initialization:	
  2322  0011                     __initialization:	
  2323                           
  2324                           ; Clear objects allocated to BANK0
  2325  0011  3059               	movlw	low __pbssBANK0
  2326  0012  0084               	movwf	4
  2327  0013  3000               	movlw	high __pbssBANK0
  2328  0014  0085               	movwf	5
  2329  0015  3016               	movlw	22
  2330  0016  318E  2643  3180   	fcall	clear_ram0
  2331                           
  2332                           ; Clear objects allocated to BANK1
  2333  0019  0021               	movlb	1	; select bank1
  2334  001A  01E3               	clrf	__pbssBANK1& (0+127)
  2335  001B  01E4               	clrf	(__pbssBANK1+1)& (0+127)
  2336  001C  01E5               	clrf	(__pbssBANK1+2)& (0+127)
  2337  001D  01E6               	clrf	(__pbssBANK1+3)& (0+127)
  2338                           
  2339                           ; Clear objects allocated to BANK2
  2340  001E  3020               	movlw	low __pbssBANK2
  2341  001F  0084               	movwf	4
  2342  0020  3001               	movlw	high __pbssBANK2
  2343  0021  0085               	movwf	5
  2344  0022  3041               	movlw	65
  2345  0023  318E  2643         	fcall	clear_ram0
  2346  0025                     end_of_initialization:	
  2347                           ;End of C runtime variable initialization code
  2348                           
  2349  0025                     __end_of__initialization:	
  2350  0025  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2351  0026  0020               	movlb	0
  2352  0027  3182  2AFB         	ljmp	_main	;jump to C main() function
  2353                           
  2354                           	psect	bssBANK0
  2355  0059                     __pbssBANK0:	
  2356  0059                     _TXPacket:	
  2357  0059                     	ds	1
  2358  005A                     _sleepLoop:	
  2359  005A                     	ds	1
  2360  005B                     _nrf24l01:	
  2361  005B                     	ds	1
  2362  005C                     _romData:	
  2363  005C                     	ds	19
  2364                           
  2365                           	psect	bssBANK1
  2366  00E3                     __pbssBANK1:	
  2367  00E3                     _counter:	
  2368  00E3                     	ds	4
  2369                           
  2370                           	psect	bssBANK2
  2371  0120                     __pbssBANK2:	
  2372  0120                     _romHolder:	
  2373  0120                     	ds	32
  2374  0140                     _RXPacket:	
  2375  0140                     	ds	33
  2376                           
  2377                           	psect	clrtext
  2378  0E43                     clear_ram0:	
  2379                           ;	Called with FSR0 containing the base address, and
  2380                           ;	WREG with the size to clear
  2381                           
  2382  0E43  0064               	clrwdt	;clear the watchdog before getting into this loop
  2383  0E44                     clrloop0:	
  2384  0E44  0180               	clrf	0	;clear RAM location pointed to by FSR
  2385  0E45  3101               	addfsr 0,1
  2386  0E46  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2387  0E47  2E44               	goto	clrloop0	;have we reached the end yet?
  2388  0E48  3400               	retlw	0	;all done for this memory range, return
  2389                           
  2390                           	psect	cstackBANK1
  2391  00A0                     __pcstackBANK1:	
  2392  00A0                     loop@rfSetup:	
  2393                           
  2394                           ; 1 bytes @ 0x0
  2395  00A0                     	ds	1
  2396  00A1                     loop@packet:	
  2397                           
  2398                           ; 33 bytes @ 0x1
  2399  00A1                     	ds	33
  2400  00C2                     main@packet:	
  2401                           
  2402                           ; 33 bytes @ 0x22
  2403  00C2                     	ds	33
  2404                           
  2405                           	psect	cstackCOMMON
  2406  0070                     __pcstackCOMMON:	
  2407  0070                     ?_nrf24l01ISR:	
  2408  0070                     ?_nrf24l01SetRXMode:	
  2409                           ; 1 bytes @ 0x0
  2410                           
  2411  0070                     ?_nrf24l01GetRXPacket:	
  2412                           ; 1 bytes @ 0x0
  2413                           
  2414  0070                     ?_nrf24l01SendPacket:	
  2415                           ; 1 bytes @ 0x0
  2416                           
  2417  0070                     ?_nrf24l01Init:	
  2418                           ; 1 bytes @ 0x0
  2419                           
  2420  0070                     ?_flashRealod:	
  2421                           ; 1 bytes @ 0x0
  2422                           
  2423  0070                     ?_flashUpdate:	
  2424                           ; 1 bytes @ 0x0
  2425                           
  2426  0070                     ?_nrf24l01CELow:	
  2427                           ; 1 bytes @ 0x0
  2428                           
  2429  0070                     ??_nrf24l01CELow:	
  2430                           ; 1 bytes @ 0x0
  2431                           
  2432  0070                     ?_nrf24l01CEHigh:	
  2433                           ; 1 bytes @ 0x0
  2434                           
  2435  0070                     ??_nrf24l01CEHigh:	
  2436                           ; 1 bytes @ 0x0
  2437                           
  2438  0070                     ?_nrf24l01CSLow:	
  2439                           ; 1 bytes @ 0x0
  2440                           
  2441  0070                     ??_nrf24l01CSLow:	
  2442                           ; 1 bytes @ 0x0
  2443                           
  2444  0070                     ?_nrf24l01CSHigh:	
  2445                           ; 1 bytes @ 0x0
  2446                           
  2447  0070                     ??_nrf24l01CSHigh:	
  2448                           ; 1 bytes @ 0x0
  2449                           
  2450  0070                     ?_nrf24l01InterfaceInit:	
  2451                           ; 1 bytes @ 0x0
  2452                           
  2453  0070                     ?_nrf24l01SPISend:	
  2454                           ; 1 bytes @ 0x0
  2455                           
  2456  0070                     ??_nrf24l01SPISend:	
  2457                           ; 1 bytes @ 0x0
  2458                           
  2459  0070                     ?_nrf24l01SPIStart:	
  2460                           ; 1 bytes @ 0x0
  2461                           
  2462  0070                     ??_nrf24l01SPIStart:	
  2463                           ; 1 bytes @ 0x0
  2464                           
  2465  0070                     ?_nrf24l01SPIEnd:	
  2466                           ; 1 bytes @ 0x0
  2467                           
  2468  0070                     ??_nrf24l01SPIEnd:	
  2469                           ; 1 bytes @ 0x0
  2470                           
  2471  0070                     ?_enableInterrupts:	
  2472                           ; 1 bytes @ 0x0
  2473                           
  2474  0070                     ??_enableInterrupts:	
  2475                           ; 1 bytes @ 0x0
  2476                           
  2477  0070                     ?_exception:	
  2478                           ; 1 bytes @ 0x0
  2479                           
  2480  0070                     ?_ISR:	
  2481                           ; 1 bytes @ 0x0
  2482                           
  2483  0070                     ?_sleep:	
  2484                           ; 1 bytes @ 0x0
  2485                           
  2486  0070                     ?_checkTXPower:	
  2487                           ; 1 bytes @ 0x0
  2488                           
  2489  0070                     ?_loop:	
  2490                           ; 1 bytes @ 0x0
  2491                           
  2492  0070                     ?_main:	
  2493                           ; 1 bytes @ 0x0
  2494                           
  2495  0070                     ?_nrf24l01CheckACK:	
  2496                           ; 1 bytes @ 0x0
  2497                           
  2498  0070                     ?_nrf24l01ReceivePacket:	
  2499                           ; 1 bytes @ 0x0
  2500                           
  2501  0070                     ?_nrf24l01GetPipe:	
  2502                           ; 1 bytes @ 0x0
  2503                           
  2504  0070                     ?_nrf24l01SetRXPipe:	
  2505                           ; 1 bytes @ 0x0
  2506                           
  2507  0070                     ?_nrf24l01InitRegisters:	
  2508                           ; 1 bytes @ 0x0
  2509                           
  2510  0070                     ?i1_flashWriteByte:	
  2511                           ; 1 bytes @ 0x0
  2512                           
  2513  0070                     ?i1_flashUpdate:	
  2514                           ; 1 bytes @ 0x0
  2515                           
  2516  0070                     ?i1_nrf24l01SetRXMode:	
  2517                           ; 1 bytes @ 0x0
  2518                           
  2519  0070                     ?i1_memset:	
  2520                           ; 1 bytes @ 0x0
  2521                           
  2522  0070                     ?_strcmp:	
  2523                           ; 1 bytes @ 0x0
  2524                           
  2525  0070                     ?___wmul:	
  2526                           ; 2 bytes @ 0x0
  2527                           
  2528  0070                     nrf24l01SPISend@data:	
  2529                           ; 2 bytes @ 0x0
  2530                           
  2531  0070                     enableInterrupts@enable:	
  2532                           ; 1 bytes @ 0x0
  2533                           
  2534  0070                     strcmp@s2:	
  2535                           ; 1 bytes @ 0x0
  2536                           
  2537  0070                     ___wmul@multiplier:	
  2538                           ; 1 bytes @ 0x0
  2539                           
  2540  0070                     i1flashWriteByte@offset:	
  2541                           ; 2 bytes @ 0x0
  2542                           
  2543  0070                     i1memset@p1:	
  2544                           ; 2 bytes @ 0x0
  2545                           
  2546                           
  2547                           ; 2 bytes @ 0x0
  2548  0070                     	ds	1
  2549  0071                     ?i1_nrf24l01Send:	
  2550  0071                     i1nrf24l01Send@data:	
  2551                           ; 1 bytes @ 0x1
  2552                           
  2553                           
  2554                           ; 1 bytes @ 0x1
  2555  0071                     	ds	1
  2556  0072                     ??_strcmp:	
  2557  0072                     ??i1_nrf24l01Send:	
  2558                           ; 1 bytes @ 0x2
  2559                           
  2560  0072                     ___wmul@multiplicand:	
  2561                           ; 1 bytes @ 0x2
  2562                           
  2563  0072                     i1flashWriteByte@data:	
  2564                           ; 2 bytes @ 0x2
  2565                           
  2566  0072                     i1memset@c:	
  2567                           ; 2 bytes @ 0x2
  2568                           
  2569                           
  2570                           ; 2 bytes @ 0x2
  2571  0072                     	ds	1
  2572  0073                     strcmp@r:	
  2573  0073                     i1nrf24l01Send@command:	
  2574                           ; 1 bytes @ 0x3
  2575                           
  2576                           
  2577                           ; 1 bytes @ 0x3
  2578  0073                     	ds	1
  2579  0074                     ??___wmul:	
  2580  0074                     ??i1_flashWriteByte:	
  2581                           ; 1 bytes @ 0x4
  2582                           
  2583  0074                     ??i1_nrf24l01SetRXMode:	
  2584                           ; 1 bytes @ 0x4
  2585                           
  2586  0074                     strcmp@s1:	
  2587                           ; 1 bytes @ 0x4
  2588                           
  2589  0074                     ___wmul@product:	
  2590                           ; 1 bytes @ 0x4
  2591                           
  2592  0074                     i1flashWriteByte@address:	
  2593                           ; 2 bytes @ 0x4
  2594                           
  2595  0074                     i1memset@n:	
  2596                           ; 2 bytes @ 0x4
  2597                           
  2598                           
  2599                           ; 2 bytes @ 0x4
  2600  0074                     	ds	1
  2601  0075                     i1nrf24l01SetRXMode@config:	
  2602                           
  2603                           ; 1 bytes @ 0x5
  2604  0075                     	ds	1
  2605  0076                     ??i1_flashUpdate:	
  2606  0076                     ??i1_memset:	
  2607                           ; 1 bytes @ 0x6
  2608                           
  2609  0076                     i1nrf24l01SetRXMode@rxMode:	
  2610                           ; 1 bytes @ 0x6
  2611                           
  2612  0076                     i1memset@p:	
  2613                           ; 1 bytes @ 0x6
  2614                           
  2615                           
  2616                           ; 2 bytes @ 0x6
  2617  0076                     	ds	1
  2618  0077                     ??_nrf24l01CheckACK:	
  2619                           
  2620                           ; 1 bytes @ 0x7
  2621  0077                     	ds	1
  2622  0078                     ??_nrf24l01ReceivePacket:	
  2623  0078                     i1flashUpdate@i:	
  2624                           ; 1 bytes @ 0x8
  2625                           
  2626                           
  2627                           ; 2 bytes @ 0x8
  2628  0078                     	ds	1
  2629  0079                     nrf24l01ReceivePacket@width:	
  2630                           
  2631                           ; 1 bytes @ 0x9
  2632  0079                     	ds	1
  2633  007A                     ??_exception:	
  2634  007A                     nrf24l01ReceivePacket@i:	
  2635                           ; 1 bytes @ 0xA
  2636                           
  2637                           
  2638                           ; 1 bytes @ 0xA
  2639  007A                     	ds	2
  2640  007C                     exception@exception:	
  2641                           
  2642                           ; 1 bytes @ 0xC
  2643  007C                     	ds	1
  2644  007D                     ??_nrf24l01ISR:	
  2645                           
  2646                           ; 1 bytes @ 0xD
  2647  007D                     	ds	1
  2648  007E                     ??_ISR:	
  2649                           
  2650                           	psect	cstackBANK0
  2651  0020                     __pcstackBANK0:	
  2652                           ; 1 bytes @ 0xE
  2653                           
  2654  0020                     nrf24l01ISR@status:	
  2655                           
  2656                           ; 1 bytes @ 0x0
  2657  0020                     	ds	1
  2658  0021                     ?_strcat:	
  2659  0021                     ??_nrf24l01GetRXPacket:	
  2660                           ; 1 bytes @ 0x1
  2661                           
  2662  0021                     ?_nrf24l01Send:	
  2663                           ; 1 bytes @ 0x1
  2664                           
  2665  0021                     ?_strcpy:	
  2666                           ; 1 bytes @ 0x1
  2667                           
  2668  0021                     ?_flashWriteByte:	
  2669                           ; 1 bytes @ 0x1
  2670                           
  2671  0021                     ??_nrf24l01InterfaceInit:	
  2672                           ; 1 bytes @ 0x1
  2673                           
  2674  0021                     ??_sleep:	
  2675                           ; 1 bytes @ 0x1
  2676                           
  2677  0021                     ?_memset:	
  2678                           ; 1 bytes @ 0x1
  2679                           
  2680  0021                     ?_strlen:	
  2681                           ; 2 bytes @ 0x1
  2682                           
  2683  0021                     ?_flashReadByte:	
  2684                           ; 2 bytes @ 0x1
  2685                           
  2686  0021                     ?___lmul:	
  2687                           ; 2 bytes @ 0x1
  2688                           
  2689  0021                     ?___lldiv:	
  2690                           ; 4 bytes @ 0x1
  2691                           
  2692  0021                     ?___llmod:	
  2693                           ; 4 bytes @ 0x1
  2694                           
  2695  0021                     nrf24l01Send@data:	
  2696                           ; 4 bytes @ 0x1
  2697                           
  2698  0021                     flashWriteByte@offset:	
  2699                           ; 1 bytes @ 0x1
  2700                           
  2701  0021                     flashReadByte@offset:	
  2702                           ; 2 bytes @ 0x1
  2703                           
  2704  0021                     memset@p1:	
  2705                           ; 2 bytes @ 0x1
  2706                           
  2707  0021                     strcat@from:	
  2708                           ; 2 bytes @ 0x1
  2709                           
  2710  0021                     strcpy@from:	
  2711                           ; 2 bytes @ 0x1
  2712                           
  2713  0021                     ___lmul@multiplier:	
  2714                           ; 2 bytes @ 0x1
  2715                           
  2716  0021                     ___lldiv@divisor:	
  2717                           ; 4 bytes @ 0x1
  2718                           
  2719  0021                     ___llmod@divisor:	
  2720                           ; 4 bytes @ 0x1
  2721                           
  2722                           
  2723                           ; 4 bytes @ 0x1
  2724  0021                     	ds	1
  2725  0022                     ??_nrf24l01Send:	
  2726                           
  2727                           ; 1 bytes @ 0x2
  2728  0022                     	ds	1
  2729  0023                     ??_strcat:	
  2730  0023                     ??_strcpy:	
  2731                           ; 1 bytes @ 0x3
  2732                           
  2733  0023                     ??_strlen:	
  2734                           ; 1 bytes @ 0x3
  2735                           
  2736  0023                     ??_flashReadByte:	
  2737                           ; 1 bytes @ 0x3
  2738                           
  2739  0023                     nrf24l01Send@command:	
  2740                           ; 1 bytes @ 0x3
  2741                           
  2742  0023                     flashWriteByte@data:	
  2743                           ; 1 bytes @ 0x3
  2744                           
  2745  0023                     memset@c:	
  2746                           ; 2 bytes @ 0x3
  2747                           
  2748                           
  2749                           ; 2 bytes @ 0x3
  2750  0023                     	ds	1
  2751  0024                     ??_nrf24l01SetRXMode:	
  2752  0024                     ?_nrf24l01ChangeTXPower:	
  2753                           ; 1 bytes @ 0x4
  2754                           
  2755  0024                     strcat@cp:	
  2756                           ; 1 bytes @ 0x4
  2757                           
  2758  0024                     strcpy@to:	
  2759                           ; 1 bytes @ 0x4
  2760                           
  2761  0024                     nrf24l01ChangeTXPower@addPower:	
  2762                           ; 1 bytes @ 0x4
  2763                           
  2764                           
  2765                           ; 2 bytes @ 0x4
  2766  0024                     	ds	1
  2767  0025                     ??_flashWriteByte:	
  2768  0025                     nrf24l01SetRXMode@config:	
  2769                           ; 1 bytes @ 0x5
  2770                           
  2771  0025                     strcat@to:	
  2772                           ; 1 bytes @ 0x5
  2773                           
  2774  0025                     strcpy@cp:	
  2775                           ; 1 bytes @ 0x5
  2776                           
  2777  0025                     flashWriteByte@address:	
  2778                           ; 1 bytes @ 0x5
  2779                           
  2780  0025                     memset@n:	
  2781                           ; 2 bytes @ 0x5
  2782                           
  2783  0025                     ___lmul@multiplicand:	
  2784                           ; 2 bytes @ 0x5
  2785                           
  2786  0025                     ___lldiv@dividend:	
  2787                           ; 4 bytes @ 0x5
  2788                           
  2789  0025                     ___llmod@dividend:	
  2790                           ; 4 bytes @ 0x5
  2791                           
  2792                           
  2793                           ; 4 bytes @ 0x5
  2794  0025                     	ds	1
  2795  0026                     ??_nrf24l01ChangeTXPower:	
  2796  0026                     nrf24l01SetRXMode@rxMode:	
  2797                           ; 1 bytes @ 0x6
  2798                           
  2799  0026                     flashReadByte@result:	
  2800                           ; 1 bytes @ 0x6
  2801                           
  2802                           
  2803                           ; 2 bytes @ 0x6
  2804  0026                     	ds	1
  2805  0027                     ??_memset:	
  2806  0027                     ??_flashUpdate:	
  2807                           ; 1 bytes @ 0x7
  2808                           
  2809  0027                     nrf24l01ChangeTXPower@rfSetup:	
  2810                           ; 1 bytes @ 0x7
  2811                           
  2812  0027                     strlen@cp:	
  2813                           ; 1 bytes @ 0x7
  2814                           
  2815  0027                     memset@p:	
  2816                           ; 1 bytes @ 0x7
  2817                           
  2818                           
  2819                           ; 2 bytes @ 0x7
  2820  0027                     	ds	1
  2821  0028                     ??_checkTXPower:	
  2822  0028                     strlen@s:	
  2823                           ; 1 bytes @ 0x8
  2824                           
  2825  0028                     flashReadByte@address:	
  2826                           ; 1 bytes @ 0x8
  2827                           
  2828                           
  2829                           ; 2 bytes @ 0x8
  2830  0028                     	ds	1
  2831  0029                     ??_nrf24l01SendPacket:	
  2832  0029                     ??___lmul:	
  2833                           ; 1 bytes @ 0x9
  2834                           
  2835  0029                     ??___lldiv:	
  2836                           ; 1 bytes @ 0x9
  2837                           
  2838  0029                     ??___llmod:	
  2839                           ; 1 bytes @ 0x9
  2840                           
  2841  0029                     checkTXPower@rxPacket:	
  2842                           ; 1 bytes @ 0x9
  2843                           
  2844  0029                     flashUpdate@i:	
  2845                           ; 1 bytes @ 0x9
  2846                           
  2847  0029                     ___lmul@product:	
  2848                           ; 2 bytes @ 0x9
  2849                           
  2850                           
  2851                           ; 4 bytes @ 0x9
  2852  0029                     	ds	1
  2853  002A                     ??_flashRealod:	
  2854  002A                     ___llmod@counter:	
  2855                           ; 1 bytes @ 0xA
  2856                           
  2857  002A                     ___lldiv@quotient:	
  2858                           ; 1 bytes @ 0xA
  2859                           
  2860                           
  2861                           ; 4 bytes @ 0xA
  2862  002A                     	ds	1
  2863  002B                     ??_nrf24l01GetPipe:	
  2864  002B                     nrf24l01SendPacket@Packet:	
  2865                           ; 1 bytes @ 0xB
  2866                           
  2867  002B                     flashRealod@i:	
  2868                           ; 1 bytes @ 0xB
  2869                           
  2870                           
  2871                           ; 2 bytes @ 0xB
  2872  002B                     	ds	1
  2873  002C                     nrf24l01SendPacket@i:	
  2874                           
  2875                           ; 1 bytes @ 0xC
  2876  002C                     	ds	2
  2877  002E                     ___lldiv@counter:	
  2878                           
  2879                           ; 1 bytes @ 0xE
  2880  002E                     	ds	1
  2881  002F                     ?_ultoa:	
  2882  002F                     ?_getADCValue:	
  2883                           ; 1 bytes @ 0xF
  2884                           
  2885  002F                     getADCValue@divider:	
  2886                           ; 4 bytes @ 0xF
  2887                           
  2888  002F                     ultoa@val:	
  2889                           ; 4 bytes @ 0xF
  2890                           
  2891                           
  2892                           ; 4 bytes @ 0xF
  2893  002F                     	ds	1
  2894  0030                     nrf24l01GetPipe@pipe:	
  2895                           
  2896                           ; 4 bytes @ 0x10
  2897  0030                     	ds	3
  2898  0033                     ??_getADCValue:	
  2899  0033                     ultoa@base:	
  2900                           ; 1 bytes @ 0x13
  2901                           
  2902                           
  2903                           ; 2 bytes @ 0x13
  2904  0033                     	ds	1
  2905  0034                     nrf24l01GetPipe@i:	
  2906                           
  2907                           ; 1 bytes @ 0x14
  2908  0034                     	ds	1
  2909  0035                     ??_ultoa:	
  2910  0035                     nrf24l01GetPipe@name:	
  2911                           ; 1 bytes @ 0x15
  2912                           
  2913                           
  2914                           ; 1 bytes @ 0x15
  2915  0035                     	ds	1
  2916  0036                     ??_nrf24l01SetRXPipe:	
  2917  0036                     ultoa@v:	
  2918                           ; 1 bytes @ 0x16
  2919                           
  2920                           
  2921                           ; 4 bytes @ 0x16
  2922  0036                     	ds	1
  2923  0037                     getADCValue@channel:	
  2924                           
  2925                           ; 1 bytes @ 0x17
  2926  0037                     	ds	1
  2927  0038                     getADCValue@adcLoop:	
  2928  0038                     nrf24l01SetRXPipe@pipe:	
  2929                           ; 1 bytes @ 0x18
  2930                           
  2931                           
  2932                           ; 1 bytes @ 0x18
  2933  0038                     	ds	1
  2934  0039                     nrf24l01SetRXPipe@name:	
  2935  0039                     getADCValue@adcSum:	
  2936                           ; 1 bytes @ 0x19
  2937                           
  2938                           
  2939                           ; 4 bytes @ 0x19
  2940  0039                     	ds	1
  2941  003A                     nrf24l01SetRXPipe@enRXAddr:	
  2942  003A                     ultoa@c:	
  2943                           ; 1 bytes @ 0x1A
  2944                           
  2945                           
  2946                           ; 1 bytes @ 0x1A
  2947  003A                     	ds	1
  2948  003B                     ??_nrf24l01InitRegisters:	
  2949  003B                     ultoa@buf:	
  2950                           ; 1 bytes @ 0x1B
  2951                           
  2952                           
  2953                           ; 1 bytes @ 0x1B
  2954  003B                     	ds	1
  2955  003C                     nrf24l01InitRegisters@channel:	
  2956                           
  2957                           ; 1 bytes @ 0x1C
  2958  003C                     	ds	1
  2959  003D                     ?_setMessage:	
  2960  003D                     nrf24l01InitRegisters@setupAW:	
  2961                           ; 1 bytes @ 0x1D
  2962                           
  2963  003D                     setMessage@topic:	
  2964                           ; 1 bytes @ 0x1D
  2965                           
  2966                           
  2967                           ; 2 bytes @ 0x1D
  2968  003D                     	ds	1
  2969  003E                     nrf24l01InitRegisters@feature:	
  2970                           
  2971                           ; 1 bytes @ 0x1E
  2972  003E                     	ds	1
  2973  003F                     nrf24l01InitRegisters@rfSetup:	
  2974  003F                     setMessage@value:	
  2975                           ; 1 bytes @ 0x1F
  2976                           
  2977                           
  2978                           ; 4 bytes @ 0x1F
  2979  003F                     	ds	1
  2980  0040                     nrf24l01InitRegisters@status:	
  2981                           
  2982                           ; 1 bytes @ 0x20
  2983  0040                     	ds	1
  2984  0041                     nrf24l01InitRegisters@enAA:	
  2985                           
  2986                           ; 1 bytes @ 0x21
  2987  0041                     	ds	1
  2988  0042                     nrf24l01InitRegisters@DynPD:	
  2989                           
  2990                           ; 1 bytes @ 0x22
  2991  0042                     	ds	1
  2992  0043                     ??_setMessage:	
  2993  0043                     nrf24l01InitRegisters@config:	
  2994                           ; 1 bytes @ 0x23
  2995                           
  2996  0043                     setMessage@tempString:	
  2997                           ; 1 bytes @ 0x23
  2998                           
  2999                           
  3000                           ; 16 bytes @ 0x23
  3001  0043                     	ds	1
  3002  0044                     ??_nrf24l01Init:	
  3003                           
  3004                           ; 1 bytes @ 0x24
  3005  0044                     	ds	15
  3006  0053                     setMessage@packet:	
  3007                           
  3008                           ; 1 bytes @ 0x33
  3009  0053                     	ds	1
  3010  0054                     ??_loop:	
  3011                           
  3012                           ; 1 bytes @ 0x34
  3013  0054                     	ds	4
  3014  0058                     ??_main:	
  3015                           
  3016                           ; 1 bytes @ 0x38
  3017  0058                     	ds	1
  3018                           
  3019                           	psect	maintext
  3020  02FB                     __pmaintext:	
  3021 ;;
  3022 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3023 ;;
  3024 ;; *************** function _main *****************
  3025 ;; Defined at:
  3026 ;;		line 157 in file "main.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;		None
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  packet         33   34[BANK1 ] struct .
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  1    wreg      void 
  3033 ;; Registers used:
  3034 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3035 ;; Tracked objects:
  3036 ;;		On entry : B1F/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3041 ;;      Locals:         0       0      33       0       0       0       0       0       0       0       0       0       
      +0       0
  3042 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3043 ;;      Totals:         0       1      33       0       0       0       0       0       0       0       0       0       
      +0       0
  3044 ;;Total ram usage:       34 bytes
  3045 ;; Hardware stack levels required when called:   13
  3046 ;; This function calls:
  3047 ;;		_flashRealod
  3048 ;;		_flashUpdate
  3049 ;;		_loop
  3050 ;;		_nrf24l01Init
  3051 ;;		_nrf24l01SendPacket
  3052 ;;		_setMessage
  3053 ;;		_sleep
  3054 ;;		_strcpy
  3055 ;; This function is called by:
  3056 ;;		Startup code after reset
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           
  3061                           ;psect for function _main
  3062  02FB                     _main:	
  3063                           
  3064                           ;main.c: 160: ANSELA = 0x00;
  3065                           
  3066                           ;incstack = 0
  3067                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3068  02FB  0023               	movlb	3	; select bank3
  3069  02FC  018C               	clrf	12	;volatile
  3070                           
  3071                           ;main.c: 161: ANSELC = 0x00;
  3072  02FD  018E               	clrf	14	;volatile
  3073                           
  3074                           ;main.c: 163: ODCONA = 0x00;
  3075  02FE  0025               	movlb	5	; select bank5
  3076  02FF  018C               	clrf	12	;volatile
  3077                           
  3078                           ;main.c: 164: ODCONC = 0x00;
  3079  0300  018E               	clrf	14	;volatile
  3080                           
  3081                           ;main.c: 169: INLVLA = 0x00;
  3082  0301  0027               	movlb	7	; select bank7
  3083  0302  018C               	clrf	12	;volatile
  3084                           
  3085                           ;main.c: 170: INLVLC = 0x00;
  3086  0303  018E               	clrf	14	;volatile
  3087                           
  3088                           ;main.c: 172: WPUA = 0x00;
  3089  0304  0024               	movlb	4	; select bank4
  3090  0305  018C               	clrf	12	;volatile
  3091                           
  3092                           ;main.c: 173: WPUC = 0x00;
  3093  0306  018E               	clrf	14	;volatile
  3094                           
  3095                           ;main.c: 175: TRISCbits.TRISC5 = 0;
  3096  0307  0021               	movlb	1	; select bank1
  3097  0308  128E               	bcf	14,5	;volatile
  3098                           
  3099                           ;main.c: 176: TRISCbits.TRISC4 = 0;
  3100  0309  120E               	bcf	14,4	;volatile
  3101                           
  3102                           ;main.c: 178: PORTCbits.RC4 = 0;
  3103  030A  0020               	movlb	0	; select bank0
  3104  030B  120E               	bcf	14,4	;volatile
  3105                           
  3106                           ;main.c: 185: INTCONbits.PEIE = 0;
  3107  030C  130B               	bcf	11,6	;volatile
  3108                           
  3109                           ;main.c: 186: INTCONbits.GIE = 0;
  3110  030D  138B               	bcf	11,7	;volatile
  3111                           
  3112                           ;main.c: 188: OSCCON1bits.NOSC = 0b000;
  3113  030E  308F               	movlw	-113
  3114  030F  0032               	movlb	18	; select bank18
  3115  0310  0599               	andwf	25,f	;volatile
  3116                           
  3117                           ;main.c: 189: OSCCON1bits.NDIV = 0b000;
  3118  0311  30F0               	movlw	-16
  3119  0312  0599               	andwf	25,f	;volatile
  3120                           
  3121                           ;main.c: 191: _delay((unsigned long)((10)*(16000000/4000.0)));
  3122  0313  3034               	movlw	52
  3123  0314  0020               	movlb	0	; select bank0
  3124  0315  00D8               	movwf	??_main
  3125  0316  30F1               	movlw	241
  3126  0317                     u1697:	
  3127  0317  0B89               	decfsz	9,f
  3128  0318  2B17               	goto	u1697
  3129  0319  0BD8               	decfsz	??_main,f
  3130  031A  2B17               	goto	u1697
  3131  031B  3200               	nop2
  3132                           
  3133                           ;main.c: 193: flashRealod();
  3134  031C  318F  2757  3182   	fcall	_flashRealod
  3135                           
  3136                           ;main.c: 195: if (romData.check != 0x07){
  3137  031F  3007               	movlw	7
  3138  0320  0020               	movlb	0	; select bank0
  3139  0321  065C               	xorwf	_romData,w
  3140  0322  1903               	btfsc	3,2
  3141  0323  2B36               	goto	l3103
  3142                           
  3143                           ;main.c: 196: romData.check = 0x07;
  3144  0324  3007               	movlw	7
  3145  0325  00D8               	movwf	??_main
  3146  0326  0858               	movf	??_main,w
  3147  0327  00DC               	movwf	_romData
  3148                           
  3149                           ;main.c: 197: strcpy(romData.name, "UW2");
  3150  0328  3032               	movlw	low (STR_9| (0+32768))
  3151  0329  00A1               	movwf	strcpy@from
  3152  032A  3090               	movlw	high (STR_9| (0+32768))
  3153  032B  00A2               	movwf	strcpy@from+1
  3154  032C  305D               	movlw	(low ((_romData| 0+1)))& (0+255)
  3155  032D  318F  2700  3182   	fcall	_strcpy
  3156                           
  3157                           ;main.c: 198: romData.bootMode = 0x00;
  3158  0330  0020               	movlb	0	; select bank0
  3159  0331  01ED               	clrf	_romData+17
  3160  0332  01EE               	clrf	_romData+18
  3161                           
  3162                           ;main.c: 199: flashUpdate();
  3163  0333  318F  27B8  3182   	fcall	_flashUpdate
  3164  0336                     l3103:	
  3165                           
  3166                           ;main.c: 200: };main.c: 202: nrf24l01Init();
  3167  0336  3187  277C  3182   	fcall	_nrf24l01Init
  3168                           
  3169                           ;main.c: 211: ADCON0bits.ADON = 0;
  3170  0339  0021               	movlb	1	; select bank1
  3171  033A  101D               	bcf	29,0	;volatile
  3172                           
  3173                           ;main.c: 214: ANSELAbits.ANSA4 = 1;
  3174  033B  0023               	movlb	3	; select bank3
  3175  033C  160C               	bsf	12,4	;volatile
  3176                           
  3177                           ;main.c: 215: TRISAbits.TRISA4 = 1;
  3178  033D  0021               	movlb	1	; select bank1
  3179  033E  160C               	bsf	12,4	;volatile
  3180                           
  3181                           ;main.c: 216: WPUAbits.WPUA4 = 0;
  3182  033F  0024               	movlb	4	; select bank4
  3183  0340  120C               	bcf	12,4	;volatile
  3184                           
  3185                           ;main.c: 219: ANSELCbits.ANSC3 = 1;
  3186  0341  0023               	movlb	3	; select bank3
  3187  0342  158E               	bsf	14,3	;volatile
  3188                           
  3189                           ;main.c: 220: TRISCbits.TRISC3 = 1;
  3190  0343  0021               	movlb	1	; select bank1
  3191  0344  158E               	bsf	14,3	;volatile
  3192                           
  3193                           ;main.c: 223: FVRCONbits.TSEN = 0;
  3194  0345  0022               	movlb	2	; select bank2
  3195  0346  1297               	bcf	23,5	;volatile
  3196                           
  3197                           ;main.c: 224: FVRCONbits.TSRNG = 0;
  3198  0347  1217               	bcf	23,4	;volatile
  3199                           
  3200                           ;main.c: 225: FVRCONbits.TSEN = 1;
  3201  0348  1697               	bsf	23,5	;volatile
  3202                           
  3203                           ;main.c: 228: FVRCONbits.FVREN = 0;
  3204  0349  1397               	bcf	23,7	;volatile
  3205                           
  3206                           ;main.c: 229: FVRCONbits.ADFVR = 1;
  3207  034A  0817               	movf	23,w	;volatile
  3208  034B  39FC               	andlw	-4
  3209  034C  3801               	iorlw	1
  3210  034D  0097               	movwf	23	;volatile
  3211                           
  3212                           ;main.c: 230: FVRCONbits.FVREN = 1;
  3213  034E  1797               	bsf	23,7	;volatile
  3214                           
  3215                           ;main.c: 232: ADCON1bits.ADCS = 0b111;
  3216  034F  3070               	movlw	112
  3217  0350  0021               	movlb	1	; select bank1
  3218  0351  049E               	iorwf	30,f	;volatile
  3219                           
  3220                           ;main.c: 233: ADCON1bits.ADFM = 1;
  3221  0352  179E               	bsf	30,7	;volatile
  3222                           
  3223                           ;main.c: 234: ADCON1bits.ADNREF = 0b0;
  3224  0353  111E               	bcf	30,2	;volatile
  3225                           
  3226                           ;main.c: 235: ADCON1bits.ADPREF = 0b00;
  3227  0354  30FC               	movlw	-4
  3228  0355  059E               	andwf	30,f	;volatile
  3229                           
  3230                           ;main.c: 237: ADCON0bits.CHS = 3;
  3231  0356  081D               	movf	29,w	;volatile
  3232  0357  3903               	andlw	-253
  3233  0358  380C               	iorlw	12
  3234  0359  009D               	movwf	29	;volatile
  3235                           
  3236                           ;main.c: 238: ADCON0bits.ADON = 1;
  3237  035A  141D               	bsf	29,0	;volatile
  3238                           
  3239                           ;main.c: 243: TRISAbits.TRISA2 = 1;
  3240  035B  150C               	bsf	12,2	;volatile
  3241                           
  3242                           ;main.c: 244: PIE0bits.INTE = 1;
  3243  035C  1410               	bsf	16,0	;volatile
  3244                           
  3245                           ;main.c: 245: INTCONbits.INTEDG = 0;
  3246  035D  100B               	bcf	11,0	;volatile
  3247                           
  3248                           ;main.c: 249: WDTCONbits.WDTPS = 10;
  3249  035E  0817               	movf	23,w	;volatile
  3250  035F  39C1               	andlw	-63
  3251  0360  3814               	iorlw	20
  3252  0361  0097               	movwf	23	;volatile
  3253                           
  3254                           ;main.c: 252: TRISAbits.TRISA5 = 0;
  3255  0362  128C               	bcf	12,5	;volatile
  3256                           
  3257                           ;main.c: 253: PORTAbits.RA5 = 0;
  3258  0363  0020               	movlb	0	; select bank0
  3259  0364  128C               	bcf	12,5	;volatile
  3260                           
  3261                           ;main.c: 256: INTCONbits.PEIE = 1;
  3262  0365  170B               	bsf	11,6	;volatile
  3263                           
  3264                           ;main.c: 257: INTCONbits.GIE = 1;
  3265  0366  178B               	bsf	11,7	;volatile
  3266                           
  3267                           ;main.c: 259: nrf24l01Packet_t packet;;main.c: 261: setMessage(&packet, "BOOT", romData.
      +                          bootMode);
  3268  0367  302D               	movlw	low (STR_10| (0+32768))
  3269  0368  00BD               	movwf	setMessage@topic
  3270  0369  3090               	movlw	high (STR_10| (0+32768))
  3271  036A  00BE               	movwf	setMessage@topic+1
  3272  036B  086D               	movf	_romData+17,w
  3273  036C  00BF               	movwf	setMessage@value
  3274  036D  086E               	movf	_romData+18,w
  3275  036E  00C0               	movwf	setMessage@value+1
  3276  036F  01C1               	clrf	setMessage@value+2
  3277  0370  01C2               	clrf	setMessage@value+3
  3278  0371  30C2               	movlw	(low (main@packet| 0))& (0+255)
  3279  0372  3184  2464  3182   	fcall	_setMessage
  3280                           
  3281                           ;main.c: 262: packet.packetData.byte = 0;
  3282  0375  0021               	movlb	1	; select bank1
  3283  0376  01C2               	clrf	main@packet^(0+128)
  3284                           
  3285                           ;main.c: 263: packet.packetData.ACKRequest = 0;
  3286  0377  1142               	bcf	main@packet^(0+128),2
  3287                           
  3288                           ;main.c: 264: nrf24l01SendPacket(&packet);
  3289  0378  30C2               	movlw	(low (main@packet| 0))& (0+255)
  3290  0379  3181  21DC  3182   	fcall	_nrf24l01SendPacket
  3291                           
  3292                           ;main.c: 265: sleep();
  3293  037C  3187  27EE  3182   	fcall	_sleep
  3294  037F                     l3167:	
  3295                           ;main.c: 267: while(1){
  3296                           
  3297                           
  3298                           ;main.c: 268: loop();
  3299  037F  3180  2029  3182   	fcall	_loop
  3300  0382  2B7F               	goto	l3167
  3301  0383                     __end_of_main:	
  3302                           ;main.c: 269: };main.c: 271: return;
  3303                           
  3304                           
  3305                           	psect	text1
  3306  0F00                     __ptext1:	
  3307 ;; *************** function _strcpy *****************
  3308 ;; Defined at:
  3309 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  3310 ;; Parameters:    Size  Location     Type
  3311 ;;  to              1    wreg     PTR unsigned char 
  3312 ;;		 -> romData(19), 
  3313 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  3314 ;;		 -> STR_9(4), 
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;  to              1    4[BANK0 ] PTR unsigned char 
  3317 ;;		 -> romData(19), 
  3318 ;;  cp              1    5[BANK0 ] PTR unsigned char 
  3319 ;;		 -> romData(19), 
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  1    wreg      PTR unsigned char 
  3322 ;; Registers used:
  3323 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3329 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3330 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3331 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3332 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3333 ;;Total ram usage:        5 bytes
  3334 ;; Hardware stack levels used:    1
  3335 ;; Hardware stack levels required when called:    7
  3336 ;; This function calls:
  3337 ;;		Nothing
  3338 ;; This function is called by:
  3339 ;;		_main
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343                           
  3344                           ;psect for function _strcpy
  3345  0F00                     _strcpy:	
  3346                           
  3347                           ;incstack = 0
  3348                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3349                           ;strcpy@to stored from wreg
  3350  0F00  0020               	movlb	0	; select bank0
  3351  0F01  00A4               	movwf	strcpy@to
  3352  0F02  0824               	movf	strcpy@to,w
  3353  0F03  00A3               	movwf	??_strcpy
  3354  0F04  0823               	movf	??_strcpy,w
  3355  0F05  00A5               	movwf	strcpy@cp
  3356  0F06                     l2761:	
  3357  0F06  0825               	movf	strcpy@cp,w
  3358  0F07  0086               	movwf	6
  3359  0F08  0187               	clrf	7
  3360  0F09  0821               	movf	strcpy@from,w
  3361  0F0A  0084               	movwf	4
  3362  0F0B  0822               	movf	strcpy@from+1,w
  3363  0F0C  0085               	movwf	5
  3364  0F0D  0800               	movf	0,w	;code access
  3365  0F0E  3FC0               	movwi [0]fsr1
  3366  0F0F  0889               	movf	9,f
  3367  0F10  1903               	btfsc	3,2
  3368  0F11  0008               	return
  3369  0F12  3001               	movlw	1
  3370  0F13  00A3               	movwf	??_strcpy
  3371  0F14  0823               	movf	??_strcpy,w
  3372  0F15  07A5               	addwf	strcpy@cp,f
  3373  0F16  3001               	movlw	1
  3374  0F17  07A1               	addwf	strcpy@from,f
  3375  0F18  3000               	movlw	0
  3376  0F19  3DA2               	addwfc	strcpy@from+1,f
  3377  0F1A  2F06               	goto	l2761
  3378  0F1B                     __end_of_strcpy:	
  3379                           ;	Return value of _strcpy is never used
  3380                           
  3381                           
  3382                           	psect	text2
  3383  077C                     __ptext2:	
  3384 ;; *************** function _nrf24l01Init *****************
  3385 ;; Defined at:
  3386 ;;		line 450 in file "nrf24l01.c"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;		None
  3389 ;; Auto vars:     Size  Location     Type
  3390 ;;		None
  3391 ;; Return value:  Size  Location     Type
  3392 ;;                  1    wreg      void 
  3393 ;; Registers used:
  3394 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3395 ;; Tracked objects:
  3396 ;;		On entry : 0/0
  3397 ;;		On exit  : 0/0
  3398 ;;		Unchanged: 0/0
  3399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3402 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3403 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3404 ;;Total ram usage:        2 bytes
  3405 ;; Hardware stack levels used:    1
  3406 ;; Hardware stack levels required when called:   12
  3407 ;; This function calls:
  3408 ;;		_nrf24l01CEHigh
  3409 ;;		_nrf24l01CELow
  3410 ;;		_nrf24l01InitRegisters
  3411 ;;		_nrf24l01InterfaceInit
  3412 ;; This function is called by:
  3413 ;;		_main
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           
  3418                           ;psect for function _nrf24l01Init
  3419  077C                     _nrf24l01Init:	
  3420                           
  3421                           ;nrf24l01.c: 453: nrf24l01InterfaceInit();
  3422                           
  3423                           ;incstack = 0
  3424                           ; Regs used in _nrf24l01Init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3425  077C  318F  271B  3187   	fcall	_nrf24l01InterfaceInit
  3426                           
  3427                           ;nrf24l01.c: 458: nrf24l01CELow();
  3428  077F  318E  263A  3187   	fcall	_nrf24l01CELow
  3429                           
  3430                           ;nrf24l01.c: 460: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3431  0782  3002               	movlw	2
  3432  0783  0020               	movlb	0	; select bank0
  3433  0784  00C5               	movwf	??_nrf24l01Init+1
  3434  0785  3004               	movlw	4
  3435  0786  00C4               	movwf	??_nrf24l01Init
  3436  0787  30BA               	movlw	186
  3437  0788                     u1707:	
  3438  0788  0B89               	decfsz	9,f
  3439  0789  2F88               	goto	u1707
  3440  078A  0BC4               	decfsz	??_nrf24l01Init,f
  3441  078B  2F88               	goto	u1707
  3442  078C  0BC5               	decfsz	??_nrf24l01Init+1,f
  3443  078D  2F88               	goto	u1707
  3444  078E  0000               	nop
  3445                           
  3446                           ;nrf24l01.c: 462: nrf24l01InitRegisters();
  3447  078F  3181  213D  3187   	fcall	_nrf24l01InitRegisters
  3448                           
  3449                           ;nrf24l01.c: 464: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3450  0792  3002               	movlw	2
  3451  0793  0020               	movlb	0	; select bank0
  3452  0794  00C5               	movwf	??_nrf24l01Init+1
  3453  0795  3004               	movlw	4
  3454  0796  00C4               	movwf	??_nrf24l01Init
  3455  0797  30BA               	movlw	186
  3456  0798                     u1717:	
  3457  0798  0B89               	decfsz	9,f
  3458  0799  2F98               	goto	u1717
  3459  079A  0BC4               	decfsz	??_nrf24l01Init,f
  3460  079B  2F98               	goto	u1717
  3461  079C  0BC5               	decfsz	??_nrf24l01Init+1,f
  3462  079D  2F98               	goto	u1717
  3463  079E  0000               	nop
  3464                           
  3465                           ;nrf24l01.c: 466: nrf24l01CEHigh();
  3466  079F  318E  2637         	fcall	_nrf24l01CEHigh
  3467  07A1  0008               	return
  3468  07A2                     __end_of_nrf24l01Init:	
  3469                           
  3470                           	psect	text3
  3471  0F1B                     __ptext3:	
  3472 ;; *************** function _nrf24l01InterfaceInit *****************
  3473 ;; Defined at:
  3474 ;;		line 28 in file "interface.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;		None
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;		None
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      void 
  3481 ;; Registers used:
  3482 ;;		wreg, status,2, status,0
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3492 ;;Total ram usage:        0 bytes
  3493 ;; Hardware stack levels used:    1
  3494 ;; Hardware stack levels required when called:    7
  3495 ;; This function calls:
  3496 ;;		Nothing
  3497 ;; This function is called by:
  3498 ;;		_nrf24l01Init
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           
  3503                           ;psect for function _nrf24l01InterfaceInit
  3504  0F1B                     _nrf24l01InterfaceInit:	
  3505                           
  3506                           ;interface.c: 30: TRISAbits.TRISA0 = 0;
  3507                           
  3508                           ;incstack = 0
  3509                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3510  0F1B  0021               	movlb	1	; select bank1
  3511  0F1C  100C               	bcf	12,0	;volatile
  3512                           
  3513                           ;interface.c: 31: TRISAbits.TRISA1 = 0;
  3514  0F1D  108C               	bcf	12,1	;volatile
  3515                           
  3516                           ;interface.c: 33: TRISCbits.TRISC1 = 1;
  3517  0F1E  148E               	bsf	14,1	;volatile
  3518                           
  3519                           ;interface.c: 34: TRISCbits.TRISC2 = 0;
  3520  0F1F  110E               	bcf	14,2	;volatile
  3521                           
  3522                           ;interface.c: 35: TRISCbits.TRISC0 = 0;
  3523  0F20  100E               	bcf	14,0	;volatile
  3524                           
  3525                           ;interface.c: 37: SSP1CON1bits.SSPEN = 0;
  3526  0F21  0024               	movlb	4	; select bank4
  3527  0F22  1295               	bcf	21,5	;volatile
  3528                           
  3529                           ;interface.c: 39: RC1PPSbits.RC1PPS = 0b10001;
  3530  0F23  003D               	movlb	29	; select bank29
  3531  0F24  0821               	movf	33,w	;volatile
  3532  0F25  39E0               	andlw	-32
  3533  0F26  3811               	iorlw	17
  3534  0F27  00A1               	movwf	33	;volatile
  3535                           
  3536                           ;interface.c: 40: RC2PPSbits.RC2PPS = 0b11001;
  3537  0F28  0822               	movf	34,w	;volatile
  3538  0F29  39E0               	andlw	-32
  3539  0F2A  3819               	iorlw	25
  3540  0F2B  00A2               	movwf	34	;volatile
  3541                           
  3542                           ;interface.c: 41: RC0PPSbits.RC0PPS = 0b11000;
  3543  0F2C  0820               	movf	32,w	;volatile
  3544  0F2D  39E0               	andlw	-32
  3545  0F2E  3818               	iorlw	24
  3546  0F2F  00A0               	movwf	32	;volatile
  3547                           
  3548                           ;interface.c: 43: SSP1CON1bits.CKP = 0;
  3549  0F30  0024               	movlb	4	; select bank4
  3550  0F31  1215               	bcf	21,4	;volatile
  3551                           
  3552                           ;interface.c: 44: SSP1STATbits.CKE = 1;
  3553  0F32  1714               	bsf	20,6	;volatile
  3554                           
  3555                           ;interface.c: 45: SSP1CON1bits.SSPM = 0b0000;
  3556  0F33  30F0               	movlw	-16
  3557  0F34  0595               	andwf	21,f	;volatile
  3558                           
  3559                           ;interface.c: 47: SSP1CON1bits.SSPEN = 1;
  3560  0F35  1695               	bsf	21,5	;volatile
  3561  0F36  0008               	return
  3562  0F37                     __end_of_nrf24l01InterfaceInit:	
  3563                           
  3564                           	psect	text4
  3565  013D                     __ptext4:	
  3566 ;; *************** function _nrf24l01InitRegisters *****************
  3567 ;; Defined at:
  3568 ;;		line 355 in file "nrf24l01.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;		None
  3571 ;; Auto vars:     Size  Location     Type
  3572 ;;  config          1   35[BANK0 ] struct .
  3573 ;;  DynPD           1   34[BANK0 ] struct .
  3574 ;;  enAA            1   33[BANK0 ] struct .
  3575 ;;  status          1   32[BANK0 ] struct .
  3576 ;;  rfSetup         1   31[BANK0 ] struct .
  3577 ;;  feature         1   30[BANK0 ] struct .
  3578 ;;  setupAW         1   29[BANK0 ] struct .
  3579 ;;  channel         1   28[BANK0 ] struct .
  3580 ;; Return value:  Size  Location     Type
  3581 ;;                  1    wreg      void 
  3582 ;; Registers used:
  3583 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3584 ;; Tracked objects:
  3585 ;;		On entry : 0/0
  3586 ;;		On exit  : 0/0
  3587 ;;		Unchanged: 0/0
  3588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3590 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3591 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3592 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3593 ;;Total ram usage:        9 bytes
  3594 ;; Hardware stack levels used:    1
  3595 ;; Hardware stack levels required when called:   11
  3596 ;; This function calls:
  3597 ;;		_nrf24l01Send
  3598 ;;		_nrf24l01SetRXPipe
  3599 ;; This function is called by:
  3600 ;;		_nrf24l01Init
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           
  3605                           ;psect for function _nrf24l01InitRegisters
  3606  013D                     _nrf24l01InitRegisters:	
  3607                           
  3608                           ;nrf24l01.c: 357: n_CONFIG_t config;;nrf24l01.c: 359: config.PWR_UP = 0;
  3609                           
  3610                           ;incstack = 0
  3611                           ; Regs used in _nrf24l01InitRegisters: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  3612  013D  0020               	movlb	0	; select bank0
  3613  013E  10C3               	bcf	nrf24l01InitRegisters@config,1
  3614                           
  3615                           ;nrf24l01.c: 360: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3616  013F  0843               	movf	nrf24l01InitRegisters@config,w
  3617  0140  00BB               	movwf	??_nrf24l01InitRegisters
  3618  0141  083B               	movf	??_nrf24l01InitRegisters,w
  3619  0142  00A1               	movwf	nrf24l01Send@data
  3620  0143  3020               	movlw	32
  3621  0144  318F  2777  3181   	fcall	_nrf24l01Send
  3622                           
  3623                           ;nrf24l01.c: 362: n_SETUP_AW_t setupAW;;nrf24l01.c: 363: setupAW.byte = 0x00;
  3624  0147  0020               	movlb	0	; select bank0
  3625  0148  01BD               	clrf	nrf24l01InitRegisters@setupAW
  3626                           
  3627                           ;nrf24l01.c: 364: setupAW.AW = 0b11;
  3628  0149  3003               	movlw	3
  3629  014A  04BD               	iorwf	nrf24l01InitRegisters@setupAW,f
  3630                           
  3631                           ;nrf24l01.c: 365: nrf24l01Send(0b00100000 | 0x02, setupAW.byte);
  3632  014B  083D               	movf	nrf24l01InitRegisters@setupAW,w
  3633  014C  00BB               	movwf	??_nrf24l01InitRegisters
  3634  014D  083B               	movf	??_nrf24l01InitRegisters,w
  3635  014E  00A1               	movwf	nrf24l01Send@data
  3636  014F  3022               	movlw	34
  3637  0150  318F  2777  3181   	fcall	_nrf24l01Send
  3638                           
  3639                           ;nrf24l01.c: 368: n_RF_CH_t channel;;nrf24l01.c: 369: channel.RF_CH = 2;
  3640  0153  0020               	movlb	0	; select bank0
  3641  0154  083C               	movf	nrf24l01InitRegisters@channel,w
  3642  0155  3980               	andlw	-128
  3643  0156  3802               	iorlw	2
  3644  0157  00BC               	movwf	nrf24l01InitRegisters@channel
  3645                           
  3646                           ;nrf24l01.c: 370: nrf24l01Send(0b00100000 | 0x05, channel.byte);
  3647  0158  083C               	movf	nrf24l01InitRegisters@channel,w
  3648  0159  00BB               	movwf	??_nrf24l01InitRegisters
  3649  015A  083B               	movf	??_nrf24l01InitRegisters,w
  3650  015B  00A1               	movwf	nrf24l01Send@data
  3651  015C  3025               	movlw	37
  3652  015D  318F  2777  3181   	fcall	_nrf24l01Send
  3653                           
  3654                           ;nrf24l01.c: 373: n_RF_SETUP_t rfSetup;;nrf24l01.c: 374: rfSetup.byte = 0x00;
  3655  0160  0020               	movlb	0	; select bank0
  3656  0161  01BF               	clrf	nrf24l01InitRegisters@rfSetup
  3657                           
  3658                           ;nrf24l01.c: 375: rfSetup.RF_DR_LOW = 0;
  3659  0162  12BF               	bcf	nrf24l01InitRegisters@rfSetup,5
  3660                           
  3661                           ;nrf24l01.c: 376: rfSetup.RF_DR_HIGH = 1;
  3662  0163  15BF               	bsf	nrf24l01InitRegisters@rfSetup,3
  3663                           
  3664                           ;nrf24l01.c: 377: rfSetup.RF_PWR = 3;
  3665  0164  3006               	movlw	6
  3666  0165  04BF               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3667                           
  3668                           ;nrf24l01.c: 378: nrf24l01Send(0b00100000 | 0x06, rfSetup.byte);
  3669  0166  083F               	movf	nrf24l01InitRegisters@rfSetup,w
  3670  0167  00BB               	movwf	??_nrf24l01InitRegisters
  3671  0168  083B               	movf	??_nrf24l01InitRegisters,w
  3672  0169  00A1               	movwf	nrf24l01Send@data
  3673  016A  3026               	movlw	38
  3674  016B  318F  2777  3181   	fcall	_nrf24l01Send
  3675                           
  3676                           ;nrf24l01.c: 399: n_EN_AA_t enAA;;nrf24l01.c: 400: enAA.byte = nrf24l01Send(0b00000000 |
      +                           0x01, 0);
  3677  016E  0020               	movlb	0	; select bank0
  3678  016F  01A1               	clrf	nrf24l01Send@data
  3679  0170  3001               	movlw	1
  3680  0171  318F  2777  3181   	fcall	_nrf24l01Send
  3681  0174  0020               	movlb	0	; select bank0
  3682  0175  00BB               	movwf	??_nrf24l01InitRegisters
  3683  0176  083B               	movf	??_nrf24l01InitRegisters,w
  3684  0177  00C1               	movwf	nrf24l01InitRegisters@enAA
  3685                           
  3686                           ;nrf24l01.c: 401: enAA.ENAA_P0 = 0;
  3687  0178  1041               	bcf	nrf24l01InitRegisters@enAA,0
  3688                           
  3689                           ;nrf24l01.c: 402: enAA.ENAA_P1 = 0;
  3690  0179  10C1               	bcf	nrf24l01InitRegisters@enAA,1
  3691                           
  3692                           ;nrf24l01.c: 403: enAA.ENAA_P2 = 0;
  3693  017A  1141               	bcf	nrf24l01InitRegisters@enAA,2
  3694                           
  3695                           ;nrf24l01.c: 404: enAA.ENAA_P3 = 0;
  3696  017B  11C1               	bcf	nrf24l01InitRegisters@enAA,3
  3697                           
  3698                           ;nrf24l01.c: 405: enAA.ENAA_P4 = 0;
  3699  017C  1241               	bcf	nrf24l01InitRegisters@enAA,4
  3700                           
  3701                           ;nrf24l01.c: 406: enAA.ENAA_P5 = 0;
  3702  017D  12C1               	bcf	nrf24l01InitRegisters@enAA,5
  3703                           
  3704                           ;nrf24l01.c: 407: nrf24l01Send(0b00100000 | 0x01, enAA.byte);
  3705  017E  0841               	movf	nrf24l01InitRegisters@enAA,w
  3706  017F  00BB               	movwf	??_nrf24l01InitRegisters
  3707  0180  083B               	movf	??_nrf24l01InitRegisters,w
  3708  0181  00A1               	movwf	nrf24l01Send@data
  3709  0182  3021               	movlw	33
  3710  0183  318F  2777  3181   	fcall	_nrf24l01Send
  3711                           
  3712                           ;nrf24l01.c: 410: nrf24l01SetRXPipe((0));
  3713  0186  3000               	movlw	0
  3714  0187  3187  2754  3181   	fcall	_nrf24l01SetRXPipe
  3715                           
  3716                           ;nrf24l01.c: 413: n_FEATURE_t feature;;nrf24l01.c: 414: feature.byte = nrf24l01Send(0b00
      +                          000000 | 0x1D, 0);
  3717  018A  0020               	movlb	0	; select bank0
  3718  018B  01A1               	clrf	nrf24l01Send@data
  3719  018C  301D               	movlw	29
  3720  018D  318F  2777  3181   	fcall	_nrf24l01Send
  3721  0190  0020               	movlb	0	; select bank0
  3722  0191  00BB               	movwf	??_nrf24l01InitRegisters
  3723  0192  083B               	movf	??_nrf24l01InitRegisters,w
  3724  0193  00BE               	movwf	nrf24l01InitRegisters@feature
  3725                           
  3726                           ;nrf24l01.c: 415: feature.EN_DPL = 1;
  3727  0194  153E               	bsf	nrf24l01InitRegisters@feature,2
  3728                           
  3729                           ;nrf24l01.c: 416: feature.EN_DYN_ACK = 1;
  3730  0195  143E               	bsf	nrf24l01InitRegisters@feature,0
  3731                           
  3732                           ;nrf24l01.c: 417: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  3733  0196  083E               	movf	nrf24l01InitRegisters@feature,w
  3734  0197  00BB               	movwf	??_nrf24l01InitRegisters
  3735  0198  083B               	movf	??_nrf24l01InitRegisters,w
  3736  0199  00A1               	movwf	nrf24l01Send@data
  3737  019A  303D               	movlw	61
  3738  019B  318F  2777  3181   	fcall	_nrf24l01Send
  3739                           
  3740                           ;nrf24l01.c: 419: n_DYNPD_t DynPD;;nrf24l01.c: 420: DynPD.byte = nrf24l01Send(0b00000000
      +                           | 0x1C, 0);
  3741  019E  0020               	movlb	0	; select bank0
  3742  019F  01A1               	clrf	nrf24l01Send@data
  3743  01A0  301C               	movlw	28
  3744  01A1  318F  2777  3181   	fcall	_nrf24l01Send
  3745  01A4  0020               	movlb	0	; select bank0
  3746  01A5  00BB               	movwf	??_nrf24l01InitRegisters
  3747  01A6  083B               	movf	??_nrf24l01InitRegisters,w
  3748  01A7  00C2               	movwf	nrf24l01InitRegisters@DynPD
  3749                           
  3750                           ;nrf24l01.c: 421: DynPD.DPL_P0 = 1;
  3751  01A8  1442               	bsf	nrf24l01InitRegisters@DynPD,0
  3752                           
  3753                           ;nrf24l01.c: 422: DynPD.DPL_P1 = 1;
  3754  01A9  14C2               	bsf	nrf24l01InitRegisters@DynPD,1
  3755                           
  3756                           ;nrf24l01.c: 423: DynPD.DPL_P2 = 1;
  3757  01AA  1542               	bsf	nrf24l01InitRegisters@DynPD,2
  3758                           
  3759                           ;nrf24l01.c: 424: DynPD.DPL_P3 = 1;
  3760  01AB  15C2               	bsf	nrf24l01InitRegisters@DynPD,3
  3761                           
  3762                           ;nrf24l01.c: 425: DynPD.DPL_P4 = 1;
  3763  01AC  1642               	bsf	nrf24l01InitRegisters@DynPD,4
  3764                           
  3765                           ;nrf24l01.c: 426: DynPD.DPL_P5 = 1;
  3766  01AD  16C2               	bsf	nrf24l01InitRegisters@DynPD,5
  3767                           
  3768                           ;nrf24l01.c: 427: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  3769  01AE  0842               	movf	nrf24l01InitRegisters@DynPD,w
  3770  01AF  00BB               	movwf	??_nrf24l01InitRegisters
  3771  01B0  083B               	movf	??_nrf24l01InitRegisters,w
  3772  01B1  00A1               	movwf	nrf24l01Send@data
  3773  01B2  303C               	movlw	60
  3774  01B3  318F  2777  3181   	fcall	_nrf24l01Send
  3775                           
  3776                           ;nrf24l01.c: 430: n_STATUS_t status;;nrf24l01.c: 431: status.byte = 0x00;
  3777  01B6  0020               	movlb	0	; select bank0
  3778  01B7  01C0               	clrf	nrf24l01InitRegisters@status
  3779                           
  3780                           ;nrf24l01.c: 432: status.RX_DR = 1;
  3781  01B8  1740               	bsf	nrf24l01InitRegisters@status,6
  3782                           
  3783                           ;nrf24l01.c: 433: status.TX_DS = 1;
  3784  01B9  16C0               	bsf	nrf24l01InitRegisters@status,5
  3785                           
  3786                           ;nrf24l01.c: 434: status.MAX_RT = 1;
  3787  01BA  1640               	bsf	nrf24l01InitRegisters@status,4
  3788                           
  3789                           ;nrf24l01.c: 435: nrf24l01Send(0b00100000 | 0x07, status.byte);
  3790  01BB  0840               	movf	nrf24l01InitRegisters@status,w
  3791  01BC  00BB               	movwf	??_nrf24l01InitRegisters
  3792  01BD  083B               	movf	??_nrf24l01InitRegisters,w
  3793  01BE  00A1               	movwf	nrf24l01Send@data
  3794  01BF  3027               	movlw	39
  3795  01C0  318F  2777  3181   	fcall	_nrf24l01Send
  3796                           
  3797                           ;nrf24l01.c: 438: nrf24l01Send(0b11100001, 0);
  3798  01C3  0020               	movlb	0	; select bank0
  3799  01C4  01A1               	clrf	nrf24l01Send@data
  3800  01C5  30E1               	movlw	225
  3801  01C6  318F  2777  3181   	fcall	_nrf24l01Send
  3802                           
  3803                           ;nrf24l01.c: 439: nrf24l01Send(0b11100010, 0);
  3804  01C9  0020               	movlb	0	; select bank0
  3805  01CA  01A1               	clrf	nrf24l01Send@data
  3806  01CB  30E2               	movlw	226
  3807  01CC  318F  2777  3181   	fcall	_nrf24l01Send
  3808                           
  3809                           ;nrf24l01.c: 442: config.PRIM_RX = 1;
  3810  01CF  0020               	movlb	0	; select bank0
  3811  01D0  1443               	bsf	nrf24l01InitRegisters@config,0
  3812                           
  3813                           ;nrf24l01.c: 443: config.EN_CRC = 1;
  3814  01D1  15C3               	bsf	nrf24l01InitRegisters@config,3
  3815                           
  3816                           ;nrf24l01.c: 444: config.CRCO = 1;
  3817  01D2  1543               	bsf	nrf24l01InitRegisters@config,2
  3818                           
  3819                           ;nrf24l01.c: 445: config.PWR_UP = 1;
  3820  01D3  14C3               	bsf	nrf24l01InitRegisters@config,1
  3821                           
  3822                           ;nrf24l01.c: 446: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3823  01D4  0843               	movf	nrf24l01InitRegisters@config,w
  3824  01D5  00BB               	movwf	??_nrf24l01InitRegisters
  3825  01D6  083B               	movf	??_nrf24l01InitRegisters,w
  3826  01D7  00A1               	movwf	nrf24l01Send@data
  3827  01D8  3020               	movlw	32
  3828  01D9  318F  2777         	fcall	_nrf24l01Send
  3829  01DB  0008               	return
  3830  01DC                     __end_of_nrf24l01InitRegisters:	
  3831                           
  3832                           	psect	text5
  3833  0754                     __ptext5:	
  3834 ;; *************** function _nrf24l01SetRXPipe *****************
  3835 ;; Defined at:
  3836 ;;		line 334 in file "nrf24l01.c"
  3837 ;; Parameters:    Size  Location     Type
  3838 ;;  name            1    wreg     PTR unsigned char 
  3839 ;;		 -> NULL(0), 
  3840 ;; Auto vars:     Size  Location     Type
  3841 ;;  name            1   25[BANK0 ] PTR unsigned char 
  3842 ;;		 -> NULL(0), 
  3843 ;;  pipe            1   24[BANK0 ] unsigned char 
  3844 ;;  enRXAddr        1   26[BANK0 ] struct .
  3845 ;; Return value:  Size  Location     Type
  3846 ;;                  1    wreg      void 
  3847 ;; Registers used:
  3848 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3849 ;; Tracked objects:
  3850 ;;		On entry : 0/0
  3851 ;;		On exit  : 0/0
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3855 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3856 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3857 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3858 ;;Total ram usage:        5 bytes
  3859 ;; Hardware stack levels used:    1
  3860 ;; Hardware stack levels required when called:   10
  3861 ;; This function calls:
  3862 ;;		_nrf24l01GetPipe
  3863 ;;		_nrf24l01Send
  3864 ;; This function is called by:
  3865 ;;		_nrf24l01InitRegisters
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           
  3870                           ;psect for function _nrf24l01SetRXPipe
  3871  0754                     _nrf24l01SetRXPipe:	
  3872                           
  3873                           ;incstack = 0
  3874                           ; Regs used in _nrf24l01SetRXPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3875                           ;nrf24l01SetRXPipe@name stored from wreg
  3876  0754  0020               	movlb	0	; select bank0
  3877  0755  00B9               	movwf	nrf24l01SetRXPipe@name
  3878                           
  3879                           ;nrf24l01.c: 336: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 338: if (name == (0)){
  3880  0756  0839               	movf	nrf24l01SetRXPipe@name,w
  3881  0757  1D03               	btfss	3,2
  3882  0758  2F60               	goto	l2217
  3883                           
  3884                           ;nrf24l01.c: 339: enRXAddr.ERX_P0 = 1;
  3885  0759  143A               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  3886                           
  3887                           ;nrf24l01.c: 340: enRXAddr.ERX_P1 = 1;
  3888  075A  14BA               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  3889                           
  3890                           ;nrf24l01.c: 341: enRXAddr.ERX_P2 = 1;
  3891  075B  153A               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  3892                           
  3893                           ;nrf24l01.c: 342: enRXAddr.ERX_P3 = 1;
  3894  075C  15BA               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  3895                           
  3896                           ;nrf24l01.c: 343: enRXAddr.ERX_P4 = 1;
  3897  075D  163A               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  3898                           
  3899                           ;nrf24l01.c: 344: enRXAddr.ERX_P5 = 1;
  3900  075E  16BA               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  3901                           
  3902                           ;nrf24l01.c: 345: }
  3903  075F  2F74               	goto	l2223
  3904  0760                     l2217:	
  3905                           
  3906                           ;nrf24l01.c: 346: else{;nrf24l01.c: 347: unsigned char pipe = nrf24l01GetPipe(name);
  3907  0760  0839               	movf	nrf24l01SetRXPipe@name,w
  3908  0761  3185  250B  3187   	fcall	_nrf24l01GetPipe
  3909  0764  0020               	movlb	0	; select bank0
  3910  0765  00B6               	movwf	??_nrf24l01SetRXPipe
  3911  0766  0836               	movf	??_nrf24l01SetRXPipe,w
  3912  0767  00B8               	movwf	nrf24l01SetRXPipe@pipe
  3913                           
  3914                           ;nrf24l01.c: 348: enRXAddr.ERX_P0 = 1;
  3915  0768  143A               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  3916                           
  3917                           ;nrf24l01.c: 349: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  3918  0769  083A               	movf	nrf24l01SetRXPipe@enRXAddr,w
  3919  076A  00B6               	movwf	??_nrf24l01SetRXPipe
  3920  076B  0A38               	incf	nrf24l01SetRXPipe@pipe,w
  3921  076C  2F6E               	goto	u1104
  3922  076D                     u1105:	
  3923  076D  35B6               	lslf	??_nrf24l01SetRXPipe,f
  3924  076E                     u1104:	
  3925  076E  0B89               	decfsz	9,f
  3926  076F  2F6D               	goto	u1105
  3927  0770  0836               	movf	??_nrf24l01SetRXPipe,w
  3928  0771  00B7               	movwf	??_nrf24l01SetRXPipe+1
  3929  0772  0837               	movf	??_nrf24l01SetRXPipe+1,w
  3930  0773  00BA               	movwf	nrf24l01SetRXPipe@enRXAddr
  3931  0774                     l2223:	
  3932                           
  3933                           ;nrf24l01.c: 350: };nrf24l01.c: 352: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  3934  0774  083A               	movf	nrf24l01SetRXPipe@enRXAddr,w
  3935  0775  00B6               	movwf	??_nrf24l01SetRXPipe
  3936  0776  0836               	movf	??_nrf24l01SetRXPipe,w
  3937  0777  00A1               	movwf	nrf24l01Send@data
  3938  0778  3022               	movlw	34
  3939  0779  318F  2777         	fcall	_nrf24l01Send
  3940  077B  0008               	return
  3941  077C                     __end_of_nrf24l01SetRXPipe:	
  3942                           
  3943                           	psect	text6
  3944  050B                     __ptext6:	
  3945 ;; *************** function _nrf24l01GetPipe *****************
  3946 ;; Defined at:
  3947 ;;		line 301 in file "nrf24l01.c"
  3948 ;; Parameters:    Size  Location     Type
  3949 ;;  name            1    wreg     PTR unsigned char 
  3950 ;;		 -> NULL(0), 
  3951 ;; Auto vars:     Size  Location     Type
  3952 ;;  name            1   21[BANK0 ] PTR unsigned char 
  3953 ;;		 -> NULL(0), 
  3954 ;;  pipe            4   16[BANK0 ] unsigned long 
  3955 ;;  i               1   20[BANK0 ] unsigned char 
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  1    wreg      unsigned char 
  3958 ;; Registers used:
  3959 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3966 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3967 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3968 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3969 ;;Total ram usage:       11 bytes
  3970 ;; Hardware stack levels used:    1
  3971 ;; Hardware stack levels required when called:    8
  3972 ;; This function calls:
  3973 ;;		___llmod
  3974 ;;		_strlen
  3975 ;; This function is called by:
  3976 ;;		_nrf24l01SetRXPipe
  3977 ;;		_nrf24l01SetTXPipe
  3978 ;; This function uses a non-reentrant model
  3979 ;;
  3980                           
  3981                           
  3982                           ;psect for function _nrf24l01GetPipe
  3983  050B                     _nrf24l01GetPipe:	
  3984                           
  3985                           ;incstack = 0
  3986                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3987                           ;nrf24l01GetPipe@name stored from wreg
  3988  050B  0020               	movlb	0	; select bank0
  3989  050C  00B5               	movwf	nrf24l01GetPipe@name
  3990                           
  3991                           ;nrf24l01.c: 302: unsigned long pipe = 0;
  3992  050D  3000               	movlw	0
  3993  050E  00B3               	movwf	nrf24l01GetPipe@pipe+3
  3994  050F  3000               	movlw	0
  3995  0510  00B2               	movwf	nrf24l01GetPipe@pipe+2
  3996  0511  3000               	movlw	0
  3997  0512  00B1               	movwf	nrf24l01GetPipe@pipe+1
  3998  0513  3000               	movlw	0
  3999  0514  00B0               	movwf	nrf24l01GetPipe@pipe
  4000                           
  4001                           ;nrf24l01.c: 303: unsigned char i = 0;
  4002  0515  01B4               	clrf	nrf24l01GetPipe@i
  4003                           
  4004                           ;nrf24l01.c: 306: for (i = 0; i < strlen(name); i++){
  4005  0516  01B4               	clrf	nrf24l01GetPipe@i
  4006  0517                     l2009:	
  4007  0517  0835               	movf	nrf24l01GetPipe@name,w
  4008  0518  318F  27DB  3185   	fcall	_strlen
  4009  051B  0020               	movlb	0	; select bank0
  4010  051C  0834               	movf	nrf24l01GetPipe@i,w
  4011  051D  00AB               	movwf	??_nrf24l01GetPipe
  4012  051E  01AC               	clrf	??_nrf24l01GetPipe+1
  4013  051F  0822               	movf	?_strlen+1,w
  4014  0520  022C               	subwf	??_nrf24l01GetPipe+1,w
  4015  0521  1D03               	skipz
  4016  0522  2D25               	goto	u875
  4017  0523  0821               	movf	?_strlen,w
  4018  0524  022B               	subwf	??_nrf24l01GetPipe,w
  4019  0525                     u875:	
  4020  0525  1803               	btfsc	3,0
  4021  0526  2D3F               	goto	l2011
  4022                           
  4023                           ;nrf24l01.c: 307: pipe+= name[i];
  4024  0527  0834               	movf	nrf24l01GetPipe@i,w
  4025  0528  0735               	addwf	nrf24l01GetPipe@name,w
  4026  0529  00AB               	movwf	??_nrf24l01GetPipe
  4027  052A  082B               	movf	??_nrf24l01GetPipe,w
  4028  052B  0086               	movwf	6
  4029  052C  0187               	clrf	7
  4030  052D  0801               	movf	1,w
  4031  052E  00AC               	movwf	??_nrf24l01GetPipe+1
  4032  052F  01AD               	clrf	??_nrf24l01GetPipe+2
  4033  0530  01AE               	clrf	??_nrf24l01GetPipe+3
  4034  0531  01AF               	clrf	??_nrf24l01GetPipe+4
  4035  0532  082C               	movf	??_nrf24l01GetPipe+1,w
  4036  0533  07B0               	addwf	nrf24l01GetPipe@pipe,f
  4037  0534  082D               	movf	??_nrf24l01GetPipe+2,w
  4038  0535  3DB1               	addwfc	nrf24l01GetPipe@pipe+1,f
  4039  0536  082E               	movf	??_nrf24l01GetPipe+3,w
  4040  0537  3DB2               	addwfc	nrf24l01GetPipe@pipe+2,f
  4041  0538  082F               	movf	??_nrf24l01GetPipe+4,w
  4042  0539  3DB3               	addwfc	nrf24l01GetPipe@pipe+3,f
  4043  053A  3001               	movlw	1
  4044  053B  00AB               	movwf	??_nrf24l01GetPipe
  4045  053C  082B               	movf	??_nrf24l01GetPipe,w
  4046  053D  07B4               	addwf	nrf24l01GetPipe@i,f
  4047  053E  2D17               	goto	l2009
  4048  053F                     l2011:	
  4049                           
  4050                           ;nrf24l01.c: 308: };nrf24l01.c: 309: pipe%= 6;
  4051  053F  3000               	movlw	0
  4052  0540  00A4               	movwf	___llmod@divisor+3
  4053  0541  3000               	movlw	0
  4054  0542  00A3               	movwf	___llmod@divisor+2
  4055  0543  3000               	movlw	0
  4056  0544  00A2               	movwf	___llmod@divisor+1
  4057  0545  3006               	movlw	6
  4058  0546  00A1               	movwf	___llmod@divisor
  4059  0547  0833               	movf	nrf24l01GetPipe@pipe+3,w
  4060  0548  00A8               	movwf	___llmod@dividend+3
  4061  0549  0832               	movf	nrf24l01GetPipe@pipe+2,w
  4062  054A  00A7               	movwf	___llmod@dividend+2
  4063  054B  0831               	movf	nrf24l01GetPipe@pipe+1,w
  4064  054C  00A6               	movwf	___llmod@dividend+1
  4065  054D  0830               	movf	nrf24l01GetPipe@pipe,w
  4066  054E  00A5               	movwf	___llmod@dividend
  4067  054F  3185  255C         	fcall	___llmod
  4068  0551  0020               	movlb	0	; select bank0
  4069  0552  0824               	movf	?___llmod+3,w
  4070  0553  00B3               	movwf	nrf24l01GetPipe@pipe+3
  4071  0554  0823               	movf	?___llmod+2,w
  4072  0555  00B2               	movwf	nrf24l01GetPipe@pipe+2
  4073  0556  0822               	movf	?___llmod+1,w
  4074  0557  00B1               	movwf	nrf24l01GetPipe@pipe+1
  4075  0558  0821               	movf	?___llmod,w
  4076  0559  00B0               	movwf	nrf24l01GetPipe@pipe
  4077                           
  4078                           ;nrf24l01.c: 310: return pipe;
  4079  055A  0830               	movf	nrf24l01GetPipe@pipe,w
  4080  055B  0008               	return
  4081  055C                     __end_of_nrf24l01GetPipe:	
  4082                           
  4083                           	psect	text7
  4084  0029                     __ptext7:	
  4085 ;; *************** function _loop *****************
  4086 ;; Defined at:
  4087 ;;		line 100 in file "main.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;		None
  4090 ;; Auto vars:     Size  Location     Type
  4091 ;;  packet         33    1[BANK1 ] struct .
  4092 ;;  rfSetup         1    0[BANK1 ] struct .
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  1    wreg      void 
  4095 ;; Registers used:
  4096 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4097 ;; Tracked objects:
  4098 ;;		On entry : 0/0
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4103 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  4104 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4105 ;;      Totals:         0       4      34       0       0       0       0       0       0       0       0       0       
      +0       0
  4106 ;;Total ram usage:       38 bytes
  4107 ;; Hardware stack levels used:    1
  4108 ;; Hardware stack levels required when called:   12
  4109 ;; This function calls:
  4110 ;;		_checkTXPower
  4111 ;;		_getADCValue
  4112 ;;		_nrf24l01Send
  4113 ;;		_nrf24l01SendPacket
  4114 ;;		_setMessage
  4115 ;;		_sleep
  4116 ;; This function is called by:
  4117 ;;		_main
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           
  4122                           ;psect for function _loop
  4123  0029                     _loop:	
  4124                           
  4125                           ;incstack = 0
  4126                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4127  0029  0064               	clrwdt	;# 
  4128                           
  4129                           ;main.c: 105: nrf24l01Packet_t packet;;main.c: 107: setMessage(&packet, "DBG", counter);
  4130  002A  3036               	movlw	low (STR_3| (0+32768))
  4131  002B  0020               	movlb	0	; select bank0
  4132  002C  00BD               	movwf	setMessage@topic
  4133  002D  3090               	movlw	high (STR_3| (0+32768))
  4134  002E  00BE               	movwf	setMessage@topic+1
  4135  002F  0021               	movlb	1	; select bank1
  4136  0030  0866               	movf	(_counter+3)^(0+128),w
  4137  0031  0020               	movlb	0	; select bank0
  4138  0032  00C2               	movwf	setMessage@value+3
  4139  0033  0021               	movlb	1	; select bank1
  4140  0034  0865               	movf	(_counter+2)^(0+128),w
  4141  0035  0020               	movlb	0	; select bank0
  4142  0036  00C1               	movwf	setMessage@value+2
  4143  0037  0021               	movlb	1	; select bank1
  4144  0038  0864               	movf	(_counter+1)^(0+128),w
  4145  0039  0020               	movlb	0	; select bank0
  4146  003A  00C0               	movwf	setMessage@value+1
  4147  003B  0021               	movlb	1	; select bank1
  4148  003C  0863               	movf	_counter^(0+128),w
  4149  003D  0020               	movlb	0	; select bank0
  4150  003E  00BF               	movwf	setMessage@value
  4151  003F  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4152  0040  3184  2464  3180   	fcall	_setMessage
  4153                           
  4154                           ;main.c: 108: packet.packetData.byte = 0;
  4155  0043  0021               	movlb	1	; select bank1
  4156  0044  01A1               	clrf	loop@packet^(0+128)
  4157                           
  4158                           ;main.c: 109: packet.packetData.ACKRequest = 0;
  4159  0045  1121               	bcf	loop@packet^(0+128),2
  4160                           
  4161                           ;main.c: 110: nrf24l01SendPacket(&packet);
  4162  0046  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4163  0047  3181  21DC  3180   	fcall	_nrf24l01SendPacket
  4164                           
  4165                           ;main.c: 111: checkTXPower();
  4166  004A  318E  266D  3180   	fcall	_checkTXPower
  4167                           
  4168                           ;main.c: 112: sleep();
  4169  004D  3187  27EE  3180   	fcall	_sleep
  4170                           
  4171                           ;main.c: 114: setMessage(&packet, "VBAT", getADCValue(0b000100, 2526));
  4172  0050  3028               	movlw	low (STR_4| (0+32768))
  4173  0051  0020               	movlb	0	; select bank0
  4174  0052  00BD               	movwf	setMessage@topic
  4175  0053  3090               	movlw	high (STR_4| (0+32768))
  4176  0054  00BE               	movwf	setMessage@topic+1
  4177  0055  3000               	movlw	0
  4178  0056  00B2               	movwf	getADCValue@divider+3
  4179  0057  3000               	movlw	0
  4180  0058  00B1               	movwf	getADCValue@divider+2
  4181  0059  3009               	movlw	9
  4182  005A  00B0               	movwf	getADCValue@divider+1
  4183  005B  30DE               	movlw	222
  4184  005C  00AF               	movwf	getADCValue@divider
  4185  005D  3004               	movlw	4
  4186  005E  3183  2383  3180   	fcall	_getADCValue
  4187  0061  0020               	movlb	0	; select bank0
  4188  0062  0832               	movf	?_getADCValue+3,w
  4189  0063  00C2               	movwf	setMessage@value+3
  4190  0064  0831               	movf	?_getADCValue+2,w
  4191  0065  00C1               	movwf	setMessage@value+2
  4192  0066  0830               	movf	?_getADCValue+1,w
  4193  0067  00C0               	movwf	setMessage@value+1
  4194  0068  082F               	movf	?_getADCValue,w
  4195  0069  00BF               	movwf	setMessage@value
  4196  006A  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4197  006B  3184  2464  3180   	fcall	_setMessage
  4198                           
  4199                           ;main.c: 115: packet.packetData.byte = 0;
  4200  006E  0021               	movlb	1	; select bank1
  4201  006F  01A1               	clrf	loop@packet^(0+128)
  4202                           
  4203                           ;main.c: 116: packet.packetData.ACKRequest = 1;
  4204  0070  1521               	bsf	loop@packet^(0+128),2
  4205                           
  4206                           ;main.c: 117: nrf24l01SendPacket(&packet);
  4207  0071  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4208  0072  3181  21DC  3180   	fcall	_nrf24l01SendPacket
  4209                           
  4210                           ;main.c: 118: checkTXPower();
  4211  0075  318E  266D  3180   	fcall	_checkTXPower
  4212                           
  4213                           ;main.c: 119: sleep();
  4214  0078  3187  27EE  3180   	fcall	_sleep
  4215                           
  4216                           ;main.c: 122: setMessage(&packet, "ANC3", getADCValue(0b010011, 2500));
  4217  007B  301E               	movlw	low (STR_5| (0+32768))
  4218  007C  0020               	movlb	0	; select bank0
  4219  007D  00BD               	movwf	setMessage@topic
  4220  007E  3090               	movlw	high (STR_5| (0+32768))
  4221  007F  00BE               	movwf	setMessage@topic+1
  4222  0080  3000               	movlw	0
  4223  0081  00B2               	movwf	getADCValue@divider+3
  4224  0082  3000               	movlw	0
  4225  0083  00B1               	movwf	getADCValue@divider+2
  4226  0084  3009               	movlw	9
  4227  0085  00B0               	movwf	getADCValue@divider+1
  4228  0086  30C4               	movlw	196
  4229  0087  00AF               	movwf	getADCValue@divider
  4230  0088  3013               	movlw	19
  4231  0089  3183  2383  3180   	fcall	_getADCValue
  4232  008C  0020               	movlb	0	; select bank0
  4233  008D  0832               	movf	?_getADCValue+3,w
  4234  008E  00C2               	movwf	setMessage@value+3
  4235  008F  0831               	movf	?_getADCValue+2,w
  4236  0090  00C1               	movwf	setMessage@value+2
  4237  0091  0830               	movf	?_getADCValue+1,w
  4238  0092  00C0               	movwf	setMessage@value+1
  4239  0093  082F               	movf	?_getADCValue,w
  4240  0094  00BF               	movwf	setMessage@value
  4241  0095  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4242  0096  3184  2464  3180   	fcall	_setMessage
  4243                           
  4244                           ;main.c: 123: packet.packetData.byte = 0;
  4245  0099  0021               	movlb	1	; select bank1
  4246  009A  01A1               	clrf	loop@packet^(0+128)
  4247                           
  4248                           ;main.c: 124: packet.packetData.ACKRequest = 1;
  4249  009B  1521               	bsf	loop@packet^(0+128),2
  4250                           
  4251                           ;main.c: 125: nrf24l01SendPacket(&packet);
  4252  009C  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4253  009D  3181  21DC  3180   	fcall	_nrf24l01SendPacket
  4254                           
  4255                           ;main.c: 126: checkTXPower();
  4256  00A0  318E  266D  3180   	fcall	_checkTXPower
  4257                           
  4258                           ;main.c: 127: sleep();
  4259  00A3  3187  27EE  3180   	fcall	_sleep
  4260                           
  4261                           ;main.c: 129: setMessage(&packet, "FVR", getADCValue(0b111111, 2500));
  4262  00A6  303A               	movlw	low (STR_6| (0+32768))
  4263  00A7  0020               	movlb	0	; select bank0
  4264  00A8  00BD               	movwf	setMessage@topic
  4265  00A9  3090               	movlw	high (STR_6| (0+32768))
  4266  00AA  00BE               	movwf	setMessage@topic+1
  4267  00AB  3000               	movlw	0
  4268  00AC  00B2               	movwf	getADCValue@divider+3
  4269  00AD  3000               	movlw	0
  4270  00AE  00B1               	movwf	getADCValue@divider+2
  4271  00AF  3009               	movlw	9
  4272  00B0  00B0               	movwf	getADCValue@divider+1
  4273  00B1  30C4               	movlw	196
  4274  00B2  00AF               	movwf	getADCValue@divider
  4275  00B3  303F               	movlw	63
  4276  00B4  3183  2383  3180   	fcall	_getADCValue
  4277  00B7  0020               	movlb	0	; select bank0
  4278  00B8  0832               	movf	?_getADCValue+3,w
  4279  00B9  00C2               	movwf	setMessage@value+3
  4280  00BA  0831               	movf	?_getADCValue+2,w
  4281  00BB  00C1               	movwf	setMessage@value+2
  4282  00BC  0830               	movf	?_getADCValue+1,w
  4283  00BD  00C0               	movwf	setMessage@value+1
  4284  00BE  082F               	movf	?_getADCValue,w
  4285  00BF  00BF               	movwf	setMessage@value
  4286  00C0  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4287  00C1  3184  2464  3180   	fcall	_setMessage
  4288                           
  4289                           ;main.c: 130: packet.packetData.byte = 0;
  4290  00C4  0021               	movlb	1	; select bank1
  4291  00C5  01A1               	clrf	loop@packet^(0+128)
  4292                           
  4293                           ;main.c: 131: packet.packetData.ACKRequest = 1;
  4294  00C6  1521               	bsf	loop@packet^(0+128),2
  4295                           
  4296                           ;main.c: 132: nrf24l01SendPacket(&packet);
  4297  00C7  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4298  00C8  3181  21DC  3180   	fcall	_nrf24l01SendPacket
  4299                           
  4300                           ;main.c: 133: checkTXPower();
  4301  00CB  318E  266D  3180   	fcall	_checkTXPower
  4302                           
  4303                           ;main.c: 134: sleep();
  4304  00CE  3187  27EE  3180   	fcall	_sleep
  4305                           
  4306                           ;main.c: 136: setMessage(&packet, "TEMP", getADCValue(0b111101, 162) - 40000);
  4307  00D1  3023               	movlw	low (STR_7| (0+32768))
  4308  00D2  0020               	movlb	0	; select bank0
  4309  00D3  00BD               	movwf	setMessage@topic
  4310  00D4  3090               	movlw	high (STR_7| (0+32768))
  4311  00D5  00BE               	movwf	setMessage@topic+1
  4312  00D6  30C0               	movlw	192
  4313  00D7  00D4               	movwf	??_loop
  4314  00D8  3063               	movlw	99
  4315  00D9  00D5               	movwf	??_loop+1
  4316  00DA  30FF               	movlw	255
  4317  00DB  00D6               	movwf	??_loop+2
  4318  00DC  30FF               	movlw	255
  4319  00DD  00D7               	movwf	??_loop+3
  4320  00DE  3000               	movlw	0
  4321  00DF  00B2               	movwf	getADCValue@divider+3
  4322  00E0  3000               	movlw	0
  4323  00E1  00B1               	movwf	getADCValue@divider+2
  4324  00E2  3000               	movlw	0
  4325  00E3  00B0               	movwf	getADCValue@divider+1
  4326  00E4  30A2               	movlw	162
  4327  00E5  00AF               	movwf	getADCValue@divider
  4328  00E6  303D               	movlw	61
  4329  00E7  3183  2383  3180   	fcall	_getADCValue
  4330  00EA  0020               	movlb	0	; select bank0
  4331  00EB  082F               	movf	?_getADCValue,w
  4332  00EC  07D4               	addwf	??_loop,f
  4333  00ED  0830               	movf	?_getADCValue+1,w
  4334  00EE  3DD5               	addwfc	??_loop+1,f
  4335  00EF  0831               	movf	?_getADCValue+2,w
  4336  00F0  3DD6               	addwfc	??_loop+2,f
  4337  00F1  0832               	movf	?_getADCValue+3,w
  4338  00F2  3DD7               	addwfc	??_loop+3,f
  4339  00F3  0857               	movf	??_loop+3,w
  4340  00F4  00C2               	movwf	setMessage@value+3
  4341  00F5  0856               	movf	??_loop+2,w
  4342  00F6  00C1               	movwf	setMessage@value+2
  4343  00F7  0855               	movf	??_loop+1,w
  4344  00F8  00C0               	movwf	setMessage@value+1
  4345  00F9  0854               	movf	??_loop,w
  4346  00FA  00BF               	movwf	setMessage@value
  4347  00FB  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4348  00FC  3184  2464  3180   	fcall	_setMessage
  4349                           
  4350                           ;main.c: 137: packet.packetData.byte = 0;
  4351  00FF  0021               	movlb	1	; select bank1
  4352  0100  01A1               	clrf	loop@packet^(0+128)
  4353                           
  4354                           ;main.c: 138: packet.packetData.ACKRequest = 1;
  4355  0101  1521               	bsf	loop@packet^(0+128),2
  4356                           
  4357                           ;main.c: 139: nrf24l01SendPacket(&packet);
  4358  0102  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4359  0103  3181  21DC  3180   	fcall	_nrf24l01SendPacket
  4360                           
  4361                           ;main.c: 140: checkTXPower();
  4362  0106  318E  266D  3180   	fcall	_checkTXPower
  4363                           
  4364                           ;main.c: 141: sleep();
  4365  0109  3187  27EE  3180   	fcall	_sleep
  4366                           
  4367                           ;main.c: 143: n_RF_SETUP_t rfSetup;;main.c: 144: rfSetup.byte = nrf24l01Send(0b00000000 
      +                          | 0x06, 0);
  4368  010C  0020               	movlb	0	; select bank0
  4369  010D  01A1               	clrf	nrf24l01Send@data
  4370  010E  3006               	movlw	6
  4371  010F  318F  2777  3180   	fcall	_nrf24l01Send
  4372  0112  0020               	movlb	0	; select bank0
  4373  0113  00D4               	movwf	??_loop
  4374  0114  0854               	movf	??_loop,w
  4375  0115  0021               	movlb	1	; select bank1
  4376  0116  00A0               	movwf	loop@rfSetup^(0+128)
  4377                           
  4378                           ;main.c: 146: setMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4379  0117  3013               	movlw	low (STR_8| (0+32768))
  4380  0118  0020               	movlb	0	; select bank0
  4381  0119  00BD               	movwf	setMessage@topic
  4382  011A  3090               	movlw	high (STR_8| (0+32768))
  4383  011B  00BE               	movwf	setMessage@topic+1
  4384  011C  0021               	movlb	1	; select bank1
  4385  011D  0C20               	rrf	loop@rfSetup^(0+128),w
  4386  011E  3903               	andlw	3
  4387  011F  0020               	movlb	0	; select bank0
  4388  0120  00D4               	movwf	??_loop
  4389  0121  01D5               	clrf	??_loop+1
  4390  0122  01D6               	clrf	??_loop+2
  4391  0123  01D7               	clrf	??_loop+3
  4392  0124  0857               	movf	??_loop+3,w
  4393  0125  00C2               	movwf	setMessage@value+3
  4394  0126  0856               	movf	??_loop+2,w
  4395  0127  00C1               	movwf	setMessage@value+2
  4396  0128  0855               	movf	??_loop+1,w
  4397  0129  00C0               	movwf	setMessage@value+1
  4398  012A  0854               	movf	??_loop,w
  4399  012B  00BF               	movwf	setMessage@value
  4400  012C  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4401  012D  3184  2464  3180   	fcall	_setMessage
  4402                           
  4403                           ;main.c: 147: packet.packetData.byte = 0;
  4404  0130  0021               	movlb	1	; select bank1
  4405  0131  01A1               	clrf	loop@packet^(0+128)
  4406                           
  4407                           ;main.c: 148: packet.packetData.ACKRequest = 1;
  4408  0132  1521               	bsf	loop@packet^(0+128),2
  4409                           
  4410                           ;main.c: 149: nrf24l01SendPacket(&packet);
  4411  0133  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4412  0134  3181  21DC  3180   	fcall	_nrf24l01SendPacket
  4413                           
  4414                           ;main.c: 150: checkTXPower();
  4415  0137  318E  266D  3180   	fcall	_checkTXPower
  4416                           
  4417                           ;main.c: 151: sleep();
  4418  013A  3187  27EE         	fcall	_sleep
  4419  013C  0008               	return
  4420  013D                     __end_of_loop:	
  4421                           
  4422                           	psect	text8
  4423  07EE                     __ptext8:	
  4424 ;; *************** function _sleep *****************
  4425 ;; Defined at:
  4426 ;;		line 49 in file "main.c"
  4427 ;; Parameters:    Size  Location     Type
  4428 ;;		None
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;		None
  4431 ;; Return value:  Size  Location     Type
  4432 ;;                  1    wreg      void 
  4433 ;; Registers used:
  4434 ;;		wreg
  4435 ;; Tracked objects:
  4436 ;;		On entry : 0/0
  4437 ;;		On exit  : 0/0
  4438 ;;		Unchanged: 0/0
  4439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4444 ;;Total ram usage:        0 bytes
  4445 ;; Hardware stack levels used:    1
  4446 ;; Hardware stack levels required when called:    7
  4447 ;; This function calls:
  4448 ;;		Nothing
  4449 ;; This function is called by:
  4450 ;;		_loop
  4451 ;;		_main
  4452 ;;		_checkRxData
  4453 ;; This function uses a non-reentrant model
  4454 ;;
  4455                           
  4456                           
  4457                           ;psect for function _sleep
  4458  07EE                     _sleep:	
  4459  07EE                     l221:	
  4460                           ;incstack = 0
  4461                           ; Regs used in _sleep: [wreg]
  4462                           ;main.c: 50: while (1){
  4463                           
  4464                           
  4465                           ;main.c: 52: counter++;
  4466  07EE  3001               	movlw	1
  4467  07EF  0021               	movlb	1	; select bank1
  4468  07F0  07E3               	addwf	_counter^(0+128),f
  4469  07F1  3000               	movlw	0
  4470  07F2  3DE4               	addwfc	(_counter+1)^(0+128),f
  4471  07F3  3000               	movlw	0
  4472  07F4  3DE5               	addwfc	(_counter+2)^(0+128),f
  4473  07F5  3000               	movlw	0
  4474  07F6  3DE6               	addwfc	(_counter+3)^(0+128),f
  4475  07F7  0063               	sleep	;# 
  4476                           
  4477                           ;main.c: 55: __nop();
  4478  07F8  0000               	nop
  4479                           
  4480                           ;main.c: 56: __nop();
  4481  07F9  0000               	nop
  4482                           
  4483                           ;main.c: 58: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  4484  07FA  0020               	movlb	0	; select bank0
  4485  07FB  1A03               	btfsc	3,4	;volatile
  4486  07FC  2FEE               	goto	l221
  4487  07FD  1D83               	btfss	3,3	;volatile
  4488  07FE  0008               	return
  4489  07FF  2FEE               	goto	l221
  4490  0800                     __end_of_sleep:	
  4491                           ;main.c: 59: return;
  4492                           
  4493                           
  4494                           	psect	text9
  4495  0464                     __ptext9:	
  4496 ;; *************** function _setMessage *****************
  4497 ;; Defined at:
  4498 ;;		line 76 in file "main.c"
  4499 ;; Parameters:    Size  Location     Type
  4500 ;;  packet          1    wreg     PTR struct .
  4501 ;;		 -> main@packet(33), loop@packet(33), 
  4502 ;;  topic           2   29[BANK0 ] PTR const unsigned char 
  4503 ;;		 -> STR_10(5), STR_8(6), STR_7(5), STR_6(4), 
  4504 ;;		 -> STR_5(5), STR_4(5), STR_3(4), 
  4505 ;;  value           4   31[BANK0 ] unsigned long 
  4506 ;; Auto vars:     Size  Location     Type
  4507 ;;  packet          1   51[BANK0 ] PTR struct .
  4508 ;;		 -> main@packet(33), loop@packet(33), 
  4509 ;;  tempString     16   35[BANK0 ] unsigned char [16]
  4510 ;; Return value:  Size  Location     Type
  4511 ;;                  1    wreg      void 
  4512 ;; Registers used:
  4513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4514 ;; Tracked objects:
  4515 ;;		On entry : 0/0
  4516 ;;		On exit  : 0/0
  4517 ;;		Unchanged: 0/0
  4518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4519 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4520 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4522 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4523 ;;Total ram usage:       23 bytes
  4524 ;; Hardware stack levels used:    1
  4525 ;; Hardware stack levels required when called:    9
  4526 ;; This function calls:
  4527 ;;		_memset
  4528 ;;		_strcat
  4529 ;;		_ultoa
  4530 ;; This function is called by:
  4531 ;;		_loop
  4532 ;;		_main
  4533 ;; This function uses a non-reentrant model
  4534 ;;
  4535                           
  4536                           
  4537                           ;psect for function _setMessage
  4538  0464                     _setMessage:	
  4539                           
  4540                           ;incstack = 0
  4541                           ; Regs used in _setMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4542                           ;setMessage@packet stored from wreg
  4543  0464  0020               	movlb	0	; select bank0
  4544  0465  00D3               	movwf	setMessage@packet
  4545                           
  4546                           ;main.c: 77: memset(packet->Message, 0, sizeof(packet->Message));
  4547  0466  0853               	movf	setMessage@packet,w
  4548  0467  3E01               	addlw	1
  4549  0468  00A1               	movwf	memset@p1
  4550  0469  3000               	movlw	0
  4551  046A  00A2               	movwf	memset@p1+1
  4552  046B  3000               	movlw	0
  4553  046C  00A3               	movwf	memset@c
  4554  046D  00A4               	movwf	memset@c+1
  4555  046E  3020               	movlw	32
  4556  046F  00A5               	movwf	memset@n
  4557  0470  3000               	movlw	0
  4558  0471  00A6               	movwf	memset@n+1
  4559  0472  318E  26B1  3184   	fcall	_memset
  4560                           
  4561                           ;main.c: 79: strcat(packet->Message, romData.name);
  4562  0475  305D               	movlw	low (_romData+1)
  4563  0476  0020               	movlb	0	; select bank0
  4564  0477  00A1               	movwf	strcat@from
  4565  0478  3000               	movlw	high (_romData+1)
  4566  0479  00A2               	movwf	strcat@from+1
  4567  047A  0853               	movf	setMessage@packet,w
  4568  047B  3E01               	addlw	1
  4569  047C  3187  27A2  3184   	fcall	_strcat
  4570                           
  4571                           ;main.c: 81: strcat(packet->Message, "/");
  4572  047F  303E               	movlw	low (STR_1| (0+32768))
  4573  0480  0020               	movlb	0	; select bank0
  4574  0481  00A1               	movwf	strcat@from
  4575  0482  3090               	movlw	high (STR_1| (0+32768))
  4576  0483  00A2               	movwf	strcat@from+1
  4577  0484  0853               	movf	setMessage@packet,w
  4578  0485  3E01               	addlw	1
  4579  0486  3187  27A2  3184   	fcall	_strcat
  4580                           
  4581                           ;main.c: 82: strcat(packet->Message, topic);
  4582  0489  0020               	movlb	0	; select bank0
  4583  048A  083E               	movf	setMessage@topic+1,w
  4584  048B  00A2               	movwf	strcat@from+1
  4585  048C  083D               	movf	setMessage@topic,w
  4586  048D  00A1               	movwf	strcat@from
  4587  048E  0853               	movf	setMessage@packet,w
  4588  048F  3E01               	addlw	1
  4589  0490  3187  27A2  3184   	fcall	_strcat
  4590                           
  4591                           ;main.c: 84: char tempString[16];;main.c: 86: ultoa(tempString, value, 10);
  4592  0493  0020               	movlb	0	; select bank0
  4593  0494  0842               	movf	setMessage@value+3,w
  4594  0495  00B2               	movwf	ultoa@val+3
  4595  0496  0841               	movf	setMessage@value+2,w
  4596  0497  00B1               	movwf	ultoa@val+2
  4597  0498  0840               	movf	setMessage@value+1,w
  4598  0499  00B0               	movwf	ultoa@val+1
  4599  049A  083F               	movf	setMessage@value,w
  4600  049B  00AF               	movwf	ultoa@val
  4601  049C  300A               	movlw	10
  4602  049D  00B3               	movwf	ultoa@base
  4603  049E  3000               	movlw	0
  4604  049F  00B4               	movwf	ultoa@base+1
  4605  04A0  3043               	movlw	(low (setMessage@tempString| 0))& (0+255)
  4606  04A1  3182  2272  3184   	fcall	_ultoa
  4607                           
  4608                           ;main.c: 88: strcat(packet->Message, "/");
  4609  04A4  303E               	movlw	low (STR_1| (0+32768))
  4610  04A5  0020               	movlb	0	; select bank0
  4611  04A6  00A1               	movwf	strcat@from
  4612  04A7  3090               	movlw	high (STR_1| (0+32768))
  4613  04A8  00A2               	movwf	strcat@from+1
  4614  04A9  0853               	movf	setMessage@packet,w
  4615  04AA  3E01               	addlw	1
  4616  04AB  3187  27A2  3184   	fcall	_strcat
  4617                           
  4618                           ;main.c: 89: strcat(packet->Message, tempString);
  4619  04AE  3043               	movlw	low setMessage@tempString
  4620  04AF  0020               	movlb	0	; select bank0
  4621  04B0  00A1               	movwf	strcat@from
  4622  04B1  3000               	movlw	high setMessage@tempString
  4623  04B2  00A2               	movwf	strcat@from+1
  4624  04B3  0853               	movf	setMessage@packet,w
  4625  04B4  3E01               	addlw	1
  4626  04B5  3187  27A2         	fcall	_strcat
  4627  04B7  0008               	return
  4628  04B8                     __end_of_setMessage:	
  4629                           
  4630                           	psect	text10
  4631  0272                     __ptext10:	
  4632 ;; *************** function _ultoa *****************
  4633 ;; Defined at:
  4634 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ltoa.c"
  4635 ;; Parameters:    Size  Location     Type
  4636 ;;  buf             1    wreg     PTR unsigned char 
  4637 ;;		 -> setMessage@tempString(16), 
  4638 ;;  val             4   15[BANK0 ] unsigned long 
  4639 ;;  base            2   19[BANK0 ] int 
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;  buf             1   27[BANK0 ] PTR unsigned char 
  4642 ;;		 -> setMessage@tempString(16), 
  4643 ;;  v               4   22[BANK0 ] unsigned long 
  4644 ;;  c               1   26[BANK0 ] unsigned char 
  4645 ;; Return value:  Size  Location     Type
  4646 ;;                  1    wreg      PTR unsigned char 
  4647 ;; Registers used:
  4648 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4654 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4655 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4656 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4657 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4658 ;;Total ram usage:       13 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:    8
  4661 ;; This function calls:
  4662 ;;		___lldiv
  4663 ;;		___llmod
  4664 ;; This function is called by:
  4665 ;;		_setMessage
  4666 ;; This function uses a non-reentrant model
  4667 ;;
  4668                           
  4669                           
  4670                           ;psect for function _ultoa
  4671  0272                     _ultoa:	
  4672                           
  4673                           ;incstack = 0
  4674                           ; Regs used in _ultoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4675                           ;ultoa@buf stored from wreg
  4676  0272  0020               	movlb	0	; select bank0
  4677  0273  00BB               	movwf	ultoa@buf
  4678  0274  0832               	movf	ultoa@val+3,w
  4679  0275  00B9               	movwf	ultoa@v+3
  4680  0276  0831               	movf	ultoa@val+2,w
  4681  0277  00B8               	movwf	ultoa@v+2
  4682  0278  0830               	movf	ultoa@val+1,w
  4683  0279  00B7               	movwf	ultoa@v+1
  4684  027A  082F               	movf	ultoa@val,w
  4685  027B  00B6               	movwf	ultoa@v
  4686  027C                     l2155:	
  4687  027C  0833               	movf	ultoa@base,w
  4688  027D  00A1               	movwf	___lldiv@divisor
  4689  027E  0834               	movf	ultoa@base+1,w
  4690  027F  00A2               	movwf	___lldiv@divisor+1
  4691  0280  0D89               	rlf	9,f
  4692  0281  3B89               	subwfb	9,f
  4693  0282  0989               	comf	9,f
  4694  0283  00A3               	movwf	___lldiv@divisor+2
  4695  0284  00A4               	movwf	___lldiv@divisor+3
  4696  0285  0839               	movf	ultoa@v+3,w
  4697  0286  00A8               	movwf	___lldiv@dividend+3
  4698  0287  0838               	movf	ultoa@v+2,w
  4699  0288  00A7               	movwf	___lldiv@dividend+2
  4700  0289  0837               	movf	ultoa@v+1,w
  4701  028A  00A6               	movwf	___lldiv@dividend+1
  4702  028B  0836               	movf	ultoa@v,w
  4703  028C  00A5               	movwf	___lldiv@dividend
  4704  028D  3184  24B8  3182   	fcall	___lldiv
  4705  0290  0020               	movlb	0	; select bank0
  4706  0291  0824               	movf	?___lldiv+3,w
  4707  0292  00B9               	movwf	ultoa@v+3
  4708  0293  0823               	movf	?___lldiv+2,w
  4709  0294  00B8               	movwf	ultoa@v+2
  4710  0295  0822               	movf	?___lldiv+1,w
  4711  0296  00B7               	movwf	ultoa@v+1
  4712  0297  0821               	movf	?___lldiv,w
  4713  0298  00B6               	movwf	ultoa@v
  4714  0299  3001               	movlw	1
  4715  029A  00B5               	movwf	??_ultoa
  4716  029B  0835               	movf	??_ultoa,w
  4717  029C  07BB               	addwf	ultoa@buf,f
  4718  029D  0839               	movf	ultoa@v+3,w
  4719  029E  0438               	iorwf	ultoa@v+2,w
  4720  029F  0437               	iorwf	ultoa@v+1,w
  4721  02A0  0436               	iorwf	ultoa@v,w
  4722  02A1  1D03               	skipz
  4723  02A2  2A7C               	goto	l2155
  4724  02A3  083B               	movf	ultoa@buf,w
  4725  02A4  0086               	movwf	6
  4726  02A5  0187               	clrf	7
  4727  02A6  0181               	clrf	1
  4728  02A7  3001               	movlw	1
  4729  02A8  02BB               	subwf	ultoa@buf,f
  4730  02A9                     l2165:	
  4731  02A9  0833               	movf	ultoa@base,w
  4732  02AA  00A1               	movwf	___llmod@divisor
  4733  02AB  0834               	movf	ultoa@base+1,w
  4734  02AC  00A2               	movwf	___llmod@divisor+1
  4735  02AD  0D89               	rlf	9,f
  4736  02AE  3B89               	subwfb	9,f
  4737  02AF  0989               	comf	9,f
  4738  02B0  00A3               	movwf	___llmod@divisor+2
  4739  02B1  00A4               	movwf	___llmod@divisor+3
  4740  02B2  0832               	movf	ultoa@val+3,w
  4741  02B3  00A8               	movwf	___llmod@dividend+3
  4742  02B4  0831               	movf	ultoa@val+2,w
  4743  02B5  00A7               	movwf	___llmod@dividend+2
  4744  02B6  0830               	movf	ultoa@val+1,w
  4745  02B7  00A6               	movwf	___llmod@dividend+1
  4746  02B8  082F               	movf	ultoa@val,w
  4747  02B9  00A5               	movwf	___llmod@dividend
  4748  02BA  3185  255C  3182   	fcall	___llmod
  4749  02BD  0020               	movlb	0	; select bank0
  4750  02BE  0821               	movf	?___llmod,w
  4751  02BF  00B5               	movwf	??_ultoa
  4752  02C0  0835               	movf	??_ultoa,w
  4753  02C1  00BA               	movwf	ultoa@c
  4754  02C2  0833               	movf	ultoa@base,w
  4755  02C3  00A1               	movwf	___lldiv@divisor
  4756  02C4  0834               	movf	ultoa@base+1,w
  4757  02C5  00A2               	movwf	___lldiv@divisor+1
  4758  02C6  0D89               	rlf	9,f
  4759  02C7  3B89               	subwfb	9,f
  4760  02C8  0989               	comf	9,f
  4761  02C9  00A3               	movwf	___lldiv@divisor+2
  4762  02CA  00A4               	movwf	___lldiv@divisor+3
  4763  02CB  0832               	movf	ultoa@val+3,w
  4764  02CC  00A8               	movwf	___lldiv@dividend+3
  4765  02CD  0831               	movf	ultoa@val+2,w
  4766  02CE  00A7               	movwf	___lldiv@dividend+2
  4767  02CF  0830               	movf	ultoa@val+1,w
  4768  02D0  00A6               	movwf	___lldiv@dividend+1
  4769  02D1  082F               	movf	ultoa@val,w
  4770  02D2  00A5               	movwf	___lldiv@dividend
  4771  02D3  3184  24B8  3182   	fcall	___lldiv
  4772  02D6  0020               	movlb	0	; select bank0
  4773  02D7  0824               	movf	?___lldiv+3,w
  4774  02D8  00B2               	movwf	ultoa@val+3
  4775  02D9  0823               	movf	?___lldiv+2,w
  4776  02DA  00B1               	movwf	ultoa@val+2
  4777  02DB  0822               	movf	?___lldiv+1,w
  4778  02DC  00B0               	movwf	ultoa@val+1
  4779  02DD  0821               	movf	?___lldiv,w
  4780  02DE  00AF               	movwf	ultoa@val
  4781  02DF  300A               	movlw	10
  4782  02E0  023A               	subwf	ultoa@c,w
  4783  02E1  1C03               	skipc
  4784  02E2  2AE7               	goto	l882
  4785  02E3  3007               	movlw	7
  4786  02E4  00B5               	movwf	??_ultoa
  4787  02E5  0835               	movf	??_ultoa,w
  4788  02E6  07BA               	addwf	ultoa@c,f
  4789  02E7                     l882:	
  4790  02E7  3030               	movlw	48
  4791  02E8  00B5               	movwf	??_ultoa
  4792  02E9  0835               	movf	??_ultoa,w
  4793  02EA  07BA               	addwf	ultoa@c,f
  4794  02EB  083A               	movf	ultoa@c,w
  4795  02EC  00B5               	movwf	??_ultoa
  4796  02ED  083B               	movf	ultoa@buf,w
  4797  02EE  0086               	movwf	6
  4798  02EF  0187               	clrf	7
  4799  02F0  0835               	movf	??_ultoa,w
  4800  02F1  0081               	movwf	1
  4801  02F2  3001               	movlw	1
  4802  02F3  02BB               	subwf	ultoa@buf,f
  4803  02F4  0832               	movf	ultoa@val+3,w
  4804  02F5  0431               	iorwf	ultoa@val+2,w
  4805  02F6  0430               	iorwf	ultoa@val+1,w
  4806  02F7  042F               	iorwf	ultoa@val,w
  4807  02F8  1903               	btfsc	3,2
  4808  02F9  0008               	return
  4809  02FA  2AA9               	goto	l2165
  4810  02FB                     __end_of_ultoa:	
  4811                           ;	Return value of _ultoa is never used
  4812                           
  4813                           
  4814                           	psect	text11
  4815  055C                     __ptext11:	
  4816 ;; *************** function ___llmod *****************
  4817 ;; Defined at:
  4818 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  4819 ;; Parameters:    Size  Location     Type
  4820 ;;  divisor         4    1[BANK0 ] unsigned long 
  4821 ;;  dividend        4    5[BANK0 ] unsigned long 
  4822 ;; Auto vars:     Size  Location     Type
  4823 ;;  counter         1   10[BANK0 ] unsigned char 
  4824 ;; Return value:  Size  Location     Type
  4825 ;;                  4    1[BANK0 ] unsigned long 
  4826 ;; Registers used:
  4827 ;;		wreg, status,2, status,0
  4828 ;; Tracked objects:
  4829 ;;		On entry : 0/0
  4830 ;;		On exit  : 0/0
  4831 ;;		Unchanged: 0/0
  4832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4833 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4834 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4835 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4836 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4837 ;;Total ram usage:       10 bytes
  4838 ;; Hardware stack levels used:    1
  4839 ;; Hardware stack levels required when called:    7
  4840 ;; This function calls:
  4841 ;;		Nothing
  4842 ;; This function is called by:
  4843 ;;		_nrf24l01GetPipe
  4844 ;;		_ultoa
  4845 ;; This function uses a non-reentrant model
  4846 ;;
  4847                           
  4848                           
  4849                           ;psect for function ___llmod
  4850  055C                     ___llmod:	
  4851                           
  4852                           ;incstack = 0
  4853                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  4854  055C  0020               	movlb	0	; select bank0
  4855  055D  0824               	movf	___llmod@divisor+3,w
  4856  055E  0423               	iorwf	___llmod@divisor+2,w
  4857  055F  0422               	iorwf	___llmod@divisor+1,w
  4858  0560  0421               	iorwf	___llmod@divisor,w
  4859  0561  1903               	skipnz
  4860  0562  2D96               	goto	l1979
  4861  0563  01AA               	clrf	___llmod@counter
  4862  0564  0AAA               	incf	___llmod@counter,f
  4863  0565                     l1969:	
  4864  0565  1BA4               	btfsc	___llmod@divisor+3,7
  4865  0566  2D73               	goto	l1971
  4866  0567  3001               	movlw	1
  4867  0568                     u825:	
  4868  0568  35A1               	lslf	___llmod@divisor,f
  4869  0569  0DA2               	rlf	___llmod@divisor+1,f
  4870  056A  0DA3               	rlf	___llmod@divisor+2,f
  4871  056B  0DA4               	rlf	___llmod@divisor+3,f
  4872  056C  0B89               	decfsz	9,f
  4873  056D  2D68               	goto	u825
  4874  056E  3001               	movlw	1
  4875  056F  00A9               	movwf	??___llmod
  4876  0570  0829               	movf	??___llmod,w
  4877  0571  07AA               	addwf	___llmod@counter,f
  4878  0572  2D65               	goto	l1969
  4879  0573                     l1971:	
  4880  0573  0824               	movf	___llmod@divisor+3,w
  4881  0574  0228               	subwf	___llmod@dividend+3,w
  4882  0575  1D03               	skipz
  4883  0576  2D81               	goto	u845
  4884  0577  0823               	movf	___llmod@divisor+2,w
  4885  0578  0227               	subwf	___llmod@dividend+2,w
  4886  0579  1D03               	skipz
  4887  057A  2D81               	goto	u845
  4888  057B  0822               	movf	___llmod@divisor+1,w
  4889  057C  0226               	subwf	___llmod@dividend+1,w
  4890  057D  1D03               	skipz
  4891  057E  2D81               	goto	u845
  4892  057F  0821               	movf	___llmod@divisor,w
  4893  0580  0225               	subwf	___llmod@dividend,w
  4894  0581                     u845:	
  4895  0581  1C03               	skipc
  4896  0582  2D8B               	goto	l1975
  4897  0583  0821               	movf	___llmod@divisor,w
  4898  0584  02A5               	subwf	___llmod@dividend,f
  4899  0585  0822               	movf	___llmod@divisor+1,w
  4900  0586  3BA6               	subwfb	___llmod@dividend+1,f
  4901  0587  0823               	movf	___llmod@divisor+2,w
  4902  0588  3BA7               	subwfb	___llmod@dividend+2,f
  4903  0589  0824               	movf	___llmod@divisor+3,w
  4904  058A  3BA8               	subwfb	___llmod@dividend+3,f
  4905  058B                     l1975:	
  4906  058B  3001               	movlw	1
  4907  058C                     u855:	
  4908  058C  36A4               	lsrf	___llmod@divisor+3,f
  4909  058D  0CA3               	rrf	___llmod@divisor+2,f
  4910  058E  0CA2               	rrf	___llmod@divisor+1,f
  4911  058F  0CA1               	rrf	___llmod@divisor,f
  4912  0590  0B89               	decfsz	9,f
  4913  0591  2D8C               	goto	u855
  4914  0592  3001               	movlw	1
  4915  0593  02AA               	subwf	___llmod@counter,f
  4916  0594  1D03               	btfss	3,2
  4917  0595  2D73               	goto	l1971
  4918  0596                     l1979:	
  4919  0596  0828               	movf	___llmod@dividend+3,w
  4920  0597  00A4               	movwf	?___llmod+3
  4921  0598  0827               	movf	___llmod@dividend+2,w
  4922  0599  00A3               	movwf	?___llmod+2
  4923  059A  0826               	movf	___llmod@dividend+1,w
  4924  059B  00A2               	movwf	?___llmod+1
  4925  059C  0825               	movf	___llmod@dividend,w
  4926  059D  00A1               	movwf	?___llmod
  4927  059E  0008               	return
  4928  059F                     __end_of___llmod:	
  4929                           
  4930                           	psect	text12
  4931  07A2                     __ptext12:	
  4932 ;; *************** function _strcat *****************
  4933 ;; Defined at:
  4934 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  4935 ;; Parameters:    Size  Location     Type
  4936 ;;  to              1    wreg     PTR unsigned char 
  4937 ;;		 -> main@packet(33), loop@packet(33), 
  4938 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  4939 ;;		 -> STR_10(5), STR_8(6), STR_7(5), STR_6(4), 
  4940 ;;		 -> STR_5(5), STR_4(5), STR_3(4), STR_2(2), 
  4941 ;;		 -> setMessage@tempString(16), STR_1(2), romData.name(16), romData(19), 
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;  to              1    5[BANK0 ] PTR unsigned char 
  4944 ;;		 -> main@packet(33), loop@packet(33), 
  4945 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  4946 ;;		 -> main@packet(33), loop@packet(33), 
  4947 ;; Return value:  Size  Location     Type
  4948 ;;                  1    wreg      PTR unsigned char 
  4949 ;; Registers used:
  4950 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4951 ;; Tracked objects:
  4952 ;;		On entry : 0/0
  4953 ;;		On exit  : 0/0
  4954 ;;		Unchanged: 0/0
  4955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4956 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4957 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4958 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4959 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4960 ;;Total ram usage:        5 bytes
  4961 ;; Hardware stack levels used:    1
  4962 ;; Hardware stack levels required when called:    7
  4963 ;; This function calls:
  4964 ;;		Nothing
  4965 ;; This function is called by:
  4966 ;;		_setMessage
  4967 ;; This function uses a non-reentrant model
  4968 ;;
  4969                           
  4970                           
  4971                           ;psect for function _strcat
  4972  07A2                     _strcat:	
  4973                           
  4974                           ;incstack = 0
  4975                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  4976                           ;strcat@to stored from wreg
  4977  07A2  0020               	movlb	0	; select bank0
  4978  07A3  00A5               	movwf	strcat@to
  4979  07A4  0825               	movf	strcat@to,w
  4980  07A5  00A3               	movwf	??_strcat
  4981  07A6  0823               	movf	??_strcat,w
  4982  07A7  00A4               	movwf	strcat@cp
  4983  07A8                     l2145:	
  4984  07A8  0824               	movf	strcat@cp,w
  4985  07A9  0086               	movwf	6
  4986  07AA  0187               	clrf	7
  4987  07AB  0801               	movf	1,w
  4988  07AC  1903               	btfsc	3,2
  4989  07AD  2FBB               	goto	l2151
  4990  07AE  3001               	movlw	1
  4991  07AF  00A3               	movwf	??_strcat
  4992  07B0  0823               	movf	??_strcat,w
  4993  07B1  07A4               	addwf	strcat@cp,f
  4994  07B2  2FA8               	goto	l2145
  4995  07B3                     l2147:	
  4996  07B3  3001               	movlw	1
  4997  07B4  00A3               	movwf	??_strcat
  4998  07B5  0823               	movf	??_strcat,w
  4999  07B6  07A4               	addwf	strcat@cp,f
  5000  07B7  3001               	movlw	1
  5001  07B8  07A1               	addwf	strcat@from,f
  5002  07B9  3000               	movlw	0
  5003  07BA  3DA2               	addwfc	strcat@from+1,f
  5004  07BB                     l2151:	
  5005  07BB  0824               	movf	strcat@cp,w
  5006  07BC  0086               	movwf	6
  5007  07BD  0187               	clrf	7
  5008  07BE  0821               	movf	strcat@from,w
  5009  07BF  0084               	movwf	4
  5010  07C0  0822               	movf	strcat@from+1,w
  5011  07C1  0085               	movwf	5
  5012  07C2  0800               	movf	0,w	;code access
  5013  07C3  3FC0               	movwi [0]fsr1
  5014  07C4  0889               	movf	9,f
  5015  07C5  1903               	btfsc	3,2
  5016  07C6  0008               	return
  5017  07C7  2FB3               	goto	l2147
  5018  07C8                     __end_of_strcat:	
  5019                           ;	Return value of _strcat is never used
  5020                           
  5021                           
  5022                           	psect	text13
  5023  0EB1                     __ptext13:	
  5024 ;; *************** function _memset *****************
  5025 ;; Defined at:
  5026 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;  p1              2    1[BANK0 ] PTR void 
  5029 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5030 ;;  c               2    3[BANK0 ] int 
  5031 ;;  n               2    5[BANK0 ] unsigned int 
  5032 ;; Auto vars:     Size  Location     Type
  5033 ;;  p               2    7[BANK0 ] PTR unsigned char 
  5034 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5035 ;; Return value:  Size  Location     Type
  5036 ;;                  2    1[BANK0 ] PTR void 
  5037 ;; Registers used:
  5038 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5039 ;; Tracked objects:
  5040 ;;		On entry : 0/0
  5041 ;;		On exit  : 0/0
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5044 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5045 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5047 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5048 ;;Total ram usage:        8 bytes
  5049 ;; Hardware stack levels used:    1
  5050 ;; Hardware stack levels required when called:    7
  5051 ;; This function calls:
  5052 ;;		Nothing
  5053 ;; This function is called by:
  5054 ;;		_setMessage
  5055 ;; This function uses a non-reentrant model
  5056 ;;
  5057                           
  5058                           
  5059                           ;psect for function _memset
  5060  0EB1                     _memset:	
  5061                           
  5062                           ;incstack = 0
  5063                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  5064  0EB1  0020               	movlb	0	; select bank0
  5065  0EB2  0822               	movf	memset@p1+1,w
  5066  0EB3  00A8               	movwf	memset@p+1
  5067  0EB4  0821               	movf	memset@p1,w
  5068  0EB5  00A7               	movwf	memset@p
  5069  0EB6                     l2915:	
  5070  0EB6  3001               	movlw	1
  5071  0EB7  02A5               	subwf	memset@n,f
  5072  0EB8  3000               	movlw	0
  5073  0EB9  3BA6               	subwfb	memset@n+1,f
  5074  0EBA  0A25               	incf	memset@n,w
  5075  0EBB  1903               	btfsc	3,2
  5076  0EBC  0A26               	incf	memset@n+1,w
  5077  0EBD  1903               	btfsc	3,2
  5078  0EBE  0008               	return
  5079  0EBF  0827               	movf	memset@p,w
  5080  0EC0  0086               	movwf	6
  5081  0EC1  0828               	movf	memset@p+1,w
  5082  0EC2  0087               	movwf	7
  5083  0EC3  0823               	movf	memset@c,w
  5084  0EC4  0081               	movwf	1
  5085  0EC5  3001               	movlw	1
  5086  0EC6  07A7               	addwf	memset@p,f
  5087  0EC7  3000               	movlw	0
  5088  0EC8  3DA8               	addwfc	memset@p+1,f
  5089  0EC9  2EB6               	goto	l2915
  5090  0ECA                     __end_of_memset:	
  5091                           ;	Return value of _memset is never used
  5092                           
  5093                           
  5094                           	psect	text14
  5095  01DC                     __ptext14:	
  5096 ;; *************** function _nrf24l01SendPacket *****************
  5097 ;; Defined at:
  5098 ;;		line 170 in file "nrf24l01.c"
  5099 ;; Parameters:    Size  Location     Type
  5100 ;;  Packet          1    wreg     PTR struct .
  5101 ;;		 -> main@packet(33), loop@packet(33), 
  5102 ;; Auto vars:     Size  Location     Type
  5103 ;;  Packet          1   11[BANK0 ] PTR struct .
  5104 ;;		 -> main@packet(33), loop@packet(33), 
  5105 ;;  i               1   12[BANK0 ] unsigned char 
  5106 ;; Return value:  Size  Location     Type
  5107 ;;                  1    wreg      void 
  5108 ;; Registers used:
  5109 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5110 ;; Tracked objects:
  5111 ;;		On entry : 0/0
  5112 ;;		On exit  : 0/0
  5113 ;;		Unchanged: 0/0
  5114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5116 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5117 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5118 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5119 ;;Total ram usage:        4 bytes
  5120 ;; Hardware stack levels used:    1
  5121 ;; Hardware stack levels required when called:   11
  5122 ;; This function calls:
  5123 ;;		_enableInterrupts
  5124 ;;		_nrf24l01CEHigh
  5125 ;;		_nrf24l01CELow
  5126 ;;		_nrf24l01ChangeTXPower
  5127 ;;		_nrf24l01SPIEnd
  5128 ;;		_nrf24l01SPISend
  5129 ;;		_nrf24l01SPIStart
  5130 ;;		_nrf24l01SetRXMode
  5131 ;;		_strlen
  5132 ;; This function is called by:
  5133 ;;		_loop
  5134 ;;		_main
  5135 ;;		_nrf24l01SendACK
  5136 ;; This function uses a non-reentrant model
  5137 ;;
  5138                           
  5139                           
  5140                           ;psect for function _nrf24l01SendPacket
  5141  01DC                     _nrf24l01SendPacket:	
  5142                           
  5143                           ;incstack = 0
  5144                           ; Regs used in _nrf24l01SendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5145                           ;nrf24l01SendPacket@Packet stored from wreg
  5146  01DC  0020               	movlb	0	; select bank0
  5147  01DD  00AB               	movwf	nrf24l01SendPacket@Packet
  5148                           
  5149                           ;nrf24l01.c: 172: TXPacket = Packet;
  5150  01DE  082B               	movf	nrf24l01SendPacket@Packet,w
  5151  01DF  00A9               	movwf	??_nrf24l01SendPacket
  5152  01E0  0829               	movf	??_nrf24l01SendPacket,w
  5153  01E1  00D9               	movwf	_TXPacket
  5154  01E2                     l324:	
  5155                           ;nrf24l01.c: 175: unsigned char i;;nrf24l01.c: 179: RESEND:
  5156                           
  5157                           
  5158                           ;nrf24l01.c: 182: i = 0xFF;
  5159  01E2  30FF               	movlw	255
  5160  01E3  00A9               	movwf	??_nrf24l01SendPacket
  5161  01E4  0829               	movf	??_nrf24l01SendPacket,w
  5162  01E5  00AC               	movwf	nrf24l01SendPacket@i
  5163  01E6                     l2447:	
  5164                           ;nrf24l01.c: 183: while (nrf24l01.TXBusy){
  5165                           
  5166  01E6  0020               	movlb	0	; select bank0
  5167  01E7  1C5B               	btfss	_nrf24l01,0	;volatile
  5168  01E8  29F2               	goto	l328
  5169                           
  5170                           ;nrf24l01.c: 184: if (!--i) {
  5171  01E9  3001               	movlw	1
  5172  01EA  02AC               	subwf	nrf24l01SendPacket@i,f
  5173  01EB  1903               	btfsc	3,2
  5174  01EC  29E2               	goto	l324
  5175                           
  5176                           ;nrf24l01.c: 186: };nrf24l01.c: 187: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  5177                           
  5178                           ;nrf24l01.c: 185: goto RESEND;
  5179  01ED  3085               	movlw	133
  5180  01EE                     u1727:	
  5181  01EE  0B89               	decfsz	9,f
  5182  01EF  29EE               	goto	u1727
  5183  01F0  0000               	nop
  5184  01F1  29E6               	goto	l2447
  5185  01F2                     l328:	
  5186                           
  5187                           ;nrf24l01.c: 188: };nrf24l01.c: 191: nrf24l01.TXBusy = 1;
  5188  01F2  145B               	bsf	_nrf24l01,0	;volatile
  5189                           
  5190                           ;nrf24l01.c: 194: enableInterrupts(0);
  5191  01F3  3000               	movlw	0
  5192  01F4  318E  2650  3181   	fcall	_enableInterrupts
  5193                           
  5194                           ;nrf24l01.c: 197: nrf24l01SetRXMode(0);
  5195  01F7  3000               	movlw	0
  5196  01F8  3186  261A  3181   	fcall	_nrf24l01SetRXMode
  5197                           
  5198                           ;nrf24l01.c: 200: nrf24l01SPIStart();
  5199  01FB  318E  2658  3181   	fcall	_nrf24l01SPIStart
  5200                           
  5201                           ;nrf24l01.c: 203: nrf24l01SPISend(0b10110000);
  5202  01FE  30B0               	movlw	176
  5203  01FF  318E  2660  3181   	fcall	_nrf24l01SPISend
  5204                           
  5205                           ;nrf24l01.c: 205: nrf24l01SPISend(TXPacket->packetData.byte);
  5206  0202  0020               	movlb	0	; select bank0
  5207  0203  0859               	movf	_TXPacket,w
  5208  0204  0086               	movwf	6
  5209  0205  0187               	clrf	7
  5210  0206  0801               	movf	1,w
  5211  0207  318E  2660  3181   	fcall	_nrf24l01SPISend
  5212                           
  5213                           ;nrf24l01.c: 208: for (i = 0; (i < strlen(TXPacket->Message)) && (i < sizeof(TXPacket->M
      +                          essage)); i++){
  5214  020A  0020               	movlb	0	; select bank0
  5215  020B  01AC               	clrf	nrf24l01SendPacket@i
  5216  020C  2A1D               	goto	l2459
  5217  020D                     l2455:	
  5218                           
  5219                           ;nrf24l01.c: 209: nrf24l01SPISend(TXPacket->Message[i]);
  5220  020D  082C               	movf	nrf24l01SendPacket@i,w
  5221  020E  3E01               	addlw	1
  5222  020F  0759               	addwf	_TXPacket,w
  5223  0210  00A9               	movwf	??_nrf24l01SendPacket
  5224  0211  0829               	movf	??_nrf24l01SendPacket,w
  5225  0212  0086               	movwf	6
  5226  0213  0187               	clrf	7
  5227  0214  0801               	movf	1,w
  5228  0215  318E  2660  3181   	fcall	_nrf24l01SPISend
  5229  0218  3001               	movlw	1
  5230  0219  0020               	movlb	0	; select bank0
  5231  021A  00A9               	movwf	??_nrf24l01SendPacket
  5232  021B  0829               	movf	??_nrf24l01SendPacket,w
  5233  021C  07AC               	addwf	nrf24l01SendPacket@i,f
  5234  021D                     l2459:	
  5235  021D  0859               	movf	_TXPacket,w
  5236  021E  3E01               	addlw	1
  5237  021F  318F  27DB  3181   	fcall	_strlen
  5238  0222  0020               	movlb	0	; select bank0
  5239  0223  082C               	movf	nrf24l01SendPacket@i,w
  5240  0224  00A9               	movwf	??_nrf24l01SendPacket
  5241  0225  01AA               	clrf	??_nrf24l01SendPacket+1
  5242  0226  0822               	movf	?_strlen+1,w
  5243  0227  022A               	subwf	??_nrf24l01SendPacket+1,w
  5244  0228  1D03               	skipz
  5245  0229  2A2C               	goto	u1315
  5246  022A  0821               	movf	?_strlen,w
  5247  022B  0229               	subwf	??_nrf24l01SendPacket,w
  5248  022C                     u1315:	
  5249  022C  1803               	skipnc
  5250  022D  2A32               	goto	l2463
  5251  022E  3020               	movlw	32
  5252  022F  022C               	subwf	nrf24l01SendPacket@i,w
  5253  0230  1C03               	skipc
  5254  0231  2A0D               	goto	l2455
  5255  0232                     l2463:	
  5256                           
  5257                           ;nrf24l01.c: 210: };nrf24l01.c: 213: nrf24l01SPIEnd();
  5258  0232  318E  2649  3181   	fcall	_nrf24l01SPIEnd
  5259                           
  5260                           ;nrf24l01.c: 216: nrf24l01CEHigh();
  5261  0235  318E  2637  3181   	fcall	_nrf24l01CEHigh
  5262                           
  5263                           ;nrf24l01.c: 217: _delay((unsigned long)((20)*(16000000/4000000.0)));
  5264  0238  301A               	movlw	26
  5265  0239                     u1737:	
  5266  0239  0B89               	decfsz	9,f
  5267  023A  2A39               	goto	u1737
  5268  023B  3200               	nop2
  5269                           
  5270                           ;nrf24l01.c: 218: nrf24l01CELow();
  5271  023C  318E  263A  3181   	fcall	_nrf24l01CELow
  5272                           
  5273                           ;nrf24l01.c: 221: enableInterrupts(1);
  5274  023F  3001               	movlw	1
  5275  0240  318E  2650  3181   	fcall	_enableInterrupts
  5276                           
  5277                           ;nrf24l01.c: 224: i = 0xFF;
  5278  0243  30FF               	movlw	255
  5279  0244  0020               	movlb	0	; select bank0
  5280  0245  00A9               	movwf	??_nrf24l01SendPacket
  5281  0246  0829               	movf	??_nrf24l01SendPacket,w
  5282  0247  00AC               	movwf	nrf24l01SendPacket@i
  5283  0248                     l2481:	
  5284                           ;nrf24l01.c: 225: while (nrf24l01.TXBusy){
  5285                           
  5286  0248  0020               	movlb	0	; select bank0
  5287  0249  1C5B               	btfss	_nrf24l01,0	;volatile
  5288  024A  2A5F               	goto	l2483
  5289                           
  5290                           ;nrf24l01.c: 226: if (!--i) {
  5291  024B  3001               	movlw	1
  5292  024C  02AC               	subwf	nrf24l01SendPacket@i,f
  5293  024D  1903               	btfsc	3,2
  5294  024E  29E2               	goto	l324
  5295                           
  5296                           ;nrf24l01.c: 228: };nrf24l01.c: 229: if (i > 128){
  5297                           
  5298                           ;nrf24l01.c: 227: goto RESEND;
  5299  024F  3081               	movlw	129
  5300  0250  022C               	subwf	nrf24l01SendPacket@i,w
  5301  0251  1C03               	skipc
  5302  0252  2A5A               	goto	l2479
  5303                           
  5304                           ;nrf24l01.c: 230: nrf24l01ChangeTXPower(1);
  5305  0253  3001               	movlw	1
  5306  0254  00A4               	movwf	nrf24l01ChangeTXPower@addPower
  5307  0255  3000               	movlw	0
  5308  0256  00A5               	movwf	nrf24l01ChangeTXPower@addPower+1
  5309  0257  3185  259F  3181   	fcall	_nrf24l01ChangeTXPower
  5310  025A                     l2479:	
  5311                           
  5312                           ;nrf24l01.c: 231: };nrf24l01.c: 232: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  5313  025A  3085               	movlw	133
  5314  025B                     u1747:	
  5315  025B  0B89               	decfsz	9,f
  5316  025C  2A5B               	goto	u1747
  5317  025D  0000               	nop
  5318  025E  2A48               	goto	l2481
  5319  025F                     l2483:	
  5320                           
  5321                           ;nrf24l01.c: 233: };nrf24l01.c: 237: i = 0xFF;
  5322  025F  30FF               	movlw	255
  5323  0260  00A9               	movwf	??_nrf24l01SendPacket
  5324  0261  0829               	movf	??_nrf24l01SendPacket,w
  5325  0262  00AC               	movwf	nrf24l01SendPacket@i
  5326  0263                     l2491:	
  5327                           ;nrf24l01.c: 238: while (TXPacket->packetData.ACKRequest){
  5328                           
  5329  0263  0020               	movlb	0	; select bank0
  5330  0264  0859               	movf	_TXPacket,w
  5331  0265  0086               	movwf	6
  5332  0266  0187               	clrf	7
  5333  0267  1D01               	btfss	1,2
  5334  0268  0008               	return
  5335                           
  5336                           ;nrf24l01.c: 239: if (!--i) {
  5337  0269  3001               	movlw	1
  5338  026A  02AC               	subwf	nrf24l01SendPacket@i,f
  5339  026B  1903               	btfsc	3,2
  5340  026C  29E2               	goto	l324
  5341                           
  5342                           ;nrf24l01.c: 241: };nrf24l01.c: 242: _delay((unsigned long)((40)*(16000000/4000000.0)));
  5343                           
  5344                           ;nrf24l01.c: 240: goto RESEND;
  5345  026D  3035               	movlw	53
  5346  026E                     u1757:	
  5347  026E  0B89               	decfsz	9,f
  5348  026F  2A6E               	goto	u1757
  5349  0270  0000               	nop
  5350  0271  2A63               	goto	l2491
  5351  0272                     __end_of_nrf24l01SendPacket:	
  5352                           
  5353                           	psect	text15
  5354  0FDB                     __ptext15:	
  5355 ;; *************** function _strlen *****************
  5356 ;; Defined at:
  5357 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;  s               1    wreg     PTR const unsigned char 
  5360 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5361 ;;		 -> loop@packet(33), 
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;  s               1    8[BANK0 ] PTR const unsigned char 
  5364 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5365 ;;		 -> loop@packet(33), 
  5366 ;;  cp              1    7[BANK0 ] PTR const unsigned char 
  5367 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5368 ;;		 -> loop@packet(33), 
  5369 ;; Return value:  Size  Location     Type
  5370 ;;                  2    1[BANK0 ] unsigned int 
  5371 ;; Registers used:
  5372 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5373 ;; Tracked objects:
  5374 ;;		On entry : 0/0
  5375 ;;		On exit  : 0/0
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5378 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5379 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5380 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5381 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5382 ;;Total ram usage:        8 bytes
  5383 ;; Hardware stack levels used:    1
  5384 ;; Hardware stack levels required when called:    7
  5385 ;; This function calls:
  5386 ;;		Nothing
  5387 ;; This function is called by:
  5388 ;;		_nrf24l01SendPacket
  5389 ;;		_nrf24l01GetPipe
  5390 ;; This function uses a non-reentrant model
  5391 ;;
  5392                           
  5393                           
  5394                           ;psect for function _strlen
  5395  0FDB                     _strlen:	
  5396                           
  5397                           ;incstack = 0
  5398                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5399                           ;strlen@s stored from wreg
  5400  0FDB  0020               	movlb	0	; select bank0
  5401  0FDC  00A8               	movwf	strlen@s
  5402  0FDD  0828               	movf	strlen@s,w
  5403  0FDE  00A3               	movwf	??_strlen
  5404  0FDF  0823               	movf	??_strlen,w
  5405  0FE0  00A7               	movwf	strlen@cp
  5406  0FE1                     l1957:	
  5407  0FE1  0827               	movf	strlen@cp,w
  5408  0FE2  0086               	movwf	6
  5409  0FE3  0187               	clrf	7
  5410  0FE4  0801               	movf	1,w
  5411  0FE5  1903               	btfsc	3,2
  5412  0FE6  2FEC               	goto	l1959
  5413  0FE7  3001               	movlw	1
  5414  0FE8  00A3               	movwf	??_strlen
  5415  0FE9  0823               	movf	??_strlen,w
  5416  0FEA  07A7               	addwf	strlen@cp,f
  5417  0FEB  2FE1               	goto	l1957
  5418  0FEC                     l1959:	
  5419  0FEC  0828               	movf	strlen@s,w
  5420  0FED  00A3               	movwf	??_strlen
  5421  0FEE  3000               	movlw	0
  5422  0FEF  00A4               	movwf	??_strlen+1
  5423  0FF0  09A3               	comf	??_strlen,f
  5424  0FF1  09A4               	comf	??_strlen+1,f
  5425  0FF2  0AA3               	incf	??_strlen,f
  5426  0FF3  1903               	skipnz
  5427  0FF4  0AA4               	incf	??_strlen+1,f
  5428  0FF5  0827               	movf	strlen@cp,w
  5429  0FF6  00A5               	movwf	??_strlen+2
  5430  0FF7  3000               	movlw	0
  5431  0FF8  00A6               	movwf	??_strlen+3
  5432  0FF9  0823               	movf	??_strlen,w
  5433  0FFA  0725               	addwf	??_strlen+2,w
  5434  0FFB  00A1               	movwf	?_strlen
  5435  0FFC  0824               	movf	??_strlen+1,w
  5436  0FFD  3D26               	addwfc	??_strlen+3,w
  5437  0FFE  00A2               	movwf	?_strlen+1
  5438  0FFF  0008               	return
  5439  1000                     __end_of_strlen:	
  5440                           
  5441                           	psect	text16
  5442  061A                     __ptext16:	
  5443 ;; *************** function _nrf24l01SetRXMode *****************
  5444 ;; Defined at:
  5445 ;;		line 54 in file "nrf24l01.c"
  5446 ;; Parameters:    Size  Location     Type
  5447 ;;  rxMode          1    wreg     unsigned char 
  5448 ;; Auto vars:     Size  Location     Type
  5449 ;;  rxMode          1    6[BANK0 ] unsigned char 
  5450 ;;  config          1    5[BANK0 ] struct .
  5451 ;; Return value:  Size  Location     Type
  5452 ;;                  1    wreg      void 
  5453 ;; Registers used:
  5454 ;;		wreg, status,2, status,0, pclath, cstack
  5455 ;; Tracked objects:
  5456 ;;		On entry : 0/0
  5457 ;;		On exit  : 0/0
  5458 ;;		Unchanged: 0/0
  5459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5461 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5462 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5463 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5464 ;;Total ram usage:        3 bytes
  5465 ;; Hardware stack levels used:    1
  5466 ;; Hardware stack levels required when called:   10
  5467 ;; This function calls:
  5468 ;;		_nrf24l01CEHigh
  5469 ;;		_nrf24l01CELow
  5470 ;;		_nrf24l01Send
  5471 ;; This function is called by:
  5472 ;;		_nrf24l01SendPacket
  5473 ;;		_checkRxData
  5474 ;; This function uses a non-reentrant model
  5475 ;;
  5476                           
  5477                           
  5478                           ;psect for function _nrf24l01SetRXMode
  5479  061A                     _nrf24l01SetRXMode:	
  5480                           
  5481                           ;incstack = 0
  5482                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  5483                           ;nrf24l01SetRXMode@rxMode stored from wreg
  5484  061A  0020               	movlb	0	; select bank0
  5485  061B  00A6               	movwf	nrf24l01SetRXMode@rxMode
  5486                           
  5487                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send(0b0000000
      +                          0 | 0x00, 0);
  5488  061C  01A1               	clrf	nrf24l01Send@data
  5489  061D  3000               	movlw	0
  5490  061E  318F  2777  3186   	fcall	_nrf24l01Send
  5491  0621  0020               	movlb	0	; select bank0
  5492  0622  00A4               	movwf	??_nrf24l01SetRXMode
  5493  0623  0824               	movf	??_nrf24l01SetRXMode,w
  5494  0624  00A5               	movwf	nrf24l01SetRXMode@config
  5495                           
  5496                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  5497  0625  0825               	movf	nrf24l01SetRXMode@config,w
  5498  0626  3901               	andlw	1
  5499  0627  0626               	xorwf	nrf24l01SetRXMode@rxMode,w
  5500  0628  1903               	skipnz
  5501  0629  2E4E               	goto	l2131
  5502                           
  5503                           ;nrf24l01.c: 65: nrf24l01CELow();
  5504  062A  318E  263A  3186   	fcall	_nrf24l01CELow
  5505                           
  5506                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5507  062D  30A0               	movlw	160
  5508  062E                     u1767:	
  5509  062E  3200               	nop2
  5510  062F  0B89               	decfsz	9,f
  5511  0630  2E2E               	goto	u1767
  5512                           
  5513                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  5514  0631  0020               	movlb	0	; select bank0
  5515  0632  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5516  0633  3901               	andlw	1
  5517  0634  1025               	bcf	nrf24l01SetRXMode@config,0
  5518  0635  1D03               	skipz
  5519  0636  1425               	bsf	nrf24l01SetRXMode@config,0
  5520                           
  5521                           ;nrf24l01.c: 70: nrf24l01Send(0b00100000 | 0x00, config.byte);
  5522  0637  0825               	movf	nrf24l01SetRXMode@config,w
  5523  0638  00A4               	movwf	??_nrf24l01SetRXMode
  5524  0639  0824               	movf	??_nrf24l01SetRXMode,w
  5525  063A  00A1               	movwf	nrf24l01Send@data
  5526  063B  3020               	movlw	32
  5527  063C  318F  2777  3186   	fcall	_nrf24l01Send
  5528                           
  5529                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5530  063F  30A0               	movlw	160
  5531  0640                     u1777:	
  5532  0640  3200               	nop2
  5533  0641  0B89               	decfsz	9,f
  5534  0642  2E40               	goto	u1777
  5535                           
  5536                           ;nrf24l01.c: 76: if (rxMode){
  5537  0643  0020               	movlb	0	; select bank0
  5538  0644  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5539  0645  1903               	btfsc	3,2
  5540  0646  2E4E               	goto	l2131
  5541                           
  5542                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  5543  0647  318E  2637  3186   	fcall	_nrf24l01CEHigh
  5544                           
  5545                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5546  064A  30A0               	movlw	160
  5547  064B                     u1787:	
  5548  064B  3200               	nop2
  5549  064C  0B89               	decfsz	9,f
  5550  064D  2E4B               	goto	u1787
  5551  064E                     l2131:	
  5552                           
  5553                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  5554  064E  0020               	movlb	0	; select bank0
  5555  064F  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5556  0650  3901               	andlw	1
  5557  0651  115B               	bcf	_nrf24l01,2	;volatile
  5558  0652  1D03               	skipz
  5559  0653  155B               	bsf	_nrf24l01,2	;volatile
  5560  0654  0008               	return
  5561  0655                     __end_of_nrf24l01SetRXMode:	
  5562                           
  5563                           	psect	text17
  5564  0383                     __ptext17:	
  5565 ;; *************** function _getADCValue *****************
  5566 ;; Defined at:
  5567 ;;		line 23 in file "main.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;  channel         1    wreg     unsigned char 
  5570 ;;  divider         4   15[BANK0 ] unsigned long 
  5571 ;; Auto vars:     Size  Location     Type
  5572 ;;  channel         1   23[BANK0 ] unsigned char 
  5573 ;;  adcSum          4   25[BANK0 ] unsigned long 
  5574 ;;  adcLoop         1   24[BANK0 ] unsigned char 
  5575 ;; Return value:  Size  Location     Type
  5576 ;;                  4   15[BANK0 ] unsigned long 
  5577 ;; Registers used:
  5578 ;;		wreg, status,2, status,0, pclath, cstack
  5579 ;; Tracked objects:
  5580 ;;		On entry : 0/0
  5581 ;;		On exit  : 0/0
  5582 ;;		Unchanged: 0/0
  5583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5584 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5585 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5586 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5587 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5588 ;;Total ram usage:       14 bytes
  5589 ;; Hardware stack levels used:    1
  5590 ;; Hardware stack levels required when called:    8
  5591 ;; This function calls:
  5592 ;;		___lldiv
  5593 ;;		___lmul
  5594 ;; This function is called by:
  5595 ;;		_loop
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           
  5600                           ;psect for function _getADCValue
  5601  0383                     _getADCValue:	
  5602                           
  5603                           ;incstack = 0
  5604                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  5605                           ;getADCValue@channel stored from wreg
  5606  0383  0020               	movlb	0	; select bank0
  5607  0384  00B7               	movwf	getADCValue@channel
  5608                           
  5609                           ;main.c: 25: unsigned long adcSum = 0;
  5610  0385  3000               	movlw	0
  5611  0386  00BC               	movwf	getADCValue@adcSum+3
  5612  0387  3000               	movlw	0
  5613  0388  00BB               	movwf	getADCValue@adcSum+2
  5614  0389  3000               	movlw	0
  5615  038A  00BA               	movwf	getADCValue@adcSum+1
  5616  038B  3000               	movlw	0
  5617  038C  00B9               	movwf	getADCValue@adcSum
  5618                           
  5619                           ;main.c: 26: unsigned char adcLoop = 255;
  5620  038D  30FF               	movlw	255
  5621  038E  00B3               	movwf	??_getADCValue
  5622  038F  0833               	movf	??_getADCValue,w
  5623  0390  00B8               	movwf	getADCValue@adcLoop
  5624                           
  5625                           ;main.c: 28: ADCON0bits.CHS = channel;
  5626  0391  0837               	movf	getADCValue@channel,w
  5627  0392  00B3               	movwf	??_getADCValue
  5628  0393  0DB3               	rlf	??_getADCValue,f
  5629  0394  0DB3               	rlf	??_getADCValue,f
  5630  0395  0021               	movlb	1	; select bank1
  5631  0396  081D               	movf	29,w	;volatile
  5632  0397  0020               	movlb	0	; select bank0
  5633  0398  0633               	xorwf	??_getADCValue,w
  5634  0399  3903               	andlw	-253
  5635  039A  0633               	xorwf	??_getADCValue,w
  5636  039B  0021               	movlb	1	; select bank1
  5637  039C  009D               	movwf	29	;volatile
  5638                           
  5639                           ;main.c: 29: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5640  039D  30A0               	movlw	160
  5641  039E                     u1797:	
  5642  039E  3200               	nop2
  5643  039F  0B89               	decfsz	9,f
  5644  03A0  2B9E               	goto	u1797
  5645  03A1                     l2403:	
  5646                           ;main.c: 31: while (--adcLoop){
  5647                           
  5648  03A1  3001               	movlw	1
  5649  03A2  0020               	movlb	0	; select bank0
  5650  03A3  02B8               	subwf	getADCValue@adcLoop,f
  5651  03A4  1903               	btfsc	3,2
  5652  03A5  2BCB               	goto	l2405
  5653                           
  5654                           ;main.c: 33: ADCON0bits.ADGO = 1;
  5655  03A6  0021               	movlb	1	; select bank1
  5656  03A7  149D               	bsf	29,1	;volatile
  5657  03A8                     l214:	
  5658                           ;main.c: 35: while (ADCON0bits.ADGO){
  5659                           
  5660  03A8  0021               	movlb	1	; select bank1
  5661  03A9  1C9D               	btfss	29,1	;volatile
  5662  03AA  2BAD               	goto	l2401
  5663                           
  5664                           ;main.c: 36: __nop();
  5665  03AB  0000               	nop
  5666  03AC  2BA8               	goto	l214
  5667  03AD                     l2401:	
  5668                           
  5669                           ;main.c: 37: };main.c: 39: adcSum+= ADRESL;
  5670  03AD  081B               	movf	27,w	;volatile
  5671  03AE  0020               	movlb	0	; select bank0
  5672  03AF  00B3               	movwf	??_getADCValue
  5673  03B0  01B4               	clrf	??_getADCValue+1
  5674  03B1  01B5               	clrf	??_getADCValue+2
  5675  03B2  01B6               	clrf	??_getADCValue+3
  5676  03B3  0833               	movf	??_getADCValue,w
  5677  03B4  07B9               	addwf	getADCValue@adcSum,f
  5678  03B5  0834               	movf	??_getADCValue+1,w
  5679  03B6  3DBA               	addwfc	getADCValue@adcSum+1,f
  5680  03B7  0835               	movf	??_getADCValue+2,w
  5681  03B8  3DBB               	addwfc	getADCValue@adcSum+2,f
  5682  03B9  0836               	movf	??_getADCValue+3,w
  5683  03BA  3DBC               	addwfc	getADCValue@adcSum+3,f
  5684                           
  5685                           ;main.c: 40: adcSum+= (unsigned) (ADRESH << 8);
  5686  03BB  0021               	movlb	1	; select bank1
  5687  03BC  081C               	movf	28,w	;volatile
  5688  03BD  0020               	movlb	0	; select bank0
  5689  03BE  00B3               	movwf	??_getADCValue
  5690  03BF  01B4               	clrf	??_getADCValue+1
  5691  03C0  0833               	movf	??_getADCValue,w
  5692  03C1  00B4               	movwf	??_getADCValue+1
  5693  03C2  01B3               	clrf	??_getADCValue
  5694  03C3  0833               	movf	??_getADCValue,w
  5695  03C4  07B9               	addwf	getADCValue@adcSum,f
  5696  03C5  0834               	movf	??_getADCValue+1,w
  5697  03C6  3DBA               	addwfc	getADCValue@adcSum+1,f
  5698  03C7  3000               	movlw	0
  5699  03C8  3DBB               	addwfc	getADCValue@adcSum+2,f
  5700  03C9  3DBC               	addwfc	getADCValue@adcSum+3,f
  5701  03CA  2BA1               	goto	l2403
  5702  03CB                     l2405:	
  5703                           
  5704                           ;main.c: 41: };main.c: 43: adcSum*= 100;
  5705  03CB  3000               	movlw	0
  5706  03CC  00A4               	movwf	___lmul@multiplier+3
  5707  03CD  3000               	movlw	0
  5708  03CE  00A3               	movwf	___lmul@multiplier+2
  5709  03CF  3000               	movlw	0
  5710  03D0  00A2               	movwf	___lmul@multiplier+1
  5711  03D1  3064               	movlw	100
  5712  03D2  00A1               	movwf	___lmul@multiplier
  5713  03D3  083C               	movf	getADCValue@adcSum+3,w
  5714  03D4  00A8               	movwf	___lmul@multiplicand+3
  5715  03D5  083B               	movf	getADCValue@adcSum+2,w
  5716  03D6  00A7               	movwf	___lmul@multiplicand+2
  5717  03D7  083A               	movf	getADCValue@adcSum+1,w
  5718  03D8  00A6               	movwf	___lmul@multiplicand+1
  5719  03D9  0839               	movf	getADCValue@adcSum,w
  5720  03DA  00A5               	movwf	___lmul@multiplicand
  5721  03DB  3186  26F4  3183   	fcall	___lmul
  5722  03DE  0020               	movlb	0	; select bank0
  5723  03DF  0824               	movf	?___lmul+3,w
  5724  03E0  00BC               	movwf	getADCValue@adcSum+3
  5725  03E1  0823               	movf	?___lmul+2,w
  5726  03E2  00BB               	movwf	getADCValue@adcSum+2
  5727  03E3  0822               	movf	?___lmul+1,w
  5728  03E4  00BA               	movwf	getADCValue@adcSum+1
  5729  03E5  0821               	movf	?___lmul,w
  5730  03E6  00B9               	movwf	getADCValue@adcSum
  5731                           
  5732                           ;main.c: 44: adcSum/= divider;
  5733  03E7  0832               	movf	getADCValue@divider+3,w
  5734  03E8  00A4               	movwf	___lldiv@divisor+3
  5735  03E9  0831               	movf	getADCValue@divider+2,w
  5736  03EA  00A3               	movwf	___lldiv@divisor+2
  5737  03EB  0830               	movf	getADCValue@divider+1,w
  5738  03EC  00A2               	movwf	___lldiv@divisor+1
  5739  03ED  082F               	movf	getADCValue@divider,w
  5740  03EE  00A1               	movwf	___lldiv@divisor
  5741  03EF  083C               	movf	getADCValue@adcSum+3,w
  5742  03F0  00A8               	movwf	___lldiv@dividend+3
  5743  03F1  083B               	movf	getADCValue@adcSum+2,w
  5744  03F2  00A7               	movwf	___lldiv@dividend+2
  5745  03F3  083A               	movf	getADCValue@adcSum+1,w
  5746  03F4  00A6               	movwf	___lldiv@dividend+1
  5747  03F5  0839               	movf	getADCValue@adcSum,w
  5748  03F6  00A5               	movwf	___lldiv@dividend
  5749  03F7  3184  24B8         	fcall	___lldiv
  5750  03F9  0020               	movlb	0	; select bank0
  5751  03FA  0824               	movf	?___lldiv+3,w
  5752  03FB  00BC               	movwf	getADCValue@adcSum+3
  5753  03FC  0823               	movf	?___lldiv+2,w
  5754  03FD  00BB               	movwf	getADCValue@adcSum+2
  5755  03FE  0822               	movf	?___lldiv+1,w
  5756  03FF  00BA               	movwf	getADCValue@adcSum+1
  5757  0400  0821               	movf	?___lldiv,w
  5758  0401  00B9               	movwf	getADCValue@adcSum
  5759                           
  5760                           ;main.c: 46: return adcSum;
  5761  0402  083C               	movf	getADCValue@adcSum+3,w
  5762  0403  00B2               	movwf	?_getADCValue+3
  5763  0404  083B               	movf	getADCValue@adcSum+2,w
  5764  0405  00B1               	movwf	?_getADCValue+2
  5765  0406  083A               	movf	getADCValue@adcSum+1,w
  5766  0407  00B0               	movwf	?_getADCValue+1
  5767  0408  0839               	movf	getADCValue@adcSum,w
  5768  0409  00AF               	movwf	?_getADCValue
  5769  040A  0008               	return
  5770  040B                     __end_of_getADCValue:	
  5771                           
  5772                           	psect	text18
  5773  06F4                     __ptext18:	
  5774 ;; *************** function ___lmul *****************
  5775 ;; Defined at:
  5776 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
  5777 ;; Parameters:    Size  Location     Type
  5778 ;;  multiplier      4    1[BANK0 ] unsigned long 
  5779 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  5780 ;; Auto vars:     Size  Location     Type
  5781 ;;  product         4    9[BANK0 ] unsigned long 
  5782 ;; Return value:  Size  Location     Type
  5783 ;;                  4    1[BANK0 ] unsigned long 
  5784 ;; Registers used:
  5785 ;;		wreg, status,2, status,0
  5786 ;; Tracked objects:
  5787 ;;		On entry : 0/0
  5788 ;;		On exit  : 0/0
  5789 ;;		Unchanged: 0/0
  5790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5791 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5792 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5794 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5795 ;;Total ram usage:       12 bytes
  5796 ;; Hardware stack levels used:    1
  5797 ;; Hardware stack levels required when called:    7
  5798 ;; This function calls:
  5799 ;;		Nothing
  5800 ;; This function is called by:
  5801 ;;		_getADCValue
  5802 ;; This function uses a non-reentrant model
  5803 ;;
  5804                           
  5805                           
  5806                           ;psect for function ___lmul
  5807  06F4                     ___lmul:	
  5808                           
  5809                           ;incstack = 0
  5810                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5811  06F4  3000               	movlw	0
  5812  06F5  0020               	movlb	0	; select bank0
  5813  06F6  00AC               	movwf	___lmul@product+3
  5814  06F7  3000               	movlw	0
  5815  06F8  00AB               	movwf	___lmul@product+2
  5816  06F9  3000               	movlw	0
  5817  06FA  00AA               	movwf	___lmul@product+1
  5818  06FB  3000               	movlw	0
  5819  06FC  00A9               	movwf	___lmul@product
  5820  06FD                     l2241:	
  5821  06FD  1C21               	btfss	___lmul@multiplier,0
  5822  06FE  2F07               	goto	l2245
  5823  06FF  0825               	movf	___lmul@multiplicand,w
  5824  0700  07A9               	addwf	___lmul@product,f
  5825  0701  0826               	movf	___lmul@multiplicand+1,w
  5826  0702  3DAA               	addwfc	___lmul@product+1,f
  5827  0703  0827               	movf	___lmul@multiplicand+2,w
  5828  0704  3DAB               	addwfc	___lmul@product+2,f
  5829  0705  0828               	movf	___lmul@multiplicand+3,w
  5830  0706  3DAC               	addwfc	___lmul@product+3,f
  5831  0707                     l2245:	
  5832  0707  3001               	movlw	1
  5833  0708                     u1165:	
  5834  0708  35A5               	lslf	___lmul@multiplicand,f
  5835  0709  0DA6               	rlf	___lmul@multiplicand+1,f
  5836  070A  0DA7               	rlf	___lmul@multiplicand+2,f
  5837  070B  0DA8               	rlf	___lmul@multiplicand+3,f
  5838  070C  0B89               	decfsz	9,f
  5839  070D  2F08               	goto	u1165
  5840  070E  3001               	movlw	1
  5841  070F                     u1175:	
  5842  070F  36A4               	lsrf	___lmul@multiplier+3,f
  5843  0710  0CA3               	rrf	___lmul@multiplier+2,f
  5844  0711  0CA2               	rrf	___lmul@multiplier+1,f
  5845  0712  0CA1               	rrf	___lmul@multiplier,f
  5846  0713  0B89               	decfsz	9,f
  5847  0714  2F0F               	goto	u1175
  5848  0715  0824               	movf	___lmul@multiplier+3,w
  5849  0716  0423               	iorwf	___lmul@multiplier+2,w
  5850  0717  0422               	iorwf	___lmul@multiplier+1,w
  5851  0718  0421               	iorwf	___lmul@multiplier,w
  5852  0719  1D03               	skipz
  5853  071A  2EFD               	goto	l2241
  5854  071B  082C               	movf	___lmul@product+3,w
  5855  071C  00A4               	movwf	?___lmul+3
  5856  071D  082B               	movf	___lmul@product+2,w
  5857  071E  00A3               	movwf	?___lmul+2
  5858  071F  082A               	movf	___lmul@product+1,w
  5859  0720  00A2               	movwf	?___lmul+1
  5860  0721  0829               	movf	___lmul@product,w
  5861  0722  00A1               	movwf	?___lmul
  5862  0723  0008               	return
  5863  0724                     __end_of___lmul:	
  5864                           
  5865                           	psect	text19
  5866  04B8                     __ptext19:	
  5867 ;; *************** function ___lldiv *****************
  5868 ;; Defined at:
  5869 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  5870 ;; Parameters:    Size  Location     Type
  5871 ;;  divisor         4    1[BANK0 ] unsigned long 
  5872 ;;  dividend        4    5[BANK0 ] unsigned long 
  5873 ;; Auto vars:     Size  Location     Type
  5874 ;;  quotient        4   10[BANK0 ] unsigned long 
  5875 ;;  counter         1   14[BANK0 ] unsigned char 
  5876 ;; Return value:  Size  Location     Type
  5877 ;;                  4    1[BANK0 ] unsigned long 
  5878 ;; Registers used:
  5879 ;;		wreg, status,2, status,0
  5880 ;; Tracked objects:
  5881 ;;		On entry : 0/0
  5882 ;;		On exit  : 0/0
  5883 ;;		Unchanged: 0/0
  5884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5885 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5886 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5887 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5888 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5889 ;;Total ram usage:       14 bytes
  5890 ;; Hardware stack levels used:    1
  5891 ;; Hardware stack levels required when called:    7
  5892 ;; This function calls:
  5893 ;;		Nothing
  5894 ;; This function is called by:
  5895 ;;		_getADCValue
  5896 ;;		_ultoa
  5897 ;; This function uses a non-reentrant model
  5898 ;;
  5899                           
  5900                           
  5901                           ;psect for function ___lldiv
  5902  04B8                     ___lldiv:	
  5903                           
  5904                           ;incstack = 0
  5905                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5906  04B8  3000               	movlw	0
  5907  04B9  0020               	movlb	0	; select bank0
  5908  04BA  00AD               	movwf	___lldiv@quotient+3
  5909  04BB  3000               	movlw	0
  5910  04BC  00AC               	movwf	___lldiv@quotient+2
  5911  04BD  3000               	movlw	0
  5912  04BE  00AB               	movwf	___lldiv@quotient+1
  5913  04BF  3000               	movlw	0
  5914  04C0  00AA               	movwf	___lldiv@quotient
  5915  04C1  0824               	movf	___lldiv@divisor+3,w
  5916  04C2  0423               	iorwf	___lldiv@divisor+2,w
  5917  04C3  0422               	iorwf	___lldiv@divisor+1,w
  5918  04C4  0421               	iorwf	___lldiv@divisor,w
  5919  04C5  1903               	skipnz
  5920  04C6  2D02               	goto	l2037
  5921  04C7  01AE               	clrf	___lldiv@counter
  5922  04C8  0AAE               	incf	___lldiv@counter,f
  5923  04C9                     l2023:	
  5924  04C9  1BA4               	btfsc	___lldiv@divisor+3,7
  5925  04CA  2CD7               	goto	l2025
  5926  04CB  3001               	movlw	1
  5927  04CC                     u895:	
  5928  04CC  35A1               	lslf	___lldiv@divisor,f
  5929  04CD  0DA2               	rlf	___lldiv@divisor+1,f
  5930  04CE  0DA3               	rlf	___lldiv@divisor+2,f
  5931  04CF  0DA4               	rlf	___lldiv@divisor+3,f
  5932  04D0  0B89               	decfsz	9,f
  5933  04D1  2CCC               	goto	u895
  5934  04D2  3001               	movlw	1
  5935  04D3  00A9               	movwf	??___lldiv
  5936  04D4  0829               	movf	??___lldiv,w
  5937  04D5  07AE               	addwf	___lldiv@counter,f
  5938  04D6  2CC9               	goto	l2023
  5939  04D7                     l2025:	
  5940  04D7  3001               	movlw	1
  5941  04D8                     u915:	
  5942  04D8  35AA               	lslf	___lldiv@quotient,f
  5943  04D9  0DAB               	rlf	___lldiv@quotient+1,f
  5944  04DA  0DAC               	rlf	___lldiv@quotient+2,f
  5945  04DB  0DAD               	rlf	___lldiv@quotient+3,f
  5946  04DC  0B89               	decfsz	9,f
  5947  04DD  2CD8               	goto	u915
  5948  04DE  0824               	movf	___lldiv@divisor+3,w
  5949  04DF  0228               	subwf	___lldiv@dividend+3,w
  5950  04E0  1D03               	skipz
  5951  04E1  2CEC               	goto	u925
  5952  04E2  0823               	movf	___lldiv@divisor+2,w
  5953  04E3  0227               	subwf	___lldiv@dividend+2,w
  5954  04E4  1D03               	skipz
  5955  04E5  2CEC               	goto	u925
  5956  04E6  0822               	movf	___lldiv@divisor+1,w
  5957  04E7  0226               	subwf	___lldiv@dividend+1,w
  5958  04E8  1D03               	skipz
  5959  04E9  2CEC               	goto	u925
  5960  04EA  0821               	movf	___lldiv@divisor,w
  5961  04EB  0225               	subwf	___lldiv@dividend,w
  5962  04EC                     u925:	
  5963  04EC  1C03               	skipc
  5964  04ED  2CF7               	goto	l2033
  5965  04EE  0821               	movf	___lldiv@divisor,w
  5966  04EF  02A5               	subwf	___lldiv@dividend,f
  5967  04F0  0822               	movf	___lldiv@divisor+1,w
  5968  04F1  3BA6               	subwfb	___lldiv@dividend+1,f
  5969  04F2  0823               	movf	___lldiv@divisor+2,w
  5970  04F3  3BA7               	subwfb	___lldiv@dividend+2,f
  5971  04F4  0824               	movf	___lldiv@divisor+3,w
  5972  04F5  3BA8               	subwfb	___lldiv@dividend+3,f
  5973  04F6  142A               	bsf	___lldiv@quotient,0
  5974  04F7                     l2033:	
  5975  04F7  3001               	movlw	1
  5976  04F8                     u935:	
  5977  04F8  36A4               	lsrf	___lldiv@divisor+3,f
  5978  04F9  0CA3               	rrf	___lldiv@divisor+2,f
  5979  04FA  0CA2               	rrf	___lldiv@divisor+1,f
  5980  04FB  0CA1               	rrf	___lldiv@divisor,f
  5981  04FC  0B89               	decfsz	9,f
  5982  04FD  2CF8               	goto	u935
  5983  04FE  3001               	movlw	1
  5984  04FF  02AE               	subwf	___lldiv@counter,f
  5985  0500  1D03               	btfss	3,2
  5986  0501  2CD7               	goto	l2025
  5987  0502                     l2037:	
  5988  0502  082D               	movf	___lldiv@quotient+3,w
  5989  0503  00A4               	movwf	?___lldiv+3
  5990  0504  082C               	movf	___lldiv@quotient+2,w
  5991  0505  00A3               	movwf	?___lldiv+2
  5992  0506  082B               	movf	___lldiv@quotient+1,w
  5993  0507  00A2               	movwf	?___lldiv+1
  5994  0508  082A               	movf	___lldiv@quotient,w
  5995  0509  00A1               	movwf	?___lldiv
  5996  050A  0008               	return
  5997  050B                     __end_of___lldiv:	
  5998                           
  5999                           	psect	text20
  6000  0E6D                     __ptext20:	
  6001 ;; *************** function _checkTXPower *****************
  6002 ;; Defined at:
  6003 ;;		line 92 in file "main.c"
  6004 ;; Parameters:    Size  Location     Type
  6005 ;;		None
  6006 ;; Auto vars:     Size  Location     Type
  6007 ;;  rxPacket        1    9[BANK0 ] PTR struct .
  6008 ;;		 -> RXPacket(33), 
  6009 ;; Return value:  Size  Location     Type
  6010 ;;                  1    wreg      void 
  6011 ;; Registers used:
  6012 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6013 ;; Tracked objects:
  6014 ;;		On entry : 0/0
  6015 ;;		On exit  : 0/0
  6016 ;;		Unchanged: 0/0
  6017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6019 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6020 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6021 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6022 ;;Total ram usage:        2 bytes
  6023 ;; Hardware stack levels used:    1
  6024 ;; Hardware stack levels required when called:   11
  6025 ;; This function calls:
  6026 ;;		_nrf24l01ChangeTXPower
  6027 ;;		_nrf24l01GetRXPacket
  6028 ;; This function is called by:
  6029 ;;		_loop
  6030 ;; This function uses a non-reentrant model
  6031 ;;
  6032                           
  6033                           
  6034                           ;psect for function _checkTXPower
  6035  0E6D                     _checkTXPower:	
  6036                           
  6037                           ;main.c: 93: nrf24l01Packet_t * rxPacket = nrf24l01GetRXPacket();
  6038                           
  6039                           ;incstack = 0
  6040                           ; Regs used in _checkTXPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6041  0E6D  3180  2002  318E   	fcall	_nrf24l01GetRXPacket
  6042  0E70  0020               	movlb	0	; select bank0
  6043  0E71  00A8               	movwf	??_checkTXPower
  6044  0E72  0828               	movf	??_checkTXPower,w
  6045  0E73  00A9               	movwf	checkTXPower@rxPacket
  6046                           
  6047                           ;main.c: 95: if (rxPacket->packetData.ACKRPD){
  6048  0E74  0829               	movf	checkTXPower@rxPacket,w
  6049  0E75  0086               	movwf	6
  6050  0E76  3001               	movlw	1	; select bank2/3
  6051  0E77  0087               	movwf	7
  6052  0E78  1C81               	btfss	1,1
  6053  0E79  0008               	return
  6054                           
  6055                           ;main.c: 96: nrf24l01ChangeTXPower(-1);
  6056  0E7A  30FF               	movlw	255
  6057  0E7B  00A4               	movwf	nrf24l01ChangeTXPower@addPower
  6058  0E7C  30FF               	movlw	255
  6059  0E7D  00A5               	movwf	nrf24l01ChangeTXPower@addPower+1
  6060  0E7E  3185  259F         	fcall	_nrf24l01ChangeTXPower
  6061  0E80  0008               	return
  6062  0E81                     __end_of_checkTXPower:	
  6063                           
  6064                           	psect	text21
  6065  0002                     __ptext21:	
  6066 ;; *************** function _nrf24l01GetRXPacket *****************
  6067 ;; Defined at:
  6068 ;;		line 129 in file "nrf24l01.c"
  6069 ;; Parameters:    Size  Location     Type
  6070 ;;		None
  6071 ;; Auto vars:     Size  Location     Type
  6072 ;;		None
  6073 ;; Return value:  Size  Location     Type
  6074 ;;                  1    wreg      PTR struct .
  6075 ;; Registers used:
  6076 ;;		wreg
  6077 ;; Tracked objects:
  6078 ;;		On entry : 0/0
  6079 ;;		On exit  : 0/0
  6080 ;;		Unchanged: 0/0
  6081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;Total ram usage:        0 bytes
  6087 ;; Hardware stack levels used:    1
  6088 ;; Hardware stack levels required when called:    7
  6089 ;; This function calls:
  6090 ;;		Nothing
  6091 ;; This function is called by:
  6092 ;;		_checkTXPower
  6093 ;; This function uses a non-reentrant model
  6094 ;;
  6095                           
  6096                           
  6097                           ;psect for function _nrf24l01GetRXPacket
  6098  0002                     _nrf24l01GetRXPacket:	
  6099                           
  6100                           ;nrf24l01.c: 130: return &RXPacket;
  6101                           
  6102                           ;incstack = 0
  6103                           ; Regs used in _nrf24l01GetRXPacket: [wreg]
  6104  0002  3040               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  6105  0003  0008               	return
  6106  0004                     __end_of_nrf24l01GetRXPacket:	
  6107                           
  6108                           	psect	text22
  6109  059F                     __ptext22:	
  6110 ;; *************** function _nrf24l01ChangeTXPower *****************
  6111 ;; Defined at:
  6112 ;;		line 33 in file "nrf24l01.c"
  6113 ;; Parameters:    Size  Location     Type
  6114 ;;  addPower        2    4[BANK0 ] int 
  6115 ;; Auto vars:     Size  Location     Type
  6116 ;;  rfSetup         1    7[BANK0 ] struct .
  6117 ;; Return value:  Size  Location     Type
  6118 ;;                  1    wreg      void 
  6119 ;; Registers used:
  6120 ;;		wreg, status,2, status,0, pclath, cstack
  6121 ;; Tracked objects:
  6122 ;;		On entry : 0/0
  6123 ;;		On exit  : 0/0
  6124 ;;		Unchanged: 0/0
  6125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6126 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6127 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6128 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6129 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6130 ;;Total ram usage:        4 bytes
  6131 ;; Hardware stack levels used:    1
  6132 ;; Hardware stack levels required when called:   10
  6133 ;; This function calls:
  6134 ;;		_nrf24l01Send
  6135 ;; This function is called by:
  6136 ;;		_checkTXPower
  6137 ;;		_nrf24l01SendPacket
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           
  6142                           ;psect for function _nrf24l01ChangeTXPower
  6143  059F                     _nrf24l01ChangeTXPower:	
  6144                           
  6145                           ;nrf24l01.c: 35: n_RF_SETUP_t rfSetup;;nrf24l01.c: 36: rfSetup.byte = nrf24l01Send(0b000
      +                          00000 | 0x06, 0);
  6146                           
  6147                           ;incstack = 0
  6148                           ; Regs used in _nrf24l01ChangeTXPower: [wreg+status,2+status,0+pclath+cstack]
  6149  059F  0020               	movlb	0	; select bank0
  6150  05A0  01A1               	clrf	nrf24l01Send@data
  6151  05A1  3006               	movlw	6
  6152  05A2  318F  2777  3185   	fcall	_nrf24l01Send
  6153  05A5  0020               	movlb	0	; select bank0
  6154  05A6  00A6               	movwf	??_nrf24l01ChangeTXPower
  6155  05A7  0826               	movf	??_nrf24l01ChangeTXPower,w
  6156  05A8  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  6157                           
  6158                           ;nrf24l01.c: 38: if (addPower > 0){
  6159  05A9  0825               	movf	nrf24l01ChangeTXPower@addPower+1,w
  6160  05AA  3A80               	xorlw	128
  6161  05AB  00A6               	movwf	??_nrf24l01ChangeTXPower
  6162  05AC  3080               	movlw	128
  6163  05AD  0226               	subwf	??_nrf24l01ChangeTXPower,w
  6164  05AE  1D03               	skipz
  6165  05AF  2DB2               	goto	u1035
  6166  05B0  3001               	movlw	1
  6167  05B1  0224               	subwf	nrf24l01ChangeTXPower@addPower,w
  6168  05B2                     u1035:	
  6169  05B2  1C03               	skipc
  6170  05B3  2DC4               	goto	l2191
  6171                           
  6172                           ;nrf24l01.c: 39: if (rfSetup.RF_PWR < 3){
  6173  05B4  0020               	movlb	0	; select bank0
  6174  05B5  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  6175  05B6  3903               	andlw	3
  6176  05B7  3A03               	xorlw	3
  6177  05B8  1903               	skipnz
  6178  05B9  2DC4               	goto	l2191
  6179                           
  6180                           ;nrf24l01.c: 40: rfSetup.RF_PWR++;
  6181  05BA  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  6182  05BB  3903               	andlw	3
  6183  05BC  00A6               	movwf	??_nrf24l01ChangeTXPower
  6184  05BD  0AA6               	incf	??_nrf24l01ChangeTXPower,f
  6185  05BE  0DA6               	rlf	??_nrf24l01ChangeTXPower,f
  6186  05BF  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  6187  05C0  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  6188  05C1  39F9               	andlw	-7
  6189  05C2  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  6190  05C3  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  6191  05C4                     l2191:	
  6192                           
  6193                           ;nrf24l01.c: 41: };nrf24l01.c: 42: };nrf24l01.c: 44: if (addPower < 0){
  6194  05C4  0020               	movlb	0	; select bank0
  6195  05C5  1FA5               	btfss	nrf24l01ChangeTXPower@addPower+1,7
  6196  05C6  2DD6               	goto	l2197
  6197                           
  6198                           ;nrf24l01.c: 45: if (rfSetup.RF_PWR > 0){
  6199  05C7  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  6200  05C8  3903               	andlw	3
  6201  05C9  3A00               	xorlw	0
  6202  05CA  1903               	skipnz
  6203  05CB  2DD6               	goto	l2197
  6204                           
  6205                           ;nrf24l01.c: 46: rfSetup.RF_PWR--;
  6206  05CC  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  6207  05CD  3903               	andlw	3
  6208  05CE  00A6               	movwf	??_nrf24l01ChangeTXPower
  6209  05CF  03A6               	decf	??_nrf24l01ChangeTXPower,f
  6210  05D0  0DA6               	rlf	??_nrf24l01ChangeTXPower,f
  6211  05D1  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  6212  05D2  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  6213  05D3  39F9               	andlw	-7
  6214  05D4  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  6215  05D5  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  6216  05D6                     l2197:	
  6217                           
  6218                           ;nrf24l01.c: 47: };nrf24l01.c: 48: };nrf24l01.c: 50: nrf24l01Send(0b00100000 | 0x06, rfS
      +                          etup.byte);
  6219  05D6  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  6220  05D7  00A6               	movwf	??_nrf24l01ChangeTXPower
  6221  05D8  0826               	movf	??_nrf24l01ChangeTXPower,w
  6222  05D9  00A1               	movwf	nrf24l01Send@data
  6223  05DA  3026               	movlw	38
  6224  05DB  318F  2777         	fcall	_nrf24l01Send
  6225  05DD  0008               	return
  6226  05DE                     __end_of_nrf24l01ChangeTXPower:	
  6227                           
  6228                           	psect	text23
  6229  0F77                     __ptext23:	
  6230 ;; *************** function _nrf24l01Send *****************
  6231 ;; Defined at:
  6232 ;;		line 9 in file "nrf24l01.c"
  6233 ;; Parameters:    Size  Location     Type
  6234 ;;  command         1    wreg     unsigned char 
  6235 ;;  data            1    1[BANK0 ] unsigned char 
  6236 ;; Auto vars:     Size  Location     Type
  6237 ;;  command         1    3[BANK0 ] unsigned char 
  6238 ;; Return value:  Size  Location     Type
  6239 ;;                  1    wreg      unsigned char 
  6240 ;; Registers used:
  6241 ;;		wreg, status,2, status,0, pclath, cstack
  6242 ;; Tracked objects:
  6243 ;;		On entry : 0/0
  6244 ;;		On exit  : 0/0
  6245 ;;		Unchanged: 0/0
  6246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6247 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6248 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6249 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6250 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6251 ;;Total ram usage:        3 bytes
  6252 ;; Hardware stack levels used:    1
  6253 ;; Hardware stack levels required when called:    9
  6254 ;; This function calls:
  6255 ;;		_enableInterrupts
  6256 ;;		_nrf24l01SPIEnd
  6257 ;;		_nrf24l01SPISend
  6258 ;;		_nrf24l01SPIStart
  6259 ;; This function is called by:
  6260 ;;		_loop
  6261 ;;		_nrf24l01ChangeTXPower
  6262 ;;		_nrf24l01SetRXMode
  6263 ;;		_nrf24l01SetRXPipe
  6264 ;;		_nrf24l01InitRegisters
  6265 ;; This function uses a non-reentrant model
  6266 ;;
  6267                           
  6268                           
  6269                           ;psect for function _nrf24l01Send
  6270  0F77                     _nrf24l01Send:	
  6271                           
  6272                           ;incstack = 0
  6273                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  6274                           ;nrf24l01Send@command stored from wreg
  6275  0F77  0020               	movlb	0	; select bank0
  6276  0F78  00A3               	movwf	nrf24l01Send@command
  6277                           
  6278                           ;nrf24l01.c: 12: enableInterrupts(0);
  6279  0F79  3000               	movlw	0
  6280  0F7A  318E  2650  318F   	fcall	_enableInterrupts
  6281                           
  6282                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  6283  0F7D  318E  2658  318F   	fcall	_nrf24l01SPIStart
  6284                           
  6285                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  6286  0F80  0020               	movlb	0	; select bank0
  6287  0F81  0823               	movf	nrf24l01Send@command,w
  6288  0F82  318E  2660  318F   	fcall	_nrf24l01SPISend
  6289                           
  6290                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  6291  0F85  0020               	movlb	0	; select bank0
  6292  0F86  0821               	movf	nrf24l01Send@data,w
  6293  0F87  318E  2660  318F   	fcall	_nrf24l01SPISend
  6294  0F8A  0020               	movlb	0	; select bank0
  6295  0F8B  00A2               	movwf	??_nrf24l01Send
  6296  0F8C  0822               	movf	??_nrf24l01Send,w
  6297  0F8D  00A1               	movwf	nrf24l01Send@data
  6298                           
  6299                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  6300  0F8E  318E  2649  318F   	fcall	_nrf24l01SPIEnd
  6301                           
  6302                           ;nrf24l01.c: 27: enableInterrupts(1);
  6303  0F91  3001               	movlw	1
  6304  0F92  318E  2650         	fcall	_enableInterrupts
  6305                           
  6306                           ;nrf24l01.c: 29: return data;
  6307  0F94  0020               	movlb	0	; select bank0
  6308  0F95  0821               	movf	nrf24l01Send@data,w
  6309  0F96  0008               	return
  6310  0F97                     __end_of_nrf24l01Send:	
  6311                           
  6312                           	psect	text24
  6313  0FB8                     __ptext24:	
  6314 ;; *************** function _flashUpdate *****************
  6315 ;; Defined at:
  6316 ;;		line 97 in file "flash.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;		None
  6319 ;; Auto vars:     Size  Location     Type
  6320 ;;  i               2    9[BANK0 ] unsigned int 
  6321 ;; Return value:  Size  Location     Type
  6322 ;;                  1    wreg      void 
  6323 ;; Registers used:
  6324 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6325 ;; Tracked objects:
  6326 ;;		On entry : 0/0
  6327 ;;		On exit  : 0/0
  6328 ;;		Unchanged: 0/0
  6329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6331 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6332 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6333 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6334 ;;Total ram usage:        4 bytes
  6335 ;; Hardware stack levels used:    1
  6336 ;; Hardware stack levels required when called:    8
  6337 ;; This function calls:
  6338 ;;		_flashWriteByte
  6339 ;; This function is called by:
  6340 ;;		_main
  6341 ;; This function uses a non-reentrant model
  6342 ;;
  6343                           
  6344                           
  6345                           ;psect for function _flashUpdate
  6346  0FB8                     _flashUpdate:	
  6347                           
  6348                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  6349                           
  6350                           ;incstack = 0
  6351                           ; Regs used in _flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6352  0FB8  0020               	movlb	0	; select bank0
  6353  0FB9  01A9               	clrf	flashUpdate@i
  6354  0FBA  01AA               	clrf	flashUpdate@i+1
  6355  0FBB                     L1:	
  6356  0FBB  3000               	movlw	0
  6357  0FBC  022A               	subwf	flashUpdate@i+1,w
  6358  0FBD  3020               	movlw	32
  6359  0FBE  1903               	skipnz
  6360  0FBF  0229               	subwf	flashUpdate@i,w
  6361  0FC0  1803               	btfsc	3,0
  6362  0FC1  0008               	return
  6363                           
  6364                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  6365  0FC2  082A               	movf	flashUpdate@i+1,w
  6366  0FC3  00A2               	movwf	flashWriteByte@offset+1
  6367  0FC4  0829               	movf	flashUpdate@i,w
  6368  0FC5  00A1               	movwf	flashWriteByte@offset
  6369  0FC6  0829               	movf	flashUpdate@i,w
  6370  0FC7  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  6371  0FC8  0086               	movwf	6
  6372  0FC9  3001               	movlw	1	; select bank2/3
  6373  0FCA  0087               	movwf	7
  6374  0FCB  0801               	movf	1,w
  6375  0FCC  00A7               	movwf	??_flashUpdate
  6376  0FCD  01A8               	clrf	??_flashUpdate+1
  6377  0FCE  0827               	movf	??_flashUpdate,w
  6378  0FCF  00A3               	movwf	flashWriteByte@data
  6379  0FD0  0828               	movf	??_flashUpdate+1,w
  6380  0FD1  00A4               	movwf	flashWriteByte@data+1
  6381  0FD2  3185  25DE  318F   	fcall	_flashWriteByte
  6382  0FD5  3001               	movlw	1
  6383  0FD6  0020               	movlb	0	; select bank0
  6384  0FD7  07A9               	addwf	flashUpdate@i,f
  6385  0FD8  3000               	movlw	0
  6386  0FD9  3DAA               	addwfc	flashUpdate@i+1,f
  6387  0FDA  2FBB               	goto	L1
  6388  0FDB                     __end_of_flashUpdate:	
  6389                           
  6390                           	psect	text25
  6391  05DE                     __ptext25:	
  6392 ;; *************** function _flashWriteByte *****************
  6393 ;; Defined at:
  6394 ;;		line 8 in file "flash.c"
  6395 ;; Parameters:    Size  Location     Type
  6396 ;;  offset          2    1[BANK0 ] unsigned int 
  6397 ;;  data            2    3[BANK0 ] unsigned int 
  6398 ;; Auto vars:     Size  Location     Type
  6399 ;;  address         2    5[BANK0 ] unsigned int 
  6400 ;; Return value:  Size  Location     Type
  6401 ;;                  1    wreg      void 
  6402 ;; Registers used:
  6403 ;;		wreg, status,2, status,0
  6404 ;; Tracked objects:
  6405 ;;		On entry : 0/0
  6406 ;;		On exit  : 0/0
  6407 ;;		Unchanged: 0/0
  6408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6409 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6410 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6412 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6413 ;;Total ram usage:        6 bytes
  6414 ;; Hardware stack levels used:    1
  6415 ;; Hardware stack levels required when called:    7
  6416 ;; This function calls:
  6417 ;;		Nothing
  6418 ;; This function is called by:
  6419 ;;		_flashUpdate
  6420 ;; This function uses a non-reentrant model
  6421 ;;
  6422                           
  6423                           
  6424                           ;psect for function _flashWriteByte
  6425  05DE                     _flashWriteByte:	
  6426                           
  6427                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  6428                           
  6429                           ;incstack = 0
  6430                           ; Regs used in _flashWriteByte: [wreg+status,2+status,0]
  6431  05DE  138B               	bcf	11,7	;volatile
  6432                           
  6433                           ;flash.c: 15: PMCON1 = 0x00;
  6434  05DF  0031               	movlb	17	; select bank17
  6435  05E0  0195               	clrf	21	;volsfr
  6436                           
  6437                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  6438  05E1  0020               	movlb	0	; select bank0
  6439  05E2  0821               	movf	flashWriteByte@offset,w
  6440  05E3  3EE0               	addlw	224
  6441  05E4  00A5               	movwf	flashWriteByte@address
  6442  05E5  301F               	movlw	31
  6443  05E6  3D22               	addwfc	flashWriteByte@offset+1,w
  6444  05E7  00A6               	movwf	flashWriteByte@address+1
  6445                           
  6446                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  6447  05E8  0825               	movf	flashWriteByte@address,w
  6448  05E9  0031               	movlb	17	; select bank17
  6449  05EA  0091               	movwf	17	;volatile
  6450                           
  6451                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  6452  05EB  0020               	movlb	0	; select bank0
  6453  05EC  0826               	movf	flashWriteByte@address+1,w
  6454  05ED  0031               	movlb	17	; select bank17
  6455  05EE  0092               	movwf	18	;volatile
  6456                           
  6457                           ;flash.c: 21: PMCON1bits.FREE = 1;
  6458  05EF  1615               	bsf	21,4	;volsfr
  6459                           
  6460                           ;flash.c: 22: PMCON1bits.WREN = 1;
  6461  05F0  1515               	bsf	21,2	;volsfr
  6462                           
  6463                           ;flash.c: 24: PMCON2 = 0x55;
  6464  05F1  3055               	movlw	85
  6465  05F2  0096               	movwf	22	;volsfr
  6466                           
  6467                           ;flash.c: 25: PMCON2 = 0xAA;
  6468  05F3  30AA               	movlw	170
  6469  05F4  0096               	movwf	22	;volsfr
  6470                           
  6471                           ;flash.c: 27: PMCON1bits.WR = 1;
  6472  05F5  1495               	bsf	21,1	;volsfr
  6473                           
  6474                           ;flash.c: 29: __nop();
  6475  05F6  0000               	nop
  6476                           
  6477                           ;flash.c: 30: __nop();
  6478  05F7  0000               	nop
  6479                           
  6480                           ;flash.c: 32: PMCON1bits.WREN = 0;
  6481  05F8  0031               	movlb	17	; select bank17
  6482  05F9  1115               	bcf	21,2	;volsfr
  6483                           
  6484                           ;flash.c: 36: PMCON1 = 0x00;
  6485  05FA  0195               	clrf	21	;volsfr
  6486                           
  6487                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  6488  05FB  0020               	movlb	0	; select bank0
  6489  05FC  0825               	movf	flashWriteByte@address,w
  6490  05FD  0031               	movlb	17	; select bank17
  6491  05FE  0091               	movwf	17	;volatile
  6492                           
  6493                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  6494  05FF  0020               	movlb	0	; select bank0
  6495  0600  0826               	movf	flashWriteByte@address+1,w
  6496  0601  0031               	movlb	17	; select bank17
  6497  0602  0092               	movwf	18	;volatile
  6498                           
  6499                           ;flash.c: 41: PMCON1bits.FREE = 0;
  6500  0603  1215               	bcf	21,4	;volsfr
  6501                           
  6502                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  6503  0604  1695               	bsf	21,5	;volsfr
  6504                           
  6505                           ;flash.c: 43: PMCON1bits.WREN = 1;
  6506  0605  1515               	bsf	21,2	;volsfr
  6507                           
  6508                           ;flash.c: 45: PMDATL = (data >> 0);
  6509  0606  0020               	movlb	0	; select bank0
  6510  0607  0823               	movf	flashWriteByte@data,w
  6511  0608  0031               	movlb	17	; select bank17
  6512  0609  0093               	movwf	19	;volatile
  6513                           
  6514                           ;flash.c: 46: PMDATH = (data >> 8);
  6515  060A  0020               	movlb	0	; select bank0
  6516  060B  0824               	movf	flashWriteByte@data+1,w
  6517  060C  0031               	movlb	17	; select bank17
  6518  060D  0094               	movwf	20	;volatile
  6519                           
  6520                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  6521  060E  1295               	bcf	21,5	;volsfr
  6522                           
  6523                           ;flash.c: 50: PMCON2 = 0x55;
  6524  060F  3055               	movlw	85
  6525  0610  0096               	movwf	22	;volsfr
  6526                           
  6527                           ;flash.c: 51: PMCON2 = 0xAA;
  6528  0611  30AA               	movlw	170
  6529  0612  0096               	movwf	22	;volsfr
  6530                           
  6531                           ;flash.c: 53: PMCON1bits.WR = 1;
  6532  0613  1495               	bsf	21,1	;volsfr
  6533                           
  6534                           ;flash.c: 55: __nop();
  6535  0614  0000               	nop
  6536                           
  6537                           ;flash.c: 56: __nop();
  6538  0615  0000               	nop
  6539                           
  6540                           ;flash.c: 58: PMCON1bits.WREN = 0;
  6541  0616  0031               	movlb	17	; select bank17
  6542  0617  1115               	bcf	21,2	;volsfr
  6543                           
  6544                           ;flash.c: 61: INTCONbits.GIE = 1;
  6545  0618  178B               	bsf	11,7	;volatile
  6546  0619  0008               	return
  6547  061A                     __end_of_flashWriteByte:	
  6548                           
  6549                           	psect	text26
  6550  0F57                     __ptext26:	
  6551 ;; *************** function _flashRealod *****************
  6552 ;; Defined at:
  6553 ;;		line 90 in file "flash.c"
  6554 ;; Parameters:    Size  Location     Type
  6555 ;;		None
  6556 ;; Auto vars:     Size  Location     Type
  6557 ;;  i               2   11[BANK0 ] unsigned int 
  6558 ;; Return value:  Size  Location     Type
  6559 ;;                  1    wreg      void 
  6560 ;; Registers used:
  6561 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6562 ;; Tracked objects:
  6563 ;;		On entry : 0/0
  6564 ;;		On exit  : 0/0
  6565 ;;		Unchanged: 0/0
  6566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6568 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6569 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6570 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6571 ;;Total ram usage:        3 bytes
  6572 ;; Hardware stack levels used:    1
  6573 ;; Hardware stack levels required when called:    8
  6574 ;; This function calls:
  6575 ;;		_flashReadByte
  6576 ;; This function is called by:
  6577 ;;		_main
  6578 ;; This function uses a non-reentrant model
  6579 ;;
  6580                           
  6581                           
  6582                           ;psect for function _flashRealod
  6583  0F57                     _flashRealod:	
  6584                           
  6585                           ;flash.c: 92: for (unsigned int i = 0; i < 32; i++){
  6586                           
  6587                           ;incstack = 0
  6588                           ; Regs used in _flashRealod: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6589  0F57  0020               	movlb	0	; select bank0
  6590  0F58  01AB               	clrf	flashRealod@i
  6591  0F59  01AC               	clrf	flashRealod@i+1
  6592  0F5A                     L2:	
  6593  0F5A  3000               	movlw	0
  6594  0F5B  022C               	subwf	flashRealod@i+1,w
  6595  0F5C  3020               	movlw	32
  6596  0F5D  1903               	skipnz
  6597  0F5E  022B               	subwf	flashRealod@i,w
  6598  0F5F  1803               	btfsc	3,0
  6599  0F60  0008               	return
  6600                           
  6601                           ;flash.c: 93: romHolder.array[i] = flashReadByte(i);
  6602  0F61  082C               	movf	flashRealod@i+1,w
  6603  0F62  00A2               	movwf	flashReadByte@offset+1
  6604  0F63  082B               	movf	flashRealod@i,w
  6605  0F64  00A1               	movwf	flashReadByte@offset
  6606  0F65  3186  26C2  318F   	fcall	_flashReadByte
  6607  0F68  0020               	movlb	0	; select bank0
  6608  0F69  0821               	movf	?_flashReadByte,w
  6609  0F6A  00AA               	movwf	??_flashRealod
  6610  0F6B  082B               	movf	flashRealod@i,w
  6611  0F6C  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  6612  0F6D  0086               	movwf	6
  6613  0F6E  3001               	movlw	1	; select bank2/3
  6614  0F6F  0087               	movwf	7
  6615  0F70  082A               	movf	??_flashRealod,w
  6616  0F71  0081               	movwf	1
  6617  0F72  3001               	movlw	1
  6618  0F73  07AB               	addwf	flashRealod@i,f
  6619  0F74  3000               	movlw	0
  6620  0F75  3DAC               	addwfc	flashRealod@i+1,f
  6621  0F76  2F5A               	goto	L2
  6622  0F77                     __end_of_flashRealod:	
  6623                           
  6624                           	psect	text27
  6625  06C2                     __ptext27:	
  6626 ;; *************** function _flashReadByte *****************
  6627 ;; Defined at:
  6628 ;;		line 64 in file "flash.c"
  6629 ;; Parameters:    Size  Location     Type
  6630 ;;  offset          2    1[BANK0 ] unsigned int 
  6631 ;; Auto vars:     Size  Location     Type
  6632 ;;  address         2    8[BANK0 ] unsigned int 
  6633 ;;  result          2    6[BANK0 ] unsigned int 
  6634 ;; Return value:  Size  Location     Type
  6635 ;;                  2    1[BANK0 ] unsigned int 
  6636 ;; Registers used:
  6637 ;;		wreg, status,2, status,0
  6638 ;; Tracked objects:
  6639 ;;		On entry : 0/0
  6640 ;;		On exit  : 0/0
  6641 ;;		Unchanged: 0/0
  6642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6643 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6644 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6645 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6646 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6647 ;;Total ram usage:        9 bytes
  6648 ;; Hardware stack levels used:    1
  6649 ;; Hardware stack levels required when called:    7
  6650 ;; This function calls:
  6651 ;;		Nothing
  6652 ;; This function is called by:
  6653 ;;		_flashRealod
  6654 ;; This function uses a non-reentrant model
  6655 ;;
  6656                           
  6657                           
  6658                           ;psect for function _flashReadByte
  6659  06C2                     _flashReadByte:	
  6660                           
  6661                           ;flash.c: 66: unsigned int address;;flash.c: 68: INTCONbits.GIE = 0;
  6662                           
  6663                           ;incstack = 0
  6664                           ; Regs used in _flashReadByte: [wreg+status,2+status,0]
  6665  06C2  138B               	bcf	11,7	;volatile
  6666                           
  6667                           ;flash.c: 70: PMCON1 = 0x00;
  6668  06C3  0031               	movlb	17	; select bank17
  6669  06C4  0195               	clrf	21	;volsfr
  6670                           
  6671                           ;flash.c: 72: address = (0x2000U - 32) + offset;
  6672  06C5  0020               	movlb	0	; select bank0
  6673  06C6  0821               	movf	flashReadByte@offset,w
  6674  06C7  3EE0               	addlw	224
  6675  06C8  00A8               	movwf	flashReadByte@address
  6676  06C9  301F               	movlw	31
  6677  06CA  3D22               	addwfc	flashReadByte@offset+1,w
  6678  06CB  00A9               	movwf	flashReadByte@address+1
  6679                           
  6680                           ;flash.c: 73: PMADRL = (char) (address >> 0);
  6681  06CC  0828               	movf	flashReadByte@address,w
  6682  06CD  0031               	movlb	17	; select bank17
  6683  06CE  0091               	movwf	17	;volatile
  6684                           
  6685                           ;flash.c: 74: PMADRH = (char) (address >> 8);
  6686  06CF  0020               	movlb	0	; select bank0
  6687  06D0  0829               	movf	flashReadByte@address+1,w
  6688  06D1  0031               	movlb	17	; select bank17
  6689  06D2  0092               	movwf	18	;volatile
  6690                           
  6691                           ;flash.c: 76: PMCON1bits.RD = 1;
  6692  06D3  1415               	bsf	21,0	;volsfr
  6693                           
  6694                           ;flash.c: 78: __nop();
  6695  06D4  0000               	nop
  6696                           
  6697                           ;flash.c: 79: __nop();
  6698  06D5  0000               	nop
  6699                           
  6700                           ;flash.c: 81: unsigned int result = 0;
  6701  06D6  0020               	movlb	0	; select bank0
  6702  06D7  01A6               	clrf	flashReadByte@result
  6703  06D8  01A7               	clrf	flashReadByte@result+1
  6704                           
  6705                           ;flash.c: 82: result = PMDATL;
  6706  06D9  0031               	movlb	17	; select bank17
  6707  06DA  0813               	movf	19,w	;volatile
  6708  06DB  0020               	movlb	0	; select bank0
  6709  06DC  00A3               	movwf	??_flashReadByte
  6710  06DD  01A4               	clrf	??_flashReadByte+1
  6711  06DE  0823               	movf	??_flashReadByte,w
  6712  06DF  00A6               	movwf	flashReadByte@result
  6713  06E0  0824               	movf	??_flashReadByte+1,w
  6714  06E1  00A7               	movwf	flashReadByte@result+1
  6715                           
  6716                           ;flash.c: 83: result|= ( (unsigned) (PMDATH) << 8);
  6717  06E2  0031               	movlb	17	; select bank17
  6718  06E3  0814               	movf	20,w	;volatile
  6719  06E4  0020               	movlb	0	; select bank0
  6720  06E5  00A3               	movwf	??_flashReadByte
  6721  06E6  01A4               	clrf	??_flashReadByte+1
  6722  06E7  0823               	movf	??_flashReadByte,w
  6723  06E8  00A4               	movwf	??_flashReadByte+1
  6724  06E9  01A3               	clrf	??_flashReadByte
  6725  06EA  0823               	movf	??_flashReadByte,w
  6726  06EB  04A6               	iorwf	flashReadByte@result,f
  6727  06EC  0824               	movf	??_flashReadByte+1,w
  6728  06ED  04A7               	iorwf	flashReadByte@result+1,f
  6729                           
  6730                           ;flash.c: 85: INTCONbits.GIE = 1;
  6731  06EE  178B               	bsf	11,7	;volatile
  6732                           
  6733                           ;flash.c: 87: return result;
  6734  06EF  0827               	movf	flashReadByte@result+1,w
  6735  06F0  00A2               	movwf	?_flashReadByte+1
  6736  06F1  0826               	movf	flashReadByte@result,w
  6737  06F2  00A1               	movwf	?_flashReadByte
  6738  06F3  0008               	return
  6739  06F4                     __end_of_flashReadByte:	
  6740                           
  6741                           	psect	intentry
  6742  0004                     __pintentry:	
  6743 ;; *************** function _ISR *****************
  6744 ;; Defined at:
  6745 ;;		line 15 in file "main.c"
  6746 ;; Parameters:    Size  Location     Type
  6747 ;;		None
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;		None
  6750 ;; Return value:  Size  Location     Type
  6751 ;;                  1    wreg      void 
  6752 ;; Registers used:
  6753 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6754 ;; Tracked objects:
  6755 ;;		On entry : 0/0
  6756 ;;		On exit  : 0/0
  6757 ;;		Unchanged: 0/0
  6758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6763 ;;Total ram usage:        0 bytes
  6764 ;; Hardware stack levels used:    1
  6765 ;; Hardware stack levels required when called:    6
  6766 ;; This function calls:
  6767 ;;		_nrf24l01ISR
  6768 ;; This function is called by:
  6769 ;;		Interrupt level 1
  6770 ;; This function uses a non-reentrant model
  6771 ;;
  6772                           
  6773  0004                     _ISR:	
  6774                           
  6775                           ;incstack = 0
  6776  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6777                           
  6778                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6779  0005  3180               	pagesel	$
  6780                           
  6781                           ;main.c: 17: if (PIR0bits.INTF){
  6782  0006  0020               	movlb	0	; select bank0
  6783  0007  1C10               	btfss	16,0	;volatile
  6784  0008  280D               	goto	i1l209
  6785                           
  6786                           ;main.c: 18: nrf24l01ISR();
  6787  0009  3186  268C         	fcall	_nrf24l01ISR
  6788                           
  6789                           ;main.c: 19: PIR0bits.INTF = 0;
  6790  000B  0020               	movlb	0	; select bank0
  6791  000C  1010               	bcf	16,0	;volatile
  6792  000D                     i1l209:	
  6793  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6794  000E  0009               	retfie
  6795  000F                     __end_of_ISR:	
  6796                           
  6797                           	psect	text29
  6798  068C                     __ptext29:	
  6799 ;; *************** function _nrf24l01ISR *****************
  6800 ;; Defined at:
  6801 ;;		line 246 in file "nrf24l01.c"
  6802 ;; Parameters:    Size  Location     Type
  6803 ;;		None
  6804 ;; Auto vars:     Size  Location     Type
  6805 ;;  status          1    0[BANK0 ] struct .
  6806 ;; Return value:  Size  Location     Type
  6807 ;;                  1    wreg      void 
  6808 ;; Registers used:
  6809 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6810 ;; Tracked objects:
  6811 ;;		On entry : 0/0
  6812 ;;		On exit  : 0/0
  6813 ;;		Unchanged: 0/0
  6814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6816 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6817 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6818 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6819 ;;Total ram usage:        2 bytes
  6820 ;; Hardware stack levels used:    1
  6821 ;; Hardware stack levels required when called:    5
  6822 ;; This function calls:
  6823 ;;		_exception
  6824 ;;		_nrf24l01CheckACK
  6825 ;;		_nrf24l01ReceivePacket
  6826 ;;		i1_nrf24l01Send
  6827 ;;		i1_nrf24l01SetRXMode
  6828 ;; This function is called by:
  6829 ;;		_ISR
  6830 ;; This function uses a non-reentrant model
  6831 ;;
  6832                           
  6833                           
  6834                           ;psect for function _nrf24l01ISR
  6835  068C                     _nrf24l01ISR:	
  6836                           
  6837                           ;nrf24l01.c: 248: n_STATUS_t status;;nrf24l01.c: 249: status.byte = nrf24l01Send(0b00000
      +                          000 | 0x07, 0);
  6838                           
  6839                           ;incstack = 0
  6840                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6841  068C  01F1               	clrf	i1nrf24l01Send@data
  6842  068D  3007               	movlw	7
  6843  068E  318E  26E5  3186   	fcall	i1_nrf24l01Send
  6844  0691  00FD               	movwf	??_nrf24l01ISR
  6845  0692  087D               	movf	??_nrf24l01ISR,w
  6846  0693  0020               	movlb	0	; select bank0
  6847  0694  00A0               	movwf	nrf24l01ISR@status
  6848                           
  6849                           ;nrf24l01.c: 254: };nrf24l01.c: 257: if (status.byte == 0xFF){
  6850  0695  0A20               	incf	nrf24l01ISR@status,w
  6851  0696  1D03               	btfss	3,2
  6852  0697  2E9C               	goto	i1l2975
  6853                           
  6854                           ;nrf24l01.c: 258: exception(2);
  6855  0698  3002               	movlw	2
  6856  0699  318E  2681  3186   	fcall	_exception
  6857  069C                     i1l2975:	
  6858                           
  6859                           ;nrf24l01.c: 259: };nrf24l01.c: 261: if (status.TX_DS){
  6860  069C  0020               	movlb	0	; select bank0
  6861  069D  1EA0               	btfss	nrf24l01ISR@status,5
  6862  069E  2EAB               	goto	i1l2983
  6863                           
  6864                           ;nrf24l01.c: 264: nrf24l01.TXBusy = 0;
  6865  069F  105B               	bcf	_nrf24l01,0	;volatile
  6866                           
  6867                           ;nrf24l01.c: 267: if (!nrf24l01.RXMode){
  6868  06A0  195B               	btfsc	_nrf24l01,2	;volatile
  6869  06A1  2EAB               	goto	i1l2983
  6870                           
  6871                           ;nrf24l01.c: 268: if (TXPacket->packetData.ACKRequest){
  6872  06A2  0859               	movf	_TXPacket,w
  6873  06A3  0086               	movwf	6
  6874  06A4  0187               	clrf	7
  6875  06A5  1D01               	btfss	1,2
  6876  06A6  2EAB               	goto	i1l2983
  6877                           
  6878                           ;nrf24l01.c: 271: nrf24l01SetRXMode(1);
  6879  06A7  3001               	movlw	1
  6880  06A8  3186  2655  3186   	fcall	i1_nrf24l01SetRXMode
  6881  06AB                     i1l2983:	
  6882                           
  6883                           ;nrf24l01.c: 272: };nrf24l01.c: 273: };nrf24l01.c: 274: };nrf24l01.c: 277: if (status.RX
      +                          _DR){
  6884  06AB  0020               	movlb	0	; select bank0
  6885  06AC  1F20               	btfss	nrf24l01ISR@status,6
  6886  06AD  2EB9               	goto	i1l2993
  6887                           
  6888                           ;nrf24l01.c: 280: if (!nrf24l01.RXPending){
  6889  06AE  18DB               	btfsc	_nrf24l01,1	;volatile
  6890  06AF  2EB8               	goto	i1l352
  6891                           
  6892                           ;nrf24l01.c: 283: nrf24l01.RXPending = 1;
  6893  06B0  14DB               	bsf	_nrf24l01,1	;volatile
  6894                           
  6895                           ;nrf24l01.c: 284: nrf24l01ReceivePacket();
  6896  06B1  3184  240B  3186   	fcall	_nrf24l01ReceivePacket
  6897                           
  6898                           ;nrf24l01.c: 285: nrf24l01CheckACK();
  6899  06B4  318F  2737  3186   	fcall	_nrf24l01CheckACK
  6900                           
  6901                           ;nrf24l01.c: 286: }
  6902  06B7  2EB9               	goto	i1l2993
  6903  06B8                     i1l352:	
  6904                           
  6905                           ;nrf24l01.c: 289: else{;nrf24l01.c: 292: status.RX_DR = 0;
  6906  06B8  1320               	bcf	nrf24l01ISR@status,6
  6907  06B9                     i1l2993:	
  6908                           
  6909                           ;nrf24l01.c: 293: };nrf24l01.c: 295: };nrf24l01.c: 298: nrf24l01Send(0b00100000 | 0x07, 
      +                          status.byte);
  6910  06B9  0020               	movlb	0	; select bank0
  6911  06BA  0820               	movf	nrf24l01ISR@status,w
  6912  06BB  00FD               	movwf	??_nrf24l01ISR
  6913  06BC  087D               	movf	??_nrf24l01ISR,w
  6914  06BD  00F1               	movwf	i1nrf24l01Send@data
  6915  06BE  3027               	movlw	39
  6916  06BF  318E  26E5         	fcall	i1_nrf24l01Send
  6917  06C1  0008               	return
  6918  06C2                     __end_of_nrf24l01ISR:	
  6919                           
  6920                           	psect	text30
  6921  040B                     __ptext30:	
  6922 ;; *************** function _nrf24l01ReceivePacket *****************
  6923 ;; Defined at:
  6924 ;;		line 133 in file "nrf24l01.c"
  6925 ;; Parameters:    Size  Location     Type
  6926 ;;		None
  6927 ;; Auto vars:     Size  Location     Type
  6928 ;;  i               1   10[COMMON] unsigned char 
  6929 ;;  width           1    9[COMMON] unsigned char 
  6930 ;; Return value:  Size  Location     Type
  6931 ;;                  1    wreg      void 
  6932 ;; Registers used:
  6933 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6934 ;; Tracked objects:
  6935 ;;		On entry : 0/0
  6936 ;;		On exit  : 0/0
  6937 ;;		Unchanged: 0/0
  6938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6940 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6941 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6942 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6943 ;;Total ram usage:        3 bytes
  6944 ;; Hardware stack levels used:    1
  6945 ;; Hardware stack levels required when called:    3
  6946 ;; This function calls:
  6947 ;;		_nrf24l01CEHigh
  6948 ;;		_nrf24l01CELow
  6949 ;;		_nrf24l01SPIEnd
  6950 ;;		_nrf24l01SPISend
  6951 ;;		_nrf24l01SPIStart
  6952 ;;		i1_memset
  6953 ;;		i1_nrf24l01Send
  6954 ;; This function is called by:
  6955 ;;		_nrf24l01ISR
  6956 ;; This function uses a non-reentrant model
  6957 ;;
  6958                           
  6959                           
  6960                           ;psect for function _nrf24l01ReceivePacket
  6961  040B                     _nrf24l01ReceivePacket:	
  6962                           
  6963                           ;nrf24l01.c: 136: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  6964                           
  6965                           ;incstack = 0
  6966                           ; Regs used in _nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6967  040B  3041               	movlw	low (_RXPacket+1)
  6968  040C  00F0               	movwf	i1memset@p1
  6969  040D  3001               	movlw	high (_RXPacket+1)
  6970  040E  00F1               	movwf	i1memset@p1+1
  6971  040F  3000               	movlw	0
  6972  0410  00F2               	movwf	i1memset@c
  6973  0411  00F3               	movwf	i1memset@c+1
  6974  0412  3020               	movlw	32
  6975  0413  00F4               	movwf	i1memset@n
  6976  0414  3000               	movlw	0
  6977  0415  00F5               	movwf	i1memset@n+1
  6978  0416  318E  2699  3184   	fcall	i1_memset
  6979                           
  6980                           ;nrf24l01.c: 137: RXPacket.packetData.byte = 0x00;
  6981  0419  0022               	movlb	2	; select bank2
  6982  041A  01C0               	clrf	_RXPacket^(0+256)
  6983                           
  6984                           ;nrf24l01.c: 140: unsigned char width = nrf24l01Send(0b01100000, 0);
  6985  041B  01F1               	clrf	i1nrf24l01Send@data
  6986  041C  3060               	movlw	96
  6987  041D  318E  26E5  3184   	fcall	i1_nrf24l01Send
  6988  0420  00F8               	movwf	??_nrf24l01ReceivePacket
  6989  0421  0878               	movf	??_nrf24l01ReceivePacket,w
  6990  0422  00F9               	movwf	nrf24l01ReceivePacket@width
  6991                           
  6992                           ;nrf24l01.c: 141: unsigned char i = 0;
  6993  0423  01FA               	clrf	nrf24l01ReceivePacket@i
  6994                           
  6995                           ;nrf24l01.c: 144: nrf24l01CELow();
  6996  0424  318E  263A  3184   	fcall	_nrf24l01CELow
  6997                           
  6998                           ;nrf24l01.c: 147: nrf24l01SPIStart();
  6999  0427  318E  2658  3184   	fcall	_nrf24l01SPIStart
  7000                           
  7001                           ;nrf24l01.c: 150: nrf24l01SPISend(0b01100001);
  7002  042A  3061               	movlw	97
  7003  042B  318E  2660  3184   	fcall	_nrf24l01SPISend
  7004                           
  7005                           ;nrf24l01.c: 153: RXPacket.packetData.byte = nrf24l01SPISend(0);
  7006  042E  3000               	movlw	0
  7007  042F  318E  2660  3184   	fcall	_nrf24l01SPISend
  7008  0432  00F8               	movwf	??_nrf24l01ReceivePacket
  7009  0433  0878               	movf	??_nrf24l01ReceivePacket,w
  7010  0434  0022               	movlb	2	; select bank2
  7011  0435  00C0               	movwf	_RXPacket^(0+256)
  7012                           
  7013                           ;nrf24l01.c: 154: width--;
  7014  0436  3001               	movlw	1
  7015  0437  02F9               	subwf	nrf24l01ReceivePacket@width,f
  7016                           
  7017                           ;nrf24l01.c: 156: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
  7018  0438  01FA               	clrf	nrf24l01ReceivePacket@i
  7019  0439  2C4A               	goto	i1l2959
  7020  043A                     i1l2955:	
  7021                           
  7022                           ;nrf24l01.c: 158: RXPacket.Message[i] = nrf24l01SPISend(0);
  7023  043A  3000               	movlw	0
  7024  043B  318E  2660  3184   	fcall	_nrf24l01SPISend
  7025  043E  00F8               	movwf	??_nrf24l01ReceivePacket
  7026  043F  087A               	movf	nrf24l01ReceivePacket@i,w
  7027  0440  3E41               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  7028  0441  0086               	movwf	6
  7029  0442  3001               	movlw	1	; select bank2/3
  7030  0443  0087               	movwf	7
  7031  0444  0878               	movf	??_nrf24l01ReceivePacket,w
  7032  0445  0081               	movwf	1
  7033  0446  3001               	movlw	1
  7034  0447  00F8               	movwf	??_nrf24l01ReceivePacket
  7035  0448  0878               	movf	??_nrf24l01ReceivePacket,w
  7036  0449  07FA               	addwf	nrf24l01ReceivePacket@i,f
  7037  044A                     i1l2959:	
  7038  044A  0879               	movf	nrf24l01ReceivePacket@width,w
  7039  044B  027A               	subwf	nrf24l01ReceivePacket@i,w
  7040  044C  1803               	skipnc
  7041  044D  2C52               	goto	i1l2963
  7042  044E  3020               	movlw	32
  7043  044F  027A               	subwf	nrf24l01ReceivePacket@i,w
  7044  0450  1C03               	skipc
  7045  0451  2C3A               	goto	i1l2955
  7046  0452                     i1l2963:	
  7047                           
  7048                           ;nrf24l01.c: 159: };nrf24l01.c: 162: nrf24l01SPIEnd();
  7049  0452  318E  2649  3184   	fcall	_nrf24l01SPIEnd
  7050                           
  7051                           ;nrf24l01.c: 164: RXPacket.packetData.RPD = nrf24l01Send(0b00000000 | 0x09, 0);
  7052  0455  01F1               	clrf	i1nrf24l01Send@data
  7053  0456  3009               	movlw	9
  7054  0457  318E  26E5  3184   	fcall	i1_nrf24l01Send
  7055  045A  00F8               	movwf	??_nrf24l01ReceivePacket
  7056  045B  0022               	movlb	2	; select bank2
  7057  045C  0840               	movf	_RXPacket^(0+256),w
  7058  045D  0678               	xorwf	??_nrf24l01ReceivePacket,w
  7059  045E  39FE               	andlw	-2
  7060  045F  0678               	xorwf	??_nrf24l01ReceivePacket,w
  7061  0460  00C0               	movwf	_RXPacket^(0+256)
  7062                           
  7063                           ;nrf24l01.c: 167: nrf24l01CEHigh();
  7064  0461  318E  2637         	fcall	_nrf24l01CEHigh
  7065  0463  0008               	return
  7066  0464                     __end_of_nrf24l01ReceivePacket:	
  7067                           
  7068                           	psect	text31
  7069  0E99                     __ptext31:	
  7070 ;; *************** function i1_memset *****************
  7071 ;; Defined at:
  7072 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  7073 ;; Parameters:    Size  Location     Type
  7074 ;;  p1              2    0[COMMON] PTR void 
  7075 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  7076 ;;  c               2    2[COMMON] int 
  7077 ;;  n               2    4[COMMON] unsigned int 
  7078 ;; Auto vars:     Size  Location     Type
  7079 ;;  memset          2    6[COMMON] PTR unsigned char 
  7080 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  7081 ;; Return value:  Size  Location     Type
  7082 ;;                  1    wreg      PTR void 
  7083 ;; Registers used:
  7084 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7085 ;; Tracked objects:
  7086 ;;		On entry : 0/0
  7087 ;;		On exit  : 0/0
  7088 ;;		Unchanged: 0/0
  7089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7090 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7091 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7093 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7094 ;;Total ram usage:        8 bytes
  7095 ;; Hardware stack levels used:    1
  7096 ;; This function calls:
  7097 ;;		Nothing
  7098 ;; This function is called by:
  7099 ;;		_nrf24l01ReceivePacket
  7100 ;; This function uses a non-reentrant model
  7101 ;;
  7102                           
  7103                           
  7104                           ;psect for function i1_memset
  7105  0E99                     i1_memset:	
  7106                           
  7107                           ;incstack = 0
  7108                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7109  0E99  0871               	movf	i1memset@p1+1,w
  7110  0E9A  00F7               	movwf	i1memset@p+1
  7111  0E9B  0870               	movf	i1memset@p1,w
  7112  0E9C  00F6               	movwf	i1memset@p
  7113  0E9D                     i1l2923:	
  7114  0E9D  3001               	movlw	1
  7115  0E9E  02F4               	subwf	i1memset@n,f
  7116  0E9F  3000               	movlw	0
  7117  0EA0  3BF5               	subwfb	i1memset@n+1,f
  7118  0EA1  0A74               	incf	i1memset@n,w
  7119  0EA2  1903               	btfsc	3,2
  7120  0EA3  0A75               	incf	i1memset@n+1,w
  7121  0EA4  1903               	btfsc	3,2
  7122  0EA5  0008               	return
  7123  0EA6  0876               	movf	i1memset@p,w
  7124  0EA7  0086               	movwf	6
  7125  0EA8  0877               	movf	i1memset@p+1,w
  7126  0EA9  0087               	movwf	7
  7127  0EAA  0872               	movf	i1memset@c,w
  7128  0EAB  0081               	movwf	1
  7129  0EAC  3001               	movlw	1
  7130  0EAD  07F6               	addwf	i1memset@p,f
  7131  0EAE  3000               	movlw	0
  7132  0EAF  3DF7               	addwfc	i1memset@p+1,f
  7133  0EB0  2E9D               	goto	i1l2923
  7134  0EB1                     __end_ofi1_memset:	
  7135                           ;	Return value of i1_memset is never used
  7136                           
  7137                           
  7138                           	psect	text32
  7139  0F37                     __ptext32:	
  7140 ;; *************** function _nrf24l01CheckACK *****************
  7141 ;; Defined at:
  7142 ;;		line 96 in file "nrf24l01.c"
  7143 ;; Parameters:    Size  Location     Type
  7144 ;;		None
  7145 ;; Auto vars:     Size  Location     Type
  7146 ;;		None
  7147 ;; Return value:  Size  Location     Type
  7148 ;;                  1    wreg      void 
  7149 ;; Registers used:
  7150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7151 ;; Tracked objects:
  7152 ;;		On entry : 0/0
  7153 ;;		On exit  : 0/0
  7154 ;;		Unchanged: 0/0
  7155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7158 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7159 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7160 ;;Total ram usage:        1 bytes
  7161 ;; Hardware stack levels used:    1
  7162 ;; Hardware stack levels required when called:    4
  7163 ;; This function calls:
  7164 ;;		_strcmp
  7165 ;;		i1_nrf24l01SetRXMode
  7166 ;; This function is called by:
  7167 ;;		_nrf24l01ISR
  7168 ;; This function uses a non-reentrant model
  7169 ;;
  7170                           
  7171                           
  7172                           ;psect for function _nrf24l01CheckACK
  7173  0F37                     _nrf24l01CheckACK:	
  7174                           
  7175                           ;nrf24l01.c: 100: if (!RXPacket.packetData.IsACK){
  7176                           
  7177                           ;incstack = 0
  7178                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7179  0F37  0022               	movlb	2	; select bank2
  7180  0F38  1DC0               	btfss	_RXPacket^(0+256),3
  7181  0F39  0008               	return
  7182                           
  7183                           ;nrf24l01.c: 102: };nrf24l01.c: 105: nrf24l01.RXPending = 0;
  7184                           
  7185                           ;nrf24l01.c: 101: return;
  7186  0F3A  0020               	movlb	0	; select bank0
  7187  0F3B  10DB               	bcf	_nrf24l01,1	;volatile
  7188                           
  7189                           ;nrf24l01.c: 108: if (!TXPacket->packetData.ACKRequest){
  7190  0F3C  0859               	movf	_TXPacket,w
  7191  0F3D  0086               	movwf	6
  7192  0F3E  0187               	clrf	7
  7193  0F3F  1D01               	btfss	1,2
  7194  0F40  0008               	return
  7195                           
  7196                           ;nrf24l01.c: 110: };nrf24l01.c: 113: if (strcmp(TXPacket->Message, RXPacket.Message) != 
      +                          0){
  7197                           
  7198                           ;nrf24l01.c: 109: return;
  7199  0F41  3041               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  7200  0F42  00F7               	movwf	??_nrf24l01CheckACK
  7201  0F43  0877               	movf	??_nrf24l01CheckACK,w
  7202  0F44  00F0               	movwf	strcmp@s2
  7203  0F45  0859               	movf	_TXPacket,w
  7204  0F46  3E01               	addlw	1
  7205  0F47  3187  27C8  318F   	fcall	_strcmp
  7206  0F4A  0870               	movf	?_strcmp,w
  7207  0F4B  0471               	iorwf	?_strcmp+1,w
  7208  0F4C  1D03               	btfss	3,2
  7209  0F4D  0008               	return
  7210                           
  7211                           ;nrf24l01.c: 115: };nrf24l01.c: 122: TXPacket->packetData.ACKRequest = 0;
  7212                           
  7213                           ;nrf24l01.c: 114: return;
  7214  0F4E  0020               	movlb	0	; select bank0
  7215  0F4F  0859               	movf	_TXPacket,w
  7216  0F50  0086               	movwf	6
  7217  0F51  0187               	clrf	7
  7218  0F52  1101               	bcf	1,2
  7219                           
  7220                           ;nrf24l01.c: 125: nrf24l01SetRXMode(0);
  7221  0F53  3000               	movlw	0
  7222  0F54  3186  2655         	fcall	i1_nrf24l01SetRXMode
  7223  0F56  0008               	return
  7224  0F57                     __end_of_nrf24l01CheckACK:	
  7225                           
  7226                           	psect	text33
  7227  0655                     __ptext33:	
  7228 ;; *************** function i1_nrf24l01SetRXMode *****************
  7229 ;; Defined at:
  7230 ;;		line 54 in file "nrf24l01.c"
  7231 ;; Parameters:    Size  Location     Type
  7232 ;;  rxMode          1    wreg     unsigned char 
  7233 ;; Auto vars:     Size  Location     Type
  7234 ;;  rxMode          1    6[COMMON] unsigned char 
  7235 ;;  nrf24l01SetR    1    5[COMMON] struct .
  7236 ;; Return value:  Size  Location     Type
  7237 ;;                  1    wreg      void 
  7238 ;; Registers used:
  7239 ;;		wreg, status,2, status,0, pclath, cstack
  7240 ;; Tracked objects:
  7241 ;;		On entry : 0/0
  7242 ;;		On exit  : 0/0
  7243 ;;		Unchanged: 0/0
  7244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7246 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7247 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7248 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7249 ;;Total ram usage:        3 bytes
  7250 ;; Hardware stack levels used:    1
  7251 ;; Hardware stack levels required when called:    3
  7252 ;; This function calls:
  7253 ;;		_nrf24l01CEHigh
  7254 ;;		_nrf24l01CELow
  7255 ;;		i1_nrf24l01Send
  7256 ;; This function is called by:
  7257 ;;		_nrf24l01CheckACK
  7258 ;;		_nrf24l01ISR
  7259 ;; This function uses a non-reentrant model
  7260 ;;
  7261                           
  7262                           
  7263                           ;psect for function i1_nrf24l01SetRXMode
  7264  0655                     i1_nrf24l01SetRXMode:	
  7265                           
  7266                           ;incstack = 0
  7267                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  7268                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
  7269  0655  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
  7270                           
  7271                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send(0b0000000
      +                          0 | 0x00, 0);
  7272  0656  01F1               	clrf	i1nrf24l01Send@data
  7273  0657  3000               	movlw	0
  7274  0658  318E  26E5  3186   	fcall	i1_nrf24l01Send
  7275  065B  00F4               	movwf	??i1_nrf24l01SetRXMode
  7276  065C  0874               	movf	??i1_nrf24l01SetRXMode,w
  7277  065D  00F5               	movwf	i1nrf24l01SetRXMode@config
  7278                           
  7279                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  7280  065E  0875               	movf	i1nrf24l01SetRXMode@config,w
  7281  065F  3901               	andlw	1
  7282  0660  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
  7283  0661  1903               	skipnz
  7284  0662  2E85               	goto	i1l2285
  7285                           
  7286                           ;nrf24l01.c: 65: nrf24l01CELow();
  7287  0663  318E  263A  3186   	fcall	_nrf24l01CELow
  7288                           
  7289                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7290  0666  30A0               	movlw	160
  7291  0667                     u180_27:	
  7292  0667  3200               	nop2
  7293  0668  0B89               	decfsz	9,f
  7294  0669  2E67               	goto	u180_27
  7295                           
  7296                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  7297  066A  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  7298  066B  3901               	andlw	1
  7299  066C  1075               	bcf	i1nrf24l01SetRXMode@config,0
  7300  066D  1D03               	skipz
  7301  066E  1475               	bsf	i1nrf24l01SetRXMode@config,0
  7302                           
  7303                           ;nrf24l01.c: 70: nrf24l01Send(0b00100000 | 0x00, config.byte);
  7304  066F  0875               	movf	i1nrf24l01SetRXMode@config,w
  7305  0670  00F4               	movwf	??i1_nrf24l01SetRXMode
  7306  0671  0874               	movf	??i1_nrf24l01SetRXMode,w
  7307  0672  00F1               	movwf	i1nrf24l01Send@data
  7308  0673  3020               	movlw	32
  7309  0674  318E  26E5  3186   	fcall	i1_nrf24l01Send
  7310                           
  7311                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7312  0677  30A0               	movlw	160
  7313  0678                     u181_27:	
  7314  0678  3200               	nop2
  7315  0679  0B89               	decfsz	9,f
  7316  067A  2E78               	goto	u181_27
  7317                           
  7318                           ;nrf24l01.c: 76: if (rxMode){
  7319  067B  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  7320  067C  1903               	btfsc	3,2
  7321  067D  2E85               	goto	i1l2285
  7322                           
  7323                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  7324  067E  318E  2637  3186   	fcall	_nrf24l01CEHigh
  7325                           
  7326                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7327  0681  30A0               	movlw	160
  7328  0682                     u182_27:	
  7329  0682  3200               	nop2
  7330  0683  0B89               	decfsz	9,f
  7331  0684  2E82               	goto	u182_27
  7332  0685                     i1l2285:	
  7333                           
  7334                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  7335  0685  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  7336  0686  3901               	andlw	1
  7337  0687  0020               	movlb	0	; select bank0
  7338  0688  115B               	bcf	_nrf24l01,2	;volatile
  7339  0689  1D03               	skipz
  7340  068A  155B               	bsf	_nrf24l01,2	;volatile
  7341  068B  0008               	return
  7342  068C                     __end_ofi1_nrf24l01SetRXMode:	
  7343                           
  7344                           	psect	text34
  7345  0EE5                     __ptext34:	
  7346 ;; *************** function i1_nrf24l01Send *****************
  7347 ;; Defined at:
  7348 ;;		line 9 in file "nrf24l01.c"
  7349 ;; Parameters:    Size  Location     Type
  7350 ;;  command         1    wreg     unsigned char 
  7351 ;;  data            1    1[COMMON] unsigned char 
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;  command         1    3[COMMON] unsigned char 
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  1    wreg      unsigned char 
  7356 ;; Registers used:
  7357 ;;		wreg, status,2, status,0, pclath, cstack
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7363 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7364 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7365 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7366 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7367 ;;Total ram usage:        3 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; Hardware stack levels required when called:    2
  7370 ;; This function calls:
  7371 ;;		_enableInterrupts
  7372 ;;		_nrf24l01SPIEnd
  7373 ;;		_nrf24l01SPISend
  7374 ;;		_nrf24l01SPIStart
  7375 ;; This function is called by:
  7376 ;;		_nrf24l01ReceivePacket
  7377 ;;		_nrf24l01ISR
  7378 ;;		i1_nrf24l01SetRXMode
  7379 ;; This function uses a non-reentrant model
  7380 ;;
  7381                           
  7382                           
  7383                           ;psect for function i1_nrf24l01Send
  7384  0EE5                     i1_nrf24l01Send:	
  7385                           
  7386                           ;incstack = 0
  7387                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  7388                           ;i1nrf24l01Send@command stored from wreg
  7389  0EE5  00F3               	movwf	i1nrf24l01Send@command
  7390                           
  7391                           ;nrf24l01.c: 12: enableInterrupts(0);
  7392  0EE6  3000               	movlw	0
  7393  0EE7  318E  2650  318E   	fcall	_enableInterrupts
  7394                           
  7395                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  7396  0EEA  318E  2658  318E   	fcall	_nrf24l01SPIStart
  7397                           
  7398                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  7399  0EED  0873               	movf	i1nrf24l01Send@command,w
  7400  0EEE  318E  2660  318E   	fcall	_nrf24l01SPISend
  7401                           
  7402                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  7403  0EF1  0871               	movf	i1nrf24l01Send@data,w
  7404  0EF2  318E  2660  318E   	fcall	_nrf24l01SPISend
  7405  0EF5  00F2               	movwf	??i1_nrf24l01Send
  7406  0EF6  0872               	movf	??i1_nrf24l01Send,w
  7407  0EF7  00F1               	movwf	i1nrf24l01Send@data
  7408                           
  7409                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  7410  0EF8  318E  2649  318E   	fcall	_nrf24l01SPIEnd
  7411                           
  7412                           ;nrf24l01.c: 27: enableInterrupts(1);
  7413  0EFB  3001               	movlw	1
  7414  0EFC  318E  2650         	fcall	_enableInterrupts
  7415                           
  7416                           ;nrf24l01.c: 29: return data;
  7417  0EFE  0871               	movf	i1nrf24l01Send@data,w
  7418  0EFF  0008               	return
  7419  0F00                     __end_ofi1_nrf24l01Send:	
  7420                           
  7421                           	psect	text35
  7422  0E58                     __ptext35:	
  7423 ;; *************** function _nrf24l01SPIStart *****************
  7424 ;; Defined at:
  7425 ;;		line 65 in file "interface.c"
  7426 ;; Parameters:    Size  Location     Type
  7427 ;;		None
  7428 ;; Auto vars:     Size  Location     Type
  7429 ;;		None
  7430 ;; Return value:  Size  Location     Type
  7431 ;;                  1    wreg      void 
  7432 ;; Registers used:
  7433 ;;		wreg, status,2, status,0, pclath, cstack
  7434 ;; Tracked objects:
  7435 ;;		On entry : 0/0
  7436 ;;		On exit  : 0/0
  7437 ;;		Unchanged: 0/0
  7438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7443 ;;Total ram usage:        0 bytes
  7444 ;; Hardware stack levels used:    1
  7445 ;; Hardware stack levels required when called:    8
  7446 ;; This function calls:
  7447 ;;		_nrf24l01CSLow
  7448 ;; This function is called by:
  7449 ;;		_nrf24l01Send
  7450 ;;		_nrf24l01ReceivePacket
  7451 ;;		_nrf24l01SendPacket
  7452 ;;		i1_nrf24l01Send
  7453 ;;		_nrf24l01SetTXPipe
  7454 ;; This function uses a non-reentrant model
  7455 ;;
  7456                           
  7457                           
  7458                           ;psect for function _nrf24l01SPIStart
  7459  0E58                     _nrf24l01SPIStart:	
  7460                           
  7461                           ;interface.c: 66: nrf24l01CSLow();
  7462                           
  7463                           ;incstack = 0
  7464 ;; hardware stack exceeded
  7465                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
  7466  0E58  318E  2640  318E   	fcall	_nrf24l01CSLow
  7467                           
  7468                           ;interface.c: 67: _delay((unsigned long)((10)*(16000000/4000000.0)));
  7469  0E5B  300D               	movlw	13
  7470  0E5C                     u183_27:	
  7471  0E5C  0B89               	decfsz	9,f
  7472  0E5D  2E5C               	goto	u183_27
  7473  0E5E  0000               	nop
  7474  0E5F  0008               	return
  7475  0E60                     __end_of_nrf24l01SPIStart:	
  7476                           
  7477                           	psect	text36
  7478  0E40                     __ptext36:	
  7479 ;; *************** function _nrf24l01CSLow *****************
  7480 ;; Defined at:
  7481 ;;		line 18 in file "interface.c"
  7482 ;; Parameters:    Size  Location     Type
  7483 ;;		None
  7484 ;; Auto vars:     Size  Location     Type
  7485 ;;		None
  7486 ;; Return value:  Size  Location     Type
  7487 ;;                  1    wreg      void 
  7488 ;; Registers used:
  7489 ;;		None
  7490 ;; Tracked objects:
  7491 ;;		On entry : 0/0
  7492 ;;		On exit  : 0/0
  7493 ;;		Unchanged: 0/0
  7494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7499 ;;Total ram usage:        0 bytes
  7500 ;; Hardware stack levels used:    1
  7501 ;; Hardware stack levels required when called:    7
  7502 ;; This function calls:
  7503 ;;		Nothing
  7504 ;; This function is called by:
  7505 ;;		_nrf24l01SPIStart
  7506 ;; This function uses a non-reentrant model
  7507 ;;
  7508                           
  7509                           
  7510                           ;psect for function _nrf24l01CSLow
  7511  0E40                     _nrf24l01CSLow:	
  7512                           
  7513                           ;interface.c: 19: PORTAbits.RA1 = 0;
  7514                           
  7515                           ;incstack = 0
  7516 ;; hardware stack exceeded
  7517                           ; Regs used in _nrf24l01CSLow: []
  7518  0E40  0020               	movlb	0	; select bank0
  7519  0E41  108C               	bcf	12,1	;volatile
  7520  0E42  0008               	return
  7521  0E43                     __end_of_nrf24l01CSLow:	
  7522                           
  7523                           	psect	text37
  7524  0E60                     __ptext37:	
  7525 ;; *************** function _nrf24l01SPISend *****************
  7526 ;; Defined at:
  7527 ;;		line 52 in file "interface.c"
  7528 ;; Parameters:    Size  Location     Type
  7529 ;;  data            1    wreg     unsigned char 
  7530 ;; Auto vars:     Size  Location     Type
  7531 ;;  data            1    0[COMMON] unsigned char 
  7532 ;; Return value:  Size  Location     Type
  7533 ;;                  1    wreg      unsigned char 
  7534 ;; Registers used:
  7535 ;;		wreg
  7536 ;; Tracked objects:
  7537 ;;		On entry : 0/0
  7538 ;;		On exit  : 0/0
  7539 ;;		Unchanged: 0/0
  7540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7545 ;;Total ram usage:        0 bytes
  7546 ;; Hardware stack levels used:    1
  7547 ;; Hardware stack levels required when called:    7
  7548 ;; This function calls:
  7549 ;;		Nothing
  7550 ;; This function is called by:
  7551 ;;		_nrf24l01Send
  7552 ;;		_nrf24l01ReceivePacket
  7553 ;;		_nrf24l01SendPacket
  7554 ;;		i1_nrf24l01Send
  7555 ;;		_nrf24l01SetTXPipe
  7556 ;; This function uses a non-reentrant model
  7557 ;;
  7558                           
  7559                           
  7560                           ;psect for function _nrf24l01SPISend
  7561  0E60                     _nrf24l01SPISend:	
  7562                           
  7563                           ;incstack = 0
  7564 ;; hardware stack exceeded
  7565                           ; Regs used in _nrf24l01SPISend: [wreg]
  7566                           ;nrf24l01SPISend@data stored from wreg
  7567  0E60  00F0               	movwf	nrf24l01SPISend@data
  7568                           
  7569                           ;interface.c: 53: SSP1BUF = data;
  7570  0E61  0870               	movf	nrf24l01SPISend@data,w
  7571  0E62  0024               	movlb	4	; select bank4
  7572  0E63  0091               	movwf	17	;volatile
  7573                           
  7574                           ;interface.c: 55: PORTCbits.RC4 = 1;
  7575  0E64  0020               	movlb	0	; select bank0
  7576  0E65  160E               	bsf	14,4	;volatile
  7577  0E66                     i1l94:	
  7578                           ;interface.c: 57: while (!SSP1STATbits.BF){
  7579                           
  7580  0E66  0024               	movlb	4	; select bank4
  7581  0E67  1814               	btfsc	20,0	;volatile
  7582  0E68  2E6B               	goto	i1l1939
  7583                           
  7584                           ;interface.c: 58: __nop();
  7585  0E69  0000               	nop
  7586  0E6A  2E66               	goto	i1l94
  7587  0E6B                     i1l1939:	
  7588                           
  7589                           ;interface.c: 59: };interface.c: 61: return SSP1BUF;
  7590  0E6B  0811               	movf	17,w	;volatile
  7591  0E6C  0008               	return
  7592  0E6D                     __end_of_nrf24l01SPISend:	
  7593                           
  7594                           	psect	text38
  7595  0E49                     __ptext38:	
  7596 ;; *************** function _nrf24l01SPIEnd *****************
  7597 ;; Defined at:
  7598 ;;		line 71 in file "interface.c"
  7599 ;; Parameters:    Size  Location     Type
  7600 ;;		None
  7601 ;; Auto vars:     Size  Location     Type
  7602 ;;		None
  7603 ;; Return value:  Size  Location     Type
  7604 ;;                  1    wreg      void 
  7605 ;; Registers used:
  7606 ;;		wreg, status,2, status,0, pclath, cstack
  7607 ;; Tracked objects:
  7608 ;;		On entry : 0/0
  7609 ;;		On exit  : 0/0
  7610 ;;		Unchanged: 0/0
  7611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7616 ;;Total ram usage:        0 bytes
  7617 ;; Hardware stack levels used:    1
  7618 ;; Hardware stack levels required when called:    8
  7619 ;; This function calls:
  7620 ;;		_nrf24l01CSHigh
  7621 ;; This function is called by:
  7622 ;;		_nrf24l01Send
  7623 ;;		_nrf24l01ReceivePacket
  7624 ;;		_nrf24l01SendPacket
  7625 ;;		i1_nrf24l01Send
  7626 ;;		_nrf24l01SetTXPipe
  7627 ;; This function uses a non-reentrant model
  7628 ;;
  7629                           
  7630                           
  7631                           ;psect for function _nrf24l01SPIEnd
  7632  0E49                     _nrf24l01SPIEnd:	
  7633                           
  7634                           ;interface.c: 72: _delay((unsigned long)((10)*(16000000/4000000.0)));
  7635                           
  7636                           ;incstack = 0
  7637 ;; hardware stack exceeded
  7638                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
  7639  0E49  300D               	movlw	13
  7640  0E4A                     u184_27:	
  7641  0E4A  0B89               	decfsz	9,f
  7642  0E4B  2E4A               	goto	u184_27
  7643  0E4C  0000               	nop
  7644                           
  7645                           ;interface.c: 73: nrf24l01CSHigh();
  7646  0E4D  318E  263D         	fcall	_nrf24l01CSHigh
  7647  0E4F  0008               	return
  7648  0E50                     __end_of_nrf24l01SPIEnd:	
  7649                           
  7650                           	psect	text39
  7651  0E3D                     __ptext39:	
  7652 ;; *************** function _nrf24l01CSHigh *****************
  7653 ;; Defined at:
  7654 ;;		line 23 in file "interface.c"
  7655 ;; Parameters:    Size  Location     Type
  7656 ;;		None
  7657 ;; Auto vars:     Size  Location     Type
  7658 ;;		None
  7659 ;; Return value:  Size  Location     Type
  7660 ;;                  1    wreg      void 
  7661 ;; Registers used:
  7662 ;;		None
  7663 ;; Tracked objects:
  7664 ;;		On entry : 0/0
  7665 ;;		On exit  : 0/0
  7666 ;;		Unchanged: 0/0
  7667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7672 ;;Total ram usage:        0 bytes
  7673 ;; Hardware stack levels used:    1
  7674 ;; Hardware stack levels required when called:    7
  7675 ;; This function calls:
  7676 ;;		Nothing
  7677 ;; This function is called by:
  7678 ;;		_nrf24l01SPIEnd
  7679 ;; This function uses a non-reentrant model
  7680 ;;
  7681                           
  7682                           
  7683                           ;psect for function _nrf24l01CSHigh
  7684  0E3D                     _nrf24l01CSHigh:	
  7685                           
  7686                           ;interface.c: 24: PORTAbits.RA1 = 1;
  7687                           
  7688                           ;incstack = 0
  7689 ;; hardware stack exceeded
  7690                           ; Regs used in _nrf24l01CSHigh: []
  7691  0E3D  0020               	movlb	0	; select bank0
  7692  0E3E  148C               	bsf	12,1	;volatile
  7693  0E3F  0008               	return
  7694  0E40                     __end_of_nrf24l01CSHigh:	
  7695                           
  7696                           	psect	text40
  7697  0E50                     __ptext40:	
  7698 ;; *************** function _enableInterrupts *****************
  7699 ;; Defined at:
  7700 ;;		line 77 in file "interface.c"
  7701 ;; Parameters:    Size  Location     Type
  7702 ;;  enable          1    wreg     unsigned char 
  7703 ;; Auto vars:     Size  Location     Type
  7704 ;;  enable          1    0[COMMON] unsigned char 
  7705 ;; Return value:  Size  Location     Type
  7706 ;;                  1    wreg      void 
  7707 ;; Registers used:
  7708 ;;		wreg, status,0
  7709 ;; Tracked objects:
  7710 ;;		On entry : 0/0
  7711 ;;		On exit  : 0/0
  7712 ;;		Unchanged: 0/0
  7713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7718 ;;Total ram usage:        0 bytes
  7719 ;; Hardware stack levels used:    1
  7720 ;; Hardware stack levels required when called:    7
  7721 ;; This function calls:
  7722 ;;		Nothing
  7723 ;; This function is called by:
  7724 ;;		_nrf24l01Send
  7725 ;;		_nrf24l01SendPacket
  7726 ;;		i1_nrf24l01Send
  7727 ;; This function uses a non-reentrant model
  7728 ;;
  7729                           
  7730                           
  7731                           ;psect for function _enableInterrupts
  7732  0E50                     _enableInterrupts:	
  7733                           
  7734                           ;incstack = 0
  7735 ;; hardware stack exceeded
  7736                           ; Regs used in _enableInterrupts: [wreg+status,0]
  7737                           ;enableInterrupts@enable stored from wreg
  7738  0E50  00F0               	movwf	enableInterrupts@enable
  7739                           
  7740                           ;interface.c: 78: PIE0bits.INTE = enable;
  7741  0E51  0C70               	rrf	enableInterrupts@enable,w
  7742  0E52  0021               	movlb	1	; select bank1
  7743  0E53  1C03               	skipc
  7744  0E54  1010               	bcf	16,0	;volatile
  7745  0E55  1803               	skipnc
  7746  0E56  1410               	bsf	16,0	;volatile
  7747  0E57  0008               	return
  7748  0E58                     __end_of_enableInterrupts:	
  7749                           
  7750                           	psect	text41
  7751  0E3A                     __ptext41:	
  7752 ;; *************** function _nrf24l01CELow *****************
  7753 ;; Defined at:
  7754 ;;		line 8 in file "interface.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;		None
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;		None
  7759 ;; Return value:  Size  Location     Type
  7760 ;;                  1    wreg      void 
  7761 ;; Registers used:
  7762 ;;		None
  7763 ;; Tracked objects:
  7764 ;;		On entry : 0/0
  7765 ;;		On exit  : 0/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;Total ram usage:        0 bytes
  7773 ;; Hardware stack levels used:    1
  7774 ;; Hardware stack levels required when called:    7
  7775 ;; This function calls:
  7776 ;;		Nothing
  7777 ;; This function is called by:
  7778 ;;		_nrf24l01SetRXMode
  7779 ;;		_nrf24l01ReceivePacket
  7780 ;;		_nrf24l01SendPacket
  7781 ;;		_nrf24l01Init
  7782 ;;		i1_nrf24l01SetRXMode
  7783 ;; This function uses a non-reentrant model
  7784 ;;
  7785                           
  7786                           
  7787                           ;psect for function _nrf24l01CELow
  7788  0E3A                     _nrf24l01CELow:	
  7789                           
  7790                           ;interface.c: 9: PORTAbits.RA0 = 0;
  7791                           
  7792                           ;incstack = 0
  7793 ;; hardware stack exceeded
  7794                           ; Regs used in _nrf24l01CELow: []
  7795  0E3A  0020               	movlb	0	; select bank0
  7796  0E3B  100C               	bcf	12,0	;volatile
  7797  0E3C  0008               	return
  7798  0E3D                     __end_of_nrf24l01CELow:	
  7799                           
  7800                           	psect	text42
  7801  0E37                     __ptext42:	
  7802 ;; *************** function _nrf24l01CEHigh *****************
  7803 ;; Defined at:
  7804 ;;		line 13 in file "interface.c"
  7805 ;; Parameters:    Size  Location     Type
  7806 ;;		None
  7807 ;; Auto vars:     Size  Location     Type
  7808 ;;		None
  7809 ;; Return value:  Size  Location     Type
  7810 ;;                  1    wreg      void 
  7811 ;; Registers used:
  7812 ;;		None
  7813 ;; Tracked objects:
  7814 ;;		On entry : 0/0
  7815 ;;		On exit  : 0/0
  7816 ;;		Unchanged: 0/0
  7817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7822 ;;Total ram usage:        0 bytes
  7823 ;; Hardware stack levels used:    1
  7824 ;; Hardware stack levels required when called:    7
  7825 ;; This function calls:
  7826 ;;		Nothing
  7827 ;; This function is called by:
  7828 ;;		_nrf24l01SetRXMode
  7829 ;;		_nrf24l01ReceivePacket
  7830 ;;		_nrf24l01SendPacket
  7831 ;;		_nrf24l01Init
  7832 ;;		i1_nrf24l01SetRXMode
  7833 ;; This function uses a non-reentrant model
  7834 ;;
  7835                           
  7836                           
  7837                           ;psect for function _nrf24l01CEHigh
  7838  0E37                     _nrf24l01CEHigh:	
  7839                           
  7840                           ;interface.c: 14: PORTAbits.RA0 = 1;
  7841                           
  7842                           ;incstack = 0
  7843 ;; hardware stack exceeded
  7844                           ; Regs used in _nrf24l01CEHigh: []
  7845  0E37  0020               	movlb	0	; select bank0
  7846  0E38  140C               	bsf	12,0	;volatile
  7847  0E39  0008               	return
  7848  0E3A                     __end_of_nrf24l01CEHigh:	
  7849                           
  7850                           	psect	text43
  7851  07C8                     __ptext43:	
  7852 ;; *************** function _strcmp *****************
  7853 ;; Defined at:
  7854 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  7855 ;; Parameters:    Size  Location     Type
  7856 ;;  s1              1    wreg     PTR const unsigned char 
  7857 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7858 ;;		 -> loop@packet(33), 
  7859 ;;  s2              1    0[COMMON] PTR const unsigned char 
  7860 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  7861 ;; Auto vars:     Size  Location     Type
  7862 ;;  s1              1    4[COMMON] PTR const unsigned char 
  7863 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7864 ;;		 -> loop@packet(33), 
  7865 ;;  r               1    3[COMMON] char 
  7866 ;; Return value:  Size  Location     Type
  7867 ;;                  2    0[COMMON] int 
  7868 ;; Registers used:
  7869 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7870 ;; Tracked objects:
  7871 ;;		On entry : 0/0
  7872 ;;		On exit  : 0/0
  7873 ;;		Unchanged: 0/0
  7874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7875 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7876 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7877 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7878 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7879 ;;Total ram usage:        5 bytes
  7880 ;; Hardware stack levels used:    1
  7881 ;; This function calls:
  7882 ;;		Nothing
  7883 ;; This function is called by:
  7884 ;;		_nrf24l01CheckACK
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           
  7889                           ;psect for function _strcmp
  7890  07C8                     _strcmp:	
  7891                           
  7892                           ;incstack = 0
  7893                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
  7894                           ;strcmp@s1 stored from wreg
  7895  07C8  00F4               	movwf	strcmp@s1
  7896  07C9  2FD2               	goto	i1l2205
  7897  07CA                     i1l2201:	
  7898  07CA  3001               	movlw	1
  7899  07CB  00F2               	movwf	??_strcmp
  7900  07CC  0872               	movf	??_strcmp,w
  7901  07CD  07F4               	addwf	strcmp@s1,f
  7902  07CE  3001               	movlw	1
  7903  07CF  00F2               	movwf	??_strcmp
  7904  07D0  0872               	movf	??_strcmp,w
  7905  07D1  07F0               	addwf	strcmp@s2,f
  7906  07D2                     i1l2205:	
  7907  07D2  0874               	movf	strcmp@s1,w
  7908  07D3  0086               	movwf	6
  7909  07D4  0187               	clrf	7
  7910  07D5  0870               	movf	strcmp@s2,w
  7911  07D6  0084               	movwf	4
  7912  07D7  3001               	movlw	1	; select bank2/3
  7913  07D8  0085               	movwf	5
  7914  07D9  0300               	decf	0,w
  7915  07DA  3AFF               	xorlw	255
  7916  07DB  0701               	addwf	1,w
  7917  07DC  00F2               	movwf	??_strcmp
  7918  07DD  0872               	movf	??_strcmp,w
  7919  07DE  00F3               	movwf	strcmp@r
  7920  07DF  0873               	movf	strcmp@r,w
  7921  07E0  1D03               	btfss	3,2
  7922  07E1  2FE8               	goto	i1l2209
  7923  07E2  0874               	movf	strcmp@s1,w
  7924  07E3  0086               	movwf	6
  7925  07E4  0187               	clrf	7
  7926  07E5  0801               	movf	1,w
  7927  07E6  1D03               	btfss	3,2
  7928  07E7  2FCA               	goto	i1l2201
  7929  07E8                     i1l2209:	
  7930  07E8  0873               	movf	strcmp@r,w
  7931  07E9  00F0               	movwf	?_strcmp
  7932  07EA  01F1               	clrf	?_strcmp+1
  7933  07EB  1BF0               	btfsc	?_strcmp,7
  7934  07EC  03F1               	decf	?_strcmp+1,f
  7935  07ED  0008               	return
  7936  07EE                     __end_of_strcmp:	
  7937                           
  7938                           	psect	text44
  7939  0E81                     __ptext44:	
  7940 ;; *************** function _exception *****************
  7941 ;; Defined at:
  7942 ;;		line 81 in file "interface.c"
  7943 ;; Parameters:    Size  Location     Type
  7944 ;;  exception       1    wreg     unsigned char 
  7945 ;; Auto vars:     Size  Location     Type
  7946 ;;  exception       1   12[COMMON] unsigned char 
  7947 ;; Return value:  Size  Location     Type
  7948 ;;                  1    wreg      void 
  7949 ;; Registers used:
  7950 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7951 ;; Tracked objects:
  7952 ;;		On entry : 0/0
  7953 ;;		On exit  : 0/0
  7954 ;;		Unchanged: 0/0
  7955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7957 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7958 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7959 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7960 ;;Total ram usage:        3 bytes
  7961 ;; Hardware stack levels used:    1
  7962 ;; Hardware stack levels required when called:    2
  7963 ;; This function calls:
  7964 ;;		___wmul
  7965 ;;		i1_flashUpdate
  7966 ;; This function is called by:
  7967 ;;		_nrf24l01ISR
  7968 ;; This function uses a non-reentrant model
  7969 ;;
  7970                           
  7971                           
  7972                           ;psect for function _exception
  7973  0E81                     _exception:	
  7974                           
  7975                           ;incstack = 0
  7976                           ; Regs used in _exception: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7977                           ;exception@exception stored from wreg
  7978  0E81  00FC               	movwf	exception@exception
  7979                           
  7980                           ;interface.c: 82: romData.bootMode = (unsigned) (exception * 10);
  7981  0E82  087C               	movf	exception@exception,w
  7982  0E83  00FA               	movwf	??_exception
  7983  0E84  01FB               	clrf	??_exception+1
  7984  0E85  087A               	movf	??_exception,w
  7985  0E86  00F0               	movwf	___wmul@multiplier
  7986  0E87  087B               	movf	??_exception+1,w
  7987  0E88  00F1               	movwf	___wmul@multiplier+1
  7988  0E89  300A               	movlw	10
  7989  0E8A  00F2               	movwf	___wmul@multiplicand
  7990  0E8B  3000               	movlw	0
  7991  0E8C  00F3               	movwf	___wmul@multiplicand+1
  7992  0E8D  318E  26CA  318E   	fcall	___wmul
  7993  0E90  0871               	movf	?___wmul+1,w
  7994  0E91  0020               	movlb	0	; select bank0
  7995  0E92  00EE               	movwf	_romData+18
  7996  0E93  0870               	movf	?___wmul,w
  7997  0E94  00ED               	movwf	_romData+17
  7998                           
  7999                           ;interface.c: 83: flashUpdate();
  8000  0E95  318F  2797         	fcall	i1_flashUpdate
  8001  0E97  0001               	reset	;# 
  8002  0E98  0008               	return
  8003  0E99                     __end_of_exception:	
  8004                           
  8005                           	psect	text45
  8006  0F97                     __ptext45:	
  8007 ;; *************** function i1_flashUpdate *****************
  8008 ;; Defined at:
  8009 ;;		line 97 in file "flash.c"
  8010 ;; Parameters:    Size  Location     Type
  8011 ;;		None
  8012 ;; Auto vars:     Size  Location     Type
  8013 ;;  flashUpdate     2    8[COMMON] unsigned int 
  8014 ;; Return value:  Size  Location     Type
  8015 ;;                  1    wreg      void 
  8016 ;; Registers used:
  8017 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8018 ;; Tracked objects:
  8019 ;;		On entry : 0/0
  8020 ;;		On exit  : 0/0
  8021 ;;		Unchanged: 0/0
  8022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8024 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8025 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8026 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8027 ;;Total ram usage:        4 bytes
  8028 ;; Hardware stack levels used:    1
  8029 ;; Hardware stack levels required when called:    1
  8030 ;; This function calls:
  8031 ;;		i1_flashWriteByte
  8032 ;; This function is called by:
  8033 ;;		_exception
  8034 ;; This function uses a non-reentrant model
  8035 ;;
  8036                           
  8037                           
  8038                           ;psect for function i1_flashUpdate
  8039  0F97                     i1_flashUpdate:	
  8040                           
  8041                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  8042                           
  8043                           ;incstack = 0
  8044                           ; Regs used in i1_flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8045  0F97  01F8               	clrf	i1flashUpdate@i
  8046  0F98  01F9               	clrf	i1flashUpdate@i+1
  8047  0F99                     L3:	
  8048  0F99  3000               	movlw	0
  8049  0F9A  0279               	subwf	i1flashUpdate@i+1,w
  8050  0F9B  3020               	movlw	32
  8051  0F9C  1903               	skipnz
  8052  0F9D  0278               	subwf	i1flashUpdate@i,w
  8053  0F9E  1803               	btfsc	3,0
  8054  0F9F  0008               	return
  8055                           
  8056                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  8057  0FA0  0879               	movf	i1flashUpdate@i+1,w
  8058  0FA1  00F1               	movwf	i1flashWriteByte@offset+1
  8059  0FA2  0878               	movf	i1flashUpdate@i,w
  8060  0FA3  00F0               	movwf	i1flashWriteByte@offset
  8061  0FA4  0878               	movf	i1flashUpdate@i,w
  8062  0FA5  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  8063  0FA6  0086               	movwf	6
  8064  0FA7  3001               	movlw	1	; select bank2/3
  8065  0FA8  0087               	movwf	7
  8066  0FA9  0801               	movf	1,w
  8067  0FAA  00F6               	movwf	??i1_flashUpdate
  8068  0FAB  01F7               	clrf	??i1_flashUpdate+1
  8069  0FAC  0876               	movf	??i1_flashUpdate,w
  8070  0FAD  00F2               	movwf	i1flashWriteByte@data
  8071  0FAE  0877               	movf	??i1_flashUpdate+1,w
  8072  0FAF  00F3               	movwf	i1flashWriteByte@data+1
  8073  0FB0  3187  2724  318F   	fcall	i1_flashWriteByte
  8074  0FB3  3001               	movlw	1
  8075  0FB4  07F8               	addwf	i1flashUpdate@i,f
  8076  0FB5  3000               	movlw	0
  8077  0FB6  3DF9               	addwfc	i1flashUpdate@i+1,f
  8078  0FB7  2F99               	goto	L3
  8079  0FB8                     __end_ofi1_flashUpdate:	
  8080                           
  8081                           	psect	text46
  8082  0724                     __ptext46:	
  8083 ;; *************** function i1_flashWriteByte *****************
  8084 ;; Defined at:
  8085 ;;		line 8 in file "flash.c"
  8086 ;; Parameters:    Size  Location     Type
  8087 ;;  offset          2    0[COMMON] unsigned int 
  8088 ;;  data            2    2[COMMON] unsigned int 
  8089 ;; Auto vars:     Size  Location     Type
  8090 ;;  flashWriteBy    2    4[COMMON] unsigned int 
  8091 ;; Return value:  Size  Location     Type
  8092 ;;                  1    wreg      void 
  8093 ;; Registers used:
  8094 ;;		wreg, status,2, status,0
  8095 ;; Tracked objects:
  8096 ;;		On entry : 0/0
  8097 ;;		On exit  : 0/0
  8098 ;;		Unchanged: 0/0
  8099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8100 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8101 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8103 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8104 ;;Total ram usage:        6 bytes
  8105 ;; Hardware stack levels used:    1
  8106 ;; This function calls:
  8107 ;;		Nothing
  8108 ;; This function is called by:
  8109 ;;		i1_flashUpdate
  8110 ;; This function uses a non-reentrant model
  8111 ;;
  8112                           
  8113                           
  8114                           ;psect for function i1_flashWriteByte
  8115  0724                     i1_flashWriteByte:	
  8116                           
  8117                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  8118                           
  8119                           ;incstack = 0
  8120                           ; Regs used in i1_flashWriteByte: [wreg+status,2+status,0]
  8121  0724  138B               	bcf	11,7	;volatile
  8122                           
  8123                           ;flash.c: 15: PMCON1 = 0x00;
  8124  0725  0031               	movlb	17	; select bank17
  8125  0726  0195               	clrf	21	;volsfr
  8126                           
  8127                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  8128  0727  0870               	movf	i1flashWriteByte@offset,w
  8129  0728  3EE0               	addlw	224
  8130  0729  00F4               	movwf	i1flashWriteByte@address
  8131  072A  301F               	movlw	31
  8132  072B  3D71               	addwfc	i1flashWriteByte@offset+1,w
  8133  072C  00F5               	movwf	i1flashWriteByte@address+1
  8134                           
  8135                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  8136  072D  0874               	movf	i1flashWriteByte@address,w
  8137  072E  0091               	movwf	17	;volatile
  8138                           
  8139                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  8140  072F  0875               	movf	i1flashWriteByte@address+1,w
  8141  0730  0092               	movwf	18	;volatile
  8142                           
  8143                           ;flash.c: 21: PMCON1bits.FREE = 1;
  8144  0731  1615               	bsf	21,4	;volsfr
  8145                           
  8146                           ;flash.c: 22: PMCON1bits.WREN = 1;
  8147  0732  1515               	bsf	21,2	;volsfr
  8148                           
  8149                           ;flash.c: 24: PMCON2 = 0x55;
  8150  0733  3055               	movlw	85
  8151  0734  0096               	movwf	22	;volsfr
  8152                           
  8153                           ;flash.c: 25: PMCON2 = 0xAA;
  8154  0735  30AA               	movlw	170
  8155  0736  0096               	movwf	22	;volsfr
  8156                           
  8157                           ;flash.c: 27: PMCON1bits.WR = 1;
  8158  0737  1495               	bsf	21,1	;volsfr
  8159                           
  8160                           ;flash.c: 29: __nop();
  8161  0738  0000               	nop
  8162                           
  8163                           ;flash.c: 30: __nop();
  8164  0739  0000               	nop
  8165                           
  8166                           ;flash.c: 32: PMCON1bits.WREN = 0;
  8167  073A  0031               	movlb	17	; select bank17
  8168  073B  1115               	bcf	21,2	;volsfr
  8169                           
  8170                           ;flash.c: 36: PMCON1 = 0x00;
  8171  073C  0195               	clrf	21	;volsfr
  8172                           
  8173                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  8174  073D  0874               	movf	i1flashWriteByte@address,w
  8175  073E  0091               	movwf	17	;volatile
  8176                           
  8177                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  8178  073F  0875               	movf	i1flashWriteByte@address+1,w
  8179  0740  0092               	movwf	18	;volatile
  8180                           
  8181                           ;flash.c: 41: PMCON1bits.FREE = 0;
  8182  0741  1215               	bcf	21,4	;volsfr
  8183                           
  8184                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  8185  0742  1695               	bsf	21,5	;volsfr
  8186                           
  8187                           ;flash.c: 43: PMCON1bits.WREN = 1;
  8188  0743  1515               	bsf	21,2	;volsfr
  8189                           
  8190                           ;flash.c: 45: PMDATL = (data >> 0);
  8191  0744  0872               	movf	i1flashWriteByte@data,w
  8192  0745  0093               	movwf	19	;volatile
  8193                           
  8194                           ;flash.c: 46: PMDATH = (data >> 8);
  8195  0746  0873               	movf	i1flashWriteByte@data+1,w
  8196  0747  0094               	movwf	20	;volatile
  8197                           
  8198                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  8199  0748  1295               	bcf	21,5	;volsfr
  8200                           
  8201                           ;flash.c: 50: PMCON2 = 0x55;
  8202  0749  3055               	movlw	85
  8203  074A  0096               	movwf	22	;volsfr
  8204                           
  8205                           ;flash.c: 51: PMCON2 = 0xAA;
  8206  074B  30AA               	movlw	170
  8207  074C  0096               	movwf	22	;volsfr
  8208                           
  8209                           ;flash.c: 53: PMCON1bits.WR = 1;
  8210  074D  1495               	bsf	21,1	;volsfr
  8211                           
  8212                           ;flash.c: 55: __nop();
  8213  074E  0000               	nop
  8214                           
  8215                           ;flash.c: 56: __nop();
  8216  074F  0000               	nop
  8217                           
  8218                           ;flash.c: 58: PMCON1bits.WREN = 0;
  8219  0750  0031               	movlb	17	; select bank17
  8220  0751  1115               	bcf	21,2	;volsfr
  8221                           
  8222                           ;flash.c: 61: INTCONbits.GIE = 1;
  8223  0752  178B               	bsf	11,7	;volatile
  8224  0753  0008               	return
  8225  0754                     __end_ofi1_flashWriteByte:	
  8226                           
  8227                           	psect	text47
  8228  0ECA                     __ptext47:	
  8229 ;; *************** function ___wmul *****************
  8230 ;; Defined at:
  8231 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  8232 ;; Parameters:    Size  Location     Type
  8233 ;;  multiplier      2    0[COMMON] unsigned int 
  8234 ;;  multiplicand    2    2[COMMON] unsigned int 
  8235 ;; Auto vars:     Size  Location     Type
  8236 ;;  product         2    4[COMMON] unsigned int 
  8237 ;; Return value:  Size  Location     Type
  8238 ;;                  2    0[COMMON] unsigned int 
  8239 ;; Registers used:
  8240 ;;		wreg, status,2, status,0
  8241 ;; Tracked objects:
  8242 ;;		On entry : 0/0
  8243 ;;		On exit  : 0/0
  8244 ;;		Unchanged: 0/0
  8245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8246 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8247 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8249 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;Total ram usage:        6 bytes
  8251 ;; Hardware stack levels used:    1
  8252 ;; This function calls:
  8253 ;;		Nothing
  8254 ;; This function is called by:
  8255 ;;		_exception
  8256 ;; This function uses a non-reentrant model
  8257 ;;
  8258                           
  8259                           
  8260                           ;psect for function ___wmul
  8261  0ECA                     ___wmul:	
  8262                           
  8263                           ;incstack = 0
  8264                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8265  0ECA  01F4               	clrf	___wmul@product
  8266  0ECB  01F5               	clrf	___wmul@product+1
  8267  0ECC                     i1l2227:	
  8268  0ECC  1C70               	btfss	___wmul@multiplier,0
  8269  0ECD  2ED2               	goto	i1l464
  8270  0ECE  0872               	movf	___wmul@multiplicand,w
  8271  0ECF  07F4               	addwf	___wmul@product,f
  8272  0ED0  0873               	movf	___wmul@multiplicand+1,w
  8273  0ED1  3DF5               	addwfc	___wmul@product+1,f
  8274  0ED2                     i1l464:	
  8275  0ED2  3001               	movlw	1
  8276  0ED3                     u112_25:	
  8277  0ED3  35F2               	lslf	___wmul@multiplicand,f
  8278  0ED4  0DF3               	rlf	___wmul@multiplicand+1,f
  8279  0ED5  0B89               	decfsz	9,f
  8280  0ED6  2ED3               	goto	u112_25
  8281  0ED7  3001               	movlw	1
  8282  0ED8                     u113_25:	
  8283  0ED8  36F1               	lsrf	___wmul@multiplier+1,f
  8284  0ED9  0CF0               	rrf	___wmul@multiplier,f
  8285  0EDA  0B89               	decfsz	9,f
  8286  0EDB  2ED8               	goto	u113_25
  8287  0EDC  0870               	movf	___wmul@multiplier,w
  8288  0EDD  0471               	iorwf	___wmul@multiplier+1,w
  8289  0EDE  1D03               	btfss	3,2
  8290  0EDF  2ECC               	goto	i1l2227
  8291  0EE0  0875               	movf	___wmul@product+1,w
  8292  0EE1  00F1               	movwf	?___wmul+1
  8293  0EE2  0874               	movf	___wmul@product,w
  8294  0EE3  00F0               	movwf	?___wmul
  8295  0EE4  0008               	return
  8296  0EE5                     __end_of___wmul:	
  8297  007E                     btemp	set	126	;btemp
  8298  007E                     int$flags	set	126
  8299  007E                     wtemp0	set	126


Data Sizes:
    Strings     40
    Constant    25
    Data        0
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     57      79
    BANK1            80     67      71
    BANK2            80      0      65
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_9(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK2[32]), RXPacket(BANK2[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_10(CODE[5]), STR_8(CODE[6]), STR_7(CODE[5]), STR_6(CODE[4]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[4]), STR_2(CODE[2]), 
		 -> setMessage@tempString(BANK0[16]), STR_1(CODE[2]), romData.name(BANK0[16]), romData(BANK0[19]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    ultoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> setMessage@tempString(BANK0[16]), 

    sp__ltoa	PTR unsigned char  size(1) Largest target is 0

    nrf24l01SetRXPipe@name	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    nrf24l01SendPacket@Packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    TXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), 

    checkTXPower@rxPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), 

    sp__ultoa	PTR unsigned char  size(1) Largest target is 16
		 -> setMessage@tempString(BANK0[16]), 

    setMessage@topic	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_10(CODE[5]), STR_8(CODE[6]), STR_7(CODE[5]), STR_6(CODE[4]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[4]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    setMessage@packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_exception
    _nrf24l01ReceivePacket->i1_memset
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send
    _exception->i1_flashUpdate
    i1_flashUpdate->i1_flashWriteByte

Critical Paths under _main in BANK0

    _main->_loop
    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01SetRXPipe->_nrf24l01GetPipe
    _nrf24l01GetPipe->___llmod
    _loop->_setMessage
    _setMessage->_getADCValue
    _ultoa->___lldiv
    _nrf24l01SendPacket->_strlen
    _nrf24l01SetRXMode->_nrf24l01Send
    _getADCValue->___lldiv
    _checkTXPower->_nrf24l01ChangeTXPower
    _nrf24l01ChangeTXPower->_nrf24l01Send
    _flashUpdate->_flashWriteByte
    _flashRealod->_flashReadByte

Critical Paths under _ISR in BANK0

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK1

    _main->_loop

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                34    34      0   34484
                                             56 BANK0      1     1      0
                                             34 BANK1     33    33      0
                        _flashRealod
                        _flashUpdate
                               _loop
                       _nrf24l01Init
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     200
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    5640
                                             36 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                9     9      0    5640
                                             27 BANK0      9     9      0
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SetRXPipe                                    5     5      0    3266
                                             22 BANK0      5     5      0
                    _nrf24l01GetPipe
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (4) _nrf24l01GetPipe                                     11    11      0     941
                                             11 BANK0     11    11      0
                            ___llmod
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _loop                                                38    38      0   17192
                                             52 BANK0      4     4      0
                                              0 BANK1     34    34      0
                       _checkTXPower
                        _getADCValue
                       _nrf24l01Send
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setMessage                                          23    17      6    5256
                                             29 BANK0     23    17      6
                        _getADCValue (ARG)
                             _memset
                             _strcat
                              _ultoa
 ---------------------------------------------------------------------------------
 (2) _ultoa                                               13     7      6    1914
                                             15 BANK0     13     7      6
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     515
                                              1 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (2) _strcat                                               5     3      2     723
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     565
                                              1 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendPacket                                   4     4      0    5386
                                              9 BANK0      4     4      0
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01ChangeTXPower
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               8     6      2     162
                                              1 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    2277
                                              4 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         14    10      4    1460
                                             15 BANK0     14    10      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     270
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     696
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _checkTXPower                                         2     2      0    2457
                                              8 BANK0      2     2      0
              _nrf24l01ChangeTXPower
                _nrf24l01GetRXPacket
 ---------------------------------------------------------------------------------
 (3) _nrf24l01GetRXPacket                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01ChangeTXPower                                4     2      2    2434
                                              4 BANK0      4     2      2
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Send                                         3     2      1    2143
                                              1 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (1) _flashUpdate                                          4     4      0     423
                                              7 BANK0      4     4      0
                     _flashWriteByte
 ---------------------------------------------------------------------------------
 (2) _flashWriteByte                                       6     2      4     333
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _flashRealod                                          3     3      0     271
                                             10 BANK0      3     3      0
                      _flashReadByte
 ---------------------------------------------------------------------------------
 (2) _flashReadByte                                        9     7      2     181
                                              1 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    2674
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (8) _nrf24l01ISR                                          2     2      0    2674
                                             13 COMMON     1     1      0
                                              0 BANK0      1     1      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceivePacket
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) _nrf24l01ReceivePacket                                3     3      0     639
                                              8 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_memset                                            8     2      6     211
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (9) _nrf24l01CheckACK                                     1     1      0     617
                                              7 COMMON     1     1      0
                             _strcmp
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) i1_nrf24l01SetRXMode                                  3     3      0     401
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_nrf24l01Send                                      3     2      1     267
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _strcmp                                              5     3      2     216
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (9) _exception                                            3     3      0     589
                                             10 COMMON     3     3      0
                             ___wmul
                      i1_flashUpdate
 ---------------------------------------------------------------------------------
 (10) i1_flashUpdate                                       4     4      0     297
                                              6 COMMON     4     4      0
                   i1_flashWriteByte
 ---------------------------------------------------------------------------------
 (11) i1_flashWriteByte                                    6     2      4     207
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     270
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _flashRealod
     _flashReadByte
   _flashUpdate
     _flashWriteByte
   _loop
     _checkTXPower
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01GetRXPacket
     _getADCValue
       ___lldiv
       ___lmul
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _nrf24l01SendPacket
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strlen
     _setMessage
       _getADCValue (ARG)
         ___lldiv
         ___lmul
       _memset (ARG)
       _strcat (ARG)
       _ultoa (ARG)
         ___lldiv
         ___llmod
     _sleep
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01GetPipe
           ___llmod
           _strlen
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendPacket
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01ChangeTXPower
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _strlen
   _setMessage
     _getADCValue (ARG)
       ___lldiv
       ___lmul
     _memset (ARG)
     _strcat (ARG)
     _ultoa (ARG)
       ___lldiv
       ___llmod
   _sleep
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
       ___wmul
       i1_flashUpdate
         i1_flashWriteByte
     _nrf24l01CheckACK
       _strcmp
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01ReceivePacket
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     39      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     43      47       7       88.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      41       9       81.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      E5      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      E5      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Tue Jul 17 14:31:10 2018

           flashReadByte@result 0026                    flashRealod@i 002B                     __CFG_CP$OFF 0000  
           ___wmul@multiplicand 0072             nrf24l01Send@command 0023                     __CFG_LVP$ON 0000  
                           l221 07EE                             l214 03A8                             l324 01E2  
                           l328 01F2                             l882 02E7                    flashUpdate@i 0029  
                  __CFG_CPD$OFF 0000                             _ISR 0004                             u825 0568  
                           u915 04D8                             u925 04EC                             u845 0581  
                           u935 04F8                             u855 058C                             u875 0525  
                           u895 04CC                             wreg 0009             nrf24l01SendPacket@i 002C  
                          ?_ISR 0070                  ??_nrf24l01Init 0044                            l2011 053F  
                          l2023 04C9                            l2033 04F7                            l2025 04D7  
                          l2009 0517                            l2131 064E                            l2037 0502  
                          l2151 07BB                            l2223 0774                            l3103 0336  
                          l2241 06FD                            l2401 03AD                            l2145 07A8  
                          l2217 0760                            l2403 03A1                            l2147 07B3  
                          l2155 027C                            l2245 0707                            l2405 03CB  
                          l2165 02A9                            l2191 05C4                            l2197 05D6  
                          l2463 0232                            l2455 020D                            l2447 01E6  
                          l3167 037F                            l2481 0248                  ??_nrf24l01Send 0022  
                          l2491 0263                            l2483 025F                            l2459 021D  
                          l2479 025A                            l2761 0F06                            l2915 0EB6  
                          l1971 0573                            l1957 0FE1                            l1959 0FEC  
                          l1975 058B                            l1969 0565                            l1979 0596  
                          STR_1 103E                    __CFG_WDTE$ON 0000                            STR_2 103E  
                          STR_3 1036                            STR_4 1028                            STR_5 101E  
                          STR_6 103A                            STR_7 1023                            STR_8 1013  
                          STR_9 1032                            u1104 076E                            u1105 076D  
                          u1035 05B2                            u1315 022C                            u1165 0708  
                          u1175 070F                            u1707 0788                            u1717 0798  
                          u1727 01EE                            u1737 0239                            u1747 025B  
                          u1757 026E                            u1767 062E                            u1777 0640  
                          u1697 0317                            u1787 064B                            u1797 039E  
                          i1l94 0E66                            _WPUA 020C                            _WPUC 020E  
__size_of_nrf24l01InterfaceInit 001C                    __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000  
 __end_of_nrf24l01InterfaceInit 0F37                            _main 02FB                            _loop 0029  
               ??_flashReadByte 0023                            fsr0h 0005                            fsr1h 0007  
                          indf0 0000                            fsr0l 0004                            indf1 0001  
                          fsr1l 0006                            btemp 007E  __size_of_nrf24l01ReceivePacket 0059  
                 __CFG_BORV$LOW 0000   __end_of_nrf24l01ReceivePacket 0464                            start 000F  
         nrf24l01SetRXPipe@name 0039           nrf24l01SetRXPipe@pipe 0038                   __CFG_CSWEN$ON 0000  
                 __CFG_MCLRE$ON 0000     __size_of_nrf24l01SendPacket 0096                           ??_ISR 007E  
          __size_of_getADCValue 0088                 ??_nrf24l01CELow 0070                 ??_nrf24l01CSLow 0070  
                         ?_main 0070                           ?_loop 0070                           STR_10 102D  
               __end_of___lldiv 050B                 __end_of___llmod 059F                  __CFG_DEBUG$OFF 0000  
                         i1l209 000D                           i1l352 06B8                           i1l464 0ED2  
        enableInterrupts@enable 0070                i1_flashWriteByte 0724                      i1memset@p1 0070  
                i1flashUpdate@i 0078             ___lmul@multiplicand 0025                   __CFG_PWRTE$ON 0000  
                         _sleep 07EE                           _ultoa 0272                  __CFG_BOREN$OFF 0000  
              _enableInterrupts 0E50                           status 0003                           wtemp0 007E  
   __end_ofi1_nrf24l01SetRXMode 068C                __end_ofi1_memset 0EB1  __size_of_nrf24l01ChangeTXPower 003F  
             getADCValue@adcSum 0039   __end_of_nrf24l01ChangeTXPower 05DE                _nrf24l01SPIStart 0E58  
               __initialization 0011                _nrf24l01CheckACK 0F37                    __end_of_main 0383  
                  __end_of_loop 013D    nrf24l01ChangeTXPower@rfSetup 0027                ??_nrf24l01CEHigh 0070  
                        ??_main 0058                          ??_loop 0054                ??_nrf24l01CSHigh 0070  
              ??_nrf24l01SPIEnd 0070             _nrf24l01GetRXPacket 0002          __size_ofi1_flashUpdate 0021  
      __size_of_nrf24l01SPISend 000D                ___llmod@dividend 0025                          _ADRESH 009C  
                        _ADRESL 009B                          ?_sleep 0070                          _ANSELA 018C  
                        _ANSELC 018E                          ?_ultoa 002F                ??_flashWriteByte 0025  
                        i1l2201 07CA                          i1l2205 07D2                          i1l2209 07E8  
                        _ODCONA 028C        __size_of_nrf24l01GetPipe 0051                          i1l2227 0ECC  
                        _ODCONC 028E                          u112_25 0ED3                          u113_25 0ED8  
                        i1l2285 0685                          i1l1939 0E6B                          i1l2923 0E9D  
                        i1l2963 0452                          i1l2955 043A                          i1l2959 044A  
                        i1l2983 06AB                          i1l2975 069C                          i1l2993 06B9  
                        _INLVLA 038C                          _INLVLC 038E                          u180_27 0667  
         __size_of_checkTXPower 0014                          u181_27 0678                          u182_27 0682  
                        u183_27 0E5C                          _PMADRH 0892                          u184_27 0E4A  
                        _PMADRL 0891                          _PMDATH 0894                          _PMDATL 0893  
                        _PMCON1 0895                          _PMCON2 0896            ?_nrf24l01GetRXPacket 0070  
          __size_of_flashRealod 0020              flashWriteByte@data 0023            __size_of_flashUpdate 0023  
          __size_of_nrf24l01ISR 0036         nrf24l01SetRXMode@config 0025                          ___lmul 06F4  
       nrf24l01SetRXMode@rxMode 0026                          ___wmul 0ECA                  __CFG_STVREN$ON 0000  
                     ??___lldiv 0029                       ??___llmod 0029            __end_of_nrf24l01Init 07A2  
          __end_of_nrf24l01Send 0F97                          _memset 0EB1           _nrf24l01InitRegisters 013D  
                        _strcat 07A2                          _strcmp 07C8                          _strcpy 0F00  
                        _strlen 0FDB       i1nrf24l01SetRXMode@config 0075                __end_of_romArray 2000  
     i1nrf24l01SetRXMode@rxMode 0076                    _checkTXPower 0E6D                          ultoa@c 003A  
                        ultoa@v 0036              getADCValue@adcLoop 0038         __end_of__initialization 0025  
         ??_nrf24l01GetRXPacket 0021        nrf24l01SendPacket@Packet 002B              getADCValue@channel 0037  
                 i1_flashUpdate 0F97              getADCValue@divider 002F                  __pcstackCOMMON 0070  
                 __end_of_sleep 0800                   __end_of_ultoa 02FB                       ?i1_memset 0070  
                       ??_sleep 0021                     loop@rfSetup 00A0                         ??_ultoa 0035  
                    __pbssBANK0 0059                      __pbssBANK1 00E3                      __pbssBANK2 0120  
             ??_nrf24l01SPISend 0070              __size_of_exception 0018                  ?i1_flashUpdate 0070  
       __size_ofi1_nrf24l01Send 001B        __end_ofi1_flashWriteByte 0754               ??_nrf24l01GetPipe 002B  
                    __pmaintext 02FB                         ?___lmul 0021                         ?___wmul 0070  
               __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 061A               _nrf24l01SetRXPipe 0754  
        ?_nrf24l01InitRegisters 0070                      __pintentry 0004             nrf24l01SPISend@data 0070  
                       ?_memset 0021                  ___lmul@product 0029              ?_nrf24l01SetRXMode 0070  
            ?_nrf24l01SetRXPipe 0070        __end_of_enableInterrupts 0E58             __CFG_RSTOSC$HFINT32 0000  
                       ?_strcat 0021                         ?_strcmp 0070                         ?_strcpy 0021  
                       ?_strlen 0021           __end_of_n_ADDRESS_MUL 1041                      ??i1_memset 0076  
           ??_nrf24l01SetRXMode 0024        __end_of_nrf24l01SPIStart 0E60             ??_nrf24l01SetRXPipe 0036  
                       _SSP1BUF 0211        __end_of_nrf24l01CheckACK 0F57           _nrf24l01InterfaceInit 0F1B  
         __end_of_flashReadByte 06F4                __p_romArray_text 1FE0      __end_of_nrf24l01SendPacket 0272  
                 ??_getADCValue 0033           __size_of_nrf24l01Init 0026           __size_of_nrf24l01Send 0020  
     __end_of_nrf24l01SetRXMode 0655       __end_of_nrf24l01SetRXPipe 077C           _nrf24l01ReceivePacket 040B  
               __size_of___lmul 0030                         ___lldiv 04B8                 __size_of___wmul 001B  
                       ___llmod 055C           __end_of_nrf24l01CELow 0E3D                 __size_of_memset 0019  
         __end_of_nrf24l01CSLow 0E43                         __ptext1 0F00                         __ptext2 077C  
                       __ptext3 0F1B                         __ptext4 013D                         __ptext5 0754  
                       __ptext6 050B                         __ptext7 0029                         __ptext8 07EE  
                       __ptext9 0464                 __size_of_strcat 0026                 __size_of_strcmp 0026  
             __end_of_exception 0E99                 __size_of_strcpy 001B                 __size_of_strlen 0025  
                  __size_of_ISR 000B                         _counter 00E3         i1flashWriteByte@address 0074  
              _romArray_absaddr 1FE0                         _romData 005C                         clrloop0 0E44  
          end_of_initialization 0025                    _nrf24l01Init 077C                      _setMessage 0464  
               ??i1_flashUpdate 0076                    _nrf24l01Send 0F77                         memset@c 0023  
                       memset@n 0025                         memset@p 0027                nrf24l01GetPipe@i 0034  
               ___lldiv@divisor 0021                 ___lldiv@counter 002E           _nrf24l01ChangeTXPower 059F  
              setMessage@packet 0053    __size_ofi1_nrf24l01SetRXMode 0037                         strcmp@r 0073  
         i1nrf24l01Send@command 0073                         strlen@s 0028             __end_of_getADCValue 040B  
                     _PORTAbits 000C                       _PORTCbits 000E                       _TRISAbits 008C  
                     _TRISCbits 008E                nrf24l01Send@data 0021                __CFG_FEXTOSC$OFF 0000  
                 ??_flashRealod 002A                   ??_flashUpdate 0027                   ??_nrf24l01ISR 007D  
        ?_nrf24l01InterfaceInit 0070                  i1_nrf24l01Send 0EE5                      main@packet 00C2  
        ?_nrf24l01ReceivePacket 0070      __size_of_nrf24l01SetRXMode 003B      __size_of_nrf24l01SetRXPipe 0028  
                __end_of___lmul 0724                  __end_of___wmul 0EE5                       i1memset@c 0072  
                     i1memset@n 0074                       i1memset@p 0076                  __end_of_memset 0ECA  
                __end_of_strcat 07C8                  __end_of_strcmp 07EE                  __end_of_strcpy 0F1B  
                __end_of_strlen 1000             start_initialization 0011                 _nrf24l01SPISend 0E60  
                   __end_of_ISR 000F           flashWriteByte@address 0025               __size_ofi1_memset 0018  
     nrf24l01SetRXPipe@enRXAddr 003A                 _nrf24l01GetPipe 050B     __end_of_nrf24l01GetRXPacket 0004  
       __size_of_nrf24l01CEHigh 0003         __size_of_nrf24l01CSHigh 0003                     ?_setMessage 003D  
        __end_ofi1_nrf24l01Send 0F00         __size_of_nrf24l01SPIEnd 0007                 ___llmod@divisor 0021  
               ___llmod@counter 002A          ?_nrf24l01ChangeTXPower 0024         ??_nrf24l01InitRegisters 003B  
              __CFG_LPBOREN$OFF 0000               ?i1_flashWriteByte 0070             __end_of_flashRealod 0F77  
                   _getADCValue 0383         __size_of_flashWriteByte 003C             __end_of_flashUpdate 0FDB  
                      ??___lmul 0029             __end_of_nrf24l01ISR 06C2            setMessage@tempString 0043  
                      ??___wmul 0074              ??i1_flashWriteByte 0074            __end_of_resetRomData 1013  
                      ??_memset 0027               ?_enableInterrupts 0070                        ??_strcat 0023  
                      ??_strcmp 0072                        ??_strcpy 0023                        ??_strlen 0023  
            ??_enableInterrupts 0070                       ___latbits 0002                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0               ?_nrf24l01SPIStart 0070            checkTXPower@rxPacket 0029  
             ?_nrf24l01CheckACK 0070              ??_nrf24l01SPIStart 0070              ??_nrf24l01CheckACK 0077  
               ?i1_nrf24l01Send 0071                      loop@packet 00A1             nrf24l01GetPipe@name 0035  
           nrf24l01GetPipe@pipe 0030                        ?___lldiv 0021                        ?___llmod 0021  
          __end_of_n_ADDRESS_P0 101E         __end_of_nrf24l01SPISend 0E6D              i1nrf24l01Send@data 0071  
     nrf24l01InitRegisters@enAA 0041             __size_of_setMessage 0054              _nrf24l01SendPacket 01DC  
       __end_of_nrf24l01GetPipe 055C                       _exception 0E81             ?_nrf24l01SendPacket 0070  
           i1_nrf24l01SetRXMode 0655                  __size_of_sleep 0012                  __size_of_ultoa 0089  
                   _flashRealod 0F57                  ___wmul@product 0074          i1flashWriteByte@offset 0070  
                   _flashUpdate 0FB8                     _nrf24l01ISR 068C                       clear_ram0 0E43  
                      _PIE0bits 0090                        _PIR0bits 0010                       _romHolder 0120  
                     _sleepLoop 005A            ??_nrf24l01SendPacket 0029                 setMessage@value 003F  
               setMessage@topic 003D            ?i1_nrf24l01SetRXMode 0070                      _ADCON0bits 009D  
                    _ADCON1bits 009E               ___wmul@multiplier 0070                        _WPUAbits 020C  
                      i1_memset 0E99                   ?_checkTXPower 0070                        _RXPacket 0140  
        __size_of_flashReadByte 0032                        _TXPacket 0059                      ?_exception 0070  
                _nrf24l01CEHigh 0E37               ___lmul@multiplier 0021         ??_nrf24l01InterfaceInit 0021  
                _nrf24l01CSHigh 0E3D               nrf24l01ISR@status 0020                  _nrf24l01SPIEnd 0E49  
       ??_nrf24l01ReceivePacket 0078          __size_of_nrf24l01CELow 0003           __end_ofi1_flashUpdate 0FB8  
        __size_of_nrf24l01CSLow 0003            flashWriteByte@offset 0021                  _flashWriteByte 05DE  
         ??i1_nrf24l01SetRXMode 0074                __size_of___lldiv 0053                __size_of___llmod 0043  
              ?_nrf24l01SPISend 0070                      _ANSELAbits 018C                      _ANSELCbits 018E  
                ??_checkTXPower 0028                ?_nrf24l01GetPipe 0070                   _n_ADDRESS_MUL 1040  
                    strcat@from 0021          __end_of_nrf24l01CEHigh 0E3A          __end_of_nrf24l01CSHigh 0E40  
                      __ptext10 0272                        __ptext11 055C                        __ptext20 0E6D  
                      __ptext12 07A2                        __ptext21 0002                        __ptext13 0EB1  
                      __ptext30 040B                        __ptext22 059F                        __ptext14 01DC  
                      __ptext31 0E99                        __ptext23 0F77                        __ptext15 0FDB  
                      __ptext40 0E50                        __ptext32 0F37                        __ptext24 0FB8  
                      __ptext16 061A                        __ptext41 0E3A                        __ptext33 0655  
                      __ptext25 05DE                        __ptext17 0383                        __ptext42 0E37  
                      __ptext34 0EE5                        __ptext26 0F57                        __ptext18 06F4  
                      __ptext43 07C8                        __ptext35 0E58                        __ptext27 06C2  
                      __ptext19 04B8                        __ptext44 0E81                        __ptext36 0E40  
                      __ptext45 0F97                        __ptext37 0E60                        __ptext29 068C  
                      __ptext46 0724                        __ptext38 0E49                        __ptext47 0ECA  
                      __ptext39 0E3D                    _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 0E50  
                      _nrf24l01 005B                    _resetRomData 1000                     _OSCCON1bits 0919  
                  ??_setMessage 0043                      strcpy@from 0021   nrf24l01ChangeTXPower@addPower 0024  
       ??_nrf24l01ChangeTXPower 0026                   __size_of_main 0088                   __size_of_loop 0114  
  nrf24l01InitRegisters@channel 003C          __end_of_flashWriteByte 061A    nrf24l01InitRegisters@feature 003E  
            exception@exception 007C                      _RC0PPSbits 0EA0                        _romArray 1FE0  
                 _flashReadByte 06C2    nrf24l01InitRegisters@rfSetup 003F                      _RC1PPSbits 0EA1  
                  ?_getADCValue 002F                      _RC2PPSbits 0EA2  __size_of_nrf24l01InitRegisters 009F  
 __end_of_nrf24l01InitRegisters 01DC                        int$flags 007E    nrf24l01InitRegisters@setupAW 003D  
                  _SSP1STATbits 0214          nrf24l01ReceivePacket@i 007A                   _nrf24l01CELow 0E3A  
                 _nrf24l01CSLow 0E40              __end_of_setMessage 04B8                      _INTCONbits 000B  
     __size_ofi1_flashWriteByte 0030                 ?_nrf24l01CEHigh 0070                      _FVRCONbits 0117  
              ??i1_nrf24l01Send 0072                     ??_exception 007A                 ?_nrf24l01CSHigh 0070  
                __pstringtext10 1036                  __pstringtext11 103A                  __pstringtext12 103E  
                __pstringtext13 0000                        memset@p1 0021                       ultoa@base 0033  
               ?_nrf24l01SPIEnd 0070                        intlevel1 0000                    _n_ADDRESS_P0 1019  
     __size_of_enableInterrupts 0008                      _PMCON1bits 0895                ___lldiv@dividend 0025  
             __CFG_CLKOUTEN$OFF 0000                 ?_flashWriteByte 0021    __size_of_nrf24l01GetRXPacket 0002  
                ?_flashReadByte 0021            i1flashWriteByte@data 0072     nrf24l01InitRegisters@config 0043  
     __size_of_nrf24l01SPIStart 0008       __size_of_nrf24l01CheckACK 0020     nrf24l01InitRegisters@status 0040  
    nrf24l01ReceivePacket@width 0079                  ?_nrf24l01CELow 0070                   __pstringtext1 1000  
                 __pstringtext2 1019                   __pstringtext3 1040                   __pstringtext4 1013  
                 __pstringtext5 101E                   __pstringtext6 1023                   __pstringtext7 1028  
                 __pstringtext8 102D                   __pstringtext9 1032                  ?_nrf24l01CSLow 0070  
                      ultoa@buf 003B                        ultoa@val 002F      nrf24l01InitRegisters@DynPD 0042  
                      strcat@cp 0024                        strcat@to 0025                        strcmp@s1 0074  
                      strcmp@s2 0070                ___lldiv@quotient 002A                        strcpy@cp 0025  
                      strlen@cp 0027                        strcpy@to 0024                      _WDTCONbits 0097  
                 ?_nrf24l01Init 0070                   ?_nrf24l01Send 0021                    ?_flashRealod 0070  
                    _STATUSbits 0003            flashReadByte@address 0028                    ?_flashUpdate 0070  
                  ?_nrf24l01ISR 0070            __end_of_checkTXPower 0E81             flashReadByte@offset 0021  
