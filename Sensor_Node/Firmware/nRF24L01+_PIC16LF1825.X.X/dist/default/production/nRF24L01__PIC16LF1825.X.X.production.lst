

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Wed Jul 25 20:53:41 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	clrtext,global,class=CODE,delta=2
    23                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    25                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    26                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    27                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    28                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text2,local,class=CODE,merge=1,delta=2
    30                           	psect	text3,local,class=CODE,merge=1,delta=2
    31                           	psect	text4,local,class=CODE,merge=1,delta=2
    32                           	psect	text5,local,class=CODE,merge=1,delta=2
    33                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text7,local,class=CODE,merge=1,delta=2
    35                           	psect	text8,local,class=CODE,merge=1,delta=2
    36                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text10,local,class=CODE,merge=1,delta=2
    38                           	psect	text11,local,class=CODE,merge=1,delta=2
    39                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text15,local,class=CODE,merge=1,delta=2
    43                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text26,local,class=CODE,merge=1,delta=2
    54                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text28,local,class=CODE,merge=1,delta=2
    56                           	psect	text29,local,class=CODE,merge=1,delta=2
    57                           	psect	text30,local,class=CODE,merge=1,delta=2
    58                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text34,local,class=CODE,merge=1,delta=2
    62                           	psect	text35,local,class=CODE,merge=1,delta=2
    63                           	psect	text36,local,class=CODE,merge=1,delta=2
    64                           	psect	text37,local,class=CODE,merge=1,delta=2
    65                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	intentry,global,class=CODE,delta=2
    69                           	psect	text42,local,class=CODE,merge=1,delta=2
    70                           	psect	text43,local,class=CODE,merge=1,delta=2
    71                           	psect	text44,local,class=CODE,merge=1,delta=2
    72                           	psect	text45,local,class=CODE,merge=1,delta=2
    73                           	psect	text46,local,class=CODE,merge=1,delta=2
    74                           	psect	text47,local,class=CODE,merge=1,delta=2
    75                           	psect	text48,local,class=CODE,merge=1,delta=2
    76                           	psect	text49,local,class=CODE,merge=1,delta=2
    77                           	psect	text50,local,class=CODE,merge=1,delta=2
    78                           	psect	text51,local,class=CODE,merge=1,delta=2
    79                           	psect	text52,local,class=CODE,merge=1,delta=2
    80                           	psect	text53,local,class=CODE,merge=1,delta=2
    81                           	psect	text54,local,class=CODE,merge=1,delta=2
    82                           	psect	text55,local,class=CODE,merge=1,delta=2
    83                           	psect	text56,local,class=CODE,merge=1,delta=2,group=2
    84                           	psect	text57,local,class=CODE,merge=1,delta=2
    85                           	dabs	1,0x7E,2
    86  0000                     
    87                           ; Version 2.00
    88                           ; Generated 27/05/2018 GMT
    89                           ; 
    90                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    91                           ; All rights reserved.
    92                           ; 
    93                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    94                           ; 
    95                           ; Redistribution and use in source and binary forms, with or without modification, are
    96                           ; permitted provided that the following conditions are met:
    97                           ; 
    98                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    99                           ;        conditions and the following disclaimer.
   100                           ; 
   101                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   102                           ;        of conditions and the following disclaimer in the documentation and/or other
   103                           ;        materials provided with the distribution.
   104                           ; 
   105                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   106                           ;        software without specific prior written permission.
   107                           ; 
   108                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   109                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   110                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   111                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   112                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   113                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   114                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   115                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   116                           ; 
   117                           ; 
   118                           ; Code-generator required, PIC16LF18325 Definitions
   119                           ; 
   120                           ; SFR Addresses
   121  0000                     	;# 
   122  0001                     	;# 
   123  0002                     	;# 
   124  0003                     	;# 
   125  0004                     	;# 
   126  0005                     	;# 
   127  0006                     	;# 
   128  0007                     	;# 
   129  0008                     	;# 
   130  0009                     	;# 
   131  000A                     	;# 
   132  000B                     	;# 
   133  000C                     	;# 
   134  000E                     	;# 
   135  0010                     	;# 
   136  0011                     	;# 
   137  0012                     	;# 
   138  0013                     	;# 
   139  0014                     	;# 
   140  0015                     	;# 
   141  0015                     	;# 
   142  0016                     	;# 
   143  0016                     	;# 
   144  0017                     	;# 
   145  0018                     	;# 
   146  0019                     	;# 
   147  0019                     	;# 
   148  001A                     	;# 
   149  001B                     	;# 
   150  001C                     	;# 
   151  001D                     	;# 
   152  001E                     	;# 
   153  001F                     	;# 
   154  008C                     	;# 
   155  008E                     	;# 
   156  0090                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0097                     	;# 
   162  009B                     	;# 
   163  009B                     	;# 
   164  009C                     	;# 
   165  009D                     	;# 
   166  009E                     	;# 
   167  009F                     	;# 
   168  010C                     	;# 
   169  010E                     	;# 
   170  0111                     	;# 
   171  0112                     	;# 
   172  0113                     	;# 
   173  0114                     	;# 
   174  0115                     	;# 
   175  0116                     	;# 
   176  0117                     	;# 
   177  0118                     	;# 
   178  0119                     	;# 
   179  018C                     	;# 
   180  018E                     	;# 
   181  0199                     	;# 
   182  0199                     	;# 
   183  0199                     	;# 
   184  019A                     	;# 
   185  019A                     	;# 
   186  019A                     	;# 
   187  019B                     	;# 
   188  019B                     	;# 
   189  019B                     	;# 
   190  019B                     	;# 
   191  019B                     	;# 
   192  019C                     	;# 
   193  019C                     	;# 
   194  019C                     	;# 
   195  019D                     	;# 
   196  019D                     	;# 
   197  019D                     	;# 
   198  019E                     	;# 
   199  019E                     	;# 
   200  019E                     	;# 
   201  019F                     	;# 
   202  019F                     	;# 
   203  019F                     	;# 
   204  019F                     	;# 
   205  019F                     	;# 
   206  020C                     	;# 
   207  020E                     	;# 
   208  0211                     	;# 
   209  0211                     	;# 
   210  0212                     	;# 
   211  0212                     	;# 
   212  0213                     	;# 
   213  0213                     	;# 
   214  0214                     	;# 
   215  0214                     	;# 
   216  0215                     	;# 
   217  0215                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0216                     	;# 
   221  0216                     	;# 
   222  0217                     	;# 
   223  0217                     	;# 
   224  0219                     	;# 
   225  021A                     	;# 
   226  021B                     	;# 
   227  021C                     	;# 
   228  021D                     	;# 
   229  021D                     	;# 
   230  021E                     	;# 
   231  021F                     	;# 
   232  028C                     	;# 
   233  028E                     	;# 
   234  0291                     	;# 
   235  0291                     	;# 
   236  0292                     	;# 
   237  0293                     	;# 
   238  0294                     	;# 
   239  0295                     	;# 
   240  0295                     	;# 
   241  0296                     	;# 
   242  0297                     	;# 
   243  0298                     	;# 
   244  029F                     	;# 
   245  030C                     	;# 
   246  030E                     	;# 
   247  0311                     	;# 
   248  0311                     	;# 
   249  0312                     	;# 
   250  0313                     	;# 
   251  0314                     	;# 
   252  0315                     	;# 
   253  0315                     	;# 
   254  0316                     	;# 
   255  0317                     	;# 
   256  0318                     	;# 
   257  038C                     	;# 
   258  038E                     	;# 
   259  0391                     	;# 
   260  0392                     	;# 
   261  0393                     	;# 
   262  0397                     	;# 
   263  0398                     	;# 
   264  0399                     	;# 
   265  039A                     	;# 
   266  039C                     	;# 
   267  039D                     	;# 
   268  039E                     	;# 
   269  039F                     	;# 
   270  0411                     	;# 
   271  0411                     	;# 
   272  0412                     	;# 
   273  0413                     	;# 
   274  0414                     	;# 
   275  0415                     	;# 
   276  0416                     	;# 
   277  0417                     	;# 
   278  0418                     	;# 
   279  0418                     	;# 
   280  0419                     	;# 
   281  041A                     	;# 
   282  041B                     	;# 
   283  041C                     	;# 
   284  041D                     	;# 
   285  041E                     	;# 
   286  041F                     	;# 
   287  0498                     	;# 
   288  0498                     	;# 
   289  0499                     	;# 
   290  049A                     	;# 
   291  049B                     	;# 
   292  049B                     	;# 
   293  049C                     	;# 
   294  049D                     	;# 
   295  049E                     	;# 
   296  049F                     	;# 
   297  0617                     	;# 
   298  0618                     	;# 
   299  0619                     	;# 
   300  0619                     	;# 
   301  061A                     	;# 
   302  061B                     	;# 
   303  061C                     	;# 
   304  061C                     	;# 
   305  061F                     	;# 
   306  0691                     	;# 
   307  0692                     	;# 
   308  0693                     	;# 
   309  0694                     	;# 
   310  0695                     	;# 
   311  0696                     	;# 
   312  0697                     	;# 
   313  0698                     	;# 
   314  0699                     	;# 
   315  0711                     	;# 
   316  0712                     	;# 
   317  0713                     	;# 
   318  0714                     	;# 
   319  0715                     	;# 
   320  0716                     	;# 
   321  0717                     	;# 
   322  0718                     	;# 
   323  0719                     	;# 
   324  0891                     	;# 
   325  0891                     	;# 
   326  0891                     	;# 
   327  0891                     	;# 
   328  0891                     	;# 
   329  0891                     	;# 
   330  0892                     	;# 
   331  0892                     	;# 
   332  0892                     	;# 
   333  0893                     	;# 
   334  0893                     	;# 
   335  0893                     	;# 
   336  0893                     	;# 
   337  0893                     	;# 
   338  0893                     	;# 
   339  0894                     	;# 
   340  0894                     	;# 
   341  0894                     	;# 
   342  0895                     	;# 
   343  0895                     	;# 
   344  0895                     	;# 
   345  0896                     	;# 
   346  0896                     	;# 
   347  0896                     	;# 
   348  089B                     	;# 
   349  0911                     	;# 
   350  0912                     	;# 
   351  0913                     	;# 
   352  0914                     	;# 
   353  0915                     	;# 
   354  0916                     	;# 
   355  0918                     	;# 
   356  0919                     	;# 
   357  091A                     	;# 
   358  091B                     	;# 
   359  091C                     	;# 
   360  091D                     	;# 
   361  091E                     	;# 
   362  091F                     	;# 
   363  0E0F                     	;# 
   364  0E10                     	;# 
   365  0E11                     	;# 
   366  0E12                     	;# 
   367  0E13                     	;# 
   368  0E14                     	;# 
   369  0E15                     	;# 
   370  0E16                     	;# 
   371  0E17                     	;# 
   372  0E18                     	;# 
   373  0E19                     	;# 
   374  0E1A                     	;# 
   375  0E1B                     	;# 
   376  0E1C                     	;# 
   377  0E1D                     	;# 
   378  0E1E                     	;# 
   379  0E1F                     	;# 
   380  0E20                     	;# 
   381  0E21                     	;# 
   382  0E22                     	;# 
   383  0E24                     	;# 
   384  0E25                     	;# 
   385  0E28                     	;# 
   386  0E29                     	;# 
   387  0E2A                     	;# 
   388  0E2B                     	;# 
   389  0E2C                     	;# 
   390  0E2D                     	;# 
   391  0E2E                     	;# 
   392  0E2F                     	;# 
   393  0E90                     	;# 
   394  0E91                     	;# 
   395  0E92                     	;# 
   396  0E94                     	;# 
   397  0E95                     	;# 
   398  0EA0                     	;# 
   399  0EA1                     	;# 
   400  0EA2                     	;# 
   401  0EA3                     	;# 
   402  0EA4                     	;# 
   403  0EA5                     	;# 
   404  0F0F                     	;# 
   405  0F10                     	;# 
   406  0F11                     	;# 
   407  0F12                     	;# 
   408  0F13                     	;# 
   409  0F14                     	;# 
   410  0F15                     	;# 
   411  0F16                     	;# 
   412  0F17                     	;# 
   413  0F18                     	;# 
   414  0F19                     	;# 
   415  0F1A                     	;# 
   416  0F1B                     	;# 
   417  0F1C                     	;# 
   418  0F1D                     	;# 
   419  0F1E                     	;# 
   420  0F1F                     	;# 
   421  0F20                     	;# 
   422  0F21                     	;# 
   423  0F22                     	;# 
   424  0F23                     	;# 
   425  0F24                     	;# 
   426  0F25                     	;# 
   427  0F26                     	;# 
   428  0F27                     	;# 
   429  0F28                     	;# 
   430  0F29                     	;# 
   431  0F2A                     	;# 
   432  0F2B                     	;# 
   433  0F2C                     	;# 
   434  0F2D                     	;# 
   435  0F2E                     	;# 
   436  0F2F                     	;# 
   437  0F30                     	;# 
   438  0F31                     	;# 
   439  0F32                     	;# 
   440  0F33                     	;# 
   441  0F34                     	;# 
   442  0F35                     	;# 
   443  0F36                     	;# 
   444  0F37                     	;# 
   445  0FE4                     	;# 
   446  0FE5                     	;# 
   447  0FE6                     	;# 
   448  0FE7                     	;# 
   449  0FE8                     	;# 
   450  0FE9                     	;# 
   451  0FEA                     	;# 
   452  0FEB                     	;# 
   453  0FED                     	;# 
   454  0FEE                     	;# 
   455  0FEF                     	;# 
   456  0000                     	;# 
   457  0001                     	;# 
   458  0002                     	;# 
   459  0003                     	;# 
   460  0004                     	;# 
   461  0005                     	;# 
   462  0006                     	;# 
   463  0007                     	;# 
   464  0008                     	;# 
   465  0009                     	;# 
   466  000A                     	;# 
   467  000B                     	;# 
   468  000C                     	;# 
   469  000E                     	;# 
   470  0010                     	;# 
   471  0011                     	;# 
   472  0012                     	;# 
   473  0013                     	;# 
   474  0014                     	;# 
   475  0015                     	;# 
   476  0015                     	;# 
   477  0016                     	;# 
   478  0016                     	;# 
   479  0017                     	;# 
   480  0018                     	;# 
   481  0019                     	;# 
   482  0019                     	;# 
   483  001A                     	;# 
   484  001B                     	;# 
   485  001C                     	;# 
   486  001D                     	;# 
   487  001E                     	;# 
   488  001F                     	;# 
   489  008C                     	;# 
   490  008E                     	;# 
   491  0090                     	;# 
   492  0091                     	;# 
   493  0092                     	;# 
   494  0093                     	;# 
   495  0094                     	;# 
   496  0097                     	;# 
   497  009B                     	;# 
   498  009B                     	;# 
   499  009C                     	;# 
   500  009D                     	;# 
   501  009E                     	;# 
   502  009F                     	;# 
   503  010C                     	;# 
   504  010E                     	;# 
   505  0111                     	;# 
   506  0112                     	;# 
   507  0113                     	;# 
   508  0114                     	;# 
   509  0115                     	;# 
   510  0116                     	;# 
   511  0117                     	;# 
   512  0118                     	;# 
   513  0119                     	;# 
   514  018C                     	;# 
   515  018E                     	;# 
   516  0199                     	;# 
   517  0199                     	;# 
   518  0199                     	;# 
   519  019A                     	;# 
   520  019A                     	;# 
   521  019A                     	;# 
   522  019B                     	;# 
   523  019B                     	;# 
   524  019B                     	;# 
   525  019B                     	;# 
   526  019B                     	;# 
   527  019C                     	;# 
   528  019C                     	;# 
   529  019C                     	;# 
   530  019D                     	;# 
   531  019D                     	;# 
   532  019D                     	;# 
   533  019E                     	;# 
   534  019E                     	;# 
   535  019E                     	;# 
   536  019F                     	;# 
   537  019F                     	;# 
   538  019F                     	;# 
   539  019F                     	;# 
   540  019F                     	;# 
   541  020C                     	;# 
   542  020E                     	;# 
   543  0211                     	;# 
   544  0211                     	;# 
   545  0212                     	;# 
   546  0212                     	;# 
   547  0213                     	;# 
   548  0213                     	;# 
   549  0214                     	;# 
   550  0214                     	;# 
   551  0215                     	;# 
   552  0215                     	;# 
   553  0215                     	;# 
   554  0215                     	;# 
   555  0216                     	;# 
   556  0216                     	;# 
   557  0217                     	;# 
   558  0217                     	;# 
   559  0219                     	;# 
   560  021A                     	;# 
   561  021B                     	;# 
   562  021C                     	;# 
   563  021D                     	;# 
   564  021D                     	;# 
   565  021E                     	;# 
   566  021F                     	;# 
   567  028C                     	;# 
   568  028E                     	;# 
   569  0291                     	;# 
   570  0291                     	;# 
   571  0292                     	;# 
   572  0293                     	;# 
   573  0294                     	;# 
   574  0295                     	;# 
   575  0295                     	;# 
   576  0296                     	;# 
   577  0297                     	;# 
   578  0298                     	;# 
   579  029F                     	;# 
   580  030C                     	;# 
   581  030E                     	;# 
   582  0311                     	;# 
   583  0311                     	;# 
   584  0312                     	;# 
   585  0313                     	;# 
   586  0314                     	;# 
   587  0315                     	;# 
   588  0315                     	;# 
   589  0316                     	;# 
   590  0317                     	;# 
   591  0318                     	;# 
   592  038C                     	;# 
   593  038E                     	;# 
   594  0391                     	;# 
   595  0392                     	;# 
   596  0393                     	;# 
   597  0397                     	;# 
   598  0398                     	;# 
   599  0399                     	;# 
   600  039A                     	;# 
   601  039C                     	;# 
   602  039D                     	;# 
   603  039E                     	;# 
   604  039F                     	;# 
   605  0411                     	;# 
   606  0411                     	;# 
   607  0412                     	;# 
   608  0413                     	;# 
   609  0414                     	;# 
   610  0415                     	;# 
   611  0416                     	;# 
   612  0417                     	;# 
   613  0418                     	;# 
   614  0418                     	;# 
   615  0419                     	;# 
   616  041A                     	;# 
   617  041B                     	;# 
   618  041C                     	;# 
   619  041D                     	;# 
   620  041E                     	;# 
   621  041F                     	;# 
   622  0498                     	;# 
   623  0498                     	;# 
   624  0499                     	;# 
   625  049A                     	;# 
   626  049B                     	;# 
   627  049B                     	;# 
   628  049C                     	;# 
   629  049D                     	;# 
   630  049E                     	;# 
   631  049F                     	;# 
   632  0617                     	;# 
   633  0618                     	;# 
   634  0619                     	;# 
   635  0619                     	;# 
   636  061A                     	;# 
   637  061B                     	;# 
   638  061C                     	;# 
   639  061C                     	;# 
   640  061F                     	;# 
   641  0691                     	;# 
   642  0692                     	;# 
   643  0693                     	;# 
   644  0694                     	;# 
   645  0695                     	;# 
   646  0696                     	;# 
   647  0697                     	;# 
   648  0698                     	;# 
   649  0699                     	;# 
   650  0711                     	;# 
   651  0712                     	;# 
   652  0713                     	;# 
   653  0714                     	;# 
   654  0715                     	;# 
   655  0716                     	;# 
   656  0717                     	;# 
   657  0718                     	;# 
   658  0719                     	;# 
   659  0891                     	;# 
   660  0891                     	;# 
   661  0891                     	;# 
   662  0891                     	;# 
   663  0891                     	;# 
   664  0891                     	;# 
   665  0892                     	;# 
   666  0892                     	;# 
   667  0892                     	;# 
   668  0893                     	;# 
   669  0893                     	;# 
   670  0893                     	;# 
   671  0893                     	;# 
   672  0893                     	;# 
   673  0893                     	;# 
   674  0894                     	;# 
   675  0894                     	;# 
   676  0894                     	;# 
   677  0895                     	;# 
   678  0895                     	;# 
   679  0895                     	;# 
   680  0896                     	;# 
   681  0896                     	;# 
   682  0896                     	;# 
   683  089B                     	;# 
   684  0911                     	;# 
   685  0912                     	;# 
   686  0913                     	;# 
   687  0914                     	;# 
   688  0915                     	;# 
   689  0916                     	;# 
   690  0918                     	;# 
   691  0919                     	;# 
   692  091A                     	;# 
   693  091B                     	;# 
   694  091C                     	;# 
   695  091D                     	;# 
   696  091E                     	;# 
   697  091F                     	;# 
   698  0E0F                     	;# 
   699  0E10                     	;# 
   700  0E11                     	;# 
   701  0E12                     	;# 
   702  0E13                     	;# 
   703  0E14                     	;# 
   704  0E15                     	;# 
   705  0E16                     	;# 
   706  0E17                     	;# 
   707  0E18                     	;# 
   708  0E19                     	;# 
   709  0E1A                     	;# 
   710  0E1B                     	;# 
   711  0E1C                     	;# 
   712  0E1D                     	;# 
   713  0E1E                     	;# 
   714  0E1F                     	;# 
   715  0E20                     	;# 
   716  0E21                     	;# 
   717  0E22                     	;# 
   718  0E24                     	;# 
   719  0E25                     	;# 
   720  0E28                     	;# 
   721  0E29                     	;# 
   722  0E2A                     	;# 
   723  0E2B                     	;# 
   724  0E2C                     	;# 
   725  0E2D                     	;# 
   726  0E2E                     	;# 
   727  0E2F                     	;# 
   728  0E90                     	;# 
   729  0E91                     	;# 
   730  0E92                     	;# 
   731  0E94                     	;# 
   732  0E95                     	;# 
   733  0EA0                     	;# 
   734  0EA1                     	;# 
   735  0EA2                     	;# 
   736  0EA3                     	;# 
   737  0EA4                     	;# 
   738  0EA5                     	;# 
   739  0F0F                     	;# 
   740  0F10                     	;# 
   741  0F11                     	;# 
   742  0F12                     	;# 
   743  0F13                     	;# 
   744  0F14                     	;# 
   745  0F15                     	;# 
   746  0F16                     	;# 
   747  0F17                     	;# 
   748  0F18                     	;# 
   749  0F19                     	;# 
   750  0F1A                     	;# 
   751  0F1B                     	;# 
   752  0F1C                     	;# 
   753  0F1D                     	;# 
   754  0F1E                     	;# 
   755  0F1F                     	;# 
   756  0F20                     	;# 
   757  0F21                     	;# 
   758  0F22                     	;# 
   759  0F23                     	;# 
   760  0F24                     	;# 
   761  0F25                     	;# 
   762  0F26                     	;# 
   763  0F27                     	;# 
   764  0F28                     	;# 
   765  0F29                     	;# 
   766  0F2A                     	;# 
   767  0F2B                     	;# 
   768  0F2C                     	;# 
   769  0F2D                     	;# 
   770  0F2E                     	;# 
   771  0F2F                     	;# 
   772  0F30                     	;# 
   773  0F31                     	;# 
   774  0F32                     	;# 
   775  0F33                     	;# 
   776  0F34                     	;# 
   777  0F35                     	;# 
   778  0F36                     	;# 
   779  0F37                     	;# 
   780  0FE4                     	;# 
   781  0FE5                     	;# 
   782  0FE6                     	;# 
   783  0FE7                     	;# 
   784  0FE8                     	;# 
   785  0FE9                     	;# 
   786  0FEA                     	;# 
   787  0FEB                     	;# 
   788  0FED                     	;# 
   789  0FEE                     	;# 
   790  0FEF                     	;# 
   791  0000                     	;# 
   792  0001                     	;# 
   793  0002                     	;# 
   794  0003                     	;# 
   795  0004                     	;# 
   796  0005                     	;# 
   797  0006                     	;# 
   798  0007                     	;# 
   799  0008                     	;# 
   800  0009                     	;# 
   801  000A                     	;# 
   802  000B                     	;# 
   803  000C                     	;# 
   804  000E                     	;# 
   805  0010                     	;# 
   806  0011                     	;# 
   807  0012                     	;# 
   808  0013                     	;# 
   809  0014                     	;# 
   810  0015                     	;# 
   811  0015                     	;# 
   812  0016                     	;# 
   813  0016                     	;# 
   814  0017                     	;# 
   815  0018                     	;# 
   816  0019                     	;# 
   817  0019                     	;# 
   818  001A                     	;# 
   819  001B                     	;# 
   820  001C                     	;# 
   821  001D                     	;# 
   822  001E                     	;# 
   823  001F                     	;# 
   824  008C                     	;# 
   825  008E                     	;# 
   826  0090                     	;# 
   827  0091                     	;# 
   828  0092                     	;# 
   829  0093                     	;# 
   830  0094                     	;# 
   831  0097                     	;# 
   832  009B                     	;# 
   833  009B                     	;# 
   834  009C                     	;# 
   835  009D                     	;# 
   836  009E                     	;# 
   837  009F                     	;# 
   838  010C                     	;# 
   839  010E                     	;# 
   840  0111                     	;# 
   841  0112                     	;# 
   842  0113                     	;# 
   843  0114                     	;# 
   844  0115                     	;# 
   845  0116                     	;# 
   846  0117                     	;# 
   847  0118                     	;# 
   848  0119                     	;# 
   849  018C                     	;# 
   850  018E                     	;# 
   851  0199                     	;# 
   852  0199                     	;# 
   853  0199                     	;# 
   854  019A                     	;# 
   855  019A                     	;# 
   856  019A                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019B                     	;# 
   860  019B                     	;# 
   861  019B                     	;# 
   862  019C                     	;# 
   863  019C                     	;# 
   864  019C                     	;# 
   865  019D                     	;# 
   866  019D                     	;# 
   867  019D                     	;# 
   868  019E                     	;# 
   869  019E                     	;# 
   870  019E                     	;# 
   871  019F                     	;# 
   872  019F                     	;# 
   873  019F                     	;# 
   874  019F                     	;# 
   875  019F                     	;# 
   876  020C                     	;# 
   877  020E                     	;# 
   878  0211                     	;# 
   879  0211                     	;# 
   880  0212                     	;# 
   881  0212                     	;# 
   882  0213                     	;# 
   883  0213                     	;# 
   884  0214                     	;# 
   885  0214                     	;# 
   886  0215                     	;# 
   887  0215                     	;# 
   888  0215                     	;# 
   889  0215                     	;# 
   890  0216                     	;# 
   891  0216                     	;# 
   892  0217                     	;# 
   893  0217                     	;# 
   894  0219                     	;# 
   895  021A                     	;# 
   896  021B                     	;# 
   897  021C                     	;# 
   898  021D                     	;# 
   899  021D                     	;# 
   900  021E                     	;# 
   901  021F                     	;# 
   902  028C                     	;# 
   903  028E                     	;# 
   904  0291                     	;# 
   905  0291                     	;# 
   906  0292                     	;# 
   907  0293                     	;# 
   908  0294                     	;# 
   909  0295                     	;# 
   910  0295                     	;# 
   911  0296                     	;# 
   912  0297                     	;# 
   913  0298                     	;# 
   914  029F                     	;# 
   915  030C                     	;# 
   916  030E                     	;# 
   917  0311                     	;# 
   918  0311                     	;# 
   919  0312                     	;# 
   920  0313                     	;# 
   921  0314                     	;# 
   922  0315                     	;# 
   923  0315                     	;# 
   924  0316                     	;# 
   925  0317                     	;# 
   926  0318                     	;# 
   927  038C                     	;# 
   928  038E                     	;# 
   929  0391                     	;# 
   930  0392                     	;# 
   931  0393                     	;# 
   932  0397                     	;# 
   933  0398                     	;# 
   934  0399                     	;# 
   935  039A                     	;# 
   936  039C                     	;# 
   937  039D                     	;# 
   938  039E                     	;# 
   939  039F                     	;# 
   940  0411                     	;# 
   941  0411                     	;# 
   942  0412                     	;# 
   943  0413                     	;# 
   944  0414                     	;# 
   945  0415                     	;# 
   946  0416                     	;# 
   947  0417                     	;# 
   948  0418                     	;# 
   949  0418                     	;# 
   950  0419                     	;# 
   951  041A                     	;# 
   952  041B                     	;# 
   953  041C                     	;# 
   954  041D                     	;# 
   955  041E                     	;# 
   956  041F                     	;# 
   957  0498                     	;# 
   958  0498                     	;# 
   959  0499                     	;# 
   960  049A                     	;# 
   961  049B                     	;# 
   962  049B                     	;# 
   963  049C                     	;# 
   964  049D                     	;# 
   965  049E                     	;# 
   966  049F                     	;# 
   967  0617                     	;# 
   968  0618                     	;# 
   969  0619                     	;# 
   970  0619                     	;# 
   971  061A                     	;# 
   972  061B                     	;# 
   973  061C                     	;# 
   974  061C                     	;# 
   975  061F                     	;# 
   976  0691                     	;# 
   977  0692                     	;# 
   978  0693                     	;# 
   979  0694                     	;# 
   980  0695                     	;# 
   981  0696                     	;# 
   982  0697                     	;# 
   983  0698                     	;# 
   984  0699                     	;# 
   985  0711                     	;# 
   986  0712                     	;# 
   987  0713                     	;# 
   988  0714                     	;# 
   989  0715                     	;# 
   990  0716                     	;# 
   991  0717                     	;# 
   992  0718                     	;# 
   993  0719                     	;# 
   994  0891                     	;# 
   995  0891                     	;# 
   996  0891                     	;# 
   997  0891                     	;# 
   998  0891                     	;# 
   999  0891                     	;# 
  1000  0892                     	;# 
  1001  0892                     	;# 
  1002  0892                     	;# 
  1003  0893                     	;# 
  1004  0893                     	;# 
  1005  0893                     	;# 
  1006  0893                     	;# 
  1007  0893                     	;# 
  1008  0893                     	;# 
  1009  0894                     	;# 
  1010  0894                     	;# 
  1011  0894                     	;# 
  1012  0895                     	;# 
  1013  0895                     	;# 
  1014  0895                     	;# 
  1015  0896                     	;# 
  1016  0896                     	;# 
  1017  0896                     	;# 
  1018  089B                     	;# 
  1019  0911                     	;# 
  1020  0912                     	;# 
  1021  0913                     	;# 
  1022  0914                     	;# 
  1023  0915                     	;# 
  1024  0916                     	;# 
  1025  0918                     	;# 
  1026  0919                     	;# 
  1027  091A                     	;# 
  1028  091B                     	;# 
  1029  091C                     	;# 
  1030  091D                     	;# 
  1031  091E                     	;# 
  1032  091F                     	;# 
  1033  0E0F                     	;# 
  1034  0E10                     	;# 
  1035  0E11                     	;# 
  1036  0E12                     	;# 
  1037  0E13                     	;# 
  1038  0E14                     	;# 
  1039  0E15                     	;# 
  1040  0E16                     	;# 
  1041  0E17                     	;# 
  1042  0E18                     	;# 
  1043  0E19                     	;# 
  1044  0E1A                     	;# 
  1045  0E1B                     	;# 
  1046  0E1C                     	;# 
  1047  0E1D                     	;# 
  1048  0E1E                     	;# 
  1049  0E1F                     	;# 
  1050  0E20                     	;# 
  1051  0E21                     	;# 
  1052  0E22                     	;# 
  1053  0E24                     	;# 
  1054  0E25                     	;# 
  1055  0E28                     	;# 
  1056  0E29                     	;# 
  1057  0E2A                     	;# 
  1058  0E2B                     	;# 
  1059  0E2C                     	;# 
  1060  0E2D                     	;# 
  1061  0E2E                     	;# 
  1062  0E2F                     	;# 
  1063  0E90                     	;# 
  1064  0E91                     	;# 
  1065  0E92                     	;# 
  1066  0E94                     	;# 
  1067  0E95                     	;# 
  1068  0EA0                     	;# 
  1069  0EA1                     	;# 
  1070  0EA2                     	;# 
  1071  0EA3                     	;# 
  1072  0EA4                     	;# 
  1073  0EA5                     	;# 
  1074  0F0F                     	;# 
  1075  0F10                     	;# 
  1076  0F11                     	;# 
  1077  0F12                     	;# 
  1078  0F13                     	;# 
  1079  0F14                     	;# 
  1080  0F15                     	;# 
  1081  0F16                     	;# 
  1082  0F17                     	;# 
  1083  0F18                     	;# 
  1084  0F19                     	;# 
  1085  0F1A                     	;# 
  1086  0F1B                     	;# 
  1087  0F1C                     	;# 
  1088  0F1D                     	;# 
  1089  0F1E                     	;# 
  1090  0F1F                     	;# 
  1091  0F20                     	;# 
  1092  0F21                     	;# 
  1093  0F22                     	;# 
  1094  0F23                     	;# 
  1095  0F24                     	;# 
  1096  0F25                     	;# 
  1097  0F26                     	;# 
  1098  0F27                     	;# 
  1099  0F28                     	;# 
  1100  0F29                     	;# 
  1101  0F2A                     	;# 
  1102  0F2B                     	;# 
  1103  0F2C                     	;# 
  1104  0F2D                     	;# 
  1105  0F2E                     	;# 
  1106  0F2F                     	;# 
  1107  0F30                     	;# 
  1108  0F31                     	;# 
  1109  0F32                     	;# 
  1110  0F33                     	;# 
  1111  0F34                     	;# 
  1112  0F35                     	;# 
  1113  0F36                     	;# 
  1114  0F37                     	;# 
  1115  0FE4                     	;# 
  1116  0FE5                     	;# 
  1117  0FE6                     	;# 
  1118  0FE7                     	;# 
  1119  0FE8                     	;# 
  1120  0FE9                     	;# 
  1121  0FEA                     	;# 
  1122  0FEB                     	;# 
  1123  0FED                     	;# 
  1124  0FEE                     	;# 
  1125  0FEF                     	;# 
  1126  0000                     	;# 
  1127  0001                     	;# 
  1128  0002                     	;# 
  1129  0003                     	;# 
  1130  0004                     	;# 
  1131  0005                     	;# 
  1132  0006                     	;# 
  1133  0007                     	;# 
  1134  0008                     	;# 
  1135  0009                     	;# 
  1136  000A                     	;# 
  1137  000B                     	;# 
  1138  000C                     	;# 
  1139  000E                     	;# 
  1140  0010                     	;# 
  1141  0011                     	;# 
  1142  0012                     	;# 
  1143  0013                     	;# 
  1144  0014                     	;# 
  1145  0015                     	;# 
  1146  0015                     	;# 
  1147  0016                     	;# 
  1148  0016                     	;# 
  1149  0017                     	;# 
  1150  0018                     	;# 
  1151  0019                     	;# 
  1152  0019                     	;# 
  1153  001A                     	;# 
  1154  001B                     	;# 
  1155  001C                     	;# 
  1156  001D                     	;# 
  1157  001E                     	;# 
  1158  001F                     	;# 
  1159  008C                     	;# 
  1160  008E                     	;# 
  1161  0090                     	;# 
  1162  0091                     	;# 
  1163  0092                     	;# 
  1164  0093                     	;# 
  1165  0094                     	;# 
  1166  0097                     	;# 
  1167  009B                     	;# 
  1168  009B                     	;# 
  1169  009C                     	;# 
  1170  009D                     	;# 
  1171  009E                     	;# 
  1172  009F                     	;# 
  1173  010C                     	;# 
  1174  010E                     	;# 
  1175  0111                     	;# 
  1176  0112                     	;# 
  1177  0113                     	;# 
  1178  0114                     	;# 
  1179  0115                     	;# 
  1180  0116                     	;# 
  1181  0117                     	;# 
  1182  0118                     	;# 
  1183  0119                     	;# 
  1184  018C                     	;# 
  1185  018E                     	;# 
  1186  0199                     	;# 
  1187  0199                     	;# 
  1188  0199                     	;# 
  1189  019A                     	;# 
  1190  019A                     	;# 
  1191  019A                     	;# 
  1192  019B                     	;# 
  1193  019B                     	;# 
  1194  019B                     	;# 
  1195  019B                     	;# 
  1196  019B                     	;# 
  1197  019C                     	;# 
  1198  019C                     	;# 
  1199  019C                     	;# 
  1200  019D                     	;# 
  1201  019D                     	;# 
  1202  019D                     	;# 
  1203  019E                     	;# 
  1204  019E                     	;# 
  1205  019E                     	;# 
  1206  019F                     	;# 
  1207  019F                     	;# 
  1208  019F                     	;# 
  1209  019F                     	;# 
  1210  019F                     	;# 
  1211  020C                     	;# 
  1212  020E                     	;# 
  1213  0211                     	;# 
  1214  0211                     	;# 
  1215  0212                     	;# 
  1216  0212                     	;# 
  1217  0213                     	;# 
  1218  0213                     	;# 
  1219  0214                     	;# 
  1220  0214                     	;# 
  1221  0215                     	;# 
  1222  0215                     	;# 
  1223  0215                     	;# 
  1224  0215                     	;# 
  1225  0216                     	;# 
  1226  0216                     	;# 
  1227  0217                     	;# 
  1228  0217                     	;# 
  1229  0219                     	;# 
  1230  021A                     	;# 
  1231  021B                     	;# 
  1232  021C                     	;# 
  1233  021D                     	;# 
  1234  021D                     	;# 
  1235  021E                     	;# 
  1236  021F                     	;# 
  1237  028C                     	;# 
  1238  028E                     	;# 
  1239  0291                     	;# 
  1240  0291                     	;# 
  1241  0292                     	;# 
  1242  0293                     	;# 
  1243  0294                     	;# 
  1244  0295                     	;# 
  1245  0295                     	;# 
  1246  0296                     	;# 
  1247  0297                     	;# 
  1248  0298                     	;# 
  1249  029F                     	;# 
  1250  030C                     	;# 
  1251  030E                     	;# 
  1252  0311                     	;# 
  1253  0311                     	;# 
  1254  0312                     	;# 
  1255  0313                     	;# 
  1256  0314                     	;# 
  1257  0315                     	;# 
  1258  0315                     	;# 
  1259  0316                     	;# 
  1260  0317                     	;# 
  1261  0318                     	;# 
  1262  038C                     	;# 
  1263  038E                     	;# 
  1264  0391                     	;# 
  1265  0392                     	;# 
  1266  0393                     	;# 
  1267  0397                     	;# 
  1268  0398                     	;# 
  1269  0399                     	;# 
  1270  039A                     	;# 
  1271  039C                     	;# 
  1272  039D                     	;# 
  1273  039E                     	;# 
  1274  039F                     	;# 
  1275  0411                     	;# 
  1276  0411                     	;# 
  1277  0412                     	;# 
  1278  0413                     	;# 
  1279  0414                     	;# 
  1280  0415                     	;# 
  1281  0416                     	;# 
  1282  0417                     	;# 
  1283  0418                     	;# 
  1284  0418                     	;# 
  1285  0419                     	;# 
  1286  041A                     	;# 
  1287  041B                     	;# 
  1288  041C                     	;# 
  1289  041D                     	;# 
  1290  041E                     	;# 
  1291  041F                     	;# 
  1292  0498                     	;# 
  1293  0498                     	;# 
  1294  0499                     	;# 
  1295  049A                     	;# 
  1296  049B                     	;# 
  1297  049B                     	;# 
  1298  049C                     	;# 
  1299  049D                     	;# 
  1300  049E                     	;# 
  1301  049F                     	;# 
  1302  0617                     	;# 
  1303  0618                     	;# 
  1304  0619                     	;# 
  1305  0619                     	;# 
  1306  061A                     	;# 
  1307  061B                     	;# 
  1308  061C                     	;# 
  1309  061C                     	;# 
  1310  061F                     	;# 
  1311  0691                     	;# 
  1312  0692                     	;# 
  1313  0693                     	;# 
  1314  0694                     	;# 
  1315  0695                     	;# 
  1316  0696                     	;# 
  1317  0697                     	;# 
  1318  0698                     	;# 
  1319  0699                     	;# 
  1320  0711                     	;# 
  1321  0712                     	;# 
  1322  0713                     	;# 
  1323  0714                     	;# 
  1324  0715                     	;# 
  1325  0716                     	;# 
  1326  0717                     	;# 
  1327  0718                     	;# 
  1328  0719                     	;# 
  1329  0891                     	;# 
  1330  0891                     	;# 
  1331  0891                     	;# 
  1332  0891                     	;# 
  1333  0891                     	;# 
  1334  0891                     	;# 
  1335  0892                     	;# 
  1336  0892                     	;# 
  1337  0892                     	;# 
  1338  0893                     	;# 
  1339  0893                     	;# 
  1340  0893                     	;# 
  1341  0893                     	;# 
  1342  0893                     	;# 
  1343  0893                     	;# 
  1344  0894                     	;# 
  1345  0894                     	;# 
  1346  0894                     	;# 
  1347  0895                     	;# 
  1348  0895                     	;# 
  1349  0895                     	;# 
  1350  0896                     	;# 
  1351  0896                     	;# 
  1352  0896                     	;# 
  1353  089B                     	;# 
  1354  0911                     	;# 
  1355  0912                     	;# 
  1356  0913                     	;# 
  1357  0914                     	;# 
  1358  0915                     	;# 
  1359  0916                     	;# 
  1360  0918                     	;# 
  1361  0919                     	;# 
  1362  091A                     	;# 
  1363  091B                     	;# 
  1364  091C                     	;# 
  1365  091D                     	;# 
  1366  091E                     	;# 
  1367  091F                     	;# 
  1368  0E0F                     	;# 
  1369  0E10                     	;# 
  1370  0E11                     	;# 
  1371  0E12                     	;# 
  1372  0E13                     	;# 
  1373  0E14                     	;# 
  1374  0E15                     	;# 
  1375  0E16                     	;# 
  1376  0E17                     	;# 
  1377  0E18                     	;# 
  1378  0E19                     	;# 
  1379  0E1A                     	;# 
  1380  0E1B                     	;# 
  1381  0E1C                     	;# 
  1382  0E1D                     	;# 
  1383  0E1E                     	;# 
  1384  0E1F                     	;# 
  1385  0E20                     	;# 
  1386  0E21                     	;# 
  1387  0E22                     	;# 
  1388  0E24                     	;# 
  1389  0E25                     	;# 
  1390  0E28                     	;# 
  1391  0E29                     	;# 
  1392  0E2A                     	;# 
  1393  0E2B                     	;# 
  1394  0E2C                     	;# 
  1395  0E2D                     	;# 
  1396  0E2E                     	;# 
  1397  0E2F                     	;# 
  1398  0E90                     	;# 
  1399  0E91                     	;# 
  1400  0E92                     	;# 
  1401  0E94                     	;# 
  1402  0E95                     	;# 
  1403  0EA0                     	;# 
  1404  0EA1                     	;# 
  1405  0EA2                     	;# 
  1406  0EA3                     	;# 
  1407  0EA4                     	;# 
  1408  0EA5                     	;# 
  1409  0F0F                     	;# 
  1410  0F10                     	;# 
  1411  0F11                     	;# 
  1412  0F12                     	;# 
  1413  0F13                     	;# 
  1414  0F14                     	;# 
  1415  0F15                     	;# 
  1416  0F16                     	;# 
  1417  0F17                     	;# 
  1418  0F18                     	;# 
  1419  0F19                     	;# 
  1420  0F1A                     	;# 
  1421  0F1B                     	;# 
  1422  0F1C                     	;# 
  1423  0F1D                     	;# 
  1424  0F1E                     	;# 
  1425  0F1F                     	;# 
  1426  0F20                     	;# 
  1427  0F21                     	;# 
  1428  0F22                     	;# 
  1429  0F23                     	;# 
  1430  0F24                     	;# 
  1431  0F25                     	;# 
  1432  0F26                     	;# 
  1433  0F27                     	;# 
  1434  0F28                     	;# 
  1435  0F29                     	;# 
  1436  0F2A                     	;# 
  1437  0F2B                     	;# 
  1438  0F2C                     	;# 
  1439  0F2D                     	;# 
  1440  0F2E                     	;# 
  1441  0F2F                     	;# 
  1442  0F30                     	;# 
  1443  0F31                     	;# 
  1444  0F32                     	;# 
  1445  0F33                     	;# 
  1446  0F34                     	;# 
  1447  0F35                     	;# 
  1448  0F36                     	;# 
  1449  0F37                     	;# 
  1450  0FE4                     	;# 
  1451  0FE5                     	;# 
  1452  0FE6                     	;# 
  1453  0FE7                     	;# 
  1454  0FE8                     	;# 
  1455  0FE9                     	;# 
  1456  0FEA                     	;# 
  1457  0FEB                     	;# 
  1458  0FED                     	;# 
  1459  0FEE                     	;# 
  1460  0FEF                     	;# 
  1461  0000                     	;# 
  1462  0001                     	;# 
  1463  0002                     	;# 
  1464  0003                     	;# 
  1465  0004                     	;# 
  1466  0005                     	;# 
  1467  0006                     	;# 
  1468  0007                     	;# 
  1469  0008                     	;# 
  1470  0009                     	;# 
  1471  000A                     	;# 
  1472  000B                     	;# 
  1473  000C                     	;# 
  1474  000E                     	;# 
  1475  0010                     	;# 
  1476  0011                     	;# 
  1477  0012                     	;# 
  1478  0013                     	;# 
  1479  0014                     	;# 
  1480  0015                     	;# 
  1481  0015                     	;# 
  1482  0016                     	;# 
  1483  0016                     	;# 
  1484  0017                     	;# 
  1485  0018                     	;# 
  1486  0019                     	;# 
  1487  0019                     	;# 
  1488  001A                     	;# 
  1489  001B                     	;# 
  1490  001C                     	;# 
  1491  001D                     	;# 
  1492  001E                     	;# 
  1493  001F                     	;# 
  1494  008C                     	;# 
  1495  008E                     	;# 
  1496  0090                     	;# 
  1497  0091                     	;# 
  1498  0092                     	;# 
  1499  0093                     	;# 
  1500  0094                     	;# 
  1501  0097                     	;# 
  1502  009B                     	;# 
  1503  009B                     	;# 
  1504  009C                     	;# 
  1505  009D                     	;# 
  1506  009E                     	;# 
  1507  009F                     	;# 
  1508  010C                     	;# 
  1509  010E                     	;# 
  1510  0111                     	;# 
  1511  0112                     	;# 
  1512  0113                     	;# 
  1513  0114                     	;# 
  1514  0115                     	;# 
  1515  0116                     	;# 
  1516  0117                     	;# 
  1517  0118                     	;# 
  1518  0119                     	;# 
  1519  018C                     	;# 
  1520  018E                     	;# 
  1521  0199                     	;# 
  1522  0199                     	;# 
  1523  0199                     	;# 
  1524  019A                     	;# 
  1525  019A                     	;# 
  1526  019A                     	;# 
  1527  019B                     	;# 
  1528  019B                     	;# 
  1529  019B                     	;# 
  1530  019B                     	;# 
  1531  019B                     	;# 
  1532  019C                     	;# 
  1533  019C                     	;# 
  1534  019C                     	;# 
  1535  019D                     	;# 
  1536  019D                     	;# 
  1537  019D                     	;# 
  1538  019E                     	;# 
  1539  019E                     	;# 
  1540  019E                     	;# 
  1541  019F                     	;# 
  1542  019F                     	;# 
  1543  019F                     	;# 
  1544  019F                     	;# 
  1545  019F                     	;# 
  1546  020C                     	;# 
  1547  020E                     	;# 
  1548  0211                     	;# 
  1549  0211                     	;# 
  1550  0212                     	;# 
  1551  0212                     	;# 
  1552  0213                     	;# 
  1553  0213                     	;# 
  1554  0214                     	;# 
  1555  0214                     	;# 
  1556  0215                     	;# 
  1557  0215                     	;# 
  1558  0215                     	;# 
  1559  0215                     	;# 
  1560  0216                     	;# 
  1561  0216                     	;# 
  1562  0217                     	;# 
  1563  0217                     	;# 
  1564  0219                     	;# 
  1565  021A                     	;# 
  1566  021B                     	;# 
  1567  021C                     	;# 
  1568  021D                     	;# 
  1569  021D                     	;# 
  1570  021E                     	;# 
  1571  021F                     	;# 
  1572  028C                     	;# 
  1573  028E                     	;# 
  1574  0291                     	;# 
  1575  0291                     	;# 
  1576  0292                     	;# 
  1577  0293                     	;# 
  1578  0294                     	;# 
  1579  0295                     	;# 
  1580  0295                     	;# 
  1581  0296                     	;# 
  1582  0297                     	;# 
  1583  0298                     	;# 
  1584  029F                     	;# 
  1585  030C                     	;# 
  1586  030E                     	;# 
  1587  0311                     	;# 
  1588  0311                     	;# 
  1589  0312                     	;# 
  1590  0313                     	;# 
  1591  0314                     	;# 
  1592  0315                     	;# 
  1593  0315                     	;# 
  1594  0316                     	;# 
  1595  0317                     	;# 
  1596  0318                     	;# 
  1597  038C                     	;# 
  1598  038E                     	;# 
  1599  0391                     	;# 
  1600  0392                     	;# 
  1601  0393                     	;# 
  1602  0397                     	;# 
  1603  0398                     	;# 
  1604  0399                     	;# 
  1605  039A                     	;# 
  1606  039C                     	;# 
  1607  039D                     	;# 
  1608  039E                     	;# 
  1609  039F                     	;# 
  1610  0411                     	;# 
  1611  0411                     	;# 
  1612  0412                     	;# 
  1613  0413                     	;# 
  1614  0414                     	;# 
  1615  0415                     	;# 
  1616  0416                     	;# 
  1617  0417                     	;# 
  1618  0418                     	;# 
  1619  0418                     	;# 
  1620  0419                     	;# 
  1621  041A                     	;# 
  1622  041B                     	;# 
  1623  041C                     	;# 
  1624  041D                     	;# 
  1625  041E                     	;# 
  1626  041F                     	;# 
  1627  0498                     	;# 
  1628  0498                     	;# 
  1629  0499                     	;# 
  1630  049A                     	;# 
  1631  049B                     	;# 
  1632  049B                     	;# 
  1633  049C                     	;# 
  1634  049D                     	;# 
  1635  049E                     	;# 
  1636  049F                     	;# 
  1637  0617                     	;# 
  1638  0618                     	;# 
  1639  0619                     	;# 
  1640  0619                     	;# 
  1641  061A                     	;# 
  1642  061B                     	;# 
  1643  061C                     	;# 
  1644  061C                     	;# 
  1645  061F                     	;# 
  1646  0691                     	;# 
  1647  0692                     	;# 
  1648  0693                     	;# 
  1649  0694                     	;# 
  1650  0695                     	;# 
  1651  0696                     	;# 
  1652  0697                     	;# 
  1653  0698                     	;# 
  1654  0699                     	;# 
  1655  0711                     	;# 
  1656  0712                     	;# 
  1657  0713                     	;# 
  1658  0714                     	;# 
  1659  0715                     	;# 
  1660  0716                     	;# 
  1661  0717                     	;# 
  1662  0718                     	;# 
  1663  0719                     	;# 
  1664  0891                     	;# 
  1665  0891                     	;# 
  1666  0891                     	;# 
  1667  0891                     	;# 
  1668  0891                     	;# 
  1669  0891                     	;# 
  1670  0892                     	;# 
  1671  0892                     	;# 
  1672  0892                     	;# 
  1673  0893                     	;# 
  1674  0893                     	;# 
  1675  0893                     	;# 
  1676  0893                     	;# 
  1677  0893                     	;# 
  1678  0893                     	;# 
  1679  0894                     	;# 
  1680  0894                     	;# 
  1681  0894                     	;# 
  1682  0895                     	;# 
  1683  0895                     	;# 
  1684  0895                     	;# 
  1685  0896                     	;# 
  1686  0896                     	;# 
  1687  0896                     	;# 
  1688  089B                     	;# 
  1689  0911                     	;# 
  1690  0912                     	;# 
  1691  0913                     	;# 
  1692  0914                     	;# 
  1693  0915                     	;# 
  1694  0916                     	;# 
  1695  0918                     	;# 
  1696  0919                     	;# 
  1697  091A                     	;# 
  1698  091B                     	;# 
  1699  091C                     	;# 
  1700  091D                     	;# 
  1701  091E                     	;# 
  1702  091F                     	;# 
  1703  0E0F                     	;# 
  1704  0E10                     	;# 
  1705  0E11                     	;# 
  1706  0E12                     	;# 
  1707  0E13                     	;# 
  1708  0E14                     	;# 
  1709  0E15                     	;# 
  1710  0E16                     	;# 
  1711  0E17                     	;# 
  1712  0E18                     	;# 
  1713  0E19                     	;# 
  1714  0E1A                     	;# 
  1715  0E1B                     	;# 
  1716  0E1C                     	;# 
  1717  0E1D                     	;# 
  1718  0E1E                     	;# 
  1719  0E1F                     	;# 
  1720  0E20                     	;# 
  1721  0E21                     	;# 
  1722  0E22                     	;# 
  1723  0E24                     	;# 
  1724  0E25                     	;# 
  1725  0E28                     	;# 
  1726  0E29                     	;# 
  1727  0E2A                     	;# 
  1728  0E2B                     	;# 
  1729  0E2C                     	;# 
  1730  0E2D                     	;# 
  1731  0E2E                     	;# 
  1732  0E2F                     	;# 
  1733  0E90                     	;# 
  1734  0E91                     	;# 
  1735  0E92                     	;# 
  1736  0E94                     	;# 
  1737  0E95                     	;# 
  1738  0EA0                     	;# 
  1739  0EA1                     	;# 
  1740  0EA2                     	;# 
  1741  0EA3                     	;# 
  1742  0EA4                     	;# 
  1743  0EA5                     	;# 
  1744  0F0F                     	;# 
  1745  0F10                     	;# 
  1746  0F11                     	;# 
  1747  0F12                     	;# 
  1748  0F13                     	;# 
  1749  0F14                     	;# 
  1750  0F15                     	;# 
  1751  0F16                     	;# 
  1752  0F17                     	;# 
  1753  0F18                     	;# 
  1754  0F19                     	;# 
  1755  0F1A                     	;# 
  1756  0F1B                     	;# 
  1757  0F1C                     	;# 
  1758  0F1D                     	;# 
  1759  0F1E                     	;# 
  1760  0F1F                     	;# 
  1761  0F20                     	;# 
  1762  0F21                     	;# 
  1763  0F22                     	;# 
  1764  0F23                     	;# 
  1765  0F24                     	;# 
  1766  0F25                     	;# 
  1767  0F26                     	;# 
  1768  0F27                     	;# 
  1769  0F28                     	;# 
  1770  0F29                     	;# 
  1771  0F2A                     	;# 
  1772  0F2B                     	;# 
  1773  0F2C                     	;# 
  1774  0F2D                     	;# 
  1775  0F2E                     	;# 
  1776  0F2F                     	;# 
  1777  0F30                     	;# 
  1778  0F31                     	;# 
  1779  0F32                     	;# 
  1780  0F33                     	;# 
  1781  0F34                     	;# 
  1782  0F35                     	;# 
  1783  0F36                     	;# 
  1784  0F37                     	;# 
  1785  0FE4                     	;# 
  1786  0FE5                     	;# 
  1787  0FE6                     	;# 
  1788  0FE7                     	;# 
  1789  0FE8                     	;# 
  1790  0FE9                     	;# 
  1791  0FEA                     	;# 
  1792  0FEB                     	;# 
  1793  0FED                     	;# 
  1794  0FEE                     	;# 
  1795  0FEF                     	;# 
  1796                           
  1797                           	psect	idataBANK1
  1798  173F                     __pidataBANK1:	
  1799                           
  1800                           ;initializer for _romData
  1801  173F  34C1               	retlw	low (_romDataMap| (0+256))
  1802                           
  1803                           	psect	stringtext1
  1804  1000                     __pstringtext1:	
  1805  1000                     _dpowers:	
  1806  1000  3401               	retlw	1
  1807  1001  3400               	retlw	0
  1808  1002  3400               	retlw	0
  1809  1003  3400               	retlw	0
  1810  1004  340A               	retlw	10
  1811  1005  3400               	retlw	0
  1812  1006  3400               	retlw	0
  1813  1007  3400               	retlw	0
  1814  1008  3464               	retlw	100
  1815  1009  3400               	retlw	0
  1816  100A  3400               	retlw	0
  1817  100B  3400               	retlw	0
  1818  100C  34E8               	retlw	232
  1819  100D  3403               	retlw	3
  1820  100E  3400               	retlw	0
  1821  100F  3400               	retlw	0
  1822  1010  3410               	retlw	16
  1823  1011  3427               	retlw	39
  1824  1012  3400               	retlw	0
  1825  1013  3400               	retlw	0
  1826  1014  34A0               	retlw	160
  1827  1015  3486               	retlw	134
  1828  1016  3401               	retlw	1
  1829  1017  3400               	retlw	0
  1830  1018  3440               	retlw	64
  1831  1019  3442               	retlw	66
  1832  101A  340F               	retlw	15
  1833  101B  3400               	retlw	0
  1834  101C  3480               	retlw	128
  1835  101D  3496               	retlw	150
  1836  101E  3498               	retlw	152
  1837  101F  3400               	retlw	0
  1838  1020  3400               	retlw	0
  1839  1021  34E1               	retlw	225
  1840  1022  34F5               	retlw	245
  1841  1023  3405               	retlw	5
  1842  1024  3400               	retlw	0
  1843  1025  34CA               	retlw	202
  1844  1026  349A               	retlw	154
  1845  1027  343B               	retlw	59
  1846  1028                     __end_of_dpowers:	
  1847                           
  1848                           	psect	stringtext2
  1849  1819                     __pstringtext2:	
  1850  1819                     _n_ADDRESS_P0:	
  1851  1819  34AD               	retlw	173
  1852  181A  3487               	retlw	135
  1853  181B  3466               	retlw	102
  1854  181C  34BC               	retlw	188
  1855  181D  34BB               	retlw	187
  1856  181E                     __end_of_n_ADDRESS_P0:	
  1857                           
  1858                           	psect	stringtext3
  1859  1800                     __pstringtext3:	
  1860  1800                     _n_ADDRESS_MUL:	
  1861  1800  3421               	retlw	33
  1862  1801                     __end_of_n_ADDRESS_MUL:	
  1863  000B                     _INTCONbits	set	11
  1864  0003                     _STATUSbits	set	3
  1865  0010                     _PIR0bits	set	16
  1866  000E                     _PORTCbits	set	14
  1867  000C                     _PORTAbits	set	12
  1868  009E                     _ADCON1bits	set	158
  1869  009C                     _ADRESH	set	156
  1870  009B                     _ADRESL	set	155
  1871  009D                     _ADCON0bits	set	157
  1872  0097                     _WDTCONbits	set	151
  1873  0090                     _PIE0bits	set	144
  1874  008E                     _TRISCbits	set	142
  1875  008C                     _TRISAbits	set	140
  1876  0117                     _FVRCONbits	set	279
  1877  018E                     _ANSELCbits	set	398
  1878  018C                     _ANSELAbits	set	396
  1879  018E                     _ANSELC	set	398
  1880  018C                     _ANSELA	set	396
  1881  020C                     _WPUAbits	set	524
  1882  020E                     _WPUC	set	526
  1883  020C                     _WPUA	set	524
  1884  0211                     _SSP1BUF	set	529
  1885  0214                     _SSP1STATbits	set	532
  1886  0215                     _SSP1CON1bits	set	533
  1887  028C                     _ODCONAbits	set	652
  1888  028E                     _ODCONC	set	654
  1889  028C                     _ODCONA	set	652
  1890  038E                     _INLVLC	set	910
  1891  038C                     _INLVLA	set	908
  1892  0919                     _OSCCON1bits	set	2329
  1893  0EA0                     _RC0PPSbits	set	3744
  1894  0EA2                     _RC2PPSbits	set	3746
  1895  0EA1                     _RC1PPSbits	set	3745
  1896  1801                     STR_9:	
  1897  1801  3425               	retlw	37	;'%'
  1898  1802  346C               	retlw	108	;'l'
  1899  1803  3475               	retlw	117	;'u'
  1900  1804  342E               	retlw	46	;'.'
  1901  1805  3425               	retlw	37	;'%'
  1902  1806  3436               	retlw	54	;'6'
  1903  1807  342E               	retlw	46	;'.'
  1904  1808  3436               	retlw	54	;'6'
  1905  1809  346C               	retlw	108	;'l'
  1906  180A  3475               	retlw	117	;'u'
  1907  180B  3400               	retlw	0
  1908                           
  1909                           	psect	stringtext4
  1910  180C                     __pstringtext4:	
  1911  180C                     STR_4:	
  1912  180C  3441               	retlw	65	;'A'
  1913  180D  344E               	retlw	78	;'N'
  1914  180E  3443               	retlw	67	;'C'
  1915  180F  3433               	retlw	51	;'3'
  1916  1810  346D               	retlw	109	;'m'
  1917  1811  3456               	retlw	86	;'V'
  1918  1812  3400               	retlw	0
  1919                           
  1920                           	psect	stringtext5
  1921  1813                     __pstringtext5:	
  1922  1813                     STR_6:	
  1923  1813  3452               	retlw	82	;'R'
  1924  1814  3446               	retlw	70	;'F'
  1925  1815  3450               	retlw	80	;'P'
  1926  1816  3457               	retlw	87	;'W'
  1927  1817  3452               	retlw	82	;'R'
  1928  1818  3400               	retlw	0
  1929                           
  1930                           	psect	stringtext6
  1931  181E                     __pstringtext6:	
  1932  181E                     STR_5:	
  1933  181E  3454               	retlw	84	;'T'
  1934  181F  3445               	retlw	69	;'E'
  1935  1820  344D               	retlw	77	;'M'
  1936  1821  3450               	retlw	80	;'P'
  1937  1822  3400               	retlw	0
  1938                           
  1939                           	psect	stringtext7
  1940  1823                     __pstringtext7:	
  1941  1823                     STR_3:	
  1942  1823  3456               	retlw	86	;'V'
  1943  1824  3442               	retlw	66	;'B'
  1944  1825  3441               	retlw	65	;'A'
  1945  1826  3454               	retlw	84	;'T'
  1946  1827  3400               	retlw	0
  1947                           
  1948                           	psect	stringtext8
  1949  1828                     __pstringtext8:	
  1950  1828                     STR_8:	
  1951  1828  3442               	retlw	66	;'B'
  1952  1829  344F               	retlw	79	;'O'
  1953  182A  344F               	retlw	79	;'O'
  1954  182B  3454               	retlw	84	;'T'
  1955  182C  3400               	retlw	0
  1956                           
  1957                           	psect	stringtext9
  1958  182D                     __pstringtext9:	
  1959  182D                     STR_7:	
  1960  182D  3455               	retlw	85	;'U'
  1961  182E  3448               	retlw	72	;'H'
  1962  182F  3431               	retlw	49	;'1'
  1963  1830  3400               	retlw	0
  1964                           
  1965                           	psect	stringtext10
  1966  1831                     __pstringtext10:	
  1967  1831                     STR_1:	
  1968  1831  342F               	retlw	47	;'/'
  1969  1832  3400               	retlw	0
  1970                           
  1971                           	psect	stringtext11
  1972  0000                     __pstringtext11:	
  1973  1831                     
  1974                           ; #config settings
  1975  0000                     
  1976                           	psect	cinit
  1977  0011                     start_initialization:	
  1978  0011                     __initialization:	
  1979                           
  1980                           ; Initialize objects allocated to BANK1
  1981  0011  0021               	movlb	1	; select bank1
  1982  0012  3197  273F  3180   	fcall	__pidataBANK1	;fetch initializer
  1983  0015  00EE               	movwf	__pdataBANK1& (0+127)
  1984                           
  1985                           ; Clear objects allocated to COMMON
  1986  0016  01FD               	clrf	__pbssCOMMON& (0+127)
  1987                           
  1988                           ; Clear objects allocated to BANK1
  1989  0017  30E7               	movlw	low __pbssBANK1
  1990  0018  0084               	movwf	4
  1991  0019  3000               	movlw	high __pbssBANK1
  1992  001A  0085               	movwf	5
  1993  001B  3007               	movlw	7
  1994  001C  3197  274C  3180   	fcall	clear_ram0
  1995                           
  1996                           ; Clear objects allocated to BANK2
  1997  001F  304E               	movlw	low __pbssBANK2
  1998  0020  0084               	movwf	4
  1999  0021  3001               	movlw	high __pbssBANK2
  2000  0022  0085               	movwf	5
  2001  0023  3011               	movlw	17
  2002  0024  3197  274C  3180   	fcall	clear_ram0
  2003                           
  2004                           ; Clear objects allocated to BANK3
  2005  0027  30A0               	movlw	low __pbssBANK3
  2006  0028  0084               	movwf	4
  2007  0029  3001               	movlw	high __pbssBANK3
  2008  002A  0085               	movwf	5
  2009  002B  303D               	movlw	61
  2010  002C  3197  274C         	fcall	clear_ram0
  2011  002E                     end_of_initialization:	
  2012                           ;End of C runtime variable initialization code
  2013                           
  2014  002E                     __end_of__initialization:	
  2015  002E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2016  002F  0020               	movlb	0
  2017  0030  318E  2E0E         	ljmp	_main	;jump to C main() function
  2018                           
  2019                           	psect	bssCOMMON
  2020  007D                     __pbssCOMMON:	
  2021  007D                     _nrf24l01:	
  2022  007D                     	ds	1
  2023                           
  2024                           	psect	bssBANK1
  2025  00E7                     __pbssBANK1:	
  2026  00E7                     _counter:	
  2027  00E7                     	ds	4
  2028  00EB                     _TXPacket:	
  2029  00EB                     	ds	2
  2030  00ED                     _sleepLoop:	
  2031  00ED                     	ds	1
  2032                           
  2033                           	psect	dataBANK1
  2034  00EE                     __pdataBANK1:	
  2035  00EE                     _romData:	
  2036  00EE                     	ds	1
  2037                           
  2038                           	psect	bssBANK2
  2039  014E                     __pbssBANK2:	
  2040  014E                     ftoa@buf:	
  2041  014E                     	ds	17
  2042                           
  2043                           	psect	bssBANK3
  2044  01A0                     __pbssBANK3:	
  2045  01A0                     _RXPacket:	
  2046  01A0                     	ds	33
  2047  01C1                     _romDataMap:	
  2048  01C1                     	ds	28
  2049                           
  2050                           	psect	clrtext
  2051  174C                     clear_ram0:	
  2052                           ;	Called with FSR0 containing the base address, and
  2053                           ;	WREG with the size to clear
  2054                           
  2055  174C  0064               	clrwdt	;clear the watchdog before getting into this loop
  2056  174D                     clrloop0:	
  2057  174D  0180               	clrf	0	;clear RAM location pointed to by FSR
  2058  174E  3101               	addfsr 0,1
  2059  174F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2060  1750  2F4D               	goto	clrloop0	;have we reached the end yet?
  2061  1751  3400               	retlw	0	;all done for this memory range, return
  2062                           
  2063                           	psect	cstackBANK2
  2064  0120                     __pcstackBANK2:	
  2065  0120                     loop@vt:	
  2066                           
  2067                           ; 3 bytes @ 0x0
  2068  0120                     	ds	3
  2069  0123                     loop@ta:	
  2070                           
  2071                           ; 3 bytes @ 0x3
  2072  0123                     	ds	3
  2073  0126                     _loop$2049:	
  2074                           
  2075                           ; 3 bytes @ 0x6
  2076  0126                     	ds	3
  2077  0129                     _loop$2050:	
  2078                           
  2079                           ; 3 bytes @ 0x9
  2080  0129                     	ds	3
  2081  012C                     loop@rfSetup:	
  2082                           
  2083                           ; 1 bytes @ 0xC
  2084  012C                     	ds	1
  2085  012D                     loop@packet:	
  2086                           
  2087                           ; 33 bytes @ 0xD
  2088  012D                     	ds	33
  2089                           
  2090                           	psect	cstackBANK1
  2091  00A0                     __pcstackBANK1:	
  2092  00A0                     ___fttol@sign1:	
  2093                           
  2094                           ; 1 bytes @ 0x0
  2095  00A0                     	ds	1
  2096  00A1                     ___fttol@lval:	
  2097                           
  2098                           ; 4 bytes @ 0x1
  2099  00A1                     	ds	4
  2100  00A5                     ___fttol@exp1:	
  2101                           
  2102                           ; 1 bytes @ 0x5
  2103  00A5                     	ds	1
  2104  00A6                     ?_ftoa:	
  2105  00A6                     ftoa@f:	
  2106                           ; 1 bytes @ 0x6
  2107                           
  2108                           
  2109                           ; 3 bytes @ 0x6
  2110  00A6                     	ds	3
  2111  00A9                     ftoa@status:	
  2112                           
  2113                           ; 1 bytes @ 0x9
  2114  00A9                     	ds	1
  2115  00AA                     ftoa@rem:	
  2116                           
  2117                           ; 4 bytes @ 0xA
  2118  00AA                     	ds	4
  2119  00AE                     ftoa@l:	
  2120                           
  2121                           ; 4 bytes @ 0xE
  2122  00AE                     	ds	4
  2123  00B2                     ftoa@cp:	
  2124                           
  2125                           ; 1 bytes @ 0x12
  2126  00B2                     	ds	1
  2127  00B3                     ?_strcat:	
  2128  00B3                     strcat@to:	
  2129                           ; 2 bytes @ 0x13
  2130                           
  2131                           
  2132                           ; 2 bytes @ 0x13
  2133  00B3                     	ds	2
  2134  00B5                     strcat@from:	
  2135                           
  2136                           ; 2 bytes @ 0x15
  2137  00B5                     	ds	2
  2138  00B7                     strcat@cp:	
  2139                           
  2140                           ; 2 bytes @ 0x17
  2141  00B7                     	ds	2
  2142  00B9                     ?_setMessage:	
  2143  00B9                     setMessage@packet:	
  2144                           ; 1 bytes @ 0x19
  2145                           
  2146                           
  2147                           ; 2 bytes @ 0x19
  2148  00B9                     	ds	2
  2149  00BB                     setMessage@topic:	
  2150                           
  2151                           ; 2 bytes @ 0x1B
  2152  00BB                     	ds	2
  2153  00BD                     setMessage@value:	
  2154                           
  2155                           ; 3 bytes @ 0x1D
  2156  00BD                     	ds	3
  2157  00C0                     ??_setMessage:	
  2158                           
  2159                           ; 1 bytes @ 0x20
  2160  00C0                     	ds	1
  2161  00C1                     setMessage@status:	
  2162                           
  2163                           ; 2 bytes @ 0x21
  2164  00C1                     	ds	2
  2165  00C3                     ??_loop:	
  2166                           
  2167                           ; 1 bytes @ 0x23
  2168  00C3                     	ds	1
  2169  00C4                     ??_main:	
  2170                           
  2171                           ; 1 bytes @ 0x24
  2172  00C4                     	ds	1
  2173  00C5                     main@pipe:	
  2174                           
  2175                           ; 1 bytes @ 0x25
  2176  00C5                     	ds	1
  2177  00C6                     main@packet:	
  2178                           
  2179                           ; 33 bytes @ 0x26
  2180  00C6                     	ds	33
  2181                           
  2182                           	psect	cstackCOMMON
  2183  0070                     __pcstackCOMMON:	
  2184  0070                     ?_isdigit:	
  2185  0070                     ?_nrf24l01ISR:	
  2186                           ; 1 bit 
  2187                           
  2188  0070                     ?_nrf24l01SetRXMode:	
  2189                           ; 1 bytes @ 0x0
  2190                           
  2191  0070                     ?_nrf24l01GetRXPacket:	
  2192                           ; 1 bytes @ 0x0
  2193                           
  2194  0070                     ?_nrf24l01Init:	
  2195                           ; 1 bytes @ 0x0
  2196                           
  2197  0070                     ?_nrf24l01SetTXPipe:	
  2198                           ; 1 bytes @ 0x0
  2199                           
  2200  0070                     ?_nrf24l01SetRXPipe:	
  2201                           ; 1 bytes @ 0x0
  2202                           
  2203  0070                     ?_nrf24l01CELow:	
  2204                           ; 1 bytes @ 0x0
  2205                           
  2206  0070                     ??_nrf24l01CELow:	
  2207                           ; 1 bytes @ 0x0
  2208                           
  2209  0070                     ?_nrf24l01CEHigh:	
  2210                           ; 1 bytes @ 0x0
  2211                           
  2212  0070                     ??_nrf24l01CEHigh:	
  2213                           ; 1 bytes @ 0x0
  2214                           
  2215  0070                     ?_nrf24l01CSLow:	
  2216                           ; 1 bytes @ 0x0
  2217                           
  2218  0070                     ??_nrf24l01CSLow:	
  2219                           ; 1 bytes @ 0x0
  2220                           
  2221  0070                     ?_nrf24l01CSHigh:	
  2222                           ; 1 bytes @ 0x0
  2223                           
  2224  0070                     ??_nrf24l01CSHigh:	
  2225                           ; 1 bytes @ 0x0
  2226                           
  2227  0070                     ?_nrf24l01InterfaceInit:	
  2228                           ; 1 bytes @ 0x0
  2229                           
  2230  0070                     ?_nrf24l01SPISend:	
  2231                           ; 1 bytes @ 0x0
  2232                           
  2233  0070                     ??_nrf24l01SPISend:	
  2234                           ; 1 bytes @ 0x0
  2235                           
  2236  0070                     ?_nrf24l01SPIStart:	
  2237                           ; 1 bytes @ 0x0
  2238                           
  2239  0070                     ??_nrf24l01SPIStart:	
  2240                           ; 1 bytes @ 0x0
  2241                           
  2242  0070                     ?_nrf24l01SPIEnd:	
  2243                           ; 1 bytes @ 0x0
  2244                           
  2245  0070                     ??_nrf24l01SPIEnd:	
  2246                           ; 1 bytes @ 0x0
  2247                           
  2248  0070                     ?_enableInterrupts:	
  2249                           ; 1 bytes @ 0x0
  2250                           
  2251  0070                     ??_enableInterrupts:	
  2252                           ; 1 bytes @ 0x0
  2253                           
  2254  0070                     ?_exception:	
  2255                           ; 1 bytes @ 0x0
  2256                           
  2257  0070                     ??_exception:	
  2258                           ; 1 bytes @ 0x0
  2259                           
  2260  0070                     ?_ISR:	
  2261                           ; 1 bytes @ 0x0
  2262                           
  2263  0070                     ?_sleep:	
  2264                           ; 1 bytes @ 0x0
  2265                           
  2266  0070                     ?_checkTXPower:	
  2267                           ; 1 bytes @ 0x0
  2268                           
  2269  0070                     ?_loop:	
  2270                           ; 1 bytes @ 0x0
  2271                           
  2272  0070                     ?_nrf24l01GetPipe:	
  2273                           ; 1 bytes @ 0x0
  2274                           
  2275  0070                     ?_main:	
  2276                           ; 1 bytes @ 0x0
  2277                           
  2278  0070                     ?_nrf24l01CheckACK:	
  2279                           ; 1 bytes @ 0x0
  2280                           
  2281  0070                     ?_nrf24l01ReceivePacket:	
  2282                           ; 1 bytes @ 0x0
  2283                           
  2284  0070                     ?_nrf24l01InitRegisters:	
  2285                           ; 1 bytes @ 0x0
  2286                           
  2287  0070                     ?i1_nrf24l01SetRXMode:	
  2288                           ; 1 bytes @ 0x0
  2289                           
  2290  0070                     ?i1_memset:	
  2291                           ; 1 bytes @ 0x0
  2292                           
  2293  0070                     ?_strcmp:	
  2294                           ; 1 bytes @ 0x0
  2295                           
  2296  0070                     nrf24l01SPISend@data:	
  2297                           ; 2 bytes @ 0x0
  2298                           
  2299  0070                     enableInterrupts@enable:	
  2300                           ; 1 bytes @ 0x0
  2301                           
  2302  0070                     exception@exception:	
  2303                           ; 1 bytes @ 0x0
  2304                           
  2305  0070                     strcmp@s1:	
  2306                           ; 1 bytes @ 0x0
  2307                           
  2308  0070                     i1memset@p1:	
  2309                           ; 2 bytes @ 0x0
  2310                           
  2311                           
  2312                           ; 2 bytes @ 0x0
  2313  0070                     	ds	1
  2314  0071                     ?i1_nrf24l01Send:	
  2315  0071                     i1nrf24l01Send@data:	
  2316                           ; 1 bytes @ 0x1
  2317                           
  2318                           
  2319                           ; 1 bytes @ 0x1
  2320  0071                     	ds	1
  2321  0072                     ??i1_nrf24l01Send:	
  2322  0072                     strcmp@s2:	
  2323                           ; 1 bytes @ 0x2
  2324                           
  2325  0072                     i1memset@c:	
  2326                           ; 1 bytes @ 0x2
  2327                           
  2328                           
  2329                           ; 2 bytes @ 0x2
  2330  0072                     	ds	1
  2331  0073                     ??_strcmp:	
  2332  0073                     i1nrf24l01Send@command:	
  2333                           ; 1 bytes @ 0x3
  2334                           
  2335                           
  2336                           ; 1 bytes @ 0x3
  2337  0073                     	ds	1
  2338  0074                     ??i1_nrf24l01SetRXMode:	
  2339  0074                     strcmp@r:	
  2340                           ; 1 bytes @ 0x4
  2341                           
  2342  0074                     i1memset@n:	
  2343                           ; 1 bytes @ 0x4
  2344                           
  2345                           
  2346                           ; 2 bytes @ 0x4
  2347  0074                     	ds	1
  2348  0075                     i1nrf24l01SetRXMode@config:	
  2349                           
  2350                           ; 1 bytes @ 0x5
  2351  0075                     	ds	1
  2352  0076                     ??i1_memset:	
  2353  0076                     i1nrf24l01SetRXMode@rxMode:	
  2354                           ; 1 bytes @ 0x6
  2355                           
  2356  0076                     i1memset@p:	
  2357                           ; 1 bytes @ 0x6
  2358                           
  2359                           
  2360                           ; 2 bytes @ 0x6
  2361  0076                     	ds	1
  2362  0077                     ??_nrf24l01CheckACK:	
  2363                           
  2364                           ; 1 bytes @ 0x7
  2365  0077                     	ds	1
  2366  0078                     ??_nrf24l01ReceivePacket:	
  2367                           
  2368                           ; 1 bytes @ 0x8
  2369  0078                     	ds	1
  2370  0079                     nrf24l01ReceivePacket@width:	
  2371                           
  2372                           ; 1 bytes @ 0x9
  2373  0079                     	ds	1
  2374  007A                     nrf24l01ReceivePacket@i:	
  2375                           
  2376                           ; 1 bytes @ 0xA
  2377  007A                     	ds	1
  2378  007B                     ??_nrf24l01ISR:	
  2379                           
  2380                           ; 1 bytes @ 0xB
  2381  007B                     	ds	1
  2382  007C                     nrf24l01ISR@status:	
  2383                           
  2384                           ; 1 bytes @ 0xC
  2385  007C                     	ds	1
  2386  007D                     ??_ISR:	
  2387                           
  2388                           	psect	cstackBANK0
  2389  0020                     __pcstackBANK0:	
  2390                           ; 1 bytes @ 0xD
  2391                           
  2392  0020                     ?___ftge:	
  2393  0020                     ??_nrf24l01GetRXPacket:	
  2394                           ; 1 bit 
  2395                           
  2396  0020                     ?_nrf24l01Send:	
  2397                           ; 1 bytes @ 0x0
  2398                           
  2399  0020                     ?_strcpy:	
  2400                           ; 1 bytes @ 0x0
  2401                           
  2402  0020                     ??_isdigit:	
  2403                           ; 1 bytes @ 0x0
  2404                           
  2405  0020                     ??_nrf24l01InterfaceInit:	
  2406                           ; 1 bytes @ 0x0
  2407                           
  2408  0020                     ??_sleep:	
  2409                           ; 1 bytes @ 0x0
  2410                           
  2411  0020                     ?___bmul:	
  2412                           ; 1 bytes @ 0x0
  2413                           
  2414  0020                     ?_memset:	
  2415                           ; 1 bytes @ 0x0
  2416                           
  2417  0020                     ?_strlen:	
  2418                           ; 2 bytes @ 0x0
  2419                           
  2420  0020                     ?___wmul:	
  2421                           ; 2 bytes @ 0x0
  2422                           
  2423  0020                     ?___lwmod:	
  2424                           ; 2 bytes @ 0x0
  2425                           
  2426  0020                     ?___ftpack:	
  2427                           ; 2 bytes @ 0x0
  2428                           
  2429  0020                     ?___lldiv:	
  2430                           ; 3 bytes @ 0x0
  2431                           
  2432  0020                     nrf24l01Send@data:	
  2433                           ; 4 bytes @ 0x0
  2434                           
  2435  0020                     ___bmul@multiplicand:	
  2436                           ; 1 bytes @ 0x0
  2437                           
  2438  0020                     _isdigit$1796:	
  2439                           ; 1 bytes @ 0x0
  2440                           
  2441  0020                     ___wmul@multiplier:	
  2442                           ; 1 bytes @ 0x0
  2443                           
  2444  0020                     ___lwmod@divisor:	
  2445                           ; 2 bytes @ 0x0
  2446                           
  2447  0020                     memset@p1:	
  2448                           ; 2 bytes @ 0x0
  2449                           
  2450  0020                     strcpy@from:	
  2451                           ; 2 bytes @ 0x0
  2452                           
  2453  0020                     strlen@s:	
  2454                           ; 2 bytes @ 0x0
  2455                           
  2456  0020                     ___ftpack@arg:	
  2457                           ; 2 bytes @ 0x0
  2458                           
  2459  0020                     ___ftge@ff1:	
  2460                           ; 3 bytes @ 0x0
  2461                           
  2462  0020                     ___lldiv@divisor:	
  2463                           ; 3 bytes @ 0x0
  2464                           
  2465                           
  2466                           ; 4 bytes @ 0x0
  2467  0020                     	ds	1
  2468  0021                     ??_nrf24l01Send:	
  2469  0021                     ??___bmul:	
  2470                           ; 1 bytes @ 0x1
  2471                           
  2472  0021                     sleep@wdps:	
  2473                           ; 1 bytes @ 0x1
  2474                           
  2475  0021                     isdigit@c:	
  2476                           ; 1 bytes @ 0x1
  2477                           
  2478                           
  2479                           ; 1 bytes @ 0x1
  2480  0021                     	ds	1
  2481  0022                     ??_strlen:	
  2482  0022                     ??_strcpy:	
  2483                           ; 1 bytes @ 0x2
  2484                           
  2485  0022                     nrf24l01Send@command:	
  2486                           ; 1 bytes @ 0x2
  2487                           
  2488  0022                     ___bmul@product:	
  2489                           ; 1 bytes @ 0x2
  2490                           
  2491  0022                     ___wmul@multiplicand:	
  2492                           ; 1 bytes @ 0x2
  2493                           
  2494  0022                     ___lwmod@dividend:	
  2495                           ; 2 bytes @ 0x2
  2496                           
  2497  0022                     memset@c:	
  2498                           ; 2 bytes @ 0x2
  2499                           
  2500                           
  2501                           ; 2 bytes @ 0x2
  2502  0022                     	ds	1
  2503  0023                     ??_nrf24l01SetRXMode:	
  2504  0023                     ?_nrf24l01ChangeTXPower:	
  2505                           ; 1 bytes @ 0x3
  2506                           
  2507  0023                     ??_nrf24l01SetRXPipe:	
  2508                           ; 1 bytes @ 0x3
  2509                           
  2510  0023                     ___bmul@multiplier:	
  2511                           ; 1 bytes @ 0x3
  2512                           
  2513  0023                     ___ftpack@exp:	
  2514                           ; 1 bytes @ 0x3
  2515                           
  2516  0023                     strcpy@to:	
  2517                           ; 1 bytes @ 0x3
  2518                           
  2519  0023                     nrf24l01ChangeTXPower@addPower:	
  2520                           ; 1 bytes @ 0x3
  2521                           
  2522  0023                     ___ftge@ff2:	
  2523                           ; 2 bytes @ 0x3
  2524                           
  2525                           
  2526                           ; 3 bytes @ 0x3
  2527  0023                     	ds	1
  2528  0024                     ??_nrf24l01SetTXPipe:	
  2529  0024                     ??___wmul:	
  2530                           ; 1 bytes @ 0x4
  2531                           
  2532  0024                     ??___lwmod:	
  2533                           ; 1 bytes @ 0x4
  2534                           
  2535  0024                     nrf24l01SetRXMode@config:	
  2536                           ; 1 bytes @ 0x4
  2537                           
  2538  0024                     ___ftpack@sign:	
  2539                           ; 1 bytes @ 0x4
  2540                           
  2541  0024                     strcpy@cp:	
  2542                           ; 1 bytes @ 0x4
  2543                           
  2544  0024                     ___wmul@product:	
  2545                           ; 1 bytes @ 0x4
  2546                           
  2547  0024                     memset@n:	
  2548                           ; 2 bytes @ 0x4
  2549                           
  2550  0024                     strlen@cp:	
  2551                           ; 2 bytes @ 0x4
  2552                           
  2553  0024                     ___lldiv@dividend:	
  2554                           ; 2 bytes @ 0x4
  2555                           
  2556                           
  2557                           ; 4 bytes @ 0x4
  2558  0024                     	ds	1
  2559  0025                     ??_nrf24l01ChangeTXPower:	
  2560  0025                     ??___ftpack:	
  2561                           ; 1 bytes @ 0x5
  2562                           
  2563  0025                     nrf24l01SetRXMode@rxMode:	
  2564                           ; 1 bytes @ 0x5
  2565                           
  2566  0025                     nrf24l01SetRXPipe@pipe:	
  2567                           ; 1 bytes @ 0x5
  2568                           
  2569  0025                     ___lwmod@counter:	
  2570                           ; 1 bytes @ 0x5
  2571                           
  2572                           
  2573                           ; 1 bytes @ 0x5
  2574  0025                     	ds	1
  2575  0026                     ??_memset:	
  2576  0026                     ??_nrf24l01GetPipe:	
  2577                           ; 1 bytes @ 0x6
  2578                           
  2579  0026                     ??___ftge:	
  2580                           ; 1 bytes @ 0x6
  2581                           
  2582  0026                     nrf24l01ChangeTXPower@rfSetup:	
  2583                           ; 1 bytes @ 0x6
  2584                           
  2585  0026                     nrf24l01SetTXPipe@pipe:	
  2586                           ; 1 bytes @ 0x6
  2587                           
  2588  0026                     nrf24l01SetRXPipe@enRXAddr:	
  2589                           ; 1 bytes @ 0x6
  2590                           
  2591  0026                     memset@p:	
  2592                           ; 1 bytes @ 0x6
  2593                           
  2594                           
  2595                           ; 2 bytes @ 0x6
  2596  0026                     	ds	1
  2597  0027                     ?_nrf24l01SendPacket:	
  2598  0027                     ??_checkTXPower:	
  2599                           ; 1 bytes @ 0x7
  2600                           
  2601  0027                     ??_nrf24l01InitRegisters:	
  2602                           ; 1 bytes @ 0x7
  2603                           
  2604  0027                     nrf24l01SendPacket@Packet:	
  2605                           ; 1 bytes @ 0x7
  2606                           
  2607                           
  2608                           ; 2 bytes @ 0x7
  2609  0027                     	ds	1
  2610  0028                     ??___lldiv:	
  2611  0028                     ?___awtoft:	
  2612                           ; 1 bytes @ 0x8
  2613                           
  2614  0028                     ?___lbtoft:	
  2615                           ; 3 bytes @ 0x8
  2616                           
  2617  0028                     ?___lltoft:	
  2618                           ; 3 bytes @ 0x8
  2619                           
  2620  0028                     ?___lwtoft:	
  2621                           ; 3 bytes @ 0x8
  2622                           
  2623  0028                     checkTXPower@rxPacket:	
  2624                           ; 3 bytes @ 0x8
  2625                           
  2626  0028                     nrf24l01GetPipe@pipe:	
  2627                           ; 1 bytes @ 0x8
  2628                           
  2629  0028                     ___awtoft@c:	
  2630                           ; 1 bytes @ 0x8
  2631                           
  2632  0028                     ___lwtoft@c:	
  2633                           ; 2 bytes @ 0x8
  2634                           
  2635  0028                     ___lltoft@c:	
  2636                           ; 2 bytes @ 0x8
  2637                           
  2638                           
  2639                           ; 4 bytes @ 0x8
  2640  0028                     	ds	1
  2641  0029                     ??_nrf24l01SendPacket:	
  2642  0029                     nrf24l01GetPipe@name:	
  2643                           ; 1 bytes @ 0x9
  2644                           
  2645  0029                     nrf24l01InitRegisters@channel:	
  2646                           ; 1 bytes @ 0x9
  2647                           
  2648  0029                     ___lldiv@quotient:	
  2649                           ; 1 bytes @ 0x9
  2650                           
  2651                           
  2652                           ; 4 bytes @ 0x9
  2653  0029                     	ds	1
  2654  002A                     nrf24l01GetPipe@i:	
  2655  002A                     nrf24l01InitRegisters@setupAW:	
  2656                           ; 1 bytes @ 0xA
  2657                           
  2658                           
  2659                           ; 1 bytes @ 0xA
  2660  002A                     	ds	1
  2661  002B                     ??___awtoft:	
  2662  002B                     ??___lbtoft:	
  2663                           ; 1 bytes @ 0xB
  2664                           
  2665  002B                     ??___lwtoft:	
  2666                           ; 1 bytes @ 0xB
  2667                           
  2668  002B                     nrf24l01InitRegisters@feature:	
  2669                           ; 1 bytes @ 0xB
  2670                           
  2671                           
  2672                           ; 1 bytes @ 0xB
  2673  002B                     	ds	1
  2674  002C                     ??___lltoft:	
  2675  002C                     nrf24l01InitRegisters@rfSetup:	
  2676                           ; 1 bytes @ 0xC
  2677                           
  2678                           
  2679                           ; 1 bytes @ 0xC
  2680  002C                     	ds	1
  2681  002D                     nrf24l01SendPacket@i:	
  2682  002D                     nrf24l01InitRegisters@status:	
  2683                           ; 1 bytes @ 0xD
  2684                           
  2685  002D                     ___lldiv@counter:	
  2686                           ; 1 bytes @ 0xD
  2687                           
  2688  002D                     ___awtoft@sign:	
  2689                           ; 1 bytes @ 0xD
  2690                           
  2691  002D                     ___lltoft@exp:	
  2692                           ; 1 bytes @ 0xD
  2693                           
  2694                           
  2695                           ; 1 bytes @ 0xD
  2696  002D                     	ds	1
  2697  002E                     ?___ftadd:	
  2698  002E                     ?___llmod:	
  2699                           ; 3 bytes @ 0xE
  2700                           
  2701  002E                     nrf24l01InitRegisters@enAA:	
  2702                           ; 4 bytes @ 0xE
  2703                           
  2704  002E                     ___ftadd@f1:	
  2705                           ; 1 bytes @ 0xE
  2706                           
  2707  002E                     ___llmod@divisor:	
  2708                           ; 3 bytes @ 0xE
  2709                           
  2710                           
  2711                           ; 4 bytes @ 0xE
  2712  002E                     	ds	1
  2713  002F                     nrf24l01InitRegisters@DynPD:	
  2714  002F                     ___lbtoft@c:	
  2715                           ; 1 bytes @ 0xF
  2716                           
  2717                           
  2718                           ; 1 bytes @ 0xF
  2719  002F                     	ds	1
  2720  0030                     nrf24l01InitRegisters@config:	
  2721                           
  2722                           ; 1 bytes @ 0x10
  2723  0030                     	ds	1
  2724  0031                     nrf24l01InitRegisters@i:	
  2725  0031                     ___ftadd@f2:	
  2726                           ; 2 bytes @ 0x11
  2727                           
  2728                           
  2729                           ; 3 bytes @ 0x11
  2730  0031                     	ds	1
  2731  0032                     ___llmod@dividend:	
  2732                           
  2733                           ; 4 bytes @ 0x12
  2734  0032                     	ds	1
  2735  0033                     ??_nrf24l01Init:	
  2736                           
  2737                           ; 1 bytes @ 0x13
  2738  0033                     	ds	1
  2739  0034                     ??___ftadd:	
  2740                           
  2741                           ; 1 bytes @ 0x14
  2742  0034                     	ds	2
  2743  0036                     ??___llmod:	
  2744                           
  2745                           ; 1 bytes @ 0x16
  2746  0036                     	ds	1
  2747  0037                     ___llmod@counter:	
  2748                           
  2749                           ; 1 bytes @ 0x17
  2750  0037                     	ds	1
  2751  0038                     ?_sprintf:	
  2752  0038                     ___ftadd@sign:	
  2753                           ; 2 bytes @ 0x18
  2754                           
  2755  0038                     sprintf@f:	
  2756                           ; 1 bytes @ 0x18
  2757                           
  2758                           
  2759                           ; 2 bytes @ 0x18
  2760  0038                     	ds	1
  2761  0039                     ___ftadd@exp2:	
  2762                           
  2763                           ; 1 bytes @ 0x19
  2764  0039                     	ds	1
  2765  003A                     ___ftadd@exp1:	
  2766                           
  2767                           ; 1 bytes @ 0x1A
  2768  003A                     	ds	1
  2769  003B                     ?___ftdiv:	
  2770  003B                     ?___ftsub:	
  2771                           ; 3 bytes @ 0x1B
  2772                           
  2773  003B                     ___ftdiv@f2:	
  2774                           ; 3 bytes @ 0x1B
  2775                           
  2776  003B                     ___ftsub@f2:	
  2777                           ; 3 bytes @ 0x1B
  2778                           
  2779                           
  2780                           ; 3 bytes @ 0x1B
  2781  003B                     	ds	3
  2782  003E                     ___ftdiv@f1:	
  2783  003E                     ___ftsub@f1:	
  2784                           ; 3 bytes @ 0x1E
  2785                           
  2786                           
  2787                           ; 3 bytes @ 0x1E
  2788  003E                     	ds	3
  2789  0041                     ??___ftdiv:	
  2790  0041                     ??___ftsub:	
  2791                           ; 1 bytes @ 0x21
  2792                           
  2793                           
  2794                           ; 1 bytes @ 0x21
  2795  0041                     	ds	1
  2796  0042                     ??_sprintf:	
  2797                           
  2798                           ; 1 bytes @ 0x22
  2799  0042                     	ds	3
  2800  0045                     ___ftdiv@cntr:	
  2801                           
  2802                           ; 1 bytes @ 0x25
  2803  0045                     	ds	1
  2804  0046                     ___ftdiv@f3:	
  2805                           
  2806                           ; 3 bytes @ 0x26
  2807  0046                     	ds	2
  2808  0048                     sprintf@flag:	
  2809                           
  2810                           ; 1 bytes @ 0x28
  2811  0048                     	ds	1
  2812  0049                     sprintf@ap:	
  2813  0049                     ___ftdiv@exp:	
  2814                           ; 1 bytes @ 0x29
  2815                           
  2816                           
  2817                           ; 1 bytes @ 0x29
  2818  0049                     	ds	1
  2819  004A                     ___ftdiv@sign:	
  2820  004A                     sprintf@val:	
  2821                           ; 1 bytes @ 0x2A
  2822                           
  2823                           
  2824                           ; 4 bytes @ 0x2A
  2825  004A                     	ds	1
  2826  004B                     ?_getADCValue:	
  2827                           
  2828                           ; 3 bytes @ 0x2B
  2829  004B                     	ds	3
  2830  004E                     ??_getADCValue:	
  2831  004E                     sprintf@sp:	
  2832                           ; 1 bytes @ 0x2E
  2833                           
  2834                           
  2835                           ; 1 bytes @ 0x2E
  2836  004E                     	ds	1
  2837  004F                     sprintf@width:	
  2838                           
  2839                           ; 2 bytes @ 0x2F
  2840  004F                     	ds	2
  2841  0051                     getADCValue@adcLoop:	
  2842  0051                     sprintf@prec:	
  2843                           ; 2 bytes @ 0x31
  2844                           
  2845                           
  2846                           ; 2 bytes @ 0x31
  2847  0051                     	ds	2
  2848  0053                     getADCValue@channel:	
  2849  0053                     sprintf@c:	
  2850                           ; 1 bytes @ 0x33
  2851                           
  2852                           
  2853                           ; 1 bytes @ 0x33
  2854  0053                     	ds	1
  2855  0054                     getADCValue@adcSum:	
  2856                           
  2857                           ; 3 bytes @ 0x34
  2858  0054                     	ds	3
  2859  0057                     ?___ftmul:	
  2860  0057                     ?___ftneg:	
  2861                           ; 3 bytes @ 0x37
  2862                           
  2863  0057                     ___ftmul@f1:	
  2864                           ; 3 bytes @ 0x37
  2865                           
  2866  0057                     ___ftneg@f1:	
  2867                           ; 3 bytes @ 0x37
  2868                           
  2869                           
  2870                           ; 3 bytes @ 0x37
  2871  0057                     	ds	3
  2872  005A                     ??___ftneg:	
  2873  005A                     ___ftmul@f2:	
  2874                           ; 1 bytes @ 0x3A
  2875                           
  2876                           
  2877                           ; 3 bytes @ 0x3A
  2878  005A                     	ds	3
  2879  005D                     ??___ftmul:	
  2880                           
  2881                           ; 1 bytes @ 0x3D
  2882  005D                     	ds	4
  2883  0061                     ___ftmul@exp:	
  2884                           
  2885                           ; 1 bytes @ 0x41
  2886  0061                     	ds	1
  2887  0062                     ___ftmul@f3_as_product:	
  2888                           
  2889                           ; 3 bytes @ 0x42
  2890  0062                     	ds	3
  2891  0065                     ___ftmul@cntr:	
  2892                           
  2893                           ; 1 bytes @ 0x45
  2894  0065                     	ds	1
  2895  0066                     ___ftmul@sign:	
  2896                           
  2897                           ; 1 bytes @ 0x46
  2898  0066                     	ds	1
  2899  0067                     ?___fttol:	
  2900  0067                     ___fttol@f1:	
  2901                           ; 4 bytes @ 0x47
  2902                           
  2903                           
  2904                           ; 3 bytes @ 0x47
  2905  0067                     	ds	4
  2906  006B                     ??___fttol:	
  2907                           
  2908                           ; 1 bytes @ 0x4B
  2909  006B                     	ds	4
  2910  006F                     ??_ftoa:	
  2911                           
  2912                           ; 1 bytes @ 0x4F
  2913  006F                     	ds	1
  2914  0070                     ??_strcat:	
  2915                           
  2916                           	psect	maintext
  2917  0E0E                     __pmaintext:	
  2918                           ; 1 bytes @ 0x50
  2919 ;;
  2920 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2921 ;;
  2922 ;; *************** function _main *****************
  2923 ;; Defined at:
  2924 ;;		line 189 in file "main.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;		None
  2927 ;; Auto vars:     Size  Location     Type
  2928 ;;  packet         33   38[BANK1 ] struct .
  2929 ;;  pipe            1   37[BANK1 ] unsigned char 
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  1    wreg      void 
  2932 ;; Registers used:
  2933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2934 ;; Tracked objects:
  2935 ;;		On entry : B1F/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2940 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  2941 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  2942 ;;      Totals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  2943 ;;Total ram usage:       35 bytes
  2944 ;; Hardware stack levels required when called:   13
  2945 ;; This function calls:
  2946 ;;		___lwtoft
  2947 ;;		_loop
  2948 ;;		_nrf24l01GetPipe
  2949 ;;		_nrf24l01Init
  2950 ;;		_nrf24l01SendPacket
  2951 ;;		_nrf24l01SetRXPipe
  2952 ;;		_nrf24l01SetTXPipe
  2953 ;;		_setMessage
  2954 ;;		_sleep
  2955 ;;		_strcpy
  2956 ;; This function is called by:
  2957 ;;		Startup code after reset
  2958 ;; This function uses a non-reentrant model
  2959 ;;
  2960                           
  2961                           
  2962                           ;psect for function _main
  2963  0E0E                     _main:	
  2964                           
  2965                           ;main.c: 192: ANSELA = 0x00;
  2966                           
  2967                           ;incstack = 0
  2968                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2969  0E0E  0023               	movlb	3	; select bank3
  2970  0E0F  018C               	clrf	12	;volatile
  2971                           
  2972                           ;main.c: 193: ANSELC = 0x00;
  2973  0E10  018E               	clrf	14	;volatile
  2974                           
  2975                           ;main.c: 195: ODCONA = 0x00;
  2976  0E11  0025               	movlb	5	; select bank5
  2977  0E12  018C               	clrf	12	;volatile
  2978                           
  2979                           ;main.c: 196: ODCONC = 0x00;
  2980  0E13  018E               	clrf	14	;volatile
  2981                           
  2982                           ;main.c: 201: INLVLA = 0x00;
  2983  0E14  0027               	movlb	7	; select bank7
  2984  0E15  018C               	clrf	12	;volatile
  2985                           
  2986                           ;main.c: 202: INLVLC = 0x00;
  2987  0E16  018E               	clrf	14	;volatile
  2988                           
  2989                           ;main.c: 204: WPUA = 0x00;
  2990  0E17  0024               	movlb	4	; select bank4
  2991  0E18  018C               	clrf	12	;volatile
  2992                           
  2993                           ;main.c: 205: WPUC = 0x00;
  2994  0E19  018E               	clrf	14	;volatile
  2995                           
  2996                           ;main.c: 207: TRISCbits.TRISC5 = 0;
  2997  0E1A  0021               	movlb	1	; select bank1
  2998  0E1B  128E               	bcf	14,5	;volatile
  2999                           
  3000                           ;main.c: 208: TRISCbits.TRISC4 = 0;
  3001  0E1C  120E               	bcf	14,4	;volatile
  3002                           
  3003                           ;main.c: 210: PORTCbits.RC4 = 0;
  3004  0E1D  0020               	movlb	0	; select bank0
  3005  0E1E  120E               	bcf	14,4	;volatile
  3006                           
  3007                           ;main.c: 217: INTCONbits.PEIE = 0;
  3008  0E1F  130B               	bcf	11,6	;volatile
  3009                           
  3010                           ;main.c: 218: INTCONbits.GIE = 0;
  3011  0E20  138B               	bcf	11,7	;volatile
  3012                           
  3013                           ;main.c: 220: OSCCON1bits.NOSC = 0b000;
  3014  0E21  308F               	movlw	-113
  3015  0E22  0032               	movlb	18	; select bank18
  3016  0E23  0599               	andwf	25,f	;volatile
  3017                           
  3018                           ;main.c: 221: OSCCON1bits.NDIV = 0b000;
  3019  0E24  30F0               	movlw	-16
  3020  0E25  0599               	andwf	25,f	;volatile
  3021                           
  3022                           ;main.c: 223: _delay((unsigned long)((10)*(32000000/4000.0)));
  3023  0E26  3068               	movlw	104
  3024  0E27  0021               	movlb	1	; select bank1
  3025  0E28  00C4               	movwf	??_main^(0+128)
  3026  0E29  30E4               	movlw	228
  3027  0E2A                     u3357:	
  3028  0E2A  0B89               	decfsz	9,f
  3029  0E2B  2E2A               	goto	u3357
  3030  0E2C  0BC4               	decfsz	??_main^(0+128),f
  3031  0E2D  2E2A               	goto	u3357
  3032  0E2E  0000               	nop
  3033                           
  3034                           ;main.c: 227: strcpy(romData->name, "UH1");
  3035  0E2F  302D               	movlw	low (STR_7| (0+32768))
  3036  0E30  0020               	movlb	0	; select bank0
  3037  0E31  00A0               	movwf	strcpy@from
  3038  0E32  3098               	movlw	high (STR_7| (0+32768))
  3039  0E33  00A1               	movwf	strcpy@from+1
  3040  0E34  0021               	movlb	1	; select bank1
  3041  0E35  086E               	movf	_romData^(0+128),w
  3042  0E36  3E01               	addlw	1
  3043  0E37  3188  2085  318E   	fcall	_strcpy
  3044                           
  3045                           ;main.c: 229: nrf24l01Init();
  3046  0E3A  3189  2141  318E   	fcall	_nrf24l01Init
  3047                           
  3048                           ;main.c: 231: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3049  0E3D  0021               	movlb	1	; select bank1
  3050  0E3E  086E               	movf	_romData^(0+128),w
  3051  0E3F  3E01               	addlw	1
  3052  0E40  3187  27C8  318E   	fcall	_nrf24l01GetPipe
  3053  0E43  0021               	movlb	1	; select bank1
  3054  0E44  00C4               	movwf	??_main^(0+128)
  3055  0E45  0844               	movf	??_main^(0+128),w
  3056  0E46  00C5               	movwf	main@pipe^(0+128)
  3057                           
  3058                           ;main.c: 232: nrf24l01SetTXPipe(pipe);
  3059  0E47  0845               	movf	main@pipe^(0+128),w
  3060  0E48  318B  2375  318E   	fcall	_nrf24l01SetTXPipe
  3061                           
  3062                           ;main.c: 233: nrf24l01SetRXPipe(pipe);
  3063  0E4B  0021               	movlb	1	; select bank1
  3064  0E4C  0845               	movf	main@pipe^(0+128),w
  3065  0E4D  3188  20FE  318E   	fcall	_nrf24l01SetRXPipe
  3066                           
  3067                           ;main.c: 237: ADCON0bits.ADON = 0;
  3068  0E50  0021               	movlb	1	; select bank1
  3069  0E51  101D               	bcf	29,0	;volatile
  3070                           
  3071                           ;main.c: 240: PORTAbits.RA4 = 0;
  3072  0E52  0020               	movlb	0	; select bank0
  3073  0E53  120C               	bcf	12,4	;volatile
  3074                           
  3075                           ;main.c: 241: TRISAbits.TRISA4 = 1;
  3076  0E54  0021               	movlb	1	; select bank1
  3077  0E55  160C               	bsf	12,4	;volatile
  3078                           
  3079                           ;main.c: 242: WPUAbits.WPUA4 = 0;
  3080  0E56  0024               	movlb	4	; select bank4
  3081  0E57  120C               	bcf	12,4	;volatile
  3082                           
  3083                           ;main.c: 243: ODCONAbits.ODCA4 = 1;
  3084  0E58  0025               	movlb	5	; select bank5
  3085  0E59  160C               	bsf	12,4	;volatile
  3086                           
  3087                           ;main.c: 244: ANSELAbits.ANSA4 = 1;
  3088  0E5A  0023               	movlb	3	; select bank3
  3089  0E5B  160C               	bsf	12,4	;volatile
  3090                           
  3091                           ;main.c: 247: ANSELCbits.ANSC3 = 1;
  3092  0E5C  158E               	bsf	14,3	;volatile
  3093                           
  3094                           ;main.c: 248: TRISCbits.TRISC3 = 1;
  3095  0E5D  0021               	movlb	1	; select bank1
  3096  0E5E  158E               	bsf	14,3	;volatile
  3097                           
  3098                           ;main.c: 251: FVRCONbits.TSEN = 1;
  3099  0E5F  0022               	movlb	2	; select bank2
  3100  0E60  1697               	bsf	23,5	;volatile
  3101                           
  3102                           ;main.c: 252: FVRCONbits.TSRNG = 1;
  3103  0E61  1617               	bsf	23,4	;volatile
  3104                           
  3105                           ;main.c: 255: FVRCONbits.FVREN = 0;
  3106  0E62  1397               	bcf	23,7	;volatile
  3107                           
  3108                           ;main.c: 256: FVRCONbits.ADFVR = 0b10;
  3109  0E63  0817               	movf	23,w	;volatile
  3110  0E64  39FC               	andlw	-4
  3111  0E65  3802               	iorlw	2
  3112  0E66  0097               	movwf	23	;volatile
  3113                           
  3114                           ;main.c: 258: ADCON1bits.ADCS = 0b111;
  3115  0E67  3070               	movlw	112
  3116  0E68  0021               	movlb	1	; select bank1
  3117  0E69  049E               	iorwf	30,f	;volatile
  3118                           
  3119                           ;main.c: 259: ADCON1bits.ADFM = 1;
  3120  0E6A  179E               	bsf	30,7	;volatile
  3121                           
  3122                           ;main.c: 260: ADCON1bits.ADPREF = 0b11;
  3123  0E6B  3003               	movlw	3
  3124  0E6C  049E               	iorwf	30,f	;volatile
  3125                           
  3126                           ;main.c: 261: ADCON1bits.ADNREF = 0b00;
  3127  0E6D  111E               	bcf	30,2	;volatile
  3128                           
  3129                           ;main.c: 264: ADCON0bits.CHS = 3;
  3130  0E6E  081D               	movf	29,w	;volatile
  3131  0E6F  3903               	andlw	-253
  3132  0E70  380C               	iorlw	12
  3133  0E71  009D               	movwf	29	;volatile
  3134                           
  3135                           ;main.c: 269: TRISAbits.TRISA2 = 1;
  3136  0E72  150C               	bsf	12,2	;volatile
  3137                           
  3138                           ;main.c: 270: PIE0bits.INTE = 1;
  3139  0E73  1410               	bsf	16,0	;volatile
  3140                           
  3141                           ;main.c: 271: INTCONbits.INTEDG = 0;
  3142  0E74  100B               	bcf	11,0	;volatile
  3143                           
  3144                           ;main.c: 274: TRISAbits.TRISA5 = 0;
  3145  0E75  128C               	bcf	12,5	;volatile
  3146                           
  3147                           ;main.c: 275: PORTAbits.RA5 = 0;
  3148  0E76  0020               	movlb	0	; select bank0
  3149  0E77  128C               	bcf	12,5	;volatile
  3150                           
  3151                           ;main.c: 278: INTCONbits.PEIE = 1;
  3152  0E78  170B               	bsf	11,6	;volatile
  3153                           
  3154                           ;main.c: 279: INTCONbits.GIE = 1;
  3155  0E79  178B               	bsf	11,7	;volatile
  3156                           
  3157                           ;main.c: 281: nrf24l01Packet_t packet;;main.c: 283: setMessage(&packet, "BOOT", romData-
      +                          >bootMode);
  3158  0E7A  30C6               	movlw	low main@packet
  3159  0E7B  0021               	movlb	1	; select bank1
  3160  0E7C  00B9               	movwf	setMessage@packet^(0+128)
  3161  0E7D  3000               	movlw	high main@packet
  3162  0E7E  00BA               	movwf	(setMessage@packet+1)^(0+128)
  3163  0E7F  3028               	movlw	low (STR_8| (0+32768))
  3164  0E80  00BB               	movwf	setMessage@topic^(0+128)
  3165  0E81  3098               	movlw	high (STR_8| (0+32768))
  3166  0E82  00BC               	movwf	(setMessage@topic^(0+128)+1)
  3167  0E83  086E               	movf	_romData^(0+128),w
  3168  0E84  3E11               	addlw	17
  3169  0E85  0086               	movwf	6
  3170  0E86  3001               	movlw	1	; select bank2/3
  3171  0E87  0087               	movwf	7
  3172  0E88  3F40               	moviw [0]fsr1
  3173  0E89  0020               	movlb	0	; select bank0
  3174  0E8A  00A8               	movwf	___lwtoft@c
  3175  0E8B  3F41               	moviw [1]fsr1
  3176  0E8C  00A9               	movwf	___lwtoft@c+1
  3177  0E8D  3188  2002  318E   	fcall	___lwtoft
  3178  0E90  0020               	movlb	0	; select bank0
  3179  0E91  0828               	movf	?___lwtoft,w
  3180  0E92  0021               	movlb	1	; select bank1
  3181  0E93  00BD               	movwf	setMessage@value^(0+128)
  3182  0E94  0020               	movlb	0	; select bank0
  3183  0E95  0829               	movf	?___lwtoft+1,w
  3184  0E96  0021               	movlb	1	; select bank1
  3185  0E97  00BE               	movwf	(setMessage@value+1)^(0+128)
  3186  0E98  0020               	movlb	0	; select bank0
  3187  0E99  082A               	movf	?___lwtoft+2,w
  3188  0E9A  0021               	movlb	1	; select bank1
  3189  0E9B  00BF               	movwf	(setMessage@value+2)^(0+128)
  3190  0E9C  318D  2507  318E   	fcall	_setMessage
  3191                           
  3192                           ;main.c: 284: packet.packetData.byte = 0;
  3193  0E9F  0021               	movlb	1	; select bank1
  3194  0EA0  01C6               	clrf	main@packet^(0+128)
  3195                           
  3196                           ;main.c: 285: packet.packetData.ACKRequest = 0;
  3197  0EA1  1146               	bcf	main@packet^(0+128),2
  3198                           
  3199                           ;main.c: 286: nrf24l01SendPacket(&packet);
  3200  0EA2  30C6               	movlw	low main@packet
  3201  0EA3  0020               	movlb	0	; select bank0
  3202  0EA4  00A7               	movwf	nrf24l01SendPacket@Packet
  3203  0EA5  3000               	movlw	high main@packet
  3204  0EA6  00A8               	movwf	nrf24l01SendPacket@Packet+1
  3205  0EA7  3186  264C  318E   	fcall	_nrf24l01SendPacket
  3206                           
  3207                           ;main.c: 287: sleep(10);
  3208  0EAA  300A               	movlw	10
  3209  0EAB  3188  2032  318E   	fcall	_sleep
  3210  0EAE                     l3431:	
  3211                           ;main.c: 289: while(1){
  3212                           
  3213                           
  3214                           ;main.c: 290: loop();
  3215  0EAE  3181  21FF  318E   	fcall	_loop
  3216  0EB1  2EAE               	goto	l3431
  3217  0EB2                     __end_of_main:	
  3218                           ;main.c: 291: };main.c: 293: return;
  3219                           
  3220                           
  3221                           	psect	text1
  3222  0885                     __ptext1:	
  3223 ;; *************** function _strcpy *****************
  3224 ;; Defined at:
  3225 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;  to              1    wreg     PTR unsigned char 
  3228 ;;		 -> romDataMap(28), 
  3229 ;;  from            2    0[BANK0 ] PTR const unsigned char 
  3230 ;;		 -> STR_7(4), 
  3231 ;; Auto vars:     Size  Location     Type
  3232 ;;  to              1    3[BANK0 ] PTR unsigned char 
  3233 ;;		 -> romDataMap(28), 
  3234 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  3235 ;;		 -> romDataMap(28), 
  3236 ;; Return value:  Size  Location     Type
  3237 ;;                  1    wreg      PTR unsigned char 
  3238 ;; Registers used:
  3239 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3240 ;; Tracked objects:
  3241 ;;		On entry : 0/0
  3242 ;;		On exit  : 0/0
  3243 ;;		Unchanged: 0/0
  3244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3245 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3246 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3247 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3248 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3249 ;;Total ram usage:        5 bytes
  3250 ;; Hardware stack levels used:    1
  3251 ;; Hardware stack levels required when called:    7
  3252 ;; This function calls:
  3253 ;;		Nothing
  3254 ;; This function is called by:
  3255 ;;		_main
  3256 ;; This function uses a non-reentrant model
  3257 ;;
  3258                           
  3259                           
  3260                           ;psect for function _strcpy
  3261  0885                     _strcpy:	
  3262                           
  3263                           ;incstack = 0
  3264                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3265                           ;strcpy@to stored from wreg
  3266  0885  0020               	movlb	0	; select bank0
  3267  0886  00A3               	movwf	strcpy@to
  3268  0887  0823               	movf	strcpy@to,w
  3269  0888  00A2               	movwf	??_strcpy
  3270  0889  0822               	movf	??_strcpy,w
  3271  088A  00A4               	movwf	strcpy@cp
  3272  088B                     l3317:	
  3273  088B  0824               	movf	strcpy@cp,w
  3274  088C  0086               	movwf	6
  3275  088D  3001               	movlw	1	; select bank2/3
  3276  088E  0087               	movwf	7
  3277  088F  0820               	movf	strcpy@from,w
  3278  0890  0084               	movwf	4
  3279  0891  0821               	movf	strcpy@from+1,w
  3280  0892  0085               	movwf	5
  3281  0893  0800               	movf	0,w	;code access
  3282  0894  3FC0               	movwi [0]fsr1
  3283  0895  0889               	movf	9,f
  3284  0896  1903               	btfsc	3,2
  3285  0897  0008               	return
  3286  0898  3001               	movlw	1
  3287  0899  00A2               	movwf	??_strcpy
  3288  089A  0822               	movf	??_strcpy,w
  3289  089B  07A4               	addwf	strcpy@cp,f
  3290  089C  3001               	movlw	1
  3291  089D  07A0               	addwf	strcpy@from,f
  3292  089E  3000               	movlw	0
  3293  089F  3DA1               	addwfc	strcpy@from+1,f
  3294  08A0  288B               	goto	l3317
  3295  08A1                     __end_of_strcpy:	
  3296                           ;	Return value of _strcpy is never used
  3297                           
  3298                           
  3299                           	psect	text2
  3300  0941                     __ptext2:	
  3301 ;; *************** function _nrf24l01Init *****************
  3302 ;; Defined at:
  3303 ;;		line 444 in file "nrf24l01.c"
  3304 ;; Parameters:    Size  Location     Type
  3305 ;;		None
  3306 ;; Auto vars:     Size  Location     Type
  3307 ;;		None
  3308 ;; Return value:  Size  Location     Type
  3309 ;;                  1    wreg      void 
  3310 ;; Registers used:
  3311 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3312 ;; Tracked objects:
  3313 ;;		On entry : 0/0
  3314 ;;		On exit  : 0/0
  3315 ;;		Unchanged: 0/0
  3316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3319 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3320 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3321 ;;Total ram usage:        2 bytes
  3322 ;; Hardware stack levels used:    1
  3323 ;; Hardware stack levels required when called:   12
  3324 ;; This function calls:
  3325 ;;		_nrf24l01CEHigh
  3326 ;;		_nrf24l01CELow
  3327 ;;		_nrf24l01InitRegisters
  3328 ;;		_nrf24l01InterfaceInit
  3329 ;; This function is called by:
  3330 ;;		_main
  3331 ;; This function uses a non-reentrant model
  3332 ;;
  3333                           
  3334                           
  3335                           ;psect for function _nrf24l01Init
  3336  0941                     _nrf24l01Init:	
  3337                           
  3338                           ;nrf24l01.c: 447: nrf24l01InterfaceInit();
  3339                           
  3340                           ;incstack = 0
  3341                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3342  0941  3188  2069  3189   	fcall	_nrf24l01InterfaceInit
  3343                           
  3344                           ;nrf24l01.c: 452: nrf24l01CELow();
  3345  0944  3197  2743  3189   	fcall	_nrf24l01CELow
  3346                           
  3347                           ;nrf24l01.c: 454: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3348  0947  3003               	movlw	3
  3349  0948  0020               	movlb	0	; select bank0
  3350  0949  00B4               	movwf	??_nrf24l01Init+1
  3351  094A  3008               	movlw	8
  3352  094B  00B3               	movwf	??_nrf24l01Init
  3353  094C  3077               	movlw	119
  3354  094D                     u3367:	
  3355  094D  0B89               	decfsz	9,f
  3356  094E  294D               	goto	u3367
  3357  094F  0BB3               	decfsz	??_nrf24l01Init,f
  3358  0950  294D               	goto	u3367
  3359  0951  0BB4               	decfsz	??_nrf24l01Init+1,f
  3360  0952  294D               	goto	u3367
  3361                           
  3362                           ;nrf24l01.c: 456: nrf24l01InitRegisters();
  3363  0953  3183  235E  3189   	fcall	_nrf24l01InitRegisters
  3364                           
  3365                           ;nrf24l01.c: 458: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3366  0956  3003               	movlw	3
  3367  0957  0020               	movlb	0	; select bank0
  3368  0958  00B4               	movwf	??_nrf24l01Init+1
  3369  0959  3008               	movlw	8
  3370  095A  00B3               	movwf	??_nrf24l01Init
  3371  095B  3077               	movlw	119
  3372  095C                     u3377:	
  3373  095C  0B89               	decfsz	9,f
  3374  095D  295C               	goto	u3377
  3375  095E  0BB3               	decfsz	??_nrf24l01Init,f
  3376  095F  295C               	goto	u3377
  3377  0960  0BB4               	decfsz	??_nrf24l01Init+1,f
  3378  0961  295C               	goto	u3377
  3379                           
  3380                           ;nrf24l01.c: 460: nrf24l01CEHigh();
  3381  0962  3197  2740         	fcall	_nrf24l01CEHigh
  3382  0964  0008               	return
  3383  0965                     __end_of_nrf24l01Init:	
  3384                           
  3385                           	psect	text3
  3386  0869                     __ptext3:	
  3387 ;; *************** function _nrf24l01InterfaceInit *****************
  3388 ;; Defined at:
  3389 ;;		line 27 in file "interface.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;		None
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;		None
  3394 ;; Return value:  Size  Location     Type
  3395 ;;                  1    wreg      void 
  3396 ;; Registers used:
  3397 ;;		wreg, status,2, status,0
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3407 ;;Total ram usage:        0 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; Hardware stack levels required when called:    7
  3410 ;; This function calls:
  3411 ;;		Nothing
  3412 ;; This function is called by:
  3413 ;;		_nrf24l01Init
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           
  3418                           ;psect for function _nrf24l01InterfaceInit
  3419  0869                     _nrf24l01InterfaceInit:	
  3420                           
  3421                           ;interface.c: 29: TRISAbits.TRISA0 = 0;
  3422                           
  3423                           ;incstack = 0
  3424                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3425  0869  0021               	movlb	1	; select bank1
  3426  086A  100C               	bcf	12,0	;volatile
  3427                           
  3428                           ;interface.c: 30: TRISAbits.TRISA1 = 0;
  3429  086B  108C               	bcf	12,1	;volatile
  3430                           
  3431                           ;interface.c: 32: TRISCbits.TRISC1 = 1;
  3432  086C  148E               	bsf	14,1	;volatile
  3433                           
  3434                           ;interface.c: 33: TRISCbits.TRISC2 = 0;
  3435  086D  110E               	bcf	14,2	;volatile
  3436                           
  3437                           ;interface.c: 34: TRISCbits.TRISC0 = 0;
  3438  086E  100E               	bcf	14,0	;volatile
  3439                           
  3440                           ;interface.c: 36: SSP1CON1bits.SSPEN = 0;
  3441  086F  0024               	movlb	4	; select bank4
  3442  0870  1295               	bcf	21,5	;volatile
  3443                           
  3444                           ;interface.c: 38: RC1PPSbits.RC1PPS = 0b10001;
  3445  0871  003D               	movlb	29	; select bank29
  3446  0872  0821               	movf	33,w	;volatile
  3447  0873  39E0               	andlw	-32
  3448  0874  3811               	iorlw	17
  3449  0875  00A1               	movwf	33	;volatile
  3450                           
  3451                           ;interface.c: 39: RC2PPSbits.RC2PPS = 0b11001;
  3452  0876  0822               	movf	34,w	;volatile
  3453  0877  39E0               	andlw	-32
  3454  0878  3819               	iorlw	25
  3455  0879  00A2               	movwf	34	;volatile
  3456                           
  3457                           ;interface.c: 40: RC0PPSbits.RC0PPS = 0b11000;
  3458  087A  0820               	movf	32,w	;volatile
  3459  087B  39E0               	andlw	-32
  3460  087C  3818               	iorlw	24
  3461  087D  00A0               	movwf	32	;volatile
  3462                           
  3463                           ;interface.c: 42: SSP1CON1bits.CKP = 0;
  3464  087E  0024               	movlb	4	; select bank4
  3465  087F  1215               	bcf	21,4	;volatile
  3466                           
  3467                           ;interface.c: 43: SSP1STATbits.CKE = 1;
  3468  0880  1714               	bsf	20,6	;volatile
  3469                           
  3470                           ;interface.c: 44: SSP1CON1bits.SSPM = 0b0000;
  3471  0881  30F0               	movlw	-16
  3472  0882  0595               	andwf	21,f	;volatile
  3473                           
  3474                           ;interface.c: 46: SSP1CON1bits.SSPEN = 1;
  3475  0883  1695               	bsf	21,5	;volatile
  3476  0884  0008               	return
  3477  0885                     __end_of_nrf24l01InterfaceInit:	
  3478                           
  3479                           	psect	text4
  3480  035E                     __ptext4:	
  3481 ;; *************** function _nrf24l01InitRegisters *****************
  3482 ;; Defined at:
  3483 ;;		line 343 in file "nrf24l01.c"
  3484 ;; Parameters:    Size  Location     Type
  3485 ;;		None
  3486 ;; Auto vars:     Size  Location     Type
  3487 ;;  i               2   17[BANK0 ] unsigned int 
  3488 ;;  config          1   16[BANK0 ] struct .
  3489 ;;  DynPD           1   15[BANK0 ] struct .
  3490 ;;  enAA            1   14[BANK0 ] struct .
  3491 ;;  status          1   13[BANK0 ] struct .
  3492 ;;  rfSetup         1   12[BANK0 ] struct .
  3493 ;;  feature         1   11[BANK0 ] struct .
  3494 ;;  setupAW         1   10[BANK0 ] struct .
  3495 ;;  channel         1    9[BANK0 ] struct .
  3496 ;; Return value:  Size  Location     Type
  3497 ;;                  1    wreg      void 
  3498 ;; Registers used:
  3499 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3500 ;; Tracked objects:
  3501 ;;		On entry : 0/0
  3502 ;;		On exit  : 0/0
  3503 ;;		Unchanged: 0/0
  3504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3506 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3507 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3508 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3509 ;;Total ram usage:       12 bytes
  3510 ;; Hardware stack levels used:    1
  3511 ;; Hardware stack levels required when called:   11
  3512 ;; This function calls:
  3513 ;;		___bmul
  3514 ;;		_nrf24l01SPIEnd
  3515 ;;		_nrf24l01SPISend
  3516 ;;		_nrf24l01SPIStart
  3517 ;;		_nrf24l01Send
  3518 ;;		_nrf24l01SetRXPipe
  3519 ;;		_nrf24l01SetTXPipe
  3520 ;; This function is called by:
  3521 ;;		_nrf24l01Init
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           
  3526                           ;psect for function _nrf24l01InitRegisters
  3527  035E                     _nrf24l01InitRegisters:	
  3528                           
  3529                           ;nrf24l01.c: 345: n_CONFIG_t config;;nrf24l01.c: 347: config.PWR_UP = 0;
  3530                           
  3531                           ;incstack = 0
  3532                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3533  035E  0020               	movlb	0	; select bank0
  3534  035F  10B0               	bcf	nrf24l01InitRegisters@config,1
  3535                           
  3536                           ;nrf24l01.c: 348: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3537  0360  0830               	movf	nrf24l01InitRegisters@config,w
  3538  0361  00A7               	movwf	??_nrf24l01InitRegisters
  3539  0362  0827               	movf	??_nrf24l01InitRegisters,w
  3540  0363  00A0               	movwf	nrf24l01Send@data
  3541  0364  3020               	movlw	32
  3542  0365  3188  20DE  3183   	fcall	_nrf24l01Send
  3543                           
  3544                           ;nrf24l01.c: 350: n_SETUP_AW_t setupAW;;nrf24l01.c: 351: setupAW.byte = 0x00;
  3545  0368  0020               	movlb	0	; select bank0
  3546  0369  01AA               	clrf	nrf24l01InitRegisters@setupAW
  3547                           
  3548                           ;nrf24l01.c: 352: setupAW.AW = 0b11;
  3549  036A  3003               	movlw	3
  3550  036B  04AA               	iorwf	nrf24l01InitRegisters@setupAW,f
  3551                           
  3552                           ;nrf24l01.c: 353: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x02, setupAW.byte);
  3553  036C  082A               	movf	nrf24l01InitRegisters@setupAW,w
  3554  036D  00A7               	movwf	??_nrf24l01InitRegisters
  3555  036E  0827               	movf	??_nrf24l01InitRegisters,w
  3556  036F  00A0               	movwf	nrf24l01Send@data
  3557  0370  3022               	movlw	34
  3558  0371  3188  20DE  3183   	fcall	_nrf24l01Send
  3559                           
  3560                           ;nrf24l01.c: 356: n_RF_CH_t channel;;nrf24l01.c: 357: channel.RF_CH = 2;
  3561  0374  0020               	movlb	0	; select bank0
  3562  0375  0829               	movf	nrf24l01InitRegisters@channel,w
  3563  0376  3980               	andlw	-128
  3564  0377  3802               	iorlw	2
  3565  0378  00A9               	movwf	nrf24l01InitRegisters@channel
  3566                           
  3567                           ;nrf24l01.c: 358: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3568  0379  0829               	movf	nrf24l01InitRegisters@channel,w
  3569  037A  00A7               	movwf	??_nrf24l01InitRegisters
  3570  037B  0827               	movf	??_nrf24l01InitRegisters,w
  3571  037C  00A0               	movwf	nrf24l01Send@data
  3572  037D  3025               	movlw	37
  3573  037E  3188  20DE  3183   	fcall	_nrf24l01Send
  3574                           
  3575                           ;nrf24l01.c: 361: n_RF_SETUP_t rfSetup;;nrf24l01.c: 362: rfSetup.byte = 0x00;
  3576  0381  0020               	movlb	0	; select bank0
  3577  0382  01AC               	clrf	nrf24l01InitRegisters@rfSetup
  3578                           
  3579                           ;nrf24l01.c: 363: rfSetup.RF_DR_LOW = 0;
  3580  0383  12AC               	bcf	nrf24l01InitRegisters@rfSetup,5
  3581                           
  3582                           ;nrf24l01.c: 364: rfSetup.RF_DR_HIGH = 1;
  3583  0384  15AC               	bsf	nrf24l01InitRegisters@rfSetup,3
  3584                           
  3585                           ;nrf24l01.c: 365: rfSetup.RF_PWR = 3;
  3586  0385  3006               	movlw	6
  3587  0386  04AC               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3588                           
  3589                           ;nrf24l01.c: 366: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3590  0387  082C               	movf	nrf24l01InitRegisters@rfSetup,w
  3591  0388  00A7               	movwf	??_nrf24l01InitRegisters
  3592  0389  0827               	movf	??_nrf24l01InitRegisters,w
  3593  038A  00A0               	movwf	nrf24l01Send@data
  3594  038B  3026               	movlw	38
  3595  038C  3188  20DE  3183   	fcall	_nrf24l01Send
  3596                           
  3597                           ;nrf24l01.c: 369: nrf24l01SetRXPipe(0xFF);
  3598  038F  30FF               	movlw	255
  3599  0390  3188  20FE  3183   	fcall	_nrf24l01SetRXPipe
  3600                           
  3601                           ;nrf24l01.c: 372: n_EN_AA_t enAA;;nrf24l01.c: 373: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3602  0393  0020               	movlb	0	; select bank0
  3603  0394  01A0               	clrf	nrf24l01Send@data
  3604  0395  3001               	movlw	1
  3605  0396  3188  20DE  3183   	fcall	_nrf24l01Send
  3606  0399  0020               	movlb	0	; select bank0
  3607  039A  00A7               	movwf	??_nrf24l01InitRegisters
  3608  039B  0827               	movf	??_nrf24l01InitRegisters,w
  3609  039C  00AE               	movwf	nrf24l01InitRegisters@enAA
  3610                           
  3611                           ;nrf24l01.c: 374: enAA.ENAA_P0 = 0;
  3612  039D  102E               	bcf	nrf24l01InitRegisters@enAA,0
  3613                           
  3614                           ;nrf24l01.c: 375: enAA.ENAA_P1 = 0;
  3615  039E  10AE               	bcf	nrf24l01InitRegisters@enAA,1
  3616                           
  3617                           ;nrf24l01.c: 376: enAA.ENAA_P2 = 0;
  3618  039F  112E               	bcf	nrf24l01InitRegisters@enAA,2
  3619                           
  3620                           ;nrf24l01.c: 377: enAA.ENAA_P3 = 0;
  3621  03A0  11AE               	bcf	nrf24l01InitRegisters@enAA,3
  3622                           
  3623                           ;nrf24l01.c: 378: enAA.ENAA_P4 = 0;
  3624  03A1  122E               	bcf	nrf24l01InitRegisters@enAA,4
  3625                           
  3626                           ;nrf24l01.c: 379: enAA.ENAA_P5 = 0;
  3627  03A2  12AE               	bcf	nrf24l01InitRegisters@enAA,5
  3628                           
  3629                           ;nrf24l01.c: 380: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3630  03A3  082E               	movf	nrf24l01InitRegisters@enAA,w
  3631  03A4  00A7               	movwf	??_nrf24l01InitRegisters
  3632  03A5  0827               	movf	??_nrf24l01InitRegisters,w
  3633  03A6  00A0               	movwf	nrf24l01Send@data
  3634  03A7  3021               	movlw	33
  3635  03A8  3188  20DE  3183   	fcall	_nrf24l01Send
  3636                           
  3637                           ;nrf24l01.c: 384: n_FEATURE_t feature;;nrf24l01.c: 385: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3638  03AB  0020               	movlb	0	; select bank0
  3639  03AC  01A0               	clrf	nrf24l01Send@data
  3640  03AD  301D               	movlw	29
  3641  03AE  3188  20DE  3183   	fcall	_nrf24l01Send
  3642  03B1  0020               	movlb	0	; select bank0
  3643  03B2  00A7               	movwf	??_nrf24l01InitRegisters
  3644  03B3  0827               	movf	??_nrf24l01InitRegisters,w
  3645  03B4  00AB               	movwf	nrf24l01InitRegisters@feature
  3646                           
  3647                           ;nrf24l01.c: 386: feature.EN_DPL = 1;
  3648  03B5  152B               	bsf	nrf24l01InitRegisters@feature,2
  3649                           
  3650                           ;nrf24l01.c: 387: feature.EN_DYN_ACK = 1;
  3651  03B6  142B               	bsf	nrf24l01InitRegisters@feature,0
  3652                           
  3653                           ;nrf24l01.c: 388: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3654  03B7  082B               	movf	nrf24l01InitRegisters@feature,w
  3655  03B8  00A7               	movwf	??_nrf24l01InitRegisters
  3656  03B9  0827               	movf	??_nrf24l01InitRegisters,w
  3657  03BA  00A0               	movwf	nrf24l01Send@data
  3658  03BB  303D               	movlw	61
  3659  03BC  3188  20DE  3183   	fcall	_nrf24l01Send
  3660                           
  3661                           ;nrf24l01.c: 390: n_DYNPD_t DynPD;;nrf24l01.c: 391: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3662  03BF  0020               	movlb	0	; select bank0
  3663  03C0  01A0               	clrf	nrf24l01Send@data
  3664  03C1  301C               	movlw	28
  3665  03C2  3188  20DE  3183   	fcall	_nrf24l01Send
  3666  03C5  0020               	movlb	0	; select bank0
  3667  03C6  00A7               	movwf	??_nrf24l01InitRegisters
  3668  03C7  0827               	movf	??_nrf24l01InitRegisters,w
  3669  03C8  00AF               	movwf	nrf24l01InitRegisters@DynPD
  3670                           
  3671                           ;nrf24l01.c: 392: DynPD.DPL_P0 = 1;
  3672  03C9  142F               	bsf	nrf24l01InitRegisters@DynPD,0
  3673                           
  3674                           ;nrf24l01.c: 393: DynPD.DPL_P1 = 1;
  3675  03CA  14AF               	bsf	nrf24l01InitRegisters@DynPD,1
  3676                           
  3677                           ;nrf24l01.c: 394: DynPD.DPL_P2 = 1;
  3678  03CB  152F               	bsf	nrf24l01InitRegisters@DynPD,2
  3679                           
  3680                           ;nrf24l01.c: 395: DynPD.DPL_P3 = 1;
  3681  03CC  15AF               	bsf	nrf24l01InitRegisters@DynPD,3
  3682                           
  3683                           ;nrf24l01.c: 396: DynPD.DPL_P4 = 1;
  3684  03CD  162F               	bsf	nrf24l01InitRegisters@DynPD,4
  3685                           
  3686                           ;nrf24l01.c: 397: DynPD.DPL_P5 = 1;
  3687  03CE  16AF               	bsf	nrf24l01InitRegisters@DynPD,5
  3688                           
  3689                           ;nrf24l01.c: 398: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3690  03CF  082F               	movf	nrf24l01InitRegisters@DynPD,w
  3691  03D0  00A7               	movwf	??_nrf24l01InitRegisters
  3692  03D1  0827               	movf	??_nrf24l01InitRegisters,w
  3693  03D2  00A0               	movwf	nrf24l01Send@data
  3694  03D3  303C               	movlw	60
  3695  03D4  3188  20DE  3183   	fcall	_nrf24l01Send
  3696                           
  3697                           ;nrf24l01.c: 401: unsigned int i;;nrf24l01.c: 402: for (i = 0; i < 6; i++){
  3698  03D7  0020               	movlb	0	; select bank0
  3699  03D8  01B1               	clrf	nrf24l01InitRegisters@i
  3700  03D9  01B2               	clrf	nrf24l01InitRegisters@i+1
  3701  03DA  3000               	movlw	0
  3702  03DB  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3703  03DC  3006               	movlw	6
  3704  03DD  1903               	skipnz
  3705  03DE  0231               	subwf	nrf24l01InitRegisters@i,w
  3706  03DF  1803               	btfsc	3,0
  3707  03E0  2C3A               	goto	l3157
  3708  03E1                     l3143:	
  3709                           
  3710                           ;nrf24l01.c: 404: nrf24l01SPIStart();
  3711  03E1  3197  2761  3183   	fcall	_nrf24l01SPIStart
  3712                           
  3713                           ;nrf24l01.c: 405: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  3714  03E4  0020               	movlb	0	; select bank0
  3715  03E5  0831               	movf	nrf24l01InitRegisters@i,w
  3716  03E6  3E0A               	addlw	10
  3717  03E7  3820               	iorlw	32
  3718  03E8  3197  2772  3183   	fcall	_nrf24l01SPISend
  3719                           
  3720                           ;nrf24l01.c: 407: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  3721  03EB  301D               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3722  03EC  0084               	movwf	4
  3723  03ED  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3724  03EE  0085               	movwf	5
  3725  03EF  0800               	movf	0,w	;code access
  3726  03F0  0020               	movlb	0	; select bank0
  3727  03F1  00A7               	movwf	??_nrf24l01InitRegisters
  3728  03F2  0831               	movf	nrf24l01InitRegisters@i,w
  3729  03F3  00A8               	movwf	??_nrf24l01InitRegisters+1
  3730  03F4  0828               	movf	??_nrf24l01InitRegisters+1,w
  3731  03F5  00A0               	movwf	___bmul@multiplicand
  3732  03F6  3000               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3733  03F7  0084               	movwf	4
  3734  03F8  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3735  03F9  0085               	movwf	5
  3736  03FA  0800               	movf	0,w	;code access
  3737  03FB  3197  278E  3183   	fcall	___bmul
  3738  03FE  0020               	movlb	0	; select bank0
  3739  03FF  0727               	addwf	??_nrf24l01InitRegisters,w
  3740  0400  3197  2772  3183   	fcall	_nrf24l01SPISend
  3741                           
  3742                           ;nrf24l01.c: 409: if (i < 2){
  3743  0403  3000               	movlw	0
  3744  0404  0020               	movlb	0	; select bank0
  3745  0405  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3746  0406  3002               	movlw	2
  3747  0407  1903               	skipnz
  3748  0408  0231               	subwf	nrf24l01InitRegisters@i,w
  3749  0409  1803               	skipnc
  3750  040A  2C2B               	goto	l3151
  3751                           
  3752                           ;nrf24l01.c: 410: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3753  040B  301C               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3754  040C  0084               	movwf	4
  3755  040D  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3756  040E  0085               	movwf	5
  3757  040F  0800               	movf	0,w	;code access
  3758  0410  3197  2772  3183   	fcall	_nrf24l01SPISend
  3759                           
  3760                           ;nrf24l01.c: 411: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3761  0413  301B               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3762  0414  0084               	movwf	4
  3763  0415  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3764  0416  0085               	movwf	5
  3765  0417  0800               	movf	0,w	;code access
  3766  0418  3197  2772  3183   	fcall	_nrf24l01SPISend
  3767                           
  3768                           ;nrf24l01.c: 412: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3769  041B  301A               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3770  041C  0084               	movwf	4
  3771  041D  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3772  041E  0085               	movwf	5
  3773  041F  0800               	movf	0,w	;code access
  3774  0420  3197  2772  3183   	fcall	_nrf24l01SPISend
  3775                           
  3776                           ;nrf24l01.c: 413: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3777  0423  3019               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3778  0424  0084               	movwf	4
  3779  0425  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3780  0426  0085               	movwf	5
  3781  0427  0800               	movf	0,w	;code access
  3782  0428  3197  2772  3183   	fcall	_nrf24l01SPISend
  3783  042B                     l3151:	
  3784                           
  3785                           ;nrf24l01.c: 414: };nrf24l01.c: 416: nrf24l01SPIEnd();
  3786  042B  3197  2752  3183   	fcall	_nrf24l01SPIEnd
  3787  042E  3001               	movlw	1
  3788  042F  0020               	movlb	0	; select bank0
  3789  0430  07B1               	addwf	nrf24l01InitRegisters@i,f
  3790  0431  3000               	movlw	0
  3791  0432  3DB2               	addwfc	nrf24l01InitRegisters@i+1,f
  3792  0433  3000               	movlw	0
  3793  0434  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3794  0435  3006               	movlw	6
  3795  0436  1903               	skipnz
  3796  0437  0231               	subwf	nrf24l01InitRegisters@i,w
  3797  0438  1C03               	skipc
  3798  0439  2BE1               	goto	l3143
  3799  043A                     l3157:	
  3800                           
  3801                           ;nrf24l01.c: 417: };nrf24l01.c: 419: nrf24l01SetTXPipe(0);
  3802  043A  3000               	movlw	0
  3803  043B  318B  2375  3183   	fcall	_nrf24l01SetTXPipe
  3804                           
  3805                           ;nrf24l01.c: 423: n_STATUS_t status;;nrf24l01.c: 424: status.byte = 0x00;
  3806  043E  0020               	movlb	0	; select bank0
  3807  043F  01AD               	clrf	nrf24l01InitRegisters@status
  3808                           
  3809                           ;nrf24l01.c: 425: status.RX_DR = 1;
  3810  0440  172D               	bsf	nrf24l01InitRegisters@status,6
  3811                           
  3812                           ;nrf24l01.c: 426: status.TX_DS = 1;
  3813  0441  16AD               	bsf	nrf24l01InitRegisters@status,5
  3814                           
  3815                           ;nrf24l01.c: 427: status.MAX_RT = 1;
  3816  0442  162D               	bsf	nrf24l01InitRegisters@status,4
  3817                           
  3818                           ;nrf24l01.c: 428: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.byte);
  3819  0443  082D               	movf	nrf24l01InitRegisters@status,w
  3820  0444  00A7               	movwf	??_nrf24l01InitRegisters
  3821  0445  0827               	movf	??_nrf24l01InitRegisters,w
  3822  0446  00A0               	movwf	nrf24l01Send@data
  3823  0447  3027               	movlw	39
  3824  0448  3188  20DE  3183   	fcall	_nrf24l01Send
  3825                           
  3826                           ;nrf24l01.c: 431: nrf24l01Send((unsigned) 0b11100001, 0);
  3827  044B  0020               	movlb	0	; select bank0
  3828  044C  01A0               	clrf	nrf24l01Send@data
  3829  044D  30E1               	movlw	225
  3830  044E  3188  20DE  3183   	fcall	_nrf24l01Send
  3831                           
  3832                           ;nrf24l01.c: 432: nrf24l01Send((unsigned) 0b11100010, 0);
  3833  0451  0020               	movlb	0	; select bank0
  3834  0452  01A0               	clrf	nrf24l01Send@data
  3835  0453  30E2               	movlw	226
  3836  0454  3188  20DE  3183   	fcall	_nrf24l01Send
  3837                           
  3838                           ;nrf24l01.c: 435: config.PRIM_RX = 1;
  3839  0457  0020               	movlb	0	; select bank0
  3840  0458  1430               	bsf	nrf24l01InitRegisters@config,0
  3841                           
  3842                           ;nrf24l01.c: 436: config.EN_CRC = 1;
  3843  0459  15B0               	bsf	nrf24l01InitRegisters@config,3
  3844                           
  3845                           ;nrf24l01.c: 437: config.CRCO = 1;
  3846  045A  1530               	bsf	nrf24l01InitRegisters@config,2
  3847                           
  3848                           ;nrf24l01.c: 438: config.PWR_UP = 1;
  3849  045B  14B0               	bsf	nrf24l01InitRegisters@config,1
  3850                           
  3851                           ;nrf24l01.c: 439: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3852  045C  0830               	movf	nrf24l01InitRegisters@config,w
  3853  045D  00A7               	movwf	??_nrf24l01InitRegisters
  3854  045E  0827               	movf	??_nrf24l01InitRegisters,w
  3855  045F  00A0               	movwf	nrf24l01Send@data
  3856  0460  3020               	movlw	32
  3857  0461  3188  20DE         	fcall	_nrf24l01Send
  3858  0463  0008               	return
  3859  0464                     __end_of_nrf24l01InitRegisters:	
  3860                           
  3861                           	psect	text5
  3862  0B75                     __ptext5:	
  3863 ;; *************** function _nrf24l01SetTXPipe *****************
  3864 ;; Defined at:
  3865 ;;		line 309 in file "nrf24l01.c"
  3866 ;; Parameters:    Size  Location     Type
  3867 ;;  pipe            1    wreg     unsigned char 
  3868 ;; Auto vars:     Size  Location     Type
  3869 ;;  pipe            1    6[BANK0 ] unsigned char 
  3870 ;; Return value:  Size  Location     Type
  3871 ;;                  1    wreg      void 
  3872 ;; Registers used:
  3873 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3874 ;; Tracked objects:
  3875 ;;		On entry : 0/0
  3876 ;;		On exit  : 0/0
  3877 ;;		Unchanged: 0/0
  3878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3880 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3881 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3882 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3883 ;;Total ram usage:        3 bytes
  3884 ;; Hardware stack levels used:    1
  3885 ;; Hardware stack levels required when called:    9
  3886 ;; This function calls:
  3887 ;;		___bmul
  3888 ;;		_nrf24l01SPIEnd
  3889 ;;		_nrf24l01SPISend
  3890 ;;		_nrf24l01SPIStart
  3891 ;; This function is called by:
  3892 ;;		_main
  3893 ;;		_nrf24l01InitRegisters
  3894 ;;		_nrf24l01SendACK
  3895 ;; This function uses a non-reentrant model
  3896 ;;
  3897                           
  3898                           
  3899                           ;psect for function _nrf24l01SetTXPipe
  3900  0B75                     _nrf24l01SetTXPipe:	
  3901                           
  3902                           ;incstack = 0
  3903                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3904                           ;nrf24l01SetTXPipe@pipe stored from wreg
  3905  0B75  0020               	movlb	0	; select bank0
  3906  0B76  00A6               	movwf	nrf24l01SetTXPipe@pipe
  3907                           
  3908                           ;nrf24l01.c: 312: nrf24l01SPIStart();
  3909  0B77  3197  2761  318B   	fcall	_nrf24l01SPIStart
  3910                           
  3911                           ;nrf24l01.c: 313: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  3912  0B7A  3030               	movlw	48
  3913  0B7B  3197  2772  318B   	fcall	_nrf24l01SPISend
  3914                           
  3915                           ;nrf24l01.c: 314: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  3916  0B7E  301D               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3917  0B7F  0084               	movwf	4
  3918  0B80  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3919  0B81  0085               	movwf	5
  3920  0B82  0800               	movf	0,w	;code access
  3921  0B83  0020               	movlb	0	; select bank0
  3922  0B84  00A4               	movwf	??_nrf24l01SetTXPipe
  3923  0B85  3000               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3924  0B86  0084               	movwf	4
  3925  0B87  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3926  0B88  0085               	movwf	5
  3927  0B89  0800               	movf	0,w	;code access
  3928  0B8A  00A5               	movwf	??_nrf24l01SetTXPipe+1
  3929  0B8B  0825               	movf	??_nrf24l01SetTXPipe+1,w
  3930  0B8C  00A0               	movwf	___bmul@multiplicand
  3931  0B8D  0826               	movf	nrf24l01SetTXPipe@pipe,w
  3932  0B8E  3197  278E  318B   	fcall	___bmul
  3933  0B91  0020               	movlb	0	; select bank0
  3934  0B92  0724               	addwf	??_nrf24l01SetTXPipe,w
  3935  0B93  3197  2772  318B   	fcall	_nrf24l01SPISend
  3936                           
  3937                           ;nrf24l01.c: 315: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3938  0B96  301C               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3939  0B97  0084               	movwf	4
  3940  0B98  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3941  0B99  0085               	movwf	5
  3942  0B9A  0800               	movf	0,w	;code access
  3943  0B9B  3197  2772  318B   	fcall	_nrf24l01SPISend
  3944                           
  3945                           ;nrf24l01.c: 316: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3946  0B9E  301B               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3947  0B9F  0084               	movwf	4
  3948  0BA0  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3949  0BA1  0085               	movwf	5
  3950  0BA2  0800               	movf	0,w	;code access
  3951  0BA3  3197  2772  318B   	fcall	_nrf24l01SPISend
  3952                           
  3953                           ;nrf24l01.c: 317: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3954  0BA6  301A               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3955  0BA7  0084               	movwf	4
  3956  0BA8  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3957  0BA9  0085               	movwf	5
  3958  0BAA  0800               	movf	0,w	;code access
  3959  0BAB  3197  2772  318B   	fcall	_nrf24l01SPISend
  3960                           
  3961                           ;nrf24l01.c: 318: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3962  0BAE  3019               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3963  0BAF  0084               	movwf	4
  3964  0BB0  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3965  0BB1  0085               	movwf	5
  3966  0BB2  0800               	movf	0,w	;code access
  3967  0BB3  3197  2772  318B   	fcall	_nrf24l01SPISend
  3968                           
  3969                           ;nrf24l01.c: 319: nrf24l01SPIEnd();
  3970  0BB6  3197  2752         	fcall	_nrf24l01SPIEnd
  3971  0BB8  0008               	return
  3972  0BB9                     __end_of_nrf24l01SetTXPipe:	
  3973                           
  3974                           	psect	text6
  3975  178E                     __ptext6:	
  3976 ;; *************** function ___bmul *****************
  3977 ;; Defined at:
  3978 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  3979 ;; Parameters:    Size  Location     Type
  3980 ;;  multiplier      1    wreg     unsigned char 
  3981 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3984 ;;  product         1    2[BANK0 ] unsigned char 
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  1    wreg      unsigned char 
  3987 ;; Registers used:
  3988 ;;		wreg, status,2, status,0
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3994 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3995 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3996 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3997 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3998 ;;Total ram usage:        4 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; Hardware stack levels required when called:    7
  4001 ;; This function calls:
  4002 ;;		Nothing
  4003 ;; This function is called by:
  4004 ;;		_nrf24l01SetTXPipe
  4005 ;;		_nrf24l01InitRegisters
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           
  4010                           ;psect for function ___bmul
  4011  178E                     ___bmul:	
  4012                           
  4013                           ;incstack = 0
  4014                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4015                           ;___bmul@multiplier stored from wreg
  4016  178E  0020               	movlb	0	; select bank0
  4017  178F  00A3               	movwf	___bmul@multiplier
  4018  1790  01A2               	clrf	___bmul@product
  4019  1791                     l2523:	
  4020  1791  1C23               	btfss	___bmul@multiplier,0
  4021  1792  2F97               	goto	l2527
  4022  1793  0820               	movf	___bmul@multiplicand,w
  4023  1794  00A1               	movwf	??___bmul
  4024  1795  0821               	movf	??___bmul,w
  4025  1796  07A2               	addwf	___bmul@product,f
  4026  1797                     l2527:	
  4027  1797  1003               	clrc
  4028  1798  0DA0               	rlf	___bmul@multiplicand,f
  4029  1799  1003               	clrc
  4030  179A  0CA3               	rrf	___bmul@multiplier,f
  4031  179B  0823               	movf	___bmul@multiplier,w
  4032  179C  1D03               	btfss	3,2
  4033  179D  2F91               	goto	l2523
  4034  179E  0822               	movf	___bmul@product,w
  4035  179F  0008               	return
  4036  17A0                     __end_of___bmul:	
  4037                           
  4038                           	psect	text7
  4039  08FE                     __ptext7:	
  4040 ;; *************** function _nrf24l01SetRXPipe *****************
  4041 ;; Defined at:
  4042 ;;		line 322 in file "nrf24l01.c"
  4043 ;; Parameters:    Size  Location     Type
  4044 ;;  pipe            1    wreg     unsigned char 
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;  pipe            1    5[BANK0 ] unsigned char 
  4047 ;;  enRXAddr        1    6[BANK0 ] struct .
  4048 ;; Return value:  Size  Location     Type
  4049 ;;                  1    wreg      void 
  4050 ;; Registers used:
  4051 ;;		wreg, status,2, status,0, pclath, cstack
  4052 ;; Tracked objects:
  4053 ;;		On entry : 0/0
  4054 ;;		On exit  : 0/0
  4055 ;;		Unchanged: 0/0
  4056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4058 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4059 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4060 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4061 ;;Total ram usage:        4 bytes
  4062 ;; Hardware stack levels used:    1
  4063 ;; Hardware stack levels required when called:   10
  4064 ;; This function calls:
  4065 ;;		_nrf24l01Send
  4066 ;; This function is called by:
  4067 ;;		_main
  4068 ;;		_nrf24l01InitRegisters
  4069 ;; This function uses a non-reentrant model
  4070 ;;
  4071                           
  4072                           
  4073                           ;psect for function _nrf24l01SetRXPipe
  4074  08FE                     _nrf24l01SetRXPipe:	
  4075                           
  4076                           ;incstack = 0
  4077                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  4078                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4079  08FE  0020               	movlb	0	; select bank0
  4080  08FF  00A5               	movwf	nrf24l01SetRXPipe@pipe
  4081                           
  4082                           ;nrf24l01.c: 324: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 326: if (pipe > 5){
  4083  0900  3006               	movlw	6
  4084  0901  0225               	subwf	nrf24l01SetRXPipe@pipe,w
  4085  0902  1C03               	skipc
  4086  0903  290B               	goto	l324
  4087                           
  4088                           ;nrf24l01.c: 327: enRXAddr.ERX_P0 = 1;
  4089  0904  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4090                           
  4091                           ;nrf24l01.c: 328: enRXAddr.ERX_P1 = 1;
  4092  0905  14A6               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4093                           
  4094                           ;nrf24l01.c: 329: enRXAddr.ERX_P2 = 1;
  4095  0906  1526               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4096                           
  4097                           ;nrf24l01.c: 330: enRXAddr.ERX_P3 = 1;
  4098  0907  15A6               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4099                           
  4100                           ;nrf24l01.c: 331: enRXAddr.ERX_P4 = 1;
  4101  0908  1626               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4102                           
  4103                           ;nrf24l01.c: 332: enRXAddr.ERX_P5 = 1;
  4104  0909  16A6               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4105                           
  4106                           ;nrf24l01.c: 333: }
  4107  090A  2917               	goto	l2811
  4108  090B                     l324:	
  4109                           
  4110                           ;nrf24l01.c: 335: else{;nrf24l01.c: 336: enRXAddr.ERX_P0 = 1;
  4111  090B  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4112                           
  4113                           ;nrf24l01.c: 337: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4114  090C  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4115  090D  00A3               	movwf	??_nrf24l01SetRXPipe
  4116  090E  0A25               	incf	nrf24l01SetRXPipe@pipe,w
  4117  090F  2911               	goto	u2864
  4118  0910                     u2865:	
  4119  0910  35A3               	lslf	??_nrf24l01SetRXPipe,f
  4120  0911                     u2864:	
  4121  0911  0B89               	decfsz	9,f
  4122  0912  2910               	goto	u2865
  4123  0913  0823               	movf	??_nrf24l01SetRXPipe,w
  4124  0914  00A4               	movwf	??_nrf24l01SetRXPipe+1
  4125  0915  0824               	movf	??_nrf24l01SetRXPipe+1,w
  4126  0916  00A6               	movwf	nrf24l01SetRXPipe@enRXAddr
  4127  0917                     l2811:	
  4128                           
  4129                           ;nrf24l01.c: 338: };nrf24l01.c: 340: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4130  0917  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4131  0918  00A3               	movwf	??_nrf24l01SetRXPipe
  4132  0919  0823               	movf	??_nrf24l01SetRXPipe,w
  4133  091A  00A0               	movwf	nrf24l01Send@data
  4134  091B  3022               	movlw	34
  4135  091C  3188  20DE         	fcall	_nrf24l01Send
  4136  091E  0008               	return
  4137  091F                     __end_of_nrf24l01SetRXPipe:	
  4138                           
  4139                           	psect	text8
  4140  07C8                     __ptext8:	
  4141 ;; *************** function _nrf24l01GetPipe *****************
  4142 ;; Defined at:
  4143 ;;		line 177 in file "main.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;  name            1    wreg     PTR unsigned char 
  4146 ;;		 -> romDataMap(28), 
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4149 ;;		 -> romDataMap(28), 
  4150 ;;  i               1   10[BANK0 ] unsigned char 
  4151 ;;  pipe            1    8[BANK0 ] unsigned char 
  4152 ;; Return value:  Size  Location     Type
  4153 ;;                  1    wreg      unsigned char 
  4154 ;; Registers used:
  4155 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4156 ;; Tracked objects:
  4157 ;;		On entry : 0/0
  4158 ;;		On exit  : 0/0
  4159 ;;		Unchanged: 0/0
  4160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4162 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4163 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4164 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4165 ;;Total ram usage:        5 bytes
  4166 ;; Hardware stack levels used:    1
  4167 ;; Hardware stack levels required when called:    8
  4168 ;; This function calls:
  4169 ;;		___lwmod
  4170 ;;		_strlen
  4171 ;; This function is called by:
  4172 ;;		_main
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           
  4177                           ;psect for function _nrf24l01GetPipe
  4178  07C8                     _nrf24l01GetPipe:	
  4179                           
  4180                           ;incstack = 0
  4181                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4182                           ;nrf24l01GetPipe@name stored from wreg
  4183  07C8  0020               	movlb	0	; select bank0
  4184  07C9  00A9               	movwf	nrf24l01GetPipe@name
  4185                           
  4186                           ;main.c: 178: unsigned char pipe = 0;
  4187  07CA  01A8               	clrf	nrf24l01GetPipe@pipe
  4188                           
  4189                           ;main.c: 179: unsigned char i = 0;
  4190  07CB  01AA               	clrf	nrf24l01GetPipe@i
  4191                           
  4192                           ;main.c: 182: for (i = 0; i < strlen(name); i++){
  4193  07CC  01AA               	clrf	nrf24l01GetPipe@i
  4194  07CD                     l3305:	
  4195  07CD  0829               	movf	nrf24l01GetPipe@name,w
  4196  07CE  00A0               	movwf	strlen@s
  4197  07CF  3001               	movlw	1
  4198  07D0  00A1               	movwf	strlen@s+1
  4199  07D1  3188  20BF  3187   	fcall	_strlen
  4200  07D4  0020               	movlb	0	; select bank0
  4201  07D5  082A               	movf	nrf24l01GetPipe@i,w
  4202  07D6  00A6               	movwf	??_nrf24l01GetPipe
  4203  07D7  01A7               	clrf	??_nrf24l01GetPipe+1
  4204  07D8  0821               	movf	?_strlen+1,w
  4205  07D9  0227               	subwf	??_nrf24l01GetPipe+1,w
  4206  07DA  1D03               	skipz
  4207  07DB  2FDE               	goto	u3325
  4208  07DC  0820               	movf	?_strlen,w
  4209  07DD  0226               	subwf	??_nrf24l01GetPipe,w
  4210  07DE                     u3325:	
  4211  07DE  1803               	btfsc	3,0
  4212  07DF  2FF0               	goto	l3307
  4213                           
  4214                           ;main.c: 183: pipe+= name[i];
  4215  07E0  082A               	movf	nrf24l01GetPipe@i,w
  4216  07E1  0729               	addwf	nrf24l01GetPipe@name,w
  4217  07E2  00A6               	movwf	??_nrf24l01GetPipe
  4218  07E3  0826               	movf	??_nrf24l01GetPipe,w
  4219  07E4  0086               	movwf	6
  4220  07E5  3001               	movlw	1	; select bank2/3
  4221  07E6  0087               	movwf	7
  4222  07E7  0801               	movf	1,w
  4223  07E8  00A7               	movwf	??_nrf24l01GetPipe+1
  4224  07E9  0827               	movf	??_nrf24l01GetPipe+1,w
  4225  07EA  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4226  07EB  3001               	movlw	1
  4227  07EC  00A6               	movwf	??_nrf24l01GetPipe
  4228  07ED  0826               	movf	??_nrf24l01GetPipe,w
  4229  07EE  07AA               	addwf	nrf24l01GetPipe@i,f
  4230  07EF  2FCD               	goto	l3305
  4231  07F0                     l3307:	
  4232                           
  4233                           ;main.c: 184: };main.c: 186: return (unsigned) pipe % 6;
  4234  07F0  3006               	movlw	6
  4235  07F1  00A0               	movwf	___lwmod@divisor
  4236  07F2  3000               	movlw	0
  4237  07F3  00A1               	movwf	___lwmod@divisor+1
  4238  07F4  0828               	movf	nrf24l01GetPipe@pipe,w
  4239  07F5  00A6               	movwf	??_nrf24l01GetPipe
  4240  07F6  01A7               	clrf	??_nrf24l01GetPipe+1
  4241  07F7  0826               	movf	??_nrf24l01GetPipe,w
  4242  07F8  00A2               	movwf	___lwmod@dividend
  4243  07F9  0827               	movf	??_nrf24l01GetPipe+1,w
  4244  07FA  00A3               	movwf	___lwmod@dividend+1
  4245  07FB  318A  2207         	fcall	___lwmod
  4246  07FD  0020               	movlb	0	; select bank0
  4247  07FE  0820               	movf	?___lwmod,w
  4248  07FF  0008               	return
  4249  0800                     __end_of_nrf24l01GetPipe:	
  4250                           
  4251                           	psect	text9
  4252  0A07                     __ptext9:	
  4253 ;; *************** function ___lwmod *****************
  4254 ;; Defined at:
  4255 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;  divisor         2    0[BANK0 ] unsigned int 
  4258 ;;  dividend        2    2[BANK0 ] unsigned int 
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;  counter         1    5[BANK0 ] unsigned char 
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  2    0[BANK0 ] unsigned int 
  4263 ;; Registers used:
  4264 ;;		wreg, status,2, status,0
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4270 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4271 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4272 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4273 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4274 ;;Total ram usage:        6 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    7
  4277 ;; This function calls:
  4278 ;;		Nothing
  4279 ;; This function is called by:
  4280 ;;		_nrf24l01GetPipe
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           
  4285                           ;psect for function ___lwmod
  4286  0A07                     ___lwmod:	
  4287                           
  4288                           ;incstack = 0
  4289                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4290  0A07  0020               	movlb	0	; select bank0
  4291  0A08  0820               	movf	___lwmod@divisor,w
  4292  0A09  0421               	iorwf	___lwmod@divisor+1,w
  4293  0A0A  1903               	btfsc	3,2
  4294  0A0B  2A2F               	goto	l3205
  4295  0A0C  01A5               	clrf	___lwmod@counter
  4296  0A0D  0AA5               	incf	___lwmod@counter,f
  4297  0A0E                     l3195:	
  4298  0A0E  1BA1               	btfsc	___lwmod@divisor+1,7
  4299  0A0F  2A1A               	goto	l3197
  4300  0A10  3001               	movlw	1
  4301  0A11                     u3215:	
  4302  0A11  35A0               	lslf	___lwmod@divisor,f
  4303  0A12  0DA1               	rlf	___lwmod@divisor+1,f
  4304  0A13  0B89               	decfsz	9,f
  4305  0A14  2A11               	goto	u3215
  4306  0A15  3001               	movlw	1
  4307  0A16  00A4               	movwf	??___lwmod
  4308  0A17  0824               	movf	??___lwmod,w
  4309  0A18  07A5               	addwf	___lwmod@counter,f
  4310  0A19  2A0E               	goto	l3195
  4311  0A1A                     l3197:	
  4312  0A1A  0821               	movf	___lwmod@divisor+1,w
  4313  0A1B  0223               	subwf	___lwmod@dividend+1,w
  4314  0A1C  1D03               	skipz
  4315  0A1D  2A20               	goto	u3235
  4316  0A1E  0820               	movf	___lwmod@divisor,w
  4317  0A1F  0222               	subwf	___lwmod@dividend,w
  4318  0A20                     u3235:	
  4319  0A20  1C03               	skipc
  4320  0A21  2A26               	goto	l3201
  4321  0A22  0820               	movf	___lwmod@divisor,w
  4322  0A23  02A2               	subwf	___lwmod@dividend,f
  4323  0A24  0821               	movf	___lwmod@divisor+1,w
  4324  0A25  3BA3               	subwfb	___lwmod@dividend+1,f
  4325  0A26                     l3201:	
  4326  0A26  3001               	movlw	1
  4327  0A27                     u3245:	
  4328  0A27  36A1               	lsrf	___lwmod@divisor+1,f
  4329  0A28  0CA0               	rrf	___lwmod@divisor,f
  4330  0A29  0B89               	decfsz	9,f
  4331  0A2A  2A27               	goto	u3245
  4332  0A2B  3001               	movlw	1
  4333  0A2C  02A5               	subwf	___lwmod@counter,f
  4334  0A2D  1D03               	btfss	3,2
  4335  0A2E  2A1A               	goto	l3197
  4336  0A2F                     l3205:	
  4337  0A2F  0823               	movf	___lwmod@dividend+1,w
  4338  0A30  00A1               	movwf	?___lwmod+1
  4339  0A31  0822               	movf	___lwmod@dividend,w
  4340  0A32  00A0               	movwf	?___lwmod
  4341  0A33  0008               	return
  4342  0A34                     __end_of___lwmod:	
  4343                           
  4344                           	psect	text10
  4345  01FF                     __ptext10:	
  4346 ;; *************** function _loop *****************
  4347 ;; Defined at:
  4348 ;;		line 116 in file "main.c"
  4349 ;; Parameters:    Size  Location     Type
  4350 ;;		None
  4351 ;; Auto vars:     Size  Location     Type
  4352 ;;  packet         33   13[BANK2 ] struct .
  4353 ;;  ta              3    3[BANK2 ] float 
  4354 ;;  vt              3    0[BANK2 ] float 
  4355 ;;  rfSetup         1   12[BANK2 ] struct .
  4356 ;; Return value:  Size  Location     Type
  4357 ;;                  1    wreg      void 
  4358 ;; Registers used:
  4359 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4360 ;; Tracked objects:
  4361 ;;		On entry : 0/0
  4362 ;;		On exit  : 0/0
  4363 ;;		Unchanged: 0/0
  4364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4366 ;;      Locals:         0       0       0      46       0       0       0       0       0       0       0       0       
      +0       0
  4367 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4368 ;;      Totals:         0       0       1      46       0       0       0       0       0       0       0       0       
      +0       0
  4369 ;;Total ram usage:       47 bytes
  4370 ;; Hardware stack levels used:    1
  4371 ;; Hardware stack levels required when called:   12
  4372 ;; This function calls:
  4373 ;;		___ftadd
  4374 ;;		___ftdiv
  4375 ;;		___ftmul
  4376 ;;		___ftneg
  4377 ;;		___lbtoft
  4378 ;;		_checkTXPower
  4379 ;;		_getADCValue
  4380 ;;		_nrf24l01Send
  4381 ;;		_nrf24l01SendPacket
  4382 ;;		_setMessage
  4383 ;;		_sleep
  4384 ;; This function is called by:
  4385 ;;		_main
  4386 ;; This function uses a non-reentrant model
  4387 ;;
  4388                           
  4389                           
  4390                           ;psect for function _loop
  4391  01FF                     _loop:	
  4392                           
  4393                           ;main.c: 118: nrf24l01Packet_t packet;;main.c: 131: setMessage(&packet, "VBAT", getADCVa
      +                          lue(0b000100) * 3.106382978723404);
  4394                           
  4395                           ;incstack = 0
  4396                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4397  01FF  30CF               	movlw	207
  4398  0200  0020               	movlb	0	; select bank0
  4399  0201  00D7               	movwf	___ftmul@f1
  4400  0202  3046               	movlw	70
  4401  0203  00D8               	movwf	___ftmul@f1+1
  4402  0204  3040               	movlw	64
  4403  0205  00D9               	movwf	___ftmul@f1+2
  4404  0206  3004               	movlw	4
  4405  0207  318E  26B2  3181   	fcall	_getADCValue
  4406  020A  0020               	movlb	0	; select bank0
  4407  020B  084B               	movf	?_getADCValue,w
  4408  020C  00DA               	movwf	___ftmul@f2
  4409  020D  084C               	movf	?_getADCValue+1,w
  4410  020E  00DB               	movwf	___ftmul@f2+1
  4411  020F  084D               	movf	?_getADCValue+2,w
  4412  0210  00DC               	movwf	___ftmul@f2+2
  4413  0211  3187  2714  3181   	fcall	___ftmul
  4414  0214  0020               	movlb	0	; select bank0
  4415  0215  0857               	movf	?___ftmul,w
  4416  0216  0022               	movlb	2	; select bank2
  4417  0217  00A6               	movwf	_loop$2049^(0+256)
  4418  0218  0020               	movlb	0	; select bank0
  4419  0219  0858               	movf	?___ftmul+1,w
  4420  021A  0022               	movlb	2	; select bank2
  4421  021B  00A7               	movwf	(_loop$2049+1)^(0+256)
  4422  021C  0020               	movlb	0	; select bank0
  4423  021D  0859               	movf	?___ftmul+2,w
  4424  021E  0022               	movlb	2	; select bank2
  4425  021F  00A8               	movwf	(_loop$2049+2)^(0+256)
  4426                           
  4427                           ;main.c: 118: nrf24l01Packet_t packet;;main.c: 131: setMessage(&packet, "VBAT", getADCVa
      +                          lue(0b000100) * 3.106382978723404);
  4428  0220  302D               	movlw	low loop@packet
  4429  0221  0021               	movlb	1	; select bank1
  4430  0222  00B9               	movwf	setMessage@packet^(0+128)
  4431  0223  3001               	movlw	high loop@packet
  4432  0224  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4433  0225  3023               	movlw	low (STR_3| (0+32768))
  4434  0226  00BB               	movwf	setMessage@topic^(0+128)
  4435  0227  3098               	movlw	high (STR_3| (0+32768))
  4436  0228  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4437  0229  0022               	movlb	2	; select bank2
  4438  022A  0826               	movf	_loop$2049^(0+256),w
  4439  022B  0021               	movlb	1	; select bank1
  4440  022C  00BD               	movwf	setMessage@value^(0+128)
  4441  022D  0022               	movlb	2	; select bank2
  4442  022E  0827               	movf	(_loop$2049+1)^(0+256),w
  4443  022F  0021               	movlb	1	; select bank1
  4444  0230  00BE               	movwf	(setMessage@value+1)^(0+128)
  4445  0231  0022               	movlb	2	; select bank2
  4446  0232  0828               	movf	(_loop$2049+2)^(0+256),w
  4447  0233  0021               	movlb	1	; select bank1
  4448  0234  00BF               	movwf	(setMessage@value+2)^(0+128)
  4449  0235  318D  2507  3181   	fcall	_setMessage
  4450                           
  4451                           ;main.c: 132: packet.packetData.byte = 0;
  4452  0238  0022               	movlb	2	; select bank2
  4453  0239  01AD               	clrf	loop@packet^(0+256)
  4454                           
  4455                           ;main.c: 133: packet.packetData.ACKRequest = 1;
  4456  023A  152D               	bsf	loop@packet^(0+256),2
  4457                           
  4458                           ;main.c: 134: nrf24l01SendPacket(&packet);
  4459  023B  302D               	movlw	low loop@packet
  4460  023C  0020               	movlb	0	; select bank0
  4461  023D  00A7               	movwf	nrf24l01SendPacket@Packet
  4462  023E  3001               	movlw	high loop@packet
  4463  023F  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4464  0240  3186  264C  3181   	fcall	_nrf24l01SendPacket
  4465                           
  4466                           ;main.c: 135: checkTXPower();
  4467  0243  3197  27A0  3181   	fcall	_checkTXPower
  4468                           
  4469                           ;main.c: 136: sleep(10);
  4470  0246  300A               	movlw	10
  4471  0247  3188  2032  3181   	fcall	_sleep
  4472                           
  4473                           ;main.c: 139: setMessage(&packet, "ANC3mV", getADCValue(0b010011));
  4474  024A  302D               	movlw	low loop@packet
  4475  024B  0021               	movlb	1	; select bank1
  4476  024C  00B9               	movwf	setMessage@packet^(0+128)
  4477  024D  3001               	movlw	high loop@packet
  4478  024E  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4479  024F  300C               	movlw	low (STR_4| (0+32768))
  4480  0250  00BB               	movwf	setMessage@topic^(0+128)
  4481  0251  3098               	movlw	high (STR_4| (0+32768))
  4482  0252  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4483  0253  3013               	movlw	19
  4484  0254  318E  26B2  3181   	fcall	_getADCValue
  4485  0257  0020               	movlb	0	; select bank0
  4486  0258  084B               	movf	?_getADCValue,w
  4487  0259  0021               	movlb	1	; select bank1
  4488  025A  00BD               	movwf	setMessage@value^(0+128)
  4489  025B  0020               	movlb	0	; select bank0
  4490  025C  084C               	movf	?_getADCValue+1,w
  4491  025D  0021               	movlb	1	; select bank1
  4492  025E  00BE               	movwf	(setMessage@value+1)^(0+128)
  4493  025F  0020               	movlb	0	; select bank0
  4494  0260  084D               	movf	?_getADCValue+2,w
  4495  0261  0021               	movlb	1	; select bank1
  4496  0262  00BF               	movwf	(setMessage@value+2)^(0+128)
  4497  0263  318D  2507  3181   	fcall	_setMessage
  4498                           
  4499                           ;main.c: 140: packet.packetData.byte = 0;
  4500  0266  0022               	movlb	2	; select bank2
  4501  0267  01AD               	clrf	loop@packet^(0+256)
  4502                           
  4503                           ;main.c: 141: packet.packetData.ACKRequest = 1;
  4504  0268  152D               	bsf	loop@packet^(0+256),2
  4505                           
  4506                           ;main.c: 142: nrf24l01SendPacket(&packet);
  4507  0269  302D               	movlw	low loop@packet
  4508  026A  0020               	movlb	0	; select bank0
  4509  026B  00A7               	movwf	nrf24l01SendPacket@Packet
  4510  026C  3001               	movlw	high loop@packet
  4511  026D  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4512  026E  3186  264C  3181   	fcall	_nrf24l01SendPacket
  4513                           
  4514                           ;main.c: 143: checkTXPower();
  4515  0271  3197  27A0  3181   	fcall	_checkTXPower
  4516                           
  4517                           ;main.c: 144: sleep(10);
  4518  0274  300A               	movlw	10
  4519  0275  3188  2032  3181   	fcall	_sleep
  4520                           
  4521                           ;main.c: 146: FVRCONbits.TSEN = 1;
  4522  0278  0022               	movlb	2	; select bank2
  4523  0279  1697               	bsf	23,5	;volatile
  4524                           
  4525                           ;main.c: 147: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4526  027A  303D               	movlw	61
  4527  027B  318E  26B2  3181   	fcall	_getADCValue
  4528  027E  0020               	movlb	0	; select bank0
  4529  027F  084B               	movf	?_getADCValue,w
  4530  0280  00D7               	movwf	___ftneg@f1
  4531  0281  084C               	movf	?_getADCValue+1,w
  4532  0282  00D8               	movwf	___ftneg@f1+1
  4533  0283  084D               	movf	?_getADCValue+2,w
  4534  0284  00D9               	movwf	___ftneg@f1+2
  4535  0285  3197  2769  3181   	fcall	___ftneg
  4536  0288  0020               	movlb	0	; select bank0
  4537  0289  0857               	movf	?___ftneg,w
  4538  028A  0022               	movlb	2	; select bank2
  4539  028B  00A9               	movwf	_loop$2050^(0+256)
  4540  028C  0020               	movlb	0	; select bank0
  4541  028D  0858               	movf	?___ftneg+1,w
  4542  028E  0022               	movlb	2	; select bank2
  4543  028F  00AA               	movwf	(_loop$2050+1)^(0+256)
  4544  0290  0020               	movlb	0	; select bank0
  4545  0291  0859               	movf	?___ftneg+2,w
  4546  0292  0022               	movlb	2	; select bank2
  4547  0293  00AB               	movwf	(_loop$2050+2)^(0+256)
  4548                           
  4549                           ;main.c: 147: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4550  0294  3000               	movlw	0
  4551  0295  0020               	movlb	0	; select bank0
  4552  0296  00BB               	movwf	___ftdiv@f2
  4553  0297  3000               	movlw	0
  4554  0298  00BC               	movwf	___ftdiv@f2+1
  4555  0299  3040               	movlw	64
  4556  029A  00BD               	movwf	___ftdiv@f2+2
  4557  029B  3012               	movlw	18
  4558  029C  00AE               	movwf	___ftadd@f1
  4559  029D  3003               	movlw	3
  4560  029E  00AF               	movwf	___ftadd@f1+1
  4561  029F  3040               	movlw	64
  4562  02A0  00B0               	movwf	___ftadd@f1+2
  4563  02A1  0022               	movlb	2	; select bank2
  4564  02A2  0829               	movf	_loop$2050^(0+256),w
  4565  02A3  0020               	movlb	0	; select bank0
  4566  02A4  00B1               	movwf	___ftadd@f2
  4567  02A5  0022               	movlb	2	; select bank2
  4568  02A6  082A               	movf	(_loop$2050+1)^(0+256),w
  4569  02A7  0020               	movlb	0	; select bank0
  4570  02A8  00B2               	movwf	___ftadd@f2+1
  4571  02A9  0022               	movlb	2	; select bank2
  4572  02AA  082B               	movf	(_loop$2050+2)^(0+256),w
  4573  02AB  0020               	movlb	0	; select bank0
  4574  02AC  00B3               	movwf	___ftadd@f2+2
  4575  02AD  3184  2464  3181   	fcall	___ftadd
  4576  02B0  0020               	movlb	0	; select bank0
  4577  02B1  082E               	movf	?___ftadd,w
  4578  02B2  00BE               	movwf	___ftdiv@f1
  4579  02B3  082F               	movf	?___ftadd+1,w
  4580  02B4  00BF               	movwf	___ftdiv@f1+1
  4581  02B5  0830               	movf	?___ftadd+2,w
  4582  02B6  00C0               	movwf	___ftdiv@f1+2
  4583  02B7  318F  2757  3181   	fcall	___ftdiv
  4584  02BA  0020               	movlb	0	; select bank0
  4585  02BB  083B               	movf	?___ftdiv,w
  4586  02BC  0022               	movlb	2	; select bank2
  4587  02BD  00A0               	movwf	loop@vt^(0+256)
  4588  02BE  0020               	movlb	0	; select bank0
  4589  02BF  083C               	movf	?___ftdiv+1,w
  4590  02C0  0022               	movlb	2	; select bank2
  4591  02C1  00A1               	movwf	(loop@vt+1)^(0+256)
  4592  02C2  0020               	movlb	0	; select bank0
  4593  02C3  083D               	movf	?___ftdiv+2,w
  4594  02C4  0022               	movlb	2	; select bank2
  4595  02C5  00A2               	movwf	(loop@vt+2)^(0+256)
  4596                           
  4597                           ;main.c: 148: FVRCONbits.TSEN = 0;
  4598  02C6  1297               	bcf	23,5	;volatile
  4599                           
  4600                           ;main.c: 153: float ta = (vt / -0.00132) - (0.6063 / -0.00132) - 27;
  4601  02C7  3029               	movlw	41
  4602  02C8  0020               	movlb	0	; select bank0
  4603  02C9  00AE               	movwf	___ftadd@f1
  4604  02CA  30D8               	movlw	216
  4605  02CB  00AF               	movwf	___ftadd@f1+1
  4606  02CC  3043               	movlw	67
  4607  02CD  00B0               	movwf	___ftadd@f1+2
  4608  02CE  3004               	movlw	4
  4609  02CF  00BB               	movwf	___ftdiv@f2
  4610  02D0  30AD               	movlw	173
  4611  02D1  00BC               	movwf	___ftdiv@f2+1
  4612  02D2  30BA               	movlw	186
  4613  02D3  00BD               	movwf	___ftdiv@f2+2
  4614  02D4  0022               	movlb	2	; select bank2
  4615  02D5  0820               	movf	loop@vt^(0+256),w
  4616  02D6  0020               	movlb	0	; select bank0
  4617  02D7  00BE               	movwf	___ftdiv@f1
  4618  02D8  0022               	movlb	2	; select bank2
  4619  02D9  0821               	movf	(loop@vt+1)^(0+256),w
  4620  02DA  0020               	movlb	0	; select bank0
  4621  02DB  00BF               	movwf	___ftdiv@f1+1
  4622  02DC  0022               	movlb	2	; select bank2
  4623  02DD  0822               	movf	(loop@vt+2)^(0+256),w
  4624  02DE  0020               	movlb	0	; select bank0
  4625  02DF  00C0               	movwf	___ftdiv@f1+2
  4626  02E0  318F  2757  3181   	fcall	___ftdiv
  4627  02E3  0020               	movlb	0	; select bank0
  4628  02E4  083B               	movf	?___ftdiv,w
  4629  02E5  00B1               	movwf	___ftadd@f2
  4630  02E6  083C               	movf	?___ftdiv+1,w
  4631  02E7  00B2               	movwf	___ftadd@f2+1
  4632  02E8  083D               	movf	?___ftdiv+2,w
  4633  02E9  00B3               	movwf	___ftadd@f2+2
  4634  02EA  3184  2464  3181   	fcall	___ftadd
  4635  02ED  0020               	movlb	0	; select bank0
  4636  02EE  082E               	movf	?___ftadd,w
  4637  02EF  0022               	movlb	2	; select bank2
  4638  02F0  00A3               	movwf	loop@ta^(0+256)
  4639  02F1  0020               	movlb	0	; select bank0
  4640  02F2  082F               	movf	?___ftadd+1,w
  4641  02F3  0022               	movlb	2	; select bank2
  4642  02F4  00A4               	movwf	(loop@ta+1)^(0+256)
  4643  02F5  0020               	movlb	0	; select bank0
  4644  02F6  0830               	movf	?___ftadd+2,w
  4645  02F7  0022               	movlb	2	; select bank2
  4646  02F8  00A5               	movwf	(loop@ta+2)^(0+256)
  4647                           
  4648                           ;main.c: 155: setMessage(&packet, "TEMP", ta);
  4649  02F9  302D               	movlw	low loop@packet
  4650  02FA  0021               	movlb	1	; select bank1
  4651  02FB  00B9               	movwf	setMessage@packet^(0+128)
  4652  02FC  3001               	movlw	high loop@packet
  4653  02FD  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4654  02FE  301E               	movlw	low (STR_5| (0+32768))
  4655  02FF  00BB               	movwf	setMessage@topic^(0+128)
  4656  0300  3098               	movlw	high (STR_5| (0+32768))
  4657  0301  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4658  0302  0022               	movlb	2	; select bank2
  4659  0303  0823               	movf	loop@ta^(0+256),w
  4660  0304  0021               	movlb	1	; select bank1
  4661  0305  00BD               	movwf	setMessage@value^(0+128)
  4662  0306  0022               	movlb	2	; select bank2
  4663  0307  0824               	movf	(loop@ta+1)^(0+256),w
  4664  0308  0021               	movlb	1	; select bank1
  4665  0309  00BE               	movwf	(setMessage@value+1)^(0+128)
  4666  030A  0022               	movlb	2	; select bank2
  4667  030B  0825               	movf	(loop@ta+2)^(0+256),w
  4668  030C  0021               	movlb	1	; select bank1
  4669  030D  00BF               	movwf	(setMessage@value+2)^(0+128)
  4670  030E  318D  2507  3181   	fcall	_setMessage
  4671                           
  4672                           ;main.c: 156: packet.packetData.byte = 0;
  4673  0311  0022               	movlb	2	; select bank2
  4674  0312  01AD               	clrf	loop@packet^(0+256)
  4675                           
  4676                           ;main.c: 157: packet.packetData.ACKRequest = 1;
  4677  0313  152D               	bsf	loop@packet^(0+256),2
  4678                           
  4679                           ;main.c: 158: nrf24l01SendPacket(&packet);
  4680  0314  302D               	movlw	low loop@packet
  4681  0315  0020               	movlb	0	; select bank0
  4682  0316  00A7               	movwf	nrf24l01SendPacket@Packet
  4683  0317  3001               	movlw	high loop@packet
  4684  0318  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4685  0319  3186  264C  3181   	fcall	_nrf24l01SendPacket
  4686                           
  4687                           ;main.c: 159: checkTXPower();
  4688  031C  3197  27A0  3181   	fcall	_checkTXPower
  4689                           
  4690                           ;main.c: 160: sleep(10);
  4691  031F  300A               	movlw	10
  4692  0320  3188  2032  3181   	fcall	_sleep
  4693                           
  4694                           ;main.c: 163: n_RF_SETUP_t rfSetup;;main.c: 164: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4695  0323  0020               	movlb	0	; select bank0
  4696  0324  01A0               	clrf	nrf24l01Send@data
  4697  0325  3006               	movlw	6
  4698  0326  3188  20DE  3181   	fcall	_nrf24l01Send
  4699  0329  0021               	movlb	1	; select bank1
  4700  032A  00C3               	movwf	??_loop^(0+128)
  4701  032B  0843               	movf	??_loop^(0+128),w
  4702  032C  0022               	movlb	2	; select bank2
  4703  032D  00AC               	movwf	loop@rfSetup^(0+256)
  4704                           
  4705                           ;main.c: 166: setMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4706  032E  302D               	movlw	low loop@packet
  4707  032F  0021               	movlb	1	; select bank1
  4708  0330  00B9               	movwf	setMessage@packet^(0+128)
  4709  0331  3001               	movlw	high loop@packet
  4710  0332  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4711  0333  3013               	movlw	low (STR_6| (0+32768))
  4712  0334  00BB               	movwf	setMessage@topic^(0+128)
  4713  0335  3098               	movlw	high (STR_6| (0+32768))
  4714  0336  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4715  0337  0022               	movlb	2	; select bank2
  4716  0338  0C2C               	rrf	loop@rfSetup^(0+256),w
  4717  0339  3903               	andlw	3
  4718  033A  3188  2017  3181   	fcall	___lbtoft
  4719  033D  0020               	movlb	0	; select bank0
  4720  033E  0828               	movf	?___lbtoft,w
  4721  033F  0021               	movlb	1	; select bank1
  4722  0340  00BD               	movwf	setMessage@value^(0+128)
  4723  0341  0020               	movlb	0	; select bank0
  4724  0342  0829               	movf	?___lbtoft+1,w
  4725  0343  0021               	movlb	1	; select bank1
  4726  0344  00BE               	movwf	(setMessage@value+1)^(0+128)
  4727  0345  0020               	movlb	0	; select bank0
  4728  0346  082A               	movf	?___lbtoft+2,w
  4729  0347  0021               	movlb	1	; select bank1
  4730  0348  00BF               	movwf	(setMessage@value+2)^(0+128)
  4731  0349  318D  2507  3181   	fcall	_setMessage
  4732                           
  4733                           ;main.c: 167: packet.packetData.byte = 0;
  4734  034C  0022               	movlb	2	; select bank2
  4735  034D  01AD               	clrf	loop@packet^(0+256)
  4736                           
  4737                           ;main.c: 168: packet.packetData.ACKRequest = 1;
  4738  034E  152D               	bsf	loop@packet^(0+256),2
  4739                           
  4740                           ;main.c: 169: nrf24l01SendPacket(&packet);
  4741  034F  302D               	movlw	low loop@packet
  4742  0350  0020               	movlb	0	; select bank0
  4743  0351  00A7               	movwf	nrf24l01SendPacket@Packet
  4744  0352  3001               	movlw	high loop@packet
  4745  0353  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4746  0354  3186  264C  3181   	fcall	_nrf24l01SendPacket
  4747                           
  4748                           ;main.c: 170: checkTXPower();
  4749  0357  3197  27A0  3181   	fcall	_checkTXPower
  4750                           
  4751                           ;main.c: 171: sleep(10);
  4752  035A  300A               	movlw	10
  4753  035B  3188  2032         	fcall	_sleep
  4754  035D  0008               	return
  4755  035E                     __end_of_loop:	
  4756                           
  4757                           	psect	text11
  4758  0D07                     __ptext11:	
  4759 ;; *************** function _setMessage *****************
  4760 ;; Defined at:
  4761 ;;		line 95 in file "main.c"
  4762 ;; Parameters:    Size  Location     Type
  4763 ;;  packet          2   25[BANK1 ] PTR struct .
  4764 ;;		 -> main@packet(33), loop@packet(33), 
  4765 ;;  topic           2   27[BANK1 ] PTR const unsigned char 
  4766 ;;		 -> STR_8(5), STR_6(6), STR_5(5), STR_4(7), 
  4767 ;;		 -> STR_3(5), 
  4768 ;;  value           3   29[BANK1 ] float 
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;  status          2   33[BANK1 ] int 
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  1    wreg      void 
  4773 ;; Registers used:
  4774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4780 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  4781 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4782 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4783 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  4784 ;;Total ram usage:       10 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:   11
  4787 ;; This function calls:
  4788 ;;		_ftoa
  4789 ;;		_memset
  4790 ;;		_strcat
  4791 ;; This function is called by:
  4792 ;;		_loop
  4793 ;;		_main
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797                           
  4798                           ;psect for function _setMessage
  4799  0D07                     _setMessage:	
  4800                           
  4801                           ;main.c: 96: memset(packet->Message, 0, sizeof(packet->Message));
  4802                           
  4803                           ;incstack = 0
  4804                           ; Regs used in _setMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4805  0D07  0021               	movlb	1	; select bank1
  4806  0D08  0839               	movf	setMessage@packet^(0+128),w
  4807  0D09  3E01               	addlw	1
  4808  0D0A  0020               	movlb	0	; select bank0
  4809  0D0B  00A0               	movwf	memset@p1
  4810  0D0C  3000               	movlw	0
  4811  0D0D  0021               	movlb	1	; select bank1
  4812  0D0E  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  4813  0D0F  0020               	movlb	0	; select bank0
  4814  0D10  00A1               	movwf	memset@p1+1
  4815  0D11  3000               	movlw	0
  4816  0D12  00A2               	movwf	memset@c
  4817  0D13  00A3               	movwf	memset@c+1
  4818  0D14  3020               	movlw	32
  4819  0D15  00A4               	movwf	memset@n
  4820  0D16  3000               	movlw	0
  4821  0D17  00A5               	movwf	memset@n+1
  4822  0D18  3197  27CC  318D   	fcall	_memset
  4823                           
  4824                           ;main.c: 98: strcat(packet->Message, romData->name);
  4825  0D1B  0021               	movlb	1	; select bank1
  4826  0D1C  0839               	movf	setMessage@packet^(0+128),w
  4827  0D1D  3E01               	addlw	1
  4828  0D1E  00B3               	movwf	strcat@to^(0+128)
  4829  0D1F  3000               	movlw	0
  4830  0D20  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  4831  0D21  00B4               	movwf	(strcat@to+1)^(0+128)
  4832  0D22  086E               	movf	_romData^(0+128),w
  4833  0D23  3E01               	addlw	1
  4834  0D24  00B5               	movwf	strcat@from^(0+128)
  4835  0D25  3001               	movlw	1
  4836  0D26  00B6               	movwf	(strcat@from+1)^(0+128)
  4837  0D27  3189  218C  318D   	fcall	_strcat
  4838                           
  4839                           ;main.c: 100: strcat(packet->Message, "/");
  4840  0D2A  0021               	movlb	1	; select bank1
  4841  0D2B  0839               	movf	setMessage@packet^(0+128),w
  4842  0D2C  3E01               	addlw	1
  4843  0D2D  00B3               	movwf	strcat@to^(0+128)
  4844  0D2E  3000               	movlw	0
  4845  0D2F  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  4846  0D30  00B4               	movwf	(strcat@to+1)^(0+128)
  4847  0D31  3031               	movlw	low (STR_1| (0+32768))
  4848  0D32  00B5               	movwf	strcat@from^(0+128)
  4849  0D33  3098               	movlw	high (STR_1| (0+32768))
  4850  0D34  00B6               	movwf	(strcat@from^(0+128)+1)
  4851  0D35  3189  218C  318D   	fcall	_strcat
  4852                           
  4853                           ;main.c: 101: strcat(packet->Message, topic);
  4854  0D38  0021               	movlb	1	; select bank1
  4855  0D39  0839               	movf	setMessage@packet^(0+128),w
  4856  0D3A  3E01               	addlw	1
  4857  0D3B  00B3               	movwf	strcat@to^(0+128)
  4858  0D3C  3000               	movlw	0
  4859  0D3D  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  4860  0D3E  00B4               	movwf	(strcat@to+1)^(0+128)
  4861  0D3F  083C               	movf	(setMessage@topic+1)^(0+128),w
  4862  0D40  00B6               	movwf	(strcat@from+1)^(0+128)
  4863  0D41  083B               	movf	setMessage@topic^(0+128),w
  4864  0D42  00B5               	movwf	strcat@from^(0+128)
  4865  0D43  3189  218C  318D   	fcall	_strcat
  4866                           
  4867                           ;main.c: 103: int status;;main.c: 104: strcat(packet->Message, "/");
  4868  0D46  0021               	movlb	1	; select bank1
  4869  0D47  0839               	movf	setMessage@packet^(0+128),w
  4870  0D48  3E01               	addlw	1
  4871  0D49  00B3               	movwf	strcat@to^(0+128)
  4872  0D4A  3000               	movlw	0
  4873  0D4B  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  4874  0D4C  00B4               	movwf	(strcat@to+1)^(0+128)
  4875  0D4D  3031               	movlw	low (STR_1| (0+32768))
  4876  0D4E  00B5               	movwf	strcat@from^(0+128)
  4877  0D4F  3098               	movlw	high (STR_1| (0+32768))
  4878  0D50  00B6               	movwf	(strcat@from^(0+128)+1)
  4879  0D51  3189  218C  318D   	fcall	_strcat
  4880                           
  4881                           ;main.c: 105: strcat(packet->Message, ftoa(value, &status));
  4882  0D54  0021               	movlb	1	; select bank1
  4883  0D55  0839               	movf	setMessage@packet^(0+128),w
  4884  0D56  3E01               	addlw	1
  4885  0D57  00B3               	movwf	strcat@to^(0+128)
  4886  0D58  3000               	movlw	0
  4887  0D59  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  4888  0D5A  00B4               	movwf	(strcat@to+1)^(0+128)
  4889  0D5B  083D               	movf	setMessage@value^(0+128),w
  4890  0D5C  00A6               	movwf	ftoa@f^(0+128)
  4891  0D5D  083E               	movf	(setMessage@value+1)^(0+128),w
  4892  0D5E  00A7               	movwf	(ftoa@f+1)^(0+128)
  4893  0D5F  083F               	movf	(setMessage@value+2)^(0+128),w
  4894  0D60  00A8               	movwf	(ftoa@f+2)^(0+128)
  4895  0D61  30C1               	movlw	(low (setMessage@status| 0))& (0+255)
  4896  0D62  00C0               	movwf	??_setMessage^(0+128)
  4897  0D63  0840               	movf	??_setMessage^(0+128),w
  4898  0D64  00A9               	movwf	ftoa@status^(0+128)
  4899  0D65  3185  255A  318D   	fcall	_ftoa
  4900  0D68  0021               	movlb	1	; select bank1
  4901  0D69  00B5               	movwf	strcat@from^(0+128)
  4902  0D6A  3001               	movlw	1
  4903  0D6B  00B6               	movwf	(strcat@from+1)^(0+128)
  4904  0D6C  3189  218C         	fcall	_strcat
  4905  0D6E  0008               	return
  4906  0D6F                     __end_of_setMessage:	
  4907                           
  4908                           	psect	text12
  4909  098C                     __ptext12:	
  4910 ;; *************** function _strcat *****************
  4911 ;; Defined at:
  4912 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  4913 ;; Parameters:    Size  Location     Type
  4914 ;;  to              2   19[BANK1 ] PTR unsigned char 
  4915 ;;		 -> main@packet(33), loop@packet(33), 
  4916 ;;  from            2   21[BANK1 ] PTR const unsigned char 
  4917 ;;		 -> romDataMap.name(16), ftoa@buf(17), STR_8(5), STR_6(6), 
  4918 ;;		 -> STR_5(5), STR_4(7), STR_3(5), STR_2(2), 
  4919 ;;		 -> STR_1(2), romDataMap(28), 
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;  cp              2   23[BANK1 ] PTR unsigned char 
  4922 ;;		 -> main@packet(33), loop@packet(33), 
  4923 ;; Return value:  Size  Location     Type
  4924 ;;                  2   19[BANK1 ] PTR unsigned char 
  4925 ;; Registers used:
  4926 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4927 ;; Tracked objects:
  4928 ;;		On entry : 0/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4932 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  4936 ;;Total ram usage:        6 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; Hardware stack levels required when called:    7
  4939 ;; This function calls:
  4940 ;;		Nothing
  4941 ;; This function is called by:
  4942 ;;		_setMessage
  4943 ;; This function uses a non-reentrant model
  4944 ;;
  4945                           
  4946                           
  4947                           ;psect for function _strcat
  4948  098C                     _strcat:	
  4949                           
  4950                           ;incstack = 0
  4951                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  4952  098C  0021               	movlb	1	; select bank1
  4953  098D  0834               	movf	(strcat@to+1)^(0+128),w
  4954  098E  00B8               	movwf	(strcat@cp+1)^(0+128)
  4955  098F  0833               	movf	strcat@to^(0+128),w
  4956  0990  00B7               	movwf	strcat@cp^(0+128)
  4957  0991                     l2733:	
  4958  0991  0837               	movf	strcat@cp^(0+128),w
  4959  0992  0086               	movwf	6
  4960  0993  0838               	movf	(strcat@cp+1)^(0+128),w
  4961  0994  0087               	movwf	7
  4962  0995  0801               	movf	1,w
  4963  0996  1903               	btfsc	3,2
  4964  0997  29A5               	goto	l2737
  4965  0998  3001               	movlw	1
  4966  0999  07B7               	addwf	strcat@cp^(0+128),f
  4967  099A  3000               	movlw	0
  4968  099B  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  4969  099C  2991               	goto	l2733
  4970  099D                     l2735:	
  4971  099D  3001               	movlw	1
  4972  099E  07B7               	addwf	strcat@cp^(0+128),f
  4973  099F  3000               	movlw	0
  4974  09A0  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  4975  09A1  3001               	movlw	1
  4976  09A2  07B5               	addwf	strcat@from^(0+128),f
  4977  09A3  3000               	movlw	0
  4978  09A4  3DB6               	addwfc	(strcat@from+1)^(0+128),f
  4979  09A5                     l2737:	
  4980  09A5  0837               	movf	strcat@cp^(0+128),w
  4981  09A6  0086               	movwf	6
  4982  09A7  0838               	movf	(strcat@cp+1)^(0+128),w
  4983  09A8  0087               	movwf	7
  4984  09A9  0835               	movf	strcat@from^(0+128),w
  4985  09AA  0084               	movwf	4
  4986  09AB  0836               	movf	(strcat@from+1)^(0+128),w
  4987  09AC  0085               	movwf	5
  4988  09AD  0800               	movf	0,w	;code access
  4989  09AE  3FC0               	movwi [0]fsr1
  4990  09AF  0889               	movf	9,f
  4991  09B0  1903               	btfsc	3,2
  4992  09B1  0008               	return
  4993  09B2  299D               	goto	l2735
  4994  09B3                     __end_of_strcat:	
  4995                           ;	Return value of _strcat is never used
  4996                           
  4997                           
  4998                           	psect	text13
  4999  17CC                     __ptext13:	
  5000 ;; *************** function _memset *****************
  5001 ;; Defined at:
  5002 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  5003 ;; Parameters:    Size  Location     Type
  5004 ;;  p1              2    0[BANK0 ] PTR void 
  5005 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5006 ;;  c               2    2[BANK0 ] int 
  5007 ;;  n               2    4[BANK0 ] unsigned int 
  5008 ;; Auto vars:     Size  Location     Type
  5009 ;;  p               2    6[BANK0 ] PTR unsigned char 
  5010 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5011 ;; Return value:  Size  Location     Type
  5012 ;;                  2    0[BANK0 ] PTR void 
  5013 ;; Registers used:
  5014 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5020 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5021 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5023 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5024 ;;Total ram usage:        8 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; Hardware stack levels required when called:    7
  5027 ;; This function calls:
  5028 ;;		Nothing
  5029 ;; This function is called by:
  5030 ;;		_setMessage
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           
  5035                           ;psect for function _memset
  5036  17CC                     _memset:	
  5037                           
  5038                           ;incstack = 0
  5039                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  5040  17CC  0020               	movlb	0	; select bank0
  5041  17CD  0821               	movf	memset@p1+1,w
  5042  17CE  00A7               	movwf	memset@p+1
  5043  17CF  0820               	movf	memset@p1,w
  5044  17D0  00A6               	movwf	memset@p
  5045  17D1                     l2727:	
  5046  17D1  3001               	movlw	1
  5047  17D2  02A4               	subwf	memset@n,f
  5048  17D3  3000               	movlw	0
  5049  17D4  3BA5               	subwfb	memset@n+1,f
  5050  17D5  0A24               	incf	memset@n,w
  5051  17D6  1903               	btfsc	3,2
  5052  17D7  0A25               	incf	memset@n+1,w
  5053  17D8  1903               	btfsc	3,2
  5054  17D9  0008               	return
  5055  17DA  0826               	movf	memset@p,w
  5056  17DB  0086               	movwf	6
  5057  17DC  0827               	movf	memset@p+1,w
  5058  17DD  0087               	movwf	7
  5059  17DE  0822               	movf	memset@c,w
  5060  17DF  0081               	movwf	1
  5061  17E0  3001               	movlw	1
  5062  17E1  07A6               	addwf	memset@p,f
  5063  17E2  3000               	movlw	0
  5064  17E3  3DA7               	addwfc	memset@p+1,f
  5065  17E4  2FD1               	goto	l2727
  5066  17E5                     __end_of_memset:	
  5067                           ;	Return value of _memset is never used
  5068                           
  5069                           
  5070                           	psect	text14
  5071  055A                     __ptext14:	
  5072 ;; *************** function _ftoa *****************
  5073 ;; Defined at:
  5074 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  5075 ;; Parameters:    Size  Location     Type
  5076 ;;  f               3    6[BANK1 ] float 
  5077 ;;  status          1    9[BANK1 ] PTR int 
  5078 ;;		 -> setMessage@status(2), 
  5079 ;; Auto vars:     Size  Location     Type
  5080 ;;  l               4   14[BANK1 ] unsigned long 
  5081 ;;  rem             4   10[BANK1 ] unsigned long 
  5082 ;;  cp              1   18[BANK1 ] PTR unsigned char 
  5083 ;;		 -> ftoa@buf(17), 
  5084 ;; Return value:  Size  Location     Type
  5085 ;;                  1    wreg      PTR unsigned char 
  5086 ;; Registers used:
  5087 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5088 ;; Tracked objects:
  5089 ;;		On entry : 0/0
  5090 ;;		On exit  : 0/0
  5091 ;;		Unchanged: 0/0
  5092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5093 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5094 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  5095 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5096 ;;      Totals:         0       1      13       0       0       0       0       0       0       0       0       0       
      +0       0
  5097 ;;Total ram usage:       14 bytes
  5098 ;; Hardware stack levels used:    1
  5099 ;; Hardware stack levels required when called:   10
  5100 ;; This function calls:
  5101 ;;		___ftge
  5102 ;;		___ftmul
  5103 ;;		___ftneg
  5104 ;;		___ftsub
  5105 ;;		___fttol
  5106 ;;		___lltoft
  5107 ;;		_sprintf
  5108 ;; This function is called by:
  5109 ;;		_setMessage
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113                           
  5114                           ;psect for function _ftoa
  5115  055A                     _ftoa:	
  5116                           
  5117                           ;incstack = 0
  5118                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5119  055A  304E               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  5120  055B  0020               	movlb	0	; select bank0
  5121  055C  00EF               	movwf	??_ftoa
  5122  055D  086F               	movf	??_ftoa,w
  5123  055E  0021               	movlb	1	; select bank1
  5124  055F  00B2               	movwf	ftoa@cp^(0+128)
  5125  0560  0826               	movf	ftoa@f^(0+128),w
  5126  0561  0020               	movlb	0	; select bank0
  5127  0562  00A0               	movwf	___ftge@ff1
  5128  0563  0021               	movlb	1	; select bank1
  5129  0564  0827               	movf	(ftoa@f+1)^(0+128),w
  5130  0565  0020               	movlb	0	; select bank0
  5131  0566  00A1               	movwf	___ftge@ff1+1
  5132  0567  0021               	movlb	1	; select bank1
  5133  0568  0828               	movf	(ftoa@f+2)^(0+128),w
  5134  0569  0020               	movlb	0	; select bank0
  5135  056A  00A2               	movwf	___ftge@ff1+2
  5136  056B  3000               	movlw	0
  5137  056C  00A3               	movwf	___ftge@ff2
  5138  056D  3000               	movlw	0
  5139  056E  00A4               	movwf	___ftge@ff2+1
  5140  056F  3000               	movlw	0
  5141  0570  00A5               	movwf	___ftge@ff2+2
  5142  0571  318A  2234  3185   	fcall	___ftge
  5143  0574  1803               	btfsc	3,0
  5144  0575  2DA0               	goto	l2749
  5145  0576  302D               	movlw	45
  5146  0577  0020               	movlb	0	; select bank0
  5147  0578  00EF               	movwf	??_ftoa
  5148  0579  0021               	movlb	1	; select bank1
  5149  057A  0832               	movf	ftoa@cp^(0+128),w
  5150  057B  0086               	movwf	6
  5151  057C  3001               	movlw	1	; select bank2/3
  5152  057D  0087               	movwf	7
  5153  057E  0020               	movlb	0	; select bank0
  5154  057F  086F               	movf	??_ftoa,w
  5155  0580  0081               	movwf	1
  5156  0581  3001               	movlw	1
  5157  0582  00EF               	movwf	??_ftoa
  5158  0583  086F               	movf	??_ftoa,w
  5159  0584  0021               	movlb	1	; select bank1
  5160  0585  07B2               	addwf	ftoa@cp^(0+128),f
  5161  0586  0826               	movf	ftoa@f^(0+128),w
  5162  0587  0020               	movlb	0	; select bank0
  5163  0588  00D7               	movwf	___ftneg@f1
  5164  0589  0021               	movlb	1	; select bank1
  5165  058A  0827               	movf	(ftoa@f+1)^(0+128),w
  5166  058B  0020               	movlb	0	; select bank0
  5167  058C  00D8               	movwf	___ftneg@f1+1
  5168  058D  0021               	movlb	1	; select bank1
  5169  058E  0828               	movf	(ftoa@f+2)^(0+128),w
  5170  058F  0020               	movlb	0	; select bank0
  5171  0590  00D9               	movwf	___ftneg@f1+2
  5172  0591  3197  2769  3185   	fcall	___ftneg
  5173  0594  0020               	movlb	0	; select bank0
  5174  0595  0857               	movf	?___ftneg,w
  5175  0596  0021               	movlb	1	; select bank1
  5176  0597  00A6               	movwf	ftoa@f^(0+128)
  5177  0598  0020               	movlb	0	; select bank0
  5178  0599  0858               	movf	?___ftneg+1,w
  5179  059A  0021               	movlb	1	; select bank1
  5180  059B  00A7               	movwf	(ftoa@f+1)^(0+128)
  5181  059C  0020               	movlb	0	; select bank0
  5182  059D  0859               	movf	?___ftneg+2,w
  5183  059E  0021               	movlb	1	; select bank1
  5184  059F  00A8               	movwf	(ftoa@f+2)^(0+128)
  5185  05A0                     l2749:	
  5186  05A0  0021               	movlb	1	; select bank1
  5187  05A1  0826               	movf	ftoa@f^(0+128),w
  5188  05A2  0020               	movlb	0	; select bank0
  5189  05A3  00E7               	movwf	___fttol@f1
  5190  05A4  0021               	movlb	1	; select bank1
  5191  05A5  0827               	movf	(ftoa@f+1)^(0+128),w
  5192  05A6  0020               	movlb	0	; select bank0
  5193  05A7  00E8               	movwf	___fttol@f1+1
  5194  05A8  0021               	movlb	1	; select bank1
  5195  05A9  0828               	movf	(ftoa@f+2)^(0+128),w
  5196  05AA  0020               	movlb	0	; select bank0
  5197  05AB  00E9               	movwf	___fttol@f1+2
  5198  05AC  318D  256F  3185   	fcall	___fttol
  5199  05AF  0020               	movlb	0	; select bank0
  5200  05B0  086A               	movf	?___fttol+3,w
  5201  05B1  0021               	movlb	1	; select bank1
  5202  05B2  00B1               	movwf	(ftoa@l+3)^(0+128)
  5203  05B3  0020               	movlb	0	; select bank0
  5204  05B4  0869               	movf	?___fttol+2,w
  5205  05B5  0021               	movlb	1	; select bank1
  5206  05B6  00B0               	movwf	(ftoa@l+2)^(0+128)
  5207  05B7  0020               	movlb	0	; select bank0
  5208  05B8  0868               	movf	?___fttol+1,w
  5209  05B9  0021               	movlb	1	; select bank1
  5210  05BA  00AF               	movwf	(ftoa@l+1)^(0+128)
  5211  05BB  0020               	movlb	0	; select bank0
  5212  05BC  0867               	movf	?___fttol,w
  5213  05BD  0021               	movlb	1	; select bank1
  5214  05BE  00AE               	movwf	ftoa@l^(0+128)
  5215  05BF  0831               	movf	(ftoa@l+3)^(0+128),w
  5216  05C0  0020               	movlb	0	; select bank0
  5217  05C1  00AB               	movwf	___lltoft@c+3
  5218  05C2  0021               	movlb	1	; select bank1
  5219  05C3  0830               	movf	(ftoa@l+2)^(0+128),w
  5220  05C4  0020               	movlb	0	; select bank0
  5221  05C5  00AA               	movwf	___lltoft@c+2
  5222  05C6  0021               	movlb	1	; select bank1
  5223  05C7  082F               	movf	(ftoa@l+1)^(0+128),w
  5224  05C8  0020               	movlb	0	; select bank0
  5225  05C9  00A9               	movwf	___lltoft@c+1
  5226  05CA  0021               	movlb	1	; select bank1
  5227  05CB  082E               	movf	ftoa@l^(0+128),w
  5228  05CC  0020               	movlb	0	; select bank0
  5229  05CD  00A8               	movwf	___lltoft@c
  5230  05CE  3189  21DD  3185   	fcall	___lltoft
  5231  05D1  0020               	movlb	0	; select bank0
  5232  05D2  0828               	movf	?___lltoft,w
  5233  05D3  00BB               	movwf	___ftsub@f2
  5234  05D4  0829               	movf	?___lltoft+1,w
  5235  05D5  00BC               	movwf	___ftsub@f2+1
  5236  05D6  082A               	movf	?___lltoft+2,w
  5237  05D7  00BD               	movwf	___ftsub@f2+2
  5238  05D8  0021               	movlb	1	; select bank1
  5239  05D9  0826               	movf	ftoa@f^(0+128),w
  5240  05DA  0020               	movlb	0	; select bank0
  5241  05DB  00BE               	movwf	___ftsub@f1
  5242  05DC  0021               	movlb	1	; select bank1
  5243  05DD  0827               	movf	(ftoa@f+1)^(0+128),w
  5244  05DE  0020               	movlb	0	; select bank0
  5245  05DF  00BF               	movwf	___ftsub@f1+1
  5246  05E0  0021               	movlb	1	; select bank1
  5247  05E1  0828               	movf	(ftoa@f+2)^(0+128),w
  5248  05E2  0020               	movlb	0	; select bank0
  5249  05E3  00C0               	movwf	___ftsub@f1+2
  5250  05E4  3188  20A1  3185   	fcall	___ftsub
  5251  05E7  0020               	movlb	0	; select bank0
  5252  05E8  083B               	movf	?___ftsub,w
  5253  05E9  0021               	movlb	1	; select bank1
  5254  05EA  00A6               	movwf	ftoa@f^(0+128)
  5255  05EB  0020               	movlb	0	; select bank0
  5256  05EC  083C               	movf	?___ftsub+1,w
  5257  05ED  0021               	movlb	1	; select bank1
  5258  05EE  00A7               	movwf	(ftoa@f+1)^(0+128)
  5259  05EF  0020               	movlb	0	; select bank0
  5260  05F0  083D               	movf	?___ftsub+2,w
  5261  05F1  0021               	movlb	1	; select bank1
  5262  05F2  00A8               	movwf	(ftoa@f+2)^(0+128)
  5263  05F3  0826               	movf	ftoa@f^(0+128),w
  5264  05F4  0020               	movlb	0	; select bank0
  5265  05F5  00DA               	movwf	___ftmul@f2
  5266  05F6  0021               	movlb	1	; select bank1
  5267  05F7  0827               	movf	(ftoa@f+1)^(0+128),w
  5268  05F8  0020               	movlb	0	; select bank0
  5269  05F9  00DB               	movwf	___ftmul@f2+1
  5270  05FA  0021               	movlb	1	; select bank1
  5271  05FB  0828               	movf	(ftoa@f+2)^(0+128),w
  5272  05FC  0020               	movlb	0	; select bank0
  5273  05FD  00DC               	movwf	___ftmul@f2+2
  5274  05FE  3024               	movlw	36
  5275  05FF  00D7               	movwf	___ftmul@f1
  5276  0600  3074               	movlw	116
  5277  0601  00D8               	movwf	___ftmul@f1+1
  5278  0602  3049               	movlw	73
  5279  0603  00D9               	movwf	___ftmul@f1+2
  5280  0604  3187  2714  3185   	fcall	___ftmul
  5281  0607  0020               	movlb	0	; select bank0
  5282  0608  0857               	movf	?___ftmul,w
  5283  0609  00E7               	movwf	___fttol@f1
  5284  060A  0858               	movf	?___ftmul+1,w
  5285  060B  00E8               	movwf	___fttol@f1+1
  5286  060C  0859               	movf	?___ftmul+2,w
  5287  060D  00E9               	movwf	___fttol@f1+2
  5288  060E  318D  256F  3185   	fcall	___fttol
  5289  0611  0020               	movlb	0	; select bank0
  5290  0612  086A               	movf	?___fttol+3,w
  5291  0613  0021               	movlb	1	; select bank1
  5292  0614  00AD               	movwf	(ftoa@rem+3)^(0+128)
  5293  0615  0020               	movlb	0	; select bank0
  5294  0616  0869               	movf	?___fttol+2,w
  5295  0617  0021               	movlb	1	; select bank1
  5296  0618  00AC               	movwf	(ftoa@rem+2)^(0+128)
  5297  0619  0020               	movlb	0	; select bank0
  5298  061A  0868               	movf	?___fttol+1,w
  5299  061B  0021               	movlb	1	; select bank1
  5300  061C  00AB               	movwf	(ftoa@rem+1)^(0+128)
  5301  061D  0020               	movlb	0	; select bank0
  5302  061E  0867               	movf	?___fttol,w
  5303  061F  0021               	movlb	1	; select bank1
  5304  0620  00AA               	movwf	ftoa@rem^(0+128)
  5305  0621  3001               	movlw	low (STR_9| (0+32768))
  5306  0622  0020               	movlb	0	; select bank0
  5307  0623  00B8               	movwf	sprintf@f
  5308  0624  3098               	movlw	high (STR_9| (0+32768))
  5309  0625  00B9               	movwf	sprintf@f+1
  5310  0626  0021               	movlb	1	; select bank1
  5311  0627  0831               	movf	(ftoa@l+3)^(0+128),w
  5312  0628  0020               	movlb	0	; select bank0
  5313  0629  00BD               	movwf	?_sprintf+5
  5314  062A  0021               	movlb	1	; select bank1
  5315  062B  0830               	movf	(ftoa@l+2)^(0+128),w
  5316  062C  0020               	movlb	0	; select bank0
  5317  062D  00BC               	movwf	?_sprintf+4
  5318  062E  0021               	movlb	1	; select bank1
  5319  062F  082F               	movf	(ftoa@l+1)^(0+128),w
  5320  0630  0020               	movlb	0	; select bank0
  5321  0631  00BB               	movwf	?_sprintf+3
  5322  0632  0021               	movlb	1	; select bank1
  5323  0633  082E               	movf	ftoa@l^(0+128),w
  5324  0634  0020               	movlb	0	; select bank0
  5325  0635  00BA               	movwf	?_sprintf+2
  5326  0636  0021               	movlb	1	; select bank1
  5327  0637  082D               	movf	(ftoa@rem+3)^(0+128),w
  5328  0638  0020               	movlb	0	; select bank0
  5329  0639  00C1               	movwf	?_sprintf+9
  5330  063A  0021               	movlb	1	; select bank1
  5331  063B  082C               	movf	(ftoa@rem+2)^(0+128),w
  5332  063C  0020               	movlb	0	; select bank0
  5333  063D  00C0               	movwf	?_sprintf+8
  5334  063E  0021               	movlb	1	; select bank1
  5335  063F  082B               	movf	(ftoa@rem+1)^(0+128),w
  5336  0640  0020               	movlb	0	; select bank0
  5337  0641  00BF               	movwf	?_sprintf+7
  5338  0642  0021               	movlb	1	; select bank1
  5339  0643  082A               	movf	ftoa@rem^(0+128),w
  5340  0644  0020               	movlb	0	; select bank0
  5341  0645  00BE               	movwf	?_sprintf+6
  5342  0646  0021               	movlb	1	; select bank1
  5343  0647  0832               	movf	ftoa@cp^(0+128),w
  5344  0648  3180  2032         	fcall	_sprintf
  5345  064A  304E               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  5346  064B  0008               	return
  5347  064C                     __end_of_ftoa:	
  5348                           
  5349                           	psect	text15
  5350  0032                     __ptext15:	
  5351 ;; *************** function _sprintf *****************
  5352 ;; Defined at:
  5353 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  5354 ;; Parameters:    Size  Location     Type
  5355 ;;  sp              1    wreg     PTR unsigned char 
  5356 ;;		 -> ftoa@buf(17), 
  5357 ;;  f               2   24[BANK0 ] PTR const unsigned char 
  5358 ;;		 -> STR_9(11), 
  5359 ;; Auto vars:     Size  Location     Type
  5360 ;;  sp              1   46[BANK0 ] PTR unsigned char 
  5361 ;;		 -> ftoa@buf(17), 
  5362 ;;  val             4   42[BANK0 ] unsigned long 
  5363 ;;  tmpval          4    0        struct .
  5364 ;;  prec            2   49[BANK0 ] int 
  5365 ;;  width           2   47[BANK0 ] int 
  5366 ;;  cp              2    0        PTR const unsigned char 
  5367 ;;  len             2    0        unsigned int 
  5368 ;;  c               1   51[BANK0 ] unsigned char 
  5369 ;;  ap              1   41[BANK0 ] PTR void [1]
  5370 ;;		 -> ?_sprintf(2), 
  5371 ;;  flag            1   40[BANK0 ] unsigned char 
  5372 ;; Return value:  Size  Location     Type
  5373 ;;                  2   24[BANK0 ] int 
  5374 ;; Registers used:
  5375 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5376 ;; Tracked objects:
  5377 ;;		On entry : 0/0
  5378 ;;		On exit  : 0/0
  5379 ;;		Unchanged: 0/0
  5380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5381 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5382 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5383 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5384 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5385 ;;Total ram usage:       28 bytes
  5386 ;; Hardware stack levels used:    1
  5387 ;; Hardware stack levels required when called:    8
  5388 ;; This function calls:
  5389 ;;		___lldiv
  5390 ;;		___llmod
  5391 ;;		___wmul
  5392 ;;		_isdigit
  5393 ;; This function is called by:
  5394 ;;		_ftoa
  5395 ;; This function uses a non-reentrant model
  5396 ;;
  5397                           
  5398                           
  5399                           ;psect for function _sprintf
  5400  0032                     _sprintf:	
  5401                           
  5402                           ;incstack = 0
  5403                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5404                           ;sprintf@sp stored from wreg
  5405  0032  0020               	movlb	0	; select bank0
  5406  0033  00CE               	movwf	sprintf@sp
  5407                           
  5408                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  5409  0034  303A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5410  0035  00C2               	movwf	??_sprintf
  5411  0036  0842               	movf	??_sprintf,w
  5412  0037  00C9               	movwf	sprintf@ap
  5413  0038                     l2515:	
  5414                           ;doprnt.c: 548: while((c = *f++)) {
  5415                           
  5416  0038  0839               	movf	sprintf@f+1,w
  5417  0039  00C3               	movwf	??_sprintf+1
  5418  003A  0838               	movf	sprintf@f,w
  5419  003B  00C2               	movwf	??_sprintf
  5420  003C  0AB8               	incf	sprintf@f,f
  5421  003D  1903               	skipnz
  5422  003E  0AB9               	incf	sprintf@f+1,f
  5423  003F  0842               	movf	??_sprintf,w
  5424  0040  0084               	movwf	4
  5425  0041  0843               	movf	??_sprintf+1,w
  5426  0042  0085               	movwf	5
  5427  0043  0800               	movf	0,w	;code access
  5428  0044  00C4               	movwf	??_sprintf+2
  5429  0045  0844               	movf	??_sprintf+2,w
  5430  0046  00D3               	movwf	sprintf@c
  5431  0047  0853               	movf	sprintf@c,w
  5432  0048  1903               	btfsc	3,2
  5433  0049  29F9               	goto	l2517
  5434                           
  5435                           ;doprnt.c: 550: if(c != '%')
  5436  004A  3025               	movlw	37
  5437  004B  0653               	xorwf	sprintf@c,w
  5438  004C  1903               	btfsc	3,2
  5439  004D  285B               	goto	l2427
  5440                           
  5441                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  5442  004E  0853               	movf	sprintf@c,w
  5443  004F  00C2               	movwf	??_sprintf
  5444  0050  084E               	movf	sprintf@sp,w
  5445  0051  0086               	movwf	6
  5446  0052  3001               	movlw	1	; select bank2/3
  5447  0053  0087               	movwf	7
  5448  0054  0842               	movf	??_sprintf,w
  5449  0055  0081               	movwf	1
  5450  0056  3001               	movlw	1
  5451  0057  00C2               	movwf	??_sprintf
  5452  0058  0842               	movf	??_sprintf,w
  5453  0059  07CE               	addwf	sprintf@sp,f
  5454                           
  5455                           ;doprnt.c: 554: continue;
  5456  005A  2838               	goto	l2515
  5457  005B                     l2427:	
  5458                           
  5459                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  5460  005B  01CF               	clrf	sprintf@width
  5461  005C  01D0               	clrf	sprintf@width+1
  5462                           
  5463                           ;doprnt.c: 560: flag = 0;
  5464  005D  01C8               	clrf	sprintf@flag
  5465                           
  5466                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  5467  005E  0838               	movf	sprintf@f,w
  5468  005F  0084               	movwf	4
  5469  0060  0839               	movf	sprintf@f+1,w
  5470  0061  0085               	movwf	5
  5471  0062  0800               	movf	0,w	;code access
  5472  0063  3197  277F  3180   	fcall	_isdigit
  5473  0066  1C03               	btfss	3,0
  5474  0067  2899               	goto	l2441
  5475                           
  5476                           ;doprnt.c: 610: width = 0;
  5477  0068  0020               	movlb	0	; select bank0
  5478  0069  01CF               	clrf	sprintf@width
  5479  006A  01D0               	clrf	sprintf@width+1
  5480  006B                     l2433:	
  5481                           ;doprnt.c: 611: do {
  5482                           
  5483                           
  5484                           ;doprnt.c: 612: width *= 10;
  5485  006B  300A               	movlw	10
  5486  006C  0020               	movlb	0	; select bank0
  5487  006D  00A0               	movwf	___wmul@multiplier
  5488  006E  3000               	movlw	0
  5489  006F  00A1               	movwf	___wmul@multiplier+1
  5490  0070  0850               	movf	sprintf@width+1,w
  5491  0071  00A3               	movwf	___wmul@multiplicand+1
  5492  0072  084F               	movf	sprintf@width,w
  5493  0073  00A2               	movwf	___wmul@multiplicand
  5494  0074  3188  204D  3180   	fcall	___wmul
  5495  0077  0020               	movlb	0	; select bank0
  5496  0078  0821               	movf	?___wmul+1,w
  5497  0079  00D0               	movwf	sprintf@width+1
  5498  007A  0820               	movf	?___wmul,w
  5499  007B  00CF               	movwf	sprintf@width
  5500                           
  5501                           ;doprnt.c: 613: width += *f++ - '0';
  5502  007C  0838               	movf	sprintf@f,w
  5503  007D  0084               	movwf	4
  5504  007E  0839               	movf	sprintf@f+1,w
  5505  007F  0085               	movwf	5
  5506  0080  0800               	movf	0,w	;code access
  5507  0081  3ED0               	addlw	208
  5508  0082  00C2               	movwf	??_sprintf
  5509  0083  30FF               	movlw	255
  5510  0084  1803               	skipnc
  5511  0085  3000               	movlw	0
  5512  0086  00C3               	movwf	??_sprintf+1
  5513  0087  0842               	movf	??_sprintf,w
  5514  0088  07CF               	addwf	sprintf@width,f
  5515  0089  0843               	movf	??_sprintf+1,w
  5516  008A  3DD0               	addwfc	sprintf@width+1,f
  5517  008B  3001               	movlw	1
  5518  008C  07B8               	addwf	sprintf@f,f
  5519  008D  3000               	movlw	0
  5520  008E  3DB9               	addwfc	sprintf@f+1,f
  5521                           
  5522                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  5523  008F  0838               	movf	sprintf@f,w
  5524  0090  0084               	movwf	4
  5525  0091  0839               	movf	sprintf@f+1,w
  5526  0092  0085               	movwf	5
  5527  0093  0800               	movf	0,w	;code access
  5528  0094  3197  277F  3180   	fcall	_isdigit
  5529  0097  1803               	btfsc	3,0
  5530  0098  286B               	goto	l2433
  5531  0099                     l2441:	
  5532                           
  5533                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  5534  0099  0020               	movlb	0	; select bank0
  5535  009A  0838               	movf	sprintf@f,w
  5536  009B  0084               	movwf	4
  5537  009C  0839               	movf	sprintf@f+1,w
  5538  009D  0085               	movwf	5
  5539  009E  0012               	moviw fsr0++
  5540  009F  3A2E               	xorlw	46
  5541  00A0  1D03               	btfss	3,2
  5542  00A1  28D7               	goto	l2453
  5543                           
  5544                           ;doprnt.c: 625: f++;
  5545  00A2  3001               	movlw	1
  5546  00A3  07B8               	addwf	sprintf@f,f
  5547  00A4  3000               	movlw	0
  5548  00A5  3DB9               	addwfc	sprintf@f+1,f
  5549                           
  5550                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  5551  00A6  01D1               	clrf	sprintf@prec
  5552  00A7  01D2               	clrf	sprintf@prec+1
  5553  00A8                     l2451:	
  5554                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  5555                           
  5556  00A8  0838               	movf	sprintf@f,w
  5557  00A9  0084               	movwf	4
  5558  00AA  0839               	movf	sprintf@f+1,w
  5559  00AB  0085               	movwf	5
  5560  00AC  0800               	movf	0,w	;code access
  5561  00AD  3197  277F  3180   	fcall	_isdigit
  5562  00B0  1C03               	btfss	3,0
  5563  00B1  28E2               	goto	l2459
  5564                           
  5565                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  5566  00B2  0020               	movlb	0	; select bank0
  5567  00B3  0838               	movf	sprintf@f,w
  5568  00B4  0084               	movwf	4
  5569  00B5  0839               	movf	sprintf@f+1,w
  5570  00B6  0085               	movwf	5
  5571  00B7  0800               	movf	0,w	;code access
  5572  00B8  00C2               	movwf	??_sprintf
  5573  00B9  01C3               	clrf	??_sprintf+1
  5574  00BA  0852               	movf	sprintf@prec+1,w
  5575  00BB  00A1               	movwf	___wmul@multiplier+1
  5576  00BC  0851               	movf	sprintf@prec,w
  5577  00BD  00A0               	movwf	___wmul@multiplier
  5578  00BE  300A               	movlw	10
  5579  00BF  00A2               	movwf	___wmul@multiplicand
  5580  00C0  3000               	movlw	0
  5581  00C1  00A3               	movwf	___wmul@multiplicand+1
  5582  00C2  3188  204D  3180   	fcall	___wmul
  5583  00C5  0020               	movlb	0	; select bank0
  5584  00C6  0842               	movf	??_sprintf,w
  5585  00C7  0720               	addwf	?___wmul,w
  5586  00C8  00C4               	movwf	??_sprintf+2
  5587  00C9  0843               	movf	??_sprintf+1,w
  5588  00CA  3D21               	addwfc	?___wmul+1,w
  5589  00CB  00C5               	movwf	??_sprintf+3
  5590  00CC  0844               	movf	??_sprintf+2,w
  5591  00CD  3ED0               	addlw	208
  5592  00CE  00D1               	movwf	sprintf@prec
  5593  00CF  30FF               	movlw	255
  5594  00D0  3D45               	addwfc	??_sprintf+3,w
  5595  00D1  00D2               	movwf	sprintf@prec+1
  5596  00D2  3001               	movlw	1
  5597  00D3  07B8               	addwf	sprintf@f,f
  5598  00D4  3000               	movlw	0
  5599  00D5  3DB9               	addwfc	sprintf@f+1,f
  5600  00D6  28A8               	goto	l2451
  5601  00D7                     l2453:	
  5602                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  5603                           
  5604                           
  5605                           ;doprnt.c: 645: prec = 0;
  5606  00D7  0020               	movlb	0	; select bank0
  5607  00D8  01D1               	clrf	sprintf@prec
  5608  00D9  01D2               	clrf	sprintf@prec+1
  5609                           
  5610                           ;doprnt.c: 654: switch(c = *f++) {
  5611                           
  5612                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  5613  00DA  28E2               	goto	l2459
  5614  00DB                     l445:	
  5615                           ;doprnt.c: 660: case 'l':
  5616                           
  5617                           ;doprnt.c: 657: goto alldone;
  5618                           
  5619                           ;doprnt.c: 656: case 0:
  5620                           
  5621                           
  5622                           ;doprnt.c: 662: flag |= 0x10;
  5623  00DB  1648               	bsf	sprintf@flag,4
  5624                           
  5625                           ;doprnt.c: 663: goto loop;
  5626  00DC  28E2               	goto	l2459
  5627  00DD                     l2455:	
  5628                           ;doprnt.c: 836: case 'u':
  5629                           
  5630                           ;doprnt.c: 832: continue;
  5631                           
  5632                           ;doprnt.c: 821: default:
  5633                           
  5634                           
  5635                           ;doprnt.c: 837: flag |= 0xC0;
  5636  00DD  30C0               	movlw	192
  5637  00DE  00C2               	movwf	??_sprintf
  5638  00DF  0842               	movf	??_sprintf,w
  5639  00E0  04C8               	iorwf	sprintf@flag,f
  5640                           
  5641                           ;doprnt.c: 841: }
  5642                           
  5643                           ;doprnt.c: 838: break;
  5644  00E1  28FA               	goto	l448
  5645  00E2                     l2459:	
  5646  00E2  0020               	movlb	0	; select bank0
  5647  00E3  0839               	movf	sprintf@f+1,w
  5648  00E4  00C3               	movwf	??_sprintf+1
  5649  00E5  0838               	movf	sprintf@f,w
  5650  00E6  00C2               	movwf	??_sprintf
  5651  00E7  0AB8               	incf	sprintf@f,f
  5652  00E8  1903               	skipnz
  5653  00E9  0AB9               	incf	sprintf@f+1,f
  5654  00EA  0842               	movf	??_sprintf,w
  5655  00EB  0084               	movwf	4
  5656  00EC  0843               	movf	??_sprintf+1,w
  5657  00ED  0085               	movwf	5
  5658  00EE  0800               	movf	0,w	;code access
  5659  00EF  00D3               	movwf	sprintf@c
  5660                           
  5661                           ; Switch size 1, requested type "space"
  5662                           ; Number of cases is 3, Range of values is 0 to 117
  5663                           ; switch strategies available:
  5664                           ; Name         Instructions Cycles
  5665                           ; simple_byte           10     6 (average)
  5666                           ; direct_byte          242     6 (fixed)
  5667                           ; jumptable            260     6 (fixed)
  5668                           ;	Chosen strategy is simple_byte
  5669  00F0  3A00               	xorlw	0	; case 0
  5670  00F1  1903               	skipnz
  5671  00F2  29F9               	goto	l2517
  5672  00F3  3A6C               	xorlw	108	; case 108
  5673  00F4  1903               	skipnz
  5674  00F5  28DB               	goto	l445
  5675  00F6  3A19               	xorlw	25	; case 117
  5676  00F7  1903               	skipnz
  5677  00F8  28DD               	goto	l2455
  5678  00F9  2838               	goto	l2515
  5679  00FA                     l448:	
  5680                           
  5681                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  5682  00FA  1E48               	btfss	sprintf@flag,4
  5683  00FB  2909               	goto	l2465
  5684                           
  5685                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  5686  00FC  0849               	movf	sprintf@ap,w
  5687  00FD  0086               	movwf	6
  5688  00FE  0187               	clrf	7
  5689  00FF  3F40               	moviw [0]fsr1
  5690  0100  00CA               	movwf	sprintf@val
  5691  0101  3F41               	moviw [1]fsr1
  5692  0102  00CB               	movwf	sprintf@val+1
  5693  0103  3F42               	moviw [2]fsr1
  5694  0104  00CC               	movwf	sprintf@val+2
  5695  0105  3F43               	moviw [3]fsr1
  5696  0106  00CD               	movwf	sprintf@val+3
  5697  0107  3004               	movlw	4
  5698  0108  2917               	goto	L1
  5699  0109                     l2465:	
  5700                           
  5701                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  5702  0109  0849               	movf	sprintf@ap,w
  5703  010A  0086               	movwf	6
  5704  010B  0187               	clrf	7
  5705  010C  3F40               	moviw [0]fsr1
  5706  010D  00C2               	movwf	??_sprintf
  5707  010E  3F41               	moviw [1]fsr1
  5708  010F  00C3               	movwf	??_sprintf+1
  5709  0110  0842               	movf	??_sprintf,w
  5710  0111  00CA               	movwf	sprintf@val
  5711  0112  0843               	movf	??_sprintf+1,w
  5712  0113  00CB               	movwf	sprintf@val+1
  5713  0114  01CC               	clrf	sprintf@val+2
  5714  0115  01CD               	clrf	sprintf@val+3
  5715  0116  3002               	movlw	2
  5716  0117                     L1:	
  5717  0117  00C2               	movwf	??_sprintf
  5718  0118  0842               	movf	??_sprintf,w
  5719  0119  07C9               	addwf	sprintf@ap,f
  5720                           
  5721                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  5722  011A  0851               	movf	sprintf@prec,w
  5723  011B  0452               	iorwf	sprintf@prec+1,w
  5724  011C  1D03               	btfss	3,2
  5725  011D  2928               	goto	l2475
  5726  011E  084D               	movf	sprintf@val+3,w
  5727  011F  044C               	iorwf	sprintf@val+2,w
  5728  0120  044B               	iorwf	sprintf@val+1,w
  5729  0121  044A               	iorwf	sprintf@val,w
  5730  0122  1D03               	skipz
  5731  0123  2928               	goto	l2475
  5732                           
  5733                           ;doprnt.c: 1310: prec++;
  5734  0124  3001               	movlw	1
  5735  0125  07D1               	addwf	sprintf@prec,f
  5736  0126  3000               	movlw	0
  5737  0127  3DD2               	addwfc	sprintf@prec+1,f
  5738  0128                     l2475:	
  5739                           
  5740                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5741  0128  01D3               	clrf	sprintf@c
  5742  0129  0AD3               	incf	sprintf@c,f
  5743  012A  300A               	movlw	10
  5744  012B  0653               	xorwf	sprintf@c,w
  5745  012C  1903               	btfsc	3,2
  5746  012D  295B               	goto	l2487
  5747  012E                     l2481:	
  5748                           
  5749                           ;doprnt.c: 1325: if(val < dpowers[c])
  5750  012E  0853               	movf	sprintf@c,w
  5751  012F  00C2               	movwf	??_sprintf
  5752  0130  01C3               	clrf	??_sprintf+1
  5753  0131  35C2               	lslf	??_sprintf,f
  5754  0132  0DC3               	rlf	??_sprintf+1,f
  5755  0133  35C2               	lslf	??_sprintf,f
  5756  0134  0DC3               	rlf	??_sprintf+1,f
  5757  0135  3000               	movlw	low (_dpowers| (0+32768))
  5758  0136  0742               	addwf	??_sprintf,w
  5759  0137  0084               	movwf	4
  5760  0138  3090               	movlw	high (_dpowers| (0+32768))
  5761  0139  3D43               	addwfc	??_sprintf+1,w
  5762  013A  0085               	movwf	5
  5763  013B  3F00               	moviw [0]fsr0
  5764  013C  00C4               	movwf	??_sprintf+2
  5765  013D  3F01               	moviw [1]fsr0
  5766  013E  00C5               	movwf	??_sprintf+3
  5767  013F  3F02               	moviw [2]fsr0
  5768  0140  00C6               	movwf	??_sprintf+4
  5769  0141  3F03               	moviw [3]fsr0
  5770  0142  00C7               	movwf	??_sprintf+5
  5771  0143  0847               	movf	??_sprintf+5,w
  5772  0144  024D               	subwf	sprintf@val+3,w
  5773  0145  1D03               	skipz
  5774  0146  2951               	goto	u2325
  5775  0147  0846               	movf	??_sprintf+4,w
  5776  0148  024C               	subwf	sprintf@val+2,w
  5777  0149  1D03               	skipz
  5778  014A  2951               	goto	u2325
  5779  014B  0845               	movf	??_sprintf+3,w
  5780  014C  024B               	subwf	sprintf@val+1,w
  5781  014D  1D03               	skipz
  5782  014E  2951               	goto	u2325
  5783  014F  0844               	movf	??_sprintf+2,w
  5784  0150  024A               	subwf	sprintf@val,w
  5785  0151                     u2325:	
  5786  0151  1C03               	btfss	3,0
  5787  0152  295B               	goto	l2487
  5788                           
  5789                           ;doprnt.c: 1326: break;
  5790  0153  3001               	movlw	1
  5791  0154  00C2               	movwf	??_sprintf
  5792  0155  0842               	movf	??_sprintf,w
  5793  0156  07D3               	addwf	sprintf@c,f
  5794  0157  300A               	movlw	10
  5795  0158  0653               	xorwf	sprintf@c,w
  5796  0159  1D03               	btfss	3,2
  5797  015A  292E               	goto	l2481
  5798  015B                     l2487:	
  5799                           
  5800                           ;doprnt.c: 1358: if(c < prec)
  5801  015B  0852               	movf	sprintf@prec+1,w
  5802  015C  3A80               	xorlw	128
  5803  015D  3C80               	sublw	128
  5804  015E  1D03               	skipz
  5805  015F  2962               	goto	u2345
  5806  0160  0851               	movf	sprintf@prec,w
  5807  0161  0253               	subwf	sprintf@c,w
  5808  0162                     u2345:	
  5809  0162  1803               	skipnc
  5810  0163  296A               	goto	l2491
  5811                           
  5812                           ;doprnt.c: 1359: c = prec;
  5813  0164  0020               	movlb	0	; select bank0
  5814  0165  0851               	movf	sprintf@prec,w
  5815  0166  00C2               	movwf	??_sprintf
  5816  0167  0842               	movf	??_sprintf,w
  5817  0168  00D3               	movwf	sprintf@c
  5818  0169  297E               	goto	l456
  5819  016A                     l2491:	
  5820                           
  5821                           ;doprnt.c: 1360: else if(prec < c)
  5822  016A  0020               	movlb	0	; select bank0
  5823  016B  0852               	movf	sprintf@prec+1,w
  5824  016C  3A80               	xorlw	128
  5825  016D  00C2               	movwf	??_sprintf
  5826  016E  3080               	movlw	128
  5827  016F  0242               	subwf	??_sprintf,w
  5828  0170  1D03               	skipz
  5829  0171  2974               	goto	u2355
  5830  0172  0853               	movf	sprintf@c,w
  5831  0173  0251               	subwf	sprintf@prec,w
  5832  0174                     u2355:	
  5833  0174  1803               	skipnc
  5834  0175  297E               	goto	l456
  5835                           
  5836                           ;doprnt.c: 1361: prec = c;
  5837  0176  0020               	movlb	0	; select bank0
  5838  0177  0853               	movf	sprintf@c,w
  5839  0178  00C2               	movwf	??_sprintf
  5840  0179  01C3               	clrf	??_sprintf+1
  5841  017A  0842               	movf	??_sprintf,w
  5842  017B  00D1               	movwf	sprintf@prec
  5843  017C  0843               	movf	??_sprintf+1,w
  5844  017D  00D2               	movwf	sprintf@prec+1
  5845  017E                     l456:	
  5846                           
  5847                           ;doprnt.c: 1400: if(width > c)
  5848  017E  0020               	movlb	0	; select bank0
  5849  017F  0850               	movf	sprintf@width+1,w
  5850  0180  3A80               	xorlw	128
  5851  0181  3C80               	sublw	128
  5852  0182  1D03               	skipz
  5853  0183  2986               	goto	u2365
  5854  0184  084F               	movf	sprintf@width,w
  5855  0185  0253               	subwf	sprintf@c,w
  5856  0186                     u2365:	
  5857  0186  1803               	skipnc
  5858  0187  2991               	goto	l2497
  5859                           
  5860                           ;doprnt.c: 1401: width -= c;
  5861  0188  0020               	movlb	0	; select bank0
  5862  0189  0853               	movf	sprintf@c,w
  5863  018A  00C2               	movwf	??_sprintf
  5864  018B  01C3               	clrf	??_sprintf+1
  5865  018C  0842               	movf	??_sprintf,w
  5866  018D  02CF               	subwf	sprintf@width,f
  5867  018E  0843               	movf	??_sprintf+1,w
  5868  018F  3BD0               	subwfb	sprintf@width+1,f
  5869  0190  2994               	goto	l2499
  5870  0191                     l2497:	
  5871                           
  5872                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  5873  0191  0020               	movlb	0	; select bank0
  5874  0192  01CF               	clrf	sprintf@width
  5875  0193  01D0               	clrf	sprintf@width+1
  5876  0194                     l2499:	
  5877                           
  5878                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  5879  0194  084F               	movf	sprintf@width,w
  5880  0195  0450               	iorwf	sprintf@width+1,w
  5881  0196  1903               	btfsc	3,2
  5882  0197  29EE               	goto	l2513
  5883                           
  5884                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  5885                           
  5886                           ;doprnt.c: 1448: do
  5887  0198  3020               	movlw	32
  5888  0199  00C2               	movwf	??_sprintf
  5889  019A  084E               	movf	sprintf@sp,w
  5890  019B  0086               	movwf	6
  5891  019C  3001               	movlw	1	; select bank2/3
  5892  019D  0087               	movwf	7
  5893  019E  0842               	movf	??_sprintf,w
  5894  019F  0081               	movwf	1
  5895  01A0  3001               	movlw	1
  5896  01A1  00C2               	movwf	??_sprintf
  5897  01A2  0842               	movf	??_sprintf,w
  5898  01A3  07CE               	addwf	sprintf@sp,f
  5899                           
  5900                           ;doprnt.c: 1450: while(--width);
  5901  01A4  30FF               	movlw	255
  5902  01A5  07CF               	addwf	sprintf@width,f
  5903  01A6  30FF               	movlw	255
  5904  01A7  3DD0               	addwfc	sprintf@width+1,f
  5905  01A8  2994               	goto	l2499
  5906  01A9                     l2507:	
  5907                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  5908                           
  5909                           
  5910                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  5911  01A9  3000               	movlw	0
  5912  01AA  00B1               	movwf	___llmod@divisor+3
  5913  01AB  3000               	movlw	0
  5914  01AC  00B0               	movwf	___llmod@divisor+2
  5915  01AD  3000               	movlw	0
  5916  01AE  00AF               	movwf	___llmod@divisor+1
  5917  01AF  300A               	movlw	10
  5918  01B0  00AE               	movwf	___llmod@divisor
  5919  01B1  0852               	movf	sprintf@prec+1,w
  5920  01B2  0085               	movwf	5
  5921  01B3  0851               	movf	sprintf@prec,w
  5922  01B4  0084               	movwf	4
  5923  01B5  3584               	lslf	4,f
  5924  01B6  0D85               	rlf	5,f
  5925  01B7  3584               	lslf	4,f
  5926  01B8  0D85               	rlf	5,f
  5927  01B9  3000               	movlw	low (_dpowers| (0+32768))
  5928  01BA  0784               	addwf	4,f
  5929  01BB  3090               	movlw	high (_dpowers| (0+32768))
  5930  01BC  3D85               	addwfc	5,f
  5931  01BD  3F00               	moviw [0]fsr0
  5932  01BE  00A0               	movwf	___lldiv@divisor
  5933  01BF  3F01               	moviw [1]fsr0
  5934  01C0  00A1               	movwf	___lldiv@divisor+1
  5935  01C1  3F02               	moviw [2]fsr0
  5936  01C2  00A2               	movwf	___lldiv@divisor+2
  5937  01C3  3F03               	moviw [3]fsr0
  5938  01C4  00A3               	movwf	___lldiv@divisor+3
  5939  01C5  084D               	movf	sprintf@val+3,w
  5940  01C6  00A7               	movwf	___lldiv@dividend+3
  5941  01C7  084C               	movf	sprintf@val+2,w
  5942  01C8  00A6               	movwf	___lldiv@dividend+2
  5943  01C9  084B               	movf	sprintf@val+1,w
  5944  01CA  00A5               	movwf	___lldiv@dividend+1
  5945  01CB  084A               	movf	sprintf@val,w
  5946  01CC  00A4               	movwf	___lldiv@dividend
  5947  01CD  318C  244F  3180   	fcall	___lldiv
  5948  01D0  0020               	movlb	0	; select bank0
  5949  01D1  0823               	movf	?___lldiv+3,w
  5950  01D2  00B5               	movwf	___llmod@dividend+3
  5951  01D3  0822               	movf	?___lldiv+2,w
  5952  01D4  00B4               	movwf	___llmod@dividend+2
  5953  01D5  0821               	movf	?___lldiv+1,w
  5954  01D6  00B3               	movwf	___llmod@dividend+1
  5955  01D7  0820               	movf	?___lldiv,w
  5956  01D8  00B2               	movwf	___llmod@dividend
  5957  01D9  318A  22EE  3180   	fcall	___llmod
  5958  01DC  0020               	movlb	0	; select bank0
  5959  01DD  082E               	movf	?___llmod,w
  5960  01DE  3E30               	addlw	48
  5961  01DF  00C2               	movwf	??_sprintf
  5962  01E0  0842               	movf	??_sprintf,w
  5963  01E1  00D3               	movwf	sprintf@c
  5964                           
  5965                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  5966  01E2  0853               	movf	sprintf@c,w
  5967  01E3  00C2               	movwf	??_sprintf
  5968  01E4  084E               	movf	sprintf@sp,w
  5969  01E5  0086               	movwf	6
  5970  01E6  3001               	movlw	1	; select bank2/3
  5971  01E7  0087               	movwf	7
  5972  01E8  0842               	movf	??_sprintf,w
  5973  01E9  0081               	movwf	1
  5974  01EA  3001               	movlw	1
  5975  01EB  00C2               	movwf	??_sprintf
  5976  01EC  0842               	movf	??_sprintf,w
  5977  01ED  07CE               	addwf	sprintf@sp,f
  5978  01EE                     l2513:	
  5979  01EE  30FF               	movlw	255
  5980  01EF  07D1               	addwf	sprintf@prec,f
  5981  01F0  30FF               	movlw	255
  5982  01F1  3DD2               	addwfc	sprintf@prec+1,f
  5983  01F2  0A51               	incf	sprintf@prec,w
  5984  01F3  1D03               	skipz
  5985  01F4  29A9               	goto	l2507
  5986  01F5  0A52               	incf	sprintf@prec+1,w
  5987  01F6  1903               	btfsc	3,2
  5988  01F7  2838               	goto	l2515
  5989  01F8  29A9               	goto	l2507
  5990  01F9                     l2517:	
  5991                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  5992                           
  5993                           
  5994                           ;doprnt.c: 1557: *sp = 0;
  5995  01F9  084E               	movf	sprintf@sp,w
  5996  01FA  0086               	movwf	6
  5997  01FB  3001               	movlw	1	; select bank2/3
  5998  01FC  0087               	movwf	7
  5999  01FD  0181               	clrf	1
  6000  01FE  0008               	return
  6001  01FF                     __end_of_sprintf:	
  6002                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  6003                           
  6004                           
  6005                           	psect	text16
  6006  177F                     __ptext16:	
  6007 ;; *************** function _isdigit *****************
  6008 ;; Defined at:
  6009 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  6010 ;; Parameters:    Size  Location     Type
  6011 ;;  c               1    wreg     unsigned char 
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;  c               1    1[BANK0 ] unsigned char 
  6014 ;; Return value:  Size  Location     Type
  6015 ;;		None               void
  6016 ;; Registers used:
  6017 ;;		wreg, status,2, status,0
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6024 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6026 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6027 ;;Total ram usage:        2 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    7
  6030 ;; This function calls:
  6031 ;;		Nothing
  6032 ;; This function is called by:
  6033 ;;		_sprintf
  6034 ;; This function uses a non-reentrant model
  6035 ;;
  6036                           
  6037                           
  6038                           ;psect for function _isdigit
  6039  177F                     _isdigit:	
  6040                           
  6041                           ;incstack = 0
  6042                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6043                           ;isdigit@c stored from wreg
  6044  177F  0020               	movlb	0	; select bank0
  6045  1780  00A1               	movwf	isdigit@c
  6046  1781  01A0               	clrf	_isdigit$1796
  6047  1782  303A               	movlw	58
  6048  1783  0221               	subwf	isdigit@c,w
  6049  1784  1803               	skipnc
  6050  1785  2F8C               	goto	l2271
  6051  1786  3030               	movlw	48
  6052  1787  0221               	subwf	isdigit@c,w
  6053  1788  1C03               	skipc
  6054  1789  2F8C               	goto	l2271
  6055  178A  01A0               	clrf	_isdigit$1796
  6056  178B  0AA0               	incf	_isdigit$1796,f
  6057  178C                     l2271:	
  6058  178C  0C20               	rrf	_isdigit$1796,w
  6059  178D  0008               	return
  6060  178E                     __end_of_isdigit:	
  6061                           
  6062                           	psect	text17
  6063  084D                     __ptext17:	
  6064 ;; *************** function ___wmul *****************
  6065 ;; Defined at:
  6066 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  6067 ;; Parameters:    Size  Location     Type
  6068 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6069 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6070 ;; Auto vars:     Size  Location     Type
  6071 ;;  product         2    4[BANK0 ] unsigned int 
  6072 ;; Return value:  Size  Location     Type
  6073 ;;                  2    0[BANK0 ] unsigned int 
  6074 ;; Registers used:
  6075 ;;		wreg, status,2, status,0
  6076 ;; Tracked objects:
  6077 ;;		On entry : 0/0
  6078 ;;		On exit  : 0/0
  6079 ;;		Unchanged: 0/0
  6080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6081 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6082 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6084 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;Total ram usage:        6 bytes
  6086 ;; Hardware stack levels used:    1
  6087 ;; Hardware stack levels required when called:    7
  6088 ;; This function calls:
  6089 ;;		Nothing
  6090 ;; This function is called by:
  6091 ;;		_sprintf
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           
  6096                           ;psect for function ___wmul
  6097  084D                     ___wmul:	
  6098                           
  6099                           ;incstack = 0
  6100                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6101  084D  0020               	movlb	0	; select bank0
  6102  084E  01A4               	clrf	___wmul@product
  6103  084F  01A5               	clrf	___wmul@product+1
  6104  0850                     l2277:	
  6105  0850  1C20               	btfss	___wmul@multiplier,0
  6106  0851  2856               	goto	l471
  6107  0852  0822               	movf	___wmul@multiplicand,w
  6108  0853  07A4               	addwf	___wmul@product,f
  6109  0854  0823               	movf	___wmul@multiplicand+1,w
  6110  0855  3DA5               	addwfc	___wmul@product+1,f
  6111  0856                     l471:	
  6112  0856  3001               	movlw	1
  6113  0857                     u1845:	
  6114  0857  35A2               	lslf	___wmul@multiplicand,f
  6115  0858  0DA3               	rlf	___wmul@multiplicand+1,f
  6116  0859  0B89               	decfsz	9,f
  6117  085A  2857               	goto	u1845
  6118  085B  3001               	movlw	1
  6119  085C                     u1855:	
  6120  085C  36A1               	lsrf	___wmul@multiplier+1,f
  6121  085D  0CA0               	rrf	___wmul@multiplier,f
  6122  085E  0B89               	decfsz	9,f
  6123  085F  285C               	goto	u1855
  6124  0860  0820               	movf	___wmul@multiplier,w
  6125  0861  0421               	iorwf	___wmul@multiplier+1,w
  6126  0862  1D03               	btfss	3,2
  6127  0863  2850               	goto	l2277
  6128  0864  0825               	movf	___wmul@product+1,w
  6129  0865  00A1               	movwf	?___wmul+1
  6130  0866  0824               	movf	___wmul@product,w
  6131  0867  00A0               	movwf	?___wmul
  6132  0868  0008               	return
  6133  0869                     __end_of___wmul:	
  6134                           
  6135                           	psect	text18
  6136  0AEE                     __ptext18:	
  6137 ;; *************** function ___llmod *****************
  6138 ;; Defined at:
  6139 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  6140 ;; Parameters:    Size  Location     Type
  6141 ;;  divisor         4   14[BANK0 ] unsigned long 
  6142 ;;  dividend        4   18[BANK0 ] unsigned long 
  6143 ;; Auto vars:     Size  Location     Type
  6144 ;;  counter         1   23[BANK0 ] unsigned char 
  6145 ;; Return value:  Size  Location     Type
  6146 ;;                  4   14[BANK0 ] unsigned long 
  6147 ;; Registers used:
  6148 ;;		wreg, status,2, status,0
  6149 ;; Tracked objects:
  6150 ;;		On entry : 0/0
  6151 ;;		On exit  : 0/0
  6152 ;;		Unchanged: 0/0
  6153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6154 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6155 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6156 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6157 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6158 ;;Total ram usage:       10 bytes
  6159 ;; Hardware stack levels used:    1
  6160 ;; Hardware stack levels required when called:    7
  6161 ;; This function calls:
  6162 ;;		Nothing
  6163 ;; This function is called by:
  6164 ;;		_sprintf
  6165 ;; This function uses a non-reentrant model
  6166 ;;
  6167                           
  6168                           
  6169                           ;psect for function ___llmod
  6170  0AEE                     ___llmod:	
  6171                           
  6172                           ;incstack = 0
  6173                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  6174  0AEE  0020               	movlb	0	; select bank0
  6175  0AEF  0831               	movf	___llmod@divisor+3,w
  6176  0AF0  0430               	iorwf	___llmod@divisor+2,w
  6177  0AF1  042F               	iorwf	___llmod@divisor+1,w
  6178  0AF2  042E               	iorwf	___llmod@divisor,w
  6179  0AF3  1903               	skipnz
  6180  0AF4  2B28               	goto	l2399
  6181  0AF5  01B7               	clrf	___llmod@counter
  6182  0AF6  0AB7               	incf	___llmod@counter,f
  6183  0AF7                     l2389:	
  6184  0AF7  1BB1               	btfsc	___llmod@divisor+3,7
  6185  0AF8  2B05               	goto	l2391
  6186  0AF9  3001               	movlw	1
  6187  0AFA                     u2185:	
  6188  0AFA  35AE               	lslf	___llmod@divisor,f
  6189  0AFB  0DAF               	rlf	___llmod@divisor+1,f
  6190  0AFC  0DB0               	rlf	___llmod@divisor+2,f
  6191  0AFD  0DB1               	rlf	___llmod@divisor+3,f
  6192  0AFE  0B89               	decfsz	9,f
  6193  0AFF  2AFA               	goto	u2185
  6194  0B00  3001               	movlw	1
  6195  0B01  00B6               	movwf	??___llmod
  6196  0B02  0836               	movf	??___llmod,w
  6197  0B03  07B7               	addwf	___llmod@counter,f
  6198  0B04  2AF7               	goto	l2389
  6199  0B05                     l2391:	
  6200  0B05  0831               	movf	___llmod@divisor+3,w
  6201  0B06  0235               	subwf	___llmod@dividend+3,w
  6202  0B07  1D03               	skipz
  6203  0B08  2B13               	goto	u2205
  6204  0B09  0830               	movf	___llmod@divisor+2,w
  6205  0B0A  0234               	subwf	___llmod@dividend+2,w
  6206  0B0B  1D03               	skipz
  6207  0B0C  2B13               	goto	u2205
  6208  0B0D  082F               	movf	___llmod@divisor+1,w
  6209  0B0E  0233               	subwf	___llmod@dividend+1,w
  6210  0B0F  1D03               	skipz
  6211  0B10  2B13               	goto	u2205
  6212  0B11  082E               	movf	___llmod@divisor,w
  6213  0B12  0232               	subwf	___llmod@dividend,w
  6214  0B13                     u2205:	
  6215  0B13  1C03               	skipc
  6216  0B14  2B1D               	goto	l2395
  6217  0B15  082E               	movf	___llmod@divisor,w
  6218  0B16  02B2               	subwf	___llmod@dividend,f
  6219  0B17  082F               	movf	___llmod@divisor+1,w
  6220  0B18  3BB3               	subwfb	___llmod@dividend+1,f
  6221  0B19  0830               	movf	___llmod@divisor+2,w
  6222  0B1A  3BB4               	subwfb	___llmod@dividend+2,f
  6223  0B1B  0831               	movf	___llmod@divisor+3,w
  6224  0B1C  3BB5               	subwfb	___llmod@dividend+3,f
  6225  0B1D                     l2395:	
  6226  0B1D  3001               	movlw	1
  6227  0B1E                     u2215:	
  6228  0B1E  36B1               	lsrf	___llmod@divisor+3,f
  6229  0B1F  0CB0               	rrf	___llmod@divisor+2,f
  6230  0B20  0CAF               	rrf	___llmod@divisor+1,f
  6231  0B21  0CAE               	rrf	___llmod@divisor,f
  6232  0B22  0B89               	decfsz	9,f
  6233  0B23  2B1E               	goto	u2215
  6234  0B24  3001               	movlw	1
  6235  0B25  02B7               	subwf	___llmod@counter,f
  6236  0B26  1D03               	btfss	3,2
  6237  0B27  2B05               	goto	l2391
  6238  0B28                     l2399:	
  6239  0B28  0835               	movf	___llmod@dividend+3,w
  6240  0B29  00B1               	movwf	?___llmod+3
  6241  0B2A  0834               	movf	___llmod@dividend+2,w
  6242  0B2B  00B0               	movwf	?___llmod+2
  6243  0B2C  0833               	movf	___llmod@dividend+1,w
  6244  0B2D  00AF               	movwf	?___llmod+1
  6245  0B2E  0832               	movf	___llmod@dividend,w
  6246  0B2F  00AE               	movwf	?___llmod
  6247  0B30  0008               	return
  6248  0B31                     __end_of___llmod:	
  6249                           
  6250                           	psect	text19
  6251  0C4F                     __ptext19:	
  6252 ;; *************** function ___lldiv *****************
  6253 ;; Defined at:
  6254 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  6255 ;; Parameters:    Size  Location     Type
  6256 ;;  divisor         4    0[BANK0 ] unsigned long 
  6257 ;;  dividend        4    4[BANK0 ] unsigned long 
  6258 ;; Auto vars:     Size  Location     Type
  6259 ;;  quotient        4    9[BANK0 ] unsigned long 
  6260 ;;  counter         1   13[BANK0 ] unsigned char 
  6261 ;; Return value:  Size  Location     Type
  6262 ;;                  4    0[BANK0 ] unsigned long 
  6263 ;; Registers used:
  6264 ;;		wreg, status,2, status,0
  6265 ;; Tracked objects:
  6266 ;;		On entry : 0/0
  6267 ;;		On exit  : 0/0
  6268 ;;		Unchanged: 0/0
  6269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6270 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6271 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6272 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6273 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6274 ;;Total ram usage:       14 bytes
  6275 ;; Hardware stack levels used:    1
  6276 ;; Hardware stack levels required when called:    7
  6277 ;; This function calls:
  6278 ;;		Nothing
  6279 ;; This function is called by:
  6280 ;;		_sprintf
  6281 ;; This function uses a non-reentrant model
  6282 ;;
  6283                           
  6284                           
  6285                           ;psect for function ___lldiv
  6286  0C4F                     ___lldiv:	
  6287                           
  6288                           ;incstack = 0
  6289                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6290  0C4F  3000               	movlw	0
  6291  0C50  0020               	movlb	0	; select bank0
  6292  0C51  00AC               	movwf	___lldiv@quotient+3
  6293  0C52  3000               	movlw	0
  6294  0C53  00AB               	movwf	___lldiv@quotient+2
  6295  0C54  3000               	movlw	0
  6296  0C55  00AA               	movwf	___lldiv@quotient+1
  6297  0C56  3000               	movlw	0
  6298  0C57  00A9               	movwf	___lldiv@quotient
  6299  0C58  0823               	movf	___lldiv@divisor+3,w
  6300  0C59  0422               	iorwf	___lldiv@divisor+2,w
  6301  0C5A  0421               	iorwf	___lldiv@divisor+1,w
  6302  0C5B  0420               	iorwf	___lldiv@divisor,w
  6303  0C5C  1903               	skipnz
  6304  0C5D  2C99               	goto	l2309
  6305  0C5E  01AD               	clrf	___lldiv@counter
  6306  0C5F  0AAD               	incf	___lldiv@counter,f
  6307  0C60                     l2295:	
  6308  0C60  1BA3               	btfsc	___lldiv@divisor+3,7
  6309  0C61  2C6E               	goto	l2297
  6310  0C62  3001               	movlw	1
  6311  0C63                     u1885:	
  6312  0C63  35A0               	lslf	___lldiv@divisor,f
  6313  0C64  0DA1               	rlf	___lldiv@divisor+1,f
  6314  0C65  0DA2               	rlf	___lldiv@divisor+2,f
  6315  0C66  0DA3               	rlf	___lldiv@divisor+3,f
  6316  0C67  0B89               	decfsz	9,f
  6317  0C68  2C63               	goto	u1885
  6318  0C69  3001               	movlw	1
  6319  0C6A  00A8               	movwf	??___lldiv
  6320  0C6B  0828               	movf	??___lldiv,w
  6321  0C6C  07AD               	addwf	___lldiv@counter,f
  6322  0C6D  2C60               	goto	l2295
  6323  0C6E                     l2297:	
  6324  0C6E  3001               	movlw	1
  6325  0C6F                     u1905:	
  6326  0C6F  35A9               	lslf	___lldiv@quotient,f
  6327  0C70  0DAA               	rlf	___lldiv@quotient+1,f
  6328  0C71  0DAB               	rlf	___lldiv@quotient+2,f
  6329  0C72  0DAC               	rlf	___lldiv@quotient+3,f
  6330  0C73  0B89               	decfsz	9,f
  6331  0C74  2C6F               	goto	u1905
  6332  0C75  0823               	movf	___lldiv@divisor+3,w
  6333  0C76  0227               	subwf	___lldiv@dividend+3,w
  6334  0C77  1D03               	skipz
  6335  0C78  2C83               	goto	u1915
  6336  0C79  0822               	movf	___lldiv@divisor+2,w
  6337  0C7A  0226               	subwf	___lldiv@dividend+2,w
  6338  0C7B  1D03               	skipz
  6339  0C7C  2C83               	goto	u1915
  6340  0C7D  0821               	movf	___lldiv@divisor+1,w
  6341  0C7E  0225               	subwf	___lldiv@dividend+1,w
  6342  0C7F  1D03               	skipz
  6343  0C80  2C83               	goto	u1915
  6344  0C81  0820               	movf	___lldiv@divisor,w
  6345  0C82  0224               	subwf	___lldiv@dividend,w
  6346  0C83                     u1915:	
  6347  0C83  1C03               	skipc
  6348  0C84  2C8E               	goto	l2305
  6349  0C85  0820               	movf	___lldiv@divisor,w
  6350  0C86  02A4               	subwf	___lldiv@dividend,f
  6351  0C87  0821               	movf	___lldiv@divisor+1,w
  6352  0C88  3BA5               	subwfb	___lldiv@dividend+1,f
  6353  0C89  0822               	movf	___lldiv@divisor+2,w
  6354  0C8A  3BA6               	subwfb	___lldiv@dividend+2,f
  6355  0C8B  0823               	movf	___lldiv@divisor+3,w
  6356  0C8C  3BA7               	subwfb	___lldiv@dividend+3,f
  6357  0C8D  1429               	bsf	___lldiv@quotient,0
  6358  0C8E                     l2305:	
  6359  0C8E  3001               	movlw	1
  6360  0C8F                     u1925:	
  6361  0C8F  36A3               	lsrf	___lldiv@divisor+3,f
  6362  0C90  0CA2               	rrf	___lldiv@divisor+2,f
  6363  0C91  0CA1               	rrf	___lldiv@divisor+1,f
  6364  0C92  0CA0               	rrf	___lldiv@divisor,f
  6365  0C93  0B89               	decfsz	9,f
  6366  0C94  2C8F               	goto	u1925
  6367  0C95  3001               	movlw	1
  6368  0C96  02AD               	subwf	___lldiv@counter,f
  6369  0C97  1D03               	btfss	3,2
  6370  0C98  2C6E               	goto	l2297
  6371  0C99                     l2309:	
  6372  0C99  082C               	movf	___lldiv@quotient+3,w
  6373  0C9A  00A3               	movwf	?___lldiv+3
  6374  0C9B  082B               	movf	___lldiv@quotient+2,w
  6375  0C9C  00A2               	movwf	?___lldiv+2
  6376  0C9D  082A               	movf	___lldiv@quotient+1,w
  6377  0C9E  00A1               	movwf	?___lldiv+1
  6378  0C9F  0829               	movf	___lldiv@quotient,w
  6379  0CA0  00A0               	movwf	?___lldiv
  6380  0CA1  0008               	return
  6381  0CA2                     __end_of___lldiv:	
  6382                           
  6383                           	psect	text20
  6384  09DD                     __ptext20:	
  6385 ;; *************** function ___lltoft *****************
  6386 ;; Defined at:
  6387 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  6388 ;; Parameters:    Size  Location     Type
  6389 ;;  c               4    8[BANK0 ] unsigned long 
  6390 ;; Auto vars:     Size  Location     Type
  6391 ;;  exp             1   13[BANK0 ] unsigned char 
  6392 ;; Return value:  Size  Location     Type
  6393 ;;                  3    8[BANK0 ] float 
  6394 ;; Registers used:
  6395 ;;		wreg, status,2, status,0, pclath, cstack
  6396 ;; Tracked objects:
  6397 ;;		On entry : 0/0
  6398 ;;		On exit  : 0/0
  6399 ;;		Unchanged: 0/0
  6400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6401 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6402 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6403 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6404 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6405 ;;Total ram usage:        6 bytes
  6406 ;; Hardware stack levels used:    1
  6407 ;; Hardware stack levels required when called:    8
  6408 ;; This function calls:
  6409 ;;		___ftpack
  6410 ;; This function is called by:
  6411 ;;		_ftoa
  6412 ;; This function uses a non-reentrant model
  6413 ;;
  6414                           
  6415                           
  6416                           ;psect for function ___lltoft
  6417  09DD                     ___lltoft:	
  6418                           
  6419                           ;incstack = 0
  6420                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6421  09DD  308E               	movlw	142
  6422  09DE  0020               	movlb	0	; select bank0
  6423  09DF  00AC               	movwf	??___lltoft
  6424  09E0  082C               	movf	??___lltoft,w
  6425  09E1  00AD               	movwf	___lltoft@exp
  6426  09E2                     l2667:	
  6427  09E2  30FF               	movlw	255
  6428  09E3  052B               	andwf	___lltoft@c+3,w
  6429  09E4  1903               	btfsc	3,2
  6430  09E5  29F2               	goto	l2669
  6431  09E6  3001               	movlw	1
  6432  09E7                     u2705:	
  6433  09E7  36AB               	lsrf	___lltoft@c+3,f
  6434  09E8  0CAA               	rrf	___lltoft@c+2,f
  6435  09E9  0CA9               	rrf	___lltoft@c+1,f
  6436  09EA  0CA8               	rrf	___lltoft@c,f
  6437  09EB  0B89               	decfsz	9,f
  6438  09EC  29E7               	goto	u2705
  6439  09ED  3001               	movlw	1
  6440  09EE  00AC               	movwf	??___lltoft
  6441  09EF  082C               	movf	??___lltoft,w
  6442  09F0  07AD               	addwf	___lltoft@exp,f
  6443  09F1  29E2               	goto	l2667
  6444  09F2                     l2669:	
  6445  09F2  0828               	movf	___lltoft@c,w
  6446  09F3  00A0               	movwf	___ftpack@arg
  6447  09F4  0829               	movf	___lltoft@c+1,w
  6448  09F5  00A1               	movwf	___ftpack@arg+1
  6449  09F6  082A               	movf	___lltoft@c+2,w
  6450  09F7  00A2               	movwf	___ftpack@arg+2
  6451  09F8  082D               	movf	___lltoft@exp,w
  6452  09F9  00AC               	movwf	??___lltoft
  6453  09FA  082C               	movf	??___lltoft,w
  6454  09FB  00A3               	movwf	___ftpack@exp
  6455  09FC  01A4               	clrf	___ftpack@sign
  6456  09FD  318C  24A2         	fcall	___ftpack
  6457  09FF  0020               	movlb	0	; select bank0
  6458  0A00  0820               	movf	?___ftpack,w
  6459  0A01  00A8               	movwf	?___lltoft
  6460  0A02  0821               	movf	?___ftpack+1,w
  6461  0A03  00A9               	movwf	?___lltoft+1
  6462  0A04  0822               	movf	?___ftpack+2,w
  6463  0A05  00AA               	movwf	?___lltoft+2
  6464  0A06  0008               	return
  6465  0A07                     __end_of___lltoft:	
  6466                           
  6467                           	psect	text21
  6468  0D6F                     __ptext21:	
  6469 ;; *************** function ___fttol *****************
  6470 ;; Defined at:
  6471 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  6472 ;; Parameters:    Size  Location     Type
  6473 ;;  f1              3   71[BANK0 ] float 
  6474 ;; Auto vars:     Size  Location     Type
  6475 ;;  lval            4    1[BANK1 ] unsigned long 
  6476 ;;  exp1            1    5[BANK1 ] unsigned char 
  6477 ;;  sign1           1    0[BANK1 ] unsigned char 
  6478 ;; Return value:  Size  Location     Type
  6479 ;;                  4   71[BANK0 ] long 
  6480 ;; Registers used:
  6481 ;;		wreg, status,2, status,0
  6482 ;; Tracked objects:
  6483 ;;		On entry : 0/0
  6484 ;;		On exit  : 0/0
  6485 ;;		Unchanged: 0/0
  6486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6487 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6488 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6489 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6490 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6491 ;;Total ram usage:       14 bytes
  6492 ;; Hardware stack levels used:    1
  6493 ;; Hardware stack levels required when called:    7
  6494 ;; This function calls:
  6495 ;;		Nothing
  6496 ;; This function is called by:
  6497 ;;		_ftoa
  6498 ;; This function uses a non-reentrant model
  6499 ;;
  6500                           
  6501                           
  6502                           ;psect for function ___fttol
  6503  0D6F                     ___fttol:	
  6504                           
  6505                           ;incstack = 0
  6506                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6507  0D6F  0020               	movlb	0	; select bank0
  6508  0D70  0867               	movf	___fttol@f1,w
  6509  0D71  00EB               	movwf	??___fttol
  6510  0D72  0868               	movf	___fttol@f1+1,w
  6511  0D73  00EC               	movwf	??___fttol+1
  6512  0D74  0869               	movf	___fttol@f1+2,w
  6513  0D75  00ED               	movwf	??___fttol+2
  6514  0D76  1003               	clrc
  6515  0D77  0D6C               	rlf	??___fttol+1,w
  6516  0D78  0D6D               	rlf	??___fttol+2,w
  6517  0D79  00EE               	movwf	??___fttol+3
  6518  0D7A  086E               	movf	??___fttol+3,w
  6519  0D7B  0021               	movlb	1	; select bank1
  6520  0D7C  00A5               	movwf	___fttol@exp1^(0+128)
  6521  0D7D  0825               	movf	___fttol@exp1^(0+128),w
  6522  0D7E  1D03               	btfss	3,2
  6523  0D7F  2D8A               	goto	l2627
  6524  0D80  3000               	movlw	0
  6525  0D81  0020               	movlb	0	; select bank0
  6526  0D82  00EA               	movwf	?___fttol+3
  6527  0D83  3000               	movlw	0
  6528  0D84  00E9               	movwf	?___fttol+2
  6529  0D85  3000               	movlw	0
  6530  0D86  00E8               	movwf	?___fttol+1
  6531  0D87  3000               	movlw	0
  6532  0D88  00E7               	movwf	?___fttol
  6533  0D89  0008               	return
  6534  0D8A                     l2627:	
  6535  0D8A  0020               	movlb	0	; select bank0
  6536  0D8B  0867               	movf	___fttol@f1,w
  6537  0D8C  00EB               	movwf	??___fttol
  6538  0D8D  0868               	movf	___fttol@f1+1,w
  6539  0D8E  00EC               	movwf	??___fttol+1
  6540  0D8F  0869               	movf	___fttol@f1+2,w
  6541  0D90  00ED               	movwf	??___fttol+2
  6542  0D91  3017               	movlw	23
  6543  0D92                     u2615:	
  6544  0D92  36ED               	lsrf	??___fttol+2,f
  6545  0D93  0CEC               	rrf	??___fttol+1,f
  6546  0D94  0CEB               	rrf	??___fttol,f
  6547  0D95  0B89               	decfsz	9,f
  6548  0D96  2D92               	goto	u2615
  6549  0D97  086B               	movf	??___fttol,w
  6550  0D98  00EE               	movwf	??___fttol+3
  6551  0D99  086E               	movf	??___fttol+3,w
  6552  0D9A  0021               	movlb	1	; select bank1
  6553  0D9B  00A0               	movwf	___fttol@sign1^(0+128)
  6554  0D9C  0020               	movlb	0	; select bank0
  6555  0D9D  17E8               	bsf	___fttol@f1+1,7
  6556  0D9E  30FF               	movlw	255
  6557  0D9F  05E7               	andwf	___fttol@f1,f
  6558  0DA0  30FF               	movlw	255
  6559  0DA1  05E8               	andwf	___fttol@f1+1,f
  6560  0DA2  3000               	movlw	0
  6561  0DA3  05E9               	andwf	___fttol@f1+2,f
  6562  0DA4  0867               	movf	___fttol@f1,w
  6563  0DA5  0021               	movlb	1	; select bank1
  6564  0DA6  00A1               	movwf	___fttol@lval^(0+128)
  6565  0DA7  0020               	movlb	0	; select bank0
  6566  0DA8  0868               	movf	___fttol@f1+1,w
  6567  0DA9  0021               	movlb	1	; select bank1
  6568  0DAA  00A2               	movwf	(___fttol@lval^(0+128)+1)
  6569  0DAB  0020               	movlb	0	; select bank0
  6570  0DAC  0869               	movf	___fttol@f1+2,w
  6571  0DAD  0021               	movlb	1	; select bank1
  6572  0DAE  00A3               	movwf	(___fttol@lval^(0+128)+2)
  6573  0DAF  01A4               	clrf	(___fttol@lval^(0+128)+3)
  6574  0DB0  308E               	movlw	142
  6575  0DB1  02A5               	subwf	___fttol@exp1^(0+128),f
  6576  0DB2  1FA5               	btfss	___fttol@exp1^(0+128),7
  6577  0DB3  2DD4               	goto	l2647
  6578  0DB4  0825               	movf	___fttol@exp1^(0+128),w
  6579  0DB5  3A80               	xorlw	128
  6580  0DB6  3E8F               	addlw	143
  6581  0DB7  1803               	skipnc
  6582  0DB8  2DC3               	goto	l2645
  6583  0DB9  3000               	movlw	0
  6584  0DBA  0020               	movlb	0	; select bank0
  6585  0DBB  00EA               	movwf	?___fttol+3
  6586  0DBC  3000               	movlw	0
  6587  0DBD  00E9               	movwf	?___fttol+2
  6588  0DBE  3000               	movlw	0
  6589  0DBF  00E8               	movwf	?___fttol+1
  6590  0DC0  3000               	movlw	0
  6591  0DC1  00E7               	movwf	?___fttol
  6592  0DC2  0008               	return
  6593  0DC3                     l2645:	
  6594  0DC3  3001               	movlw	1
  6595  0DC4                     u2645:	
  6596  0DC4  0021               	movlb	1	; select bank1
  6597  0DC5  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
  6598  0DC6  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
  6599  0DC7  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
  6600  0DC8  0CA1               	rrf	___fttol@lval^(0+128),f
  6601  0DC9  0B89               	decfsz	9,f
  6602  0DCA  2DC4               	goto	u2645
  6603  0DCB  3001               	movlw	1
  6604  0DCC  0020               	movlb	0	; select bank0
  6605  0DCD  00EB               	movwf	??___fttol
  6606  0DCE  086B               	movf	??___fttol,w
  6607  0DCF  0021               	movlb	1	; select bank1
  6608  0DD0  07A5               	addwf	___fttol@exp1^(0+128),f
  6609  0DD1  1903               	btfsc	3,2
  6610  0DD2  2DF0               	goto	l2655
  6611  0DD3  2DC3               	goto	l2645
  6612  0DD4                     l2647:	
  6613  0DD4  3018               	movlw	24
  6614  0DD5  0225               	subwf	___fttol@exp1^(0+128),w
  6615  0DD6  1C03               	skipc
  6616  0DD7  2DEC               	goto	l765
  6617  0DD8  3000               	movlw	0
  6618  0DD9  0020               	movlb	0	; select bank0
  6619  0DDA  00EA               	movwf	?___fttol+3
  6620  0DDB  3000               	movlw	0
  6621  0DDC  00E9               	movwf	?___fttol+2
  6622  0DDD  3000               	movlw	0
  6623  0DDE  00E8               	movwf	?___fttol+1
  6624  0DDF  3000               	movlw	0
  6625  0DE0  00E7               	movwf	?___fttol
  6626  0DE1  0008               	return
  6627  0DE2                     l2653:	
  6628  0DE2  3001               	movlw	1
  6629  0DE3                     u2675:	
  6630  0DE3  0021               	movlb	1	; select bank1
  6631  0DE4  35A1               	lslf	___fttol@lval^(0+128),f
  6632  0DE5  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
  6633  0DE6  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
  6634  0DE7  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
  6635  0DE8  0B89               	decfsz	9,f
  6636  0DE9  2DE3               	goto	u2675
  6637  0DEA  3001               	movlw	1
  6638  0DEB  02A5               	subwf	___fttol@exp1^(0+128),f
  6639  0DEC                     l765:	
  6640  0DEC  0021               	movlb	1	; select bank1
  6641  0DED  0825               	movf	___fttol@exp1^(0+128),w
  6642  0DEE  1D03               	btfss	3,2
  6643  0DEF  2DE2               	goto	l2653
  6644  0DF0                     l2655:	
  6645  0DF0  0820               	movf	___fttol@sign1^(0+128),w
  6646  0DF1  1903               	btfsc	3,2
  6647  0DF2  2DFE               	goto	l2659
  6648  0DF3  09A1               	comf	___fttol@lval^(0+128),f
  6649  0DF4  09A2               	comf	(___fttol@lval+1)^(0+128),f
  6650  0DF5  09A3               	comf	(___fttol@lval+2)^(0+128),f
  6651  0DF6  09A4               	comf	(___fttol@lval+3)^(0+128),f
  6652  0DF7  0AA1               	incf	___fttol@lval^(0+128),f
  6653  0DF8  1903               	skipnz
  6654  0DF9  0AA2               	incf	(___fttol@lval+1)^(0+128),f
  6655  0DFA  1903               	skipnz
  6656  0DFB  0AA3               	incf	(___fttol@lval+2)^(0+128),f
  6657  0DFC  1903               	skipnz
  6658  0DFD  0AA4               	incf	(___fttol@lval+3)^(0+128),f
  6659  0DFE                     l2659:	
  6660  0DFE  0824               	movf	(___fttol@lval+3)^(0+128),w
  6661  0DFF  0020               	movlb	0	; select bank0
  6662  0E00  00EA               	movwf	?___fttol+3
  6663  0E01  0021               	movlb	1	; select bank1
  6664  0E02  0823               	movf	(___fttol@lval+2)^(0+128),w
  6665  0E03  0020               	movlb	0	; select bank0
  6666  0E04  00E9               	movwf	?___fttol+2
  6667  0E05  0021               	movlb	1	; select bank1
  6668  0E06  0822               	movf	(___fttol@lval+1)^(0+128),w
  6669  0E07  0020               	movlb	0	; select bank0
  6670  0E08  00E8               	movwf	?___fttol+1
  6671  0E09  0021               	movlb	1	; select bank1
  6672  0E0A  0821               	movf	___fttol@lval^(0+128),w
  6673  0E0B  0020               	movlb	0	; select bank0
  6674  0E0C  00E7               	movwf	?___fttol
  6675  0E0D  0008               	return
  6676  0E0E                     __end_of___fttol:	
  6677                           
  6678                           	psect	text22
  6679  08A1                     __ptext22:	
  6680 ;; *************** function ___ftsub *****************
  6681 ;; Defined at:
  6682 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  6683 ;; Parameters:    Size  Location     Type
  6684 ;;  f2              3   27[BANK0 ] float 
  6685 ;;  f1              3   30[BANK0 ] float 
  6686 ;; Auto vars:     Size  Location     Type
  6687 ;;		None
  6688 ;; Return value:  Size  Location     Type
  6689 ;;                  3   27[BANK0 ] float 
  6690 ;; Registers used:
  6691 ;;		wreg, status,2, status,0, pclath, cstack
  6692 ;; Tracked objects:
  6693 ;;		On entry : 0/0
  6694 ;;		On exit  : 0/0
  6695 ;;		Unchanged: 0/0
  6696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6697 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6700 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6701 ;;Total ram usage:        6 bytes
  6702 ;; Hardware stack levels used:    1
  6703 ;; Hardware stack levels required when called:    9
  6704 ;; This function calls:
  6705 ;;		___ftadd
  6706 ;; This function is called by:
  6707 ;;		_ftoa
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711                           
  6712                           ;psect for function ___ftsub
  6713  08A1                     ___ftsub:	
  6714                           
  6715                           ;incstack = 0
  6716                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6717  08A1  0020               	movlb	0	; select bank0
  6718  08A2  083D               	movf	___ftsub@f2+2,w
  6719  08A3  043C               	iorwf	___ftsub@f2+1,w
  6720  08A4  043B               	iorwf	___ftsub@f2,w
  6721  08A5  1903               	skipnz
  6722  08A6  28A9               	goto	l2617
  6723  08A7  3080               	movlw	128
  6724  08A8  06BD               	xorwf	___ftsub@f2+2,f
  6725  08A9                     l2617:	
  6726  08A9  083E               	movf	___ftsub@f1,w
  6727  08AA  00AE               	movwf	___ftadd@f1
  6728  08AB  083F               	movf	___ftsub@f1+1,w
  6729  08AC  00AF               	movwf	___ftadd@f1+1
  6730  08AD  0840               	movf	___ftsub@f1+2,w
  6731  08AE  00B0               	movwf	___ftadd@f1+2
  6732  08AF  083B               	movf	___ftsub@f2,w
  6733  08B0  00B1               	movwf	___ftadd@f2
  6734  08B1  083C               	movf	___ftsub@f2+1,w
  6735  08B2  00B2               	movwf	___ftadd@f2+1
  6736  08B3  083D               	movf	___ftsub@f2+2,w
  6737  08B4  00B3               	movwf	___ftadd@f2+2
  6738  08B5  3184  2464         	fcall	___ftadd
  6739  08B7  0020               	movlb	0	; select bank0
  6740  08B8  082E               	movf	?___ftadd,w
  6741  08B9  00BB               	movwf	?___ftsub
  6742  08BA  082F               	movf	?___ftadd+1,w
  6743  08BB  00BC               	movwf	?___ftsub+1
  6744  08BC  0830               	movf	?___ftadd+2,w
  6745  08BD  00BD               	movwf	?___ftsub+2
  6746  08BE  0008               	return
  6747  08BF                     __end_of___ftsub:	
  6748                           
  6749                           	psect	text23
  6750  1769                     __ptext23:	
  6751 ;; *************** function ___ftneg *****************
  6752 ;; Defined at:
  6753 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  6754 ;; Parameters:    Size  Location     Type
  6755 ;;  f1              3   55[BANK0 ] float 
  6756 ;; Auto vars:     Size  Location     Type
  6757 ;;		None
  6758 ;; Return value:  Size  Location     Type
  6759 ;;                  3   55[BANK0 ] float 
  6760 ;; Registers used:
  6761 ;;		wreg
  6762 ;; Tracked objects:
  6763 ;;		On entry : 0/0
  6764 ;;		On exit  : 0/0
  6765 ;;		Unchanged: 0/0
  6766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6767 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6770 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6771 ;;Total ram usage:        3 bytes
  6772 ;; Hardware stack levels used:    1
  6773 ;; Hardware stack levels required when called:    7
  6774 ;; This function calls:
  6775 ;;		Nothing
  6776 ;; This function is called by:
  6777 ;;		_loop
  6778 ;;		_ftoa
  6779 ;; This function uses a non-reentrant model
  6780 ;;
  6781                           
  6782                           
  6783                           ;psect for function ___ftneg
  6784  1769                     ___ftneg:	
  6785                           
  6786                           ;incstack = 0
  6787                           ; Regs used in ___ftneg: [wreg]
  6788  1769  0020               	movlb	0	; select bank0
  6789  176A  0859               	movf	___ftneg@f1+2,w
  6790  176B  0458               	iorwf	___ftneg@f1+1,w
  6791  176C  0457               	iorwf	___ftneg@f1,w
  6792  176D  1903               	skipnz
  6793  176E  0008               	return
  6794  176F  3080               	movlw	128
  6795  1770  06D9               	xorwf	___ftneg@f1+2,f
  6796  1771  0008               	return
  6797  1772                     __end_of___ftneg:	
  6798                           
  6799                           	psect	text24
  6800  0714                     __ptext24:	
  6801 ;; *************** function ___ftmul *****************
  6802 ;; Defined at:
  6803 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  6804 ;; Parameters:    Size  Location     Type
  6805 ;;  f1              3   55[BANK0 ] float 
  6806 ;;  f2              3   58[BANK0 ] float 
  6807 ;; Auto vars:     Size  Location     Type
  6808 ;;  f3_as_produc    3   66[BANK0 ] unsigned um
  6809 ;;  sign            1   70[BANK0 ] unsigned char 
  6810 ;;  cntr            1   69[BANK0 ] unsigned char 
  6811 ;;  exp             1   65[BANK0 ] unsigned char 
  6812 ;; Return value:  Size  Location     Type
  6813 ;;                  3   55[BANK0 ] float 
  6814 ;; Registers used:
  6815 ;;		wreg, status,2, status,0, pclath, cstack
  6816 ;; Tracked objects:
  6817 ;;		On entry : 0/0
  6818 ;;		On exit  : 0/0
  6819 ;;		Unchanged: 0/0
  6820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6821 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6822 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6823 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6824 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6825 ;;Total ram usage:       16 bytes
  6826 ;; Hardware stack levels used:    1
  6827 ;; Hardware stack levels required when called:    8
  6828 ;; This function calls:
  6829 ;;		___ftpack
  6830 ;; This function is called by:
  6831 ;;		_loop
  6832 ;;		_ftoa
  6833 ;; This function uses a non-reentrant model
  6834 ;;
  6835                           
  6836                           
  6837                           ;psect for function ___ftmul
  6838  0714                     ___ftmul:	
  6839                           
  6840                           ;incstack = 0
  6841                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6842  0714  0020               	movlb	0	; select bank0
  6843  0715  0857               	movf	___ftmul@f1,w
  6844  0716  00DD               	movwf	??___ftmul
  6845  0717  0858               	movf	___ftmul@f1+1,w
  6846  0718  00DE               	movwf	??___ftmul+1
  6847  0719  0859               	movf	___ftmul@f1+2,w
  6848  071A  00DF               	movwf	??___ftmul+2
  6849  071B  1003               	clrc
  6850  071C  0D5E               	rlf	??___ftmul+1,w
  6851  071D  0D5F               	rlf	??___ftmul+2,w
  6852  071E  00E0               	movwf	??___ftmul+3
  6853  071F  0860               	movf	??___ftmul+3,w
  6854  0720  00E1               	movwf	___ftmul@exp
  6855  0721  0861               	movf	___ftmul@exp,w
  6856  0722  1D03               	btfss	3,2
  6857  0723  2F2B               	goto	l2561
  6858  0724  3000               	movlw	0
  6859  0725  00D7               	movwf	?___ftmul
  6860  0726  3000               	movlw	0
  6861  0727  00D8               	movwf	?___ftmul+1
  6862  0728  3000               	movlw	0
  6863  0729  00D9               	movwf	?___ftmul+2
  6864  072A  0008               	return
  6865  072B                     l2561:	
  6866  072B  085A               	movf	___ftmul@f2,w
  6867  072C  00DD               	movwf	??___ftmul
  6868  072D  085B               	movf	___ftmul@f2+1,w
  6869  072E  00DE               	movwf	??___ftmul+1
  6870  072F  085C               	movf	___ftmul@f2+2,w
  6871  0730  00DF               	movwf	??___ftmul+2
  6872  0731  1003               	clrc
  6873  0732  0D5E               	rlf	??___ftmul+1,w
  6874  0733  0D5F               	rlf	??___ftmul+2,w
  6875  0734  00E0               	movwf	??___ftmul+3
  6876  0735  0860               	movf	??___ftmul+3,w
  6877  0736  00E6               	movwf	___ftmul@sign
  6878  0737  0866               	movf	___ftmul@sign,w
  6879  0738  1D03               	btfss	3,2
  6880  0739  2F41               	goto	l2567
  6881  073A  3000               	movlw	0
  6882  073B  00D7               	movwf	?___ftmul
  6883  073C  3000               	movlw	0
  6884  073D  00D8               	movwf	?___ftmul+1
  6885  073E  3000               	movlw	0
  6886  073F  00D9               	movwf	?___ftmul+2
  6887  0740  0008               	return
  6888  0741                     l2567:	
  6889  0741  0866               	movf	___ftmul@sign,w
  6890  0742  3E7B               	addlw	123
  6891  0743  00DD               	movwf	??___ftmul
  6892  0744  085D               	movf	??___ftmul,w
  6893  0745  07E1               	addwf	___ftmul@exp,f
  6894  0746  0857               	movf	___ftmul@f1,w
  6895  0747  00DD               	movwf	??___ftmul
  6896  0748  0858               	movf	___ftmul@f1+1,w
  6897  0749  00DE               	movwf	??___ftmul+1
  6898  074A  0859               	movf	___ftmul@f1+2,w
  6899  074B  00DF               	movwf	??___ftmul+2
  6900  074C  3010               	movlw	16
  6901  074D                     u2485:	
  6902  074D  36DF               	lsrf	??___ftmul+2,f
  6903  074E  0CDE               	rrf	??___ftmul+1,f
  6904  074F  0CDD               	rrf	??___ftmul,f
  6905  0750  0B89               	decfsz	9,f
  6906  0751  2F4D               	goto	u2485
  6907  0752  085D               	movf	??___ftmul,w
  6908  0753  00E0               	movwf	??___ftmul+3
  6909  0754  0860               	movf	??___ftmul+3,w
  6910  0755  00E6               	movwf	___ftmul@sign
  6911  0756  085A               	movf	___ftmul@f2,w
  6912  0757  00DD               	movwf	??___ftmul
  6913  0758  085B               	movf	___ftmul@f2+1,w
  6914  0759  00DE               	movwf	??___ftmul+1
  6915  075A  085C               	movf	___ftmul@f2+2,w
  6916  075B  00DF               	movwf	??___ftmul+2
  6917  075C  3010               	movlw	16
  6918  075D                     u2495:	
  6919  075D  36DF               	lsrf	??___ftmul+2,f
  6920  075E  0CDE               	rrf	??___ftmul+1,f
  6921  075F  0CDD               	rrf	??___ftmul,f
  6922  0760  0B89               	decfsz	9,f
  6923  0761  2F5D               	goto	u2495
  6924  0762  085D               	movf	??___ftmul,w
  6925  0763  00E0               	movwf	??___ftmul+3
  6926  0764  0860               	movf	??___ftmul+3,w
  6927  0765  06E6               	xorwf	___ftmul@sign,f
  6928  0766  3080               	movlw	128
  6929  0767  00DD               	movwf	??___ftmul
  6930  0768  085D               	movf	??___ftmul,w
  6931  0769  05E6               	andwf	___ftmul@sign,f
  6932  076A  17D8               	bsf	___ftmul@f1+1,7
  6933  076B  17DB               	bsf	___ftmul@f2+1,7
  6934  076C  30FF               	movlw	255
  6935  076D  05DA               	andwf	___ftmul@f2,f
  6936  076E  30FF               	movlw	255
  6937  076F  05DB               	andwf	___ftmul@f2+1,f
  6938  0770  3000               	movlw	0
  6939  0771  05DC               	andwf	___ftmul@f2+2,f
  6940  0772  3000               	movlw	0
  6941  0773  00E2               	movwf	___ftmul@f3_as_product
  6942  0774  3000               	movlw	0
  6943  0775  00E3               	movwf	___ftmul@f3_as_product+1
  6944  0776  3000               	movlw	0
  6945  0777  00E4               	movwf	___ftmul@f3_as_product+2
  6946  0778  3007               	movlw	7
  6947  0779  00DD               	movwf	??___ftmul
  6948  077A  085D               	movf	??___ftmul,w
  6949  077B  00E5               	movwf	___ftmul@cntr
  6950  077C                     l2579:	
  6951  077C  1C57               	btfss	___ftmul@f1,0
  6952  077D  2F84               	goto	l2583
  6953  077E  085A               	movf	___ftmul@f2,w
  6954  077F  07E2               	addwf	___ftmul@f3_as_product,f
  6955  0780  085B               	movf	___ftmul@f2+1,w
  6956  0781  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  6957  0782  085C               	movf	___ftmul@f2+2,w
  6958  0783  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  6959  0784                     l2583:	
  6960  0784  3001               	movlw	1
  6961  0785                     u2515:	
  6962  0785  36D9               	lsrf	___ftmul@f1+2,f
  6963  0786  0CD8               	rrf	___ftmul@f1+1,f
  6964  0787  0CD7               	rrf	___ftmul@f1,f
  6965  0788  0B89               	decfsz	9,f
  6966  0789  2F85               	goto	u2515
  6967  078A  3001               	movlw	1
  6968  078B                     u2525:	
  6969  078B  35DA               	lslf	___ftmul@f2,f
  6970  078C  0DDB               	rlf	___ftmul@f2+1,f
  6971  078D  0DDC               	rlf	___ftmul@f2+2,f
  6972  078E  0B89               	decfsz	9,f
  6973  078F  2F8B               	goto	u2525
  6974  0790  3001               	movlw	1
  6975  0791  02E5               	subwf	___ftmul@cntr,f
  6976  0792  1D03               	btfss	3,2
  6977  0793  2F7C               	goto	l2579
  6978  0794  3009               	movlw	9
  6979  0795  00DD               	movwf	??___ftmul
  6980  0796  085D               	movf	??___ftmul,w
  6981  0797  00E5               	movwf	___ftmul@cntr
  6982  0798                     l2591:	
  6983  0798  1C57               	btfss	___ftmul@f1,0
  6984  0799  2FA0               	goto	l2595
  6985  079A  085A               	movf	___ftmul@f2,w
  6986  079B  07E2               	addwf	___ftmul@f3_as_product,f
  6987  079C  085B               	movf	___ftmul@f2+1,w
  6988  079D  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  6989  079E  085C               	movf	___ftmul@f2+2,w
  6990  079F  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  6991  07A0                     l2595:	
  6992  07A0  3001               	movlw	1
  6993  07A1                     u2555:	
  6994  07A1  36D9               	lsrf	___ftmul@f1+2,f
  6995  07A2  0CD8               	rrf	___ftmul@f1+1,f
  6996  07A3  0CD7               	rrf	___ftmul@f1,f
  6997  07A4  0B89               	decfsz	9,f
  6998  07A5  2FA1               	goto	u2555
  6999  07A6  3001               	movlw	1
  7000  07A7                     u2565:	
  7001  07A7  36E4               	lsrf	___ftmul@f3_as_product+2,f
  7002  07A8  0CE3               	rrf	___ftmul@f3_as_product+1,f
  7003  07A9  0CE2               	rrf	___ftmul@f3_as_product,f
  7004  07AA  0B89               	decfsz	9,f
  7005  07AB  2FA7               	goto	u2565
  7006  07AC  3001               	movlw	1
  7007  07AD  02E5               	subwf	___ftmul@cntr,f
  7008  07AE  1D03               	btfss	3,2
  7009  07AF  2F98               	goto	l2591
  7010  07B0  0862               	movf	___ftmul@f3_as_product,w
  7011  07B1  00A0               	movwf	___ftpack@arg
  7012  07B2  0863               	movf	___ftmul@f3_as_product+1,w
  7013  07B3  00A1               	movwf	___ftpack@arg+1
  7014  07B4  0864               	movf	___ftmul@f3_as_product+2,w
  7015  07B5  00A2               	movwf	___ftpack@arg+2
  7016  07B6  0861               	movf	___ftmul@exp,w
  7017  07B7  00DD               	movwf	??___ftmul
  7018  07B8  085D               	movf	??___ftmul,w
  7019  07B9  00A3               	movwf	___ftpack@exp
  7020  07BA  0866               	movf	___ftmul@sign,w
  7021  07BB  00DE               	movwf	??___ftmul+1
  7022  07BC  085E               	movf	??___ftmul+1,w
  7023  07BD  00A4               	movwf	___ftpack@sign
  7024  07BE  318C  24A2         	fcall	___ftpack
  7025  07C0  0020               	movlb	0	; select bank0
  7026  07C1  0820               	movf	?___ftpack,w
  7027  07C2  00D7               	movwf	?___ftmul
  7028  07C3  0821               	movf	?___ftpack+1,w
  7029  07C4  00D8               	movwf	?___ftmul+1
  7030  07C5  0822               	movf	?___ftpack+2,w
  7031  07C6  00D9               	movwf	?___ftmul+2
  7032  07C7  0008               	return
  7033  07C8                     __end_of___ftmul:	
  7034                           
  7035                           	psect	text25
  7036  0A34                     __ptext25:	
  7037 ;; *************** function ___ftge *****************
  7038 ;; Defined at:
  7039 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  7040 ;; Parameters:    Size  Location     Type
  7041 ;;  ff1             3    0[BANK0 ] float 
  7042 ;;  ff2             3    3[BANK0 ] float 
  7043 ;; Auto vars:     Size  Location     Type
  7044 ;;		None
  7045 ;; Return value:  Size  Location     Type
  7046 ;;		None               void
  7047 ;; Registers used:
  7048 ;;		wreg, status,2, status,0
  7049 ;; Tracked objects:
  7050 ;;		On entry : 0/0
  7051 ;;		On exit  : 0/0
  7052 ;;		Unchanged: 0/0
  7053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7054 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7056 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7057 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7058 ;;Total ram usage:        9 bytes
  7059 ;; Hardware stack levels used:    1
  7060 ;; Hardware stack levels required when called:    7
  7061 ;; This function calls:
  7062 ;;		Nothing
  7063 ;; This function is called by:
  7064 ;;		_ftoa
  7065 ;; This function uses a non-reentrant model
  7066 ;;
  7067                           
  7068                           
  7069                           ;psect for function ___ftge
  7070  0A34                     ___ftge:	
  7071                           
  7072                           ;incstack = 0
  7073                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7074  0A34  0020               	movlb	0	; select bank0
  7075  0A35  1FA2               	btfss	___ftge@ff1+2,7
  7076  0A36  2A4B               	goto	l2539
  7077  0A37  0920               	comf	___ftge@ff1,w
  7078  0A38  00A6               	movwf	??___ftge
  7079  0A39  0921               	comf	___ftge@ff1+1,w
  7080  0A3A  00A7               	movwf	??___ftge+1
  7081  0A3B  0922               	comf	___ftge@ff1+2,w
  7082  0A3C  00A8               	movwf	??___ftge+2
  7083  0A3D  0AA6               	incf	??___ftge,f
  7084  0A3E  1903               	skipnz
  7085  0A3F  0AA7               	incf	??___ftge+1,f
  7086  0A40  1903               	skipnz
  7087  0A41  0AA8               	incf	??___ftge+2,f
  7088  0A42  3000               	movlw	0
  7089  0A43  0726               	addwf	??___ftge,w
  7090  0A44  00A0               	movwf	___ftge@ff1
  7091  0A45  3000               	movlw	0
  7092  0A46  3D27               	addwfc	??___ftge+1,w
  7093  0A47  00A1               	movwf	___ftge@ff1+1
  7094  0A48  3080               	movlw	128
  7095  0A49  3D28               	addwfc	??___ftge+2,w
  7096  0A4A  00A2               	movwf	___ftge@ff1+2
  7097  0A4B                     l2539:	
  7098  0A4B  1FA5               	btfss	___ftge@ff2+2,7
  7099  0A4C  2A61               	goto	l2543
  7100  0A4D  0923               	comf	___ftge@ff2,w
  7101  0A4E  00A6               	movwf	??___ftge
  7102  0A4F  0924               	comf	___ftge@ff2+1,w
  7103  0A50  00A7               	movwf	??___ftge+1
  7104  0A51  0925               	comf	___ftge@ff2+2,w
  7105  0A52  00A8               	movwf	??___ftge+2
  7106  0A53  0AA6               	incf	??___ftge,f
  7107  0A54  1903               	skipnz
  7108  0A55  0AA7               	incf	??___ftge+1,f
  7109  0A56  1903               	skipnz
  7110  0A57  0AA8               	incf	??___ftge+2,f
  7111  0A58  3000               	movlw	0
  7112  0A59  0726               	addwf	??___ftge,w
  7113  0A5A  00A3               	movwf	___ftge@ff2
  7114  0A5B  3000               	movlw	0
  7115  0A5C  3D27               	addwfc	??___ftge+1,w
  7116  0A5D  00A4               	movwf	___ftge@ff2+1
  7117  0A5E  3080               	movlw	128
  7118  0A5F  3D28               	addwfc	??___ftge+2,w
  7119  0A60  00A5               	movwf	___ftge@ff2+2
  7120  0A61                     l2543:	
  7121  0A61  3080               	movlw	128
  7122  0A62  06A2               	xorwf	___ftge@ff1+2,f
  7123  0A63  3080               	movlw	128
  7124  0A64  06A5               	xorwf	___ftge@ff2+2,f
  7125  0A65  0825               	movf	___ftge@ff2+2,w
  7126  0A66  0222               	subwf	___ftge@ff1+2,w
  7127  0A67  1D03               	skipz
  7128  0A68  0008               	return
  7129  0A69  0824               	movf	___ftge@ff2+1,w
  7130  0A6A  0221               	subwf	___ftge@ff1+1,w
  7131  0A6B  1D03               	skipz
  7132  0A6C  0008               	return
  7133  0A6D  0823               	movf	___ftge@ff2,w
  7134  0A6E  0220               	subwf	___ftge@ff1,w
  7135  0A6F  0008               	return
  7136  0A70                     __end_of___ftge:	
  7137                           
  7138                           	psect	text26
  7139  064C                     __ptext26:	
  7140 ;; *************** function _nrf24l01SendPacket *****************
  7141 ;; Defined at:
  7142 ;;		line 170 in file "nrf24l01.c"
  7143 ;; Parameters:    Size  Location     Type
  7144 ;;  Packet          2    7[BANK0 ] PTR struct .
  7145 ;;		 -> main@packet(33), loop@packet(33), 
  7146 ;; Auto vars:     Size  Location     Type
  7147 ;;  i               1   13[BANK0 ] unsigned char 
  7148 ;; Return value:  Size  Location     Type
  7149 ;;                  1    wreg      void 
  7150 ;; Registers used:
  7151 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7152 ;; Tracked objects:
  7153 ;;		On entry : 0/0
  7154 ;;		On exit  : 0/0
  7155 ;;		Unchanged: 0/0
  7156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7157 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7158 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7159 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7160 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7161 ;;Total ram usage:        7 bytes
  7162 ;; Hardware stack levels used:    1
  7163 ;; Hardware stack levels required when called:   11
  7164 ;; This function calls:
  7165 ;;		_enableInterrupts
  7166 ;;		_nrf24l01CEHigh
  7167 ;;		_nrf24l01CELow
  7168 ;;		_nrf24l01ChangeTXPower
  7169 ;;		_nrf24l01SPIEnd
  7170 ;;		_nrf24l01SPISend
  7171 ;;		_nrf24l01SPIStart
  7172 ;;		_nrf24l01SetRXMode
  7173 ;;		_strlen
  7174 ;; This function is called by:
  7175 ;;		_loop
  7176 ;;		_main
  7177 ;;		_nrf24l01SendACK
  7178 ;; This function uses a non-reentrant model
  7179 ;;
  7180                           
  7181                           
  7182                           ;psect for function _nrf24l01SendPacket
  7183  064C                     _nrf24l01SendPacket:	
  7184                           
  7185                           ;nrf24l01.c: 172: TXPacket = Packet;
  7186                           
  7187                           ;incstack = 0
  7188                           ; Regs used in _nrf24l01SendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7189  064C  0020               	movlb	0	; select bank0
  7190  064D  0828               	movf	nrf24l01SendPacket@Packet+1,w
  7191  064E  0021               	movlb	1	; select bank1
  7192  064F  00EC               	movwf	(_TXPacket+1)^(0+128)
  7193  0650  0020               	movlb	0	; select bank0
  7194  0651  0827               	movf	nrf24l01SendPacket@Packet,w
  7195  0652  0021               	movlb	1	; select bank1
  7196  0653  00EB               	movwf	_TXPacket^(0+128)
  7197  0654                     l289:	
  7198                           ;nrf24l01.c: 175: unsigned char i;;nrf24l01.c: 179: RESEND:
  7199                           
  7200                           
  7201                           ;nrf24l01.c: 182: i = 0xFF;
  7202  0654  30FF               	movlw	255
  7203  0655  0020               	movlb	0	; select bank0
  7204  0656  00A9               	movwf	??_nrf24l01SendPacket
  7205  0657  0829               	movf	??_nrf24l01SendPacket,w
  7206  0658  00AD               	movwf	nrf24l01SendPacket@i
  7207  0659                     l2979:	
  7208                           ;nrf24l01.c: 183: while (nrf24l01.TXBusy){
  7209                           
  7210  0659  1C7D               	btfss	_nrf24l01,0	;volatile
  7211  065A  2E65               	goto	l293
  7212                           
  7213                           ;nrf24l01.c: 184: if (!--i) {
  7214  065B  3001               	movlw	1
  7215  065C  0020               	movlb	0	; select bank0
  7216  065D  02AD               	subwf	nrf24l01SendPacket@i,f
  7217  065E  1903               	btfsc	3,2
  7218  065F  2E54               	goto	l289
  7219                           
  7220                           ;nrf24l01.c: 186: };nrf24l01.c: 187: _delay((unsigned long)((100)*(32000000/4000000.0)))
      +                          ;
  7221                           
  7222                           ;nrf24l01.c: 185: goto RESEND;
  7223  0660  30A0               	movlw	160
  7224  0661                     u3387:	
  7225  0661  3200               	nop2
  7226  0662  0B89               	decfsz	9,f
  7227  0663  2E61               	goto	u3387
  7228  0664  2E59               	goto	l2979
  7229  0665                     l293:	
  7230                           
  7231                           ;nrf24l01.c: 188: };nrf24l01.c: 191: nrf24l01.TXBusy = 1;
  7232  0665  147D               	bsf	_nrf24l01,0	;volatile
  7233                           
  7234                           ;nrf24l01.c: 194: enableInterrupts(0);
  7235  0666  3000               	movlw	0
  7236  0667  3197  2759  3186   	fcall	_enableInterrupts
  7237                           
  7238                           ;nrf24l01.c: 197: nrf24l01SetRXMode(0);
  7239  066A  3000               	movlw	0
  7240  066B  318B  2331  3186   	fcall	_nrf24l01SetRXMode
  7241                           
  7242                           ;nrf24l01.c: 200: nrf24l01SPIStart();
  7243  066E  3197  2761  3186   	fcall	_nrf24l01SPIStart
  7244                           
  7245                           ;nrf24l01.c: 203: nrf24l01SPISend((unsigned) 0b10110000);
  7246  0671  30B0               	movlw	176
  7247  0672  3197  2772  3186   	fcall	_nrf24l01SPISend
  7248                           
  7249                           ;nrf24l01.c: 205: nrf24l01SPISend(TXPacket->packetData.byte);
  7250  0675  0021               	movlb	1	; select bank1
  7251  0676  086B               	movf	_TXPacket^(0+128),w
  7252  0677  0086               	movwf	6
  7253  0678  086C               	movf	(_TXPacket+1)^(0+128),w
  7254  0679  0087               	movwf	7
  7255  067A  0801               	movf	1,w
  7256  067B  3197  2772  3186   	fcall	_nrf24l01SPISend
  7257                           
  7258                           ;nrf24l01.c: 208: for (i = 0; (i < strlen(TXPacket->Message)) && (i < sizeof(TXPacket->M
      +                          essage)); i++){
  7259  067E  0020               	movlb	0	; select bank0
  7260  067F  01AD               	clrf	nrf24l01SendPacket@i
  7261  0680  2E9A               	goto	l2991
  7262  0681                     l2987:	
  7263                           
  7264                           ;nrf24l01.c: 209: nrf24l01SPISend(TXPacket->Message[i]);
  7265  0681  082D               	movf	nrf24l01SendPacket@i,w
  7266  0682  3E01               	addlw	1
  7267  0683  00A9               	movwf	??_nrf24l01SendPacket
  7268  0684  3000               	movlw	0
  7269  0685  1803               	skipnc
  7270  0686  3001               	movlw	1
  7271  0687  00AA               	movwf	??_nrf24l01SendPacket+1
  7272  0688  0829               	movf	??_nrf24l01SendPacket,w
  7273  0689  0021               	movlb	1	; select bank1
  7274  068A  076B               	addwf	_TXPacket^(0+128),w
  7275  068B  0086               	movwf	6
  7276  068C  0020               	movlb	0	; select bank0
  7277  068D  082A               	movf	??_nrf24l01SendPacket+1,w
  7278  068E  0021               	movlb	1	; select bank1
  7279  068F  3D6C               	addwfc	(_TXPacket+1)^(0+128),w
  7280  0690  0087               	movwf	7
  7281  0691  0801               	movf	1,w
  7282  0692  3197  2772  3186   	fcall	_nrf24l01SPISend
  7283  0695  3001               	movlw	1
  7284  0696  0020               	movlb	0	; select bank0
  7285  0697  00A9               	movwf	??_nrf24l01SendPacket
  7286  0698  0829               	movf	??_nrf24l01SendPacket,w
  7287  0699  07AD               	addwf	nrf24l01SendPacket@i,f
  7288  069A                     l2991:	
  7289  069A  0021               	movlb	1	; select bank1
  7290  069B  086B               	movf	_TXPacket^(0+128),w
  7291  069C  3E01               	addlw	1
  7292  069D  0020               	movlb	0	; select bank0
  7293  069E  00A9               	movwf	??_nrf24l01SendPacket
  7294  069F  3000               	movlw	0
  7295  06A0  0021               	movlb	1	; select bank1
  7296  06A1  3D6C               	addwfc	(_TXPacket+1)^(0+128),w
  7297  06A2  0020               	movlb	0	; select bank0
  7298  06A3  00AA               	movwf	??_nrf24l01SendPacket+1
  7299  06A4  0829               	movf	??_nrf24l01SendPacket,w
  7300  06A5  00A0               	movwf	strlen@s
  7301  06A6  082A               	movf	??_nrf24l01SendPacket+1,w
  7302  06A7  00A1               	movwf	strlen@s+1
  7303  06A8  3188  20BF  3186   	fcall	_strlen
  7304  06AB  0020               	movlb	0	; select bank0
  7305  06AC  082D               	movf	nrf24l01SendPacket@i,w
  7306  06AD  00AB               	movwf	??_nrf24l01SendPacket+2
  7307  06AE  01AC               	clrf	??_nrf24l01SendPacket+3
  7308  06AF  0821               	movf	?_strlen+1,w
  7309  06B0  022C               	subwf	??_nrf24l01SendPacket+3,w
  7310  06B1  1D03               	skipz
  7311  06B2  2EB5               	goto	u3065
  7312  06B3  0820               	movf	?_strlen,w
  7313  06B4  022B               	subwf	??_nrf24l01SendPacket+2,w
  7314  06B5                     u3065:	
  7315  06B5  1803               	skipnc
  7316  06B6  2EBB               	goto	l2995
  7317  06B7  3020               	movlw	32
  7318  06B8  022D               	subwf	nrf24l01SendPacket@i,w
  7319  06B9  1C03               	skipc
  7320  06BA  2E81               	goto	l2987
  7321  06BB                     l2995:	
  7322                           
  7323                           ;nrf24l01.c: 210: };nrf24l01.c: 213: nrf24l01SPIEnd();
  7324  06BB  3197  2752  3186   	fcall	_nrf24l01SPIEnd
  7325                           
  7326                           ;nrf24l01.c: 216: nrf24l01CEHigh();
  7327  06BE  3197  2740  3186   	fcall	_nrf24l01CEHigh
  7328                           
  7329                           ;nrf24l01.c: 217: _delay((unsigned long)((20)*(32000000/4000000.0)));
  7330  06C1  3035               	movlw	53
  7331  06C2                     u3397:	
  7332  06C2  0B89               	decfsz	9,f
  7333  06C3  2EC2               	goto	u3397
  7334  06C4  0000               	nop
  7335                           
  7336                           ;nrf24l01.c: 218: nrf24l01CELow();
  7337  06C5  3197  2743  3186   	fcall	_nrf24l01CELow
  7338                           
  7339                           ;nrf24l01.c: 221: enableInterrupts(1);
  7340  06C8  3001               	movlw	1
  7341  06C9  3197  2759  3186   	fcall	_enableInterrupts
  7342                           
  7343                           ;nrf24l01.c: 224: i = 0xFF;
  7344  06CC  30FF               	movlw	255
  7345  06CD  0020               	movlb	0	; select bank0
  7346  06CE  00A9               	movwf	??_nrf24l01SendPacket
  7347  06CF  0829               	movf	??_nrf24l01SendPacket,w
  7348  06D0  00AD               	movwf	nrf24l01SendPacket@i
  7349  06D1                     l3009:	
  7350                           ;nrf24l01.c: 225: while (nrf24l01.TXBusy){
  7351                           
  7352  06D1  1C7D               	btfss	_nrf24l01,0	;volatile
  7353  06D2  2EDD               	goto	l3011
  7354                           
  7355                           ;nrf24l01.c: 226: if (!--i) {
  7356  06D3  3001               	movlw	1
  7357  06D4  0020               	movlb	0	; select bank0
  7358  06D5  02AD               	subwf	nrf24l01SendPacket@i,f
  7359  06D6  1903               	btfsc	3,2
  7360  06D7  2E54               	goto	l289
  7361                           
  7362                           ;nrf24l01.c: 228: };nrf24l01.c: 229: _delay((unsigned long)((100)*(32000000/4000000.0)))
      +                          ;
  7363                           
  7364                           ;nrf24l01.c: 227: goto RESEND;
  7365  06D8  30A0               	movlw	160
  7366  06D9                     u3407:	
  7367  06D9  3200               	nop2
  7368  06DA  0B89               	decfsz	9,f
  7369  06DB  2ED9               	goto	u3407
  7370  06DC  2ED1               	goto	l3009
  7371  06DD                     l3011:	
  7372                           
  7373                           ;nrf24l01.c: 230: };nrf24l01.c: 234: i = 0xFF;
  7374  06DD  30FF               	movlw	255
  7375  06DE  0020               	movlb	0	; select bank0
  7376  06DF  00A9               	movwf	??_nrf24l01SendPacket
  7377  06E0  0829               	movf	??_nrf24l01SendPacket,w
  7378  06E1  00AD               	movwf	nrf24l01SendPacket@i
  7379  06E2                     l3021:	
  7380                           ;nrf24l01.c: 235: while (TXPacket->packetData.ACKRequest){
  7381                           
  7382  06E2  0021               	movlb	1	; select bank1
  7383  06E3  086B               	movf	_TXPacket^(0+128),w
  7384  06E4  0086               	movwf	6
  7385  06E5  086C               	movf	(_TXPacket+1)^(0+128),w
  7386  06E6  0087               	movwf	7
  7387  06E7  1D01               	btfss	1,2
  7388  06E8  0008               	return
  7389                           
  7390                           ;nrf24l01.c: 236: if (!--i) {
  7391  06E9  3001               	movlw	1
  7392  06EA  0020               	movlb	0	; select bank0
  7393  06EB  02AD               	subwf	nrf24l01SendPacket@i,f
  7394  06EC  1D03               	btfss	3,2
  7395  06ED  2F0F               	goto	l3019
  7396                           
  7397                           ;nrf24l01.c: 237: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  7398  06EE  3003               	movlw	3
  7399  06EF  0020               	movlb	0	; select bank0
  7400  06F0  00AA               	movwf	??_nrf24l01SendPacket+1
  7401  06F1  3008               	movlw	8
  7402  06F2  00A9               	movwf	??_nrf24l01SendPacket
  7403  06F3  3077               	movlw	119
  7404  06F4                     u3417:	
  7405  06F4  0B89               	decfsz	9,f
  7406  06F5  2EF4               	goto	u3417
  7407  06F6  0BA9               	decfsz	??_nrf24l01SendPacket,f
  7408  06F7  2EF4               	goto	u3417
  7409  06F8  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  7410  06F9  2EF4               	goto	u3417
  7411                           
  7412                           ;nrf24l01.c: 238: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  7413  06FA  3003               	movlw	3
  7414  06FB  0020               	movlb	0	; select bank0
  7415  06FC  00AA               	movwf	??_nrf24l01SendPacket+1
  7416  06FD  3008               	movlw	8
  7417  06FE  00A9               	movwf	??_nrf24l01SendPacket
  7418  06FF  3077               	movlw	119
  7419  0700                     u3427:	
  7420  0700  0B89               	decfsz	9,f
  7421  0701  2F00               	goto	u3427
  7422  0702  0BA9               	decfsz	??_nrf24l01SendPacket,f
  7423  0703  2F00               	goto	u3427
  7424  0704  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  7425  0705  2F00               	goto	u3427
  7426                           
  7427                           ;nrf24l01.c: 239: nrf24l01ChangeTXPower(1);
  7428  0706  3001               	movlw	1
  7429  0707  0020               	movlb	0	; select bank0
  7430  0708  00A3               	movwf	nrf24l01ChangeTXPower@addPower
  7431  0709  3000               	movlw	0
  7432  070A  00A4               	movwf	nrf24l01ChangeTXPower@addPower+1
  7433  070B  318A  22AF  3186   	fcall	_nrf24l01ChangeTXPower
  7434                           
  7435                           ;nrf24l01.c: 240: goto RESEND;
  7436  070E  2E54               	goto	l289
  7437  070F                     l3019:	
  7438                           
  7439                           ;nrf24l01.c: 241: };nrf24l01.c: 242: _delay((unsigned long)((100)*(32000000/4000000.0)))
      +                          ;
  7440  070F  30A0               	movlw	160
  7441  0710                     u3437:	
  7442  0710  3200               	nop2
  7443  0711  0B89               	decfsz	9,f
  7444  0712  2F10               	goto	u3437
  7445  0713  2EE2               	goto	l3021
  7446  0714                     __end_of_nrf24l01SendPacket:	
  7447                           
  7448                           	psect	text27
  7449  08BF                     __ptext27:	
  7450 ;; *************** function _strlen *****************
  7451 ;; Defined at:
  7452 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  7453 ;; Parameters:    Size  Location     Type
  7454 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  7455 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7456 ;;		 -> loop@packet(33), romDataMap(28), 
  7457 ;; Auto vars:     Size  Location     Type
  7458 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  7459 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7460 ;;		 -> loop@packet(33), romDataMap(28), 
  7461 ;; Return value:  Size  Location     Type
  7462 ;;                  2    0[BANK0 ] unsigned int 
  7463 ;; Registers used:
  7464 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7465 ;; Tracked objects:
  7466 ;;		On entry : 0/0
  7467 ;;		On exit  : 0/0
  7468 ;;		Unchanged: 0/0
  7469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7470 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7471 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7472 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7473 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7474 ;;Total ram usage:        6 bytes
  7475 ;; Hardware stack levels used:    1
  7476 ;; Hardware stack levels required when called:    7
  7477 ;; This function calls:
  7478 ;;		Nothing
  7479 ;; This function is called by:
  7480 ;;		_nrf24l01GetPipe
  7481 ;;		_nrf24l01SendPacket
  7482 ;; This function uses a non-reentrant model
  7483 ;;
  7484                           
  7485                           
  7486                           ;psect for function _strlen
  7487  08BF                     _strlen:	
  7488                           
  7489                           ;incstack = 0
  7490                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  7491  08BF  0020               	movlb	0	; select bank0
  7492  08C0  0821               	movf	strlen@s+1,w
  7493  08C1  00A5               	movwf	strlen@cp+1
  7494  08C2  0820               	movf	strlen@s,w
  7495  08C3  00A4               	movwf	strlen@cp
  7496  08C4                     l2785:	
  7497  08C4  0824               	movf	strlen@cp,w
  7498  08C5  0086               	movwf	6
  7499  08C6  0825               	movf	strlen@cp+1,w
  7500  08C7  0087               	movwf	7
  7501  08C8  0801               	movf	1,w
  7502  08C9  1903               	btfsc	3,2
  7503  08CA  28D0               	goto	l2787
  7504  08CB  3001               	movlw	1
  7505  08CC  07A4               	addwf	strlen@cp,f
  7506  08CD  3000               	movlw	0
  7507  08CE  3DA5               	addwfc	strlen@cp+1,f
  7508  08CF  28C4               	goto	l2785
  7509  08D0                     l2787:	
  7510  08D0  0920               	comf	strlen@s,w
  7511  08D1  00A2               	movwf	??_strlen
  7512  08D2  0921               	comf	strlen@s+1,w
  7513  08D3  00A3               	movwf	??_strlen+1
  7514  08D4  0AA2               	incf	??_strlen,f
  7515  08D5  1903               	skipnz
  7516  08D6  0AA3               	incf	??_strlen+1,f
  7517  08D7  0824               	movf	strlen@cp,w
  7518  08D8  0722               	addwf	??_strlen,w
  7519  08D9  00A0               	movwf	?_strlen
  7520  08DA  0825               	movf	strlen@cp+1,w
  7521  08DB  3D23               	addwfc	??_strlen+1,w
  7522  08DC  00A1               	movwf	?_strlen+1
  7523  08DD  0008               	return
  7524  08DE                     __end_of_strlen:	
  7525                           
  7526                           	psect	text28
  7527  0B31                     __ptext28:	
  7528 ;; *************** function _nrf24l01SetRXMode *****************
  7529 ;; Defined at:
  7530 ;;		line 54 in file "nrf24l01.c"
  7531 ;; Parameters:    Size  Location     Type
  7532 ;;  rxMode          1    wreg     unsigned char 
  7533 ;; Auto vars:     Size  Location     Type
  7534 ;;  rxMode          1    5[BANK0 ] unsigned char 
  7535 ;;  config          1    4[BANK0 ] struct .
  7536 ;; Return value:  Size  Location     Type
  7537 ;;                  1    wreg      void 
  7538 ;; Registers used:
  7539 ;;		wreg, status,2, status,0, pclath, cstack
  7540 ;; Tracked objects:
  7541 ;;		On entry : 0/0
  7542 ;;		On exit  : 0/0
  7543 ;;		Unchanged: 0/0
  7544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7546 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7547 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7548 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7549 ;;Total ram usage:        3 bytes
  7550 ;; Hardware stack levels used:    1
  7551 ;; Hardware stack levels required when called:   10
  7552 ;; This function calls:
  7553 ;;		_nrf24l01CEHigh
  7554 ;;		_nrf24l01CELow
  7555 ;;		_nrf24l01Send
  7556 ;; This function is called by:
  7557 ;;		_nrf24l01SendPacket
  7558 ;;		_checkRxData
  7559 ;; This function uses a non-reentrant model
  7560 ;;
  7561                           
  7562                           
  7563                           ;psect for function _nrf24l01SetRXMode
  7564  0B31                     _nrf24l01SetRXMode:	
  7565                           
  7566                           ;incstack = 0
  7567                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  7568                           ;nrf24l01SetRXMode@rxMode stored from wreg
  7569  0B31  0020               	movlb	0	; select bank0
  7570  0B32  00A5               	movwf	nrf24l01SetRXMode@rxMode
  7571                           
  7572                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  7573  0B33  01A0               	clrf	nrf24l01Send@data
  7574  0B34  3000               	movlw	0
  7575  0B35  3188  20DE  318B   	fcall	_nrf24l01Send
  7576  0B38  0020               	movlb	0	; select bank0
  7577  0B39  00A3               	movwf	??_nrf24l01SetRXMode
  7578  0B3A  0823               	movf	??_nrf24l01SetRXMode,w
  7579  0B3B  00A4               	movwf	nrf24l01SetRXMode@config
  7580                           
  7581                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  7582  0B3C  0824               	movf	nrf24l01SetRXMode@config,w
  7583  0B3D  3901               	andlw	1
  7584  0B3E  0625               	xorwf	nrf24l01SetRXMode@rxMode,w
  7585  0B3F  1903               	skipnz
  7586  0B40  2B6E               	goto	l2719
  7587                           
  7588                           ;nrf24l01.c: 65: nrf24l01CELow();
  7589  0B41  3197  2743  318B   	fcall	_nrf24l01CELow
  7590                           
  7591                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(32000000/4000000.0)));
  7592  0B44  30E4               	movlw	228
  7593  0B45                     u3447:	
  7594  0B45  3200               	nop2
  7595  0B46  3200               	nop2
  7596  0B47  0B89               	decfsz	9,f
  7597  0B48  2B45               	goto	u3447
  7598  0B49  3200               	nop2
  7599  0B4A  3200               	nop2
  7600                           
  7601                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  7602  0B4B  0020               	movlb	0	; select bank0
  7603  0B4C  0825               	movf	nrf24l01SetRXMode@rxMode,w
  7604  0B4D  3901               	andlw	1
  7605  0B4E  1024               	bcf	nrf24l01SetRXMode@config,0
  7606  0B4F  1D03               	skipz
  7607  0B50  1424               	bsf	nrf24l01SetRXMode@config,0
  7608                           
  7609                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  7610  0B51  0824               	movf	nrf24l01SetRXMode@config,w
  7611  0B52  00A3               	movwf	??_nrf24l01SetRXMode
  7612  0B53  0823               	movf	??_nrf24l01SetRXMode,w
  7613  0B54  00A0               	movwf	nrf24l01Send@data
  7614  0B55  3020               	movlw	32
  7615  0B56  3188  20DE  318B   	fcall	_nrf24l01Send
  7616                           
  7617                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(32000000/4000000.0)));
  7618  0B59  30E4               	movlw	228
  7619  0B5A                     u3457:	
  7620  0B5A  3200               	nop2
  7621  0B5B  3200               	nop2
  7622  0B5C  0B89               	decfsz	9,f
  7623  0B5D  2B5A               	goto	u3457
  7624  0B5E  3200               	nop2
  7625  0B5F  3200               	nop2
  7626                           
  7627                           ;nrf24l01.c: 76: if (rxMode){
  7628  0B60  0020               	movlb	0	; select bank0
  7629  0B61  0825               	movf	nrf24l01SetRXMode@rxMode,w
  7630  0B62  1903               	btfsc	3,2
  7631  0B63  2B6E               	goto	l2719
  7632                           
  7633                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  7634  0B64  3197  2740  318B   	fcall	_nrf24l01CEHigh
  7635                           
  7636                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(32000000/4000000.0)));
  7637  0B67  30E4               	movlw	228
  7638  0B68                     u3467:	
  7639  0B68  3200               	nop2
  7640  0B69  3200               	nop2
  7641  0B6A  0B89               	decfsz	9,f
  7642  0B6B  2B68               	goto	u3467
  7643  0B6C  3200               	nop2
  7644  0B6D  3200               	nop2
  7645  0B6E                     l2719:	
  7646                           
  7647                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  7648  0B6E  0020               	movlb	0	; select bank0
  7649  0B6F  0825               	movf	nrf24l01SetRXMode@rxMode,w
  7650  0B70  3901               	andlw	1
  7651  0B71  117D               	bcf	_nrf24l01,2	;volatile
  7652  0B72  1D03               	skipz
  7653  0B73  157D               	bsf	_nrf24l01,2	;volatile
  7654  0B74  0008               	return
  7655  0B75                     __end_of_nrf24l01SetRXMode:	
  7656                           
  7657                           	psect	text29
  7658  0EB2                     __ptext29:	
  7659 ;; *************** function _getADCValue *****************
  7660 ;; Defined at:
  7661 ;;		line 43 in file "main.c"
  7662 ;; Parameters:    Size  Location     Type
  7663 ;;  channel         1    wreg     unsigned char 
  7664 ;; Auto vars:     Size  Location     Type
  7665 ;;  channel         1   51[BANK0 ] unsigned char 
  7666 ;;  adcSum          3   52[BANK0 ] float 
  7667 ;;  adcLoop         2   49[BANK0 ] unsigned int 
  7668 ;; Return value:  Size  Location     Type
  7669 ;;                  3   43[BANK0 ] float 
  7670 ;; Registers used:
  7671 ;;		wreg, status,2, status,0, pclath, cstack
  7672 ;; Tracked objects:
  7673 ;;		On entry : 0/0
  7674 ;;		On exit  : 0/0
  7675 ;;		Unchanged: 0/0
  7676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7677 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7678 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7679 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7680 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7681 ;;Total ram usage:       12 bytes
  7682 ;; Hardware stack levels used:    1
  7683 ;; Hardware stack levels required when called:    9
  7684 ;; This function calls:
  7685 ;;		___awtoft
  7686 ;;		___ftadd
  7687 ;;		___ftdiv
  7688 ;;		_sleep
  7689 ;; This function is called by:
  7690 ;;		_loop
  7691 ;; This function uses a non-reentrant model
  7692 ;;
  7693                           
  7694                           
  7695                           ;psect for function _getADCValue
  7696  0EB2                     _getADCValue:	
  7697                           
  7698                           ;incstack = 0
  7699                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  7700                           ;getADCValue@channel stored from wreg
  7701  0EB2  0020               	movlb	0	; select bank0
  7702  0EB3  00D3               	movwf	getADCValue@channel
  7703                           
  7704                           ;main.c: 46: float adcSum = 0;
  7705  0EB4  3000               	movlw	0
  7706  0EB5  00D4               	movwf	getADCValue@adcSum
  7707  0EB6  3000               	movlw	0
  7708  0EB7  00D5               	movwf	getADCValue@adcSum+1
  7709  0EB8  3000               	movlw	0
  7710  0EB9  00D6               	movwf	getADCValue@adcSum+2
  7711                           
  7712                           ;main.c: 47: unsigned int adcLoop = 1000;
  7713  0EBA  30E8               	movlw	232
  7714  0EBB  00D1               	movwf	getADCValue@adcLoop
  7715  0EBC  3003               	movlw	3
  7716  0EBD  00D2               	movwf	getADCValue@adcLoop+1
  7717                           
  7718                           ;main.c: 49: ADCON0bits.CHS = channel;
  7719  0EBE  0853               	movf	getADCValue@channel,w
  7720  0EBF  00CE               	movwf	??_getADCValue
  7721  0EC0  0DCE               	rlf	??_getADCValue,f
  7722  0EC1  0DCE               	rlf	??_getADCValue,f
  7723  0EC2  0021               	movlb	1	; select bank1
  7724  0EC3  081D               	movf	29,w	;volatile
  7725  0EC4  0020               	movlb	0	; select bank0
  7726  0EC5  064E               	xorwf	??_getADCValue,w
  7727  0EC6  3903               	andlw	-253
  7728  0EC7  064E               	xorwf	??_getADCValue,w
  7729  0EC8  0021               	movlb	1	; select bank1
  7730  0EC9  009D               	movwf	29	;volatile
  7731                           
  7732                           ;main.c: 50: FVRCONbits.FVREN = 1;
  7733  0ECA  0022               	movlb	2	; select bank2
  7734  0ECB  1797               	bsf	23,7	;volatile
  7735                           
  7736                           ;main.c: 51: ADCON0bits.ADON = 1;
  7737  0ECC  0021               	movlb	1	; select bank1
  7738  0ECD  141D               	bsf	29,0	;volatile
  7739                           
  7740                           ;main.c: 53: sleep(0);
  7741  0ECE  3000               	movlw	0
  7742  0ECF  3188  2032  318E   	fcall	_sleep
  7743                           
  7744                           ;main.c: 55: counter = 0;
  7745  0ED2  3000               	movlw	0
  7746  0ED3  0021               	movlb	1	; select bank1
  7747  0ED4  00EA               	movwf	(_counter+3)^(0+128)
  7748  0ED5  3000               	movlw	0
  7749  0ED6  00E9               	movwf	(_counter+2)^(0+128)
  7750  0ED7  3000               	movlw	0
  7751  0ED8  00E8               	movwf	(_counter+1)^(0+128)
  7752  0ED9  3000               	movlw	0
  7753  0EDA  00E7               	movwf	_counter^(0+128)
  7754  0EDB                     l2945:	
  7755                           ;main.c: 57: while (adcLoop--){
  7756                           
  7757  0EDB  3001               	movlw	1
  7758  0EDC  0020               	movlb	0	; select bank0
  7759  0EDD  02D1               	subwf	getADCValue@adcLoop,f
  7760  0EDE  3000               	movlw	0
  7761  0EDF  3BD2               	subwfb	getADCValue@adcLoop+1,f
  7762  0EE0  0A51               	incf	getADCValue@adcLoop,w
  7763  0EE1  1903               	btfsc	3,2
  7764  0EE2  0A52               	incf	getADCValue@adcLoop+1,w
  7765  0EE3  1903               	btfsc	3,2
  7766  0EE4  2F20               	goto	l180
  7767                           
  7768                           ;main.c: 59: counter++;
  7769  0EE5  3001               	movlw	1
  7770  0EE6  0021               	movlb	1	; select bank1
  7771  0EE7  07E7               	addwf	_counter^(0+128),f
  7772  0EE8  3000               	movlw	0
  7773  0EE9  3DE8               	addwfc	(_counter+1)^(0+128),f
  7774  0EEA  3000               	movlw	0
  7775  0EEB  3DE9               	addwfc	(_counter+2)^(0+128),f
  7776  0EEC  3000               	movlw	0
  7777  0EED  3DEA               	addwfc	(_counter+3)^(0+128),f
  7778                           
  7779                           ;main.c: 61: ADCON0bits.ADGO = 1;
  7780  0EEE  149D               	bsf	29,1	;volatile
  7781  0EEF                     l2941:	
  7782                           ;main.c: 63: while (ADCON0bits.ADGO){
  7783                           
  7784  0EEF  0021               	movlb	1	; select bank1
  7785  0EF0  1C9D               	btfss	29,1	;volatile
  7786  0EF1  2EF7               	goto	l2943
  7787                           
  7788                           ;main.c: 64: sleep(0);
  7789  0EF2  3000               	movlw	0
  7790  0EF3  3188  2032  318E   	fcall	_sleep
  7791  0EF6  2EEF               	goto	l2941
  7792  0EF7                     l2943:	
  7793                           
  7794                           ;main.c: 65: };main.c: 67: adcSum+= (ADRESL | (ADRESH << 8));
  7795  0EF7  081C               	movf	28,w	;volatile
  7796  0EF8  0020               	movlb	0	; select bank0
  7797  0EF9  00CE               	movwf	??_getADCValue
  7798  0EFA  01CF               	clrf	??_getADCValue+1
  7799  0EFB  084E               	movf	??_getADCValue,w
  7800  0EFC  00CF               	movwf	??_getADCValue+1
  7801  0EFD  01CE               	clrf	??_getADCValue
  7802  0EFE  084E               	movf	??_getADCValue,w
  7803  0EFF  0021               	movlb	1	; select bank1
  7804  0F00  041B               	iorwf	27,w	;volatile
  7805  0F01  0020               	movlb	0	; select bank0
  7806  0F02  00A8               	movwf	___awtoft@c
  7807  0F03  084F               	movf	??_getADCValue+1,w
  7808  0F04  00A9               	movwf	___awtoft@c+1
  7809  0F05  3189  211F  318E   	fcall	___awtoft
  7810  0F08  0020               	movlb	0	; select bank0
  7811  0F09  0828               	movf	?___awtoft,w
  7812  0F0A  00AE               	movwf	___ftadd@f1
  7813  0F0B  0829               	movf	?___awtoft+1,w
  7814  0F0C  00AF               	movwf	___ftadd@f1+1
  7815  0F0D  082A               	movf	?___awtoft+2,w
  7816  0F0E  00B0               	movwf	___ftadd@f1+2
  7817  0F0F  0854               	movf	getADCValue@adcSum,w
  7818  0F10  00B1               	movwf	___ftadd@f2
  7819  0F11  0855               	movf	getADCValue@adcSum+1,w
  7820  0F12  00B2               	movwf	___ftadd@f2+1
  7821  0F13  0856               	movf	getADCValue@adcSum+2,w
  7822  0F14  00B3               	movwf	___ftadd@f2+2
  7823  0F15  3184  2464  318E   	fcall	___ftadd
  7824  0F18  0020               	movlb	0	; select bank0
  7825  0F19  082E               	movf	?___ftadd,w
  7826  0F1A  00D4               	movwf	getADCValue@adcSum
  7827  0F1B  082F               	movf	?___ftadd+1,w
  7828  0F1C  00D5               	movwf	getADCValue@adcSum+1
  7829  0F1D  0830               	movf	?___ftadd+2,w
  7830  0F1E  00D6               	movwf	getADCValue@adcSum+2
  7831  0F1F  2EDB               	goto	l2945
  7832  0F20                     l180:	
  7833                           
  7834                           ;main.c: 69: };main.c: 71: FVRCONbits.FVREN = 0;
  7835  0F20  0022               	movlb	2	; select bank2
  7836  0F21  1397               	bcf	23,7	;volatile
  7837                           
  7838                           ;main.c: 72: ADCON0bits.ADON = 0;
  7839  0F22  0021               	movlb	1	; select bank1
  7840  0F23  101D               	bcf	29,0	;volatile
  7841                           
  7842                           ;main.c: 75: adcSum/= 1000;
  7843  0F24  3000               	movlw	0
  7844  0F25  0020               	movlb	0	; select bank0
  7845  0F26  00BB               	movwf	___ftdiv@f2
  7846  0F27  307A               	movlw	122
  7847  0F28  00BC               	movwf	___ftdiv@f2+1
  7848  0F29  3044               	movlw	68
  7849  0F2A  00BD               	movwf	___ftdiv@f2+2
  7850  0F2B  0854               	movf	getADCValue@adcSum,w
  7851  0F2C  00BE               	movwf	___ftdiv@f1
  7852  0F2D  0855               	movf	getADCValue@adcSum+1,w
  7853  0F2E  00BF               	movwf	___ftdiv@f1+1
  7854  0F2F  0856               	movf	getADCValue@adcSum+2,w
  7855  0F30  00C0               	movwf	___ftdiv@f1+2
  7856  0F31  318F  2757  318E   	fcall	___ftdiv
  7857  0F34  0020               	movlb	0	; select bank0
  7858  0F35  083B               	movf	?___ftdiv,w
  7859  0F36  00D4               	movwf	getADCValue@adcSum
  7860  0F37  083C               	movf	?___ftdiv+1,w
  7861  0F38  00D5               	movwf	getADCValue@adcSum+1
  7862  0F39  083D               	movf	?___ftdiv+2,w
  7863  0F3A  00D6               	movwf	getADCValue@adcSum+2
  7864                           
  7865                           ;main.c: 76: adcSum/= 500;
  7866  0F3B  3000               	movlw	0
  7867  0F3C  00BB               	movwf	___ftdiv@f2
  7868  0F3D  30FA               	movlw	250
  7869  0F3E  00BC               	movwf	___ftdiv@f2+1
  7870  0F3F  3043               	movlw	67
  7871  0F40  00BD               	movwf	___ftdiv@f2+2
  7872  0F41  0854               	movf	getADCValue@adcSum,w
  7873  0F42  00BE               	movwf	___ftdiv@f1
  7874  0F43  0855               	movf	getADCValue@adcSum+1,w
  7875  0F44  00BF               	movwf	___ftdiv@f1+1
  7876  0F45  0856               	movf	getADCValue@adcSum+2,w
  7877  0F46  00C0               	movwf	___ftdiv@f1+2
  7878  0F47  318F  2757         	fcall	___ftdiv
  7879  0F49  0020               	movlb	0	; select bank0
  7880  0F4A  083B               	movf	?___ftdiv,w
  7881  0F4B  00D4               	movwf	getADCValue@adcSum
  7882  0F4C  083C               	movf	?___ftdiv+1,w
  7883  0F4D  00D5               	movwf	getADCValue@adcSum+1
  7884  0F4E  083D               	movf	?___ftdiv+2,w
  7885  0F4F  00D6               	movwf	getADCValue@adcSum+2
  7886                           
  7887                           ;main.c: 78: return adcSum;
  7888  0F50  0854               	movf	getADCValue@adcSum,w
  7889  0F51  00CB               	movwf	?_getADCValue
  7890  0F52  0855               	movf	getADCValue@adcSum+1,w
  7891  0F53  00CC               	movwf	?_getADCValue+1
  7892  0F54  0856               	movf	getADCValue@adcSum+2,w
  7893  0F55  00CD               	movwf	?_getADCValue+2
  7894  0F56  0008               	return
  7895  0F57                     __end_of_getADCValue:	
  7896                           
  7897                           	psect	text30
  7898  0832                     __ptext30:	
  7899 ;; *************** function _sleep *****************
  7900 ;; Defined at:
  7901 ;;		line 22 in file "main.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;  wdps            1    wreg     unsigned char 
  7904 ;; Auto vars:     Size  Location     Type
  7905 ;;  wdps            1    1[BANK0 ] unsigned char 
  7906 ;; Return value:  Size  Location     Type
  7907 ;;                  1    wreg      void 
  7908 ;; Registers used:
  7909 ;;		wreg, status,2, status,0
  7910 ;; Tracked objects:
  7911 ;;		On entry : 0/0
  7912 ;;		On exit  : 0/0
  7913 ;;		Unchanged: 0/0
  7914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7916 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7917 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7918 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7919 ;;Total ram usage:        2 bytes
  7920 ;; Hardware stack levels used:    1
  7921 ;; Hardware stack levels required when called:    7
  7922 ;; This function calls:
  7923 ;;		Nothing
  7924 ;; This function is called by:
  7925 ;;		_getADCValue
  7926 ;;		_loop
  7927 ;;		_main
  7928 ;;		_checkRxData
  7929 ;; This function uses a non-reentrant model
  7930 ;;
  7931                           
  7932                           
  7933                           ;psect for function _sleep
  7934  0832                     _sleep:	
  7935                           
  7936                           ;incstack = 0
  7937                           ; Regs used in _sleep: [wreg+status,2+status,0]
  7938                           ;sleep@wdps stored from wreg
  7939  0832  0020               	movlb	0	; select bank0
  7940  0833  00A1               	movwf	sleep@wdps
  7941                           
  7942                           ;main.c: 24: WDTCONbits.WDTPS = wdps;
  7943  0834  0821               	movf	sleep@wdps,w
  7944  0835  00A0               	movwf	??_sleep
  7945  0836  0DA0               	rlf	??_sleep,f
  7946  0837  0021               	movlb	1	; select bank1
  7947  0838  0817               	movf	23,w	;volatile
  7948  0839  0020               	movlb	0	; select bank0
  7949  083A  0620               	xorwf	??_sleep,w
  7950  083B  39C1               	andlw	-63
  7951  083C  0620               	xorwf	??_sleep,w
  7952  083D  0021               	movlb	1	; select bank1
  7953  083E  0097               	movwf	23	;volatile
  7954  083F                     l168:	
  7955                           ;main.c: 26: while (1){
  7956                           
  7957  083F  0063               	sleep	;# 
  7958                           
  7959                           ;main.c: 29: __nop();
  7960  0840  0000               	nop
  7961                           
  7962                           ;main.c: 30: __nop();
  7963  0841  0000               	nop
  7964                           
  7965                           ;main.c: 32: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  7966  0842  0020               	movlb	0	; select bank0
  7967  0843  1E03               	btfss	3,4	;volatile
  7968  0844  1983               	btfsc	3,3	;volatile
  7969  0845  283F               	goto	l168
  7970                           
  7971                           ;main.c: 35: WDTCONbits.WDTPS = 13;
  7972  0846  0021               	movlb	1	; select bank1
  7973  0847  0817               	movf	23,w	;volatile
  7974  0848  39C1               	andlw	-63
  7975  0849  381A               	iorlw	26
  7976  084A  0097               	movwf	23	;volatile
  7977  084B  0064               	clrwdt	;# 
  7978                           
  7979                           ;main.c: 38: return;
  7980  084C  0008               	return
  7981  084D                     __end_of_sleep:	
  7982                           
  7983                           	psect	text31
  7984  0F57                     __ptext31:	
  7985 ;; *************** function ___ftdiv *****************
  7986 ;; Defined at:
  7987 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  7988 ;; Parameters:    Size  Location     Type
  7989 ;;  f2              3   27[BANK0 ] float 
  7990 ;;  f1              3   30[BANK0 ] float 
  7991 ;; Auto vars:     Size  Location     Type
  7992 ;;  f3              3   38[BANK0 ] float 
  7993 ;;  sign            1   42[BANK0 ] unsigned char 
  7994 ;;  exp             1   41[BANK0 ] unsigned char 
  7995 ;;  cntr            1   37[BANK0 ] unsigned char 
  7996 ;; Return value:  Size  Location     Type
  7997 ;;                  3   27[BANK0 ] float 
  7998 ;; Registers used:
  7999 ;;		wreg, status,2, status,0, pclath, cstack
  8000 ;; Tracked objects:
  8001 ;;		On entry : 0/0
  8002 ;;		On exit  : 0/0
  8003 ;;		Unchanged: 0/0
  8004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8005 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8006 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8007 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8008 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8009 ;;Total ram usage:       16 bytes
  8010 ;; Hardware stack levels used:    1
  8011 ;; Hardware stack levels required when called:    8
  8012 ;; This function calls:
  8013 ;;		___ftpack
  8014 ;; This function is called by:
  8015 ;;		_getADCValue
  8016 ;;		_loop
  8017 ;; This function uses a non-reentrant model
  8018 ;;
  8019                           
  8020                           
  8021                           ;psect for function ___ftdiv
  8022  0F57                     ___ftdiv:	
  8023                           
  8024                           ;incstack = 0
  8025                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  8026  0F57  0020               	movlb	0	; select bank0
  8027  0F58  083E               	movf	___ftdiv@f1,w
  8028  0F59  00C1               	movwf	??___ftdiv
  8029  0F5A  083F               	movf	___ftdiv@f1+1,w
  8030  0F5B  00C2               	movwf	??___ftdiv+1
  8031  0F5C  0840               	movf	___ftdiv@f1+2,w
  8032  0F5D  00C3               	movwf	??___ftdiv+2
  8033  0F5E  1003               	clrc
  8034  0F5F  0D42               	rlf	??___ftdiv+1,w
  8035  0F60  0D43               	rlf	??___ftdiv+2,w
  8036  0F61  00C4               	movwf	??___ftdiv+3
  8037  0F62  0844               	movf	??___ftdiv+3,w
  8038  0F63  00C9               	movwf	___ftdiv@exp
  8039  0F64  0849               	movf	___ftdiv@exp,w
  8040  0F65  1D03               	btfss	3,2
  8041  0F66  2F6E               	goto	l2845
  8042  0F67  3000               	movlw	0
  8043  0F68  00BB               	movwf	?___ftdiv
  8044  0F69  3000               	movlw	0
  8045  0F6A  00BC               	movwf	?___ftdiv+1
  8046  0F6B  3000               	movlw	0
  8047  0F6C  00BD               	movwf	?___ftdiv+2
  8048  0F6D  0008               	return
  8049  0F6E                     l2845:	
  8050  0F6E  083B               	movf	___ftdiv@f2,w
  8051  0F6F  00C1               	movwf	??___ftdiv
  8052  0F70  083C               	movf	___ftdiv@f2+1,w
  8053  0F71  00C2               	movwf	??___ftdiv+1
  8054  0F72  083D               	movf	___ftdiv@f2+2,w
  8055  0F73  00C3               	movwf	??___ftdiv+2
  8056  0F74  1003               	clrc
  8057  0F75  0D42               	rlf	??___ftdiv+1,w
  8058  0F76  0D43               	rlf	??___ftdiv+2,w
  8059  0F77  00C4               	movwf	??___ftdiv+3
  8060  0F78  0844               	movf	??___ftdiv+3,w
  8061  0F79  00CA               	movwf	___ftdiv@sign
  8062  0F7A  084A               	movf	___ftdiv@sign,w
  8063  0F7B  1D03               	btfss	3,2
  8064  0F7C  2F84               	goto	l2851
  8065  0F7D  3000               	movlw	0
  8066  0F7E  00BB               	movwf	?___ftdiv
  8067  0F7F  3000               	movlw	0
  8068  0F80  00BC               	movwf	?___ftdiv+1
  8069  0F81  3000               	movlw	0
  8070  0F82  00BD               	movwf	?___ftdiv+2
  8071  0F83  0008               	return
  8072  0F84                     l2851:	
  8073  0F84  3000               	movlw	0
  8074  0F85  00C6               	movwf	___ftdiv@f3
  8075  0F86  3000               	movlw	0
  8076  0F87  00C7               	movwf	___ftdiv@f3+1
  8077  0F88  3000               	movlw	0
  8078  0F89  00C8               	movwf	___ftdiv@f3+2
  8079  0F8A  3089               	movlw	137
  8080  0F8B  074A               	addwf	___ftdiv@sign,w
  8081  0F8C  00C1               	movwf	??___ftdiv
  8082  0F8D  0841               	movf	??___ftdiv,w
  8083  0F8E  02C9               	subwf	___ftdiv@exp,f
  8084  0F8F  083E               	movf	___ftdiv@f1,w
  8085  0F90  00C1               	movwf	??___ftdiv
  8086  0F91  083F               	movf	___ftdiv@f1+1,w
  8087  0F92  00C2               	movwf	??___ftdiv+1
  8088  0F93  0840               	movf	___ftdiv@f1+2,w
  8089  0F94  00C3               	movwf	??___ftdiv+2
  8090  0F95  3010               	movlw	16
  8091  0F96                     u2925:	
  8092  0F96  36C3               	lsrf	??___ftdiv+2,f
  8093  0F97  0CC2               	rrf	??___ftdiv+1,f
  8094  0F98  0CC1               	rrf	??___ftdiv,f
  8095  0F99  0B89               	decfsz	9,f
  8096  0F9A  2F96               	goto	u2925
  8097  0F9B  0841               	movf	??___ftdiv,w
  8098  0F9C  00C4               	movwf	??___ftdiv+3
  8099  0F9D  0844               	movf	??___ftdiv+3,w
  8100  0F9E  00CA               	movwf	___ftdiv@sign
  8101  0F9F  083B               	movf	___ftdiv@f2,w
  8102  0FA0  00C1               	movwf	??___ftdiv
  8103  0FA1  083C               	movf	___ftdiv@f2+1,w
  8104  0FA2  00C2               	movwf	??___ftdiv+1
  8105  0FA3  083D               	movf	___ftdiv@f2+2,w
  8106  0FA4  00C3               	movwf	??___ftdiv+2
  8107  0FA5  3010               	movlw	16
  8108  0FA6                     u2935:	
  8109  0FA6  36C3               	lsrf	??___ftdiv+2,f
  8110  0FA7  0CC2               	rrf	??___ftdiv+1,f
  8111  0FA8  0CC1               	rrf	??___ftdiv,f
  8112  0FA9  0B89               	decfsz	9,f
  8113  0FAA  2FA6               	goto	u2935
  8114  0FAB  0841               	movf	??___ftdiv,w
  8115  0FAC  00C4               	movwf	??___ftdiv+3
  8116  0FAD  0844               	movf	??___ftdiv+3,w
  8117  0FAE  06CA               	xorwf	___ftdiv@sign,f
  8118  0FAF  3080               	movlw	128
  8119  0FB0  00C1               	movwf	??___ftdiv
  8120  0FB1  0841               	movf	??___ftdiv,w
  8121  0FB2  05CA               	andwf	___ftdiv@sign,f
  8122  0FB3  17BF               	bsf	___ftdiv@f1+1,7
  8123  0FB4  30FF               	movlw	255
  8124  0FB5  05BE               	andwf	___ftdiv@f1,f
  8125  0FB6  30FF               	movlw	255
  8126  0FB7  05BF               	andwf	___ftdiv@f1+1,f
  8127  0FB8  3000               	movlw	0
  8128  0FB9  05C0               	andwf	___ftdiv@f1+2,f
  8129  0FBA  17BC               	bsf	___ftdiv@f2+1,7
  8130  0FBB  30FF               	movlw	255
  8131  0FBC  05BB               	andwf	___ftdiv@f2,f
  8132  0FBD  30FF               	movlw	255
  8133  0FBE  05BC               	andwf	___ftdiv@f2+1,f
  8134  0FBF  3000               	movlw	0
  8135  0FC0  05BD               	andwf	___ftdiv@f2+2,f
  8136  0FC1  3018               	movlw	24
  8137  0FC2  00C1               	movwf	??___ftdiv
  8138  0FC3  0841               	movf	??___ftdiv,w
  8139  0FC4  00C5               	movwf	___ftdiv@cntr
  8140  0FC5                     l2865:	
  8141  0FC5  3001               	movlw	1
  8142  0FC6                     u2945:	
  8143  0FC6  35C6               	lslf	___ftdiv@f3,f
  8144  0FC7  0DC7               	rlf	___ftdiv@f3+1,f
  8145  0FC8  0DC8               	rlf	___ftdiv@f3+2,f
  8146  0FC9  0B89               	decfsz	9,f
  8147  0FCA  2FC6               	goto	u2945
  8148  0FCB  083D               	movf	___ftdiv@f2+2,w
  8149  0FCC  0240               	subwf	___ftdiv@f1+2,w
  8150  0FCD  1D03               	skipz
  8151  0FCE  2FD5               	goto	u2955
  8152  0FCF  083C               	movf	___ftdiv@f2+1,w
  8153  0FD0  023F               	subwf	___ftdiv@f1+1,w
  8154  0FD1  1D03               	skipz
  8155  0FD2  2FD5               	goto	u2955
  8156  0FD3  083B               	movf	___ftdiv@f2,w
  8157  0FD4  023E               	subwf	___ftdiv@f1,w
  8158  0FD5                     u2955:	
  8159  0FD5  1C03               	skipc
  8160  0FD6  2FDE               	goto	l2873
  8161  0FD7  083B               	movf	___ftdiv@f2,w
  8162  0FD8  02BE               	subwf	___ftdiv@f1,f
  8163  0FD9  083C               	movf	___ftdiv@f2+1,w
  8164  0FDA  3BBF               	subwfb	___ftdiv@f1+1,f
  8165  0FDB  083D               	movf	___ftdiv@f2+2,w
  8166  0FDC  3BC0               	subwfb	___ftdiv@f1+2,f
  8167  0FDD  1446               	bsf	___ftdiv@f3,0
  8168  0FDE                     l2873:	
  8169  0FDE  3001               	movlw	1
  8170  0FDF                     u2965:	
  8171  0FDF  35BE               	lslf	___ftdiv@f1,f
  8172  0FE0  0DBF               	rlf	___ftdiv@f1+1,f
  8173  0FE1  0DC0               	rlf	___ftdiv@f1+2,f
  8174  0FE2  0B89               	decfsz	9,f
  8175  0FE3  2FDF               	goto	u2965
  8176  0FE4  3001               	movlw	1
  8177  0FE5  02C5               	subwf	___ftdiv@cntr,f
  8178  0FE6  1D03               	btfss	3,2
  8179  0FE7  2FC5               	goto	l2865
  8180  0FE8  0846               	movf	___ftdiv@f3,w
  8181  0FE9  00A0               	movwf	___ftpack@arg
  8182  0FEA  0847               	movf	___ftdiv@f3+1,w
  8183  0FEB  00A1               	movwf	___ftpack@arg+1
  8184  0FEC  0848               	movf	___ftdiv@f3+2,w
  8185  0FED  00A2               	movwf	___ftpack@arg+2
  8186  0FEE  0849               	movf	___ftdiv@exp,w
  8187  0FEF  00C1               	movwf	??___ftdiv
  8188  0FF0  0841               	movf	??___ftdiv,w
  8189  0FF1  00A3               	movwf	___ftpack@exp
  8190  0FF2  084A               	movf	___ftdiv@sign,w
  8191  0FF3  00C2               	movwf	??___ftdiv+1
  8192  0FF4  0842               	movf	??___ftdiv+1,w
  8193  0FF5  00A4               	movwf	___ftpack@sign
  8194  0FF6  318C  24A2         	fcall	___ftpack
  8195  0FF8  0020               	movlb	0	; select bank0
  8196  0FF9  0820               	movf	?___ftpack,w
  8197  0FFA  00BB               	movwf	?___ftdiv
  8198  0FFB  0821               	movf	?___ftpack+1,w
  8199  0FFC  00BC               	movwf	?___ftdiv+1
  8200  0FFD  0822               	movf	?___ftpack+2,w
  8201  0FFE  00BD               	movwf	?___ftdiv+2
  8202  0FFF  0008               	return
  8203  1000                     __end_of___ftdiv:	
  8204                           
  8205                           	psect	text32
  8206  0464                     __ptext32:	
  8207 ;; *************** function ___ftadd *****************
  8208 ;; Defined at:
  8209 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  8210 ;; Parameters:    Size  Location     Type
  8211 ;;  f1              3   14[BANK0 ] float 
  8212 ;;  f2              3   17[BANK0 ] float 
  8213 ;; Auto vars:     Size  Location     Type
  8214 ;;  exp1            1   26[BANK0 ] unsigned char 
  8215 ;;  exp2            1   25[BANK0 ] unsigned char 
  8216 ;;  sign            1   24[BANK0 ] unsigned char 
  8217 ;; Return value:  Size  Location     Type
  8218 ;;                  3   14[BANK0 ] float 
  8219 ;; Registers used:
  8220 ;;		wreg, status,2, status,0, pclath, cstack
  8221 ;; Tracked objects:
  8222 ;;		On entry : 0/0
  8223 ;;		On exit  : 0/0
  8224 ;;		Unchanged: 0/0
  8225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8226 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8230 ;;Total ram usage:       13 bytes
  8231 ;; Hardware stack levels used:    1
  8232 ;; Hardware stack levels required when called:    8
  8233 ;; This function calls:
  8234 ;;		___ftpack
  8235 ;; This function is called by:
  8236 ;;		_getADCValue
  8237 ;;		_loop
  8238 ;;		___ftsub
  8239 ;; This function uses a non-reentrant model
  8240 ;;
  8241                           
  8242                           
  8243                           ;psect for function ___ftadd
  8244  0464                     ___ftadd:	
  8245                           
  8246                           ;incstack = 0
  8247                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8248  0464  0020               	movlb	0	; select bank0
  8249  0465  082E               	movf	___ftadd@f1,w
  8250  0466  00B4               	movwf	??___ftadd
  8251  0467  082F               	movf	___ftadd@f1+1,w
  8252  0468  00B5               	movwf	??___ftadd+1
  8253  0469  0830               	movf	___ftadd@f1+2,w
  8254  046A  00B6               	movwf	??___ftadd+2
  8255  046B  1003               	clrc
  8256  046C  0D35               	rlf	??___ftadd+1,w
  8257  046D  0D36               	rlf	??___ftadd+2,w
  8258  046E  00B7               	movwf	??___ftadd+3
  8259  046F  0837               	movf	??___ftadd+3,w
  8260  0470  00BA               	movwf	___ftadd@exp1
  8261  0471  0831               	movf	___ftadd@f2,w
  8262  0472  00B4               	movwf	??___ftadd
  8263  0473  0832               	movf	___ftadd@f2+1,w
  8264  0474  00B5               	movwf	??___ftadd+1
  8265  0475  0833               	movf	___ftadd@f2+2,w
  8266  0476  00B6               	movwf	??___ftadd+2
  8267  0477  1003               	clrc
  8268  0478  0D35               	rlf	??___ftadd+1,w
  8269  0479  0D36               	rlf	??___ftadd+2,w
  8270  047A  00B7               	movwf	??___ftadd+3
  8271  047B  0837               	movf	??___ftadd+3,w
  8272  047C  00B9               	movwf	___ftadd@exp2
  8273  047D  083A               	movf	___ftadd@exp1,w
  8274  047E  1903               	btfsc	3,2
  8275  047F  2C8C               	goto	l2319
  8276  0480  0839               	movf	___ftadd@exp2,w
  8277  0481  023A               	subwf	___ftadd@exp1,w
  8278  0482  1803               	skipnc
  8279  0483  2C93               	goto	l2323
  8280  0484  033A               	decf	___ftadd@exp1,w
  8281  0485  3AFF               	xorlw	255
  8282  0486  0739               	addwf	___ftadd@exp2,w
  8283  0487  00B4               	movwf	??___ftadd
  8284  0488  3019               	movlw	25
  8285  0489  0234               	subwf	??___ftadd,w
  8286  048A  1C03               	skipc
  8287  048B  2C93               	goto	l2323
  8288  048C                     l2319:	
  8289  048C  0831               	movf	___ftadd@f2,w
  8290  048D  00AE               	movwf	?___ftadd
  8291  048E  0832               	movf	___ftadd@f2+1,w
  8292  048F  00AF               	movwf	?___ftadd+1
  8293  0490  0833               	movf	___ftadd@f2+2,w
  8294  0491  00B0               	movwf	?___ftadd+2
  8295  0492  0008               	return
  8296  0493                     l2323:	
  8297  0493  0839               	movf	___ftadd@exp2,w
  8298  0494  1903               	btfsc	3,2
  8299  0495  0008               	return
  8300  0496  083A               	movf	___ftadd@exp1,w
  8301  0497  0239               	subwf	___ftadd@exp2,w
  8302  0498  1803               	skipnc
  8303  0499  2CA2               	goto	l2329
  8304  049A  0339               	decf	___ftadd@exp2,w
  8305  049B  3AFF               	xorlw	255
  8306  049C  073A               	addwf	___ftadd@exp1,w
  8307  049D  00B4               	movwf	??___ftadd
  8308  049E  3019               	movlw	25
  8309  049F  0234               	subwf	??___ftadd,w
  8310  04A0  1803               	btfsc	3,0
  8311  04A1  0008               	return
  8312  04A2                     l2329:	
  8313  04A2  3006               	movlw	6
  8314  04A3  00B4               	movwf	??___ftadd
  8315  04A4  0834               	movf	??___ftadd,w
  8316  04A5  00B8               	movwf	___ftadd@sign
  8317  04A6  1BB0               	btfsc	___ftadd@f1+2,7
  8318  04A7  17B8               	bsf	___ftadd@sign,7
  8319  04A8  1BB3               	btfsc	___ftadd@f2+2,7
  8320  04A9  1738               	bsf	___ftadd@sign,6
  8321  04AA  17AF               	bsf	___ftadd@f1+1,7
  8322  04AB  30FF               	movlw	255
  8323  04AC  05AE               	andwf	___ftadd@f1,f
  8324  04AD  30FF               	movlw	255
  8325  04AE  05AF               	andwf	___ftadd@f1+1,f
  8326  04AF  3000               	movlw	0
  8327  04B0  05B0               	andwf	___ftadd@f1+2,f
  8328  04B1  17B2               	bsf	___ftadd@f2+1,7
  8329  04B2  30FF               	movlw	255
  8330  04B3  05B1               	andwf	___ftadd@f2,f
  8331  04B4  30FF               	movlw	255
  8332  04B5  05B2               	andwf	___ftadd@f2+1,f
  8333  04B6  3000               	movlw	0
  8334  04B7  05B3               	andwf	___ftadd@f2+2,f
  8335  04B8  0839               	movf	___ftadd@exp2,w
  8336  04B9  023A               	subwf	___ftadd@exp1,w
  8337  04BA  1803               	skipnc
  8338  04BB  2CDE               	goto	l2351
  8339  04BC                     l2341:	
  8340  04BC  3001               	movlw	1
  8341  04BD                     u2035:	
  8342  04BD  35B1               	lslf	___ftadd@f2,f
  8343  04BE  0DB2               	rlf	___ftadd@f2+1,f
  8344  04BF  0DB3               	rlf	___ftadd@f2+2,f
  8345  04C0  0B89               	decfsz	9,f
  8346  04C1  2CBD               	goto	u2035
  8347  04C2  3001               	movlw	1
  8348  04C3  02B9               	subwf	___ftadd@exp2,f
  8349  04C4  0839               	movf	___ftadd@exp2,w
  8350  04C5  063A               	xorwf	___ftadd@exp1,w
  8351  04C6  1903               	skipnz
  8352  04C7  2CD9               	goto	l2349
  8353  04C8  3001               	movlw	1
  8354  04C9  02B8               	subwf	___ftadd@sign,f
  8355  04CA  0838               	movf	___ftadd@sign,w
  8356  04CB  3907               	andlw	7
  8357  04CC  1903               	btfsc	3,2
  8358  04CD  2CD9               	goto	l2349
  8359  04CE  2CBC               	goto	l2341
  8360  04CF                     l2347:	
  8361  04CF  3001               	movlw	1
  8362  04D0                     u2065:	
  8363  04D0  36B0               	lsrf	___ftadd@f1+2,f
  8364  04D1  0CAF               	rrf	___ftadd@f1+1,f
  8365  04D2  0CAE               	rrf	___ftadd@f1,f
  8366  04D3  0B89               	decfsz	9,f
  8367  04D4  2CD0               	goto	u2065
  8368  04D5  3001               	movlw	1
  8369  04D6  00B4               	movwf	??___ftadd
  8370  04D7  0834               	movf	??___ftadd,w
  8371  04D8  07BA               	addwf	___ftadd@exp1,f
  8372  04D9                     l2349:	
  8373  04D9  083A               	movf	___ftadd@exp1,w
  8374  04DA  0639               	xorwf	___ftadd@exp2,w
  8375  04DB  1903               	btfsc	3,2
  8376  04DC  2D03               	goto	l705
  8377  04DD  2CCF               	goto	l2347
  8378  04DE                     l2351:	
  8379  04DE  083A               	movf	___ftadd@exp1,w
  8380  04DF  0239               	subwf	___ftadd@exp2,w
  8381  04E0  1803               	skipnc
  8382  04E1  2D03               	goto	l705
  8383  04E2                     l2353:	
  8384  04E2  3001               	movlw	1
  8385  04E3                     u2095:	
  8386  04E3  35AE               	lslf	___ftadd@f1,f
  8387  04E4  0DAF               	rlf	___ftadd@f1+1,f
  8388  04E5  0DB0               	rlf	___ftadd@f1+2,f
  8389  04E6  0B89               	decfsz	9,f
  8390  04E7  2CE3               	goto	u2095
  8391  04E8  3001               	movlw	1
  8392  04E9  02BA               	subwf	___ftadd@exp1,f
  8393  04EA  0839               	movf	___ftadd@exp2,w
  8394  04EB  063A               	xorwf	___ftadd@exp1,w
  8395  04EC  1903               	skipnz
  8396  04ED  2CFF               	goto	l2361
  8397  04EE  3001               	movlw	1
  8398  04EF  02B8               	subwf	___ftadd@sign,f
  8399  04F0  0838               	movf	___ftadd@sign,w
  8400  04F1  3907               	andlw	7
  8401  04F2  1903               	btfsc	3,2
  8402  04F3  2CFF               	goto	l2361
  8403  04F4  2CE2               	goto	l2353
  8404  04F5                     l2359:	
  8405  04F5  3001               	movlw	1
  8406  04F6                     u2125:	
  8407  04F6  36B3               	lsrf	___ftadd@f2+2,f
  8408  04F7  0CB2               	rrf	___ftadd@f2+1,f
  8409  04F8  0CB1               	rrf	___ftadd@f2,f
  8410  04F9  0B89               	decfsz	9,f
  8411  04FA  2CF6               	goto	u2125
  8412  04FB  3001               	movlw	1
  8413  04FC  00B4               	movwf	??___ftadd
  8414  04FD  0834               	movf	??___ftadd,w
  8415  04FE  07B9               	addwf	___ftadd@exp2,f
  8416  04FF                     l2361:	
  8417  04FF  083A               	movf	___ftadd@exp1,w
  8418  0500  0639               	xorwf	___ftadd@exp2,w
  8419  0501  1D03               	skipz
  8420  0502  2CF5               	goto	l2359
  8421  0503                     l705:	
  8422  0503  1FB8               	btfss	___ftadd@sign,7
  8423  0504  2D15               	goto	l2365
  8424  0505  30FF               	movlw	255
  8425  0506  06AE               	xorwf	___ftadd@f1,f
  8426  0507  30FF               	movlw	255
  8427  0508  06AF               	xorwf	___ftadd@f1+1,f
  8428  0509  30FF               	movlw	255
  8429  050A  06B0               	xorwf	___ftadd@f1+2,f
  8430  050B  3001               	movlw	1
  8431  050C  07AE               	addwf	___ftadd@f1,f
  8432  050D  3000               	movlw	0
  8433  050E  1803               	skipnc
  8434  050F  3001               	movlw	1
  8435  0510  07AF               	addwf	___ftadd@f1+1,f
  8436  0511  3000               	movlw	0
  8437  0512  1803               	skipnc
  8438  0513  3001               	movlw	1
  8439  0514  07B0               	addwf	___ftadd@f1+2,f
  8440  0515                     l2365:	
  8441  0515  1F38               	btfss	___ftadd@sign,6
  8442  0516  2D27               	goto	l2369
  8443  0517  30FF               	movlw	255
  8444  0518  06B1               	xorwf	___ftadd@f2,f
  8445  0519  30FF               	movlw	255
  8446  051A  06B2               	xorwf	___ftadd@f2+1,f
  8447  051B  30FF               	movlw	255
  8448  051C  06B3               	xorwf	___ftadd@f2+2,f
  8449  051D  3001               	movlw	1
  8450  051E  07B1               	addwf	___ftadd@f2,f
  8451  051F  3000               	movlw	0
  8452  0520  1803               	skipnc
  8453  0521  3001               	movlw	1
  8454  0522  07B2               	addwf	___ftadd@f2+1,f
  8455  0523  3000               	movlw	0
  8456  0524  1803               	skipnc
  8457  0525  3001               	movlw	1
  8458  0526  07B3               	addwf	___ftadd@f2+2,f
  8459  0527                     l2369:	
  8460  0527  01B8               	clrf	___ftadd@sign
  8461  0528  082E               	movf	___ftadd@f1,w
  8462  0529  07B1               	addwf	___ftadd@f2,f
  8463  052A  082F               	movf	___ftadd@f1+1,w
  8464  052B  3DB2               	addwfc	___ftadd@f2+1,f
  8465  052C  0830               	movf	___ftadd@f1+2,w
  8466  052D  3DB3               	addwfc	___ftadd@f2+2,f
  8467  052E  1FB3               	btfss	___ftadd@f2+2,7
  8468  052F  2D42               	goto	l2379
  8469  0530  30FF               	movlw	255
  8470  0531  06B1               	xorwf	___ftadd@f2,f
  8471  0532  30FF               	movlw	255
  8472  0533  06B2               	xorwf	___ftadd@f2+1,f
  8473  0534  30FF               	movlw	255
  8474  0535  06B3               	xorwf	___ftadd@f2+2,f
  8475  0536  3001               	movlw	1
  8476  0537  07B1               	addwf	___ftadd@f2,f
  8477  0538  3000               	movlw	0
  8478  0539  1803               	skipnc
  8479  053A  3001               	movlw	1
  8480  053B  07B2               	addwf	___ftadd@f2+1,f
  8481  053C  3000               	movlw	0
  8482  053D  1803               	skipnc
  8483  053E  3001               	movlw	1
  8484  053F  07B3               	addwf	___ftadd@f2+2,f
  8485  0540  01B8               	clrf	___ftadd@sign
  8486  0541  0AB8               	incf	___ftadd@sign,f
  8487  0542                     l2379:	
  8488  0542  0831               	movf	___ftadd@f2,w
  8489  0543  00A0               	movwf	___ftpack@arg
  8490  0544  0832               	movf	___ftadd@f2+1,w
  8491  0545  00A1               	movwf	___ftpack@arg+1
  8492  0546  0833               	movf	___ftadd@f2+2,w
  8493  0547  00A2               	movwf	___ftpack@arg+2
  8494  0548  083A               	movf	___ftadd@exp1,w
  8495  0549  00B4               	movwf	??___ftadd
  8496  054A  0834               	movf	??___ftadd,w
  8497  054B  00A3               	movwf	___ftpack@exp
  8498  054C  0838               	movf	___ftadd@sign,w
  8499  054D  00B5               	movwf	??___ftadd+1
  8500  054E  0835               	movf	??___ftadd+1,w
  8501  054F  00A4               	movwf	___ftpack@sign
  8502  0550  318C  24A2         	fcall	___ftpack
  8503  0552  0020               	movlb	0	; select bank0
  8504  0553  0820               	movf	?___ftpack,w
  8505  0554  00AE               	movwf	?___ftadd
  8506  0555  0821               	movf	?___ftpack+1,w
  8507  0556  00AF               	movwf	?___ftadd+1
  8508  0557  0822               	movf	?___ftpack+2,w
  8509  0558  00B0               	movwf	?___ftadd+2
  8510  0559  0008               	return
  8511  055A                     __end_of___ftadd:	
  8512                           
  8513                           	psect	text33
  8514  091F                     __ptext33:	
  8515 ;; *************** function ___awtoft *****************
  8516 ;; Defined at:
  8517 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  8518 ;; Parameters:    Size  Location     Type
  8519 ;;  c               2    8[BANK0 ] int 
  8520 ;; Auto vars:     Size  Location     Type
  8521 ;;  sign            1   13[BANK0 ] unsigned char 
  8522 ;; Return value:  Size  Location     Type
  8523 ;;                  3    8[BANK0 ] float 
  8524 ;; Registers used:
  8525 ;;		wreg, status,2, status,0, pclath, cstack
  8526 ;; Tracked objects:
  8527 ;;		On entry : 0/0
  8528 ;;		On exit  : 0/0
  8529 ;;		Unchanged: 0/0
  8530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8531 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8532 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8533 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8534 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8535 ;;Total ram usage:        6 bytes
  8536 ;; Hardware stack levels used:    1
  8537 ;; Hardware stack levels required when called:    8
  8538 ;; This function calls:
  8539 ;;		___ftpack
  8540 ;; This function is called by:
  8541 ;;		_getADCValue
  8542 ;; This function uses a non-reentrant model
  8543 ;;
  8544                           
  8545                           
  8546                           ;psect for function ___awtoft
  8547  091F                     ___awtoft:	
  8548                           
  8549                           ;incstack = 0
  8550                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8551  091F  0020               	movlb	0	; select bank0
  8552  0920  01AD               	clrf	___awtoft@sign
  8553  0921  1FA9               	btfss	___awtoft@c+1,7
  8554  0922  292A               	goto	l2835
  8555  0923  09A8               	comf	___awtoft@c,f
  8556  0924  09A9               	comf	___awtoft@c+1,f
  8557  0925  0AA8               	incf	___awtoft@c,f
  8558  0926  1903               	skipnz
  8559  0927  0AA9               	incf	___awtoft@c+1,f
  8560  0928  01AD               	clrf	___awtoft@sign
  8561  0929  0AAD               	incf	___awtoft@sign,f
  8562  092A                     l2835:	
  8563  092A  0828               	movf	___awtoft@c,w
  8564  092B  00A0               	movwf	___ftpack@arg
  8565  092C  0829               	movf	___awtoft@c+1,w
  8566  092D  00A1               	movwf	___ftpack@arg+1
  8567  092E  01A2               	clrf	___ftpack@arg+2
  8568  092F  308E               	movlw	142
  8569  0930  00AB               	movwf	??___awtoft
  8570  0931  082B               	movf	??___awtoft,w
  8571  0932  00A3               	movwf	___ftpack@exp
  8572  0933  082D               	movf	___awtoft@sign,w
  8573  0934  00AC               	movwf	??___awtoft+1
  8574  0935  082C               	movf	??___awtoft+1,w
  8575  0936  00A4               	movwf	___ftpack@sign
  8576  0937  318C  24A2         	fcall	___ftpack
  8577  0939  0020               	movlb	0	; select bank0
  8578  093A  0820               	movf	?___ftpack,w
  8579  093B  00A8               	movwf	?___awtoft
  8580  093C  0821               	movf	?___ftpack+1,w
  8581  093D  00A9               	movwf	?___awtoft+1
  8582  093E  0822               	movf	?___ftpack+2,w
  8583  093F  00AA               	movwf	?___awtoft+2
  8584  0940  0008               	return
  8585  0941                     __end_of___awtoft:	
  8586                           
  8587                           	psect	text34
  8588  17A0                     __ptext34:	
  8589 ;; *************** function _checkTXPower *****************
  8590 ;; Defined at:
  8591 ;;		line 108 in file "main.c"
  8592 ;; Parameters:    Size  Location     Type
  8593 ;;		None
  8594 ;; Auto vars:     Size  Location     Type
  8595 ;;  rxPacket        1    8[BANK0 ] PTR struct .
  8596 ;;		 -> RXPacket(33), 
  8597 ;; Return value:  Size  Location     Type
  8598 ;;                  1    wreg      void 
  8599 ;; Registers used:
  8600 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8601 ;; Tracked objects:
  8602 ;;		On entry : 0/0
  8603 ;;		On exit  : 0/0
  8604 ;;		Unchanged: 0/0
  8605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8607 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8608 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8609 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8610 ;;Total ram usage:        2 bytes
  8611 ;; Hardware stack levels used:    1
  8612 ;; Hardware stack levels required when called:   11
  8613 ;; This function calls:
  8614 ;;		_nrf24l01ChangeTXPower
  8615 ;;		_nrf24l01GetRXPacket
  8616 ;; This function is called by:
  8617 ;;		_loop
  8618 ;; This function uses a non-reentrant model
  8619 ;;
  8620                           
  8621                           
  8622                           ;psect for function _checkTXPower
  8623  17A0                     _checkTXPower:	
  8624                           
  8625                           ;main.c: 109: nrf24l01Packet_t * rxPacket = nrf24l01GetRXPacket();
  8626                           
  8627                           ;incstack = 0
  8628                           ; Regs used in _checkTXPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8629  17A0  3180  2002  3197   	fcall	_nrf24l01GetRXPacket
  8630  17A3  0020               	movlb	0	; select bank0
  8631  17A4  00A7               	movwf	??_checkTXPower
  8632  17A5  0827               	movf	??_checkTXPower,w
  8633  17A6  00A8               	movwf	checkTXPower@rxPacket
  8634                           
  8635                           ;main.c: 111: if (rxPacket->packetData.ACKRPD){
  8636  17A7  0828               	movf	checkTXPower@rxPacket,w
  8637  17A8  0086               	movwf	6
  8638  17A9  3001               	movlw	1	; select bank2/3
  8639  17AA  0087               	movwf	7
  8640  17AB  1C81               	btfss	1,1
  8641  17AC  0008               	return
  8642                           
  8643                           ;main.c: 112: nrf24l01ChangeTXPower(-1);
  8644  17AD  30FF               	movlw	255
  8645  17AE  00A3               	movwf	nrf24l01ChangeTXPower@addPower
  8646  17AF  30FF               	movlw	255
  8647  17B0  00A4               	movwf	nrf24l01ChangeTXPower@addPower+1
  8648  17B1  318A  22AF         	fcall	_nrf24l01ChangeTXPower
  8649  17B3  0008               	return
  8650  17B4                     __end_of_checkTXPower:	
  8651                           
  8652                           	psect	text35
  8653  0002                     __ptext35:	
  8654 ;; *************** function _nrf24l01GetRXPacket *****************
  8655 ;; Defined at:
  8656 ;;		line 131 in file "nrf24l01.c"
  8657 ;; Parameters:    Size  Location     Type
  8658 ;;		None
  8659 ;; Auto vars:     Size  Location     Type
  8660 ;;		None
  8661 ;; Return value:  Size  Location     Type
  8662 ;;                  1    wreg      PTR struct .
  8663 ;; Registers used:
  8664 ;;		wreg
  8665 ;; Tracked objects:
  8666 ;;		On entry : 0/0
  8667 ;;		On exit  : 0/0
  8668 ;;		Unchanged: 0/0
  8669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8674 ;;Total ram usage:        0 bytes
  8675 ;; Hardware stack levels used:    1
  8676 ;; Hardware stack levels required when called:    7
  8677 ;; This function calls:
  8678 ;;		Nothing
  8679 ;; This function is called by:
  8680 ;;		_checkTXPower
  8681 ;; This function uses a non-reentrant model
  8682 ;;
  8683                           
  8684                           
  8685                           ;psect for function _nrf24l01GetRXPacket
  8686  0002                     _nrf24l01GetRXPacket:	
  8687                           
  8688                           ;nrf24l01.c: 132: return &RXPacket;
  8689                           
  8690                           ;incstack = 0
  8691                           ; Regs used in _nrf24l01GetRXPacket: [wreg]
  8692  0002  30A0               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  8693  0003  0008               	return
  8694  0004                     __end_of_nrf24l01GetRXPacket:	
  8695                           
  8696                           	psect	text36
  8697  0AAF                     __ptext36:	
  8698 ;; *************** function _nrf24l01ChangeTXPower *****************
  8699 ;; Defined at:
  8700 ;;		line 33 in file "nrf24l01.c"
  8701 ;; Parameters:    Size  Location     Type
  8702 ;;  addPower        2    3[BANK0 ] int 
  8703 ;; Auto vars:     Size  Location     Type
  8704 ;;  rfSetup         1    6[BANK0 ] struct .
  8705 ;; Return value:  Size  Location     Type
  8706 ;;                  1    wreg      void 
  8707 ;; Registers used:
  8708 ;;		wreg, status,2, status,0, pclath, cstack
  8709 ;; Tracked objects:
  8710 ;;		On entry : 0/0
  8711 ;;		On exit  : 0/0
  8712 ;;		Unchanged: 0/0
  8713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8714 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8715 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8716 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8717 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8718 ;;Total ram usage:        4 bytes
  8719 ;; Hardware stack levels used:    1
  8720 ;; Hardware stack levels required when called:   10
  8721 ;; This function calls:
  8722 ;;		_nrf24l01Send
  8723 ;; This function is called by:
  8724 ;;		_checkTXPower
  8725 ;;		_nrf24l01SendPacket
  8726 ;; This function uses a non-reentrant model
  8727 ;;
  8728                           
  8729                           
  8730                           ;psect for function _nrf24l01ChangeTXPower
  8731  0AAF                     _nrf24l01ChangeTXPower:	
  8732                           
  8733                           ;nrf24l01.c: 35: n_RF_SETUP_t rfSetup;;nrf24l01.c: 36: rfSetup.byte = nrf24l01Send((unsi
      +                          gned) 0b00000000 | (unsigned) 0x06, 0);
  8734                           
  8735                           ;incstack = 0
  8736                           ; Regs used in _nrf24l01ChangeTXPower: [wreg+status,2+status,0+pclath+cstack]
  8737  0AAF  0020               	movlb	0	; select bank0
  8738  0AB0  01A0               	clrf	nrf24l01Send@data
  8739  0AB1  3006               	movlw	6
  8740  0AB2  3188  20DE  318A   	fcall	_nrf24l01Send
  8741  0AB5  0020               	movlb	0	; select bank0
  8742  0AB6  00A5               	movwf	??_nrf24l01ChangeTXPower
  8743  0AB7  0825               	movf	??_nrf24l01ChangeTXPower,w
  8744  0AB8  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
  8745                           
  8746                           ;nrf24l01.c: 38: if (addPower > 0){
  8747  0AB9  0824               	movf	nrf24l01ChangeTXPower@addPower+1,w
  8748  0ABA  3A80               	xorlw	128
  8749  0ABB  00A5               	movwf	??_nrf24l01ChangeTXPower
  8750  0ABC  3080               	movlw	128
  8751  0ABD  0225               	subwf	??_nrf24l01ChangeTXPower,w
  8752  0ABE  1D03               	skipz
  8753  0ABF  2AC2               	goto	u2805
  8754  0AC0  3001               	movlw	1
  8755  0AC1  0223               	subwf	nrf24l01ChangeTXPower@addPower,w
  8756  0AC2                     u2805:	
  8757  0AC2  1C03               	skipc
  8758  0AC3  2AD4               	goto	l2773
  8759                           
  8760                           ;nrf24l01.c: 39: if (rfSetup.RF_PWR < 3){
  8761  0AC4  0020               	movlb	0	; select bank0
  8762  0AC5  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  8763  0AC6  3903               	andlw	3
  8764  0AC7  3A03               	xorlw	3
  8765  0AC8  1903               	skipnz
  8766  0AC9  2AD4               	goto	l2773
  8767                           
  8768                           ;nrf24l01.c: 40: rfSetup.RF_PWR++;
  8769  0ACA  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  8770  0ACB  3903               	andlw	3
  8771  0ACC  00A5               	movwf	??_nrf24l01ChangeTXPower
  8772  0ACD  0AA5               	incf	??_nrf24l01ChangeTXPower,f
  8773  0ACE  0DA5               	rlf	??_nrf24l01ChangeTXPower,f
  8774  0ACF  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
  8775  0AD0  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  8776  0AD1  39F9               	andlw	-7
  8777  0AD2  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  8778  0AD3  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
  8779  0AD4                     l2773:	
  8780                           
  8781                           ;nrf24l01.c: 41: };nrf24l01.c: 42: };nrf24l01.c: 44: if (addPower < 0){
  8782  0AD4  0020               	movlb	0	; select bank0
  8783  0AD5  1FA4               	btfss	nrf24l01ChangeTXPower@addPower+1,7
  8784  0AD6  2AE6               	goto	l2779
  8785                           
  8786                           ;nrf24l01.c: 45: if (rfSetup.RF_PWR > 0){
  8787  0AD7  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  8788  0AD8  3903               	andlw	3
  8789  0AD9  3A00               	xorlw	0
  8790  0ADA  1903               	skipnz
  8791  0ADB  2AE6               	goto	l2779
  8792                           
  8793                           ;nrf24l01.c: 46: rfSetup.RF_PWR--;
  8794  0ADC  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  8795  0ADD  3903               	andlw	3
  8796  0ADE  00A5               	movwf	??_nrf24l01ChangeTXPower
  8797  0ADF  03A5               	decf	??_nrf24l01ChangeTXPower,f
  8798  0AE0  0DA5               	rlf	??_nrf24l01ChangeTXPower,f
  8799  0AE1  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
  8800  0AE2  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  8801  0AE3  39F9               	andlw	-7
  8802  0AE4  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  8803  0AE5  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
  8804  0AE6                     l2779:	
  8805                           
  8806                           ;nrf24l01.c: 47: };nrf24l01.c: 48: };nrf24l01.c: 50: nrf24l01Send((unsigned) 0b00100000 
      +                          | (unsigned) 0x06, rfSetup.byte);
  8807  0AE6  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
  8808  0AE7  00A5               	movwf	??_nrf24l01ChangeTXPower
  8809  0AE8  0825               	movf	??_nrf24l01ChangeTXPower,w
  8810  0AE9  00A0               	movwf	nrf24l01Send@data
  8811  0AEA  3026               	movlw	38
  8812  0AEB  3188  20DE         	fcall	_nrf24l01Send
  8813  0AED  0008               	return
  8814  0AEE                     __end_of_nrf24l01ChangeTXPower:	
  8815                           
  8816                           	psect	text37
  8817  08DE                     __ptext37:	
  8818 ;; *************** function _nrf24l01Send *****************
  8819 ;; Defined at:
  8820 ;;		line 9 in file "nrf24l01.c"
  8821 ;; Parameters:    Size  Location     Type
  8822 ;;  command         1    wreg     unsigned char 
  8823 ;;  data            1    0[BANK0 ] unsigned char 
  8824 ;; Auto vars:     Size  Location     Type
  8825 ;;  command         1    2[BANK0 ] unsigned char 
  8826 ;; Return value:  Size  Location     Type
  8827 ;;                  1    wreg      unsigned char 
  8828 ;; Registers used:
  8829 ;;		wreg, status,2, status,0, pclath, cstack
  8830 ;; Tracked objects:
  8831 ;;		On entry : 0/0
  8832 ;;		On exit  : 0/0
  8833 ;;		Unchanged: 0/0
  8834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8835 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8836 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8837 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8838 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8839 ;;Total ram usage:        3 bytes
  8840 ;; Hardware stack levels used:    1
  8841 ;; Hardware stack levels required when called:    9
  8842 ;; This function calls:
  8843 ;;		_enableInterrupts
  8844 ;;		_nrf24l01SPIEnd
  8845 ;;		_nrf24l01SPISend
  8846 ;;		_nrf24l01SPIStart
  8847 ;; This function is called by:
  8848 ;;		_loop
  8849 ;;		_nrf24l01ChangeTXPower
  8850 ;;		_nrf24l01SetRXMode
  8851 ;;		_nrf24l01SetRXPipe
  8852 ;;		_nrf24l01InitRegisters
  8853 ;; This function uses a non-reentrant model
  8854 ;;
  8855                           
  8856                           
  8857                           ;psect for function _nrf24l01Send
  8858  08DE                     _nrf24l01Send:	
  8859                           
  8860                           ;incstack = 0
  8861                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  8862                           ;nrf24l01Send@command stored from wreg
  8863  08DE  0020               	movlb	0	; select bank0
  8864  08DF  00A2               	movwf	nrf24l01Send@command
  8865                           
  8866                           ;nrf24l01.c: 12: enableInterrupts(0);
  8867  08E0  3000               	movlw	0
  8868  08E1  3197  2759  3188   	fcall	_enableInterrupts
  8869                           
  8870                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  8871  08E4  3197  2761  3188   	fcall	_nrf24l01SPIStart
  8872                           
  8873                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  8874  08E7  0020               	movlb	0	; select bank0
  8875  08E8  0822               	movf	nrf24l01Send@command,w
  8876  08E9  3197  2772  3188   	fcall	_nrf24l01SPISend
  8877                           
  8878                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  8879  08EC  0020               	movlb	0	; select bank0
  8880  08ED  0820               	movf	nrf24l01Send@data,w
  8881  08EE  3197  2772  3188   	fcall	_nrf24l01SPISend
  8882  08F1  0020               	movlb	0	; select bank0
  8883  08F2  00A1               	movwf	??_nrf24l01Send
  8884  08F3  0821               	movf	??_nrf24l01Send,w
  8885  08F4  00A0               	movwf	nrf24l01Send@data
  8886                           
  8887                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  8888  08F5  3197  2752  3188   	fcall	_nrf24l01SPIEnd
  8889                           
  8890                           ;nrf24l01.c: 27: enableInterrupts(1);
  8891  08F8  3001               	movlw	1
  8892  08F9  3197  2759         	fcall	_enableInterrupts
  8893                           
  8894                           ;nrf24l01.c: 29: return data;
  8895  08FB  0020               	movlb	0	; select bank0
  8896  08FC  0820               	movf	nrf24l01Send@data,w
  8897  08FD  0008               	return
  8898  08FE                     __end_of_nrf24l01Send:	
  8899                           
  8900                           	psect	text38
  8901  0817                     __ptext38:	
  8902 ;; *************** function ___lbtoft *****************
  8903 ;; Defined at:
  8904 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
  8905 ;; Parameters:    Size  Location     Type
  8906 ;;  c               1    wreg     unsigned char 
  8907 ;; Auto vars:     Size  Location     Type
  8908 ;;  c               1   15[BANK0 ] unsigned char 
  8909 ;; Return value:  Size  Location     Type
  8910 ;;                  3    8[BANK0 ] float 
  8911 ;; Registers used:
  8912 ;;		wreg, status,2, status,0, pclath, cstack
  8913 ;; Tracked objects:
  8914 ;;		On entry : 0/0
  8915 ;;		On exit  : 0/0
  8916 ;;		Unchanged: 0/0
  8917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8918 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8919 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8920 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8921 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8922 ;;Total ram usage:        8 bytes
  8923 ;; Hardware stack levels used:    1
  8924 ;; Hardware stack levels required when called:    8
  8925 ;; This function calls:
  8926 ;;		___ftpack
  8927 ;; This function is called by:
  8928 ;;		_loop
  8929 ;; This function uses a non-reentrant model
  8930 ;;
  8931                           
  8932                           
  8933                           ;psect for function ___lbtoft
  8934  0817                     ___lbtoft:	
  8935                           
  8936                           ;incstack = 0
  8937                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  8938                           ;___lbtoft@c stored from wreg
  8939  0817  0020               	movlb	0	; select bank0
  8940  0818  00AF               	movwf	___lbtoft@c
  8941  0819  082F               	movf	___lbtoft@c,w
  8942  081A  00AB               	movwf	??___lbtoft
  8943  081B  01AC               	clrf	??___lbtoft+1
  8944  081C  01AD               	clrf	??___lbtoft+2
  8945  081D  082B               	movf	??___lbtoft,w
  8946  081E  00A0               	movwf	___ftpack@arg
  8947  081F  082C               	movf	??___lbtoft+1,w
  8948  0820  00A1               	movwf	___ftpack@arg+1
  8949  0821  082D               	movf	??___lbtoft+2,w
  8950  0822  00A2               	movwf	___ftpack@arg+2
  8951  0823  308E               	movlw	142
  8952  0824  00AE               	movwf	??___lbtoft+3
  8953  0825  082E               	movf	??___lbtoft+3,w
  8954  0826  00A3               	movwf	___ftpack@exp
  8955  0827  01A4               	clrf	___ftpack@sign
  8956  0828  318C  24A2         	fcall	___ftpack
  8957  082A  0020               	movlb	0	; select bank0
  8958  082B  0820               	movf	?___ftpack,w
  8959  082C  00A8               	movwf	?___lbtoft
  8960  082D  0821               	movf	?___ftpack+1,w
  8961  082E  00A9               	movwf	?___lbtoft+1
  8962  082F  0822               	movf	?___ftpack+2,w
  8963  0830  00AA               	movwf	?___lbtoft+2
  8964  0831  0008               	return
  8965  0832                     __end_of___lbtoft:	
  8966                           
  8967                           	psect	text39
  8968  0802                     __ptext39:	
  8969 ;; *************** function ___lwtoft *****************
  8970 ;; Defined at:
  8971 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
  8972 ;; Parameters:    Size  Location     Type
  8973 ;;  c               2    8[BANK0 ] unsigned int 
  8974 ;; Auto vars:     Size  Location     Type
  8975 ;;		None
  8976 ;; Return value:  Size  Location     Type
  8977 ;;                  3    8[BANK0 ] float 
  8978 ;; Registers used:
  8979 ;;		wreg, status,2, status,0, pclath, cstack
  8980 ;; Tracked objects:
  8981 ;;		On entry : 0/0
  8982 ;;		On exit  : 0/0
  8983 ;;		Unchanged: 0/0
  8984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8985 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8987 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8988 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8989 ;;Total ram usage:        4 bytes
  8990 ;; Hardware stack levels used:    1
  8991 ;; Hardware stack levels required when called:    8
  8992 ;; This function calls:
  8993 ;;		___ftpack
  8994 ;; This function is called by:
  8995 ;;		_main
  8996 ;; This function uses a non-reentrant model
  8997 ;;
  8998                           
  8999                           
  9000                           ;psect for function ___lwtoft
  9001  0802                     ___lwtoft:	
  9002                           
  9003                           ;incstack = 0
  9004                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  9005  0802  0020               	movlb	0	; select bank0
  9006  0803  0828               	movf	___lwtoft@c,w
  9007  0804  00A0               	movwf	___ftpack@arg
  9008  0805  0829               	movf	___lwtoft@c+1,w
  9009  0806  00A1               	movwf	___ftpack@arg+1
  9010  0807  01A2               	clrf	___ftpack@arg+2
  9011  0808  308E               	movlw	142
  9012  0809  00AB               	movwf	??___lwtoft
  9013  080A  082B               	movf	??___lwtoft,w
  9014  080B  00A3               	movwf	___ftpack@exp
  9015  080C  01A4               	clrf	___ftpack@sign
  9016  080D  318C  24A2         	fcall	___ftpack
  9017  080F  0020               	movlb	0	; select bank0
  9018  0810  0820               	movf	?___ftpack,w
  9019  0811  00A8               	movwf	?___lwtoft
  9020  0812  0821               	movf	?___ftpack+1,w
  9021  0813  00A9               	movwf	?___lwtoft+1
  9022  0814  0822               	movf	?___ftpack+2,w
  9023  0815  00AA               	movwf	?___lwtoft+2
  9024  0816  0008               	return
  9025  0817                     __end_of___lwtoft:	
  9026                           
  9027                           	psect	text40
  9028  0CA2                     __ptext40:	
  9029 ;; *************** function ___ftpack *****************
  9030 ;; Defined at:
  9031 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  9032 ;; Parameters:    Size  Location     Type
  9033 ;;  arg             3    0[BANK0 ] unsigned um
  9034 ;;  exp             1    3[BANK0 ] unsigned char 
  9035 ;;  sign            1    4[BANK0 ] unsigned char 
  9036 ;; Auto vars:     Size  Location     Type
  9037 ;;		None
  9038 ;; Return value:  Size  Location     Type
  9039 ;;                  3    0[BANK0 ] float 
  9040 ;; Registers used:
  9041 ;;		wreg, status,2, status,0
  9042 ;; Tracked objects:
  9043 ;;		On entry : 0/0
  9044 ;;		On exit  : 0/0
  9045 ;;		Unchanged: 0/0
  9046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9047 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9049 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9050 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9051 ;;Total ram usage:        8 bytes
  9052 ;; Hardware stack levels used:    1
  9053 ;; Hardware stack levels required when called:    7
  9054 ;; This function calls:
  9055 ;;		Nothing
  9056 ;; This function is called by:
  9057 ;;		___awtoft
  9058 ;;		___ftadd
  9059 ;;		___ftdiv
  9060 ;;		___ftmul
  9061 ;;		___lbtoft
  9062 ;;		___lltoft
  9063 ;;		___lwtoft
  9064 ;; This function uses a non-reentrant model
  9065 ;;
  9066                           
  9067                           
  9068                           ;psect for function ___ftpack
  9069  0CA2                     ___ftpack:	
  9070                           
  9071                           ;incstack = 0
  9072                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9073  0CA2  0020               	movlb	0	; select bank0
  9074  0CA3  0823               	movf	___ftpack@exp,w
  9075  0CA4  1903               	btfsc	3,2
  9076  0CA5  2CAB               	goto	l2217
  9077  0CA6  0822               	movf	___ftpack@arg+2,w
  9078  0CA7  0421               	iorwf	___ftpack@arg+1,w
  9079  0CA8  0420               	iorwf	___ftpack@arg,w
  9080  0CA9  1D03               	skipz
  9081  0CAA  2CBC               	goto	l2223
  9082  0CAB                     l2217:	
  9083  0CAB  3000               	movlw	0
  9084  0CAC  00A0               	movwf	?___ftpack
  9085  0CAD  3000               	movlw	0
  9086  0CAE  00A1               	movwf	?___ftpack+1
  9087  0CAF  3000               	movlw	0
  9088  0CB0  00A2               	movwf	?___ftpack+2
  9089  0CB1  0008               	return
  9090  0CB2                     l2221:	
  9091  0CB2  3001               	movlw	1
  9092  0CB3  00A5               	movwf	??___ftpack
  9093  0CB4  0825               	movf	??___ftpack,w
  9094  0CB5  07A3               	addwf	___ftpack@exp,f
  9095  0CB6  3001               	movlw	1
  9096  0CB7                     u1705:	
  9097  0CB7  36A2               	lsrf	___ftpack@arg+2,f
  9098  0CB8  0CA1               	rrf	___ftpack@arg+1,f
  9099  0CB9  0CA0               	rrf	___ftpack@arg,f
  9100  0CBA  0B89               	decfsz	9,f
  9101  0CBB  2CB7               	goto	u1705
  9102  0CBC                     l2223:	
  9103  0CBC  30FE               	movlw	254
  9104  0CBD  0522               	andwf	___ftpack@arg+2,w
  9105  0CBE  1903               	btfsc	3,2
  9106  0CBF  2CD5               	goto	l674
  9107  0CC0  2CB2               	goto	l2221
  9108  0CC1                     l2225:	
  9109  0CC1  3001               	movlw	1
  9110  0CC2  00A5               	movwf	??___ftpack
  9111  0CC3  0825               	movf	??___ftpack,w
  9112  0CC4  07A3               	addwf	___ftpack@exp,f
  9113  0CC5  3001               	movlw	1
  9114  0CC6  07A0               	addwf	___ftpack@arg,f
  9115  0CC7  3000               	movlw	0
  9116  0CC8  1803               	skipnc
  9117  0CC9  3001               	movlw	1
  9118  0CCA  07A1               	addwf	___ftpack@arg+1,f
  9119  0CCB  3000               	movlw	0
  9120  0CCC  1803               	skipnc
  9121  0CCD  3001               	movlw	1
  9122  0CCE  07A2               	addwf	___ftpack@arg+2,f
  9123  0CCF  3001               	movlw	1
  9124  0CD0                     u1725:	
  9125  0CD0  36A2               	lsrf	___ftpack@arg+2,f
  9126  0CD1  0CA1               	rrf	___ftpack@arg+1,f
  9127  0CD2  0CA0               	rrf	___ftpack@arg,f
  9128  0CD3  0B89               	decfsz	9,f
  9129  0CD4  2CD0               	goto	u1725
  9130  0CD5                     l674:	
  9131  0CD5  30FF               	movlw	255
  9132  0CD6  0522               	andwf	___ftpack@arg+2,w
  9133  0CD7  1903               	btfsc	3,2
  9134  0CD8  2CE2               	goto	l2233
  9135  0CD9  2CC1               	goto	l2225
  9136  0CDA                     l2231:	
  9137  0CDA  3001               	movlw	1
  9138  0CDB  02A3               	subwf	___ftpack@exp,f
  9139  0CDC  3001               	movlw	1
  9140  0CDD                     u1745:	
  9141  0CDD  35A0               	lslf	___ftpack@arg,f
  9142  0CDE  0DA1               	rlf	___ftpack@arg+1,f
  9143  0CDF  0DA2               	rlf	___ftpack@arg+2,f
  9144  0CE0  0B89               	decfsz	9,f
  9145  0CE1  2CDD               	goto	u1745
  9146  0CE2                     l2233:	
  9147  0CE2  1BA1               	btfsc	___ftpack@arg+1,7
  9148  0CE3  2CE8               	goto	l681
  9149  0CE4  3002               	movlw	2
  9150  0CE5  0223               	subwf	___ftpack@exp,w
  9151  0CE6  1803               	skipnc
  9152  0CE7  2CDA               	goto	l2231
  9153  0CE8                     l681:	
  9154  0CE8  1823               	btfsc	___ftpack@exp,0
  9155  0CE9  2CF0               	goto	l682
  9156  0CEA  30FF               	movlw	255
  9157  0CEB  05A0               	andwf	___ftpack@arg,f
  9158  0CEC  307F               	movlw	127
  9159  0CED  05A1               	andwf	___ftpack@arg+1,f
  9160  0CEE  30FF               	movlw	255
  9161  0CEF  05A2               	andwf	___ftpack@arg+2,f
  9162  0CF0                     l682:	
  9163  0CF0  1003               	clrc
  9164  0CF1  0CA3               	rrf	___ftpack@exp,f
  9165  0CF2  0823               	movf	___ftpack@exp,w
  9166  0CF3  00A5               	movwf	??___ftpack
  9167  0CF4  01A6               	clrf	??___ftpack+1
  9168  0CF5  01A7               	clrf	??___ftpack+2
  9169  0CF6  3010               	movlw	16
  9170  0CF7                     u1785:	
  9171  0CF7  35A5               	lslf	??___ftpack,f
  9172  0CF8  0DA6               	rlf	??___ftpack+1,f
  9173  0CF9  0DA7               	rlf	??___ftpack+2,f
  9174  0CFA  0B89               	decfsz	9,f
  9175  0CFB  2CF7               	goto	u1785
  9176  0CFC  0825               	movf	??___ftpack,w
  9177  0CFD  04A0               	iorwf	___ftpack@arg,f
  9178  0CFE  0826               	movf	??___ftpack+1,w
  9179  0CFF  04A1               	iorwf	___ftpack@arg+1,f
  9180  0D00  0827               	movf	??___ftpack+2,w
  9181  0D01  04A2               	iorwf	___ftpack@arg+2,f
  9182  0D02  0824               	movf	___ftpack@sign,w
  9183  0D03  1903               	btfsc	3,2
  9184  0D04  0008               	return
  9185  0D05  17A2               	bsf	___ftpack@arg+2,7
  9186  0D06  0008               	return
  9187  0D07                     __end_of___ftpack:	
  9188                           
  9189                           	psect	intentry
  9190  0004                     __pintentry:	
  9191 ;; *************** function _ISR *****************
  9192 ;; Defined at:
  9193 ;;		line 14 in file "main.c"
  9194 ;; Parameters:    Size  Location     Type
  9195 ;;		None
  9196 ;; Auto vars:     Size  Location     Type
  9197 ;;		None
  9198 ;; Return value:  Size  Location     Type
  9199 ;;                  1    wreg      void 
  9200 ;; Registers used:
  9201 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9202 ;; Tracked objects:
  9203 ;;		On entry : 0/0
  9204 ;;		On exit  : 0/0
  9205 ;;		Unchanged: 0/0
  9206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9211 ;;Total ram usage:        0 bytes
  9212 ;; Hardware stack levels used:    1
  9213 ;; Hardware stack levels required when called:    6
  9214 ;; This function calls:
  9215 ;;		_nrf24l01ISR
  9216 ;; This function is called by:
  9217 ;;		Interrupt level 1
  9218 ;; This function uses a non-reentrant model
  9219 ;;
  9220                           
  9221  0004                     _ISR:	
  9222                           
  9223                           ;incstack = 0
  9224  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9225                           
  9226                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9227  0005  3180               	pagesel	$
  9228                           
  9229                           ;main.c: 16: if (PIR0bits.INTF){
  9230  0006  0020               	movlb	0	; select bank0
  9231  0007  1C10               	btfss	16,0	;volatile
  9232  0008  280D               	goto	i1l165
  9233                           
  9234                           ;main.c: 17: nrf24l01ISR();
  9235  0009  318B  23B9         	fcall	_nrf24l01ISR
  9236                           
  9237                           ;main.c: 18: PIR0bits.INTF = 0;
  9238  000B  0020               	movlb	0	; select bank0
  9239  000C  1010               	bcf	16,0	;volatile
  9240  000D                     i1l165:	
  9241  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9242  000E  0009               	retfie
  9243  000F                     __end_of_ISR:	
  9244                           
  9245                           	psect	text42
  9246  0BB9                     __ptext42:	
  9247 ;; *************** function _nrf24l01ISR *****************
  9248 ;; Defined at:
  9249 ;;		line 246 in file "nrf24l01.c"
  9250 ;; Parameters:    Size  Location     Type
  9251 ;;		None
  9252 ;; Auto vars:     Size  Location     Type
  9253 ;;  status          1   12[COMMON] struct .
  9254 ;; Return value:  Size  Location     Type
  9255 ;;                  1    wreg      void 
  9256 ;; Registers used:
  9257 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9258 ;; Tracked objects:
  9259 ;;		On entry : 0/0
  9260 ;;		On exit  : 0/0
  9261 ;;		Unchanged: 0/0
  9262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9264 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9265 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9266 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;Total ram usage:        2 bytes
  9268 ;; Hardware stack levels used:    1
  9269 ;; Hardware stack levels required when called:    5
  9270 ;; This function calls:
  9271 ;;		_exception
  9272 ;;		_nrf24l01CheckACK
  9273 ;;		_nrf24l01ReceivePacket
  9274 ;;		i1_nrf24l01Send
  9275 ;;		i1_nrf24l01SetRXMode
  9276 ;; This function is called by:
  9277 ;;		_ISR
  9278 ;; This function uses a non-reentrant model
  9279 ;;
  9280                           
  9281                           
  9282                           ;psect for function _nrf24l01ISR
  9283  0BB9                     _nrf24l01ISR:	
  9284                           
  9285                           ;nrf24l01.c: 248: n_STATUS_t status;;nrf24l01.c: 249: status.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x07, 0);
  9286                           
  9287                           ;incstack = 0
  9288                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9289  0BB9  01F1               	clrf	i1nrf24l01Send@data
  9290  0BBA  3007               	movlw	7
  9291  0BBB  3197  27E5  318B   	fcall	i1_nrf24l01Send
  9292  0BBE  00FB               	movwf	??_nrf24l01ISR
  9293  0BBF  087B               	movf	??_nrf24l01ISR,w
  9294  0BC0  00FC               	movwf	nrf24l01ISR@status
  9295                           
  9296                           ;nrf24l01.c: 254: };nrf24l01.c: 257: if (status.byte == 0xFF){
  9297  0BC1  0A7C               	incf	nrf24l01ISR@status,w
  9298  0BC2  1D03               	btfss	3,2
  9299  0BC3  2BC8               	goto	i1l3217
  9300                           
  9301                           ;nrf24l01.c: 258: exception(2);
  9302  0BC4  3002               	movlw	2
  9303  0BC5  3188  2000  318B   	fcall	_exception
  9304  0BC8                     i1l3217:	
  9305                           
  9306                           ;nrf24l01.c: 259: };nrf24l01.c: 261: if (status.TX_DS){
  9307  0BC8  1EFC               	btfss	nrf24l01ISR@status,5
  9308  0BC9  2BD8               	goto	i1l3225
  9309                           
  9310                           ;nrf24l01.c: 264: nrf24l01.TXBusy = 0;
  9311  0BCA  107D               	bcf	_nrf24l01,0	;volatile
  9312                           
  9313                           ;nrf24l01.c: 267: if (!nrf24l01.RXMode){
  9314  0BCB  197D               	btfsc	_nrf24l01,2	;volatile
  9315  0BCC  2BD8               	goto	i1l3225
  9316                           
  9317                           ;nrf24l01.c: 268: if (TXPacket->packetData.ACKRequest){
  9318  0BCD  0021               	movlb	1	; select bank1
  9319  0BCE  086B               	movf	_TXPacket^(0+128),w
  9320  0BCF  0086               	movwf	6
  9321  0BD0  086C               	movf	(_TXPacket+1)^(0+128),w
  9322  0BD1  0087               	movwf	7
  9323  0BD2  1D01               	btfss	1,2
  9324  0BD3  2BD8               	goto	i1l3225
  9325                           
  9326                           ;nrf24l01.c: 271: nrf24l01SetRXMode(1);
  9327  0BD4  3001               	movlw	1
  9328  0BD5  318A  2270  318B   	fcall	i1_nrf24l01SetRXMode
  9329  0BD8                     i1l3225:	
  9330                           
  9331                           ;nrf24l01.c: 272: };nrf24l01.c: 273: };nrf24l01.c: 274: };nrf24l01.c: 277: if (status.RX
      +                          _DR){
  9332  0BD8  1F7C               	btfss	nrf24l01ISR@status,6
  9333  0BD9  2BFA               	goto	i1l3239
  9334                           
  9335                           ;nrf24l01.c: 280: if (!nrf24l01.RXPending){
  9336  0BDA  18FD               	btfsc	_nrf24l01,1	;volatile
  9337  0BDB  2BF9               	goto	i1l316
  9338                           
  9339                           ;nrf24l01.c: 283: nrf24l01.RXPending = 1;
  9340  0BDC  14FD               	bsf	_nrf24l01,1	;volatile
  9341                           
  9342                           ;nrf24l01.c: 285: nrf24l01ReceivePacket();
  9343  0BDD  318C  2402  318B   	fcall	_nrf24l01ReceivePacket
  9344                           
  9345                           ;nrf24l01.c: 288: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  9346  0BE0  01F1               	clrf	i1nrf24l01Send@data
  9347  0BE1  3009               	movlw	9
  9348  0BE2  3197  27E5  318B   	fcall	i1_nrf24l01Send
  9349  0BE5  00FB               	movwf	??_nrf24l01ISR
  9350  0BE6  0023               	movlb	3	; select bank3
  9351  0BE7  0820               	movf	_RXPacket^(0+384),w
  9352  0BE8  067B               	xorwf	??_nrf24l01ISR,w
  9353  0BE9  39FE               	andlw	-2
  9354  0BEA  067B               	xorwf	??_nrf24l01ISR,w
  9355  0BEB  00A0               	movwf	_RXPacket^(0+384)
  9356                           
  9357                           ;nrf24l01.c: 291: RXPacket.packetData.Pipe = status.RX_P_NO;
  9358  0BEC  0C7C               	rrf	nrf24l01ISR@status,w
  9359  0BED  3907               	andlw	7
  9360  0BEE  00FB               	movwf	??_nrf24l01ISR
  9361  0BEF  0EFB               	swapf	??_nrf24l01ISR,f
  9362  0BF0  0820               	movf	_RXPacket^(0+384),w
  9363  0BF1  067B               	xorwf	??_nrf24l01ISR,w
  9364  0BF2  398F               	andlw	-113
  9365  0BF3  067B               	xorwf	??_nrf24l01ISR,w
  9366  0BF4  00A0               	movwf	_RXPacket^(0+384)
  9367                           
  9368                           ;nrf24l01.c: 293: nrf24l01CheckACK();
  9369  0BF5  3189  21B3  318B   	fcall	_nrf24l01CheckACK
  9370                           
  9371                           ;nrf24l01.c: 294: }
  9372  0BF8  2BFA               	goto	i1l3239
  9373  0BF9                     i1l316:	
  9374                           
  9375                           ;nrf24l01.c: 297: else{;nrf24l01.c: 300: status.RX_DR = 0;
  9376  0BF9  137C               	bcf	nrf24l01ISR@status,6
  9377  0BFA                     i1l3239:	
  9378                           
  9379                           ;nrf24l01.c: 301: };nrf24l01.c: 303: };nrf24l01.c: 306: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.byte);
  9380  0BFA  087C               	movf	nrf24l01ISR@status,w
  9381  0BFB  00FB               	movwf	??_nrf24l01ISR
  9382  0BFC  087B               	movf	??_nrf24l01ISR,w
  9383  0BFD  00F1               	movwf	i1nrf24l01Send@data
  9384  0BFE  3027               	movlw	39
  9385  0BFF  3197  27E5         	fcall	i1_nrf24l01Send
  9386  0C01  0008               	return
  9387  0C02                     __end_of_nrf24l01ISR:	
  9388                           
  9389                           	psect	text43
  9390  0C02                     __ptext43:	
  9391 ;; *************** function _nrf24l01ReceivePacket *****************
  9392 ;; Defined at:
  9393 ;;		line 135 in file "nrf24l01.c"
  9394 ;; Parameters:    Size  Location     Type
  9395 ;;		None
  9396 ;; Auto vars:     Size  Location     Type
  9397 ;;  i               1   10[COMMON] unsigned char 
  9398 ;;  width           1    9[COMMON] unsigned char 
  9399 ;; Return value:  Size  Location     Type
  9400 ;;                  1    wreg      void 
  9401 ;; Registers used:
  9402 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9403 ;; Tracked objects:
  9404 ;;		On entry : 0/0
  9405 ;;		On exit  : 0/0
  9406 ;;		Unchanged: 0/0
  9407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9409 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9410 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9411 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9412 ;;Total ram usage:        3 bytes
  9413 ;; Hardware stack levels used:    1
  9414 ;; Hardware stack levels required when called:    3
  9415 ;; This function calls:
  9416 ;;		_nrf24l01CEHigh
  9417 ;;		_nrf24l01CELow
  9418 ;;		_nrf24l01SPIEnd
  9419 ;;		_nrf24l01SPISend
  9420 ;;		_nrf24l01SPIStart
  9421 ;;		i1_memset
  9422 ;;		i1_nrf24l01Send
  9423 ;; This function is called by:
  9424 ;;		_nrf24l01ISR
  9425 ;; This function uses a non-reentrant model
  9426 ;;
  9427                           
  9428                           
  9429                           ;psect for function _nrf24l01ReceivePacket
  9430  0C02                     _nrf24l01ReceivePacket:	
  9431                           
  9432                           ;nrf24l01.c: 138: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  9433                           
  9434                           ;incstack = 0
  9435                           ; Regs used in _nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9436  0C02  30A1               	movlw	low (_RXPacket+1)
  9437  0C03  00F0               	movwf	i1memset@p1
  9438  0C04  3001               	movlw	high (_RXPacket+1)
  9439  0C05  00F1               	movwf	i1memset@p1+1
  9440  0C06  3000               	movlw	0
  9441  0C07  00F2               	movwf	i1memset@c
  9442  0C08  00F3               	movwf	i1memset@c+1
  9443  0C09  3020               	movlw	32
  9444  0C0A  00F4               	movwf	i1memset@n
  9445  0C0B  3000               	movlw	0
  9446  0C0C  00F5               	movwf	i1memset@n+1
  9447  0C0D  3197  27B4  318C   	fcall	i1_memset
  9448                           
  9449                           ;nrf24l01.c: 139: RXPacket.packetData.byte = 0x00;
  9450  0C10  0023               	movlb	3	; select bank3
  9451  0C11  01A0               	clrf	_RXPacket^(0+384)
  9452                           
  9453                           ;nrf24l01.c: 142: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  9454  0C12  01F1               	clrf	i1nrf24l01Send@data
  9455  0C13  3060               	movlw	96
  9456  0C14  3197  27E5  318C   	fcall	i1_nrf24l01Send
  9457  0C17  00F8               	movwf	??_nrf24l01ReceivePacket
  9458  0C18  0878               	movf	??_nrf24l01ReceivePacket,w
  9459  0C19  00F9               	movwf	nrf24l01ReceivePacket@width
  9460                           
  9461                           ;nrf24l01.c: 143: unsigned char i = 0;
  9462  0C1A  01FA               	clrf	nrf24l01ReceivePacket@i
  9463                           
  9464                           ;nrf24l01.c: 146: nrf24l01CELow();
  9465  0C1B  3197  2743  318C   	fcall	_nrf24l01CELow
  9466                           
  9467                           ;nrf24l01.c: 149: nrf24l01SPIStart();
  9468  0C1E  3197  2761  318C   	fcall	_nrf24l01SPIStart
  9469                           
  9470                           ;nrf24l01.c: 152: nrf24l01SPISend((unsigned) 0b01100001);
  9471  0C21  3061               	movlw	97
  9472  0C22  3197  2772  318C   	fcall	_nrf24l01SPISend
  9473                           
  9474                           ;nrf24l01.c: 155: RXPacket.packetData.byte = nrf24l01SPISend(0);
  9475  0C25  3000               	movlw	0
  9476  0C26  3197  2772  318C   	fcall	_nrf24l01SPISend
  9477  0C29  00F8               	movwf	??_nrf24l01ReceivePacket
  9478  0C2A  0878               	movf	??_nrf24l01ReceivePacket,w
  9479  0C2B  0023               	movlb	3	; select bank3
  9480  0C2C  00A0               	movwf	_RXPacket^(0+384)
  9481                           
  9482                           ;nrf24l01.c: 156: width--;
  9483  0C2D  3001               	movlw	1
  9484  0C2E  02F9               	subwf	nrf24l01ReceivePacket@width,f
  9485                           
  9486                           ;nrf24l01.c: 158: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
  9487  0C2F  01FA               	clrf	nrf24l01ReceivePacket@i
  9488  0C30  2C41               	goto	i1l3063
  9489  0C31                     i1l3059:	
  9490                           
  9491                           ;nrf24l01.c: 160: RXPacket.Message[i] = nrf24l01SPISend(0);
  9492  0C31  3000               	movlw	0
  9493  0C32  3197  2772  318C   	fcall	_nrf24l01SPISend
  9494  0C35  00F8               	movwf	??_nrf24l01ReceivePacket
  9495  0C36  087A               	movf	nrf24l01ReceivePacket@i,w
  9496  0C37  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  9497  0C38  0086               	movwf	6
  9498  0C39  3001               	movlw	1	; select bank3/4
  9499  0C3A  0087               	movwf	7
  9500  0C3B  0878               	movf	??_nrf24l01ReceivePacket,w
  9501  0C3C  0081               	movwf	1
  9502  0C3D  3001               	movlw	1
  9503  0C3E  00F8               	movwf	??_nrf24l01ReceivePacket
  9504  0C3F  0878               	movf	??_nrf24l01ReceivePacket,w
  9505  0C40  07FA               	addwf	nrf24l01ReceivePacket@i,f
  9506  0C41                     i1l3063:	
  9507  0C41  0879               	movf	nrf24l01ReceivePacket@width,w
  9508  0C42  027A               	subwf	nrf24l01ReceivePacket@i,w
  9509  0C43  1803               	skipnc
  9510  0C44  2C49               	goto	i1l3067
  9511  0C45  3020               	movlw	32
  9512  0C46  027A               	subwf	nrf24l01ReceivePacket@i,w
  9513  0C47  1C03               	skipc
  9514  0C48  2C31               	goto	i1l3059
  9515  0C49                     i1l3067:	
  9516                           
  9517                           ;nrf24l01.c: 161: };nrf24l01.c: 164: nrf24l01SPIEnd();
  9518  0C49  3197  2752  318C   	fcall	_nrf24l01SPIEnd
  9519                           
  9520                           ;nrf24l01.c: 167: nrf24l01CEHigh();
  9521  0C4C  3197  2740         	fcall	_nrf24l01CEHigh
  9522  0C4E  0008               	return
  9523  0C4F                     __end_of_nrf24l01ReceivePacket:	
  9524                           
  9525                           	psect	text44
  9526  17B4                     __ptext44:	
  9527 ;; *************** function i1_memset *****************
  9528 ;; Defined at:
  9529 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  9530 ;; Parameters:    Size  Location     Type
  9531 ;;  p1              2    0[COMMON] PTR void 
  9532 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  9533 ;;  c               2    2[COMMON] int 
  9534 ;;  n               2    4[COMMON] unsigned int 
  9535 ;; Auto vars:     Size  Location     Type
  9536 ;;  memset          2    6[COMMON] PTR unsigned char 
  9537 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  9538 ;; Return value:  Size  Location     Type
  9539 ;;                  1    wreg      PTR void 
  9540 ;; Registers used:
  9541 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9542 ;; Tracked objects:
  9543 ;;		On entry : 0/0
  9544 ;;		On exit  : 0/0
  9545 ;;		Unchanged: 0/0
  9546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9547 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9551 ;;Total ram usage:        8 bytes
  9552 ;; Hardware stack levels used:    1
  9553 ;; This function calls:
  9554 ;;		Nothing
  9555 ;; This function is called by:
  9556 ;;		_nrf24l01ReceivePacket
  9557 ;; This function uses a non-reentrant model
  9558 ;;
  9559                           
  9560                           
  9561                           ;psect for function i1_memset
  9562  17B4                     i1_memset:	
  9563                           
  9564                           ;incstack = 0
  9565                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  9566  17B4  0871               	movf	i1memset@p1+1,w
  9567  17B5  00F7               	movwf	i1memset@p+1
  9568  17B6  0870               	movf	i1memset@p1,w
  9569  17B7  00F6               	movwf	i1memset@p
  9570  17B8                     i1l2909:	
  9571  17B8  3001               	movlw	1
  9572  17B9  02F4               	subwf	i1memset@n,f
  9573  17BA  3000               	movlw	0
  9574  17BB  3BF5               	subwfb	i1memset@n+1,f
  9575  17BC  0A74               	incf	i1memset@n,w
  9576  17BD  1903               	btfsc	3,2
  9577  17BE  0A75               	incf	i1memset@n+1,w
  9578  17BF  1903               	btfsc	3,2
  9579  17C0  0008               	return
  9580  17C1  0876               	movf	i1memset@p,w
  9581  17C2  0086               	movwf	6
  9582  17C3  0877               	movf	i1memset@p+1,w
  9583  17C4  0087               	movwf	7
  9584  17C5  0872               	movf	i1memset@c,w
  9585  17C6  0081               	movwf	1
  9586  17C7  3001               	movlw	1
  9587  17C8  07F6               	addwf	i1memset@p,f
  9588  17C9  3000               	movlw	0
  9589  17CA  3DF7               	addwfc	i1memset@p+1,f
  9590  17CB  2FB8               	goto	i1l2909
  9591  17CC                     __end_ofi1_memset:	
  9592                           ;	Return value of i1_memset is never used
  9593                           
  9594                           
  9595                           	psect	text45
  9596  09B3                     __ptext45:	
  9597 ;; *************** function _nrf24l01CheckACK *****************
  9598 ;; Defined at:
  9599 ;;		line 98 in file "nrf24l01.c"
  9600 ;; Parameters:    Size  Location     Type
  9601 ;;		None
  9602 ;; Auto vars:     Size  Location     Type
  9603 ;;		None
  9604 ;; Return value:  Size  Location     Type
  9605 ;;                  1    wreg      void 
  9606 ;; Registers used:
  9607 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9608 ;; Tracked objects:
  9609 ;;		On entry : 0/0
  9610 ;;		On exit  : 0/0
  9611 ;;		Unchanged: 0/0
  9612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9615 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9616 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9617 ;;Total ram usage:        3 bytes
  9618 ;; Hardware stack levels used:    1
  9619 ;; Hardware stack levels required when called:    4
  9620 ;; This function calls:
  9621 ;;		_strcmp
  9622 ;;		i1_nrf24l01SetRXMode
  9623 ;; This function is called by:
  9624 ;;		_nrf24l01ISR
  9625 ;; This function uses a non-reentrant model
  9626 ;;
  9627                           
  9628                           
  9629                           ;psect for function _nrf24l01CheckACK
  9630  09B3                     _nrf24l01CheckACK:	
  9631                           
  9632                           ;nrf24l01.c: 102: if (!RXPacket.packetData.IsACK){
  9633                           
  9634                           ;incstack = 0
  9635                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9636  09B3  0023               	movlb	3	; select bank3
  9637  09B4  1DA0               	btfss	_RXPacket^(0+384),3
  9638  09B5  0008               	return
  9639                           
  9640                           ;nrf24l01.c: 104: };nrf24l01.c: 107: nrf24l01.RXPending = 0;
  9641                           
  9642                           ;nrf24l01.c: 103: return;
  9643  09B6  10FD               	bcf	_nrf24l01,1	;volatile
  9644                           
  9645                           ;nrf24l01.c: 110: if (!TXPacket->packetData.ACKRequest){
  9646  09B7  0021               	movlb	1	; select bank1
  9647  09B8  086B               	movf	_TXPacket^(0+128),w
  9648  09B9  0086               	movwf	6
  9649  09BA  086C               	movf	(_TXPacket+1)^(0+128),w
  9650  09BB  0087               	movwf	7
  9651  09BC  1D01               	btfss	1,2
  9652  09BD  0008               	return
  9653                           
  9654                           ;nrf24l01.c: 112: };nrf24l01.c: 115: if (strcmp(TXPacket->Message, RXPacket.Message) != 
      +                          0){
  9655                           
  9656                           ;nrf24l01.c: 111: return;
  9657  09BE  086B               	movf	_TXPacket^(0+128),w
  9658  09BF  3E01               	addlw	1
  9659  09C0  00F7               	movwf	??_nrf24l01CheckACK
  9660  09C1  3000               	movlw	0
  9661  09C2  3D6C               	addwfc	(_TXPacket+1)^(0+128),w
  9662  09C3  00F8               	movwf	??_nrf24l01CheckACK+1
  9663  09C4  0877               	movf	??_nrf24l01CheckACK,w
  9664  09C5  00F0               	movwf	strcmp@s1
  9665  09C6  0878               	movf	??_nrf24l01CheckACK+1,w
  9666  09C7  00F1               	movwf	strcmp@s1+1
  9667  09C8  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  9668  09C9  00F9               	movwf	??_nrf24l01CheckACK+2
  9669  09CA  0879               	movf	??_nrf24l01CheckACK+2,w
  9670  09CB  00F2               	movwf	strcmp@s2
  9671  09CC  3189  2165  3189   	fcall	_strcmp
  9672  09CF  0870               	movf	?_strcmp,w
  9673  09D0  0471               	iorwf	?_strcmp+1,w
  9674  09D1  1D03               	btfss	3,2
  9675  09D2  0008               	return
  9676                           
  9677                           ;nrf24l01.c: 117: };nrf24l01.c: 124: TXPacket->packetData.ACKRequest = 0;
  9678                           
  9679                           ;nrf24l01.c: 116: return;
  9680  09D3  0021               	movlb	1	; select bank1
  9681  09D4  086B               	movf	_TXPacket^(0+128),w
  9682  09D5  0086               	movwf	6
  9683  09D6  086C               	movf	(_TXPacket+1)^(0+128),w
  9684  09D7  0087               	movwf	7
  9685  09D8  1101               	bcf	1,2
  9686                           
  9687                           ;nrf24l01.c: 127: nrf24l01SetRXMode(0);
  9688  09D9  3000               	movlw	0
  9689  09DA  318A  2270         	fcall	i1_nrf24l01SetRXMode
  9690  09DC  0008               	return
  9691  09DD                     __end_of_nrf24l01CheckACK:	
  9692                           
  9693                           	psect	text46
  9694  0A70                     __ptext46:	
  9695 ;; *************** function i1_nrf24l01SetRXMode *****************
  9696 ;; Defined at:
  9697 ;;		line 54 in file "nrf24l01.c"
  9698 ;; Parameters:    Size  Location     Type
  9699 ;;  rxMode          1    wreg     unsigned char 
  9700 ;; Auto vars:     Size  Location     Type
  9701 ;;  rxMode          1    6[COMMON] unsigned char 
  9702 ;;  nrf24l01SetR    1    5[COMMON] struct .
  9703 ;; Return value:  Size  Location     Type
  9704 ;;                  1    wreg      void 
  9705 ;; Registers used:
  9706 ;;		wreg, status,2, status,0, pclath, cstack
  9707 ;; Tracked objects:
  9708 ;;		On entry : 0/0
  9709 ;;		On exit  : 0/0
  9710 ;;		Unchanged: 0/0
  9711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9713 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9714 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9715 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9716 ;;Total ram usage:        3 bytes
  9717 ;; Hardware stack levels used:    1
  9718 ;; Hardware stack levels required when called:    3
  9719 ;; This function calls:
  9720 ;;		_nrf24l01CEHigh
  9721 ;;		_nrf24l01CELow
  9722 ;;		i1_nrf24l01Send
  9723 ;; This function is called by:
  9724 ;;		_nrf24l01CheckACK
  9725 ;;		_nrf24l01ISR
  9726 ;; This function uses a non-reentrant model
  9727 ;;
  9728                           
  9729                           
  9730                           ;psect for function i1_nrf24l01SetRXMode
  9731  0A70                     i1_nrf24l01SetRXMode:	
  9732                           
  9733                           ;incstack = 0
  9734                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  9735                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
  9736  0A70  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
  9737                           
  9738                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  9739  0A71  01F1               	clrf	i1nrf24l01Send@data
  9740  0A72  3000               	movlw	0
  9741  0A73  3197  27E5  318A   	fcall	i1_nrf24l01Send
  9742  0A76  00F4               	movwf	??i1_nrf24l01SetRXMode
  9743  0A77  0874               	movf	??i1_nrf24l01SetRXMode,w
  9744  0A78  00F5               	movwf	i1nrf24l01SetRXMode@config
  9745                           
  9746                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  9747  0A79  0875               	movf	i1nrf24l01SetRXMode@config,w
  9748  0A7A  3901               	andlw	1
  9749  0A7B  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
  9750  0A7C  1903               	skipnz
  9751  0A7D  2AA9               	goto	i1l2901
  9752                           
  9753                           ;nrf24l01.c: 65: nrf24l01CELow();
  9754  0A7E  3197  2743  318A   	fcall	_nrf24l01CELow
  9755                           
  9756                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(32000000/4000000.0)));
  9757  0A81  30E4               	movlw	228
  9758  0A82                     u347_27:	
  9759  0A82  3200               	nop2
  9760  0A83  3200               	nop2
  9761  0A84  0B89               	decfsz	9,f
  9762  0A85  2A82               	goto	u347_27
  9763  0A86  3200               	nop2
  9764  0A87  3200               	nop2
  9765                           
  9766                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  9767  0A88  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  9768  0A89  3901               	andlw	1
  9769  0A8A  1075               	bcf	i1nrf24l01SetRXMode@config,0
  9770  0A8B  1D03               	skipz
  9771  0A8C  1475               	bsf	i1nrf24l01SetRXMode@config,0
  9772                           
  9773                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  9774  0A8D  0875               	movf	i1nrf24l01SetRXMode@config,w
  9775  0A8E  00F4               	movwf	??i1_nrf24l01SetRXMode
  9776  0A8F  0874               	movf	??i1_nrf24l01SetRXMode,w
  9777  0A90  00F1               	movwf	i1nrf24l01Send@data
  9778  0A91  3020               	movlw	32
  9779  0A92  3197  27E5  318A   	fcall	i1_nrf24l01Send
  9780                           
  9781                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(32000000/4000000.0)));
  9782  0A95  30E4               	movlw	228
  9783  0A96                     u348_27:	
  9784  0A96  3200               	nop2
  9785  0A97  3200               	nop2
  9786  0A98  0B89               	decfsz	9,f
  9787  0A99  2A96               	goto	u348_27
  9788  0A9A  3200               	nop2
  9789  0A9B  3200               	nop2
  9790                           
  9791                           ;nrf24l01.c: 76: if (rxMode){
  9792  0A9C  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  9793  0A9D  1903               	btfsc	3,2
  9794  0A9E  2AA9               	goto	i1l2901
  9795                           
  9796                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  9797  0A9F  3197  2740  318A   	fcall	_nrf24l01CEHigh
  9798                           
  9799                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(32000000/4000000.0)));
  9800  0AA2  30E4               	movlw	228
  9801  0AA3                     u349_27:	
  9802  0AA3  3200               	nop2
  9803  0AA4  3200               	nop2
  9804  0AA5  0B89               	decfsz	9,f
  9805  0AA6  2AA3               	goto	u349_27
  9806  0AA7  3200               	nop2
  9807  0AA8  3200               	nop2
  9808  0AA9                     i1l2901:	
  9809                           
  9810                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  9811  0AA9  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  9812  0AAA  3901               	andlw	1
  9813  0AAB  117D               	bcf	_nrf24l01,2	;volatile
  9814  0AAC  1D03               	skipz
  9815  0AAD  157D               	bsf	_nrf24l01,2	;volatile
  9816  0AAE  0008               	return
  9817  0AAF                     __end_ofi1_nrf24l01SetRXMode:	
  9818                           
  9819                           	psect	text47
  9820  17E5                     __ptext47:	
  9821 ;; *************** function i1_nrf24l01Send *****************
  9822 ;; Defined at:
  9823 ;;		line 9 in file "nrf24l01.c"
  9824 ;; Parameters:    Size  Location     Type
  9825 ;;  command         1    wreg     unsigned char 
  9826 ;;  data            1    1[COMMON] unsigned char 
  9827 ;; Auto vars:     Size  Location     Type
  9828 ;;  command         1    3[COMMON] unsigned char 
  9829 ;; Return value:  Size  Location     Type
  9830 ;;                  1    wreg      unsigned char 
  9831 ;; Registers used:
  9832 ;;		wreg, status,2, status,0, pclath, cstack
  9833 ;; Tracked objects:
  9834 ;;		On entry : 0/0
  9835 ;;		On exit  : 0/0
  9836 ;;		Unchanged: 0/0
  9837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9838 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9839 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9840 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9841 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9842 ;;Total ram usage:        3 bytes
  9843 ;; Hardware stack levels used:    1
  9844 ;; Hardware stack levels required when called:    2
  9845 ;; This function calls:
  9846 ;;		_enableInterrupts
  9847 ;;		_nrf24l01SPIEnd
  9848 ;;		_nrf24l01SPISend
  9849 ;;		_nrf24l01SPIStart
  9850 ;; This function is called by:
  9851 ;;		_nrf24l01ReceivePacket
  9852 ;;		_nrf24l01ISR
  9853 ;;		i1_nrf24l01SetRXMode
  9854 ;; This function uses a non-reentrant model
  9855 ;;
  9856                           
  9857                           
  9858                           ;psect for function i1_nrf24l01Send
  9859  17E5                     i1_nrf24l01Send:	
  9860                           
  9861                           ;incstack = 0
  9862                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  9863                           ;i1nrf24l01Send@command stored from wreg
  9864  17E5  00F3               	movwf	i1nrf24l01Send@command
  9865                           
  9866                           ;nrf24l01.c: 12: enableInterrupts(0);
  9867  17E6  3000               	movlw	0
  9868  17E7  3197  2759  3197   	fcall	_enableInterrupts
  9869                           
  9870                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  9871  17EA  3197  2761  3197   	fcall	_nrf24l01SPIStart
  9872                           
  9873                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  9874  17ED  0873               	movf	i1nrf24l01Send@command,w
  9875  17EE  3197  2772  3197   	fcall	_nrf24l01SPISend
  9876                           
  9877                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  9878  17F1  0871               	movf	i1nrf24l01Send@data,w
  9879  17F2  3197  2772  3197   	fcall	_nrf24l01SPISend
  9880  17F5  00F2               	movwf	??i1_nrf24l01Send
  9881  17F6  0872               	movf	??i1_nrf24l01Send,w
  9882  17F7  00F1               	movwf	i1nrf24l01Send@data
  9883                           
  9884                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  9885  17F8  3197  2752  3197   	fcall	_nrf24l01SPIEnd
  9886                           
  9887                           ;nrf24l01.c: 27: enableInterrupts(1);
  9888  17FB  3001               	movlw	1
  9889  17FC  3197  2759         	fcall	_enableInterrupts
  9890                           
  9891                           ;nrf24l01.c: 29: return data;
  9892  17FE  0871               	movf	i1nrf24l01Send@data,w
  9893  17FF  0008               	return
  9894  1800                     __end_ofi1_nrf24l01Send:	
  9895                           
  9896                           	psect	text48
  9897  1761                     __ptext48:	
  9898 ;; *************** function _nrf24l01SPIStart *****************
  9899 ;; Defined at:
  9900 ;;		line 64 in file "interface.c"
  9901 ;; Parameters:    Size  Location     Type
  9902 ;;		None
  9903 ;; Auto vars:     Size  Location     Type
  9904 ;;		None
  9905 ;; Return value:  Size  Location     Type
  9906 ;;                  1    wreg      void 
  9907 ;; Registers used:
  9908 ;;		wreg, status,2, status,0, pclath, cstack
  9909 ;; Tracked objects:
  9910 ;;		On entry : 0/0
  9911 ;;		On exit  : 0/0
  9912 ;;		Unchanged: 0/0
  9913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9918 ;;Total ram usage:        0 bytes
  9919 ;; Hardware stack levels used:    1
  9920 ;; Hardware stack levels required when called:    8
  9921 ;; This function calls:
  9922 ;;		_nrf24l01CSLow
  9923 ;; This function is called by:
  9924 ;;		_nrf24l01Send
  9925 ;;		_nrf24l01ReceivePacket
  9926 ;;		_nrf24l01SendPacket
  9927 ;;		_nrf24l01SetTXPipe
  9928 ;;		_nrf24l01InitRegisters
  9929 ;;		i1_nrf24l01Send
  9930 ;; This function uses a non-reentrant model
  9931 ;;
  9932                           
  9933                           
  9934                           ;psect for function _nrf24l01SPIStart
  9935  1761                     _nrf24l01SPIStart:	
  9936                           
  9937                           ;interface.c: 65: nrf24l01CSLow();
  9938                           
  9939                           ;incstack = 0
  9940 ;; hardware stack exceeded
  9941                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
  9942  1761  3197  2749  3197   	fcall	_nrf24l01CSLow
  9943                           
  9944                           ;interface.c: 66: _delay((unsigned long)((10)*(32000000/4000000.0)));
  9945  1764  301A               	movlw	26
  9946  1765                     u350_27:	
  9947  1765  0B89               	decfsz	9,f
  9948  1766  2F65               	goto	u350_27
  9949  1767  3200               	nop2
  9950  1768  0008               	return
  9951  1769                     __end_of_nrf24l01SPIStart:	
  9952                           
  9953                           	psect	text49
  9954  1749                     __ptext49:	
  9955 ;; *************** function _nrf24l01CSLow *****************
  9956 ;; Defined at:
  9957 ;;		line 17 in file "interface.c"
  9958 ;; Parameters:    Size  Location     Type
  9959 ;;		None
  9960 ;; Auto vars:     Size  Location     Type
  9961 ;;		None
  9962 ;; Return value:  Size  Location     Type
  9963 ;;                  1    wreg      void 
  9964 ;; Registers used:
  9965 ;;		None
  9966 ;; Tracked objects:
  9967 ;;		On entry : 0/0
  9968 ;;		On exit  : 0/0
  9969 ;;		Unchanged: 0/0
  9970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;Total ram usage:        0 bytes
  9976 ;; Hardware stack levels used:    1
  9977 ;; Hardware stack levels required when called:    7
  9978 ;; This function calls:
  9979 ;;		Nothing
  9980 ;; This function is called by:
  9981 ;;		_nrf24l01SPIStart
  9982 ;; This function uses a non-reentrant model
  9983 ;;
  9984                           
  9985                           
  9986                           ;psect for function _nrf24l01CSLow
  9987  1749                     _nrf24l01CSLow:	
  9988                           
  9989                           ;interface.c: 18: PORTAbits.RA1 = 0;
  9990                           
  9991                           ;incstack = 0
  9992 ;; hardware stack exceeded
  9993                           ; Regs used in _nrf24l01CSLow: []
  9994  1749  0020               	movlb	0	; select bank0
  9995  174A  108C               	bcf	12,1	;volatile
  9996  174B  0008               	return
  9997  174C                     __end_of_nrf24l01CSLow:	
  9998                           
  9999                           	psect	text50
 10000  1772                     __ptext50:	
 10001 ;; *************** function _nrf24l01SPISend *****************
 10002 ;; Defined at:
 10003 ;;		line 51 in file "interface.c"
 10004 ;; Parameters:    Size  Location     Type
 10005 ;;  data            1    wreg     unsigned char 
 10006 ;; Auto vars:     Size  Location     Type
 10007 ;;  data            1    0[COMMON] unsigned char 
 10008 ;; Return value:  Size  Location     Type
 10009 ;;                  1    wreg      unsigned char 
 10010 ;; Registers used:
 10011 ;;		wreg
 10012 ;; Tracked objects:
 10013 ;;		On entry : 0/0
 10014 ;;		On exit  : 0/0
 10015 ;;		Unchanged: 0/0
 10016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10021 ;;Total ram usage:        0 bytes
 10022 ;; Hardware stack levels used:    1
 10023 ;; Hardware stack levels required when called:    7
 10024 ;; This function calls:
 10025 ;;		Nothing
 10026 ;; This function is called by:
 10027 ;;		_nrf24l01Send
 10028 ;;		_nrf24l01ReceivePacket
 10029 ;;		_nrf24l01SendPacket
 10030 ;;		_nrf24l01SetTXPipe
 10031 ;;		_nrf24l01InitRegisters
 10032 ;;		i1_nrf24l01Send
 10033 ;; This function uses a non-reentrant model
 10034 ;;
 10035                           
 10036                           
 10037                           ;psect for function _nrf24l01SPISend
 10038  1772                     _nrf24l01SPISend:	
 10039                           
 10040                           ;incstack = 0
 10041 ;; hardware stack exceeded
 10042                           ; Regs used in _nrf24l01SPISend: [wreg]
 10043                           ;nrf24l01SPISend@data stored from wreg
 10044  1772  00F0               	movwf	nrf24l01SPISend@data
 10045                           
 10046                           ;interface.c: 52: SSP1BUF = data;
 10047  1773  0870               	movf	nrf24l01SPISend@data,w
 10048  1774  0024               	movlb	4	; select bank4
 10049  1775  0091               	movwf	17	;volatile
 10050                           
 10051                           ;interface.c: 54: PORTCbits.RC4 = 1;
 10052  1776  0020               	movlb	0	; select bank0
 10053  1777  160E               	bsf	14,4	;volatile
 10054  1778                     i1l48:	
 10055                           ;interface.c: 56: while (!SSP1STATbits.BF){
 10056                           
 10057  1778  0024               	movlb	4	; select bank4
 10058  1779  1814               	btfsc	20,0	;volatile
 10059  177A  2F7D               	goto	i1l2249
 10060                           
 10061                           ;interface.c: 57: __nop();
 10062  177B  0000               	nop
 10063  177C  2F78               	goto	i1l48
 10064  177D                     i1l2249:	
 10065                           
 10066                           ;interface.c: 58: };interface.c: 60: return SSP1BUF;
 10067  177D  0811               	movf	17,w	;volatile
 10068  177E  0008               	return
 10069  177F                     __end_of_nrf24l01SPISend:	
 10070                           
 10071                           	psect	text51
 10072  1752                     __ptext51:	
 10073 ;; *************** function _nrf24l01SPIEnd *****************
 10074 ;; Defined at:
 10075 ;;		line 70 in file "interface.c"
 10076 ;; Parameters:    Size  Location     Type
 10077 ;;		None
 10078 ;; Auto vars:     Size  Location     Type
 10079 ;;		None
 10080 ;; Return value:  Size  Location     Type
 10081 ;;                  1    wreg      void 
 10082 ;; Registers used:
 10083 ;;		wreg, status,2, status,0, pclath, cstack
 10084 ;; Tracked objects:
 10085 ;;		On entry : 0/0
 10086 ;;		On exit  : 0/0
 10087 ;;		Unchanged: 0/0
 10088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10093 ;;Total ram usage:        0 bytes
 10094 ;; Hardware stack levels used:    1
 10095 ;; Hardware stack levels required when called:    8
 10096 ;; This function calls:
 10097 ;;		_nrf24l01CSHigh
 10098 ;; This function is called by:
 10099 ;;		_nrf24l01Send
 10100 ;;		_nrf24l01ReceivePacket
 10101 ;;		_nrf24l01SendPacket
 10102 ;;		_nrf24l01SetTXPipe
 10103 ;;		_nrf24l01InitRegisters
 10104 ;;		i1_nrf24l01Send
 10105 ;; This function uses a non-reentrant model
 10106 ;;
 10107                           
 10108                           
 10109                           ;psect for function _nrf24l01SPIEnd
 10110  1752                     _nrf24l01SPIEnd:	
 10111                           
 10112                           ;interface.c: 71: _delay((unsigned long)((10)*(32000000/4000000.0)));
 10113                           
 10114                           ;incstack = 0
 10115 ;; hardware stack exceeded
 10116                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
 10117  1752  301A               	movlw	26
 10118  1753                     u351_27:	
 10119  1753  0B89               	decfsz	9,f
 10120  1754  2F53               	goto	u351_27
 10121  1755  3200               	nop2
 10122                           
 10123                           ;interface.c: 72: nrf24l01CSHigh();
 10124  1756  3197  2746         	fcall	_nrf24l01CSHigh
 10125  1758  0008               	return
 10126  1759                     __end_of_nrf24l01SPIEnd:	
 10127                           
 10128                           	psect	text52
 10129  1746                     __ptext52:	
 10130 ;; *************** function _nrf24l01CSHigh *****************
 10131 ;; Defined at:
 10132 ;;		line 22 in file "interface.c"
 10133 ;; Parameters:    Size  Location     Type
 10134 ;;		None
 10135 ;; Auto vars:     Size  Location     Type
 10136 ;;		None
 10137 ;; Return value:  Size  Location     Type
 10138 ;;                  1    wreg      void 
 10139 ;; Registers used:
 10140 ;;		None
 10141 ;; Tracked objects:
 10142 ;;		On entry : 0/0
 10143 ;;		On exit  : 0/0
 10144 ;;		Unchanged: 0/0
 10145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10150 ;;Total ram usage:        0 bytes
 10151 ;; Hardware stack levels used:    1
 10152 ;; Hardware stack levels required when called:    7
 10153 ;; This function calls:
 10154 ;;		Nothing
 10155 ;; This function is called by:
 10156 ;;		_nrf24l01SPIEnd
 10157 ;; This function uses a non-reentrant model
 10158 ;;
 10159                           
 10160                           
 10161                           ;psect for function _nrf24l01CSHigh
 10162  1746                     _nrf24l01CSHigh:	
 10163                           
 10164                           ;interface.c: 23: PORTAbits.RA1 = 1;
 10165                           
 10166                           ;incstack = 0
 10167 ;; hardware stack exceeded
 10168                           ; Regs used in _nrf24l01CSHigh: []
 10169  1746  0020               	movlb	0	; select bank0
 10170  1747  148C               	bsf	12,1	;volatile
 10171  1748  0008               	return
 10172  1749                     __end_of_nrf24l01CSHigh:	
 10173                           
 10174                           	psect	text53
 10175  1759                     __ptext53:	
 10176 ;; *************** function _enableInterrupts *****************
 10177 ;; Defined at:
 10178 ;;		line 76 in file "interface.c"
 10179 ;; Parameters:    Size  Location     Type
 10180 ;;  enable          1    wreg     unsigned char 
 10181 ;; Auto vars:     Size  Location     Type
 10182 ;;  enable          1    0[COMMON] unsigned char 
 10183 ;; Return value:  Size  Location     Type
 10184 ;;                  1    wreg      void 
 10185 ;; Registers used:
 10186 ;;		wreg, status,0
 10187 ;; Tracked objects:
 10188 ;;		On entry : 0/0
 10189 ;;		On exit  : 0/0
 10190 ;;		Unchanged: 0/0
 10191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10196 ;;Total ram usage:        0 bytes
 10197 ;; Hardware stack levels used:    1
 10198 ;; Hardware stack levels required when called:    7
 10199 ;; This function calls:
 10200 ;;		Nothing
 10201 ;; This function is called by:
 10202 ;;		_nrf24l01Send
 10203 ;;		_nrf24l01SendPacket
 10204 ;;		i1_nrf24l01Send
 10205 ;; This function uses a non-reentrant model
 10206 ;;
 10207                           
 10208                           
 10209                           ;psect for function _enableInterrupts
 10210  1759                     _enableInterrupts:	
 10211                           
 10212                           ;incstack = 0
 10213 ;; hardware stack exceeded
 10214                           ; Regs used in _enableInterrupts: [wreg+status,0]
 10215                           ;enableInterrupts@enable stored from wreg
 10216  1759  00F0               	movwf	enableInterrupts@enable
 10217                           
 10218                           ;interface.c: 77: PIE0bits.INTE = enable;
 10219  175A  0C70               	rrf	enableInterrupts@enable,w
 10220  175B  0021               	movlb	1	; select bank1
 10221  175C  1C03               	skipc
 10222  175D  1010               	bcf	16,0	;volatile
 10223  175E  1803               	skipnc
 10224  175F  1410               	bsf	16,0	;volatile
 10225  1760  0008               	return
 10226  1761                     __end_of_enableInterrupts:	
 10227                           
 10228                           	psect	text54
 10229  1743                     __ptext54:	
 10230 ;; *************** function _nrf24l01CELow *****************
 10231 ;; Defined at:
 10232 ;;		line 7 in file "interface.c"
 10233 ;; Parameters:    Size  Location     Type
 10234 ;;		None
 10235 ;; Auto vars:     Size  Location     Type
 10236 ;;		None
 10237 ;; Return value:  Size  Location     Type
 10238 ;;                  1    wreg      void 
 10239 ;; Registers used:
 10240 ;;		None
 10241 ;; Tracked objects:
 10242 ;;		On entry : 0/0
 10243 ;;		On exit  : 0/0
 10244 ;;		Unchanged: 0/0
 10245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10250 ;;Total ram usage:        0 bytes
 10251 ;; Hardware stack levels used:    1
 10252 ;; Hardware stack levels required when called:    7
 10253 ;; This function calls:
 10254 ;;		Nothing
 10255 ;; This function is called by:
 10256 ;;		_nrf24l01SetRXMode
 10257 ;;		_nrf24l01ReceivePacket
 10258 ;;		_nrf24l01SendPacket
 10259 ;;		_nrf24l01Init
 10260 ;;		i1_nrf24l01SetRXMode
 10261 ;; This function uses a non-reentrant model
 10262 ;;
 10263                           
 10264                           
 10265                           ;psect for function _nrf24l01CELow
 10266  1743                     _nrf24l01CELow:	
 10267                           
 10268                           ;interface.c: 8: PORTAbits.RA0 = 0;
 10269                           
 10270                           ;incstack = 0
 10271 ;; hardware stack exceeded
 10272                           ; Regs used in _nrf24l01CELow: []
 10273  1743  0020               	movlb	0	; select bank0
 10274  1744  100C               	bcf	12,0	;volatile
 10275  1745  0008               	return
 10276  1746                     __end_of_nrf24l01CELow:	
 10277                           
 10278                           	psect	text55
 10279  1740                     __ptext55:	
 10280 ;; *************** function _nrf24l01CEHigh *****************
 10281 ;; Defined at:
 10282 ;;		line 12 in file "interface.c"
 10283 ;; Parameters:    Size  Location     Type
 10284 ;;		None
 10285 ;; Auto vars:     Size  Location     Type
 10286 ;;		None
 10287 ;; Return value:  Size  Location     Type
 10288 ;;                  1    wreg      void 
 10289 ;; Registers used:
 10290 ;;		None
 10291 ;; Tracked objects:
 10292 ;;		On entry : 0/0
 10293 ;;		On exit  : 0/0
 10294 ;;		Unchanged: 0/0
 10295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10300 ;;Total ram usage:        0 bytes
 10301 ;; Hardware stack levels used:    1
 10302 ;; Hardware stack levels required when called:    7
 10303 ;; This function calls:
 10304 ;;		Nothing
 10305 ;; This function is called by:
 10306 ;;		_nrf24l01SetRXMode
 10307 ;;		_nrf24l01ReceivePacket
 10308 ;;		_nrf24l01SendPacket
 10309 ;;		_nrf24l01Init
 10310 ;;		i1_nrf24l01SetRXMode
 10311 ;; This function uses a non-reentrant model
 10312 ;;
 10313                           
 10314                           
 10315                           ;psect for function _nrf24l01CEHigh
 10316  1740                     _nrf24l01CEHigh:	
 10317                           
 10318                           ;interface.c: 13: PORTAbits.RA0 = 1;
 10319                           
 10320                           ;incstack = 0
 10321 ;; hardware stack exceeded
 10322                           ; Regs used in _nrf24l01CEHigh: []
 10323  1740  0020               	movlb	0	; select bank0
 10324  1741  140C               	bsf	12,0	;volatile
 10325  1742  0008               	return
 10326  1743                     __end_of_nrf24l01CEHigh:	
 10327                           
 10328                           	psect	text56
 10329  0965                     __ptext56:	
 10330 ;; *************** function _strcmp *****************
 10331 ;; Defined at:
 10332 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
 10333 ;; Parameters:    Size  Location     Type
 10334 ;;  s1              2    0[COMMON] PTR const unsigned char 
 10335 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
 10336 ;;		 -> loop@packet(33), 
 10337 ;;  s2              1    2[COMMON] PTR const unsigned char 
 10338 ;;		 -> RXPacket.Message(32), RXPacket(33), 
 10339 ;; Auto vars:     Size  Location     Type
 10340 ;;  r               1    4[COMMON] char 
 10341 ;; Return value:  Size  Location     Type
 10342 ;;                  2    0[COMMON] int 
 10343 ;; Registers used:
 10344 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10345 ;; Tracked objects:
 10346 ;;		On entry : 0/0
 10347 ;;		On exit  : 0/0
 10348 ;;		Unchanged: 0/0
 10349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10350 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10351 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10352 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10353 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10354 ;;Total ram usage:        5 bytes
 10355 ;; Hardware stack levels used:    1
 10356 ;; This function calls:
 10357 ;;		Nothing
 10358 ;; This function is called by:
 10359 ;;		_nrf24l01CheckACK
 10360 ;; This function uses a non-reentrant model
 10361 ;;
 10362                           
 10363                           
 10364                           ;psect for function _strcmp
 10365  0965                     _strcmp:	
 10366                           
 10367                           ;incstack = 0
 10368                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
 10369  0965  296E               	goto	i1l2819
 10370  0966                     i1l2815:	
 10371  0966  3001               	movlw	1
 10372  0967  07F0               	addwf	strcmp@s1,f
 10373  0968  3000               	movlw	0
 10374  0969  3DF1               	addwfc	strcmp@s1+1,f
 10375  096A  3001               	movlw	1
 10376  096B  00F3               	movwf	??_strcmp
 10377  096C  0873               	movf	??_strcmp,w
 10378  096D  07F2               	addwf	strcmp@s2,f
 10379  096E                     i1l2819:	
 10380  096E  0870               	movf	strcmp@s1,w
 10381  096F  0086               	movwf	6
 10382  0970  0871               	movf	strcmp@s1+1,w
 10383  0971  0087               	movwf	7
 10384  0972  0872               	movf	strcmp@s2,w
 10385  0973  0084               	movwf	4
 10386  0974  3001               	movlw	1	; select bank2/3
 10387  0975  0085               	movwf	5
 10388  0976  0300               	decf	0,w
 10389  0977  3AFF               	xorlw	255
 10390  0978  0701               	addwf	1,w
 10391  0979  00F3               	movwf	??_strcmp
 10392  097A  0873               	movf	??_strcmp,w
 10393  097B  00F4               	movwf	strcmp@r
 10394  097C  0874               	movf	strcmp@r,w
 10395  097D  1D03               	btfss	3,2
 10396  097E  2986               	goto	i1l2823
 10397  097F  0870               	movf	strcmp@s1,w
 10398  0980  0086               	movwf	6
 10399  0981  0871               	movf	strcmp@s1+1,w
 10400  0982  0087               	movwf	7
 10401  0983  0801               	movf	1,w
 10402  0984  1D03               	btfss	3,2
 10403  0985  2966               	goto	i1l2815
 10404  0986                     i1l2823:	
 10405  0986  0874               	movf	strcmp@r,w
 10406  0987  00F0               	movwf	?_strcmp
 10407  0988  01F1               	clrf	?_strcmp+1
 10408  0989  1BF0               	btfsc	?_strcmp,7
 10409  098A  03F1               	decf	?_strcmp+1,f
 10410  098B  0008               	return
 10411  098C                     __end_of_strcmp:	
 10412                           
 10413                           	psect	text57
 10414  0800                     __ptext57:	
 10415 ;; *************** function _exception *****************
 10416 ;; Defined at:
 10417 ;;		line 80 in file "interface.c"
 10418 ;; Parameters:    Size  Location     Type
 10419 ;;  exception       1    wreg     unsigned char 
 10420 ;; Auto vars:     Size  Location     Type
 10421 ;;  exception       1    0[COMMON] unsigned char 
 10422 ;; Return value:  Size  Location     Type
 10423 ;;                  1    wreg      void 
 10424 ;; Registers used:
 10425 ;;		wreg
 10426 ;; Tracked objects:
 10427 ;;		On entry : 0/0
 10428 ;;		On exit  : 0/0
 10429 ;;		Unchanged: 0/0
 10430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10435 ;;Total ram usage:        0 bytes
 10436 ;; Hardware stack levels used:    1
 10437 ;; This function calls:
 10438 ;;		Nothing
 10439 ;; This function is called by:
 10440 ;;		_nrf24l01ISR
 10441 ;; This function uses a non-reentrant model
 10442 ;;
 10443                           
 10444                           
 10445                           ;psect for function _exception
 10446  0800                     _exception:	
 10447                           
 10448                           ;incstack = 0
 10449                           ; Regs used in _exception: [wreg]
 10450  0800  0001               	reset	;# 
 10451  0801  0008               	return
 10452  0802                     __end_of_exception:	
 10453  007E                     btemp	set	126	;btemp
 10454  007E                     int$flags	set	126
 10455  007E                     wtemp0	set	126


Data Sizes:
    Strings     45
    Constant    46
    Data        1
    BSS         86
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80     71      79
    BANK2            80     46      63
    BANK3            80      0      61
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> setMessage@status(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_7(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK2[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 28
		 -> romDataMap.name(BANK3[16]), ftoa@buf(BANK2[17]), STR_8(CODE[5]), STR_6(CODE[6]), 
		 -> STR_5(CODE[5]), STR_4(CODE[7]), STR_3(CODE[5]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), romDataMap(BANK3[28]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendPacket@Packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    TXPacket	PTR struct . size(2) Largest target is 33
		 -> NULL(NULL[0]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    checkTXPower@rxPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    setMessage@topic	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_8(CODE[5]), STR_6(CODE[6]), STR_5(CODE[5]), STR_4(CODE[7]), 
		 -> STR_3(CODE[5]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    setMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_nrf24l01ReceivePacket
    _nrf24l01ReceivePacket->i1_memset
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->___lwmod
    _nrf24l01GetPipe->_strlen
    _setMessage->_ftoa
    _strcat->_ftoa
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _nrf24l01SendPacket->_nrf24l01ChangeTXPower
    _nrf24l01SetRXMode->_nrf24l01Send
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    _checkTXPower->_nrf24l01ChangeTXPower
    _nrf24l01ChangeTXPower->_nrf24l01Send
    ___lbtoft->___ftpack
    ___lwtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_loop
    _loop->_setMessage
    _setMessage->_strcat
    _strcat->_ftoa
    _ftoa->___fttol

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_loop

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   90577
                                             36 BANK1     35    35      0
                           ___lwtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                 _nrf24l01SendPacket
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                         _setMessage
                              _sleep
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     200
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    5331
                                             19 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               12    12      0    5331
                                              7 BANK0     12    12      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    3     3      0     314
                                              4 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    4     4      0    2239
                                              3 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      5     5      0     658
                                              6 BANK0      5     5      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     337
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _loop                                                47    47      0   55479
                                             35 BANK1      1     1      0
                                              0 BANK2     46    46      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
                       _checkTXPower
                        _getADCValue
                       _nrf24l01Send
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _setMessage                                          10     3      7   17780
                                             25 BANK1     10     3      7
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     743
                                             19 BANK1      6     2      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     476
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                14    10      4   15273
                                             79 BANK0      1     1      0
                                              6 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             36    26     10    2229
                                             24 BANK0     28    18     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     337
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     340
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    3170
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     430
                                             71 BANK0      8     4      4
                                              0 BANK1      6     6      0
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4809
                                             27 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     223
                                             55 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3694
                                             55 BANK0     16    10      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     314
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendPacket                                   7     5      2    5324
                                              7 BANK0      7     5      2
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01ChangeTXPower
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     170
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    2277
                                              3 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         12     9      3   11919
                                             43 BANK0     12     9      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    4004
                                             27 BANK0     16    10      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    4564
                                             14 BANK0     13     7      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    3192
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _checkTXPower                                         2     2      0    2457
                                              7 BANK0      2     2      0
              _nrf24l01ChangeTXPower
                _nrf24l01GetRXPacket
 ---------------------------------------------------------------------------------
 (3) _nrf24l01GetRXPacket                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01ChangeTXPower                                4     2      2    2434
                                              3 BANK0      4     2      2
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (2) _nrf24l01Send                                         3     2      1    2143
                                              0 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    3034
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    3123
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    3012
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    1957
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (8) _nrf24l01ISR                                          2     2      0    1957
                                             11 COMMON     2     2      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceivePacket
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) _nrf24l01ReceivePacket                                3     3      0     534
                                              8 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_memset                                            8     2      6     152
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (9) _nrf24l01CheckACK                                     3     3      0     621
                                              7 COMMON     3     3      0
                             _strcmp
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) i1_nrf24l01SetRXMode                                  3     3      0     401
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_nrf24l01Send                                      3     2      1     267
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _strcmp                                              5     2      3     220
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (9) _exception                                            1     1      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwtoft
     ___ftpack
   _loop
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleep
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleep
     ___lbtoft
       ___ftpack
     _checkTXPower
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01GetRXPacket
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleep
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _nrf24l01SendPacket
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strlen
     _setMessage
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleep
       _memset (ARG)
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleep
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleep
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _sleep
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
     _sleep
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendPacket
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01ChangeTXPower
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _strlen
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _setMessage
     ___lbtoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleep
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleep
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleep
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleep
     _memset (ARG)
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
   _sleep
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
     _nrf24l01CheckACK
       _strcmp
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01ReceivePacket
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     47      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     2E      3F       9       78.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      3D      11       76.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     129      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     129      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Wed Jul 25 20:53:41 2018

                ___bmul@product 0022                     __CFG_CP$OFF 0000             ___wmul@multiplicand 0022  
           nrf24l01Send@command 0022                    ___ftadd@exp1 003A                    ___ftadd@exp2 0039  
                   __CFG_LVP$ON 0000                    ___ftadd@sign 0038                             l180 0F20  
                           l324 090B                             l168 083F                             l293 0665  
                           l445 00DB                             l471 0856                             l456 017E  
                           l448 00FA                             l705 0503                             l289 0654  
                           l681 0CE8                             l682 0CF0                             l674 0CD5  
                           l765 0DEC                    __CFG_CPD$OFF 0000                             _ISR 0004  
                           wreg 0009             nrf24l01SendPacket@i 002D                            ?_ISR 0070  
                  ___ftdiv@cntr 0045                    ___ftdiv@sign 004A                  ??_nrf24l01Init 0033  
                          l3011 06DD                            l2221 0CB2                            l3021 06E2  
                          l2231 0CDA                            l2223 0CBC                            l2233 0CE2  
                          l2225 0CC1                            l2217 0CAB                            l3009 06D1  
                          l2305 0C8E                            l3201 0A26                            l2323 0493  
                          l3019 070F                            l2341 04BC                            l2309 0C99  
                          l3205 0A2F                            l2351 04DE                            l2319 048C  
                          l2271 178C                            l3151 042B                            l3143 03E1  
                          l2361 04FF                            l2353 04E2                            l2329 04A2  
                          l2513 01EE                            l2433 006B                            l2441 0099  
                          l3305 07CD                            l2347 04CF                            l2507 01A9  
                          l2451 00A8                            l2427 005B                            l2515 0038  
                          l3307 07F0                            l2523 1791                            l2365 0515  
                          l2349 04D9                            l2277 0850                            l2517 01F9  
                          l2453 00D7                            l3157 043A                            l3317 088B  
                          l2359 04F5                            l2543 0A61                            l2295 0C60  
                          l2391 0B05                            l2455 00DD                            l2527 1797  
                          l3431 0EAE                            l2369 0527                            l2561 072B  
                          l2617 08A9                            l2297 0C6E                            l2481 012E  
                          l2465 0109                  ??_nrf24l01Send 0021                            l2379 0542  
                          l2539 0A4B                            l2627 0D8A                            l2395 0B1D  
                          l2491 016A                            l2475 0128                            l2459 00E2  
                          l3195 0A0E                            l2811 0917                            l2653 0DE2  
                          l2645 0DC3                            l2389 0AF7                            l2733 0991  
                          l3197 0A1A                            l2719 0B6E                            l2591 0798  
                          l2583 0784                            l2567 0741                            l2655 0DF0  
                          l2647 0DD4                            l2399 0B28                            l2487 015B  
                          l2727 17D1                            l2735 099D                            l2497 0191  
                          l2737 09A5                            l2835 092A                            l2851 0F84  
                          l2595 07A0                            l2579 077C                            l2659 0DFE  
                          l2667 09E2                            l2499 0194                            l2773 0AD4  
                          l2845 0F6E                            l2941 0EEF                            l2669 09F2  
                          l2749 05A0                            l2943 0EF7                            l2873 0FDE  
                          l2865 0FC5                            l2945 0EDB                            l2785 08C4  
                          l2779 0AE6                            l2787 08D0                            l2991 069A  
                          l2995 06BB                            l2987 0681                            l2979 0659  
                          STR_1 1831                    __CFG_WDTE$ON 0000                            STR_2 1831  
                          STR_3 1823                            STR_4 180C                            STR_5 181E  
                          STR_6 1813                            STR_7 182D                            STR_8 1828  
                          STR_9 1801                            u2035 04BD                            u2125 04F6  
                          u2205 0B13                            u2215 0B1E                            u2065 04D0  
                          u2325 0151                            u2095 04E3                            u3215 0A11  
                          u1705 0CB7                            u3065 06B5                            u2185 0AFA  
                          u2345 0162                            u2515 0785                            u2355 0174  
                          u3235 0A20                            u1725 0CD0                            u2525 078B  
                          u2365 0186                            u3245 0A27                            u3325 07DE  
                          u3407 06D9                            u2615 0D92                            u1745 0CDD  
                          u3417 06F4                            u2705 09E7                            u1905 0C6F  
                          u3427 0700                            u2555 07A1                            u1915 0C83  
                          u2805 0AC2                            u3437 0710                            u2565 07A7  
                          u2485 074D                            u2645 0DC4                            u1925 0C8F  
                          u1845 0857                            u3357 0E2A                            u3447 0B45  
                          u2495 075D                            u1855 085C                            u3367 094D  
                          u1785 0CF7                            u3457 0B5A                            u3377 095C  
                          u3467 0B68                            u3387 0661                            u2675 0DE3  
                          u2925 0F96                            u3397 06C2                            u1885 0C63  
                          u2935 0FA6                            u2864 0911                            u2945 0FC6  
                          u2865 0910                            u2955 0FD5                            u2965 0FDF  
                          i1l48 1778                            _WPUA 020C                            _WPUC 020E  
__size_of_nrf24l01InterfaceInit 001C                    __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000  
 __end_of_nrf24l01InterfaceInit 0885                            _main 0E0E                            _ftoa 055A  
                  ___ftpack@arg 0020                            _loop 01FF                    ___ftpack@exp 0023  
                          fsr0h 0005                            fsr1h 0007                            indf0 0000  
                          fsr0l 0004                            indf1 0001                            fsr1l 0006  
                          btemp 007E  __size_of_nrf24l01ReceivePacket 004D                   __CFG_BORV$LOW 0000  
 __end_of_nrf24l01ReceivePacket 0C4F                            start 000F           nrf24l01SetRXPipe@pipe 0025  
                 __CFG_CSWEN$ON 0000               ___bmul@multiplier 0023                   __CFG_MCLRE$ON 0000  
                  ___ftmul@cntr 0065                    ___ftmul@sign 0066     __size_of_nrf24l01SendPacket 00C8  
                         ??_ISR 007D                    ___fttol@exp1 00A5            __size_of_getADCValue 00A5  
               ??_nrf24l01CELow 0070                    ___fttol@lval 00A1                 ??_nrf24l01CSLow 0070  
                         ?_main 0070                           ?_ftoa 00A6                           ?_loop 0070  
               __end_of___ftadd 055A                 __end_of___ftdiv 1000                 __end_of___ftneg 1772  
               __end_of___lldiv 0CA2                 __end_of___ftmul 07C8                 __end_of___llmod 0B31  
               __end_of___ftsub 08BF                 __end_of___fttol 0E0E                  __CFG_DEBUG$OFF 0000  
                         i1l316 0BF9                           i1l165 000D                 __end_of___lwmod 0A34  
        enableInterrupts@enable 0070                      i1memset@p1 0070                   __CFG_PWRTE$ON 0000  
         nrf24l01SetTXPipe@pipe 0026                    ___lltoft@exp 002D                   ___awtoft@sign 002D  
               __end_of_dpowers 1028                 __end_of_isdigit 178E                           _sleep 0832  
                 ___ftpack@sign 0024                           ftoa@f 00A6                           ftoa@l 00AE  
                __CFG_BOREN$OFF 0000                _enableInterrupts 1759                           status 0003  
                         wtemp0 007E                 __end_of_sprintf 01FF     __end_ofi1_nrf24l01SetRXMode 0AAF  
              __end_ofi1_memset 17CC  __size_of_nrf24l01ChangeTXPower 003F               getADCValue@adcSum 0054  
 __end_of_nrf24l01ChangeTXPower 0AEE                _nrf24l01SPIStart 1761                 __initialization 0011  
              _nrf24l01CheckACK 09B3          nrf24l01InitRegisters@i 0031                    __end_of_main 0EB2  
                  __end_of_ftoa 064C                    __end_of_loop 035E    nrf24l01ChangeTXPower@rfSetup 0026  
              ??_nrf24l01CEHigh 0070                          ??_main 00C4                          ??_ftoa 006F  
                 ___fttol@sign1 00A0                          ??_loop 00C3                ??_nrf24l01CSHigh 0070  
              ??_nrf24l01SPIEnd 0070             _nrf24l01GetRXPacket 0002        __size_of_nrf24l01SPISend 000D  
              ___llmod@dividend 0032                          _ADRESH 009C                          _ADRESL 009B  
                        ?_sleep 0070                __end_of___awtoft 0941                          _ANSELA 018C  
                        _ANSELC 018E                __end_of___ftpack 0D07                __end_of___lbtoft 0832  
              __end_of___lltoft 0A07                          _ODCONA 028C        __size_of_nrf24l01GetPipe 0038  
                        _ODCONC 028E                          i1l3063 0C41                          i1l2249 177D  
                        i1l3225 0BD8                          i1l3217 0BC8                          i1l3067 0C49  
                        i1l3059 0C31                          i1l3239 0BFA                          i1l2901 0AA9  
                        i1l2823 0986                          i1l2815 0966                          i1l2819 096E  
                        i1l2909 17B8                          _INLVLA 038C                          _INLVLC 038E  
         __size_of_checkTXPower 0014                          u350_27 1765                          u351_27 1753  
              __end_of___lwtoft 0817                          u347_27 0A82                          u348_27 0A96  
                        u349_27 0AA3            ?_nrf24l01GetRXPacket 0070            __size_of_nrf24l01ISR 0049  
       nrf24l01SetRXMode@config 0024                          ___bmul 178E                          ___ftge 0A34  
       nrf24l01SetRXMode@rxMode 0025                          ___wmul 084D                       ??___ftadd 0034  
                __CFG_STVREN$ON 0000                       ??___ftdiv 0041                       ??___ftneg 005A  
                     ??___lldiv 0028                       ??___ftmul 005D                       ??___llmod 0036  
                     ??___ftsub 0041                       ??___fttol 006B                       ??___lwmod 0024  
          __end_of_nrf24l01Init 0965            __end_of_nrf24l01Send 08FE                          _memset 17CC  
         _nrf24l01InitRegisters 035E                          _strcat 098C                          _strcmp 0965  
                        _strcpy 0885                          _strlen 08BF                          ftoa@cp 00B2  
         ___ftmul@f3_as_product 0062       i1nrf24l01SetRXMode@config 0075                       ??_isdigit 0020  
                        loop@ta 0123                          loop@vt 0120       i1nrf24l01SetRXMode@rxMode 0076  
                  _checkTXPower 17A0                       ??_sprintf 0042              getADCValue@adcLoop 0051  
       __end_of__initialization 002E                      ___ftadd@f1 002E                      ___ftadd@f2 0031  
                    ___ftge@ff1 0020                      ___ftge@ff2 0023           ??_nrf24l01GetRXPacket 0020  
      nrf24l01SendPacket@Packet 0027              getADCValue@channel 0053                      ___ftdiv@f1 003E  
                    ___ftdiv@f2 003B                      ___ftdiv@f3 0046                      ___ftneg@f1 0057  
                    ___awtoft@c 0028                      ___lbtoft@c 002F             ___bmul@multiplicand 0020  
                    ___ftmul@f1 0057                      ___ftmul@f2 005A                      ___ftsub@f1 003E  
                    ___ftsub@f2 003B                      ___fttol@f1 0067                  __pcstackCOMMON 0070  
                  __pidataBANK1 173F                      ___lltoft@c 0028                   __end_of_sleep 084D  
                    ___lwtoft@c 0028                       ?i1_memset 0070                         ??_sleep 0020  
                  sprintf@width 004F                     loop@rfSetup 012C                      __pbssBANK1 00E7  
                    __pbssBANK2 014E                      __pbssBANK3 01A0               ??_nrf24l01SPISend 0070  
            __size_of_exception 0002         __size_ofi1_nrf24l01Send 001B               ??_nrf24l01GetPipe 0026  
                    __pmaintext 0E0E                         ?___bmul 0020                         ?___ftge 0020  
                       ?___wmul 0020                 __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 0B31  
             _nrf24l01SetRXPipe 08FE          ?_nrf24l01InitRegisters 0070                      __pintentry 0004  
             _nrf24l01SetTXPipe 0B75             nrf24l01SPISend@data 0070                         ?_memset 0020  
            ?_nrf24l01SetRXMode 0070                       ?___awtoft 0028                       ?___ftpack 0020  
                     ?___lbtoft 0028              ?_nrf24l01SetRXPipe 0070        __end_of_enableInterrupts 1761  
            ?_nrf24l01SetTXPipe 0070                       ?___lltoft 0028             __CFG_RSTOSC$HFINT32 0000  
                       ?_strcat 00B3                         ?_strcmp 0070                         ?_strcpy 0020  
                       ?_strlen 0020                       ?___lwtoft 0028           __end_of_n_ADDRESS_MUL 1801  
                    ??i1_memset 0076             ??_nrf24l01SetRXMode 0023        __end_of_nrf24l01SPIStart 1769  
           ??_nrf24l01SetRXPipe 0023             ??_nrf24l01SetTXPipe 0024                         _SSP1BUF 0211  
      __end_of_nrf24l01CheckACK 09DD           _nrf24l01InterfaceInit 0869      __end_of_nrf24l01SendPacket 0714  
                 ??_getADCValue 004E           __size_of_nrf24l01Init 0024           __size_of_nrf24l01Send 0020  
     __end_of_nrf24l01SetRXMode 0B75       __end_of_nrf24l01SetRXPipe 091F       __end_of_nrf24l01SetTXPipe 0BB9  
         _nrf24l01ReceivePacket 0C02                 __size_of___bmul 0012                 __size_of___ftge 003C  
                       ___ftadd 0464                         ___ftdiv 0F57                         ___ftneg 1769  
                       ___lldiv 0C4F                 __size_of___wmul 001C                         ___ftmul 0714  
                       ___llmod 0AEE                         ___ftsub 08A1                         ___fttol 0D6F  
                       ___lwmod 0A07                      ??___awtoft 002B                      ??___ftpack 0025  
                    ??___lbtoft 002B           __end_of_nrf24l01CELow 1746                 __size_of_memset 0019  
         __end_of_nrf24l01CSLow 174C                      ??___lltoft 002C                         __ptext1 0885  
                       __ptext2 0941                         __ptext3 0869                         __ptext4 035E  
                       __ptext5 0B75                         __ptext6 178E                         __ptext7 08FE  
                       __ptext8 07C8                         __ptext9 0A07                      ??___lwtoft 002B  
               __size_of_strcat 0027                 __size_of_strcmp 0027               __end_of_exception 0802  
               __size_of_strcpy 001C                 __size_of_strlen 001F                    __size_of_ISR 000B  
                       _counter 00E7                         _dpowers 1000                         _isdigit 177F  
                       _romData 00EE                         _sprintf 0032                         clrloop0 174D  
          end_of_initialization 002E                         ftoa@buf 014E                         ftoa@rem 00AA  
                  _nrf24l01Init 0941                      _setMessage 0D07                    _nrf24l01Send 08DE  
                    _romDataMap 01C1                         memset@c 0022                         memset@n 0024  
                       memset@p 0026                nrf24l01GetPipe@i 002A                 ___lldiv@divisor 0020  
               ___lldiv@counter 002D           _nrf24l01ChangeTXPower 0AAF                setMessage@packet 00B9  
  __size_ofi1_nrf24l01SetRXMode 003F                setMessage@status 00C1                         strcmp@r 0074  
         i1nrf24l01Send@command 0073                         strlen@s 0020             __end_of_getADCValue 0F57  
                     _PORTAbits 000C                       _PORTCbits 000E                       _TRISAbits 008C  
                     _TRISCbits 008E                nrf24l01Send@data 0020                __CFG_FEXTOSC$OFF 0000  
                 ??_nrf24l01ISR 007B          ?_nrf24l01InterfaceInit 0070                     ___ftdiv@exp 0049  
                i1_nrf24l01Send 17E5                      main@packet 00C6          ?_nrf24l01ReceivePacket 0070  
    __size_of_nrf24l01SetRXMode 0044      __size_of_nrf24l01SetRXPipe 0021                     ___ftmul@exp 0061  
    __size_of_nrf24l01SetTXPipe 0044                  __end_of___bmul 17A0                  __end_of___ftge 0A70  
                __end_of___wmul 0869                       i1memset@c 0072                       i1memset@n 0074  
                     i1memset@p 0076                  __end_of_memset 17E5                  __end_of_strcat 09B3  
                __end_of_strcmp 098C                  __end_of_strcpy 08A1                  __end_of_strlen 08DE  
           start_initialization 0011                 _nrf24l01SPISend 1772                     __end_of_ISR 000F  
                    ftoa@status 00A9               __size_ofi1_memset 0018       nrf24l01SetRXPipe@enRXAddr 0026  
               _nrf24l01GetPipe 07C8     __end_of_nrf24l01GetRXPacket 0004         __size_of_nrf24l01CEHigh 0003  
       __size_of_nrf24l01CSHigh 0003                     ?_setMessage 00B9          __end_ofi1_nrf24l01Send 1800  
       __size_of_nrf24l01SPIEnd 0007                 ___llmod@divisor 002E                 ___llmod@counter 0037  
        ?_nrf24l01ChangeTXPower 0023         ??_nrf24l01InitRegisters 0027                __CFG_LPBOREN$OFF 0000  
                   _getADCValue 0EB2                        ??___bmul 0021                        ??___ftge 0026  
           __end_of_nrf24l01ISR 0C02                        ??___wmul 0024                     __pdataBANK1 00EE  
                      ??_memset 0026               ?_enableInterrupts 0070                        ??_strcat 0070  
                      ??_strcmp 0073                        ??_strcpy 0022                        ??_strlen 0022  
             __size_of___awtoft 0022               __size_of___ftpack 0065               __size_of___lbtoft 001B  
            ??_enableInterrupts 0070               __size_of___lltoft 002A                     __pbssCOMMON 007D  
                     ___latbits 0002               __size_of___lwtoft 0015                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0                   __pcstackBANK2 0120               ?_nrf24l01SPIStart 0070  
          checkTXPower@rxPacket 0028                    _isdigit$1796 0020               ?_nrf24l01CheckACK 0070  
            ??_nrf24l01SPIStart 0070              ??_nrf24l01CheckACK 0077                 ?i1_nrf24l01Send 0071  
                   sprintf@flag 0048                     sprintf@prec 0051                      loop@packet 012D  
           nrf24l01GetPipe@name 0029             nrf24l01GetPipe@pipe 0028                        ?___ftadd 002E  
                      ?___ftdiv 003B                        ?___ftneg 0057                        ?___lldiv 0020  
                      ?___ftmul 0057                        ?___llmod 002E                        ?___ftsub 003B  
                      ?___fttol 0067                        ?___lwmod 0020            __end_of_n_ADDRESS_P0 181E  
       __end_of_nrf24l01SPISend 177F              i1nrf24l01Send@data 0071       nrf24l01InitRegisters@enAA 002E  
           __size_of_setMessage 0068              _nrf24l01SendPacket 064C         __end_of_nrf24l01GetPipe 0800  
                      ?_isdigit 0070                       _loop$2050 0129                       _loop$2049 0126  
                     _exception 0800             ?_nrf24l01SendPacket 0027                        ?_sprintf 0038  
           i1_nrf24l01SetRXMode 0A70                  __size_of_sleep 001B                  ___wmul@product 0024  
                   _nrf24l01ISR 0BB9                       clear_ram0 174C                        _PIE0bits 0090  
                      _PIR0bits 0010                       _sleepLoop 00ED            ??_nrf24l01SendPacket 0029  
               setMessage@value 00BD                 setMessage@topic 00BB            ?i1_nrf24l01SetRXMode 0070  
                    _ADCON0bits 009D                      _ADCON1bits 009E               ___wmul@multiplier 0020  
                      _WPUAbits 020C                        i1_memset 17B4                   ?_checkTXPower 0070  
                      _RXPacket 01A0                        _TXPacket 00EB                      ?_exception 0070  
                _nrf24l01CEHigh 1740         ??_nrf24l01InterfaceInit 0020                  _nrf24l01CSHigh 1746  
             nrf24l01ISR@status 007C                  _nrf24l01SPIEnd 1752         ??_nrf24l01ReceivePacket 0078  
        __size_of_nrf24l01CELow 0003          __size_of_nrf24l01CSLow 0003           ??i1_nrf24l01SetRXMode 0074  
              __size_of___ftadd 00F6                __size_of___ftdiv 00A9                __size_of___ftneg 0009  
              __size_of___lldiv 0053                __size_of___ftmul 00B4                __size_of___llmod 0043  
              __size_of___ftsub 001E                __size_of___fttol 009F                __size_of___lwmod 002D  
                      ___awtoft 091F                        ___ftpack 0CA2                        ___lbtoft 0817  
              ?_nrf24l01SPISend 0070                        ___lltoft 09DD                      _ANSELAbits 018C  
                      ___lwtoft 0802                      _ANSELCbits 018E                  ??_checkTXPower 0027  
              ?_nrf24l01GetPipe 0070                      sprintf@val 004A                   _n_ADDRESS_MUL 1800  
                    strcat@from 00B5          __end_of_nrf24l01CEHigh 1743                __size_of_isdigit 000F  
        __end_of_nrf24l01CSHigh 1749                        __ptext10 01FF                        __ptext11 0D07  
                      __ptext20 09DD                        __ptext12 098C                        __ptext21 0D6F  
                      __ptext13 17CC                        __ptext30 0832                        __ptext22 08A1  
                      __ptext14 055A                        __ptext31 0F57                        __ptext23 1769  
                      __ptext15 0032                        __ptext40 0CA2                        __ptext32 0464  
                      __ptext24 0714                        __ptext16 177F                        __ptext33 091F  
                      __ptext25 0A34                        __ptext17 084D                        __ptext50 1772  
                      __ptext42 0BB9                        __ptext34 17A0                        __ptext26 064C  
                      __ptext18 0AEE                        __ptext51 1752                        __ptext43 0C02  
                      __ptext35 0002                        __ptext27 08BF                        __ptext19 0C4F  
                      __ptext52 1746                        __ptext44 17B4                        __ptext36 0AAF  
                      __ptext28 0B31                        __ptext53 1759                        __ptext45 09B3  
                      __ptext37 08DE                        __ptext29 0EB2                        __ptext54 1743  
                      __ptext46 0A70                        __ptext38 0817                        __ptext55 1740  
                      __ptext47 17E5                        __ptext39 0802                        __ptext56 0965  
                      __ptext48 1761                        __ptext57 0800                        __ptext49 1749  
                  _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 1759                        _nrf24l01 007D  
              __size_of_sprintf 01CD                     _OSCCON1bits 0919                    ??_setMessage 00C0  
                    strcpy@from 0020   nrf24l01ChangeTXPower@addPower 0023         ??_nrf24l01ChangeTXPower 0025  
                 __size_of_main 00A4                   __size_of_ftoa 00F2                   __size_of_loop 015F  
  nrf24l01InitRegisters@channel 0029                       sleep@wdps 0021    nrf24l01InitRegisters@feature 002B  
            exception@exception 0070                      _RC0PPSbits 0EA0    nrf24l01InitRegisters@rfSetup 002C  
                    _RC1PPSbits 0EA1                    ?_getADCValue 004B                      _RC2PPSbits 0EA2  
__size_of_nrf24l01InitRegisters 0106   __end_of_nrf24l01InitRegisters 0464                        int$flags 007E  
  nrf24l01InitRegisters@setupAW 002A                      _ODCONAbits 028C                    _SSP1STATbits 0214  
                      main@pipe 00C5          nrf24l01ReceivePacket@i 007A                   _nrf24l01CELow 1743  
                 _nrf24l01CSLow 1749              __end_of_setMessage 0D6F                      _INTCONbits 000B  
               ?_nrf24l01CEHigh 0070                      _FVRCONbits 0117                ??i1_nrf24l01Send 0072  
                   ??_exception 0070                 ?_nrf24l01CSHigh 0070                  __pstringtext10 1831  
                __pstringtext11 0000                        isdigit@c 0021                        memset@p1 0020  
               ?_nrf24l01SPIEnd 0070                        intlevel1 0000                       sprintf@ap 0049  
                     sprintf@sp 004E                    _n_ADDRESS_P0 1819       __size_of_enableInterrupts 0008  
              ___lwmod@dividend 0022                ___lldiv@dividend 0024               __CFG_CLKOUTEN$OFF 0000  
  __size_of_nrf24l01GetRXPacket 0002     nrf24l01InitRegisters@config 0030       __size_of_nrf24l01SPIStart 0008  
     __size_of_nrf24l01CheckACK 002A     nrf24l01InitRegisters@status 002D      nrf24l01ReceivePacket@width 0079  
                ?_nrf24l01CELow 0070                   __pstringtext1 1000                   __pstringtext2 1819  
                 __pstringtext3 1800                   __pstringtext4 180C                   __pstringtext5 1813  
                 __pstringtext6 181E                   __pstringtext7 1823                   __pstringtext8 1828  
                 __pstringtext9 182D                  ?_nrf24l01CSLow 0070                        sprintf@c 0053  
                      sprintf@f 0038      nrf24l01InitRegisters@DynPD 002F                        strcat@cp 00B7  
                      strcat@to 00B3                        strcmp@s1 0070                        strcmp@s2 0072  
              ___lldiv@quotient 0029                 ___lwmod@divisor 0020                        strcpy@cp 0024  
                      strlen@cp 0024                        strcpy@to 0023                 ___lwmod@counter 0025  
                    _WDTCONbits 0097                   ?_nrf24l01Init 0070                   ?_nrf24l01Send 0020  
                    _STATUSbits 0003                    ?_nrf24l01ISR 0070            __end_of_checkTXPower 17B4  
