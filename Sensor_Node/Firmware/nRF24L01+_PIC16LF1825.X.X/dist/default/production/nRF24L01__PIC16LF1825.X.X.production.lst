

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Aug 17 16:32:05 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	intentry,global,class=CODE,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	dabs	1,0x74,12
    78  0000                     
    79                           ; Version 2.00
    80                           ; Generated 27/05/2018 GMT
    81                           ; 
    82                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC16LF18325 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000E                     	;# 
   127  0010                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0013                     	;# 
   131  0014                     	;# 
   132  0015                     	;# 
   133  0015                     	;# 
   134  0016                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001B                     	;# 
   142  001C                     	;# 
   143  001D                     	;# 
   144  001E                     	;# 
   145  001F                     	;# 
   146  008C                     	;# 
   147  008E                     	;# 
   148  0090                     	;# 
   149  0091                     	;# 
   150  0092                     	;# 
   151  0093                     	;# 
   152  0094                     	;# 
   153  0097                     	;# 
   154  009B                     	;# 
   155  009B                     	;# 
   156  009C                     	;# 
   157  009D                     	;# 
   158  009E                     	;# 
   159  009F                     	;# 
   160  010C                     	;# 
   161  010E                     	;# 
   162  0111                     	;# 
   163  0112                     	;# 
   164  0113                     	;# 
   165  0114                     	;# 
   166  0115                     	;# 
   167  0116                     	;# 
   168  0117                     	;# 
   169  0118                     	;# 
   170  0119                     	;# 
   171  018C                     	;# 
   172  018E                     	;# 
   173  0199                     	;# 
   174  0199                     	;# 
   175  0199                     	;# 
   176  019A                     	;# 
   177  019A                     	;# 
   178  019A                     	;# 
   179  019B                     	;# 
   180  019B                     	;# 
   181  019B                     	;# 
   182  019B                     	;# 
   183  019B                     	;# 
   184  019C                     	;# 
   185  019C                     	;# 
   186  019C                     	;# 
   187  019D                     	;# 
   188  019D                     	;# 
   189  019D                     	;# 
   190  019E                     	;# 
   191  019E                     	;# 
   192  019E                     	;# 
   193  019F                     	;# 
   194  019F                     	;# 
   195  019F                     	;# 
   196  019F                     	;# 
   197  019F                     	;# 
   198  020C                     	;# 
   199  020E                     	;# 
   200  0211                     	;# 
   201  0211                     	;# 
   202  0212                     	;# 
   203  0212                     	;# 
   204  0213                     	;# 
   205  0213                     	;# 
   206  0214                     	;# 
   207  0214                     	;# 
   208  0215                     	;# 
   209  0215                     	;# 
   210  0215                     	;# 
   211  0215                     	;# 
   212  0216                     	;# 
   213  0216                     	;# 
   214  0217                     	;# 
   215  0217                     	;# 
   216  0219                     	;# 
   217  021A                     	;# 
   218  021B                     	;# 
   219  021C                     	;# 
   220  021D                     	;# 
   221  021D                     	;# 
   222  021E                     	;# 
   223  021F                     	;# 
   224  028C                     	;# 
   225  028E                     	;# 
   226  0291                     	;# 
   227  0291                     	;# 
   228  0292                     	;# 
   229  0293                     	;# 
   230  0294                     	;# 
   231  0295                     	;# 
   232  0295                     	;# 
   233  0296                     	;# 
   234  0297                     	;# 
   235  0298                     	;# 
   236  029F                     	;# 
   237  030C                     	;# 
   238  030E                     	;# 
   239  0311                     	;# 
   240  0311                     	;# 
   241  0312                     	;# 
   242  0313                     	;# 
   243  0314                     	;# 
   244  0315                     	;# 
   245  0315                     	;# 
   246  0316                     	;# 
   247  0317                     	;# 
   248  0318                     	;# 
   249  038C                     	;# 
   250  038E                     	;# 
   251  0391                     	;# 
   252  0392                     	;# 
   253  0393                     	;# 
   254  0397                     	;# 
   255  0398                     	;# 
   256  0399                     	;# 
   257  039A                     	;# 
   258  039C                     	;# 
   259  039D                     	;# 
   260  039E                     	;# 
   261  039F                     	;# 
   262  0411                     	;# 
   263  0411                     	;# 
   264  0412                     	;# 
   265  0413                     	;# 
   266  0414                     	;# 
   267  0415                     	;# 
   268  0416                     	;# 
   269  0417                     	;# 
   270  0418                     	;# 
   271  0418                     	;# 
   272  0419                     	;# 
   273  041A                     	;# 
   274  041B                     	;# 
   275  041C                     	;# 
   276  041D                     	;# 
   277  041E                     	;# 
   278  041F                     	;# 
   279  0498                     	;# 
   280  0498                     	;# 
   281  0499                     	;# 
   282  049A                     	;# 
   283  049B                     	;# 
   284  049B                     	;# 
   285  049C                     	;# 
   286  049D                     	;# 
   287  049E                     	;# 
   288  049F                     	;# 
   289  0617                     	;# 
   290  0618                     	;# 
   291  0619                     	;# 
   292  0619                     	;# 
   293  061A                     	;# 
   294  061B                     	;# 
   295  061C                     	;# 
   296  061C                     	;# 
   297  061F                     	;# 
   298  0691                     	;# 
   299  0692                     	;# 
   300  0693                     	;# 
   301  0694                     	;# 
   302  0695                     	;# 
   303  0696                     	;# 
   304  0697                     	;# 
   305  0698                     	;# 
   306  0699                     	;# 
   307  0711                     	;# 
   308  0712                     	;# 
   309  0713                     	;# 
   310  0714                     	;# 
   311  0715                     	;# 
   312  0716                     	;# 
   313  0717                     	;# 
   314  0718                     	;# 
   315  0719                     	;# 
   316  0891                     	;# 
   317  0891                     	;# 
   318  0891                     	;# 
   319  0891                     	;# 
   320  0891                     	;# 
   321  0891                     	;# 
   322  0892                     	;# 
   323  0892                     	;# 
   324  0892                     	;# 
   325  0893                     	;# 
   326  0893                     	;# 
   327  0893                     	;# 
   328  0893                     	;# 
   329  0893                     	;# 
   330  0893                     	;# 
   331  0894                     	;# 
   332  0894                     	;# 
   333  0894                     	;# 
   334  0895                     	;# 
   335  0895                     	;# 
   336  0895                     	;# 
   337  0896                     	;# 
   338  0896                     	;# 
   339  0896                     	;# 
   340  089B                     	;# 
   341  0911                     	;# 
   342  0912                     	;# 
   343  0913                     	;# 
   344  0914                     	;# 
   345  0915                     	;# 
   346  0916                     	;# 
   347  0918                     	;# 
   348  0919                     	;# 
   349  091A                     	;# 
   350  091B                     	;# 
   351  091C                     	;# 
   352  091D                     	;# 
   353  091E                     	;# 
   354  091F                     	;# 
   355  0E0F                     	;# 
   356  0E10                     	;# 
   357  0E11                     	;# 
   358  0E12                     	;# 
   359  0E13                     	;# 
   360  0E14                     	;# 
   361  0E15                     	;# 
   362  0E16                     	;# 
   363  0E17                     	;# 
   364  0E18                     	;# 
   365  0E19                     	;# 
   366  0E1A                     	;# 
   367  0E1B                     	;# 
   368  0E1C                     	;# 
   369  0E1D                     	;# 
   370  0E1E                     	;# 
   371  0E1F                     	;# 
   372  0E20                     	;# 
   373  0E21                     	;# 
   374  0E22                     	;# 
   375  0E24                     	;# 
   376  0E25                     	;# 
   377  0E28                     	;# 
   378  0E29                     	;# 
   379  0E2A                     	;# 
   380  0E2B                     	;# 
   381  0E2C                     	;# 
   382  0E2D                     	;# 
   383  0E2E                     	;# 
   384  0E2F                     	;# 
   385  0E90                     	;# 
   386  0E91                     	;# 
   387  0E92                     	;# 
   388  0E94                     	;# 
   389  0E95                     	;# 
   390  0EA0                     	;# 
   391  0EA1                     	;# 
   392  0EA2                     	;# 
   393  0EA3                     	;# 
   394  0EA4                     	;# 
   395  0EA5                     	;# 
   396  0F0F                     	;# 
   397  0F10                     	;# 
   398  0F11                     	;# 
   399  0F12                     	;# 
   400  0F13                     	;# 
   401  0F14                     	;# 
   402  0F15                     	;# 
   403  0F16                     	;# 
   404  0F17                     	;# 
   405  0F18                     	;# 
   406  0F19                     	;# 
   407  0F1A                     	;# 
   408  0F1B                     	;# 
   409  0F1C                     	;# 
   410  0F1D                     	;# 
   411  0F1E                     	;# 
   412  0F1F                     	;# 
   413  0F20                     	;# 
   414  0F21                     	;# 
   415  0F22                     	;# 
   416  0F23                     	;# 
   417  0F24                     	;# 
   418  0F25                     	;# 
   419  0F26                     	;# 
   420  0F27                     	;# 
   421  0F28                     	;# 
   422  0F29                     	;# 
   423  0F2A                     	;# 
   424  0F2B                     	;# 
   425  0F2C                     	;# 
   426  0F2D                     	;# 
   427  0F2E                     	;# 
   428  0F2F                     	;# 
   429  0F30                     	;# 
   430  0F31                     	;# 
   431  0F32                     	;# 
   432  0F33                     	;# 
   433  0F34                     	;# 
   434  0F35                     	;# 
   435  0F36                     	;# 
   436  0F37                     	;# 
   437  0FE4                     	;# 
   438  0FE5                     	;# 
   439  0FE6                     	;# 
   440  0FE7                     	;# 
   441  0FE8                     	;# 
   442  0FE9                     	;# 
   443  0FEA                     	;# 
   444  0FEB                     	;# 
   445  0FED                     	;# 
   446  0FEE                     	;# 
   447  0FEF                     	;# 
   448  0000                     	;# 
   449  0001                     	;# 
   450  0002                     	;# 
   451  0003                     	;# 
   452  0004                     	;# 
   453  0005                     	;# 
   454  0006                     	;# 
   455  0007                     	;# 
   456  0008                     	;# 
   457  0009                     	;# 
   458  000A                     	;# 
   459  000B                     	;# 
   460  000C                     	;# 
   461  000E                     	;# 
   462  0010                     	;# 
   463  0011                     	;# 
   464  0012                     	;# 
   465  0013                     	;# 
   466  0014                     	;# 
   467  0015                     	;# 
   468  0015                     	;# 
   469  0016                     	;# 
   470  0016                     	;# 
   471  0017                     	;# 
   472  0018                     	;# 
   473  0019                     	;# 
   474  0019                     	;# 
   475  001A                     	;# 
   476  001B                     	;# 
   477  001C                     	;# 
   478  001D                     	;# 
   479  001E                     	;# 
   480  001F                     	;# 
   481  008C                     	;# 
   482  008E                     	;# 
   483  0090                     	;# 
   484  0091                     	;# 
   485  0092                     	;# 
   486  0093                     	;# 
   487  0094                     	;# 
   488  0097                     	;# 
   489  009B                     	;# 
   490  009B                     	;# 
   491  009C                     	;# 
   492  009D                     	;# 
   493  009E                     	;# 
   494  009F                     	;# 
   495  010C                     	;# 
   496  010E                     	;# 
   497  0111                     	;# 
   498  0112                     	;# 
   499  0113                     	;# 
   500  0114                     	;# 
   501  0115                     	;# 
   502  0116                     	;# 
   503  0117                     	;# 
   504  0118                     	;# 
   505  0119                     	;# 
   506  018C                     	;# 
   507  018E                     	;# 
   508  0199                     	;# 
   509  0199                     	;# 
   510  0199                     	;# 
   511  019A                     	;# 
   512  019A                     	;# 
   513  019A                     	;# 
   514  019B                     	;# 
   515  019B                     	;# 
   516  019B                     	;# 
   517  019B                     	;# 
   518  019B                     	;# 
   519  019C                     	;# 
   520  019C                     	;# 
   521  019C                     	;# 
   522  019D                     	;# 
   523  019D                     	;# 
   524  019D                     	;# 
   525  019E                     	;# 
   526  019E                     	;# 
   527  019E                     	;# 
   528  019F                     	;# 
   529  019F                     	;# 
   530  019F                     	;# 
   531  019F                     	;# 
   532  019F                     	;# 
   533  020C                     	;# 
   534  020E                     	;# 
   535  0211                     	;# 
   536  0211                     	;# 
   537  0212                     	;# 
   538  0212                     	;# 
   539  0213                     	;# 
   540  0213                     	;# 
   541  0214                     	;# 
   542  0214                     	;# 
   543  0215                     	;# 
   544  0215                     	;# 
   545  0215                     	;# 
   546  0215                     	;# 
   547  0216                     	;# 
   548  0216                     	;# 
   549  0217                     	;# 
   550  0217                     	;# 
   551  0219                     	;# 
   552  021A                     	;# 
   553  021B                     	;# 
   554  021C                     	;# 
   555  021D                     	;# 
   556  021D                     	;# 
   557  021E                     	;# 
   558  021F                     	;# 
   559  028C                     	;# 
   560  028E                     	;# 
   561  0291                     	;# 
   562  0291                     	;# 
   563  0292                     	;# 
   564  0293                     	;# 
   565  0294                     	;# 
   566  0295                     	;# 
   567  0295                     	;# 
   568  0296                     	;# 
   569  0297                     	;# 
   570  0298                     	;# 
   571  029F                     	;# 
   572  030C                     	;# 
   573  030E                     	;# 
   574  0311                     	;# 
   575  0311                     	;# 
   576  0312                     	;# 
   577  0313                     	;# 
   578  0314                     	;# 
   579  0315                     	;# 
   580  0315                     	;# 
   581  0316                     	;# 
   582  0317                     	;# 
   583  0318                     	;# 
   584  038C                     	;# 
   585  038E                     	;# 
   586  0391                     	;# 
   587  0392                     	;# 
   588  0393                     	;# 
   589  0397                     	;# 
   590  0398                     	;# 
   591  0399                     	;# 
   592  039A                     	;# 
   593  039C                     	;# 
   594  039D                     	;# 
   595  039E                     	;# 
   596  039F                     	;# 
   597  0411                     	;# 
   598  0411                     	;# 
   599  0412                     	;# 
   600  0413                     	;# 
   601  0414                     	;# 
   602  0415                     	;# 
   603  0416                     	;# 
   604  0417                     	;# 
   605  0418                     	;# 
   606  0418                     	;# 
   607  0419                     	;# 
   608  041A                     	;# 
   609  041B                     	;# 
   610  041C                     	;# 
   611  041D                     	;# 
   612  041E                     	;# 
   613  041F                     	;# 
   614  0498                     	;# 
   615  0498                     	;# 
   616  0499                     	;# 
   617  049A                     	;# 
   618  049B                     	;# 
   619  049B                     	;# 
   620  049C                     	;# 
   621  049D                     	;# 
   622  049E                     	;# 
   623  049F                     	;# 
   624  0617                     	;# 
   625  0618                     	;# 
   626  0619                     	;# 
   627  0619                     	;# 
   628  061A                     	;# 
   629  061B                     	;# 
   630  061C                     	;# 
   631  061C                     	;# 
   632  061F                     	;# 
   633  0691                     	;# 
   634  0692                     	;# 
   635  0693                     	;# 
   636  0694                     	;# 
   637  0695                     	;# 
   638  0696                     	;# 
   639  0697                     	;# 
   640  0698                     	;# 
   641  0699                     	;# 
   642  0711                     	;# 
   643  0712                     	;# 
   644  0713                     	;# 
   645  0714                     	;# 
   646  0715                     	;# 
   647  0716                     	;# 
   648  0717                     	;# 
   649  0718                     	;# 
   650  0719                     	;# 
   651  0891                     	;# 
   652  0891                     	;# 
   653  0891                     	;# 
   654  0891                     	;# 
   655  0891                     	;# 
   656  0891                     	;# 
   657  0892                     	;# 
   658  0892                     	;# 
   659  0892                     	;# 
   660  0893                     	;# 
   661  0893                     	;# 
   662  0893                     	;# 
   663  0893                     	;# 
   664  0893                     	;# 
   665  0893                     	;# 
   666  0894                     	;# 
   667  0894                     	;# 
   668  0894                     	;# 
   669  0895                     	;# 
   670  0895                     	;# 
   671  0895                     	;# 
   672  0896                     	;# 
   673  0896                     	;# 
   674  0896                     	;# 
   675  089B                     	;# 
   676  0911                     	;# 
   677  0912                     	;# 
   678  0913                     	;# 
   679  0914                     	;# 
   680  0915                     	;# 
   681  0916                     	;# 
   682  0918                     	;# 
   683  0919                     	;# 
   684  091A                     	;# 
   685  091B                     	;# 
   686  091C                     	;# 
   687  091D                     	;# 
   688  091E                     	;# 
   689  091F                     	;# 
   690  0E0F                     	;# 
   691  0E10                     	;# 
   692  0E11                     	;# 
   693  0E12                     	;# 
   694  0E13                     	;# 
   695  0E14                     	;# 
   696  0E15                     	;# 
   697  0E16                     	;# 
   698  0E17                     	;# 
   699  0E18                     	;# 
   700  0E19                     	;# 
   701  0E1A                     	;# 
   702  0E1B                     	;# 
   703  0E1C                     	;# 
   704  0E1D                     	;# 
   705  0E1E                     	;# 
   706  0E1F                     	;# 
   707  0E20                     	;# 
   708  0E21                     	;# 
   709  0E22                     	;# 
   710  0E24                     	;# 
   711  0E25                     	;# 
   712  0E28                     	;# 
   713  0E29                     	;# 
   714  0E2A                     	;# 
   715  0E2B                     	;# 
   716  0E2C                     	;# 
   717  0E2D                     	;# 
   718  0E2E                     	;# 
   719  0E2F                     	;# 
   720  0E90                     	;# 
   721  0E91                     	;# 
   722  0E92                     	;# 
   723  0E94                     	;# 
   724  0E95                     	;# 
   725  0EA0                     	;# 
   726  0EA1                     	;# 
   727  0EA2                     	;# 
   728  0EA3                     	;# 
   729  0EA4                     	;# 
   730  0EA5                     	;# 
   731  0F0F                     	;# 
   732  0F10                     	;# 
   733  0F11                     	;# 
   734  0F12                     	;# 
   735  0F13                     	;# 
   736  0F14                     	;# 
   737  0F15                     	;# 
   738  0F16                     	;# 
   739  0F17                     	;# 
   740  0F18                     	;# 
   741  0F19                     	;# 
   742  0F1A                     	;# 
   743  0F1B                     	;# 
   744  0F1C                     	;# 
   745  0F1D                     	;# 
   746  0F1E                     	;# 
   747  0F1F                     	;# 
   748  0F20                     	;# 
   749  0F21                     	;# 
   750  0F22                     	;# 
   751  0F23                     	;# 
   752  0F24                     	;# 
   753  0F25                     	;# 
   754  0F26                     	;# 
   755  0F27                     	;# 
   756  0F28                     	;# 
   757  0F29                     	;# 
   758  0F2A                     	;# 
   759  0F2B                     	;# 
   760  0F2C                     	;# 
   761  0F2D                     	;# 
   762  0F2E                     	;# 
   763  0F2F                     	;# 
   764  0F30                     	;# 
   765  0F31                     	;# 
   766  0F32                     	;# 
   767  0F33                     	;# 
   768  0F34                     	;# 
   769  0F35                     	;# 
   770  0F36                     	;# 
   771  0F37                     	;# 
   772  0FE4                     	;# 
   773  0FE5                     	;# 
   774  0FE6                     	;# 
   775  0FE7                     	;# 
   776  0FE8                     	;# 
   777  0FE9                     	;# 
   778  0FEA                     	;# 
   779  0FEB                     	;# 
   780  0FED                     	;# 
   781  0FEE                     	;# 
   782  0FEF                     	;# 
   783  0000                     	;# 
   784  0001                     	;# 
   785  0002                     	;# 
   786  0003                     	;# 
   787  0004                     	;# 
   788  0005                     	;# 
   789  0006                     	;# 
   790  0007                     	;# 
   791  0008                     	;# 
   792  0009                     	;# 
   793  000A                     	;# 
   794  000B                     	;# 
   795  000C                     	;# 
   796  000E                     	;# 
   797  0010                     	;# 
   798  0011                     	;# 
   799  0012                     	;# 
   800  0013                     	;# 
   801  0014                     	;# 
   802  0015                     	;# 
   803  0015                     	;# 
   804  0016                     	;# 
   805  0016                     	;# 
   806  0017                     	;# 
   807  0018                     	;# 
   808  0019                     	;# 
   809  0019                     	;# 
   810  001A                     	;# 
   811  001B                     	;# 
   812  001C                     	;# 
   813  001D                     	;# 
   814  001E                     	;# 
   815  001F                     	;# 
   816  008C                     	;# 
   817  008E                     	;# 
   818  0090                     	;# 
   819  0091                     	;# 
   820  0092                     	;# 
   821  0093                     	;# 
   822  0094                     	;# 
   823  0097                     	;# 
   824  009B                     	;# 
   825  009B                     	;# 
   826  009C                     	;# 
   827  009D                     	;# 
   828  009E                     	;# 
   829  009F                     	;# 
   830  010C                     	;# 
   831  010E                     	;# 
   832  0111                     	;# 
   833  0112                     	;# 
   834  0113                     	;# 
   835  0114                     	;# 
   836  0115                     	;# 
   837  0116                     	;# 
   838  0117                     	;# 
   839  0118                     	;# 
   840  0119                     	;# 
   841  018C                     	;# 
   842  018E                     	;# 
   843  0199                     	;# 
   844  0199                     	;# 
   845  0199                     	;# 
   846  019A                     	;# 
   847  019A                     	;# 
   848  019A                     	;# 
   849  019B                     	;# 
   850  019B                     	;# 
   851  019B                     	;# 
   852  019B                     	;# 
   853  019B                     	;# 
   854  019C                     	;# 
   855  019C                     	;# 
   856  019C                     	;# 
   857  019D                     	;# 
   858  019D                     	;# 
   859  019D                     	;# 
   860  019E                     	;# 
   861  019E                     	;# 
   862  019E                     	;# 
   863  019F                     	;# 
   864  019F                     	;# 
   865  019F                     	;# 
   866  019F                     	;# 
   867  019F                     	;# 
   868  020C                     	;# 
   869  020E                     	;# 
   870  0211                     	;# 
   871  0211                     	;# 
   872  0212                     	;# 
   873  0212                     	;# 
   874  0213                     	;# 
   875  0213                     	;# 
   876  0214                     	;# 
   877  0214                     	;# 
   878  0215                     	;# 
   879  0215                     	;# 
   880  0215                     	;# 
   881  0215                     	;# 
   882  0216                     	;# 
   883  0216                     	;# 
   884  0217                     	;# 
   885  0217                     	;# 
   886  0219                     	;# 
   887  021A                     	;# 
   888  021B                     	;# 
   889  021C                     	;# 
   890  021D                     	;# 
   891  021D                     	;# 
   892  021E                     	;# 
   893  021F                     	;# 
   894  028C                     	;# 
   895  028E                     	;# 
   896  0291                     	;# 
   897  0291                     	;# 
   898  0292                     	;# 
   899  0293                     	;# 
   900  0294                     	;# 
   901  0295                     	;# 
   902  0295                     	;# 
   903  0296                     	;# 
   904  0297                     	;# 
   905  0298                     	;# 
   906  029F                     	;# 
   907  030C                     	;# 
   908  030E                     	;# 
   909  0311                     	;# 
   910  0311                     	;# 
   911  0312                     	;# 
   912  0313                     	;# 
   913  0314                     	;# 
   914  0315                     	;# 
   915  0315                     	;# 
   916  0316                     	;# 
   917  0317                     	;# 
   918  0318                     	;# 
   919  038C                     	;# 
   920  038E                     	;# 
   921  0391                     	;# 
   922  0392                     	;# 
   923  0393                     	;# 
   924  0397                     	;# 
   925  0398                     	;# 
   926  0399                     	;# 
   927  039A                     	;# 
   928  039C                     	;# 
   929  039D                     	;# 
   930  039E                     	;# 
   931  039F                     	;# 
   932  0411                     	;# 
   933  0411                     	;# 
   934  0412                     	;# 
   935  0413                     	;# 
   936  0414                     	;# 
   937  0415                     	;# 
   938  0416                     	;# 
   939  0417                     	;# 
   940  0418                     	;# 
   941  0418                     	;# 
   942  0419                     	;# 
   943  041A                     	;# 
   944  041B                     	;# 
   945  041C                     	;# 
   946  041D                     	;# 
   947  041E                     	;# 
   948  041F                     	;# 
   949  0498                     	;# 
   950  0498                     	;# 
   951  0499                     	;# 
   952  049A                     	;# 
   953  049B                     	;# 
   954  049B                     	;# 
   955  049C                     	;# 
   956  049D                     	;# 
   957  049E                     	;# 
   958  049F                     	;# 
   959  0617                     	;# 
   960  0618                     	;# 
   961  0619                     	;# 
   962  0619                     	;# 
   963  061A                     	;# 
   964  061B                     	;# 
   965  061C                     	;# 
   966  061C                     	;# 
   967  061F                     	;# 
   968  0691                     	;# 
   969  0692                     	;# 
   970  0693                     	;# 
   971  0694                     	;# 
   972  0695                     	;# 
   973  0696                     	;# 
   974  0697                     	;# 
   975  0698                     	;# 
   976  0699                     	;# 
   977  0711                     	;# 
   978  0712                     	;# 
   979  0713                     	;# 
   980  0714                     	;# 
   981  0715                     	;# 
   982  0716                     	;# 
   983  0717                     	;# 
   984  0718                     	;# 
   985  0719                     	;# 
   986  0891                     	;# 
   987  0891                     	;# 
   988  0891                     	;# 
   989  0891                     	;# 
   990  0891                     	;# 
   991  0891                     	;# 
   992  0892                     	;# 
   993  0892                     	;# 
   994  0892                     	;# 
   995  0893                     	;# 
   996  0893                     	;# 
   997  0893                     	;# 
   998  0893                     	;# 
   999  0893                     	;# 
  1000  0893                     	;# 
  1001  0894                     	;# 
  1002  0894                     	;# 
  1003  0894                     	;# 
  1004  0895                     	;# 
  1005  0895                     	;# 
  1006  0895                     	;# 
  1007  0896                     	;# 
  1008  0896                     	;# 
  1009  0896                     	;# 
  1010  089B                     	;# 
  1011  0911                     	;# 
  1012  0912                     	;# 
  1013  0913                     	;# 
  1014  0914                     	;# 
  1015  0915                     	;# 
  1016  0916                     	;# 
  1017  0918                     	;# 
  1018  0919                     	;# 
  1019  091A                     	;# 
  1020  091B                     	;# 
  1021  091C                     	;# 
  1022  091D                     	;# 
  1023  091E                     	;# 
  1024  091F                     	;# 
  1025  0E0F                     	;# 
  1026  0E10                     	;# 
  1027  0E11                     	;# 
  1028  0E12                     	;# 
  1029  0E13                     	;# 
  1030  0E14                     	;# 
  1031  0E15                     	;# 
  1032  0E16                     	;# 
  1033  0E17                     	;# 
  1034  0E18                     	;# 
  1035  0E19                     	;# 
  1036  0E1A                     	;# 
  1037  0E1B                     	;# 
  1038  0E1C                     	;# 
  1039  0E1D                     	;# 
  1040  0E1E                     	;# 
  1041  0E1F                     	;# 
  1042  0E20                     	;# 
  1043  0E21                     	;# 
  1044  0E22                     	;# 
  1045  0E24                     	;# 
  1046  0E25                     	;# 
  1047  0E28                     	;# 
  1048  0E29                     	;# 
  1049  0E2A                     	;# 
  1050  0E2B                     	;# 
  1051  0E2C                     	;# 
  1052  0E2D                     	;# 
  1053  0E2E                     	;# 
  1054  0E2F                     	;# 
  1055  0E90                     	;# 
  1056  0E91                     	;# 
  1057  0E92                     	;# 
  1058  0E94                     	;# 
  1059  0E95                     	;# 
  1060  0EA0                     	;# 
  1061  0EA1                     	;# 
  1062  0EA2                     	;# 
  1063  0EA3                     	;# 
  1064  0EA4                     	;# 
  1065  0EA5                     	;# 
  1066  0F0F                     	;# 
  1067  0F10                     	;# 
  1068  0F11                     	;# 
  1069  0F12                     	;# 
  1070  0F13                     	;# 
  1071  0F14                     	;# 
  1072  0F15                     	;# 
  1073  0F16                     	;# 
  1074  0F17                     	;# 
  1075  0F18                     	;# 
  1076  0F19                     	;# 
  1077  0F1A                     	;# 
  1078  0F1B                     	;# 
  1079  0F1C                     	;# 
  1080  0F1D                     	;# 
  1081  0F1E                     	;# 
  1082  0F1F                     	;# 
  1083  0F20                     	;# 
  1084  0F21                     	;# 
  1085  0F22                     	;# 
  1086  0F23                     	;# 
  1087  0F24                     	;# 
  1088  0F25                     	;# 
  1089  0F26                     	;# 
  1090  0F27                     	;# 
  1091  0F28                     	;# 
  1092  0F29                     	;# 
  1093  0F2A                     	;# 
  1094  0F2B                     	;# 
  1095  0F2C                     	;# 
  1096  0F2D                     	;# 
  1097  0F2E                     	;# 
  1098  0F2F                     	;# 
  1099  0F30                     	;# 
  1100  0F31                     	;# 
  1101  0F32                     	;# 
  1102  0F33                     	;# 
  1103  0F34                     	;# 
  1104  0F35                     	;# 
  1105  0F36                     	;# 
  1106  0F37                     	;# 
  1107  0FE4                     	;# 
  1108  0FE5                     	;# 
  1109  0FE6                     	;# 
  1110  0FE7                     	;# 
  1111  0FE8                     	;# 
  1112  0FE9                     	;# 
  1113  0FEA                     	;# 
  1114  0FEB                     	;# 
  1115  0FED                     	;# 
  1116  0FEE                     	;# 
  1117  0FEF                     	;# 
  1118  0000                     	;# 
  1119  0001                     	;# 
  1120  0002                     	;# 
  1121  0003                     	;# 
  1122  0004                     	;# 
  1123  0005                     	;# 
  1124  0006                     	;# 
  1125  0007                     	;# 
  1126  0008                     	;# 
  1127  0009                     	;# 
  1128  000A                     	;# 
  1129  000B                     	;# 
  1130  000C                     	;# 
  1131  000E                     	;# 
  1132  0010                     	;# 
  1133  0011                     	;# 
  1134  0012                     	;# 
  1135  0013                     	;# 
  1136  0014                     	;# 
  1137  0015                     	;# 
  1138  0015                     	;# 
  1139  0016                     	;# 
  1140  0016                     	;# 
  1141  0017                     	;# 
  1142  0018                     	;# 
  1143  0019                     	;# 
  1144  0019                     	;# 
  1145  001A                     	;# 
  1146  001B                     	;# 
  1147  001C                     	;# 
  1148  001D                     	;# 
  1149  001E                     	;# 
  1150  001F                     	;# 
  1151  008C                     	;# 
  1152  008E                     	;# 
  1153  0090                     	;# 
  1154  0091                     	;# 
  1155  0092                     	;# 
  1156  0093                     	;# 
  1157  0094                     	;# 
  1158  0097                     	;# 
  1159  009B                     	;# 
  1160  009B                     	;# 
  1161  009C                     	;# 
  1162  009D                     	;# 
  1163  009E                     	;# 
  1164  009F                     	;# 
  1165  010C                     	;# 
  1166  010E                     	;# 
  1167  0111                     	;# 
  1168  0112                     	;# 
  1169  0113                     	;# 
  1170  0114                     	;# 
  1171  0115                     	;# 
  1172  0116                     	;# 
  1173  0117                     	;# 
  1174  0118                     	;# 
  1175  0119                     	;# 
  1176  018C                     	;# 
  1177  018E                     	;# 
  1178  0199                     	;# 
  1179  0199                     	;# 
  1180  0199                     	;# 
  1181  019A                     	;# 
  1182  019A                     	;# 
  1183  019A                     	;# 
  1184  019B                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019B                     	;# 
  1189  019C                     	;# 
  1190  019C                     	;# 
  1191  019C                     	;# 
  1192  019D                     	;# 
  1193  019D                     	;# 
  1194  019D                     	;# 
  1195  019E                     	;# 
  1196  019E                     	;# 
  1197  019E                     	;# 
  1198  019F                     	;# 
  1199  019F                     	;# 
  1200  019F                     	;# 
  1201  019F                     	;# 
  1202  019F                     	;# 
  1203  020C                     	;# 
  1204  020E                     	;# 
  1205  0211                     	;# 
  1206  0211                     	;# 
  1207  0212                     	;# 
  1208  0212                     	;# 
  1209  0213                     	;# 
  1210  0213                     	;# 
  1211  0214                     	;# 
  1212  0214                     	;# 
  1213  0215                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0215                     	;# 
  1217  0216                     	;# 
  1218  0216                     	;# 
  1219  0217                     	;# 
  1220  0217                     	;# 
  1221  0219                     	;# 
  1222  021A                     	;# 
  1223  021B                     	;# 
  1224  021C                     	;# 
  1225  021D                     	;# 
  1226  021D                     	;# 
  1227  021E                     	;# 
  1228  021F                     	;# 
  1229  028C                     	;# 
  1230  028E                     	;# 
  1231  0291                     	;# 
  1232  0291                     	;# 
  1233  0292                     	;# 
  1234  0293                     	;# 
  1235  0294                     	;# 
  1236  0295                     	;# 
  1237  0295                     	;# 
  1238  0296                     	;# 
  1239  0297                     	;# 
  1240  0298                     	;# 
  1241  029F                     	;# 
  1242  030C                     	;# 
  1243  030E                     	;# 
  1244  0311                     	;# 
  1245  0311                     	;# 
  1246  0312                     	;# 
  1247  0313                     	;# 
  1248  0314                     	;# 
  1249  0315                     	;# 
  1250  0315                     	;# 
  1251  0316                     	;# 
  1252  0317                     	;# 
  1253  0318                     	;# 
  1254  038C                     	;# 
  1255  038E                     	;# 
  1256  0391                     	;# 
  1257  0392                     	;# 
  1258  0393                     	;# 
  1259  0397                     	;# 
  1260  0398                     	;# 
  1261  0399                     	;# 
  1262  039A                     	;# 
  1263  039C                     	;# 
  1264  039D                     	;# 
  1265  039E                     	;# 
  1266  039F                     	;# 
  1267  0411                     	;# 
  1268  0411                     	;# 
  1269  0412                     	;# 
  1270  0413                     	;# 
  1271  0414                     	;# 
  1272  0415                     	;# 
  1273  0416                     	;# 
  1274  0417                     	;# 
  1275  0418                     	;# 
  1276  0418                     	;# 
  1277  0419                     	;# 
  1278  041A                     	;# 
  1279  041B                     	;# 
  1280  041C                     	;# 
  1281  041D                     	;# 
  1282  041E                     	;# 
  1283  041F                     	;# 
  1284  0498                     	;# 
  1285  0498                     	;# 
  1286  0499                     	;# 
  1287  049A                     	;# 
  1288  049B                     	;# 
  1289  049B                     	;# 
  1290  049C                     	;# 
  1291  049D                     	;# 
  1292  049E                     	;# 
  1293  049F                     	;# 
  1294  0617                     	;# 
  1295  0618                     	;# 
  1296  0619                     	;# 
  1297  0619                     	;# 
  1298  061A                     	;# 
  1299  061B                     	;# 
  1300  061C                     	;# 
  1301  061C                     	;# 
  1302  061F                     	;# 
  1303  0691                     	;# 
  1304  0692                     	;# 
  1305  0693                     	;# 
  1306  0694                     	;# 
  1307  0695                     	;# 
  1308  0696                     	;# 
  1309  0697                     	;# 
  1310  0698                     	;# 
  1311  0699                     	;# 
  1312  0711                     	;# 
  1313  0712                     	;# 
  1314  0713                     	;# 
  1315  0714                     	;# 
  1316  0715                     	;# 
  1317  0716                     	;# 
  1318  0717                     	;# 
  1319  0718                     	;# 
  1320  0719                     	;# 
  1321  0891                     	;# 
  1322  0891                     	;# 
  1323  0891                     	;# 
  1324  0891                     	;# 
  1325  0891                     	;# 
  1326  0891                     	;# 
  1327  0892                     	;# 
  1328  0892                     	;# 
  1329  0892                     	;# 
  1330  0893                     	;# 
  1331  0893                     	;# 
  1332  0893                     	;# 
  1333  0893                     	;# 
  1334  0893                     	;# 
  1335  0893                     	;# 
  1336  0894                     	;# 
  1337  0894                     	;# 
  1338  0894                     	;# 
  1339  0895                     	;# 
  1340  0895                     	;# 
  1341  0895                     	;# 
  1342  0896                     	;# 
  1343  0896                     	;# 
  1344  0896                     	;# 
  1345  089B                     	;# 
  1346  0911                     	;# 
  1347  0912                     	;# 
  1348  0913                     	;# 
  1349  0914                     	;# 
  1350  0915                     	;# 
  1351  0916                     	;# 
  1352  0918                     	;# 
  1353  0919                     	;# 
  1354  091A                     	;# 
  1355  091B                     	;# 
  1356  091C                     	;# 
  1357  091D                     	;# 
  1358  091E                     	;# 
  1359  091F                     	;# 
  1360  0E0F                     	;# 
  1361  0E10                     	;# 
  1362  0E11                     	;# 
  1363  0E12                     	;# 
  1364  0E13                     	;# 
  1365  0E14                     	;# 
  1366  0E15                     	;# 
  1367  0E16                     	;# 
  1368  0E17                     	;# 
  1369  0E18                     	;# 
  1370  0E19                     	;# 
  1371  0E1A                     	;# 
  1372  0E1B                     	;# 
  1373  0E1C                     	;# 
  1374  0E1D                     	;# 
  1375  0E1E                     	;# 
  1376  0E1F                     	;# 
  1377  0E20                     	;# 
  1378  0E21                     	;# 
  1379  0E22                     	;# 
  1380  0E24                     	;# 
  1381  0E25                     	;# 
  1382  0E28                     	;# 
  1383  0E29                     	;# 
  1384  0E2A                     	;# 
  1385  0E2B                     	;# 
  1386  0E2C                     	;# 
  1387  0E2D                     	;# 
  1388  0E2E                     	;# 
  1389  0E2F                     	;# 
  1390  0E90                     	;# 
  1391  0E91                     	;# 
  1392  0E92                     	;# 
  1393  0E94                     	;# 
  1394  0E95                     	;# 
  1395  0EA0                     	;# 
  1396  0EA1                     	;# 
  1397  0EA2                     	;# 
  1398  0EA3                     	;# 
  1399  0EA4                     	;# 
  1400  0EA5                     	;# 
  1401  0F0F                     	;# 
  1402  0F10                     	;# 
  1403  0F11                     	;# 
  1404  0F12                     	;# 
  1405  0F13                     	;# 
  1406  0F14                     	;# 
  1407  0F15                     	;# 
  1408  0F16                     	;# 
  1409  0F17                     	;# 
  1410  0F18                     	;# 
  1411  0F19                     	;# 
  1412  0F1A                     	;# 
  1413  0F1B                     	;# 
  1414  0F1C                     	;# 
  1415  0F1D                     	;# 
  1416  0F1E                     	;# 
  1417  0F1F                     	;# 
  1418  0F20                     	;# 
  1419  0F21                     	;# 
  1420  0F22                     	;# 
  1421  0F23                     	;# 
  1422  0F24                     	;# 
  1423  0F25                     	;# 
  1424  0F26                     	;# 
  1425  0F27                     	;# 
  1426  0F28                     	;# 
  1427  0F29                     	;# 
  1428  0F2A                     	;# 
  1429  0F2B                     	;# 
  1430  0F2C                     	;# 
  1431  0F2D                     	;# 
  1432  0F2E                     	;# 
  1433  0F2F                     	;# 
  1434  0F30                     	;# 
  1435  0F31                     	;# 
  1436  0F32                     	;# 
  1437  0F33                     	;# 
  1438  0F34                     	;# 
  1439  0F35                     	;# 
  1440  0F36                     	;# 
  1441  0F37                     	;# 
  1442  0FE4                     	;# 
  1443  0FE5                     	;# 
  1444  0FE6                     	;# 
  1445  0FE7                     	;# 
  1446  0FE8                     	;# 
  1447  0FE9                     	;# 
  1448  0FEA                     	;# 
  1449  0FEB                     	;# 
  1450  0FED                     	;# 
  1451  0FEE                     	;# 
  1452  0FEF                     	;# 
  1453  0000                     	;# 
  1454  0001                     	;# 
  1455  0002                     	;# 
  1456  0003                     	;# 
  1457  0004                     	;# 
  1458  0005                     	;# 
  1459  0006                     	;# 
  1460  0007                     	;# 
  1461  0008                     	;# 
  1462  0009                     	;# 
  1463  000A                     	;# 
  1464  000B                     	;# 
  1465  000C                     	;# 
  1466  000E                     	;# 
  1467  0010                     	;# 
  1468  0011                     	;# 
  1469  0012                     	;# 
  1470  0013                     	;# 
  1471  0014                     	;# 
  1472  0015                     	;# 
  1473  0015                     	;# 
  1474  0016                     	;# 
  1475  0016                     	;# 
  1476  0017                     	;# 
  1477  0018                     	;# 
  1478  0019                     	;# 
  1479  0019                     	;# 
  1480  001A                     	;# 
  1481  001B                     	;# 
  1482  001C                     	;# 
  1483  001D                     	;# 
  1484  001E                     	;# 
  1485  001F                     	;# 
  1486  008C                     	;# 
  1487  008E                     	;# 
  1488  0090                     	;# 
  1489  0091                     	;# 
  1490  0092                     	;# 
  1491  0093                     	;# 
  1492  0094                     	;# 
  1493  0097                     	;# 
  1494  009B                     	;# 
  1495  009B                     	;# 
  1496  009C                     	;# 
  1497  009D                     	;# 
  1498  009E                     	;# 
  1499  009F                     	;# 
  1500  010C                     	;# 
  1501  010E                     	;# 
  1502  0111                     	;# 
  1503  0112                     	;# 
  1504  0113                     	;# 
  1505  0114                     	;# 
  1506  0115                     	;# 
  1507  0116                     	;# 
  1508  0117                     	;# 
  1509  0118                     	;# 
  1510  0119                     	;# 
  1511  018C                     	;# 
  1512  018E                     	;# 
  1513  0199                     	;# 
  1514  0199                     	;# 
  1515  0199                     	;# 
  1516  019A                     	;# 
  1517  019A                     	;# 
  1518  019A                     	;# 
  1519  019B                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019C                     	;# 
  1525  019C                     	;# 
  1526  019C                     	;# 
  1527  019D                     	;# 
  1528  019D                     	;# 
  1529  019D                     	;# 
  1530  019E                     	;# 
  1531  019E                     	;# 
  1532  019E                     	;# 
  1533  019F                     	;# 
  1534  019F                     	;# 
  1535  019F                     	;# 
  1536  019F                     	;# 
  1537  019F                     	;# 
  1538  020C                     	;# 
  1539  020E                     	;# 
  1540  0211                     	;# 
  1541  0211                     	;# 
  1542  0212                     	;# 
  1543  0212                     	;# 
  1544  0213                     	;# 
  1545  0213                     	;# 
  1546  0214                     	;# 
  1547  0214                     	;# 
  1548  0215                     	;# 
  1549  0215                     	;# 
  1550  0215                     	;# 
  1551  0215                     	;# 
  1552  0216                     	;# 
  1553  0216                     	;# 
  1554  0217                     	;# 
  1555  0217                     	;# 
  1556  0219                     	;# 
  1557  021A                     	;# 
  1558  021B                     	;# 
  1559  021C                     	;# 
  1560  021D                     	;# 
  1561  021D                     	;# 
  1562  021E                     	;# 
  1563  021F                     	;# 
  1564  028C                     	;# 
  1565  028E                     	;# 
  1566  0291                     	;# 
  1567  0291                     	;# 
  1568  0292                     	;# 
  1569  0293                     	;# 
  1570  0294                     	;# 
  1571  0295                     	;# 
  1572  0295                     	;# 
  1573  0296                     	;# 
  1574  0297                     	;# 
  1575  0298                     	;# 
  1576  029F                     	;# 
  1577  030C                     	;# 
  1578  030E                     	;# 
  1579  0311                     	;# 
  1580  0311                     	;# 
  1581  0312                     	;# 
  1582  0313                     	;# 
  1583  0314                     	;# 
  1584  0315                     	;# 
  1585  0315                     	;# 
  1586  0316                     	;# 
  1587  0317                     	;# 
  1588  0318                     	;# 
  1589  038C                     	;# 
  1590  038E                     	;# 
  1591  0391                     	;# 
  1592  0392                     	;# 
  1593  0393                     	;# 
  1594  0397                     	;# 
  1595  0398                     	;# 
  1596  0399                     	;# 
  1597  039A                     	;# 
  1598  039C                     	;# 
  1599  039D                     	;# 
  1600  039E                     	;# 
  1601  039F                     	;# 
  1602  0411                     	;# 
  1603  0411                     	;# 
  1604  0412                     	;# 
  1605  0413                     	;# 
  1606  0414                     	;# 
  1607  0415                     	;# 
  1608  0416                     	;# 
  1609  0417                     	;# 
  1610  0418                     	;# 
  1611  0418                     	;# 
  1612  0419                     	;# 
  1613  041A                     	;# 
  1614  041B                     	;# 
  1615  041C                     	;# 
  1616  041D                     	;# 
  1617  041E                     	;# 
  1618  041F                     	;# 
  1619  0498                     	;# 
  1620  0498                     	;# 
  1621  0499                     	;# 
  1622  049A                     	;# 
  1623  049B                     	;# 
  1624  049B                     	;# 
  1625  049C                     	;# 
  1626  049D                     	;# 
  1627  049E                     	;# 
  1628  049F                     	;# 
  1629  0617                     	;# 
  1630  0618                     	;# 
  1631  0619                     	;# 
  1632  0619                     	;# 
  1633  061A                     	;# 
  1634  061B                     	;# 
  1635  061C                     	;# 
  1636  061C                     	;# 
  1637  061F                     	;# 
  1638  0691                     	;# 
  1639  0692                     	;# 
  1640  0693                     	;# 
  1641  0694                     	;# 
  1642  0695                     	;# 
  1643  0696                     	;# 
  1644  0697                     	;# 
  1645  0698                     	;# 
  1646  0699                     	;# 
  1647  0711                     	;# 
  1648  0712                     	;# 
  1649  0713                     	;# 
  1650  0714                     	;# 
  1651  0715                     	;# 
  1652  0716                     	;# 
  1653  0717                     	;# 
  1654  0718                     	;# 
  1655  0719                     	;# 
  1656  0891                     	;# 
  1657  0891                     	;# 
  1658  0891                     	;# 
  1659  0891                     	;# 
  1660  0891                     	;# 
  1661  0891                     	;# 
  1662  0892                     	;# 
  1663  0892                     	;# 
  1664  0892                     	;# 
  1665  0893                     	;# 
  1666  0893                     	;# 
  1667  0893                     	;# 
  1668  0893                     	;# 
  1669  0893                     	;# 
  1670  0893                     	;# 
  1671  0894                     	;# 
  1672  0894                     	;# 
  1673  0894                     	;# 
  1674  0895                     	;# 
  1675  0895                     	;# 
  1676  0895                     	;# 
  1677  0896                     	;# 
  1678  0896                     	;# 
  1679  0896                     	;# 
  1680  089B                     	;# 
  1681  0911                     	;# 
  1682  0912                     	;# 
  1683  0913                     	;# 
  1684  0914                     	;# 
  1685  0915                     	;# 
  1686  0916                     	;# 
  1687  0918                     	;# 
  1688  0919                     	;# 
  1689  091A                     	;# 
  1690  091B                     	;# 
  1691  091C                     	;# 
  1692  091D                     	;# 
  1693  091E                     	;# 
  1694  091F                     	;# 
  1695  0E0F                     	;# 
  1696  0E10                     	;# 
  1697  0E11                     	;# 
  1698  0E12                     	;# 
  1699  0E13                     	;# 
  1700  0E14                     	;# 
  1701  0E15                     	;# 
  1702  0E16                     	;# 
  1703  0E17                     	;# 
  1704  0E18                     	;# 
  1705  0E19                     	;# 
  1706  0E1A                     	;# 
  1707  0E1B                     	;# 
  1708  0E1C                     	;# 
  1709  0E1D                     	;# 
  1710  0E1E                     	;# 
  1711  0E1F                     	;# 
  1712  0E20                     	;# 
  1713  0E21                     	;# 
  1714  0E22                     	;# 
  1715  0E24                     	;# 
  1716  0E25                     	;# 
  1717  0E28                     	;# 
  1718  0E29                     	;# 
  1719  0E2A                     	;# 
  1720  0E2B                     	;# 
  1721  0E2C                     	;# 
  1722  0E2D                     	;# 
  1723  0E2E                     	;# 
  1724  0E2F                     	;# 
  1725  0E90                     	;# 
  1726  0E91                     	;# 
  1727  0E92                     	;# 
  1728  0E94                     	;# 
  1729  0E95                     	;# 
  1730  0EA0                     	;# 
  1731  0EA1                     	;# 
  1732  0EA2                     	;# 
  1733  0EA3                     	;# 
  1734  0EA4                     	;# 
  1735  0EA5                     	;# 
  1736  0F0F                     	;# 
  1737  0F10                     	;# 
  1738  0F11                     	;# 
  1739  0F12                     	;# 
  1740  0F13                     	;# 
  1741  0F14                     	;# 
  1742  0F15                     	;# 
  1743  0F16                     	;# 
  1744  0F17                     	;# 
  1745  0F18                     	;# 
  1746  0F19                     	;# 
  1747  0F1A                     	;# 
  1748  0F1B                     	;# 
  1749  0F1C                     	;# 
  1750  0F1D                     	;# 
  1751  0F1E                     	;# 
  1752  0F1F                     	;# 
  1753  0F20                     	;# 
  1754  0F21                     	;# 
  1755  0F22                     	;# 
  1756  0F23                     	;# 
  1757  0F24                     	;# 
  1758  0F25                     	;# 
  1759  0F26                     	;# 
  1760  0F27                     	;# 
  1761  0F28                     	;# 
  1762  0F29                     	;# 
  1763  0F2A                     	;# 
  1764  0F2B                     	;# 
  1765  0F2C                     	;# 
  1766  0F2D                     	;# 
  1767  0F2E                     	;# 
  1768  0F2F                     	;# 
  1769  0F30                     	;# 
  1770  0F31                     	;# 
  1771  0F32                     	;# 
  1772  0F33                     	;# 
  1773  0F34                     	;# 
  1774  0F35                     	;# 
  1775  0F36                     	;# 
  1776  0F37                     	;# 
  1777  0FE4                     	;# 
  1778  0FE5                     	;# 
  1779  0FE6                     	;# 
  1780  0FE7                     	;# 
  1781  0FE8                     	;# 
  1782  0FE9                     	;# 
  1783  0FEA                     	;# 
  1784  0FEB                     	;# 
  1785  0FED                     	;# 
  1786  0FEE                     	;# 
  1787  0FEF                     	;# 
  1788  0000                     	;# 
  1789  0001                     	;# 
  1790  0002                     	;# 
  1791  0003                     	;# 
  1792  0004                     	;# 
  1793  0005                     	;# 
  1794  0006                     	;# 
  1795  0007                     	;# 
  1796  0008                     	;# 
  1797  0009                     	;# 
  1798  000A                     	;# 
  1799  000B                     	;# 
  1800  000C                     	;# 
  1801  000E                     	;# 
  1802  0010                     	;# 
  1803  0011                     	;# 
  1804  0012                     	;# 
  1805  0013                     	;# 
  1806  0014                     	;# 
  1807  0015                     	;# 
  1808  0015                     	;# 
  1809  0016                     	;# 
  1810  0016                     	;# 
  1811  0017                     	;# 
  1812  0018                     	;# 
  1813  0019                     	;# 
  1814  0019                     	;# 
  1815  001A                     	;# 
  1816  001B                     	;# 
  1817  001C                     	;# 
  1818  001D                     	;# 
  1819  001E                     	;# 
  1820  001F                     	;# 
  1821  008C                     	;# 
  1822  008E                     	;# 
  1823  0090                     	;# 
  1824  0091                     	;# 
  1825  0092                     	;# 
  1826  0093                     	;# 
  1827  0094                     	;# 
  1828  0097                     	;# 
  1829  009B                     	;# 
  1830  009B                     	;# 
  1831  009C                     	;# 
  1832  009D                     	;# 
  1833  009E                     	;# 
  1834  009F                     	;# 
  1835  010C                     	;# 
  1836  010E                     	;# 
  1837  0111                     	;# 
  1838  0112                     	;# 
  1839  0113                     	;# 
  1840  0114                     	;# 
  1841  0115                     	;# 
  1842  0116                     	;# 
  1843  0117                     	;# 
  1844  0118                     	;# 
  1845  0119                     	;# 
  1846  018C                     	;# 
  1847  018E                     	;# 
  1848  0199                     	;# 
  1849  0199                     	;# 
  1850  0199                     	;# 
  1851  019A                     	;# 
  1852  019A                     	;# 
  1853  019A                     	;# 
  1854  019B                     	;# 
  1855  019B                     	;# 
  1856  019B                     	;# 
  1857  019B                     	;# 
  1858  019B                     	;# 
  1859  019C                     	;# 
  1860  019C                     	;# 
  1861  019C                     	;# 
  1862  019D                     	;# 
  1863  019D                     	;# 
  1864  019D                     	;# 
  1865  019E                     	;# 
  1866  019E                     	;# 
  1867  019E                     	;# 
  1868  019F                     	;# 
  1869  019F                     	;# 
  1870  019F                     	;# 
  1871  019F                     	;# 
  1872  019F                     	;# 
  1873  020C                     	;# 
  1874  020E                     	;# 
  1875  0211                     	;# 
  1876  0211                     	;# 
  1877  0212                     	;# 
  1878  0212                     	;# 
  1879  0213                     	;# 
  1880  0213                     	;# 
  1881  0214                     	;# 
  1882  0214                     	;# 
  1883  0215                     	;# 
  1884  0215                     	;# 
  1885  0215                     	;# 
  1886  0215                     	;# 
  1887  0216                     	;# 
  1888  0216                     	;# 
  1889  0217                     	;# 
  1890  0217                     	;# 
  1891  0219                     	;# 
  1892  021A                     	;# 
  1893  021B                     	;# 
  1894  021C                     	;# 
  1895  021D                     	;# 
  1896  021D                     	;# 
  1897  021E                     	;# 
  1898  021F                     	;# 
  1899  028C                     	;# 
  1900  028E                     	;# 
  1901  0291                     	;# 
  1902  0291                     	;# 
  1903  0292                     	;# 
  1904  0293                     	;# 
  1905  0294                     	;# 
  1906  0295                     	;# 
  1907  0295                     	;# 
  1908  0296                     	;# 
  1909  0297                     	;# 
  1910  0298                     	;# 
  1911  029F                     	;# 
  1912  030C                     	;# 
  1913  030E                     	;# 
  1914  0311                     	;# 
  1915  0311                     	;# 
  1916  0312                     	;# 
  1917  0313                     	;# 
  1918  0314                     	;# 
  1919  0315                     	;# 
  1920  0315                     	;# 
  1921  0316                     	;# 
  1922  0317                     	;# 
  1923  0318                     	;# 
  1924  038C                     	;# 
  1925  038E                     	;# 
  1926  0391                     	;# 
  1927  0392                     	;# 
  1928  0393                     	;# 
  1929  0397                     	;# 
  1930  0398                     	;# 
  1931  0399                     	;# 
  1932  039A                     	;# 
  1933  039C                     	;# 
  1934  039D                     	;# 
  1935  039E                     	;# 
  1936  039F                     	;# 
  1937  0411                     	;# 
  1938  0411                     	;# 
  1939  0412                     	;# 
  1940  0413                     	;# 
  1941  0414                     	;# 
  1942  0415                     	;# 
  1943  0416                     	;# 
  1944  0417                     	;# 
  1945  0418                     	;# 
  1946  0418                     	;# 
  1947  0419                     	;# 
  1948  041A                     	;# 
  1949  041B                     	;# 
  1950  041C                     	;# 
  1951  041D                     	;# 
  1952  041E                     	;# 
  1953  041F                     	;# 
  1954  0498                     	;# 
  1955  0498                     	;# 
  1956  0499                     	;# 
  1957  049A                     	;# 
  1958  049B                     	;# 
  1959  049B                     	;# 
  1960  049C                     	;# 
  1961  049D                     	;# 
  1962  049E                     	;# 
  1963  049F                     	;# 
  1964  0617                     	;# 
  1965  0618                     	;# 
  1966  0619                     	;# 
  1967  0619                     	;# 
  1968  061A                     	;# 
  1969  061B                     	;# 
  1970  061C                     	;# 
  1971  061C                     	;# 
  1972  061F                     	;# 
  1973  0691                     	;# 
  1974  0692                     	;# 
  1975  0693                     	;# 
  1976  0694                     	;# 
  1977  0695                     	;# 
  1978  0696                     	;# 
  1979  0697                     	;# 
  1980  0698                     	;# 
  1981  0699                     	;# 
  1982  0711                     	;# 
  1983  0712                     	;# 
  1984  0713                     	;# 
  1985  0714                     	;# 
  1986  0715                     	;# 
  1987  0716                     	;# 
  1988  0717                     	;# 
  1989  0718                     	;# 
  1990  0719                     	;# 
  1991  0891                     	;# 
  1992  0891                     	;# 
  1993  0891                     	;# 
  1994  0891                     	;# 
  1995  0891                     	;# 
  1996  0891                     	;# 
  1997  0892                     	;# 
  1998  0892                     	;# 
  1999  0892                     	;# 
  2000  0893                     	;# 
  2001  0893                     	;# 
  2002  0893                     	;# 
  2003  0893                     	;# 
  2004  0893                     	;# 
  2005  0893                     	;# 
  2006  0894                     	;# 
  2007  0894                     	;# 
  2008  0894                     	;# 
  2009  0895                     	;# 
  2010  0895                     	;# 
  2011  0895                     	;# 
  2012  0896                     	;# 
  2013  0896                     	;# 
  2014  0896                     	;# 
  2015  089B                     	;# 
  2016  0911                     	;# 
  2017  0912                     	;# 
  2018  0913                     	;# 
  2019  0914                     	;# 
  2020  0915                     	;# 
  2021  0916                     	;# 
  2022  0918                     	;# 
  2023  0919                     	;# 
  2024  091A                     	;# 
  2025  091B                     	;# 
  2026  091C                     	;# 
  2027  091D                     	;# 
  2028  091E                     	;# 
  2029  091F                     	;# 
  2030  0E0F                     	;# 
  2031  0E10                     	;# 
  2032  0E11                     	;# 
  2033  0E12                     	;# 
  2034  0E13                     	;# 
  2035  0E14                     	;# 
  2036  0E15                     	;# 
  2037  0E16                     	;# 
  2038  0E17                     	;# 
  2039  0E18                     	;# 
  2040  0E19                     	;# 
  2041  0E1A                     	;# 
  2042  0E1B                     	;# 
  2043  0E1C                     	;# 
  2044  0E1D                     	;# 
  2045  0E1E                     	;# 
  2046  0E1F                     	;# 
  2047  0E20                     	;# 
  2048  0E21                     	;# 
  2049  0E22                     	;# 
  2050  0E24                     	;# 
  2051  0E25                     	;# 
  2052  0E28                     	;# 
  2053  0E29                     	;# 
  2054  0E2A                     	;# 
  2055  0E2B                     	;# 
  2056  0E2C                     	;# 
  2057  0E2D                     	;# 
  2058  0E2E                     	;# 
  2059  0E2F                     	;# 
  2060  0E90                     	;# 
  2061  0E91                     	;# 
  2062  0E92                     	;# 
  2063  0E94                     	;# 
  2064  0E95                     	;# 
  2065  0EA0                     	;# 
  2066  0EA1                     	;# 
  2067  0EA2                     	;# 
  2068  0EA3                     	;# 
  2069  0EA4                     	;# 
  2070  0EA5                     	;# 
  2071  0F0F                     	;# 
  2072  0F10                     	;# 
  2073  0F11                     	;# 
  2074  0F12                     	;# 
  2075  0F13                     	;# 
  2076  0F14                     	;# 
  2077  0F15                     	;# 
  2078  0F16                     	;# 
  2079  0F17                     	;# 
  2080  0F18                     	;# 
  2081  0F19                     	;# 
  2082  0F1A                     	;# 
  2083  0F1B                     	;# 
  2084  0F1C                     	;# 
  2085  0F1D                     	;# 
  2086  0F1E                     	;# 
  2087  0F1F                     	;# 
  2088  0F20                     	;# 
  2089  0F21                     	;# 
  2090  0F22                     	;# 
  2091  0F23                     	;# 
  2092  0F24                     	;# 
  2093  0F25                     	;# 
  2094  0F26                     	;# 
  2095  0F27                     	;# 
  2096  0F28                     	;# 
  2097  0F29                     	;# 
  2098  0F2A                     	;# 
  2099  0F2B                     	;# 
  2100  0F2C                     	;# 
  2101  0F2D                     	;# 
  2102  0F2E                     	;# 
  2103  0F2F                     	;# 
  2104  0F30                     	;# 
  2105  0F31                     	;# 
  2106  0F32                     	;# 
  2107  0F33                     	;# 
  2108  0F34                     	;# 
  2109  0F35                     	;# 
  2110  0F36                     	;# 
  2111  0F37                     	;# 
  2112  0FE4                     	;# 
  2113  0FE5                     	;# 
  2114  0FE6                     	;# 
  2115  0FE7                     	;# 
  2116  0FE8                     	;# 
  2117  0FE9                     	;# 
  2118  0FEA                     	;# 
  2119  0FEB                     	;# 
  2120  0FED                     	;# 
  2121  0FEE                     	;# 
  2122  0FEF                     	;# 
  2123  0000                     	;# 
  2124  0001                     	;# 
  2125  0002                     	;# 
  2126  0003                     	;# 
  2127  0004                     	;# 
  2128  0005                     	;# 
  2129  0006                     	;# 
  2130  0007                     	;# 
  2131  0008                     	;# 
  2132  0009                     	;# 
  2133  000A                     	;# 
  2134  000B                     	;# 
  2135  000C                     	;# 
  2136  000E                     	;# 
  2137  0010                     	;# 
  2138  0011                     	;# 
  2139  0012                     	;# 
  2140  0013                     	;# 
  2141  0014                     	;# 
  2142  0015                     	;# 
  2143  0015                     	;# 
  2144  0016                     	;# 
  2145  0016                     	;# 
  2146  0017                     	;# 
  2147  0018                     	;# 
  2148  0019                     	;# 
  2149  0019                     	;# 
  2150  001A                     	;# 
  2151  001B                     	;# 
  2152  001C                     	;# 
  2153  001D                     	;# 
  2154  001E                     	;# 
  2155  001F                     	;# 
  2156  008C                     	;# 
  2157  008E                     	;# 
  2158  0090                     	;# 
  2159  0091                     	;# 
  2160  0092                     	;# 
  2161  0093                     	;# 
  2162  0094                     	;# 
  2163  0097                     	;# 
  2164  009B                     	;# 
  2165  009B                     	;# 
  2166  009C                     	;# 
  2167  009D                     	;# 
  2168  009E                     	;# 
  2169  009F                     	;# 
  2170  010C                     	;# 
  2171  010E                     	;# 
  2172  0111                     	;# 
  2173  0112                     	;# 
  2174  0113                     	;# 
  2175  0114                     	;# 
  2176  0115                     	;# 
  2177  0116                     	;# 
  2178  0117                     	;# 
  2179  0118                     	;# 
  2180  0119                     	;# 
  2181  018C                     	;# 
  2182  018E                     	;# 
  2183  0199                     	;# 
  2184  0199                     	;# 
  2185  0199                     	;# 
  2186  019A                     	;# 
  2187  019A                     	;# 
  2188  019A                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019B                     	;# 
  2192  019B                     	;# 
  2193  019B                     	;# 
  2194  019C                     	;# 
  2195  019C                     	;# 
  2196  019C                     	;# 
  2197  019D                     	;# 
  2198  019D                     	;# 
  2199  019D                     	;# 
  2200  019E                     	;# 
  2201  019E                     	;# 
  2202  019E                     	;# 
  2203  019F                     	;# 
  2204  019F                     	;# 
  2205  019F                     	;# 
  2206  019F                     	;# 
  2207  019F                     	;# 
  2208  020C                     	;# 
  2209  020E                     	;# 
  2210  0211                     	;# 
  2211  0211                     	;# 
  2212  0212                     	;# 
  2213  0212                     	;# 
  2214  0213                     	;# 
  2215  0213                     	;# 
  2216  0214                     	;# 
  2217  0214                     	;# 
  2218  0215                     	;# 
  2219  0215                     	;# 
  2220  0215                     	;# 
  2221  0215                     	;# 
  2222  0216                     	;# 
  2223  0216                     	;# 
  2224  0217                     	;# 
  2225  0217                     	;# 
  2226  0219                     	;# 
  2227  021A                     	;# 
  2228  021B                     	;# 
  2229  021C                     	;# 
  2230  021D                     	;# 
  2231  021D                     	;# 
  2232  021E                     	;# 
  2233  021F                     	;# 
  2234  028C                     	;# 
  2235  028E                     	;# 
  2236  0291                     	;# 
  2237  0291                     	;# 
  2238  0292                     	;# 
  2239  0293                     	;# 
  2240  0294                     	;# 
  2241  0295                     	;# 
  2242  0295                     	;# 
  2243  0296                     	;# 
  2244  0297                     	;# 
  2245  0298                     	;# 
  2246  029F                     	;# 
  2247  030C                     	;# 
  2248  030E                     	;# 
  2249  0311                     	;# 
  2250  0311                     	;# 
  2251  0312                     	;# 
  2252  0313                     	;# 
  2253  0314                     	;# 
  2254  0315                     	;# 
  2255  0315                     	;# 
  2256  0316                     	;# 
  2257  0317                     	;# 
  2258  0318                     	;# 
  2259  038C                     	;# 
  2260  038E                     	;# 
  2261  0391                     	;# 
  2262  0392                     	;# 
  2263  0393                     	;# 
  2264  0397                     	;# 
  2265  0398                     	;# 
  2266  0399                     	;# 
  2267  039A                     	;# 
  2268  039C                     	;# 
  2269  039D                     	;# 
  2270  039E                     	;# 
  2271  039F                     	;# 
  2272  0411                     	;# 
  2273  0411                     	;# 
  2274  0412                     	;# 
  2275  0413                     	;# 
  2276  0414                     	;# 
  2277  0415                     	;# 
  2278  0416                     	;# 
  2279  0417                     	;# 
  2280  0418                     	;# 
  2281  0418                     	;# 
  2282  0419                     	;# 
  2283  041A                     	;# 
  2284  041B                     	;# 
  2285  041C                     	;# 
  2286  041D                     	;# 
  2287  041E                     	;# 
  2288  041F                     	;# 
  2289  0498                     	;# 
  2290  0498                     	;# 
  2291  0499                     	;# 
  2292  049A                     	;# 
  2293  049B                     	;# 
  2294  049B                     	;# 
  2295  049C                     	;# 
  2296  049D                     	;# 
  2297  049E                     	;# 
  2298  049F                     	;# 
  2299  0617                     	;# 
  2300  0618                     	;# 
  2301  0619                     	;# 
  2302  0619                     	;# 
  2303  061A                     	;# 
  2304  061B                     	;# 
  2305  061C                     	;# 
  2306  061C                     	;# 
  2307  061F                     	;# 
  2308  0691                     	;# 
  2309  0692                     	;# 
  2310  0693                     	;# 
  2311  0694                     	;# 
  2312  0695                     	;# 
  2313  0696                     	;# 
  2314  0697                     	;# 
  2315  0698                     	;# 
  2316  0699                     	;# 
  2317  0711                     	;# 
  2318  0712                     	;# 
  2319  0713                     	;# 
  2320  0714                     	;# 
  2321  0715                     	;# 
  2322  0716                     	;# 
  2323  0717                     	;# 
  2324  0718                     	;# 
  2325  0719                     	;# 
  2326  0891                     	;# 
  2327  0891                     	;# 
  2328  0891                     	;# 
  2329  0891                     	;# 
  2330  0891                     	;# 
  2331  0891                     	;# 
  2332  0892                     	;# 
  2333  0892                     	;# 
  2334  0892                     	;# 
  2335  0893                     	;# 
  2336  0893                     	;# 
  2337  0893                     	;# 
  2338  0893                     	;# 
  2339  0893                     	;# 
  2340  0893                     	;# 
  2341  0894                     	;# 
  2342  0894                     	;# 
  2343  0894                     	;# 
  2344  0895                     	;# 
  2345  0895                     	;# 
  2346  0895                     	;# 
  2347  0896                     	;# 
  2348  0896                     	;# 
  2349  0896                     	;# 
  2350  089B                     	;# 
  2351  0911                     	;# 
  2352  0912                     	;# 
  2353  0913                     	;# 
  2354  0914                     	;# 
  2355  0915                     	;# 
  2356  0916                     	;# 
  2357  0918                     	;# 
  2358  0919                     	;# 
  2359  091A                     	;# 
  2360  091B                     	;# 
  2361  091C                     	;# 
  2362  091D                     	;# 
  2363  091E                     	;# 
  2364  091F                     	;# 
  2365  0E0F                     	;# 
  2366  0E10                     	;# 
  2367  0E11                     	;# 
  2368  0E12                     	;# 
  2369  0E13                     	;# 
  2370  0E14                     	;# 
  2371  0E15                     	;# 
  2372  0E16                     	;# 
  2373  0E17                     	;# 
  2374  0E18                     	;# 
  2375  0E19                     	;# 
  2376  0E1A                     	;# 
  2377  0E1B                     	;# 
  2378  0E1C                     	;# 
  2379  0E1D                     	;# 
  2380  0E1E                     	;# 
  2381  0E1F                     	;# 
  2382  0E20                     	;# 
  2383  0E21                     	;# 
  2384  0E22                     	;# 
  2385  0E24                     	;# 
  2386  0E25                     	;# 
  2387  0E28                     	;# 
  2388  0E29                     	;# 
  2389  0E2A                     	;# 
  2390  0E2B                     	;# 
  2391  0E2C                     	;# 
  2392  0E2D                     	;# 
  2393  0E2E                     	;# 
  2394  0E2F                     	;# 
  2395  0E90                     	;# 
  2396  0E91                     	;# 
  2397  0E92                     	;# 
  2398  0E94                     	;# 
  2399  0E95                     	;# 
  2400  0EA0                     	;# 
  2401  0EA1                     	;# 
  2402  0EA2                     	;# 
  2403  0EA3                     	;# 
  2404  0EA4                     	;# 
  2405  0EA5                     	;# 
  2406  0F0F                     	;# 
  2407  0F10                     	;# 
  2408  0F11                     	;# 
  2409  0F12                     	;# 
  2410  0F13                     	;# 
  2411  0F14                     	;# 
  2412  0F15                     	;# 
  2413  0F16                     	;# 
  2414  0F17                     	;# 
  2415  0F18                     	;# 
  2416  0F19                     	;# 
  2417  0F1A                     	;# 
  2418  0F1B                     	;# 
  2419  0F1C                     	;# 
  2420  0F1D                     	;# 
  2421  0F1E                     	;# 
  2422  0F1F                     	;# 
  2423  0F20                     	;# 
  2424  0F21                     	;# 
  2425  0F22                     	;# 
  2426  0F23                     	;# 
  2427  0F24                     	;# 
  2428  0F25                     	;# 
  2429  0F26                     	;# 
  2430  0F27                     	;# 
  2431  0F28                     	;# 
  2432  0F29                     	;# 
  2433  0F2A                     	;# 
  2434  0F2B                     	;# 
  2435  0F2C                     	;# 
  2436  0F2D                     	;# 
  2437  0F2E                     	;# 
  2438  0F2F                     	;# 
  2439  0F30                     	;# 
  2440  0F31                     	;# 
  2441  0F32                     	;# 
  2442  0F33                     	;# 
  2443  0F34                     	;# 
  2444  0F35                     	;# 
  2445  0F36                     	;# 
  2446  0F37                     	;# 
  2447  0FE4                     	;# 
  2448  0FE5                     	;# 
  2449  0FE6                     	;# 
  2450  0FE7                     	;# 
  2451  0FE8                     	;# 
  2452  0FE9                     	;# 
  2453  0FEA                     	;# 
  2454  0FEB                     	;# 
  2455  0FED                     	;# 
  2456  0FEE                     	;# 
  2457  0FEF                     	;# 
  2458                           
  2459                           	psect	idataBANK1
  2460  07FF                     __pidataBANK1:	
  2461 ;;nrf24l01Service@width	offset	0
  2462 ;;nrf24l01Service@i	offset	1
  2463 ;;strcmp@s1	offset	0
  2464 ;;strcmp@r	offset	1
  2465 ;;strcmp@s2	offset=-1 (param)
  2466 ;;nrf24l01SendTXBuffer@packet	offset	0
  2467 ;;nrf24l01SendTXBuffer@i	offset	1
  2468 ;;nrf24l01SendTXBuffer@width	offset	2
  2469 ;;strlen@cp	offset	0
  2470 ;;strlen@s	offset=-2 (param)
  2471 ;;nrf24l01SetRXMode@rxMode	offset	0
  2472 ;;nrf24l01Send@command	offset	0
  2473 ;;nrf24l01Send@data	offset=-1 (param)
  2474 ;;nrf24l01SPISend@data	offset	0
  2475 ;;memset@p	offset	0
  2476 ;;memset@p1	offset=-2 (param)
  2477 ;;memset@c	offset=-4 (param)
  2478 ;;memset@n	offset=-6 (param)
  2479 ;;nrf24l01Service@width	offset	0
  2480 ;;nrf24l01Service@i	offset	1
  2481 ;;strcmp@s1	offset	0
  2482 ;;strcmp@r	offset	1
  2483 ;;strcmp@s2	offset=-1 (param)
  2484 ;;nrf24l01SendTXBuffer@packet	offset	0
  2485 ;;nrf24l01SendTXBuffer@i	offset	1
  2486 ;;nrf24l01SendTXBuffer@width	offset	2
  2487 ;;strlen@cp	offset	0
  2488 ;;strlen@s	offset=-2 (param)
  2489 ;;nrf24l01SetRXMode@rxMode	offset	0
  2490 ;;nrf24l01Send@command	offset	0
  2491 ;;nrf24l01Send@data	offset=-1 (param)
  2492 ;;nrf24l01SPISend@data	offset	0
  2493 ;;memset@p	offset	0
  2494 ;;memset@p1	offset=-2 (param)
  2495 ;;memset@c	offset=-4 (param)
  2496 ;;memset@n	offset=-6 (param)
  2497                           
  2498                           
  2499                           ;initializer for _romData
  2500  07FF  3420               	retlw	low (_romDataMap| (0+512))
  2501                           
  2502                           	psect	stringtext1
  2503  1000                     __pstringtext1:	
  2504  1000                     _dpowers:	
  2505  1000  3401               	retlw	1
  2506  1001  3400               	retlw	0
  2507  1002  3400               	retlw	0
  2508  1003  3400               	retlw	0
  2509  1004  340A               	retlw	10
  2510  1005  3400               	retlw	0
  2511  1006  3400               	retlw	0
  2512  1007  3400               	retlw	0
  2513  1008  3464               	retlw	100
  2514  1009  3400               	retlw	0
  2515  100A  3400               	retlw	0
  2516  100B  3400               	retlw	0
  2517  100C  34E8               	retlw	232
  2518  100D  3403               	retlw	3
  2519  100E  3400               	retlw	0
  2520  100F  3400               	retlw	0
  2521  1010  3410               	retlw	16
  2522  1011  3427               	retlw	39
  2523  1012  3400               	retlw	0
  2524  1013  3400               	retlw	0
  2525  1014  34A0               	retlw	160
  2526  1015  3486               	retlw	134
  2527  1016  3401               	retlw	1
  2528  1017  3400               	retlw	0
  2529  1018  3440               	retlw	64
  2530  1019  3442               	retlw	66
  2531  101A  340F               	retlw	15
  2532  101B  3400               	retlw	0
  2533  101C  3480               	retlw	128
  2534  101D  3496               	retlw	150
  2535  101E  3498               	retlw	152
  2536  101F  3400               	retlw	0
  2537  1020  3400               	retlw	0
  2538  1021  34E1               	retlw	225
  2539  1022  34F5               	retlw	245
  2540  1023  3405               	retlw	5
  2541  1024  3400               	retlw	0
  2542  1025  34CA               	retlw	202
  2543  1026  349A               	retlw	154
  2544  1027  343B               	retlw	59
  2545  1028                     __end_of_dpowers:	
  2546                           
  2547                           	psect	stringtext2
  2548  1818                     __pstringtext2:	
  2549  1818                     _n_ADDRESS_P0:	
  2550  1818  34AD               	retlw	173
  2551  1819  3487               	retlw	135
  2552  181A  3466               	retlw	102
  2553  181B  34BC               	retlw	188
  2554  181C  34BB               	retlw	187
  2555  181D                     __end_of_n_ADDRESS_P0:	
  2556                           
  2557                           	psect	stringtext3
  2558  1800                     __pstringtext3:	
  2559  1800                     _n_ADDRESS_MUL:	
  2560  1800  3421               	retlw	33
  2561  1801                     __end_of_n_ADDRESS_MUL:	
  2562  001A                     _TMR1H	set	26
  2563  0019                     _TMR1L	set	25
  2564  001C                     _T1GCONbits	set	28
  2565  001B                     _T1CONbits	set	27
  2566  000B                     _INTCONbits	set	11
  2567  0011                     _PIR1bits	set	17
  2568  0010                     _PIR0bits	set	16
  2569  000C                     _PORTAbits	set	12
  2570  000E                     _PORTCbits	set	14
  2571  0003                     _STATUSbits	set	3
  2572  0091                     _PIE1bits	set	145
  2573  009E                     _ADCON1bits	set	158
  2574  009C                     _ADRESH	set	156
  2575  009B                     _ADRESL	set	155
  2576  009D                     _ADCON0bits	set	157
  2577  0090                     _PIE0bits	set	144
  2578  0097                     _WDTCONbits	set	151
  2579  008E                     _TRISCbits	set	142
  2580  008C                     _TRISAbits	set	140
  2581  0117                     _FVRCONbits	set	279
  2582  018E                     _ANSELCbits	set	398
  2583  018C                     _ANSELAbits	set	396
  2584  018E                     _ANSELC	set	398
  2585  018C                     _ANSELA	set	396
  2586  020C                     _WPUAbits	set	524
  2587  020E                     _WPUC	set	526
  2588  020C                     _WPUA	set	524
  2589  0211                     _SSP1BUF	set	529
  2590  0214                     _SSP1STATbits	set	532
  2591  0215                     _SSP1CON1bits	set	533
  2592  028C                     _ODCONAbits	set	652
  2593  028E                     _ODCONC	set	654
  2594  028C                     _ODCONA	set	652
  2595  0391                     _IOCAPbits	set	913
  2596  038E                     _INLVLC	set	910
  2597  038C                     _INLVLA	set	908
  2598  0393                     _IOCAFbits	set	915
  2599  0896                     _NVMCON2	set	2198
  2600  0895                     _NVMCON1bits	set	2197
  2601  0893                     _NVMDATL	set	2195
  2602  0891                     _NVMADRL	set	2193
  2603  0892                     _NVMADRH	set	2194
  2604  0919                     _OSCCON1bits	set	2329
  2605  0EA0                     _RC0PPSbits	set	3744
  2606  0EA2                     _RC2PPSbits	set	3746
  2607  0EA1                     _RC1PPSbits	set	3745
  2608  1801                     STR_9:	
  2609  1801  3425               	retlw	37	;'%'
  2610  1802  346C               	retlw	108	;'l'
  2611  1803  3475               	retlw	117	;'u'
  2612  1804  342E               	retlw	46	;'.'
  2613  1805  3425               	retlw	37	;'%'
  2614  1806  3436               	retlw	54	;'6'
  2615  1807  342E               	retlw	46	;'.'
  2616  1808  3436               	retlw	54	;'6'
  2617  1809  346C               	retlw	108	;'l'
  2618  180A  3475               	retlw	117	;'u'
  2619  180B  3400               	retlw	0
  2620                           
  2621                           	psect	stringtext4
  2622  180C                     __pstringtext4:	
  2623  180C                     STR_7:	
  2624  180C  3442               	retlw	66	;'B'
  2625  180D  344F               	retlw	79	;'O'
  2626  180E  344F               	retlw	79	;'O'
  2627  180F  3454               	retlw	84	;'T'
  2628  1810  3430               	retlw	48	;'0'
  2629  1811  3400               	retlw	0
  2630                           
  2631                           	psect	stringtext5
  2632  1812                     __pstringtext5:	
  2633  1812                     STR_8:	
  2634  1812  3442               	retlw	66	;'B'
  2635  1813  344F               	retlw	79	;'O'
  2636  1814  344F               	retlw	79	;'O'
  2637  1815  3454               	retlw	84	;'T'
  2638  1816  3431               	retlw	49	;'1'
  2639  1817  3400               	retlw	0
  2640                           
  2641                           	psect	stringtext6
  2642  181D                     __pstringtext6:	
  2643  181D                     STR_5:	
  2644  181D  3454               	retlw	84	;'T'
  2645  181E  3445               	retlw	69	;'E'
  2646  181F  344D               	retlw	77	;'M'
  2647  1820  3450               	retlw	80	;'P'
  2648  1821  3400               	retlw	0
  2649                           
  2650                           	psect	stringtext7
  2651  1822                     __pstringtext7:	
  2652  1822                     STR_4:	
  2653  1822  3456               	retlw	86	;'V'
  2654  1823  3442               	retlw	66	;'B'
  2655  1824  3441               	retlw	65	;'A'
  2656  1825  3454               	retlw	84	;'T'
  2657  1826  3400               	retlw	0
  2658                           
  2659                           	psect	stringtext8
  2660  1827                     __pstringtext8:	
  2661  1827                     STR_3:	
  2662  1827  3444               	retlw	68	;'D'
  2663  1828  3449               	retlw	73	;'I'
  2664  1829  3453               	retlw	83	;'S'
  2665  182A  3454               	retlw	84	;'T'
  2666  182B  3400               	retlw	0
  2667                           
  2668                           	psect	stringtext9
  2669  182C                     __pstringtext9:	
  2670  182C                     STR_6:	
  2671  182C  3455               	retlw	85	;'U'
  2672  182D  3457               	retlw	87	;'W'
  2673  182E  3454               	retlw	84	;'T'
  2674  182F  3400               	retlw	0
  2675                           
  2676                           	psect	stringtext10
  2677  1830                     __pstringtext10:	
  2678  1830                     STR_1:	
  2679  1830  342F               	retlw	47	;'/'
  2680  1831  3400               	retlw	0
  2681                           
  2682                           	psect	stringtext11
  2683  0000                     __pstringtext11:	
  2684  1830                     
  2685                           ; #config settings
  2686  0000                     
  2687                           	psect	cinit
  2688  0038                     start_initialization:	
  2689  0038                     __initialization:	
  2690                           
  2691                           ; Initialize objects allocated to BANK1
  2692  0038  0021               	movlb	1	; select bank1
  2693  0039  3187  27FF  3180   	fcall	__pidataBANK1	;fetch initializer
  2694  003C  00EA               	movwf	__pdataBANK1& (0+127)
  2695                           
  2696                           ; Clear objects allocated to BANK0
  2697  003D  0020               	movlb	0	; select bank0
  2698  003E  01E3               	clrf	__pbssBANK0& (0+127)
  2699  003F  01E4               	clrf	(__pbssBANK0+1)& (0+127)
  2700  0040  01E5               	clrf	(__pbssBANK0+2)& (0+127)
  2701  0041  01E6               	clrf	(__pbssBANK0+3)& (0+127)
  2702  0042  01E7               	clrf	(__pbssBANK0+4)& (0+127)
  2703  0043  01E8               	clrf	(__pbssBANK0+5)& (0+127)
  2704                           
  2705                           ; Clear objects allocated to BANK1
  2706  0044  30DF               	movlw	low __pbssBANK1
  2707  0045  0084               	movwf	4
  2708  0046  3000               	movlw	high __pbssBANK1
  2709  0047  0085               	movwf	5
  2710  0048  300B               	movlw	11
  2711  0049  3197  27C4  3180   	fcall	clear_ram0
  2712                           
  2713                           ; Clear objects allocated to BANK2
  2714  004C  304D               	movlw	low __pbssBANK2
  2715  004D  0084               	movwf	4
  2716  004E  3001               	movlw	high __pbssBANK2
  2717  004F  0085               	movwf	5
  2718  0050  3015               	movlw	21
  2719  0051  3197  27C4  3180   	fcall	clear_ram0
  2720                           
  2721                           ; Clear objects allocated to BANK3
  2722  0054  30A0               	movlw	low __pbssBANK3
  2723  0055  0084               	movwf	4
  2724  0056  3001               	movlw	high __pbssBANK3
  2725  0057  0085               	movwf	5
  2726  0058  3042               	movlw	66
  2727  0059  3197  27C4  3180   	fcall	clear_ram0
  2728                           
  2729                           ; Clear objects allocated to BANK4
  2730  005C  3020               	movlw	low __pbssBANK4
  2731  005D  0084               	movwf	4
  2732  005E  3002               	movlw	high __pbssBANK4
  2733  005F  0085               	movwf	5
  2734  0060  301C               	movlw	28
  2735  0061  3197  27C4         	fcall	clear_ram0
  2736  0063                     end_of_initialization:	
  2737                           ;End of C runtime variable initialization code
  2738                           
  2739  0063                     __end_of__initialization:	
  2740  0063  0020               	movlb	0
  2741                           
  2742                           ;Initialize the stack pointer (FSR1)
  2743  0064  305C               	movlw	low ___sp
  2744  0065  0086               	movwf	6
  2745  0066  3021               	movlw	high ___sp
  2746  0067  0087               	movwf	7
  2747  0068  3187  2F65         	ljmp	_main	;jump to C main() function
  2748                           
  2749                           	psect	bssBANK0
  2750  0063                     __pbssBANK0:	
  2751  0063                     _status:	
  2752  0063                     	ds	5
  2753  0068                     _lastTXPacket:	
  2754  0068                     	ds	1
  2755                           
  2756                           	psect	bssBANK1
  2757  00DF                     __pbssBANK1:	
  2758  00DF                     _distance:	
  2759  00DF                     	ds	2
  2760  00E1                     _testCount:	
  2761  00E1                     	ds	2
  2762  00E3                     _rcount:	
  2763  00E3                     	ds	2
  2764  00E5                     _rlimit:	
  2765  00E5                     	ds	2
  2766  00E7                     _rloop:	
  2767  00E7                     	ds	2
  2768  00E9                     _waiting:	
  2769  00E9                     	ds	1
  2770                           
  2771                           	psect	dataBANK1
  2772  00EA                     __pdataBANK1:	
  2773  00EA                     _romData:	
  2774  00EA                     	ds	1
  2775                           
  2776                           	psect	bssBANK2
  2777  014D                     __pbssBANK2:	
  2778  014D                     _counter:	
  2779  014D                     	ds	4
  2780  0151                     ftoa@buf:	
  2781  0151                     	ds	17
  2782                           
  2783                           	psect	bssBANK3
  2784  01A0                     __pbssBANK3:	
  2785  01A0                     _RXPacket:	
  2786  01A0                     	ds	33
  2787  01C1                     _TXPacket:	
  2788  01C1                     	ds	33
  2789                           
  2790                           	psect	bssBANK4
  2791  0220                     __pbssBANK4:	
  2792  0220                     _romDataMap:	
  2793  0220                     	ds	28
  2794                           
  2795                           	psect	clrtext
  2796  17C4                     clear_ram0:	
  2797                           ;	Called with FSR0 containing the base address, and
  2798                           ;	WREG with the size to clear
  2799                           
  2800  17C4  0064               	clrwdt	;clear the watchdog before getting into this loop
  2801  17C5                     clrloop0:	
  2802  17C5  0180               	clrf	0	;clear RAM location pointed to by FSR
  2803  17C6  3101               	addfsr 0,1
  2804  17C7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2805  17C8  2FC5               	goto	clrloop0	;have we reached the end yet?
  2806  17C9  3400               	retlw	0	;all done for this memory range, return
  2807                           
  2808                           	psect	cstackBANK2
  2809  0120                     __pcstackBANK2:	
  2810  0120                     loop@vt:	
  2811                           
  2812                           ; 3 bytes @ 0x0
  2813  0120                     	ds	3
  2814  0123                     loop@ta:	
  2815                           
  2816                           ; 3 bytes @ 0x3
  2817  0123                     	ds	3
  2818  0126                     _loop$2271:	
  2819                           
  2820                           ; 3 bytes @ 0x6
  2821  0126                     	ds	3
  2822  0129                     _loop$2272:	
  2823                           
  2824                           ; 3 bytes @ 0x9
  2825  0129                     	ds	3
  2826  012C                     loop@packet:	
  2827                           
  2828                           ; 33 bytes @ 0xC
  2829  012C                     	ds	33
  2830                           
  2831                           	psect	cstackBANK1
  2832  00A0                     __pcstackBANK1:	
  2833  00A0                     ?_ftoa:	
  2834  00A0                     ftoa@f:	
  2835                           ; 1 bytes @ 0x0
  2836                           
  2837                           
  2838                           ; 3 bytes @ 0x0
  2839  00A0                     	ds	3
  2840  00A3                     ftoa@status:	
  2841                           
  2842                           ; 1 bytes @ 0x3
  2843  00A3                     	ds	1
  2844  00A4                     ftoa@rem:	
  2845                           
  2846                           ; 4 bytes @ 0x4
  2847  00A4                     	ds	4
  2848  00A8                     ftoa@l:	
  2849                           
  2850                           ; 4 bytes @ 0x8
  2851  00A8                     	ds	4
  2852  00AC                     ftoa@cp:	
  2853                           
  2854                           ; 1 bytes @ 0xC
  2855  00AC                     	ds	1
  2856  00AD                     ?_strcat:	
  2857  00AD                     strcat@to:	
  2858                           ; 2 bytes @ 0xD
  2859                           
  2860                           
  2861                           ; 2 bytes @ 0xD
  2862  00AD                     	ds	2
  2863  00AF                     strcat@from:	
  2864                           
  2865                           ; 2 bytes @ 0xF
  2866  00AF                     	ds	2
  2867  00B1                     strcat@cp:	
  2868                           
  2869                           ; 2 bytes @ 0x11
  2870  00B1                     	ds	2
  2871  00B3                     ?_sendMessage:	
  2872  00B3                     sendMessage@packet:	
  2873                           ; 1 bytes @ 0x13
  2874                           
  2875                           
  2876                           ; 2 bytes @ 0x13
  2877  00B3                     	ds	2
  2878  00B5                     sendMessage@topic:	
  2879                           
  2880                           ; 2 bytes @ 0x15
  2881  00B5                     	ds	2
  2882  00B7                     sendMessage@value:	
  2883                           
  2884                           ; 3 bytes @ 0x17
  2885  00B7                     	ds	3
  2886  00BA                     sendMessage@ftoaStatus:	
  2887                           
  2888                           ; 2 bytes @ 0x1A
  2889  00BA                     	ds	2
  2890  00BC                     ??_main:	
  2891                           
  2892                           ; 1 bytes @ 0x1C
  2893  00BC                     	ds	1
  2894  00BD                     main@pipe:	
  2895                           
  2896                           ; 1 bytes @ 0x1D
  2897  00BD                     	ds	1
  2898  00BE                     main@packet:	
  2899                           
  2900                           ; 33 bytes @ 0x1E
  2901  00BE                     	ds	33
  2902                           
  2903                           	psect	cstackCOMMON
  2904  0070                     __pcstackCOMMON:	
  2905  0070                     ?_isdigit:	
  2906  0070                     ?_hcsr04ISR:	
  2907                           ; 1 bit 
  2908                           
  2909  0070                     ??_hcsr04ISR:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ?_nrf24l01ISR:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     ??_nrf24l01ISR:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0070                     ?_nrf24l01Init:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0070                     ?_nrf24l01SetTXPipe:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ?_nrf24l01SetRXPipe:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     ??_nrf24l01SetRXPipe:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     ?_hcsr04Init:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     ??_hcsr04Init:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     ??_isdigit:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0070                     ??___ftpack:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0070                     ?_nrf24l01InterfaceInit:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0070                     ??_nrf24l01InterfaceInit:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0070                     ?_resetWDT:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0070                     ??_resetWDT:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0070                     ?_sleepMs:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0070                     ?_ISR:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960  0070                     ?_loop:	
  2961                           ; 1 bytes @ 0x0
  2962                           
  2963  0070                     ?_nrf24l01GetPipe:	
  2964                           ; 1 bytes @ 0x0
  2965                           
  2966  0070                     ?_main:	
  2967                           ; 1 bytes @ 0x0
  2968                           
  2969  0070                     ?_nrf24l01InitRegisters:	
  2970                           ; 1 bytes @ 0x0
  2971                           
  2972  0070                     ?___bmul:	
  2973                           ; 1 bytes @ 0x0
  2974                           
  2975  0070                     ??___lldiv:	
  2976                           ; 1 bytes @ 0x0
  2977                           
  2978  0070                     ??___ftge:	
  2979                           ; 1 bytes @ 0x0
  2980                           
  2981  0070                     ??___llmod:	
  2982                           ; 1 bytes @ 0x0
  2983                           
  2984  0070                     ?_strcpy:	
  2985                           ; 1 bytes @ 0x0
  2986                           
  2987  0070                     ?___wmul:	
  2988                           ; 2 bytes @ 0x0
  2989                           
  2990  0070                     ?___lwmod:	
  2991                           ; 2 bytes @ 0x0
  2992                           
  2993  0070                     ?___awtoft:	
  2994                           ; 2 bytes @ 0x0
  2995                           
  2996  0070                     ?___lltoft:	
  2997                           ; 3 bytes @ 0x0
  2998                           
  2999  0070                     ?___lwtoft:	
  3000                           ; 3 bytes @ 0x0
  3001                           
  3002  0070                     ___bmul@multiplicand:	
  3003                           ; 3 bytes @ 0x0
  3004                           
  3005  0070                     ___llmod@counter:	
  3006                           ; 1 bytes @ 0x0
  3007                           
  3008  0070                     _isdigit$2016:	
  3009                           ; 1 bytes @ 0x0
  3010                           
  3011  0070                     sleepMs@milliseconds:	
  3012                           ; 1 bytes @ 0x0
  3013                           
  3014  0070                     ___wmul@multiplier:	
  3015                           ; 2 bytes @ 0x0
  3016                           
  3017  0070                     ___awtoft@c:	
  3018                           ; 2 bytes @ 0x0
  3019                           
  3020  0070                     ___lwmod@divisor:	
  3021                           ; 2 bytes @ 0x0
  3022                           
  3023  0070                     ___lwtoft@c:	
  3024                           ; 2 bytes @ 0x0
  3025                           
  3026  0070                     strcpy@to:	
  3027                           ; 2 bytes @ 0x0
  3028                           
  3029  0070                     ___lltoft@c:	
  3030                           ; 2 bytes @ 0x0
  3031                           
  3032                           
  3033                           ; 4 bytes @ 0x0
  3034  0070                     	ds	1
  3035  0071                     ??___bmul:	
  3036  0071                     nrf24l01SetRXPipe@pipe:	
  3037                           ; 1 bytes @ 0x1
  3038                           
  3039  0071                     ___bmul@product:	
  3040                           ; 1 bytes @ 0x1
  3041                           
  3042  0071                     isdigit@c:	
  3043                           ; 1 bytes @ 0x1
  3044                           
  3045                           
  3046                           ; 1 bytes @ 0x1
  3047  0071                     	ds	1
  3048  0072                     ??_sleepMs:	
  3049  0072                     nrf24l01SetRXPipe@enRXAddr:	
  3050                           ; 1 bytes @ 0x2
  3051                           
  3052  0072                     ___bmul@multiplier:	
  3053                           ; 1 bytes @ 0x2
  3054                           
  3055  0072                     ___wmul@multiplicand:	
  3056                           ; 1 bytes @ 0x2
  3057                           
  3058  0072                     ___lwmod@dividend:	
  3059                           ; 2 bytes @ 0x2
  3060                           
  3061  0072                     strcpy@from:	
  3062                           ; 2 bytes @ 0x2
  3063                           
  3064                           
  3065                           ; 2 bytes @ 0x2
  3066  0072                     	ds	1
  3067  0073                     ??_nrf24l01SetTXPipe:	
  3068  0073                     ??___awtoft:	
  3069                           ; 1 bytes @ 0x3
  3070                           
  3071  0073                     ??___lwtoft:	
  3072                           ; 1 bytes @ 0x3
  3073                           
  3074  0073                     sleepMs@wdtps:	
  3075                           ; 1 bytes @ 0x3
  3076                           
  3077  0073                     ___awtoft@sign:	
  3078                           ; 1 bytes @ 0x3
  3079                           
  3080                           
  3081                           ; 1 bytes @ 0x3
  3082  0073                     	ds	1
  3083  0074                     ??_strcpy:	
  3084  0074                     ??_strcat:	
  3085                           ; 1 bytes @ 0x4
  3086                           
  3087  0074                     ??_ftoa:	
  3088                           ; 1 bytes @ 0x4
  3089                           
  3090  0074                     ??_nrf24l01SendPacket:	
  3091                           ; 1 bytes @ 0x4
  3092                           
  3093  0074                     ??_hcsr04GetAerage:	
  3094                           ; 1 bytes @ 0x4
  3095                           
  3096  0074                     ??_sendMessage:	
  3097                           ; 1 bytes @ 0x4
  3098                           
  3099  0074                     ??_loop:	
  3100                           ; 1 bytes @ 0x4
  3101                           
  3102  0074                     ??___wmul:	
  3103                           ; 1 bytes @ 0x4
  3104                           
  3105  0074                     ??___ftmul:	
  3106                           ; 1 bytes @ 0x4
  3107                           
  3108  0074                     ??___ftneg:	
  3109                           ; 1 bytes @ 0x4
  3110                           
  3111  0074                     ??___ftsub:	
  3112                           ; 1 bytes @ 0x4
  3113                           
  3114  0074                     ??___fttol:	
  3115                           ; 1 bytes @ 0x4
  3116                           
  3117  0074                     ??___lltoft:	
  3118                           ; 1 bytes @ 0x4
  3119                           
  3120  0074                     ??___lwmod:	
  3121                           ; 1 bytes @ 0x4
  3122                           
  3123                           
  3124                           	psect	cstackBANK0
  3125  0020                     __pcstackBANK0:	
  3126                           ; 1 bytes @ 0x4
  3127                           
  3128  0020                     ??_ISR:	
  3129                           
  3130                           ; 1 bytes @ 0x0
  3131  0020                     	ds	7
  3132  0027                     ?___ftge:	
  3133  0027                     ?___ftpack:	
  3134                           ; 1 bit 
  3135                           
  3136  0027                     ?___lldiv:	
  3137                           ; 3 bytes @ 0x7
  3138                           
  3139  0027                     nrf24l01SetTXPipe@pipe:	
  3140                           ; 4 bytes @ 0x7
  3141                           
  3142  0027                     ___lwmod@counter:	
  3143                           ; 1 bytes @ 0x7
  3144                           
  3145  0027                     ___wmul@product:	
  3146                           ; 1 bytes @ 0x7
  3147                           
  3148  0027                     strcpy@cp:	
  3149                           ; 2 bytes @ 0x7
  3150                           
  3151  0027                     ___ftpack@arg:	
  3152                           ; 2 bytes @ 0x7
  3153                           
  3154  0027                     ___ftge@ff1:	
  3155                           ; 3 bytes @ 0x7
  3156                           
  3157  0027                     ___lldiv@divisor:	
  3158                           ; 3 bytes @ 0x7
  3159                           
  3160                           
  3161                           ; 4 bytes @ 0x7
  3162  0027                     	ds	1
  3163  0028                     ??_nrf24l01GetPipe:	
  3164  0028                     ??_nrf24l01InitRegisters:	
  3165                           ; 1 bytes @ 0x8
  3166                           
  3167                           
  3168                           ; 1 bytes @ 0x8
  3169  0028                     	ds	1
  3170  0029                     ?_nrf24l01SendPacket:	
  3171  0029                     nrf24l01GetPipe@pipe:	
  3172                           ; 1 bytes @ 0x9
  3173                           
  3174  0029                     nrf24l01InitRegisters@channel:	
  3175                           ; 1 bytes @ 0x9
  3176                           
  3177  0029                     nrf24l01SendPacket@txPacket:	
  3178                           ; 1 bytes @ 0x9
  3179                           
  3180                           
  3181                           ; 2 bytes @ 0x9
  3182  0029                     	ds	1
  3183  002A                     nrf24l01GetPipe@name:	
  3184  002A                     nrf24l01InitRegisters@setupAW:	
  3185                           ; 1 bytes @ 0xA
  3186                           
  3187  002A                     ___ftpack@exp:	
  3188                           ; 1 bytes @ 0xA
  3189                           
  3190  002A                     ___ftge@ff2:	
  3191                           ; 1 bytes @ 0xA
  3192                           
  3193                           
  3194                           ; 3 bytes @ 0xA
  3195  002A                     	ds	1
  3196  002B                     nrf24l01GetPipe@i:	
  3197  002B                     nrf24l01InitRegisters@feature:	
  3198                           ; 1 bytes @ 0xB
  3199                           
  3200  002B                     ___ftpack@sign:	
  3201                           ; 1 bytes @ 0xB
  3202                           
  3203  002B                     ___lldiv@dividend:	
  3204                           ; 1 bytes @ 0xB
  3205                           
  3206                           
  3207                           ; 4 bytes @ 0xB
  3208  002B                     	ds	1
  3209  002C                     ?___ftadd:	
  3210  002C                     nrf24l01InitRegisters@rfSetup:	
  3211                           ; 3 bytes @ 0xC
  3212                           
  3213  002C                     ___lltoft@exp:	
  3214                           ; 1 bytes @ 0xC
  3215                           
  3216  002C                     ___ftadd@f1:	
  3217                           ; 1 bytes @ 0xC
  3218                           
  3219                           
  3220                           ; 3 bytes @ 0xC
  3221  002C                     	ds	1
  3222  002D                     nrf24l01InitRegisters@enAA:	
  3223                           
  3224                           ; 1 bytes @ 0xD
  3225  002D                     	ds	1
  3226  002E                     nrf24l01InitRegisters@DynPD:	
  3227                           
  3228                           ; 1 bytes @ 0xE
  3229  002E                     	ds	1
  3230  002F                     nrf24l01InitRegisters@i:	
  3231  002F                     ___ftadd@f2:	
  3232                           ; 2 bytes @ 0xF
  3233                           
  3234  002F                     ___lldiv@quotient:	
  3235                           ; 3 bytes @ 0xF
  3236                           
  3237                           
  3238                           ; 4 bytes @ 0xF
  3239  002F                     	ds	2
  3240  0031                     ??_nrf24l01Init:	
  3241                           
  3242                           ; 1 bytes @ 0x11
  3243  0031                     	ds	1
  3244  0032                     ??___ftadd:	
  3245                           
  3246                           ; 1 bytes @ 0x12
  3247  0032                     	ds	1
  3248  0033                     ___lldiv@counter:	
  3249  0033                     ___ftadd@sign:	
  3250                           ; 1 bytes @ 0x13
  3251                           
  3252                           
  3253                           ; 1 bytes @ 0x13
  3254  0033                     	ds	1
  3255  0034                     ?___llmod:	
  3256  0034                     ___ftadd@exp2:	
  3257                           ; 4 bytes @ 0x14
  3258                           
  3259  0034                     ___llmod@divisor:	
  3260                           ; 1 bytes @ 0x14
  3261                           
  3262                           
  3263                           ; 4 bytes @ 0x14
  3264  0034                     	ds	1
  3265  0035                     ___ftadd@exp1:	
  3266                           
  3267                           ; 1 bytes @ 0x15
  3268  0035                     	ds	1
  3269  0036                     ?___ftdiv:	
  3270  0036                     ?___ftsub:	
  3271                           ; 3 bytes @ 0x16
  3272                           
  3273  0036                     ___ftdiv@f2:	
  3274                           ; 3 bytes @ 0x16
  3275                           
  3276  0036                     ___ftsub@f2:	
  3277                           ; 3 bytes @ 0x16
  3278                           
  3279                           
  3280                           ; 3 bytes @ 0x16
  3281  0036                     	ds	2
  3282  0038                     ___llmod@dividend:	
  3283                           
  3284                           ; 4 bytes @ 0x18
  3285  0038                     	ds	1
  3286  0039                     ___ftdiv@f1:	
  3287  0039                     ___ftsub@f1:	
  3288                           ; 3 bytes @ 0x19
  3289                           
  3290                           
  3291                           ; 3 bytes @ 0x19
  3292  0039                     	ds	3
  3293  003C                     ??___ftdiv:	
  3294  003C                     ?_sprintf:	
  3295                           ; 1 bytes @ 0x1C
  3296                           
  3297  003C                     sprintf@f:	
  3298                           ; 2 bytes @ 0x1C
  3299                           
  3300                           
  3301                           ; 2 bytes @ 0x1C
  3302  003C                     	ds	1
  3303  003D                     ___ftdiv@cntr:	
  3304                           
  3305                           ; 1 bytes @ 0x1D
  3306  003D                     	ds	1
  3307  003E                     ___ftdiv@f3:	
  3308                           
  3309                           ; 3 bytes @ 0x1E
  3310  003E                     	ds	3
  3311  0041                     ___ftdiv@exp:	
  3312                           
  3313                           ; 1 bytes @ 0x21
  3314  0041                     	ds	1
  3315  0042                     ___ftdiv@sign:	
  3316                           
  3317                           ; 1 bytes @ 0x22
  3318  0042                     	ds	1
  3319  0043                     ?_hcsr04GetAerage:	
  3320  0043                     ?_getADCValue:	
  3321                           ; 3 bytes @ 0x23
  3322                           
  3323                           
  3324                           ; 3 bytes @ 0x23
  3325  0043                     	ds	3
  3326  0046                     ??_sprintf:	
  3327  0046                     ??_getADCValue:	
  3328                           ; 1 bytes @ 0x26
  3329                           
  3330  0046                     hcsr04GetAerage@average:	
  3331                           ; 1 bytes @ 0x26
  3332                           
  3333                           
  3334                           ; 3 bytes @ 0x26
  3335  0046                     	ds	1
  3336  0047                     getADCValue@channel:	
  3337                           
  3338                           ; 1 bytes @ 0x27
  3339  0047                     	ds	1
  3340  0048                     getADCValue@adcLoop:	
  3341                           
  3342                           ; 2 bytes @ 0x28
  3343  0048                     	ds	2
  3344  004A                     sprintf@flag:	
  3345  004A                     getADCValue@adcSum:	
  3346                           ; 1 bytes @ 0x2A
  3347                           
  3348                           
  3349                           ; 3 bytes @ 0x2A
  3350  004A                     	ds	1
  3351  004B                     sprintf@ap:	
  3352                           
  3353                           ; 1 bytes @ 0x2B
  3354  004B                     	ds	1
  3355  004C                     sprintf@val:	
  3356                           
  3357                           ; 4 bytes @ 0x2C
  3358  004C                     	ds	1
  3359  004D                     ?___ftmul:	
  3360  004D                     ?___ftneg:	
  3361                           ; 3 bytes @ 0x2D
  3362                           
  3363  004D                     ___ftmul@f1:	
  3364                           ; 3 bytes @ 0x2D
  3365                           
  3366  004D                     ___ftneg@f1:	
  3367                           ; 3 bytes @ 0x2D
  3368                           
  3369                           
  3370                           ; 3 bytes @ 0x2D
  3371  004D                     	ds	3
  3372  0050                     sprintf@sp:	
  3373  0050                     ___ftmul@f2:	
  3374                           ; 1 bytes @ 0x30
  3375                           
  3376                           
  3377                           ; 3 bytes @ 0x30
  3378  0050                     	ds	1
  3379  0051                     sprintf@width:	
  3380                           
  3381                           ; 2 bytes @ 0x31
  3382  0051                     	ds	2
  3383  0053                     ___ftmul@exp:	
  3384  0053                     sprintf@prec:	
  3385                           ; 1 bytes @ 0x33
  3386                           
  3387                           
  3388                           ; 2 bytes @ 0x33
  3389  0053                     	ds	1
  3390  0054                     ___ftmul@f3_as_product:	
  3391                           
  3392                           ; 3 bytes @ 0x34
  3393  0054                     	ds	1
  3394  0055                     sprintf@c:	
  3395                           
  3396                           ; 1 bytes @ 0x35
  3397  0055                     	ds	2
  3398  0057                     ___ftmul@cntr:	
  3399                           
  3400                           ; 1 bytes @ 0x37
  3401  0057                     	ds	1
  3402  0058                     ___ftmul@sign:	
  3403                           
  3404                           ; 1 bytes @ 0x38
  3405  0058                     	ds	1
  3406  0059                     ?___fttol:	
  3407  0059                     ___fttol@f1:	
  3408                           ; 4 bytes @ 0x39
  3409                           
  3410                           
  3411                           ; 3 bytes @ 0x39
  3412  0059                     	ds	4
  3413  005D                     ___fttol@sign1:	
  3414                           
  3415                           ; 1 bytes @ 0x3D
  3416  005D                     	ds	1
  3417  005E                     ___fttol@lval:	
  3418                           
  3419                           ; 4 bytes @ 0x3E
  3420  005E                     	ds	4
  3421  0062                     ___fttol@exp1:	
  3422                           
  3423                           ; 1 bytes @ 0x42
  3424  0062                     	ds	1
  3425                           
  3426                           	psect	maintext
  3427  0765                     __pmaintext:	
  3428 ;;
  3429 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3430 ;;
  3431 ;; *************** function _main *****************
  3432 ;; Defined at:
  3433 ;;		line 173 in file "main.c"
  3434 ;; Parameters:    Size  Location     Type
  3435 ;;		None
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;  packet         33   30[BANK1 ] struct .
  3438 ;;  pipe            1   29[BANK1 ] unsigned char 
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1    wreg      void 
  3441 ;; Registers used:
  3442 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  3443 ;; Tracked objects:
  3444 ;;		On entry : B1F/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3449 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3450 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3451 ;;      Totals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  3452 ;;Total ram usage:       35 bytes
  3453 ;; Hardware stack levels required when called:   15
  3454 ;; This function calls:
  3455 ;;		_hcsr04Init
  3456 ;;		_loop
  3457 ;;		_nrf24l01GetPipe
  3458 ;;		_nrf24l01Init
  3459 ;;		_nrf24l01SetRXPipe
  3460 ;;		_nrf24l01SetTXPipe
  3461 ;;		_sendMessage
  3462 ;;		_strcpy
  3463 ;; This function is called by:
  3464 ;;		Startup code after reset
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           
  3469                           ;psect for function _main
  3470  0765                     _main:	
  3471                           
  3472                           ;main.c: 177: ANSELA = 0x00;
  3473                           
  3474                           ;incstack = 0
  3475                           ; Regs used in _main: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  3476  0765  0023               	movlb	3	; select bank3
  3477  0766  018C               	clrf	12	;volatile
  3478                           
  3479                           ;main.c: 178: ANSELC = 0x00;
  3480  0767  018E               	clrf	14	;volatile
  3481                           
  3482                           ;main.c: 180: ODCONA = 0x00;
  3483  0768  0025               	movlb	5	; select bank5
  3484  0769  018C               	clrf	12	;volatile
  3485                           
  3486                           ;main.c: 181: ODCONC = 0x00;
  3487  076A  018E               	clrf	14	;volatile
  3488                           
  3489                           ;main.c: 186: INLVLA = 0x00;
  3490  076B  0027               	movlb	7	; select bank7
  3491  076C  018C               	clrf	12	;volatile
  3492                           
  3493                           ;main.c: 187: INLVLC = 0x00;
  3494  076D  018E               	clrf	14	;volatile
  3495                           
  3496                           ;main.c: 189: WPUA = 0x00;
  3497  076E  0024               	movlb	4	; select bank4
  3498  076F  018C               	clrf	12	;volatile
  3499                           
  3500                           ;main.c: 190: WPUC = 0x00;
  3501  0770  018E               	clrf	14	;volatile
  3502                           
  3503                           ;main.c: 192: TRISCbits.TRISC5 = 0;
  3504  0771  0021               	movlb	1	; select bank1
  3505  0772  128E               	bcf	14,5	;volatile
  3506                           
  3507                           ;main.c: 193: TRISCbits.TRISC4 = 0;
  3508  0773  120E               	bcf	14,4	;volatile
  3509                           
  3510                           ;main.c: 195: PORTCbits.RC4 = 0;
  3511  0774  0020               	movlb	0	; select bank0
  3512  0775  120E               	bcf	14,4	;volatile
  3513                           
  3514                           ;main.c: 202: INTCONbits.PEIE = 0;
  3515  0776  130B               	bcf	11,6	;volatile
  3516                           
  3517                           ;main.c: 203: INTCONbits.GIE = 0;
  3518  0777  138B               	bcf	11,7	;volatile
  3519                           
  3520                           ;main.c: 205: OSCCON1bits.NOSC = 0b000;
  3521  0778  308F               	movlw	-113
  3522  0779  0032               	movlb	18	; select bank18
  3523  077A  0599               	andwf	25,f	;volatile
  3524                           
  3525                           ;main.c: 206: OSCCON1bits.NDIV = 0b000;
  3526  077B  30F0               	movlw	-16
  3527  077C  0599               	andwf	25,f	;volatile
  3528                           
  3529                           ;main.c: 208: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3530  077D  300B               	movlw	11
  3531  077E  0021               	movlb	1	; select bank1
  3532  077F  00BC               	movwf	??_main^(0+128)
  3533  0780  3062               	movlw	98
  3534  0781                     u5367:	
  3535  0781  0B89               	decfsz	9,f
  3536  0782  2F81               	goto	u5367
  3537  0783  0BBC               	decfsz	??_main^(0+128),f
  3538  0784  2F81               	goto	u5367
  3539  0785  0000               	nop
  3540                           
  3541                           ;main.c: 212: strcpy(romData->name, "UWT");
  3542  0786  0021               	movlb	1	; select bank1
  3543  0787  086A               	movf	_romData^(0+128),w
  3544  0788  3E01               	addlw	1
  3545  0789  00F0               	movwf	strcpy@to
  3546  078A  3002               	movlw	2
  3547  078B  00F1               	movwf	strcpy@to+1
  3548  078C  302C               	movlw	low (STR_6| (0+32768))
  3549  078D  00F2               	movwf	strcpy@from
  3550  078E  3098               	movlw	high (STR_6| (0+32768))
  3551  078F  00F3               	movwf	strcpy@from+1
  3552  0790  3188  2056  3187   	fcall	_strcpy
  3553                           
  3554                           ;main.c: 214: nrf24l01Init();
  3555  0793  3188  20EB  3187   	fcall	_nrf24l01Init
  3556                           
  3557                           ;main.c: 216: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3558  0796  0021               	movlb	1	; select bank1
  3559  0797  086A               	movf	_romData^(0+128),w
  3560  0798  3E01               	addlw	1
  3561  0799  318A  228D  3187   	fcall	_nrf24l01GetPipe
  3562  079C  00FF               	movwf	127
  3563  079D  087F               	movf	127,w
  3564  079E  0021               	movlb	1	; select bank1
  3565  079F  00BD               	movwf	main@pipe^(0+128)
  3566                           
  3567                           ;main.c: 217: nrf24l01SetTXPipe(pipe);
  3568  07A0  083D               	movf	main@pipe^(0+128),w
  3569  07A1  318B  237E  3187   	fcall	_nrf24l01SetTXPipe
  3570                           
  3571                           ;main.c: 218: nrf24l01SetRXPipe(pipe);
  3572  07A4  0021               	movlb	1	; select bank1
  3573  07A5  083D               	movf	main@pipe^(0+128),w
  3574  07A6  3188  20AF  3187   	fcall	_nrf24l01SetRXPipe
  3575                           
  3576                           ;main.c: 222: ADCON0bits.ADON = 0;
  3577  07A9  0021               	movlb	1	; select bank1
  3578  07AA  101D               	bcf	29,0	;volatile
  3579                           
  3580                           ;main.c: 225: PORTAbits.RA4 = 0;
  3581  07AB  0020               	movlb	0	; select bank0
  3582  07AC  120C               	bcf	12,4	;volatile
  3583                           
  3584                           ;main.c: 226: TRISAbits.TRISA4 = 1;
  3585  07AD  0021               	movlb	1	; select bank1
  3586  07AE  160C               	bsf	12,4	;volatile
  3587                           
  3588                           ;main.c: 227: WPUAbits.WPUA4 = 0;
  3589  07AF  0024               	movlb	4	; select bank4
  3590  07B0  120C               	bcf	12,4	;volatile
  3591                           
  3592                           ;main.c: 228: ODCONAbits.ODCA4 = 1;
  3593  07B1  0025               	movlb	5	; select bank5
  3594  07B2  160C               	bsf	12,4	;volatile
  3595                           
  3596                           ;main.c: 229: ANSELAbits.ANSA4 = 1;
  3597  07B3  0023               	movlb	3	; select bank3
  3598  07B4  160C               	bsf	12,4	;volatile
  3599                           
  3600                           ;main.c: 232: ANSELCbits.ANSC3 = 1;
  3601  07B5  158E               	bsf	14,3	;volatile
  3602                           
  3603                           ;main.c: 233: TRISCbits.TRISC3 = 1;
  3604  07B6  0021               	movlb	1	; select bank1
  3605  07B7  158E               	bsf	14,3	;volatile
  3606                           
  3607                           ;main.c: 236: FVRCONbits.TSEN = 1;
  3608  07B8  0022               	movlb	2	; select bank2
  3609  07B9  1697               	bsf	23,5	;volatile
  3610                           
  3611                           ;main.c: 237: FVRCONbits.TSRNG = 1;
  3612  07BA  1617               	bsf	23,4	;volatile
  3613                           
  3614                           ;main.c: 240: FVRCONbits.FVREN = 0;
  3615  07BB  1397               	bcf	23,7	;volatile
  3616                           
  3617                           ;main.c: 241: FVRCONbits.ADFVR = 0b10;
  3618  07BC  0817               	movf	23,w	;volatile
  3619  07BD  39FC               	andlw	-4
  3620  07BE  3802               	iorlw	2
  3621  07BF  0097               	movwf	23	;volatile
  3622                           
  3623                           ;main.c: 243: ADCON1bits.ADCS = 0b111;
  3624  07C0  3070               	movlw	112
  3625  07C1  0021               	movlb	1	; select bank1
  3626  07C2  049E               	iorwf	30,f	;volatile
  3627                           
  3628                           ;main.c: 244: ADCON1bits.ADFM = 1;
  3629  07C3  179E               	bsf	30,7	;volatile
  3630                           
  3631                           ;main.c: 245: ADCON1bits.ADPREF = 0b11;
  3632  07C4  3003               	movlw	3
  3633  07C5  049E               	iorwf	30,f	;volatile
  3634                           
  3635                           ;main.c: 246: ADCON1bits.ADNREF = 0b00;
  3636  07C6  111E               	bcf	30,2	;volatile
  3637                           
  3638                           ;main.c: 247: PIE1bits.ADIE = 1;
  3639  07C7  1711               	bsf	17,6	;volatile
  3640                           
  3641                           ;main.c: 250: ADCON0bits.CHS = 3;
  3642  07C8  081D               	movf	29,w	;volatile
  3643  07C9  3903               	andlw	-253
  3644  07CA  380C               	iorlw	12
  3645  07CB  009D               	movwf	29	;volatile
  3646                           
  3647                           ;main.c: 255: TRISAbits.TRISA2 = 1;
  3648  07CC  150C               	bsf	12,2	;volatile
  3649                           
  3650                           ;main.c: 256: PIE0bits.INTE = 1;
  3651  07CD  1410               	bsf	16,0	;volatile
  3652                           
  3653                           ;main.c: 257: INTCONbits.INTEDG = 0;
  3654  07CE  100B               	bcf	11,0	;volatile
  3655                           
  3656                           ;main.c: 260: TRISAbits.TRISA5 = 0;
  3657  07CF  128C               	bcf	12,5	;volatile
  3658                           
  3659                           ;main.c: 261: PORTAbits.RA5 = 0;
  3660  07D0  0020               	movlb	0	; select bank0
  3661  07D1  128C               	bcf	12,5	;volatile
  3662                           
  3663                           ;main.c: 263: hcsr04Init();
  3664  07D2  3188  202D  3187   	fcall	_hcsr04Init
  3665                           
  3666                           ;main.c: 266: INTCONbits.PEIE = 1;
  3667  07D5  170B               	bsf	11,6	;volatile
  3668                           
  3669                           ;main.c: 267: INTCONbits.GIE = 1;
  3670  07D6  178B               	bsf	11,7	;volatile
  3671                           
  3672                           ;main.c: 269: nrf24l01Packet_t packet;;main.c: 271: sendMessage(&packet, "BOOT0", 123);
  3673  07D7  30BE               	movlw	low main@packet
  3674  07D8  0021               	movlb	1	; select bank1
  3675  07D9  00B3               	movwf	sendMessage@packet^(0+128)
  3676  07DA  3000               	movlw	high main@packet
  3677  07DB  00B4               	movwf	(sendMessage@packet+1)^(0+128)
  3678  07DC  300C               	movlw	low (STR_7| (0+32768))
  3679  07DD  00B5               	movwf	sendMessage@topic^(0+128)
  3680  07DE  3098               	movlw	high (STR_7| (0+32768))
  3681  07DF  00B6               	movwf	(sendMessage@topic^(0+128)+1)
  3682  07E0  3000               	movlw	0
  3683  07E1  00B7               	movwf	sendMessage@value^(0+128)
  3684  07E2  30F6               	movlw	246
  3685  07E3  00B8               	movwf	(sendMessage@value+1)^(0+128)
  3686  07E4  3042               	movlw	66
  3687  07E5  00B9               	movwf	(sendMessage@value+2)^(0+128)
  3688  07E6  318D  250C  3187   	fcall	_sendMessage
  3689                           
  3690                           ;main.c: 272: sendMessage(&packet, "BOOT1", 456);
  3691  07E9  30BE               	movlw	low main@packet
  3692  07EA  0021               	movlb	1	; select bank1
  3693  07EB  00B3               	movwf	sendMessage@packet^(0+128)
  3694  07EC  3000               	movlw	high main@packet
  3695  07ED  00B4               	movwf	(sendMessage@packet+1)^(0+128)
  3696  07EE  3012               	movlw	low (STR_8| (0+32768))
  3697  07EF  00B5               	movwf	sendMessage@topic^(0+128)
  3698  07F0  3098               	movlw	high (STR_8| (0+32768))
  3699  07F1  00B6               	movwf	(sendMessage@topic^(0+128)+1)
  3700  07F2  3000               	movlw	0
  3701  07F3  00B7               	movwf	sendMessage@value^(0+128)
  3702  07F4  30E4               	movlw	228
  3703  07F5  00B8               	movwf	(sendMessage@value+1)^(0+128)
  3704  07F6  3043               	movlw	67
  3705  07F7  00B9               	movwf	(sendMessage@value+2)^(0+128)
  3706  07F8  318D  250C  3187   	fcall	_sendMessage
  3707  07FB                     l4877:	
  3708                           ;main.c: 279: while(1){
  3709                           
  3710                           
  3711                           ;main.c: 280: loop();
  3712  07FB  3184  2434  3187   	fcall	_loop
  3713  07FE  2FFB               	goto	l4877
  3714  07FF                     __end_of_main:	
  3715                           ;main.c: 281: };main.c: 283: return;
  3716                           
  3717                           
  3718                           	psect	text1
  3719  08EB                     __ptext1:	
  3720 ;; *************** function _nrf24l01Init *****************
  3721 ;; Defined at:
  3722 ;;		line 463 in file "nrf24l01.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;		None
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;		None
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1    wreg      void 
  3729 ;; Registers used:
  3730 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3738 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3739 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3740 ;;Total ram usage:        1 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; Hardware stack levels required when called:   11
  3743 ;; This function calls:
  3744 ;;		_nrf24l01InitRegisters
  3745 ;;		_nrf24l01InterfaceInit
  3746 ;; This function is called by:
  3747 ;;		_main
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           
  3752                           ;psect for function _nrf24l01Init
  3753  08EB                     _nrf24l01Init:	
  3754                           
  3755                           ;nrf24l01.c: 466: nrf24l01InterfaceInit();
  3756                           
  3757                           ;incstack = 0
  3758                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+11+pclath+
      +                          cstack]
  3759  08EB  3188  20CD  3188   	fcall	_nrf24l01InterfaceInit
  3760                           
  3761                           ;nrf24l01.c: 471: PORTAbits.RA0 = 0;
  3762  08EE  0020               	movlb	0	; select bank0
  3763  08EF  100C               	bcf	12,0	;volatile
  3764                           
  3765                           ;nrf24l01.c: 473: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3766  08F0  300B               	movlw	11
  3767  08F1  0020               	movlb	0	; select bank0
  3768  08F2  00B1               	movwf	??_nrf24l01Init
  3769  08F3  3062               	movlw	98
  3770  08F4                     u5377:	
  3771  08F4  0B89               	decfsz	9,f
  3772  08F5  28F4               	goto	u5377
  3773  08F6  0BB1               	decfsz	??_nrf24l01Init,f
  3774  08F7  28F4               	goto	u5377
  3775  08F8  0000               	nop
  3776                           
  3777                           ;nrf24l01.c: 475: nrf24l01InitRegisters();
  3778  08F9  3182  2237  3188   	fcall	_nrf24l01InitRegisters
  3779                           
  3780                           ;nrf24l01.c: 477: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3781  08FC  300B               	movlw	11
  3782  08FD  0020               	movlb	0	; select bank0
  3783  08FE  00B1               	movwf	??_nrf24l01Init
  3784  08FF  3062               	movlw	98
  3785  0900                     u5387:	
  3786  0900  0B89               	decfsz	9,f
  3787  0901  2900               	goto	u5387
  3788  0902  0BB1               	decfsz	??_nrf24l01Init,f
  3789  0903  2900               	goto	u5387
  3790  0904  0000               	nop
  3791                           
  3792                           ;nrf24l01.c: 479: PORTAbits.RA0 = 1;
  3793  0905  0020               	movlb	0	; select bank0
  3794  0906  140C               	bsf	12,0	;volatile
  3795                           
  3796                           ;nrf24l01.c: 481: status.TX = 0;
  3797  0907  01E3               	clrf	_status	;volatile
  3798                           
  3799                           ;nrf24l01.c: 482: status.RX = 0;
  3800  0908  01E4               	clrf	_status+1	;volatile
  3801  0909  0008               	return
  3802  090A                     __end_of_nrf24l01Init:	
  3803                           
  3804                           	psect	text2
  3805  08CD                     __ptext2:	
  3806 ;; *************** function _nrf24l01InterfaceInit *****************
  3807 ;; Defined at:
  3808 ;;		line 8 in file "interface.c"
  3809 ;; Parameters:    Size  Location     Type
  3810 ;;		None
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;		None
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  1    wreg      void 
  3815 ;; Registers used:
  3816 ;;		wreg, status,2, status,0
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3826 ;;Total ram usage:        0 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; Hardware stack levels required when called:    7
  3829 ;; This function calls:
  3830 ;;		Nothing
  3831 ;; This function is called by:
  3832 ;;		_nrf24l01Init
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836                           
  3837                           ;psect for function _nrf24l01InterfaceInit
  3838  08CD                     _nrf24l01InterfaceInit:	
  3839                           
  3840                           ;interface.c: 10: TRISAbits.TRISA0 = 0;
  3841                           
  3842                           ;incstack = 0
  3843                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3844  08CD  0021               	movlb	1	; select bank1
  3845  08CE  100C               	bcf	12,0	;volatile
  3846                           
  3847                           ;interface.c: 11: TRISAbits.TRISA1 = 0;
  3848  08CF  108C               	bcf	12,1	;volatile
  3849                           
  3850                           ;interface.c: 13: TRISCbits.TRISC1 = 1;
  3851  08D0  148E               	bsf	14,1	;volatile
  3852                           
  3853                           ;interface.c: 14: TRISCbits.TRISC2 = 0;
  3854  08D1  110E               	bcf	14,2	;volatile
  3855                           
  3856                           ;interface.c: 15: TRISCbits.TRISC0 = 0;
  3857  08D2  100E               	bcf	14,0	;volatile
  3858                           
  3859                           ;interface.c: 17: SSP1CON1bits.SSPEN = 0;
  3860  08D3  0024               	movlb	4	; select bank4
  3861  08D4  1295               	bcf	21,5	;volatile
  3862                           
  3863                           ;interface.c: 19: RC1PPSbits.RC1PPS = 0b10001;
  3864  08D5  003D               	movlb	29	; select bank29
  3865  08D6  0821               	movf	33,w	;volatile
  3866  08D7  39E0               	andlw	-32
  3867  08D8  3811               	iorlw	17
  3868  08D9  00A1               	movwf	33	;volatile
  3869                           
  3870                           ;interface.c: 20: RC2PPSbits.RC2PPS = 0b11001;
  3871  08DA  0822               	movf	34,w	;volatile
  3872  08DB  39E0               	andlw	-32
  3873  08DC  3819               	iorlw	25
  3874  08DD  00A2               	movwf	34	;volatile
  3875                           
  3876                           ;interface.c: 21: RC0PPSbits.RC0PPS = 0b11000;
  3877  08DE  0820               	movf	32,w	;volatile
  3878  08DF  39E0               	andlw	-32
  3879  08E0  3818               	iorlw	24
  3880  08E1  00A0               	movwf	32	;volatile
  3881                           
  3882                           ;interface.c: 23: SSP1CON1bits.CKP = 0;
  3883  08E2  0024               	movlb	4	; select bank4
  3884  08E3  1215               	bcf	21,4	;volatile
  3885                           
  3886                           ;interface.c: 24: SSP1STATbits.CKE = 1;
  3887  08E4  1714               	bsf	20,6	;volatile
  3888                           
  3889                           ;interface.c: 25: SSP1CON1bits.SSPM = 0b0001;
  3890  08E5  0815               	movf	21,w	;volatile
  3891  08E6  39F0               	andlw	-16
  3892  08E7  3801               	iorlw	1
  3893  08E8  0095               	movwf	21	;volatile
  3894                           
  3895                           ;interface.c: 27: SSP1CON1bits.SSPEN = 1;
  3896  08E9  1695               	bsf	21,5	;volatile
  3897  08EA  0008               	return
  3898  08EB                     __end_of_nrf24l01InterfaceInit:	
  3899                           
  3900                           	psect	text3
  3901  0237                     __ptext3:	
  3902 ;; *************** function _nrf24l01InitRegisters *****************
  3903 ;; Defined at:
  3904 ;;		line 362 in file "nrf24l01.c"
  3905 ;; Parameters:    Size  Location     Type
  3906 ;;		None
  3907 ;; Auto vars:     Size  Location     Type
  3908 ;;  i               2   15[BANK0 ] unsigned int 
  3909 ;;  DynPD           1   14[BANK0 ] struct .
  3910 ;;  enAA            1   13[BANK0 ] struct .
  3911 ;;  rfSetup         1   12[BANK0 ] struct .
  3912 ;;  feature         1   11[BANK0 ] struct .
  3913 ;;  setupAW         1   10[BANK0 ] struct .
  3914 ;;  channel         1    9[BANK0 ] struct .
  3915 ;; Return value:  Size  Location     Type
  3916 ;;                  1    wreg      void 
  3917 ;; Registers used:
  3918 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  3919 ;; Tracked objects:
  3920 ;;		On entry : 0/0
  3921 ;;		On exit  : 0/0
  3922 ;;		Unchanged: 0/0
  3923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3925 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3926 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3927 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3928 ;;Total ram usage:        9 bytes
  3929 ;; Hardware stack levels used:    1
  3930 ;; Hardware stack levels required when called:   10
  3931 ;; This function calls:
  3932 ;;		___bmul
  3933 ;;		_nrf24l01SPIEnd
  3934 ;;		_nrf24l01SPISend
  3935 ;;		_nrf24l01SPIStart
  3936 ;;		_nrf24l01Send
  3937 ;;		_nrf24l01SetRXPipe
  3938 ;;		_nrf24l01SetTXPipe
  3939 ;; This function is called by:
  3940 ;;		_nrf24l01Init
  3941 ;; This function uses a non-reentrant model
  3942 ;;
  3943                           
  3944                           
  3945                           ;psect for function _nrf24l01InitRegisters
  3946  0237                     _nrf24l01InitRegisters:	
  3947                           
  3948                           ;nrf24l01.c: 364: status.configRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x00, 0);
  3949                           
  3950                           ;incstack = 0
  3951                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+1
      +                          1+pclath+cstack]
  3952  0237  3000               	movlw	0
  3953  0238  001E               	movwi fsr1++
  3954  0239  3000               	movlw	0
  3955  023A  3188  201A  3182   	fcall	_nrf24l01Send
  3956  023D  00FF               	movwf	127
  3957  023E  087F               	movf	127,w
  3958  023F  0020               	movlb	0	; select bank0
  3959  0240  00E6               	movwf	_status+3	;volatile
  3960                           
  3961                           ;nrf24l01.c: 366: status.configRegister.PWR_UP = 0;
  3962  0241  10E6               	bcf	_status+3,1	;volatile
  3963                           
  3964                           ;nrf24l01.c: 367: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3965  0242  0866               	movf	_status+3,w	;volatile
  3966  0243  001E               	movwi fsr1++
  3967  0244  3020               	movlw	32
  3968  0245  3188  201A  3182   	fcall	_nrf24l01Send
  3969                           
  3970                           ;nrf24l01.c: 369: n_SETUP_AW_t setupAW;;nrf24l01.c: 370: setupAW.byte = 0x00;
  3971  0248  0020               	movlb	0	; select bank0
  3972  0249  01AA               	clrf	nrf24l01InitRegisters@setupAW
  3973                           
  3974                           ;nrf24l01.c: 371: setupAW.AW = 0b11;
  3975  024A  3003               	movlw	3
  3976  024B  04AA               	iorwf	nrf24l01InitRegisters@setupAW,f
  3977                           
  3978                           ;nrf24l01.c: 372: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x03, setupAW.byte);
  3979  024C  082A               	movf	nrf24l01InitRegisters@setupAW,w
  3980  024D  001E               	movwi fsr1++
  3981  024E  3023               	movlw	35
  3982  024F  3188  201A  3182   	fcall	_nrf24l01Send
  3983                           
  3984                           ;nrf24l01.c: 375: n_RF_CH_t channel;;nrf24l01.c: 376: channel.RF_CH = 2;
  3985  0252  0020               	movlb	0	; select bank0
  3986  0253  0829               	movf	nrf24l01InitRegisters@channel,w
  3987  0254  3980               	andlw	-128
  3988  0255  3802               	iorlw	2
  3989  0256  00A9               	movwf	nrf24l01InitRegisters@channel
  3990                           
  3991                           ;nrf24l01.c: 377: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3992  0257  0829               	movf	nrf24l01InitRegisters@channel,w
  3993  0258  001E               	movwi fsr1++
  3994  0259  3025               	movlw	37
  3995  025A  3188  201A  3182   	fcall	_nrf24l01Send
  3996                           
  3997                           ;nrf24l01.c: 380: n_RF_SETUP_t rfSetup;;nrf24l01.c: 381: rfSetup.byte = 0x00;
  3998  025D  0020               	movlb	0	; select bank0
  3999  025E  01AC               	clrf	nrf24l01InitRegisters@rfSetup
  4000                           
  4001                           ;nrf24l01.c: 382: rfSetup.RF_DR_LOW = 0;
  4002  025F  12AC               	bcf	nrf24l01InitRegisters@rfSetup,5
  4003                           
  4004                           ;nrf24l01.c: 383: rfSetup.RF_DR_HIGH = 1;
  4005  0260  15AC               	bsf	nrf24l01InitRegisters@rfSetup,3
  4006                           
  4007                           ;nrf24l01.c: 384: rfSetup.RF_PWR = 3;
  4008  0261  3006               	movlw	6
  4009  0262  04AC               	iorwf	nrf24l01InitRegisters@rfSetup,f
  4010                           
  4011                           ;nrf24l01.c: 385: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  4012  0263  082C               	movf	nrf24l01InitRegisters@rfSetup,w
  4013  0264  001E               	movwi fsr1++
  4014  0265  3026               	movlw	38
  4015  0266  3188  201A  3182   	fcall	_nrf24l01Send
  4016                           
  4017                           ;nrf24l01.c: 388: nrf24l01SetRXPipe(0xFF);
  4018  0269  30FF               	movlw	255
  4019  026A  3188  20AF  3182   	fcall	_nrf24l01SetRXPipe
  4020                           
  4021                           ;nrf24l01.c: 391: n_EN_AA_t enAA;;nrf24l01.c: 392: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  4022  026D  3000               	movlw	0
  4023  026E  001E               	movwi fsr1++
  4024  026F  3001               	movlw	1
  4025  0270  3188  201A  3182   	fcall	_nrf24l01Send
  4026  0273  00FF               	movwf	127
  4027  0274  087F               	movf	127,w
  4028  0275  0020               	movlb	0	; select bank0
  4029  0276  00AD               	movwf	nrf24l01InitRegisters@enAA
  4030                           
  4031                           ;nrf24l01.c: 393: enAA.ENAA_P0 = 0;
  4032  0277  102D               	bcf	nrf24l01InitRegisters@enAA,0
  4033                           
  4034                           ;nrf24l01.c: 394: enAA.ENAA_P1 = 0;
  4035  0278  10AD               	bcf	nrf24l01InitRegisters@enAA,1
  4036                           
  4037                           ;nrf24l01.c: 395: enAA.ENAA_P2 = 0;
  4038  0279  112D               	bcf	nrf24l01InitRegisters@enAA,2
  4039                           
  4040                           ;nrf24l01.c: 396: enAA.ENAA_P3 = 0;
  4041  027A  11AD               	bcf	nrf24l01InitRegisters@enAA,3
  4042                           
  4043                           ;nrf24l01.c: 397: enAA.ENAA_P4 = 0;
  4044  027B  122D               	bcf	nrf24l01InitRegisters@enAA,4
  4045                           
  4046                           ;nrf24l01.c: 398: enAA.ENAA_P5 = 0;
  4047  027C  12AD               	bcf	nrf24l01InitRegisters@enAA,5
  4048                           
  4049                           ;nrf24l01.c: 399: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  4050  027D  082D               	movf	nrf24l01InitRegisters@enAA,w
  4051  027E  001E               	movwi fsr1++
  4052  027F  3021               	movlw	33
  4053  0280  3188  201A  3182   	fcall	_nrf24l01Send
  4054                           
  4055                           ;nrf24l01.c: 403: n_FEATURE_t feature;;nrf24l01.c: 404: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  4056  0283  3000               	movlw	0
  4057  0284  001E               	movwi fsr1++
  4058  0285  301D               	movlw	29
  4059  0286  3188  201A  3182   	fcall	_nrf24l01Send
  4060  0289  00FF               	movwf	127
  4061  028A  087F               	movf	127,w
  4062  028B  0020               	movlb	0	; select bank0
  4063  028C  00AB               	movwf	nrf24l01InitRegisters@feature
  4064                           
  4065                           ;nrf24l01.c: 405: feature.EN_DPL = 1;
  4066  028D  152B               	bsf	nrf24l01InitRegisters@feature,2
  4067                           
  4068                           ;nrf24l01.c: 406: feature.EN_DYN_ACK = 1;
  4069  028E  142B               	bsf	nrf24l01InitRegisters@feature,0
  4070                           
  4071                           ;nrf24l01.c: 407: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  4072  028F  082B               	movf	nrf24l01InitRegisters@feature,w
  4073  0290  001E               	movwi fsr1++
  4074  0291  303D               	movlw	61
  4075  0292  3188  201A  3182   	fcall	_nrf24l01Send
  4076                           
  4077                           ;nrf24l01.c: 409: n_DYNPD_t DynPD;;nrf24l01.c: 410: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  4078  0295  3000               	movlw	0
  4079  0296  001E               	movwi fsr1++
  4080  0297  301C               	movlw	28
  4081  0298  3188  201A  3182   	fcall	_nrf24l01Send
  4082  029B  00FF               	movwf	127
  4083  029C  087F               	movf	127,w
  4084  029D  0020               	movlb	0	; select bank0
  4085  029E  00AE               	movwf	nrf24l01InitRegisters@DynPD
  4086                           
  4087                           ;nrf24l01.c: 411: DynPD.DPL_P0 = 1;
  4088  029F  142E               	bsf	nrf24l01InitRegisters@DynPD,0
  4089                           
  4090                           ;nrf24l01.c: 412: DynPD.DPL_P1 = 1;
  4091  02A0  14AE               	bsf	nrf24l01InitRegisters@DynPD,1
  4092                           
  4093                           ;nrf24l01.c: 413: DynPD.DPL_P2 = 1;
  4094  02A1  152E               	bsf	nrf24l01InitRegisters@DynPD,2
  4095                           
  4096                           ;nrf24l01.c: 414: DynPD.DPL_P3 = 1;
  4097  02A2  15AE               	bsf	nrf24l01InitRegisters@DynPD,3
  4098                           
  4099                           ;nrf24l01.c: 415: DynPD.DPL_P4 = 1;
  4100  02A3  162E               	bsf	nrf24l01InitRegisters@DynPD,4
  4101                           
  4102                           ;nrf24l01.c: 416: DynPD.DPL_P5 = 1;
  4103  02A4  16AE               	bsf	nrf24l01InitRegisters@DynPD,5
  4104                           
  4105                           ;nrf24l01.c: 417: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  4106  02A5  082E               	movf	nrf24l01InitRegisters@DynPD,w
  4107  02A6  001E               	movwi fsr1++
  4108  02A7  303C               	movlw	60
  4109  02A8  3188  201A  3182   	fcall	_nrf24l01Send
  4110                           
  4111                           ;nrf24l01.c: 420: unsigned int i;;nrf24l01.c: 421: for (i = 0; i < 6; i++){
  4112  02AB  0020               	movlb	0	; select bank0
  4113  02AC  01AF               	clrf	nrf24l01InitRegisters@i
  4114  02AD  01B0               	clrf	nrf24l01InitRegisters@i+1
  4115  02AE  3000               	movlw	0
  4116  02AF  0230               	subwf	nrf24l01InitRegisters@i+1,w
  4117  02B0  3006               	movlw	6
  4118  02B1  1903               	skipnz
  4119  02B2  022F               	subwf	nrf24l01InitRegisters@i,w
  4120  02B3  1803               	btfsc	3,0
  4121  02B4  2B0E               	goto	l4639
  4122  02B5                     l4623:	
  4123                           
  4124                           ;nrf24l01.c: 423: nrf24l01SPIStart();
  4125  02B5  3188  2000  3182   	fcall	_nrf24l01SPIStart
  4126                           
  4127                           ;nrf24l01.c: 424: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  4128  02B8  0020               	movlb	0	; select bank0
  4129  02B9  082F               	movf	nrf24l01InitRegisters@i,w
  4130  02BA  3E0A               	addlw	10
  4131  02BB  3820               	iorlw	32
  4132  02BC  3197  27F1  3182   	fcall	_nrf24l01SPISend
  4133                           
  4134                           ;nrf24l01.c: 426: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  4135  02BF  301C               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4136  02C0  0084               	movwf	4
  4137  02C1  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4138  02C2  0085               	movwf	5
  4139  02C3  0800               	movf	0,w	;code access
  4140  02C4  0020               	movlb	0	; select bank0
  4141  02C5  00A8               	movwf	??_nrf24l01InitRegisters
  4142  02C6  082F               	movf	nrf24l01InitRegisters@i,w
  4143  02C7  00FF               	movwf	127
  4144  02C8  087F               	movf	127,w
  4145  02C9  00F0               	movwf	___bmul@multiplicand
  4146  02CA  3000               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4147  02CB  0084               	movwf	4
  4148  02CC  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4149  02CD  0085               	movwf	5
  4150  02CE  0800               	movf	0,w	;code access
  4151  02CF  3188  2009  3182   	fcall	___bmul
  4152  02D2  0020               	movlb	0	; select bank0
  4153  02D3  0728               	addwf	??_nrf24l01InitRegisters,w
  4154  02D4  3197  27F1  3182   	fcall	_nrf24l01SPISend
  4155                           
  4156                           ;nrf24l01.c: 428: if (i < 2){
  4157  02D7  3000               	movlw	0
  4158  02D8  0020               	movlb	0	; select bank0
  4159  02D9  0230               	subwf	nrf24l01InitRegisters@i+1,w
  4160  02DA  3002               	movlw	2
  4161  02DB  1903               	skipnz
  4162  02DC  022F               	subwf	nrf24l01InitRegisters@i,w
  4163  02DD  1803               	skipnc
  4164  02DE  2AFF               	goto	l4633
  4165                           
  4166                           ;nrf24l01.c: 429: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4167  02DF  301B               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4168  02E0  0084               	movwf	4
  4169  02E1  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4170  02E2  0085               	movwf	5
  4171  02E3  0800               	movf	0,w	;code access
  4172  02E4  3197  27F1  3182   	fcall	_nrf24l01SPISend
  4173                           
  4174                           ;nrf24l01.c: 430: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4175  02E7  301A               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4176  02E8  0084               	movwf	4
  4177  02E9  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4178  02EA  0085               	movwf	5
  4179  02EB  0800               	movf	0,w	;code access
  4180  02EC  3197  27F1  3182   	fcall	_nrf24l01SPISend
  4181                           
  4182                           ;nrf24l01.c: 431: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4183  02EF  3019               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4184  02F0  0084               	movwf	4
  4185  02F1  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4186  02F2  0085               	movwf	5
  4187  02F3  0800               	movf	0,w	;code access
  4188  02F4  3197  27F1  3182   	fcall	_nrf24l01SPISend
  4189                           
  4190                           ;nrf24l01.c: 432: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4191  02F7  3018               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4192  02F8  0084               	movwf	4
  4193  02F9  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4194  02FA  0085               	movwf	5
  4195  02FB  0800               	movf	0,w	;code access
  4196  02FC  3197  27F1  3182   	fcall	_nrf24l01SPISend
  4197  02FF                     l4633:	
  4198                           
  4199                           ;nrf24l01.c: 433: };nrf24l01.c: 435: nrf24l01SPIEnd();
  4200  02FF  3197  27DA  3182   	fcall	_nrf24l01SPIEnd
  4201  0302  3001               	movlw	1
  4202  0303  0020               	movlb	0	; select bank0
  4203  0304  07AF               	addwf	nrf24l01InitRegisters@i,f
  4204  0305  3000               	movlw	0
  4205  0306  3DB0               	addwfc	nrf24l01InitRegisters@i+1,f
  4206  0307  3000               	movlw	0
  4207  0308  0230               	subwf	nrf24l01InitRegisters@i+1,w
  4208  0309  3006               	movlw	6
  4209  030A  1903               	skipnz
  4210  030B  022F               	subwf	nrf24l01InitRegisters@i,w
  4211  030C  1C03               	skipc
  4212  030D  2AB5               	goto	l4623
  4213  030E                     l4639:	
  4214                           
  4215                           ;nrf24l01.c: 436: };nrf24l01.c: 438: nrf24l01SetTXPipe(0);
  4216  030E  3000               	movlw	0
  4217  030F  318B  237E  3182   	fcall	_nrf24l01SetTXPipe
  4218                           
  4219                           ;nrf24l01.c: 442: status.statusRegister.byte = 0x00;
  4220  0312  0020               	movlb	0	; select bank0
  4221  0313  01E5               	clrf	_status+2	;volatile
  4222                           
  4223                           ;nrf24l01.c: 443: status.statusRegister.RX_DR = 1;
  4224  0314  1765               	bsf	_status+2,6	;volatile
  4225                           
  4226                           ;nrf24l01.c: 444: status.statusRegister.TX_DS = 1;
  4227  0315  16E5               	bsf	_status+2,5	;volatile
  4228                           
  4229                           ;nrf24l01.c: 445: status.statusRegister.MAX_RT = 1;
  4230  0316  1665               	bsf	_status+2,4	;volatile
  4231                           
  4232                           ;nrf24l01.c: 446: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.statusReg
      +                          ister.byte);
  4233  0317  0865               	movf	_status+2,w	;volatile
  4234  0318  001E               	movwi fsr1++
  4235  0319  3027               	movlw	39
  4236  031A  3188  201A  3182   	fcall	_nrf24l01Send
  4237                           
  4238                           ;nrf24l01.c: 448: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  4239  031D  3000               	movlw	0
  4240  031E  001E               	movwi fsr1++
  4241  031F  3007               	movlw	7
  4242  0320  3188  201A  3182   	fcall	_nrf24l01Send
  4243  0323  00FF               	movwf	127
  4244  0324  087F               	movf	127,w
  4245  0325  0020               	movlb	0	; select bank0
  4246  0326  00E5               	movwf	_status+2	;volatile
  4247                           
  4248                           ;nrf24l01.c: 451: nrf24l01Send((unsigned) 0b11100001, 0);
  4249  0327  3000               	movlw	0
  4250  0328  001E               	movwi fsr1++
  4251  0329  30E1               	movlw	225
  4252  032A  3188  201A  3182   	fcall	_nrf24l01Send
  4253                           
  4254                           ;nrf24l01.c: 452: nrf24l01Send((unsigned) 0b11100010, 0);
  4255  032D  3000               	movlw	0
  4256  032E  001E               	movwi fsr1++
  4257  032F  30E2               	movlw	226
  4258  0330  3188  201A  3182   	fcall	_nrf24l01Send
  4259                           
  4260                           ;nrf24l01.c: 455: status.configRegister.PRIM_RX = 1;
  4261  0333  0020               	movlb	0	; select bank0
  4262  0334  1466               	bsf	_status+3,0	;volatile
  4263                           
  4264                           ;nrf24l01.c: 456: status.configRegister.EN_CRC = 1;
  4265  0335  15E6               	bsf	_status+3,3	;volatile
  4266                           
  4267                           ;nrf24l01.c: 457: status.configRegister.CRCO = 1;
  4268  0336  1566               	bsf	_status+3,2	;volatile
  4269                           
  4270                           ;nrf24l01.c: 458: status.configRegister.PWR_UP = 1;
  4271  0337  14E6               	bsf	_status+3,1	;volatile
  4272                           
  4273                           ;nrf24l01.c: 459: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  4274  0338  0866               	movf	_status+3,w	;volatile
  4275  0339  001E               	movwi fsr1++
  4276  033A  3020               	movlw	32
  4277  033B  3188  201A         	fcall	_nrf24l01Send
  4278  033D  0008               	return
  4279  033E                     __end_of_nrf24l01InitRegisters:	
  4280                           
  4281                           	psect	text4
  4282  0B7E                     __ptext4:	
  4283 ;; *************** function _nrf24l01SetTXPipe *****************
  4284 ;; Defined at:
  4285 ;;		line 140 in file "nrf24l01.c"
  4286 ;; Parameters:    Size  Location     Type
  4287 ;;  pipe            1    wreg     unsigned char 
  4288 ;; Auto vars:     Size  Location     Type
  4289 ;;  pipe            1    7[BANK0 ] unsigned char 
  4290 ;; Return value:  Size  Location     Type
  4291 ;;                  1    wreg      void 
  4292 ;; Registers used:
  4293 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  4294 ;; Tracked objects:
  4295 ;;		On entry : 0/0
  4296 ;;		On exit  : 0/0
  4297 ;;		Unchanged: 0/0
  4298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4300 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4301 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4302 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4303 ;;Total ram usage:        2 bytes
  4304 ;; Hardware stack levels used:    1
  4305 ;; Hardware stack levels required when called:    8
  4306 ;; This function calls:
  4307 ;;		___bmul
  4308 ;;		_nrf24l01SPIEnd
  4309 ;;		_nrf24l01SPISend
  4310 ;;		_nrf24l01SPIStart
  4311 ;; This function is called by:
  4312 ;;		_main
  4313 ;;		_nrf24l01InitRegisters
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           
  4318                           ;psect for function _nrf24l01SetTXPipe
  4319  0B7E                     _nrf24l01SetTXPipe:	
  4320                           
  4321                           ;incstack = 0
  4322                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+11+pc
      +                          lath+cstack]
  4323                           ;nrf24l01SetTXPipe@pipe stored from wreg
  4324  0B7E  0020               	movlb	0	; select bank0
  4325  0B7F  00A7               	movwf	nrf24l01SetTXPipe@pipe
  4326                           
  4327                           ;nrf24l01.c: 143: nrf24l01SPIStart();
  4328  0B80  3188  2000  318B   	fcall	_nrf24l01SPIStart
  4329                           
  4330                           ;nrf24l01.c: 144: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  4331  0B83  3030               	movlw	48
  4332  0B84  3197  27F1  318B   	fcall	_nrf24l01SPISend
  4333                           
  4334                           ;nrf24l01.c: 145: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  4335  0B87  301C               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4336  0B88  0084               	movwf	4
  4337  0B89  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4338  0B8A  0085               	movwf	5
  4339  0B8B  0800               	movf	0,w	;code access
  4340  0B8C  00F3               	movwf	??_nrf24l01SetTXPipe
  4341  0B8D  3000               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4342  0B8E  0084               	movwf	4
  4343  0B8F  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4344  0B90  0085               	movwf	5
  4345  0B91  0800               	movf	0,w	;code access
  4346  0B92  00FF               	movwf	127
  4347  0B93  087F               	movf	127,w
  4348  0B94  00F0               	movwf	___bmul@multiplicand
  4349  0B95  0020               	movlb	0	; select bank0
  4350  0B96  0827               	movf	nrf24l01SetTXPipe@pipe,w
  4351  0B97  3188  2009  318B   	fcall	___bmul
  4352  0B9A  0773               	addwf	??_nrf24l01SetTXPipe,w
  4353  0B9B  3197  27F1  318B   	fcall	_nrf24l01SPISend
  4354                           
  4355                           ;nrf24l01.c: 146: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4356  0B9E  301B               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4357  0B9F  0084               	movwf	4
  4358  0BA0  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4359  0BA1  0085               	movwf	5
  4360  0BA2  0800               	movf	0,w	;code access
  4361  0BA3  3197  27F1  318B   	fcall	_nrf24l01SPISend
  4362                           
  4363                           ;nrf24l01.c: 147: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4364  0BA6  301A               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4365  0BA7  0084               	movwf	4
  4366  0BA8  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4367  0BA9  0085               	movwf	5
  4368  0BAA  0800               	movf	0,w	;code access
  4369  0BAB  3197  27F1  318B   	fcall	_nrf24l01SPISend
  4370                           
  4371                           ;nrf24l01.c: 148: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4372  0BAE  3019               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4373  0BAF  0084               	movwf	4
  4374  0BB0  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4375  0BB1  0085               	movwf	5
  4376  0BB2  0800               	movf	0,w	;code access
  4377  0BB3  3197  27F1  318B   	fcall	_nrf24l01SPISend
  4378                           
  4379                           ;nrf24l01.c: 149: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4380  0BB6  3018               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4381  0BB7  0084               	movwf	4
  4382  0BB8  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4383  0BB9  0085               	movwf	5
  4384  0BBA  0800               	movf	0,w	;code access
  4385  0BBB  3197  27F1  318B   	fcall	_nrf24l01SPISend
  4386                           
  4387                           ;nrf24l01.c: 150: nrf24l01SPIEnd();
  4388  0BBE  3197  27DA         	fcall	_nrf24l01SPIEnd
  4389  0BC0  0008               	return
  4390  0BC1                     __end_of_nrf24l01SetTXPipe:	
  4391                           
  4392                           	psect	text5
  4393  0809                     __ptext5:	
  4394 ;; *************** function ___bmul *****************
  4395 ;; Defined at:
  4396 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  4397 ;; Parameters:    Size  Location     Type
  4398 ;;  multiplier      1    wreg     unsigned char 
  4399 ;;  multiplicand    1    0[COMMON] unsigned char 
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;  multiplier      1    2[COMMON] unsigned char 
  4402 ;;  product         1    1[COMMON] unsigned char 
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  1    wreg      unsigned char 
  4405 ;; Registers used:
  4406 ;;		wreg, status,2, status,0, btemp+11
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4412 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4413 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4415 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4416 ;;Total ram usage:        3 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:    7
  4419 ;; This function calls:
  4420 ;;		Nothing
  4421 ;; This function is called by:
  4422 ;;		_nrf24l01SetTXPipe
  4423 ;;		_nrf24l01InitRegisters
  4424 ;; This function uses a non-reentrant model
  4425 ;;
  4426                           
  4427                           
  4428                           ;psect for function ___bmul
  4429  0809                     ___bmul:	
  4430                           
  4431                           ;incstack = 0
  4432                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+11]
  4433                           ;___bmul@multiplier stored from wreg
  4434  0809  00F2               	movwf	___bmul@multiplier
  4435  080A  01F1               	clrf	___bmul@product
  4436  080B                     l4039:	
  4437  080B  1C72               	btfss	___bmul@multiplier,0
  4438  080C  2811               	goto	l4043
  4439  080D  0870               	movf	___bmul@multiplicand,w
  4440  080E  00FF               	movwf	127
  4441  080F  087F               	movf	127,w
  4442  0810  07F1               	addwf	___bmul@product,f
  4443  0811                     l4043:	
  4444  0811  1003               	clrc
  4445  0812  0DF0               	rlf	___bmul@multiplicand,f
  4446  0813  1003               	clrc
  4447  0814  0CF2               	rrf	___bmul@multiplier,f
  4448  0815  0872               	movf	___bmul@multiplier,w
  4449  0816  1D03               	btfss	3,2
  4450  0817  280B               	goto	l4039
  4451  0818  0871               	movf	___bmul@product,w
  4452  0819  0008               	return
  4453  081A                     __end_of___bmul:	
  4454                           
  4455                           	psect	text6
  4456  08AF                     __ptext6:	
  4457 ;; *************** function _nrf24l01SetRXPipe *****************
  4458 ;; Defined at:
  4459 ;;		line 153 in file "nrf24l01.c"
  4460 ;; Parameters:    Size  Location     Type
  4461 ;;  pipe            1    wreg     unsigned char 
  4462 ;; Auto vars:     Size  Location     Type
  4463 ;;  pipe            1    1[COMMON] unsigned char 
  4464 ;;  enRXAddr        1    2[COMMON] struct .
  4465 ;; Return value:  Size  Location     Type
  4466 ;;                  1    wreg      void 
  4467 ;; Registers used:
  4468 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath
  4469 ;; Tracked objects:
  4470 ;;		On entry : 0/0
  4471 ;;		On exit  : 0/0
  4472 ;;		Unchanged: 0/0
  4473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4475 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4476 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4477 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4478 ;;Total ram usage:        3 bytes
  4479 ;; Hardware stack levels used:    1
  4480 ;; Hardware stack levels required when called:    9
  4481 ;; This function calls:
  4482 ;;		_nrf24l01Send
  4483 ;; This function is called by:
  4484 ;;		_main
  4485 ;;		_nrf24l01InitRegisters
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489                           
  4490                           ;psect for function _nrf24l01SetRXPipe
  4491  08AF                     _nrf24l01SetRXPipe:	
  4492                           
  4493                           ;incstack = 0
  4494                           ; Regs used in _nrf24l01SetRXPipe: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+11+pclath]
  4495                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4496  08AF  00F1               	movwf	nrf24l01SetRXPipe@pipe
  4497                           
  4498                           ;nrf24l01.c: 155: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 157: if (pipe > 5){
  4499  08B0  3006               	movlw	6
  4500  08B1  0271               	subwf	nrf24l01SetRXPipe@pipe,w
  4501  08B2  1C03               	skipc
  4502  08B3  28BB               	goto	l280
  4503                           
  4504                           ;nrf24l01.c: 158: enRXAddr.ERX_P0 = 1;
  4505  08B4  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4506                           
  4507                           ;nrf24l01.c: 159: enRXAddr.ERX_P1 = 1;
  4508  08B5  14F2               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4509                           
  4510                           ;nrf24l01.c: 160: enRXAddr.ERX_P2 = 1;
  4511  08B6  1572               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4512                           
  4513                           ;nrf24l01.c: 161: enRXAddr.ERX_P3 = 1;
  4514  08B7  15F2               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4515                           
  4516                           ;nrf24l01.c: 162: enRXAddr.ERX_P4 = 1;
  4517  08B8  1672               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4518                           
  4519                           ;nrf24l01.c: 163: enRXAddr.ERX_P5 = 1;
  4520  08B9  16F2               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4521                           
  4522                           ;nrf24l01.c: 164: }
  4523  08BA  28C7               	goto	l4273
  4524  08BB                     l280:	
  4525                           
  4526                           ;nrf24l01.c: 166: else{;nrf24l01.c: 167: enRXAddr.ERX_P0 = 1;
  4527  08BB  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4528                           
  4529                           ;nrf24l01.c: 168: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4530  08BC  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4531  08BD  00F0               	movwf	??_nrf24l01SetRXPipe
  4532  08BE  0A71               	incf	nrf24l01SetRXPipe@pipe,w
  4533  08BF  28C1               	goto	u4824
  4534  08C0                     u4825:	
  4535  08C0  35F0               	lslf	??_nrf24l01SetRXPipe,f
  4536  08C1                     u4824:	
  4537  08C1  0B89               	decfsz	9,f
  4538  08C2  28C0               	goto	u4825
  4539  08C3  0870               	movf	??_nrf24l01SetRXPipe,w
  4540  08C4  00FF               	movwf	127
  4541  08C5  087F               	movf	127,w
  4542  08C6  00F2               	movwf	nrf24l01SetRXPipe@enRXAddr
  4543  08C7                     l4273:	
  4544                           
  4545                           ;nrf24l01.c: 169: };nrf24l01.c: 171: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4546  08C7  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4547  08C8  001E               	movwi fsr1++
  4548  08C9  3022               	movlw	34
  4549  08CA  3188  201A         	fcall	_nrf24l01Send
  4550  08CC  0008               	return
  4551  08CD                     __end_of_nrf24l01SetRXPipe:	
  4552                           
  4553                           	psect	text7
  4554  0A8D                     __ptext7:	
  4555 ;; *************** function _nrf24l01GetPipe *****************
  4556 ;; Defined at:
  4557 ;;		line 161 in file "main.c"
  4558 ;; Parameters:    Size  Location     Type
  4559 ;;  name            1    wreg     PTR unsigned char 
  4560 ;;		 -> romDataMap(28), 
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;  name            1   10[BANK0 ] PTR unsigned char 
  4563 ;;		 -> romDataMap(28), 
  4564 ;;  i               1   11[BANK0 ] unsigned char 
  4565 ;;  pipe            1    9[BANK0 ] unsigned char 
  4566 ;; Return value:  Size  Location     Type
  4567 ;;                  1    wreg      unsigned char 
  4568 ;; Registers used:
  4569 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+10, btemp+11, pclath, cstack
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4576 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4577 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4578 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4579 ;;Total ram usage:        4 bytes
  4580 ;; Hardware stack levels used:    1
  4581 ;; Hardware stack levels required when called:    8
  4582 ;; This function calls:
  4583 ;;		___lwmod
  4584 ;;		_strlen
  4585 ;; This function is called by:
  4586 ;;		_main
  4587 ;; This function uses a non-reentrant model
  4588 ;;
  4589                           
  4590                           
  4591                           ;psect for function _nrf24l01GetPipe
  4592  0A8D                     _nrf24l01GetPipe:	
  4593                           
  4594                           ;incstack = 0
  4595                           ; Regs used in _nrf24l01GetPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+10+btemp
      +                          +11+pclath+cstack]
  4596                           ;nrf24l01GetPipe@name stored from wreg
  4597  0A8D  0020               	movlb	0	; select bank0
  4598  0A8E  00AA               	movwf	nrf24l01GetPipe@name
  4599                           
  4600                           ;main.c: 162: unsigned char pipe = 0;
  4601  0A8F  01A9               	clrf	nrf24l01GetPipe@pipe
  4602                           
  4603                           ;main.c: 163: unsigned char i = 0;
  4604  0A90  01AB               	clrf	nrf24l01GetPipe@i
  4605                           
  4606                           ;main.c: 166: for (i = 0; i < strlen(name); i++){
  4607  0A91  01AB               	clrf	nrf24l01GetPipe@i
  4608  0A92                     l4741:	
  4609  0A92  082A               	movf	nrf24l01GetPipe@name,w
  4610  0A93  001E               	movwi fsr1++
  4611  0A94  3002               	movlw	2
  4612  0A95  001E               	movwi fsr1++
  4613  0A96  3189  21A8  318A   	fcall	_strlen
  4614  0A99  0020               	movlb	0	; select bank0
  4615  0A9A  082B               	movf	nrf24l01GetPipe@i,w
  4616  0A9B  00FE               	movwf	126
  4617  0A9C  01FF               	clrf	127
  4618  0A9D  0875               	movf	117,w
  4619  0A9E  027F               	subwf	127,w
  4620  0A9F  1D03               	skipz
  4621  0AA0  2AA3               	goto	u5275
  4622  0AA1  0874               	movf	116,w
  4623  0AA2  027E               	subwf	126,w
  4624  0AA3                     u5275:	
  4625  0AA3  1803               	btfsc	3,0
  4626  0AA4  2AB5               	goto	l4743
  4627                           
  4628                           ;main.c: 167: pipe+= name[i];
  4629  0AA5  082B               	movf	nrf24l01GetPipe@i,w
  4630  0AA6  072A               	addwf	nrf24l01GetPipe@name,w
  4631  0AA7  00A8               	movwf	??_nrf24l01GetPipe
  4632  0AA8  0828               	movf	??_nrf24l01GetPipe,w
  4633  0AA9  0084               	movwf	4
  4634  0AAA  3002               	movlw	2	; select bank4/5
  4635  0AAB  0085               	movwf	5
  4636  0AAC  0800               	movf	0,w
  4637  0AAD  00FF               	movwf	127
  4638  0AAE  087F               	movf	127,w
  4639  0AAF  07A9               	addwf	nrf24l01GetPipe@pipe,f
  4640  0AB0  3001               	movlw	1
  4641  0AB1  00FF               	movwf	127
  4642  0AB2  087F               	movf	127,w
  4643  0AB3  07AB               	addwf	nrf24l01GetPipe@i,f
  4644  0AB4  2A92               	goto	l4741
  4645  0AB5                     l4743:	
  4646                           
  4647                           ;main.c: 168: };main.c: 170: return (unsigned) pipe % 6;
  4648  0AB5  3006               	movlw	6
  4649  0AB6  00F0               	movwf	___lwmod@divisor
  4650  0AB7  3000               	movlw	0
  4651  0AB8  00F1               	movwf	___lwmod@divisor+1
  4652  0AB9  0829               	movf	nrf24l01GetPipe@pipe,w
  4653  0ABA  00FE               	movwf	126
  4654  0ABB  01FF               	clrf	127
  4655  0ABC  087E               	movf	126,w
  4656  0ABD  00F2               	movwf	___lwmod@dividend
  4657  0ABE  087F               	movf	127,w
  4658  0ABF  00F3               	movwf	___lwmod@dividend+1
  4659  0AC0  3189  21FE         	fcall	___lwmod
  4660  0AC2  0870               	movf	?___lwmod,w
  4661  0AC3  0008               	return
  4662  0AC4                     __end_of_nrf24l01GetPipe:	
  4663                           
  4664                           	psect	text8
  4665  09FE                     __ptext8:	
  4666 ;; *************** function ___lwmod *****************
  4667 ;; Defined at:
  4668 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4669 ;; Parameters:    Size  Location     Type
  4670 ;;  divisor         2    0[COMMON] unsigned int 
  4671 ;;  dividend        2    2[COMMON] unsigned int 
  4672 ;; Auto vars:     Size  Location     Type
  4673 ;;  counter         1    7[BANK0 ] unsigned char 
  4674 ;; Return value:  Size  Location     Type
  4675 ;;                  2    0[COMMON] unsigned int 
  4676 ;; Registers used:
  4677 ;;		wreg, status,2, status,0, btemp+11
  4678 ;; Tracked objects:
  4679 ;;		On entry : 0/0
  4680 ;;		On exit  : 0/0
  4681 ;;		Unchanged: 0/0
  4682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4683 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4684 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4686 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4687 ;;Total ram usage:        5 bytes
  4688 ;; Hardware stack levels used:    1
  4689 ;; Hardware stack levels required when called:    7
  4690 ;; This function calls:
  4691 ;;		Nothing
  4692 ;; This function is called by:
  4693 ;;		_nrf24l01GetPipe
  4694 ;; This function uses a non-reentrant model
  4695 ;;
  4696                           
  4697                           
  4698                           ;psect for function ___lwmod
  4699  09FE                     ___lwmod:	
  4700                           
  4701                           ;incstack = 0
  4702                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+11]
  4703  09FE  0870               	movf	___lwmod@divisor,w
  4704  09FF  0471               	iorwf	___lwmod@divisor+1,w
  4705  0A00  1903               	btfsc	3,2
  4706  0A01  2A26               	goto	l4685
  4707  0A02  0020               	movlb	0	; select bank0
  4708  0A03  01A7               	clrf	___lwmod@counter
  4709  0A04  0AA7               	incf	___lwmod@counter,f
  4710  0A05                     l4675:	
  4711  0A05  1BF1               	btfsc	___lwmod@divisor+1,7
  4712  0A06  2A11               	goto	l4677
  4713  0A07  3001               	movlw	1
  4714  0A08                     u5175:	
  4715  0A08  35F0               	lslf	___lwmod@divisor,f
  4716  0A09  0DF1               	rlf	___lwmod@divisor+1,f
  4717  0A0A  0B89               	decfsz	9,f
  4718  0A0B  2A08               	goto	u5175
  4719  0A0C  3001               	movlw	1
  4720  0A0D  00FF               	movwf	127
  4721  0A0E  087F               	movf	127,w
  4722  0A0F  07A7               	addwf	___lwmod@counter,f
  4723  0A10  2A05               	goto	l4675
  4724  0A11                     l4677:	
  4725  0A11  0871               	movf	___lwmod@divisor+1,w
  4726  0A12  0273               	subwf	___lwmod@dividend+1,w
  4727  0A13  1D03               	skipz
  4728  0A14  2A17               	goto	u5195
  4729  0A15  0870               	movf	___lwmod@divisor,w
  4730  0A16  0272               	subwf	___lwmod@dividend,w
  4731  0A17                     u5195:	
  4732  0A17  1C03               	skipc
  4733  0A18  2A1D               	goto	l4681
  4734  0A19  0870               	movf	___lwmod@divisor,w
  4735  0A1A  02F2               	subwf	___lwmod@dividend,f
  4736  0A1B  0871               	movf	___lwmod@divisor+1,w
  4737  0A1C  3BF3               	subwfb	___lwmod@dividend+1,f
  4738  0A1D                     l4681:	
  4739  0A1D  3001               	movlw	1
  4740  0A1E                     u5205:	
  4741  0A1E  36F1               	lsrf	___lwmod@divisor+1,f
  4742  0A1F  0CF0               	rrf	___lwmod@divisor,f
  4743  0A20  0B89               	decfsz	9,f
  4744  0A21  2A1E               	goto	u5205
  4745  0A22  3001               	movlw	1
  4746  0A23  02A7               	subwf	___lwmod@counter,f
  4747  0A24  1D03               	btfss	3,2
  4748  0A25  2A11               	goto	l4677
  4749  0A26                     l4685:	
  4750  0A26  0873               	movf	___lwmod@dividend+1,w
  4751  0A27  00F1               	movwf	?___lwmod+1
  4752  0A28  0872               	movf	___lwmod@dividend,w
  4753  0A29  00F0               	movwf	?___lwmod
  4754  0A2A  0008               	return
  4755  0A2B                     __end_of___lwmod:	
  4756                           
  4757                           	psect	text9
  4758  0434                     __ptext9:	
  4759 ;; *************** function _loop *****************
  4760 ;; Defined at:
  4761 ;;		line 107 in file "main.c"
  4762 ;; Parameters:    Size  Location     Type
  4763 ;;		None
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;  packet         33   12[BANK2 ] struct .
  4766 ;;  ta              3    3[BANK2 ] float 
  4767 ;;  vt              3    0[BANK2 ] float 
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  1    wreg      void 
  4770 ;; Registers used:
  4771 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  4772 ;; Tracked objects:
  4773 ;;		On entry : 0/0
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4778 ;;      Locals:         0       0       0      45       0       0       0       0       0       0       0       0       
      +0       0
  4779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4780 ;;      Totals:         0       0       0      45       0       0       0       0       0       0       0       0       
      +0       0
  4781 ;;Total ram usage:       45 bytes
  4782 ;; Hardware stack levels used:    1
  4783 ;; Hardware stack levels required when called:   14
  4784 ;; This function calls:
  4785 ;;		___ftadd
  4786 ;;		___ftdiv
  4787 ;;		___ftmul
  4788 ;;		___ftneg
  4789 ;;		_getADCValue
  4790 ;;		_hcsr04GetAerage
  4791 ;;		_sendMessage
  4792 ;; This function is called by:
  4793 ;;		_main
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797                           
  4798                           ;psect for function _loop
  4799  0434                     _loop:	
  4800                           
  4801                           ;main.c: 109: nrf24l01Packet_t packet;;main.c: 111: sendMessage(&packet, "DIST", hcsr04G
      +                          etAerage());
  4802                           
  4803                           ;incstack = 0
  4804                           ; Regs used in _loop: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  4805  0434  302C               	movlw	low loop@packet
  4806  0435  0021               	movlb	1	; select bank1
  4807  0436  00B3               	movwf	sendMessage@packet^(0+128)
  4808  0437  3001               	movlw	high loop@packet
  4809  0438  00B4               	movwf	(sendMessage@packet+1)^(0+128)
  4810  0439  3027               	movlw	low (STR_3| (0+32768))
  4811  043A  00B5               	movwf	sendMessage@topic^(0+128)
  4812  043B  3098               	movlw	high (STR_3| (0+32768))
  4813  043C  00B6               	movwf	(sendMessage@topic^(0+128)+1)
  4814  043D  318E  2618  3184   	fcall	_hcsr04GetAerage
  4815  0440  0020               	movlb	0	; select bank0
  4816  0441  0843               	movf	?_hcsr04GetAerage,w
  4817  0442  0021               	movlb	1	; select bank1
  4818  0443  00B7               	movwf	sendMessage@value^(0+128)
  4819  0444  0020               	movlb	0	; select bank0
  4820  0445  0844               	movf	?_hcsr04GetAerage+1,w
  4821  0446  0021               	movlb	1	; select bank1
  4822  0447  00B8               	movwf	(sendMessage@value+1)^(0+128)
  4823  0448  0020               	movlb	0	; select bank0
  4824  0449  0845               	movf	?_hcsr04GetAerage+2,w
  4825  044A  0021               	movlb	1	; select bank1
  4826  044B  00B9               	movwf	(sendMessage@value+2)^(0+128)
  4827  044C  318D  250C  3184   	fcall	_sendMessage
  4828                           
  4829                           ;main.c: 124: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4830  044F  30CF               	movlw	207
  4831  0450  0020               	movlb	0	; select bank0
  4832  0451  00CD               	movwf	___ftmul@f1
  4833  0452  3046               	movlw	70
  4834  0453  00CE               	movwf	___ftmul@f1+1
  4835  0454  3040               	movlw	64
  4836  0455  00CF               	movwf	___ftmul@f1+2
  4837  0456  3004               	movlw	4
  4838  0457  3186  26BC  3184   	fcall	_getADCValue
  4839  045A  0020               	movlb	0	; select bank0
  4840  045B  0843               	movf	?_getADCValue,w
  4841  045C  00D0               	movwf	___ftmul@f2
  4842  045D  0844               	movf	?_getADCValue+1,w
  4843  045E  00D1               	movwf	___ftmul@f2+1
  4844  045F  0845               	movf	?_getADCValue+2,w
  4845  0460  00D2               	movwf	___ftmul@f2+2
  4846  0461  3186  2608  3184   	fcall	___ftmul
  4847  0464  0020               	movlb	0	; select bank0
  4848  0465  084D               	movf	?___ftmul,w
  4849  0466  0022               	movlb	2	; select bank2
  4850  0467  00A6               	movwf	_loop$2271^(0+256)
  4851  0468  0020               	movlb	0	; select bank0
  4852  0469  084E               	movf	?___ftmul+1,w
  4853  046A  0022               	movlb	2	; select bank2
  4854  046B  00A7               	movwf	(_loop$2271+1)^(0+256)
  4855  046C  0020               	movlb	0	; select bank0
  4856  046D  084F               	movf	?___ftmul+2,w
  4857  046E  0022               	movlb	2	; select bank2
  4858  046F  00A8               	movwf	(_loop$2271+2)^(0+256)
  4859                           
  4860                           ;main.c: 124: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4861  0470  302C               	movlw	low loop@packet
  4862  0471  0021               	movlb	1	; select bank1
  4863  0472  00B3               	movwf	sendMessage@packet^(0+128)
  4864  0473  3001               	movlw	high loop@packet
  4865  0474  00B4               	movwf	(sendMessage@packet+1)^(0+128)
  4866  0475  3022               	movlw	low (STR_4| (0+32768))
  4867  0476  00B5               	movwf	sendMessage@topic^(0+128)
  4868  0477  3098               	movlw	high (STR_4| (0+32768))
  4869  0478  00B6               	movwf	(sendMessage@topic^(0+128)+1)
  4870  0479  0022               	movlb	2	; select bank2
  4871  047A  0826               	movf	_loop$2271^(0+256),w
  4872  047B  0021               	movlb	1	; select bank1
  4873  047C  00B7               	movwf	sendMessage@value^(0+128)
  4874  047D  0022               	movlb	2	; select bank2
  4875  047E  0827               	movf	(_loop$2271+1)^(0+256),w
  4876  047F  0021               	movlb	1	; select bank1
  4877  0480  00B8               	movwf	(sendMessage@value+1)^(0+128)
  4878  0481  0022               	movlb	2	; select bank2
  4879  0482  0828               	movf	(_loop$2271+2)^(0+256),w
  4880  0483  0021               	movlb	1	; select bank1
  4881  0484  00B9               	movwf	(sendMessage@value+2)^(0+128)
  4882  0485  318D  250C  3184   	fcall	_sendMessage
  4883                           
  4884                           ;main.c: 136: FVRCONbits.TSEN = 1;
  4885  0488  0022               	movlb	2	; select bank2
  4886  0489  1697               	bsf	23,5	;volatile
  4887                           
  4888                           ;main.c: 137: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4889  048A  303D               	movlw	61
  4890  048B  3186  26BC  3184   	fcall	_getADCValue
  4891  048E  0020               	movlb	0	; select bank0
  4892  048F  0843               	movf	?_getADCValue,w
  4893  0490  00CD               	movwf	___ftneg@f1
  4894  0491  0844               	movf	?_getADCValue+1,w
  4895  0492  00CE               	movwf	___ftneg@f1+1
  4896  0493  0845               	movf	?_getADCValue+2,w
  4897  0494  00CF               	movwf	___ftneg@f1+2
  4898  0495  3197  27D1  3184   	fcall	___ftneg
  4899  0498  0020               	movlb	0	; select bank0
  4900  0499  084D               	movf	?___ftneg,w
  4901  049A  0022               	movlb	2	; select bank2
  4902  049B  00A9               	movwf	_loop$2272^(0+256)
  4903  049C  0020               	movlb	0	; select bank0
  4904  049D  084E               	movf	?___ftneg+1,w
  4905  049E  0022               	movlb	2	; select bank2
  4906  049F  00AA               	movwf	(_loop$2272+1)^(0+256)
  4907  04A0  0020               	movlb	0	; select bank0
  4908  04A1  084F               	movf	?___ftneg+2,w
  4909  04A2  0022               	movlb	2	; select bank2
  4910  04A3  00AB               	movwf	(_loop$2272+2)^(0+256)
  4911                           
  4912                           ;main.c: 137: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4913  04A4  3000               	movlw	0
  4914  04A5  0020               	movlb	0	; select bank0
  4915  04A6  00B6               	movwf	___ftdiv@f2
  4916  04A7  3000               	movlw	0
  4917  04A8  00B7               	movwf	___ftdiv@f2+1
  4918  04A9  3040               	movlw	64
  4919  04AA  00B8               	movwf	___ftdiv@f2+2
  4920  04AB  3012               	movlw	18
  4921  04AC  00AC               	movwf	___ftadd@f1
  4922  04AD  3003               	movlw	3
  4923  04AE  00AD               	movwf	___ftadd@f1+1
  4924  04AF  3040               	movlw	64
  4925  04B0  00AE               	movwf	___ftadd@f1+2
  4926  04B1  0022               	movlb	2	; select bank2
  4927  04B2  0829               	movf	_loop$2272^(0+256),w
  4928  04B3  0020               	movlb	0	; select bank0
  4929  04B4  00AF               	movwf	___ftadd@f2
  4930  04B5  0022               	movlb	2	; select bank2
  4931  04B6  082A               	movf	(_loop$2272+1)^(0+256),w
  4932  04B7  0020               	movlb	0	; select bank0
  4933  04B8  00B0               	movwf	___ftadd@f2+1
  4934  04B9  0022               	movlb	2	; select bank2
  4935  04BA  082B               	movf	(_loop$2272+2)^(0+256),w
  4936  04BB  0020               	movlb	0	; select bank0
  4937  04BC  00B1               	movwf	___ftadd@f2+2
  4938  04BD  3183  233E  3184   	fcall	___ftadd
  4939  04C0  0020               	movlb	0	; select bank0
  4940  04C1  082C               	movf	?___ftadd,w
  4941  04C2  00B9               	movwf	___ftdiv@f1
  4942  04C3  082D               	movf	?___ftadd+1,w
  4943  04C4  00BA               	movwf	___ftdiv@f1+1
  4944  04C5  082E               	movf	?___ftadd+2,w
  4945  04C6  00BB               	movwf	___ftdiv@f1+2
  4946  04C7  318F  2757  3184   	fcall	___ftdiv
  4947  04CA  0020               	movlb	0	; select bank0
  4948  04CB  0836               	movf	?___ftdiv,w
  4949  04CC  0022               	movlb	2	; select bank2
  4950  04CD  00A0               	movwf	loop@vt^(0+256)
  4951  04CE  0020               	movlb	0	; select bank0
  4952  04CF  0837               	movf	?___ftdiv+1,w
  4953  04D0  0022               	movlb	2	; select bank2
  4954  04D1  00A1               	movwf	(loop@vt+1)^(0+256)
  4955  04D2  0020               	movlb	0	; select bank0
  4956  04D3  0838               	movf	?___ftdiv+2,w
  4957  04D4  0022               	movlb	2	; select bank2
  4958  04D5  00A2               	movwf	(loop@vt+2)^(0+256)
  4959                           
  4960                           ;main.c: 138: FVRCONbits.TSEN = 0;
  4961  04D6  1297               	bcf	23,5	;volatile
  4962                           
  4963                           ;main.c: 143: float ta = (vt / -0.00132) - (0.6063 / -0.00132) - 40;
  4964  04D7  30A9               	movlw	169
  4965  04D8  0020               	movlb	0	; select bank0
  4966  04D9  00AC               	movwf	___ftadd@f1
  4967  04DA  30D1               	movlw	209
  4968  04DB  00AD               	movwf	___ftadd@f1+1
  4969  04DC  3043               	movlw	67
  4970  04DD  00AE               	movwf	___ftadd@f1+2
  4971  04DE  3004               	movlw	4
  4972  04DF  00B6               	movwf	___ftdiv@f2
  4973  04E0  30AD               	movlw	173
  4974  04E1  00B7               	movwf	___ftdiv@f2+1
  4975  04E2  30BA               	movlw	186
  4976  04E3  00B8               	movwf	___ftdiv@f2+2
  4977  04E4  0022               	movlb	2	; select bank2
  4978  04E5  0820               	movf	loop@vt^(0+256),w
  4979  04E6  0020               	movlb	0	; select bank0
  4980  04E7  00B9               	movwf	___ftdiv@f1
  4981  04E8  0022               	movlb	2	; select bank2
  4982  04E9  0821               	movf	(loop@vt+1)^(0+256),w
  4983  04EA  0020               	movlb	0	; select bank0
  4984  04EB  00BA               	movwf	___ftdiv@f1+1
  4985  04EC  0022               	movlb	2	; select bank2
  4986  04ED  0822               	movf	(loop@vt+2)^(0+256),w
  4987  04EE  0020               	movlb	0	; select bank0
  4988  04EF  00BB               	movwf	___ftdiv@f1+2
  4989  04F0  318F  2757  3184   	fcall	___ftdiv
  4990  04F3  0020               	movlb	0	; select bank0
  4991  04F4  0836               	movf	?___ftdiv,w
  4992  04F5  00AF               	movwf	___ftadd@f2
  4993  04F6  0837               	movf	?___ftdiv+1,w
  4994  04F7  00B0               	movwf	___ftadd@f2+1
  4995  04F8  0838               	movf	?___ftdiv+2,w
  4996  04F9  00B1               	movwf	___ftadd@f2+2
  4997  04FA  3183  233E  3184   	fcall	___ftadd
  4998  04FD  0020               	movlb	0	; select bank0
  4999  04FE  082C               	movf	?___ftadd,w
  5000  04FF  0022               	movlb	2	; select bank2
  5001  0500  00A3               	movwf	loop@ta^(0+256)
  5002  0501  0020               	movlb	0	; select bank0
  5003  0502  082D               	movf	?___ftadd+1,w
  5004  0503  0022               	movlb	2	; select bank2
  5005  0504  00A4               	movwf	(loop@ta+1)^(0+256)
  5006  0505  0020               	movlb	0	; select bank0
  5007  0506  082E               	movf	?___ftadd+2,w
  5008  0507  0022               	movlb	2	; select bank2
  5009  0508  00A5               	movwf	(loop@ta+2)^(0+256)
  5010                           
  5011                           ;main.c: 145: sendMessage(&packet, "TEMP", ta);
  5012  0509  302C               	movlw	low loop@packet
  5013  050A  0021               	movlb	1	; select bank1
  5014  050B  00B3               	movwf	sendMessage@packet^(0+128)
  5015  050C  3001               	movlw	high loop@packet
  5016  050D  00B4               	movwf	(sendMessage@packet+1)^(0+128)
  5017  050E  301D               	movlw	low (STR_5| (0+32768))
  5018  050F  00B5               	movwf	sendMessage@topic^(0+128)
  5019  0510  3098               	movlw	high (STR_5| (0+32768))
  5020  0511  00B6               	movwf	(sendMessage@topic^(0+128)+1)
  5021  0512  0022               	movlb	2	; select bank2
  5022  0513  0823               	movf	loop@ta^(0+256),w
  5023  0514  0021               	movlb	1	; select bank1
  5024  0515  00B7               	movwf	sendMessage@value^(0+128)
  5025  0516  0022               	movlb	2	; select bank2
  5026  0517  0824               	movf	(loop@ta+1)^(0+256),w
  5027  0518  0021               	movlb	1	; select bank1
  5028  0519  00B8               	movwf	(sendMessage@value+1)^(0+128)
  5029  051A  0022               	movlb	2	; select bank2
  5030  051B  0825               	movf	(loop@ta+2)^(0+256),w
  5031  051C  0021               	movlb	1	; select bank1
  5032  051D  00B9               	movwf	(sendMessage@value+2)^(0+128)
  5033  051E  318D  250C         	fcall	_sendMessage
  5034  0520  0008               	return
  5035  0521                     __end_of_loop:	
  5036                           
  5037                           	psect	text10
  5038  0D0C                     __ptext10:	
  5039 ;; *************** function _sendMessage *****************
  5040 ;; Defined at:
  5041 ;;		line 87 in file "main.c"
  5042 ;; Parameters:    Size  Location     Type
  5043 ;;  packet          2   19[BANK1 ] PTR struct .
  5044 ;;		 -> main@packet(33), loop@packet(33), 
  5045 ;;  topic           2   21[BANK1 ] PTR const unsigned char 
  5046 ;;		 -> STR_8(6), STR_7(6), STR_5(5), STR_4(5), 
  5047 ;;		 -> STR_3(5), 
  5048 ;;  value           3   23[BANK1 ] float 
  5049 ;; Auto vars:     Size  Location     Type
  5050 ;;  ftoaStatus      2   26[BANK1 ] int 
  5051 ;; Return value:  Size  Location     Type
  5052 ;;                  1    wreg      void 
  5053 ;; Registers used:
  5054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  5055 ;; Tracked objects:
  5056 ;;		On entry : 0/0
  5057 ;;		On exit  : 0/0
  5058 ;;		Unchanged: 0/0
  5059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5060 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5061 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5063 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  5064 ;;Total ram usage:        9 bytes
  5065 ;; Hardware stack levels used:    1
  5066 ;; Hardware stack levels required when called:   13
  5067 ;; This function calls:
  5068 ;;		_ftoa
  5069 ;;		_memset
  5070 ;;		_nrf24l01SendPacket
  5071 ;;		_sleepMs
  5072 ;;		_strcat
  5073 ;;		_strcpy
  5074 ;; This function is called by:
  5075 ;;		_loop
  5076 ;;		_main
  5077 ;; This function uses a non-reentrant model
  5078 ;;
  5079                           
  5080                           
  5081                           ;psect for function _sendMessage
  5082  0D0C                     _sendMessage:	
  5083                           
  5084                           ;main.c: 89: int ftoaStatus;;main.c: 91: memset(packet->Message, 0, sizeof(packet->Messa
      +                          ge));
  5085                           
  5086                           ;incstack = 0
  5087                           ; Regs used in _sendMessage: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+p
      +                          clath+cstack]
  5088  0D0C  3020               	movlw	32
  5089  0D0D  001E               	movwi fsr1++
  5090  0D0E  3000               	movlw	0
  5091  0D0F  001E               	movwi fsr1++
  5092  0D10  3000               	movlw	0
  5093  0D11  001E               	movwi fsr1++
  5094  0D12  001E               	movwi fsr1++
  5095  0D13  0021               	movlb	1	; select bank1
  5096  0D14  0833               	movf	sendMessage@packet^(0+128),w
  5097  0D15  3E01               	addlw	1
  5098  0D16  00FE               	movwf	126
  5099  0D17  3000               	movlw	0
  5100  0D18  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  5101  0D19  00FF               	movwf	127
  5102  0D1A  087E               	movf	126,w
  5103  0D1B  001E               	movwi fsr1++
  5104  0D1C  087F               	movf	127,w
  5105  0D1D  001E               	movwi fsr1++
  5106  0D1E  318A  225B  318D   	fcall	_memset
  5107                           
  5108                           ;main.c: 92: strcpy(packet->Message, romData->name);
  5109  0D21  0021               	movlb	1	; select bank1
  5110  0D22  0833               	movf	sendMessage@packet^(0+128),w
  5111  0D23  3E01               	addlw	1
  5112  0D24  00F0               	movwf	strcpy@to
  5113  0D25  3000               	movlw	0
  5114  0D26  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  5115  0D27  00F1               	movwf	strcpy@to+1
  5116  0D28  086A               	movf	_romData^(0+128),w
  5117  0D29  3E01               	addlw	1
  5118  0D2A  00F2               	movwf	strcpy@from
  5119  0D2B  3002               	movlw	2
  5120  0D2C  00F3               	movwf	strcpy@from+1
  5121  0D2D  3188  2056  318D   	fcall	_strcpy
  5122                           
  5123                           ;main.c: 93: strcat(packet->Message, "/");
  5124  0D30  0021               	movlb	1	; select bank1
  5125  0D31  0833               	movf	sendMessage@packet^(0+128),w
  5126  0D32  3E01               	addlw	1
  5127  0D33  00AD               	movwf	strcat@to^(0+128)
  5128  0D34  3000               	movlw	0
  5129  0D35  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  5130  0D36  00AE               	movwf	(strcat@to+1)^(0+128)
  5131  0D37  3030               	movlw	low (STR_1| (0+32768))
  5132  0D38  00AF               	movwf	strcat@from^(0+128)
  5133  0D39  3098               	movlw	high (STR_1| (0+32768))
  5134  0D3A  00B0               	movwf	(strcat@from^(0+128)+1)
  5135  0D3B  3189  2155  318D   	fcall	_strcat
  5136                           
  5137                           ;main.c: 94: strcat(packet->Message, topic);
  5138  0D3E  0021               	movlb	1	; select bank1
  5139  0D3F  0833               	movf	sendMessage@packet^(0+128),w
  5140  0D40  3E01               	addlw	1
  5141  0D41  00AD               	movwf	strcat@to^(0+128)
  5142  0D42  3000               	movlw	0
  5143  0D43  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  5144  0D44  00AE               	movwf	(strcat@to+1)^(0+128)
  5145  0D45  0836               	movf	(sendMessage@topic+1)^(0+128),w
  5146  0D46  00B0               	movwf	(strcat@from+1)^(0+128)
  5147  0D47  0835               	movf	sendMessage@topic^(0+128),w
  5148  0D48  00AF               	movwf	strcat@from^(0+128)
  5149  0D49  3189  2155  318D   	fcall	_strcat
  5150                           
  5151                           ;main.c: 95: strcat(packet->Message, "/");
  5152  0D4C  0021               	movlb	1	; select bank1
  5153  0D4D  0833               	movf	sendMessage@packet^(0+128),w
  5154  0D4E  3E01               	addlw	1
  5155  0D4F  00AD               	movwf	strcat@to^(0+128)
  5156  0D50  3000               	movlw	0
  5157  0D51  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  5158  0D52  00AE               	movwf	(strcat@to+1)^(0+128)
  5159  0D53  3030               	movlw	low (STR_1| (0+32768))
  5160  0D54  00AF               	movwf	strcat@from^(0+128)
  5161  0D55  3098               	movlw	high (STR_1| (0+32768))
  5162  0D56  00B0               	movwf	(strcat@from^(0+128)+1)
  5163  0D57  3189  2155  318D   	fcall	_strcat
  5164                           
  5165                           ;main.c: 96: strcat(packet->Message, ftoa(value, &ftoaStatus));
  5166  0D5A  0021               	movlb	1	; select bank1
  5167  0D5B  0833               	movf	sendMessage@packet^(0+128),w
  5168  0D5C  3E01               	addlw	1
  5169  0D5D  00AD               	movwf	strcat@to^(0+128)
  5170  0D5E  3000               	movlw	0
  5171  0D5F  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  5172  0D60  00AE               	movwf	(strcat@to+1)^(0+128)
  5173  0D61  0837               	movf	sendMessage@value^(0+128),w
  5174  0D62  00A0               	movwf	ftoa@f^(0+128)
  5175  0D63  0838               	movf	(sendMessage@value+1)^(0+128),w
  5176  0D64  00A1               	movwf	(ftoa@f+1)^(0+128)
  5177  0D65  0839               	movf	(sendMessage@value+2)^(0+128),w
  5178  0D66  00A2               	movwf	(ftoa@f+2)^(0+128)
  5179  0D67  30BA               	movlw	(low (sendMessage@ftoaStatus| 0))& (0+255)
  5180  0D68  00FF               	movwf	127
  5181  0D69  087F               	movf	127,w
  5182  0D6A  00A3               	movwf	ftoa@status^(0+128)
  5183  0D6B  3185  2521  318D   	fcall	_ftoa
  5184  0D6E  0021               	movlb	1	; select bank1
  5185  0D6F  00AF               	movwf	strcat@from^(0+128)
  5186  0D70  3001               	movlw	1
  5187  0D71  00B0               	movwf	(strcat@from+1)^(0+128)
  5188  0D72  3189  2155  318D   	fcall	_strcat
  5189                           
  5190                           ;main.c: 98: packet->packetData.byte = 0;
  5191  0D75  0021               	movlb	1	; select bank1
  5192  0D76  0833               	movf	sendMessage@packet^(0+128),w
  5193  0D77  0084               	movwf	4
  5194  0D78  0834               	movf	(sendMessage@packet+1)^(0+128),w
  5195  0D79  0085               	movwf	5
  5196  0D7A  0180               	clrf	0
  5197                           
  5198                           ;main.c: 99: packet->packetData.ACKRequest = 0;
  5199  0D7B  0833               	movf	sendMessage@packet^(0+128),w
  5200  0D7C  0084               	movwf	4
  5201  0D7D  0834               	movf	(sendMessage@packet+1)^(0+128),w
  5202  0D7E  0085               	movwf	5
  5203  0D7F  1100               	bcf	0,2
  5204                           
  5205                           ;main.c: 101: nrf24l01SendPacket(packet);
  5206  0D80  0834               	movf	(sendMessage@packet+1)^(0+128),w
  5207  0D81  0020               	movlb	0	; select bank0
  5208  0D82  00AA               	movwf	nrf24l01SendPacket@txPacket+1
  5209  0D83  0021               	movlb	1	; select bank1
  5210  0D84  0833               	movf	sendMessage@packet^(0+128),w
  5211  0D85  0020               	movlb	0	; select bank0
  5212  0D86  00A9               	movwf	nrf24l01SendPacket@txPacket
  5213  0D87  318A  222B  318D   	fcall	_nrf24l01SendPacket
  5214                           
  5215                           ;main.c: 103: sleepMs(2000);
  5216  0D8A  30D0               	movlw	208
  5217  0D8B  00F0               	movwf	sleepMs@milliseconds
  5218  0D8C  3007               	movlw	7
  5219  0D8D  00F1               	movwf	sleepMs@milliseconds+1
  5220  0D8E  3189  21D2         	fcall	_sleepMs
  5221  0D90  0008               	return
  5222  0D91                     __end_of_sendMessage:	
  5223                           
  5224                           	psect	text11
  5225  0955                     __ptext11:	
  5226 ;; *************** function _strcat *****************
  5227 ;; Defined at:
  5228 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5229 ;; Parameters:    Size  Location     Type
  5230 ;;  to              2   13[BANK1 ] PTR unsigned char 
  5231 ;;		 -> main@packet(33), loop@packet(33), 
  5232 ;;  from            2   15[BANK1 ] PTR const unsigned char 
  5233 ;;		 -> ftoa@buf(17), STR_8(6), STR_7(6), STR_5(5), 
  5234 ;;		 -> STR_4(5), STR_3(5), STR_2(2), STR_1(2), 
  5235 ;; Auto vars:     Size  Location     Type
  5236 ;;  cp              2   17[BANK1 ] PTR unsigned char 
  5237 ;;		 -> main@packet(33), loop@packet(33), 
  5238 ;; Return value:  Size  Location     Type
  5239 ;;                  2   13[BANK1 ] PTR unsigned char 
  5240 ;; Registers used:
  5241 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5242 ;; Tracked objects:
  5243 ;;		On entry : 0/0
  5244 ;;		On exit  : 0/0
  5245 ;;		Unchanged: 0/0
  5246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5247 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5248 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5250 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5251 ;;Total ram usage:        6 bytes
  5252 ;; Hardware stack levels used:    1
  5253 ;; Hardware stack levels required when called:    7
  5254 ;; This function calls:
  5255 ;;		Nothing
  5256 ;; This function is called by:
  5257 ;;		_sendMessage
  5258 ;; This function uses a non-reentrant model
  5259 ;;
  5260                           
  5261                           
  5262                           ;psect for function _strcat
  5263  0955                     _strcat:	
  5264                           
  5265                           ;incstack = 0
  5266                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5267  0955  0021               	movlb	1	; select bank1
  5268  0956  082E               	movf	(strcat@to+1)^(0+128),w
  5269  0957  00B2               	movwf	(strcat@cp+1)^(0+128)
  5270  0958  082D               	movf	strcat@to^(0+128),w
  5271  0959  00B1               	movwf	strcat@cp^(0+128)
  5272  095A                     l4211:	
  5273  095A  0831               	movf	strcat@cp^(0+128),w
  5274  095B  0084               	movwf	4
  5275  095C  0832               	movf	(strcat@cp+1)^(0+128),w
  5276  095D  0085               	movwf	5
  5277  095E  0800               	movf	0,w
  5278  095F  1903               	btfsc	3,2
  5279  0960  296E               	goto	l4215
  5280  0961  3001               	movlw	1
  5281  0962  07B1               	addwf	strcat@cp^(0+128),f
  5282  0963  3000               	movlw	0
  5283  0964  3DB2               	addwfc	(strcat@cp+1)^(0+128),f
  5284  0965  295A               	goto	l4211
  5285  0966                     l4213:	
  5286  0966  3001               	movlw	1
  5287  0967  07B1               	addwf	strcat@cp^(0+128),f
  5288  0968  3000               	movlw	0
  5289  0969  3DB2               	addwfc	(strcat@cp+1)^(0+128),f
  5290  096A  3001               	movlw	1
  5291  096B  07AF               	addwf	strcat@from^(0+128),f
  5292  096C  3000               	movlw	0
  5293  096D  3DB0               	addwfc	(strcat@from+1)^(0+128),f
  5294  096E                     l4215:	
  5295  096E  082F               	movf	strcat@from^(0+128),w
  5296  096F  0084               	movwf	4
  5297  0970  0830               	movf	(strcat@from+1)^(0+128),w
  5298  0971  0085               	movwf	5
  5299  0972  0800               	movf	0,w	;code access
  5300  0973  00FF               	movwf	127
  5301  0974  0831               	movf	strcat@cp^(0+128),w
  5302  0975  0084               	movwf	4
  5303  0976  0832               	movf	(strcat@cp+1)^(0+128),w
  5304  0977  0085               	movwf	5
  5305  0978  087F               	movf	127,w
  5306  0979  0080               	movwf	0
  5307  097A  0800               	movf	0,w
  5308  097B  1903               	btfsc	3,2
  5309  097C  0008               	return
  5310  097D  2966               	goto	l4213
  5311  097E                     __end_of_strcat:	
  5312                           ;	Return value of _strcat is never used
  5313                           
  5314                           
  5315                           	psect	text12
  5316  0A2B                     __ptext12:	
  5317 ;; *************** function _nrf24l01SendPacket *****************
  5318 ;; Defined at:
  5319 ;;		line 176 in file "nrf24l01.c"
  5320 ;; Parameters:    Size  Location     Type
  5321 ;;  txPacket        2    9[BANK0 ] PTR struct .
  5322 ;;		 -> main@packet(33), loop@packet(33), 
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;		None
  5325 ;; Return value:  Size  Location     Type
  5326 ;;                  1    wreg      void 
  5327 ;; Registers used:
  5328 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  5329 ;; Tracked objects:
  5330 ;;		On entry : 0/0
  5331 ;;		On exit  : 0/0
  5332 ;;		Unchanged: 0/0
  5333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5334 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5337 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5338 ;;Total ram usage:        2 bytes
  5339 ;; Hardware stack levels used:    1
  5340 ;; Hardware stack levels required when called:   12
  5341 ;; This function calls:
  5342 ;;		_nrf24l01Service
  5343 ;;		_sleepMs
  5344 ;;		_strcpy
  5345 ;; This function is called by:
  5346 ;;		_sendMessage
  5347 ;; This function uses a non-reentrant model
  5348 ;;
  5349                           
  5350                           
  5351                           ;psect for function _nrf24l01SendPacket
  5352  0A2B                     _nrf24l01SendPacket:	
  5353                           
  5354                           ;nrf24l01.c: 178: strcpy(TXPacket.Message, txPacket->Message);
  5355                           
  5356                           ;incstack = 0
  5357                           ; Regs used in _nrf24l01SendPacket: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-bte
      +                          mp+11+pclath+cstack]
  5358  0A2B  30C2               	movlw	low (_TXPacket+1)
  5359  0A2C  00F0               	movwf	strcpy@to
  5360  0A2D  3001               	movlw	high (_TXPacket+1)
  5361  0A2E  00F1               	movwf	strcpy@to+1
  5362  0A2F  0020               	movlb	0	; select bank0
  5363  0A30  0829               	movf	nrf24l01SendPacket@txPacket,w
  5364  0A31  3E01               	addlw	1
  5365  0A32  00FE               	movwf	126
  5366  0A33  3000               	movlw	0
  5367  0A34  3D2A               	addwfc	nrf24l01SendPacket@txPacket+1,w
  5368  0A35  00FF               	movwf	127
  5369  0A36  087E               	movf	126,w
  5370  0A37  00F2               	movwf	strcpy@from
  5371  0A38  087F               	movf	127,w
  5372  0A39  00F3               	movwf	strcpy@from+1
  5373  0A3A  3188  2056  318A   	fcall	_strcpy
  5374                           
  5375                           ;nrf24l01.c: 179: TXPacket.packetData = txPacket->packetData;
  5376  0A3D  0020               	movlb	0	; select bank0
  5377  0A3E  0829               	movf	nrf24l01SendPacket@txPacket,w
  5378  0A3F  0084               	movwf	4
  5379  0A40  082A               	movf	nrf24l01SendPacket@txPacket+1,w
  5380  0A41  0085               	movwf	5
  5381  0A42  0800               	movf	0,w
  5382  0A43  00FF               	movwf	127
  5383  0A44  087F               	movf	127,w
  5384  0A45  0023               	movlb	3	; select bank3
  5385  0A46  00C1               	movwf	_TXPacket^(0+384)
  5386                           
  5387                           ;nrf24l01.c: 181: status.TX = 1;
  5388  0A47  3001               	movlw	1
  5389  0A48  00FF               	movwf	127
  5390  0A49  087F               	movf	127,w
  5391  0A4A  0020               	movlb	0	; select bank0
  5392  0A4B  00E3               	movwf	_status	;volatile
  5393  0A4C                     l4249:	
  5394                           ;nrf24l01.c: 183: while (status.TX != 0){
  5395                           
  5396  0A4C  0020               	movlb	0	; select bank0
  5397  0A4D  0863               	movf	_status,w	;volatile
  5398  0A4E  1903               	btfsc	3,2
  5399  0A4F  0008               	return
  5400                           
  5401                           ;nrf24l01.c: 184: sleepMs(1);
  5402  0A50  3001               	movlw	1
  5403  0A51  00F0               	movwf	sleepMs@milliseconds
  5404  0A52  3000               	movlw	0
  5405  0A53  00F1               	movwf	sleepMs@milliseconds+1
  5406  0A54  3189  21D2  318A   	fcall	_sleepMs
  5407                           
  5408                           ;nrf24l01.c: 185: nrf24l01Service();
  5409  0A57  318E  26B2  318A   	fcall	_nrf24l01Service
  5410  0A5A  2A4C               	goto	l4249
  5411  0A5B                     __end_of_nrf24l01SendPacket:	
  5412                           
  5413                           	psect	text13
  5414  0856                     __ptext13:	
  5415 ;; *************** function _strcpy *****************
  5416 ;; Defined at:
  5417 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  5418 ;; Parameters:    Size  Location     Type
  5419 ;;  to              2    0[COMMON] PTR unsigned char 
  5420 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5421 ;;  from            2    2[COMMON] PTR const unsigned char 
  5422 ;;		 -> romDataMap.name(16), packet.Message(32), packet.Message(32), main@packet(33), 
  5423 ;;		 -> STR_6(4), loop@packet(33), romDataMap(28), 
  5424 ;; Auto vars:     Size  Location     Type
  5425 ;;  cp              2    7[BANK0 ] PTR unsigned char 
  5426 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5427 ;; Return value:  Size  Location     Type
  5428 ;;                  2    0[COMMON] PTR unsigned char 
  5429 ;; Registers used:
  5430 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5431 ;; Tracked objects:
  5432 ;;		On entry : 0/0
  5433 ;;		On exit  : 0/0
  5434 ;;		Unchanged: 0/0
  5435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5436 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5437 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5439 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5440 ;;Total ram usage:        6 bytes
  5441 ;; Hardware stack levels used:    1
  5442 ;; Hardware stack levels required when called:    7
  5443 ;; This function calls:
  5444 ;;		Nothing
  5445 ;; This function is called by:
  5446 ;;		_sendMessage
  5447 ;;		_main
  5448 ;;		_nrf24l01SendPacket
  5449 ;; This function uses a non-reentrant model
  5450 ;;
  5451                           
  5452                           
  5453                           ;psect for function _strcpy
  5454  0856                     _strcpy:	
  5455                           
  5456                           ;incstack = 0
  5457                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5458  0856  0871               	movf	strcpy@to+1,w
  5459  0857  0020               	movlb	0	; select bank0
  5460  0858  00A8               	movwf	strcpy@cp+1
  5461  0859  0870               	movf	strcpy@to,w
  5462  085A  00A7               	movwf	strcpy@cp
  5463  085B                     l3889:	
  5464  085B  0872               	movf	strcpy@from,w
  5465  085C  0084               	movwf	4
  5466  085D  0873               	movf	strcpy@from+1,w
  5467  085E  0085               	movwf	5
  5468  085F  0800               	movf	0,w	;code access
  5469  0860  00FF               	movwf	127
  5470  0861  0827               	movf	strcpy@cp,w
  5471  0862  0084               	movwf	4
  5472  0863  0828               	movf	strcpy@cp+1,w
  5473  0864  0085               	movwf	5
  5474  0865  087F               	movf	127,w
  5475  0866  0080               	movwf	0
  5476  0867  0800               	movf	0,w
  5477  0868  1903               	btfsc	3,2
  5478  0869  0008               	return
  5479  086A  3001               	movlw	1
  5480  086B  07A7               	addwf	strcpy@cp,f
  5481  086C  3000               	movlw	0
  5482  086D  3DA8               	addwfc	strcpy@cp+1,f
  5483  086E  3001               	movlw	1
  5484  086F  07F2               	addwf	strcpy@from,f
  5485  0870  3000               	movlw	0
  5486  0871  3DF3               	addwfc	strcpy@from+1,f
  5487  0872  285B               	goto	l3889
  5488  0873                     __end_of_strcpy:	
  5489                           ;	Return value of _strcpy is never used
  5490                           
  5491                           
  5492                           	psect	text14
  5493  0EB2                     __ptext14:	
  5494 ;; *************** function _nrf24l01Service *****************
  5495 ;; Defined at:
  5496 ;;		line 272 in file "nrf24l01.c"
  5497 ;; Parameters:    Size  Location     Type
  5498 ;;		None
  5499 ;; Auto vars:     Size  Location     Type
  5500 ;;  width           1  [STACK] unsigned char 
  5501 ;;  i               1  [STACK] unsigned char 
  5502 ;; Return value:  Size  Location     Type
  5503 ;;                  1    wreg      void 
  5504 ;; Registers used:
  5505 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 1C/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5515 ;;Total ram usage:        0 bytes
  5516 ;; Hardware stack levels used:    1
  5517 ;; Hardware stack levels required when called:   11
  5518 ;; This function calls:
  5519 ;;		_memset
  5520 ;;		_nrf24l01SPIEnd
  5521 ;;		_nrf24l01SPISend
  5522 ;;		_nrf24l01SPIStart
  5523 ;;		_nrf24l01Send
  5524 ;;		_nrf24l01SendTXBuffer
  5525 ;;		_nrf24l01SetRXMode
  5526 ;;		_strcmp
  5527 ;; This function is called by:
  5528 ;;		_nrf24l01SendPacket
  5529 ;;		_nrf24l01ISR
  5530 ;; This function uses a reentrant model
  5531 ;;
  5532                           
  5533                           
  5534                           ;psect for function _nrf24l01Service
  5535  0EB2                     _nrf24l01Service:	
  5536                           
  5537                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5538  0EB2  3142               	addfsr 1,2
  5539                           
  5540                           ;nrf24l01.c: 274: unsigned char i;;nrf24l01.c: 276: if (status.TX == 1){
  5541                           
  5542                           ;incstack = 0
  5543 ;; hardware stack exceeded
  5544                           ; Regs used in _nrf24l01Service: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+
      +                          11+pclath]
  5545  0EB3  0020               	movlb	0	; select bank0
  5546  0EB4  0363               	decf	_status,w	;volatile
  5547  0EB5  1D03               	btfss	3,2
  5548  0EB6  2EBD               	goto	l4487
  5549                           
  5550                           ;nrf24l01.c: 279: status.TX = 2;
  5551  0EB7  3002               	movlw	2
  5552  0EB8  00E3               	movwf	_status	;volatile
  5553                           
  5554                           ;nrf24l01.c: 280: nrf24l01SendTXBuffer(&TXPacket);
  5555  0EB9  30C1               	movlw	(low (_TXPacket| (0+256)))& (0+255)
  5556  0EBA  318C  240A  318E   	fcall	_nrf24l01SendTXBuffer
  5557  0EBD                     l4487:	
  5558                           
  5559                           ;nrf24l01.c: 281: };nrf24l01.c: 283: if (status.TX == 4){
  5560  0EBD  3004               	movlw	4
  5561  0EBE  0663               	xorwf	_status,w	;volatile
  5562  0EBF  1D03               	btfss	3,2
  5563  0EC0  2EC7               	goto	l4493
  5564                           
  5565                           ;nrf24l01.c: 284: if (!status.retryCount--){
  5566  0EC1  03E7               	decf	_status+4,f	;volatile
  5567  0EC2  0A67               	incf	_status+4,w	;volatile
  5568  0EC3  1D03               	btfss	3,2
  5569  0EC4  2EC7               	goto	l4493
  5570                           
  5571                           ;nrf24l01.c: 285: status.TX = 1;
  5572  0EC5  3001               	movlw	1
  5573  0EC6  00E3               	movwf	_status	;volatile
  5574  0EC7                     l4493:	
  5575                           
  5576                           ;nrf24l01.c: 286: };nrf24l01.c: 287: };nrf24l01.c: 289: if (status.RX == 1){
  5577  0EC7  0364               	decf	_status+1,w	;volatile
  5578  0EC8  1D03               	btfss	3,2
  5579  0EC9  2F2B               	goto	l4529
  5580                           
  5581                           ;nrf24l01.c: 292: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  5582  0ECA  3020               	movlw	32
  5583  0ECB  001E               	movwi fsr1++
  5584  0ECC  3000               	movlw	0
  5585  0ECD  001E               	movwi fsr1++
  5586  0ECE  3000               	movlw	0
  5587  0ECF  001E               	movwi fsr1++
  5588  0ED0  001E               	movwi fsr1++
  5589  0ED1  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5590  0ED2  001E               	movwi fsr1++
  5591  0ED3  3001               	movlw	1
  5592  0ED4  001E               	movwi fsr1++
  5593  0ED5  318A  225B  318E   	fcall	_memset
  5594                           
  5595                           ;nrf24l01.c: 293: RXPacket.packetData.byte = 0x00;
  5596  0ED8  0023               	movlb	3	; select bank3
  5597  0ED9  01A0               	clrf	_RXPacket^(0+384)
  5598                           
  5599                           ;nrf24l01.c: 296: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  5600  0EDA  3000               	movlw	0
  5601  0EDB  001E               	movwi fsr1++
  5602  0EDC  3060               	movlw	96
  5603  0EDD  3188  201A  318E   	fcall	_nrf24l01Send
  5604                           
  5605                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5606  0EE0  3FFE               	movwi [-2]fsr1
  5607                           
  5608                           ;nrf24l01.c: 299: PORTAbits.RA0 = 0;
  5609  0EE1  0020               	movlb	0	; select bank0
  5610  0EE2  100C               	bcf	12,0	;volatile
  5611                           
  5612                           ;nrf24l01.c: 302: nrf24l01SPIStart();
  5613  0EE3  3188  2000  318E   	fcall	_nrf24l01SPIStart
  5614                           
  5615                           ;nrf24l01.c: 305: nrf24l01SPISend((unsigned) 0b01100001);
  5616  0EE6  3061               	movlw	97
  5617  0EE7  3197  27F1  318E   	fcall	_nrf24l01SPISend
  5618                           
  5619                           ;nrf24l01.c: 308: RXPacket.packetData.byte = nrf24l01SPISend(0);
  5620  0EEA  3000               	movlw	0
  5621  0EEB  3197  27F1  318E   	fcall	_nrf24l01SPISend
  5622  0EEE  0023               	movlb	3	; select bank3
  5623  0EEF  00A0               	movwf	_RXPacket^(0+384)
  5624                           
  5625                           ;nrf24l01.c: 309: width--;
  5626                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5627  0EF0  3F7E               	moviw [-2]fsr1
  5628  0EF1  00F4               	movwf	116
  5629  0EF2  3001               	movlw	1
  5630  0EF3  0274               	subwf	116,w
  5631  0EF4  3FFE               	movwi [-2]fsr1
  5632                           
  5633                           ;nrf24l01.c: 311: for (i = 0; i < width; i++) {
  5634                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5635  0EF5  3000               	movlw	0
  5636  0EF6  3FFF               	movwi [-1]fsr1
  5637  0EF7                     l4517:	
  5638                           
  5639                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5640  0EF7  3F7F               	moviw [-1]fsr1
  5641  0EF8  00FF               	movwf	127
  5642                           
  5643                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5644  0EF9  3F7E               	moviw [-2]fsr1
  5645  0EFA  027F               	subwf	127,w
  5646  0EFB  1803               	btfsc	3,0
  5647  0EFC  2F0C               	goto	l4519
  5648                           
  5649                           ;nrf24l01.c: 313: RXPacket.Message[i] = nrf24l01SPISend(0);
  5650                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5651  0EFD  3F7F               	moviw [-1]fsr1
  5652  0EFE  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5653  0EFF  0084               	movwf	4
  5654  0F00  3001               	movlw	1	; select bank3/4
  5655  0F01  3001               	movlw	1	; select bank3/4
  5656  0F02  0085               	movwf	5
  5657  0F03  3000               	movlw	0
  5658  0F04  3197  27F1  318E   	fcall	_nrf24l01SPISend
  5659  0F07  0080               	movwf	0
  5660                           
  5661                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5662  0F08  3F7F               	moviw [-1]fsr1
  5663  0F09  3E01               	addlw	1
  5664  0F0A  3FFF               	movwi [-1]fsr1
  5665  0F0B  2EF7               	goto	l4517
  5666  0F0C                     l4519:	
  5667                           
  5668                           ;nrf24l01.c: 314: };nrf24l01.c: 317: nrf24l01SPIEnd();
  5669  0F0C  3197  27DA  318E   	fcall	_nrf24l01SPIEnd
  5670                           
  5671                           ;nrf24l01.c: 320: PORTAbits.RA0 = 1;
  5672  0F0F  0020               	movlb	0	; select bank0
  5673  0F10  140C               	bsf	12,0	;volatile
  5674                           
  5675                           ;nrf24l01.c: 323: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
  5676  0F11  0C65               	rrf	_status+2,w	;volatile
  5677  0F12  3907               	andlw	7
  5678  0F13  00FF               	movwf	127
  5679  0F14  0EFF               	swapf	127,f
  5680  0F15  0023               	movlb	3	; select bank3
  5681  0F16  0820               	movf	_RXPacket^(0+384),w
  5682  0F17  067F               	xorwf	127,w
  5683  0F18  398F               	andlw	-113
  5684  0F19  067F               	xorwf	127,w
  5685  0F1A  00A0               	movwf	_RXPacket^(0+384)
  5686                           
  5687                           ;nrf24l01.c: 326: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  5688  0F1B  3000               	movlw	0
  5689  0F1C  001E               	movwi fsr1++
  5690  0F1D  3009               	movlw	9
  5691  0F1E  3188  201A  318E   	fcall	_nrf24l01Send
  5692  0F21  00FF               	movwf	127
  5693  0F22  0023               	movlb	3	; select bank3
  5694  0F23  0820               	movf	_RXPacket^(0+384),w
  5695  0F24  067F               	xorwf	127,w
  5696  0F25  39FE               	andlw	-2
  5697  0F26  067F               	xorwf	127,w
  5698  0F27  00A0               	movwf	_RXPacket^(0+384)
  5699                           
  5700                           ;nrf24l01.c: 328: status.RX = 2;
  5701  0F28  3002               	movlw	2
  5702  0F29  0020               	movlb	0	; select bank0
  5703  0F2A  00E4               	movwf	_status+1	;volatile
  5704  0F2B                     l4529:	
  5705                           
  5706                           ;nrf24l01.c: 329: };nrf24l01.c: 331: if (status.RX == 2){
  5707  0F2B  3002               	movlw	2
  5708  0F2C  0664               	xorwf	_status+1,w	;volatile
  5709  0F2D  1D03               	btfss	3,2
  5710  0F2E  2F48               	goto	l4541
  5711                           
  5712                           ;nrf24l01.c: 334: if (RXPacket.packetData.IsACK){
  5713  0F2F  0023               	movlb	3	; select bank3
  5714  0F30  1DA0               	btfss	_RXPacket^(0+384),3
  5715  0F31  2F48               	goto	l4541
  5716                           
  5717                           ;nrf24l01.c: 336: if (status.TX == 4){
  5718  0F32  3004               	movlw	4
  5719  0F33  0020               	movlb	0	; select bank0
  5720  0F34  0663               	xorwf	_status,w	;volatile
  5721  0F35  1D03               	btfss	3,2
  5722  0F36  2F48               	goto	l4541
  5723                           
  5724                           ;nrf24l01.c: 338: if (strcmp(RXPacket.Message, TXPacket.Message) == 0){
  5725  0F37  30C2               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  5726  0F38  001E               	movwi fsr1++
  5727  0F39  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5728  0F3A  3189  212C  318E   	fcall	_strcmp
  5729  0F3D  0874               	movf	116,w
  5730  0F3E  0475               	iorwf	117,w
  5731  0F3F  1D03               	btfss	3,2
  5732  0F40  2F48               	goto	l4541
  5733                           
  5734                           ;nrf24l01.c: 339: status.TX = 0;
  5735  0F41  0020               	movlb	0	; select bank0
  5736  0F42  01E3               	clrf	_status	;volatile
  5737                           
  5738                           ;nrf24l01.c: 340: status.RX = 0;
  5739  0F43  01E4               	clrf	_status+1	;volatile
  5740                           
  5741                           ;nrf24l01.c: 342: nrf24l01SetRXMode(0);
  5742  0F44  3000               	movlw	0
  5743  0F45  318A  22C4  318E   	fcall	_nrf24l01SetRXMode
  5744  0F48                     l4541:	
  5745                           
  5746                           ;nrf24l01.c: 344: };nrf24l01.c: 345: };nrf24l01.c: 346: };nrf24l01.c: 347: };nrf24l01.c:
      +                           349: if (status.RX == 2){
  5747  0F48  3002               	movlw	2
  5748  0F49  0020               	movlb	0	; select bank0
  5749  0F4A  0664               	xorwf	_status+1,w	;volatile
  5750  0F4B  1D03               	btfss	3,2
  5751  0F4C  2F55               	goto	l322
  5752                           
  5753                           ;nrf24l01.c: 351: if (RXPacket.packetData.ACKRequest){
  5754  0F4D  0023               	movlb	3	; select bank3
  5755  0F4E  1D20               	btfss	_RXPacket^(0+384),2
  5756  0F4F  2F55               	goto	l322
  5757                           
  5758                           ;nrf24l01.c: 353: RXPacket.packetData.ACKRequest = 0;
  5759  0F50  1120               	bcf	_RXPacket^(0+384),2
  5760                           
  5761                           ;nrf24l01.c: 354: RXPacket.packetData.IsACK = 1;
  5762  0F51  15A0               	bsf	_RXPacket^(0+384),3
  5763                           
  5764                           ;nrf24l01.c: 356: nrf24l01SendTXBuffer(&RXPacket);
  5765  0F52  30A0               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  5766  0F53  318C  240A         	fcall	_nrf24l01SendTXBuffer
  5767  0F55                     l322:	
  5768                           
  5769                           ; _nrf24l01Service: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  5770  0F55  317E               	addfsr 1,-2
  5771  0F56  0008               	return
  5772  0F57                     __end_of_nrf24l01Service:	
  5773                           
  5774                           	psect	text15
  5775  092C                     __ptext15:	
  5776 ;; *************** function _strcmp *****************
  5777 ;; Defined at:
  5778 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;  s1              1    wreg     PTR const unsigned char 
  5781 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5782 ;;  s2              1  [STACK] PTR const unsigned char 
  5783 ;;		 -> TXPacket.Message(32), TXPacket(33), 
  5784 ;; Auto vars:     Size  Location     Type
  5785 ;;  s1              1  [STACK] PTR const unsigned char 
  5786 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5787 ;;  r               1  [STACK] char 
  5788 ;; Return value:  Size  Location     Type
  5789 ;;                  2  [STACK] int 
  5790 ;; Registers used:
  5791 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  5792 ;; Tracked objects:
  5793 ;;		On entry : 1F/0
  5794 ;;		On exit  : 0/0
  5795 ;;		Unchanged: 0/0
  5796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5801 ;;Total ram usage:        0 bytes
  5802 ;; Hardware stack levels used:    1
  5803 ;; Hardware stack levels required when called:    7
  5804 ;; This function calls:
  5805 ;;		Nothing
  5806 ;; This function is called by:
  5807 ;;		_nrf24l01Service
  5808 ;; This function uses a reentrant model
  5809 ;;
  5810                           
  5811                           
  5812                           ;psect for function _strcmp
  5813  092C                     _strcmp:	
  5814                           
  5815                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5816  092C  3142               	addfsr 1,2
  5817                           
  5818                           ;incstack = 0
  5819 ;; hardware stack exceeded
  5820                           ; Regs used in _strcmp: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  5821                           ;strcmp@s1 stored from wreg
  5822                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5823  092D  3FFE               	movwi [-2]fsr1
  5824  092E  293C               	goto	l4309
  5825  092F                     l4311:	
  5826                           
  5827                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5828  092F  3F7E               	moviw [-2]fsr1
  5829  0930  0084               	movwf	4
  5830  0931  3001               	movlw	1	; select bank2/3
  5831  0932  0085               	movwf	5
  5832  0933  0800               	movf	0,w
  5833  0934  1903               	btfsc	3,2
  5834  0935  294E               	goto	l4313
  5835                           
  5836                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5837  0936  3F7E               	moviw [-2]fsr1
  5838  0937  3E01               	addlw	1
  5839  0938  3FFE               	movwi [-2]fsr1
  5840                           
  5841                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5842  0939  3F7D               	moviw [-3]fsr1
  5843  093A  3E01               	addlw	1
  5844  093B  3FFD               	movwi [-3]fsr1
  5845  093C                     l4309:	
  5846                           
  5847                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5848  093C  3F7D               	moviw [-3]fsr1
  5849  093D  0084               	movwf	4
  5850  093E  3001               	movlw	1	; select bank2/3
  5851  093F  0085               	movwf	5
  5852  0940  0800               	movf	0,w
  5853  0941  00FF               	movwf	127
  5854                           
  5855                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5856  0942  3F7E               	moviw [-2]fsr1
  5857  0943  0084               	movwf	4
  5858  0944  3001               	movlw	1	; select bank2/3
  5859  0945  0085               	movwf	5
  5860  0946  0800               	movf	0,w
  5861  0947  00F4               	movwf	116
  5862  0948  087F               	movf	127,w
  5863  0949  0274               	subwf	116,w
  5864                           
  5865                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5866  094A  3FFF               	movwi [-1]fsr1
  5867  094B  0889               	movf	9,f
  5868  094C  1903               	btfsc	3,2
  5869  094D  292F               	goto	l4311
  5870  094E                     l4313:	
  5871                           
  5872                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5873  094E  3F7F               	moviw [-1]fsr1
  5874  094F  00F4               	movwf	116
  5875  0950  01F5               	clrf	117
  5876  0951  1BF4               	btfsc	116,7
  5877  0952  03F5               	decf	117,f
  5878                           
  5879                           ; _strcmp: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsiz
      +                          e = 1, vargsize = 0
  5880  0953  317D               	addfsr 1,-3
  5881  0954  0008               	return
  5882  0955                     __end_of_strcmp:	
  5883                           
  5884                           	psect	text16
  5885  0C0A                     __ptext16:	
  5886 ;; *************** function _nrf24l01SendTXBuffer *****************
  5887 ;; Defined at:
  5888 ;;		line 236 in file "nrf24l01.c"
  5889 ;; Parameters:    Size  Location     Type
  5890 ;;  packet          1    wreg     PTR struct .
  5891 ;;		 -> TXPacket(33), RXPacket(33), 
  5892 ;; Auto vars:     Size  Location     Type
  5893 ;;  packet          1  [STACK] PTR struct .
  5894 ;;		 -> TXPacket(33), RXPacket(33), 
  5895 ;;  i               1  [STACK] unsigned char 
  5896 ;;  width           1  [STACK] unsigned char 
  5897 ;; Return value:  Size  Location     Type
  5898 ;;                  1    wreg      void 
  5899 ;; Registers used:
  5900 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+10, btemp+11, pclath
  5901 ;; Tracked objects:
  5902 ;;		On entry : 1C/0
  5903 ;;		On exit  : 1F/0
  5904 ;;		Unchanged: 0/0
  5905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5910 ;;Total ram usage:        0 bytes
  5911 ;; Hardware stack levels used:    1
  5912 ;; Hardware stack levels required when called:   10
  5913 ;; This function calls:
  5914 ;;		_nrf24l01SPIEnd
  5915 ;;		_nrf24l01SPISend
  5916 ;;		_nrf24l01SPIStart
  5917 ;;		_nrf24l01SetRXMode
  5918 ;;		_strlen
  5919 ;; This function is called by:
  5920 ;;		_nrf24l01Service
  5921 ;; This function uses a reentrant model
  5922 ;;
  5923                           
  5924                           
  5925                           ;psect for function _nrf24l01SendTXBuffer
  5926  0C0A                     _nrf24l01SendTXBuffer:	
  5927                           
  5928                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5929  0C0A  3143               	addfsr 1,3
  5930                           
  5931                           ;incstack = 0
  5932 ;; hardware stack exceeded
  5933                           ; Regs used in _nrf24l01SendTXBuffer: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+10+
      +                          btemp+11+pclath]
  5934                           ;nrf24l01SendTXBuffer@packet stored from wreg
  5935                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  5936  0C0B  3FFD               	movwi [-3]fsr1
  5937                           
  5938                           ;nrf24l01.c: 238: lastTXPacket = packet;
  5939                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  5940  0C0C  3F7D               	moviw [-3]fsr1
  5941  0C0D  0020               	movlb	0	; select bank0
  5942  0C0E  00E8               	movwf	_lastTXPacket
  5943                           
  5944                           ;nrf24l01.c: 240: unsigned char i;;nrf24l01.c: 243: nrf24l01SetRXMode(0);
  5945  0C0F  3000               	movlw	0
  5946  0C10  318A  22C4  318C   	fcall	_nrf24l01SetRXMode
  5947                           
  5948                           ;nrf24l01.c: 246: nrf24l01SPIStart();
  5949  0C13  3188  2000  318C   	fcall	_nrf24l01SPIStart
  5950                           
  5951                           ;nrf24l01.c: 249: nrf24l01SPISend((unsigned) 0b10110000);
  5952  0C16  30B0               	movlw	176
  5953  0C17  3197  27F1  318C   	fcall	_nrf24l01SPISend
  5954                           
  5955                           ;nrf24l01.c: 251: nrf24l01SPISend(lastTXPacket->packetData.byte);
  5956  0C1A  0020               	movlb	0	; select bank0
  5957  0C1B  0868               	movf	_lastTXPacket,w
  5958  0C1C  0084               	movwf	4
  5959  0C1D  3001               	movlw	1	; select bank2/3
  5960  0C1E  3001               	movlw	1	; select bank2/3
  5961  0C1F  0085               	movwf	5
  5962  0C20  0800               	movf	0,w
  5963  0C21  3197  27F1  318C   	fcall	_nrf24l01SPISend
  5964                           
  5965                           ;nrf24l01.c: 255: unsigned char width = strlen(lastTXPacket->Message);
  5966  0C24  0020               	movlb	0	; select bank0
  5967  0C25  0868               	movf	_lastTXPacket,w
  5968  0C26  3E01               	addlw	1
  5969  0C27  001E               	movwi fsr1++
  5970  0C28  3001               	movlw	1
  5971  0C29  001E               	movwi fsr1++
  5972  0C2A  3189  21A8  318C   	fcall	_strlen
  5973  0C2D  0874               	movf	116,w
  5974                           
  5975                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  5976  0C2E  3FFF               	movwi [-1]fsr1
  5977                           
  5978                           ;nrf24l01.c: 257: for (i = 0; i < width; i++) {
  5979                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  5980  0C2F  3000               	movlw	0
  5981  0C30  3FFE               	movwi [-2]fsr1
  5982  0C31                     l4293:	
  5983                           
  5984                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  5985  0C31  3F7E               	moviw [-2]fsr1
  5986  0C32  00FF               	movwf	127
  5987                           
  5988                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  5989  0C33  3F7F               	moviw [-1]fsr1
  5990  0C34  027F               	subwf	127,w
  5991  0C35  1803               	btfsc	3,0
  5992  0C36  2C48               	goto	l4295
  5993                           
  5994                           ;nrf24l01.c: 258: nrf24l01SPISend(lastTXPacket->Message[i]);
  5995                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  5996  0C37  3F7E               	moviw [-2]fsr1
  5997  0C38  0020               	movlb	0	; select bank0
  5998  0C39  0768               	addwf	_lastTXPacket,w
  5999  0C3A  00FF               	movwf	127
  6000  0C3B  0A7F               	incf	127,w
  6001  0C3C  0084               	movwf	4
  6002  0C3D  3001               	movlw	1	; select bank2/3
  6003  0C3E  3001               	movlw	1	; select bank2/3
  6004  0C3F  0085               	movwf	5
  6005  0C40  0800               	movf	0,w
  6006  0C41  3197  27F1  318C   	fcall	_nrf24l01SPISend
  6007                           
  6008                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6009  0C44  3F7E               	moviw [-2]fsr1
  6010  0C45  3E01               	addlw	1
  6011  0C46  3FFE               	movwi [-2]fsr1
  6012  0C47  2C31               	goto	l4293
  6013  0C48                     l4295:	
  6014                           
  6015                           ;nrf24l01.c: 259: };nrf24l01.c: 262: nrf24l01SPIEnd();
  6016  0C48  3197  27DA  318C   	fcall	_nrf24l01SPIEnd
  6017                           
  6018                           ;nrf24l01.c: 265: PORTAbits.RA0 = 1;
  6019  0C4B  0020               	movlb	0	; select bank0
  6020  0C4C  140C               	bsf	12,0	;volatile
  6021                           
  6022                           ;nrf24l01.c: 266: _delay((unsigned long)((12)*(32000000/4000000.0)));
  6023  0C4D  3020               	movlw	32
  6024  0C4E                     u5397:	
  6025  0C4E  0B89               	decfsz	9,f
  6026  0C4F  2C4E               	goto	u5397
  6027                           
  6028                           ;nrf24l01.c: 267: PORTAbits.RA0 = 0;
  6029  0C50  0020               	movlb	0	; select bank0
  6030  0C51  100C               	bcf	12,0	;volatile
  6031                           
  6032                           ; _nrf24l01SendTXBuffer: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 0, argsize = 0, vargsize = 0
  6033  0C52  317D               	addfsr 1,-3
  6034  0C53  0008               	return
  6035  0C54                     __end_of_nrf24l01SendTXBuffer:	
  6036                           
  6037                           	psect	text17
  6038  09A8                     __ptext17:	
  6039 ;; *************** function _strlen *****************
  6040 ;; Defined at:
  6041 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  6042 ;; Parameters:    Size  Location     Type
  6043 ;;  s               2  [STACK] PTR const unsigned char 
  6044 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6045 ;;		 -> RXPacket(33), romDataMap(28), 
  6046 ;; Auto vars:     Size  Location     Type
  6047 ;;  cp              2  [STACK] PTR const unsigned char 
  6048 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6049 ;;		 -> RXPacket(33), romDataMap(28), 
  6050 ;; Return value:  Size  Location     Type
  6051 ;;                  2  [STACK] unsigned int 
  6052 ;; Registers used:
  6053 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+10, btemp+11
  6054 ;; Tracked objects:
  6055 ;;		On entry : 1F/0
  6056 ;;		On exit  : 0/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6063 ;;Total ram usage:        0 bytes
  6064 ;; Hardware stack levels used:    1
  6065 ;; Hardware stack levels required when called:    7
  6066 ;; This function calls:
  6067 ;;		Nothing
  6068 ;; This function is called by:
  6069 ;;		_nrf24l01GetPipe
  6070 ;;		_nrf24l01SendTXBuffer
  6071 ;; This function uses a reentrant model
  6072 ;;
  6073                           
  6074                           
  6075                           ;psect for function _strlen
  6076  09A8                     _strlen:	
  6077                           
  6078                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6079  09A8  3142               	addfsr 1,2
  6080                           
  6081                           ;stkvar	strlen@s @ sp[(-2)+-2]
  6082                           
  6083                           ;incstack = 0
  6084 ;; hardware stack exceeded
  6085                           ; Regs used in _strlen: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+10+btemp+11]
  6086  09A9  0806               	movf	6,w
  6087  09AA  0084               	movwf	4
  6088  09AB  0807               	movf	7,w
  6089  09AC  0085               	movwf	5
  6090  09AD  313C               	addfsr 0,-4
  6091                           
  6092                           ;stkvar	strlen@cp @ sp[(-2)+0]
  6093  09AE  3F00               	moviw [0]fsr0
  6094  09AF  3FFE               	movwi [-2]fsr1
  6095  09B0  3F01               	moviw [1]fsr0
  6096  09B1  3FFF               	movwi [-1]fsr1
  6097  09B2                     l3895:	
  6098                           
  6099                           ;stkvar	strlen@cp @ sp[(-2)+0]
  6100  09B2  3F7E               	moviw [-2]fsr1
  6101  09B3  0084               	movwf	4
  6102  09B4  3F7F               	moviw [-1]fsr1
  6103  09B5  0085               	movwf	5
  6104  09B6  0800               	movf	0,w
  6105  09B7  1903               	btfsc	3,2
  6106  09B8  29C1               	goto	l3897
  6107                           
  6108                           ;stkvar	strlen@cp @ sp[(-2)+0]
  6109  09B9  3F7E               	moviw [-2]fsr1
  6110  09BA  3E01               	addlw	1
  6111  09BB  3FFE               	movwi [-2]fsr1
  6112  09BC  01F4               	clrf	116
  6113  09BD  3F7F               	moviw [-1]fsr1
  6114  09BE  3D74               	addwfc	116,w
  6115  09BF  3FFF               	movwi [-1]fsr1
  6116  09C0  29B2               	goto	l3895
  6117  09C1                     l3897:	
  6118                           
  6119                           ;stkvar	strlen@s @ sp[(-2)+-2]
  6120  09C1  0806               	movf	6,w
  6121  09C2  0084               	movwf	4
  6122  09C3  0807               	movf	7,w
  6123  09C4  0085               	movwf	5
  6124  09C5  313C               	addfsr 0,-4
  6125                           
  6126                           ;stkvar	strlen@cp @ sp[(-2)+0]
  6127  09C6  3F7E               	moviw [-2]fsr1
  6128  09C7  00FE               	movwf	126
  6129  09C8  3F7F               	moviw [-1]fsr1
  6130  09C9  00FF               	movwf	127
  6131  09CA  3F00               	moviw [0]fsr0
  6132  09CB  027E               	subwf	126,w
  6133  09CC  00F4               	movwf	116
  6134  09CD  3F01               	moviw [1]fsr0
  6135  09CE  3B7F               	subwfb	127,w
  6136  09CF  00F5               	movwf	117
  6137                           
  6138                           ; _strlen: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsiz
      +                          e = 2, vargsize = 0
  6139  09D0  317C               	addfsr 1,-4
  6140  09D1  0008               	return
  6141  09D2                     __end_of_strlen:	
  6142                           
  6143                           	psect	text18
  6144  0AC4                     __ptext18:	
  6145 ;; *************** function _nrf24l01SetRXMode *****************
  6146 ;; Defined at:
  6147 ;;		line 50 in file "nrf24l01.c"
  6148 ;; Parameters:    Size  Location     Type
  6149 ;;  rxMode          1    wreg     unsigned char 
  6150 ;; Auto vars:     Size  Location     Type
  6151 ;;  rxMode          1  [STACK] unsigned char 
  6152 ;; Return value:  Size  Location     Type
  6153 ;;                  1    wreg      void 
  6154 ;; Registers used:
  6155 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+11, pclath
  6156 ;; Tracked objects:
  6157 ;;		On entry : 1F/0
  6158 ;;		On exit  : 0/0
  6159 ;;		Unchanged: 0/0
  6160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6165 ;;Total ram usage:        0 bytes
  6166 ;; Hardware stack levels used:    1
  6167 ;; Hardware stack levels required when called:    9
  6168 ;; This function calls:
  6169 ;;		_nrf24l01Send
  6170 ;; This function is called by:
  6171 ;;		_nrf24l01ISR
  6172 ;;		_nrf24l01SendTXBuffer
  6173 ;;		_nrf24l01Service
  6174 ;; This function uses a reentrant model
  6175 ;;
  6176                           
  6177                           
  6178                           ;psect for function _nrf24l01SetRXMode
  6179  0AC4                     _nrf24l01SetRXMode:	
  6180                           
  6181                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6182  0AC4  3141               	addfsr 1,1
  6183                           
  6184                           ;incstack = 0
  6185 ;; hardware stack exceeded
  6186                           ; Regs used in _nrf24l01SetRXMode: [wreg+fsr1l+fsr1h+status,2-btemp+0+btemp+11+pclath]
  6187                           ;nrf24l01SetRXMode@rxMode stored from wreg
  6188                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6189  0AC5  3FFF               	movwi [-1]fsr1
  6190                           
  6191                           ;nrf24l01.c: 53: if (rxMode){
  6192                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6193  0AC6  3F7F               	moviw [-1]fsr1
  6194  0AC7  1903               	btfsc	3,2
  6195  0AC8  2ACE               	goto	l3907
  6196                           
  6197                           ;nrf24l01.c: 54: if (status.TX == 2){
  6198  0AC9  3002               	movlw	2
  6199  0ACA  0020               	movlb	0	; select bank0
  6200  0ACB  0663               	xorwf	_status,w	;volatile
  6201  0ACC  1903               	btfsc	3,2
  6202  0ACD  2AFD               	goto	l267
  6203  0ACE                     l3907:	
  6204                           
  6205                           ;nrf24l01.c: 56: };nrf24l01.c: 57: };nrf24l01.c: 60: if (!rxMode){
  6206                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6207  0ACE  3F7F               	moviw [-1]fsr1
  6208  0ACF  1D03               	btfss	3,2
  6209  0AD0  2AD6               	goto	l3913
  6210                           
  6211                           ;nrf24l01.c: 61: if (status.TX == 4){
  6212  0AD1  3004               	movlw	4
  6213  0AD2  0020               	movlb	0	; select bank0
  6214  0AD3  0663               	xorwf	_status,w	;volatile
  6215  0AD4  1903               	btfsc	3,2
  6216  0AD5  2AFD               	goto	l267
  6217  0AD6                     l3913:	
  6218                           
  6219                           ;nrf24l01.c: 63: };nrf24l01.c: 64: };nrf24l01.c: 70: if (status.configRegister.PRIM_RX !
      +                          = rxMode){
  6220                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6221  0AD6  3F7F               	moviw [-1]fsr1
  6222  0AD7  00FF               	movwf	127
  6223  0AD8  0020               	movlb	0	; select bank0
  6224  0AD9  0866               	movf	_status+3,w	;volatile
  6225  0ADA  3901               	andlw	1
  6226  0ADB  067F               	xorwf	127,w
  6227  0ADC  1903               	skipnz
  6228  0ADD  2AFD               	goto	l267
  6229                           
  6230                           ;nrf24l01.c: 73: PORTAbits.RA0 = 0;
  6231  0ADE  100C               	bcf	12,0	;volatile
  6232                           
  6233                           ;nrf24l01.c: 74: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6234  0ADF  30C0               	movlw	192
  6235  0AE0                     u5407:	
  6236  0AE0  3200               	nop2
  6237  0AE1  0B89               	decfsz	9,f
  6238  0AE2  2AE0               	goto	u5407
  6239                           
  6240                           ;nrf24l01.c: 77: status.configRegister.PRIM_RX = rxMode;
  6241                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6242  0AE3  3F7F               	moviw [-1]fsr1
  6243  0AE4  3901               	andlw	1
  6244  0AE5  0020               	movlb	0	; select bank0
  6245  0AE6  1D03               	skipz
  6246  0AE7  1466               	bsf	_status+3,0	;volatile
  6247  0AE8  1903               	skipnz
  6248  0AE9  1066               	bcf	_status+3,0	;volatile
  6249                           
  6250                           ;nrf24l01.c: 78: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configRegi
      +                          ster.byte);
  6251  0AEA  0866               	movf	_status+3,w	;volatile
  6252  0AEB  001E               	movwi fsr1++
  6253  0AEC  3020               	movlw	32
  6254  0AED  3188  201A  318A   	fcall	_nrf24l01Send
  6255                           
  6256                           ;nrf24l01.c: 81: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6257  0AF0  30C0               	movlw	192
  6258  0AF1                     u5417:	
  6259  0AF1  3200               	nop2
  6260  0AF2  0B89               	decfsz	9,f
  6261  0AF3  2AF1               	goto	u5417
  6262                           
  6263                           ;nrf24l01.c: 84: if (rxMode){
  6264                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6265  0AF4  3F7F               	moviw [-1]fsr1
  6266  0AF5  1903               	btfsc	3,2
  6267  0AF6  2AFD               	goto	l267
  6268                           
  6269                           ;nrf24l01.c: 85: PORTAbits.RA0 = 1;
  6270  0AF7  0020               	movlb	0	; select bank0
  6271  0AF8  140C               	bsf	12,0	;volatile
  6272                           
  6273                           ;nrf24l01.c: 86: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6274  0AF9  30C0               	movlw	192
  6275  0AFA                     u5427:	
  6276  0AFA  3200               	nop2
  6277  0AFB  0B89               	decfsz	9,f
  6278  0AFC  2AFA               	goto	u5427
  6279  0AFD                     l267:	
  6280                           
  6281                           ; _nrf24l01SetRXMode: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
  6282  0AFD  317F               	addfsr 1,-1
  6283  0AFE  0008               	return
  6284  0AFF                     __end_of_nrf24l01SetRXMode:	
  6285                           
  6286                           	psect	text19
  6287  081A                     __ptext19:	
  6288 ;; *************** function _nrf24l01Send *****************
  6289 ;; Defined at:
  6290 ;;		line 11 in file "nrf24l01.c"
  6291 ;; Parameters:    Size  Location     Type
  6292 ;;  command         1    wreg     unsigned char 
  6293 ;;  data            1  [STACK] unsigned char 
  6294 ;; Auto vars:     Size  Location     Type
  6295 ;;  command         1  [STACK] unsigned char 
  6296 ;; Return value:  Size  Location     Type
  6297 ;;                  1    wreg      unsigned char 
  6298 ;; Registers used:
  6299 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath
  6300 ;; Tracked objects:
  6301 ;;		On entry : 0/0
  6302 ;;		On exit  : 1F/1
  6303 ;;		Unchanged: 0/0
  6304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6309 ;;Total ram usage:        0 bytes
  6310 ;; Hardware stack levels used:    1
  6311 ;; Hardware stack levels required when called:    8
  6312 ;; This function calls:
  6313 ;;		_nrf24l01SPIEnd
  6314 ;;		_nrf24l01SPISend
  6315 ;;		_nrf24l01SPIStart
  6316 ;; This function is called by:
  6317 ;;		_nrf24l01SetRXMode
  6318 ;;		_nrf24l01SetRXPipe
  6319 ;;		_nrf24l01ISR
  6320 ;;		_nrf24l01Service
  6321 ;;		_nrf24l01InitRegisters
  6322 ;;		_nrf24l01ChangeTXPower
  6323 ;; This function uses a reentrant model
  6324 ;;
  6325                           
  6326                           
  6327                           ;psect for function _nrf24l01Send
  6328  081A                     _nrf24l01Send:	
  6329                           
  6330                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6331  081A  3141               	addfsr 1,1
  6332                           
  6333                           ;incstack = 0
  6334 ;; hardware stack exceeded
  6335                           ; Regs used in _nrf24l01Send: [wreg+fsr1l+fsr1h+status,2+status,0+pclath]
  6336                           ;nrf24l01Send@command stored from wreg
  6337                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6338  081B  3FFF               	movwi [-1]fsr1
  6339                           
  6340                           ;nrf24l01.c: 14: nrf24l01SPIStart();
  6341  081C  3188  2000  3188   	fcall	_nrf24l01SPIStart
  6342                           
  6343                           ;nrf24l01.c: 17: nrf24l01SPISend(command);
  6344                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6345  081F  3F7F               	moviw [-1]fsr1
  6346  0820  3197  27F1  3188   	fcall	_nrf24l01SPISend
  6347                           
  6348                           ;nrf24l01.c: 20: data = nrf24l01SPISend(data);
  6349                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6350  0823  3F7E               	moviw [-2]fsr1
  6351  0824  3197  27F1  3188   	fcall	_nrf24l01SPISend
  6352                           
  6353                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6354  0827  3FFE               	movwi [-2]fsr1
  6355                           
  6356                           ;nrf24l01.c: 23: nrf24l01SPIEnd();
  6357  0828  3197  27DA         	fcall	_nrf24l01SPIEnd
  6358                           
  6359                           ;nrf24l01.c: 25: return data;
  6360                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6361  082A  3F7E               	moviw [-2]fsr1
  6362                           
  6363                           ; _nrf24l01Send: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, 
      +                          argsize = 1, vargsize = 0
  6364  082B  317E               	addfsr 1,-2
  6365  082C  0008               	return
  6366  082D                     __end_of_nrf24l01Send:	
  6367                           
  6368                           	psect	text20
  6369  0800                     __ptext20:	
  6370 ;; *************** function _nrf24l01SPIStart *****************
  6371 ;; Defined at:
  6372 ;;		line 68 in file "interface.c"
  6373 ;; Parameters:    Size  Location     Type
  6374 ;;		None
  6375 ;; Auto vars:     Size  Location     Type
  6376 ;;		None
  6377 ;; Return value:  Size  Location     Type
  6378 ;;                  1    wreg      void 
  6379 ;; Registers used:
  6380 ;;		wreg
  6381 ;; Tracked objects:
  6382 ;;		On entry : 0/0
  6383 ;;		On exit  : 0/0
  6384 ;;		Unchanged: 0/0
  6385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6390 ;;Total ram usage:        0 bytes
  6391 ;; Hardware stack levels used:    1
  6392 ;; Hardware stack levels required when called:    7
  6393 ;; This function calls:
  6394 ;;		Nothing
  6395 ;; This function is called by:
  6396 ;;		_nrf24l01Send
  6397 ;;		_nrf24l01SetTXPipe
  6398 ;;		_nrf24l01SendTXBuffer
  6399 ;;		_nrf24l01Service
  6400 ;;		_nrf24l01InitRegisters
  6401 ;; This function uses a reentrant model
  6402 ;;
  6403                           
  6404                           
  6405                           ;psect for function _nrf24l01SPIStart
  6406  0800                     _nrf24l01SPIStart:	
  6407                           
  6408                           ;interface.c: 69: PIE0bits.INTE = 0;
  6409                           
  6410                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6411                           ;incstack = 0
  6412 ;; hardware stack exceeded
  6413                           ; Regs used in _nrf24l01SPIStart: [wreg]
  6414  0800  0021               	movlb	1	; select bank1
  6415  0801  1010               	bcf	16,0	;volatile
  6416                           
  6417                           ;interface.c: 70: PORTAbits.RA1 = 0;
  6418  0802  0020               	movlb	0	; select bank0
  6419  0803  108C               	bcf	12,1	;volatile
  6420                           
  6421                           ;interface.c: 71: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6422  0804  301A               	movlw	26
  6423  0805                     u5437:	
  6424  0805  0B89               	decfsz	9,f
  6425  0806  2805               	goto	u5437
  6426  0807  3200               	nop2
  6427                           
  6428                           ; _nrf24l01SPIStart: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           0, argsize = 0, vargsize = 0
  6429  0808  0008               	return
  6430  0809                     __end_of_nrf24l01SPIStart:	
  6431                           
  6432                           	psect	text21
  6433  17F1                     __ptext21:	
  6434 ;; *************** function _nrf24l01SPISend *****************
  6435 ;; Defined at:
  6436 ;;		line 56 in file "interface.c"
  6437 ;; Parameters:    Size  Location     Type
  6438 ;;  data            1    wreg     unsigned char 
  6439 ;; Auto vars:     Size  Location     Type
  6440 ;;  data            1  [STACK] unsigned char 
  6441 ;; Return value:  Size  Location     Type
  6442 ;;                  1    wreg      unsigned char 
  6443 ;; Registers used:
  6444 ;;		wreg, fsr1l, fsr1h
  6445 ;; Tracked objects:
  6446 ;;		On entry : 0/0
  6447 ;;		On exit  : 1F/4
  6448 ;;		Unchanged: 0/0
  6449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6454 ;;Total ram usage:        0 bytes
  6455 ;; Hardware stack levels used:    1
  6456 ;; Hardware stack levels required when called:    7
  6457 ;; This function calls:
  6458 ;;		Nothing
  6459 ;; This function is called by:
  6460 ;;		_nrf24l01Send
  6461 ;;		_nrf24l01SetTXPipe
  6462 ;;		_nrf24l01SendTXBuffer
  6463 ;;		_nrf24l01Service
  6464 ;;		_nrf24l01InitRegisters
  6465 ;; This function uses a reentrant model
  6466 ;;
  6467                           
  6468                           
  6469                           ;psect for function _nrf24l01SPISend
  6470  17F1                     _nrf24l01SPISend:	
  6471                           
  6472                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6473  17F1  3141               	addfsr 1,1
  6474                           
  6475                           ;incstack = 0
  6476 ;; hardware stack exceeded
  6477                           ; Regs used in _nrf24l01SPISend: [wreg+fsr1l+fsr1h]
  6478                           ;nrf24l01SPISend@data stored from wreg
  6479                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6480  17F2  3FFF               	movwi [-1]fsr1
  6481                           
  6482                           ;interface.c: 57: SSP1BUF = data;
  6483                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6484  17F3  3F7F               	moviw [-1]fsr1
  6485  17F4  0024               	movlb	4	; select bank4
  6486  17F5  0091               	movwf	17	;volatile
  6487                           
  6488                           ;interface.c: 59: PORTCbits.RC4 = 1;
  6489  17F6  0020               	movlb	0	; select bank0
  6490  17F7  160E               	bsf	14,4	;volatile
  6491  17F8                     l53:	
  6492                           ;interface.c: 61: while (!SSP1STATbits.BF){
  6493                           
  6494  17F8  0024               	movlb	4	; select bank4
  6495  17F9  1814               	btfsc	20,0	;volatile
  6496  17FA  2FFD               	goto	l3649
  6497                           
  6498                           ;interface.c: 62: __nop();
  6499  17FB  0000               	nop
  6500  17FC  2FF8               	goto	l53
  6501  17FD                     l3649:	
  6502                           
  6503                           ;interface.c: 63: };interface.c: 65: return SSP1BUF;
  6504  17FD  0811               	movf	17,w	;volatile
  6505                           
  6506                           ; _nrf24l01SPISend: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  6507  17FE  317F               	addfsr 1,-1
  6508  17FF  0008               	return
  6509  1800                     __end_of_nrf24l01SPISend:	
  6510                           
  6511                           	psect	text22
  6512  17DA                     __ptext22:	
  6513 ;; *************** function _nrf24l01SPIEnd *****************
  6514 ;; Defined at:
  6515 ;;		line 74 in file "interface.c"
  6516 ;; Parameters:    Size  Location     Type
  6517 ;;		None
  6518 ;; Auto vars:     Size  Location     Type
  6519 ;;		None
  6520 ;; Return value:  Size  Location     Type
  6521 ;;                  1    wreg      void 
  6522 ;; Registers used:
  6523 ;;		wreg
  6524 ;; Tracked objects:
  6525 ;;		On entry : 0/0
  6526 ;;		On exit  : 1F/1
  6527 ;;		Unchanged: 0/0
  6528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6533 ;;Total ram usage:        0 bytes
  6534 ;; Hardware stack levels used:    1
  6535 ;; Hardware stack levels required when called:    7
  6536 ;; This function calls:
  6537 ;;		Nothing
  6538 ;; This function is called by:
  6539 ;;		_nrf24l01Send
  6540 ;;		_nrf24l01SetTXPipe
  6541 ;;		_nrf24l01SendTXBuffer
  6542 ;;		_nrf24l01Service
  6543 ;;		_nrf24l01InitRegisters
  6544 ;; This function uses a reentrant model
  6545 ;;
  6546                           
  6547                           
  6548                           ;psect for function _nrf24l01SPIEnd
  6549  17DA                     _nrf24l01SPIEnd:	
  6550                           
  6551                           ;interface.c: 75: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6552                           
  6553                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6554                           ;incstack = 0
  6555 ;; hardware stack exceeded
  6556                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  6557  17DA  301A               	movlw	26
  6558  17DB                     u5447:	
  6559  17DB  0B89               	decfsz	9,f
  6560  17DC  2FDB               	goto	u5447
  6561  17DD  3200               	nop2
  6562                           
  6563                           ;interface.c: 76: PORTAbits.RA1 = 1;
  6564  17DE  0020               	movlb	0	; select bank0
  6565  17DF  148C               	bsf	12,1	;volatile
  6566                           
  6567                           ;interface.c: 77: PIE0bits.INTE = 1;
  6568  17E0  0021               	movlb	1	; select bank1
  6569  17E1  1410               	bsf	16,0	;volatile
  6570                           
  6571                           ; _nrf24l01SPIEnd: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  6572  17E2  0008               	return
  6573  17E3                     __end_of_nrf24l01SPIEnd:	
  6574                           
  6575                           	psect	text23
  6576  0A5B                     __ptext23:	
  6577 ;; *************** function _memset *****************
  6578 ;; Defined at:
  6579 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6580 ;; Parameters:    Size  Location     Type
  6581 ;;  p1              2  [STACK] PTR void 
  6582 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6583 ;;  c               2  [STACK] int 
  6584 ;;  n               2  [STACK] unsigned int 
  6585 ;; Auto vars:     Size  Location     Type
  6586 ;;  p               2  [STACK] PTR unsigned char 
  6587 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6588 ;; Return value:  Size  Location     Type
  6589 ;;                  2  [STACK] PTR void 
  6590 ;; Registers used:
  6591 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+8, btemp+9, btemp+11
  6592 ;; Tracked objects:
  6593 ;;		On entry : 1E/1
  6594 ;;		On exit  : 0/0
  6595 ;;		Unchanged: 0/0
  6596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6601 ;;Total ram usage:        0 bytes
  6602 ;; Hardware stack levels used:    1
  6603 ;; Hardware stack levels required when called:    7
  6604 ;; This function calls:
  6605 ;;		Nothing
  6606 ;; This function is called by:
  6607 ;;		_sendMessage
  6608 ;;		_nrf24l01Service
  6609 ;; This function uses a reentrant model
  6610 ;;
  6611                           
  6612                           
  6613                           ;psect for function _memset
  6614  0A5B                     _memset:	
  6615                           
  6616                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6617  0A5B  3142               	addfsr 1,2
  6618                           
  6619                           ;stkvar	memset@p1 @ sp[(-2)+-2]
  6620                           
  6621                           ;incstack = 0
  6622 ;; hardware stack exceeded
  6623                           ; Regs used in _memset: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+8+btemp+9+btemp+1
      +                          1]
  6624  0A5C  0806               	movf	6,w
  6625  0A5D  0084               	movwf	4
  6626  0A5E  0807               	movf	7,w
  6627  0A5F  0085               	movwf	5
  6628  0A60  313C               	addfsr 0,-4
  6629                           
  6630                           ;stkvar	memset@p @ sp[(-2)+0]
  6631  0A61  3F00               	moviw [0]fsr0
  6632  0A62  3FFE               	movwi [-2]fsr1
  6633  0A63  3F01               	moviw [1]fsr0
  6634  0A64  3FFF               	movwi [-1]fsr1
  6635  0A65                     l4205:	
  6636                           
  6637                           ;stkvar	memset@n @ sp[(-2)+-6]
  6638  0A65  3F78               	moviw [-8]fsr1
  6639  0A66  00F4               	movwf	116
  6640  0A67  3001               	movlw	1
  6641  0A68  0274               	subwf	116,w
  6642  0A69  3FF8               	movwi [-8]fsr1
  6643  0A6A  3F79               	moviw [-7]fsr1
  6644  0A6B  00F4               	movwf	116
  6645  0A6C  3000               	movlw	0
  6646  0A6D  3B74               	subwfb	116,w
  6647  0A6E  3FF9               	movwi [-7]fsr1
  6648  0A6F  3F78               	moviw [-8]fsr1
  6649  0A70  3AFF               	xorlw	255
  6650  0A71  00F4               	movwf	116
  6651  0A72  3F79               	moviw [-7]fsr1
  6652  0A73  3AFF               	xorlw	255
  6653  0A74  04F4               	iorwf	116,f
  6654  0A75  1903               	btfsc	3,2
  6655  0A76  2A8B               	goto	l972
  6656                           
  6657                           ;stkvar	memset@c @ sp[(-2)+-4]
  6658  0A77  3F7A               	moviw [-6]fsr1
  6659  0A78  00FF               	movwf	127
  6660                           
  6661                           ;stkvar	memset@p @ sp[(-2)+0]
  6662  0A79  3F7E               	moviw [-2]fsr1
  6663  0A7A  00FC               	movwf	124
  6664  0A7B  3F7F               	moviw [-1]fsr1
  6665  0A7C  00FD               	movwf	125
  6666  0A7D  087C               	movf	124,w
  6667  0A7E  0084               	movwf	4
  6668  0A7F  087D               	movf	125,w
  6669  0A80  0085               	movwf	5
  6670  0A81  087F               	movf	127,w
  6671  0A82  0080               	movwf	0
  6672                           
  6673                           ;stkvar	memset@p @ sp[(-2)+0]
  6674  0A83  3F7E               	moviw [-2]fsr1
  6675  0A84  3E01               	addlw	1
  6676  0A85  3FFE               	movwi [-2]fsr1
  6677  0A86  01F4               	clrf	116
  6678  0A87  3F7F               	moviw [-1]fsr1
  6679  0A88  3D74               	addwfc	116,w
  6680  0A89  3FFF               	movwi [-1]fsr1
  6681  0A8A  2A65               	goto	l4205
  6682  0A8B                     l972:	
  6683                           
  6684                           ; _memset: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsiz
      +                          e = 6, vargsize = 0
  6685  0A8B  3178               	addfsr 1,-8
  6686  0A8C  0008               	return
  6687  0A8D                     __end_of_memset:	
  6688                           
  6689                           	psect	text24
  6690  0521                     __ptext24:	
  6691 ;; *************** function _ftoa *****************
  6692 ;; Defined at:
  6693 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6694 ;; Parameters:    Size  Location     Type
  6695 ;;  f               3    0[BANK1 ] float 
  6696 ;;  status          1    3[BANK1 ] PTR int 
  6697 ;;		 -> sendMessage@ftoaStatus(2), 
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;  l               4    8[BANK1 ] unsigned long 
  6700 ;;  rem             4    4[BANK1 ] unsigned long 
  6701 ;;  cp              1   12[BANK1 ] PTR unsigned char 
  6702 ;;		 -> ftoa@buf(17), 
  6703 ;; Return value:  Size  Location     Type
  6704 ;;                  1    wreg      PTR unsigned char 
  6705 ;; Registers used:
  6706 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  6707 ;; Tracked objects:
  6708 ;;		On entry : 0/0
  6709 ;;		On exit  : 0/0
  6710 ;;		Unchanged: 0/0
  6711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6712 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6713 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6715 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6716 ;;Total ram usage:       13 bytes
  6717 ;; Hardware stack levels used:    1
  6718 ;; Hardware stack levels required when called:   10
  6719 ;; This function calls:
  6720 ;;		___ftge
  6721 ;;		___ftmul
  6722 ;;		___ftneg
  6723 ;;		___ftsub
  6724 ;;		___fttol
  6725 ;;		___lltoft
  6726 ;;		_sprintf
  6727 ;; This function is called by:
  6728 ;;		_sendMessage
  6729 ;; This function uses a non-reentrant model
  6730 ;;
  6731                           
  6732                           
  6733                           ;psect for function _ftoa
  6734  0521                     _ftoa:	
  6735                           
  6736                           ;incstack = 0
  6737                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  6738  0521  3051               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6739  0522  00FF               	movwf	127
  6740  0523  087F               	movf	127,w
  6741  0524  0021               	movlb	1	; select bank1
  6742  0525  00AC               	movwf	ftoa@cp^(0+128)
  6743  0526  0820               	movf	ftoa@f^(0+128),w
  6744  0527  0020               	movlb	0	; select bank0
  6745  0528  00A7               	movwf	___ftge@ff1
  6746  0529  0021               	movlb	1	; select bank1
  6747  052A  0821               	movf	(ftoa@f+1)^(0+128),w
  6748  052B  0020               	movlb	0	; select bank0
  6749  052C  00A8               	movwf	___ftge@ff1+1
  6750  052D  0021               	movlb	1	; select bank1
  6751  052E  0822               	movf	(ftoa@f+2)^(0+128),w
  6752  052F  0020               	movlb	0	; select bank0
  6753  0530  00A9               	movwf	___ftge@ff1+2
  6754  0531  3000               	movlw	0
  6755  0532  00AA               	movwf	___ftge@ff2
  6756  0533  3000               	movlw	0
  6757  0534  00AB               	movwf	___ftge@ff2+1
  6758  0535  3000               	movlw	0
  6759  0536  00AC               	movwf	___ftge@ff2+2
  6760  0537  318A  22FF  3185   	fcall	___ftge
  6761  053A  1803               	btfsc	3,0
  6762  053B  2D63               	goto	l4227
  6763  053C  302D               	movlw	45
  6764  053D  00FF               	movwf	127
  6765  053E  0021               	movlb	1	; select bank1
  6766  053F  082C               	movf	ftoa@cp^(0+128),w
  6767  0540  0084               	movwf	4
  6768  0541  3001               	movlw	1	; select bank2/3
  6769  0542  0085               	movwf	5
  6770  0543  087F               	movf	127,w
  6771  0544  0080               	movwf	0
  6772  0545  3001               	movlw	1
  6773  0546  00FF               	movwf	127
  6774  0547  087F               	movf	127,w
  6775  0548  07AC               	addwf	ftoa@cp^(0+128),f
  6776  0549  0820               	movf	ftoa@f^(0+128),w
  6777  054A  0020               	movlb	0	; select bank0
  6778  054B  00CD               	movwf	___ftneg@f1
  6779  054C  0021               	movlb	1	; select bank1
  6780  054D  0821               	movf	(ftoa@f+1)^(0+128),w
  6781  054E  0020               	movlb	0	; select bank0
  6782  054F  00CE               	movwf	___ftneg@f1+1
  6783  0550  0021               	movlb	1	; select bank1
  6784  0551  0822               	movf	(ftoa@f+2)^(0+128),w
  6785  0552  0020               	movlb	0	; select bank0
  6786  0553  00CF               	movwf	___ftneg@f1+2
  6787  0554  3197  27D1  3185   	fcall	___ftneg
  6788  0557  0020               	movlb	0	; select bank0
  6789  0558  084D               	movf	?___ftneg,w
  6790  0559  0021               	movlb	1	; select bank1
  6791  055A  00A0               	movwf	ftoa@f^(0+128)
  6792  055B  0020               	movlb	0	; select bank0
  6793  055C  084E               	movf	?___ftneg+1,w
  6794  055D  0021               	movlb	1	; select bank1
  6795  055E  00A1               	movwf	(ftoa@f+1)^(0+128)
  6796  055F  0020               	movlb	0	; select bank0
  6797  0560  084F               	movf	?___ftneg+2,w
  6798  0561  0021               	movlb	1	; select bank1
  6799  0562  00A2               	movwf	(ftoa@f+2)^(0+128)
  6800  0563                     l4227:	
  6801  0563  0021               	movlb	1	; select bank1
  6802  0564  0820               	movf	ftoa@f^(0+128),w
  6803  0565  0020               	movlb	0	; select bank0
  6804  0566  00D9               	movwf	___fttol@f1
  6805  0567  0021               	movlb	1	; select bank1
  6806  0568  0821               	movf	(ftoa@f+1)^(0+128),w
  6807  0569  0020               	movlb	0	; select bank0
  6808  056A  00DA               	movwf	___fttol@f1+1
  6809  056B  0021               	movlb	1	; select bank1
  6810  056C  0822               	movf	(ftoa@f+2)^(0+128),w
  6811  056D  0020               	movlb	0	; select bank0
  6812  056E  00DB               	movwf	___fttol@f1+2
  6813  056F  318D  2591  3185   	fcall	___fttol
  6814  0572  0020               	movlb	0	; select bank0
  6815  0573  085C               	movf	?___fttol+3,w
  6816  0574  0021               	movlb	1	; select bank1
  6817  0575  00AB               	movwf	(ftoa@l+3)^(0+128)
  6818  0576  0020               	movlb	0	; select bank0
  6819  0577  085B               	movf	?___fttol+2,w
  6820  0578  0021               	movlb	1	; select bank1
  6821  0579  00AA               	movwf	(ftoa@l+2)^(0+128)
  6822  057A  0020               	movlb	0	; select bank0
  6823  057B  085A               	movf	?___fttol+1,w
  6824  057C  0021               	movlb	1	; select bank1
  6825  057D  00A9               	movwf	(ftoa@l+1)^(0+128)
  6826  057E  0020               	movlb	0	; select bank0
  6827  057F  0859               	movf	?___fttol,w
  6828  0580  0021               	movlb	1	; select bank1
  6829  0581  00A8               	movwf	ftoa@l^(0+128)
  6830  0582  082B               	movf	(ftoa@l+3)^(0+128),w
  6831  0583  00F3               	movwf	___lltoft@c+3
  6832  0584  082A               	movf	(ftoa@l+2)^(0+128),w
  6833  0585  00F2               	movwf	___lltoft@c+2
  6834  0586  0829               	movf	(ftoa@l+1)^(0+128),w
  6835  0587  00F1               	movwf	___lltoft@c+1
  6836  0588  0828               	movf	ftoa@l^(0+128),w
  6837  0589  00F0               	movwf	___lltoft@c
  6838  058A  3189  217E  3185   	fcall	___lltoft
  6839  058D  0870               	movf	?___lltoft,w
  6840  058E  0020               	movlb	0	; select bank0
  6841  058F  00B6               	movwf	___ftsub@f2
  6842  0590  0871               	movf	?___lltoft+1,w
  6843  0591  00B7               	movwf	___ftsub@f2+1
  6844  0592  0872               	movf	?___lltoft+2,w
  6845  0593  00B8               	movwf	___ftsub@f2+2
  6846  0594  0021               	movlb	1	; select bank1
  6847  0595  0820               	movf	ftoa@f^(0+128),w
  6848  0596  0020               	movlb	0	; select bank0
  6849  0597  00B9               	movwf	___ftsub@f1
  6850  0598  0021               	movlb	1	; select bank1
  6851  0599  0821               	movf	(ftoa@f+1)^(0+128),w
  6852  059A  0020               	movlb	0	; select bank0
  6853  059B  00BA               	movwf	___ftsub@f1+1
  6854  059C  0021               	movlb	1	; select bank1
  6855  059D  0822               	movf	(ftoa@f+2)^(0+128),w
  6856  059E  0020               	movlb	0	; select bank0
  6857  059F  00BB               	movwf	___ftsub@f1+2
  6858  05A0  3188  2073  3185   	fcall	___ftsub
  6859  05A3  0020               	movlb	0	; select bank0
  6860  05A4  0836               	movf	?___ftsub,w
  6861  05A5  0021               	movlb	1	; select bank1
  6862  05A6  00A0               	movwf	ftoa@f^(0+128)
  6863  05A7  0020               	movlb	0	; select bank0
  6864  05A8  0837               	movf	?___ftsub+1,w
  6865  05A9  0021               	movlb	1	; select bank1
  6866  05AA  00A1               	movwf	(ftoa@f+1)^(0+128)
  6867  05AB  0020               	movlb	0	; select bank0
  6868  05AC  0838               	movf	?___ftsub+2,w
  6869  05AD  0021               	movlb	1	; select bank1
  6870  05AE  00A2               	movwf	(ftoa@f+2)^(0+128)
  6871  05AF  0820               	movf	ftoa@f^(0+128),w
  6872  05B0  0020               	movlb	0	; select bank0
  6873  05B1  00D0               	movwf	___ftmul@f2
  6874  05B2  0021               	movlb	1	; select bank1
  6875  05B3  0821               	movf	(ftoa@f+1)^(0+128),w
  6876  05B4  0020               	movlb	0	; select bank0
  6877  05B5  00D1               	movwf	___ftmul@f2+1
  6878  05B6  0021               	movlb	1	; select bank1
  6879  05B7  0822               	movf	(ftoa@f+2)^(0+128),w
  6880  05B8  0020               	movlb	0	; select bank0
  6881  05B9  00D2               	movwf	___ftmul@f2+2
  6882  05BA  3024               	movlw	36
  6883  05BB  00CD               	movwf	___ftmul@f1
  6884  05BC  3074               	movlw	116
  6885  05BD  00CE               	movwf	___ftmul@f1+1
  6886  05BE  3049               	movlw	73
  6887  05BF  00CF               	movwf	___ftmul@f1+2
  6888  05C0  3186  2608  3185   	fcall	___ftmul
  6889  05C3  0020               	movlb	0	; select bank0
  6890  05C4  084D               	movf	?___ftmul,w
  6891  05C5  00D9               	movwf	___fttol@f1
  6892  05C6  084E               	movf	?___ftmul+1,w
  6893  05C7  00DA               	movwf	___fttol@f1+1
  6894  05C8  084F               	movf	?___ftmul+2,w
  6895  05C9  00DB               	movwf	___fttol@f1+2
  6896  05CA  318D  2591  3185   	fcall	___fttol
  6897  05CD  0020               	movlb	0	; select bank0
  6898  05CE  085C               	movf	?___fttol+3,w
  6899  05CF  0021               	movlb	1	; select bank1
  6900  05D0  00A7               	movwf	(ftoa@rem+3)^(0+128)
  6901  05D1  0020               	movlb	0	; select bank0
  6902  05D2  085B               	movf	?___fttol+2,w
  6903  05D3  0021               	movlb	1	; select bank1
  6904  05D4  00A6               	movwf	(ftoa@rem+2)^(0+128)
  6905  05D5  0020               	movlb	0	; select bank0
  6906  05D6  085A               	movf	?___fttol+1,w
  6907  05D7  0021               	movlb	1	; select bank1
  6908  05D8  00A5               	movwf	(ftoa@rem+1)^(0+128)
  6909  05D9  0020               	movlb	0	; select bank0
  6910  05DA  0859               	movf	?___fttol,w
  6911  05DB  0021               	movlb	1	; select bank1
  6912  05DC  00A4               	movwf	ftoa@rem^(0+128)
  6913  05DD  3001               	movlw	low (STR_9| (0+32768))
  6914  05DE  0020               	movlb	0	; select bank0
  6915  05DF  00BC               	movwf	sprintf@f
  6916  05E0  3098               	movlw	high (STR_9| (0+32768))
  6917  05E1  00BD               	movwf	sprintf@f+1
  6918  05E2  0021               	movlb	1	; select bank1
  6919  05E3  082B               	movf	(ftoa@l+3)^(0+128),w
  6920  05E4  0020               	movlb	0	; select bank0
  6921  05E5  00C1               	movwf	?_sprintf+5
  6922  05E6  0021               	movlb	1	; select bank1
  6923  05E7  082A               	movf	(ftoa@l+2)^(0+128),w
  6924  05E8  0020               	movlb	0	; select bank0
  6925  05E9  00C0               	movwf	?_sprintf+4
  6926  05EA  0021               	movlb	1	; select bank1
  6927  05EB  0829               	movf	(ftoa@l+1)^(0+128),w
  6928  05EC  0020               	movlb	0	; select bank0
  6929  05ED  00BF               	movwf	?_sprintf+3
  6930  05EE  0021               	movlb	1	; select bank1
  6931  05EF  0828               	movf	ftoa@l^(0+128),w
  6932  05F0  0020               	movlb	0	; select bank0
  6933  05F1  00BE               	movwf	?_sprintf+2
  6934  05F2  0021               	movlb	1	; select bank1
  6935  05F3  0827               	movf	(ftoa@rem+3)^(0+128),w
  6936  05F4  0020               	movlb	0	; select bank0
  6937  05F5  00C5               	movwf	?_sprintf+9
  6938  05F6  0021               	movlb	1	; select bank1
  6939  05F7  0826               	movf	(ftoa@rem+2)^(0+128),w
  6940  05F8  0020               	movlb	0	; select bank0
  6941  05F9  00C4               	movwf	?_sprintf+8
  6942  05FA  0021               	movlb	1	; select bank1
  6943  05FB  0825               	movf	(ftoa@rem+1)^(0+128),w
  6944  05FC  0020               	movlb	0	; select bank0
  6945  05FD  00C3               	movwf	?_sprintf+7
  6946  05FE  0021               	movlb	1	; select bank1
  6947  05FF  0824               	movf	ftoa@rem^(0+128),w
  6948  0600  0020               	movlb	0	; select bank0
  6949  0601  00C2               	movwf	?_sprintf+6
  6950  0602  0021               	movlb	1	; select bank1
  6951  0603  082C               	movf	ftoa@cp^(0+128),w
  6952  0604  3180  206A         	fcall	_sprintf
  6953  0606  3051               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6954  0607  0008               	return
  6955  0608                     __end_of_ftoa:	
  6956                           
  6957                           	psect	text25
  6958  006A                     __ptext25:	
  6959 ;; *************** function _sprintf *****************
  6960 ;; Defined at:
  6961 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  6962 ;; Parameters:    Size  Location     Type
  6963 ;;  sp              1    wreg     PTR unsigned char 
  6964 ;;		 -> ftoa@buf(17), 
  6965 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  6966 ;;		 -> STR_9(11), 
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;  sp              1   48[BANK0 ] PTR unsigned char 
  6969 ;;		 -> ftoa@buf(17), 
  6970 ;;  val             4   44[BANK0 ] unsigned long 
  6971 ;;  tmpval          4    0        struct .
  6972 ;;  prec            2   51[BANK0 ] int 
  6973 ;;  width           2   49[BANK0 ] int 
  6974 ;;  cp              2    0        PTR const unsigned char 
  6975 ;;  len             2    0        unsigned int 
  6976 ;;  c               1   53[BANK0 ] unsigned char 
  6977 ;;  ap              1   43[BANK0 ] PTR void [1]
  6978 ;;		 -> ?_sprintf(2), 
  6979 ;;  flag            1   42[BANK0 ] unsigned char 
  6980 ;; Return value:  Size  Location     Type
  6981 ;;                  2   28[BANK0 ] int 
  6982 ;; Registers used:
  6983 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  6984 ;; Tracked objects:
  6985 ;;		On entry : 0/0
  6986 ;;		On exit  : 0/0
  6987 ;;		Unchanged: 0/0
  6988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6989 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6990 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6991 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6992 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6993 ;;Total ram usage:       26 bytes
  6994 ;; Hardware stack levels used:    1
  6995 ;; Hardware stack levels required when called:    8
  6996 ;; This function calls:
  6997 ;;		___lldiv
  6998 ;;		___llmod
  6999 ;;		___wmul
  7000 ;;		_isdigit
  7001 ;; This function is called by:
  7002 ;;		_ftoa
  7003 ;; This function uses a non-reentrant model
  7004 ;;
  7005                           
  7006                           
  7007                           ;psect for function _sprintf
  7008  006A                     _sprintf:	
  7009                           
  7010                           ;incstack = 0
  7011                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  7012                           ;sprintf@sp stored from wreg
  7013  006A  0020               	movlb	0	; select bank0
  7014  006B  00D0               	movwf	sprintf@sp
  7015                           
  7016                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  7017  006C  303E               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  7018  006D  00FF               	movwf	127
  7019  006E  087F               	movf	127,w
  7020  006F  00CB               	movwf	sprintf@ap
  7021  0070                     l4031:	
  7022                           ;doprnt.c: 548: while((c = *f++)) {
  7023                           
  7024  0070  083D               	movf	sprintf@f+1,w
  7025  0071  00FF               	movwf	127
  7026  0072  083C               	movf	sprintf@f,w
  7027  0073  00FE               	movwf	126
  7028  0074  0ABC               	incf	sprintf@f,f
  7029  0075  1903               	skipnz
  7030  0076  0ABD               	incf	sprintf@f+1,f
  7031  0077  087E               	movf	126,w
  7032  0078  0084               	movwf	4
  7033  0079  087F               	movf	127,w
  7034  007A  0085               	movwf	5
  7035  007B  0800               	movf	0,w	;code access
  7036  007C  00FF               	movwf	127
  7037  007D  087F               	movf	127,w
  7038  007E  00D5               	movwf	sprintf@c
  7039  007F  0855               	movf	sprintf@c,w
  7040  0080  1903               	btfsc	3,2
  7041  0081  2A31               	goto	l4033
  7042                           
  7043                           ;doprnt.c: 550: if(c != '%')
  7044  0082  3025               	movlw	37
  7045  0083  0655               	xorwf	sprintf@c,w
  7046  0084  1903               	btfsc	3,2
  7047  0085  2893               	goto	l3939
  7048                           
  7049                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  7050  0086  0855               	movf	sprintf@c,w
  7051  0087  00FF               	movwf	127
  7052  0088  0850               	movf	sprintf@sp,w
  7053  0089  0084               	movwf	4
  7054  008A  3001               	movlw	1	; select bank2/3
  7055  008B  0085               	movwf	5
  7056  008C  087F               	movf	127,w
  7057  008D  0080               	movwf	0
  7058  008E  3001               	movlw	1
  7059  008F  00FF               	movwf	127
  7060  0090  087F               	movf	127,w
  7061  0091  07D0               	addwf	sprintf@sp,f
  7062                           
  7063                           ;doprnt.c: 554: continue;
  7064  0092  2870               	goto	l4031
  7065  0093                     l3939:	
  7066                           
  7067                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  7068  0093  01D1               	clrf	sprintf@width
  7069  0094  01D2               	clrf	sprintf@width+1
  7070                           
  7071                           ;doprnt.c: 560: flag = 0;
  7072  0095  01CA               	clrf	sprintf@flag
  7073                           
  7074                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  7075  0096  083C               	movf	sprintf@f,w
  7076  0097  0084               	movwf	4
  7077  0098  083D               	movf	sprintf@f+1,w
  7078  0099  0085               	movwf	5
  7079  009A  0800               	movf	0,w	;code access
  7080  009B  3197  27E3  3180   	fcall	_isdigit
  7081  009E  1C03               	btfss	3,0
  7082  009F  28D1               	goto	l3953
  7083                           
  7084                           ;doprnt.c: 610: width = 0;
  7085  00A0  0020               	movlb	0	; select bank0
  7086  00A1  01D1               	clrf	sprintf@width
  7087  00A2  01D2               	clrf	sprintf@width+1
  7088  00A3                     l3945:	
  7089                           ;doprnt.c: 611: do {
  7090                           
  7091                           
  7092                           ;doprnt.c: 612: width *= 10;
  7093  00A3  300A               	movlw	10
  7094  00A4  00F0               	movwf	___wmul@multiplier
  7095  00A5  3000               	movlw	0
  7096  00A6  00F1               	movwf	___wmul@multiplier+1
  7097  00A7  0020               	movlb	0	; select bank0
  7098  00A8  0852               	movf	sprintf@width+1,w
  7099  00A9  00F3               	movwf	___wmul@multiplicand+1
  7100  00AA  0851               	movf	sprintf@width,w
  7101  00AB  00F2               	movwf	___wmul@multiplicand
  7102  00AC  3188  2091  3180   	fcall	___wmul
  7103  00AF  0871               	movf	?___wmul+1,w
  7104  00B0  0020               	movlb	0	; select bank0
  7105  00B1  00D2               	movwf	sprintf@width+1
  7106  00B2  0870               	movf	?___wmul,w
  7107  00B3  00D1               	movwf	sprintf@width
  7108                           
  7109                           ;doprnt.c: 613: width += *f++ - '0';
  7110  00B4  083C               	movf	sprintf@f,w
  7111  00B5  0084               	movwf	4
  7112  00B6  083D               	movf	sprintf@f+1,w
  7113  00B7  0085               	movwf	5
  7114  00B8  0800               	movf	0,w	;code access
  7115  00B9  3ED0               	addlw	208
  7116  00BA  00FE               	movwf	126
  7117  00BB  30FF               	movlw	255
  7118  00BC  1803               	skipnc
  7119  00BD  3000               	movlw	0
  7120  00BE  00FF               	movwf	127
  7121  00BF  087E               	movf	126,w
  7122  00C0  07D1               	addwf	sprintf@width,f
  7123  00C1  087F               	movf	127,w
  7124  00C2  3DD2               	addwfc	sprintf@width+1,f
  7125  00C3  3001               	movlw	1
  7126  00C4  07BC               	addwf	sprintf@f,f
  7127  00C5  3000               	movlw	0
  7128  00C6  3DBD               	addwfc	sprintf@f+1,f
  7129                           
  7130                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  7131  00C7  083C               	movf	sprintf@f,w
  7132  00C8  0084               	movwf	4
  7133  00C9  083D               	movf	sprintf@f+1,w
  7134  00CA  0085               	movwf	5
  7135  00CB  0800               	movf	0,w	;code access
  7136  00CC  3197  27E3  3180   	fcall	_isdigit
  7137  00CF  1803               	btfsc	3,0
  7138  00D0  28A3               	goto	l3945
  7139  00D1                     l3953:	
  7140                           
  7141                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  7142  00D1  0020               	movlb	0	; select bank0
  7143  00D2  083C               	movf	sprintf@f,w
  7144  00D3  0084               	movwf	4
  7145  00D4  083D               	movf	sprintf@f+1,w
  7146  00D5  0085               	movwf	5
  7147  00D6  0012               	moviw fsr0++
  7148  00D7  3A2E               	xorlw	46
  7149  00D8  1D03               	btfss	3,2
  7150  00D9  290F               	goto	l3965
  7151                           
  7152                           ;doprnt.c: 625: f++;
  7153  00DA  3001               	movlw	1
  7154  00DB  07BC               	addwf	sprintf@f,f
  7155  00DC  3000               	movlw	0
  7156  00DD  3DBD               	addwfc	sprintf@f+1,f
  7157                           
  7158                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  7159  00DE  01D3               	clrf	sprintf@prec
  7160  00DF  01D4               	clrf	sprintf@prec+1
  7161  00E0                     l3963:	
  7162                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  7163                           
  7164  00E0  083C               	movf	sprintf@f,w
  7165  00E1  0084               	movwf	4
  7166  00E2  083D               	movf	sprintf@f+1,w
  7167  00E3  0085               	movwf	5
  7168  00E4  0800               	movf	0,w	;code access
  7169  00E5  3197  27E3  3180   	fcall	_isdigit
  7170  00E8  1C03               	btfss	3,0
  7171  00E9  291A               	goto	l3971
  7172                           
  7173                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  7174  00EA  0020               	movlb	0	; select bank0
  7175  00EB  083C               	movf	sprintf@f,w
  7176  00EC  0084               	movwf	4
  7177  00ED  083D               	movf	sprintf@f+1,w
  7178  00EE  0085               	movwf	5
  7179  00EF  0800               	movf	0,w	;code access
  7180  00F0  00FE               	movwf	126
  7181  00F1  01FF               	clrf	127
  7182  00F2  0854               	movf	sprintf@prec+1,w
  7183  00F3  00F1               	movwf	___wmul@multiplier+1
  7184  00F4  0853               	movf	sprintf@prec,w
  7185  00F5  00F0               	movwf	___wmul@multiplier
  7186  00F6  300A               	movlw	10
  7187  00F7  00F2               	movwf	___wmul@multiplicand
  7188  00F8  3000               	movlw	0
  7189  00F9  00F3               	movwf	___wmul@multiplicand+1
  7190  00FA  3188  2091  3180   	fcall	___wmul
  7191  00FD  087E               	movf	126,w
  7192  00FE  0770               	addwf	?___wmul,w
  7193  00FF  00FC               	movwf	124
  7194  0100  087F               	movf	127,w
  7195  0101  3D71               	addwfc	?___wmul+1,w
  7196  0102  00FD               	movwf	125
  7197  0103  087C               	movf	124,w
  7198  0104  3ED0               	addlw	208
  7199  0105  0020               	movlb	0	; select bank0
  7200  0106  00D3               	movwf	sprintf@prec
  7201  0107  30FF               	movlw	255
  7202  0108  3D7D               	addwfc	125,w
  7203  0109  00D4               	movwf	sprintf@prec+1
  7204  010A  3001               	movlw	1
  7205  010B  07BC               	addwf	sprintf@f,f
  7206  010C  3000               	movlw	0
  7207  010D  3DBD               	addwfc	sprintf@f+1,f
  7208  010E  28E0               	goto	l3963
  7209  010F                     l3965:	
  7210                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  7211                           
  7212                           
  7213                           ;doprnt.c: 645: prec = 0;
  7214  010F  0020               	movlb	0	; select bank0
  7215  0110  01D3               	clrf	sprintf@prec
  7216  0111  01D4               	clrf	sprintf@prec+1
  7217                           
  7218                           ;doprnt.c: 654: switch(c = *f++) {
  7219                           
  7220                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  7221  0112  291A               	goto	l3971
  7222  0113                     l521:	
  7223                           ;doprnt.c: 660: case 'l':
  7224                           
  7225                           ;doprnt.c: 657: goto alldone;
  7226                           
  7227                           ;doprnt.c: 656: case 0:
  7228                           
  7229                           
  7230                           ;doprnt.c: 662: flag |= 0x10;
  7231  0113  164A               	bsf	sprintf@flag,4
  7232                           
  7233                           ;doprnt.c: 663: goto loop;
  7234  0114  291A               	goto	l3971
  7235  0115                     l3967:	
  7236                           ;doprnt.c: 836: case 'u':
  7237                           
  7238                           ;doprnt.c: 832: continue;
  7239                           
  7240                           ;doprnt.c: 821: default:
  7241                           
  7242                           
  7243                           ;doprnt.c: 837: flag |= 0xC0;
  7244  0115  30C0               	movlw	192
  7245  0116  00FF               	movwf	127
  7246  0117  087F               	movf	127,w
  7247  0118  04CA               	iorwf	sprintf@flag,f
  7248                           
  7249                           ;doprnt.c: 841: }
  7250                           
  7251                           ;doprnt.c: 838: break;
  7252  0119  2932               	goto	l524
  7253  011A                     l3971:	
  7254  011A  0020               	movlb	0	; select bank0
  7255  011B  083D               	movf	sprintf@f+1,w
  7256  011C  00FF               	movwf	127
  7257  011D  083C               	movf	sprintf@f,w
  7258  011E  00FE               	movwf	126
  7259  011F  0ABC               	incf	sprintf@f,f
  7260  0120  1903               	skipnz
  7261  0121  0ABD               	incf	sprintf@f+1,f
  7262  0122  087E               	movf	126,w
  7263  0123  0084               	movwf	4
  7264  0124  087F               	movf	127,w
  7265  0125  0085               	movwf	5
  7266  0126  0800               	movf	0,w	;code access
  7267  0127  00D5               	movwf	sprintf@c
  7268                           
  7269                           ; Switch size 1, requested type "space"
  7270                           ; Number of cases is 3, Range of values is 0 to 117
  7271                           ; switch strategies available:
  7272                           ; Name         Instructions Cycles
  7273                           ; simple_byte           10     6 (average)
  7274                           ; direct_byte          242     6 (fixed)
  7275                           ; jumptable            260     6 (fixed)
  7276                           ;	Chosen strategy is simple_byte
  7277  0128  3A00               	xorlw	0	; case 0
  7278  0129  1903               	skipnz
  7279  012A  2A31               	goto	l4033
  7280  012B  3A6C               	xorlw	108	; case 108
  7281  012C  1903               	skipnz
  7282  012D  2913               	goto	l521
  7283  012E  3A19               	xorlw	25	; case 117
  7284  012F  1903               	skipnz
  7285  0130  2915               	goto	l3967
  7286  0131  2870               	goto	l4031
  7287  0132                     l524:	
  7288                           
  7289                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  7290  0132  1E4A               	btfss	sprintf@flag,4
  7291  0133  2941               	goto	l3977
  7292                           
  7293                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7294  0134  084B               	movf	sprintf@ap,w
  7295  0135  0084               	movwf	4
  7296  0136  0185               	clrf	5
  7297  0137  3F00               	moviw [0]fsr0
  7298  0138  00CC               	movwf	sprintf@val
  7299  0139  3F01               	moviw [1]fsr0
  7300  013A  00CD               	movwf	sprintf@val+1
  7301  013B  3F02               	moviw [2]fsr0
  7302  013C  00CE               	movwf	sprintf@val+2
  7303  013D  3F03               	moviw [3]fsr0
  7304  013E  00CF               	movwf	sprintf@val+3
  7305  013F  3004               	movlw	4
  7306  0140  294F               	goto	L1
  7307  0141                     l3977:	
  7308                           
  7309                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  7310  0141  084B               	movf	sprintf@ap,w
  7311  0142  0084               	movwf	4
  7312  0143  0185               	clrf	5
  7313  0144  3F00               	moviw [0]fsr0
  7314  0145  00FE               	movwf	126
  7315  0146  3F01               	moviw [1]fsr0
  7316  0147  00FF               	movwf	127
  7317  0148  087E               	movf	126,w
  7318  0149  00CC               	movwf	sprintf@val
  7319  014A  087F               	movf	127,w
  7320  014B  00CD               	movwf	sprintf@val+1
  7321  014C  01CE               	clrf	sprintf@val+2
  7322  014D  01CF               	clrf	sprintf@val+3
  7323  014E  3002               	movlw	2
  7324  014F                     L1:	
  7325  014F  00FF               	movwf	127
  7326  0150  087F               	movf	127,w
  7327  0151  07CB               	addwf	sprintf@ap,f
  7328                           
  7329                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  7330  0152  0853               	movf	sprintf@prec,w
  7331  0153  0454               	iorwf	sprintf@prec+1,w
  7332  0154  1D03               	btfss	3,2
  7333  0155  2960               	goto	l3987
  7334  0156  084F               	movf	sprintf@val+3,w
  7335  0157  044E               	iorwf	sprintf@val+2,w
  7336  0158  044D               	iorwf	sprintf@val+1,w
  7337  0159  044C               	iorwf	sprintf@val,w
  7338  015A  1D03               	skipz
  7339  015B  2960               	goto	l3987
  7340                           
  7341                           ;doprnt.c: 1310: prec++;
  7342  015C  3001               	movlw	1
  7343  015D  07D3               	addwf	sprintf@prec,f
  7344  015E  3000               	movlw	0
  7345  015F  3DD4               	addwfc	sprintf@prec+1,f
  7346  0160                     l3987:	
  7347                           
  7348                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7349  0160  01D5               	clrf	sprintf@c
  7350  0161  0AD5               	incf	sprintf@c,f
  7351  0162  300A               	movlw	10
  7352  0163  0655               	xorwf	sprintf@c,w
  7353  0164  1903               	btfsc	3,2
  7354  0165  2993               	goto	l4001
  7355  0166                     l3993:	
  7356                           
  7357                           ;doprnt.c: 1325: if(val < dpowers[c])
  7358  0166  0855               	movf	sprintf@c,w
  7359  0167  00FE               	movwf	126
  7360  0168  01FF               	clrf	127
  7361  0169  35FE               	lslf	126,f
  7362  016A  0DFF               	rlf	127,f
  7363  016B  35FE               	lslf	126,f
  7364  016C  0DFF               	rlf	127,f
  7365  016D  3000               	movlw	low (_dpowers| (0+32768))
  7366  016E  077E               	addwf	126,w
  7367  016F  0084               	movwf	4
  7368  0170  3090               	movlw	high (_dpowers| (0+32768))
  7369  0171  3D7F               	addwfc	127,w
  7370  0172  0085               	movwf	5
  7371  0173  3F00               	moviw [0]fsr0
  7372  0174  00C6               	movwf	??_sprintf
  7373  0175  3F01               	moviw [1]fsr0
  7374  0176  00C7               	movwf	??_sprintf+1
  7375  0177  3F02               	moviw [2]fsr0
  7376  0178  00C8               	movwf	??_sprintf+2
  7377  0179  3F03               	moviw [3]fsr0
  7378  017A  00C9               	movwf	??_sprintf+3
  7379  017B  0849               	movf	??_sprintf+3,w
  7380  017C  024F               	subwf	sprintf@val+3,w
  7381  017D  1D03               	skipz
  7382  017E  2989               	goto	u4365
  7383  017F  0848               	movf	??_sprintf+2,w
  7384  0180  024E               	subwf	sprintf@val+2,w
  7385  0181  1D03               	skipz
  7386  0182  2989               	goto	u4365
  7387  0183  0847               	movf	??_sprintf+1,w
  7388  0184  024D               	subwf	sprintf@val+1,w
  7389  0185  1D03               	skipz
  7390  0186  2989               	goto	u4365
  7391  0187  0846               	movf	??_sprintf,w
  7392  0188  024C               	subwf	sprintf@val,w
  7393  0189                     u4365:	
  7394  0189  1C03               	btfss	3,0
  7395  018A  2993               	goto	l4001
  7396                           
  7397                           ;doprnt.c: 1326: break;
  7398  018B  3001               	movlw	1
  7399  018C  00FF               	movwf	127
  7400  018D  087F               	movf	127,w
  7401  018E  07D5               	addwf	sprintf@c,f
  7402  018F  300A               	movlw	10
  7403  0190  0655               	xorwf	sprintf@c,w
  7404  0191  1D03               	btfss	3,2
  7405  0192  2966               	goto	l3993
  7406  0193                     l4001:	
  7407                           
  7408                           ;doprnt.c: 1358: if(c < prec)
  7409  0193  0854               	movf	sprintf@prec+1,w
  7410  0194  3A80               	xorlw	128
  7411  0195  3C80               	sublw	128
  7412  0196  1D03               	skipz
  7413  0197  299A               	goto	u4385
  7414  0198  0853               	movf	sprintf@prec,w
  7415  0199  0255               	subwf	sprintf@c,w
  7416  019A                     u4385:	
  7417  019A  1803               	skipnc
  7418  019B  29A2               	goto	l4005
  7419                           
  7420                           ;doprnt.c: 1359: c = prec;
  7421  019C  0020               	movlb	0	; select bank0
  7422  019D  0853               	movf	sprintf@prec,w
  7423  019E  00FF               	movwf	127
  7424  019F  087F               	movf	127,w
  7425  01A0  00D5               	movwf	sprintf@c
  7426  01A1  29B6               	goto	l4009
  7427  01A2                     l4005:	
  7428                           
  7429                           ;doprnt.c: 1360: else if(prec < c)
  7430  01A2  0020               	movlb	0	; select bank0
  7431  01A3  0854               	movf	sprintf@prec+1,w
  7432  01A4  3A80               	xorlw	128
  7433  01A5  00C6               	movwf	??_sprintf
  7434  01A6  3080               	movlw	128
  7435  01A7  0246               	subwf	??_sprintf,w
  7436  01A8  1D03               	skipz
  7437  01A9  29AC               	goto	u4395
  7438  01AA  0855               	movf	sprintf@c,w
  7439  01AB  0253               	subwf	sprintf@prec,w
  7440  01AC                     u4395:	
  7441  01AC  1803               	skipnc
  7442  01AD  29B6               	goto	l4009
  7443                           
  7444                           ;doprnt.c: 1361: prec = c;
  7445  01AE  0020               	movlb	0	; select bank0
  7446  01AF  0855               	movf	sprintf@c,w
  7447  01B0  00FE               	movwf	126
  7448  01B1  01FF               	clrf	127
  7449  01B2  087E               	movf	126,w
  7450  01B3  00D3               	movwf	sprintf@prec
  7451  01B4  087F               	movf	127,w
  7452  01B5  00D4               	movwf	sprintf@prec+1
  7453  01B6                     l4009:	
  7454                           
  7455                           ;doprnt.c: 1400: if(width > c)
  7456  01B6  0020               	movlb	0	; select bank0
  7457  01B7  0852               	movf	sprintf@width+1,w
  7458  01B8  3A80               	xorlw	128
  7459  01B9  3C80               	sublw	128
  7460  01BA  1D03               	skipz
  7461  01BB  29BE               	goto	u4405
  7462  01BC  0851               	movf	sprintf@width,w
  7463  01BD  0255               	subwf	sprintf@c,w
  7464  01BE                     u4405:	
  7465  01BE  1803               	skipnc
  7466  01BF  29C9               	goto	l4013
  7467                           
  7468                           ;doprnt.c: 1401: width -= c;
  7469  01C0  0020               	movlb	0	; select bank0
  7470  01C1  0855               	movf	sprintf@c,w
  7471  01C2  00FE               	movwf	126
  7472  01C3  01FF               	clrf	127
  7473  01C4  087E               	movf	126,w
  7474  01C5  02D1               	subwf	sprintf@width,f
  7475  01C6  087F               	movf	127,w
  7476  01C7  3BD2               	subwfb	sprintf@width+1,f
  7477  01C8  29CC               	goto	l4015
  7478  01C9                     l4013:	
  7479                           
  7480                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  7481  01C9  0020               	movlb	0	; select bank0
  7482  01CA  01D1               	clrf	sprintf@width
  7483  01CB  01D2               	clrf	sprintf@width+1
  7484  01CC                     l4015:	
  7485                           
  7486                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  7487  01CC  0851               	movf	sprintf@width,w
  7488  01CD  0452               	iorwf	sprintf@width+1,w
  7489  01CE  1903               	btfsc	3,2
  7490  01CF  2A26               	goto	l4029
  7491                           
  7492                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  7493                           
  7494                           ;doprnt.c: 1448: do
  7495  01D0  3020               	movlw	32
  7496  01D1  00FF               	movwf	127
  7497  01D2  0850               	movf	sprintf@sp,w
  7498  01D3  0084               	movwf	4
  7499  01D4  3001               	movlw	1	; select bank2/3
  7500  01D5  0085               	movwf	5
  7501  01D6  087F               	movf	127,w
  7502  01D7  0080               	movwf	0
  7503  01D8  3001               	movlw	1
  7504  01D9  00FF               	movwf	127
  7505  01DA  087F               	movf	127,w
  7506  01DB  07D0               	addwf	sprintf@sp,f
  7507                           
  7508                           ;doprnt.c: 1450: while(--width);
  7509  01DC  30FF               	movlw	255
  7510  01DD  07D1               	addwf	sprintf@width,f
  7511  01DE  30FF               	movlw	255
  7512  01DF  3DD2               	addwfc	sprintf@width+1,f
  7513  01E0  29CC               	goto	l4015
  7514  01E1                     l4023:	
  7515                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  7516                           
  7517                           
  7518                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  7519  01E1  3000               	movlw	0
  7520  01E2  00B7               	movwf	___llmod@divisor+3
  7521  01E3  3000               	movlw	0
  7522  01E4  00B6               	movwf	___llmod@divisor+2
  7523  01E5  3000               	movlw	0
  7524  01E6  00B5               	movwf	___llmod@divisor+1
  7525  01E7  300A               	movlw	10
  7526  01E8  00B4               	movwf	___llmod@divisor
  7527  01E9  0854               	movf	sprintf@prec+1,w
  7528  01EA  0085               	movwf	5
  7529  01EB  0853               	movf	sprintf@prec,w
  7530  01EC  0084               	movwf	4
  7531  01ED  3584               	lslf	4,f
  7532  01EE  0D85               	rlf	5,f
  7533  01EF  3584               	lslf	4,f
  7534  01F0  0D85               	rlf	5,f
  7535  01F1  3000               	movlw	low (_dpowers| (0+32768))
  7536  01F2  0784               	addwf	4,f
  7537  01F3  3090               	movlw	high (_dpowers| (0+32768))
  7538  01F4  3D85               	addwfc	5,f
  7539  01F5  3F00               	moviw [0]fsr0
  7540  01F6  00A7               	movwf	___lldiv@divisor
  7541  01F7  3F01               	moviw [1]fsr0
  7542  01F8  00A8               	movwf	___lldiv@divisor+1
  7543  01F9  3F02               	moviw [2]fsr0
  7544  01FA  00A9               	movwf	___lldiv@divisor+2
  7545  01FB  3F03               	moviw [3]fsr0
  7546  01FC  00AA               	movwf	___lldiv@divisor+3
  7547  01FD  084F               	movf	sprintf@val+3,w
  7548  01FE  00AE               	movwf	___lldiv@dividend+3
  7549  01FF  084E               	movf	sprintf@val+2,w
  7550  0200  00AD               	movwf	___lldiv@dividend+2
  7551  0201  084D               	movf	sprintf@val+1,w
  7552  0202  00AC               	movwf	___lldiv@dividend+1
  7553  0203  084C               	movf	sprintf@val,w
  7554  0204  00AB               	movwf	___lldiv@dividend
  7555  0205  318C  2454  3180   	fcall	___lldiv
  7556  0208  0020               	movlb	0	; select bank0
  7557  0209  082A               	movf	?___lldiv+3,w
  7558  020A  00BB               	movwf	___llmod@dividend+3
  7559  020B  0829               	movf	?___lldiv+2,w
  7560  020C  00BA               	movwf	___llmod@dividend+2
  7561  020D  0828               	movf	?___lldiv+1,w
  7562  020E  00B9               	movwf	___llmod@dividend+1
  7563  020F  0827               	movf	?___lldiv,w
  7564  0210  00B8               	movwf	___llmod@dividend
  7565  0211  318B  233B  3180   	fcall	___llmod
  7566  0214  0020               	movlb	0	; select bank0
  7567  0215  0834               	movf	?___llmod,w
  7568  0216  3E30               	addlw	48
  7569  0217  00FF               	movwf	127
  7570  0218  087F               	movf	127,w
  7571  0219  00D5               	movwf	sprintf@c
  7572                           
  7573                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7574  021A  0855               	movf	sprintf@c,w
  7575  021B  00FF               	movwf	127
  7576  021C  0850               	movf	sprintf@sp,w
  7577  021D  0084               	movwf	4
  7578  021E  3001               	movlw	1	; select bank2/3
  7579  021F  0085               	movwf	5
  7580  0220  087F               	movf	127,w
  7581  0221  0080               	movwf	0
  7582  0222  3001               	movlw	1
  7583  0223  00FF               	movwf	127
  7584  0224  087F               	movf	127,w
  7585  0225  07D0               	addwf	sprintf@sp,f
  7586  0226                     l4029:	
  7587  0226  30FF               	movlw	255
  7588  0227  07D3               	addwf	sprintf@prec,f
  7589  0228  30FF               	movlw	255
  7590  0229  3DD4               	addwfc	sprintf@prec+1,f
  7591  022A  0A53               	incf	sprintf@prec,w
  7592  022B  1D03               	skipz
  7593  022C  29E1               	goto	l4023
  7594  022D  0A54               	incf	sprintf@prec+1,w
  7595  022E  1903               	btfsc	3,2
  7596  022F  2870               	goto	l4031
  7597  0230  29E1               	goto	l4023
  7598  0231                     l4033:	
  7599                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7600                           
  7601                           
  7602                           ;doprnt.c: 1557: *sp = 0;
  7603  0231  0850               	movf	sprintf@sp,w
  7604  0232  0084               	movwf	4
  7605  0233  3001               	movlw	1	; select bank2/3
  7606  0234  0085               	movwf	5
  7607  0235  0180               	clrf	0
  7608  0236  0008               	return
  7609  0237                     __end_of_sprintf:	
  7610                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7611                           
  7612                           
  7613                           	psect	text26
  7614  17E3                     __ptext26:	
  7615 ;; *************** function _isdigit *****************
  7616 ;; Defined at:
  7617 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7618 ;; Parameters:    Size  Location     Type
  7619 ;;  c               1    wreg     unsigned char 
  7620 ;; Auto vars:     Size  Location     Type
  7621 ;;  c               1    1[COMMON] unsigned char 
  7622 ;; Return value:  Size  Location     Type
  7623 ;;		None               void
  7624 ;; Registers used:
  7625 ;;		wreg, status,2, status,0
  7626 ;; Tracked objects:
  7627 ;;		On entry : 0/0
  7628 ;;		On exit  : 0/0
  7629 ;;		Unchanged: 0/0
  7630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7632 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7634 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7635 ;;Total ram usage:        2 bytes
  7636 ;; Hardware stack levels used:    1
  7637 ;; Hardware stack levels required when called:    7
  7638 ;; This function calls:
  7639 ;;		Nothing
  7640 ;; This function is called by:
  7641 ;;		_sprintf
  7642 ;; This function uses a non-reentrant model
  7643 ;;
  7644                           
  7645                           
  7646                           ;psect for function _isdigit
  7647  17E3                     _isdigit:	
  7648                           
  7649                           ;incstack = 0
  7650                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7651                           ;isdigit@c stored from wreg
  7652  17E3  00F1               	movwf	isdigit@c
  7653  17E4  01F0               	clrf	_isdigit$2016
  7654  17E5  303A               	movlw	58
  7655  17E6  0271               	subwf	isdigit@c,w
  7656  17E7  1803               	skipnc
  7657  17E8  2FEF               	goto	l3719
  7658  17E9  3030               	movlw	48
  7659  17EA  0271               	subwf	isdigit@c,w
  7660  17EB  1C03               	skipc
  7661  17EC  2FEF               	goto	l3719
  7662  17ED  01F0               	clrf	_isdigit$2016
  7663  17EE  0AF0               	incf	_isdigit$2016,f
  7664  17EF                     l3719:	
  7665  17EF  0C70               	rrf	_isdigit$2016,w
  7666  17F0  0008               	return
  7667  17F1                     __end_of_isdigit:	
  7668                           
  7669                           	psect	text27
  7670  0891                     __ptext27:	
  7671 ;; *************** function ___wmul *****************
  7672 ;; Defined at:
  7673 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7674 ;; Parameters:    Size  Location     Type
  7675 ;;  multiplier      2    0[COMMON] unsigned int 
  7676 ;;  multiplicand    2    2[COMMON] unsigned int 
  7677 ;; Auto vars:     Size  Location     Type
  7678 ;;  product         2    7[BANK0 ] unsigned int 
  7679 ;; Return value:  Size  Location     Type
  7680 ;;                  2    0[COMMON] unsigned int 
  7681 ;; Registers used:
  7682 ;;		wreg, status,2, status,0
  7683 ;; Tracked objects:
  7684 ;;		On entry : 0/0
  7685 ;;		On exit  : 0/0
  7686 ;;		Unchanged: 0/0
  7687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7688 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7689 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7691 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7692 ;;Total ram usage:        6 bytes
  7693 ;; Hardware stack levels used:    1
  7694 ;; Hardware stack levels required when called:    7
  7695 ;; This function calls:
  7696 ;;		Nothing
  7697 ;; This function is called by:
  7698 ;;		_sprintf
  7699 ;; This function uses a non-reentrant model
  7700 ;;
  7701                           
  7702                           
  7703                           ;psect for function ___wmul
  7704  0891                     ___wmul:	
  7705                           
  7706                           ;incstack = 0
  7707                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7708  0891  0020               	movlb	0	; select bank0
  7709  0892  01A7               	clrf	___wmul@product
  7710  0893  01A8               	clrf	___wmul@product+1
  7711  0894                     l3725:	
  7712  0894  1C70               	btfss	___wmul@multiplier,0
  7713  0895  289B               	goto	l547
  7714  0896  0872               	movf	___wmul@multiplicand,w
  7715  0897  0020               	movlb	0	; select bank0
  7716  0898  07A7               	addwf	___wmul@product,f
  7717  0899  0873               	movf	___wmul@multiplicand+1,w
  7718  089A  3DA8               	addwfc	___wmul@product+1,f
  7719  089B                     l547:	
  7720  089B  3001               	movlw	1
  7721  089C                     u3745:	
  7722  089C  35F2               	lslf	___wmul@multiplicand,f
  7723  089D  0DF3               	rlf	___wmul@multiplicand+1,f
  7724  089E  0B89               	decfsz	9,f
  7725  089F  289C               	goto	u3745
  7726  08A0  3001               	movlw	1
  7727  08A1                     u3755:	
  7728  08A1  36F1               	lsrf	___wmul@multiplier+1,f
  7729  08A2  0CF0               	rrf	___wmul@multiplier,f
  7730  08A3  0B89               	decfsz	9,f
  7731  08A4  28A1               	goto	u3755
  7732  08A5  0870               	movf	___wmul@multiplier,w
  7733  08A6  0471               	iorwf	___wmul@multiplier+1,w
  7734  08A7  1D03               	btfss	3,2
  7735  08A8  2894               	goto	l3725
  7736  08A9  0020               	movlb	0	; select bank0
  7737  08AA  0828               	movf	___wmul@product+1,w
  7738  08AB  00F1               	movwf	?___wmul+1
  7739  08AC  0827               	movf	___wmul@product,w
  7740  08AD  00F0               	movwf	?___wmul
  7741  08AE  0008               	return
  7742  08AF                     __end_of___wmul:	
  7743                           
  7744                           	psect	text28
  7745  0B3B                     __ptext28:	
  7746 ;; *************** function ___llmod *****************
  7747 ;; Defined at:
  7748 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  7749 ;; Parameters:    Size  Location     Type
  7750 ;;  divisor         4   20[BANK0 ] unsigned long 
  7751 ;;  dividend        4   24[BANK0 ] unsigned long 
  7752 ;; Auto vars:     Size  Location     Type
  7753 ;;  counter         1    0[COMMON] unsigned char 
  7754 ;; Return value:  Size  Location     Type
  7755 ;;                  4   20[BANK0 ] unsigned long 
  7756 ;; Registers used:
  7757 ;;		wreg, status,2, status,0, btemp+11
  7758 ;; Tracked objects:
  7759 ;;		On entry : 0/0
  7760 ;;		On exit  : 0/0
  7761 ;;		Unchanged: 0/0
  7762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7763 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7764 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7766 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7767 ;;Total ram usage:        9 bytes
  7768 ;; Hardware stack levels used:    1
  7769 ;; Hardware stack levels required when called:    7
  7770 ;; This function calls:
  7771 ;;		Nothing
  7772 ;; This function is called by:
  7773 ;;		_sprintf
  7774 ;; This function uses a non-reentrant model
  7775 ;;
  7776                           
  7777                           
  7778                           ;psect for function ___llmod
  7779  0B3B                     ___llmod:	
  7780                           
  7781                           ;incstack = 0
  7782                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+11]
  7783  0B3B  0020               	movlb	0	; select bank0
  7784  0B3C  0837               	movf	___llmod@divisor+3,w
  7785  0B3D  0436               	iorwf	___llmod@divisor+2,w
  7786  0B3E  0435               	iorwf	___llmod@divisor+1,w
  7787  0B3F  0434               	iorwf	___llmod@divisor,w
  7788  0B40  1903               	skipnz
  7789  0B41  2B75               	goto	l3857
  7790  0B42  01F0               	clrf	___llmod@counter
  7791  0B43  0AF0               	incf	___llmod@counter,f
  7792  0B44                     l3847:	
  7793  0B44  1BB7               	btfsc	___llmod@divisor+3,7
  7794  0B45  2B52               	goto	l3849
  7795  0B46  3001               	movlw	1
  7796  0B47                     u4085:	
  7797  0B47  35B4               	lslf	___llmod@divisor,f
  7798  0B48  0DB5               	rlf	___llmod@divisor+1,f
  7799  0B49  0DB6               	rlf	___llmod@divisor+2,f
  7800  0B4A  0DB7               	rlf	___llmod@divisor+3,f
  7801  0B4B  0B89               	decfsz	9,f
  7802  0B4C  2B47               	goto	u4085
  7803  0B4D  3001               	movlw	1
  7804  0B4E  00FF               	movwf	127
  7805  0B4F  087F               	movf	127,w
  7806  0B50  07F0               	addwf	___llmod@counter,f
  7807  0B51  2B44               	goto	l3847
  7808  0B52                     l3849:	
  7809  0B52  0837               	movf	___llmod@divisor+3,w
  7810  0B53  023B               	subwf	___llmod@dividend+3,w
  7811  0B54  1D03               	skipz
  7812  0B55  2B60               	goto	u4105
  7813  0B56  0836               	movf	___llmod@divisor+2,w
  7814  0B57  023A               	subwf	___llmod@dividend+2,w
  7815  0B58  1D03               	skipz
  7816  0B59  2B60               	goto	u4105
  7817  0B5A  0835               	movf	___llmod@divisor+1,w
  7818  0B5B  0239               	subwf	___llmod@dividend+1,w
  7819  0B5C  1D03               	skipz
  7820  0B5D  2B60               	goto	u4105
  7821  0B5E  0834               	movf	___llmod@divisor,w
  7822  0B5F  0238               	subwf	___llmod@dividend,w
  7823  0B60                     u4105:	
  7824  0B60  1C03               	skipc
  7825  0B61  2B6A               	goto	l3853
  7826  0B62  0834               	movf	___llmod@divisor,w
  7827  0B63  02B8               	subwf	___llmod@dividend,f
  7828  0B64  0835               	movf	___llmod@divisor+1,w
  7829  0B65  3BB9               	subwfb	___llmod@dividend+1,f
  7830  0B66  0836               	movf	___llmod@divisor+2,w
  7831  0B67  3BBA               	subwfb	___llmod@dividend+2,f
  7832  0B68  0837               	movf	___llmod@divisor+3,w
  7833  0B69  3BBB               	subwfb	___llmod@dividend+3,f
  7834  0B6A                     l3853:	
  7835  0B6A  3001               	movlw	1
  7836  0B6B                     u4115:	
  7837  0B6B  36B7               	lsrf	___llmod@divisor+3,f
  7838  0B6C  0CB6               	rrf	___llmod@divisor+2,f
  7839  0B6D  0CB5               	rrf	___llmod@divisor+1,f
  7840  0B6E  0CB4               	rrf	___llmod@divisor,f
  7841  0B6F  0B89               	decfsz	9,f
  7842  0B70  2B6B               	goto	u4115
  7843  0B71  3001               	movlw	1
  7844  0B72  02F0               	subwf	___llmod@counter,f
  7845  0B73  1D03               	btfss	3,2
  7846  0B74  2B52               	goto	l3849
  7847  0B75                     l3857:	
  7848  0B75  083B               	movf	___llmod@dividend+3,w
  7849  0B76  00B7               	movwf	?___llmod+3
  7850  0B77  083A               	movf	___llmod@dividend+2,w
  7851  0B78  00B6               	movwf	?___llmod+2
  7852  0B79  0839               	movf	___llmod@dividend+1,w
  7853  0B7A  00B5               	movwf	?___llmod+1
  7854  0B7B  0838               	movf	___llmod@dividend,w
  7855  0B7C  00B4               	movwf	?___llmod
  7856  0B7D  0008               	return
  7857  0B7E                     __end_of___llmod:	
  7858                           
  7859                           	psect	text29
  7860  0C54                     __ptext29:	
  7861 ;; *************** function ___lldiv *****************
  7862 ;; Defined at:
  7863 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  7864 ;; Parameters:    Size  Location     Type
  7865 ;;  divisor         4    7[BANK0 ] unsigned long 
  7866 ;;  dividend        4   11[BANK0 ] unsigned long 
  7867 ;; Auto vars:     Size  Location     Type
  7868 ;;  quotient        4   15[BANK0 ] unsigned long 
  7869 ;;  counter         1   19[BANK0 ] unsigned char 
  7870 ;; Return value:  Size  Location     Type
  7871 ;;                  4    7[BANK0 ] unsigned long 
  7872 ;; Registers used:
  7873 ;;		wreg, status,2, status,0, btemp+11
  7874 ;; Tracked objects:
  7875 ;;		On entry : 0/0
  7876 ;;		On exit  : 0/0
  7877 ;;		Unchanged: 0/0
  7878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7879 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7880 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7882 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7883 ;;Total ram usage:       13 bytes
  7884 ;; Hardware stack levels used:    1
  7885 ;; Hardware stack levels required when called:    7
  7886 ;; This function calls:
  7887 ;;		Nothing
  7888 ;; This function is called by:
  7889 ;;		_sprintf
  7890 ;; This function uses a non-reentrant model
  7891 ;;
  7892                           
  7893                           
  7894                           ;psect for function ___lldiv
  7895  0C54                     ___lldiv:	
  7896                           
  7897                           ;incstack = 0
  7898                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+11]
  7899  0C54  3000               	movlw	0
  7900  0C55  0020               	movlb	0	; select bank0
  7901  0C56  00B2               	movwf	___lldiv@quotient+3
  7902  0C57  3000               	movlw	0
  7903  0C58  00B1               	movwf	___lldiv@quotient+2
  7904  0C59  3000               	movlw	0
  7905  0C5A  00B0               	movwf	___lldiv@quotient+1
  7906  0C5B  3000               	movlw	0
  7907  0C5C  00AF               	movwf	___lldiv@quotient
  7908  0C5D  082A               	movf	___lldiv@divisor+3,w
  7909  0C5E  0429               	iorwf	___lldiv@divisor+2,w
  7910  0C5F  0428               	iorwf	___lldiv@divisor+1,w
  7911  0C60  0427               	iorwf	___lldiv@divisor,w
  7912  0C61  1903               	skipnz
  7913  0C62  2C9E               	goto	l3759
  7914  0C63  01B3               	clrf	___lldiv@counter
  7915  0C64  0AB3               	incf	___lldiv@counter,f
  7916  0C65                     l3745:	
  7917  0C65  1BAA               	btfsc	___lldiv@divisor+3,7
  7918  0C66  2C73               	goto	l3747
  7919  0C67  3001               	movlw	1
  7920  0C68                     u3785:	
  7921  0C68  35A7               	lslf	___lldiv@divisor,f
  7922  0C69  0DA8               	rlf	___lldiv@divisor+1,f
  7923  0C6A  0DA9               	rlf	___lldiv@divisor+2,f
  7924  0C6B  0DAA               	rlf	___lldiv@divisor+3,f
  7925  0C6C  0B89               	decfsz	9,f
  7926  0C6D  2C68               	goto	u3785
  7927  0C6E  3001               	movlw	1
  7928  0C6F  00FF               	movwf	127
  7929  0C70  087F               	movf	127,w
  7930  0C71  07B3               	addwf	___lldiv@counter,f
  7931  0C72  2C65               	goto	l3745
  7932  0C73                     l3747:	
  7933  0C73  3001               	movlw	1
  7934  0C74                     u3805:	
  7935  0C74  35AF               	lslf	___lldiv@quotient,f
  7936  0C75  0DB0               	rlf	___lldiv@quotient+1,f
  7937  0C76  0DB1               	rlf	___lldiv@quotient+2,f
  7938  0C77  0DB2               	rlf	___lldiv@quotient+3,f
  7939  0C78  0B89               	decfsz	9,f
  7940  0C79  2C74               	goto	u3805
  7941  0C7A  082A               	movf	___lldiv@divisor+3,w
  7942  0C7B  022E               	subwf	___lldiv@dividend+3,w
  7943  0C7C  1D03               	skipz
  7944  0C7D  2C88               	goto	u3815
  7945  0C7E  0829               	movf	___lldiv@divisor+2,w
  7946  0C7F  022D               	subwf	___lldiv@dividend+2,w
  7947  0C80  1D03               	skipz
  7948  0C81  2C88               	goto	u3815
  7949  0C82  0828               	movf	___lldiv@divisor+1,w
  7950  0C83  022C               	subwf	___lldiv@dividend+1,w
  7951  0C84  1D03               	skipz
  7952  0C85  2C88               	goto	u3815
  7953  0C86  0827               	movf	___lldiv@divisor,w
  7954  0C87  022B               	subwf	___lldiv@dividend,w
  7955  0C88                     u3815:	
  7956  0C88  1C03               	skipc
  7957  0C89  2C93               	goto	l3755
  7958  0C8A  0827               	movf	___lldiv@divisor,w
  7959  0C8B  02AB               	subwf	___lldiv@dividend,f
  7960  0C8C  0828               	movf	___lldiv@divisor+1,w
  7961  0C8D  3BAC               	subwfb	___lldiv@dividend+1,f
  7962  0C8E  0829               	movf	___lldiv@divisor+2,w
  7963  0C8F  3BAD               	subwfb	___lldiv@dividend+2,f
  7964  0C90  082A               	movf	___lldiv@divisor+3,w
  7965  0C91  3BAE               	subwfb	___lldiv@dividend+3,f
  7966  0C92  142F               	bsf	___lldiv@quotient,0
  7967  0C93                     l3755:	
  7968  0C93  3001               	movlw	1
  7969  0C94                     u3825:	
  7970  0C94  36AA               	lsrf	___lldiv@divisor+3,f
  7971  0C95  0CA9               	rrf	___lldiv@divisor+2,f
  7972  0C96  0CA8               	rrf	___lldiv@divisor+1,f
  7973  0C97  0CA7               	rrf	___lldiv@divisor,f
  7974  0C98  0B89               	decfsz	9,f
  7975  0C99  2C94               	goto	u3825
  7976  0C9A  3001               	movlw	1
  7977  0C9B  02B3               	subwf	___lldiv@counter,f
  7978  0C9C  1D03               	btfss	3,2
  7979  0C9D  2C73               	goto	l3747
  7980  0C9E                     l3759:	
  7981  0C9E  0832               	movf	___lldiv@quotient+3,w
  7982  0C9F  00AA               	movwf	?___lldiv+3
  7983  0CA0  0831               	movf	___lldiv@quotient+2,w
  7984  0CA1  00A9               	movwf	?___lldiv+2
  7985  0CA2  0830               	movf	___lldiv@quotient+1,w
  7986  0CA3  00A8               	movwf	?___lldiv+1
  7987  0CA4  082F               	movf	___lldiv@quotient,w
  7988  0CA5  00A7               	movwf	?___lldiv
  7989  0CA6  0008               	return
  7990  0CA7                     __end_of___lldiv:	
  7991                           
  7992                           	psect	text30
  7993  097E                     __ptext30:	
  7994 ;; *************** function ___lltoft *****************
  7995 ;; Defined at:
  7996 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  7997 ;; Parameters:    Size  Location     Type
  7998 ;;  c               4    0[COMMON] unsigned long 
  7999 ;; Auto vars:     Size  Location     Type
  8000 ;;  exp             1   12[BANK0 ] unsigned char 
  8001 ;; Return value:  Size  Location     Type
  8002 ;;                  3    0[COMMON] float 
  8003 ;; Registers used:
  8004 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8005 ;; Tracked objects:
  8006 ;;		On entry : 0/0
  8007 ;;		On exit  : 0/0
  8008 ;;		Unchanged: 0/0
  8009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8010 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8011 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8013 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8014 ;;Total ram usage:        5 bytes
  8015 ;; Hardware stack levels used:    1
  8016 ;; Hardware stack levels required when called:    8
  8017 ;; This function calls:
  8018 ;;		___ftpack
  8019 ;; This function is called by:
  8020 ;;		_ftoa
  8021 ;; This function uses a non-reentrant model
  8022 ;;
  8023                           
  8024                           
  8025                           ;psect for function ___lltoft
  8026  097E                     ___lltoft:	
  8027                           
  8028                           ;incstack = 0
  8029                           ; Regs used in ___lltoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8030  097E  308E               	movlw	142
  8031  097F  00FF               	movwf	127
  8032  0980  087F               	movf	127,w
  8033  0981  0020               	movlb	0	; select bank0
  8034  0982  00AC               	movwf	___lltoft@exp
  8035  0983                     l4193:	
  8036  0983  30FF               	movlw	255
  8037  0984  0573               	andwf	___lltoft@c+3,w
  8038  0985  1903               	btfsc	3,2
  8039  0986  2993               	goto	l4195
  8040  0987  3001               	movlw	1
  8041  0988                     u4745:	
  8042  0988  36F3               	lsrf	___lltoft@c+3,f
  8043  0989  0CF2               	rrf	___lltoft@c+2,f
  8044  098A  0CF1               	rrf	___lltoft@c+1,f
  8045  098B  0CF0               	rrf	___lltoft@c,f
  8046  098C  0B89               	decfsz	9,f
  8047  098D  2988               	goto	u4745
  8048  098E  3001               	movlw	1
  8049  098F  00FF               	movwf	127
  8050  0990  087F               	movf	127,w
  8051  0991  07AC               	addwf	___lltoft@exp,f
  8052  0992  2983               	goto	l4193
  8053  0993                     l4195:	
  8054  0993  0870               	movf	___lltoft@c,w
  8055  0994  00A7               	movwf	___ftpack@arg
  8056  0995  0871               	movf	___lltoft@c+1,w
  8057  0996  00A8               	movwf	___ftpack@arg+1
  8058  0997  0872               	movf	___lltoft@c+2,w
  8059  0998  00A9               	movwf	___ftpack@arg+2
  8060  0999  082C               	movf	___lltoft@exp,w
  8061  099A  00FF               	movwf	127
  8062  099B  087F               	movf	127,w
  8063  099C  00AA               	movwf	___ftpack@exp
  8064  099D  01AB               	clrf	___ftpack@sign
  8065  099E  318C  24A7         	fcall	___ftpack
  8066  09A0  0020               	movlb	0	; select bank0
  8067  09A1  0827               	movf	?___ftpack,w
  8068  09A2  00F0               	movwf	?___lltoft
  8069  09A3  0828               	movf	?___ftpack+1,w
  8070  09A4  00F1               	movwf	?___lltoft+1
  8071  09A5  0829               	movf	?___ftpack+2,w
  8072  09A6  00F2               	movwf	?___lltoft+2
  8073  09A7  0008               	return
  8074  09A8                     __end_of___lltoft:	
  8075                           
  8076                           	psect	text31
  8077  0D91                     __ptext31:	
  8078 ;; *************** function ___fttol *****************
  8079 ;; Defined at:
  8080 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  8081 ;; Parameters:    Size  Location     Type
  8082 ;;  f1              3   57[BANK0 ] float 
  8083 ;; Auto vars:     Size  Location     Type
  8084 ;;  lval            4   62[BANK0 ] unsigned long 
  8085 ;;  exp1            1   66[BANK0 ] unsigned char 
  8086 ;;  sign1           1   61[BANK0 ] unsigned char 
  8087 ;; Return value:  Size  Location     Type
  8088 ;;                  4   57[BANK0 ] long 
  8089 ;; Registers used:
  8090 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8091 ;; Tracked objects:
  8092 ;;		On entry : 0/0
  8093 ;;		On exit  : 0/0
  8094 ;;		Unchanged: 0/0
  8095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8096 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8097 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8099 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8100 ;;Total ram usage:       10 bytes
  8101 ;; Hardware stack levels used:    1
  8102 ;; Hardware stack levels required when called:    7
  8103 ;; This function calls:
  8104 ;;		Nothing
  8105 ;; This function is called by:
  8106 ;;		_ftoa
  8107 ;; This function uses a non-reentrant model
  8108 ;;
  8109                           
  8110                           
  8111                           ;psect for function ___fttol
  8112  0D91                     ___fttol:	
  8113                           
  8114                           ;incstack = 0
  8115                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+9-btemp+11]
  8116  0D91  0020               	movlb	0	; select bank0
  8117  0D92  0859               	movf	___fttol@f1,w
  8118  0D93  00FD               	movwf	125
  8119  0D94  085A               	movf	___fttol@f1+1,w
  8120  0D95  00FE               	movwf	126
  8121  0D96  085B               	movf	___fttol@f1+2,w
  8122  0D97  00FF               	movwf	127
  8123  0D98  1003               	clrc
  8124  0D99  0D7E               	rlf	126,w
  8125  0D9A  0D7F               	rlf	127,w
  8126  0D9B  00FF               	movwf	127
  8127  0D9C  087F               	movf	127,w
  8128  0D9D  00E2               	movwf	___fttol@exp1
  8129  0D9E  0862               	movf	___fttol@exp1,w
  8130  0D9F  1D03               	btfss	3,2
  8131  0DA0  2DAA               	goto	l4149
  8132  0DA1  3000               	movlw	0
  8133  0DA2  00DC               	movwf	?___fttol+3
  8134  0DA3  3000               	movlw	0
  8135  0DA4  00DB               	movwf	?___fttol+2
  8136  0DA5  3000               	movlw	0
  8137  0DA6  00DA               	movwf	?___fttol+1
  8138  0DA7  3000               	movlw	0
  8139  0DA8  00D9               	movwf	?___fttol
  8140  0DA9  0008               	return
  8141  0DAA                     l4149:	
  8142  0DAA  0859               	movf	___fttol@f1,w
  8143  0DAB  00FD               	movwf	125
  8144  0DAC  085A               	movf	___fttol@f1+1,w
  8145  0DAD  00FE               	movwf	126
  8146  0DAE  085B               	movf	___fttol@f1+2,w
  8147  0DAF  00FF               	movwf	127
  8148  0DB0  3017               	movlw	23
  8149  0DB1                     u4655:	
  8150  0DB1  36FF               	lsrf	127,f
  8151  0DB2  0CFE               	rrf	126,f
  8152  0DB3  0CFD               	rrf	125,f
  8153  0DB4  0B89               	decfsz	9,f
  8154  0DB5  2DB1               	goto	u4655
  8155  0DB6  087D               	movf	125,w
  8156  0DB7  00FF               	movwf	127
  8157  0DB8  087F               	movf	127,w
  8158  0DB9  00DD               	movwf	___fttol@sign1
  8159  0DBA  17DA               	bsf	___fttol@f1+1,7
  8160  0DBB  30FF               	movlw	255
  8161  0DBC  05D9               	andwf	___fttol@f1,f
  8162  0DBD  30FF               	movlw	255
  8163  0DBE  05DA               	andwf	___fttol@f1+1,f
  8164  0DBF  3000               	movlw	0
  8165  0DC0  05DB               	andwf	___fttol@f1+2,f
  8166  0DC1  0859               	movf	___fttol@f1,w
  8167  0DC2  00DE               	movwf	___fttol@lval
  8168  0DC3  085A               	movf	___fttol@f1+1,w
  8169  0DC4  00DF               	movwf	___fttol@lval+1
  8170  0DC5  085B               	movf	___fttol@f1+2,w
  8171  0DC6  00E0               	movwf	___fttol@lval+2
  8172  0DC7  01E1               	clrf	___fttol@lval+3
  8173  0DC8  308E               	movlw	142
  8174  0DC9  02E2               	subwf	___fttol@exp1,f
  8175  0DCA  1FE2               	btfss	___fttol@exp1,7
  8176  0DCB  2DE8               	goto	l4171
  8177  0DCC  0862               	movf	___fttol@exp1,w
  8178  0DCD  3A80               	xorlw	128
  8179  0DCE  3E8F               	addlw	143
  8180  0DCF  1803               	skipnc
  8181  0DD0  2DDA               	goto	l4167
  8182  0DD1  3000               	movlw	0
  8183  0DD2  00DC               	movwf	?___fttol+3
  8184  0DD3  3000               	movlw	0
  8185  0DD4  00DB               	movwf	?___fttol+2
  8186  0DD5  3000               	movlw	0
  8187  0DD6  00DA               	movwf	?___fttol+1
  8188  0DD7  3000               	movlw	0
  8189  0DD8  00D9               	movwf	?___fttol
  8190  0DD9  0008               	return
  8191  0DDA                     l4167:	
  8192  0DDA  3001               	movlw	1
  8193  0DDB                     u4685:	
  8194  0DDB  36E1               	lsrf	___fttol@lval+3,f
  8195  0DDC  0CE0               	rrf	___fttol@lval+2,f
  8196  0DDD  0CDF               	rrf	___fttol@lval+1,f
  8197  0DDE  0CDE               	rrf	___fttol@lval,f
  8198  0DDF  0B89               	decfsz	9,f
  8199  0DE0  2DDB               	goto	u4685
  8200  0DE1  3001               	movlw	1
  8201  0DE2  00FF               	movwf	127
  8202  0DE3  087F               	movf	127,w
  8203  0DE4  07E2               	addwf	___fttol@exp1,f
  8204  0DE5  1903               	btfsc	3,2
  8205  0DE6  2E01               	goto	l4179
  8206  0DE7  2DDA               	goto	l4167
  8207  0DE8                     l4171:	
  8208  0DE8  3018               	movlw	24
  8209  0DE9  0262               	subwf	___fttol@exp1,w
  8210  0DEA  1C03               	skipc
  8211  0DEB  2DFE               	goto	l841
  8212  0DEC  3000               	movlw	0
  8213  0DED  00DC               	movwf	?___fttol+3
  8214  0DEE  3000               	movlw	0
  8215  0DEF  00DB               	movwf	?___fttol+2
  8216  0DF0  3000               	movlw	0
  8217  0DF1  00DA               	movwf	?___fttol+1
  8218  0DF2  3000               	movlw	0
  8219  0DF3  00D9               	movwf	?___fttol
  8220  0DF4  0008               	return
  8221  0DF5                     l4177:	
  8222  0DF5  3001               	movlw	1
  8223  0DF6                     u4715:	
  8224  0DF6  35DE               	lslf	___fttol@lval,f
  8225  0DF7  0DDF               	rlf	___fttol@lval+1,f
  8226  0DF8  0DE0               	rlf	___fttol@lval+2,f
  8227  0DF9  0DE1               	rlf	___fttol@lval+3,f
  8228  0DFA  0B89               	decfsz	9,f
  8229  0DFB  2DF6               	goto	u4715
  8230  0DFC  3001               	movlw	1
  8231  0DFD  02E2               	subwf	___fttol@exp1,f
  8232  0DFE                     l841:	
  8233  0DFE  0862               	movf	___fttol@exp1,w
  8234  0DFF  1D03               	btfss	3,2
  8235  0E00  2DF5               	goto	l4177
  8236  0E01                     l4179:	
  8237  0E01  085D               	movf	___fttol@sign1,w
  8238  0E02  1903               	btfsc	3,2
  8239  0E03  2E0F               	goto	l4183
  8240  0E04  09DE               	comf	___fttol@lval,f
  8241  0E05  09DF               	comf	___fttol@lval+1,f
  8242  0E06  09E0               	comf	___fttol@lval+2,f
  8243  0E07  09E1               	comf	___fttol@lval+3,f
  8244  0E08  0ADE               	incf	___fttol@lval,f
  8245  0E09  1903               	skipnz
  8246  0E0A  0ADF               	incf	___fttol@lval+1,f
  8247  0E0B  1903               	skipnz
  8248  0E0C  0AE0               	incf	___fttol@lval+2,f
  8249  0E0D  1903               	skipnz
  8250  0E0E  0AE1               	incf	___fttol@lval+3,f
  8251  0E0F                     l4183:	
  8252  0E0F  0861               	movf	___fttol@lval+3,w
  8253  0E10  00DC               	movwf	?___fttol+3
  8254  0E11  0860               	movf	___fttol@lval+2,w
  8255  0E12  00DB               	movwf	?___fttol+2
  8256  0E13  085F               	movf	___fttol@lval+1,w
  8257  0E14  00DA               	movwf	?___fttol+1
  8258  0E15  085E               	movf	___fttol@lval,w
  8259  0E16  00D9               	movwf	?___fttol
  8260  0E17  0008               	return
  8261  0E18                     __end_of___fttol:	
  8262                           
  8263                           	psect	text32
  8264  0873                     __ptext32:	
  8265 ;; *************** function ___ftsub *****************
  8266 ;; Defined at:
  8267 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  8268 ;; Parameters:    Size  Location     Type
  8269 ;;  f2              3   22[BANK0 ] float 
  8270 ;;  f1              3   25[BANK0 ] float 
  8271 ;; Auto vars:     Size  Location     Type
  8272 ;;		None
  8273 ;; Return value:  Size  Location     Type
  8274 ;;                  3   22[BANK0 ] float 
  8275 ;; Registers used:
  8276 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8277 ;; Tracked objects:
  8278 ;;		On entry : 0/0
  8279 ;;		On exit  : 0/0
  8280 ;;		Unchanged: 0/0
  8281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8282 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8285 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8286 ;;Total ram usage:        6 bytes
  8287 ;; Hardware stack levels used:    1
  8288 ;; Hardware stack levels required when called:    9
  8289 ;; This function calls:
  8290 ;;		___ftadd
  8291 ;; This function is called by:
  8292 ;;		_ftoa
  8293 ;; This function uses a non-reentrant model
  8294 ;;
  8295                           
  8296                           
  8297                           ;psect for function ___ftsub
  8298  0873                     ___ftsub:	
  8299                           
  8300                           ;incstack = 0
  8301                           ; Regs used in ___ftsub: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8302  0873  0020               	movlb	0	; select bank0
  8303  0874  0838               	movf	___ftsub@f2+2,w
  8304  0875  0437               	iorwf	___ftsub@f2+1,w
  8305  0876  0436               	iorwf	___ftsub@f2,w
  8306  0877  1903               	skipnz
  8307  0878  287B               	goto	l4139
  8308  0879  3080               	movlw	128
  8309  087A  06B8               	xorwf	___ftsub@f2+2,f
  8310  087B                     l4139:	
  8311  087B  0839               	movf	___ftsub@f1,w
  8312  087C  00AC               	movwf	___ftadd@f1
  8313  087D  083A               	movf	___ftsub@f1+1,w
  8314  087E  00AD               	movwf	___ftadd@f1+1
  8315  087F  083B               	movf	___ftsub@f1+2,w
  8316  0880  00AE               	movwf	___ftadd@f1+2
  8317  0881  0836               	movf	___ftsub@f2,w
  8318  0882  00AF               	movwf	___ftadd@f2
  8319  0883  0837               	movf	___ftsub@f2+1,w
  8320  0884  00B0               	movwf	___ftadd@f2+1
  8321  0885  0838               	movf	___ftsub@f2+2,w
  8322  0886  00B1               	movwf	___ftadd@f2+2
  8323  0887  3183  233E         	fcall	___ftadd
  8324  0889  0020               	movlb	0	; select bank0
  8325  088A  082C               	movf	?___ftadd,w
  8326  088B  00B6               	movwf	?___ftsub
  8327  088C  082D               	movf	?___ftadd+1,w
  8328  088D  00B7               	movwf	?___ftsub+1
  8329  088E  082E               	movf	?___ftadd+2,w
  8330  088F  00B8               	movwf	?___ftsub+2
  8331  0890  0008               	return
  8332  0891                     __end_of___ftsub:	
  8333                           
  8334                           	psect	text33
  8335  17D1                     __ptext33:	
  8336 ;; *************** function ___ftneg *****************
  8337 ;; Defined at:
  8338 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  8339 ;; Parameters:    Size  Location     Type
  8340 ;;  f1              3   45[BANK0 ] float 
  8341 ;; Auto vars:     Size  Location     Type
  8342 ;;		None
  8343 ;; Return value:  Size  Location     Type
  8344 ;;                  3   45[BANK0 ] float 
  8345 ;; Registers used:
  8346 ;;		wreg
  8347 ;; Tracked objects:
  8348 ;;		On entry : 0/0
  8349 ;;		On exit  : 0/0
  8350 ;;		Unchanged: 0/0
  8351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8352 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8355 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8356 ;;Total ram usage:        3 bytes
  8357 ;; Hardware stack levels used:    1
  8358 ;; Hardware stack levels required when called:    7
  8359 ;; This function calls:
  8360 ;;		Nothing
  8361 ;; This function is called by:
  8362 ;;		_loop
  8363 ;;		_ftoa
  8364 ;; This function uses a non-reentrant model
  8365 ;;
  8366                           
  8367                           
  8368                           ;psect for function ___ftneg
  8369  17D1                     ___ftneg:	
  8370                           
  8371                           ;incstack = 0
  8372                           ; Regs used in ___ftneg: [wreg]
  8373  17D1  0020               	movlb	0	; select bank0
  8374  17D2  084F               	movf	___ftneg@f1+2,w
  8375  17D3  044E               	iorwf	___ftneg@f1+1,w
  8376  17D4  044D               	iorwf	___ftneg@f1,w
  8377  17D5  1903               	skipnz
  8378  17D6  0008               	return
  8379  17D7  3080               	movlw	128
  8380  17D8  06CF               	xorwf	___ftneg@f1+2,f
  8381  17D9  0008               	return
  8382  17DA                     __end_of___ftneg:	
  8383                           
  8384                           	psect	text34
  8385  0608                     __ptext34:	
  8386 ;; *************** function ___ftmul *****************
  8387 ;; Defined at:
  8388 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  8389 ;; Parameters:    Size  Location     Type
  8390 ;;  f1              3   45[BANK0 ] float 
  8391 ;;  f2              3   48[BANK0 ] float 
  8392 ;; Auto vars:     Size  Location     Type
  8393 ;;  f3_as_produc    3   52[BANK0 ] unsigned um
  8394 ;;  sign            1   56[BANK0 ] unsigned char 
  8395 ;;  cntr            1   55[BANK0 ] unsigned char 
  8396 ;;  exp             1   51[BANK0 ] unsigned char 
  8397 ;; Return value:  Size  Location     Type
  8398 ;;                  3   45[BANK0 ] float 
  8399 ;; Registers used:
  8400 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8401 ;; Tracked objects:
  8402 ;;		On entry : 0/0
  8403 ;;		On exit  : 0/0
  8404 ;;		Unchanged: 0/0
  8405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8406 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8407 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8409 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8410 ;;Total ram usage:       12 bytes
  8411 ;; Hardware stack levels used:    1
  8412 ;; Hardware stack levels required when called:    8
  8413 ;; This function calls:
  8414 ;;		___ftpack
  8415 ;; This function is called by:
  8416 ;;		_loop
  8417 ;;		_ftoa
  8418 ;; This function uses a non-reentrant model
  8419 ;;
  8420                           
  8421                           
  8422                           ;psect for function ___ftmul
  8423  0608                     ___ftmul:	
  8424                           
  8425                           ;incstack = 0
  8426                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8427  0608  0020               	movlb	0	; select bank0
  8428  0609  084D               	movf	___ftmul@f1,w
  8429  060A  00FD               	movwf	125
  8430  060B  084E               	movf	___ftmul@f1+1,w
  8431  060C  00FE               	movwf	126
  8432  060D  084F               	movf	___ftmul@f1+2,w
  8433  060E  00FF               	movwf	127
  8434  060F  1003               	clrc
  8435  0610  0D7E               	rlf	126,w
  8436  0611  0D7F               	rlf	127,w
  8437  0612  00FF               	movwf	127
  8438  0613  087F               	movf	127,w
  8439  0614  00D3               	movwf	___ftmul@exp
  8440  0615  0853               	movf	___ftmul@exp,w
  8441  0616  1D03               	btfss	3,2
  8442  0617  2E1F               	goto	l4079
  8443  0618  3000               	movlw	0
  8444  0619  00CD               	movwf	?___ftmul
  8445  061A  3000               	movlw	0
  8446  061B  00CE               	movwf	?___ftmul+1
  8447  061C  3000               	movlw	0
  8448  061D  00CF               	movwf	?___ftmul+2
  8449  061E  0008               	return
  8450  061F                     l4079:	
  8451  061F  0850               	movf	___ftmul@f2,w
  8452  0620  00FD               	movwf	125
  8453  0621  0851               	movf	___ftmul@f2+1,w
  8454  0622  00FE               	movwf	126
  8455  0623  0852               	movf	___ftmul@f2+2,w
  8456  0624  00FF               	movwf	127
  8457  0625  1003               	clrc
  8458  0626  0D7E               	rlf	126,w
  8459  0627  0D7F               	rlf	127,w
  8460  0628  00FF               	movwf	127
  8461  0629  087F               	movf	127,w
  8462  062A  00D8               	movwf	___ftmul@sign
  8463  062B  0858               	movf	___ftmul@sign,w
  8464  062C  1D03               	btfss	3,2
  8465  062D  2E35               	goto	l4085
  8466  062E  3000               	movlw	0
  8467  062F  00CD               	movwf	?___ftmul
  8468  0630  3000               	movlw	0
  8469  0631  00CE               	movwf	?___ftmul+1
  8470  0632  3000               	movlw	0
  8471  0633  00CF               	movwf	?___ftmul+2
  8472  0634  0008               	return
  8473  0635                     l4085:	
  8474  0635  0858               	movf	___ftmul@sign,w
  8475  0636  3E7B               	addlw	123
  8476  0637  00FF               	movwf	127
  8477  0638  087F               	movf	127,w
  8478  0639  07D3               	addwf	___ftmul@exp,f
  8479  063A  084D               	movf	___ftmul@f1,w
  8480  063B  00FD               	movwf	125
  8481  063C  084E               	movf	___ftmul@f1+1,w
  8482  063D  00FE               	movwf	126
  8483  063E  084F               	movf	___ftmul@f1+2,w
  8484  063F  00FF               	movwf	127
  8485  0640  3010               	movlw	16
  8486  0641                     u4525:	
  8487  0641  36FF               	lsrf	127,f
  8488  0642  0CFE               	rrf	126,f
  8489  0643  0CFD               	rrf	125,f
  8490  0644  0B89               	decfsz	9,f
  8491  0645  2E41               	goto	u4525
  8492  0646  087D               	movf	125,w
  8493  0647  00FF               	movwf	127
  8494  0648  087F               	movf	127,w
  8495  0649  00D8               	movwf	___ftmul@sign
  8496  064A  0850               	movf	___ftmul@f2,w
  8497  064B  00FD               	movwf	125
  8498  064C  0851               	movf	___ftmul@f2+1,w
  8499  064D  00FE               	movwf	126
  8500  064E  0852               	movf	___ftmul@f2+2,w
  8501  064F  00FF               	movwf	127
  8502  0650  3010               	movlw	16
  8503  0651                     u4535:	
  8504  0651  36FF               	lsrf	127,f
  8505  0652  0CFE               	rrf	126,f
  8506  0653  0CFD               	rrf	125,f
  8507  0654  0B89               	decfsz	9,f
  8508  0655  2E51               	goto	u4535
  8509  0656  087D               	movf	125,w
  8510  0657  00FF               	movwf	127
  8511  0658  087F               	movf	127,w
  8512  0659  06D8               	xorwf	___ftmul@sign,f
  8513  065A  3080               	movlw	128
  8514  065B  00FF               	movwf	127
  8515  065C  087F               	movf	127,w
  8516  065D  05D8               	andwf	___ftmul@sign,f
  8517  065E  17CE               	bsf	___ftmul@f1+1,7
  8518  065F  17D1               	bsf	___ftmul@f2+1,7
  8519  0660  30FF               	movlw	255
  8520  0661  05D0               	andwf	___ftmul@f2,f
  8521  0662  30FF               	movlw	255
  8522  0663  05D1               	andwf	___ftmul@f2+1,f
  8523  0664  3000               	movlw	0
  8524  0665  05D2               	andwf	___ftmul@f2+2,f
  8525  0666  3000               	movlw	0
  8526  0667  00D4               	movwf	___ftmul@f3_as_product
  8527  0668  3000               	movlw	0
  8528  0669  00D5               	movwf	___ftmul@f3_as_product+1
  8529  066A  3000               	movlw	0
  8530  066B  00D6               	movwf	___ftmul@f3_as_product+2
  8531  066C  3007               	movlw	7
  8532  066D  00FF               	movwf	127
  8533  066E  087F               	movf	127,w
  8534  066F  00D7               	movwf	___ftmul@cntr
  8535  0670                     l4101:	
  8536  0670  1C4D               	btfss	___ftmul@f1,0
  8537  0671  2E78               	goto	l4105
  8538  0672  0850               	movf	___ftmul@f2,w
  8539  0673  07D4               	addwf	___ftmul@f3_as_product,f
  8540  0674  0851               	movf	___ftmul@f2+1,w
  8541  0675  3DD5               	addwfc	___ftmul@f3_as_product+1,f
  8542  0676  0852               	movf	___ftmul@f2+2,w
  8543  0677  3DD6               	addwfc	___ftmul@f3_as_product+2,f
  8544  0678                     l4105:	
  8545  0678  3001               	movlw	1
  8546  0679                     u4555:	
  8547  0679  36CF               	lsrf	___ftmul@f1+2,f
  8548  067A  0CCE               	rrf	___ftmul@f1+1,f
  8549  067B  0CCD               	rrf	___ftmul@f1,f
  8550  067C  0B89               	decfsz	9,f
  8551  067D  2E79               	goto	u4555
  8552  067E  3001               	movlw	1
  8553  067F                     u4565:	
  8554  067F  35D0               	lslf	___ftmul@f2,f
  8555  0680  0DD1               	rlf	___ftmul@f2+1,f
  8556  0681  0DD2               	rlf	___ftmul@f2+2,f
  8557  0682  0B89               	decfsz	9,f
  8558  0683  2E7F               	goto	u4565
  8559  0684  3001               	movlw	1
  8560  0685  02D7               	subwf	___ftmul@cntr,f
  8561  0686  1D03               	btfss	3,2
  8562  0687  2E70               	goto	l4101
  8563  0688  3009               	movlw	9
  8564  0689  00FF               	movwf	127
  8565  068A  087F               	movf	127,w
  8566  068B  00D7               	movwf	___ftmul@cntr
  8567  068C                     l4113:	
  8568  068C  1C4D               	btfss	___ftmul@f1,0
  8569  068D  2E94               	goto	l4117
  8570  068E  0850               	movf	___ftmul@f2,w
  8571  068F  07D4               	addwf	___ftmul@f3_as_product,f
  8572  0690  0851               	movf	___ftmul@f2+1,w
  8573  0691  3DD5               	addwfc	___ftmul@f3_as_product+1,f
  8574  0692  0852               	movf	___ftmul@f2+2,w
  8575  0693  3DD6               	addwfc	___ftmul@f3_as_product+2,f
  8576  0694                     l4117:	
  8577  0694  3001               	movlw	1
  8578  0695                     u4595:	
  8579  0695  36CF               	lsrf	___ftmul@f1+2,f
  8580  0696  0CCE               	rrf	___ftmul@f1+1,f
  8581  0697  0CCD               	rrf	___ftmul@f1,f
  8582  0698  0B89               	decfsz	9,f
  8583  0699  2E95               	goto	u4595
  8584  069A  3001               	movlw	1
  8585  069B                     u4605:	
  8586  069B  36D6               	lsrf	___ftmul@f3_as_product+2,f
  8587  069C  0CD5               	rrf	___ftmul@f3_as_product+1,f
  8588  069D  0CD4               	rrf	___ftmul@f3_as_product,f
  8589  069E  0B89               	decfsz	9,f
  8590  069F  2E9B               	goto	u4605
  8591  06A0  3001               	movlw	1
  8592  06A1  02D7               	subwf	___ftmul@cntr,f
  8593  06A2  1D03               	btfss	3,2
  8594  06A3  2E8C               	goto	l4113
  8595  06A4  0854               	movf	___ftmul@f3_as_product,w
  8596  06A5  00A7               	movwf	___ftpack@arg
  8597  06A6  0855               	movf	___ftmul@f3_as_product+1,w
  8598  06A7  00A8               	movwf	___ftpack@arg+1
  8599  06A8  0856               	movf	___ftmul@f3_as_product+2,w
  8600  06A9  00A9               	movwf	___ftpack@arg+2
  8601  06AA  0853               	movf	___ftmul@exp,w
  8602  06AB  00FF               	movwf	127
  8603  06AC  087F               	movf	127,w
  8604  06AD  00AA               	movwf	___ftpack@exp
  8605  06AE  0858               	movf	___ftmul@sign,w
  8606  06AF  00FF               	movwf	127
  8607  06B0  087F               	movf	127,w
  8608  06B1  00AB               	movwf	___ftpack@sign
  8609  06B2  318C  24A7         	fcall	___ftpack
  8610  06B4  0020               	movlb	0	; select bank0
  8611  06B5  0827               	movf	?___ftpack,w
  8612  06B6  00CD               	movwf	?___ftmul
  8613  06B7  0828               	movf	?___ftpack+1,w
  8614  06B8  00CE               	movwf	?___ftmul+1
  8615  06B9  0829               	movf	?___ftpack+2,w
  8616  06BA  00CF               	movwf	?___ftmul+2
  8617  06BB  0008               	return
  8618  06BC                     __end_of___ftmul:	
  8619                           
  8620                           	psect	text35
  8621  0AFF                     __ptext35:	
  8622 ;; *************** function ___ftge *****************
  8623 ;; Defined at:
  8624 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8625 ;; Parameters:    Size  Location     Type
  8626 ;;  ff1             3    7[BANK0 ] float 
  8627 ;;  ff2             3   10[BANK0 ] float 
  8628 ;; Auto vars:     Size  Location     Type
  8629 ;;		None
  8630 ;; Return value:  Size  Location     Type
  8631 ;;		None               void
  8632 ;; Registers used:
  8633 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8634 ;; Tracked objects:
  8635 ;;		On entry : 0/0
  8636 ;;		On exit  : 0/0
  8637 ;;		Unchanged: 0/0
  8638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8639 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8642 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8643 ;;Total ram usage:        6 bytes
  8644 ;; Hardware stack levels used:    1
  8645 ;; Hardware stack levels required when called:    7
  8646 ;; This function calls:
  8647 ;;		Nothing
  8648 ;; This function is called by:
  8649 ;;		_ftoa
  8650 ;; This function uses a non-reentrant model
  8651 ;;
  8652                           
  8653                           
  8654                           ;psect for function ___ftge
  8655  0AFF                     ___ftge:	
  8656                           
  8657                           ;incstack = 0
  8658                           ; Regs used in ___ftge: [wreg+status,2+status,0+btemp+9-btemp+11]
  8659  0AFF  0020               	movlb	0	; select bank0
  8660  0B00  1FA9               	btfss	___ftge@ff1+2,7
  8661  0B01  2B16               	goto	l4057
  8662  0B02  0927               	comf	___ftge@ff1,w
  8663  0B03  00FD               	movwf	125
  8664  0B04  0928               	comf	___ftge@ff1+1,w
  8665  0B05  00FE               	movwf	126
  8666  0B06  0929               	comf	___ftge@ff1+2,w
  8667  0B07  00FF               	movwf	127
  8668  0B08  0AFD               	incf	125,f
  8669  0B09  1903               	skipnz
  8670  0B0A  0AFE               	incf	126,f
  8671  0B0B  1903               	skipnz
  8672  0B0C  0AFF               	incf	127,f
  8673  0B0D  3000               	movlw	0
  8674  0B0E  077D               	addwf	125,w
  8675  0B0F  00A7               	movwf	___ftge@ff1
  8676  0B10  3000               	movlw	0
  8677  0B11  3D7E               	addwfc	126,w
  8678  0B12  00A8               	movwf	___ftge@ff1+1
  8679  0B13  3080               	movlw	128
  8680  0B14  3D7F               	addwfc	127,w
  8681  0B15  00A9               	movwf	___ftge@ff1+2
  8682  0B16                     l4057:	
  8683  0B16  1FAC               	btfss	___ftge@ff2+2,7
  8684  0B17  2B2C               	goto	l4061
  8685  0B18  092A               	comf	___ftge@ff2,w
  8686  0B19  00FD               	movwf	125
  8687  0B1A  092B               	comf	___ftge@ff2+1,w
  8688  0B1B  00FE               	movwf	126
  8689  0B1C  092C               	comf	___ftge@ff2+2,w
  8690  0B1D  00FF               	movwf	127
  8691  0B1E  0AFD               	incf	125,f
  8692  0B1F  1903               	skipnz
  8693  0B20  0AFE               	incf	126,f
  8694  0B21  1903               	skipnz
  8695  0B22  0AFF               	incf	127,f
  8696  0B23  3000               	movlw	0
  8697  0B24  077D               	addwf	125,w
  8698  0B25  00AA               	movwf	___ftge@ff2
  8699  0B26  3000               	movlw	0
  8700  0B27  3D7E               	addwfc	126,w
  8701  0B28  00AB               	movwf	___ftge@ff2+1
  8702  0B29  3080               	movlw	128
  8703  0B2A  3D7F               	addwfc	127,w
  8704  0B2B  00AC               	movwf	___ftge@ff2+2
  8705  0B2C                     l4061:	
  8706  0B2C  3080               	movlw	128
  8707  0B2D  06A9               	xorwf	___ftge@ff1+2,f
  8708  0B2E  3080               	movlw	128
  8709  0B2F  06AC               	xorwf	___ftge@ff2+2,f
  8710  0B30  082C               	movf	___ftge@ff2+2,w
  8711  0B31  0229               	subwf	___ftge@ff1+2,w
  8712  0B32  1D03               	skipz
  8713  0B33  0008               	return
  8714  0B34  082B               	movf	___ftge@ff2+1,w
  8715  0B35  0228               	subwf	___ftge@ff1+1,w
  8716  0B36  1D03               	skipz
  8717  0B37  0008               	return
  8718  0B38  082A               	movf	___ftge@ff2,w
  8719  0B39  0227               	subwf	___ftge@ff1,w
  8720  0B3A  0008               	return
  8721  0B3B                     __end_of___ftge:	
  8722                           
  8723                           	psect	text36
  8724  0E18                     __ptext36:	
  8725 ;; *************** function _hcsr04GetAerage *****************
  8726 ;; Defined at:
  8727 ;;		line 40 in file "HC-SR04.c"
  8728 ;; Parameters:    Size  Location     Type
  8729 ;;		None
  8730 ;; Auto vars:     Size  Location     Type
  8731 ;;  average         3   38[BANK0 ] float 
  8732 ;; Return value:  Size  Location     Type
  8733 ;;                  3   35[BANK0 ] float 
  8734 ;; Registers used:
  8735 ;;		wreg, status,2, status,0, btemp+0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8736 ;; Tracked objects:
  8737 ;;		On entry : 0/0
  8738 ;;		On exit  : 0/0
  8739 ;;		Unchanged: 0/0
  8740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8741 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8742 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8744 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8745 ;;Total ram usage:        6 bytes
  8746 ;; Hardware stack levels used:    1
  8747 ;; Hardware stack levels required when called:    9
  8748 ;; This function calls:
  8749 ;;		___ftadd
  8750 ;;		___ftdiv
  8751 ;;		___lwtoft
  8752 ;;		_sleepMs
  8753 ;; This function is called by:
  8754 ;;		_loop
  8755 ;; This function uses a non-reentrant model
  8756 ;;
  8757                           
  8758                           
  8759                           ;psect for function _hcsr04GetAerage
  8760  0E18                     _hcsr04GetAerage:	
  8761                           
  8762                           ;HC-SR04.c: 43: float average = 0;
  8763                           
  8764                           ;incstack = 0
  8765                           ; Regs used in _hcsr04GetAerage: [wreg+status,2-btemp+0+btemp+9-btemp+11+pclath+cstack]
  8766  0E18  3000               	movlw	0
  8767  0E19  0020               	movlb	0	; select bank0
  8768  0E1A  00C6               	movwf	hcsr04GetAerage@average
  8769  0E1B  3000               	movlw	0
  8770  0E1C  00C7               	movwf	hcsr04GetAerage@average+1
  8771  0E1D  3000               	movlw	0
  8772  0E1E  00C8               	movwf	hcsr04GetAerage@average+2
  8773                           
  8774                           ;HC-SR04.c: 45: rloop = 300;
  8775  0E1F  302C               	movlw	44
  8776  0E20  0021               	movlb	1	; select bank1
  8777  0E21  00E7               	movwf	_rloop^(0+128)
  8778  0E22  3001               	movlw	1
  8779  0E23  00E8               	movwf	(_rloop^(0+128)+1)
  8780                           
  8781                           ;HC-SR04.c: 46: rcount = 0;
  8782  0E24  01E3               	clrf	_rcount^(0+128)
  8783  0E25  01E4               	clrf	(_rcount+1)^(0+128)
  8784  0E26                     l4471:	
  8785                           ;HC-SR04.c: 48: while (rloop--){
  8786                           
  8787  0E26  3001               	movlw	1
  8788  0E27  02E7               	subwf	_rloop^(0+128),f
  8789  0E28  3000               	movlw	0
  8790  0E29  3BE8               	subwfb	(_rloop+1)^(0+128),f
  8791  0E2A  0A67               	incf	_rloop^(0+128),w
  8792  0E2B  1903               	btfsc	3,2
  8793  0E2C  0A68               	incf	(_rloop+1)^(0+128),w
  8794  0E2D  1903               	btfsc	3,2
  8795  0E2E  2E7F               	goto	l4473
  8796                           
  8797                           ;HC-SR04.c: 51: TMR1L = 0x00;
  8798  0E2F  0020               	movlb	0	; select bank0
  8799  0E30  0199               	clrf	25	;volatile
  8800                           
  8801                           ;HC-SR04.c: 52: TMR1H = 0x00;
  8802  0E31  019A               	clrf	26	;volatile
  8803                           
  8804                           ;HC-SR04.c: 55: PORTCbits.RC4 = 1;
  8805  0E32  160E               	bsf	14,4	;volatile
  8806                           
  8807                           ;HC-SR04.c: 58: _delay((unsigned long)((10)*(32000000/4000000.0)));
  8808  0E33  301A               	movlw	26
  8809  0E34                     u5457:	
  8810  0E34  0B89               	decfsz	9,f
  8811  0E35  2E34               	goto	u5457
  8812  0E36  3200               	nop2
  8813                           
  8814                           ;HC-SR04.c: 61: T1CONbits.TMR1ON = 1;
  8815  0E37  0020               	movlb	0	; select bank0
  8816  0E38  141B               	bsf	27,0	;volatile
  8817                           
  8818                           ;HC-SR04.c: 62: waiting = 1;
  8819  0E39  3001               	movlw	1
  8820  0E3A  00FF               	movwf	127
  8821  0E3B  087F               	movf	127,w
  8822  0E3C  0021               	movlb	1	; select bank1
  8823  0E3D  00E9               	movwf	_waiting^(0+128)	;volatile
  8824                           
  8825                           ;HC-SR04.c: 65: PORTCbits.RC4 = 0;
  8826  0E3E  0020               	movlb	0	; select bank0
  8827  0E3F  120E               	bcf	14,4	;volatile
  8828                           
  8829                           ;HC-SR04.c: 69: sleepMs(10);
  8830  0E40  300A               	movlw	10
  8831  0E41  00F0               	movwf	sleepMs@milliseconds
  8832  0E42  3000               	movlw	0
  8833  0E43  00F1               	movwf	sleepMs@milliseconds+1
  8834  0E44  3189  21D2  318E   	fcall	_sleepMs
  8835                           
  8836                           ;HC-SR04.c: 71: if (!waiting){
  8837  0E47  0021               	movlb	1	; select bank1
  8838  0E48  0869               	movf	_waiting^(0+128),w	;volatile
  8839  0E49  1D03               	btfss	3,2
  8840  0E4A  2E78               	goto	l4467
  8841                           
  8842                           ;HC-SR04.c: 72: average+= TMR1L + (unsigned) (TMR1H << 8);
  8843  0E4B  0020               	movlb	0	; select bank0
  8844  0E4C  081A               	movf	26,w	;volatile
  8845  0E4D  00FE               	movwf	126
  8846  0E4E  01FF               	clrf	127
  8847  0E4F  087E               	movf	126,w
  8848  0E50  00FF               	movwf	127
  8849  0E51  01FE               	clrf	126
  8850  0E52  0819               	movf	25,w	;volatile
  8851  0E53  077E               	addwf	126,w
  8852  0E54  00F0               	movwf	___lwtoft@c
  8853  0E55  087F               	movf	127,w
  8854  0E56  1803               	skipnc
  8855  0E57  0A7F               	incf	127,w
  8856  0E58  00F1               	movwf	___lwtoft@c+1
  8857  0E59  3188  2041  318E   	fcall	___lwtoft
  8858  0E5C  0870               	movf	?___lwtoft,w
  8859  0E5D  0020               	movlb	0	; select bank0
  8860  0E5E  00AC               	movwf	___ftadd@f1
  8861  0E5F  0871               	movf	?___lwtoft+1,w
  8862  0E60  00AD               	movwf	___ftadd@f1+1
  8863  0E61  0872               	movf	?___lwtoft+2,w
  8864  0E62  00AE               	movwf	___ftadd@f1+2
  8865  0E63  0846               	movf	hcsr04GetAerage@average,w
  8866  0E64  00AF               	movwf	___ftadd@f2
  8867  0E65  0847               	movf	hcsr04GetAerage@average+1,w
  8868  0E66  00B0               	movwf	___ftadd@f2+1
  8869  0E67  0848               	movf	hcsr04GetAerage@average+2,w
  8870  0E68  00B1               	movwf	___ftadd@f2+2
  8871  0E69  3183  233E  318E   	fcall	___ftadd
  8872  0E6C  0020               	movlb	0	; select bank0
  8873  0E6D  082C               	movf	?___ftadd,w
  8874  0E6E  00C6               	movwf	hcsr04GetAerage@average
  8875  0E6F  082D               	movf	?___ftadd+1,w
  8876  0E70  00C7               	movwf	hcsr04GetAerage@average+1
  8877  0E71  082E               	movf	?___ftadd+2,w
  8878  0E72  00C8               	movwf	hcsr04GetAerage@average+2
  8879                           
  8880                           ;HC-SR04.c: 73: rcount++;
  8881  0E73  3001               	movlw	1
  8882  0E74  0021               	movlb	1	; select bank1
  8883  0E75  07E3               	addwf	_rcount^(0+128),f
  8884  0E76  3000               	movlw	0
  8885  0E77  3DE4               	addwfc	(_rcount+1)^(0+128),f
  8886  0E78                     l4467:	
  8887                           
  8888                           ;HC-SR04.c: 74: };HC-SR04.c: 76: if (rcount >= 100){
  8889  0E78  3000               	movlw	0
  8890  0E79  0264               	subwf	(_rcount+1)^(0+128),w
  8891  0E7A  3064               	movlw	100
  8892  0E7B  1903               	skipnz
  8893  0E7C  0263               	subwf	_rcount^(0+128),w
  8894  0E7D  1C03               	skipc
  8895  0E7E  2E26               	goto	l4471
  8896  0E7F                     l4473:	
  8897                           ;HC-SR04.c: 77: break;
  8898                           
  8899                           
  8900                           ;HC-SR04.c: 78: };HC-SR04.c: 79: };HC-SR04.c: 81: if (rcount > 10){
  8901  0E7F  3000               	movlw	0
  8902  0E80  0264               	subwf	(_rcount+1)^(0+128),w
  8903  0E81  300B               	movlw	11
  8904  0E82  1903               	skipnz
  8905  0E83  0263               	subwf	_rcount^(0+128),w
  8906  0E84  1C03               	skipc
  8907  0E85  2EA4               	goto	l4477
  8908                           
  8909                           ;HC-SR04.c: 83: average/= rcount;
  8910  0E86  0864               	movf	(_rcount+1)^(0+128),w
  8911  0E87  00F1               	movwf	___lwtoft@c+1
  8912  0E88  0863               	movf	_rcount^(0+128),w
  8913  0E89  00F0               	movwf	___lwtoft@c
  8914  0E8A  3188  2041  318E   	fcall	___lwtoft
  8915  0E8D  0870               	movf	?___lwtoft,w
  8916  0E8E  0020               	movlb	0	; select bank0
  8917  0E8F  00B6               	movwf	___ftdiv@f2
  8918  0E90  0871               	movf	?___lwtoft+1,w
  8919  0E91  00B7               	movwf	___ftdiv@f2+1
  8920  0E92  0872               	movf	?___lwtoft+2,w
  8921  0E93  00B8               	movwf	___ftdiv@f2+2
  8922  0E94  0846               	movf	hcsr04GetAerage@average,w
  8923  0E95  00B9               	movwf	___ftdiv@f1
  8924  0E96  0847               	movf	hcsr04GetAerage@average+1,w
  8925  0E97  00BA               	movwf	___ftdiv@f1+1
  8926  0E98  0848               	movf	hcsr04GetAerage@average+2,w
  8927  0E99  00BB               	movwf	___ftdiv@f1+2
  8928  0E9A  318F  2757  318E   	fcall	___ftdiv
  8929  0E9D  0020               	movlb	0	; select bank0
  8930  0E9E  0836               	movf	?___ftdiv,w
  8931  0E9F  00C6               	movwf	hcsr04GetAerage@average
  8932  0EA0  0837               	movf	?___ftdiv+1,w
  8933  0EA1  00C7               	movwf	hcsr04GetAerage@average+1
  8934  0EA2  0838               	movf	?___ftdiv+2,w
  8935  0EA3  2EAA               	goto	L3
  8936  0EA4                     l4477:	
  8937                           ;HC-SR04.c: 84: }
  8938                           
  8939                           
  8940                           ;HC-SR04.c: 87: else{;HC-SR04.c: 88: average = 0;
  8941  0EA4  3000               	movlw	0
  8942  0EA5  0020               	movlb	0	; select bank0
  8943  0EA6  00C6               	movwf	hcsr04GetAerage@average
  8944  0EA7  3000               	movlw	0
  8945  0EA8  00C7               	movwf	hcsr04GetAerage@average+1
  8946  0EA9  3000               	movlw	0
  8947  0EAA                     L3:	
  8948  0EAA  00C8               	movwf	hcsr04GetAerage@average+2
  8949                           
  8950                           ;HC-SR04.c: 89: };HC-SR04.c: 91: return average;
  8951  0EAB  0846               	movf	hcsr04GetAerage@average,w
  8952  0EAC  00C3               	movwf	?_hcsr04GetAerage
  8953  0EAD  0847               	movf	hcsr04GetAerage@average+1,w
  8954  0EAE  00C4               	movwf	?_hcsr04GetAerage+1
  8955  0EAF  0848               	movf	hcsr04GetAerage@average+2,w
  8956  0EB0  00C5               	movwf	?_hcsr04GetAerage+2
  8957  0EB1  0008               	return
  8958  0EB2                     __end_of_hcsr04GetAerage:	
  8959                           
  8960                           	psect	text37
  8961  0841                     __ptext37:	
  8962 ;; *************** function ___lwtoft *****************
  8963 ;; Defined at:
  8964 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
  8965 ;; Parameters:    Size  Location     Type
  8966 ;;  c               2    0[COMMON] unsigned int 
  8967 ;; Auto vars:     Size  Location     Type
  8968 ;;		None
  8969 ;; Return value:  Size  Location     Type
  8970 ;;                  3    0[COMMON] float 
  8971 ;; Registers used:
  8972 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8973 ;; Tracked objects:
  8974 ;;		On entry : 0/0
  8975 ;;		On exit  : 0/0
  8976 ;;		Unchanged: 0/0
  8977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8978 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8981 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8982 ;;Total ram usage:        3 bytes
  8983 ;; Hardware stack levels used:    1
  8984 ;; Hardware stack levels required when called:    8
  8985 ;; This function calls:
  8986 ;;		___ftpack
  8987 ;; This function is called by:
  8988 ;;		_hcsr04GetAerage
  8989 ;; This function uses a non-reentrant model
  8990 ;;
  8991                           
  8992                           
  8993                           ;psect for function ___lwtoft
  8994  0841                     ___lwtoft:	
  8995                           
  8996                           ;incstack = 0
  8997                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8998  0841  0870               	movf	___lwtoft@c,w
  8999  0842  0020               	movlb	0	; select bank0
  9000  0843  00A7               	movwf	___ftpack@arg
  9001  0844  0871               	movf	___lwtoft@c+1,w
  9002  0845  00A8               	movwf	___ftpack@arg+1
  9003  0846  01A9               	clrf	___ftpack@arg+2
  9004  0847  308E               	movlw	142
  9005  0848  00FF               	movwf	127
  9006  0849  087F               	movf	127,w
  9007  084A  00AA               	movwf	___ftpack@exp
  9008  084B  01AB               	clrf	___ftpack@sign
  9009  084C  318C  24A7         	fcall	___ftpack
  9010  084E  0020               	movlb	0	; select bank0
  9011  084F  0827               	movf	?___ftpack,w
  9012  0850  00F0               	movwf	?___lwtoft
  9013  0851  0828               	movf	?___ftpack+1,w
  9014  0852  00F1               	movwf	?___lwtoft+1
  9015  0853  0829               	movf	?___ftpack+2,w
  9016  0854  00F2               	movwf	?___lwtoft+2
  9017  0855  0008               	return
  9018  0856                     __end_of___lwtoft:	
  9019                           
  9020                           	psect	text38
  9021  06BC                     __ptext38:	
  9022 ;; *************** function _getADCValue *****************
  9023 ;; Defined at:
  9024 ;;		line 31 in file "main.c"
  9025 ;; Parameters:    Size  Location     Type
  9026 ;;  channel         1    wreg     unsigned char 
  9027 ;; Auto vars:     Size  Location     Type
  9028 ;;  channel         1   39[BANK0 ] unsigned char 
  9029 ;;  adcSum          3   42[BANK0 ] float 
  9030 ;;  adcLoop         2   40[BANK0 ] unsigned int 
  9031 ;; Return value:  Size  Location     Type
  9032 ;;                  3   35[BANK0 ] float 
  9033 ;; Registers used:
  9034 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9035 ;; Tracked objects:
  9036 ;;		On entry : 0/0
  9037 ;;		On exit  : 0/0
  9038 ;;		Unchanged: 0/0
  9039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9040 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9041 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9042 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9043 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9044 ;;Total ram usage:       10 bytes
  9045 ;; Hardware stack levels used:    1
  9046 ;; Hardware stack levels required when called:    9
  9047 ;; This function calls:
  9048 ;;		___awtoft
  9049 ;;		___ftadd
  9050 ;;		___ftdiv
  9051 ;;		_sleepMs
  9052 ;; This function is called by:
  9053 ;;		_loop
  9054 ;; This function uses a non-reentrant model
  9055 ;;
  9056                           
  9057                           
  9058                           ;psect for function _getADCValue
  9059  06BC                     _getADCValue:	
  9060                           
  9061                           ;incstack = 0
  9062                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2-btemp+0+btemp+9-btemp+11+pclath+cstack
      +                          ]
  9063                           ;getADCValue@channel stored from wreg
  9064  06BC  0020               	movlb	0	; select bank0
  9065  06BD  00C7               	movwf	getADCValue@channel
  9066                           
  9067                           ;main.c: 34: float adcSum = 0;
  9068  06BE  3000               	movlw	0
  9069  06BF  00CA               	movwf	getADCValue@adcSum
  9070  06C0  3000               	movlw	0
  9071  06C1  00CB               	movwf	getADCValue@adcSum+1
  9072  06C2  3000               	movlw	0
  9073  06C3  00CC               	movwf	getADCValue@adcSum+2
  9074                           
  9075                           ;main.c: 35: unsigned int adcLoop = 1000;
  9076  06C4  30E8               	movlw	232
  9077  06C5  00C8               	movwf	getADCValue@adcLoop
  9078  06C6  3003               	movlw	3
  9079  06C7  00C9               	movwf	getADCValue@adcLoop+1
  9080                           
  9081                           ;main.c: 37: ADCON0bits.CHS = channel;
  9082  06C8  0847               	movf	getADCValue@channel,w
  9083  06C9  00C6               	movwf	??_getADCValue
  9084  06CA  0DC6               	rlf	??_getADCValue,f
  9085  06CB  0DC6               	rlf	??_getADCValue,f
  9086  06CC  0021               	movlb	1	; select bank1
  9087  06CD  081D               	movf	29,w	;volatile
  9088  06CE  0020               	movlb	0	; select bank0
  9089  06CF  0646               	xorwf	??_getADCValue,w
  9090  06D0  3903               	andlw	-253
  9091  06D1  0646               	xorwf	??_getADCValue,w
  9092  06D2  0021               	movlb	1	; select bank1
  9093  06D3  009D               	movwf	29	;volatile
  9094                           
  9095                           ;main.c: 38: FVRCONbits.FVREN = 1;
  9096  06D4  0022               	movlb	2	; select bank2
  9097  06D5  1797               	bsf	23,7	;volatile
  9098                           
  9099                           ;main.c: 39: ADCON0bits.ADON = 1;
  9100  06D6  0021               	movlb	1	; select bank1
  9101  06D7  141D               	bsf	29,0	;volatile
  9102                           
  9103                           ;main.c: 41: sleepMs(1);
  9104  06D8  3001               	movlw	1
  9105  06D9  00F0               	movwf	sleepMs@milliseconds
  9106  06DA  3000               	movlw	0
  9107  06DB  00F1               	movwf	sleepMs@milliseconds+1
  9108  06DC  3189  21D2  3186   	fcall	_sleepMs
  9109  06DF                     l4405:	
  9110                           ;main.c: 43: while (adcLoop--){
  9111                           
  9112  06DF  3001               	movlw	1
  9113  06E0  0020               	movlb	0	; select bank0
  9114  06E1  02C8               	subwf	getADCValue@adcLoop,f
  9115  06E2  3000               	movlw	0
  9116  06E3  3BC9               	subwfb	getADCValue@adcLoop+1,f
  9117  06E4  0A48               	incf	getADCValue@adcLoop,w
  9118  06E5  1903               	btfsc	3,2
  9119  06E6  0A49               	incf	getADCValue@adcLoop+1,w
  9120  06E7  1903               	btfsc	3,2
  9121  06E8  2F1C               	goto	l181
  9122                           
  9123                           ;main.c: 45: ADCON0bits.ADGO = 1;
  9124  06E9  0021               	movlb	1	; select bank1
  9125  06EA  149D               	bsf	29,1	;volatile
  9126  06EB                     l4401:	
  9127                           ;main.c: 47: while (ADCON0bits.ADGO){
  9128                           
  9129  06EB  0021               	movlb	1	; select bank1
  9130  06EC  1C9D               	btfss	29,1	;volatile
  9131  06ED  2EF6               	goto	l4403
  9132                           
  9133                           ;main.c: 48: sleepMs(1);
  9134  06EE  3001               	movlw	1
  9135  06EF  00F0               	movwf	sleepMs@milliseconds
  9136  06F0  3000               	movlw	0
  9137  06F1  00F1               	movwf	sleepMs@milliseconds+1
  9138  06F2  3189  21D2  3186   	fcall	_sleepMs
  9139  06F5  2EEB               	goto	l4401
  9140  06F6                     l4403:	
  9141                           
  9142                           ;main.c: 49: };main.c: 51: adcSum+= (ADRESL | (ADRESH << 8));
  9143  06F6  081C               	movf	28,w	;volatile
  9144  06F7  00FE               	movwf	126
  9145  06F8  01FF               	clrf	127
  9146  06F9  087E               	movf	126,w
  9147  06FA  00FF               	movwf	127
  9148  06FB  01FE               	clrf	126
  9149  06FC  087E               	movf	126,w
  9150  06FD  041B               	iorwf	27,w	;volatile
  9151  06FE  00F0               	movwf	___awtoft@c
  9152  06FF  087F               	movf	127,w
  9153  0700  00F1               	movwf	___awtoft@c+1
  9154  0701  3189  210A  3186   	fcall	___awtoft
  9155  0704  0870               	movf	?___awtoft,w
  9156  0705  0020               	movlb	0	; select bank0
  9157  0706  00AC               	movwf	___ftadd@f1
  9158  0707  0871               	movf	?___awtoft+1,w
  9159  0708  00AD               	movwf	___ftadd@f1+1
  9160  0709  0872               	movf	?___awtoft+2,w
  9161  070A  00AE               	movwf	___ftadd@f1+2
  9162  070B  084A               	movf	getADCValue@adcSum,w
  9163  070C  00AF               	movwf	___ftadd@f2
  9164  070D  084B               	movf	getADCValue@adcSum+1,w
  9165  070E  00B0               	movwf	___ftadd@f2+1
  9166  070F  084C               	movf	getADCValue@adcSum+2,w
  9167  0710  00B1               	movwf	___ftadd@f2+2
  9168  0711  3183  233E  3186   	fcall	___ftadd
  9169  0714  0020               	movlb	0	; select bank0
  9170  0715  082C               	movf	?___ftadd,w
  9171  0716  00CA               	movwf	getADCValue@adcSum
  9172  0717  082D               	movf	?___ftadd+1,w
  9173  0718  00CB               	movwf	getADCValue@adcSum+1
  9174  0719  082E               	movf	?___ftadd+2,w
  9175  071A  00CC               	movwf	getADCValue@adcSum+2
  9176  071B  2EDF               	goto	l4405
  9177  071C                     l181:	
  9178                           
  9179                           ;main.c: 53: };main.c: 55: FVRCONbits.FVREN = 0;
  9180  071C  0022               	movlb	2	; select bank2
  9181  071D  1397               	bcf	23,7	;volatile
  9182                           
  9183                           ;main.c: 56: ADCON0bits.ADON = 0;
  9184  071E  0021               	movlb	1	; select bank1
  9185  071F  101D               	bcf	29,0	;volatile
  9186                           
  9187                           ;main.c: 59: adcSum/= 1000;
  9188  0720  3000               	movlw	0
  9189  0721  0020               	movlb	0	; select bank0
  9190  0722  00B6               	movwf	___ftdiv@f2
  9191  0723  307A               	movlw	122
  9192  0724  00B7               	movwf	___ftdiv@f2+1
  9193  0725  3044               	movlw	68
  9194  0726  00B8               	movwf	___ftdiv@f2+2
  9195  0727  084A               	movf	getADCValue@adcSum,w
  9196  0728  00B9               	movwf	___ftdiv@f1
  9197  0729  084B               	movf	getADCValue@adcSum+1,w
  9198  072A  00BA               	movwf	___ftdiv@f1+1
  9199  072B  084C               	movf	getADCValue@adcSum+2,w
  9200  072C  00BB               	movwf	___ftdiv@f1+2
  9201  072D  318F  2757  3186   	fcall	___ftdiv
  9202  0730  0020               	movlb	0	; select bank0
  9203  0731  0836               	movf	?___ftdiv,w
  9204  0732  00CA               	movwf	getADCValue@adcSum
  9205  0733  0837               	movf	?___ftdiv+1,w
  9206  0734  00CB               	movwf	getADCValue@adcSum+1
  9207  0735  0838               	movf	?___ftdiv+2,w
  9208  0736  00CC               	movwf	getADCValue@adcSum+2
  9209                           
  9210                           ;main.c: 62: if (ADCON1bits.ADPREF == 0b11){
  9211  0737  0021               	movlb	1	; select bank1
  9212  0738  081E               	movf	30,w	;volatile
  9213  0739  3903               	andlw	3
  9214  073A  3A03               	xorlw	3
  9215  073B  1903               	btfsc	3,2
  9216  073C  2F56               	goto	l4417
  9217  073D  2F5D               	goto	l4419
  9218  073E                     l4413:	
  9219                           ;main.c: 64: case 0b10:
  9220                           
  9221                           ;main.c: 63: switch (FVRCONbits.ADFVR){
  9222                           
  9223                           
  9224                           ;main.c: 65: adcSum/= 500;
  9225  073E  3000               	movlw	0
  9226  073F  0020               	movlb	0	; select bank0
  9227  0740  00B6               	movwf	___ftdiv@f2
  9228  0741  30FA               	movlw	250
  9229  0742  00B7               	movwf	___ftdiv@f2+1
  9230  0743  3043               	movlw	67
  9231  0744  00B8               	movwf	___ftdiv@f2+2
  9232  0745  084A               	movf	getADCValue@adcSum,w
  9233  0746  00B9               	movwf	___ftdiv@f1
  9234  0747  084B               	movf	getADCValue@adcSum+1,w
  9235  0748  00BA               	movwf	___ftdiv@f1+1
  9236  0749  084C               	movf	getADCValue@adcSum+2,w
  9237  074A  00BB               	movwf	___ftdiv@f1+2
  9238  074B  318F  2757  3186   	fcall	___ftdiv
  9239  074E  0020               	movlb	0	; select bank0
  9240  074F  0836               	movf	?___ftdiv,w
  9241  0750  00CA               	movwf	getADCValue@adcSum
  9242  0751  0837               	movf	?___ftdiv+1,w
  9243  0752  00CB               	movwf	getADCValue@adcSum+1
  9244  0753  0838               	movf	?___ftdiv+2,w
  9245  0754  00CC               	movwf	getADCValue@adcSum+2
  9246                           
  9247                           ;main.c: 67: }
  9248                           
  9249                           ;main.c: 66: break;
  9250  0755  2F5D               	goto	l4419
  9251  0756                     l4417:	
  9252  0756  0022               	movlb	2	; select bank2
  9253  0757  0817               	movf	23,w	;volatile
  9254  0758  3903               	andlw	3
  9255                           
  9256                           ; Switch size 1, requested type "space"
  9257                           ; Number of cases is 1, Range of values is 2 to 2
  9258                           ; switch strategies available:
  9259                           ; Name         Instructions Cycles
  9260                           ; simple_byte            4     3 (average)
  9261                           ; direct_byte           11     9 (fixed)
  9262                           ; jumptable            263     9 (fixed)
  9263                           ;	Chosen strategy is simple_byte
  9264  0759  3A02               	xorlw	2	; case 2
  9265  075A  1903               	skipnz
  9266  075B  2F3E               	goto	l4413
  9267  075C  2F5D               	goto	l4419
  9268  075D                     l4419:	
  9269                           
  9270                           ;main.c: 68: };main.c: 71: return adcSum;
  9271  075D  0020               	movlb	0	; select bank0
  9272  075E  084A               	movf	getADCValue@adcSum,w
  9273  075F  00C3               	movwf	?_getADCValue
  9274  0760  084B               	movf	getADCValue@adcSum+1,w
  9275  0761  00C4               	movwf	?_getADCValue+1
  9276  0762  084C               	movf	getADCValue@adcSum+2,w
  9277  0763  00C5               	movwf	?_getADCValue+2
  9278  0764  0008               	return
  9279  0765                     __end_of_getADCValue:	
  9280                           
  9281                           	psect	text39
  9282  09D2                     __ptext39:	
  9283 ;; *************** function _sleepMs *****************
  9284 ;; Defined at:
  9285 ;;		line 36 in file "interface.c"
  9286 ;; Parameters:    Size  Location     Type
  9287 ;;  milliseconds    2    0[COMMON] unsigned int 
  9288 ;; Auto vars:     Size  Location     Type
  9289 ;;  wdtps           1    3[COMMON] unsigned char 
  9290 ;; Return value:  Size  Location     Type
  9291 ;;                  1    wreg      void 
  9292 ;; Registers used:
  9293 ;;		wreg, status,2, status,0, btemp+10, btemp+11, pclath, cstack
  9294 ;; Tracked objects:
  9295 ;;		On entry : 0/0
  9296 ;;		On exit  : 0/0
  9297 ;;		Unchanged: 0/0
  9298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9299 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9300 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9301 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9302 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9303 ;;Total ram usage:        4 bytes
  9304 ;; Hardware stack levels used:    1
  9305 ;; Hardware stack levels required when called:    8
  9306 ;; This function calls:
  9307 ;;		_resetWDT
  9308 ;; This function is called by:
  9309 ;;		_getADCValue
  9310 ;;		_sendMessage
  9311 ;;		_nrf24l01SendPacket
  9312 ;;		_hcsr04GetAerage
  9313 ;;		_sleepListren
  9314 ;; This function uses a non-reentrant model
  9315 ;;
  9316                           
  9317                           
  9318                           ;psect for function _sleepMs
  9319  09D2                     _sleepMs:	
  9320                           
  9321                           ;interface.c: 38: unsigned char wdtps;;interface.c: 39: for (wdtps = 0; wdtps <= 0b10010
      +                          ; wdtps++){
  9322                           
  9323                           ;incstack = 0
  9324                           ; Regs used in _sleepMs: [wreg+status,2+status,0+btemp+10+btemp+11+pclath+cstack]
  9325  09D2  01F3               	clrf	sleepMs@wdtps
  9326  09D3  3013               	movlw	19
  9327  09D4  0273               	subwf	sleepMs@wdtps,w
  9328  09D5  1803               	btfsc	3,0
  9329  09D6  29FB               	goto	l3883
  9330  09D7                     l3867:	
  9331                           
  9332                           ;interface.c: 40: if ((milliseconds >> wdtps) & 0b1){
  9333  09D7  0871               	movf	sleepMs@milliseconds+1,w
  9334  09D8  00FF               	movwf	127
  9335  09D9  0870               	movf	sleepMs@milliseconds,w
  9336  09DA  00FE               	movwf	126
  9337  09DB  0A73               	incf	sleepMs@wdtps,w
  9338  09DC  29DF               	goto	u4144
  9339  09DD                     u4145:	
  9340  09DD  36FF               	lsrf	127,f
  9341  09DE  0CFE               	rrf	126,f
  9342  09DF                     u4144:	
  9343  09DF  0B89               	decfsz	9,f
  9344  09E0  29DD               	goto	u4145
  9345  09E1  1C7E               	btfss	126,0
  9346  09E2  29F3               	goto	l3879
  9347  09E3                     l3869:	
  9348                           ;interface.c: 41: START_SLEEP:
  9349                           
  9350                           
  9351                           ;interface.c: 42: WDTCONbits.WDTPS = wdtps;
  9352  09E3  0873               	movf	sleepMs@wdtps,w
  9353  09E4  00F2               	movwf	??_sleepMs
  9354  09E5  0DF2               	rlf	??_sleepMs,f
  9355  09E6  0021               	movlb	1	; select bank1
  9356  09E7  0817               	movf	23,w	;volatile
  9357  09E8  0672               	xorwf	??_sleepMs,w
  9358  09E9  39C1               	andlw	-63
  9359  09EA  0672               	xorwf	??_sleepMs,w
  9360  09EB  0097               	movwf	23	;volatile
  9361  09EC  0063               	sleep	;# 
  9362                           
  9363                           ;interface.c: 44: __nop();
  9364  09ED  0000               	nop
  9365                           
  9366                           ;interface.c: 45: __nop();
  9367  09EE  0000               	nop
  9368                           
  9369                           ;interface.c: 47: if( STATUSbits.nTO || STATUSbits.nPD){
  9370  09EF  0020               	movlb	0	; select bank0
  9371  09F0  1E03               	btfss	3,4	;volatile
  9372  09F1  1983               	btfsc	3,3	;volatile
  9373                           
  9374                           ;interface.c: 48: goto START_SLEEP;
  9375  09F2  29E3               	goto	l3869
  9376  09F3                     l3879:	
  9377  09F3  3001               	movlw	1
  9378  09F4  00FF               	movwf	127
  9379  09F5  087F               	movf	127,w
  9380  09F6  07F3               	addwf	sleepMs@wdtps,f
  9381  09F7  3013               	movlw	19
  9382  09F8  0273               	subwf	sleepMs@wdtps,w
  9383  09F9  1C03               	skipc
  9384  09FA  29D7               	goto	l3867
  9385  09FB                     l3883:	
  9386                           
  9387                           ;interface.c: 49: };interface.c: 50: };interface.c: 51: };interface.c: 53: resetWDT();
  9388  09FB  3197  27CA         	fcall	_resetWDT
  9389  09FD  0008               	return
  9390  09FE                     __end_of_sleepMs:	
  9391                           
  9392                           	psect	text40
  9393  17CA                     __ptext40:	
  9394 ;; *************** function _resetWDT *****************
  9395 ;; Defined at:
  9396 ;;		line 31 in file "interface.c"
  9397 ;; Parameters:    Size  Location     Type
  9398 ;;		None
  9399 ;; Auto vars:     Size  Location     Type
  9400 ;;		None
  9401 ;; Return value:  Size  Location     Type
  9402 ;;                  1    wreg      void 
  9403 ;; Registers used:
  9404 ;;		wreg, status,2, status,0
  9405 ;; Tracked objects:
  9406 ;;		On entry : 0/0
  9407 ;;		On exit  : 0/0
  9408 ;;		Unchanged: 0/0
  9409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9414 ;;Total ram usage:        0 bytes
  9415 ;; Hardware stack levels used:    1
  9416 ;; Hardware stack levels required when called:    7
  9417 ;; This function calls:
  9418 ;;		Nothing
  9419 ;; This function is called by:
  9420 ;;		_sleepMs
  9421 ;; This function uses a non-reentrant model
  9422 ;;
  9423                           
  9424                           
  9425                           ;psect for function _resetWDT
  9426  17CA                     _resetWDT:	
  9427                           
  9428                           ;interface.c: 32: WDTCONbits.WDTPS = 0b01100;
  9429                           
  9430                           ;incstack = 0
  9431                           ; Regs used in _resetWDT: [wreg+status,2+status,0]
  9432  17CA  0021               	movlb	1	; select bank1
  9433  17CB  0817               	movf	23,w	;volatile
  9434  17CC  39C1               	andlw	-63
  9435  17CD  3818               	iorlw	24
  9436  17CE  0097               	movwf	23	;volatile
  9437  17CF  0064               	clrwdt	;# 
  9438  17D0  0008               	return
  9439  17D1                     __end_of_resetWDT:	
  9440                           
  9441                           	psect	text41
  9442  0F57                     __ptext41:	
  9443 ;; *************** function ___ftdiv *****************
  9444 ;; Defined at:
  9445 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  9446 ;; Parameters:    Size  Location     Type
  9447 ;;  f2              3   22[BANK0 ] float 
  9448 ;;  f1              3   25[BANK0 ] float 
  9449 ;; Auto vars:     Size  Location     Type
  9450 ;;  f3              3   30[BANK0 ] float 
  9451 ;;  sign            1   34[BANK0 ] unsigned char 
  9452 ;;  exp             1   33[BANK0 ] unsigned char 
  9453 ;;  cntr            1   29[BANK0 ] unsigned char 
  9454 ;; Return value:  Size  Location     Type
  9455 ;;                  3   22[BANK0 ] float 
  9456 ;; Registers used:
  9457 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9458 ;; Tracked objects:
  9459 ;;		On entry : 0/0
  9460 ;;		On exit  : 0/0
  9461 ;;		Unchanged: 0/0
  9462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9463 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9464 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9465 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9466 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9467 ;;Total ram usage:       13 bytes
  9468 ;; Hardware stack levels used:    1
  9469 ;; Hardware stack levels required when called:    8
  9470 ;; This function calls:
  9471 ;;		___ftpack
  9472 ;; This function is called by:
  9473 ;;		_getADCValue
  9474 ;;		_loop
  9475 ;;		_hcsr04GetAerage
  9476 ;; This function uses a non-reentrant model
  9477 ;;
  9478                           
  9479                           
  9480                           ;psect for function ___ftdiv
  9481  0F57                     ___ftdiv:	
  9482                           
  9483                           ;incstack = 0
  9484                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9485  0F57  0020               	movlb	0	; select bank0
  9486  0F58  0839               	movf	___ftdiv@f1,w
  9487  0F59  00FD               	movwf	125
  9488  0F5A  083A               	movf	___ftdiv@f1+1,w
  9489  0F5B  00FE               	movwf	126
  9490  0F5C  083B               	movf	___ftdiv@f1+2,w
  9491  0F5D  00FF               	movwf	127
  9492  0F5E  1003               	clrc
  9493  0F5F  0D7E               	rlf	126,w
  9494  0F60  0D7F               	rlf	127,w
  9495  0F61  00FF               	movwf	127
  9496  0F62  087F               	movf	127,w
  9497  0F63  00C1               	movwf	___ftdiv@exp
  9498  0F64  0841               	movf	___ftdiv@exp,w
  9499  0F65  1D03               	btfss	3,2
  9500  0F66  2F6E               	goto	l4335
  9501  0F67  3000               	movlw	0
  9502  0F68  00B6               	movwf	?___ftdiv
  9503  0F69  3000               	movlw	0
  9504  0F6A  00B7               	movwf	?___ftdiv+1
  9505  0F6B  3000               	movlw	0
  9506  0F6C  00B8               	movwf	?___ftdiv+2
  9507  0F6D  0008               	return
  9508  0F6E                     l4335:	
  9509  0F6E  0836               	movf	___ftdiv@f2,w
  9510  0F6F  00FD               	movwf	125
  9511  0F70  0837               	movf	___ftdiv@f2+1,w
  9512  0F71  00FE               	movwf	126
  9513  0F72  0838               	movf	___ftdiv@f2+2,w
  9514  0F73  00FF               	movwf	127
  9515  0F74  1003               	clrc
  9516  0F75  0D7E               	rlf	126,w
  9517  0F76  0D7F               	rlf	127,w
  9518  0F77  00FF               	movwf	127
  9519  0F78  087F               	movf	127,w
  9520  0F79  00C2               	movwf	___ftdiv@sign
  9521  0F7A  0842               	movf	___ftdiv@sign,w
  9522  0F7B  1D03               	btfss	3,2
  9523  0F7C  2F84               	goto	l4341
  9524  0F7D  3000               	movlw	0
  9525  0F7E  00B6               	movwf	?___ftdiv
  9526  0F7F  3000               	movlw	0
  9527  0F80  00B7               	movwf	?___ftdiv+1
  9528  0F81  3000               	movlw	0
  9529  0F82  00B8               	movwf	?___ftdiv+2
  9530  0F83  0008               	return
  9531  0F84                     l4341:	
  9532  0F84  3000               	movlw	0
  9533  0F85  00BE               	movwf	___ftdiv@f3
  9534  0F86  3000               	movlw	0
  9535  0F87  00BF               	movwf	___ftdiv@f3+1
  9536  0F88  3000               	movlw	0
  9537  0F89  00C0               	movwf	___ftdiv@f3+2
  9538  0F8A  3089               	movlw	137
  9539  0F8B  0742               	addwf	___ftdiv@sign,w
  9540  0F8C  00BC               	movwf	??___ftdiv
  9541  0F8D  083C               	movf	??___ftdiv,w
  9542  0F8E  02C1               	subwf	___ftdiv@exp,f
  9543  0F8F  0839               	movf	___ftdiv@f1,w
  9544  0F90  00FD               	movwf	125
  9545  0F91  083A               	movf	___ftdiv@f1+1,w
  9546  0F92  00FE               	movwf	126
  9547  0F93  083B               	movf	___ftdiv@f1+2,w
  9548  0F94  00FF               	movwf	127
  9549  0F95  3010               	movlw	16
  9550  0F96                     u4895:	
  9551  0F96  36FF               	lsrf	127,f
  9552  0F97  0CFE               	rrf	126,f
  9553  0F98  0CFD               	rrf	125,f
  9554  0F99  0B89               	decfsz	9,f
  9555  0F9A  2F96               	goto	u4895
  9556  0F9B  087D               	movf	125,w
  9557  0F9C  00FF               	movwf	127
  9558  0F9D  087F               	movf	127,w
  9559  0F9E  00C2               	movwf	___ftdiv@sign
  9560  0F9F  0836               	movf	___ftdiv@f2,w
  9561  0FA0  00FD               	movwf	125
  9562  0FA1  0837               	movf	___ftdiv@f2+1,w
  9563  0FA2  00FE               	movwf	126
  9564  0FA3  0838               	movf	___ftdiv@f2+2,w
  9565  0FA4  00FF               	movwf	127
  9566  0FA5  3010               	movlw	16
  9567  0FA6                     u4905:	
  9568  0FA6  36FF               	lsrf	127,f
  9569  0FA7  0CFE               	rrf	126,f
  9570  0FA8  0CFD               	rrf	125,f
  9571  0FA9  0B89               	decfsz	9,f
  9572  0FAA  2FA6               	goto	u4905
  9573  0FAB  087D               	movf	125,w
  9574  0FAC  00FF               	movwf	127
  9575  0FAD  087F               	movf	127,w
  9576  0FAE  06C2               	xorwf	___ftdiv@sign,f
  9577  0FAF  3080               	movlw	128
  9578  0FB0  00FF               	movwf	127
  9579  0FB1  087F               	movf	127,w
  9580  0FB2  05C2               	andwf	___ftdiv@sign,f
  9581  0FB3  17BA               	bsf	___ftdiv@f1+1,7
  9582  0FB4  30FF               	movlw	255
  9583  0FB5  05B9               	andwf	___ftdiv@f1,f
  9584  0FB6  30FF               	movlw	255
  9585  0FB7  05BA               	andwf	___ftdiv@f1+1,f
  9586  0FB8  3000               	movlw	0
  9587  0FB9  05BB               	andwf	___ftdiv@f1+2,f
  9588  0FBA  17B7               	bsf	___ftdiv@f2+1,7
  9589  0FBB  30FF               	movlw	255
  9590  0FBC  05B6               	andwf	___ftdiv@f2,f
  9591  0FBD  30FF               	movlw	255
  9592  0FBE  05B7               	andwf	___ftdiv@f2+1,f
  9593  0FBF  3000               	movlw	0
  9594  0FC0  05B8               	andwf	___ftdiv@f2+2,f
  9595  0FC1  3018               	movlw	24
  9596  0FC2  00FF               	movwf	127
  9597  0FC3  087F               	movf	127,w
  9598  0FC4  00BD               	movwf	___ftdiv@cntr
  9599  0FC5                     l4359:	
  9600  0FC5  3001               	movlw	1
  9601  0FC6                     u4915:	
  9602  0FC6  35BE               	lslf	___ftdiv@f3,f
  9603  0FC7  0DBF               	rlf	___ftdiv@f3+1,f
  9604  0FC8  0DC0               	rlf	___ftdiv@f3+2,f
  9605  0FC9  0B89               	decfsz	9,f
  9606  0FCA  2FC6               	goto	u4915
  9607  0FCB  0838               	movf	___ftdiv@f2+2,w
  9608  0FCC  023B               	subwf	___ftdiv@f1+2,w
  9609  0FCD  1D03               	skipz
  9610  0FCE  2FD5               	goto	u4925
  9611  0FCF  0837               	movf	___ftdiv@f2+1,w
  9612  0FD0  023A               	subwf	___ftdiv@f1+1,w
  9613  0FD1  1D03               	skipz
  9614  0FD2  2FD5               	goto	u4925
  9615  0FD3  0836               	movf	___ftdiv@f2,w
  9616  0FD4  0239               	subwf	___ftdiv@f1,w
  9617  0FD5                     u4925:	
  9618  0FD5  1C03               	skipc
  9619  0FD6  2FDE               	goto	l4367
  9620  0FD7  0836               	movf	___ftdiv@f2,w
  9621  0FD8  02B9               	subwf	___ftdiv@f1,f
  9622  0FD9  0837               	movf	___ftdiv@f2+1,w
  9623  0FDA  3BBA               	subwfb	___ftdiv@f1+1,f
  9624  0FDB  0838               	movf	___ftdiv@f2+2,w
  9625  0FDC  3BBB               	subwfb	___ftdiv@f1+2,f
  9626  0FDD  143E               	bsf	___ftdiv@f3,0
  9627  0FDE                     l4367:	
  9628  0FDE  3001               	movlw	1
  9629  0FDF                     u4935:	
  9630  0FDF  35B9               	lslf	___ftdiv@f1,f
  9631  0FE0  0DBA               	rlf	___ftdiv@f1+1,f
  9632  0FE1  0DBB               	rlf	___ftdiv@f1+2,f
  9633  0FE2  0B89               	decfsz	9,f
  9634  0FE3  2FDF               	goto	u4935
  9635  0FE4  3001               	movlw	1
  9636  0FE5  02BD               	subwf	___ftdiv@cntr,f
  9637  0FE6  1D03               	btfss	3,2
  9638  0FE7  2FC5               	goto	l4359
  9639  0FE8  083E               	movf	___ftdiv@f3,w
  9640  0FE9  00A7               	movwf	___ftpack@arg
  9641  0FEA  083F               	movf	___ftdiv@f3+1,w
  9642  0FEB  00A8               	movwf	___ftpack@arg+1
  9643  0FEC  0840               	movf	___ftdiv@f3+2,w
  9644  0FED  00A9               	movwf	___ftpack@arg+2
  9645  0FEE  0841               	movf	___ftdiv@exp,w
  9646  0FEF  00FF               	movwf	127
  9647  0FF0  087F               	movf	127,w
  9648  0FF1  00AA               	movwf	___ftpack@exp
  9649  0FF2  0842               	movf	___ftdiv@sign,w
  9650  0FF3  00FF               	movwf	127
  9651  0FF4  087F               	movf	127,w
  9652  0FF5  00AB               	movwf	___ftpack@sign
  9653  0FF6  318C  24A7         	fcall	___ftpack
  9654  0FF8  0020               	movlb	0	; select bank0
  9655  0FF9  0827               	movf	?___ftpack,w
  9656  0FFA  00B6               	movwf	?___ftdiv
  9657  0FFB  0828               	movf	?___ftpack+1,w
  9658  0FFC  00B7               	movwf	?___ftdiv+1
  9659  0FFD  0829               	movf	?___ftpack+2,w
  9660  0FFE  00B8               	movwf	?___ftdiv+2
  9661  0FFF  0008               	return
  9662  1000                     __end_of___ftdiv:	
  9663                           
  9664                           	psect	text42
  9665  033E                     __ptext42:	
  9666 ;; *************** function ___ftadd *****************
  9667 ;; Defined at:
  9668 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  9669 ;; Parameters:    Size  Location     Type
  9670 ;;  f1              3   12[BANK0 ] float 
  9671 ;;  f2              3   15[BANK0 ] float 
  9672 ;; Auto vars:     Size  Location     Type
  9673 ;;  exp1            1   21[BANK0 ] unsigned char 
  9674 ;;  exp2            1   20[BANK0 ] unsigned char 
  9675 ;;  sign            1   19[BANK0 ] unsigned char 
  9676 ;; Return value:  Size  Location     Type
  9677 ;;                  3   12[BANK0 ] float 
  9678 ;; Registers used:
  9679 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9680 ;; Tracked objects:
  9681 ;;		On entry : 0/0
  9682 ;;		On exit  : 0/0
  9683 ;;		Unchanged: 0/0
  9684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9685 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9687 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9688 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;Total ram usage:       10 bytes
  9690 ;; Hardware stack levels used:    1
  9691 ;; Hardware stack levels required when called:    8
  9692 ;; This function calls:
  9693 ;;		___ftpack
  9694 ;; This function is called by:
  9695 ;;		_getADCValue
  9696 ;;		_loop
  9697 ;;		_hcsr04GetAerage
  9698 ;;		___ftsub
  9699 ;; This function uses a non-reentrant model
  9700 ;;
  9701                           
  9702                           
  9703                           ;psect for function ___ftadd
  9704  033E                     ___ftadd:	
  9705                           
  9706                           ;incstack = 0
  9707                           ; Regs used in ___ftadd: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9708  033E  0020               	movlb	0	; select bank0
  9709  033F  082C               	movf	___ftadd@f1,w
  9710  0340  00FD               	movwf	125
  9711  0341  082D               	movf	___ftadd@f1+1,w
  9712  0342  00FE               	movwf	126
  9713  0343  082E               	movf	___ftadd@f1+2,w
  9714  0344  00FF               	movwf	127
  9715  0345  1003               	clrc
  9716  0346  0D7E               	rlf	126,w
  9717  0347  0D7F               	rlf	127,w
  9718  0348  00FF               	movwf	127
  9719  0349  087F               	movf	127,w
  9720  034A  00B5               	movwf	___ftadd@exp1
  9721  034B  082F               	movf	___ftadd@f2,w
  9722  034C  00FD               	movwf	125
  9723  034D  0830               	movf	___ftadd@f2+1,w
  9724  034E  00FE               	movwf	126
  9725  034F  0831               	movf	___ftadd@f2+2,w
  9726  0350  00FF               	movwf	127
  9727  0351  1003               	clrc
  9728  0352  0D7E               	rlf	126,w
  9729  0353  0D7F               	rlf	127,w
  9730  0354  00FF               	movwf	127
  9731  0355  087F               	movf	127,w
  9732  0356  00B4               	movwf	___ftadd@exp2
  9733  0357  0835               	movf	___ftadd@exp1,w
  9734  0358  1903               	btfsc	3,2
  9735  0359  2B66               	goto	l3771
  9736  035A  0834               	movf	___ftadd@exp2,w
  9737  035B  0235               	subwf	___ftadd@exp1,w
  9738  035C  1803               	skipnc
  9739  035D  2B6D               	goto	l3775
  9740  035E  0335               	decf	___ftadd@exp1,w
  9741  035F  3AFF               	xorlw	255
  9742  0360  0734               	addwf	___ftadd@exp2,w
  9743  0361  00B2               	movwf	??___ftadd
  9744  0362  3019               	movlw	25
  9745  0363  0232               	subwf	??___ftadd,w
  9746  0364  1C03               	skipc
  9747  0365  2B6D               	goto	l3775
  9748  0366                     l3771:	
  9749  0366  082F               	movf	___ftadd@f2,w
  9750  0367  00AC               	movwf	?___ftadd
  9751  0368  0830               	movf	___ftadd@f2+1,w
  9752  0369  00AD               	movwf	?___ftadd+1
  9753  036A  0831               	movf	___ftadd@f2+2,w
  9754  036B  00AE               	movwf	?___ftadd+2
  9755  036C  0008               	return
  9756  036D                     l3775:	
  9757  036D  0834               	movf	___ftadd@exp2,w
  9758  036E  1903               	btfsc	3,2
  9759  036F  0008               	return
  9760  0370  0835               	movf	___ftadd@exp1,w
  9761  0371  0234               	subwf	___ftadd@exp2,w
  9762  0372  1803               	skipnc
  9763  0373  2B7C               	goto	l3781
  9764  0374  0334               	decf	___ftadd@exp2,w
  9765  0375  3AFF               	xorlw	255
  9766  0376  0735               	addwf	___ftadd@exp1,w
  9767  0377  00B2               	movwf	??___ftadd
  9768  0378  3019               	movlw	25
  9769  0379  0232               	subwf	??___ftadd,w
  9770  037A  1803               	btfsc	3,0
  9771  037B  0008               	return
  9772  037C                     l3781:	
  9773  037C  3006               	movlw	6
  9774  037D  00FF               	movwf	127
  9775  037E  087F               	movf	127,w
  9776  037F  00B3               	movwf	___ftadd@sign
  9777  0380  1BAE               	btfsc	___ftadd@f1+2,7
  9778  0381  17B3               	bsf	___ftadd@sign,7
  9779  0382  1BB1               	btfsc	___ftadd@f2+2,7
  9780  0383  1733               	bsf	___ftadd@sign,6
  9781  0384  17AD               	bsf	___ftadd@f1+1,7
  9782  0385  30FF               	movlw	255
  9783  0386  05AC               	andwf	___ftadd@f1,f
  9784  0387  30FF               	movlw	255
  9785  0388  05AD               	andwf	___ftadd@f1+1,f
  9786  0389  3000               	movlw	0
  9787  038A  05AE               	andwf	___ftadd@f1+2,f
  9788  038B  17B0               	bsf	___ftadd@f2+1,7
  9789  038C  30FF               	movlw	255
  9790  038D  05AF               	andwf	___ftadd@f2,f
  9791  038E  30FF               	movlw	255
  9792  038F  05B0               	andwf	___ftadd@f2+1,f
  9793  0390  3000               	movlw	0
  9794  0391  05B1               	andwf	___ftadd@f2+2,f
  9795  0392  0834               	movf	___ftadd@exp2,w
  9796  0393  0235               	subwf	___ftadd@exp1,w
  9797  0394  1803               	skipnc
  9798  0395  2BB8               	goto	l3805
  9799  0396                     l3793:	
  9800  0396  3001               	movlw	1
  9801  0397                     u3935:	
  9802  0397  35AF               	lslf	___ftadd@f2,f
  9803  0398  0DB0               	rlf	___ftadd@f2+1,f
  9804  0399  0DB1               	rlf	___ftadd@f2+2,f
  9805  039A  0B89               	decfsz	9,f
  9806  039B  2B97               	goto	u3935
  9807  039C  3001               	movlw	1
  9808  039D  02B4               	subwf	___ftadd@exp2,f
  9809  039E  0834               	movf	___ftadd@exp2,w
  9810  039F  0635               	xorwf	___ftadd@exp1,w
  9811  03A0  1903               	skipnz
  9812  03A1  2BB3               	goto	l3803
  9813  03A2  3001               	movlw	1
  9814  03A3  02B3               	subwf	___ftadd@sign,f
  9815  03A4  0833               	movf	___ftadd@sign,w
  9816  03A5  3907               	andlw	7
  9817  03A6  1903               	btfsc	3,2
  9818  03A7  2BB3               	goto	l3803
  9819  03A8  2B96               	goto	l3793
  9820  03A9                     l3799:	
  9821  03A9  3001               	movlw	1
  9822  03AA                     u3965:	
  9823  03AA  36AE               	lsrf	___ftadd@f1+2,f
  9824  03AB  0CAD               	rrf	___ftadd@f1+1,f
  9825  03AC  0CAC               	rrf	___ftadd@f1,f
  9826  03AD  0B89               	decfsz	9,f
  9827  03AE  2BAA               	goto	u3965
  9828  03AF  3001               	movlw	1
  9829  03B0  00FF               	movwf	127
  9830  03B1  087F               	movf	127,w
  9831  03B2  07B5               	addwf	___ftadd@exp1,f
  9832  03B3                     l3803:	
  9833  03B3  0835               	movf	___ftadd@exp1,w
  9834  03B4  0634               	xorwf	___ftadd@exp2,w
  9835  03B5  1903               	btfsc	3,2
  9836  03B6  2BDD               	goto	l781
  9837  03B7  2BA9               	goto	l3799
  9838  03B8                     l3805:	
  9839  03B8  0835               	movf	___ftadd@exp1,w
  9840  03B9  0234               	subwf	___ftadd@exp2,w
  9841  03BA  1803               	skipnc
  9842  03BB  2BDD               	goto	l781
  9843  03BC                     l3807:	
  9844  03BC  3001               	movlw	1
  9845  03BD                     u3995:	
  9846  03BD  35AC               	lslf	___ftadd@f1,f
  9847  03BE  0DAD               	rlf	___ftadd@f1+1,f
  9848  03BF  0DAE               	rlf	___ftadd@f1+2,f
  9849  03C0  0B89               	decfsz	9,f
  9850  03C1  2BBD               	goto	u3995
  9851  03C2  3001               	movlw	1
  9852  03C3  02B5               	subwf	___ftadd@exp1,f
  9853  03C4  0834               	movf	___ftadd@exp2,w
  9854  03C5  0635               	xorwf	___ftadd@exp1,w
  9855  03C6  1903               	skipnz
  9856  03C7  2BD9               	goto	l3817
  9857  03C8  3001               	movlw	1
  9858  03C9  02B3               	subwf	___ftadd@sign,f
  9859  03CA  0833               	movf	___ftadd@sign,w
  9860  03CB  3907               	andlw	7
  9861  03CC  1903               	btfsc	3,2
  9862  03CD  2BD9               	goto	l3817
  9863  03CE  2BBC               	goto	l3807
  9864  03CF                     l3813:	
  9865  03CF  3001               	movlw	1
  9866  03D0                     u4025:	
  9867  03D0  36B1               	lsrf	___ftadd@f2+2,f
  9868  03D1  0CB0               	rrf	___ftadd@f2+1,f
  9869  03D2  0CAF               	rrf	___ftadd@f2,f
  9870  03D3  0B89               	decfsz	9,f
  9871  03D4  2BD0               	goto	u4025
  9872  03D5  3001               	movlw	1
  9873  03D6  00FF               	movwf	127
  9874  03D7  087F               	movf	127,w
  9875  03D8  07B4               	addwf	___ftadd@exp2,f
  9876  03D9                     l3817:	
  9877  03D9  0835               	movf	___ftadd@exp1,w
  9878  03DA  0634               	xorwf	___ftadd@exp2,w
  9879  03DB  1D03               	skipz
  9880  03DC  2BCF               	goto	l3813
  9881  03DD                     l781:	
  9882  03DD  1FB3               	btfss	___ftadd@sign,7
  9883  03DE  2BEF               	goto	l3821
  9884  03DF  30FF               	movlw	255
  9885  03E0  06AC               	xorwf	___ftadd@f1,f
  9886  03E1  30FF               	movlw	255
  9887  03E2  06AD               	xorwf	___ftadd@f1+1,f
  9888  03E3  30FF               	movlw	255
  9889  03E4  06AE               	xorwf	___ftadd@f1+2,f
  9890  03E5  3001               	movlw	1
  9891  03E6  07AC               	addwf	___ftadd@f1,f
  9892  03E7  3000               	movlw	0
  9893  03E8  1803               	skipnc
  9894  03E9  3001               	movlw	1
  9895  03EA  07AD               	addwf	___ftadd@f1+1,f
  9896  03EB  3000               	movlw	0
  9897  03EC  1803               	skipnc
  9898  03ED  3001               	movlw	1
  9899  03EE  07AE               	addwf	___ftadd@f1+2,f
  9900  03EF                     l3821:	
  9901  03EF  1F33               	btfss	___ftadd@sign,6
  9902  03F0  2C01               	goto	l3825
  9903  03F1  30FF               	movlw	255
  9904  03F2  06AF               	xorwf	___ftadd@f2,f
  9905  03F3  30FF               	movlw	255
  9906  03F4  06B0               	xorwf	___ftadd@f2+1,f
  9907  03F5  30FF               	movlw	255
  9908  03F6  06B1               	xorwf	___ftadd@f2+2,f
  9909  03F7  3001               	movlw	1
  9910  03F8  07AF               	addwf	___ftadd@f2,f
  9911  03F9  3000               	movlw	0
  9912  03FA  1803               	skipnc
  9913  03FB  3001               	movlw	1
  9914  03FC  07B0               	addwf	___ftadd@f2+1,f
  9915  03FD  3000               	movlw	0
  9916  03FE  1803               	skipnc
  9917  03FF  3001               	movlw	1
  9918  0400  07B1               	addwf	___ftadd@f2+2,f
  9919  0401                     l3825:	
  9920  0401  01B3               	clrf	___ftadd@sign
  9921  0402  082C               	movf	___ftadd@f1,w
  9922  0403  07AF               	addwf	___ftadd@f2,f
  9923  0404  082D               	movf	___ftadd@f1+1,w
  9924  0405  3DB0               	addwfc	___ftadd@f2+1,f
  9925  0406  082E               	movf	___ftadd@f1+2,w
  9926  0407  3DB1               	addwfc	___ftadd@f2+2,f
  9927  0408  1FB1               	btfss	___ftadd@f2+2,7
  9928  0409  2C1C               	goto	l3835
  9929  040A  30FF               	movlw	255
  9930  040B  06AF               	xorwf	___ftadd@f2,f
  9931  040C  30FF               	movlw	255
  9932  040D  06B0               	xorwf	___ftadd@f2+1,f
  9933  040E  30FF               	movlw	255
  9934  040F  06B1               	xorwf	___ftadd@f2+2,f
  9935  0410  3001               	movlw	1
  9936  0411  07AF               	addwf	___ftadd@f2,f
  9937  0412  3000               	movlw	0
  9938  0413  1803               	skipnc
  9939  0414  3001               	movlw	1
  9940  0415  07B0               	addwf	___ftadd@f2+1,f
  9941  0416  3000               	movlw	0
  9942  0417  1803               	skipnc
  9943  0418  3001               	movlw	1
  9944  0419  07B1               	addwf	___ftadd@f2+2,f
  9945  041A  01B3               	clrf	___ftadd@sign
  9946  041B  0AB3               	incf	___ftadd@sign,f
  9947  041C                     l3835:	
  9948  041C  082F               	movf	___ftadd@f2,w
  9949  041D  00A7               	movwf	___ftpack@arg
  9950  041E  0830               	movf	___ftadd@f2+1,w
  9951  041F  00A8               	movwf	___ftpack@arg+1
  9952  0420  0831               	movf	___ftadd@f2+2,w
  9953  0421  00A9               	movwf	___ftpack@arg+2
  9954  0422  0835               	movf	___ftadd@exp1,w
  9955  0423  00FF               	movwf	127
  9956  0424  087F               	movf	127,w
  9957  0425  00AA               	movwf	___ftpack@exp
  9958  0426  0833               	movf	___ftadd@sign,w
  9959  0427  00FF               	movwf	127
  9960  0428  087F               	movf	127,w
  9961  0429  00AB               	movwf	___ftpack@sign
  9962  042A  318C  24A7         	fcall	___ftpack
  9963  042C  0020               	movlb	0	; select bank0
  9964  042D  0827               	movf	?___ftpack,w
  9965  042E  00AC               	movwf	?___ftadd
  9966  042F  0828               	movf	?___ftpack+1,w
  9967  0430  00AD               	movwf	?___ftadd+1
  9968  0431  0829               	movf	?___ftpack+2,w
  9969  0432  00AE               	movwf	?___ftadd+2
  9970  0433  0008               	return
  9971  0434                     __end_of___ftadd:	
  9972                           
  9973                           	psect	text43
  9974  090A                     __ptext43:	
  9975 ;; *************** function ___awtoft *****************
  9976 ;; Defined at:
  9977 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9978 ;; Parameters:    Size  Location     Type
  9979 ;;  c               2    0[COMMON] int 
  9980 ;; Auto vars:     Size  Location     Type
  9981 ;;  sign            1    3[COMMON] unsigned char 
  9982 ;; Return value:  Size  Location     Type
  9983 ;;                  3    0[COMMON] float 
  9984 ;; Registers used:
  9985 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9986 ;; Tracked objects:
  9987 ;;		On entry : 0/0
  9988 ;;		On exit  : 0/0
  9989 ;;		Unchanged: 0/0
  9990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9991 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9992 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9994 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9995 ;;Total ram usage:        4 bytes
  9996 ;; Hardware stack levels used:    1
  9997 ;; Hardware stack levels required when called:    8
  9998 ;; This function calls:
  9999 ;;		___ftpack
 10000 ;; This function is called by:
 10001 ;;		_getADCValue
 10002 ;; This function uses a non-reentrant model
 10003 ;;
 10004                           
 10005                           
 10006                           ;psect for function ___awtoft
 10007  090A                     ___awtoft:	
 10008                           
 10009                           ;incstack = 0
 10010                           ; Regs used in ___awtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
 10011  090A  01F3               	clrf	___awtoft@sign
 10012  090B  1FF1               	btfss	___awtoft@c+1,7
 10013  090C  2914               	goto	l4325
 10014  090D  09F0               	comf	___awtoft@c,f
 10015  090E  09F1               	comf	___awtoft@c+1,f
 10016  090F  0AF0               	incf	___awtoft@c,f
 10017  0910  1903               	skipnz
 10018  0911  0AF1               	incf	___awtoft@c+1,f
 10019  0912  01F3               	clrf	___awtoft@sign
 10020  0913  0AF3               	incf	___awtoft@sign,f
 10021  0914                     l4325:	
 10022  0914  0870               	movf	___awtoft@c,w
 10023  0915  0020               	movlb	0	; select bank0
 10024  0916  00A7               	movwf	___ftpack@arg
 10025  0917  0871               	movf	___awtoft@c+1,w
 10026  0918  00A8               	movwf	___ftpack@arg+1
 10027  0919  01A9               	clrf	___ftpack@arg+2
 10028  091A  308E               	movlw	142
 10029  091B  00FF               	movwf	127
 10030  091C  087F               	movf	127,w
 10031  091D  00AA               	movwf	___ftpack@exp
 10032  091E  0873               	movf	___awtoft@sign,w
 10033  091F  00FF               	movwf	127
 10034  0920  087F               	movf	127,w
 10035  0921  00AB               	movwf	___ftpack@sign
 10036  0922  318C  24A7         	fcall	___ftpack
 10037  0924  0020               	movlb	0	; select bank0
 10038  0925  0827               	movf	?___ftpack,w
 10039  0926  00F0               	movwf	?___awtoft
 10040  0927  0828               	movf	?___ftpack+1,w
 10041  0928  00F1               	movwf	?___awtoft+1
 10042  0929  0829               	movf	?___ftpack+2,w
 10043  092A  00F2               	movwf	?___awtoft+2
 10044  092B  0008               	return
 10045  092C                     __end_of___awtoft:	
 10046                           
 10047                           	psect	text44
 10048  0CA7                     __ptext44:	
 10049 ;; *************** function ___ftpack *****************
 10050 ;; Defined at:
 10051 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
 10052 ;; Parameters:    Size  Location     Type
 10053 ;;  arg             3    7[BANK0 ] unsigned um
 10054 ;;  exp             1   10[BANK0 ] unsigned char 
 10055 ;;  sign            1   11[BANK0 ] unsigned char 
 10056 ;; Auto vars:     Size  Location     Type
 10057 ;;		None
 10058 ;; Return value:  Size  Location     Type
 10059 ;;                  3    7[BANK0 ] float 
 10060 ;; Registers used:
 10061 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
 10062 ;; Tracked objects:
 10063 ;;		On entry : 0/0
 10064 ;;		On exit  : 0/0
 10065 ;;		Unchanged: 0/0
 10066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10067 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10070 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10071 ;;Total ram usage:        5 bytes
 10072 ;; Hardware stack levels used:    1
 10073 ;; Hardware stack levels required when called:    7
 10074 ;; This function calls:
 10075 ;;		Nothing
 10076 ;; This function is called by:
 10077 ;;		___awtoft
 10078 ;;		___ftadd
 10079 ;;		___ftdiv
 10080 ;;		___ftmul
 10081 ;;		___lltoft
 10082 ;;		___lwtoft
 10083 ;; This function uses a non-reentrant model
 10084 ;;
 10085                           
 10086                           
 10087                           ;psect for function ___ftpack
 10088  0CA7                     ___ftpack:	
 10089                           
 10090                           ;incstack = 0
 10091                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+9-btemp+11]
 10092  0CA7  0020               	movlb	0	; select bank0
 10093  0CA8  082A               	movf	___ftpack@exp,w
 10094  0CA9  1903               	btfsc	3,2
 10095  0CAA  2CB0               	goto	l3667
 10096  0CAB  0829               	movf	___ftpack@arg+2,w
 10097  0CAC  0428               	iorwf	___ftpack@arg+1,w
 10098  0CAD  0427               	iorwf	___ftpack@arg,w
 10099  0CAE  1D03               	skipz
 10100  0CAF  2CC1               	goto	l3675
 10101  0CB0                     l3667:	
 10102  0CB0  3000               	movlw	0
 10103  0CB1  00A7               	movwf	?___ftpack
 10104  0CB2  3000               	movlw	0
 10105  0CB3  00A8               	movwf	?___ftpack+1
 10106  0CB4  3000               	movlw	0
 10107  0CB5  00A9               	movwf	?___ftpack+2
 10108  0CB6  0008               	return
 10109  0CB7                     l3671:	
 10110  0CB7  3001               	movlw	1
 10111  0CB8  00FF               	movwf	127
 10112  0CB9  087F               	movf	127,w
 10113  0CBA  07AA               	addwf	___ftpack@exp,f
 10114  0CBB  3001               	movlw	1
 10115  0CBC                     u3615:	
 10116  0CBC  36A9               	lsrf	___ftpack@arg+2,f
 10117  0CBD  0CA8               	rrf	___ftpack@arg+1,f
 10118  0CBE  0CA7               	rrf	___ftpack@arg,f
 10119  0CBF  0B89               	decfsz	9,f
 10120  0CC0  2CBC               	goto	u3615
 10121  0CC1                     l3675:	
 10122  0CC1  30FE               	movlw	254
 10123  0CC2  0529               	andwf	___ftpack@arg+2,w
 10124  0CC3  1903               	btfsc	3,2
 10125  0CC4  2CDA               	goto	l3683
 10126  0CC5  2CB7               	goto	l3671
 10127  0CC6                     l3677:	
 10128  0CC6  3001               	movlw	1
 10129  0CC7  00FF               	movwf	127
 10130  0CC8  087F               	movf	127,w
 10131  0CC9  07AA               	addwf	___ftpack@exp,f
 10132  0CCA  3001               	movlw	1
 10133  0CCB  07A7               	addwf	___ftpack@arg,f
 10134  0CCC  3000               	movlw	0
 10135  0CCD  1803               	skipnc
 10136  0CCE  3001               	movlw	1
 10137  0CCF  07A8               	addwf	___ftpack@arg+1,f
 10138  0CD0  3000               	movlw	0
 10139  0CD1  1803               	skipnc
 10140  0CD2  3001               	movlw	1
 10141  0CD3  07A9               	addwf	___ftpack@arg+2,f
 10142  0CD4  3001               	movlw	1
 10143  0CD5                     u3635:	
 10144  0CD5  36A9               	lsrf	___ftpack@arg+2,f
 10145  0CD6  0CA8               	rrf	___ftpack@arg+1,f
 10146  0CD7  0CA7               	rrf	___ftpack@arg,f
 10147  0CD8  0B89               	decfsz	9,f
 10148  0CD9  2CD5               	goto	u3635
 10149  0CDA                     l3683:	
 10150  0CDA  30FF               	movlw	255
 10151  0CDB  0529               	andwf	___ftpack@arg+2,w
 10152  0CDC  1903               	btfsc	3,2
 10153  0CDD  2CE7               	goto	l3687
 10154  0CDE  2CC6               	goto	l3677
 10155  0CDF                     l3685:	
 10156  0CDF  3001               	movlw	1
 10157  0CE0  02AA               	subwf	___ftpack@exp,f
 10158  0CE1  3001               	movlw	1
 10159  0CE2                     u3655:	
 10160  0CE2  35A7               	lslf	___ftpack@arg,f
 10161  0CE3  0DA8               	rlf	___ftpack@arg+1,f
 10162  0CE4  0DA9               	rlf	___ftpack@arg+2,f
 10163  0CE5  0B89               	decfsz	9,f
 10164  0CE6  2CE2               	goto	u3655
 10165  0CE7                     l3687:	
 10166  0CE7  1BA8               	btfsc	___ftpack@arg+1,7
 10167  0CE8  2CED               	goto	l757
 10168  0CE9  3002               	movlw	2
 10169  0CEA  022A               	subwf	___ftpack@exp,w
 10170  0CEB  1803               	skipnc
 10171  0CEC  2CDF               	goto	l3685
 10172  0CED                     l757:	
 10173  0CED  182A               	btfsc	___ftpack@exp,0
 10174  0CEE  2CF5               	goto	l758
 10175  0CEF  30FF               	movlw	255
 10176  0CF0  05A7               	andwf	___ftpack@arg,f
 10177  0CF1  307F               	movlw	127
 10178  0CF2  05A8               	andwf	___ftpack@arg+1,f
 10179  0CF3  30FF               	movlw	255
 10180  0CF4  05A9               	andwf	___ftpack@arg+2,f
 10181  0CF5                     l758:	
 10182  0CF5  1003               	clrc
 10183  0CF6  0CAA               	rrf	___ftpack@exp,f
 10184  0CF7  082A               	movf	___ftpack@exp,w
 10185  0CF8  00FD               	movwf	125
 10186  0CF9  01FE               	clrf	126
 10187  0CFA  01FF               	clrf	127
 10188  0CFB  3010               	movlw	16
 10189  0CFC                     u3695:	
 10190  0CFC  35FD               	lslf	125,f
 10191  0CFD  0DFE               	rlf	126,f
 10192  0CFE  0DFF               	rlf	127,f
 10193  0CFF  0B89               	decfsz	9,f
 10194  0D00  2CFC               	goto	u3695
 10195  0D01  087D               	movf	125,w
 10196  0D02  04A7               	iorwf	___ftpack@arg,f
 10197  0D03  087E               	movf	126,w
 10198  0D04  04A8               	iorwf	___ftpack@arg+1,f
 10199  0D05  087F               	movf	127,w
 10200  0D06  04A9               	iorwf	___ftpack@arg+2,f
 10201  0D07  082B               	movf	___ftpack@sign,w
 10202  0D08  1903               	btfsc	3,2
 10203  0D09  0008               	return
 10204  0D0A  17A9               	bsf	___ftpack@arg+2,7
 10205  0D0B  0008               	return
 10206  0D0C                     __end_of___ftpack:	
 10207                           
 10208                           	psect	text45
 10209  082D                     __ptext45:	
 10210 ;; *************** function _hcsr04Init *****************
 10211 ;; Defined at:
 10212 ;;		line 8 in file "HC-SR04.c"
 10213 ;; Parameters:    Size  Location     Type
 10214 ;;		None
 10215 ;; Auto vars:     Size  Location     Type
 10216 ;;		None
 10217 ;; Return value:  Size  Location     Type
 10218 ;;                  1    wreg      void 
 10219 ;; Registers used:
 10220 ;;		wreg, status,2, status,0
 10221 ;; Tracked objects:
 10222 ;;		On entry : 0/0
 10223 ;;		On exit  : 0/0
 10224 ;;		Unchanged: 0/0
 10225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10230 ;;Total ram usage:        0 bytes
 10231 ;; Hardware stack levels used:    1
 10232 ;; Hardware stack levels required when called:    7
 10233 ;; This function calls:
 10234 ;;		Nothing
 10235 ;; This function is called by:
 10236 ;;		_main
 10237 ;; This function uses a non-reentrant model
 10238 ;;
 10239                           
 10240                           
 10241                           ;psect for function _hcsr04Init
 10242  082D                     _hcsr04Init:	
 10243                           
 10244                           ;HC-SR04.c: 11: IOCAPbits.IOCAP3 = 1;
 10245                           
 10246                           ;incstack = 0
 10247                           ; Regs used in _hcsr04Init: [wreg+status,2+status,0]
 10248  082D  0027               	movlb	7	; select bank7
 10249  082E  1591               	bsf	17,3	;volatile
 10250                           
 10251                           ;HC-SR04.c: 12: PIE0bits.IOCIE = 1;
 10252  082F  0021               	movlb	1	; select bank1
 10253  0830  1610               	bsf	16,4	;volatile
 10254                           
 10255                           ;HC-SR04.c: 15: TRISCbits.TRISC4 = 0;
 10256  0831  120E               	bcf	14,4	;volatile
 10257                           
 10258                           ;HC-SR04.c: 16: PORTCbits.RC4 = 0;
 10259  0832  0020               	movlb	0	; select bank0
 10260  0833  120E               	bcf	14,4	;volatile
 10261                           
 10262                           ;HC-SR04.c: 17: WPUAbits.WPUA3 = 0;
 10263  0834  0024               	movlb	4	; select bank4
 10264  0835  118C               	bcf	12,3	;volatile
 10265                           
 10266                           ;HC-SR04.c: 20: T1CONbits.TMR1ON = 0;
 10267  0836  0020               	movlb	0	; select bank0
 10268  0837  101B               	bcf	27,0	;volatile
 10269                           
 10270                           ;HC-SR04.c: 21: T1CONbits.TMR1CS = 0b01;
 10271  0838  081B               	movf	27,w	;volatile
 10272  0839  393F               	andlw	-193
 10273  083A  3840               	iorlw	64
 10274  083B  009B               	movwf	27	;volatile
 10275                           
 10276                           ;HC-SR04.c: 22: T1CONbits.T1CKPS = 0b00;
 10277  083C  30CF               	movlw	-49
 10278  083D  059B               	andwf	27,f	;volatile
 10279                           
 10280                           ;HC-SR04.c: 23: T1CONbits.T1SYNC = 1;
 10281  083E  151B               	bsf	27,2	;volatile
 10282                           
 10283                           ;HC-SR04.c: 24: T1GCONbits.TMR1GE = 0;
 10284  083F  139C               	bcf	28,7	;volatile
 10285  0840  0008               	return
 10286  0841                     __end_of_hcsr04Init:	
 10287                           
 10288                           	psect	intentry
 10289  0004                     __pintentry:	
 10290 ;; *************** function _ISR *****************
 10291 ;; Defined at:
 10292 ;;		line 13 in file "main.c"
 10293 ;; Parameters:    Size  Location     Type
 10294 ;;		None
 10295 ;; Auto vars:     Size  Location     Type
 10296 ;;		None
 10297 ;; Return value:  Size  Location     Type
 10298 ;;                  1    wreg      void 
 10299 ;; Registers used:
 10300 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
 10301 ;; Tracked objects:
 10302 ;;		On entry : 0/0
 10303 ;;		On exit  : 0/0
 10304 ;;		Unchanged: 0/0
 10305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10309 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10310 ;;Total ram usage:        7 bytes
 10311 ;; Hardware stack levels used:    1
 10312 ;; Hardware stack levels required when called:    6
 10313 ;; This function calls:
 10314 ;;		_hcsr04ISR
 10315 ;;		_nrf24l01ISR
 10316 ;; This function is called by:
 10317 ;;		Interrupt level 1
 10318 ;; This function uses a non-reentrant model
 10319 ;;
 10320                           
 10321  0004                     _ISR:	
 10322                           
 10323                           ;incstack = 0
 10324                           ; Regs used in _ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+cs
      +                          tack]
 10325  0004  3180               	pagesel	$
 10326  0005  0874               	movf	116,w
 10327  0006  0020               	movlb	0	; select bank0
 10328  0007  00A0               	movwf	??_ISR
 10329  0008  0875               	movf	117,w
 10330  0009  00A1               	movwf	??_ISR+1
 10331  000A  087C               	movf	124,w
 10332  000B  00A2               	movwf	??_ISR+2
 10333  000C  087D               	movf	125,w
 10334  000D  00A3               	movwf	??_ISR+3
 10335  000E  087E               	movf	126,w
 10336  000F  00A4               	movwf	??_ISR+4
 10337  0010  087F               	movf	127,w
 10338  0011  00A5               	movwf	??_ISR+5
 10339  0012  30A6               	movlw	low ___int_sp
 10340  0013  0086               	movwf	6
 10341  0014  3022               	movlw	high ___int_sp
 10342  0015  0087               	movwf	7
 10343  0016  0875               	movf	117,w
 10344  0017  00A6               	movwf	??_ISR+6
 10345                           
 10346                           ;main.c: 15: if (IOCAFbits.IOCAF3){
 10347  0018  0027               	movlb	7	; select bank7
 10348  0019  1D93               	btfss	19,3	;volatile
 10349  001A  2820               	goto	i1l4777
 10350                           
 10351                           ;main.c: 16: hcsr04ISR();
 10352  001B  3197  27BF  3180   	fcall	_hcsr04ISR
 10353                           
 10354                           ;main.c: 17: IOCAFbits.IOCAF3 = 0;
 10355  001E  0027               	movlb	7	; select bank7
 10356  001F  1193               	bcf	19,3	;volatile
 10357  0020                     i1l4777:	
 10358                           
 10359                           ;main.c: 18: };main.c: 20: if (PIR0bits.INTF){
 10360  0020  0020               	movlb	0	; select bank0
 10361  0021  1C10               	btfss	16,0	;volatile
 10362  0022  2827               	goto	i1l4783
 10363                           
 10364                           ;main.c: 21: nrf24l01ISR();
 10365  0023  318B  23C1         	fcall	_nrf24l01ISR
 10366                           
 10367                           ;main.c: 22: PIR0bits.INTF = 0;
 10368  0025  0020               	movlb	0	; select bank0
 10369  0026  1010               	bcf	16,0	;volatile
 10370  0027                     i1l4783:	
 10371                           
 10372                           ;main.c: 23: };main.c: 25: if (PIR1bits.ADIF){
 10373  0027  1B11               	btfsc	17,6	;volatile
 10374                           
 10375                           ;main.c: 26: PIR1bits.ADIF = 0;
 10376  0028  1311               	bcf	17,6	;volatile
 10377  0029  0826               	movf	??_ISR+6,w
 10378  002A  00FF               	movwf	127
 10379  002B  0825               	movf	??_ISR+5,w
 10380  002C  00FE               	movwf	126
 10381  002D  0824               	movf	??_ISR+4,w
 10382  002E  00FD               	movwf	125
 10383  002F  0823               	movf	??_ISR+3,w
 10384  0030  00FC               	movwf	124
 10385  0031  0822               	movf	??_ISR+2,w
 10386  0032  00F5               	movwf	117
 10387  0033  0821               	movf	??_ISR+1,w
 10388  0034  00F4               	movwf	116
 10389  0035  0009               	retfie
 10390  0036                     __end_of_ISR:	
 10391                           
 10392                           	psect	text47
 10393  0BC1                     __ptext47:	
 10394 ;; *************** function _nrf24l01ISR *****************
 10395 ;; Defined at:
 10396 ;;		line 190 in file "nrf24l01.c"
 10397 ;; Parameters:    Size  Location     Type
 10398 ;;		None
 10399 ;; Auto vars:     Size  Location     Type
 10400 ;;		None
 10401 ;; Return value:  Size  Location     Type
 10402 ;;                  1    wreg      void 
 10403 ;; Registers used:
 10404 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
 10405 ;; Tracked objects:
 10406 ;;		On entry : 0/0
 10407 ;;		On exit  : 0/0
 10408 ;;		Unchanged: 0/0
 10409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10414 ;;Total ram usage:        0 bytes
 10415 ;; Hardware stack levels used:    1
 10416 ;; Hardware stack levels required when called:    5
 10417 ;; This function calls:
 10418 ;;		_nrf24l01Send
 10419 ;;		_nrf24l01Service
 10420 ;;		_nrf24l01SetRXMode
 10421 ;; This function is called by:
 10422 ;;		_ISR
 10423 ;; This function uses a non-reentrant model
 10424 ;;
 10425                           
 10426                           
 10427                           ;psect for function _nrf24l01ISR
 10428  0BC1                     _nrf24l01ISR:	
 10429                           
 10430                           ;nrf24l01.c: 192: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
 10431                           
 10432                           ;incstack = 0
 10433                           ; Regs used in _nrf24l01ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+p
      +                          clath]
 10434  0BC1  3000               	movlw	0
 10435  0BC2  001E               	movwi fsr1++
 10436  0BC3  3007               	movlw	7
 10437  0BC4  3188  201A  318B   	fcall	_nrf24l01Send
 10438  0BC7  00FF               	movwf	127
 10439  0BC8  087F               	movf	127,w
 10440  0BC9  0020               	movlb	0	; select bank0
 10441  0BCA  00E5               	movwf	_status+2	;volatile
 10442                           
 10443                           ;nrf24l01.c: 195: if (status.statusRegister.RX_DR){
 10444  0BCB  1F65               	btfss	_status+2,6	;volatile
 10445  0BCC  2BD9               	goto	i1l4699
 10446                           
 10447                           ;nrf24l01.c: 198: if (status.RX == 0){
 10448  0BCD  0864               	movf	_status+1,w	;volatile
 10449  0BCE  1D03               	btfss	3,2
 10450  0BCF  2BD5               	goto	i1l294
 10451                           
 10452                           ;nrf24l01.c: 199: status.RX = 1;
 10453  0BD0  3001               	movlw	1
 10454  0BD1  00FF               	movwf	127
 10455  0BD2  087F               	movf	127,w
 10456  0BD3  00E4               	movwf	_status+1	;volatile
 10457                           
 10458                           ;nrf24l01.c: 200: }
 10459  0BD4  2BD6               	goto	i1l4697
 10460  0BD5                     i1l294:	
 10461                           
 10462                           ;nrf24l01.c: 202: else{;nrf24l01.c: 203: status.statusRegister.RX_DR = 0;
 10463  0BD5  1365               	bcf	_status+2,6	;volatile
 10464  0BD6                     i1l4697:	
 10465                           
 10466                           ;nrf24l01.c: 204: };nrf24l01.c: 206: nrf24l01Service();
 10467  0BD6  318E  26B2  318B   	fcall	_nrf24l01Service
 10468  0BD9                     i1l4699:	
 10469                           
 10470                           ;nrf24l01.c: 207: };nrf24l01.c: 209: if (status.statusRegister.TX_DS){
 10471  0BD9  0020               	movlb	0	; select bank0
 10472  0BDA  1EE5               	btfss	_status+2,5	;volatile
 10473  0BDB  2C03               	goto	i1l4717
 10474                           
 10475                           ;nrf24l01.c: 212: status.TX = 3;
 10476  0BDC  3003               	movlw	3
 10477  0BDD  00FF               	movwf	127
 10478  0BDE  087F               	movf	127,w
 10479  0BDF  00E3               	movwf	_status	;volatile
 10480                           
 10481                           ;nrf24l01.c: 214: if (lastTXPacket->packetData.ACKRequest){
 10482  0BE0  0868               	movf	_lastTXPacket,w
 10483  0BE1  0084               	movwf	4
 10484  0BE2  3001               	movlw	1	; select bank2/3
 10485  0BE3  0085               	movwf	5
 10486  0BE4  1D00               	btfss	0,2
 10487  0BE5  2BF3               	goto	i1l4709
 10488                           
 10489                           ;nrf24l01.c: 216: status.TX = 4;
 10490  0BE6  3004               	movlw	4
 10491  0BE7  00FF               	movwf	127
 10492  0BE8  087F               	movf	127,w
 10493  0BE9  00E3               	movwf	_status	;volatile
 10494                           
 10495                           ;nrf24l01.c: 217: status.retryCount = 0xFF;
 10496  0BEA  30FF               	movlw	255
 10497  0BEB  00FF               	movwf	127
 10498  0BEC  087F               	movf	127,w
 10499  0BED  00E7               	movwf	_status+4	;volatile
 10500                           
 10501                           ;nrf24l01.c: 218: nrf24l01SetRXMode(1);
 10502  0BEE  3001               	movlw	1
 10503  0BEF  318A  22C4  318B   	fcall	_nrf24l01SetRXMode
 10504                           
 10505                           ;nrf24l01.c: 219: }else{
 10506  0BF2  2BF5               	goto	i1l4711
 10507  0BF3                     i1l4709:	
 10508                           
 10509                           ;nrf24l01.c: 220: status.TX = 0;
 10510  0BF3  0020               	movlb	0	; select bank0
 10511  0BF4  01E3               	clrf	_status	;volatile
 10512  0BF5                     i1l4711:	
 10513                           
 10514                           ;nrf24l01.c: 221: };nrf24l01.c: 223: if (lastTXPacket->packetData.IsACK){
 10515  0BF5  0020               	movlb	0	; select bank0
 10516  0BF6  0868               	movf	_lastTXPacket,w
 10517  0BF7  0084               	movwf	4
 10518  0BF8  3001               	movlw	1	; select bank2/3
 10519  0BF9  0085               	movwf	5
 10520  0BFA  1D80               	btfss	0,3
 10521  0BFB  2C00               	goto	i1l4715
 10522                           
 10523                           ;nrf24l01.c: 224: nrf24l01SetRXMode(1);
 10524  0BFC  3001               	movlw	1
 10525  0BFD  318A  22C4  318B   	fcall	_nrf24l01SetRXMode
 10526  0C00                     i1l4715:	
 10527                           
 10528                           ;nrf24l01.c: 225: };nrf24l01.c: 227: nrf24l01Service();
 10529  0C00  318E  26B2  318B   	fcall	_nrf24l01Service
 10530  0C03                     i1l4717:	
 10531                           
 10532                           ;nrf24l01.c: 228: };nrf24l01.c: 233: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          7, status.statusRegister.byte);
 10533  0C03  0020               	movlb	0	; select bank0
 10534  0C04  0865               	movf	_status+2,w	;volatile
 10535  0C05  001E               	movwi fsr1++
 10536  0C06  3027               	movlw	39
 10537  0C07  3188  201A         	fcall	_nrf24l01Send
 10538  0C09  0008               	return
 10539  0C0A                     __end_of_nrf24l01ISR:	
 10540                           
 10541                           	psect	text48
 10542  17BF                     __ptext48:	
 10543 ;; *************** function _hcsr04ISR *****************
 10544 ;; Defined at:
 10545 ;;		line 94 in file "HC-SR04.c"
 10546 ;; Parameters:    Size  Location     Type
 10547 ;;		None
 10548 ;; Auto vars:     Size  Location     Type
 10549 ;;		None
 10550 ;; Return value:  Size  Location     Type
 10551 ;;                  1    wreg      void 
 10552 ;; Registers used:
 10553 ;;		status,2
 10554 ;; Tracked objects:
 10555 ;;		On entry : 0/0
 10556 ;;		On exit  : 0/0
 10557 ;;		Unchanged: 0/0
 10558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10563 ;;Total ram usage:        0 bytes
 10564 ;; Hardware stack levels used:    1
 10565 ;; This function calls:
 10566 ;;		Nothing
 10567 ;; This function is called by:
 10568 ;;		_ISR
 10569 ;; This function uses a non-reentrant model
 10570 ;;
 10571                           
 10572                           
 10573                           ;psect for function _hcsr04ISR
 10574  17BF                     _hcsr04ISR:	
 10575                           
 10576                           ;HC-SR04.c: 95: waiting = 0;
 10577                           
 10578                           ;incstack = 0
 10579                           ; Regs used in _hcsr04ISR: [status,2]
 10580  17BF  0021               	movlb	1	; select bank1
 10581  17C0  01E9               	clrf	_waiting^(0+128)	;volatile
 10582                           
 10583                           ;HC-SR04.c: 96: T1CONbits.TMR1ON = 0;
 10584  17C1  0020               	movlb	0	; select bank0
 10585  17C2  101B               	bcf	27,0	;volatile
 10586  17C3  0008               	return
 10587  17C4                     __end_of_hcsr04ISR:	
 10588  0074                     btemp	set	116	;btemp
 10589  0074                     wtemp0	set	116
 10590  0076                     wtemp1	set	118
 10591  0078                     wtemp2	set	120
 10592  007A                     wtemp3	set	122
 10593  007C                     wtemp4	set	124
 10594  007E                     wtemp5	set	126
 10595  0074                     ttemp0	set	116
 10596  0077                     ttemp1	set	119
 10597  007A                     ttemp2	set	122
 10598  007D                     ttemp3	set	125
 10599  0074                     ltemp0	set	116
 10600  0078                     ltemp1	set	120
 10601  007C                     ltemp2	set	124
 10602  0076                     ltemp3	set	118


Data Sizes:
    Strings     44
    Constant    46
    Data        1
    BSS         132
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            4      4       4
    BANK0            80     67      73
    BANK1            80     63      75
    BANK2            80     45      66
    BANK3            80      0      66
    BANK4            80      0      28
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> sendMessage@ftoaStatus(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK3[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 
		 -> RXPacket(BANK3[33]), romDataMap(BANK4[28]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK3[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 
		 -> RXPacket(BANK3[33]), romDataMap(BANK4[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 33
		 -> romDataMap.name(BANK4[16]), packet.Message(BANK0[32]), packet.Message(BANK0[32]), main@packet(BANK1[33]), 
		 -> STR_6(CODE[4]), loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK2[17]), STR_8(CODE[6]), STR_7(CODE[6]), STR_5(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendTXBuffer@packet	PTR struct . size(1) Largest target is 33
		 -> TXPacket(BANK3[33]), RXPacket(BANK3[33]), 

    lastTXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), TXPacket(BANK3[33]), RXPacket(BANK3[33]), 

    nrf24l01SendPacket@txPacket	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK4[28]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sendMessage@topic	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_8(CODE[6]), STR_7(CODE[6]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sendMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK4[28]), 


Critical Paths under _main in COMMON

    _main->_nrf24l01SetTXPipe
    _main->_strcpy
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01GetPipe->___lwmod
    _sendMessage->_sleepMs
    _sendMessage->_strcpy
    _nrf24l01SendPacket->_sleepMs
    _nrf24l01SendPacket->_strcpy
    _ftoa->___lltoft
    _sprintf->___wmul
    ___ftsub->___lltoft
    _hcsr04GetAerage->_sleepMs
    _getADCValue->___awtoft
    _getADCValue->_sleepMs
    ___ftadd->___awtoft

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01GetPipe->___lwmod
    _nrf24l01SendPacket->_strcpy
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _hcsr04GetAerage->___ftdiv
    ___lwtoft->___ftpack
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sendMessage
    _loop->_sendMessage
    _sendMessage->_strcat
    _strcat->_ftoa

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_loop

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0  105524
                                             28 BANK1     35    35      0
                         _hcsr04Init
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                        _sendMessage
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    2274
                                             17 BANK0      1     1      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                9     9      0    2274
                                              8 BANK0      9     9      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    2     2      0     406
                                              3 COMMON     1     1      0
                                              7 BANK0      1     1      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     344
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    3     3      0     611
                                              0 COMMON     3     3      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      4     4      0     807
                                              8 BANK0      4     4      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     440
                                              0 COMMON     4     0      4
                                              7 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _loop                                                45    45      0   73575
                                              0 BANK2     45    45      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                        _getADCValue
                    _hcsr04GetAerage
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _sendMessage                                          9     2      7   27123
                                             19 BANK1      9     2      7
                               _ftoa
                        _getADCValue (ARG)
                    _hcsr04GetAerage (ARG)
                             _memset
                 _nrf24l01SendPacket
                            _sleepMs
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     751
                                             13 BANK1      6     2      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendPacket                                   2     0      2    4131
                                              9 BANK0      2     0      2
                    _nrf24l01Service
                            _sleepMs
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     565
                                              0 COMMON     4     0      4
                                              7 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    2567
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     968
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              4     2      2     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     618
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     463
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                13     9      4   18914
                                              0 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             34    24     10    3016
                                             28 BANK0     26    16     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      99
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     552
                                              0 COMMON     4     0      4
                                              7 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     440
                                              0 COMMON     1     1      0
                                             20 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     449
                                              7 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             5     1      4    3681
                                              0 COMMON     4     0      4
                                             12 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             10     6      4     579
                                             57 BANK0     10     6      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6044
                                             22 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     273
                                             45 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             12     6      6    4379
                                             45 BANK0     12     6      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               6     0      6     406
                                              7 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _hcsr04GetAerage                                      6     3      3   15383
                                             35 BANK0      6     3      3
                            ___ftadd
                            ___ftdiv
                           ___lwtoft
                            _sleepMs
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    3714
                                              0 COMMON     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         10     7      3   15477
                                             35 BANK0     10     7      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            _sleepMs
 ---------------------------------------------------------------------------------
 (2) _sleepMs                                              4     2      2     889
                                              0 COMMON     4     2      2
                           _resetWDT
 ---------------------------------------------------------------------------------
 (3) _resetWDT                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             13     7      6    4935
                                             22 BANK0     13     7      6
                            ___ftadd (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             10     4      6    5740
                                             12 BANK0     10     4      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3712
                                              0 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             5     0      5    3475
                                              7 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (1) _hcsr04Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  7     7      0    3648
                                              0 BANK0      7     7      0
                          _hcsr04ISR
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (10) _nrf24l01ISR                                         0     0      0    3648
                       _nrf24l01Send
                    _nrf24l01Service
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    2567
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     968
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              4     2      2     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     618
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     463
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 (10) _hcsr04ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _hcsr04Init
   _loop
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _sleepMs
           _resetWDT
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _sleepMs
           _resetWDT
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       _sleepMs
         _resetWDT
     _hcsr04GetAerage
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
       _sleepMs
         _resetWDT
     _sendMessage
       _ftoa
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _sleepMs
           _resetWDT
       _hcsr04GetAerage (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
         _sleepMs
           _resetWDT
       _memset (ARG)
       _nrf24l01SendPacket (ARG)
         _nrf24l01Service
           _memset
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
           _nrf24l01SendTXBuffer
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
             _nrf24l01SetRXMode
               _nrf24l01Send
                 _nrf24l01SPIEnd
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
             _strlen
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _strcmp
         _sleepMs
           _resetWDT
         _strcpy
       _sleepMs (ARG)
         _resetWDT
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _sleepMs
                 _resetWDT
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _sleepMs
                 _resetWDT
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftdiv
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _sleepMs
                   _resetWDT
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
       _strcpy (ARG)
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
     _nrf24l01SPISend
     _nrf24l01SPIStart
   _sendMessage
     _ftoa
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _sleepMs
             _resetWDT
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _sleepMs
             _resetWDT
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _sleepMs
               _resetWDT
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       _sleepMs
         _resetWDT
     _hcsr04GetAerage (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
       _sleepMs
         _resetWDT
     _memset (ARG)
     _nrf24l01SendPacket (ARG)
       _nrf24l01Service
         _memset
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
         _nrf24l01SendTXBuffer
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _strlen
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _strcmp
       _sleepMs
         _resetWDT
       _strcpy
     _sleepMs (ARG)
       _resetWDT
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
     _strcpy (ARG)
   _strcpy

 _ISR (ROOT)
   _hcsr04ISR
   _nrf24l01ISR
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
     _nrf24l01Service
       _memset
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SendTXBuffer
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _strlen
       _nrf24l01SetRXMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _strcmp
     _nrf24l01SetRXMode
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            4      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               4      4       4       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       8       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     43      49       5       91.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     3F      4B       7       93.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     2D      42       9       82.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      42      11       82.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      1C      13       35.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     138      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     140      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Aug 17 16:32:05 2018

                ___bmul@product 0071                     __CFG_CP$OFF 0000                              l53 17F8  
              sendMessage@value 00B7                sendMessage@topic 00B5             ___wmul@multiplicand 0072  
                  ___ftadd@exp1 0035                    ___ftadd@exp2 0034               sendMessage@packet 00B3  
                  ___ftadd@sign 0033                             l322 0F55                             l181 071C  
                           l280 08BB                             l521 0113                             l267 0AFD  
                           l524 0132                             l547 089B                             l841 0DFE  
                           l757 0CED                             l781 03DD                             l758 0CF5  
                           l972 0A8B                    __CFG_CPD$OFF 0000                             _ISR 0004  
                           wreg 0009                    __CFG_LVP$OFF 0000                            ?_ISR 0070  
                  ___ftdiv@cntr 003D                    ___ftdiv@sign 0042                  ??_nrf24l01Init 0031  
                          l4001 0193                            l4101 0670                            l4013 01C9  
                          l4005 01A2                            l4023 01E1                            l4015 01CC  
                          l4031 0070                            l4113 068C                            l4105 0678  
                          l4009 01B6                            l4033 0231                            l4211 095A  
                          l4043 0811                            l4061 0B2C                            l4117 0694  
                          l4029 0226                            l4205 0A65                            l4213 0966  
                          l4311 092F                            l4215 096E                            l4039 080B  
                          l4401 06EB                            l4057 0B16                            l4313 094E  
                          l4403 06F6                            l4139 087B                            l4171 0DE8  
                          l4227 0563                            l4325 0914                            l4341 0F84  
                          l4413 073E                            l4405 06DF                            l4085 0635  
                          l4149 0DAA                            l4309 093C                            l4335 0F6E  
                          l4079 061F                            l4183 0E0F                            l4167 0DDA  
                          l4417 0756                            l4177 0DF5                            l4193 0983  
                          l4249 0A4C                            l4273 08C7                            l3803 03B3  
                          l4419 075D                            l4179 0E01                            l4195 0993  
                          l3821 03EF                            l3813 03CF                            l3805 03B8  
                          l3725 0894                            l4293 0C31                            l4541 0F48  
                          l4517 0EF7                            l3671 0CB7                            l3807 03BC  
                          l4367 0FDE                            l4359 0FC5                            l4471 0E26  
                          l3719 17EF                            l4295 0C48                            l4519 0F0C  
                          l4623 02B5                            l3825 0401                            l3817 03D9  
                          l4473 0E7F                            l3745 0C65                            l3649 17FD  
                          l3913 0AD6                            l4529 0F2B                            l4633 02FF  
                          l3683 0CDA                            l3675 0CC1                            l3667 0CB0  
                          l3835 041C                            l3771 0366                            l4467 0E78  
                          l3755 0C93                            l3747 0C73                            l3907 0ACE  
                          l3685 0CDF                            l3677 0CC6                            l3781 037C  
                          l4477 0EA4                            l3853 0B6A                            l4493 0EC7  
                          l4741 0A92                            l3687 0CE7                            l3775 036D  
                          l3759 0C9E                            l3847 0B44                            l4487 0EBD  
                          l4743 0AB5                            l4639 030E                            l3793 0396  
                          l3849 0B52                            l3857 0B75                            l3945 00A3  
                          l3953 00D1                            l4681 0A1D                            l3883 09FB  
                          l3867 09D7                            l3971 011A                            l3963 00E0  
                          l3939 0093                            l4675 0A05                            l3869 09E3  
                          l3965 010F                            l4677 0A11                            l4685 0A26  
                          l3799 03A9                            l3879 09F3                            l3967 0115  
                          l3895 09B2                            l3993 0166                            l3977 0141  
                          l3897 09C1                            l3889 085B                            l3987 0160  
                          l4877 07FB                            STR_1 1830                    __CFG_WDTE$ON 0000  
                          STR_2 1830                            STR_3 1827                            STR_4 1822  
                          STR_5 181D                            STR_6 182C                            STR_7 180C  
                          STR_8 1812                            STR_9 1801                            u4025 03D0  
                          u4105 0B60                            u4115 0B6B                            u4144 09DF  
                          u4145 09DD                            u4085 0B47                            u4405 01BE  
                          u5205 0A1E                            u3615 0CBC                            u3635 0CD5  
                          u4605 069B                            u4525 0641                            u3805 0C74  
                          u4365 0189                            u3655 0CE2                            u4535 0651  
                          u3815 0C88                            u5407 0AE0                            u5175 0A08  
                          u3825 0C94                            u3745 089C                            u4385 019A  
                          u5417 0AF1                            u4555 0679                            u4715 0DF6  
                          u3755 08A1                            u4395 01AC                            u5427 0AFA  
                          u5195 0A17                            u5275 0AA3                            u4565 067F  
                          u5437 0805                            u3695 0CFC                            u3935 0397  
                          u4655 0DB1                            u5447 17DB                            u5367 0781  
                          u4824 08C1                            u4905 0FA6                            u5457 0E34  
                          u4745 0988                            u3785 0C68                            u4825 08C0  
                          u5377 08F4                            u4915 0FC6                            u4595 0695  
                          u5387 0900                            u3965 03AA                            u4925 0FD5  
                          u4685 0DDB                            u5397 0C4E                            u4935 0FDF  
                          u3995 03BD                            u4895 0F96                            _WPUA 020C  
                          _WPUC 020E  __size_of_nrf24l01InterfaceInit 001E                    __CFG_WRT$OFF 0000  
                 __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 08EB                            ___sp 215C  
                          _main 0765                            _ftoa 0521                    ___ftpack@arg 0027  
                          _loop 0434                    ___ftpack@exp 002A                            fsr0h 0005  
                          fsr1h 0007                            indf0 0000                            fsr0l 0004  
                          fsr1l 0006                            btemp 0074                   __CFG_BORV$LOW 0000  
                          start 0036           nrf24l01SetRXPipe@pipe 0071                   __CFG_CSWEN$ON 0000  
             ___bmul@multiplier 0072                    ___ftmul@cntr 0057                    ___ftmul@sign 0058  
   __size_of_nrf24l01SendPacket 0030                           ??_ISR 0020                    ___fttol@exp1 0062  
          __size_of_getADCValue 00A9                    ___fttol@lval 005E                           ?_main 0070  
                         ?_ftoa 00A0                           ?_loop 0070                 __end_of___ftadd 0434  
               __end_of___ftdiv 1000                 __end_of___ftneg 17DA                 __end_of___lldiv 0CA7  
               __end_of___ftmul 06BC                 __end_of___llmod 0B7E                 __end_of___ftsub 0891  
               __end_of___fttol 0E18                  __CFG_DEBUG$OFF 0000                 __end_of___lwmod 0A2B  
                         i1l294 0BD5                           _TMR1H 001A                           _TMR1L 0019  
                 __CFG_PWRTE$ON 0000           nrf24l01SetTXPipe@pipe 0027                    ___lltoft@exp 002C  
                 ___awtoft@sign 0073                 __end_of_dpowers 1028                 __end_of_isdigit 17F1  
                 ___ftpack@sign 002B                           _rloop 00E7                           ftoa@f 00A0  
                         ftoa@l 00A8                  __CFG_BOREN$OFF 0000                 __end_of_sleepMs 09FE  
                         ltemp0 0074                           ltemp1 0078                           ltemp2 007C  
                         ltemp3 0076                           ttemp0 0074                           ttemp1 0077  
                         ttemp2 007A                           ttemp3 007D                           status 0003  
                         wtemp0 0074                           wtemp1 0076                           wtemp2 0078  
                         wtemp3 007A                           wtemp4 007C                           wtemp5 007E  
               __end_of_sprintf 0237               getADCValue@adcSum 004A                _nrf24l01SPIStart 0800  
                __CFG_MCLRE$OFF 0000                 __initialization 0038          nrf24l01InitRegisters@i 002F  
                  __end_of_main 07FF                    __end_of_ftoa 0608                    __end_of_loop 0521  
                        ??_main 00BC                   ___fttol@sign1 005D                          ??_ftoa 0074  
                        ??_loop 0074                    ?_sendMessage 00B3        __size_of_nrf24l01SPISend 000F  
              ___llmod@dividend 0038                          _ADRESH 009C                          _ADRESL 009B  
              __end_of___awtoft 092C                          _ANSELA 018C                          _ANSELC 018E  
              __end_of___ftpack 0D0C                __end_of___lltoft 09A8                          _ODCONA 028C  
      __size_of_nrf24l01GetPipe 0037                          _ODCONC 028E                          i1l4711 0BF5  
                        i1l4715 0C00                          i1l4709 0BF3                          i1l4717 0C03  
                        i1l4783 0027                          i1l4697 0BD6                          i1l4777 0020  
                        i1l4699 0BD9                          _INLVLA 038C                          _INLVLC 038E  
              __end_of___lwtoft 0856        __size_of_nrf24l01Service 00A5            __size_of_nrf24l01ISR 0049  
                        ___bmul 0809                          ___ftge 0AFF                          ___wmul 0891  
                     ??___ftadd 0032                  __CFG_STVREN$ON 0000                       ??___ftdiv 003C  
                     ??___ftneg 0074                       ??___lldiv 0070                       ??___ftmul 0074  
                     ??___llmod 0070                       ??___ftsub 0074                       ??___fttol 0074  
                     ??___lwmod 0074            __end_of_nrf24l01Init 090A            __end_of_nrf24l01Send 082D  
                        _memset 0A5B           _nrf24l01InitRegisters 0237                          _rcount 00E3  
                        _rlimit 00E5                          _status 0063                          _strcat 0955  
                        _strcmp 092C                          _strcpy 0856                          _strlen 09A8  
                        ftoa@cp 00AC           ___ftmul@f3_as_product 0054                __end_of_resetWDT 17D1  
                     ??_isdigit 0070                          loop@ta 0123                          loop@vt 0120  
                     ??_sleepMs 0072                       ??_sprintf 0046              getADCValue@adcLoop 0048  
       __end_of__initialization 0063                      ___ftadd@f1 002C                      ___ftadd@f2 002F  
                    ___ftge@ff1 0027                      ___ftge@ff2 002A              getADCValue@channel 0047  
                    ___ftdiv@f1 0039                      ___ftdiv@f2 0036                      ___ftdiv@f3 003E  
                    ___ftneg@f1 004D                      ___awtoft@c 0070             ___bmul@multiplicand 0070  
      __size_of_hcsr04GetAerage 009A                      ___ftmul@f1 004D                      ___ftmul@f2 0050  
                    ___ftsub@f1 0039                      ___ftsub@f2 0036                      ___fttol@f1 0059  
                __pcstackCOMMON 0070                    __pidataBANK1 07FF   __size_of_nrf24l01SendTXBuffer 004A  
                    ___lltoft@c 0070              __size_of_hcsr04ISR 0005                      ___lwtoft@c 0070  
                  sprintf@width 0051                      __pbssBANK0 0063                      __pbssBANK1 00DF  
                    __pbssBANK2 014D                      __pbssBANK3 01A0                      __pbssBANK4 0220  
         sendMessage@ftoaStatus 00BA               ??_nrf24l01GetPipe 0028                      __pmaintext 0765  
                    _hcsr04Init 082D                         ?___bmul 0070                         ?___ftge 0027  
                       ?___wmul 0070                 __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 0AC4  
             _nrf24l01SetRXPipe 08AF          ?_nrf24l01InitRegisters 0070                      __pintentry 0004  
             _nrf24l01SetTXPipe 0B7E                       ?___awtoft 0070                       ?___ftpack 0027  
            ?_nrf24l01SetRXPipe 0070              ?_nrf24l01SetTXPipe 0070                       ?___lltoft 0070  
           __CFG_RSTOSC$HFINT32 0000                         ?_strcat 00AD                         ?_strcpy 0070  
                     ?___lwtoft 0070           __end_of_n_ADDRESS_MUL 1801            __size_of_sendMessage 0085  
      __end_of_nrf24l01SPIStart 0809             ??_nrf24l01SetRXPipe 0070             ??_nrf24l01SetTXPipe 0073  
                       _NVMADRH 0892                         _NVMADRL 0891                         _NVMDATL 0893  
                       _NVMCON2 0896                         _SSP1BUF 0211               __end_of_hcsr04ISR 17C4  
         _nrf24l01InterfaceInit 08CD      __end_of_nrf24l01SendPacket 0A5B                       ?_resetWDT 0070  
                 ??_getADCValue 0046           __size_of_nrf24l01Init 001F           __size_of_nrf24l01Send 0013  
     __end_of_nrf24l01SetRXMode 0AFF       __end_of_nrf24l01SetRXPipe 08CD       __end_of_nrf24l01SetTXPipe 0BC1  
               __size_of___bmul 0011                 __size_of___ftge 003C                         ___ftadd 033E  
                       ___ftdiv 0F57                         ___ftneg 17D1                         ___lldiv 0C54  
               __size_of___wmul 001E                         ___ftmul 0608                         ___llmod 0B3B  
                       ___ftsub 0873                         ___fttol 0D91                         ___lwmod 09FE  
             ??_hcsr04GetAerage 0074                      ??___awtoft 0073                      ??___ftpack 0070  
               __size_of_memset 0032                      ??___lltoft 0074                         __ptext1 08EB  
                       __ptext2 08CD                         __ptext3 0237                         __ptext4 0B7E  
                       __ptext5 0809                         __ptext6 08AF                         __ptext7 0A8D  
                       __ptext8 09FE                         __ptext9 0434                      ??___lwtoft 0073  
               __size_of_strcat 0029                 __size_of_strcmp 0029                 __size_of_strcpy 001D  
               __size_of_strlen 002A                    __size_of_ISR 0032                       _T1CONbits 001B  
                       _counter 014D                         _dpowers 1000                         _isdigit 17E3  
                     _IOCAFbits 0393                         _romData 00EA                         _sleepMs 09D2  
                     _IOCAPbits 0391                         _waiting 00E9                         _sprintf 006A  
                       clrloop0 17C5            end_of_initialization 0063                         ftoa@buf 0151  
                       ftoa@rem 00A4                    _nrf24l01Init 08EB                    _nrf24l01Send 081A  
                    _romDataMap 0220                nrf24l01GetPipe@i 002B                 ___lldiv@divisor 0027  
               ___lldiv@counter 0033                      ??_resetWDT 0070                     ?_hcsr04Init 0070  
           __end_of_getADCValue 0765                       _PORTAbits 000C                       _PORTCbits 000E  
                     _TRISAbits 008C                       _TRISCbits 008E                __CFG_FEXTOSC$OFF 0000  
                 ??_nrf24l01ISR 0070          ?_nrf24l01InterfaceInit 0070                     ___ftdiv@exp 0041  
                    main@packet 00BE      __size_of_nrf24l01SetRXMode 003B      __size_of_nrf24l01SetRXPipe 001E  
                   ___ftmul@exp 0053      __size_of_nrf24l01SetTXPipe 0043                  __end_of___bmul 081A  
                __end_of___ftge 0B3B                  __end_of___wmul 08AF                  __end_of_memset 0A8D  
                __end_of_strcat 097E                  __end_of_strcmp 0955                    _lastTXPacket 0068  
                __end_of_strcpy 0873                  __end_of_strlen 09D2             start_initialization 0038  
               _nrf24l01SPISend 17F1                     __end_of_ISR 0036    __end_of_nrf24l01SendTXBuffer 0C54  
                    ftoa@status 00A3       nrf24l01SetRXPipe@enRXAddr 0072             __size_of_hcsr04Init 0014  
               _nrf24l01GetPipe 0A8D         __size_of_nrf24l01SPIEnd 0009                 ___llmod@divisor 0034  
               ___llmod@counter 0070                 _nrf24l01Service 0EB2         ??_nrf24l01InitRegisters 0028  
              __CFG_LPBOREN$OFF 0000                     _getADCValue 06BC                        ??___bmul 0071  
                      ??___ftge 0070             __end_of_nrf24l01ISR 0C0A                        ??___wmul 0074  
                   __pdataBANK1 00EA                        ??_strcat 0074                        ??_strcpy 0074  
             __size_of___awtoft 0022               __size_of___ftpack 0065               __size_of___lltoft 002A  
                     ___latbits 0002               __size_of___lwtoft 0015                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0                   __pcstackBANK2 0120                    _isdigit$2016 0070  
                   sprintf@flag 004A                     sprintf@prec 0053                      loop@packet 012C  
               _hcsr04GetAerage 0E18             nrf24l01GetPipe@name 002A             nrf24l01GetPipe@pipe 0029  
                     _hcsr04ISR 17BF               __size_of_resetWDT 0007                        ?___ftadd 002C  
                      ?___ftdiv 0036                        ?___ftneg 004D                        ?___lldiv 0027  
                      ?___ftmul 004D                        ?___llmod 0034                        ?___ftsub 0036  
                      ?___fttol 0059                        ?___lwmod 0070            __end_of_n_ADDRESS_P0 181D  
       __end_of_nrf24l01SPISend 1800       nrf24l01InitRegisters@enAA 002D                   ??_sendMessage 0074  
            _nrf24l01SendPacket 0A2B             sleepMs@milliseconds 0070         __end_of_nrf24l01GetPipe 0AC4  
                      ?_isdigit 0070                       _loop$2271 0126                       _loop$2272 0129  
                      ?_sleepMs 0070             ?_nrf24l01SendPacket 0029                        ?_sprintf 003C  
       __end_of_nrf24l01Service 0F57                  ___wmul@product 0027                     _nrf24l01ISR 0BC1  
                     clear_ram0 17C4                        _PIE0bits 0090                        _PIE1bits 0091  
                      _PIR0bits 0010                        _PIR1bits 0011                      ?_hcsr04ISR 0070  
                  ??_hcsr04Init 0070            ??_nrf24l01SendPacket 0074                       _testCount 00E1  
          _nrf24l01SendTXBuffer 0C0A                      _ADCON0bits 009D                      _ADCON1bits 009E  
             ___wmul@multiplier 0070                        _WPUAbits 020C                        _RXPacket 01A0  
                      _TXPacket 01C1             __end_of_sendMessage 0D91              __end_of_hcsr04Init 0841  
       ??_nrf24l01InterfaceInit 0070         __end_of_hcsr04GetAerage 0EB2                  _nrf24l01SPIEnd 17DA  
              __size_of___ftadd 00F6                __size_of___ftdiv 00A9                __size_of___ftneg 0009  
              __size_of___lldiv 0053                __size_of___ftmul 00B4                __size_of___llmod 0043  
              __size_of___ftsub 001E                __size_of___fttol 0087                __size_of___lwmod 002D  
                      ___awtoft 090A                        ___ftpack 0CA7                        ___int_sp 22A6  
                      ___lltoft 097E                      _ANSELAbits 018C                        ___lwtoft 0841  
                    _ANSELCbits 018E                ?_nrf24l01GetPipe 0070                      sprintf@val 004C  
                 _n_ADDRESS_MUL 1800                      strcat@from 00AF                __size_of_isdigit 000E  
                      __ptext10 0D0C                        __ptext11 0955                        __ptext20 0800  
                      __ptext12 0A2B                        __ptext21 17F1                        __ptext13 0856  
                    _T1GCONbits 001C                        __ptext30 097E                        __ptext22 17DA  
                      __ptext14 0EB2                        __ptext31 0D91                        __ptext23 0A5B  
                      __ptext15 092C                        __ptext40 17CA                        __ptext32 0873  
                      __ptext24 0521                        __ptext16 0C0A                        __ptext41 0F57  
                      __ptext33 17D1                        __ptext25 006A                        __ptext17 09A8  
                      __ptext42 033E                        __ptext34 0608                        __ptext26 17E3  
                      __ptext18 0AC4                        __ptext43 090A                        __ptext35 0AFF  
                      __ptext27 0891                        __ptext19 081A                        __ptext44 0CA7  
                      __ptext36 0E18                        __ptext28 0B3B                        __ptext45 082D  
                      __ptext37 0841                        __ptext29 0C54                        __ptext38 06BC  
                      __ptext47 0BC1                        __ptext39 09D2                        __ptext48 17BF  
              __size_of_sleepMs 002C                    _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 17E3  
                      _distance 00DF                __size_of_sprintf 01CD                     _OSCCON1bits 0919  
                    strcpy@from 0072                   __size_of_main 009A                   __size_of_ftoa 00E7  
                 __size_of_loop 00ED    nrf24l01InitRegisters@channel 0029    nrf24l01InitRegisters@feature 002B  
                  sleepMs@wdtps 0073                      _RC0PPSbits 0EA0                        _resetWDT 17CA  
                   ??_hcsr04ISR 0070    nrf24l01InitRegisters@rfSetup 002C                      _RC1PPSbits 0EA1  
                  ?_getADCValue 0043                      _RC2PPSbits 0EA2  __size_of_nrf24l01InitRegisters 0107  
 __end_of_nrf24l01InitRegisters 033E    nrf24l01InitRegisters@setupAW 002A                      _ODCONAbits 028C  
                  _SSP1STATbits 0214                        main@pipe 00BD      nrf24l01SendPacket@txPacket 0029  
                   _sendMessage 0D0C                      _INTCONbits 000B                     _NVMCON1bits 0895  
                    _FVRCONbits 0117                  __pstringtext10 1830                  __pstringtext11 0000  
                      isdigit@c 0071                ?_hcsr04GetAerage 0043                        intlevel1 0000  
                     sprintf@ap 004B                       sprintf@sp 0050                    _n_ADDRESS_P0 1818  
        hcsr04GetAerage@average 0046                ___lwmod@dividend 0072                ___lldiv@dividend 002B  
             __CFG_CLKOUTEN$OFF 0000       __size_of_nrf24l01SPIStart 0009                   __pstringtext1 1000  
                 __pstringtext2 1818                   __pstringtext3 1800                   __pstringtext4 180C  
                 __pstringtext5 1812                   __pstringtext6 181D                   __pstringtext7 1822  
                 __pstringtext8 1827                   __pstringtext9 182C                        sprintf@c 0055  
                      sprintf@f 003C      nrf24l01InitRegisters@DynPD 002E                        strcat@cp 00B1  
                      strcat@to 00AD                ___lldiv@quotient 002F                 ___lwmod@divisor 0070  
                      strcpy@cp 0027                        strcpy@to 0070                 ___lwmod@counter 0027  
                    _WDTCONbits 0097                   ?_nrf24l01Init 0070                      _STATUSbits 0003  
                  ?_nrf24l01ISR 0070  
