

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Aug 17 11:34:03 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	intentry,global,class=CODE,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	dabs	1,0x74,12
    78  0000                     
    79                           ; Version 2.00
    80                           ; Generated 27/05/2018 GMT
    81                           ; 
    82                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC16LF18325 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000E                     	;# 
   127  0010                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0013                     	;# 
   131  0014                     	;# 
   132  0015                     	;# 
   133  0015                     	;# 
   134  0016                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001B                     	;# 
   142  001C                     	;# 
   143  001D                     	;# 
   144  001E                     	;# 
   145  001F                     	;# 
   146  008C                     	;# 
   147  008E                     	;# 
   148  0090                     	;# 
   149  0091                     	;# 
   150  0092                     	;# 
   151  0093                     	;# 
   152  0094                     	;# 
   153  0097                     	;# 
   154  009B                     	;# 
   155  009B                     	;# 
   156  009C                     	;# 
   157  009D                     	;# 
   158  009E                     	;# 
   159  009F                     	;# 
   160  010C                     	;# 
   161  010E                     	;# 
   162  0111                     	;# 
   163  0112                     	;# 
   164  0113                     	;# 
   165  0114                     	;# 
   166  0115                     	;# 
   167  0116                     	;# 
   168  0117                     	;# 
   169  0118                     	;# 
   170  0119                     	;# 
   171  018C                     	;# 
   172  018E                     	;# 
   173  0199                     	;# 
   174  0199                     	;# 
   175  0199                     	;# 
   176  019A                     	;# 
   177  019A                     	;# 
   178  019A                     	;# 
   179  019B                     	;# 
   180  019B                     	;# 
   181  019B                     	;# 
   182  019B                     	;# 
   183  019B                     	;# 
   184  019C                     	;# 
   185  019C                     	;# 
   186  019C                     	;# 
   187  019D                     	;# 
   188  019D                     	;# 
   189  019D                     	;# 
   190  019E                     	;# 
   191  019E                     	;# 
   192  019E                     	;# 
   193  019F                     	;# 
   194  019F                     	;# 
   195  019F                     	;# 
   196  019F                     	;# 
   197  019F                     	;# 
   198  020C                     	;# 
   199  020E                     	;# 
   200  0211                     	;# 
   201  0211                     	;# 
   202  0212                     	;# 
   203  0212                     	;# 
   204  0213                     	;# 
   205  0213                     	;# 
   206  0214                     	;# 
   207  0214                     	;# 
   208  0215                     	;# 
   209  0215                     	;# 
   210  0215                     	;# 
   211  0215                     	;# 
   212  0216                     	;# 
   213  0216                     	;# 
   214  0217                     	;# 
   215  0217                     	;# 
   216  0219                     	;# 
   217  021A                     	;# 
   218  021B                     	;# 
   219  021C                     	;# 
   220  021D                     	;# 
   221  021D                     	;# 
   222  021E                     	;# 
   223  021F                     	;# 
   224  028C                     	;# 
   225  028E                     	;# 
   226  0291                     	;# 
   227  0291                     	;# 
   228  0292                     	;# 
   229  0293                     	;# 
   230  0294                     	;# 
   231  0295                     	;# 
   232  0295                     	;# 
   233  0296                     	;# 
   234  0297                     	;# 
   235  0298                     	;# 
   236  029F                     	;# 
   237  030C                     	;# 
   238  030E                     	;# 
   239  0311                     	;# 
   240  0311                     	;# 
   241  0312                     	;# 
   242  0313                     	;# 
   243  0314                     	;# 
   244  0315                     	;# 
   245  0315                     	;# 
   246  0316                     	;# 
   247  0317                     	;# 
   248  0318                     	;# 
   249  038C                     	;# 
   250  038E                     	;# 
   251  0391                     	;# 
   252  0392                     	;# 
   253  0393                     	;# 
   254  0397                     	;# 
   255  0398                     	;# 
   256  0399                     	;# 
   257  039A                     	;# 
   258  039C                     	;# 
   259  039D                     	;# 
   260  039E                     	;# 
   261  039F                     	;# 
   262  0411                     	;# 
   263  0411                     	;# 
   264  0412                     	;# 
   265  0413                     	;# 
   266  0414                     	;# 
   267  0415                     	;# 
   268  0416                     	;# 
   269  0417                     	;# 
   270  0418                     	;# 
   271  0418                     	;# 
   272  0419                     	;# 
   273  041A                     	;# 
   274  041B                     	;# 
   275  041C                     	;# 
   276  041D                     	;# 
   277  041E                     	;# 
   278  041F                     	;# 
   279  0498                     	;# 
   280  0498                     	;# 
   281  0499                     	;# 
   282  049A                     	;# 
   283  049B                     	;# 
   284  049B                     	;# 
   285  049C                     	;# 
   286  049D                     	;# 
   287  049E                     	;# 
   288  049F                     	;# 
   289  0617                     	;# 
   290  0618                     	;# 
   291  0619                     	;# 
   292  0619                     	;# 
   293  061A                     	;# 
   294  061B                     	;# 
   295  061C                     	;# 
   296  061C                     	;# 
   297  061F                     	;# 
   298  0691                     	;# 
   299  0692                     	;# 
   300  0693                     	;# 
   301  0694                     	;# 
   302  0695                     	;# 
   303  0696                     	;# 
   304  0697                     	;# 
   305  0698                     	;# 
   306  0699                     	;# 
   307  0711                     	;# 
   308  0712                     	;# 
   309  0713                     	;# 
   310  0714                     	;# 
   311  0715                     	;# 
   312  0716                     	;# 
   313  0717                     	;# 
   314  0718                     	;# 
   315  0719                     	;# 
   316  0891                     	;# 
   317  0891                     	;# 
   318  0891                     	;# 
   319  0891                     	;# 
   320  0891                     	;# 
   321  0891                     	;# 
   322  0892                     	;# 
   323  0892                     	;# 
   324  0892                     	;# 
   325  0893                     	;# 
   326  0893                     	;# 
   327  0893                     	;# 
   328  0893                     	;# 
   329  0893                     	;# 
   330  0893                     	;# 
   331  0894                     	;# 
   332  0894                     	;# 
   333  0894                     	;# 
   334  0895                     	;# 
   335  0895                     	;# 
   336  0895                     	;# 
   337  0896                     	;# 
   338  0896                     	;# 
   339  0896                     	;# 
   340  089B                     	;# 
   341  0911                     	;# 
   342  0912                     	;# 
   343  0913                     	;# 
   344  0914                     	;# 
   345  0915                     	;# 
   346  0916                     	;# 
   347  0918                     	;# 
   348  0919                     	;# 
   349  091A                     	;# 
   350  091B                     	;# 
   351  091C                     	;# 
   352  091D                     	;# 
   353  091E                     	;# 
   354  091F                     	;# 
   355  0E0F                     	;# 
   356  0E10                     	;# 
   357  0E11                     	;# 
   358  0E12                     	;# 
   359  0E13                     	;# 
   360  0E14                     	;# 
   361  0E15                     	;# 
   362  0E16                     	;# 
   363  0E17                     	;# 
   364  0E18                     	;# 
   365  0E19                     	;# 
   366  0E1A                     	;# 
   367  0E1B                     	;# 
   368  0E1C                     	;# 
   369  0E1D                     	;# 
   370  0E1E                     	;# 
   371  0E1F                     	;# 
   372  0E20                     	;# 
   373  0E21                     	;# 
   374  0E22                     	;# 
   375  0E24                     	;# 
   376  0E25                     	;# 
   377  0E28                     	;# 
   378  0E29                     	;# 
   379  0E2A                     	;# 
   380  0E2B                     	;# 
   381  0E2C                     	;# 
   382  0E2D                     	;# 
   383  0E2E                     	;# 
   384  0E2F                     	;# 
   385  0E90                     	;# 
   386  0E91                     	;# 
   387  0E92                     	;# 
   388  0E94                     	;# 
   389  0E95                     	;# 
   390  0EA0                     	;# 
   391  0EA1                     	;# 
   392  0EA2                     	;# 
   393  0EA3                     	;# 
   394  0EA4                     	;# 
   395  0EA5                     	;# 
   396  0F0F                     	;# 
   397  0F10                     	;# 
   398  0F11                     	;# 
   399  0F12                     	;# 
   400  0F13                     	;# 
   401  0F14                     	;# 
   402  0F15                     	;# 
   403  0F16                     	;# 
   404  0F17                     	;# 
   405  0F18                     	;# 
   406  0F19                     	;# 
   407  0F1A                     	;# 
   408  0F1B                     	;# 
   409  0F1C                     	;# 
   410  0F1D                     	;# 
   411  0F1E                     	;# 
   412  0F1F                     	;# 
   413  0F20                     	;# 
   414  0F21                     	;# 
   415  0F22                     	;# 
   416  0F23                     	;# 
   417  0F24                     	;# 
   418  0F25                     	;# 
   419  0F26                     	;# 
   420  0F27                     	;# 
   421  0F28                     	;# 
   422  0F29                     	;# 
   423  0F2A                     	;# 
   424  0F2B                     	;# 
   425  0F2C                     	;# 
   426  0F2D                     	;# 
   427  0F2E                     	;# 
   428  0F2F                     	;# 
   429  0F30                     	;# 
   430  0F31                     	;# 
   431  0F32                     	;# 
   432  0F33                     	;# 
   433  0F34                     	;# 
   434  0F35                     	;# 
   435  0F36                     	;# 
   436  0F37                     	;# 
   437  0FE4                     	;# 
   438  0FE5                     	;# 
   439  0FE6                     	;# 
   440  0FE7                     	;# 
   441  0FE8                     	;# 
   442  0FE9                     	;# 
   443  0FEA                     	;# 
   444  0FEB                     	;# 
   445  0FED                     	;# 
   446  0FEE                     	;# 
   447  0FEF                     	;# 
   448  0000                     	;# 
   449  0001                     	;# 
   450  0002                     	;# 
   451  0003                     	;# 
   452  0004                     	;# 
   453  0005                     	;# 
   454  0006                     	;# 
   455  0007                     	;# 
   456  0008                     	;# 
   457  0009                     	;# 
   458  000A                     	;# 
   459  000B                     	;# 
   460  000C                     	;# 
   461  000E                     	;# 
   462  0010                     	;# 
   463  0011                     	;# 
   464  0012                     	;# 
   465  0013                     	;# 
   466  0014                     	;# 
   467  0015                     	;# 
   468  0015                     	;# 
   469  0016                     	;# 
   470  0016                     	;# 
   471  0017                     	;# 
   472  0018                     	;# 
   473  0019                     	;# 
   474  0019                     	;# 
   475  001A                     	;# 
   476  001B                     	;# 
   477  001C                     	;# 
   478  001D                     	;# 
   479  001E                     	;# 
   480  001F                     	;# 
   481  008C                     	;# 
   482  008E                     	;# 
   483  0090                     	;# 
   484  0091                     	;# 
   485  0092                     	;# 
   486  0093                     	;# 
   487  0094                     	;# 
   488  0097                     	;# 
   489  009B                     	;# 
   490  009B                     	;# 
   491  009C                     	;# 
   492  009D                     	;# 
   493  009E                     	;# 
   494  009F                     	;# 
   495  010C                     	;# 
   496  010E                     	;# 
   497  0111                     	;# 
   498  0112                     	;# 
   499  0113                     	;# 
   500  0114                     	;# 
   501  0115                     	;# 
   502  0116                     	;# 
   503  0117                     	;# 
   504  0118                     	;# 
   505  0119                     	;# 
   506  018C                     	;# 
   507  018E                     	;# 
   508  0199                     	;# 
   509  0199                     	;# 
   510  0199                     	;# 
   511  019A                     	;# 
   512  019A                     	;# 
   513  019A                     	;# 
   514  019B                     	;# 
   515  019B                     	;# 
   516  019B                     	;# 
   517  019B                     	;# 
   518  019B                     	;# 
   519  019C                     	;# 
   520  019C                     	;# 
   521  019C                     	;# 
   522  019D                     	;# 
   523  019D                     	;# 
   524  019D                     	;# 
   525  019E                     	;# 
   526  019E                     	;# 
   527  019E                     	;# 
   528  019F                     	;# 
   529  019F                     	;# 
   530  019F                     	;# 
   531  019F                     	;# 
   532  019F                     	;# 
   533  020C                     	;# 
   534  020E                     	;# 
   535  0211                     	;# 
   536  0211                     	;# 
   537  0212                     	;# 
   538  0212                     	;# 
   539  0213                     	;# 
   540  0213                     	;# 
   541  0214                     	;# 
   542  0214                     	;# 
   543  0215                     	;# 
   544  0215                     	;# 
   545  0215                     	;# 
   546  0215                     	;# 
   547  0216                     	;# 
   548  0216                     	;# 
   549  0217                     	;# 
   550  0217                     	;# 
   551  0219                     	;# 
   552  021A                     	;# 
   553  021B                     	;# 
   554  021C                     	;# 
   555  021D                     	;# 
   556  021D                     	;# 
   557  021E                     	;# 
   558  021F                     	;# 
   559  028C                     	;# 
   560  028E                     	;# 
   561  0291                     	;# 
   562  0291                     	;# 
   563  0292                     	;# 
   564  0293                     	;# 
   565  0294                     	;# 
   566  0295                     	;# 
   567  0295                     	;# 
   568  0296                     	;# 
   569  0297                     	;# 
   570  0298                     	;# 
   571  029F                     	;# 
   572  030C                     	;# 
   573  030E                     	;# 
   574  0311                     	;# 
   575  0311                     	;# 
   576  0312                     	;# 
   577  0313                     	;# 
   578  0314                     	;# 
   579  0315                     	;# 
   580  0315                     	;# 
   581  0316                     	;# 
   582  0317                     	;# 
   583  0318                     	;# 
   584  038C                     	;# 
   585  038E                     	;# 
   586  0391                     	;# 
   587  0392                     	;# 
   588  0393                     	;# 
   589  0397                     	;# 
   590  0398                     	;# 
   591  0399                     	;# 
   592  039A                     	;# 
   593  039C                     	;# 
   594  039D                     	;# 
   595  039E                     	;# 
   596  039F                     	;# 
   597  0411                     	;# 
   598  0411                     	;# 
   599  0412                     	;# 
   600  0413                     	;# 
   601  0414                     	;# 
   602  0415                     	;# 
   603  0416                     	;# 
   604  0417                     	;# 
   605  0418                     	;# 
   606  0418                     	;# 
   607  0419                     	;# 
   608  041A                     	;# 
   609  041B                     	;# 
   610  041C                     	;# 
   611  041D                     	;# 
   612  041E                     	;# 
   613  041F                     	;# 
   614  0498                     	;# 
   615  0498                     	;# 
   616  0499                     	;# 
   617  049A                     	;# 
   618  049B                     	;# 
   619  049B                     	;# 
   620  049C                     	;# 
   621  049D                     	;# 
   622  049E                     	;# 
   623  049F                     	;# 
   624  0617                     	;# 
   625  0618                     	;# 
   626  0619                     	;# 
   627  0619                     	;# 
   628  061A                     	;# 
   629  061B                     	;# 
   630  061C                     	;# 
   631  061C                     	;# 
   632  061F                     	;# 
   633  0691                     	;# 
   634  0692                     	;# 
   635  0693                     	;# 
   636  0694                     	;# 
   637  0695                     	;# 
   638  0696                     	;# 
   639  0697                     	;# 
   640  0698                     	;# 
   641  0699                     	;# 
   642  0711                     	;# 
   643  0712                     	;# 
   644  0713                     	;# 
   645  0714                     	;# 
   646  0715                     	;# 
   647  0716                     	;# 
   648  0717                     	;# 
   649  0718                     	;# 
   650  0719                     	;# 
   651  0891                     	;# 
   652  0891                     	;# 
   653  0891                     	;# 
   654  0891                     	;# 
   655  0891                     	;# 
   656  0891                     	;# 
   657  0892                     	;# 
   658  0892                     	;# 
   659  0892                     	;# 
   660  0893                     	;# 
   661  0893                     	;# 
   662  0893                     	;# 
   663  0893                     	;# 
   664  0893                     	;# 
   665  0893                     	;# 
   666  0894                     	;# 
   667  0894                     	;# 
   668  0894                     	;# 
   669  0895                     	;# 
   670  0895                     	;# 
   671  0895                     	;# 
   672  0896                     	;# 
   673  0896                     	;# 
   674  0896                     	;# 
   675  089B                     	;# 
   676  0911                     	;# 
   677  0912                     	;# 
   678  0913                     	;# 
   679  0914                     	;# 
   680  0915                     	;# 
   681  0916                     	;# 
   682  0918                     	;# 
   683  0919                     	;# 
   684  091A                     	;# 
   685  091B                     	;# 
   686  091C                     	;# 
   687  091D                     	;# 
   688  091E                     	;# 
   689  091F                     	;# 
   690  0E0F                     	;# 
   691  0E10                     	;# 
   692  0E11                     	;# 
   693  0E12                     	;# 
   694  0E13                     	;# 
   695  0E14                     	;# 
   696  0E15                     	;# 
   697  0E16                     	;# 
   698  0E17                     	;# 
   699  0E18                     	;# 
   700  0E19                     	;# 
   701  0E1A                     	;# 
   702  0E1B                     	;# 
   703  0E1C                     	;# 
   704  0E1D                     	;# 
   705  0E1E                     	;# 
   706  0E1F                     	;# 
   707  0E20                     	;# 
   708  0E21                     	;# 
   709  0E22                     	;# 
   710  0E24                     	;# 
   711  0E25                     	;# 
   712  0E28                     	;# 
   713  0E29                     	;# 
   714  0E2A                     	;# 
   715  0E2B                     	;# 
   716  0E2C                     	;# 
   717  0E2D                     	;# 
   718  0E2E                     	;# 
   719  0E2F                     	;# 
   720  0E90                     	;# 
   721  0E91                     	;# 
   722  0E92                     	;# 
   723  0E94                     	;# 
   724  0E95                     	;# 
   725  0EA0                     	;# 
   726  0EA1                     	;# 
   727  0EA2                     	;# 
   728  0EA3                     	;# 
   729  0EA4                     	;# 
   730  0EA5                     	;# 
   731  0F0F                     	;# 
   732  0F10                     	;# 
   733  0F11                     	;# 
   734  0F12                     	;# 
   735  0F13                     	;# 
   736  0F14                     	;# 
   737  0F15                     	;# 
   738  0F16                     	;# 
   739  0F17                     	;# 
   740  0F18                     	;# 
   741  0F19                     	;# 
   742  0F1A                     	;# 
   743  0F1B                     	;# 
   744  0F1C                     	;# 
   745  0F1D                     	;# 
   746  0F1E                     	;# 
   747  0F1F                     	;# 
   748  0F20                     	;# 
   749  0F21                     	;# 
   750  0F22                     	;# 
   751  0F23                     	;# 
   752  0F24                     	;# 
   753  0F25                     	;# 
   754  0F26                     	;# 
   755  0F27                     	;# 
   756  0F28                     	;# 
   757  0F29                     	;# 
   758  0F2A                     	;# 
   759  0F2B                     	;# 
   760  0F2C                     	;# 
   761  0F2D                     	;# 
   762  0F2E                     	;# 
   763  0F2F                     	;# 
   764  0F30                     	;# 
   765  0F31                     	;# 
   766  0F32                     	;# 
   767  0F33                     	;# 
   768  0F34                     	;# 
   769  0F35                     	;# 
   770  0F36                     	;# 
   771  0F37                     	;# 
   772  0FE4                     	;# 
   773  0FE5                     	;# 
   774  0FE6                     	;# 
   775  0FE7                     	;# 
   776  0FE8                     	;# 
   777  0FE9                     	;# 
   778  0FEA                     	;# 
   779  0FEB                     	;# 
   780  0FED                     	;# 
   781  0FEE                     	;# 
   782  0FEF                     	;# 
   783  0000                     	;# 
   784  0001                     	;# 
   785  0002                     	;# 
   786  0003                     	;# 
   787  0004                     	;# 
   788  0005                     	;# 
   789  0006                     	;# 
   790  0007                     	;# 
   791  0008                     	;# 
   792  0009                     	;# 
   793  000A                     	;# 
   794  000B                     	;# 
   795  000C                     	;# 
   796  000E                     	;# 
   797  0010                     	;# 
   798  0011                     	;# 
   799  0012                     	;# 
   800  0013                     	;# 
   801  0014                     	;# 
   802  0015                     	;# 
   803  0015                     	;# 
   804  0016                     	;# 
   805  0016                     	;# 
   806  0017                     	;# 
   807  0018                     	;# 
   808  0019                     	;# 
   809  0019                     	;# 
   810  001A                     	;# 
   811  001B                     	;# 
   812  001C                     	;# 
   813  001D                     	;# 
   814  001E                     	;# 
   815  001F                     	;# 
   816  008C                     	;# 
   817  008E                     	;# 
   818  0090                     	;# 
   819  0091                     	;# 
   820  0092                     	;# 
   821  0093                     	;# 
   822  0094                     	;# 
   823  0097                     	;# 
   824  009B                     	;# 
   825  009B                     	;# 
   826  009C                     	;# 
   827  009D                     	;# 
   828  009E                     	;# 
   829  009F                     	;# 
   830  010C                     	;# 
   831  010E                     	;# 
   832  0111                     	;# 
   833  0112                     	;# 
   834  0113                     	;# 
   835  0114                     	;# 
   836  0115                     	;# 
   837  0116                     	;# 
   838  0117                     	;# 
   839  0118                     	;# 
   840  0119                     	;# 
   841  018C                     	;# 
   842  018E                     	;# 
   843  0199                     	;# 
   844  0199                     	;# 
   845  0199                     	;# 
   846  019A                     	;# 
   847  019A                     	;# 
   848  019A                     	;# 
   849  019B                     	;# 
   850  019B                     	;# 
   851  019B                     	;# 
   852  019B                     	;# 
   853  019B                     	;# 
   854  019C                     	;# 
   855  019C                     	;# 
   856  019C                     	;# 
   857  019D                     	;# 
   858  019D                     	;# 
   859  019D                     	;# 
   860  019E                     	;# 
   861  019E                     	;# 
   862  019E                     	;# 
   863  019F                     	;# 
   864  019F                     	;# 
   865  019F                     	;# 
   866  019F                     	;# 
   867  019F                     	;# 
   868  020C                     	;# 
   869  020E                     	;# 
   870  0211                     	;# 
   871  0211                     	;# 
   872  0212                     	;# 
   873  0212                     	;# 
   874  0213                     	;# 
   875  0213                     	;# 
   876  0214                     	;# 
   877  0214                     	;# 
   878  0215                     	;# 
   879  0215                     	;# 
   880  0215                     	;# 
   881  0215                     	;# 
   882  0216                     	;# 
   883  0216                     	;# 
   884  0217                     	;# 
   885  0217                     	;# 
   886  0219                     	;# 
   887  021A                     	;# 
   888  021B                     	;# 
   889  021C                     	;# 
   890  021D                     	;# 
   891  021D                     	;# 
   892  021E                     	;# 
   893  021F                     	;# 
   894  028C                     	;# 
   895  028E                     	;# 
   896  0291                     	;# 
   897  0291                     	;# 
   898  0292                     	;# 
   899  0293                     	;# 
   900  0294                     	;# 
   901  0295                     	;# 
   902  0295                     	;# 
   903  0296                     	;# 
   904  0297                     	;# 
   905  0298                     	;# 
   906  029F                     	;# 
   907  030C                     	;# 
   908  030E                     	;# 
   909  0311                     	;# 
   910  0311                     	;# 
   911  0312                     	;# 
   912  0313                     	;# 
   913  0314                     	;# 
   914  0315                     	;# 
   915  0315                     	;# 
   916  0316                     	;# 
   917  0317                     	;# 
   918  0318                     	;# 
   919  038C                     	;# 
   920  038E                     	;# 
   921  0391                     	;# 
   922  0392                     	;# 
   923  0393                     	;# 
   924  0397                     	;# 
   925  0398                     	;# 
   926  0399                     	;# 
   927  039A                     	;# 
   928  039C                     	;# 
   929  039D                     	;# 
   930  039E                     	;# 
   931  039F                     	;# 
   932  0411                     	;# 
   933  0411                     	;# 
   934  0412                     	;# 
   935  0413                     	;# 
   936  0414                     	;# 
   937  0415                     	;# 
   938  0416                     	;# 
   939  0417                     	;# 
   940  0418                     	;# 
   941  0418                     	;# 
   942  0419                     	;# 
   943  041A                     	;# 
   944  041B                     	;# 
   945  041C                     	;# 
   946  041D                     	;# 
   947  041E                     	;# 
   948  041F                     	;# 
   949  0498                     	;# 
   950  0498                     	;# 
   951  0499                     	;# 
   952  049A                     	;# 
   953  049B                     	;# 
   954  049B                     	;# 
   955  049C                     	;# 
   956  049D                     	;# 
   957  049E                     	;# 
   958  049F                     	;# 
   959  0617                     	;# 
   960  0618                     	;# 
   961  0619                     	;# 
   962  0619                     	;# 
   963  061A                     	;# 
   964  061B                     	;# 
   965  061C                     	;# 
   966  061C                     	;# 
   967  061F                     	;# 
   968  0691                     	;# 
   969  0692                     	;# 
   970  0693                     	;# 
   971  0694                     	;# 
   972  0695                     	;# 
   973  0696                     	;# 
   974  0697                     	;# 
   975  0698                     	;# 
   976  0699                     	;# 
   977  0711                     	;# 
   978  0712                     	;# 
   979  0713                     	;# 
   980  0714                     	;# 
   981  0715                     	;# 
   982  0716                     	;# 
   983  0717                     	;# 
   984  0718                     	;# 
   985  0719                     	;# 
   986  0891                     	;# 
   987  0891                     	;# 
   988  0891                     	;# 
   989  0891                     	;# 
   990  0891                     	;# 
   991  0891                     	;# 
   992  0892                     	;# 
   993  0892                     	;# 
   994  0892                     	;# 
   995  0893                     	;# 
   996  0893                     	;# 
   997  0893                     	;# 
   998  0893                     	;# 
   999  0893                     	;# 
  1000  0893                     	;# 
  1001  0894                     	;# 
  1002  0894                     	;# 
  1003  0894                     	;# 
  1004  0895                     	;# 
  1005  0895                     	;# 
  1006  0895                     	;# 
  1007  0896                     	;# 
  1008  0896                     	;# 
  1009  0896                     	;# 
  1010  089B                     	;# 
  1011  0911                     	;# 
  1012  0912                     	;# 
  1013  0913                     	;# 
  1014  0914                     	;# 
  1015  0915                     	;# 
  1016  0916                     	;# 
  1017  0918                     	;# 
  1018  0919                     	;# 
  1019  091A                     	;# 
  1020  091B                     	;# 
  1021  091C                     	;# 
  1022  091D                     	;# 
  1023  091E                     	;# 
  1024  091F                     	;# 
  1025  0E0F                     	;# 
  1026  0E10                     	;# 
  1027  0E11                     	;# 
  1028  0E12                     	;# 
  1029  0E13                     	;# 
  1030  0E14                     	;# 
  1031  0E15                     	;# 
  1032  0E16                     	;# 
  1033  0E17                     	;# 
  1034  0E18                     	;# 
  1035  0E19                     	;# 
  1036  0E1A                     	;# 
  1037  0E1B                     	;# 
  1038  0E1C                     	;# 
  1039  0E1D                     	;# 
  1040  0E1E                     	;# 
  1041  0E1F                     	;# 
  1042  0E20                     	;# 
  1043  0E21                     	;# 
  1044  0E22                     	;# 
  1045  0E24                     	;# 
  1046  0E25                     	;# 
  1047  0E28                     	;# 
  1048  0E29                     	;# 
  1049  0E2A                     	;# 
  1050  0E2B                     	;# 
  1051  0E2C                     	;# 
  1052  0E2D                     	;# 
  1053  0E2E                     	;# 
  1054  0E2F                     	;# 
  1055  0E90                     	;# 
  1056  0E91                     	;# 
  1057  0E92                     	;# 
  1058  0E94                     	;# 
  1059  0E95                     	;# 
  1060  0EA0                     	;# 
  1061  0EA1                     	;# 
  1062  0EA2                     	;# 
  1063  0EA3                     	;# 
  1064  0EA4                     	;# 
  1065  0EA5                     	;# 
  1066  0F0F                     	;# 
  1067  0F10                     	;# 
  1068  0F11                     	;# 
  1069  0F12                     	;# 
  1070  0F13                     	;# 
  1071  0F14                     	;# 
  1072  0F15                     	;# 
  1073  0F16                     	;# 
  1074  0F17                     	;# 
  1075  0F18                     	;# 
  1076  0F19                     	;# 
  1077  0F1A                     	;# 
  1078  0F1B                     	;# 
  1079  0F1C                     	;# 
  1080  0F1D                     	;# 
  1081  0F1E                     	;# 
  1082  0F1F                     	;# 
  1083  0F20                     	;# 
  1084  0F21                     	;# 
  1085  0F22                     	;# 
  1086  0F23                     	;# 
  1087  0F24                     	;# 
  1088  0F25                     	;# 
  1089  0F26                     	;# 
  1090  0F27                     	;# 
  1091  0F28                     	;# 
  1092  0F29                     	;# 
  1093  0F2A                     	;# 
  1094  0F2B                     	;# 
  1095  0F2C                     	;# 
  1096  0F2D                     	;# 
  1097  0F2E                     	;# 
  1098  0F2F                     	;# 
  1099  0F30                     	;# 
  1100  0F31                     	;# 
  1101  0F32                     	;# 
  1102  0F33                     	;# 
  1103  0F34                     	;# 
  1104  0F35                     	;# 
  1105  0F36                     	;# 
  1106  0F37                     	;# 
  1107  0FE4                     	;# 
  1108  0FE5                     	;# 
  1109  0FE6                     	;# 
  1110  0FE7                     	;# 
  1111  0FE8                     	;# 
  1112  0FE9                     	;# 
  1113  0FEA                     	;# 
  1114  0FEB                     	;# 
  1115  0FED                     	;# 
  1116  0FEE                     	;# 
  1117  0FEF                     	;# 
  1118  0000                     	;# 
  1119  0001                     	;# 
  1120  0002                     	;# 
  1121  0003                     	;# 
  1122  0004                     	;# 
  1123  0005                     	;# 
  1124  0006                     	;# 
  1125  0007                     	;# 
  1126  0008                     	;# 
  1127  0009                     	;# 
  1128  000A                     	;# 
  1129  000B                     	;# 
  1130  000C                     	;# 
  1131  000E                     	;# 
  1132  0010                     	;# 
  1133  0011                     	;# 
  1134  0012                     	;# 
  1135  0013                     	;# 
  1136  0014                     	;# 
  1137  0015                     	;# 
  1138  0015                     	;# 
  1139  0016                     	;# 
  1140  0016                     	;# 
  1141  0017                     	;# 
  1142  0018                     	;# 
  1143  0019                     	;# 
  1144  0019                     	;# 
  1145  001A                     	;# 
  1146  001B                     	;# 
  1147  001C                     	;# 
  1148  001D                     	;# 
  1149  001E                     	;# 
  1150  001F                     	;# 
  1151  008C                     	;# 
  1152  008E                     	;# 
  1153  0090                     	;# 
  1154  0091                     	;# 
  1155  0092                     	;# 
  1156  0093                     	;# 
  1157  0094                     	;# 
  1158  0097                     	;# 
  1159  009B                     	;# 
  1160  009B                     	;# 
  1161  009C                     	;# 
  1162  009D                     	;# 
  1163  009E                     	;# 
  1164  009F                     	;# 
  1165  010C                     	;# 
  1166  010E                     	;# 
  1167  0111                     	;# 
  1168  0112                     	;# 
  1169  0113                     	;# 
  1170  0114                     	;# 
  1171  0115                     	;# 
  1172  0116                     	;# 
  1173  0117                     	;# 
  1174  0118                     	;# 
  1175  0119                     	;# 
  1176  018C                     	;# 
  1177  018E                     	;# 
  1178  0199                     	;# 
  1179  0199                     	;# 
  1180  0199                     	;# 
  1181  019A                     	;# 
  1182  019A                     	;# 
  1183  019A                     	;# 
  1184  019B                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019B                     	;# 
  1189  019C                     	;# 
  1190  019C                     	;# 
  1191  019C                     	;# 
  1192  019D                     	;# 
  1193  019D                     	;# 
  1194  019D                     	;# 
  1195  019E                     	;# 
  1196  019E                     	;# 
  1197  019E                     	;# 
  1198  019F                     	;# 
  1199  019F                     	;# 
  1200  019F                     	;# 
  1201  019F                     	;# 
  1202  019F                     	;# 
  1203  020C                     	;# 
  1204  020E                     	;# 
  1205  0211                     	;# 
  1206  0211                     	;# 
  1207  0212                     	;# 
  1208  0212                     	;# 
  1209  0213                     	;# 
  1210  0213                     	;# 
  1211  0214                     	;# 
  1212  0214                     	;# 
  1213  0215                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0215                     	;# 
  1217  0216                     	;# 
  1218  0216                     	;# 
  1219  0217                     	;# 
  1220  0217                     	;# 
  1221  0219                     	;# 
  1222  021A                     	;# 
  1223  021B                     	;# 
  1224  021C                     	;# 
  1225  021D                     	;# 
  1226  021D                     	;# 
  1227  021E                     	;# 
  1228  021F                     	;# 
  1229  028C                     	;# 
  1230  028E                     	;# 
  1231  0291                     	;# 
  1232  0291                     	;# 
  1233  0292                     	;# 
  1234  0293                     	;# 
  1235  0294                     	;# 
  1236  0295                     	;# 
  1237  0295                     	;# 
  1238  0296                     	;# 
  1239  0297                     	;# 
  1240  0298                     	;# 
  1241  029F                     	;# 
  1242  030C                     	;# 
  1243  030E                     	;# 
  1244  0311                     	;# 
  1245  0311                     	;# 
  1246  0312                     	;# 
  1247  0313                     	;# 
  1248  0314                     	;# 
  1249  0315                     	;# 
  1250  0315                     	;# 
  1251  0316                     	;# 
  1252  0317                     	;# 
  1253  0318                     	;# 
  1254  038C                     	;# 
  1255  038E                     	;# 
  1256  0391                     	;# 
  1257  0392                     	;# 
  1258  0393                     	;# 
  1259  0397                     	;# 
  1260  0398                     	;# 
  1261  0399                     	;# 
  1262  039A                     	;# 
  1263  039C                     	;# 
  1264  039D                     	;# 
  1265  039E                     	;# 
  1266  039F                     	;# 
  1267  0411                     	;# 
  1268  0411                     	;# 
  1269  0412                     	;# 
  1270  0413                     	;# 
  1271  0414                     	;# 
  1272  0415                     	;# 
  1273  0416                     	;# 
  1274  0417                     	;# 
  1275  0418                     	;# 
  1276  0418                     	;# 
  1277  0419                     	;# 
  1278  041A                     	;# 
  1279  041B                     	;# 
  1280  041C                     	;# 
  1281  041D                     	;# 
  1282  041E                     	;# 
  1283  041F                     	;# 
  1284  0498                     	;# 
  1285  0498                     	;# 
  1286  0499                     	;# 
  1287  049A                     	;# 
  1288  049B                     	;# 
  1289  049B                     	;# 
  1290  049C                     	;# 
  1291  049D                     	;# 
  1292  049E                     	;# 
  1293  049F                     	;# 
  1294  0617                     	;# 
  1295  0618                     	;# 
  1296  0619                     	;# 
  1297  0619                     	;# 
  1298  061A                     	;# 
  1299  061B                     	;# 
  1300  061C                     	;# 
  1301  061C                     	;# 
  1302  061F                     	;# 
  1303  0691                     	;# 
  1304  0692                     	;# 
  1305  0693                     	;# 
  1306  0694                     	;# 
  1307  0695                     	;# 
  1308  0696                     	;# 
  1309  0697                     	;# 
  1310  0698                     	;# 
  1311  0699                     	;# 
  1312  0711                     	;# 
  1313  0712                     	;# 
  1314  0713                     	;# 
  1315  0714                     	;# 
  1316  0715                     	;# 
  1317  0716                     	;# 
  1318  0717                     	;# 
  1319  0718                     	;# 
  1320  0719                     	;# 
  1321  0891                     	;# 
  1322  0891                     	;# 
  1323  0891                     	;# 
  1324  0891                     	;# 
  1325  0891                     	;# 
  1326  0891                     	;# 
  1327  0892                     	;# 
  1328  0892                     	;# 
  1329  0892                     	;# 
  1330  0893                     	;# 
  1331  0893                     	;# 
  1332  0893                     	;# 
  1333  0893                     	;# 
  1334  0893                     	;# 
  1335  0893                     	;# 
  1336  0894                     	;# 
  1337  0894                     	;# 
  1338  0894                     	;# 
  1339  0895                     	;# 
  1340  0895                     	;# 
  1341  0895                     	;# 
  1342  0896                     	;# 
  1343  0896                     	;# 
  1344  0896                     	;# 
  1345  089B                     	;# 
  1346  0911                     	;# 
  1347  0912                     	;# 
  1348  0913                     	;# 
  1349  0914                     	;# 
  1350  0915                     	;# 
  1351  0916                     	;# 
  1352  0918                     	;# 
  1353  0919                     	;# 
  1354  091A                     	;# 
  1355  091B                     	;# 
  1356  091C                     	;# 
  1357  091D                     	;# 
  1358  091E                     	;# 
  1359  091F                     	;# 
  1360  0E0F                     	;# 
  1361  0E10                     	;# 
  1362  0E11                     	;# 
  1363  0E12                     	;# 
  1364  0E13                     	;# 
  1365  0E14                     	;# 
  1366  0E15                     	;# 
  1367  0E16                     	;# 
  1368  0E17                     	;# 
  1369  0E18                     	;# 
  1370  0E19                     	;# 
  1371  0E1A                     	;# 
  1372  0E1B                     	;# 
  1373  0E1C                     	;# 
  1374  0E1D                     	;# 
  1375  0E1E                     	;# 
  1376  0E1F                     	;# 
  1377  0E20                     	;# 
  1378  0E21                     	;# 
  1379  0E22                     	;# 
  1380  0E24                     	;# 
  1381  0E25                     	;# 
  1382  0E28                     	;# 
  1383  0E29                     	;# 
  1384  0E2A                     	;# 
  1385  0E2B                     	;# 
  1386  0E2C                     	;# 
  1387  0E2D                     	;# 
  1388  0E2E                     	;# 
  1389  0E2F                     	;# 
  1390  0E90                     	;# 
  1391  0E91                     	;# 
  1392  0E92                     	;# 
  1393  0E94                     	;# 
  1394  0E95                     	;# 
  1395  0EA0                     	;# 
  1396  0EA1                     	;# 
  1397  0EA2                     	;# 
  1398  0EA3                     	;# 
  1399  0EA4                     	;# 
  1400  0EA5                     	;# 
  1401  0F0F                     	;# 
  1402  0F10                     	;# 
  1403  0F11                     	;# 
  1404  0F12                     	;# 
  1405  0F13                     	;# 
  1406  0F14                     	;# 
  1407  0F15                     	;# 
  1408  0F16                     	;# 
  1409  0F17                     	;# 
  1410  0F18                     	;# 
  1411  0F19                     	;# 
  1412  0F1A                     	;# 
  1413  0F1B                     	;# 
  1414  0F1C                     	;# 
  1415  0F1D                     	;# 
  1416  0F1E                     	;# 
  1417  0F1F                     	;# 
  1418  0F20                     	;# 
  1419  0F21                     	;# 
  1420  0F22                     	;# 
  1421  0F23                     	;# 
  1422  0F24                     	;# 
  1423  0F25                     	;# 
  1424  0F26                     	;# 
  1425  0F27                     	;# 
  1426  0F28                     	;# 
  1427  0F29                     	;# 
  1428  0F2A                     	;# 
  1429  0F2B                     	;# 
  1430  0F2C                     	;# 
  1431  0F2D                     	;# 
  1432  0F2E                     	;# 
  1433  0F2F                     	;# 
  1434  0F30                     	;# 
  1435  0F31                     	;# 
  1436  0F32                     	;# 
  1437  0F33                     	;# 
  1438  0F34                     	;# 
  1439  0F35                     	;# 
  1440  0F36                     	;# 
  1441  0F37                     	;# 
  1442  0FE4                     	;# 
  1443  0FE5                     	;# 
  1444  0FE6                     	;# 
  1445  0FE7                     	;# 
  1446  0FE8                     	;# 
  1447  0FE9                     	;# 
  1448  0FEA                     	;# 
  1449  0FEB                     	;# 
  1450  0FED                     	;# 
  1451  0FEE                     	;# 
  1452  0FEF                     	;# 
  1453  0000                     	;# 
  1454  0001                     	;# 
  1455  0002                     	;# 
  1456  0003                     	;# 
  1457  0004                     	;# 
  1458  0005                     	;# 
  1459  0006                     	;# 
  1460  0007                     	;# 
  1461  0008                     	;# 
  1462  0009                     	;# 
  1463  000A                     	;# 
  1464  000B                     	;# 
  1465  000C                     	;# 
  1466  000E                     	;# 
  1467  0010                     	;# 
  1468  0011                     	;# 
  1469  0012                     	;# 
  1470  0013                     	;# 
  1471  0014                     	;# 
  1472  0015                     	;# 
  1473  0015                     	;# 
  1474  0016                     	;# 
  1475  0016                     	;# 
  1476  0017                     	;# 
  1477  0018                     	;# 
  1478  0019                     	;# 
  1479  0019                     	;# 
  1480  001A                     	;# 
  1481  001B                     	;# 
  1482  001C                     	;# 
  1483  001D                     	;# 
  1484  001E                     	;# 
  1485  001F                     	;# 
  1486  008C                     	;# 
  1487  008E                     	;# 
  1488  0090                     	;# 
  1489  0091                     	;# 
  1490  0092                     	;# 
  1491  0093                     	;# 
  1492  0094                     	;# 
  1493  0097                     	;# 
  1494  009B                     	;# 
  1495  009B                     	;# 
  1496  009C                     	;# 
  1497  009D                     	;# 
  1498  009E                     	;# 
  1499  009F                     	;# 
  1500  010C                     	;# 
  1501  010E                     	;# 
  1502  0111                     	;# 
  1503  0112                     	;# 
  1504  0113                     	;# 
  1505  0114                     	;# 
  1506  0115                     	;# 
  1507  0116                     	;# 
  1508  0117                     	;# 
  1509  0118                     	;# 
  1510  0119                     	;# 
  1511  018C                     	;# 
  1512  018E                     	;# 
  1513  0199                     	;# 
  1514  0199                     	;# 
  1515  0199                     	;# 
  1516  019A                     	;# 
  1517  019A                     	;# 
  1518  019A                     	;# 
  1519  019B                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019C                     	;# 
  1525  019C                     	;# 
  1526  019C                     	;# 
  1527  019D                     	;# 
  1528  019D                     	;# 
  1529  019D                     	;# 
  1530  019E                     	;# 
  1531  019E                     	;# 
  1532  019E                     	;# 
  1533  019F                     	;# 
  1534  019F                     	;# 
  1535  019F                     	;# 
  1536  019F                     	;# 
  1537  019F                     	;# 
  1538  020C                     	;# 
  1539  020E                     	;# 
  1540  0211                     	;# 
  1541  0211                     	;# 
  1542  0212                     	;# 
  1543  0212                     	;# 
  1544  0213                     	;# 
  1545  0213                     	;# 
  1546  0214                     	;# 
  1547  0214                     	;# 
  1548  0215                     	;# 
  1549  0215                     	;# 
  1550  0215                     	;# 
  1551  0215                     	;# 
  1552  0216                     	;# 
  1553  0216                     	;# 
  1554  0217                     	;# 
  1555  0217                     	;# 
  1556  0219                     	;# 
  1557  021A                     	;# 
  1558  021B                     	;# 
  1559  021C                     	;# 
  1560  021D                     	;# 
  1561  021D                     	;# 
  1562  021E                     	;# 
  1563  021F                     	;# 
  1564  028C                     	;# 
  1565  028E                     	;# 
  1566  0291                     	;# 
  1567  0291                     	;# 
  1568  0292                     	;# 
  1569  0293                     	;# 
  1570  0294                     	;# 
  1571  0295                     	;# 
  1572  0295                     	;# 
  1573  0296                     	;# 
  1574  0297                     	;# 
  1575  0298                     	;# 
  1576  029F                     	;# 
  1577  030C                     	;# 
  1578  030E                     	;# 
  1579  0311                     	;# 
  1580  0311                     	;# 
  1581  0312                     	;# 
  1582  0313                     	;# 
  1583  0314                     	;# 
  1584  0315                     	;# 
  1585  0315                     	;# 
  1586  0316                     	;# 
  1587  0317                     	;# 
  1588  0318                     	;# 
  1589  038C                     	;# 
  1590  038E                     	;# 
  1591  0391                     	;# 
  1592  0392                     	;# 
  1593  0393                     	;# 
  1594  0397                     	;# 
  1595  0398                     	;# 
  1596  0399                     	;# 
  1597  039A                     	;# 
  1598  039C                     	;# 
  1599  039D                     	;# 
  1600  039E                     	;# 
  1601  039F                     	;# 
  1602  0411                     	;# 
  1603  0411                     	;# 
  1604  0412                     	;# 
  1605  0413                     	;# 
  1606  0414                     	;# 
  1607  0415                     	;# 
  1608  0416                     	;# 
  1609  0417                     	;# 
  1610  0418                     	;# 
  1611  0418                     	;# 
  1612  0419                     	;# 
  1613  041A                     	;# 
  1614  041B                     	;# 
  1615  041C                     	;# 
  1616  041D                     	;# 
  1617  041E                     	;# 
  1618  041F                     	;# 
  1619  0498                     	;# 
  1620  0498                     	;# 
  1621  0499                     	;# 
  1622  049A                     	;# 
  1623  049B                     	;# 
  1624  049B                     	;# 
  1625  049C                     	;# 
  1626  049D                     	;# 
  1627  049E                     	;# 
  1628  049F                     	;# 
  1629  0617                     	;# 
  1630  0618                     	;# 
  1631  0619                     	;# 
  1632  0619                     	;# 
  1633  061A                     	;# 
  1634  061B                     	;# 
  1635  061C                     	;# 
  1636  061C                     	;# 
  1637  061F                     	;# 
  1638  0691                     	;# 
  1639  0692                     	;# 
  1640  0693                     	;# 
  1641  0694                     	;# 
  1642  0695                     	;# 
  1643  0696                     	;# 
  1644  0697                     	;# 
  1645  0698                     	;# 
  1646  0699                     	;# 
  1647  0711                     	;# 
  1648  0712                     	;# 
  1649  0713                     	;# 
  1650  0714                     	;# 
  1651  0715                     	;# 
  1652  0716                     	;# 
  1653  0717                     	;# 
  1654  0718                     	;# 
  1655  0719                     	;# 
  1656  0891                     	;# 
  1657  0891                     	;# 
  1658  0891                     	;# 
  1659  0891                     	;# 
  1660  0891                     	;# 
  1661  0891                     	;# 
  1662  0892                     	;# 
  1663  0892                     	;# 
  1664  0892                     	;# 
  1665  0893                     	;# 
  1666  0893                     	;# 
  1667  0893                     	;# 
  1668  0893                     	;# 
  1669  0893                     	;# 
  1670  0893                     	;# 
  1671  0894                     	;# 
  1672  0894                     	;# 
  1673  0894                     	;# 
  1674  0895                     	;# 
  1675  0895                     	;# 
  1676  0895                     	;# 
  1677  0896                     	;# 
  1678  0896                     	;# 
  1679  0896                     	;# 
  1680  089B                     	;# 
  1681  0911                     	;# 
  1682  0912                     	;# 
  1683  0913                     	;# 
  1684  0914                     	;# 
  1685  0915                     	;# 
  1686  0916                     	;# 
  1687  0918                     	;# 
  1688  0919                     	;# 
  1689  091A                     	;# 
  1690  091B                     	;# 
  1691  091C                     	;# 
  1692  091D                     	;# 
  1693  091E                     	;# 
  1694  091F                     	;# 
  1695  0E0F                     	;# 
  1696  0E10                     	;# 
  1697  0E11                     	;# 
  1698  0E12                     	;# 
  1699  0E13                     	;# 
  1700  0E14                     	;# 
  1701  0E15                     	;# 
  1702  0E16                     	;# 
  1703  0E17                     	;# 
  1704  0E18                     	;# 
  1705  0E19                     	;# 
  1706  0E1A                     	;# 
  1707  0E1B                     	;# 
  1708  0E1C                     	;# 
  1709  0E1D                     	;# 
  1710  0E1E                     	;# 
  1711  0E1F                     	;# 
  1712  0E20                     	;# 
  1713  0E21                     	;# 
  1714  0E22                     	;# 
  1715  0E24                     	;# 
  1716  0E25                     	;# 
  1717  0E28                     	;# 
  1718  0E29                     	;# 
  1719  0E2A                     	;# 
  1720  0E2B                     	;# 
  1721  0E2C                     	;# 
  1722  0E2D                     	;# 
  1723  0E2E                     	;# 
  1724  0E2F                     	;# 
  1725  0E90                     	;# 
  1726  0E91                     	;# 
  1727  0E92                     	;# 
  1728  0E94                     	;# 
  1729  0E95                     	;# 
  1730  0EA0                     	;# 
  1731  0EA1                     	;# 
  1732  0EA2                     	;# 
  1733  0EA3                     	;# 
  1734  0EA4                     	;# 
  1735  0EA5                     	;# 
  1736  0F0F                     	;# 
  1737  0F10                     	;# 
  1738  0F11                     	;# 
  1739  0F12                     	;# 
  1740  0F13                     	;# 
  1741  0F14                     	;# 
  1742  0F15                     	;# 
  1743  0F16                     	;# 
  1744  0F17                     	;# 
  1745  0F18                     	;# 
  1746  0F19                     	;# 
  1747  0F1A                     	;# 
  1748  0F1B                     	;# 
  1749  0F1C                     	;# 
  1750  0F1D                     	;# 
  1751  0F1E                     	;# 
  1752  0F1F                     	;# 
  1753  0F20                     	;# 
  1754  0F21                     	;# 
  1755  0F22                     	;# 
  1756  0F23                     	;# 
  1757  0F24                     	;# 
  1758  0F25                     	;# 
  1759  0F26                     	;# 
  1760  0F27                     	;# 
  1761  0F28                     	;# 
  1762  0F29                     	;# 
  1763  0F2A                     	;# 
  1764  0F2B                     	;# 
  1765  0F2C                     	;# 
  1766  0F2D                     	;# 
  1767  0F2E                     	;# 
  1768  0F2F                     	;# 
  1769  0F30                     	;# 
  1770  0F31                     	;# 
  1771  0F32                     	;# 
  1772  0F33                     	;# 
  1773  0F34                     	;# 
  1774  0F35                     	;# 
  1775  0F36                     	;# 
  1776  0F37                     	;# 
  1777  0FE4                     	;# 
  1778  0FE5                     	;# 
  1779  0FE6                     	;# 
  1780  0FE7                     	;# 
  1781  0FE8                     	;# 
  1782  0FE9                     	;# 
  1783  0FEA                     	;# 
  1784  0FEB                     	;# 
  1785  0FED                     	;# 
  1786  0FEE                     	;# 
  1787  0FEF                     	;# 
  1788  0000                     	;# 
  1789  0001                     	;# 
  1790  0002                     	;# 
  1791  0003                     	;# 
  1792  0004                     	;# 
  1793  0005                     	;# 
  1794  0006                     	;# 
  1795  0007                     	;# 
  1796  0008                     	;# 
  1797  0009                     	;# 
  1798  000A                     	;# 
  1799  000B                     	;# 
  1800  000C                     	;# 
  1801  000E                     	;# 
  1802  0010                     	;# 
  1803  0011                     	;# 
  1804  0012                     	;# 
  1805  0013                     	;# 
  1806  0014                     	;# 
  1807  0015                     	;# 
  1808  0015                     	;# 
  1809  0016                     	;# 
  1810  0016                     	;# 
  1811  0017                     	;# 
  1812  0018                     	;# 
  1813  0019                     	;# 
  1814  0019                     	;# 
  1815  001A                     	;# 
  1816  001B                     	;# 
  1817  001C                     	;# 
  1818  001D                     	;# 
  1819  001E                     	;# 
  1820  001F                     	;# 
  1821  008C                     	;# 
  1822  008E                     	;# 
  1823  0090                     	;# 
  1824  0091                     	;# 
  1825  0092                     	;# 
  1826  0093                     	;# 
  1827  0094                     	;# 
  1828  0097                     	;# 
  1829  009B                     	;# 
  1830  009B                     	;# 
  1831  009C                     	;# 
  1832  009D                     	;# 
  1833  009E                     	;# 
  1834  009F                     	;# 
  1835  010C                     	;# 
  1836  010E                     	;# 
  1837  0111                     	;# 
  1838  0112                     	;# 
  1839  0113                     	;# 
  1840  0114                     	;# 
  1841  0115                     	;# 
  1842  0116                     	;# 
  1843  0117                     	;# 
  1844  0118                     	;# 
  1845  0119                     	;# 
  1846  018C                     	;# 
  1847  018E                     	;# 
  1848  0199                     	;# 
  1849  0199                     	;# 
  1850  0199                     	;# 
  1851  019A                     	;# 
  1852  019A                     	;# 
  1853  019A                     	;# 
  1854  019B                     	;# 
  1855  019B                     	;# 
  1856  019B                     	;# 
  1857  019B                     	;# 
  1858  019B                     	;# 
  1859  019C                     	;# 
  1860  019C                     	;# 
  1861  019C                     	;# 
  1862  019D                     	;# 
  1863  019D                     	;# 
  1864  019D                     	;# 
  1865  019E                     	;# 
  1866  019E                     	;# 
  1867  019E                     	;# 
  1868  019F                     	;# 
  1869  019F                     	;# 
  1870  019F                     	;# 
  1871  019F                     	;# 
  1872  019F                     	;# 
  1873  020C                     	;# 
  1874  020E                     	;# 
  1875  0211                     	;# 
  1876  0211                     	;# 
  1877  0212                     	;# 
  1878  0212                     	;# 
  1879  0213                     	;# 
  1880  0213                     	;# 
  1881  0214                     	;# 
  1882  0214                     	;# 
  1883  0215                     	;# 
  1884  0215                     	;# 
  1885  0215                     	;# 
  1886  0215                     	;# 
  1887  0216                     	;# 
  1888  0216                     	;# 
  1889  0217                     	;# 
  1890  0217                     	;# 
  1891  0219                     	;# 
  1892  021A                     	;# 
  1893  021B                     	;# 
  1894  021C                     	;# 
  1895  021D                     	;# 
  1896  021D                     	;# 
  1897  021E                     	;# 
  1898  021F                     	;# 
  1899  028C                     	;# 
  1900  028E                     	;# 
  1901  0291                     	;# 
  1902  0291                     	;# 
  1903  0292                     	;# 
  1904  0293                     	;# 
  1905  0294                     	;# 
  1906  0295                     	;# 
  1907  0295                     	;# 
  1908  0296                     	;# 
  1909  0297                     	;# 
  1910  0298                     	;# 
  1911  029F                     	;# 
  1912  030C                     	;# 
  1913  030E                     	;# 
  1914  0311                     	;# 
  1915  0311                     	;# 
  1916  0312                     	;# 
  1917  0313                     	;# 
  1918  0314                     	;# 
  1919  0315                     	;# 
  1920  0315                     	;# 
  1921  0316                     	;# 
  1922  0317                     	;# 
  1923  0318                     	;# 
  1924  038C                     	;# 
  1925  038E                     	;# 
  1926  0391                     	;# 
  1927  0392                     	;# 
  1928  0393                     	;# 
  1929  0397                     	;# 
  1930  0398                     	;# 
  1931  0399                     	;# 
  1932  039A                     	;# 
  1933  039C                     	;# 
  1934  039D                     	;# 
  1935  039E                     	;# 
  1936  039F                     	;# 
  1937  0411                     	;# 
  1938  0411                     	;# 
  1939  0412                     	;# 
  1940  0413                     	;# 
  1941  0414                     	;# 
  1942  0415                     	;# 
  1943  0416                     	;# 
  1944  0417                     	;# 
  1945  0418                     	;# 
  1946  0418                     	;# 
  1947  0419                     	;# 
  1948  041A                     	;# 
  1949  041B                     	;# 
  1950  041C                     	;# 
  1951  041D                     	;# 
  1952  041E                     	;# 
  1953  041F                     	;# 
  1954  0498                     	;# 
  1955  0498                     	;# 
  1956  0499                     	;# 
  1957  049A                     	;# 
  1958  049B                     	;# 
  1959  049B                     	;# 
  1960  049C                     	;# 
  1961  049D                     	;# 
  1962  049E                     	;# 
  1963  049F                     	;# 
  1964  0617                     	;# 
  1965  0618                     	;# 
  1966  0619                     	;# 
  1967  0619                     	;# 
  1968  061A                     	;# 
  1969  061B                     	;# 
  1970  061C                     	;# 
  1971  061C                     	;# 
  1972  061F                     	;# 
  1973  0691                     	;# 
  1974  0692                     	;# 
  1975  0693                     	;# 
  1976  0694                     	;# 
  1977  0695                     	;# 
  1978  0696                     	;# 
  1979  0697                     	;# 
  1980  0698                     	;# 
  1981  0699                     	;# 
  1982  0711                     	;# 
  1983  0712                     	;# 
  1984  0713                     	;# 
  1985  0714                     	;# 
  1986  0715                     	;# 
  1987  0716                     	;# 
  1988  0717                     	;# 
  1989  0718                     	;# 
  1990  0719                     	;# 
  1991  0891                     	;# 
  1992  0891                     	;# 
  1993  0891                     	;# 
  1994  0891                     	;# 
  1995  0891                     	;# 
  1996  0891                     	;# 
  1997  0892                     	;# 
  1998  0892                     	;# 
  1999  0892                     	;# 
  2000  0893                     	;# 
  2001  0893                     	;# 
  2002  0893                     	;# 
  2003  0893                     	;# 
  2004  0893                     	;# 
  2005  0893                     	;# 
  2006  0894                     	;# 
  2007  0894                     	;# 
  2008  0894                     	;# 
  2009  0895                     	;# 
  2010  0895                     	;# 
  2011  0895                     	;# 
  2012  0896                     	;# 
  2013  0896                     	;# 
  2014  0896                     	;# 
  2015  089B                     	;# 
  2016  0911                     	;# 
  2017  0912                     	;# 
  2018  0913                     	;# 
  2019  0914                     	;# 
  2020  0915                     	;# 
  2021  0916                     	;# 
  2022  0918                     	;# 
  2023  0919                     	;# 
  2024  091A                     	;# 
  2025  091B                     	;# 
  2026  091C                     	;# 
  2027  091D                     	;# 
  2028  091E                     	;# 
  2029  091F                     	;# 
  2030  0E0F                     	;# 
  2031  0E10                     	;# 
  2032  0E11                     	;# 
  2033  0E12                     	;# 
  2034  0E13                     	;# 
  2035  0E14                     	;# 
  2036  0E15                     	;# 
  2037  0E16                     	;# 
  2038  0E17                     	;# 
  2039  0E18                     	;# 
  2040  0E19                     	;# 
  2041  0E1A                     	;# 
  2042  0E1B                     	;# 
  2043  0E1C                     	;# 
  2044  0E1D                     	;# 
  2045  0E1E                     	;# 
  2046  0E1F                     	;# 
  2047  0E20                     	;# 
  2048  0E21                     	;# 
  2049  0E22                     	;# 
  2050  0E24                     	;# 
  2051  0E25                     	;# 
  2052  0E28                     	;# 
  2053  0E29                     	;# 
  2054  0E2A                     	;# 
  2055  0E2B                     	;# 
  2056  0E2C                     	;# 
  2057  0E2D                     	;# 
  2058  0E2E                     	;# 
  2059  0E2F                     	;# 
  2060  0E90                     	;# 
  2061  0E91                     	;# 
  2062  0E92                     	;# 
  2063  0E94                     	;# 
  2064  0E95                     	;# 
  2065  0EA0                     	;# 
  2066  0EA1                     	;# 
  2067  0EA2                     	;# 
  2068  0EA3                     	;# 
  2069  0EA4                     	;# 
  2070  0EA5                     	;# 
  2071  0F0F                     	;# 
  2072  0F10                     	;# 
  2073  0F11                     	;# 
  2074  0F12                     	;# 
  2075  0F13                     	;# 
  2076  0F14                     	;# 
  2077  0F15                     	;# 
  2078  0F16                     	;# 
  2079  0F17                     	;# 
  2080  0F18                     	;# 
  2081  0F19                     	;# 
  2082  0F1A                     	;# 
  2083  0F1B                     	;# 
  2084  0F1C                     	;# 
  2085  0F1D                     	;# 
  2086  0F1E                     	;# 
  2087  0F1F                     	;# 
  2088  0F20                     	;# 
  2089  0F21                     	;# 
  2090  0F22                     	;# 
  2091  0F23                     	;# 
  2092  0F24                     	;# 
  2093  0F25                     	;# 
  2094  0F26                     	;# 
  2095  0F27                     	;# 
  2096  0F28                     	;# 
  2097  0F29                     	;# 
  2098  0F2A                     	;# 
  2099  0F2B                     	;# 
  2100  0F2C                     	;# 
  2101  0F2D                     	;# 
  2102  0F2E                     	;# 
  2103  0F2F                     	;# 
  2104  0F30                     	;# 
  2105  0F31                     	;# 
  2106  0F32                     	;# 
  2107  0F33                     	;# 
  2108  0F34                     	;# 
  2109  0F35                     	;# 
  2110  0F36                     	;# 
  2111  0F37                     	;# 
  2112  0FE4                     	;# 
  2113  0FE5                     	;# 
  2114  0FE6                     	;# 
  2115  0FE7                     	;# 
  2116  0FE8                     	;# 
  2117  0FE9                     	;# 
  2118  0FEA                     	;# 
  2119  0FEB                     	;# 
  2120  0FED                     	;# 
  2121  0FEE                     	;# 
  2122  0FEF                     	;# 
  2123  0000                     	;# 
  2124  0001                     	;# 
  2125  0002                     	;# 
  2126  0003                     	;# 
  2127  0004                     	;# 
  2128  0005                     	;# 
  2129  0006                     	;# 
  2130  0007                     	;# 
  2131  0008                     	;# 
  2132  0009                     	;# 
  2133  000A                     	;# 
  2134  000B                     	;# 
  2135  000C                     	;# 
  2136  000E                     	;# 
  2137  0010                     	;# 
  2138  0011                     	;# 
  2139  0012                     	;# 
  2140  0013                     	;# 
  2141  0014                     	;# 
  2142  0015                     	;# 
  2143  0015                     	;# 
  2144  0016                     	;# 
  2145  0016                     	;# 
  2146  0017                     	;# 
  2147  0018                     	;# 
  2148  0019                     	;# 
  2149  0019                     	;# 
  2150  001A                     	;# 
  2151  001B                     	;# 
  2152  001C                     	;# 
  2153  001D                     	;# 
  2154  001E                     	;# 
  2155  001F                     	;# 
  2156  008C                     	;# 
  2157  008E                     	;# 
  2158  0090                     	;# 
  2159  0091                     	;# 
  2160  0092                     	;# 
  2161  0093                     	;# 
  2162  0094                     	;# 
  2163  0097                     	;# 
  2164  009B                     	;# 
  2165  009B                     	;# 
  2166  009C                     	;# 
  2167  009D                     	;# 
  2168  009E                     	;# 
  2169  009F                     	;# 
  2170  010C                     	;# 
  2171  010E                     	;# 
  2172  0111                     	;# 
  2173  0112                     	;# 
  2174  0113                     	;# 
  2175  0114                     	;# 
  2176  0115                     	;# 
  2177  0116                     	;# 
  2178  0117                     	;# 
  2179  0118                     	;# 
  2180  0119                     	;# 
  2181  018C                     	;# 
  2182  018E                     	;# 
  2183  0199                     	;# 
  2184  0199                     	;# 
  2185  0199                     	;# 
  2186  019A                     	;# 
  2187  019A                     	;# 
  2188  019A                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019B                     	;# 
  2192  019B                     	;# 
  2193  019B                     	;# 
  2194  019C                     	;# 
  2195  019C                     	;# 
  2196  019C                     	;# 
  2197  019D                     	;# 
  2198  019D                     	;# 
  2199  019D                     	;# 
  2200  019E                     	;# 
  2201  019E                     	;# 
  2202  019E                     	;# 
  2203  019F                     	;# 
  2204  019F                     	;# 
  2205  019F                     	;# 
  2206  019F                     	;# 
  2207  019F                     	;# 
  2208  020C                     	;# 
  2209  020E                     	;# 
  2210  0211                     	;# 
  2211  0211                     	;# 
  2212  0212                     	;# 
  2213  0212                     	;# 
  2214  0213                     	;# 
  2215  0213                     	;# 
  2216  0214                     	;# 
  2217  0214                     	;# 
  2218  0215                     	;# 
  2219  0215                     	;# 
  2220  0215                     	;# 
  2221  0215                     	;# 
  2222  0216                     	;# 
  2223  0216                     	;# 
  2224  0217                     	;# 
  2225  0217                     	;# 
  2226  0219                     	;# 
  2227  021A                     	;# 
  2228  021B                     	;# 
  2229  021C                     	;# 
  2230  021D                     	;# 
  2231  021D                     	;# 
  2232  021E                     	;# 
  2233  021F                     	;# 
  2234  028C                     	;# 
  2235  028E                     	;# 
  2236  0291                     	;# 
  2237  0291                     	;# 
  2238  0292                     	;# 
  2239  0293                     	;# 
  2240  0294                     	;# 
  2241  0295                     	;# 
  2242  0295                     	;# 
  2243  0296                     	;# 
  2244  0297                     	;# 
  2245  0298                     	;# 
  2246  029F                     	;# 
  2247  030C                     	;# 
  2248  030E                     	;# 
  2249  0311                     	;# 
  2250  0311                     	;# 
  2251  0312                     	;# 
  2252  0313                     	;# 
  2253  0314                     	;# 
  2254  0315                     	;# 
  2255  0315                     	;# 
  2256  0316                     	;# 
  2257  0317                     	;# 
  2258  0318                     	;# 
  2259  038C                     	;# 
  2260  038E                     	;# 
  2261  0391                     	;# 
  2262  0392                     	;# 
  2263  0393                     	;# 
  2264  0397                     	;# 
  2265  0398                     	;# 
  2266  0399                     	;# 
  2267  039A                     	;# 
  2268  039C                     	;# 
  2269  039D                     	;# 
  2270  039E                     	;# 
  2271  039F                     	;# 
  2272  0411                     	;# 
  2273  0411                     	;# 
  2274  0412                     	;# 
  2275  0413                     	;# 
  2276  0414                     	;# 
  2277  0415                     	;# 
  2278  0416                     	;# 
  2279  0417                     	;# 
  2280  0418                     	;# 
  2281  0418                     	;# 
  2282  0419                     	;# 
  2283  041A                     	;# 
  2284  041B                     	;# 
  2285  041C                     	;# 
  2286  041D                     	;# 
  2287  041E                     	;# 
  2288  041F                     	;# 
  2289  0498                     	;# 
  2290  0498                     	;# 
  2291  0499                     	;# 
  2292  049A                     	;# 
  2293  049B                     	;# 
  2294  049B                     	;# 
  2295  049C                     	;# 
  2296  049D                     	;# 
  2297  049E                     	;# 
  2298  049F                     	;# 
  2299  0617                     	;# 
  2300  0618                     	;# 
  2301  0619                     	;# 
  2302  0619                     	;# 
  2303  061A                     	;# 
  2304  061B                     	;# 
  2305  061C                     	;# 
  2306  061C                     	;# 
  2307  061F                     	;# 
  2308  0691                     	;# 
  2309  0692                     	;# 
  2310  0693                     	;# 
  2311  0694                     	;# 
  2312  0695                     	;# 
  2313  0696                     	;# 
  2314  0697                     	;# 
  2315  0698                     	;# 
  2316  0699                     	;# 
  2317  0711                     	;# 
  2318  0712                     	;# 
  2319  0713                     	;# 
  2320  0714                     	;# 
  2321  0715                     	;# 
  2322  0716                     	;# 
  2323  0717                     	;# 
  2324  0718                     	;# 
  2325  0719                     	;# 
  2326  0891                     	;# 
  2327  0891                     	;# 
  2328  0891                     	;# 
  2329  0891                     	;# 
  2330  0891                     	;# 
  2331  0891                     	;# 
  2332  0892                     	;# 
  2333  0892                     	;# 
  2334  0892                     	;# 
  2335  0893                     	;# 
  2336  0893                     	;# 
  2337  0893                     	;# 
  2338  0893                     	;# 
  2339  0893                     	;# 
  2340  0893                     	;# 
  2341  0894                     	;# 
  2342  0894                     	;# 
  2343  0894                     	;# 
  2344  0895                     	;# 
  2345  0895                     	;# 
  2346  0895                     	;# 
  2347  0896                     	;# 
  2348  0896                     	;# 
  2349  0896                     	;# 
  2350  089B                     	;# 
  2351  0911                     	;# 
  2352  0912                     	;# 
  2353  0913                     	;# 
  2354  0914                     	;# 
  2355  0915                     	;# 
  2356  0916                     	;# 
  2357  0918                     	;# 
  2358  0919                     	;# 
  2359  091A                     	;# 
  2360  091B                     	;# 
  2361  091C                     	;# 
  2362  091D                     	;# 
  2363  091E                     	;# 
  2364  091F                     	;# 
  2365  0E0F                     	;# 
  2366  0E10                     	;# 
  2367  0E11                     	;# 
  2368  0E12                     	;# 
  2369  0E13                     	;# 
  2370  0E14                     	;# 
  2371  0E15                     	;# 
  2372  0E16                     	;# 
  2373  0E17                     	;# 
  2374  0E18                     	;# 
  2375  0E19                     	;# 
  2376  0E1A                     	;# 
  2377  0E1B                     	;# 
  2378  0E1C                     	;# 
  2379  0E1D                     	;# 
  2380  0E1E                     	;# 
  2381  0E1F                     	;# 
  2382  0E20                     	;# 
  2383  0E21                     	;# 
  2384  0E22                     	;# 
  2385  0E24                     	;# 
  2386  0E25                     	;# 
  2387  0E28                     	;# 
  2388  0E29                     	;# 
  2389  0E2A                     	;# 
  2390  0E2B                     	;# 
  2391  0E2C                     	;# 
  2392  0E2D                     	;# 
  2393  0E2E                     	;# 
  2394  0E2F                     	;# 
  2395  0E90                     	;# 
  2396  0E91                     	;# 
  2397  0E92                     	;# 
  2398  0E94                     	;# 
  2399  0E95                     	;# 
  2400  0EA0                     	;# 
  2401  0EA1                     	;# 
  2402  0EA2                     	;# 
  2403  0EA3                     	;# 
  2404  0EA4                     	;# 
  2405  0EA5                     	;# 
  2406  0F0F                     	;# 
  2407  0F10                     	;# 
  2408  0F11                     	;# 
  2409  0F12                     	;# 
  2410  0F13                     	;# 
  2411  0F14                     	;# 
  2412  0F15                     	;# 
  2413  0F16                     	;# 
  2414  0F17                     	;# 
  2415  0F18                     	;# 
  2416  0F19                     	;# 
  2417  0F1A                     	;# 
  2418  0F1B                     	;# 
  2419  0F1C                     	;# 
  2420  0F1D                     	;# 
  2421  0F1E                     	;# 
  2422  0F1F                     	;# 
  2423  0F20                     	;# 
  2424  0F21                     	;# 
  2425  0F22                     	;# 
  2426  0F23                     	;# 
  2427  0F24                     	;# 
  2428  0F25                     	;# 
  2429  0F26                     	;# 
  2430  0F27                     	;# 
  2431  0F28                     	;# 
  2432  0F29                     	;# 
  2433  0F2A                     	;# 
  2434  0F2B                     	;# 
  2435  0F2C                     	;# 
  2436  0F2D                     	;# 
  2437  0F2E                     	;# 
  2438  0F2F                     	;# 
  2439  0F30                     	;# 
  2440  0F31                     	;# 
  2441  0F32                     	;# 
  2442  0F33                     	;# 
  2443  0F34                     	;# 
  2444  0F35                     	;# 
  2445  0F36                     	;# 
  2446  0F37                     	;# 
  2447  0FE4                     	;# 
  2448  0FE5                     	;# 
  2449  0FE6                     	;# 
  2450  0FE7                     	;# 
  2451  0FE8                     	;# 
  2452  0FE9                     	;# 
  2453  0FEA                     	;# 
  2454  0FEB                     	;# 
  2455  0FED                     	;# 
  2456  0FEE                     	;# 
  2457  0FEF                     	;# 
  2458                           
  2459                           	psect	idataBANK1
  2460  07FF                     __pidataBANK1:	
  2461 ;;nrf24l01Service@width	offset	0
  2462 ;;nrf24l01Service@i	offset	1
  2463 ;;strcmp@s1	offset	0
  2464 ;;strcmp@r	offset	1
  2465 ;;strcmp@s2	offset=-1 (param)
  2466 ;;nrf24l01SendTXBuffer@packet	offset	0
  2467 ;;nrf24l01SendTXBuffer@i	offset	1
  2468 ;;nrf24l01SendTXBuffer@width	offset	2
  2469 ;;strlen@s	offset	0
  2470 ;;strlen@cp	offset	1
  2471 ;;nrf24l01SetRXMode@rxMode	offset	0
  2472 ;;nrf24l01Send@command	offset	0
  2473 ;;nrf24l01Send@data	offset=-1 (param)
  2474 ;;nrf24l01SPISend@data	offset	0
  2475 ;;memset@p	offset	0
  2476 ;;memset@p1	offset=-2 (param)
  2477 ;;memset@c	offset=-4 (param)
  2478 ;;memset@n	offset=-6 (param)
  2479 ;;nrf24l01Service@width	offset	0
  2480 ;;nrf24l01Service@i	offset	1
  2481 ;;strcmp@s1	offset	0
  2482 ;;strcmp@r	offset	1
  2483 ;;strcmp@s2	offset=-1 (param)
  2484 ;;nrf24l01SendTXBuffer@packet	offset	0
  2485 ;;nrf24l01SendTXBuffer@i	offset	1
  2486 ;;nrf24l01SendTXBuffer@width	offset	2
  2487 ;;strlen@s	offset	0
  2488 ;;strlen@cp	offset	1
  2489 ;;nrf24l01SetRXMode@rxMode	offset	0
  2490 ;;nrf24l01Send@command	offset	0
  2491 ;;nrf24l01Send@data	offset=-1 (param)
  2492 ;;nrf24l01SPISend@data	offset	0
  2493 ;;memset@p	offset	0
  2494 ;;memset@p1	offset=-2 (param)
  2495 ;;memset@c	offset=-4 (param)
  2496 ;;memset@n	offset=-6 (param)
  2497                           
  2498                           
  2499                           ;initializer for _romData
  2500  07FF  34C1               	retlw	low (_romDataMap| (0+256))
  2501                           
  2502                           	psect	stringtext1
  2503  1000                     __pstringtext1:	
  2504  1000                     _dpowers:	
  2505  1000  3401               	retlw	1
  2506  1001  3400               	retlw	0
  2507  1002  3400               	retlw	0
  2508  1003  3400               	retlw	0
  2509  1004  340A               	retlw	10
  2510  1005  3400               	retlw	0
  2511  1006  3400               	retlw	0
  2512  1007  3400               	retlw	0
  2513  1008  3464               	retlw	100
  2514  1009  3400               	retlw	0
  2515  100A  3400               	retlw	0
  2516  100B  3400               	retlw	0
  2517  100C  34E8               	retlw	232
  2518  100D  3403               	retlw	3
  2519  100E  3400               	retlw	0
  2520  100F  3400               	retlw	0
  2521  1010  3410               	retlw	16
  2522  1011  3427               	retlw	39
  2523  1012  3400               	retlw	0
  2524  1013  3400               	retlw	0
  2525  1014  34A0               	retlw	160
  2526  1015  3486               	retlw	134
  2527  1016  3401               	retlw	1
  2528  1017  3400               	retlw	0
  2529  1018  3440               	retlw	64
  2530  1019  3442               	retlw	66
  2531  101A  340F               	retlw	15
  2532  101B  3400               	retlw	0
  2533  101C  3480               	retlw	128
  2534  101D  3496               	retlw	150
  2535  101E  3498               	retlw	152
  2536  101F  3400               	retlw	0
  2537  1020  3400               	retlw	0
  2538  1021  34E1               	retlw	225
  2539  1022  34F5               	retlw	245
  2540  1023  3405               	retlw	5
  2541  1024  3400               	retlw	0
  2542  1025  34CA               	retlw	202
  2543  1026  349A               	retlw	154
  2544  1027  343B               	retlw	59
  2545  1028                     __end_of_dpowers:	
  2546                           
  2547                           	psect	stringtext2
  2548  104D                     __pstringtext2:	
  2549  104D                     _n_ADDRESS_P0:	
  2550  104D  34AD               	retlw	173
  2551  104E  3487               	retlw	135
  2552  104F  3466               	retlw	102
  2553  1050  34BC               	retlw	188
  2554  1051  34BB               	retlw	187
  2555  1052                     __end_of_n_ADDRESS_P0:	
  2556                           
  2557                           	psect	stringtext3
  2558  1028                     __pstringtext3:	
  2559  1028                     _n_ADDRESS_MUL:	
  2560  1028  3421               	retlw	33
  2561  1029                     __end_of_n_ADDRESS_MUL:	
  2562  001A                     _TMR1H	set	26
  2563  0019                     _TMR1L	set	25
  2564  001C                     _T1GCONbits	set	28
  2565  001B                     _T1CONbits	set	27
  2566  000B                     _INTCONbits	set	11
  2567  0011                     _PIR1bits	set	17
  2568  0010                     _PIR0bits	set	16
  2569  000C                     _PORTAbits	set	12
  2570  000E                     _PORTCbits	set	14
  2571  0091                     _PIE1bits	set	145
  2572  009E                     _ADCON1bits	set	158
  2573  009C                     _ADRESH	set	156
  2574  009B                     _ADRESL	set	155
  2575  009D                     _ADCON0bits	set	157
  2576  0090                     _PIE0bits	set	144
  2577  0097                     _WDTCONbits	set	151
  2578  008E                     _TRISCbits	set	142
  2579  008C                     _TRISAbits	set	140
  2580  0117                     _FVRCONbits	set	279
  2581  018E                     _ANSELCbits	set	398
  2582  018C                     _ANSELAbits	set	396
  2583  018E                     _ANSELC	set	398
  2584  018C                     _ANSELA	set	396
  2585  020C                     _WPUAbits	set	524
  2586  020E                     _WPUC	set	526
  2587  020C                     _WPUA	set	524
  2588  0211                     _SSP1BUF	set	529
  2589  0214                     _SSP1STATbits	set	532
  2590  0215                     _SSP1CON1bits	set	533
  2591  028C                     _ODCONAbits	set	652
  2592  028E                     _ODCONC	set	654
  2593  028C                     _ODCONA	set	652
  2594  0391                     _IOCAPbits	set	913
  2595  038E                     _INLVLC	set	910
  2596  038C                     _INLVLA	set	908
  2597  0393                     _IOCAFbits	set	915
  2598  0896                     _NVMCON2	set	2198
  2599  0895                     _NVMCON1bits	set	2197
  2600  0893                     _NVMDATL	set	2195
  2601  0891                     _NVMADRL	set	2193
  2602  0892                     _NVMADRH	set	2194
  2603  0919                     _OSCCON1bits	set	2329
  2604  0EA0                     _RC0PPSbits	set	3744
  2605  0EA2                     _RC2PPSbits	set	3746
  2606  0EA1                     _RC1PPSbits	set	3745
  2607  1029                     STR_10:	
  2608  1029  3425               	retlw	37	;'%'
  2609  102A  346C               	retlw	108	;'l'
  2610  102B  3475               	retlw	117	;'u'
  2611  102C  342E               	retlw	46	;'.'
  2612  102D  3425               	retlw	37	;'%'
  2613  102E  3436               	retlw	54	;'6'
  2614  102F  342E               	retlw	46	;'.'
  2615  1030  3436               	retlw	54	;'6'
  2616  1031  346C               	retlw	108	;'l'
  2617  1032  3475               	retlw	117	;'u'
  2618  1033  3400               	retlw	0
  2619                           
  2620                           	psect	stringtext4
  2621  1034                     __pstringtext4:	
  2622  1034                     STR_5:	
  2623  1034  3472               	retlw	114	;'r'
  2624  1035  3463               	retlw	99	;'c'
  2625  1036  346F               	retlw	111	;'o'
  2626  1037  3475               	retlw	117	;'u'
  2627  1038  346E               	retlw	110	;'n'
  2628  1039  3474               	retlw	116	;'t'
  2629  103A  3400               	retlw	0
  2630                           
  2631                           	psect	stringtext5
  2632  103B                     __pstringtext5:	
  2633  103B                     STR_8:	
  2634  103B  3442               	retlw	66	;'B'
  2635  103C  344F               	retlw	79	;'O'
  2636  103D  344F               	retlw	79	;'O'
  2637  103E  3454               	retlw	84	;'T'
  2638  103F  3430               	retlw	48	;'0'
  2639  1040  3400               	retlw	0
  2640                           
  2641                           	psect	stringtext6
  2642  1041                     __pstringtext6:	
  2643  1041                     STR_9:	
  2644  1041  3442               	retlw	66	;'B'
  2645  1042  344F               	retlw	79	;'O'
  2646  1043  344F               	retlw	79	;'O'
  2647  1044  3454               	retlw	84	;'T'
  2648  1045  3431               	retlw	49	;'1'
  2649  1046  3400               	retlw	0
  2650                           
  2651                           	psect	stringtext7
  2652  1047                     __pstringtext7:	
  2653  1047                     STR_4:	
  2654  1047  3472               	retlw	114	;'r'
  2655  1048  346C               	retlw	108	;'l'
  2656  1049  346F               	retlw	111	;'o'
  2657  104A  346F               	retlw	111	;'o'
  2658  104B  3470               	retlw	112	;'p'
  2659  104C  3400               	retlw	0
  2660                           
  2661                           	psect	stringtext8
  2662  1052                     __pstringtext8:	
  2663  1052                     STR_6:	
  2664  1052  3454               	retlw	84	;'T'
  2665  1053  3445               	retlw	69	;'E'
  2666  1054  344D               	retlw	77	;'M'
  2667  1055  3450               	retlw	80	;'P'
  2668  1056  3400               	retlw	0
  2669                           
  2670                           	psect	stringtext9
  2671  1057                     __pstringtext9:	
  2672  1057                     STR_3:	
  2673  1057  3444               	retlw	68	;'D'
  2674  1058  3449               	retlw	73	;'I'
  2675  1059  3453               	retlw	83	;'S'
  2676  105A  3454               	retlw	84	;'T'
  2677  105B  3400               	retlw	0
  2678                           
  2679                           	psect	stringtext10
  2680  105C                     __pstringtext10:	
  2681  105C                     STR_7:	
  2682  105C  3455               	retlw	85	;'U'
  2683  105D  3457               	retlw	87	;'W'
  2684  105E  3454               	retlw	84	;'T'
  2685  105F  3400               	retlw	0
  2686                           
  2687                           	psect	stringtext11
  2688  1060                     __pstringtext11:	
  2689  1060                     STR_1:	
  2690  1060  342F               	retlw	47	;'/'
  2691  1061  3400               	retlw	0
  2692                           
  2693                           	psect	stringtext12
  2694  0000                     __pstringtext12:	
  2695  1060                     
  2696                           ; #config settings
  2697  0000                     
  2698                           	psect	cinit
  2699  0034                     start_initialization:	
  2700  0034                     __initialization:	
  2701                           
  2702                           ; Initialize objects allocated to BANK1
  2703  0034  0021               	movlb	1	; select bank1
  2704  0035  3187  27FF  3180   	fcall	__pidataBANK1	;fetch initializer
  2705  0038  00DB               	movwf	__pdataBANK1& (0+127)
  2706                           
  2707                           ; Clear objects allocated to BANK0
  2708  0039  0020               	movlb	0	; select bank0
  2709  003A  01E4               	clrf	__pbssBANK0& (0+127)
  2710  003B  01E5               	clrf	(__pbssBANK0+1)& (0+127)
  2711  003C  01E6               	clrf	(__pbssBANK0+2)& (0+127)
  2712  003D  01E7               	clrf	(__pbssBANK0+3)& (0+127)
  2713  003E  01E8               	clrf	(__pbssBANK0+4)& (0+127)
  2714  003F  01E9               	clrf	(__pbssBANK0+5)& (0+127)
  2715                           
  2716                           ; Clear objects allocated to BANK1
  2717  0040  0021               	movlb	1	; select bank1
  2718  0041  01D8               	clrf	__pbssBANK1& (0+127)
  2719  0042  01D9               	clrf	(__pbssBANK1+1)& (0+127)
  2720  0043  01DA               	clrf	(__pbssBANK1+2)& (0+127)
  2721                           
  2722                           ; Clear objects allocated to BANK2
  2723  0044  3020               	movlw	low __pbssBANK2
  2724  0045  0084               	movwf	4
  2725  0046  3001               	movlw	high __pbssBANK2
  2726  0047  0085               	movwf	5
  2727  0048  303E               	movlw	62
  2728  0049  3188  2015  3180   	fcall	clear_ram0
  2729                           
  2730                           ; Clear objects allocated to BANK3
  2731  004C  30A0               	movlw	low __pbssBANK3
  2732  004D  0084               	movwf	4
  2733  004E  3001               	movlw	high __pbssBANK3
  2734  004F  0085               	movwf	5
  2735  0050  303D               	movlw	61
  2736  0051  3188  2015         	fcall	clear_ram0
  2737  0053                     end_of_initialization:	
  2738                           ;End of C runtime variable initialization code
  2739                           
  2740  0053                     __end_of__initialization:	
  2741  0053  0020               	movlb	0
  2742                           
  2743                           ;Initialize the stack pointer (FSR1)
  2744  0054  3062               	movlw	low ___sp
  2745  0055  0086               	movwf	6
  2746  0056  3021               	movlw	high ___sp
  2747  0057  0087               	movwf	7
  2748  0058  318E  2E26         	ljmp	_main	;jump to C main() function
  2749                           
  2750                           	psect	bssBANK0
  2751  0064                     __pbssBANK0:	
  2752  0064                     _status:	
  2753  0064                     	ds	5
  2754  0069                     _lastTXPacket:	
  2755  0069                     	ds	1
  2756                           
  2757                           	psect	bssBANK1
  2758  00D8                     __pbssBANK1:	
  2759  00D8                     _rcount:	
  2760  00D8                     	ds	2
  2761  00DA                     _waiting:	
  2762  00DA                     	ds	1
  2763                           
  2764                           	psect	dataBANK1
  2765  00DB                     __pdataBANK1:	
  2766  00DB                     _romData:	
  2767  00DB                     	ds	1
  2768                           
  2769                           	psect	bssBANK2
  2770  0120                     __pbssBANK2:	
  2771  0120                     _counter:	
  2772  0120                     	ds	4
  2773  0124                     _distance:	
  2774  0124                     	ds	2
  2775  0126                     _testCount:	
  2776  0126                     	ds	2
  2777  0128                     _rlimit:	
  2778  0128                     	ds	2
  2779  012A                     _rloop:	
  2780  012A                     	ds	2
  2781  012C                     _RXPacket:	
  2782  012C                     	ds	33
  2783  014D                     ftoa@buf:	
  2784  014D                     	ds	17
  2785                           
  2786                           	psect	bssBANK3
  2787  01A0                     __pbssBANK3:	
  2788  01A0                     _TXPacket:	
  2789  01A0                     	ds	33
  2790  01C1                     _romDataMap:	
  2791  01C1                     	ds	28
  2792                           
  2793                           	psect	clrtext
  2794  0815                     clear_ram0:	
  2795                           ;	Called with FSR0 containing the base address, and
  2796                           ;	WREG with the size to clear
  2797                           
  2798  0815  0064               	clrwdt	;clear the watchdog before getting into this loop
  2799  0816                     clrloop0:	
  2800  0816  0180               	clrf	0	;clear RAM location pointed to by FSR
  2801  0817  3101               	addfsr 0,1
  2802  0818  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2803  0819  2816               	goto	clrloop0	;have we reached the end yet?
  2804  081A  3400               	retlw	0	;all done for this memory range, return
  2805                           
  2806                           	psect	cstackBANK4
  2807  0220                     __pcstackBANK4:	
  2808  0220                     main@pipe:	
  2809                           
  2810                           ; 1 bytes @ 0x0
  2811  0220                     	ds	1
  2812  0221                     main@packet:	
  2813                           
  2814                           ; 33 bytes @ 0x1
  2815  0221                     	ds	33
  2816                           
  2817                           	psect	cstackBANK1
  2818  00A0                     __pcstackBANK1:	
  2819  00A0                     ?_strcat:	
  2820  00A0                     strcat@to:	
  2821                           ; 2 bytes @ 0x0
  2822                           
  2823                           
  2824                           ; 2 bytes @ 0x0
  2825  00A0                     	ds	2
  2826  00A2                     strcat@from:	
  2827                           
  2828                           ; 2 bytes @ 0x2
  2829  00A2                     	ds	2
  2830  00A4                     ?_sendMessage:	
  2831  00A4                     sendMessage@packet:	
  2832                           ; 1 bytes @ 0x4
  2833                           
  2834                           
  2835                           ; 2 bytes @ 0x4
  2836  00A4                     	ds	2
  2837  00A6                     sendMessage@topic:	
  2838                           
  2839                           ; 2 bytes @ 0x6
  2840  00A6                     	ds	2
  2841  00A8                     sendMessage@value:	
  2842                           
  2843                           ; 3 bytes @ 0x8
  2844  00A8                     	ds	3
  2845  00AB                     sendMessage@ftoaStatus:	
  2846                           
  2847                           ; 2 bytes @ 0xB
  2848  00AB                     	ds	2
  2849  00AD                     loop@vt:	
  2850                           
  2851                           ; 3 bytes @ 0xD
  2852  00AD                     	ds	3
  2853  00B0                     loop@ta:	
  2854                           
  2855                           ; 3 bytes @ 0x10
  2856  00B0                     	ds	3
  2857  00B3                     _loop$2253:	
  2858                           
  2859                           ; 3 bytes @ 0x13
  2860  00B3                     	ds	3
  2861  00B6                     loop@packet:	
  2862                           
  2863                           ; 33 bytes @ 0x16
  2864  00B6                     	ds	33
  2865  00D7                     ??_main:	
  2866                           
  2867                           ; 1 bytes @ 0x37
  2868  00D7                     	ds	1
  2869                           
  2870                           	psect	cstackCOMMON
  2871  0070                     __pcstackCOMMON:	
  2872  0070                     ?_isdigit:	
  2873  0070                     ?_hcsr04ISR:	
  2874                           ; 1 bit 
  2875                           
  2876  0070                     ??_hcsr04ISR:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0070                     ?_nrf24l01ISR:	
  2880                           ; 1 bytes @ 0x0
  2881                           
  2882  0070                     ??_nrf24l01ISR:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0070                     ??_strcpy:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0070                     ?_nrf24l01Init:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0070                     ?_nrf24l01SetTXPipe:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0070                     ?_nrf24l01SetRXPipe:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     ??_nrf24l01SetRXPipe:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ?_hcsr04Init:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ??_hcsr04Init:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ??_isdigit:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     ??___ftpack:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ?_nrf24l01InterfaceInit:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     ??_nrf24l01InterfaceInit:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0070                     ?_resetWDT:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0070                     ??_resetWDT:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ??_sleepMs:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     ?_ISR:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     ?_loop:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     ?_nrf24l01GetPipe:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     ?_main:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0070                     ?_nrf24l01InitRegisters:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0070                     ??___wmul:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0070                     ??___bmul:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0070                     ??___lldiv:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0070                     ??___awtoft:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0070                     ??___ftge:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0070                     ??___ftmul:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960  0070                     ??___fttol:	
  2961                           ; 1 bytes @ 0x0
  2962                           
  2963  0070                     ??___llmod:	
  2964                           ; 1 bytes @ 0x0
  2965                           
  2966  0070                     ??___lltoft:	
  2967                           ; 1 bytes @ 0x0
  2968                           
  2969  0070                     ??___lwmod:	
  2970                           ; 1 bytes @ 0x0
  2971                           
  2972  0070                     ??___lwtoft:	
  2973                           ; 1 bytes @ 0x0
  2974                           
  2975  0070                     ___bmul@product:	
  2976                           ; 1 bytes @ 0x0
  2977                           
  2978  0070                     ___awtoft@sign:	
  2979                           ; 1 bytes @ 0x0
  2980                           
  2981  0070                     ___llmod@counter:	
  2982                           ; 1 bytes @ 0x0
  2983                           
  2984  0070                     ___lltoft@exp:	
  2985                           ; 1 bytes @ 0x0
  2986                           
  2987  0070                     ___lwmod@counter:	
  2988                           ; 1 bytes @ 0x0
  2989                           
  2990  0070                     _isdigit$1998:	
  2991                           ; 1 bytes @ 0x0
  2992                           
  2993  0070                     ___wmul@product:	
  2994                           ; 1 bytes @ 0x0
  2995                           
  2996  0070                     strcpy@cp:	
  2997                           ; 2 bytes @ 0x0
  2998                           
  2999                           
  3000                           ; 2 bytes @ 0x0
  3001  0070                     	ds	1
  3002  0071                     ??_nrf24l01GetPipe:	
  3003  0071                     ??___ftadd:	
  3004                           ; 1 bytes @ 0x1
  3005                           
  3006  0071                     sleepMs@wdtps:	
  3007                           ; 1 bytes @ 0x1
  3008                           
  3009  0071                     nrf24l01SetRXPipe@pipe:	
  3010                           ; 1 bytes @ 0x1
  3011                           
  3012  0071                     ___bmul@multiplier:	
  3013                           ; 1 bytes @ 0x1
  3014                           
  3015  0071                     isdigit@c:	
  3016                           ; 1 bytes @ 0x1
  3017                           
  3018                           
  3019                           ; 1 bytes @ 0x1
  3020  0071                     	ds	1
  3021  0072                     ?_nrf24l01SendPacket:	
  3022  0072                     ??_nrf24l01SetTXPipe:	
  3023                           ; 1 bytes @ 0x2
  3024                           
  3025  0072                     ??___ftdiv:	
  3026                           ; 1 bytes @ 0x2
  3027                           
  3028  0072                     ??___ftsub:	
  3029                           ; 1 bytes @ 0x2
  3030                           
  3031  0072                     nrf24l01SetRXPipe@enRXAddr:	
  3032                           ; 1 bytes @ 0x2
  3033                           
  3034  0072                     nrf24l01SendPacket@txPacket:	
  3035                           ; 1 bytes @ 0x2
  3036                           
  3037                           
  3038                           ; 2 bytes @ 0x2
  3039  0072                     	ds	1
  3040  0073                     ??_hcsr04GetAerage:	
  3041  0073                     ??_getADCValue:	
  3042                           ; 1 bytes @ 0x3
  3043                           
  3044  0073                     nrf24l01SetTXPipe@pipe:	
  3045                           ; 1 bytes @ 0x3
  3046                           
  3047                           
  3048                           ; 1 bytes @ 0x3
  3049  0073                     	ds	1
  3050  0074                     ??_strcat:	
  3051  0074                     ??_ftoa:	
  3052                           ; 1 bytes @ 0x4
  3053                           
  3054  0074                     ??_nrf24l01SendPacket:	
  3055                           ; 1 bytes @ 0x4
  3056                           
  3057  0074                     ??_sendMessage:	
  3058                           ; 1 bytes @ 0x4
  3059                           
  3060  0074                     ??_loop:	
  3061                           ; 1 bytes @ 0x4
  3062                           
  3063  0074                     ??___ftneg:	
  3064                           ; 1 bytes @ 0x4
  3065                           
  3066                           
  3067                           	psect	cstackBANK0
  3068  0020                     __pcstackBANK0:	
  3069                           ; 1 bytes @ 0x4
  3070                           
  3071  0020                     ??_ISR:	
  3072                           
  3073                           ; 1 bytes @ 0x0
  3074  0020                     	ds	6
  3075  0026                     ?___ftge:	
  3076  0026                     ?_sleepMs:	
  3077                           ; 1 bit 
  3078                           
  3079  0026                     ?___bmul:	
  3080                           ; 1 bytes @ 0x6
  3081                           
  3082  0026                     ?_strcpy:	
  3083                           ; 1 bytes @ 0x6
  3084                           
  3085  0026                     ?___wmul:	
  3086                           ; 2 bytes @ 0x6
  3087                           
  3088  0026                     ?___lwmod:	
  3089                           ; 2 bytes @ 0x6
  3090                           
  3091  0026                     ?___ftpack:	
  3092                           ; 2 bytes @ 0x6
  3093                           
  3094  0026                     ?___lldiv:	
  3095                           ; 3 bytes @ 0x6
  3096                           
  3097  0026                     ___bmul@multiplicand:	
  3098                           ; 4 bytes @ 0x6
  3099                           
  3100  0026                     sleepMs@milliseconds:	
  3101                           ; 1 bytes @ 0x6
  3102                           
  3103  0026                     ___wmul@multiplier:	
  3104                           ; 2 bytes @ 0x6
  3105                           
  3106  0026                     ___lwmod@divisor:	
  3107                           ; 2 bytes @ 0x6
  3108                           
  3109  0026                     strcpy@to:	
  3110                           ; 2 bytes @ 0x6
  3111                           
  3112  0026                     ___ftpack@arg:	
  3113                           ; 2 bytes @ 0x6
  3114                           
  3115  0026                     ___ftge@ff1:	
  3116                           ; 3 bytes @ 0x6
  3117                           
  3118  0026                     ___lldiv@divisor:	
  3119                           ; 3 bytes @ 0x6
  3120                           
  3121                           
  3122                           ; 4 bytes @ 0x6
  3123  0026                     	ds	1
  3124  0027                     ??_nrf24l01InitRegisters:	
  3125                           
  3126                           ; 1 bytes @ 0x7
  3127  0027                     	ds	1
  3128  0028                     nrf24l01InitRegisters@channel:	
  3129  0028                     ___wmul@multiplicand:	
  3130                           ; 1 bytes @ 0x8
  3131                           
  3132  0028                     ___lwmod@dividend:	
  3133                           ; 2 bytes @ 0x8
  3134                           
  3135  0028                     strcpy@from:	
  3136                           ; 2 bytes @ 0x8
  3137                           
  3138                           
  3139                           ; 2 bytes @ 0x8
  3140  0028                     	ds	1
  3141  0029                     nrf24l01InitRegisters@setupAW:	
  3142  0029                     ___ftpack@exp:	
  3143                           ; 1 bytes @ 0x9
  3144                           
  3145  0029                     ___ftge@ff2:	
  3146                           ; 1 bytes @ 0x9
  3147                           
  3148                           
  3149                           ; 3 bytes @ 0x9
  3150  0029                     	ds	1
  3151  002A                     nrf24l01GetPipe@pipe:	
  3152  002A                     nrf24l01InitRegisters@feature:	
  3153                           ; 1 bytes @ 0xA
  3154                           
  3155  002A                     ___ftpack@sign:	
  3156                           ; 1 bytes @ 0xA
  3157                           
  3158  002A                     ___lldiv@dividend:	
  3159                           ; 1 bytes @ 0xA
  3160                           
  3161                           
  3162                           ; 4 bytes @ 0xA
  3163  002A                     	ds	1
  3164  002B                     ?___awtoft:	
  3165  002B                     ?___ftmul:	
  3166                           ; 3 bytes @ 0xB
  3167                           
  3168  002B                     ?___lltoft:	
  3169                           ; 3 bytes @ 0xB
  3170                           
  3171  002B                     ?___lwtoft:	
  3172                           ; 3 bytes @ 0xB
  3173                           
  3174  002B                     nrf24l01GetPipe@name:	
  3175                           ; 3 bytes @ 0xB
  3176                           
  3177  002B                     nrf24l01InitRegisters@rfSetup:	
  3178                           ; 1 bytes @ 0xB
  3179                           
  3180  002B                     ___awtoft@c:	
  3181                           ; 1 bytes @ 0xB
  3182                           
  3183  002B                     ___lwtoft@c:	
  3184                           ; 2 bytes @ 0xB
  3185                           
  3186  002B                     ___ftmul@f1:	
  3187                           ; 2 bytes @ 0xB
  3188                           
  3189  002B                     ___lltoft@c:	
  3190                           ; 3 bytes @ 0xB
  3191                           
  3192                           
  3193                           ; 4 bytes @ 0xB
  3194  002B                     	ds	1
  3195  002C                     nrf24l01GetPipe@i:	
  3196  002C                     nrf24l01InitRegisters@enAA:	
  3197                           ; 1 bytes @ 0xC
  3198                           
  3199                           
  3200                           ; 1 bytes @ 0xC
  3201  002C                     	ds	1
  3202  002D                     nrf24l01InitRegisters@DynPD:	
  3203                           
  3204                           ; 1 bytes @ 0xD
  3205  002D                     	ds	1
  3206  002E                     ?___ftadd:	
  3207  002E                     nrf24l01InitRegisters@i:	
  3208                           ; 3 bytes @ 0xE
  3209                           
  3210  002E                     ___ftadd@f1:	
  3211                           ; 2 bytes @ 0xE
  3212                           
  3213  002E                     ___ftmul@f2:	
  3214                           ; 3 bytes @ 0xE
  3215                           
  3216  002E                     ___lldiv@quotient:	
  3217                           ; 3 bytes @ 0xE
  3218                           
  3219                           
  3220                           ; 4 bytes @ 0xE
  3221  002E                     	ds	2
  3222  0030                     ??_nrf24l01Init:	
  3223                           
  3224                           ; 1 bytes @ 0x10
  3225  0030                     	ds	1
  3226  0031                     ___ftmul@exp:	
  3227  0031                     ___ftadd@f2:	
  3228                           ; 1 bytes @ 0x11
  3229                           
  3230                           
  3231                           ; 3 bytes @ 0x11
  3232  0031                     	ds	1
  3233  0032                     ___lldiv@counter:	
  3234  0032                     ___ftmul@f3_as_product:	
  3235                           ; 1 bytes @ 0x12
  3236                           
  3237                           
  3238                           ; 3 bytes @ 0x12
  3239  0032                     	ds	1
  3240  0033                     ?___llmod:	
  3241  0033                     ___llmod@divisor:	
  3242                           ; 4 bytes @ 0x13
  3243                           
  3244                           
  3245                           ; 4 bytes @ 0x13
  3246  0033                     	ds	1
  3247  0034                     ___ftadd@sign:	
  3248                           
  3249                           ; 1 bytes @ 0x14
  3250  0034                     	ds	1
  3251  0035                     ___ftadd@exp2:	
  3252  0035                     ___ftmul@cntr:	
  3253                           ; 1 bytes @ 0x15
  3254                           
  3255                           
  3256                           ; 1 bytes @ 0x15
  3257  0035                     	ds	1
  3258  0036                     ___ftadd@exp1:	
  3259  0036                     ___ftmul@sign:	
  3260                           ; 1 bytes @ 0x16
  3261                           
  3262                           
  3263                           ; 1 bytes @ 0x16
  3264  0036                     	ds	1
  3265  0037                     ?___ftdiv:	
  3266  0037                     ?___ftsub:	
  3267                           ; 3 bytes @ 0x17
  3268                           
  3269  0037                     ?___fttol:	
  3270                           ; 3 bytes @ 0x17
  3271                           
  3272  0037                     ___ftdiv@f2:	
  3273                           ; 4 bytes @ 0x17
  3274                           
  3275  0037                     ___ftsub@f2:	
  3276                           ; 3 bytes @ 0x17
  3277                           
  3278  0037                     ___fttol@f1:	
  3279                           ; 3 bytes @ 0x17
  3280                           
  3281  0037                     ___llmod@dividend:	
  3282                           ; 3 bytes @ 0x17
  3283                           
  3284                           
  3285                           ; 4 bytes @ 0x17
  3286  0037                     	ds	3
  3287  003A                     ___ftdiv@f1:	
  3288  003A                     ___ftsub@f1:	
  3289                           ; 3 bytes @ 0x1A
  3290                           
  3291                           
  3292                           ; 3 bytes @ 0x1A
  3293  003A                     	ds	1
  3294  003B                     ?_sprintf:	
  3295  003B                     ___fttol@sign1:	
  3296                           ; 2 bytes @ 0x1B
  3297                           
  3298  003B                     sprintf@f:	
  3299                           ; 1 bytes @ 0x1B
  3300                           
  3301                           
  3302                           ; 2 bytes @ 0x1B
  3303  003B                     	ds	1
  3304  003C                     ___fttol@lval:	
  3305                           
  3306                           ; 4 bytes @ 0x1C
  3307  003C                     	ds	1
  3308  003D                     ___ftdiv@cntr:	
  3309                           
  3310                           ; 1 bytes @ 0x1D
  3311  003D                     	ds	1
  3312  003E                     ___ftdiv@f3:	
  3313                           
  3314                           ; 3 bytes @ 0x1E
  3315  003E                     	ds	2
  3316  0040                     ___fttol@exp1:	
  3317                           
  3318                           ; 1 bytes @ 0x20
  3319  0040                     	ds	1
  3320  0041                     ___ftdiv@exp:	
  3321                           
  3322                           ; 1 bytes @ 0x21
  3323  0041                     	ds	1
  3324  0042                     ___ftdiv@sign:	
  3325                           
  3326                           ; 1 bytes @ 0x22
  3327  0042                     	ds	1
  3328  0043                     ?_hcsr04GetAerage:	
  3329  0043                     ?_getADCValue:	
  3330                           ; 3 bytes @ 0x23
  3331                           
  3332                           
  3333                           ; 3 bytes @ 0x23
  3334  0043                     	ds	2
  3335  0045                     ??_sprintf:	
  3336                           
  3337                           ; 1 bytes @ 0x25
  3338  0045                     	ds	1
  3339  0046                     getADCValue@channel:	
  3340  0046                     hcsr04GetAerage@average:	
  3341                           ; 1 bytes @ 0x26
  3342                           
  3343                           
  3344                           ; 3 bytes @ 0x26
  3345  0046                     	ds	1
  3346  0047                     getADCValue@adcLoop:	
  3347                           
  3348                           ; 2 bytes @ 0x27
  3349  0047                     	ds	2
  3350  0049                     sprintf@flag:	
  3351  0049                     getADCValue@adcSum:	
  3352                           ; 1 bytes @ 0x29
  3353                           
  3354                           
  3355                           ; 3 bytes @ 0x29
  3356  0049                     	ds	1
  3357  004A                     sprintf@ap:	
  3358                           
  3359                           ; 1 bytes @ 0x2A
  3360  004A                     	ds	1
  3361  004B                     sprintf@val:	
  3362                           
  3363                           ; 4 bytes @ 0x2B
  3364  004B                     	ds	1
  3365  004C                     ?___ftneg:	
  3366  004C                     ___ftneg@f1:	
  3367                           ; 3 bytes @ 0x2C
  3368                           
  3369                           
  3370                           ; 3 bytes @ 0x2C
  3371  004C                     	ds	3
  3372  004F                     sprintf@sp:	
  3373                           
  3374                           ; 1 bytes @ 0x2F
  3375  004F                     	ds	1
  3376  0050                     sprintf@width:	
  3377                           
  3378                           ; 2 bytes @ 0x30
  3379  0050                     	ds	2
  3380  0052                     sprintf@prec:	
  3381                           
  3382                           ; 2 bytes @ 0x32
  3383  0052                     	ds	2
  3384  0054                     sprintf@c:	
  3385                           
  3386                           ; 1 bytes @ 0x34
  3387  0054                     	ds	1
  3388  0055                     ?_ftoa:	
  3389  0055                     ftoa@f:	
  3390                           ; 1 bytes @ 0x35
  3391                           
  3392                           
  3393                           ; 3 bytes @ 0x35
  3394  0055                     	ds	3
  3395  0058                     ftoa@status:	
  3396                           
  3397                           ; 1 bytes @ 0x38
  3398  0058                     	ds	1
  3399  0059                     ftoa@rem:	
  3400                           
  3401                           ; 4 bytes @ 0x39
  3402  0059                     	ds	4
  3403  005D                     ftoa@l:	
  3404                           
  3405                           ; 4 bytes @ 0x3D
  3406  005D                     	ds	4
  3407  0061                     ftoa@cp:	
  3408                           
  3409                           ; 1 bytes @ 0x41
  3410  0061                     	ds	1
  3411  0062                     strcat@cp:	
  3412                           
  3413                           ; 2 bytes @ 0x42
  3414  0062                     	ds	2
  3415                           
  3416                           	psect	maintext
  3417  0E26                     __pmaintext:	
  3418 ;;
  3419 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3420 ;;
  3421 ;; *************** function _main *****************
  3422 ;; Defined at:
  3423 ;;		line 169 in file "main.c"
  3424 ;; Parameters:    Size  Location     Type
  3425 ;;		None
  3426 ;; Auto vars:     Size  Location     Type
  3427 ;;  packet         33    1[BANK4 ] struct .
  3428 ;;  pipe            1    0[BANK4 ] unsigned char 
  3429 ;; Return value:  Size  Location     Type
  3430 ;;                  1    wreg      void 
  3431 ;; Registers used:
  3432 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  3433 ;; Tracked objects:
  3434 ;;		On entry : B1F/0
  3435 ;;		On exit  : 0/0
  3436 ;;		Unchanged: 0/0
  3437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3439 ;;      Locals:         0       0       0       0       0      34       0       0       0       0       0       0       
      +0       0
  3440 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3441 ;;      Totals:         0       0       1       0       0      34       0       0       0       0       0       0       
      +0       0
  3442 ;;Total ram usage:       35 bytes
  3443 ;; Hardware stack levels required when called:   15
  3444 ;; This function calls:
  3445 ;;		_hcsr04Init
  3446 ;;		_loop
  3447 ;;		_nrf24l01GetPipe
  3448 ;;		_nrf24l01Init
  3449 ;;		_nrf24l01SetRXPipe
  3450 ;;		_nrf24l01SetTXPipe
  3451 ;;		_sendMessage
  3452 ;;		_strcpy
  3453 ;; This function is called by:
  3454 ;;		Startup code after reset
  3455 ;; This function uses a non-reentrant model
  3456 ;;
  3457                           
  3458                           
  3459                           ;psect for function _main
  3460  0E26                     _main:	
  3461                           
  3462                           ;main.c: 173: ANSELA = 0x00;
  3463                           
  3464                           ;incstack = 0
  3465                           ; Regs used in _main: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  3466  0E26  0023               	movlb	3	; select bank3
  3467  0E27  018C               	clrf	12	;volatile
  3468                           
  3469                           ;main.c: 174: ANSELC = 0x00;
  3470  0E28  018E               	clrf	14	;volatile
  3471                           
  3472                           ;main.c: 176: ODCONA = 0x00;
  3473  0E29  0025               	movlb	5	; select bank5
  3474  0E2A  018C               	clrf	12	;volatile
  3475                           
  3476                           ;main.c: 177: ODCONC = 0x00;
  3477  0E2B  018E               	clrf	14	;volatile
  3478                           
  3479                           ;main.c: 182: INLVLA = 0x00;
  3480  0E2C  0027               	movlb	7	; select bank7
  3481  0E2D  018C               	clrf	12	;volatile
  3482                           
  3483                           ;main.c: 183: INLVLC = 0x00;
  3484  0E2E  018E               	clrf	14	;volatile
  3485                           
  3486                           ;main.c: 185: WPUA = 0x00;
  3487  0E2F  0024               	movlb	4	; select bank4
  3488  0E30  018C               	clrf	12	;volatile
  3489                           
  3490                           ;main.c: 186: WPUC = 0x00;
  3491  0E31  018E               	clrf	14	;volatile
  3492                           
  3493                           ;main.c: 188: TRISCbits.TRISC5 = 0;
  3494  0E32  0021               	movlb	1	; select bank1
  3495  0E33  128E               	bcf	14,5	;volatile
  3496                           
  3497                           ;main.c: 189: TRISCbits.TRISC4 = 0;
  3498  0E34  120E               	bcf	14,4	;volatile
  3499                           
  3500                           ;main.c: 191: PORTCbits.RC4 = 0;
  3501  0E35  0020               	movlb	0	; select bank0
  3502  0E36  120E               	bcf	14,4	;volatile
  3503                           
  3504                           ;main.c: 198: INTCONbits.PEIE = 0;
  3505  0E37  130B               	bcf	11,6	;volatile
  3506                           
  3507                           ;main.c: 199: INTCONbits.GIE = 0;
  3508  0E38  138B               	bcf	11,7	;volatile
  3509                           
  3510                           ;main.c: 201: OSCCON1bits.NOSC = 0b000;
  3511  0E39  308F               	movlw	-113
  3512  0E3A  0032               	movlb	18	; select bank18
  3513  0E3B  0599               	andwf	25,f	;volatile
  3514                           
  3515                           ;main.c: 202: OSCCON1bits.NDIV = 0b000;
  3516  0E3C  30F0               	movlw	-16
  3517  0E3D  0599               	andwf	25,f	;volatile
  3518                           
  3519                           ;main.c: 204: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3520  0E3E  300B               	movlw	11
  3521  0E3F  0021               	movlb	1	; select bank1
  3522  0E40  00D7               	movwf	??_main^(0+128)
  3523  0E41  3062               	movlw	98
  3524  0E42                     u5307:	
  3525  0E42  0B89               	decfsz	9,f
  3526  0E43  2E42               	goto	u5307
  3527  0E44  0BD7               	decfsz	??_main^(0+128),f
  3528  0E45  2E42               	goto	u5307
  3529  0E46  0000               	nop
  3530                           
  3531                           ;main.c: 208: strcpy(romData->name, "UWT");
  3532  0E47  0021               	movlb	1	; select bank1
  3533  0E48  085B               	movf	_romData^(0+128),w
  3534  0E49  3E01               	addlw	1
  3535  0E4A  0020               	movlb	0	; select bank0
  3536  0E4B  00A6               	movwf	strcpy@to
  3537  0E4C  3001               	movlw	1
  3538  0E4D  00A7               	movwf	strcpy@to+1
  3539  0E4E  305C               	movlw	low (STR_7| (0+32768))
  3540  0E4F  00A8               	movwf	strcpy@from
  3541  0E50  3090               	movlw	high (STR_7| (0+32768))
  3542  0E51  00A9               	movwf	strcpy@from+1
  3543  0E52  3188  20C5  318E   	fcall	_strcpy
  3544                           
  3545                           ;main.c: 210: nrf24l01Init();
  3546  0E55  3189  215A  318E   	fcall	_nrf24l01Init
  3547                           
  3548                           ;main.c: 212: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3549  0E58  0021               	movlb	1	; select bank1
  3550  0E59  085B               	movf	_romData^(0+128),w
  3551  0E5A  3E01               	addlw	1
  3552  0E5B  318A  22D5  318E   	fcall	_nrf24l01GetPipe
  3553  0E5E  00FF               	movwf	127
  3554  0E5F  087F               	movf	127,w
  3555  0E60  0024               	movlb	4	; select bank4
  3556  0E61  00A0               	movwf	main@pipe^(0+512)
  3557                           
  3558                           ;main.c: 213: nrf24l01SetTXPipe(pipe);
  3559  0E62  0820               	movf	main@pipe^(0+512),w
  3560  0E63  318B  2345  318E   	fcall	_nrf24l01SetTXPipe
  3561                           
  3562                           ;main.c: 214: nrf24l01SetRXPipe(pipe);
  3563  0E66  0024               	movlb	4	; select bank4
  3564  0E67  0820               	movf	main@pipe^(0+512),w
  3565  0E68  3189  211E  318E   	fcall	_nrf24l01SetRXPipe
  3566                           
  3567                           ;main.c: 218: ADCON0bits.ADON = 0;
  3568  0E6B  0021               	movlb	1	; select bank1
  3569  0E6C  101D               	bcf	29,0	;volatile
  3570                           
  3571                           ;main.c: 221: PORTAbits.RA4 = 0;
  3572  0E6D  0020               	movlb	0	; select bank0
  3573  0E6E  120C               	bcf	12,4	;volatile
  3574                           
  3575                           ;main.c: 222: TRISAbits.TRISA4 = 1;
  3576  0E6F  0021               	movlb	1	; select bank1
  3577  0E70  160C               	bsf	12,4	;volatile
  3578                           
  3579                           ;main.c: 223: WPUAbits.WPUA4 = 0;
  3580  0E71  0024               	movlb	4	; select bank4
  3581  0E72  120C               	bcf	12,4	;volatile
  3582                           
  3583                           ;main.c: 224: ODCONAbits.ODCA4 = 1;
  3584  0E73  0025               	movlb	5	; select bank5
  3585  0E74  160C               	bsf	12,4	;volatile
  3586                           
  3587                           ;main.c: 225: ANSELAbits.ANSA4 = 1;
  3588  0E75  0023               	movlb	3	; select bank3
  3589  0E76  160C               	bsf	12,4	;volatile
  3590                           
  3591                           ;main.c: 228: ANSELCbits.ANSC3 = 1;
  3592  0E77  158E               	bsf	14,3	;volatile
  3593                           
  3594                           ;main.c: 229: TRISCbits.TRISC3 = 1;
  3595  0E78  0021               	movlb	1	; select bank1
  3596  0E79  158E               	bsf	14,3	;volatile
  3597                           
  3598                           ;main.c: 232: FVRCONbits.TSEN = 1;
  3599  0E7A  0022               	movlb	2	; select bank2
  3600  0E7B  1697               	bsf	23,5	;volatile
  3601                           
  3602                           ;main.c: 233: FVRCONbits.TSRNG = 1;
  3603  0E7C  1617               	bsf	23,4	;volatile
  3604                           
  3605                           ;main.c: 236: FVRCONbits.FVREN = 0;
  3606  0E7D  1397               	bcf	23,7	;volatile
  3607                           
  3608                           ;main.c: 237: FVRCONbits.ADFVR = 0b10;
  3609  0E7E  0817               	movf	23,w	;volatile
  3610  0E7F  39FC               	andlw	-4
  3611  0E80  3802               	iorlw	2
  3612  0E81  0097               	movwf	23	;volatile
  3613                           
  3614                           ;main.c: 239: ADCON1bits.ADCS = 0b111;
  3615  0E82  3070               	movlw	112
  3616  0E83  0021               	movlb	1	; select bank1
  3617  0E84  049E               	iorwf	30,f	;volatile
  3618                           
  3619                           ;main.c: 240: ADCON1bits.ADFM = 1;
  3620  0E85  179E               	bsf	30,7	;volatile
  3621                           
  3622                           ;main.c: 241: ADCON1bits.ADPREF = 0b11;
  3623  0E86  3003               	movlw	3
  3624  0E87  049E               	iorwf	30,f	;volatile
  3625                           
  3626                           ;main.c: 242: ADCON1bits.ADNREF = 0b00;
  3627  0E88  111E               	bcf	30,2	;volatile
  3628                           
  3629                           ;main.c: 243: PIE1bits.ADIE = 1;
  3630  0E89  1711               	bsf	17,6	;volatile
  3631                           
  3632                           ;main.c: 246: ADCON0bits.CHS = 3;
  3633  0E8A  081D               	movf	29,w	;volatile
  3634  0E8B  3903               	andlw	-253
  3635  0E8C  380C               	iorlw	12
  3636  0E8D  009D               	movwf	29	;volatile
  3637                           
  3638                           ;main.c: 251: TRISAbits.TRISA2 = 1;
  3639  0E8E  150C               	bsf	12,2	;volatile
  3640                           
  3641                           ;main.c: 252: PIE0bits.INTE = 1;
  3642  0E8F  1410               	bsf	16,0	;volatile
  3643                           
  3644                           ;main.c: 253: INTCONbits.INTEDG = 0;
  3645  0E90  100B               	bcf	11,0	;volatile
  3646                           
  3647                           ;main.c: 256: TRISAbits.TRISA5 = 0;
  3648  0E91  128C               	bcf	12,5	;volatile
  3649                           
  3650                           ;main.c: 257: PORTAbits.RA5 = 0;
  3651  0E92  0020               	movlb	0	; select bank0
  3652  0E93  128C               	bcf	12,5	;volatile
  3653                           
  3654                           ;main.c: 259: hcsr04Init();
  3655  0E94  3188  2080  318E   	fcall	_hcsr04Init
  3656                           
  3657                           ;main.c: 262: INTCONbits.PEIE = 1;
  3658  0E97  170B               	bsf	11,6	;volatile
  3659                           
  3660                           ;main.c: 263: INTCONbits.GIE = 1;
  3661  0E98  178B               	bsf	11,7	;volatile
  3662                           
  3663                           ;main.c: 265: nrf24l01Packet_t packet;;main.c: 267: sendMessage(&packet, "BOOT0", 123);
  3664  0E99  3021               	movlw	low main@packet
  3665  0E9A  0021               	movlb	1	; select bank1
  3666  0E9B  00A4               	movwf	sendMessage@packet^(0+128)
  3667  0E9C  3002               	movlw	high main@packet
  3668  0E9D  00A5               	movwf	(sendMessage@packet+1)^(0+128)
  3669  0E9E  303B               	movlw	low (STR_8| (0+32768))
  3670  0E9F  00A6               	movwf	sendMessage@topic^(0+128)
  3671  0EA0  3090               	movlw	high (STR_8| (0+32768))
  3672  0EA1  00A7               	movwf	(sendMessage@topic^(0+128)+1)
  3673  0EA2  3000               	movlw	0
  3674  0EA3  00A8               	movwf	sendMessage@value^(0+128)
  3675  0EA4  30F6               	movlw	246
  3676  0EA5  00A9               	movwf	(sendMessage@value+1)^(0+128)
  3677  0EA6  3042               	movlw	66
  3678  0EA7  00AA               	movwf	(sendMessage@value+2)^(0+128)
  3679  0EA8  318D  2599  318E   	fcall	_sendMessage
  3680                           
  3681                           ;main.c: 268: sendMessage(&packet, "BOOT1", 456);
  3682  0EAB  3021               	movlw	low main@packet
  3683  0EAC  0021               	movlb	1	; select bank1
  3684  0EAD  00A4               	movwf	sendMessage@packet^(0+128)
  3685  0EAE  3002               	movlw	high main@packet
  3686  0EAF  00A5               	movwf	(sendMessage@packet+1)^(0+128)
  3687  0EB0  3041               	movlw	low (STR_9| (0+32768))
  3688  0EB1  00A6               	movwf	sendMessage@topic^(0+128)
  3689  0EB2  3090               	movlw	high (STR_9| (0+32768))
  3690  0EB3  00A7               	movwf	(sendMessage@topic^(0+128)+1)
  3691  0EB4  3000               	movlw	0
  3692  0EB5  00A8               	movwf	sendMessage@value^(0+128)
  3693  0EB6  30E4               	movlw	228
  3694  0EB7  00A9               	movwf	(sendMessage@value+1)^(0+128)
  3695  0EB8  3043               	movlw	67
  3696  0EB9  00AA               	movwf	(sendMessage@value+2)^(0+128)
  3697  0EBA  318D  2599  318E   	fcall	_sendMessage
  3698  0EBD                     l5021:	
  3699                           ;main.c: 275: while(1){
  3700                           
  3701                           
  3702                           ;main.c: 276: loop();
  3703  0EBD  3184  2424  318E   	fcall	_loop
  3704  0EC0  2EBD               	goto	l5021
  3705  0EC1                     __end_of_main:	
  3706                           ;main.c: 277: };main.c: 279: return;
  3707                           
  3708                           
  3709                           	psect	text1
  3710  095A                     __ptext1:	
  3711 ;; *************** function _nrf24l01Init *****************
  3712 ;; Defined at:
  3713 ;;		line 463 in file "nrf24l01.c"
  3714 ;; Parameters:    Size  Location     Type
  3715 ;;		None
  3716 ;; Auto vars:     Size  Location     Type
  3717 ;;		None
  3718 ;; Return value:  Size  Location     Type
  3719 ;;                  1    wreg      void 
  3720 ;; Registers used:
  3721 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  3722 ;; Tracked objects:
  3723 ;;		On entry : 0/0
  3724 ;;		On exit  : 0/0
  3725 ;;		Unchanged: 0/0
  3726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3729 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3730 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3731 ;;Total ram usage:        1 bytes
  3732 ;; Hardware stack levels used:    1
  3733 ;; Hardware stack levels required when called:   11
  3734 ;; This function calls:
  3735 ;;		_nrf24l01InitRegisters
  3736 ;;		_nrf24l01InterfaceInit
  3737 ;; This function is called by:
  3738 ;;		_main
  3739 ;; This function uses a non-reentrant model
  3740 ;;
  3741                           
  3742                           
  3743                           ;psect for function _nrf24l01Init
  3744  095A                     _nrf24l01Init:	
  3745                           
  3746                           ;nrf24l01.c: 466: nrf24l01InterfaceInit();
  3747                           
  3748                           ;incstack = 0
  3749                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+11+pclath+
      +                          cstack]
  3750  095A  3189  213C  3189   	fcall	_nrf24l01InterfaceInit
  3751                           
  3752                           ;nrf24l01.c: 471: PORTAbits.RA0 = 0;
  3753  095D  0020               	movlb	0	; select bank0
  3754  095E  100C               	bcf	12,0	;volatile
  3755                           
  3756                           ;nrf24l01.c: 473: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3757  095F  300B               	movlw	11
  3758  0960  0020               	movlb	0	; select bank0
  3759  0961  00B0               	movwf	??_nrf24l01Init
  3760  0962  3062               	movlw	98
  3761  0963                     u5317:	
  3762  0963  0B89               	decfsz	9,f
  3763  0964  2963               	goto	u5317
  3764  0965  0BB0               	decfsz	??_nrf24l01Init,f
  3765  0966  2963               	goto	u5317
  3766  0967  0000               	nop
  3767                           
  3768                           ;nrf24l01.c: 475: nrf24l01InitRegisters();
  3769  0968  3182  2227  3189   	fcall	_nrf24l01InitRegisters
  3770                           
  3771                           ;nrf24l01.c: 477: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3772  096B  300B               	movlw	11
  3773  096C  0020               	movlb	0	; select bank0
  3774  096D  00B0               	movwf	??_nrf24l01Init
  3775  096E  3062               	movlw	98
  3776  096F                     u5327:	
  3777  096F  0B89               	decfsz	9,f
  3778  0970  296F               	goto	u5327
  3779  0971  0BB0               	decfsz	??_nrf24l01Init,f
  3780  0972  296F               	goto	u5327
  3781  0973  0000               	nop
  3782                           
  3783                           ;nrf24l01.c: 479: PORTAbits.RA0 = 1;
  3784  0974  0020               	movlb	0	; select bank0
  3785  0975  140C               	bsf	12,0	;volatile
  3786                           
  3787                           ;nrf24l01.c: 481: status.TX = 0;
  3788  0976  01E4               	clrf	_status	;volatile
  3789                           
  3790                           ;nrf24l01.c: 482: status.RX = 0;
  3791  0977  01E5               	clrf	_status+1	;volatile
  3792  0978  0008               	return
  3793  0979                     __end_of_nrf24l01Init:	
  3794                           
  3795                           	psect	text2
  3796  093C                     __ptext2:	
  3797 ;; *************** function _nrf24l01InterfaceInit *****************
  3798 ;; Defined at:
  3799 ;;		line 8 in file "interface.c"
  3800 ;; Parameters:    Size  Location     Type
  3801 ;;		None
  3802 ;; Auto vars:     Size  Location     Type
  3803 ;;		None
  3804 ;; Return value:  Size  Location     Type
  3805 ;;                  1    wreg      void 
  3806 ;; Registers used:
  3807 ;;		wreg, status,2, status,0
  3808 ;; Tracked objects:
  3809 ;;		On entry : 0/0
  3810 ;;		On exit  : 0/0
  3811 ;;		Unchanged: 0/0
  3812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3817 ;;Total ram usage:        0 bytes
  3818 ;; Hardware stack levels used:    1
  3819 ;; Hardware stack levels required when called:    7
  3820 ;; This function calls:
  3821 ;;		Nothing
  3822 ;; This function is called by:
  3823 ;;		_nrf24l01Init
  3824 ;; This function uses a non-reentrant model
  3825 ;;
  3826                           
  3827                           
  3828                           ;psect for function _nrf24l01InterfaceInit
  3829  093C                     _nrf24l01InterfaceInit:	
  3830                           
  3831                           ;interface.c: 10: TRISAbits.TRISA0 = 0;
  3832                           
  3833                           ;incstack = 0
  3834                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3835  093C  0021               	movlb	1	; select bank1
  3836  093D  100C               	bcf	12,0	;volatile
  3837                           
  3838                           ;interface.c: 11: TRISAbits.TRISA1 = 0;
  3839  093E  108C               	bcf	12,1	;volatile
  3840                           
  3841                           ;interface.c: 13: TRISCbits.TRISC1 = 1;
  3842  093F  148E               	bsf	14,1	;volatile
  3843                           
  3844                           ;interface.c: 14: TRISCbits.TRISC2 = 0;
  3845  0940  110E               	bcf	14,2	;volatile
  3846                           
  3847                           ;interface.c: 15: TRISCbits.TRISC0 = 0;
  3848  0941  100E               	bcf	14,0	;volatile
  3849                           
  3850                           ;interface.c: 17: SSP1CON1bits.SSPEN = 0;
  3851  0942  0024               	movlb	4	; select bank4
  3852  0943  1295               	bcf	21,5	;volatile
  3853                           
  3854                           ;interface.c: 19: RC1PPSbits.RC1PPS = 0b10001;
  3855  0944  003D               	movlb	29	; select bank29
  3856  0945  0821               	movf	33,w	;volatile
  3857  0946  39E0               	andlw	-32
  3858  0947  3811               	iorlw	17
  3859  0948  00A1               	movwf	33	;volatile
  3860                           
  3861                           ;interface.c: 20: RC2PPSbits.RC2PPS = 0b11001;
  3862  0949  0822               	movf	34,w	;volatile
  3863  094A  39E0               	andlw	-32
  3864  094B  3819               	iorlw	25
  3865  094C  00A2               	movwf	34	;volatile
  3866                           
  3867                           ;interface.c: 21: RC0PPSbits.RC0PPS = 0b11000;
  3868  094D  0820               	movf	32,w	;volatile
  3869  094E  39E0               	andlw	-32
  3870  094F  3818               	iorlw	24
  3871  0950  00A0               	movwf	32	;volatile
  3872                           
  3873                           ;interface.c: 23: SSP1CON1bits.CKP = 0;
  3874  0951  0024               	movlb	4	; select bank4
  3875  0952  1215               	bcf	21,4	;volatile
  3876                           
  3877                           ;interface.c: 24: SSP1STATbits.CKE = 1;
  3878  0953  1714               	bsf	20,6	;volatile
  3879                           
  3880                           ;interface.c: 25: SSP1CON1bits.SSPM = 0b0001;
  3881  0954  0815               	movf	21,w	;volatile
  3882  0955  39F0               	andlw	-16
  3883  0956  3801               	iorlw	1
  3884  0957  0095               	movwf	21	;volatile
  3885                           
  3886                           ;interface.c: 27: SSP1CON1bits.SSPEN = 1;
  3887  0958  1695               	bsf	21,5	;volatile
  3888  0959  0008               	return
  3889  095A                     __end_of_nrf24l01InterfaceInit:	
  3890                           
  3891                           	psect	text3
  3892  0227                     __ptext3:	
  3893 ;; *************** function _nrf24l01InitRegisters *****************
  3894 ;; Defined at:
  3895 ;;		line 362 in file "nrf24l01.c"
  3896 ;; Parameters:    Size  Location     Type
  3897 ;;		None
  3898 ;; Auto vars:     Size  Location     Type
  3899 ;;  i               2   14[BANK0 ] unsigned int 
  3900 ;;  DynPD           1   13[BANK0 ] struct .
  3901 ;;  enAA            1   12[BANK0 ] struct .
  3902 ;;  rfSetup         1   11[BANK0 ] struct .
  3903 ;;  feature         1   10[BANK0 ] struct .
  3904 ;;  setupAW         1    9[BANK0 ] struct .
  3905 ;;  channel         1    8[BANK0 ] struct .
  3906 ;; Return value:  Size  Location     Type
  3907 ;;                  1    wreg      void 
  3908 ;; Registers used:
  3909 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  3910 ;; Tracked objects:
  3911 ;;		On entry : 0/0
  3912 ;;		On exit  : 0/0
  3913 ;;		Unchanged: 0/0
  3914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3916 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3917 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3918 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3919 ;;Total ram usage:        9 bytes
  3920 ;; Hardware stack levels used:    1
  3921 ;; Hardware stack levels required when called:   10
  3922 ;; This function calls:
  3923 ;;		___bmul
  3924 ;;		_nrf24l01SPIEnd
  3925 ;;		_nrf24l01SPISend
  3926 ;;		_nrf24l01SPIStart
  3927 ;;		_nrf24l01Send
  3928 ;;		_nrf24l01SetRXPipe
  3929 ;;		_nrf24l01SetTXPipe
  3930 ;; This function is called by:
  3931 ;;		_nrf24l01Init
  3932 ;; This function uses a non-reentrant model
  3933 ;;
  3934                           
  3935                           
  3936                           ;psect for function _nrf24l01InitRegisters
  3937  0227                     _nrf24l01InitRegisters:	
  3938                           
  3939                           ;nrf24l01.c: 364: status.configRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x00, 0);
  3940                           
  3941                           ;incstack = 0
  3942                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+1
      +                          1+pclath+cstack]
  3943  0227  3000               	movlw	0
  3944  0228  001E               	movwi fsr1++
  3945  0229  3000               	movlw	0
  3946  022A  3188  205A  3182   	fcall	_nrf24l01Send
  3947  022D  00FF               	movwf	127
  3948  022E  087F               	movf	127,w
  3949  022F  0020               	movlb	0	; select bank0
  3950  0230  00E7               	movwf	_status+3	;volatile
  3951                           
  3952                           ;nrf24l01.c: 366: status.configRegister.PWR_UP = 0;
  3953  0231  10E7               	bcf	_status+3,1	;volatile
  3954                           
  3955                           ;nrf24l01.c: 367: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3956  0232  0867               	movf	_status+3,w	;volatile
  3957  0233  001E               	movwi fsr1++
  3958  0234  3020               	movlw	32
  3959  0235  3188  205A  3182   	fcall	_nrf24l01Send
  3960                           
  3961                           ;nrf24l01.c: 369: n_SETUP_AW_t setupAW;;nrf24l01.c: 370: setupAW.byte = 0x00;
  3962  0238  0020               	movlb	0	; select bank0
  3963  0239  01A9               	clrf	nrf24l01InitRegisters@setupAW
  3964                           
  3965                           ;nrf24l01.c: 371: setupAW.AW = 0b11;
  3966  023A  3003               	movlw	3
  3967  023B  04A9               	iorwf	nrf24l01InitRegisters@setupAW,f
  3968                           
  3969                           ;nrf24l01.c: 372: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x03, setupAW.byte);
  3970  023C  0829               	movf	nrf24l01InitRegisters@setupAW,w
  3971  023D  001E               	movwi fsr1++
  3972  023E  3023               	movlw	35
  3973  023F  3188  205A  3182   	fcall	_nrf24l01Send
  3974                           
  3975                           ;nrf24l01.c: 375: n_RF_CH_t channel;;nrf24l01.c: 376: channel.RF_CH = 2;
  3976  0242  0020               	movlb	0	; select bank0
  3977  0243  0828               	movf	nrf24l01InitRegisters@channel,w
  3978  0244  3980               	andlw	-128
  3979  0245  3802               	iorlw	2
  3980  0246  00A8               	movwf	nrf24l01InitRegisters@channel
  3981                           
  3982                           ;nrf24l01.c: 377: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3983  0247  0828               	movf	nrf24l01InitRegisters@channel,w
  3984  0248  001E               	movwi fsr1++
  3985  0249  3025               	movlw	37
  3986  024A  3188  205A  3182   	fcall	_nrf24l01Send
  3987                           
  3988                           ;nrf24l01.c: 380: n_RF_SETUP_t rfSetup;;nrf24l01.c: 381: rfSetup.byte = 0x00;
  3989  024D  0020               	movlb	0	; select bank0
  3990  024E  01AB               	clrf	nrf24l01InitRegisters@rfSetup
  3991                           
  3992                           ;nrf24l01.c: 382: rfSetup.RF_DR_LOW = 0;
  3993  024F  12AB               	bcf	nrf24l01InitRegisters@rfSetup,5
  3994                           
  3995                           ;nrf24l01.c: 383: rfSetup.RF_DR_HIGH = 1;
  3996  0250  15AB               	bsf	nrf24l01InitRegisters@rfSetup,3
  3997                           
  3998                           ;nrf24l01.c: 384: rfSetup.RF_PWR = 3;
  3999  0251  3006               	movlw	6
  4000  0252  04AB               	iorwf	nrf24l01InitRegisters@rfSetup,f
  4001                           
  4002                           ;nrf24l01.c: 385: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  4003  0253  082B               	movf	nrf24l01InitRegisters@rfSetup,w
  4004  0254  001E               	movwi fsr1++
  4005  0255  3026               	movlw	38
  4006  0256  3188  205A  3182   	fcall	_nrf24l01Send
  4007                           
  4008                           ;nrf24l01.c: 388: nrf24l01SetRXPipe(0xFF);
  4009  0259  30FF               	movlw	255
  4010  025A  3189  211E  3182   	fcall	_nrf24l01SetRXPipe
  4011                           
  4012                           ;nrf24l01.c: 391: n_EN_AA_t enAA;;nrf24l01.c: 392: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  4013  025D  3000               	movlw	0
  4014  025E  001E               	movwi fsr1++
  4015  025F  3001               	movlw	1
  4016  0260  3188  205A  3182   	fcall	_nrf24l01Send
  4017  0263  00FF               	movwf	127
  4018  0264  087F               	movf	127,w
  4019  0265  0020               	movlb	0	; select bank0
  4020  0266  00AC               	movwf	nrf24l01InitRegisters@enAA
  4021                           
  4022                           ;nrf24l01.c: 393: enAA.ENAA_P0 = 0;
  4023  0267  102C               	bcf	nrf24l01InitRegisters@enAA,0
  4024                           
  4025                           ;nrf24l01.c: 394: enAA.ENAA_P1 = 0;
  4026  0268  10AC               	bcf	nrf24l01InitRegisters@enAA,1
  4027                           
  4028                           ;nrf24l01.c: 395: enAA.ENAA_P2 = 0;
  4029  0269  112C               	bcf	nrf24l01InitRegisters@enAA,2
  4030                           
  4031                           ;nrf24l01.c: 396: enAA.ENAA_P3 = 0;
  4032  026A  11AC               	bcf	nrf24l01InitRegisters@enAA,3
  4033                           
  4034                           ;nrf24l01.c: 397: enAA.ENAA_P4 = 0;
  4035  026B  122C               	bcf	nrf24l01InitRegisters@enAA,4
  4036                           
  4037                           ;nrf24l01.c: 398: enAA.ENAA_P5 = 0;
  4038  026C  12AC               	bcf	nrf24l01InitRegisters@enAA,5
  4039                           
  4040                           ;nrf24l01.c: 399: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  4041  026D  082C               	movf	nrf24l01InitRegisters@enAA,w
  4042  026E  001E               	movwi fsr1++
  4043  026F  3021               	movlw	33
  4044  0270  3188  205A  3182   	fcall	_nrf24l01Send
  4045                           
  4046                           ;nrf24l01.c: 403: n_FEATURE_t feature;;nrf24l01.c: 404: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  4047  0273  3000               	movlw	0
  4048  0274  001E               	movwi fsr1++
  4049  0275  301D               	movlw	29
  4050  0276  3188  205A  3182   	fcall	_nrf24l01Send
  4051  0279  00FF               	movwf	127
  4052  027A  087F               	movf	127,w
  4053  027B  0020               	movlb	0	; select bank0
  4054  027C  00AA               	movwf	nrf24l01InitRegisters@feature
  4055                           
  4056                           ;nrf24l01.c: 405: feature.EN_DPL = 1;
  4057  027D  152A               	bsf	nrf24l01InitRegisters@feature,2
  4058                           
  4059                           ;nrf24l01.c: 406: feature.EN_DYN_ACK = 1;
  4060  027E  142A               	bsf	nrf24l01InitRegisters@feature,0
  4061                           
  4062                           ;nrf24l01.c: 407: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  4063  027F  082A               	movf	nrf24l01InitRegisters@feature,w
  4064  0280  001E               	movwi fsr1++
  4065  0281  303D               	movlw	61
  4066  0282  3188  205A  3182   	fcall	_nrf24l01Send
  4067                           
  4068                           ;nrf24l01.c: 409: n_DYNPD_t DynPD;;nrf24l01.c: 410: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  4069  0285  3000               	movlw	0
  4070  0286  001E               	movwi fsr1++
  4071  0287  301C               	movlw	28
  4072  0288  3188  205A  3182   	fcall	_nrf24l01Send
  4073  028B  00FF               	movwf	127
  4074  028C  087F               	movf	127,w
  4075  028D  0020               	movlb	0	; select bank0
  4076  028E  00AD               	movwf	nrf24l01InitRegisters@DynPD
  4077                           
  4078                           ;nrf24l01.c: 411: DynPD.DPL_P0 = 1;
  4079  028F  142D               	bsf	nrf24l01InitRegisters@DynPD,0
  4080                           
  4081                           ;nrf24l01.c: 412: DynPD.DPL_P1 = 1;
  4082  0290  14AD               	bsf	nrf24l01InitRegisters@DynPD,1
  4083                           
  4084                           ;nrf24l01.c: 413: DynPD.DPL_P2 = 1;
  4085  0291  152D               	bsf	nrf24l01InitRegisters@DynPD,2
  4086                           
  4087                           ;nrf24l01.c: 414: DynPD.DPL_P3 = 1;
  4088  0292  15AD               	bsf	nrf24l01InitRegisters@DynPD,3
  4089                           
  4090                           ;nrf24l01.c: 415: DynPD.DPL_P4 = 1;
  4091  0293  162D               	bsf	nrf24l01InitRegisters@DynPD,4
  4092                           
  4093                           ;nrf24l01.c: 416: DynPD.DPL_P5 = 1;
  4094  0294  16AD               	bsf	nrf24l01InitRegisters@DynPD,5
  4095                           
  4096                           ;nrf24l01.c: 417: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  4097  0295  082D               	movf	nrf24l01InitRegisters@DynPD,w
  4098  0296  001E               	movwi fsr1++
  4099  0297  303C               	movlw	60
  4100  0298  3188  205A  3182   	fcall	_nrf24l01Send
  4101                           
  4102                           ;nrf24l01.c: 420: unsigned int i;;nrf24l01.c: 421: for (i = 0; i < 6; i++){
  4103  029B  0020               	movlb	0	; select bank0
  4104  029C  01AE               	clrf	nrf24l01InitRegisters@i
  4105  029D  01AF               	clrf	nrf24l01InitRegisters@i+1
  4106  029E  3000               	movlw	0
  4107  029F  022F               	subwf	nrf24l01InitRegisters@i+1,w
  4108  02A0  3006               	movlw	6
  4109  02A1  1903               	skipnz
  4110  02A2  022E               	subwf	nrf24l01InitRegisters@i,w
  4111  02A3  1803               	btfsc	3,0
  4112  02A4  2AFE               	goto	l4627
  4113  02A5                     l4611:	
  4114                           
  4115                           ;nrf24l01.c: 423: nrf24l01SPIStart();
  4116  02A5  3188  2034  3182   	fcall	_nrf24l01SPIStart
  4117                           
  4118                           ;nrf24l01.c: 424: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  4119  02A8  0020               	movlb	0	; select bank0
  4120  02A9  082E               	movf	nrf24l01InitRegisters@i,w
  4121  02AA  3E0A               	addlw	10
  4122  02AB  3820               	iorlw	32
  4123  02AC  3188  204B  3182   	fcall	_nrf24l01SPISend
  4124                           
  4125                           ;nrf24l01.c: 426: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  4126  02AF  3051               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4127  02B0  0084               	movwf	4
  4128  02B1  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4129  02B2  0085               	movwf	5
  4130  02B3  0800               	movf	0,w	;code access
  4131  02B4  0020               	movlb	0	; select bank0
  4132  02B5  00A7               	movwf	??_nrf24l01InitRegisters
  4133  02B6  082E               	movf	nrf24l01InitRegisters@i,w
  4134  02B7  00FF               	movwf	127
  4135  02B8  087F               	movf	127,w
  4136  02B9  00A6               	movwf	___bmul@multiplicand
  4137  02BA  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4138  02BB  0084               	movwf	4
  4139  02BC  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4140  02BD  0085               	movwf	5
  4141  02BE  0800               	movf	0,w	;code access
  4142  02BF  3188  206D  3182   	fcall	___bmul
  4143  02C2  0020               	movlb	0	; select bank0
  4144  02C3  0727               	addwf	??_nrf24l01InitRegisters,w
  4145  02C4  3188  204B  3182   	fcall	_nrf24l01SPISend
  4146                           
  4147                           ;nrf24l01.c: 428: if (i < 2){
  4148  02C7  3000               	movlw	0
  4149  02C8  0020               	movlb	0	; select bank0
  4150  02C9  022F               	subwf	nrf24l01InitRegisters@i+1,w
  4151  02CA  3002               	movlw	2
  4152  02CB  1903               	skipnz
  4153  02CC  022E               	subwf	nrf24l01InitRegisters@i,w
  4154  02CD  1803               	skipnc
  4155  02CE  2AEF               	goto	l4621
  4156                           
  4157                           ;nrf24l01.c: 429: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4158  02CF  3050               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4159  02D0  0084               	movwf	4
  4160  02D1  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4161  02D2  0085               	movwf	5
  4162  02D3  0800               	movf	0,w	;code access
  4163  02D4  3188  204B  3182   	fcall	_nrf24l01SPISend
  4164                           
  4165                           ;nrf24l01.c: 430: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4166  02D7  304F               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4167  02D8  0084               	movwf	4
  4168  02D9  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4169  02DA  0085               	movwf	5
  4170  02DB  0800               	movf	0,w	;code access
  4171  02DC  3188  204B  3182   	fcall	_nrf24l01SPISend
  4172                           
  4173                           ;nrf24l01.c: 431: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4174  02DF  304E               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4175  02E0  0084               	movwf	4
  4176  02E1  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4177  02E2  0085               	movwf	5
  4178  02E3  0800               	movf	0,w	;code access
  4179  02E4  3188  204B  3182   	fcall	_nrf24l01SPISend
  4180                           
  4181                           ;nrf24l01.c: 432: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4182  02E7  304D               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4183  02E8  0084               	movwf	4
  4184  02E9  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4185  02EA  0085               	movwf	5
  4186  02EB  0800               	movf	0,w	;code access
  4187  02EC  3188  204B  3182   	fcall	_nrf24l01SPISend
  4188  02EF                     l4621:	
  4189                           
  4190                           ;nrf24l01.c: 433: };nrf24l01.c: 435: nrf24l01SPIEnd();
  4191  02EF  3188  202B  3182   	fcall	_nrf24l01SPIEnd
  4192  02F2  3001               	movlw	1
  4193  02F3  0020               	movlb	0	; select bank0
  4194  02F4  07AE               	addwf	nrf24l01InitRegisters@i,f
  4195  02F5  3000               	movlw	0
  4196  02F6  3DAF               	addwfc	nrf24l01InitRegisters@i+1,f
  4197  02F7  3000               	movlw	0
  4198  02F8  022F               	subwf	nrf24l01InitRegisters@i+1,w
  4199  02F9  3006               	movlw	6
  4200  02FA  1903               	skipnz
  4201  02FB  022E               	subwf	nrf24l01InitRegisters@i,w
  4202  02FC  1C03               	skipc
  4203  02FD  2AA5               	goto	l4611
  4204  02FE                     l4627:	
  4205                           
  4206                           ;nrf24l01.c: 436: };nrf24l01.c: 438: nrf24l01SetTXPipe(0);
  4207  02FE  3000               	movlw	0
  4208  02FF  318B  2345  3182   	fcall	_nrf24l01SetTXPipe
  4209                           
  4210                           ;nrf24l01.c: 442: status.statusRegister.byte = 0x00;
  4211  0302  0020               	movlb	0	; select bank0
  4212  0303  01E6               	clrf	_status+2	;volatile
  4213                           
  4214                           ;nrf24l01.c: 443: status.statusRegister.RX_DR = 1;
  4215  0304  1766               	bsf	_status+2,6	;volatile
  4216                           
  4217                           ;nrf24l01.c: 444: status.statusRegister.TX_DS = 1;
  4218  0305  16E6               	bsf	_status+2,5	;volatile
  4219                           
  4220                           ;nrf24l01.c: 445: status.statusRegister.MAX_RT = 1;
  4221  0306  1666               	bsf	_status+2,4	;volatile
  4222                           
  4223                           ;nrf24l01.c: 446: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.statusReg
      +                          ister.byte);
  4224  0307  0866               	movf	_status+2,w	;volatile
  4225  0308  001E               	movwi fsr1++
  4226  0309  3027               	movlw	39
  4227  030A  3188  205A  3182   	fcall	_nrf24l01Send
  4228                           
  4229                           ;nrf24l01.c: 448: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  4230  030D  3000               	movlw	0
  4231  030E  001E               	movwi fsr1++
  4232  030F  3007               	movlw	7
  4233  0310  3188  205A  3182   	fcall	_nrf24l01Send
  4234  0313  00FF               	movwf	127
  4235  0314  087F               	movf	127,w
  4236  0315  0020               	movlb	0	; select bank0
  4237  0316  00E6               	movwf	_status+2	;volatile
  4238                           
  4239                           ;nrf24l01.c: 451: nrf24l01Send((unsigned) 0b11100001, 0);
  4240  0317  3000               	movlw	0
  4241  0318  001E               	movwi fsr1++
  4242  0319  30E1               	movlw	225
  4243  031A  3188  205A  3182   	fcall	_nrf24l01Send
  4244                           
  4245                           ;nrf24l01.c: 452: nrf24l01Send((unsigned) 0b11100010, 0);
  4246  031D  3000               	movlw	0
  4247  031E  001E               	movwi fsr1++
  4248  031F  30E2               	movlw	226
  4249  0320  3188  205A  3182   	fcall	_nrf24l01Send
  4250                           
  4251                           ;nrf24l01.c: 455: status.configRegister.PRIM_RX = 1;
  4252  0323  0020               	movlb	0	; select bank0
  4253  0324  1467               	bsf	_status+3,0	;volatile
  4254                           
  4255                           ;nrf24l01.c: 456: status.configRegister.EN_CRC = 1;
  4256  0325  15E7               	bsf	_status+3,3	;volatile
  4257                           
  4258                           ;nrf24l01.c: 457: status.configRegister.CRCO = 1;
  4259  0326  1567               	bsf	_status+3,2	;volatile
  4260                           
  4261                           ;nrf24l01.c: 458: status.configRegister.PWR_UP = 1;
  4262  0327  14E7               	bsf	_status+3,1	;volatile
  4263                           
  4264                           ;nrf24l01.c: 459: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  4265  0328  0867               	movf	_status+3,w	;volatile
  4266  0329  001E               	movwi fsr1++
  4267  032A  3020               	movlw	32
  4268  032B  3188  205A         	fcall	_nrf24l01Send
  4269  032D  0008               	return
  4270  032E                     __end_of_nrf24l01InitRegisters:	
  4271                           
  4272                           	psect	text4
  4273  0B45                     __ptext4:	
  4274 ;; *************** function _nrf24l01SetTXPipe *****************
  4275 ;; Defined at:
  4276 ;;		line 140 in file "nrf24l01.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;  pipe            1    wreg     unsigned char 
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;  pipe            1    3[COMMON] unsigned char 
  4281 ;; Return value:  Size  Location     Type
  4282 ;;                  1    wreg      void 
  4283 ;; Registers used:
  4284 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4291 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4292 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4293 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4294 ;;Total ram usage:        2 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:    8
  4297 ;; This function calls:
  4298 ;;		___bmul
  4299 ;;		_nrf24l01SPIEnd
  4300 ;;		_nrf24l01SPISend
  4301 ;;		_nrf24l01SPIStart
  4302 ;; This function is called by:
  4303 ;;		_main
  4304 ;;		_nrf24l01InitRegisters
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           
  4309                           ;psect for function _nrf24l01SetTXPipe
  4310  0B45                     _nrf24l01SetTXPipe:	
  4311                           
  4312                           ;incstack = 0
  4313                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+11+pc
      +                          lath+cstack]
  4314                           ;nrf24l01SetTXPipe@pipe stored from wreg
  4315  0B45  00F3               	movwf	nrf24l01SetTXPipe@pipe
  4316                           
  4317                           ;nrf24l01.c: 143: nrf24l01SPIStart();
  4318  0B46  3188  2034  318B   	fcall	_nrf24l01SPIStart
  4319                           
  4320                           ;nrf24l01.c: 144: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  4321  0B49  3030               	movlw	48
  4322  0B4A  3188  204B  318B   	fcall	_nrf24l01SPISend
  4323                           
  4324                           ;nrf24l01.c: 145: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  4325  0B4D  3051               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4326  0B4E  0084               	movwf	4
  4327  0B4F  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4328  0B50  0085               	movwf	5
  4329  0B51  0800               	movf	0,w	;code access
  4330  0B52  00F2               	movwf	??_nrf24l01SetTXPipe
  4331  0B53  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4332  0B54  0084               	movwf	4
  4333  0B55  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4334  0B56  0085               	movwf	5
  4335  0B57  0800               	movf	0,w	;code access
  4336  0B58  00FF               	movwf	127
  4337  0B59  087F               	movf	127,w
  4338  0B5A  0020               	movlb	0	; select bank0
  4339  0B5B  00A6               	movwf	___bmul@multiplicand
  4340  0B5C  0873               	movf	nrf24l01SetTXPipe@pipe,w
  4341  0B5D  3188  206D  318B   	fcall	___bmul
  4342  0B60  0772               	addwf	??_nrf24l01SetTXPipe,w
  4343  0B61  3188  204B  318B   	fcall	_nrf24l01SPISend
  4344                           
  4345                           ;nrf24l01.c: 146: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4346  0B64  3050               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4347  0B65  0084               	movwf	4
  4348  0B66  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4349  0B67  0085               	movwf	5
  4350  0B68  0800               	movf	0,w	;code access
  4351  0B69  3188  204B  318B   	fcall	_nrf24l01SPISend
  4352                           
  4353                           ;nrf24l01.c: 147: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4354  0B6C  304F               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4355  0B6D  0084               	movwf	4
  4356  0B6E  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4357  0B6F  0085               	movwf	5
  4358  0B70  0800               	movf	0,w	;code access
  4359  0B71  3188  204B  318B   	fcall	_nrf24l01SPISend
  4360                           
  4361                           ;nrf24l01.c: 148: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4362  0B74  304E               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4363  0B75  0084               	movwf	4
  4364  0B76  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4365  0B77  0085               	movwf	5
  4366  0B78  0800               	movf	0,w	;code access
  4367  0B79  3188  204B  318B   	fcall	_nrf24l01SPISend
  4368                           
  4369                           ;nrf24l01.c: 149: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4370  0B7C  304D               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4371  0B7D  0084               	movwf	4
  4372  0B7E  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4373  0B7F  0085               	movwf	5
  4374  0B80  0800               	movf	0,w	;code access
  4375  0B81  3188  204B  318B   	fcall	_nrf24l01SPISend
  4376                           
  4377                           ;nrf24l01.c: 150: nrf24l01SPIEnd();
  4378  0B84  3188  202B         	fcall	_nrf24l01SPIEnd
  4379  0B86  0008               	return
  4380  0B87                     __end_of_nrf24l01SetTXPipe:	
  4381                           
  4382                           	psect	text5
  4383  086D                     __ptext5:	
  4384 ;; *************** function ___bmul *****************
  4385 ;; Defined at:
  4386 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;  multiplier      1    wreg     unsigned char 
  4389 ;;  multiplicand    1    6[BANK0 ] unsigned char 
  4390 ;; Auto vars:     Size  Location     Type
  4391 ;;  multiplier      1    1[COMMON] unsigned char 
  4392 ;;  product         1    0[COMMON] unsigned char 
  4393 ;; Return value:  Size  Location     Type
  4394 ;;                  1    wreg      unsigned char 
  4395 ;; Registers used:
  4396 ;;		wreg, status,2, status,0, btemp+11
  4397 ;; Tracked objects:
  4398 ;;		On entry : 0/0
  4399 ;;		On exit  : 0/0
  4400 ;;		Unchanged: 0/0
  4401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4402 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4403 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4405 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4406 ;;Total ram usage:        3 bytes
  4407 ;; Hardware stack levels used:    1
  4408 ;; Hardware stack levels required when called:    7
  4409 ;; This function calls:
  4410 ;;		Nothing
  4411 ;; This function is called by:
  4412 ;;		_nrf24l01SetTXPipe
  4413 ;;		_nrf24l01InitRegisters
  4414 ;; This function uses a non-reentrant model
  4415 ;;
  4416                           
  4417                           
  4418                           ;psect for function ___bmul
  4419  086D                     ___bmul:	
  4420                           
  4421                           ;incstack = 0
  4422                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+11]
  4423                           ;___bmul@multiplier stored from wreg
  4424  086D  00F1               	movwf	___bmul@multiplier
  4425  086E  01F0               	clrf	___bmul@product
  4426  086F                     l4025:	
  4427  086F  1C71               	btfss	___bmul@multiplier,0
  4428  0870  2876               	goto	l4029
  4429  0871  0020               	movlb	0	; select bank0
  4430  0872  0826               	movf	___bmul@multiplicand,w
  4431  0873  00FF               	movwf	127
  4432  0874  087F               	movf	127,w
  4433  0875  07F0               	addwf	___bmul@product,f
  4434  0876                     l4029:	
  4435  0876  1003               	clrc
  4436  0877  0020               	movlb	0	; select bank0
  4437  0878  0DA6               	rlf	___bmul@multiplicand,f
  4438  0879  1003               	clrc
  4439  087A  0CF1               	rrf	___bmul@multiplier,f
  4440  087B  0871               	movf	___bmul@multiplier,w
  4441  087C  1D03               	btfss	3,2
  4442  087D  286F               	goto	l4025
  4443  087E  0870               	movf	___bmul@product,w
  4444  087F  0008               	return
  4445  0880                     __end_of___bmul:	
  4446                           
  4447                           	psect	text6
  4448  091E                     __ptext6:	
  4449 ;; *************** function _nrf24l01SetRXPipe *****************
  4450 ;; Defined at:
  4451 ;;		line 153 in file "nrf24l01.c"
  4452 ;; Parameters:    Size  Location     Type
  4453 ;;  pipe            1    wreg     unsigned char 
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;  pipe            1    1[COMMON] unsigned char 
  4456 ;;  enRXAddr        1    2[COMMON] struct .
  4457 ;; Return value:  Size  Location     Type
  4458 ;;                  1    wreg      void 
  4459 ;; Registers used:
  4460 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath
  4461 ;; Tracked objects:
  4462 ;;		On entry : 0/0
  4463 ;;		On exit  : 0/0
  4464 ;;		Unchanged: 0/0
  4465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4467 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4468 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4469 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4470 ;;Total ram usage:        3 bytes
  4471 ;; Hardware stack levels used:    1
  4472 ;; Hardware stack levels required when called:    9
  4473 ;; This function calls:
  4474 ;;		_nrf24l01Send
  4475 ;; This function is called by:
  4476 ;;		_main
  4477 ;;		_nrf24l01InitRegisters
  4478 ;; This function uses a non-reentrant model
  4479 ;;
  4480                           
  4481                           
  4482                           ;psect for function _nrf24l01SetRXPipe
  4483  091E                     _nrf24l01SetRXPipe:	
  4484                           
  4485                           ;incstack = 0
  4486                           ; Regs used in _nrf24l01SetRXPipe: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+11+pclath]
  4487                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4488  091E  00F1               	movwf	nrf24l01SetRXPipe@pipe
  4489                           
  4490                           ;nrf24l01.c: 155: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 157: if (pipe > 5){
  4491  091F  3006               	movlw	6
  4492  0920  0271               	subwf	nrf24l01SetRXPipe@pipe,w
  4493  0921  1C03               	skipc
  4494  0922  292A               	goto	l274
  4495                           
  4496                           ;nrf24l01.c: 158: enRXAddr.ERX_P0 = 1;
  4497  0923  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4498                           
  4499                           ;nrf24l01.c: 159: enRXAddr.ERX_P1 = 1;
  4500  0924  14F2               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4501                           
  4502                           ;nrf24l01.c: 160: enRXAddr.ERX_P2 = 1;
  4503  0925  1572               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4504                           
  4505                           ;nrf24l01.c: 161: enRXAddr.ERX_P3 = 1;
  4506  0926  15F2               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4507                           
  4508                           ;nrf24l01.c: 162: enRXAddr.ERX_P4 = 1;
  4509  0927  1672               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4510                           
  4511                           ;nrf24l01.c: 163: enRXAddr.ERX_P5 = 1;
  4512  0928  16F2               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4513                           
  4514                           ;nrf24l01.c: 164: }
  4515  0929  2936               	goto	l4259
  4516  092A                     l274:	
  4517                           
  4518                           ;nrf24l01.c: 166: else{;nrf24l01.c: 167: enRXAddr.ERX_P0 = 1;
  4519  092A  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4520                           
  4521                           ;nrf24l01.c: 168: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4522  092B  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4523  092C  00F0               	movwf	??_nrf24l01SetRXPipe
  4524  092D  0A71               	incf	nrf24l01SetRXPipe@pipe,w
  4525  092E  2930               	goto	u4744
  4526  092F                     u4745:	
  4527  092F  35F0               	lslf	??_nrf24l01SetRXPipe,f
  4528  0930                     u4744:	
  4529  0930  0B89               	decfsz	9,f
  4530  0931  292F               	goto	u4745
  4531  0932  0870               	movf	??_nrf24l01SetRXPipe,w
  4532  0933  00FF               	movwf	127
  4533  0934  087F               	movf	127,w
  4534  0935  00F2               	movwf	nrf24l01SetRXPipe@enRXAddr
  4535  0936                     l4259:	
  4536                           
  4537                           ;nrf24l01.c: 169: };nrf24l01.c: 171: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4538  0936  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4539  0937  001E               	movwi fsr1++
  4540  0938  3022               	movlw	34
  4541  0939  3188  205A         	fcall	_nrf24l01Send
  4542  093B  0008               	return
  4543  093C                     __end_of_nrf24l01SetRXPipe:	
  4544                           
  4545                           	psect	text7
  4546  0AD5                     __ptext7:	
  4547 ;; *************** function _nrf24l01GetPipe *****************
  4548 ;; Defined at:
  4549 ;;		line 157 in file "main.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;  name            1    wreg     PTR unsigned char 
  4552 ;;		 -> romDataMap(28), 
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;  name            1   11[BANK0 ] PTR unsigned char 
  4555 ;;		 -> romDataMap(28), 
  4556 ;;  i               1   12[BANK0 ] unsigned char 
  4557 ;;  pipe            1   10[BANK0 ] unsigned char 
  4558 ;; Return value:  Size  Location     Type
  4559 ;;                  1    wreg      unsigned char 
  4560 ;; Registers used:
  4561 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+10, btemp+11, pclath, cstack
  4562 ;; Tracked objects:
  4563 ;;		On entry : 0/0
  4564 ;;		On exit  : 0/0
  4565 ;;		Unchanged: 0/0
  4566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4568 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4569 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4570 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4571 ;;Total ram usage:        4 bytes
  4572 ;; Hardware stack levels used:    1
  4573 ;; Hardware stack levels required when called:    8
  4574 ;; This function calls:
  4575 ;;		___lwmod
  4576 ;;		_strlen
  4577 ;; This function is called by:
  4578 ;;		_main
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           
  4583                           ;psect for function _nrf24l01GetPipe
  4584  0AD5                     _nrf24l01GetPipe:	
  4585                           
  4586                           ;incstack = 0
  4587                           ; Regs used in _nrf24l01GetPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+10+btemp
      +                          +11+pclath+cstack]
  4588                           ;nrf24l01GetPipe@name stored from wreg
  4589  0AD5  0020               	movlb	0	; select bank0
  4590  0AD6  00AB               	movwf	nrf24l01GetPipe@name
  4591                           
  4592                           ;main.c: 158: unsigned char pipe = 0;
  4593  0AD7  01AA               	clrf	nrf24l01GetPipe@pipe
  4594                           
  4595                           ;main.c: 159: unsigned char i = 0;
  4596  0AD8  01AC               	clrf	nrf24l01GetPipe@i
  4597                           
  4598                           ;main.c: 162: for (i = 0; i < strlen(name); i++){
  4599  0AD9  01AC               	clrf	nrf24l01GetPipe@i
  4600  0ADA                     l4727:	
  4601  0ADA  082B               	movf	nrf24l01GetPipe@name,w
  4602  0ADB  3189  2100  318A   	fcall	_strlen
  4603  0ADE  0020               	movlb	0	; select bank0
  4604  0ADF  082C               	movf	nrf24l01GetPipe@i,w
  4605  0AE0  00FE               	movwf	126
  4606  0AE1  01FF               	clrf	127
  4607  0AE2  0875               	movf	117,w
  4608  0AE3  027F               	subwf	127,w
  4609  0AE4  1D03               	skipz
  4610  0AE5  2AE8               	goto	u5185
  4611  0AE6  0874               	movf	116,w
  4612  0AE7  027E               	subwf	126,w
  4613  0AE8                     u5185:	
  4614  0AE8  1803               	btfsc	3,0
  4615  0AE9  2AFA               	goto	l4729
  4616                           
  4617                           ;main.c: 163: pipe+= name[i];
  4618  0AEA  082C               	movf	nrf24l01GetPipe@i,w
  4619  0AEB  072B               	addwf	nrf24l01GetPipe@name,w
  4620  0AEC  00F1               	movwf	??_nrf24l01GetPipe
  4621  0AED  0871               	movf	??_nrf24l01GetPipe,w
  4622  0AEE  0084               	movwf	4
  4623  0AEF  3001               	movlw	1	; select bank2/3
  4624  0AF0  0085               	movwf	5
  4625  0AF1  0800               	movf	0,w
  4626  0AF2  00FF               	movwf	127
  4627  0AF3  087F               	movf	127,w
  4628  0AF4  07AA               	addwf	nrf24l01GetPipe@pipe,f
  4629  0AF5  3001               	movlw	1
  4630  0AF6  00FF               	movwf	127
  4631  0AF7  087F               	movf	127,w
  4632  0AF8  07AC               	addwf	nrf24l01GetPipe@i,f
  4633  0AF9  2ADA               	goto	l4727
  4634  0AFA                     l4729:	
  4635                           
  4636                           ;main.c: 164: };main.c: 166: return (unsigned) pipe % 6;
  4637  0AFA  3006               	movlw	6
  4638  0AFB  00A6               	movwf	___lwmod@divisor
  4639  0AFC  3000               	movlw	0
  4640  0AFD  00A7               	movwf	___lwmod@divisor+1
  4641  0AFE  082A               	movf	nrf24l01GetPipe@pipe,w
  4642  0AFF  00FE               	movwf	126
  4643  0B00  01FF               	clrf	127
  4644  0B01  087E               	movf	126,w
  4645  0B02  00A8               	movwf	___lwmod@dividend
  4646  0B03  087F               	movf	127,w
  4647  0B04  00A9               	movwf	___lwmod@dividend+1
  4648  0B05  318A  2218         	fcall	___lwmod
  4649  0B07  0020               	movlb	0	; select bank0
  4650  0B08  0826               	movf	?___lwmod,w
  4651  0B09  0008               	return
  4652  0B0A                     __end_of_nrf24l01GetPipe:	
  4653                           
  4654                           	psect	text8
  4655  0A18                     __ptext8:	
  4656 ;; *************** function ___lwmod *****************
  4657 ;; Defined at:
  4658 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4659 ;; Parameters:    Size  Location     Type
  4660 ;;  divisor         2    6[BANK0 ] unsigned int 
  4661 ;;  dividend        2    8[BANK0 ] unsigned int 
  4662 ;; Auto vars:     Size  Location     Type
  4663 ;;  counter         1    0[COMMON] unsigned char 
  4664 ;; Return value:  Size  Location     Type
  4665 ;;                  2    6[BANK0 ] unsigned int 
  4666 ;; Registers used:
  4667 ;;		wreg, status,2, status,0, btemp+11
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4673 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4674 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4676 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4677 ;;Total ram usage:        5 bytes
  4678 ;; Hardware stack levels used:    1
  4679 ;; Hardware stack levels required when called:    7
  4680 ;; This function calls:
  4681 ;;		Nothing
  4682 ;; This function is called by:
  4683 ;;		_nrf24l01GetPipe
  4684 ;; This function uses a non-reentrant model
  4685 ;;
  4686                           
  4687                           
  4688                           ;psect for function ___lwmod
  4689  0A18                     ___lwmod:	
  4690                           
  4691                           ;incstack = 0
  4692                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+11]
  4693  0A18  0020               	movlb	0	; select bank0
  4694  0A19  0826               	movf	___lwmod@divisor,w
  4695  0A1A  0427               	iorwf	___lwmod@divisor+1,w
  4696  0A1B  1903               	btfsc	3,2
  4697  0A1C  2A40               	goto	l4673
  4698  0A1D  01F0               	clrf	___lwmod@counter
  4699  0A1E  0AF0               	incf	___lwmod@counter,f
  4700  0A1F                     l4663:	
  4701  0A1F  1BA7               	btfsc	___lwmod@divisor+1,7
  4702  0A20  2A2B               	goto	l4665
  4703  0A21  3001               	movlw	1
  4704  0A22                     u5085:	
  4705  0A22  35A6               	lslf	___lwmod@divisor,f
  4706  0A23  0DA7               	rlf	___lwmod@divisor+1,f
  4707  0A24  0B89               	decfsz	9,f
  4708  0A25  2A22               	goto	u5085
  4709  0A26  3001               	movlw	1
  4710  0A27  00FF               	movwf	127
  4711  0A28  087F               	movf	127,w
  4712  0A29  07F0               	addwf	___lwmod@counter,f
  4713  0A2A  2A1F               	goto	l4663
  4714  0A2B                     l4665:	
  4715  0A2B  0827               	movf	___lwmod@divisor+1,w
  4716  0A2C  0229               	subwf	___lwmod@dividend+1,w
  4717  0A2D  1D03               	skipz
  4718  0A2E  2A31               	goto	u5105
  4719  0A2F  0826               	movf	___lwmod@divisor,w
  4720  0A30  0228               	subwf	___lwmod@dividend,w
  4721  0A31                     u5105:	
  4722  0A31  1C03               	skipc
  4723  0A32  2A37               	goto	l4669
  4724  0A33  0826               	movf	___lwmod@divisor,w
  4725  0A34  02A8               	subwf	___lwmod@dividend,f
  4726  0A35  0827               	movf	___lwmod@divisor+1,w
  4727  0A36  3BA9               	subwfb	___lwmod@dividend+1,f
  4728  0A37                     l4669:	
  4729  0A37  3001               	movlw	1
  4730  0A38                     u5115:	
  4731  0A38  36A7               	lsrf	___lwmod@divisor+1,f
  4732  0A39  0CA6               	rrf	___lwmod@divisor,f
  4733  0A3A  0B89               	decfsz	9,f
  4734  0A3B  2A38               	goto	u5115
  4735  0A3C  3001               	movlw	1
  4736  0A3D  02F0               	subwf	___lwmod@counter,f
  4737  0A3E  1D03               	btfss	3,2
  4738  0A3F  2A2B               	goto	l4665
  4739  0A40                     l4673:	
  4740  0A40  0829               	movf	___lwmod@dividend+1,w
  4741  0A41  00A7               	movwf	?___lwmod+1
  4742  0A42  0828               	movf	___lwmod@dividend,w
  4743  0A43  00A6               	movwf	?___lwmod
  4744  0A44  0008               	return
  4745  0A45                     __end_of___lwmod:	
  4746                           
  4747                           	psect	text9
  4748  0424                     __ptext9:	
  4749 ;; *************** function _loop *****************
  4750 ;; Defined at:
  4751 ;;		line 107 in file "main.c"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;		None
  4754 ;; Auto vars:     Size  Location     Type
  4755 ;;  packet         33   22[BANK1 ] struct .
  4756 ;;  ta              3   16[BANK1 ] float 
  4757 ;;  vt              3   13[BANK1 ] float 
  4758 ;; Return value:  Size  Location     Type
  4759 ;;                  1    wreg      void 
  4760 ;; Registers used:
  4761 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  4762 ;; Tracked objects:
  4763 ;;		On entry : 0/0
  4764 ;;		On exit  : 0/0
  4765 ;;		Unchanged: 0/0
  4766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4768 ;;      Locals:         0       0      42       0       0       0       0       0       0       0       0       0       
      +0       0
  4769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4770 ;;      Totals:         0       0      42       0       0       0       0       0       0       0       0       0       
      +0       0
  4771 ;;Total ram usage:       42 bytes
  4772 ;; Hardware stack levels used:    1
  4773 ;; Hardware stack levels required when called:   14
  4774 ;; This function calls:
  4775 ;;		___ftadd
  4776 ;;		___ftdiv
  4777 ;;		___ftneg
  4778 ;;		___lwtoft
  4779 ;;		_getADCValue
  4780 ;;		_hcsr04GetAerage
  4781 ;;		_sendMessage
  4782 ;; This function is called by:
  4783 ;;		_main
  4784 ;; This function uses a non-reentrant model
  4785 ;;
  4786                           
  4787                           
  4788                           ;psect for function _loop
  4789  0424                     _loop:	
  4790                           
  4791                           ;main.c: 109: nrf24l01Packet_t packet;;main.c: 111: sendMessage(&packet, "DIST", hcsr04G
      +                          etAerage());
  4792                           
  4793                           ;incstack = 0
  4794                           ; Regs used in _loop: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  4795  0424  30B6               	movlw	low loop@packet
  4796  0425  0021               	movlb	1	; select bank1
  4797  0426  00A4               	movwf	sendMessage@packet^(0+128)
  4798  0427  3000               	movlw	high loop@packet
  4799  0428  00A5               	movwf	(sendMessage@packet+1)^(0+128)
  4800  0429  3057               	movlw	low (STR_3| (0+32768))
  4801  042A  00A6               	movwf	sendMessage@topic^(0+128)
  4802  042B  3090               	movlw	high (STR_3| (0+32768))
  4803  042C  00A7               	movwf	(sendMessage@topic^(0+128)+1)
  4804  042D  318E  26C1  3184   	fcall	_hcsr04GetAerage
  4805  0430  0020               	movlb	0	; select bank0
  4806  0431  0843               	movf	?_hcsr04GetAerage,w
  4807  0432  0021               	movlb	1	; select bank1
  4808  0433  00A8               	movwf	sendMessage@value^(0+128)
  4809  0434  0020               	movlb	0	; select bank0
  4810  0435  0844               	movf	?_hcsr04GetAerage+1,w
  4811  0436  0021               	movlb	1	; select bank1
  4812  0437  00A9               	movwf	(sendMessage@value+1)^(0+128)
  4813  0438  0020               	movlb	0	; select bank0
  4814  0439  0845               	movf	?_hcsr04GetAerage+2,w
  4815  043A  0021               	movlb	1	; select bank1
  4816  043B  00AA               	movwf	(sendMessage@value+2)^(0+128)
  4817  043C  318D  2599  3184   	fcall	_sendMessage
  4818                           
  4819                           ;main.c: 113: sendMessage(&packet, "rloop", rloop);
  4820  043F  30B6               	movlw	low loop@packet
  4821  0440  0021               	movlb	1	; select bank1
  4822  0441  00A4               	movwf	sendMessage@packet^(0+128)
  4823  0442  3000               	movlw	high loop@packet
  4824  0443  00A5               	movwf	(sendMessage@packet+1)^(0+128)
  4825  0444  3047               	movlw	low (STR_4| (0+32768))
  4826  0445  00A6               	movwf	sendMessage@topic^(0+128)
  4827  0446  3090               	movlw	high (STR_4| (0+32768))
  4828  0447  00A7               	movwf	(sendMessage@topic^(0+128)+1)
  4829  0448  0022               	movlb	2	; select bank2
  4830  0449  082B               	movf	(_rloop+1)^(0+256),w
  4831  044A  0020               	movlb	0	; select bank0
  4832  044B  00AC               	movwf	___lwtoft@c+1
  4833  044C  0022               	movlb	2	; select bank2
  4834  044D  082A               	movf	_rloop^(0+256),w
  4835  044E  0020               	movlb	0	; select bank0
  4836  044F  00AB               	movwf	___lwtoft@c
  4837  0450  3188  2094  3184   	fcall	___lwtoft
  4838  0453  0020               	movlb	0	; select bank0
  4839  0454  082B               	movf	?___lwtoft,w
  4840  0455  0021               	movlb	1	; select bank1
  4841  0456  00A8               	movwf	sendMessage@value^(0+128)
  4842  0457  0020               	movlb	0	; select bank0
  4843  0458  082C               	movf	?___lwtoft+1,w
  4844  0459  0021               	movlb	1	; select bank1
  4845  045A  00A9               	movwf	(sendMessage@value+1)^(0+128)
  4846  045B  0020               	movlb	0	; select bank0
  4847  045C  082D               	movf	?___lwtoft+2,w
  4848  045D  0021               	movlb	1	; select bank1
  4849  045E  00AA               	movwf	(sendMessage@value+2)^(0+128)
  4850  045F  318D  2599  3184   	fcall	_sendMessage
  4851                           
  4852                           ;main.c: 115: sendMessage(&packet, "rcount", rcount);
  4853  0462  30B6               	movlw	low loop@packet
  4854  0463  0021               	movlb	1	; select bank1
  4855  0464  00A4               	movwf	sendMessage@packet^(0+128)
  4856  0465  3000               	movlw	high loop@packet
  4857  0466  00A5               	movwf	(sendMessage@packet+1)^(0+128)
  4858  0467  3034               	movlw	low (STR_5| (0+32768))
  4859  0468  00A6               	movwf	sendMessage@topic^(0+128)
  4860  0469  3090               	movlw	high (STR_5| (0+32768))
  4861  046A  00A7               	movwf	(sendMessage@topic^(0+128)+1)
  4862  046B  0859               	movf	(_rcount+1)^(0+128),w
  4863  046C  0020               	movlb	0	; select bank0
  4864  046D  00AC               	movwf	___lwtoft@c+1
  4865  046E  0021               	movlb	1	; select bank1
  4866  046F  0858               	movf	_rcount^(0+128),w
  4867  0470  0020               	movlb	0	; select bank0
  4868  0471  00AB               	movwf	___lwtoft@c
  4869  0472  3188  2094  3184   	fcall	___lwtoft
  4870  0475  0020               	movlb	0	; select bank0
  4871  0476  082B               	movf	?___lwtoft,w
  4872  0477  0021               	movlb	1	; select bank1
  4873  0478  00A8               	movwf	sendMessage@value^(0+128)
  4874  0479  0020               	movlb	0	; select bank0
  4875  047A  082C               	movf	?___lwtoft+1,w
  4876  047B  0021               	movlb	1	; select bank1
  4877  047C  00A9               	movwf	(sendMessage@value+1)^(0+128)
  4878  047D  0020               	movlb	0	; select bank0
  4879  047E  082D               	movf	?___lwtoft+2,w
  4880  047F  0021               	movlb	1	; select bank1
  4881  0480  00AA               	movwf	(sendMessage@value+2)^(0+128)
  4882  0481  318D  2599  3184   	fcall	_sendMessage
  4883                           
  4884                           ;main.c: 136: FVRCONbits.TSEN = 1;
  4885  0484  0022               	movlb	2	; select bank2
  4886  0485  1697               	bsf	23,5	;volatile
  4887                           
  4888                           ;main.c: 137: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4889  0486  303D               	movlw	61
  4890  0487  3185  25CB  3184   	fcall	_getADCValue
  4891  048A  0020               	movlb	0	; select bank0
  4892  048B  0843               	movf	?_getADCValue,w
  4893  048C  00CC               	movwf	___ftneg@f1
  4894  048D  0844               	movf	?_getADCValue+1,w
  4895  048E  00CD               	movwf	___ftneg@f1+1
  4896  048F  0845               	movf	?_getADCValue+2,w
  4897  0490  00CE               	movwf	___ftneg@f1+2
  4898  0491  3188  2022  3184   	fcall	___ftneg
  4899  0494  0020               	movlb	0	; select bank0
  4900  0495  084C               	movf	?___ftneg,w
  4901  0496  0021               	movlb	1	; select bank1
  4902  0497  00B3               	movwf	_loop$2253^(0+128)
  4903  0498  0020               	movlb	0	; select bank0
  4904  0499  084D               	movf	?___ftneg+1,w
  4905  049A  0021               	movlb	1	; select bank1
  4906  049B  00B4               	movwf	(_loop$2253+1)^(0+128)
  4907  049C  0020               	movlb	0	; select bank0
  4908  049D  084E               	movf	?___ftneg+2,w
  4909  049E  0021               	movlb	1	; select bank1
  4910  049F  00B5               	movwf	(_loop$2253+2)^(0+128)
  4911                           
  4912                           ;main.c: 137: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4913  04A0  3000               	movlw	0
  4914  04A1  0020               	movlb	0	; select bank0
  4915  04A2  00B7               	movwf	___ftdiv@f2
  4916  04A3  3000               	movlw	0
  4917  04A4  00B8               	movwf	___ftdiv@f2+1
  4918  04A5  3040               	movlw	64
  4919  04A6  00B9               	movwf	___ftdiv@f2+2
  4920  04A7  3012               	movlw	18
  4921  04A8  00AE               	movwf	___ftadd@f1
  4922  04A9  3003               	movlw	3
  4923  04AA  00AF               	movwf	___ftadd@f1+1
  4924  04AB  3040               	movlw	64
  4925  04AC  00B0               	movwf	___ftadd@f1+2
  4926  04AD  0021               	movlb	1	; select bank1
  4927  04AE  0833               	movf	_loop$2253^(0+128),w
  4928  04AF  0020               	movlb	0	; select bank0
  4929  04B0  00B1               	movwf	___ftadd@f2
  4930  04B1  0021               	movlb	1	; select bank1
  4931  04B2  0834               	movf	(_loop$2253+1)^(0+128),w
  4932  04B3  0020               	movlb	0	; select bank0
  4933  04B4  00B2               	movwf	___ftadd@f2+1
  4934  04B5  0021               	movlb	1	; select bank1
  4935  04B6  0835               	movf	(_loop$2253+2)^(0+128),w
  4936  04B7  0020               	movlb	0	; select bank0
  4937  04B8  00B3               	movwf	___ftadd@f2+2
  4938  04B9  3183  232E  3184   	fcall	___ftadd
  4939  04BC  0020               	movlb	0	; select bank0
  4940  04BD  082E               	movf	?___ftadd,w
  4941  04BE  00BA               	movwf	___ftdiv@f1
  4942  04BF  082F               	movf	?___ftadd+1,w
  4943  04C0  00BB               	movwf	___ftdiv@f1+1
  4944  04C1  0830               	movf	?___ftadd+2,w
  4945  04C2  00BC               	movwf	___ftdiv@f1+2
  4946  04C3  3186  2675  3184   	fcall	___ftdiv
  4947  04C6  0020               	movlb	0	; select bank0
  4948  04C7  0837               	movf	?___ftdiv,w
  4949  04C8  0021               	movlb	1	; select bank1
  4950  04C9  00AD               	movwf	loop@vt^(0+128)
  4951  04CA  0020               	movlb	0	; select bank0
  4952  04CB  0838               	movf	?___ftdiv+1,w
  4953  04CC  0021               	movlb	1	; select bank1
  4954  04CD  00AE               	movwf	(loop@vt+1)^(0+128)
  4955  04CE  0020               	movlb	0	; select bank0
  4956  04CF  0839               	movf	?___ftdiv+2,w
  4957  04D0  0021               	movlb	1	; select bank1
  4958  04D1  00AF               	movwf	(loop@vt+2)^(0+128)
  4959                           
  4960                           ;main.c: 138: FVRCONbits.TSEN = 0;
  4961  04D2  0022               	movlb	2	; select bank2
  4962  04D3  1297               	bcf	23,5	;volatile
  4963                           
  4964                           ;main.c: 143: float ta = (vt / -0.00132) - (0.6063 / -0.00132) - 40;
  4965  04D4  30A9               	movlw	169
  4966  04D5  0020               	movlb	0	; select bank0
  4967  04D6  00AE               	movwf	___ftadd@f1
  4968  04D7  30D1               	movlw	209
  4969  04D8  00AF               	movwf	___ftadd@f1+1
  4970  04D9  3043               	movlw	67
  4971  04DA  00B0               	movwf	___ftadd@f1+2
  4972  04DB  3004               	movlw	4
  4973  04DC  00B7               	movwf	___ftdiv@f2
  4974  04DD  30AD               	movlw	173
  4975  04DE  00B8               	movwf	___ftdiv@f2+1
  4976  04DF  30BA               	movlw	186
  4977  04E0  00B9               	movwf	___ftdiv@f2+2
  4978  04E1  0021               	movlb	1	; select bank1
  4979  04E2  082D               	movf	loop@vt^(0+128),w
  4980  04E3  0020               	movlb	0	; select bank0
  4981  04E4  00BA               	movwf	___ftdiv@f1
  4982  04E5  0021               	movlb	1	; select bank1
  4983  04E6  082E               	movf	(loop@vt+1)^(0+128),w
  4984  04E7  0020               	movlb	0	; select bank0
  4985  04E8  00BB               	movwf	___ftdiv@f1+1
  4986  04E9  0021               	movlb	1	; select bank1
  4987  04EA  082F               	movf	(loop@vt+2)^(0+128),w
  4988  04EB  0020               	movlb	0	; select bank0
  4989  04EC  00BC               	movwf	___ftdiv@f1+2
  4990  04ED  3186  2675  3184   	fcall	___ftdiv
  4991  04F0  0020               	movlb	0	; select bank0
  4992  04F1  0837               	movf	?___ftdiv,w
  4993  04F2  00B1               	movwf	___ftadd@f2
  4994  04F3  0838               	movf	?___ftdiv+1,w
  4995  04F4  00B2               	movwf	___ftadd@f2+1
  4996  04F5  0839               	movf	?___ftdiv+2,w
  4997  04F6  00B3               	movwf	___ftadd@f2+2
  4998  04F7  3183  232E  3184   	fcall	___ftadd
  4999  04FA  0020               	movlb	0	; select bank0
  5000  04FB  082E               	movf	?___ftadd,w
  5001  04FC  0021               	movlb	1	; select bank1
  5002  04FD  00B0               	movwf	loop@ta^(0+128)
  5003  04FE  0020               	movlb	0	; select bank0
  5004  04FF  082F               	movf	?___ftadd+1,w
  5005  0500  0021               	movlb	1	; select bank1
  5006  0501  00B1               	movwf	(loop@ta+1)^(0+128)
  5007  0502  0020               	movlb	0	; select bank0
  5008  0503  0830               	movf	?___ftadd+2,w
  5009  0504  0021               	movlb	1	; select bank1
  5010  0505  00B2               	movwf	(loop@ta+2)^(0+128)
  5011                           
  5012                           ;main.c: 145: sendMessage(&packet, "TEMP", ta);
  5013  0506  30B6               	movlw	low loop@packet
  5014  0507  00A4               	movwf	sendMessage@packet^(0+128)
  5015  0508  3000               	movlw	high loop@packet
  5016  0509  00A5               	movwf	(sendMessage@packet+1)^(0+128)
  5017  050A  3052               	movlw	low (STR_6| (0+32768))
  5018  050B  00A6               	movwf	sendMessage@topic^(0+128)
  5019  050C  3090               	movlw	high (STR_6| (0+32768))
  5020  050D  00A7               	movwf	(sendMessage@topic^(0+128)+1)
  5021  050E  0830               	movf	loop@ta^(0+128),w
  5022  050F  00A8               	movwf	sendMessage@value^(0+128)
  5023  0510  0831               	movf	(loop@ta+1)^(0+128),w
  5024  0511  00A9               	movwf	(sendMessage@value+1)^(0+128)
  5025  0512  0832               	movf	(loop@ta+2)^(0+128),w
  5026  0513  00AA               	movwf	(sendMessage@value+2)^(0+128)
  5027  0514  318D  2599         	fcall	_sendMessage
  5028  0516  0008               	return
  5029  0517                     __end_of_loop:	
  5030                           
  5031                           	psect	text10
  5032  0D99                     __ptext10:	
  5033 ;; *************** function _sendMessage *****************
  5034 ;; Defined at:
  5035 ;;		line 87 in file "main.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;  packet          2    4[BANK1 ] PTR struct .
  5038 ;;		 -> main@packet(33), loop@packet(33), 
  5039 ;;  topic           2    6[BANK1 ] PTR const unsigned char 
  5040 ;;		 -> STR_9(6), STR_8(6), STR_6(5), STR_5(7), 
  5041 ;;		 -> STR_4(6), STR_3(5), 
  5042 ;;  value           3    8[BANK1 ] float 
  5043 ;; Auto vars:     Size  Location     Type
  5044 ;;  ftoaStatus      2   11[BANK1 ] int 
  5045 ;; Return value:  Size  Location     Type
  5046 ;;                  1    wreg      void 
  5047 ;; Registers used:
  5048 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  5049 ;; Tracked objects:
  5050 ;;		On entry : 0/0
  5051 ;;		On exit  : 0/0
  5052 ;;		Unchanged: 0/0
  5053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5054 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5055 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5057 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  5058 ;;Total ram usage:        9 bytes
  5059 ;; Hardware stack levels used:    1
  5060 ;; Hardware stack levels required when called:   13
  5061 ;; This function calls:
  5062 ;;		_ftoa
  5063 ;;		_memset
  5064 ;;		_nrf24l01SendPacket
  5065 ;;		_sleepMs
  5066 ;;		_strcat
  5067 ;;		_strcpy
  5068 ;; This function is called by:
  5069 ;;		_loop
  5070 ;;		_main
  5071 ;; This function uses a non-reentrant model
  5072 ;;
  5073                           
  5074                           
  5075                           ;psect for function _sendMessage
  5076  0D99                     _sendMessage:	
  5077                           
  5078                           ;main.c: 89: int ftoaStatus;;main.c: 91: memset(packet->Message, 0, sizeof(packet->Messa
      +                          ge));
  5079                           
  5080                           ;incstack = 0
  5081                           ; Regs used in _sendMessage: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+p
      +                          clath+cstack]
  5082  0D99  3020               	movlw	32
  5083  0D9A  001E               	movwi fsr1++
  5084  0D9B  3000               	movlw	0
  5085  0D9C  001E               	movwi fsr1++
  5086  0D9D  3000               	movlw	0
  5087  0D9E  001E               	movwi fsr1++
  5088  0D9F  001E               	movwi fsr1++
  5089  0DA0  0021               	movlb	1	; select bank1
  5090  0DA1  0824               	movf	sendMessage@packet^(0+128),w
  5091  0DA2  3E01               	addlw	1
  5092  0DA3  00FE               	movwf	126
  5093  0DA4  3000               	movlw	0
  5094  0DA5  3D25               	addwfc	(sendMessage@packet+1)^(0+128),w
  5095  0DA6  00FF               	movwf	127
  5096  0DA7  087E               	movf	126,w
  5097  0DA8  001E               	movwi fsr1++
  5098  0DA9  087F               	movf	127,w
  5099  0DAA  001E               	movwi fsr1++
  5100  0DAB  318A  22A3  318D   	fcall	_memset
  5101                           
  5102                           ;main.c: 92: strcpy(packet->Message, romData->name);
  5103  0DAE  0021               	movlb	1	; select bank1
  5104  0DAF  0824               	movf	sendMessage@packet^(0+128),w
  5105  0DB0  3E01               	addlw	1
  5106  0DB1  0020               	movlb	0	; select bank0
  5107  0DB2  00A6               	movwf	strcpy@to
  5108  0DB3  3000               	movlw	0
  5109  0DB4  0021               	movlb	1	; select bank1
  5110  0DB5  3D25               	addwfc	(sendMessage@packet+1)^(0+128),w
  5111  0DB6  0020               	movlb	0	; select bank0
  5112  0DB7  00A7               	movwf	strcpy@to+1
  5113  0DB8  0021               	movlb	1	; select bank1
  5114  0DB9  085B               	movf	_romData^(0+128),w
  5115  0DBA  3E01               	addlw	1
  5116  0DBB  0020               	movlb	0	; select bank0
  5117  0DBC  00A8               	movwf	strcpy@from
  5118  0DBD  3001               	movlw	1
  5119  0DBE  00A9               	movwf	strcpy@from+1
  5120  0DBF  3188  20C5  318D   	fcall	_strcpy
  5121                           
  5122                           ;main.c: 93: strcat(packet->Message, "/");
  5123  0DC2  0021               	movlb	1	; select bank1
  5124  0DC3  0824               	movf	sendMessage@packet^(0+128),w
  5125  0DC4  3E01               	addlw	1
  5126  0DC5  00A0               	movwf	strcat@to^(0+128)
  5127  0DC6  3000               	movlw	0
  5128  0DC7  3D25               	addwfc	(sendMessage@packet+1)^(0+128),w
  5129  0DC8  00A1               	movwf	(strcat@to+1)^(0+128)
  5130  0DC9  3060               	movlw	low (STR_1| (0+32768))
  5131  0DCA  00A2               	movwf	strcat@from^(0+128)
  5132  0DCB  3090               	movlw	high (STR_1| (0+32768))
  5133  0DCC  00A3               	movwf	(strcat@from^(0+128)+1)
  5134  0DCD  318A  2274  318D   	fcall	_strcat
  5135                           
  5136                           ;main.c: 94: strcat(packet->Message, topic);
  5137  0DD0  0021               	movlb	1	; select bank1
  5138  0DD1  0824               	movf	sendMessage@packet^(0+128),w
  5139  0DD2  3E01               	addlw	1
  5140  0DD3  00A0               	movwf	strcat@to^(0+128)
  5141  0DD4  3000               	movlw	0
  5142  0DD5  3D25               	addwfc	(sendMessage@packet+1)^(0+128),w
  5143  0DD6  00A1               	movwf	(strcat@to+1)^(0+128)
  5144  0DD7  0827               	movf	(sendMessage@topic+1)^(0+128),w
  5145  0DD8  00A3               	movwf	(strcat@from+1)^(0+128)
  5146  0DD9  0826               	movf	sendMessage@topic^(0+128),w
  5147  0DDA  00A2               	movwf	strcat@from^(0+128)
  5148  0DDB  318A  2274  318D   	fcall	_strcat
  5149                           
  5150                           ;main.c: 95: strcat(packet->Message, "/");
  5151  0DDE  0021               	movlb	1	; select bank1
  5152  0DDF  0824               	movf	sendMessage@packet^(0+128),w
  5153  0DE0  3E01               	addlw	1
  5154  0DE1  00A0               	movwf	strcat@to^(0+128)
  5155  0DE2  3000               	movlw	0
  5156  0DE3  3D25               	addwfc	(sendMessage@packet+1)^(0+128),w
  5157  0DE4  00A1               	movwf	(strcat@to+1)^(0+128)
  5158  0DE5  3060               	movlw	low (STR_1| (0+32768))
  5159  0DE6  00A2               	movwf	strcat@from^(0+128)
  5160  0DE7  3090               	movlw	high (STR_1| (0+32768))
  5161  0DE8  00A3               	movwf	(strcat@from^(0+128)+1)
  5162  0DE9  318A  2274  318D   	fcall	_strcat
  5163                           
  5164                           ;main.c: 96: strcat(packet->Message, ftoa(value, &ftoaStatus));
  5165  0DEC  0021               	movlb	1	; select bank1
  5166  0DED  0824               	movf	sendMessage@packet^(0+128),w
  5167  0DEE  3E01               	addlw	1
  5168  0DEF  00A0               	movwf	strcat@to^(0+128)
  5169  0DF0  3000               	movlw	0
  5170  0DF1  3D25               	addwfc	(sendMessage@packet+1)^(0+128),w
  5171  0DF2  00A1               	movwf	(strcat@to+1)^(0+128)
  5172  0DF3  0828               	movf	sendMessage@value^(0+128),w
  5173  0DF4  0020               	movlb	0	; select bank0
  5174  0DF5  00D5               	movwf	ftoa@f
  5175  0DF6  0021               	movlb	1	; select bank1
  5176  0DF7  0829               	movf	(sendMessage@value+1)^(0+128),w
  5177  0DF8  0020               	movlb	0	; select bank0
  5178  0DF9  00D6               	movwf	ftoa@f+1
  5179  0DFA  0021               	movlb	1	; select bank1
  5180  0DFB  082A               	movf	(sendMessage@value+2)^(0+128),w
  5181  0DFC  0020               	movlb	0	; select bank0
  5182  0DFD  00D7               	movwf	ftoa@f+2
  5183  0DFE  30AB               	movlw	(low (sendMessage@ftoaStatus| 0))& (0+255)
  5184  0DFF  00FF               	movwf	127
  5185  0E00  087F               	movf	127,w
  5186  0E01  00D8               	movwf	ftoa@status
  5187  0E02  318F  275D  318D   	fcall	_ftoa
  5188  0E05  0021               	movlb	1	; select bank1
  5189  0E06  00A2               	movwf	strcat@from^(0+128)
  5190  0E07  3001               	movlw	1
  5191  0E08  00A3               	movwf	(strcat@from+1)^(0+128)
  5192  0E09  318A  2274  318D   	fcall	_strcat
  5193                           
  5194                           ;main.c: 98: packet->packetData.byte = 0;
  5195  0E0C  0021               	movlb	1	; select bank1
  5196  0E0D  0824               	movf	sendMessage@packet^(0+128),w
  5197  0E0E  0084               	movwf	4
  5198  0E0F  0825               	movf	(sendMessage@packet+1)^(0+128),w
  5199  0E10  0085               	movwf	5
  5200  0E11  0180               	clrf	0
  5201                           
  5202                           ;main.c: 99: packet->packetData.ACKRequest = 0;
  5203  0E12  0824               	movf	sendMessage@packet^(0+128),w
  5204  0E13  0084               	movwf	4
  5205  0E14  0825               	movf	(sendMessage@packet+1)^(0+128),w
  5206  0E15  0085               	movwf	5
  5207  0E16  1100               	bcf	0,2
  5208                           
  5209                           ;main.c: 101: nrf24l01SendPacket(packet);
  5210  0E17  0825               	movf	(sendMessage@packet+1)^(0+128),w
  5211  0E18  00F3               	movwf	nrf24l01SendPacket@txPacket+1
  5212  0E19  0824               	movf	sendMessage@packet^(0+128),w
  5213  0E1A  00F2               	movwf	nrf24l01SendPacket@txPacket
  5214  0E1B  318A  2245  318D   	fcall	_nrf24l01SendPacket
  5215                           
  5216                           ;main.c: 103: sleepMs(200);
  5217  0E1E  30C8               	movlw	200
  5218  0E1F  0020               	movlb	0	; select bank0
  5219  0E20  00A6               	movwf	sleepMs@milliseconds
  5220  0E21  3000               	movlw	0
  5221  0E22  00A7               	movwf	sleepMs@milliseconds+1
  5222  0E23  3189  219B         	fcall	_sleepMs
  5223  0E25  0008               	return
  5224  0E26                     __end_of_sendMessage:	
  5225                           
  5226                           	psect	text11
  5227  0A74                     __ptext11:	
  5228 ;; *************** function _strcat *****************
  5229 ;; Defined at:
  5230 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;  to              2    0[BANK1 ] PTR unsigned char 
  5233 ;;		 -> main@packet(33), loop@packet(33), 
  5234 ;;  from            2    2[BANK1 ] PTR const unsigned char 
  5235 ;;		 -> ftoa@buf(17), STR_9(6), STR_8(6), STR_6(5), 
  5236 ;;		 -> STR_5(7), STR_4(6), STR_3(5), STR_2(2), 
  5237 ;;		 -> STR_1(2), 
  5238 ;; Auto vars:     Size  Location     Type
  5239 ;;  cp              2   66[BANK0 ] PTR unsigned char 
  5240 ;;		 -> main@packet(33), loop@packet(33), 
  5241 ;; Return value:  Size  Location     Type
  5242 ;;                  2    0[BANK1 ] PTR unsigned char 
  5243 ;; Registers used:
  5244 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5245 ;; Tracked objects:
  5246 ;;		On entry : 0/0
  5247 ;;		On exit  : 0/0
  5248 ;;		Unchanged: 0/0
  5249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5250 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5251 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5253 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5254 ;;Total ram usage:        6 bytes
  5255 ;; Hardware stack levels used:    1
  5256 ;; Hardware stack levels required when called:    7
  5257 ;; This function calls:
  5258 ;;		Nothing
  5259 ;; This function is called by:
  5260 ;;		_sendMessage
  5261 ;; This function uses a non-reentrant model
  5262 ;;
  5263                           
  5264                           
  5265                           ;psect for function _strcat
  5266  0A74                     _strcat:	
  5267                           
  5268                           ;incstack = 0
  5269                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5270  0A74  0021               	movlb	1	; select bank1
  5271  0A75  0821               	movf	(strcat@to+1)^(0+128),w
  5272  0A76  0020               	movlb	0	; select bank0
  5273  0A77  00E3               	movwf	strcat@cp+1
  5274  0A78  0021               	movlb	1	; select bank1
  5275  0A79  0820               	movf	strcat@to^(0+128),w
  5276  0A7A  0020               	movlb	0	; select bank0
  5277  0A7B  00E2               	movwf	strcat@cp
  5278  0A7C                     l4885:	
  5279  0A7C  0862               	movf	strcat@cp,w
  5280  0A7D  0084               	movwf	4
  5281  0A7E  0863               	movf	strcat@cp+1,w
  5282  0A7F  0085               	movwf	5
  5283  0A80  0800               	movf	0,w
  5284  0A81  1903               	btfsc	3,2
  5285  0A82  2A91               	goto	l4889
  5286  0A83  3001               	movlw	1
  5287  0A84  07E2               	addwf	strcat@cp,f
  5288  0A85  3000               	movlw	0
  5289  0A86  3DE3               	addwfc	strcat@cp+1,f
  5290  0A87  2A7C               	goto	l4885
  5291  0A88                     l4887:	
  5292  0A88  3001               	movlw	1
  5293  0A89  07E2               	addwf	strcat@cp,f
  5294  0A8A  3000               	movlw	0
  5295  0A8B  3DE3               	addwfc	strcat@cp+1,f
  5296  0A8C  3001               	movlw	1
  5297  0A8D  0021               	movlb	1	; select bank1
  5298  0A8E  07A2               	addwf	strcat@from^(0+128),f
  5299  0A8F  3000               	movlw	0
  5300  0A90  3DA3               	addwfc	(strcat@from+1)^(0+128),f
  5301  0A91                     l4889:	
  5302  0A91  0021               	movlb	1	; select bank1
  5303  0A92  0822               	movf	strcat@from^(0+128),w
  5304  0A93  0084               	movwf	4
  5305  0A94  0823               	movf	(strcat@from+1)^(0+128),w
  5306  0A95  0085               	movwf	5
  5307  0A96  0800               	movf	0,w	;code access
  5308  0A97  00FF               	movwf	127
  5309  0A98  0020               	movlb	0	; select bank0
  5310  0A99  0862               	movf	strcat@cp,w
  5311  0A9A  0084               	movwf	4
  5312  0A9B  0863               	movf	strcat@cp+1,w
  5313  0A9C  0085               	movwf	5
  5314  0A9D  087F               	movf	127,w
  5315  0A9E  0080               	movwf	0
  5316  0A9F  0800               	movf	0,w
  5317  0AA0  1903               	btfsc	3,2
  5318  0AA1  0008               	return
  5319  0AA2  2A88               	goto	l4887
  5320  0AA3                     __end_of_strcat:	
  5321                           ;	Return value of _strcat is never used
  5322                           
  5323                           
  5324                           	psect	text12
  5325  0A45                     __ptext12:	
  5326 ;; *************** function _nrf24l01SendPacket *****************
  5327 ;; Defined at:
  5328 ;;		line 176 in file "nrf24l01.c"
  5329 ;; Parameters:    Size  Location     Type
  5330 ;;  txPacket        2    2[COMMON] PTR struct .
  5331 ;;		 -> main@packet(33), loop@packet(33), 
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;		None
  5334 ;; Return value:  Size  Location     Type
  5335 ;;                  1    wreg      void 
  5336 ;; Registers used:
  5337 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  5338 ;; Tracked objects:
  5339 ;;		On entry : 0/0
  5340 ;;		On exit  : 0/0
  5341 ;;		Unchanged: 0/0
  5342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5343 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5346 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5347 ;;Total ram usage:        2 bytes
  5348 ;; Hardware stack levels used:    1
  5349 ;; Hardware stack levels required when called:   12
  5350 ;; This function calls:
  5351 ;;		_nrf24l01Service
  5352 ;;		_sleepMs
  5353 ;;		_strcpy
  5354 ;; This function is called by:
  5355 ;;		_sendMessage
  5356 ;; This function uses a non-reentrant model
  5357 ;;
  5358                           
  5359                           
  5360                           ;psect for function _nrf24l01SendPacket
  5361  0A45                     _nrf24l01SendPacket:	
  5362                           
  5363                           ;nrf24l01.c: 178: strcpy(TXPacket.Message, txPacket->Message);
  5364                           
  5365                           ;incstack = 0
  5366                           ; Regs used in _nrf24l01SendPacket: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-bte
      +                          mp+11+pclath+cstack]
  5367  0A45  30A1               	movlw	low (_TXPacket+1)
  5368  0A46  0020               	movlb	0	; select bank0
  5369  0A47  00A6               	movwf	strcpy@to
  5370  0A48  3001               	movlw	high (_TXPacket+1)
  5371  0A49  00A7               	movwf	strcpy@to+1
  5372  0A4A  0872               	movf	nrf24l01SendPacket@txPacket,w
  5373  0A4B  3E01               	addlw	1
  5374  0A4C  00FE               	movwf	126
  5375  0A4D  3000               	movlw	0
  5376  0A4E  3D73               	addwfc	nrf24l01SendPacket@txPacket+1,w
  5377  0A4F  00FF               	movwf	127
  5378  0A50  087E               	movf	126,w
  5379  0A51  00A8               	movwf	strcpy@from
  5380  0A52  087F               	movf	127,w
  5381  0A53  00A9               	movwf	strcpy@from+1
  5382  0A54  3188  20C5  318A   	fcall	_strcpy
  5383                           
  5384                           ;nrf24l01.c: 179: TXPacket.packetData = txPacket->packetData;
  5385  0A57  0872               	movf	nrf24l01SendPacket@txPacket,w
  5386  0A58  0084               	movwf	4
  5387  0A59  0873               	movf	nrf24l01SendPacket@txPacket+1,w
  5388  0A5A  0085               	movwf	5
  5389  0A5B  0800               	movf	0,w
  5390  0A5C  00FF               	movwf	127
  5391  0A5D  087F               	movf	127,w
  5392  0A5E  0023               	movlb	3	; select bank3
  5393  0A5F  00A0               	movwf	_TXPacket^(0+384)
  5394                           
  5395                           ;nrf24l01.c: 181: status.TX = 1;
  5396  0A60  3001               	movlw	1
  5397  0A61  00FF               	movwf	127
  5398  0A62  087F               	movf	127,w
  5399  0A63  0020               	movlb	0	; select bank0
  5400  0A64  00E4               	movwf	_status	;volatile
  5401  0A65                     l4901:	
  5402                           ;nrf24l01.c: 183: while (status.TX != 0){
  5403                           
  5404  0A65  0020               	movlb	0	; select bank0
  5405  0A66  0864               	movf	_status,w	;volatile
  5406  0A67  1903               	btfsc	3,2
  5407  0A68  0008               	return
  5408                           
  5409                           ;nrf24l01.c: 184: sleepMs(1);
  5410  0A69  3001               	movlw	1
  5411  0A6A  00A6               	movwf	sleepMs@milliseconds
  5412  0A6B  3000               	movlw	0
  5413  0A6C  00A7               	movwf	sleepMs@milliseconds+1
  5414  0A6D  3189  219B  318A   	fcall	_sleepMs
  5415                           
  5416                           ;nrf24l01.c: 185: nrf24l01Service();
  5417  0A70  3187  271E  318A   	fcall	_nrf24l01Service
  5418  0A73  2A65               	goto	l4901
  5419  0A74                     __end_of_nrf24l01SendPacket:	
  5420                           
  5421                           	psect	text13
  5422  08C5                     __ptext13:	
  5423 ;; *************** function _strcpy *****************
  5424 ;; Defined at:
  5425 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;  to              2    6[BANK0 ] PTR unsigned char 
  5428 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5429 ;;  from            2    8[BANK0 ] PTR const unsigned char 
  5430 ;;		 -> romDataMap.name(16), packet.Message(32), packet.Message(32), main@packet(33), 
  5431 ;;		 -> STR_7(4), loop@packet(33), romDataMap(28), 
  5432 ;; Auto vars:     Size  Location     Type
  5433 ;;  cp              2    0[COMMON] PTR unsigned char 
  5434 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5435 ;; Return value:  Size  Location     Type
  5436 ;;                  2    6[BANK0 ] PTR unsigned char 
  5437 ;; Registers used:
  5438 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5439 ;; Tracked objects:
  5440 ;;		On entry : 0/0
  5441 ;;		On exit  : 0/0
  5442 ;;		Unchanged: 0/0
  5443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5444 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5445 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5447 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5448 ;;Total ram usage:        6 bytes
  5449 ;; Hardware stack levels used:    1
  5450 ;; Hardware stack levels required when called:    7
  5451 ;; This function calls:
  5452 ;;		Nothing
  5453 ;; This function is called by:
  5454 ;;		_sendMessage
  5455 ;;		_main
  5456 ;;		_nrf24l01SendPacket
  5457 ;; This function uses a non-reentrant model
  5458 ;;
  5459                           
  5460                           
  5461                           ;psect for function _strcpy
  5462  08C5                     _strcpy:	
  5463                           
  5464                           ;incstack = 0
  5465                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5466  08C5  0020               	movlb	0	; select bank0
  5467  08C6  0827               	movf	strcpy@to+1,w
  5468  08C7  00F1               	movwf	strcpy@cp+1
  5469  08C8  0826               	movf	strcpy@to,w
  5470  08C9  00F0               	movwf	strcpy@cp
  5471  08CA                     l3875:	
  5472  08CA  0828               	movf	strcpy@from,w
  5473  08CB  0084               	movwf	4
  5474  08CC  0829               	movf	strcpy@from+1,w
  5475  08CD  0085               	movwf	5
  5476  08CE  0800               	movf	0,w	;code access
  5477  08CF  00FF               	movwf	127
  5478  08D0  0870               	movf	strcpy@cp,w
  5479  08D1  0084               	movwf	4
  5480  08D2  0871               	movf	strcpy@cp+1,w
  5481  08D3  0085               	movwf	5
  5482  08D4  087F               	movf	127,w
  5483  08D5  0080               	movwf	0
  5484  08D6  0800               	movf	0,w
  5485  08D7  1903               	btfsc	3,2
  5486  08D8  0008               	return
  5487  08D9  3001               	movlw	1
  5488  08DA  07F0               	addwf	strcpy@cp,f
  5489  08DB  3000               	movlw	0
  5490  08DC  3DF1               	addwfc	strcpy@cp+1,f
  5491  08DD  3001               	movlw	1
  5492  08DE  07A8               	addwf	strcpy@from,f
  5493  08DF  3000               	movlw	0
  5494  08E0  3DA9               	addwfc	strcpy@from+1,f
  5495  08E1  28CA               	goto	l3875
  5496  08E2                     __end_of_strcpy:	
  5497                           ;	Return value of _strcpy is never used
  5498                           
  5499                           
  5500                           	psect	text14
  5501  071E                     __ptext14:	
  5502 ;; *************** function _nrf24l01Service *****************
  5503 ;; Defined at:
  5504 ;;		line 272 in file "nrf24l01.c"
  5505 ;; Parameters:    Size  Location     Type
  5506 ;;		None
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;  width           1  [STACK] unsigned char 
  5509 ;;  i               1  [STACK] unsigned char 
  5510 ;; Return value:  Size  Location     Type
  5511 ;;                  1    wreg      void 
  5512 ;; Registers used:
  5513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath
  5514 ;; Tracked objects:
  5515 ;;		On entry : 0/0
  5516 ;;		On exit  : 1D/0
  5517 ;;		Unchanged: 0/0
  5518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5523 ;;Total ram usage:        0 bytes
  5524 ;; Hardware stack levels used:    1
  5525 ;; Hardware stack levels required when called:   11
  5526 ;; This function calls:
  5527 ;;		_memset
  5528 ;;		_nrf24l01SPIEnd
  5529 ;;		_nrf24l01SPISend
  5530 ;;		_nrf24l01SPIStart
  5531 ;;		_nrf24l01Send
  5532 ;;		_nrf24l01SendTXBuffer
  5533 ;;		_nrf24l01SetRXMode
  5534 ;;		_strcmp
  5535 ;; This function is called by:
  5536 ;;		_nrf24l01SendPacket
  5537 ;;		_nrf24l01ISR
  5538 ;; This function uses a reentrant model
  5539 ;;
  5540                           
  5541                           
  5542                           ;psect for function _nrf24l01Service
  5543  071E                     _nrf24l01Service:	
  5544                           
  5545                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5546  071E  3142               	addfsr 1,2
  5547                           
  5548                           ;nrf24l01.c: 274: unsigned char i;;nrf24l01.c: 276: if (status.TX == 1){
  5549                           
  5550                           ;incstack = 0
  5551 ;; hardware stack exceeded
  5552                           ; Regs used in _nrf24l01Service: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+
      +                          9+btemp+11+pclath]
  5553  071F  0020               	movlb	0	; select bank0
  5554  0720  0364               	decf	_status,w	;volatile
  5555  0721  1D03               	btfss	3,2
  5556  0722  2F29               	goto	l4475
  5557                           
  5558                           ;nrf24l01.c: 279: status.TX = 2;
  5559  0723  3002               	movlw	2
  5560  0724  00E4               	movwf	_status	;volatile
  5561                           
  5562                           ;nrf24l01.c: 280: nrf24l01SendTXBuffer(&TXPacket);
  5563  0725  30A0               	movlw	(low (_TXPacket| (0+256)))& (0+255)
  5564  0726  318B  23CA  3187   	fcall	_nrf24l01SendTXBuffer
  5565  0729                     l4475:	
  5566                           
  5567                           ;nrf24l01.c: 281: };nrf24l01.c: 283: if (status.TX == 4){
  5568  0729  3004               	movlw	4
  5569  072A  0664               	xorwf	_status,w	;volatile
  5570  072B  1D03               	btfss	3,2
  5571  072C  2F33               	goto	l4481
  5572                           
  5573                           ;nrf24l01.c: 284: if (!status.retryCount--){
  5574  072D  03E8               	decf	_status+4,f	;volatile
  5575  072E  0A68               	incf	_status+4,w	;volatile
  5576  072F  1D03               	btfss	3,2
  5577  0730  2F33               	goto	l4481
  5578                           
  5579                           ;nrf24l01.c: 285: status.TX = 1;
  5580  0731  3001               	movlw	1
  5581  0732  00E4               	movwf	_status	;volatile
  5582  0733                     l4481:	
  5583                           
  5584                           ;nrf24l01.c: 286: };nrf24l01.c: 287: };nrf24l01.c: 289: if (status.RX == 1){
  5585  0733  0365               	decf	_status+1,w	;volatile
  5586  0734  1D03               	btfss	3,2
  5587  0735  2F97               	goto	l4517
  5588                           
  5589                           ;nrf24l01.c: 292: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  5590  0736  3020               	movlw	32
  5591  0737  001E               	movwi fsr1++
  5592  0738  3000               	movlw	0
  5593  0739  001E               	movwi fsr1++
  5594  073A  3000               	movlw	0
  5595  073B  001E               	movwi fsr1++
  5596  073C  001E               	movwi fsr1++
  5597  073D  302D               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5598  073E  001E               	movwi fsr1++
  5599  073F  3001               	movlw	1
  5600  0740  001E               	movwi fsr1++
  5601  0741  318A  22A3  3187   	fcall	_memset
  5602                           
  5603                           ;nrf24l01.c: 293: RXPacket.packetData.byte = 0x00;
  5604  0744  0022               	movlb	2	; select bank2
  5605  0745  01AC               	clrf	_RXPacket^(0+256)
  5606                           
  5607                           ;nrf24l01.c: 296: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  5608  0746  3000               	movlw	0
  5609  0747  001E               	movwi fsr1++
  5610  0748  3060               	movlw	96
  5611  0749  3188  205A  3187   	fcall	_nrf24l01Send
  5612                           
  5613                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5614  074C  3FFE               	movwi [-2]fsr1
  5615                           
  5616                           ;nrf24l01.c: 299: PORTAbits.RA0 = 0;
  5617  074D  0020               	movlb	0	; select bank0
  5618  074E  100C               	bcf	12,0	;volatile
  5619                           
  5620                           ;nrf24l01.c: 302: nrf24l01SPIStart();
  5621  074F  3188  2034  3187   	fcall	_nrf24l01SPIStart
  5622                           
  5623                           ;nrf24l01.c: 305: nrf24l01SPISend((unsigned) 0b01100001);
  5624  0752  3061               	movlw	97
  5625  0753  3188  204B  3187   	fcall	_nrf24l01SPISend
  5626                           
  5627                           ;nrf24l01.c: 308: RXPacket.packetData.byte = nrf24l01SPISend(0);
  5628  0756  3000               	movlw	0
  5629  0757  3188  204B  3187   	fcall	_nrf24l01SPISend
  5630  075A  0022               	movlb	2	; select bank2
  5631  075B  00AC               	movwf	_RXPacket^(0+256)
  5632                           
  5633                           ;nrf24l01.c: 309: width--;
  5634                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5635  075C  3F7E               	moviw [-2]fsr1
  5636  075D  00F4               	movwf	116
  5637  075E  3001               	movlw	1
  5638  075F  0274               	subwf	116,w
  5639  0760  3FFE               	movwi [-2]fsr1
  5640                           
  5641                           ;nrf24l01.c: 311: for (i = 0; i < width; i++) {
  5642                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5643  0761  3000               	movlw	0
  5644  0762  3FFF               	movwi [-1]fsr1
  5645  0763                     l4505:	
  5646                           
  5647                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5648  0763  3F7F               	moviw [-1]fsr1
  5649  0764  00FF               	movwf	127
  5650                           
  5651                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5652  0765  3F7E               	moviw [-2]fsr1
  5653  0766  027F               	subwf	127,w
  5654  0767  1803               	btfsc	3,0
  5655  0768  2F78               	goto	l4507
  5656                           
  5657                           ;nrf24l01.c: 313: RXPacket.Message[i] = nrf24l01SPISend(0);
  5658                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5659  0769  3F7F               	moviw [-1]fsr1
  5660  076A  3E2D               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5661  076B  0084               	movwf	4
  5662  076C  3001               	movlw	1	; select bank2/3
  5663  076D  3001               	movlw	1	; select bank2/3
  5664  076E  0085               	movwf	5
  5665  076F  3000               	movlw	0
  5666  0770  3188  204B  3187   	fcall	_nrf24l01SPISend
  5667  0773  0080               	movwf	0
  5668                           
  5669                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5670  0774  3F7F               	moviw [-1]fsr1
  5671  0775  3E01               	addlw	1
  5672  0776  3FFF               	movwi [-1]fsr1
  5673  0777  2F63               	goto	l4505
  5674  0778                     l4507:	
  5675                           
  5676                           ;nrf24l01.c: 314: };nrf24l01.c: 317: nrf24l01SPIEnd();
  5677  0778  3188  202B  3187   	fcall	_nrf24l01SPIEnd
  5678                           
  5679                           ;nrf24l01.c: 320: PORTAbits.RA0 = 1;
  5680  077B  0020               	movlb	0	; select bank0
  5681  077C  140C               	bsf	12,0	;volatile
  5682                           
  5683                           ;nrf24l01.c: 323: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
  5684  077D  0C66               	rrf	_status+2,w	;volatile
  5685  077E  3907               	andlw	7
  5686  077F  00FF               	movwf	127
  5687  0780  0EFF               	swapf	127,f
  5688  0781  0022               	movlb	2	; select bank2
  5689  0782  082C               	movf	_RXPacket^(0+256),w
  5690  0783  067F               	xorwf	127,w
  5691  0784  398F               	andlw	-113
  5692  0785  067F               	xorwf	127,w
  5693  0786  00AC               	movwf	_RXPacket^(0+256)
  5694                           
  5695                           ;nrf24l01.c: 326: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  5696  0787  3000               	movlw	0
  5697  0788  001E               	movwi fsr1++
  5698  0789  3009               	movlw	9
  5699  078A  3188  205A  3187   	fcall	_nrf24l01Send
  5700  078D  00FF               	movwf	127
  5701  078E  0022               	movlb	2	; select bank2
  5702  078F  082C               	movf	_RXPacket^(0+256),w
  5703  0790  067F               	xorwf	127,w
  5704  0791  39FE               	andlw	-2
  5705  0792  067F               	xorwf	127,w
  5706  0793  00AC               	movwf	_RXPacket^(0+256)
  5707                           
  5708                           ;nrf24l01.c: 328: status.RX = 2;
  5709  0794  3002               	movlw	2
  5710  0795  0020               	movlb	0	; select bank0
  5711  0796  00E5               	movwf	_status+1	;volatile
  5712  0797                     l4517:	
  5713                           
  5714                           ;nrf24l01.c: 329: };nrf24l01.c: 331: if (status.RX == 2){
  5715  0797  3002               	movlw	2
  5716  0798  0665               	xorwf	_status+1,w	;volatile
  5717  0799  1D03               	btfss	3,2
  5718  079A  2FB4               	goto	l4529
  5719                           
  5720                           ;nrf24l01.c: 334: if (RXPacket.packetData.IsACK){
  5721  079B  0022               	movlb	2	; select bank2
  5722  079C  1DAC               	btfss	_RXPacket^(0+256),3
  5723  079D  2FB4               	goto	l4529
  5724                           
  5725                           ;nrf24l01.c: 336: if (status.TX == 4){
  5726  079E  3004               	movlw	4
  5727  079F  0020               	movlb	0	; select bank0
  5728  07A0  0664               	xorwf	_status,w	;volatile
  5729  07A1  1D03               	btfss	3,2
  5730  07A2  2FB4               	goto	l4529
  5731                           
  5732                           ;nrf24l01.c: 338: if (strcmp(RXPacket.Message, TXPacket.Message) == 0){
  5733  07A3  30A1               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  5734  07A4  001E               	movwi fsr1++
  5735  07A5  302D               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5736  07A6  3189  21C4  3187   	fcall	_strcmp
  5737  07A9  0874               	movf	116,w
  5738  07AA  0475               	iorwf	117,w
  5739  07AB  1D03               	btfss	3,2
  5740  07AC  2FB4               	goto	l4529
  5741                           
  5742                           ;nrf24l01.c: 339: status.TX = 0;
  5743  07AD  0020               	movlb	0	; select bank0
  5744  07AE  01E4               	clrf	_status	;volatile
  5745                           
  5746                           ;nrf24l01.c: 340: status.RX = 0;
  5747  07AF  01E5               	clrf	_status+1	;volatile
  5748                           
  5749                           ;nrf24l01.c: 342: nrf24l01SetRXMode(0);
  5750  07B0  3000               	movlw	0
  5751  07B1  318B  230A  3187   	fcall	_nrf24l01SetRXMode
  5752  07B4                     l4529:	
  5753                           
  5754                           ;nrf24l01.c: 344: };nrf24l01.c: 345: };nrf24l01.c: 346: };nrf24l01.c: 347: };nrf24l01.c:
      +                           349: if (status.RX == 2){
  5755  07B4  3002               	movlw	2
  5756  07B5  0020               	movlb	0	; select bank0
  5757  07B6  0665               	xorwf	_status+1,w	;volatile
  5758  07B7  1D03               	btfss	3,2
  5759  07B8  2FC1               	goto	l316
  5760                           
  5761                           ;nrf24l01.c: 351: if (RXPacket.packetData.ACKRequest){
  5762  07B9  0022               	movlb	2	; select bank2
  5763  07BA  1D2C               	btfss	_RXPacket^(0+256),2
  5764  07BB  2FC1               	goto	l316
  5765                           
  5766                           ;nrf24l01.c: 353: RXPacket.packetData.ACKRequest = 0;
  5767  07BC  112C               	bcf	_RXPacket^(0+256),2
  5768                           
  5769                           ;nrf24l01.c: 354: RXPacket.packetData.IsACK = 1;
  5770  07BD  15AC               	bsf	_RXPacket^(0+256),3
  5771                           
  5772                           ;nrf24l01.c: 356: nrf24l01SendTXBuffer(&RXPacket);
  5773  07BE  302C               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  5774  07BF  318B  23CA         	fcall	_nrf24l01SendTXBuffer
  5775  07C1                     l316:	
  5776                           
  5777                           ; _nrf24l01Service: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  5778  07C1  317E               	addfsr 1,-2
  5779  07C2  0008               	return
  5780  07C3                     __end_of_nrf24l01Service:	
  5781                           
  5782                           	psect	text15
  5783  09C4                     __ptext15:	
  5784 ;; *************** function _strcmp *****************
  5785 ;; Defined at:
  5786 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  5787 ;; Parameters:    Size  Location     Type
  5788 ;;  s1              1    wreg     PTR const unsigned char 
  5789 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5790 ;;  s2              1  [STACK] PTR const unsigned char 
  5791 ;;		 -> TXPacket.Message(32), TXPacket(33), 
  5792 ;; Auto vars:     Size  Location     Type
  5793 ;;  s1              1  [STACK] PTR const unsigned char 
  5794 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5795 ;;  r               1  [STACK] char 
  5796 ;; Return value:  Size  Location     Type
  5797 ;;                  2  [STACK] int 
  5798 ;; Registers used:
  5799 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  5800 ;; Tracked objects:
  5801 ;;		On entry : 1F/0
  5802 ;;		On exit  : 0/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5809 ;;Total ram usage:        0 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; Hardware stack levels required when called:    7
  5812 ;; This function calls:
  5813 ;;		Nothing
  5814 ;; This function is called by:
  5815 ;;		_nrf24l01Service
  5816 ;; This function uses a reentrant model
  5817 ;;
  5818                           
  5819                           
  5820                           ;psect for function _strcmp
  5821  09C4                     _strcmp:	
  5822                           
  5823                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5824  09C4  3142               	addfsr 1,2
  5825                           
  5826                           ;incstack = 0
  5827 ;; hardware stack exceeded
  5828                           ; Regs used in _strcmp: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  5829                           ;strcmp@s1 stored from wreg
  5830                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5831  09C5  3FFE               	movwi [-2]fsr1
  5832  09C6  29D4               	goto	l4295
  5833  09C7                     l4297:	
  5834                           
  5835                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5836  09C7  3F7E               	moviw [-2]fsr1
  5837  09C8  0084               	movwf	4
  5838  09C9  3001               	movlw	1	; select bank2/3
  5839  09CA  0085               	movwf	5
  5840  09CB  0800               	movf	0,w
  5841  09CC  1903               	btfsc	3,2
  5842  09CD  29E6               	goto	l4299
  5843                           
  5844                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5845  09CE  3F7E               	moviw [-2]fsr1
  5846  09CF  3E01               	addlw	1
  5847  09D0  3FFE               	movwi [-2]fsr1
  5848                           
  5849                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5850  09D1  3F7D               	moviw [-3]fsr1
  5851  09D2  3E01               	addlw	1
  5852  09D3  3FFD               	movwi [-3]fsr1
  5853  09D4                     l4295:	
  5854                           
  5855                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5856  09D4  3F7D               	moviw [-3]fsr1
  5857  09D5  0084               	movwf	4
  5858  09D6  3001               	movlw	1	; select bank2/3
  5859  09D7  0085               	movwf	5
  5860  09D8  0800               	movf	0,w
  5861  09D9  00FF               	movwf	127
  5862                           
  5863                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5864  09DA  3F7E               	moviw [-2]fsr1
  5865  09DB  0084               	movwf	4
  5866  09DC  3001               	movlw	1	; select bank2/3
  5867  09DD  0085               	movwf	5
  5868  09DE  0800               	movf	0,w
  5869  09DF  00F4               	movwf	116
  5870  09E0  087F               	movf	127,w
  5871  09E1  0274               	subwf	116,w
  5872                           
  5873                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5874  09E2  3FFF               	movwi [-1]fsr1
  5875  09E3  0889               	movf	9,f
  5876  09E4  1903               	btfsc	3,2
  5877  09E5  29C7               	goto	l4297
  5878  09E6                     l4299:	
  5879                           
  5880                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5881  09E6  3F7F               	moviw [-1]fsr1
  5882  09E7  00F4               	movwf	116
  5883  09E8  01F5               	clrf	117
  5884  09E9  1BF4               	btfsc	116,7
  5885  09EA  03F5               	decf	117,f
  5886                           
  5887                           ; _strcmp: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsiz
      +                          e = 1, vargsize = 0
  5888  09EB  317D               	addfsr 1,-3
  5889  09EC  0008               	return
  5890  09ED                     __end_of_strcmp:	
  5891                           
  5892                           	psect	text16
  5893  0BCA                     __ptext16:	
  5894 ;; *************** function _nrf24l01SendTXBuffer *****************
  5895 ;; Defined at:
  5896 ;;		line 236 in file "nrf24l01.c"
  5897 ;; Parameters:    Size  Location     Type
  5898 ;;  packet          1    wreg     PTR struct .
  5899 ;;		 -> TXPacket(33), RXPacket(33), 
  5900 ;; Auto vars:     Size  Location     Type
  5901 ;;  packet          1  [STACK] PTR struct .
  5902 ;;		 -> TXPacket(33), RXPacket(33), 
  5903 ;;  i               1  [STACK] unsigned char 
  5904 ;;  width           1  [STACK] unsigned char 
  5905 ;; Return value:  Size  Location     Type
  5906 ;;                  1    wreg      void 
  5907 ;; Registers used:
  5908 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11, pclath
  5909 ;; Tracked objects:
  5910 ;;		On entry : 1D/0
  5911 ;;		On exit  : 1F/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5918 ;;Total ram usage:        0 bytes
  5919 ;; Hardware stack levels used:    1
  5920 ;; Hardware stack levels required when called:   10
  5921 ;; This function calls:
  5922 ;;		_nrf24l01SPIEnd
  5923 ;;		_nrf24l01SPISend
  5924 ;;		_nrf24l01SPIStart
  5925 ;;		_nrf24l01SetRXMode
  5926 ;;		_strlen
  5927 ;; This function is called by:
  5928 ;;		_nrf24l01Service
  5929 ;; This function uses a reentrant model
  5930 ;;
  5931                           
  5932                           
  5933                           ;psect for function _nrf24l01SendTXBuffer
  5934  0BCA                     _nrf24l01SendTXBuffer:	
  5935                           
  5936                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5937  0BCA  3143               	addfsr 1,3
  5938                           
  5939                           ;incstack = 0
  5940 ;; hardware stack exceeded
  5941                           ; Regs used in _nrf24l01SendTXBuffer: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11+
      +                          pclath]
  5942                           ;nrf24l01SendTXBuffer@packet stored from wreg
  5943                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  5944  0BCB  3FFD               	movwi [-3]fsr1
  5945                           
  5946                           ;nrf24l01.c: 238: lastTXPacket = packet;
  5947                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  5948  0BCC  3F7D               	moviw [-3]fsr1
  5949  0BCD  0020               	movlb	0	; select bank0
  5950  0BCE  00E9               	movwf	_lastTXPacket
  5951                           
  5952                           ;nrf24l01.c: 240: unsigned char i;;nrf24l01.c: 243: nrf24l01SetRXMode(0);
  5953  0BCF  3000               	movlw	0
  5954  0BD0  318B  230A  318B   	fcall	_nrf24l01SetRXMode
  5955                           
  5956                           ;nrf24l01.c: 246: nrf24l01SPIStart();
  5957  0BD3  3188  2034  318B   	fcall	_nrf24l01SPIStart
  5958                           
  5959                           ;nrf24l01.c: 249: nrf24l01SPISend((unsigned) 0b10110000);
  5960  0BD6  30B0               	movlw	176
  5961  0BD7  3188  204B  318B   	fcall	_nrf24l01SPISend
  5962                           
  5963                           ;nrf24l01.c: 251: nrf24l01SPISend(lastTXPacket->packetData.byte);
  5964  0BDA  0020               	movlb	0	; select bank0
  5965  0BDB  0869               	movf	_lastTXPacket,w
  5966  0BDC  0084               	movwf	4
  5967  0BDD  3001               	movlw	1	; select bank2/3
  5968  0BDE  3001               	movlw	1	; select bank2/3
  5969  0BDF  0085               	movwf	5
  5970  0BE0  0800               	movf	0,w
  5971  0BE1  3188  204B  318B   	fcall	_nrf24l01SPISend
  5972                           
  5973                           ;nrf24l01.c: 255: unsigned char width = strlen(lastTXPacket->Message);
  5974  0BE4  0020               	movlb	0	; select bank0
  5975  0BE5  0869               	movf	_lastTXPacket,w
  5976  0BE6  3E01               	addlw	1
  5977  0BE7  3189  2100  318B   	fcall	_strlen
  5978  0BEA  0874               	movf	116,w
  5979                           
  5980                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  5981  0BEB  3FFF               	movwi [-1]fsr1
  5982                           
  5983                           ;nrf24l01.c: 257: for (i = 0; i < width; i++) {
  5984                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  5985  0BEC  3000               	movlw	0
  5986  0BED  3FFE               	movwi [-2]fsr1
  5987  0BEE                     l4279:	
  5988                           
  5989                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  5990  0BEE  3F7E               	moviw [-2]fsr1
  5991  0BEF  00FF               	movwf	127
  5992                           
  5993                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  5994  0BF0  3F7F               	moviw [-1]fsr1
  5995  0BF1  027F               	subwf	127,w
  5996  0BF2  1803               	btfsc	3,0
  5997  0BF3  2C05               	goto	l4281
  5998                           
  5999                           ;nrf24l01.c: 258: nrf24l01SPISend(lastTXPacket->Message[i]);
  6000                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6001  0BF4  3F7E               	moviw [-2]fsr1
  6002  0BF5  0020               	movlb	0	; select bank0
  6003  0BF6  0769               	addwf	_lastTXPacket,w
  6004  0BF7  00FF               	movwf	127
  6005  0BF8  0A7F               	incf	127,w
  6006  0BF9  0084               	movwf	4
  6007  0BFA  3001               	movlw	1	; select bank2/3
  6008  0BFB  3001               	movlw	1	; select bank2/3
  6009  0BFC  0085               	movwf	5
  6010  0BFD  0800               	movf	0,w
  6011  0BFE  3188  204B  318B   	fcall	_nrf24l01SPISend
  6012                           
  6013                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6014  0C01  3F7E               	moviw [-2]fsr1
  6015  0C02  3E01               	addlw	1
  6016  0C03  3FFE               	movwi [-2]fsr1
  6017  0C04  2BEE               	goto	l4279
  6018  0C05                     l4281:	
  6019                           
  6020                           ;nrf24l01.c: 259: };nrf24l01.c: 262: nrf24l01SPIEnd();
  6021  0C05  3188  202B  318B   	fcall	_nrf24l01SPIEnd
  6022                           
  6023                           ;nrf24l01.c: 265: PORTAbits.RA0 = 1;
  6024  0C08  0020               	movlb	0	; select bank0
  6025  0C09  140C               	bsf	12,0	;volatile
  6026                           
  6027                           ;nrf24l01.c: 266: _delay((unsigned long)((12)*(32000000/4000000.0)));
  6028  0C0A  3020               	movlw	32
  6029  0C0B                     u5337:	
  6030  0C0B  0B89               	decfsz	9,f
  6031  0C0C  2C0B               	goto	u5337
  6032                           
  6033                           ;nrf24l01.c: 267: PORTAbits.RA0 = 0;
  6034  0C0D  0020               	movlb	0	; select bank0
  6035  0C0E  100C               	bcf	12,0	;volatile
  6036                           
  6037                           ; _nrf24l01SendTXBuffer: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 0, argsize = 0, vargsize = 0
  6038  0C0F  317D               	addfsr 1,-3
  6039  0C10  0008               	return
  6040  0C11                     __end_of_nrf24l01SendTXBuffer:	
  6041                           
  6042                           	psect	text17
  6043  0900                     __ptext17:	
  6044 ;; *************** function _strlen *****************
  6045 ;; Defined at:
  6046 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  6047 ;; Parameters:    Size  Location     Type
  6048 ;;  s               1    wreg     PTR const unsigned char 
  6049 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6050 ;;		 -> RXPacket(33), romDataMap(28), 
  6051 ;; Auto vars:     Size  Location     Type
  6052 ;;  s               1  [STACK] PTR const unsigned char 
  6053 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6054 ;;		 -> RXPacket(33), romDataMap(28), 
  6055 ;;  cp              1  [STACK] PTR const unsigned char 
  6056 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6057 ;;		 -> RXPacket(33), romDataMap(28), 
  6058 ;; Return value:  Size  Location     Type
  6059 ;;                  2  [STACK] unsigned int 
  6060 ;; Registers used:
  6061 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  6062 ;; Tracked objects:
  6063 ;;		On entry : 1F/0
  6064 ;;		On exit  : 0/0
  6065 ;;		Unchanged: 0/0
  6066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6071 ;;Total ram usage:        0 bytes
  6072 ;; Hardware stack levels used:    1
  6073 ;; Hardware stack levels required when called:    7
  6074 ;; This function calls:
  6075 ;;		Nothing
  6076 ;; This function is called by:
  6077 ;;		_nrf24l01GetPipe
  6078 ;;		_nrf24l01SendTXBuffer
  6079 ;; This function uses a reentrant model
  6080 ;;
  6081                           
  6082                           
  6083                           ;psect for function _strlen
  6084  0900                     _strlen:	
  6085                           
  6086                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6087  0900  3142               	addfsr 1,2
  6088                           
  6089                           ;incstack = 0
  6090 ;; hardware stack exceeded
  6091                           ; Regs used in _strlen: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  6092                           ;strlen@s stored from wreg
  6093                           ;stkvar	strlen@s @ sp[(-2)+0]
  6094  0901  3FFE               	movwi [-2]fsr1
  6095                           
  6096                           ;stkvar	strlen@s @ sp[(-2)+0]
  6097  0902  0806               	movf	6,w
  6098  0903  0084               	movwf	4
  6099  0904  0807               	movf	7,w
  6100  0905  0085               	movwf	5
  6101  0906  313E               	addfsr 0,-2
  6102                           
  6103                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6104  0907  3F00               	moviw [0]fsr0
  6105  0908  3FFF               	movwi [-1]fsr1
  6106  0909                     l3881:	
  6107                           
  6108                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6109  0909  3F7F               	moviw [-1]fsr1
  6110  090A  0084               	movwf	4
  6111  090B  3001               	movlw	1	; select bank2/3
  6112  090C  0085               	movwf	5
  6113  090D  0800               	movf	0,w
  6114  090E  1903               	btfsc	3,2
  6115  090F  2914               	goto	l3883
  6116                           
  6117                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6118  0910  3F7F               	moviw [-1]fsr1
  6119  0911  3E01               	addlw	1
  6120  0912  3FFF               	movwi [-1]fsr1
  6121  0913  2909               	goto	l3881
  6122  0914                     l3883:	
  6123                           
  6124                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6125  0914  3F7F               	moviw [-1]fsr1
  6126  0915  00FF               	movwf	127
  6127                           
  6128                           ;stkvar	strlen@s @ sp[(-2)+0]
  6129  0916  3F7E               	moviw [-2]fsr1
  6130  0917  027F               	subwf	127,w
  6131  0918  00F4               	movwf	116
  6132  0919  01F5               	clrf	117
  6133  091A  1BF4               	btfsc	116,7
  6134  091B  03F5               	decf	117,f
  6135                           
  6136                           ; _strlen: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsiz
      +                          e = 0, vargsize = 0
  6137  091C  317E               	addfsr 1,-2
  6138  091D  0008               	return
  6139  091E                     __end_of_strlen:	
  6140                           
  6141                           	psect	text18
  6142  0B0A                     __ptext18:	
  6143 ;; *************** function _nrf24l01SetRXMode *****************
  6144 ;; Defined at:
  6145 ;;		line 50 in file "nrf24l01.c"
  6146 ;; Parameters:    Size  Location     Type
  6147 ;;  rxMode          1    wreg     unsigned char 
  6148 ;; Auto vars:     Size  Location     Type
  6149 ;;  rxMode          1  [STACK] unsigned char 
  6150 ;; Return value:  Size  Location     Type
  6151 ;;                  1    wreg      void 
  6152 ;; Registers used:
  6153 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+11, pclath
  6154 ;; Tracked objects:
  6155 ;;		On entry : 1F/0
  6156 ;;		On exit  : 0/0
  6157 ;;		Unchanged: 0/0
  6158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6163 ;;Total ram usage:        0 bytes
  6164 ;; Hardware stack levels used:    1
  6165 ;; Hardware stack levels required when called:    9
  6166 ;; This function calls:
  6167 ;;		_nrf24l01Send
  6168 ;; This function is called by:
  6169 ;;		_nrf24l01ISR
  6170 ;;		_nrf24l01SendTXBuffer
  6171 ;;		_nrf24l01Service
  6172 ;; This function uses a reentrant model
  6173 ;;
  6174                           
  6175                           
  6176                           ;psect for function _nrf24l01SetRXMode
  6177  0B0A                     _nrf24l01SetRXMode:	
  6178                           
  6179                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6180  0B0A  3141               	addfsr 1,1
  6181                           
  6182                           ;incstack = 0
  6183 ;; hardware stack exceeded
  6184                           ; Regs used in _nrf24l01SetRXMode: [wreg+fsr1l+fsr1h+status,2-btemp+0+btemp+11+pclath]
  6185                           ;nrf24l01SetRXMode@rxMode stored from wreg
  6186                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6187  0B0B  3FFF               	movwi [-1]fsr1
  6188                           
  6189                           ;nrf24l01.c: 53: if (rxMode){
  6190                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6191  0B0C  3F7F               	moviw [-1]fsr1
  6192  0B0D  1903               	btfsc	3,2
  6193  0B0E  2B14               	goto	l3893
  6194                           
  6195                           ;nrf24l01.c: 54: if (status.TX == 2){
  6196  0B0F  3002               	movlw	2
  6197  0B10  0020               	movlb	0	; select bank0
  6198  0B11  0664               	xorwf	_status,w	;volatile
  6199  0B12  1903               	btfsc	3,2
  6200  0B13  2B43               	goto	l261
  6201  0B14                     l3893:	
  6202                           
  6203                           ;nrf24l01.c: 56: };nrf24l01.c: 57: };nrf24l01.c: 60: if (!rxMode){
  6204                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6205  0B14  3F7F               	moviw [-1]fsr1
  6206  0B15  1D03               	btfss	3,2
  6207  0B16  2B1C               	goto	l3899
  6208                           
  6209                           ;nrf24l01.c: 61: if (status.TX == 4){
  6210  0B17  3004               	movlw	4
  6211  0B18  0020               	movlb	0	; select bank0
  6212  0B19  0664               	xorwf	_status,w	;volatile
  6213  0B1A  1903               	btfsc	3,2
  6214  0B1B  2B43               	goto	l261
  6215  0B1C                     l3899:	
  6216                           
  6217                           ;nrf24l01.c: 63: };nrf24l01.c: 64: };nrf24l01.c: 70: if (status.configRegister.PRIM_RX !
      +                          = rxMode){
  6218                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6219  0B1C  3F7F               	moviw [-1]fsr1
  6220  0B1D  00FF               	movwf	127
  6221  0B1E  0020               	movlb	0	; select bank0
  6222  0B1F  0867               	movf	_status+3,w	;volatile
  6223  0B20  3901               	andlw	1
  6224  0B21  067F               	xorwf	127,w
  6225  0B22  1903               	skipnz
  6226  0B23  2B43               	goto	l261
  6227                           
  6228                           ;nrf24l01.c: 73: PORTAbits.RA0 = 0;
  6229  0B24  100C               	bcf	12,0	;volatile
  6230                           
  6231                           ;nrf24l01.c: 74: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6232  0B25  30C0               	movlw	192
  6233  0B26                     u5347:	
  6234  0B26  3200               	nop2
  6235  0B27  0B89               	decfsz	9,f
  6236  0B28  2B26               	goto	u5347
  6237                           
  6238                           ;nrf24l01.c: 77: status.configRegister.PRIM_RX = rxMode;
  6239                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6240  0B29  3F7F               	moviw [-1]fsr1
  6241  0B2A  3901               	andlw	1
  6242  0B2B  0020               	movlb	0	; select bank0
  6243  0B2C  1D03               	skipz
  6244  0B2D  1467               	bsf	_status+3,0	;volatile
  6245  0B2E  1903               	skipnz
  6246  0B2F  1067               	bcf	_status+3,0	;volatile
  6247                           
  6248                           ;nrf24l01.c: 78: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configRegi
      +                          ster.byte);
  6249  0B30  0867               	movf	_status+3,w	;volatile
  6250  0B31  001E               	movwi fsr1++
  6251  0B32  3020               	movlw	32
  6252  0B33  3188  205A  318B   	fcall	_nrf24l01Send
  6253                           
  6254                           ;nrf24l01.c: 81: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6255  0B36  30C0               	movlw	192
  6256  0B37                     u5357:	
  6257  0B37  3200               	nop2
  6258  0B38  0B89               	decfsz	9,f
  6259  0B39  2B37               	goto	u5357
  6260                           
  6261                           ;nrf24l01.c: 84: if (rxMode){
  6262                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6263  0B3A  3F7F               	moviw [-1]fsr1
  6264  0B3B  1903               	btfsc	3,2
  6265  0B3C  2B43               	goto	l261
  6266                           
  6267                           ;nrf24l01.c: 85: PORTAbits.RA0 = 1;
  6268  0B3D  0020               	movlb	0	; select bank0
  6269  0B3E  140C               	bsf	12,0	;volatile
  6270                           
  6271                           ;nrf24l01.c: 86: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6272  0B3F  30C0               	movlw	192
  6273  0B40                     u5367:	
  6274  0B40  3200               	nop2
  6275  0B41  0B89               	decfsz	9,f
  6276  0B42  2B40               	goto	u5367
  6277  0B43                     l261:	
  6278                           
  6279                           ; _nrf24l01SetRXMode: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
  6280  0B43  317F               	addfsr 1,-1
  6281  0B44  0008               	return
  6282  0B45                     __end_of_nrf24l01SetRXMode:	
  6283                           
  6284                           	psect	text19
  6285  085A                     __ptext19:	
  6286 ;; *************** function _nrf24l01Send *****************
  6287 ;; Defined at:
  6288 ;;		line 11 in file "nrf24l01.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;  command         1    wreg     unsigned char 
  6291 ;;  data            1  [STACK] unsigned char 
  6292 ;; Auto vars:     Size  Location     Type
  6293 ;;  command         1  [STACK] unsigned char 
  6294 ;; Return value:  Size  Location     Type
  6295 ;;                  1    wreg      unsigned char 
  6296 ;; Registers used:
  6297 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath
  6298 ;; Tracked objects:
  6299 ;;		On entry : 0/0
  6300 ;;		On exit  : 1F/1
  6301 ;;		Unchanged: 0/0
  6302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6307 ;;Total ram usage:        0 bytes
  6308 ;; Hardware stack levels used:    1
  6309 ;; Hardware stack levels required when called:    8
  6310 ;; This function calls:
  6311 ;;		_nrf24l01SPIEnd
  6312 ;;		_nrf24l01SPISend
  6313 ;;		_nrf24l01SPIStart
  6314 ;; This function is called by:
  6315 ;;		_nrf24l01SetRXMode
  6316 ;;		_nrf24l01SetRXPipe
  6317 ;;		_nrf24l01ISR
  6318 ;;		_nrf24l01Service
  6319 ;;		_nrf24l01InitRegisters
  6320 ;;		_nrf24l01ChangeTXPower
  6321 ;; This function uses a reentrant model
  6322 ;;
  6323                           
  6324                           
  6325                           ;psect for function _nrf24l01Send
  6326  085A                     _nrf24l01Send:	
  6327                           
  6328                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6329  085A  3141               	addfsr 1,1
  6330                           
  6331                           ;incstack = 0
  6332 ;; hardware stack exceeded
  6333                           ; Regs used in _nrf24l01Send: [wreg+fsr1l+fsr1h+status,2+status,0+pclath]
  6334                           ;nrf24l01Send@command stored from wreg
  6335                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6336  085B  3FFF               	movwi [-1]fsr1
  6337                           
  6338                           ;nrf24l01.c: 14: nrf24l01SPIStart();
  6339  085C  3188  2034  3188   	fcall	_nrf24l01SPIStart
  6340                           
  6341                           ;nrf24l01.c: 17: nrf24l01SPISend(command);
  6342                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6343  085F  3F7F               	moviw [-1]fsr1
  6344  0860  3188  204B  3188   	fcall	_nrf24l01SPISend
  6345                           
  6346                           ;nrf24l01.c: 20: data = nrf24l01SPISend(data);
  6347                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6348  0863  3F7E               	moviw [-2]fsr1
  6349  0864  3188  204B  3188   	fcall	_nrf24l01SPISend
  6350                           
  6351                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6352  0867  3FFE               	movwi [-2]fsr1
  6353                           
  6354                           ;nrf24l01.c: 23: nrf24l01SPIEnd();
  6355  0868  3188  202B         	fcall	_nrf24l01SPIEnd
  6356                           
  6357                           ;nrf24l01.c: 25: return data;
  6358                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6359  086A  3F7E               	moviw [-2]fsr1
  6360                           
  6361                           ; _nrf24l01Send: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, 
      +                          argsize = 1, vargsize = 0
  6362  086B  317E               	addfsr 1,-2
  6363  086C  0008               	return
  6364  086D                     __end_of_nrf24l01Send:	
  6365                           
  6366                           	psect	text20
  6367  0834                     __ptext20:	
  6368 ;; *************** function _nrf24l01SPIStart *****************
  6369 ;; Defined at:
  6370 ;;		line 68 in file "interface.c"
  6371 ;; Parameters:    Size  Location     Type
  6372 ;;		None
  6373 ;; Auto vars:     Size  Location     Type
  6374 ;;		None
  6375 ;; Return value:  Size  Location     Type
  6376 ;;                  1    wreg      void 
  6377 ;; Registers used:
  6378 ;;		wreg
  6379 ;; Tracked objects:
  6380 ;;		On entry : 0/0
  6381 ;;		On exit  : 0/0
  6382 ;;		Unchanged: 0/0
  6383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6388 ;;Total ram usage:        0 bytes
  6389 ;; Hardware stack levels used:    1
  6390 ;; Hardware stack levels required when called:    7
  6391 ;; This function calls:
  6392 ;;		Nothing
  6393 ;; This function is called by:
  6394 ;;		_nrf24l01Send
  6395 ;;		_nrf24l01SetTXPipe
  6396 ;;		_nrf24l01SendTXBuffer
  6397 ;;		_nrf24l01Service
  6398 ;;		_nrf24l01InitRegisters
  6399 ;; This function uses a reentrant model
  6400 ;;
  6401                           
  6402                           
  6403                           ;psect for function _nrf24l01SPIStart
  6404  0834                     _nrf24l01SPIStart:	
  6405                           
  6406                           ;interface.c: 69: PIE0bits.INTE = 0;
  6407                           
  6408                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6409                           ;incstack = 0
  6410 ;; hardware stack exceeded
  6411                           ; Regs used in _nrf24l01SPIStart: [wreg]
  6412  0834  0021               	movlb	1	; select bank1
  6413  0835  1010               	bcf	16,0	;volatile
  6414                           
  6415                           ;interface.c: 70: PORTAbits.RA1 = 0;
  6416  0836  0020               	movlb	0	; select bank0
  6417  0837  108C               	bcf	12,1	;volatile
  6418                           
  6419                           ;interface.c: 71: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6420  0838  301A               	movlw	26
  6421  0839                     u5377:	
  6422  0839  0B89               	decfsz	9,f
  6423  083A  2839               	goto	u5377
  6424  083B  3200               	nop2
  6425                           
  6426                           ; _nrf24l01SPIStart: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           0, argsize = 0, vargsize = 0
  6427  083C  0008               	return
  6428  083D                     __end_of_nrf24l01SPIStart:	
  6429                           
  6430                           	psect	text21
  6431  084B                     __ptext21:	
  6432 ;; *************** function _nrf24l01SPISend *****************
  6433 ;; Defined at:
  6434 ;;		line 56 in file "interface.c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;  data            1    wreg     unsigned char 
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;  data            1  [STACK] unsigned char 
  6439 ;; Return value:  Size  Location     Type
  6440 ;;                  1    wreg      unsigned char 
  6441 ;; Registers used:
  6442 ;;		wreg, fsr1l, fsr1h
  6443 ;; Tracked objects:
  6444 ;;		On entry : 0/0
  6445 ;;		On exit  : 1F/4
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;Total ram usage:        0 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; Hardware stack levels required when called:    7
  6455 ;; This function calls:
  6456 ;;		Nothing
  6457 ;; This function is called by:
  6458 ;;		_nrf24l01Send
  6459 ;;		_nrf24l01SetTXPipe
  6460 ;;		_nrf24l01SendTXBuffer
  6461 ;;		_nrf24l01Service
  6462 ;;		_nrf24l01InitRegisters
  6463 ;; This function uses a reentrant model
  6464 ;;
  6465                           
  6466                           
  6467                           ;psect for function _nrf24l01SPISend
  6468  084B                     _nrf24l01SPISend:	
  6469                           
  6470                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6471  084B  3141               	addfsr 1,1
  6472                           
  6473                           ;incstack = 0
  6474 ;; hardware stack exceeded
  6475                           ; Regs used in _nrf24l01SPISend: [wreg+fsr1l+fsr1h]
  6476                           ;nrf24l01SPISend@data stored from wreg
  6477                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6478  084C  3FFF               	movwi [-1]fsr1
  6479                           
  6480                           ;interface.c: 57: SSP1BUF = data;
  6481                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6482  084D  3F7F               	moviw [-1]fsr1
  6483  084E  0024               	movlb	4	; select bank4
  6484  084F  0091               	movwf	17	;volatile
  6485                           
  6486                           ;interface.c: 59: PORTCbits.RC4 = 1;
  6487  0850  0020               	movlb	0	; select bank0
  6488  0851  160E               	bsf	14,4	;volatile
  6489  0852                     l47:	
  6490                           ;interface.c: 61: while (!SSP1STATbits.BF){
  6491                           
  6492  0852  0024               	movlb	4	; select bank4
  6493  0853  1814               	btfsc	20,0	;volatile
  6494  0854  2857               	goto	l3639
  6495                           
  6496                           ;interface.c: 62: __nop();
  6497  0855  0000               	nop
  6498  0856  2852               	goto	l47
  6499  0857                     l3639:	
  6500                           
  6501                           ;interface.c: 63: };interface.c: 65: return SSP1BUF;
  6502  0857  0811               	movf	17,w	;volatile
  6503                           
  6504                           ; _nrf24l01SPISend: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  6505  0858  317F               	addfsr 1,-1
  6506  0859  0008               	return
  6507  085A                     __end_of_nrf24l01SPISend:	
  6508                           
  6509                           	psect	text22
  6510  082B                     __ptext22:	
  6511 ;; *************** function _nrf24l01SPIEnd *****************
  6512 ;; Defined at:
  6513 ;;		line 74 in file "interface.c"
  6514 ;; Parameters:    Size  Location     Type
  6515 ;;		None
  6516 ;; Auto vars:     Size  Location     Type
  6517 ;;		None
  6518 ;; Return value:  Size  Location     Type
  6519 ;;                  1    wreg      void 
  6520 ;; Registers used:
  6521 ;;		wreg
  6522 ;; Tracked objects:
  6523 ;;		On entry : 0/0
  6524 ;;		On exit  : 1F/1
  6525 ;;		Unchanged: 0/0
  6526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6531 ;;Total ram usage:        0 bytes
  6532 ;; Hardware stack levels used:    1
  6533 ;; Hardware stack levels required when called:    7
  6534 ;; This function calls:
  6535 ;;		Nothing
  6536 ;; This function is called by:
  6537 ;;		_nrf24l01Send
  6538 ;;		_nrf24l01SetTXPipe
  6539 ;;		_nrf24l01SendTXBuffer
  6540 ;;		_nrf24l01Service
  6541 ;;		_nrf24l01InitRegisters
  6542 ;; This function uses a reentrant model
  6543 ;;
  6544                           
  6545                           
  6546                           ;psect for function _nrf24l01SPIEnd
  6547  082B                     _nrf24l01SPIEnd:	
  6548                           
  6549                           ;interface.c: 75: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6550                           
  6551                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6552                           ;incstack = 0
  6553 ;; hardware stack exceeded
  6554                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  6555  082B  301A               	movlw	26
  6556  082C                     u5387:	
  6557  082C  0B89               	decfsz	9,f
  6558  082D  282C               	goto	u5387
  6559  082E  3200               	nop2
  6560                           
  6561                           ;interface.c: 76: PORTAbits.RA1 = 1;
  6562  082F  0020               	movlb	0	; select bank0
  6563  0830  148C               	bsf	12,1	;volatile
  6564                           
  6565                           ;interface.c: 77: PIE0bits.INTE = 1;
  6566  0831  0021               	movlb	1	; select bank1
  6567  0832  1410               	bsf	16,0	;volatile
  6568                           
  6569                           ; _nrf24l01SPIEnd: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  6570  0833  0008               	return
  6571  0834                     __end_of_nrf24l01SPIEnd:	
  6572                           
  6573                           	psect	text23
  6574  0AA3                     __ptext23:	
  6575 ;; *************** function _memset *****************
  6576 ;; Defined at:
  6577 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6578 ;; Parameters:    Size  Location     Type
  6579 ;;  p1              2  [STACK] PTR void 
  6580 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6581 ;;  c               2  [STACK] int 
  6582 ;;  n               2  [STACK] unsigned int 
  6583 ;; Auto vars:     Size  Location     Type
  6584 ;;  p               2  [STACK] PTR unsigned char 
  6585 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6586 ;; Return value:  Size  Location     Type
  6587 ;;                  2  [STACK] PTR void 
  6588 ;; Registers used:
  6589 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+8, btemp+9, btemp+11
  6590 ;; Tracked objects:
  6591 ;;		On entry : 1E/1
  6592 ;;		On exit  : 0/0
  6593 ;;		Unchanged: 0/0
  6594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;Total ram usage:        0 bytes
  6600 ;; Hardware stack levels used:    1
  6601 ;; Hardware stack levels required when called:    7
  6602 ;; This function calls:
  6603 ;;		Nothing
  6604 ;; This function is called by:
  6605 ;;		_sendMessage
  6606 ;;		_nrf24l01Service
  6607 ;; This function uses a reentrant model
  6608 ;;
  6609                           
  6610                           
  6611                           ;psect for function _memset
  6612  0AA3                     _memset:	
  6613                           
  6614                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6615  0AA3  3142               	addfsr 1,2
  6616                           
  6617                           ;stkvar	memset@p1 @ sp[(-2)+-2]
  6618                           
  6619                           ;incstack = 0
  6620 ;; hardware stack exceeded
  6621                           ; Regs used in _memset: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+8+btemp+9+btemp+1
      +                          1]
  6622  0AA4  0806               	movf	6,w
  6623  0AA5  0084               	movwf	4
  6624  0AA6  0807               	movf	7,w
  6625  0AA7  0085               	movwf	5
  6626  0AA8  313C               	addfsr 0,-4
  6627                           
  6628                           ;stkvar	memset@p @ sp[(-2)+0]
  6629  0AA9  3F00               	moviw [0]fsr0
  6630  0AAA  3FFE               	movwi [-2]fsr1
  6631  0AAB  3F01               	moviw [1]fsr0
  6632  0AAC  3FFF               	movwi [-1]fsr1
  6633  0AAD                     l4191:	
  6634                           
  6635                           ;stkvar	memset@n @ sp[(-2)+-6]
  6636  0AAD  3F78               	moviw [-8]fsr1
  6637  0AAE  00F4               	movwf	116
  6638  0AAF  3001               	movlw	1
  6639  0AB0  0274               	subwf	116,w
  6640  0AB1  3FF8               	movwi [-8]fsr1
  6641  0AB2  3F79               	moviw [-7]fsr1
  6642  0AB3  00F4               	movwf	116
  6643  0AB4  3000               	movlw	0
  6644  0AB5  3B74               	subwfb	116,w
  6645  0AB6  3FF9               	movwi [-7]fsr1
  6646  0AB7  3F78               	moviw [-8]fsr1
  6647  0AB8  3AFF               	xorlw	255
  6648  0AB9  00F4               	movwf	116
  6649  0ABA  3F79               	moviw [-7]fsr1
  6650  0ABB  3AFF               	xorlw	255
  6651  0ABC  04F4               	iorwf	116,f
  6652  0ABD  1903               	btfsc	3,2
  6653  0ABE  2AD3               	goto	l964
  6654                           
  6655                           ;stkvar	memset@c @ sp[(-2)+-4]
  6656  0ABF  3F7A               	moviw [-6]fsr1
  6657  0AC0  00FF               	movwf	127
  6658                           
  6659                           ;stkvar	memset@p @ sp[(-2)+0]
  6660  0AC1  3F7E               	moviw [-2]fsr1
  6661  0AC2  00FC               	movwf	124
  6662  0AC3  3F7F               	moviw [-1]fsr1
  6663  0AC4  00FD               	movwf	125
  6664  0AC5  087C               	movf	124,w
  6665  0AC6  0084               	movwf	4
  6666  0AC7  087D               	movf	125,w
  6667  0AC8  0085               	movwf	5
  6668  0AC9  087F               	movf	127,w
  6669  0ACA  0080               	movwf	0
  6670                           
  6671                           ;stkvar	memset@p @ sp[(-2)+0]
  6672  0ACB  3F7E               	moviw [-2]fsr1
  6673  0ACC  3E01               	addlw	1
  6674  0ACD  3FFE               	movwi [-2]fsr1
  6675  0ACE  01F4               	clrf	116
  6676  0ACF  3F7F               	moviw [-1]fsr1
  6677  0AD0  3D74               	addwfc	116,w
  6678  0AD1  3FFF               	movwi [-1]fsr1
  6679  0AD2  2AAD               	goto	l4191
  6680  0AD3                     l964:	
  6681                           
  6682                           ; _memset: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsiz
      +                          e = 6, vargsize = 0
  6683  0AD3  3178               	addfsr 1,-8
  6684  0AD4  0008               	return
  6685  0AD5                     __end_of_memset:	
  6686                           
  6687                           	psect	text24
  6688  0F5D                     __ptext24:	
  6689 ;; *************** function _ftoa *****************
  6690 ;; Defined at:
  6691 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6692 ;; Parameters:    Size  Location     Type
  6693 ;;  f               3   53[BANK0 ] float 
  6694 ;;  status          1   56[BANK0 ] PTR int 
  6695 ;;		 -> sendMessage@ftoaStatus(2), 
  6696 ;; Auto vars:     Size  Location     Type
  6697 ;;  l               4   61[BANK0 ] unsigned long 
  6698 ;;  rem             4   57[BANK0 ] unsigned long 
  6699 ;;  cp              1   65[BANK0 ] PTR unsigned char 
  6700 ;;		 -> ftoa@buf(17), 
  6701 ;; Return value:  Size  Location     Type
  6702 ;;                  1    wreg      PTR unsigned char 
  6703 ;; Registers used:
  6704 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6710 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6711 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6713 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6714 ;;Total ram usage:       13 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; Hardware stack levels required when called:   10
  6717 ;; This function calls:
  6718 ;;		___ftge
  6719 ;;		___ftmul
  6720 ;;		___ftneg
  6721 ;;		___ftsub
  6722 ;;		___fttol
  6723 ;;		___lltoft
  6724 ;;		_sprintf
  6725 ;; This function is called by:
  6726 ;;		_sendMessage
  6727 ;; This function uses a non-reentrant model
  6728 ;;
  6729                           
  6730                           
  6731                           ;psect for function _ftoa
  6732  0F5D                     _ftoa:	
  6733                           
  6734                           ;incstack = 0
  6735                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  6736  0F5D  304D               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6737  0F5E  00FF               	movwf	127
  6738  0F5F  087F               	movf	127,w
  6739  0F60  0020               	movlb	0	; select bank0
  6740  0F61  00E1               	movwf	ftoa@cp
  6741  0F62  0855               	movf	ftoa@f,w
  6742  0F63  00A6               	movwf	___ftge@ff1
  6743  0F64  0856               	movf	ftoa@f+1,w
  6744  0F65  00A7               	movwf	___ftge@ff1+1
  6745  0F66  0857               	movf	ftoa@f+2,w
  6746  0F67  00A8               	movwf	___ftge@ff1+2
  6747  0F68  3000               	movlw	0
  6748  0F69  00A9               	movwf	___ftge@ff2
  6749  0F6A  3000               	movlw	0
  6750  0F6B  00AA               	movwf	___ftge@ff2+1
  6751  0F6C  3000               	movlw	0
  6752  0F6D  00AB               	movwf	___ftge@ff2+2
  6753  0F6E  3187  27C3  318F   	fcall	___ftge
  6754  0F71  1803               	btfsc	3,0
  6755  0F72  2F90               	goto	l4213
  6756  0F73  302D               	movlw	45
  6757  0F74  00FF               	movwf	127
  6758  0F75  0020               	movlb	0	; select bank0
  6759  0F76  0861               	movf	ftoa@cp,w
  6760  0F77  0084               	movwf	4
  6761  0F78  3001               	movlw	1	; select bank2/3
  6762  0F79  0085               	movwf	5
  6763  0F7A  087F               	movf	127,w
  6764  0F7B  0080               	movwf	0
  6765  0F7C  3001               	movlw	1
  6766  0F7D  00FF               	movwf	127
  6767  0F7E  087F               	movf	127,w
  6768  0F7F  07E1               	addwf	ftoa@cp,f
  6769  0F80  0855               	movf	ftoa@f,w
  6770  0F81  00CC               	movwf	___ftneg@f1
  6771  0F82  0856               	movf	ftoa@f+1,w
  6772  0F83  00CD               	movwf	___ftneg@f1+1
  6773  0F84  0857               	movf	ftoa@f+2,w
  6774  0F85  00CE               	movwf	___ftneg@f1+2
  6775  0F86  3188  2022  318F   	fcall	___ftneg
  6776  0F89  0020               	movlb	0	; select bank0
  6777  0F8A  084C               	movf	?___ftneg,w
  6778  0F8B  00D5               	movwf	ftoa@f
  6779  0F8C  084D               	movf	?___ftneg+1,w
  6780  0F8D  00D6               	movwf	ftoa@f+1
  6781  0F8E  084E               	movf	?___ftneg+2,w
  6782  0F8F  00D7               	movwf	ftoa@f+2
  6783  0F90                     l4213:	
  6784  0F90  0020               	movlb	0	; select bank0
  6785  0F91  0855               	movf	ftoa@f,w
  6786  0F92  00B7               	movwf	___fttol@f1
  6787  0F93  0856               	movf	ftoa@f+1,w
  6788  0F94  00B8               	movwf	___fttol@f1+1
  6789  0F95  0857               	movf	ftoa@f+2,w
  6790  0F96  00B9               	movwf	___fttol@f1+2
  6791  0F97  318D  2512  318F   	fcall	___fttol
  6792  0F9A  0020               	movlb	0	; select bank0
  6793  0F9B  083A               	movf	?___fttol+3,w
  6794  0F9C  00E0               	movwf	ftoa@l+3
  6795  0F9D  0839               	movf	?___fttol+2,w
  6796  0F9E  00DF               	movwf	ftoa@l+2
  6797  0F9F  0838               	movf	?___fttol+1,w
  6798  0FA0  00DE               	movwf	ftoa@l+1
  6799  0FA1  0837               	movf	?___fttol,w
  6800  0FA2  00DD               	movwf	ftoa@l
  6801  0FA3  0860               	movf	ftoa@l+3,w
  6802  0FA4  00AE               	movwf	___lltoft@c+3
  6803  0FA5  085F               	movf	ftoa@l+2,w
  6804  0FA6  00AD               	movwf	___lltoft@c+2
  6805  0FA7  085E               	movf	ftoa@l+1,w
  6806  0FA8  00AC               	movwf	___lltoft@c+1
  6807  0FA9  085D               	movf	ftoa@l,w
  6808  0FAA  00AB               	movwf	___lltoft@c
  6809  0FAB  3189  21ED  318F   	fcall	___lltoft
  6810  0FAE  0020               	movlb	0	; select bank0
  6811  0FAF  082B               	movf	?___lltoft,w
  6812  0FB0  00B7               	movwf	___ftsub@f2
  6813  0FB1  082C               	movf	?___lltoft+1,w
  6814  0FB2  00B8               	movwf	___ftsub@f2+1
  6815  0FB3  082D               	movf	?___lltoft+2,w
  6816  0FB4  00B9               	movwf	___ftsub@f2+2
  6817  0FB5  0855               	movf	ftoa@f,w
  6818  0FB6  00BA               	movwf	___ftsub@f1
  6819  0FB7  0856               	movf	ftoa@f+1,w
  6820  0FB8  00BB               	movwf	___ftsub@f1+1
  6821  0FB9  0857               	movf	ftoa@f+2,w
  6822  0FBA  00BC               	movwf	___ftsub@f1+2
  6823  0FBB  3188  20E2  318F   	fcall	___ftsub
  6824  0FBE  0020               	movlb	0	; select bank0
  6825  0FBF  0837               	movf	?___ftsub,w
  6826  0FC0  00D5               	movwf	ftoa@f
  6827  0FC1  0838               	movf	?___ftsub+1,w
  6828  0FC2  00D6               	movwf	ftoa@f+1
  6829  0FC3  0839               	movf	?___ftsub+2,w
  6830  0FC4  00D7               	movwf	ftoa@f+2
  6831  0FC5  0855               	movf	ftoa@f,w
  6832  0FC6  00AE               	movwf	___ftmul@f2
  6833  0FC7  0856               	movf	ftoa@f+1,w
  6834  0FC8  00AF               	movwf	___ftmul@f2+1
  6835  0FC9  0857               	movf	ftoa@f+2,w
  6836  0FCA  00B0               	movwf	___ftmul@f2+2
  6837  0FCB  3024               	movlw	36
  6838  0FCC  00AB               	movwf	___ftmul@f1
  6839  0FCD  3074               	movlw	116
  6840  0FCE  00AC               	movwf	___ftmul@f1+1
  6841  0FCF  3049               	movlw	73
  6842  0FD0  00AD               	movwf	___ftmul@f1+2
  6843  0FD1  3185  2517  318F   	fcall	___ftmul
  6844  0FD4  0020               	movlb	0	; select bank0
  6845  0FD5  082B               	movf	?___ftmul,w
  6846  0FD6  00B7               	movwf	___fttol@f1
  6847  0FD7  082C               	movf	?___ftmul+1,w
  6848  0FD8  00B8               	movwf	___fttol@f1+1
  6849  0FD9  082D               	movf	?___ftmul+2,w
  6850  0FDA  00B9               	movwf	___fttol@f1+2
  6851  0FDB  318D  2512  318F   	fcall	___fttol
  6852  0FDE  0020               	movlb	0	; select bank0
  6853  0FDF  083A               	movf	?___fttol+3,w
  6854  0FE0  00DC               	movwf	ftoa@rem+3
  6855  0FE1  0839               	movf	?___fttol+2,w
  6856  0FE2  00DB               	movwf	ftoa@rem+2
  6857  0FE3  0838               	movf	?___fttol+1,w
  6858  0FE4  00DA               	movwf	ftoa@rem+1
  6859  0FE5  0837               	movf	?___fttol,w
  6860  0FE6  00D9               	movwf	ftoa@rem
  6861  0FE7  3029               	movlw	low (STR_10| (0+32768))
  6862  0FE8  00BB               	movwf	sprintf@f
  6863  0FE9  3090               	movlw	high (STR_10| (0+32768))
  6864  0FEA  00BC               	movwf	sprintf@f+1
  6865  0FEB  0860               	movf	ftoa@l+3,w
  6866  0FEC  00C0               	movwf	?_sprintf+5
  6867  0FED  085F               	movf	ftoa@l+2,w
  6868  0FEE  00BF               	movwf	?_sprintf+4
  6869  0FEF  085E               	movf	ftoa@l+1,w
  6870  0FF0  00BE               	movwf	?_sprintf+3
  6871  0FF1  085D               	movf	ftoa@l,w
  6872  0FF2  00BD               	movwf	?_sprintf+2
  6873  0FF3  085C               	movf	ftoa@rem+3,w
  6874  0FF4  00C4               	movwf	?_sprintf+9
  6875  0FF5  085B               	movf	ftoa@rem+2,w
  6876  0FF6  00C3               	movwf	?_sprintf+8
  6877  0FF7  085A               	movf	ftoa@rem+1,w
  6878  0FF8  00C2               	movwf	?_sprintf+7
  6879  0FF9  0859               	movf	ftoa@rem,w
  6880  0FFA  00C1               	movwf	?_sprintf+6
  6881  0FFB  0861               	movf	ftoa@cp,w
  6882  0FFC  3180  205A         	fcall	_sprintf
  6883  0FFE  304D               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6884  0FFF  0008               	return
  6885  1000                     __end_of_ftoa:	
  6886                           
  6887                           	psect	text25
  6888  005A                     __ptext25:	
  6889 ;; *************** function _sprintf *****************
  6890 ;; Defined at:
  6891 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  6892 ;; Parameters:    Size  Location     Type
  6893 ;;  sp              1    wreg     PTR unsigned char 
  6894 ;;		 -> ftoa@buf(17), 
  6895 ;;  f               2   27[BANK0 ] PTR const unsigned char 
  6896 ;;		 -> STR_10(11), 
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;  sp              1   47[BANK0 ] PTR unsigned char 
  6899 ;;		 -> ftoa@buf(17), 
  6900 ;;  val             4   43[BANK0 ] unsigned long 
  6901 ;;  tmpval          4    0        struct .
  6902 ;;  prec            2   50[BANK0 ] int 
  6903 ;;  width           2   48[BANK0 ] int 
  6904 ;;  cp              2    0        PTR const unsigned char 
  6905 ;;  len             2    0        unsigned int 
  6906 ;;  c               1   52[BANK0 ] unsigned char 
  6907 ;;  ap              1   42[BANK0 ] PTR void [1]
  6908 ;;		 -> ?_sprintf(2), 
  6909 ;;  flag            1   41[BANK0 ] unsigned char 
  6910 ;; Return value:  Size  Location     Type
  6911 ;;                  2   27[BANK0 ] int 
  6912 ;; Registers used:
  6913 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  6914 ;; Tracked objects:
  6915 ;;		On entry : 0/0
  6916 ;;		On exit  : 0/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6919 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6920 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6921 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6922 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6923 ;;Total ram usage:       26 bytes
  6924 ;; Hardware stack levels used:    1
  6925 ;; Hardware stack levels required when called:    8
  6926 ;; This function calls:
  6927 ;;		___lldiv
  6928 ;;		___llmod
  6929 ;;		___wmul
  6930 ;;		_isdigit
  6931 ;; This function is called by:
  6932 ;;		_ftoa
  6933 ;; This function uses a non-reentrant model
  6934 ;;
  6935                           
  6936                           
  6937                           ;psect for function _sprintf
  6938  005A                     _sprintf:	
  6939                           
  6940                           ;incstack = 0
  6941                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  6942                           ;sprintf@sp stored from wreg
  6943  005A  0020               	movlb	0	; select bank0
  6944  005B  00CF               	movwf	sprintf@sp
  6945                           
  6946                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  6947  005C  303D               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  6948  005D  00FF               	movwf	127
  6949  005E  087F               	movf	127,w
  6950  005F  00CA               	movwf	sprintf@ap
  6951  0060                     l4017:	
  6952                           ;doprnt.c: 548: while((c = *f++)) {
  6953                           
  6954  0060  083C               	movf	sprintf@f+1,w
  6955  0061  00FF               	movwf	127
  6956  0062  083B               	movf	sprintf@f,w
  6957  0063  00FE               	movwf	126
  6958  0064  0ABB               	incf	sprintf@f,f
  6959  0065  1903               	skipnz
  6960  0066  0ABC               	incf	sprintf@f+1,f
  6961  0067  087E               	movf	126,w
  6962  0068  0084               	movwf	4
  6963  0069  087F               	movf	127,w
  6964  006A  0085               	movwf	5
  6965  006B  0800               	movf	0,w	;code access
  6966  006C  00FF               	movwf	127
  6967  006D  087F               	movf	127,w
  6968  006E  00D4               	movwf	sprintf@c
  6969  006F  0854               	movf	sprintf@c,w
  6970  0070  1903               	btfsc	3,2
  6971  0071  2A21               	goto	l4019
  6972                           
  6973                           ;doprnt.c: 550: if(c != '%')
  6974  0072  3025               	movlw	37
  6975  0073  0654               	xorwf	sprintf@c,w
  6976  0074  1903               	btfsc	3,2
  6977  0075  2883               	goto	l3925
  6978                           
  6979                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  6980  0076  0854               	movf	sprintf@c,w
  6981  0077  00FF               	movwf	127
  6982  0078  084F               	movf	sprintf@sp,w
  6983  0079  0084               	movwf	4
  6984  007A  3001               	movlw	1	; select bank2/3
  6985  007B  0085               	movwf	5
  6986  007C  087F               	movf	127,w
  6987  007D  0080               	movwf	0
  6988  007E  3001               	movlw	1
  6989  007F  00FF               	movwf	127
  6990  0080  087F               	movf	127,w
  6991  0081  07CF               	addwf	sprintf@sp,f
  6992                           
  6993                           ;doprnt.c: 554: continue;
  6994  0082  2860               	goto	l4017
  6995  0083                     l3925:	
  6996                           
  6997                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  6998  0083  01D0               	clrf	sprintf@width
  6999  0084  01D1               	clrf	sprintf@width+1
  7000                           
  7001                           ;doprnt.c: 560: flag = 0;
  7002  0085  01C9               	clrf	sprintf@flag
  7003                           
  7004                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  7005  0086  083B               	movf	sprintf@f,w
  7006  0087  0084               	movwf	4
  7007  0088  083C               	movf	sprintf@f+1,w
  7008  0089  0085               	movwf	5
  7009  008A  0800               	movf	0,w	;code access
  7010  008B  3188  203D  3180   	fcall	_isdigit
  7011  008E  1C03               	btfss	3,0
  7012  008F  28C1               	goto	l3939
  7013                           
  7014                           ;doprnt.c: 610: width = 0;
  7015  0090  0020               	movlb	0	; select bank0
  7016  0091  01D0               	clrf	sprintf@width
  7017  0092  01D1               	clrf	sprintf@width+1
  7018  0093                     l3931:	
  7019                           ;doprnt.c: 611: do {
  7020                           
  7021                           
  7022                           ;doprnt.c: 612: width *= 10;
  7023  0093  300A               	movlw	10
  7024  0094  0020               	movlb	0	; select bank0
  7025  0095  00A6               	movwf	___wmul@multiplier
  7026  0096  3000               	movlw	0
  7027  0097  00A7               	movwf	___wmul@multiplier+1
  7028  0098  0851               	movf	sprintf@width+1,w
  7029  0099  00A9               	movwf	___wmul@multiplicand+1
  7030  009A  0850               	movf	sprintf@width,w
  7031  009B  00A8               	movwf	___wmul@multiplicand
  7032  009C  3188  20A9  3180   	fcall	___wmul
  7033  009F  0020               	movlb	0	; select bank0
  7034  00A0  0827               	movf	?___wmul+1,w
  7035  00A1  00D1               	movwf	sprintf@width+1
  7036  00A2  0826               	movf	?___wmul,w
  7037  00A3  00D0               	movwf	sprintf@width
  7038                           
  7039                           ;doprnt.c: 613: width += *f++ - '0';
  7040  00A4  083B               	movf	sprintf@f,w
  7041  00A5  0084               	movwf	4
  7042  00A6  083C               	movf	sprintf@f+1,w
  7043  00A7  0085               	movwf	5
  7044  00A8  0800               	movf	0,w	;code access
  7045  00A9  3ED0               	addlw	208
  7046  00AA  00FE               	movwf	126
  7047  00AB  30FF               	movlw	255
  7048  00AC  1803               	skipnc
  7049  00AD  3000               	movlw	0
  7050  00AE  00FF               	movwf	127
  7051  00AF  087E               	movf	126,w
  7052  00B0  07D0               	addwf	sprintf@width,f
  7053  00B1  087F               	movf	127,w
  7054  00B2  3DD1               	addwfc	sprintf@width+1,f
  7055  00B3  3001               	movlw	1
  7056  00B4  07BB               	addwf	sprintf@f,f
  7057  00B5  3000               	movlw	0
  7058  00B6  3DBC               	addwfc	sprintf@f+1,f
  7059                           
  7060                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  7061  00B7  083B               	movf	sprintf@f,w
  7062  00B8  0084               	movwf	4
  7063  00B9  083C               	movf	sprintf@f+1,w
  7064  00BA  0085               	movwf	5
  7065  00BB  0800               	movf	0,w	;code access
  7066  00BC  3188  203D  3180   	fcall	_isdigit
  7067  00BF  1803               	btfsc	3,0
  7068  00C0  2893               	goto	l3931
  7069  00C1                     l3939:	
  7070                           
  7071                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  7072  00C1  0020               	movlb	0	; select bank0
  7073  00C2  083B               	movf	sprintf@f,w
  7074  00C3  0084               	movwf	4
  7075  00C4  083C               	movf	sprintf@f+1,w
  7076  00C5  0085               	movwf	5
  7077  00C6  0012               	moviw fsr0++
  7078  00C7  3A2E               	xorlw	46
  7079  00C8  1D03               	btfss	3,2
  7080  00C9  28FF               	goto	l3951
  7081                           
  7082                           ;doprnt.c: 625: f++;
  7083  00CA  3001               	movlw	1
  7084  00CB  07BB               	addwf	sprintf@f,f
  7085  00CC  3000               	movlw	0
  7086  00CD  3DBC               	addwfc	sprintf@f+1,f
  7087                           
  7088                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  7089  00CE  01D2               	clrf	sprintf@prec
  7090  00CF  01D3               	clrf	sprintf@prec+1
  7091  00D0                     l3949:	
  7092                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  7093                           
  7094  00D0  083B               	movf	sprintf@f,w
  7095  00D1  0084               	movwf	4
  7096  00D2  083C               	movf	sprintf@f+1,w
  7097  00D3  0085               	movwf	5
  7098  00D4  0800               	movf	0,w	;code access
  7099  00D5  3188  203D  3180   	fcall	_isdigit
  7100  00D8  1C03               	btfss	3,0
  7101  00D9  290A               	goto	l3957
  7102                           
  7103                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  7104  00DA  0020               	movlb	0	; select bank0
  7105  00DB  083B               	movf	sprintf@f,w
  7106  00DC  0084               	movwf	4
  7107  00DD  083C               	movf	sprintf@f+1,w
  7108  00DE  0085               	movwf	5
  7109  00DF  0800               	movf	0,w	;code access
  7110  00E0  00FE               	movwf	126
  7111  00E1  01FF               	clrf	127
  7112  00E2  0853               	movf	sprintf@prec+1,w
  7113  00E3  00A7               	movwf	___wmul@multiplier+1
  7114  00E4  0852               	movf	sprintf@prec,w
  7115  00E5  00A6               	movwf	___wmul@multiplier
  7116  00E6  300A               	movlw	10
  7117  00E7  00A8               	movwf	___wmul@multiplicand
  7118  00E8  3000               	movlw	0
  7119  00E9  00A9               	movwf	___wmul@multiplicand+1
  7120  00EA  3188  20A9  3180   	fcall	___wmul
  7121  00ED  087E               	movf	126,w
  7122  00EE  0020               	movlb	0	; select bank0
  7123  00EF  0726               	addwf	?___wmul,w
  7124  00F0  00FC               	movwf	124
  7125  00F1  087F               	movf	127,w
  7126  00F2  3D27               	addwfc	?___wmul+1,w
  7127  00F3  00FD               	movwf	125
  7128  00F4  087C               	movf	124,w
  7129  00F5  3ED0               	addlw	208
  7130  00F6  00D2               	movwf	sprintf@prec
  7131  00F7  30FF               	movlw	255
  7132  00F8  3D7D               	addwfc	125,w
  7133  00F9  00D3               	movwf	sprintf@prec+1
  7134  00FA  3001               	movlw	1
  7135  00FB  07BB               	addwf	sprintf@f,f
  7136  00FC  3000               	movlw	0
  7137  00FD  3DBC               	addwfc	sprintf@f+1,f
  7138  00FE  28D0               	goto	l3949
  7139  00FF                     l3951:	
  7140                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  7141                           
  7142                           
  7143                           ;doprnt.c: 645: prec = 0;
  7144  00FF  0020               	movlb	0	; select bank0
  7145  0100  01D2               	clrf	sprintf@prec
  7146  0101  01D3               	clrf	sprintf@prec+1
  7147                           
  7148                           ;doprnt.c: 654: switch(c = *f++) {
  7149                           
  7150                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  7151  0102  290A               	goto	l3957
  7152  0103                     l513:	
  7153                           ;doprnt.c: 660: case 'l':
  7154                           
  7155                           ;doprnt.c: 657: goto alldone;
  7156                           
  7157                           ;doprnt.c: 656: case 0:
  7158                           
  7159                           
  7160                           ;doprnt.c: 662: flag |= 0x10;
  7161  0103  1649               	bsf	sprintf@flag,4
  7162                           
  7163                           ;doprnt.c: 663: goto loop;
  7164  0104  290A               	goto	l3957
  7165  0105                     l3953:	
  7166                           ;doprnt.c: 836: case 'u':
  7167                           
  7168                           ;doprnt.c: 832: continue;
  7169                           
  7170                           ;doprnt.c: 821: default:
  7171                           
  7172                           
  7173                           ;doprnt.c: 837: flag |= 0xC0;
  7174  0105  30C0               	movlw	192
  7175  0106  00FF               	movwf	127
  7176  0107  087F               	movf	127,w
  7177  0108  04C9               	iorwf	sprintf@flag,f
  7178                           
  7179                           ;doprnt.c: 841: }
  7180                           
  7181                           ;doprnt.c: 838: break;
  7182  0109  2922               	goto	l516
  7183  010A                     l3957:	
  7184  010A  0020               	movlb	0	; select bank0
  7185  010B  083C               	movf	sprintf@f+1,w
  7186  010C  00FF               	movwf	127
  7187  010D  083B               	movf	sprintf@f,w
  7188  010E  00FE               	movwf	126
  7189  010F  0ABB               	incf	sprintf@f,f
  7190  0110  1903               	skipnz
  7191  0111  0ABC               	incf	sprintf@f+1,f
  7192  0112  087E               	movf	126,w
  7193  0113  0084               	movwf	4
  7194  0114  087F               	movf	127,w
  7195  0115  0085               	movwf	5
  7196  0116  0800               	movf	0,w	;code access
  7197  0117  00D4               	movwf	sprintf@c
  7198                           
  7199                           ; Switch size 1, requested type "space"
  7200                           ; Number of cases is 3, Range of values is 0 to 117
  7201                           ; switch strategies available:
  7202                           ; Name         Instructions Cycles
  7203                           ; simple_byte           10     6 (average)
  7204                           ; direct_byte          242     6 (fixed)
  7205                           ; jumptable            260     6 (fixed)
  7206                           ;	Chosen strategy is simple_byte
  7207  0118  3A00               	xorlw	0	; case 0
  7208  0119  1903               	skipnz
  7209  011A  2A21               	goto	l4019
  7210  011B  3A6C               	xorlw	108	; case 108
  7211  011C  1903               	skipnz
  7212  011D  2903               	goto	l513
  7213  011E  3A19               	xorlw	25	; case 117
  7214  011F  1903               	skipnz
  7215  0120  2905               	goto	l3953
  7216  0121  2860               	goto	l4017
  7217  0122                     l516:	
  7218                           
  7219                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  7220  0122  1E49               	btfss	sprintf@flag,4
  7221  0123  2931               	goto	l3963
  7222                           
  7223                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7224  0124  084A               	movf	sprintf@ap,w
  7225  0125  0084               	movwf	4
  7226  0126  0185               	clrf	5
  7227  0127  3F00               	moviw [0]fsr0
  7228  0128  00CB               	movwf	sprintf@val
  7229  0129  3F01               	moviw [1]fsr0
  7230  012A  00CC               	movwf	sprintf@val+1
  7231  012B  3F02               	moviw [2]fsr0
  7232  012C  00CD               	movwf	sprintf@val+2
  7233  012D  3F03               	moviw [3]fsr0
  7234  012E  00CE               	movwf	sprintf@val+3
  7235  012F  3004               	movlw	4
  7236  0130  293F               	goto	L1
  7237  0131                     l3963:	
  7238                           
  7239                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  7240  0131  084A               	movf	sprintf@ap,w
  7241  0132  0084               	movwf	4
  7242  0133  0185               	clrf	5
  7243  0134  3F00               	moviw [0]fsr0
  7244  0135  00FE               	movwf	126
  7245  0136  3F01               	moviw [1]fsr0
  7246  0137  00FF               	movwf	127
  7247  0138  087E               	movf	126,w
  7248  0139  00CB               	movwf	sprintf@val
  7249  013A  087F               	movf	127,w
  7250  013B  00CC               	movwf	sprintf@val+1
  7251  013C  01CD               	clrf	sprintf@val+2
  7252  013D  01CE               	clrf	sprintf@val+3
  7253  013E  3002               	movlw	2
  7254  013F                     L1:	
  7255  013F  00FF               	movwf	127
  7256  0140  087F               	movf	127,w
  7257  0141  07CA               	addwf	sprintf@ap,f
  7258                           
  7259                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  7260  0142  0852               	movf	sprintf@prec,w
  7261  0143  0453               	iorwf	sprintf@prec+1,w
  7262  0144  1D03               	btfss	3,2
  7263  0145  2950               	goto	l3973
  7264  0146  084E               	movf	sprintf@val+3,w
  7265  0147  044D               	iorwf	sprintf@val+2,w
  7266  0148  044C               	iorwf	sprintf@val+1,w
  7267  0149  044B               	iorwf	sprintf@val,w
  7268  014A  1D03               	skipz
  7269  014B  2950               	goto	l3973
  7270                           
  7271                           ;doprnt.c: 1310: prec++;
  7272  014C  3001               	movlw	1
  7273  014D  07D2               	addwf	sprintf@prec,f
  7274  014E  3000               	movlw	0
  7275  014F  3DD3               	addwfc	sprintf@prec+1,f
  7276  0150                     l3973:	
  7277                           
  7278                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7279  0150  01D4               	clrf	sprintf@c
  7280  0151  0AD4               	incf	sprintf@c,f
  7281  0152  300A               	movlw	10
  7282  0153  0654               	xorwf	sprintf@c,w
  7283  0154  1903               	btfsc	3,2
  7284  0155  2983               	goto	l3987
  7285  0156                     l3979:	
  7286                           
  7287                           ;doprnt.c: 1325: if(val < dpowers[c])
  7288  0156  0854               	movf	sprintf@c,w
  7289  0157  00FE               	movwf	126
  7290  0158  01FF               	clrf	127
  7291  0159  35FE               	lslf	126,f
  7292  015A  0DFF               	rlf	127,f
  7293  015B  35FE               	lslf	126,f
  7294  015C  0DFF               	rlf	127,f
  7295  015D  3000               	movlw	low (_dpowers| (0+32768))
  7296  015E  077E               	addwf	126,w
  7297  015F  0084               	movwf	4
  7298  0160  3090               	movlw	high (_dpowers| (0+32768))
  7299  0161  3D7F               	addwfc	127,w
  7300  0162  0085               	movwf	5
  7301  0163  3F00               	moviw [0]fsr0
  7302  0164  00C5               	movwf	??_sprintf
  7303  0165  3F01               	moviw [1]fsr0
  7304  0166  00C6               	movwf	??_sprintf+1
  7305  0167  3F02               	moviw [2]fsr0
  7306  0168  00C7               	movwf	??_sprintf+2
  7307  0169  3F03               	moviw [3]fsr0
  7308  016A  00C8               	movwf	??_sprintf+3
  7309  016B  0848               	movf	??_sprintf+3,w
  7310  016C  024E               	subwf	sprintf@val+3,w
  7311  016D  1D03               	skipz
  7312  016E  2979               	goto	u4285
  7313  016F  0847               	movf	??_sprintf+2,w
  7314  0170  024D               	subwf	sprintf@val+2,w
  7315  0171  1D03               	skipz
  7316  0172  2979               	goto	u4285
  7317  0173  0846               	movf	??_sprintf+1,w
  7318  0174  024C               	subwf	sprintf@val+1,w
  7319  0175  1D03               	skipz
  7320  0176  2979               	goto	u4285
  7321  0177  0845               	movf	??_sprintf,w
  7322  0178  024B               	subwf	sprintf@val,w
  7323  0179                     u4285:	
  7324  0179  1C03               	btfss	3,0
  7325  017A  2983               	goto	l3987
  7326                           
  7327                           ;doprnt.c: 1326: break;
  7328  017B  3001               	movlw	1
  7329  017C  00FF               	movwf	127
  7330  017D  087F               	movf	127,w
  7331  017E  07D4               	addwf	sprintf@c,f
  7332  017F  300A               	movlw	10
  7333  0180  0654               	xorwf	sprintf@c,w
  7334  0181  1D03               	btfss	3,2
  7335  0182  2956               	goto	l3979
  7336  0183                     l3987:	
  7337                           
  7338                           ;doprnt.c: 1358: if(c < prec)
  7339  0183  0853               	movf	sprintf@prec+1,w
  7340  0184  3A80               	xorlw	128
  7341  0185  3C80               	sublw	128
  7342  0186  1D03               	skipz
  7343  0187  298A               	goto	u4305
  7344  0188  0852               	movf	sprintf@prec,w
  7345  0189  0254               	subwf	sprintf@c,w
  7346  018A                     u4305:	
  7347  018A  1803               	skipnc
  7348  018B  2992               	goto	l3991
  7349                           
  7350                           ;doprnt.c: 1359: c = prec;
  7351  018C  0020               	movlb	0	; select bank0
  7352  018D  0852               	movf	sprintf@prec,w
  7353  018E  00FF               	movwf	127
  7354  018F  087F               	movf	127,w
  7355  0190  00D4               	movwf	sprintf@c
  7356  0191  29A6               	goto	l3995
  7357  0192                     l3991:	
  7358                           
  7359                           ;doprnt.c: 1360: else if(prec < c)
  7360  0192  0020               	movlb	0	; select bank0
  7361  0193  0853               	movf	sprintf@prec+1,w
  7362  0194  3A80               	xorlw	128
  7363  0195  00C5               	movwf	??_sprintf
  7364  0196  3080               	movlw	128
  7365  0197  0245               	subwf	??_sprintf,w
  7366  0198  1D03               	skipz
  7367  0199  299C               	goto	u4315
  7368  019A  0854               	movf	sprintf@c,w
  7369  019B  0252               	subwf	sprintf@prec,w
  7370  019C                     u4315:	
  7371  019C  1803               	skipnc
  7372  019D  29A6               	goto	l3995
  7373                           
  7374                           ;doprnt.c: 1361: prec = c;
  7375  019E  0020               	movlb	0	; select bank0
  7376  019F  0854               	movf	sprintf@c,w
  7377  01A0  00FE               	movwf	126
  7378  01A1  01FF               	clrf	127
  7379  01A2  087E               	movf	126,w
  7380  01A3  00D2               	movwf	sprintf@prec
  7381  01A4  087F               	movf	127,w
  7382  01A5  00D3               	movwf	sprintf@prec+1
  7383  01A6                     l3995:	
  7384                           
  7385                           ;doprnt.c: 1400: if(width > c)
  7386  01A6  0020               	movlb	0	; select bank0
  7387  01A7  0851               	movf	sprintf@width+1,w
  7388  01A8  3A80               	xorlw	128
  7389  01A9  3C80               	sublw	128
  7390  01AA  1D03               	skipz
  7391  01AB  29AE               	goto	u4325
  7392  01AC  0850               	movf	sprintf@width,w
  7393  01AD  0254               	subwf	sprintf@c,w
  7394  01AE                     u4325:	
  7395  01AE  1803               	skipnc
  7396  01AF  29B9               	goto	l3999
  7397                           
  7398                           ;doprnt.c: 1401: width -= c;
  7399  01B0  0020               	movlb	0	; select bank0
  7400  01B1  0854               	movf	sprintf@c,w
  7401  01B2  00FE               	movwf	126
  7402  01B3  01FF               	clrf	127
  7403  01B4  087E               	movf	126,w
  7404  01B5  02D0               	subwf	sprintf@width,f
  7405  01B6  087F               	movf	127,w
  7406  01B7  3BD1               	subwfb	sprintf@width+1,f
  7407  01B8  29BC               	goto	l4001
  7408  01B9                     l3999:	
  7409                           
  7410                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  7411  01B9  0020               	movlb	0	; select bank0
  7412  01BA  01D0               	clrf	sprintf@width
  7413  01BB  01D1               	clrf	sprintf@width+1
  7414  01BC                     l4001:	
  7415                           
  7416                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  7417  01BC  0850               	movf	sprintf@width,w
  7418  01BD  0451               	iorwf	sprintf@width+1,w
  7419  01BE  1903               	btfsc	3,2
  7420  01BF  2A16               	goto	l4015
  7421                           
  7422                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  7423                           
  7424                           ;doprnt.c: 1448: do
  7425  01C0  3020               	movlw	32
  7426  01C1  00FF               	movwf	127
  7427  01C2  084F               	movf	sprintf@sp,w
  7428  01C3  0084               	movwf	4
  7429  01C4  3001               	movlw	1	; select bank2/3
  7430  01C5  0085               	movwf	5
  7431  01C6  087F               	movf	127,w
  7432  01C7  0080               	movwf	0
  7433  01C8  3001               	movlw	1
  7434  01C9  00FF               	movwf	127
  7435  01CA  087F               	movf	127,w
  7436  01CB  07CF               	addwf	sprintf@sp,f
  7437                           
  7438                           ;doprnt.c: 1450: while(--width);
  7439  01CC  30FF               	movlw	255
  7440  01CD  07D0               	addwf	sprintf@width,f
  7441  01CE  30FF               	movlw	255
  7442  01CF  3DD1               	addwfc	sprintf@width+1,f
  7443  01D0  29BC               	goto	l4001
  7444  01D1                     l4009:	
  7445                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  7446                           
  7447                           
  7448                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  7449  01D1  3000               	movlw	0
  7450  01D2  00B6               	movwf	___llmod@divisor+3
  7451  01D3  3000               	movlw	0
  7452  01D4  00B5               	movwf	___llmod@divisor+2
  7453  01D5  3000               	movlw	0
  7454  01D6  00B4               	movwf	___llmod@divisor+1
  7455  01D7  300A               	movlw	10
  7456  01D8  00B3               	movwf	___llmod@divisor
  7457  01D9  0853               	movf	sprintf@prec+1,w
  7458  01DA  0085               	movwf	5
  7459  01DB  0852               	movf	sprintf@prec,w
  7460  01DC  0084               	movwf	4
  7461  01DD  3584               	lslf	4,f
  7462  01DE  0D85               	rlf	5,f
  7463  01DF  3584               	lslf	4,f
  7464  01E0  0D85               	rlf	5,f
  7465  01E1  3000               	movlw	low (_dpowers| (0+32768))
  7466  01E2  0784               	addwf	4,f
  7467  01E3  3090               	movlw	high (_dpowers| (0+32768))
  7468  01E4  3D85               	addwfc	5,f
  7469  01E5  3F00               	moviw [0]fsr0
  7470  01E6  00A6               	movwf	___lldiv@divisor
  7471  01E7  3F01               	moviw [1]fsr0
  7472  01E8  00A7               	movwf	___lldiv@divisor+1
  7473  01E9  3F02               	moviw [2]fsr0
  7474  01EA  00A8               	movwf	___lldiv@divisor+2
  7475  01EB  3F03               	moviw [3]fsr0
  7476  01EC  00A9               	movwf	___lldiv@divisor+3
  7477  01ED  084E               	movf	sprintf@val+3,w
  7478  01EE  00AD               	movwf	___lldiv@dividend+3
  7479  01EF  084D               	movf	sprintf@val+2,w
  7480  01F0  00AC               	movwf	___lldiv@dividend+2
  7481  01F1  084C               	movf	sprintf@val+1,w
  7482  01F2  00AB               	movwf	___lldiv@dividend+1
  7483  01F3  084B               	movf	sprintf@val,w
  7484  01F4  00AA               	movwf	___lldiv@dividend
  7485  01F5  318C  245A  3180   	fcall	___lldiv
  7486  01F8  0020               	movlb	0	; select bank0
  7487  01F9  0829               	movf	?___lldiv+3,w
  7488  01FA  00BA               	movwf	___llmod@dividend+3
  7489  01FB  0828               	movf	?___lldiv+2,w
  7490  01FC  00B9               	movwf	___llmod@dividend+2
  7491  01FD  0827               	movf	?___lldiv+1,w
  7492  01FE  00B8               	movwf	___llmod@dividend+1
  7493  01FF  0826               	movf	?___lldiv,w
  7494  0200  00B7               	movwf	___llmod@dividend
  7495  0201  318B  2387  3180   	fcall	___llmod
  7496  0204  0020               	movlb	0	; select bank0
  7497  0205  0833               	movf	?___llmod,w
  7498  0206  3E30               	addlw	48
  7499  0207  00FF               	movwf	127
  7500  0208  087F               	movf	127,w
  7501  0209  00D4               	movwf	sprintf@c
  7502                           
  7503                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7504  020A  0854               	movf	sprintf@c,w
  7505  020B  00FF               	movwf	127
  7506  020C  084F               	movf	sprintf@sp,w
  7507  020D  0084               	movwf	4
  7508  020E  3001               	movlw	1	; select bank2/3
  7509  020F  0085               	movwf	5
  7510  0210  087F               	movf	127,w
  7511  0211  0080               	movwf	0
  7512  0212  3001               	movlw	1
  7513  0213  00FF               	movwf	127
  7514  0214  087F               	movf	127,w
  7515  0215  07CF               	addwf	sprintf@sp,f
  7516  0216                     l4015:	
  7517  0216  30FF               	movlw	255
  7518  0217  07D2               	addwf	sprintf@prec,f
  7519  0218  30FF               	movlw	255
  7520  0219  3DD3               	addwfc	sprintf@prec+1,f
  7521  021A  0A52               	incf	sprintf@prec,w
  7522  021B  1D03               	skipz
  7523  021C  29D1               	goto	l4009
  7524  021D  0A53               	incf	sprintf@prec+1,w
  7525  021E  1903               	btfsc	3,2
  7526  021F  2860               	goto	l4017
  7527  0220  29D1               	goto	l4009
  7528  0221                     l4019:	
  7529                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7530                           
  7531                           
  7532                           ;doprnt.c: 1557: *sp = 0;
  7533  0221  084F               	movf	sprintf@sp,w
  7534  0222  0084               	movwf	4
  7535  0223  3001               	movlw	1	; select bank2/3
  7536  0224  0085               	movwf	5
  7537  0225  0180               	clrf	0
  7538  0226  0008               	return
  7539  0227                     __end_of_sprintf:	
  7540                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7541                           
  7542                           
  7543                           	psect	text26
  7544  083D                     __ptext26:	
  7545 ;; *************** function _isdigit *****************
  7546 ;; Defined at:
  7547 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7548 ;; Parameters:    Size  Location     Type
  7549 ;;  c               1    wreg     unsigned char 
  7550 ;; Auto vars:     Size  Location     Type
  7551 ;;  c               1    1[COMMON] unsigned char 
  7552 ;; Return value:  Size  Location     Type
  7553 ;;		None               void
  7554 ;; Registers used:
  7555 ;;		wreg, status,2, status,0
  7556 ;; Tracked objects:
  7557 ;;		On entry : 0/0
  7558 ;;		On exit  : 0/0
  7559 ;;		Unchanged: 0/0
  7560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7562 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7564 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7565 ;;Total ram usage:        2 bytes
  7566 ;; Hardware stack levels used:    1
  7567 ;; Hardware stack levels required when called:    7
  7568 ;; This function calls:
  7569 ;;		Nothing
  7570 ;; This function is called by:
  7571 ;;		_sprintf
  7572 ;; This function uses a non-reentrant model
  7573 ;;
  7574                           
  7575                           
  7576                           ;psect for function _isdigit
  7577  083D                     _isdigit:	
  7578                           
  7579                           ;incstack = 0
  7580                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7581                           ;isdigit@c stored from wreg
  7582  083D  00F1               	movwf	isdigit@c
  7583  083E  01F0               	clrf	_isdigit$1998
  7584  083F  303A               	movlw	58
  7585  0840  0271               	subwf	isdigit@c,w
  7586  0841  1803               	skipnc
  7587  0842  2849               	goto	l3709
  7588  0843  3030               	movlw	48
  7589  0844  0271               	subwf	isdigit@c,w
  7590  0845  1C03               	skipc
  7591  0846  2849               	goto	l3709
  7592  0847  01F0               	clrf	_isdigit$1998
  7593  0848  0AF0               	incf	_isdigit$1998,f
  7594  0849                     l3709:	
  7595  0849  0C70               	rrf	_isdigit$1998,w
  7596  084A  0008               	return
  7597  084B                     __end_of_isdigit:	
  7598                           
  7599                           	psect	text27
  7600  08A9                     __ptext27:	
  7601 ;; *************** function ___wmul *****************
  7602 ;; Defined at:
  7603 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7604 ;; Parameters:    Size  Location     Type
  7605 ;;  multiplier      2    6[BANK0 ] unsigned int 
  7606 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  7607 ;; Auto vars:     Size  Location     Type
  7608 ;;  product         2    0[COMMON] unsigned int 
  7609 ;; Return value:  Size  Location     Type
  7610 ;;                  2    6[BANK0 ] unsigned int 
  7611 ;; Registers used:
  7612 ;;		wreg, status,2, status,0
  7613 ;; Tracked objects:
  7614 ;;		On entry : 0/0
  7615 ;;		On exit  : 0/0
  7616 ;;		Unchanged: 0/0
  7617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7618 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7619 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7621 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7622 ;;Total ram usage:        6 bytes
  7623 ;; Hardware stack levels used:    1
  7624 ;; Hardware stack levels required when called:    7
  7625 ;; This function calls:
  7626 ;;		Nothing
  7627 ;; This function is called by:
  7628 ;;		_sprintf
  7629 ;; This function uses a non-reentrant model
  7630 ;;
  7631                           
  7632                           
  7633                           ;psect for function ___wmul
  7634  08A9                     ___wmul:	
  7635                           
  7636                           ;incstack = 0
  7637                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7638  08A9  01F0               	clrf	___wmul@product
  7639  08AA  01F1               	clrf	___wmul@product+1
  7640  08AB                     l3715:	
  7641  08AB  0020               	movlb	0	; select bank0
  7642  08AC  1C26               	btfss	___wmul@multiplier,0
  7643  08AD  28B2               	goto	l539
  7644  08AE  0828               	movf	___wmul@multiplicand,w
  7645  08AF  07F0               	addwf	___wmul@product,f
  7646  08B0  0829               	movf	___wmul@multiplicand+1,w
  7647  08B1  3DF1               	addwfc	___wmul@product+1,f
  7648  08B2                     l539:	
  7649  08B2  3001               	movlw	1
  7650  08B3                     u3685:	
  7651  08B3  35A8               	lslf	___wmul@multiplicand,f
  7652  08B4  0DA9               	rlf	___wmul@multiplicand+1,f
  7653  08B5  0B89               	decfsz	9,f
  7654  08B6  28B3               	goto	u3685
  7655  08B7  3001               	movlw	1
  7656  08B8                     u3695:	
  7657  08B8  36A7               	lsrf	___wmul@multiplier+1,f
  7658  08B9  0CA6               	rrf	___wmul@multiplier,f
  7659  08BA  0B89               	decfsz	9,f
  7660  08BB  28B8               	goto	u3695
  7661  08BC  0826               	movf	___wmul@multiplier,w
  7662  08BD  0427               	iorwf	___wmul@multiplier+1,w
  7663  08BE  1D03               	btfss	3,2
  7664  08BF  28AB               	goto	l3715
  7665  08C0  0871               	movf	___wmul@product+1,w
  7666  08C1  00A7               	movwf	?___wmul+1
  7667  08C2  0870               	movf	___wmul@product,w
  7668  08C3  00A6               	movwf	?___wmul
  7669  08C4  0008               	return
  7670  08C5                     __end_of___wmul:	
  7671                           
  7672                           	psect	text28
  7673  0B87                     __ptext28:	
  7674 ;; *************** function ___llmod *****************
  7675 ;; Defined at:
  7676 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  7677 ;; Parameters:    Size  Location     Type
  7678 ;;  divisor         4   19[BANK0 ] unsigned long 
  7679 ;;  dividend        4   23[BANK0 ] unsigned long 
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;  counter         1    0[COMMON] unsigned char 
  7682 ;; Return value:  Size  Location     Type
  7683 ;;                  4   19[BANK0 ] unsigned long 
  7684 ;; Registers used:
  7685 ;;		wreg, status,2, status,0, btemp+11
  7686 ;; Tracked objects:
  7687 ;;		On entry : 0/0
  7688 ;;		On exit  : 0/0
  7689 ;;		Unchanged: 0/0
  7690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7691 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7692 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7694 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7695 ;;Total ram usage:        9 bytes
  7696 ;; Hardware stack levels used:    1
  7697 ;; Hardware stack levels required when called:    7
  7698 ;; This function calls:
  7699 ;;		Nothing
  7700 ;; This function is called by:
  7701 ;;		_sprintf
  7702 ;; This function uses a non-reentrant model
  7703 ;;
  7704                           
  7705                           
  7706                           ;psect for function ___llmod
  7707  0B87                     ___llmod:	
  7708                           
  7709                           ;incstack = 0
  7710                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+11]
  7711  0B87  0020               	movlb	0	; select bank0
  7712  0B88  0836               	movf	___llmod@divisor+3,w
  7713  0B89  0435               	iorwf	___llmod@divisor+2,w
  7714  0B8A  0434               	iorwf	___llmod@divisor+1,w
  7715  0B8B  0433               	iorwf	___llmod@divisor,w
  7716  0B8C  1903               	skipnz
  7717  0B8D  2BC1               	goto	l3847
  7718  0B8E  01F0               	clrf	___llmod@counter
  7719  0B8F  0AF0               	incf	___llmod@counter,f
  7720  0B90                     l3837:	
  7721  0B90  1BB6               	btfsc	___llmod@divisor+3,7
  7722  0B91  2B9E               	goto	l3839
  7723  0B92  3001               	movlw	1
  7724  0B93                     u4025:	
  7725  0B93  35B3               	lslf	___llmod@divisor,f
  7726  0B94  0DB4               	rlf	___llmod@divisor+1,f
  7727  0B95  0DB5               	rlf	___llmod@divisor+2,f
  7728  0B96  0DB6               	rlf	___llmod@divisor+3,f
  7729  0B97  0B89               	decfsz	9,f
  7730  0B98  2B93               	goto	u4025
  7731  0B99  3001               	movlw	1
  7732  0B9A  00FF               	movwf	127
  7733  0B9B  087F               	movf	127,w
  7734  0B9C  07F0               	addwf	___llmod@counter,f
  7735  0B9D  2B90               	goto	l3837
  7736  0B9E                     l3839:	
  7737  0B9E  0836               	movf	___llmod@divisor+3,w
  7738  0B9F  023A               	subwf	___llmod@dividend+3,w
  7739  0BA0  1D03               	skipz
  7740  0BA1  2BAC               	goto	u4045
  7741  0BA2  0835               	movf	___llmod@divisor+2,w
  7742  0BA3  0239               	subwf	___llmod@dividend+2,w
  7743  0BA4  1D03               	skipz
  7744  0BA5  2BAC               	goto	u4045
  7745  0BA6  0834               	movf	___llmod@divisor+1,w
  7746  0BA7  0238               	subwf	___llmod@dividend+1,w
  7747  0BA8  1D03               	skipz
  7748  0BA9  2BAC               	goto	u4045
  7749  0BAA  0833               	movf	___llmod@divisor,w
  7750  0BAB  0237               	subwf	___llmod@dividend,w
  7751  0BAC                     u4045:	
  7752  0BAC  1C03               	skipc
  7753  0BAD  2BB6               	goto	l3843
  7754  0BAE  0833               	movf	___llmod@divisor,w
  7755  0BAF  02B7               	subwf	___llmod@dividend,f
  7756  0BB0  0834               	movf	___llmod@divisor+1,w
  7757  0BB1  3BB8               	subwfb	___llmod@dividend+1,f
  7758  0BB2  0835               	movf	___llmod@divisor+2,w
  7759  0BB3  3BB9               	subwfb	___llmod@dividend+2,f
  7760  0BB4  0836               	movf	___llmod@divisor+3,w
  7761  0BB5  3BBA               	subwfb	___llmod@dividend+3,f
  7762  0BB6                     l3843:	
  7763  0BB6  3001               	movlw	1
  7764  0BB7                     u4055:	
  7765  0BB7  36B6               	lsrf	___llmod@divisor+3,f
  7766  0BB8  0CB5               	rrf	___llmod@divisor+2,f
  7767  0BB9  0CB4               	rrf	___llmod@divisor+1,f
  7768  0BBA  0CB3               	rrf	___llmod@divisor,f
  7769  0BBB  0B89               	decfsz	9,f
  7770  0BBC  2BB7               	goto	u4055
  7771  0BBD  3001               	movlw	1
  7772  0BBE  02F0               	subwf	___llmod@counter,f
  7773  0BBF  1D03               	btfss	3,2
  7774  0BC0  2B9E               	goto	l3839
  7775  0BC1                     l3847:	
  7776  0BC1  083A               	movf	___llmod@dividend+3,w
  7777  0BC2  00B6               	movwf	?___llmod+3
  7778  0BC3  0839               	movf	___llmod@dividend+2,w
  7779  0BC4  00B5               	movwf	?___llmod+2
  7780  0BC5  0838               	movf	___llmod@dividend+1,w
  7781  0BC6  00B4               	movwf	?___llmod+1
  7782  0BC7  0837               	movf	___llmod@dividend,w
  7783  0BC8  00B3               	movwf	?___llmod
  7784  0BC9  0008               	return
  7785  0BCA                     __end_of___llmod:	
  7786                           
  7787                           	psect	text29
  7788  0C5A                     __ptext29:	
  7789 ;; *************** function ___lldiv *****************
  7790 ;; Defined at:
  7791 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  7792 ;; Parameters:    Size  Location     Type
  7793 ;;  divisor         4    6[BANK0 ] unsigned long 
  7794 ;;  dividend        4   10[BANK0 ] unsigned long 
  7795 ;; Auto vars:     Size  Location     Type
  7796 ;;  quotient        4   14[BANK0 ] unsigned long 
  7797 ;;  counter         1   18[BANK0 ] unsigned char 
  7798 ;; Return value:  Size  Location     Type
  7799 ;;                  4    6[BANK0 ] unsigned long 
  7800 ;; Registers used:
  7801 ;;		wreg, status,2, status,0, btemp+11
  7802 ;; Tracked objects:
  7803 ;;		On entry : 0/0
  7804 ;;		On exit  : 0/0
  7805 ;;		Unchanged: 0/0
  7806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7807 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7808 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7810 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7811 ;;Total ram usage:       13 bytes
  7812 ;; Hardware stack levels used:    1
  7813 ;; Hardware stack levels required when called:    7
  7814 ;; This function calls:
  7815 ;;		Nothing
  7816 ;; This function is called by:
  7817 ;;		_sprintf
  7818 ;; This function uses a non-reentrant model
  7819 ;;
  7820                           
  7821                           
  7822                           ;psect for function ___lldiv
  7823  0C5A                     ___lldiv:	
  7824                           
  7825                           ;incstack = 0
  7826                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+11]
  7827  0C5A  3000               	movlw	0
  7828  0C5B  0020               	movlb	0	; select bank0
  7829  0C5C  00B1               	movwf	___lldiv@quotient+3
  7830  0C5D  3000               	movlw	0
  7831  0C5E  00B0               	movwf	___lldiv@quotient+2
  7832  0C5F  3000               	movlw	0
  7833  0C60  00AF               	movwf	___lldiv@quotient+1
  7834  0C61  3000               	movlw	0
  7835  0C62  00AE               	movwf	___lldiv@quotient
  7836  0C63  0829               	movf	___lldiv@divisor+3,w
  7837  0C64  0428               	iorwf	___lldiv@divisor+2,w
  7838  0C65  0427               	iorwf	___lldiv@divisor+1,w
  7839  0C66  0426               	iorwf	___lldiv@divisor,w
  7840  0C67  1903               	skipnz
  7841  0C68  2CA4               	goto	l3749
  7842  0C69  01B2               	clrf	___lldiv@counter
  7843  0C6A  0AB2               	incf	___lldiv@counter,f
  7844  0C6B                     l3735:	
  7845  0C6B  1BA9               	btfsc	___lldiv@divisor+3,7
  7846  0C6C  2C79               	goto	l3737
  7847  0C6D  3001               	movlw	1
  7848  0C6E                     u3725:	
  7849  0C6E  35A6               	lslf	___lldiv@divisor,f
  7850  0C6F  0DA7               	rlf	___lldiv@divisor+1,f
  7851  0C70  0DA8               	rlf	___lldiv@divisor+2,f
  7852  0C71  0DA9               	rlf	___lldiv@divisor+3,f
  7853  0C72  0B89               	decfsz	9,f
  7854  0C73  2C6E               	goto	u3725
  7855  0C74  3001               	movlw	1
  7856  0C75  00FF               	movwf	127
  7857  0C76  087F               	movf	127,w
  7858  0C77  07B2               	addwf	___lldiv@counter,f
  7859  0C78  2C6B               	goto	l3735
  7860  0C79                     l3737:	
  7861  0C79  3001               	movlw	1
  7862  0C7A                     u3745:	
  7863  0C7A  35AE               	lslf	___lldiv@quotient,f
  7864  0C7B  0DAF               	rlf	___lldiv@quotient+1,f
  7865  0C7C  0DB0               	rlf	___lldiv@quotient+2,f
  7866  0C7D  0DB1               	rlf	___lldiv@quotient+3,f
  7867  0C7E  0B89               	decfsz	9,f
  7868  0C7F  2C7A               	goto	u3745
  7869  0C80  0829               	movf	___lldiv@divisor+3,w
  7870  0C81  022D               	subwf	___lldiv@dividend+3,w
  7871  0C82  1D03               	skipz
  7872  0C83  2C8E               	goto	u3755
  7873  0C84  0828               	movf	___lldiv@divisor+2,w
  7874  0C85  022C               	subwf	___lldiv@dividend+2,w
  7875  0C86  1D03               	skipz
  7876  0C87  2C8E               	goto	u3755
  7877  0C88  0827               	movf	___lldiv@divisor+1,w
  7878  0C89  022B               	subwf	___lldiv@dividend+1,w
  7879  0C8A  1D03               	skipz
  7880  0C8B  2C8E               	goto	u3755
  7881  0C8C  0826               	movf	___lldiv@divisor,w
  7882  0C8D  022A               	subwf	___lldiv@dividend,w
  7883  0C8E                     u3755:	
  7884  0C8E  1C03               	skipc
  7885  0C8F  2C99               	goto	l3745
  7886  0C90  0826               	movf	___lldiv@divisor,w
  7887  0C91  02AA               	subwf	___lldiv@dividend,f
  7888  0C92  0827               	movf	___lldiv@divisor+1,w
  7889  0C93  3BAB               	subwfb	___lldiv@dividend+1,f
  7890  0C94  0828               	movf	___lldiv@divisor+2,w
  7891  0C95  3BAC               	subwfb	___lldiv@dividend+2,f
  7892  0C96  0829               	movf	___lldiv@divisor+3,w
  7893  0C97  3BAD               	subwfb	___lldiv@dividend+3,f
  7894  0C98  142E               	bsf	___lldiv@quotient,0
  7895  0C99                     l3745:	
  7896  0C99  3001               	movlw	1
  7897  0C9A                     u3765:	
  7898  0C9A  36A9               	lsrf	___lldiv@divisor+3,f
  7899  0C9B  0CA8               	rrf	___lldiv@divisor+2,f
  7900  0C9C  0CA7               	rrf	___lldiv@divisor+1,f
  7901  0C9D  0CA6               	rrf	___lldiv@divisor,f
  7902  0C9E  0B89               	decfsz	9,f
  7903  0C9F  2C9A               	goto	u3765
  7904  0CA0  3001               	movlw	1
  7905  0CA1  02B2               	subwf	___lldiv@counter,f
  7906  0CA2  1D03               	btfss	3,2
  7907  0CA3  2C79               	goto	l3737
  7908  0CA4                     l3749:	
  7909  0CA4  0831               	movf	___lldiv@quotient+3,w
  7910  0CA5  00A9               	movwf	?___lldiv+3
  7911  0CA6  0830               	movf	___lldiv@quotient+2,w
  7912  0CA7  00A8               	movwf	?___lldiv+2
  7913  0CA8  082F               	movf	___lldiv@quotient+1,w
  7914  0CA9  00A7               	movwf	?___lldiv+1
  7915  0CAA  082E               	movf	___lldiv@quotient,w
  7916  0CAB  00A6               	movwf	?___lldiv
  7917  0CAC  0008               	return
  7918  0CAD                     __end_of___lldiv:	
  7919                           
  7920                           	psect	text30
  7921  09ED                     __ptext30:	
  7922 ;; *************** function ___lltoft *****************
  7923 ;; Defined at:
  7924 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  7925 ;; Parameters:    Size  Location     Type
  7926 ;;  c               4   11[BANK0 ] unsigned long 
  7927 ;; Auto vars:     Size  Location     Type
  7928 ;;  exp             1    0[COMMON] unsigned char 
  7929 ;; Return value:  Size  Location     Type
  7930 ;;                  3   11[BANK0 ] float 
  7931 ;; Registers used:
  7932 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  7933 ;; Tracked objects:
  7934 ;;		On entry : 0/0
  7935 ;;		On exit  : 0/0
  7936 ;;		Unchanged: 0/0
  7937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7938 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7939 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7941 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7942 ;;Total ram usage:        5 bytes
  7943 ;; Hardware stack levels used:    1
  7944 ;; Hardware stack levels required when called:    8
  7945 ;; This function calls:
  7946 ;;		___ftpack
  7947 ;; This function is called by:
  7948 ;;		_ftoa
  7949 ;; This function uses a non-reentrant model
  7950 ;;
  7951                           
  7952                           
  7953                           ;psect for function ___lltoft
  7954  09ED                     ___lltoft:	
  7955                           
  7956                           ;incstack = 0
  7957                           ; Regs used in ___lltoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  7958  09ED  308E               	movlw	142
  7959  09EE  00FF               	movwf	127
  7960  09EF  087F               	movf	127,w
  7961  09F0  00F0               	movwf	___lltoft@exp
  7962  09F1                     l4179:	
  7963  09F1  30FF               	movlw	255
  7964  09F2  0020               	movlb	0	; select bank0
  7965  09F3  052E               	andwf	___lltoft@c+3,w
  7966  09F4  1903               	btfsc	3,2
  7967  09F5  2A03               	goto	l4181
  7968  09F6  3001               	movlw	1
  7969  09F7                     u4665:	
  7970  09F7  0020               	movlb	0	; select bank0
  7971  09F8  36AE               	lsrf	___lltoft@c+3,f
  7972  09F9  0CAD               	rrf	___lltoft@c+2,f
  7973  09FA  0CAC               	rrf	___lltoft@c+1,f
  7974  09FB  0CAB               	rrf	___lltoft@c,f
  7975  09FC  0B89               	decfsz	9,f
  7976  09FD  29F7               	goto	u4665
  7977  09FE  3001               	movlw	1
  7978  09FF  00FF               	movwf	127
  7979  0A00  087F               	movf	127,w
  7980  0A01  07F0               	addwf	___lltoft@exp,f
  7981  0A02  29F1               	goto	l4179
  7982  0A03                     l4181:	
  7983  0A03  082B               	movf	___lltoft@c,w
  7984  0A04  00A6               	movwf	___ftpack@arg
  7985  0A05  082C               	movf	___lltoft@c+1,w
  7986  0A06  00A7               	movwf	___ftpack@arg+1
  7987  0A07  082D               	movf	___lltoft@c+2,w
  7988  0A08  00A8               	movwf	___ftpack@arg+2
  7989  0A09  0870               	movf	___lltoft@exp,w
  7990  0A0A  00FF               	movwf	127
  7991  0A0B  087F               	movf	127,w
  7992  0A0C  00A9               	movwf	___ftpack@exp
  7993  0A0D  01AA               	clrf	___ftpack@sign
  7994  0A0E  318C  24AD         	fcall	___ftpack
  7995  0A10  0020               	movlb	0	; select bank0
  7996  0A11  0826               	movf	?___ftpack,w
  7997  0A12  00AB               	movwf	?___lltoft
  7998  0A13  0827               	movf	?___ftpack+1,w
  7999  0A14  00AC               	movwf	?___lltoft+1
  8000  0A15  0828               	movf	?___ftpack+2,w
  8001  0A16  00AD               	movwf	?___lltoft+2
  8002  0A17  0008               	return
  8003  0A18                     __end_of___lltoft:	
  8004                           
  8005                           	psect	text31
  8006  0D12                     __ptext31:	
  8007 ;; *************** function ___fttol *****************
  8008 ;; Defined at:
  8009 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  8010 ;; Parameters:    Size  Location     Type
  8011 ;;  f1              3   23[BANK0 ] float 
  8012 ;; Auto vars:     Size  Location     Type
  8013 ;;  lval            4   28[BANK0 ] unsigned long 
  8014 ;;  exp1            1   32[BANK0 ] unsigned char 
  8015 ;;  sign1           1   27[BANK0 ] unsigned char 
  8016 ;; Return value:  Size  Location     Type
  8017 ;;                  4   23[BANK0 ] long 
  8018 ;; Registers used:
  8019 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8020 ;; Tracked objects:
  8021 ;;		On entry : 0/0
  8022 ;;		On exit  : 0/0
  8023 ;;		Unchanged: 0/0
  8024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8025 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8026 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8028 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8029 ;;Total ram usage:       10 bytes
  8030 ;; Hardware stack levels used:    1
  8031 ;; Hardware stack levels required when called:    7
  8032 ;; This function calls:
  8033 ;;		Nothing
  8034 ;; This function is called by:
  8035 ;;		_ftoa
  8036 ;; This function uses a non-reentrant model
  8037 ;;
  8038                           
  8039                           
  8040                           ;psect for function ___fttol
  8041  0D12                     ___fttol:	
  8042                           
  8043                           ;incstack = 0
  8044                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+9-btemp+11]
  8045  0D12  0020               	movlb	0	; select bank0
  8046  0D13  0837               	movf	___fttol@f1,w
  8047  0D14  00FD               	movwf	125
  8048  0D15  0838               	movf	___fttol@f1+1,w
  8049  0D16  00FE               	movwf	126
  8050  0D17  0839               	movf	___fttol@f1+2,w
  8051  0D18  00FF               	movwf	127
  8052  0D19  1003               	clrc
  8053  0D1A  0D7E               	rlf	126,w
  8054  0D1B  0D7F               	rlf	127,w
  8055  0D1C  00FF               	movwf	127
  8056  0D1D  087F               	movf	127,w
  8057  0D1E  00C0               	movwf	___fttol@exp1
  8058  0D1F  0840               	movf	___fttol@exp1,w
  8059  0D20  1D03               	btfss	3,2
  8060  0D21  2D2B               	goto	l4135
  8061  0D22  3000               	movlw	0
  8062  0D23  00BA               	movwf	?___fttol+3
  8063  0D24  3000               	movlw	0
  8064  0D25  00B9               	movwf	?___fttol+2
  8065  0D26  3000               	movlw	0
  8066  0D27  00B8               	movwf	?___fttol+1
  8067  0D28  3000               	movlw	0
  8068  0D29  00B7               	movwf	?___fttol
  8069  0D2A  0008               	return
  8070  0D2B                     l4135:	
  8071  0D2B  0837               	movf	___fttol@f1,w
  8072  0D2C  00FD               	movwf	125
  8073  0D2D  0838               	movf	___fttol@f1+1,w
  8074  0D2E  00FE               	movwf	126
  8075  0D2F  0839               	movf	___fttol@f1+2,w
  8076  0D30  00FF               	movwf	127
  8077  0D31  3017               	movlw	23
  8078  0D32                     u4575:	
  8079  0D32  36FF               	lsrf	127,f
  8080  0D33  0CFE               	rrf	126,f
  8081  0D34  0CFD               	rrf	125,f
  8082  0D35  0B89               	decfsz	9,f
  8083  0D36  2D32               	goto	u4575
  8084  0D37  087D               	movf	125,w
  8085  0D38  00FF               	movwf	127
  8086  0D39  087F               	movf	127,w
  8087  0D3A  00BB               	movwf	___fttol@sign1
  8088  0D3B  17B8               	bsf	___fttol@f1+1,7
  8089  0D3C  30FF               	movlw	255
  8090  0D3D  05B7               	andwf	___fttol@f1,f
  8091  0D3E  30FF               	movlw	255
  8092  0D3F  05B8               	andwf	___fttol@f1+1,f
  8093  0D40  3000               	movlw	0
  8094  0D41  05B9               	andwf	___fttol@f1+2,f
  8095  0D42  0837               	movf	___fttol@f1,w
  8096  0D43  00BC               	movwf	___fttol@lval
  8097  0D44  0838               	movf	___fttol@f1+1,w
  8098  0D45  00BD               	movwf	___fttol@lval+1
  8099  0D46  0839               	movf	___fttol@f1+2,w
  8100  0D47  00BE               	movwf	___fttol@lval+2
  8101  0D48  01BF               	clrf	___fttol@lval+3
  8102  0D49  308E               	movlw	142
  8103  0D4A  02C0               	subwf	___fttol@exp1,f
  8104  0D4B  1FC0               	btfss	___fttol@exp1,7
  8105  0D4C  2D69               	goto	l4157
  8106  0D4D  0840               	movf	___fttol@exp1,w
  8107  0D4E  3A80               	xorlw	128
  8108  0D4F  3E8F               	addlw	143
  8109  0D50  1803               	skipnc
  8110  0D51  2D5B               	goto	l4153
  8111  0D52  3000               	movlw	0
  8112  0D53  00BA               	movwf	?___fttol+3
  8113  0D54  3000               	movlw	0
  8114  0D55  00B9               	movwf	?___fttol+2
  8115  0D56  3000               	movlw	0
  8116  0D57  00B8               	movwf	?___fttol+1
  8117  0D58  3000               	movlw	0
  8118  0D59  00B7               	movwf	?___fttol
  8119  0D5A  0008               	return
  8120  0D5B                     l4153:	
  8121  0D5B  3001               	movlw	1
  8122  0D5C                     u4605:	
  8123  0D5C  36BF               	lsrf	___fttol@lval+3,f
  8124  0D5D  0CBE               	rrf	___fttol@lval+2,f
  8125  0D5E  0CBD               	rrf	___fttol@lval+1,f
  8126  0D5F  0CBC               	rrf	___fttol@lval,f
  8127  0D60  0B89               	decfsz	9,f
  8128  0D61  2D5C               	goto	u4605
  8129  0D62  3001               	movlw	1
  8130  0D63  00FF               	movwf	127
  8131  0D64  087F               	movf	127,w
  8132  0D65  07C0               	addwf	___fttol@exp1,f
  8133  0D66  1903               	btfsc	3,2
  8134  0D67  2D82               	goto	l4165
  8135  0D68  2D5B               	goto	l4153
  8136  0D69                     l4157:	
  8137  0D69  3018               	movlw	24
  8138  0D6A  0240               	subwf	___fttol@exp1,w
  8139  0D6B  1C03               	skipc
  8140  0D6C  2D7F               	goto	l833
  8141  0D6D  3000               	movlw	0
  8142  0D6E  00BA               	movwf	?___fttol+3
  8143  0D6F  3000               	movlw	0
  8144  0D70  00B9               	movwf	?___fttol+2
  8145  0D71  3000               	movlw	0
  8146  0D72  00B8               	movwf	?___fttol+1
  8147  0D73  3000               	movlw	0
  8148  0D74  00B7               	movwf	?___fttol
  8149  0D75  0008               	return
  8150  0D76                     l4163:	
  8151  0D76  3001               	movlw	1
  8152  0D77                     u4635:	
  8153  0D77  35BC               	lslf	___fttol@lval,f
  8154  0D78  0DBD               	rlf	___fttol@lval+1,f
  8155  0D79  0DBE               	rlf	___fttol@lval+2,f
  8156  0D7A  0DBF               	rlf	___fttol@lval+3,f
  8157  0D7B  0B89               	decfsz	9,f
  8158  0D7C  2D77               	goto	u4635
  8159  0D7D  3001               	movlw	1
  8160  0D7E  02C0               	subwf	___fttol@exp1,f
  8161  0D7F                     l833:	
  8162  0D7F  0840               	movf	___fttol@exp1,w
  8163  0D80  1D03               	btfss	3,2
  8164  0D81  2D76               	goto	l4163
  8165  0D82                     l4165:	
  8166  0D82  083B               	movf	___fttol@sign1,w
  8167  0D83  1903               	btfsc	3,2
  8168  0D84  2D90               	goto	l4169
  8169  0D85  09BC               	comf	___fttol@lval,f
  8170  0D86  09BD               	comf	___fttol@lval+1,f
  8171  0D87  09BE               	comf	___fttol@lval+2,f
  8172  0D88  09BF               	comf	___fttol@lval+3,f
  8173  0D89  0ABC               	incf	___fttol@lval,f
  8174  0D8A  1903               	skipnz
  8175  0D8B  0ABD               	incf	___fttol@lval+1,f
  8176  0D8C  1903               	skipnz
  8177  0D8D  0ABE               	incf	___fttol@lval+2,f
  8178  0D8E  1903               	skipnz
  8179  0D8F  0ABF               	incf	___fttol@lval+3,f
  8180  0D90                     l4169:	
  8181  0D90  083F               	movf	___fttol@lval+3,w
  8182  0D91  00BA               	movwf	?___fttol+3
  8183  0D92  083E               	movf	___fttol@lval+2,w
  8184  0D93  00B9               	movwf	?___fttol+2
  8185  0D94  083D               	movf	___fttol@lval+1,w
  8186  0D95  00B8               	movwf	?___fttol+1
  8187  0D96  083C               	movf	___fttol@lval,w
  8188  0D97  00B7               	movwf	?___fttol
  8189  0D98  0008               	return
  8190  0D99                     __end_of___fttol:	
  8191                           
  8192                           	psect	text32
  8193  08E2                     __ptext32:	
  8194 ;; *************** function ___ftsub *****************
  8195 ;; Defined at:
  8196 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  8197 ;; Parameters:    Size  Location     Type
  8198 ;;  f2              3   23[BANK0 ] float 
  8199 ;;  f1              3   26[BANK0 ] float 
  8200 ;; Auto vars:     Size  Location     Type
  8201 ;;		None
  8202 ;; Return value:  Size  Location     Type
  8203 ;;                  3   23[BANK0 ] float 
  8204 ;; Registers used:
  8205 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8206 ;; Tracked objects:
  8207 ;;		On entry : 0/0
  8208 ;;		On exit  : 0/0
  8209 ;;		Unchanged: 0/0
  8210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8211 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8214 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8215 ;;Total ram usage:        6 bytes
  8216 ;; Hardware stack levels used:    1
  8217 ;; Hardware stack levels required when called:    9
  8218 ;; This function calls:
  8219 ;;		___ftadd
  8220 ;; This function is called by:
  8221 ;;		_ftoa
  8222 ;; This function uses a non-reentrant model
  8223 ;;
  8224                           
  8225                           
  8226                           ;psect for function ___ftsub
  8227  08E2                     ___ftsub:	
  8228                           
  8229                           ;incstack = 0
  8230                           ; Regs used in ___ftsub: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8231  08E2  0020               	movlb	0	; select bank0
  8232  08E3  0839               	movf	___ftsub@f2+2,w
  8233  08E4  0438               	iorwf	___ftsub@f2+1,w
  8234  08E5  0437               	iorwf	___ftsub@f2,w
  8235  08E6  1903               	skipnz
  8236  08E7  28EA               	goto	l4125
  8237  08E8  3080               	movlw	128
  8238  08E9  06B9               	xorwf	___ftsub@f2+2,f
  8239  08EA                     l4125:	
  8240  08EA  083A               	movf	___ftsub@f1,w
  8241  08EB  00AE               	movwf	___ftadd@f1
  8242  08EC  083B               	movf	___ftsub@f1+1,w
  8243  08ED  00AF               	movwf	___ftadd@f1+1
  8244  08EE  083C               	movf	___ftsub@f1+2,w
  8245  08EF  00B0               	movwf	___ftadd@f1+2
  8246  08F0  0837               	movf	___ftsub@f2,w
  8247  08F1  00B1               	movwf	___ftadd@f2
  8248  08F2  0838               	movf	___ftsub@f2+1,w
  8249  08F3  00B2               	movwf	___ftadd@f2+1
  8250  08F4  0839               	movf	___ftsub@f2+2,w
  8251  08F5  00B3               	movwf	___ftadd@f2+2
  8252  08F6  3183  232E         	fcall	___ftadd
  8253  08F8  0020               	movlb	0	; select bank0
  8254  08F9  082E               	movf	?___ftadd,w
  8255  08FA  00B7               	movwf	?___ftsub
  8256  08FB  082F               	movf	?___ftadd+1,w
  8257  08FC  00B8               	movwf	?___ftsub+1
  8258  08FD  0830               	movf	?___ftadd+2,w
  8259  08FE  00B9               	movwf	?___ftsub+2
  8260  08FF  0008               	return
  8261  0900                     __end_of___ftsub:	
  8262                           
  8263                           	psect	text33
  8264  0822                     __ptext33:	
  8265 ;; *************** function ___ftneg *****************
  8266 ;; Defined at:
  8267 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  8268 ;; Parameters:    Size  Location     Type
  8269 ;;  f1              3   44[BANK0 ] float 
  8270 ;; Auto vars:     Size  Location     Type
  8271 ;;		None
  8272 ;; Return value:  Size  Location     Type
  8273 ;;                  3   44[BANK0 ] float 
  8274 ;; Registers used:
  8275 ;;		wreg
  8276 ;; Tracked objects:
  8277 ;;		On entry : 0/0
  8278 ;;		On exit  : 0/0
  8279 ;;		Unchanged: 0/0
  8280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8281 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8284 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8285 ;;Total ram usage:        3 bytes
  8286 ;; Hardware stack levels used:    1
  8287 ;; Hardware stack levels required when called:    7
  8288 ;; This function calls:
  8289 ;;		Nothing
  8290 ;; This function is called by:
  8291 ;;		_loop
  8292 ;;		_ftoa
  8293 ;; This function uses a non-reentrant model
  8294 ;;
  8295                           
  8296                           
  8297                           ;psect for function ___ftneg
  8298  0822                     ___ftneg:	
  8299                           
  8300                           ;incstack = 0
  8301                           ; Regs used in ___ftneg: [wreg]
  8302  0822  0020               	movlb	0	; select bank0
  8303  0823  084E               	movf	___ftneg@f1+2,w
  8304  0824  044D               	iorwf	___ftneg@f1+1,w
  8305  0825  044C               	iorwf	___ftneg@f1,w
  8306  0826  1903               	skipnz
  8307  0827  0008               	return
  8308  0828  3080               	movlw	128
  8309  0829  06CE               	xorwf	___ftneg@f1+2,f
  8310  082A  0008               	return
  8311  082B                     __end_of___ftneg:	
  8312                           
  8313                           	psect	text34
  8314  0517                     __ptext34:	
  8315 ;; *************** function ___ftmul *****************
  8316 ;; Defined at:
  8317 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  8318 ;; Parameters:    Size  Location     Type
  8319 ;;  f1              3   11[BANK0 ] float 
  8320 ;;  f2              3   14[BANK0 ] float 
  8321 ;; Auto vars:     Size  Location     Type
  8322 ;;  f3_as_produc    3   18[BANK0 ] unsigned um
  8323 ;;  sign            1   22[BANK0 ] unsigned char 
  8324 ;;  cntr            1   21[BANK0 ] unsigned char 
  8325 ;;  exp             1   17[BANK0 ] unsigned char 
  8326 ;; Return value:  Size  Location     Type
  8327 ;;                  3   11[BANK0 ] float 
  8328 ;; Registers used:
  8329 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8330 ;; Tracked objects:
  8331 ;;		On entry : 0/0
  8332 ;;		On exit  : 0/0
  8333 ;;		Unchanged: 0/0
  8334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8335 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8336 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8338 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8339 ;;Total ram usage:       12 bytes
  8340 ;; Hardware stack levels used:    1
  8341 ;; Hardware stack levels required when called:    8
  8342 ;; This function calls:
  8343 ;;		___ftpack
  8344 ;; This function is called by:
  8345 ;;		_ftoa
  8346 ;; This function uses a non-reentrant model
  8347 ;;
  8348                           
  8349                           
  8350                           ;psect for function ___ftmul
  8351  0517                     ___ftmul:	
  8352                           
  8353                           ;incstack = 0
  8354                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8355  0517  0020               	movlb	0	; select bank0
  8356  0518  082B               	movf	___ftmul@f1,w
  8357  0519  00FD               	movwf	125
  8358  051A  082C               	movf	___ftmul@f1+1,w
  8359  051B  00FE               	movwf	126
  8360  051C  082D               	movf	___ftmul@f1+2,w
  8361  051D  00FF               	movwf	127
  8362  051E  1003               	clrc
  8363  051F  0D7E               	rlf	126,w
  8364  0520  0D7F               	rlf	127,w
  8365  0521  00FF               	movwf	127
  8366  0522  087F               	movf	127,w
  8367  0523  00B1               	movwf	___ftmul@exp
  8368  0524  0831               	movf	___ftmul@exp,w
  8369  0525  1D03               	btfss	3,2
  8370  0526  2D2E               	goto	l4065
  8371  0527  3000               	movlw	0
  8372  0528  00AB               	movwf	?___ftmul
  8373  0529  3000               	movlw	0
  8374  052A  00AC               	movwf	?___ftmul+1
  8375  052B  3000               	movlw	0
  8376  052C  00AD               	movwf	?___ftmul+2
  8377  052D  0008               	return
  8378  052E                     l4065:	
  8379  052E  082E               	movf	___ftmul@f2,w
  8380  052F  00FD               	movwf	125
  8381  0530  082F               	movf	___ftmul@f2+1,w
  8382  0531  00FE               	movwf	126
  8383  0532  0830               	movf	___ftmul@f2+2,w
  8384  0533  00FF               	movwf	127
  8385  0534  1003               	clrc
  8386  0535  0D7E               	rlf	126,w
  8387  0536  0D7F               	rlf	127,w
  8388  0537  00FF               	movwf	127
  8389  0538  087F               	movf	127,w
  8390  0539  00B6               	movwf	___ftmul@sign
  8391  053A  0836               	movf	___ftmul@sign,w
  8392  053B  1D03               	btfss	3,2
  8393  053C  2D44               	goto	l4071
  8394  053D  3000               	movlw	0
  8395  053E  00AB               	movwf	?___ftmul
  8396  053F  3000               	movlw	0
  8397  0540  00AC               	movwf	?___ftmul+1
  8398  0541  3000               	movlw	0
  8399  0542  00AD               	movwf	?___ftmul+2
  8400  0543  0008               	return
  8401  0544                     l4071:	
  8402  0544  0836               	movf	___ftmul@sign,w
  8403  0545  3E7B               	addlw	123
  8404  0546  00FF               	movwf	127
  8405  0547  087F               	movf	127,w
  8406  0548  07B1               	addwf	___ftmul@exp,f
  8407  0549  082B               	movf	___ftmul@f1,w
  8408  054A  00FD               	movwf	125
  8409  054B  082C               	movf	___ftmul@f1+1,w
  8410  054C  00FE               	movwf	126
  8411  054D  082D               	movf	___ftmul@f1+2,w
  8412  054E  00FF               	movwf	127
  8413  054F  3010               	movlw	16
  8414  0550                     u4445:	
  8415  0550  36FF               	lsrf	127,f
  8416  0551  0CFE               	rrf	126,f
  8417  0552  0CFD               	rrf	125,f
  8418  0553  0B89               	decfsz	9,f
  8419  0554  2D50               	goto	u4445
  8420  0555  087D               	movf	125,w
  8421  0556  00FF               	movwf	127
  8422  0557  087F               	movf	127,w
  8423  0558  00B6               	movwf	___ftmul@sign
  8424  0559  082E               	movf	___ftmul@f2,w
  8425  055A  00FD               	movwf	125
  8426  055B  082F               	movf	___ftmul@f2+1,w
  8427  055C  00FE               	movwf	126
  8428  055D  0830               	movf	___ftmul@f2+2,w
  8429  055E  00FF               	movwf	127
  8430  055F  3010               	movlw	16
  8431  0560                     u4455:	
  8432  0560  36FF               	lsrf	127,f
  8433  0561  0CFE               	rrf	126,f
  8434  0562  0CFD               	rrf	125,f
  8435  0563  0B89               	decfsz	9,f
  8436  0564  2D60               	goto	u4455
  8437  0565  087D               	movf	125,w
  8438  0566  00FF               	movwf	127
  8439  0567  087F               	movf	127,w
  8440  0568  06B6               	xorwf	___ftmul@sign,f
  8441  0569  3080               	movlw	128
  8442  056A  00FF               	movwf	127
  8443  056B  087F               	movf	127,w
  8444  056C  05B6               	andwf	___ftmul@sign,f
  8445  056D  17AC               	bsf	___ftmul@f1+1,7
  8446  056E  17AF               	bsf	___ftmul@f2+1,7
  8447  056F  30FF               	movlw	255
  8448  0570  05AE               	andwf	___ftmul@f2,f
  8449  0571  30FF               	movlw	255
  8450  0572  05AF               	andwf	___ftmul@f2+1,f
  8451  0573  3000               	movlw	0
  8452  0574  05B0               	andwf	___ftmul@f2+2,f
  8453  0575  3000               	movlw	0
  8454  0576  00B2               	movwf	___ftmul@f3_as_product
  8455  0577  3000               	movlw	0
  8456  0578  00B3               	movwf	___ftmul@f3_as_product+1
  8457  0579  3000               	movlw	0
  8458  057A  00B4               	movwf	___ftmul@f3_as_product+2
  8459  057B  3007               	movlw	7
  8460  057C  00FF               	movwf	127
  8461  057D  087F               	movf	127,w
  8462  057E  00B5               	movwf	___ftmul@cntr
  8463  057F                     l4087:	
  8464  057F  1C2B               	btfss	___ftmul@f1,0
  8465  0580  2D87               	goto	l4091
  8466  0581  082E               	movf	___ftmul@f2,w
  8467  0582  07B2               	addwf	___ftmul@f3_as_product,f
  8468  0583  082F               	movf	___ftmul@f2+1,w
  8469  0584  3DB3               	addwfc	___ftmul@f3_as_product+1,f
  8470  0585  0830               	movf	___ftmul@f2+2,w
  8471  0586  3DB4               	addwfc	___ftmul@f3_as_product+2,f
  8472  0587                     l4091:	
  8473  0587  3001               	movlw	1
  8474  0588                     u4475:	
  8475  0588  36AD               	lsrf	___ftmul@f1+2,f
  8476  0589  0CAC               	rrf	___ftmul@f1+1,f
  8477  058A  0CAB               	rrf	___ftmul@f1,f
  8478  058B  0B89               	decfsz	9,f
  8479  058C  2D88               	goto	u4475
  8480  058D  3001               	movlw	1
  8481  058E                     u4485:	
  8482  058E  35AE               	lslf	___ftmul@f2,f
  8483  058F  0DAF               	rlf	___ftmul@f2+1,f
  8484  0590  0DB0               	rlf	___ftmul@f2+2,f
  8485  0591  0B89               	decfsz	9,f
  8486  0592  2D8E               	goto	u4485
  8487  0593  3001               	movlw	1
  8488  0594  02B5               	subwf	___ftmul@cntr,f
  8489  0595  1D03               	btfss	3,2
  8490  0596  2D7F               	goto	l4087
  8491  0597  3009               	movlw	9
  8492  0598  00FF               	movwf	127
  8493  0599  087F               	movf	127,w
  8494  059A  00B5               	movwf	___ftmul@cntr
  8495  059B                     l4099:	
  8496  059B  1C2B               	btfss	___ftmul@f1,0
  8497  059C  2DA3               	goto	l4103
  8498  059D  082E               	movf	___ftmul@f2,w
  8499  059E  07B2               	addwf	___ftmul@f3_as_product,f
  8500  059F  082F               	movf	___ftmul@f2+1,w
  8501  05A0  3DB3               	addwfc	___ftmul@f3_as_product+1,f
  8502  05A1  0830               	movf	___ftmul@f2+2,w
  8503  05A2  3DB4               	addwfc	___ftmul@f3_as_product+2,f
  8504  05A3                     l4103:	
  8505  05A3  3001               	movlw	1
  8506  05A4                     u4515:	
  8507  05A4  36AD               	lsrf	___ftmul@f1+2,f
  8508  05A5  0CAC               	rrf	___ftmul@f1+1,f
  8509  05A6  0CAB               	rrf	___ftmul@f1,f
  8510  05A7  0B89               	decfsz	9,f
  8511  05A8  2DA4               	goto	u4515
  8512  05A9  3001               	movlw	1
  8513  05AA                     u4525:	
  8514  05AA  36B4               	lsrf	___ftmul@f3_as_product+2,f
  8515  05AB  0CB3               	rrf	___ftmul@f3_as_product+1,f
  8516  05AC  0CB2               	rrf	___ftmul@f3_as_product,f
  8517  05AD  0B89               	decfsz	9,f
  8518  05AE  2DAA               	goto	u4525
  8519  05AF  3001               	movlw	1
  8520  05B0  02B5               	subwf	___ftmul@cntr,f
  8521  05B1  1D03               	btfss	3,2
  8522  05B2  2D9B               	goto	l4099
  8523  05B3  0832               	movf	___ftmul@f3_as_product,w
  8524  05B4  00A6               	movwf	___ftpack@arg
  8525  05B5  0833               	movf	___ftmul@f3_as_product+1,w
  8526  05B6  00A7               	movwf	___ftpack@arg+1
  8527  05B7  0834               	movf	___ftmul@f3_as_product+2,w
  8528  05B8  00A8               	movwf	___ftpack@arg+2
  8529  05B9  0831               	movf	___ftmul@exp,w
  8530  05BA  00FF               	movwf	127
  8531  05BB  087F               	movf	127,w
  8532  05BC  00A9               	movwf	___ftpack@exp
  8533  05BD  0836               	movf	___ftmul@sign,w
  8534  05BE  00FF               	movwf	127
  8535  05BF  087F               	movf	127,w
  8536  05C0  00AA               	movwf	___ftpack@sign
  8537  05C1  318C  24AD         	fcall	___ftpack
  8538  05C3  0020               	movlb	0	; select bank0
  8539  05C4  0826               	movf	?___ftpack,w
  8540  05C5  00AB               	movwf	?___ftmul
  8541  05C6  0827               	movf	?___ftpack+1,w
  8542  05C7  00AC               	movwf	?___ftmul+1
  8543  05C8  0828               	movf	?___ftpack+2,w
  8544  05C9  00AD               	movwf	?___ftmul+2
  8545  05CA  0008               	return
  8546  05CB                     __end_of___ftmul:	
  8547                           
  8548                           	psect	text35
  8549  07C3                     __ptext35:	
  8550 ;; *************** function ___ftge *****************
  8551 ;; Defined at:
  8552 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8553 ;; Parameters:    Size  Location     Type
  8554 ;;  ff1             3    6[BANK0 ] float 
  8555 ;;  ff2             3    9[BANK0 ] float 
  8556 ;; Auto vars:     Size  Location     Type
  8557 ;;		None
  8558 ;; Return value:  Size  Location     Type
  8559 ;;		None               void
  8560 ;; Registers used:
  8561 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8562 ;; Tracked objects:
  8563 ;;		On entry : 0/0
  8564 ;;		On exit  : 0/0
  8565 ;;		Unchanged: 0/0
  8566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8567 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8570 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8571 ;;Total ram usage:        6 bytes
  8572 ;; Hardware stack levels used:    1
  8573 ;; Hardware stack levels required when called:    7
  8574 ;; This function calls:
  8575 ;;		Nothing
  8576 ;; This function is called by:
  8577 ;;		_ftoa
  8578 ;; This function uses a non-reentrant model
  8579 ;;
  8580                           
  8581                           
  8582                           ;psect for function ___ftge
  8583  07C3                     ___ftge:	
  8584                           
  8585                           ;incstack = 0
  8586                           ; Regs used in ___ftge: [wreg+status,2+status,0+btemp+9-btemp+11]
  8587  07C3  0020               	movlb	0	; select bank0
  8588  07C4  1FA8               	btfss	___ftge@ff1+2,7
  8589  07C5  2FDA               	goto	l4043
  8590  07C6  0926               	comf	___ftge@ff1,w
  8591  07C7  00FD               	movwf	125
  8592  07C8  0927               	comf	___ftge@ff1+1,w
  8593  07C9  00FE               	movwf	126
  8594  07CA  0928               	comf	___ftge@ff1+2,w
  8595  07CB  00FF               	movwf	127
  8596  07CC  0AFD               	incf	125,f
  8597  07CD  1903               	skipnz
  8598  07CE  0AFE               	incf	126,f
  8599  07CF  1903               	skipnz
  8600  07D0  0AFF               	incf	127,f
  8601  07D1  3000               	movlw	0
  8602  07D2  077D               	addwf	125,w
  8603  07D3  00A6               	movwf	___ftge@ff1
  8604  07D4  3000               	movlw	0
  8605  07D5  3D7E               	addwfc	126,w
  8606  07D6  00A7               	movwf	___ftge@ff1+1
  8607  07D7  3080               	movlw	128
  8608  07D8  3D7F               	addwfc	127,w
  8609  07D9  00A8               	movwf	___ftge@ff1+2
  8610  07DA                     l4043:	
  8611  07DA  1FAB               	btfss	___ftge@ff2+2,7
  8612  07DB  2FF0               	goto	l4047
  8613  07DC  0929               	comf	___ftge@ff2,w
  8614  07DD  00FD               	movwf	125
  8615  07DE  092A               	comf	___ftge@ff2+1,w
  8616  07DF  00FE               	movwf	126
  8617  07E0  092B               	comf	___ftge@ff2+2,w
  8618  07E1  00FF               	movwf	127
  8619  07E2  0AFD               	incf	125,f
  8620  07E3  1903               	skipnz
  8621  07E4  0AFE               	incf	126,f
  8622  07E5  1903               	skipnz
  8623  07E6  0AFF               	incf	127,f
  8624  07E7  3000               	movlw	0
  8625  07E8  077D               	addwf	125,w
  8626  07E9  00A9               	movwf	___ftge@ff2
  8627  07EA  3000               	movlw	0
  8628  07EB  3D7E               	addwfc	126,w
  8629  07EC  00AA               	movwf	___ftge@ff2+1
  8630  07ED  3080               	movlw	128
  8631  07EE  3D7F               	addwfc	127,w
  8632  07EF  00AB               	movwf	___ftge@ff2+2
  8633  07F0                     l4047:	
  8634  07F0  3080               	movlw	128
  8635  07F1  06A8               	xorwf	___ftge@ff1+2,f
  8636  07F2  3080               	movlw	128
  8637  07F3  06AB               	xorwf	___ftge@ff2+2,f
  8638  07F4  082B               	movf	___ftge@ff2+2,w
  8639  07F5  0228               	subwf	___ftge@ff1+2,w
  8640  07F6  1D03               	skipz
  8641  07F7  0008               	return
  8642  07F8  082A               	movf	___ftge@ff2+1,w
  8643  07F9  0227               	subwf	___ftge@ff1+1,w
  8644  07FA  1D03               	skipz
  8645  07FB  0008               	return
  8646  07FC  0829               	movf	___ftge@ff2,w
  8647  07FD  0226               	subwf	___ftge@ff1,w
  8648  07FE  0008               	return
  8649  07FF                     __end_of___ftge:	
  8650                           
  8651                           	psect	text36
  8652  0EC1                     __ptext36:	
  8653 ;; *************** function _hcsr04GetAerage *****************
  8654 ;; Defined at:
  8655 ;;		line 40 in file "HC-SR04.c"
  8656 ;; Parameters:    Size  Location     Type
  8657 ;;		None
  8658 ;; Auto vars:     Size  Location     Type
  8659 ;;  average         3   38[BANK0 ] float 
  8660 ;; Return value:  Size  Location     Type
  8661 ;;                  3   35[BANK0 ] float 
  8662 ;; Registers used:
  8663 ;;		wreg, status,2, status,0, btemp+0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8664 ;; Tracked objects:
  8665 ;;		On entry : 0/0
  8666 ;;		On exit  : 0/0
  8667 ;;		Unchanged: 0/0
  8668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8669 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8670 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8672 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8673 ;;Total ram usage:        6 bytes
  8674 ;; Hardware stack levels used:    1
  8675 ;; Hardware stack levels required when called:    9
  8676 ;; This function calls:
  8677 ;;		___ftadd
  8678 ;;		___ftdiv
  8679 ;;		___lwtoft
  8680 ;;		_sleepMs
  8681 ;; This function is called by:
  8682 ;;		_loop
  8683 ;; This function uses a non-reentrant model
  8684 ;;
  8685                           
  8686                           
  8687                           ;psect for function _hcsr04GetAerage
  8688  0EC1                     _hcsr04GetAerage:	
  8689                           
  8690                           ;HC-SR04.c: 43: float average = 0;
  8691                           
  8692                           ;incstack = 0
  8693                           ; Regs used in _hcsr04GetAerage: [wreg+status,2-btemp+0+btemp+9-btemp+11+pclath+cstack]
  8694  0EC1  3000               	movlw	0
  8695  0EC2  0020               	movlb	0	; select bank0
  8696  0EC3  00C6               	movwf	hcsr04GetAerage@average
  8697  0EC4  3000               	movlw	0
  8698  0EC5  00C7               	movwf	hcsr04GetAerage@average+1
  8699  0EC6  3000               	movlw	0
  8700  0EC7  00C8               	movwf	hcsr04GetAerage@average+2
  8701                           
  8702                           ;HC-SR04.c: 45: rloop = 0;
  8703  0EC8  0022               	movlb	2	; select bank2
  8704  0EC9  01AA               	clrf	_rloop^(0+256)
  8705  0ECA  01AB               	clrf	(_rloop+1)^(0+256)
  8706                           
  8707                           ;HC-SR04.c: 46: rcount = 0;
  8708  0ECB  0021               	movlb	1	; select bank1
  8709  0ECC  01D8               	clrf	_rcount^(0+128)
  8710  0ECD  01D9               	clrf	(_rcount+1)^(0+128)
  8711  0ECE                     l4459:	
  8712                           ;HC-SR04.c: 48: while (rloop++ < 1000){
  8713                           
  8714  0ECE  0022               	movlb	2	; select bank2
  8715  0ECF  082B               	movf	(_rloop+1)^(0+256),w
  8716  0ED0  00FF               	movwf	127
  8717  0ED1  082A               	movf	_rloop^(0+256),w
  8718  0ED2  00FE               	movwf	126
  8719  0ED3  0AAA               	incf	_rloop^(0+256),f
  8720  0ED4  1903               	skipnz
  8721  0ED5  0AAB               	incf	(_rloop+1)^(0+256),f
  8722  0ED6  3003               	movlw	3
  8723  0ED7  027F               	subwf	127,w
  8724  0ED8  30E8               	movlw	232
  8725  0ED9  1903               	skipnz
  8726  0EDA  027E               	subwf	126,w
  8727  0EDB  1803               	btfsc	3,0
  8728  0EDC  2F2D               	goto	l4461
  8729                           
  8730                           ;HC-SR04.c: 51: TMR1L = 0x00;
  8731  0EDD  0020               	movlb	0	; select bank0
  8732  0EDE  0199               	clrf	25	;volatile
  8733                           
  8734                           ;HC-SR04.c: 52: TMR1H = 0x00;
  8735  0EDF  019A               	clrf	26	;volatile
  8736                           
  8737                           ;HC-SR04.c: 55: PORTCbits.RC4 = 1;
  8738  0EE0  160E               	bsf	14,4	;volatile
  8739                           
  8740                           ;HC-SR04.c: 58: _delay((unsigned long)((10)*(32000000/4000000.0)));
  8741  0EE1  301A               	movlw	26
  8742  0EE2                     u5397:	
  8743  0EE2  0B89               	decfsz	9,f
  8744  0EE3  2EE2               	goto	u5397
  8745  0EE4  3200               	nop2
  8746                           
  8747                           ;HC-SR04.c: 61: T1CONbits.TMR1ON = 1;
  8748  0EE5  0020               	movlb	0	; select bank0
  8749  0EE6  141B               	bsf	27,0	;volatile
  8750                           
  8751                           ;HC-SR04.c: 62: waiting = 1;
  8752  0EE7  3001               	movlw	1
  8753  0EE8  00FF               	movwf	127
  8754  0EE9  087F               	movf	127,w
  8755  0EEA  0021               	movlb	1	; select bank1
  8756  0EEB  00DA               	movwf	_waiting^(0+128)	;volatile
  8757                           
  8758                           ;HC-SR04.c: 65: PORTCbits.RC4 = 0;
  8759  0EEC  0020               	movlb	0	; select bank0
  8760  0EED  120E               	bcf	14,4	;volatile
  8761                           
  8762                           ;HC-SR04.c: 69: sleepMs(7);
  8763  0EEE  3007               	movlw	7
  8764  0EEF  00A6               	movwf	sleepMs@milliseconds
  8765  0EF0  3000               	movlw	0
  8766  0EF1  00A7               	movwf	sleepMs@milliseconds+1
  8767  0EF2  3189  219B  318E   	fcall	_sleepMs
  8768                           
  8769                           ;HC-SR04.c: 71: if (!waiting){
  8770  0EF5  0021               	movlb	1	; select bank1
  8771  0EF6  085A               	movf	_waiting^(0+128),w	;volatile
  8772  0EF7  1D03               	btfss	3,2
  8773  0EF8  2F26               	goto	l4455
  8774                           
  8775                           ;HC-SR04.c: 72: average+= TMR1L + (unsigned) (TMR1H << 8);
  8776  0EF9  0020               	movlb	0	; select bank0
  8777  0EFA  081A               	movf	26,w	;volatile
  8778  0EFB  00FE               	movwf	126
  8779  0EFC  01FF               	clrf	127
  8780  0EFD  087E               	movf	126,w
  8781  0EFE  00FF               	movwf	127
  8782  0EFF  01FE               	clrf	126
  8783  0F00  0819               	movf	25,w	;volatile
  8784  0F01  077E               	addwf	126,w
  8785  0F02  00AB               	movwf	___lwtoft@c
  8786  0F03  087F               	movf	127,w
  8787  0F04  1803               	skipnc
  8788  0F05  0A7F               	incf	127,w
  8789  0F06  00AC               	movwf	___lwtoft@c+1
  8790  0F07  3188  2094  318E   	fcall	___lwtoft
  8791  0F0A  0020               	movlb	0	; select bank0
  8792  0F0B  082B               	movf	?___lwtoft,w
  8793  0F0C  00AE               	movwf	___ftadd@f1
  8794  0F0D  082C               	movf	?___lwtoft+1,w
  8795  0F0E  00AF               	movwf	___ftadd@f1+1
  8796  0F0F  082D               	movf	?___lwtoft+2,w
  8797  0F10  00B0               	movwf	___ftadd@f1+2
  8798  0F11  0846               	movf	hcsr04GetAerage@average,w
  8799  0F12  00B1               	movwf	___ftadd@f2
  8800  0F13  0847               	movf	hcsr04GetAerage@average+1,w
  8801  0F14  00B2               	movwf	___ftadd@f2+1
  8802  0F15  0848               	movf	hcsr04GetAerage@average+2,w
  8803  0F16  00B3               	movwf	___ftadd@f2+2
  8804  0F17  3183  232E  318E   	fcall	___ftadd
  8805  0F1A  0020               	movlb	0	; select bank0
  8806  0F1B  082E               	movf	?___ftadd,w
  8807  0F1C  00C6               	movwf	hcsr04GetAerage@average
  8808  0F1D  082F               	movf	?___ftadd+1,w
  8809  0F1E  00C7               	movwf	hcsr04GetAerage@average+1
  8810  0F1F  0830               	movf	?___ftadd+2,w
  8811  0F20  00C8               	movwf	hcsr04GetAerage@average+2
  8812                           
  8813                           ;HC-SR04.c: 73: rcount++;
  8814  0F21  3001               	movlw	1
  8815  0F22  0021               	movlb	1	; select bank1
  8816  0F23  07D8               	addwf	_rcount^(0+128),f
  8817  0F24  3000               	movlw	0
  8818  0F25  3DD9               	addwfc	(_rcount+1)^(0+128),f
  8819  0F26                     l4455:	
  8820                           
  8821                           ;HC-SR04.c: 74: };HC-SR04.c: 76: if (rcount >= 50){
  8822  0F26  3000               	movlw	0
  8823  0F27  0259               	subwf	(_rcount+1)^(0+128),w
  8824  0F28  3032               	movlw	50
  8825  0F29  1903               	skipnz
  8826  0F2A  0258               	subwf	_rcount^(0+128),w
  8827  0F2B  1C03               	skipc
  8828  0F2C  2ECE               	goto	l4459
  8829  0F2D                     l4461:	
  8830                           ;HC-SR04.c: 77: break;
  8831                           
  8832                           
  8833                           ;HC-SR04.c: 78: };HC-SR04.c: 79: };HC-SR04.c: 82: average/= rcount;
  8834  0F2D  0021               	movlb	1	; select bank1
  8835  0F2E  0859               	movf	(_rcount+1)^(0+128),w
  8836  0F2F  0020               	movlb	0	; select bank0
  8837  0F30  00AC               	movwf	___lwtoft@c+1
  8838  0F31  0021               	movlb	1	; select bank1
  8839  0F32  0858               	movf	_rcount^(0+128),w
  8840  0F33  0020               	movlb	0	; select bank0
  8841  0F34  00AB               	movwf	___lwtoft@c
  8842  0F35  3188  2094  318E   	fcall	___lwtoft
  8843  0F38  0020               	movlb	0	; select bank0
  8844  0F39  082B               	movf	?___lwtoft,w
  8845  0F3A  00B7               	movwf	___ftdiv@f2
  8846  0F3B  082C               	movf	?___lwtoft+1,w
  8847  0F3C  00B8               	movwf	___ftdiv@f2+1
  8848  0F3D  082D               	movf	?___lwtoft+2,w
  8849  0F3E  00B9               	movwf	___ftdiv@f2+2
  8850  0F3F  0846               	movf	hcsr04GetAerage@average,w
  8851  0F40  00BA               	movwf	___ftdiv@f1
  8852  0F41  0847               	movf	hcsr04GetAerage@average+1,w
  8853  0F42  00BB               	movwf	___ftdiv@f1+1
  8854  0F43  0848               	movf	hcsr04GetAerage@average+2,w
  8855  0F44  00BC               	movwf	___ftdiv@f1+2
  8856  0F45  3186  2675  318E   	fcall	___ftdiv
  8857  0F48  0020               	movlb	0	; select bank0
  8858  0F49  0837               	movf	?___ftdiv,w
  8859  0F4A  00C6               	movwf	hcsr04GetAerage@average
  8860  0F4B  0838               	movf	?___ftdiv+1,w
  8861  0F4C  00C7               	movwf	hcsr04GetAerage@average+1
  8862  0F4D  0839               	movf	?___ftdiv+2,w
  8863  0F4E  00C8               	movwf	hcsr04GetAerage@average+2
  8864                           
  8865                           ;HC-SR04.c: 84: sleepMs(1);
  8866  0F4F  3001               	movlw	1
  8867  0F50  00A6               	movwf	sleepMs@milliseconds
  8868  0F51  3000               	movlw	0
  8869  0F52  00A7               	movwf	sleepMs@milliseconds+1
  8870  0F53  3189  219B         	fcall	_sleepMs
  8871                           
  8872                           ;HC-SR04.c: 86: return average;
  8873  0F55  0020               	movlb	0	; select bank0
  8874  0F56  0846               	movf	hcsr04GetAerage@average,w
  8875  0F57  00C3               	movwf	?_hcsr04GetAerage
  8876  0F58  0847               	movf	hcsr04GetAerage@average+1,w
  8877  0F59  00C4               	movwf	?_hcsr04GetAerage+1
  8878  0F5A  0848               	movf	hcsr04GetAerage@average+2,w
  8879  0F5B  00C5               	movwf	?_hcsr04GetAerage+2
  8880  0F5C  0008               	return
  8881  0F5D                     __end_of_hcsr04GetAerage:	
  8882                           
  8883                           	psect	text37
  8884  0894                     __ptext37:	
  8885 ;; *************** function ___lwtoft *****************
  8886 ;; Defined at:
  8887 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
  8888 ;; Parameters:    Size  Location     Type
  8889 ;;  c               2   11[BANK0 ] unsigned int 
  8890 ;; Auto vars:     Size  Location     Type
  8891 ;;		None
  8892 ;; Return value:  Size  Location     Type
  8893 ;;                  3   11[BANK0 ] float 
  8894 ;; Registers used:
  8895 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8896 ;; Tracked objects:
  8897 ;;		On entry : 0/0
  8898 ;;		On exit  : 0/0
  8899 ;;		Unchanged: 0/0
  8900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8901 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8904 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8905 ;;Total ram usage:        3 bytes
  8906 ;; Hardware stack levels used:    1
  8907 ;; Hardware stack levels required when called:    8
  8908 ;; This function calls:
  8909 ;;		___ftpack
  8910 ;; This function is called by:
  8911 ;;		_loop
  8912 ;;		_hcsr04GetAerage
  8913 ;; This function uses a non-reentrant model
  8914 ;;
  8915                           
  8916                           
  8917                           ;psect for function ___lwtoft
  8918  0894                     ___lwtoft:	
  8919                           
  8920                           ;incstack = 0
  8921                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8922  0894  0020               	movlb	0	; select bank0
  8923  0895  082B               	movf	___lwtoft@c,w
  8924  0896  00A6               	movwf	___ftpack@arg
  8925  0897  082C               	movf	___lwtoft@c+1,w
  8926  0898  00A7               	movwf	___ftpack@arg+1
  8927  0899  01A8               	clrf	___ftpack@arg+2
  8928  089A  308E               	movlw	142
  8929  089B  00FF               	movwf	127
  8930  089C  087F               	movf	127,w
  8931  089D  00A9               	movwf	___ftpack@exp
  8932  089E  01AA               	clrf	___ftpack@sign
  8933  089F  318C  24AD         	fcall	___ftpack
  8934  08A1  0020               	movlb	0	; select bank0
  8935  08A2  0826               	movf	?___ftpack,w
  8936  08A3  00AB               	movwf	?___lwtoft
  8937  08A4  0827               	movf	?___ftpack+1,w
  8938  08A5  00AC               	movwf	?___lwtoft+1
  8939  08A6  0828               	movf	?___ftpack+2,w
  8940  08A7  00AD               	movwf	?___lwtoft+2
  8941  08A8  0008               	return
  8942  08A9                     __end_of___lwtoft:	
  8943                           
  8944                           	psect	text38
  8945  05CB                     __ptext38:	
  8946 ;; *************** function _getADCValue *****************
  8947 ;; Defined at:
  8948 ;;		line 31 in file "main.c"
  8949 ;; Parameters:    Size  Location     Type
  8950 ;;  channel         1    wreg     unsigned char 
  8951 ;; Auto vars:     Size  Location     Type
  8952 ;;  channel         1   38[BANK0 ] unsigned char 
  8953 ;;  adcSum          3   41[BANK0 ] float 
  8954 ;;  adcLoop         2   39[BANK0 ] unsigned int 
  8955 ;; Return value:  Size  Location     Type
  8956 ;;                  3   35[BANK0 ] float 
  8957 ;; Registers used:
  8958 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8959 ;; Tracked objects:
  8960 ;;		On entry : 0/0
  8961 ;;		On exit  : 0/0
  8962 ;;		Unchanged: 0/0
  8963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8964 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8966 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8967 ;;      Totals:         1       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8968 ;;Total ram usage:       10 bytes
  8969 ;; Hardware stack levels used:    1
  8970 ;; Hardware stack levels required when called:    9
  8971 ;; This function calls:
  8972 ;;		___awtoft
  8973 ;;		___ftadd
  8974 ;;		___ftdiv
  8975 ;;		_sleepMs
  8976 ;; This function is called by:
  8977 ;;		_loop
  8978 ;; This function uses a non-reentrant model
  8979 ;;
  8980                           
  8981                           
  8982                           ;psect for function _getADCValue
  8983  05CB                     _getADCValue:	
  8984                           
  8985                           ;incstack = 0
  8986                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2-btemp+0+btemp+9-btemp+11+pclath+cstack
      +                          ]
  8987                           ;getADCValue@channel stored from wreg
  8988  05CB  0020               	movlb	0	; select bank0
  8989  05CC  00C6               	movwf	getADCValue@channel
  8990                           
  8991                           ;main.c: 34: float adcSum = 0;
  8992  05CD  3000               	movlw	0
  8993  05CE  00C9               	movwf	getADCValue@adcSum
  8994  05CF  3000               	movlw	0
  8995  05D0  00CA               	movwf	getADCValue@adcSum+1
  8996  05D1  3000               	movlw	0
  8997  05D2  00CB               	movwf	getADCValue@adcSum+2
  8998                           
  8999                           ;main.c: 35: unsigned int adcLoop = 1000;
  9000  05D3  30E8               	movlw	232
  9001  05D4  00C7               	movwf	getADCValue@adcLoop
  9002  05D5  3003               	movlw	3
  9003  05D6  00C8               	movwf	getADCValue@adcLoop+1
  9004                           
  9005                           ;main.c: 37: ADCON0bits.CHS = channel;
  9006  05D7  0846               	movf	getADCValue@channel,w
  9007  05D8  00F3               	movwf	??_getADCValue
  9008  05D9  0DF3               	rlf	??_getADCValue,f
  9009  05DA  0DF3               	rlf	??_getADCValue,f
  9010  05DB  0021               	movlb	1	; select bank1
  9011  05DC  081D               	movf	29,w	;volatile
  9012  05DD  0673               	xorwf	??_getADCValue,w
  9013  05DE  3903               	andlw	-253
  9014  05DF  0673               	xorwf	??_getADCValue,w
  9015  05E0  009D               	movwf	29	;volatile
  9016                           
  9017                           ;main.c: 38: FVRCONbits.FVREN = 1;
  9018  05E1  0022               	movlb	2	; select bank2
  9019  05E2  1797               	bsf	23,7	;volatile
  9020                           
  9021                           ;main.c: 39: ADCON0bits.ADON = 1;
  9022  05E3  0021               	movlb	1	; select bank1
  9023  05E4  141D               	bsf	29,0	;volatile
  9024                           
  9025                           ;main.c: 41: sleepMs(1);
  9026  05E5  3001               	movlw	1
  9027  05E6  0020               	movlb	0	; select bank0
  9028  05E7  00A6               	movwf	sleepMs@milliseconds
  9029  05E8  3000               	movlw	0
  9030  05E9  00A7               	movwf	sleepMs@milliseconds+1
  9031  05EA  3189  219B  3185   	fcall	_sleepMs
  9032  05ED                     l4391:	
  9033                           ;main.c: 43: while (adcLoop--){
  9034                           
  9035  05ED  3001               	movlw	1
  9036  05EE  0020               	movlb	0	; select bank0
  9037  05EF  02C7               	subwf	getADCValue@adcLoop,f
  9038  05F0  3000               	movlw	0
  9039  05F1  3BC8               	subwfb	getADCValue@adcLoop+1,f
  9040  05F2  0A47               	incf	getADCValue@adcLoop,w
  9041  05F3  1903               	btfsc	3,2
  9042  05F4  0A48               	incf	getADCValue@adcLoop+1,w
  9043  05F5  1903               	btfsc	3,2
  9044  05F6  2E2C               	goto	l175
  9045                           
  9046                           ;main.c: 45: ADCON0bits.ADGO = 1;
  9047  05F7  0021               	movlb	1	; select bank1
  9048  05F8  149D               	bsf	29,1	;volatile
  9049  05F9                     l4387:	
  9050                           ;main.c: 47: while (ADCON0bits.ADGO){
  9051                           
  9052  05F9  0021               	movlb	1	; select bank1
  9053  05FA  1C9D               	btfss	29,1	;volatile
  9054  05FB  2E05               	goto	l4389
  9055                           
  9056                           ;main.c: 48: sleepMs(1);
  9057  05FC  3001               	movlw	1
  9058  05FD  0020               	movlb	0	; select bank0
  9059  05FE  00A6               	movwf	sleepMs@milliseconds
  9060  05FF  3000               	movlw	0
  9061  0600  00A7               	movwf	sleepMs@milliseconds+1
  9062  0601  3189  219B  3185   	fcall	_sleepMs
  9063  0604  2DF9               	goto	l4387
  9064  0605                     l4389:	
  9065                           
  9066                           ;main.c: 49: };main.c: 51: adcSum+= (ADRESL | (ADRESH << 8));
  9067  0605  081C               	movf	28,w	;volatile
  9068  0606  00FE               	movwf	126
  9069  0607  01FF               	clrf	127
  9070  0608  087E               	movf	126,w
  9071  0609  00FF               	movwf	127
  9072  060A  01FE               	clrf	126
  9073  060B  087E               	movf	126,w
  9074  060C  041B               	iorwf	27,w	;volatile
  9075  060D  0020               	movlb	0	; select bank0
  9076  060E  00AB               	movwf	___awtoft@c
  9077  060F  087F               	movf	127,w
  9078  0610  00AC               	movwf	___awtoft@c+1
  9079  0611  3189  2179  3185   	fcall	___awtoft
  9080  0614  0020               	movlb	0	; select bank0
  9081  0615  082B               	movf	?___awtoft,w
  9082  0616  00AE               	movwf	___ftadd@f1
  9083  0617  082C               	movf	?___awtoft+1,w
  9084  0618  00AF               	movwf	___ftadd@f1+1
  9085  0619  082D               	movf	?___awtoft+2,w
  9086  061A  00B0               	movwf	___ftadd@f1+2
  9087  061B  0849               	movf	getADCValue@adcSum,w
  9088  061C  00B1               	movwf	___ftadd@f2
  9089  061D  084A               	movf	getADCValue@adcSum+1,w
  9090  061E  00B2               	movwf	___ftadd@f2+1
  9091  061F  084B               	movf	getADCValue@adcSum+2,w
  9092  0620  00B3               	movwf	___ftadd@f2+2
  9093  0621  3183  232E  3185   	fcall	___ftadd
  9094  0624  0020               	movlb	0	; select bank0
  9095  0625  082E               	movf	?___ftadd,w
  9096  0626  00C9               	movwf	getADCValue@adcSum
  9097  0627  082F               	movf	?___ftadd+1,w
  9098  0628  00CA               	movwf	getADCValue@adcSum+1
  9099  0629  0830               	movf	?___ftadd+2,w
  9100  062A  00CB               	movwf	getADCValue@adcSum+2
  9101  062B  2DED               	goto	l4391
  9102  062C                     l175:	
  9103                           
  9104                           ;main.c: 53: };main.c: 55: FVRCONbits.FVREN = 0;
  9105  062C  0022               	movlb	2	; select bank2
  9106  062D  1397               	bcf	23,7	;volatile
  9107                           
  9108                           ;main.c: 56: ADCON0bits.ADON = 0;
  9109  062E  0021               	movlb	1	; select bank1
  9110  062F  101D               	bcf	29,0	;volatile
  9111                           
  9112                           ;main.c: 59: adcSum/= 1000;
  9113  0630  3000               	movlw	0
  9114  0631  0020               	movlb	0	; select bank0
  9115  0632  00B7               	movwf	___ftdiv@f2
  9116  0633  307A               	movlw	122
  9117  0634  00B8               	movwf	___ftdiv@f2+1
  9118  0635  3044               	movlw	68
  9119  0636  00B9               	movwf	___ftdiv@f2+2
  9120  0637  0849               	movf	getADCValue@adcSum,w
  9121  0638  00BA               	movwf	___ftdiv@f1
  9122  0639  084A               	movf	getADCValue@adcSum+1,w
  9123  063A  00BB               	movwf	___ftdiv@f1+1
  9124  063B  084B               	movf	getADCValue@adcSum+2,w
  9125  063C  00BC               	movwf	___ftdiv@f1+2
  9126  063D  3186  2675  3185   	fcall	___ftdiv
  9127  0640  0020               	movlb	0	; select bank0
  9128  0641  0837               	movf	?___ftdiv,w
  9129  0642  00C9               	movwf	getADCValue@adcSum
  9130  0643  0838               	movf	?___ftdiv+1,w
  9131  0644  00CA               	movwf	getADCValue@adcSum+1
  9132  0645  0839               	movf	?___ftdiv+2,w
  9133  0646  00CB               	movwf	getADCValue@adcSum+2
  9134                           
  9135                           ;main.c: 62: if (ADCON1bits.ADPREF == 0b11){
  9136  0647  0021               	movlb	1	; select bank1
  9137  0648  081E               	movf	30,w	;volatile
  9138  0649  3903               	andlw	3
  9139  064A  3A03               	xorlw	3
  9140  064B  1903               	btfsc	3,2
  9141  064C  2E66               	goto	l4403
  9142  064D  2E6D               	goto	l4405
  9143  064E                     l4399:	
  9144                           ;main.c: 64: case 0b10:
  9145                           
  9146                           ;main.c: 63: switch (FVRCONbits.ADFVR){
  9147                           
  9148                           
  9149                           ;main.c: 65: adcSum/= 500;
  9150  064E  3000               	movlw	0
  9151  064F  0020               	movlb	0	; select bank0
  9152  0650  00B7               	movwf	___ftdiv@f2
  9153  0651  30FA               	movlw	250
  9154  0652  00B8               	movwf	___ftdiv@f2+1
  9155  0653  3043               	movlw	67
  9156  0654  00B9               	movwf	___ftdiv@f2+2
  9157  0655  0849               	movf	getADCValue@adcSum,w
  9158  0656  00BA               	movwf	___ftdiv@f1
  9159  0657  084A               	movf	getADCValue@adcSum+1,w
  9160  0658  00BB               	movwf	___ftdiv@f1+1
  9161  0659  084B               	movf	getADCValue@adcSum+2,w
  9162  065A  00BC               	movwf	___ftdiv@f1+2
  9163  065B  3186  2675  3185   	fcall	___ftdiv
  9164  065E  0020               	movlb	0	; select bank0
  9165  065F  0837               	movf	?___ftdiv,w
  9166  0660  00C9               	movwf	getADCValue@adcSum
  9167  0661  0838               	movf	?___ftdiv+1,w
  9168  0662  00CA               	movwf	getADCValue@adcSum+1
  9169  0663  0839               	movf	?___ftdiv+2,w
  9170  0664  00CB               	movwf	getADCValue@adcSum+2
  9171                           
  9172                           ;main.c: 67: }
  9173                           
  9174                           ;main.c: 66: break;
  9175  0665  2E6D               	goto	l4405
  9176  0666                     l4403:	
  9177  0666  0022               	movlb	2	; select bank2
  9178  0667  0817               	movf	23,w	;volatile
  9179  0668  3903               	andlw	3
  9180                           
  9181                           ; Switch size 1, requested type "space"
  9182                           ; Number of cases is 1, Range of values is 2 to 2
  9183                           ; switch strategies available:
  9184                           ; Name         Instructions Cycles
  9185                           ; simple_byte            4     3 (average)
  9186                           ; direct_byte           11     9 (fixed)
  9187                           ; jumptable            263     9 (fixed)
  9188                           ;	Chosen strategy is simple_byte
  9189  0669  3A02               	xorlw	2	; case 2
  9190  066A  1903               	skipnz
  9191  066B  2E4E               	goto	l4399
  9192  066C  2E6D               	goto	l4405
  9193  066D                     l4405:	
  9194                           
  9195                           ;main.c: 68: };main.c: 71: return adcSum;
  9196  066D  0020               	movlb	0	; select bank0
  9197  066E  0849               	movf	getADCValue@adcSum,w
  9198  066F  00C3               	movwf	?_getADCValue
  9199  0670  084A               	movf	getADCValue@adcSum+1,w
  9200  0671  00C4               	movwf	?_getADCValue+1
  9201  0672  084B               	movf	getADCValue@adcSum+2,w
  9202  0673  00C5               	movwf	?_getADCValue+2
  9203  0674  0008               	return
  9204  0675                     __end_of_getADCValue:	
  9205                           
  9206                           	psect	text39
  9207  099B                     __ptext39:	
  9208 ;; *************** function _sleepMs *****************
  9209 ;; Defined at:
  9210 ;;		line 36 in file "interface.c"
  9211 ;; Parameters:    Size  Location     Type
  9212 ;;  milliseconds    2    6[BANK0 ] unsigned int 
  9213 ;; Auto vars:     Size  Location     Type
  9214 ;;  wdtps           1    1[COMMON] unsigned char 
  9215 ;; Return value:  Size  Location     Type
  9216 ;;                  1    wreg      void 
  9217 ;; Registers used:
  9218 ;;		wreg, status,2, status,0, btemp+10, btemp+11, pclath, cstack
  9219 ;; Tracked objects:
  9220 ;;		On entry : 0/0
  9221 ;;		On exit  : 0/0
  9222 ;;		Unchanged: 0/0
  9223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9224 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9225 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9226 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9227 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9228 ;;Total ram usage:        4 bytes
  9229 ;; Hardware stack levels used:    1
  9230 ;; Hardware stack levels required when called:    8
  9231 ;; This function calls:
  9232 ;;		_resetWDT
  9233 ;; This function is called by:
  9234 ;;		_getADCValue
  9235 ;;		_sendMessage
  9236 ;;		_nrf24l01SendPacket
  9237 ;;		_hcsr04GetAerage
  9238 ;;		_sleepListren
  9239 ;; This function uses a non-reentrant model
  9240 ;;
  9241                           
  9242                           
  9243                           ;psect for function _sleepMs
  9244  099B                     _sleepMs:	
  9245                           
  9246                           ;interface.c: 38: unsigned char wdtps;;interface.c: 39: for (wdtps = 0; wdtps <= 0b10010
      +                          ; wdtps++){
  9247                           
  9248                           ;incstack = 0
  9249                           ; Regs used in _sleepMs: [wreg+status,2+status,0+btemp+10+btemp+11+pclath+cstack]
  9250  099B  01F1               	clrf	sleepMs@wdtps
  9251  099C  3013               	movlw	19
  9252  099D  0271               	subwf	sleepMs@wdtps,w
  9253  099E  1803               	btfsc	3,0
  9254  099F  29C1               	goto	l3869
  9255  09A0                     l3857:	
  9256                           
  9257                           ;interface.c: 40: if ((milliseconds >> wdtps) & 0b1){
  9258  09A0  0020               	movlb	0	; select bank0
  9259  09A1  0827               	movf	sleepMs@milliseconds+1,w
  9260  09A2  00FF               	movwf	127
  9261  09A3  0826               	movf	sleepMs@milliseconds,w
  9262  09A4  00FE               	movwf	126
  9263  09A5  0A71               	incf	sleepMs@wdtps,w
  9264  09A6  29A9               	goto	u4084
  9265  09A7                     u4085:	
  9266  09A7  36FF               	lsrf	127,f
  9267  09A8  0CFE               	rrf	126,f
  9268  09A9                     u4084:	
  9269  09A9  0B89               	decfsz	9,f
  9270  09AA  29A7               	goto	u4085
  9271  09AB  1C7E               	btfss	126,0
  9272  09AC  29B9               	goto	l3865
  9273                           
  9274                           ;interface.c: 42: WDTCONbits.WDTPS = wdtps;
  9275  09AD  0871               	movf	sleepMs@wdtps,w
  9276  09AE  00F0               	movwf	??_sleepMs
  9277  09AF  0DF0               	rlf	??_sleepMs,f
  9278  09B0  0021               	movlb	1	; select bank1
  9279  09B1  0817               	movf	23,w	;volatile
  9280  09B2  0670               	xorwf	??_sleepMs,w
  9281  09B3  39C1               	andlw	-63
  9282  09B4  0670               	xorwf	??_sleepMs,w
  9283  09B5  0097               	movwf	23	;volatile
  9284  09B6  0063               	sleep	;# 
  9285                           
  9286                           ;interface.c: 44: __nop();
  9287  09B7  0000               	nop
  9288                           
  9289                           ;interface.c: 45: __nop();
  9290  09B8  0000               	nop
  9291  09B9                     l3865:	
  9292  09B9  3001               	movlw	1
  9293  09BA  00FF               	movwf	127
  9294  09BB  087F               	movf	127,w
  9295  09BC  07F1               	addwf	sleepMs@wdtps,f
  9296  09BD  3013               	movlw	19
  9297  09BE  0271               	subwf	sleepMs@wdtps,w
  9298  09BF  1C03               	skipc
  9299  09C0  29A0               	goto	l3857
  9300  09C1                     l3869:	
  9301                           
  9302                           ;interface.c: 50: };interface.c: 51: };interface.c: 53: resetWDT();
  9303  09C1  3188  201B         	fcall	_resetWDT
  9304  09C3  0008               	return
  9305  09C4                     __end_of_sleepMs:	
  9306                           
  9307                           	psect	text40
  9308  081B                     __ptext40:	
  9309 ;; *************** function _resetWDT *****************
  9310 ;; Defined at:
  9311 ;;		line 31 in file "interface.c"
  9312 ;; Parameters:    Size  Location     Type
  9313 ;;		None
  9314 ;; Auto vars:     Size  Location     Type
  9315 ;;		None
  9316 ;; Return value:  Size  Location     Type
  9317 ;;                  1    wreg      void 
  9318 ;; Registers used:
  9319 ;;		wreg, status,2, status,0
  9320 ;; Tracked objects:
  9321 ;;		On entry : 0/0
  9322 ;;		On exit  : 0/0
  9323 ;;		Unchanged: 0/0
  9324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9329 ;;Total ram usage:        0 bytes
  9330 ;; Hardware stack levels used:    1
  9331 ;; Hardware stack levels required when called:    7
  9332 ;; This function calls:
  9333 ;;		Nothing
  9334 ;; This function is called by:
  9335 ;;		_sleepMs
  9336 ;; This function uses a non-reentrant model
  9337 ;;
  9338                           
  9339                           
  9340                           ;psect for function _resetWDT
  9341  081B                     _resetWDT:	
  9342                           
  9343                           ;interface.c: 32: WDTCONbits.WDTPS = 0b01100;
  9344                           
  9345                           ;incstack = 0
  9346                           ; Regs used in _resetWDT: [wreg+status,2+status,0]
  9347  081B  0021               	movlb	1	; select bank1
  9348  081C  0817               	movf	23,w	;volatile
  9349  081D  39C1               	andlw	-63
  9350  081E  3818               	iorlw	24
  9351  081F  0097               	movwf	23	;volatile
  9352  0820  0064               	clrwdt	;# 
  9353  0821  0008               	return
  9354  0822                     __end_of_resetWDT:	
  9355                           
  9356                           	psect	text41
  9357  0675                     __ptext41:	
  9358 ;; *************** function ___ftdiv *****************
  9359 ;; Defined at:
  9360 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  9361 ;; Parameters:    Size  Location     Type
  9362 ;;  f2              3   23[BANK0 ] float 
  9363 ;;  f1              3   26[BANK0 ] float 
  9364 ;; Auto vars:     Size  Location     Type
  9365 ;;  f3              3   30[BANK0 ] float 
  9366 ;;  sign            1   34[BANK0 ] unsigned char 
  9367 ;;  exp             1   33[BANK0 ] unsigned char 
  9368 ;;  cntr            1   29[BANK0 ] unsigned char 
  9369 ;; Return value:  Size  Location     Type
  9370 ;;                  3   23[BANK0 ] float 
  9371 ;; Registers used:
  9372 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9373 ;; Tracked objects:
  9374 ;;		On entry : 0/0
  9375 ;;		On exit  : 0/0
  9376 ;;		Unchanged: 0/0
  9377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9378 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9379 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9380 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9381 ;;      Totals:         1      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9382 ;;Total ram usage:       13 bytes
  9383 ;; Hardware stack levels used:    1
  9384 ;; Hardware stack levels required when called:    8
  9385 ;; This function calls:
  9386 ;;		___ftpack
  9387 ;; This function is called by:
  9388 ;;		_getADCValue
  9389 ;;		_loop
  9390 ;;		_hcsr04GetAerage
  9391 ;; This function uses a non-reentrant model
  9392 ;;
  9393                           
  9394                           
  9395                           ;psect for function ___ftdiv
  9396  0675                     ___ftdiv:	
  9397                           
  9398                           ;incstack = 0
  9399                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9400  0675  0020               	movlb	0	; select bank0
  9401  0676  083A               	movf	___ftdiv@f1,w
  9402  0677  00FD               	movwf	125
  9403  0678  083B               	movf	___ftdiv@f1+1,w
  9404  0679  00FE               	movwf	126
  9405  067A  083C               	movf	___ftdiv@f1+2,w
  9406  067B  00FF               	movwf	127
  9407  067C  1003               	clrc
  9408  067D  0D7E               	rlf	126,w
  9409  067E  0D7F               	rlf	127,w
  9410  067F  00FF               	movwf	127
  9411  0680  087F               	movf	127,w
  9412  0681  00C1               	movwf	___ftdiv@exp
  9413  0682  0841               	movf	___ftdiv@exp,w
  9414  0683  1D03               	btfss	3,2
  9415  0684  2E8C               	goto	l4321
  9416  0685  3000               	movlw	0
  9417  0686  00B7               	movwf	?___ftdiv
  9418  0687  3000               	movlw	0
  9419  0688  00B8               	movwf	?___ftdiv+1
  9420  0689  3000               	movlw	0
  9421  068A  00B9               	movwf	?___ftdiv+2
  9422  068B  0008               	return
  9423  068C                     l4321:	
  9424  068C  0837               	movf	___ftdiv@f2,w
  9425  068D  00FD               	movwf	125
  9426  068E  0838               	movf	___ftdiv@f2+1,w
  9427  068F  00FE               	movwf	126
  9428  0690  0839               	movf	___ftdiv@f2+2,w
  9429  0691  00FF               	movwf	127
  9430  0692  1003               	clrc
  9431  0693  0D7E               	rlf	126,w
  9432  0694  0D7F               	rlf	127,w
  9433  0695  00FF               	movwf	127
  9434  0696  087F               	movf	127,w
  9435  0697  00C2               	movwf	___ftdiv@sign
  9436  0698  0842               	movf	___ftdiv@sign,w
  9437  0699  1D03               	btfss	3,2
  9438  069A  2EA2               	goto	l4327
  9439  069B  3000               	movlw	0
  9440  069C  00B7               	movwf	?___ftdiv
  9441  069D  3000               	movlw	0
  9442  069E  00B8               	movwf	?___ftdiv+1
  9443  069F  3000               	movlw	0
  9444  06A0  00B9               	movwf	?___ftdiv+2
  9445  06A1  0008               	return
  9446  06A2                     l4327:	
  9447  06A2  3000               	movlw	0
  9448  06A3  00BE               	movwf	___ftdiv@f3
  9449  06A4  3000               	movlw	0
  9450  06A5  00BF               	movwf	___ftdiv@f3+1
  9451  06A6  3000               	movlw	0
  9452  06A7  00C0               	movwf	___ftdiv@f3+2
  9453  06A8  3089               	movlw	137
  9454  06A9  0742               	addwf	___ftdiv@sign,w
  9455  06AA  00F2               	movwf	??___ftdiv
  9456  06AB  0872               	movf	??___ftdiv,w
  9457  06AC  02C1               	subwf	___ftdiv@exp,f
  9458  06AD  083A               	movf	___ftdiv@f1,w
  9459  06AE  00FD               	movwf	125
  9460  06AF  083B               	movf	___ftdiv@f1+1,w
  9461  06B0  00FE               	movwf	126
  9462  06B1  083C               	movf	___ftdiv@f1+2,w
  9463  06B2  00FF               	movwf	127
  9464  06B3  3010               	movlw	16
  9465  06B4                     u4815:	
  9466  06B4  36FF               	lsrf	127,f
  9467  06B5  0CFE               	rrf	126,f
  9468  06B6  0CFD               	rrf	125,f
  9469  06B7  0B89               	decfsz	9,f
  9470  06B8  2EB4               	goto	u4815
  9471  06B9  087D               	movf	125,w
  9472  06BA  00FF               	movwf	127
  9473  06BB  087F               	movf	127,w
  9474  06BC  00C2               	movwf	___ftdiv@sign
  9475  06BD  0837               	movf	___ftdiv@f2,w
  9476  06BE  00FD               	movwf	125
  9477  06BF  0838               	movf	___ftdiv@f2+1,w
  9478  06C0  00FE               	movwf	126
  9479  06C1  0839               	movf	___ftdiv@f2+2,w
  9480  06C2  00FF               	movwf	127
  9481  06C3  3010               	movlw	16
  9482  06C4                     u4825:	
  9483  06C4  36FF               	lsrf	127,f
  9484  06C5  0CFE               	rrf	126,f
  9485  06C6  0CFD               	rrf	125,f
  9486  06C7  0B89               	decfsz	9,f
  9487  06C8  2EC4               	goto	u4825
  9488  06C9  087D               	movf	125,w
  9489  06CA  00FF               	movwf	127
  9490  06CB  087F               	movf	127,w
  9491  06CC  06C2               	xorwf	___ftdiv@sign,f
  9492  06CD  3080               	movlw	128
  9493  06CE  00FF               	movwf	127
  9494  06CF  087F               	movf	127,w
  9495  06D0  05C2               	andwf	___ftdiv@sign,f
  9496  06D1  17BB               	bsf	___ftdiv@f1+1,7
  9497  06D2  30FF               	movlw	255
  9498  06D3  05BA               	andwf	___ftdiv@f1,f
  9499  06D4  30FF               	movlw	255
  9500  06D5  05BB               	andwf	___ftdiv@f1+1,f
  9501  06D6  3000               	movlw	0
  9502  06D7  05BC               	andwf	___ftdiv@f1+2,f
  9503  06D8  17B8               	bsf	___ftdiv@f2+1,7
  9504  06D9  30FF               	movlw	255
  9505  06DA  05B7               	andwf	___ftdiv@f2,f
  9506  06DB  30FF               	movlw	255
  9507  06DC  05B8               	andwf	___ftdiv@f2+1,f
  9508  06DD  3000               	movlw	0
  9509  06DE  05B9               	andwf	___ftdiv@f2+2,f
  9510  06DF  3018               	movlw	24
  9511  06E0  00FF               	movwf	127
  9512  06E1  087F               	movf	127,w
  9513  06E2  00BD               	movwf	___ftdiv@cntr
  9514  06E3                     l4345:	
  9515  06E3  3001               	movlw	1
  9516  06E4                     u4835:	
  9517  06E4  35BE               	lslf	___ftdiv@f3,f
  9518  06E5  0DBF               	rlf	___ftdiv@f3+1,f
  9519  06E6  0DC0               	rlf	___ftdiv@f3+2,f
  9520  06E7  0B89               	decfsz	9,f
  9521  06E8  2EE4               	goto	u4835
  9522  06E9  0839               	movf	___ftdiv@f2+2,w
  9523  06EA  023C               	subwf	___ftdiv@f1+2,w
  9524  06EB  1D03               	skipz
  9525  06EC  2EF3               	goto	u4845
  9526  06ED  0838               	movf	___ftdiv@f2+1,w
  9527  06EE  023B               	subwf	___ftdiv@f1+1,w
  9528  06EF  1D03               	skipz
  9529  06F0  2EF3               	goto	u4845
  9530  06F1  0837               	movf	___ftdiv@f2,w
  9531  06F2  023A               	subwf	___ftdiv@f1,w
  9532  06F3                     u4845:	
  9533  06F3  1C03               	skipc
  9534  06F4  2EFC               	goto	l4353
  9535  06F5  0837               	movf	___ftdiv@f2,w
  9536  06F6  02BA               	subwf	___ftdiv@f1,f
  9537  06F7  0838               	movf	___ftdiv@f2+1,w
  9538  06F8  3BBB               	subwfb	___ftdiv@f1+1,f
  9539  06F9  0839               	movf	___ftdiv@f2+2,w
  9540  06FA  3BBC               	subwfb	___ftdiv@f1+2,f
  9541  06FB  143E               	bsf	___ftdiv@f3,0
  9542  06FC                     l4353:	
  9543  06FC  3001               	movlw	1
  9544  06FD                     u4855:	
  9545  06FD  35BA               	lslf	___ftdiv@f1,f
  9546  06FE  0DBB               	rlf	___ftdiv@f1+1,f
  9547  06FF  0DBC               	rlf	___ftdiv@f1+2,f
  9548  0700  0B89               	decfsz	9,f
  9549  0701  2EFD               	goto	u4855
  9550  0702  3001               	movlw	1
  9551  0703  02BD               	subwf	___ftdiv@cntr,f
  9552  0704  1D03               	btfss	3,2
  9553  0705  2EE3               	goto	l4345
  9554  0706  083E               	movf	___ftdiv@f3,w
  9555  0707  00A6               	movwf	___ftpack@arg
  9556  0708  083F               	movf	___ftdiv@f3+1,w
  9557  0709  00A7               	movwf	___ftpack@arg+1
  9558  070A  0840               	movf	___ftdiv@f3+2,w
  9559  070B  00A8               	movwf	___ftpack@arg+2
  9560  070C  0841               	movf	___ftdiv@exp,w
  9561  070D  00FF               	movwf	127
  9562  070E  087F               	movf	127,w
  9563  070F  00A9               	movwf	___ftpack@exp
  9564  0710  0842               	movf	___ftdiv@sign,w
  9565  0711  00FF               	movwf	127
  9566  0712  087F               	movf	127,w
  9567  0713  00AA               	movwf	___ftpack@sign
  9568  0714  318C  24AD         	fcall	___ftpack
  9569  0716  0020               	movlb	0	; select bank0
  9570  0717  0826               	movf	?___ftpack,w
  9571  0718  00B7               	movwf	?___ftdiv
  9572  0719  0827               	movf	?___ftpack+1,w
  9573  071A  00B8               	movwf	?___ftdiv+1
  9574  071B  0828               	movf	?___ftpack+2,w
  9575  071C  00B9               	movwf	?___ftdiv+2
  9576  071D  0008               	return
  9577  071E                     __end_of___ftdiv:	
  9578                           
  9579                           	psect	text42
  9580  032E                     __ptext42:	
  9581 ;; *************** function ___ftadd *****************
  9582 ;; Defined at:
  9583 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  9584 ;; Parameters:    Size  Location     Type
  9585 ;;  f1              3   14[BANK0 ] float 
  9586 ;;  f2              3   17[BANK0 ] float 
  9587 ;; Auto vars:     Size  Location     Type
  9588 ;;  exp1            1   22[BANK0 ] unsigned char 
  9589 ;;  exp2            1   21[BANK0 ] unsigned char 
  9590 ;;  sign            1   20[BANK0 ] unsigned char 
  9591 ;; Return value:  Size  Location     Type
  9592 ;;                  3   14[BANK0 ] float 
  9593 ;; Registers used:
  9594 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9595 ;; Tracked objects:
  9596 ;;		On entry : 0/0
  9597 ;;		On exit  : 0/0
  9598 ;;		Unchanged: 0/0
  9599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9600 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9601 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9602 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9603 ;;      Totals:         1       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9604 ;;Total ram usage:       10 bytes
  9605 ;; Hardware stack levels used:    1
  9606 ;; Hardware stack levels required when called:    8
  9607 ;; This function calls:
  9608 ;;		___ftpack
  9609 ;; This function is called by:
  9610 ;;		_getADCValue
  9611 ;;		_loop
  9612 ;;		_hcsr04GetAerage
  9613 ;;		___ftsub
  9614 ;; This function uses a non-reentrant model
  9615 ;;
  9616                           
  9617                           
  9618                           ;psect for function ___ftadd
  9619  032E                     ___ftadd:	
  9620                           
  9621                           ;incstack = 0
  9622                           ; Regs used in ___ftadd: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9623  032E  0020               	movlb	0	; select bank0
  9624  032F  082E               	movf	___ftadd@f1,w
  9625  0330  00FD               	movwf	125
  9626  0331  082F               	movf	___ftadd@f1+1,w
  9627  0332  00FE               	movwf	126
  9628  0333  0830               	movf	___ftadd@f1+2,w
  9629  0334  00FF               	movwf	127
  9630  0335  1003               	clrc
  9631  0336  0D7E               	rlf	126,w
  9632  0337  0D7F               	rlf	127,w
  9633  0338  00FF               	movwf	127
  9634  0339  087F               	movf	127,w
  9635  033A  00B6               	movwf	___ftadd@exp1
  9636  033B  0831               	movf	___ftadd@f2,w
  9637  033C  00FD               	movwf	125
  9638  033D  0832               	movf	___ftadd@f2+1,w
  9639  033E  00FE               	movwf	126
  9640  033F  0833               	movf	___ftadd@f2+2,w
  9641  0340  00FF               	movwf	127
  9642  0341  1003               	clrc
  9643  0342  0D7E               	rlf	126,w
  9644  0343  0D7F               	rlf	127,w
  9645  0344  00FF               	movwf	127
  9646  0345  087F               	movf	127,w
  9647  0346  00B5               	movwf	___ftadd@exp2
  9648  0347  0836               	movf	___ftadd@exp1,w
  9649  0348  1903               	btfsc	3,2
  9650  0349  2B56               	goto	l3761
  9651  034A  0835               	movf	___ftadd@exp2,w
  9652  034B  0236               	subwf	___ftadd@exp1,w
  9653  034C  1803               	skipnc
  9654  034D  2B5D               	goto	l3765
  9655  034E  0336               	decf	___ftadd@exp1,w
  9656  034F  3AFF               	xorlw	255
  9657  0350  0735               	addwf	___ftadd@exp2,w
  9658  0351  00F1               	movwf	??___ftadd
  9659  0352  3019               	movlw	25
  9660  0353  0271               	subwf	??___ftadd,w
  9661  0354  1C03               	skipc
  9662  0355  2B5D               	goto	l3765
  9663  0356                     l3761:	
  9664  0356  0831               	movf	___ftadd@f2,w
  9665  0357  00AE               	movwf	?___ftadd
  9666  0358  0832               	movf	___ftadd@f2+1,w
  9667  0359  00AF               	movwf	?___ftadd+1
  9668  035A  0833               	movf	___ftadd@f2+2,w
  9669  035B  00B0               	movwf	?___ftadd+2
  9670  035C  0008               	return
  9671  035D                     l3765:	
  9672  035D  0835               	movf	___ftadd@exp2,w
  9673  035E  1903               	btfsc	3,2
  9674  035F  0008               	return
  9675  0360  0836               	movf	___ftadd@exp1,w
  9676  0361  0235               	subwf	___ftadd@exp2,w
  9677  0362  1803               	skipnc
  9678  0363  2B6C               	goto	l3771
  9679  0364  0335               	decf	___ftadd@exp2,w
  9680  0365  3AFF               	xorlw	255
  9681  0366  0736               	addwf	___ftadd@exp1,w
  9682  0367  00F1               	movwf	??___ftadd
  9683  0368  3019               	movlw	25
  9684  0369  0271               	subwf	??___ftadd,w
  9685  036A  1803               	btfsc	3,0
  9686  036B  0008               	return
  9687  036C                     l3771:	
  9688  036C  3006               	movlw	6
  9689  036D  00FF               	movwf	127
  9690  036E  087F               	movf	127,w
  9691  036F  00B4               	movwf	___ftadd@sign
  9692  0370  1BB0               	btfsc	___ftadd@f1+2,7
  9693  0371  17B4               	bsf	___ftadd@sign,7
  9694  0372  1BB3               	btfsc	___ftadd@f2+2,7
  9695  0373  1734               	bsf	___ftadd@sign,6
  9696  0374  17AF               	bsf	___ftadd@f1+1,7
  9697  0375  30FF               	movlw	255
  9698  0376  05AE               	andwf	___ftadd@f1,f
  9699  0377  30FF               	movlw	255
  9700  0378  05AF               	andwf	___ftadd@f1+1,f
  9701  0379  3000               	movlw	0
  9702  037A  05B0               	andwf	___ftadd@f1+2,f
  9703  037B  17B2               	bsf	___ftadd@f2+1,7
  9704  037C  30FF               	movlw	255
  9705  037D  05B1               	andwf	___ftadd@f2,f
  9706  037E  30FF               	movlw	255
  9707  037F  05B2               	andwf	___ftadd@f2+1,f
  9708  0380  3000               	movlw	0
  9709  0381  05B3               	andwf	___ftadd@f2+2,f
  9710  0382  0835               	movf	___ftadd@exp2,w
  9711  0383  0236               	subwf	___ftadd@exp1,w
  9712  0384  1803               	skipnc
  9713  0385  2BA8               	goto	l3795
  9714  0386                     l3783:	
  9715  0386  3001               	movlw	1
  9716  0387                     u3875:	
  9717  0387  35B1               	lslf	___ftadd@f2,f
  9718  0388  0DB2               	rlf	___ftadd@f2+1,f
  9719  0389  0DB3               	rlf	___ftadd@f2+2,f
  9720  038A  0B89               	decfsz	9,f
  9721  038B  2B87               	goto	u3875
  9722  038C  3001               	movlw	1
  9723  038D  02B5               	subwf	___ftadd@exp2,f
  9724  038E  0835               	movf	___ftadd@exp2,w
  9725  038F  0636               	xorwf	___ftadd@exp1,w
  9726  0390  1903               	skipnz
  9727  0391  2BA3               	goto	l3793
  9728  0392  3001               	movlw	1
  9729  0393  02B4               	subwf	___ftadd@sign,f
  9730  0394  0834               	movf	___ftadd@sign,w
  9731  0395  3907               	andlw	7
  9732  0396  1903               	btfsc	3,2
  9733  0397  2BA3               	goto	l3793
  9734  0398  2B86               	goto	l3783
  9735  0399                     l3789:	
  9736  0399  3001               	movlw	1
  9737  039A                     u3905:	
  9738  039A  36B0               	lsrf	___ftadd@f1+2,f
  9739  039B  0CAF               	rrf	___ftadd@f1+1,f
  9740  039C  0CAE               	rrf	___ftadd@f1,f
  9741  039D  0B89               	decfsz	9,f
  9742  039E  2B9A               	goto	u3905
  9743  039F  3001               	movlw	1
  9744  03A0  00FF               	movwf	127
  9745  03A1  087F               	movf	127,w
  9746  03A2  07B6               	addwf	___ftadd@exp1,f
  9747  03A3                     l3793:	
  9748  03A3  0836               	movf	___ftadd@exp1,w
  9749  03A4  0635               	xorwf	___ftadd@exp2,w
  9750  03A5  1903               	btfsc	3,2
  9751  03A6  2BCD               	goto	l773
  9752  03A7  2B99               	goto	l3789
  9753  03A8                     l3795:	
  9754  03A8  0836               	movf	___ftadd@exp1,w
  9755  03A9  0235               	subwf	___ftadd@exp2,w
  9756  03AA  1803               	skipnc
  9757  03AB  2BCD               	goto	l773
  9758  03AC                     l3797:	
  9759  03AC  3001               	movlw	1
  9760  03AD                     u3935:	
  9761  03AD  35AE               	lslf	___ftadd@f1,f
  9762  03AE  0DAF               	rlf	___ftadd@f1+1,f
  9763  03AF  0DB0               	rlf	___ftadd@f1+2,f
  9764  03B0  0B89               	decfsz	9,f
  9765  03B1  2BAD               	goto	u3935
  9766  03B2  3001               	movlw	1
  9767  03B3  02B6               	subwf	___ftadd@exp1,f
  9768  03B4  0835               	movf	___ftadd@exp2,w
  9769  03B5  0636               	xorwf	___ftadd@exp1,w
  9770  03B6  1903               	skipnz
  9771  03B7  2BC9               	goto	l3807
  9772  03B8  3001               	movlw	1
  9773  03B9  02B4               	subwf	___ftadd@sign,f
  9774  03BA  0834               	movf	___ftadd@sign,w
  9775  03BB  3907               	andlw	7
  9776  03BC  1903               	btfsc	3,2
  9777  03BD  2BC9               	goto	l3807
  9778  03BE  2BAC               	goto	l3797
  9779  03BF                     l3803:	
  9780  03BF  3001               	movlw	1
  9781  03C0                     u3965:	
  9782  03C0  36B3               	lsrf	___ftadd@f2+2,f
  9783  03C1  0CB2               	rrf	___ftadd@f2+1,f
  9784  03C2  0CB1               	rrf	___ftadd@f2,f
  9785  03C3  0B89               	decfsz	9,f
  9786  03C4  2BC0               	goto	u3965
  9787  03C5  3001               	movlw	1
  9788  03C6  00FF               	movwf	127
  9789  03C7  087F               	movf	127,w
  9790  03C8  07B5               	addwf	___ftadd@exp2,f
  9791  03C9                     l3807:	
  9792  03C9  0836               	movf	___ftadd@exp1,w
  9793  03CA  0635               	xorwf	___ftadd@exp2,w
  9794  03CB  1D03               	skipz
  9795  03CC  2BBF               	goto	l3803
  9796  03CD                     l773:	
  9797  03CD  1FB4               	btfss	___ftadd@sign,7
  9798  03CE  2BDF               	goto	l3811
  9799  03CF  30FF               	movlw	255
  9800  03D0  06AE               	xorwf	___ftadd@f1,f
  9801  03D1  30FF               	movlw	255
  9802  03D2  06AF               	xorwf	___ftadd@f1+1,f
  9803  03D3  30FF               	movlw	255
  9804  03D4  06B0               	xorwf	___ftadd@f1+2,f
  9805  03D5  3001               	movlw	1
  9806  03D6  07AE               	addwf	___ftadd@f1,f
  9807  03D7  3000               	movlw	0
  9808  03D8  1803               	skipnc
  9809  03D9  3001               	movlw	1
  9810  03DA  07AF               	addwf	___ftadd@f1+1,f
  9811  03DB  3000               	movlw	0
  9812  03DC  1803               	skipnc
  9813  03DD  3001               	movlw	1
  9814  03DE  07B0               	addwf	___ftadd@f1+2,f
  9815  03DF                     l3811:	
  9816  03DF  1F34               	btfss	___ftadd@sign,6
  9817  03E0  2BF1               	goto	l3815
  9818  03E1  30FF               	movlw	255
  9819  03E2  06B1               	xorwf	___ftadd@f2,f
  9820  03E3  30FF               	movlw	255
  9821  03E4  06B2               	xorwf	___ftadd@f2+1,f
  9822  03E5  30FF               	movlw	255
  9823  03E6  06B3               	xorwf	___ftadd@f2+2,f
  9824  03E7  3001               	movlw	1
  9825  03E8  07B1               	addwf	___ftadd@f2,f
  9826  03E9  3000               	movlw	0
  9827  03EA  1803               	skipnc
  9828  03EB  3001               	movlw	1
  9829  03EC  07B2               	addwf	___ftadd@f2+1,f
  9830  03ED  3000               	movlw	0
  9831  03EE  1803               	skipnc
  9832  03EF  3001               	movlw	1
  9833  03F0  07B3               	addwf	___ftadd@f2+2,f
  9834  03F1                     l3815:	
  9835  03F1  01B4               	clrf	___ftadd@sign
  9836  03F2  082E               	movf	___ftadd@f1,w
  9837  03F3  07B1               	addwf	___ftadd@f2,f
  9838  03F4  082F               	movf	___ftadd@f1+1,w
  9839  03F5  3DB2               	addwfc	___ftadd@f2+1,f
  9840  03F6  0830               	movf	___ftadd@f1+2,w
  9841  03F7  3DB3               	addwfc	___ftadd@f2+2,f
  9842  03F8  1FB3               	btfss	___ftadd@f2+2,7
  9843  03F9  2C0C               	goto	l3825
  9844  03FA  30FF               	movlw	255
  9845  03FB  06B1               	xorwf	___ftadd@f2,f
  9846  03FC  30FF               	movlw	255
  9847  03FD  06B2               	xorwf	___ftadd@f2+1,f
  9848  03FE  30FF               	movlw	255
  9849  03FF  06B3               	xorwf	___ftadd@f2+2,f
  9850  0400  3001               	movlw	1
  9851  0401  07B1               	addwf	___ftadd@f2,f
  9852  0402  3000               	movlw	0
  9853  0403  1803               	skipnc
  9854  0404  3001               	movlw	1
  9855  0405  07B2               	addwf	___ftadd@f2+1,f
  9856  0406  3000               	movlw	0
  9857  0407  1803               	skipnc
  9858  0408  3001               	movlw	1
  9859  0409  07B3               	addwf	___ftadd@f2+2,f
  9860  040A  01B4               	clrf	___ftadd@sign
  9861  040B  0AB4               	incf	___ftadd@sign,f
  9862  040C                     l3825:	
  9863  040C  0831               	movf	___ftadd@f2,w
  9864  040D  00A6               	movwf	___ftpack@arg
  9865  040E  0832               	movf	___ftadd@f2+1,w
  9866  040F  00A7               	movwf	___ftpack@arg+1
  9867  0410  0833               	movf	___ftadd@f2+2,w
  9868  0411  00A8               	movwf	___ftpack@arg+2
  9869  0412  0836               	movf	___ftadd@exp1,w
  9870  0413  00FF               	movwf	127
  9871  0414  087F               	movf	127,w
  9872  0415  00A9               	movwf	___ftpack@exp
  9873  0416  0834               	movf	___ftadd@sign,w
  9874  0417  00FF               	movwf	127
  9875  0418  087F               	movf	127,w
  9876  0419  00AA               	movwf	___ftpack@sign
  9877  041A  318C  24AD         	fcall	___ftpack
  9878  041C  0020               	movlb	0	; select bank0
  9879  041D  0826               	movf	?___ftpack,w
  9880  041E  00AE               	movwf	?___ftadd
  9881  041F  0827               	movf	?___ftpack+1,w
  9882  0420  00AF               	movwf	?___ftadd+1
  9883  0421  0828               	movf	?___ftpack+2,w
  9884  0422  00B0               	movwf	?___ftadd+2
  9885  0423  0008               	return
  9886  0424                     __end_of___ftadd:	
  9887                           
  9888                           	psect	text43
  9889  0979                     __ptext43:	
  9890 ;; *************** function ___awtoft *****************
  9891 ;; Defined at:
  9892 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9893 ;; Parameters:    Size  Location     Type
  9894 ;;  c               2   11[BANK0 ] int 
  9895 ;; Auto vars:     Size  Location     Type
  9896 ;;  sign            1    0[COMMON] unsigned char 
  9897 ;; Return value:  Size  Location     Type
  9898 ;;                  3   11[BANK0 ] float 
  9899 ;; Registers used:
  9900 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9901 ;; Tracked objects:
  9902 ;;		On entry : 0/0
  9903 ;;		On exit  : 0/0
  9904 ;;		Unchanged: 0/0
  9905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9906 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9907 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9909 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9910 ;;Total ram usage:        4 bytes
  9911 ;; Hardware stack levels used:    1
  9912 ;; Hardware stack levels required when called:    8
  9913 ;; This function calls:
  9914 ;;		___ftpack
  9915 ;; This function is called by:
  9916 ;;		_getADCValue
  9917 ;; This function uses a non-reentrant model
  9918 ;;
  9919                           
  9920                           
  9921                           ;psect for function ___awtoft
  9922  0979                     ___awtoft:	
  9923                           
  9924                           ;incstack = 0
  9925                           ; Regs used in ___awtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9926  0979  01F0               	clrf	___awtoft@sign
  9927  097A  0020               	movlb	0	; select bank0
  9928  097B  1FAC               	btfss	___awtoft@c+1,7
  9929  097C  2984               	goto	l4311
  9930  097D  09AB               	comf	___awtoft@c,f
  9931  097E  09AC               	comf	___awtoft@c+1,f
  9932  097F  0AAB               	incf	___awtoft@c,f
  9933  0980  1903               	skipnz
  9934  0981  0AAC               	incf	___awtoft@c+1,f
  9935  0982  01F0               	clrf	___awtoft@sign
  9936  0983  0AF0               	incf	___awtoft@sign,f
  9937  0984                     l4311:	
  9938  0984  082B               	movf	___awtoft@c,w
  9939  0985  00A6               	movwf	___ftpack@arg
  9940  0986  082C               	movf	___awtoft@c+1,w
  9941  0987  00A7               	movwf	___ftpack@arg+1
  9942  0988  01A8               	clrf	___ftpack@arg+2
  9943  0989  308E               	movlw	142
  9944  098A  00FF               	movwf	127
  9945  098B  087F               	movf	127,w
  9946  098C  00A9               	movwf	___ftpack@exp
  9947  098D  0870               	movf	___awtoft@sign,w
  9948  098E  00FF               	movwf	127
  9949  098F  087F               	movf	127,w
  9950  0990  00AA               	movwf	___ftpack@sign
  9951  0991  318C  24AD         	fcall	___ftpack
  9952  0993  0020               	movlb	0	; select bank0
  9953  0994  0826               	movf	?___ftpack,w
  9954  0995  00AB               	movwf	?___awtoft
  9955  0996  0827               	movf	?___ftpack+1,w
  9956  0997  00AC               	movwf	?___awtoft+1
  9957  0998  0828               	movf	?___ftpack+2,w
  9958  0999  00AD               	movwf	?___awtoft+2
  9959  099A  0008               	return
  9960  099B                     __end_of___awtoft:	
  9961                           
  9962                           	psect	text44
  9963  0CAD                     __ptext44:	
  9964 ;; *************** function ___ftpack *****************
  9965 ;; Defined at:
  9966 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  9967 ;; Parameters:    Size  Location     Type
  9968 ;;  arg             3    6[BANK0 ] unsigned um
  9969 ;;  exp             1    9[BANK0 ] unsigned char 
  9970 ;;  sign            1   10[BANK0 ] unsigned char 
  9971 ;; Auto vars:     Size  Location     Type
  9972 ;;		None
  9973 ;; Return value:  Size  Location     Type
  9974 ;;                  3    6[BANK0 ] float 
  9975 ;; Registers used:
  9976 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  9977 ;; Tracked objects:
  9978 ;;		On entry : 0/0
  9979 ;;		On exit  : 0/0
  9980 ;;		Unchanged: 0/0
  9981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9982 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9985 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9986 ;;Total ram usage:        5 bytes
  9987 ;; Hardware stack levels used:    1
  9988 ;; Hardware stack levels required when called:    7
  9989 ;; This function calls:
  9990 ;;		Nothing
  9991 ;; This function is called by:
  9992 ;;		___awtoft
  9993 ;;		___ftadd
  9994 ;;		___ftdiv
  9995 ;;		___ftmul
  9996 ;;		___lltoft
  9997 ;;		___lwtoft
  9998 ;; This function uses a non-reentrant model
  9999 ;;
 10000                           
 10001                           
 10002                           ;psect for function ___ftpack
 10003  0CAD                     ___ftpack:	
 10004                           
 10005                           ;incstack = 0
 10006                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+9-btemp+11]
 10007  0CAD  0020               	movlb	0	; select bank0
 10008  0CAE  0829               	movf	___ftpack@exp,w
 10009  0CAF  1903               	btfsc	3,2
 10010  0CB0  2CB6               	goto	l3657
 10011  0CB1  0828               	movf	___ftpack@arg+2,w
 10012  0CB2  0427               	iorwf	___ftpack@arg+1,w
 10013  0CB3  0426               	iorwf	___ftpack@arg,w
 10014  0CB4  1D03               	skipz
 10015  0CB5  2CC7               	goto	l3665
 10016  0CB6                     l3657:	
 10017  0CB6  3000               	movlw	0
 10018  0CB7  00A6               	movwf	?___ftpack
 10019  0CB8  3000               	movlw	0
 10020  0CB9  00A7               	movwf	?___ftpack+1
 10021  0CBA  3000               	movlw	0
 10022  0CBB  00A8               	movwf	?___ftpack+2
 10023  0CBC  0008               	return
 10024  0CBD                     l3661:	
 10025  0CBD  3001               	movlw	1
 10026  0CBE  00FF               	movwf	127
 10027  0CBF  087F               	movf	127,w
 10028  0CC0  07A9               	addwf	___ftpack@exp,f
 10029  0CC1  3001               	movlw	1
 10030  0CC2                     u3555:	
 10031  0CC2  36A8               	lsrf	___ftpack@arg+2,f
 10032  0CC3  0CA7               	rrf	___ftpack@arg+1,f
 10033  0CC4  0CA6               	rrf	___ftpack@arg,f
 10034  0CC5  0B89               	decfsz	9,f
 10035  0CC6  2CC2               	goto	u3555
 10036  0CC7                     l3665:	
 10037  0CC7  30FE               	movlw	254
 10038  0CC8  0528               	andwf	___ftpack@arg+2,w
 10039  0CC9  1903               	btfsc	3,2
 10040  0CCA  2CE0               	goto	l3673
 10041  0CCB  2CBD               	goto	l3661
 10042  0CCC                     l3667:	
 10043  0CCC  3001               	movlw	1
 10044  0CCD  00FF               	movwf	127
 10045  0CCE  087F               	movf	127,w
 10046  0CCF  07A9               	addwf	___ftpack@exp,f
 10047  0CD0  3001               	movlw	1
 10048  0CD1  07A6               	addwf	___ftpack@arg,f
 10049  0CD2  3000               	movlw	0
 10050  0CD3  1803               	skipnc
 10051  0CD4  3001               	movlw	1
 10052  0CD5  07A7               	addwf	___ftpack@arg+1,f
 10053  0CD6  3000               	movlw	0
 10054  0CD7  1803               	skipnc
 10055  0CD8  3001               	movlw	1
 10056  0CD9  07A8               	addwf	___ftpack@arg+2,f
 10057  0CDA  3001               	movlw	1
 10058  0CDB                     u3575:	
 10059  0CDB  36A8               	lsrf	___ftpack@arg+2,f
 10060  0CDC  0CA7               	rrf	___ftpack@arg+1,f
 10061  0CDD  0CA6               	rrf	___ftpack@arg,f
 10062  0CDE  0B89               	decfsz	9,f
 10063  0CDF  2CDB               	goto	u3575
 10064  0CE0                     l3673:	
 10065  0CE0  30FF               	movlw	255
 10066  0CE1  0528               	andwf	___ftpack@arg+2,w
 10067  0CE2  1903               	btfsc	3,2
 10068  0CE3  2CED               	goto	l3677
 10069  0CE4  2CCC               	goto	l3667
 10070  0CE5                     l3675:	
 10071  0CE5  3001               	movlw	1
 10072  0CE6  02A9               	subwf	___ftpack@exp,f
 10073  0CE7  3001               	movlw	1
 10074  0CE8                     u3595:	
 10075  0CE8  35A6               	lslf	___ftpack@arg,f
 10076  0CE9  0DA7               	rlf	___ftpack@arg+1,f
 10077  0CEA  0DA8               	rlf	___ftpack@arg+2,f
 10078  0CEB  0B89               	decfsz	9,f
 10079  0CEC  2CE8               	goto	u3595
 10080  0CED                     l3677:	
 10081  0CED  1BA7               	btfsc	___ftpack@arg+1,7
 10082  0CEE  2CF3               	goto	l749
 10083  0CEF  3002               	movlw	2
 10084  0CF0  0229               	subwf	___ftpack@exp,w
 10085  0CF1  1803               	skipnc
 10086  0CF2  2CE5               	goto	l3675
 10087  0CF3                     l749:	
 10088  0CF3  1829               	btfsc	___ftpack@exp,0
 10089  0CF4  2CFB               	goto	l750
 10090  0CF5  30FF               	movlw	255
 10091  0CF6  05A6               	andwf	___ftpack@arg,f
 10092  0CF7  307F               	movlw	127
 10093  0CF8  05A7               	andwf	___ftpack@arg+1,f
 10094  0CF9  30FF               	movlw	255
 10095  0CFA  05A8               	andwf	___ftpack@arg+2,f
 10096  0CFB                     l750:	
 10097  0CFB  1003               	clrc
 10098  0CFC  0CA9               	rrf	___ftpack@exp,f
 10099  0CFD  0829               	movf	___ftpack@exp,w
 10100  0CFE  00FD               	movwf	125
 10101  0CFF  01FE               	clrf	126
 10102  0D00  01FF               	clrf	127
 10103  0D01  3010               	movlw	16
 10104  0D02                     u3635:	
 10105  0D02  35FD               	lslf	125,f
 10106  0D03  0DFE               	rlf	126,f
 10107  0D04  0DFF               	rlf	127,f
 10108  0D05  0B89               	decfsz	9,f
 10109  0D06  2D02               	goto	u3635
 10110  0D07  087D               	movf	125,w
 10111  0D08  04A6               	iorwf	___ftpack@arg,f
 10112  0D09  087E               	movf	126,w
 10113  0D0A  04A7               	iorwf	___ftpack@arg+1,f
 10114  0D0B  087F               	movf	127,w
 10115  0D0C  04A8               	iorwf	___ftpack@arg+2,f
 10116  0D0D  082A               	movf	___ftpack@sign,w
 10117  0D0E  1903               	btfsc	3,2
 10118  0D0F  0008               	return
 10119  0D10  17A8               	bsf	___ftpack@arg+2,7
 10120  0D11  0008               	return
 10121  0D12                     __end_of___ftpack:	
 10122                           
 10123                           	psect	text45
 10124  0880                     __ptext45:	
 10125 ;; *************** function _hcsr04Init *****************
 10126 ;; Defined at:
 10127 ;;		line 8 in file "HC-SR04.c"
 10128 ;; Parameters:    Size  Location     Type
 10129 ;;		None
 10130 ;; Auto vars:     Size  Location     Type
 10131 ;;		None
 10132 ;; Return value:  Size  Location     Type
 10133 ;;                  1    wreg      void 
 10134 ;; Registers used:
 10135 ;;		wreg, status,2, status,0
 10136 ;; Tracked objects:
 10137 ;;		On entry : 0/0
 10138 ;;		On exit  : 0/0
 10139 ;;		Unchanged: 0/0
 10140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10145 ;;Total ram usage:        0 bytes
 10146 ;; Hardware stack levels used:    1
 10147 ;; Hardware stack levels required when called:    7
 10148 ;; This function calls:
 10149 ;;		Nothing
 10150 ;; This function is called by:
 10151 ;;		_main
 10152 ;; This function uses a non-reentrant model
 10153 ;;
 10154                           
 10155                           
 10156                           ;psect for function _hcsr04Init
 10157  0880                     _hcsr04Init:	
 10158                           
 10159                           ;HC-SR04.c: 11: IOCAPbits.IOCAP3 = 1;
 10160                           
 10161                           ;incstack = 0
 10162                           ; Regs used in _hcsr04Init: [wreg+status,2+status,0]
 10163  0880  0027               	movlb	7	; select bank7
 10164  0881  1591               	bsf	17,3	;volatile
 10165                           
 10166                           ;HC-SR04.c: 12: PIE0bits.IOCIE = 1;
 10167  0882  0021               	movlb	1	; select bank1
 10168  0883  1610               	bsf	16,4	;volatile
 10169                           
 10170                           ;HC-SR04.c: 15: TRISCbits.TRISC4 = 0;
 10171  0884  120E               	bcf	14,4	;volatile
 10172                           
 10173                           ;HC-SR04.c: 16: PORTCbits.RC4 = 0;
 10174  0885  0020               	movlb	0	; select bank0
 10175  0886  120E               	bcf	14,4	;volatile
 10176                           
 10177                           ;HC-SR04.c: 17: WPUAbits.WPUA3 = 0;
 10178  0887  0024               	movlb	4	; select bank4
 10179  0888  118C               	bcf	12,3	;volatile
 10180                           
 10181                           ;HC-SR04.c: 20: T1CONbits.TMR1ON = 0;
 10182  0889  0020               	movlb	0	; select bank0
 10183  088A  101B               	bcf	27,0	;volatile
 10184                           
 10185                           ;HC-SR04.c: 21: T1CONbits.TMR1CS = 0b01;
 10186  088B  081B               	movf	27,w	;volatile
 10187  088C  393F               	andlw	-193
 10188  088D  3840               	iorlw	64
 10189  088E  009B               	movwf	27	;volatile
 10190                           
 10191                           ;HC-SR04.c: 22: T1CONbits.T1CKPS = 0b00;
 10192  088F  30CF               	movlw	-49
 10193  0890  059B               	andwf	27,f	;volatile
 10194                           
 10195                           ;HC-SR04.c: 23: T1CONbits.T1SYNC = 1;
 10196  0891  151B               	bsf	27,2	;volatile
 10197                           
 10198                           ;HC-SR04.c: 24: T1GCONbits.TMR1GE = 0;
 10199  0892  139C               	bcf	28,7	;volatile
 10200  0893  0008               	return
 10201  0894                     __end_of_hcsr04Init:	
 10202                           
 10203                           	psect	intentry
 10204  0004                     __pintentry:	
 10205 ;; *************** function _ISR *****************
 10206 ;; Defined at:
 10207 ;;		line 13 in file "main.c"
 10208 ;; Parameters:    Size  Location     Type
 10209 ;;		None
 10210 ;; Auto vars:     Size  Location     Type
 10211 ;;		None
 10212 ;; Return value:  Size  Location     Type
 10213 ;;                  1    wreg      void 
 10214 ;; Registers used:
 10215 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath, cstack
 10216 ;; Tracked objects:
 10217 ;;		On entry : 0/0
 10218 ;;		On exit  : 0/0
 10219 ;;		Unchanged: 0/0
 10220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10223 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10224 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10225 ;;Total ram usage:        6 bytes
 10226 ;; Hardware stack levels used:    1
 10227 ;; Hardware stack levels required when called:    6
 10228 ;; This function calls:
 10229 ;;		_hcsr04ISR
 10230 ;;		_nrf24l01ISR
 10231 ;; This function is called by:
 10232 ;;		Interrupt level 1
 10233 ;; This function uses a non-reentrant model
 10234 ;;
 10235                           
 10236  0004                     _ISR:	
 10237                           
 10238                           ;incstack = 0
 10239                           ; Regs used in _ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+9+btemp+11+p
      +                          clath+cstack]
 10240  0004  3180               	pagesel	$
 10241  0005  0874               	movf	116,w
 10242  0006  0020               	movlb	0	; select bank0
 10243  0007  00A0               	movwf	??_ISR
 10244  0008  0875               	movf	117,w
 10245  0009  00A1               	movwf	??_ISR+1
 10246  000A  087C               	movf	124,w
 10247  000B  00A2               	movwf	??_ISR+2
 10248  000C  087D               	movf	125,w
 10249  000D  00A3               	movwf	??_ISR+3
 10250  000E  087F               	movf	127,w
 10251  000F  00A4               	movwf	??_ISR+4
 10252  0010  30A9               	movlw	low ___int_sp
 10253  0011  0086               	movwf	6
 10254  0012  3022               	movlw	high ___int_sp
 10255  0013  0087               	movwf	7
 10256  0014  0875               	movf	117,w
 10257  0015  00A5               	movwf	??_ISR+5
 10258                           
 10259                           ;main.c: 15: if (IOCAFbits.IOCAF3){
 10260  0016  0027               	movlb	7	; select bank7
 10261  0017  1D93               	btfss	19,3	;volatile
 10262  0018  281E               	goto	i1l4763
 10263                           
 10264                           ;main.c: 16: hcsr04ISR();
 10265  0019  3188  2010  3180   	fcall	_hcsr04ISR
 10266                           
 10267                           ;main.c: 17: IOCAFbits.IOCAF3 = 0;
 10268  001C  0027               	movlb	7	; select bank7
 10269  001D  1193               	bcf	19,3	;volatile
 10270  001E                     i1l4763:	
 10271                           
 10272                           ;main.c: 18: };main.c: 20: if (PIR0bits.INTF){
 10273  001E  0020               	movlb	0	; select bank0
 10274  001F  1C10               	btfss	16,0	;volatile
 10275  0020  2825               	goto	i1l4769
 10276                           
 10277                           ;main.c: 21: nrf24l01ISR();
 10278  0021  318C  2411         	fcall	_nrf24l01ISR
 10279                           
 10280                           ;main.c: 22: PIR0bits.INTF = 0;
 10281  0023  0020               	movlb	0	; select bank0
 10282  0024  1010               	bcf	16,0	;volatile
 10283  0025                     i1l4769:	
 10284                           
 10285                           ;main.c: 23: };main.c: 25: if (PIR1bits.ADIF){
 10286  0025  1B11               	btfsc	17,6	;volatile
 10287                           
 10288                           ;main.c: 26: PIR1bits.ADIF = 0;
 10289  0026  1311               	bcf	17,6	;volatile
 10290  0027  0825               	movf	??_ISR+5,w
 10291  0028  00FF               	movwf	127
 10292  0029  0824               	movf	??_ISR+4,w
 10293  002A  00FD               	movwf	125
 10294  002B  0823               	movf	??_ISR+3,w
 10295  002C  00FC               	movwf	124
 10296  002D  0822               	movf	??_ISR+2,w
 10297  002E  00F5               	movwf	117
 10298  002F  0821               	movf	??_ISR+1,w
 10299  0030  00F4               	movwf	116
 10300  0031  0009               	retfie
 10301  0032                     __end_of_ISR:	
 10302                           
 10303                           	psect	text47
 10304  0C11                     __ptext47:	
 10305 ;; *************** function _nrf24l01ISR *****************
 10306 ;; Defined at:
 10307 ;;		line 190 in file "nrf24l01.c"
 10308 ;; Parameters:    Size  Location     Type
 10309 ;;		None
 10310 ;; Auto vars:     Size  Location     Type
 10311 ;;		None
 10312 ;; Return value:  Size  Location     Type
 10313 ;;                  1    wreg      void 
 10314 ;; Registers used:
 10315 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath
 10316 ;; Tracked objects:
 10317 ;;		On entry : 0/0
 10318 ;;		On exit  : 0/0
 10319 ;;		Unchanged: 0/0
 10320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10325 ;;Total ram usage:        0 bytes
 10326 ;; Hardware stack levels used:    1
 10327 ;; Hardware stack levels required when called:    5
 10328 ;; This function calls:
 10329 ;;		_nrf24l01Send
 10330 ;;		_nrf24l01Service
 10331 ;;		_nrf24l01SetRXMode
 10332 ;; This function is called by:
 10333 ;;		_ISR
 10334 ;; This function uses a non-reentrant model
 10335 ;;
 10336                           
 10337                           
 10338                           ;psect for function _nrf24l01ISR
 10339  0C11                     _nrf24l01ISR:	
 10340                           
 10341                           ;nrf24l01.c: 192: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
 10342                           
 10343                           ;incstack = 0
 10344                           ; Regs used in _nrf24l01ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+9+bt
      +                          emp+11+pclath]
 10345  0C11  3000               	movlw	0
 10346  0C12  001E               	movwi fsr1++
 10347  0C13  3007               	movlw	7
 10348  0C14  3188  205A  318C   	fcall	_nrf24l01Send
 10349  0C17  00FF               	movwf	127
 10350  0C18  087F               	movf	127,w
 10351  0C19  0020               	movlb	0	; select bank0
 10352  0C1A  00E6               	movwf	_status+2	;volatile
 10353                           
 10354                           ;nrf24l01.c: 195: if (status.statusRegister.RX_DR){
 10355  0C1B  1F66               	btfss	_status+2,6	;volatile
 10356  0C1C  2C29               	goto	i1l4687
 10357                           
 10358                           ;nrf24l01.c: 198: if (status.RX == 0){
 10359  0C1D  0865               	movf	_status+1,w	;volatile
 10360  0C1E  1D03               	btfss	3,2
 10361  0C1F  2C25               	goto	i1l288
 10362                           
 10363                           ;nrf24l01.c: 199: status.RX = 1;
 10364  0C20  3001               	movlw	1
 10365  0C21  00FF               	movwf	127
 10366  0C22  087F               	movf	127,w
 10367  0C23  00E5               	movwf	_status+1	;volatile
 10368                           
 10369                           ;nrf24l01.c: 200: }
 10370  0C24  2C26               	goto	i1l4685
 10371  0C25                     i1l288:	
 10372                           
 10373                           ;nrf24l01.c: 202: else{;nrf24l01.c: 203: status.statusRegister.RX_DR = 0;
 10374  0C25  1366               	bcf	_status+2,6	;volatile
 10375  0C26                     i1l4685:	
 10376                           
 10377                           ;nrf24l01.c: 204: };nrf24l01.c: 206: nrf24l01Service();
 10378  0C26  3187  271E  318C   	fcall	_nrf24l01Service
 10379  0C29                     i1l4687:	
 10380                           
 10381                           ;nrf24l01.c: 207: };nrf24l01.c: 209: if (status.statusRegister.TX_DS){
 10382  0C29  0020               	movlb	0	; select bank0
 10383  0C2A  1EE6               	btfss	_status+2,5	;volatile
 10384  0C2B  2C53               	goto	i1l4705
 10385                           
 10386                           ;nrf24l01.c: 212: status.TX = 3;
 10387  0C2C  3003               	movlw	3
 10388  0C2D  00FF               	movwf	127
 10389  0C2E  087F               	movf	127,w
 10390  0C2F  00E4               	movwf	_status	;volatile
 10391                           
 10392                           ;nrf24l01.c: 214: if (lastTXPacket->packetData.ACKRequest){
 10393  0C30  0869               	movf	_lastTXPacket,w
 10394  0C31  0084               	movwf	4
 10395  0C32  3001               	movlw	1	; select bank2/3
 10396  0C33  0085               	movwf	5
 10397  0C34  1D00               	btfss	0,2
 10398  0C35  2C43               	goto	i1l4697
 10399                           
 10400                           ;nrf24l01.c: 216: status.TX = 4;
 10401  0C36  3004               	movlw	4
 10402  0C37  00FF               	movwf	127
 10403  0C38  087F               	movf	127,w
 10404  0C39  00E4               	movwf	_status	;volatile
 10405                           
 10406                           ;nrf24l01.c: 217: status.retryCount = 0xFF;
 10407  0C3A  30FF               	movlw	255
 10408  0C3B  00FF               	movwf	127
 10409  0C3C  087F               	movf	127,w
 10410  0C3D  00E8               	movwf	_status+4	;volatile
 10411                           
 10412                           ;nrf24l01.c: 218: nrf24l01SetRXMode(1);
 10413  0C3E  3001               	movlw	1
 10414  0C3F  318B  230A  318C   	fcall	_nrf24l01SetRXMode
 10415                           
 10416                           ;nrf24l01.c: 219: }else{
 10417  0C42  2C45               	goto	i1l4699
 10418  0C43                     i1l4697:	
 10419                           
 10420                           ;nrf24l01.c: 220: status.TX = 0;
 10421  0C43  0020               	movlb	0	; select bank0
 10422  0C44  01E4               	clrf	_status	;volatile
 10423  0C45                     i1l4699:	
 10424                           
 10425                           ;nrf24l01.c: 221: };nrf24l01.c: 223: if (lastTXPacket->packetData.IsACK){
 10426  0C45  0020               	movlb	0	; select bank0
 10427  0C46  0869               	movf	_lastTXPacket,w
 10428  0C47  0084               	movwf	4
 10429  0C48  3001               	movlw	1	; select bank2/3
 10430  0C49  0085               	movwf	5
 10431  0C4A  1D80               	btfss	0,3
 10432  0C4B  2C50               	goto	i1l4703
 10433                           
 10434                           ;nrf24l01.c: 224: nrf24l01SetRXMode(1);
 10435  0C4C  3001               	movlw	1
 10436  0C4D  318B  230A  318C   	fcall	_nrf24l01SetRXMode
 10437  0C50                     i1l4703:	
 10438                           
 10439                           ;nrf24l01.c: 225: };nrf24l01.c: 227: nrf24l01Service();
 10440  0C50  3187  271E  318C   	fcall	_nrf24l01Service
 10441  0C53                     i1l4705:	
 10442                           
 10443                           ;nrf24l01.c: 228: };nrf24l01.c: 233: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          7, status.statusRegister.byte);
 10444  0C53  0020               	movlb	0	; select bank0
 10445  0C54  0866               	movf	_status+2,w	;volatile
 10446  0C55  001E               	movwi fsr1++
 10447  0C56  3027               	movlw	39
 10448  0C57  3188  205A         	fcall	_nrf24l01Send
 10449  0C59  0008               	return
 10450  0C5A                     __end_of_nrf24l01ISR:	
 10451                           
 10452                           	psect	text48
 10453  0810                     __ptext48:	
 10454 ;; *************** function _hcsr04ISR *****************
 10455 ;; Defined at:
 10456 ;;		line 89 in file "HC-SR04.c"
 10457 ;; Parameters:    Size  Location     Type
 10458 ;;		None
 10459 ;; Auto vars:     Size  Location     Type
 10460 ;;		None
 10461 ;; Return value:  Size  Location     Type
 10462 ;;                  1    wreg      void 
 10463 ;; Registers used:
 10464 ;;		status,2
 10465 ;; Tracked objects:
 10466 ;;		On entry : 0/0
 10467 ;;		On exit  : 0/0
 10468 ;;		Unchanged: 0/0
 10469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10473 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10474 ;;Total ram usage:        0 bytes
 10475 ;; Hardware stack levels used:    1
 10476 ;; This function calls:
 10477 ;;		Nothing
 10478 ;; This function is called by:
 10479 ;;		_ISR
 10480 ;; This function uses a non-reentrant model
 10481 ;;
 10482                           
 10483                           
 10484                           ;psect for function _hcsr04ISR
 10485  0810                     _hcsr04ISR:	
 10486                           
 10487                           ;HC-SR04.c: 90: waiting = 0;
 10488                           
 10489                           ;incstack = 0
 10490                           ; Regs used in _hcsr04ISR: [status,2]
 10491  0810  0021               	movlb	1	; select bank1
 10492  0811  01DA               	clrf	_waiting^(0+128)	;volatile
 10493                           
 10494                           ;HC-SR04.c: 91: T1CONbits.TMR1ON = 0;
 10495  0812  0020               	movlb	0	; select bank0
 10496  0813  101B               	bcf	27,0	;volatile
 10497  0814  0008               	return
 10498  0815                     __end_of_hcsr04ISR:	
 10499  0074                     btemp	set	116	;btemp
 10500  0074                     wtemp0	set	116
 10501  0076                     wtemp1	set	118
 10502  0078                     wtemp2	set	120
 10503  007A                     wtemp3	set	122
 10504  007C                     wtemp4	set	124
 10505  007E                     wtemp5	set	126
 10506  0074                     ttemp0	set	116
 10507  0077                     ttemp1	set	119
 10508  007A                     ttemp2	set	122
 10509  007D                     ttemp3	set	125
 10510  0074                     ltemp0	set	116
 10511  0078                     ltemp1	set	120
 10512  007C                     ltemp2	set	124
 10513  0076                     ltemp3	set	118


Data Sizes:
    Strings     52
    Constant    46
    Data        1
    BSS         132
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            4      4       4
    BANK0            80     68      74
    BANK1            80     56      60
    BANK2            80      0      62
    BANK3            80      0      61
    BANK4            80     34      34
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> sendMessage@ftoaStatus(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK2[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 
		 -> RXPacket(BANK2[33]), romDataMap(BANK3[28]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK2[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 
		 -> RXPacket(BANK2[33]), romDataMap(BANK3[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 33
		 -> romDataMap.name(BANK3[16]), packet.Message(BANK0[32]), packet.Message(BANK0[32]), main@packet(BANK4[33]), 
		 -> STR_7(CODE[4]), loop@packet(BANK1[33]), romDataMap(BANK3[28]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK4[33]), loop@packet(BANK1[33]), romDataMap(BANK3[28]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK4[33]), loop@packet(BANK1[33]), romDataMap(BANK3[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK2[32]), RXPacket(BANK2[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK2[17]), STR_9(CODE[6]), STR_8(CODE[6]), STR_6(CODE[5]), 
		 -> STR_5(CODE[7]), STR_4(CODE[6]), STR_3(CODE[5]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK4[33]), loop@packet(BANK1[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK4[33]), loop@packet(BANK1[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK4[33]), loop@packet(BANK1[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK4[33]), loop@packet(BANK1[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_10(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendTXBuffer@packet	PTR struct . size(1) Largest target is 33
		 -> TXPacket(BANK3[33]), RXPacket(BANK2[33]), 

    lastTXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), TXPacket(BANK3[33]), RXPacket(BANK2[33]), 

    nrf24l01SendPacket@txPacket	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK4[33]), loop@packet(BANK1[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sendMessage@topic	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_9(CODE[6]), STR_8(CODE[6]), STR_6(CODE[5]), STR_5(CODE[7]), 
		 -> STR_4(CODE[6]), STR_3(CODE[5]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK4[33]), loop@packet(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK4[33]), loop@packet(BANK1[33]), romDataMap(BANK3[28]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK4[33]), loop@packet(BANK1[33]), 

    sendMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK4[33]), loop@packet(BANK1[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 


Critical Paths under _main in COMMON

    _main->_nrf24l01SetTXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01GetPipe->___lwmod
    _loop->_getADCValue
    _sendMessage->_nrf24l01SendPacket
    _nrf24l01SendPacket->_sleepMs
    _nrf24l01SendPacket->_strcpy
    _sprintf->___wmul
    _sprintf->_isdigit
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    _hcsr04GetAerage->___ftdiv
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___awtoft

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->___bmul
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01GetPipe->___lwmod
    _sendMessage->_strcat
    _strcat->_ftoa
    _nrf24l01SendPacket->_strcpy
    _ftoa->_sprintf
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->___ftpack
    _hcsr04GetAerage->___ftdiv
    ___lwtoft->___ftpack
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___awtoft
    ___ftadd->___lwtoft
    ___awtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_loop
    _loop->_sendMessage
    _sendMessage->_strcat

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0  107041
                                             55 BANK1      1     1      0
                                              0 BANK4     34    34      0
                         _hcsr04Init
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                        _sendMessage
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    2274
                                             16 BANK0      1     1      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                9     9      0    2274
                                              7 BANK0      9     9      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    2     2      0     406
                                              2 COMMON     2     2      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     344
                                              0 COMMON     2     2      0
                                              6 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    3     3      0     611
                                              0 COMMON     3     3      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      4     4      0     807
                                              1 COMMON     1     1      0
                                             10 BANK0      3     3      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     440
                                              0 COMMON     1     1      0
                                              6 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _loop                                                42    42      0   74337
                                             13 BANK1     42    42      0
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                           ___lwtoft
                        _getADCValue
                    _hcsr04GetAerage
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _sendMessage                                          9     2      7   27810
                                              4 BANK1      9     2      7
                           ___lwtoft (ARG)
                               _ftoa
                    _hcsr04GetAerage (ARG)
                             _memset
                 _nrf24l01SendPacket
                            _sleepMs
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     868
                                             66 BANK0      2     2      0
                                              0 BANK1      4     0      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendPacket                                   2     0      2    4240
                                              2 COMMON     2     0      2
                    _nrf24l01Service
                            _sleepMs
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     550
                                              0 COMMON     2     2      0
                                              6 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    2567
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     968
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     618
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     463
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                13     9      4   18706
                                             53 BANK0     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             34    24     10    3016
                                             27 BANK0     26    16     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      99
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     552
                                              0 COMMON     2     2      0
                                              6 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     440
                                              0 COMMON     1     1      0
                                             19 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     449
                                              6 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             5     1      4    3681
                                              0 COMMON     1     1      0
                                             11 BANK0      4     0      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             10     6      4     579
                                             23 BANK0     10     6      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6044
                                             23 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     273
                                             44 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             12     6      6    4171
                                             11 BANK0     12     6      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               6     0      6     406
                                              6 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _hcsr04GetAerage                                      6     3      3   15692
                                             35 BANK0      6     3      3
                            ___ftadd
                            ___ftdiv
                           ___lwtoft
                            _sleepMs
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    3922
                                             11 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         10     7      3   15581
                                              3 COMMON     1     1      0
                                             35 BANK0      9     6      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            _sleepMs
 ---------------------------------------------------------------------------------
 (2) _sleepMs                                              4     2      2     993
                                              0 COMMON     2     2      0
                                              6 BANK0      2     0      2
                           _resetWDT
 ---------------------------------------------------------------------------------
 (3) _resetWDT                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             13     7      6    4935
                                              2 COMMON     1     1      0
                                             23 BANK0     12     6      6
                            ___ftadd (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             10     4      6    5740
                                              1 COMMON     1     1      0
                                             14 BANK0      9     3      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3712
                                              0 COMMON     1     1      0
                                             11 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             5     0      5    3475
                                              6 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (1) _hcsr04Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  6     6      0    3648
                                              0 BANK0      6     6      0
                          _hcsr04ISR
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (10) _nrf24l01ISR                                         0     0      0    3648
                       _nrf24l01Send
                    _nrf24l01Service
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    2567
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     968
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     618
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     463
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 (10) _hcsr04ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _hcsr04Init
   _loop
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _sleepMs
           _resetWDT
     ___lwtoft
       ___ftpack
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       _sleepMs
         _resetWDT
     _hcsr04GetAerage
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
       _sleepMs
         _resetWDT
     _sendMessage
       ___lwtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _hcsr04GetAerage (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
         _sleepMs
           _resetWDT
       _memset (ARG)
       _nrf24l01SendPacket (ARG)
         _nrf24l01Service
           _memset
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
           _nrf24l01SendTXBuffer
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
             _nrf24l01SetRXMode
               _nrf24l01Send
                 _nrf24l01SPIEnd
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
             _strlen
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _strcmp
         _sleepMs
           _resetWDT
         _strcpy
       _sleepMs (ARG)
         _resetWDT
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _sleepMs
                 _resetWDT
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
       _strcpy (ARG)
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
     _nrf24l01SPISend
     _nrf24l01SPIStart
   _sendMessage
     ___lwtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _sleepMs
             _resetWDT
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _hcsr04GetAerage (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
       _sleepMs
         _resetWDT
     _memset (ARG)
     _nrf24l01SendPacket (ARG)
       _nrf24l01Service
         _memset
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
         _nrf24l01SendTXBuffer
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _strlen
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _strcmp
       _sleepMs
         _resetWDT
       _strcpy
     _sleepMs (ARG)
       _resetWDT
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
     _strcpy (ARG)
   _strcpy

 _ISR (ROOT)
   _hcsr04ISR
   _nrf24l01ISR
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
     _nrf24l01Service
       _memset
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SendTXBuffer
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _strlen
       _nrf24l01SetRXMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _strcmp
     _nrf24l01SetRXMode
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            4      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               4      4       4       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       8       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     44      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     38      3C       7       75.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      3E       9       77.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      3D      11       76.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50     22      22      13       42.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     127      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     12F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Aug 17 11:34:03 2018

                ___bmul@product 0070                     __CFG_CP$OFF 0000                              l47 0852  
              sendMessage@value 00A8                sendMessage@topic 00A6             ___wmul@multiplicand 0028  
                  ___ftadd@exp1 0036                    ___ftadd@exp2 0035               sendMessage@packet 00A4  
                  ___ftadd@sign 0034                             l316 07C1                             l261 0B43  
                           l175 062C                             l513 0103                             l274 092A  
                           l516 0122                             l539 08B2                             l750 0CFB  
                           l833 0D7F                             l749 0CF3                             l773 03CD  
                           l964 0AD3                    __CFG_CPD$OFF 0000                             _ISR 0004  
                           wreg 0009                    __CFG_LVP$OFF 0000                            ?_ISR 0070  
                  ___ftdiv@cntr 003D                    ___ftdiv@sign 0042                  ??_nrf24l01Init 0030  
                          l4001 01BC                            l4103 05A3                            l4015 0216  
                          l4009 01D1                            l4017 0060                            l4025 086F  
                          l4043 07DA                            l4019 0221                            l4125 08EA  
                          l4213 0F90                            l4029 0876                            l5021 0EBD  
                          l4311 0984                            l4047 07F0                            l4071 0544  
                          l4135 0D2B                            l4321 068C                            l4065 052E  
                          l4153 0D5B                            l4403 0666                            l4091 0587  
                          l4163 0D76                            l4405 066D                            l4165 0D82  
                          l4157 0D69                            l4181 0A03                            l4327 06A2  
                          l4087 057F                            l4191 0AAD                            l4353 06FC  
                          l4345 06E3                            l4169 0D90                            l4281 0C05  
                          l4505 0763                            l3811 03DF                            l3803 03BF  
                          l4099 059B                            l4179 09F1                            l3715 08AB  
                          l4507 0778                            l4259 0936                            l4611 02A5  
                          l3661 0CBD                            l4461 0F2D                            l3709 0849  
                          l4517 0797                            l4621 02EF                            l3815 03F1  
                          l3807 03C9                            l4391 05ED                            l4455 0F26  
                          l3735 0C6B                            l3639 0857                            l4279 0BEE  
                          l4295 09D4                            l3673 0CE0                            l3665 0CC7  
                          l3657 0CB6                            l3825 040C                            l3761 0356  
                          l3745 0C99                            l3737 0C79                            l4297 09C7  
                          l4529 07B4                            l4481 0733                            l3675 0CE5  
                          l3667 0CCC                            l3771 036C                            l4387 05F9  
                          l4459 0ECE                            l3843 0BB6                            l3931 0093  
                          l4299 09E6                            l4475 0729                            l4627 02FE  
                          l3677 0CED                            l3765 035D                            l4389 0605  
                          l3749 0CA4                            l3837 0B90                            l3925 0083  
                          l4901 0A65                            l3783 0386                            l4399 064E  
                          l3839 0B9E                            l3847 0BC1                            l3951 00FF  
                          l4663 0A1F                            l4727 0ADA                            l3793 03A3  
                          l3865 09B9                            l3857 09A0                            l3953 0105  
                          l3881 0909                            l4665 0A2B                            l4673 0A40  
                          l4729 0AFA                            l3795 03A8                            l3963 0131  
                          l3939 00C1                            l3883 0914                            l3875 08CA  
                          l3797 03AC                            l3789 0399                            l3869 09C1  
                          l3973 0150                            l3957 010A                            l3949 00D0  
                          l3893 0B14                            l4669 0A37                            l3991 0192  
                          l3995 01A6                            l3987 0183                            l3979 0156  
                          l3899 0B1C                            l4885 0A7C                            l3999 01B9  
                          l4887 0A88                            l4889 0A91                            STR_1 1060  
                  __CFG_WDTE$ON 0000                            STR_2 1060                            STR_3 1057  
                          STR_4 1047                            STR_5 1034                            STR_6 1052  
                          STR_7 105C                            STR_8 103B                            STR_9 1041  
                          u4025 0B93                            u4045 0BAC                            u4055 0BB7  
                          u4305 018A                            u5105 0A31                            u4315 019C  
                          u5115 0A38                            u4084 09A9                            u4085 09A7  
                          u4325 01AE                            u3635 0D02                            u3555 0CC2  
                          u4515 05A4                            u5307 0E42                            u4525 05AA  
                          u4445 0550                            u4605 0D5C                            u3725 0C6E  
                          u4285 0179                            u5085 0A22                            u5317 0963  
                          u3575 0CDB                            u4455 0560                            u5327 096F  
                          u3905 039A                            u3745 0C7A                            u5337 0C0B  
                          u5185 0AE8                            u3595 0CE8                            u4475 0588  
                          u4635 0D77                            u3755 0C8E                            u5347 0B26  
                          u4485 058E                            u3765 0C9A                            u3685 08B3  
                          u5357 0B37                            u3935 03AD                            u4815 06B4  
                          u4575 0D32                            u3695 08B8                            u5367 0B40  
                          u4744 0930                            u4825 06C4                            u4665 09F7  
                          u5377 0839                            u4745 092F                            u3875 0387  
                          u4835 06E4                            u5387 082C                            u3965 03C0  
                          u4845 06F3                            u5397 0EE2                            u4855 06FD  
                          _WPUA 020C                            _WPUC 020E  __size_of_nrf24l01InterfaceInit 001E  
                  __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 095A  
                          ___sp 2162                            _main 0E26                            _ftoa 0F5D  
                  ___ftpack@arg 0026                            _loop 0424                    ___ftpack@exp 0029  
                          fsr0h 0005                            fsr1h 0007                            indf0 0000  
                          fsr0l 0004                            fsr1l 0006                            btemp 0074  
                 __CFG_BORV$LOW 0000                            start 0032           nrf24l01SetRXPipe@pipe 0071  
                 __CFG_CSWEN$ON 0000               ___bmul@multiplier 0071                    ___ftmul@cntr 0035  
                  ___ftmul@sign 0036     __size_of_nrf24l01SendPacket 002F                           ??_ISR 0020  
                  ___fttol@exp1 0040            __size_of_getADCValue 00AA                    ___fttol@lval 003C  
                         ?_main 0070                           ?_ftoa 0055                           ?_loop 0070  
               __end_of___ftadd 0424                           STR_10 1029                 __end_of___ftdiv 071E  
               __end_of___ftneg 082B                 __end_of___lldiv 0CAD                 __end_of___ftmul 05CB  
               __end_of___llmod 0BCA                 __end_of___ftsub 0900                 __end_of___fttol 0D99  
                __CFG_DEBUG$OFF 0000                 __end_of___lwmod 0A45                           i1l288 0C25  
                         _TMR1H 001A                           _TMR1L 0019                   __CFG_PWRTE$ON 0000  
         nrf24l01SetTXPipe@pipe 0073                    ___lltoft@exp 0070                   ___awtoft@sign 0070  
               __end_of_dpowers 1028                 __end_of_isdigit 084B                   ___ftpack@sign 002A  
                         _rloop 012A                           ftoa@f 0055                           ftoa@l 005D  
                __CFG_BOREN$OFF 0000                 __end_of_sleepMs 09C4                           ltemp0 0074  
                         ltemp1 0078                           ltemp2 007C                           ltemp3 0076  
                         ttemp0 0074                           ttemp1 0077                           ttemp2 007A  
                         ttemp3 007D                           status 0003                           wtemp0 0074  
                         wtemp1 0076                           wtemp2 0078                           wtemp3 007A  
                         wtemp4 007C                           wtemp5 007E                 __end_of_sprintf 0227  
             getADCValue@adcSum 0049                _nrf24l01SPIStart 0834                  __CFG_MCLRE$OFF 0000  
               __initialization 0034          nrf24l01InitRegisters@i 002E                    __end_of_main 0EC1  
                  __end_of_ftoa 1000                    __end_of_loop 0517                          ??_main 00D7  
                 ___fttol@sign1 003B                          ??_ftoa 0074                          ??_loop 0074  
                  ?_sendMessage 00A4        __size_of_nrf24l01SPISend 000F                ___llmod@dividend 0037  
                        _ADRESH 009C                          _ADRESL 009B                __end_of___awtoft 099B  
                        _ANSELA 018C                          _ANSELC 018E                __end_of___ftpack 0D12  
              __end_of___lltoft 0A18                          _ODCONA 028C        __size_of_nrf24l01GetPipe 0035  
                        _ODCONC 028E                          i1l4703 0C50                          i1l4705 0C53  
                        i1l4763 001E                          i1l4685 0C26                          i1l4687 0C29  
                        i1l4697 0C43                          i1l4769 0025                          i1l4699 0C45  
                        _INLVLA 038C                          _INLVLC 038E                __end_of___lwtoft 08A9  
      __size_of_nrf24l01Service 00A5            __size_of_nrf24l01ISR 0049                          ___bmul 086D  
                        ___ftge 07C3                          ___wmul 08A9                       ??___ftadd 0071  
                __CFG_STVREN$ON 0000                       ??___ftdiv 0072                       ??___ftneg 0074  
                     ??___lldiv 0070                       ??___ftmul 0070                       ??___llmod 0070  
                     ??___ftsub 0072                       ??___fttol 0070                       ??___lwmod 0070  
          __end_of_nrf24l01Init 0979            __end_of_nrf24l01Send 086D                          _memset 0AA3  
         _nrf24l01InitRegisters 0227                          _rcount 00D8                          _rlimit 0128  
                        _status 0064                          _strcat 0A74                          _strcmp 09C4  
                        _strcpy 08C5                          _strlen 0900                          ftoa@cp 0061  
         ___ftmul@f3_as_product 0032                __end_of_resetWDT 0822                       ??_isdigit 0070  
                        loop@ta 00B0                          loop@vt 00AD                       ??_sleepMs 0070  
                     ??_sprintf 0045              getADCValue@adcLoop 0047         __end_of__initialization 0053  
                    ___ftadd@f1 002E                      ___ftadd@f2 0031                      ___ftge@ff1 0026  
                    ___ftge@ff2 0029              getADCValue@channel 0046                      ___ftdiv@f1 003A  
                    ___ftdiv@f2 0037                      ___ftdiv@f3 003E                      ___ftneg@f1 004C  
                    ___awtoft@c 002B             ___bmul@multiplicand 0026        __size_of_hcsr04GetAerage 009C  
                    ___ftmul@f1 002B                      ___ftmul@f2 002E                      ___ftsub@f1 003A  
                    ___ftsub@f2 0037                      ___fttol@f1 0037                  __pcstackCOMMON 0070  
                  __pidataBANK1 07FF   __size_of_nrf24l01SendTXBuffer 0047                      ___lltoft@c 002B  
            __size_of_hcsr04ISR 0005                      ___lwtoft@c 002B                    sprintf@width 0050  
                    __pbssBANK0 0064                      __pbssBANK1 00D8                      __pbssBANK2 0120  
                    __pbssBANK3 01A0           sendMessage@ftoaStatus 00AB               ??_nrf24l01GetPipe 0071  
                    __pmaintext 0E26                      _hcsr04Init 0880                         ?___bmul 0026  
                       ?___ftge 0026                         ?___wmul 0026                 __CFG_PPS1WAY$ON 0000  
             _nrf24l01SetRXMode 0B0A               _nrf24l01SetRXPipe 091E          ?_nrf24l01InitRegisters 0070  
                    __pintentry 0004               _nrf24l01SetTXPipe 0B45                       ?___awtoft 002B  
                     ?___ftpack 0026              ?_nrf24l01SetRXPipe 0070              ?_nrf24l01SetTXPipe 0070  
                     ?___lltoft 002B             __CFG_RSTOSC$HFINT32 0000                         ?_strcat 00A0  
                       ?_strcpy 0026                       ?___lwtoft 002B           __end_of_n_ADDRESS_MUL 1029  
          __size_of_sendMessage 008D        __end_of_nrf24l01SPIStart 083D             ??_nrf24l01SetRXPipe 0070  
           ??_nrf24l01SetTXPipe 0072                         _NVMADRH 0892                         _NVMADRL 0891  
                       _NVMDATL 0893                         _NVMCON2 0896                         _SSP1BUF 0211  
             __end_of_hcsr04ISR 0815           _nrf24l01InterfaceInit 093C      __end_of_nrf24l01SendPacket 0A74  
                     ?_resetWDT 0070                   ??_getADCValue 0073           __size_of_nrf24l01Init 001F  
         __size_of_nrf24l01Send 0013       __end_of_nrf24l01SetRXMode 0B45       __end_of_nrf24l01SetRXPipe 093C  
     __end_of_nrf24l01SetTXPipe 0B87                 __size_of___bmul 0013                 __size_of___ftge 003C  
                       ___ftadd 032E                         ___ftdiv 0675                         ___ftneg 0822  
                       ___lldiv 0C5A                 __size_of___wmul 001C                         ___ftmul 0517  
                       ___llmod 0B87                         ___ftsub 08E2                         ___fttol 0D12  
                       ___lwmod 0A18               ??_hcsr04GetAerage 0073                      ??___awtoft 0070  
                    ??___ftpack 0070                 __size_of_memset 0032                      ??___lltoft 0070  
                       __ptext1 095A                         __ptext2 093C                         __ptext3 0227  
                       __ptext4 0B45                         __ptext5 086D                         __ptext6 091E  
                       __ptext7 0AD5                         __ptext8 0A18                         __ptext9 0424  
                    ??___lwtoft 0070                 __size_of_strcat 002F                 __size_of_strcmp 0029  
               __size_of_strcpy 001D                 __size_of_strlen 001E                    __size_of_ISR 002E  
                     _T1CONbits 001B                         _counter 0120                         _dpowers 1000  
                       _isdigit 083D                       _IOCAFbits 0393                         _romData 00DB  
                       _sleepMs 099B                       _IOCAPbits 0391                         _waiting 00DA  
                       _sprintf 005A                         clrloop0 0816            end_of_initialization 0053  
                       ftoa@buf 014D                         ftoa@rem 0059                    _nrf24l01Init 095A  
                  _nrf24l01Send 085A                      _romDataMap 01C1                nrf24l01GetPipe@i 002C  
               ___lldiv@divisor 0026                 ___lldiv@counter 0032                      ??_resetWDT 0070  
                   ?_hcsr04Init 0070             __end_of_getADCValue 0675                       _PORTAbits 000C  
                     _PORTCbits 000E                       _TRISAbits 008C                       _TRISCbits 008E  
              __CFG_FEXTOSC$OFF 0000                   ??_nrf24l01ISR 0070          ?_nrf24l01InterfaceInit 0070  
                   ___ftdiv@exp 0041                      main@packet 0221      __size_of_nrf24l01SetRXMode 003B  
    __size_of_nrf24l01SetRXPipe 001E                     ___ftmul@exp 0031      __size_of_nrf24l01SetTXPipe 0042  
                __end_of___bmul 0880                  __end_of___ftge 07FF                  __end_of___wmul 08C5  
                __end_of_memset 0AD5                  __end_of_strcat 0AA3                  __end_of_strcmp 09ED  
                  _lastTXPacket 0069                  __end_of_strcpy 08E2                  __end_of_strlen 091E  
           start_initialization 0034                 _nrf24l01SPISend 084B                     __end_of_ISR 0032  
  __end_of_nrf24l01SendTXBuffer 0C11                      ftoa@status 0058       nrf24l01SetRXPipe@enRXAddr 0072  
           __size_of_hcsr04Init 0014                 _nrf24l01GetPipe 0AD5         __size_of_nrf24l01SPIEnd 0009  
               ___llmod@divisor 0033                 ___llmod@counter 0070                 _nrf24l01Service 071E  
       ??_nrf24l01InitRegisters 0027                __CFG_LPBOREN$OFF 0000                     _getADCValue 05CB  
                      ??___bmul 0070                        ??___ftge 0070             __end_of_nrf24l01ISR 0C5A  
                      ??___wmul 0070                     __pdataBANK1 00DB                        ??_strcat 0074  
                      ??_strcpy 0070               __size_of___awtoft 0022               __size_of___ftpack 0065  
             __size_of___lltoft 002B                       ___latbits 0002               __size_of___lwtoft 0015  
                 __pcstackBANK0 0020                   __pcstackBANK1 00A0                   __pcstackBANK4 0220  
                  _isdigit$1998 0070                     sprintf@flag 0049                     sprintf@prec 0052  
                    loop@packet 00B6                 _hcsr04GetAerage 0EC1             nrf24l01GetPipe@name 002B  
           nrf24l01GetPipe@pipe 002A                       _hcsr04ISR 0810               __size_of_resetWDT 0007  
                      ?___ftadd 002E                        ?___ftdiv 0037                        ?___ftneg 004C  
                      ?___lldiv 0026                        ?___ftmul 002B                        ?___llmod 0033  
                      ?___ftsub 0037                        ?___fttol 0037                        ?___lwmod 0026  
          __end_of_n_ADDRESS_P0 1052         __end_of_nrf24l01SPISend 085A       nrf24l01InitRegisters@enAA 002C  
                 ??_sendMessage 0074              _nrf24l01SendPacket 0A45             sleepMs@milliseconds 0026  
       __end_of_nrf24l01GetPipe 0B0A                        ?_isdigit 0070                       _loop$2253 00B3  
                      ?_sleepMs 0026             ?_nrf24l01SendPacket 0072                        ?_sprintf 003B  
       __end_of_nrf24l01Service 07C3                  ___wmul@product 0070                     _nrf24l01ISR 0C11  
                     clear_ram0 0815                        _PIE0bits 0090                        _PIE1bits 0091  
                      _PIR0bits 0010                        _PIR1bits 0011                      ?_hcsr04ISR 0070  
                  ??_hcsr04Init 0070            ??_nrf24l01SendPacket 0074                       _testCount 0126  
          _nrf24l01SendTXBuffer 0BCA                      _ADCON0bits 009D                      _ADCON1bits 009E  
             ___wmul@multiplier 0026                        _WPUAbits 020C                        _RXPacket 012C  
                      _TXPacket 01A0             __end_of_sendMessage 0E26              __end_of_hcsr04Init 0894  
       ??_nrf24l01InterfaceInit 0070         __end_of_hcsr04GetAerage 0F5D                  _nrf24l01SPIEnd 082B  
              __size_of___ftadd 00F6                __size_of___ftdiv 00A9                __size_of___ftneg 0009  
              __size_of___lldiv 0053                __size_of___ftmul 00B4                __size_of___llmod 0043  
              __size_of___ftsub 001E                __size_of___fttol 0087                __size_of___lwmod 002D  
                      ___awtoft 0979                        ___ftpack 0CAD                        ___int_sp 22A9  
                      ___lltoft 09ED                      _ANSELAbits 018C                        ___lwtoft 0894  
                    _ANSELCbits 018E                ?_nrf24l01GetPipe 0070                      sprintf@val 004B  
                 _n_ADDRESS_MUL 1028                      strcat@from 00A2                __size_of_isdigit 000E  
                      __ptext10 0D99                        __ptext11 0A74                        __ptext20 0834  
                      __ptext12 0A45                        __ptext21 084B                        __ptext13 08C5  
                    _T1GCONbits 001C                        __ptext30 09ED                        __ptext22 082B  
                      __ptext14 071E                        __ptext31 0D12                        __ptext23 0AA3  
                      __ptext15 09C4                        __ptext40 081B                        __ptext32 08E2  
                      __ptext24 0F5D                        __ptext16 0BCA                        __ptext41 0675  
                      __ptext33 0822                        __ptext25 005A                        __ptext17 0900  
                      __ptext42 032E                        __ptext34 0517                        __ptext26 083D  
                      __ptext18 0B0A                        __ptext43 0979                        __ptext35 07C3  
                      __ptext27 08A9                        __ptext19 085A                        __ptext44 0CAD  
                      __ptext36 0EC1                        __ptext28 0B87                        __ptext45 0880  
                      __ptext37 0894                        __ptext29 0C5A                        __ptext38 05CB  
                      __ptext47 0C11                        __ptext39 099B                        __ptext48 0810  
              __size_of_sleepMs 0029                    _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 0834  
                      _distance 0124                __size_of_sprintf 01CD                     _OSCCON1bits 0919  
                    strcpy@from 0028                   __size_of_main 009B                   __size_of_ftoa 00A3  
                 __size_of_loop 00F3    nrf24l01InitRegisters@channel 0028    nrf24l01InitRegisters@feature 002A  
                  sleepMs@wdtps 0071                      _RC0PPSbits 0EA0                        _resetWDT 081B  
                   ??_hcsr04ISR 0070    nrf24l01InitRegisters@rfSetup 002B                      _RC1PPSbits 0EA1  
                  ?_getADCValue 0043                      _RC2PPSbits 0EA2  __size_of_nrf24l01InitRegisters 0107  
 __end_of_nrf24l01InitRegisters 032E    nrf24l01InitRegisters@setupAW 0029                      _ODCONAbits 028C  
                  _SSP1STATbits 0214                        main@pipe 0220      nrf24l01SendPacket@txPacket 0072  
                   _sendMessage 0D99                      _INTCONbits 000B                     _NVMCON1bits 0895  
                    _FVRCONbits 0117                  __pstringtext10 105C                  __pstringtext11 1060  
                __pstringtext12 0000                        isdigit@c 0071                ?_hcsr04GetAerage 0043  
                      intlevel1 0000                       sprintf@ap 004A                       sprintf@sp 004F  
                  _n_ADDRESS_P0 104D          hcsr04GetAerage@average 0046                ___lwmod@dividend 0028  
              ___lldiv@dividend 002A               __CFG_CLKOUTEN$OFF 0000       __size_of_nrf24l01SPIStart 0009  
                 __pstringtext1 1000                   __pstringtext2 104D                   __pstringtext3 1028  
                 __pstringtext4 1034                   __pstringtext5 103B                   __pstringtext6 1041  
                 __pstringtext7 1047                   __pstringtext8 1052                   __pstringtext9 1057  
                      sprintf@c 0054                        sprintf@f 003B      nrf24l01InitRegisters@DynPD 002D  
                      strcat@cp 0062                        strcat@to 00A0                ___lldiv@quotient 002E  
               ___lwmod@divisor 0026                        strcpy@cp 0070                        strcpy@to 0026  
               ___lwmod@counter 0070                      _WDTCONbits 0097                   ?_nrf24l01Init 0070  
                  ?_nrf24l01ISR 0070  
