

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Thu Aug 16 16:41:34 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text45,local,class=CODE,merge=1,delta=2,group=1
    74                           	psect	text46,local,class=CODE,merge=1,delta=2,group=1
    75                           	psect	text47,local,class=CODE,merge=1,delta=2,group=1
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	intentry,global,class=CODE,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	dabs	1,0x74,12
    81  0000                     
    82                           ; Version 2.00
    83                           ; Generated 27/05/2018 GMT
    84                           ; 
    85                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC16LF18325 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     	;# 
   117  0001                     	;# 
   118  0002                     	;# 
   119  0003                     	;# 
   120  0004                     	;# 
   121  0005                     	;# 
   122  0006                     	;# 
   123  0007                     	;# 
   124  0008                     	;# 
   125  0009                     	;# 
   126  000A                     	;# 
   127  000B                     	;# 
   128  000C                     	;# 
   129  000E                     	;# 
   130  0010                     	;# 
   131  0011                     	;# 
   132  0012                     	;# 
   133  0013                     	;# 
   134  0014                     	;# 
   135  0015                     	;# 
   136  0015                     	;# 
   137  0016                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  0019                     	;# 
   143  001A                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  001D                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  008C                     	;# 
   150  008E                     	;# 
   151  0090                     	;# 
   152  0091                     	;# 
   153  0092                     	;# 
   154  0093                     	;# 
   155  0094                     	;# 
   156  0097                     	;# 
   157  009B                     	;# 
   158  009B                     	;# 
   159  009C                     	;# 
   160  009D                     	;# 
   161  009E                     	;# 
   162  009F                     	;# 
   163  010C                     	;# 
   164  010E                     	;# 
   165  0111                     	;# 
   166  0112                     	;# 
   167  0113                     	;# 
   168  0114                     	;# 
   169  0115                     	;# 
   170  0116                     	;# 
   171  0117                     	;# 
   172  0118                     	;# 
   173  0119                     	;# 
   174  018C                     	;# 
   175  018E                     	;# 
   176  0199                     	;# 
   177  0199                     	;# 
   178  0199                     	;# 
   179  019A                     	;# 
   180  019A                     	;# 
   181  019A                     	;# 
   182  019B                     	;# 
   183  019B                     	;# 
   184  019B                     	;# 
   185  019B                     	;# 
   186  019B                     	;# 
   187  019C                     	;# 
   188  019C                     	;# 
   189  019C                     	;# 
   190  019D                     	;# 
   191  019D                     	;# 
   192  019D                     	;# 
   193  019E                     	;# 
   194  019E                     	;# 
   195  019E                     	;# 
   196  019F                     	;# 
   197  019F                     	;# 
   198  019F                     	;# 
   199  019F                     	;# 
   200  019F                     	;# 
   201  020C                     	;# 
   202  020E                     	;# 
   203  0211                     	;# 
   204  0211                     	;# 
   205  0212                     	;# 
   206  0212                     	;# 
   207  0213                     	;# 
   208  0213                     	;# 
   209  0214                     	;# 
   210  0214                     	;# 
   211  0215                     	;# 
   212  0215                     	;# 
   213  0215                     	;# 
   214  0215                     	;# 
   215  0216                     	;# 
   216  0216                     	;# 
   217  0217                     	;# 
   218  0217                     	;# 
   219  0219                     	;# 
   220  021A                     	;# 
   221  021B                     	;# 
   222  021C                     	;# 
   223  021D                     	;# 
   224  021D                     	;# 
   225  021E                     	;# 
   226  021F                     	;# 
   227  028C                     	;# 
   228  028E                     	;# 
   229  0291                     	;# 
   230  0291                     	;# 
   231  0292                     	;# 
   232  0293                     	;# 
   233  0294                     	;# 
   234  0295                     	;# 
   235  0295                     	;# 
   236  0296                     	;# 
   237  0297                     	;# 
   238  0298                     	;# 
   239  029F                     	;# 
   240  030C                     	;# 
   241  030E                     	;# 
   242  0311                     	;# 
   243  0311                     	;# 
   244  0312                     	;# 
   245  0313                     	;# 
   246  0314                     	;# 
   247  0315                     	;# 
   248  0315                     	;# 
   249  0316                     	;# 
   250  0317                     	;# 
   251  0318                     	;# 
   252  038C                     	;# 
   253  038E                     	;# 
   254  0391                     	;# 
   255  0392                     	;# 
   256  0393                     	;# 
   257  0397                     	;# 
   258  0398                     	;# 
   259  0399                     	;# 
   260  039A                     	;# 
   261  039C                     	;# 
   262  039D                     	;# 
   263  039E                     	;# 
   264  039F                     	;# 
   265  0411                     	;# 
   266  0411                     	;# 
   267  0412                     	;# 
   268  0413                     	;# 
   269  0414                     	;# 
   270  0415                     	;# 
   271  0416                     	;# 
   272  0417                     	;# 
   273  0418                     	;# 
   274  0418                     	;# 
   275  0419                     	;# 
   276  041A                     	;# 
   277  041B                     	;# 
   278  041C                     	;# 
   279  041D                     	;# 
   280  041E                     	;# 
   281  041F                     	;# 
   282  0498                     	;# 
   283  0498                     	;# 
   284  0499                     	;# 
   285  049A                     	;# 
   286  049B                     	;# 
   287  049B                     	;# 
   288  049C                     	;# 
   289  049D                     	;# 
   290  049E                     	;# 
   291  049F                     	;# 
   292  0617                     	;# 
   293  0618                     	;# 
   294  0619                     	;# 
   295  0619                     	;# 
   296  061A                     	;# 
   297  061B                     	;# 
   298  061C                     	;# 
   299  061C                     	;# 
   300  061F                     	;# 
   301  0691                     	;# 
   302  0692                     	;# 
   303  0693                     	;# 
   304  0694                     	;# 
   305  0695                     	;# 
   306  0696                     	;# 
   307  0697                     	;# 
   308  0698                     	;# 
   309  0699                     	;# 
   310  0711                     	;# 
   311  0712                     	;# 
   312  0713                     	;# 
   313  0714                     	;# 
   314  0715                     	;# 
   315  0716                     	;# 
   316  0717                     	;# 
   317  0718                     	;# 
   318  0719                     	;# 
   319  0891                     	;# 
   320  0891                     	;# 
   321  0891                     	;# 
   322  0891                     	;# 
   323  0891                     	;# 
   324  0891                     	;# 
   325  0892                     	;# 
   326  0892                     	;# 
   327  0892                     	;# 
   328  0893                     	;# 
   329  0893                     	;# 
   330  0893                     	;# 
   331  0893                     	;# 
   332  0893                     	;# 
   333  0893                     	;# 
   334  0894                     	;# 
   335  0894                     	;# 
   336  0894                     	;# 
   337  0895                     	;# 
   338  0895                     	;# 
   339  0895                     	;# 
   340  0896                     	;# 
   341  0896                     	;# 
   342  0896                     	;# 
   343  089B                     	;# 
   344  0911                     	;# 
   345  0912                     	;# 
   346  0913                     	;# 
   347  0914                     	;# 
   348  0915                     	;# 
   349  0916                     	;# 
   350  0918                     	;# 
   351  0919                     	;# 
   352  091A                     	;# 
   353  091B                     	;# 
   354  091C                     	;# 
   355  091D                     	;# 
   356  091E                     	;# 
   357  091F                     	;# 
   358  0E0F                     	;# 
   359  0E10                     	;# 
   360  0E11                     	;# 
   361  0E12                     	;# 
   362  0E13                     	;# 
   363  0E14                     	;# 
   364  0E15                     	;# 
   365  0E16                     	;# 
   366  0E17                     	;# 
   367  0E18                     	;# 
   368  0E19                     	;# 
   369  0E1A                     	;# 
   370  0E1B                     	;# 
   371  0E1C                     	;# 
   372  0E1D                     	;# 
   373  0E1E                     	;# 
   374  0E1F                     	;# 
   375  0E20                     	;# 
   376  0E21                     	;# 
   377  0E22                     	;# 
   378  0E24                     	;# 
   379  0E25                     	;# 
   380  0E28                     	;# 
   381  0E29                     	;# 
   382  0E2A                     	;# 
   383  0E2B                     	;# 
   384  0E2C                     	;# 
   385  0E2D                     	;# 
   386  0E2E                     	;# 
   387  0E2F                     	;# 
   388  0E90                     	;# 
   389  0E91                     	;# 
   390  0E92                     	;# 
   391  0E94                     	;# 
   392  0E95                     	;# 
   393  0EA0                     	;# 
   394  0EA1                     	;# 
   395  0EA2                     	;# 
   396  0EA3                     	;# 
   397  0EA4                     	;# 
   398  0EA5                     	;# 
   399  0F0F                     	;# 
   400  0F10                     	;# 
   401  0F11                     	;# 
   402  0F12                     	;# 
   403  0F13                     	;# 
   404  0F14                     	;# 
   405  0F15                     	;# 
   406  0F16                     	;# 
   407  0F17                     	;# 
   408  0F18                     	;# 
   409  0F19                     	;# 
   410  0F1A                     	;# 
   411  0F1B                     	;# 
   412  0F1C                     	;# 
   413  0F1D                     	;# 
   414  0F1E                     	;# 
   415  0F1F                     	;# 
   416  0F20                     	;# 
   417  0F21                     	;# 
   418  0F22                     	;# 
   419  0F23                     	;# 
   420  0F24                     	;# 
   421  0F25                     	;# 
   422  0F26                     	;# 
   423  0F27                     	;# 
   424  0F28                     	;# 
   425  0F29                     	;# 
   426  0F2A                     	;# 
   427  0F2B                     	;# 
   428  0F2C                     	;# 
   429  0F2D                     	;# 
   430  0F2E                     	;# 
   431  0F2F                     	;# 
   432  0F30                     	;# 
   433  0F31                     	;# 
   434  0F32                     	;# 
   435  0F33                     	;# 
   436  0F34                     	;# 
   437  0F35                     	;# 
   438  0F36                     	;# 
   439  0F37                     	;# 
   440  0FE4                     	;# 
   441  0FE5                     	;# 
   442  0FE6                     	;# 
   443  0FE7                     	;# 
   444  0FE8                     	;# 
   445  0FE9                     	;# 
   446  0FEA                     	;# 
   447  0FEB                     	;# 
   448  0FED                     	;# 
   449  0FEE                     	;# 
   450  0FEF                     	;# 
   451  0000                     	;# 
   452  0001                     	;# 
   453  0002                     	;# 
   454  0003                     	;# 
   455  0004                     	;# 
   456  0005                     	;# 
   457  0006                     	;# 
   458  0007                     	;# 
   459  0008                     	;# 
   460  0009                     	;# 
   461  000A                     	;# 
   462  000B                     	;# 
   463  000C                     	;# 
   464  000E                     	;# 
   465  0010                     	;# 
   466  0011                     	;# 
   467  0012                     	;# 
   468  0013                     	;# 
   469  0014                     	;# 
   470  0015                     	;# 
   471  0015                     	;# 
   472  0016                     	;# 
   473  0016                     	;# 
   474  0017                     	;# 
   475  0018                     	;# 
   476  0019                     	;# 
   477  0019                     	;# 
   478  001A                     	;# 
   479  001B                     	;# 
   480  001C                     	;# 
   481  001D                     	;# 
   482  001E                     	;# 
   483  001F                     	;# 
   484  008C                     	;# 
   485  008E                     	;# 
   486  0090                     	;# 
   487  0091                     	;# 
   488  0092                     	;# 
   489  0093                     	;# 
   490  0094                     	;# 
   491  0097                     	;# 
   492  009B                     	;# 
   493  009B                     	;# 
   494  009C                     	;# 
   495  009D                     	;# 
   496  009E                     	;# 
   497  009F                     	;# 
   498  010C                     	;# 
   499  010E                     	;# 
   500  0111                     	;# 
   501  0112                     	;# 
   502  0113                     	;# 
   503  0114                     	;# 
   504  0115                     	;# 
   505  0116                     	;# 
   506  0117                     	;# 
   507  0118                     	;# 
   508  0119                     	;# 
   509  018C                     	;# 
   510  018E                     	;# 
   511  0199                     	;# 
   512  0199                     	;# 
   513  0199                     	;# 
   514  019A                     	;# 
   515  019A                     	;# 
   516  019A                     	;# 
   517  019B                     	;# 
   518  019B                     	;# 
   519  019B                     	;# 
   520  019B                     	;# 
   521  019B                     	;# 
   522  019C                     	;# 
   523  019C                     	;# 
   524  019C                     	;# 
   525  019D                     	;# 
   526  019D                     	;# 
   527  019D                     	;# 
   528  019E                     	;# 
   529  019E                     	;# 
   530  019E                     	;# 
   531  019F                     	;# 
   532  019F                     	;# 
   533  019F                     	;# 
   534  019F                     	;# 
   535  019F                     	;# 
   536  020C                     	;# 
   537  020E                     	;# 
   538  0211                     	;# 
   539  0211                     	;# 
   540  0212                     	;# 
   541  0212                     	;# 
   542  0213                     	;# 
   543  0213                     	;# 
   544  0214                     	;# 
   545  0214                     	;# 
   546  0215                     	;# 
   547  0215                     	;# 
   548  0215                     	;# 
   549  0215                     	;# 
   550  0216                     	;# 
   551  0216                     	;# 
   552  0217                     	;# 
   553  0217                     	;# 
   554  0219                     	;# 
   555  021A                     	;# 
   556  021B                     	;# 
   557  021C                     	;# 
   558  021D                     	;# 
   559  021D                     	;# 
   560  021E                     	;# 
   561  021F                     	;# 
   562  028C                     	;# 
   563  028E                     	;# 
   564  0291                     	;# 
   565  0291                     	;# 
   566  0292                     	;# 
   567  0293                     	;# 
   568  0294                     	;# 
   569  0295                     	;# 
   570  0295                     	;# 
   571  0296                     	;# 
   572  0297                     	;# 
   573  0298                     	;# 
   574  029F                     	;# 
   575  030C                     	;# 
   576  030E                     	;# 
   577  0311                     	;# 
   578  0311                     	;# 
   579  0312                     	;# 
   580  0313                     	;# 
   581  0314                     	;# 
   582  0315                     	;# 
   583  0315                     	;# 
   584  0316                     	;# 
   585  0317                     	;# 
   586  0318                     	;# 
   587  038C                     	;# 
   588  038E                     	;# 
   589  0391                     	;# 
   590  0392                     	;# 
   591  0393                     	;# 
   592  0397                     	;# 
   593  0398                     	;# 
   594  0399                     	;# 
   595  039A                     	;# 
   596  039C                     	;# 
   597  039D                     	;# 
   598  039E                     	;# 
   599  039F                     	;# 
   600  0411                     	;# 
   601  0411                     	;# 
   602  0412                     	;# 
   603  0413                     	;# 
   604  0414                     	;# 
   605  0415                     	;# 
   606  0416                     	;# 
   607  0417                     	;# 
   608  0418                     	;# 
   609  0418                     	;# 
   610  0419                     	;# 
   611  041A                     	;# 
   612  041B                     	;# 
   613  041C                     	;# 
   614  041D                     	;# 
   615  041E                     	;# 
   616  041F                     	;# 
   617  0498                     	;# 
   618  0498                     	;# 
   619  0499                     	;# 
   620  049A                     	;# 
   621  049B                     	;# 
   622  049B                     	;# 
   623  049C                     	;# 
   624  049D                     	;# 
   625  049E                     	;# 
   626  049F                     	;# 
   627  0617                     	;# 
   628  0618                     	;# 
   629  0619                     	;# 
   630  0619                     	;# 
   631  061A                     	;# 
   632  061B                     	;# 
   633  061C                     	;# 
   634  061C                     	;# 
   635  061F                     	;# 
   636  0691                     	;# 
   637  0692                     	;# 
   638  0693                     	;# 
   639  0694                     	;# 
   640  0695                     	;# 
   641  0696                     	;# 
   642  0697                     	;# 
   643  0698                     	;# 
   644  0699                     	;# 
   645  0711                     	;# 
   646  0712                     	;# 
   647  0713                     	;# 
   648  0714                     	;# 
   649  0715                     	;# 
   650  0716                     	;# 
   651  0717                     	;# 
   652  0718                     	;# 
   653  0719                     	;# 
   654  0891                     	;# 
   655  0891                     	;# 
   656  0891                     	;# 
   657  0891                     	;# 
   658  0891                     	;# 
   659  0891                     	;# 
   660  0892                     	;# 
   661  0892                     	;# 
   662  0892                     	;# 
   663  0893                     	;# 
   664  0893                     	;# 
   665  0893                     	;# 
   666  0893                     	;# 
   667  0893                     	;# 
   668  0893                     	;# 
   669  0894                     	;# 
   670  0894                     	;# 
   671  0894                     	;# 
   672  0895                     	;# 
   673  0895                     	;# 
   674  0895                     	;# 
   675  0896                     	;# 
   676  0896                     	;# 
   677  0896                     	;# 
   678  089B                     	;# 
   679  0911                     	;# 
   680  0912                     	;# 
   681  0913                     	;# 
   682  0914                     	;# 
   683  0915                     	;# 
   684  0916                     	;# 
   685  0918                     	;# 
   686  0919                     	;# 
   687  091A                     	;# 
   688  091B                     	;# 
   689  091C                     	;# 
   690  091D                     	;# 
   691  091E                     	;# 
   692  091F                     	;# 
   693  0E0F                     	;# 
   694  0E10                     	;# 
   695  0E11                     	;# 
   696  0E12                     	;# 
   697  0E13                     	;# 
   698  0E14                     	;# 
   699  0E15                     	;# 
   700  0E16                     	;# 
   701  0E17                     	;# 
   702  0E18                     	;# 
   703  0E19                     	;# 
   704  0E1A                     	;# 
   705  0E1B                     	;# 
   706  0E1C                     	;# 
   707  0E1D                     	;# 
   708  0E1E                     	;# 
   709  0E1F                     	;# 
   710  0E20                     	;# 
   711  0E21                     	;# 
   712  0E22                     	;# 
   713  0E24                     	;# 
   714  0E25                     	;# 
   715  0E28                     	;# 
   716  0E29                     	;# 
   717  0E2A                     	;# 
   718  0E2B                     	;# 
   719  0E2C                     	;# 
   720  0E2D                     	;# 
   721  0E2E                     	;# 
   722  0E2F                     	;# 
   723  0E90                     	;# 
   724  0E91                     	;# 
   725  0E92                     	;# 
   726  0E94                     	;# 
   727  0E95                     	;# 
   728  0EA0                     	;# 
   729  0EA1                     	;# 
   730  0EA2                     	;# 
   731  0EA3                     	;# 
   732  0EA4                     	;# 
   733  0EA5                     	;# 
   734  0F0F                     	;# 
   735  0F10                     	;# 
   736  0F11                     	;# 
   737  0F12                     	;# 
   738  0F13                     	;# 
   739  0F14                     	;# 
   740  0F15                     	;# 
   741  0F16                     	;# 
   742  0F17                     	;# 
   743  0F18                     	;# 
   744  0F19                     	;# 
   745  0F1A                     	;# 
   746  0F1B                     	;# 
   747  0F1C                     	;# 
   748  0F1D                     	;# 
   749  0F1E                     	;# 
   750  0F1F                     	;# 
   751  0F20                     	;# 
   752  0F21                     	;# 
   753  0F22                     	;# 
   754  0F23                     	;# 
   755  0F24                     	;# 
   756  0F25                     	;# 
   757  0F26                     	;# 
   758  0F27                     	;# 
   759  0F28                     	;# 
   760  0F29                     	;# 
   761  0F2A                     	;# 
   762  0F2B                     	;# 
   763  0F2C                     	;# 
   764  0F2D                     	;# 
   765  0F2E                     	;# 
   766  0F2F                     	;# 
   767  0F30                     	;# 
   768  0F31                     	;# 
   769  0F32                     	;# 
   770  0F33                     	;# 
   771  0F34                     	;# 
   772  0F35                     	;# 
   773  0F36                     	;# 
   774  0F37                     	;# 
   775  0FE4                     	;# 
   776  0FE5                     	;# 
   777  0FE6                     	;# 
   778  0FE7                     	;# 
   779  0FE8                     	;# 
   780  0FE9                     	;# 
   781  0FEA                     	;# 
   782  0FEB                     	;# 
   783  0FED                     	;# 
   784  0FEE                     	;# 
   785  0FEF                     	;# 
   786  0000                     	;# 
   787  0001                     	;# 
   788  0002                     	;# 
   789  0003                     	;# 
   790  0004                     	;# 
   791  0005                     	;# 
   792  0006                     	;# 
   793  0007                     	;# 
   794  0008                     	;# 
   795  0009                     	;# 
   796  000A                     	;# 
   797  000B                     	;# 
   798  000C                     	;# 
   799  000E                     	;# 
   800  0010                     	;# 
   801  0011                     	;# 
   802  0012                     	;# 
   803  0013                     	;# 
   804  0014                     	;# 
   805  0015                     	;# 
   806  0015                     	;# 
   807  0016                     	;# 
   808  0016                     	;# 
   809  0017                     	;# 
   810  0018                     	;# 
   811  0019                     	;# 
   812  0019                     	;# 
   813  001A                     	;# 
   814  001B                     	;# 
   815  001C                     	;# 
   816  001D                     	;# 
   817  001E                     	;# 
   818  001F                     	;# 
   819  008C                     	;# 
   820  008E                     	;# 
   821  0090                     	;# 
   822  0091                     	;# 
   823  0092                     	;# 
   824  0093                     	;# 
   825  0094                     	;# 
   826  0097                     	;# 
   827  009B                     	;# 
   828  009B                     	;# 
   829  009C                     	;# 
   830  009D                     	;# 
   831  009E                     	;# 
   832  009F                     	;# 
   833  010C                     	;# 
   834  010E                     	;# 
   835  0111                     	;# 
   836  0112                     	;# 
   837  0113                     	;# 
   838  0114                     	;# 
   839  0115                     	;# 
   840  0116                     	;# 
   841  0117                     	;# 
   842  0118                     	;# 
   843  0119                     	;# 
   844  018C                     	;# 
   845  018E                     	;# 
   846  0199                     	;# 
   847  0199                     	;# 
   848  0199                     	;# 
   849  019A                     	;# 
   850  019A                     	;# 
   851  019A                     	;# 
   852  019B                     	;# 
   853  019B                     	;# 
   854  019B                     	;# 
   855  019B                     	;# 
   856  019B                     	;# 
   857  019C                     	;# 
   858  019C                     	;# 
   859  019C                     	;# 
   860  019D                     	;# 
   861  019D                     	;# 
   862  019D                     	;# 
   863  019E                     	;# 
   864  019E                     	;# 
   865  019E                     	;# 
   866  019F                     	;# 
   867  019F                     	;# 
   868  019F                     	;# 
   869  019F                     	;# 
   870  019F                     	;# 
   871  020C                     	;# 
   872  020E                     	;# 
   873  0211                     	;# 
   874  0211                     	;# 
   875  0212                     	;# 
   876  0212                     	;# 
   877  0213                     	;# 
   878  0213                     	;# 
   879  0214                     	;# 
   880  0214                     	;# 
   881  0215                     	;# 
   882  0215                     	;# 
   883  0215                     	;# 
   884  0215                     	;# 
   885  0216                     	;# 
   886  0216                     	;# 
   887  0217                     	;# 
   888  0217                     	;# 
   889  0219                     	;# 
   890  021A                     	;# 
   891  021B                     	;# 
   892  021C                     	;# 
   893  021D                     	;# 
   894  021D                     	;# 
   895  021E                     	;# 
   896  021F                     	;# 
   897  028C                     	;# 
   898  028E                     	;# 
   899  0291                     	;# 
   900  0291                     	;# 
   901  0292                     	;# 
   902  0293                     	;# 
   903  0294                     	;# 
   904  0295                     	;# 
   905  0295                     	;# 
   906  0296                     	;# 
   907  0297                     	;# 
   908  0298                     	;# 
   909  029F                     	;# 
   910  030C                     	;# 
   911  030E                     	;# 
   912  0311                     	;# 
   913  0311                     	;# 
   914  0312                     	;# 
   915  0313                     	;# 
   916  0314                     	;# 
   917  0315                     	;# 
   918  0315                     	;# 
   919  0316                     	;# 
   920  0317                     	;# 
   921  0318                     	;# 
   922  038C                     	;# 
   923  038E                     	;# 
   924  0391                     	;# 
   925  0392                     	;# 
   926  0393                     	;# 
   927  0397                     	;# 
   928  0398                     	;# 
   929  0399                     	;# 
   930  039A                     	;# 
   931  039C                     	;# 
   932  039D                     	;# 
   933  039E                     	;# 
   934  039F                     	;# 
   935  0411                     	;# 
   936  0411                     	;# 
   937  0412                     	;# 
   938  0413                     	;# 
   939  0414                     	;# 
   940  0415                     	;# 
   941  0416                     	;# 
   942  0417                     	;# 
   943  0418                     	;# 
   944  0418                     	;# 
   945  0419                     	;# 
   946  041A                     	;# 
   947  041B                     	;# 
   948  041C                     	;# 
   949  041D                     	;# 
   950  041E                     	;# 
   951  041F                     	;# 
   952  0498                     	;# 
   953  0498                     	;# 
   954  0499                     	;# 
   955  049A                     	;# 
   956  049B                     	;# 
   957  049B                     	;# 
   958  049C                     	;# 
   959  049D                     	;# 
   960  049E                     	;# 
   961  049F                     	;# 
   962  0617                     	;# 
   963  0618                     	;# 
   964  0619                     	;# 
   965  0619                     	;# 
   966  061A                     	;# 
   967  061B                     	;# 
   968  061C                     	;# 
   969  061C                     	;# 
   970  061F                     	;# 
   971  0691                     	;# 
   972  0692                     	;# 
   973  0693                     	;# 
   974  0694                     	;# 
   975  0695                     	;# 
   976  0696                     	;# 
   977  0697                     	;# 
   978  0698                     	;# 
   979  0699                     	;# 
   980  0711                     	;# 
   981  0712                     	;# 
   982  0713                     	;# 
   983  0714                     	;# 
   984  0715                     	;# 
   985  0716                     	;# 
   986  0717                     	;# 
   987  0718                     	;# 
   988  0719                     	;# 
   989  0891                     	;# 
   990  0891                     	;# 
   991  0891                     	;# 
   992  0891                     	;# 
   993  0891                     	;# 
   994  0891                     	;# 
   995  0892                     	;# 
   996  0892                     	;# 
   997  0892                     	;# 
   998  0893                     	;# 
   999  0893                     	;# 
  1000  0893                     	;# 
  1001  0893                     	;# 
  1002  0893                     	;# 
  1003  0893                     	;# 
  1004  0894                     	;# 
  1005  0894                     	;# 
  1006  0894                     	;# 
  1007  0895                     	;# 
  1008  0895                     	;# 
  1009  0895                     	;# 
  1010  0896                     	;# 
  1011  0896                     	;# 
  1012  0896                     	;# 
  1013  089B                     	;# 
  1014  0911                     	;# 
  1015  0912                     	;# 
  1016  0913                     	;# 
  1017  0914                     	;# 
  1018  0915                     	;# 
  1019  0916                     	;# 
  1020  0918                     	;# 
  1021  0919                     	;# 
  1022  091A                     	;# 
  1023  091B                     	;# 
  1024  091C                     	;# 
  1025  091D                     	;# 
  1026  091E                     	;# 
  1027  091F                     	;# 
  1028  0E0F                     	;# 
  1029  0E10                     	;# 
  1030  0E11                     	;# 
  1031  0E12                     	;# 
  1032  0E13                     	;# 
  1033  0E14                     	;# 
  1034  0E15                     	;# 
  1035  0E16                     	;# 
  1036  0E17                     	;# 
  1037  0E18                     	;# 
  1038  0E19                     	;# 
  1039  0E1A                     	;# 
  1040  0E1B                     	;# 
  1041  0E1C                     	;# 
  1042  0E1D                     	;# 
  1043  0E1E                     	;# 
  1044  0E1F                     	;# 
  1045  0E20                     	;# 
  1046  0E21                     	;# 
  1047  0E22                     	;# 
  1048  0E24                     	;# 
  1049  0E25                     	;# 
  1050  0E28                     	;# 
  1051  0E29                     	;# 
  1052  0E2A                     	;# 
  1053  0E2B                     	;# 
  1054  0E2C                     	;# 
  1055  0E2D                     	;# 
  1056  0E2E                     	;# 
  1057  0E2F                     	;# 
  1058  0E90                     	;# 
  1059  0E91                     	;# 
  1060  0E92                     	;# 
  1061  0E94                     	;# 
  1062  0E95                     	;# 
  1063  0EA0                     	;# 
  1064  0EA1                     	;# 
  1065  0EA2                     	;# 
  1066  0EA3                     	;# 
  1067  0EA4                     	;# 
  1068  0EA5                     	;# 
  1069  0F0F                     	;# 
  1070  0F10                     	;# 
  1071  0F11                     	;# 
  1072  0F12                     	;# 
  1073  0F13                     	;# 
  1074  0F14                     	;# 
  1075  0F15                     	;# 
  1076  0F16                     	;# 
  1077  0F17                     	;# 
  1078  0F18                     	;# 
  1079  0F19                     	;# 
  1080  0F1A                     	;# 
  1081  0F1B                     	;# 
  1082  0F1C                     	;# 
  1083  0F1D                     	;# 
  1084  0F1E                     	;# 
  1085  0F1F                     	;# 
  1086  0F20                     	;# 
  1087  0F21                     	;# 
  1088  0F22                     	;# 
  1089  0F23                     	;# 
  1090  0F24                     	;# 
  1091  0F25                     	;# 
  1092  0F26                     	;# 
  1093  0F27                     	;# 
  1094  0F28                     	;# 
  1095  0F29                     	;# 
  1096  0F2A                     	;# 
  1097  0F2B                     	;# 
  1098  0F2C                     	;# 
  1099  0F2D                     	;# 
  1100  0F2E                     	;# 
  1101  0F2F                     	;# 
  1102  0F30                     	;# 
  1103  0F31                     	;# 
  1104  0F32                     	;# 
  1105  0F33                     	;# 
  1106  0F34                     	;# 
  1107  0F35                     	;# 
  1108  0F36                     	;# 
  1109  0F37                     	;# 
  1110  0FE4                     	;# 
  1111  0FE5                     	;# 
  1112  0FE6                     	;# 
  1113  0FE7                     	;# 
  1114  0FE8                     	;# 
  1115  0FE9                     	;# 
  1116  0FEA                     	;# 
  1117  0FEB                     	;# 
  1118  0FED                     	;# 
  1119  0FEE                     	;# 
  1120  0FEF                     	;# 
  1121  0000                     	;# 
  1122  0001                     	;# 
  1123  0002                     	;# 
  1124  0003                     	;# 
  1125  0004                     	;# 
  1126  0005                     	;# 
  1127  0006                     	;# 
  1128  0007                     	;# 
  1129  0008                     	;# 
  1130  0009                     	;# 
  1131  000A                     	;# 
  1132  000B                     	;# 
  1133  000C                     	;# 
  1134  000E                     	;# 
  1135  0010                     	;# 
  1136  0011                     	;# 
  1137  0012                     	;# 
  1138  0013                     	;# 
  1139  0014                     	;# 
  1140  0015                     	;# 
  1141  0015                     	;# 
  1142  0016                     	;# 
  1143  0016                     	;# 
  1144  0017                     	;# 
  1145  0018                     	;# 
  1146  0019                     	;# 
  1147  0019                     	;# 
  1148  001A                     	;# 
  1149  001B                     	;# 
  1150  001C                     	;# 
  1151  001D                     	;# 
  1152  001E                     	;# 
  1153  001F                     	;# 
  1154  008C                     	;# 
  1155  008E                     	;# 
  1156  0090                     	;# 
  1157  0091                     	;# 
  1158  0092                     	;# 
  1159  0093                     	;# 
  1160  0094                     	;# 
  1161  0097                     	;# 
  1162  009B                     	;# 
  1163  009B                     	;# 
  1164  009C                     	;# 
  1165  009D                     	;# 
  1166  009E                     	;# 
  1167  009F                     	;# 
  1168  010C                     	;# 
  1169  010E                     	;# 
  1170  0111                     	;# 
  1171  0112                     	;# 
  1172  0113                     	;# 
  1173  0114                     	;# 
  1174  0115                     	;# 
  1175  0116                     	;# 
  1176  0117                     	;# 
  1177  0118                     	;# 
  1178  0119                     	;# 
  1179  018C                     	;# 
  1180  018E                     	;# 
  1181  0199                     	;# 
  1182  0199                     	;# 
  1183  0199                     	;# 
  1184  019A                     	;# 
  1185  019A                     	;# 
  1186  019A                     	;# 
  1187  019B                     	;# 
  1188  019B                     	;# 
  1189  019B                     	;# 
  1190  019B                     	;# 
  1191  019B                     	;# 
  1192  019C                     	;# 
  1193  019C                     	;# 
  1194  019C                     	;# 
  1195  019D                     	;# 
  1196  019D                     	;# 
  1197  019D                     	;# 
  1198  019E                     	;# 
  1199  019E                     	;# 
  1200  019E                     	;# 
  1201  019F                     	;# 
  1202  019F                     	;# 
  1203  019F                     	;# 
  1204  019F                     	;# 
  1205  019F                     	;# 
  1206  020C                     	;# 
  1207  020E                     	;# 
  1208  0211                     	;# 
  1209  0211                     	;# 
  1210  0212                     	;# 
  1211  0212                     	;# 
  1212  0213                     	;# 
  1213  0213                     	;# 
  1214  0214                     	;# 
  1215  0214                     	;# 
  1216  0215                     	;# 
  1217  0215                     	;# 
  1218  0215                     	;# 
  1219  0215                     	;# 
  1220  0216                     	;# 
  1221  0216                     	;# 
  1222  0217                     	;# 
  1223  0217                     	;# 
  1224  0219                     	;# 
  1225  021A                     	;# 
  1226  021B                     	;# 
  1227  021C                     	;# 
  1228  021D                     	;# 
  1229  021D                     	;# 
  1230  021E                     	;# 
  1231  021F                     	;# 
  1232  028C                     	;# 
  1233  028E                     	;# 
  1234  0291                     	;# 
  1235  0291                     	;# 
  1236  0292                     	;# 
  1237  0293                     	;# 
  1238  0294                     	;# 
  1239  0295                     	;# 
  1240  0295                     	;# 
  1241  0296                     	;# 
  1242  0297                     	;# 
  1243  0298                     	;# 
  1244  029F                     	;# 
  1245  030C                     	;# 
  1246  030E                     	;# 
  1247  0311                     	;# 
  1248  0311                     	;# 
  1249  0312                     	;# 
  1250  0313                     	;# 
  1251  0314                     	;# 
  1252  0315                     	;# 
  1253  0315                     	;# 
  1254  0316                     	;# 
  1255  0317                     	;# 
  1256  0318                     	;# 
  1257  038C                     	;# 
  1258  038E                     	;# 
  1259  0391                     	;# 
  1260  0392                     	;# 
  1261  0393                     	;# 
  1262  0397                     	;# 
  1263  0398                     	;# 
  1264  0399                     	;# 
  1265  039A                     	;# 
  1266  039C                     	;# 
  1267  039D                     	;# 
  1268  039E                     	;# 
  1269  039F                     	;# 
  1270  0411                     	;# 
  1271  0411                     	;# 
  1272  0412                     	;# 
  1273  0413                     	;# 
  1274  0414                     	;# 
  1275  0415                     	;# 
  1276  0416                     	;# 
  1277  0417                     	;# 
  1278  0418                     	;# 
  1279  0418                     	;# 
  1280  0419                     	;# 
  1281  041A                     	;# 
  1282  041B                     	;# 
  1283  041C                     	;# 
  1284  041D                     	;# 
  1285  041E                     	;# 
  1286  041F                     	;# 
  1287  0498                     	;# 
  1288  0498                     	;# 
  1289  0499                     	;# 
  1290  049A                     	;# 
  1291  049B                     	;# 
  1292  049B                     	;# 
  1293  049C                     	;# 
  1294  049D                     	;# 
  1295  049E                     	;# 
  1296  049F                     	;# 
  1297  0617                     	;# 
  1298  0618                     	;# 
  1299  0619                     	;# 
  1300  0619                     	;# 
  1301  061A                     	;# 
  1302  061B                     	;# 
  1303  061C                     	;# 
  1304  061C                     	;# 
  1305  061F                     	;# 
  1306  0691                     	;# 
  1307  0692                     	;# 
  1308  0693                     	;# 
  1309  0694                     	;# 
  1310  0695                     	;# 
  1311  0696                     	;# 
  1312  0697                     	;# 
  1313  0698                     	;# 
  1314  0699                     	;# 
  1315  0711                     	;# 
  1316  0712                     	;# 
  1317  0713                     	;# 
  1318  0714                     	;# 
  1319  0715                     	;# 
  1320  0716                     	;# 
  1321  0717                     	;# 
  1322  0718                     	;# 
  1323  0719                     	;# 
  1324  0891                     	;# 
  1325  0891                     	;# 
  1326  0891                     	;# 
  1327  0891                     	;# 
  1328  0891                     	;# 
  1329  0891                     	;# 
  1330  0892                     	;# 
  1331  0892                     	;# 
  1332  0892                     	;# 
  1333  0893                     	;# 
  1334  0893                     	;# 
  1335  0893                     	;# 
  1336  0893                     	;# 
  1337  0893                     	;# 
  1338  0893                     	;# 
  1339  0894                     	;# 
  1340  0894                     	;# 
  1341  0894                     	;# 
  1342  0895                     	;# 
  1343  0895                     	;# 
  1344  0895                     	;# 
  1345  0896                     	;# 
  1346  0896                     	;# 
  1347  0896                     	;# 
  1348  089B                     	;# 
  1349  0911                     	;# 
  1350  0912                     	;# 
  1351  0913                     	;# 
  1352  0914                     	;# 
  1353  0915                     	;# 
  1354  0916                     	;# 
  1355  0918                     	;# 
  1356  0919                     	;# 
  1357  091A                     	;# 
  1358  091B                     	;# 
  1359  091C                     	;# 
  1360  091D                     	;# 
  1361  091E                     	;# 
  1362  091F                     	;# 
  1363  0E0F                     	;# 
  1364  0E10                     	;# 
  1365  0E11                     	;# 
  1366  0E12                     	;# 
  1367  0E13                     	;# 
  1368  0E14                     	;# 
  1369  0E15                     	;# 
  1370  0E16                     	;# 
  1371  0E17                     	;# 
  1372  0E18                     	;# 
  1373  0E19                     	;# 
  1374  0E1A                     	;# 
  1375  0E1B                     	;# 
  1376  0E1C                     	;# 
  1377  0E1D                     	;# 
  1378  0E1E                     	;# 
  1379  0E1F                     	;# 
  1380  0E20                     	;# 
  1381  0E21                     	;# 
  1382  0E22                     	;# 
  1383  0E24                     	;# 
  1384  0E25                     	;# 
  1385  0E28                     	;# 
  1386  0E29                     	;# 
  1387  0E2A                     	;# 
  1388  0E2B                     	;# 
  1389  0E2C                     	;# 
  1390  0E2D                     	;# 
  1391  0E2E                     	;# 
  1392  0E2F                     	;# 
  1393  0E90                     	;# 
  1394  0E91                     	;# 
  1395  0E92                     	;# 
  1396  0E94                     	;# 
  1397  0E95                     	;# 
  1398  0EA0                     	;# 
  1399  0EA1                     	;# 
  1400  0EA2                     	;# 
  1401  0EA3                     	;# 
  1402  0EA4                     	;# 
  1403  0EA5                     	;# 
  1404  0F0F                     	;# 
  1405  0F10                     	;# 
  1406  0F11                     	;# 
  1407  0F12                     	;# 
  1408  0F13                     	;# 
  1409  0F14                     	;# 
  1410  0F15                     	;# 
  1411  0F16                     	;# 
  1412  0F17                     	;# 
  1413  0F18                     	;# 
  1414  0F19                     	;# 
  1415  0F1A                     	;# 
  1416  0F1B                     	;# 
  1417  0F1C                     	;# 
  1418  0F1D                     	;# 
  1419  0F1E                     	;# 
  1420  0F1F                     	;# 
  1421  0F20                     	;# 
  1422  0F21                     	;# 
  1423  0F22                     	;# 
  1424  0F23                     	;# 
  1425  0F24                     	;# 
  1426  0F25                     	;# 
  1427  0F26                     	;# 
  1428  0F27                     	;# 
  1429  0F28                     	;# 
  1430  0F29                     	;# 
  1431  0F2A                     	;# 
  1432  0F2B                     	;# 
  1433  0F2C                     	;# 
  1434  0F2D                     	;# 
  1435  0F2E                     	;# 
  1436  0F2F                     	;# 
  1437  0F30                     	;# 
  1438  0F31                     	;# 
  1439  0F32                     	;# 
  1440  0F33                     	;# 
  1441  0F34                     	;# 
  1442  0F35                     	;# 
  1443  0F36                     	;# 
  1444  0F37                     	;# 
  1445  0FE4                     	;# 
  1446  0FE5                     	;# 
  1447  0FE6                     	;# 
  1448  0FE7                     	;# 
  1449  0FE8                     	;# 
  1450  0FE9                     	;# 
  1451  0FEA                     	;# 
  1452  0FEB                     	;# 
  1453  0FED                     	;# 
  1454  0FEE                     	;# 
  1455  0FEF                     	;# 
  1456  0000                     	;# 
  1457  0001                     	;# 
  1458  0002                     	;# 
  1459  0003                     	;# 
  1460  0004                     	;# 
  1461  0005                     	;# 
  1462  0006                     	;# 
  1463  0007                     	;# 
  1464  0008                     	;# 
  1465  0009                     	;# 
  1466  000A                     	;# 
  1467  000B                     	;# 
  1468  000C                     	;# 
  1469  000E                     	;# 
  1470  0010                     	;# 
  1471  0011                     	;# 
  1472  0012                     	;# 
  1473  0013                     	;# 
  1474  0014                     	;# 
  1475  0015                     	;# 
  1476  0015                     	;# 
  1477  0016                     	;# 
  1478  0016                     	;# 
  1479  0017                     	;# 
  1480  0018                     	;# 
  1481  0019                     	;# 
  1482  0019                     	;# 
  1483  001A                     	;# 
  1484  001B                     	;# 
  1485  001C                     	;# 
  1486  001D                     	;# 
  1487  001E                     	;# 
  1488  001F                     	;# 
  1489  008C                     	;# 
  1490  008E                     	;# 
  1491  0090                     	;# 
  1492  0091                     	;# 
  1493  0092                     	;# 
  1494  0093                     	;# 
  1495  0094                     	;# 
  1496  0097                     	;# 
  1497  009B                     	;# 
  1498  009B                     	;# 
  1499  009C                     	;# 
  1500  009D                     	;# 
  1501  009E                     	;# 
  1502  009F                     	;# 
  1503  010C                     	;# 
  1504  010E                     	;# 
  1505  0111                     	;# 
  1506  0112                     	;# 
  1507  0113                     	;# 
  1508  0114                     	;# 
  1509  0115                     	;# 
  1510  0116                     	;# 
  1511  0117                     	;# 
  1512  0118                     	;# 
  1513  0119                     	;# 
  1514  018C                     	;# 
  1515  018E                     	;# 
  1516  0199                     	;# 
  1517  0199                     	;# 
  1518  0199                     	;# 
  1519  019A                     	;# 
  1520  019A                     	;# 
  1521  019A                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019B                     	;# 
  1525  019B                     	;# 
  1526  019B                     	;# 
  1527  019C                     	;# 
  1528  019C                     	;# 
  1529  019C                     	;# 
  1530  019D                     	;# 
  1531  019D                     	;# 
  1532  019D                     	;# 
  1533  019E                     	;# 
  1534  019E                     	;# 
  1535  019E                     	;# 
  1536  019F                     	;# 
  1537  019F                     	;# 
  1538  019F                     	;# 
  1539  019F                     	;# 
  1540  019F                     	;# 
  1541  020C                     	;# 
  1542  020E                     	;# 
  1543  0211                     	;# 
  1544  0211                     	;# 
  1545  0212                     	;# 
  1546  0212                     	;# 
  1547  0213                     	;# 
  1548  0213                     	;# 
  1549  0214                     	;# 
  1550  0214                     	;# 
  1551  0215                     	;# 
  1552  0215                     	;# 
  1553  0215                     	;# 
  1554  0215                     	;# 
  1555  0216                     	;# 
  1556  0216                     	;# 
  1557  0217                     	;# 
  1558  0217                     	;# 
  1559  0219                     	;# 
  1560  021A                     	;# 
  1561  021B                     	;# 
  1562  021C                     	;# 
  1563  021D                     	;# 
  1564  021D                     	;# 
  1565  021E                     	;# 
  1566  021F                     	;# 
  1567  028C                     	;# 
  1568  028E                     	;# 
  1569  0291                     	;# 
  1570  0291                     	;# 
  1571  0292                     	;# 
  1572  0293                     	;# 
  1573  0294                     	;# 
  1574  0295                     	;# 
  1575  0295                     	;# 
  1576  0296                     	;# 
  1577  0297                     	;# 
  1578  0298                     	;# 
  1579  029F                     	;# 
  1580  030C                     	;# 
  1581  030E                     	;# 
  1582  0311                     	;# 
  1583  0311                     	;# 
  1584  0312                     	;# 
  1585  0313                     	;# 
  1586  0314                     	;# 
  1587  0315                     	;# 
  1588  0315                     	;# 
  1589  0316                     	;# 
  1590  0317                     	;# 
  1591  0318                     	;# 
  1592  038C                     	;# 
  1593  038E                     	;# 
  1594  0391                     	;# 
  1595  0392                     	;# 
  1596  0393                     	;# 
  1597  0397                     	;# 
  1598  0398                     	;# 
  1599  0399                     	;# 
  1600  039A                     	;# 
  1601  039C                     	;# 
  1602  039D                     	;# 
  1603  039E                     	;# 
  1604  039F                     	;# 
  1605  0411                     	;# 
  1606  0411                     	;# 
  1607  0412                     	;# 
  1608  0413                     	;# 
  1609  0414                     	;# 
  1610  0415                     	;# 
  1611  0416                     	;# 
  1612  0417                     	;# 
  1613  0418                     	;# 
  1614  0418                     	;# 
  1615  0419                     	;# 
  1616  041A                     	;# 
  1617  041B                     	;# 
  1618  041C                     	;# 
  1619  041D                     	;# 
  1620  041E                     	;# 
  1621  041F                     	;# 
  1622  0498                     	;# 
  1623  0498                     	;# 
  1624  0499                     	;# 
  1625  049A                     	;# 
  1626  049B                     	;# 
  1627  049B                     	;# 
  1628  049C                     	;# 
  1629  049D                     	;# 
  1630  049E                     	;# 
  1631  049F                     	;# 
  1632  0617                     	;# 
  1633  0618                     	;# 
  1634  0619                     	;# 
  1635  0619                     	;# 
  1636  061A                     	;# 
  1637  061B                     	;# 
  1638  061C                     	;# 
  1639  061C                     	;# 
  1640  061F                     	;# 
  1641  0691                     	;# 
  1642  0692                     	;# 
  1643  0693                     	;# 
  1644  0694                     	;# 
  1645  0695                     	;# 
  1646  0696                     	;# 
  1647  0697                     	;# 
  1648  0698                     	;# 
  1649  0699                     	;# 
  1650  0711                     	;# 
  1651  0712                     	;# 
  1652  0713                     	;# 
  1653  0714                     	;# 
  1654  0715                     	;# 
  1655  0716                     	;# 
  1656  0717                     	;# 
  1657  0718                     	;# 
  1658  0719                     	;# 
  1659  0891                     	;# 
  1660  0891                     	;# 
  1661  0891                     	;# 
  1662  0891                     	;# 
  1663  0891                     	;# 
  1664  0891                     	;# 
  1665  0892                     	;# 
  1666  0892                     	;# 
  1667  0892                     	;# 
  1668  0893                     	;# 
  1669  0893                     	;# 
  1670  0893                     	;# 
  1671  0893                     	;# 
  1672  0893                     	;# 
  1673  0893                     	;# 
  1674  0894                     	;# 
  1675  0894                     	;# 
  1676  0894                     	;# 
  1677  0895                     	;# 
  1678  0895                     	;# 
  1679  0895                     	;# 
  1680  0896                     	;# 
  1681  0896                     	;# 
  1682  0896                     	;# 
  1683  089B                     	;# 
  1684  0911                     	;# 
  1685  0912                     	;# 
  1686  0913                     	;# 
  1687  0914                     	;# 
  1688  0915                     	;# 
  1689  0916                     	;# 
  1690  0918                     	;# 
  1691  0919                     	;# 
  1692  091A                     	;# 
  1693  091B                     	;# 
  1694  091C                     	;# 
  1695  091D                     	;# 
  1696  091E                     	;# 
  1697  091F                     	;# 
  1698  0E0F                     	;# 
  1699  0E10                     	;# 
  1700  0E11                     	;# 
  1701  0E12                     	;# 
  1702  0E13                     	;# 
  1703  0E14                     	;# 
  1704  0E15                     	;# 
  1705  0E16                     	;# 
  1706  0E17                     	;# 
  1707  0E18                     	;# 
  1708  0E19                     	;# 
  1709  0E1A                     	;# 
  1710  0E1B                     	;# 
  1711  0E1C                     	;# 
  1712  0E1D                     	;# 
  1713  0E1E                     	;# 
  1714  0E1F                     	;# 
  1715  0E20                     	;# 
  1716  0E21                     	;# 
  1717  0E22                     	;# 
  1718  0E24                     	;# 
  1719  0E25                     	;# 
  1720  0E28                     	;# 
  1721  0E29                     	;# 
  1722  0E2A                     	;# 
  1723  0E2B                     	;# 
  1724  0E2C                     	;# 
  1725  0E2D                     	;# 
  1726  0E2E                     	;# 
  1727  0E2F                     	;# 
  1728  0E90                     	;# 
  1729  0E91                     	;# 
  1730  0E92                     	;# 
  1731  0E94                     	;# 
  1732  0E95                     	;# 
  1733  0EA0                     	;# 
  1734  0EA1                     	;# 
  1735  0EA2                     	;# 
  1736  0EA3                     	;# 
  1737  0EA4                     	;# 
  1738  0EA5                     	;# 
  1739  0F0F                     	;# 
  1740  0F10                     	;# 
  1741  0F11                     	;# 
  1742  0F12                     	;# 
  1743  0F13                     	;# 
  1744  0F14                     	;# 
  1745  0F15                     	;# 
  1746  0F16                     	;# 
  1747  0F17                     	;# 
  1748  0F18                     	;# 
  1749  0F19                     	;# 
  1750  0F1A                     	;# 
  1751  0F1B                     	;# 
  1752  0F1C                     	;# 
  1753  0F1D                     	;# 
  1754  0F1E                     	;# 
  1755  0F1F                     	;# 
  1756  0F20                     	;# 
  1757  0F21                     	;# 
  1758  0F22                     	;# 
  1759  0F23                     	;# 
  1760  0F24                     	;# 
  1761  0F25                     	;# 
  1762  0F26                     	;# 
  1763  0F27                     	;# 
  1764  0F28                     	;# 
  1765  0F29                     	;# 
  1766  0F2A                     	;# 
  1767  0F2B                     	;# 
  1768  0F2C                     	;# 
  1769  0F2D                     	;# 
  1770  0F2E                     	;# 
  1771  0F2F                     	;# 
  1772  0F30                     	;# 
  1773  0F31                     	;# 
  1774  0F32                     	;# 
  1775  0F33                     	;# 
  1776  0F34                     	;# 
  1777  0F35                     	;# 
  1778  0F36                     	;# 
  1779  0F37                     	;# 
  1780  0FE4                     	;# 
  1781  0FE5                     	;# 
  1782  0FE6                     	;# 
  1783  0FE7                     	;# 
  1784  0FE8                     	;# 
  1785  0FE9                     	;# 
  1786  0FEA                     	;# 
  1787  0FEB                     	;# 
  1788  0FED                     	;# 
  1789  0FEE                     	;# 
  1790  0FEF                     	;# 
  1791  0000                     	;# 
  1792  0001                     	;# 
  1793  0002                     	;# 
  1794  0003                     	;# 
  1795  0004                     	;# 
  1796  0005                     	;# 
  1797  0006                     	;# 
  1798  0007                     	;# 
  1799  0008                     	;# 
  1800  0009                     	;# 
  1801  000A                     	;# 
  1802  000B                     	;# 
  1803  000C                     	;# 
  1804  000E                     	;# 
  1805  0010                     	;# 
  1806  0011                     	;# 
  1807  0012                     	;# 
  1808  0013                     	;# 
  1809  0014                     	;# 
  1810  0015                     	;# 
  1811  0015                     	;# 
  1812  0016                     	;# 
  1813  0016                     	;# 
  1814  0017                     	;# 
  1815  0018                     	;# 
  1816  0019                     	;# 
  1817  0019                     	;# 
  1818  001A                     	;# 
  1819  001B                     	;# 
  1820  001C                     	;# 
  1821  001D                     	;# 
  1822  001E                     	;# 
  1823  001F                     	;# 
  1824  008C                     	;# 
  1825  008E                     	;# 
  1826  0090                     	;# 
  1827  0091                     	;# 
  1828  0092                     	;# 
  1829  0093                     	;# 
  1830  0094                     	;# 
  1831  0097                     	;# 
  1832  009B                     	;# 
  1833  009B                     	;# 
  1834  009C                     	;# 
  1835  009D                     	;# 
  1836  009E                     	;# 
  1837  009F                     	;# 
  1838  010C                     	;# 
  1839  010E                     	;# 
  1840  0111                     	;# 
  1841  0112                     	;# 
  1842  0113                     	;# 
  1843  0114                     	;# 
  1844  0115                     	;# 
  1845  0116                     	;# 
  1846  0117                     	;# 
  1847  0118                     	;# 
  1848  0119                     	;# 
  1849  018C                     	;# 
  1850  018E                     	;# 
  1851  0199                     	;# 
  1852  0199                     	;# 
  1853  0199                     	;# 
  1854  019A                     	;# 
  1855  019A                     	;# 
  1856  019A                     	;# 
  1857  019B                     	;# 
  1858  019B                     	;# 
  1859  019B                     	;# 
  1860  019B                     	;# 
  1861  019B                     	;# 
  1862  019C                     	;# 
  1863  019C                     	;# 
  1864  019C                     	;# 
  1865  019D                     	;# 
  1866  019D                     	;# 
  1867  019D                     	;# 
  1868  019E                     	;# 
  1869  019E                     	;# 
  1870  019E                     	;# 
  1871  019F                     	;# 
  1872  019F                     	;# 
  1873  019F                     	;# 
  1874  019F                     	;# 
  1875  019F                     	;# 
  1876  020C                     	;# 
  1877  020E                     	;# 
  1878  0211                     	;# 
  1879  0211                     	;# 
  1880  0212                     	;# 
  1881  0212                     	;# 
  1882  0213                     	;# 
  1883  0213                     	;# 
  1884  0214                     	;# 
  1885  0214                     	;# 
  1886  0215                     	;# 
  1887  0215                     	;# 
  1888  0215                     	;# 
  1889  0215                     	;# 
  1890  0216                     	;# 
  1891  0216                     	;# 
  1892  0217                     	;# 
  1893  0217                     	;# 
  1894  0219                     	;# 
  1895  021A                     	;# 
  1896  021B                     	;# 
  1897  021C                     	;# 
  1898  021D                     	;# 
  1899  021D                     	;# 
  1900  021E                     	;# 
  1901  021F                     	;# 
  1902  028C                     	;# 
  1903  028E                     	;# 
  1904  0291                     	;# 
  1905  0291                     	;# 
  1906  0292                     	;# 
  1907  0293                     	;# 
  1908  0294                     	;# 
  1909  0295                     	;# 
  1910  0295                     	;# 
  1911  0296                     	;# 
  1912  0297                     	;# 
  1913  0298                     	;# 
  1914  029F                     	;# 
  1915  030C                     	;# 
  1916  030E                     	;# 
  1917  0311                     	;# 
  1918  0311                     	;# 
  1919  0312                     	;# 
  1920  0313                     	;# 
  1921  0314                     	;# 
  1922  0315                     	;# 
  1923  0315                     	;# 
  1924  0316                     	;# 
  1925  0317                     	;# 
  1926  0318                     	;# 
  1927  038C                     	;# 
  1928  038E                     	;# 
  1929  0391                     	;# 
  1930  0392                     	;# 
  1931  0393                     	;# 
  1932  0397                     	;# 
  1933  0398                     	;# 
  1934  0399                     	;# 
  1935  039A                     	;# 
  1936  039C                     	;# 
  1937  039D                     	;# 
  1938  039E                     	;# 
  1939  039F                     	;# 
  1940  0411                     	;# 
  1941  0411                     	;# 
  1942  0412                     	;# 
  1943  0413                     	;# 
  1944  0414                     	;# 
  1945  0415                     	;# 
  1946  0416                     	;# 
  1947  0417                     	;# 
  1948  0418                     	;# 
  1949  0418                     	;# 
  1950  0419                     	;# 
  1951  041A                     	;# 
  1952  041B                     	;# 
  1953  041C                     	;# 
  1954  041D                     	;# 
  1955  041E                     	;# 
  1956  041F                     	;# 
  1957  0498                     	;# 
  1958  0498                     	;# 
  1959  0499                     	;# 
  1960  049A                     	;# 
  1961  049B                     	;# 
  1962  049B                     	;# 
  1963  049C                     	;# 
  1964  049D                     	;# 
  1965  049E                     	;# 
  1966  049F                     	;# 
  1967  0617                     	;# 
  1968  0618                     	;# 
  1969  0619                     	;# 
  1970  0619                     	;# 
  1971  061A                     	;# 
  1972  061B                     	;# 
  1973  061C                     	;# 
  1974  061C                     	;# 
  1975  061F                     	;# 
  1976  0691                     	;# 
  1977  0692                     	;# 
  1978  0693                     	;# 
  1979  0694                     	;# 
  1980  0695                     	;# 
  1981  0696                     	;# 
  1982  0697                     	;# 
  1983  0698                     	;# 
  1984  0699                     	;# 
  1985  0711                     	;# 
  1986  0712                     	;# 
  1987  0713                     	;# 
  1988  0714                     	;# 
  1989  0715                     	;# 
  1990  0716                     	;# 
  1991  0717                     	;# 
  1992  0718                     	;# 
  1993  0719                     	;# 
  1994  0891                     	;# 
  1995  0891                     	;# 
  1996  0891                     	;# 
  1997  0891                     	;# 
  1998  0891                     	;# 
  1999  0891                     	;# 
  2000  0892                     	;# 
  2001  0892                     	;# 
  2002  0892                     	;# 
  2003  0893                     	;# 
  2004  0893                     	;# 
  2005  0893                     	;# 
  2006  0893                     	;# 
  2007  0893                     	;# 
  2008  0893                     	;# 
  2009  0894                     	;# 
  2010  0894                     	;# 
  2011  0894                     	;# 
  2012  0895                     	;# 
  2013  0895                     	;# 
  2014  0895                     	;# 
  2015  0896                     	;# 
  2016  0896                     	;# 
  2017  0896                     	;# 
  2018  089B                     	;# 
  2019  0911                     	;# 
  2020  0912                     	;# 
  2021  0913                     	;# 
  2022  0914                     	;# 
  2023  0915                     	;# 
  2024  0916                     	;# 
  2025  0918                     	;# 
  2026  0919                     	;# 
  2027  091A                     	;# 
  2028  091B                     	;# 
  2029  091C                     	;# 
  2030  091D                     	;# 
  2031  091E                     	;# 
  2032  091F                     	;# 
  2033  0E0F                     	;# 
  2034  0E10                     	;# 
  2035  0E11                     	;# 
  2036  0E12                     	;# 
  2037  0E13                     	;# 
  2038  0E14                     	;# 
  2039  0E15                     	;# 
  2040  0E16                     	;# 
  2041  0E17                     	;# 
  2042  0E18                     	;# 
  2043  0E19                     	;# 
  2044  0E1A                     	;# 
  2045  0E1B                     	;# 
  2046  0E1C                     	;# 
  2047  0E1D                     	;# 
  2048  0E1E                     	;# 
  2049  0E1F                     	;# 
  2050  0E20                     	;# 
  2051  0E21                     	;# 
  2052  0E22                     	;# 
  2053  0E24                     	;# 
  2054  0E25                     	;# 
  2055  0E28                     	;# 
  2056  0E29                     	;# 
  2057  0E2A                     	;# 
  2058  0E2B                     	;# 
  2059  0E2C                     	;# 
  2060  0E2D                     	;# 
  2061  0E2E                     	;# 
  2062  0E2F                     	;# 
  2063  0E90                     	;# 
  2064  0E91                     	;# 
  2065  0E92                     	;# 
  2066  0E94                     	;# 
  2067  0E95                     	;# 
  2068  0EA0                     	;# 
  2069  0EA1                     	;# 
  2070  0EA2                     	;# 
  2071  0EA3                     	;# 
  2072  0EA4                     	;# 
  2073  0EA5                     	;# 
  2074  0F0F                     	;# 
  2075  0F10                     	;# 
  2076  0F11                     	;# 
  2077  0F12                     	;# 
  2078  0F13                     	;# 
  2079  0F14                     	;# 
  2080  0F15                     	;# 
  2081  0F16                     	;# 
  2082  0F17                     	;# 
  2083  0F18                     	;# 
  2084  0F19                     	;# 
  2085  0F1A                     	;# 
  2086  0F1B                     	;# 
  2087  0F1C                     	;# 
  2088  0F1D                     	;# 
  2089  0F1E                     	;# 
  2090  0F1F                     	;# 
  2091  0F20                     	;# 
  2092  0F21                     	;# 
  2093  0F22                     	;# 
  2094  0F23                     	;# 
  2095  0F24                     	;# 
  2096  0F25                     	;# 
  2097  0F26                     	;# 
  2098  0F27                     	;# 
  2099  0F28                     	;# 
  2100  0F29                     	;# 
  2101  0F2A                     	;# 
  2102  0F2B                     	;# 
  2103  0F2C                     	;# 
  2104  0F2D                     	;# 
  2105  0F2E                     	;# 
  2106  0F2F                     	;# 
  2107  0F30                     	;# 
  2108  0F31                     	;# 
  2109  0F32                     	;# 
  2110  0F33                     	;# 
  2111  0F34                     	;# 
  2112  0F35                     	;# 
  2113  0F36                     	;# 
  2114  0F37                     	;# 
  2115  0FE4                     	;# 
  2116  0FE5                     	;# 
  2117  0FE6                     	;# 
  2118  0FE7                     	;# 
  2119  0FE8                     	;# 
  2120  0FE9                     	;# 
  2121  0FEA                     	;# 
  2122  0FEB                     	;# 
  2123  0FED                     	;# 
  2124  0FEE                     	;# 
  2125  0FEF                     	;# 
  2126  0000                     	;# 
  2127  0001                     	;# 
  2128  0002                     	;# 
  2129  0003                     	;# 
  2130  0004                     	;# 
  2131  0005                     	;# 
  2132  0006                     	;# 
  2133  0007                     	;# 
  2134  0008                     	;# 
  2135  0009                     	;# 
  2136  000A                     	;# 
  2137  000B                     	;# 
  2138  000C                     	;# 
  2139  000E                     	;# 
  2140  0010                     	;# 
  2141  0011                     	;# 
  2142  0012                     	;# 
  2143  0013                     	;# 
  2144  0014                     	;# 
  2145  0015                     	;# 
  2146  0015                     	;# 
  2147  0016                     	;# 
  2148  0016                     	;# 
  2149  0017                     	;# 
  2150  0018                     	;# 
  2151  0019                     	;# 
  2152  0019                     	;# 
  2153  001A                     	;# 
  2154  001B                     	;# 
  2155  001C                     	;# 
  2156  001D                     	;# 
  2157  001E                     	;# 
  2158  001F                     	;# 
  2159  008C                     	;# 
  2160  008E                     	;# 
  2161  0090                     	;# 
  2162  0091                     	;# 
  2163  0092                     	;# 
  2164  0093                     	;# 
  2165  0094                     	;# 
  2166  0097                     	;# 
  2167  009B                     	;# 
  2168  009B                     	;# 
  2169  009C                     	;# 
  2170  009D                     	;# 
  2171  009E                     	;# 
  2172  009F                     	;# 
  2173  010C                     	;# 
  2174  010E                     	;# 
  2175  0111                     	;# 
  2176  0112                     	;# 
  2177  0113                     	;# 
  2178  0114                     	;# 
  2179  0115                     	;# 
  2180  0116                     	;# 
  2181  0117                     	;# 
  2182  0118                     	;# 
  2183  0119                     	;# 
  2184  018C                     	;# 
  2185  018E                     	;# 
  2186  0199                     	;# 
  2187  0199                     	;# 
  2188  0199                     	;# 
  2189  019A                     	;# 
  2190  019A                     	;# 
  2191  019A                     	;# 
  2192  019B                     	;# 
  2193  019B                     	;# 
  2194  019B                     	;# 
  2195  019B                     	;# 
  2196  019B                     	;# 
  2197  019C                     	;# 
  2198  019C                     	;# 
  2199  019C                     	;# 
  2200  019D                     	;# 
  2201  019D                     	;# 
  2202  019D                     	;# 
  2203  019E                     	;# 
  2204  019E                     	;# 
  2205  019E                     	;# 
  2206  019F                     	;# 
  2207  019F                     	;# 
  2208  019F                     	;# 
  2209  019F                     	;# 
  2210  019F                     	;# 
  2211  020C                     	;# 
  2212  020E                     	;# 
  2213  0211                     	;# 
  2214  0211                     	;# 
  2215  0212                     	;# 
  2216  0212                     	;# 
  2217  0213                     	;# 
  2218  0213                     	;# 
  2219  0214                     	;# 
  2220  0214                     	;# 
  2221  0215                     	;# 
  2222  0215                     	;# 
  2223  0215                     	;# 
  2224  0215                     	;# 
  2225  0216                     	;# 
  2226  0216                     	;# 
  2227  0217                     	;# 
  2228  0217                     	;# 
  2229  0219                     	;# 
  2230  021A                     	;# 
  2231  021B                     	;# 
  2232  021C                     	;# 
  2233  021D                     	;# 
  2234  021D                     	;# 
  2235  021E                     	;# 
  2236  021F                     	;# 
  2237  028C                     	;# 
  2238  028E                     	;# 
  2239  0291                     	;# 
  2240  0291                     	;# 
  2241  0292                     	;# 
  2242  0293                     	;# 
  2243  0294                     	;# 
  2244  0295                     	;# 
  2245  0295                     	;# 
  2246  0296                     	;# 
  2247  0297                     	;# 
  2248  0298                     	;# 
  2249  029F                     	;# 
  2250  030C                     	;# 
  2251  030E                     	;# 
  2252  0311                     	;# 
  2253  0311                     	;# 
  2254  0312                     	;# 
  2255  0313                     	;# 
  2256  0314                     	;# 
  2257  0315                     	;# 
  2258  0315                     	;# 
  2259  0316                     	;# 
  2260  0317                     	;# 
  2261  0318                     	;# 
  2262  038C                     	;# 
  2263  038E                     	;# 
  2264  0391                     	;# 
  2265  0392                     	;# 
  2266  0393                     	;# 
  2267  0397                     	;# 
  2268  0398                     	;# 
  2269  0399                     	;# 
  2270  039A                     	;# 
  2271  039C                     	;# 
  2272  039D                     	;# 
  2273  039E                     	;# 
  2274  039F                     	;# 
  2275  0411                     	;# 
  2276  0411                     	;# 
  2277  0412                     	;# 
  2278  0413                     	;# 
  2279  0414                     	;# 
  2280  0415                     	;# 
  2281  0416                     	;# 
  2282  0417                     	;# 
  2283  0418                     	;# 
  2284  0418                     	;# 
  2285  0419                     	;# 
  2286  041A                     	;# 
  2287  041B                     	;# 
  2288  041C                     	;# 
  2289  041D                     	;# 
  2290  041E                     	;# 
  2291  041F                     	;# 
  2292  0498                     	;# 
  2293  0498                     	;# 
  2294  0499                     	;# 
  2295  049A                     	;# 
  2296  049B                     	;# 
  2297  049B                     	;# 
  2298  049C                     	;# 
  2299  049D                     	;# 
  2300  049E                     	;# 
  2301  049F                     	;# 
  2302  0617                     	;# 
  2303  0618                     	;# 
  2304  0619                     	;# 
  2305  0619                     	;# 
  2306  061A                     	;# 
  2307  061B                     	;# 
  2308  061C                     	;# 
  2309  061C                     	;# 
  2310  061F                     	;# 
  2311  0691                     	;# 
  2312  0692                     	;# 
  2313  0693                     	;# 
  2314  0694                     	;# 
  2315  0695                     	;# 
  2316  0696                     	;# 
  2317  0697                     	;# 
  2318  0698                     	;# 
  2319  0699                     	;# 
  2320  0711                     	;# 
  2321  0712                     	;# 
  2322  0713                     	;# 
  2323  0714                     	;# 
  2324  0715                     	;# 
  2325  0716                     	;# 
  2326  0717                     	;# 
  2327  0718                     	;# 
  2328  0719                     	;# 
  2329  0891                     	;# 
  2330  0891                     	;# 
  2331  0891                     	;# 
  2332  0891                     	;# 
  2333  0891                     	;# 
  2334  0891                     	;# 
  2335  0892                     	;# 
  2336  0892                     	;# 
  2337  0892                     	;# 
  2338  0893                     	;# 
  2339  0893                     	;# 
  2340  0893                     	;# 
  2341  0893                     	;# 
  2342  0893                     	;# 
  2343  0893                     	;# 
  2344  0894                     	;# 
  2345  0894                     	;# 
  2346  0894                     	;# 
  2347  0895                     	;# 
  2348  0895                     	;# 
  2349  0895                     	;# 
  2350  0896                     	;# 
  2351  0896                     	;# 
  2352  0896                     	;# 
  2353  089B                     	;# 
  2354  0911                     	;# 
  2355  0912                     	;# 
  2356  0913                     	;# 
  2357  0914                     	;# 
  2358  0915                     	;# 
  2359  0916                     	;# 
  2360  0918                     	;# 
  2361  0919                     	;# 
  2362  091A                     	;# 
  2363  091B                     	;# 
  2364  091C                     	;# 
  2365  091D                     	;# 
  2366  091E                     	;# 
  2367  091F                     	;# 
  2368  0E0F                     	;# 
  2369  0E10                     	;# 
  2370  0E11                     	;# 
  2371  0E12                     	;# 
  2372  0E13                     	;# 
  2373  0E14                     	;# 
  2374  0E15                     	;# 
  2375  0E16                     	;# 
  2376  0E17                     	;# 
  2377  0E18                     	;# 
  2378  0E19                     	;# 
  2379  0E1A                     	;# 
  2380  0E1B                     	;# 
  2381  0E1C                     	;# 
  2382  0E1D                     	;# 
  2383  0E1E                     	;# 
  2384  0E1F                     	;# 
  2385  0E20                     	;# 
  2386  0E21                     	;# 
  2387  0E22                     	;# 
  2388  0E24                     	;# 
  2389  0E25                     	;# 
  2390  0E28                     	;# 
  2391  0E29                     	;# 
  2392  0E2A                     	;# 
  2393  0E2B                     	;# 
  2394  0E2C                     	;# 
  2395  0E2D                     	;# 
  2396  0E2E                     	;# 
  2397  0E2F                     	;# 
  2398  0E90                     	;# 
  2399  0E91                     	;# 
  2400  0E92                     	;# 
  2401  0E94                     	;# 
  2402  0E95                     	;# 
  2403  0EA0                     	;# 
  2404  0EA1                     	;# 
  2405  0EA2                     	;# 
  2406  0EA3                     	;# 
  2407  0EA4                     	;# 
  2408  0EA5                     	;# 
  2409  0F0F                     	;# 
  2410  0F10                     	;# 
  2411  0F11                     	;# 
  2412  0F12                     	;# 
  2413  0F13                     	;# 
  2414  0F14                     	;# 
  2415  0F15                     	;# 
  2416  0F16                     	;# 
  2417  0F17                     	;# 
  2418  0F18                     	;# 
  2419  0F19                     	;# 
  2420  0F1A                     	;# 
  2421  0F1B                     	;# 
  2422  0F1C                     	;# 
  2423  0F1D                     	;# 
  2424  0F1E                     	;# 
  2425  0F1F                     	;# 
  2426  0F20                     	;# 
  2427  0F21                     	;# 
  2428  0F22                     	;# 
  2429  0F23                     	;# 
  2430  0F24                     	;# 
  2431  0F25                     	;# 
  2432  0F26                     	;# 
  2433  0F27                     	;# 
  2434  0F28                     	;# 
  2435  0F29                     	;# 
  2436  0F2A                     	;# 
  2437  0F2B                     	;# 
  2438  0F2C                     	;# 
  2439  0F2D                     	;# 
  2440  0F2E                     	;# 
  2441  0F2F                     	;# 
  2442  0F30                     	;# 
  2443  0F31                     	;# 
  2444  0F32                     	;# 
  2445  0F33                     	;# 
  2446  0F34                     	;# 
  2447  0F35                     	;# 
  2448  0F36                     	;# 
  2449  0F37                     	;# 
  2450  0FE4                     	;# 
  2451  0FE5                     	;# 
  2452  0FE6                     	;# 
  2453  0FE7                     	;# 
  2454  0FE8                     	;# 
  2455  0FE9                     	;# 
  2456  0FEA                     	;# 
  2457  0FEB                     	;# 
  2458  0FED                     	;# 
  2459  0FEE                     	;# 
  2460  0FEF                     	;# 
  2461                           
  2462                           	psect	idataBANK1
  2463  0003                     __pidataBANK1:	
  2464 ;;nrf24l01Service@width	offset	0
  2465 ;;nrf24l01Service@i	offset	1
  2466 ;;strcmp@s1	offset	0
  2467 ;;strcmp@r	offset	1
  2468 ;;strcmp@s2	offset=-1 (param)
  2469 ;;nrf24l01SendTXBuffer@packet	offset	0
  2470 ;;nrf24l01SendTXBuffer@i	offset	1
  2471 ;;nrf24l01SendTXBuffer@width	offset	2
  2472 ;;strlen@s	offset	0
  2473 ;;strlen@cp	offset	1
  2474 ;;nrf24l01SetRXMode@rxMode	offset	0
  2475 ;;nrf24l01Send@command	offset	0
  2476 ;;nrf24l01Send@data	offset=-1 (param)
  2477 ;;nrf24l01SPISend@data	offset	0
  2478 ;;memset@p	offset	0
  2479 ;;memset@p1	offset=-2 (param)
  2480 ;;memset@c	offset=-4 (param)
  2481 ;;memset@n	offset=-6 (param)
  2482 ;;nrf24l01Service@width	offset	0
  2483 ;;nrf24l01Service@i	offset	1
  2484 ;;strcmp@s1	offset	0
  2485 ;;strcmp@r	offset	1
  2486 ;;strcmp@s2	offset=-1 (param)
  2487 ;;nrf24l01SendTXBuffer@packet	offset	0
  2488 ;;nrf24l01SendTXBuffer@i	offset	1
  2489 ;;nrf24l01SendTXBuffer@width	offset	2
  2490 ;;strlen@s	offset	0
  2491 ;;strlen@cp	offset	1
  2492 ;;nrf24l01SetRXMode@rxMode	offset	0
  2493 ;;nrf24l01Send@command	offset	0
  2494 ;;nrf24l01Send@data	offset=-1 (param)
  2495 ;;nrf24l01SPISend@data	offset	0
  2496 ;;memset@p	offset	0
  2497 ;;memset@p1	offset=-2 (param)
  2498 ;;memset@c	offset=-4 (param)
  2499 ;;memset@n	offset=-6 (param)
  2500                           
  2501                           
  2502                           ;initializer for _romData
  2503  0003  3420               	retlw	low (_romDataMap| (0+256))
  2504                           
  2505                           	psect	stringtext1
  2506  1000                     __pstringtext1:	
  2507  1000                     _dpowers:	
  2508  1000  3401               	retlw	1
  2509  1001  3400               	retlw	0
  2510  1002  3400               	retlw	0
  2511  1003  3400               	retlw	0
  2512  1004  340A               	retlw	10
  2513  1005  3400               	retlw	0
  2514  1006  3400               	retlw	0
  2515  1007  3400               	retlw	0
  2516  1008  3464               	retlw	100
  2517  1009  3400               	retlw	0
  2518  100A  3400               	retlw	0
  2519  100B  3400               	retlw	0
  2520  100C  34E8               	retlw	232
  2521  100D  3403               	retlw	3
  2522  100E  3400               	retlw	0
  2523  100F  3400               	retlw	0
  2524  1010  3410               	retlw	16
  2525  1011  3427               	retlw	39
  2526  1012  3400               	retlw	0
  2527  1013  3400               	retlw	0
  2528  1014  34A0               	retlw	160
  2529  1015  3486               	retlw	134
  2530  1016  3401               	retlw	1
  2531  1017  3400               	retlw	0
  2532  1018  3440               	retlw	64
  2533  1019  3442               	retlw	66
  2534  101A  340F               	retlw	15
  2535  101B  3400               	retlw	0
  2536  101C  3480               	retlw	128
  2537  101D  3496               	retlw	150
  2538  101E  3498               	retlw	152
  2539  101F  3400               	retlw	0
  2540  1020  3400               	retlw	0
  2541  1021  34E1               	retlw	225
  2542  1022  34F5               	retlw	245
  2543  1023  3405               	retlw	5
  2544  1024  3400               	retlw	0
  2545  1025  34CA               	retlw	202
  2546  1026  349A               	retlw	154
  2547  1027  343B               	retlw	59
  2548  1028                     __end_of_dpowers:	
  2549                           
  2550                           	psect	stringtext2
  2551  181E                     __pstringtext2:	
  2552  181E                     _n_ADDRESS_P0:	
  2553  181E  34AD               	retlw	173
  2554  181F  3487               	retlw	135
  2555  1820  3466               	retlw	102
  2556  1821  34BC               	retlw	188
  2557  1822  34BB               	retlw	187
  2558  1823                     __end_of_n_ADDRESS_P0:	
  2559                           
  2560                           	psect	stringtext3
  2561  1800                     __pstringtext3:	
  2562  1800                     _n_ADDRESS_MUL:	
  2563  1800  3421               	retlw	33
  2564  1801                     __end_of_n_ADDRESS_MUL:	
  2565  001A                     _TMR1H	set	26
  2566  0019                     _TMR1L	set	25
  2567  001C                     _T1GCONbits	set	28
  2568  001B                     _T1CONbits	set	27
  2569  000B                     _INTCONbits	set	11
  2570  0011                     _PIR1bits	set	17
  2571  0010                     _PIR0bits	set	16
  2572  000C                     _PORTAbits	set	12
  2573  000E                     _PORTCbits	set	14
  2574  0091                     _PIE1bits	set	145
  2575  009E                     _ADCON1bits	set	158
  2576  009C                     _ADRESH	set	156
  2577  009B                     _ADRESL	set	155
  2578  009D                     _ADCON0bits	set	157
  2579  0090                     _PIE0bits	set	144
  2580  0097                     _WDTCONbits	set	151
  2581  008E                     _TRISCbits	set	142
  2582  008C                     _TRISAbits	set	140
  2583  0117                     _FVRCONbits	set	279
  2584  018E                     _ANSELCbits	set	398
  2585  018C                     _ANSELAbits	set	396
  2586  018E                     _ANSELC	set	398
  2587  018C                     _ANSELA	set	396
  2588  020C                     _WPUAbits	set	524
  2589  020E                     _WPUC	set	526
  2590  020C                     _WPUA	set	524
  2591  0211                     _SSP1BUF	set	529
  2592  0214                     _SSP1STATbits	set	532
  2593  0215                     _SSP1CON1bits	set	533
  2594  028C                     _ODCONAbits	set	652
  2595  028E                     _ODCONC	set	654
  2596  028C                     _ODCONA	set	652
  2597  0391                     _IOCAPbits	set	913
  2598  038E                     _INLVLC	set	910
  2599  038C                     _INLVLA	set	908
  2600  0393                     _IOCAFbits	set	915
  2601  0896                     _NVMCON2	set	2198
  2602  0895                     _NVMCON1bits	set	2197
  2603  0893                     _NVMDATL	set	2195
  2604  0891                     _NVMADRL	set	2193
  2605  0892                     _NVMADRH	set	2194
  2606  0919                     _OSCCON1bits	set	2329
  2607  0EA0                     _RC0PPSbits	set	3744
  2608  0EA2                     _RC2PPSbits	set	3746
  2609  0EA1                     _RC1PPSbits	set	3745
  2610  1801                     STR_10:	
  2611  1801  3425               	retlw	37	;'%'
  2612  1802  346C               	retlw	108	;'l'
  2613  1803  3475               	retlw	117	;'u'
  2614  1804  342E               	retlw	46	;'.'
  2615  1805  3425               	retlw	37	;'%'
  2616  1806  3436               	retlw	54	;'6'
  2617  1807  342E               	retlw	46	;'.'
  2618  1808  3436               	retlw	54	;'6'
  2619  1809  346C               	retlw	108	;'l'
  2620  180A  3475               	retlw	117	;'u'
  2621  180B  3400               	retlw	0
  2622                           
  2623                           	psect	stringtext4
  2624  180C                     __pstringtext4:	
  2625  180C                     STR_8:	
  2626  180C  3442               	retlw	66	;'B'
  2627  180D  344F               	retlw	79	;'O'
  2628  180E  344F               	retlw	79	;'O'
  2629  180F  3454               	retlw	84	;'T'
  2630  1810  3430               	retlw	48	;'0'
  2631  1811  3400               	retlw	0
  2632                           
  2633                           	psect	stringtext5
  2634  1812                     __pstringtext5:	
  2635  1812                     STR_9:	
  2636  1812  3442               	retlw	66	;'B'
  2637  1813  344F               	retlw	79	;'O'
  2638  1814  344F               	retlw	79	;'O'
  2639  1815  3454               	retlw	84	;'T'
  2640  1816  3431               	retlw	49	;'1'
  2641  1817  3400               	retlw	0
  2642                           
  2643                           	psect	stringtext6
  2644  1818                     __pstringtext6:	
  2645  1818                     STR_4:	
  2646  1818  3443               	retlw	67	;'C'
  2647  1819  344F               	retlw	79	;'O'
  2648  181A  3455               	retlw	85	;'U'
  2649  181B  344E               	retlw	78	;'N'
  2650  181C  3454               	retlw	84	;'T'
  2651  181D  3400               	retlw	0
  2652                           
  2653                           	psect	stringtext7
  2654  1823                     __pstringtext7:	
  2655  1823                     STR_6:	
  2656  1823  3454               	retlw	84	;'T'
  2657  1824  3445               	retlw	69	;'E'
  2658  1825  344D               	retlw	77	;'M'
  2659  1826  3450               	retlw	80	;'P'
  2660  1827  3400               	retlw	0
  2661                           
  2662                           	psect	stringtext8
  2663  1828                     __pstringtext8:	
  2664  1828                     STR_5:	
  2665  1828  3456               	retlw	86	;'V'
  2666  1829  3442               	retlw	66	;'B'
  2667  182A  3441               	retlw	65	;'A'
  2668  182B  3454               	retlw	84	;'T'
  2669  182C  3400               	retlw	0
  2670                           
  2671                           	psect	stringtext9
  2672  182D                     __pstringtext9:	
  2673  182D                     STR_3:	
  2674  182D  3444               	retlw	68	;'D'
  2675  182E  3449               	retlw	73	;'I'
  2676  182F  3453               	retlw	83	;'S'
  2677  1830  3454               	retlw	84	;'T'
  2678  1831  3400               	retlw	0
  2679                           
  2680                           	psect	stringtext10
  2681  1832                     __pstringtext10:	
  2682  1832                     STR_7:	
  2683  1832  3455               	retlw	85	;'U'
  2684  1833  3457               	retlw	87	;'W'
  2685  1834  3454               	retlw	84	;'T'
  2686  1835  3400               	retlw	0
  2687                           
  2688                           	psect	stringtext11
  2689  1836                     __pstringtext11:	
  2690  1836                     STR_1:	
  2691  1836  342F               	retlw	47	;'/'
  2692  1837  3400               	retlw	0
  2693                           
  2694                           	psect	stringtext12
  2695  0000                     __pstringtext12:	
  2696  1836                     
  2697                           ; #config settings
  2698  0000                     
  2699                           	psect	cinit
  2700  0034                     start_initialization:	
  2701  0034                     __initialization:	
  2702                           
  2703                           ; Initialize objects allocated to BANK1
  2704  0034  0021               	movlb	1	; select bank1
  2705  0035  3180  2003  3180   	fcall	__pidataBANK1	;fetch initializer
  2706  0038  00E5               	movwf	__pdataBANK1& (0+127)
  2707                           
  2708                           ; Clear objects allocated to BANK0
  2709  0039  0020               	movlb	0	; select bank0
  2710  003A  01E4               	clrf	__pbssBANK0& (0+127)
  2711  003B  01E5               	clrf	(__pbssBANK0+1)& (0+127)
  2712  003C  01E6               	clrf	(__pbssBANK0+2)& (0+127)
  2713  003D  01E7               	clrf	(__pbssBANK0+3)& (0+127)
  2714  003E  01E8               	clrf	(__pbssBANK0+4)& (0+127)
  2715  003F  01E9               	clrf	(__pbssBANK0+5)& (0+127)
  2716                           
  2717                           ; Clear objects allocated to BANK1
  2718  0040  30DD               	movlw	low __pbssBANK1
  2719  0041  0084               	movwf	4
  2720  0042  3000               	movlw	high __pbssBANK1
  2721  0043  0085               	movwf	5
  2722  0044  3008               	movlw	8
  2723  0045  3197  2786  3180   	fcall	clear_ram0
  2724                           
  2725                           ; Clear objects allocated to BANK2
  2726  0048  3020               	movlw	low __pbssBANK2
  2727  0049  0084               	movwf	4
  2728  004A  3001               	movlw	high __pbssBANK2
  2729  004B  0085               	movwf	5
  2730  004C  302D               	movlw	45
  2731  004D  3197  2786  3180   	fcall	clear_ram0
  2732                           
  2733                           ; Clear objects allocated to BANK3
  2734  0050  30A0               	movlw	low __pbssBANK3
  2735  0051  0084               	movwf	4
  2736  0052  3001               	movlw	high __pbssBANK3
  2737  0053  0085               	movwf	5
  2738  0054  3042               	movlw	66
  2739  0055  3197  2786         	fcall	clear_ram0
  2740  0057                     end_of_initialization:	
  2741                           ;End of C runtime variable initialization code
  2742                           
  2743  0057                     __end_of__initialization:	
  2744  0057  0020               	movlb	0
  2745                           
  2746                           ;Initialize the stack pointer (FSR1)
  2747  0058  3070               	movlw	low ___sp
  2748  0059  0086               	movwf	6
  2749  005A  3021               	movlw	high ___sp
  2750  005B  0087               	movwf	7
  2751  005C  318E  2E18         	ljmp	_main	;jump to C main() function
  2752                           
  2753                           	psect	bssBANK0
  2754  0064                     __pbssBANK0:	
  2755  0064                     _status:	
  2756  0064                     	ds	5
  2757  0069                     _lastTXPacket:	
  2758  0069                     	ds	1
  2759                           
  2760                           	psect	bssBANK1
  2761  00DD                     __pbssBANK1:	
  2762  00DD                     _counter:	
  2763  00DD                     	ds	4
  2764  00E1                     _distance:	
  2765  00E1                     	ds	2
  2766  00E3                     _testCount:	
  2767  00E3                     	ds	2
  2768                           
  2769                           	psect	dataBANK1
  2770  00E5                     __pdataBANK1:	
  2771  00E5                     _romData:	
  2772  00E5                     	ds	1
  2773                           
  2774                           	psect	bssBANK2
  2775  0120                     __pbssBANK2:	
  2776  0120                     _romDataMap:	
  2777  0120                     	ds	28
  2778  013C                     ftoa@buf:	
  2779  013C                     	ds	17
  2780                           
  2781                           	psect	bssBANK3
  2782  01A0                     __pbssBANK3:	
  2783  01A0                     _RXPacket:	
  2784  01A0                     	ds	33
  2785  01C1                     _TXPacket:	
  2786  01C1                     	ds	33
  2787                           
  2788                           	psect	clrtext
  2789  1786                     clear_ram0:	
  2790                           ;	Called with FSR0 containing the base address, and
  2791                           ;	WREG with the size to clear
  2792                           
  2793  1786  0064               	clrwdt	;clear the watchdog before getting into this loop
  2794  1787                     clrloop0:	
  2795  1787  0180               	clrf	0	;clear RAM location pointed to by FSR
  2796  1788  3101               	addfsr 0,1
  2797  1789  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2798  178A  2F87               	goto	clrloop0	;have we reached the end yet?
  2799  178B  3400               	retlw	0	;all done for this memory range, return
  2800                           
  2801                           	psect	cstackBANK4
  2802  0220                     __pcstackBANK4:	
  2803  0220                     loop@vt:	
  2804                           
  2805                           ; 3 bytes @ 0x0
  2806  0220                     	ds	3
  2807  0223                     loop@ta:	
  2808                           
  2809                           ; 3 bytes @ 0x3
  2810  0223                     	ds	3
  2811  0226                     _loop$2252:	
  2812                           
  2813                           ; 3 bytes @ 0x6
  2814  0226                     	ds	3
  2815  0229                     _loop$2253:	
  2816                           
  2817                           ; 3 bytes @ 0x9
  2818  0229                     	ds	3
  2819  022C                     _loop$2254:	
  2820                           
  2821                           ; 3 bytes @ 0xC
  2822  022C                     	ds	3
  2823  022F                     loop@packet:	
  2824                           
  2825                           ; 33 bytes @ 0xF
  2826  022F                     	ds	33
  2827                           
  2828                           	psect	cstackBANK1
  2829  00A0                     __pcstackBANK1:	
  2830  00A0                     ?_ftoa:	
  2831  00A0                     ftoa@f:	
  2832                           ; 1 bytes @ 0x0
  2833                           
  2834                           
  2835                           ; 3 bytes @ 0x0
  2836  00A0                     	ds	3
  2837  00A3                     ftoa@status:	
  2838                           
  2839                           ; 1 bytes @ 0x3
  2840  00A3                     	ds	1
  2841  00A4                     ftoa@rem:	
  2842                           
  2843                           ; 4 bytes @ 0x4
  2844  00A4                     	ds	4
  2845  00A8                     ftoa@l:	
  2846                           
  2847                           ; 4 bytes @ 0x8
  2848  00A8                     	ds	4
  2849  00AC                     ftoa@cp:	
  2850                           
  2851                           ; 1 bytes @ 0xC
  2852  00AC                     	ds	1
  2853  00AD                     ?_strcat:	
  2854  00AD                     strcat@to:	
  2855                           ; 2 bytes @ 0xD
  2856                           
  2857                           
  2858                           ; 2 bytes @ 0xD
  2859  00AD                     	ds	2
  2860  00AF                     strcat@from:	
  2861                           
  2862                           ; 2 bytes @ 0xF
  2863  00AF                     	ds	2
  2864  00B1                     ?_sendMessage:	
  2865  00B1                     sendMessage@packet:	
  2866                           ; 1 bytes @ 0x11
  2867                           
  2868                           
  2869                           ; 2 bytes @ 0x11
  2870  00B1                     	ds	2
  2871  00B3                     sendMessage@topic:	
  2872                           
  2873                           ; 2 bytes @ 0x13
  2874  00B3                     	ds	2
  2875  00B5                     sendMessage@value:	
  2876                           
  2877                           ; 3 bytes @ 0x15
  2878  00B5                     	ds	3
  2879  00B8                     sendMessage@ftoaStatus:	
  2880                           
  2881                           ; 2 bytes @ 0x18
  2882  00B8                     	ds	2
  2883  00BA                     ??_main:	
  2884                           
  2885                           ; 1 bytes @ 0x1A
  2886  00BA                     	ds	1
  2887  00BB                     main@pipe:	
  2888                           
  2889                           ; 1 bytes @ 0x1B
  2890  00BB                     	ds	1
  2891  00BC                     main@packet:	
  2892                           
  2893                           ; 33 bytes @ 0x1C
  2894  00BC                     	ds	33
  2895                           
  2896                           	psect	cstackCOMMON
  2897  0070                     __pcstackCOMMON:	
  2898  0070                     ?_isdigit:	
  2899  0070                     ?_hcsr04ISR:	
  2900                           ; 1 bit 
  2901                           
  2902  0070                     ??_hcsr04ISR:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_nrf24l01ISR:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ??_nrf24l01ISR:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_hcsr04Trigger:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ??_hcsr04Trigger:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_nrf24l01Init:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_nrf24l01SetTXPipe:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_nrf24l01SetRXPipe:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ??_nrf24l01SetRXPipe:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_hcsr04Init:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ??_hcsr04Init:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ??_isdigit:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ??___ftpack:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_nrf24l01InterfaceInit:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ??_nrf24l01InterfaceInit:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     ?_resetWDT:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     ??_resetWDT:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     ?_sleepMs:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956  0070                     ?_ISR:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959  0070                     ?_loop:	
  2960                           ; 1 bytes @ 0x0
  2961                           
  2962  0070                     ?_nrf24l01GetPipe:	
  2963                           ; 1 bytes @ 0x0
  2964                           
  2965  0070                     ?_main:	
  2966                           ; 1 bytes @ 0x0
  2967                           
  2968  0070                     ?_nrf24l01InitRegisters:	
  2969                           ; 1 bytes @ 0x0
  2970                           
  2971  0070                     ?___bmul:	
  2972                           ; 1 bytes @ 0x0
  2973                           
  2974  0070                     ??___lldiv:	
  2975                           ; 1 bytes @ 0x0
  2976                           
  2977  0070                     ??___ftge:	
  2978                           ; 1 bytes @ 0x0
  2979                           
  2980  0070                     ??___llmod:	
  2981                           ; 1 bytes @ 0x0
  2982                           
  2983  0070                     ?_strcpy:	
  2984                           ; 1 bytes @ 0x0
  2985                           
  2986  0070                     ?___wmul:	
  2987                           ; 2 bytes @ 0x0
  2988                           
  2989  0070                     ?___lwmod:	
  2990                           ; 2 bytes @ 0x0
  2991                           
  2992  0070                     ?___awtoft:	
  2993                           ; 2 bytes @ 0x0
  2994                           
  2995  0070                     ?___lbtoft:	
  2996                           ; 3 bytes @ 0x0
  2997                           
  2998  0070                     ?___lltoft:	
  2999                           ; 3 bytes @ 0x0
  3000                           
  3001  0070                     ?___lwtoft:	
  3002                           ; 3 bytes @ 0x0
  3003                           
  3004  0070                     ___bmul@multiplicand:	
  3005                           ; 3 bytes @ 0x0
  3006                           
  3007  0070                     ___llmod@counter:	
  3008                           ; 1 bytes @ 0x0
  3009                           
  3010  0070                     _isdigit$2003:	
  3011                           ; 1 bytes @ 0x0
  3012                           
  3013  0070                     sleepMs@milliseconds:	
  3014                           ; 1 bytes @ 0x0
  3015                           
  3016  0070                     ___wmul@multiplier:	
  3017                           ; 2 bytes @ 0x0
  3018                           
  3019  0070                     ___awtoft@c:	
  3020                           ; 2 bytes @ 0x0
  3021                           
  3022  0070                     ___lwmod@divisor:	
  3023                           ; 2 bytes @ 0x0
  3024                           
  3025  0070                     ___lwtoft@c:	
  3026                           ; 2 bytes @ 0x0
  3027                           
  3028  0070                     strcpy@to:	
  3029                           ; 2 bytes @ 0x0
  3030                           
  3031  0070                     ___lltoft@c:	
  3032                           ; 2 bytes @ 0x0
  3033                           
  3034                           
  3035                           ; 4 bytes @ 0x0
  3036  0070                     	ds	1
  3037  0071                     ??___bmul:	
  3038  0071                     nrf24l01SetRXPipe@pipe:	
  3039                           ; 1 bytes @ 0x1
  3040                           
  3041  0071                     ___bmul@product:	
  3042                           ; 1 bytes @ 0x1
  3043                           
  3044  0071                     isdigit@c:	
  3045                           ; 1 bytes @ 0x1
  3046                           
  3047                           
  3048                           ; 1 bytes @ 0x1
  3049  0071                     	ds	1
  3050  0072                     ??_sleepMs:	
  3051  0072                     nrf24l01SetRXPipe@enRXAddr:	
  3052                           ; 1 bytes @ 0x2
  3053                           
  3054  0072                     ___bmul@multiplier:	
  3055                           ; 1 bytes @ 0x2
  3056                           
  3057  0072                     ___wmul@multiplicand:	
  3058                           ; 1 bytes @ 0x2
  3059                           
  3060  0072                     ___lwmod@dividend:	
  3061                           ; 2 bytes @ 0x2
  3062                           
  3063  0072                     strcpy@from:	
  3064                           ; 2 bytes @ 0x2
  3065                           
  3066                           
  3067                           ; 2 bytes @ 0x2
  3068  0072                     	ds	1
  3069  0073                     ??_nrf24l01SetTXPipe:	
  3070  0073                     ??___awtoft:	
  3071                           ; 1 bytes @ 0x3
  3072                           
  3073  0073                     ??___lwtoft:	
  3074                           ; 1 bytes @ 0x3
  3075                           
  3076  0073                     sleepMs@wdtps:	
  3077                           ; 1 bytes @ 0x3
  3078                           
  3079  0073                     ___awtoft@sign:	
  3080                           ; 1 bytes @ 0x3
  3081                           
  3082                           
  3083                           ; 1 bytes @ 0x3
  3084  0073                     	ds	1
  3085  0074                     ??_strcpy:	
  3086  0074                     ??_strcat:	
  3087                           ; 1 bytes @ 0x4
  3088                           
  3089  0074                     ??_ftoa:	
  3090                           ; 1 bytes @ 0x4
  3091                           
  3092  0074                     ??_nrf24l01SendPacket:	
  3093                           ; 1 bytes @ 0x4
  3094                           
  3095  0074                     ??_hcsr04GetAerage:	
  3096                           ; 1 bytes @ 0x4
  3097                           
  3098  0074                     ??_sleepListren:	
  3099                           ; 1 bytes @ 0x4
  3100                           
  3101  0074                     ??_sendMessage:	
  3102                           ; 1 bytes @ 0x4
  3103                           
  3104  0074                     ??_loop:	
  3105                           ; 1 bytes @ 0x4
  3106                           
  3107  0074                     ??___wmul:	
  3108                           ; 1 bytes @ 0x4
  3109                           
  3110  0074                     ??___ftmul:	
  3111                           ; 1 bytes @ 0x4
  3112                           
  3113  0074                     ??___ftneg:	
  3114                           ; 1 bytes @ 0x4
  3115                           
  3116  0074                     ??___ftsub:	
  3117                           ; 1 bytes @ 0x4
  3118                           
  3119  0074                     ??___fttol:	
  3120                           ; 1 bytes @ 0x4
  3121                           
  3122  0074                     ??___lbtoft:	
  3123                           ; 1 bytes @ 0x4
  3124                           
  3125  0074                     ??___lltoft:	
  3126                           ; 1 bytes @ 0x4
  3127                           
  3128  0074                     ??___lwmod:	
  3129                           ; 1 bytes @ 0x4
  3130                           
  3131                           
  3132                           	psect	cstackBANK0
  3133  0020                     __pcstackBANK0:	
  3134                           ; 1 bytes @ 0x4
  3135                           
  3136  0020                     ??_ISR:	
  3137                           
  3138                           ; 1 bytes @ 0x0
  3139  0020                     	ds	6
  3140  0026                     ?___ftge:	
  3141  0026                     ?_sleepListren:	
  3142                           ; 1 bit 
  3143                           
  3144  0026                     ?___ftpack:	
  3145                           ; 1 bytes @ 0x6
  3146                           
  3147  0026                     ?___lldiv:	
  3148                           ; 3 bytes @ 0x6
  3149                           
  3150  0026                     nrf24l01SetTXPipe@pipe:	
  3151                           ; 4 bytes @ 0x6
  3152                           
  3153  0026                     ___lwmod@counter:	
  3154                           ; 1 bytes @ 0x6
  3155                           
  3156  0026                     sleepListren@seconds:	
  3157                           ; 1 bytes @ 0x6
  3158                           
  3159  0026                     ___wmul@product:	
  3160                           ; 2 bytes @ 0x6
  3161                           
  3162  0026                     strcpy@cp:	
  3163                           ; 2 bytes @ 0x6
  3164                           
  3165  0026                     ___ftpack@arg:	
  3166                           ; 2 bytes @ 0x6
  3167                           
  3168  0026                     ___ftge@ff1:	
  3169                           ; 3 bytes @ 0x6
  3170                           
  3171  0026                     ___lldiv@divisor:	
  3172                           ; 3 bytes @ 0x6
  3173                           
  3174                           
  3175                           ; 4 bytes @ 0x6
  3176  0026                     	ds	1
  3177  0027                     ??_nrf24l01GetPipe:	
  3178  0027                     ??_nrf24l01InitRegisters:	
  3179                           ; 1 bytes @ 0x7
  3180                           
  3181                           
  3182                           ; 1 bytes @ 0x7
  3183  0027                     	ds	1
  3184  0028                     ?_nrf24l01SendPacket:	
  3185  0028                     nrf24l01GetPipe@pipe:	
  3186                           ; 1 bytes @ 0x8
  3187                           
  3188  0028                     nrf24l01InitRegisters@channel:	
  3189                           ; 1 bytes @ 0x8
  3190                           
  3191  0028                     nrf24l01SendPacket@txPacket:	
  3192                           ; 1 bytes @ 0x8
  3193                           
  3194                           
  3195                           ; 2 bytes @ 0x8
  3196  0028                     	ds	1
  3197  0029                     nrf24l01GetPipe@name:	
  3198  0029                     nrf24l01InitRegisters@setupAW:	
  3199                           ; 1 bytes @ 0x9
  3200                           
  3201  0029                     ___ftpack@exp:	
  3202                           ; 1 bytes @ 0x9
  3203                           
  3204  0029                     ___ftge@ff2:	
  3205                           ; 1 bytes @ 0x9
  3206                           
  3207                           
  3208                           ; 3 bytes @ 0x9
  3209  0029                     	ds	1
  3210  002A                     nrf24l01GetPipe@i:	
  3211  002A                     nrf24l01InitRegisters@feature:	
  3212                           ; 1 bytes @ 0xA
  3213                           
  3214  002A                     ___ftpack@sign:	
  3215                           ; 1 bytes @ 0xA
  3216                           
  3217  002A                     ___lldiv@dividend:	
  3218                           ; 1 bytes @ 0xA
  3219                           
  3220                           
  3221                           ; 4 bytes @ 0xA
  3222  002A                     	ds	1
  3223  002B                     ?___ftadd:	
  3224  002B                     nrf24l01InitRegisters@rfSetup:	
  3225                           ; 3 bytes @ 0xB
  3226                           
  3227  002B                     ___lbtoft@c:	
  3228                           ; 1 bytes @ 0xB
  3229                           
  3230  002B                     ___lltoft@exp:	
  3231                           ; 1 bytes @ 0xB
  3232                           
  3233  002B                     ___ftadd@f1:	
  3234                           ; 1 bytes @ 0xB
  3235                           
  3236                           
  3237                           ; 3 bytes @ 0xB
  3238  002B                     	ds	1
  3239  002C                     nrf24l01InitRegisters@enAA:	
  3240                           
  3241                           ; 1 bytes @ 0xC
  3242  002C                     	ds	1
  3243  002D                     nrf24l01InitRegisters@DynPD:	
  3244                           
  3245                           ; 1 bytes @ 0xD
  3246  002D                     	ds	1
  3247  002E                     nrf24l01InitRegisters@i:	
  3248  002E                     ___ftadd@f2:	
  3249                           ; 2 bytes @ 0xE
  3250                           
  3251  002E                     ___lldiv@quotient:	
  3252                           ; 3 bytes @ 0xE
  3253                           
  3254                           
  3255                           ; 4 bytes @ 0xE
  3256  002E                     	ds	2
  3257  0030                     ??_nrf24l01Init:	
  3258                           
  3259                           ; 1 bytes @ 0x10
  3260  0030                     	ds	1
  3261  0031                     ??___ftadd:	
  3262                           
  3263                           ; 1 bytes @ 0x11
  3264  0031                     	ds	1
  3265  0032                     ___lldiv@counter:	
  3266  0032                     ___ftadd@sign:	
  3267                           ; 1 bytes @ 0x12
  3268                           
  3269                           
  3270                           ; 1 bytes @ 0x12
  3271  0032                     	ds	1
  3272  0033                     ?___llmod:	
  3273  0033                     ___ftadd@exp2:	
  3274                           ; 4 bytes @ 0x13
  3275                           
  3276  0033                     ___llmod@divisor:	
  3277                           ; 1 bytes @ 0x13
  3278                           
  3279                           
  3280                           ; 4 bytes @ 0x13
  3281  0033                     	ds	1
  3282  0034                     ___ftadd@exp1:	
  3283                           
  3284                           ; 1 bytes @ 0x14
  3285  0034                     	ds	1
  3286  0035                     ?___ftdiv:	
  3287  0035                     ?___ftsub:	
  3288                           ; 3 bytes @ 0x15
  3289                           
  3290  0035                     ___ftdiv@f2:	
  3291                           ; 3 bytes @ 0x15
  3292                           
  3293  0035                     ___ftsub@f2:	
  3294                           ; 3 bytes @ 0x15
  3295                           
  3296                           
  3297                           ; 3 bytes @ 0x15
  3298  0035                     	ds	2
  3299  0037                     ___llmod@dividend:	
  3300                           
  3301                           ; 4 bytes @ 0x17
  3302  0037                     	ds	1
  3303  0038                     ___ftdiv@f1:	
  3304  0038                     ___ftsub@f1:	
  3305                           ; 3 bytes @ 0x18
  3306                           
  3307                           
  3308                           ; 3 bytes @ 0x18
  3309  0038                     	ds	3
  3310  003B                     ??___ftdiv:	
  3311  003B                     ?_sprintf:	
  3312                           ; 1 bytes @ 0x1B
  3313                           
  3314  003B                     sprintf@f:	
  3315                           ; 2 bytes @ 0x1B
  3316                           
  3317                           
  3318                           ; 2 bytes @ 0x1B
  3319  003B                     	ds	1
  3320  003C                     ___ftdiv@cntr:	
  3321                           
  3322                           ; 1 bytes @ 0x1C
  3323  003C                     	ds	1
  3324  003D                     ___ftdiv@f3:	
  3325                           
  3326                           ; 3 bytes @ 0x1D
  3327  003D                     	ds	3
  3328  0040                     ___ftdiv@exp:	
  3329                           
  3330                           ; 1 bytes @ 0x20
  3331  0040                     	ds	1
  3332  0041                     ___ftdiv@sign:	
  3333                           
  3334                           ; 1 bytes @ 0x21
  3335  0041                     	ds	1
  3336  0042                     ?_hcsr04GetAerage:	
  3337  0042                     ?_getADCValue:	
  3338                           ; 3 bytes @ 0x22
  3339                           
  3340                           
  3341                           ; 3 bytes @ 0x22
  3342  0042                     	ds	3
  3343  0045                     ??_sprintf:	
  3344  0045                     ??_getADCValue:	
  3345                           ; 1 bytes @ 0x25
  3346                           
  3347  0045                     hcsr04GetAerage@loop:	
  3348                           ; 1 bytes @ 0x25
  3349                           
  3350                           
  3351                           ; 1 bytes @ 0x25
  3352  0045                     	ds	1
  3353  0046                     getADCValue@channel:	
  3354  0046                     hcsr04GetAerage@count:	
  3355                           ; 1 bytes @ 0x26
  3356                           
  3357                           
  3358                           ; 1 bytes @ 0x26
  3359  0046                     	ds	1
  3360  0047                     hcsr04GetAerage@limit:	
  3361  0047                     getADCValue@adcLoop:	
  3362                           ; 1 bytes @ 0x27
  3363                           
  3364                           
  3365                           ; 2 bytes @ 0x27
  3366  0047                     	ds	1
  3367  0048                     hcsr04GetAerage@average:	
  3368                           
  3369                           ; 3 bytes @ 0x28
  3370  0048                     	ds	1
  3371  0049                     sprintf@flag:	
  3372  0049                     getADCValue@adcSum:	
  3373                           ; 1 bytes @ 0x29
  3374                           
  3375                           
  3376                           ; 3 bytes @ 0x29
  3377  0049                     	ds	1
  3378  004A                     sprintf@ap:	
  3379                           
  3380                           ; 1 bytes @ 0x2A
  3381  004A                     	ds	1
  3382  004B                     sprintf@val:	
  3383                           
  3384                           ; 4 bytes @ 0x2B
  3385  004B                     	ds	1
  3386  004C                     ?___ftmul:	
  3387  004C                     ?___ftneg:	
  3388                           ; 3 bytes @ 0x2C
  3389                           
  3390  004C                     ___ftmul@f1:	
  3391                           ; 3 bytes @ 0x2C
  3392                           
  3393  004C                     ___ftneg@f1:	
  3394                           ; 3 bytes @ 0x2C
  3395                           
  3396                           
  3397                           ; 3 bytes @ 0x2C
  3398  004C                     	ds	3
  3399  004F                     sprintf@sp:	
  3400  004F                     ___ftmul@f2:	
  3401                           ; 1 bytes @ 0x2F
  3402                           
  3403                           
  3404                           ; 3 bytes @ 0x2F
  3405  004F                     	ds	1
  3406  0050                     sprintf@width:	
  3407                           
  3408                           ; 2 bytes @ 0x30
  3409  0050                     	ds	2
  3410  0052                     ___ftmul@exp:	
  3411  0052                     sprintf@prec:	
  3412                           ; 1 bytes @ 0x32
  3413                           
  3414                           
  3415                           ; 2 bytes @ 0x32
  3416  0052                     	ds	1
  3417  0053                     ___ftmul@f3_as_product:	
  3418                           
  3419                           ; 3 bytes @ 0x33
  3420  0053                     	ds	1
  3421  0054                     sprintf@c:	
  3422                           
  3423                           ; 1 bytes @ 0x34
  3424  0054                     	ds	2
  3425  0056                     ___ftmul@cntr:	
  3426                           
  3427                           ; 1 bytes @ 0x36
  3428  0056                     	ds	1
  3429  0057                     ___ftmul@sign:	
  3430                           
  3431                           ; 1 bytes @ 0x37
  3432  0057                     	ds	1
  3433  0058                     ?___fttol:	
  3434  0058                     ___fttol@f1:	
  3435                           ; 4 bytes @ 0x38
  3436                           
  3437                           
  3438                           ; 3 bytes @ 0x38
  3439  0058                     	ds	4
  3440  005C                     ___fttol@sign1:	
  3441                           
  3442                           ; 1 bytes @ 0x3C
  3443  005C                     	ds	1
  3444  005D                     ___fttol@lval:	
  3445                           
  3446                           ; 4 bytes @ 0x3D
  3447  005D                     	ds	4
  3448  0061                     ___fttol@exp1:	
  3449                           
  3450                           ; 1 bytes @ 0x41
  3451  0061                     	ds	1
  3452  0062                     strcat@cp:	
  3453                           
  3454                           ; 2 bytes @ 0x42
  3455  0062                     	ds	2
  3456                           
  3457                           	psect	maintext
  3458  0E18                     __pmaintext:	
  3459 ;;
  3460 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3461 ;;
  3462 ;; *************** function _main *****************
  3463 ;; Defined at:
  3464 ;;		line 167 in file "main.c"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;		None
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;  packet         33   28[BANK1 ] struct .
  3469 ;;  pipe            1   27[BANK1 ] unsigned char 
  3470 ;; Return value:  Size  Location     Type
  3471 ;;                  1    wreg      void 
  3472 ;; Registers used:
  3473 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  3474 ;; Tracked objects:
  3475 ;;		On entry : B1F/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3480 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3481 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3482 ;;      Totals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  3483 ;;Total ram usage:       35 bytes
  3484 ;; Hardware stack levels required when called:   15
  3485 ;; This function calls:
  3486 ;;		_hcsr04Init
  3487 ;;		_loop
  3488 ;;		_nrf24l01GetPipe
  3489 ;;		_nrf24l01Init
  3490 ;;		_nrf24l01SetRXPipe
  3491 ;;		_nrf24l01SetTXPipe
  3492 ;;		_sendMessage
  3493 ;;		_strcpy
  3494 ;; This function is called by:
  3495 ;;		Startup code after reset
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498                           
  3499                           
  3500                           ;psect for function _main
  3501  0E18                     _main:	
  3502                           
  3503                           ;main.c: 171: ANSELA = 0x00;
  3504                           
  3505                           ;incstack = 0
  3506                           ; Regs used in _main: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  3507  0E18  0023               	movlb	3	; select bank3
  3508  0E19  018C               	clrf	12	;volatile
  3509                           
  3510                           ;main.c: 172: ANSELC = 0x00;
  3511  0E1A  018E               	clrf	14	;volatile
  3512                           
  3513                           ;main.c: 174: ODCONA = 0x00;
  3514  0E1B  0025               	movlb	5	; select bank5
  3515  0E1C  018C               	clrf	12	;volatile
  3516                           
  3517                           ;main.c: 175: ODCONC = 0x00;
  3518  0E1D  018E               	clrf	14	;volatile
  3519                           
  3520                           ;main.c: 180: INLVLA = 0x00;
  3521  0E1E  0027               	movlb	7	; select bank7
  3522  0E1F  018C               	clrf	12	;volatile
  3523                           
  3524                           ;main.c: 181: INLVLC = 0x00;
  3525  0E20  018E               	clrf	14	;volatile
  3526                           
  3527                           ;main.c: 183: WPUA = 0x00;
  3528  0E21  0024               	movlb	4	; select bank4
  3529  0E22  018C               	clrf	12	;volatile
  3530                           
  3531                           ;main.c: 184: WPUC = 0x00;
  3532  0E23  018E               	clrf	14	;volatile
  3533                           
  3534                           ;main.c: 186: TRISCbits.TRISC5 = 0;
  3535  0E24  0021               	movlb	1	; select bank1
  3536  0E25  128E               	bcf	14,5	;volatile
  3537                           
  3538                           ;main.c: 187: TRISCbits.TRISC4 = 0;
  3539  0E26  120E               	bcf	14,4	;volatile
  3540                           
  3541                           ;main.c: 189: PORTCbits.RC4 = 0;
  3542  0E27  0020               	movlb	0	; select bank0
  3543  0E28  120E               	bcf	14,4	;volatile
  3544                           
  3545                           ;main.c: 196: INTCONbits.PEIE = 0;
  3546  0E29  130B               	bcf	11,6	;volatile
  3547                           
  3548                           ;main.c: 197: INTCONbits.GIE = 0;
  3549  0E2A  138B               	bcf	11,7	;volatile
  3550                           
  3551                           ;main.c: 199: OSCCON1bits.NOSC = 0b000;
  3552  0E2B  308F               	movlw	-113
  3553  0E2C  0032               	movlb	18	; select bank18
  3554  0E2D  0599               	andwf	25,f	;volatile
  3555                           
  3556                           ;main.c: 200: OSCCON1bits.NDIV = 0b000;
  3557  0E2E  30F0               	movlw	-16
  3558  0E2F  0599               	andwf	25,f	;volatile
  3559                           
  3560                           ;main.c: 202: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3561  0E30  300B               	movlw	11
  3562  0E31  0021               	movlb	1	; select bank1
  3563  0E32  00BA               	movwf	??_main^(0+128)
  3564  0E33  3062               	movlw	98
  3565  0E34                     u5307:	
  3566  0E34  0B89               	decfsz	9,f
  3567  0E35  2E34               	goto	u5307
  3568  0E36  0BBA               	decfsz	??_main^(0+128),f
  3569  0E37  2E34               	goto	u5307
  3570  0E38  0000               	nop
  3571                           
  3572                           ;main.c: 206: strcpy(romData->name, "UWT");
  3573  0E39  0021               	movlb	1	; select bank1
  3574  0E3A  0865               	movf	_romData^(0+128),w
  3575  0E3B  3E01               	addlw	1
  3576  0E3C  00F0               	movwf	strcpy@to
  3577  0E3D  3001               	movlw	1
  3578  0E3E  00F1               	movwf	strcpy@to+1
  3579  0E3F  3032               	movlw	low (STR_7| (0+32768))
  3580  0E40  00F2               	movwf	strcpy@from
  3581  0E41  3098               	movlw	high (STR_7| (0+32768))
  3582  0E42  00F3               	movwf	strcpy@from+1
  3583  0E43  3188  202B  318E   	fcall	_strcpy
  3584                           
  3585                           ;main.c: 208: nrf24l01Init();
  3586  0E46  3188  20DE  318E   	fcall	_nrf24l01Init
  3587                           
  3588                           ;main.c: 210: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3589  0E49  0021               	movlb	1	; select bank1
  3590  0E4A  0865               	movf	_romData^(0+128),w
  3591  0E4B  3E01               	addlw	1
  3592  0E4C  318A  2279  318E   	fcall	_nrf24l01GetPipe
  3593  0E4F  00FF               	movwf	127
  3594  0E50  087F               	movf	127,w
  3595  0E51  0021               	movlb	1	; select bank1
  3596  0E52  00BB               	movwf	main@pipe^(0+128)
  3597                           
  3598                           ;main.c: 211: nrf24l01SetTXPipe(pipe);
  3599  0E53  083B               	movf	main@pipe^(0+128),w
  3600  0E54  318B  2367  318E   	fcall	_nrf24l01SetTXPipe
  3601                           
  3602                           ;main.c: 212: nrf24l01SetRXPipe(pipe);
  3603  0E57  0021               	movlb	1	; select bank1
  3604  0E58  083B               	movf	main@pipe^(0+128),w
  3605  0E59  3188  20A2  318E   	fcall	_nrf24l01SetRXPipe
  3606                           
  3607                           ;main.c: 216: ADCON0bits.ADON = 0;
  3608  0E5C  0021               	movlb	1	; select bank1
  3609  0E5D  101D               	bcf	29,0	;volatile
  3610                           
  3611                           ;main.c: 219: PORTAbits.RA4 = 0;
  3612  0E5E  0020               	movlb	0	; select bank0
  3613  0E5F  120C               	bcf	12,4	;volatile
  3614                           
  3615                           ;main.c: 220: TRISAbits.TRISA4 = 1;
  3616  0E60  0021               	movlb	1	; select bank1
  3617  0E61  160C               	bsf	12,4	;volatile
  3618                           
  3619                           ;main.c: 221: WPUAbits.WPUA4 = 0;
  3620  0E62  0024               	movlb	4	; select bank4
  3621  0E63  120C               	bcf	12,4	;volatile
  3622                           
  3623                           ;main.c: 222: ODCONAbits.ODCA4 = 1;
  3624  0E64  0025               	movlb	5	; select bank5
  3625  0E65  160C               	bsf	12,4	;volatile
  3626                           
  3627                           ;main.c: 223: ANSELAbits.ANSA4 = 1;
  3628  0E66  0023               	movlb	3	; select bank3
  3629  0E67  160C               	bsf	12,4	;volatile
  3630                           
  3631                           ;main.c: 226: ANSELCbits.ANSC3 = 1;
  3632  0E68  158E               	bsf	14,3	;volatile
  3633                           
  3634                           ;main.c: 227: TRISCbits.TRISC3 = 1;
  3635  0E69  0021               	movlb	1	; select bank1
  3636  0E6A  158E               	bsf	14,3	;volatile
  3637                           
  3638                           ;main.c: 230: FVRCONbits.TSEN = 1;
  3639  0E6B  0022               	movlb	2	; select bank2
  3640  0E6C  1697               	bsf	23,5	;volatile
  3641                           
  3642                           ;main.c: 231: FVRCONbits.TSRNG = 1;
  3643  0E6D  1617               	bsf	23,4	;volatile
  3644                           
  3645                           ;main.c: 234: FVRCONbits.FVREN = 0;
  3646  0E6E  1397               	bcf	23,7	;volatile
  3647                           
  3648                           ;main.c: 235: FVRCONbits.ADFVR = 0b10;
  3649  0E6F  0817               	movf	23,w	;volatile
  3650  0E70  39FC               	andlw	-4
  3651  0E71  3802               	iorlw	2
  3652  0E72  0097               	movwf	23	;volatile
  3653                           
  3654                           ;main.c: 237: ADCON1bits.ADCS = 0b111;
  3655  0E73  3070               	movlw	112
  3656  0E74  0021               	movlb	1	; select bank1
  3657  0E75  049E               	iorwf	30,f	;volatile
  3658                           
  3659                           ;main.c: 238: ADCON1bits.ADFM = 1;
  3660  0E76  179E               	bsf	30,7	;volatile
  3661                           
  3662                           ;main.c: 239: ADCON1bits.ADPREF = 0b11;
  3663  0E77  3003               	movlw	3
  3664  0E78  049E               	iorwf	30,f	;volatile
  3665                           
  3666                           ;main.c: 240: ADCON1bits.ADNREF = 0b00;
  3667  0E79  111E               	bcf	30,2	;volatile
  3668                           
  3669                           ;main.c: 241: PIE1bits.ADIE = 1;
  3670  0E7A  1711               	bsf	17,6	;volatile
  3671                           
  3672                           ;main.c: 244: ADCON0bits.CHS = 3;
  3673  0E7B  081D               	movf	29,w	;volatile
  3674  0E7C  3903               	andlw	-253
  3675  0E7D  380C               	iorlw	12
  3676  0E7E  009D               	movwf	29	;volatile
  3677                           
  3678                           ;main.c: 249: TRISAbits.TRISA2 = 1;
  3679  0E7F  150C               	bsf	12,2	;volatile
  3680                           
  3681                           ;main.c: 250: PIE0bits.INTE = 1;
  3682  0E80  1410               	bsf	16,0	;volatile
  3683                           
  3684                           ;main.c: 251: INTCONbits.INTEDG = 0;
  3685  0E81  100B               	bcf	11,0	;volatile
  3686                           
  3687                           ;main.c: 254: TRISAbits.TRISA5 = 0;
  3688  0E82  128C               	bcf	12,5	;volatile
  3689                           
  3690                           ;main.c: 255: PORTAbits.RA5 = 0;
  3691  0E83  0020               	movlb	0	; select bank0
  3692  0E84  128C               	bcf	12,5	;volatile
  3693                           
  3694                           ;main.c: 257: hcsr04Init();
  3695  0E85  3197  27D7  318E   	fcall	_hcsr04Init
  3696                           
  3697                           ;main.c: 260: INTCONbits.PEIE = 1;
  3698  0E88  170B               	bsf	11,6	;volatile
  3699                           
  3700                           ;main.c: 261: INTCONbits.GIE = 1;
  3701  0E89  178B               	bsf	11,7	;volatile
  3702                           
  3703                           ;main.c: 263: nrf24l01Packet_t packet;;main.c: 265: sendMessage(&packet, "BOOT0", 123);
  3704  0E8A  30BC               	movlw	low main@packet
  3705  0E8B  0021               	movlb	1	; select bank1
  3706  0E8C  00B1               	movwf	sendMessage@packet^(0+128)
  3707  0E8D  3000               	movlw	high main@packet
  3708  0E8E  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  3709  0E8F  300C               	movlw	low (STR_8| (0+32768))
  3710  0E90  00B3               	movwf	sendMessage@topic^(0+128)
  3711  0E91  3098               	movlw	high (STR_8| (0+32768))
  3712  0E92  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  3713  0E93  3000               	movlw	0
  3714  0E94  00B5               	movwf	sendMessage@value^(0+128)
  3715  0E95  30F6               	movlw	246
  3716  0E96  00B6               	movwf	(sendMessage@value+1)^(0+128)
  3717  0E97  3042               	movlw	66
  3718  0E98  00B7               	movwf	(sendMessage@value+2)^(0+128)
  3719  0E99  318D  250B  318E   	fcall	_sendMessage
  3720                           
  3721                           ;main.c: 266: sendMessage(&packet, "BOOT1", 456);
  3722  0E9C  30BC               	movlw	low main@packet
  3723  0E9D  0021               	movlb	1	; select bank1
  3724  0E9E  00B1               	movwf	sendMessage@packet^(0+128)
  3725  0E9F  3000               	movlw	high main@packet
  3726  0EA0  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  3727  0EA1  3012               	movlw	low (STR_9| (0+32768))
  3728  0EA2  00B3               	movwf	sendMessage@topic^(0+128)
  3729  0EA3  3098               	movlw	high (STR_9| (0+32768))
  3730  0EA4  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  3731  0EA5  3000               	movlw	0
  3732  0EA6  00B5               	movwf	sendMessage@value^(0+128)
  3733  0EA7  30E4               	movlw	228
  3734  0EA8  00B6               	movwf	(sendMessage@value+1)^(0+128)
  3735  0EA9  3043               	movlw	67
  3736  0EAA  00B7               	movwf	(sendMessage@value+2)^(0+128)
  3737  0EAB  318D  250B  318E   	fcall	_sendMessage
  3738  0EAE                     l4906:	
  3739                           ;main.c: 273: while(1){
  3740                           
  3741                           
  3742                           ;main.c: 274: loop();
  3743  0EAE  3182  222B  318E   	fcall	_loop
  3744  0EB1  2EAE               	goto	l4906
  3745  0EB2                     __end_of_main:	
  3746                           ;main.c: 275: };main.c: 277: return;
  3747                           
  3748                           
  3749                           	psect	text1
  3750  08DE                     __ptext1:	
  3751 ;; *************** function _nrf24l01Init *****************
  3752 ;; Defined at:
  3753 ;;		line 463 in file "nrf24l01.c"
  3754 ;; Parameters:    Size  Location     Type
  3755 ;;		None
  3756 ;; Auto vars:     Size  Location     Type
  3757 ;;		None
  3758 ;; Return value:  Size  Location     Type
  3759 ;;                  1    wreg      void 
  3760 ;; Registers used:
  3761 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  3762 ;; Tracked objects:
  3763 ;;		On entry : 0/0
  3764 ;;		On exit  : 0/0
  3765 ;;		Unchanged: 0/0
  3766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3769 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3770 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3771 ;;Total ram usage:        1 bytes
  3772 ;; Hardware stack levels used:    1
  3773 ;; Hardware stack levels required when called:   11
  3774 ;; This function calls:
  3775 ;;		_nrf24l01InitRegisters
  3776 ;;		_nrf24l01InterfaceInit
  3777 ;; This function is called by:
  3778 ;;		_main
  3779 ;; This function uses a non-reentrant model
  3780 ;;
  3781                           
  3782                           
  3783                           ;psect for function _nrf24l01Init
  3784  08DE                     _nrf24l01Init:	
  3785                           
  3786                           ;nrf24l01.c: 466: nrf24l01InterfaceInit();
  3787                           
  3788                           ;incstack = 0
  3789                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+11+pclath+
      +                          cstack]
  3790  08DE  3188  20C0  3188   	fcall	_nrf24l01InterfaceInit
  3791                           
  3792                           ;nrf24l01.c: 471: PORTAbits.RA0 = 0;
  3793  08E1  0020               	movlb	0	; select bank0
  3794  08E2  100C               	bcf	12,0	;volatile
  3795                           
  3796                           ;nrf24l01.c: 473: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3797  08E3  300B               	movlw	11
  3798  08E4  0020               	movlb	0	; select bank0
  3799  08E5  00B0               	movwf	??_nrf24l01Init
  3800  08E6  3062               	movlw	98
  3801  08E7                     u5317:	
  3802  08E7  0B89               	decfsz	9,f
  3803  08E8  28E7               	goto	u5317
  3804  08E9  0BB0               	decfsz	??_nrf24l01Init,f
  3805  08EA  28E7               	goto	u5317
  3806  08EB  0000               	nop
  3807                           
  3808                           ;nrf24l01.c: 475: nrf24l01InitRegisters();
  3809  08EC  3183  2347  3188   	fcall	_nrf24l01InitRegisters
  3810                           
  3811                           ;nrf24l01.c: 477: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3812  08EF  300B               	movlw	11
  3813  08F0  0020               	movlb	0	; select bank0
  3814  08F1  00B0               	movwf	??_nrf24l01Init
  3815  08F2  3062               	movlw	98
  3816  08F3                     u5327:	
  3817  08F3  0B89               	decfsz	9,f
  3818  08F4  28F3               	goto	u5327
  3819  08F5  0BB0               	decfsz	??_nrf24l01Init,f
  3820  08F6  28F3               	goto	u5327
  3821  08F7  0000               	nop
  3822                           
  3823                           ;nrf24l01.c: 479: PORTAbits.RA0 = 1;
  3824  08F8  0020               	movlb	0	; select bank0
  3825  08F9  140C               	bsf	12,0	;volatile
  3826                           
  3827                           ;nrf24l01.c: 481: status.TX = 0;
  3828  08FA  01E4               	clrf	_status	;volatile
  3829                           
  3830                           ;nrf24l01.c: 482: status.RX = 0;
  3831  08FB  01E5               	clrf	_status+1	;volatile
  3832  08FC  0008               	return
  3833  08FD                     __end_of_nrf24l01Init:	
  3834                           
  3835                           	psect	text2
  3836  08C0                     __ptext2:	
  3837 ;; *************** function _nrf24l01InterfaceInit *****************
  3838 ;; Defined at:
  3839 ;;		line 8 in file "interface.c"
  3840 ;; Parameters:    Size  Location     Type
  3841 ;;		None
  3842 ;; Auto vars:     Size  Location     Type
  3843 ;;		None
  3844 ;; Return value:  Size  Location     Type
  3845 ;;                  1    wreg      void 
  3846 ;; Registers used:
  3847 ;;		wreg, status,2, status,0
  3848 ;; Tracked objects:
  3849 ;;		On entry : 0/0
  3850 ;;		On exit  : 0/0
  3851 ;;		Unchanged: 0/0
  3852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3857 ;;Total ram usage:        0 bytes
  3858 ;; Hardware stack levels used:    1
  3859 ;; Hardware stack levels required when called:    7
  3860 ;; This function calls:
  3861 ;;		Nothing
  3862 ;; This function is called by:
  3863 ;;		_nrf24l01Init
  3864 ;; This function uses a non-reentrant model
  3865 ;;
  3866                           
  3867                           
  3868                           ;psect for function _nrf24l01InterfaceInit
  3869  08C0                     _nrf24l01InterfaceInit:	
  3870                           
  3871                           ;interface.c: 10: TRISAbits.TRISA0 = 0;
  3872                           
  3873                           ;incstack = 0
  3874                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3875  08C0  0021               	movlb	1	; select bank1
  3876  08C1  100C               	bcf	12,0	;volatile
  3877                           
  3878                           ;interface.c: 11: TRISAbits.TRISA1 = 0;
  3879  08C2  108C               	bcf	12,1	;volatile
  3880                           
  3881                           ;interface.c: 13: TRISCbits.TRISC1 = 1;
  3882  08C3  148E               	bsf	14,1	;volatile
  3883                           
  3884                           ;interface.c: 14: TRISCbits.TRISC2 = 0;
  3885  08C4  110E               	bcf	14,2	;volatile
  3886                           
  3887                           ;interface.c: 15: TRISCbits.TRISC0 = 0;
  3888  08C5  100E               	bcf	14,0	;volatile
  3889                           
  3890                           ;interface.c: 17: SSP1CON1bits.SSPEN = 0;
  3891  08C6  0024               	movlb	4	; select bank4
  3892  08C7  1295               	bcf	21,5	;volatile
  3893                           
  3894                           ;interface.c: 19: RC1PPSbits.RC1PPS = 0b10001;
  3895  08C8  003D               	movlb	29	; select bank29
  3896  08C9  0821               	movf	33,w	;volatile
  3897  08CA  39E0               	andlw	-32
  3898  08CB  3811               	iorlw	17
  3899  08CC  00A1               	movwf	33	;volatile
  3900                           
  3901                           ;interface.c: 20: RC2PPSbits.RC2PPS = 0b11001;
  3902  08CD  0822               	movf	34,w	;volatile
  3903  08CE  39E0               	andlw	-32
  3904  08CF  3819               	iorlw	25
  3905  08D0  00A2               	movwf	34	;volatile
  3906                           
  3907                           ;interface.c: 21: RC0PPSbits.RC0PPS = 0b11000;
  3908  08D1  0820               	movf	32,w	;volatile
  3909  08D2  39E0               	andlw	-32
  3910  08D3  3818               	iorlw	24
  3911  08D4  00A0               	movwf	32	;volatile
  3912                           
  3913                           ;interface.c: 23: SSP1CON1bits.CKP = 0;
  3914  08D5  0024               	movlb	4	; select bank4
  3915  08D6  1215               	bcf	21,4	;volatile
  3916                           
  3917                           ;interface.c: 24: SSP1STATbits.CKE = 1;
  3918  08D7  1714               	bsf	20,6	;volatile
  3919                           
  3920                           ;interface.c: 25: SSP1CON1bits.SSPM = 0b0001;
  3921  08D8  0815               	movf	21,w	;volatile
  3922  08D9  39F0               	andlw	-16
  3923  08DA  3801               	iorlw	1
  3924  08DB  0095               	movwf	21	;volatile
  3925                           
  3926                           ;interface.c: 27: SSP1CON1bits.SSPEN = 1;
  3927  08DC  1695               	bsf	21,5	;volatile
  3928  08DD  0008               	return
  3929  08DE                     __end_of_nrf24l01InterfaceInit:	
  3930                           
  3931                           	psect	text3
  3932  0347                     __ptext3:	
  3933 ;; *************** function _nrf24l01InitRegisters *****************
  3934 ;; Defined at:
  3935 ;;		line 362 in file "nrf24l01.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;		None
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;  i               2   14[BANK0 ] unsigned int 
  3940 ;;  DynPD           1   13[BANK0 ] struct .
  3941 ;;  enAA            1   12[BANK0 ] struct .
  3942 ;;  rfSetup         1   11[BANK0 ] struct .
  3943 ;;  feature         1   10[BANK0 ] struct .
  3944 ;;  setupAW         1    9[BANK0 ] struct .
  3945 ;;  channel         1    8[BANK0 ] struct .
  3946 ;; Return value:  Size  Location     Type
  3947 ;;                  1    wreg      void 
  3948 ;; Registers used:
  3949 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  3950 ;; Tracked objects:
  3951 ;;		On entry : 0/0
  3952 ;;		On exit  : 0/0
  3953 ;;		Unchanged: 0/0
  3954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3956 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3957 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3958 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3959 ;;Total ram usage:        9 bytes
  3960 ;; Hardware stack levels used:    1
  3961 ;; Hardware stack levels required when called:   10
  3962 ;; This function calls:
  3963 ;;		___bmul
  3964 ;;		_nrf24l01SPIEnd
  3965 ;;		_nrf24l01SPISend
  3966 ;;		_nrf24l01SPIStart
  3967 ;;		_nrf24l01Send
  3968 ;;		_nrf24l01SetRXPipe
  3969 ;;		_nrf24l01SetTXPipe
  3970 ;; This function is called by:
  3971 ;;		_nrf24l01Init
  3972 ;; This function uses a non-reentrant model
  3973 ;;
  3974                           
  3975                           
  3976                           ;psect for function _nrf24l01InitRegisters
  3977  0347                     _nrf24l01InitRegisters:	
  3978                           
  3979                           ;nrf24l01.c: 364: status.configRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x00, 0);
  3980                           
  3981                           ;incstack = 0
  3982                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+1
      +                          1+pclath+cstack]
  3983  0347  3000               	movlw	0
  3984  0348  001E               	movwi fsr1++
  3985  0349  3000               	movlw	0
  3986  034A  3187  27ED  3183   	fcall	_nrf24l01Send
  3987  034D  00FF               	movwf	127
  3988  034E  087F               	movf	127,w
  3989  034F  0020               	movlb	0	; select bank0
  3990  0350  00E7               	movwf	_status+3	;volatile
  3991                           
  3992                           ;nrf24l01.c: 366: status.configRegister.PWR_UP = 0;
  3993  0351  10E7               	bcf	_status+3,1	;volatile
  3994                           
  3995                           ;nrf24l01.c: 367: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3996  0352  0867               	movf	_status+3,w	;volatile
  3997  0353  001E               	movwi fsr1++
  3998  0354  3020               	movlw	32
  3999  0355  3187  27ED  3183   	fcall	_nrf24l01Send
  4000                           
  4001                           ;nrf24l01.c: 369: n_SETUP_AW_t setupAW;;nrf24l01.c: 370: setupAW.byte = 0x00;
  4002  0358  0020               	movlb	0	; select bank0
  4003  0359  01A9               	clrf	nrf24l01InitRegisters@setupAW
  4004                           
  4005                           ;nrf24l01.c: 371: setupAW.AW = 0b11;
  4006  035A  3003               	movlw	3
  4007  035B  04A9               	iorwf	nrf24l01InitRegisters@setupAW,f
  4008                           
  4009                           ;nrf24l01.c: 372: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x03, setupAW.byte);
  4010  035C  0829               	movf	nrf24l01InitRegisters@setupAW,w
  4011  035D  001E               	movwi fsr1++
  4012  035E  3023               	movlw	35
  4013  035F  3187  27ED  3183   	fcall	_nrf24l01Send
  4014                           
  4015                           ;nrf24l01.c: 375: n_RF_CH_t channel;;nrf24l01.c: 376: channel.RF_CH = 2;
  4016  0362  0020               	movlb	0	; select bank0
  4017  0363  0828               	movf	nrf24l01InitRegisters@channel,w
  4018  0364  3980               	andlw	-128
  4019  0365  3802               	iorlw	2
  4020  0366  00A8               	movwf	nrf24l01InitRegisters@channel
  4021                           
  4022                           ;nrf24l01.c: 377: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  4023  0367  0828               	movf	nrf24l01InitRegisters@channel,w
  4024  0368  001E               	movwi fsr1++
  4025  0369  3025               	movlw	37
  4026  036A  3187  27ED  3183   	fcall	_nrf24l01Send
  4027                           
  4028                           ;nrf24l01.c: 380: n_RF_SETUP_t rfSetup;;nrf24l01.c: 381: rfSetup.byte = 0x00;
  4029  036D  0020               	movlb	0	; select bank0
  4030  036E  01AB               	clrf	nrf24l01InitRegisters@rfSetup
  4031                           
  4032                           ;nrf24l01.c: 382: rfSetup.RF_DR_LOW = 0;
  4033  036F  12AB               	bcf	nrf24l01InitRegisters@rfSetup,5
  4034                           
  4035                           ;nrf24l01.c: 383: rfSetup.RF_DR_HIGH = 1;
  4036  0370  15AB               	bsf	nrf24l01InitRegisters@rfSetup,3
  4037                           
  4038                           ;nrf24l01.c: 384: rfSetup.RF_PWR = 3;
  4039  0371  3006               	movlw	6
  4040  0372  04AB               	iorwf	nrf24l01InitRegisters@rfSetup,f
  4041                           
  4042                           ;nrf24l01.c: 385: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  4043  0373  082B               	movf	nrf24l01InitRegisters@rfSetup,w
  4044  0374  001E               	movwi fsr1++
  4045  0375  3026               	movlw	38
  4046  0376  3187  27ED  3183   	fcall	_nrf24l01Send
  4047                           
  4048                           ;nrf24l01.c: 388: nrf24l01SetRXPipe(0xFF);
  4049  0379  30FF               	movlw	255
  4050  037A  3188  20A2  3183   	fcall	_nrf24l01SetRXPipe
  4051                           
  4052                           ;nrf24l01.c: 391: n_EN_AA_t enAA;;nrf24l01.c: 392: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  4053  037D  3000               	movlw	0
  4054  037E  001E               	movwi fsr1++
  4055  037F  3001               	movlw	1
  4056  0380  3187  27ED  3183   	fcall	_nrf24l01Send
  4057  0383  00FF               	movwf	127
  4058  0384  087F               	movf	127,w
  4059  0385  0020               	movlb	0	; select bank0
  4060  0386  00AC               	movwf	nrf24l01InitRegisters@enAA
  4061                           
  4062                           ;nrf24l01.c: 393: enAA.ENAA_P0 = 0;
  4063  0387  102C               	bcf	nrf24l01InitRegisters@enAA,0
  4064                           
  4065                           ;nrf24l01.c: 394: enAA.ENAA_P1 = 0;
  4066  0388  10AC               	bcf	nrf24l01InitRegisters@enAA,1
  4067                           
  4068                           ;nrf24l01.c: 395: enAA.ENAA_P2 = 0;
  4069  0389  112C               	bcf	nrf24l01InitRegisters@enAA,2
  4070                           
  4071                           ;nrf24l01.c: 396: enAA.ENAA_P3 = 0;
  4072  038A  11AC               	bcf	nrf24l01InitRegisters@enAA,3
  4073                           
  4074                           ;nrf24l01.c: 397: enAA.ENAA_P4 = 0;
  4075  038B  122C               	bcf	nrf24l01InitRegisters@enAA,4
  4076                           
  4077                           ;nrf24l01.c: 398: enAA.ENAA_P5 = 0;
  4078  038C  12AC               	bcf	nrf24l01InitRegisters@enAA,5
  4079                           
  4080                           ;nrf24l01.c: 399: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  4081  038D  082C               	movf	nrf24l01InitRegisters@enAA,w
  4082  038E  001E               	movwi fsr1++
  4083  038F  3021               	movlw	33
  4084  0390  3187  27ED  3183   	fcall	_nrf24l01Send
  4085                           
  4086                           ;nrf24l01.c: 403: n_FEATURE_t feature;;nrf24l01.c: 404: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  4087  0393  3000               	movlw	0
  4088  0394  001E               	movwi fsr1++
  4089  0395  301D               	movlw	29
  4090  0396  3187  27ED  3183   	fcall	_nrf24l01Send
  4091  0399  00FF               	movwf	127
  4092  039A  087F               	movf	127,w
  4093  039B  0020               	movlb	0	; select bank0
  4094  039C  00AA               	movwf	nrf24l01InitRegisters@feature
  4095                           
  4096                           ;nrf24l01.c: 405: feature.EN_DPL = 1;
  4097  039D  152A               	bsf	nrf24l01InitRegisters@feature,2
  4098                           
  4099                           ;nrf24l01.c: 406: feature.EN_DYN_ACK = 1;
  4100  039E  142A               	bsf	nrf24l01InitRegisters@feature,0
  4101                           
  4102                           ;nrf24l01.c: 407: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  4103  039F  082A               	movf	nrf24l01InitRegisters@feature,w
  4104  03A0  001E               	movwi fsr1++
  4105  03A1  303D               	movlw	61
  4106  03A2  3187  27ED  3183   	fcall	_nrf24l01Send
  4107                           
  4108                           ;nrf24l01.c: 409: n_DYNPD_t DynPD;;nrf24l01.c: 410: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  4109  03A5  3000               	movlw	0
  4110  03A6  001E               	movwi fsr1++
  4111  03A7  301C               	movlw	28
  4112  03A8  3187  27ED  3183   	fcall	_nrf24l01Send
  4113  03AB  00FF               	movwf	127
  4114  03AC  087F               	movf	127,w
  4115  03AD  0020               	movlb	0	; select bank0
  4116  03AE  00AD               	movwf	nrf24l01InitRegisters@DynPD
  4117                           
  4118                           ;nrf24l01.c: 411: DynPD.DPL_P0 = 1;
  4119  03AF  142D               	bsf	nrf24l01InitRegisters@DynPD,0
  4120                           
  4121                           ;nrf24l01.c: 412: DynPD.DPL_P1 = 1;
  4122  03B0  14AD               	bsf	nrf24l01InitRegisters@DynPD,1
  4123                           
  4124                           ;nrf24l01.c: 413: DynPD.DPL_P2 = 1;
  4125  03B1  152D               	bsf	nrf24l01InitRegisters@DynPD,2
  4126                           
  4127                           ;nrf24l01.c: 414: DynPD.DPL_P3 = 1;
  4128  03B2  15AD               	bsf	nrf24l01InitRegisters@DynPD,3
  4129                           
  4130                           ;nrf24l01.c: 415: DynPD.DPL_P4 = 1;
  4131  03B3  162D               	bsf	nrf24l01InitRegisters@DynPD,4
  4132                           
  4133                           ;nrf24l01.c: 416: DynPD.DPL_P5 = 1;
  4134  03B4  16AD               	bsf	nrf24l01InitRegisters@DynPD,5
  4135                           
  4136                           ;nrf24l01.c: 417: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  4137  03B5  082D               	movf	nrf24l01InitRegisters@DynPD,w
  4138  03B6  001E               	movwi fsr1++
  4139  03B7  303C               	movlw	60
  4140  03B8  3187  27ED  3183   	fcall	_nrf24l01Send
  4141                           
  4142                           ;nrf24l01.c: 420: unsigned int i;;nrf24l01.c: 421: for (i = 0; i < 6; i++){
  4143  03BB  0020               	movlb	0	; select bank0
  4144  03BC  01AE               	clrf	nrf24l01InitRegisters@i
  4145  03BD  01AF               	clrf	nrf24l01InitRegisters@i+1
  4146  03BE  3000               	movlw	0
  4147  03BF  022F               	subwf	nrf24l01InitRegisters@i+1,w
  4148  03C0  3006               	movlw	6
  4149  03C1  1903               	skipnz
  4150  03C2  022E               	subwf	nrf24l01InitRegisters@i,w
  4151  03C3  1803               	btfsc	3,0
  4152  03C4  2C1E               	goto	l4666
  4153  03C5                     l4650:	
  4154                           
  4155                           ;nrf24l01.c: 423: nrf24l01SPIStart();
  4156  03C5  3197  27A5  3183   	fcall	_nrf24l01SPIStart
  4157                           
  4158                           ;nrf24l01.c: 424: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  4159  03C8  0020               	movlb	0	; select bank0
  4160  03C9  082E               	movf	nrf24l01InitRegisters@i,w
  4161  03CA  3E0A               	addlw	10
  4162  03CB  3820               	iorlw	32
  4163  03CC  3188  2001  3183   	fcall	_nrf24l01SPISend
  4164                           
  4165                           ;nrf24l01.c: 426: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  4166  03CF  3022               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4167  03D0  0084               	movwf	4
  4168  03D1  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4169  03D2  0085               	movwf	5
  4170  03D3  0800               	movf	0,w	;code access
  4171  03D4  0020               	movlb	0	; select bank0
  4172  03D5  00A7               	movwf	??_nrf24l01InitRegisters
  4173  03D6  082E               	movf	nrf24l01InitRegisters@i,w
  4174  03D7  00FF               	movwf	127
  4175  03D8  087F               	movf	127,w
  4176  03D9  00F0               	movwf	___bmul@multiplicand
  4177  03DA  3000               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4178  03DB  0084               	movwf	4
  4179  03DC  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4180  03DD  0085               	movwf	5
  4181  03DE  0800               	movf	0,w	;code access
  4182  03DF  3197  27C6  3183   	fcall	___bmul
  4183  03E2  0020               	movlb	0	; select bank0
  4184  03E3  0727               	addwf	??_nrf24l01InitRegisters,w
  4185  03E4  3188  2001  3183   	fcall	_nrf24l01SPISend
  4186                           
  4187                           ;nrf24l01.c: 428: if (i < 2){
  4188  03E7  3000               	movlw	0
  4189  03E8  0020               	movlb	0	; select bank0
  4190  03E9  022F               	subwf	nrf24l01InitRegisters@i+1,w
  4191  03EA  3002               	movlw	2
  4192  03EB  1903               	skipnz
  4193  03EC  022E               	subwf	nrf24l01InitRegisters@i,w
  4194  03ED  1803               	skipnc
  4195  03EE  2C0F               	goto	l4660
  4196                           
  4197                           ;nrf24l01.c: 429: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4198  03EF  3021               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4199  03F0  0084               	movwf	4
  4200  03F1  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4201  03F2  0085               	movwf	5
  4202  03F3  0800               	movf	0,w	;code access
  4203  03F4  3188  2001  3183   	fcall	_nrf24l01SPISend
  4204                           
  4205                           ;nrf24l01.c: 430: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4206  03F7  3020               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4207  03F8  0084               	movwf	4
  4208  03F9  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4209  03FA  0085               	movwf	5
  4210  03FB  0800               	movf	0,w	;code access
  4211  03FC  3188  2001  3183   	fcall	_nrf24l01SPISend
  4212                           
  4213                           ;nrf24l01.c: 431: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4214  03FF  301F               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4215  0400  0084               	movwf	4
  4216  0401  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4217  0402  0085               	movwf	5
  4218  0403  0800               	movf	0,w	;code access
  4219  0404  3188  2001  3183   	fcall	_nrf24l01SPISend
  4220                           
  4221                           ;nrf24l01.c: 432: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4222  0407  301E               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4223  0408  0084               	movwf	4
  4224  0409  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4225  040A  0085               	movwf	5
  4226  040B  0800               	movf	0,w	;code access
  4227  040C  3188  2001  3183   	fcall	_nrf24l01SPISend
  4228  040F                     l4660:	
  4229                           
  4230                           ;nrf24l01.c: 433: };nrf24l01.c: 435: nrf24l01SPIEnd();
  4231  040F  3197  279C  3183   	fcall	_nrf24l01SPIEnd
  4232  0412  3001               	movlw	1
  4233  0413  0020               	movlb	0	; select bank0
  4234  0414  07AE               	addwf	nrf24l01InitRegisters@i,f
  4235  0415  3000               	movlw	0
  4236  0416  3DAF               	addwfc	nrf24l01InitRegisters@i+1,f
  4237  0417  3000               	movlw	0
  4238  0418  022F               	subwf	nrf24l01InitRegisters@i+1,w
  4239  0419  3006               	movlw	6
  4240  041A  1903               	skipnz
  4241  041B  022E               	subwf	nrf24l01InitRegisters@i,w
  4242  041C  1C03               	skipc
  4243  041D  2BC5               	goto	l4650
  4244  041E                     l4666:	
  4245                           
  4246                           ;nrf24l01.c: 436: };nrf24l01.c: 438: nrf24l01SetTXPipe(0);
  4247  041E  3000               	movlw	0
  4248  041F  318B  2367  3183   	fcall	_nrf24l01SetTXPipe
  4249                           
  4250                           ;nrf24l01.c: 442: status.statusRegister.byte = 0x00;
  4251  0422  0020               	movlb	0	; select bank0
  4252  0423  01E6               	clrf	_status+2	;volatile
  4253                           
  4254                           ;nrf24l01.c: 443: status.statusRegister.RX_DR = 1;
  4255  0424  1766               	bsf	_status+2,6	;volatile
  4256                           
  4257                           ;nrf24l01.c: 444: status.statusRegister.TX_DS = 1;
  4258  0425  16E6               	bsf	_status+2,5	;volatile
  4259                           
  4260                           ;nrf24l01.c: 445: status.statusRegister.MAX_RT = 1;
  4261  0426  1666               	bsf	_status+2,4	;volatile
  4262                           
  4263                           ;nrf24l01.c: 446: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.statusReg
      +                          ister.byte);
  4264  0427  0866               	movf	_status+2,w	;volatile
  4265  0428  001E               	movwi fsr1++
  4266  0429  3027               	movlw	39
  4267  042A  3187  27ED  3183   	fcall	_nrf24l01Send
  4268                           
  4269                           ;nrf24l01.c: 448: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  4270  042D  3000               	movlw	0
  4271  042E  001E               	movwi fsr1++
  4272  042F  3007               	movlw	7
  4273  0430  3187  27ED  3183   	fcall	_nrf24l01Send
  4274  0433  00FF               	movwf	127
  4275  0434  087F               	movf	127,w
  4276  0435  0020               	movlb	0	; select bank0
  4277  0436  00E6               	movwf	_status+2	;volatile
  4278                           
  4279                           ;nrf24l01.c: 451: nrf24l01Send((unsigned) 0b11100001, 0);
  4280  0437  3000               	movlw	0
  4281  0438  001E               	movwi fsr1++
  4282  0439  30E1               	movlw	225
  4283  043A  3187  27ED  3183   	fcall	_nrf24l01Send
  4284                           
  4285                           ;nrf24l01.c: 452: nrf24l01Send((unsigned) 0b11100010, 0);
  4286  043D  3000               	movlw	0
  4287  043E  001E               	movwi fsr1++
  4288  043F  30E2               	movlw	226
  4289  0440  3187  27ED  3183   	fcall	_nrf24l01Send
  4290                           
  4291                           ;nrf24l01.c: 455: status.configRegister.PRIM_RX = 1;
  4292  0443  0020               	movlb	0	; select bank0
  4293  0444  1467               	bsf	_status+3,0	;volatile
  4294                           
  4295                           ;nrf24l01.c: 456: status.configRegister.EN_CRC = 1;
  4296  0445  15E7               	bsf	_status+3,3	;volatile
  4297                           
  4298                           ;nrf24l01.c: 457: status.configRegister.CRCO = 1;
  4299  0446  1567               	bsf	_status+3,2	;volatile
  4300                           
  4301                           ;nrf24l01.c: 458: status.configRegister.PWR_UP = 1;
  4302  0447  14E7               	bsf	_status+3,1	;volatile
  4303                           
  4304                           ;nrf24l01.c: 459: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  4305  0448  0867               	movf	_status+3,w	;volatile
  4306  0449  001E               	movwi fsr1++
  4307  044A  3020               	movlw	32
  4308  044B  3187  27ED         	fcall	_nrf24l01Send
  4309  044D  0008               	return
  4310  044E                     __end_of_nrf24l01InitRegisters:	
  4311                           
  4312                           	psect	text4
  4313  0B67                     __ptext4:	
  4314 ;; *************** function _nrf24l01SetTXPipe *****************
  4315 ;; Defined at:
  4316 ;;		line 140 in file "nrf24l01.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;  pipe            1    wreg     unsigned char 
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;  pipe            1    6[BANK0 ] unsigned char 
  4321 ;; Return value:  Size  Location     Type
  4322 ;;                  1    wreg      void 
  4323 ;; Registers used:
  4324 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  4325 ;; Tracked objects:
  4326 ;;		On entry : 0/0
  4327 ;;		On exit  : 0/0
  4328 ;;		Unchanged: 0/0
  4329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4331 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4332 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4333 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4334 ;;Total ram usage:        2 bytes
  4335 ;; Hardware stack levels used:    1
  4336 ;; Hardware stack levels required when called:    8
  4337 ;; This function calls:
  4338 ;;		___bmul
  4339 ;;		_nrf24l01SPIEnd
  4340 ;;		_nrf24l01SPISend
  4341 ;;		_nrf24l01SPIStart
  4342 ;; This function is called by:
  4343 ;;		_main
  4344 ;;		_nrf24l01InitRegisters
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           
  4349                           ;psect for function _nrf24l01SetTXPipe
  4350  0B67                     _nrf24l01SetTXPipe:	
  4351                           
  4352                           ;incstack = 0
  4353                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+11+pc
      +                          lath+cstack]
  4354                           ;nrf24l01SetTXPipe@pipe stored from wreg
  4355  0B67  0020               	movlb	0	; select bank0
  4356  0B68  00A6               	movwf	nrf24l01SetTXPipe@pipe
  4357                           
  4358                           ;nrf24l01.c: 143: nrf24l01SPIStart();
  4359  0B69  3197  27A5  318B   	fcall	_nrf24l01SPIStart
  4360                           
  4361                           ;nrf24l01.c: 144: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  4362  0B6C  3030               	movlw	48
  4363  0B6D  3188  2001  318B   	fcall	_nrf24l01SPISend
  4364                           
  4365                           ;nrf24l01.c: 145: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  4366  0B70  3022               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4367  0B71  0084               	movwf	4
  4368  0B72  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4369  0B73  0085               	movwf	5
  4370  0B74  0800               	movf	0,w	;code access
  4371  0B75  00F3               	movwf	??_nrf24l01SetTXPipe
  4372  0B76  3000               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4373  0B77  0084               	movwf	4
  4374  0B78  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4375  0B79  0085               	movwf	5
  4376  0B7A  0800               	movf	0,w	;code access
  4377  0B7B  00FF               	movwf	127
  4378  0B7C  087F               	movf	127,w
  4379  0B7D  00F0               	movwf	___bmul@multiplicand
  4380  0B7E  0020               	movlb	0	; select bank0
  4381  0B7F  0826               	movf	nrf24l01SetTXPipe@pipe,w
  4382  0B80  3197  27C6  318B   	fcall	___bmul
  4383  0B83  0773               	addwf	??_nrf24l01SetTXPipe,w
  4384  0B84  3188  2001  318B   	fcall	_nrf24l01SPISend
  4385                           
  4386                           ;nrf24l01.c: 146: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4387  0B87  3021               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4388  0B88  0084               	movwf	4
  4389  0B89  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4390  0B8A  0085               	movwf	5
  4391  0B8B  0800               	movf	0,w	;code access
  4392  0B8C  3188  2001  318B   	fcall	_nrf24l01SPISend
  4393                           
  4394                           ;nrf24l01.c: 147: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4395  0B8F  3020               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4396  0B90  0084               	movwf	4
  4397  0B91  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4398  0B92  0085               	movwf	5
  4399  0B93  0800               	movf	0,w	;code access
  4400  0B94  3188  2001  318B   	fcall	_nrf24l01SPISend
  4401                           
  4402                           ;nrf24l01.c: 148: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4403  0B97  301F               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4404  0B98  0084               	movwf	4
  4405  0B99  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4406  0B9A  0085               	movwf	5
  4407  0B9B  0800               	movf	0,w	;code access
  4408  0B9C  3188  2001  318B   	fcall	_nrf24l01SPISend
  4409                           
  4410                           ;nrf24l01.c: 149: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4411  0B9F  301E               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4412  0BA0  0084               	movwf	4
  4413  0BA1  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4414  0BA2  0085               	movwf	5
  4415  0BA3  0800               	movf	0,w	;code access
  4416  0BA4  3188  2001  318B   	fcall	_nrf24l01SPISend
  4417                           
  4418                           ;nrf24l01.c: 150: nrf24l01SPIEnd();
  4419  0BA7  3197  279C         	fcall	_nrf24l01SPIEnd
  4420  0BA9  0008               	return
  4421  0BAA                     __end_of_nrf24l01SetTXPipe:	
  4422                           
  4423                           	psect	text5
  4424  17C6                     __ptext5:	
  4425 ;; *************** function ___bmul *****************
  4426 ;; Defined at:
  4427 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  4428 ;; Parameters:    Size  Location     Type
  4429 ;;  multiplier      1    wreg     unsigned char 
  4430 ;;  multiplicand    1    0[COMMON] unsigned char 
  4431 ;; Auto vars:     Size  Location     Type
  4432 ;;  multiplier      1    2[COMMON] unsigned char 
  4433 ;;  product         1    1[COMMON] unsigned char 
  4434 ;; Return value:  Size  Location     Type
  4435 ;;                  1    wreg      unsigned char 
  4436 ;; Registers used:
  4437 ;;		wreg, status,2, status,0, btemp+11
  4438 ;; Tracked objects:
  4439 ;;		On entry : 0/0
  4440 ;;		On exit  : 0/0
  4441 ;;		Unchanged: 0/0
  4442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4443 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4444 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4446 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4447 ;;Total ram usage:        3 bytes
  4448 ;; Hardware stack levels used:    1
  4449 ;; Hardware stack levels required when called:    7
  4450 ;; This function calls:
  4451 ;;		Nothing
  4452 ;; This function is called by:
  4453 ;;		_nrf24l01SetTXPipe
  4454 ;;		_nrf24l01InitRegisters
  4455 ;; This function uses a non-reentrant model
  4456 ;;
  4457                           
  4458                           
  4459                           ;psect for function ___bmul
  4460  17C6                     ___bmul:	
  4461                           
  4462                           ;incstack = 0
  4463                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+11]
  4464                           ;___bmul@multiplier stored from wreg
  4465  17C6  00F2               	movwf	___bmul@multiplier
  4466  17C7  01F1               	clrf	___bmul@product
  4467  17C8                     l4046:	
  4468  17C8  1C72               	btfss	___bmul@multiplier,0
  4469  17C9  2FCE               	goto	l4050
  4470  17CA  0870               	movf	___bmul@multiplicand,w
  4471  17CB  00FF               	movwf	127
  4472  17CC  087F               	movf	127,w
  4473  17CD  07F1               	addwf	___bmul@product,f
  4474  17CE                     l4050:	
  4475  17CE  1003               	clrc
  4476  17CF  0DF0               	rlf	___bmul@multiplicand,f
  4477  17D0  1003               	clrc
  4478  17D1  0CF2               	rrf	___bmul@multiplier,f
  4479  17D2  0872               	movf	___bmul@multiplier,w
  4480  17D3  1D03               	btfss	3,2
  4481  17D4  2FC8               	goto	l4046
  4482  17D5  0871               	movf	___bmul@product,w
  4483  17D6  0008               	return
  4484  17D7                     __end_of___bmul:	
  4485                           
  4486                           	psect	text6
  4487  08A2                     __ptext6:	
  4488 ;; *************** function _nrf24l01SetRXPipe *****************
  4489 ;; Defined at:
  4490 ;;		line 153 in file "nrf24l01.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;  pipe            1    wreg     unsigned char 
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;  pipe            1    1[COMMON] unsigned char 
  4495 ;;  enRXAddr        1    2[COMMON] struct .
  4496 ;; Return value:  Size  Location     Type
  4497 ;;                  1    wreg      void 
  4498 ;; Registers used:
  4499 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath
  4500 ;; Tracked objects:
  4501 ;;		On entry : 0/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4506 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4507 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4508 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4509 ;;Total ram usage:        3 bytes
  4510 ;; Hardware stack levels used:    1
  4511 ;; Hardware stack levels required when called:    9
  4512 ;; This function calls:
  4513 ;;		_nrf24l01Send
  4514 ;; This function is called by:
  4515 ;;		_main
  4516 ;;		_nrf24l01InitRegisters
  4517 ;; This function uses a non-reentrant model
  4518 ;;
  4519                           
  4520                           
  4521                           ;psect for function _nrf24l01SetRXPipe
  4522  08A2                     _nrf24l01SetRXPipe:	
  4523                           
  4524                           ;incstack = 0
  4525                           ; Regs used in _nrf24l01SetRXPipe: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+11+pclath]
  4526                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4527  08A2  00F1               	movwf	nrf24l01SetRXPipe@pipe
  4528                           
  4529                           ;nrf24l01.c: 155: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 157: if (pipe > 5){
  4530  08A3  3006               	movlw	6
  4531  08A4  0271               	subwf	nrf24l01SetRXPipe@pipe,w
  4532  08A5  1C03               	skipc
  4533  08A6  28AE               	goto	l272
  4534                           
  4535                           ;nrf24l01.c: 158: enRXAddr.ERX_P0 = 1;
  4536  08A7  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4537                           
  4538                           ;nrf24l01.c: 159: enRXAddr.ERX_P1 = 1;
  4539  08A8  14F2               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4540                           
  4541                           ;nrf24l01.c: 160: enRXAddr.ERX_P2 = 1;
  4542  08A9  1572               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4543                           
  4544                           ;nrf24l01.c: 161: enRXAddr.ERX_P3 = 1;
  4545  08AA  15F2               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4546                           
  4547                           ;nrf24l01.c: 162: enRXAddr.ERX_P4 = 1;
  4548  08AB  1672               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4549                           
  4550                           ;nrf24l01.c: 163: enRXAddr.ERX_P5 = 1;
  4551  08AC  16F2               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4552                           
  4553                           ;nrf24l01.c: 164: }
  4554  08AD  28BA               	goto	l4290
  4555  08AE                     l272:	
  4556                           
  4557                           ;nrf24l01.c: 166: else{;nrf24l01.c: 167: enRXAddr.ERX_P0 = 1;
  4558  08AE  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4559                           
  4560                           ;nrf24l01.c: 168: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4561  08AF  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4562  08B0  00F0               	movwf	??_nrf24l01SetRXPipe
  4563  08B1  0A71               	incf	nrf24l01SetRXPipe@pipe,w
  4564  08B2  28B4               	goto	u4774
  4565  08B3                     u4775:	
  4566  08B3  35F0               	lslf	??_nrf24l01SetRXPipe,f
  4567  08B4                     u4774:	
  4568  08B4  0B89               	decfsz	9,f
  4569  08B5  28B3               	goto	u4775
  4570  08B6  0870               	movf	??_nrf24l01SetRXPipe,w
  4571  08B7  00FF               	movwf	127
  4572  08B8  087F               	movf	127,w
  4573  08B9  00F2               	movwf	nrf24l01SetRXPipe@enRXAddr
  4574  08BA                     l4290:	
  4575                           
  4576                           ;nrf24l01.c: 169: };nrf24l01.c: 171: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4577  08BA  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4578  08BB  001E               	movwi fsr1++
  4579  08BC  3022               	movlw	34
  4580  08BD  3187  27ED         	fcall	_nrf24l01Send
  4581  08BF  0008               	return
  4582  08C0                     __end_of_nrf24l01SetRXPipe:	
  4583                           
  4584                           	psect	text7
  4585  0A79                     __ptext7:	
  4586 ;; *************** function _nrf24l01GetPipe *****************
  4587 ;; Defined at:
  4588 ;;		line 155 in file "main.c"
  4589 ;; Parameters:    Size  Location     Type
  4590 ;;  name            1    wreg     PTR unsigned char 
  4591 ;;		 -> romDataMap(28), 
  4592 ;; Auto vars:     Size  Location     Type
  4593 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4594 ;;		 -> romDataMap(28), 
  4595 ;;  i               1   10[BANK0 ] unsigned char 
  4596 ;;  pipe            1    8[BANK0 ] unsigned char 
  4597 ;; Return value:  Size  Location     Type
  4598 ;;                  1    wreg      unsigned char 
  4599 ;; Registers used:
  4600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+10, btemp+11, pclath, cstack
  4601 ;; Tracked objects:
  4602 ;;		On entry : 0/0
  4603 ;;		On exit  : 0/0
  4604 ;;		Unchanged: 0/0
  4605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4607 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4608 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4609 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4610 ;;Total ram usage:        4 bytes
  4611 ;; Hardware stack levels used:    1
  4612 ;; Hardware stack levels required when called:    8
  4613 ;; This function calls:
  4614 ;;		___lwmod
  4615 ;;		_strlen
  4616 ;; This function is called by:
  4617 ;;		_main
  4618 ;; This function uses a non-reentrant model
  4619 ;;
  4620                           
  4621                           
  4622                           ;psect for function _nrf24l01GetPipe
  4623  0A79                     _nrf24l01GetPipe:	
  4624                           
  4625                           ;incstack = 0
  4626                           ; Regs used in _nrf24l01GetPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+10+btemp
      +                          +11+pclath+cstack]
  4627                           ;nrf24l01GetPipe@name stored from wreg
  4628  0A79  0020               	movlb	0	; select bank0
  4629  0A7A  00A9               	movwf	nrf24l01GetPipe@name
  4630                           
  4631                           ;main.c: 156: unsigned char pipe = 0;
  4632  0A7B  01A8               	clrf	nrf24l01GetPipe@pipe
  4633                           
  4634                           ;main.c: 157: unsigned char i = 0;
  4635  0A7C  01AA               	clrf	nrf24l01GetPipe@i
  4636                           
  4637                           ;main.c: 160: for (i = 0; i < strlen(name); i++){
  4638  0A7D  01AA               	clrf	nrf24l01GetPipe@i
  4639  0A7E                     l4776:	
  4640  0A7E  0829               	movf	nrf24l01GetPipe@name,w
  4641  0A7F  3188  2084  318A   	fcall	_strlen
  4642  0A82  0020               	movlb	0	; select bank0
  4643  0A83  082A               	movf	nrf24l01GetPipe@i,w
  4644  0A84  00FE               	movwf	126
  4645  0A85  01FF               	clrf	127
  4646  0A86  0875               	movf	117,w
  4647  0A87  027F               	subwf	127,w
  4648  0A88  1D03               	skipz
  4649  0A89  2A8C               	goto	u5225
  4650  0A8A  0874               	movf	116,w
  4651  0A8B  027E               	subwf	126,w
  4652  0A8C                     u5225:	
  4653  0A8C  1803               	btfsc	3,0
  4654  0A8D  2A9E               	goto	l4778
  4655                           
  4656                           ;main.c: 161: pipe+= name[i];
  4657  0A8E  082A               	movf	nrf24l01GetPipe@i,w
  4658  0A8F  0729               	addwf	nrf24l01GetPipe@name,w
  4659  0A90  00A7               	movwf	??_nrf24l01GetPipe
  4660  0A91  0827               	movf	??_nrf24l01GetPipe,w
  4661  0A92  0084               	movwf	4
  4662  0A93  3001               	movlw	1	; select bank2/3
  4663  0A94  0085               	movwf	5
  4664  0A95  0800               	movf	0,w
  4665  0A96  00FF               	movwf	127
  4666  0A97  087F               	movf	127,w
  4667  0A98  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4668  0A99  3001               	movlw	1
  4669  0A9A  00FF               	movwf	127
  4670  0A9B  087F               	movf	127,w
  4671  0A9C  07AA               	addwf	nrf24l01GetPipe@i,f
  4672  0A9D  2A7E               	goto	l4776
  4673  0A9E                     l4778:	
  4674                           
  4675                           ;main.c: 162: };main.c: 164: return (unsigned) pipe % 6;
  4676  0A9E  3006               	movlw	6
  4677  0A9F  00F0               	movwf	___lwmod@divisor
  4678  0AA0  3000               	movlw	0
  4679  0AA1  00F1               	movwf	___lwmod@divisor+1
  4680  0AA2  0828               	movf	nrf24l01GetPipe@pipe,w
  4681  0AA3  00FE               	movwf	126
  4682  0AA4  01FF               	clrf	127
  4683  0AA5  087E               	movf	126,w
  4684  0AA6  00F2               	movwf	___lwmod@dividend
  4685  0AA7  087F               	movf	127,w
  4686  0AA8  00F3               	movwf	___lwmod@dividend+1
  4687  0AA9  3189  21BB         	fcall	___lwmod
  4688  0AAB  0870               	movf	?___lwmod,w
  4689  0AAC  0008               	return
  4690  0AAD                     __end_of_nrf24l01GetPipe:	
  4691                           
  4692                           	psect	text8
  4693  09BB                     __ptext8:	
  4694 ;; *************** function ___lwmod *****************
  4695 ;; Defined at:
  4696 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4697 ;; Parameters:    Size  Location     Type
  4698 ;;  divisor         2    0[COMMON] unsigned int 
  4699 ;;  dividend        2    2[COMMON] unsigned int 
  4700 ;; Auto vars:     Size  Location     Type
  4701 ;;  counter         1    6[BANK0 ] unsigned char 
  4702 ;; Return value:  Size  Location     Type
  4703 ;;                  2    0[COMMON] unsigned int 
  4704 ;; Registers used:
  4705 ;;		wreg, status,2, status,0, btemp+11
  4706 ;; Tracked objects:
  4707 ;;		On entry : 0/0
  4708 ;;		On exit  : 0/0
  4709 ;;		Unchanged: 0/0
  4710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4711 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4712 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4714 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4715 ;;Total ram usage:        5 bytes
  4716 ;; Hardware stack levels used:    1
  4717 ;; Hardware stack levels required when called:    7
  4718 ;; This function calls:
  4719 ;;		Nothing
  4720 ;; This function is called by:
  4721 ;;		_nrf24l01GetPipe
  4722 ;; This function uses a non-reentrant model
  4723 ;;
  4724                           
  4725                           
  4726                           ;psect for function ___lwmod
  4727  09BB                     ___lwmod:	
  4728                           
  4729                           ;incstack = 0
  4730                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+11]
  4731  09BB  0870               	movf	___lwmod@divisor,w
  4732  09BC  0471               	iorwf	___lwmod@divisor+1,w
  4733  09BD  1903               	btfsc	3,2
  4734  09BE  29E3               	goto	l4712
  4735  09BF  0020               	movlb	0	; select bank0
  4736  09C0  01A6               	clrf	___lwmod@counter
  4737  09C1  0AA6               	incf	___lwmod@counter,f
  4738  09C2                     l4702:	
  4739  09C2  1BF1               	btfsc	___lwmod@divisor+1,7
  4740  09C3  29CE               	goto	l4704
  4741  09C4  3001               	movlw	1
  4742  09C5                     u5125:	
  4743  09C5  35F0               	lslf	___lwmod@divisor,f
  4744  09C6  0DF1               	rlf	___lwmod@divisor+1,f
  4745  09C7  0B89               	decfsz	9,f
  4746  09C8  29C5               	goto	u5125
  4747  09C9  3001               	movlw	1
  4748  09CA  00FF               	movwf	127
  4749  09CB  087F               	movf	127,w
  4750  09CC  07A6               	addwf	___lwmod@counter,f
  4751  09CD  29C2               	goto	l4702
  4752  09CE                     l4704:	
  4753  09CE  0871               	movf	___lwmod@divisor+1,w
  4754  09CF  0273               	subwf	___lwmod@dividend+1,w
  4755  09D0  1D03               	skipz
  4756  09D1  29D4               	goto	u5145
  4757  09D2  0870               	movf	___lwmod@divisor,w
  4758  09D3  0272               	subwf	___lwmod@dividend,w
  4759  09D4                     u5145:	
  4760  09D4  1C03               	skipc
  4761  09D5  29DA               	goto	l4708
  4762  09D6  0870               	movf	___lwmod@divisor,w
  4763  09D7  02F2               	subwf	___lwmod@dividend,f
  4764  09D8  0871               	movf	___lwmod@divisor+1,w
  4765  09D9  3BF3               	subwfb	___lwmod@dividend+1,f
  4766  09DA                     l4708:	
  4767  09DA  3001               	movlw	1
  4768  09DB                     u5155:	
  4769  09DB  36F1               	lsrf	___lwmod@divisor+1,f
  4770  09DC  0CF0               	rrf	___lwmod@divisor,f
  4771  09DD  0B89               	decfsz	9,f
  4772  09DE  29DB               	goto	u5155
  4773  09DF  3001               	movlw	1
  4774  09E0  02A6               	subwf	___lwmod@counter,f
  4775  09E1  1D03               	btfss	3,2
  4776  09E2  29CE               	goto	l4704
  4777  09E3                     l4712:	
  4778  09E3  0873               	movf	___lwmod@dividend+1,w
  4779  09E4  00F1               	movwf	?___lwmod+1
  4780  09E5  0872               	movf	___lwmod@dividend,w
  4781  09E6  00F0               	movwf	?___lwmod
  4782  09E7  0008               	return
  4783  09E8                     __end_of___lwmod:	
  4784                           
  4785                           	psect	text9
  4786  022B                     __ptext9:	
  4787 ;; *************** function _loop *****************
  4788 ;; Defined at:
  4789 ;;		line 107 in file "main.c"
  4790 ;; Parameters:    Size  Location     Type
  4791 ;;		None
  4792 ;; Auto vars:     Size  Location     Type
  4793 ;;  packet         33   15[BANK4 ] struct .
  4794 ;;  ta              3    3[BANK4 ] float 
  4795 ;;  vt              3    0[BANK4 ] float 
  4796 ;; Return value:  Size  Location     Type
  4797 ;;                  1    wreg      void 
  4798 ;; Registers used:
  4799 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  4800 ;; Tracked objects:
  4801 ;;		On entry : 0/0
  4802 ;;		On exit  : 0/0
  4803 ;;		Unchanged: 0/0
  4804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4806 ;;      Locals:         0       0       0       0       0      48       0       0       0       0       0       0       
      +0       0
  4807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4808 ;;      Totals:         0       0       0       0       0      48       0       0       0       0       0       0       
      +0       0
  4809 ;;Total ram usage:       48 bytes
  4810 ;; Hardware stack levels used:    1
  4811 ;; Hardware stack levels required when called:   14
  4812 ;; This function calls:
  4813 ;;		___ftadd
  4814 ;;		___ftdiv
  4815 ;;		___ftmul
  4816 ;;		___ftneg
  4817 ;;		___lltoft
  4818 ;;		_getADCValue
  4819 ;;		_hcsr04GetAerage
  4820 ;;		_hcsr04Trigger
  4821 ;;		_sendMessage
  4822 ;; This function is called by:
  4823 ;;		_main
  4824 ;; This function uses a non-reentrant model
  4825 ;;
  4826                           
  4827                           
  4828                           ;psect for function _loop
  4829  022B                     _loop:	
  4830                           
  4831                           ;main.c: 109: nrf24l01Packet_t packet;;main.c: 111: sendMessage(&packet, "DIST", hcsr04G
      +                          etAerage());
  4832                           
  4833                           ;incstack = 0
  4834                           ; Regs used in _loop: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  4835  022B  302F               	movlw	low loop@packet
  4836  022C  0021               	movlb	1	; select bank1
  4837  022D  00B1               	movwf	sendMessage@packet^(0+128)
  4838  022E  3002               	movlw	high loop@packet
  4839  022F  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  4840  0230  302D               	movlw	low (STR_3| (0+32768))
  4841  0231  00B3               	movwf	sendMessage@topic^(0+128)
  4842  0232  3098               	movlw	high (STR_3| (0+32768))
  4843  0233  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  4844  0234  318C  248D  3182   	fcall	_hcsr04GetAerage
  4845  0237  0020               	movlb	0	; select bank0
  4846  0238  0842               	movf	?_hcsr04GetAerage,w
  4847  0239  0021               	movlb	1	; select bank1
  4848  023A  00B5               	movwf	sendMessage@value^(0+128)
  4849  023B  0020               	movlb	0	; select bank0
  4850  023C  0843               	movf	?_hcsr04GetAerage+1,w
  4851  023D  0021               	movlb	1	; select bank1
  4852  023E  00B6               	movwf	(sendMessage@value+1)^(0+128)
  4853  023F  0020               	movlb	0	; select bank0
  4854  0240  0844               	movf	?_hcsr04GetAerage+2,w
  4855  0241  0021               	movlb	1	; select bank1
  4856  0242  00B7               	movwf	(sendMessage@value+2)^(0+128)
  4857  0243  318D  250B  3182   	fcall	_sendMessage
  4858                           
  4859                           ;main.c: 113: hcsr04Trigger();
  4860  0246  3197  27AE  3182   	fcall	_hcsr04Trigger
  4861                           
  4862                           ;main.c: 115: sendMessage(&packet, "COUNT", counter);
  4863  0249  0021               	movlb	1	; select bank1
  4864  024A  0860               	movf	(_counter+3)^(0+128),w
  4865  024B  00F3               	movwf	___lltoft@c+3
  4866  024C  085F               	movf	(_counter+2)^(0+128),w
  4867  024D  00F2               	movwf	___lltoft@c+2
  4868  024E  085E               	movf	(_counter+1)^(0+128),w
  4869  024F  00F1               	movwf	___lltoft@c+1
  4870  0250  085D               	movf	_counter^(0+128),w
  4871  0251  00F0               	movwf	___lltoft@c
  4872  0252  3189  2191  3182   	fcall	___lltoft
  4873  0255  0870               	movf	?___lltoft,w
  4874  0256  0024               	movlb	4	; select bank4
  4875  0257  00A6               	movwf	_loop$2252^(0+512)
  4876  0258  0871               	movf	?___lltoft+1,w
  4877  0259  00A7               	movwf	(_loop$2252+1)^(0+512)
  4878  025A  0872               	movf	?___lltoft+2,w
  4879  025B  00A8               	movwf	(_loop$2252+2)^(0+512)
  4880                           
  4881                           ;main.c: 115: sendMessage(&packet, "COUNT", counter);
  4882  025C  302F               	movlw	low loop@packet
  4883  025D  0021               	movlb	1	; select bank1
  4884  025E  00B1               	movwf	sendMessage@packet^(0+128)
  4885  025F  3002               	movlw	high loop@packet
  4886  0260  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  4887  0261  3018               	movlw	low (STR_4| (0+32768))
  4888  0262  00B3               	movwf	sendMessage@topic^(0+128)
  4889  0263  3098               	movlw	high (STR_4| (0+32768))
  4890  0264  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  4891  0265  0024               	movlb	4	; select bank4
  4892  0266  0826               	movf	_loop$2252^(0+512),w
  4893  0267  0021               	movlb	1	; select bank1
  4894  0268  00B5               	movwf	sendMessage@value^(0+128)
  4895  0269  0024               	movlb	4	; select bank4
  4896  026A  0827               	movf	(_loop$2252+1)^(0+512),w
  4897  026B  0021               	movlb	1	; select bank1
  4898  026C  00B6               	movwf	(sendMessage@value+1)^(0+128)
  4899  026D  0024               	movlb	4	; select bank4
  4900  026E  0828               	movf	(_loop$2252+2)^(0+512),w
  4901  026F  0021               	movlb	1	; select bank1
  4902  0270  00B7               	movwf	(sendMessage@value+2)^(0+128)
  4903  0271  318D  250B  3182   	fcall	_sendMessage
  4904                           
  4905                           ;main.c: 122: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4906  0274  30CF               	movlw	207
  4907  0275  0020               	movlb	0	; select bank0
  4908  0276  00CC               	movwf	___ftmul@f1
  4909  0277  3046               	movlw	70
  4910  0278  00CD               	movwf	___ftmul@f1+1
  4911  0279  3040               	movlw	64
  4912  027A  00CE               	movwf	___ftmul@f1+2
  4913  027B  3004               	movlw	4
  4914  027C  3186  26DF  3182   	fcall	_getADCValue
  4915  027F  0020               	movlb	0	; select bank0
  4916  0280  0842               	movf	?_getADCValue,w
  4917  0281  00CF               	movwf	___ftmul@f2
  4918  0282  0843               	movf	?_getADCValue+1,w
  4919  0283  00D0               	movwf	___ftmul@f2+1
  4920  0284  0844               	movf	?_getADCValue+2,w
  4921  0285  00D1               	movwf	___ftmul@f2+2
  4922  0286  3186  262B  3182   	fcall	___ftmul
  4923  0289  0020               	movlb	0	; select bank0
  4924  028A  084C               	movf	?___ftmul,w
  4925  028B  0024               	movlb	4	; select bank4
  4926  028C  00A9               	movwf	_loop$2253^(0+512)
  4927  028D  0020               	movlb	0	; select bank0
  4928  028E  084D               	movf	?___ftmul+1,w
  4929  028F  0024               	movlb	4	; select bank4
  4930  0290  00AA               	movwf	(_loop$2253+1)^(0+512)
  4931  0291  0020               	movlb	0	; select bank0
  4932  0292  084E               	movf	?___ftmul+2,w
  4933  0293  0024               	movlb	4	; select bank4
  4934  0294  00AB               	movwf	(_loop$2253+2)^(0+512)
  4935                           
  4936                           ;main.c: 122: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4937  0295  302F               	movlw	low loop@packet
  4938  0296  0021               	movlb	1	; select bank1
  4939  0297  00B1               	movwf	sendMessage@packet^(0+128)
  4940  0298  3002               	movlw	high loop@packet
  4941  0299  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  4942  029A  3028               	movlw	low (STR_5| (0+32768))
  4943  029B  00B3               	movwf	sendMessage@topic^(0+128)
  4944  029C  3098               	movlw	high (STR_5| (0+32768))
  4945  029D  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  4946  029E  0024               	movlb	4	; select bank4
  4947  029F  0829               	movf	_loop$2253^(0+512),w
  4948  02A0  0021               	movlb	1	; select bank1
  4949  02A1  00B5               	movwf	sendMessage@value^(0+128)
  4950  02A2  0024               	movlb	4	; select bank4
  4951  02A3  082A               	movf	(_loop$2253+1)^(0+512),w
  4952  02A4  0021               	movlb	1	; select bank1
  4953  02A5  00B6               	movwf	(sendMessage@value+1)^(0+128)
  4954  02A6  0024               	movlb	4	; select bank4
  4955  02A7  082B               	movf	(_loop$2253+2)^(0+512),w
  4956  02A8  0021               	movlb	1	; select bank1
  4957  02A9  00B7               	movwf	(sendMessage@value+2)^(0+128)
  4958  02AA  318D  250B  3182   	fcall	_sendMessage
  4959                           
  4960                           ;main.c: 134: FVRCONbits.TSEN = 1;
  4961  02AD  0022               	movlb	2	; select bank2
  4962  02AE  1697               	bsf	23,5	;volatile
  4963                           
  4964                           ;main.c: 135: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4965  02AF  303D               	movlw	61
  4966  02B0  3186  26DF  3182   	fcall	_getADCValue
  4967  02B3  0020               	movlb	0	; select bank0
  4968  02B4  0842               	movf	?_getADCValue,w
  4969  02B5  00CC               	movwf	___ftneg@f1
  4970  02B6  0843               	movf	?_getADCValue+1,w
  4971  02B7  00CD               	movwf	___ftneg@f1+1
  4972  02B8  0844               	movf	?_getADCValue+2,w
  4973  02B9  00CE               	movwf	___ftneg@f1+2
  4974  02BA  3197  2793  3182   	fcall	___ftneg
  4975  02BD  0020               	movlb	0	; select bank0
  4976  02BE  084C               	movf	?___ftneg,w
  4977  02BF  0024               	movlb	4	; select bank4
  4978  02C0  00AC               	movwf	_loop$2254^(0+512)
  4979  02C1  0020               	movlb	0	; select bank0
  4980  02C2  084D               	movf	?___ftneg+1,w
  4981  02C3  0024               	movlb	4	; select bank4
  4982  02C4  00AD               	movwf	(_loop$2254+1)^(0+512)
  4983  02C5  0020               	movlb	0	; select bank0
  4984  02C6  084E               	movf	?___ftneg+2,w
  4985  02C7  0024               	movlb	4	; select bank4
  4986  02C8  00AE               	movwf	(_loop$2254+2)^(0+512)
  4987                           
  4988                           ;main.c: 135: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4989  02C9  3000               	movlw	0
  4990  02CA  0020               	movlb	0	; select bank0
  4991  02CB  00B5               	movwf	___ftdiv@f2
  4992  02CC  3000               	movlw	0
  4993  02CD  00B6               	movwf	___ftdiv@f2+1
  4994  02CE  3040               	movlw	64
  4995  02CF  00B7               	movwf	___ftdiv@f2+2
  4996  02D0  3012               	movlw	18
  4997  02D1  00AB               	movwf	___ftadd@f1
  4998  02D2  3003               	movlw	3
  4999  02D3  00AC               	movwf	___ftadd@f1+1
  5000  02D4  3040               	movlw	64
  5001  02D5  00AD               	movwf	___ftadd@f1+2
  5002  02D6  0024               	movlb	4	; select bank4
  5003  02D7  082C               	movf	_loop$2254^(0+512),w
  5004  02D8  0020               	movlb	0	; select bank0
  5005  02D9  00AE               	movwf	___ftadd@f2
  5006  02DA  0024               	movlb	4	; select bank4
  5007  02DB  082D               	movf	(_loop$2254+1)^(0+512),w
  5008  02DC  0020               	movlb	0	; select bank0
  5009  02DD  00AF               	movwf	___ftadd@f2+1
  5010  02DE  0024               	movlb	4	; select bank4
  5011  02DF  082E               	movf	(_loop$2254+2)^(0+512),w
  5012  02E0  0020               	movlb	0	; select bank0
  5013  02E1  00B0               	movwf	___ftadd@f2+2
  5014  02E2  3184  244E  3182   	fcall	___ftadd
  5015  02E5  0020               	movlb	0	; select bank0
  5016  02E6  082B               	movf	?___ftadd,w
  5017  02E7  00B8               	movwf	___ftdiv@f1
  5018  02E8  082C               	movf	?___ftadd+1,w
  5019  02E9  00B9               	movwf	___ftdiv@f1+1
  5020  02EA  082D               	movf	?___ftadd+2,w
  5021  02EB  00BA               	movwf	___ftdiv@f1+2
  5022  02EC  318F  2757  3182   	fcall	___ftdiv
  5023  02EF  0020               	movlb	0	; select bank0
  5024  02F0  0835               	movf	?___ftdiv,w
  5025  02F1  0024               	movlb	4	; select bank4
  5026  02F2  00A0               	movwf	loop@vt^(0+512)
  5027  02F3  0020               	movlb	0	; select bank0
  5028  02F4  0836               	movf	?___ftdiv+1,w
  5029  02F5  0024               	movlb	4	; select bank4
  5030  02F6  00A1               	movwf	(loop@vt+1)^(0+512)
  5031  02F7  0020               	movlb	0	; select bank0
  5032  02F8  0837               	movf	?___ftdiv+2,w
  5033  02F9  0024               	movlb	4	; select bank4
  5034  02FA  00A2               	movwf	(loop@vt+2)^(0+512)
  5035                           
  5036                           ;main.c: 136: FVRCONbits.TSEN = 0;
  5037  02FB  0022               	movlb	2	; select bank2
  5038  02FC  1297               	bcf	23,5	;volatile
  5039                           
  5040                           ;main.c: 141: float ta = (vt / -0.00132) - (0.6063 / -0.00132) - 40;
  5041  02FD  30A9               	movlw	169
  5042  02FE  0020               	movlb	0	; select bank0
  5043  02FF  00AB               	movwf	___ftadd@f1
  5044  0300  30D1               	movlw	209
  5045  0301  00AC               	movwf	___ftadd@f1+1
  5046  0302  3043               	movlw	67
  5047  0303  00AD               	movwf	___ftadd@f1+2
  5048  0304  3004               	movlw	4
  5049  0305  00B5               	movwf	___ftdiv@f2
  5050  0306  30AD               	movlw	173
  5051  0307  00B6               	movwf	___ftdiv@f2+1
  5052  0308  30BA               	movlw	186
  5053  0309  00B7               	movwf	___ftdiv@f2+2
  5054  030A  0024               	movlb	4	; select bank4
  5055  030B  0820               	movf	loop@vt^(0+512),w
  5056  030C  0020               	movlb	0	; select bank0
  5057  030D  00B8               	movwf	___ftdiv@f1
  5058  030E  0024               	movlb	4	; select bank4
  5059  030F  0821               	movf	(loop@vt+1)^(0+512),w
  5060  0310  0020               	movlb	0	; select bank0
  5061  0311  00B9               	movwf	___ftdiv@f1+1
  5062  0312  0024               	movlb	4	; select bank4
  5063  0313  0822               	movf	(loop@vt+2)^(0+512),w
  5064  0314  0020               	movlb	0	; select bank0
  5065  0315  00BA               	movwf	___ftdiv@f1+2
  5066  0316  318F  2757  3182   	fcall	___ftdiv
  5067  0319  0020               	movlb	0	; select bank0
  5068  031A  0835               	movf	?___ftdiv,w
  5069  031B  00AE               	movwf	___ftadd@f2
  5070  031C  0836               	movf	?___ftdiv+1,w
  5071  031D  00AF               	movwf	___ftadd@f2+1
  5072  031E  0837               	movf	?___ftdiv+2,w
  5073  031F  00B0               	movwf	___ftadd@f2+2
  5074  0320  3184  244E  3182   	fcall	___ftadd
  5075  0323  0020               	movlb	0	; select bank0
  5076  0324  082B               	movf	?___ftadd,w
  5077  0325  0024               	movlb	4	; select bank4
  5078  0326  00A3               	movwf	loop@ta^(0+512)
  5079  0327  0020               	movlb	0	; select bank0
  5080  0328  082C               	movf	?___ftadd+1,w
  5081  0329  0024               	movlb	4	; select bank4
  5082  032A  00A4               	movwf	(loop@ta+1)^(0+512)
  5083  032B  0020               	movlb	0	; select bank0
  5084  032C  082D               	movf	?___ftadd+2,w
  5085  032D  0024               	movlb	4	; select bank4
  5086  032E  00A5               	movwf	(loop@ta+2)^(0+512)
  5087                           
  5088                           ;main.c: 143: sendMessage(&packet, "TEMP", ta);
  5089  032F  302F               	movlw	low loop@packet
  5090  0330  0021               	movlb	1	; select bank1
  5091  0331  00B1               	movwf	sendMessage@packet^(0+128)
  5092  0332  3002               	movlw	high loop@packet
  5093  0333  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  5094  0334  3023               	movlw	low (STR_6| (0+32768))
  5095  0335  00B3               	movwf	sendMessage@topic^(0+128)
  5096  0336  3098               	movlw	high (STR_6| (0+32768))
  5097  0337  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  5098  0338  0024               	movlb	4	; select bank4
  5099  0339  0823               	movf	loop@ta^(0+512),w
  5100  033A  0021               	movlb	1	; select bank1
  5101  033B  00B5               	movwf	sendMessage@value^(0+128)
  5102  033C  0024               	movlb	4	; select bank4
  5103  033D  0824               	movf	(loop@ta+1)^(0+512),w
  5104  033E  0021               	movlb	1	; select bank1
  5105  033F  00B6               	movwf	(sendMessage@value+1)^(0+128)
  5106  0340  0024               	movlb	4	; select bank4
  5107  0341  0825               	movf	(loop@ta+2)^(0+512),w
  5108  0342  0021               	movlb	1	; select bank1
  5109  0343  00B7               	movwf	(sendMessage@value+2)^(0+128)
  5110  0344  318D  250B         	fcall	_sendMessage
  5111  0346  0008               	return
  5112  0347                     __end_of_loop:	
  5113                           
  5114                           	psect	text10
  5115  0D0B                     __ptext10:	
  5116 ;; *************** function _sendMessage *****************
  5117 ;; Defined at:
  5118 ;;		line 87 in file "main.c"
  5119 ;; Parameters:    Size  Location     Type
  5120 ;;  packet          2   17[BANK1 ] PTR struct .
  5121 ;;		 -> main@packet(33), loop@packet(33), 
  5122 ;;  topic           2   19[BANK1 ] PTR const unsigned char 
  5123 ;;		 -> STR_9(6), STR_8(6), STR_6(5), STR_5(5), 
  5124 ;;		 -> STR_4(6), STR_3(5), 
  5125 ;;  value           3   21[BANK1 ] float 
  5126 ;; Auto vars:     Size  Location     Type
  5127 ;;  ftoaStatus      2   24[BANK1 ] int 
  5128 ;; Return value:  Size  Location     Type
  5129 ;;                  1    wreg      void 
  5130 ;; Registers used:
  5131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  5132 ;; Tracked objects:
  5133 ;;		On entry : 0/0
  5134 ;;		On exit  : 0/0
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5137 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5138 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5140 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  5141 ;;Total ram usage:        9 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; Hardware stack levels required when called:   13
  5144 ;; This function calls:
  5145 ;;		_ftoa
  5146 ;;		_memset
  5147 ;;		_nrf24l01SendPacket
  5148 ;;		_sleepListren
  5149 ;;		_strcat
  5150 ;;		_strcpy
  5151 ;; This function is called by:
  5152 ;;		_loop
  5153 ;;		_main
  5154 ;; This function uses a non-reentrant model
  5155 ;;
  5156                           
  5157                           
  5158                           ;psect for function _sendMessage
  5159  0D0B                     _sendMessage:	
  5160                           
  5161                           ;main.c: 89: int ftoaStatus;;main.c: 91: memset(packet->Message, 0, sizeof(packet->Messa
      +                          ge));
  5162                           
  5163                           ;incstack = 0
  5164                           ; Regs used in _sendMessage: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+p
      +                          clath+cstack]
  5165  0D0B  3020               	movlw	32
  5166  0D0C  001E               	movwi fsr1++
  5167  0D0D  3000               	movlw	0
  5168  0D0E  001E               	movwi fsr1++
  5169  0D0F  3000               	movlw	0
  5170  0D10  001E               	movwi fsr1++
  5171  0D11  001E               	movwi fsr1++
  5172  0D12  0021               	movlb	1	; select bank1
  5173  0D13  0831               	movf	sendMessage@packet^(0+128),w
  5174  0D14  3E01               	addlw	1
  5175  0D15  00FE               	movwf	126
  5176  0D16  3000               	movlw	0
  5177  0D17  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5178  0D18  00FF               	movwf	127
  5179  0D19  087E               	movf	126,w
  5180  0D1A  001E               	movwi fsr1++
  5181  0D1B  087F               	movf	127,w
  5182  0D1C  001E               	movwi fsr1++
  5183  0D1D  318A  2247  318D   	fcall	_memset
  5184                           
  5185                           ;main.c: 92: strcpy(packet->Message, romData->name);
  5186  0D20  0021               	movlb	1	; select bank1
  5187  0D21  0831               	movf	sendMessage@packet^(0+128),w
  5188  0D22  3E01               	addlw	1
  5189  0D23  00F0               	movwf	strcpy@to
  5190  0D24  3000               	movlw	0
  5191  0D25  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5192  0D26  00F1               	movwf	strcpy@to+1
  5193  0D27  0865               	movf	_romData^(0+128),w
  5194  0D28  3E01               	addlw	1
  5195  0D29  00F2               	movwf	strcpy@from
  5196  0D2A  3001               	movlw	1
  5197  0D2B  00F3               	movwf	strcpy@from+1
  5198  0D2C  3188  202B  318D   	fcall	_strcpy
  5199                           
  5200                           ;main.c: 93: strcat(packet->Message, "/");
  5201  0D2F  0021               	movlb	1	; select bank1
  5202  0D30  0831               	movf	sendMessage@packet^(0+128),w
  5203  0D31  3E01               	addlw	1
  5204  0D32  00AD               	movwf	strcat@to^(0+128)
  5205  0D33  3000               	movlw	0
  5206  0D34  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5207  0D35  00AE               	movwf	(strcat@to+1)^(0+128)
  5208  0D36  3036               	movlw	low (STR_1| (0+32768))
  5209  0D37  00AF               	movwf	strcat@from^(0+128)
  5210  0D38  3098               	movlw	high (STR_1| (0+32768))
  5211  0D39  00B0               	movwf	(strcat@from^(0+128)+1)
  5212  0D3A  3189  21E8  318D   	fcall	_strcat
  5213                           
  5214                           ;main.c: 94: strcat(packet->Message, topic);
  5215  0D3D  0021               	movlb	1	; select bank1
  5216  0D3E  0831               	movf	sendMessage@packet^(0+128),w
  5217  0D3F  3E01               	addlw	1
  5218  0D40  00AD               	movwf	strcat@to^(0+128)
  5219  0D41  3000               	movlw	0
  5220  0D42  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5221  0D43  00AE               	movwf	(strcat@to+1)^(0+128)
  5222  0D44  0834               	movf	(sendMessage@topic+1)^(0+128),w
  5223  0D45  00B0               	movwf	(strcat@from+1)^(0+128)
  5224  0D46  0833               	movf	sendMessage@topic^(0+128),w
  5225  0D47  00AF               	movwf	strcat@from^(0+128)
  5226  0D48  3189  21E8  318D   	fcall	_strcat
  5227                           
  5228                           ;main.c: 95: strcat(packet->Message, "/");
  5229  0D4B  0021               	movlb	1	; select bank1
  5230  0D4C  0831               	movf	sendMessage@packet^(0+128),w
  5231  0D4D  3E01               	addlw	1
  5232  0D4E  00AD               	movwf	strcat@to^(0+128)
  5233  0D4F  3000               	movlw	0
  5234  0D50  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5235  0D51  00AE               	movwf	(strcat@to+1)^(0+128)
  5236  0D52  3036               	movlw	low (STR_1| (0+32768))
  5237  0D53  00AF               	movwf	strcat@from^(0+128)
  5238  0D54  3098               	movlw	high (STR_1| (0+32768))
  5239  0D55  00B0               	movwf	(strcat@from^(0+128)+1)
  5240  0D56  3189  21E8  318D   	fcall	_strcat
  5241                           
  5242                           ;main.c: 96: strcat(packet->Message, ftoa(value, &ftoaStatus));
  5243  0D59  0021               	movlb	1	; select bank1
  5244  0D5A  0831               	movf	sendMessage@packet^(0+128),w
  5245  0D5B  3E01               	addlw	1
  5246  0D5C  00AD               	movwf	strcat@to^(0+128)
  5247  0D5D  3000               	movlw	0
  5248  0D5E  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5249  0D5F  00AE               	movwf	(strcat@to+1)^(0+128)
  5250  0D60  0835               	movf	sendMessage@value^(0+128),w
  5251  0D61  00A0               	movwf	ftoa@f^(0+128)
  5252  0D62  0836               	movf	(sendMessage@value+1)^(0+128),w
  5253  0D63  00A1               	movwf	(ftoa@f+1)^(0+128)
  5254  0D64  0837               	movf	(sendMessage@value+2)^(0+128),w
  5255  0D65  00A2               	movwf	(ftoa@f+2)^(0+128)
  5256  0D66  30B8               	movlw	(low (sendMessage@ftoaStatus| 0))& (0+255)
  5257  0D67  00FF               	movwf	127
  5258  0D68  087F               	movf	127,w
  5259  0D69  00A3               	movwf	ftoa@status^(0+128)
  5260  0D6A  3185  2544  318D   	fcall	_ftoa
  5261  0D6D  0021               	movlb	1	; select bank1
  5262  0D6E  00AF               	movwf	strcat@from^(0+128)
  5263  0D6F  3001               	movlw	1
  5264  0D70  00B0               	movwf	(strcat@from+1)^(0+128)
  5265  0D71  3189  21E8  318D   	fcall	_strcat
  5266                           
  5267                           ;main.c: 98: packet->packetData.byte = 0;
  5268  0D74  0021               	movlb	1	; select bank1
  5269  0D75  0831               	movf	sendMessage@packet^(0+128),w
  5270  0D76  0084               	movwf	4
  5271  0D77  0832               	movf	(sendMessage@packet+1)^(0+128),w
  5272  0D78  0085               	movwf	5
  5273  0D79  0180               	clrf	0
  5274                           
  5275                           ;main.c: 99: packet->packetData.ACKRequest = 0;
  5276  0D7A  0831               	movf	sendMessage@packet^(0+128),w
  5277  0D7B  0084               	movwf	4
  5278  0D7C  0832               	movf	(sendMessage@packet+1)^(0+128),w
  5279  0D7D  0085               	movwf	5
  5280  0D7E  1100               	bcf	0,2
  5281                           
  5282                           ;main.c: 101: nrf24l01SendPacket(packet);
  5283  0D7F  0832               	movf	(sendMessage@packet+1)^(0+128),w
  5284  0D80  0020               	movlb	0	; select bank0
  5285  0D81  00A9               	movwf	nrf24l01SendPacket@txPacket+1
  5286  0D82  0021               	movlb	1	; select bank1
  5287  0D83  0831               	movf	sendMessage@packet^(0+128),w
  5288  0D84  0020               	movlb	0	; select bank0
  5289  0D85  00A8               	movwf	nrf24l01SendPacket@txPacket
  5290  0D86  318A  2217  318D   	fcall	_nrf24l01SendPacket
  5291                           
  5292                           ;main.c: 103: sleepListren(1);
  5293  0D89  3001               	movlw	1
  5294  0D8A  0020               	movlb	0	; select bank0
  5295  0D8B  00A6               	movwf	sleepListren@seconds
  5296  0D8C  3000               	movlw	0
  5297  0D8D  00A7               	movwf	sleepListren@seconds+1
  5298  0D8E  3188  20FD         	fcall	_sleepListren
  5299  0D90  0008               	return
  5300  0D91                     __end_of_sendMessage:	
  5301                           
  5302                           	psect	text11
  5303  09E8                     __ptext11:	
  5304 ;; *************** function _strcat *****************
  5305 ;; Defined at:
  5306 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5307 ;; Parameters:    Size  Location     Type
  5308 ;;  to              2   13[BANK1 ] PTR unsigned char 
  5309 ;;		 -> main@packet(33), loop@packet(33), 
  5310 ;;  from            2   15[BANK1 ] PTR const unsigned char 
  5311 ;;		 -> ftoa@buf(17), STR_9(6), STR_8(6), STR_6(5), 
  5312 ;;		 -> STR_5(5), STR_4(6), STR_3(5), STR_2(2), 
  5313 ;;		 -> STR_1(2), 
  5314 ;; Auto vars:     Size  Location     Type
  5315 ;;  cp              2   66[BANK0 ] PTR unsigned char 
  5316 ;;		 -> main@packet(33), loop@packet(33), 
  5317 ;; Return value:  Size  Location     Type
  5318 ;;                  2   13[BANK1 ] PTR unsigned char 
  5319 ;; Registers used:
  5320 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5326 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;Total ram usage:        6 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; Hardware stack levels required when called:    7
  5333 ;; This function calls:
  5334 ;;		Nothing
  5335 ;; This function is called by:
  5336 ;;		_sendMessage
  5337 ;; This function uses a non-reentrant model
  5338 ;;
  5339                           
  5340                           
  5341                           ;psect for function _strcat
  5342  09E8                     _strcat:	
  5343                           
  5344                           ;incstack = 0
  5345                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5346  09E8  0021               	movlb	1	; select bank1
  5347  09E9  082E               	movf	(strcat@to+1)^(0+128),w
  5348  09EA  0020               	movlb	0	; select bank0
  5349  09EB  00E3               	movwf	strcat@cp+1
  5350  09EC  0021               	movlb	1	; select bank1
  5351  09ED  082D               	movf	strcat@to^(0+128),w
  5352  09EE  0020               	movlb	0	; select bank0
  5353  09EF  00E2               	movwf	strcat@cp
  5354  09F0                     l4228:	
  5355  09F0  0862               	movf	strcat@cp,w
  5356  09F1  0084               	movwf	4
  5357  09F2  0863               	movf	strcat@cp+1,w
  5358  09F3  0085               	movwf	5
  5359  09F4  0800               	movf	0,w
  5360  09F5  1903               	btfsc	3,2
  5361  09F6  2A05               	goto	l4232
  5362  09F7  3001               	movlw	1
  5363  09F8  07E2               	addwf	strcat@cp,f
  5364  09F9  3000               	movlw	0
  5365  09FA  3DE3               	addwfc	strcat@cp+1,f
  5366  09FB  29F0               	goto	l4228
  5367  09FC                     l4230:	
  5368  09FC  3001               	movlw	1
  5369  09FD  07E2               	addwf	strcat@cp,f
  5370  09FE  3000               	movlw	0
  5371  09FF  3DE3               	addwfc	strcat@cp+1,f
  5372  0A00  3001               	movlw	1
  5373  0A01  0021               	movlb	1	; select bank1
  5374  0A02  07AF               	addwf	strcat@from^(0+128),f
  5375  0A03  3000               	movlw	0
  5376  0A04  3DB0               	addwfc	(strcat@from+1)^(0+128),f
  5377  0A05                     l4232:	
  5378  0A05  0021               	movlb	1	; select bank1
  5379  0A06  082F               	movf	strcat@from^(0+128),w
  5380  0A07  0084               	movwf	4
  5381  0A08  0830               	movf	(strcat@from+1)^(0+128),w
  5382  0A09  0085               	movwf	5
  5383  0A0A  0800               	movf	0,w	;code access
  5384  0A0B  00FF               	movwf	127
  5385  0A0C  0020               	movlb	0	; select bank0
  5386  0A0D  0862               	movf	strcat@cp,w
  5387  0A0E  0084               	movwf	4
  5388  0A0F  0863               	movf	strcat@cp+1,w
  5389  0A10  0085               	movwf	5
  5390  0A11  087F               	movf	127,w
  5391  0A12  0080               	movwf	0
  5392  0A13  0800               	movf	0,w
  5393  0A14  1903               	btfsc	3,2
  5394  0A15  0008               	return
  5395  0A16  29FC               	goto	l4230
  5396  0A17                     __end_of_strcat:	
  5397                           ;	Return value of _strcat is never used
  5398                           
  5399                           
  5400                           	psect	text12
  5401  08FD                     __ptext12:	
  5402 ;; *************** function _sleepListren *****************
  5403 ;; Defined at:
  5404 ;;		line 74 in file "main.c"
  5405 ;; Parameters:    Size  Location     Type
  5406 ;;  seconds         2    6[BANK0 ] unsigned int 
  5407 ;; Auto vars:     Size  Location     Type
  5408 ;;		None
  5409 ;; Return value:  Size  Location     Type
  5410 ;;                  1    wreg      void 
  5411 ;; Registers used:
  5412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+10, btemp+11, pclath, cstack
  5413 ;; Tracked objects:
  5414 ;;		On entry : 0/0
  5415 ;;		On exit  : 0/0
  5416 ;;		Unchanged: 0/0
  5417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5418 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5421 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5422 ;;Total ram usage:        2 bytes
  5423 ;; Hardware stack levels used:    1
  5424 ;; Hardware stack levels required when called:   10
  5425 ;; This function calls:
  5426 ;;		_nrf24l01SetRXMode
  5427 ;;		_sleepMs
  5428 ;; This function is called by:
  5429 ;;		_sendMessage
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           
  5434                           ;psect for function _sleepListren
  5435  08FD                     _sleepListren:	
  5436  08FD                     l4214:	
  5437                           ;main.c: 77: while(seconds--){
  5438                           
  5439                           ;incstack = 0
  5440                           ; Regs used in _sleepListren: [wreg+fsr1l+fsr1h+status,2-btemp+0+btemp+10+btemp+11+pclat
      +                          h+cstack]
  5441                           
  5442  08FD  3001               	movlw	1
  5443  08FE  0020               	movlb	0	; select bank0
  5444  08FF  02A6               	subwf	sleepListren@seconds,f
  5445  0900  3000               	movlw	0
  5446  0901  3BA7               	subwfb	sleepListren@seconds+1,f
  5447  0902  0A26               	incf	sleepListren@seconds,w
  5448  0903  1903               	btfsc	3,2
  5449  0904  0A27               	incf	sleepListren@seconds+1,w
  5450  0905  1903               	btfsc	3,2
  5451  0906  0008               	return
  5452                           
  5453                           ;main.c: 79: nrf24l01SetRXMode(0);
  5454  0907  3000               	movlw	0
  5455  0908  318A  22AD  3188   	fcall	_nrf24l01SetRXMode
  5456                           
  5457                           ;main.c: 80: sleepMs(200);
  5458  090B  30C8               	movlw	200
  5459  090C  00F0               	movwf	sleepMs@milliseconds
  5460  090D  3000               	movlw	0
  5461  090E  00F1               	movwf	sleepMs@milliseconds+1
  5462  090F  3189  2140  3188   	fcall	_sleepMs
  5463                           
  5464                           ;main.c: 82: nrf24l01SetRXMode(0);
  5465  0912  3000               	movlw	0
  5466  0913  318A  22AD  3188   	fcall	_nrf24l01SetRXMode
  5467                           
  5468                           ;main.c: 83: sleepMs(200);
  5469  0916  30C8               	movlw	200
  5470  0917  00F0               	movwf	sleepMs@milliseconds
  5471  0918  3000               	movlw	0
  5472  0919  00F1               	movwf	sleepMs@milliseconds+1
  5473  091A  3189  2140  3188   	fcall	_sleepMs
  5474  091D  28FD               	goto	l4214
  5475  091E                     __end_of_sleepListren:	
  5476                           
  5477                           	psect	text13
  5478  0A17                     __ptext13:	
  5479 ;; *************** function _nrf24l01SendPacket *****************
  5480 ;; Defined at:
  5481 ;;		line 176 in file "nrf24l01.c"
  5482 ;; Parameters:    Size  Location     Type
  5483 ;;  txPacket        2    8[BANK0 ] PTR struct .
  5484 ;;		 -> main@packet(33), loop@packet(33), 
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;		None
  5487 ;; Return value:  Size  Location     Type
  5488 ;;                  1    wreg      void 
  5489 ;; Registers used:
  5490 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  5491 ;; Tracked objects:
  5492 ;;		On entry : 0/0
  5493 ;;		On exit  : 0/0
  5494 ;;		Unchanged: 0/0
  5495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5496 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5499 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5500 ;;Total ram usage:        2 bytes
  5501 ;; Hardware stack levels used:    1
  5502 ;; Hardware stack levels required when called:   12
  5503 ;; This function calls:
  5504 ;;		_nrf24l01Service
  5505 ;;		_sleepMs
  5506 ;;		_strcpy
  5507 ;; This function is called by:
  5508 ;;		_sendMessage
  5509 ;; This function uses a non-reentrant model
  5510 ;;
  5511                           
  5512                           
  5513                           ;psect for function _nrf24l01SendPacket
  5514  0A17                     _nrf24l01SendPacket:	
  5515                           
  5516                           ;nrf24l01.c: 178: strcpy(TXPacket.Message, txPacket->Message);
  5517                           
  5518                           ;incstack = 0
  5519                           ; Regs used in _nrf24l01SendPacket: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-bte
      +                          mp+11+pclath+cstack]
  5520  0A17  30C2               	movlw	low (_TXPacket+1)
  5521  0A18  00F0               	movwf	strcpy@to
  5522  0A19  3001               	movlw	high (_TXPacket+1)
  5523  0A1A  00F1               	movwf	strcpy@to+1
  5524  0A1B  0020               	movlb	0	; select bank0
  5525  0A1C  0828               	movf	nrf24l01SendPacket@txPacket,w
  5526  0A1D  3E01               	addlw	1
  5527  0A1E  00FE               	movwf	126
  5528  0A1F  3000               	movlw	0
  5529  0A20  3D29               	addwfc	nrf24l01SendPacket@txPacket+1,w
  5530  0A21  00FF               	movwf	127
  5531  0A22  087E               	movf	126,w
  5532  0A23  00F2               	movwf	strcpy@from
  5533  0A24  087F               	movf	127,w
  5534  0A25  00F3               	movwf	strcpy@from+1
  5535  0A26  3188  202B  318A   	fcall	_strcpy
  5536                           
  5537                           ;nrf24l01.c: 179: TXPacket.packetData = txPacket->packetData;
  5538  0A29  0020               	movlb	0	; select bank0
  5539  0A2A  0828               	movf	nrf24l01SendPacket@txPacket,w
  5540  0A2B  0084               	movwf	4
  5541  0A2C  0829               	movf	nrf24l01SendPacket@txPacket+1,w
  5542  0A2D  0085               	movwf	5
  5543  0A2E  0800               	movf	0,w
  5544  0A2F  00FF               	movwf	127
  5545  0A30  087F               	movf	127,w
  5546  0A31  0023               	movlb	3	; select bank3
  5547  0A32  00C1               	movwf	_TXPacket^(0+384)
  5548                           
  5549                           ;nrf24l01.c: 181: status.TX = 1;
  5550  0A33  3001               	movlw	1
  5551  0A34  00FF               	movwf	127
  5552  0A35  087F               	movf	127,w
  5553  0A36  0020               	movlb	0	; select bank0
  5554  0A37  00E4               	movwf	_status	;volatile
  5555  0A38                     l4266:	
  5556                           ;nrf24l01.c: 183: while (status.TX != 0){
  5557                           
  5558  0A38  0020               	movlb	0	; select bank0
  5559  0A39  0864               	movf	_status,w	;volatile
  5560  0A3A  1903               	btfsc	3,2
  5561  0A3B  0008               	return
  5562                           
  5563                           ;nrf24l01.c: 184: sleepMs(1);
  5564  0A3C  3001               	movlw	1
  5565  0A3D  00F0               	movwf	sleepMs@milliseconds
  5566  0A3E  3000               	movlw	0
  5567  0A3F  00F1               	movwf	sleepMs@milliseconds+1
  5568  0A40  3189  2140  318A   	fcall	_sleepMs
  5569                           
  5570                           ;nrf24l01.c: 185: nrf24l01Service();
  5571  0A43  318E  26B2  318A   	fcall	_nrf24l01Service
  5572  0A46  2A38               	goto	l4266
  5573  0A47                     __end_of_nrf24l01SendPacket:	
  5574                           
  5575                           	psect	text14
  5576  082B                     __ptext14:	
  5577 ;; *************** function _strcpy *****************
  5578 ;; Defined at:
  5579 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  5580 ;; Parameters:    Size  Location     Type
  5581 ;;  to              2    0[COMMON] PTR unsigned char 
  5582 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5583 ;;  from            2    2[COMMON] PTR const unsigned char 
  5584 ;;		 -> romDataMap.name(16), packet.Message(32), packet.Message(32), main@packet(33), 
  5585 ;;		 -> STR_7(4), loop@packet(33), romDataMap(28), 
  5586 ;; Auto vars:     Size  Location     Type
  5587 ;;  cp              2    6[BANK0 ] PTR unsigned char 
  5588 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5589 ;; Return value:  Size  Location     Type
  5590 ;;                  2    0[COMMON] PTR unsigned char 
  5591 ;; Registers used:
  5592 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5593 ;; Tracked objects:
  5594 ;;		On entry : 0/0
  5595 ;;		On exit  : 0/0
  5596 ;;		Unchanged: 0/0
  5597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5598 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5599 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5601 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5602 ;;Total ram usage:        6 bytes
  5603 ;; Hardware stack levels used:    1
  5604 ;; Hardware stack levels required when called:    7
  5605 ;; This function calls:
  5606 ;;		Nothing
  5607 ;; This function is called by:
  5608 ;;		_sendMessage
  5609 ;;		_main
  5610 ;;		_nrf24l01SendPacket
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614                           
  5615                           ;psect for function _strcpy
  5616  082B                     _strcpy:	
  5617                           
  5618                           ;incstack = 0
  5619                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5620  082B  0871               	movf	strcpy@to+1,w
  5621  082C  0020               	movlb	0	; select bank0
  5622  082D  00A7               	movwf	strcpy@cp+1
  5623  082E  0870               	movf	strcpy@to,w
  5624  082F  00A6               	movwf	strcpy@cp
  5625  0830                     l3926:	
  5626  0830  0872               	movf	strcpy@from,w
  5627  0831  0084               	movwf	4
  5628  0832  0873               	movf	strcpy@from+1,w
  5629  0833  0085               	movwf	5
  5630  0834  0800               	movf	0,w	;code access
  5631  0835  00FF               	movwf	127
  5632  0836  0826               	movf	strcpy@cp,w
  5633  0837  0084               	movwf	4
  5634  0838  0827               	movf	strcpy@cp+1,w
  5635  0839  0085               	movwf	5
  5636  083A  087F               	movf	127,w
  5637  083B  0080               	movwf	0
  5638  083C  0800               	movf	0,w
  5639  083D  1903               	btfsc	3,2
  5640  083E  0008               	return
  5641  083F  3001               	movlw	1
  5642  0840  07A6               	addwf	strcpy@cp,f
  5643  0841  3000               	movlw	0
  5644  0842  3DA7               	addwfc	strcpy@cp+1,f
  5645  0843  3001               	movlw	1
  5646  0844  07F2               	addwf	strcpy@from,f
  5647  0845  3000               	movlw	0
  5648  0846  3DF3               	addwfc	strcpy@from+1,f
  5649  0847  2830               	goto	l3926
  5650  0848                     __end_of_strcpy:	
  5651                           ;	Return value of _strcpy is never used
  5652                           
  5653                           
  5654                           	psect	text15
  5655  0EB2                     __ptext15:	
  5656 ;; *************** function _nrf24l01Service *****************
  5657 ;; Defined at:
  5658 ;;		line 272 in file "nrf24l01.c"
  5659 ;; Parameters:    Size  Location     Type
  5660 ;;		None
  5661 ;; Auto vars:     Size  Location     Type
  5662 ;;  width           1  [STACK] unsigned char 
  5663 ;;  i               1  [STACK] unsigned char 
  5664 ;; Return value:  Size  Location     Type
  5665 ;;                  1    wreg      void 
  5666 ;; Registers used:
  5667 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath
  5668 ;; Tracked objects:
  5669 ;;		On entry : 0/0
  5670 ;;		On exit  : 1C/0
  5671 ;;		Unchanged: 0/0
  5672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5677 ;;Total ram usage:        0 bytes
  5678 ;; Hardware stack levels used:    1
  5679 ;; Hardware stack levels required when called:   11
  5680 ;; This function calls:
  5681 ;;		_memset
  5682 ;;		_nrf24l01SPIEnd
  5683 ;;		_nrf24l01SPISend
  5684 ;;		_nrf24l01SPIStart
  5685 ;;		_nrf24l01Send
  5686 ;;		_nrf24l01SendTXBuffer
  5687 ;;		_nrf24l01SetRXMode
  5688 ;;		_strcmp
  5689 ;; This function is called by:
  5690 ;;		_nrf24l01SendPacket
  5691 ;;		_nrf24l01ISR
  5692 ;; This function uses a reentrant model
  5693 ;;
  5694                           
  5695                           
  5696                           ;psect for function _nrf24l01Service
  5697  0EB2                     _nrf24l01Service:	
  5698                           
  5699                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5700  0EB2  3142               	addfsr 1,2
  5701                           
  5702                           ;nrf24l01.c: 274: unsigned char i;;nrf24l01.c: 276: if (status.TX == 1){
  5703                           
  5704                           ;incstack = 0
  5705 ;; hardware stack exceeded
  5706                           ; Regs used in _nrf24l01Service: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+
      +                          9+btemp+11+pclath]
  5707  0EB3  0020               	movlb	0	; select bank0
  5708  0EB4  0364               	decf	_status,w	;volatile
  5709  0EB5  1D03               	btfss	3,2
  5710  0EB6  2EBD               	goto	l4514
  5711                           
  5712                           ;nrf24l01.c: 279: status.TX = 2;
  5713  0EB7  3002               	movlw	2
  5714  0EB8  00E4               	movwf	_status	;volatile
  5715                           
  5716                           ;nrf24l01.c: 280: nrf24l01SendTXBuffer(&TXPacket);
  5717  0EB9  30C1               	movlw	(low (_TXPacket| (0+256)))& (0+255)
  5718  0EBA  318B  23AA  318E   	fcall	_nrf24l01SendTXBuffer
  5719  0EBD                     l4514:	
  5720                           
  5721                           ;nrf24l01.c: 281: };nrf24l01.c: 283: if (status.TX == 4){
  5722  0EBD  3004               	movlw	4
  5723  0EBE  0664               	xorwf	_status,w	;volatile
  5724  0EBF  1D03               	btfss	3,2
  5725  0EC0  2EC7               	goto	l4520
  5726                           
  5727                           ;nrf24l01.c: 284: if (!status.retryCount--){
  5728  0EC1  03E8               	decf	_status+4,f	;volatile
  5729  0EC2  0A68               	incf	_status+4,w	;volatile
  5730  0EC3  1D03               	btfss	3,2
  5731  0EC4  2EC7               	goto	l4520
  5732                           
  5733                           ;nrf24l01.c: 285: status.TX = 1;
  5734  0EC5  3001               	movlw	1
  5735  0EC6  00E4               	movwf	_status	;volatile
  5736  0EC7                     l4520:	
  5737                           
  5738                           ;nrf24l01.c: 286: };nrf24l01.c: 287: };nrf24l01.c: 289: if (status.RX == 1){
  5739  0EC7  0365               	decf	_status+1,w	;volatile
  5740  0EC8  1D03               	btfss	3,2
  5741  0EC9  2F2B               	goto	l4556
  5742                           
  5743                           ;nrf24l01.c: 292: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  5744  0ECA  3020               	movlw	32
  5745  0ECB  001E               	movwi fsr1++
  5746  0ECC  3000               	movlw	0
  5747  0ECD  001E               	movwi fsr1++
  5748  0ECE  3000               	movlw	0
  5749  0ECF  001E               	movwi fsr1++
  5750  0ED0  001E               	movwi fsr1++
  5751  0ED1  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5752  0ED2  001E               	movwi fsr1++
  5753  0ED3  3001               	movlw	1
  5754  0ED4  001E               	movwi fsr1++
  5755  0ED5  318A  2247  318E   	fcall	_memset
  5756                           
  5757                           ;nrf24l01.c: 293: RXPacket.packetData.byte = 0x00;
  5758  0ED8  0023               	movlb	3	; select bank3
  5759  0ED9  01A0               	clrf	_RXPacket^(0+384)
  5760                           
  5761                           ;nrf24l01.c: 296: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  5762  0EDA  3000               	movlw	0
  5763  0EDB  001E               	movwi fsr1++
  5764  0EDC  3060               	movlw	96
  5765  0EDD  3187  27ED  318E   	fcall	_nrf24l01Send
  5766                           
  5767                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5768  0EE0  3FFE               	movwi [-2]fsr1
  5769                           
  5770                           ;nrf24l01.c: 299: PORTAbits.RA0 = 0;
  5771  0EE1  0020               	movlb	0	; select bank0
  5772  0EE2  100C               	bcf	12,0	;volatile
  5773                           
  5774                           ;nrf24l01.c: 302: nrf24l01SPIStart();
  5775  0EE3  3197  27A5  318E   	fcall	_nrf24l01SPIStart
  5776                           
  5777                           ;nrf24l01.c: 305: nrf24l01SPISend((unsigned) 0b01100001);
  5778  0EE6  3061               	movlw	97
  5779  0EE7  3188  2001  318E   	fcall	_nrf24l01SPISend
  5780                           
  5781                           ;nrf24l01.c: 308: RXPacket.packetData.byte = nrf24l01SPISend(0);
  5782  0EEA  3000               	movlw	0
  5783  0EEB  3188  2001  318E   	fcall	_nrf24l01SPISend
  5784  0EEE  0023               	movlb	3	; select bank3
  5785  0EEF  00A0               	movwf	_RXPacket^(0+384)
  5786                           
  5787                           ;nrf24l01.c: 309: width--;
  5788                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5789  0EF0  3F7E               	moviw [-2]fsr1
  5790  0EF1  00F4               	movwf	116
  5791  0EF2  3001               	movlw	1
  5792  0EF3  0274               	subwf	116,w
  5793  0EF4  3FFE               	movwi [-2]fsr1
  5794                           
  5795                           ;nrf24l01.c: 311: for (i = 0; i < width; i++) {
  5796                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5797  0EF5  3000               	movlw	0
  5798  0EF6  3FFF               	movwi [-1]fsr1
  5799  0EF7                     l4544:	
  5800                           
  5801                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5802  0EF7  3F7F               	moviw [-1]fsr1
  5803  0EF8  00FF               	movwf	127
  5804                           
  5805                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5806  0EF9  3F7E               	moviw [-2]fsr1
  5807  0EFA  027F               	subwf	127,w
  5808  0EFB  1803               	btfsc	3,0
  5809  0EFC  2F0C               	goto	l4546
  5810                           
  5811                           ;nrf24l01.c: 313: RXPacket.Message[i] = nrf24l01SPISend(0);
  5812                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5813  0EFD  3F7F               	moviw [-1]fsr1
  5814  0EFE  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5815  0EFF  0084               	movwf	4
  5816  0F00  3001               	movlw	1	; select bank3/4
  5817  0F01  3001               	movlw	1	; select bank3/4
  5818  0F02  0085               	movwf	5
  5819  0F03  3000               	movlw	0
  5820  0F04  3188  2001  318E   	fcall	_nrf24l01SPISend
  5821  0F07  0080               	movwf	0
  5822                           
  5823                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5824  0F08  3F7F               	moviw [-1]fsr1
  5825  0F09  3E01               	addlw	1
  5826  0F0A  3FFF               	movwi [-1]fsr1
  5827  0F0B  2EF7               	goto	l4544
  5828  0F0C                     l4546:	
  5829                           
  5830                           ;nrf24l01.c: 314: };nrf24l01.c: 317: nrf24l01SPIEnd();
  5831  0F0C  3197  279C  318E   	fcall	_nrf24l01SPIEnd
  5832                           
  5833                           ;nrf24l01.c: 320: PORTAbits.RA0 = 1;
  5834  0F0F  0020               	movlb	0	; select bank0
  5835  0F10  140C               	bsf	12,0	;volatile
  5836                           
  5837                           ;nrf24l01.c: 323: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
  5838  0F11  0C66               	rrf	_status+2,w	;volatile
  5839  0F12  3907               	andlw	7
  5840  0F13  00FF               	movwf	127
  5841  0F14  0EFF               	swapf	127,f
  5842  0F15  0023               	movlb	3	; select bank3
  5843  0F16  0820               	movf	_RXPacket^(0+384),w
  5844  0F17  067F               	xorwf	127,w
  5845  0F18  398F               	andlw	-113
  5846  0F19  067F               	xorwf	127,w
  5847  0F1A  00A0               	movwf	_RXPacket^(0+384)
  5848                           
  5849                           ;nrf24l01.c: 326: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  5850  0F1B  3000               	movlw	0
  5851  0F1C  001E               	movwi fsr1++
  5852  0F1D  3009               	movlw	9
  5853  0F1E  3187  27ED  318E   	fcall	_nrf24l01Send
  5854  0F21  00FF               	movwf	127
  5855  0F22  0023               	movlb	3	; select bank3
  5856  0F23  0820               	movf	_RXPacket^(0+384),w
  5857  0F24  067F               	xorwf	127,w
  5858  0F25  39FE               	andlw	-2
  5859  0F26  067F               	xorwf	127,w
  5860  0F27  00A0               	movwf	_RXPacket^(0+384)
  5861                           
  5862                           ;nrf24l01.c: 328: status.RX = 2;
  5863  0F28  3002               	movlw	2
  5864  0F29  0020               	movlb	0	; select bank0
  5865  0F2A  00E5               	movwf	_status+1	;volatile
  5866  0F2B                     l4556:	
  5867                           
  5868                           ;nrf24l01.c: 329: };nrf24l01.c: 331: if (status.RX == 2){
  5869  0F2B  3002               	movlw	2
  5870  0F2C  0665               	xorwf	_status+1,w	;volatile
  5871  0F2D  1D03               	btfss	3,2
  5872  0F2E  2F48               	goto	l4568
  5873                           
  5874                           ;nrf24l01.c: 334: if (RXPacket.packetData.IsACK){
  5875  0F2F  0023               	movlb	3	; select bank3
  5876  0F30  1DA0               	btfss	_RXPacket^(0+384),3
  5877  0F31  2F48               	goto	l4568
  5878                           
  5879                           ;nrf24l01.c: 336: if (status.TX == 4){
  5880  0F32  3004               	movlw	4
  5881  0F33  0020               	movlb	0	; select bank0
  5882  0F34  0664               	xorwf	_status,w	;volatile
  5883  0F35  1D03               	btfss	3,2
  5884  0F36  2F48               	goto	l4568
  5885                           
  5886                           ;nrf24l01.c: 338: if (strcmp(RXPacket.Message, TXPacket.Message) == 0){
  5887  0F37  30C2               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  5888  0F38  001E               	movwi fsr1++
  5889  0F39  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5890  0F3A  3189  2168  318E   	fcall	_strcmp
  5891  0F3D  0874               	movf	116,w
  5892  0F3E  0475               	iorwf	117,w
  5893  0F3F  1D03               	btfss	3,2
  5894  0F40  2F48               	goto	l4568
  5895                           
  5896                           ;nrf24l01.c: 339: status.TX = 0;
  5897  0F41  0020               	movlb	0	; select bank0
  5898  0F42  01E4               	clrf	_status	;volatile
  5899                           
  5900                           ;nrf24l01.c: 340: status.RX = 0;
  5901  0F43  01E5               	clrf	_status+1	;volatile
  5902                           
  5903                           ;nrf24l01.c: 342: nrf24l01SetRXMode(0);
  5904  0F44  3000               	movlw	0
  5905  0F45  318A  22AD  318E   	fcall	_nrf24l01SetRXMode
  5906  0F48                     l4568:	
  5907                           
  5908                           ;nrf24l01.c: 344: };nrf24l01.c: 345: };nrf24l01.c: 346: };nrf24l01.c: 347: };nrf24l01.c:
      +                           349: if (status.RX == 2){
  5909  0F48  3002               	movlw	2
  5910  0F49  0020               	movlb	0	; select bank0
  5911  0F4A  0665               	xorwf	_status+1,w	;volatile
  5912  0F4B  1D03               	btfss	3,2
  5913  0F4C  2F55               	goto	l314
  5914                           
  5915                           ;nrf24l01.c: 351: if (RXPacket.packetData.ACKRequest){
  5916  0F4D  0023               	movlb	3	; select bank3
  5917  0F4E  1D20               	btfss	_RXPacket^(0+384),2
  5918  0F4F  2F55               	goto	l314
  5919                           
  5920                           ;nrf24l01.c: 353: RXPacket.packetData.ACKRequest = 0;
  5921  0F50  1120               	bcf	_RXPacket^(0+384),2
  5922                           
  5923                           ;nrf24l01.c: 354: RXPacket.packetData.IsACK = 1;
  5924  0F51  15A0               	bsf	_RXPacket^(0+384),3
  5925                           
  5926                           ;nrf24l01.c: 356: nrf24l01SendTXBuffer(&RXPacket);
  5927  0F52  30A0               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  5928  0F53  318B  23AA         	fcall	_nrf24l01SendTXBuffer
  5929  0F55                     l314:	
  5930                           
  5931                           ; _nrf24l01Service: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  5932  0F55  317E               	addfsr 1,-2
  5933  0F56  0008               	return
  5934  0F57                     __end_of_nrf24l01Service:	
  5935                           
  5936                           	psect	text16
  5937  0968                     __ptext16:	
  5938 ;; *************** function _strcmp *****************
  5939 ;; Defined at:
  5940 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;  s1              1    wreg     PTR const unsigned char 
  5943 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5944 ;;  s2              1  [STACK] PTR const unsigned char 
  5945 ;;		 -> TXPacket.Message(32), TXPacket(33), 
  5946 ;; Auto vars:     Size  Location     Type
  5947 ;;  s1              1  [STACK] PTR const unsigned char 
  5948 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5949 ;;  r               1  [STACK] char 
  5950 ;; Return value:  Size  Location     Type
  5951 ;;                  2  [STACK] int 
  5952 ;; Registers used:
  5953 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  5954 ;; Tracked objects:
  5955 ;;		On entry : 1F/0
  5956 ;;		On exit  : 0/0
  5957 ;;		Unchanged: 0/0
  5958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5963 ;;Total ram usage:        0 bytes
  5964 ;; Hardware stack levels used:    1
  5965 ;; Hardware stack levels required when called:    7
  5966 ;; This function calls:
  5967 ;;		Nothing
  5968 ;; This function is called by:
  5969 ;;		_nrf24l01Service
  5970 ;; This function uses a reentrant model
  5971 ;;
  5972                           
  5973                           
  5974                           ;psect for function _strcmp
  5975  0968                     _strcmp:	
  5976                           
  5977                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5978  0968  3142               	addfsr 1,2
  5979                           
  5980                           ;incstack = 0
  5981 ;; hardware stack exceeded
  5982                           ; Regs used in _strcmp: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  5983                           ;strcmp@s1 stored from wreg
  5984                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5985  0969  3FFE               	movwi [-2]fsr1
  5986  096A  2978               	goto	l4326
  5987  096B                     l4328:	
  5988                           
  5989                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5990  096B  3F7E               	moviw [-2]fsr1
  5991  096C  0084               	movwf	4
  5992  096D  3001               	movlw	1	; select bank2/3
  5993  096E  0085               	movwf	5
  5994  096F  0800               	movf	0,w
  5995  0970  1903               	btfsc	3,2
  5996  0971  298A               	goto	l4330
  5997                           
  5998                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5999  0972  3F7E               	moviw [-2]fsr1
  6000  0973  3E01               	addlw	1
  6001  0974  3FFE               	movwi [-2]fsr1
  6002                           
  6003                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  6004  0975  3F7D               	moviw [-3]fsr1
  6005  0976  3E01               	addlw	1
  6006  0977  3FFD               	movwi [-3]fsr1
  6007  0978                     l4326:	
  6008                           
  6009                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  6010  0978  3F7D               	moviw [-3]fsr1
  6011  0979  0084               	movwf	4
  6012  097A  3001               	movlw	1	; select bank2/3
  6013  097B  0085               	movwf	5
  6014  097C  0800               	movf	0,w
  6015  097D  00FF               	movwf	127
  6016                           
  6017                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  6018  097E  3F7E               	moviw [-2]fsr1
  6019  097F  0084               	movwf	4
  6020  0980  3001               	movlw	1	; select bank2/3
  6021  0981  0085               	movwf	5
  6022  0982  0800               	movf	0,w
  6023  0983  00F4               	movwf	116
  6024  0984  087F               	movf	127,w
  6025  0985  0274               	subwf	116,w
  6026                           
  6027                           ;stkvar	strcmp@r @ sp[(-2)+1]
  6028  0986  3FFF               	movwi [-1]fsr1
  6029  0987  0889               	movf	9,f
  6030  0988  1903               	btfsc	3,2
  6031  0989  296B               	goto	l4328
  6032  098A                     l4330:	
  6033                           
  6034                           ;stkvar	strcmp@r @ sp[(-2)+1]
  6035  098A  3F7F               	moviw [-1]fsr1
  6036  098B  00F4               	movwf	116
  6037  098C  01F5               	clrf	117
  6038  098D  1BF4               	btfsc	116,7
  6039  098E  03F5               	decf	117,f
  6040                           
  6041                           ; _strcmp: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsiz
      +                          e = 1, vargsize = 0
  6042  098F  317D               	addfsr 1,-3
  6043  0990  0008               	return
  6044  0991                     __end_of_strcmp:	
  6045                           
  6046                           	psect	text17
  6047  0BAA                     __ptext17:	
  6048 ;; *************** function _nrf24l01SendTXBuffer *****************
  6049 ;; Defined at:
  6050 ;;		line 236 in file "nrf24l01.c"
  6051 ;; Parameters:    Size  Location     Type
  6052 ;;  packet          1    wreg     PTR struct .
  6053 ;;		 -> TXPacket(33), RXPacket(33), 
  6054 ;; Auto vars:     Size  Location     Type
  6055 ;;  packet          1  [STACK] PTR struct .
  6056 ;;		 -> TXPacket(33), RXPacket(33), 
  6057 ;;  i               1  [STACK] unsigned char 
  6058 ;;  width           1  [STACK] unsigned char 
  6059 ;; Return value:  Size  Location     Type
  6060 ;;                  1    wreg      void 
  6061 ;; Registers used:
  6062 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11, pclath
  6063 ;; Tracked objects:
  6064 ;;		On entry : 1C/0
  6065 ;;		On exit  : 1F/0
  6066 ;;		Unchanged: 0/0
  6067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6072 ;;Total ram usage:        0 bytes
  6073 ;; Hardware stack levels used:    1
  6074 ;; Hardware stack levels required when called:   10
  6075 ;; This function calls:
  6076 ;;		_nrf24l01SPIEnd
  6077 ;;		_nrf24l01SPISend
  6078 ;;		_nrf24l01SPIStart
  6079 ;;		_nrf24l01SetRXMode
  6080 ;;		_strlen
  6081 ;; This function is called by:
  6082 ;;		_nrf24l01Service
  6083 ;; This function uses a reentrant model
  6084 ;;
  6085                           
  6086                           
  6087                           ;psect for function _nrf24l01SendTXBuffer
  6088  0BAA                     _nrf24l01SendTXBuffer:	
  6089                           
  6090                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6091  0BAA  3143               	addfsr 1,3
  6092                           
  6093                           ;incstack = 0
  6094 ;; hardware stack exceeded
  6095                           ; Regs used in _nrf24l01SendTXBuffer: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11+
      +                          pclath]
  6096                           ;nrf24l01SendTXBuffer@packet stored from wreg
  6097                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  6098  0BAB  3FFD               	movwi [-3]fsr1
  6099                           
  6100                           ;nrf24l01.c: 238: lastTXPacket = packet;
  6101                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  6102  0BAC  3F7D               	moviw [-3]fsr1
  6103  0BAD  0020               	movlb	0	; select bank0
  6104  0BAE  00E9               	movwf	_lastTXPacket
  6105                           
  6106                           ;nrf24l01.c: 240: unsigned char i;;nrf24l01.c: 243: nrf24l01SetRXMode(0);
  6107  0BAF  3000               	movlw	0
  6108  0BB0  318A  22AD  318B   	fcall	_nrf24l01SetRXMode
  6109                           
  6110                           ;nrf24l01.c: 246: nrf24l01SPIStart();
  6111  0BB3  3197  27A5  318B   	fcall	_nrf24l01SPIStart
  6112                           
  6113                           ;nrf24l01.c: 249: nrf24l01SPISend((unsigned) 0b10110000);
  6114  0BB6  30B0               	movlw	176
  6115  0BB7  3188  2001  318B   	fcall	_nrf24l01SPISend
  6116                           
  6117                           ;nrf24l01.c: 251: nrf24l01SPISend(lastTXPacket->packetData.byte);
  6118  0BBA  0020               	movlb	0	; select bank0
  6119  0BBB  0869               	movf	_lastTXPacket,w
  6120  0BBC  0084               	movwf	4
  6121  0BBD  3001               	movlw	1	; select bank2/3
  6122  0BBE  3001               	movlw	1	; select bank2/3
  6123  0BBF  0085               	movwf	5
  6124  0BC0  0800               	movf	0,w
  6125  0BC1  3188  2001  318B   	fcall	_nrf24l01SPISend
  6126                           
  6127                           ;nrf24l01.c: 255: unsigned char width = strlen(lastTXPacket->Message);
  6128  0BC4  0020               	movlb	0	; select bank0
  6129  0BC5  0869               	movf	_lastTXPacket,w
  6130  0BC6  3E01               	addlw	1
  6131  0BC7  3188  2084  318B   	fcall	_strlen
  6132  0BCA  0874               	movf	116,w
  6133                           
  6134                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  6135  0BCB  3FFF               	movwi [-1]fsr1
  6136                           
  6137                           ;nrf24l01.c: 257: for (i = 0; i < width; i++) {
  6138                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6139  0BCC  3000               	movlw	0
  6140  0BCD  3FFE               	movwi [-2]fsr1
  6141  0BCE                     l4310:	
  6142                           
  6143                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6144  0BCE  3F7E               	moviw [-2]fsr1
  6145  0BCF  00FF               	movwf	127
  6146                           
  6147                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  6148  0BD0  3F7F               	moviw [-1]fsr1
  6149  0BD1  027F               	subwf	127,w
  6150  0BD2  1803               	btfsc	3,0
  6151  0BD3  2BE5               	goto	l4312
  6152                           
  6153                           ;nrf24l01.c: 258: nrf24l01SPISend(lastTXPacket->Message[i]);
  6154                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6155  0BD4  3F7E               	moviw [-2]fsr1
  6156  0BD5  0020               	movlb	0	; select bank0
  6157  0BD6  0769               	addwf	_lastTXPacket,w
  6158  0BD7  00FF               	movwf	127
  6159  0BD8  0A7F               	incf	127,w
  6160  0BD9  0084               	movwf	4
  6161  0BDA  3001               	movlw	1	; select bank2/3
  6162  0BDB  3001               	movlw	1	; select bank2/3
  6163  0BDC  0085               	movwf	5
  6164  0BDD  0800               	movf	0,w
  6165  0BDE  3188  2001  318B   	fcall	_nrf24l01SPISend
  6166                           
  6167                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6168  0BE1  3F7E               	moviw [-2]fsr1
  6169  0BE2  3E01               	addlw	1
  6170  0BE3  3FFE               	movwi [-2]fsr1
  6171  0BE4  2BCE               	goto	l4310
  6172  0BE5                     l4312:	
  6173                           
  6174                           ;nrf24l01.c: 259: };nrf24l01.c: 262: nrf24l01SPIEnd();
  6175  0BE5  3197  279C  318B   	fcall	_nrf24l01SPIEnd
  6176                           
  6177                           ;nrf24l01.c: 265: PORTAbits.RA0 = 1;
  6178  0BE8  0020               	movlb	0	; select bank0
  6179  0BE9  140C               	bsf	12,0	;volatile
  6180                           
  6181                           ;nrf24l01.c: 266: _delay((unsigned long)((12)*(32000000/4000000.0)));
  6182  0BEA  3020               	movlw	32
  6183  0BEB                     u5337:	
  6184  0BEB  0B89               	decfsz	9,f
  6185  0BEC  2BEB               	goto	u5337
  6186                           
  6187                           ;nrf24l01.c: 267: PORTAbits.RA0 = 0;
  6188  0BED  0020               	movlb	0	; select bank0
  6189  0BEE  100C               	bcf	12,0	;volatile
  6190                           
  6191                           ; _nrf24l01SendTXBuffer: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 0, argsize = 0, vargsize = 0
  6192  0BEF  317D               	addfsr 1,-3
  6193  0BF0  0008               	return
  6194  0BF1                     __end_of_nrf24l01SendTXBuffer:	
  6195                           
  6196                           	psect	text18
  6197  0884                     __ptext18:	
  6198 ;; *************** function _strlen *****************
  6199 ;; Defined at:
  6200 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  6201 ;; Parameters:    Size  Location     Type
  6202 ;;  s               1    wreg     PTR const unsigned char 
  6203 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6204 ;;		 -> RXPacket(33), romDataMap(28), 
  6205 ;; Auto vars:     Size  Location     Type
  6206 ;;  s               1  [STACK] PTR const unsigned char 
  6207 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6208 ;;		 -> RXPacket(33), romDataMap(28), 
  6209 ;;  cp              1  [STACK] PTR const unsigned char 
  6210 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6211 ;;		 -> RXPacket(33), romDataMap(28), 
  6212 ;; Return value:  Size  Location     Type
  6213 ;;                  2  [STACK] unsigned int 
  6214 ;; Registers used:
  6215 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  6216 ;; Tracked objects:
  6217 ;;		On entry : 1F/0
  6218 ;;		On exit  : 0/0
  6219 ;;		Unchanged: 0/0
  6220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6225 ;;Total ram usage:        0 bytes
  6226 ;; Hardware stack levels used:    1
  6227 ;; Hardware stack levels required when called:    7
  6228 ;; This function calls:
  6229 ;;		Nothing
  6230 ;; This function is called by:
  6231 ;;		_nrf24l01GetPipe
  6232 ;;		_nrf24l01SendTXBuffer
  6233 ;; This function uses a reentrant model
  6234 ;;
  6235                           
  6236                           
  6237                           ;psect for function _strlen
  6238  0884                     _strlen:	
  6239                           
  6240                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6241  0884  3142               	addfsr 1,2
  6242                           
  6243                           ;incstack = 0
  6244 ;; hardware stack exceeded
  6245                           ; Regs used in _strlen: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  6246                           ;strlen@s stored from wreg
  6247                           ;stkvar	strlen@s @ sp[(-2)+0]
  6248  0885  3FFE               	movwi [-2]fsr1
  6249                           
  6250                           ;stkvar	strlen@s @ sp[(-2)+0]
  6251  0886  0806               	movf	6,w
  6252  0887  0084               	movwf	4
  6253  0888  0807               	movf	7,w
  6254  0889  0085               	movwf	5
  6255  088A  313E               	addfsr 0,-2
  6256                           
  6257                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6258  088B  3F00               	moviw [0]fsr0
  6259  088C  3FFF               	movwi [-1]fsr1
  6260  088D                     l3932:	
  6261                           
  6262                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6263  088D  3F7F               	moviw [-1]fsr1
  6264  088E  0084               	movwf	4
  6265  088F  3001               	movlw	1	; select bank2/3
  6266  0890  0085               	movwf	5
  6267  0891  0800               	movf	0,w
  6268  0892  1903               	btfsc	3,2
  6269  0893  2898               	goto	l3934
  6270                           
  6271                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6272  0894  3F7F               	moviw [-1]fsr1
  6273  0895  3E01               	addlw	1
  6274  0896  3FFF               	movwi [-1]fsr1
  6275  0897  288D               	goto	l3932
  6276  0898                     l3934:	
  6277                           
  6278                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6279  0898  3F7F               	moviw [-1]fsr1
  6280  0899  00FF               	movwf	127
  6281                           
  6282                           ;stkvar	strlen@s @ sp[(-2)+0]
  6283  089A  3F7E               	moviw [-2]fsr1
  6284  089B  027F               	subwf	127,w
  6285  089C  00F4               	movwf	116
  6286  089D  01F5               	clrf	117
  6287  089E  1BF4               	btfsc	116,7
  6288  089F  03F5               	decf	117,f
  6289                           
  6290                           ; _strlen: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsiz
      +                          e = 0, vargsize = 0
  6291  08A0  317E               	addfsr 1,-2
  6292  08A1  0008               	return
  6293  08A2                     __end_of_strlen:	
  6294                           
  6295                           	psect	text19
  6296  0AAD                     __ptext19:	
  6297 ;; *************** function _nrf24l01SetRXMode *****************
  6298 ;; Defined at:
  6299 ;;		line 50 in file "nrf24l01.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;  rxMode          1    wreg     unsigned char 
  6302 ;; Auto vars:     Size  Location     Type
  6303 ;;  rxMode          1  [STACK] unsigned char 
  6304 ;; Return value:  Size  Location     Type
  6305 ;;                  1    wreg      void 
  6306 ;; Registers used:
  6307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+11, pclath
  6308 ;; Tracked objects:
  6309 ;;		On entry : 0/0
  6310 ;;		On exit  : 0/0
  6311 ;;		Unchanged: 0/0
  6312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6317 ;;Total ram usage:        0 bytes
  6318 ;; Hardware stack levels used:    1
  6319 ;; Hardware stack levels required when called:    9
  6320 ;; This function calls:
  6321 ;;		_nrf24l01Send
  6322 ;; This function is called by:
  6323 ;;		_sleepListren
  6324 ;;		_nrf24l01ISR
  6325 ;;		_nrf24l01SendTXBuffer
  6326 ;;		_nrf24l01Service
  6327 ;; This function uses a reentrant model
  6328 ;;
  6329                           
  6330                           
  6331                           ;psect for function _nrf24l01SetRXMode
  6332  0AAD                     _nrf24l01SetRXMode:	
  6333                           
  6334                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6335  0AAD  3141               	addfsr 1,1
  6336                           
  6337                           ;incstack = 0
  6338 ;; hardware stack exceeded
  6339                           ; Regs used in _nrf24l01SetRXMode: [wreg+fsr1l+fsr1h+status,2-btemp+0+btemp+11+pclath]
  6340                           ;nrf24l01SetRXMode@rxMode stored from wreg
  6341                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6342  0AAE  3FFF               	movwi [-1]fsr1
  6343                           
  6344                           ;nrf24l01.c: 53: if (rxMode){
  6345                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6346  0AAF  3F7F               	moviw [-1]fsr1
  6347  0AB0  1903               	btfsc	3,2
  6348  0AB1  2AB7               	goto	l3898
  6349                           
  6350                           ;nrf24l01.c: 54: if (status.TX == 2){
  6351  0AB2  3002               	movlw	2
  6352  0AB3  0020               	movlb	0	; select bank0
  6353  0AB4  0664               	xorwf	_status,w	;volatile
  6354  0AB5  1903               	btfsc	3,2
  6355  0AB6  2AE6               	goto	l259
  6356  0AB7                     l3898:	
  6357                           
  6358                           ;nrf24l01.c: 56: };nrf24l01.c: 57: };nrf24l01.c: 60: if (!rxMode){
  6359                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6360  0AB7  3F7F               	moviw [-1]fsr1
  6361  0AB8  1D03               	btfss	3,2
  6362  0AB9  2ABF               	goto	l3904
  6363                           
  6364                           ;nrf24l01.c: 61: if (status.TX == 4){
  6365  0ABA  3004               	movlw	4
  6366  0ABB  0020               	movlb	0	; select bank0
  6367  0ABC  0664               	xorwf	_status,w	;volatile
  6368  0ABD  1903               	btfsc	3,2
  6369  0ABE  2AE6               	goto	l259
  6370  0ABF                     l3904:	
  6371                           
  6372                           ;nrf24l01.c: 63: };nrf24l01.c: 64: };nrf24l01.c: 70: if (status.configRegister.PRIM_RX !
      +                          = rxMode){
  6373                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6374  0ABF  3F7F               	moviw [-1]fsr1
  6375  0AC0  00FF               	movwf	127
  6376  0AC1  0020               	movlb	0	; select bank0
  6377  0AC2  0867               	movf	_status+3,w	;volatile
  6378  0AC3  3901               	andlw	1
  6379  0AC4  067F               	xorwf	127,w
  6380  0AC5  1903               	skipnz
  6381  0AC6  2AE6               	goto	l259
  6382                           
  6383                           ;nrf24l01.c: 73: PORTAbits.RA0 = 0;
  6384  0AC7  100C               	bcf	12,0	;volatile
  6385                           
  6386                           ;nrf24l01.c: 74: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6387  0AC8  30C0               	movlw	192
  6388  0AC9                     u5347:	
  6389  0AC9  3200               	nop2
  6390  0ACA  0B89               	decfsz	9,f
  6391  0ACB  2AC9               	goto	u5347
  6392                           
  6393                           ;nrf24l01.c: 77: status.configRegister.PRIM_RX = rxMode;
  6394                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6395  0ACC  3F7F               	moviw [-1]fsr1
  6396  0ACD  3901               	andlw	1
  6397  0ACE  0020               	movlb	0	; select bank0
  6398  0ACF  1D03               	skipz
  6399  0AD0  1467               	bsf	_status+3,0	;volatile
  6400  0AD1  1903               	skipnz
  6401  0AD2  1067               	bcf	_status+3,0	;volatile
  6402                           
  6403                           ;nrf24l01.c: 78: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configRegi
      +                          ster.byte);
  6404  0AD3  0867               	movf	_status+3,w	;volatile
  6405  0AD4  001E               	movwi fsr1++
  6406  0AD5  3020               	movlw	32
  6407  0AD6  3187  27ED  318A   	fcall	_nrf24l01Send
  6408                           
  6409                           ;nrf24l01.c: 81: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6410  0AD9  30C0               	movlw	192
  6411  0ADA                     u5357:	
  6412  0ADA  3200               	nop2
  6413  0ADB  0B89               	decfsz	9,f
  6414  0ADC  2ADA               	goto	u5357
  6415                           
  6416                           ;nrf24l01.c: 84: if (rxMode){
  6417                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6418  0ADD  3F7F               	moviw [-1]fsr1
  6419  0ADE  1903               	btfsc	3,2
  6420  0ADF  2AE6               	goto	l259
  6421                           
  6422                           ;nrf24l01.c: 85: PORTAbits.RA0 = 1;
  6423  0AE0  0020               	movlb	0	; select bank0
  6424  0AE1  140C               	bsf	12,0	;volatile
  6425                           
  6426                           ;nrf24l01.c: 86: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6427  0AE2  30C0               	movlw	192
  6428  0AE3                     u5367:	
  6429  0AE3  3200               	nop2
  6430  0AE4  0B89               	decfsz	9,f
  6431  0AE5  2AE3               	goto	u5367
  6432  0AE6                     l259:	
  6433                           
  6434                           ; _nrf24l01SetRXMode: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
  6435  0AE6  317F               	addfsr 1,-1
  6436  0AE7  0008               	return
  6437  0AE8                     __end_of_nrf24l01SetRXMode:	
  6438                           
  6439                           	psect	text20
  6440  07ED                     __ptext20:	
  6441 ;; *************** function _nrf24l01Send *****************
  6442 ;; Defined at:
  6443 ;;		line 11 in file "nrf24l01.c"
  6444 ;; Parameters:    Size  Location     Type
  6445 ;;  command         1    wreg     unsigned char 
  6446 ;;  data            1  [STACK] unsigned char 
  6447 ;; Auto vars:     Size  Location     Type
  6448 ;;  command         1  [STACK] unsigned char 
  6449 ;; Return value:  Size  Location     Type
  6450 ;;                  1    wreg      unsigned char 
  6451 ;; Registers used:
  6452 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath
  6453 ;; Tracked objects:
  6454 ;;		On entry : 0/0
  6455 ;;		On exit  : 1F/1
  6456 ;;		Unchanged: 0/0
  6457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6462 ;;Total ram usage:        0 bytes
  6463 ;; Hardware stack levels used:    1
  6464 ;; Hardware stack levels required when called:    8
  6465 ;; This function calls:
  6466 ;;		_nrf24l01SPIEnd
  6467 ;;		_nrf24l01SPISend
  6468 ;;		_nrf24l01SPIStart
  6469 ;; This function is called by:
  6470 ;;		_nrf24l01SetRXMode
  6471 ;;		_nrf24l01SetRXPipe
  6472 ;;		_nrf24l01ISR
  6473 ;;		_nrf24l01Service
  6474 ;;		_nrf24l01InitRegisters
  6475 ;;		_nrf24l01ChangeTXPower
  6476 ;; This function uses a reentrant model
  6477 ;;
  6478                           
  6479                           
  6480                           ;psect for function _nrf24l01Send
  6481  07ED                     _nrf24l01Send:	
  6482                           
  6483                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6484  07ED  3141               	addfsr 1,1
  6485                           
  6486                           ;incstack = 0
  6487 ;; hardware stack exceeded
  6488                           ; Regs used in _nrf24l01Send: [wreg+fsr1l+fsr1h+status,2+status,0+pclath]
  6489                           ;nrf24l01Send@command stored from wreg
  6490                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6491  07EE  3FFF               	movwi [-1]fsr1
  6492                           
  6493                           ;nrf24l01.c: 14: nrf24l01SPIStart();
  6494  07EF  3197  27A5  3187   	fcall	_nrf24l01SPIStart
  6495                           
  6496                           ;nrf24l01.c: 17: nrf24l01SPISend(command);
  6497                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6498  07F2  3F7F               	moviw [-1]fsr1
  6499  07F3  3188  2001  3187   	fcall	_nrf24l01SPISend
  6500                           
  6501                           ;nrf24l01.c: 20: data = nrf24l01SPISend(data);
  6502                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6503  07F6  3F7E               	moviw [-2]fsr1
  6504  07F7  3188  2001  3187   	fcall	_nrf24l01SPISend
  6505                           
  6506                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6507  07FA  3FFE               	movwi [-2]fsr1
  6508                           
  6509                           ;nrf24l01.c: 23: nrf24l01SPIEnd();
  6510  07FB  3197  279C         	fcall	_nrf24l01SPIEnd
  6511                           
  6512                           ;nrf24l01.c: 25: return data;
  6513                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6514  07FD  3F7E               	moviw [-2]fsr1
  6515                           
  6516                           ; _nrf24l01Send: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, 
      +                          argsize = 1, vargsize = 0
  6517  07FE  317E               	addfsr 1,-2
  6518  07FF  0008               	return
  6519  0800                     __end_of_nrf24l01Send:	
  6520                           
  6521                           	psect	text21
  6522  17A5                     __ptext21:	
  6523 ;; *************** function _nrf24l01SPIStart *****************
  6524 ;; Defined at:
  6525 ;;		line 68 in file "interface.c"
  6526 ;; Parameters:    Size  Location     Type
  6527 ;;		None
  6528 ;; Auto vars:     Size  Location     Type
  6529 ;;		None
  6530 ;; Return value:  Size  Location     Type
  6531 ;;                  1    wreg      void 
  6532 ;; Registers used:
  6533 ;;		wreg
  6534 ;; Tracked objects:
  6535 ;;		On entry : 0/0
  6536 ;;		On exit  : 0/0
  6537 ;;		Unchanged: 0/0
  6538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6543 ;;Total ram usage:        0 bytes
  6544 ;; Hardware stack levels used:    1
  6545 ;; Hardware stack levels required when called:    7
  6546 ;; This function calls:
  6547 ;;		Nothing
  6548 ;; This function is called by:
  6549 ;;		_nrf24l01Send
  6550 ;;		_nrf24l01SetTXPipe
  6551 ;;		_nrf24l01SendTXBuffer
  6552 ;;		_nrf24l01Service
  6553 ;;		_nrf24l01InitRegisters
  6554 ;; This function uses a reentrant model
  6555 ;;
  6556                           
  6557                           
  6558                           ;psect for function _nrf24l01SPIStart
  6559  17A5                     _nrf24l01SPIStart:	
  6560                           
  6561                           ;interface.c: 69: PIE0bits.INTE = 0;
  6562                           
  6563                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6564                           ;incstack = 0
  6565 ;; hardware stack exceeded
  6566                           ; Regs used in _nrf24l01SPIStart: [wreg]
  6567  17A5  0021               	movlb	1	; select bank1
  6568  17A6  1010               	bcf	16,0	;volatile
  6569                           
  6570                           ;interface.c: 70: PORTAbits.RA1 = 0;
  6571  17A7  0020               	movlb	0	; select bank0
  6572  17A8  108C               	bcf	12,1	;volatile
  6573                           
  6574                           ;interface.c: 71: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6575  17A9  301A               	movlw	26
  6576  17AA                     u5377:	
  6577  17AA  0B89               	decfsz	9,f
  6578  17AB  2FAA               	goto	u5377
  6579  17AC  3200               	nop2
  6580                           
  6581                           ; _nrf24l01SPIStart: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           0, argsize = 0, vargsize = 0
  6582  17AD  0008               	return
  6583  17AE                     __end_of_nrf24l01SPIStart:	
  6584                           
  6585                           	psect	text22
  6586  0801                     __ptext22:	
  6587 ;; *************** function _nrf24l01SPISend *****************
  6588 ;; Defined at:
  6589 ;;		line 56 in file "interface.c"
  6590 ;; Parameters:    Size  Location     Type
  6591 ;;  data            1    wreg     unsigned char 
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;  data            1  [STACK] unsigned char 
  6594 ;; Return value:  Size  Location     Type
  6595 ;;                  1    wreg      unsigned char 
  6596 ;; Registers used:
  6597 ;;		wreg, fsr1l, fsr1h
  6598 ;; Tracked objects:
  6599 ;;		On entry : 0/0
  6600 ;;		On exit  : 1F/4
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6607 ;;Total ram usage:        0 bytes
  6608 ;; Hardware stack levels used:    1
  6609 ;; Hardware stack levels required when called:    7
  6610 ;; This function calls:
  6611 ;;		Nothing
  6612 ;; This function is called by:
  6613 ;;		_nrf24l01Send
  6614 ;;		_nrf24l01SetTXPipe
  6615 ;;		_nrf24l01SendTXBuffer
  6616 ;;		_nrf24l01Service
  6617 ;;		_nrf24l01InitRegisters
  6618 ;; This function uses a reentrant model
  6619 ;;
  6620                           
  6621                           
  6622                           ;psect for function _nrf24l01SPISend
  6623  0801                     _nrf24l01SPISend:	
  6624                           
  6625                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6626  0801  3141               	addfsr 1,1
  6627                           
  6628                           ;incstack = 0
  6629 ;; hardware stack exceeded
  6630                           ; Regs used in _nrf24l01SPISend: [wreg+fsr1l+fsr1h]
  6631                           ;nrf24l01SPISend@data stored from wreg
  6632                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6633  0802  3FFF               	movwi [-1]fsr1
  6634                           
  6635                           ;interface.c: 57: SSP1BUF = data;
  6636                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6637  0803  3F7F               	moviw [-1]fsr1
  6638  0804  0024               	movlb	4	; select bank4
  6639  0805  0091               	movwf	17	;volatile
  6640                           
  6641                           ;interface.c: 59: PORTCbits.RC4 = 1;
  6642  0806  0020               	movlb	0	; select bank0
  6643  0807  160E               	bsf	14,4	;volatile
  6644  0808                     l47:	
  6645                           ;interface.c: 61: while (!SSP1STATbits.BF){
  6646                           
  6647  0808  0024               	movlb	4	; select bank4
  6648  0809  1814               	btfsc	20,0	;volatile
  6649  080A  280D               	goto	l3660
  6650                           
  6651                           ;interface.c: 62: __nop();
  6652  080B  0000               	nop
  6653  080C  2808               	goto	l47
  6654  080D                     l3660:	
  6655                           
  6656                           ;interface.c: 63: };interface.c: 65: return SSP1BUF;
  6657  080D  0811               	movf	17,w	;volatile
  6658                           
  6659                           ; _nrf24l01SPISend: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  6660  080E  317F               	addfsr 1,-1
  6661  080F  0008               	return
  6662  0810                     __end_of_nrf24l01SPISend:	
  6663                           
  6664                           	psect	text23
  6665  179C                     __ptext23:	
  6666 ;; *************** function _nrf24l01SPIEnd *****************
  6667 ;; Defined at:
  6668 ;;		line 74 in file "interface.c"
  6669 ;; Parameters:    Size  Location     Type
  6670 ;;		None
  6671 ;; Auto vars:     Size  Location     Type
  6672 ;;		None
  6673 ;; Return value:  Size  Location     Type
  6674 ;;                  1    wreg      void 
  6675 ;; Registers used:
  6676 ;;		wreg
  6677 ;; Tracked objects:
  6678 ;;		On entry : 0/0
  6679 ;;		On exit  : 1F/1
  6680 ;;		Unchanged: 0/0
  6681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6686 ;;Total ram usage:        0 bytes
  6687 ;; Hardware stack levels used:    1
  6688 ;; Hardware stack levels required when called:    7
  6689 ;; This function calls:
  6690 ;;		Nothing
  6691 ;; This function is called by:
  6692 ;;		_nrf24l01Send
  6693 ;;		_nrf24l01SetTXPipe
  6694 ;;		_nrf24l01SendTXBuffer
  6695 ;;		_nrf24l01Service
  6696 ;;		_nrf24l01InitRegisters
  6697 ;; This function uses a reentrant model
  6698 ;;
  6699                           
  6700                           
  6701                           ;psect for function _nrf24l01SPIEnd
  6702  179C                     _nrf24l01SPIEnd:	
  6703                           
  6704                           ;interface.c: 75: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6705                           
  6706                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6707                           ;incstack = 0
  6708 ;; hardware stack exceeded
  6709                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  6710  179C  301A               	movlw	26
  6711  179D                     u5387:	
  6712  179D  0B89               	decfsz	9,f
  6713  179E  2F9D               	goto	u5387
  6714  179F  3200               	nop2
  6715                           
  6716                           ;interface.c: 76: PORTAbits.RA1 = 1;
  6717  17A0  0020               	movlb	0	; select bank0
  6718  17A1  148C               	bsf	12,1	;volatile
  6719                           
  6720                           ;interface.c: 77: PIE0bits.INTE = 1;
  6721  17A2  0021               	movlb	1	; select bank1
  6722  17A3  1410               	bsf	16,0	;volatile
  6723                           
  6724                           ; _nrf24l01SPIEnd: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  6725  17A4  0008               	return
  6726  17A5                     __end_of_nrf24l01SPIEnd:	
  6727                           
  6728                           	psect	text24
  6729  0A47                     __ptext24:	
  6730 ;; *************** function _memset *****************
  6731 ;; Defined at:
  6732 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6733 ;; Parameters:    Size  Location     Type
  6734 ;;  p1              2  [STACK] PTR void 
  6735 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6736 ;;  c               2  [STACK] int 
  6737 ;;  n               2  [STACK] unsigned int 
  6738 ;; Auto vars:     Size  Location     Type
  6739 ;;  p               2  [STACK] PTR unsigned char 
  6740 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6741 ;; Return value:  Size  Location     Type
  6742 ;;                  2  [STACK] PTR void 
  6743 ;; Registers used:
  6744 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+8, btemp+9, btemp+11
  6745 ;; Tracked objects:
  6746 ;;		On entry : 1E/1
  6747 ;;		On exit  : 0/0
  6748 ;;		Unchanged: 0/0
  6749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6754 ;;Total ram usage:        0 bytes
  6755 ;; Hardware stack levels used:    1
  6756 ;; Hardware stack levels required when called:    7
  6757 ;; This function calls:
  6758 ;;		Nothing
  6759 ;; This function is called by:
  6760 ;;		_sendMessage
  6761 ;;		_nrf24l01Service
  6762 ;; This function uses a reentrant model
  6763 ;;
  6764                           
  6765                           
  6766                           ;psect for function _memset
  6767  0A47                     _memset:	
  6768                           
  6769                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6770  0A47  3142               	addfsr 1,2
  6771                           
  6772                           ;stkvar	memset@p1 @ sp[(-2)+-2]
  6773                           
  6774                           ;incstack = 0
  6775 ;; hardware stack exceeded
  6776                           ; Regs used in _memset: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+8+btemp+9+btemp+1
      +                          1]
  6777  0A48  0806               	movf	6,w
  6778  0A49  0084               	movwf	4
  6779  0A4A  0807               	movf	7,w
  6780  0A4B  0085               	movwf	5
  6781  0A4C  313C               	addfsr 0,-4
  6782                           
  6783                           ;stkvar	memset@p @ sp[(-2)+0]
  6784  0A4D  3F00               	moviw [0]fsr0
  6785  0A4E  3FFE               	movwi [-2]fsr1
  6786  0A4F  3F01               	moviw [1]fsr0
  6787  0A50  3FFF               	movwi [-1]fsr1
  6788  0A51                     l4222:	
  6789                           
  6790                           ;stkvar	memset@n @ sp[(-2)+-6]
  6791  0A51  3F78               	moviw [-8]fsr1
  6792  0A52  00F4               	movwf	116
  6793  0A53  3001               	movlw	1
  6794  0A54  0274               	subwf	116,w
  6795  0A55  3FF8               	movwi [-8]fsr1
  6796  0A56  3F79               	moviw [-7]fsr1
  6797  0A57  00F4               	movwf	116
  6798  0A58  3000               	movlw	0
  6799  0A59  3B74               	subwfb	116,w
  6800  0A5A  3FF9               	movwi [-7]fsr1
  6801  0A5B  3F78               	moviw [-8]fsr1
  6802  0A5C  3AFF               	xorlw	255
  6803  0A5D  00F4               	movwf	116
  6804  0A5E  3F79               	moviw [-7]fsr1
  6805  0A5F  3AFF               	xorlw	255
  6806  0A60  04F4               	iorwf	116,f
  6807  0A61  1903               	btfsc	3,2
  6808  0A62  2A77               	goto	l957
  6809                           
  6810                           ;stkvar	memset@c @ sp[(-2)+-4]
  6811  0A63  3F7A               	moviw [-6]fsr1
  6812  0A64  00FF               	movwf	127
  6813                           
  6814                           ;stkvar	memset@p @ sp[(-2)+0]
  6815  0A65  3F7E               	moviw [-2]fsr1
  6816  0A66  00FC               	movwf	124
  6817  0A67  3F7F               	moviw [-1]fsr1
  6818  0A68  00FD               	movwf	125
  6819  0A69  087C               	movf	124,w
  6820  0A6A  0084               	movwf	4
  6821  0A6B  087D               	movf	125,w
  6822  0A6C  0085               	movwf	5
  6823  0A6D  087F               	movf	127,w
  6824  0A6E  0080               	movwf	0
  6825                           
  6826                           ;stkvar	memset@p @ sp[(-2)+0]
  6827  0A6F  3F7E               	moviw [-2]fsr1
  6828  0A70  3E01               	addlw	1
  6829  0A71  3FFE               	movwi [-2]fsr1
  6830  0A72  01F4               	clrf	116
  6831  0A73  3F7F               	moviw [-1]fsr1
  6832  0A74  3D74               	addwfc	116,w
  6833  0A75  3FFF               	movwi [-1]fsr1
  6834  0A76  2A51               	goto	l4222
  6835  0A77                     l957:	
  6836                           
  6837                           ; _memset: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsiz
      +                          e = 6, vargsize = 0
  6838  0A77  3178               	addfsr 1,-8
  6839  0A78  0008               	return
  6840  0A79                     __end_of_memset:	
  6841                           
  6842                           	psect	text25
  6843  0544                     __ptext25:	
  6844 ;; *************** function _ftoa *****************
  6845 ;; Defined at:
  6846 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6847 ;; Parameters:    Size  Location     Type
  6848 ;;  f               3    0[BANK1 ] float 
  6849 ;;  status          1    3[BANK1 ] PTR int 
  6850 ;;		 -> sendMessage@ftoaStatus(2), 
  6851 ;; Auto vars:     Size  Location     Type
  6852 ;;  l               4    8[BANK1 ] unsigned long 
  6853 ;;  rem             4    4[BANK1 ] unsigned long 
  6854 ;;  cp              1   12[BANK1 ] PTR unsigned char 
  6855 ;;		 -> ftoa@buf(17), 
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  1    wreg      PTR unsigned char 
  6858 ;; Registers used:
  6859 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  6860 ;; Tracked objects:
  6861 ;;		On entry : 0/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6865 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6866 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6868 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;Total ram usage:       13 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; Hardware stack levels required when called:   10
  6872 ;; This function calls:
  6873 ;;		___ftge
  6874 ;;		___ftmul
  6875 ;;		___ftneg
  6876 ;;		___ftsub
  6877 ;;		___fttol
  6878 ;;		___lltoft
  6879 ;;		_sprintf
  6880 ;; This function is called by:
  6881 ;;		_sendMessage
  6882 ;; This function uses a non-reentrant model
  6883 ;;
  6884                           
  6885                           
  6886                           ;psect for function _ftoa
  6887  0544                     _ftoa:	
  6888                           
  6889                           ;incstack = 0
  6890                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  6891  0544  303C               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6892  0545  00FF               	movwf	127
  6893  0546  087F               	movf	127,w
  6894  0547  0021               	movlb	1	; select bank1
  6895  0548  00AC               	movwf	ftoa@cp^(0+128)
  6896  0549  0820               	movf	ftoa@f^(0+128),w
  6897  054A  0020               	movlb	0	; select bank0
  6898  054B  00A6               	movwf	___ftge@ff1
  6899  054C  0021               	movlb	1	; select bank1
  6900  054D  0821               	movf	(ftoa@f+1)^(0+128),w
  6901  054E  0020               	movlb	0	; select bank0
  6902  054F  00A7               	movwf	___ftge@ff1+1
  6903  0550  0021               	movlb	1	; select bank1
  6904  0551  0822               	movf	(ftoa@f+2)^(0+128),w
  6905  0552  0020               	movlb	0	; select bank0
  6906  0553  00A8               	movwf	___ftge@ff1+2
  6907  0554  3000               	movlw	0
  6908  0555  00A9               	movwf	___ftge@ff2
  6909  0556  3000               	movlw	0
  6910  0557  00AA               	movwf	___ftge@ff2+1
  6911  0558  3000               	movlw	0
  6912  0559  00AB               	movwf	___ftge@ff2+2
  6913  055A  318A  22E8  3185   	fcall	___ftge
  6914  055D  1803               	btfsc	3,0
  6915  055E  2D86               	goto	l4244
  6916  055F  302D               	movlw	45
  6917  0560  00FF               	movwf	127
  6918  0561  0021               	movlb	1	; select bank1
  6919  0562  082C               	movf	ftoa@cp^(0+128),w
  6920  0563  0084               	movwf	4
  6921  0564  3001               	movlw	1	; select bank2/3
  6922  0565  0085               	movwf	5
  6923  0566  087F               	movf	127,w
  6924  0567  0080               	movwf	0
  6925  0568  3001               	movlw	1
  6926  0569  00FF               	movwf	127
  6927  056A  087F               	movf	127,w
  6928  056B  07AC               	addwf	ftoa@cp^(0+128),f
  6929  056C  0820               	movf	ftoa@f^(0+128),w
  6930  056D  0020               	movlb	0	; select bank0
  6931  056E  00CC               	movwf	___ftneg@f1
  6932  056F  0021               	movlb	1	; select bank1
  6933  0570  0821               	movf	(ftoa@f+1)^(0+128),w
  6934  0571  0020               	movlb	0	; select bank0
  6935  0572  00CD               	movwf	___ftneg@f1+1
  6936  0573  0021               	movlb	1	; select bank1
  6937  0574  0822               	movf	(ftoa@f+2)^(0+128),w
  6938  0575  0020               	movlb	0	; select bank0
  6939  0576  00CE               	movwf	___ftneg@f1+2
  6940  0577  3197  2793  3185   	fcall	___ftneg
  6941  057A  0020               	movlb	0	; select bank0
  6942  057B  084C               	movf	?___ftneg,w
  6943  057C  0021               	movlb	1	; select bank1
  6944  057D  00A0               	movwf	ftoa@f^(0+128)
  6945  057E  0020               	movlb	0	; select bank0
  6946  057F  084D               	movf	?___ftneg+1,w
  6947  0580  0021               	movlb	1	; select bank1
  6948  0581  00A1               	movwf	(ftoa@f+1)^(0+128)
  6949  0582  0020               	movlb	0	; select bank0
  6950  0583  084E               	movf	?___ftneg+2,w
  6951  0584  0021               	movlb	1	; select bank1
  6952  0585  00A2               	movwf	(ftoa@f+2)^(0+128)
  6953  0586                     l4244:	
  6954  0586  0021               	movlb	1	; select bank1
  6955  0587  0820               	movf	ftoa@f^(0+128),w
  6956  0588  0020               	movlb	0	; select bank0
  6957  0589  00D8               	movwf	___fttol@f1
  6958  058A  0021               	movlb	1	; select bank1
  6959  058B  0821               	movf	(ftoa@f+1)^(0+128),w
  6960  058C  0020               	movlb	0	; select bank0
  6961  058D  00D9               	movwf	___fttol@f1+1
  6962  058E  0021               	movlb	1	; select bank1
  6963  058F  0822               	movf	(ftoa@f+2)^(0+128),w
  6964  0590  0020               	movlb	0	; select bank0
  6965  0591  00DA               	movwf	___fttol@f1+2
  6966  0592  318D  2591  3185   	fcall	___fttol
  6967  0595  0020               	movlb	0	; select bank0
  6968  0596  085B               	movf	?___fttol+3,w
  6969  0597  0021               	movlb	1	; select bank1
  6970  0598  00AB               	movwf	(ftoa@l+3)^(0+128)
  6971  0599  0020               	movlb	0	; select bank0
  6972  059A  085A               	movf	?___fttol+2,w
  6973  059B  0021               	movlb	1	; select bank1
  6974  059C  00AA               	movwf	(ftoa@l+2)^(0+128)
  6975  059D  0020               	movlb	0	; select bank0
  6976  059E  0859               	movf	?___fttol+1,w
  6977  059F  0021               	movlb	1	; select bank1
  6978  05A0  00A9               	movwf	(ftoa@l+1)^(0+128)
  6979  05A1  0020               	movlb	0	; select bank0
  6980  05A2  0858               	movf	?___fttol,w
  6981  05A3  0021               	movlb	1	; select bank1
  6982  05A4  00A8               	movwf	ftoa@l^(0+128)
  6983  05A5  082B               	movf	(ftoa@l+3)^(0+128),w
  6984  05A6  00F3               	movwf	___lltoft@c+3
  6985  05A7  082A               	movf	(ftoa@l+2)^(0+128),w
  6986  05A8  00F2               	movwf	___lltoft@c+2
  6987  05A9  0829               	movf	(ftoa@l+1)^(0+128),w
  6988  05AA  00F1               	movwf	___lltoft@c+1
  6989  05AB  0828               	movf	ftoa@l^(0+128),w
  6990  05AC  00F0               	movwf	___lltoft@c
  6991  05AD  3189  2191  3185   	fcall	___lltoft
  6992  05B0  0870               	movf	?___lltoft,w
  6993  05B1  0020               	movlb	0	; select bank0
  6994  05B2  00B5               	movwf	___ftsub@f2
  6995  05B3  0871               	movf	?___lltoft+1,w
  6996  05B4  00B6               	movwf	___ftsub@f2+1
  6997  05B5  0872               	movf	?___lltoft+2,w
  6998  05B6  00B7               	movwf	___ftsub@f2+2
  6999  05B7  0021               	movlb	1	; select bank1
  7000  05B8  0820               	movf	ftoa@f^(0+128),w
  7001  05B9  0020               	movlb	0	; select bank0
  7002  05BA  00B8               	movwf	___ftsub@f1
  7003  05BB  0021               	movlb	1	; select bank1
  7004  05BC  0821               	movf	(ftoa@f+1)^(0+128),w
  7005  05BD  0020               	movlb	0	; select bank0
  7006  05BE  00B9               	movwf	___ftsub@f1+1
  7007  05BF  0021               	movlb	1	; select bank1
  7008  05C0  0822               	movf	(ftoa@f+2)^(0+128),w
  7009  05C1  0020               	movlb	0	; select bank0
  7010  05C2  00BA               	movwf	___ftsub@f1+2
  7011  05C3  3188  2048  3185   	fcall	___ftsub
  7012  05C6  0020               	movlb	0	; select bank0
  7013  05C7  0835               	movf	?___ftsub,w
  7014  05C8  0021               	movlb	1	; select bank1
  7015  05C9  00A0               	movwf	ftoa@f^(0+128)
  7016  05CA  0020               	movlb	0	; select bank0
  7017  05CB  0836               	movf	?___ftsub+1,w
  7018  05CC  0021               	movlb	1	; select bank1
  7019  05CD  00A1               	movwf	(ftoa@f+1)^(0+128)
  7020  05CE  0020               	movlb	0	; select bank0
  7021  05CF  0837               	movf	?___ftsub+2,w
  7022  05D0  0021               	movlb	1	; select bank1
  7023  05D1  00A2               	movwf	(ftoa@f+2)^(0+128)
  7024  05D2  0820               	movf	ftoa@f^(0+128),w
  7025  05D3  0020               	movlb	0	; select bank0
  7026  05D4  00CF               	movwf	___ftmul@f2
  7027  05D5  0021               	movlb	1	; select bank1
  7028  05D6  0821               	movf	(ftoa@f+1)^(0+128),w
  7029  05D7  0020               	movlb	0	; select bank0
  7030  05D8  00D0               	movwf	___ftmul@f2+1
  7031  05D9  0021               	movlb	1	; select bank1
  7032  05DA  0822               	movf	(ftoa@f+2)^(0+128),w
  7033  05DB  0020               	movlb	0	; select bank0
  7034  05DC  00D1               	movwf	___ftmul@f2+2
  7035  05DD  3024               	movlw	36
  7036  05DE  00CC               	movwf	___ftmul@f1
  7037  05DF  3074               	movlw	116
  7038  05E0  00CD               	movwf	___ftmul@f1+1
  7039  05E1  3049               	movlw	73
  7040  05E2  00CE               	movwf	___ftmul@f1+2
  7041  05E3  3186  262B  3185   	fcall	___ftmul
  7042  05E6  0020               	movlb	0	; select bank0
  7043  05E7  084C               	movf	?___ftmul,w
  7044  05E8  00D8               	movwf	___fttol@f1
  7045  05E9  084D               	movf	?___ftmul+1,w
  7046  05EA  00D9               	movwf	___fttol@f1+1
  7047  05EB  084E               	movf	?___ftmul+2,w
  7048  05EC  00DA               	movwf	___fttol@f1+2
  7049  05ED  318D  2591  3185   	fcall	___fttol
  7050  05F0  0020               	movlb	0	; select bank0
  7051  05F1  085B               	movf	?___fttol+3,w
  7052  05F2  0021               	movlb	1	; select bank1
  7053  05F3  00A7               	movwf	(ftoa@rem+3)^(0+128)
  7054  05F4  0020               	movlb	0	; select bank0
  7055  05F5  085A               	movf	?___fttol+2,w
  7056  05F6  0021               	movlb	1	; select bank1
  7057  05F7  00A6               	movwf	(ftoa@rem+2)^(0+128)
  7058  05F8  0020               	movlb	0	; select bank0
  7059  05F9  0859               	movf	?___fttol+1,w
  7060  05FA  0021               	movlb	1	; select bank1
  7061  05FB  00A5               	movwf	(ftoa@rem+1)^(0+128)
  7062  05FC  0020               	movlb	0	; select bank0
  7063  05FD  0858               	movf	?___fttol,w
  7064  05FE  0021               	movlb	1	; select bank1
  7065  05FF  00A4               	movwf	ftoa@rem^(0+128)
  7066  0600  3001               	movlw	low (STR_10| (0+32768))
  7067  0601  0020               	movlb	0	; select bank0
  7068  0602  00BB               	movwf	sprintf@f
  7069  0603  3098               	movlw	high (STR_10| (0+32768))
  7070  0604  00BC               	movwf	sprintf@f+1
  7071  0605  0021               	movlb	1	; select bank1
  7072  0606  082B               	movf	(ftoa@l+3)^(0+128),w
  7073  0607  0020               	movlb	0	; select bank0
  7074  0608  00C0               	movwf	?_sprintf+5
  7075  0609  0021               	movlb	1	; select bank1
  7076  060A  082A               	movf	(ftoa@l+2)^(0+128),w
  7077  060B  0020               	movlb	0	; select bank0
  7078  060C  00BF               	movwf	?_sprintf+4
  7079  060D  0021               	movlb	1	; select bank1
  7080  060E  0829               	movf	(ftoa@l+1)^(0+128),w
  7081  060F  0020               	movlb	0	; select bank0
  7082  0610  00BE               	movwf	?_sprintf+3
  7083  0611  0021               	movlb	1	; select bank1
  7084  0612  0828               	movf	ftoa@l^(0+128),w
  7085  0613  0020               	movlb	0	; select bank0
  7086  0614  00BD               	movwf	?_sprintf+2
  7087  0615  0021               	movlb	1	; select bank1
  7088  0616  0827               	movf	(ftoa@rem+3)^(0+128),w
  7089  0617  0020               	movlb	0	; select bank0
  7090  0618  00C4               	movwf	?_sprintf+9
  7091  0619  0021               	movlb	1	; select bank1
  7092  061A  0826               	movf	(ftoa@rem+2)^(0+128),w
  7093  061B  0020               	movlb	0	; select bank0
  7094  061C  00C3               	movwf	?_sprintf+8
  7095  061D  0021               	movlb	1	; select bank1
  7096  061E  0825               	movf	(ftoa@rem+1)^(0+128),w
  7097  061F  0020               	movlb	0	; select bank0
  7098  0620  00C2               	movwf	?_sprintf+7
  7099  0621  0021               	movlb	1	; select bank1
  7100  0622  0824               	movf	ftoa@rem^(0+128),w
  7101  0623  0020               	movlb	0	; select bank0
  7102  0624  00C1               	movwf	?_sprintf+6
  7103  0625  0021               	movlb	1	; select bank1
  7104  0626  082C               	movf	ftoa@cp^(0+128),w
  7105  0627  3180  205E         	fcall	_sprintf
  7106  0629  303C               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  7107  062A  0008               	return
  7108  062B                     __end_of_ftoa:	
  7109                           
  7110                           	psect	text26
  7111  005E                     __ptext26:	
  7112 ;; *************** function _sprintf *****************
  7113 ;; Defined at:
  7114 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  7115 ;; Parameters:    Size  Location     Type
  7116 ;;  sp              1    wreg     PTR unsigned char 
  7117 ;;		 -> ftoa@buf(17), 
  7118 ;;  f               2   27[BANK0 ] PTR const unsigned char 
  7119 ;;		 -> STR_10(11), 
  7120 ;; Auto vars:     Size  Location     Type
  7121 ;;  sp              1   47[BANK0 ] PTR unsigned char 
  7122 ;;		 -> ftoa@buf(17), 
  7123 ;;  val             4   43[BANK0 ] unsigned long 
  7124 ;;  tmpval          4    0        struct .
  7125 ;;  prec            2   50[BANK0 ] int 
  7126 ;;  width           2   48[BANK0 ] int 
  7127 ;;  cp              2    0        PTR const unsigned char 
  7128 ;;  len             2    0        unsigned int 
  7129 ;;  c               1   52[BANK0 ] unsigned char 
  7130 ;;  ap              1   42[BANK0 ] PTR void [1]
  7131 ;;		 -> ?_sprintf(2), 
  7132 ;;  flag            1   41[BANK0 ] unsigned char 
  7133 ;; Return value:  Size  Location     Type
  7134 ;;                  2   27[BANK0 ] int 
  7135 ;; Registers used:
  7136 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  7137 ;; Tracked objects:
  7138 ;;		On entry : 0/0
  7139 ;;		On exit  : 0/0
  7140 ;;		Unchanged: 0/0
  7141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7142 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7143 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7144 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7145 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7146 ;;Total ram usage:       26 bytes
  7147 ;; Hardware stack levels used:    1
  7148 ;; Hardware stack levels required when called:    8
  7149 ;; This function calls:
  7150 ;;		___lldiv
  7151 ;;		___llmod
  7152 ;;		___wmul
  7153 ;;		_isdigit
  7154 ;; This function is called by:
  7155 ;;		_ftoa
  7156 ;; This function uses a non-reentrant model
  7157 ;;
  7158                           
  7159                           
  7160                           ;psect for function _sprintf
  7161  005E                     _sprintf:	
  7162                           
  7163                           ;incstack = 0
  7164                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  7165                           ;sprintf@sp stored from wreg
  7166  005E  0020               	movlb	0	; select bank0
  7167  005F  00CF               	movwf	sprintf@sp
  7168                           
  7169                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  7170  0060  303D               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  7171  0061  00FF               	movwf	127
  7172  0062  087F               	movf	127,w
  7173  0063  00CA               	movwf	sprintf@ap
  7174  0064                     l4038:	
  7175                           ;doprnt.c: 548: while((c = *f++)) {
  7176                           
  7177  0064  083C               	movf	sprintf@f+1,w
  7178  0065  00FF               	movwf	127
  7179  0066  083B               	movf	sprintf@f,w
  7180  0067  00FE               	movwf	126
  7181  0068  0ABB               	incf	sprintf@f,f
  7182  0069  1903               	skipnz
  7183  006A  0ABC               	incf	sprintf@f+1,f
  7184  006B  087E               	movf	126,w
  7185  006C  0084               	movwf	4
  7186  006D  087F               	movf	127,w
  7187  006E  0085               	movwf	5
  7188  006F  0800               	movf	0,w	;code access
  7189  0070  00FF               	movwf	127
  7190  0071  087F               	movf	127,w
  7191  0072  00D4               	movwf	sprintf@c
  7192  0073  0854               	movf	sprintf@c,w
  7193  0074  1903               	btfsc	3,2
  7194  0075  2A25               	goto	l4040
  7195                           
  7196                           ;doprnt.c: 550: if(c != '%')
  7197  0076  3025               	movlw	37
  7198  0077  0654               	xorwf	sprintf@c,w
  7199  0078  1903               	btfsc	3,2
  7200  0079  2887               	goto	l3946
  7201                           
  7202                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  7203  007A  0854               	movf	sprintf@c,w
  7204  007B  00FF               	movwf	127
  7205  007C  084F               	movf	sprintf@sp,w
  7206  007D  0084               	movwf	4
  7207  007E  3001               	movlw	1	; select bank2/3
  7208  007F  0085               	movwf	5
  7209  0080  087F               	movf	127,w
  7210  0081  0080               	movwf	0
  7211  0082  3001               	movlw	1
  7212  0083  00FF               	movwf	127
  7213  0084  087F               	movf	127,w
  7214  0085  07CF               	addwf	sprintf@sp,f
  7215                           
  7216                           ;doprnt.c: 554: continue;
  7217  0086  2864               	goto	l4038
  7218  0087                     l3946:	
  7219                           
  7220                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  7221  0087  01D0               	clrf	sprintf@width
  7222  0088  01D1               	clrf	sprintf@width+1
  7223                           
  7224                           ;doprnt.c: 560: flag = 0;
  7225  0089  01C9               	clrf	sprintf@flag
  7226                           
  7227                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  7228  008A  083B               	movf	sprintf@f,w
  7229  008B  0084               	movwf	4
  7230  008C  083C               	movf	sprintf@f+1,w
  7231  008D  0085               	movwf	5
  7232  008E  0800               	movf	0,w	;code access
  7233  008F  3197  27B8  3180   	fcall	_isdigit
  7234  0092  1C03               	btfss	3,0
  7235  0093  28C5               	goto	l3960
  7236                           
  7237                           ;doprnt.c: 610: width = 0;
  7238  0094  0020               	movlb	0	; select bank0
  7239  0095  01D0               	clrf	sprintf@width
  7240  0096  01D1               	clrf	sprintf@width+1
  7241  0097                     l3952:	
  7242                           ;doprnt.c: 611: do {
  7243                           
  7244                           
  7245                           ;doprnt.c: 612: width *= 10;
  7246  0097  300A               	movlw	10
  7247  0098  00F0               	movwf	___wmul@multiplier
  7248  0099  3000               	movlw	0
  7249  009A  00F1               	movwf	___wmul@multiplier+1
  7250  009B  0020               	movlb	0	; select bank0
  7251  009C  0851               	movf	sprintf@width+1,w
  7252  009D  00F3               	movwf	___wmul@multiplicand+1
  7253  009E  0850               	movf	sprintf@width,w
  7254  009F  00F2               	movwf	___wmul@multiplicand
  7255  00A0  3188  2066  3180   	fcall	___wmul
  7256  00A3  0871               	movf	?___wmul+1,w
  7257  00A4  0020               	movlb	0	; select bank0
  7258  00A5  00D1               	movwf	sprintf@width+1
  7259  00A6  0870               	movf	?___wmul,w
  7260  00A7  00D0               	movwf	sprintf@width
  7261                           
  7262                           ;doprnt.c: 613: width += *f++ - '0';
  7263  00A8  083B               	movf	sprintf@f,w
  7264  00A9  0084               	movwf	4
  7265  00AA  083C               	movf	sprintf@f+1,w
  7266  00AB  0085               	movwf	5
  7267  00AC  0800               	movf	0,w	;code access
  7268  00AD  3ED0               	addlw	208
  7269  00AE  00FE               	movwf	126
  7270  00AF  30FF               	movlw	255
  7271  00B0  1803               	skipnc
  7272  00B1  3000               	movlw	0
  7273  00B2  00FF               	movwf	127
  7274  00B3  087E               	movf	126,w
  7275  00B4  07D0               	addwf	sprintf@width,f
  7276  00B5  087F               	movf	127,w
  7277  00B6  3DD1               	addwfc	sprintf@width+1,f
  7278  00B7  3001               	movlw	1
  7279  00B8  07BB               	addwf	sprintf@f,f
  7280  00B9  3000               	movlw	0
  7281  00BA  3DBC               	addwfc	sprintf@f+1,f
  7282                           
  7283                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  7284  00BB  083B               	movf	sprintf@f,w
  7285  00BC  0084               	movwf	4
  7286  00BD  083C               	movf	sprintf@f+1,w
  7287  00BE  0085               	movwf	5
  7288  00BF  0800               	movf	0,w	;code access
  7289  00C0  3197  27B8  3180   	fcall	_isdigit
  7290  00C3  1803               	btfsc	3,0
  7291  00C4  2897               	goto	l3952
  7292  00C5                     l3960:	
  7293                           
  7294                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  7295  00C5  0020               	movlb	0	; select bank0
  7296  00C6  083B               	movf	sprintf@f,w
  7297  00C7  0084               	movwf	4
  7298  00C8  083C               	movf	sprintf@f+1,w
  7299  00C9  0085               	movwf	5
  7300  00CA  0012               	moviw fsr0++
  7301  00CB  3A2E               	xorlw	46
  7302  00CC  1D03               	btfss	3,2
  7303  00CD  2903               	goto	l3972
  7304                           
  7305                           ;doprnt.c: 625: f++;
  7306  00CE  3001               	movlw	1
  7307  00CF  07BB               	addwf	sprintf@f,f
  7308  00D0  3000               	movlw	0
  7309  00D1  3DBC               	addwfc	sprintf@f+1,f
  7310                           
  7311                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  7312  00D2  01D2               	clrf	sprintf@prec
  7313  00D3  01D3               	clrf	sprintf@prec+1
  7314  00D4                     l3970:	
  7315                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  7316                           
  7317  00D4  083B               	movf	sprintf@f,w
  7318  00D5  0084               	movwf	4
  7319  00D6  083C               	movf	sprintf@f+1,w
  7320  00D7  0085               	movwf	5
  7321  00D8  0800               	movf	0,w	;code access
  7322  00D9  3197  27B8  3180   	fcall	_isdigit
  7323  00DC  1C03               	btfss	3,0
  7324  00DD  290E               	goto	l3978
  7325                           
  7326                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  7327  00DE  0020               	movlb	0	; select bank0
  7328  00DF  083B               	movf	sprintf@f,w
  7329  00E0  0084               	movwf	4
  7330  00E1  083C               	movf	sprintf@f+1,w
  7331  00E2  0085               	movwf	5
  7332  00E3  0800               	movf	0,w	;code access
  7333  00E4  00FE               	movwf	126
  7334  00E5  01FF               	clrf	127
  7335  00E6  0853               	movf	sprintf@prec+1,w
  7336  00E7  00F1               	movwf	___wmul@multiplier+1
  7337  00E8  0852               	movf	sprintf@prec,w
  7338  00E9  00F0               	movwf	___wmul@multiplier
  7339  00EA  300A               	movlw	10
  7340  00EB  00F2               	movwf	___wmul@multiplicand
  7341  00EC  3000               	movlw	0
  7342  00ED  00F3               	movwf	___wmul@multiplicand+1
  7343  00EE  3188  2066  3180   	fcall	___wmul
  7344  00F1  087E               	movf	126,w
  7345  00F2  0770               	addwf	?___wmul,w
  7346  00F3  00FC               	movwf	124
  7347  00F4  087F               	movf	127,w
  7348  00F5  3D71               	addwfc	?___wmul+1,w
  7349  00F6  00FD               	movwf	125
  7350  00F7  087C               	movf	124,w
  7351  00F8  3ED0               	addlw	208
  7352  00F9  0020               	movlb	0	; select bank0
  7353  00FA  00D2               	movwf	sprintf@prec
  7354  00FB  30FF               	movlw	255
  7355  00FC  3D7D               	addwfc	125,w
  7356  00FD  00D3               	movwf	sprintf@prec+1
  7357  00FE  3001               	movlw	1
  7358  00FF  07BB               	addwf	sprintf@f,f
  7359  0100  3000               	movlw	0
  7360  0101  3DBC               	addwfc	sprintf@f+1,f
  7361  0102  28D4               	goto	l3970
  7362  0103                     l3972:	
  7363                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  7364                           
  7365                           
  7366                           ;doprnt.c: 645: prec = 0;
  7367  0103  0020               	movlb	0	; select bank0
  7368  0104  01D2               	clrf	sprintf@prec
  7369  0105  01D3               	clrf	sprintf@prec+1
  7370                           
  7371                           ;doprnt.c: 654: switch(c = *f++) {
  7372                           
  7373                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  7374  0106  290E               	goto	l3978
  7375  0107                     l506:	
  7376                           ;doprnt.c: 660: case 'l':
  7377                           
  7378                           ;doprnt.c: 657: goto alldone;
  7379                           
  7380                           ;doprnt.c: 656: case 0:
  7381                           
  7382                           
  7383                           ;doprnt.c: 662: flag |= 0x10;
  7384  0107  1649               	bsf	sprintf@flag,4
  7385                           
  7386                           ;doprnt.c: 663: goto loop;
  7387  0108  290E               	goto	l3978
  7388  0109                     l3974:	
  7389                           ;doprnt.c: 836: case 'u':
  7390                           
  7391                           ;doprnt.c: 832: continue;
  7392                           
  7393                           ;doprnt.c: 821: default:
  7394                           
  7395                           
  7396                           ;doprnt.c: 837: flag |= 0xC0;
  7397  0109  30C0               	movlw	192
  7398  010A  00FF               	movwf	127
  7399  010B  087F               	movf	127,w
  7400  010C  04C9               	iorwf	sprintf@flag,f
  7401                           
  7402                           ;doprnt.c: 841: }
  7403                           
  7404                           ;doprnt.c: 838: break;
  7405  010D  2926               	goto	l509
  7406  010E                     l3978:	
  7407  010E  0020               	movlb	0	; select bank0
  7408  010F  083C               	movf	sprintf@f+1,w
  7409  0110  00FF               	movwf	127
  7410  0111  083B               	movf	sprintf@f,w
  7411  0112  00FE               	movwf	126
  7412  0113  0ABB               	incf	sprintf@f,f
  7413  0114  1903               	skipnz
  7414  0115  0ABC               	incf	sprintf@f+1,f
  7415  0116  087E               	movf	126,w
  7416  0117  0084               	movwf	4
  7417  0118  087F               	movf	127,w
  7418  0119  0085               	movwf	5
  7419  011A  0800               	movf	0,w	;code access
  7420  011B  00D4               	movwf	sprintf@c
  7421                           
  7422                           ; Switch size 1, requested type "space"
  7423                           ; Number of cases is 3, Range of values is 0 to 117
  7424                           ; switch strategies available:
  7425                           ; Name         Instructions Cycles
  7426                           ; simple_byte           10     6 (average)
  7427                           ; direct_byte          242     6 (fixed)
  7428                           ; jumptable            260     6 (fixed)
  7429                           ;	Chosen strategy is simple_byte
  7430  011C  3A00               	xorlw	0	; case 0
  7431  011D  1903               	skipnz
  7432  011E  2A25               	goto	l4040
  7433  011F  3A6C               	xorlw	108	; case 108
  7434  0120  1903               	skipnz
  7435  0121  2907               	goto	l506
  7436  0122  3A19               	xorlw	25	; case 117
  7437  0123  1903               	skipnz
  7438  0124  2909               	goto	l3974
  7439  0125  2864               	goto	l4038
  7440  0126                     l509:	
  7441                           
  7442                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  7443  0126  1E49               	btfss	sprintf@flag,4
  7444  0127  2935               	goto	l3984
  7445                           
  7446                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7447  0128  084A               	movf	sprintf@ap,w
  7448  0129  0084               	movwf	4
  7449  012A  0185               	clrf	5
  7450  012B  3F00               	moviw [0]fsr0
  7451  012C  00CB               	movwf	sprintf@val
  7452  012D  3F01               	moviw [1]fsr0
  7453  012E  00CC               	movwf	sprintf@val+1
  7454  012F  3F02               	moviw [2]fsr0
  7455  0130  00CD               	movwf	sprintf@val+2
  7456  0131  3F03               	moviw [3]fsr0
  7457  0132  00CE               	movwf	sprintf@val+3
  7458  0133  3004               	movlw	4
  7459  0134  2943               	goto	L1
  7460  0135                     l3984:	
  7461                           
  7462                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  7463  0135  084A               	movf	sprintf@ap,w
  7464  0136  0084               	movwf	4
  7465  0137  0185               	clrf	5
  7466  0138  3F00               	moviw [0]fsr0
  7467  0139  00FE               	movwf	126
  7468  013A  3F01               	moviw [1]fsr0
  7469  013B  00FF               	movwf	127
  7470  013C  087E               	movf	126,w
  7471  013D  00CB               	movwf	sprintf@val
  7472  013E  087F               	movf	127,w
  7473  013F  00CC               	movwf	sprintf@val+1
  7474  0140  01CD               	clrf	sprintf@val+2
  7475  0141  01CE               	clrf	sprintf@val+3
  7476  0142  3002               	movlw	2
  7477  0143                     L1:	
  7478  0143  00FF               	movwf	127
  7479  0144  087F               	movf	127,w
  7480  0145  07CA               	addwf	sprintf@ap,f
  7481                           
  7482                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  7483  0146  0852               	movf	sprintf@prec,w
  7484  0147  0453               	iorwf	sprintf@prec+1,w
  7485  0148  1D03               	btfss	3,2
  7486  0149  2954               	goto	l3994
  7487  014A  084E               	movf	sprintf@val+3,w
  7488  014B  044D               	iorwf	sprintf@val+2,w
  7489  014C  044C               	iorwf	sprintf@val+1,w
  7490  014D  044B               	iorwf	sprintf@val,w
  7491  014E  1D03               	skipz
  7492  014F  2954               	goto	l3994
  7493                           
  7494                           ;doprnt.c: 1310: prec++;
  7495  0150  3001               	movlw	1
  7496  0151  07D2               	addwf	sprintf@prec,f
  7497  0152  3000               	movlw	0
  7498  0153  3DD3               	addwfc	sprintf@prec+1,f
  7499  0154                     l3994:	
  7500                           
  7501                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7502  0154  01D4               	clrf	sprintf@c
  7503  0155  0AD4               	incf	sprintf@c,f
  7504  0156  300A               	movlw	10
  7505  0157  0654               	xorwf	sprintf@c,w
  7506  0158  1903               	btfsc	3,2
  7507  0159  2987               	goto	l4008
  7508  015A                     l4000:	
  7509                           
  7510                           ;doprnt.c: 1325: if(val < dpowers[c])
  7511  015A  0854               	movf	sprintf@c,w
  7512  015B  00FE               	movwf	126
  7513  015C  01FF               	clrf	127
  7514  015D  35FE               	lslf	126,f
  7515  015E  0DFF               	rlf	127,f
  7516  015F  35FE               	lslf	126,f
  7517  0160  0DFF               	rlf	127,f
  7518  0161  3000               	movlw	low (_dpowers| (0+32768))
  7519  0162  077E               	addwf	126,w
  7520  0163  0084               	movwf	4
  7521  0164  3090               	movlw	high (_dpowers| (0+32768))
  7522  0165  3D7F               	addwfc	127,w
  7523  0166  0085               	movwf	5
  7524  0167  3F00               	moviw [0]fsr0
  7525  0168  00C5               	movwf	??_sprintf
  7526  0169  3F01               	moviw [1]fsr0
  7527  016A  00C6               	movwf	??_sprintf+1
  7528  016B  3F02               	moviw [2]fsr0
  7529  016C  00C7               	movwf	??_sprintf+2
  7530  016D  3F03               	moviw [3]fsr0
  7531  016E  00C8               	movwf	??_sprintf+3
  7532  016F  0848               	movf	??_sprintf+3,w
  7533  0170  024E               	subwf	sprintf@val+3,w
  7534  0171  1D03               	skipz
  7535  0172  297D               	goto	u4305
  7536  0173  0847               	movf	??_sprintf+2,w
  7537  0174  024D               	subwf	sprintf@val+2,w
  7538  0175  1D03               	skipz
  7539  0176  297D               	goto	u4305
  7540  0177  0846               	movf	??_sprintf+1,w
  7541  0178  024C               	subwf	sprintf@val+1,w
  7542  0179  1D03               	skipz
  7543  017A  297D               	goto	u4305
  7544  017B  0845               	movf	??_sprintf,w
  7545  017C  024B               	subwf	sprintf@val,w
  7546  017D                     u4305:	
  7547  017D  1C03               	btfss	3,0
  7548  017E  2987               	goto	l4008
  7549                           
  7550                           ;doprnt.c: 1326: break;
  7551  017F  3001               	movlw	1
  7552  0180  00FF               	movwf	127
  7553  0181  087F               	movf	127,w
  7554  0182  07D4               	addwf	sprintf@c,f
  7555  0183  300A               	movlw	10
  7556  0184  0654               	xorwf	sprintf@c,w
  7557  0185  1D03               	btfss	3,2
  7558  0186  295A               	goto	l4000
  7559  0187                     l4008:	
  7560                           
  7561                           ;doprnt.c: 1358: if(c < prec)
  7562  0187  0853               	movf	sprintf@prec+1,w
  7563  0188  3A80               	xorlw	128
  7564  0189  3C80               	sublw	128
  7565  018A  1D03               	skipz
  7566  018B  298E               	goto	u4325
  7567  018C  0852               	movf	sprintf@prec,w
  7568  018D  0254               	subwf	sprintf@c,w
  7569  018E                     u4325:	
  7570  018E  1803               	skipnc
  7571  018F  2996               	goto	l4012
  7572                           
  7573                           ;doprnt.c: 1359: c = prec;
  7574  0190  0020               	movlb	0	; select bank0
  7575  0191  0852               	movf	sprintf@prec,w
  7576  0192  00FF               	movwf	127
  7577  0193  087F               	movf	127,w
  7578  0194  00D4               	movwf	sprintf@c
  7579  0195  29AA               	goto	l4016
  7580  0196                     l4012:	
  7581                           
  7582                           ;doprnt.c: 1360: else if(prec < c)
  7583  0196  0020               	movlb	0	; select bank0
  7584  0197  0853               	movf	sprintf@prec+1,w
  7585  0198  3A80               	xorlw	128
  7586  0199  00C5               	movwf	??_sprintf
  7587  019A  3080               	movlw	128
  7588  019B  0245               	subwf	??_sprintf,w
  7589  019C  1D03               	skipz
  7590  019D  29A0               	goto	u4335
  7591  019E  0854               	movf	sprintf@c,w
  7592  019F  0252               	subwf	sprintf@prec,w
  7593  01A0                     u4335:	
  7594  01A0  1803               	skipnc
  7595  01A1  29AA               	goto	l4016
  7596                           
  7597                           ;doprnt.c: 1361: prec = c;
  7598  01A2  0020               	movlb	0	; select bank0
  7599  01A3  0854               	movf	sprintf@c,w
  7600  01A4  00FE               	movwf	126
  7601  01A5  01FF               	clrf	127
  7602  01A6  087E               	movf	126,w
  7603  01A7  00D2               	movwf	sprintf@prec
  7604  01A8  087F               	movf	127,w
  7605  01A9  00D3               	movwf	sprintf@prec+1
  7606  01AA                     l4016:	
  7607                           
  7608                           ;doprnt.c: 1400: if(width > c)
  7609  01AA  0020               	movlb	0	; select bank0
  7610  01AB  0851               	movf	sprintf@width+1,w
  7611  01AC  3A80               	xorlw	128
  7612  01AD  3C80               	sublw	128
  7613  01AE  1D03               	skipz
  7614  01AF  29B2               	goto	u4345
  7615  01B0  0850               	movf	sprintf@width,w
  7616  01B1  0254               	subwf	sprintf@c,w
  7617  01B2                     u4345:	
  7618  01B2  1803               	skipnc
  7619  01B3  29BD               	goto	l4020
  7620                           
  7621                           ;doprnt.c: 1401: width -= c;
  7622  01B4  0020               	movlb	0	; select bank0
  7623  01B5  0854               	movf	sprintf@c,w
  7624  01B6  00FE               	movwf	126
  7625  01B7  01FF               	clrf	127
  7626  01B8  087E               	movf	126,w
  7627  01B9  02D0               	subwf	sprintf@width,f
  7628  01BA  087F               	movf	127,w
  7629  01BB  3BD1               	subwfb	sprintf@width+1,f
  7630  01BC  29C0               	goto	l4022
  7631  01BD                     l4020:	
  7632                           
  7633                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  7634  01BD  0020               	movlb	0	; select bank0
  7635  01BE  01D0               	clrf	sprintf@width
  7636  01BF  01D1               	clrf	sprintf@width+1
  7637  01C0                     l4022:	
  7638                           
  7639                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  7640  01C0  0850               	movf	sprintf@width,w
  7641  01C1  0451               	iorwf	sprintf@width+1,w
  7642  01C2  1903               	btfsc	3,2
  7643  01C3  2A1A               	goto	l4036
  7644                           
  7645                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  7646                           
  7647                           ;doprnt.c: 1448: do
  7648  01C4  3020               	movlw	32
  7649  01C5  00FF               	movwf	127
  7650  01C6  084F               	movf	sprintf@sp,w
  7651  01C7  0084               	movwf	4
  7652  01C8  3001               	movlw	1	; select bank2/3
  7653  01C9  0085               	movwf	5
  7654  01CA  087F               	movf	127,w
  7655  01CB  0080               	movwf	0
  7656  01CC  3001               	movlw	1
  7657  01CD  00FF               	movwf	127
  7658  01CE  087F               	movf	127,w
  7659  01CF  07CF               	addwf	sprintf@sp,f
  7660                           
  7661                           ;doprnt.c: 1450: while(--width);
  7662  01D0  30FF               	movlw	255
  7663  01D1  07D0               	addwf	sprintf@width,f
  7664  01D2  30FF               	movlw	255
  7665  01D3  3DD1               	addwfc	sprintf@width+1,f
  7666  01D4  29C0               	goto	l4022
  7667  01D5                     l4030:	
  7668                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  7669                           
  7670                           
  7671                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  7672  01D5  3000               	movlw	0
  7673  01D6  00B6               	movwf	___llmod@divisor+3
  7674  01D7  3000               	movlw	0
  7675  01D8  00B5               	movwf	___llmod@divisor+2
  7676  01D9  3000               	movlw	0
  7677  01DA  00B4               	movwf	___llmod@divisor+1
  7678  01DB  300A               	movlw	10
  7679  01DC  00B3               	movwf	___llmod@divisor
  7680  01DD  0853               	movf	sprintf@prec+1,w
  7681  01DE  0085               	movwf	5
  7682  01DF  0852               	movf	sprintf@prec,w
  7683  01E0  0084               	movwf	4
  7684  01E1  3584               	lslf	4,f
  7685  01E2  0D85               	rlf	5,f
  7686  01E3  3584               	lslf	4,f
  7687  01E4  0D85               	rlf	5,f
  7688  01E5  3000               	movlw	low (_dpowers| (0+32768))
  7689  01E6  0784               	addwf	4,f
  7690  01E7  3090               	movlw	high (_dpowers| (0+32768))
  7691  01E8  3D85               	addwfc	5,f
  7692  01E9  3F00               	moviw [0]fsr0
  7693  01EA  00A6               	movwf	___lldiv@divisor
  7694  01EB  3F01               	moviw [1]fsr0
  7695  01EC  00A7               	movwf	___lldiv@divisor+1
  7696  01ED  3F02               	moviw [2]fsr0
  7697  01EE  00A8               	movwf	___lldiv@divisor+2
  7698  01EF  3F03               	moviw [3]fsr0
  7699  01F0  00A9               	movwf	___lldiv@divisor+3
  7700  01F1  084E               	movf	sprintf@val+3,w
  7701  01F2  00AD               	movwf	___lldiv@dividend+3
  7702  01F3  084D               	movf	sprintf@val+2,w
  7703  01F4  00AC               	movwf	___lldiv@dividend+2
  7704  01F5  084C               	movf	sprintf@val+1,w
  7705  01F6  00AB               	movwf	___lldiv@dividend+1
  7706  01F7  084B               	movf	sprintf@val,w
  7707  01F8  00AA               	movwf	___lldiv@dividend
  7708  01F9  318C  243A  3180   	fcall	___lldiv
  7709  01FC  0020               	movlb	0	; select bank0
  7710  01FD  0829               	movf	?___lldiv+3,w
  7711  01FE  00BA               	movwf	___llmod@dividend+3
  7712  01FF  0828               	movf	?___lldiv+2,w
  7713  0200  00B9               	movwf	___llmod@dividend+2
  7714  0201  0827               	movf	?___lldiv+1,w
  7715  0202  00B8               	movwf	___llmod@dividend+1
  7716  0203  0826               	movf	?___lldiv,w
  7717  0204  00B7               	movwf	___llmod@dividend
  7718  0205  318B  2324  3180   	fcall	___llmod
  7719  0208  0020               	movlb	0	; select bank0
  7720  0209  0833               	movf	?___llmod,w
  7721  020A  3E30               	addlw	48
  7722  020B  00FF               	movwf	127
  7723  020C  087F               	movf	127,w
  7724  020D  00D4               	movwf	sprintf@c
  7725                           
  7726                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7727  020E  0854               	movf	sprintf@c,w
  7728  020F  00FF               	movwf	127
  7729  0210  084F               	movf	sprintf@sp,w
  7730  0211  0084               	movwf	4
  7731  0212  3001               	movlw	1	; select bank2/3
  7732  0213  0085               	movwf	5
  7733  0214  087F               	movf	127,w
  7734  0215  0080               	movwf	0
  7735  0216  3001               	movlw	1
  7736  0217  00FF               	movwf	127
  7737  0218  087F               	movf	127,w
  7738  0219  07CF               	addwf	sprintf@sp,f
  7739  021A                     l4036:	
  7740  021A  30FF               	movlw	255
  7741  021B  07D2               	addwf	sprintf@prec,f
  7742  021C  30FF               	movlw	255
  7743  021D  3DD3               	addwfc	sprintf@prec+1,f
  7744  021E  0A52               	incf	sprintf@prec,w
  7745  021F  1D03               	skipz
  7746  0220  29D5               	goto	l4030
  7747  0221  0A53               	incf	sprintf@prec+1,w
  7748  0222  1903               	btfsc	3,2
  7749  0223  2864               	goto	l4038
  7750  0224  29D5               	goto	l4030
  7751  0225                     l4040:	
  7752                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7753                           
  7754                           
  7755                           ;doprnt.c: 1557: *sp = 0;
  7756  0225  084F               	movf	sprintf@sp,w
  7757  0226  0084               	movwf	4
  7758  0227  3001               	movlw	1	; select bank2/3
  7759  0228  0085               	movwf	5
  7760  0229  0180               	clrf	0
  7761  022A  0008               	return
  7762  022B                     __end_of_sprintf:	
  7763                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7764                           
  7765                           
  7766                           	psect	text27
  7767  17B8                     __ptext27:	
  7768 ;; *************** function _isdigit *****************
  7769 ;; Defined at:
  7770 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7771 ;; Parameters:    Size  Location     Type
  7772 ;;  c               1    wreg     unsigned char 
  7773 ;; Auto vars:     Size  Location     Type
  7774 ;;  c               1    1[COMMON] unsigned char 
  7775 ;; Return value:  Size  Location     Type
  7776 ;;		None               void
  7777 ;; Registers used:
  7778 ;;		wreg, status,2, status,0
  7779 ;; Tracked objects:
  7780 ;;		On entry : 0/0
  7781 ;;		On exit  : 0/0
  7782 ;;		Unchanged: 0/0
  7783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7785 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7787 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7788 ;;Total ram usage:        2 bytes
  7789 ;; Hardware stack levels used:    1
  7790 ;; Hardware stack levels required when called:    7
  7791 ;; This function calls:
  7792 ;;		Nothing
  7793 ;; This function is called by:
  7794 ;;		_sprintf
  7795 ;; This function uses a non-reentrant model
  7796 ;;
  7797                           
  7798                           
  7799                           ;psect for function _isdigit
  7800  17B8                     _isdigit:	
  7801                           
  7802                           ;incstack = 0
  7803                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7804                           ;isdigit@c stored from wreg
  7805  17B8  00F1               	movwf	isdigit@c
  7806  17B9  01F0               	clrf	_isdigit$2003
  7807  17BA  303A               	movlw	58
  7808  17BB  0271               	subwf	isdigit@c,w
  7809  17BC  1803               	skipnc
  7810  17BD  2FC4               	goto	l3730
  7811  17BE  3030               	movlw	48
  7812  17BF  0271               	subwf	isdigit@c,w
  7813  17C0  1C03               	skipc
  7814  17C1  2FC4               	goto	l3730
  7815  17C2  01F0               	clrf	_isdigit$2003
  7816  17C3  0AF0               	incf	_isdigit$2003,f
  7817  17C4                     l3730:	
  7818  17C4  0C70               	rrf	_isdigit$2003,w
  7819  17C5  0008               	return
  7820  17C6                     __end_of_isdigit:	
  7821                           
  7822                           	psect	text28
  7823  0866                     __ptext28:	
  7824 ;; *************** function ___wmul *****************
  7825 ;; Defined at:
  7826 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7827 ;; Parameters:    Size  Location     Type
  7828 ;;  multiplier      2    0[COMMON] unsigned int 
  7829 ;;  multiplicand    2    2[COMMON] unsigned int 
  7830 ;; Auto vars:     Size  Location     Type
  7831 ;;  product         2    6[BANK0 ] unsigned int 
  7832 ;; Return value:  Size  Location     Type
  7833 ;;                  2    0[COMMON] unsigned int 
  7834 ;; Registers used:
  7835 ;;		wreg, status,2, status,0
  7836 ;; Tracked objects:
  7837 ;;		On entry : 0/0
  7838 ;;		On exit  : 0/0
  7839 ;;		Unchanged: 0/0
  7840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7841 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7842 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7844 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7845 ;;Total ram usage:        6 bytes
  7846 ;; Hardware stack levels used:    1
  7847 ;; Hardware stack levels required when called:    7
  7848 ;; This function calls:
  7849 ;;		Nothing
  7850 ;; This function is called by:
  7851 ;;		_sprintf
  7852 ;; This function uses a non-reentrant model
  7853 ;;
  7854                           
  7855                           
  7856                           ;psect for function ___wmul
  7857  0866                     ___wmul:	
  7858                           
  7859                           ;incstack = 0
  7860                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7861  0866  0020               	movlb	0	; select bank0
  7862  0867  01A6               	clrf	___wmul@product
  7863  0868  01A7               	clrf	___wmul@product+1
  7864  0869                     l3736:	
  7865  0869  1C70               	btfss	___wmul@multiplier,0
  7866  086A  2870               	goto	l532
  7867  086B  0872               	movf	___wmul@multiplicand,w
  7868  086C  0020               	movlb	0	; select bank0
  7869  086D  07A6               	addwf	___wmul@product,f
  7870  086E  0873               	movf	___wmul@multiplicand+1,w
  7871  086F  3DA7               	addwfc	___wmul@product+1,f
  7872  0870                     l532:	
  7873  0870  3001               	movlw	1
  7874  0871                     u3705:	
  7875  0871  35F2               	lslf	___wmul@multiplicand,f
  7876  0872  0DF3               	rlf	___wmul@multiplicand+1,f
  7877  0873  0B89               	decfsz	9,f
  7878  0874  2871               	goto	u3705
  7879  0875  3001               	movlw	1
  7880  0876                     u3715:	
  7881  0876  36F1               	lsrf	___wmul@multiplier+1,f
  7882  0877  0CF0               	rrf	___wmul@multiplier,f
  7883  0878  0B89               	decfsz	9,f
  7884  0879  2876               	goto	u3715
  7885  087A  0870               	movf	___wmul@multiplier,w
  7886  087B  0471               	iorwf	___wmul@multiplier+1,w
  7887  087C  1D03               	btfss	3,2
  7888  087D  2869               	goto	l3736
  7889  087E  0020               	movlb	0	; select bank0
  7890  087F  0827               	movf	___wmul@product+1,w
  7891  0880  00F1               	movwf	?___wmul+1
  7892  0881  0826               	movf	___wmul@product,w
  7893  0882  00F0               	movwf	?___wmul
  7894  0883  0008               	return
  7895  0884                     __end_of___wmul:	
  7896                           
  7897                           	psect	text29
  7898  0B24                     __ptext29:	
  7899 ;; *************** function ___llmod *****************
  7900 ;; Defined at:
  7901 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;  divisor         4   19[BANK0 ] unsigned long 
  7904 ;;  dividend        4   23[BANK0 ] unsigned long 
  7905 ;; Auto vars:     Size  Location     Type
  7906 ;;  counter         1    0[COMMON] unsigned char 
  7907 ;; Return value:  Size  Location     Type
  7908 ;;                  4   19[BANK0 ] unsigned long 
  7909 ;; Registers used:
  7910 ;;		wreg, status,2, status,0, btemp+11
  7911 ;; Tracked objects:
  7912 ;;		On entry : 0/0
  7913 ;;		On exit  : 0/0
  7914 ;;		Unchanged: 0/0
  7915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7916 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7917 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7919 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7920 ;;Total ram usage:        9 bytes
  7921 ;; Hardware stack levels used:    1
  7922 ;; Hardware stack levels required when called:    7
  7923 ;; This function calls:
  7924 ;;		Nothing
  7925 ;; This function is called by:
  7926 ;;		_sprintf
  7927 ;; This function uses a non-reentrant model
  7928 ;;
  7929                           
  7930                           
  7931                           ;psect for function ___llmod
  7932  0B24                     ___llmod:	
  7933                           
  7934                           ;incstack = 0
  7935                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+11]
  7936  0B24  0020               	movlb	0	; select bank0
  7937  0B25  0836               	movf	___llmod@divisor+3,w
  7938  0B26  0435               	iorwf	___llmod@divisor+2,w
  7939  0B27  0434               	iorwf	___llmod@divisor+1,w
  7940  0B28  0433               	iorwf	___llmod@divisor,w
  7941  0B29  1903               	skipnz
  7942  0B2A  2B5E               	goto	l3868
  7943  0B2B  01F0               	clrf	___llmod@counter
  7944  0B2C  0AF0               	incf	___llmod@counter,f
  7945  0B2D                     l3858:	
  7946  0B2D  1BB6               	btfsc	___llmod@divisor+3,7
  7947  0B2E  2B3B               	goto	l3860
  7948  0B2F  3001               	movlw	1
  7949  0B30                     u4045:	
  7950  0B30  35B3               	lslf	___llmod@divisor,f
  7951  0B31  0DB4               	rlf	___llmod@divisor+1,f
  7952  0B32  0DB5               	rlf	___llmod@divisor+2,f
  7953  0B33  0DB6               	rlf	___llmod@divisor+3,f
  7954  0B34  0B89               	decfsz	9,f
  7955  0B35  2B30               	goto	u4045
  7956  0B36  3001               	movlw	1
  7957  0B37  00FF               	movwf	127
  7958  0B38  087F               	movf	127,w
  7959  0B39  07F0               	addwf	___llmod@counter,f
  7960  0B3A  2B2D               	goto	l3858
  7961  0B3B                     l3860:	
  7962  0B3B  0836               	movf	___llmod@divisor+3,w
  7963  0B3C  023A               	subwf	___llmod@dividend+3,w
  7964  0B3D  1D03               	skipz
  7965  0B3E  2B49               	goto	u4065
  7966  0B3F  0835               	movf	___llmod@divisor+2,w
  7967  0B40  0239               	subwf	___llmod@dividend+2,w
  7968  0B41  1D03               	skipz
  7969  0B42  2B49               	goto	u4065
  7970  0B43  0834               	movf	___llmod@divisor+1,w
  7971  0B44  0238               	subwf	___llmod@dividend+1,w
  7972  0B45  1D03               	skipz
  7973  0B46  2B49               	goto	u4065
  7974  0B47  0833               	movf	___llmod@divisor,w
  7975  0B48  0237               	subwf	___llmod@dividend,w
  7976  0B49                     u4065:	
  7977  0B49  1C03               	skipc
  7978  0B4A  2B53               	goto	l3864
  7979  0B4B  0833               	movf	___llmod@divisor,w
  7980  0B4C  02B7               	subwf	___llmod@dividend,f
  7981  0B4D  0834               	movf	___llmod@divisor+1,w
  7982  0B4E  3BB8               	subwfb	___llmod@dividend+1,f
  7983  0B4F  0835               	movf	___llmod@divisor+2,w
  7984  0B50  3BB9               	subwfb	___llmod@dividend+2,f
  7985  0B51  0836               	movf	___llmod@divisor+3,w
  7986  0B52  3BBA               	subwfb	___llmod@dividend+3,f
  7987  0B53                     l3864:	
  7988  0B53  3001               	movlw	1
  7989  0B54                     u4075:	
  7990  0B54  36B6               	lsrf	___llmod@divisor+3,f
  7991  0B55  0CB5               	rrf	___llmod@divisor+2,f
  7992  0B56  0CB4               	rrf	___llmod@divisor+1,f
  7993  0B57  0CB3               	rrf	___llmod@divisor,f
  7994  0B58  0B89               	decfsz	9,f
  7995  0B59  2B54               	goto	u4075
  7996  0B5A  3001               	movlw	1
  7997  0B5B  02F0               	subwf	___llmod@counter,f
  7998  0B5C  1D03               	btfss	3,2
  7999  0B5D  2B3B               	goto	l3860
  8000  0B5E                     l3868:	
  8001  0B5E  083A               	movf	___llmod@dividend+3,w
  8002  0B5F  00B6               	movwf	?___llmod+3
  8003  0B60  0839               	movf	___llmod@dividend+2,w
  8004  0B61  00B5               	movwf	?___llmod+2
  8005  0B62  0838               	movf	___llmod@dividend+1,w
  8006  0B63  00B4               	movwf	?___llmod+1
  8007  0B64  0837               	movf	___llmod@dividend,w
  8008  0B65  00B3               	movwf	?___llmod
  8009  0B66  0008               	return
  8010  0B67                     __end_of___llmod:	
  8011                           
  8012                           	psect	text30
  8013  0C3A                     __ptext30:	
  8014 ;; *************** function ___lldiv *****************
  8015 ;; Defined at:
  8016 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  8017 ;; Parameters:    Size  Location     Type
  8018 ;;  divisor         4    6[BANK0 ] unsigned long 
  8019 ;;  dividend        4   10[BANK0 ] unsigned long 
  8020 ;; Auto vars:     Size  Location     Type
  8021 ;;  quotient        4   14[BANK0 ] unsigned long 
  8022 ;;  counter         1   18[BANK0 ] unsigned char 
  8023 ;; Return value:  Size  Location     Type
  8024 ;;                  4    6[BANK0 ] unsigned long 
  8025 ;; Registers used:
  8026 ;;		wreg, status,2, status,0, btemp+11
  8027 ;; Tracked objects:
  8028 ;;		On entry : 0/0
  8029 ;;		On exit  : 0/0
  8030 ;;		Unchanged: 0/0
  8031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8032 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8033 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8035 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8036 ;;Total ram usage:       13 bytes
  8037 ;; Hardware stack levels used:    1
  8038 ;; Hardware stack levels required when called:    7
  8039 ;; This function calls:
  8040 ;;		Nothing
  8041 ;; This function is called by:
  8042 ;;		_sprintf
  8043 ;; This function uses a non-reentrant model
  8044 ;;
  8045                           
  8046                           
  8047                           ;psect for function ___lldiv
  8048  0C3A                     ___lldiv:	
  8049                           
  8050                           ;incstack = 0
  8051                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+11]
  8052  0C3A  3000               	movlw	0
  8053  0C3B  0020               	movlb	0	; select bank0
  8054  0C3C  00B1               	movwf	___lldiv@quotient+3
  8055  0C3D  3000               	movlw	0
  8056  0C3E  00B0               	movwf	___lldiv@quotient+2
  8057  0C3F  3000               	movlw	0
  8058  0C40  00AF               	movwf	___lldiv@quotient+1
  8059  0C41  3000               	movlw	0
  8060  0C42  00AE               	movwf	___lldiv@quotient
  8061  0C43  0829               	movf	___lldiv@divisor+3,w
  8062  0C44  0428               	iorwf	___lldiv@divisor+2,w
  8063  0C45  0427               	iorwf	___lldiv@divisor+1,w
  8064  0C46  0426               	iorwf	___lldiv@divisor,w
  8065  0C47  1903               	skipnz
  8066  0C48  2C84               	goto	l3770
  8067  0C49  01B2               	clrf	___lldiv@counter
  8068  0C4A  0AB2               	incf	___lldiv@counter,f
  8069  0C4B                     l3756:	
  8070  0C4B  1BA9               	btfsc	___lldiv@divisor+3,7
  8071  0C4C  2C59               	goto	l3758
  8072  0C4D  3001               	movlw	1
  8073  0C4E                     u3745:	
  8074  0C4E  35A6               	lslf	___lldiv@divisor,f
  8075  0C4F  0DA7               	rlf	___lldiv@divisor+1,f
  8076  0C50  0DA8               	rlf	___lldiv@divisor+2,f
  8077  0C51  0DA9               	rlf	___lldiv@divisor+3,f
  8078  0C52  0B89               	decfsz	9,f
  8079  0C53  2C4E               	goto	u3745
  8080  0C54  3001               	movlw	1
  8081  0C55  00FF               	movwf	127
  8082  0C56  087F               	movf	127,w
  8083  0C57  07B2               	addwf	___lldiv@counter,f
  8084  0C58  2C4B               	goto	l3756
  8085  0C59                     l3758:	
  8086  0C59  3001               	movlw	1
  8087  0C5A                     u3765:	
  8088  0C5A  35AE               	lslf	___lldiv@quotient,f
  8089  0C5B  0DAF               	rlf	___lldiv@quotient+1,f
  8090  0C5C  0DB0               	rlf	___lldiv@quotient+2,f
  8091  0C5D  0DB1               	rlf	___lldiv@quotient+3,f
  8092  0C5E  0B89               	decfsz	9,f
  8093  0C5F  2C5A               	goto	u3765
  8094  0C60  0829               	movf	___lldiv@divisor+3,w
  8095  0C61  022D               	subwf	___lldiv@dividend+3,w
  8096  0C62  1D03               	skipz
  8097  0C63  2C6E               	goto	u3775
  8098  0C64  0828               	movf	___lldiv@divisor+2,w
  8099  0C65  022C               	subwf	___lldiv@dividend+2,w
  8100  0C66  1D03               	skipz
  8101  0C67  2C6E               	goto	u3775
  8102  0C68  0827               	movf	___lldiv@divisor+1,w
  8103  0C69  022B               	subwf	___lldiv@dividend+1,w
  8104  0C6A  1D03               	skipz
  8105  0C6B  2C6E               	goto	u3775
  8106  0C6C  0826               	movf	___lldiv@divisor,w
  8107  0C6D  022A               	subwf	___lldiv@dividend,w
  8108  0C6E                     u3775:	
  8109  0C6E  1C03               	skipc
  8110  0C6F  2C79               	goto	l3766
  8111  0C70  0826               	movf	___lldiv@divisor,w
  8112  0C71  02AA               	subwf	___lldiv@dividend,f
  8113  0C72  0827               	movf	___lldiv@divisor+1,w
  8114  0C73  3BAB               	subwfb	___lldiv@dividend+1,f
  8115  0C74  0828               	movf	___lldiv@divisor+2,w
  8116  0C75  3BAC               	subwfb	___lldiv@dividend+2,f
  8117  0C76  0829               	movf	___lldiv@divisor+3,w
  8118  0C77  3BAD               	subwfb	___lldiv@dividend+3,f
  8119  0C78  142E               	bsf	___lldiv@quotient,0
  8120  0C79                     l3766:	
  8121  0C79  3001               	movlw	1
  8122  0C7A                     u3785:	
  8123  0C7A  36A9               	lsrf	___lldiv@divisor+3,f
  8124  0C7B  0CA8               	rrf	___lldiv@divisor+2,f
  8125  0C7C  0CA7               	rrf	___lldiv@divisor+1,f
  8126  0C7D  0CA6               	rrf	___lldiv@divisor,f
  8127  0C7E  0B89               	decfsz	9,f
  8128  0C7F  2C7A               	goto	u3785
  8129  0C80  3001               	movlw	1
  8130  0C81  02B2               	subwf	___lldiv@counter,f
  8131  0C82  1D03               	btfss	3,2
  8132  0C83  2C59               	goto	l3758
  8133  0C84                     l3770:	
  8134  0C84  0831               	movf	___lldiv@quotient+3,w
  8135  0C85  00A9               	movwf	?___lldiv+3
  8136  0C86  0830               	movf	___lldiv@quotient+2,w
  8137  0C87  00A8               	movwf	?___lldiv+2
  8138  0C88  082F               	movf	___lldiv@quotient+1,w
  8139  0C89  00A7               	movwf	?___lldiv+1
  8140  0C8A  082E               	movf	___lldiv@quotient,w
  8141  0C8B  00A6               	movwf	?___lldiv
  8142  0C8C  0008               	return
  8143  0C8D                     __end_of___lldiv:	
  8144                           
  8145                           	psect	text31
  8146  0991                     __ptext31:	
  8147 ;; *************** function ___lltoft *****************
  8148 ;; Defined at:
  8149 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  8150 ;; Parameters:    Size  Location     Type
  8151 ;;  c               4    0[COMMON] unsigned long 
  8152 ;; Auto vars:     Size  Location     Type
  8153 ;;  exp             1   11[BANK0 ] unsigned char 
  8154 ;; Return value:  Size  Location     Type
  8155 ;;                  3    0[COMMON] float 
  8156 ;; Registers used:
  8157 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8158 ;; Tracked objects:
  8159 ;;		On entry : 0/0
  8160 ;;		On exit  : 0/0
  8161 ;;		Unchanged: 0/0
  8162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8163 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8166 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8167 ;;Total ram usage:        5 bytes
  8168 ;; Hardware stack levels used:    1
  8169 ;; Hardware stack levels required when called:    8
  8170 ;; This function calls:
  8171 ;;		___ftpack
  8172 ;; This function is called by:
  8173 ;;		_loop
  8174 ;;		_ftoa
  8175 ;; This function uses a non-reentrant model
  8176 ;;
  8177                           
  8178                           
  8179                           ;psect for function ___lltoft
  8180  0991                     ___lltoft:	
  8181                           
  8182                           ;incstack = 0
  8183                           ; Regs used in ___lltoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8184  0991  308E               	movlw	142
  8185  0992  00FF               	movwf	127
  8186  0993  087F               	movf	127,w
  8187  0994  0020               	movlb	0	; select bank0
  8188  0995  00AB               	movwf	___lltoft@exp
  8189  0996                     l4200:	
  8190  0996  30FF               	movlw	255
  8191  0997  0573               	andwf	___lltoft@c+3,w
  8192  0998  1903               	btfsc	3,2
  8193  0999  29A6               	goto	l4202
  8194  099A  3001               	movlw	1
  8195  099B                     u4685:	
  8196  099B  36F3               	lsrf	___lltoft@c+3,f
  8197  099C  0CF2               	rrf	___lltoft@c+2,f
  8198  099D  0CF1               	rrf	___lltoft@c+1,f
  8199  099E  0CF0               	rrf	___lltoft@c,f
  8200  099F  0B89               	decfsz	9,f
  8201  09A0  299B               	goto	u4685
  8202  09A1  3001               	movlw	1
  8203  09A2  00FF               	movwf	127
  8204  09A3  087F               	movf	127,w
  8205  09A4  07AB               	addwf	___lltoft@exp,f
  8206  09A5  2996               	goto	l4200
  8207  09A6                     l4202:	
  8208  09A6  0870               	movf	___lltoft@c,w
  8209  09A7  00A6               	movwf	___ftpack@arg
  8210  09A8  0871               	movf	___lltoft@c+1,w
  8211  09A9  00A7               	movwf	___ftpack@arg+1
  8212  09AA  0872               	movf	___lltoft@c+2,w
  8213  09AB  00A8               	movwf	___ftpack@arg+2
  8214  09AC  082B               	movf	___lltoft@exp,w
  8215  09AD  00FF               	movwf	127
  8216  09AE  087F               	movf	127,w
  8217  09AF  00A9               	movwf	___ftpack@exp
  8218  09B0  01AA               	clrf	___ftpack@sign
  8219  09B1  3187  2788         	fcall	___ftpack
  8220  09B3  0020               	movlb	0	; select bank0
  8221  09B4  0826               	movf	?___ftpack,w
  8222  09B5  00F0               	movwf	?___lltoft
  8223  09B6  0827               	movf	?___ftpack+1,w
  8224  09B7  00F1               	movwf	?___lltoft+1
  8225  09B8  0828               	movf	?___ftpack+2,w
  8226  09B9  00F2               	movwf	?___lltoft+2
  8227  09BA  0008               	return
  8228  09BB                     __end_of___lltoft:	
  8229                           
  8230                           	psect	text32
  8231  0D91                     __ptext32:	
  8232 ;; *************** function ___fttol *****************
  8233 ;; Defined at:
  8234 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  8235 ;; Parameters:    Size  Location     Type
  8236 ;;  f1              3   56[BANK0 ] float 
  8237 ;; Auto vars:     Size  Location     Type
  8238 ;;  lval            4   61[BANK0 ] unsigned long 
  8239 ;;  exp1            1   65[BANK0 ] unsigned char 
  8240 ;;  sign1           1   60[BANK0 ] unsigned char 
  8241 ;; Return value:  Size  Location     Type
  8242 ;;                  4   56[BANK0 ] long 
  8243 ;; Registers used:
  8244 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8245 ;; Tracked objects:
  8246 ;;		On entry : 0/0
  8247 ;;		On exit  : 0/0
  8248 ;;		Unchanged: 0/0
  8249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8250 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8251 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8253 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8254 ;;Total ram usage:       10 bytes
  8255 ;; Hardware stack levels used:    1
  8256 ;; Hardware stack levels required when called:    7
  8257 ;; This function calls:
  8258 ;;		Nothing
  8259 ;; This function is called by:
  8260 ;;		_ftoa
  8261 ;; This function uses a non-reentrant model
  8262 ;;
  8263                           
  8264                           
  8265                           ;psect for function ___fttol
  8266  0D91                     ___fttol:	
  8267                           
  8268                           ;incstack = 0
  8269                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+9-btemp+11]
  8270  0D91  0020               	movlb	0	; select bank0
  8271  0D92  0858               	movf	___fttol@f1,w
  8272  0D93  00FD               	movwf	125
  8273  0D94  0859               	movf	___fttol@f1+1,w
  8274  0D95  00FE               	movwf	126
  8275  0D96  085A               	movf	___fttol@f1+2,w
  8276  0D97  00FF               	movwf	127
  8277  0D98  1003               	clrc
  8278  0D99  0D7E               	rlf	126,w
  8279  0D9A  0D7F               	rlf	127,w
  8280  0D9B  00FF               	movwf	127
  8281  0D9C  087F               	movf	127,w
  8282  0D9D  00E1               	movwf	___fttol@exp1
  8283  0D9E  0861               	movf	___fttol@exp1,w
  8284  0D9F  1D03               	btfss	3,2
  8285  0DA0  2DAA               	goto	l4156
  8286  0DA1  3000               	movlw	0
  8287  0DA2  00DB               	movwf	?___fttol+3
  8288  0DA3  3000               	movlw	0
  8289  0DA4  00DA               	movwf	?___fttol+2
  8290  0DA5  3000               	movlw	0
  8291  0DA6  00D9               	movwf	?___fttol+1
  8292  0DA7  3000               	movlw	0
  8293  0DA8  00D8               	movwf	?___fttol
  8294  0DA9  0008               	return
  8295  0DAA                     l4156:	
  8296  0DAA  0858               	movf	___fttol@f1,w
  8297  0DAB  00FD               	movwf	125
  8298  0DAC  0859               	movf	___fttol@f1+1,w
  8299  0DAD  00FE               	movwf	126
  8300  0DAE  085A               	movf	___fttol@f1+2,w
  8301  0DAF  00FF               	movwf	127
  8302  0DB0  3017               	movlw	23
  8303  0DB1                     u4595:	
  8304  0DB1  36FF               	lsrf	127,f
  8305  0DB2  0CFE               	rrf	126,f
  8306  0DB3  0CFD               	rrf	125,f
  8307  0DB4  0B89               	decfsz	9,f
  8308  0DB5  2DB1               	goto	u4595
  8309  0DB6  087D               	movf	125,w
  8310  0DB7  00FF               	movwf	127
  8311  0DB8  087F               	movf	127,w
  8312  0DB9  00DC               	movwf	___fttol@sign1
  8313  0DBA  17D9               	bsf	___fttol@f1+1,7
  8314  0DBB  30FF               	movlw	255
  8315  0DBC  05D8               	andwf	___fttol@f1,f
  8316  0DBD  30FF               	movlw	255
  8317  0DBE  05D9               	andwf	___fttol@f1+1,f
  8318  0DBF  3000               	movlw	0
  8319  0DC0  05DA               	andwf	___fttol@f1+2,f
  8320  0DC1  0858               	movf	___fttol@f1,w
  8321  0DC2  00DD               	movwf	___fttol@lval
  8322  0DC3  0859               	movf	___fttol@f1+1,w
  8323  0DC4  00DE               	movwf	___fttol@lval+1
  8324  0DC5  085A               	movf	___fttol@f1+2,w
  8325  0DC6  00DF               	movwf	___fttol@lval+2
  8326  0DC7  01E0               	clrf	___fttol@lval+3
  8327  0DC8  308E               	movlw	142
  8328  0DC9  02E1               	subwf	___fttol@exp1,f
  8329  0DCA  1FE1               	btfss	___fttol@exp1,7
  8330  0DCB  2DE8               	goto	l4178
  8331  0DCC  0861               	movf	___fttol@exp1,w
  8332  0DCD  3A80               	xorlw	128
  8333  0DCE  3E8F               	addlw	143
  8334  0DCF  1803               	skipnc
  8335  0DD0  2DDA               	goto	l4174
  8336  0DD1  3000               	movlw	0
  8337  0DD2  00DB               	movwf	?___fttol+3
  8338  0DD3  3000               	movlw	0
  8339  0DD4  00DA               	movwf	?___fttol+2
  8340  0DD5  3000               	movlw	0
  8341  0DD6  00D9               	movwf	?___fttol+1
  8342  0DD7  3000               	movlw	0
  8343  0DD8  00D8               	movwf	?___fttol
  8344  0DD9  0008               	return
  8345  0DDA                     l4174:	
  8346  0DDA  3001               	movlw	1
  8347  0DDB                     u4625:	
  8348  0DDB  36E0               	lsrf	___fttol@lval+3,f
  8349  0DDC  0CDF               	rrf	___fttol@lval+2,f
  8350  0DDD  0CDE               	rrf	___fttol@lval+1,f
  8351  0DDE  0CDD               	rrf	___fttol@lval,f
  8352  0DDF  0B89               	decfsz	9,f
  8353  0DE0  2DDB               	goto	u4625
  8354  0DE1  3001               	movlw	1
  8355  0DE2  00FF               	movwf	127
  8356  0DE3  087F               	movf	127,w
  8357  0DE4  07E1               	addwf	___fttol@exp1,f
  8358  0DE5  1903               	btfsc	3,2
  8359  0DE6  2E01               	goto	l4186
  8360  0DE7  2DDA               	goto	l4174
  8361  0DE8                     l4178:	
  8362  0DE8  3018               	movlw	24
  8363  0DE9  0261               	subwf	___fttol@exp1,w
  8364  0DEA  1C03               	skipc
  8365  0DEB  2DFE               	goto	l826
  8366  0DEC  3000               	movlw	0
  8367  0DED  00DB               	movwf	?___fttol+3
  8368  0DEE  3000               	movlw	0
  8369  0DEF  00DA               	movwf	?___fttol+2
  8370  0DF0  3000               	movlw	0
  8371  0DF1  00D9               	movwf	?___fttol+1
  8372  0DF2  3000               	movlw	0
  8373  0DF3  00D8               	movwf	?___fttol
  8374  0DF4  0008               	return
  8375  0DF5                     l4184:	
  8376  0DF5  3001               	movlw	1
  8377  0DF6                     u4655:	
  8378  0DF6  35DD               	lslf	___fttol@lval,f
  8379  0DF7  0DDE               	rlf	___fttol@lval+1,f
  8380  0DF8  0DDF               	rlf	___fttol@lval+2,f
  8381  0DF9  0DE0               	rlf	___fttol@lval+3,f
  8382  0DFA  0B89               	decfsz	9,f
  8383  0DFB  2DF6               	goto	u4655
  8384  0DFC  3001               	movlw	1
  8385  0DFD  02E1               	subwf	___fttol@exp1,f
  8386  0DFE                     l826:	
  8387  0DFE  0861               	movf	___fttol@exp1,w
  8388  0DFF  1D03               	btfss	3,2
  8389  0E00  2DF5               	goto	l4184
  8390  0E01                     l4186:	
  8391  0E01  085C               	movf	___fttol@sign1,w
  8392  0E02  1903               	btfsc	3,2
  8393  0E03  2E0F               	goto	l4190
  8394  0E04  09DD               	comf	___fttol@lval,f
  8395  0E05  09DE               	comf	___fttol@lval+1,f
  8396  0E06  09DF               	comf	___fttol@lval+2,f
  8397  0E07  09E0               	comf	___fttol@lval+3,f
  8398  0E08  0ADD               	incf	___fttol@lval,f
  8399  0E09  1903               	skipnz
  8400  0E0A  0ADE               	incf	___fttol@lval+1,f
  8401  0E0B  1903               	skipnz
  8402  0E0C  0ADF               	incf	___fttol@lval+2,f
  8403  0E0D  1903               	skipnz
  8404  0E0E  0AE0               	incf	___fttol@lval+3,f
  8405  0E0F                     l4190:	
  8406  0E0F  0860               	movf	___fttol@lval+3,w
  8407  0E10  00DB               	movwf	?___fttol+3
  8408  0E11  085F               	movf	___fttol@lval+2,w
  8409  0E12  00DA               	movwf	?___fttol+2
  8410  0E13  085E               	movf	___fttol@lval+1,w
  8411  0E14  00D9               	movwf	?___fttol+1
  8412  0E15  085D               	movf	___fttol@lval,w
  8413  0E16  00D8               	movwf	?___fttol
  8414  0E17  0008               	return
  8415  0E18                     __end_of___fttol:	
  8416                           
  8417                           	psect	text33
  8418  0848                     __ptext33:	
  8419 ;; *************** function ___ftsub *****************
  8420 ;; Defined at:
  8421 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  8422 ;; Parameters:    Size  Location     Type
  8423 ;;  f2              3   21[BANK0 ] float 
  8424 ;;  f1              3   24[BANK0 ] float 
  8425 ;; Auto vars:     Size  Location     Type
  8426 ;;		None
  8427 ;; Return value:  Size  Location     Type
  8428 ;;                  3   21[BANK0 ] float 
  8429 ;; Registers used:
  8430 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8431 ;; Tracked objects:
  8432 ;;		On entry : 0/0
  8433 ;;		On exit  : 0/0
  8434 ;;		Unchanged: 0/0
  8435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8436 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8439 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8440 ;;Total ram usage:        6 bytes
  8441 ;; Hardware stack levels used:    1
  8442 ;; Hardware stack levels required when called:    9
  8443 ;; This function calls:
  8444 ;;		___ftadd
  8445 ;; This function is called by:
  8446 ;;		_ftoa
  8447 ;; This function uses a non-reentrant model
  8448 ;;
  8449                           
  8450                           
  8451                           ;psect for function ___ftsub
  8452  0848                     ___ftsub:	
  8453                           
  8454                           ;incstack = 0
  8455                           ; Regs used in ___ftsub: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8456  0848  0020               	movlb	0	; select bank0
  8457  0849  0837               	movf	___ftsub@f2+2,w
  8458  084A  0436               	iorwf	___ftsub@f2+1,w
  8459  084B  0435               	iorwf	___ftsub@f2,w
  8460  084C  1903               	skipnz
  8461  084D  2850               	goto	l4146
  8462  084E  3080               	movlw	128
  8463  084F  06B7               	xorwf	___ftsub@f2+2,f
  8464  0850                     l4146:	
  8465  0850  0838               	movf	___ftsub@f1,w
  8466  0851  00AB               	movwf	___ftadd@f1
  8467  0852  0839               	movf	___ftsub@f1+1,w
  8468  0853  00AC               	movwf	___ftadd@f1+1
  8469  0854  083A               	movf	___ftsub@f1+2,w
  8470  0855  00AD               	movwf	___ftadd@f1+2
  8471  0856  0835               	movf	___ftsub@f2,w
  8472  0857  00AE               	movwf	___ftadd@f2
  8473  0858  0836               	movf	___ftsub@f2+1,w
  8474  0859  00AF               	movwf	___ftadd@f2+1
  8475  085A  0837               	movf	___ftsub@f2+2,w
  8476  085B  00B0               	movwf	___ftadd@f2+2
  8477  085C  3184  244E         	fcall	___ftadd
  8478  085E  0020               	movlb	0	; select bank0
  8479  085F  082B               	movf	?___ftadd,w
  8480  0860  00B5               	movwf	?___ftsub
  8481  0861  082C               	movf	?___ftadd+1,w
  8482  0862  00B6               	movwf	?___ftsub+1
  8483  0863  082D               	movf	?___ftadd+2,w
  8484  0864  00B7               	movwf	?___ftsub+2
  8485  0865  0008               	return
  8486  0866                     __end_of___ftsub:	
  8487                           
  8488                           	psect	text34
  8489  1793                     __ptext34:	
  8490 ;; *************** function ___ftneg *****************
  8491 ;; Defined at:
  8492 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  8493 ;; Parameters:    Size  Location     Type
  8494 ;;  f1              3   44[BANK0 ] float 
  8495 ;; Auto vars:     Size  Location     Type
  8496 ;;		None
  8497 ;; Return value:  Size  Location     Type
  8498 ;;                  3   44[BANK0 ] float 
  8499 ;; Registers used:
  8500 ;;		wreg
  8501 ;; Tracked objects:
  8502 ;;		On entry : 0/0
  8503 ;;		On exit  : 0/0
  8504 ;;		Unchanged: 0/0
  8505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8506 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8509 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8510 ;;Total ram usage:        3 bytes
  8511 ;; Hardware stack levels used:    1
  8512 ;; Hardware stack levels required when called:    7
  8513 ;; This function calls:
  8514 ;;		Nothing
  8515 ;; This function is called by:
  8516 ;;		_loop
  8517 ;;		_ftoa
  8518 ;; This function uses a non-reentrant model
  8519 ;;
  8520                           
  8521                           
  8522                           ;psect for function ___ftneg
  8523  1793                     ___ftneg:	
  8524                           
  8525                           ;incstack = 0
  8526                           ; Regs used in ___ftneg: [wreg]
  8527  1793  0020               	movlb	0	; select bank0
  8528  1794  084E               	movf	___ftneg@f1+2,w
  8529  1795  044D               	iorwf	___ftneg@f1+1,w
  8530  1796  044C               	iorwf	___ftneg@f1,w
  8531  1797  1903               	skipnz
  8532  1798  0008               	return
  8533  1799  3080               	movlw	128
  8534  179A  06CE               	xorwf	___ftneg@f1+2,f
  8535  179B  0008               	return
  8536  179C                     __end_of___ftneg:	
  8537                           
  8538                           	psect	text35
  8539  062B                     __ptext35:	
  8540 ;; *************** function ___ftmul *****************
  8541 ;; Defined at:
  8542 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  8543 ;; Parameters:    Size  Location     Type
  8544 ;;  f1              3   44[BANK0 ] float 
  8545 ;;  f2              3   47[BANK0 ] float 
  8546 ;; Auto vars:     Size  Location     Type
  8547 ;;  f3_as_produc    3   51[BANK0 ] unsigned um
  8548 ;;  sign            1   55[BANK0 ] unsigned char 
  8549 ;;  cntr            1   54[BANK0 ] unsigned char 
  8550 ;;  exp             1   50[BANK0 ] unsigned char 
  8551 ;; Return value:  Size  Location     Type
  8552 ;;                  3   44[BANK0 ] float 
  8553 ;; Registers used:
  8554 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8555 ;; Tracked objects:
  8556 ;;		On entry : 0/0
  8557 ;;		On exit  : 0/0
  8558 ;;		Unchanged: 0/0
  8559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8560 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8561 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8563 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8564 ;;Total ram usage:       12 bytes
  8565 ;; Hardware stack levels used:    1
  8566 ;; Hardware stack levels required when called:    8
  8567 ;; This function calls:
  8568 ;;		___ftpack
  8569 ;; This function is called by:
  8570 ;;		_loop
  8571 ;;		_ftoa
  8572 ;; This function uses a non-reentrant model
  8573 ;;
  8574                           
  8575                           
  8576                           ;psect for function ___ftmul
  8577  062B                     ___ftmul:	
  8578                           
  8579                           ;incstack = 0
  8580                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8581  062B  0020               	movlb	0	; select bank0
  8582  062C  084C               	movf	___ftmul@f1,w
  8583  062D  00FD               	movwf	125
  8584  062E  084D               	movf	___ftmul@f1+1,w
  8585  062F  00FE               	movwf	126
  8586  0630  084E               	movf	___ftmul@f1+2,w
  8587  0631  00FF               	movwf	127
  8588  0632  1003               	clrc
  8589  0633  0D7E               	rlf	126,w
  8590  0634  0D7F               	rlf	127,w
  8591  0635  00FF               	movwf	127
  8592  0636  087F               	movf	127,w
  8593  0637  00D2               	movwf	___ftmul@exp
  8594  0638  0852               	movf	___ftmul@exp,w
  8595  0639  1D03               	btfss	3,2
  8596  063A  2E42               	goto	l4086
  8597  063B  3000               	movlw	0
  8598  063C  00CC               	movwf	?___ftmul
  8599  063D  3000               	movlw	0
  8600  063E  00CD               	movwf	?___ftmul+1
  8601  063F  3000               	movlw	0
  8602  0640  00CE               	movwf	?___ftmul+2
  8603  0641  0008               	return
  8604  0642                     l4086:	
  8605  0642  084F               	movf	___ftmul@f2,w
  8606  0643  00FD               	movwf	125
  8607  0644  0850               	movf	___ftmul@f2+1,w
  8608  0645  00FE               	movwf	126
  8609  0646  0851               	movf	___ftmul@f2+2,w
  8610  0647  00FF               	movwf	127
  8611  0648  1003               	clrc
  8612  0649  0D7E               	rlf	126,w
  8613  064A  0D7F               	rlf	127,w
  8614  064B  00FF               	movwf	127
  8615  064C  087F               	movf	127,w
  8616  064D  00D7               	movwf	___ftmul@sign
  8617  064E  0857               	movf	___ftmul@sign,w
  8618  064F  1D03               	btfss	3,2
  8619  0650  2E58               	goto	l4092
  8620  0651  3000               	movlw	0
  8621  0652  00CC               	movwf	?___ftmul
  8622  0653  3000               	movlw	0
  8623  0654  00CD               	movwf	?___ftmul+1
  8624  0655  3000               	movlw	0
  8625  0656  00CE               	movwf	?___ftmul+2
  8626  0657  0008               	return
  8627  0658                     l4092:	
  8628  0658  0857               	movf	___ftmul@sign,w
  8629  0659  3E7B               	addlw	123
  8630  065A  00FF               	movwf	127
  8631  065B  087F               	movf	127,w
  8632  065C  07D2               	addwf	___ftmul@exp,f
  8633  065D  084C               	movf	___ftmul@f1,w
  8634  065E  00FD               	movwf	125
  8635  065F  084D               	movf	___ftmul@f1+1,w
  8636  0660  00FE               	movwf	126
  8637  0661  084E               	movf	___ftmul@f1+2,w
  8638  0662  00FF               	movwf	127
  8639  0663  3010               	movlw	16
  8640  0664                     u4465:	
  8641  0664  36FF               	lsrf	127,f
  8642  0665  0CFE               	rrf	126,f
  8643  0666  0CFD               	rrf	125,f
  8644  0667  0B89               	decfsz	9,f
  8645  0668  2E64               	goto	u4465
  8646  0669  087D               	movf	125,w
  8647  066A  00FF               	movwf	127
  8648  066B  087F               	movf	127,w
  8649  066C  00D7               	movwf	___ftmul@sign
  8650  066D  084F               	movf	___ftmul@f2,w
  8651  066E  00FD               	movwf	125
  8652  066F  0850               	movf	___ftmul@f2+1,w
  8653  0670  00FE               	movwf	126
  8654  0671  0851               	movf	___ftmul@f2+2,w
  8655  0672  00FF               	movwf	127
  8656  0673  3010               	movlw	16
  8657  0674                     u4475:	
  8658  0674  36FF               	lsrf	127,f
  8659  0675  0CFE               	rrf	126,f
  8660  0676  0CFD               	rrf	125,f
  8661  0677  0B89               	decfsz	9,f
  8662  0678  2E74               	goto	u4475
  8663  0679  087D               	movf	125,w
  8664  067A  00FF               	movwf	127
  8665  067B  087F               	movf	127,w
  8666  067C  06D7               	xorwf	___ftmul@sign,f
  8667  067D  3080               	movlw	128
  8668  067E  00FF               	movwf	127
  8669  067F  087F               	movf	127,w
  8670  0680  05D7               	andwf	___ftmul@sign,f
  8671  0681  17CD               	bsf	___ftmul@f1+1,7
  8672  0682  17D0               	bsf	___ftmul@f2+1,7
  8673  0683  30FF               	movlw	255
  8674  0684  05CF               	andwf	___ftmul@f2,f
  8675  0685  30FF               	movlw	255
  8676  0686  05D0               	andwf	___ftmul@f2+1,f
  8677  0687  3000               	movlw	0
  8678  0688  05D1               	andwf	___ftmul@f2+2,f
  8679  0689  3000               	movlw	0
  8680  068A  00D3               	movwf	___ftmul@f3_as_product
  8681  068B  3000               	movlw	0
  8682  068C  00D4               	movwf	___ftmul@f3_as_product+1
  8683  068D  3000               	movlw	0
  8684  068E  00D5               	movwf	___ftmul@f3_as_product+2
  8685  068F  3007               	movlw	7
  8686  0690  00FF               	movwf	127
  8687  0691  087F               	movf	127,w
  8688  0692  00D6               	movwf	___ftmul@cntr
  8689  0693                     l4108:	
  8690  0693  1C4C               	btfss	___ftmul@f1,0
  8691  0694  2E9B               	goto	l4112
  8692  0695  084F               	movf	___ftmul@f2,w
  8693  0696  07D3               	addwf	___ftmul@f3_as_product,f
  8694  0697  0850               	movf	___ftmul@f2+1,w
  8695  0698  3DD4               	addwfc	___ftmul@f3_as_product+1,f
  8696  0699  0851               	movf	___ftmul@f2+2,w
  8697  069A  3DD5               	addwfc	___ftmul@f3_as_product+2,f
  8698  069B                     l4112:	
  8699  069B  3001               	movlw	1
  8700  069C                     u4495:	
  8701  069C  36CE               	lsrf	___ftmul@f1+2,f
  8702  069D  0CCD               	rrf	___ftmul@f1+1,f
  8703  069E  0CCC               	rrf	___ftmul@f1,f
  8704  069F  0B89               	decfsz	9,f
  8705  06A0  2E9C               	goto	u4495
  8706  06A1  3001               	movlw	1
  8707  06A2                     u4505:	
  8708  06A2  35CF               	lslf	___ftmul@f2,f
  8709  06A3  0DD0               	rlf	___ftmul@f2+1,f
  8710  06A4  0DD1               	rlf	___ftmul@f2+2,f
  8711  06A5  0B89               	decfsz	9,f
  8712  06A6  2EA2               	goto	u4505
  8713  06A7  3001               	movlw	1
  8714  06A8  02D6               	subwf	___ftmul@cntr,f
  8715  06A9  1D03               	btfss	3,2
  8716  06AA  2E93               	goto	l4108
  8717  06AB  3009               	movlw	9
  8718  06AC  00FF               	movwf	127
  8719  06AD  087F               	movf	127,w
  8720  06AE  00D6               	movwf	___ftmul@cntr
  8721  06AF                     l4120:	
  8722  06AF  1C4C               	btfss	___ftmul@f1,0
  8723  06B0  2EB7               	goto	l4124
  8724  06B1  084F               	movf	___ftmul@f2,w
  8725  06B2  07D3               	addwf	___ftmul@f3_as_product,f
  8726  06B3  0850               	movf	___ftmul@f2+1,w
  8727  06B4  3DD4               	addwfc	___ftmul@f3_as_product+1,f
  8728  06B5  0851               	movf	___ftmul@f2+2,w
  8729  06B6  3DD5               	addwfc	___ftmul@f3_as_product+2,f
  8730  06B7                     l4124:	
  8731  06B7  3001               	movlw	1
  8732  06B8                     u4535:	
  8733  06B8  36CE               	lsrf	___ftmul@f1+2,f
  8734  06B9  0CCD               	rrf	___ftmul@f1+1,f
  8735  06BA  0CCC               	rrf	___ftmul@f1,f
  8736  06BB  0B89               	decfsz	9,f
  8737  06BC  2EB8               	goto	u4535
  8738  06BD  3001               	movlw	1
  8739  06BE                     u4545:	
  8740  06BE  36D5               	lsrf	___ftmul@f3_as_product+2,f
  8741  06BF  0CD4               	rrf	___ftmul@f3_as_product+1,f
  8742  06C0  0CD3               	rrf	___ftmul@f3_as_product,f
  8743  06C1  0B89               	decfsz	9,f
  8744  06C2  2EBE               	goto	u4545
  8745  06C3  3001               	movlw	1
  8746  06C4  02D6               	subwf	___ftmul@cntr,f
  8747  06C5  1D03               	btfss	3,2
  8748  06C6  2EAF               	goto	l4120
  8749  06C7  0853               	movf	___ftmul@f3_as_product,w
  8750  06C8  00A6               	movwf	___ftpack@arg
  8751  06C9  0854               	movf	___ftmul@f3_as_product+1,w
  8752  06CA  00A7               	movwf	___ftpack@arg+1
  8753  06CB  0855               	movf	___ftmul@f3_as_product+2,w
  8754  06CC  00A8               	movwf	___ftpack@arg+2
  8755  06CD  0852               	movf	___ftmul@exp,w
  8756  06CE  00FF               	movwf	127
  8757  06CF  087F               	movf	127,w
  8758  06D0  00A9               	movwf	___ftpack@exp
  8759  06D1  0857               	movf	___ftmul@sign,w
  8760  06D2  00FF               	movwf	127
  8761  06D3  087F               	movf	127,w
  8762  06D4  00AA               	movwf	___ftpack@sign
  8763  06D5  3187  2788         	fcall	___ftpack
  8764  06D7  0020               	movlb	0	; select bank0
  8765  06D8  0826               	movf	?___ftpack,w
  8766  06D9  00CC               	movwf	?___ftmul
  8767  06DA  0827               	movf	?___ftpack+1,w
  8768  06DB  00CD               	movwf	?___ftmul+1
  8769  06DC  0828               	movf	?___ftpack+2,w
  8770  06DD  00CE               	movwf	?___ftmul+2
  8771  06DE  0008               	return
  8772  06DF                     __end_of___ftmul:	
  8773                           
  8774                           	psect	text36
  8775  0AE8                     __ptext36:	
  8776 ;; *************** function ___ftge *****************
  8777 ;; Defined at:
  8778 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8779 ;; Parameters:    Size  Location     Type
  8780 ;;  ff1             3    6[BANK0 ] float 
  8781 ;;  ff2             3    9[BANK0 ] float 
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;		None
  8784 ;; Return value:  Size  Location     Type
  8785 ;;		None               void
  8786 ;; Registers used:
  8787 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8788 ;; Tracked objects:
  8789 ;;		On entry : 0/0
  8790 ;;		On exit  : 0/0
  8791 ;;		Unchanged: 0/0
  8792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8793 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8796 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8797 ;;Total ram usage:        6 bytes
  8798 ;; Hardware stack levels used:    1
  8799 ;; Hardware stack levels required when called:    7
  8800 ;; This function calls:
  8801 ;;		Nothing
  8802 ;; This function is called by:
  8803 ;;		_ftoa
  8804 ;; This function uses a non-reentrant model
  8805 ;;
  8806                           
  8807                           
  8808                           ;psect for function ___ftge
  8809  0AE8                     ___ftge:	
  8810                           
  8811                           ;incstack = 0
  8812                           ; Regs used in ___ftge: [wreg+status,2+status,0+btemp+9-btemp+11]
  8813  0AE8  0020               	movlb	0	; select bank0
  8814  0AE9  1FA8               	btfss	___ftge@ff1+2,7
  8815  0AEA  2AFF               	goto	l4064
  8816  0AEB  0926               	comf	___ftge@ff1,w
  8817  0AEC  00FD               	movwf	125
  8818  0AED  0927               	comf	___ftge@ff1+1,w
  8819  0AEE  00FE               	movwf	126
  8820  0AEF  0928               	comf	___ftge@ff1+2,w
  8821  0AF0  00FF               	movwf	127
  8822  0AF1  0AFD               	incf	125,f
  8823  0AF2  1903               	skipnz
  8824  0AF3  0AFE               	incf	126,f
  8825  0AF4  1903               	skipnz
  8826  0AF5  0AFF               	incf	127,f
  8827  0AF6  3000               	movlw	0
  8828  0AF7  077D               	addwf	125,w
  8829  0AF8  00A6               	movwf	___ftge@ff1
  8830  0AF9  3000               	movlw	0
  8831  0AFA  3D7E               	addwfc	126,w
  8832  0AFB  00A7               	movwf	___ftge@ff1+1
  8833  0AFC  3080               	movlw	128
  8834  0AFD  3D7F               	addwfc	127,w
  8835  0AFE  00A8               	movwf	___ftge@ff1+2
  8836  0AFF                     l4064:	
  8837  0AFF  1FAB               	btfss	___ftge@ff2+2,7
  8838  0B00  2B15               	goto	l4068
  8839  0B01  0929               	comf	___ftge@ff2,w
  8840  0B02  00FD               	movwf	125
  8841  0B03  092A               	comf	___ftge@ff2+1,w
  8842  0B04  00FE               	movwf	126
  8843  0B05  092B               	comf	___ftge@ff2+2,w
  8844  0B06  00FF               	movwf	127
  8845  0B07  0AFD               	incf	125,f
  8846  0B08  1903               	skipnz
  8847  0B09  0AFE               	incf	126,f
  8848  0B0A  1903               	skipnz
  8849  0B0B  0AFF               	incf	127,f
  8850  0B0C  3000               	movlw	0
  8851  0B0D  077D               	addwf	125,w
  8852  0B0E  00A9               	movwf	___ftge@ff2
  8853  0B0F  3000               	movlw	0
  8854  0B10  3D7E               	addwfc	126,w
  8855  0B11  00AA               	movwf	___ftge@ff2+1
  8856  0B12  3080               	movlw	128
  8857  0B13  3D7F               	addwfc	127,w
  8858  0B14  00AB               	movwf	___ftge@ff2+2
  8859  0B15                     l4068:	
  8860  0B15  3080               	movlw	128
  8861  0B16  06A8               	xorwf	___ftge@ff1+2,f
  8862  0B17  3080               	movlw	128
  8863  0B18  06AB               	xorwf	___ftge@ff2+2,f
  8864  0B19  082B               	movf	___ftge@ff2+2,w
  8865  0B1A  0228               	subwf	___ftge@ff1+2,w
  8866  0B1B  1D03               	skipz
  8867  0B1C  0008               	return
  8868  0B1D  082A               	movf	___ftge@ff2+1,w
  8869  0B1E  0227               	subwf	___ftge@ff1+1,w
  8870  0B1F  1D03               	skipz
  8871  0B20  0008               	return
  8872  0B21  0829               	movf	___ftge@ff2,w
  8873  0B22  0226               	subwf	___ftge@ff1,w
  8874  0B23  0008               	return
  8875  0B24                     __end_of___ftge:	
  8876                           
  8877                           	psect	text37
  8878  17AE                     __ptext37:	
  8879 ;; *************** function _hcsr04Trigger *****************
  8880 ;; Defined at:
  8881 ;;		line 30 in file "HC-SR04.c"
  8882 ;; Parameters:    Size  Location     Type
  8883 ;;		None
  8884 ;; Auto vars:     Size  Location     Type
  8885 ;;		None
  8886 ;; Return value:  Size  Location     Type
  8887 ;;                  1    wreg      void 
  8888 ;; Registers used:
  8889 ;;		wreg
  8890 ;; Tracked objects:
  8891 ;;		On entry : 0/0
  8892 ;;		On exit  : 0/0
  8893 ;;		Unchanged: 0/0
  8894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8899 ;;Total ram usage:        0 bytes
  8900 ;; Hardware stack levels used:    1
  8901 ;; Hardware stack levels required when called:    7
  8902 ;; This function calls:
  8903 ;;		Nothing
  8904 ;; This function is called by:
  8905 ;;		_loop
  8906 ;; This function uses a non-reentrant model
  8907 ;;
  8908                           
  8909                           
  8910                           ;psect for function _hcsr04Trigger
  8911  17AE                     _hcsr04Trigger:	
  8912                           
  8913                           ;HC-SR04.c: 32: counter++;
  8914                           
  8915                           ;incstack = 0
  8916                           ; Regs used in _hcsr04Trigger: [wreg]
  8917  17AE  3001               	movlw	1
  8918  17AF  0021               	movlb	1	; select bank1
  8919  17B0  07DD               	addwf	_counter^(0+128),f
  8920  17B1  3000               	movlw	0
  8921  17B2  3DDE               	addwfc	(_counter+1)^(0+128),f
  8922  17B3  3000               	movlw	0
  8923  17B4  3DDF               	addwfc	(_counter+2)^(0+128),f
  8924  17B5  3000               	movlw	0
  8925  17B6  3DE0               	addwfc	(_counter+3)^(0+128),f
  8926  17B7  0008               	return
  8927  17B8                     __end_of_hcsr04Trigger:	
  8928                           
  8929                           	psect	text38
  8930  0C8D                     __ptext38:	
  8931 ;; *************** function _hcsr04GetAerage *****************
  8932 ;; Defined at:
  8933 ;;		line 39 in file "HC-SR04.c"
  8934 ;; Parameters:    Size  Location     Type
  8935 ;;		None
  8936 ;; Auto vars:     Size  Location     Type
  8937 ;;  average         3   40[BANK0 ] float 
  8938 ;;  limit           1   39[BANK0 ] unsigned char 
  8939 ;;  count           1   38[BANK0 ] unsigned char 
  8940 ;;  loop            1   37[BANK0 ] unsigned char 
  8941 ;; Return value:  Size  Location     Type
  8942 ;;                  3   34[BANK0 ] float 
  8943 ;; Registers used:
  8944 ;;		wreg, status,2, status,0, btemp+0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8945 ;; Tracked objects:
  8946 ;;		On entry : 0/0
  8947 ;;		On exit  : 0/0
  8948 ;;		Unchanged: 0/0
  8949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8950 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8951 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8953 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8954 ;;Total ram usage:        9 bytes
  8955 ;; Hardware stack levels used:    1
  8956 ;; Hardware stack levels required when called:    9
  8957 ;; This function calls:
  8958 ;;		___ftadd
  8959 ;;		___ftdiv
  8960 ;;		___lbtoft
  8961 ;;		___lwtoft
  8962 ;;		_sleepMs
  8963 ;; This function is called by:
  8964 ;;		_loop
  8965 ;; This function uses a non-reentrant model
  8966 ;;
  8967                           
  8968                           
  8969                           ;psect for function _hcsr04GetAerage
  8970  0C8D                     _hcsr04GetAerage:	
  8971                           
  8972                           ;HC-SR04.c: 41: unsigned char loop = 10;
  8973                           
  8974                           ;incstack = 0
  8975                           ; Regs used in _hcsr04GetAerage: [wreg+status,2-btemp+0+btemp+9-btemp+11+pclath+cstack]
  8976  0C8D  300A               	movlw	10
  8977  0C8E  00FF               	movwf	127
  8978  0C8F  087F               	movf	127,w
  8979  0C90  0020               	movlb	0	; select bank0
  8980  0C91  00C5               	movwf	hcsr04GetAerage@loop
  8981                           
  8982                           ;HC-SR04.c: 42: unsigned char limit = 0;
  8983  0C92  01C7               	clrf	hcsr04GetAerage@limit
  8984                           
  8985                           ;HC-SR04.c: 43: unsigned char count = 0;
  8986  0C93  01C6               	clrf	hcsr04GetAerage@count
  8987                           
  8988                           ;HC-SR04.c: 44: float average = 0;
  8989  0C94  3000               	movlw	0
  8990  0C95  00C8               	movwf	hcsr04GetAerage@average
  8991  0C96  3000               	movlw	0
  8992  0C97  00C9               	movwf	hcsr04GetAerage@average+1
  8993  0C98  3000               	movlw	0
  8994  0C99  00CA               	movwf	hcsr04GetAerage@average+2
  8995  0C9A                     l4498:	
  8996                           ;HC-SR04.c: 46: while (--loop){
  8997                           
  8998  0C9A  3001               	movlw	1
  8999  0C9B  02C5               	subwf	hcsr04GetAerage@loop,f
  9000  0C9C  1903               	btfsc	3,2
  9001  0C9D  2CEA               	goto	l4500
  9002                           
  9003                           ;HC-SR04.c: 49: TMR1L = 0x00;
  9004  0C9E  0199               	clrf	25	;volatile
  9005                           
  9006                           ;HC-SR04.c: 50: TMR1H = 0x00;
  9007  0C9F  019A               	clrf	26	;volatile
  9008                           
  9009                           ;HC-SR04.c: 53: PORTCbits.RC4 = 1;
  9010  0CA0  160E               	bsf	14,4	;volatile
  9011                           
  9012                           ;HC-SR04.c: 54: _delay((unsigned long)((10)*(32000000/4000000.0)));
  9013  0CA1  301A               	movlw	26
  9014  0CA2                     u5397:	
  9015  0CA2  0B89               	decfsz	9,f
  9016  0CA3  2CA2               	goto	u5397
  9017  0CA4  3200               	nop2
  9018                           
  9019                           ;HC-SR04.c: 55: PORTCbits.RC4 = 0;
  9020  0CA5  0020               	movlb	0	; select bank0
  9021  0CA6  120E               	bcf	14,4	;volatile
  9022                           
  9023                           ;HC-SR04.c: 58: T1CONbits.TMR1ON = 1;
  9024  0CA7  141B               	bsf	27,0	;volatile
  9025                           
  9026                           ;HC-SR04.c: 61: limit = 10;
  9027  0CA8  300A               	movlw	10
  9028  0CA9  00FF               	movwf	127
  9029  0CAA  087F               	movf	127,w
  9030  0CAB  00C7               	movwf	hcsr04GetAerage@limit
  9031  0CAC                     l4490:	
  9032                           ;HC-SR04.c: 64: while (T1CONbits.TMR1ON){
  9033                           
  9034  0CAC  0020               	movlb	0	; select bank0
  9035  0CAD  1C1B               	btfss	27,0	;volatile
  9036  0CAE  2CBB               	goto	l4492
  9037                           
  9038                           ;HC-SR04.c: 67: if (!(--limit)) {
  9039  0CAF  3001               	movlw	1
  9040  0CB0  02C7               	subwf	hcsr04GetAerage@limit,f
  9041  0CB1  1903               	btfsc	3,2
  9042  0CB2  2CBB               	goto	l4492
  9043                           
  9044                           ;HC-SR04.c: 69: };HC-SR04.c: 72: sleepMs(1);
  9045                           
  9046                           ;HC-SR04.c: 68: break;
  9047  0CB3  3001               	movlw	1
  9048  0CB4  00F0               	movwf	sleepMs@milliseconds
  9049  0CB5  3000               	movlw	0
  9050  0CB6  00F1               	movwf	sleepMs@milliseconds+1
  9051  0CB7  3189  2140  318C   	fcall	_sleepMs
  9052  0CBA  2CAC               	goto	l4490
  9053  0CBB                     l4492:	
  9054                           
  9055                           ;HC-SR04.c: 73: };HC-SR04.c: 76: if (limit > 0){
  9056  0CBB  0847               	movf	hcsr04GetAerage@limit,w
  9057  0CBC  1903               	btfsc	3,2
  9058  0CBD  2C9A               	goto	l4498
  9059                           
  9060                           ;HC-SR04.c: 77: average+= TMR1L + (unsigned) (TMR1H << 8);
  9061  0CBE  081A               	movf	26,w	;volatile
  9062  0CBF  00FE               	movwf	126
  9063  0CC0  01FF               	clrf	127
  9064  0CC1  087E               	movf	126,w
  9065  0CC2  00FF               	movwf	127
  9066  0CC3  01FE               	clrf	126
  9067  0CC4  0819               	movf	25,w	;volatile
  9068  0CC5  077E               	addwf	126,w
  9069  0CC6  00F0               	movwf	___lwtoft@c
  9070  0CC7  087F               	movf	127,w
  9071  0CC8  1803               	skipnc
  9072  0CC9  0A7F               	incf	127,w
  9073  0CCA  00F1               	movwf	___lwtoft@c+1
  9074  0CCB  3197  27EB  318C   	fcall	___lwtoft
  9075  0CCE  0870               	movf	?___lwtoft,w
  9076  0CCF  0020               	movlb	0	; select bank0
  9077  0CD0  00AB               	movwf	___ftadd@f1
  9078  0CD1  0871               	movf	?___lwtoft+1,w
  9079  0CD2  00AC               	movwf	___ftadd@f1+1
  9080  0CD3  0872               	movf	?___lwtoft+2,w
  9081  0CD4  00AD               	movwf	___ftadd@f1+2
  9082  0CD5  0848               	movf	hcsr04GetAerage@average,w
  9083  0CD6  00AE               	movwf	___ftadd@f2
  9084  0CD7  0849               	movf	hcsr04GetAerage@average+1,w
  9085  0CD8  00AF               	movwf	___ftadd@f2+1
  9086  0CD9  084A               	movf	hcsr04GetAerage@average+2,w
  9087  0CDA  00B0               	movwf	___ftadd@f2+2
  9088  0CDB  3184  244E  318C   	fcall	___ftadd
  9089  0CDE  0020               	movlb	0	; select bank0
  9090  0CDF  082B               	movf	?___ftadd,w
  9091  0CE0  00C8               	movwf	hcsr04GetAerage@average
  9092  0CE1  082C               	movf	?___ftadd+1,w
  9093  0CE2  00C9               	movwf	hcsr04GetAerage@average+1
  9094  0CE3  082D               	movf	?___ftadd+2,w
  9095  0CE4  00CA               	movwf	hcsr04GetAerage@average+2
  9096                           
  9097                           ;HC-SR04.c: 78: count++;
  9098  0CE5  3001               	movlw	1
  9099  0CE6  00FF               	movwf	127
  9100  0CE7  087F               	movf	127,w
  9101  0CE8  07C6               	addwf	hcsr04GetAerage@count,f
  9102  0CE9  2C9A               	goto	l4498
  9103  0CEA                     l4500:	
  9104                           
  9105                           ;HC-SR04.c: 79: };HC-SR04.c: 80: };HC-SR04.c: 82: average/= count;
  9106  0CEA  0846               	movf	hcsr04GetAerage@count,w
  9107  0CEB  3188  2010  318C   	fcall	___lbtoft
  9108  0CEE  0870               	movf	?___lbtoft,w
  9109  0CEF  0020               	movlb	0	; select bank0
  9110  0CF0  00B5               	movwf	___ftdiv@f2
  9111  0CF1  0871               	movf	?___lbtoft+1,w
  9112  0CF2  00B6               	movwf	___ftdiv@f2+1
  9113  0CF3  0872               	movf	?___lbtoft+2,w
  9114  0CF4  00B7               	movwf	___ftdiv@f2+2
  9115  0CF5  0848               	movf	hcsr04GetAerage@average,w
  9116  0CF6  00B8               	movwf	___ftdiv@f1
  9117  0CF7  0849               	movf	hcsr04GetAerage@average+1,w
  9118  0CF8  00B9               	movwf	___ftdiv@f1+1
  9119  0CF9  084A               	movf	hcsr04GetAerage@average+2,w
  9120  0CFA  00BA               	movwf	___ftdiv@f1+2
  9121  0CFB  318F  2757         	fcall	___ftdiv
  9122  0CFD  0020               	movlb	0	; select bank0
  9123  0CFE  0835               	movf	?___ftdiv,w
  9124  0CFF  00C8               	movwf	hcsr04GetAerage@average
  9125  0D00  0836               	movf	?___ftdiv+1,w
  9126  0D01  00C9               	movwf	hcsr04GetAerage@average+1
  9127  0D02  0837               	movf	?___ftdiv+2,w
  9128  0D03  00CA               	movwf	hcsr04GetAerage@average+2
  9129                           
  9130                           ;HC-SR04.c: 84: return average;
  9131  0D04  0848               	movf	hcsr04GetAerage@average,w
  9132  0D05  00C2               	movwf	?_hcsr04GetAerage
  9133  0D06  0849               	movf	hcsr04GetAerage@average+1,w
  9134  0D07  00C3               	movwf	?_hcsr04GetAerage+1
  9135  0D08  084A               	movf	hcsr04GetAerage@average+2,w
  9136  0D09  00C4               	movwf	?_hcsr04GetAerage+2
  9137  0D0A  0008               	return
  9138  0D0B                     __end_of_hcsr04GetAerage:	
  9139                           
  9140                           	psect	text39
  9141  17EB                     __ptext39:	
  9142 ;; *************** function ___lwtoft *****************
  9143 ;; Defined at:
  9144 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
  9145 ;; Parameters:    Size  Location     Type
  9146 ;;  c               2    0[COMMON] unsigned int 
  9147 ;; Auto vars:     Size  Location     Type
  9148 ;;		None
  9149 ;; Return value:  Size  Location     Type
  9150 ;;                  3    0[COMMON] float 
  9151 ;; Registers used:
  9152 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9153 ;; Tracked objects:
  9154 ;;		On entry : 0/0
  9155 ;;		On exit  : 0/0
  9156 ;;		Unchanged: 0/0
  9157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9158 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9161 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9162 ;;Total ram usage:        3 bytes
  9163 ;; Hardware stack levels used:    1
  9164 ;; Hardware stack levels required when called:    8
  9165 ;; This function calls:
  9166 ;;		___ftpack
  9167 ;; This function is called by:
  9168 ;;		_hcsr04GetAerage
  9169 ;; This function uses a non-reentrant model
  9170 ;;
  9171                           
  9172                           
  9173                           ;psect for function ___lwtoft
  9174  17EB                     ___lwtoft:	
  9175                           
  9176                           ;incstack = 0
  9177                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9178  17EB  0870               	movf	___lwtoft@c,w
  9179  17EC  0020               	movlb	0	; select bank0
  9180  17ED  00A6               	movwf	___ftpack@arg
  9181  17EE  0871               	movf	___lwtoft@c+1,w
  9182  17EF  00A7               	movwf	___ftpack@arg+1
  9183  17F0  01A8               	clrf	___ftpack@arg+2
  9184  17F1  308E               	movlw	142
  9185  17F2  00FF               	movwf	127
  9186  17F3  087F               	movf	127,w
  9187  17F4  00A9               	movwf	___ftpack@exp
  9188  17F5  01AA               	clrf	___ftpack@sign
  9189  17F6  3187  2788         	fcall	___ftpack
  9190  17F8  0020               	movlb	0	; select bank0
  9191  17F9  0826               	movf	?___ftpack,w
  9192  17FA  00F0               	movwf	?___lwtoft
  9193  17FB  0827               	movf	?___ftpack+1,w
  9194  17FC  00F1               	movwf	?___lwtoft+1
  9195  17FD  0828               	movf	?___ftpack+2,w
  9196  17FE  00F2               	movwf	?___lwtoft+2
  9197  17FF  0008               	return
  9198  1800                     __end_of___lwtoft:	
  9199                           
  9200                           	psect	text40
  9201  0810                     __ptext40:	
  9202 ;; *************** function ___lbtoft *****************
  9203 ;; Defined at:
  9204 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
  9205 ;; Parameters:    Size  Location     Type
  9206 ;;  c               1    wreg     unsigned char 
  9207 ;; Auto vars:     Size  Location     Type
  9208 ;;  c               1   11[BANK0 ] unsigned char 
  9209 ;; Return value:  Size  Location     Type
  9210 ;;                  3    0[COMMON] float 
  9211 ;; Registers used:
  9212 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9213 ;; Tracked objects:
  9214 ;;		On entry : 0/0
  9215 ;;		On exit  : 0/0
  9216 ;;		Unchanged: 0/0
  9217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9218 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9219 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9222 ;;Total ram usage:        5 bytes
  9223 ;; Hardware stack levels used:    1
  9224 ;; Hardware stack levels required when called:    8
  9225 ;; This function calls:
  9226 ;;		___ftpack
  9227 ;; This function is called by:
  9228 ;;		_hcsr04GetAerage
  9229 ;; This function uses a non-reentrant model
  9230 ;;
  9231                           
  9232                           
  9233                           ;psect for function ___lbtoft
  9234  0810                     ___lbtoft:	
  9235                           
  9236                           ;incstack = 0
  9237                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9238                           ;___lbtoft@c stored from wreg
  9239  0810  0020               	movlb	0	; select bank0
  9240  0811  00AB               	movwf	___lbtoft@c
  9241  0812  082B               	movf	___lbtoft@c,w
  9242  0813  00FD               	movwf	125
  9243  0814  01FE               	clrf	126
  9244  0815  01FF               	clrf	127
  9245  0816  087D               	movf	125,w
  9246  0817  00A6               	movwf	___ftpack@arg
  9247  0818  087E               	movf	126,w
  9248  0819  00A7               	movwf	___ftpack@arg+1
  9249  081A  087F               	movf	127,w
  9250  081B  00A8               	movwf	___ftpack@arg+2
  9251  081C  308E               	movlw	142
  9252  081D  00FF               	movwf	127
  9253  081E  087F               	movf	127,w
  9254  081F  00A9               	movwf	___ftpack@exp
  9255  0820  01AA               	clrf	___ftpack@sign
  9256  0821  3187  2788         	fcall	___ftpack
  9257  0823  0020               	movlb	0	; select bank0
  9258  0824  0826               	movf	?___ftpack,w
  9259  0825  00F0               	movwf	?___lbtoft
  9260  0826  0827               	movf	?___ftpack+1,w
  9261  0827  00F1               	movwf	?___lbtoft+1
  9262  0828  0828               	movf	?___ftpack+2,w
  9263  0829  00F2               	movwf	?___lbtoft+2
  9264  082A  0008               	return
  9265  082B                     __end_of___lbtoft:	
  9266                           
  9267                           	psect	text41
  9268  06DF                     __ptext41:	
  9269 ;; *************** function _getADCValue *****************
  9270 ;; Defined at:
  9271 ;;		line 31 in file "main.c"
  9272 ;; Parameters:    Size  Location     Type
  9273 ;;  channel         1    wreg     unsigned char 
  9274 ;; Auto vars:     Size  Location     Type
  9275 ;;  channel         1   38[BANK0 ] unsigned char 
  9276 ;;  adcSum          3   41[BANK0 ] float 
  9277 ;;  adcLoop         2   39[BANK0 ] unsigned int 
  9278 ;; Return value:  Size  Location     Type
  9279 ;;                  3   34[BANK0 ] float 
  9280 ;; Registers used:
  9281 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9282 ;; Tracked objects:
  9283 ;;		On entry : 0/0
  9284 ;;		On exit  : 0/0
  9285 ;;		Unchanged: 0/0
  9286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9287 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9288 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9289 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9290 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9291 ;;Total ram usage:       10 bytes
  9292 ;; Hardware stack levels used:    1
  9293 ;; Hardware stack levels required when called:    9
  9294 ;; This function calls:
  9295 ;;		___awtoft
  9296 ;;		___ftadd
  9297 ;;		___ftdiv
  9298 ;;		_sleepMs
  9299 ;; This function is called by:
  9300 ;;		_loop
  9301 ;; This function uses a non-reentrant model
  9302 ;;
  9303                           
  9304                           
  9305                           ;psect for function _getADCValue
  9306  06DF                     _getADCValue:	
  9307                           
  9308                           ;incstack = 0
  9309                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2-btemp+0+btemp+9-btemp+11+pclath+cstack
      +                          ]
  9310                           ;getADCValue@channel stored from wreg
  9311  06DF  0020               	movlb	0	; select bank0
  9312  06E0  00C6               	movwf	getADCValue@channel
  9313                           
  9314                           ;main.c: 34: float adcSum = 0;
  9315  06E1  3000               	movlw	0
  9316  06E2  00C9               	movwf	getADCValue@adcSum
  9317  06E3  3000               	movlw	0
  9318  06E4  00CA               	movwf	getADCValue@adcSum+1
  9319  06E5  3000               	movlw	0
  9320  06E6  00CB               	movwf	getADCValue@adcSum+2
  9321                           
  9322                           ;main.c: 35: unsigned int adcLoop = 1000;
  9323  06E7  30E8               	movlw	232
  9324  06E8  00C7               	movwf	getADCValue@adcLoop
  9325  06E9  3003               	movlw	3
  9326  06EA  00C8               	movwf	getADCValue@adcLoop+1
  9327                           
  9328                           ;main.c: 37: ADCON0bits.CHS = channel;
  9329  06EB  0846               	movf	getADCValue@channel,w
  9330  06EC  00C5               	movwf	??_getADCValue
  9331  06ED  0DC5               	rlf	??_getADCValue,f
  9332  06EE  0DC5               	rlf	??_getADCValue,f
  9333  06EF  0021               	movlb	1	; select bank1
  9334  06F0  081D               	movf	29,w	;volatile
  9335  06F1  0020               	movlb	0	; select bank0
  9336  06F2  0645               	xorwf	??_getADCValue,w
  9337  06F3  3903               	andlw	-253
  9338  06F4  0645               	xorwf	??_getADCValue,w
  9339  06F5  0021               	movlb	1	; select bank1
  9340  06F6  009D               	movwf	29	;volatile
  9341                           
  9342                           ;main.c: 38: FVRCONbits.FVREN = 1;
  9343  06F7  0022               	movlb	2	; select bank2
  9344  06F8  1797               	bsf	23,7	;volatile
  9345                           
  9346                           ;main.c: 39: ADCON0bits.ADON = 1;
  9347  06F9  0021               	movlb	1	; select bank1
  9348  06FA  141D               	bsf	29,0	;volatile
  9349                           
  9350                           ;main.c: 41: sleepMs(1);
  9351  06FB  3001               	movlw	1
  9352  06FC  00F0               	movwf	sleepMs@milliseconds
  9353  06FD  3000               	movlw	0
  9354  06FE  00F1               	movwf	sleepMs@milliseconds+1
  9355  06FF  3189  2140  3186   	fcall	_sleepMs
  9356  0702                     l4426:	
  9357                           ;main.c: 43: while (adcLoop--){
  9358                           
  9359  0702  3001               	movlw	1
  9360  0703  0020               	movlb	0	; select bank0
  9361  0704  02C7               	subwf	getADCValue@adcLoop,f
  9362  0705  3000               	movlw	0
  9363  0706  3BC8               	subwfb	getADCValue@adcLoop+1,f
  9364  0707  0A47               	incf	getADCValue@adcLoop,w
  9365  0708  1903               	btfsc	3,2
  9366  0709  0A48               	incf	getADCValue@adcLoop+1,w
  9367  070A  1903               	btfsc	3,2
  9368  070B  2F3F               	goto	l173
  9369                           
  9370                           ;main.c: 45: ADCON0bits.ADGO = 1;
  9371  070C  0021               	movlb	1	; select bank1
  9372  070D  149D               	bsf	29,1	;volatile
  9373  070E                     l4422:	
  9374                           ;main.c: 47: while (ADCON0bits.ADGO){
  9375                           
  9376  070E  0021               	movlb	1	; select bank1
  9377  070F  1C9D               	btfss	29,1	;volatile
  9378  0710  2F19               	goto	l4424
  9379                           
  9380                           ;main.c: 48: sleepMs(1);
  9381  0711  3001               	movlw	1
  9382  0712  00F0               	movwf	sleepMs@milliseconds
  9383  0713  3000               	movlw	0
  9384  0714  00F1               	movwf	sleepMs@milliseconds+1
  9385  0715  3189  2140  3186   	fcall	_sleepMs
  9386  0718  2F0E               	goto	l4422
  9387  0719                     l4424:	
  9388                           
  9389                           ;main.c: 49: };main.c: 51: adcSum+= (ADRESL | (ADRESH << 8));
  9390  0719  081C               	movf	28,w	;volatile
  9391  071A  00FE               	movwf	126
  9392  071B  01FF               	clrf	127
  9393  071C  087E               	movf	126,w
  9394  071D  00FF               	movwf	127
  9395  071E  01FE               	clrf	126
  9396  071F  087E               	movf	126,w
  9397  0720  041B               	iorwf	27,w	;volatile
  9398  0721  00F0               	movwf	___awtoft@c
  9399  0722  087F               	movf	127,w
  9400  0723  00F1               	movwf	___awtoft@c+1
  9401  0724  3189  211E  3186   	fcall	___awtoft
  9402  0727  0870               	movf	?___awtoft,w
  9403  0728  0020               	movlb	0	; select bank0
  9404  0729  00AB               	movwf	___ftadd@f1
  9405  072A  0871               	movf	?___awtoft+1,w
  9406  072B  00AC               	movwf	___ftadd@f1+1
  9407  072C  0872               	movf	?___awtoft+2,w
  9408  072D  00AD               	movwf	___ftadd@f1+2
  9409  072E  0849               	movf	getADCValue@adcSum,w
  9410  072F  00AE               	movwf	___ftadd@f2
  9411  0730  084A               	movf	getADCValue@adcSum+1,w
  9412  0731  00AF               	movwf	___ftadd@f2+1
  9413  0732  084B               	movf	getADCValue@adcSum+2,w
  9414  0733  00B0               	movwf	___ftadd@f2+2
  9415  0734  3184  244E  3186   	fcall	___ftadd
  9416  0737  0020               	movlb	0	; select bank0
  9417  0738  082B               	movf	?___ftadd,w
  9418  0739  00C9               	movwf	getADCValue@adcSum
  9419  073A  082C               	movf	?___ftadd+1,w
  9420  073B  00CA               	movwf	getADCValue@adcSum+1
  9421  073C  082D               	movf	?___ftadd+2,w
  9422  073D  00CB               	movwf	getADCValue@adcSum+2
  9423  073E  2F02               	goto	l4426
  9424  073F                     l173:	
  9425                           
  9426                           ;main.c: 53: };main.c: 55: FVRCONbits.FVREN = 0;
  9427  073F  0022               	movlb	2	; select bank2
  9428  0740  1397               	bcf	23,7	;volatile
  9429                           
  9430                           ;main.c: 56: ADCON0bits.ADON = 0;
  9431  0741  0021               	movlb	1	; select bank1
  9432  0742  101D               	bcf	29,0	;volatile
  9433                           
  9434                           ;main.c: 59: adcSum/= 1000;
  9435  0743  3000               	movlw	0
  9436  0744  0020               	movlb	0	; select bank0
  9437  0745  00B5               	movwf	___ftdiv@f2
  9438  0746  307A               	movlw	122
  9439  0747  00B6               	movwf	___ftdiv@f2+1
  9440  0748  3044               	movlw	68
  9441  0749  00B7               	movwf	___ftdiv@f2+2
  9442  074A  0849               	movf	getADCValue@adcSum,w
  9443  074B  00B8               	movwf	___ftdiv@f1
  9444  074C  084A               	movf	getADCValue@adcSum+1,w
  9445  074D  00B9               	movwf	___ftdiv@f1+1
  9446  074E  084B               	movf	getADCValue@adcSum+2,w
  9447  074F  00BA               	movwf	___ftdiv@f1+2
  9448  0750  318F  2757  3186   	fcall	___ftdiv
  9449  0753  0020               	movlb	0	; select bank0
  9450  0754  0835               	movf	?___ftdiv,w
  9451  0755  00C9               	movwf	getADCValue@adcSum
  9452  0756  0836               	movf	?___ftdiv+1,w
  9453  0757  00CA               	movwf	getADCValue@adcSum+1
  9454  0758  0837               	movf	?___ftdiv+2,w
  9455  0759  00CB               	movwf	getADCValue@adcSum+2
  9456                           
  9457                           ;main.c: 62: if (ADCON1bits.ADPREF == 0b11){
  9458  075A  0021               	movlb	1	; select bank1
  9459  075B  081E               	movf	30,w	;volatile
  9460  075C  3903               	andlw	3
  9461  075D  3A03               	xorlw	3
  9462  075E  1903               	btfsc	3,2
  9463  075F  2F79               	goto	l4438
  9464  0760  2F80               	goto	l4440
  9465  0761                     l4434:	
  9466                           ;main.c: 64: case 0b10:
  9467                           
  9468                           ;main.c: 63: switch (FVRCONbits.ADFVR){
  9469                           
  9470                           
  9471                           ;main.c: 65: adcSum/= 500;
  9472  0761  3000               	movlw	0
  9473  0762  0020               	movlb	0	; select bank0
  9474  0763  00B5               	movwf	___ftdiv@f2
  9475  0764  30FA               	movlw	250
  9476  0765  00B6               	movwf	___ftdiv@f2+1
  9477  0766  3043               	movlw	67
  9478  0767  00B7               	movwf	___ftdiv@f2+2
  9479  0768  0849               	movf	getADCValue@adcSum,w
  9480  0769  00B8               	movwf	___ftdiv@f1
  9481  076A  084A               	movf	getADCValue@adcSum+1,w
  9482  076B  00B9               	movwf	___ftdiv@f1+1
  9483  076C  084B               	movf	getADCValue@adcSum+2,w
  9484  076D  00BA               	movwf	___ftdiv@f1+2
  9485  076E  318F  2757  3186   	fcall	___ftdiv
  9486  0771  0020               	movlb	0	; select bank0
  9487  0772  0835               	movf	?___ftdiv,w
  9488  0773  00C9               	movwf	getADCValue@adcSum
  9489  0774  0836               	movf	?___ftdiv+1,w
  9490  0775  00CA               	movwf	getADCValue@adcSum+1
  9491  0776  0837               	movf	?___ftdiv+2,w
  9492  0777  00CB               	movwf	getADCValue@adcSum+2
  9493                           
  9494                           ;main.c: 67: }
  9495                           
  9496                           ;main.c: 66: break;
  9497  0778  2F80               	goto	l4440
  9498  0779                     l4438:	
  9499  0779  0022               	movlb	2	; select bank2
  9500  077A  0817               	movf	23,w	;volatile
  9501  077B  3903               	andlw	3
  9502                           
  9503                           ; Switch size 1, requested type "space"
  9504                           ; Number of cases is 1, Range of values is 2 to 2
  9505                           ; switch strategies available:
  9506                           ; Name         Instructions Cycles
  9507                           ; simple_byte            4     3 (average)
  9508                           ; direct_byte           11     9 (fixed)
  9509                           ; jumptable            263     9 (fixed)
  9510                           ;	Chosen strategy is simple_byte
  9511  077C  3A02               	xorlw	2	; case 2
  9512  077D  1903               	skipnz
  9513  077E  2F61               	goto	l4434
  9514  077F  2F80               	goto	l4440
  9515  0780                     l4440:	
  9516                           
  9517                           ;main.c: 68: };main.c: 71: return adcSum;
  9518  0780  0020               	movlb	0	; select bank0
  9519  0781  0849               	movf	getADCValue@adcSum,w
  9520  0782  00C2               	movwf	?_getADCValue
  9521  0783  084A               	movf	getADCValue@adcSum+1,w
  9522  0784  00C3               	movwf	?_getADCValue+1
  9523  0785  084B               	movf	getADCValue@adcSum+2,w
  9524  0786  00C4               	movwf	?_getADCValue+2
  9525  0787  0008               	return
  9526  0788                     __end_of_getADCValue:	
  9527                           
  9528                           	psect	text42
  9529  0940                     __ptext42:	
  9530 ;; *************** function _sleepMs *****************
  9531 ;; Defined at:
  9532 ;;		line 36 in file "interface.c"
  9533 ;; Parameters:    Size  Location     Type
  9534 ;;  milliseconds    2    0[COMMON] unsigned int 
  9535 ;; Auto vars:     Size  Location     Type
  9536 ;;  wdtps           1    3[COMMON] unsigned char 
  9537 ;; Return value:  Size  Location     Type
  9538 ;;                  1    wreg      void 
  9539 ;; Registers used:
  9540 ;;		wreg, status,2, status,0, btemp+10, btemp+11, pclath, cstack
  9541 ;; Tracked objects:
  9542 ;;		On entry : 0/0
  9543 ;;		On exit  : 0/0
  9544 ;;		Unchanged: 0/0
  9545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9546 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;Total ram usage:        4 bytes
  9551 ;; Hardware stack levels used:    1
  9552 ;; Hardware stack levels required when called:    8
  9553 ;; This function calls:
  9554 ;;		_resetWDT
  9555 ;; This function is called by:
  9556 ;;		_getADCValue
  9557 ;;		_sleepListren
  9558 ;;		_nrf24l01SendPacket
  9559 ;;		_hcsr04GetAerage
  9560 ;; This function uses a non-reentrant model
  9561 ;;
  9562                           
  9563                           
  9564                           ;psect for function _sleepMs
  9565  0940                     _sleepMs:	
  9566                           
  9567                           ;interface.c: 38: unsigned char wdtps;;interface.c: 39: for (wdtps = 0; wdtps <= 0b10010
      +                          ; wdtps++){
  9568                           
  9569                           ;incstack = 0
  9570                           ; Regs used in _sleepMs: [wreg+status,2+status,0+btemp+10+btemp+11+pclath+cstack]
  9571  0940  01F3               	clrf	sleepMs@wdtps
  9572  0941  3013               	movlw	19
  9573  0942  0273               	subwf	sleepMs@wdtps,w
  9574  0943  1803               	btfsc	3,0
  9575  0944  2965               	goto	l3890
  9576  0945                     l3878:	
  9577                           
  9578                           ;interface.c: 40: if ((milliseconds >> wdtps) & 0b1){
  9579  0945  0871               	movf	sleepMs@milliseconds+1,w
  9580  0946  00FF               	movwf	127
  9581  0947  0870               	movf	sleepMs@milliseconds,w
  9582  0948  00FE               	movwf	126
  9583  0949  0A73               	incf	sleepMs@wdtps,w
  9584  094A  294D               	goto	u4104
  9585  094B                     u4105:	
  9586  094B  36FF               	lsrf	127,f
  9587  094C  0CFE               	rrf	126,f
  9588  094D                     u4104:	
  9589  094D  0B89               	decfsz	9,f
  9590  094E  294B               	goto	u4105
  9591  094F  1C7E               	btfss	126,0
  9592  0950  295D               	goto	l3886
  9593                           
  9594                           ;interface.c: 42: WDTCONbits.WDTPS = wdtps;
  9595  0951  0873               	movf	sleepMs@wdtps,w
  9596  0952  00F2               	movwf	??_sleepMs
  9597  0953  0DF2               	rlf	??_sleepMs,f
  9598  0954  0021               	movlb	1	; select bank1
  9599  0955  0817               	movf	23,w	;volatile
  9600  0956  0672               	xorwf	??_sleepMs,w
  9601  0957  39C1               	andlw	-63
  9602  0958  0672               	xorwf	??_sleepMs,w
  9603  0959  0097               	movwf	23	;volatile
  9604  095A  0063               	sleep	;# 
  9605                           
  9606                           ;interface.c: 44: __nop();
  9607  095B  0000               	nop
  9608                           
  9609                           ;interface.c: 45: __nop();
  9610  095C  0000               	nop
  9611  095D                     l3886:	
  9612  095D  3001               	movlw	1
  9613  095E  00FF               	movwf	127
  9614  095F  087F               	movf	127,w
  9615  0960  07F3               	addwf	sleepMs@wdtps,f
  9616  0961  3013               	movlw	19
  9617  0962  0273               	subwf	sleepMs@wdtps,w
  9618  0963  1C03               	skipc
  9619  0964  2945               	goto	l3878
  9620  0965                     l3890:	
  9621                           
  9622                           ;interface.c: 50: };interface.c: 51: };interface.c: 53: resetWDT();
  9623  0965  3197  278C         	fcall	_resetWDT
  9624  0967  0008               	return
  9625  0968                     __end_of_sleepMs:	
  9626                           
  9627                           	psect	text43
  9628  178C                     __ptext43:	
  9629 ;; *************** function _resetWDT *****************
  9630 ;; Defined at:
  9631 ;;		line 31 in file "interface.c"
  9632 ;; Parameters:    Size  Location     Type
  9633 ;;		None
  9634 ;; Auto vars:     Size  Location     Type
  9635 ;;		None
  9636 ;; Return value:  Size  Location     Type
  9637 ;;                  1    wreg      void 
  9638 ;; Registers used:
  9639 ;;		wreg, status,2, status,0
  9640 ;; Tracked objects:
  9641 ;;		On entry : 0/0
  9642 ;;		On exit  : 0/0
  9643 ;;		Unchanged: 0/0
  9644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9649 ;;Total ram usage:        0 bytes
  9650 ;; Hardware stack levels used:    1
  9651 ;; Hardware stack levels required when called:    7
  9652 ;; This function calls:
  9653 ;;		Nothing
  9654 ;; This function is called by:
  9655 ;;		_sleepMs
  9656 ;; This function uses a non-reentrant model
  9657 ;;
  9658                           
  9659                           
  9660                           ;psect for function _resetWDT
  9661  178C                     _resetWDT:	
  9662                           
  9663                           ;interface.c: 32: WDTCONbits.WDTPS = 0b01100;
  9664                           
  9665                           ;incstack = 0
  9666                           ; Regs used in _resetWDT: [wreg+status,2+status,0]
  9667  178C  0021               	movlb	1	; select bank1
  9668  178D  0817               	movf	23,w	;volatile
  9669  178E  39C1               	andlw	-63
  9670  178F  3818               	iorlw	24
  9671  1790  0097               	movwf	23	;volatile
  9672  1791  0064               	clrwdt	;# 
  9673  1792  0008               	return
  9674  1793                     __end_of_resetWDT:	
  9675                           
  9676                           	psect	text44
  9677  0F57                     __ptext44:	
  9678 ;; *************** function ___ftdiv *****************
  9679 ;; Defined at:
  9680 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  9681 ;; Parameters:    Size  Location     Type
  9682 ;;  f2              3   21[BANK0 ] float 
  9683 ;;  f1              3   24[BANK0 ] float 
  9684 ;; Auto vars:     Size  Location     Type
  9685 ;;  f3              3   29[BANK0 ] float 
  9686 ;;  sign            1   33[BANK0 ] unsigned char 
  9687 ;;  exp             1   32[BANK0 ] unsigned char 
  9688 ;;  cntr            1   28[BANK0 ] unsigned char 
  9689 ;; Return value:  Size  Location     Type
  9690 ;;                  3   21[BANK0 ] float 
  9691 ;; Registers used:
  9692 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9693 ;; Tracked objects:
  9694 ;;		On entry : 0/0
  9695 ;;		On exit  : 0/0
  9696 ;;		Unchanged: 0/0
  9697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9698 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9699 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9702 ;;Total ram usage:       13 bytes
  9703 ;; Hardware stack levels used:    1
  9704 ;; Hardware stack levels required when called:    8
  9705 ;; This function calls:
  9706 ;;		___ftpack
  9707 ;; This function is called by:
  9708 ;;		_getADCValue
  9709 ;;		_loop
  9710 ;;		_hcsr04GetAerage
  9711 ;; This function uses a non-reentrant model
  9712 ;;
  9713                           
  9714                           
  9715                           ;psect for function ___ftdiv
  9716  0F57                     ___ftdiv:	
  9717                           
  9718                           ;incstack = 0
  9719                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9720  0F57  0020               	movlb	0	; select bank0
  9721  0F58  0838               	movf	___ftdiv@f1,w
  9722  0F59  00FD               	movwf	125
  9723  0F5A  0839               	movf	___ftdiv@f1+1,w
  9724  0F5B  00FE               	movwf	126
  9725  0F5C  083A               	movf	___ftdiv@f1+2,w
  9726  0F5D  00FF               	movwf	127
  9727  0F5E  1003               	clrc
  9728  0F5F  0D7E               	rlf	126,w
  9729  0F60  0D7F               	rlf	127,w
  9730  0F61  00FF               	movwf	127
  9731  0F62  087F               	movf	127,w
  9732  0F63  00C0               	movwf	___ftdiv@exp
  9733  0F64  0840               	movf	___ftdiv@exp,w
  9734  0F65  1D03               	btfss	3,2
  9735  0F66  2F6E               	goto	l4352
  9736  0F67  3000               	movlw	0
  9737  0F68  00B5               	movwf	?___ftdiv
  9738  0F69  3000               	movlw	0
  9739  0F6A  00B6               	movwf	?___ftdiv+1
  9740  0F6B  3000               	movlw	0
  9741  0F6C  00B7               	movwf	?___ftdiv+2
  9742  0F6D  0008               	return
  9743  0F6E                     l4352:	
  9744  0F6E  0835               	movf	___ftdiv@f2,w
  9745  0F6F  00FD               	movwf	125
  9746  0F70  0836               	movf	___ftdiv@f2+1,w
  9747  0F71  00FE               	movwf	126
  9748  0F72  0837               	movf	___ftdiv@f2+2,w
  9749  0F73  00FF               	movwf	127
  9750  0F74  1003               	clrc
  9751  0F75  0D7E               	rlf	126,w
  9752  0F76  0D7F               	rlf	127,w
  9753  0F77  00FF               	movwf	127
  9754  0F78  087F               	movf	127,w
  9755  0F79  00C1               	movwf	___ftdiv@sign
  9756  0F7A  0841               	movf	___ftdiv@sign,w
  9757  0F7B  1D03               	btfss	3,2
  9758  0F7C  2F84               	goto	l4358
  9759  0F7D  3000               	movlw	0
  9760  0F7E  00B5               	movwf	?___ftdiv
  9761  0F7F  3000               	movlw	0
  9762  0F80  00B6               	movwf	?___ftdiv+1
  9763  0F81  3000               	movlw	0
  9764  0F82  00B7               	movwf	?___ftdiv+2
  9765  0F83  0008               	return
  9766  0F84                     l4358:	
  9767  0F84  3000               	movlw	0
  9768  0F85  00BD               	movwf	___ftdiv@f3
  9769  0F86  3000               	movlw	0
  9770  0F87  00BE               	movwf	___ftdiv@f3+1
  9771  0F88  3000               	movlw	0
  9772  0F89  00BF               	movwf	___ftdiv@f3+2
  9773  0F8A  3089               	movlw	137
  9774  0F8B  0741               	addwf	___ftdiv@sign,w
  9775  0F8C  00BB               	movwf	??___ftdiv
  9776  0F8D  083B               	movf	??___ftdiv,w
  9777  0F8E  02C0               	subwf	___ftdiv@exp,f
  9778  0F8F  0838               	movf	___ftdiv@f1,w
  9779  0F90  00FD               	movwf	125
  9780  0F91  0839               	movf	___ftdiv@f1+1,w
  9781  0F92  00FE               	movwf	126
  9782  0F93  083A               	movf	___ftdiv@f1+2,w
  9783  0F94  00FF               	movwf	127
  9784  0F95  3010               	movlw	16
  9785  0F96                     u4845:	
  9786  0F96  36FF               	lsrf	127,f
  9787  0F97  0CFE               	rrf	126,f
  9788  0F98  0CFD               	rrf	125,f
  9789  0F99  0B89               	decfsz	9,f
  9790  0F9A  2F96               	goto	u4845
  9791  0F9B  087D               	movf	125,w
  9792  0F9C  00FF               	movwf	127
  9793  0F9D  087F               	movf	127,w
  9794  0F9E  00C1               	movwf	___ftdiv@sign
  9795  0F9F  0835               	movf	___ftdiv@f2,w
  9796  0FA0  00FD               	movwf	125
  9797  0FA1  0836               	movf	___ftdiv@f2+1,w
  9798  0FA2  00FE               	movwf	126
  9799  0FA3  0837               	movf	___ftdiv@f2+2,w
  9800  0FA4  00FF               	movwf	127
  9801  0FA5  3010               	movlw	16
  9802  0FA6                     u4855:	
  9803  0FA6  36FF               	lsrf	127,f
  9804  0FA7  0CFE               	rrf	126,f
  9805  0FA8  0CFD               	rrf	125,f
  9806  0FA9  0B89               	decfsz	9,f
  9807  0FAA  2FA6               	goto	u4855
  9808  0FAB  087D               	movf	125,w
  9809  0FAC  00FF               	movwf	127
  9810  0FAD  087F               	movf	127,w
  9811  0FAE  06C1               	xorwf	___ftdiv@sign,f
  9812  0FAF  3080               	movlw	128
  9813  0FB0  00FF               	movwf	127
  9814  0FB1  087F               	movf	127,w
  9815  0FB2  05C1               	andwf	___ftdiv@sign,f
  9816  0FB3  17B9               	bsf	___ftdiv@f1+1,7
  9817  0FB4  30FF               	movlw	255
  9818  0FB5  05B8               	andwf	___ftdiv@f1,f
  9819  0FB6  30FF               	movlw	255
  9820  0FB7  05B9               	andwf	___ftdiv@f1+1,f
  9821  0FB8  3000               	movlw	0
  9822  0FB9  05BA               	andwf	___ftdiv@f1+2,f
  9823  0FBA  17B6               	bsf	___ftdiv@f2+1,7
  9824  0FBB  30FF               	movlw	255
  9825  0FBC  05B5               	andwf	___ftdiv@f2,f
  9826  0FBD  30FF               	movlw	255
  9827  0FBE  05B6               	andwf	___ftdiv@f2+1,f
  9828  0FBF  3000               	movlw	0
  9829  0FC0  05B7               	andwf	___ftdiv@f2+2,f
  9830  0FC1  3018               	movlw	24
  9831  0FC2  00FF               	movwf	127
  9832  0FC3  087F               	movf	127,w
  9833  0FC4  00BC               	movwf	___ftdiv@cntr
  9834  0FC5                     l4376:	
  9835  0FC5  3001               	movlw	1
  9836  0FC6                     u4865:	
  9837  0FC6  35BD               	lslf	___ftdiv@f3,f
  9838  0FC7  0DBE               	rlf	___ftdiv@f3+1,f
  9839  0FC8  0DBF               	rlf	___ftdiv@f3+2,f
  9840  0FC9  0B89               	decfsz	9,f
  9841  0FCA  2FC6               	goto	u4865
  9842  0FCB  0837               	movf	___ftdiv@f2+2,w
  9843  0FCC  023A               	subwf	___ftdiv@f1+2,w
  9844  0FCD  1D03               	skipz
  9845  0FCE  2FD5               	goto	u4875
  9846  0FCF  0836               	movf	___ftdiv@f2+1,w
  9847  0FD0  0239               	subwf	___ftdiv@f1+1,w
  9848  0FD1  1D03               	skipz
  9849  0FD2  2FD5               	goto	u4875
  9850  0FD3  0835               	movf	___ftdiv@f2,w
  9851  0FD4  0238               	subwf	___ftdiv@f1,w
  9852  0FD5                     u4875:	
  9853  0FD5  1C03               	skipc
  9854  0FD6  2FDE               	goto	l4384
  9855  0FD7  0835               	movf	___ftdiv@f2,w
  9856  0FD8  02B8               	subwf	___ftdiv@f1,f
  9857  0FD9  0836               	movf	___ftdiv@f2+1,w
  9858  0FDA  3BB9               	subwfb	___ftdiv@f1+1,f
  9859  0FDB  0837               	movf	___ftdiv@f2+2,w
  9860  0FDC  3BBA               	subwfb	___ftdiv@f1+2,f
  9861  0FDD  143D               	bsf	___ftdiv@f3,0
  9862  0FDE                     l4384:	
  9863  0FDE  3001               	movlw	1
  9864  0FDF                     u4885:	
  9865  0FDF  35B8               	lslf	___ftdiv@f1,f
  9866  0FE0  0DB9               	rlf	___ftdiv@f1+1,f
  9867  0FE1  0DBA               	rlf	___ftdiv@f1+2,f
  9868  0FE2  0B89               	decfsz	9,f
  9869  0FE3  2FDF               	goto	u4885
  9870  0FE4  3001               	movlw	1
  9871  0FE5  02BC               	subwf	___ftdiv@cntr,f
  9872  0FE6  1D03               	btfss	3,2
  9873  0FE7  2FC5               	goto	l4376
  9874  0FE8  083D               	movf	___ftdiv@f3,w
  9875  0FE9  00A6               	movwf	___ftpack@arg
  9876  0FEA  083E               	movf	___ftdiv@f3+1,w
  9877  0FEB  00A7               	movwf	___ftpack@arg+1
  9878  0FEC  083F               	movf	___ftdiv@f3+2,w
  9879  0FED  00A8               	movwf	___ftpack@arg+2
  9880  0FEE  0840               	movf	___ftdiv@exp,w
  9881  0FEF  00FF               	movwf	127
  9882  0FF0  087F               	movf	127,w
  9883  0FF1  00A9               	movwf	___ftpack@exp
  9884  0FF2  0841               	movf	___ftdiv@sign,w
  9885  0FF3  00FF               	movwf	127
  9886  0FF4  087F               	movf	127,w
  9887  0FF5  00AA               	movwf	___ftpack@sign
  9888  0FF6  3187  2788         	fcall	___ftpack
  9889  0FF8  0020               	movlb	0	; select bank0
  9890  0FF9  0826               	movf	?___ftpack,w
  9891  0FFA  00B5               	movwf	?___ftdiv
  9892  0FFB  0827               	movf	?___ftpack+1,w
  9893  0FFC  00B6               	movwf	?___ftdiv+1
  9894  0FFD  0828               	movf	?___ftpack+2,w
  9895  0FFE  00B7               	movwf	?___ftdiv+2
  9896  0FFF  0008               	return
  9897  1000                     __end_of___ftdiv:	
  9898                           
  9899                           	psect	text45
  9900  044E                     __ptext45:	
  9901 ;; *************** function ___ftadd *****************
  9902 ;; Defined at:
  9903 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  9904 ;; Parameters:    Size  Location     Type
  9905 ;;  f1              3   11[BANK0 ] float 
  9906 ;;  f2              3   14[BANK0 ] float 
  9907 ;; Auto vars:     Size  Location     Type
  9908 ;;  exp1            1   20[BANK0 ] unsigned char 
  9909 ;;  exp2            1   19[BANK0 ] unsigned char 
  9910 ;;  sign            1   18[BANK0 ] unsigned char 
  9911 ;; Return value:  Size  Location     Type
  9912 ;;                  3   11[BANK0 ] float 
  9913 ;; Registers used:
  9914 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9915 ;; Tracked objects:
  9916 ;;		On entry : 0/0
  9917 ;;		On exit  : 0/0
  9918 ;;		Unchanged: 0/0
  9919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9920 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9921 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9922 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9923 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9924 ;;Total ram usage:       10 bytes
  9925 ;; Hardware stack levels used:    1
  9926 ;; Hardware stack levels required when called:    8
  9927 ;; This function calls:
  9928 ;;		___ftpack
  9929 ;; This function is called by:
  9930 ;;		_getADCValue
  9931 ;;		_loop
  9932 ;;		_hcsr04GetAerage
  9933 ;;		___ftsub
  9934 ;; This function uses a non-reentrant model
  9935 ;;
  9936                           
  9937                           
  9938                           ;psect for function ___ftadd
  9939  044E                     ___ftadd:	
  9940                           
  9941                           ;incstack = 0
  9942                           ; Regs used in ___ftadd: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9943  044E  0020               	movlb	0	; select bank0
  9944  044F  082B               	movf	___ftadd@f1,w
  9945  0450  00FD               	movwf	125
  9946  0451  082C               	movf	___ftadd@f1+1,w
  9947  0452  00FE               	movwf	126
  9948  0453  082D               	movf	___ftadd@f1+2,w
  9949  0454  00FF               	movwf	127
  9950  0455  1003               	clrc
  9951  0456  0D7E               	rlf	126,w
  9952  0457  0D7F               	rlf	127,w
  9953  0458  00FF               	movwf	127
  9954  0459  087F               	movf	127,w
  9955  045A  00B4               	movwf	___ftadd@exp1
  9956  045B  082E               	movf	___ftadd@f2,w
  9957  045C  00FD               	movwf	125
  9958  045D  082F               	movf	___ftadd@f2+1,w
  9959  045E  00FE               	movwf	126
  9960  045F  0830               	movf	___ftadd@f2+2,w
  9961  0460  00FF               	movwf	127
  9962  0461  1003               	clrc
  9963  0462  0D7E               	rlf	126,w
  9964  0463  0D7F               	rlf	127,w
  9965  0464  00FF               	movwf	127
  9966  0465  087F               	movf	127,w
  9967  0466  00B3               	movwf	___ftadd@exp2
  9968  0467  0834               	movf	___ftadd@exp1,w
  9969  0468  1903               	btfsc	3,2
  9970  0469  2C76               	goto	l3782
  9971  046A  0833               	movf	___ftadd@exp2,w
  9972  046B  0234               	subwf	___ftadd@exp1,w
  9973  046C  1803               	skipnc
  9974  046D  2C7D               	goto	l3786
  9975  046E  0334               	decf	___ftadd@exp1,w
  9976  046F  3AFF               	xorlw	255
  9977  0470  0733               	addwf	___ftadd@exp2,w
  9978  0471  00B1               	movwf	??___ftadd
  9979  0472  3019               	movlw	25
  9980  0473  0231               	subwf	??___ftadd,w
  9981  0474  1C03               	skipc
  9982  0475  2C7D               	goto	l3786
  9983  0476                     l3782:	
  9984  0476  082E               	movf	___ftadd@f2,w
  9985  0477  00AB               	movwf	?___ftadd
  9986  0478  082F               	movf	___ftadd@f2+1,w
  9987  0479  00AC               	movwf	?___ftadd+1
  9988  047A  0830               	movf	___ftadd@f2+2,w
  9989  047B  00AD               	movwf	?___ftadd+2
  9990  047C  0008               	return
  9991  047D                     l3786:	
  9992  047D  0833               	movf	___ftadd@exp2,w
  9993  047E  1903               	btfsc	3,2
  9994  047F  0008               	return
  9995  0480  0834               	movf	___ftadd@exp1,w
  9996  0481  0233               	subwf	___ftadd@exp2,w
  9997  0482  1803               	skipnc
  9998  0483  2C8C               	goto	l3792
  9999  0484  0333               	decf	___ftadd@exp2,w
 10000  0485  3AFF               	xorlw	255
 10001  0486  0734               	addwf	___ftadd@exp1,w
 10002  0487  00B1               	movwf	??___ftadd
 10003  0488  3019               	movlw	25
 10004  0489  0231               	subwf	??___ftadd,w
 10005  048A  1803               	btfsc	3,0
 10006  048B  0008               	return
 10007  048C                     l3792:	
 10008  048C  3006               	movlw	6
 10009  048D  00FF               	movwf	127
 10010  048E  087F               	movf	127,w
 10011  048F  00B2               	movwf	___ftadd@sign
 10012  0490  1BAD               	btfsc	___ftadd@f1+2,7
 10013  0491  17B2               	bsf	___ftadd@sign,7
 10014  0492  1BB0               	btfsc	___ftadd@f2+2,7
 10015  0493  1732               	bsf	___ftadd@sign,6
 10016  0494  17AC               	bsf	___ftadd@f1+1,7
 10017  0495  30FF               	movlw	255
 10018  0496  05AB               	andwf	___ftadd@f1,f
 10019  0497  30FF               	movlw	255
 10020  0498  05AC               	andwf	___ftadd@f1+1,f
 10021  0499  3000               	movlw	0
 10022  049A  05AD               	andwf	___ftadd@f1+2,f
 10023  049B  17AF               	bsf	___ftadd@f2+1,7
 10024  049C  30FF               	movlw	255
 10025  049D  05AE               	andwf	___ftadd@f2,f
 10026  049E  30FF               	movlw	255
 10027  049F  05AF               	andwf	___ftadd@f2+1,f
 10028  04A0  3000               	movlw	0
 10029  04A1  05B0               	andwf	___ftadd@f2+2,f
 10030  04A2  0833               	movf	___ftadd@exp2,w
 10031  04A3  0234               	subwf	___ftadd@exp1,w
 10032  04A4  1803               	skipnc
 10033  04A5  2CC8               	goto	l3816
 10034  04A6                     l3804:	
 10035  04A6  3001               	movlw	1
 10036  04A7                     u3895:	
 10037  04A7  35AE               	lslf	___ftadd@f2,f
 10038  04A8  0DAF               	rlf	___ftadd@f2+1,f
 10039  04A9  0DB0               	rlf	___ftadd@f2+2,f
 10040  04AA  0B89               	decfsz	9,f
 10041  04AB  2CA7               	goto	u3895
 10042  04AC  3001               	movlw	1
 10043  04AD  02B3               	subwf	___ftadd@exp2,f
 10044  04AE  0833               	movf	___ftadd@exp2,w
 10045  04AF  0634               	xorwf	___ftadd@exp1,w
 10046  04B0  1903               	skipnz
 10047  04B1  2CC3               	goto	l3814
 10048  04B2  3001               	movlw	1
 10049  04B3  02B2               	subwf	___ftadd@sign,f
 10050  04B4  0832               	movf	___ftadd@sign,w
 10051  04B5  3907               	andlw	7
 10052  04B6  1903               	btfsc	3,2
 10053  04B7  2CC3               	goto	l3814
 10054  04B8  2CA6               	goto	l3804
 10055  04B9                     l3810:	
 10056  04B9  3001               	movlw	1
 10057  04BA                     u3925:	
 10058  04BA  36AD               	lsrf	___ftadd@f1+2,f
 10059  04BB  0CAC               	rrf	___ftadd@f1+1,f
 10060  04BC  0CAB               	rrf	___ftadd@f1,f
 10061  04BD  0B89               	decfsz	9,f
 10062  04BE  2CBA               	goto	u3925
 10063  04BF  3001               	movlw	1
 10064  04C0  00FF               	movwf	127
 10065  04C1  087F               	movf	127,w
 10066  04C2  07B4               	addwf	___ftadd@exp1,f
 10067  04C3                     l3814:	
 10068  04C3  0834               	movf	___ftadd@exp1,w
 10069  04C4  0633               	xorwf	___ftadd@exp2,w
 10070  04C5  1903               	btfsc	3,2
 10071  04C6  2CED               	goto	l766
 10072  04C7  2CB9               	goto	l3810
 10073  04C8                     l3816:	
 10074  04C8  0834               	movf	___ftadd@exp1,w
 10075  04C9  0233               	subwf	___ftadd@exp2,w
 10076  04CA  1803               	skipnc
 10077  04CB  2CED               	goto	l766
 10078  04CC                     l3818:	
 10079  04CC  3001               	movlw	1
 10080  04CD                     u3955:	
 10081  04CD  35AB               	lslf	___ftadd@f1,f
 10082  04CE  0DAC               	rlf	___ftadd@f1+1,f
 10083  04CF  0DAD               	rlf	___ftadd@f1+2,f
 10084  04D0  0B89               	decfsz	9,f
 10085  04D1  2CCD               	goto	u3955
 10086  04D2  3001               	movlw	1
 10087  04D3  02B4               	subwf	___ftadd@exp1,f
 10088  04D4  0833               	movf	___ftadd@exp2,w
 10089  04D5  0634               	xorwf	___ftadd@exp1,w
 10090  04D6  1903               	skipnz
 10091  04D7  2CE9               	goto	l3828
 10092  04D8  3001               	movlw	1
 10093  04D9  02B2               	subwf	___ftadd@sign,f
 10094  04DA  0832               	movf	___ftadd@sign,w
 10095  04DB  3907               	andlw	7
 10096  04DC  1903               	btfsc	3,2
 10097  04DD  2CE9               	goto	l3828
 10098  04DE  2CCC               	goto	l3818
 10099  04DF                     l3824:	
 10100  04DF  3001               	movlw	1
 10101  04E0                     u3985:	
 10102  04E0  36B0               	lsrf	___ftadd@f2+2,f
 10103  04E1  0CAF               	rrf	___ftadd@f2+1,f
 10104  04E2  0CAE               	rrf	___ftadd@f2,f
 10105  04E3  0B89               	decfsz	9,f
 10106  04E4  2CE0               	goto	u3985
 10107  04E5  3001               	movlw	1
 10108  04E6  00FF               	movwf	127
 10109  04E7  087F               	movf	127,w
 10110  04E8  07B3               	addwf	___ftadd@exp2,f
 10111  04E9                     l3828:	
 10112  04E9  0834               	movf	___ftadd@exp1,w
 10113  04EA  0633               	xorwf	___ftadd@exp2,w
 10114  04EB  1D03               	skipz
 10115  04EC  2CDF               	goto	l3824
 10116  04ED                     l766:	
 10117  04ED  1FB2               	btfss	___ftadd@sign,7
 10118  04EE  2CFF               	goto	l3832
 10119  04EF  30FF               	movlw	255
 10120  04F0  06AB               	xorwf	___ftadd@f1,f
 10121  04F1  30FF               	movlw	255
 10122  04F2  06AC               	xorwf	___ftadd@f1+1,f
 10123  04F3  30FF               	movlw	255
 10124  04F4  06AD               	xorwf	___ftadd@f1+2,f
 10125  04F5  3001               	movlw	1
 10126  04F6  07AB               	addwf	___ftadd@f1,f
 10127  04F7  3000               	movlw	0
 10128  04F8  1803               	skipnc
 10129  04F9  3001               	movlw	1
 10130  04FA  07AC               	addwf	___ftadd@f1+1,f
 10131  04FB  3000               	movlw	0
 10132  04FC  1803               	skipnc
 10133  04FD  3001               	movlw	1
 10134  04FE  07AD               	addwf	___ftadd@f1+2,f
 10135  04FF                     l3832:	
 10136  04FF  1F32               	btfss	___ftadd@sign,6
 10137  0500  2D11               	goto	l3836
 10138  0501  30FF               	movlw	255
 10139  0502  06AE               	xorwf	___ftadd@f2,f
 10140  0503  30FF               	movlw	255
 10141  0504  06AF               	xorwf	___ftadd@f2+1,f
 10142  0505  30FF               	movlw	255
 10143  0506  06B0               	xorwf	___ftadd@f2+2,f
 10144  0507  3001               	movlw	1
 10145  0508  07AE               	addwf	___ftadd@f2,f
 10146  0509  3000               	movlw	0
 10147  050A  1803               	skipnc
 10148  050B  3001               	movlw	1
 10149  050C  07AF               	addwf	___ftadd@f2+1,f
 10150  050D  3000               	movlw	0
 10151  050E  1803               	skipnc
 10152  050F  3001               	movlw	1
 10153  0510  07B0               	addwf	___ftadd@f2+2,f
 10154  0511                     l3836:	
 10155  0511  01B2               	clrf	___ftadd@sign
 10156  0512  082B               	movf	___ftadd@f1,w
 10157  0513  07AE               	addwf	___ftadd@f2,f
 10158  0514  082C               	movf	___ftadd@f1+1,w
 10159  0515  3DAF               	addwfc	___ftadd@f2+1,f
 10160  0516  082D               	movf	___ftadd@f1+2,w
 10161  0517  3DB0               	addwfc	___ftadd@f2+2,f
 10162  0518  1FB0               	btfss	___ftadd@f2+2,7
 10163  0519  2D2C               	goto	l3846
 10164  051A  30FF               	movlw	255
 10165  051B  06AE               	xorwf	___ftadd@f2,f
 10166  051C  30FF               	movlw	255
 10167  051D  06AF               	xorwf	___ftadd@f2+1,f
 10168  051E  30FF               	movlw	255
 10169  051F  06B0               	xorwf	___ftadd@f2+2,f
 10170  0520  3001               	movlw	1
 10171  0521  07AE               	addwf	___ftadd@f2,f
 10172  0522  3000               	movlw	0
 10173  0523  1803               	skipnc
 10174  0524  3001               	movlw	1
 10175  0525  07AF               	addwf	___ftadd@f2+1,f
 10176  0526  3000               	movlw	0
 10177  0527  1803               	skipnc
 10178  0528  3001               	movlw	1
 10179  0529  07B0               	addwf	___ftadd@f2+2,f
 10180  052A  01B2               	clrf	___ftadd@sign
 10181  052B  0AB2               	incf	___ftadd@sign,f
 10182  052C                     l3846:	
 10183  052C  082E               	movf	___ftadd@f2,w
 10184  052D  00A6               	movwf	___ftpack@arg
 10185  052E  082F               	movf	___ftadd@f2+1,w
 10186  052F  00A7               	movwf	___ftpack@arg+1
 10187  0530  0830               	movf	___ftadd@f2+2,w
 10188  0531  00A8               	movwf	___ftpack@arg+2
 10189  0532  0834               	movf	___ftadd@exp1,w
 10190  0533  00FF               	movwf	127
 10191  0534  087F               	movf	127,w
 10192  0535  00A9               	movwf	___ftpack@exp
 10193  0536  0832               	movf	___ftadd@sign,w
 10194  0537  00FF               	movwf	127
 10195  0538  087F               	movf	127,w
 10196  0539  00AA               	movwf	___ftpack@sign
 10197  053A  3187  2788         	fcall	___ftpack
 10198  053C  0020               	movlb	0	; select bank0
 10199  053D  0826               	movf	?___ftpack,w
 10200  053E  00AB               	movwf	?___ftadd
 10201  053F  0827               	movf	?___ftpack+1,w
 10202  0540  00AC               	movwf	?___ftadd+1
 10203  0541  0828               	movf	?___ftpack+2,w
 10204  0542  00AD               	movwf	?___ftadd+2
 10205  0543  0008               	return
 10206  0544                     __end_of___ftadd:	
 10207                           
 10208                           	psect	text46
 10209  091E                     __ptext46:	
 10210 ;; *************** function ___awtoft *****************
 10211 ;; Defined at:
 10212 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
 10213 ;; Parameters:    Size  Location     Type
 10214 ;;  c               2    0[COMMON] int 
 10215 ;; Auto vars:     Size  Location     Type
 10216 ;;  sign            1    3[COMMON] unsigned char 
 10217 ;; Return value:  Size  Location     Type
 10218 ;;                  3    0[COMMON] float 
 10219 ;; Registers used:
 10220 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
 10221 ;; Tracked objects:
 10222 ;;		On entry : 0/0
 10223 ;;		On exit  : 0/0
 10224 ;;		Unchanged: 0/0
 10225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10226 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10227 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10229 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10230 ;;Total ram usage:        4 bytes
 10231 ;; Hardware stack levels used:    1
 10232 ;; Hardware stack levels required when called:    8
 10233 ;; This function calls:
 10234 ;;		___ftpack
 10235 ;; This function is called by:
 10236 ;;		_getADCValue
 10237 ;; This function uses a non-reentrant model
 10238 ;;
 10239                           
 10240                           
 10241                           ;psect for function ___awtoft
 10242  091E                     ___awtoft:	
 10243                           
 10244                           ;incstack = 0
 10245                           ; Regs used in ___awtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
 10246  091E  01F3               	clrf	___awtoft@sign
 10247  091F  1FF1               	btfss	___awtoft@c+1,7
 10248  0920  2928               	goto	l4342
 10249  0921  09F0               	comf	___awtoft@c,f
 10250  0922  09F1               	comf	___awtoft@c+1,f
 10251  0923  0AF0               	incf	___awtoft@c,f
 10252  0924  1903               	skipnz
 10253  0925  0AF1               	incf	___awtoft@c+1,f
 10254  0926  01F3               	clrf	___awtoft@sign
 10255  0927  0AF3               	incf	___awtoft@sign,f
 10256  0928                     l4342:	
 10257  0928  0870               	movf	___awtoft@c,w
 10258  0929  0020               	movlb	0	; select bank0
 10259  092A  00A6               	movwf	___ftpack@arg
 10260  092B  0871               	movf	___awtoft@c+1,w
 10261  092C  00A7               	movwf	___ftpack@arg+1
 10262  092D  01A8               	clrf	___ftpack@arg+2
 10263  092E  308E               	movlw	142
 10264  092F  00FF               	movwf	127
 10265  0930  087F               	movf	127,w
 10266  0931  00A9               	movwf	___ftpack@exp
 10267  0932  0873               	movf	___awtoft@sign,w
 10268  0933  00FF               	movwf	127
 10269  0934  087F               	movf	127,w
 10270  0935  00AA               	movwf	___ftpack@sign
 10271  0936  3187  2788         	fcall	___ftpack
 10272  0938  0020               	movlb	0	; select bank0
 10273  0939  0826               	movf	?___ftpack,w
 10274  093A  00F0               	movwf	?___awtoft
 10275  093B  0827               	movf	?___ftpack+1,w
 10276  093C  00F1               	movwf	?___awtoft+1
 10277  093D  0828               	movf	?___ftpack+2,w
 10278  093E  00F2               	movwf	?___awtoft+2
 10279  093F  0008               	return
 10280  0940                     __end_of___awtoft:	
 10281                           
 10282                           	psect	text47
 10283  0788                     __ptext47:	
 10284 ;; *************** function ___ftpack *****************
 10285 ;; Defined at:
 10286 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
 10287 ;; Parameters:    Size  Location     Type
 10288 ;;  arg             3    6[BANK0 ] unsigned um
 10289 ;;  exp             1    9[BANK0 ] unsigned char 
 10290 ;;  sign            1   10[BANK0 ] unsigned char 
 10291 ;; Auto vars:     Size  Location     Type
 10292 ;;		None
 10293 ;; Return value:  Size  Location     Type
 10294 ;;                  3    6[BANK0 ] float 
 10295 ;; Registers used:
 10296 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
 10297 ;; Tracked objects:
 10298 ;;		On entry : 0/0
 10299 ;;		On exit  : 0/0
 10300 ;;		Unchanged: 0/0
 10301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10302 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;Total ram usage:        5 bytes
 10307 ;; Hardware stack levels used:    1
 10308 ;; Hardware stack levels required when called:    7
 10309 ;; This function calls:
 10310 ;;		Nothing
 10311 ;; This function is called by:
 10312 ;;		___awtoft
 10313 ;;		___ftadd
 10314 ;;		___ftdiv
 10315 ;;		___ftmul
 10316 ;;		___lbtoft
 10317 ;;		___lltoft
 10318 ;;		___lwtoft
 10319 ;; This function uses a non-reentrant model
 10320 ;;
 10321                           
 10322                           
 10323                           ;psect for function ___ftpack
 10324  0788                     ___ftpack:	
 10325                           
 10326                           ;incstack = 0
 10327                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+9-btemp+11]
 10328  0788  0020               	movlb	0	; select bank0
 10329  0789  0829               	movf	___ftpack@exp,w
 10330  078A  1903               	btfsc	3,2
 10331  078B  2F91               	goto	l3678
 10332  078C  0828               	movf	___ftpack@arg+2,w
 10333  078D  0427               	iorwf	___ftpack@arg+1,w
 10334  078E  0426               	iorwf	___ftpack@arg,w
 10335  078F  1D03               	skipz
 10336  0790  2FA2               	goto	l3686
 10337  0791                     l3678:	
 10338  0791  3000               	movlw	0
 10339  0792  00A6               	movwf	?___ftpack
 10340  0793  3000               	movlw	0
 10341  0794  00A7               	movwf	?___ftpack+1
 10342  0795  3000               	movlw	0
 10343  0796  00A8               	movwf	?___ftpack+2
 10344  0797  0008               	return
 10345  0798                     l3682:	
 10346  0798  3001               	movlw	1
 10347  0799  00FF               	movwf	127
 10348  079A  087F               	movf	127,w
 10349  079B  07A9               	addwf	___ftpack@exp,f
 10350  079C  3001               	movlw	1
 10351  079D                     u3575:	
 10352  079D  36A8               	lsrf	___ftpack@arg+2,f
 10353  079E  0CA7               	rrf	___ftpack@arg+1,f
 10354  079F  0CA6               	rrf	___ftpack@arg,f
 10355  07A0  0B89               	decfsz	9,f
 10356  07A1  2F9D               	goto	u3575
 10357  07A2                     l3686:	
 10358  07A2  30FE               	movlw	254
 10359  07A3  0528               	andwf	___ftpack@arg+2,w
 10360  07A4  1903               	btfsc	3,2
 10361  07A5  2FBB               	goto	l3694
 10362  07A6  2F98               	goto	l3682
 10363  07A7                     l3688:	
 10364  07A7  3001               	movlw	1
 10365  07A8  00FF               	movwf	127
 10366  07A9  087F               	movf	127,w
 10367  07AA  07A9               	addwf	___ftpack@exp,f
 10368  07AB  3001               	movlw	1
 10369  07AC  07A6               	addwf	___ftpack@arg,f
 10370  07AD  3000               	movlw	0
 10371  07AE  1803               	skipnc
 10372  07AF  3001               	movlw	1
 10373  07B0  07A7               	addwf	___ftpack@arg+1,f
 10374  07B1  3000               	movlw	0
 10375  07B2  1803               	skipnc
 10376  07B3  3001               	movlw	1
 10377  07B4  07A8               	addwf	___ftpack@arg+2,f
 10378  07B5  3001               	movlw	1
 10379  07B6                     u3595:	
 10380  07B6  36A8               	lsrf	___ftpack@arg+2,f
 10381  07B7  0CA7               	rrf	___ftpack@arg+1,f
 10382  07B8  0CA6               	rrf	___ftpack@arg,f
 10383  07B9  0B89               	decfsz	9,f
 10384  07BA  2FB6               	goto	u3595
 10385  07BB                     l3694:	
 10386  07BB  30FF               	movlw	255
 10387  07BC  0528               	andwf	___ftpack@arg+2,w
 10388  07BD  1903               	btfsc	3,2
 10389  07BE  2FC8               	goto	l3698
 10390  07BF  2FA7               	goto	l3688
 10391  07C0                     l3696:	
 10392  07C0  3001               	movlw	1
 10393  07C1  02A9               	subwf	___ftpack@exp,f
 10394  07C2  3001               	movlw	1
 10395  07C3                     u3615:	
 10396  07C3  35A6               	lslf	___ftpack@arg,f
 10397  07C4  0DA7               	rlf	___ftpack@arg+1,f
 10398  07C5  0DA8               	rlf	___ftpack@arg+2,f
 10399  07C6  0B89               	decfsz	9,f
 10400  07C7  2FC3               	goto	u3615
 10401  07C8                     l3698:	
 10402  07C8  1BA7               	btfsc	___ftpack@arg+1,7
 10403  07C9  2FCE               	goto	l742
 10404  07CA  3002               	movlw	2
 10405  07CB  0229               	subwf	___ftpack@exp,w
 10406  07CC  1803               	skipnc
 10407  07CD  2FC0               	goto	l3696
 10408  07CE                     l742:	
 10409  07CE  1829               	btfsc	___ftpack@exp,0
 10410  07CF  2FD6               	goto	l743
 10411  07D0  30FF               	movlw	255
 10412  07D1  05A6               	andwf	___ftpack@arg,f
 10413  07D2  307F               	movlw	127
 10414  07D3  05A7               	andwf	___ftpack@arg+1,f
 10415  07D4  30FF               	movlw	255
 10416  07D5  05A8               	andwf	___ftpack@arg+2,f
 10417  07D6                     l743:	
 10418  07D6  1003               	clrc
 10419  07D7  0CA9               	rrf	___ftpack@exp,f
 10420  07D8  0829               	movf	___ftpack@exp,w
 10421  07D9  00FD               	movwf	125
 10422  07DA  01FE               	clrf	126
 10423  07DB  01FF               	clrf	127
 10424  07DC  3010               	movlw	16
 10425  07DD                     u3655:	
 10426  07DD  35FD               	lslf	125,f
 10427  07DE  0DFE               	rlf	126,f
 10428  07DF  0DFF               	rlf	127,f
 10429  07E0  0B89               	decfsz	9,f
 10430  07E1  2FDD               	goto	u3655
 10431  07E2  087D               	movf	125,w
 10432  07E3  04A6               	iorwf	___ftpack@arg,f
 10433  07E4  087E               	movf	126,w
 10434  07E5  04A7               	iorwf	___ftpack@arg+1,f
 10435  07E6  087F               	movf	127,w
 10436  07E7  04A8               	iorwf	___ftpack@arg+2,f
 10437  07E8  082A               	movf	___ftpack@sign,w
 10438  07E9  1903               	btfsc	3,2
 10439  07EA  0008               	return
 10440  07EB  17A8               	bsf	___ftpack@arg+2,7
 10441  07EC  0008               	return
 10442  07ED                     __end_of___ftpack:	
 10443                           
 10444                           	psect	text48
 10445  17D7                     __ptext48:	
 10446 ;; *************** function _hcsr04Init *****************
 10447 ;; Defined at:
 10448 ;;		line 7 in file "HC-SR04.c"
 10449 ;; Parameters:    Size  Location     Type
 10450 ;;		None
 10451 ;; Auto vars:     Size  Location     Type
 10452 ;;		None
 10453 ;; Return value:  Size  Location     Type
 10454 ;;                  1    wreg      void 
 10455 ;; Registers used:
 10456 ;;		wreg, status,2, status,0
 10457 ;; Tracked objects:
 10458 ;;		On entry : 0/0
 10459 ;;		On exit  : 0/0
 10460 ;;		Unchanged: 0/0
 10461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10466 ;;Total ram usage:        0 bytes
 10467 ;; Hardware stack levels used:    1
 10468 ;; Hardware stack levels required when called:    7
 10469 ;; This function calls:
 10470 ;;		Nothing
 10471 ;; This function is called by:
 10472 ;;		_main
 10473 ;; This function uses a non-reentrant model
 10474 ;;
 10475                           
 10476                           
 10477                           ;psect for function _hcsr04Init
 10478  17D7                     _hcsr04Init:	
 10479                           
 10480                           ;HC-SR04.c: 10: IOCAPbits.IOCAP3 = 1;
 10481                           
 10482                           ;incstack = 0
 10483                           ; Regs used in _hcsr04Init: [wreg+status,2+status,0]
 10484  17D7  0027               	movlb	7	; select bank7
 10485  17D8  1591               	bsf	17,3	;volatile
 10486                           
 10487                           ;HC-SR04.c: 11: PIE0bits.IOCIE = 1;
 10488  17D9  0021               	movlb	1	; select bank1
 10489  17DA  1610               	bsf	16,4	;volatile
 10490                           
 10491                           ;HC-SR04.c: 14: TRISCbits.TRISC4 = 0;
 10492  17DB  120E               	bcf	14,4	;volatile
 10493                           
 10494                           ;HC-SR04.c: 15: PORTCbits.RC4 = 0;
 10495  17DC  0020               	movlb	0	; select bank0
 10496  17DD  120E               	bcf	14,4	;volatile
 10497                           
 10498                           ;HC-SR04.c: 16: WPUAbits.WPUA3 = 0;
 10499  17DE  0024               	movlb	4	; select bank4
 10500  17DF  118C               	bcf	12,3	;volatile
 10501                           
 10502                           ;HC-SR04.c: 19: T1CONbits.TMR1ON = 0;
 10503  17E0  0020               	movlb	0	; select bank0
 10504  17E1  101B               	bcf	27,0	;volatile
 10505                           
 10506                           ;HC-SR04.c: 20: T1CONbits.TMR1CS = 0b01;
 10507  17E2  081B               	movf	27,w	;volatile
 10508  17E3  393F               	andlw	-193
 10509  17E4  3840               	iorlw	64
 10510  17E5  009B               	movwf	27	;volatile
 10511                           
 10512                           ;HC-SR04.c: 21: T1CONbits.T1CKPS = 0b00;
 10513  17E6  30CF               	movlw	-49
 10514  17E7  059B               	andwf	27,f	;volatile
 10515                           
 10516                           ;HC-SR04.c: 22: T1CONbits.T1SYNC = 1;
 10517  17E8  151B               	bsf	27,2	;volatile
 10518                           
 10519                           ;HC-SR04.c: 23: T1GCONbits.TMR1GE = 0;
 10520  17E9  139C               	bcf	28,7	;volatile
 10521  17EA  0008               	return
 10522  17EB                     __end_of_hcsr04Init:	
 10523                           
 10524                           	psect	intentry
 10525  0004                     __pintentry:	
 10526 ;; *************** function _ISR *****************
 10527 ;; Defined at:
 10528 ;;		line 13 in file "main.c"
 10529 ;; Parameters:    Size  Location     Type
 10530 ;;		None
 10531 ;; Auto vars:     Size  Location     Type
 10532 ;;		None
 10533 ;; Return value:  Size  Location     Type
 10534 ;;                  1    wreg      void 
 10535 ;; Registers used:
 10536 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath, cstack
 10537 ;; Tracked objects:
 10538 ;;		On entry : 0/0
 10539 ;;		On exit  : 0/0
 10540 ;;		Unchanged: 0/0
 10541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10544 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10545 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10546 ;;Total ram usage:        6 bytes
 10547 ;; Hardware stack levels used:    1
 10548 ;; Hardware stack levels required when called:    6
 10549 ;; This function calls:
 10550 ;;		_hcsr04ISR
 10551 ;;		_nrf24l01ISR
 10552 ;; This function is called by:
 10553 ;;		Interrupt level 1
 10554 ;; This function uses a non-reentrant model
 10555 ;;
 10556                           
 10557  0004                     _ISR:	
 10558                           
 10559                           ;incstack = 0
 10560                           ; Regs used in _ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+9+btemp+11+p
      +                          clath+cstack]
 10561  0004  3180               	pagesel	$
 10562  0005  0874               	movf	116,w
 10563  0006  0020               	movlb	0	; select bank0
 10564  0007  00A0               	movwf	??_ISR
 10565  0008  0875               	movf	117,w
 10566  0009  00A1               	movwf	??_ISR+1
 10567  000A  087C               	movf	124,w
 10568  000B  00A2               	movwf	??_ISR+2
 10569  000C  087D               	movf	125,w
 10570  000D  00A3               	movwf	??_ISR+3
 10571  000E  087F               	movf	127,w
 10572  000F  00A4               	movwf	??_ISR+4
 10573  0010  30B0               	movlw	low ___int_sp
 10574  0011  0086               	movwf	6
 10575  0012  3022               	movlw	high ___int_sp
 10576  0013  0087               	movwf	7
 10577  0014  0875               	movf	117,w
 10578  0015  00A5               	movwf	??_ISR+5
 10579                           
 10580                           ;main.c: 15: if (IOCAFbits.IOCAF3){
 10581  0016  0027               	movlb	7	; select bank7
 10582  0017  1D93               	btfss	19,3	;volatile
 10583  0018  281E               	goto	i1l4812
 10584                           
 10585                           ;main.c: 16: hcsr04ISR();
 10586  0019  3197  2783  3180   	fcall	_hcsr04ISR
 10587                           
 10588                           ;main.c: 17: IOCAFbits.IOCAF3 = 0;
 10589  001C  0027               	movlb	7	; select bank7
 10590  001D  1193               	bcf	19,3	;volatile
 10591  001E                     i1l4812:	
 10592                           
 10593                           ;main.c: 18: };main.c: 20: if (PIR0bits.INTF){
 10594  001E  0020               	movlb	0	; select bank0
 10595  001F  1C10               	btfss	16,0	;volatile
 10596  0020  2825               	goto	i1l4818
 10597                           
 10598                           ;main.c: 21: nrf24l01ISR();
 10599  0021  318B  23F1         	fcall	_nrf24l01ISR
 10600                           
 10601                           ;main.c: 22: PIR0bits.INTF = 0;
 10602  0023  0020               	movlb	0	; select bank0
 10603  0024  1010               	bcf	16,0	;volatile
 10604  0025                     i1l4818:	
 10605                           
 10606                           ;main.c: 23: };main.c: 25: if (PIR1bits.ADIF){
 10607  0025  1B11               	btfsc	17,6	;volatile
 10608                           
 10609                           ;main.c: 26: PIR1bits.ADIF = 0;
 10610  0026  1311               	bcf	17,6	;volatile
 10611  0027  0825               	movf	??_ISR+5,w
 10612  0028  00FF               	movwf	127
 10613  0029  0824               	movf	??_ISR+4,w
 10614  002A  00FD               	movwf	125
 10615  002B  0823               	movf	??_ISR+3,w
 10616  002C  00FC               	movwf	124
 10617  002D  0822               	movf	??_ISR+2,w
 10618  002E  00F5               	movwf	117
 10619  002F  0821               	movf	??_ISR+1,w
 10620  0030  00F4               	movwf	116
 10621  0031  0009               	retfie
 10622  0032                     __end_of_ISR:	
 10623                           
 10624                           	psect	text50
 10625  0BF1                     __ptext50:	
 10626 ;; *************** function _nrf24l01ISR *****************
 10627 ;; Defined at:
 10628 ;;		line 190 in file "nrf24l01.c"
 10629 ;; Parameters:    Size  Location     Type
 10630 ;;		None
 10631 ;; Auto vars:     Size  Location     Type
 10632 ;;		None
 10633 ;; Return value:  Size  Location     Type
 10634 ;;                  1    wreg      void 
 10635 ;; Registers used:
 10636 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath
 10637 ;; Tracked objects:
 10638 ;;		On entry : 0/0
 10639 ;;		On exit  : 0/0
 10640 ;;		Unchanged: 0/0
 10641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10646 ;;Total ram usage:        0 bytes
 10647 ;; Hardware stack levels used:    1
 10648 ;; Hardware stack levels required when called:    5
 10649 ;; This function calls:
 10650 ;;		_nrf24l01Send
 10651 ;;		_nrf24l01Service
 10652 ;;		_nrf24l01SetRXMode
 10653 ;; This function is called by:
 10654 ;;		_ISR
 10655 ;; This function uses a non-reentrant model
 10656 ;;
 10657                           
 10658                           
 10659                           ;psect for function _nrf24l01ISR
 10660  0BF1                     _nrf24l01ISR:	
 10661                           
 10662                           ;nrf24l01.c: 192: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
 10663                           
 10664                           ;incstack = 0
 10665                           ; Regs used in _nrf24l01ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+9+bt
      +                          emp+11+pclath]
 10666  0BF1  3000               	movlw	0
 10667  0BF2  001E               	movwi fsr1++
 10668  0BF3  3007               	movlw	7
 10669  0BF4  3187  27ED  318B   	fcall	_nrf24l01Send
 10670  0BF7  00FF               	movwf	127
 10671  0BF8  087F               	movf	127,w
 10672  0BF9  0020               	movlb	0	; select bank0
 10673  0BFA  00E6               	movwf	_status+2	;volatile
 10674                           
 10675                           ;nrf24l01.c: 195: if (status.statusRegister.RX_DR){
 10676  0BFB  1F66               	btfss	_status+2,6	;volatile
 10677  0BFC  2C09               	goto	i1l4726
 10678                           
 10679                           ;nrf24l01.c: 198: if (status.RX == 0){
 10680  0BFD  0865               	movf	_status+1,w	;volatile
 10681  0BFE  1D03               	btfss	3,2
 10682  0BFF  2C05               	goto	i1l286
 10683                           
 10684                           ;nrf24l01.c: 199: status.RX = 1;
 10685  0C00  3001               	movlw	1
 10686  0C01  00FF               	movwf	127
 10687  0C02  087F               	movf	127,w
 10688  0C03  00E5               	movwf	_status+1	;volatile
 10689                           
 10690                           ;nrf24l01.c: 200: }
 10691  0C04  2C06               	goto	i1l4724
 10692  0C05                     i1l286:	
 10693                           
 10694                           ;nrf24l01.c: 202: else{;nrf24l01.c: 203: status.statusRegister.RX_DR = 0;
 10695  0C05  1366               	bcf	_status+2,6	;volatile
 10696  0C06                     i1l4724:	
 10697                           
 10698                           ;nrf24l01.c: 204: };nrf24l01.c: 206: nrf24l01Service();
 10699  0C06  318E  26B2  318B   	fcall	_nrf24l01Service
 10700  0C09                     i1l4726:	
 10701                           
 10702                           ;nrf24l01.c: 207: };nrf24l01.c: 209: if (status.statusRegister.TX_DS){
 10703  0C09  0020               	movlb	0	; select bank0
 10704  0C0A  1EE6               	btfss	_status+2,5	;volatile
 10705  0C0B  2C33               	goto	i1l4744
 10706                           
 10707                           ;nrf24l01.c: 212: status.TX = 3;
 10708  0C0C  3003               	movlw	3
 10709  0C0D  00FF               	movwf	127
 10710  0C0E  087F               	movf	127,w
 10711  0C0F  00E4               	movwf	_status	;volatile
 10712                           
 10713                           ;nrf24l01.c: 214: if (lastTXPacket->packetData.ACKRequest){
 10714  0C10  0869               	movf	_lastTXPacket,w
 10715  0C11  0084               	movwf	4
 10716  0C12  3001               	movlw	1	; select bank2/3
 10717  0C13  0085               	movwf	5
 10718  0C14  1D00               	btfss	0,2
 10719  0C15  2C23               	goto	i1l4736
 10720                           
 10721                           ;nrf24l01.c: 216: status.TX = 4;
 10722  0C16  3004               	movlw	4
 10723  0C17  00FF               	movwf	127
 10724  0C18  087F               	movf	127,w
 10725  0C19  00E4               	movwf	_status	;volatile
 10726                           
 10727                           ;nrf24l01.c: 217: status.retryCount = 0xFF;
 10728  0C1A  30FF               	movlw	255
 10729  0C1B  00FF               	movwf	127
 10730  0C1C  087F               	movf	127,w
 10731  0C1D  00E8               	movwf	_status+4	;volatile
 10732                           
 10733                           ;nrf24l01.c: 218: nrf24l01SetRXMode(1);
 10734  0C1E  3001               	movlw	1
 10735  0C1F  318A  22AD  318B   	fcall	_nrf24l01SetRXMode
 10736                           
 10737                           ;nrf24l01.c: 219: }else{
 10738  0C22  2C25               	goto	i1l4738
 10739  0C23                     i1l4736:	
 10740                           
 10741                           ;nrf24l01.c: 220: status.TX = 0;
 10742  0C23  0020               	movlb	0	; select bank0
 10743  0C24  01E4               	clrf	_status	;volatile
 10744  0C25                     i1l4738:	
 10745                           
 10746                           ;nrf24l01.c: 221: };nrf24l01.c: 223: if (lastTXPacket->packetData.IsACK){
 10747  0C25  0020               	movlb	0	; select bank0
 10748  0C26  0869               	movf	_lastTXPacket,w
 10749  0C27  0084               	movwf	4
 10750  0C28  3001               	movlw	1	; select bank2/3
 10751  0C29  0085               	movwf	5
 10752  0C2A  1D80               	btfss	0,3
 10753  0C2B  2C30               	goto	i1l4742
 10754                           
 10755                           ;nrf24l01.c: 224: nrf24l01SetRXMode(1);
 10756  0C2C  3001               	movlw	1
 10757  0C2D  318A  22AD  318B   	fcall	_nrf24l01SetRXMode
 10758  0C30                     i1l4742:	
 10759                           
 10760                           ;nrf24l01.c: 225: };nrf24l01.c: 227: nrf24l01Service();
 10761  0C30  318E  26B2  318B   	fcall	_nrf24l01Service
 10762  0C33                     i1l4744:	
 10763                           
 10764                           ;nrf24l01.c: 228: };nrf24l01.c: 233: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          7, status.statusRegister.byte);
 10765  0C33  0020               	movlb	0	; select bank0
 10766  0C34  0866               	movf	_status+2,w	;volatile
 10767  0C35  001E               	movwi fsr1++
 10768  0C36  3027               	movlw	39
 10769  0C37  3187  27ED         	fcall	_nrf24l01Send
 10770  0C39  0008               	return
 10771  0C3A                     __end_of_nrf24l01ISR:	
 10772                           
 10773                           	psect	text51
 10774  1783                     __ptext51:	
 10775 ;; *************** function _hcsr04ISR *****************
 10776 ;; Defined at:
 10777 ;;		line 87 in file "HC-SR04.c"
 10778 ;; Parameters:    Size  Location     Type
 10779 ;;		None
 10780 ;; Auto vars:     Size  Location     Type
 10781 ;;		None
 10782 ;; Return value:  Size  Location     Type
 10783 ;;                  1    wreg      void 
 10784 ;; Registers used:
 10785 ;;		None
 10786 ;; Tracked objects:
 10787 ;;		On entry : 0/0
 10788 ;;		On exit  : 0/0
 10789 ;;		Unchanged: 0/0
 10790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10795 ;;Total ram usage:        0 bytes
 10796 ;; Hardware stack levels used:    1
 10797 ;; This function calls:
 10798 ;;		Nothing
 10799 ;; This function is called by:
 10800 ;;		_ISR
 10801 ;; This function uses a non-reentrant model
 10802 ;;
 10803                           
 10804                           
 10805                           ;psect for function _hcsr04ISR
 10806  1783                     _hcsr04ISR:	
 10807                           
 10808                           ;HC-SR04.c: 88: T1CONbits.TMR1ON = 0;
 10809                           
 10810                           ;incstack = 0
 10811                           ; Regs used in _hcsr04ISR: []
 10812  1783  0020               	movlb	0	; select bank0
 10813  1784  101B               	bcf	27,0	;volatile
 10814  1785  0008               	return
 10815  1786                     __end_of_hcsr04ISR:	
 10816  0074                     btemp	set	116	;btemp
 10817  0074                     wtemp0	set	116
 10818  0076                     wtemp1	set	118
 10819  0078                     wtemp2	set	120
 10820  007A                     wtemp3	set	122
 10821  007C                     wtemp4	set	124
 10822  007E                     wtemp5	set	126
 10823  0074                     ttemp0	set	116
 10824  0077                     ttemp1	set	119
 10825  007A                     ttemp2	set	122
 10826  007D                     ttemp3	set	125
 10827  0074                     ltemp0	set	116
 10828  0078                     ltemp1	set	120
 10829  007C                     ltemp2	set	124
 10830  0076                     ltemp3	set	118


Data Sizes:
    Strings     50
    Constant    46
    Data        1
    BSS         125
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            4      4       4
    BANK0            80     68      74
    BANK1            80     61      70
    BANK2            80      0      45
    BANK3            80      0      66
    BANK4            80     48      48
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> sendMessage@ftoaStatus(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK3[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 
		 -> RXPacket(BANK3[33]), romDataMap(BANK2[28]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK3[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 
		 -> RXPacket(BANK3[33]), romDataMap(BANK2[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 33
		 -> romDataMap.name(BANK2[16]), packet.Message(BANK0[32]), packet.Message(BANK0[32]), main@packet(BANK1[33]), 
		 -> STR_7(CODE[4]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK2[17]), STR_9(CODE[6]), STR_8(CODE[6]), STR_6(CODE[5]), 
		 -> STR_5(CODE[5]), STR_4(CODE[6]), STR_3(CODE[5]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_10(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendTXBuffer@packet	PTR struct . size(1) Largest target is 33
		 -> TXPacket(BANK3[33]), RXPacket(BANK3[33]), 

    lastTXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), TXPacket(BANK3[33]), RXPacket(BANK3[33]), 

    nrf24l01SendPacket@txPacket	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK2[28]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sendMessage@topic	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_9(CODE[6]), STR_8(CODE[6]), STR_6(CODE[5]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[5]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    sendMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK2[28]), 


Critical Paths under _main in COMMON

    _main->_nrf24l01SetTXPipe
    _main->_strcpy
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01GetPipe->___lwmod
    _loop->___lltoft
    _sendMessage->_strcpy
    _sleepListren->_sleepMs
    _nrf24l01SendPacket->_sleepMs
    _nrf24l01SendPacket->_strcpy
    _ftoa->___lltoft
    _sprintf->___wmul
    ___ftsub->___lltoft
    _hcsr04GetAerage->___lbtoft
    _hcsr04GetAerage->_sleepMs
    _getADCValue->___awtoft
    _getADCValue->_sleepMs
    ___ftdiv->___lbtoft
    ___ftadd->___awtoft

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01GetPipe->___lwmod
    _sendMessage->_strcat
    _nrf24l01SendPacket->_strcpy
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _hcsr04GetAerage->___ftdiv
    ___lwtoft->___ftpack
    ___lbtoft->___ftpack
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sendMessage
    _loop->_sendMessage
    _sendMessage->_strcat
    _strcat->_ftoa

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_loop

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0  115534
                                             26 BANK1     35    35      0
                         _hcsr04Init
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                        _sendMessage
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    2274
                                             16 BANK0      1     1      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                9     9      0    2274
                                              7 BANK0      9     9      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    2     2      0     406
                                              3 COMMON     1     1      0
                                              6 BANK0      1     1      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     344
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    3     3      0     611
                                              0 COMMON     3     3      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      4     4      0     807
                                              7 BANK0      4     4      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     440
                                              0 COMMON     4     0      4
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _loop                                                48    48      0   82500
                                              0 BANK4     48    48      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lltoft
                        _getADCValue
                    _hcsr04GetAerage
                      _hcsr04Trigger
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _sendMessage                                          9     2      7   28208
                                             17 BANK1      9     2      7
                               _ftoa
                        _getADCValue (ARG)
                    _hcsr04GetAerage (ARG)
                             _memset
                 _nrf24l01SendPacket
                       _sleepListren
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     751
                                             66 BANK0      2     2      0
                                             13 BANK1      4     0      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _sleepListren                                         2     0      2    1538
                                              6 BANK0      2     0      2
                  _nrf24l01SetRXMode
                            _sleepMs
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendPacket                                   2     0      2    4027
                                              8 BANK0      2     0      2
                    _nrf24l01Service
                            _sleepMs
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     565
                                              0 COMMON     4     0      4
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    2567
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     968
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     618
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     463
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                13     9      4   19198
                                              0 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             34    24     10    3016
                                             27 BANK0     26    16     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      99
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     552
                                              0 COMMON     4     0      4
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     440
                                              0 COMMON     1     1      0
                                             19 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     449
                                              6 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             5     1      4    3845
                                              0 COMMON     4     0      4
                                             11 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             10     6      4     579
                                             56 BANK0     10     6      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6104
                                             21 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     273
                                             44 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             12     6      6    4439
                                             44 BANK0     12     6      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               6     0      6     406
                                              6 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _hcsr04Trigger                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _hcsr04GetAerage                                      9     6      3   19057
                                             34 BANK0      9     6      3
                            ___ftadd
                            ___ftdiv
                           ___lbtoft
                           ___lwtoft
                            _sleepMs
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    3670
                                              0 COMMON     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             5     1      4    3566
                                              0 COMMON     4     0      4
                                             11 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         10     7      3   15553
                                             34 BANK0     10     7      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            _sleepMs
 ---------------------------------------------------------------------------------
 (3) _sleepMs                                              4     2      2     785
                                              0 COMMON     4     2      2
                           _resetWDT
 ---------------------------------------------------------------------------------
 (4) _resetWDT                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             13     7      6    4995
                                             21 BANK0     13     7      6
                            ___ftadd (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             10     4      6    5800
                                             11 BANK0     10     4      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3772
                                              0 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             5     0      5    3535
                                              6 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (1) _hcsr04Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  6     6      0    3648
                                              0 BANK0      6     6      0
                          _hcsr04ISR
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (10) _nrf24l01ISR                                         0     0      0    3648
                       _nrf24l01Send
                    _nrf24l01Service
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    2567
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     968
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     618
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     463
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 (10) _hcsr04ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _hcsr04Init
   _loop
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         _sleepMs
           _resetWDT
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         _sleepMs
           _resetWDT
     ___lltoft
       ___ftpack
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       _sleepMs
         _resetWDT
     _hcsr04GetAerage
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft
         ___ftpack
       ___lwtoft
         ___ftpack
       _sleepMs
         _resetWDT
     _hcsr04Trigger
     _sendMessage
       _ftoa
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         _sleepMs
           _resetWDT
       _hcsr04GetAerage (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         ___lwtoft
           ___ftpack
         _sleepMs
           _resetWDT
       _memset (ARG)
       _nrf24l01SendPacket (ARG)
         _nrf24l01Service
           _memset
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
           _nrf24l01SendTXBuffer
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
             _nrf24l01SetRXMode
               _nrf24l01Send
                 _nrf24l01SPIEnd
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
             _strlen
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _strcmp
         _sleepMs
           _resetWDT
         _strcpy
       _sleepListren (ARG)
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _sleepMs
           _resetWDT
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               _sleepMs
                 _resetWDT
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               _sleepMs
                 _resetWDT
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftdiv
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 _sleepMs
                   _resetWDT
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
       _strcpy (ARG)
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
     _nrf24l01SPISend
     _nrf24l01SPIStart
   _sendMessage
     _ftoa
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           _sleepMs
             _resetWDT
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           _sleepMs
             _resetWDT
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _sleepMs
               _resetWDT
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       _sleepMs
         _resetWDT
     _hcsr04GetAerage (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft
         ___ftpack
       ___lwtoft
         ___ftpack
       _sleepMs
         _resetWDT
     _memset (ARG)
     _nrf24l01SendPacket (ARG)
       _nrf24l01Service
         _memset
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
         _nrf24l01SendTXBuffer
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _strlen
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _strcmp
       _sleepMs
         _resetWDT
       _strcpy
     _sleepListren (ARG)
       _nrf24l01SetRXMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _sleepMs
         _resetWDT
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
     _strcpy (ARG)
   _strcpy

 _ISR (ROOT)
   _hcsr04ISR
   _nrf24l01ISR
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
     _nrf24l01Service
       _memset
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SendTXBuffer
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _strlen
       _nrf24l01SetRXMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _strcmp
     _nrf24l01SetRXMode
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            4      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               4      4       4       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       8       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     44      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     3D      46       7       87.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      2D       9       56.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      42      11       82.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50     30      30      13       60.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     133      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     13B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Thu Aug 16 16:41:34 2018

                ___bmul@product 0071                     __CFG_CP$OFF 0000                              l47 0808  
              sendMessage@value 00B5                sendMessage@topic 00B3             ___wmul@multiplicand 0072  
                  ___ftadd@exp1 0034                    ___ftadd@exp2 0033               sendMessage@packet 00B1  
                  ___ftadd@sign 0032                             l314 0F55                             l173 073F  
                           l272 08AE                             l506 0107                             l259 0AE6  
                           l532 0870                             l509 0126                             l742 07CE  
                           l743 07D6                             l826 0DFE                             l766 04ED  
                           l957 0A77                    __CFG_CPD$OFF 0000                             _ISR 0004  
                           wreg 0009                    __CFG_LVP$OFF 0000                            ?_ISR 0070  
                  ___ftdiv@cntr 003C                    ___ftdiv@sign 0041                  ??_nrf24l01Init 0030  
                          l4000 015A                            l4020 01BD                            l4012 0196  
                          l4030 01D5                            l4022 01C0                            l4120 06AF  
                          l4112 069B                            l4200 0996                            l4016 01AA  
                          l4008 0187                            l4040 0225                            l4202 09A6  
                          l4050 17CE                            l4124 06B7                            l4108 0693  
                          l4036 021A                            l4038 0064                            l4222 0A51  
                          l4310 0BCE                            l4214 08FD                            l4230 09FC  
                          l4046 17C8                            l4064 0AFF                            l4312 0BE5  
                          l4232 0A05                            l4146 0850                            l4330 098A  
                          l4500 0CEA                            l4068 0B15                            l4092 0658  
                          l4156 0DAA                            l4244 0586                            l4228 09F0  
                          l4342 0928                            l4422 070E                            l4086 0642  
                          l4190 0E0F                            l4174 0DDA                            l4326 0978  
                          l4352 0F6E                            l4440 0780                            l4424 0719  
                          l4184 0DF5                            l4328 096B                            l4520 0EC7  
                          l3810 04B9                            l4434 0761                            l4426 0702  
                          l4186 0E01                            l4178 0DE8                            l3730 17C4  
                          l4514 0EBD                            l4266 0A38                            l4290 08BA  
                          l3804 04A6                            l3660 080D                            l3814 04C3  
                          l4358 0F84                            l4438 0779                            l4702 09C2  
                          l3832 04FF                            l3824 04DF                            l3816 04C8  
                          l4384 0FDE                            l4376 0FC5                            l3736 0869  
                          l3904 0ABF                            l4544 0EF7                            l4704 09CE  
                          l4712 09E3                            l3682 0798                            l3818 04CC  
                          l4490 0CAC                            l3770 0C84                            l4546 0F0C  
                          l4650 03C5                            l3836 0511                            l3828 04E9  
                          l4492 0CBB                            l3756 0C4B                            l3860 0B3B  
                          l3932 088D                            l4556 0F2B                            l4708 09DA  
                          l4660 040F                            l3694 07BB                            l3686 07A2  
                          l3678 0791                            l3846 052C                            l3782 0476  
                          l3766 0C79                            l3758 0C59                            l3934 0898  
                          l3926 0830                            l3696 07C0                            l3688 07A7  
                          l3792 048C                            l3864 0B53                            l3952 0097  
                          l3960 00C5                            l4568 0F48                            l3698 07C8  
                          l3786 047D                            l3890 0965                            l4498 0C9A  
                          l3858 0B2D                            l3970 00D4                            l3946 0087  
                          l4666 041E                            l4906 0EAE                            l3868 0B5E  
                          l3972 0103                            l3886 095D                            l3878 0945  
                          l3974 0109                            l3984 0135                            l4776 0A7E  
                          l3994 0154                            l3978 010E                            l3898 0AB7  
                          l4778 0A9E                            STR_1 1836                    __CFG_WDTE$ON 0000  
                          STR_2 1836                            STR_3 182D                            STR_4 1818  
                          STR_5 1828                            STR_6 1823                            STR_7 1832  
                          STR_8 180C                            STR_9 1812                            u4104 094D  
                          u4105 094B                            u4045 0B30                            u4065 0B49  
                          u4305 017D                            u4075 0B54                            u4325 018E  
                          u5125 09C5                            u3615 07C3                            u4335 01A0  
                          u4505 06A2                            u3705 0871                            u4345 01B2  
                          u5145 09D4                            u5225 0A8C                            u3715 0876  
                          u5155 09DB                            u5307 0E34                            u5317 08E7  
                          u3655 07DD                            u3575 079D                            u4535 06B8  
                          u5327 08F3                            u4545 06BE                            u4465 0664  
                          u4625 0DDB                            u3745 0C4E                            u5337 0BEB  
                          u3595 07B6                            u4475 0674                            u5347 0AC9  
                          u3925 04BA                            u3765 0C5A                            u5357 0ADA  
                          u4495 069C                            u4655 0DF6                            u3775 0C6E  
                          u5367 0AE3                            u3785 0C7A                            u5377 17AA  
                          u3955 04CD                            u4595 0DB1                            u5387 179D  
                          u4845 0F96                            u5397 0CA2                            u4685 099B  
                          u4774 08B4                            u3895 04A7                            u4855 0FA6  
                          u4775 08B3                            u3985 04E0                            u4865 0FC6  
                          u4875 0FD5                            u4885 0FDF                            _WPUA 020C  
                          _WPUC 020E  __size_of_nrf24l01InterfaceInit 001E                    __CFG_WRT$OFF 0000  
                 __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 08DE                            ___sp 2170  
                          _main 0E18                            _ftoa 0544                    ___ftpack@arg 0026  
                          _loop 022B                    ___ftpack@exp 0029                            fsr0h 0005  
                          fsr1h 0007                            indf0 0000                            fsr0l 0004  
                          fsr1l 0006                            btemp 0074                   __CFG_BORV$LOW 0000  
                          start 0032           nrf24l01SetRXPipe@pipe 0071                   __CFG_CSWEN$ON 0000  
             ___bmul@multiplier 0072                    ___ftmul@cntr 0056                    ___ftmul@sign 0057  
   __size_of_nrf24l01SendPacket 0030                           ??_ISR 0020                    ___fttol@exp1 0061  
          __size_of_getADCValue 00A9                    ___fttol@lval 005D                           ?_main 0070  
                         ?_ftoa 00A0                           ?_loop 0070                 __end_of___ftadd 0544  
                         STR_10 1801                 __end_of___ftdiv 1000                 __end_of___ftneg 179C  
               __end_of___lldiv 0C8D                 __end_of___ftmul 06DF                 __end_of___llmod 0B67  
               __end_of___ftsub 0866                 __end_of___fttol 0E18                  __CFG_DEBUG$OFF 0000  
               __end_of___lwmod 09E8                           i1l286 0C05                           _TMR1H 001A  
                         _TMR1L 0019                   __CFG_PWRTE$ON 0000           nrf24l01SetTXPipe@pipe 0026  
                  ___lltoft@exp 002B                   ___awtoft@sign 0073                 __end_of_dpowers 1028  
               __end_of_isdigit 17C6                   ___ftpack@sign 002A                           ftoa@f 00A0  
                         ftoa@l 00A8                  __CFG_BOREN$OFF 0000                 __end_of_sleepMs 0968  
                         ltemp0 0074                           ltemp1 0078                           ltemp2 007C  
                         ltemp3 0076                           ttemp0 0074                           ttemp1 0077  
                         ttemp2 007A                           ttemp3 007D                           status 0003  
                         wtemp0 0074                           wtemp1 0076                           wtemp2 0078  
                         wtemp3 007A                           wtemp4 007C                           wtemp5 007E  
               __end_of_sprintf 022B               getADCValue@adcSum 0049                _nrf24l01SPIStart 17A5  
                __CFG_MCLRE$OFF 0000                 __initialization 0034          nrf24l01InitRegisters@i 002E  
                  __end_of_main 0EB2                    __end_of_ftoa 062B                    __end_of_loop 0347  
                        ??_main 00BA                   ___fttol@sign1 005C                          ??_ftoa 0074  
                        ??_loop 0074                    ?_sendMessage 00B1        __size_of_nrf24l01SPISend 000F  
              ___llmod@dividend 0037                          _ADRESH 009C                          _ADRESL 009B  
              __end_of___awtoft 0940                          _ANSELA 018C                          _ANSELC 018E  
              __end_of___ftpack 07ED                __end_of___lbtoft 082B                __end_of___lltoft 09BB  
                        _ODCONA 028C        __size_of_nrf24l01GetPipe 0034                          _ODCONC 028E  
                        i1l4724 0C06                          i1l4812 001E                          i1l4742 0C30  
                        i1l4726 0C09                          i1l4736 0C23                          i1l4744 0C33  
                        i1l4738 0C25                          i1l4818 0025                          _INLVLA 038C  
                        _INLVLC 038E                __end_of___lwtoft 1800        __size_of_nrf24l01Service 00A5  
          __size_of_nrf24l01ISR 0049                          ___bmul 17C6                          ___ftge 0AE8  
                        ___wmul 0866                       ??___ftadd 0031                  __CFG_STVREN$ON 0000  
                     ??___ftdiv 003B                       ??___ftneg 0074                       ??___lldiv 0070  
                     ??___ftmul 0074                       ??___llmod 0070                       ??___ftsub 0074  
                     ??___fttol 0074                       ??___lwmod 0074            __end_of_nrf24l01Init 08FD  
          __end_of_nrf24l01Send 0800                          _memset 0A47           _nrf24l01InitRegisters 0347  
         __end_of_hcsr04Trigger 17B8                          _status 0064                          _strcat 09E8  
                        _strcmp 0968                          _strcpy 082B                          _strlen 0884  
                        ftoa@cp 00AC           ___ftmul@f3_as_product 0053                __end_of_resetWDT 1793  
                     ??_isdigit 0070                          loop@ta 0223                          loop@vt 0220  
                     ??_sleepMs 0072                       ??_sprintf 0045              getADCValue@adcLoop 0047  
       __end_of__initialization 0057                      ___ftadd@f1 002B                      ___ftadd@f2 002E  
                    ___ftge@ff1 0026                      ___ftge@ff2 0029              getADCValue@channel 0046  
                    ___ftdiv@f1 0038                      ___ftdiv@f2 0035                      ___ftdiv@f3 003D  
                    ___ftneg@f1 004C                      ___awtoft@c 0070                      ___lbtoft@c 002B  
           ___bmul@multiplicand 0070        __size_of_hcsr04GetAerage 007E                      ___ftmul@f1 004C  
                    ___ftmul@f2 004F                      ___ftsub@f1 0038                      ___ftsub@f2 0035  
                    ___fttol@f1 0058                  __pcstackCOMMON 0070                    __pidataBANK1 0003  
 __size_of_nrf24l01SendTXBuffer 0047                      ___lltoft@c 0070              __size_of_hcsr04ISR 0003  
                    ___lwtoft@c 0070                    sprintf@width 0050                      __pbssBANK0 0064  
                    __pbssBANK1 00DD                      __pbssBANK2 0120                      __pbssBANK3 01A0  
         sendMessage@ftoaStatus 00B8               ??_nrf24l01GetPipe 0027                      __pmaintext 0E18  
                    _hcsr04Init 17D7                         ?___bmul 0070                         ?___ftge 0026  
                       ?___wmul 0070                 __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 0AAD  
             _nrf24l01SetRXPipe 08A2          ?_nrf24l01InitRegisters 0070                      __pintentry 0004  
             _nrf24l01SetTXPipe 0B67                       ?___awtoft 0070                       ?___ftpack 0026  
                     ?___lbtoft 0070              ?_nrf24l01SetRXPipe 0070              ?_nrf24l01SetTXPipe 0070  
                     ?___lltoft 0070             __CFG_RSTOSC$HFINT32 0000                         ?_strcat 00AD  
                       ?_strcpy 0070                       ?___lwtoft 0070           __end_of_n_ADDRESS_MUL 1801  
          __size_of_sendMessage 0086        __end_of_nrf24l01SPIStart 17AE             ??_nrf24l01SetRXPipe 0070  
           hcsr04GetAerage@loop 0045             ??_nrf24l01SetTXPipe 0073                         _NVMADRH 0892  
                       _NVMADRL 0891                         _NVMDATL 0893                         _NVMCON2 0896  
                       _SSP1BUF 0211               __end_of_hcsr04ISR 1786           _nrf24l01InterfaceInit 08C0  
    __end_of_nrf24l01SendPacket 0A47                       ?_resetWDT 0070                   ??_getADCValue 0045  
         __size_of_nrf24l01Init 001F           __size_of_nrf24l01Send 0013       __end_of_nrf24l01SetRXMode 0AE8  
     __end_of_nrf24l01SetRXPipe 08C0                   ?_sleepListren 0026       __end_of_nrf24l01SetTXPipe 0BAA  
               __size_of___bmul 0011                 __size_of___ftge 003C                         ___ftadd 044E  
                       ___ftdiv 0F57                         ___ftneg 1793                         ___lldiv 0C3A  
               __size_of___wmul 001E                         ___ftmul 062B                         ___llmod 0B24  
                       ___ftsub 0848                         ___fttol 0D91                         ___lwmod 09BB  
             ??_hcsr04GetAerage 0074                      ??___awtoft 0073                      ??___ftpack 0070  
                    ??___lbtoft 0074                 __size_of_memset 0032                      ??___lltoft 0074  
                       __ptext1 08DE                         __ptext2 08C0                         __ptext3 0347  
                       __ptext4 0B67                         __ptext5 17C6                         __ptext6 08A2  
                       __ptext7 0A79                         __ptext8 09BB                         __ptext9 022B  
                    ??___lwtoft 0073                 __size_of_strcat 002F                 __size_of_strcmp 0029  
               __size_of_strcpy 001D                 __size_of_strlen 001E                    __size_of_ISR 002E  
                     _T1CONbits 001B                         _counter 00DD                         _dpowers 1000  
                       _isdigit 17B8                       _IOCAFbits 0393                         _romData 00E5  
                       _sleepMs 0940                       _IOCAPbits 0391                         _sprintf 005E  
                       clrloop0 1787            end_of_initialization 0057                         ftoa@buf 013C  
                       ftoa@rem 00A4                    _nrf24l01Init 08DE                    _nrf24l01Send 07ED  
                    _romDataMap 0120                nrf24l01GetPipe@i 002A                 ___lldiv@divisor 0026  
               ___lldiv@counter 0032                      ??_resetWDT 0070                  ??_sleepListren 0074  
                   ?_hcsr04Init 0070             __end_of_getADCValue 0788                       _PORTAbits 000C  
                     _PORTCbits 000E                       _TRISAbits 008C                       _TRISCbits 008E  
              __CFG_FEXTOSC$OFF 0000                   ??_nrf24l01ISR 0070          ?_nrf24l01InterfaceInit 0070  
                   ___ftdiv@exp 0040                      main@packet 00BC      __size_of_nrf24l01SetRXMode 003B  
    __size_of_nrf24l01SetRXPipe 001E                     ___ftmul@exp 0052      __size_of_nrf24l01SetTXPipe 0043  
                __end_of___bmul 17D7                  __end_of___ftge 0B24                  __end_of___wmul 0884  
                __end_of_memset 0A79                  __end_of_strcat 0A17                  __end_of_strcmp 0991  
                  _lastTXPacket 0069                  __end_of_strcpy 0848                  __end_of_strlen 08A2  
           start_initialization 0034                 _nrf24l01SPISend 0801                     __end_of_ISR 0032  
  __end_of_nrf24l01SendTXBuffer 0BF1                      ftoa@status 00A3       nrf24l01SetRXPipe@enRXAddr 0072  
           __size_of_hcsr04Init 0014                 _nrf24l01GetPipe 0A79         __size_of_nrf24l01SPIEnd 0009  
               ___llmod@divisor 0033          __size_of_hcsr04Trigger 000A                 ___llmod@counter 0070  
               _nrf24l01Service 0EB2         ??_nrf24l01InitRegisters 0027                __CFG_LPBOREN$OFF 0000  
                   _getADCValue 06DF                        ??___bmul 0071                        ??___ftge 0070  
           __end_of_nrf24l01ISR 0C3A                        ??___wmul 0074                     __pdataBANK1 00E5  
                      ??_strcat 0074                        ??_strcpy 0074               __size_of___awtoft 0022  
             __size_of___ftpack 0065               __size_of___lbtoft 001B               __size_of___lltoft 002A  
                     ___latbits 0002               __size_of___lwtoft 0015                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0                   __pcstackBANK4 0220            __end_of_sleepListren 091E  
                  _isdigit$2003 0070                     sprintf@flag 0049                     sprintf@prec 0052  
                    loop@packet 022F                 _hcsr04GetAerage 0C8D             nrf24l01GetPipe@name 0029  
           nrf24l01GetPipe@pipe 0028                       _hcsr04ISR 1783               __size_of_resetWDT 0007  
                      ?___ftadd 002B                        ?___ftdiv 0035                        ?___ftneg 004C  
                      ?___lldiv 0026                        ?___ftmul 004C                        ?___llmod 0033  
                      ?___ftsub 0035                        ?___fttol 0058                        ?___lwmod 0070  
          __end_of_n_ADDRESS_P0 1823         __end_of_nrf24l01SPISend 0810       nrf24l01InitRegisters@enAA 002C  
                 ??_sendMessage 0074                   _hcsr04Trigger 17AE              _nrf24l01SendPacket 0A17  
           sleepMs@milliseconds 0070         __end_of_nrf24l01GetPipe 0AAD                        ?_isdigit 0070  
                     _loop$2252 0226                       _loop$2253 0229                       _loop$2254 022C  
                      ?_sleepMs 0070             ?_nrf24l01SendPacket 0028                        ?_sprintf 003B  
       __end_of_nrf24l01Service 0F57                  ___wmul@product 0026                     _nrf24l01ISR 0BF1  
                     clear_ram0 1786                        _PIE0bits 0090                        _PIE1bits 0091  
          hcsr04GetAerage@count 0046            hcsr04GetAerage@limit 0047                        _PIR0bits 0010  
                      _PIR1bits 0011                      ?_hcsr04ISR 0070                    ??_hcsr04Init 0070  
          ??_nrf24l01SendPacket 0074                       _testCount 00E3            _nrf24l01SendTXBuffer 0BAA  
                ?_hcsr04Trigger 0070                      _ADCON0bits 009D                      _ADCON1bits 009E  
             ___wmul@multiplier 0070                        _WPUAbits 020C                        _RXPacket 01A0  
                      _TXPacket 01C1             sleepListren@seconds 0026             __end_of_sendMessage 0D91  
            __end_of_hcsr04Init 17EB         ??_nrf24l01InterfaceInit 0070         __end_of_hcsr04GetAerage 0D0B  
                _nrf24l01SPIEnd 179C                __size_of___ftadd 00F6                __size_of___ftdiv 00A9  
              __size_of___ftneg 0009                __size_of___lldiv 0053                __size_of___ftmul 00B4  
              __size_of___llmod 0043                __size_of___ftsub 001E                __size_of___fttol 0087  
              __size_of___lwmod 002D                        ___awtoft 091E                        ___ftpack 0788  
                      ___lbtoft 0810                        ___int_sp 22B0                        ___lltoft 0991  
         __size_of_sleepListren 0021                      _ANSELAbits 018C                        ___lwtoft 17EB  
                    _ANSELCbits 018E                ?_nrf24l01GetPipe 0070                      sprintf@val 004B  
                 _n_ADDRESS_MUL 1800                      strcat@from 00AF                __size_of_isdigit 000E  
                      __ptext10 0D0B                        __ptext11 09E8                        __ptext20 07ED  
                      __ptext12 08FD                        __ptext21 17A5                        __ptext13 0A17  
                    _T1GCONbits 001C                        __ptext30 0C3A                        __ptext22 0801  
                      __ptext14 082B                        __ptext31 0991                        __ptext23 179C  
                      __ptext15 0EB2                        __ptext40 0810                        __ptext32 0D91  
                      __ptext24 0A47                        __ptext16 0968                        __ptext41 06DF  
                      __ptext33 0848                        __ptext25 0544                        __ptext17 0BAA  
                      __ptext50 0BF1                        __ptext42 0940                        __ptext34 1793  
                      __ptext26 005E                        __ptext18 0884                        __ptext51 1783  
                      __ptext43 178C                        __ptext35 062B                        __ptext27 17B8  
                      __ptext19 0AAD                        __ptext44 0F57                        __ptext36 0AE8  
                      __ptext28 0866                        __ptext45 044E                        __ptext37 17AE  
                      __ptext29 0B24                        __ptext46 091E                        __ptext38 0C8D  
                      __ptext47 0788                        __ptext39 17EB                        __ptext48 17D7  
              __size_of_sleepMs 0028                    _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 17A5  
                      _distance 00E1                __size_of_sprintf 01CD                     _OSCCON1bits 0919  
                    strcpy@from 0072                   __size_of_main 009A                   __size_of_ftoa 00E7  
                 __size_of_loop 011C    nrf24l01InitRegisters@channel 0028    nrf24l01InitRegisters@feature 002A  
                  sleepMs@wdtps 0073                      _RC0PPSbits 0EA0                        _resetWDT 178C  
                   ??_hcsr04ISR 0070    nrf24l01InitRegisters@rfSetup 002B                      _RC1PPSbits 0EA1  
                  ?_getADCValue 0042                      _RC2PPSbits 0EA2                    _sleepListren 08FD  
__size_of_nrf24l01InitRegisters 0107   __end_of_nrf24l01InitRegisters 044E    nrf24l01InitRegisters@setupAW 0029  
                    _ODCONAbits 028C                 ??_hcsr04Trigger 0070                    _SSP1STATbits 0214  
                      main@pipe 00BB      nrf24l01SendPacket@txPacket 0028                     _sendMessage 0D0B  
                    _INTCONbits 000B                     _NVMCON1bits 0895                      _FVRCONbits 0117  
                __pstringtext10 1832                  __pstringtext11 1836                  __pstringtext12 0000  
                      isdigit@c 0071                ?_hcsr04GetAerage 0042                        intlevel1 0000  
                     sprintf@ap 004A                       sprintf@sp 004F                    _n_ADDRESS_P0 181E  
        hcsr04GetAerage@average 0048                ___lwmod@dividend 0072                ___lldiv@dividend 002A  
             __CFG_CLKOUTEN$OFF 0000       __size_of_nrf24l01SPIStart 0009                   __pstringtext1 1000  
                 __pstringtext2 181E                   __pstringtext3 1800                   __pstringtext4 180C  
                 __pstringtext5 1812                   __pstringtext6 1818                   __pstringtext7 1823  
                 __pstringtext8 1828                   __pstringtext9 182D                        sprintf@c 0054  
                      sprintf@f 003B      nrf24l01InitRegisters@DynPD 002D                        strcat@cp 0062  
                      strcat@to 00AD                ___lldiv@quotient 002E                 ___lwmod@divisor 0070  
                      strcpy@cp 0026                        strcpy@to 0070                 ___lwmod@counter 0026  
                    _WDTCONbits 0097                   ?_nrf24l01Init 0070                    ?_nrf24l01ISR 0070  
