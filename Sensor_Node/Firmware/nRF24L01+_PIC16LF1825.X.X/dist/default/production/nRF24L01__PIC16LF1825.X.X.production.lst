

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sat Jul 21 15:32:39 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	_romArray_text,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	clrtext,global,class=CODE,delta=2
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    27                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text2,local,class=CODE,merge=1,delta=2
    29                           	psect	text3,local,class=CODE,merge=1,delta=2
    30                           	psect	text4,local,class=CODE,merge=1,delta=2
    31                           	psect	text5,local,class=CODE,merge=1,delta=2
    32                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text7,local,class=CODE,merge=1,delta=2
    34                           	psect	text8,local,class=CODE,merge=1,delta=2
    35                           	psect	text9,local,class=CODE,merge=1,delta=2
    36                           	psect	text10,local,class=CODE,merge=1,delta=2
    37                           	psect	text11,local,class=CODE,merge=1,delta=2
    38                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text16,local,class=CODE,merge=1,delta=2
    43                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text18,local,class=CODE,merge=1,delta=2
    45                           	psect	text19,local,class=CODE,merge=1,delta=2
    46                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text22,local,class=CODE,merge=1,delta=2
    49                           	psect	text23,local,class=CODE,merge=1,delta=2
    50                           	psect	text24,local,class=CODE,merge=1,delta=2
    51                           	psect	text25,local,class=CODE,merge=1,delta=2
    52                           	psect	text26,local,class=CODE,merge=1,delta=2
    53                           	psect	text27,local,class=CODE,merge=1,delta=2
    54                           	psect	intentry,global,class=CODE,delta=2
    55                           	psect	text29,local,class=CODE,merge=1,delta=2
    56                           	psect	text30,local,class=CODE,merge=1,delta=2
    57                           	psect	text31,local,class=CODE,merge=1,delta=2
    58                           	psect	text32,local,class=CODE,merge=1,delta=2
    59                           	psect	text33,local,class=CODE,merge=1,delta=2
    60                           	psect	text34,local,class=CODE,merge=1,delta=2
    61                           	psect	text35,local,class=CODE,merge=1,delta=2
    62                           	psect	text36,local,class=CODE,merge=1,delta=2
    63                           	psect	text37,local,class=CODE,merge=1,delta=2
    64                           	psect	text38,local,class=CODE,merge=1,delta=2
    65                           	psect	text39,local,class=CODE,merge=1,delta=2
    66                           	psect	text40,local,class=CODE,merge=1,delta=2
    67                           	psect	text41,local,class=CODE,merge=1,delta=2
    68                           	psect	text42,local,class=CODE,merge=1,delta=2
    69                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    70                           	psect	text44,local,class=CODE,merge=1,delta=2
    71                           	psect	text45,local,class=CODE,merge=1,delta=2
    72                           	psect	text46,local,class=CODE,merge=1,delta=2
    73                           	psect	text47,local,class=CODE,merge=1,delta=2,group=1
    74                           	dabs	1,0x7E,2
    75  0000                     
    76                           ; Version 2.00
    77                           ; Generated 27/05/2018 GMT
    78                           ; 
    79                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC16LF18325 Definitions
   108                           ; 
   109                           ; SFR Addresses
   110  0000                     	;# 
   111  0001                     	;# 
   112  0002                     	;# 
   113  0003                     	;# 
   114  0004                     	;# 
   115  0005                     	;# 
   116  0006                     	;# 
   117  0007                     	;# 
   118  0008                     	;# 
   119  0009                     	;# 
   120  000A                     	;# 
   121  000B                     	;# 
   122  000C                     	;# 
   123  000E                     	;# 
   124  0010                     	;# 
   125  0011                     	;# 
   126  0012                     	;# 
   127  0013                     	;# 
   128  0014                     	;# 
   129  0015                     	;# 
   130  0015                     	;# 
   131  0016                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  0019                     	;# 
   137  001A                     	;# 
   138  001B                     	;# 
   139  001C                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  008C                     	;# 
   144  008E                     	;# 
   145  0090                     	;# 
   146  0091                     	;# 
   147  0092                     	;# 
   148  0093                     	;# 
   149  0094                     	;# 
   150  0097                     	;# 
   151  009B                     	;# 
   152  009B                     	;# 
   153  009C                     	;# 
   154  009D                     	;# 
   155  009E                     	;# 
   156  009F                     	;# 
   157  010C                     	;# 
   158  010E                     	;# 
   159  0111                     	;# 
   160  0112                     	;# 
   161  0113                     	;# 
   162  0114                     	;# 
   163  0115                     	;# 
   164  0116                     	;# 
   165  0117                     	;# 
   166  0118                     	;# 
   167  0119                     	;# 
   168  018C                     	;# 
   169  018E                     	;# 
   170  0199                     	;# 
   171  0199                     	;# 
   172  0199                     	;# 
   173  019A                     	;# 
   174  019A                     	;# 
   175  019A                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019B                     	;# 
   180  019B                     	;# 
   181  019C                     	;# 
   182  019C                     	;# 
   183  019C                     	;# 
   184  019D                     	;# 
   185  019D                     	;# 
   186  019D                     	;# 
   187  019E                     	;# 
   188  019E                     	;# 
   189  019E                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  019F                     	;# 
   193  019F                     	;# 
   194  019F                     	;# 
   195  020C                     	;# 
   196  020E                     	;# 
   197  0211                     	;# 
   198  0211                     	;# 
   199  0212                     	;# 
   200  0212                     	;# 
   201  0213                     	;# 
   202  0213                     	;# 
   203  0214                     	;# 
   204  0214                     	;# 
   205  0215                     	;# 
   206  0215                     	;# 
   207  0215                     	;# 
   208  0215                     	;# 
   209  0216                     	;# 
   210  0216                     	;# 
   211  0217                     	;# 
   212  0217                     	;# 
   213  0219                     	;# 
   214  021A                     	;# 
   215  021B                     	;# 
   216  021C                     	;# 
   217  021D                     	;# 
   218  021D                     	;# 
   219  021E                     	;# 
   220  021F                     	;# 
   221  028C                     	;# 
   222  028E                     	;# 
   223  0291                     	;# 
   224  0291                     	;# 
   225  0292                     	;# 
   226  0293                     	;# 
   227  0294                     	;# 
   228  0295                     	;# 
   229  0295                     	;# 
   230  0296                     	;# 
   231  0297                     	;# 
   232  0298                     	;# 
   233  029F                     	;# 
   234  030C                     	;# 
   235  030E                     	;# 
   236  0311                     	;# 
   237  0311                     	;# 
   238  0312                     	;# 
   239  0313                     	;# 
   240  0314                     	;# 
   241  0315                     	;# 
   242  0315                     	;# 
   243  0316                     	;# 
   244  0317                     	;# 
   245  0318                     	;# 
   246  038C                     	;# 
   247  038E                     	;# 
   248  0391                     	;# 
   249  0392                     	;# 
   250  0393                     	;# 
   251  0397                     	;# 
   252  0398                     	;# 
   253  0399                     	;# 
   254  039A                     	;# 
   255  039C                     	;# 
   256  039D                     	;# 
   257  039E                     	;# 
   258  039F                     	;# 
   259  0411                     	;# 
   260  0411                     	;# 
   261  0412                     	;# 
   262  0413                     	;# 
   263  0414                     	;# 
   264  0415                     	;# 
   265  0416                     	;# 
   266  0417                     	;# 
   267  0418                     	;# 
   268  0418                     	;# 
   269  0419                     	;# 
   270  041A                     	;# 
   271  041B                     	;# 
   272  041C                     	;# 
   273  041D                     	;# 
   274  041E                     	;# 
   275  041F                     	;# 
   276  0498                     	;# 
   277  0498                     	;# 
   278  0499                     	;# 
   279  049A                     	;# 
   280  049B                     	;# 
   281  049B                     	;# 
   282  049C                     	;# 
   283  049D                     	;# 
   284  049E                     	;# 
   285  049F                     	;# 
   286  0617                     	;# 
   287  0618                     	;# 
   288  0619                     	;# 
   289  0619                     	;# 
   290  061A                     	;# 
   291  061B                     	;# 
   292  061C                     	;# 
   293  061C                     	;# 
   294  061F                     	;# 
   295  0691                     	;# 
   296  0692                     	;# 
   297  0693                     	;# 
   298  0694                     	;# 
   299  0695                     	;# 
   300  0696                     	;# 
   301  0697                     	;# 
   302  0698                     	;# 
   303  0699                     	;# 
   304  0711                     	;# 
   305  0712                     	;# 
   306  0713                     	;# 
   307  0714                     	;# 
   308  0715                     	;# 
   309  0716                     	;# 
   310  0717                     	;# 
   311  0718                     	;# 
   312  0719                     	;# 
   313  0891                     	;# 
   314  0891                     	;# 
   315  0891                     	;# 
   316  0891                     	;# 
   317  0891                     	;# 
   318  0891                     	;# 
   319  0892                     	;# 
   320  0892                     	;# 
   321  0892                     	;# 
   322  0893                     	;# 
   323  0893                     	;# 
   324  0893                     	;# 
   325  0893                     	;# 
   326  0893                     	;# 
   327  0893                     	;# 
   328  0894                     	;# 
   329  0894                     	;# 
   330  0894                     	;# 
   331  0895                     	;# 
   332  0895                     	;# 
   333  0895                     	;# 
   334  0896                     	;# 
   335  0896                     	;# 
   336  0896                     	;# 
   337  089B                     	;# 
   338  0911                     	;# 
   339  0912                     	;# 
   340  0913                     	;# 
   341  0914                     	;# 
   342  0915                     	;# 
   343  0916                     	;# 
   344  0918                     	;# 
   345  0919                     	;# 
   346  091A                     	;# 
   347  091B                     	;# 
   348  091C                     	;# 
   349  091D                     	;# 
   350  091E                     	;# 
   351  091F                     	;# 
   352  0E0F                     	;# 
   353  0E10                     	;# 
   354  0E11                     	;# 
   355  0E12                     	;# 
   356  0E13                     	;# 
   357  0E14                     	;# 
   358  0E15                     	;# 
   359  0E16                     	;# 
   360  0E17                     	;# 
   361  0E18                     	;# 
   362  0E19                     	;# 
   363  0E1A                     	;# 
   364  0E1B                     	;# 
   365  0E1C                     	;# 
   366  0E1D                     	;# 
   367  0E1E                     	;# 
   368  0E1F                     	;# 
   369  0E20                     	;# 
   370  0E21                     	;# 
   371  0E22                     	;# 
   372  0E24                     	;# 
   373  0E25                     	;# 
   374  0E28                     	;# 
   375  0E29                     	;# 
   376  0E2A                     	;# 
   377  0E2B                     	;# 
   378  0E2C                     	;# 
   379  0E2D                     	;# 
   380  0E2E                     	;# 
   381  0E2F                     	;# 
   382  0E90                     	;# 
   383  0E91                     	;# 
   384  0E92                     	;# 
   385  0E94                     	;# 
   386  0E95                     	;# 
   387  0EA0                     	;# 
   388  0EA1                     	;# 
   389  0EA2                     	;# 
   390  0EA3                     	;# 
   391  0EA4                     	;# 
   392  0EA5                     	;# 
   393  0F0F                     	;# 
   394  0F10                     	;# 
   395  0F11                     	;# 
   396  0F12                     	;# 
   397  0F13                     	;# 
   398  0F14                     	;# 
   399  0F15                     	;# 
   400  0F16                     	;# 
   401  0F17                     	;# 
   402  0F18                     	;# 
   403  0F19                     	;# 
   404  0F1A                     	;# 
   405  0F1B                     	;# 
   406  0F1C                     	;# 
   407  0F1D                     	;# 
   408  0F1E                     	;# 
   409  0F1F                     	;# 
   410  0F20                     	;# 
   411  0F21                     	;# 
   412  0F22                     	;# 
   413  0F23                     	;# 
   414  0F24                     	;# 
   415  0F25                     	;# 
   416  0F26                     	;# 
   417  0F27                     	;# 
   418  0F28                     	;# 
   419  0F29                     	;# 
   420  0F2A                     	;# 
   421  0F2B                     	;# 
   422  0F2C                     	;# 
   423  0F2D                     	;# 
   424  0F2E                     	;# 
   425  0F2F                     	;# 
   426  0F30                     	;# 
   427  0F31                     	;# 
   428  0F32                     	;# 
   429  0F33                     	;# 
   430  0F34                     	;# 
   431  0F35                     	;# 
   432  0F36                     	;# 
   433  0F37                     	;# 
   434  0FE4                     	;# 
   435  0FE5                     	;# 
   436  0FE6                     	;# 
   437  0FE7                     	;# 
   438  0FE8                     	;# 
   439  0FE9                     	;# 
   440  0FEA                     	;# 
   441  0FEB                     	;# 
   442  0FED                     	;# 
   443  0FEE                     	;# 
   444  0FEF                     	;# 
   445  0000                     	;# 
   446  0001                     	;# 
   447  0002                     	;# 
   448  0003                     	;# 
   449  0004                     	;# 
   450  0005                     	;# 
   451  0006                     	;# 
   452  0007                     	;# 
   453  0008                     	;# 
   454  0009                     	;# 
   455  000A                     	;# 
   456  000B                     	;# 
   457  000C                     	;# 
   458  000E                     	;# 
   459  0010                     	;# 
   460  0011                     	;# 
   461  0012                     	;# 
   462  0013                     	;# 
   463  0014                     	;# 
   464  0015                     	;# 
   465  0015                     	;# 
   466  0016                     	;# 
   467  0016                     	;# 
   468  0017                     	;# 
   469  0018                     	;# 
   470  0019                     	;# 
   471  0019                     	;# 
   472  001A                     	;# 
   473  001B                     	;# 
   474  001C                     	;# 
   475  001D                     	;# 
   476  001E                     	;# 
   477  001F                     	;# 
   478  008C                     	;# 
   479  008E                     	;# 
   480  0090                     	;# 
   481  0091                     	;# 
   482  0092                     	;# 
   483  0093                     	;# 
   484  0094                     	;# 
   485  0097                     	;# 
   486  009B                     	;# 
   487  009B                     	;# 
   488  009C                     	;# 
   489  009D                     	;# 
   490  009E                     	;# 
   491  009F                     	;# 
   492  010C                     	;# 
   493  010E                     	;# 
   494  0111                     	;# 
   495  0112                     	;# 
   496  0113                     	;# 
   497  0114                     	;# 
   498  0115                     	;# 
   499  0116                     	;# 
   500  0117                     	;# 
   501  0118                     	;# 
   502  0119                     	;# 
   503  018C                     	;# 
   504  018E                     	;# 
   505  0199                     	;# 
   506  0199                     	;# 
   507  0199                     	;# 
   508  019A                     	;# 
   509  019A                     	;# 
   510  019A                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019B                     	;# 
   514  019B                     	;# 
   515  019B                     	;# 
   516  019C                     	;# 
   517  019C                     	;# 
   518  019C                     	;# 
   519  019D                     	;# 
   520  019D                     	;# 
   521  019D                     	;# 
   522  019E                     	;# 
   523  019E                     	;# 
   524  019E                     	;# 
   525  019F                     	;# 
   526  019F                     	;# 
   527  019F                     	;# 
   528  019F                     	;# 
   529  019F                     	;# 
   530  020C                     	;# 
   531  020E                     	;# 
   532  0211                     	;# 
   533  0211                     	;# 
   534  0212                     	;# 
   535  0212                     	;# 
   536  0213                     	;# 
   537  0213                     	;# 
   538  0214                     	;# 
   539  0214                     	;# 
   540  0215                     	;# 
   541  0215                     	;# 
   542  0215                     	;# 
   543  0215                     	;# 
   544  0216                     	;# 
   545  0216                     	;# 
   546  0217                     	;# 
   547  0217                     	;# 
   548  0219                     	;# 
   549  021A                     	;# 
   550  021B                     	;# 
   551  021C                     	;# 
   552  021D                     	;# 
   553  021D                     	;# 
   554  021E                     	;# 
   555  021F                     	;# 
   556  028C                     	;# 
   557  028E                     	;# 
   558  0291                     	;# 
   559  0291                     	;# 
   560  0292                     	;# 
   561  0293                     	;# 
   562  0294                     	;# 
   563  0295                     	;# 
   564  0295                     	;# 
   565  0296                     	;# 
   566  0297                     	;# 
   567  0298                     	;# 
   568  029F                     	;# 
   569  030C                     	;# 
   570  030E                     	;# 
   571  0311                     	;# 
   572  0311                     	;# 
   573  0312                     	;# 
   574  0313                     	;# 
   575  0314                     	;# 
   576  0315                     	;# 
   577  0315                     	;# 
   578  0316                     	;# 
   579  0317                     	;# 
   580  0318                     	;# 
   581  038C                     	;# 
   582  038E                     	;# 
   583  0391                     	;# 
   584  0392                     	;# 
   585  0393                     	;# 
   586  0397                     	;# 
   587  0398                     	;# 
   588  0399                     	;# 
   589  039A                     	;# 
   590  039C                     	;# 
   591  039D                     	;# 
   592  039E                     	;# 
   593  039F                     	;# 
   594  0411                     	;# 
   595  0411                     	;# 
   596  0412                     	;# 
   597  0413                     	;# 
   598  0414                     	;# 
   599  0415                     	;# 
   600  0416                     	;# 
   601  0417                     	;# 
   602  0418                     	;# 
   603  0418                     	;# 
   604  0419                     	;# 
   605  041A                     	;# 
   606  041B                     	;# 
   607  041C                     	;# 
   608  041D                     	;# 
   609  041E                     	;# 
   610  041F                     	;# 
   611  0498                     	;# 
   612  0498                     	;# 
   613  0499                     	;# 
   614  049A                     	;# 
   615  049B                     	;# 
   616  049B                     	;# 
   617  049C                     	;# 
   618  049D                     	;# 
   619  049E                     	;# 
   620  049F                     	;# 
   621  0617                     	;# 
   622  0618                     	;# 
   623  0619                     	;# 
   624  0619                     	;# 
   625  061A                     	;# 
   626  061B                     	;# 
   627  061C                     	;# 
   628  061C                     	;# 
   629  061F                     	;# 
   630  0691                     	;# 
   631  0692                     	;# 
   632  0693                     	;# 
   633  0694                     	;# 
   634  0695                     	;# 
   635  0696                     	;# 
   636  0697                     	;# 
   637  0698                     	;# 
   638  0699                     	;# 
   639  0711                     	;# 
   640  0712                     	;# 
   641  0713                     	;# 
   642  0714                     	;# 
   643  0715                     	;# 
   644  0716                     	;# 
   645  0717                     	;# 
   646  0718                     	;# 
   647  0719                     	;# 
   648  0891                     	;# 
   649  0891                     	;# 
   650  0891                     	;# 
   651  0891                     	;# 
   652  0891                     	;# 
   653  0891                     	;# 
   654  0892                     	;# 
   655  0892                     	;# 
   656  0892                     	;# 
   657  0893                     	;# 
   658  0893                     	;# 
   659  0893                     	;# 
   660  0893                     	;# 
   661  0893                     	;# 
   662  0893                     	;# 
   663  0894                     	;# 
   664  0894                     	;# 
   665  0894                     	;# 
   666  0895                     	;# 
   667  0895                     	;# 
   668  0895                     	;# 
   669  0896                     	;# 
   670  0896                     	;# 
   671  0896                     	;# 
   672  089B                     	;# 
   673  0911                     	;# 
   674  0912                     	;# 
   675  0913                     	;# 
   676  0914                     	;# 
   677  0915                     	;# 
   678  0916                     	;# 
   679  0918                     	;# 
   680  0919                     	;# 
   681  091A                     	;# 
   682  091B                     	;# 
   683  091C                     	;# 
   684  091D                     	;# 
   685  091E                     	;# 
   686  091F                     	;# 
   687  0E0F                     	;# 
   688  0E10                     	;# 
   689  0E11                     	;# 
   690  0E12                     	;# 
   691  0E13                     	;# 
   692  0E14                     	;# 
   693  0E15                     	;# 
   694  0E16                     	;# 
   695  0E17                     	;# 
   696  0E18                     	;# 
   697  0E19                     	;# 
   698  0E1A                     	;# 
   699  0E1B                     	;# 
   700  0E1C                     	;# 
   701  0E1D                     	;# 
   702  0E1E                     	;# 
   703  0E1F                     	;# 
   704  0E20                     	;# 
   705  0E21                     	;# 
   706  0E22                     	;# 
   707  0E24                     	;# 
   708  0E25                     	;# 
   709  0E28                     	;# 
   710  0E29                     	;# 
   711  0E2A                     	;# 
   712  0E2B                     	;# 
   713  0E2C                     	;# 
   714  0E2D                     	;# 
   715  0E2E                     	;# 
   716  0E2F                     	;# 
   717  0E90                     	;# 
   718  0E91                     	;# 
   719  0E92                     	;# 
   720  0E94                     	;# 
   721  0E95                     	;# 
   722  0EA0                     	;# 
   723  0EA1                     	;# 
   724  0EA2                     	;# 
   725  0EA3                     	;# 
   726  0EA4                     	;# 
   727  0EA5                     	;# 
   728  0F0F                     	;# 
   729  0F10                     	;# 
   730  0F11                     	;# 
   731  0F12                     	;# 
   732  0F13                     	;# 
   733  0F14                     	;# 
   734  0F15                     	;# 
   735  0F16                     	;# 
   736  0F17                     	;# 
   737  0F18                     	;# 
   738  0F19                     	;# 
   739  0F1A                     	;# 
   740  0F1B                     	;# 
   741  0F1C                     	;# 
   742  0F1D                     	;# 
   743  0F1E                     	;# 
   744  0F1F                     	;# 
   745  0F20                     	;# 
   746  0F21                     	;# 
   747  0F22                     	;# 
   748  0F23                     	;# 
   749  0F24                     	;# 
   750  0F25                     	;# 
   751  0F26                     	;# 
   752  0F27                     	;# 
   753  0F28                     	;# 
   754  0F29                     	;# 
   755  0F2A                     	;# 
   756  0F2B                     	;# 
   757  0F2C                     	;# 
   758  0F2D                     	;# 
   759  0F2E                     	;# 
   760  0F2F                     	;# 
   761  0F30                     	;# 
   762  0F31                     	;# 
   763  0F32                     	;# 
   764  0F33                     	;# 
   765  0F34                     	;# 
   766  0F35                     	;# 
   767  0F36                     	;# 
   768  0F37                     	;# 
   769  0FE4                     	;# 
   770  0FE5                     	;# 
   771  0FE6                     	;# 
   772  0FE7                     	;# 
   773  0FE8                     	;# 
   774  0FE9                     	;# 
   775  0FEA                     	;# 
   776  0FEB                     	;# 
   777  0FED                     	;# 
   778  0FEE                     	;# 
   779  0FEF                     	;# 
   780  0000                     	;# 
   781  0001                     	;# 
   782  0002                     	;# 
   783  0003                     	;# 
   784  0004                     	;# 
   785  0005                     	;# 
   786  0006                     	;# 
   787  0007                     	;# 
   788  0008                     	;# 
   789  0009                     	;# 
   790  000A                     	;# 
   791  000B                     	;# 
   792  000C                     	;# 
   793  000E                     	;# 
   794  0010                     	;# 
   795  0011                     	;# 
   796  0012                     	;# 
   797  0013                     	;# 
   798  0014                     	;# 
   799  0015                     	;# 
   800  0015                     	;# 
   801  0016                     	;# 
   802  0016                     	;# 
   803  0017                     	;# 
   804  0018                     	;# 
   805  0019                     	;# 
   806  0019                     	;# 
   807  001A                     	;# 
   808  001B                     	;# 
   809  001C                     	;# 
   810  001D                     	;# 
   811  001E                     	;# 
   812  001F                     	;# 
   813  008C                     	;# 
   814  008E                     	;# 
   815  0090                     	;# 
   816  0091                     	;# 
   817  0092                     	;# 
   818  0093                     	;# 
   819  0094                     	;# 
   820  0097                     	;# 
   821  009B                     	;# 
   822  009B                     	;# 
   823  009C                     	;# 
   824  009D                     	;# 
   825  009E                     	;# 
   826  009F                     	;# 
   827  010C                     	;# 
   828  010E                     	;# 
   829  0111                     	;# 
   830  0112                     	;# 
   831  0113                     	;# 
   832  0114                     	;# 
   833  0115                     	;# 
   834  0116                     	;# 
   835  0117                     	;# 
   836  0118                     	;# 
   837  0119                     	;# 
   838  018C                     	;# 
   839  018E                     	;# 
   840  0199                     	;# 
   841  0199                     	;# 
   842  0199                     	;# 
   843  019A                     	;# 
   844  019A                     	;# 
   845  019A                     	;# 
   846  019B                     	;# 
   847  019B                     	;# 
   848  019B                     	;# 
   849  019B                     	;# 
   850  019B                     	;# 
   851  019C                     	;# 
   852  019C                     	;# 
   853  019C                     	;# 
   854  019D                     	;# 
   855  019D                     	;# 
   856  019D                     	;# 
   857  019E                     	;# 
   858  019E                     	;# 
   859  019E                     	;# 
   860  019F                     	;# 
   861  019F                     	;# 
   862  019F                     	;# 
   863  019F                     	;# 
   864  019F                     	;# 
   865  020C                     	;# 
   866  020E                     	;# 
   867  0211                     	;# 
   868  0211                     	;# 
   869  0212                     	;# 
   870  0212                     	;# 
   871  0213                     	;# 
   872  0213                     	;# 
   873  0214                     	;# 
   874  0214                     	;# 
   875  0215                     	;# 
   876  0215                     	;# 
   877  0215                     	;# 
   878  0215                     	;# 
   879  0216                     	;# 
   880  0216                     	;# 
   881  0217                     	;# 
   882  0217                     	;# 
   883  0219                     	;# 
   884  021A                     	;# 
   885  021B                     	;# 
   886  021C                     	;# 
   887  021D                     	;# 
   888  021D                     	;# 
   889  021E                     	;# 
   890  021F                     	;# 
   891  028C                     	;# 
   892  028E                     	;# 
   893  0291                     	;# 
   894  0291                     	;# 
   895  0292                     	;# 
   896  0293                     	;# 
   897  0294                     	;# 
   898  0295                     	;# 
   899  0295                     	;# 
   900  0296                     	;# 
   901  0297                     	;# 
   902  0298                     	;# 
   903  029F                     	;# 
   904  030C                     	;# 
   905  030E                     	;# 
   906  0311                     	;# 
   907  0311                     	;# 
   908  0312                     	;# 
   909  0313                     	;# 
   910  0314                     	;# 
   911  0315                     	;# 
   912  0315                     	;# 
   913  0316                     	;# 
   914  0317                     	;# 
   915  0318                     	;# 
   916  038C                     	;# 
   917  038E                     	;# 
   918  0391                     	;# 
   919  0392                     	;# 
   920  0393                     	;# 
   921  0397                     	;# 
   922  0398                     	;# 
   923  0399                     	;# 
   924  039A                     	;# 
   925  039C                     	;# 
   926  039D                     	;# 
   927  039E                     	;# 
   928  039F                     	;# 
   929  0411                     	;# 
   930  0411                     	;# 
   931  0412                     	;# 
   932  0413                     	;# 
   933  0414                     	;# 
   934  0415                     	;# 
   935  0416                     	;# 
   936  0417                     	;# 
   937  0418                     	;# 
   938  0418                     	;# 
   939  0419                     	;# 
   940  041A                     	;# 
   941  041B                     	;# 
   942  041C                     	;# 
   943  041D                     	;# 
   944  041E                     	;# 
   945  041F                     	;# 
   946  0498                     	;# 
   947  0498                     	;# 
   948  0499                     	;# 
   949  049A                     	;# 
   950  049B                     	;# 
   951  049B                     	;# 
   952  049C                     	;# 
   953  049D                     	;# 
   954  049E                     	;# 
   955  049F                     	;# 
   956  0617                     	;# 
   957  0618                     	;# 
   958  0619                     	;# 
   959  0619                     	;# 
   960  061A                     	;# 
   961  061B                     	;# 
   962  061C                     	;# 
   963  061C                     	;# 
   964  061F                     	;# 
   965  0691                     	;# 
   966  0692                     	;# 
   967  0693                     	;# 
   968  0694                     	;# 
   969  0695                     	;# 
   970  0696                     	;# 
   971  0697                     	;# 
   972  0698                     	;# 
   973  0699                     	;# 
   974  0711                     	;# 
   975  0712                     	;# 
   976  0713                     	;# 
   977  0714                     	;# 
   978  0715                     	;# 
   979  0716                     	;# 
   980  0717                     	;# 
   981  0718                     	;# 
   982  0719                     	;# 
   983  0891                     	;# 
   984  0891                     	;# 
   985  0891                     	;# 
   986  0891                     	;# 
   987  0891                     	;# 
   988  0891                     	;# 
   989  0892                     	;# 
   990  0892                     	;# 
   991  0892                     	;# 
   992  0893                     	;# 
   993  0893                     	;# 
   994  0893                     	;# 
   995  0893                     	;# 
   996  0893                     	;# 
   997  0893                     	;# 
   998  0894                     	;# 
   999  0894                     	;# 
  1000  0894                     	;# 
  1001  0895                     	;# 
  1002  0895                     	;# 
  1003  0895                     	;# 
  1004  0896                     	;# 
  1005  0896                     	;# 
  1006  0896                     	;# 
  1007  089B                     	;# 
  1008  0911                     	;# 
  1009  0912                     	;# 
  1010  0913                     	;# 
  1011  0914                     	;# 
  1012  0915                     	;# 
  1013  0916                     	;# 
  1014  0918                     	;# 
  1015  0919                     	;# 
  1016  091A                     	;# 
  1017  091B                     	;# 
  1018  091C                     	;# 
  1019  091D                     	;# 
  1020  091E                     	;# 
  1021  091F                     	;# 
  1022  0E0F                     	;# 
  1023  0E10                     	;# 
  1024  0E11                     	;# 
  1025  0E12                     	;# 
  1026  0E13                     	;# 
  1027  0E14                     	;# 
  1028  0E15                     	;# 
  1029  0E16                     	;# 
  1030  0E17                     	;# 
  1031  0E18                     	;# 
  1032  0E19                     	;# 
  1033  0E1A                     	;# 
  1034  0E1B                     	;# 
  1035  0E1C                     	;# 
  1036  0E1D                     	;# 
  1037  0E1E                     	;# 
  1038  0E1F                     	;# 
  1039  0E20                     	;# 
  1040  0E21                     	;# 
  1041  0E22                     	;# 
  1042  0E24                     	;# 
  1043  0E25                     	;# 
  1044  0E28                     	;# 
  1045  0E29                     	;# 
  1046  0E2A                     	;# 
  1047  0E2B                     	;# 
  1048  0E2C                     	;# 
  1049  0E2D                     	;# 
  1050  0E2E                     	;# 
  1051  0E2F                     	;# 
  1052  0E90                     	;# 
  1053  0E91                     	;# 
  1054  0E92                     	;# 
  1055  0E94                     	;# 
  1056  0E95                     	;# 
  1057  0EA0                     	;# 
  1058  0EA1                     	;# 
  1059  0EA2                     	;# 
  1060  0EA3                     	;# 
  1061  0EA4                     	;# 
  1062  0EA5                     	;# 
  1063  0F0F                     	;# 
  1064  0F10                     	;# 
  1065  0F11                     	;# 
  1066  0F12                     	;# 
  1067  0F13                     	;# 
  1068  0F14                     	;# 
  1069  0F15                     	;# 
  1070  0F16                     	;# 
  1071  0F17                     	;# 
  1072  0F18                     	;# 
  1073  0F19                     	;# 
  1074  0F1A                     	;# 
  1075  0F1B                     	;# 
  1076  0F1C                     	;# 
  1077  0F1D                     	;# 
  1078  0F1E                     	;# 
  1079  0F1F                     	;# 
  1080  0F20                     	;# 
  1081  0F21                     	;# 
  1082  0F22                     	;# 
  1083  0F23                     	;# 
  1084  0F24                     	;# 
  1085  0F25                     	;# 
  1086  0F26                     	;# 
  1087  0F27                     	;# 
  1088  0F28                     	;# 
  1089  0F29                     	;# 
  1090  0F2A                     	;# 
  1091  0F2B                     	;# 
  1092  0F2C                     	;# 
  1093  0F2D                     	;# 
  1094  0F2E                     	;# 
  1095  0F2F                     	;# 
  1096  0F30                     	;# 
  1097  0F31                     	;# 
  1098  0F32                     	;# 
  1099  0F33                     	;# 
  1100  0F34                     	;# 
  1101  0F35                     	;# 
  1102  0F36                     	;# 
  1103  0F37                     	;# 
  1104  0FE4                     	;# 
  1105  0FE5                     	;# 
  1106  0FE6                     	;# 
  1107  0FE7                     	;# 
  1108  0FE8                     	;# 
  1109  0FE9                     	;# 
  1110  0FEA                     	;# 
  1111  0FEB                     	;# 
  1112  0FED                     	;# 
  1113  0FEE                     	;# 
  1114  0FEF                     	;# 
  1115  0000                     	;# 
  1116  0001                     	;# 
  1117  0002                     	;# 
  1118  0003                     	;# 
  1119  0004                     	;# 
  1120  0005                     	;# 
  1121  0006                     	;# 
  1122  0007                     	;# 
  1123  0008                     	;# 
  1124  0009                     	;# 
  1125  000A                     	;# 
  1126  000B                     	;# 
  1127  000C                     	;# 
  1128  000E                     	;# 
  1129  0010                     	;# 
  1130  0011                     	;# 
  1131  0012                     	;# 
  1132  0013                     	;# 
  1133  0014                     	;# 
  1134  0015                     	;# 
  1135  0015                     	;# 
  1136  0016                     	;# 
  1137  0016                     	;# 
  1138  0017                     	;# 
  1139  0018                     	;# 
  1140  0019                     	;# 
  1141  0019                     	;# 
  1142  001A                     	;# 
  1143  001B                     	;# 
  1144  001C                     	;# 
  1145  001D                     	;# 
  1146  001E                     	;# 
  1147  001F                     	;# 
  1148  008C                     	;# 
  1149  008E                     	;# 
  1150  0090                     	;# 
  1151  0091                     	;# 
  1152  0092                     	;# 
  1153  0093                     	;# 
  1154  0094                     	;# 
  1155  0097                     	;# 
  1156  009B                     	;# 
  1157  009B                     	;# 
  1158  009C                     	;# 
  1159  009D                     	;# 
  1160  009E                     	;# 
  1161  009F                     	;# 
  1162  010C                     	;# 
  1163  010E                     	;# 
  1164  0111                     	;# 
  1165  0112                     	;# 
  1166  0113                     	;# 
  1167  0114                     	;# 
  1168  0115                     	;# 
  1169  0116                     	;# 
  1170  0117                     	;# 
  1171  0118                     	;# 
  1172  0119                     	;# 
  1173  018C                     	;# 
  1174  018E                     	;# 
  1175  0199                     	;# 
  1176  0199                     	;# 
  1177  0199                     	;# 
  1178  019A                     	;# 
  1179  019A                     	;# 
  1180  019A                     	;# 
  1181  019B                     	;# 
  1182  019B                     	;# 
  1183  019B                     	;# 
  1184  019B                     	;# 
  1185  019B                     	;# 
  1186  019C                     	;# 
  1187  019C                     	;# 
  1188  019C                     	;# 
  1189  019D                     	;# 
  1190  019D                     	;# 
  1191  019D                     	;# 
  1192  019E                     	;# 
  1193  019E                     	;# 
  1194  019E                     	;# 
  1195  019F                     	;# 
  1196  019F                     	;# 
  1197  019F                     	;# 
  1198  019F                     	;# 
  1199  019F                     	;# 
  1200  020C                     	;# 
  1201  020E                     	;# 
  1202  0211                     	;# 
  1203  0211                     	;# 
  1204  0212                     	;# 
  1205  0212                     	;# 
  1206  0213                     	;# 
  1207  0213                     	;# 
  1208  0214                     	;# 
  1209  0214                     	;# 
  1210  0215                     	;# 
  1211  0215                     	;# 
  1212  0215                     	;# 
  1213  0215                     	;# 
  1214  0216                     	;# 
  1215  0216                     	;# 
  1216  0217                     	;# 
  1217  0217                     	;# 
  1218  0219                     	;# 
  1219  021A                     	;# 
  1220  021B                     	;# 
  1221  021C                     	;# 
  1222  021D                     	;# 
  1223  021D                     	;# 
  1224  021E                     	;# 
  1225  021F                     	;# 
  1226  028C                     	;# 
  1227  028E                     	;# 
  1228  0291                     	;# 
  1229  0291                     	;# 
  1230  0292                     	;# 
  1231  0293                     	;# 
  1232  0294                     	;# 
  1233  0295                     	;# 
  1234  0295                     	;# 
  1235  0296                     	;# 
  1236  0297                     	;# 
  1237  0298                     	;# 
  1238  029F                     	;# 
  1239  030C                     	;# 
  1240  030E                     	;# 
  1241  0311                     	;# 
  1242  0311                     	;# 
  1243  0312                     	;# 
  1244  0313                     	;# 
  1245  0314                     	;# 
  1246  0315                     	;# 
  1247  0315                     	;# 
  1248  0316                     	;# 
  1249  0317                     	;# 
  1250  0318                     	;# 
  1251  038C                     	;# 
  1252  038E                     	;# 
  1253  0391                     	;# 
  1254  0392                     	;# 
  1255  0393                     	;# 
  1256  0397                     	;# 
  1257  0398                     	;# 
  1258  0399                     	;# 
  1259  039A                     	;# 
  1260  039C                     	;# 
  1261  039D                     	;# 
  1262  039E                     	;# 
  1263  039F                     	;# 
  1264  0411                     	;# 
  1265  0411                     	;# 
  1266  0412                     	;# 
  1267  0413                     	;# 
  1268  0414                     	;# 
  1269  0415                     	;# 
  1270  0416                     	;# 
  1271  0417                     	;# 
  1272  0418                     	;# 
  1273  0418                     	;# 
  1274  0419                     	;# 
  1275  041A                     	;# 
  1276  041B                     	;# 
  1277  041C                     	;# 
  1278  041D                     	;# 
  1279  041E                     	;# 
  1280  041F                     	;# 
  1281  0498                     	;# 
  1282  0498                     	;# 
  1283  0499                     	;# 
  1284  049A                     	;# 
  1285  049B                     	;# 
  1286  049B                     	;# 
  1287  049C                     	;# 
  1288  049D                     	;# 
  1289  049E                     	;# 
  1290  049F                     	;# 
  1291  0617                     	;# 
  1292  0618                     	;# 
  1293  0619                     	;# 
  1294  0619                     	;# 
  1295  061A                     	;# 
  1296  061B                     	;# 
  1297  061C                     	;# 
  1298  061C                     	;# 
  1299  061F                     	;# 
  1300  0691                     	;# 
  1301  0692                     	;# 
  1302  0693                     	;# 
  1303  0694                     	;# 
  1304  0695                     	;# 
  1305  0696                     	;# 
  1306  0697                     	;# 
  1307  0698                     	;# 
  1308  0699                     	;# 
  1309  0711                     	;# 
  1310  0712                     	;# 
  1311  0713                     	;# 
  1312  0714                     	;# 
  1313  0715                     	;# 
  1314  0716                     	;# 
  1315  0717                     	;# 
  1316  0718                     	;# 
  1317  0719                     	;# 
  1318  0891                     	;# 
  1319  0891                     	;# 
  1320  0891                     	;# 
  1321  0891                     	;# 
  1322  0891                     	;# 
  1323  0891                     	;# 
  1324  0892                     	;# 
  1325  0892                     	;# 
  1326  0892                     	;# 
  1327  0893                     	;# 
  1328  0893                     	;# 
  1329  0893                     	;# 
  1330  0893                     	;# 
  1331  0893                     	;# 
  1332  0893                     	;# 
  1333  0894                     	;# 
  1334  0894                     	;# 
  1335  0894                     	;# 
  1336  0895                     	;# 
  1337  0895                     	;# 
  1338  0895                     	;# 
  1339  0896                     	;# 
  1340  0896                     	;# 
  1341  0896                     	;# 
  1342  089B                     	;# 
  1343  0911                     	;# 
  1344  0912                     	;# 
  1345  0913                     	;# 
  1346  0914                     	;# 
  1347  0915                     	;# 
  1348  0916                     	;# 
  1349  0918                     	;# 
  1350  0919                     	;# 
  1351  091A                     	;# 
  1352  091B                     	;# 
  1353  091C                     	;# 
  1354  091D                     	;# 
  1355  091E                     	;# 
  1356  091F                     	;# 
  1357  0E0F                     	;# 
  1358  0E10                     	;# 
  1359  0E11                     	;# 
  1360  0E12                     	;# 
  1361  0E13                     	;# 
  1362  0E14                     	;# 
  1363  0E15                     	;# 
  1364  0E16                     	;# 
  1365  0E17                     	;# 
  1366  0E18                     	;# 
  1367  0E19                     	;# 
  1368  0E1A                     	;# 
  1369  0E1B                     	;# 
  1370  0E1C                     	;# 
  1371  0E1D                     	;# 
  1372  0E1E                     	;# 
  1373  0E1F                     	;# 
  1374  0E20                     	;# 
  1375  0E21                     	;# 
  1376  0E22                     	;# 
  1377  0E24                     	;# 
  1378  0E25                     	;# 
  1379  0E28                     	;# 
  1380  0E29                     	;# 
  1381  0E2A                     	;# 
  1382  0E2B                     	;# 
  1383  0E2C                     	;# 
  1384  0E2D                     	;# 
  1385  0E2E                     	;# 
  1386  0E2F                     	;# 
  1387  0E90                     	;# 
  1388  0E91                     	;# 
  1389  0E92                     	;# 
  1390  0E94                     	;# 
  1391  0E95                     	;# 
  1392  0EA0                     	;# 
  1393  0EA1                     	;# 
  1394  0EA2                     	;# 
  1395  0EA3                     	;# 
  1396  0EA4                     	;# 
  1397  0EA5                     	;# 
  1398  0F0F                     	;# 
  1399  0F10                     	;# 
  1400  0F11                     	;# 
  1401  0F12                     	;# 
  1402  0F13                     	;# 
  1403  0F14                     	;# 
  1404  0F15                     	;# 
  1405  0F16                     	;# 
  1406  0F17                     	;# 
  1407  0F18                     	;# 
  1408  0F19                     	;# 
  1409  0F1A                     	;# 
  1410  0F1B                     	;# 
  1411  0F1C                     	;# 
  1412  0F1D                     	;# 
  1413  0F1E                     	;# 
  1414  0F1F                     	;# 
  1415  0F20                     	;# 
  1416  0F21                     	;# 
  1417  0F22                     	;# 
  1418  0F23                     	;# 
  1419  0F24                     	;# 
  1420  0F25                     	;# 
  1421  0F26                     	;# 
  1422  0F27                     	;# 
  1423  0F28                     	;# 
  1424  0F29                     	;# 
  1425  0F2A                     	;# 
  1426  0F2B                     	;# 
  1427  0F2C                     	;# 
  1428  0F2D                     	;# 
  1429  0F2E                     	;# 
  1430  0F2F                     	;# 
  1431  0F30                     	;# 
  1432  0F31                     	;# 
  1433  0F32                     	;# 
  1434  0F33                     	;# 
  1435  0F34                     	;# 
  1436  0F35                     	;# 
  1437  0F36                     	;# 
  1438  0F37                     	;# 
  1439  0FE4                     	;# 
  1440  0FE5                     	;# 
  1441  0FE6                     	;# 
  1442  0FE7                     	;# 
  1443  0FE8                     	;# 
  1444  0FE9                     	;# 
  1445  0FEA                     	;# 
  1446  0FEB                     	;# 
  1447  0FED                     	;# 
  1448  0FEE                     	;# 
  1449  0FEF                     	;# 
  1450  0000                     	;# 
  1451  0001                     	;# 
  1452  0002                     	;# 
  1453  0003                     	;# 
  1454  0004                     	;# 
  1455  0005                     	;# 
  1456  0006                     	;# 
  1457  0007                     	;# 
  1458  0008                     	;# 
  1459  0009                     	;# 
  1460  000A                     	;# 
  1461  000B                     	;# 
  1462  000C                     	;# 
  1463  000E                     	;# 
  1464  0010                     	;# 
  1465  0011                     	;# 
  1466  0012                     	;# 
  1467  0013                     	;# 
  1468  0014                     	;# 
  1469  0015                     	;# 
  1470  0015                     	;# 
  1471  0016                     	;# 
  1472  0016                     	;# 
  1473  0017                     	;# 
  1474  0018                     	;# 
  1475  0019                     	;# 
  1476  0019                     	;# 
  1477  001A                     	;# 
  1478  001B                     	;# 
  1479  001C                     	;# 
  1480  001D                     	;# 
  1481  001E                     	;# 
  1482  001F                     	;# 
  1483  008C                     	;# 
  1484  008E                     	;# 
  1485  0090                     	;# 
  1486  0091                     	;# 
  1487  0092                     	;# 
  1488  0093                     	;# 
  1489  0094                     	;# 
  1490  0097                     	;# 
  1491  009B                     	;# 
  1492  009B                     	;# 
  1493  009C                     	;# 
  1494  009D                     	;# 
  1495  009E                     	;# 
  1496  009F                     	;# 
  1497  010C                     	;# 
  1498  010E                     	;# 
  1499  0111                     	;# 
  1500  0112                     	;# 
  1501  0113                     	;# 
  1502  0114                     	;# 
  1503  0115                     	;# 
  1504  0116                     	;# 
  1505  0117                     	;# 
  1506  0118                     	;# 
  1507  0119                     	;# 
  1508  018C                     	;# 
  1509  018E                     	;# 
  1510  0199                     	;# 
  1511  0199                     	;# 
  1512  0199                     	;# 
  1513  019A                     	;# 
  1514  019A                     	;# 
  1515  019A                     	;# 
  1516  019B                     	;# 
  1517  019B                     	;# 
  1518  019B                     	;# 
  1519  019B                     	;# 
  1520  019B                     	;# 
  1521  019C                     	;# 
  1522  019C                     	;# 
  1523  019C                     	;# 
  1524  019D                     	;# 
  1525  019D                     	;# 
  1526  019D                     	;# 
  1527  019E                     	;# 
  1528  019E                     	;# 
  1529  019E                     	;# 
  1530  019F                     	;# 
  1531  019F                     	;# 
  1532  019F                     	;# 
  1533  019F                     	;# 
  1534  019F                     	;# 
  1535  020C                     	;# 
  1536  020E                     	;# 
  1537  0211                     	;# 
  1538  0211                     	;# 
  1539  0212                     	;# 
  1540  0212                     	;# 
  1541  0213                     	;# 
  1542  0213                     	;# 
  1543  0214                     	;# 
  1544  0214                     	;# 
  1545  0215                     	;# 
  1546  0215                     	;# 
  1547  0215                     	;# 
  1548  0215                     	;# 
  1549  0216                     	;# 
  1550  0216                     	;# 
  1551  0217                     	;# 
  1552  0217                     	;# 
  1553  0219                     	;# 
  1554  021A                     	;# 
  1555  021B                     	;# 
  1556  021C                     	;# 
  1557  021D                     	;# 
  1558  021D                     	;# 
  1559  021E                     	;# 
  1560  021F                     	;# 
  1561  028C                     	;# 
  1562  028E                     	;# 
  1563  0291                     	;# 
  1564  0291                     	;# 
  1565  0292                     	;# 
  1566  0293                     	;# 
  1567  0294                     	;# 
  1568  0295                     	;# 
  1569  0295                     	;# 
  1570  0296                     	;# 
  1571  0297                     	;# 
  1572  0298                     	;# 
  1573  029F                     	;# 
  1574  030C                     	;# 
  1575  030E                     	;# 
  1576  0311                     	;# 
  1577  0311                     	;# 
  1578  0312                     	;# 
  1579  0313                     	;# 
  1580  0314                     	;# 
  1581  0315                     	;# 
  1582  0315                     	;# 
  1583  0316                     	;# 
  1584  0317                     	;# 
  1585  0318                     	;# 
  1586  038C                     	;# 
  1587  038E                     	;# 
  1588  0391                     	;# 
  1589  0392                     	;# 
  1590  0393                     	;# 
  1591  0397                     	;# 
  1592  0398                     	;# 
  1593  0399                     	;# 
  1594  039A                     	;# 
  1595  039C                     	;# 
  1596  039D                     	;# 
  1597  039E                     	;# 
  1598  039F                     	;# 
  1599  0411                     	;# 
  1600  0411                     	;# 
  1601  0412                     	;# 
  1602  0413                     	;# 
  1603  0414                     	;# 
  1604  0415                     	;# 
  1605  0416                     	;# 
  1606  0417                     	;# 
  1607  0418                     	;# 
  1608  0418                     	;# 
  1609  0419                     	;# 
  1610  041A                     	;# 
  1611  041B                     	;# 
  1612  041C                     	;# 
  1613  041D                     	;# 
  1614  041E                     	;# 
  1615  041F                     	;# 
  1616  0498                     	;# 
  1617  0498                     	;# 
  1618  0499                     	;# 
  1619  049A                     	;# 
  1620  049B                     	;# 
  1621  049B                     	;# 
  1622  049C                     	;# 
  1623  049D                     	;# 
  1624  049E                     	;# 
  1625  049F                     	;# 
  1626  0617                     	;# 
  1627  0618                     	;# 
  1628  0619                     	;# 
  1629  0619                     	;# 
  1630  061A                     	;# 
  1631  061B                     	;# 
  1632  061C                     	;# 
  1633  061C                     	;# 
  1634  061F                     	;# 
  1635  0691                     	;# 
  1636  0692                     	;# 
  1637  0693                     	;# 
  1638  0694                     	;# 
  1639  0695                     	;# 
  1640  0696                     	;# 
  1641  0697                     	;# 
  1642  0698                     	;# 
  1643  0699                     	;# 
  1644  0711                     	;# 
  1645  0712                     	;# 
  1646  0713                     	;# 
  1647  0714                     	;# 
  1648  0715                     	;# 
  1649  0716                     	;# 
  1650  0717                     	;# 
  1651  0718                     	;# 
  1652  0719                     	;# 
  1653  0891                     	;# 
  1654  0891                     	;# 
  1655  0891                     	;# 
  1656  0891                     	;# 
  1657  0891                     	;# 
  1658  0891                     	;# 
  1659  0892                     	;# 
  1660  0892                     	;# 
  1661  0892                     	;# 
  1662  0893                     	;# 
  1663  0893                     	;# 
  1664  0893                     	;# 
  1665  0893                     	;# 
  1666  0893                     	;# 
  1667  0893                     	;# 
  1668  0894                     	;# 
  1669  0894                     	;# 
  1670  0894                     	;# 
  1671  0895                     	;# 
  1672  0895                     	;# 
  1673  0895                     	;# 
  1674  0896                     	;# 
  1675  0896                     	;# 
  1676  0896                     	;# 
  1677  089B                     	;# 
  1678  0911                     	;# 
  1679  0912                     	;# 
  1680  0913                     	;# 
  1681  0914                     	;# 
  1682  0915                     	;# 
  1683  0916                     	;# 
  1684  0918                     	;# 
  1685  0919                     	;# 
  1686  091A                     	;# 
  1687  091B                     	;# 
  1688  091C                     	;# 
  1689  091D                     	;# 
  1690  091E                     	;# 
  1691  091F                     	;# 
  1692  0E0F                     	;# 
  1693  0E10                     	;# 
  1694  0E11                     	;# 
  1695  0E12                     	;# 
  1696  0E13                     	;# 
  1697  0E14                     	;# 
  1698  0E15                     	;# 
  1699  0E16                     	;# 
  1700  0E17                     	;# 
  1701  0E18                     	;# 
  1702  0E19                     	;# 
  1703  0E1A                     	;# 
  1704  0E1B                     	;# 
  1705  0E1C                     	;# 
  1706  0E1D                     	;# 
  1707  0E1E                     	;# 
  1708  0E1F                     	;# 
  1709  0E20                     	;# 
  1710  0E21                     	;# 
  1711  0E22                     	;# 
  1712  0E24                     	;# 
  1713  0E25                     	;# 
  1714  0E28                     	;# 
  1715  0E29                     	;# 
  1716  0E2A                     	;# 
  1717  0E2B                     	;# 
  1718  0E2C                     	;# 
  1719  0E2D                     	;# 
  1720  0E2E                     	;# 
  1721  0E2F                     	;# 
  1722  0E90                     	;# 
  1723  0E91                     	;# 
  1724  0E92                     	;# 
  1725  0E94                     	;# 
  1726  0E95                     	;# 
  1727  0EA0                     	;# 
  1728  0EA1                     	;# 
  1729  0EA2                     	;# 
  1730  0EA3                     	;# 
  1731  0EA4                     	;# 
  1732  0EA5                     	;# 
  1733  0F0F                     	;# 
  1734  0F10                     	;# 
  1735  0F11                     	;# 
  1736  0F12                     	;# 
  1737  0F13                     	;# 
  1738  0F14                     	;# 
  1739  0F15                     	;# 
  1740  0F16                     	;# 
  1741  0F17                     	;# 
  1742  0F18                     	;# 
  1743  0F19                     	;# 
  1744  0F1A                     	;# 
  1745  0F1B                     	;# 
  1746  0F1C                     	;# 
  1747  0F1D                     	;# 
  1748  0F1E                     	;# 
  1749  0F1F                     	;# 
  1750  0F20                     	;# 
  1751  0F21                     	;# 
  1752  0F22                     	;# 
  1753  0F23                     	;# 
  1754  0F24                     	;# 
  1755  0F25                     	;# 
  1756  0F26                     	;# 
  1757  0F27                     	;# 
  1758  0F28                     	;# 
  1759  0F29                     	;# 
  1760  0F2A                     	;# 
  1761  0F2B                     	;# 
  1762  0F2C                     	;# 
  1763  0F2D                     	;# 
  1764  0F2E                     	;# 
  1765  0F2F                     	;# 
  1766  0F30                     	;# 
  1767  0F31                     	;# 
  1768  0F32                     	;# 
  1769  0F33                     	;# 
  1770  0F34                     	;# 
  1771  0F35                     	;# 
  1772  0F36                     	;# 
  1773  0F37                     	;# 
  1774  0FE4                     	;# 
  1775  0FE5                     	;# 
  1776  0FE6                     	;# 
  1777  0FE7                     	;# 
  1778  0FE8                     	;# 
  1779  0FE9                     	;# 
  1780  0FEA                     	;# 
  1781  0FEB                     	;# 
  1782  0FED                     	;# 
  1783  0FEE                     	;# 
  1784  0FEF                     	;# 
  1785  0000                     	;# 
  1786  0001                     	;# 
  1787  0002                     	;# 
  1788  0003                     	;# 
  1789  0004                     	;# 
  1790  0005                     	;# 
  1791  0006                     	;# 
  1792  0007                     	;# 
  1793  0008                     	;# 
  1794  0009                     	;# 
  1795  000A                     	;# 
  1796  000B                     	;# 
  1797  000C                     	;# 
  1798  000E                     	;# 
  1799  0010                     	;# 
  1800  0011                     	;# 
  1801  0012                     	;# 
  1802  0013                     	;# 
  1803  0014                     	;# 
  1804  0015                     	;# 
  1805  0015                     	;# 
  1806  0016                     	;# 
  1807  0016                     	;# 
  1808  0017                     	;# 
  1809  0018                     	;# 
  1810  0019                     	;# 
  1811  0019                     	;# 
  1812  001A                     	;# 
  1813  001B                     	;# 
  1814  001C                     	;# 
  1815  001D                     	;# 
  1816  001E                     	;# 
  1817  001F                     	;# 
  1818  008C                     	;# 
  1819  008E                     	;# 
  1820  0090                     	;# 
  1821  0091                     	;# 
  1822  0092                     	;# 
  1823  0093                     	;# 
  1824  0094                     	;# 
  1825  0097                     	;# 
  1826  009B                     	;# 
  1827  009B                     	;# 
  1828  009C                     	;# 
  1829  009D                     	;# 
  1830  009E                     	;# 
  1831  009F                     	;# 
  1832  010C                     	;# 
  1833  010E                     	;# 
  1834  0111                     	;# 
  1835  0112                     	;# 
  1836  0113                     	;# 
  1837  0114                     	;# 
  1838  0115                     	;# 
  1839  0116                     	;# 
  1840  0117                     	;# 
  1841  0118                     	;# 
  1842  0119                     	;# 
  1843  018C                     	;# 
  1844  018E                     	;# 
  1845  0199                     	;# 
  1846  0199                     	;# 
  1847  0199                     	;# 
  1848  019A                     	;# 
  1849  019A                     	;# 
  1850  019A                     	;# 
  1851  019B                     	;# 
  1852  019B                     	;# 
  1853  019B                     	;# 
  1854  019B                     	;# 
  1855  019B                     	;# 
  1856  019C                     	;# 
  1857  019C                     	;# 
  1858  019C                     	;# 
  1859  019D                     	;# 
  1860  019D                     	;# 
  1861  019D                     	;# 
  1862  019E                     	;# 
  1863  019E                     	;# 
  1864  019E                     	;# 
  1865  019F                     	;# 
  1866  019F                     	;# 
  1867  019F                     	;# 
  1868  019F                     	;# 
  1869  019F                     	;# 
  1870  020C                     	;# 
  1871  020E                     	;# 
  1872  0211                     	;# 
  1873  0211                     	;# 
  1874  0212                     	;# 
  1875  0212                     	;# 
  1876  0213                     	;# 
  1877  0213                     	;# 
  1878  0214                     	;# 
  1879  0214                     	;# 
  1880  0215                     	;# 
  1881  0215                     	;# 
  1882  0215                     	;# 
  1883  0215                     	;# 
  1884  0216                     	;# 
  1885  0216                     	;# 
  1886  0217                     	;# 
  1887  0217                     	;# 
  1888  0219                     	;# 
  1889  021A                     	;# 
  1890  021B                     	;# 
  1891  021C                     	;# 
  1892  021D                     	;# 
  1893  021D                     	;# 
  1894  021E                     	;# 
  1895  021F                     	;# 
  1896  028C                     	;# 
  1897  028E                     	;# 
  1898  0291                     	;# 
  1899  0291                     	;# 
  1900  0292                     	;# 
  1901  0293                     	;# 
  1902  0294                     	;# 
  1903  0295                     	;# 
  1904  0295                     	;# 
  1905  0296                     	;# 
  1906  0297                     	;# 
  1907  0298                     	;# 
  1908  029F                     	;# 
  1909  030C                     	;# 
  1910  030E                     	;# 
  1911  0311                     	;# 
  1912  0311                     	;# 
  1913  0312                     	;# 
  1914  0313                     	;# 
  1915  0314                     	;# 
  1916  0315                     	;# 
  1917  0315                     	;# 
  1918  0316                     	;# 
  1919  0317                     	;# 
  1920  0318                     	;# 
  1921  038C                     	;# 
  1922  038E                     	;# 
  1923  0391                     	;# 
  1924  0392                     	;# 
  1925  0393                     	;# 
  1926  0397                     	;# 
  1927  0398                     	;# 
  1928  0399                     	;# 
  1929  039A                     	;# 
  1930  039C                     	;# 
  1931  039D                     	;# 
  1932  039E                     	;# 
  1933  039F                     	;# 
  1934  0411                     	;# 
  1935  0411                     	;# 
  1936  0412                     	;# 
  1937  0413                     	;# 
  1938  0414                     	;# 
  1939  0415                     	;# 
  1940  0416                     	;# 
  1941  0417                     	;# 
  1942  0418                     	;# 
  1943  0418                     	;# 
  1944  0419                     	;# 
  1945  041A                     	;# 
  1946  041B                     	;# 
  1947  041C                     	;# 
  1948  041D                     	;# 
  1949  041E                     	;# 
  1950  041F                     	;# 
  1951  0498                     	;# 
  1952  0498                     	;# 
  1953  0499                     	;# 
  1954  049A                     	;# 
  1955  049B                     	;# 
  1956  049B                     	;# 
  1957  049C                     	;# 
  1958  049D                     	;# 
  1959  049E                     	;# 
  1960  049F                     	;# 
  1961  0617                     	;# 
  1962  0618                     	;# 
  1963  0619                     	;# 
  1964  0619                     	;# 
  1965  061A                     	;# 
  1966  061B                     	;# 
  1967  061C                     	;# 
  1968  061C                     	;# 
  1969  061F                     	;# 
  1970  0691                     	;# 
  1971  0692                     	;# 
  1972  0693                     	;# 
  1973  0694                     	;# 
  1974  0695                     	;# 
  1975  0696                     	;# 
  1976  0697                     	;# 
  1977  0698                     	;# 
  1978  0699                     	;# 
  1979  0711                     	;# 
  1980  0712                     	;# 
  1981  0713                     	;# 
  1982  0714                     	;# 
  1983  0715                     	;# 
  1984  0716                     	;# 
  1985  0717                     	;# 
  1986  0718                     	;# 
  1987  0719                     	;# 
  1988  0891                     	;# 
  1989  0891                     	;# 
  1990  0891                     	;# 
  1991  0891                     	;# 
  1992  0891                     	;# 
  1993  0891                     	;# 
  1994  0892                     	;# 
  1995  0892                     	;# 
  1996  0892                     	;# 
  1997  0893                     	;# 
  1998  0893                     	;# 
  1999  0893                     	;# 
  2000  0893                     	;# 
  2001  0893                     	;# 
  2002  0893                     	;# 
  2003  0894                     	;# 
  2004  0894                     	;# 
  2005  0894                     	;# 
  2006  0895                     	;# 
  2007  0895                     	;# 
  2008  0895                     	;# 
  2009  0896                     	;# 
  2010  0896                     	;# 
  2011  0896                     	;# 
  2012  089B                     	;# 
  2013  0911                     	;# 
  2014  0912                     	;# 
  2015  0913                     	;# 
  2016  0914                     	;# 
  2017  0915                     	;# 
  2018  0916                     	;# 
  2019  0918                     	;# 
  2020  0919                     	;# 
  2021  091A                     	;# 
  2022  091B                     	;# 
  2023  091C                     	;# 
  2024  091D                     	;# 
  2025  091E                     	;# 
  2026  091F                     	;# 
  2027  0E0F                     	;# 
  2028  0E10                     	;# 
  2029  0E11                     	;# 
  2030  0E12                     	;# 
  2031  0E13                     	;# 
  2032  0E14                     	;# 
  2033  0E15                     	;# 
  2034  0E16                     	;# 
  2035  0E17                     	;# 
  2036  0E18                     	;# 
  2037  0E19                     	;# 
  2038  0E1A                     	;# 
  2039  0E1B                     	;# 
  2040  0E1C                     	;# 
  2041  0E1D                     	;# 
  2042  0E1E                     	;# 
  2043  0E1F                     	;# 
  2044  0E20                     	;# 
  2045  0E21                     	;# 
  2046  0E22                     	;# 
  2047  0E24                     	;# 
  2048  0E25                     	;# 
  2049  0E28                     	;# 
  2050  0E29                     	;# 
  2051  0E2A                     	;# 
  2052  0E2B                     	;# 
  2053  0E2C                     	;# 
  2054  0E2D                     	;# 
  2055  0E2E                     	;# 
  2056  0E2F                     	;# 
  2057  0E90                     	;# 
  2058  0E91                     	;# 
  2059  0E92                     	;# 
  2060  0E94                     	;# 
  2061  0E95                     	;# 
  2062  0EA0                     	;# 
  2063  0EA1                     	;# 
  2064  0EA2                     	;# 
  2065  0EA3                     	;# 
  2066  0EA4                     	;# 
  2067  0EA5                     	;# 
  2068  0F0F                     	;# 
  2069  0F10                     	;# 
  2070  0F11                     	;# 
  2071  0F12                     	;# 
  2072  0F13                     	;# 
  2073  0F14                     	;# 
  2074  0F15                     	;# 
  2075  0F16                     	;# 
  2076  0F17                     	;# 
  2077  0F18                     	;# 
  2078  0F19                     	;# 
  2079  0F1A                     	;# 
  2080  0F1B                     	;# 
  2081  0F1C                     	;# 
  2082  0F1D                     	;# 
  2083  0F1E                     	;# 
  2084  0F1F                     	;# 
  2085  0F20                     	;# 
  2086  0F21                     	;# 
  2087  0F22                     	;# 
  2088  0F23                     	;# 
  2089  0F24                     	;# 
  2090  0F25                     	;# 
  2091  0F26                     	;# 
  2092  0F27                     	;# 
  2093  0F28                     	;# 
  2094  0F29                     	;# 
  2095  0F2A                     	;# 
  2096  0F2B                     	;# 
  2097  0F2C                     	;# 
  2098  0F2D                     	;# 
  2099  0F2E                     	;# 
  2100  0F2F                     	;# 
  2101  0F30                     	;# 
  2102  0F31                     	;# 
  2103  0F32                     	;# 
  2104  0F33                     	;# 
  2105  0F34                     	;# 
  2106  0F35                     	;# 
  2107  0F36                     	;# 
  2108  0F37                     	;# 
  2109  0FE4                     	;# 
  2110  0FE5                     	;# 
  2111  0FE6                     	;# 
  2112  0FE7                     	;# 
  2113  0FE8                     	;# 
  2114  0FE9                     	;# 
  2115  0FEA                     	;# 
  2116  0FEB                     	;# 
  2117  0FED                     	;# 
  2118  0FEE                     	;# 
  2119  0FEF                     	;# 
  2120  1FE0                     _romArray_absaddr	set	8160
  2121                           
  2122                           	psect	stringtext1
  2123  1000                     __pstringtext1:	
  2124  1000                     _resetRomData:	
  2125  1000  34AA               	retlw	170
  2126  1001  3455               	retlw	85
  2127  1002  346E               	retlw	110
  2128  1003  3463               	retlw	99
  2129  1004  346F               	retlw	111
  2130  1005  346E               	retlw	110
  2131  1006  3466               	retlw	102
  2132  1007  3469               	retlw	105
  2133  1008  3467               	retlw	103
  2134  1009  3475               	retlw	117
  2135  100A  3472               	retlw	114
  2136  100B  3465               	retlw	101
  2137  100C  3464               	retlw	100
  2138  100D  3400               	retlw	0
  2139  100E  3400               	retlw	0
  2140  100F  3400               	retlw	0
  2141  1010  3400               	retlw	0
  2142  1011  3400               	retlw	0
  2143  1012  3400               	retlw	0
  2144  1013                     __end_of_resetRomData:	
  2145                           
  2146                           	psect	stringtext2
  2147  1019                     __pstringtext2:	
  2148  1019                     _n_ADDRESS_P0:	
  2149  1019  34AD               	retlw	173
  2150  101A  3487               	retlw	135
  2151  101B  3466               	retlw	102
  2152  101C  34BC               	retlw	188
  2153  101D  34BB               	retlw	187
  2154  101E                     __end_of_n_ADDRESS_P0:	
  2155                           
  2156                           	psect	stringtext3
  2157  1040                     __pstringtext3:	
  2158  1040                     _n_ADDRESS_MUL:	
  2159  1040  3421               	retlw	33
  2160  1041                     __end_of_n_ADDRESS_MUL:	
  2161  1FE0                     _romArray_absaddr	set	8160
  2162                           
  2163                           	psect	_romArray_text
  2164  1FE0                     __p_romArray_text:	
  2165  1FE0                     _romArray:	
  2166  1FE0  3400               	retlw	0
  2167  1FE1  3400               	retlw	0
  2168  1FE2  3400               	retlw	0
  2169  1FE3  3400               	retlw	0
  2170  1FE4  3400               	retlw	0
  2171  1FE5  3400               	retlw	0
  2172  1FE6  3400               	retlw	0
  2173  1FE7  3400               	retlw	0
  2174  1FE8  3400               	retlw	0
  2175  1FE9  3400               	retlw	0
  2176  1FEA  3400               	retlw	0
  2177  1FEB  3400               	retlw	0
  2178  1FEC  3400               	retlw	0
  2179  1FED  3400               	retlw	0
  2180  1FEE  3400               	retlw	0
  2181  1FEF  3400               	retlw	0
  2182  1FF0  3400               	retlw	0
  2183  1FF1  3400               	retlw	0
  2184  1FF2  3400               	retlw	0
  2185  1FF3  3400               	retlw	0
  2186  1FF4  3400               	retlw	0
  2187  1FF5  3400               	retlw	0
  2188  1FF6  3400               	retlw	0
  2189  1FF7  3400               	retlw	0
  2190  1FF8  3400               	retlw	0
  2191  1FF9  3400               	retlw	0
  2192  1FFA  3400               	retlw	0
  2193  1FFB  3400               	retlw	0
  2194  1FFC  3400               	retlw	0
  2195  1FFD  3400               	retlw	0
  2196  1FFE  3400               	retlw	0
  2197  1FFF  3400               	retlw	0
  2198  2000                     __end_of_romArray:	
  2199  0003                     _STATUSbits	set	3
  2200  0010                     _PIR0bits	set	16
  2201  000E                     _PORTCbits	set	14
  2202  000C                     _PORTAbits	set	12
  2203  000B                     _INTCONbits	set	11
  2204  0097                     _WDTCONbits	set	151
  2205  009E                     _ADCON1bits	set	158
  2206  009C                     _ADRESH	set	156
  2207  009B                     _ADRESL	set	155
  2208  009D                     _ADCON0bits	set	157
  2209  0090                     _PIE0bits	set	144
  2210  008E                     _TRISCbits	set	142
  2211  008C                     _TRISAbits	set	140
  2212  0117                     _FVRCONbits	set	279
  2213  018E                     _ANSELCbits	set	398
  2214  018C                     _ANSELAbits	set	396
  2215  018E                     _ANSELC	set	398
  2216  018C                     _ANSELA	set	396
  2217  020C                     _WPUAbits	set	524
  2218  020E                     _WPUC	set	526
  2219  020C                     _WPUA	set	524
  2220  0211                     _SSP1BUF	set	529
  2221  0214                     _SSP1STATbits	set	532
  2222  0215                     _SSP1CON1bits	set	533
  2223  028E                     _ODCONC	set	654
  2224  028C                     _ODCONA	set	652
  2225  038E                     _INLVLC	set	910
  2226  038C                     _INLVLA	set	908
  2227  0894                     _PMDATH	set	2196
  2228  0893                     _PMDATL	set	2195
  2229  0896                     _PMCON2	set	2198
  2230  0895                     _PMCON1bits	set	2197
  2231  0892                     _PMADRH	set	2194
  2232  0891                     _PMADRL	set	2193
  2233  0895                     _PMCON1	set	2197
  2234  0919                     _OSCCON1bits	set	2329
  2235  0EA0                     _RC0PPSbits	set	3744
  2236  0EA2                     _RC2PPSbits	set	3746
  2237  0EA1                     _RC1PPSbits	set	3745
  2238                           
  2239                           	psect	stringtext4
  2240  1013                     __pstringtext4:	
  2241  1013                     STR_8:	
  2242  1013  3452               	retlw	82	;'R'
  2243  1014  3446               	retlw	70	;'F'
  2244  1015  3450               	retlw	80	;'P'
  2245  1016  3457               	retlw	87	;'W'
  2246  1017  3452               	retlw	82	;'R'
  2247  1018  3400               	retlw	0
  2248                           
  2249                           	psect	stringtext5
  2250  101E                     __pstringtext5:	
  2251  101E                     STR_5:	
  2252  101E  3441               	retlw	65	;'A'
  2253  101F  344E               	retlw	78	;'N'
  2254  1020  3443               	retlw	67	;'C'
  2255  1021  3433               	retlw	51	;'3'
  2256  1022  3400               	retlw	0
  2257                           
  2258                           	psect	stringtext6
  2259  1023                     __pstringtext6:	
  2260  1023                     STR_7:	
  2261  1023  3454               	retlw	84	;'T'
  2262  1024  3445               	retlw	69	;'E'
  2263  1025  344D               	retlw	77	;'M'
  2264  1026  3450               	retlw	80	;'P'
  2265  1027  3400               	retlw	0
  2266                           
  2267                           	psect	stringtext7
  2268  1028                     __pstringtext7:	
  2269  1028                     STR_4:	
  2270  1028  3456               	retlw	86	;'V'
  2271  1029  3442               	retlw	66	;'B'
  2272  102A  3441               	retlw	65	;'A'
  2273  102B  3454               	retlw	84	;'T'
  2274  102C  3400               	retlw	0
  2275                           
  2276                           	psect	stringtext8
  2277  102D                     __pstringtext8:	
  2278  102D                     STR_10:	
  2279  102D  3442               	retlw	66	;'B'
  2280  102E  344F               	retlw	79	;'O'
  2281  102F  344F               	retlw	79	;'O'
  2282  1030  3454               	retlw	84	;'T'
  2283  1031  3400               	retlw	0
  2284                           
  2285                           	psect	stringtext9
  2286  1032                     __pstringtext9:	
  2287  1032                     STR_9:	
  2288  1032  3455               	retlw	85	;'U'
  2289  1033  3448               	retlw	72	;'H'
  2290  1034  3431               	retlw	49	;'1'
  2291  1035  3400               	retlw	0
  2292                           
  2293                           	psect	stringtext10
  2294  1036                     __pstringtext10:	
  2295  1036                     STR_3:	
  2296  1036  3444               	retlw	68	;'D'
  2297  1037  3442               	retlw	66	;'B'
  2298  1038  3447               	retlw	71	;'G'
  2299  1039  3400               	retlw	0
  2300                           
  2301                           	psect	stringtext11
  2302  103A                     __pstringtext11:	
  2303  103A                     STR_6:	
  2304  103A  3446               	retlw	70	;'F'
  2305  103B  3456               	retlw	86	;'V'
  2306  103C  3452               	retlw	82	;'R'
  2307  103D  3400               	retlw	0
  2308                           
  2309                           	psect	stringtext12
  2310  103E                     __pstringtext12:	
  2311  103E                     STR_1:	
  2312  103E  342F               	retlw	47	;'/'
  2313  103F  3400               	retlw	0
  2314                           
  2315                           	psect	stringtext13
  2316  0000                     __pstringtext13:	
  2317  103E                     
  2318                           ; #config settings
  2319  0000                     
  2320                           	psect	cinit
  2321  0011                     start_initialization:	
  2322  0011                     __initialization:	
  2323                           
  2324                           ; Clear objects allocated to BANK0
  2325  0011  3059               	movlw	low __pbssBANK0
  2326  0012  0084               	movwf	4
  2327  0013  3000               	movlw	high __pbssBANK0
  2328  0014  0085               	movwf	5
  2329  0015  3016               	movlw	22
  2330  0016  318D  25C3  3180   	fcall	clear_ram0
  2331                           
  2332                           ; Clear objects allocated to BANK1
  2333  0019  0021               	movlb	1	; select bank1
  2334  001A  01E4               	clrf	__pbssBANK1& (0+127)
  2335  001B  01E5               	clrf	(__pbssBANK1+1)& (0+127)
  2336  001C  01E6               	clrf	(__pbssBANK1+2)& (0+127)
  2337  001D  01E7               	clrf	(__pbssBANK1+3)& (0+127)
  2338                           
  2339                           ; Clear objects allocated to BANK2
  2340  001E  3020               	movlw	low __pbssBANK2
  2341  001F  0084               	movwf	4
  2342  0020  3001               	movlw	high __pbssBANK2
  2343  0021  0085               	movwf	5
  2344  0022  3041               	movlw	65
  2345  0023  318D  25C3         	fcall	clear_ram0
  2346  0025                     end_of_initialization:	
  2347                           ;End of C runtime variable initialization code
  2348                           
  2349  0025                     __end_of__initialization:	
  2350  0025  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2351  0026  0020               	movlb	0
  2352  0027  3182  2AF2         	ljmp	_main	;jump to C main() function
  2353                           
  2354                           	psect	bssBANK0
  2355  0059                     __pbssBANK0:	
  2356  0059                     _TXPacket:	
  2357  0059                     	ds	1
  2358  005A                     _sleepLoop:	
  2359  005A                     	ds	1
  2360  005B                     _nrf24l01:	
  2361  005B                     	ds	1
  2362  005C                     _romData:	
  2363  005C                     	ds	19
  2364                           
  2365                           	psect	bssBANK1
  2366  00E4                     __pbssBANK1:	
  2367  00E4                     _counter:	
  2368  00E4                     	ds	4
  2369                           
  2370                           	psect	bssBANK2
  2371  0120                     __pbssBANK2:	
  2372  0120                     _romHolder:	
  2373  0120                     	ds	32
  2374  0140                     _RXPacket:	
  2375  0140                     	ds	33
  2376                           
  2377                           	psect	clrtext
  2378  0DC3                     clear_ram0:	
  2379                           ;	Called with FSR0 containing the base address, and
  2380                           ;	WREG with the size to clear
  2381                           
  2382  0DC3  0064               	clrwdt	;clear the watchdog before getting into this loop
  2383  0DC4                     clrloop0:	
  2384  0DC4  0180               	clrf	0	;clear RAM location pointed to by FSR
  2385  0DC5  3101               	addfsr 0,1
  2386  0DC6  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2387  0DC7  2DC4               	goto	clrloop0	;have we reached the end yet?
  2388  0DC8  3400               	retlw	0	;all done for this memory range, return
  2389                           
  2390                           	psect	cstackBANK1
  2391  00A0                     __pcstackBANK1:	
  2392  00A0                     loop@rfSetup:	
  2393                           
  2394                           ; 1 bytes @ 0x0
  2395  00A0                     	ds	1
  2396  00A1                     loop@packet:	
  2397                           
  2398                           ; 33 bytes @ 0x1
  2399  00A1                     	ds	33
  2400  00C2                     main@pipe:	
  2401                           
  2402                           ; 1 bytes @ 0x22
  2403  00C2                     	ds	1
  2404  00C3                     main@packet:	
  2405                           
  2406                           ; 33 bytes @ 0x23
  2407  00C3                     	ds	33
  2408                           
  2409                           	psect	cstackCOMMON
  2410  0070                     __pcstackCOMMON:	
  2411  0070                     ?_nrf24l01ISR:	
  2412  0070                     ?_nrf24l01SetRXMode:	
  2413                           ; 1 bytes @ 0x0
  2414                           
  2415  0070                     ?_nrf24l01GetRXPacket:	
  2416                           ; 1 bytes @ 0x0
  2417                           
  2418  0070                     ?_nrf24l01SendPacket:	
  2419                           ; 1 bytes @ 0x0
  2420                           
  2421  0070                     ?_nrf24l01Init:	
  2422                           ; 1 bytes @ 0x0
  2423                           
  2424  0070                     ?_nrf24l01SetTXPipe:	
  2425                           ; 1 bytes @ 0x0
  2426                           
  2427  0070                     ?_nrf24l01SetRXPipe:	
  2428                           ; 1 bytes @ 0x0
  2429                           
  2430  0070                     ?_flashWriteByte:	
  2431                           ; 1 bytes @ 0x0
  2432                           
  2433  0070                     ?_flashRealod:	
  2434                           ; 1 bytes @ 0x0
  2435                           
  2436  0070                     ?_flashUpdate:	
  2437                           ; 1 bytes @ 0x0
  2438                           
  2439  0070                     ?_nrf24l01CELow:	
  2440                           ; 1 bytes @ 0x0
  2441                           
  2442  0070                     ??_nrf24l01CELow:	
  2443                           ; 1 bytes @ 0x0
  2444                           
  2445  0070                     ?_nrf24l01CEHigh:	
  2446                           ; 1 bytes @ 0x0
  2447                           
  2448  0070                     ??_nrf24l01CEHigh:	
  2449                           ; 1 bytes @ 0x0
  2450                           
  2451  0070                     ?_nrf24l01CSLow:	
  2452                           ; 1 bytes @ 0x0
  2453                           
  2454  0070                     ??_nrf24l01CSLow:	
  2455                           ; 1 bytes @ 0x0
  2456                           
  2457  0070                     ?_nrf24l01CSHigh:	
  2458                           ; 1 bytes @ 0x0
  2459                           
  2460  0070                     ??_nrf24l01CSHigh:	
  2461                           ; 1 bytes @ 0x0
  2462                           
  2463  0070                     ?_nrf24l01InterfaceInit:	
  2464                           ; 1 bytes @ 0x0
  2465                           
  2466  0070                     ?_nrf24l01SPISend:	
  2467                           ; 1 bytes @ 0x0
  2468                           
  2469  0070                     ??_nrf24l01SPISend:	
  2470                           ; 1 bytes @ 0x0
  2471                           
  2472  0070                     ?_nrf24l01SPIStart:	
  2473                           ; 1 bytes @ 0x0
  2474                           
  2475  0070                     ??_nrf24l01SPIStart:	
  2476                           ; 1 bytes @ 0x0
  2477                           
  2478  0070                     ?_nrf24l01SPIEnd:	
  2479                           ; 1 bytes @ 0x0
  2480                           
  2481  0070                     ??_nrf24l01SPIEnd:	
  2482                           ; 1 bytes @ 0x0
  2483                           
  2484  0070                     ?_enableInterrupts:	
  2485                           ; 1 bytes @ 0x0
  2486                           
  2487  0070                     ??_enableInterrupts:	
  2488                           ; 1 bytes @ 0x0
  2489                           
  2490  0070                     ?_exception:	
  2491                           ; 1 bytes @ 0x0
  2492                           
  2493  0070                     ?_ISR:	
  2494                           ; 1 bytes @ 0x0
  2495                           
  2496  0070                     ?_sleep:	
  2497                           ; 1 bytes @ 0x0
  2498                           
  2499  0070                     ?_checkTXPower:	
  2500                           ; 1 bytes @ 0x0
  2501                           
  2502  0070                     ?_loop:	
  2503                           ; 1 bytes @ 0x0
  2504                           
  2505  0070                     ?_nrf24l01GetPipe:	
  2506                           ; 1 bytes @ 0x0
  2507                           
  2508  0070                     ?_main:	
  2509                           ; 1 bytes @ 0x0
  2510                           
  2511  0070                     ?_nrf24l01CheckACK:	
  2512                           ; 1 bytes @ 0x0
  2513                           
  2514  0070                     ?_nrf24l01ReceivePacket:	
  2515                           ; 1 bytes @ 0x0
  2516                           
  2517  0070                     ?_nrf24l01InitRegisters:	
  2518                           ; 1 bytes @ 0x0
  2519                           
  2520  0070                     ?i1_nrf24l01SetRXMode:	
  2521                           ; 1 bytes @ 0x0
  2522                           
  2523  0070                     ?i1_memset:	
  2524                           ; 1 bytes @ 0x0
  2525                           
  2526  0070                     ?_strcmp:	
  2527                           ; 1 bytes @ 0x0
  2528                           
  2529  0070                     ?___wmul:	
  2530                           ; 2 bytes @ 0x0
  2531                           
  2532  0070                     nrf24l01SPISend@data:	
  2533                           ; 2 bytes @ 0x0
  2534                           
  2535  0070                     enableInterrupts@enable:	
  2536                           ; 1 bytes @ 0x0
  2537                           
  2538  0070                     strcmp@s2:	
  2539                           ; 1 bytes @ 0x0
  2540                           
  2541  0070                     flashWriteByte@offset:	
  2542                           ; 1 bytes @ 0x0
  2543                           
  2544  0070                     ___wmul@multiplier:	
  2545                           ; 2 bytes @ 0x0
  2546                           
  2547  0070                     i1memset@p1:	
  2548                           ; 2 bytes @ 0x0
  2549                           
  2550                           
  2551                           ; 2 bytes @ 0x0
  2552  0070                     	ds	1
  2553  0071                     ?i1_nrf24l01Send:	
  2554  0071                     i1nrf24l01Send@data:	
  2555                           ; 1 bytes @ 0x1
  2556                           
  2557                           
  2558                           ; 1 bytes @ 0x1
  2559  0071                     	ds	1
  2560  0072                     ??_strcmp:	
  2561  0072                     ??i1_nrf24l01Send:	
  2562                           ; 1 bytes @ 0x2
  2563                           
  2564  0072                     flashWriteByte@data:	
  2565                           ; 1 bytes @ 0x2
  2566                           
  2567  0072                     ___wmul@multiplicand:	
  2568                           ; 2 bytes @ 0x2
  2569                           
  2570  0072                     i1memset@c:	
  2571                           ; 2 bytes @ 0x2
  2572                           
  2573                           
  2574                           ; 2 bytes @ 0x2
  2575  0072                     	ds	1
  2576  0073                     strcmp@r:	
  2577  0073                     i1nrf24l01Send@command:	
  2578                           ; 1 bytes @ 0x3
  2579                           
  2580                           
  2581                           ; 1 bytes @ 0x3
  2582  0073                     	ds	1
  2583  0074                     ??_flashWriteByte:	
  2584  0074                     ??___wmul:	
  2585                           ; 1 bytes @ 0x4
  2586                           
  2587  0074                     ??i1_nrf24l01SetRXMode:	
  2588                           ; 1 bytes @ 0x4
  2589                           
  2590  0074                     strcmp@s1:	
  2591                           ; 1 bytes @ 0x4
  2592                           
  2593  0074                     flashWriteByte@address:	
  2594                           ; 1 bytes @ 0x4
  2595                           
  2596  0074                     ___wmul@product:	
  2597                           ; 2 bytes @ 0x4
  2598                           
  2599  0074                     i1memset@n:	
  2600                           ; 2 bytes @ 0x4
  2601                           
  2602                           
  2603                           ; 2 bytes @ 0x4
  2604  0074                     	ds	1
  2605  0075                     i1nrf24l01SetRXMode@config:	
  2606                           
  2607                           ; 1 bytes @ 0x5
  2608  0075                     	ds	1
  2609  0076                     ??_flashUpdate:	
  2610  0076                     ??i1_memset:	
  2611                           ; 1 bytes @ 0x6
  2612                           
  2613  0076                     i1nrf24l01SetRXMode@rxMode:	
  2614                           ; 1 bytes @ 0x6
  2615                           
  2616  0076                     i1memset@p:	
  2617                           ; 1 bytes @ 0x6
  2618                           
  2619                           
  2620                           ; 2 bytes @ 0x6
  2621  0076                     	ds	1
  2622  0077                     ??_nrf24l01CheckACK:	
  2623                           
  2624                           ; 1 bytes @ 0x7
  2625  0077                     	ds	1
  2626  0078                     ??_nrf24l01ReceivePacket:	
  2627  0078                     flashUpdate@i:	
  2628                           ; 1 bytes @ 0x8
  2629                           
  2630                           
  2631                           ; 2 bytes @ 0x8
  2632  0078                     	ds	1
  2633  0079                     nrf24l01ReceivePacket@width:	
  2634                           
  2635                           ; 1 bytes @ 0x9
  2636  0079                     	ds	1
  2637  007A                     ??_exception:	
  2638  007A                     nrf24l01ReceivePacket@i:	
  2639                           ; 1 bytes @ 0xA
  2640                           
  2641                           
  2642                           ; 1 bytes @ 0xA
  2643  007A                     	ds	2
  2644  007C                     exception@exception:	
  2645                           
  2646                           ; 1 bytes @ 0xC
  2647  007C                     	ds	1
  2648  007D                     ??_nrf24l01ISR:	
  2649                           
  2650                           ; 1 bytes @ 0xD
  2651  007D                     	ds	1
  2652  007E                     ??_ISR:	
  2653                           
  2654                           	psect	cstackBANK0
  2655  0020                     __pcstackBANK0:	
  2656                           ; 1 bytes @ 0xE
  2657                           
  2658  0020                     nrf24l01ISR@status:	
  2659                           
  2660                           ; 1 bytes @ 0x0
  2661  0020                     	ds	1
  2662  0021                     ?_strcat:	
  2663  0021                     ??_nrf24l01GetRXPacket:	
  2664                           ; 1 bytes @ 0x1
  2665                           
  2666  0021                     ?_nrf24l01Send:	
  2667                           ; 1 bytes @ 0x1
  2668                           
  2669  0021                     ?_strcpy:	
  2670                           ; 1 bytes @ 0x1
  2671                           
  2672  0021                     ??_nrf24l01InterfaceInit:	
  2673                           ; 1 bytes @ 0x1
  2674                           
  2675  0021                     ??_sleep:	
  2676                           ; 1 bytes @ 0x1
  2677                           
  2678  0021                     ?___bmul:	
  2679                           ; 1 bytes @ 0x1
  2680                           
  2681  0021                     ?_memset:	
  2682                           ; 1 bytes @ 0x1
  2683                           
  2684  0021                     ?_strlen:	
  2685                           ; 2 bytes @ 0x1
  2686                           
  2687  0021                     ?_flashReadByte:	
  2688                           ; 2 bytes @ 0x1
  2689                           
  2690  0021                     ?___lmul:	
  2691                           ; 2 bytes @ 0x1
  2692                           
  2693  0021                     ?___lldiv:	
  2694                           ; 4 bytes @ 0x1
  2695                           
  2696  0021                     ?___llmod:	
  2697                           ; 4 bytes @ 0x1
  2698                           
  2699  0021                     nrf24l01Send@data:	
  2700                           ; 4 bytes @ 0x1
  2701                           
  2702  0021                     ___bmul@multiplicand:	
  2703                           ; 1 bytes @ 0x1
  2704                           
  2705  0021                     flashReadByte@offset:	
  2706                           ; 1 bytes @ 0x1
  2707                           
  2708  0021                     memset@p1:	
  2709                           ; 2 bytes @ 0x1
  2710                           
  2711  0021                     strcat@from:	
  2712                           ; 2 bytes @ 0x1
  2713                           
  2714  0021                     strcpy@from:	
  2715                           ; 2 bytes @ 0x1
  2716                           
  2717  0021                     ___lmul@multiplier:	
  2718                           ; 2 bytes @ 0x1
  2719                           
  2720  0021                     ___lldiv@divisor:	
  2721                           ; 4 bytes @ 0x1
  2722                           
  2723  0021                     ___llmod@divisor:	
  2724                           ; 4 bytes @ 0x1
  2725                           
  2726                           
  2727                           ; 4 bytes @ 0x1
  2728  0021                     	ds	1
  2729  0022                     ??_nrf24l01Send:	
  2730  0022                     ??___bmul:	
  2731                           ; 1 bytes @ 0x2
  2732                           
  2733                           
  2734                           ; 1 bytes @ 0x2
  2735  0022                     	ds	1
  2736  0023                     ??_strcat:	
  2737  0023                     ??_strlen:	
  2738                           ; 1 bytes @ 0x3
  2739                           
  2740  0023                     ??_strcpy:	
  2741                           ; 1 bytes @ 0x3
  2742                           
  2743  0023                     ??_flashReadByte:	
  2744                           ; 1 bytes @ 0x3
  2745                           
  2746  0023                     nrf24l01Send@command:	
  2747                           ; 1 bytes @ 0x3
  2748                           
  2749  0023                     ___bmul@product:	
  2750                           ; 1 bytes @ 0x3
  2751                           
  2752  0023                     memset@c:	
  2753                           ; 1 bytes @ 0x3
  2754                           
  2755                           
  2756                           ; 2 bytes @ 0x3
  2757  0023                     	ds	1
  2758  0024                     ??_nrf24l01SetRXMode:	
  2759  0024                     ?_nrf24l01ChangeTXPower:	
  2760                           ; 1 bytes @ 0x4
  2761                           
  2762  0024                     ??_nrf24l01SetRXPipe:	
  2763                           ; 1 bytes @ 0x4
  2764                           
  2765  0024                     ___bmul@multiplier:	
  2766                           ; 1 bytes @ 0x4
  2767                           
  2768  0024                     strcat@cp:	
  2769                           ; 1 bytes @ 0x4
  2770                           
  2771  0024                     strcpy@to:	
  2772                           ; 1 bytes @ 0x4
  2773                           
  2774  0024                     nrf24l01ChangeTXPower@addPower:	
  2775                           ; 1 bytes @ 0x4
  2776                           
  2777                           
  2778                           ; 2 bytes @ 0x4
  2779  0024                     	ds	1
  2780  0025                     ??_nrf24l01SetTXPipe:	
  2781  0025                     nrf24l01SetRXMode@config:	
  2782                           ; 1 bytes @ 0x5
  2783                           
  2784  0025                     strcat@to:	
  2785                           ; 1 bytes @ 0x5
  2786                           
  2787  0025                     strcpy@cp:	
  2788                           ; 1 bytes @ 0x5
  2789                           
  2790  0025                     memset@n:	
  2791                           ; 1 bytes @ 0x5
  2792                           
  2793  0025                     ___lmul@multiplicand:	
  2794                           ; 2 bytes @ 0x5
  2795                           
  2796  0025                     ___lldiv@dividend:	
  2797                           ; 4 bytes @ 0x5
  2798                           
  2799  0025                     ___llmod@dividend:	
  2800                           ; 4 bytes @ 0x5
  2801                           
  2802                           
  2803                           ; 4 bytes @ 0x5
  2804  0025                     	ds	1
  2805  0026                     ??_nrf24l01ChangeTXPower:	
  2806  0026                     nrf24l01SetRXMode@rxMode:	
  2807                           ; 1 bytes @ 0x6
  2808                           
  2809  0026                     nrf24l01SetRXPipe@pipe:	
  2810                           ; 1 bytes @ 0x6
  2811                           
  2812  0026                     flashReadByte@result:	
  2813                           ; 1 bytes @ 0x6
  2814                           
  2815                           
  2816                           ; 2 bytes @ 0x6
  2817  0026                     	ds	1
  2818  0027                     ??_memset:	
  2819  0027                     nrf24l01ChangeTXPower@rfSetup:	
  2820                           ; 1 bytes @ 0x7
  2821                           
  2822  0027                     nrf24l01SetTXPipe@pipe:	
  2823                           ; 1 bytes @ 0x7
  2824                           
  2825  0027                     nrf24l01SetRXPipe@enRXAddr:	
  2826                           ; 1 bytes @ 0x7
  2827                           
  2828  0027                     strlen@cp:	
  2829                           ; 1 bytes @ 0x7
  2830                           
  2831  0027                     memset@p:	
  2832                           ; 1 bytes @ 0x7
  2833                           
  2834                           
  2835                           ; 2 bytes @ 0x7
  2836  0027                     	ds	1
  2837  0028                     ??_checkTXPower:	
  2838  0028                     ??_nrf24l01InitRegisters:	
  2839                           ; 1 bytes @ 0x8
  2840                           
  2841  0028                     strlen@s:	
  2842                           ; 1 bytes @ 0x8
  2843                           
  2844  0028                     flashReadByte@address:	
  2845                           ; 1 bytes @ 0x8
  2846                           
  2847                           
  2848                           ; 2 bytes @ 0x8
  2849  0028                     	ds	1
  2850  0029                     ??_nrf24l01SendPacket:	
  2851  0029                     ??___lmul:	
  2852                           ; 1 bytes @ 0x9
  2853                           
  2854  0029                     ??___lldiv:	
  2855                           ; 1 bytes @ 0x9
  2856                           
  2857  0029                     ??___llmod:	
  2858                           ; 1 bytes @ 0x9
  2859                           
  2860  0029                     checkTXPower@rxPacket:	
  2861                           ; 1 bytes @ 0x9
  2862                           
  2863  0029                     ___lmul@product:	
  2864                           ; 1 bytes @ 0x9
  2865                           
  2866                           
  2867                           ; 4 bytes @ 0x9
  2868  0029                     	ds	1
  2869  002A                     ??_flashRealod:	
  2870  002A                     nrf24l01InitRegisters@channel:	
  2871                           ; 1 bytes @ 0xA
  2872                           
  2873  002A                     ___llmod@counter:	
  2874                           ; 1 bytes @ 0xA
  2875                           
  2876  002A                     ___lldiv@quotient:	
  2877                           ; 1 bytes @ 0xA
  2878                           
  2879                           
  2880                           ; 4 bytes @ 0xA
  2881  002A                     	ds	1
  2882  002B                     ??_nrf24l01GetPipe:	
  2883  002B                     nrf24l01SendPacket@Packet:	
  2884                           ; 1 bytes @ 0xB
  2885                           
  2886  002B                     nrf24l01InitRegisters@setupAW:	
  2887                           ; 1 bytes @ 0xB
  2888                           
  2889  002B                     flashRealod@i:	
  2890                           ; 1 bytes @ 0xB
  2891                           
  2892                           
  2893                           ; 2 bytes @ 0xB
  2894  002B                     	ds	1
  2895  002C                     nrf24l01SendPacket@i:	
  2896  002C                     nrf24l01InitRegisters@feature:	
  2897                           ; 1 bytes @ 0xC
  2898                           
  2899                           
  2900                           ; 1 bytes @ 0xC
  2901  002C                     	ds	1
  2902  002D                     nrf24l01InitRegisters@rfSetup:	
  2903                           
  2904                           ; 1 bytes @ 0xD
  2905  002D                     	ds	1
  2906  002E                     nrf24l01InitRegisters@status:	
  2907  002E                     ___lldiv@counter:	
  2908                           ; 1 bytes @ 0xE
  2909                           
  2910                           
  2911                           ; 1 bytes @ 0xE
  2912  002E                     	ds	1
  2913  002F                     ?_ultoa:	
  2914  002F                     ?_getADCValue:	
  2915                           ; 1 bytes @ 0xF
  2916                           
  2917  002F                     nrf24l01InitRegisters@enAA:	
  2918                           ; 4 bytes @ 0xF
  2919                           
  2920  002F                     getADCValue@divider:	
  2921                           ; 1 bytes @ 0xF
  2922                           
  2923  002F                     ultoa@val:	
  2924                           ; 4 bytes @ 0xF
  2925                           
  2926                           
  2927                           ; 4 bytes @ 0xF
  2928  002F                     	ds	1
  2929  0030                     nrf24l01InitRegisters@DynPD:	
  2930  0030                     nrf24l01GetPipe@pipe:	
  2931                           ; 1 bytes @ 0x10
  2932                           
  2933                           
  2934                           ; 4 bytes @ 0x10
  2935  0030                     	ds	1
  2936  0031                     nrf24l01InitRegisters@config:	
  2937                           
  2938                           ; 1 bytes @ 0x11
  2939  0031                     	ds	1
  2940  0032                     nrf24l01InitRegisters@i:	
  2941                           
  2942                           ; 2 bytes @ 0x12
  2943  0032                     	ds	1
  2944  0033                     ??_getADCValue:	
  2945  0033                     ultoa@base:	
  2946                           ; 1 bytes @ 0x13
  2947                           
  2948                           
  2949                           ; 2 bytes @ 0x13
  2950  0033                     	ds	1
  2951  0034                     ??_nrf24l01Init:	
  2952  0034                     nrf24l01GetPipe@name:	
  2953                           ; 1 bytes @ 0x14
  2954                           
  2955                           
  2956                           ; 1 bytes @ 0x14
  2957  0034                     	ds	1
  2958  0035                     ??_ultoa:	
  2959  0035                     nrf24l01GetPipe@i:	
  2960                           ; 1 bytes @ 0x15
  2961                           
  2962                           
  2963                           ; 1 bytes @ 0x15
  2964  0035                     	ds	1
  2965  0036                     ultoa@v:	
  2966                           
  2967                           ; 4 bytes @ 0x16
  2968  0036                     	ds	1
  2969  0037                     getADCValue@channel:	
  2970                           
  2971                           ; 1 bytes @ 0x17
  2972  0037                     	ds	1
  2973  0038                     getADCValue@adcLoop:	
  2974                           
  2975                           ; 1 bytes @ 0x18
  2976  0038                     	ds	1
  2977  0039                     getADCValue@adcSum:	
  2978                           
  2979                           ; 4 bytes @ 0x19
  2980  0039                     	ds	1
  2981  003A                     ultoa@c:	
  2982                           
  2983                           ; 1 bytes @ 0x1A
  2984  003A                     	ds	1
  2985  003B                     ultoa@buf:	
  2986                           
  2987                           ; 1 bytes @ 0x1B
  2988  003B                     	ds	2
  2989  003D                     ?_setMessage:	
  2990  003D                     setMessage@topic:	
  2991                           ; 1 bytes @ 0x1D
  2992                           
  2993                           
  2994                           ; 2 bytes @ 0x1D
  2995  003D                     	ds	2
  2996  003F                     setMessage@value:	
  2997                           
  2998                           ; 4 bytes @ 0x1F
  2999  003F                     	ds	4
  3000  0043                     ??_setMessage:	
  3001  0043                     setMessage@tempString:	
  3002                           ; 1 bytes @ 0x23
  3003                           
  3004                           
  3005                           ; 16 bytes @ 0x23
  3006  0043                     	ds	16
  3007  0053                     setMessage@packet:	
  3008                           
  3009                           ; 1 bytes @ 0x33
  3010  0053                     	ds	1
  3011  0054                     ??_loop:	
  3012                           
  3013                           ; 1 bytes @ 0x34
  3014  0054                     	ds	4
  3015  0058                     ??_main:	
  3016                           
  3017                           ; 1 bytes @ 0x38
  3018  0058                     	ds	1
  3019                           
  3020                           	psect	maintext
  3021  02F2                     __pmaintext:	
  3022 ;;
  3023 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3024 ;;
  3025 ;; *************** function _main *****************
  3026 ;; Defined at:
  3027 ;;		line 170 in file "main.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;		None
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;  packet         33   35[BANK1 ] struct .
  3032 ;;  pipe            1   34[BANK1 ] unsigned char 
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      void 
  3035 ;; Registers used:
  3036 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3037 ;; Tracked objects:
  3038 ;;		On entry : B1F/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3043 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3044 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3045 ;;      Totals:         0       1      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3046 ;;Total ram usage:       35 bytes
  3047 ;; Hardware stack levels required when called:   13
  3048 ;; This function calls:
  3049 ;;		_flashRealod
  3050 ;;		_loop
  3051 ;;		_nrf24l01GetPipe
  3052 ;;		_nrf24l01Init
  3053 ;;		_nrf24l01SendPacket
  3054 ;;		_nrf24l01SetRXPipe
  3055 ;;		_nrf24l01SetTXPipe
  3056 ;;		_setMessage
  3057 ;;		_sleep
  3058 ;;		_strcpy
  3059 ;; This function is called by:
  3060 ;;		Startup code after reset
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           
  3065                           ;psect for function _main
  3066  02F2                     _main:	
  3067                           
  3068                           ;main.c: 173: ANSELA = 0x00;
  3069                           
  3070                           ;incstack = 0
  3071                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3072  02F2  0023               	movlb	3	; select bank3
  3073  02F3  018C               	clrf	12	;volatile
  3074                           
  3075                           ;main.c: 174: ANSELC = 0x00;
  3076  02F4  018E               	clrf	14	;volatile
  3077                           
  3078                           ;main.c: 176: ODCONA = 0x00;
  3079  02F5  0025               	movlb	5	; select bank5
  3080  02F6  018C               	clrf	12	;volatile
  3081                           
  3082                           ;main.c: 177: ODCONC = 0x00;
  3083  02F7  018E               	clrf	14	;volatile
  3084                           
  3085                           ;main.c: 182: INLVLA = 0x00;
  3086  02F8  0027               	movlb	7	; select bank7
  3087  02F9  018C               	clrf	12	;volatile
  3088                           
  3089                           ;main.c: 183: INLVLC = 0x00;
  3090  02FA  018E               	clrf	14	;volatile
  3091                           
  3092                           ;main.c: 185: WPUA = 0x00;
  3093  02FB  0024               	movlb	4	; select bank4
  3094  02FC  018C               	clrf	12	;volatile
  3095                           
  3096                           ;main.c: 186: WPUC = 0x00;
  3097  02FD  018E               	clrf	14	;volatile
  3098                           
  3099                           ;main.c: 188: TRISCbits.TRISC5 = 0;
  3100  02FE  0021               	movlb	1	; select bank1
  3101  02FF  128E               	bcf	14,5	;volatile
  3102                           
  3103                           ;main.c: 189: TRISCbits.TRISC4 = 0;
  3104  0300  120E               	bcf	14,4	;volatile
  3105                           
  3106                           ;main.c: 191: PORTCbits.RC4 = 0;
  3107  0301  0020               	movlb	0	; select bank0
  3108  0302  120E               	bcf	14,4	;volatile
  3109                           
  3110                           ;main.c: 198: INTCONbits.PEIE = 0;
  3111  0303  130B               	bcf	11,6	;volatile
  3112                           
  3113                           ;main.c: 199: INTCONbits.GIE = 0;
  3114  0304  138B               	bcf	11,7	;volatile
  3115                           
  3116                           ;main.c: 201: OSCCON1bits.NOSC = 0b000;
  3117  0305  308F               	movlw	-113
  3118  0306  0032               	movlb	18	; select bank18
  3119  0307  0599               	andwf	25,f	;volatile
  3120                           
  3121                           ;main.c: 202: OSCCON1bits.NDIV = 0b000;
  3122  0308  30F0               	movlw	-16
  3123  0309  0599               	andwf	25,f	;volatile
  3124                           
  3125                           ;main.c: 204: _delay((unsigned long)((10)*(16000000/4000.0)));
  3126  030A  3034               	movlw	52
  3127  030B  0020               	movlb	0	; select bank0
  3128  030C  00D8               	movwf	??_main
  3129  030D  30F1               	movlw	241
  3130  030E                     u1687:	
  3131  030E  0B89               	decfsz	9,f
  3132  030F  2B0E               	goto	u1687
  3133  0310  0BD8               	decfsz	??_main,f
  3134  0311  2B0E               	goto	u1687
  3135  0312  3200               	nop2
  3136                           
  3137                           ;main.c: 216: strcpy(romData.name, "UH1");
  3138  0313  3032               	movlw	low (STR_9| (0+32768))
  3139  0314  0020               	movlb	0	; select bank0
  3140  0315  00A1               	movwf	strcpy@from
  3141  0316  3090               	movlw	high (STR_9| (0+32768))
  3142  0317  00A2               	movwf	strcpy@from+1
  3143  0318  305D               	movlw	(low ((_romData| 0+1)))& (0+255)
  3144  0319  318E  2690  3182   	fcall	_strcpy
  3145                           
  3146                           ;main.c: 218: flashRealod();
  3147  031C  318E  26E7  3182   	fcall	_flashRealod
  3148                           
  3149                           ;main.c: 220: nrf24l01Init();
  3150  031F  318F  27DA  3182   	fcall	_nrf24l01Init
  3151                           
  3152                           ;main.c: 222: unsigned char pipe = nrf24l01GetPipe(romData.name);
  3153  0322  305D               	movlw	(low ((_romData| 0+1)))& (0+255)
  3154  0323  3185  2535  3182   	fcall	_nrf24l01GetPipe
  3155  0326  0020               	movlb	0	; select bank0
  3156  0327  00D8               	movwf	??_main
  3157  0328  0858               	movf	??_main,w
  3158  0329  0021               	movlb	1	; select bank1
  3159  032A  00C2               	movwf	main@pipe^(0+128)
  3160                           
  3161                           ;main.c: 223: nrf24l01SetTXPipe(4);
  3162  032B  3004               	movlw	4
  3163  032C  3186  2620  3182   	fcall	_nrf24l01SetTXPipe
  3164                           
  3165                           ;main.c: 224: nrf24l01SetRXPipe(4);
  3166  032F  3004               	movlw	4
  3167  0330  318F  2748  3182   	fcall	_nrf24l01SetRXPipe
  3168                           
  3169                           ;main.c: 228: ADCON0bits.ADON = 0;
  3170  0333  0021               	movlb	1	; select bank1
  3171  0334  101D               	bcf	29,0	;volatile
  3172                           
  3173                           ;main.c: 231: ANSELAbits.ANSA4 = 1;
  3174  0335  0023               	movlb	3	; select bank3
  3175  0336  160C               	bsf	12,4	;volatile
  3176                           
  3177                           ;main.c: 232: TRISAbits.TRISA4 = 1;
  3178  0337  0021               	movlb	1	; select bank1
  3179  0338  160C               	bsf	12,4	;volatile
  3180                           
  3181                           ;main.c: 233: WPUAbits.WPUA4 = 0;
  3182  0339  0024               	movlb	4	; select bank4
  3183  033A  120C               	bcf	12,4	;volatile
  3184                           
  3185                           ;main.c: 236: ANSELCbits.ANSC3 = 1;
  3186  033B  0023               	movlb	3	; select bank3
  3187  033C  158E               	bsf	14,3	;volatile
  3188                           
  3189                           ;main.c: 237: TRISCbits.TRISC3 = 1;
  3190  033D  0021               	movlb	1	; select bank1
  3191  033E  158E               	bsf	14,3	;volatile
  3192                           
  3193                           ;main.c: 240: FVRCONbits.TSEN = 0;
  3194  033F  0022               	movlb	2	; select bank2
  3195  0340  1297               	bcf	23,5	;volatile
  3196                           
  3197                           ;main.c: 241: FVRCONbits.TSRNG = 0;
  3198  0341  1217               	bcf	23,4	;volatile
  3199                           
  3200                           ;main.c: 242: FVRCONbits.TSEN = 1;
  3201  0342  1697               	bsf	23,5	;volatile
  3202                           
  3203                           ;main.c: 245: FVRCONbits.FVREN = 0;
  3204  0343  1397               	bcf	23,7	;volatile
  3205                           
  3206                           ;main.c: 246: FVRCONbits.ADFVR = 1;
  3207  0344  0817               	movf	23,w	;volatile
  3208  0345  39FC               	andlw	-4
  3209  0346  3801               	iorlw	1
  3210  0347  0097               	movwf	23	;volatile
  3211                           
  3212                           ;main.c: 247: FVRCONbits.FVREN = 1;
  3213  0348  1797               	bsf	23,7	;volatile
  3214                           
  3215                           ;main.c: 249: ADCON1bits.ADCS = 0b111;
  3216  0349  3070               	movlw	112
  3217  034A  0021               	movlb	1	; select bank1
  3218  034B  049E               	iorwf	30,f	;volatile
  3219                           
  3220                           ;main.c: 250: ADCON1bits.ADFM = 1;
  3221  034C  179E               	bsf	30,7	;volatile
  3222                           
  3223                           ;main.c: 251: ADCON1bits.ADNREF = 0b0;
  3224  034D  111E               	bcf	30,2	;volatile
  3225                           
  3226                           ;main.c: 252: ADCON1bits.ADPREF = 0b00;
  3227  034E  30FC               	movlw	-4
  3228  034F  059E               	andwf	30,f	;volatile
  3229                           
  3230                           ;main.c: 254: ADCON0bits.CHS = 3;
  3231  0350  081D               	movf	29,w	;volatile
  3232  0351  3903               	andlw	-253
  3233  0352  380C               	iorlw	12
  3234  0353  009D               	movwf	29	;volatile
  3235                           
  3236                           ;main.c: 255: ADCON0bits.ADON = 1;
  3237  0354  141D               	bsf	29,0	;volatile
  3238                           
  3239                           ;main.c: 260: TRISAbits.TRISA2 = 1;
  3240  0355  150C               	bsf	12,2	;volatile
  3241                           
  3242                           ;main.c: 261: PIE0bits.INTE = 1;
  3243  0356  1410               	bsf	16,0	;volatile
  3244                           
  3245                           ;main.c: 262: INTCONbits.INTEDG = 0;
  3246  0357  100B               	bcf	11,0	;volatile
  3247                           
  3248                           ;main.c: 266: WDTCONbits.WDTPS = 11;
  3249  0358  0817               	movf	23,w	;volatile
  3250  0359  39C1               	andlw	-63
  3251  035A  3816               	iorlw	22
  3252  035B  0097               	movwf	23	;volatile
  3253                           
  3254                           ;main.c: 269: TRISAbits.TRISA5 = 0;
  3255  035C  128C               	bcf	12,5	;volatile
  3256                           
  3257                           ;main.c: 270: PORTAbits.RA5 = 0;
  3258  035D  0020               	movlb	0	; select bank0
  3259  035E  128C               	bcf	12,5	;volatile
  3260                           
  3261                           ;main.c: 273: INTCONbits.PEIE = 1;
  3262  035F  170B               	bsf	11,6	;volatile
  3263                           
  3264                           ;main.c: 274: INTCONbits.GIE = 1;
  3265  0360  178B               	bsf	11,7	;volatile
  3266                           
  3267                           ;main.c: 276: nrf24l01Packet_t packet;;main.c: 278: setMessage(&packet, "BOOT", romData.
      +                          bootMode);
  3268  0361  302D               	movlw	low (STR_10| (0+32768))
  3269  0362  00BD               	movwf	setMessage@topic
  3270  0363  3090               	movlw	high (STR_10| (0+32768))
  3271  0364  00BE               	movwf	setMessage@topic+1
  3272  0365  086D               	movf	_romData+17,w
  3273  0366  00BF               	movwf	setMessage@value
  3274  0367  086E               	movf	_romData+18,w
  3275  0368  00C0               	movwf	setMessage@value+1
  3276  0369  01C1               	clrf	setMessage@value+2
  3277  036A  01C2               	clrf	setMessage@value+3
  3278  036B  30C3               	movlw	(low (main@packet| 0))& (0+255)
  3279  036C  3184  248E  3182   	fcall	_setMessage
  3280                           
  3281                           ;main.c: 279: packet.packetData.byte = 0;
  3282  036F  0021               	movlb	1	; select bank1
  3283  0370  01C3               	clrf	main@packet^(0+128)
  3284                           
  3285                           ;main.c: 280: packet.packetData.ACKRequest = 0;
  3286  0371  1143               	bcf	main@packet^(0+128),2
  3287                           
  3288                           ;main.c: 281: nrf24l01SendPacket(&packet);
  3289  0372  30C3               	movlw	(low (main@packet| 0))& (0+255)
  3290  0373  3182  2243  3182   	fcall	_nrf24l01SendPacket
  3291                           
  3292                           ;main.c: 282: sleep();
  3293  0376  318D  25ED  3182   	fcall	_sleep
  3294  0379                     l3090:	
  3295                           ;main.c: 284: while(1){
  3296                           
  3297                           
  3298                           ;main.c: 285: loop();
  3299  0379  3180  2029  3182   	fcall	_loop
  3300  037C  2B79               	goto	l3090
  3301  037D                     __end_of_main:	
  3302                           ;main.c: 286: };main.c: 288: return;
  3303                           
  3304                           
  3305                           	psect	text1
  3306  0E90                     __ptext1:	
  3307 ;; *************** function _strcpy *****************
  3308 ;; Defined at:
  3309 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  3310 ;; Parameters:    Size  Location     Type
  3311 ;;  to              1    wreg     PTR unsigned char 
  3312 ;;		 -> romData(19), 
  3313 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  3314 ;;		 -> STR_9(4), 
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;  to              1    4[BANK0 ] PTR unsigned char 
  3317 ;;		 -> romData(19), 
  3318 ;;  cp              1    5[BANK0 ] PTR unsigned char 
  3319 ;;		 -> romData(19), 
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  1    wreg      PTR unsigned char 
  3322 ;; Registers used:
  3323 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3329 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3330 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3331 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3332 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3333 ;;Total ram usage:        5 bytes
  3334 ;; Hardware stack levels used:    1
  3335 ;; Hardware stack levels required when called:    7
  3336 ;; This function calls:
  3337 ;;		Nothing
  3338 ;; This function is called by:
  3339 ;;		_main
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343                           
  3344                           ;psect for function _strcpy
  3345  0E90                     _strcpy:	
  3346                           
  3347                           ;incstack = 0
  3348                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3349                           ;strcpy@to stored from wreg
  3350  0E90  0020               	movlb	0	; select bank0
  3351  0E91  00A4               	movwf	strcpy@to
  3352  0E92  0824               	movf	strcpy@to,w
  3353  0E93  00A3               	movwf	??_strcpy
  3354  0E94  0823               	movf	??_strcpy,w
  3355  0E95  00A5               	movwf	strcpy@cp
  3356  0E96                     l2702:	
  3357  0E96  0825               	movf	strcpy@cp,w
  3358  0E97  0086               	movwf	6
  3359  0E98  0187               	clrf	7
  3360  0E99  0821               	movf	strcpy@from,w
  3361  0E9A  0084               	movwf	4
  3362  0E9B  0822               	movf	strcpy@from+1,w
  3363  0E9C  0085               	movwf	5
  3364  0E9D  0800               	movf	0,w	;code access
  3365  0E9E  3FC0               	movwi [0]fsr1
  3366  0E9F  0889               	movf	9,f
  3367  0EA0  1903               	btfsc	3,2
  3368  0EA1  0008               	return
  3369  0EA2  3001               	movlw	1
  3370  0EA3  00A3               	movwf	??_strcpy
  3371  0EA4  0823               	movf	??_strcpy,w
  3372  0EA5  07A5               	addwf	strcpy@cp,f
  3373  0EA6  3001               	movlw	1
  3374  0EA7  07A1               	addwf	strcpy@from,f
  3375  0EA8  3000               	movlw	0
  3376  0EA9  3DA2               	addwfc	strcpy@from+1,f
  3377  0EAA  2E96               	goto	l2702
  3378  0EAB                     __end_of_strcpy:	
  3379                           ;	Return value of _strcpy is never used
  3380                           
  3381                           
  3382                           	psect	text2
  3383  0FDA                     __ptext2:	
  3384 ;; *************** function _nrf24l01Init *****************
  3385 ;; Defined at:
  3386 ;;		line 444 in file "nrf24l01.c"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;		None
  3389 ;; Auto vars:     Size  Location     Type
  3390 ;;		None
  3391 ;; Return value:  Size  Location     Type
  3392 ;;                  1    wreg      void 
  3393 ;; Registers used:
  3394 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3395 ;; Tracked objects:
  3396 ;;		On entry : 0/0
  3397 ;;		On exit  : 0/0
  3398 ;;		Unchanged: 0/0
  3399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3402 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3403 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3404 ;;Total ram usage:        2 bytes
  3405 ;; Hardware stack levels used:    1
  3406 ;; Hardware stack levels required when called:   12
  3407 ;; This function calls:
  3408 ;;		_nrf24l01CEHigh
  3409 ;;		_nrf24l01CELow
  3410 ;;		_nrf24l01InitRegisters
  3411 ;;		_nrf24l01InterfaceInit
  3412 ;; This function is called by:
  3413 ;;		_main
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           
  3418                           ;psect for function _nrf24l01Init
  3419  0FDA                     _nrf24l01Init:	
  3420                           
  3421                           ;nrf24l01.c: 447: nrf24l01InterfaceInit();
  3422                           
  3423                           ;incstack = 0
  3424                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3425  0FDA  318E  26AB  318F   	fcall	_nrf24l01InterfaceInit
  3426                           
  3427                           ;nrf24l01.c: 452: nrf24l01CELow();
  3428  0FDD  318D  25BA  318F   	fcall	_nrf24l01CELow
  3429                           
  3430                           ;nrf24l01.c: 454: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3431  0FE0  3002               	movlw	2
  3432  0FE1  0020               	movlb	0	; select bank0
  3433  0FE2  00B5               	movwf	??_nrf24l01Init+1
  3434  0FE3  3004               	movlw	4
  3435  0FE4  00B4               	movwf	??_nrf24l01Init
  3436  0FE5  30BA               	movlw	186
  3437  0FE6                     u1697:	
  3438  0FE6  0B89               	decfsz	9,f
  3439  0FE7  2FE6               	goto	u1697
  3440  0FE8  0BB4               	decfsz	??_nrf24l01Init,f
  3441  0FE9  2FE6               	goto	u1697
  3442  0FEA  0BB5               	decfsz	??_nrf24l01Init+1,f
  3443  0FEB  2FE6               	goto	u1697
  3444  0FEC  0000               	nop
  3445                           
  3446                           ;nrf24l01.c: 456: nrf24l01InitRegisters();
  3447  0FED  3181  213D  318F   	fcall	_nrf24l01InitRegisters
  3448                           
  3449                           ;nrf24l01.c: 458: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3450  0FF0  3002               	movlw	2
  3451  0FF1  0020               	movlb	0	; select bank0
  3452  0FF2  00B5               	movwf	??_nrf24l01Init+1
  3453  0FF3  3004               	movlw	4
  3454  0FF4  00B4               	movwf	??_nrf24l01Init
  3455  0FF5  30BA               	movlw	186
  3456  0FF6                     u1707:	
  3457  0FF6  0B89               	decfsz	9,f
  3458  0FF7  2FF6               	goto	u1707
  3459  0FF8  0BB4               	decfsz	??_nrf24l01Init,f
  3460  0FF9  2FF6               	goto	u1707
  3461  0FFA  0BB5               	decfsz	??_nrf24l01Init+1,f
  3462  0FFB  2FF6               	goto	u1707
  3463  0FFC  0000               	nop
  3464                           
  3465                           ;nrf24l01.c: 460: nrf24l01CEHigh();
  3466  0FFD  318D  25B7         	fcall	_nrf24l01CEHigh
  3467  0FFF  0008               	return
  3468  1000                     __end_of_nrf24l01Init:	
  3469                           
  3470                           	psect	text3
  3471  0EAB                     __ptext3:	
  3472 ;; *************** function _nrf24l01InterfaceInit *****************
  3473 ;; Defined at:
  3474 ;;		line 28 in file "interface.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;		None
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;		None
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      void 
  3481 ;; Registers used:
  3482 ;;		wreg, status,2, status,0
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3492 ;;Total ram usage:        0 bytes
  3493 ;; Hardware stack levels used:    1
  3494 ;; Hardware stack levels required when called:    7
  3495 ;; This function calls:
  3496 ;;		Nothing
  3497 ;; This function is called by:
  3498 ;;		_nrf24l01Init
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           
  3503                           ;psect for function _nrf24l01InterfaceInit
  3504  0EAB                     _nrf24l01InterfaceInit:	
  3505                           
  3506                           ;interface.c: 30: TRISAbits.TRISA0 = 0;
  3507                           
  3508                           ;incstack = 0
  3509                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3510  0EAB  0021               	movlb	1	; select bank1
  3511  0EAC  100C               	bcf	12,0	;volatile
  3512                           
  3513                           ;interface.c: 31: TRISAbits.TRISA1 = 0;
  3514  0EAD  108C               	bcf	12,1	;volatile
  3515                           
  3516                           ;interface.c: 33: TRISCbits.TRISC1 = 1;
  3517  0EAE  148E               	bsf	14,1	;volatile
  3518                           
  3519                           ;interface.c: 34: TRISCbits.TRISC2 = 0;
  3520  0EAF  110E               	bcf	14,2	;volatile
  3521                           
  3522                           ;interface.c: 35: TRISCbits.TRISC0 = 0;
  3523  0EB0  100E               	bcf	14,0	;volatile
  3524                           
  3525                           ;interface.c: 37: SSP1CON1bits.SSPEN = 0;
  3526  0EB1  0024               	movlb	4	; select bank4
  3527  0EB2  1295               	bcf	21,5	;volatile
  3528                           
  3529                           ;interface.c: 39: RC1PPSbits.RC1PPS = 0b10001;
  3530  0EB3  003D               	movlb	29	; select bank29
  3531  0EB4  0821               	movf	33,w	;volatile
  3532  0EB5  39E0               	andlw	-32
  3533  0EB6  3811               	iorlw	17
  3534  0EB7  00A1               	movwf	33	;volatile
  3535                           
  3536                           ;interface.c: 40: RC2PPSbits.RC2PPS = 0b11001;
  3537  0EB8  0822               	movf	34,w	;volatile
  3538  0EB9  39E0               	andlw	-32
  3539  0EBA  3819               	iorlw	25
  3540  0EBB  00A2               	movwf	34	;volatile
  3541                           
  3542                           ;interface.c: 41: RC0PPSbits.RC0PPS = 0b11000;
  3543  0EBC  0820               	movf	32,w	;volatile
  3544  0EBD  39E0               	andlw	-32
  3545  0EBE  3818               	iorlw	24
  3546  0EBF  00A0               	movwf	32	;volatile
  3547                           
  3548                           ;interface.c: 43: SSP1CON1bits.CKP = 0;
  3549  0EC0  0024               	movlb	4	; select bank4
  3550  0EC1  1215               	bcf	21,4	;volatile
  3551                           
  3552                           ;interface.c: 44: SSP1STATbits.CKE = 1;
  3553  0EC2  1714               	bsf	20,6	;volatile
  3554                           
  3555                           ;interface.c: 45: SSP1CON1bits.SSPM = 0b0000;
  3556  0EC3  30F0               	movlw	-16
  3557  0EC4  0595               	andwf	21,f	;volatile
  3558                           
  3559                           ;interface.c: 47: SSP1CON1bits.SSPEN = 1;
  3560  0EC5  1695               	bsf	21,5	;volatile
  3561  0EC6  0008               	return
  3562  0EC7                     __end_of_nrf24l01InterfaceInit:	
  3563                           
  3564                           	psect	text4
  3565  013D                     __ptext4:	
  3566 ;; *************** function _nrf24l01InitRegisters *****************
  3567 ;; Defined at:
  3568 ;;		line 343 in file "nrf24l01.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;		None
  3571 ;; Auto vars:     Size  Location     Type
  3572 ;;  i               2   18[BANK0 ] unsigned int 
  3573 ;;  config          1   17[BANK0 ] struct .
  3574 ;;  DynPD           1   16[BANK0 ] struct .
  3575 ;;  enAA            1   15[BANK0 ] struct .
  3576 ;;  status          1   14[BANK0 ] struct .
  3577 ;;  rfSetup         1   13[BANK0 ] struct .
  3578 ;;  feature         1   12[BANK0 ] struct .
  3579 ;;  setupAW         1   11[BANK0 ] struct .
  3580 ;;  channel         1   10[BANK0 ] struct .
  3581 ;; Return value:  Size  Location     Type
  3582 ;;                  1    wreg      void 
  3583 ;; Registers used:
  3584 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3585 ;; Tracked objects:
  3586 ;;		On entry : 0/0
  3587 ;;		On exit  : 0/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3591 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3592 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3593 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3594 ;;Total ram usage:       12 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; Hardware stack levels required when called:   11
  3597 ;; This function calls:
  3598 ;;		___bmul
  3599 ;;		_nrf24l01SPIEnd
  3600 ;;		_nrf24l01SPISend
  3601 ;;		_nrf24l01SPIStart
  3602 ;;		_nrf24l01Send
  3603 ;;		_nrf24l01SetRXPipe
  3604 ;;		_nrf24l01SetTXPipe
  3605 ;; This function is called by:
  3606 ;;		_nrf24l01Init
  3607 ;; This function uses a non-reentrant model
  3608 ;;
  3609                           
  3610                           
  3611                           ;psect for function _nrf24l01InitRegisters
  3612  013D                     _nrf24l01InitRegisters:	
  3613                           
  3614                           ;nrf24l01.c: 345: n_CONFIG_t config;;nrf24l01.c: 347: config.PWR_UP = 0;
  3615                           
  3616                           ;incstack = 0
  3617                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3618  013D  0020               	movlb	0	; select bank0
  3619  013E  10B1               	bcf	nrf24l01InitRegisters@config,1
  3620                           
  3621                           ;nrf24l01.c: 348: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3622  013F  0831               	movf	nrf24l01InitRegisters@config,w
  3623  0140  00A8               	movwf	??_nrf24l01InitRegisters
  3624  0141  0828               	movf	??_nrf24l01InitRegisters,w
  3625  0142  00A1               	movwf	nrf24l01Send@data
  3626  0143  3020               	movlw	32
  3627  0144  318F  2707  3181   	fcall	_nrf24l01Send
  3628                           
  3629                           ;nrf24l01.c: 350: n_SETUP_AW_t setupAW;;nrf24l01.c: 351: setupAW.byte = 0x00;
  3630  0147  0020               	movlb	0	; select bank0
  3631  0148  01AB               	clrf	nrf24l01InitRegisters@setupAW
  3632                           
  3633                           ;nrf24l01.c: 352: setupAW.AW = 0b11;
  3634  0149  3003               	movlw	3
  3635  014A  04AB               	iorwf	nrf24l01InitRegisters@setupAW,f
  3636                           
  3637                           ;nrf24l01.c: 353: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x02, setupAW.byte);
  3638  014B  082B               	movf	nrf24l01InitRegisters@setupAW,w
  3639  014C  00A8               	movwf	??_nrf24l01InitRegisters
  3640  014D  0828               	movf	??_nrf24l01InitRegisters,w
  3641  014E  00A1               	movwf	nrf24l01Send@data
  3642  014F  3022               	movlw	34
  3643  0150  318F  2707  3181   	fcall	_nrf24l01Send
  3644                           
  3645                           ;nrf24l01.c: 356: n_RF_CH_t channel;;nrf24l01.c: 357: channel.RF_CH = 2;
  3646  0153  0020               	movlb	0	; select bank0
  3647  0154  082A               	movf	nrf24l01InitRegisters@channel,w
  3648  0155  3980               	andlw	-128
  3649  0156  3802               	iorlw	2
  3650  0157  00AA               	movwf	nrf24l01InitRegisters@channel
  3651                           
  3652                           ;nrf24l01.c: 358: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3653  0158  082A               	movf	nrf24l01InitRegisters@channel,w
  3654  0159  00A8               	movwf	??_nrf24l01InitRegisters
  3655  015A  0828               	movf	??_nrf24l01InitRegisters,w
  3656  015B  00A1               	movwf	nrf24l01Send@data
  3657  015C  3025               	movlw	37
  3658  015D  318F  2707  3181   	fcall	_nrf24l01Send
  3659                           
  3660                           ;nrf24l01.c: 361: n_RF_SETUP_t rfSetup;;nrf24l01.c: 362: rfSetup.byte = 0x00;
  3661  0160  0020               	movlb	0	; select bank0
  3662  0161  01AD               	clrf	nrf24l01InitRegisters@rfSetup
  3663                           
  3664                           ;nrf24l01.c: 363: rfSetup.RF_DR_LOW = 0;
  3665  0162  12AD               	bcf	nrf24l01InitRegisters@rfSetup,5
  3666                           
  3667                           ;nrf24l01.c: 364: rfSetup.RF_DR_HIGH = 1;
  3668  0163  15AD               	bsf	nrf24l01InitRegisters@rfSetup,3
  3669                           
  3670                           ;nrf24l01.c: 365: rfSetup.RF_PWR = 3;
  3671  0164  3006               	movlw	6
  3672  0165  04AD               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3673                           
  3674                           ;nrf24l01.c: 366: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3675  0166  082D               	movf	nrf24l01InitRegisters@rfSetup,w
  3676  0167  00A8               	movwf	??_nrf24l01InitRegisters
  3677  0168  0828               	movf	??_nrf24l01InitRegisters,w
  3678  0169  00A1               	movwf	nrf24l01Send@data
  3679  016A  3026               	movlw	38
  3680  016B  318F  2707  3181   	fcall	_nrf24l01Send
  3681                           
  3682                           ;nrf24l01.c: 369: nrf24l01SetRXPipe(0xFF);
  3683  016E  30FF               	movlw	255
  3684  016F  318F  2748  3181   	fcall	_nrf24l01SetRXPipe
  3685                           
  3686                           ;nrf24l01.c: 372: n_EN_AA_t enAA;;nrf24l01.c: 373: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3687  0172  0020               	movlb	0	; select bank0
  3688  0173  01A1               	clrf	nrf24l01Send@data
  3689  0174  3001               	movlw	1
  3690  0175  318F  2707  3181   	fcall	_nrf24l01Send
  3691  0178  0020               	movlb	0	; select bank0
  3692  0179  00A8               	movwf	??_nrf24l01InitRegisters
  3693  017A  0828               	movf	??_nrf24l01InitRegisters,w
  3694  017B  00AF               	movwf	nrf24l01InitRegisters@enAA
  3695                           
  3696                           ;nrf24l01.c: 374: enAA.ENAA_P0 = 0;
  3697  017C  102F               	bcf	nrf24l01InitRegisters@enAA,0
  3698                           
  3699                           ;nrf24l01.c: 375: enAA.ENAA_P1 = 0;
  3700  017D  10AF               	bcf	nrf24l01InitRegisters@enAA,1
  3701                           
  3702                           ;nrf24l01.c: 376: enAA.ENAA_P2 = 0;
  3703  017E  112F               	bcf	nrf24l01InitRegisters@enAA,2
  3704                           
  3705                           ;nrf24l01.c: 377: enAA.ENAA_P3 = 0;
  3706  017F  11AF               	bcf	nrf24l01InitRegisters@enAA,3
  3707                           
  3708                           ;nrf24l01.c: 378: enAA.ENAA_P4 = 0;
  3709  0180  122F               	bcf	nrf24l01InitRegisters@enAA,4
  3710                           
  3711                           ;nrf24l01.c: 379: enAA.ENAA_P5 = 0;
  3712  0181  12AF               	bcf	nrf24l01InitRegisters@enAA,5
  3713                           
  3714                           ;nrf24l01.c: 380: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3715  0182  082F               	movf	nrf24l01InitRegisters@enAA,w
  3716  0183  00A8               	movwf	??_nrf24l01InitRegisters
  3717  0184  0828               	movf	??_nrf24l01InitRegisters,w
  3718  0185  00A1               	movwf	nrf24l01Send@data
  3719  0186  3021               	movlw	33
  3720  0187  318F  2707  3181   	fcall	_nrf24l01Send
  3721                           
  3722                           ;nrf24l01.c: 384: n_FEATURE_t feature;;nrf24l01.c: 385: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3723  018A  0020               	movlb	0	; select bank0
  3724  018B  01A1               	clrf	nrf24l01Send@data
  3725  018C  301D               	movlw	29
  3726  018D  318F  2707  3181   	fcall	_nrf24l01Send
  3727  0190  0020               	movlb	0	; select bank0
  3728  0191  00A8               	movwf	??_nrf24l01InitRegisters
  3729  0192  0828               	movf	??_nrf24l01InitRegisters,w
  3730  0193  00AC               	movwf	nrf24l01InitRegisters@feature
  3731                           
  3732                           ;nrf24l01.c: 386: feature.EN_DPL = 1;
  3733  0194  152C               	bsf	nrf24l01InitRegisters@feature,2
  3734                           
  3735                           ;nrf24l01.c: 387: feature.EN_DYN_ACK = 1;
  3736  0195  142C               	bsf	nrf24l01InitRegisters@feature,0
  3737                           
  3738                           ;nrf24l01.c: 388: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3739  0196  082C               	movf	nrf24l01InitRegisters@feature,w
  3740  0197  00A8               	movwf	??_nrf24l01InitRegisters
  3741  0198  0828               	movf	??_nrf24l01InitRegisters,w
  3742  0199  00A1               	movwf	nrf24l01Send@data
  3743  019A  303D               	movlw	61
  3744  019B  318F  2707  3181   	fcall	_nrf24l01Send
  3745                           
  3746                           ;nrf24l01.c: 390: n_DYNPD_t DynPD;;nrf24l01.c: 391: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3747  019E  0020               	movlb	0	; select bank0
  3748  019F  01A1               	clrf	nrf24l01Send@data
  3749  01A0  301C               	movlw	28
  3750  01A1  318F  2707  3181   	fcall	_nrf24l01Send
  3751  01A4  0020               	movlb	0	; select bank0
  3752  01A5  00A8               	movwf	??_nrf24l01InitRegisters
  3753  01A6  0828               	movf	??_nrf24l01InitRegisters,w
  3754  01A7  00B0               	movwf	nrf24l01InitRegisters@DynPD
  3755                           
  3756                           ;nrf24l01.c: 392: DynPD.DPL_P0 = 1;
  3757  01A8  1430               	bsf	nrf24l01InitRegisters@DynPD,0
  3758                           
  3759                           ;nrf24l01.c: 393: DynPD.DPL_P1 = 1;
  3760  01A9  14B0               	bsf	nrf24l01InitRegisters@DynPD,1
  3761                           
  3762                           ;nrf24l01.c: 394: DynPD.DPL_P2 = 1;
  3763  01AA  1530               	bsf	nrf24l01InitRegisters@DynPD,2
  3764                           
  3765                           ;nrf24l01.c: 395: DynPD.DPL_P3 = 1;
  3766  01AB  15B0               	bsf	nrf24l01InitRegisters@DynPD,3
  3767                           
  3768                           ;nrf24l01.c: 396: DynPD.DPL_P4 = 1;
  3769  01AC  1630               	bsf	nrf24l01InitRegisters@DynPD,4
  3770                           
  3771                           ;nrf24l01.c: 397: DynPD.DPL_P5 = 1;
  3772  01AD  16B0               	bsf	nrf24l01InitRegisters@DynPD,5
  3773                           
  3774                           ;nrf24l01.c: 398: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3775  01AE  0830               	movf	nrf24l01InitRegisters@DynPD,w
  3776  01AF  00A8               	movwf	??_nrf24l01InitRegisters
  3777  01B0  0828               	movf	??_nrf24l01InitRegisters,w
  3778  01B1  00A1               	movwf	nrf24l01Send@data
  3779  01B2  303C               	movlw	60
  3780  01B3  318F  2707  3181   	fcall	_nrf24l01Send
  3781                           
  3782                           ;nrf24l01.c: 401: unsigned int i;;nrf24l01.c: 402: for (i = 0; i < 6; i++){
  3783  01B6  0020               	movlb	0	; select bank0
  3784  01B7  01B2               	clrf	nrf24l01InitRegisters@i
  3785  01B8  01B3               	clrf	nrf24l01InitRegisters@i+1
  3786  01B9  3000               	movlw	0
  3787  01BA  0233               	subwf	nrf24l01InitRegisters@i+1,w
  3788  01BB  3006               	movlw	6
  3789  01BC  1903               	skipnz
  3790  01BD  0232               	subwf	nrf24l01InitRegisters@i,w
  3791  01BE  1803               	btfsc	3,0
  3792  01BF  2A19               	goto	l2536
  3793  01C0                     l2522:	
  3794                           
  3795                           ;nrf24l01.c: 404: nrf24l01SPIStart();
  3796  01C0  318D  25D8  3181   	fcall	_nrf24l01SPIStart
  3797                           
  3798                           ;nrf24l01.c: 405: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  3799  01C3  0020               	movlb	0	; select bank0
  3800  01C4  0832               	movf	nrf24l01InitRegisters@i,w
  3801  01C5  3E0A               	addlw	10
  3802  01C6  3820               	iorlw	32
  3803  01C7  318D  25E0  3181   	fcall	_nrf24l01SPISend
  3804                           
  3805                           ;nrf24l01.c: 407: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  3806  01CA  301D               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3807  01CB  0084               	movwf	4
  3808  01CC  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3809  01CD  0085               	movwf	5
  3810  01CE  0800               	movf	0,w	;code access
  3811  01CF  0020               	movlb	0	; select bank0
  3812  01D0  00A8               	movwf	??_nrf24l01InitRegisters
  3813  01D1  0832               	movf	nrf24l01InitRegisters@i,w
  3814  01D2  00A9               	movwf	??_nrf24l01InitRegisters+1
  3815  01D3  0829               	movf	??_nrf24l01InitRegisters+1,w
  3816  01D4  00A1               	movwf	___bmul@multiplicand
  3817  01D5  3040               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3818  01D6  0084               	movwf	4
  3819  01D7  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3820  01D8  0085               	movwf	5
  3821  01D9  0800               	movf	0,w	;code access
  3822  01DA  318D  25FF  3181   	fcall	___bmul
  3823  01DD  0020               	movlb	0	; select bank0
  3824  01DE  0728               	addwf	??_nrf24l01InitRegisters,w
  3825  01DF  318D  25E0  3181   	fcall	_nrf24l01SPISend
  3826                           
  3827                           ;nrf24l01.c: 409: if (i < 2){
  3828  01E2  3000               	movlw	0
  3829  01E3  0020               	movlb	0	; select bank0
  3830  01E4  0233               	subwf	nrf24l01InitRegisters@i+1,w
  3831  01E5  3002               	movlw	2
  3832  01E6  1903               	skipnz
  3833  01E7  0232               	subwf	nrf24l01InitRegisters@i,w
  3834  01E8  1803               	skipnc
  3835  01E9  2A0A               	goto	l2530
  3836                           
  3837                           ;nrf24l01.c: 410: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3838  01EA  301C               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3839  01EB  0084               	movwf	4
  3840  01EC  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3841  01ED  0085               	movwf	5
  3842  01EE  0800               	movf	0,w	;code access
  3843  01EF  318D  25E0  3181   	fcall	_nrf24l01SPISend
  3844                           
  3845                           ;nrf24l01.c: 411: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3846  01F2  301B               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3847  01F3  0084               	movwf	4
  3848  01F4  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3849  01F5  0085               	movwf	5
  3850  01F6  0800               	movf	0,w	;code access
  3851  01F7  318D  25E0  3181   	fcall	_nrf24l01SPISend
  3852                           
  3853                           ;nrf24l01.c: 412: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3854  01FA  301A               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3855  01FB  0084               	movwf	4
  3856  01FC  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3857  01FD  0085               	movwf	5
  3858  01FE  0800               	movf	0,w	;code access
  3859  01FF  318D  25E0  3181   	fcall	_nrf24l01SPISend
  3860                           
  3861                           ;nrf24l01.c: 413: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3862  0202  3019               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3863  0203  0084               	movwf	4
  3864  0204  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3865  0205  0085               	movwf	5
  3866  0206  0800               	movf	0,w	;code access
  3867  0207  318D  25E0  3181   	fcall	_nrf24l01SPISend
  3868  020A                     l2530:	
  3869                           
  3870                           ;nrf24l01.c: 414: };nrf24l01.c: 416: nrf24l01SPIEnd();
  3871  020A  318D  25C9  3181   	fcall	_nrf24l01SPIEnd
  3872  020D  3001               	movlw	1
  3873  020E  0020               	movlb	0	; select bank0
  3874  020F  07B2               	addwf	nrf24l01InitRegisters@i,f
  3875  0210  3000               	movlw	0
  3876  0211  3DB3               	addwfc	nrf24l01InitRegisters@i+1,f
  3877  0212  3000               	movlw	0
  3878  0213  0233               	subwf	nrf24l01InitRegisters@i+1,w
  3879  0214  3006               	movlw	6
  3880  0215  1903               	skipnz
  3881  0216  0232               	subwf	nrf24l01InitRegisters@i,w
  3882  0217  1C03               	skipc
  3883  0218  29C0               	goto	l2522
  3884  0219                     l2536:	
  3885                           
  3886                           ;nrf24l01.c: 417: };nrf24l01.c: 419: nrf24l01SetTXPipe(0);
  3887  0219  3000               	movlw	0
  3888  021A  3186  2620  3181   	fcall	_nrf24l01SetTXPipe
  3889                           
  3890                           ;nrf24l01.c: 423: n_STATUS_t status;;nrf24l01.c: 424: status.byte = 0x00;
  3891  021D  0020               	movlb	0	; select bank0
  3892  021E  01AE               	clrf	nrf24l01InitRegisters@status
  3893                           
  3894                           ;nrf24l01.c: 425: status.RX_DR = 1;
  3895  021F  172E               	bsf	nrf24l01InitRegisters@status,6
  3896                           
  3897                           ;nrf24l01.c: 426: status.TX_DS = 1;
  3898  0220  16AE               	bsf	nrf24l01InitRegisters@status,5
  3899                           
  3900                           ;nrf24l01.c: 427: status.MAX_RT = 1;
  3901  0221  162E               	bsf	nrf24l01InitRegisters@status,4
  3902                           
  3903                           ;nrf24l01.c: 428: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.byte);
  3904  0222  082E               	movf	nrf24l01InitRegisters@status,w
  3905  0223  00A8               	movwf	??_nrf24l01InitRegisters
  3906  0224  0828               	movf	??_nrf24l01InitRegisters,w
  3907  0225  00A1               	movwf	nrf24l01Send@data
  3908  0226  3027               	movlw	39
  3909  0227  318F  2707  3181   	fcall	_nrf24l01Send
  3910                           
  3911                           ;nrf24l01.c: 431: nrf24l01Send((unsigned) 0b11100001, 0);
  3912  022A  0020               	movlb	0	; select bank0
  3913  022B  01A1               	clrf	nrf24l01Send@data
  3914  022C  30E1               	movlw	225
  3915  022D  318F  2707  3181   	fcall	_nrf24l01Send
  3916                           
  3917                           ;nrf24l01.c: 432: nrf24l01Send((unsigned) 0b11100010, 0);
  3918  0230  0020               	movlb	0	; select bank0
  3919  0231  01A1               	clrf	nrf24l01Send@data
  3920  0232  30E2               	movlw	226
  3921  0233  318F  2707  3181   	fcall	_nrf24l01Send
  3922                           
  3923                           ;nrf24l01.c: 435: config.PRIM_RX = 1;
  3924  0236  0020               	movlb	0	; select bank0
  3925  0237  1431               	bsf	nrf24l01InitRegisters@config,0
  3926                           
  3927                           ;nrf24l01.c: 436: config.EN_CRC = 1;
  3928  0238  15B1               	bsf	nrf24l01InitRegisters@config,3
  3929                           
  3930                           ;nrf24l01.c: 437: config.CRCO = 1;
  3931  0239  1531               	bsf	nrf24l01InitRegisters@config,2
  3932                           
  3933                           ;nrf24l01.c: 438: config.PWR_UP = 1;
  3934  023A  14B1               	bsf	nrf24l01InitRegisters@config,1
  3935                           
  3936                           ;nrf24l01.c: 439: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3937  023B  0831               	movf	nrf24l01InitRegisters@config,w
  3938  023C  00A8               	movwf	??_nrf24l01InitRegisters
  3939  023D  0828               	movf	??_nrf24l01InitRegisters,w
  3940  023E  00A1               	movwf	nrf24l01Send@data
  3941  023F  3020               	movlw	32
  3942  0240  318F  2707         	fcall	_nrf24l01Send
  3943  0242  0008               	return
  3944  0243                     __end_of_nrf24l01InitRegisters:	
  3945                           
  3946                           	psect	text5
  3947  0620                     __ptext5:	
  3948 ;; *************** function _nrf24l01SetTXPipe *****************
  3949 ;; Defined at:
  3950 ;;		line 309 in file "nrf24l01.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;  pipe            1    wreg     unsigned char 
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;  pipe            1    7[BANK0 ] unsigned char 
  3955 ;; Return value:  Size  Location     Type
  3956 ;;                  1    wreg      void 
  3957 ;; Registers used:
  3958 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3959 ;; Tracked objects:
  3960 ;;		On entry : 0/0
  3961 ;;		On exit  : 0/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3965 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3966 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3967 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3968 ;;Total ram usage:        3 bytes
  3969 ;; Hardware stack levels used:    1
  3970 ;; Hardware stack levels required when called:    9
  3971 ;; This function calls:
  3972 ;;		___bmul
  3973 ;;		_nrf24l01SPIEnd
  3974 ;;		_nrf24l01SPISend
  3975 ;;		_nrf24l01SPIStart
  3976 ;; This function is called by:
  3977 ;;		_main
  3978 ;;		_nrf24l01InitRegisters
  3979 ;;		_nrf24l01SendACK
  3980 ;; This function uses a non-reentrant model
  3981 ;;
  3982                           
  3983                           
  3984                           ;psect for function _nrf24l01SetTXPipe
  3985  0620                     _nrf24l01SetTXPipe:	
  3986                           
  3987                           ;incstack = 0
  3988                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3989                           ;nrf24l01SetTXPipe@pipe stored from wreg
  3990  0620  0020               	movlb	0	; select bank0
  3991  0621  00A7               	movwf	nrf24l01SetTXPipe@pipe
  3992                           
  3993                           ;nrf24l01.c: 312: nrf24l01SPIStart();
  3994  0622  318D  25D8  3186   	fcall	_nrf24l01SPIStart
  3995                           
  3996                           ;nrf24l01.c: 313: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  3997  0625  3030               	movlw	48
  3998  0626  318D  25E0  3186   	fcall	_nrf24l01SPISend
  3999                           
  4000                           ;nrf24l01.c: 314: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  4001  0629  301D               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4002  062A  0084               	movwf	4
  4003  062B  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4004  062C  0085               	movwf	5
  4005  062D  0800               	movf	0,w	;code access
  4006  062E  0020               	movlb	0	; select bank0
  4007  062F  00A5               	movwf	??_nrf24l01SetTXPipe
  4008  0630  3040               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4009  0631  0084               	movwf	4
  4010  0632  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4011  0633  0085               	movwf	5
  4012  0634  0800               	movf	0,w	;code access
  4013  0635  00A6               	movwf	??_nrf24l01SetTXPipe+1
  4014  0636  0826               	movf	??_nrf24l01SetTXPipe+1,w
  4015  0637  00A1               	movwf	___bmul@multiplicand
  4016  0638  0827               	movf	nrf24l01SetTXPipe@pipe,w
  4017  0639  318D  25FF  3186   	fcall	___bmul
  4018  063C  0020               	movlb	0	; select bank0
  4019  063D  0725               	addwf	??_nrf24l01SetTXPipe,w
  4020  063E  318D  25E0  3186   	fcall	_nrf24l01SPISend
  4021                           
  4022                           ;nrf24l01.c: 315: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4023  0641  301C               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4024  0642  0084               	movwf	4
  4025  0643  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4026  0644  0085               	movwf	5
  4027  0645  0800               	movf	0,w	;code access
  4028  0646  318D  25E0  3186   	fcall	_nrf24l01SPISend
  4029                           
  4030                           ;nrf24l01.c: 316: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4031  0649  301B               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4032  064A  0084               	movwf	4
  4033  064B  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4034  064C  0085               	movwf	5
  4035  064D  0800               	movf	0,w	;code access
  4036  064E  318D  25E0  3186   	fcall	_nrf24l01SPISend
  4037                           
  4038                           ;nrf24l01.c: 317: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4039  0651  301A               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4040  0652  0084               	movwf	4
  4041  0653  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4042  0654  0085               	movwf	5
  4043  0655  0800               	movf	0,w	;code access
  4044  0656  318D  25E0  3186   	fcall	_nrf24l01SPISend
  4045                           
  4046                           ;nrf24l01.c: 318: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4047  0659  3019               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4048  065A  0084               	movwf	4
  4049  065B  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4050  065C  0085               	movwf	5
  4051  065D  0800               	movf	0,w	;code access
  4052  065E  318D  25E0  3186   	fcall	_nrf24l01SPISend
  4053                           
  4054                           ;nrf24l01.c: 319: nrf24l01SPIEnd();
  4055  0661  318D  25C9         	fcall	_nrf24l01SPIEnd
  4056  0663  0008               	return
  4057  0664                     __end_of_nrf24l01SetTXPipe:	
  4058                           
  4059                           	psect	text6
  4060  0DFF                     __ptext6:	
  4061 ;; *************** function ___bmul *****************
  4062 ;; Defined at:
  4063 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  4064 ;; Parameters:    Size  Location     Type
  4065 ;;  multiplier      1    wreg     unsigned char 
  4066 ;;  multiplicand    1    1[BANK0 ] unsigned char 
  4067 ;; Auto vars:     Size  Location     Type
  4068 ;;  multiplier      1    4[BANK0 ] unsigned char 
  4069 ;;  product         1    3[BANK0 ] unsigned char 
  4070 ;; Return value:  Size  Location     Type
  4071 ;;                  1    wreg      unsigned char 
  4072 ;; Registers used:
  4073 ;;		wreg, status,2, status,0
  4074 ;; Tracked objects:
  4075 ;;		On entry : 0/0
  4076 ;;		On exit  : 0/0
  4077 ;;		Unchanged: 0/0
  4078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4079 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4080 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4081 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4082 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4083 ;;Total ram usage:        4 bytes
  4084 ;; Hardware stack levels used:    1
  4085 ;; Hardware stack levels required when called:    7
  4086 ;; This function calls:
  4087 ;;		Nothing
  4088 ;; This function is called by:
  4089 ;;		_nrf24l01SetTXPipe
  4090 ;;		_nrf24l01InitRegisters
  4091 ;; This function uses a non-reentrant model
  4092 ;;
  4093                           
  4094                           
  4095                           ;psect for function ___bmul
  4096  0DFF                     ___bmul:	
  4097                           
  4098                           ;incstack = 0
  4099                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4100                           ;___bmul@multiplier stored from wreg
  4101  0DFF  0020               	movlb	0	; select bank0
  4102  0E00  00A4               	movwf	___bmul@multiplier
  4103  0E01  01A3               	clrf	___bmul@product
  4104  0E02                     l1992:	
  4105  0E02  1C24               	btfss	___bmul@multiplier,0
  4106  0E03  2E08               	goto	l1996
  4107  0E04  0821               	movf	___bmul@multiplicand,w
  4108  0E05  00A2               	movwf	??___bmul
  4109  0E06  0822               	movf	??___bmul,w
  4110  0E07  07A3               	addwf	___bmul@product,f
  4111  0E08                     l1996:	
  4112  0E08  1003               	clrc
  4113  0E09  0DA1               	rlf	___bmul@multiplicand,f
  4114  0E0A  1003               	clrc
  4115  0E0B  0CA4               	rrf	___bmul@multiplier,f
  4116  0E0C  0824               	movf	___bmul@multiplier,w
  4117  0E0D  1D03               	btfss	3,2
  4118  0E0E  2E02               	goto	l1992
  4119  0E0F  0823               	movf	___bmul@product,w
  4120  0E10  0008               	return
  4121  0E11                     __end_of___bmul:	
  4122                           
  4123                           	psect	text7
  4124  0F48                     __ptext7:	
  4125 ;; *************** function _nrf24l01SetRXPipe *****************
  4126 ;; Defined at:
  4127 ;;		line 322 in file "nrf24l01.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;  pipe            1    wreg     unsigned char 
  4130 ;; Auto vars:     Size  Location     Type
  4131 ;;  pipe            1    6[BANK0 ] unsigned char 
  4132 ;;  enRXAddr        1    7[BANK0 ] struct .
  4133 ;; Return value:  Size  Location     Type
  4134 ;;                  1    wreg      void 
  4135 ;; Registers used:
  4136 ;;		wreg, status,2, status,0, pclath, cstack
  4137 ;; Tracked objects:
  4138 ;;		On entry : 0/0
  4139 ;;		On exit  : 0/0
  4140 ;;		Unchanged: 0/0
  4141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4143 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4144 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4145 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4146 ;;Total ram usage:        4 bytes
  4147 ;; Hardware stack levels used:    1
  4148 ;; Hardware stack levels required when called:   10
  4149 ;; This function calls:
  4150 ;;		_nrf24l01Send
  4151 ;; This function is called by:
  4152 ;;		_main
  4153 ;;		_nrf24l01InitRegisters
  4154 ;; This function uses a non-reentrant model
  4155 ;;
  4156                           
  4157                           
  4158                           ;psect for function _nrf24l01SetRXPipe
  4159  0F48                     _nrf24l01SetRXPipe:	
  4160                           
  4161                           ;incstack = 0
  4162                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  4163                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4164  0F48  0020               	movlb	0	; select bank0
  4165  0F49  00A6               	movwf	nrf24l01SetRXPipe@pipe
  4166                           
  4167                           ;nrf24l01.c: 324: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 326: if (pipe > 5){
  4168  0F4A  3006               	movlw	6
  4169  0F4B  0226               	subwf	nrf24l01SetRXPipe@pipe,w
  4170  0F4C  1C03               	skipc
  4171  0F4D  2F55               	goto	l370
  4172                           
  4173                           ;nrf24l01.c: 327: enRXAddr.ERX_P0 = 1;
  4174  0F4E  1427               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4175                           
  4176                           ;nrf24l01.c: 328: enRXAddr.ERX_P1 = 1;
  4177  0F4F  14A7               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4178                           
  4179                           ;nrf24l01.c: 329: enRXAddr.ERX_P2 = 1;
  4180  0F50  1527               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4181                           
  4182                           ;nrf24l01.c: 330: enRXAddr.ERX_P3 = 1;
  4183  0F51  15A7               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4184                           
  4185                           ;nrf24l01.c: 331: enRXAddr.ERX_P4 = 1;
  4186  0F52  1627               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4187                           
  4188                           ;nrf24l01.c: 332: enRXAddr.ERX_P5 = 1;
  4189  0F53  16A7               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4190                           
  4191                           ;nrf24l01.c: 333: }
  4192  0F54  2F61               	goto	l2190
  4193  0F55                     l370:	
  4194                           
  4195                           ;nrf24l01.c: 335: else{;nrf24l01.c: 336: enRXAddr.ERX_P0 = 1;
  4196  0F55  1427               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4197                           
  4198                           ;nrf24l01.c: 337: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4199  0F56  0827               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4200  0F57  00A4               	movwf	??_nrf24l01SetRXPipe
  4201  0F58  0A26               	incf	nrf24l01SetRXPipe@pipe,w
  4202  0F59  2F5B               	goto	u1114
  4203  0F5A                     u1115:	
  4204  0F5A  35A4               	lslf	??_nrf24l01SetRXPipe,f
  4205  0F5B                     u1114:	
  4206  0F5B  0B89               	decfsz	9,f
  4207  0F5C  2F5A               	goto	u1115
  4208  0F5D  0824               	movf	??_nrf24l01SetRXPipe,w
  4209  0F5E  00A5               	movwf	??_nrf24l01SetRXPipe+1
  4210  0F5F  0825               	movf	??_nrf24l01SetRXPipe+1,w
  4211  0F60  00A7               	movwf	nrf24l01SetRXPipe@enRXAddr
  4212  0F61                     l2190:	
  4213                           
  4214                           ;nrf24l01.c: 338: };nrf24l01.c: 340: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4215  0F61  0827               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4216  0F62  00A4               	movwf	??_nrf24l01SetRXPipe
  4217  0F63  0824               	movf	??_nrf24l01SetRXPipe,w
  4218  0F64  00A1               	movwf	nrf24l01Send@data
  4219  0F65  3022               	movlw	34
  4220  0F66  318F  2707         	fcall	_nrf24l01Send
  4221  0F68  0008               	return
  4222  0F69                     __end_of_nrf24l01SetRXPipe:	
  4223                           
  4224                           	psect	text8
  4225  0535                     __ptext8:	
  4226 ;; *************** function _nrf24l01GetPipe *****************
  4227 ;; Defined at:
  4228 ;;		line 157 in file "main.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;  name            1    wreg     PTR unsigned char 
  4231 ;;		 -> romData(19), 
  4232 ;; Auto vars:     Size  Location     Type
  4233 ;;  name            1   20[BANK0 ] PTR unsigned char 
  4234 ;;		 -> romData(19), 
  4235 ;;  pipe            4   16[BANK0 ] unsigned long 
  4236 ;;  i               1   21[BANK0 ] unsigned char 
  4237 ;; Return value:  Size  Location     Type
  4238 ;;                  1    wreg      unsigned char 
  4239 ;; Registers used:
  4240 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4241 ;; Tracked objects:
  4242 ;;		On entry : 0/0
  4243 ;;		On exit  : 0/0
  4244 ;;		Unchanged: 0/0
  4245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4247 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4248 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4249 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4250 ;;Total ram usage:       11 bytes
  4251 ;; Hardware stack levels used:    1
  4252 ;; Hardware stack levels required when called:    8
  4253 ;; This function calls:
  4254 ;;		___llmod
  4255 ;;		_strlen
  4256 ;; This function is called by:
  4257 ;;		_main
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           
  4262                           ;psect for function _nrf24l01GetPipe
  4263  0535                     _nrf24l01GetPipe:	
  4264                           
  4265                           ;incstack = 0
  4266                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4267                           ;nrf24l01GetPipe@name stored from wreg
  4268  0535  0020               	movlb	0	; select bank0
  4269  0536  00B4               	movwf	nrf24l01GetPipe@name
  4270                           
  4271                           ;main.c: 158: unsigned long pipe = 0;
  4272  0537  3000               	movlw	0
  4273  0538  00B3               	movwf	nrf24l01GetPipe@pipe+3
  4274  0539  3000               	movlw	0
  4275  053A  00B2               	movwf	nrf24l01GetPipe@pipe+2
  4276  053B  3000               	movlw	0
  4277  053C  00B1               	movwf	nrf24l01GetPipe@pipe+1
  4278  053D  3000               	movlw	0
  4279  053E  00B0               	movwf	nrf24l01GetPipe@pipe
  4280                           
  4281                           ;main.c: 159: unsigned char i = 0;
  4282  053F  01B5               	clrf	nrf24l01GetPipe@i
  4283                           
  4284                           ;main.c: 162: for (i = 0; i < strlen(name); i++){
  4285  0540  01B5               	clrf	nrf24l01GetPipe@i
  4286  0541                     l2688:	
  4287  0541  0834               	movf	nrf24l01GetPipe@name,w
  4288  0542  318F  2769  3185   	fcall	_strlen
  4289  0545  0020               	movlb	0	; select bank0
  4290  0546  0835               	movf	nrf24l01GetPipe@i,w
  4291  0547  00AB               	movwf	??_nrf24l01GetPipe
  4292  0548  01AC               	clrf	??_nrf24l01GetPipe+1
  4293  0549  0822               	movf	?_strlen+1,w
  4294  054A  022C               	subwf	??_nrf24l01GetPipe+1,w
  4295  054B  1D03               	skipz
  4296  054C  2D4F               	goto	u1545
  4297  054D  0821               	movf	?_strlen,w
  4298  054E  022B               	subwf	??_nrf24l01GetPipe,w
  4299  054F                     u1545:	
  4300  054F  1803               	btfsc	3,0
  4301  0550  2D69               	goto	l2690
  4302                           
  4303                           ;main.c: 163: pipe+= name[i];
  4304  0551  0835               	movf	nrf24l01GetPipe@i,w
  4305  0552  0734               	addwf	nrf24l01GetPipe@name,w
  4306  0553  00AB               	movwf	??_nrf24l01GetPipe
  4307  0554  082B               	movf	??_nrf24l01GetPipe,w
  4308  0555  0086               	movwf	6
  4309  0556  0187               	clrf	7
  4310  0557  0801               	movf	1,w
  4311  0558  00AC               	movwf	??_nrf24l01GetPipe+1
  4312  0559  01AD               	clrf	??_nrf24l01GetPipe+2
  4313  055A  01AE               	clrf	??_nrf24l01GetPipe+3
  4314  055B  01AF               	clrf	??_nrf24l01GetPipe+4
  4315  055C  082C               	movf	??_nrf24l01GetPipe+1,w
  4316  055D  07B0               	addwf	nrf24l01GetPipe@pipe,f
  4317  055E  082D               	movf	??_nrf24l01GetPipe+2,w
  4318  055F  3DB1               	addwfc	nrf24l01GetPipe@pipe+1,f
  4319  0560  082E               	movf	??_nrf24l01GetPipe+3,w
  4320  0561  3DB2               	addwfc	nrf24l01GetPipe@pipe+2,f
  4321  0562  082F               	movf	??_nrf24l01GetPipe+4,w
  4322  0563  3DB3               	addwfc	nrf24l01GetPipe@pipe+3,f
  4323  0564  3001               	movlw	1
  4324  0565  00AB               	movwf	??_nrf24l01GetPipe
  4325  0566  082B               	movf	??_nrf24l01GetPipe,w
  4326  0567  07B5               	addwf	nrf24l01GetPipe@i,f
  4327  0568  2D41               	goto	l2688
  4328  0569                     l2690:	
  4329                           
  4330                           ;main.c: 164: };main.c: 166: pipe%= 6;
  4331  0569  3000               	movlw	0
  4332  056A  00A4               	movwf	___llmod@divisor+3
  4333  056B  3000               	movlw	0
  4334  056C  00A3               	movwf	___llmod@divisor+2
  4335  056D  3000               	movlw	0
  4336  056E  00A2               	movwf	___llmod@divisor+1
  4337  056F  3006               	movlw	6
  4338  0570  00A1               	movwf	___llmod@divisor
  4339  0571  0833               	movf	nrf24l01GetPipe@pipe+3,w
  4340  0572  00A8               	movwf	___llmod@dividend+3
  4341  0573  0832               	movf	nrf24l01GetPipe@pipe+2,w
  4342  0574  00A7               	movwf	___llmod@dividend+2
  4343  0575  0831               	movf	nrf24l01GetPipe@pipe+1,w
  4344  0576  00A6               	movwf	___llmod@dividend+1
  4345  0577  0830               	movf	nrf24l01GetPipe@pipe,w
  4346  0578  00A5               	movwf	___llmod@dividend
  4347  0579  3186  2664         	fcall	___llmod
  4348  057B  0020               	movlb	0	; select bank0
  4349  057C  0824               	movf	?___llmod+3,w
  4350  057D  00B3               	movwf	nrf24l01GetPipe@pipe+3
  4351  057E  0823               	movf	?___llmod+2,w
  4352  057F  00B2               	movwf	nrf24l01GetPipe@pipe+2
  4353  0580  0822               	movf	?___llmod+1,w
  4354  0581  00B1               	movwf	nrf24l01GetPipe@pipe+1
  4355  0582  0821               	movf	?___llmod,w
  4356  0583  00B0               	movwf	nrf24l01GetPipe@pipe
  4357                           
  4358                           ;main.c: 167: return pipe;
  4359  0584  0830               	movf	nrf24l01GetPipe@pipe,w
  4360  0585  0008               	return
  4361  0586                     __end_of_nrf24l01GetPipe:	
  4362                           
  4363                           	psect	text9
  4364  0029                     __ptext9:	
  4365 ;; *************** function _loop *****************
  4366 ;; Defined at:
  4367 ;;		line 100 in file "main.c"
  4368 ;; Parameters:    Size  Location     Type
  4369 ;;		None
  4370 ;; Auto vars:     Size  Location     Type
  4371 ;;  packet         33    1[BANK1 ] struct .
  4372 ;;  rfSetup         1    0[BANK1 ] struct .
  4373 ;; Return value:  Size  Location     Type
  4374 ;;                  1    wreg      void 
  4375 ;; Registers used:
  4376 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4377 ;; Tracked objects:
  4378 ;;		On entry : 0/0
  4379 ;;		On exit  : 0/0
  4380 ;;		Unchanged: 0/0
  4381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4383 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  4384 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4385 ;;      Totals:         0       4      34       0       0       0       0       0       0       0       0       0       
      +0       0
  4386 ;;Total ram usage:       38 bytes
  4387 ;; Hardware stack levels used:    1
  4388 ;; Hardware stack levels required when called:   12
  4389 ;; This function calls:
  4390 ;;		_checkTXPower
  4391 ;;		_getADCValue
  4392 ;;		_nrf24l01Send
  4393 ;;		_nrf24l01SendPacket
  4394 ;;		_setMessage
  4395 ;;		_sleep
  4396 ;; This function is called by:
  4397 ;;		_main
  4398 ;; This function uses a non-reentrant model
  4399 ;;
  4400                           
  4401                           
  4402                           ;psect for function _loop
  4403  0029                     _loop:	
  4404                           
  4405                           ;incstack = 0
  4406                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4407  0029  0064               	clrwdt	;# 
  4408                           
  4409                           ;main.c: 105: nrf24l01Packet_t packet;;main.c: 107: setMessage(&packet, "DBG", counter);
  4410  002A  3036               	movlw	low (STR_3| (0+32768))
  4411  002B  0020               	movlb	0	; select bank0
  4412  002C  00BD               	movwf	setMessage@topic
  4413  002D  3090               	movlw	high (STR_3| (0+32768))
  4414  002E  00BE               	movwf	setMessage@topic+1
  4415  002F  0021               	movlb	1	; select bank1
  4416  0030  0867               	movf	(_counter+3)^(0+128),w
  4417  0031  0020               	movlb	0	; select bank0
  4418  0032  00C2               	movwf	setMessage@value+3
  4419  0033  0021               	movlb	1	; select bank1
  4420  0034  0866               	movf	(_counter+2)^(0+128),w
  4421  0035  0020               	movlb	0	; select bank0
  4422  0036  00C1               	movwf	setMessage@value+2
  4423  0037  0021               	movlb	1	; select bank1
  4424  0038  0865               	movf	(_counter+1)^(0+128),w
  4425  0039  0020               	movlb	0	; select bank0
  4426  003A  00C0               	movwf	setMessage@value+1
  4427  003B  0021               	movlb	1	; select bank1
  4428  003C  0864               	movf	_counter^(0+128),w
  4429  003D  0020               	movlb	0	; select bank0
  4430  003E  00BF               	movwf	setMessage@value
  4431  003F  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4432  0040  3184  248E  3180   	fcall	_setMessage
  4433                           
  4434                           ;main.c: 108: packet.packetData.byte = 0;
  4435  0043  0021               	movlb	1	; select bank1
  4436  0044  01A1               	clrf	loop@packet^(0+128)
  4437                           
  4438                           ;main.c: 109: packet.packetData.ACKRequest = 0;
  4439  0045  1121               	bcf	loop@packet^(0+128),2
  4440                           
  4441                           ;main.c: 110: nrf24l01SendPacket(&packet);
  4442  0046  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4443  0047  3182  2243  3180   	fcall	_nrf24l01SendPacket
  4444                           
  4445                           ;main.c: 111: checkTXPower();
  4446  004A  3187  27EA  3180   	fcall	_checkTXPower
  4447                           
  4448                           ;main.c: 112: sleep();
  4449  004D  318D  25ED  3180   	fcall	_sleep
  4450                           
  4451                           ;main.c: 114: setMessage(&packet, "VBAT", getADCValue(0b000100, 2526));
  4452  0050  3028               	movlw	low (STR_4| (0+32768))
  4453  0051  0020               	movlb	0	; select bank0
  4454  0052  00BD               	movwf	setMessage@topic
  4455  0053  3090               	movlw	high (STR_4| (0+32768))
  4456  0054  00BE               	movwf	setMessage@topic+1
  4457  0055  3000               	movlw	0
  4458  0056  00B2               	movwf	getADCValue@divider+3
  4459  0057  3000               	movlw	0
  4460  0058  00B1               	movwf	getADCValue@divider+2
  4461  0059  3009               	movlw	9
  4462  005A  00B0               	movwf	getADCValue@divider+1
  4463  005B  30DE               	movlw	222
  4464  005C  00AF               	movwf	getADCValue@divider
  4465  005D  3004               	movlw	4
  4466  005E  3184  2406  3180   	fcall	_getADCValue
  4467  0061  0020               	movlb	0	; select bank0
  4468  0062  0832               	movf	?_getADCValue+3,w
  4469  0063  00C2               	movwf	setMessage@value+3
  4470  0064  0831               	movf	?_getADCValue+2,w
  4471  0065  00C1               	movwf	setMessage@value+2
  4472  0066  0830               	movf	?_getADCValue+1,w
  4473  0067  00C0               	movwf	setMessage@value+1
  4474  0068  082F               	movf	?_getADCValue,w
  4475  0069  00BF               	movwf	setMessage@value
  4476  006A  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4477  006B  3184  248E  3180   	fcall	_setMessage
  4478                           
  4479                           ;main.c: 115: packet.packetData.byte = 0;
  4480  006E  0021               	movlb	1	; select bank1
  4481  006F  01A1               	clrf	loop@packet^(0+128)
  4482                           
  4483                           ;main.c: 116: packet.packetData.ACKRequest = 1;
  4484  0070  1521               	bsf	loop@packet^(0+128),2
  4485                           
  4486                           ;main.c: 117: nrf24l01SendPacket(&packet);
  4487  0071  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4488  0072  3182  2243  3180   	fcall	_nrf24l01SendPacket
  4489                           
  4490                           ;main.c: 118: checkTXPower();
  4491  0075  3187  27EA  3180   	fcall	_checkTXPower
  4492                           
  4493                           ;main.c: 119: sleep();
  4494  0078  318D  25ED  3180   	fcall	_sleep
  4495                           
  4496                           ;main.c: 122: setMessage(&packet, "ANC3", getADCValue(0b010011, 2500));
  4497  007B  301E               	movlw	low (STR_5| (0+32768))
  4498  007C  0020               	movlb	0	; select bank0
  4499  007D  00BD               	movwf	setMessage@topic
  4500  007E  3090               	movlw	high (STR_5| (0+32768))
  4501  007F  00BE               	movwf	setMessage@topic+1
  4502  0080  3000               	movlw	0
  4503  0081  00B2               	movwf	getADCValue@divider+3
  4504  0082  3000               	movlw	0
  4505  0083  00B1               	movwf	getADCValue@divider+2
  4506  0084  3009               	movlw	9
  4507  0085  00B0               	movwf	getADCValue@divider+1
  4508  0086  30C4               	movlw	196
  4509  0087  00AF               	movwf	getADCValue@divider
  4510  0088  3013               	movlw	19
  4511  0089  3184  2406  3180   	fcall	_getADCValue
  4512  008C  0020               	movlb	0	; select bank0
  4513  008D  0832               	movf	?_getADCValue+3,w
  4514  008E  00C2               	movwf	setMessage@value+3
  4515  008F  0831               	movf	?_getADCValue+2,w
  4516  0090  00C1               	movwf	setMessage@value+2
  4517  0091  0830               	movf	?_getADCValue+1,w
  4518  0092  00C0               	movwf	setMessage@value+1
  4519  0093  082F               	movf	?_getADCValue,w
  4520  0094  00BF               	movwf	setMessage@value
  4521  0095  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4522  0096  3184  248E  3180   	fcall	_setMessage
  4523                           
  4524                           ;main.c: 123: packet.packetData.byte = 0;
  4525  0099  0021               	movlb	1	; select bank1
  4526  009A  01A1               	clrf	loop@packet^(0+128)
  4527                           
  4528                           ;main.c: 124: packet.packetData.ACKRequest = 1;
  4529  009B  1521               	bsf	loop@packet^(0+128),2
  4530                           
  4531                           ;main.c: 125: nrf24l01SendPacket(&packet);
  4532  009C  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4533  009D  3182  2243  3180   	fcall	_nrf24l01SendPacket
  4534                           
  4535                           ;main.c: 126: checkTXPower();
  4536  00A0  3187  27EA  3180   	fcall	_checkTXPower
  4537                           
  4538                           ;main.c: 127: sleep();
  4539  00A3  318D  25ED  3180   	fcall	_sleep
  4540                           
  4541                           ;main.c: 129: setMessage(&packet, "FVR", getADCValue(0b111111, 2500));
  4542  00A6  303A               	movlw	low (STR_6| (0+32768))
  4543  00A7  0020               	movlb	0	; select bank0
  4544  00A8  00BD               	movwf	setMessage@topic
  4545  00A9  3090               	movlw	high (STR_6| (0+32768))
  4546  00AA  00BE               	movwf	setMessage@topic+1
  4547  00AB  3000               	movlw	0
  4548  00AC  00B2               	movwf	getADCValue@divider+3
  4549  00AD  3000               	movlw	0
  4550  00AE  00B1               	movwf	getADCValue@divider+2
  4551  00AF  3009               	movlw	9
  4552  00B0  00B0               	movwf	getADCValue@divider+1
  4553  00B1  30C4               	movlw	196
  4554  00B2  00AF               	movwf	getADCValue@divider
  4555  00B3  303F               	movlw	63
  4556  00B4  3184  2406  3180   	fcall	_getADCValue
  4557  00B7  0020               	movlb	0	; select bank0
  4558  00B8  0832               	movf	?_getADCValue+3,w
  4559  00B9  00C2               	movwf	setMessage@value+3
  4560  00BA  0831               	movf	?_getADCValue+2,w
  4561  00BB  00C1               	movwf	setMessage@value+2
  4562  00BC  0830               	movf	?_getADCValue+1,w
  4563  00BD  00C0               	movwf	setMessage@value+1
  4564  00BE  082F               	movf	?_getADCValue,w
  4565  00BF  00BF               	movwf	setMessage@value
  4566  00C0  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4567  00C1  3184  248E  3180   	fcall	_setMessage
  4568                           
  4569                           ;main.c: 130: packet.packetData.byte = 0;
  4570  00C4  0021               	movlb	1	; select bank1
  4571  00C5  01A1               	clrf	loop@packet^(0+128)
  4572                           
  4573                           ;main.c: 131: packet.packetData.ACKRequest = 1;
  4574  00C6  1521               	bsf	loop@packet^(0+128),2
  4575                           
  4576                           ;main.c: 132: nrf24l01SendPacket(&packet);
  4577  00C7  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4578  00C8  3182  2243  3180   	fcall	_nrf24l01SendPacket
  4579                           
  4580                           ;main.c: 133: checkTXPower();
  4581  00CB  3187  27EA  3180   	fcall	_checkTXPower
  4582                           
  4583                           ;main.c: 134: sleep();
  4584  00CE  318D  25ED  3180   	fcall	_sleep
  4585                           
  4586                           ;main.c: 136: setMessage(&packet, "TEMP", getADCValue(0b111101, 162) - 40000);
  4587  00D1  3023               	movlw	low (STR_7| (0+32768))
  4588  00D2  0020               	movlb	0	; select bank0
  4589  00D3  00BD               	movwf	setMessage@topic
  4590  00D4  3090               	movlw	high (STR_7| (0+32768))
  4591  00D5  00BE               	movwf	setMessage@topic+1
  4592  00D6  30C0               	movlw	192
  4593  00D7  00D4               	movwf	??_loop
  4594  00D8  3063               	movlw	99
  4595  00D9  00D5               	movwf	??_loop+1
  4596  00DA  30FF               	movlw	255
  4597  00DB  00D6               	movwf	??_loop+2
  4598  00DC  30FF               	movlw	255
  4599  00DD  00D7               	movwf	??_loop+3
  4600  00DE  3000               	movlw	0
  4601  00DF  00B2               	movwf	getADCValue@divider+3
  4602  00E0  3000               	movlw	0
  4603  00E1  00B1               	movwf	getADCValue@divider+2
  4604  00E2  3000               	movlw	0
  4605  00E3  00B0               	movwf	getADCValue@divider+1
  4606  00E4  30A2               	movlw	162
  4607  00E5  00AF               	movwf	getADCValue@divider
  4608  00E6  303D               	movlw	61
  4609  00E7  3184  2406  3180   	fcall	_getADCValue
  4610  00EA  0020               	movlb	0	; select bank0
  4611  00EB  082F               	movf	?_getADCValue,w
  4612  00EC  07D4               	addwf	??_loop,f
  4613  00ED  0830               	movf	?_getADCValue+1,w
  4614  00EE  3DD5               	addwfc	??_loop+1,f
  4615  00EF  0831               	movf	?_getADCValue+2,w
  4616  00F0  3DD6               	addwfc	??_loop+2,f
  4617  00F1  0832               	movf	?_getADCValue+3,w
  4618  00F2  3DD7               	addwfc	??_loop+3,f
  4619  00F3  0857               	movf	??_loop+3,w
  4620  00F4  00C2               	movwf	setMessage@value+3
  4621  00F5  0856               	movf	??_loop+2,w
  4622  00F6  00C1               	movwf	setMessage@value+2
  4623  00F7  0855               	movf	??_loop+1,w
  4624  00F8  00C0               	movwf	setMessage@value+1
  4625  00F9  0854               	movf	??_loop,w
  4626  00FA  00BF               	movwf	setMessage@value
  4627  00FB  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4628  00FC  3184  248E  3180   	fcall	_setMessage
  4629                           
  4630                           ;main.c: 137: packet.packetData.byte = 0;
  4631  00FF  0021               	movlb	1	; select bank1
  4632  0100  01A1               	clrf	loop@packet^(0+128)
  4633                           
  4634                           ;main.c: 138: packet.packetData.ACKRequest = 1;
  4635  0101  1521               	bsf	loop@packet^(0+128),2
  4636                           
  4637                           ;main.c: 139: nrf24l01SendPacket(&packet);
  4638  0102  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4639  0103  3182  2243  3180   	fcall	_nrf24l01SendPacket
  4640                           
  4641                           ;main.c: 140: checkTXPower();
  4642  0106  3187  27EA  3180   	fcall	_checkTXPower
  4643                           
  4644                           ;main.c: 141: sleep();
  4645  0109  318D  25ED  3180   	fcall	_sleep
  4646                           
  4647                           ;main.c: 143: n_RF_SETUP_t rfSetup;;main.c: 144: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4648  010C  0020               	movlb	0	; select bank0
  4649  010D  01A1               	clrf	nrf24l01Send@data
  4650  010E  3006               	movlw	6
  4651  010F  318F  2707  3180   	fcall	_nrf24l01Send
  4652  0112  0020               	movlb	0	; select bank0
  4653  0113  00D4               	movwf	??_loop
  4654  0114  0854               	movf	??_loop,w
  4655  0115  0021               	movlb	1	; select bank1
  4656  0116  00A0               	movwf	loop@rfSetup^(0+128)
  4657                           
  4658                           ;main.c: 146: setMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4659  0117  3013               	movlw	low (STR_8| (0+32768))
  4660  0118  0020               	movlb	0	; select bank0
  4661  0119  00BD               	movwf	setMessage@topic
  4662  011A  3090               	movlw	high (STR_8| (0+32768))
  4663  011B  00BE               	movwf	setMessage@topic+1
  4664  011C  0021               	movlb	1	; select bank1
  4665  011D  0C20               	rrf	loop@rfSetup^(0+128),w
  4666  011E  3903               	andlw	3
  4667  011F  0020               	movlb	0	; select bank0
  4668  0120  00D4               	movwf	??_loop
  4669  0121  01D5               	clrf	??_loop+1
  4670  0122  01D6               	clrf	??_loop+2
  4671  0123  01D7               	clrf	??_loop+3
  4672  0124  0857               	movf	??_loop+3,w
  4673  0125  00C2               	movwf	setMessage@value+3
  4674  0126  0856               	movf	??_loop+2,w
  4675  0127  00C1               	movwf	setMessage@value+2
  4676  0128  0855               	movf	??_loop+1,w
  4677  0129  00C0               	movwf	setMessage@value+1
  4678  012A  0854               	movf	??_loop,w
  4679  012B  00BF               	movwf	setMessage@value
  4680  012C  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4681  012D  3184  248E  3180   	fcall	_setMessage
  4682                           
  4683                           ;main.c: 147: packet.packetData.byte = 0;
  4684  0130  0021               	movlb	1	; select bank1
  4685  0131  01A1               	clrf	loop@packet^(0+128)
  4686                           
  4687                           ;main.c: 148: packet.packetData.ACKRequest = 1;
  4688  0132  1521               	bsf	loop@packet^(0+128),2
  4689                           
  4690                           ;main.c: 149: nrf24l01SendPacket(&packet);
  4691  0133  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4692  0134  3182  2243  3180   	fcall	_nrf24l01SendPacket
  4693                           
  4694                           ;main.c: 150: checkTXPower();
  4695  0137  3187  27EA  3180   	fcall	_checkTXPower
  4696                           
  4697                           ;main.c: 151: sleep();
  4698  013A  318D  25ED         	fcall	_sleep
  4699  013C  0008               	return
  4700  013D                     __end_of_loop:	
  4701                           
  4702                           	psect	text10
  4703  0DED                     __ptext10:	
  4704 ;; *************** function _sleep *****************
  4705 ;; Defined at:
  4706 ;;		line 49 in file "main.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;		None
  4709 ;; Auto vars:     Size  Location     Type
  4710 ;;		None
  4711 ;; Return value:  Size  Location     Type
  4712 ;;                  1    wreg      void 
  4713 ;; Registers used:
  4714 ;;		wreg
  4715 ;; Tracked objects:
  4716 ;;		On entry : 0/0
  4717 ;;		On exit  : 0/0
  4718 ;;		Unchanged: 0/0
  4719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4724 ;;Total ram usage:        0 bytes
  4725 ;; Hardware stack levels used:    1
  4726 ;; Hardware stack levels required when called:    7
  4727 ;; This function calls:
  4728 ;;		Nothing
  4729 ;; This function is called by:
  4730 ;;		_loop
  4731 ;;		_main
  4732 ;;		_checkRxData
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           
  4737                           ;psect for function _sleep
  4738  0DED                     _sleep:	
  4739  0DED                     l225:	
  4740                           ;incstack = 0
  4741                           ; Regs used in _sleep: [wreg]
  4742                           ;main.c: 50: while (1){
  4743                           
  4744                           
  4745                           ;main.c: 52: counter++;
  4746  0DED  3001               	movlw	1
  4747  0DEE  0021               	movlb	1	; select bank1
  4748  0DEF  07E4               	addwf	_counter^(0+128),f
  4749  0DF0  3000               	movlw	0
  4750  0DF1  3DE5               	addwfc	(_counter+1)^(0+128),f
  4751  0DF2  3000               	movlw	0
  4752  0DF3  3DE6               	addwfc	(_counter+2)^(0+128),f
  4753  0DF4  3000               	movlw	0
  4754  0DF5  3DE7               	addwfc	(_counter+3)^(0+128),f
  4755  0DF6  0063               	sleep	;# 
  4756                           
  4757                           ;main.c: 55: __nop();
  4758  0DF7  0000               	nop
  4759                           
  4760                           ;main.c: 56: __nop();
  4761  0DF8  0000               	nop
  4762                           
  4763                           ;main.c: 58: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  4764  0DF9  0020               	movlb	0	; select bank0
  4765  0DFA  1A03               	btfsc	3,4	;volatile
  4766  0DFB  2DED               	goto	l225
  4767  0DFC  1D83               	btfss	3,3	;volatile
  4768  0DFD  0008               	return
  4769  0DFE  2DED               	goto	l225
  4770  0DFF                     __end_of_sleep:	
  4771                           ;main.c: 59: return;
  4772                           
  4773                           
  4774                           	psect	text11
  4775  048E                     __ptext11:	
  4776 ;; *************** function _setMessage *****************
  4777 ;; Defined at:
  4778 ;;		line 76 in file "main.c"
  4779 ;; Parameters:    Size  Location     Type
  4780 ;;  packet          1    wreg     PTR struct .
  4781 ;;		 -> main@packet(33), loop@packet(33), 
  4782 ;;  topic           2   29[BANK0 ] PTR const unsigned char 
  4783 ;;		 -> STR_10(5), STR_8(6), STR_7(5), STR_6(4), 
  4784 ;;		 -> STR_5(5), STR_4(5), STR_3(4), 
  4785 ;;  value           4   31[BANK0 ] unsigned long 
  4786 ;; Auto vars:     Size  Location     Type
  4787 ;;  packet          1   51[BANK0 ] PTR struct .
  4788 ;;		 -> main@packet(33), loop@packet(33), 
  4789 ;;  tempString     16   35[BANK0 ] unsigned char [16]
  4790 ;; Return value:  Size  Location     Type
  4791 ;;                  1    wreg      void 
  4792 ;; Registers used:
  4793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4794 ;; Tracked objects:
  4795 ;;		On entry : 0/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4799 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4800 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4802 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4803 ;;Total ram usage:       23 bytes
  4804 ;; Hardware stack levels used:    1
  4805 ;; Hardware stack levels required when called:    9
  4806 ;; This function calls:
  4807 ;;		_memset
  4808 ;;		_strcat
  4809 ;;		_ultoa
  4810 ;; This function is called by:
  4811 ;;		_loop
  4812 ;;		_main
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816                           
  4817                           ;psect for function _setMessage
  4818  048E                     _setMessage:	
  4819                           
  4820                           ;incstack = 0
  4821                           ; Regs used in _setMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4822                           ;setMessage@packet stored from wreg
  4823  048E  0020               	movlb	0	; select bank0
  4824  048F  00D3               	movwf	setMessage@packet
  4825                           
  4826                           ;main.c: 77: memset(packet->Message, 0, sizeof(packet->Message));
  4827  0490  0853               	movf	setMessage@packet,w
  4828  0491  3E01               	addlw	1
  4829  0492  00A1               	movwf	memset@p1
  4830  0493  3000               	movlw	0
  4831  0494  00A2               	movwf	memset@p1+1
  4832  0495  3000               	movlw	0
  4833  0496  00A3               	movwf	memset@c
  4834  0497  00A4               	movwf	memset@c+1
  4835  0498  3020               	movlw	32
  4836  0499  00A5               	movwf	memset@n
  4837  049A  3000               	movlw	0
  4838  049B  00A6               	movwf	memset@n+1
  4839  049C  318E  2641  3184   	fcall	_memset
  4840                           
  4841                           ;main.c: 79: strcat(packet->Message, romData.name);
  4842  049F  305D               	movlw	low (_romData+1)
  4843  04A0  0020               	movlb	0	; select bank0
  4844  04A1  00A1               	movwf	strcat@from
  4845  04A2  3000               	movlw	high (_romData+1)
  4846  04A3  00A2               	movwf	strcat@from+1
  4847  04A4  0853               	movf	setMessage@packet,w
  4848  04A5  3E01               	addlw	1
  4849  04A6  318F  27B4  3184   	fcall	_strcat
  4850                           
  4851                           ;main.c: 81: strcat(packet->Message, "/");
  4852  04A9  303E               	movlw	low (STR_1| (0+32768))
  4853  04AA  0020               	movlb	0	; select bank0
  4854  04AB  00A1               	movwf	strcat@from
  4855  04AC  3090               	movlw	high (STR_1| (0+32768))
  4856  04AD  00A2               	movwf	strcat@from+1
  4857  04AE  0853               	movf	setMessage@packet,w
  4858  04AF  3E01               	addlw	1
  4859  04B0  318F  27B4  3184   	fcall	_strcat
  4860                           
  4861                           ;main.c: 82: strcat(packet->Message, topic);
  4862  04B3  0020               	movlb	0	; select bank0
  4863  04B4  083E               	movf	setMessage@topic+1,w
  4864  04B5  00A2               	movwf	strcat@from+1
  4865  04B6  083D               	movf	setMessage@topic,w
  4866  04B7  00A1               	movwf	strcat@from
  4867  04B8  0853               	movf	setMessage@packet,w
  4868  04B9  3E01               	addlw	1
  4869  04BA  318F  27B4  3184   	fcall	_strcat
  4870                           
  4871                           ;main.c: 84: char tempString[16];;main.c: 86: ultoa(tempString, value, 10);
  4872  04BD  0020               	movlb	0	; select bank0
  4873  04BE  0842               	movf	setMessage@value+3,w
  4874  04BF  00B2               	movwf	ultoa@val+3
  4875  04C0  0841               	movf	setMessage@value+2,w
  4876  04C1  00B1               	movwf	ultoa@val+2
  4877  04C2  0840               	movf	setMessage@value+1,w
  4878  04C3  00B0               	movwf	ultoa@val+1
  4879  04C4  083F               	movf	setMessage@value,w
  4880  04C5  00AF               	movwf	ultoa@val
  4881  04C6  300A               	movlw	10
  4882  04C7  00B3               	movwf	ultoa@base
  4883  04C8  3000               	movlw	0
  4884  04C9  00B4               	movwf	ultoa@base+1
  4885  04CA  3043               	movlw	(low (setMessage@tempString| 0))& (0+255)
  4886  04CB  3183  237D  3184   	fcall	_ultoa
  4887                           
  4888                           ;main.c: 88: strcat(packet->Message, "/");
  4889  04CE  303E               	movlw	low (STR_1| (0+32768))
  4890  04CF  0020               	movlb	0	; select bank0
  4891  04D0  00A1               	movwf	strcat@from
  4892  04D1  3090               	movlw	high (STR_1| (0+32768))
  4893  04D2  00A2               	movwf	strcat@from+1
  4894  04D3  0853               	movf	setMessage@packet,w
  4895  04D4  3E01               	addlw	1
  4896  04D5  318F  27B4  3184   	fcall	_strcat
  4897                           
  4898                           ;main.c: 89: strcat(packet->Message, tempString);
  4899  04D8  3043               	movlw	low setMessage@tempString
  4900  04D9  0020               	movlb	0	; select bank0
  4901  04DA  00A1               	movwf	strcat@from
  4902  04DB  3000               	movlw	high setMessage@tempString
  4903  04DC  00A2               	movwf	strcat@from+1
  4904  04DD  0853               	movf	setMessage@packet,w
  4905  04DE  3E01               	addlw	1
  4906  04DF  318F  27B4         	fcall	_strcat
  4907  04E1  0008               	return
  4908  04E2                     __end_of_setMessage:	
  4909                           
  4910                           	psect	text12
  4911  037D                     __ptext12:	
  4912 ;; *************** function _ultoa *****************
  4913 ;; Defined at:
  4914 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ltoa.c"
  4915 ;; Parameters:    Size  Location     Type
  4916 ;;  buf             1    wreg     PTR unsigned char 
  4917 ;;		 -> setMessage@tempString(16), 
  4918 ;;  val             4   15[BANK0 ] unsigned long 
  4919 ;;  base            2   19[BANK0 ] int 
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;  buf             1   27[BANK0 ] PTR unsigned char 
  4922 ;;		 -> setMessage@tempString(16), 
  4923 ;;  v               4   22[BANK0 ] unsigned long 
  4924 ;;  c               1   26[BANK0 ] unsigned char 
  4925 ;; Return value:  Size  Location     Type
  4926 ;;                  1    wreg      PTR unsigned char 
  4927 ;; Registers used:
  4928 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4929 ;; Tracked objects:
  4930 ;;		On entry : 0/0
  4931 ;;		On exit  : 0/0
  4932 ;;		Unchanged: 0/0
  4933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4934 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4936 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4937 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4938 ;;Total ram usage:       13 bytes
  4939 ;; Hardware stack levels used:    1
  4940 ;; Hardware stack levels required when called:    8
  4941 ;; This function calls:
  4942 ;;		___lldiv
  4943 ;;		___llmod
  4944 ;; This function is called by:
  4945 ;;		_setMessage
  4946 ;; This function uses a non-reentrant model
  4947 ;;
  4948                           
  4949                           
  4950                           ;psect for function _ultoa
  4951  037D                     _ultoa:	
  4952                           
  4953                           ;incstack = 0
  4954                           ; Regs used in _ultoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4955                           ;ultoa@buf stored from wreg
  4956  037D  0020               	movlb	0	; select bank0
  4957  037E  00BB               	movwf	ultoa@buf
  4958  037F  0832               	movf	ultoa@val+3,w
  4959  0380  00B9               	movwf	ultoa@v+3
  4960  0381  0831               	movf	ultoa@val+2,w
  4961  0382  00B8               	movwf	ultoa@v+2
  4962  0383  0830               	movf	ultoa@val+1,w
  4963  0384  00B7               	movwf	ultoa@v+1
  4964  0385  082F               	movf	ultoa@val,w
  4965  0386  00B6               	movwf	ultoa@v
  4966  0387                     l2116:	
  4967  0387  0833               	movf	ultoa@base,w
  4968  0388  00A1               	movwf	___lldiv@divisor
  4969  0389  0834               	movf	ultoa@base+1,w
  4970  038A  00A2               	movwf	___lldiv@divisor+1
  4971  038B  0D89               	rlf	9,f
  4972  038C  3B89               	subwfb	9,f
  4973  038D  0989               	comf	9,f
  4974  038E  00A3               	movwf	___lldiv@divisor+2
  4975  038F  00A4               	movwf	___lldiv@divisor+3
  4976  0390  0839               	movf	ultoa@v+3,w
  4977  0391  00A8               	movwf	___lldiv@dividend+3
  4978  0392  0838               	movf	ultoa@v+2,w
  4979  0393  00A7               	movwf	___lldiv@dividend+2
  4980  0394  0837               	movf	ultoa@v+1,w
  4981  0395  00A6               	movwf	___lldiv@dividend+1
  4982  0396  0836               	movf	ultoa@v,w
  4983  0397  00A5               	movwf	___lldiv@dividend
  4984  0398  3184  24E2  3183   	fcall	___lldiv
  4985  039B  0020               	movlb	0	; select bank0
  4986  039C  0824               	movf	?___lldiv+3,w
  4987  039D  00B9               	movwf	ultoa@v+3
  4988  039E  0823               	movf	?___lldiv+2,w
  4989  039F  00B8               	movwf	ultoa@v+2
  4990  03A0  0822               	movf	?___lldiv+1,w
  4991  03A1  00B7               	movwf	ultoa@v+1
  4992  03A2  0821               	movf	?___lldiv,w
  4993  03A3  00B6               	movwf	ultoa@v
  4994  03A4  3001               	movlw	1
  4995  03A5  00B5               	movwf	??_ultoa
  4996  03A6  0835               	movf	??_ultoa,w
  4997  03A7  07BB               	addwf	ultoa@buf,f
  4998  03A8  0839               	movf	ultoa@v+3,w
  4999  03A9  0438               	iorwf	ultoa@v+2,w
  5000  03AA  0437               	iorwf	ultoa@v+1,w
  5001  03AB  0436               	iorwf	ultoa@v,w
  5002  03AC  1D03               	skipz
  5003  03AD  2B87               	goto	l2116
  5004  03AE  083B               	movf	ultoa@buf,w
  5005  03AF  0086               	movwf	6
  5006  03B0  0187               	clrf	7
  5007  03B1  0181               	clrf	1
  5008  03B2  3001               	movlw	1
  5009  03B3  02BB               	subwf	ultoa@buf,f
  5010  03B4                     l2126:	
  5011  03B4  0833               	movf	ultoa@base,w
  5012  03B5  00A1               	movwf	___llmod@divisor
  5013  03B6  0834               	movf	ultoa@base+1,w
  5014  03B7  00A2               	movwf	___llmod@divisor+1
  5015  03B8  0D89               	rlf	9,f
  5016  03B9  3B89               	subwfb	9,f
  5017  03BA  0989               	comf	9,f
  5018  03BB  00A3               	movwf	___llmod@divisor+2
  5019  03BC  00A4               	movwf	___llmod@divisor+3
  5020  03BD  0832               	movf	ultoa@val+3,w
  5021  03BE  00A8               	movwf	___llmod@dividend+3
  5022  03BF  0831               	movf	ultoa@val+2,w
  5023  03C0  00A7               	movwf	___llmod@dividend+2
  5024  03C1  0830               	movf	ultoa@val+1,w
  5025  03C2  00A6               	movwf	___llmod@dividend+1
  5026  03C3  082F               	movf	ultoa@val,w
  5027  03C4  00A5               	movwf	___llmod@dividend
  5028  03C5  3186  2664  3183   	fcall	___llmod
  5029  03C8  0020               	movlb	0	; select bank0
  5030  03C9  0821               	movf	?___llmod,w
  5031  03CA  00B5               	movwf	??_ultoa
  5032  03CB  0835               	movf	??_ultoa,w
  5033  03CC  00BA               	movwf	ultoa@c
  5034  03CD  0833               	movf	ultoa@base,w
  5035  03CE  00A1               	movwf	___lldiv@divisor
  5036  03CF  0834               	movf	ultoa@base+1,w
  5037  03D0  00A2               	movwf	___lldiv@divisor+1
  5038  03D1  0D89               	rlf	9,f
  5039  03D2  3B89               	subwfb	9,f
  5040  03D3  0989               	comf	9,f
  5041  03D4  00A3               	movwf	___lldiv@divisor+2
  5042  03D5  00A4               	movwf	___lldiv@divisor+3
  5043  03D6  0832               	movf	ultoa@val+3,w
  5044  03D7  00A8               	movwf	___lldiv@dividend+3
  5045  03D8  0831               	movf	ultoa@val+2,w
  5046  03D9  00A7               	movwf	___lldiv@dividend+2
  5047  03DA  0830               	movf	ultoa@val+1,w
  5048  03DB  00A6               	movwf	___lldiv@dividend+1
  5049  03DC  082F               	movf	ultoa@val,w
  5050  03DD  00A5               	movwf	___lldiv@dividend
  5051  03DE  3184  24E2  3183   	fcall	___lldiv
  5052  03E1  0020               	movlb	0	; select bank0
  5053  03E2  0824               	movf	?___lldiv+3,w
  5054  03E3  00B2               	movwf	ultoa@val+3
  5055  03E4  0823               	movf	?___lldiv+2,w
  5056  03E5  00B1               	movwf	ultoa@val+2
  5057  03E6  0822               	movf	?___lldiv+1,w
  5058  03E7  00B0               	movwf	ultoa@val+1
  5059  03E8  0821               	movf	?___lldiv,w
  5060  03E9  00AF               	movwf	ultoa@val
  5061  03EA  300A               	movlw	10
  5062  03EB  023A               	subwf	ultoa@c,w
  5063  03EC  1C03               	skipc
  5064  03ED  2BF2               	goto	l887
  5065  03EE  3007               	movlw	7
  5066  03EF  00B5               	movwf	??_ultoa
  5067  03F0  0835               	movf	??_ultoa,w
  5068  03F1  07BA               	addwf	ultoa@c,f
  5069  03F2                     l887:	
  5070  03F2  3030               	movlw	48
  5071  03F3  00B5               	movwf	??_ultoa
  5072  03F4  0835               	movf	??_ultoa,w
  5073  03F5  07BA               	addwf	ultoa@c,f
  5074  03F6  083A               	movf	ultoa@c,w
  5075  03F7  00B5               	movwf	??_ultoa
  5076  03F8  083B               	movf	ultoa@buf,w
  5077  03F9  0086               	movwf	6
  5078  03FA  0187               	clrf	7
  5079  03FB  0835               	movf	??_ultoa,w
  5080  03FC  0081               	movwf	1
  5081  03FD  3001               	movlw	1
  5082  03FE  02BB               	subwf	ultoa@buf,f
  5083  03FF  0832               	movf	ultoa@val+3,w
  5084  0400  0431               	iorwf	ultoa@val+2,w
  5085  0401  0430               	iorwf	ultoa@val+1,w
  5086  0402  042F               	iorwf	ultoa@val,w
  5087  0403  1903               	btfsc	3,2
  5088  0404  0008               	return
  5089  0405  2BB4               	goto	l2126
  5090  0406                     __end_of_ultoa:	
  5091                           ;	Return value of _ultoa is never used
  5092                           
  5093                           
  5094                           	psect	text13
  5095  0664                     __ptext13:	
  5096 ;; *************** function ___llmod *****************
  5097 ;; Defined at:
  5098 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  5099 ;; Parameters:    Size  Location     Type
  5100 ;;  divisor         4    1[BANK0 ] unsigned long 
  5101 ;;  dividend        4    5[BANK0 ] unsigned long 
  5102 ;; Auto vars:     Size  Location     Type
  5103 ;;  counter         1   10[BANK0 ] unsigned char 
  5104 ;; Return value:  Size  Location     Type
  5105 ;;                  4    1[BANK0 ] unsigned long 
  5106 ;; Registers used:
  5107 ;;		wreg, status,2, status,0
  5108 ;; Tracked objects:
  5109 ;;		On entry : 0/0
  5110 ;;		On exit  : 0/0
  5111 ;;		Unchanged: 0/0
  5112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5113 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5114 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5115 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5116 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5117 ;;Total ram usage:       10 bytes
  5118 ;; Hardware stack levels used:    1
  5119 ;; Hardware stack levels required when called:    7
  5120 ;; This function calls:
  5121 ;;		Nothing
  5122 ;; This function is called by:
  5123 ;;		_nrf24l01GetPipe
  5124 ;;		_ultoa
  5125 ;; This function uses a non-reentrant model
  5126 ;;
  5127                           
  5128                           
  5129                           ;psect for function ___llmod
  5130  0664                     ___llmod:	
  5131                           
  5132                           ;incstack = 0
  5133                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5134  0664  0020               	movlb	0	; select bank0
  5135  0665  0824               	movf	___llmod@divisor+3,w
  5136  0666  0423               	iorwf	___llmod@divisor+2,w
  5137  0667  0422               	iorwf	___llmod@divisor+1,w
  5138  0668  0421               	iorwf	___llmod@divisor,w
  5139  0669  1903               	skipnz
  5140  066A  2E9E               	goto	l2044
  5141  066B  01AA               	clrf	___llmod@counter
  5142  066C  0AAA               	incf	___llmod@counter,f
  5143  066D                     l2034:	
  5144  066D  1BA4               	btfsc	___llmod@divisor+3,7
  5145  066E  2E7B               	goto	l2036
  5146  066F  3001               	movlw	1
  5147  0670                     u905:	
  5148  0670  35A1               	lslf	___llmod@divisor,f
  5149  0671  0DA2               	rlf	___llmod@divisor+1,f
  5150  0672  0DA3               	rlf	___llmod@divisor+2,f
  5151  0673  0DA4               	rlf	___llmod@divisor+3,f
  5152  0674  0B89               	decfsz	9,f
  5153  0675  2E70               	goto	u905
  5154  0676  3001               	movlw	1
  5155  0677  00A9               	movwf	??___llmod
  5156  0678  0829               	movf	??___llmod,w
  5157  0679  07AA               	addwf	___llmod@counter,f
  5158  067A  2E6D               	goto	l2034
  5159  067B                     l2036:	
  5160  067B  0824               	movf	___llmod@divisor+3,w
  5161  067C  0228               	subwf	___llmod@dividend+3,w
  5162  067D  1D03               	skipz
  5163  067E  2E89               	goto	u925
  5164  067F  0823               	movf	___llmod@divisor+2,w
  5165  0680  0227               	subwf	___llmod@dividend+2,w
  5166  0681  1D03               	skipz
  5167  0682  2E89               	goto	u925
  5168  0683  0822               	movf	___llmod@divisor+1,w
  5169  0684  0226               	subwf	___llmod@dividend+1,w
  5170  0685  1D03               	skipz
  5171  0686  2E89               	goto	u925
  5172  0687  0821               	movf	___llmod@divisor,w
  5173  0688  0225               	subwf	___llmod@dividend,w
  5174  0689                     u925:	
  5175  0689  1C03               	skipc
  5176  068A  2E93               	goto	l2040
  5177  068B  0821               	movf	___llmod@divisor,w
  5178  068C  02A5               	subwf	___llmod@dividend,f
  5179  068D  0822               	movf	___llmod@divisor+1,w
  5180  068E  3BA6               	subwfb	___llmod@dividend+1,f
  5181  068F  0823               	movf	___llmod@divisor+2,w
  5182  0690  3BA7               	subwfb	___llmod@dividend+2,f
  5183  0691  0824               	movf	___llmod@divisor+3,w
  5184  0692  3BA8               	subwfb	___llmod@dividend+3,f
  5185  0693                     l2040:	
  5186  0693  3001               	movlw	1
  5187  0694                     u935:	
  5188  0694  36A4               	lsrf	___llmod@divisor+3,f
  5189  0695  0CA3               	rrf	___llmod@divisor+2,f
  5190  0696  0CA2               	rrf	___llmod@divisor+1,f
  5191  0697  0CA1               	rrf	___llmod@divisor,f
  5192  0698  0B89               	decfsz	9,f
  5193  0699  2E94               	goto	u935
  5194  069A  3001               	movlw	1
  5195  069B  02AA               	subwf	___llmod@counter,f
  5196  069C  1D03               	btfss	3,2
  5197  069D  2E7B               	goto	l2036
  5198  069E                     l2044:	
  5199  069E  0828               	movf	___llmod@dividend+3,w
  5200  069F  00A4               	movwf	?___llmod+3
  5201  06A0  0827               	movf	___llmod@dividend+2,w
  5202  06A1  00A3               	movwf	?___llmod+2
  5203  06A2  0826               	movf	___llmod@dividend+1,w
  5204  06A3  00A2               	movwf	?___llmod+1
  5205  06A4  0825               	movf	___llmod@dividend,w
  5206  06A5  00A1               	movwf	?___llmod
  5207  06A6  0008               	return
  5208  06A7                     __end_of___llmod:	
  5209                           
  5210                           	psect	text14
  5211  0FB4                     __ptext14:	
  5212 ;; *************** function _strcat *****************
  5213 ;; Defined at:
  5214 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5215 ;; Parameters:    Size  Location     Type
  5216 ;;  to              1    wreg     PTR unsigned char 
  5217 ;;		 -> main@packet(33), loop@packet(33), 
  5218 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  5219 ;;		 -> STR_10(5), STR_8(6), STR_7(5), STR_6(4), 
  5220 ;;		 -> STR_5(5), STR_4(5), STR_3(4), STR_2(2), 
  5221 ;;		 -> setMessage@tempString(16), STR_1(2), romData.name(16), romData(19), 
  5222 ;; Auto vars:     Size  Location     Type
  5223 ;;  to              1    5[BANK0 ] PTR unsigned char 
  5224 ;;		 -> main@packet(33), loop@packet(33), 
  5225 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  5226 ;;		 -> main@packet(33), loop@packet(33), 
  5227 ;; Return value:  Size  Location     Type
  5228 ;;                  1    wreg      PTR unsigned char 
  5229 ;; Registers used:
  5230 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5231 ;; Tracked objects:
  5232 ;;		On entry : 0/0
  5233 ;;		On exit  : 0/0
  5234 ;;		Unchanged: 0/0
  5235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5236 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5237 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5238 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5239 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5240 ;;Total ram usage:        5 bytes
  5241 ;; Hardware stack levels used:    1
  5242 ;; Hardware stack levels required when called:    7
  5243 ;; This function calls:
  5244 ;;		Nothing
  5245 ;; This function is called by:
  5246 ;;		_setMessage
  5247 ;; This function uses a non-reentrant model
  5248 ;;
  5249                           
  5250                           
  5251                           ;psect for function _strcat
  5252  0FB4                     _strcat:	
  5253                           
  5254                           ;incstack = 0
  5255                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  5256                           ;strcat@to stored from wreg
  5257  0FB4  0020               	movlb	0	; select bank0
  5258  0FB5  00A5               	movwf	strcat@to
  5259  0FB6  0825               	movf	strcat@to,w
  5260  0FB7  00A3               	movwf	??_strcat
  5261  0FB8  0823               	movf	??_strcat,w
  5262  0FB9  00A4               	movwf	strcat@cp
  5263  0FBA                     l2106:	
  5264  0FBA  0824               	movf	strcat@cp,w
  5265  0FBB  0086               	movwf	6
  5266  0FBC  0187               	clrf	7
  5267  0FBD  0801               	movf	1,w
  5268  0FBE  1903               	btfsc	3,2
  5269  0FBF  2FCD               	goto	l2112
  5270  0FC0  3001               	movlw	1
  5271  0FC1  00A3               	movwf	??_strcat
  5272  0FC2  0823               	movf	??_strcat,w
  5273  0FC3  07A4               	addwf	strcat@cp,f
  5274  0FC4  2FBA               	goto	l2106
  5275  0FC5                     l2108:	
  5276  0FC5  3001               	movlw	1
  5277  0FC6  00A3               	movwf	??_strcat
  5278  0FC7  0823               	movf	??_strcat,w
  5279  0FC8  07A4               	addwf	strcat@cp,f
  5280  0FC9  3001               	movlw	1
  5281  0FCA  07A1               	addwf	strcat@from,f
  5282  0FCB  3000               	movlw	0
  5283  0FCC  3DA2               	addwfc	strcat@from+1,f
  5284  0FCD                     l2112:	
  5285  0FCD  0824               	movf	strcat@cp,w
  5286  0FCE  0086               	movwf	6
  5287  0FCF  0187               	clrf	7
  5288  0FD0  0821               	movf	strcat@from,w
  5289  0FD1  0084               	movwf	4
  5290  0FD2  0822               	movf	strcat@from+1,w
  5291  0FD3  0085               	movwf	5
  5292  0FD4  0800               	movf	0,w	;code access
  5293  0FD5  3FC0               	movwi [0]fsr1
  5294  0FD6  0889               	movf	9,f
  5295  0FD7  1903               	btfsc	3,2
  5296  0FD8  0008               	return
  5297  0FD9  2FC5               	goto	l2108
  5298  0FDA                     __end_of_strcat:	
  5299                           ;	Return value of _strcat is never used
  5300                           
  5301                           
  5302                           	psect	text15
  5303  0E41                     __ptext15:	
  5304 ;; *************** function _memset *****************
  5305 ;; Defined at:
  5306 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  5307 ;; Parameters:    Size  Location     Type
  5308 ;;  p1              2    1[BANK0 ] PTR void 
  5309 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5310 ;;  c               2    3[BANK0 ] int 
  5311 ;;  n               2    5[BANK0 ] unsigned int 
  5312 ;; Auto vars:     Size  Location     Type
  5313 ;;  p               2    7[BANK0 ] PTR unsigned char 
  5314 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5315 ;; Return value:  Size  Location     Type
  5316 ;;                  2    1[BANK0 ] PTR void 
  5317 ;; Registers used:
  5318 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5319 ;; Tracked objects:
  5320 ;;		On entry : 0/0
  5321 ;;		On exit  : 0/0
  5322 ;;		Unchanged: 0/0
  5323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5324 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5325 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;Total ram usage:        8 bytes
  5329 ;; Hardware stack levels used:    1
  5330 ;; Hardware stack levels required when called:    7
  5331 ;; This function calls:
  5332 ;;		Nothing
  5333 ;; This function is called by:
  5334 ;;		_setMessage
  5335 ;; This function uses a non-reentrant model
  5336 ;;
  5337                           
  5338                           
  5339                           ;psect for function _memset
  5340  0E41                     _memset:	
  5341                           
  5342                           ;incstack = 0
  5343                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  5344  0E41  0020               	movlb	0	; select bank0
  5345  0E42  0822               	movf	memset@p1+1,w
  5346  0E43  00A8               	movwf	memset@p+1
  5347  0E44  0821               	movf	memset@p1,w
  5348  0E45  00A7               	movwf	memset@p
  5349  0E46                     l2836:	
  5350  0E46  3001               	movlw	1
  5351  0E47  02A5               	subwf	memset@n,f
  5352  0E48  3000               	movlw	0
  5353  0E49  3BA6               	subwfb	memset@n+1,f
  5354  0E4A  0A25               	incf	memset@n,w
  5355  0E4B  1903               	btfsc	3,2
  5356  0E4C  0A26               	incf	memset@n+1,w
  5357  0E4D  1903               	btfsc	3,2
  5358  0E4E  0008               	return
  5359  0E4F  0827               	movf	memset@p,w
  5360  0E50  0086               	movwf	6
  5361  0E51  0828               	movf	memset@p+1,w
  5362  0E52  0087               	movwf	7
  5363  0E53  0823               	movf	memset@c,w
  5364  0E54  0081               	movwf	1
  5365  0E55  3001               	movlw	1
  5366  0E56  07A7               	addwf	memset@p,f
  5367  0E57  3000               	movlw	0
  5368  0E58  3DA8               	addwfc	memset@p+1,f
  5369  0E59  2E46               	goto	l2836
  5370  0E5A                     __end_of_memset:	
  5371                           ;	Return value of _memset is never used
  5372                           
  5373                           
  5374                           	psect	text16
  5375  0243                     __ptext16:	
  5376 ;; *************** function _nrf24l01SendPacket *****************
  5377 ;; Defined at:
  5378 ;;		line 170 in file "nrf24l01.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;  Packet          1    wreg     PTR struct .
  5381 ;;		 -> main@packet(33), loop@packet(33), 
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;  Packet          1   11[BANK0 ] PTR struct .
  5384 ;;		 -> main@packet(33), loop@packet(33), 
  5385 ;;  i               1   12[BANK0 ] unsigned char 
  5386 ;; Return value:  Size  Location     Type
  5387 ;;                  1    wreg      void 
  5388 ;; Registers used:
  5389 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5390 ;; Tracked objects:
  5391 ;;		On entry : 0/0
  5392 ;;		On exit  : 0/0
  5393 ;;		Unchanged: 0/0
  5394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5396 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5397 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5398 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5399 ;;Total ram usage:        4 bytes
  5400 ;; Hardware stack levels used:    1
  5401 ;; Hardware stack levels required when called:   11
  5402 ;; This function calls:
  5403 ;;		_enableInterrupts
  5404 ;;		_nrf24l01CEHigh
  5405 ;;		_nrf24l01CELow
  5406 ;;		_nrf24l01ChangeTXPower
  5407 ;;		_nrf24l01SPIEnd
  5408 ;;		_nrf24l01SPISend
  5409 ;;		_nrf24l01SPIStart
  5410 ;;		_nrf24l01SetRXMode
  5411 ;;		_strlen
  5412 ;; This function is called by:
  5413 ;;		_loop
  5414 ;;		_main
  5415 ;;		_nrf24l01SendACK
  5416 ;; This function uses a non-reentrant model
  5417 ;;
  5418                           
  5419                           
  5420                           ;psect for function _nrf24l01SendPacket
  5421  0243                     _nrf24l01SendPacket:	
  5422                           
  5423                           ;incstack = 0
  5424                           ; Regs used in _nrf24l01SendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5425                           ;nrf24l01SendPacket@Packet stored from wreg
  5426  0243  0020               	movlb	0	; select bank0
  5427  0244  00AB               	movwf	nrf24l01SendPacket@Packet
  5428                           
  5429                           ;nrf24l01.c: 172: TXPacket = Packet;
  5430  0245  082B               	movf	nrf24l01SendPacket@Packet,w
  5431  0246  00A9               	movwf	??_nrf24l01SendPacket
  5432  0247  0829               	movf	??_nrf24l01SendPacket,w
  5433  0248  00D9               	movwf	_TXPacket
  5434  0249                     l335:	
  5435                           ;nrf24l01.c: 175: unsigned char i;;nrf24l01.c: 179: RESEND:
  5436                           
  5437                           
  5438                           ;nrf24l01.c: 182: i = 0xFF;
  5439  0249  30FF               	movlw	255
  5440  024A  0020               	movlb	0	; select bank0
  5441  024B  00A9               	movwf	??_nrf24l01SendPacket
  5442  024C  0829               	movf	??_nrf24l01SendPacket,w
  5443  024D  00AC               	movwf	nrf24l01SendPacket@i
  5444  024E                     l2358:	
  5445                           ;nrf24l01.c: 183: while (nrf24l01.TXBusy){
  5446                           
  5447  024E  0020               	movlb	0	; select bank0
  5448  024F  1C5B               	btfss	_nrf24l01,0	;volatile
  5449  0250  2A5A               	goto	l339
  5450                           
  5451                           ;nrf24l01.c: 184: if (!--i) {
  5452  0251  3001               	movlw	1
  5453  0252  02AC               	subwf	nrf24l01SendPacket@i,f
  5454  0253  1903               	btfsc	3,2
  5455  0254  2A49               	goto	l335
  5456                           
  5457                           ;nrf24l01.c: 186: };nrf24l01.c: 187: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  5458                           
  5459                           ;nrf24l01.c: 185: goto RESEND;
  5460  0255  3085               	movlw	133
  5461  0256                     u1717:	
  5462  0256  0B89               	decfsz	9,f
  5463  0257  2A56               	goto	u1717
  5464  0258  0000               	nop
  5465  0259  2A4E               	goto	l2358
  5466  025A                     l339:	
  5467                           
  5468                           ;nrf24l01.c: 188: };nrf24l01.c: 191: nrf24l01.TXBusy = 1;
  5469  025A  145B               	bsf	_nrf24l01,0	;volatile
  5470                           
  5471                           ;nrf24l01.c: 194: enableInterrupts(0);
  5472  025B  3000               	movlw	0
  5473  025C  318D  25D0  3182   	fcall	_enableInterrupts
  5474                           
  5475                           ;nrf24l01.c: 197: nrf24l01SetRXMode(0);
  5476  025F  3000               	movlw	0
  5477  0260  3186  26E6  3182   	fcall	_nrf24l01SetRXMode
  5478                           
  5479                           ;nrf24l01.c: 200: nrf24l01SPIStart();
  5480  0263  318D  25D8  3182   	fcall	_nrf24l01SPIStart
  5481                           
  5482                           ;nrf24l01.c: 203: nrf24l01SPISend((unsigned) 0b10110000);
  5483  0266  30B0               	movlw	176
  5484  0267  318D  25E0  3182   	fcall	_nrf24l01SPISend
  5485                           
  5486                           ;nrf24l01.c: 205: nrf24l01SPISend(TXPacket->packetData.byte);
  5487  026A  0020               	movlb	0	; select bank0
  5488  026B  0859               	movf	_TXPacket,w
  5489  026C  0086               	movwf	6
  5490  026D  0187               	clrf	7
  5491  026E  0801               	movf	1,w
  5492  026F  318D  25E0  3182   	fcall	_nrf24l01SPISend
  5493                           
  5494                           ;nrf24l01.c: 208: for (i = 0; (i < strlen(TXPacket->Message)) && (i < sizeof(TXPacket->M
      +                          essage)); i++){
  5495  0272  0020               	movlb	0	; select bank0
  5496  0273  01AC               	clrf	nrf24l01SendPacket@i
  5497  0274  2A85               	goto	l2370
  5498  0275                     l2366:	
  5499                           
  5500                           ;nrf24l01.c: 209: nrf24l01SPISend(TXPacket->Message[i]);
  5501  0275  082C               	movf	nrf24l01SendPacket@i,w
  5502  0276  3E01               	addlw	1
  5503  0277  0759               	addwf	_TXPacket,w
  5504  0278  00A9               	movwf	??_nrf24l01SendPacket
  5505  0279  0829               	movf	??_nrf24l01SendPacket,w
  5506  027A  0086               	movwf	6
  5507  027B  0187               	clrf	7
  5508  027C  0801               	movf	1,w
  5509  027D  318D  25E0  3182   	fcall	_nrf24l01SPISend
  5510  0280  3001               	movlw	1
  5511  0281  0020               	movlb	0	; select bank0
  5512  0282  00A9               	movwf	??_nrf24l01SendPacket
  5513  0283  0829               	movf	??_nrf24l01SendPacket,w
  5514  0284  07AC               	addwf	nrf24l01SendPacket@i,f
  5515  0285                     l2370:	
  5516  0285  0859               	movf	_TXPacket,w
  5517  0286  3E01               	addlw	1
  5518  0287  318F  2769  3182   	fcall	_strlen
  5519  028A  0020               	movlb	0	; select bank0
  5520  028B  082C               	movf	nrf24l01SendPacket@i,w
  5521  028C  00A9               	movwf	??_nrf24l01SendPacket
  5522  028D  01AA               	clrf	??_nrf24l01SendPacket+1
  5523  028E  0822               	movf	?_strlen+1,w
  5524  028F  022A               	subwf	??_nrf24l01SendPacket+1,w
  5525  0290  1D03               	skipz
  5526  0291  2A94               	goto	u1325
  5527  0292  0821               	movf	?_strlen,w
  5528  0293  0229               	subwf	??_nrf24l01SendPacket,w
  5529  0294                     u1325:	
  5530  0294  1803               	skipnc
  5531  0295  2A9A               	goto	l2374
  5532  0296  3020               	movlw	32
  5533  0297  022C               	subwf	nrf24l01SendPacket@i,w
  5534  0298  1C03               	skipc
  5535  0299  2A75               	goto	l2366
  5536  029A                     l2374:	
  5537                           
  5538                           ;nrf24l01.c: 210: };nrf24l01.c: 213: nrf24l01SPIEnd();
  5539  029A  318D  25C9  3182   	fcall	_nrf24l01SPIEnd
  5540                           
  5541                           ;nrf24l01.c: 216: nrf24l01CEHigh();
  5542  029D  318D  25B7  3182   	fcall	_nrf24l01CEHigh
  5543                           
  5544                           ;nrf24l01.c: 217: _delay((unsigned long)((20)*(16000000/4000000.0)));
  5545  02A0  301A               	movlw	26
  5546  02A1                     u1727:	
  5547  02A1  0B89               	decfsz	9,f
  5548  02A2  2AA1               	goto	u1727
  5549  02A3  3200               	nop2
  5550                           
  5551                           ;nrf24l01.c: 218: nrf24l01CELow();
  5552  02A4  318D  25BA  3182   	fcall	_nrf24l01CELow
  5553                           
  5554                           ;nrf24l01.c: 221: enableInterrupts(1);
  5555  02A7  3001               	movlw	1
  5556  02A8  318D  25D0  3182   	fcall	_enableInterrupts
  5557                           
  5558                           ;nrf24l01.c: 224: i = 0xFF;
  5559  02AB  30FF               	movlw	255
  5560  02AC  0020               	movlb	0	; select bank0
  5561  02AD  00A9               	movwf	??_nrf24l01SendPacket
  5562  02AE  0829               	movf	??_nrf24l01SendPacket,w
  5563  02AF  00AC               	movwf	nrf24l01SendPacket@i
  5564  02B0                     l2388:	
  5565                           ;nrf24l01.c: 225: while (nrf24l01.TXBusy){
  5566                           
  5567  02B0  0020               	movlb	0	; select bank0
  5568  02B1  1C5B               	btfss	_nrf24l01,0	;volatile
  5569  02B2  2ABC               	goto	l2390
  5570                           
  5571                           ;nrf24l01.c: 226: if (!--i) {
  5572  02B3  3001               	movlw	1
  5573  02B4  02AC               	subwf	nrf24l01SendPacket@i,f
  5574  02B5  1903               	btfsc	3,2
  5575  02B6  2A49               	goto	l335
  5576                           
  5577                           ;nrf24l01.c: 228: };nrf24l01.c: 229: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  5578                           
  5579                           ;nrf24l01.c: 227: goto RESEND;
  5580  02B7  3085               	movlw	133
  5581  02B8                     u1737:	
  5582  02B8  0B89               	decfsz	9,f
  5583  02B9  2AB8               	goto	u1737
  5584  02BA  0000               	nop
  5585  02BB  2AB0               	goto	l2388
  5586  02BC                     l2390:	
  5587                           
  5588                           ;nrf24l01.c: 230: };nrf24l01.c: 234: i = 0xFF;
  5589  02BC  30FF               	movlw	255
  5590  02BD  00A9               	movwf	??_nrf24l01SendPacket
  5591  02BE  0829               	movf	??_nrf24l01SendPacket,w
  5592  02BF  00AC               	movwf	nrf24l01SendPacket@i
  5593  02C0                     l2400:	
  5594                           ;nrf24l01.c: 235: while (TXPacket->packetData.ACKRequest){
  5595                           
  5596  02C0  0020               	movlb	0	; select bank0
  5597  02C1  0859               	movf	_TXPacket,w
  5598  02C2  0086               	movwf	6
  5599  02C3  0187               	clrf	7
  5600  02C4  1D01               	btfss	1,2
  5601  02C5  0008               	return
  5602                           
  5603                           ;nrf24l01.c: 236: if (!--i) {
  5604  02C6  3001               	movlw	1
  5605  02C7  02AC               	subwf	nrf24l01SendPacket@i,f
  5606  02C8  1D03               	btfss	3,2
  5607  02C9  2AED               	goto	l2398
  5608                           
  5609                           ;nrf24l01.c: 237: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  5610  02CA  3002               	movlw	2
  5611  02CB  0020               	movlb	0	; select bank0
  5612  02CC  00AA               	movwf	??_nrf24l01SendPacket+1
  5613  02CD  3004               	movlw	4
  5614  02CE  00A9               	movwf	??_nrf24l01SendPacket
  5615  02CF  30BA               	movlw	186
  5616  02D0                     u1747:	
  5617  02D0  0B89               	decfsz	9,f
  5618  02D1  2AD0               	goto	u1747
  5619  02D2  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5620  02D3  2AD0               	goto	u1747
  5621  02D4  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  5622  02D5  2AD0               	goto	u1747
  5623  02D6  0000               	nop
  5624                           
  5625                           ;nrf24l01.c: 238: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  5626  02D7  3002               	movlw	2
  5627  02D8  0020               	movlb	0	; select bank0
  5628  02D9  00AA               	movwf	??_nrf24l01SendPacket+1
  5629  02DA  3004               	movlw	4
  5630  02DB  00A9               	movwf	??_nrf24l01SendPacket
  5631  02DC  30BA               	movlw	186
  5632  02DD                     u1757:	
  5633  02DD  0B89               	decfsz	9,f
  5634  02DE  2ADD               	goto	u1757
  5635  02DF  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5636  02E0  2ADD               	goto	u1757
  5637  02E1  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  5638  02E2  2ADD               	goto	u1757
  5639  02E3  0000               	nop
  5640                           
  5641                           ;nrf24l01.c: 239: nrf24l01ChangeTXPower(1);
  5642  02E4  3001               	movlw	1
  5643  02E5  0020               	movlb	0	; select bank0
  5644  02E6  00A4               	movwf	nrf24l01ChangeTXPower@addPower
  5645  02E7  3000               	movlw	0
  5646  02E8  00A5               	movwf	nrf24l01ChangeTXPower@addPower+1
  5647  02E9  3186  26A7  3182   	fcall	_nrf24l01ChangeTXPower
  5648                           
  5649                           ;nrf24l01.c: 240: goto RESEND;
  5650  02EC  2A49               	goto	l335
  5651  02ED                     l2398:	
  5652                           
  5653                           ;nrf24l01.c: 241: };nrf24l01.c: 242: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  5654  02ED  3085               	movlw	133
  5655  02EE                     u1767:	
  5656  02EE  0B89               	decfsz	9,f
  5657  02EF  2AEE               	goto	u1767
  5658  02F0  0000               	nop
  5659  02F1  2AC0               	goto	l2400
  5660  02F2                     __end_of_nrf24l01SendPacket:	
  5661                           
  5662                           	psect	text17
  5663  0F69                     __ptext17:	
  5664 ;; *************** function _strlen *****************
  5665 ;; Defined at:
  5666 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  5667 ;; Parameters:    Size  Location     Type
  5668 ;;  s               1    wreg     PTR const unsigned char 
  5669 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5670 ;;		 -> loop@packet(33), romData(19), 
  5671 ;; Auto vars:     Size  Location     Type
  5672 ;;  s               1    8[BANK0 ] PTR const unsigned char 
  5673 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5674 ;;		 -> loop@packet(33), romData(19), 
  5675 ;;  cp              1    7[BANK0 ] PTR const unsigned char 
  5676 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5677 ;;		 -> loop@packet(33), romData(19), 
  5678 ;; Return value:  Size  Location     Type
  5679 ;;                  2    1[BANK0 ] unsigned int 
  5680 ;; Registers used:
  5681 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5682 ;; Tracked objects:
  5683 ;;		On entry : 0/0
  5684 ;;		On exit  : 0/0
  5685 ;;		Unchanged: 0/0
  5686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5687 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5688 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5689 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5690 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5691 ;;Total ram usage:        8 bytes
  5692 ;; Hardware stack levels used:    1
  5693 ;; Hardware stack levels required when called:    7
  5694 ;; This function calls:
  5695 ;;		Nothing
  5696 ;; This function is called by:
  5697 ;;		_nrf24l01GetPipe
  5698 ;;		_nrf24l01SendPacket
  5699 ;; This function uses a non-reentrant model
  5700 ;;
  5701                           
  5702                           
  5703                           ;psect for function _strlen
  5704  0F69                     _strlen:	
  5705                           
  5706                           ;incstack = 0
  5707                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5708                           ;strlen@s stored from wreg
  5709  0F69  0020               	movlb	0	; select bank0
  5710  0F6A  00A8               	movwf	strlen@s
  5711  0F6B  0828               	movf	strlen@s,w
  5712  0F6C  00A3               	movwf	??_strlen
  5713  0F6D  0823               	movf	??_strlen,w
  5714  0F6E  00A7               	movwf	strlen@cp
  5715  0F6F                     l2164:	
  5716  0F6F  0827               	movf	strlen@cp,w
  5717  0F70  0086               	movwf	6
  5718  0F71  0187               	clrf	7
  5719  0F72  0801               	movf	1,w
  5720  0F73  1903               	btfsc	3,2
  5721  0F74  2F7A               	goto	l2166
  5722  0F75  3001               	movlw	1
  5723  0F76  00A3               	movwf	??_strlen
  5724  0F77  0823               	movf	??_strlen,w
  5725  0F78  07A7               	addwf	strlen@cp,f
  5726  0F79  2F6F               	goto	l2164
  5727  0F7A                     l2166:	
  5728  0F7A  0828               	movf	strlen@s,w
  5729  0F7B  00A3               	movwf	??_strlen
  5730  0F7C  3000               	movlw	0
  5731  0F7D  00A4               	movwf	??_strlen+1
  5732  0F7E  09A3               	comf	??_strlen,f
  5733  0F7F  09A4               	comf	??_strlen+1,f
  5734  0F80  0AA3               	incf	??_strlen,f
  5735  0F81  1903               	skipnz
  5736  0F82  0AA4               	incf	??_strlen+1,f
  5737  0F83  0827               	movf	strlen@cp,w
  5738  0F84  00A5               	movwf	??_strlen+2
  5739  0F85  3000               	movlw	0
  5740  0F86  00A6               	movwf	??_strlen+3
  5741  0F87  0823               	movf	??_strlen,w
  5742  0F88  0725               	addwf	??_strlen+2,w
  5743  0F89  00A1               	movwf	?_strlen
  5744  0F8A  0824               	movf	??_strlen+1,w
  5745  0F8B  3D26               	addwfc	??_strlen+3,w
  5746  0F8C  00A2               	movwf	?_strlen+1
  5747  0F8D  0008               	return
  5748  0F8E                     __end_of_strlen:	
  5749                           
  5750                           	psect	text18
  5751  06E6                     __ptext18:	
  5752 ;; *************** function _nrf24l01SetRXMode *****************
  5753 ;; Defined at:
  5754 ;;		line 54 in file "nrf24l01.c"
  5755 ;; Parameters:    Size  Location     Type
  5756 ;;  rxMode          1    wreg     unsigned char 
  5757 ;; Auto vars:     Size  Location     Type
  5758 ;;  rxMode          1    6[BANK0 ] unsigned char 
  5759 ;;  config          1    5[BANK0 ] struct .
  5760 ;; Return value:  Size  Location     Type
  5761 ;;                  1    wreg      void 
  5762 ;; Registers used:
  5763 ;;		wreg, status,2, status,0, pclath, cstack
  5764 ;; Tracked objects:
  5765 ;;		On entry : 0/0
  5766 ;;		On exit  : 0/0
  5767 ;;		Unchanged: 0/0
  5768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5770 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5771 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5772 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5773 ;;Total ram usage:        3 bytes
  5774 ;; Hardware stack levels used:    1
  5775 ;; Hardware stack levels required when called:   10
  5776 ;; This function calls:
  5777 ;;		_nrf24l01CEHigh
  5778 ;;		_nrf24l01CELow
  5779 ;;		_nrf24l01Send
  5780 ;; This function is called by:
  5781 ;;		_nrf24l01SendPacket
  5782 ;;		_checkRxData
  5783 ;; This function uses a non-reentrant model
  5784 ;;
  5785                           
  5786                           
  5787                           ;psect for function _nrf24l01SetRXMode
  5788  06E6                     _nrf24l01SetRXMode:	
  5789                           
  5790                           ;incstack = 0
  5791                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  5792                           ;nrf24l01SetRXMode@rxMode stored from wreg
  5793  06E6  0020               	movlb	0	; select bank0
  5794  06E7  00A6               	movwf	nrf24l01SetRXMode@rxMode
  5795                           
  5796                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  5797  06E8  01A1               	clrf	nrf24l01Send@data
  5798  06E9  3000               	movlw	0
  5799  06EA  318F  2707  3186   	fcall	_nrf24l01Send
  5800  06ED  0020               	movlb	0	; select bank0
  5801  06EE  00A4               	movwf	??_nrf24l01SetRXMode
  5802  06EF  0824               	movf	??_nrf24l01SetRXMode,w
  5803  06F0  00A5               	movwf	nrf24l01SetRXMode@config
  5804                           
  5805                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  5806  06F1  0825               	movf	nrf24l01SetRXMode@config,w
  5807  06F2  3901               	andlw	1
  5808  06F3  0626               	xorwf	nrf24l01SetRXMode@rxMode,w
  5809  06F4  1903               	skipnz
  5810  06F5  2F1A               	goto	l2092
  5811                           
  5812                           ;nrf24l01.c: 65: nrf24l01CELow();
  5813  06F6  318D  25BA  3186   	fcall	_nrf24l01CELow
  5814                           
  5815                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5816  06F9  30A0               	movlw	160
  5817  06FA                     u1777:	
  5818  06FA  3200               	nop2
  5819  06FB  0B89               	decfsz	9,f
  5820  06FC  2EFA               	goto	u1777
  5821                           
  5822                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  5823  06FD  0020               	movlb	0	; select bank0
  5824  06FE  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5825  06FF  3901               	andlw	1
  5826  0700  1025               	bcf	nrf24l01SetRXMode@config,0
  5827  0701  1D03               	skipz
  5828  0702  1425               	bsf	nrf24l01SetRXMode@config,0
  5829                           
  5830                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  5831  0703  0825               	movf	nrf24l01SetRXMode@config,w
  5832  0704  00A4               	movwf	??_nrf24l01SetRXMode
  5833  0705  0824               	movf	??_nrf24l01SetRXMode,w
  5834  0706  00A1               	movwf	nrf24l01Send@data
  5835  0707  3020               	movlw	32
  5836  0708  318F  2707  3186   	fcall	_nrf24l01Send
  5837                           
  5838                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5839  070B  30A0               	movlw	160
  5840  070C                     u1787:	
  5841  070C  3200               	nop2
  5842  070D  0B89               	decfsz	9,f
  5843  070E  2F0C               	goto	u1787
  5844                           
  5845                           ;nrf24l01.c: 76: if (rxMode){
  5846  070F  0020               	movlb	0	; select bank0
  5847  0710  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5848  0711  1903               	btfsc	3,2
  5849  0712  2F1A               	goto	l2092
  5850                           
  5851                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  5852  0713  318D  25B7  3186   	fcall	_nrf24l01CEHigh
  5853                           
  5854                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5855  0716  30A0               	movlw	160
  5856  0717                     u1797:	
  5857  0717  3200               	nop2
  5858  0718  0B89               	decfsz	9,f
  5859  0719  2F17               	goto	u1797
  5860  071A                     l2092:	
  5861                           
  5862                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  5863  071A  0020               	movlb	0	; select bank0
  5864  071B  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5865  071C  3901               	andlw	1
  5866  071D  115B               	bcf	_nrf24l01,2	;volatile
  5867  071E  1D03               	skipz
  5868  071F  155B               	bsf	_nrf24l01,2	;volatile
  5869  0720  0008               	return
  5870  0721                     __end_of_nrf24l01SetRXMode:	
  5871                           
  5872                           	psect	text19
  5873  0406                     __ptext19:	
  5874 ;; *************** function _getADCValue *****************
  5875 ;; Defined at:
  5876 ;;		line 23 in file "main.c"
  5877 ;; Parameters:    Size  Location     Type
  5878 ;;  channel         1    wreg     unsigned char 
  5879 ;;  divider         4   15[BANK0 ] unsigned long 
  5880 ;; Auto vars:     Size  Location     Type
  5881 ;;  channel         1   23[BANK0 ] unsigned char 
  5882 ;;  adcSum          4   25[BANK0 ] unsigned long 
  5883 ;;  adcLoop         1   24[BANK0 ] unsigned char 
  5884 ;; Return value:  Size  Location     Type
  5885 ;;                  4   15[BANK0 ] unsigned long 
  5886 ;; Registers used:
  5887 ;;		wreg, status,2, status,0, pclath, cstack
  5888 ;; Tracked objects:
  5889 ;;		On entry : 0/0
  5890 ;;		On exit  : 0/0
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5893 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5894 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5895 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5896 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5897 ;;Total ram usage:       14 bytes
  5898 ;; Hardware stack levels used:    1
  5899 ;; Hardware stack levels required when called:    8
  5900 ;; This function calls:
  5901 ;;		___lldiv
  5902 ;;		___lmul
  5903 ;; This function is called by:
  5904 ;;		_loop
  5905 ;; This function uses a non-reentrant model
  5906 ;;
  5907                           
  5908                           
  5909                           ;psect for function _getADCValue
  5910  0406                     _getADCValue:	
  5911                           
  5912                           ;incstack = 0
  5913                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  5914                           ;getADCValue@channel stored from wreg
  5915  0406  0020               	movlb	0	; select bank0
  5916  0407  00B7               	movwf	getADCValue@channel
  5917                           
  5918                           ;main.c: 25: unsigned long adcSum = 0;
  5919  0408  3000               	movlw	0
  5920  0409  00BC               	movwf	getADCValue@adcSum+3
  5921  040A  3000               	movlw	0
  5922  040B  00BB               	movwf	getADCValue@adcSum+2
  5923  040C  3000               	movlw	0
  5924  040D  00BA               	movwf	getADCValue@adcSum+1
  5925  040E  3000               	movlw	0
  5926  040F  00B9               	movwf	getADCValue@adcSum
  5927                           
  5928                           ;main.c: 26: unsigned char adcLoop = 255;
  5929  0410  30FF               	movlw	255
  5930  0411  00B3               	movwf	??_getADCValue
  5931  0412  0833               	movf	??_getADCValue,w
  5932  0413  00B8               	movwf	getADCValue@adcLoop
  5933                           
  5934                           ;main.c: 28: ADCON0bits.CHS = channel;
  5935  0414  0837               	movf	getADCValue@channel,w
  5936  0415  00B3               	movwf	??_getADCValue
  5937  0416  0DB3               	rlf	??_getADCValue,f
  5938  0417  0DB3               	rlf	??_getADCValue,f
  5939  0418  0021               	movlb	1	; select bank1
  5940  0419  081D               	movf	29,w	;volatile
  5941  041A  0020               	movlb	0	; select bank0
  5942  041B  0633               	xorwf	??_getADCValue,w
  5943  041C  3903               	andlw	-253
  5944  041D  0633               	xorwf	??_getADCValue,w
  5945  041E  0021               	movlb	1	; select bank1
  5946  041F  009D               	movwf	29	;volatile
  5947                           
  5948                           ;main.c: 29: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5949  0420  30A0               	movlw	160
  5950  0421                     u1807:	
  5951  0421  3200               	nop2
  5952  0422  0B89               	decfsz	9,f
  5953  0423  2C21               	goto	u1807
  5954  0424                     l2314:	
  5955                           ;main.c: 31: while (--adcLoop){
  5956                           
  5957  0424  3001               	movlw	1
  5958  0425  0020               	movlb	0	; select bank0
  5959  0426  02B8               	subwf	getADCValue@adcLoop,f
  5960  0427  1903               	btfsc	3,2
  5961  0428  2C4E               	goto	l2316
  5962                           
  5963                           ;main.c: 33: ADCON0bits.ADGO = 1;
  5964  0429  0021               	movlb	1	; select bank1
  5965  042A  149D               	bsf	29,1	;volatile
  5966  042B                     l218:	
  5967                           ;main.c: 35: while (ADCON0bits.ADGO){
  5968                           
  5969  042B  0021               	movlb	1	; select bank1
  5970  042C  1C9D               	btfss	29,1	;volatile
  5971  042D  2C30               	goto	l2312
  5972                           
  5973                           ;main.c: 36: __nop();
  5974  042E  0000               	nop
  5975  042F  2C2B               	goto	l218
  5976  0430                     l2312:	
  5977                           
  5978                           ;main.c: 37: };main.c: 39: adcSum+= ADRESL;
  5979  0430  081B               	movf	27,w	;volatile
  5980  0431  0020               	movlb	0	; select bank0
  5981  0432  00B3               	movwf	??_getADCValue
  5982  0433  01B4               	clrf	??_getADCValue+1
  5983  0434  01B5               	clrf	??_getADCValue+2
  5984  0435  01B6               	clrf	??_getADCValue+3
  5985  0436  0833               	movf	??_getADCValue,w
  5986  0437  07B9               	addwf	getADCValue@adcSum,f
  5987  0438  0834               	movf	??_getADCValue+1,w
  5988  0439  3DBA               	addwfc	getADCValue@adcSum+1,f
  5989  043A  0835               	movf	??_getADCValue+2,w
  5990  043B  3DBB               	addwfc	getADCValue@adcSum+2,f
  5991  043C  0836               	movf	??_getADCValue+3,w
  5992  043D  3DBC               	addwfc	getADCValue@adcSum+3,f
  5993                           
  5994                           ;main.c: 40: adcSum+= (unsigned) (ADRESH << 8);
  5995  043E  0021               	movlb	1	; select bank1
  5996  043F  081C               	movf	28,w	;volatile
  5997  0440  0020               	movlb	0	; select bank0
  5998  0441  00B3               	movwf	??_getADCValue
  5999  0442  01B4               	clrf	??_getADCValue+1
  6000  0443  0833               	movf	??_getADCValue,w
  6001  0444  00B4               	movwf	??_getADCValue+1
  6002  0445  01B3               	clrf	??_getADCValue
  6003  0446  0833               	movf	??_getADCValue,w
  6004  0447  07B9               	addwf	getADCValue@adcSum,f
  6005  0448  0834               	movf	??_getADCValue+1,w
  6006  0449  3DBA               	addwfc	getADCValue@adcSum+1,f
  6007  044A  3000               	movlw	0
  6008  044B  3DBB               	addwfc	getADCValue@adcSum+2,f
  6009  044C  3DBC               	addwfc	getADCValue@adcSum+3,f
  6010  044D  2C24               	goto	l2314
  6011  044E                     l2316:	
  6012                           
  6013                           ;main.c: 41: };main.c: 43: adcSum*= 100;
  6014  044E  3000               	movlw	0
  6015  044F  00A4               	movwf	___lmul@multiplier+3
  6016  0450  3000               	movlw	0
  6017  0451  00A3               	movwf	___lmul@multiplier+2
  6018  0452  3000               	movlw	0
  6019  0453  00A2               	movwf	___lmul@multiplier+1
  6020  0454  3064               	movlw	100
  6021  0455  00A1               	movwf	___lmul@multiplier
  6022  0456  083C               	movf	getADCValue@adcSum+3,w
  6023  0457  00A8               	movwf	___lmul@multiplicand+3
  6024  0458  083B               	movf	getADCValue@adcSum+2,w
  6025  0459  00A7               	movwf	___lmul@multiplicand+2
  6026  045A  083A               	movf	getADCValue@adcSum+1,w
  6027  045B  00A6               	movwf	___lmul@multiplicand+1
  6028  045C  0839               	movf	getADCValue@adcSum,w
  6029  045D  00A5               	movwf	___lmul@multiplicand
  6030  045E  3187  278A  3184   	fcall	___lmul
  6031  0461  0020               	movlb	0	; select bank0
  6032  0462  0824               	movf	?___lmul+3,w
  6033  0463  00BC               	movwf	getADCValue@adcSum+3
  6034  0464  0823               	movf	?___lmul+2,w
  6035  0465  00BB               	movwf	getADCValue@adcSum+2
  6036  0466  0822               	movf	?___lmul+1,w
  6037  0467  00BA               	movwf	getADCValue@adcSum+1
  6038  0468  0821               	movf	?___lmul,w
  6039  0469  00B9               	movwf	getADCValue@adcSum
  6040                           
  6041                           ;main.c: 44: adcSum/= divider;
  6042  046A  0832               	movf	getADCValue@divider+3,w
  6043  046B  00A4               	movwf	___lldiv@divisor+3
  6044  046C  0831               	movf	getADCValue@divider+2,w
  6045  046D  00A3               	movwf	___lldiv@divisor+2
  6046  046E  0830               	movf	getADCValue@divider+1,w
  6047  046F  00A2               	movwf	___lldiv@divisor+1
  6048  0470  082F               	movf	getADCValue@divider,w
  6049  0471  00A1               	movwf	___lldiv@divisor
  6050  0472  083C               	movf	getADCValue@adcSum+3,w
  6051  0473  00A8               	movwf	___lldiv@dividend+3
  6052  0474  083B               	movf	getADCValue@adcSum+2,w
  6053  0475  00A7               	movwf	___lldiv@dividend+2
  6054  0476  083A               	movf	getADCValue@adcSum+1,w
  6055  0477  00A6               	movwf	___lldiv@dividend+1
  6056  0478  0839               	movf	getADCValue@adcSum,w
  6057  0479  00A5               	movwf	___lldiv@dividend
  6058  047A  3184  24E2         	fcall	___lldiv
  6059  047C  0020               	movlb	0	; select bank0
  6060  047D  0824               	movf	?___lldiv+3,w
  6061  047E  00BC               	movwf	getADCValue@adcSum+3
  6062  047F  0823               	movf	?___lldiv+2,w
  6063  0480  00BB               	movwf	getADCValue@adcSum+2
  6064  0481  0822               	movf	?___lldiv+1,w
  6065  0482  00BA               	movwf	getADCValue@adcSum+1
  6066  0483  0821               	movf	?___lldiv,w
  6067  0484  00B9               	movwf	getADCValue@adcSum
  6068                           
  6069                           ;main.c: 46: return adcSum;
  6070  0485  083C               	movf	getADCValue@adcSum+3,w
  6071  0486  00B2               	movwf	?_getADCValue+3
  6072  0487  083B               	movf	getADCValue@adcSum+2,w
  6073  0488  00B1               	movwf	?_getADCValue+2
  6074  0489  083A               	movf	getADCValue@adcSum+1,w
  6075  048A  00B0               	movwf	?_getADCValue+1
  6076  048B  0839               	movf	getADCValue@adcSum,w
  6077  048C  00AF               	movwf	?_getADCValue
  6078  048D  0008               	return
  6079  048E                     __end_of_getADCValue:	
  6080                           
  6081                           	psect	text20
  6082  078A                     __ptext20:	
  6083 ;; *************** function ___lmul *****************
  6084 ;; Defined at:
  6085 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
  6086 ;; Parameters:    Size  Location     Type
  6087 ;;  multiplier      4    1[BANK0 ] unsigned long 
  6088 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  6089 ;; Auto vars:     Size  Location     Type
  6090 ;;  product         4    9[BANK0 ] unsigned long 
  6091 ;; Return value:  Size  Location     Type
  6092 ;;                  4    1[BANK0 ] unsigned long 
  6093 ;; Registers used:
  6094 ;;		wreg, status,2, status,0
  6095 ;; Tracked objects:
  6096 ;;		On entry : 0/0
  6097 ;;		On exit  : 0/0
  6098 ;;		Unchanged: 0/0
  6099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6100 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6101 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6103 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6104 ;;Total ram usage:       12 bytes
  6105 ;; Hardware stack levels used:    1
  6106 ;; Hardware stack levels required when called:    7
  6107 ;; This function calls:
  6108 ;;		Nothing
  6109 ;; This function is called by:
  6110 ;;		_getADCValue
  6111 ;; This function uses a non-reentrant model
  6112 ;;
  6113                           
  6114                           
  6115                           ;psect for function ___lmul
  6116  078A                     ___lmul:	
  6117                           
  6118                           ;incstack = 0
  6119                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6120  078A  3000               	movlw	0
  6121  078B  0020               	movlb	0	; select bank0
  6122  078C  00AC               	movwf	___lmul@product+3
  6123  078D  3000               	movlw	0
  6124  078E  00AB               	movwf	___lmul@product+2
  6125  078F  3000               	movlw	0
  6126  0790  00AA               	movwf	___lmul@product+1
  6127  0791  3000               	movlw	0
  6128  0792  00A9               	movwf	___lmul@product
  6129  0793                     l2222:	
  6130  0793  1C21               	btfss	___lmul@multiplier,0
  6131  0794  2F9D               	goto	l2226
  6132  0795  0825               	movf	___lmul@multiplicand,w
  6133  0796  07A9               	addwf	___lmul@product,f
  6134  0797  0826               	movf	___lmul@multiplicand+1,w
  6135  0798  3DAA               	addwfc	___lmul@product+1,f
  6136  0799  0827               	movf	___lmul@multiplicand+2,w
  6137  079A  3DAB               	addwfc	___lmul@product+2,f
  6138  079B  0828               	movf	___lmul@multiplicand+3,w
  6139  079C  3DAC               	addwfc	___lmul@product+3,f
  6140  079D                     l2226:	
  6141  079D  3001               	movlw	1
  6142  079E                     u1195:	
  6143  079E  35A5               	lslf	___lmul@multiplicand,f
  6144  079F  0DA6               	rlf	___lmul@multiplicand+1,f
  6145  07A0  0DA7               	rlf	___lmul@multiplicand+2,f
  6146  07A1  0DA8               	rlf	___lmul@multiplicand+3,f
  6147  07A2  0B89               	decfsz	9,f
  6148  07A3  2F9E               	goto	u1195
  6149  07A4  3001               	movlw	1
  6150  07A5                     u1205:	
  6151  07A5  36A4               	lsrf	___lmul@multiplier+3,f
  6152  07A6  0CA3               	rrf	___lmul@multiplier+2,f
  6153  07A7  0CA2               	rrf	___lmul@multiplier+1,f
  6154  07A8  0CA1               	rrf	___lmul@multiplier,f
  6155  07A9  0B89               	decfsz	9,f
  6156  07AA  2FA5               	goto	u1205
  6157  07AB  0824               	movf	___lmul@multiplier+3,w
  6158  07AC  0423               	iorwf	___lmul@multiplier+2,w
  6159  07AD  0422               	iorwf	___lmul@multiplier+1,w
  6160  07AE  0421               	iorwf	___lmul@multiplier,w
  6161  07AF  1D03               	skipz
  6162  07B0  2F93               	goto	l2222
  6163  07B1  082C               	movf	___lmul@product+3,w
  6164  07B2  00A4               	movwf	?___lmul+3
  6165  07B3  082B               	movf	___lmul@product+2,w
  6166  07B4  00A3               	movwf	?___lmul+2
  6167  07B5  082A               	movf	___lmul@product+1,w
  6168  07B6  00A2               	movwf	?___lmul+1
  6169  07B7  0829               	movf	___lmul@product,w
  6170  07B8  00A1               	movwf	?___lmul
  6171  07B9  0008               	return
  6172  07BA                     __end_of___lmul:	
  6173                           
  6174                           	psect	text21
  6175  04E2                     __ptext21:	
  6176 ;; *************** function ___lldiv *****************
  6177 ;; Defined at:
  6178 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  6179 ;; Parameters:    Size  Location     Type
  6180 ;;  divisor         4    1[BANK0 ] unsigned long 
  6181 ;;  dividend        4    5[BANK0 ] unsigned long 
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;  quotient        4   10[BANK0 ] unsigned long 
  6184 ;;  counter         1   14[BANK0 ] unsigned char 
  6185 ;; Return value:  Size  Location     Type
  6186 ;;                  4    1[BANK0 ] unsigned long 
  6187 ;; Registers used:
  6188 ;;		wreg, status,2, status,0
  6189 ;; Tracked objects:
  6190 ;;		On entry : 0/0
  6191 ;;		On exit  : 0/0
  6192 ;;		Unchanged: 0/0
  6193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6194 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6198 ;;Total ram usage:       14 bytes
  6199 ;; Hardware stack levels used:    1
  6200 ;; Hardware stack levels required when called:    7
  6201 ;; This function calls:
  6202 ;;		Nothing
  6203 ;; This function is called by:
  6204 ;;		_getADCValue
  6205 ;;		_ultoa
  6206 ;; This function uses a non-reentrant model
  6207 ;;
  6208                           
  6209                           
  6210                           ;psect for function ___lldiv
  6211  04E2                     ___lldiv:	
  6212                           
  6213                           ;incstack = 0
  6214                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6215  04E2  3000               	movlw	0
  6216  04E3  0020               	movlb	0	; select bank0
  6217  04E4  00AD               	movwf	___lldiv@quotient+3
  6218  04E5  3000               	movlw	0
  6219  04E6  00AC               	movwf	___lldiv@quotient+2
  6220  04E7  3000               	movlw	0
  6221  04E8  00AB               	movwf	___lldiv@quotient+1
  6222  04E9  3000               	movlw	0
  6223  04EA  00AA               	movwf	___lldiv@quotient
  6224  04EB  0824               	movf	___lldiv@divisor+3,w
  6225  04EC  0423               	iorwf	___lldiv@divisor+2,w
  6226  04ED  0422               	iorwf	___lldiv@divisor+1,w
  6227  04EE  0421               	iorwf	___lldiv@divisor,w
  6228  04EF  1903               	skipnz
  6229  04F0  2D2C               	goto	l2024
  6230  04F1  01AE               	clrf	___lldiv@counter
  6231  04F2  0AAE               	incf	___lldiv@counter,f
  6232  04F3                     l2010:	
  6233  04F3  1BA4               	btfsc	___lldiv@divisor+3,7
  6234  04F4  2D01               	goto	l2012
  6235  04F5  3001               	movlw	1
  6236  04F6                     u835:	
  6237  04F6  35A1               	lslf	___lldiv@divisor,f
  6238  04F7  0DA2               	rlf	___lldiv@divisor+1,f
  6239  04F8  0DA3               	rlf	___lldiv@divisor+2,f
  6240  04F9  0DA4               	rlf	___lldiv@divisor+3,f
  6241  04FA  0B89               	decfsz	9,f
  6242  04FB  2CF6               	goto	u835
  6243  04FC  3001               	movlw	1
  6244  04FD  00A9               	movwf	??___lldiv
  6245  04FE  0829               	movf	??___lldiv,w
  6246  04FF  07AE               	addwf	___lldiv@counter,f
  6247  0500  2CF3               	goto	l2010
  6248  0501                     l2012:	
  6249  0501  3001               	movlw	1
  6250  0502                     u855:	
  6251  0502  35AA               	lslf	___lldiv@quotient,f
  6252  0503  0DAB               	rlf	___lldiv@quotient+1,f
  6253  0504  0DAC               	rlf	___lldiv@quotient+2,f
  6254  0505  0DAD               	rlf	___lldiv@quotient+3,f
  6255  0506  0B89               	decfsz	9,f
  6256  0507  2D02               	goto	u855
  6257  0508  0824               	movf	___lldiv@divisor+3,w
  6258  0509  0228               	subwf	___lldiv@dividend+3,w
  6259  050A  1D03               	skipz
  6260  050B  2D16               	goto	u865
  6261  050C  0823               	movf	___lldiv@divisor+2,w
  6262  050D  0227               	subwf	___lldiv@dividend+2,w
  6263  050E  1D03               	skipz
  6264  050F  2D16               	goto	u865
  6265  0510  0822               	movf	___lldiv@divisor+1,w
  6266  0511  0226               	subwf	___lldiv@dividend+1,w
  6267  0512  1D03               	skipz
  6268  0513  2D16               	goto	u865
  6269  0514  0821               	movf	___lldiv@divisor,w
  6270  0515  0225               	subwf	___lldiv@dividend,w
  6271  0516                     u865:	
  6272  0516  1C03               	skipc
  6273  0517  2D21               	goto	l2020
  6274  0518  0821               	movf	___lldiv@divisor,w
  6275  0519  02A5               	subwf	___lldiv@dividend,f
  6276  051A  0822               	movf	___lldiv@divisor+1,w
  6277  051B  3BA6               	subwfb	___lldiv@dividend+1,f
  6278  051C  0823               	movf	___lldiv@divisor+2,w
  6279  051D  3BA7               	subwfb	___lldiv@dividend+2,f
  6280  051E  0824               	movf	___lldiv@divisor+3,w
  6281  051F  3BA8               	subwfb	___lldiv@dividend+3,f
  6282  0520  142A               	bsf	___lldiv@quotient,0
  6283  0521                     l2020:	
  6284  0521  3001               	movlw	1
  6285  0522                     u875:	
  6286  0522  36A4               	lsrf	___lldiv@divisor+3,f
  6287  0523  0CA3               	rrf	___lldiv@divisor+2,f
  6288  0524  0CA2               	rrf	___lldiv@divisor+1,f
  6289  0525  0CA1               	rrf	___lldiv@divisor,f
  6290  0526  0B89               	decfsz	9,f
  6291  0527  2D22               	goto	u875
  6292  0528  3001               	movlw	1
  6293  0529  02AE               	subwf	___lldiv@counter,f
  6294  052A  1D03               	btfss	3,2
  6295  052B  2D01               	goto	l2012
  6296  052C                     l2024:	
  6297  052C  082D               	movf	___lldiv@quotient+3,w
  6298  052D  00A4               	movwf	?___lldiv+3
  6299  052E  082C               	movf	___lldiv@quotient+2,w
  6300  052F  00A3               	movwf	?___lldiv+2
  6301  0530  082B               	movf	___lldiv@quotient+1,w
  6302  0531  00A2               	movwf	?___lldiv+1
  6303  0532  082A               	movf	___lldiv@quotient,w
  6304  0533  00A1               	movwf	?___lldiv
  6305  0534  0008               	return
  6306  0535                     __end_of___lldiv:	
  6307                           
  6308                           	psect	text22
  6309  07EA                     __ptext22:	
  6310 ;; *************** function _checkTXPower *****************
  6311 ;; Defined at:
  6312 ;;		line 92 in file "main.c"
  6313 ;; Parameters:    Size  Location     Type
  6314 ;;		None
  6315 ;; Auto vars:     Size  Location     Type
  6316 ;;  rxPacket        1    9[BANK0 ] PTR struct .
  6317 ;;		 -> RXPacket(33), 
  6318 ;; Return value:  Size  Location     Type
  6319 ;;                  1    wreg      void 
  6320 ;; Registers used:
  6321 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6322 ;; Tracked objects:
  6323 ;;		On entry : 0/0
  6324 ;;		On exit  : 0/0
  6325 ;;		Unchanged: 0/0
  6326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6328 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6329 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6330 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6331 ;;Total ram usage:        2 bytes
  6332 ;; Hardware stack levels used:    1
  6333 ;; Hardware stack levels required when called:   11
  6334 ;; This function calls:
  6335 ;;		_nrf24l01ChangeTXPower
  6336 ;;		_nrf24l01GetRXPacket
  6337 ;; This function is called by:
  6338 ;;		_loop
  6339 ;; This function uses a non-reentrant model
  6340 ;;
  6341                           
  6342                           
  6343                           ;psect for function _checkTXPower
  6344  07EA                     _checkTXPower:	
  6345                           
  6346                           ;main.c: 93: nrf24l01Packet_t * rxPacket = nrf24l01GetRXPacket();
  6347                           
  6348                           ;incstack = 0
  6349                           ; Regs used in _checkTXPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6350  07EA  3187  27FE  3187   	fcall	_nrf24l01GetRXPacket
  6351  07ED  0020               	movlb	0	; select bank0
  6352  07EE  00A8               	movwf	??_checkTXPower
  6353  07EF  0828               	movf	??_checkTXPower,w
  6354  07F0  00A9               	movwf	checkTXPower@rxPacket
  6355                           
  6356                           ;main.c: 95: if (rxPacket->packetData.ACKRPD){
  6357  07F1  0829               	movf	checkTXPower@rxPacket,w
  6358  07F2  0086               	movwf	6
  6359  07F3  3001               	movlw	1	; select bank2/3
  6360  07F4  0087               	movwf	7
  6361  07F5  1C81               	btfss	1,1
  6362  07F6  0008               	return
  6363                           
  6364                           ;main.c: 96: nrf24l01ChangeTXPower(-1);
  6365  07F7  30FF               	movlw	255
  6366  07F8  00A4               	movwf	nrf24l01ChangeTXPower@addPower
  6367  07F9  30FF               	movlw	255
  6368  07FA  00A5               	movwf	nrf24l01ChangeTXPower@addPower+1
  6369  07FB  3186  26A7         	fcall	_nrf24l01ChangeTXPower
  6370  07FD  0008               	return
  6371  07FE                     __end_of_checkTXPower:	
  6372                           
  6373                           	psect	text23
  6374  07FE                     __ptext23:	
  6375 ;; *************** function _nrf24l01GetRXPacket *****************
  6376 ;; Defined at:
  6377 ;;		line 131 in file "nrf24l01.c"
  6378 ;; Parameters:    Size  Location     Type
  6379 ;;		None
  6380 ;; Auto vars:     Size  Location     Type
  6381 ;;		None
  6382 ;; Return value:  Size  Location     Type
  6383 ;;                  1    wreg      PTR struct .
  6384 ;; Registers used:
  6385 ;;		wreg
  6386 ;; Tracked objects:
  6387 ;;		On entry : 0/0
  6388 ;;		On exit  : 0/0
  6389 ;;		Unchanged: 0/0
  6390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6395 ;;Total ram usage:        0 bytes
  6396 ;; Hardware stack levels used:    1
  6397 ;; Hardware stack levels required when called:    7
  6398 ;; This function calls:
  6399 ;;		Nothing
  6400 ;; This function is called by:
  6401 ;;		_checkTXPower
  6402 ;; This function uses a non-reentrant model
  6403 ;;
  6404                           
  6405                           
  6406                           ;psect for function _nrf24l01GetRXPacket
  6407  07FE                     _nrf24l01GetRXPacket:	
  6408                           
  6409                           ;nrf24l01.c: 132: return &RXPacket;
  6410                           
  6411                           ;incstack = 0
  6412                           ; Regs used in _nrf24l01GetRXPacket: [wreg]
  6413  07FE  3040               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  6414  07FF  0008               	return
  6415  0800                     __end_of_nrf24l01GetRXPacket:	
  6416                           
  6417                           	psect	text24
  6418  06A7                     __ptext24:	
  6419 ;; *************** function _nrf24l01ChangeTXPower *****************
  6420 ;; Defined at:
  6421 ;;		line 33 in file "nrf24l01.c"
  6422 ;; Parameters:    Size  Location     Type
  6423 ;;  addPower        2    4[BANK0 ] int 
  6424 ;; Auto vars:     Size  Location     Type
  6425 ;;  rfSetup         1    7[BANK0 ] struct .
  6426 ;; Return value:  Size  Location     Type
  6427 ;;                  1    wreg      void 
  6428 ;; Registers used:
  6429 ;;		wreg, status,2, status,0, pclath, cstack
  6430 ;; Tracked objects:
  6431 ;;		On entry : 0/0
  6432 ;;		On exit  : 0/0
  6433 ;;		Unchanged: 0/0
  6434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6435 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6436 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6437 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6438 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6439 ;;Total ram usage:        4 bytes
  6440 ;; Hardware stack levels used:    1
  6441 ;; Hardware stack levels required when called:   10
  6442 ;; This function calls:
  6443 ;;		_nrf24l01Send
  6444 ;; This function is called by:
  6445 ;;		_checkTXPower
  6446 ;;		_nrf24l01SendPacket
  6447 ;; This function uses a non-reentrant model
  6448 ;;
  6449                           
  6450                           
  6451                           ;psect for function _nrf24l01ChangeTXPower
  6452  06A7                     _nrf24l01ChangeTXPower:	
  6453                           
  6454                           ;nrf24l01.c: 35: n_RF_SETUP_t rfSetup;;nrf24l01.c: 36: rfSetup.byte = nrf24l01Send((unsi
      +                          gned) 0b00000000 | (unsigned) 0x06, 0);
  6455                           
  6456                           ;incstack = 0
  6457                           ; Regs used in _nrf24l01ChangeTXPower: [wreg+status,2+status,0+pclath+cstack]
  6458  06A7  0020               	movlb	0	; select bank0
  6459  06A8  01A1               	clrf	nrf24l01Send@data
  6460  06A9  3006               	movlw	6
  6461  06AA  318F  2707  3186   	fcall	_nrf24l01Send
  6462  06AD  0020               	movlb	0	; select bank0
  6463  06AE  00A6               	movwf	??_nrf24l01ChangeTXPower
  6464  06AF  0826               	movf	??_nrf24l01ChangeTXPower,w
  6465  06B0  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  6466                           
  6467                           ;nrf24l01.c: 38: if (addPower > 0){
  6468  06B1  0825               	movf	nrf24l01ChangeTXPower@addPower+1,w
  6469  06B2  3A80               	xorlw	128
  6470  06B3  00A6               	movwf	??_nrf24l01ChangeTXPower
  6471  06B4  3080               	movlw	128
  6472  06B5  0226               	subwf	??_nrf24l01ChangeTXPower,w
  6473  06B6  1D03               	skipz
  6474  06B7  2EBA               	goto	u1055
  6475  06B8  3001               	movlw	1
  6476  06B9  0224               	subwf	nrf24l01ChangeTXPower@addPower,w
  6477  06BA                     u1055:	
  6478  06BA  1C03               	skipc
  6479  06BB  2ECC               	goto	l2152
  6480                           
  6481                           ;nrf24l01.c: 39: if (rfSetup.RF_PWR < 3){
  6482  06BC  0020               	movlb	0	; select bank0
  6483  06BD  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  6484  06BE  3903               	andlw	3
  6485  06BF  3A03               	xorlw	3
  6486  06C0  1903               	skipnz
  6487  06C1  2ECC               	goto	l2152
  6488                           
  6489                           ;nrf24l01.c: 40: rfSetup.RF_PWR++;
  6490  06C2  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  6491  06C3  3903               	andlw	3
  6492  06C4  00A6               	movwf	??_nrf24l01ChangeTXPower
  6493  06C5  0AA6               	incf	??_nrf24l01ChangeTXPower,f
  6494  06C6  0DA6               	rlf	??_nrf24l01ChangeTXPower,f
  6495  06C7  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  6496  06C8  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  6497  06C9  39F9               	andlw	-7
  6498  06CA  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  6499  06CB  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  6500  06CC                     l2152:	
  6501                           
  6502                           ;nrf24l01.c: 41: };nrf24l01.c: 42: };nrf24l01.c: 44: if (addPower < 0){
  6503  06CC  0020               	movlb	0	; select bank0
  6504  06CD  1FA5               	btfss	nrf24l01ChangeTXPower@addPower+1,7
  6505  06CE  2EDE               	goto	l2158
  6506                           
  6507                           ;nrf24l01.c: 45: if (rfSetup.RF_PWR > 0){
  6508  06CF  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  6509  06D0  3903               	andlw	3
  6510  06D1  3A00               	xorlw	0
  6511  06D2  1903               	skipnz
  6512  06D3  2EDE               	goto	l2158
  6513                           
  6514                           ;nrf24l01.c: 46: rfSetup.RF_PWR--;
  6515  06D4  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  6516  06D5  3903               	andlw	3
  6517  06D6  00A6               	movwf	??_nrf24l01ChangeTXPower
  6518  06D7  03A6               	decf	??_nrf24l01ChangeTXPower,f
  6519  06D8  0DA6               	rlf	??_nrf24l01ChangeTXPower,f
  6520  06D9  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  6521  06DA  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  6522  06DB  39F9               	andlw	-7
  6523  06DC  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  6524  06DD  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  6525  06DE                     l2158:	
  6526                           
  6527                           ;nrf24l01.c: 47: };nrf24l01.c: 48: };nrf24l01.c: 50: nrf24l01Send((unsigned) 0b00100000 
      +                          | (unsigned) 0x06, rfSetup.byte);
  6528  06DE  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  6529  06DF  00A6               	movwf	??_nrf24l01ChangeTXPower
  6530  06E0  0826               	movf	??_nrf24l01ChangeTXPower,w
  6531  06E1  00A1               	movwf	nrf24l01Send@data
  6532  06E2  3026               	movlw	38
  6533  06E3  318F  2707         	fcall	_nrf24l01Send
  6534  06E5  0008               	return
  6535  06E6                     __end_of_nrf24l01ChangeTXPower:	
  6536                           
  6537                           	psect	text25
  6538  0F07                     __ptext25:	
  6539 ;; *************** function _nrf24l01Send *****************
  6540 ;; Defined at:
  6541 ;;		line 9 in file "nrf24l01.c"
  6542 ;; Parameters:    Size  Location     Type
  6543 ;;  command         1    wreg     unsigned char 
  6544 ;;  data            1    1[BANK0 ] unsigned char 
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;  command         1    3[BANK0 ] unsigned char 
  6547 ;; Return value:  Size  Location     Type
  6548 ;;                  1    wreg      unsigned char 
  6549 ;; Registers used:
  6550 ;;		wreg, status,2, status,0, pclath, cstack
  6551 ;; Tracked objects:
  6552 ;;		On entry : 0/0
  6553 ;;		On exit  : 0/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6556 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6558 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6559 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6560 ;;Total ram usage:        3 bytes
  6561 ;; Hardware stack levels used:    1
  6562 ;; Hardware stack levels required when called:    9
  6563 ;; This function calls:
  6564 ;;		_enableInterrupts
  6565 ;;		_nrf24l01SPIEnd
  6566 ;;		_nrf24l01SPISend
  6567 ;;		_nrf24l01SPIStart
  6568 ;; This function is called by:
  6569 ;;		_loop
  6570 ;;		_nrf24l01ChangeTXPower
  6571 ;;		_nrf24l01SetRXMode
  6572 ;;		_nrf24l01SetRXPipe
  6573 ;;		_nrf24l01InitRegisters
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577                           
  6578                           ;psect for function _nrf24l01Send
  6579  0F07                     _nrf24l01Send:	
  6580                           
  6581                           ;incstack = 0
  6582                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  6583                           ;nrf24l01Send@command stored from wreg
  6584  0F07  0020               	movlb	0	; select bank0
  6585  0F08  00A3               	movwf	nrf24l01Send@command
  6586                           
  6587                           ;nrf24l01.c: 12: enableInterrupts(0);
  6588  0F09  3000               	movlw	0
  6589  0F0A  318D  25D0  318F   	fcall	_enableInterrupts
  6590                           
  6591                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  6592  0F0D  318D  25D8  318F   	fcall	_nrf24l01SPIStart
  6593                           
  6594                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  6595  0F10  0020               	movlb	0	; select bank0
  6596  0F11  0823               	movf	nrf24l01Send@command,w
  6597  0F12  318D  25E0  318F   	fcall	_nrf24l01SPISend
  6598                           
  6599                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  6600  0F15  0020               	movlb	0	; select bank0
  6601  0F16  0821               	movf	nrf24l01Send@data,w
  6602  0F17  318D  25E0  318F   	fcall	_nrf24l01SPISend
  6603  0F1A  0020               	movlb	0	; select bank0
  6604  0F1B  00A2               	movwf	??_nrf24l01Send
  6605  0F1C  0822               	movf	??_nrf24l01Send,w
  6606  0F1D  00A1               	movwf	nrf24l01Send@data
  6607                           
  6608                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  6609  0F1E  318D  25C9  318F   	fcall	_nrf24l01SPIEnd
  6610                           
  6611                           ;nrf24l01.c: 27: enableInterrupts(1);
  6612  0F21  3001               	movlw	1
  6613  0F22  318D  25D0         	fcall	_enableInterrupts
  6614                           
  6615                           ;nrf24l01.c: 29: return data;
  6616  0F24  0020               	movlb	0	; select bank0
  6617  0F25  0821               	movf	nrf24l01Send@data,w
  6618  0F26  0008               	return
  6619  0F27                     __end_of_nrf24l01Send:	
  6620                           
  6621                           	psect	text26
  6622  0EE7                     __ptext26:	
  6623 ;; *************** function _flashRealod *****************
  6624 ;; Defined at:
  6625 ;;		line 90 in file "flash.c"
  6626 ;; Parameters:    Size  Location     Type
  6627 ;;		None
  6628 ;; Auto vars:     Size  Location     Type
  6629 ;;  i               2   11[BANK0 ] unsigned int 
  6630 ;; Return value:  Size  Location     Type
  6631 ;;                  1    wreg      void 
  6632 ;; Registers used:
  6633 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6634 ;; Tracked objects:
  6635 ;;		On entry : 0/0
  6636 ;;		On exit  : 0/0
  6637 ;;		Unchanged: 0/0
  6638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6640 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6641 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6642 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6643 ;;Total ram usage:        3 bytes
  6644 ;; Hardware stack levels used:    1
  6645 ;; Hardware stack levels required when called:    8
  6646 ;; This function calls:
  6647 ;;		_flashReadByte
  6648 ;; This function is called by:
  6649 ;;		_main
  6650 ;; This function uses a non-reentrant model
  6651 ;;
  6652                           
  6653                           
  6654                           ;psect for function _flashRealod
  6655  0EE7                     _flashRealod:	
  6656                           
  6657                           ;flash.c: 92: for (unsigned int i = 0; i < 32; i++){
  6658                           
  6659                           ;incstack = 0
  6660                           ; Regs used in _flashRealod: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6661  0EE7  0020               	movlb	0	; select bank0
  6662  0EE8  01AB               	clrf	flashRealod@i
  6663  0EE9  01AC               	clrf	flashRealod@i+1
  6664  0EEA                     L1:	
  6665  0EEA  3000               	movlw	0
  6666  0EEB  022C               	subwf	flashRealod@i+1,w
  6667  0EEC  3020               	movlw	32
  6668  0EED  1903               	skipnz
  6669  0EEE  022B               	subwf	flashRealod@i,w
  6670  0EEF  1803               	btfsc	3,0
  6671  0EF0  0008               	return
  6672                           
  6673                           ;flash.c: 93: romHolder.array[i] = flashReadByte(i);
  6674  0EF1  082C               	movf	flashRealod@i+1,w
  6675  0EF2  00A2               	movwf	flashReadByte@offset+1
  6676  0EF3  082B               	movf	flashRealod@i,w
  6677  0EF4  00A1               	movwf	flashReadByte@offset
  6678  0EF5  3187  2758  318E   	fcall	_flashReadByte
  6679  0EF8  0020               	movlb	0	; select bank0
  6680  0EF9  0821               	movf	?_flashReadByte,w
  6681  0EFA  00AA               	movwf	??_flashRealod
  6682  0EFB  082B               	movf	flashRealod@i,w
  6683  0EFC  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  6684  0EFD  0086               	movwf	6
  6685  0EFE  3001               	movlw	1	; select bank2/3
  6686  0EFF  0087               	movwf	7
  6687  0F00  082A               	movf	??_flashRealod,w
  6688  0F01  0081               	movwf	1
  6689  0F02  3001               	movlw	1
  6690  0F03  07AB               	addwf	flashRealod@i,f
  6691  0F04  3000               	movlw	0
  6692  0F05  3DAC               	addwfc	flashRealod@i+1,f
  6693  0F06  2EEA               	goto	L1
  6694  0F07                     __end_of_flashRealod:	
  6695                           
  6696                           	psect	text27
  6697  0758                     __ptext27:	
  6698 ;; *************** function _flashReadByte *****************
  6699 ;; Defined at:
  6700 ;;		line 64 in file "flash.c"
  6701 ;; Parameters:    Size  Location     Type
  6702 ;;  offset          2    1[BANK0 ] unsigned int 
  6703 ;; Auto vars:     Size  Location     Type
  6704 ;;  address         2    8[BANK0 ] unsigned int 
  6705 ;;  result          2    6[BANK0 ] unsigned int 
  6706 ;; Return value:  Size  Location     Type
  6707 ;;                  2    1[BANK0 ] unsigned int 
  6708 ;; Registers used:
  6709 ;;		wreg, status,2, status,0
  6710 ;; Tracked objects:
  6711 ;;		On entry : 0/0
  6712 ;;		On exit  : 0/0
  6713 ;;		Unchanged: 0/0
  6714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6715 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6716 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6717 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6718 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6719 ;;Total ram usage:        9 bytes
  6720 ;; Hardware stack levels used:    1
  6721 ;; Hardware stack levels required when called:    7
  6722 ;; This function calls:
  6723 ;;		Nothing
  6724 ;; This function is called by:
  6725 ;;		_flashRealod
  6726 ;; This function uses a non-reentrant model
  6727 ;;
  6728                           
  6729                           
  6730                           ;psect for function _flashReadByte
  6731  0758                     _flashReadByte:	
  6732                           
  6733                           ;flash.c: 66: unsigned int address;;flash.c: 68: INTCONbits.GIE = 0;
  6734                           
  6735                           ;incstack = 0
  6736                           ; Regs used in _flashReadByte: [wreg+status,2+status,0]
  6737  0758  138B               	bcf	11,7	;volatile
  6738                           
  6739                           ;flash.c: 70: PMCON1 = 0x00;
  6740  0759  0031               	movlb	17	; select bank17
  6741  075A  0195               	clrf	21	;volsfr
  6742                           
  6743                           ;flash.c: 72: address = (0x2000U - 32) + offset;
  6744  075B  0020               	movlb	0	; select bank0
  6745  075C  0821               	movf	flashReadByte@offset,w
  6746  075D  3EE0               	addlw	224
  6747  075E  00A8               	movwf	flashReadByte@address
  6748  075F  301F               	movlw	31
  6749  0760  3D22               	addwfc	flashReadByte@offset+1,w
  6750  0761  00A9               	movwf	flashReadByte@address+1
  6751                           
  6752                           ;flash.c: 73: PMADRL = (char) (address >> 0);
  6753  0762  0828               	movf	flashReadByte@address,w
  6754  0763  0031               	movlb	17	; select bank17
  6755  0764  0091               	movwf	17	;volatile
  6756                           
  6757                           ;flash.c: 74: PMADRH = (char) (address >> 8);
  6758  0765  0020               	movlb	0	; select bank0
  6759  0766  0829               	movf	flashReadByte@address+1,w
  6760  0767  0031               	movlb	17	; select bank17
  6761  0768  0092               	movwf	18	;volatile
  6762                           
  6763                           ;flash.c: 76: PMCON1bits.RD = 1;
  6764  0769  1415               	bsf	21,0	;volsfr
  6765                           
  6766                           ;flash.c: 78: __nop();
  6767  076A  0000               	nop
  6768                           
  6769                           ;flash.c: 79: __nop();
  6770  076B  0000               	nop
  6771                           
  6772                           ;flash.c: 81: unsigned int result = 0;
  6773  076C  0020               	movlb	0	; select bank0
  6774  076D  01A6               	clrf	flashReadByte@result
  6775  076E  01A7               	clrf	flashReadByte@result+1
  6776                           
  6777                           ;flash.c: 82: result = PMDATL;
  6778  076F  0031               	movlb	17	; select bank17
  6779  0770  0813               	movf	19,w	;volatile
  6780  0771  0020               	movlb	0	; select bank0
  6781  0772  00A3               	movwf	??_flashReadByte
  6782  0773  01A4               	clrf	??_flashReadByte+1
  6783  0774  0823               	movf	??_flashReadByte,w
  6784  0775  00A6               	movwf	flashReadByte@result
  6785  0776  0824               	movf	??_flashReadByte+1,w
  6786  0777  00A7               	movwf	flashReadByte@result+1
  6787                           
  6788                           ;flash.c: 83: result|= ( (unsigned) (PMDATH) << 8);
  6789  0778  0031               	movlb	17	; select bank17
  6790  0779  0814               	movf	20,w	;volatile
  6791  077A  0020               	movlb	0	; select bank0
  6792  077B  00A3               	movwf	??_flashReadByte
  6793  077C  01A4               	clrf	??_flashReadByte+1
  6794  077D  0823               	movf	??_flashReadByte,w
  6795  077E  00A4               	movwf	??_flashReadByte+1
  6796  077F  01A3               	clrf	??_flashReadByte
  6797  0780  0823               	movf	??_flashReadByte,w
  6798  0781  04A6               	iorwf	flashReadByte@result,f
  6799  0782  0824               	movf	??_flashReadByte+1,w
  6800  0783  04A7               	iorwf	flashReadByte@result+1,f
  6801                           
  6802                           ;flash.c: 85: INTCONbits.GIE = 1;
  6803  0784  178B               	bsf	11,7	;volatile
  6804                           
  6805                           ;flash.c: 87: return result;
  6806  0785  0827               	movf	flashReadByte@result+1,w
  6807  0786  00A2               	movwf	?_flashReadByte+1
  6808  0787  0826               	movf	flashReadByte@result,w
  6809  0788  00A1               	movwf	?_flashReadByte
  6810  0789  0008               	return
  6811  078A                     __end_of_flashReadByte:	
  6812                           
  6813                           	psect	intentry
  6814  0004                     __pintentry:	
  6815 ;; *************** function _ISR *****************
  6816 ;; Defined at:
  6817 ;;		line 15 in file "main.c"
  6818 ;; Parameters:    Size  Location     Type
  6819 ;;		None
  6820 ;; Auto vars:     Size  Location     Type
  6821 ;;		None
  6822 ;; Return value:  Size  Location     Type
  6823 ;;                  1    wreg      void 
  6824 ;; Registers used:
  6825 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6826 ;; Tracked objects:
  6827 ;;		On entry : 0/0
  6828 ;;		On exit  : 0/0
  6829 ;;		Unchanged: 0/0
  6830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6835 ;;Total ram usage:        0 bytes
  6836 ;; Hardware stack levels used:    1
  6837 ;; Hardware stack levels required when called:    6
  6838 ;; This function calls:
  6839 ;;		_nrf24l01ISR
  6840 ;; This function is called by:
  6841 ;;		Interrupt level 1
  6842 ;; This function uses a non-reentrant model
  6843 ;;
  6844                           
  6845  0004                     _ISR:	
  6846                           
  6847                           ;incstack = 0
  6848  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6849                           
  6850                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6851  0005  3180               	pagesel	$
  6852                           
  6853                           ;main.c: 17: if (PIR0bits.INTF){
  6854  0006  0020               	movlb	0	; select bank0
  6855  0007  1C10               	btfss	16,0	;volatile
  6856  0008  280D               	goto	i1l213
  6857                           
  6858                           ;main.c: 18: nrf24l01ISR();
  6859  0009  3185  2586         	fcall	_nrf24l01ISR
  6860                           
  6861                           ;main.c: 19: PIR0bits.INTF = 0;
  6862  000B  0020               	movlb	0	; select bank0
  6863  000C  1010               	bcf	16,0	;volatile
  6864  000D                     i1l213:	
  6865  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6866  000E  0009               	retfie
  6867  000F                     __end_of_ISR:	
  6868                           
  6869                           	psect	text29
  6870  0586                     __ptext29:	
  6871 ;; *************** function _nrf24l01ISR *****************
  6872 ;; Defined at:
  6873 ;;		line 246 in file "nrf24l01.c"
  6874 ;; Parameters:    Size  Location     Type
  6875 ;;		None
  6876 ;; Auto vars:     Size  Location     Type
  6877 ;;  status          1    0[BANK0 ] struct .
  6878 ;; Return value:  Size  Location     Type
  6879 ;;                  1    wreg      void 
  6880 ;; Registers used:
  6881 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6882 ;; Tracked objects:
  6883 ;;		On entry : 0/0
  6884 ;;		On exit  : 0/0
  6885 ;;		Unchanged: 0/0
  6886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6888 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6889 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6890 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6891 ;;Total ram usage:        2 bytes
  6892 ;; Hardware stack levels used:    1
  6893 ;; Hardware stack levels required when called:    5
  6894 ;; This function calls:
  6895 ;;		_exception
  6896 ;;		_nrf24l01CheckACK
  6897 ;;		_nrf24l01ReceivePacket
  6898 ;;		i1_nrf24l01Send
  6899 ;;		i1_nrf24l01SetRXMode
  6900 ;; This function is called by:
  6901 ;;		_ISR
  6902 ;; This function uses a non-reentrant model
  6903 ;;
  6904                           
  6905                           
  6906                           ;psect for function _nrf24l01ISR
  6907  0586                     _nrf24l01ISR:	
  6908                           
  6909                           ;nrf24l01.c: 248: n_STATUS_t status;;nrf24l01.c: 249: status.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x07, 0);
  6910                           
  6911                           ;incstack = 0
  6912                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6913  0586  01F1               	clrf	i1nrf24l01Send@data
  6914  0587  3007               	movlw	7
  6915  0588  318E  2675  3185   	fcall	i1_nrf24l01Send
  6916  058B  00FD               	movwf	??_nrf24l01ISR
  6917  058C  087D               	movf	??_nrf24l01ISR,w
  6918  058D  0020               	movlb	0	; select bank0
  6919  058E  00A0               	movwf	nrf24l01ISR@status
  6920                           
  6921                           ;nrf24l01.c: 254: };nrf24l01.c: 257: if (status.byte == 0xFF){
  6922  058F  0A20               	incf	nrf24l01ISR@status,w
  6923  0590  1D03               	btfss	3,2
  6924  0591  2D96               	goto	i1l2896
  6925                           
  6926                           ;nrf24l01.c: 258: exception(2);
  6927  0592  3002               	movlw	2
  6928  0593  318E  2611  3185   	fcall	_exception
  6929  0596                     i1l2896:	
  6930                           
  6931                           ;nrf24l01.c: 259: };nrf24l01.c: 261: if (status.TX_DS){
  6932  0596  0020               	movlb	0	; select bank0
  6933  0597  1EA0               	btfss	nrf24l01ISR@status,5
  6934  0598  2DA5               	goto	i1l2904
  6935                           
  6936                           ;nrf24l01.c: 264: nrf24l01.TXBusy = 0;
  6937  0599  105B               	bcf	_nrf24l01,0	;volatile
  6938                           
  6939                           ;nrf24l01.c: 267: if (!nrf24l01.RXMode){
  6940  059A  195B               	btfsc	_nrf24l01,2	;volatile
  6941  059B  2DA5               	goto	i1l2904
  6942                           
  6943                           ;nrf24l01.c: 268: if (TXPacket->packetData.ACKRequest){
  6944  059C  0859               	movf	_TXPacket,w
  6945  059D  0086               	movwf	6
  6946  059E  0187               	clrf	7
  6947  059F  1D01               	btfss	1,2
  6948  05A0  2DA5               	goto	i1l2904
  6949                           
  6950                           ;nrf24l01.c: 271: nrf24l01SetRXMode(1);
  6951  05A1  3001               	movlw	1
  6952  05A2  3187  2721  3185   	fcall	i1_nrf24l01SetRXMode
  6953  05A5                     i1l2904:	
  6954                           
  6955                           ;nrf24l01.c: 272: };nrf24l01.c: 273: };nrf24l01.c: 274: };nrf24l01.c: 277: if (status.RX
      +                          _DR){
  6956  05A5  0020               	movlb	0	; select bank0
  6957  05A6  1F20               	btfss	nrf24l01ISR@status,6
  6958  05A7  2DCA               	goto	i1l2918
  6959                           
  6960                           ;nrf24l01.c: 280: if (!nrf24l01.RXPending){
  6961  05A8  18DB               	btfsc	_nrf24l01,1	;volatile
  6962  05A9  2DC9               	goto	i1l362
  6963                           
  6964                           ;nrf24l01.c: 283: nrf24l01.RXPending = 1;
  6965  05AA  14DB               	bsf	_nrf24l01,1	;volatile
  6966                           
  6967                           ;nrf24l01.c: 285: nrf24l01ReceivePacket();
  6968  05AB  3185  25D3  3185   	fcall	_nrf24l01ReceivePacket
  6969                           
  6970                           ;nrf24l01.c: 288: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  6971  05AE  01F1               	clrf	i1nrf24l01Send@data
  6972  05AF  3009               	movlw	9
  6973  05B0  318E  2675  3185   	fcall	i1_nrf24l01Send
  6974  05B3  00FD               	movwf	??_nrf24l01ISR
  6975  05B4  0022               	movlb	2	; select bank2
  6976  05B5  0840               	movf	_RXPacket^(0+256),w
  6977  05B6  067D               	xorwf	??_nrf24l01ISR,w
  6978  05B7  39FE               	andlw	-2
  6979  05B8  067D               	xorwf	??_nrf24l01ISR,w
  6980  05B9  00C0               	movwf	_RXPacket^(0+256)
  6981                           
  6982                           ;nrf24l01.c: 291: RXPacket.packetData.Pipe = status.RX_P_NO;
  6983  05BA  0020               	movlb	0	; select bank0
  6984  05BB  0C20               	rrf	nrf24l01ISR@status,w
  6985  05BC  3907               	andlw	7
  6986  05BD  00FD               	movwf	??_nrf24l01ISR
  6987  05BE  0EFD               	swapf	??_nrf24l01ISR,f
  6988  05BF  0022               	movlb	2	; select bank2
  6989  05C0  0840               	movf	_RXPacket^(0+256),w
  6990  05C1  067D               	xorwf	??_nrf24l01ISR,w
  6991  05C2  398F               	andlw	-113
  6992  05C3  067D               	xorwf	??_nrf24l01ISR,w
  6993  05C4  00C0               	movwf	_RXPacket^(0+256)
  6994                           
  6995                           ;nrf24l01.c: 293: nrf24l01CheckACK();
  6996  05C5  318E  26C7  3185   	fcall	_nrf24l01CheckACK
  6997                           
  6998                           ;nrf24l01.c: 294: }
  6999  05C8  2DCA               	goto	i1l2918
  7000  05C9                     i1l362:	
  7001                           
  7002                           ;nrf24l01.c: 297: else{;nrf24l01.c: 300: status.RX_DR = 0;
  7003  05C9  1320               	bcf	nrf24l01ISR@status,6
  7004  05CA                     i1l2918:	
  7005                           
  7006                           ;nrf24l01.c: 301: };nrf24l01.c: 303: };nrf24l01.c: 306: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.byte);
  7007  05CA  0020               	movlb	0	; select bank0
  7008  05CB  0820               	movf	nrf24l01ISR@status,w
  7009  05CC  00FD               	movwf	??_nrf24l01ISR
  7010  05CD  087D               	movf	??_nrf24l01ISR,w
  7011  05CE  00F1               	movwf	i1nrf24l01Send@data
  7012  05CF  3027               	movlw	39
  7013  05D0  318E  2675         	fcall	i1_nrf24l01Send
  7014  05D2  0008               	return
  7015  05D3                     __end_of_nrf24l01ISR:	
  7016                           
  7017                           	psect	text30
  7018  05D3                     __ptext30:	
  7019 ;; *************** function _nrf24l01ReceivePacket *****************
  7020 ;; Defined at:
  7021 ;;		line 135 in file "nrf24l01.c"
  7022 ;; Parameters:    Size  Location     Type
  7023 ;;		None
  7024 ;; Auto vars:     Size  Location     Type
  7025 ;;  i               1   10[COMMON] unsigned char 
  7026 ;;  width           1    9[COMMON] unsigned char 
  7027 ;; Return value:  Size  Location     Type
  7028 ;;                  1    wreg      void 
  7029 ;; Registers used:
  7030 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7031 ;; Tracked objects:
  7032 ;;		On entry : 0/0
  7033 ;;		On exit  : 0/0
  7034 ;;		Unchanged: 0/0
  7035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7037 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7038 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7039 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7040 ;;Total ram usage:        3 bytes
  7041 ;; Hardware stack levels used:    1
  7042 ;; Hardware stack levels required when called:    3
  7043 ;; This function calls:
  7044 ;;		_nrf24l01CEHigh
  7045 ;;		_nrf24l01CELow
  7046 ;;		_nrf24l01SPIEnd
  7047 ;;		_nrf24l01SPISend
  7048 ;;		_nrf24l01SPIStart
  7049 ;;		i1_memset
  7050 ;;		i1_nrf24l01Send
  7051 ;; This function is called by:
  7052 ;;		_nrf24l01ISR
  7053 ;; This function uses a non-reentrant model
  7054 ;;
  7055                           
  7056                           
  7057                           ;psect for function _nrf24l01ReceivePacket
  7058  05D3                     _nrf24l01ReceivePacket:	
  7059                           
  7060                           ;nrf24l01.c: 138: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  7061                           
  7062                           ;incstack = 0
  7063                           ; Regs used in _nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7064  05D3  3041               	movlw	low (_RXPacket+1)
  7065  05D4  00F0               	movwf	i1memset@p1
  7066  05D5  3001               	movlw	high (_RXPacket+1)
  7067  05D6  00F1               	movwf	i1memset@p1+1
  7068  05D7  3000               	movlw	0
  7069  05D8  00F2               	movwf	i1memset@c
  7070  05D9  00F3               	movwf	i1memset@c+1
  7071  05DA  3020               	movlw	32
  7072  05DB  00F4               	movwf	i1memset@n
  7073  05DC  3000               	movlw	0
  7074  05DD  00F5               	movwf	i1memset@n+1
  7075  05DE  318E  2629  3185   	fcall	i1_memset
  7076                           
  7077                           ;nrf24l01.c: 139: RXPacket.packetData.byte = 0x00;
  7078  05E1  0022               	movlb	2	; select bank2
  7079  05E2  01C0               	clrf	_RXPacket^(0+256)
  7080                           
  7081                           ;nrf24l01.c: 142: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  7082  05E3  01F1               	clrf	i1nrf24l01Send@data
  7083  05E4  3060               	movlw	96
  7084  05E5  318E  2675  3185   	fcall	i1_nrf24l01Send
  7085  05E8  00F8               	movwf	??_nrf24l01ReceivePacket
  7086  05E9  0878               	movf	??_nrf24l01ReceivePacket,w
  7087  05EA  00F9               	movwf	nrf24l01ReceivePacket@width
  7088                           
  7089                           ;nrf24l01.c: 143: unsigned char i = 0;
  7090  05EB  01FA               	clrf	nrf24l01ReceivePacket@i
  7091                           
  7092                           ;nrf24l01.c: 146: nrf24l01CELow();
  7093  05EC  318D  25BA  3185   	fcall	_nrf24l01CELow
  7094                           
  7095                           ;nrf24l01.c: 149: nrf24l01SPIStart();
  7096  05EF  318D  25D8  3185   	fcall	_nrf24l01SPIStart
  7097                           
  7098                           ;nrf24l01.c: 152: nrf24l01SPISend((unsigned) 0b01100001);
  7099  05F2  3061               	movlw	97
  7100  05F3  318D  25E0  3185   	fcall	_nrf24l01SPISend
  7101                           
  7102                           ;nrf24l01.c: 155: RXPacket.packetData.byte = nrf24l01SPISend(0);
  7103  05F6  3000               	movlw	0
  7104  05F7  318D  25E0  3185   	fcall	_nrf24l01SPISend
  7105  05FA  00F8               	movwf	??_nrf24l01ReceivePacket
  7106  05FB  0878               	movf	??_nrf24l01ReceivePacket,w
  7107  05FC  0022               	movlb	2	; select bank2
  7108  05FD  00C0               	movwf	_RXPacket^(0+256)
  7109                           
  7110                           ;nrf24l01.c: 156: width--;
  7111  05FE  3001               	movlw	1
  7112  05FF  02F9               	subwf	nrf24l01ReceivePacket@width,f
  7113                           
  7114                           ;nrf24l01.c: 158: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
  7115  0600  01FA               	clrf	nrf24l01ReceivePacket@i
  7116  0601  2E12               	goto	i1l2880
  7117  0602                     i1l2876:	
  7118                           
  7119                           ;nrf24l01.c: 160: RXPacket.Message[i] = nrf24l01SPISend(0);
  7120  0602  3000               	movlw	0
  7121  0603  318D  25E0  3185   	fcall	_nrf24l01SPISend
  7122  0606  00F8               	movwf	??_nrf24l01ReceivePacket
  7123  0607  087A               	movf	nrf24l01ReceivePacket@i,w
  7124  0608  3E41               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  7125  0609  0086               	movwf	6
  7126  060A  3001               	movlw	1	; select bank2/3
  7127  060B  0087               	movwf	7
  7128  060C  0878               	movf	??_nrf24l01ReceivePacket,w
  7129  060D  0081               	movwf	1
  7130  060E  3001               	movlw	1
  7131  060F  00F8               	movwf	??_nrf24l01ReceivePacket
  7132  0610  0878               	movf	??_nrf24l01ReceivePacket,w
  7133  0611  07FA               	addwf	nrf24l01ReceivePacket@i,f
  7134  0612                     i1l2880:	
  7135  0612  0879               	movf	nrf24l01ReceivePacket@width,w
  7136  0613  027A               	subwf	nrf24l01ReceivePacket@i,w
  7137  0614  1803               	skipnc
  7138  0615  2E1A               	goto	i1l2884
  7139  0616  3020               	movlw	32
  7140  0617  027A               	subwf	nrf24l01ReceivePacket@i,w
  7141  0618  1C03               	skipc
  7142  0619  2E02               	goto	i1l2876
  7143  061A                     i1l2884:	
  7144                           
  7145                           ;nrf24l01.c: 161: };nrf24l01.c: 164: nrf24l01SPIEnd();
  7146  061A  318D  25C9  3185   	fcall	_nrf24l01SPIEnd
  7147                           
  7148                           ;nrf24l01.c: 167: nrf24l01CEHigh();
  7149  061D  318D  25B7         	fcall	_nrf24l01CEHigh
  7150  061F  0008               	return
  7151  0620                     __end_of_nrf24l01ReceivePacket:	
  7152                           
  7153                           	psect	text31
  7154  0E29                     __ptext31:	
  7155 ;; *************** function i1_memset *****************
  7156 ;; Defined at:
  7157 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  7158 ;; Parameters:    Size  Location     Type
  7159 ;;  p1              2    0[COMMON] PTR void 
  7160 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  7161 ;;  c               2    2[COMMON] int 
  7162 ;;  n               2    4[COMMON] unsigned int 
  7163 ;; Auto vars:     Size  Location     Type
  7164 ;;  memset          2    6[COMMON] PTR unsigned char 
  7165 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  7166 ;; Return value:  Size  Location     Type
  7167 ;;                  1    wreg      PTR void 
  7168 ;; Registers used:
  7169 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7170 ;; Tracked objects:
  7171 ;;		On entry : 0/0
  7172 ;;		On exit  : 0/0
  7173 ;;		Unchanged: 0/0
  7174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7175 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7176 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7178 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7179 ;;Total ram usage:        8 bytes
  7180 ;; Hardware stack levels used:    1
  7181 ;; This function calls:
  7182 ;;		Nothing
  7183 ;; This function is called by:
  7184 ;;		_nrf24l01ReceivePacket
  7185 ;; This function uses a non-reentrant model
  7186 ;;
  7187                           
  7188                           
  7189                           ;psect for function i1_memset
  7190  0E29                     i1_memset:	
  7191                           
  7192                           ;incstack = 0
  7193                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7194  0E29  0871               	movf	i1memset@p1+1,w
  7195  0E2A  00F7               	movwf	i1memset@p+1
  7196  0E2B  0870               	movf	i1memset@p1,w
  7197  0E2C  00F6               	movwf	i1memset@p
  7198  0E2D                     i1l2844:	
  7199  0E2D  3001               	movlw	1
  7200  0E2E  02F4               	subwf	i1memset@n,f
  7201  0E2F  3000               	movlw	0
  7202  0E30  3BF5               	subwfb	i1memset@n+1,f
  7203  0E31  0A74               	incf	i1memset@n,w
  7204  0E32  1903               	btfsc	3,2
  7205  0E33  0A75               	incf	i1memset@n+1,w
  7206  0E34  1903               	btfsc	3,2
  7207  0E35  0008               	return
  7208  0E36  0876               	movf	i1memset@p,w
  7209  0E37  0086               	movwf	6
  7210  0E38  0877               	movf	i1memset@p+1,w
  7211  0E39  0087               	movwf	7
  7212  0E3A  0872               	movf	i1memset@c,w
  7213  0E3B  0081               	movwf	1
  7214  0E3C  3001               	movlw	1
  7215  0E3D  07F6               	addwf	i1memset@p,f
  7216  0E3E  3000               	movlw	0
  7217  0E3F  3DF7               	addwfc	i1memset@p+1,f
  7218  0E40  2E2D               	goto	i1l2844
  7219  0E41                     __end_ofi1_memset:	
  7220                           ;	Return value of i1_memset is never used
  7221                           
  7222                           
  7223                           	psect	text32
  7224  0EC7                     __ptext32:	
  7225 ;; *************** function _nrf24l01CheckACK *****************
  7226 ;; Defined at:
  7227 ;;		line 98 in file "nrf24l01.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;		None
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;		None
  7232 ;; Return value:  Size  Location     Type
  7233 ;;                  1    wreg      void 
  7234 ;; Registers used:
  7235 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7236 ;; Tracked objects:
  7237 ;;		On entry : 0/0
  7238 ;;		On exit  : 0/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7245 ;;Total ram usage:        1 bytes
  7246 ;; Hardware stack levels used:    1
  7247 ;; Hardware stack levels required when called:    4
  7248 ;; This function calls:
  7249 ;;		_strcmp
  7250 ;;		i1_nrf24l01SetRXMode
  7251 ;; This function is called by:
  7252 ;;		_nrf24l01ISR
  7253 ;; This function uses a non-reentrant model
  7254 ;;
  7255                           
  7256                           
  7257                           ;psect for function _nrf24l01CheckACK
  7258  0EC7                     _nrf24l01CheckACK:	
  7259                           
  7260                           ;nrf24l01.c: 102: if (!RXPacket.packetData.IsACK){
  7261                           
  7262                           ;incstack = 0
  7263                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7264  0EC7  0022               	movlb	2	; select bank2
  7265  0EC8  1DC0               	btfss	_RXPacket^(0+256),3
  7266  0EC9  0008               	return
  7267                           
  7268                           ;nrf24l01.c: 104: };nrf24l01.c: 107: nrf24l01.RXPending = 0;
  7269                           
  7270                           ;nrf24l01.c: 103: return;
  7271  0ECA  0020               	movlb	0	; select bank0
  7272  0ECB  10DB               	bcf	_nrf24l01,1	;volatile
  7273                           
  7274                           ;nrf24l01.c: 110: if (!TXPacket->packetData.ACKRequest){
  7275  0ECC  0859               	movf	_TXPacket,w
  7276  0ECD  0086               	movwf	6
  7277  0ECE  0187               	clrf	7
  7278  0ECF  1D01               	btfss	1,2
  7279  0ED0  0008               	return
  7280                           
  7281                           ;nrf24l01.c: 112: };nrf24l01.c: 115: if (strcmp(TXPacket->Message, RXPacket.Message) != 
      +                          0){
  7282                           
  7283                           ;nrf24l01.c: 111: return;
  7284  0ED1  3041               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  7285  0ED2  00F7               	movwf	??_nrf24l01CheckACK
  7286  0ED3  0877               	movf	??_nrf24l01CheckACK,w
  7287  0ED4  00F0               	movwf	strcmp@s2
  7288  0ED5  0859               	movf	_TXPacket,w
  7289  0ED6  3E01               	addlw	1
  7290  0ED7  318F  278E  318E   	fcall	_strcmp
  7291  0EDA  0870               	movf	?_strcmp,w
  7292  0EDB  0471               	iorwf	?_strcmp+1,w
  7293  0EDC  1D03               	btfss	3,2
  7294  0EDD  0008               	return
  7295                           
  7296                           ;nrf24l01.c: 117: };nrf24l01.c: 124: TXPacket->packetData.ACKRequest = 0;
  7297                           
  7298                           ;nrf24l01.c: 116: return;
  7299  0EDE  0020               	movlb	0	; select bank0
  7300  0EDF  0859               	movf	_TXPacket,w
  7301  0EE0  0086               	movwf	6
  7302  0EE1  0187               	clrf	7
  7303  0EE2  1101               	bcf	1,2
  7304                           
  7305                           ;nrf24l01.c: 127: nrf24l01SetRXMode(0);
  7306  0EE3  3000               	movlw	0
  7307  0EE4  3187  2721         	fcall	i1_nrf24l01SetRXMode
  7308  0EE6  0008               	return
  7309  0EE7                     __end_of_nrf24l01CheckACK:	
  7310                           
  7311                           	psect	text33
  7312  0721                     __ptext33:	
  7313 ;; *************** function i1_nrf24l01SetRXMode *****************
  7314 ;; Defined at:
  7315 ;;		line 54 in file "nrf24l01.c"
  7316 ;; Parameters:    Size  Location     Type
  7317 ;;  rxMode          1    wreg     unsigned char 
  7318 ;; Auto vars:     Size  Location     Type
  7319 ;;  rxMode          1    6[COMMON] unsigned char 
  7320 ;;  nrf24l01SetR    1    5[COMMON] struct .
  7321 ;; Return value:  Size  Location     Type
  7322 ;;                  1    wreg      void 
  7323 ;; Registers used:
  7324 ;;		wreg, status,2, status,0, pclath, cstack
  7325 ;; Tracked objects:
  7326 ;;		On entry : 0/0
  7327 ;;		On exit  : 0/0
  7328 ;;		Unchanged: 0/0
  7329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7331 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7332 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7333 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7334 ;;Total ram usage:        3 bytes
  7335 ;; Hardware stack levels used:    1
  7336 ;; Hardware stack levels required when called:    3
  7337 ;; This function calls:
  7338 ;;		_nrf24l01CEHigh
  7339 ;;		_nrf24l01CELow
  7340 ;;		i1_nrf24l01Send
  7341 ;; This function is called by:
  7342 ;;		_nrf24l01CheckACK
  7343 ;;		_nrf24l01ISR
  7344 ;; This function uses a non-reentrant model
  7345 ;;
  7346                           
  7347                           
  7348                           ;psect for function i1_nrf24l01SetRXMode
  7349  0721                     i1_nrf24l01SetRXMode:	
  7350                           
  7351                           ;incstack = 0
  7352                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  7353                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
  7354  0721  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
  7355                           
  7356                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  7357  0722  01F1               	clrf	i1nrf24l01Send@data
  7358  0723  3000               	movlw	0
  7359  0724  318E  2675  3187   	fcall	i1_nrf24l01Send
  7360  0727  00F4               	movwf	??i1_nrf24l01SetRXMode
  7361  0728  0874               	movf	??i1_nrf24l01SetRXMode,w
  7362  0729  00F5               	movwf	i1nrf24l01SetRXMode@config
  7363                           
  7364                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  7365  072A  0875               	movf	i1nrf24l01SetRXMode@config,w
  7366  072B  3901               	andlw	1
  7367  072C  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
  7368  072D  1903               	skipnz
  7369  072E  2F51               	goto	i1l2254
  7370                           
  7371                           ;nrf24l01.c: 65: nrf24l01CELow();
  7372  072F  318D  25BA  3187   	fcall	_nrf24l01CELow
  7373                           
  7374                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7375  0732  30A0               	movlw	160
  7376  0733                     u181_27:	
  7377  0733  3200               	nop2
  7378  0734  0B89               	decfsz	9,f
  7379  0735  2F33               	goto	u181_27
  7380                           
  7381                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  7382  0736  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  7383  0737  3901               	andlw	1
  7384  0738  1075               	bcf	i1nrf24l01SetRXMode@config,0
  7385  0739  1D03               	skipz
  7386  073A  1475               	bsf	i1nrf24l01SetRXMode@config,0
  7387                           
  7388                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  7389  073B  0875               	movf	i1nrf24l01SetRXMode@config,w
  7390  073C  00F4               	movwf	??i1_nrf24l01SetRXMode
  7391  073D  0874               	movf	??i1_nrf24l01SetRXMode,w
  7392  073E  00F1               	movwf	i1nrf24l01Send@data
  7393  073F  3020               	movlw	32
  7394  0740  318E  2675  3187   	fcall	i1_nrf24l01Send
  7395                           
  7396                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7397  0743  30A0               	movlw	160
  7398  0744                     u182_27:	
  7399  0744  3200               	nop2
  7400  0745  0B89               	decfsz	9,f
  7401  0746  2F44               	goto	u182_27
  7402                           
  7403                           ;nrf24l01.c: 76: if (rxMode){
  7404  0747  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  7405  0748  1903               	btfsc	3,2
  7406  0749  2F51               	goto	i1l2254
  7407                           
  7408                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  7409  074A  318D  25B7  3187   	fcall	_nrf24l01CEHigh
  7410                           
  7411                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7412  074D  30A0               	movlw	160
  7413  074E                     u183_27:	
  7414  074E  3200               	nop2
  7415  074F  0B89               	decfsz	9,f
  7416  0750  2F4E               	goto	u183_27
  7417  0751                     i1l2254:	
  7418                           
  7419                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  7420  0751  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  7421  0752  3901               	andlw	1
  7422  0753  0020               	movlb	0	; select bank0
  7423  0754  115B               	bcf	_nrf24l01,2	;volatile
  7424  0755  1D03               	skipz
  7425  0756  155B               	bsf	_nrf24l01,2	;volatile
  7426  0757  0008               	return
  7427  0758                     __end_ofi1_nrf24l01SetRXMode:	
  7428                           
  7429                           	psect	text34
  7430  0E75                     __ptext34:	
  7431 ;; *************** function i1_nrf24l01Send *****************
  7432 ;; Defined at:
  7433 ;;		line 9 in file "nrf24l01.c"
  7434 ;; Parameters:    Size  Location     Type
  7435 ;;  command         1    wreg     unsigned char 
  7436 ;;  data            1    1[COMMON] unsigned char 
  7437 ;; Auto vars:     Size  Location     Type
  7438 ;;  command         1    3[COMMON] unsigned char 
  7439 ;; Return value:  Size  Location     Type
  7440 ;;                  1    wreg      unsigned char 
  7441 ;; Registers used:
  7442 ;;		wreg, status,2, status,0, pclath, cstack
  7443 ;; Tracked objects:
  7444 ;;		On entry : 0/0
  7445 ;;		On exit  : 0/0
  7446 ;;		Unchanged: 0/0
  7447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7448 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7449 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7450 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7451 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7452 ;;Total ram usage:        3 bytes
  7453 ;; Hardware stack levels used:    1
  7454 ;; Hardware stack levels required when called:    2
  7455 ;; This function calls:
  7456 ;;		_enableInterrupts
  7457 ;;		_nrf24l01SPIEnd
  7458 ;;		_nrf24l01SPISend
  7459 ;;		_nrf24l01SPIStart
  7460 ;; This function is called by:
  7461 ;;		_nrf24l01ReceivePacket
  7462 ;;		_nrf24l01ISR
  7463 ;;		i1_nrf24l01SetRXMode
  7464 ;; This function uses a non-reentrant model
  7465 ;;
  7466                           
  7467                           
  7468                           ;psect for function i1_nrf24l01Send
  7469  0E75                     i1_nrf24l01Send:	
  7470                           
  7471                           ;incstack = 0
  7472                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  7473                           ;i1nrf24l01Send@command stored from wreg
  7474  0E75  00F3               	movwf	i1nrf24l01Send@command
  7475                           
  7476                           ;nrf24l01.c: 12: enableInterrupts(0);
  7477  0E76  3000               	movlw	0
  7478  0E77  318D  25D0  318E   	fcall	_enableInterrupts
  7479                           
  7480                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  7481  0E7A  318D  25D8  318E   	fcall	_nrf24l01SPIStart
  7482                           
  7483                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  7484  0E7D  0873               	movf	i1nrf24l01Send@command,w
  7485  0E7E  318D  25E0  318E   	fcall	_nrf24l01SPISend
  7486                           
  7487                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  7488  0E81  0871               	movf	i1nrf24l01Send@data,w
  7489  0E82  318D  25E0  318E   	fcall	_nrf24l01SPISend
  7490  0E85  00F2               	movwf	??i1_nrf24l01Send
  7491  0E86  0872               	movf	??i1_nrf24l01Send,w
  7492  0E87  00F1               	movwf	i1nrf24l01Send@data
  7493                           
  7494                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  7495  0E88  318D  25C9  318E   	fcall	_nrf24l01SPIEnd
  7496                           
  7497                           ;nrf24l01.c: 27: enableInterrupts(1);
  7498  0E8B  3001               	movlw	1
  7499  0E8C  318D  25D0         	fcall	_enableInterrupts
  7500                           
  7501                           ;nrf24l01.c: 29: return data;
  7502  0E8E  0871               	movf	i1nrf24l01Send@data,w
  7503  0E8F  0008               	return
  7504  0E90                     __end_ofi1_nrf24l01Send:	
  7505                           
  7506                           	psect	text35
  7507  0DD8                     __ptext35:	
  7508 ;; *************** function _nrf24l01SPIStart *****************
  7509 ;; Defined at:
  7510 ;;		line 65 in file "interface.c"
  7511 ;; Parameters:    Size  Location     Type
  7512 ;;		None
  7513 ;; Auto vars:     Size  Location     Type
  7514 ;;		None
  7515 ;; Return value:  Size  Location     Type
  7516 ;;                  1    wreg      void 
  7517 ;; Registers used:
  7518 ;;		wreg, status,2, status,0, pclath, cstack
  7519 ;; Tracked objects:
  7520 ;;		On entry : 0/0
  7521 ;;		On exit  : 0/0
  7522 ;;		Unchanged: 0/0
  7523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7528 ;;Total ram usage:        0 bytes
  7529 ;; Hardware stack levels used:    1
  7530 ;; Hardware stack levels required when called:    8
  7531 ;; This function calls:
  7532 ;;		_nrf24l01CSLow
  7533 ;; This function is called by:
  7534 ;;		_nrf24l01Send
  7535 ;;		_nrf24l01ReceivePacket
  7536 ;;		_nrf24l01SendPacket
  7537 ;;		_nrf24l01SetTXPipe
  7538 ;;		_nrf24l01InitRegisters
  7539 ;;		i1_nrf24l01Send
  7540 ;; This function uses a non-reentrant model
  7541 ;;
  7542                           
  7543                           
  7544                           ;psect for function _nrf24l01SPIStart
  7545  0DD8                     _nrf24l01SPIStart:	
  7546                           
  7547                           ;interface.c: 66: nrf24l01CSLow();
  7548                           
  7549                           ;incstack = 0
  7550 ;; hardware stack exceeded
  7551                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
  7552  0DD8  318D  25C0  318D   	fcall	_nrf24l01CSLow
  7553                           
  7554                           ;interface.c: 67: _delay((unsigned long)((10)*(16000000/4000000.0)));
  7555  0DDB  300D               	movlw	13
  7556  0DDC                     u184_27:	
  7557  0DDC  0B89               	decfsz	9,f
  7558  0DDD  2DDC               	goto	u184_27
  7559  0DDE  0000               	nop
  7560  0DDF  0008               	return
  7561  0DE0                     __end_of_nrf24l01SPIStart:	
  7562                           
  7563                           	psect	text36
  7564  0DC0                     __ptext36:	
  7565 ;; *************** function _nrf24l01CSLow *****************
  7566 ;; Defined at:
  7567 ;;		line 18 in file "interface.c"
  7568 ;; Parameters:    Size  Location     Type
  7569 ;;		None
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;		None
  7572 ;; Return value:  Size  Location     Type
  7573 ;;                  1    wreg      void 
  7574 ;; Registers used:
  7575 ;;		None
  7576 ;; Tracked objects:
  7577 ;;		On entry : 0/0
  7578 ;;		On exit  : 0/0
  7579 ;;		Unchanged: 0/0
  7580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7585 ;;Total ram usage:        0 bytes
  7586 ;; Hardware stack levels used:    1
  7587 ;; Hardware stack levels required when called:    7
  7588 ;; This function calls:
  7589 ;;		Nothing
  7590 ;; This function is called by:
  7591 ;;		_nrf24l01SPIStart
  7592 ;; This function uses a non-reentrant model
  7593 ;;
  7594                           
  7595                           
  7596                           ;psect for function _nrf24l01CSLow
  7597  0DC0                     _nrf24l01CSLow:	
  7598                           
  7599                           ;interface.c: 19: PORTAbits.RA1 = 0;
  7600                           
  7601                           ;incstack = 0
  7602 ;; hardware stack exceeded
  7603                           ; Regs used in _nrf24l01CSLow: []
  7604  0DC0  0020               	movlb	0	; select bank0
  7605  0DC1  108C               	bcf	12,1	;volatile
  7606  0DC2  0008               	return
  7607  0DC3                     __end_of_nrf24l01CSLow:	
  7608                           
  7609                           	psect	text37
  7610  0DE0                     __ptext37:	
  7611 ;; *************** function _nrf24l01SPISend *****************
  7612 ;; Defined at:
  7613 ;;		line 52 in file "interface.c"
  7614 ;; Parameters:    Size  Location     Type
  7615 ;;  data            1    wreg     unsigned char 
  7616 ;; Auto vars:     Size  Location     Type
  7617 ;;  data            1    0[COMMON] unsigned char 
  7618 ;; Return value:  Size  Location     Type
  7619 ;;                  1    wreg      unsigned char 
  7620 ;; Registers used:
  7621 ;;		wreg
  7622 ;; Tracked objects:
  7623 ;;		On entry : 0/0
  7624 ;;		On exit  : 0/0
  7625 ;;		Unchanged: 0/0
  7626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7631 ;;Total ram usage:        0 bytes
  7632 ;; Hardware stack levels used:    1
  7633 ;; Hardware stack levels required when called:    7
  7634 ;; This function calls:
  7635 ;;		Nothing
  7636 ;; This function is called by:
  7637 ;;		_nrf24l01Send
  7638 ;;		_nrf24l01ReceivePacket
  7639 ;;		_nrf24l01SendPacket
  7640 ;;		_nrf24l01SetTXPipe
  7641 ;;		_nrf24l01InitRegisters
  7642 ;;		i1_nrf24l01Send
  7643 ;; This function uses a non-reentrant model
  7644 ;;
  7645                           
  7646                           
  7647                           ;psect for function _nrf24l01SPISend
  7648  0DE0                     _nrf24l01SPISend:	
  7649                           
  7650                           ;incstack = 0
  7651 ;; hardware stack exceeded
  7652                           ; Regs used in _nrf24l01SPISend: [wreg]
  7653                           ;nrf24l01SPISend@data stored from wreg
  7654  0DE0  00F0               	movwf	nrf24l01SPISend@data
  7655                           
  7656                           ;interface.c: 53: SSP1BUF = data;
  7657  0DE1  0870               	movf	nrf24l01SPISend@data,w
  7658  0DE2  0024               	movlb	4	; select bank4
  7659  0DE3  0091               	movwf	17	;volatile
  7660                           
  7661                           ;interface.c: 55: PORTCbits.RC4 = 1;
  7662  0DE4  0020               	movlb	0	; select bank0
  7663  0DE5  160E               	bsf	14,4	;volatile
  7664  0DE6                     i1l94:	
  7665                           ;interface.c: 57: while (!SSP1STATbits.BF){
  7666                           
  7667  0DE6  0024               	movlb	4	; select bank4
  7668  0DE7  1814               	btfsc	20,0	;volatile
  7669  0DE8  2DEB               	goto	i1l1902
  7670                           
  7671                           ;interface.c: 58: __nop();
  7672  0DE9  0000               	nop
  7673  0DEA  2DE6               	goto	i1l94
  7674  0DEB                     i1l1902:	
  7675                           
  7676                           ;interface.c: 59: };interface.c: 61: return SSP1BUF;
  7677  0DEB  0811               	movf	17,w	;volatile
  7678  0DEC  0008               	return
  7679  0DED                     __end_of_nrf24l01SPISend:	
  7680                           
  7681                           	psect	text38
  7682  0DC9                     __ptext38:	
  7683 ;; *************** function _nrf24l01SPIEnd *****************
  7684 ;; Defined at:
  7685 ;;		line 71 in file "interface.c"
  7686 ;; Parameters:    Size  Location     Type
  7687 ;;		None
  7688 ;; Auto vars:     Size  Location     Type
  7689 ;;		None
  7690 ;; Return value:  Size  Location     Type
  7691 ;;                  1    wreg      void 
  7692 ;; Registers used:
  7693 ;;		wreg, status,2, status,0, pclath, cstack
  7694 ;; Tracked objects:
  7695 ;;		On entry : 0/0
  7696 ;;		On exit  : 0/0
  7697 ;;		Unchanged: 0/0
  7698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;Total ram usage:        0 bytes
  7704 ;; Hardware stack levels used:    1
  7705 ;; Hardware stack levels required when called:    8
  7706 ;; This function calls:
  7707 ;;		_nrf24l01CSHigh
  7708 ;; This function is called by:
  7709 ;;		_nrf24l01Send
  7710 ;;		_nrf24l01ReceivePacket
  7711 ;;		_nrf24l01SendPacket
  7712 ;;		_nrf24l01SetTXPipe
  7713 ;;		_nrf24l01InitRegisters
  7714 ;;		i1_nrf24l01Send
  7715 ;; This function uses a non-reentrant model
  7716 ;;
  7717                           
  7718                           
  7719                           ;psect for function _nrf24l01SPIEnd
  7720  0DC9                     _nrf24l01SPIEnd:	
  7721                           
  7722                           ;interface.c: 72: _delay((unsigned long)((10)*(16000000/4000000.0)));
  7723                           
  7724                           ;incstack = 0
  7725 ;; hardware stack exceeded
  7726                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
  7727  0DC9  300D               	movlw	13
  7728  0DCA                     u185_27:	
  7729  0DCA  0B89               	decfsz	9,f
  7730  0DCB  2DCA               	goto	u185_27
  7731  0DCC  0000               	nop
  7732                           
  7733                           ;interface.c: 73: nrf24l01CSHigh();
  7734  0DCD  318D  25BD         	fcall	_nrf24l01CSHigh
  7735  0DCF  0008               	return
  7736  0DD0                     __end_of_nrf24l01SPIEnd:	
  7737                           
  7738                           	psect	text39
  7739  0DBD                     __ptext39:	
  7740 ;; *************** function _nrf24l01CSHigh *****************
  7741 ;; Defined at:
  7742 ;;		line 23 in file "interface.c"
  7743 ;; Parameters:    Size  Location     Type
  7744 ;;		None
  7745 ;; Auto vars:     Size  Location     Type
  7746 ;;		None
  7747 ;; Return value:  Size  Location     Type
  7748 ;;                  1    wreg      void 
  7749 ;; Registers used:
  7750 ;;		None
  7751 ;; Tracked objects:
  7752 ;;		On entry : 0/0
  7753 ;;		On exit  : 0/0
  7754 ;;		Unchanged: 0/0
  7755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7760 ;;Total ram usage:        0 bytes
  7761 ;; Hardware stack levels used:    1
  7762 ;; Hardware stack levels required when called:    7
  7763 ;; This function calls:
  7764 ;;		Nothing
  7765 ;; This function is called by:
  7766 ;;		_nrf24l01SPIEnd
  7767 ;; This function uses a non-reentrant model
  7768 ;;
  7769                           
  7770                           
  7771                           ;psect for function _nrf24l01CSHigh
  7772  0DBD                     _nrf24l01CSHigh:	
  7773                           
  7774                           ;interface.c: 24: PORTAbits.RA1 = 1;
  7775                           
  7776                           ;incstack = 0
  7777 ;; hardware stack exceeded
  7778                           ; Regs used in _nrf24l01CSHigh: []
  7779  0DBD  0020               	movlb	0	; select bank0
  7780  0DBE  148C               	bsf	12,1	;volatile
  7781  0DBF  0008               	return
  7782  0DC0                     __end_of_nrf24l01CSHigh:	
  7783                           
  7784                           	psect	text40
  7785  0DD0                     __ptext40:	
  7786 ;; *************** function _enableInterrupts *****************
  7787 ;; Defined at:
  7788 ;;		line 77 in file "interface.c"
  7789 ;; Parameters:    Size  Location     Type
  7790 ;;  enable          1    wreg     unsigned char 
  7791 ;; Auto vars:     Size  Location     Type
  7792 ;;  enable          1    0[COMMON] unsigned char 
  7793 ;; Return value:  Size  Location     Type
  7794 ;;                  1    wreg      void 
  7795 ;; Registers used:
  7796 ;;		wreg, status,0
  7797 ;; Tracked objects:
  7798 ;;		On entry : 0/0
  7799 ;;		On exit  : 0/0
  7800 ;;		Unchanged: 0/0
  7801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7806 ;;Total ram usage:        0 bytes
  7807 ;; Hardware stack levels used:    1
  7808 ;; Hardware stack levels required when called:    7
  7809 ;; This function calls:
  7810 ;;		Nothing
  7811 ;; This function is called by:
  7812 ;;		_nrf24l01Send
  7813 ;;		_nrf24l01SendPacket
  7814 ;;		i1_nrf24l01Send
  7815 ;; This function uses a non-reentrant model
  7816 ;;
  7817                           
  7818                           
  7819                           ;psect for function _enableInterrupts
  7820  0DD0                     _enableInterrupts:	
  7821                           
  7822                           ;incstack = 0
  7823 ;; hardware stack exceeded
  7824                           ; Regs used in _enableInterrupts: [wreg+status,0]
  7825                           ;enableInterrupts@enable stored from wreg
  7826  0DD0  00F0               	movwf	enableInterrupts@enable
  7827                           
  7828                           ;interface.c: 78: PIE0bits.INTE = enable;
  7829  0DD1  0C70               	rrf	enableInterrupts@enable,w
  7830  0DD2  0021               	movlb	1	; select bank1
  7831  0DD3  1C03               	skipc
  7832  0DD4  1010               	bcf	16,0	;volatile
  7833  0DD5  1803               	skipnc
  7834  0DD6  1410               	bsf	16,0	;volatile
  7835  0DD7  0008               	return
  7836  0DD8                     __end_of_enableInterrupts:	
  7837                           
  7838                           	psect	text41
  7839  0DBA                     __ptext41:	
  7840 ;; *************** function _nrf24l01CELow *****************
  7841 ;; Defined at:
  7842 ;;		line 8 in file "interface.c"
  7843 ;; Parameters:    Size  Location     Type
  7844 ;;		None
  7845 ;; Auto vars:     Size  Location     Type
  7846 ;;		None
  7847 ;; Return value:  Size  Location     Type
  7848 ;;                  1    wreg      void 
  7849 ;; Registers used:
  7850 ;;		None
  7851 ;; Tracked objects:
  7852 ;;		On entry : 0/0
  7853 ;;		On exit  : 0/0
  7854 ;;		Unchanged: 0/0
  7855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7860 ;;Total ram usage:        0 bytes
  7861 ;; Hardware stack levels used:    1
  7862 ;; Hardware stack levels required when called:    7
  7863 ;; This function calls:
  7864 ;;		Nothing
  7865 ;; This function is called by:
  7866 ;;		_nrf24l01SetRXMode
  7867 ;;		_nrf24l01ReceivePacket
  7868 ;;		_nrf24l01SendPacket
  7869 ;;		_nrf24l01Init
  7870 ;;		i1_nrf24l01SetRXMode
  7871 ;; This function uses a non-reentrant model
  7872 ;;
  7873                           
  7874                           
  7875                           ;psect for function _nrf24l01CELow
  7876  0DBA                     _nrf24l01CELow:	
  7877                           
  7878                           ;interface.c: 9: PORTAbits.RA0 = 0;
  7879                           
  7880                           ;incstack = 0
  7881 ;; hardware stack exceeded
  7882                           ; Regs used in _nrf24l01CELow: []
  7883  0DBA  0020               	movlb	0	; select bank0
  7884  0DBB  100C               	bcf	12,0	;volatile
  7885  0DBC  0008               	return
  7886  0DBD                     __end_of_nrf24l01CELow:	
  7887                           
  7888                           	psect	text42
  7889  0DB7                     __ptext42:	
  7890 ;; *************** function _nrf24l01CEHigh *****************
  7891 ;; Defined at:
  7892 ;;		line 13 in file "interface.c"
  7893 ;; Parameters:    Size  Location     Type
  7894 ;;		None
  7895 ;; Auto vars:     Size  Location     Type
  7896 ;;		None
  7897 ;; Return value:  Size  Location     Type
  7898 ;;                  1    wreg      void 
  7899 ;; Registers used:
  7900 ;;		None
  7901 ;; Tracked objects:
  7902 ;;		On entry : 0/0
  7903 ;;		On exit  : 0/0
  7904 ;;		Unchanged: 0/0
  7905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7910 ;;Total ram usage:        0 bytes
  7911 ;; Hardware stack levels used:    1
  7912 ;; Hardware stack levels required when called:    7
  7913 ;; This function calls:
  7914 ;;		Nothing
  7915 ;; This function is called by:
  7916 ;;		_nrf24l01SetRXMode
  7917 ;;		_nrf24l01ReceivePacket
  7918 ;;		_nrf24l01SendPacket
  7919 ;;		_nrf24l01Init
  7920 ;;		i1_nrf24l01SetRXMode
  7921 ;; This function uses a non-reentrant model
  7922 ;;
  7923                           
  7924                           
  7925                           ;psect for function _nrf24l01CEHigh
  7926  0DB7                     _nrf24l01CEHigh:	
  7927                           
  7928                           ;interface.c: 14: PORTAbits.RA0 = 1;
  7929                           
  7930                           ;incstack = 0
  7931 ;; hardware stack exceeded
  7932                           ; Regs used in _nrf24l01CEHigh: []
  7933  0DB7  0020               	movlb	0	; select bank0
  7934  0DB8  140C               	bsf	12,0	;volatile
  7935  0DB9  0008               	return
  7936  0DBA                     __end_of_nrf24l01CEHigh:	
  7937                           
  7938                           	psect	text43
  7939  0F8E                     __ptext43:	
  7940 ;; *************** function _strcmp *****************
  7941 ;; Defined at:
  7942 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  7943 ;; Parameters:    Size  Location     Type
  7944 ;;  s1              1    wreg     PTR const unsigned char 
  7945 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7946 ;;		 -> loop@packet(33), 
  7947 ;;  s2              1    0[COMMON] PTR const unsigned char 
  7948 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  7949 ;; Auto vars:     Size  Location     Type
  7950 ;;  s1              1    4[COMMON] PTR const unsigned char 
  7951 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7952 ;;		 -> loop@packet(33), 
  7953 ;;  r               1    3[COMMON] char 
  7954 ;; Return value:  Size  Location     Type
  7955 ;;                  2    0[COMMON] int 
  7956 ;; Registers used:
  7957 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7958 ;; Tracked objects:
  7959 ;;		On entry : 0/0
  7960 ;;		On exit  : 0/0
  7961 ;;		Unchanged: 0/0
  7962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7963 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7964 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7965 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7966 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7967 ;;Total ram usage:        5 bytes
  7968 ;; Hardware stack levels used:    1
  7969 ;; This function calls:
  7970 ;;		Nothing
  7971 ;; This function is called by:
  7972 ;;		_nrf24l01CheckACK
  7973 ;; This function uses a non-reentrant model
  7974 ;;
  7975                           
  7976                           
  7977                           ;psect for function _strcmp
  7978  0F8E                     _strcmp:	
  7979                           
  7980                           ;incstack = 0
  7981                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
  7982                           ;strcmp@s1 stored from wreg
  7983  0F8E  00F4               	movwf	strcmp@s1
  7984  0F8F  2F98               	goto	i1l2198
  7985  0F90                     i1l2194:	
  7986  0F90  3001               	movlw	1
  7987  0F91  00F2               	movwf	??_strcmp
  7988  0F92  0872               	movf	??_strcmp,w
  7989  0F93  07F4               	addwf	strcmp@s1,f
  7990  0F94  3001               	movlw	1
  7991  0F95  00F2               	movwf	??_strcmp
  7992  0F96  0872               	movf	??_strcmp,w
  7993  0F97  07F0               	addwf	strcmp@s2,f
  7994  0F98                     i1l2198:	
  7995  0F98  0874               	movf	strcmp@s1,w
  7996  0F99  0086               	movwf	6
  7997  0F9A  0187               	clrf	7
  7998  0F9B  0870               	movf	strcmp@s2,w
  7999  0F9C  0084               	movwf	4
  8000  0F9D  3001               	movlw	1	; select bank2/3
  8001  0F9E  0085               	movwf	5
  8002  0F9F  0300               	decf	0,w
  8003  0FA0  3AFF               	xorlw	255
  8004  0FA1  0701               	addwf	1,w
  8005  0FA2  00F2               	movwf	??_strcmp
  8006  0FA3  0872               	movf	??_strcmp,w
  8007  0FA4  00F3               	movwf	strcmp@r
  8008  0FA5  0873               	movf	strcmp@r,w
  8009  0FA6  1D03               	btfss	3,2
  8010  0FA7  2FAE               	goto	i1l2202
  8011  0FA8  0874               	movf	strcmp@s1,w
  8012  0FA9  0086               	movwf	6
  8013  0FAA  0187               	clrf	7
  8014  0FAB  0801               	movf	1,w
  8015  0FAC  1D03               	btfss	3,2
  8016  0FAD  2F90               	goto	i1l2194
  8017  0FAE                     i1l2202:	
  8018  0FAE  0873               	movf	strcmp@r,w
  8019  0FAF  00F0               	movwf	?_strcmp
  8020  0FB0  01F1               	clrf	?_strcmp+1
  8021  0FB1  1BF0               	btfsc	?_strcmp,7
  8022  0FB2  03F1               	decf	?_strcmp+1,f
  8023  0FB3  0008               	return
  8024  0FB4                     __end_of_strcmp:	
  8025                           
  8026                           	psect	text44
  8027  0E11                     __ptext44:	
  8028 ;; *************** function _exception *****************
  8029 ;; Defined at:
  8030 ;;		line 81 in file "interface.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;  exception       1    wreg     unsigned char 
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;  exception       1   12[COMMON] unsigned char 
  8035 ;; Return value:  Size  Location     Type
  8036 ;;                  1    wreg      void 
  8037 ;; Registers used:
  8038 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8039 ;; Tracked objects:
  8040 ;;		On entry : 0/0
  8041 ;;		On exit  : 0/0
  8042 ;;		Unchanged: 0/0
  8043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8045 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8046 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;Total ram usage:        3 bytes
  8049 ;; Hardware stack levels used:    1
  8050 ;; Hardware stack levels required when called:    2
  8051 ;; This function calls:
  8052 ;;		___wmul
  8053 ;;		_flashUpdate
  8054 ;; This function is called by:
  8055 ;;		_nrf24l01ISR
  8056 ;; This function uses a non-reentrant model
  8057 ;;
  8058                           
  8059                           
  8060                           ;psect for function _exception
  8061  0E11                     _exception:	
  8062                           
  8063                           ;incstack = 0
  8064                           ; Regs used in _exception: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8065                           ;exception@exception stored from wreg
  8066  0E11  00FC               	movwf	exception@exception
  8067                           
  8068                           ;interface.c: 82: romData.bootMode = (unsigned) (exception * 10);
  8069  0E12  087C               	movf	exception@exception,w
  8070  0E13  00FA               	movwf	??_exception
  8071  0E14  01FB               	clrf	??_exception+1
  8072  0E15  087A               	movf	??_exception,w
  8073  0E16  00F0               	movwf	___wmul@multiplier
  8074  0E17  087B               	movf	??_exception+1,w
  8075  0E18  00F1               	movwf	___wmul@multiplier+1
  8076  0E19  300A               	movlw	10
  8077  0E1A  00F2               	movwf	___wmul@multiplicand
  8078  0E1B  3000               	movlw	0
  8079  0E1C  00F3               	movwf	___wmul@multiplicand+1
  8080  0E1D  318E  265A  318E   	fcall	___wmul
  8081  0E20  0871               	movf	?___wmul+1,w
  8082  0E21  0020               	movlb	0	; select bank0
  8083  0E22  00EE               	movwf	_romData+18
  8084  0E23  0870               	movf	?___wmul,w
  8085  0E24  00ED               	movwf	_romData+17
  8086                           
  8087                           ;interface.c: 83: flashUpdate();
  8088  0E25  318F  2727         	fcall	_flashUpdate
  8089  0E27  0001               	reset	;# 
  8090  0E28  0008               	return
  8091  0E29                     __end_of_exception:	
  8092                           
  8093                           	psect	text45
  8094  0F27                     __ptext45:	
  8095 ;; *************** function _flashUpdate *****************
  8096 ;; Defined at:
  8097 ;;		line 97 in file "flash.c"
  8098 ;; Parameters:    Size  Location     Type
  8099 ;;		None
  8100 ;; Auto vars:     Size  Location     Type
  8101 ;;  i               2    8[COMMON] unsigned int 
  8102 ;; Return value:  Size  Location     Type
  8103 ;;                  1    wreg      void 
  8104 ;; Registers used:
  8105 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8106 ;; Tracked objects:
  8107 ;;		On entry : 0/0
  8108 ;;		On exit  : 0/0
  8109 ;;		Unchanged: 0/0
  8110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8112 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8113 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8114 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8115 ;;Total ram usage:        4 bytes
  8116 ;; Hardware stack levels used:    1
  8117 ;; Hardware stack levels required when called:    1
  8118 ;; This function calls:
  8119 ;;		_flashWriteByte
  8120 ;; This function is called by:
  8121 ;;		_exception
  8122 ;; This function uses a non-reentrant model
  8123 ;;
  8124                           
  8125                           
  8126                           ;psect for function _flashUpdate
  8127  0F27                     _flashUpdate:	
  8128                           
  8129                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  8130                           
  8131                           ;incstack = 0
  8132                           ; Regs used in _flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8133  0F27  01F8               	clrf	flashUpdate@i
  8134  0F28  01F9               	clrf	flashUpdate@i+1
  8135  0F29                     L2:	
  8136  0F29  3000               	movlw	0
  8137  0F2A  0279               	subwf	flashUpdate@i+1,w
  8138  0F2B  3020               	movlw	32
  8139  0F2C  1903               	skipnz
  8140  0F2D  0278               	subwf	flashUpdate@i,w
  8141  0F2E  1803               	btfsc	3,0
  8142  0F2F  0008               	return
  8143                           
  8144                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  8145  0F30  0879               	movf	flashUpdate@i+1,w
  8146  0F31  00F1               	movwf	flashWriteByte@offset+1
  8147  0F32  0878               	movf	flashUpdate@i,w
  8148  0F33  00F0               	movwf	flashWriteByte@offset
  8149  0F34  0878               	movf	flashUpdate@i,w
  8150  0F35  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  8151  0F36  0086               	movwf	6
  8152  0F37  3001               	movlw	1	; select bank2/3
  8153  0F38  0087               	movwf	7
  8154  0F39  0801               	movf	1,w
  8155  0F3A  00F6               	movwf	??_flashUpdate
  8156  0F3B  01F7               	clrf	??_flashUpdate+1
  8157  0F3C  0876               	movf	??_flashUpdate,w
  8158  0F3D  00F2               	movwf	flashWriteByte@data
  8159  0F3E  0877               	movf	??_flashUpdate+1,w
  8160  0F3F  00F3               	movwf	flashWriteByte@data+1
  8161  0F40  3187  27BA  318F   	fcall	_flashWriteByte
  8162  0F43  3001               	movlw	1
  8163  0F44  07F8               	addwf	flashUpdate@i,f
  8164  0F45  3000               	movlw	0
  8165  0F46  3DF9               	addwfc	flashUpdate@i+1,f
  8166  0F47  2F29               	goto	L2
  8167  0F48                     __end_of_flashUpdate:	
  8168                           
  8169                           	psect	text46
  8170  07BA                     __ptext46:	
  8171 ;; *************** function _flashWriteByte *****************
  8172 ;; Defined at:
  8173 ;;		line 8 in file "flash.c"
  8174 ;; Parameters:    Size  Location     Type
  8175 ;;  offset          2    0[COMMON] unsigned int 
  8176 ;;  data            2    2[COMMON] unsigned int 
  8177 ;; Auto vars:     Size  Location     Type
  8178 ;;  address         2    4[COMMON] unsigned int 
  8179 ;; Return value:  Size  Location     Type
  8180 ;;                  1    wreg      void 
  8181 ;; Registers used:
  8182 ;;		wreg, status,2, status,0
  8183 ;; Tracked objects:
  8184 ;;		On entry : 0/0
  8185 ;;		On exit  : 0/0
  8186 ;;		Unchanged: 0/0
  8187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8188 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8189 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8191 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8192 ;;Total ram usage:        6 bytes
  8193 ;; Hardware stack levels used:    1
  8194 ;; This function calls:
  8195 ;;		Nothing
  8196 ;; This function is called by:
  8197 ;;		_flashUpdate
  8198 ;; This function uses a non-reentrant model
  8199 ;;
  8200                           
  8201                           
  8202                           ;psect for function _flashWriteByte
  8203  07BA                     _flashWriteByte:	
  8204                           
  8205                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  8206                           
  8207                           ;incstack = 0
  8208                           ; Regs used in _flashWriteByte: [wreg+status,2+status,0]
  8209  07BA  138B               	bcf	11,7	;volatile
  8210                           
  8211                           ;flash.c: 15: PMCON1 = 0x00;
  8212  07BB  0031               	movlb	17	; select bank17
  8213  07BC  0195               	clrf	21	;volsfr
  8214                           
  8215                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  8216  07BD  0870               	movf	flashWriteByte@offset,w
  8217  07BE  3EE0               	addlw	224
  8218  07BF  00F4               	movwf	flashWriteByte@address
  8219  07C0  301F               	movlw	31
  8220  07C1  3D71               	addwfc	flashWriteByte@offset+1,w
  8221  07C2  00F5               	movwf	flashWriteByte@address+1
  8222                           
  8223                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  8224  07C3  0874               	movf	flashWriteByte@address,w
  8225  07C4  0091               	movwf	17	;volatile
  8226                           
  8227                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  8228  07C5  0875               	movf	flashWriteByte@address+1,w
  8229  07C6  0092               	movwf	18	;volatile
  8230                           
  8231                           ;flash.c: 21: PMCON1bits.FREE = 1;
  8232  07C7  1615               	bsf	21,4	;volsfr
  8233                           
  8234                           ;flash.c: 22: PMCON1bits.WREN = 1;
  8235  07C8  1515               	bsf	21,2	;volsfr
  8236                           
  8237                           ;flash.c: 24: PMCON2 = 0x55;
  8238  07C9  3055               	movlw	85
  8239  07CA  0096               	movwf	22	;volsfr
  8240                           
  8241                           ;flash.c: 25: PMCON2 = 0xAA;
  8242  07CB  30AA               	movlw	170
  8243  07CC  0096               	movwf	22	;volsfr
  8244                           
  8245                           ;flash.c: 27: PMCON1bits.WR = 1;
  8246  07CD  1495               	bsf	21,1	;volsfr
  8247                           
  8248                           ;flash.c: 29: __nop();
  8249  07CE  0000               	nop
  8250                           
  8251                           ;flash.c: 30: __nop();
  8252  07CF  0000               	nop
  8253                           
  8254                           ;flash.c: 32: PMCON1bits.WREN = 0;
  8255  07D0  0031               	movlb	17	; select bank17
  8256  07D1  1115               	bcf	21,2	;volsfr
  8257                           
  8258                           ;flash.c: 36: PMCON1 = 0x00;
  8259  07D2  0195               	clrf	21	;volsfr
  8260                           
  8261                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  8262  07D3  0874               	movf	flashWriteByte@address,w
  8263  07D4  0091               	movwf	17	;volatile
  8264                           
  8265                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  8266  07D5  0875               	movf	flashWriteByte@address+1,w
  8267  07D6  0092               	movwf	18	;volatile
  8268                           
  8269                           ;flash.c: 41: PMCON1bits.FREE = 0;
  8270  07D7  1215               	bcf	21,4	;volsfr
  8271                           
  8272                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  8273  07D8  1695               	bsf	21,5	;volsfr
  8274                           
  8275                           ;flash.c: 43: PMCON1bits.WREN = 1;
  8276  07D9  1515               	bsf	21,2	;volsfr
  8277                           
  8278                           ;flash.c: 45: PMDATL = (data >> 0);
  8279  07DA  0872               	movf	flashWriteByte@data,w
  8280  07DB  0093               	movwf	19	;volatile
  8281                           
  8282                           ;flash.c: 46: PMDATH = (data >> 8);
  8283  07DC  0873               	movf	flashWriteByte@data+1,w
  8284  07DD  0094               	movwf	20	;volatile
  8285                           
  8286                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  8287  07DE  1295               	bcf	21,5	;volsfr
  8288                           
  8289                           ;flash.c: 50: PMCON2 = 0x55;
  8290  07DF  3055               	movlw	85
  8291  07E0  0096               	movwf	22	;volsfr
  8292                           
  8293                           ;flash.c: 51: PMCON2 = 0xAA;
  8294  07E1  30AA               	movlw	170
  8295  07E2  0096               	movwf	22	;volsfr
  8296                           
  8297                           ;flash.c: 53: PMCON1bits.WR = 1;
  8298  07E3  1495               	bsf	21,1	;volsfr
  8299                           
  8300                           ;flash.c: 55: __nop();
  8301  07E4  0000               	nop
  8302                           
  8303                           ;flash.c: 56: __nop();
  8304  07E5  0000               	nop
  8305                           
  8306                           ;flash.c: 58: PMCON1bits.WREN = 0;
  8307  07E6  0031               	movlb	17	; select bank17
  8308  07E7  1115               	bcf	21,2	;volsfr
  8309                           
  8310                           ;flash.c: 61: INTCONbits.GIE = 1;
  8311  07E8  178B               	bsf	11,7	;volatile
  8312  07E9  0008               	return
  8313  07EA                     __end_of_flashWriteByte:	
  8314                           
  8315                           	psect	text47
  8316  0E5A                     __ptext47:	
  8317 ;; *************** function ___wmul *****************
  8318 ;; Defined at:
  8319 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  8320 ;; Parameters:    Size  Location     Type
  8321 ;;  multiplier      2    0[COMMON] unsigned int 
  8322 ;;  multiplicand    2    2[COMMON] unsigned int 
  8323 ;; Auto vars:     Size  Location     Type
  8324 ;;  product         2    4[COMMON] unsigned int 
  8325 ;; Return value:  Size  Location     Type
  8326 ;;                  2    0[COMMON] unsigned int 
  8327 ;; Registers used:
  8328 ;;		wreg, status,2, status,0
  8329 ;; Tracked objects:
  8330 ;;		On entry : 0/0
  8331 ;;		On exit  : 0/0
  8332 ;;		Unchanged: 0/0
  8333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8334 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8335 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8337 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8338 ;;Total ram usage:        6 bytes
  8339 ;; Hardware stack levels used:    1
  8340 ;; This function calls:
  8341 ;;		Nothing
  8342 ;; This function is called by:
  8343 ;;		_exception
  8344 ;; This function uses a non-reentrant model
  8345 ;;
  8346                           
  8347                           
  8348                           ;psect for function ___wmul
  8349  0E5A                     ___wmul:	
  8350                           
  8351                           ;incstack = 0
  8352                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8353  0E5A  01F4               	clrf	___wmul@product
  8354  0E5B  01F5               	clrf	___wmul@product+1
  8355  0E5C                     i1l2208:	
  8356  0E5C  1C70               	btfss	___wmul@multiplier,0
  8357  0E5D  2E62               	goto	i1l469
  8358  0E5E  0872               	movf	___wmul@multiplicand,w
  8359  0E5F  07F4               	addwf	___wmul@product,f
  8360  0E60  0873               	movf	___wmul@multiplicand+1,w
  8361  0E61  3DF5               	addwfc	___wmul@product+1,f
  8362  0E62                     i1l469:	
  8363  0E62  3001               	movlw	1
  8364  0E63                     u115_25:	
  8365  0E63  35F2               	lslf	___wmul@multiplicand,f
  8366  0E64  0DF3               	rlf	___wmul@multiplicand+1,f
  8367  0E65  0B89               	decfsz	9,f
  8368  0E66  2E63               	goto	u115_25
  8369  0E67  3001               	movlw	1
  8370  0E68                     u116_25:	
  8371  0E68  36F1               	lsrf	___wmul@multiplier+1,f
  8372  0E69  0CF0               	rrf	___wmul@multiplier,f
  8373  0E6A  0B89               	decfsz	9,f
  8374  0E6B  2E68               	goto	u116_25
  8375  0E6C  0870               	movf	___wmul@multiplier,w
  8376  0E6D  0471               	iorwf	___wmul@multiplier+1,w
  8377  0E6E  1D03               	btfss	3,2
  8378  0E6F  2E5C               	goto	i1l2208
  8379  0E70  0875               	movf	___wmul@product+1,w
  8380  0E71  00F1               	movwf	?___wmul+1
  8381  0E72  0874               	movf	___wmul@product,w
  8382  0E73  00F0               	movwf	?___wmul
  8383  0E74  0008               	return
  8384  0E75                     __end_of___wmul:	
  8385  007E                     btemp	set	126	;btemp
  8386  007E                     int$flags	set	126
  8387  007E                     wtemp0	set	126


Data Sizes:
    Strings     40
    Constant    25
    Data        0
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     57      79
    BANK1            80     68      72
    BANK2            80      0      65
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), romData(BANK0[19]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), romData(BANK0[19]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_9(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK2[32]), RXPacket(BANK2[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_10(CODE[5]), STR_8(CODE[6]), STR_7(CODE[5]), STR_6(CODE[4]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[4]), STR_2(CODE[2]), 
		 -> setMessage@tempString(BANK0[16]), STR_1(CODE[2]), romData.name(BANK0[16]), romData(BANK0[19]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    ultoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> setMessage@tempString(BANK0[16]), 

    sp__ltoa	PTR unsigned char  size(1) Largest target is 0

    nrf24l01SendPacket@Packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    TXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), 

    checkTXPower@rxPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), 

    sp__ultoa	PTR unsigned char  size(1) Largest target is 16
		 -> setMessage@tempString(BANK0[16]), 

    setMessage@topic	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_10(CODE[5]), STR_8(CODE[6]), STR_7(CODE[5]), STR_6(CODE[4]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[4]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    setMessage@packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_exception
    _nrf24l01ReceivePacket->i1_memset
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send
    _exception->_flashUpdate
    _flashUpdate->_flashWriteByte

Critical Paths under _main in BANK0

    _main->_loop
    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->___llmod
    _loop->_setMessage
    _setMessage->_getADCValue
    _ultoa->___lldiv
    _nrf24l01SendPacket->_strlen
    _nrf24l01SetRXMode->_nrf24l01Send
    _getADCValue->___lldiv
    _checkTXPower->_nrf24l01ChangeTXPower
    _nrf24l01ChangeTXPower->_nrf24l01Send
    _flashRealod->_flashReadByte

Critical Paths under _ISR in BANK0

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK1

    _main->_loop

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   37115
                                             56 BANK0      1     1      0
                                             34 BANK1     34    34      0
                        _flashRealod
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                 _nrf24l01SendPacket
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                         _setMessage
                              _sleep
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     200
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    5331
                                             20 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               12    12      0    5331
                                              8 BANK0     12    12      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    3     3      0     314
                                              5 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     270
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    4     4      0    2239
                                              4 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                     11    11      0     851
                                             11 BANK0     11    11      0
                            ___llmod
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _loop                                                38    38      0   17170
                                             52 BANK0      4     4      0
                                              0 BANK1     34    34      0
                       _checkTXPower
                        _getADCValue
                       _nrf24l01Send
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setMessage                                          23    17      6    5256
                                             29 BANK0     23    17      6
                        _getADCValue (ARG)
                             _memset
                             _strcat
                              _ultoa
 ---------------------------------------------------------------------------------
 (2) _ultoa                                               13     7      6    1914
                                             15 BANK0     13     7      6
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     515
                                              1 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (2) _strcat                                               5     3      2     723
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     565
                                              1 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendPacket                                   4     4      0    5364
                                              9 BANK0      4     4      0
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01ChangeTXPower
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               8     6      2     162
                                              1 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    2277
                                              4 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         14    10      4    1460
                                             15 BANK0     14    10      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     270
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     696
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _checkTXPower                                         2     2      0    2457
                                              8 BANK0      2     2      0
              _nrf24l01ChangeTXPower
                _nrf24l01GetRXPacket
 ---------------------------------------------------------------------------------
 (3) _nrf24l01GetRXPacket                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01ChangeTXPower                                4     2      2    2434
                                              4 BANK0      4     2      2
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (2) _nrf24l01Send                                         3     2      1    2143
                                              1 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (1) _flashRealod                                          3     3      0     271
                                             10 BANK0      3     3      0
                      _flashReadByte
 ---------------------------------------------------------------------------------
 (2) _flashReadByte                                        9     7      2     181
                                              1 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    2831
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (8) _nrf24l01ISR                                          2     2      0    2831
                                             13 COMMON     1     1      0
                                              0 BANK0      1     1      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceivePacket
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) _nrf24l01ReceivePacket                                3     3      0     639
                                              8 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_memset                                            8     2      6     211
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (9) _nrf24l01CheckACK                                     1     1      0     617
                                              7 COMMON     1     1      0
                             _strcmp
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) i1_nrf24l01SetRXMode                                  3     3      0     401
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_nrf24l01Send                                      3     2      1     267
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _strcmp                                              5     3      2     216
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (9) _exception                                            3     3      0     715
                                             10 COMMON     3     3      0
                             ___wmul
                        _flashUpdate
 ---------------------------------------------------------------------------------
 (10) _flashUpdate                                         4     4      0     423
                                              6 COMMON     4     4      0
                     _flashWriteByte
 ---------------------------------------------------------------------------------
 (11) _flashWriteByte                                      6     2      4     333
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     270
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _flashRealod
     _flashReadByte
   _loop
     _checkTXPower
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01GetRXPacket
     _getADCValue
       ___lldiv
       ___lmul
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _nrf24l01SendPacket
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strlen
     _setMessage
       _getADCValue (ARG)
         ___lldiv
         ___lmul
       _memset (ARG)
       _strcat (ARG)
       _ultoa (ARG)
         ___lldiv
         ___llmod
     _sleep
   _nrf24l01GetPipe
     ___llmod
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendPacket
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01ChangeTXPower
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _strlen
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _setMessage
     _getADCValue (ARG)
       ___lldiv
       ___lmul
     _memset (ARG)
     _strcat (ARG)
     _ultoa (ARG)
       ___lldiv
       ___llmod
   _sleep
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
       ___wmul
       _flashUpdate
         _flashWriteByte
     _nrf24l01CheckACK
       _strcmp
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01ReceivePacket
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     39      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     44      48       7       90.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      41       9       81.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      E6      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      E6      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sat Jul 21 15:32:39 2018

           flashReadByte@result 0026                    flashRealod@i 002B                  ___bmul@product 0023  
                   __CFG_CP$OFF 0000             ___wmul@multiplicand 0072             nrf24l01Send@command 0023  
                   __CFG_LVP$ON 0000                             l225 0DED                             l218 042B  
                           l335 0249                             l370 0F55                             l339 025A  
                           l887 03F2                    flashUpdate@i 0078                    __CFG_CPD$OFF 0000  
                           _ISR 0004                             u905 0670                             u835 04F6  
                           u925 0689                             u855 0502                             u935 0694  
                           u865 0516                             u875 0522                             wreg 0009  
           nrf24l01SendPacket@i 002C                            ?_ISR 0070                  ??_nrf24l01Init 0034  
                          l2010 04F3                            l2020 0521                            l2012 0501  
                          l2024 052C                            l2112 0FCD                            l2040 0693  
                          l2106 0FBA                            l2034 066D                            l2108 0FC5  
                          l2036 067B                            l2044 069E                            l2116 0387  
                          l2222 0793                            l2126 03B4                            l2152 06CC  
                          l2312 0430                            l2400 02C0                            l2226 079D  
                          l2314 0424                            l2316 044E                            l2092 071A  
                          l2164 0F6F                            l2158 06DE                            l2166 0F7A  
                          l2190 0F61                            l2370 0285                            l2530 020A  
                          l2522 01C0                            l3090 0379                            l2390 02BC  
                          l2374 029A                            l2366 0275                            l2358 024E  
                          l2702 0E96                            l2536 0219                  ??_nrf24l01Send 0022  
                          l2388 02B0                            l2398 02ED                            l2690 0569  
                          l2836 0E46                            l2688 0541                            l1992 0E02  
                          l1996 0E08                            STR_1 103E                    __CFG_WDTE$ON 0000  
                          STR_2 103E                            STR_3 1036                            STR_4 1028  
                          STR_5 101E                            STR_6 103A                            STR_7 1023  
                          STR_8 1013                            STR_9 1032                            u1114 0F5B  
                          u1115 0F5A                            u1205 07A5                            u1055 06BA  
                          u1325 0294                            u1195 079E                            u1545 054F  
                          u1707 0FF6                            u1717 0256                            u1807 0421  
                          u1727 02A1                            u1737 02B8                            u1747 02D0  
                          u1757 02DD                            u1767 02EE                            u1687 030E  
                          u1777 06FA                            u1697 0FE6                            u1787 070C  
                          u1797 0717                            i1l94 0DE6                            _WPUA 020C  
                          _WPUC 020E  __size_of_nrf24l01InterfaceInit 001C                    __CFG_WRT$OFF 0000  
                 __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 0EC7                            _main 02F2  
                          _loop 0029                 ??_flashReadByte 0023                            fsr0h 0005  
                          fsr1h 0007                            indf0 0000                            fsr0l 0004  
                          indf1 0001                            fsr1l 0006                            btemp 007E  
__size_of_nrf24l01ReceivePacket 004D                   __CFG_BORV$LOW 0000   __end_of_nrf24l01ReceivePacket 0620  
                          start 000F           nrf24l01SetRXPipe@pipe 0026                   __CFG_CSWEN$ON 0000  
             ___bmul@multiplier 0024                   __CFG_MCLRE$ON 0000     __size_of_nrf24l01SendPacket 00AF  
                         ??_ISR 007E            __size_of_getADCValue 0088                 ??_nrf24l01CELow 0070  
               ??_nrf24l01CSLow 0070                           ?_main 0070                           ?_loop 0070  
                         STR_10 102D                 __end_of___lldiv 0535                 __end_of___llmod 06A7  
                __CFG_DEBUG$OFF 0000                           i1l213 000D                           i1l362 05C9  
                         i1l469 0E62          enableInterrupts@enable 0070                      i1memset@p1 0070  
           ___lmul@multiplicand 0025                   __CFG_PWRTE$ON 0000           nrf24l01SetTXPipe@pipe 0027  
                         _sleep 0DED                           _ultoa 037D                  __CFG_BOREN$OFF 0000  
              _enableInterrupts 0DD0                           status 0003                           wtemp0 007E  
   __end_ofi1_nrf24l01SetRXMode 0758                __end_ofi1_memset 0E41  __size_of_nrf24l01ChangeTXPower 003F  
             getADCValue@adcSum 0039   __end_of_nrf24l01ChangeTXPower 06E6                _nrf24l01SPIStart 0DD8  
               __initialization 0011                _nrf24l01CheckACK 0EC7          nrf24l01InitRegisters@i 0032  
                  __end_of_main 037D                    __end_of_loop 013D    nrf24l01ChangeTXPower@rfSetup 0027  
              ??_nrf24l01CEHigh 0070                          ??_main 0058                          ??_loop 0054  
              ??_nrf24l01CSHigh 0070                ??_nrf24l01SPIEnd 0070             _nrf24l01GetRXPacket 07FE  
      __size_of_nrf24l01SPISend 000D                ___llmod@dividend 0025                          _ADRESH 009C  
                        _ADRESL 009B                          ?_sleep 0070                          _ANSELA 018C  
                        _ANSELC 018E                          ?_ultoa 002F                ??_flashWriteByte 0074  
                        i1l2202 0FAE                          i1l2208 0E5C                          _ODCONA 028C  
      __size_of_nrf24l01GetPipe 0051                          _ODCONC 028E                          i1l2254 0751  
                        i1l2194 0F90                          i1l2198 0F98                          i1l1902 0DEB  
                        i1l2904 05A5                          i1l2844 0E2D                          u115_25 0E63  
                        i1l2918 05CA                          i1l2880 0612                          i1l2884 061A  
                        i1l2876 0602                          u116_25 0E68                          i1l2896 0596  
                        _INLVLA 038C                          _INLVLC 038E           __size_of_checkTXPower 0014  
                        u181_27 0733                          u182_27 0744                          u183_27 074E  
                        _PMADRH 0892                          u184_27 0DDC                          _PMADRL 0891  
                        u185_27 0DCA                          _PMDATH 0894                          _PMDATL 0893  
                        _PMCON1 0895                          _PMCON2 0896            ?_nrf24l01GetRXPacket 0070  
          __size_of_flashRealod 0020              flashWriteByte@data 0072            __size_of_flashUpdate 0021  
          __size_of_nrf24l01ISR 004D         nrf24l01SetRXMode@config 0025                          ___bmul 0DFF  
                        ___lmul 078A         nrf24l01SetRXMode@rxMode 0026                          ___wmul 0E5A  
                __CFG_STVREN$ON 0000                       ??___lldiv 0029                       ??___llmod 0029  
          __end_of_nrf24l01Init 1000            __end_of_nrf24l01Send 0F27                          _memset 0E41  
         _nrf24l01InitRegisters 013D                          _strcat 0FB4                          _strcmp 0F8E  
                        _strcpy 0E90                          _strlen 0F69       i1nrf24l01SetRXMode@config 0075  
              __end_of_romArray 2000       i1nrf24l01SetRXMode@rxMode 0076                    _checkTXPower 07EA  
                        ultoa@c 003A                          ultoa@v 0036              getADCValue@adcLoop 0038  
       __end_of__initialization 0025           ??_nrf24l01GetRXPacket 0021        nrf24l01SendPacket@Packet 002B  
            getADCValue@channel 0037             ___bmul@multiplicand 0021              getADCValue@divider 002F  
                __pcstackCOMMON 0070                   __end_of_sleep 0DFF                   __end_of_ultoa 0406  
                     ?i1_memset 0070                         ??_sleep 0021                     loop@rfSetup 00A0  
                       ??_ultoa 0035                      __pbssBANK0 0059                      __pbssBANK1 00E4  
                    __pbssBANK2 0120               ??_nrf24l01SPISend 0070              __size_of_exception 0018  
       __size_ofi1_nrf24l01Send 001B               ??_nrf24l01GetPipe 002B                      __pmaintext 02F2  
                       ?___bmul 0021                         ?___lmul 0021                         ?___wmul 0070  
               __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 06E6               _nrf24l01SetRXPipe 0F48  
        ?_nrf24l01InitRegisters 0070                      __pintentry 0004               _nrf24l01SetTXPipe 0620  
           nrf24l01SPISend@data 0070                         ?_memset 0021                  ___lmul@product 0029  
            ?_nrf24l01SetRXMode 0070              ?_nrf24l01SetRXPipe 0070        __end_of_enableInterrupts 0DD8  
            ?_nrf24l01SetTXPipe 0070             __CFG_RSTOSC$HFINT32 0000                         ?_strcat 0021  
                       ?_strcmp 0070                         ?_strcpy 0021                         ?_strlen 0021  
         __end_of_n_ADDRESS_MUL 1041                      ??i1_memset 0076             ??_nrf24l01SetRXMode 0024  
      __end_of_nrf24l01SPIStart 0DE0             ??_nrf24l01SetRXPipe 0024             ??_nrf24l01SetTXPipe 0025  
                       _SSP1BUF 0211        __end_of_nrf24l01CheckACK 0EE7           _nrf24l01InterfaceInit 0EAB  
         __end_of_flashReadByte 078A                __p_romArray_text 1FE0      __end_of_nrf24l01SendPacket 02F2  
                 ??_getADCValue 0033           __size_of_nrf24l01Init 0026           __size_of_nrf24l01Send 0020  
     __end_of_nrf24l01SetRXMode 0721       __end_of_nrf24l01SetRXPipe 0F69       __end_of_nrf24l01SetTXPipe 0664  
         _nrf24l01ReceivePacket 05D3                 __size_of___bmul 0012                 __size_of___lmul 0030  
                       ___lldiv 04E2                 __size_of___wmul 001B                         ___llmod 0664  
         __end_of_nrf24l01CELow 0DBD                 __size_of_memset 0019           __end_of_nrf24l01CSLow 0DC3  
                       __ptext1 0E90                         __ptext2 0FDA                         __ptext3 0EAB  
                       __ptext4 013D                         __ptext5 0620                         __ptext6 0DFF  
                       __ptext7 0F48                         __ptext8 0535                         __ptext9 0029  
               __size_of_strcat 0026                 __size_of_strcmp 0026               __end_of_exception 0E29  
               __size_of_strcpy 001B                 __size_of_strlen 0025                    __size_of_ISR 000B  
                       _counter 00E4                _romArray_absaddr 1FE0                         _romData 005C  
                       clrloop0 0DC4            end_of_initialization 0025                    _nrf24l01Init 0FDA  
                    _setMessage 048E                    _nrf24l01Send 0F07                         memset@c 0023  
                       memset@n 0025                         memset@p 0027                nrf24l01GetPipe@i 0035  
               ___lldiv@divisor 0021                 ___lldiv@counter 002E           _nrf24l01ChangeTXPower 06A7  
              setMessage@packet 0053    __size_ofi1_nrf24l01SetRXMode 0037                         strcmp@r 0073  
         i1nrf24l01Send@command 0073                         strlen@s 0028             __end_of_getADCValue 048E  
                     _PORTAbits 000C                       _PORTCbits 000E                       _TRISAbits 008C  
                     _TRISCbits 008E                nrf24l01Send@data 0021                __CFG_FEXTOSC$OFF 0000  
                 ??_flashRealod 002A                   ??_flashUpdate 0076                   ??_nrf24l01ISR 007D  
        ?_nrf24l01InterfaceInit 0070                  i1_nrf24l01Send 0E75                      main@packet 00C3  
        ?_nrf24l01ReceivePacket 0070      __size_of_nrf24l01SetRXMode 003B      __size_of_nrf24l01SetRXPipe 0021  
    __size_of_nrf24l01SetTXPipe 0044                  __end_of___bmul 0E11                  __end_of___lmul 07BA  
                __end_of___wmul 0E75                       i1memset@c 0072                       i1memset@n 0074  
                     i1memset@p 0076                  __end_of_memset 0E5A                  __end_of_strcat 0FDA  
                __end_of_strcmp 0FB4                  __end_of_strcpy 0EAB                  __end_of_strlen 0F8E  
           start_initialization 0011                 _nrf24l01SPISend 0DE0                     __end_of_ISR 000F  
         flashWriteByte@address 0074               __size_ofi1_memset 0018       nrf24l01SetRXPipe@enRXAddr 0027  
               _nrf24l01GetPipe 0535     __end_of_nrf24l01GetRXPacket 0800         __size_of_nrf24l01CEHigh 0003  
       __size_of_nrf24l01CSHigh 0003                     ?_setMessage 003D          __end_ofi1_nrf24l01Send 0E90  
       __size_of_nrf24l01SPIEnd 0007                 ___llmod@divisor 0021                 ___llmod@counter 002A  
        ?_nrf24l01ChangeTXPower 0024         ??_nrf24l01InitRegisters 0028                __CFG_LPBOREN$OFF 0000  
           __end_of_flashRealod 0F07                     _getADCValue 0406         __size_of_flashWriteByte 0030  
                      ??___bmul 0022             __end_of_flashUpdate 0F48                        ??___lmul 0029  
           __end_of_nrf24l01ISR 05D3            setMessage@tempString 0043                        ??___wmul 0074  
          __end_of_resetRomData 1013                        ??_memset 0027               ?_enableInterrupts 0070  
                      ??_strcat 0023                        ??_strcmp 0072                        ??_strcpy 0023  
                      ??_strlen 0023              ??_enableInterrupts 0070                       ___latbits 0002  
                 __pcstackBANK0 0020                   __pcstackBANK1 00A0               ?_nrf24l01SPIStart 0070  
          checkTXPower@rxPacket 0029               ?_nrf24l01CheckACK 0070              ??_nrf24l01SPIStart 0070  
            ??_nrf24l01CheckACK 0077                 ?i1_nrf24l01Send 0071                      loop@packet 00A1  
           nrf24l01GetPipe@name 0034             nrf24l01GetPipe@pipe 0030                        ?___lldiv 0021  
                      ?___llmod 0021            __end_of_n_ADDRESS_P0 101E         __end_of_nrf24l01SPISend 0DED  
            i1nrf24l01Send@data 0071       nrf24l01InitRegisters@enAA 002F             __size_of_setMessage 0054  
            _nrf24l01SendPacket 0243         __end_of_nrf24l01GetPipe 0586                       _exception 0E11  
           ?_nrf24l01SendPacket 0070             i1_nrf24l01SetRXMode 0721                  __size_of_sleep 0012  
                __size_of_ultoa 0089                     _flashRealod 0EE7                  ___wmul@product 0074  
                   _flashUpdate 0F27                     _nrf24l01ISR 0586                       clear_ram0 0DC3  
                      _PIE0bits 0090                        _PIR0bits 0010                       _romHolder 0120  
                     _sleepLoop 005A            ??_nrf24l01SendPacket 0029                 setMessage@value 003F  
               setMessage@topic 003D            ?i1_nrf24l01SetRXMode 0070                      _ADCON0bits 009D  
                    _ADCON1bits 009E               ___wmul@multiplier 0070                        _WPUAbits 020C  
                      i1_memset 0E29                   ?_checkTXPower 0070                        _RXPacket 0140  
        __size_of_flashReadByte 0032                        _TXPacket 0059                      ?_exception 0070  
                _nrf24l01CEHigh 0DB7               ___lmul@multiplier 0021         ??_nrf24l01InterfaceInit 0021  
                _nrf24l01CSHigh 0DBD               nrf24l01ISR@status 0020                  _nrf24l01SPIEnd 0DC9  
       ??_nrf24l01ReceivePacket 0078          __size_of_nrf24l01CELow 0003          __size_of_nrf24l01CSLow 0003  
          flashWriteByte@offset 0070                  _flashWriteByte 07BA           ??i1_nrf24l01SetRXMode 0074  
              __size_of___lldiv 0053                __size_of___llmod 0043                ?_nrf24l01SPISend 0070  
                    _ANSELAbits 018C                      _ANSELCbits 018E                  ??_checkTXPower 0028  
              ?_nrf24l01GetPipe 0070                   _n_ADDRESS_MUL 1040                      strcat@from 0021  
        __end_of_nrf24l01CEHigh 0DBA          __end_of_nrf24l01CSHigh 0DC0                        __ptext10 0DED  
                      __ptext11 048E                        __ptext20 078A                        __ptext12 037D  
                      __ptext21 04E2                        __ptext13 0664                        __ptext30 05D3  
                      __ptext22 07EA                        __ptext14 0FB4                        __ptext31 0E29  
                      __ptext23 07FE                        __ptext15 0E41                        __ptext40 0DD0  
                      __ptext32 0EC7                        __ptext24 06A7                        __ptext16 0243  
                      __ptext41 0DBA                        __ptext33 0721                        __ptext25 0F07  
                      __ptext17 0F69                        __ptext42 0DB7                        __ptext34 0E75  
                      __ptext26 0EE7                        __ptext18 06E6                        __ptext43 0F8E  
                      __ptext35 0DD8                        __ptext27 0758                        __ptext19 0406  
                      __ptext44 0E11                        __ptext36 0DC0                        __ptext45 0F27  
                      __ptext37 0DE0                        __ptext29 0586                        __ptext46 07BA  
                      __ptext38 0DC9                        __ptext47 0E5A                        __ptext39 0DBD  
                  _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 0DD0                        _nrf24l01 005B  
                  _resetRomData 1000                     _OSCCON1bits 0919                    ??_setMessage 0043  
                    strcpy@from 0021   nrf24l01ChangeTXPower@addPower 0024         ??_nrf24l01ChangeTXPower 0026  
                 __size_of_main 008B                   __size_of_loop 0114    nrf24l01InitRegisters@channel 002A  
        __end_of_flashWriteByte 07EA    nrf24l01InitRegisters@feature 002C              exception@exception 007C  
                    _RC0PPSbits 0EA0                        _romArray 1FE0                   _flashReadByte 0758  
  nrf24l01InitRegisters@rfSetup 002D                      _RC1PPSbits 0EA1                    ?_getADCValue 002F  
                    _RC2PPSbits 0EA2  __size_of_nrf24l01InitRegisters 0106   __end_of_nrf24l01InitRegisters 0243  
                      int$flags 007E    nrf24l01InitRegisters@setupAW 002B                    _SSP1STATbits 0214  
                      main@pipe 00C2          nrf24l01ReceivePacket@i 007A                   _nrf24l01CELow 0DBA  
                 _nrf24l01CSLow 0DC0              __end_of_setMessage 04E2                      _INTCONbits 000B  
               ?_nrf24l01CEHigh 0070                      _FVRCONbits 0117                ??i1_nrf24l01Send 0072  
                   ??_exception 007A                 ?_nrf24l01CSHigh 0070                  __pstringtext10 1036  
                __pstringtext11 103A                  __pstringtext12 103E                  __pstringtext13 0000  
                      memset@p1 0021                       ultoa@base 0033                 ?_nrf24l01SPIEnd 0070  
                      intlevel1 0000                    _n_ADDRESS_P0 1019       __size_of_enableInterrupts 0008  
                    _PMCON1bits 0895                ___lldiv@dividend 0025               __CFG_CLKOUTEN$OFF 0000  
               ?_flashWriteByte 0070    __size_of_nrf24l01GetRXPacket 0002                  ?_flashReadByte 0021  
   nrf24l01InitRegisters@config 0031       __size_of_nrf24l01SPIStart 0008       __size_of_nrf24l01CheckACK 0020  
   nrf24l01InitRegisters@status 002E      nrf24l01ReceivePacket@width 0079                  ?_nrf24l01CELow 0070  
                 __pstringtext1 1000                   __pstringtext2 1019                   __pstringtext3 1040  
                 __pstringtext4 1013                   __pstringtext5 101E                   __pstringtext6 1023  
                 __pstringtext7 1028                   __pstringtext8 102D                   __pstringtext9 1032  
                ?_nrf24l01CSLow 0070                        ultoa@buf 003B                        ultoa@val 002F  
    nrf24l01InitRegisters@DynPD 0030                        strcat@cp 0024                        strcat@to 0025  
                      strcmp@s1 0074                        strcmp@s2 0070                ___lldiv@quotient 002A  
                      strcpy@cp 0025                        strlen@cp 0027                        strcpy@to 0024  
                    _WDTCONbits 0097                   ?_nrf24l01Init 0070                   ?_nrf24l01Send 0021  
                  ?_flashRealod 0070                      _STATUSbits 0003            flashReadByte@address 0028  
                  ?_flashUpdate 0070                    ?_nrf24l01ISR 0070            __end_of_checkTXPower 07FE  
           flashReadByte@offset 0021  
