

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Tue Jul 24 16:12:01 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	_romArray_text,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    69                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	intentry,global,class=CODE,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2,group=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	dabs	1,0x7E,2
    91  0000                     
    92                           ; Version 2.00
    93                           ; Generated 27/05/2018 GMT
    94                           ; 
    95                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    96                           ; All rights reserved.
    97                           ; 
    98                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    99                           ; 
   100                           ; Redistribution and use in source and binary forms, with or without modification, are
   101                           ; permitted provided that the following conditions are met:
   102                           ; 
   103                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   104                           ;        conditions and the following disclaimer.
   105                           ; 
   106                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   107                           ;        of conditions and the following disclaimer in the documentation and/or other
   108                           ;        materials provided with the distribution.
   109                           ; 
   110                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   111                           ;        software without specific prior written permission.
   112                           ; 
   113                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   114                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   115                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   116                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   117                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   118                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   119                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   120                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   121                           ; 
   122                           ; 
   123                           ; Code-generator required, PIC16LF18325 Definitions
   124                           ; 
   125                           ; SFR Addresses
   126  0000                     	;# 
   127  0001                     	;# 
   128  0002                     	;# 
   129  0003                     	;# 
   130  0004                     	;# 
   131  0005                     	;# 
   132  0006                     	;# 
   133  0007                     	;# 
   134  0008                     	;# 
   135  0009                     	;# 
   136  000A                     	;# 
   137  000B                     	;# 
   138  000C                     	;# 
   139  000E                     	;# 
   140  0010                     	;# 
   141  0011                     	;# 
   142  0012                     	;# 
   143  0013                     	;# 
   144  0014                     	;# 
   145  0015                     	;# 
   146  0015                     	;# 
   147  0016                     	;# 
   148  0016                     	;# 
   149  0017                     	;# 
   150  0018                     	;# 
   151  0019                     	;# 
   152  0019                     	;# 
   153  001A                     	;# 
   154  001B                     	;# 
   155  001C                     	;# 
   156  001D                     	;# 
   157  001E                     	;# 
   158  001F                     	;# 
   159  008C                     	;# 
   160  008E                     	;# 
   161  0090                     	;# 
   162  0091                     	;# 
   163  0092                     	;# 
   164  0093                     	;# 
   165  0094                     	;# 
   166  0097                     	;# 
   167  009B                     	;# 
   168  009B                     	;# 
   169  009C                     	;# 
   170  009D                     	;# 
   171  009E                     	;# 
   172  009F                     	;# 
   173  010C                     	;# 
   174  010E                     	;# 
   175  0111                     	;# 
   176  0112                     	;# 
   177  0113                     	;# 
   178  0114                     	;# 
   179  0115                     	;# 
   180  0116                     	;# 
   181  0117                     	;# 
   182  0118                     	;# 
   183  0119                     	;# 
   184  018C                     	;# 
   185  018E                     	;# 
   186  0199                     	;# 
   187  0199                     	;# 
   188  0199                     	;# 
   189  019A                     	;# 
   190  019A                     	;# 
   191  019A                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019B                     	;# 
   195  019B                     	;# 
   196  019B                     	;# 
   197  019C                     	;# 
   198  019C                     	;# 
   199  019C                     	;# 
   200  019D                     	;# 
   201  019D                     	;# 
   202  019D                     	;# 
   203  019E                     	;# 
   204  019E                     	;# 
   205  019E                     	;# 
   206  019F                     	;# 
   207  019F                     	;# 
   208  019F                     	;# 
   209  019F                     	;# 
   210  019F                     	;# 
   211  020C                     	;# 
   212  020E                     	;# 
   213  0211                     	;# 
   214  0211                     	;# 
   215  0212                     	;# 
   216  0212                     	;# 
   217  0213                     	;# 
   218  0213                     	;# 
   219  0214                     	;# 
   220  0214                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0215                     	;# 
   224  0215                     	;# 
   225  0216                     	;# 
   226  0216                     	;# 
   227  0217                     	;# 
   228  0217                     	;# 
   229  0219                     	;# 
   230  021A                     	;# 
   231  021B                     	;# 
   232  021C                     	;# 
   233  021D                     	;# 
   234  021D                     	;# 
   235  021E                     	;# 
   236  021F                     	;# 
   237  028C                     	;# 
   238  028E                     	;# 
   239  0291                     	;# 
   240  0291                     	;# 
   241  0292                     	;# 
   242  0293                     	;# 
   243  0294                     	;# 
   244  0295                     	;# 
   245  0295                     	;# 
   246  0296                     	;# 
   247  0297                     	;# 
   248  0298                     	;# 
   249  029F                     	;# 
   250  030C                     	;# 
   251  030E                     	;# 
   252  0311                     	;# 
   253  0311                     	;# 
   254  0312                     	;# 
   255  0313                     	;# 
   256  0314                     	;# 
   257  0315                     	;# 
   258  0315                     	;# 
   259  0316                     	;# 
   260  0317                     	;# 
   261  0318                     	;# 
   262  038C                     	;# 
   263  038E                     	;# 
   264  0391                     	;# 
   265  0392                     	;# 
   266  0393                     	;# 
   267  0397                     	;# 
   268  0398                     	;# 
   269  0399                     	;# 
   270  039A                     	;# 
   271  039C                     	;# 
   272  039D                     	;# 
   273  039E                     	;# 
   274  039F                     	;# 
   275  0411                     	;# 
   276  0411                     	;# 
   277  0412                     	;# 
   278  0413                     	;# 
   279  0414                     	;# 
   280  0415                     	;# 
   281  0416                     	;# 
   282  0417                     	;# 
   283  0418                     	;# 
   284  0418                     	;# 
   285  0419                     	;# 
   286  041A                     	;# 
   287  041B                     	;# 
   288  041C                     	;# 
   289  041D                     	;# 
   290  041E                     	;# 
   291  041F                     	;# 
   292  0498                     	;# 
   293  0498                     	;# 
   294  0499                     	;# 
   295  049A                     	;# 
   296  049B                     	;# 
   297  049B                     	;# 
   298  049C                     	;# 
   299  049D                     	;# 
   300  049E                     	;# 
   301  049F                     	;# 
   302  0617                     	;# 
   303  0618                     	;# 
   304  0619                     	;# 
   305  0619                     	;# 
   306  061A                     	;# 
   307  061B                     	;# 
   308  061C                     	;# 
   309  061C                     	;# 
   310  061F                     	;# 
   311  0691                     	;# 
   312  0692                     	;# 
   313  0693                     	;# 
   314  0694                     	;# 
   315  0695                     	;# 
   316  0696                     	;# 
   317  0697                     	;# 
   318  0698                     	;# 
   319  0699                     	;# 
   320  0711                     	;# 
   321  0712                     	;# 
   322  0713                     	;# 
   323  0714                     	;# 
   324  0715                     	;# 
   325  0716                     	;# 
   326  0717                     	;# 
   327  0718                     	;# 
   328  0719                     	;# 
   329  0891                     	;# 
   330  0891                     	;# 
   331  0891                     	;# 
   332  0891                     	;# 
   333  0891                     	;# 
   334  0891                     	;# 
   335  0892                     	;# 
   336  0892                     	;# 
   337  0892                     	;# 
   338  0893                     	;# 
   339  0893                     	;# 
   340  0893                     	;# 
   341  0893                     	;# 
   342  0893                     	;# 
   343  0893                     	;# 
   344  0894                     	;# 
   345  0894                     	;# 
   346  0894                     	;# 
   347  0895                     	;# 
   348  0895                     	;# 
   349  0895                     	;# 
   350  0896                     	;# 
   351  0896                     	;# 
   352  0896                     	;# 
   353  089B                     	;# 
   354  0911                     	;# 
   355  0912                     	;# 
   356  0913                     	;# 
   357  0914                     	;# 
   358  0915                     	;# 
   359  0916                     	;# 
   360  0918                     	;# 
   361  0919                     	;# 
   362  091A                     	;# 
   363  091B                     	;# 
   364  091C                     	;# 
   365  091D                     	;# 
   366  091E                     	;# 
   367  091F                     	;# 
   368  0E0F                     	;# 
   369  0E10                     	;# 
   370  0E11                     	;# 
   371  0E12                     	;# 
   372  0E13                     	;# 
   373  0E14                     	;# 
   374  0E15                     	;# 
   375  0E16                     	;# 
   376  0E17                     	;# 
   377  0E18                     	;# 
   378  0E19                     	;# 
   379  0E1A                     	;# 
   380  0E1B                     	;# 
   381  0E1C                     	;# 
   382  0E1D                     	;# 
   383  0E1E                     	;# 
   384  0E1F                     	;# 
   385  0E20                     	;# 
   386  0E21                     	;# 
   387  0E22                     	;# 
   388  0E24                     	;# 
   389  0E25                     	;# 
   390  0E28                     	;# 
   391  0E29                     	;# 
   392  0E2A                     	;# 
   393  0E2B                     	;# 
   394  0E2C                     	;# 
   395  0E2D                     	;# 
   396  0E2E                     	;# 
   397  0E2F                     	;# 
   398  0E90                     	;# 
   399  0E91                     	;# 
   400  0E92                     	;# 
   401  0E94                     	;# 
   402  0E95                     	;# 
   403  0EA0                     	;# 
   404  0EA1                     	;# 
   405  0EA2                     	;# 
   406  0EA3                     	;# 
   407  0EA4                     	;# 
   408  0EA5                     	;# 
   409  0F0F                     	;# 
   410  0F10                     	;# 
   411  0F11                     	;# 
   412  0F12                     	;# 
   413  0F13                     	;# 
   414  0F14                     	;# 
   415  0F15                     	;# 
   416  0F16                     	;# 
   417  0F17                     	;# 
   418  0F18                     	;# 
   419  0F19                     	;# 
   420  0F1A                     	;# 
   421  0F1B                     	;# 
   422  0F1C                     	;# 
   423  0F1D                     	;# 
   424  0F1E                     	;# 
   425  0F1F                     	;# 
   426  0F20                     	;# 
   427  0F21                     	;# 
   428  0F22                     	;# 
   429  0F23                     	;# 
   430  0F24                     	;# 
   431  0F25                     	;# 
   432  0F26                     	;# 
   433  0F27                     	;# 
   434  0F28                     	;# 
   435  0F29                     	;# 
   436  0F2A                     	;# 
   437  0F2B                     	;# 
   438  0F2C                     	;# 
   439  0F2D                     	;# 
   440  0F2E                     	;# 
   441  0F2F                     	;# 
   442  0F30                     	;# 
   443  0F31                     	;# 
   444  0F32                     	;# 
   445  0F33                     	;# 
   446  0F34                     	;# 
   447  0F35                     	;# 
   448  0F36                     	;# 
   449  0F37                     	;# 
   450  0FE4                     	;# 
   451  0FE5                     	;# 
   452  0FE6                     	;# 
   453  0FE7                     	;# 
   454  0FE8                     	;# 
   455  0FE9                     	;# 
   456  0FEA                     	;# 
   457  0FEB                     	;# 
   458  0FED                     	;# 
   459  0FEE                     	;# 
   460  0FEF                     	;# 
   461  0000                     	;# 
   462  0001                     	;# 
   463  0002                     	;# 
   464  0003                     	;# 
   465  0004                     	;# 
   466  0005                     	;# 
   467  0006                     	;# 
   468  0007                     	;# 
   469  0008                     	;# 
   470  0009                     	;# 
   471  000A                     	;# 
   472  000B                     	;# 
   473  000C                     	;# 
   474  000E                     	;# 
   475  0010                     	;# 
   476  0011                     	;# 
   477  0012                     	;# 
   478  0013                     	;# 
   479  0014                     	;# 
   480  0015                     	;# 
   481  0015                     	;# 
   482  0016                     	;# 
   483  0016                     	;# 
   484  0017                     	;# 
   485  0018                     	;# 
   486  0019                     	;# 
   487  0019                     	;# 
   488  001A                     	;# 
   489  001B                     	;# 
   490  001C                     	;# 
   491  001D                     	;# 
   492  001E                     	;# 
   493  001F                     	;# 
   494  008C                     	;# 
   495  008E                     	;# 
   496  0090                     	;# 
   497  0091                     	;# 
   498  0092                     	;# 
   499  0093                     	;# 
   500  0094                     	;# 
   501  0097                     	;# 
   502  009B                     	;# 
   503  009B                     	;# 
   504  009C                     	;# 
   505  009D                     	;# 
   506  009E                     	;# 
   507  009F                     	;# 
   508  010C                     	;# 
   509  010E                     	;# 
   510  0111                     	;# 
   511  0112                     	;# 
   512  0113                     	;# 
   513  0114                     	;# 
   514  0115                     	;# 
   515  0116                     	;# 
   516  0117                     	;# 
   517  0118                     	;# 
   518  0119                     	;# 
   519  018C                     	;# 
   520  018E                     	;# 
   521  0199                     	;# 
   522  0199                     	;# 
   523  0199                     	;# 
   524  019A                     	;# 
   525  019A                     	;# 
   526  019A                     	;# 
   527  019B                     	;# 
   528  019B                     	;# 
   529  019B                     	;# 
   530  019B                     	;# 
   531  019B                     	;# 
   532  019C                     	;# 
   533  019C                     	;# 
   534  019C                     	;# 
   535  019D                     	;# 
   536  019D                     	;# 
   537  019D                     	;# 
   538  019E                     	;# 
   539  019E                     	;# 
   540  019E                     	;# 
   541  019F                     	;# 
   542  019F                     	;# 
   543  019F                     	;# 
   544  019F                     	;# 
   545  019F                     	;# 
   546  020C                     	;# 
   547  020E                     	;# 
   548  0211                     	;# 
   549  0211                     	;# 
   550  0212                     	;# 
   551  0212                     	;# 
   552  0213                     	;# 
   553  0213                     	;# 
   554  0214                     	;# 
   555  0214                     	;# 
   556  0215                     	;# 
   557  0215                     	;# 
   558  0215                     	;# 
   559  0215                     	;# 
   560  0216                     	;# 
   561  0216                     	;# 
   562  0217                     	;# 
   563  0217                     	;# 
   564  0219                     	;# 
   565  021A                     	;# 
   566  021B                     	;# 
   567  021C                     	;# 
   568  021D                     	;# 
   569  021D                     	;# 
   570  021E                     	;# 
   571  021F                     	;# 
   572  028C                     	;# 
   573  028E                     	;# 
   574  0291                     	;# 
   575  0291                     	;# 
   576  0292                     	;# 
   577  0293                     	;# 
   578  0294                     	;# 
   579  0295                     	;# 
   580  0295                     	;# 
   581  0296                     	;# 
   582  0297                     	;# 
   583  0298                     	;# 
   584  029F                     	;# 
   585  030C                     	;# 
   586  030E                     	;# 
   587  0311                     	;# 
   588  0311                     	;# 
   589  0312                     	;# 
   590  0313                     	;# 
   591  0314                     	;# 
   592  0315                     	;# 
   593  0315                     	;# 
   594  0316                     	;# 
   595  0317                     	;# 
   596  0318                     	;# 
   597  038C                     	;# 
   598  038E                     	;# 
   599  0391                     	;# 
   600  0392                     	;# 
   601  0393                     	;# 
   602  0397                     	;# 
   603  0398                     	;# 
   604  0399                     	;# 
   605  039A                     	;# 
   606  039C                     	;# 
   607  039D                     	;# 
   608  039E                     	;# 
   609  039F                     	;# 
   610  0411                     	;# 
   611  0411                     	;# 
   612  0412                     	;# 
   613  0413                     	;# 
   614  0414                     	;# 
   615  0415                     	;# 
   616  0416                     	;# 
   617  0417                     	;# 
   618  0418                     	;# 
   619  0418                     	;# 
   620  0419                     	;# 
   621  041A                     	;# 
   622  041B                     	;# 
   623  041C                     	;# 
   624  041D                     	;# 
   625  041E                     	;# 
   626  041F                     	;# 
   627  0498                     	;# 
   628  0498                     	;# 
   629  0499                     	;# 
   630  049A                     	;# 
   631  049B                     	;# 
   632  049B                     	;# 
   633  049C                     	;# 
   634  049D                     	;# 
   635  049E                     	;# 
   636  049F                     	;# 
   637  0617                     	;# 
   638  0618                     	;# 
   639  0619                     	;# 
   640  0619                     	;# 
   641  061A                     	;# 
   642  061B                     	;# 
   643  061C                     	;# 
   644  061C                     	;# 
   645  061F                     	;# 
   646  0691                     	;# 
   647  0692                     	;# 
   648  0693                     	;# 
   649  0694                     	;# 
   650  0695                     	;# 
   651  0696                     	;# 
   652  0697                     	;# 
   653  0698                     	;# 
   654  0699                     	;# 
   655  0711                     	;# 
   656  0712                     	;# 
   657  0713                     	;# 
   658  0714                     	;# 
   659  0715                     	;# 
   660  0716                     	;# 
   661  0717                     	;# 
   662  0718                     	;# 
   663  0719                     	;# 
   664  0891                     	;# 
   665  0891                     	;# 
   666  0891                     	;# 
   667  0891                     	;# 
   668  0891                     	;# 
   669  0891                     	;# 
   670  0892                     	;# 
   671  0892                     	;# 
   672  0892                     	;# 
   673  0893                     	;# 
   674  0893                     	;# 
   675  0893                     	;# 
   676  0893                     	;# 
   677  0893                     	;# 
   678  0893                     	;# 
   679  0894                     	;# 
   680  0894                     	;# 
   681  0894                     	;# 
   682  0895                     	;# 
   683  0895                     	;# 
   684  0895                     	;# 
   685  0896                     	;# 
   686  0896                     	;# 
   687  0896                     	;# 
   688  089B                     	;# 
   689  0911                     	;# 
   690  0912                     	;# 
   691  0913                     	;# 
   692  0914                     	;# 
   693  0915                     	;# 
   694  0916                     	;# 
   695  0918                     	;# 
   696  0919                     	;# 
   697  091A                     	;# 
   698  091B                     	;# 
   699  091C                     	;# 
   700  091D                     	;# 
   701  091E                     	;# 
   702  091F                     	;# 
   703  0E0F                     	;# 
   704  0E10                     	;# 
   705  0E11                     	;# 
   706  0E12                     	;# 
   707  0E13                     	;# 
   708  0E14                     	;# 
   709  0E15                     	;# 
   710  0E16                     	;# 
   711  0E17                     	;# 
   712  0E18                     	;# 
   713  0E19                     	;# 
   714  0E1A                     	;# 
   715  0E1B                     	;# 
   716  0E1C                     	;# 
   717  0E1D                     	;# 
   718  0E1E                     	;# 
   719  0E1F                     	;# 
   720  0E20                     	;# 
   721  0E21                     	;# 
   722  0E22                     	;# 
   723  0E24                     	;# 
   724  0E25                     	;# 
   725  0E28                     	;# 
   726  0E29                     	;# 
   727  0E2A                     	;# 
   728  0E2B                     	;# 
   729  0E2C                     	;# 
   730  0E2D                     	;# 
   731  0E2E                     	;# 
   732  0E2F                     	;# 
   733  0E90                     	;# 
   734  0E91                     	;# 
   735  0E92                     	;# 
   736  0E94                     	;# 
   737  0E95                     	;# 
   738  0EA0                     	;# 
   739  0EA1                     	;# 
   740  0EA2                     	;# 
   741  0EA3                     	;# 
   742  0EA4                     	;# 
   743  0EA5                     	;# 
   744  0F0F                     	;# 
   745  0F10                     	;# 
   746  0F11                     	;# 
   747  0F12                     	;# 
   748  0F13                     	;# 
   749  0F14                     	;# 
   750  0F15                     	;# 
   751  0F16                     	;# 
   752  0F17                     	;# 
   753  0F18                     	;# 
   754  0F19                     	;# 
   755  0F1A                     	;# 
   756  0F1B                     	;# 
   757  0F1C                     	;# 
   758  0F1D                     	;# 
   759  0F1E                     	;# 
   760  0F1F                     	;# 
   761  0F20                     	;# 
   762  0F21                     	;# 
   763  0F22                     	;# 
   764  0F23                     	;# 
   765  0F24                     	;# 
   766  0F25                     	;# 
   767  0F26                     	;# 
   768  0F27                     	;# 
   769  0F28                     	;# 
   770  0F29                     	;# 
   771  0F2A                     	;# 
   772  0F2B                     	;# 
   773  0F2C                     	;# 
   774  0F2D                     	;# 
   775  0F2E                     	;# 
   776  0F2F                     	;# 
   777  0F30                     	;# 
   778  0F31                     	;# 
   779  0F32                     	;# 
   780  0F33                     	;# 
   781  0F34                     	;# 
   782  0F35                     	;# 
   783  0F36                     	;# 
   784  0F37                     	;# 
   785  0FE4                     	;# 
   786  0FE5                     	;# 
   787  0FE6                     	;# 
   788  0FE7                     	;# 
   789  0FE8                     	;# 
   790  0FE9                     	;# 
   791  0FEA                     	;# 
   792  0FEB                     	;# 
   793  0FED                     	;# 
   794  0FEE                     	;# 
   795  0FEF                     	;# 
   796  0000                     	;# 
   797  0001                     	;# 
   798  0002                     	;# 
   799  0003                     	;# 
   800  0004                     	;# 
   801  0005                     	;# 
   802  0006                     	;# 
   803  0007                     	;# 
   804  0008                     	;# 
   805  0009                     	;# 
   806  000A                     	;# 
   807  000B                     	;# 
   808  000C                     	;# 
   809  000E                     	;# 
   810  0010                     	;# 
   811  0011                     	;# 
   812  0012                     	;# 
   813  0013                     	;# 
   814  0014                     	;# 
   815  0015                     	;# 
   816  0015                     	;# 
   817  0016                     	;# 
   818  0016                     	;# 
   819  0017                     	;# 
   820  0018                     	;# 
   821  0019                     	;# 
   822  0019                     	;# 
   823  001A                     	;# 
   824  001B                     	;# 
   825  001C                     	;# 
   826  001D                     	;# 
   827  001E                     	;# 
   828  001F                     	;# 
   829  008C                     	;# 
   830  008E                     	;# 
   831  0090                     	;# 
   832  0091                     	;# 
   833  0092                     	;# 
   834  0093                     	;# 
   835  0094                     	;# 
   836  0097                     	;# 
   837  009B                     	;# 
   838  009B                     	;# 
   839  009C                     	;# 
   840  009D                     	;# 
   841  009E                     	;# 
   842  009F                     	;# 
   843  010C                     	;# 
   844  010E                     	;# 
   845  0111                     	;# 
   846  0112                     	;# 
   847  0113                     	;# 
   848  0114                     	;# 
   849  0115                     	;# 
   850  0116                     	;# 
   851  0117                     	;# 
   852  0118                     	;# 
   853  0119                     	;# 
   854  018C                     	;# 
   855  018E                     	;# 
   856  0199                     	;# 
   857  0199                     	;# 
   858  0199                     	;# 
   859  019A                     	;# 
   860  019A                     	;# 
   861  019A                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019B                     	;# 
   866  019B                     	;# 
   867  019C                     	;# 
   868  019C                     	;# 
   869  019C                     	;# 
   870  019D                     	;# 
   871  019D                     	;# 
   872  019D                     	;# 
   873  019E                     	;# 
   874  019E                     	;# 
   875  019E                     	;# 
   876  019F                     	;# 
   877  019F                     	;# 
   878  019F                     	;# 
   879  019F                     	;# 
   880  019F                     	;# 
   881  020C                     	;# 
   882  020E                     	;# 
   883  0211                     	;# 
   884  0211                     	;# 
   885  0212                     	;# 
   886  0212                     	;# 
   887  0213                     	;# 
   888  0213                     	;# 
   889  0214                     	;# 
   890  0214                     	;# 
   891  0215                     	;# 
   892  0215                     	;# 
   893  0215                     	;# 
   894  0215                     	;# 
   895  0216                     	;# 
   896  0216                     	;# 
   897  0217                     	;# 
   898  0217                     	;# 
   899  0219                     	;# 
   900  021A                     	;# 
   901  021B                     	;# 
   902  021C                     	;# 
   903  021D                     	;# 
   904  021D                     	;# 
   905  021E                     	;# 
   906  021F                     	;# 
   907  028C                     	;# 
   908  028E                     	;# 
   909  0291                     	;# 
   910  0291                     	;# 
   911  0292                     	;# 
   912  0293                     	;# 
   913  0294                     	;# 
   914  0295                     	;# 
   915  0295                     	;# 
   916  0296                     	;# 
   917  0297                     	;# 
   918  0298                     	;# 
   919  029F                     	;# 
   920  030C                     	;# 
   921  030E                     	;# 
   922  0311                     	;# 
   923  0311                     	;# 
   924  0312                     	;# 
   925  0313                     	;# 
   926  0314                     	;# 
   927  0315                     	;# 
   928  0315                     	;# 
   929  0316                     	;# 
   930  0317                     	;# 
   931  0318                     	;# 
   932  038C                     	;# 
   933  038E                     	;# 
   934  0391                     	;# 
   935  0392                     	;# 
   936  0393                     	;# 
   937  0397                     	;# 
   938  0398                     	;# 
   939  0399                     	;# 
   940  039A                     	;# 
   941  039C                     	;# 
   942  039D                     	;# 
   943  039E                     	;# 
   944  039F                     	;# 
   945  0411                     	;# 
   946  0411                     	;# 
   947  0412                     	;# 
   948  0413                     	;# 
   949  0414                     	;# 
   950  0415                     	;# 
   951  0416                     	;# 
   952  0417                     	;# 
   953  0418                     	;# 
   954  0418                     	;# 
   955  0419                     	;# 
   956  041A                     	;# 
   957  041B                     	;# 
   958  041C                     	;# 
   959  041D                     	;# 
   960  041E                     	;# 
   961  041F                     	;# 
   962  0498                     	;# 
   963  0498                     	;# 
   964  0499                     	;# 
   965  049A                     	;# 
   966  049B                     	;# 
   967  049B                     	;# 
   968  049C                     	;# 
   969  049D                     	;# 
   970  049E                     	;# 
   971  049F                     	;# 
   972  0617                     	;# 
   973  0618                     	;# 
   974  0619                     	;# 
   975  0619                     	;# 
   976  061A                     	;# 
   977  061B                     	;# 
   978  061C                     	;# 
   979  061C                     	;# 
   980  061F                     	;# 
   981  0691                     	;# 
   982  0692                     	;# 
   983  0693                     	;# 
   984  0694                     	;# 
   985  0695                     	;# 
   986  0696                     	;# 
   987  0697                     	;# 
   988  0698                     	;# 
   989  0699                     	;# 
   990  0711                     	;# 
   991  0712                     	;# 
   992  0713                     	;# 
   993  0714                     	;# 
   994  0715                     	;# 
   995  0716                     	;# 
   996  0717                     	;# 
   997  0718                     	;# 
   998  0719                     	;# 
   999  0891                     	;# 
  1000  0891                     	;# 
  1001  0891                     	;# 
  1002  0891                     	;# 
  1003  0891                     	;# 
  1004  0891                     	;# 
  1005  0892                     	;# 
  1006  0892                     	;# 
  1007  0892                     	;# 
  1008  0893                     	;# 
  1009  0893                     	;# 
  1010  0893                     	;# 
  1011  0893                     	;# 
  1012  0893                     	;# 
  1013  0893                     	;# 
  1014  0894                     	;# 
  1015  0894                     	;# 
  1016  0894                     	;# 
  1017  0895                     	;# 
  1018  0895                     	;# 
  1019  0895                     	;# 
  1020  0896                     	;# 
  1021  0896                     	;# 
  1022  0896                     	;# 
  1023  089B                     	;# 
  1024  0911                     	;# 
  1025  0912                     	;# 
  1026  0913                     	;# 
  1027  0914                     	;# 
  1028  0915                     	;# 
  1029  0916                     	;# 
  1030  0918                     	;# 
  1031  0919                     	;# 
  1032  091A                     	;# 
  1033  091B                     	;# 
  1034  091C                     	;# 
  1035  091D                     	;# 
  1036  091E                     	;# 
  1037  091F                     	;# 
  1038  0E0F                     	;# 
  1039  0E10                     	;# 
  1040  0E11                     	;# 
  1041  0E12                     	;# 
  1042  0E13                     	;# 
  1043  0E14                     	;# 
  1044  0E15                     	;# 
  1045  0E16                     	;# 
  1046  0E17                     	;# 
  1047  0E18                     	;# 
  1048  0E19                     	;# 
  1049  0E1A                     	;# 
  1050  0E1B                     	;# 
  1051  0E1C                     	;# 
  1052  0E1D                     	;# 
  1053  0E1E                     	;# 
  1054  0E1F                     	;# 
  1055  0E20                     	;# 
  1056  0E21                     	;# 
  1057  0E22                     	;# 
  1058  0E24                     	;# 
  1059  0E25                     	;# 
  1060  0E28                     	;# 
  1061  0E29                     	;# 
  1062  0E2A                     	;# 
  1063  0E2B                     	;# 
  1064  0E2C                     	;# 
  1065  0E2D                     	;# 
  1066  0E2E                     	;# 
  1067  0E2F                     	;# 
  1068  0E90                     	;# 
  1069  0E91                     	;# 
  1070  0E92                     	;# 
  1071  0E94                     	;# 
  1072  0E95                     	;# 
  1073  0EA0                     	;# 
  1074  0EA1                     	;# 
  1075  0EA2                     	;# 
  1076  0EA3                     	;# 
  1077  0EA4                     	;# 
  1078  0EA5                     	;# 
  1079  0F0F                     	;# 
  1080  0F10                     	;# 
  1081  0F11                     	;# 
  1082  0F12                     	;# 
  1083  0F13                     	;# 
  1084  0F14                     	;# 
  1085  0F15                     	;# 
  1086  0F16                     	;# 
  1087  0F17                     	;# 
  1088  0F18                     	;# 
  1089  0F19                     	;# 
  1090  0F1A                     	;# 
  1091  0F1B                     	;# 
  1092  0F1C                     	;# 
  1093  0F1D                     	;# 
  1094  0F1E                     	;# 
  1095  0F1F                     	;# 
  1096  0F20                     	;# 
  1097  0F21                     	;# 
  1098  0F22                     	;# 
  1099  0F23                     	;# 
  1100  0F24                     	;# 
  1101  0F25                     	;# 
  1102  0F26                     	;# 
  1103  0F27                     	;# 
  1104  0F28                     	;# 
  1105  0F29                     	;# 
  1106  0F2A                     	;# 
  1107  0F2B                     	;# 
  1108  0F2C                     	;# 
  1109  0F2D                     	;# 
  1110  0F2E                     	;# 
  1111  0F2F                     	;# 
  1112  0F30                     	;# 
  1113  0F31                     	;# 
  1114  0F32                     	;# 
  1115  0F33                     	;# 
  1116  0F34                     	;# 
  1117  0F35                     	;# 
  1118  0F36                     	;# 
  1119  0F37                     	;# 
  1120  0FE4                     	;# 
  1121  0FE5                     	;# 
  1122  0FE6                     	;# 
  1123  0FE7                     	;# 
  1124  0FE8                     	;# 
  1125  0FE9                     	;# 
  1126  0FEA                     	;# 
  1127  0FEB                     	;# 
  1128  0FED                     	;# 
  1129  0FEE                     	;# 
  1130  0FEF                     	;# 
  1131  0000                     	;# 
  1132  0001                     	;# 
  1133  0002                     	;# 
  1134  0003                     	;# 
  1135  0004                     	;# 
  1136  0005                     	;# 
  1137  0006                     	;# 
  1138  0007                     	;# 
  1139  0008                     	;# 
  1140  0009                     	;# 
  1141  000A                     	;# 
  1142  000B                     	;# 
  1143  000C                     	;# 
  1144  000E                     	;# 
  1145  0010                     	;# 
  1146  0011                     	;# 
  1147  0012                     	;# 
  1148  0013                     	;# 
  1149  0014                     	;# 
  1150  0015                     	;# 
  1151  0015                     	;# 
  1152  0016                     	;# 
  1153  0016                     	;# 
  1154  0017                     	;# 
  1155  0018                     	;# 
  1156  0019                     	;# 
  1157  0019                     	;# 
  1158  001A                     	;# 
  1159  001B                     	;# 
  1160  001C                     	;# 
  1161  001D                     	;# 
  1162  001E                     	;# 
  1163  001F                     	;# 
  1164  008C                     	;# 
  1165  008E                     	;# 
  1166  0090                     	;# 
  1167  0091                     	;# 
  1168  0092                     	;# 
  1169  0093                     	;# 
  1170  0094                     	;# 
  1171  0097                     	;# 
  1172  009B                     	;# 
  1173  009B                     	;# 
  1174  009C                     	;# 
  1175  009D                     	;# 
  1176  009E                     	;# 
  1177  009F                     	;# 
  1178  010C                     	;# 
  1179  010E                     	;# 
  1180  0111                     	;# 
  1181  0112                     	;# 
  1182  0113                     	;# 
  1183  0114                     	;# 
  1184  0115                     	;# 
  1185  0116                     	;# 
  1186  0117                     	;# 
  1187  0118                     	;# 
  1188  0119                     	;# 
  1189  018C                     	;# 
  1190  018E                     	;# 
  1191  0199                     	;# 
  1192  0199                     	;# 
  1193  0199                     	;# 
  1194  019A                     	;# 
  1195  019A                     	;# 
  1196  019A                     	;# 
  1197  019B                     	;# 
  1198  019B                     	;# 
  1199  019B                     	;# 
  1200  019B                     	;# 
  1201  019B                     	;# 
  1202  019C                     	;# 
  1203  019C                     	;# 
  1204  019C                     	;# 
  1205  019D                     	;# 
  1206  019D                     	;# 
  1207  019D                     	;# 
  1208  019E                     	;# 
  1209  019E                     	;# 
  1210  019E                     	;# 
  1211  019F                     	;# 
  1212  019F                     	;# 
  1213  019F                     	;# 
  1214  019F                     	;# 
  1215  019F                     	;# 
  1216  020C                     	;# 
  1217  020E                     	;# 
  1218  0211                     	;# 
  1219  0211                     	;# 
  1220  0212                     	;# 
  1221  0212                     	;# 
  1222  0213                     	;# 
  1223  0213                     	;# 
  1224  0214                     	;# 
  1225  0214                     	;# 
  1226  0215                     	;# 
  1227  0215                     	;# 
  1228  0215                     	;# 
  1229  0215                     	;# 
  1230  0216                     	;# 
  1231  0216                     	;# 
  1232  0217                     	;# 
  1233  0217                     	;# 
  1234  0219                     	;# 
  1235  021A                     	;# 
  1236  021B                     	;# 
  1237  021C                     	;# 
  1238  021D                     	;# 
  1239  021D                     	;# 
  1240  021E                     	;# 
  1241  021F                     	;# 
  1242  028C                     	;# 
  1243  028E                     	;# 
  1244  0291                     	;# 
  1245  0291                     	;# 
  1246  0292                     	;# 
  1247  0293                     	;# 
  1248  0294                     	;# 
  1249  0295                     	;# 
  1250  0295                     	;# 
  1251  0296                     	;# 
  1252  0297                     	;# 
  1253  0298                     	;# 
  1254  029F                     	;# 
  1255  030C                     	;# 
  1256  030E                     	;# 
  1257  0311                     	;# 
  1258  0311                     	;# 
  1259  0312                     	;# 
  1260  0313                     	;# 
  1261  0314                     	;# 
  1262  0315                     	;# 
  1263  0315                     	;# 
  1264  0316                     	;# 
  1265  0317                     	;# 
  1266  0318                     	;# 
  1267  038C                     	;# 
  1268  038E                     	;# 
  1269  0391                     	;# 
  1270  0392                     	;# 
  1271  0393                     	;# 
  1272  0397                     	;# 
  1273  0398                     	;# 
  1274  0399                     	;# 
  1275  039A                     	;# 
  1276  039C                     	;# 
  1277  039D                     	;# 
  1278  039E                     	;# 
  1279  039F                     	;# 
  1280  0411                     	;# 
  1281  0411                     	;# 
  1282  0412                     	;# 
  1283  0413                     	;# 
  1284  0414                     	;# 
  1285  0415                     	;# 
  1286  0416                     	;# 
  1287  0417                     	;# 
  1288  0418                     	;# 
  1289  0418                     	;# 
  1290  0419                     	;# 
  1291  041A                     	;# 
  1292  041B                     	;# 
  1293  041C                     	;# 
  1294  041D                     	;# 
  1295  041E                     	;# 
  1296  041F                     	;# 
  1297  0498                     	;# 
  1298  0498                     	;# 
  1299  0499                     	;# 
  1300  049A                     	;# 
  1301  049B                     	;# 
  1302  049B                     	;# 
  1303  049C                     	;# 
  1304  049D                     	;# 
  1305  049E                     	;# 
  1306  049F                     	;# 
  1307  0617                     	;# 
  1308  0618                     	;# 
  1309  0619                     	;# 
  1310  0619                     	;# 
  1311  061A                     	;# 
  1312  061B                     	;# 
  1313  061C                     	;# 
  1314  061C                     	;# 
  1315  061F                     	;# 
  1316  0691                     	;# 
  1317  0692                     	;# 
  1318  0693                     	;# 
  1319  0694                     	;# 
  1320  0695                     	;# 
  1321  0696                     	;# 
  1322  0697                     	;# 
  1323  0698                     	;# 
  1324  0699                     	;# 
  1325  0711                     	;# 
  1326  0712                     	;# 
  1327  0713                     	;# 
  1328  0714                     	;# 
  1329  0715                     	;# 
  1330  0716                     	;# 
  1331  0717                     	;# 
  1332  0718                     	;# 
  1333  0719                     	;# 
  1334  0891                     	;# 
  1335  0891                     	;# 
  1336  0891                     	;# 
  1337  0891                     	;# 
  1338  0891                     	;# 
  1339  0891                     	;# 
  1340  0892                     	;# 
  1341  0892                     	;# 
  1342  0892                     	;# 
  1343  0893                     	;# 
  1344  0893                     	;# 
  1345  0893                     	;# 
  1346  0893                     	;# 
  1347  0893                     	;# 
  1348  0893                     	;# 
  1349  0894                     	;# 
  1350  0894                     	;# 
  1351  0894                     	;# 
  1352  0895                     	;# 
  1353  0895                     	;# 
  1354  0895                     	;# 
  1355  0896                     	;# 
  1356  0896                     	;# 
  1357  0896                     	;# 
  1358  089B                     	;# 
  1359  0911                     	;# 
  1360  0912                     	;# 
  1361  0913                     	;# 
  1362  0914                     	;# 
  1363  0915                     	;# 
  1364  0916                     	;# 
  1365  0918                     	;# 
  1366  0919                     	;# 
  1367  091A                     	;# 
  1368  091B                     	;# 
  1369  091C                     	;# 
  1370  091D                     	;# 
  1371  091E                     	;# 
  1372  091F                     	;# 
  1373  0E0F                     	;# 
  1374  0E10                     	;# 
  1375  0E11                     	;# 
  1376  0E12                     	;# 
  1377  0E13                     	;# 
  1378  0E14                     	;# 
  1379  0E15                     	;# 
  1380  0E16                     	;# 
  1381  0E17                     	;# 
  1382  0E18                     	;# 
  1383  0E19                     	;# 
  1384  0E1A                     	;# 
  1385  0E1B                     	;# 
  1386  0E1C                     	;# 
  1387  0E1D                     	;# 
  1388  0E1E                     	;# 
  1389  0E1F                     	;# 
  1390  0E20                     	;# 
  1391  0E21                     	;# 
  1392  0E22                     	;# 
  1393  0E24                     	;# 
  1394  0E25                     	;# 
  1395  0E28                     	;# 
  1396  0E29                     	;# 
  1397  0E2A                     	;# 
  1398  0E2B                     	;# 
  1399  0E2C                     	;# 
  1400  0E2D                     	;# 
  1401  0E2E                     	;# 
  1402  0E2F                     	;# 
  1403  0E90                     	;# 
  1404  0E91                     	;# 
  1405  0E92                     	;# 
  1406  0E94                     	;# 
  1407  0E95                     	;# 
  1408  0EA0                     	;# 
  1409  0EA1                     	;# 
  1410  0EA2                     	;# 
  1411  0EA3                     	;# 
  1412  0EA4                     	;# 
  1413  0EA5                     	;# 
  1414  0F0F                     	;# 
  1415  0F10                     	;# 
  1416  0F11                     	;# 
  1417  0F12                     	;# 
  1418  0F13                     	;# 
  1419  0F14                     	;# 
  1420  0F15                     	;# 
  1421  0F16                     	;# 
  1422  0F17                     	;# 
  1423  0F18                     	;# 
  1424  0F19                     	;# 
  1425  0F1A                     	;# 
  1426  0F1B                     	;# 
  1427  0F1C                     	;# 
  1428  0F1D                     	;# 
  1429  0F1E                     	;# 
  1430  0F1F                     	;# 
  1431  0F20                     	;# 
  1432  0F21                     	;# 
  1433  0F22                     	;# 
  1434  0F23                     	;# 
  1435  0F24                     	;# 
  1436  0F25                     	;# 
  1437  0F26                     	;# 
  1438  0F27                     	;# 
  1439  0F28                     	;# 
  1440  0F29                     	;# 
  1441  0F2A                     	;# 
  1442  0F2B                     	;# 
  1443  0F2C                     	;# 
  1444  0F2D                     	;# 
  1445  0F2E                     	;# 
  1446  0F2F                     	;# 
  1447  0F30                     	;# 
  1448  0F31                     	;# 
  1449  0F32                     	;# 
  1450  0F33                     	;# 
  1451  0F34                     	;# 
  1452  0F35                     	;# 
  1453  0F36                     	;# 
  1454  0F37                     	;# 
  1455  0FE4                     	;# 
  1456  0FE5                     	;# 
  1457  0FE6                     	;# 
  1458  0FE7                     	;# 
  1459  0FE8                     	;# 
  1460  0FE9                     	;# 
  1461  0FEA                     	;# 
  1462  0FEB                     	;# 
  1463  0FED                     	;# 
  1464  0FEE                     	;# 
  1465  0FEF                     	;# 
  1466  0000                     	;# 
  1467  0001                     	;# 
  1468  0002                     	;# 
  1469  0003                     	;# 
  1470  0004                     	;# 
  1471  0005                     	;# 
  1472  0006                     	;# 
  1473  0007                     	;# 
  1474  0008                     	;# 
  1475  0009                     	;# 
  1476  000A                     	;# 
  1477  000B                     	;# 
  1478  000C                     	;# 
  1479  000E                     	;# 
  1480  0010                     	;# 
  1481  0011                     	;# 
  1482  0012                     	;# 
  1483  0013                     	;# 
  1484  0014                     	;# 
  1485  0015                     	;# 
  1486  0015                     	;# 
  1487  0016                     	;# 
  1488  0016                     	;# 
  1489  0017                     	;# 
  1490  0018                     	;# 
  1491  0019                     	;# 
  1492  0019                     	;# 
  1493  001A                     	;# 
  1494  001B                     	;# 
  1495  001C                     	;# 
  1496  001D                     	;# 
  1497  001E                     	;# 
  1498  001F                     	;# 
  1499  008C                     	;# 
  1500  008E                     	;# 
  1501  0090                     	;# 
  1502  0091                     	;# 
  1503  0092                     	;# 
  1504  0093                     	;# 
  1505  0094                     	;# 
  1506  0097                     	;# 
  1507  009B                     	;# 
  1508  009B                     	;# 
  1509  009C                     	;# 
  1510  009D                     	;# 
  1511  009E                     	;# 
  1512  009F                     	;# 
  1513  010C                     	;# 
  1514  010E                     	;# 
  1515  0111                     	;# 
  1516  0112                     	;# 
  1517  0113                     	;# 
  1518  0114                     	;# 
  1519  0115                     	;# 
  1520  0116                     	;# 
  1521  0117                     	;# 
  1522  0118                     	;# 
  1523  0119                     	;# 
  1524  018C                     	;# 
  1525  018E                     	;# 
  1526  0199                     	;# 
  1527  0199                     	;# 
  1528  0199                     	;# 
  1529  019A                     	;# 
  1530  019A                     	;# 
  1531  019A                     	;# 
  1532  019B                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019B                     	;# 
  1536  019B                     	;# 
  1537  019C                     	;# 
  1538  019C                     	;# 
  1539  019C                     	;# 
  1540  019D                     	;# 
  1541  019D                     	;# 
  1542  019D                     	;# 
  1543  019E                     	;# 
  1544  019E                     	;# 
  1545  019E                     	;# 
  1546  019F                     	;# 
  1547  019F                     	;# 
  1548  019F                     	;# 
  1549  019F                     	;# 
  1550  019F                     	;# 
  1551  020C                     	;# 
  1552  020E                     	;# 
  1553  0211                     	;# 
  1554  0211                     	;# 
  1555  0212                     	;# 
  1556  0212                     	;# 
  1557  0213                     	;# 
  1558  0213                     	;# 
  1559  0214                     	;# 
  1560  0214                     	;# 
  1561  0215                     	;# 
  1562  0215                     	;# 
  1563  0215                     	;# 
  1564  0215                     	;# 
  1565  0216                     	;# 
  1566  0216                     	;# 
  1567  0217                     	;# 
  1568  0217                     	;# 
  1569  0219                     	;# 
  1570  021A                     	;# 
  1571  021B                     	;# 
  1572  021C                     	;# 
  1573  021D                     	;# 
  1574  021D                     	;# 
  1575  021E                     	;# 
  1576  021F                     	;# 
  1577  028C                     	;# 
  1578  028E                     	;# 
  1579  0291                     	;# 
  1580  0291                     	;# 
  1581  0292                     	;# 
  1582  0293                     	;# 
  1583  0294                     	;# 
  1584  0295                     	;# 
  1585  0295                     	;# 
  1586  0296                     	;# 
  1587  0297                     	;# 
  1588  0298                     	;# 
  1589  029F                     	;# 
  1590  030C                     	;# 
  1591  030E                     	;# 
  1592  0311                     	;# 
  1593  0311                     	;# 
  1594  0312                     	;# 
  1595  0313                     	;# 
  1596  0314                     	;# 
  1597  0315                     	;# 
  1598  0315                     	;# 
  1599  0316                     	;# 
  1600  0317                     	;# 
  1601  0318                     	;# 
  1602  038C                     	;# 
  1603  038E                     	;# 
  1604  0391                     	;# 
  1605  0392                     	;# 
  1606  0393                     	;# 
  1607  0397                     	;# 
  1608  0398                     	;# 
  1609  0399                     	;# 
  1610  039A                     	;# 
  1611  039C                     	;# 
  1612  039D                     	;# 
  1613  039E                     	;# 
  1614  039F                     	;# 
  1615  0411                     	;# 
  1616  0411                     	;# 
  1617  0412                     	;# 
  1618  0413                     	;# 
  1619  0414                     	;# 
  1620  0415                     	;# 
  1621  0416                     	;# 
  1622  0417                     	;# 
  1623  0418                     	;# 
  1624  0418                     	;# 
  1625  0419                     	;# 
  1626  041A                     	;# 
  1627  041B                     	;# 
  1628  041C                     	;# 
  1629  041D                     	;# 
  1630  041E                     	;# 
  1631  041F                     	;# 
  1632  0498                     	;# 
  1633  0498                     	;# 
  1634  0499                     	;# 
  1635  049A                     	;# 
  1636  049B                     	;# 
  1637  049B                     	;# 
  1638  049C                     	;# 
  1639  049D                     	;# 
  1640  049E                     	;# 
  1641  049F                     	;# 
  1642  0617                     	;# 
  1643  0618                     	;# 
  1644  0619                     	;# 
  1645  0619                     	;# 
  1646  061A                     	;# 
  1647  061B                     	;# 
  1648  061C                     	;# 
  1649  061C                     	;# 
  1650  061F                     	;# 
  1651  0691                     	;# 
  1652  0692                     	;# 
  1653  0693                     	;# 
  1654  0694                     	;# 
  1655  0695                     	;# 
  1656  0696                     	;# 
  1657  0697                     	;# 
  1658  0698                     	;# 
  1659  0699                     	;# 
  1660  0711                     	;# 
  1661  0712                     	;# 
  1662  0713                     	;# 
  1663  0714                     	;# 
  1664  0715                     	;# 
  1665  0716                     	;# 
  1666  0717                     	;# 
  1667  0718                     	;# 
  1668  0719                     	;# 
  1669  0891                     	;# 
  1670  0891                     	;# 
  1671  0891                     	;# 
  1672  0891                     	;# 
  1673  0891                     	;# 
  1674  0891                     	;# 
  1675  0892                     	;# 
  1676  0892                     	;# 
  1677  0892                     	;# 
  1678  0893                     	;# 
  1679  0893                     	;# 
  1680  0893                     	;# 
  1681  0893                     	;# 
  1682  0893                     	;# 
  1683  0893                     	;# 
  1684  0894                     	;# 
  1685  0894                     	;# 
  1686  0894                     	;# 
  1687  0895                     	;# 
  1688  0895                     	;# 
  1689  0895                     	;# 
  1690  0896                     	;# 
  1691  0896                     	;# 
  1692  0896                     	;# 
  1693  089B                     	;# 
  1694  0911                     	;# 
  1695  0912                     	;# 
  1696  0913                     	;# 
  1697  0914                     	;# 
  1698  0915                     	;# 
  1699  0916                     	;# 
  1700  0918                     	;# 
  1701  0919                     	;# 
  1702  091A                     	;# 
  1703  091B                     	;# 
  1704  091C                     	;# 
  1705  091D                     	;# 
  1706  091E                     	;# 
  1707  091F                     	;# 
  1708  0E0F                     	;# 
  1709  0E10                     	;# 
  1710  0E11                     	;# 
  1711  0E12                     	;# 
  1712  0E13                     	;# 
  1713  0E14                     	;# 
  1714  0E15                     	;# 
  1715  0E16                     	;# 
  1716  0E17                     	;# 
  1717  0E18                     	;# 
  1718  0E19                     	;# 
  1719  0E1A                     	;# 
  1720  0E1B                     	;# 
  1721  0E1C                     	;# 
  1722  0E1D                     	;# 
  1723  0E1E                     	;# 
  1724  0E1F                     	;# 
  1725  0E20                     	;# 
  1726  0E21                     	;# 
  1727  0E22                     	;# 
  1728  0E24                     	;# 
  1729  0E25                     	;# 
  1730  0E28                     	;# 
  1731  0E29                     	;# 
  1732  0E2A                     	;# 
  1733  0E2B                     	;# 
  1734  0E2C                     	;# 
  1735  0E2D                     	;# 
  1736  0E2E                     	;# 
  1737  0E2F                     	;# 
  1738  0E90                     	;# 
  1739  0E91                     	;# 
  1740  0E92                     	;# 
  1741  0E94                     	;# 
  1742  0E95                     	;# 
  1743  0EA0                     	;# 
  1744  0EA1                     	;# 
  1745  0EA2                     	;# 
  1746  0EA3                     	;# 
  1747  0EA4                     	;# 
  1748  0EA5                     	;# 
  1749  0F0F                     	;# 
  1750  0F10                     	;# 
  1751  0F11                     	;# 
  1752  0F12                     	;# 
  1753  0F13                     	;# 
  1754  0F14                     	;# 
  1755  0F15                     	;# 
  1756  0F16                     	;# 
  1757  0F17                     	;# 
  1758  0F18                     	;# 
  1759  0F19                     	;# 
  1760  0F1A                     	;# 
  1761  0F1B                     	;# 
  1762  0F1C                     	;# 
  1763  0F1D                     	;# 
  1764  0F1E                     	;# 
  1765  0F1F                     	;# 
  1766  0F20                     	;# 
  1767  0F21                     	;# 
  1768  0F22                     	;# 
  1769  0F23                     	;# 
  1770  0F24                     	;# 
  1771  0F25                     	;# 
  1772  0F26                     	;# 
  1773  0F27                     	;# 
  1774  0F28                     	;# 
  1775  0F29                     	;# 
  1776  0F2A                     	;# 
  1777  0F2B                     	;# 
  1778  0F2C                     	;# 
  1779  0F2D                     	;# 
  1780  0F2E                     	;# 
  1781  0F2F                     	;# 
  1782  0F30                     	;# 
  1783  0F31                     	;# 
  1784  0F32                     	;# 
  1785  0F33                     	;# 
  1786  0F34                     	;# 
  1787  0F35                     	;# 
  1788  0F36                     	;# 
  1789  0F37                     	;# 
  1790  0FE4                     	;# 
  1791  0FE5                     	;# 
  1792  0FE6                     	;# 
  1793  0FE7                     	;# 
  1794  0FE8                     	;# 
  1795  0FE9                     	;# 
  1796  0FEA                     	;# 
  1797  0FEB                     	;# 
  1798  0FED                     	;# 
  1799  0FEE                     	;# 
  1800  0FEF                     	;# 
  1801  0000                     	;# 
  1802  0001                     	;# 
  1803  0002                     	;# 
  1804  0003                     	;# 
  1805  0004                     	;# 
  1806  0005                     	;# 
  1807  0006                     	;# 
  1808  0007                     	;# 
  1809  0008                     	;# 
  1810  0009                     	;# 
  1811  000A                     	;# 
  1812  000B                     	;# 
  1813  000C                     	;# 
  1814  000E                     	;# 
  1815  0010                     	;# 
  1816  0011                     	;# 
  1817  0012                     	;# 
  1818  0013                     	;# 
  1819  0014                     	;# 
  1820  0015                     	;# 
  1821  0015                     	;# 
  1822  0016                     	;# 
  1823  0016                     	;# 
  1824  0017                     	;# 
  1825  0018                     	;# 
  1826  0019                     	;# 
  1827  0019                     	;# 
  1828  001A                     	;# 
  1829  001B                     	;# 
  1830  001C                     	;# 
  1831  001D                     	;# 
  1832  001E                     	;# 
  1833  001F                     	;# 
  1834  008C                     	;# 
  1835  008E                     	;# 
  1836  0090                     	;# 
  1837  0091                     	;# 
  1838  0092                     	;# 
  1839  0093                     	;# 
  1840  0094                     	;# 
  1841  0097                     	;# 
  1842  009B                     	;# 
  1843  009B                     	;# 
  1844  009C                     	;# 
  1845  009D                     	;# 
  1846  009E                     	;# 
  1847  009F                     	;# 
  1848  010C                     	;# 
  1849  010E                     	;# 
  1850  0111                     	;# 
  1851  0112                     	;# 
  1852  0113                     	;# 
  1853  0114                     	;# 
  1854  0115                     	;# 
  1855  0116                     	;# 
  1856  0117                     	;# 
  1857  0118                     	;# 
  1858  0119                     	;# 
  1859  018C                     	;# 
  1860  018E                     	;# 
  1861  0199                     	;# 
  1862  0199                     	;# 
  1863  0199                     	;# 
  1864  019A                     	;# 
  1865  019A                     	;# 
  1866  019A                     	;# 
  1867  019B                     	;# 
  1868  019B                     	;# 
  1869  019B                     	;# 
  1870  019B                     	;# 
  1871  019B                     	;# 
  1872  019C                     	;# 
  1873  019C                     	;# 
  1874  019C                     	;# 
  1875  019D                     	;# 
  1876  019D                     	;# 
  1877  019D                     	;# 
  1878  019E                     	;# 
  1879  019E                     	;# 
  1880  019E                     	;# 
  1881  019F                     	;# 
  1882  019F                     	;# 
  1883  019F                     	;# 
  1884  019F                     	;# 
  1885  019F                     	;# 
  1886  020C                     	;# 
  1887  020E                     	;# 
  1888  0211                     	;# 
  1889  0211                     	;# 
  1890  0212                     	;# 
  1891  0212                     	;# 
  1892  0213                     	;# 
  1893  0213                     	;# 
  1894  0214                     	;# 
  1895  0214                     	;# 
  1896  0215                     	;# 
  1897  0215                     	;# 
  1898  0215                     	;# 
  1899  0215                     	;# 
  1900  0216                     	;# 
  1901  0216                     	;# 
  1902  0217                     	;# 
  1903  0217                     	;# 
  1904  0219                     	;# 
  1905  021A                     	;# 
  1906  021B                     	;# 
  1907  021C                     	;# 
  1908  021D                     	;# 
  1909  021D                     	;# 
  1910  021E                     	;# 
  1911  021F                     	;# 
  1912  028C                     	;# 
  1913  028E                     	;# 
  1914  0291                     	;# 
  1915  0291                     	;# 
  1916  0292                     	;# 
  1917  0293                     	;# 
  1918  0294                     	;# 
  1919  0295                     	;# 
  1920  0295                     	;# 
  1921  0296                     	;# 
  1922  0297                     	;# 
  1923  0298                     	;# 
  1924  029F                     	;# 
  1925  030C                     	;# 
  1926  030E                     	;# 
  1927  0311                     	;# 
  1928  0311                     	;# 
  1929  0312                     	;# 
  1930  0313                     	;# 
  1931  0314                     	;# 
  1932  0315                     	;# 
  1933  0315                     	;# 
  1934  0316                     	;# 
  1935  0317                     	;# 
  1936  0318                     	;# 
  1937  038C                     	;# 
  1938  038E                     	;# 
  1939  0391                     	;# 
  1940  0392                     	;# 
  1941  0393                     	;# 
  1942  0397                     	;# 
  1943  0398                     	;# 
  1944  0399                     	;# 
  1945  039A                     	;# 
  1946  039C                     	;# 
  1947  039D                     	;# 
  1948  039E                     	;# 
  1949  039F                     	;# 
  1950  0411                     	;# 
  1951  0411                     	;# 
  1952  0412                     	;# 
  1953  0413                     	;# 
  1954  0414                     	;# 
  1955  0415                     	;# 
  1956  0416                     	;# 
  1957  0417                     	;# 
  1958  0418                     	;# 
  1959  0418                     	;# 
  1960  0419                     	;# 
  1961  041A                     	;# 
  1962  041B                     	;# 
  1963  041C                     	;# 
  1964  041D                     	;# 
  1965  041E                     	;# 
  1966  041F                     	;# 
  1967  0498                     	;# 
  1968  0498                     	;# 
  1969  0499                     	;# 
  1970  049A                     	;# 
  1971  049B                     	;# 
  1972  049B                     	;# 
  1973  049C                     	;# 
  1974  049D                     	;# 
  1975  049E                     	;# 
  1976  049F                     	;# 
  1977  0617                     	;# 
  1978  0618                     	;# 
  1979  0619                     	;# 
  1980  0619                     	;# 
  1981  061A                     	;# 
  1982  061B                     	;# 
  1983  061C                     	;# 
  1984  061C                     	;# 
  1985  061F                     	;# 
  1986  0691                     	;# 
  1987  0692                     	;# 
  1988  0693                     	;# 
  1989  0694                     	;# 
  1990  0695                     	;# 
  1991  0696                     	;# 
  1992  0697                     	;# 
  1993  0698                     	;# 
  1994  0699                     	;# 
  1995  0711                     	;# 
  1996  0712                     	;# 
  1997  0713                     	;# 
  1998  0714                     	;# 
  1999  0715                     	;# 
  2000  0716                     	;# 
  2001  0717                     	;# 
  2002  0718                     	;# 
  2003  0719                     	;# 
  2004  0891                     	;# 
  2005  0891                     	;# 
  2006  0891                     	;# 
  2007  0891                     	;# 
  2008  0891                     	;# 
  2009  0891                     	;# 
  2010  0892                     	;# 
  2011  0892                     	;# 
  2012  0892                     	;# 
  2013  0893                     	;# 
  2014  0893                     	;# 
  2015  0893                     	;# 
  2016  0893                     	;# 
  2017  0893                     	;# 
  2018  0893                     	;# 
  2019  0894                     	;# 
  2020  0894                     	;# 
  2021  0894                     	;# 
  2022  0895                     	;# 
  2023  0895                     	;# 
  2024  0895                     	;# 
  2025  0896                     	;# 
  2026  0896                     	;# 
  2027  0896                     	;# 
  2028  089B                     	;# 
  2029  0911                     	;# 
  2030  0912                     	;# 
  2031  0913                     	;# 
  2032  0914                     	;# 
  2033  0915                     	;# 
  2034  0916                     	;# 
  2035  0918                     	;# 
  2036  0919                     	;# 
  2037  091A                     	;# 
  2038  091B                     	;# 
  2039  091C                     	;# 
  2040  091D                     	;# 
  2041  091E                     	;# 
  2042  091F                     	;# 
  2043  0E0F                     	;# 
  2044  0E10                     	;# 
  2045  0E11                     	;# 
  2046  0E12                     	;# 
  2047  0E13                     	;# 
  2048  0E14                     	;# 
  2049  0E15                     	;# 
  2050  0E16                     	;# 
  2051  0E17                     	;# 
  2052  0E18                     	;# 
  2053  0E19                     	;# 
  2054  0E1A                     	;# 
  2055  0E1B                     	;# 
  2056  0E1C                     	;# 
  2057  0E1D                     	;# 
  2058  0E1E                     	;# 
  2059  0E1F                     	;# 
  2060  0E20                     	;# 
  2061  0E21                     	;# 
  2062  0E22                     	;# 
  2063  0E24                     	;# 
  2064  0E25                     	;# 
  2065  0E28                     	;# 
  2066  0E29                     	;# 
  2067  0E2A                     	;# 
  2068  0E2B                     	;# 
  2069  0E2C                     	;# 
  2070  0E2D                     	;# 
  2071  0E2E                     	;# 
  2072  0E2F                     	;# 
  2073  0E90                     	;# 
  2074  0E91                     	;# 
  2075  0E92                     	;# 
  2076  0E94                     	;# 
  2077  0E95                     	;# 
  2078  0EA0                     	;# 
  2079  0EA1                     	;# 
  2080  0EA2                     	;# 
  2081  0EA3                     	;# 
  2082  0EA4                     	;# 
  2083  0EA5                     	;# 
  2084  0F0F                     	;# 
  2085  0F10                     	;# 
  2086  0F11                     	;# 
  2087  0F12                     	;# 
  2088  0F13                     	;# 
  2089  0F14                     	;# 
  2090  0F15                     	;# 
  2091  0F16                     	;# 
  2092  0F17                     	;# 
  2093  0F18                     	;# 
  2094  0F19                     	;# 
  2095  0F1A                     	;# 
  2096  0F1B                     	;# 
  2097  0F1C                     	;# 
  2098  0F1D                     	;# 
  2099  0F1E                     	;# 
  2100  0F1F                     	;# 
  2101  0F20                     	;# 
  2102  0F21                     	;# 
  2103  0F22                     	;# 
  2104  0F23                     	;# 
  2105  0F24                     	;# 
  2106  0F25                     	;# 
  2107  0F26                     	;# 
  2108  0F27                     	;# 
  2109  0F28                     	;# 
  2110  0F29                     	;# 
  2111  0F2A                     	;# 
  2112  0F2B                     	;# 
  2113  0F2C                     	;# 
  2114  0F2D                     	;# 
  2115  0F2E                     	;# 
  2116  0F2F                     	;# 
  2117  0F30                     	;# 
  2118  0F31                     	;# 
  2119  0F32                     	;# 
  2120  0F33                     	;# 
  2121  0F34                     	;# 
  2122  0F35                     	;# 
  2123  0F36                     	;# 
  2124  0F37                     	;# 
  2125  0FE4                     	;# 
  2126  0FE5                     	;# 
  2127  0FE6                     	;# 
  2128  0FE7                     	;# 
  2129  0FE8                     	;# 
  2130  0FE9                     	;# 
  2131  0FEA                     	;# 
  2132  0FEB                     	;# 
  2133  0FED                     	;# 
  2134  0FEE                     	;# 
  2135  0FEF                     	;# 
  2136                           
  2137                           	psect	stringtext1
  2138  1000                     __pstringtext1:	
  2139  1000                     _dpowers:	
  2140  1000  3401               	retlw	1
  2141  1001  3400               	retlw	0
  2142  1002  3400               	retlw	0
  2143  1003  3400               	retlw	0
  2144  1004  340A               	retlw	10
  2145  1005  3400               	retlw	0
  2146  1006  3400               	retlw	0
  2147  1007  3400               	retlw	0
  2148  1008  3464               	retlw	100
  2149  1009  3400               	retlw	0
  2150  100A  3400               	retlw	0
  2151  100B  3400               	retlw	0
  2152  100C  34E8               	retlw	232
  2153  100D  3403               	retlw	3
  2154  100E  3400               	retlw	0
  2155  100F  3400               	retlw	0
  2156  1010  3410               	retlw	16
  2157  1011  3427               	retlw	39
  2158  1012  3400               	retlw	0
  2159  1013  3400               	retlw	0
  2160  1014  34A0               	retlw	160
  2161  1015  3486               	retlw	134
  2162  1016  3401               	retlw	1
  2163  1017  3400               	retlw	0
  2164  1018  3440               	retlw	64
  2165  1019  3442               	retlw	66
  2166  101A  340F               	retlw	15
  2167  101B  3400               	retlw	0
  2168  101C  3480               	retlw	128
  2169  101D  3496               	retlw	150
  2170  101E  3498               	retlw	152
  2171  101F  3400               	retlw	0
  2172  1020  3400               	retlw	0
  2173  1021  34E1               	retlw	225
  2174  1022  34F5               	retlw	245
  2175  1023  3405               	retlw	5
  2176  1024  3400               	retlw	0
  2177  1025  34CA               	retlw	202
  2178  1026  349A               	retlw	154
  2179  1027  343B               	retlw	59
  2180  1028                     __end_of_dpowers:	
  2181  1FE0                     _romArray_absaddr	set	8160
  2182                           
  2183                           	psect	stringtext2
  2184  1800                     __pstringtext2:	
  2185  1800                     _resetRomData:	
  2186  1800  34AA               	retlw	170
  2187  1801  3455               	retlw	85
  2188  1802  346E               	retlw	110
  2189  1803  3463               	retlw	99
  2190  1804  346F               	retlw	111
  2191  1805  346E               	retlw	110
  2192  1806  3466               	retlw	102
  2193  1807  3469               	retlw	105
  2194  1808  3467               	retlw	103
  2195  1809  3475               	retlw	117
  2196  180A  3472               	retlw	114
  2197  180B  3465               	retlw	101
  2198  180C  3464               	retlw	100
  2199  180D  3400               	retlw	0
  2200  180E  3400               	retlw	0
  2201  180F  3400               	retlw	0
  2202  1810  3400               	retlw	0
  2203  1811  3400               	retlw	0
  2204  1812  3400               	retlw	0
  2205  1813                     __end_of_resetRomData:	
  2206                           
  2207                           	psect	stringtext3
  2208  1824                     __pstringtext3:	
  2209  1824                     _n_ADDRESS_P0:	
  2210  1824  34AD               	retlw	173
  2211  1825  3487               	retlw	135
  2212  1826  3466               	retlw	102
  2213  1827  34BC               	retlw	188
  2214  1828  34BB               	retlw	187
  2215  1829                     __end_of_n_ADDRESS_P0:	
  2216                           
  2217                           	psect	stringtext4
  2218  183E                     __pstringtext4:	
  2219  183E                     _n_ADDRESS_MUL:	
  2220  183E  3421               	retlw	33
  2221  183F                     __end_of_n_ADDRESS_MUL:	
  2222  1FE0                     _romArray_absaddr	set	8160
  2223                           
  2224                           	psect	_romArray_text
  2225  1FE0                     __p_romArray_text:	
  2226  1FE0                     _romArray:	
  2227  1FE0  3400               	retlw	0
  2228  1FE1  3400               	retlw	0
  2229  1FE2  3400               	retlw	0
  2230  1FE3  3400               	retlw	0
  2231  1FE4  3400               	retlw	0
  2232  1FE5  3400               	retlw	0
  2233  1FE6  3400               	retlw	0
  2234  1FE7  3400               	retlw	0
  2235  1FE8  3400               	retlw	0
  2236  1FE9  3400               	retlw	0
  2237  1FEA  3400               	retlw	0
  2238  1FEB  3400               	retlw	0
  2239  1FEC  3400               	retlw	0
  2240  1FED  3400               	retlw	0
  2241  1FEE  3400               	retlw	0
  2242  1FEF  3400               	retlw	0
  2243  1FF0  3400               	retlw	0
  2244  1FF1  3400               	retlw	0
  2245  1FF2  3400               	retlw	0
  2246  1FF3  3400               	retlw	0
  2247  1FF4  3400               	retlw	0
  2248  1FF5  3400               	retlw	0
  2249  1FF6  3400               	retlw	0
  2250  1FF7  3400               	retlw	0
  2251  1FF8  3400               	retlw	0
  2252  1FF9  3400               	retlw	0
  2253  1FFA  3400               	retlw	0
  2254  1FFB  3400               	retlw	0
  2255  1FFC  3400               	retlw	0
  2256  1FFD  3400               	retlw	0
  2257  1FFE  3400               	retlw	0
  2258  1FFF  3400               	retlw	0
  2259  2000                     __end_of_romArray:	
  2260  0003                     _STATUSbits	set	3
  2261  0010                     _PIR0bits	set	16
  2262  000E                     _PORTCbits	set	14
  2263  000C                     _PORTAbits	set	12
  2264  000B                     _INTCONbits	set	11
  2265  009E                     _ADCON1bits	set	158
  2266  009C                     _ADRESH	set	156
  2267  009B                     _ADRESL	set	155
  2268  009D                     _ADCON0bits	set	157
  2269  0097                     _WDTCONbits	set	151
  2270  0090                     _PIE0bits	set	144
  2271  008E                     _TRISCbits	set	142
  2272  008C                     _TRISAbits	set	140
  2273  0117                     _FVRCONbits	set	279
  2274  018E                     _ANSELCbits	set	398
  2275  018C                     _ANSELAbits	set	396
  2276  018E                     _ANSELC	set	398
  2277  018C                     _ANSELA	set	396
  2278  020C                     _WPUAbits	set	524
  2279  020E                     _WPUC	set	526
  2280  020C                     _WPUA	set	524
  2281  0211                     _SSP1BUF	set	529
  2282  0214                     _SSP1STATbits	set	532
  2283  0215                     _SSP1CON1bits	set	533
  2284  028C                     _ODCONAbits	set	652
  2285  028E                     _ODCONC	set	654
  2286  028C                     _ODCONA	set	652
  2287  038E                     _INLVLC	set	910
  2288  038C                     _INLVLA	set	908
  2289  0894                     _PMDATH	set	2196
  2290  0893                     _PMDATL	set	2195
  2291  0896                     _PMCON2	set	2198
  2292  0895                     _PMCON1bits	set	2197
  2293  0892                     _PMADRH	set	2194
  2294  0891                     _PMADRL	set	2193
  2295  0895                     _PMCON1	set	2197
  2296  0919                     _OSCCON1bits	set	2329
  2297  0EA0                     _RC0PPSbits	set	3744
  2298  0EA2                     _RC2PPSbits	set	3746
  2299  0EA1                     _RC1PPSbits	set	3745
  2300                           
  2301                           	psect	stringtext5
  2302  1813                     __pstringtext5:	
  2303  1813                     STR_8:	
  2304  1813  3425               	retlw	37	;'%'
  2305  1814  346C               	retlw	108	;'l'
  2306  1815  3475               	retlw	117	;'u'
  2307  1816  342E               	retlw	46	;'.'
  2308  1817  3425               	retlw	37	;'%'
  2309  1818  3436               	retlw	54	;'6'
  2310  1819  342E               	retlw	46	;'.'
  2311  181A  3436               	retlw	54	;'6'
  2312  181B  346C               	retlw	108	;'l'
  2313  181C  3475               	retlw	117	;'u'
  2314  181D  3400               	retlw	0
  2315                           
  2316                           	psect	stringtext6
  2317  181E                     __pstringtext6:	
  2318  181E                     STR_5:	
  2319  181E  3454               	retlw	84	;'T'
  2320  181F  3445               	retlw	69	;'E'
  2321  1820  344D               	retlw	77	;'M'
  2322  1821  3450               	retlw	80	;'P'
  2323  1822  3452               	retlw	82	;'R'
  2324  1823  3400               	retlw	0
  2325                           
  2326                           	psect	stringtext7
  2327  1829                     __pstringtext7:	
  2328  1829                     STR_4:	
  2329  1829  3454               	retlw	84	;'T'
  2330  182A  3445               	retlw	69	;'E'
  2331  182B  344D               	retlw	77	;'M'
  2332  182C  3450               	retlw	80	;'P'
  2333  182D  3400               	retlw	0
  2334                           
  2335                           	psect	stringtext8
  2336  182E                     __pstringtext8:	
  2337  182E                     STR_3:	
  2338  182E  3456               	retlw	86	;'V'
  2339  182F  3442               	retlw	66	;'B'
  2340  1830  3441               	retlw	65	;'A'
  2341  1831  3454               	retlw	84	;'T'
  2342  1832  3400               	retlw	0
  2343                           
  2344                           	psect	stringtext9
  2345  1833                     __pstringtext9:	
  2346  1833                     STR_7:	
  2347  1833  3442               	retlw	66	;'B'
  2348  1834  344F               	retlw	79	;'O'
  2349  1835  344F               	retlw	79	;'O'
  2350  1836  3454               	retlw	84	;'T'
  2351  1837  3400               	retlw	0
  2352                           
  2353                           	psect	stringtext10
  2354  1838                     __pstringtext10:	
  2355  1838                     STR_6:	
  2356  1838  3455               	retlw	85	;'U'
  2357  1839  3457               	retlw	87	;'W'
  2358  183A  3454               	retlw	84	;'T'
  2359  183B  3400               	retlw	0
  2360                           
  2361                           	psect	stringtext11
  2362  183C                     __pstringtext11:	
  2363  183C                     STR_1:	
  2364  183C  342F               	retlw	47	;'/'
  2365  183D  3400               	retlw	0
  2366                           
  2367                           	psect	stringtext12
  2368  0000                     __pstringtext12:	
  2369  183C                     
  2370                           ; #config settings
  2371  0000                     
  2372                           	psect	cinit
  2373  0011                     start_initialization:	
  2374  0011                     __initialization:	
  2375                           
  2376                           ; Clear objects allocated to BANK0
  2377  0011  0020               	movlb	0	; select bank0
  2378  0012  01EE               	clrf	__pbssBANK0& (0+127)
  2379                           
  2380                           ; Clear objects allocated to BANK1
  2381  0013  30E9               	movlw	low __pbssBANK1
  2382  0014  0084               	movwf	4
  2383  0015  3000               	movlw	high __pbssBANK1
  2384  0016  0085               	movwf	5
  2385  0017  3007               	movlw	7
  2386  0018  3196  26C6  3180   	fcall	clear_ram0
  2387                           
  2388                           ; Clear objects allocated to BANK2
  2389  001B  304D               	movlw	low __pbssBANK2
  2390  001C  0084               	movwf	4
  2391  001D  3001               	movlw	high __pbssBANK2
  2392  001E  0085               	movwf	5
  2393  001F  3013               	movlw	19
  2394  0020  3196  26C6  3180   	fcall	clear_ram0
  2395                           
  2396                           ; Clear objects allocated to BANK3
  2397  0023  30A0               	movlw	low __pbssBANK3
  2398  0024  0084               	movwf	4
  2399  0025  3001               	movlw	high __pbssBANK3
  2400  0026  0085               	movwf	5
  2401  0027  3032               	movlw	50
  2402  0028  3196  26C6  3180   	fcall	clear_ram0
  2403                           
  2404                           ; Clear objects allocated to BANK4
  2405  002B  3020               	movlw	low __pbssBANK4
  2406  002C  0084               	movwf	4
  2407  002D  3002               	movlw	high __pbssBANK4
  2408  002E  0085               	movwf	5
  2409  002F  3020               	movlw	32
  2410  0030  3196  26C6         	fcall	clear_ram0
  2411  0032                     end_of_initialization:	
  2412                           ;End of C runtime variable initialization code
  2413                           
  2414  0032                     __end_of__initialization:	
  2415  0032  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2416  0033  0020               	movlb	0
  2417  0034  318D  2D6C         	ljmp	_main	;jump to C main() function
  2418                           
  2419                           	psect	bssBANK0
  2420  006E                     __pbssBANK0:	
  2421  006E                     _nrf24l01:	
  2422  006E                     	ds	1
  2423                           
  2424                           	psect	bssBANK1
  2425  00E9                     __pbssBANK1:	
  2426  00E9                     _counter:	
  2427  00E9                     	ds	4
  2428  00ED                     _TXPacket:	
  2429  00ED                     	ds	2
  2430  00EF                     _sleepLoop:	
  2431  00EF                     	ds	1
  2432                           
  2433                           	psect	bssBANK2
  2434  014D                     __pbssBANK2:	
  2435  014D                     _romData:	
  2436  014D                     	ds	19
  2437                           
  2438                           	psect	bssBANK3
  2439  01A0                     __pbssBANK3:	
  2440  01A0                     _RXPacket:	
  2441  01A0                     	ds	33
  2442  01C1                     ftoa@buf:	
  2443  01C1                     	ds	17
  2444                           
  2445                           	psect	bssBANK4
  2446  0220                     __pbssBANK4:	
  2447  0220                     _romHolder:	
  2448  0220                     	ds	32
  2449                           
  2450                           	psect	clrtext
  2451  16C6                     clear_ram0:	
  2452                           ;	Called with FSR0 containing the base address, and
  2453                           ;	WREG with the size to clear
  2454                           
  2455  16C6  0064               	clrwdt	;clear the watchdog before getting into this loop
  2456  16C7                     clrloop0:	
  2457  16C7  0180               	clrf	0	;clear RAM location pointed to by FSR
  2458  16C8  3101               	addfsr 0,1
  2459  16C9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2460  16CA  2EC7               	goto	clrloop0	;have we reached the end yet?
  2461  16CB  3400               	retlw	0	;all done for this memory range, return
  2462                           
  2463                           	psect	cstackBANK2
  2464  0120                     __pcstackBANK2:	
  2465  0120                     loop@vOut:	
  2466                           
  2467                           ; 3 bytes @ 0x0
  2468  0120                     	ds	3
  2469  0123                     loop@vt:	
  2470                           
  2471                           ; 3 bytes @ 0x3
  2472  0123                     	ds	3
  2473  0126                     loop@ta:	
  2474                           
  2475                           ; 3 bytes @ 0x6
  2476  0126                     	ds	3
  2477  0129                     _loop$2065:	
  2478                           
  2479                           ; 3 bytes @ 0x9
  2480  0129                     	ds	3
  2481  012C                     loop@packet:	
  2482                           
  2483                           ; 33 bytes @ 0xC
  2484  012C                     	ds	33
  2485                           
  2486                           	psect	cstackBANK1
  2487  00A0                     __pcstackBANK1:	
  2488  00A0                     ??___fttol:	
  2489                           
  2490                           ; 1 bytes @ 0x0
  2491  00A0                     	ds	4
  2492  00A4                     ___fttol@sign1:	
  2493                           
  2494                           ; 1 bytes @ 0x4
  2495  00A4                     	ds	1
  2496  00A5                     ___fttol@lval:	
  2497                           
  2498                           ; 4 bytes @ 0x5
  2499  00A5                     	ds	4
  2500  00A9                     ___fttol@exp1:	
  2501                           
  2502                           ; 1 bytes @ 0x9
  2503  00A9                     	ds	1
  2504  00AA                     ?_ftoa:	
  2505  00AA                     ftoa@f:	
  2506                           ; 1 bytes @ 0xA
  2507                           
  2508                           
  2509                           ; 3 bytes @ 0xA
  2510  00AA                     	ds	3
  2511  00AD                     ftoa@status:	
  2512                           
  2513                           ; 1 bytes @ 0xD
  2514  00AD                     	ds	1
  2515  00AE                     ftoa@rem:	
  2516                           
  2517                           ; 4 bytes @ 0xE
  2518  00AE                     	ds	4
  2519  00B2                     ftoa@l:	
  2520                           
  2521                           ; 4 bytes @ 0x12
  2522  00B2                     	ds	4
  2523  00B6                     ftoa@cp:	
  2524                           
  2525                           ; 1 bytes @ 0x16
  2526  00B6                     	ds	1
  2527  00B7                     ?_strcat:	
  2528  00B7                     strcat@to:	
  2529                           ; 2 bytes @ 0x17
  2530                           
  2531                           
  2532                           ; 2 bytes @ 0x17
  2533  00B7                     	ds	2
  2534  00B9                     strcat@from:	
  2535                           
  2536                           ; 2 bytes @ 0x19
  2537  00B9                     	ds	2
  2538  00BB                     strcat@cp:	
  2539                           
  2540                           ; 2 bytes @ 0x1B
  2541  00BB                     	ds	2
  2542  00BD                     ?_setMessage:	
  2543  00BD                     setMessage@packet:	
  2544                           ; 1 bytes @ 0x1D
  2545                           
  2546                           
  2547                           ; 2 bytes @ 0x1D
  2548  00BD                     	ds	2
  2549  00BF                     setMessage@topic:	
  2550                           
  2551                           ; 2 bytes @ 0x1F
  2552  00BF                     	ds	2
  2553  00C1                     setMessage@value:	
  2554                           
  2555                           ; 3 bytes @ 0x21
  2556  00C1                     	ds	3
  2557  00C4                     setMessage@status:	
  2558                           
  2559                           ; 2 bytes @ 0x24
  2560  00C4                     	ds	2
  2561  00C6                     ??_main:	
  2562                           
  2563                           ; 1 bytes @ 0x26
  2564  00C6                     	ds	1
  2565  00C7                     main@pipe:	
  2566                           
  2567                           ; 1 bytes @ 0x27
  2568  00C7                     	ds	1
  2569  00C8                     main@packet:	
  2570                           
  2571                           ; 33 bytes @ 0x28
  2572  00C8                     	ds	33
  2573                           
  2574                           	psect	cstackCOMMON
  2575  0070                     __pcstackCOMMON:	
  2576  0070                     ?_isdigit:	
  2577  0070                     ?_nrf24l01ISR:	
  2578                           ; 1 bit 
  2579                           
  2580  0070                     ?_nrf24l01SetRXMode:	
  2581                           ; 1 bytes @ 0x0
  2582                           
  2583  0070                     ?_nrf24l01GetRXPacket:	
  2584                           ; 1 bytes @ 0x0
  2585                           
  2586  0070                     ?_nrf24l01Init:	
  2587                           ; 1 bytes @ 0x0
  2588                           
  2589  0070                     ?_nrf24l01SetTXPipe:	
  2590                           ; 1 bytes @ 0x0
  2591                           
  2592  0070                     ?_nrf24l01SetRXPipe:	
  2593                           ; 1 bytes @ 0x0
  2594                           
  2595  0070                     ?_flashWriteByte:	
  2596                           ; 1 bytes @ 0x0
  2597                           
  2598  0070                     ?_flashRealod:	
  2599                           ; 1 bytes @ 0x0
  2600                           
  2601  0070                     ?_flashUpdate:	
  2602                           ; 1 bytes @ 0x0
  2603                           
  2604  0070                     ?_nrf24l01CELow:	
  2605                           ; 1 bytes @ 0x0
  2606                           
  2607  0070                     ??_nrf24l01CELow:	
  2608                           ; 1 bytes @ 0x0
  2609                           
  2610  0070                     ?_nrf24l01CEHigh:	
  2611                           ; 1 bytes @ 0x0
  2612                           
  2613  0070                     ??_nrf24l01CEHigh:	
  2614                           ; 1 bytes @ 0x0
  2615                           
  2616  0070                     ?_nrf24l01CSLow:	
  2617                           ; 1 bytes @ 0x0
  2618                           
  2619  0070                     ??_nrf24l01CSLow:	
  2620                           ; 1 bytes @ 0x0
  2621                           
  2622  0070                     ?_nrf24l01CSHigh:	
  2623                           ; 1 bytes @ 0x0
  2624                           
  2625  0070                     ??_nrf24l01CSHigh:	
  2626                           ; 1 bytes @ 0x0
  2627                           
  2628  0070                     ?_nrf24l01InterfaceInit:	
  2629                           ; 1 bytes @ 0x0
  2630                           
  2631  0070                     ?_nrf24l01SPISend:	
  2632                           ; 1 bytes @ 0x0
  2633                           
  2634  0070                     ??_nrf24l01SPISend:	
  2635                           ; 1 bytes @ 0x0
  2636                           
  2637  0070                     ?_nrf24l01SPIStart:	
  2638                           ; 1 bytes @ 0x0
  2639                           
  2640  0070                     ??_nrf24l01SPIStart:	
  2641                           ; 1 bytes @ 0x0
  2642                           
  2643  0070                     ?_nrf24l01SPIEnd:	
  2644                           ; 1 bytes @ 0x0
  2645                           
  2646  0070                     ??_nrf24l01SPIEnd:	
  2647                           ; 1 bytes @ 0x0
  2648                           
  2649  0070                     ?_enableInterrupts:	
  2650                           ; 1 bytes @ 0x0
  2651                           
  2652  0070                     ??_enableInterrupts:	
  2653                           ; 1 bytes @ 0x0
  2654                           
  2655  0070                     ?_exception:	
  2656                           ; 1 bytes @ 0x0
  2657                           
  2658  0070                     ?_ISR:	
  2659                           ; 1 bytes @ 0x0
  2660                           
  2661  0070                     ?_sleep:	
  2662                           ; 1 bytes @ 0x0
  2663                           
  2664  0070                     ?_checkTXPower:	
  2665                           ; 1 bytes @ 0x0
  2666                           
  2667  0070                     ?_loop:	
  2668                           ; 1 bytes @ 0x0
  2669                           
  2670  0070                     ?_nrf24l01GetPipe:	
  2671                           ; 1 bytes @ 0x0
  2672                           
  2673  0070                     ?_main:	
  2674                           ; 1 bytes @ 0x0
  2675                           
  2676  0070                     ?_nrf24l01CheckACK:	
  2677                           ; 1 bytes @ 0x0
  2678                           
  2679  0070                     ?_nrf24l01ReceivePacket:	
  2680                           ; 1 bytes @ 0x0
  2681                           
  2682  0070                     ?_nrf24l01InitRegisters:	
  2683                           ; 1 bytes @ 0x0
  2684                           
  2685  0070                     ?i1_nrf24l01SetRXMode:	
  2686                           ; 1 bytes @ 0x0
  2687                           
  2688  0070                     ?i1_memset:	
  2689                           ; 1 bytes @ 0x0
  2690                           
  2691  0070                     ?_strcmp:	
  2692                           ; 1 bytes @ 0x0
  2693                           
  2694  0070                     ?i1___wmul:	
  2695                           ; 2 bytes @ 0x0
  2696                           
  2697  0070                     nrf24l01SPISend@data:	
  2698                           ; 2 bytes @ 0x0
  2699                           
  2700  0070                     enableInterrupts@enable:	
  2701                           ; 1 bytes @ 0x0
  2702                           
  2703  0070                     flashWriteByte@offset:	
  2704                           ; 1 bytes @ 0x0
  2705                           
  2706  0070                     strcmp@s1:	
  2707                           ; 2 bytes @ 0x0
  2708                           
  2709  0070                     i1___wmul@multiplier:	
  2710                           ; 2 bytes @ 0x0
  2711                           
  2712  0070                     i1memset@p1:	
  2713                           ; 2 bytes @ 0x0
  2714                           
  2715                           
  2716                           ; 2 bytes @ 0x0
  2717  0070                     	ds	1
  2718  0071                     ?i1_nrf24l01Send:	
  2719  0071                     i1nrf24l01Send@data:	
  2720                           ; 1 bytes @ 0x1
  2721                           
  2722                           
  2723                           ; 1 bytes @ 0x1
  2724  0071                     	ds	1
  2725  0072                     ??i1_nrf24l01Send:	
  2726  0072                     strcmp@s2:	
  2727                           ; 1 bytes @ 0x2
  2728                           
  2729  0072                     flashWriteByte@data:	
  2730                           ; 1 bytes @ 0x2
  2731                           
  2732  0072                     i1___wmul@multiplicand:	
  2733                           ; 2 bytes @ 0x2
  2734                           
  2735  0072                     i1memset@c:	
  2736                           ; 2 bytes @ 0x2
  2737                           
  2738                           
  2739                           ; 2 bytes @ 0x2
  2740  0072                     	ds	1
  2741  0073                     ??_strcmp:	
  2742  0073                     i1nrf24l01Send@command:	
  2743                           ; 1 bytes @ 0x3
  2744                           
  2745                           
  2746                           ; 1 bytes @ 0x3
  2747  0073                     	ds	1
  2748  0074                     ??_flashWriteByte:	
  2749  0074                     ??i1_nrf24l01SetRXMode:	
  2750                           ; 1 bytes @ 0x4
  2751                           
  2752  0074                     ??i1___wmul:	
  2753                           ; 1 bytes @ 0x4
  2754                           
  2755  0074                     strcmp@r:	
  2756                           ; 1 bytes @ 0x4
  2757                           
  2758  0074                     flashWriteByte@address:	
  2759                           ; 1 bytes @ 0x4
  2760                           
  2761  0074                     i1___wmul@product:	
  2762                           ; 2 bytes @ 0x4
  2763                           
  2764  0074                     i1memset@n:	
  2765                           ; 2 bytes @ 0x4
  2766                           
  2767                           
  2768                           ; 2 bytes @ 0x4
  2769  0074                     	ds	1
  2770  0075                     i1nrf24l01SetRXMode@config:	
  2771                           
  2772                           ; 1 bytes @ 0x5
  2773  0075                     	ds	1
  2774  0076                     ??_flashUpdate:	
  2775  0076                     ??i1_memset:	
  2776                           ; 1 bytes @ 0x6
  2777                           
  2778  0076                     i1nrf24l01SetRXMode@rxMode:	
  2779                           ; 1 bytes @ 0x6
  2780                           
  2781  0076                     i1memset@p:	
  2782                           ; 1 bytes @ 0x6
  2783                           
  2784                           
  2785                           ; 2 bytes @ 0x6
  2786  0076                     	ds	1
  2787  0077                     ??_nrf24l01CheckACK:	
  2788                           
  2789                           ; 1 bytes @ 0x7
  2790  0077                     	ds	1
  2791  0078                     ??_nrf24l01ReceivePacket:	
  2792  0078                     flashUpdate@i:	
  2793                           ; 1 bytes @ 0x8
  2794                           
  2795                           
  2796                           ; 2 bytes @ 0x8
  2797  0078                     	ds	1
  2798  0079                     nrf24l01ReceivePacket@width:	
  2799                           
  2800                           ; 1 bytes @ 0x9
  2801  0079                     	ds	1
  2802  007A                     ??_exception:	
  2803  007A                     nrf24l01ReceivePacket@i:	
  2804                           ; 1 bytes @ 0xA
  2805                           
  2806                           
  2807                           ; 1 bytes @ 0xA
  2808  007A                     	ds	2
  2809  007C                     exception@exception:	
  2810                           
  2811                           ; 1 bytes @ 0xC
  2812  007C                     	ds	1
  2813  007D                     ??_nrf24l01ISR:	
  2814                           
  2815                           ; 1 bytes @ 0xD
  2816  007D                     	ds	1
  2817  007E                     ??_ISR:	
  2818                           
  2819                           	psect	cstackBANK0
  2820  0020                     __pcstackBANK0:	
  2821                           ; 1 bytes @ 0xE
  2822                           
  2823  0020                     nrf24l01ISR@status:	
  2824                           
  2825                           ; 1 bytes @ 0x0
  2826  0020                     	ds	1
  2827  0021                     ?___ftge:	
  2828  0021                     ??_nrf24l01GetRXPacket:	
  2829                           ; 1 bit 
  2830                           
  2831  0021                     ?_strcpy:	
  2832                           ; 1 bytes @ 0x1
  2833                           
  2834  0021                     ??_isdigit:	
  2835                           ; 1 bytes @ 0x1
  2836                           
  2837  0021                     ??_nrf24l01InterfaceInit:	
  2838                           ; 1 bytes @ 0x1
  2839                           
  2840  0021                     ??_sleep:	
  2841                           ; 1 bytes @ 0x1
  2842                           
  2843  0021                     ?_nrf24l01Send:	
  2844                           ; 1 bytes @ 0x1
  2845                           
  2846  0021                     ?___bmul:	
  2847                           ; 1 bytes @ 0x1
  2848                           
  2849  0021                     ?_memset:	
  2850                           ; 1 bytes @ 0x1
  2851                           
  2852  0021                     ?_strlen:	
  2853                           ; 2 bytes @ 0x1
  2854                           
  2855  0021                     ?_flashReadByte:	
  2856                           ; 2 bytes @ 0x1
  2857                           
  2858  0021                     ?___wmul:	
  2859                           ; 2 bytes @ 0x1
  2860                           
  2861  0021                     ?___lwmod:	
  2862                           ; 2 bytes @ 0x1
  2863                           
  2864  0021                     ?___ftpack:	
  2865                           ; 2 bytes @ 0x1
  2866                           
  2867  0021                     ?___ftneg:	
  2868                           ; 3 bytes @ 0x1
  2869                           
  2870  0021                     ?___lldiv:	
  2871                           ; 3 bytes @ 0x1
  2872                           
  2873  0021                     nrf24l01Send@data:	
  2874                           ; 4 bytes @ 0x1
  2875                           
  2876  0021                     ___bmul@multiplicand:	
  2877                           ; 1 bytes @ 0x1
  2878                           
  2879  0021                     _isdigit$1802:	
  2880                           ; 1 bytes @ 0x1
  2881                           
  2882  0021                     flashReadByte@offset:	
  2883                           ; 1 bytes @ 0x1
  2884                           
  2885  0021                     ___wmul@multiplier:	
  2886                           ; 2 bytes @ 0x1
  2887                           
  2888  0021                     ___lwmod@divisor:	
  2889                           ; 2 bytes @ 0x1
  2890                           
  2891  0021                     memset@p1:	
  2892                           ; 2 bytes @ 0x1
  2893                           
  2894  0021                     strcpy@from:	
  2895                           ; 2 bytes @ 0x1
  2896                           
  2897  0021                     strlen@s:	
  2898                           ; 2 bytes @ 0x1
  2899                           
  2900  0021                     ___ftpack@arg:	
  2901                           ; 2 bytes @ 0x1
  2902                           
  2903  0021                     ___ftge@ff1:	
  2904                           ; 3 bytes @ 0x1
  2905                           
  2906  0021                     ___ftneg@f1:	
  2907                           ; 3 bytes @ 0x1
  2908                           
  2909  0021                     ___lldiv@divisor:	
  2910                           ; 3 bytes @ 0x1
  2911                           
  2912                           
  2913                           ; 4 bytes @ 0x1
  2914  0021                     	ds	1
  2915  0022                     ??_nrf24l01Send:	
  2916  0022                     ??___bmul:	
  2917                           ; 1 bytes @ 0x2
  2918                           
  2919  0022                     sleep@wdps:	
  2920                           ; 1 bytes @ 0x2
  2921                           
  2922  0022                     isdigit@c:	
  2923                           ; 1 bytes @ 0x2
  2924                           
  2925                           
  2926                           ; 1 bytes @ 0x2
  2927  0022                     	ds	1
  2928  0023                     ??_strlen:	
  2929  0023                     ??_strcpy:	
  2930                           ; 1 bytes @ 0x3
  2931                           
  2932  0023                     ??_flashReadByte:	
  2933                           ; 1 bytes @ 0x3
  2934                           
  2935  0023                     nrf24l01Send@command:	
  2936                           ; 1 bytes @ 0x3
  2937                           
  2938  0023                     ___bmul@product:	
  2939                           ; 1 bytes @ 0x3
  2940                           
  2941  0023                     ___wmul@multiplicand:	
  2942                           ; 1 bytes @ 0x3
  2943                           
  2944  0023                     ___lwmod@dividend:	
  2945                           ; 2 bytes @ 0x3
  2946                           
  2947  0023                     memset@c:	
  2948                           ; 2 bytes @ 0x3
  2949                           
  2950                           
  2951                           ; 2 bytes @ 0x3
  2952  0023                     	ds	1
  2953  0024                     ??_nrf24l01SetRXMode:	
  2954  0024                     ?_nrf24l01ChangeTXPower:	
  2955                           ; 1 bytes @ 0x4
  2956                           
  2957  0024                     ??_nrf24l01SetRXPipe:	
  2958                           ; 1 bytes @ 0x4
  2959                           
  2960  0024                     ??___ftneg:	
  2961                           ; 1 bytes @ 0x4
  2962                           
  2963  0024                     ___bmul@multiplier:	
  2964                           ; 1 bytes @ 0x4
  2965                           
  2966  0024                     ___ftpack@exp:	
  2967                           ; 1 bytes @ 0x4
  2968                           
  2969  0024                     strcpy@to:	
  2970                           ; 1 bytes @ 0x4
  2971                           
  2972  0024                     nrf24l01ChangeTXPower@addPower:	
  2973                           ; 1 bytes @ 0x4
  2974                           
  2975  0024                     ___ftge@ff2:	
  2976                           ; 2 bytes @ 0x4
  2977                           
  2978                           
  2979                           ; 3 bytes @ 0x4
  2980  0024                     	ds	1
  2981  0025                     ??_nrf24l01SetTXPipe:	
  2982  0025                     ??___wmul:	
  2983                           ; 1 bytes @ 0x5
  2984                           
  2985  0025                     ??___lwmod:	
  2986                           ; 1 bytes @ 0x5
  2987                           
  2988  0025                     nrf24l01SetRXMode@config:	
  2989                           ; 1 bytes @ 0x5
  2990                           
  2991  0025                     ___ftpack@sign:	
  2992                           ; 1 bytes @ 0x5
  2993                           
  2994  0025                     strcpy@cp:	
  2995                           ; 1 bytes @ 0x5
  2996                           
  2997  0025                     ___wmul@product:	
  2998                           ; 1 bytes @ 0x5
  2999                           
  3000  0025                     memset@n:	
  3001                           ; 2 bytes @ 0x5
  3002                           
  3003  0025                     strlen@cp:	
  3004                           ; 2 bytes @ 0x5
  3005                           
  3006  0025                     ___lldiv@dividend:	
  3007                           ; 2 bytes @ 0x5
  3008                           
  3009                           
  3010                           ; 4 bytes @ 0x5
  3011  0025                     	ds	1
  3012  0026                     ??_nrf24l01ChangeTXPower:	
  3013  0026                     ??___ftpack:	
  3014                           ; 1 bytes @ 0x6
  3015                           
  3016  0026                     nrf24l01SetRXMode@rxMode:	
  3017                           ; 1 bytes @ 0x6
  3018                           
  3019  0026                     nrf24l01SetRXPipe@pipe:	
  3020                           ; 1 bytes @ 0x6
  3021                           
  3022  0026                     ___lwmod@counter:	
  3023                           ; 1 bytes @ 0x6
  3024                           
  3025  0026                     flashReadByte@result:	
  3026                           ; 1 bytes @ 0x6
  3027                           
  3028                           
  3029                           ; 2 bytes @ 0x6
  3030  0026                     	ds	1
  3031  0027                     ??_memset:	
  3032  0027                     ??_nrf24l01GetPipe:	
  3033                           ; 1 bytes @ 0x7
  3034                           
  3035  0027                     ??___ftge:	
  3036                           ; 1 bytes @ 0x7
  3037                           
  3038  0027                     nrf24l01ChangeTXPower@rfSetup:	
  3039                           ; 1 bytes @ 0x7
  3040                           
  3041  0027                     nrf24l01SetTXPipe@pipe:	
  3042                           ; 1 bytes @ 0x7
  3043                           
  3044  0027                     nrf24l01SetRXPipe@enRXAddr:	
  3045                           ; 1 bytes @ 0x7
  3046                           
  3047  0027                     memset@p:	
  3048                           ; 1 bytes @ 0x7
  3049                           
  3050                           
  3051                           ; 2 bytes @ 0x7
  3052  0027                     	ds	1
  3053  0028                     ?_nrf24l01SendPacket:	
  3054  0028                     ??_checkTXPower:	
  3055                           ; 1 bytes @ 0x8
  3056                           
  3057  0028                     ??_nrf24l01InitRegisters:	
  3058                           ; 1 bytes @ 0x8
  3059                           
  3060  0028                     flashReadByte@address:	
  3061                           ; 1 bytes @ 0x8
  3062                           
  3063  0028                     nrf24l01SendPacket@Packet:	
  3064                           ; 2 bytes @ 0x8
  3065                           
  3066                           
  3067                           ; 2 bytes @ 0x8
  3068  0028                     	ds	1
  3069  0029                     ??___lldiv:	
  3070  0029                     ?___awtoft:	
  3071                           ; 1 bytes @ 0x9
  3072                           
  3073  0029                     ?___lltoft:	
  3074                           ; 3 bytes @ 0x9
  3075                           
  3076  0029                     ?___lwtoft:	
  3077                           ; 3 bytes @ 0x9
  3078                           
  3079  0029                     checkTXPower@rxPacket:	
  3080                           ; 3 bytes @ 0x9
  3081                           
  3082  0029                     nrf24l01GetPipe@pipe:	
  3083                           ; 1 bytes @ 0x9
  3084                           
  3085  0029                     ___awtoft@c:	
  3086                           ; 1 bytes @ 0x9
  3087                           
  3088  0029                     ___lwtoft@c:	
  3089                           ; 2 bytes @ 0x9
  3090                           
  3091  0029                     ___lltoft@c:	
  3092                           ; 2 bytes @ 0x9
  3093                           
  3094                           
  3095                           ; 4 bytes @ 0x9
  3096  0029                     	ds	1
  3097  002A                     ??_nrf24l01SendPacket:	
  3098  002A                     ??_flashRealod:	
  3099                           ; 1 bytes @ 0xA
  3100                           
  3101  002A                     nrf24l01GetPipe@name:	
  3102                           ; 1 bytes @ 0xA
  3103                           
  3104  002A                     nrf24l01InitRegisters@channel:	
  3105                           ; 1 bytes @ 0xA
  3106                           
  3107  002A                     ___lldiv@quotient:	
  3108                           ; 1 bytes @ 0xA
  3109                           
  3110                           
  3111                           ; 4 bytes @ 0xA
  3112  002A                     	ds	1
  3113  002B                     nrf24l01GetPipe@i:	
  3114  002B                     nrf24l01InitRegisters@setupAW:	
  3115                           ; 1 bytes @ 0xB
  3116                           
  3117  002B                     flashRealod@i:	
  3118                           ; 1 bytes @ 0xB
  3119                           
  3120                           
  3121                           ; 2 bytes @ 0xB
  3122  002B                     	ds	1
  3123  002C                     ??___awtoft:	
  3124  002C                     ??___lwtoft:	
  3125                           ; 1 bytes @ 0xC
  3126                           
  3127  002C                     nrf24l01InitRegisters@feature:	
  3128                           ; 1 bytes @ 0xC
  3129                           
  3130                           
  3131                           ; 1 bytes @ 0xC
  3132  002C                     	ds	1
  3133  002D                     ??___lltoft:	
  3134  002D                     nrf24l01InitRegisters@rfSetup:	
  3135                           ; 1 bytes @ 0xD
  3136                           
  3137                           
  3138                           ; 1 bytes @ 0xD
  3139  002D                     	ds	1
  3140  002E                     nrf24l01SendPacket@i:	
  3141  002E                     nrf24l01InitRegisters@status:	
  3142                           ; 1 bytes @ 0xE
  3143                           
  3144  002E                     ___lldiv@counter:	
  3145                           ; 1 bytes @ 0xE
  3146                           
  3147  002E                     ___awtoft@sign:	
  3148                           ; 1 bytes @ 0xE
  3149                           
  3150  002E                     ___lltoft@exp:	
  3151                           ; 1 bytes @ 0xE
  3152                           
  3153                           
  3154                           ; 1 bytes @ 0xE
  3155  002E                     	ds	1
  3156  002F                     ?___ftadd:	
  3157  002F                     ?___llmod:	
  3158                           ; 3 bytes @ 0xF
  3159                           
  3160  002F                     nrf24l01InitRegisters@enAA:	
  3161                           ; 4 bytes @ 0xF
  3162                           
  3163  002F                     ___ftadd@f1:	
  3164                           ; 1 bytes @ 0xF
  3165                           
  3166  002F                     ___llmod@divisor:	
  3167                           ; 3 bytes @ 0xF
  3168                           
  3169                           
  3170                           ; 4 bytes @ 0xF
  3171  002F                     	ds	1
  3172  0030                     nrf24l01InitRegisters@DynPD:	
  3173                           
  3174                           ; 1 bytes @ 0x10
  3175  0030                     	ds	1
  3176  0031                     nrf24l01InitRegisters@config:	
  3177                           
  3178                           ; 1 bytes @ 0x11
  3179  0031                     	ds	1
  3180  0032                     nrf24l01InitRegisters@i:	
  3181  0032                     ___ftadd@f2:	
  3182                           ; 2 bytes @ 0x12
  3183                           
  3184                           
  3185                           ; 3 bytes @ 0x12
  3186  0032                     	ds	1
  3187  0033                     ___llmod@dividend:	
  3188                           
  3189                           ; 4 bytes @ 0x13
  3190  0033                     	ds	1
  3191  0034                     ??_nrf24l01Init:	
  3192                           
  3193                           ; 1 bytes @ 0x14
  3194  0034                     	ds	1
  3195  0035                     ??___ftadd:	
  3196                           
  3197                           ; 1 bytes @ 0x15
  3198  0035                     	ds	2
  3199  0037                     ??___llmod:	
  3200                           
  3201                           ; 1 bytes @ 0x17
  3202  0037                     	ds	1
  3203  0038                     ___llmod@counter:	
  3204                           
  3205                           ; 1 bytes @ 0x18
  3206  0038                     	ds	1
  3207  0039                     ?_sprintf:	
  3208  0039                     ___ftadd@sign:	
  3209                           ; 2 bytes @ 0x19
  3210                           
  3211  0039                     sprintf@f:	
  3212                           ; 1 bytes @ 0x19
  3213                           
  3214                           
  3215                           ; 2 bytes @ 0x19
  3216  0039                     	ds	1
  3217  003A                     ___ftadd@exp2:	
  3218                           
  3219                           ; 1 bytes @ 0x1A
  3220  003A                     	ds	1
  3221  003B                     ___ftadd@exp1:	
  3222                           
  3223                           ; 1 bytes @ 0x1B
  3224  003B                     	ds	1
  3225  003C                     ?___ftdiv:	
  3226  003C                     ?___ftsub:	
  3227                           ; 3 bytes @ 0x1C
  3228                           
  3229  003C                     ___ftdiv@f2:	
  3230                           ; 3 bytes @ 0x1C
  3231                           
  3232  003C                     ___ftsub@f2:	
  3233                           ; 3 bytes @ 0x1C
  3234                           
  3235                           
  3236                           ; 3 bytes @ 0x1C
  3237  003C                     	ds	3
  3238  003F                     ___ftdiv@f1:	
  3239  003F                     ___ftsub@f1:	
  3240                           ; 3 bytes @ 0x1F
  3241                           
  3242                           
  3243                           ; 3 bytes @ 0x1F
  3244  003F                     	ds	3
  3245  0042                     ??___ftdiv:	
  3246  0042                     ??___ftsub:	
  3247                           ; 1 bytes @ 0x22
  3248                           
  3249                           
  3250                           ; 1 bytes @ 0x22
  3251  0042                     	ds	1
  3252  0043                     ??_sprintf:	
  3253                           
  3254                           ; 1 bytes @ 0x23
  3255  0043                     	ds	3
  3256  0046                     ___ftdiv@cntr:	
  3257                           
  3258                           ; 1 bytes @ 0x26
  3259  0046                     	ds	1
  3260  0047                     ___ftdiv@f3:	
  3261                           
  3262                           ; 3 bytes @ 0x27
  3263  0047                     	ds	2
  3264  0049                     sprintf@flag:	
  3265                           
  3266                           ; 1 bytes @ 0x29
  3267  0049                     	ds	1
  3268  004A                     sprintf@ap:	
  3269  004A                     ___ftdiv@exp:	
  3270                           ; 1 bytes @ 0x2A
  3271                           
  3272                           
  3273                           ; 1 bytes @ 0x2A
  3274  004A                     	ds	1
  3275  004B                     ___ftdiv@sign:	
  3276  004B                     sprintf@val:	
  3277                           ; 1 bytes @ 0x2B
  3278                           
  3279                           
  3280                           ; 4 bytes @ 0x2B
  3281  004B                     	ds	1
  3282  004C                     ?_getADCValue:	
  3283                           
  3284                           ; 3 bytes @ 0x2C
  3285  004C                     	ds	3
  3286  004F                     ??_getADCValue:	
  3287  004F                     sprintf@sp:	
  3288                           ; 1 bytes @ 0x2F
  3289                           
  3290                           
  3291                           ; 1 bytes @ 0x2F
  3292  004F                     	ds	1
  3293  0050                     sprintf@width:	
  3294                           
  3295                           ; 2 bytes @ 0x30
  3296  0050                     	ds	2
  3297  0052                     getADCValue@adcLoop:	
  3298  0052                     sprintf@prec:	
  3299                           ; 2 bytes @ 0x32
  3300                           
  3301                           
  3302                           ; 2 bytes @ 0x32
  3303  0052                     	ds	2
  3304  0054                     getADCValue@channel:	
  3305  0054                     sprintf@c:	
  3306                           ; 1 bytes @ 0x34
  3307                           
  3308                           
  3309                           ; 1 bytes @ 0x34
  3310  0054                     	ds	1
  3311  0055                     getADCValue@adcSum:	
  3312                           
  3313                           ; 3 bytes @ 0x35
  3314  0055                     	ds	3
  3315  0058                     ?___ftmul:	
  3316  0058                     ___ftmul@f1:	
  3317                           ; 3 bytes @ 0x38
  3318                           
  3319                           
  3320                           ; 3 bytes @ 0x38
  3321  0058                     	ds	3
  3322  005B                     ___ftmul@f2:	
  3323                           
  3324                           ; 3 bytes @ 0x3B
  3325  005B                     	ds	3
  3326  005E                     ??___ftmul:	
  3327                           
  3328                           ; 1 bytes @ 0x3E
  3329  005E                     	ds	4
  3330  0062                     ___ftmul@exp:	
  3331                           
  3332                           ; 1 bytes @ 0x42
  3333  0062                     	ds	1
  3334  0063                     ___ftmul@f3_as_product:	
  3335                           
  3336                           ; 3 bytes @ 0x43
  3337  0063                     	ds	3
  3338  0066                     ___ftmul@cntr:	
  3339                           
  3340                           ; 1 bytes @ 0x46
  3341  0066                     	ds	1
  3342  0067                     ___ftmul@sign:	
  3343                           
  3344                           ; 1 bytes @ 0x47
  3345  0067                     	ds	1
  3346  0068                     ?___fttol:	
  3347  0068                     ___fttol@f1:	
  3348                           ; 4 bytes @ 0x48
  3349                           
  3350                           
  3351                           ; 3 bytes @ 0x48
  3352  0068                     	ds	4
  3353  006C                     ??_ftoa:	
  3354                           
  3355                           ; 1 bytes @ 0x4C
  3356  006C                     	ds	1
  3357  006D                     ??_strcat:	
  3358  006D                     ??_setMessage:	
  3359                           ; 1 bytes @ 0x4D
  3360                           
  3361                           
  3362                           ; 1 bytes @ 0x4D
  3363  006D                     	ds	1
  3364  006E                     ??_loop:	
  3365                           
  3366                           	psect	maintext
  3367  0D6C                     __pmaintext:	
  3368                           ; 1 bytes @ 0x4E
  3369 ;;
  3370 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3371 ;;
  3372 ;; *************** function _main *****************
  3373 ;; Defined at:
  3374 ;;		line 197 in file "main.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;		None
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;  packet         33   40[BANK1 ] struct .
  3379 ;;  pipe            1   39[BANK1 ] unsigned char 
  3380 ;; Return value:  Size  Location     Type
  3381 ;;                  1    wreg      void 
  3382 ;; Registers used:
  3383 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3384 ;; Tracked objects:
  3385 ;;		On entry : B1F/0
  3386 ;;		On exit  : 0/0
  3387 ;;		Unchanged: 0/0
  3388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3390 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3391 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3392 ;;      Totals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  3393 ;;Total ram usage:       35 bytes
  3394 ;; Hardware stack levels required when called:   13
  3395 ;; This function calls:
  3396 ;;		___lwtoft
  3397 ;;		_flashRealod
  3398 ;;		_loop
  3399 ;;		_nrf24l01GetPipe
  3400 ;;		_nrf24l01Init
  3401 ;;		_nrf24l01SendPacket
  3402 ;;		_nrf24l01SetRXPipe
  3403 ;;		_nrf24l01SetTXPipe
  3404 ;;		_setMessage
  3405 ;;		_sleep
  3406 ;;		_strcpy
  3407 ;; This function is called by:
  3408 ;;		Startup code after reset
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412                           
  3413                           ;psect for function _main
  3414  0D6C                     _main:	
  3415                           
  3416                           ;main.c: 200: ANSELA = 0x00;
  3417                           
  3418                           ;incstack = 0
  3419                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3420  0D6C  0023               	movlb	3	; select bank3
  3421  0D6D  018C               	clrf	12	;volatile
  3422                           
  3423                           ;main.c: 201: ANSELC = 0x00;
  3424  0D6E  018E               	clrf	14	;volatile
  3425                           
  3426                           ;main.c: 203: ODCONA = 0x00;
  3427  0D6F  0025               	movlb	5	; select bank5
  3428  0D70  018C               	clrf	12	;volatile
  3429                           
  3430                           ;main.c: 204: ODCONC = 0x00;
  3431  0D71  018E               	clrf	14	;volatile
  3432                           
  3433                           ;main.c: 209: INLVLA = 0x00;
  3434  0D72  0027               	movlb	7	; select bank7
  3435  0D73  018C               	clrf	12	;volatile
  3436                           
  3437                           ;main.c: 210: INLVLC = 0x00;
  3438  0D74  018E               	clrf	14	;volatile
  3439                           
  3440                           ;main.c: 212: WPUA = 0x00;
  3441  0D75  0024               	movlb	4	; select bank4
  3442  0D76  018C               	clrf	12	;volatile
  3443                           
  3444                           ;main.c: 213: WPUC = 0x00;
  3445  0D77  018E               	clrf	14	;volatile
  3446                           
  3447                           ;main.c: 215: TRISCbits.TRISC5 = 0;
  3448  0D78  0021               	movlb	1	; select bank1
  3449  0D79  128E               	bcf	14,5	;volatile
  3450                           
  3451                           ;main.c: 216: TRISCbits.TRISC4 = 0;
  3452  0D7A  120E               	bcf	14,4	;volatile
  3453                           
  3454                           ;main.c: 218: PORTCbits.RC4 = 0;
  3455  0D7B  0020               	movlb	0	; select bank0
  3456  0D7C  120E               	bcf	14,4	;volatile
  3457                           
  3458                           ;main.c: 225: INTCONbits.PEIE = 0;
  3459  0D7D  130B               	bcf	11,6	;volatile
  3460                           
  3461                           ;main.c: 226: INTCONbits.GIE = 0;
  3462  0D7E  138B               	bcf	11,7	;volatile
  3463                           
  3464                           ;main.c: 228: OSCCON1bits.NOSC = 0b000;
  3465  0D7F  308F               	movlw	-113
  3466  0D80  0032               	movlb	18	; select bank18
  3467  0D81  0599               	andwf	25,f	;volatile
  3468                           
  3469                           ;main.c: 229: OSCCON1bits.NDIV = 0b000;
  3470  0D82  30F0               	movlw	-16
  3471  0D83  0599               	andwf	25,f	;volatile
  3472                           
  3473                           ;main.c: 231: _delay((unsigned long)((10)*(16000000/4000.0)));
  3474  0D84  3034               	movlw	52
  3475  0D85  0021               	movlb	1	; select bank1
  3476  0D86  00C6               	movwf	??_main^(0+128)
  3477  0D87  30F1               	movlw	241
  3478  0D88                     u3537:	
  3479  0D88  0B89               	decfsz	9,f
  3480  0D89  2D88               	goto	u3537
  3481  0D8A  0BC6               	decfsz	??_main^(0+128),f
  3482  0D8B  2D88               	goto	u3537
  3483  0D8C  3200               	nop2
  3484                           
  3485                           ;main.c: 243: strcpy(romData.name, "UWT");
  3486  0D8D  3038               	movlw	low (STR_6| (0+32768))
  3487  0D8E  0020               	movlb	0	; select bank0
  3488  0D8F  00A1               	movwf	strcpy@from
  3489  0D90  3098               	movlw	high (STR_6| (0+32768))
  3490  0D91  00A2               	movwf	strcpy@from+1
  3491  0D92  304E               	movlw	(low ((_romData| (0+256)+1)))& (0+255)
  3492  0D93  3188  2017  318D   	fcall	_strcpy
  3493                           
  3494                           ;main.c: 245: flashRealod();
  3495  0D96  3188  2070  318D   	fcall	_flashRealod
  3496                           
  3497                           ;main.c: 247: nrf24l01Init();
  3498  0D99  3189  2114  318D   	fcall	_nrf24l01Init
  3499                           
  3500                           ;main.c: 249: unsigned char pipe = nrf24l01GetPipe(romData.name);
  3501  0D9C  304E               	movlw	(low ((_romData| (0+256)+1)))& (0+255)
  3502  0D9D  318A  22A3  318D   	fcall	_nrf24l01GetPipe
  3503  0DA0  0021               	movlb	1	; select bank1
  3504  0DA1  00C6               	movwf	??_main^(0+128)
  3505  0DA2  0846               	movf	??_main^(0+128),w
  3506  0DA3  00C7               	movwf	main@pipe^(0+128)
  3507                           
  3508                           ;main.c: 250: nrf24l01SetTXPipe(pipe);
  3509  0DA4  0847               	movf	main@pipe^(0+128),w
  3510  0DA5  318B  23D4  318D   	fcall	_nrf24l01SetTXPipe
  3511                           
  3512                           ;main.c: 251: nrf24l01SetRXPipe(pipe);
  3513  0DA8  0021               	movlb	1	; select bank1
  3514  0DA9  0847               	movf	main@pipe^(0+128),w
  3515  0DAA  3188  20D1  318D   	fcall	_nrf24l01SetRXPipe
  3516                           
  3517                           ;main.c: 255: ADCON0bits.ADON = 0;
  3518  0DAD  0021               	movlb	1	; select bank1
  3519  0DAE  101D               	bcf	29,0	;volatile
  3520                           
  3521                           ;main.c: 258: PORTAbits.RA4 = 0;
  3522  0DAF  0020               	movlb	0	; select bank0
  3523  0DB0  120C               	bcf	12,4	;volatile
  3524                           
  3525                           ;main.c: 259: TRISAbits.TRISA4 = 1;
  3526  0DB1  0021               	movlb	1	; select bank1
  3527  0DB2  160C               	bsf	12,4	;volatile
  3528                           
  3529                           ;main.c: 260: WPUAbits.WPUA4 = 0;
  3530  0DB3  0024               	movlb	4	; select bank4
  3531  0DB4  120C               	bcf	12,4	;volatile
  3532                           
  3533                           ;main.c: 261: ODCONAbits.ODCA4 = 1;
  3534  0DB5  0025               	movlb	5	; select bank5
  3535  0DB6  160C               	bsf	12,4	;volatile
  3536                           
  3537                           ;main.c: 262: ANSELAbits.ANSA4 = 1;
  3538  0DB7  0023               	movlb	3	; select bank3
  3539  0DB8  160C               	bsf	12,4	;volatile
  3540                           
  3541                           ;main.c: 265: ANSELCbits.ANSC3 = 1;
  3542  0DB9  158E               	bsf	14,3	;volatile
  3543                           
  3544                           ;main.c: 266: TRISCbits.TRISC3 = 1;
  3545  0DBA  0021               	movlb	1	; select bank1
  3546  0DBB  158E               	bsf	14,3	;volatile
  3547                           
  3548                           ;main.c: 269: FVRCONbits.TSEN = 1;
  3549  0DBC  0022               	movlb	2	; select bank2
  3550  0DBD  1697               	bsf	23,5	;volatile
  3551                           
  3552                           ;main.c: 270: FVRCONbits.TSRNG = 1;
  3553  0DBE  1617               	bsf	23,4	;volatile
  3554                           
  3555                           ;main.c: 273: FVRCONbits.FVREN = 0;
  3556  0DBF  1397               	bcf	23,7	;volatile
  3557                           
  3558                           ;main.c: 274: FVRCONbits.ADFVR = 0b10;
  3559  0DC0  0817               	movf	23,w	;volatile
  3560  0DC1  39FC               	andlw	-4
  3561  0DC2  3802               	iorlw	2
  3562  0DC3  0097               	movwf	23	;volatile
  3563                           
  3564                           ;main.c: 276: ADCON1bits.ADCS = 0b111;
  3565  0DC4  3070               	movlw	112
  3566  0DC5  0021               	movlb	1	; select bank1
  3567  0DC6  049E               	iorwf	30,f	;volatile
  3568                           
  3569                           ;main.c: 277: ADCON1bits.ADFM = 1;
  3570  0DC7  179E               	bsf	30,7	;volatile
  3571                           
  3572                           ;main.c: 278: ADCON1bits.ADPREF = 0b11;
  3573  0DC8  3003               	movlw	3
  3574  0DC9  049E               	iorwf	30,f	;volatile
  3575                           
  3576                           ;main.c: 279: ADCON1bits.ADNREF = 0b00;
  3577  0DCA  111E               	bcf	30,2	;volatile
  3578                           
  3579                           ;main.c: 282: ADCON0bits.CHS = 3;
  3580  0DCB  081D               	movf	29,w	;volatile
  3581  0DCC  3903               	andlw	-253
  3582  0DCD  380C               	iorlw	12
  3583  0DCE  009D               	movwf	29	;volatile
  3584                           
  3585                           ;main.c: 287: TRISAbits.TRISA2 = 1;
  3586  0DCF  150C               	bsf	12,2	;volatile
  3587                           
  3588                           ;main.c: 288: PIE0bits.INTE = 1;
  3589  0DD0  1410               	bsf	16,0	;volatile
  3590                           
  3591                           ;main.c: 289: INTCONbits.INTEDG = 0;
  3592  0DD1  100B               	bcf	11,0	;volatile
  3593                           
  3594                           ;main.c: 292: TRISAbits.TRISA5 = 0;
  3595  0DD2  128C               	bcf	12,5	;volatile
  3596                           
  3597                           ;main.c: 293: PORTAbits.RA5 = 0;
  3598  0DD3  0020               	movlb	0	; select bank0
  3599  0DD4  128C               	bcf	12,5	;volatile
  3600                           
  3601                           ;main.c: 296: INTCONbits.PEIE = 1;
  3602  0DD5  170B               	bsf	11,6	;volatile
  3603                           
  3604                           ;main.c: 297: INTCONbits.GIE = 1;
  3605  0DD6  178B               	bsf	11,7	;volatile
  3606                           
  3607                           ;main.c: 299: nrf24l01Packet_t packet;;main.c: 301: setMessage(&packet, "BOOT", romData.
      +                          bootMode);
  3608  0DD7  30C8               	movlw	low main@packet
  3609  0DD8  0021               	movlb	1	; select bank1
  3610  0DD9  00BD               	movwf	setMessage@packet^(0+128)
  3611  0DDA  3000               	movlw	high main@packet
  3612  0DDB  00BE               	movwf	(setMessage@packet+1)^(0+128)
  3613  0DDC  3033               	movlw	low (STR_7| (0+32768))
  3614  0DDD  00BF               	movwf	setMessage@topic^(0+128)
  3615  0DDE  3098               	movlw	high (STR_7| (0+32768))
  3616  0DDF  00C0               	movwf	(setMessage@topic^(0+128)+1)
  3617  0DE0  0022               	movlb	2	; select bank2
  3618  0DE1  085F               	movf	((_romData+1)^(0+256)+17),w
  3619  0DE2  0020               	movlb	0	; select bank0
  3620  0DE3  00AA               	movwf	___lwtoft@c+1
  3621  0DE4  0022               	movlb	2	; select bank2
  3622  0DE5  085E               	movf	(_romData^(0+256)+17),w
  3623  0DE6  0020               	movlb	0	; select bank0
  3624  0DE7  00A9               	movwf	___lwtoft@c
  3625  0DE8  3188  2002  318D   	fcall	___lwtoft
  3626  0DEB  0020               	movlb	0	; select bank0
  3627  0DEC  0829               	movf	?___lwtoft,w
  3628  0DED  0021               	movlb	1	; select bank1
  3629  0DEE  00C1               	movwf	setMessage@value^(0+128)
  3630  0DEF  0020               	movlb	0	; select bank0
  3631  0DF0  082A               	movf	?___lwtoft+1,w
  3632  0DF1  0021               	movlb	1	; select bank1
  3633  0DF2  00C2               	movwf	(setMessage@value+1)^(0+128)
  3634  0DF3  0020               	movlb	0	; select bank0
  3635  0DF4  082B               	movf	?___lwtoft+2,w
  3636  0DF5  0021               	movlb	1	; select bank1
  3637  0DF6  00C3               	movwf	(setMessage@value+2)^(0+128)
  3638  0DF7  3187  2795  318D   	fcall	_setMessage
  3639                           
  3640                           ;main.c: 302: packet.packetData.byte = 0;
  3641  0DFA  0021               	movlb	1	; select bank1
  3642  0DFB  01C8               	clrf	main@packet^(0+128)
  3643                           
  3644                           ;main.c: 303: packet.packetData.ACKRequest = 0;
  3645  0DFC  1148               	bcf	main@packet^(0+128),2
  3646                           
  3647                           ;main.c: 304: nrf24l01SendPacket(&packet);
  3648  0DFD  30C8               	movlw	low main@packet
  3649  0DFE  0020               	movlb	0	; select bank0
  3650  0DFF  00A8               	movwf	nrf24l01SendPacket@Packet
  3651  0E00  3000               	movlw	high main@packet
  3652  0E01  00A9               	movwf	nrf24l01SendPacket@Packet+1
  3653  0E02  3186  2618  318D   	fcall	_nrf24l01SendPacket
  3654                           
  3655                           ;main.c: 305: sleep(10);
  3656  0E05  300A               	movlw	10
  3657  0E06  3197  27AD  318D   	fcall	_sleep
  3658  0E09                     l3881:	
  3659                           ;main.c: 307: while(1){
  3660                           
  3661                           
  3662                           ;main.c: 308: loop();
  3663  0E09  3182  2203  318D   	fcall	_loop
  3664  0E0C  2E09               	goto	l3881
  3665  0E0D                     __end_of_main:	
  3666                           ;main.c: 309: };main.c: 311: return;
  3667                           
  3668                           
  3669                           	psect	text1
  3670  0817                     __ptext1:	
  3671 ;; *************** function _strcpy *****************
  3672 ;; Defined at:
  3673 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  3674 ;; Parameters:    Size  Location     Type
  3675 ;;  to              1    wreg     PTR unsigned char 
  3676 ;;		 -> romData(19), 
  3677 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  3678 ;;		 -> STR_6(4), 
  3679 ;; Auto vars:     Size  Location     Type
  3680 ;;  to              1    4[BANK0 ] PTR unsigned char 
  3681 ;;		 -> romData(19), 
  3682 ;;  cp              1    5[BANK0 ] PTR unsigned char 
  3683 ;;		 -> romData(19), 
  3684 ;; Return value:  Size  Location     Type
  3685 ;;                  1    wreg      PTR unsigned char 
  3686 ;; Registers used:
  3687 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3688 ;; Tracked objects:
  3689 ;;		On entry : 0/0
  3690 ;;		On exit  : 0/0
  3691 ;;		Unchanged: 0/0
  3692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3693 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3694 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3695 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3696 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3697 ;;Total ram usage:        5 bytes
  3698 ;; Hardware stack levels used:    1
  3699 ;; Hardware stack levels required when called:    7
  3700 ;; This function calls:
  3701 ;;		Nothing
  3702 ;; This function is called by:
  3703 ;;		_main
  3704 ;; This function uses a non-reentrant model
  3705 ;;
  3706                           
  3707                           
  3708                           ;psect for function _strcpy
  3709  0817                     _strcpy:	
  3710                           
  3711                           ;incstack = 0
  3712                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3713                           ;strcpy@to stored from wreg
  3714  0817  0020               	movlb	0	; select bank0
  3715  0818  00A4               	movwf	strcpy@to
  3716  0819  0824               	movf	strcpy@to,w
  3717  081A  00A3               	movwf	??_strcpy
  3718  081B  0823               	movf	??_strcpy,w
  3719  081C  00A5               	movwf	strcpy@cp
  3720  081D                     l3593:	
  3721  081D  0825               	movf	strcpy@cp,w
  3722  081E  0086               	movwf	6
  3723  081F  3001               	movlw	1	; select bank2/3
  3724  0820  0087               	movwf	7
  3725  0821  0821               	movf	strcpy@from,w
  3726  0822  0084               	movwf	4
  3727  0823  0822               	movf	strcpy@from+1,w
  3728  0824  0085               	movwf	5
  3729  0825  0800               	movf	0,w	;code access
  3730  0826  3FC0               	movwi [0]fsr1
  3731  0827  0889               	movf	9,f
  3732  0828  1903               	btfsc	3,2
  3733  0829  0008               	return
  3734  082A  3001               	movlw	1
  3735  082B  00A3               	movwf	??_strcpy
  3736  082C  0823               	movf	??_strcpy,w
  3737  082D  07A5               	addwf	strcpy@cp,f
  3738  082E  3001               	movlw	1
  3739  082F  07A1               	addwf	strcpy@from,f
  3740  0830  3000               	movlw	0
  3741  0831  3DA2               	addwfc	strcpy@from+1,f
  3742  0832  281D               	goto	l3593
  3743  0833                     __end_of_strcpy:	
  3744                           ;	Return value of _strcpy is never used
  3745                           
  3746                           
  3747                           	psect	text2
  3748  0914                     __ptext2:	
  3749 ;; *************** function _nrf24l01Init *****************
  3750 ;; Defined at:
  3751 ;;		line 444 in file "nrf24l01.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;		None
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;		None
  3756 ;; Return value:  Size  Location     Type
  3757 ;;                  1    wreg      void 
  3758 ;; Registers used:
  3759 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3760 ;; Tracked objects:
  3761 ;;		On entry : 0/0
  3762 ;;		On exit  : 0/0
  3763 ;;		Unchanged: 0/0
  3764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3767 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3768 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3769 ;;Total ram usage:        2 bytes
  3770 ;; Hardware stack levels used:    1
  3771 ;; Hardware stack levels required when called:   12
  3772 ;; This function calls:
  3773 ;;		_nrf24l01CEHigh
  3774 ;;		_nrf24l01CELow
  3775 ;;		_nrf24l01InitRegisters
  3776 ;;		_nrf24l01InterfaceInit
  3777 ;; This function is called by:
  3778 ;;		_main
  3779 ;; This function uses a non-reentrant model
  3780 ;;
  3781                           
  3782                           
  3783                           ;psect for function _nrf24l01Init
  3784  0914                     _nrf24l01Init:	
  3785                           
  3786                           ;nrf24l01.c: 447: nrf24l01InterfaceInit();
  3787                           
  3788                           ;incstack = 0
  3789                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3790  0914  3197  27E4  3189   	fcall	_nrf24l01InterfaceInit
  3791                           
  3792                           ;nrf24l01.c: 452: nrf24l01CELow();
  3793  0917  3196  26BD  3189   	fcall	_nrf24l01CELow
  3794                           
  3795                           ;nrf24l01.c: 454: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3796  091A  3002               	movlw	2
  3797  091B  0020               	movlb	0	; select bank0
  3798  091C  00B5               	movwf	??_nrf24l01Init+1
  3799  091D  3004               	movlw	4
  3800  091E  00B4               	movwf	??_nrf24l01Init
  3801  091F  30BA               	movlw	186
  3802  0920                     u3547:	
  3803  0920  0B89               	decfsz	9,f
  3804  0921  2920               	goto	u3547
  3805  0922  0BB4               	decfsz	??_nrf24l01Init,f
  3806  0923  2920               	goto	u3547
  3807  0924  0BB5               	decfsz	??_nrf24l01Init+1,f
  3808  0925  2920               	goto	u3547
  3809  0926  0000               	nop
  3810                           
  3811                           ;nrf24l01.c: 456: nrf24l01InitRegisters();
  3812  0927  3183  232A  3189   	fcall	_nrf24l01InitRegisters
  3813                           
  3814                           ;nrf24l01.c: 458: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3815  092A  3002               	movlw	2
  3816  092B  0020               	movlb	0	; select bank0
  3817  092C  00B5               	movwf	??_nrf24l01Init+1
  3818  092D  3004               	movlw	4
  3819  092E  00B4               	movwf	??_nrf24l01Init
  3820  092F  30BA               	movlw	186
  3821  0930                     u3557:	
  3822  0930  0B89               	decfsz	9,f
  3823  0931  2930               	goto	u3557
  3824  0932  0BB4               	decfsz	??_nrf24l01Init,f
  3825  0933  2930               	goto	u3557
  3826  0934  0BB5               	decfsz	??_nrf24l01Init+1,f
  3827  0935  2930               	goto	u3557
  3828  0936  0000               	nop
  3829                           
  3830                           ;nrf24l01.c: 460: nrf24l01CEHigh();
  3831  0937  3196  26BA         	fcall	_nrf24l01CEHigh
  3832  0939  0008               	return
  3833  093A                     __end_of_nrf24l01Init:	
  3834                           
  3835                           	psect	text3
  3836  17E4                     __ptext3:	
  3837 ;; *************** function _nrf24l01InterfaceInit *****************
  3838 ;; Defined at:
  3839 ;;		line 28 in file "interface.c"
  3840 ;; Parameters:    Size  Location     Type
  3841 ;;		None
  3842 ;; Auto vars:     Size  Location     Type
  3843 ;;		None
  3844 ;; Return value:  Size  Location     Type
  3845 ;;                  1    wreg      void 
  3846 ;; Registers used:
  3847 ;;		wreg, status,2, status,0
  3848 ;; Tracked objects:
  3849 ;;		On entry : 0/0
  3850 ;;		On exit  : 0/0
  3851 ;;		Unchanged: 0/0
  3852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3857 ;;Total ram usage:        0 bytes
  3858 ;; Hardware stack levels used:    1
  3859 ;; Hardware stack levels required when called:    7
  3860 ;; This function calls:
  3861 ;;		Nothing
  3862 ;; This function is called by:
  3863 ;;		_nrf24l01Init
  3864 ;; This function uses a non-reentrant model
  3865 ;;
  3866                           
  3867                           
  3868                           ;psect for function _nrf24l01InterfaceInit
  3869  17E4                     _nrf24l01InterfaceInit:	
  3870                           
  3871                           ;interface.c: 30: TRISAbits.TRISA0 = 0;
  3872                           
  3873                           ;incstack = 0
  3874                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3875  17E4  0021               	movlb	1	; select bank1
  3876  17E5  100C               	bcf	12,0	;volatile
  3877                           
  3878                           ;interface.c: 31: TRISAbits.TRISA1 = 0;
  3879  17E6  108C               	bcf	12,1	;volatile
  3880                           
  3881                           ;interface.c: 33: TRISCbits.TRISC1 = 1;
  3882  17E7  148E               	bsf	14,1	;volatile
  3883                           
  3884                           ;interface.c: 34: TRISCbits.TRISC2 = 0;
  3885  17E8  110E               	bcf	14,2	;volatile
  3886                           
  3887                           ;interface.c: 35: TRISCbits.TRISC0 = 0;
  3888  17E9  100E               	bcf	14,0	;volatile
  3889                           
  3890                           ;interface.c: 37: SSP1CON1bits.SSPEN = 0;
  3891  17EA  0024               	movlb	4	; select bank4
  3892  17EB  1295               	bcf	21,5	;volatile
  3893                           
  3894                           ;interface.c: 39: RC1PPSbits.RC1PPS = 0b10001;
  3895  17EC  003D               	movlb	29	; select bank29
  3896  17ED  0821               	movf	33,w	;volatile
  3897  17EE  39E0               	andlw	-32
  3898  17EF  3811               	iorlw	17
  3899  17F0  00A1               	movwf	33	;volatile
  3900                           
  3901                           ;interface.c: 40: RC2PPSbits.RC2PPS = 0b11001;
  3902  17F1  0822               	movf	34,w	;volatile
  3903  17F2  39E0               	andlw	-32
  3904  17F3  3819               	iorlw	25
  3905  17F4  00A2               	movwf	34	;volatile
  3906                           
  3907                           ;interface.c: 41: RC0PPSbits.RC0PPS = 0b11000;
  3908  17F5  0820               	movf	32,w	;volatile
  3909  17F6  39E0               	andlw	-32
  3910  17F7  3818               	iorlw	24
  3911  17F8  00A0               	movwf	32	;volatile
  3912                           
  3913                           ;interface.c: 43: SSP1CON1bits.CKP = 0;
  3914  17F9  0024               	movlb	4	; select bank4
  3915  17FA  1215               	bcf	21,4	;volatile
  3916                           
  3917                           ;interface.c: 44: SSP1STATbits.CKE = 1;
  3918  17FB  1714               	bsf	20,6	;volatile
  3919                           
  3920                           ;interface.c: 45: SSP1CON1bits.SSPM = 0b0000;
  3921  17FC  30F0               	movlw	-16
  3922  17FD  0595               	andwf	21,f	;volatile
  3923                           
  3924                           ;interface.c: 47: SSP1CON1bits.SSPEN = 1;
  3925  17FE  1695               	bsf	21,5	;volatile
  3926  17FF  0008               	return
  3927  1800                     __end_of_nrf24l01InterfaceInit:	
  3928                           
  3929                           	psect	text4
  3930  032A                     __ptext4:	
  3931 ;; *************** function _nrf24l01InitRegisters *****************
  3932 ;; Defined at:
  3933 ;;		line 343 in file "nrf24l01.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;		None
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;  i               2   18[BANK0 ] unsigned int 
  3938 ;;  config          1   17[BANK0 ] struct .
  3939 ;;  DynPD           1   16[BANK0 ] struct .
  3940 ;;  enAA            1   15[BANK0 ] struct .
  3941 ;;  status          1   14[BANK0 ] struct .
  3942 ;;  rfSetup         1   13[BANK0 ] struct .
  3943 ;;  feature         1   12[BANK0 ] struct .
  3944 ;;  setupAW         1   11[BANK0 ] struct .
  3945 ;;  channel         1   10[BANK0 ] struct .
  3946 ;; Return value:  Size  Location     Type
  3947 ;;                  1    wreg      void 
  3948 ;; Registers used:
  3949 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3950 ;; Tracked objects:
  3951 ;;		On entry : 0/0
  3952 ;;		On exit  : 0/0
  3953 ;;		Unchanged: 0/0
  3954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3956 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3957 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3958 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3959 ;;Total ram usage:       12 bytes
  3960 ;; Hardware stack levels used:    1
  3961 ;; Hardware stack levels required when called:   11
  3962 ;; This function calls:
  3963 ;;		___bmul
  3964 ;;		_nrf24l01SPIEnd
  3965 ;;		_nrf24l01SPISend
  3966 ;;		_nrf24l01SPIStart
  3967 ;;		_nrf24l01Send
  3968 ;;		_nrf24l01SetRXPipe
  3969 ;;		_nrf24l01SetTXPipe
  3970 ;; This function is called by:
  3971 ;;		_nrf24l01Init
  3972 ;; This function uses a non-reentrant model
  3973 ;;
  3974                           
  3975                           
  3976                           ;psect for function _nrf24l01InitRegisters
  3977  032A                     _nrf24l01InitRegisters:	
  3978                           
  3979                           ;nrf24l01.c: 345: n_CONFIG_t config;;nrf24l01.c: 347: config.PWR_UP = 0;
  3980                           
  3981                           ;incstack = 0
  3982                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3983  032A  0020               	movlb	0	; select bank0
  3984  032B  10B1               	bcf	nrf24l01InitRegisters@config,1
  3985                           
  3986                           ;nrf24l01.c: 348: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3987  032C  0831               	movf	nrf24l01InitRegisters@config,w
  3988  032D  00A8               	movwf	??_nrf24l01InitRegisters
  3989  032E  0828               	movf	??_nrf24l01InitRegisters,w
  3990  032F  00A1               	movwf	nrf24l01Send@data
  3991  0330  3020               	movlw	32
  3992  0331  3188  2090  3183   	fcall	_nrf24l01Send
  3993                           
  3994                           ;nrf24l01.c: 350: n_SETUP_AW_t setupAW;;nrf24l01.c: 351: setupAW.byte = 0x00;
  3995  0334  0020               	movlb	0	; select bank0
  3996  0335  01AB               	clrf	nrf24l01InitRegisters@setupAW
  3997                           
  3998                           ;nrf24l01.c: 352: setupAW.AW = 0b11;
  3999  0336  3003               	movlw	3
  4000  0337  04AB               	iorwf	nrf24l01InitRegisters@setupAW,f
  4001                           
  4002                           ;nrf24l01.c: 353: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x02, setupAW.byte);
  4003  0338  082B               	movf	nrf24l01InitRegisters@setupAW,w
  4004  0339  00A8               	movwf	??_nrf24l01InitRegisters
  4005  033A  0828               	movf	??_nrf24l01InitRegisters,w
  4006  033B  00A1               	movwf	nrf24l01Send@data
  4007  033C  3022               	movlw	34
  4008  033D  3188  2090  3183   	fcall	_nrf24l01Send
  4009                           
  4010                           ;nrf24l01.c: 356: n_RF_CH_t channel;;nrf24l01.c: 357: channel.RF_CH = 2;
  4011  0340  0020               	movlb	0	; select bank0
  4012  0341  082A               	movf	nrf24l01InitRegisters@channel,w
  4013  0342  3980               	andlw	-128
  4014  0343  3802               	iorlw	2
  4015  0344  00AA               	movwf	nrf24l01InitRegisters@channel
  4016                           
  4017                           ;nrf24l01.c: 358: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  4018  0345  082A               	movf	nrf24l01InitRegisters@channel,w
  4019  0346  00A8               	movwf	??_nrf24l01InitRegisters
  4020  0347  0828               	movf	??_nrf24l01InitRegisters,w
  4021  0348  00A1               	movwf	nrf24l01Send@data
  4022  0349  3025               	movlw	37
  4023  034A  3188  2090  3183   	fcall	_nrf24l01Send
  4024                           
  4025                           ;nrf24l01.c: 361: n_RF_SETUP_t rfSetup;;nrf24l01.c: 362: rfSetup.byte = 0x00;
  4026  034D  0020               	movlb	0	; select bank0
  4027  034E  01AD               	clrf	nrf24l01InitRegisters@rfSetup
  4028                           
  4029                           ;nrf24l01.c: 363: rfSetup.RF_DR_LOW = 0;
  4030  034F  12AD               	bcf	nrf24l01InitRegisters@rfSetup,5
  4031                           
  4032                           ;nrf24l01.c: 364: rfSetup.RF_DR_HIGH = 1;
  4033  0350  15AD               	bsf	nrf24l01InitRegisters@rfSetup,3
  4034                           
  4035                           ;nrf24l01.c: 365: rfSetup.RF_PWR = 3;
  4036  0351  3006               	movlw	6
  4037  0352  04AD               	iorwf	nrf24l01InitRegisters@rfSetup,f
  4038                           
  4039                           ;nrf24l01.c: 366: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  4040  0353  082D               	movf	nrf24l01InitRegisters@rfSetup,w
  4041  0354  00A8               	movwf	??_nrf24l01InitRegisters
  4042  0355  0828               	movf	??_nrf24l01InitRegisters,w
  4043  0356  00A1               	movwf	nrf24l01Send@data
  4044  0357  3026               	movlw	38
  4045  0358  3188  2090  3183   	fcall	_nrf24l01Send
  4046                           
  4047                           ;nrf24l01.c: 369: nrf24l01SetRXPipe(0xFF);
  4048  035B  30FF               	movlw	255
  4049  035C  3188  20D1  3183   	fcall	_nrf24l01SetRXPipe
  4050                           
  4051                           ;nrf24l01.c: 372: n_EN_AA_t enAA;;nrf24l01.c: 373: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  4052  035F  0020               	movlb	0	; select bank0
  4053  0360  01A1               	clrf	nrf24l01Send@data
  4054  0361  3001               	movlw	1
  4055  0362  3188  2090  3183   	fcall	_nrf24l01Send
  4056  0365  0020               	movlb	0	; select bank0
  4057  0366  00A8               	movwf	??_nrf24l01InitRegisters
  4058  0367  0828               	movf	??_nrf24l01InitRegisters,w
  4059  0368  00AF               	movwf	nrf24l01InitRegisters@enAA
  4060                           
  4061                           ;nrf24l01.c: 374: enAA.ENAA_P0 = 0;
  4062  0369  102F               	bcf	nrf24l01InitRegisters@enAA,0
  4063                           
  4064                           ;nrf24l01.c: 375: enAA.ENAA_P1 = 0;
  4065  036A  10AF               	bcf	nrf24l01InitRegisters@enAA,1
  4066                           
  4067                           ;nrf24l01.c: 376: enAA.ENAA_P2 = 0;
  4068  036B  112F               	bcf	nrf24l01InitRegisters@enAA,2
  4069                           
  4070                           ;nrf24l01.c: 377: enAA.ENAA_P3 = 0;
  4071  036C  11AF               	bcf	nrf24l01InitRegisters@enAA,3
  4072                           
  4073                           ;nrf24l01.c: 378: enAA.ENAA_P4 = 0;
  4074  036D  122F               	bcf	nrf24l01InitRegisters@enAA,4
  4075                           
  4076                           ;nrf24l01.c: 379: enAA.ENAA_P5 = 0;
  4077  036E  12AF               	bcf	nrf24l01InitRegisters@enAA,5
  4078                           
  4079                           ;nrf24l01.c: 380: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  4080  036F  082F               	movf	nrf24l01InitRegisters@enAA,w
  4081  0370  00A8               	movwf	??_nrf24l01InitRegisters
  4082  0371  0828               	movf	??_nrf24l01InitRegisters,w
  4083  0372  00A1               	movwf	nrf24l01Send@data
  4084  0373  3021               	movlw	33
  4085  0374  3188  2090  3183   	fcall	_nrf24l01Send
  4086                           
  4087                           ;nrf24l01.c: 384: n_FEATURE_t feature;;nrf24l01.c: 385: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  4088  0377  0020               	movlb	0	; select bank0
  4089  0378  01A1               	clrf	nrf24l01Send@data
  4090  0379  301D               	movlw	29
  4091  037A  3188  2090  3183   	fcall	_nrf24l01Send
  4092  037D  0020               	movlb	0	; select bank0
  4093  037E  00A8               	movwf	??_nrf24l01InitRegisters
  4094  037F  0828               	movf	??_nrf24l01InitRegisters,w
  4095  0380  00AC               	movwf	nrf24l01InitRegisters@feature
  4096                           
  4097                           ;nrf24l01.c: 386: feature.EN_DPL = 1;
  4098  0381  152C               	bsf	nrf24l01InitRegisters@feature,2
  4099                           
  4100                           ;nrf24l01.c: 387: feature.EN_DYN_ACK = 1;
  4101  0382  142C               	bsf	nrf24l01InitRegisters@feature,0
  4102                           
  4103                           ;nrf24l01.c: 388: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  4104  0383  082C               	movf	nrf24l01InitRegisters@feature,w
  4105  0384  00A8               	movwf	??_nrf24l01InitRegisters
  4106  0385  0828               	movf	??_nrf24l01InitRegisters,w
  4107  0386  00A1               	movwf	nrf24l01Send@data
  4108  0387  303D               	movlw	61
  4109  0388  3188  2090  3183   	fcall	_nrf24l01Send
  4110                           
  4111                           ;nrf24l01.c: 390: n_DYNPD_t DynPD;;nrf24l01.c: 391: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  4112  038B  0020               	movlb	0	; select bank0
  4113  038C  01A1               	clrf	nrf24l01Send@data
  4114  038D  301C               	movlw	28
  4115  038E  3188  2090  3183   	fcall	_nrf24l01Send
  4116  0391  0020               	movlb	0	; select bank0
  4117  0392  00A8               	movwf	??_nrf24l01InitRegisters
  4118  0393  0828               	movf	??_nrf24l01InitRegisters,w
  4119  0394  00B0               	movwf	nrf24l01InitRegisters@DynPD
  4120                           
  4121                           ;nrf24l01.c: 392: DynPD.DPL_P0 = 1;
  4122  0395  1430               	bsf	nrf24l01InitRegisters@DynPD,0
  4123                           
  4124                           ;nrf24l01.c: 393: DynPD.DPL_P1 = 1;
  4125  0396  14B0               	bsf	nrf24l01InitRegisters@DynPD,1
  4126                           
  4127                           ;nrf24l01.c: 394: DynPD.DPL_P2 = 1;
  4128  0397  1530               	bsf	nrf24l01InitRegisters@DynPD,2
  4129                           
  4130                           ;nrf24l01.c: 395: DynPD.DPL_P3 = 1;
  4131  0398  15B0               	bsf	nrf24l01InitRegisters@DynPD,3
  4132                           
  4133                           ;nrf24l01.c: 396: DynPD.DPL_P4 = 1;
  4134  0399  1630               	bsf	nrf24l01InitRegisters@DynPD,4
  4135                           
  4136                           ;nrf24l01.c: 397: DynPD.DPL_P5 = 1;
  4137  039A  16B0               	bsf	nrf24l01InitRegisters@DynPD,5
  4138                           
  4139                           ;nrf24l01.c: 398: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  4140  039B  0830               	movf	nrf24l01InitRegisters@DynPD,w
  4141  039C  00A8               	movwf	??_nrf24l01InitRegisters
  4142  039D  0828               	movf	??_nrf24l01InitRegisters,w
  4143  039E  00A1               	movwf	nrf24l01Send@data
  4144  039F  303C               	movlw	60
  4145  03A0  3188  2090  3183   	fcall	_nrf24l01Send
  4146                           
  4147                           ;nrf24l01.c: 401: unsigned int i;;nrf24l01.c: 402: for (i = 0; i < 6; i++){
  4148  03A3  0020               	movlb	0	; select bank0
  4149  03A4  01B2               	clrf	nrf24l01InitRegisters@i
  4150  03A5  01B3               	clrf	nrf24l01InitRegisters@i+1
  4151  03A6  3000               	movlw	0
  4152  03A7  0233               	subwf	nrf24l01InitRegisters@i+1,w
  4153  03A8  3006               	movlw	6
  4154  03A9  1903               	skipnz
  4155  03AA  0232               	subwf	nrf24l01InitRegisters@i,w
  4156  03AB  1803               	btfsc	3,0
  4157  03AC  2C06               	goto	l3433
  4158  03AD                     l3419:	
  4159                           
  4160                           ;nrf24l01.c: 404: nrf24l01SPIStart();
  4161  03AD  3196  26DB  3183   	fcall	_nrf24l01SPIStart
  4162                           
  4163                           ;nrf24l01.c: 405: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  4164  03B0  0020               	movlb	0	; select bank0
  4165  03B1  0832               	movf	nrf24l01InitRegisters@i,w
  4166  03B2  3E0A               	addlw	10
  4167  03B3  3820               	iorlw	32
  4168  03B4  3196  26EC  3183   	fcall	_nrf24l01SPISend
  4169                           
  4170                           ;nrf24l01.c: 407: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  4171  03B7  3028               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4172  03B8  0084               	movwf	4
  4173  03B9  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4174  03BA  0085               	movwf	5
  4175  03BB  0800               	movf	0,w	;code access
  4176  03BC  0020               	movlb	0	; select bank0
  4177  03BD  00A8               	movwf	??_nrf24l01InitRegisters
  4178  03BE  0832               	movf	nrf24l01InitRegisters@i,w
  4179  03BF  00A9               	movwf	??_nrf24l01InitRegisters+1
  4180  03C0  0829               	movf	??_nrf24l01InitRegisters+1,w
  4181  03C1  00A1               	movwf	___bmul@multiplicand
  4182  03C2  303E               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4183  03C3  0084               	movwf	4
  4184  03C4  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4185  03C5  0085               	movwf	5
  4186  03C6  0800               	movf	0,w	;code access
  4187  03C7  3197  2708  3183   	fcall	___bmul
  4188  03CA  0020               	movlb	0	; select bank0
  4189  03CB  0728               	addwf	??_nrf24l01InitRegisters,w
  4190  03CC  3196  26EC  3183   	fcall	_nrf24l01SPISend
  4191                           
  4192                           ;nrf24l01.c: 409: if (i < 2){
  4193  03CF  3000               	movlw	0
  4194  03D0  0020               	movlb	0	; select bank0
  4195  03D1  0233               	subwf	nrf24l01InitRegisters@i+1,w
  4196  03D2  3002               	movlw	2
  4197  03D3  1903               	skipnz
  4198  03D4  0232               	subwf	nrf24l01InitRegisters@i,w
  4199  03D5  1803               	skipnc
  4200  03D6  2BF7               	goto	l3427
  4201                           
  4202                           ;nrf24l01.c: 410: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4203  03D7  3027               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4204  03D8  0084               	movwf	4
  4205  03D9  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4206  03DA  0085               	movwf	5
  4207  03DB  0800               	movf	0,w	;code access
  4208  03DC  3196  26EC  3183   	fcall	_nrf24l01SPISend
  4209                           
  4210                           ;nrf24l01.c: 411: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4211  03DF  3026               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4212  03E0  0084               	movwf	4
  4213  03E1  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4214  03E2  0085               	movwf	5
  4215  03E3  0800               	movf	0,w	;code access
  4216  03E4  3196  26EC  3183   	fcall	_nrf24l01SPISend
  4217                           
  4218                           ;nrf24l01.c: 412: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4219  03E7  3025               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4220  03E8  0084               	movwf	4
  4221  03E9  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4222  03EA  0085               	movwf	5
  4223  03EB  0800               	movf	0,w	;code access
  4224  03EC  3196  26EC  3183   	fcall	_nrf24l01SPISend
  4225                           
  4226                           ;nrf24l01.c: 413: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4227  03EF  3024               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4228  03F0  0084               	movwf	4
  4229  03F1  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4230  03F2  0085               	movwf	5
  4231  03F3  0800               	movf	0,w	;code access
  4232  03F4  3196  26EC  3183   	fcall	_nrf24l01SPISend
  4233  03F7                     l3427:	
  4234                           
  4235                           ;nrf24l01.c: 414: };nrf24l01.c: 416: nrf24l01SPIEnd();
  4236  03F7  3196  26CC  3183   	fcall	_nrf24l01SPIEnd
  4237  03FA  3001               	movlw	1
  4238  03FB  0020               	movlb	0	; select bank0
  4239  03FC  07B2               	addwf	nrf24l01InitRegisters@i,f
  4240  03FD  3000               	movlw	0
  4241  03FE  3DB3               	addwfc	nrf24l01InitRegisters@i+1,f
  4242  03FF  3000               	movlw	0
  4243  0400  0233               	subwf	nrf24l01InitRegisters@i+1,w
  4244  0401  3006               	movlw	6
  4245  0402  1903               	skipnz
  4246  0403  0232               	subwf	nrf24l01InitRegisters@i,w
  4247  0404  1C03               	skipc
  4248  0405  2BAD               	goto	l3419
  4249  0406                     l3433:	
  4250                           
  4251                           ;nrf24l01.c: 417: };nrf24l01.c: 419: nrf24l01SetTXPipe(0);
  4252  0406  3000               	movlw	0
  4253  0407  318B  23D4  3183   	fcall	_nrf24l01SetTXPipe
  4254                           
  4255                           ;nrf24l01.c: 423: n_STATUS_t status;;nrf24l01.c: 424: status.byte = 0x00;
  4256  040A  0020               	movlb	0	; select bank0
  4257  040B  01AE               	clrf	nrf24l01InitRegisters@status
  4258                           
  4259                           ;nrf24l01.c: 425: status.RX_DR = 1;
  4260  040C  172E               	bsf	nrf24l01InitRegisters@status,6
  4261                           
  4262                           ;nrf24l01.c: 426: status.TX_DS = 1;
  4263  040D  16AE               	bsf	nrf24l01InitRegisters@status,5
  4264                           
  4265                           ;nrf24l01.c: 427: status.MAX_RT = 1;
  4266  040E  162E               	bsf	nrf24l01InitRegisters@status,4
  4267                           
  4268                           ;nrf24l01.c: 428: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.byte);
  4269  040F  082E               	movf	nrf24l01InitRegisters@status,w
  4270  0410  00A8               	movwf	??_nrf24l01InitRegisters
  4271  0411  0828               	movf	??_nrf24l01InitRegisters,w
  4272  0412  00A1               	movwf	nrf24l01Send@data
  4273  0413  3027               	movlw	39
  4274  0414  3188  2090  3183   	fcall	_nrf24l01Send
  4275                           
  4276                           ;nrf24l01.c: 431: nrf24l01Send((unsigned) 0b11100001, 0);
  4277  0417  0020               	movlb	0	; select bank0
  4278  0418  01A1               	clrf	nrf24l01Send@data
  4279  0419  30E1               	movlw	225
  4280  041A  3188  2090  3183   	fcall	_nrf24l01Send
  4281                           
  4282                           ;nrf24l01.c: 432: nrf24l01Send((unsigned) 0b11100010, 0);
  4283  041D  0020               	movlb	0	; select bank0
  4284  041E  01A1               	clrf	nrf24l01Send@data
  4285  041F  30E2               	movlw	226
  4286  0420  3188  2090  3183   	fcall	_nrf24l01Send
  4287                           
  4288                           ;nrf24l01.c: 435: config.PRIM_RX = 1;
  4289  0423  0020               	movlb	0	; select bank0
  4290  0424  1431               	bsf	nrf24l01InitRegisters@config,0
  4291                           
  4292                           ;nrf24l01.c: 436: config.EN_CRC = 1;
  4293  0425  15B1               	bsf	nrf24l01InitRegisters@config,3
  4294                           
  4295                           ;nrf24l01.c: 437: config.CRCO = 1;
  4296  0426  1531               	bsf	nrf24l01InitRegisters@config,2
  4297                           
  4298                           ;nrf24l01.c: 438: config.PWR_UP = 1;
  4299  0427  14B1               	bsf	nrf24l01InitRegisters@config,1
  4300                           
  4301                           ;nrf24l01.c: 439: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  4302  0428  0831               	movf	nrf24l01InitRegisters@config,w
  4303  0429  00A8               	movwf	??_nrf24l01InitRegisters
  4304  042A  0828               	movf	??_nrf24l01InitRegisters,w
  4305  042B  00A1               	movwf	nrf24l01Send@data
  4306  042C  3020               	movlw	32
  4307  042D  3188  2090         	fcall	_nrf24l01Send
  4308  042F  0008               	return
  4309  0430                     __end_of_nrf24l01InitRegisters:	
  4310                           
  4311                           	psect	text5
  4312  0BD4                     __ptext5:	
  4313 ;; *************** function _nrf24l01SetTXPipe *****************
  4314 ;; Defined at:
  4315 ;;		line 309 in file "nrf24l01.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;  pipe            1    wreg     unsigned char 
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;  pipe            1    7[BANK0 ] unsigned char 
  4320 ;; Return value:  Size  Location     Type
  4321 ;;                  1    wreg      void 
  4322 ;; Registers used:
  4323 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4324 ;; Tracked objects:
  4325 ;;		On entry : 0/0
  4326 ;;		On exit  : 0/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4330 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4331 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4332 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4333 ;;Total ram usage:        3 bytes
  4334 ;; Hardware stack levels used:    1
  4335 ;; Hardware stack levels required when called:    9
  4336 ;; This function calls:
  4337 ;;		___bmul
  4338 ;;		_nrf24l01SPIEnd
  4339 ;;		_nrf24l01SPISend
  4340 ;;		_nrf24l01SPIStart
  4341 ;; This function is called by:
  4342 ;;		_main
  4343 ;;		_nrf24l01InitRegisters
  4344 ;;		_nrf24l01SendACK
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           
  4349                           ;psect for function _nrf24l01SetTXPipe
  4350  0BD4                     _nrf24l01SetTXPipe:	
  4351                           
  4352                           ;incstack = 0
  4353                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4354                           ;nrf24l01SetTXPipe@pipe stored from wreg
  4355  0BD4  0020               	movlb	0	; select bank0
  4356  0BD5  00A7               	movwf	nrf24l01SetTXPipe@pipe
  4357                           
  4358                           ;nrf24l01.c: 312: nrf24l01SPIStart();
  4359  0BD6  3196  26DB  318B   	fcall	_nrf24l01SPIStart
  4360                           
  4361                           ;nrf24l01.c: 313: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  4362  0BD9  3030               	movlw	48
  4363  0BDA  3196  26EC  318B   	fcall	_nrf24l01SPISend
  4364                           
  4365                           ;nrf24l01.c: 314: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  4366  0BDD  3028               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4367  0BDE  0084               	movwf	4
  4368  0BDF  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4369  0BE0  0085               	movwf	5
  4370  0BE1  0800               	movf	0,w	;code access
  4371  0BE2  0020               	movlb	0	; select bank0
  4372  0BE3  00A5               	movwf	??_nrf24l01SetTXPipe
  4373  0BE4  303E               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4374  0BE5  0084               	movwf	4
  4375  0BE6  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4376  0BE7  0085               	movwf	5
  4377  0BE8  0800               	movf	0,w	;code access
  4378  0BE9  00A6               	movwf	??_nrf24l01SetTXPipe+1
  4379  0BEA  0826               	movf	??_nrf24l01SetTXPipe+1,w
  4380  0BEB  00A1               	movwf	___bmul@multiplicand
  4381  0BEC  0827               	movf	nrf24l01SetTXPipe@pipe,w
  4382  0BED  3197  2708  318B   	fcall	___bmul
  4383  0BF0  0020               	movlb	0	; select bank0
  4384  0BF1  0725               	addwf	??_nrf24l01SetTXPipe,w
  4385  0BF2  3196  26EC  318B   	fcall	_nrf24l01SPISend
  4386                           
  4387                           ;nrf24l01.c: 315: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4388  0BF5  3027               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4389  0BF6  0084               	movwf	4
  4390  0BF7  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4391  0BF8  0085               	movwf	5
  4392  0BF9  0800               	movf	0,w	;code access
  4393  0BFA  3196  26EC  318B   	fcall	_nrf24l01SPISend
  4394                           
  4395                           ;nrf24l01.c: 316: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4396  0BFD  3026               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4397  0BFE  0084               	movwf	4
  4398  0BFF  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4399  0C00  0085               	movwf	5
  4400  0C01  0800               	movf	0,w	;code access
  4401  0C02  3196  26EC  318B   	fcall	_nrf24l01SPISend
  4402                           
  4403                           ;nrf24l01.c: 317: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4404  0C05  3025               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4405  0C06  0084               	movwf	4
  4406  0C07  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4407  0C08  0085               	movwf	5
  4408  0C09  0800               	movf	0,w	;code access
  4409  0C0A  3196  26EC  318B   	fcall	_nrf24l01SPISend
  4410                           
  4411                           ;nrf24l01.c: 318: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4412  0C0D  3024               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4413  0C0E  0084               	movwf	4
  4414  0C0F  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4415  0C10  0085               	movwf	5
  4416  0C11  0800               	movf	0,w	;code access
  4417  0C12  3196  26EC  318B   	fcall	_nrf24l01SPISend
  4418                           
  4419                           ;nrf24l01.c: 319: nrf24l01SPIEnd();
  4420  0C15  3196  26CC         	fcall	_nrf24l01SPIEnd
  4421  0C17  0008               	return
  4422  0C18                     __end_of_nrf24l01SetTXPipe:	
  4423                           
  4424                           	psect	text6
  4425  1708                     __ptext6:	
  4426 ;; *************** function ___bmul *****************
  4427 ;; Defined at:
  4428 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  4429 ;; Parameters:    Size  Location     Type
  4430 ;;  multiplier      1    wreg     unsigned char 
  4431 ;;  multiplicand    1    1[BANK0 ] unsigned char 
  4432 ;; Auto vars:     Size  Location     Type
  4433 ;;  multiplier      1    4[BANK0 ] unsigned char 
  4434 ;;  product         1    3[BANK0 ] unsigned char 
  4435 ;; Return value:  Size  Location     Type
  4436 ;;                  1    wreg      unsigned char 
  4437 ;; Registers used:
  4438 ;;		wreg, status,2, status,0
  4439 ;; Tracked objects:
  4440 ;;		On entry : 0/0
  4441 ;;		On exit  : 0/0
  4442 ;;		Unchanged: 0/0
  4443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4444 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4445 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4446 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4447 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4448 ;;Total ram usage:        4 bytes
  4449 ;; Hardware stack levels used:    1
  4450 ;; Hardware stack levels required when called:    7
  4451 ;; This function calls:
  4452 ;;		Nothing
  4453 ;; This function is called by:
  4454 ;;		_nrf24l01SetTXPipe
  4455 ;;		_nrf24l01InitRegisters
  4456 ;; This function uses a non-reentrant model
  4457 ;;
  4458                           
  4459                           
  4460                           ;psect for function ___bmul
  4461  1708                     ___bmul:	
  4462                           
  4463                           ;incstack = 0
  4464                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4465                           ;___bmul@multiplier stored from wreg
  4466  1708  0020               	movlb	0	; select bank0
  4467  1709  00A4               	movwf	___bmul@multiplier
  4468  170A  01A3               	clrf	___bmul@product
  4469  170B                     l2743:	
  4470  170B  1C24               	btfss	___bmul@multiplier,0
  4471  170C  2F11               	goto	l2747
  4472  170D  0821               	movf	___bmul@multiplicand,w
  4473  170E  00A2               	movwf	??___bmul
  4474  170F  0822               	movf	??___bmul,w
  4475  1710  07A3               	addwf	___bmul@product,f
  4476  1711                     l2747:	
  4477  1711  1003               	clrc
  4478  1712  0DA1               	rlf	___bmul@multiplicand,f
  4479  1713  1003               	clrc
  4480  1714  0CA4               	rrf	___bmul@multiplier,f
  4481  1715  0824               	movf	___bmul@multiplier,w
  4482  1716  1D03               	btfss	3,2
  4483  1717  2F0B               	goto	l2743
  4484  1718  0823               	movf	___bmul@product,w
  4485  1719  0008               	return
  4486  171A                     __end_of___bmul:	
  4487                           
  4488                           	psect	text7
  4489  08D1                     __ptext7:	
  4490 ;; *************** function _nrf24l01SetRXPipe *****************
  4491 ;; Defined at:
  4492 ;;		line 322 in file "nrf24l01.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;  pipe            1    wreg     unsigned char 
  4495 ;; Auto vars:     Size  Location     Type
  4496 ;;  pipe            1    6[BANK0 ] unsigned char 
  4497 ;;  enRXAddr        1    7[BANK0 ] struct .
  4498 ;; Return value:  Size  Location     Type
  4499 ;;                  1    wreg      void 
  4500 ;; Registers used:
  4501 ;;		wreg, status,2, status,0, pclath, cstack
  4502 ;; Tracked objects:
  4503 ;;		On entry : 0/0
  4504 ;;		On exit  : 0/0
  4505 ;;		Unchanged: 0/0
  4506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4508 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4509 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4510 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4511 ;;Total ram usage:        4 bytes
  4512 ;; Hardware stack levels used:    1
  4513 ;; Hardware stack levels required when called:   10
  4514 ;; This function calls:
  4515 ;;		_nrf24l01Send
  4516 ;; This function is called by:
  4517 ;;		_main
  4518 ;;		_nrf24l01InitRegisters
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           
  4523                           ;psect for function _nrf24l01SetRXPipe
  4524  08D1                     _nrf24l01SetRXPipe:	
  4525                           
  4526                           ;incstack = 0
  4527                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  4528                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4529  08D1  0020               	movlb	0	; select bank0
  4530  08D2  00A6               	movwf	nrf24l01SetRXPipe@pipe
  4531                           
  4532                           ;nrf24l01.c: 324: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 326: if (pipe > 5){
  4533  08D3  3006               	movlw	6
  4534  08D4  0226               	subwf	nrf24l01SetRXPipe@pipe,w
  4535  08D5  1C03               	skipc
  4536  08D6  28DE               	goto	l370
  4537                           
  4538                           ;nrf24l01.c: 327: enRXAddr.ERX_P0 = 1;
  4539  08D7  1427               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4540                           
  4541                           ;nrf24l01.c: 328: enRXAddr.ERX_P1 = 1;
  4542  08D8  14A7               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4543                           
  4544                           ;nrf24l01.c: 329: enRXAddr.ERX_P2 = 1;
  4545  08D9  1527               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4546                           
  4547                           ;nrf24l01.c: 330: enRXAddr.ERX_P3 = 1;
  4548  08DA  15A7               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4549                           
  4550                           ;nrf24l01.c: 331: enRXAddr.ERX_P4 = 1;
  4551  08DB  1627               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4552                           
  4553                           ;nrf24l01.c: 332: enRXAddr.ERX_P5 = 1;
  4554  08DC  16A7               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4555                           
  4556                           ;nrf24l01.c: 333: }
  4557  08DD  28EA               	goto	l3043
  4558  08DE                     l370:	
  4559                           
  4560                           ;nrf24l01.c: 335: else{;nrf24l01.c: 336: enRXAddr.ERX_P0 = 1;
  4561  08DE  1427               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4562                           
  4563                           ;nrf24l01.c: 337: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4564  08DF  0827               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4565  08E0  00A4               	movwf	??_nrf24l01SetRXPipe
  4566  08E1  0A26               	incf	nrf24l01SetRXPipe@pipe,w
  4567  08E2  28E4               	goto	u2964
  4568  08E3                     u2965:	
  4569  08E3  35A4               	lslf	??_nrf24l01SetRXPipe,f
  4570  08E4                     u2964:	
  4571  08E4  0B89               	decfsz	9,f
  4572  08E5  28E3               	goto	u2965
  4573  08E6  0824               	movf	??_nrf24l01SetRXPipe,w
  4574  08E7  00A5               	movwf	??_nrf24l01SetRXPipe+1
  4575  08E8  0825               	movf	??_nrf24l01SetRXPipe+1,w
  4576  08E9  00A7               	movwf	nrf24l01SetRXPipe@enRXAddr
  4577  08EA                     l3043:	
  4578                           
  4579                           ;nrf24l01.c: 338: };nrf24l01.c: 340: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4580  08EA  0827               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4581  08EB  00A4               	movwf	??_nrf24l01SetRXPipe
  4582  08EC  0824               	movf	??_nrf24l01SetRXPipe,w
  4583  08ED  00A1               	movwf	nrf24l01Send@data
  4584  08EE  3022               	movlw	34
  4585  08EF  3188  2090         	fcall	_nrf24l01Send
  4586  08F1  0008               	return
  4587  08F2                     __end_of_nrf24l01SetRXPipe:	
  4588                           
  4589                           	psect	text8
  4590  0AA3                     __ptext8:	
  4591 ;; *************** function _nrf24l01GetPipe *****************
  4592 ;; Defined at:
  4593 ;;		line 185 in file "main.c"
  4594 ;; Parameters:    Size  Location     Type
  4595 ;;  name            1    wreg     PTR unsigned char 
  4596 ;;		 -> romData(19), 
  4597 ;; Auto vars:     Size  Location     Type
  4598 ;;  name            1   10[BANK0 ] PTR unsigned char 
  4599 ;;		 -> romData(19), 
  4600 ;;  i               1   11[BANK0 ] unsigned char 
  4601 ;;  pipe            1    9[BANK0 ] unsigned char 
  4602 ;; Return value:  Size  Location     Type
  4603 ;;                  1    wreg      unsigned char 
  4604 ;; Registers used:
  4605 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4606 ;; Tracked objects:
  4607 ;;		On entry : 0/0
  4608 ;;		On exit  : 0/0
  4609 ;;		Unchanged: 0/0
  4610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4612 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4613 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4614 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4615 ;;Total ram usage:        5 bytes
  4616 ;; Hardware stack levels used:    1
  4617 ;; Hardware stack levels required when called:    8
  4618 ;; This function calls:
  4619 ;;		___lwmod
  4620 ;;		_strlen
  4621 ;; This function is called by:
  4622 ;;		_main
  4623 ;; This function uses a non-reentrant model
  4624 ;;
  4625                           
  4626                           
  4627                           ;psect for function _nrf24l01GetPipe
  4628  0AA3                     _nrf24l01GetPipe:	
  4629                           
  4630                           ;incstack = 0
  4631                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4632                           ;nrf24l01GetPipe@name stored from wreg
  4633  0AA3  0020               	movlb	0	; select bank0
  4634  0AA4  00AA               	movwf	nrf24l01GetPipe@name
  4635                           
  4636                           ;main.c: 186: unsigned char pipe = 0;
  4637  0AA5  01A9               	clrf	nrf24l01GetPipe@pipe
  4638                           
  4639                           ;main.c: 187: unsigned char i = 0;
  4640  0AA6  01AB               	clrf	nrf24l01GetPipe@i
  4641                           
  4642                           ;main.c: 190: for (i = 0; i < strlen(name); i++){
  4643  0AA7  01AB               	clrf	nrf24l01GetPipe@i
  4644  0AA8                     l3581:	
  4645  0AA8  082A               	movf	nrf24l01GetPipe@name,w
  4646  0AA9  00A1               	movwf	strlen@s
  4647  0AAA  3001               	movlw	1
  4648  0AAB  00A2               	movwf	strlen@s+1
  4649  0AAC  3188  2051  318A   	fcall	_strlen
  4650  0AAF  0020               	movlb	0	; select bank0
  4651  0AB0  082B               	movf	nrf24l01GetPipe@i,w
  4652  0AB1  00A7               	movwf	??_nrf24l01GetPipe
  4653  0AB2  01A8               	clrf	??_nrf24l01GetPipe+1
  4654  0AB3  0822               	movf	?_strlen+1,w
  4655  0AB4  0228               	subwf	??_nrf24l01GetPipe+1,w
  4656  0AB5  1D03               	skipz
  4657  0AB6  2AB9               	goto	u3485
  4658  0AB7  0821               	movf	?_strlen,w
  4659  0AB8  0227               	subwf	??_nrf24l01GetPipe,w
  4660  0AB9                     u3485:	
  4661  0AB9  1803               	btfsc	3,0
  4662  0ABA  2ACB               	goto	l3583
  4663                           
  4664                           ;main.c: 191: pipe+= name[i];
  4665  0ABB  082B               	movf	nrf24l01GetPipe@i,w
  4666  0ABC  072A               	addwf	nrf24l01GetPipe@name,w
  4667  0ABD  00A7               	movwf	??_nrf24l01GetPipe
  4668  0ABE  0827               	movf	??_nrf24l01GetPipe,w
  4669  0ABF  0086               	movwf	6
  4670  0AC0  3001               	movlw	1	; select bank2/3
  4671  0AC1  0087               	movwf	7
  4672  0AC2  0801               	movf	1,w
  4673  0AC3  00A8               	movwf	??_nrf24l01GetPipe+1
  4674  0AC4  0828               	movf	??_nrf24l01GetPipe+1,w
  4675  0AC5  07A9               	addwf	nrf24l01GetPipe@pipe,f
  4676  0AC6  3001               	movlw	1
  4677  0AC7  00A7               	movwf	??_nrf24l01GetPipe
  4678  0AC8  0827               	movf	??_nrf24l01GetPipe,w
  4679  0AC9  07AB               	addwf	nrf24l01GetPipe@i,f
  4680  0ACA  2AA8               	goto	l3581
  4681  0ACB                     l3583:	
  4682                           
  4683                           ;main.c: 192: };main.c: 194: return (unsigned) pipe % 6;
  4684  0ACB  3006               	movlw	6
  4685  0ACC  00A1               	movwf	___lwmod@divisor
  4686  0ACD  3000               	movlw	0
  4687  0ACE  00A2               	movwf	___lwmod@divisor+1
  4688  0ACF  0829               	movf	nrf24l01GetPipe@pipe,w
  4689  0AD0  00A7               	movwf	??_nrf24l01GetPipe
  4690  0AD1  01A8               	clrf	??_nrf24l01GetPipe+1
  4691  0AD2  0827               	movf	??_nrf24l01GetPipe,w
  4692  0AD3  00A3               	movwf	___lwmod@dividend
  4693  0AD4  0828               	movf	??_nrf24l01GetPipe+1,w
  4694  0AD5  00A4               	movwf	___lwmod@dividend+1
  4695  0AD6  3189  21DD         	fcall	___lwmod
  4696  0AD8  0020               	movlb	0	; select bank0
  4697  0AD9  0821               	movf	?___lwmod,w
  4698  0ADA  0008               	return
  4699  0ADB                     __end_of_nrf24l01GetPipe:	
  4700                           
  4701                           	psect	text9
  4702  09DD                     __ptext9:	
  4703 ;; *************** function ___lwmod *****************
  4704 ;; Defined at:
  4705 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4706 ;; Parameters:    Size  Location     Type
  4707 ;;  divisor         2    1[BANK0 ] unsigned int 
  4708 ;;  dividend        2    3[BANK0 ] unsigned int 
  4709 ;; Auto vars:     Size  Location     Type
  4710 ;;  counter         1    6[BANK0 ] unsigned char 
  4711 ;; Return value:  Size  Location     Type
  4712 ;;                  2    1[BANK0 ] unsigned int 
  4713 ;; Registers used:
  4714 ;;		wreg, status,2, status,0
  4715 ;; Tracked objects:
  4716 ;;		On entry : 0/0
  4717 ;;		On exit  : 0/0
  4718 ;;		Unchanged: 0/0
  4719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4720 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4721 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4722 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4723 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4724 ;;Total ram usage:        6 bytes
  4725 ;; Hardware stack levels used:    1
  4726 ;; Hardware stack levels required when called:    7
  4727 ;; This function calls:
  4728 ;;		Nothing
  4729 ;; This function is called by:
  4730 ;;		_nrf24l01GetPipe
  4731 ;; This function uses a non-reentrant model
  4732 ;;
  4733                           
  4734                           
  4735                           ;psect for function ___lwmod
  4736  09DD                     ___lwmod:	
  4737                           
  4738                           ;incstack = 0
  4739                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4740  09DD  0020               	movlb	0	; select bank0
  4741  09DE  0821               	movf	___lwmod@divisor,w
  4742  09DF  0422               	iorwf	___lwmod@divisor+1,w
  4743  09E0  1903               	btfsc	3,2
  4744  09E1  2A05               	goto	l3477
  4745  09E2  01A6               	clrf	___lwmod@counter
  4746  09E3  0AA6               	incf	___lwmod@counter,f
  4747  09E4                     l3467:	
  4748  09E4  1BA2               	btfsc	___lwmod@divisor+1,7
  4749  09E5  29F0               	goto	l3469
  4750  09E6  3001               	movlw	1
  4751  09E7                     u3355:	
  4752  09E7  35A1               	lslf	___lwmod@divisor,f
  4753  09E8  0DA2               	rlf	___lwmod@divisor+1,f
  4754  09E9  0B89               	decfsz	9,f
  4755  09EA  29E7               	goto	u3355
  4756  09EB  3001               	movlw	1
  4757  09EC  00A5               	movwf	??___lwmod
  4758  09ED  0825               	movf	??___lwmod,w
  4759  09EE  07A6               	addwf	___lwmod@counter,f
  4760  09EF  29E4               	goto	l3467
  4761  09F0                     l3469:	
  4762  09F0  0822               	movf	___lwmod@divisor+1,w
  4763  09F1  0224               	subwf	___lwmod@dividend+1,w
  4764  09F2  1D03               	skipz
  4765  09F3  29F6               	goto	u3375
  4766  09F4  0821               	movf	___lwmod@divisor,w
  4767  09F5  0223               	subwf	___lwmod@dividend,w
  4768  09F6                     u3375:	
  4769  09F6  1C03               	skipc
  4770  09F7  29FC               	goto	l3473
  4771  09F8  0821               	movf	___lwmod@divisor,w
  4772  09F9  02A3               	subwf	___lwmod@dividend,f
  4773  09FA  0822               	movf	___lwmod@divisor+1,w
  4774  09FB  3BA4               	subwfb	___lwmod@dividend+1,f
  4775  09FC                     l3473:	
  4776  09FC  3001               	movlw	1
  4777  09FD                     u3385:	
  4778  09FD  36A2               	lsrf	___lwmod@divisor+1,f
  4779  09FE  0CA1               	rrf	___lwmod@divisor,f
  4780  09FF  0B89               	decfsz	9,f
  4781  0A00  29FD               	goto	u3385
  4782  0A01  3001               	movlw	1
  4783  0A02  02A6               	subwf	___lwmod@counter,f
  4784  0A03  1D03               	btfss	3,2
  4785  0A04  29F0               	goto	l3469
  4786  0A05                     l3477:	
  4787  0A05  0824               	movf	___lwmod@dividend+1,w
  4788  0A06  00A2               	movwf	?___lwmod+1
  4789  0A07  0823               	movf	___lwmod@dividend,w
  4790  0A08  00A1               	movwf	?___lwmod
  4791  0A09  0008               	return
  4792  0A0A                     __end_of___lwmod:	
  4793                           
  4794                           	psect	text10
  4795  0203                     __ptext10:	
  4796 ;; *************** function _loop *****************
  4797 ;; Defined at:
  4798 ;;		line 117 in file "main.c"
  4799 ;; Parameters:    Size  Location     Type
  4800 ;;		None
  4801 ;; Auto vars:     Size  Location     Type
  4802 ;;  packet         33   12[BANK2 ] struct .
  4803 ;;  ta              3    6[BANK2 ] float 
  4804 ;;  vt              3    3[BANK2 ] float 
  4805 ;;  vOut            3    0[BANK2 ] float 
  4806 ;; Return value:  Size  Location     Type
  4807 ;;                  1    wreg      void 
  4808 ;; Registers used:
  4809 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4810 ;; Tracked objects:
  4811 ;;		On entry : 0/0
  4812 ;;		On exit  : 0/0
  4813 ;;		Unchanged: 0/0
  4814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4816 ;;      Locals:         0       0       0      45       0       0       0       0       0       0       0       0       
      +0       0
  4817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4818 ;;      Totals:         0       0       0      45       0       0       0       0       0       0       0       0       
      +0       0
  4819 ;;Total ram usage:       45 bytes
  4820 ;; Hardware stack levels used:    1
  4821 ;; Hardware stack levels required when called:   12
  4822 ;; This function calls:
  4823 ;;		___ftadd
  4824 ;;		___ftdiv
  4825 ;;		___ftmul
  4826 ;;		___ftneg
  4827 ;;		_checkTXPower
  4828 ;;		_getADCValue
  4829 ;;		_nrf24l01SendPacket
  4830 ;;		_setMessage
  4831 ;;		_sleep
  4832 ;; This function is called by:
  4833 ;;		_main
  4834 ;; This function uses a non-reentrant model
  4835 ;;
  4836                           
  4837                           
  4838                           ;psect for function _loop
  4839  0203                     _loop:	
  4840                           
  4841                           ;main.c: 119: nrf24l01Packet_t packet;;main.c: 131: setMessage(&packet, "VBAT", getADCVa
      +                          lue(0b000100) * 3.106382978723404);
  4842                           
  4843                           ;incstack = 0
  4844                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4845  0203  30CF               	movlw	207
  4846  0204  0020               	movlb	0	; select bank0
  4847  0205  00D8               	movwf	___ftmul@f1
  4848  0206  3046               	movlw	70
  4849  0207  00D9               	movwf	___ftmul@f1+1
  4850  0208  3040               	movlw	64
  4851  0209  00DA               	movwf	___ftmul@f1+2
  4852  020A  3004               	movlw	4
  4853  020B  318E  260D  3182   	fcall	_getADCValue
  4854  020E  0020               	movlb	0	; select bank0
  4855  020F  084C               	movf	?_getADCValue,w
  4856  0210  00DB               	movwf	___ftmul@f2
  4857  0211  084D               	movf	?_getADCValue+1,w
  4858  0212  00DC               	movwf	___ftmul@f2+1
  4859  0213  084E               	movf	?_getADCValue+2,w
  4860  0214  00DD               	movwf	___ftmul@f2+2
  4861  0215  3186  26E1  3182   	fcall	___ftmul
  4862  0218  0020               	movlb	0	; select bank0
  4863  0219  0858               	movf	?___ftmul,w
  4864  021A  0022               	movlb	2	; select bank2
  4865  021B  00A9               	movwf	_loop$2065^(0+256)
  4866  021C  0020               	movlb	0	; select bank0
  4867  021D  0859               	movf	?___ftmul+1,w
  4868  021E  0022               	movlb	2	; select bank2
  4869  021F  00AA               	movwf	(_loop$2065+1)^(0+256)
  4870  0220  0020               	movlb	0	; select bank0
  4871  0221  085A               	movf	?___ftmul+2,w
  4872  0222  0022               	movlb	2	; select bank2
  4873  0223  00AB               	movwf	(_loop$2065+2)^(0+256)
  4874                           
  4875                           ;main.c: 119: nrf24l01Packet_t packet;;main.c: 131: setMessage(&packet, "VBAT", getADCVa
      +                          lue(0b000100) * 3.106382978723404);
  4876  0224  302C               	movlw	low loop@packet
  4877  0225  0021               	movlb	1	; select bank1
  4878  0226  00BD               	movwf	setMessage@packet^(0+128)
  4879  0227  3001               	movlw	high loop@packet
  4880  0228  00BE               	movwf	(setMessage@packet+1)^(0+128)
  4881  0229  302E               	movlw	low (STR_3| (0+32768))
  4882  022A  00BF               	movwf	setMessage@topic^(0+128)
  4883  022B  3098               	movlw	high (STR_3| (0+32768))
  4884  022C  00C0               	movwf	(setMessage@topic^(0+128)+1)
  4885  022D  0022               	movlb	2	; select bank2
  4886  022E  0829               	movf	_loop$2065^(0+256),w
  4887  022F  0021               	movlb	1	; select bank1
  4888  0230  00C1               	movwf	setMessage@value^(0+128)
  4889  0231  0022               	movlb	2	; select bank2
  4890  0232  082A               	movf	(_loop$2065+1)^(0+256),w
  4891  0233  0021               	movlb	1	; select bank1
  4892  0234  00C2               	movwf	(setMessage@value+1)^(0+128)
  4893  0235  0022               	movlb	2	; select bank2
  4894  0236  082B               	movf	(_loop$2065+2)^(0+256),w
  4895  0237  0021               	movlb	1	; select bank1
  4896  0238  00C3               	movwf	(setMessage@value+2)^(0+128)
  4897  0239  3187  2795  3182   	fcall	_setMessage
  4898                           
  4899                           ;main.c: 132: packet.packetData.byte = 0;
  4900  023C  0022               	movlb	2	; select bank2
  4901  023D  01AC               	clrf	loop@packet^(0+256)
  4902                           
  4903                           ;main.c: 133: packet.packetData.ACKRequest = 1;
  4904  023E  152C               	bsf	loop@packet^(0+256),2
  4905                           
  4906                           ;main.c: 134: nrf24l01SendPacket(&packet);
  4907  023F  302C               	movlw	low loop@packet
  4908  0240  0020               	movlb	0	; select bank0
  4909  0241  00A8               	movwf	nrf24l01SendPacket@Packet
  4910  0242  3001               	movlw	high loop@packet
  4911  0243  00A9               	movwf	nrf24l01SendPacket@Packet+1
  4912  0244  3186  2618  3182   	fcall	_nrf24l01SendPacket
  4913                           
  4914                           ;main.c: 135: checkTXPower();
  4915  0247  3197  271A  3182   	fcall	_checkTXPower
  4916                           
  4917                           ;main.c: 136: sleep(10);
  4918  024A  300A               	movlw	10
  4919  024B  3197  27AD  3182   	fcall	_sleep
  4920                           
  4921                           ;main.c: 146: FVRCONbits.TSEN = 1;
  4922  024E  0022               	movlb	2	; select bank2
  4923  024F  1697               	bsf	23,5	;volatile
  4924                           
  4925                           ;main.c: 147: float vOut = getADCValue(0b111101);
  4926  0250  303D               	movlw	61
  4927  0251  318E  260D  3182   	fcall	_getADCValue
  4928  0254  0020               	movlb	0	; select bank0
  4929  0255  084C               	movf	?_getADCValue,w
  4930  0256  0022               	movlb	2	; select bank2
  4931  0257  00A0               	movwf	loop@vOut^(0+256)
  4932  0258  0020               	movlb	0	; select bank0
  4933  0259  084D               	movf	?_getADCValue+1,w
  4934  025A  0022               	movlb	2	; select bank2
  4935  025B  00A1               	movwf	(loop@vOut+1)^(0+256)
  4936  025C  0020               	movlb	0	; select bank0
  4937  025D  084E               	movf	?_getADCValue+2,w
  4938  025E  0022               	movlb	2	; select bank2
  4939  025F  00A2               	movwf	(loop@vOut+2)^(0+256)
  4940                           
  4941                           ;main.c: 148: FVRCONbits.TSEN = 0;
  4942  0260  1297               	bcf	23,5	;volatile
  4943                           
  4944                           ;main.c: 149: float vt = (2.048 - vOut) / 2;
  4945  0261  3000               	movlw	0
  4946  0262  0020               	movlb	0	; select bank0
  4947  0263  00BC               	movwf	___ftdiv@f2
  4948  0264  3000               	movlw	0
  4949  0265  00BD               	movwf	___ftdiv@f2+1
  4950  0266  3040               	movlw	64
  4951  0267  00BE               	movwf	___ftdiv@f2+2
  4952  0268  3012               	movlw	18
  4953  0269  00AF               	movwf	___ftadd@f1
  4954  026A  3003               	movlw	3
  4955  026B  00B0               	movwf	___ftadd@f1+1
  4956  026C  3040               	movlw	64
  4957  026D  00B1               	movwf	___ftadd@f1+2
  4958  026E  0022               	movlb	2	; select bank2
  4959  026F  0820               	movf	loop@vOut^(0+256),w
  4960  0270  0020               	movlb	0	; select bank0
  4961  0271  00A1               	movwf	___ftneg@f1
  4962  0272  0022               	movlb	2	; select bank2
  4963  0273  0821               	movf	(loop@vOut+1)^(0+256),w
  4964  0274  0020               	movlb	0	; select bank0
  4965  0275  00A2               	movwf	___ftneg@f1+1
  4966  0276  0022               	movlb	2	; select bank2
  4967  0277  0822               	movf	(loop@vOut+2)^(0+256),w
  4968  0278  0020               	movlb	0	; select bank0
  4969  0279  00A3               	movwf	___ftneg@f1+2
  4970  027A  3196  26E3  3182   	fcall	___ftneg
  4971  027D  0020               	movlb	0	; select bank0
  4972  027E  0821               	movf	?___ftneg,w
  4973  027F  00B2               	movwf	___ftadd@f2
  4974  0280  0822               	movf	?___ftneg+1,w
  4975  0281  00B3               	movwf	___ftadd@f2+1
  4976  0282  0823               	movf	?___ftneg+2,w
  4977  0283  00B4               	movwf	___ftadd@f2+2
  4978  0284  3184  2430  3182   	fcall	___ftadd
  4979  0287  0020               	movlb	0	; select bank0
  4980  0288  082F               	movf	?___ftadd,w
  4981  0289  00BF               	movwf	___ftdiv@f1
  4982  028A  0830               	movf	?___ftadd+1,w
  4983  028B  00C0               	movwf	___ftdiv@f1+1
  4984  028C  0831               	movf	?___ftadd+2,w
  4985  028D  00C1               	movwf	___ftdiv@f1+2
  4986  028E  318F  2757  3182   	fcall	___ftdiv
  4987  0291  0020               	movlb	0	; select bank0
  4988  0292  083C               	movf	?___ftdiv,w
  4989  0293  0022               	movlb	2	; select bank2
  4990  0294  00A3               	movwf	loop@vt^(0+256)
  4991  0295  0020               	movlb	0	; select bank0
  4992  0296  083D               	movf	?___ftdiv+1,w
  4993  0297  0022               	movlb	2	; select bank2
  4994  0298  00A4               	movwf	(loop@vt+1)^(0+256)
  4995  0299  0020               	movlb	0	; select bank0
  4996  029A  083E               	movf	?___ftdiv+2,w
  4997  029B  0022               	movlb	2	; select bank2
  4998  029C  00A5               	movwf	(loop@vt+2)^(0+256)
  4999                           
  5000                           ;main.c: 152: float ta = (vt / -0.00132) - (0.6063 / -0.00132) - 40;
  5001  029D  30A9               	movlw	169
  5002  029E  0020               	movlb	0	; select bank0
  5003  029F  00AF               	movwf	___ftadd@f1
  5004  02A0  30D1               	movlw	209
  5005  02A1  00B0               	movwf	___ftadd@f1+1
  5006  02A2  3043               	movlw	67
  5007  02A3  00B1               	movwf	___ftadd@f1+2
  5008  02A4  3004               	movlw	4
  5009  02A5  00BC               	movwf	___ftdiv@f2
  5010  02A6  30AD               	movlw	173
  5011  02A7  00BD               	movwf	___ftdiv@f2+1
  5012  02A8  30BA               	movlw	186
  5013  02A9  00BE               	movwf	___ftdiv@f2+2
  5014  02AA  0022               	movlb	2	; select bank2
  5015  02AB  0823               	movf	loop@vt^(0+256),w
  5016  02AC  0020               	movlb	0	; select bank0
  5017  02AD  00BF               	movwf	___ftdiv@f1
  5018  02AE  0022               	movlb	2	; select bank2
  5019  02AF  0824               	movf	(loop@vt+1)^(0+256),w
  5020  02B0  0020               	movlb	0	; select bank0
  5021  02B1  00C0               	movwf	___ftdiv@f1+1
  5022  02B2  0022               	movlb	2	; select bank2
  5023  02B3  0825               	movf	(loop@vt+2)^(0+256),w
  5024  02B4  0020               	movlb	0	; select bank0
  5025  02B5  00C1               	movwf	___ftdiv@f1+2
  5026  02B6  318F  2757  3182   	fcall	___ftdiv
  5027  02B9  0020               	movlb	0	; select bank0
  5028  02BA  083C               	movf	?___ftdiv,w
  5029  02BB  00B2               	movwf	___ftadd@f2
  5030  02BC  083D               	movf	?___ftdiv+1,w
  5031  02BD  00B3               	movwf	___ftadd@f2+1
  5032  02BE  083E               	movf	?___ftdiv+2,w
  5033  02BF  00B4               	movwf	___ftadd@f2+2
  5034  02C0  3184  2430  3182   	fcall	___ftadd
  5035  02C3  0020               	movlb	0	; select bank0
  5036  02C4  082F               	movf	?___ftadd,w
  5037  02C5  0022               	movlb	2	; select bank2
  5038  02C6  00A6               	movwf	loop@ta^(0+256)
  5039  02C7  0020               	movlb	0	; select bank0
  5040  02C8  0830               	movf	?___ftadd+1,w
  5041  02C9  0022               	movlb	2	; select bank2
  5042  02CA  00A7               	movwf	(loop@ta+1)^(0+256)
  5043  02CB  0020               	movlb	0	; select bank0
  5044  02CC  0831               	movf	?___ftadd+2,w
  5045  02CD  0022               	movlb	2	; select bank2
  5046  02CE  00A8               	movwf	(loop@ta+2)^(0+256)
  5047                           
  5048                           ;main.c: 155: setMessage(&packet, "TEMP", ta);
  5049  02CF  302C               	movlw	low loop@packet
  5050  02D0  0021               	movlb	1	; select bank1
  5051  02D1  00BD               	movwf	setMessage@packet^(0+128)
  5052  02D2  3001               	movlw	high loop@packet
  5053  02D3  00BE               	movwf	(setMessage@packet+1)^(0+128)
  5054  02D4  3029               	movlw	low (STR_4| (0+32768))
  5055  02D5  00BF               	movwf	setMessage@topic^(0+128)
  5056  02D6  3098               	movlw	high (STR_4| (0+32768))
  5057  02D7  00C0               	movwf	(setMessage@topic^(0+128)+1)
  5058  02D8  0022               	movlb	2	; select bank2
  5059  02D9  0826               	movf	loop@ta^(0+256),w
  5060  02DA  0021               	movlb	1	; select bank1
  5061  02DB  00C1               	movwf	setMessage@value^(0+128)
  5062  02DC  0022               	movlb	2	; select bank2
  5063  02DD  0827               	movf	(loop@ta+1)^(0+256),w
  5064  02DE  0021               	movlb	1	; select bank1
  5065  02DF  00C2               	movwf	(setMessage@value+1)^(0+128)
  5066  02E0  0022               	movlb	2	; select bank2
  5067  02E1  0828               	movf	(loop@ta+2)^(0+256),w
  5068  02E2  0021               	movlb	1	; select bank1
  5069  02E3  00C3               	movwf	(setMessage@value+2)^(0+128)
  5070  02E4  3187  2795  3182   	fcall	_setMessage
  5071                           
  5072                           ;main.c: 156: packet.packetData.byte = 0;
  5073  02E7  0022               	movlb	2	; select bank2
  5074  02E8  01AC               	clrf	loop@packet^(0+256)
  5075                           
  5076                           ;main.c: 157: packet.packetData.ACKRequest = 1;
  5077  02E9  152C               	bsf	loop@packet^(0+256),2
  5078                           
  5079                           ;main.c: 158: nrf24l01SendPacket(&packet);
  5080  02EA  302C               	movlw	low loop@packet
  5081  02EB  0020               	movlb	0	; select bank0
  5082  02EC  00A8               	movwf	nrf24l01SendPacket@Packet
  5083  02ED  3001               	movlw	high loop@packet
  5084  02EE  00A9               	movwf	nrf24l01SendPacket@Packet+1
  5085  02EF  3186  2618  3182   	fcall	_nrf24l01SendPacket
  5086                           
  5087                           ;main.c: 159: checkTXPower();
  5088  02F2  3197  271A  3182   	fcall	_checkTXPower
  5089                           
  5090                           ;main.c: 160: sleep(10);
  5091  02F5  300A               	movlw	10
  5092  02F6  3197  27AD  3182   	fcall	_sleep
  5093                           
  5094                           ;main.c: 162: FVRCONbits.TSEN = 1;
  5095  02F9  0022               	movlb	2	; select bank2
  5096  02FA  1697               	bsf	23,5	;volatile
  5097                           
  5098                           ;main.c: 163: setMessage(&packet, "TEMPR", getADCValue(0b111101));
  5099  02FB  302C               	movlw	low loop@packet
  5100  02FC  0021               	movlb	1	; select bank1
  5101  02FD  00BD               	movwf	setMessage@packet^(0+128)
  5102  02FE  3001               	movlw	high loop@packet
  5103  02FF  00BE               	movwf	(setMessage@packet+1)^(0+128)
  5104  0300  301E               	movlw	low (STR_5| (0+32768))
  5105  0301  00BF               	movwf	setMessage@topic^(0+128)
  5106  0302  3098               	movlw	high (STR_5| (0+32768))
  5107  0303  00C0               	movwf	(setMessage@topic^(0+128)+1)
  5108  0304  303D               	movlw	61
  5109  0305  318E  260D  3182   	fcall	_getADCValue
  5110  0308  0020               	movlb	0	; select bank0
  5111  0309  084C               	movf	?_getADCValue,w
  5112  030A  0021               	movlb	1	; select bank1
  5113  030B  00C1               	movwf	setMessage@value^(0+128)
  5114  030C  0020               	movlb	0	; select bank0
  5115  030D  084D               	movf	?_getADCValue+1,w
  5116  030E  0021               	movlb	1	; select bank1
  5117  030F  00C2               	movwf	(setMessage@value+1)^(0+128)
  5118  0310  0020               	movlb	0	; select bank0
  5119  0311  084E               	movf	?_getADCValue+2,w
  5120  0312  0021               	movlb	1	; select bank1
  5121  0313  00C3               	movwf	(setMessage@value+2)^(0+128)
  5122  0314  3187  2795  3182   	fcall	_setMessage
  5123                           
  5124                           ;main.c: 164: FVRCONbits.TSEN = 0;
  5125  0317  0022               	movlb	2	; select bank2
  5126  0318  1297               	bcf	23,5	;volatile
  5127                           
  5128                           ;main.c: 165: packet.packetData.byte = 0;
  5129  0319  01AC               	clrf	loop@packet^(0+256)
  5130                           
  5131                           ;main.c: 166: packet.packetData.ACKRequest = 1;
  5132  031A  152C               	bsf	loop@packet^(0+256),2
  5133                           
  5134                           ;main.c: 167: nrf24l01SendPacket(&packet);
  5135  031B  302C               	movlw	low loop@packet
  5136  031C  0020               	movlb	0	; select bank0
  5137  031D  00A8               	movwf	nrf24l01SendPacket@Packet
  5138  031E  3001               	movlw	high loop@packet
  5139  031F  00A9               	movwf	nrf24l01SendPacket@Packet+1
  5140  0320  3186  2618  3182   	fcall	_nrf24l01SendPacket
  5141                           
  5142                           ;main.c: 168: checkTXPower();
  5143  0323  3197  271A  3182   	fcall	_checkTXPower
  5144                           
  5145                           ;main.c: 169: sleep(10);
  5146  0326  300A               	movlw	10
  5147  0327  3197  27AD         	fcall	_sleep
  5148  0329  0008               	return
  5149  032A                     __end_of_loop:	
  5150                           
  5151                           	psect	text11
  5152  0795                     __ptext11:	
  5153 ;; *************** function _setMessage *****************
  5154 ;; Defined at:
  5155 ;;		line 96 in file "main.c"
  5156 ;; Parameters:    Size  Location     Type
  5157 ;;  packet          2   29[BANK1 ] PTR struct .
  5158 ;;		 -> main@packet(33), loop@packet(33), 
  5159 ;;  topic           2   31[BANK1 ] PTR const unsigned char 
  5160 ;;		 -> STR_7(5), STR_5(6), STR_4(5), STR_3(5), 
  5161 ;;  value           3   33[BANK1 ] float 
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;  status          2   36[BANK1 ] int 
  5164 ;; Return value:  Size  Location     Type
  5165 ;;                  1    wreg      void 
  5166 ;; Registers used:
  5167 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5168 ;; Tracked objects:
  5169 ;;		On entry : 0/0
  5170 ;;		On exit  : 0/0
  5171 ;;		Unchanged: 0/0
  5172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5173 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5174 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5175 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5176 ;;      Totals:         0       1       9       0       0       0       0       0       0       0       0       0       
      +0       0
  5177 ;;Total ram usage:       10 bytes
  5178 ;; Hardware stack levels used:    1
  5179 ;; Hardware stack levels required when called:   11
  5180 ;; This function calls:
  5181 ;;		_ftoa
  5182 ;;		_memset
  5183 ;;		_strcat
  5184 ;; This function is called by:
  5185 ;;		_loop
  5186 ;;		_main
  5187 ;; This function uses a non-reentrant model
  5188 ;;
  5189                           
  5190                           
  5191                           ;psect for function _setMessage
  5192  0795                     _setMessage:	
  5193                           
  5194                           ;main.c: 97: memset(packet->Message, 0, sizeof(packet->Message));
  5195                           
  5196                           ;incstack = 0
  5197                           ; Regs used in _setMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5198  0795  0021               	movlb	1	; select bank1
  5199  0796  083D               	movf	setMessage@packet^(0+128),w
  5200  0797  3E01               	addlw	1
  5201  0798  0020               	movlb	0	; select bank0
  5202  0799  00A1               	movwf	memset@p1
  5203  079A  3000               	movlw	0
  5204  079B  0021               	movlb	1	; select bank1
  5205  079C  3D3E               	addwfc	(setMessage@packet+1)^(0+128),w
  5206  079D  0020               	movlb	0	; select bank0
  5207  079E  00A2               	movwf	memset@p1+1
  5208  079F  3000               	movlw	0
  5209  07A0  00A3               	movwf	memset@c
  5210  07A1  00A4               	movwf	memset@c+1
  5211  07A2  3020               	movlw	32
  5212  07A3  00A5               	movwf	memset@n
  5213  07A4  3000               	movlw	0
  5214  07A5  00A6               	movwf	memset@n+1
  5215  07A6  3197  275E  3187   	fcall	_memset
  5216                           
  5217                           ;main.c: 99: strcat(packet->Message, romData.name);
  5218  07A9  0021               	movlb	1	; select bank1
  5219  07AA  083D               	movf	setMessage@packet^(0+128),w
  5220  07AB  3E01               	addlw	1
  5221  07AC  00B7               	movwf	strcat@to^(0+128)
  5222  07AD  3000               	movlw	0
  5223  07AE  3D3E               	addwfc	(setMessage@packet+1)^(0+128),w
  5224  07AF  00B8               	movwf	(strcat@to+1)^(0+128)
  5225  07B0  304E               	movlw	low (_romData+1)
  5226  07B1  00B9               	movwf	strcat@from^(0+128)
  5227  07B2  3001               	movlw	high (_romData+1)
  5228  07B3  00BA               	movwf	(strcat@from+1)^(0+128)
  5229  07B4  3189  2161  3187   	fcall	_strcat
  5230                           
  5231                           ;main.c: 101: strcat(packet->Message, "/");
  5232  07B7  0021               	movlb	1	; select bank1
  5233  07B8  083D               	movf	setMessage@packet^(0+128),w
  5234  07B9  3E01               	addlw	1
  5235  07BA  00B7               	movwf	strcat@to^(0+128)
  5236  07BB  3000               	movlw	0
  5237  07BC  3D3E               	addwfc	(setMessage@packet+1)^(0+128),w
  5238  07BD  00B8               	movwf	(strcat@to+1)^(0+128)
  5239  07BE  303C               	movlw	low (STR_1| (0+32768))
  5240  07BF  00B9               	movwf	strcat@from^(0+128)
  5241  07C0  3098               	movlw	high (STR_1| (0+32768))
  5242  07C1  00BA               	movwf	(strcat@from^(0+128)+1)
  5243  07C2  3189  2161  3187   	fcall	_strcat
  5244                           
  5245                           ;main.c: 102: strcat(packet->Message, topic);
  5246  07C5  0021               	movlb	1	; select bank1
  5247  07C6  083D               	movf	setMessage@packet^(0+128),w
  5248  07C7  3E01               	addlw	1
  5249  07C8  00B7               	movwf	strcat@to^(0+128)
  5250  07C9  3000               	movlw	0
  5251  07CA  3D3E               	addwfc	(setMessage@packet+1)^(0+128),w
  5252  07CB  00B8               	movwf	(strcat@to+1)^(0+128)
  5253  07CC  0840               	movf	(setMessage@topic+1)^(0+128),w
  5254  07CD  00BA               	movwf	(strcat@from+1)^(0+128)
  5255  07CE  083F               	movf	setMessage@topic^(0+128),w
  5256  07CF  00B9               	movwf	strcat@from^(0+128)
  5257  07D0  3189  2161  3187   	fcall	_strcat
  5258                           
  5259                           ;main.c: 104: int status;;main.c: 105: strcat(packet->Message, "/");
  5260  07D3  0021               	movlb	1	; select bank1
  5261  07D4  083D               	movf	setMessage@packet^(0+128),w
  5262  07D5  3E01               	addlw	1
  5263  07D6  00B7               	movwf	strcat@to^(0+128)
  5264  07D7  3000               	movlw	0
  5265  07D8  3D3E               	addwfc	(setMessage@packet+1)^(0+128),w
  5266  07D9  00B8               	movwf	(strcat@to+1)^(0+128)
  5267  07DA  303C               	movlw	low (STR_1| (0+32768))
  5268  07DB  00B9               	movwf	strcat@from^(0+128)
  5269  07DC  3098               	movlw	high (STR_1| (0+32768))
  5270  07DD  00BA               	movwf	(strcat@from^(0+128)+1)
  5271  07DE  3189  2161  3187   	fcall	_strcat
  5272                           
  5273                           ;main.c: 106: strcat(packet->Message, ftoa(value, &status));
  5274  07E1  0021               	movlb	1	; select bank1
  5275  07E2  083D               	movf	setMessage@packet^(0+128),w
  5276  07E3  3E01               	addlw	1
  5277  07E4  00B7               	movwf	strcat@to^(0+128)
  5278  07E5  3000               	movlw	0
  5279  07E6  3D3E               	addwfc	(setMessage@packet+1)^(0+128),w
  5280  07E7  00B8               	movwf	(strcat@to+1)^(0+128)
  5281  07E8  0841               	movf	setMessage@value^(0+128),w
  5282  07E9  00AA               	movwf	ftoa@f^(0+128)
  5283  07EA  0842               	movf	(setMessage@value+1)^(0+128),w
  5284  07EB  00AB               	movwf	(ftoa@f+1)^(0+128)
  5285  07EC  0843               	movf	(setMessage@value+2)^(0+128),w
  5286  07ED  00AC               	movwf	(ftoa@f+2)^(0+128)
  5287  07EE  30C4               	movlw	(low (setMessage@status| 0))& (0+255)
  5288  07EF  0020               	movlb	0	; select bank0
  5289  07F0  00ED               	movwf	??_setMessage
  5290  07F1  086D               	movf	??_setMessage,w
  5291  07F2  0021               	movlb	1	; select bank1
  5292  07F3  00AD               	movwf	ftoa@status^(0+128)
  5293  07F4  3185  2526  3187   	fcall	_ftoa
  5294  07F7  0021               	movlb	1	; select bank1
  5295  07F8  00B9               	movwf	strcat@from^(0+128)
  5296  07F9  3001               	movlw	1
  5297  07FA  00BA               	movwf	(strcat@from+1)^(0+128)
  5298  07FB  3189  2161         	fcall	_strcat
  5299  07FD  0008               	return
  5300  07FE                     __end_of_setMessage:	
  5301                           
  5302                           	psect	text12
  5303  0961                     __ptext12:	
  5304 ;; *************** function _strcat *****************
  5305 ;; Defined at:
  5306 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5307 ;; Parameters:    Size  Location     Type
  5308 ;;  to              2   23[BANK1 ] PTR unsigned char 
  5309 ;;		 -> main@packet(33), loop@packet(33), 
  5310 ;;  from            2   25[BANK1 ] PTR const unsigned char 
  5311 ;;		 -> ftoa@buf(17), STR_7(5), STR_5(6), STR_4(5), 
  5312 ;;		 -> STR_3(5), STR_2(2), STR_1(2), romData.name(16), 
  5313 ;;		 -> romData(19), 
  5314 ;; Auto vars:     Size  Location     Type
  5315 ;;  cp              2   27[BANK1 ] PTR unsigned char 
  5316 ;;		 -> main@packet(33), loop@packet(33), 
  5317 ;; Return value:  Size  Location     Type
  5318 ;;                  2   23[BANK1 ] PTR unsigned char 
  5319 ;; Registers used:
  5320 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5326 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;Total ram usage:        6 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; Hardware stack levels required when called:    7
  5333 ;; This function calls:
  5334 ;;		Nothing
  5335 ;; This function is called by:
  5336 ;;		_setMessage
  5337 ;; This function uses a non-reentrant model
  5338 ;;
  5339                           
  5340                           
  5341                           ;psect for function _strcat
  5342  0961                     _strcat:	
  5343                           
  5344                           ;incstack = 0
  5345                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  5346  0961  0021               	movlb	1	; select bank1
  5347  0962  0838               	movf	(strcat@to+1)^(0+128),w
  5348  0963  00BC               	movwf	(strcat@cp+1)^(0+128)
  5349  0964  0837               	movf	strcat@to^(0+128),w
  5350  0965  00BB               	movwf	strcat@cp^(0+128)
  5351  0966                     l3725:	
  5352  0966  083B               	movf	strcat@cp^(0+128),w
  5353  0967  0086               	movwf	6
  5354  0968  083C               	movf	(strcat@cp+1)^(0+128),w
  5355  0969  0087               	movwf	7
  5356  096A  0801               	movf	1,w
  5357  096B  1903               	btfsc	3,2
  5358  096C  297A               	goto	l3729
  5359  096D  3001               	movlw	1
  5360  096E  07BB               	addwf	strcat@cp^(0+128),f
  5361  096F  3000               	movlw	0
  5362  0970  3DBC               	addwfc	(strcat@cp+1)^(0+128),f
  5363  0971  2966               	goto	l3725
  5364  0972                     l3727:	
  5365  0972  3001               	movlw	1
  5366  0973  07BB               	addwf	strcat@cp^(0+128),f
  5367  0974  3000               	movlw	0
  5368  0975  3DBC               	addwfc	(strcat@cp+1)^(0+128),f
  5369  0976  3001               	movlw	1
  5370  0977  07B9               	addwf	strcat@from^(0+128),f
  5371  0978  3000               	movlw	0
  5372  0979  3DBA               	addwfc	(strcat@from+1)^(0+128),f
  5373  097A                     l3729:	
  5374  097A  083B               	movf	strcat@cp^(0+128),w
  5375  097B  0086               	movwf	6
  5376  097C  083C               	movf	(strcat@cp+1)^(0+128),w
  5377  097D  0087               	movwf	7
  5378  097E  0839               	movf	strcat@from^(0+128),w
  5379  097F  0084               	movwf	4
  5380  0980  083A               	movf	(strcat@from+1)^(0+128),w
  5381  0981  0085               	movwf	5
  5382  0982  0800               	movf	0,w	;code access
  5383  0983  3FC0               	movwi [0]fsr1
  5384  0984  0889               	movf	9,f
  5385  0985  1903               	btfsc	3,2
  5386  0986  0008               	return
  5387  0987  2972               	goto	l3727
  5388  0988                     __end_of_strcat:	
  5389                           ;	Return value of _strcat is never used
  5390                           
  5391                           
  5392                           	psect	text13
  5393  175E                     __ptext13:	
  5394 ;; *************** function _memset *****************
  5395 ;; Defined at:
  5396 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  5397 ;; Parameters:    Size  Location     Type
  5398 ;;  p1              2    1[BANK0 ] PTR void 
  5399 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5400 ;;  c               2    3[BANK0 ] int 
  5401 ;;  n               2    5[BANK0 ] unsigned int 
  5402 ;; Auto vars:     Size  Location     Type
  5403 ;;  p               2    7[BANK0 ] PTR unsigned char 
  5404 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5405 ;; Return value:  Size  Location     Type
  5406 ;;                  2    1[BANK0 ] PTR void 
  5407 ;; Registers used:
  5408 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5409 ;; Tracked objects:
  5410 ;;		On entry : 0/0
  5411 ;;		On exit  : 0/0
  5412 ;;		Unchanged: 0/0
  5413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5414 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5415 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5417 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5418 ;;Total ram usage:        8 bytes
  5419 ;; Hardware stack levels used:    1
  5420 ;; Hardware stack levels required when called:    7
  5421 ;; This function calls:
  5422 ;;		Nothing
  5423 ;; This function is called by:
  5424 ;;		_setMessage
  5425 ;; This function uses a non-reentrant model
  5426 ;;
  5427                           
  5428                           
  5429                           ;psect for function _memset
  5430  175E                     _memset:	
  5431                           
  5432                           ;incstack = 0
  5433                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  5434  175E  0020               	movlb	0	; select bank0
  5435  175F  0822               	movf	memset@p1+1,w
  5436  1760  00A8               	movwf	memset@p+1
  5437  1761  0821               	movf	memset@p1,w
  5438  1762  00A7               	movwf	memset@p
  5439  1763                     l2959:	
  5440  1763  3001               	movlw	1
  5441  1764  02A5               	subwf	memset@n,f
  5442  1765  3000               	movlw	0
  5443  1766  3BA6               	subwfb	memset@n+1,f
  5444  1767  0A25               	incf	memset@n,w
  5445  1768  1903               	btfsc	3,2
  5446  1769  0A26               	incf	memset@n+1,w
  5447  176A  1903               	btfsc	3,2
  5448  176B  0008               	return
  5449  176C  0827               	movf	memset@p,w
  5450  176D  0086               	movwf	6
  5451  176E  0828               	movf	memset@p+1,w
  5452  176F  0087               	movwf	7
  5453  1770  0823               	movf	memset@c,w
  5454  1771  0081               	movwf	1
  5455  1772  3001               	movlw	1
  5456  1773  07A7               	addwf	memset@p,f
  5457  1774  3000               	movlw	0
  5458  1775  3DA8               	addwfc	memset@p+1,f
  5459  1776  2F63               	goto	l2959
  5460  1777                     __end_of_memset:	
  5461                           ;	Return value of _memset is never used
  5462                           
  5463                           
  5464                           	psect	text14
  5465  0526                     __ptext14:	
  5466 ;; *************** function _ftoa *****************
  5467 ;; Defined at:
  5468 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;  f               3   10[BANK1 ] float 
  5471 ;;  status          1   13[BANK1 ] PTR int 
  5472 ;;		 -> setMessage@status(2), 
  5473 ;; Auto vars:     Size  Location     Type
  5474 ;;  l               4   18[BANK1 ] unsigned long 
  5475 ;;  rem             4   14[BANK1 ] unsigned long 
  5476 ;;  cp              1   22[BANK1 ] PTR unsigned char 
  5477 ;;		 -> ftoa@buf(17), 
  5478 ;; Return value:  Size  Location     Type
  5479 ;;                  1    wreg      PTR unsigned char 
  5480 ;; Registers used:
  5481 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5482 ;; Tracked objects:
  5483 ;;		On entry : 0/0
  5484 ;;		On exit  : 0/0
  5485 ;;		Unchanged: 0/0
  5486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5487 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5488 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  5489 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5490 ;;      Totals:         0       1      13       0       0       0       0       0       0       0       0       0       
      +0       0
  5491 ;;Total ram usage:       14 bytes
  5492 ;; Hardware stack levels used:    1
  5493 ;; Hardware stack levels required when called:   10
  5494 ;; This function calls:
  5495 ;;		___ftge
  5496 ;;		___ftmul
  5497 ;;		___ftneg
  5498 ;;		___ftsub
  5499 ;;		___fttol
  5500 ;;		___lltoft
  5501 ;;		_sprintf
  5502 ;; This function is called by:
  5503 ;;		_setMessage
  5504 ;; This function uses a non-reentrant model
  5505 ;;
  5506                           
  5507                           
  5508                           ;psect for function _ftoa
  5509  0526                     _ftoa:	
  5510                           
  5511                           ;incstack = 0
  5512                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5513  0526  30C1               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  5514  0527  0020               	movlb	0	; select bank0
  5515  0528  00EC               	movwf	??_ftoa
  5516  0529  086C               	movf	??_ftoa,w
  5517  052A  0021               	movlb	1	; select bank1
  5518  052B  00B6               	movwf	ftoa@cp^(0+128)
  5519  052C  082A               	movf	ftoa@f^(0+128),w
  5520  052D  0020               	movlb	0	; select bank0
  5521  052E  00A1               	movwf	___ftge@ff1
  5522  052F  0021               	movlb	1	; select bank1
  5523  0530  082B               	movf	(ftoa@f+1)^(0+128),w
  5524  0531  0020               	movlb	0	; select bank0
  5525  0532  00A2               	movwf	___ftge@ff1+1
  5526  0533  0021               	movlb	1	; select bank1
  5527  0534  082C               	movf	(ftoa@f+2)^(0+128),w
  5528  0535  0020               	movlb	0	; select bank0
  5529  0536  00A3               	movwf	___ftge@ff1+2
  5530  0537  3000               	movlw	0
  5531  0538  00A4               	movwf	___ftge@ff2
  5532  0539  3000               	movlw	0
  5533  053A  00A5               	movwf	___ftge@ff2+1
  5534  053B  3000               	movlw	0
  5535  053C  00A6               	movwf	___ftge@ff2+2
  5536  053D  318B  2316  3185   	fcall	___ftge
  5537  0540  1803               	btfsc	3,0
  5538  0541  2D6C               	goto	l2981
  5539  0542  302D               	movlw	45
  5540  0543  0020               	movlb	0	; select bank0
  5541  0544  00EC               	movwf	??_ftoa
  5542  0545  0021               	movlb	1	; select bank1
  5543  0546  0836               	movf	ftoa@cp^(0+128),w
  5544  0547  0086               	movwf	6
  5545  0548  3001               	movlw	1	; select bank2/3
  5546  0549  0087               	movwf	7
  5547  054A  0020               	movlb	0	; select bank0
  5548  054B  086C               	movf	??_ftoa,w
  5549  054C  0081               	movwf	1
  5550  054D  3001               	movlw	1
  5551  054E  00EC               	movwf	??_ftoa
  5552  054F  086C               	movf	??_ftoa,w
  5553  0550  0021               	movlb	1	; select bank1
  5554  0551  07B6               	addwf	ftoa@cp^(0+128),f
  5555  0552  082A               	movf	ftoa@f^(0+128),w
  5556  0553  0020               	movlb	0	; select bank0
  5557  0554  00A1               	movwf	___ftneg@f1
  5558  0555  0021               	movlb	1	; select bank1
  5559  0556  082B               	movf	(ftoa@f+1)^(0+128),w
  5560  0557  0020               	movlb	0	; select bank0
  5561  0558  00A2               	movwf	___ftneg@f1+1
  5562  0559  0021               	movlb	1	; select bank1
  5563  055A  082C               	movf	(ftoa@f+2)^(0+128),w
  5564  055B  0020               	movlb	0	; select bank0
  5565  055C  00A3               	movwf	___ftneg@f1+2
  5566  055D  3196  26E3  3185   	fcall	___ftneg
  5567  0560  0020               	movlb	0	; select bank0
  5568  0561  0821               	movf	?___ftneg,w
  5569  0562  0021               	movlb	1	; select bank1
  5570  0563  00AA               	movwf	ftoa@f^(0+128)
  5571  0564  0020               	movlb	0	; select bank0
  5572  0565  0822               	movf	?___ftneg+1,w
  5573  0566  0021               	movlb	1	; select bank1
  5574  0567  00AB               	movwf	(ftoa@f+1)^(0+128)
  5575  0568  0020               	movlb	0	; select bank0
  5576  0569  0823               	movf	?___ftneg+2,w
  5577  056A  0021               	movlb	1	; select bank1
  5578  056B  00AC               	movwf	(ftoa@f+2)^(0+128)
  5579  056C                     l2981:	
  5580  056C  0021               	movlb	1	; select bank1
  5581  056D  082A               	movf	ftoa@f^(0+128),w
  5582  056E  0020               	movlb	0	; select bank0
  5583  056F  00E8               	movwf	___fttol@f1
  5584  0570  0021               	movlb	1	; select bank1
  5585  0571  082B               	movf	(ftoa@f+1)^(0+128),w
  5586  0572  0020               	movlb	0	; select bank0
  5587  0573  00E9               	movwf	___fttol@f1+1
  5588  0574  0021               	movlb	1	; select bank1
  5589  0575  082C               	movf	(ftoa@f+2)^(0+128),w
  5590  0576  0020               	movlb	0	; select bank0
  5591  0577  00EA               	movwf	___fttol@f1+2
  5592  0578  318E  26B2  3185   	fcall	___fttol
  5593  057B  0020               	movlb	0	; select bank0
  5594  057C  086B               	movf	?___fttol+3,w
  5595  057D  0021               	movlb	1	; select bank1
  5596  057E  00B5               	movwf	(ftoa@l+3)^(0+128)
  5597  057F  0020               	movlb	0	; select bank0
  5598  0580  086A               	movf	?___fttol+2,w
  5599  0581  0021               	movlb	1	; select bank1
  5600  0582  00B4               	movwf	(ftoa@l+2)^(0+128)
  5601  0583  0020               	movlb	0	; select bank0
  5602  0584  0869               	movf	?___fttol+1,w
  5603  0585  0021               	movlb	1	; select bank1
  5604  0586  00B3               	movwf	(ftoa@l+1)^(0+128)
  5605  0587  0020               	movlb	0	; select bank0
  5606  0588  0868               	movf	?___fttol,w
  5607  0589  0021               	movlb	1	; select bank1
  5608  058A  00B2               	movwf	ftoa@l^(0+128)
  5609  058B  0835               	movf	(ftoa@l+3)^(0+128),w
  5610  058C  0020               	movlb	0	; select bank0
  5611  058D  00AC               	movwf	___lltoft@c+3
  5612  058E  0021               	movlb	1	; select bank1
  5613  058F  0834               	movf	(ftoa@l+2)^(0+128),w
  5614  0590  0020               	movlb	0	; select bank0
  5615  0591  00AB               	movwf	___lltoft@c+2
  5616  0592  0021               	movlb	1	; select bank1
  5617  0593  0833               	movf	(ftoa@l+1)^(0+128),w
  5618  0594  0020               	movlb	0	; select bank0
  5619  0595  00AA               	movwf	___lltoft@c+1
  5620  0596  0021               	movlb	1	; select bank1
  5621  0597  0832               	movf	ftoa@l^(0+128),w
  5622  0598  0020               	movlb	0	; select bank0
  5623  0599  00A9               	movwf	___lltoft@c
  5624  059A  3189  2188  3185   	fcall	___lltoft
  5625  059D  0020               	movlb	0	; select bank0
  5626  059E  0829               	movf	?___lltoft,w
  5627  059F  00BC               	movwf	___ftsub@f2
  5628  05A0  082A               	movf	?___lltoft+1,w
  5629  05A1  00BD               	movwf	___ftsub@f2+1
  5630  05A2  082B               	movf	?___lltoft+2,w
  5631  05A3  00BE               	movwf	___ftsub@f2+2
  5632  05A4  0021               	movlb	1	; select bank1
  5633  05A5  082A               	movf	ftoa@f^(0+128),w
  5634  05A6  0020               	movlb	0	; select bank0
  5635  05A7  00BF               	movwf	___ftsub@f1
  5636  05A8  0021               	movlb	1	; select bank1
  5637  05A9  082B               	movf	(ftoa@f+1)^(0+128),w
  5638  05AA  0020               	movlb	0	; select bank0
  5639  05AB  00C0               	movwf	___ftsub@f1+1
  5640  05AC  0021               	movlb	1	; select bank1
  5641  05AD  082C               	movf	(ftoa@f+2)^(0+128),w
  5642  05AE  0020               	movlb	0	; select bank0
  5643  05AF  00C1               	movwf	___ftsub@f1+2
  5644  05B0  3188  2033  3185   	fcall	___ftsub
  5645  05B3  0020               	movlb	0	; select bank0
  5646  05B4  083C               	movf	?___ftsub,w
  5647  05B5  0021               	movlb	1	; select bank1
  5648  05B6  00AA               	movwf	ftoa@f^(0+128)
  5649  05B7  0020               	movlb	0	; select bank0
  5650  05B8  083D               	movf	?___ftsub+1,w
  5651  05B9  0021               	movlb	1	; select bank1
  5652  05BA  00AB               	movwf	(ftoa@f+1)^(0+128)
  5653  05BB  0020               	movlb	0	; select bank0
  5654  05BC  083E               	movf	?___ftsub+2,w
  5655  05BD  0021               	movlb	1	; select bank1
  5656  05BE  00AC               	movwf	(ftoa@f+2)^(0+128)
  5657  05BF  082A               	movf	ftoa@f^(0+128),w
  5658  05C0  0020               	movlb	0	; select bank0
  5659  05C1  00DB               	movwf	___ftmul@f2
  5660  05C2  0021               	movlb	1	; select bank1
  5661  05C3  082B               	movf	(ftoa@f+1)^(0+128),w
  5662  05C4  0020               	movlb	0	; select bank0
  5663  05C5  00DC               	movwf	___ftmul@f2+1
  5664  05C6  0021               	movlb	1	; select bank1
  5665  05C7  082C               	movf	(ftoa@f+2)^(0+128),w
  5666  05C8  0020               	movlb	0	; select bank0
  5667  05C9  00DD               	movwf	___ftmul@f2+2
  5668  05CA  3024               	movlw	36
  5669  05CB  00D8               	movwf	___ftmul@f1
  5670  05CC  3074               	movlw	116
  5671  05CD  00D9               	movwf	___ftmul@f1+1
  5672  05CE  3049               	movlw	73
  5673  05CF  00DA               	movwf	___ftmul@f1+2
  5674  05D0  3186  26E1  3185   	fcall	___ftmul
  5675  05D3  0020               	movlb	0	; select bank0
  5676  05D4  0858               	movf	?___ftmul,w
  5677  05D5  00E8               	movwf	___fttol@f1
  5678  05D6  0859               	movf	?___ftmul+1,w
  5679  05D7  00E9               	movwf	___fttol@f1+1
  5680  05D8  085A               	movf	?___ftmul+2,w
  5681  05D9  00EA               	movwf	___fttol@f1+2
  5682  05DA  318E  26B2  3185   	fcall	___fttol
  5683  05DD  0020               	movlb	0	; select bank0
  5684  05DE  086B               	movf	?___fttol+3,w
  5685  05DF  0021               	movlb	1	; select bank1
  5686  05E0  00B1               	movwf	(ftoa@rem+3)^(0+128)
  5687  05E1  0020               	movlb	0	; select bank0
  5688  05E2  086A               	movf	?___fttol+2,w
  5689  05E3  0021               	movlb	1	; select bank1
  5690  05E4  00B0               	movwf	(ftoa@rem+2)^(0+128)
  5691  05E5  0020               	movlb	0	; select bank0
  5692  05E6  0869               	movf	?___fttol+1,w
  5693  05E7  0021               	movlb	1	; select bank1
  5694  05E8  00AF               	movwf	(ftoa@rem+1)^(0+128)
  5695  05E9  0020               	movlb	0	; select bank0
  5696  05EA  0868               	movf	?___fttol,w
  5697  05EB  0021               	movlb	1	; select bank1
  5698  05EC  00AE               	movwf	ftoa@rem^(0+128)
  5699  05ED  3013               	movlw	low (STR_8| (0+32768))
  5700  05EE  0020               	movlb	0	; select bank0
  5701  05EF  00B9               	movwf	sprintf@f
  5702  05F0  3098               	movlw	high (STR_8| (0+32768))
  5703  05F1  00BA               	movwf	sprintf@f+1
  5704  05F2  0021               	movlb	1	; select bank1
  5705  05F3  0835               	movf	(ftoa@l+3)^(0+128),w
  5706  05F4  0020               	movlb	0	; select bank0
  5707  05F5  00BE               	movwf	?_sprintf+5
  5708  05F6  0021               	movlb	1	; select bank1
  5709  05F7  0834               	movf	(ftoa@l+2)^(0+128),w
  5710  05F8  0020               	movlb	0	; select bank0
  5711  05F9  00BD               	movwf	?_sprintf+4
  5712  05FA  0021               	movlb	1	; select bank1
  5713  05FB  0833               	movf	(ftoa@l+1)^(0+128),w
  5714  05FC  0020               	movlb	0	; select bank0
  5715  05FD  00BC               	movwf	?_sprintf+3
  5716  05FE  0021               	movlb	1	; select bank1
  5717  05FF  0832               	movf	ftoa@l^(0+128),w
  5718  0600  0020               	movlb	0	; select bank0
  5719  0601  00BB               	movwf	?_sprintf+2
  5720  0602  0021               	movlb	1	; select bank1
  5721  0603  0831               	movf	(ftoa@rem+3)^(0+128),w
  5722  0604  0020               	movlb	0	; select bank0
  5723  0605  00C2               	movwf	?_sprintf+9
  5724  0606  0021               	movlb	1	; select bank1
  5725  0607  0830               	movf	(ftoa@rem+2)^(0+128),w
  5726  0608  0020               	movlb	0	; select bank0
  5727  0609  00C1               	movwf	?_sprintf+8
  5728  060A  0021               	movlb	1	; select bank1
  5729  060B  082F               	movf	(ftoa@rem+1)^(0+128),w
  5730  060C  0020               	movlb	0	; select bank0
  5731  060D  00C0               	movwf	?_sprintf+7
  5732  060E  0021               	movlb	1	; select bank1
  5733  060F  082E               	movf	ftoa@rem^(0+128),w
  5734  0610  0020               	movlb	0	; select bank0
  5735  0611  00BF               	movwf	?_sprintf+6
  5736  0612  0021               	movlb	1	; select bank1
  5737  0613  0836               	movf	ftoa@cp^(0+128),w
  5738  0614  3180  2036         	fcall	_sprintf
  5739  0616  30C1               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  5740  0617  0008               	return
  5741  0618                     __end_of_ftoa:	
  5742                           
  5743                           	psect	text15
  5744  0036                     __ptext15:	
  5745 ;; *************** function _sprintf *****************
  5746 ;; Defined at:
  5747 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  5748 ;; Parameters:    Size  Location     Type
  5749 ;;  sp              1    wreg     PTR unsigned char 
  5750 ;;		 -> ftoa@buf(17), 
  5751 ;;  f               2   25[BANK0 ] PTR const unsigned char 
  5752 ;;		 -> STR_8(11), 
  5753 ;; Auto vars:     Size  Location     Type
  5754 ;;  sp              1   47[BANK0 ] PTR unsigned char 
  5755 ;;		 -> ftoa@buf(17), 
  5756 ;;  val             4   43[BANK0 ] unsigned long 
  5757 ;;  tmpval          4    0        struct .
  5758 ;;  prec            2   50[BANK0 ] int 
  5759 ;;  width           2   48[BANK0 ] int 
  5760 ;;  cp              2    0        PTR const unsigned char 
  5761 ;;  len             2    0        unsigned int 
  5762 ;;  c               1   52[BANK0 ] unsigned char 
  5763 ;;  ap              1   42[BANK0 ] PTR void [1]
  5764 ;;		 -> ?_sprintf(2), 
  5765 ;;  flag            1   41[BANK0 ] unsigned char 
  5766 ;; Return value:  Size  Location     Type
  5767 ;;                  2   25[BANK0 ] int 
  5768 ;; Registers used:
  5769 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5770 ;; Tracked objects:
  5771 ;;		On entry : 0/0
  5772 ;;		On exit  : 0/0
  5773 ;;		Unchanged: 0/0
  5774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5775 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5776 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5777 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5778 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5779 ;;Total ram usage:       28 bytes
  5780 ;; Hardware stack levels used:    1
  5781 ;; Hardware stack levels required when called:    8
  5782 ;; This function calls:
  5783 ;;		___lldiv
  5784 ;;		___llmod
  5785 ;;		___wmul
  5786 ;;		_isdigit
  5787 ;; This function is called by:
  5788 ;;		_ftoa
  5789 ;; This function uses a non-reentrant model
  5790 ;;
  5791                           
  5792                           
  5793                           ;psect for function _sprintf
  5794  0036                     _sprintf:	
  5795                           
  5796                           ;incstack = 0
  5797                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5798                           ;sprintf@sp stored from wreg
  5799  0036  0020               	movlb	0	; select bank0
  5800  0037  00CF               	movwf	sprintf@sp
  5801                           
  5802                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  5803  0038  303B               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5804  0039  00C3               	movwf	??_sprintf
  5805  003A  0843               	movf	??_sprintf,w
  5806  003B  00CA               	movwf	sprintf@ap
  5807  003C                     l2735:	
  5808                           ;doprnt.c: 548: while((c = *f++)) {
  5809                           
  5810  003C  083A               	movf	sprintf@f+1,w
  5811  003D  00C4               	movwf	??_sprintf+1
  5812  003E  0839               	movf	sprintf@f,w
  5813  003F  00C3               	movwf	??_sprintf
  5814  0040  0AB9               	incf	sprintf@f,f
  5815  0041  1903               	skipnz
  5816  0042  0ABA               	incf	sprintf@f+1,f
  5817  0043  0843               	movf	??_sprintf,w
  5818  0044  0084               	movwf	4
  5819  0045  0844               	movf	??_sprintf+1,w
  5820  0046  0085               	movwf	5
  5821  0047  0800               	movf	0,w	;code access
  5822  0048  00C5               	movwf	??_sprintf+2
  5823  0049  0845               	movf	??_sprintf+2,w
  5824  004A  00D4               	movwf	sprintf@c
  5825  004B  0854               	movf	sprintf@c,w
  5826  004C  1903               	btfsc	3,2
  5827  004D  29FD               	goto	l2737
  5828                           
  5829                           ;doprnt.c: 550: if(c != '%')
  5830  004E  3025               	movlw	37
  5831  004F  0654               	xorwf	sprintf@c,w
  5832  0050  1903               	btfsc	3,2
  5833  0051  285F               	goto	l2647
  5834                           
  5835                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  5836  0052  0854               	movf	sprintf@c,w
  5837  0053  00C3               	movwf	??_sprintf
  5838  0054  084F               	movf	sprintf@sp,w
  5839  0055  0086               	movwf	6
  5840  0056  3001               	movlw	1	; select bank2/3
  5841  0057  0087               	movwf	7
  5842  0058  0843               	movf	??_sprintf,w
  5843  0059  0081               	movwf	1
  5844  005A  3001               	movlw	1
  5845  005B  00C3               	movwf	??_sprintf
  5846  005C  0843               	movf	??_sprintf,w
  5847  005D  07CF               	addwf	sprintf@sp,f
  5848                           
  5849                           ;doprnt.c: 554: continue;
  5850  005E  283C               	goto	l2735
  5851  005F                     l2647:	
  5852                           
  5853                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  5854  005F  01D0               	clrf	sprintf@width
  5855  0060  01D1               	clrf	sprintf@width+1
  5856                           
  5857                           ;doprnt.c: 560: flag = 0;
  5858  0061  01C9               	clrf	sprintf@flag
  5859                           
  5860                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  5861  0062  0839               	movf	sprintf@f,w
  5862  0063  0084               	movwf	4
  5863  0064  083A               	movf	sprintf@f+1,w
  5864  0065  0085               	movwf	5
  5865  0066  0800               	movf	0,w	;code access
  5866  0067  3196  26F9  3180   	fcall	_isdigit
  5867  006A  1C03               	btfss	3,0
  5868  006B  289D               	goto	l2661
  5869                           
  5870                           ;doprnt.c: 610: width = 0;
  5871  006C  0020               	movlb	0	; select bank0
  5872  006D  01D0               	clrf	sprintf@width
  5873  006E  01D1               	clrf	sprintf@width+1
  5874  006F                     l2653:	
  5875                           ;doprnt.c: 611: do {
  5876                           
  5877                           
  5878                           ;doprnt.c: 612: width *= 10;
  5879  006F  300A               	movlw	10
  5880  0070  0020               	movlb	0	; select bank0
  5881  0071  00A1               	movwf	___wmul@multiplier
  5882  0072  3000               	movlw	0
  5883  0073  00A2               	movwf	___wmul@multiplier+1
  5884  0074  0851               	movf	sprintf@width+1,w
  5885  0075  00A4               	movwf	___wmul@multiplicand+1
  5886  0076  0850               	movf	sprintf@width,w
  5887  0077  00A3               	movwf	___wmul@multiplicand
  5888  0078  3197  27C8  3180   	fcall	___wmul
  5889  007B  0020               	movlb	0	; select bank0
  5890  007C  0822               	movf	?___wmul+1,w
  5891  007D  00D1               	movwf	sprintf@width+1
  5892  007E  0821               	movf	?___wmul,w
  5893  007F  00D0               	movwf	sprintf@width
  5894                           
  5895                           ;doprnt.c: 613: width += *f++ - '0';
  5896  0080  0839               	movf	sprintf@f,w
  5897  0081  0084               	movwf	4
  5898  0082  083A               	movf	sprintf@f+1,w
  5899  0083  0085               	movwf	5
  5900  0084  0800               	movf	0,w	;code access
  5901  0085  3ED0               	addlw	208
  5902  0086  00C3               	movwf	??_sprintf
  5903  0087  30FF               	movlw	255
  5904  0088  1803               	skipnc
  5905  0089  3000               	movlw	0
  5906  008A  00C4               	movwf	??_sprintf+1
  5907  008B  0843               	movf	??_sprintf,w
  5908  008C  07D0               	addwf	sprintf@width,f
  5909  008D  0844               	movf	??_sprintf+1,w
  5910  008E  3DD1               	addwfc	sprintf@width+1,f
  5911  008F  3001               	movlw	1
  5912  0090  07B9               	addwf	sprintf@f,f
  5913  0091  3000               	movlw	0
  5914  0092  3DBA               	addwfc	sprintf@f+1,f
  5915                           
  5916                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  5917  0093  0839               	movf	sprintf@f,w
  5918  0094  0084               	movwf	4
  5919  0095  083A               	movf	sprintf@f+1,w
  5920  0096  0085               	movwf	5
  5921  0097  0800               	movf	0,w	;code access
  5922  0098  3196  26F9  3180   	fcall	_isdigit
  5923  009B  1803               	btfsc	3,0
  5924  009C  286F               	goto	l2653
  5925  009D                     l2661:	
  5926                           
  5927                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  5928  009D  0020               	movlb	0	; select bank0
  5929  009E  0839               	movf	sprintf@f,w
  5930  009F  0084               	movwf	4
  5931  00A0  083A               	movf	sprintf@f+1,w
  5932  00A1  0085               	movwf	5
  5933  00A2  0012               	moviw fsr0++
  5934  00A3  3A2E               	xorlw	46
  5935  00A4  1D03               	btfss	3,2
  5936  00A5  28DB               	goto	l2673
  5937                           
  5938                           ;doprnt.c: 625: f++;
  5939  00A6  3001               	movlw	1
  5940  00A7  07B9               	addwf	sprintf@f,f
  5941  00A8  3000               	movlw	0
  5942  00A9  3DBA               	addwfc	sprintf@f+1,f
  5943                           
  5944                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  5945  00AA  01D2               	clrf	sprintf@prec
  5946  00AB  01D3               	clrf	sprintf@prec+1
  5947  00AC                     l2671:	
  5948                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  5949                           
  5950  00AC  0839               	movf	sprintf@f,w
  5951  00AD  0084               	movwf	4
  5952  00AE  083A               	movf	sprintf@f+1,w
  5953  00AF  0085               	movwf	5
  5954  00B0  0800               	movf	0,w	;code access
  5955  00B1  3196  26F9  3180   	fcall	_isdigit
  5956  00B4  1C03               	btfss	3,0
  5957  00B5  28E6               	goto	l2679
  5958                           
  5959                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  5960  00B6  0020               	movlb	0	; select bank0
  5961  00B7  0839               	movf	sprintf@f,w
  5962  00B8  0084               	movwf	4
  5963  00B9  083A               	movf	sprintf@f+1,w
  5964  00BA  0085               	movwf	5
  5965  00BB  0800               	movf	0,w	;code access
  5966  00BC  00C3               	movwf	??_sprintf
  5967  00BD  01C4               	clrf	??_sprintf+1
  5968  00BE  0853               	movf	sprintf@prec+1,w
  5969  00BF  00A2               	movwf	___wmul@multiplier+1
  5970  00C0  0852               	movf	sprintf@prec,w
  5971  00C1  00A1               	movwf	___wmul@multiplier
  5972  00C2  300A               	movlw	10
  5973  00C3  00A3               	movwf	___wmul@multiplicand
  5974  00C4  3000               	movlw	0
  5975  00C5  00A4               	movwf	___wmul@multiplicand+1
  5976  00C6  3197  27C8  3180   	fcall	___wmul
  5977  00C9  0020               	movlb	0	; select bank0
  5978  00CA  0843               	movf	??_sprintf,w
  5979  00CB  0721               	addwf	?___wmul,w
  5980  00CC  00C5               	movwf	??_sprintf+2
  5981  00CD  0844               	movf	??_sprintf+1,w
  5982  00CE  3D22               	addwfc	?___wmul+1,w
  5983  00CF  00C6               	movwf	??_sprintf+3
  5984  00D0  0845               	movf	??_sprintf+2,w
  5985  00D1  3ED0               	addlw	208
  5986  00D2  00D2               	movwf	sprintf@prec
  5987  00D3  30FF               	movlw	255
  5988  00D4  3D46               	addwfc	??_sprintf+3,w
  5989  00D5  00D3               	movwf	sprintf@prec+1
  5990  00D6  3001               	movlw	1
  5991  00D7  07B9               	addwf	sprintf@f,f
  5992  00D8  3000               	movlw	0
  5993  00D9  3DBA               	addwfc	sprintf@f+1,f
  5994  00DA  28AC               	goto	l2671
  5995  00DB                     l2673:	
  5996                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  5997                           
  5998                           
  5999                           ;doprnt.c: 645: prec = 0;
  6000  00DB  0020               	movlb	0	; select bank0
  6001  00DC  01D2               	clrf	sprintf@prec
  6002  00DD  01D3               	clrf	sprintf@prec+1
  6003                           
  6004                           ;doprnt.c: 654: switch(c = *f++) {
  6005                           
  6006                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  6007  00DE  28E6               	goto	l2679
  6008  00DF                     l491:	
  6009                           ;doprnt.c: 660: case 'l':
  6010                           
  6011                           ;doprnt.c: 657: goto alldone;
  6012                           
  6013                           ;doprnt.c: 656: case 0:
  6014                           
  6015                           
  6016                           ;doprnt.c: 662: flag |= 0x10;
  6017  00DF  1649               	bsf	sprintf@flag,4
  6018                           
  6019                           ;doprnt.c: 663: goto loop;
  6020  00E0  28E6               	goto	l2679
  6021  00E1                     l2675:	
  6022                           ;doprnt.c: 836: case 'u':
  6023                           
  6024                           ;doprnt.c: 832: continue;
  6025                           
  6026                           ;doprnt.c: 821: default:
  6027                           
  6028                           
  6029                           ;doprnt.c: 837: flag |= 0xC0;
  6030  00E1  30C0               	movlw	192
  6031  00E2  00C3               	movwf	??_sprintf
  6032  00E3  0843               	movf	??_sprintf,w
  6033  00E4  04C9               	iorwf	sprintf@flag,f
  6034                           
  6035                           ;doprnt.c: 841: }
  6036                           
  6037                           ;doprnt.c: 838: break;
  6038  00E5  28FE               	goto	l494
  6039  00E6                     l2679:	
  6040  00E6  0020               	movlb	0	; select bank0
  6041  00E7  083A               	movf	sprintf@f+1,w
  6042  00E8  00C4               	movwf	??_sprintf+1
  6043  00E9  0839               	movf	sprintf@f,w
  6044  00EA  00C3               	movwf	??_sprintf
  6045  00EB  0AB9               	incf	sprintf@f,f
  6046  00EC  1903               	skipnz
  6047  00ED  0ABA               	incf	sprintf@f+1,f
  6048  00EE  0843               	movf	??_sprintf,w
  6049  00EF  0084               	movwf	4
  6050  00F0  0844               	movf	??_sprintf+1,w
  6051  00F1  0085               	movwf	5
  6052  00F2  0800               	movf	0,w	;code access
  6053  00F3  00D4               	movwf	sprintf@c
  6054                           
  6055                           ; Switch size 1, requested type "space"
  6056                           ; Number of cases is 3, Range of values is 0 to 117
  6057                           ; switch strategies available:
  6058                           ; Name         Instructions Cycles
  6059                           ; simple_byte           10     6 (average)
  6060                           ; direct_byte          242     6 (fixed)
  6061                           ; jumptable            260     6 (fixed)
  6062                           ;	Chosen strategy is simple_byte
  6063  00F4  3A00               	xorlw	0	; case 0
  6064  00F5  1903               	skipnz
  6065  00F6  29FD               	goto	l2737
  6066  00F7  3A6C               	xorlw	108	; case 108
  6067  00F8  1903               	skipnz
  6068  00F9  28DF               	goto	l491
  6069  00FA  3A19               	xorlw	25	; case 117
  6070  00FB  1903               	skipnz
  6071  00FC  28E1               	goto	l2675
  6072  00FD  283C               	goto	l2735
  6073  00FE                     l494:	
  6074                           
  6075                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  6076  00FE  1E49               	btfss	sprintf@flag,4
  6077  00FF  290D               	goto	l2685
  6078                           
  6079                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  6080  0100  084A               	movf	sprintf@ap,w
  6081  0101  0086               	movwf	6
  6082  0102  0187               	clrf	7
  6083  0103  3F40               	moviw [0]fsr1
  6084  0104  00CB               	movwf	sprintf@val
  6085  0105  3F41               	moviw [1]fsr1
  6086  0106  00CC               	movwf	sprintf@val+1
  6087  0107  3F42               	moviw [2]fsr1
  6088  0108  00CD               	movwf	sprintf@val+2
  6089  0109  3F43               	moviw [3]fsr1
  6090  010A  00CE               	movwf	sprintf@val+3
  6091  010B  3004               	movlw	4
  6092  010C  291B               	goto	L1
  6093  010D                     l2685:	
  6094                           
  6095                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  6096  010D  084A               	movf	sprintf@ap,w
  6097  010E  0086               	movwf	6
  6098  010F  0187               	clrf	7
  6099  0110  3F40               	moviw [0]fsr1
  6100  0111  00C3               	movwf	??_sprintf
  6101  0112  3F41               	moviw [1]fsr1
  6102  0113  00C4               	movwf	??_sprintf+1
  6103  0114  0843               	movf	??_sprintf,w
  6104  0115  00CB               	movwf	sprintf@val
  6105  0116  0844               	movf	??_sprintf+1,w
  6106  0117  00CC               	movwf	sprintf@val+1
  6107  0118  01CD               	clrf	sprintf@val+2
  6108  0119  01CE               	clrf	sprintf@val+3
  6109  011A  3002               	movlw	2
  6110  011B                     L1:	
  6111  011B  00C3               	movwf	??_sprintf
  6112  011C  0843               	movf	??_sprintf,w
  6113  011D  07CA               	addwf	sprintf@ap,f
  6114                           
  6115                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  6116  011E  0852               	movf	sprintf@prec,w
  6117  011F  0453               	iorwf	sprintf@prec+1,w
  6118  0120  1D03               	btfss	3,2
  6119  0121  292C               	goto	l2695
  6120  0122  084E               	movf	sprintf@val+3,w
  6121  0123  044D               	iorwf	sprintf@val+2,w
  6122  0124  044C               	iorwf	sprintf@val+1,w
  6123  0125  044B               	iorwf	sprintf@val,w
  6124  0126  1D03               	skipz
  6125  0127  292C               	goto	l2695
  6126                           
  6127                           ;doprnt.c: 1310: prec++;
  6128  0128  3001               	movlw	1
  6129  0129  07D2               	addwf	sprintf@prec,f
  6130  012A  3000               	movlw	0
  6131  012B  3DD3               	addwfc	sprintf@prec+1,f
  6132  012C                     l2695:	
  6133                           
  6134                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6135  012C  01D4               	clrf	sprintf@c
  6136  012D  0AD4               	incf	sprintf@c,f
  6137  012E  300A               	movlw	10
  6138  012F  0654               	xorwf	sprintf@c,w
  6139  0130  1903               	btfsc	3,2
  6140  0131  295F               	goto	l2707
  6141  0132                     l2701:	
  6142                           
  6143                           ;doprnt.c: 1325: if(val < dpowers[c])
  6144  0132  0854               	movf	sprintf@c,w
  6145  0133  00C3               	movwf	??_sprintf
  6146  0134  01C4               	clrf	??_sprintf+1
  6147  0135  35C3               	lslf	??_sprintf,f
  6148  0136  0DC4               	rlf	??_sprintf+1,f
  6149  0137  35C3               	lslf	??_sprintf,f
  6150  0138  0DC4               	rlf	??_sprintf+1,f
  6151  0139  3000               	movlw	low (_dpowers| (0+32768))
  6152  013A  0743               	addwf	??_sprintf,w
  6153  013B  0084               	movwf	4
  6154  013C  3090               	movlw	high (_dpowers| (0+32768))
  6155  013D  3D44               	addwfc	??_sprintf+1,w
  6156  013E  0085               	movwf	5
  6157  013F  3F00               	moviw [0]fsr0
  6158  0140  00C5               	movwf	??_sprintf+2
  6159  0141  3F01               	moviw [1]fsr0
  6160  0142  00C6               	movwf	??_sprintf+3
  6161  0143  3F02               	moviw [2]fsr0
  6162  0144  00C7               	movwf	??_sprintf+4
  6163  0145  3F03               	moviw [3]fsr0
  6164  0146  00C8               	movwf	??_sprintf+5
  6165  0147  0848               	movf	??_sprintf+5,w
  6166  0148  024E               	subwf	sprintf@val+3,w
  6167  0149  1D03               	skipz
  6168  014A  2955               	goto	u2405
  6169  014B  0847               	movf	??_sprintf+4,w
  6170  014C  024D               	subwf	sprintf@val+2,w
  6171  014D  1D03               	skipz
  6172  014E  2955               	goto	u2405
  6173  014F  0846               	movf	??_sprintf+3,w
  6174  0150  024C               	subwf	sprintf@val+1,w
  6175  0151  1D03               	skipz
  6176  0152  2955               	goto	u2405
  6177  0153  0845               	movf	??_sprintf+2,w
  6178  0154  024B               	subwf	sprintf@val,w
  6179  0155                     u2405:	
  6180  0155  1C03               	btfss	3,0
  6181  0156  295F               	goto	l2707
  6182                           
  6183                           ;doprnt.c: 1326: break;
  6184  0157  3001               	movlw	1
  6185  0158  00C3               	movwf	??_sprintf
  6186  0159  0843               	movf	??_sprintf,w
  6187  015A  07D4               	addwf	sprintf@c,f
  6188  015B  300A               	movlw	10
  6189  015C  0654               	xorwf	sprintf@c,w
  6190  015D  1D03               	btfss	3,2
  6191  015E  2932               	goto	l2701
  6192  015F                     l2707:	
  6193                           
  6194                           ;doprnt.c: 1358: if(c < prec)
  6195  015F  0853               	movf	sprintf@prec+1,w
  6196  0160  3A80               	xorlw	128
  6197  0161  3C80               	sublw	128
  6198  0162  1D03               	skipz
  6199  0163  2966               	goto	u2425
  6200  0164  0852               	movf	sprintf@prec,w
  6201  0165  0254               	subwf	sprintf@c,w
  6202  0166                     u2425:	
  6203  0166  1803               	skipnc
  6204  0167  296E               	goto	l2711
  6205                           
  6206                           ;doprnt.c: 1359: c = prec;
  6207  0168  0020               	movlb	0	; select bank0
  6208  0169  0852               	movf	sprintf@prec,w
  6209  016A  00C3               	movwf	??_sprintf
  6210  016B  0843               	movf	??_sprintf,w
  6211  016C  00D4               	movwf	sprintf@c
  6212  016D  2982               	goto	l502
  6213  016E                     l2711:	
  6214                           
  6215                           ;doprnt.c: 1360: else if(prec < c)
  6216  016E  0020               	movlb	0	; select bank0
  6217  016F  0853               	movf	sprintf@prec+1,w
  6218  0170  3A80               	xorlw	128
  6219  0171  00C3               	movwf	??_sprintf
  6220  0172  3080               	movlw	128
  6221  0173  0243               	subwf	??_sprintf,w
  6222  0174  1D03               	skipz
  6223  0175  2978               	goto	u2435
  6224  0176  0854               	movf	sprintf@c,w
  6225  0177  0252               	subwf	sprintf@prec,w
  6226  0178                     u2435:	
  6227  0178  1803               	skipnc
  6228  0179  2982               	goto	l502
  6229                           
  6230                           ;doprnt.c: 1361: prec = c;
  6231  017A  0020               	movlb	0	; select bank0
  6232  017B  0854               	movf	sprintf@c,w
  6233  017C  00C3               	movwf	??_sprintf
  6234  017D  01C4               	clrf	??_sprintf+1
  6235  017E  0843               	movf	??_sprintf,w
  6236  017F  00D2               	movwf	sprintf@prec
  6237  0180  0844               	movf	??_sprintf+1,w
  6238  0181  00D3               	movwf	sprintf@prec+1
  6239  0182                     l502:	
  6240                           
  6241                           ;doprnt.c: 1400: if(width > c)
  6242  0182  0020               	movlb	0	; select bank0
  6243  0183  0851               	movf	sprintf@width+1,w
  6244  0184  3A80               	xorlw	128
  6245  0185  3C80               	sublw	128
  6246  0186  1D03               	skipz
  6247  0187  298A               	goto	u2445
  6248  0188  0850               	movf	sprintf@width,w
  6249  0189  0254               	subwf	sprintf@c,w
  6250  018A                     u2445:	
  6251  018A  1803               	skipnc
  6252  018B  2995               	goto	l2717
  6253                           
  6254                           ;doprnt.c: 1401: width -= c;
  6255  018C  0020               	movlb	0	; select bank0
  6256  018D  0854               	movf	sprintf@c,w
  6257  018E  00C3               	movwf	??_sprintf
  6258  018F  01C4               	clrf	??_sprintf+1
  6259  0190  0843               	movf	??_sprintf,w
  6260  0191  02D0               	subwf	sprintf@width,f
  6261  0192  0844               	movf	??_sprintf+1,w
  6262  0193  3BD1               	subwfb	sprintf@width+1,f
  6263  0194  2998               	goto	l2719
  6264  0195                     l2717:	
  6265                           
  6266                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  6267  0195  0020               	movlb	0	; select bank0
  6268  0196  01D0               	clrf	sprintf@width
  6269  0197  01D1               	clrf	sprintf@width+1
  6270  0198                     l2719:	
  6271                           
  6272                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  6273  0198  0850               	movf	sprintf@width,w
  6274  0199  0451               	iorwf	sprintf@width+1,w
  6275  019A  1903               	btfsc	3,2
  6276  019B  29F2               	goto	l2733
  6277                           
  6278                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  6279                           
  6280                           ;doprnt.c: 1448: do
  6281  019C  3020               	movlw	32
  6282  019D  00C3               	movwf	??_sprintf
  6283  019E  084F               	movf	sprintf@sp,w
  6284  019F  0086               	movwf	6
  6285  01A0  3001               	movlw	1	; select bank2/3
  6286  01A1  0087               	movwf	7
  6287  01A2  0843               	movf	??_sprintf,w
  6288  01A3  0081               	movwf	1
  6289  01A4  3001               	movlw	1
  6290  01A5  00C3               	movwf	??_sprintf
  6291  01A6  0843               	movf	??_sprintf,w
  6292  01A7  07CF               	addwf	sprintf@sp,f
  6293                           
  6294                           ;doprnt.c: 1450: while(--width);
  6295  01A8  30FF               	movlw	255
  6296  01A9  07D0               	addwf	sprintf@width,f
  6297  01AA  30FF               	movlw	255
  6298  01AB  3DD1               	addwfc	sprintf@width+1,f
  6299  01AC  2998               	goto	l2719
  6300  01AD                     l2727:	
  6301                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  6302                           
  6303                           
  6304                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  6305  01AD  3000               	movlw	0
  6306  01AE  00B2               	movwf	___llmod@divisor+3
  6307  01AF  3000               	movlw	0
  6308  01B0  00B1               	movwf	___llmod@divisor+2
  6309  01B1  3000               	movlw	0
  6310  01B2  00B0               	movwf	___llmod@divisor+1
  6311  01B3  300A               	movlw	10
  6312  01B4  00AF               	movwf	___llmod@divisor
  6313  01B5  0853               	movf	sprintf@prec+1,w
  6314  01B6  0085               	movwf	5
  6315  01B7  0852               	movf	sprintf@prec,w
  6316  01B8  0084               	movwf	4
  6317  01B9  3584               	lslf	4,f
  6318  01BA  0D85               	rlf	5,f
  6319  01BB  3584               	lslf	4,f
  6320  01BC  0D85               	rlf	5,f
  6321  01BD  3000               	movlw	low (_dpowers| (0+32768))
  6322  01BE  0784               	addwf	4,f
  6323  01BF  3090               	movlw	high (_dpowers| (0+32768))
  6324  01C0  3D85               	addwfc	5,f
  6325  01C1  3F00               	moviw [0]fsr0
  6326  01C2  00A1               	movwf	___lldiv@divisor
  6327  01C3  3F01               	moviw [1]fsr0
  6328  01C4  00A2               	movwf	___lldiv@divisor+1
  6329  01C5  3F02               	moviw [2]fsr0
  6330  01C6  00A3               	movwf	___lldiv@divisor+2
  6331  01C7  3F03               	moviw [3]fsr0
  6332  01C8  00A4               	movwf	___lldiv@divisor+3
  6333  01C9  084E               	movf	sprintf@val+3,w
  6334  01CA  00A8               	movwf	___lldiv@dividend+3
  6335  01CB  084D               	movf	sprintf@val+2,w
  6336  01CC  00A7               	movwf	___lldiv@dividend+2
  6337  01CD  084C               	movf	sprintf@val+1,w
  6338  01CE  00A6               	movwf	___lldiv@dividend+1
  6339  01CF  084B               	movf	sprintf@val,w
  6340  01D0  00A5               	movwf	___lldiv@dividend
  6341  01D1  318C  24B4  3180   	fcall	___lldiv
  6342  01D4  0020               	movlb	0	; select bank0
  6343  01D5  0824               	movf	?___lldiv+3,w
  6344  01D6  00B6               	movwf	___llmod@dividend+3
  6345  01D7  0823               	movf	?___lldiv+2,w
  6346  01D8  00B5               	movwf	___llmod@dividend+2
  6347  01D9  0822               	movf	?___lldiv+1,w
  6348  01DA  00B4               	movwf	___llmod@dividend+1
  6349  01DB  0821               	movf	?___lldiv,w
  6350  01DC  00B3               	movwf	___llmod@dividend
  6351  01DD  318B  2391  3180   	fcall	___llmod
  6352  01E0  0020               	movlb	0	; select bank0
  6353  01E1  082F               	movf	?___llmod,w
  6354  01E2  3E30               	addlw	48
  6355  01E3  00C3               	movwf	??_sprintf
  6356  01E4  0843               	movf	??_sprintf,w
  6357  01E5  00D4               	movwf	sprintf@c
  6358                           
  6359                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  6360  01E6  0854               	movf	sprintf@c,w
  6361  01E7  00C3               	movwf	??_sprintf
  6362  01E8  084F               	movf	sprintf@sp,w
  6363  01E9  0086               	movwf	6
  6364  01EA  3001               	movlw	1	; select bank2/3
  6365  01EB  0087               	movwf	7
  6366  01EC  0843               	movf	??_sprintf,w
  6367  01ED  0081               	movwf	1
  6368  01EE  3001               	movlw	1
  6369  01EF  00C3               	movwf	??_sprintf
  6370  01F0  0843               	movf	??_sprintf,w
  6371  01F1  07CF               	addwf	sprintf@sp,f
  6372  01F2                     l2733:	
  6373  01F2  30FF               	movlw	255
  6374  01F3  07D2               	addwf	sprintf@prec,f
  6375  01F4  30FF               	movlw	255
  6376  01F5  3DD3               	addwfc	sprintf@prec+1,f
  6377  01F6  0A52               	incf	sprintf@prec,w
  6378  01F7  1D03               	skipz
  6379  01F8  29AD               	goto	l2727
  6380  01F9  0A53               	incf	sprintf@prec+1,w
  6381  01FA  1903               	btfsc	3,2
  6382  01FB  283C               	goto	l2735
  6383  01FC  29AD               	goto	l2727
  6384  01FD                     l2737:	
  6385                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  6386                           
  6387                           
  6388                           ;doprnt.c: 1557: *sp = 0;
  6389  01FD  084F               	movf	sprintf@sp,w
  6390  01FE  0086               	movwf	6
  6391  01FF  3001               	movlw	1	; select bank2/3
  6392  0200  0087               	movwf	7
  6393  0201  0181               	clrf	1
  6394  0202  0008               	return
  6395  0203                     __end_of_sprintf:	
  6396                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  6397                           
  6398                           
  6399                           	psect	text16
  6400  16F9                     __ptext16:	
  6401 ;; *************** function _isdigit *****************
  6402 ;; Defined at:
  6403 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  6404 ;; Parameters:    Size  Location     Type
  6405 ;;  c               1    wreg     unsigned char 
  6406 ;; Auto vars:     Size  Location     Type
  6407 ;;  c               1    2[BANK0 ] unsigned char 
  6408 ;; Return value:  Size  Location     Type
  6409 ;;		None               void
  6410 ;; Registers used:
  6411 ;;		wreg, status,2, status,0
  6412 ;; Tracked objects:
  6413 ;;		On entry : 0/0
  6414 ;;		On exit  : 0/0
  6415 ;;		Unchanged: 0/0
  6416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6418 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6420 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6421 ;;Total ram usage:        2 bytes
  6422 ;; Hardware stack levels used:    1
  6423 ;; Hardware stack levels required when called:    7
  6424 ;; This function calls:
  6425 ;;		Nothing
  6426 ;; This function is called by:
  6427 ;;		_sprintf
  6428 ;; This function uses a non-reentrant model
  6429 ;;
  6430                           
  6431                           
  6432                           ;psect for function _isdigit
  6433  16F9                     _isdigit:	
  6434                           
  6435                           ;incstack = 0
  6436                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6437                           ;isdigit@c stored from wreg
  6438  16F9  0020               	movlb	0	; select bank0
  6439  16FA  00A2               	movwf	isdigit@c
  6440  16FB  01A1               	clrf	_isdigit$1802
  6441  16FC  303A               	movlw	58
  6442  16FD  0222               	subwf	isdigit@c,w
  6443  16FE  1803               	skipnc
  6444  16FF  2F06               	goto	l2433
  6445  1700  3030               	movlw	48
  6446  1701  0222               	subwf	isdigit@c,w
  6447  1702  1C03               	skipc
  6448  1703  2F06               	goto	l2433
  6449  1704  01A1               	clrf	_isdigit$1802
  6450  1705  0AA1               	incf	_isdigit$1802,f
  6451  1706                     l2433:	
  6452  1706  0C21               	rrf	_isdigit$1802,w
  6453  1707  0008               	return
  6454  1708                     __end_of_isdigit:	
  6455                           
  6456                           	psect	text17
  6457  17C8                     __ptext17:	
  6458 ;; *************** function ___wmul *****************
  6459 ;; Defined at:
  6460 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  6461 ;; Parameters:    Size  Location     Type
  6462 ;;  multiplier      2    1[BANK0 ] unsigned int 
  6463 ;;  multiplicand    2    3[BANK0 ] unsigned int 
  6464 ;; Auto vars:     Size  Location     Type
  6465 ;;  product         2    5[BANK0 ] unsigned int 
  6466 ;; Return value:  Size  Location     Type
  6467 ;;                  2    1[BANK0 ] unsigned int 
  6468 ;; Registers used:
  6469 ;;		wreg, status,2, status,0
  6470 ;; Tracked objects:
  6471 ;;		On entry : 0/0
  6472 ;;		On exit  : 0/0
  6473 ;;		Unchanged: 0/0
  6474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6475 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6478 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6479 ;;Total ram usage:        6 bytes
  6480 ;; Hardware stack levels used:    1
  6481 ;; Hardware stack levels required when called:    7
  6482 ;; This function calls:
  6483 ;;		Nothing
  6484 ;; This function is called by:
  6485 ;;		_sprintf
  6486 ;; This function uses a non-reentrant model
  6487 ;;
  6488                           
  6489                           
  6490                           ;psect for function ___wmul
  6491  17C8                     ___wmul:	
  6492                           
  6493                           ;incstack = 0
  6494                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6495  17C8  0020               	movlb	0	; select bank0
  6496  17C9  01A5               	clrf	___wmul@product
  6497  17CA  01A6               	clrf	___wmul@product+1
  6498  17CB                     l2439:	
  6499  17CB  1C21               	btfss	___wmul@multiplier,0
  6500  17CC  2FD1               	goto	l517
  6501  17CD  0823               	movf	___wmul@multiplicand,w
  6502  17CE  07A5               	addwf	___wmul@product,f
  6503  17CF  0824               	movf	___wmul@multiplicand+1,w
  6504  17D0  3DA6               	addwfc	___wmul@product+1,f
  6505  17D1                     l517:	
  6506  17D1  3001               	movlw	1
  6507  17D2                     u1925:	
  6508  17D2  35A3               	lslf	___wmul@multiplicand,f
  6509  17D3  0DA4               	rlf	___wmul@multiplicand+1,f
  6510  17D4  0B89               	decfsz	9,f
  6511  17D5  2FD2               	goto	u1925
  6512  17D6  3001               	movlw	1
  6513  17D7                     u1935:	
  6514  17D7  36A2               	lsrf	___wmul@multiplier+1,f
  6515  17D8  0CA1               	rrf	___wmul@multiplier,f
  6516  17D9  0B89               	decfsz	9,f
  6517  17DA  2FD7               	goto	u1935
  6518  17DB  0821               	movf	___wmul@multiplier,w
  6519  17DC  0422               	iorwf	___wmul@multiplier+1,w
  6520  17DD  1D03               	btfss	3,2
  6521  17DE  2FCB               	goto	l2439
  6522  17DF  0826               	movf	___wmul@product+1,w
  6523  17E0  00A2               	movwf	?___wmul+1
  6524  17E1  0825               	movf	___wmul@product,w
  6525  17E2  00A1               	movwf	?___wmul
  6526  17E3  0008               	return
  6527  17E4                     __end_of___wmul:	
  6528                           
  6529                           	psect	text18
  6530  0B91                     __ptext18:	
  6531 ;; *************** function ___llmod *****************
  6532 ;; Defined at:
  6533 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;  divisor         4   15[BANK0 ] unsigned long 
  6536 ;;  dividend        4   19[BANK0 ] unsigned long 
  6537 ;; Auto vars:     Size  Location     Type
  6538 ;;  counter         1   24[BANK0 ] unsigned char 
  6539 ;; Return value:  Size  Location     Type
  6540 ;;                  4   15[BANK0 ] unsigned long 
  6541 ;; Registers used:
  6542 ;;		wreg, status,2, status,0
  6543 ;; Tracked objects:
  6544 ;;		On entry : 0/0
  6545 ;;		On exit  : 0/0
  6546 ;;		Unchanged: 0/0
  6547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6548 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;Total ram usage:       10 bytes
  6553 ;; Hardware stack levels used:    1
  6554 ;; Hardware stack levels required when called:    7
  6555 ;; This function calls:
  6556 ;;		Nothing
  6557 ;; This function is called by:
  6558 ;;		_sprintf
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           
  6563                           ;psect for function ___llmod
  6564  0B91                     ___llmod:	
  6565                           
  6566                           ;incstack = 0
  6567                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  6568  0B91  0020               	movlb	0	; select bank0
  6569  0B92  0832               	movf	___llmod@divisor+3,w
  6570  0B93  0431               	iorwf	___llmod@divisor+2,w
  6571  0B94  0430               	iorwf	___llmod@divisor+1,w
  6572  0B95  042F               	iorwf	___llmod@divisor,w
  6573  0B96  1903               	skipnz
  6574  0B97  2BCB               	goto	l2561
  6575  0B98  01B8               	clrf	___llmod@counter
  6576  0B99  0AB8               	incf	___llmod@counter,f
  6577  0B9A                     l2551:	
  6578  0B9A  1BB2               	btfsc	___llmod@divisor+3,7
  6579  0B9B  2BA8               	goto	l2553
  6580  0B9C  3001               	movlw	1
  6581  0B9D                     u2265:	
  6582  0B9D  35AF               	lslf	___llmod@divisor,f
  6583  0B9E  0DB0               	rlf	___llmod@divisor+1,f
  6584  0B9F  0DB1               	rlf	___llmod@divisor+2,f
  6585  0BA0  0DB2               	rlf	___llmod@divisor+3,f
  6586  0BA1  0B89               	decfsz	9,f
  6587  0BA2  2B9D               	goto	u2265
  6588  0BA3  3001               	movlw	1
  6589  0BA4  00B7               	movwf	??___llmod
  6590  0BA5  0837               	movf	??___llmod,w
  6591  0BA6  07B8               	addwf	___llmod@counter,f
  6592  0BA7  2B9A               	goto	l2551
  6593  0BA8                     l2553:	
  6594  0BA8  0832               	movf	___llmod@divisor+3,w
  6595  0BA9  0236               	subwf	___llmod@dividend+3,w
  6596  0BAA  1D03               	skipz
  6597  0BAB  2BB6               	goto	u2285
  6598  0BAC  0831               	movf	___llmod@divisor+2,w
  6599  0BAD  0235               	subwf	___llmod@dividend+2,w
  6600  0BAE  1D03               	skipz
  6601  0BAF  2BB6               	goto	u2285
  6602  0BB0  0830               	movf	___llmod@divisor+1,w
  6603  0BB1  0234               	subwf	___llmod@dividend+1,w
  6604  0BB2  1D03               	skipz
  6605  0BB3  2BB6               	goto	u2285
  6606  0BB4  082F               	movf	___llmod@divisor,w
  6607  0BB5  0233               	subwf	___llmod@dividend,w
  6608  0BB6                     u2285:	
  6609  0BB6  1C03               	skipc
  6610  0BB7  2BC0               	goto	l2557
  6611  0BB8  082F               	movf	___llmod@divisor,w
  6612  0BB9  02B3               	subwf	___llmod@dividend,f
  6613  0BBA  0830               	movf	___llmod@divisor+1,w
  6614  0BBB  3BB4               	subwfb	___llmod@dividend+1,f
  6615  0BBC  0831               	movf	___llmod@divisor+2,w
  6616  0BBD  3BB5               	subwfb	___llmod@dividend+2,f
  6617  0BBE  0832               	movf	___llmod@divisor+3,w
  6618  0BBF  3BB6               	subwfb	___llmod@dividend+3,f
  6619  0BC0                     l2557:	
  6620  0BC0  3001               	movlw	1
  6621  0BC1                     u2295:	
  6622  0BC1  36B2               	lsrf	___llmod@divisor+3,f
  6623  0BC2  0CB1               	rrf	___llmod@divisor+2,f
  6624  0BC3  0CB0               	rrf	___llmod@divisor+1,f
  6625  0BC4  0CAF               	rrf	___llmod@divisor,f
  6626  0BC5  0B89               	decfsz	9,f
  6627  0BC6  2BC1               	goto	u2295
  6628  0BC7  3001               	movlw	1
  6629  0BC8  02B8               	subwf	___llmod@counter,f
  6630  0BC9  1D03               	btfss	3,2
  6631  0BCA  2BA8               	goto	l2553
  6632  0BCB                     l2561:	
  6633  0BCB  0836               	movf	___llmod@dividend+3,w
  6634  0BCC  00B2               	movwf	?___llmod+3
  6635  0BCD  0835               	movf	___llmod@dividend+2,w
  6636  0BCE  00B1               	movwf	?___llmod+2
  6637  0BCF  0834               	movf	___llmod@dividend+1,w
  6638  0BD0  00B0               	movwf	?___llmod+1
  6639  0BD1  0833               	movf	___llmod@dividend,w
  6640  0BD2  00AF               	movwf	?___llmod
  6641  0BD3  0008               	return
  6642  0BD4                     __end_of___llmod:	
  6643                           
  6644                           	psect	text19
  6645  0CB4                     __ptext19:	
  6646 ;; *************** function ___lldiv *****************
  6647 ;; Defined at:
  6648 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  6649 ;; Parameters:    Size  Location     Type
  6650 ;;  divisor         4    1[BANK0 ] unsigned long 
  6651 ;;  dividend        4    5[BANK0 ] unsigned long 
  6652 ;; Auto vars:     Size  Location     Type
  6653 ;;  quotient        4   10[BANK0 ] unsigned long 
  6654 ;;  counter         1   14[BANK0 ] unsigned char 
  6655 ;; Return value:  Size  Location     Type
  6656 ;;                  4    1[BANK0 ] unsigned long 
  6657 ;; Registers used:
  6658 ;;		wreg, status,2, status,0
  6659 ;; Tracked objects:
  6660 ;;		On entry : 0/0
  6661 ;;		On exit  : 0/0
  6662 ;;		Unchanged: 0/0
  6663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6664 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6665 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6666 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6667 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6668 ;;Total ram usage:       14 bytes
  6669 ;; Hardware stack levels used:    1
  6670 ;; Hardware stack levels required when called:    7
  6671 ;; This function calls:
  6672 ;;		Nothing
  6673 ;; This function is called by:
  6674 ;;		_sprintf
  6675 ;; This function uses a non-reentrant model
  6676 ;;
  6677                           
  6678                           
  6679                           ;psect for function ___lldiv
  6680  0CB4                     ___lldiv:	
  6681                           
  6682                           ;incstack = 0
  6683                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6684  0CB4  3000               	movlw	0
  6685  0CB5  0020               	movlb	0	; select bank0
  6686  0CB6  00AD               	movwf	___lldiv@quotient+3
  6687  0CB7  3000               	movlw	0
  6688  0CB8  00AC               	movwf	___lldiv@quotient+2
  6689  0CB9  3000               	movlw	0
  6690  0CBA  00AB               	movwf	___lldiv@quotient+1
  6691  0CBB  3000               	movlw	0
  6692  0CBC  00AA               	movwf	___lldiv@quotient
  6693  0CBD  0824               	movf	___lldiv@divisor+3,w
  6694  0CBE  0423               	iorwf	___lldiv@divisor+2,w
  6695  0CBF  0422               	iorwf	___lldiv@divisor+1,w
  6696  0CC0  0421               	iorwf	___lldiv@divisor,w
  6697  0CC1  1903               	skipnz
  6698  0CC2  2CFE               	goto	l2471
  6699  0CC3  01AE               	clrf	___lldiv@counter
  6700  0CC4  0AAE               	incf	___lldiv@counter,f
  6701  0CC5                     l2457:	
  6702  0CC5  1BA4               	btfsc	___lldiv@divisor+3,7
  6703  0CC6  2CD3               	goto	l2459
  6704  0CC7  3001               	movlw	1
  6705  0CC8                     u1965:	
  6706  0CC8  35A1               	lslf	___lldiv@divisor,f
  6707  0CC9  0DA2               	rlf	___lldiv@divisor+1,f
  6708  0CCA  0DA3               	rlf	___lldiv@divisor+2,f
  6709  0CCB  0DA4               	rlf	___lldiv@divisor+3,f
  6710  0CCC  0B89               	decfsz	9,f
  6711  0CCD  2CC8               	goto	u1965
  6712  0CCE  3001               	movlw	1
  6713  0CCF  00A9               	movwf	??___lldiv
  6714  0CD0  0829               	movf	??___lldiv,w
  6715  0CD1  07AE               	addwf	___lldiv@counter,f
  6716  0CD2  2CC5               	goto	l2457
  6717  0CD3                     l2459:	
  6718  0CD3  3001               	movlw	1
  6719  0CD4                     u1985:	
  6720  0CD4  35AA               	lslf	___lldiv@quotient,f
  6721  0CD5  0DAB               	rlf	___lldiv@quotient+1,f
  6722  0CD6  0DAC               	rlf	___lldiv@quotient+2,f
  6723  0CD7  0DAD               	rlf	___lldiv@quotient+3,f
  6724  0CD8  0B89               	decfsz	9,f
  6725  0CD9  2CD4               	goto	u1985
  6726  0CDA  0824               	movf	___lldiv@divisor+3,w
  6727  0CDB  0228               	subwf	___lldiv@dividend+3,w
  6728  0CDC  1D03               	skipz
  6729  0CDD  2CE8               	goto	u1995
  6730  0CDE  0823               	movf	___lldiv@divisor+2,w
  6731  0CDF  0227               	subwf	___lldiv@dividend+2,w
  6732  0CE0  1D03               	skipz
  6733  0CE1  2CE8               	goto	u1995
  6734  0CE2  0822               	movf	___lldiv@divisor+1,w
  6735  0CE3  0226               	subwf	___lldiv@dividend+1,w
  6736  0CE4  1D03               	skipz
  6737  0CE5  2CE8               	goto	u1995
  6738  0CE6  0821               	movf	___lldiv@divisor,w
  6739  0CE7  0225               	subwf	___lldiv@dividend,w
  6740  0CE8                     u1995:	
  6741  0CE8  1C03               	skipc
  6742  0CE9  2CF3               	goto	l2467
  6743  0CEA  0821               	movf	___lldiv@divisor,w
  6744  0CEB  02A5               	subwf	___lldiv@dividend,f
  6745  0CEC  0822               	movf	___lldiv@divisor+1,w
  6746  0CED  3BA6               	subwfb	___lldiv@dividend+1,f
  6747  0CEE  0823               	movf	___lldiv@divisor+2,w
  6748  0CEF  3BA7               	subwfb	___lldiv@dividend+2,f
  6749  0CF0  0824               	movf	___lldiv@divisor+3,w
  6750  0CF1  3BA8               	subwfb	___lldiv@dividend+3,f
  6751  0CF2  142A               	bsf	___lldiv@quotient,0
  6752  0CF3                     l2467:	
  6753  0CF3  3001               	movlw	1
  6754  0CF4                     u2005:	
  6755  0CF4  36A4               	lsrf	___lldiv@divisor+3,f
  6756  0CF5  0CA3               	rrf	___lldiv@divisor+2,f
  6757  0CF6  0CA2               	rrf	___lldiv@divisor+1,f
  6758  0CF7  0CA1               	rrf	___lldiv@divisor,f
  6759  0CF8  0B89               	decfsz	9,f
  6760  0CF9  2CF4               	goto	u2005
  6761  0CFA  3001               	movlw	1
  6762  0CFB  02AE               	subwf	___lldiv@counter,f
  6763  0CFC  1D03               	btfss	3,2
  6764  0CFD  2CD3               	goto	l2459
  6765  0CFE                     l2471:	
  6766  0CFE  082D               	movf	___lldiv@quotient+3,w
  6767  0CFF  00A4               	movwf	?___lldiv+3
  6768  0D00  082C               	movf	___lldiv@quotient+2,w
  6769  0D01  00A3               	movwf	?___lldiv+2
  6770  0D02  082B               	movf	___lldiv@quotient+1,w
  6771  0D03  00A2               	movwf	?___lldiv+1
  6772  0D04  082A               	movf	___lldiv@quotient,w
  6773  0D05  00A1               	movwf	?___lldiv
  6774  0D06  0008               	return
  6775  0D07                     __end_of___lldiv:	
  6776                           
  6777                           	psect	text20
  6778  0988                     __ptext20:	
  6779 ;; *************** function ___lltoft *****************
  6780 ;; Defined at:
  6781 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  6782 ;; Parameters:    Size  Location     Type
  6783 ;;  c               4    9[BANK0 ] unsigned long 
  6784 ;; Auto vars:     Size  Location     Type
  6785 ;;  exp             1   14[BANK0 ] unsigned char 
  6786 ;; Return value:  Size  Location     Type
  6787 ;;                  3    9[BANK0 ] float 
  6788 ;; Registers used:
  6789 ;;		wreg, status,2, status,0, pclath, cstack
  6790 ;; Tracked objects:
  6791 ;;		On entry : 0/0
  6792 ;;		On exit  : 0/0
  6793 ;;		Unchanged: 0/0
  6794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6795 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6796 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6797 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6799 ;;Total ram usage:        6 bytes
  6800 ;; Hardware stack levels used:    1
  6801 ;; Hardware stack levels required when called:    8
  6802 ;; This function calls:
  6803 ;;		___ftpack
  6804 ;; This function is called by:
  6805 ;;		_ftoa
  6806 ;; This function uses a non-reentrant model
  6807 ;;
  6808                           
  6809                           
  6810                           ;psect for function ___lltoft
  6811  0988                     ___lltoft:	
  6812                           
  6813                           ;incstack = 0
  6814                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6815  0988  308E               	movlw	142
  6816  0989  0020               	movlb	0	; select bank0
  6817  098A  00AD               	movwf	??___lltoft
  6818  098B  082D               	movf	??___lltoft,w
  6819  098C  00AE               	movwf	___lltoft@exp
  6820  098D                     l2887:	
  6821  098D  30FF               	movlw	255
  6822  098E  052C               	andwf	___lltoft@c+3,w
  6823  098F  1903               	btfsc	3,2
  6824  0990  299D               	goto	l2889
  6825  0991  3001               	movlw	1
  6826  0992                     u2785:	
  6827  0992  36AC               	lsrf	___lltoft@c+3,f
  6828  0993  0CAB               	rrf	___lltoft@c+2,f
  6829  0994  0CAA               	rrf	___lltoft@c+1,f
  6830  0995  0CA9               	rrf	___lltoft@c,f
  6831  0996  0B89               	decfsz	9,f
  6832  0997  2992               	goto	u2785
  6833  0998  3001               	movlw	1
  6834  0999  00AD               	movwf	??___lltoft
  6835  099A  082D               	movf	??___lltoft,w
  6836  099B  07AE               	addwf	___lltoft@exp,f
  6837  099C  298D               	goto	l2887
  6838  099D                     l2889:	
  6839  099D  0829               	movf	___lltoft@c,w
  6840  099E  00A1               	movwf	___ftpack@arg
  6841  099F  082A               	movf	___lltoft@c+1,w
  6842  09A0  00A2               	movwf	___ftpack@arg+1
  6843  09A1  082B               	movf	___lltoft@c+2,w
  6844  09A2  00A3               	movwf	___ftpack@arg+2
  6845  09A3  082E               	movf	___lltoft@exp,w
  6846  09A4  00AD               	movwf	??___lltoft
  6847  09A5  082D               	movf	??___lltoft,w
  6848  09A6  00A4               	movwf	___ftpack@exp
  6849  09A7  01A5               	clrf	___ftpack@sign
  6850  09A8  318D  2507         	fcall	___ftpack
  6851  09AA  0020               	movlb	0	; select bank0
  6852  09AB  0821               	movf	?___ftpack,w
  6853  09AC  00A9               	movwf	?___lltoft
  6854  09AD  0822               	movf	?___ftpack+1,w
  6855  09AE  00AA               	movwf	?___lltoft+1
  6856  09AF  0823               	movf	?___ftpack+2,w
  6857  09B0  00AB               	movwf	?___lltoft+2
  6858  09B1  0008               	return
  6859  09B2                     __end_of___lltoft:	
  6860                           
  6861                           	psect	text21
  6862  0EB2                     __ptext21:	
  6863 ;; *************** function ___fttol *****************
  6864 ;; Defined at:
  6865 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  6866 ;; Parameters:    Size  Location     Type
  6867 ;;  f1              3   72[BANK0 ] float 
  6868 ;; Auto vars:     Size  Location     Type
  6869 ;;  lval            4    5[BANK1 ] unsigned long 
  6870 ;;  exp1            1    9[BANK1 ] unsigned char 
  6871 ;;  sign1           1    4[BANK1 ] unsigned char 
  6872 ;; Return value:  Size  Location     Type
  6873 ;;                  4   72[BANK0 ] long 
  6874 ;; Registers used:
  6875 ;;		wreg, status,2, status,0
  6876 ;; Tracked objects:
  6877 ;;		On entry : 0/0
  6878 ;;		On exit  : 0/0
  6879 ;;		Unchanged: 0/0
  6880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6881 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6882 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6883 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6884 ;;      Totals:         0       4      10       0       0       0       0       0       0       0       0       0       
      +0       0
  6885 ;;Total ram usage:       14 bytes
  6886 ;; Hardware stack levels used:    1
  6887 ;; Hardware stack levels required when called:    7
  6888 ;; This function calls:
  6889 ;;		Nothing
  6890 ;; This function is called by:
  6891 ;;		_ftoa
  6892 ;; This function uses a non-reentrant model
  6893 ;;
  6894                           
  6895                           
  6896                           ;psect for function ___fttol
  6897  0EB2                     ___fttol:	
  6898                           
  6899                           ;incstack = 0
  6900                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6901  0EB2  0020               	movlb	0	; select bank0
  6902  0EB3  0868               	movf	___fttol@f1,w
  6903  0EB4  0021               	movlb	1	; select bank1
  6904  0EB5  00A0               	movwf	??___fttol^(0+128)
  6905  0EB6  0020               	movlb	0	; select bank0
  6906  0EB7  0869               	movf	___fttol@f1+1,w
  6907  0EB8  0021               	movlb	1	; select bank1
  6908  0EB9  00A1               	movwf	(??___fttol^(0+128)+1)
  6909  0EBA  0020               	movlb	0	; select bank0
  6910  0EBB  086A               	movf	___fttol@f1+2,w
  6911  0EBC  0021               	movlb	1	; select bank1
  6912  0EBD  00A2               	movwf	(??___fttol^(0+128)+2)
  6913  0EBE  1003               	clrc
  6914  0EBF  0D21               	rlf	(??___fttol^(0+128)+1),w
  6915  0EC0  0D22               	rlf	(??___fttol^(0+128)+2),w
  6916  0EC1  00A3               	movwf	(??___fttol+3)^(0+128)
  6917  0EC2  0823               	movf	(??___fttol+3)^(0+128),w
  6918  0EC3  00A9               	movwf	___fttol@exp1^(0+128)
  6919  0EC4  0829               	movf	___fttol@exp1^(0+128),w
  6920  0EC5  1D03               	btfss	3,2
  6921  0EC6  2ED1               	goto	l2847
  6922  0EC7  3000               	movlw	0
  6923  0EC8  0020               	movlb	0	; select bank0
  6924  0EC9  00EB               	movwf	?___fttol+3
  6925  0ECA  3000               	movlw	0
  6926  0ECB  00EA               	movwf	?___fttol+2
  6927  0ECC  3000               	movlw	0
  6928  0ECD  00E9               	movwf	?___fttol+1
  6929  0ECE  3000               	movlw	0
  6930  0ECF  00E8               	movwf	?___fttol
  6931  0ED0  0008               	return
  6932  0ED1                     l2847:	
  6933  0ED1  0020               	movlb	0	; select bank0
  6934  0ED2  0868               	movf	___fttol@f1,w
  6935  0ED3  0021               	movlb	1	; select bank1
  6936  0ED4  00A0               	movwf	??___fttol^(0+128)
  6937  0ED5  0020               	movlb	0	; select bank0
  6938  0ED6  0869               	movf	___fttol@f1+1,w
  6939  0ED7  0021               	movlb	1	; select bank1
  6940  0ED8  00A1               	movwf	(??___fttol^(0+128)+1)
  6941  0ED9  0020               	movlb	0	; select bank0
  6942  0EDA  086A               	movf	___fttol@f1+2,w
  6943  0EDB  0021               	movlb	1	; select bank1
  6944  0EDC  00A2               	movwf	(??___fttol^(0+128)+2)
  6945  0EDD  3017               	movlw	23
  6946  0EDE                     u2695:	
  6947  0EDE  36A2               	lsrf	(??___fttol^(0+128)+2),f
  6948  0EDF  0CA1               	rrf	(??___fttol^(0+128)+1),f
  6949  0EE0  0CA0               	rrf	??___fttol^(0+128),f
  6950  0EE1  0B89               	decfsz	9,f
  6951  0EE2  2EDE               	goto	u2695
  6952  0EE3  0820               	movf	??___fttol^(0+128),w
  6953  0EE4  00A3               	movwf	(??___fttol+3)^(0+128)
  6954  0EE5  0823               	movf	(??___fttol+3)^(0+128),w
  6955  0EE6  00A4               	movwf	___fttol@sign1^(0+128)
  6956  0EE7  0020               	movlb	0	; select bank0
  6957  0EE8  17E9               	bsf	___fttol@f1+1,7
  6958  0EE9  30FF               	movlw	255
  6959  0EEA  05E8               	andwf	___fttol@f1,f
  6960  0EEB  30FF               	movlw	255
  6961  0EEC  05E9               	andwf	___fttol@f1+1,f
  6962  0EED  3000               	movlw	0
  6963  0EEE  05EA               	andwf	___fttol@f1+2,f
  6964  0EEF  0868               	movf	___fttol@f1,w
  6965  0EF0  0021               	movlb	1	; select bank1
  6966  0EF1  00A5               	movwf	___fttol@lval^(0+128)
  6967  0EF2  0020               	movlb	0	; select bank0
  6968  0EF3  0869               	movf	___fttol@f1+1,w
  6969  0EF4  0021               	movlb	1	; select bank1
  6970  0EF5  00A6               	movwf	(___fttol@lval^(0+128)+1)
  6971  0EF6  0020               	movlb	0	; select bank0
  6972  0EF7  086A               	movf	___fttol@f1+2,w
  6973  0EF8  0021               	movlb	1	; select bank1
  6974  0EF9  00A7               	movwf	(___fttol@lval^(0+128)+2)
  6975  0EFA  01A8               	clrf	(___fttol@lval^(0+128)+3)
  6976  0EFB  308E               	movlw	142
  6977  0EFC  02A9               	subwf	___fttol@exp1^(0+128),f
  6978  0EFD  1FA9               	btfss	___fttol@exp1^(0+128),7
  6979  0EFE  2F1D               	goto	l2867
  6980  0EFF  0829               	movf	___fttol@exp1^(0+128),w
  6981  0F00  3A80               	xorlw	128
  6982  0F01  3E8F               	addlw	143
  6983  0F02  1803               	skipnc
  6984  0F03  2F0E               	goto	l2865
  6985  0F04  3000               	movlw	0
  6986  0F05  0020               	movlb	0	; select bank0
  6987  0F06  00EB               	movwf	?___fttol+3
  6988  0F07  3000               	movlw	0
  6989  0F08  00EA               	movwf	?___fttol+2
  6990  0F09  3000               	movlw	0
  6991  0F0A  00E9               	movwf	?___fttol+1
  6992  0F0B  3000               	movlw	0
  6993  0F0C  00E8               	movwf	?___fttol
  6994  0F0D  0008               	return
  6995  0F0E                     l2865:	
  6996  0F0E  3001               	movlw	1
  6997  0F0F                     u2725:	
  6998  0F0F  0021               	movlb	1	; select bank1
  6999  0F10  36A8               	lsrf	(___fttol@lval+3)^(0+128),f
  7000  0F11  0CA7               	rrf	(___fttol@lval+2)^(0+128),f
  7001  0F12  0CA6               	rrf	(___fttol@lval+1)^(0+128),f
  7002  0F13  0CA5               	rrf	___fttol@lval^(0+128),f
  7003  0F14  0B89               	decfsz	9,f
  7004  0F15  2F0F               	goto	u2725
  7005  0F16  3001               	movlw	1
  7006  0F17  00A0               	movwf	??___fttol^(0+128)
  7007  0F18  0820               	movf	??___fttol^(0+128),w
  7008  0F19  07A9               	addwf	___fttol@exp1^(0+128),f
  7009  0F1A  1903               	btfsc	3,2
  7010  0F1B  2F39               	goto	l2875
  7011  0F1C  2F0E               	goto	l2865
  7012  0F1D                     l2867:	
  7013  0F1D  3018               	movlw	24
  7014  0F1E  0229               	subwf	___fttol@exp1^(0+128),w
  7015  0F1F  1C03               	skipc
  7016  0F20  2F35               	goto	l811
  7017  0F21  3000               	movlw	0
  7018  0F22  0020               	movlb	0	; select bank0
  7019  0F23  00EB               	movwf	?___fttol+3
  7020  0F24  3000               	movlw	0
  7021  0F25  00EA               	movwf	?___fttol+2
  7022  0F26  3000               	movlw	0
  7023  0F27  00E9               	movwf	?___fttol+1
  7024  0F28  3000               	movlw	0
  7025  0F29  00E8               	movwf	?___fttol
  7026  0F2A  0008               	return
  7027  0F2B                     l2873:	
  7028  0F2B  3001               	movlw	1
  7029  0F2C                     u2755:	
  7030  0F2C  0021               	movlb	1	; select bank1
  7031  0F2D  35A5               	lslf	___fttol@lval^(0+128),f
  7032  0F2E  0DA6               	rlf	(___fttol@lval+1)^(0+128),f
  7033  0F2F  0DA7               	rlf	(___fttol@lval+2)^(0+128),f
  7034  0F30  0DA8               	rlf	(___fttol@lval+3)^(0+128),f
  7035  0F31  0B89               	decfsz	9,f
  7036  0F32  2F2C               	goto	u2755
  7037  0F33  3001               	movlw	1
  7038  0F34  02A9               	subwf	___fttol@exp1^(0+128),f
  7039  0F35                     l811:	
  7040  0F35  0021               	movlb	1	; select bank1
  7041  0F36  0829               	movf	___fttol@exp1^(0+128),w
  7042  0F37  1D03               	btfss	3,2
  7043  0F38  2F2B               	goto	l2873
  7044  0F39                     l2875:	
  7045  0F39  0824               	movf	___fttol@sign1^(0+128),w
  7046  0F3A  1903               	btfsc	3,2
  7047  0F3B  2F47               	goto	l2879
  7048  0F3C  09A5               	comf	___fttol@lval^(0+128),f
  7049  0F3D  09A6               	comf	(___fttol@lval+1)^(0+128),f
  7050  0F3E  09A7               	comf	(___fttol@lval+2)^(0+128),f
  7051  0F3F  09A8               	comf	(___fttol@lval+3)^(0+128),f
  7052  0F40  0AA5               	incf	___fttol@lval^(0+128),f
  7053  0F41  1903               	skipnz
  7054  0F42  0AA6               	incf	(___fttol@lval+1)^(0+128),f
  7055  0F43  1903               	skipnz
  7056  0F44  0AA7               	incf	(___fttol@lval+2)^(0+128),f
  7057  0F45  1903               	skipnz
  7058  0F46  0AA8               	incf	(___fttol@lval+3)^(0+128),f
  7059  0F47                     l2879:	
  7060  0F47  0828               	movf	(___fttol@lval+3)^(0+128),w
  7061  0F48  0020               	movlb	0	; select bank0
  7062  0F49  00EB               	movwf	?___fttol+3
  7063  0F4A  0021               	movlb	1	; select bank1
  7064  0F4B  0827               	movf	(___fttol@lval+2)^(0+128),w
  7065  0F4C  0020               	movlb	0	; select bank0
  7066  0F4D  00EA               	movwf	?___fttol+2
  7067  0F4E  0021               	movlb	1	; select bank1
  7068  0F4F  0826               	movf	(___fttol@lval+1)^(0+128),w
  7069  0F50  0020               	movlb	0	; select bank0
  7070  0F51  00E9               	movwf	?___fttol+1
  7071  0F52  0021               	movlb	1	; select bank1
  7072  0F53  0825               	movf	___fttol@lval^(0+128),w
  7073  0F54  0020               	movlb	0	; select bank0
  7074  0F55  00E8               	movwf	?___fttol
  7075  0F56  0008               	return
  7076  0F57                     __end_of___fttol:	
  7077                           
  7078                           	psect	text22
  7079  0833                     __ptext22:	
  7080 ;; *************** function ___ftsub *****************
  7081 ;; Defined at:
  7082 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  7083 ;; Parameters:    Size  Location     Type
  7084 ;;  f2              3   28[BANK0 ] float 
  7085 ;;  f1              3   31[BANK0 ] float 
  7086 ;; Auto vars:     Size  Location     Type
  7087 ;;		None
  7088 ;; Return value:  Size  Location     Type
  7089 ;;                  3   28[BANK0 ] float 
  7090 ;; Registers used:
  7091 ;;		wreg, status,2, status,0, pclath, cstack
  7092 ;; Tracked objects:
  7093 ;;		On entry : 0/0
  7094 ;;		On exit  : 0/0
  7095 ;;		Unchanged: 0/0
  7096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7097 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7100 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7101 ;;Total ram usage:        6 bytes
  7102 ;; Hardware stack levels used:    1
  7103 ;; Hardware stack levels required when called:    9
  7104 ;; This function calls:
  7105 ;;		___ftadd
  7106 ;; This function is called by:
  7107 ;;		_ftoa
  7108 ;; This function uses a non-reentrant model
  7109 ;;
  7110                           
  7111                           
  7112                           ;psect for function ___ftsub
  7113  0833                     ___ftsub:	
  7114                           
  7115                           ;incstack = 0
  7116                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  7117  0833  0020               	movlb	0	; select bank0
  7118  0834  083E               	movf	___ftsub@f2+2,w
  7119  0835  043D               	iorwf	___ftsub@f2+1,w
  7120  0836  043C               	iorwf	___ftsub@f2,w
  7121  0837  1903               	skipnz
  7122  0838  283B               	goto	l2837
  7123  0839  3080               	movlw	128
  7124  083A  06BE               	xorwf	___ftsub@f2+2,f
  7125  083B                     l2837:	
  7126  083B  083F               	movf	___ftsub@f1,w
  7127  083C  00AF               	movwf	___ftadd@f1
  7128  083D  0840               	movf	___ftsub@f1+1,w
  7129  083E  00B0               	movwf	___ftadd@f1+1
  7130  083F  0841               	movf	___ftsub@f1+2,w
  7131  0840  00B1               	movwf	___ftadd@f1+2
  7132  0841  083C               	movf	___ftsub@f2,w
  7133  0842  00B2               	movwf	___ftadd@f2
  7134  0843  083D               	movf	___ftsub@f2+1,w
  7135  0844  00B3               	movwf	___ftadd@f2+1
  7136  0845  083E               	movf	___ftsub@f2+2,w
  7137  0846  00B4               	movwf	___ftadd@f2+2
  7138  0847  3184  2430         	fcall	___ftadd
  7139  0849  0020               	movlb	0	; select bank0
  7140  084A  082F               	movf	?___ftadd,w
  7141  084B  00BC               	movwf	?___ftsub
  7142  084C  0830               	movf	?___ftadd+1,w
  7143  084D  00BD               	movwf	?___ftsub+1
  7144  084E  0831               	movf	?___ftadd+2,w
  7145  084F  00BE               	movwf	?___ftsub+2
  7146  0850  0008               	return
  7147  0851                     __end_of___ftsub:	
  7148                           
  7149                           	psect	text23
  7150  16E3                     __ptext23:	
  7151 ;; *************** function ___ftneg *****************
  7152 ;; Defined at:
  7153 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  7154 ;; Parameters:    Size  Location     Type
  7155 ;;  f1              3    1[BANK0 ] float 
  7156 ;; Auto vars:     Size  Location     Type
  7157 ;;		None
  7158 ;; Return value:  Size  Location     Type
  7159 ;;                  3    1[BANK0 ] float 
  7160 ;; Registers used:
  7161 ;;		wreg
  7162 ;; Tracked objects:
  7163 ;;		On entry : 0/0
  7164 ;;		On exit  : 0/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7167 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7170 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7171 ;;Total ram usage:        3 bytes
  7172 ;; Hardware stack levels used:    1
  7173 ;; Hardware stack levels required when called:    7
  7174 ;; This function calls:
  7175 ;;		Nothing
  7176 ;; This function is called by:
  7177 ;;		_loop
  7178 ;;		_ftoa
  7179 ;; This function uses a non-reentrant model
  7180 ;;
  7181                           
  7182                           
  7183                           ;psect for function ___ftneg
  7184  16E3                     ___ftneg:	
  7185                           
  7186                           ;incstack = 0
  7187                           ; Regs used in ___ftneg: [wreg]
  7188  16E3  0020               	movlb	0	; select bank0
  7189  16E4  0823               	movf	___ftneg@f1+2,w
  7190  16E5  0422               	iorwf	___ftneg@f1+1,w
  7191  16E6  0421               	iorwf	___ftneg@f1,w
  7192  16E7  1903               	skipnz
  7193  16E8  0008               	return
  7194  16E9  3080               	movlw	128
  7195  16EA  06A3               	xorwf	___ftneg@f1+2,f
  7196  16EB  0008               	return
  7197  16EC                     __end_of___ftneg:	
  7198                           
  7199                           	psect	text24
  7200  06E1                     __ptext24:	
  7201 ;; *************** function ___ftmul *****************
  7202 ;; Defined at:
  7203 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  7204 ;; Parameters:    Size  Location     Type
  7205 ;;  f1              3   56[BANK0 ] float 
  7206 ;;  f2              3   59[BANK0 ] float 
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;  f3_as_produc    3   67[BANK0 ] unsigned um
  7209 ;;  sign            1   71[BANK0 ] unsigned char 
  7210 ;;  cntr            1   70[BANK0 ] unsigned char 
  7211 ;;  exp             1   66[BANK0 ] unsigned char 
  7212 ;; Return value:  Size  Location     Type
  7213 ;;                  3   56[BANK0 ] float 
  7214 ;; Registers used:
  7215 ;;		wreg, status,2, status,0, pclath, cstack
  7216 ;; Tracked objects:
  7217 ;;		On entry : 0/0
  7218 ;;		On exit  : 0/0
  7219 ;;		Unchanged: 0/0
  7220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7221 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7222 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7223 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7224 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7225 ;;Total ram usage:       16 bytes
  7226 ;; Hardware stack levels used:    1
  7227 ;; Hardware stack levels required when called:    8
  7228 ;; This function calls:
  7229 ;;		___ftpack
  7230 ;; This function is called by:
  7231 ;;		_loop
  7232 ;;		_ftoa
  7233 ;; This function uses a non-reentrant model
  7234 ;;
  7235                           
  7236                           
  7237                           ;psect for function ___ftmul
  7238  06E1                     ___ftmul:	
  7239                           
  7240                           ;incstack = 0
  7241                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7242  06E1  0020               	movlb	0	; select bank0
  7243  06E2  0858               	movf	___ftmul@f1,w
  7244  06E3  00DE               	movwf	??___ftmul
  7245  06E4  0859               	movf	___ftmul@f1+1,w
  7246  06E5  00DF               	movwf	??___ftmul+1
  7247  06E6  085A               	movf	___ftmul@f1+2,w
  7248  06E7  00E0               	movwf	??___ftmul+2
  7249  06E8  1003               	clrc
  7250  06E9  0D5F               	rlf	??___ftmul+1,w
  7251  06EA  0D60               	rlf	??___ftmul+2,w
  7252  06EB  00E1               	movwf	??___ftmul+3
  7253  06EC  0861               	movf	??___ftmul+3,w
  7254  06ED  00E2               	movwf	___ftmul@exp
  7255  06EE  0862               	movf	___ftmul@exp,w
  7256  06EF  1D03               	btfss	3,2
  7257  06F0  2EF8               	goto	l2781
  7258  06F1  3000               	movlw	0
  7259  06F2  00D8               	movwf	?___ftmul
  7260  06F3  3000               	movlw	0
  7261  06F4  00D9               	movwf	?___ftmul+1
  7262  06F5  3000               	movlw	0
  7263  06F6  00DA               	movwf	?___ftmul+2
  7264  06F7  0008               	return
  7265  06F8                     l2781:	
  7266  06F8  085B               	movf	___ftmul@f2,w
  7267  06F9  00DE               	movwf	??___ftmul
  7268  06FA  085C               	movf	___ftmul@f2+1,w
  7269  06FB  00DF               	movwf	??___ftmul+1
  7270  06FC  085D               	movf	___ftmul@f2+2,w
  7271  06FD  00E0               	movwf	??___ftmul+2
  7272  06FE  1003               	clrc
  7273  06FF  0D5F               	rlf	??___ftmul+1,w
  7274  0700  0D60               	rlf	??___ftmul+2,w
  7275  0701  00E1               	movwf	??___ftmul+3
  7276  0702  0861               	movf	??___ftmul+3,w
  7277  0703  00E7               	movwf	___ftmul@sign
  7278  0704  0867               	movf	___ftmul@sign,w
  7279  0705  1D03               	btfss	3,2
  7280  0706  2F0E               	goto	l2787
  7281  0707  3000               	movlw	0
  7282  0708  00D8               	movwf	?___ftmul
  7283  0709  3000               	movlw	0
  7284  070A  00D9               	movwf	?___ftmul+1
  7285  070B  3000               	movlw	0
  7286  070C  00DA               	movwf	?___ftmul+2
  7287  070D  0008               	return
  7288  070E                     l2787:	
  7289  070E  0867               	movf	___ftmul@sign,w
  7290  070F  3E7B               	addlw	123
  7291  0710  00DE               	movwf	??___ftmul
  7292  0711  085E               	movf	??___ftmul,w
  7293  0712  07E2               	addwf	___ftmul@exp,f
  7294  0713  0858               	movf	___ftmul@f1,w
  7295  0714  00DE               	movwf	??___ftmul
  7296  0715  0859               	movf	___ftmul@f1+1,w
  7297  0716  00DF               	movwf	??___ftmul+1
  7298  0717  085A               	movf	___ftmul@f1+2,w
  7299  0718  00E0               	movwf	??___ftmul+2
  7300  0719  3010               	movlw	16
  7301  071A                     u2565:	
  7302  071A  36E0               	lsrf	??___ftmul+2,f
  7303  071B  0CDF               	rrf	??___ftmul+1,f
  7304  071C  0CDE               	rrf	??___ftmul,f
  7305  071D  0B89               	decfsz	9,f
  7306  071E  2F1A               	goto	u2565
  7307  071F  085E               	movf	??___ftmul,w
  7308  0720  00E1               	movwf	??___ftmul+3
  7309  0721  0861               	movf	??___ftmul+3,w
  7310  0722  00E7               	movwf	___ftmul@sign
  7311  0723  085B               	movf	___ftmul@f2,w
  7312  0724  00DE               	movwf	??___ftmul
  7313  0725  085C               	movf	___ftmul@f2+1,w
  7314  0726  00DF               	movwf	??___ftmul+1
  7315  0727  085D               	movf	___ftmul@f2+2,w
  7316  0728  00E0               	movwf	??___ftmul+2
  7317  0729  3010               	movlw	16
  7318  072A                     u2575:	
  7319  072A  36E0               	lsrf	??___ftmul+2,f
  7320  072B  0CDF               	rrf	??___ftmul+1,f
  7321  072C  0CDE               	rrf	??___ftmul,f
  7322  072D  0B89               	decfsz	9,f
  7323  072E  2F2A               	goto	u2575
  7324  072F  085E               	movf	??___ftmul,w
  7325  0730  00E1               	movwf	??___ftmul+3
  7326  0731  0861               	movf	??___ftmul+3,w
  7327  0732  06E7               	xorwf	___ftmul@sign,f
  7328  0733  3080               	movlw	128
  7329  0734  00DE               	movwf	??___ftmul
  7330  0735  085E               	movf	??___ftmul,w
  7331  0736  05E7               	andwf	___ftmul@sign,f
  7332  0737  17D9               	bsf	___ftmul@f1+1,7
  7333  0738  17DC               	bsf	___ftmul@f2+1,7
  7334  0739  30FF               	movlw	255
  7335  073A  05DB               	andwf	___ftmul@f2,f
  7336  073B  30FF               	movlw	255
  7337  073C  05DC               	andwf	___ftmul@f2+1,f
  7338  073D  3000               	movlw	0
  7339  073E  05DD               	andwf	___ftmul@f2+2,f
  7340  073F  3000               	movlw	0
  7341  0740  00E3               	movwf	___ftmul@f3_as_product
  7342  0741  3000               	movlw	0
  7343  0742  00E4               	movwf	___ftmul@f3_as_product+1
  7344  0743  3000               	movlw	0
  7345  0744  00E5               	movwf	___ftmul@f3_as_product+2
  7346  0745  3007               	movlw	7
  7347  0746  00DE               	movwf	??___ftmul
  7348  0747  085E               	movf	??___ftmul,w
  7349  0748  00E6               	movwf	___ftmul@cntr
  7350  0749                     l2799:	
  7351  0749  1C58               	btfss	___ftmul@f1,0
  7352  074A  2F51               	goto	l2803
  7353  074B  085B               	movf	___ftmul@f2,w
  7354  074C  07E3               	addwf	___ftmul@f3_as_product,f
  7355  074D  085C               	movf	___ftmul@f2+1,w
  7356  074E  3DE4               	addwfc	___ftmul@f3_as_product+1,f
  7357  074F  085D               	movf	___ftmul@f2+2,w
  7358  0750  3DE5               	addwfc	___ftmul@f3_as_product+2,f
  7359  0751                     l2803:	
  7360  0751  3001               	movlw	1
  7361  0752                     u2595:	
  7362  0752  36DA               	lsrf	___ftmul@f1+2,f
  7363  0753  0CD9               	rrf	___ftmul@f1+1,f
  7364  0754  0CD8               	rrf	___ftmul@f1,f
  7365  0755  0B89               	decfsz	9,f
  7366  0756  2F52               	goto	u2595
  7367  0757  3001               	movlw	1
  7368  0758                     u2605:	
  7369  0758  35DB               	lslf	___ftmul@f2,f
  7370  0759  0DDC               	rlf	___ftmul@f2+1,f
  7371  075A  0DDD               	rlf	___ftmul@f2+2,f
  7372  075B  0B89               	decfsz	9,f
  7373  075C  2F58               	goto	u2605
  7374  075D  3001               	movlw	1
  7375  075E  02E6               	subwf	___ftmul@cntr,f
  7376  075F  1D03               	btfss	3,2
  7377  0760  2F49               	goto	l2799
  7378  0761  3009               	movlw	9
  7379  0762  00DE               	movwf	??___ftmul
  7380  0763  085E               	movf	??___ftmul,w
  7381  0764  00E6               	movwf	___ftmul@cntr
  7382  0765                     l2811:	
  7383  0765  1C58               	btfss	___ftmul@f1,0
  7384  0766  2F6D               	goto	l2815
  7385  0767  085B               	movf	___ftmul@f2,w
  7386  0768  07E3               	addwf	___ftmul@f3_as_product,f
  7387  0769  085C               	movf	___ftmul@f2+1,w
  7388  076A  3DE4               	addwfc	___ftmul@f3_as_product+1,f
  7389  076B  085D               	movf	___ftmul@f2+2,w
  7390  076C  3DE5               	addwfc	___ftmul@f3_as_product+2,f
  7391  076D                     l2815:	
  7392  076D  3001               	movlw	1
  7393  076E                     u2635:	
  7394  076E  36DA               	lsrf	___ftmul@f1+2,f
  7395  076F  0CD9               	rrf	___ftmul@f1+1,f
  7396  0770  0CD8               	rrf	___ftmul@f1,f
  7397  0771  0B89               	decfsz	9,f
  7398  0772  2F6E               	goto	u2635
  7399  0773  3001               	movlw	1
  7400  0774                     u2645:	
  7401  0774  36E5               	lsrf	___ftmul@f3_as_product+2,f
  7402  0775  0CE4               	rrf	___ftmul@f3_as_product+1,f
  7403  0776  0CE3               	rrf	___ftmul@f3_as_product,f
  7404  0777  0B89               	decfsz	9,f
  7405  0778  2F74               	goto	u2645
  7406  0779  3001               	movlw	1
  7407  077A  02E6               	subwf	___ftmul@cntr,f
  7408  077B  1D03               	btfss	3,2
  7409  077C  2F65               	goto	l2811
  7410  077D  0863               	movf	___ftmul@f3_as_product,w
  7411  077E  00A1               	movwf	___ftpack@arg
  7412  077F  0864               	movf	___ftmul@f3_as_product+1,w
  7413  0780  00A2               	movwf	___ftpack@arg+1
  7414  0781  0865               	movf	___ftmul@f3_as_product+2,w
  7415  0782  00A3               	movwf	___ftpack@arg+2
  7416  0783  0862               	movf	___ftmul@exp,w
  7417  0784  00DE               	movwf	??___ftmul
  7418  0785  085E               	movf	??___ftmul,w
  7419  0786  00A4               	movwf	___ftpack@exp
  7420  0787  0867               	movf	___ftmul@sign,w
  7421  0788  00DF               	movwf	??___ftmul+1
  7422  0789  085F               	movf	??___ftmul+1,w
  7423  078A  00A5               	movwf	___ftpack@sign
  7424  078B  318D  2507         	fcall	___ftpack
  7425  078D  0020               	movlb	0	; select bank0
  7426  078E  0821               	movf	?___ftpack,w
  7427  078F  00D8               	movwf	?___ftmul
  7428  0790  0822               	movf	?___ftpack+1,w
  7429  0791  00D9               	movwf	?___ftmul+1
  7430  0792  0823               	movf	?___ftpack+2,w
  7431  0793  00DA               	movwf	?___ftmul+2
  7432  0794  0008               	return
  7433  0795                     __end_of___ftmul:	
  7434                           
  7435                           	psect	text25
  7436  0B16                     __ptext25:	
  7437 ;; *************** function ___ftge *****************
  7438 ;; Defined at:
  7439 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  7440 ;; Parameters:    Size  Location     Type
  7441 ;;  ff1             3    1[BANK0 ] float 
  7442 ;;  ff2             3    4[BANK0 ] float 
  7443 ;; Auto vars:     Size  Location     Type
  7444 ;;		None
  7445 ;; Return value:  Size  Location     Type
  7446 ;;		None               void
  7447 ;; Registers used:
  7448 ;;		wreg, status,2, status,0
  7449 ;; Tracked objects:
  7450 ;;		On entry : 0/0
  7451 ;;		On exit  : 0/0
  7452 ;;		Unchanged: 0/0
  7453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7454 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7456 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7457 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7458 ;;Total ram usage:        9 bytes
  7459 ;; Hardware stack levels used:    1
  7460 ;; Hardware stack levels required when called:    7
  7461 ;; This function calls:
  7462 ;;		Nothing
  7463 ;; This function is called by:
  7464 ;;		_ftoa
  7465 ;; This function uses a non-reentrant model
  7466 ;;
  7467                           
  7468                           
  7469                           ;psect for function ___ftge
  7470  0B16                     ___ftge:	
  7471                           
  7472                           ;incstack = 0
  7473                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7474  0B16  0020               	movlb	0	; select bank0
  7475  0B17  1FA3               	btfss	___ftge@ff1+2,7
  7476  0B18  2B2D               	goto	l2759
  7477  0B19  0921               	comf	___ftge@ff1,w
  7478  0B1A  00A7               	movwf	??___ftge
  7479  0B1B  0922               	comf	___ftge@ff1+1,w
  7480  0B1C  00A8               	movwf	??___ftge+1
  7481  0B1D  0923               	comf	___ftge@ff1+2,w
  7482  0B1E  00A9               	movwf	??___ftge+2
  7483  0B1F  0AA7               	incf	??___ftge,f
  7484  0B20  1903               	skipnz
  7485  0B21  0AA8               	incf	??___ftge+1,f
  7486  0B22  1903               	skipnz
  7487  0B23  0AA9               	incf	??___ftge+2,f
  7488  0B24  3000               	movlw	0
  7489  0B25  0727               	addwf	??___ftge,w
  7490  0B26  00A1               	movwf	___ftge@ff1
  7491  0B27  3000               	movlw	0
  7492  0B28  3D28               	addwfc	??___ftge+1,w
  7493  0B29  00A2               	movwf	___ftge@ff1+1
  7494  0B2A  3080               	movlw	128
  7495  0B2B  3D29               	addwfc	??___ftge+2,w
  7496  0B2C  00A3               	movwf	___ftge@ff1+2
  7497  0B2D                     l2759:	
  7498  0B2D  1FA6               	btfss	___ftge@ff2+2,7
  7499  0B2E  2B43               	goto	l2763
  7500  0B2F  0924               	comf	___ftge@ff2,w
  7501  0B30  00A7               	movwf	??___ftge
  7502  0B31  0925               	comf	___ftge@ff2+1,w
  7503  0B32  00A8               	movwf	??___ftge+1
  7504  0B33  0926               	comf	___ftge@ff2+2,w
  7505  0B34  00A9               	movwf	??___ftge+2
  7506  0B35  0AA7               	incf	??___ftge,f
  7507  0B36  1903               	skipnz
  7508  0B37  0AA8               	incf	??___ftge+1,f
  7509  0B38  1903               	skipnz
  7510  0B39  0AA9               	incf	??___ftge+2,f
  7511  0B3A  3000               	movlw	0
  7512  0B3B  0727               	addwf	??___ftge,w
  7513  0B3C  00A4               	movwf	___ftge@ff2
  7514  0B3D  3000               	movlw	0
  7515  0B3E  3D28               	addwfc	??___ftge+1,w
  7516  0B3F  00A5               	movwf	___ftge@ff2+1
  7517  0B40  3080               	movlw	128
  7518  0B41  3D29               	addwfc	??___ftge+2,w
  7519  0B42  00A6               	movwf	___ftge@ff2+2
  7520  0B43                     l2763:	
  7521  0B43  3080               	movlw	128
  7522  0B44  06A3               	xorwf	___ftge@ff1+2,f
  7523  0B45  3080               	movlw	128
  7524  0B46  06A6               	xorwf	___ftge@ff2+2,f
  7525  0B47  0826               	movf	___ftge@ff2+2,w
  7526  0B48  0223               	subwf	___ftge@ff1+2,w
  7527  0B49  1D03               	skipz
  7528  0B4A  0008               	return
  7529  0B4B  0825               	movf	___ftge@ff2+1,w
  7530  0B4C  0222               	subwf	___ftge@ff1+1,w
  7531  0B4D  1D03               	skipz
  7532  0B4E  0008               	return
  7533  0B4F  0824               	movf	___ftge@ff2,w
  7534  0B50  0221               	subwf	___ftge@ff1,w
  7535  0B51  0008               	return
  7536  0B52                     __end_of___ftge:	
  7537                           
  7538                           	psect	text26
  7539  0618                     __ptext26:	
  7540 ;; *************** function _nrf24l01SendPacket *****************
  7541 ;; Defined at:
  7542 ;;		line 170 in file "nrf24l01.c"
  7543 ;; Parameters:    Size  Location     Type
  7544 ;;  Packet          2    8[BANK0 ] PTR struct .
  7545 ;;		 -> main@packet(33), loop@packet(33), 
  7546 ;; Auto vars:     Size  Location     Type
  7547 ;;  i               1   14[BANK0 ] unsigned char 
  7548 ;; Return value:  Size  Location     Type
  7549 ;;                  1    wreg      void 
  7550 ;; Registers used:
  7551 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7552 ;; Tracked objects:
  7553 ;;		On entry : 0/0
  7554 ;;		On exit  : 0/0
  7555 ;;		Unchanged: 0/0
  7556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7557 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7558 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7559 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7560 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7561 ;;Total ram usage:        7 bytes
  7562 ;; Hardware stack levels used:    1
  7563 ;; Hardware stack levels required when called:   11
  7564 ;; This function calls:
  7565 ;;		_enableInterrupts
  7566 ;;		_nrf24l01CEHigh
  7567 ;;		_nrf24l01CELow
  7568 ;;		_nrf24l01ChangeTXPower
  7569 ;;		_nrf24l01SPIEnd
  7570 ;;		_nrf24l01SPISend
  7571 ;;		_nrf24l01SPIStart
  7572 ;;		_nrf24l01SetRXMode
  7573 ;;		_strlen
  7574 ;; This function is called by:
  7575 ;;		_loop
  7576 ;;		_main
  7577 ;;		_nrf24l01SendACK
  7578 ;; This function uses a non-reentrant model
  7579 ;;
  7580                           
  7581                           
  7582                           ;psect for function _nrf24l01SendPacket
  7583  0618                     _nrf24l01SendPacket:	
  7584                           
  7585                           ;nrf24l01.c: 172: TXPacket = Packet;
  7586                           
  7587                           ;incstack = 0
  7588                           ; Regs used in _nrf24l01SendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7589  0618  0020               	movlb	0	; select bank0
  7590  0619  0829               	movf	nrf24l01SendPacket@Packet+1,w
  7591  061A  0021               	movlb	1	; select bank1
  7592  061B  00EE               	movwf	(_TXPacket+1)^(0+128)
  7593  061C  0020               	movlb	0	; select bank0
  7594  061D  0828               	movf	nrf24l01SendPacket@Packet,w
  7595  061E  0021               	movlb	1	; select bank1
  7596  061F  00ED               	movwf	_TXPacket^(0+128)
  7597  0620                     l335:	
  7598                           ;nrf24l01.c: 175: unsigned char i;;nrf24l01.c: 179: RESEND:
  7599                           
  7600                           
  7601                           ;nrf24l01.c: 182: i = 0xFF;
  7602  0620  30FF               	movlw	255
  7603  0621  0020               	movlb	0	; select bank0
  7604  0622  00AA               	movwf	??_nrf24l01SendPacket
  7605  0623  082A               	movf	??_nrf24l01SendPacket,w
  7606  0624  00AE               	movwf	nrf24l01SendPacket@i
  7607  0625                     l3255:	
  7608                           ;nrf24l01.c: 183: while (nrf24l01.TXBusy){
  7609                           
  7610  0625  0020               	movlb	0	; select bank0
  7611  0626  1C6E               	btfss	_nrf24l01,0	;volatile
  7612  0627  2E31               	goto	l339
  7613                           
  7614                           ;nrf24l01.c: 184: if (!--i) {
  7615  0628  3001               	movlw	1
  7616  0629  02AE               	subwf	nrf24l01SendPacket@i,f
  7617  062A  1903               	btfsc	3,2
  7618  062B  2E20               	goto	l335
  7619                           
  7620                           ;nrf24l01.c: 186: };nrf24l01.c: 187: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  7621                           
  7622                           ;nrf24l01.c: 185: goto RESEND;
  7623  062C  3085               	movlw	133
  7624  062D                     u3567:	
  7625  062D  0B89               	decfsz	9,f
  7626  062E  2E2D               	goto	u3567
  7627  062F  0000               	nop
  7628  0630  2E25               	goto	l3255
  7629  0631                     l339:	
  7630                           
  7631                           ;nrf24l01.c: 188: };nrf24l01.c: 191: nrf24l01.TXBusy = 1;
  7632  0631  146E               	bsf	_nrf24l01,0	;volatile
  7633                           
  7634                           ;nrf24l01.c: 194: enableInterrupts(0);
  7635  0632  3000               	movlw	0
  7636  0633  3196  26D3  3186   	fcall	_enableInterrupts
  7637                           
  7638                           ;nrf24l01.c: 197: nrf24l01SetRXMode(0);
  7639  0636  3000               	movlw	0
  7640  0637  318A  22DB  3186   	fcall	_nrf24l01SetRXMode
  7641                           
  7642                           ;nrf24l01.c: 200: nrf24l01SPIStart();
  7643  063A  3196  26DB  3186   	fcall	_nrf24l01SPIStart
  7644                           
  7645                           ;nrf24l01.c: 203: nrf24l01SPISend((unsigned) 0b10110000);
  7646  063D  30B0               	movlw	176
  7647  063E  3196  26EC  3186   	fcall	_nrf24l01SPISend
  7648                           
  7649                           ;nrf24l01.c: 205: nrf24l01SPISend(TXPacket->packetData.byte);
  7650  0641  0021               	movlb	1	; select bank1
  7651  0642  086D               	movf	_TXPacket^(0+128),w
  7652  0643  0086               	movwf	6
  7653  0644  086E               	movf	(_TXPacket+1)^(0+128),w
  7654  0645  0087               	movwf	7
  7655  0646  0801               	movf	1,w
  7656  0647  3196  26EC  3186   	fcall	_nrf24l01SPISend
  7657                           
  7658                           ;nrf24l01.c: 208: for (i = 0; (i < strlen(TXPacket->Message)) && (i < sizeof(TXPacket->M
      +                          essage)); i++){
  7659  064A  0020               	movlb	0	; select bank0
  7660  064B  01AE               	clrf	nrf24l01SendPacket@i
  7661  064C  2E66               	goto	l3267
  7662  064D                     l3263:	
  7663                           
  7664                           ;nrf24l01.c: 209: nrf24l01SPISend(TXPacket->Message[i]);
  7665  064D  082E               	movf	nrf24l01SendPacket@i,w
  7666  064E  3E01               	addlw	1
  7667  064F  00AA               	movwf	??_nrf24l01SendPacket
  7668  0650  3000               	movlw	0
  7669  0651  1803               	skipnc
  7670  0652  3001               	movlw	1
  7671  0653  00AB               	movwf	??_nrf24l01SendPacket+1
  7672  0654  082A               	movf	??_nrf24l01SendPacket,w
  7673  0655  0021               	movlb	1	; select bank1
  7674  0656  076D               	addwf	_TXPacket^(0+128),w
  7675  0657  0086               	movwf	6
  7676  0658  0020               	movlb	0	; select bank0
  7677  0659  082B               	movf	??_nrf24l01SendPacket+1,w
  7678  065A  0021               	movlb	1	; select bank1
  7679  065B  3D6E               	addwfc	(_TXPacket+1)^(0+128),w
  7680  065C  0087               	movwf	7
  7681  065D  0801               	movf	1,w
  7682  065E  3196  26EC  3186   	fcall	_nrf24l01SPISend
  7683  0661  3001               	movlw	1
  7684  0662  0020               	movlb	0	; select bank0
  7685  0663  00AA               	movwf	??_nrf24l01SendPacket
  7686  0664  082A               	movf	??_nrf24l01SendPacket,w
  7687  0665  07AE               	addwf	nrf24l01SendPacket@i,f
  7688  0666                     l3267:	
  7689  0666  0021               	movlb	1	; select bank1
  7690  0667  086D               	movf	_TXPacket^(0+128),w
  7691  0668  3E01               	addlw	1
  7692  0669  0020               	movlb	0	; select bank0
  7693  066A  00AA               	movwf	??_nrf24l01SendPacket
  7694  066B  3000               	movlw	0
  7695  066C  0021               	movlb	1	; select bank1
  7696  066D  3D6E               	addwfc	(_TXPacket+1)^(0+128),w
  7697  066E  0020               	movlb	0	; select bank0
  7698  066F  00AB               	movwf	??_nrf24l01SendPacket+1
  7699  0670  082A               	movf	??_nrf24l01SendPacket,w
  7700  0671  00A1               	movwf	strlen@s
  7701  0672  082B               	movf	??_nrf24l01SendPacket+1,w
  7702  0673  00A2               	movwf	strlen@s+1
  7703  0674  3188  2051  3186   	fcall	_strlen
  7704  0677  0020               	movlb	0	; select bank0
  7705  0678  082E               	movf	nrf24l01SendPacket@i,w
  7706  0679  00AC               	movwf	??_nrf24l01SendPacket+2
  7707  067A  01AD               	clrf	??_nrf24l01SendPacket+3
  7708  067B  0822               	movf	?_strlen+1,w
  7709  067C  022D               	subwf	??_nrf24l01SendPacket+3,w
  7710  067D  1D03               	skipz
  7711  067E  2E81               	goto	u3205
  7712  067F  0821               	movf	?_strlen,w
  7713  0680  022C               	subwf	??_nrf24l01SendPacket+2,w
  7714  0681                     u3205:	
  7715  0681  1803               	skipnc
  7716  0682  2E87               	goto	l3271
  7717  0683  3020               	movlw	32
  7718  0684  022E               	subwf	nrf24l01SendPacket@i,w
  7719  0685  1C03               	skipc
  7720  0686  2E4D               	goto	l3263
  7721  0687                     l3271:	
  7722                           
  7723                           ;nrf24l01.c: 210: };nrf24l01.c: 213: nrf24l01SPIEnd();
  7724  0687  3196  26CC  3186   	fcall	_nrf24l01SPIEnd
  7725                           
  7726                           ;nrf24l01.c: 216: nrf24l01CEHigh();
  7727  068A  3196  26BA  3186   	fcall	_nrf24l01CEHigh
  7728                           
  7729                           ;nrf24l01.c: 217: _delay((unsigned long)((20)*(16000000/4000000.0)));
  7730  068D  301A               	movlw	26
  7731  068E                     u3577:	
  7732  068E  0B89               	decfsz	9,f
  7733  068F  2E8E               	goto	u3577
  7734  0690  3200               	nop2
  7735                           
  7736                           ;nrf24l01.c: 218: nrf24l01CELow();
  7737  0691  3196  26BD  3186   	fcall	_nrf24l01CELow
  7738                           
  7739                           ;nrf24l01.c: 221: enableInterrupts(1);
  7740  0694  3001               	movlw	1
  7741  0695  3196  26D3  3186   	fcall	_enableInterrupts
  7742                           
  7743                           ;nrf24l01.c: 224: i = 0xFF;
  7744  0698  30FF               	movlw	255
  7745  0699  0020               	movlb	0	; select bank0
  7746  069A  00AA               	movwf	??_nrf24l01SendPacket
  7747  069B  082A               	movf	??_nrf24l01SendPacket,w
  7748  069C  00AE               	movwf	nrf24l01SendPacket@i
  7749  069D                     l3285:	
  7750                           ;nrf24l01.c: 225: while (nrf24l01.TXBusy){
  7751                           
  7752  069D  0020               	movlb	0	; select bank0
  7753  069E  1C6E               	btfss	_nrf24l01,0	;volatile
  7754  069F  2EA9               	goto	l3287
  7755                           
  7756                           ;nrf24l01.c: 226: if (!--i) {
  7757  06A0  3001               	movlw	1
  7758  06A1  02AE               	subwf	nrf24l01SendPacket@i,f
  7759  06A2  1903               	btfsc	3,2
  7760  06A3  2E20               	goto	l335
  7761                           
  7762                           ;nrf24l01.c: 228: };nrf24l01.c: 229: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  7763                           
  7764                           ;nrf24l01.c: 227: goto RESEND;
  7765  06A4  3085               	movlw	133
  7766  06A5                     u3587:	
  7767  06A5  0B89               	decfsz	9,f
  7768  06A6  2EA5               	goto	u3587
  7769  06A7  0000               	nop
  7770  06A8  2E9D               	goto	l3285
  7771  06A9                     l3287:	
  7772                           
  7773                           ;nrf24l01.c: 230: };nrf24l01.c: 234: i = 0xFF;
  7774  06A9  30FF               	movlw	255
  7775  06AA  00AA               	movwf	??_nrf24l01SendPacket
  7776  06AB  082A               	movf	??_nrf24l01SendPacket,w
  7777  06AC  00AE               	movwf	nrf24l01SendPacket@i
  7778  06AD                     l3297:	
  7779                           ;nrf24l01.c: 235: while (TXPacket->packetData.ACKRequest){
  7780                           
  7781  06AD  0021               	movlb	1	; select bank1
  7782  06AE  086D               	movf	_TXPacket^(0+128),w
  7783  06AF  0086               	movwf	6
  7784  06B0  086E               	movf	(_TXPacket+1)^(0+128),w
  7785  06B1  0087               	movwf	7
  7786  06B2  1D01               	btfss	1,2
  7787  06B3  0008               	return
  7788                           
  7789                           ;nrf24l01.c: 236: if (!--i) {
  7790  06B4  3001               	movlw	1
  7791  06B5  0020               	movlb	0	; select bank0
  7792  06B6  02AE               	subwf	nrf24l01SendPacket@i,f
  7793  06B7  1D03               	btfss	3,2
  7794  06B8  2EDC               	goto	l3295
  7795                           
  7796                           ;nrf24l01.c: 237: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  7797  06B9  3002               	movlw	2
  7798  06BA  0020               	movlb	0	; select bank0
  7799  06BB  00AB               	movwf	??_nrf24l01SendPacket+1
  7800  06BC  3004               	movlw	4
  7801  06BD  00AA               	movwf	??_nrf24l01SendPacket
  7802  06BE  30BA               	movlw	186
  7803  06BF                     u3597:	
  7804  06BF  0B89               	decfsz	9,f
  7805  06C0  2EBF               	goto	u3597
  7806  06C1  0BAA               	decfsz	??_nrf24l01SendPacket,f
  7807  06C2  2EBF               	goto	u3597
  7808  06C3  0BAB               	decfsz	??_nrf24l01SendPacket+1,f
  7809  06C4  2EBF               	goto	u3597
  7810  06C5  0000               	nop
  7811                           
  7812                           ;nrf24l01.c: 238: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  7813  06C6  3002               	movlw	2
  7814  06C7  0020               	movlb	0	; select bank0
  7815  06C8  00AB               	movwf	??_nrf24l01SendPacket+1
  7816  06C9  3004               	movlw	4
  7817  06CA  00AA               	movwf	??_nrf24l01SendPacket
  7818  06CB  30BA               	movlw	186
  7819  06CC                     u3607:	
  7820  06CC  0B89               	decfsz	9,f
  7821  06CD  2ECC               	goto	u3607
  7822  06CE  0BAA               	decfsz	??_nrf24l01SendPacket,f
  7823  06CF  2ECC               	goto	u3607
  7824  06D0  0BAB               	decfsz	??_nrf24l01SendPacket+1,f
  7825  06D1  2ECC               	goto	u3607
  7826  06D2  0000               	nop
  7827                           
  7828                           ;nrf24l01.c: 239: nrf24l01ChangeTXPower(1);
  7829  06D3  3001               	movlw	1
  7830  06D4  0020               	movlb	0	; select bank0
  7831  06D5  00A4               	movwf	nrf24l01ChangeTXPower@addPower
  7832  06D6  3000               	movlw	0
  7833  06D7  00A5               	movwf	nrf24l01ChangeTXPower@addPower+1
  7834  06D8  318B  2352  3186   	fcall	_nrf24l01ChangeTXPower
  7835                           
  7836                           ;nrf24l01.c: 240: goto RESEND;
  7837  06DB  2E20               	goto	l335
  7838  06DC                     l3295:	
  7839                           
  7840                           ;nrf24l01.c: 241: };nrf24l01.c: 242: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  7841  06DC  3085               	movlw	133
  7842  06DD                     u3617:	
  7843  06DD  0B89               	decfsz	9,f
  7844  06DE  2EDD               	goto	u3617
  7845  06DF  0000               	nop
  7846  06E0  2EAD               	goto	l3297
  7847  06E1                     __end_of_nrf24l01SendPacket:	
  7848                           
  7849                           	psect	text27
  7850  0851                     __ptext27:	
  7851 ;; *************** function _strlen *****************
  7852 ;; Defined at:
  7853 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  7854 ;; Parameters:    Size  Location     Type
  7855 ;;  s               2    1[BANK0 ] PTR const unsigned char 
  7856 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7857 ;;		 -> loop@packet(33), romData(19), 
  7858 ;; Auto vars:     Size  Location     Type
  7859 ;;  cp              2    5[BANK0 ] PTR const unsigned char 
  7860 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7861 ;;		 -> loop@packet(33), romData(19), 
  7862 ;; Return value:  Size  Location     Type
  7863 ;;                  2    1[BANK0 ] unsigned int 
  7864 ;; Registers used:
  7865 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7866 ;; Tracked objects:
  7867 ;;		On entry : 0/0
  7868 ;;		On exit  : 0/0
  7869 ;;		Unchanged: 0/0
  7870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7871 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7872 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7873 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7874 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7875 ;;Total ram usage:        6 bytes
  7876 ;; Hardware stack levels used:    1
  7877 ;; Hardware stack levels required when called:    7
  7878 ;; This function calls:
  7879 ;;		Nothing
  7880 ;; This function is called by:
  7881 ;;		_nrf24l01GetPipe
  7882 ;;		_nrf24l01SendPacket
  7883 ;; This function uses a non-reentrant model
  7884 ;;
  7885                           
  7886                           
  7887                           ;psect for function _strlen
  7888  0851                     _strlen:	
  7889                           
  7890                           ;incstack = 0
  7891                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  7892  0851  0020               	movlb	0	; select bank0
  7893  0852  0822               	movf	strlen@s+1,w
  7894  0853  00A6               	movwf	strlen@cp+1
  7895  0854  0821               	movf	strlen@s,w
  7896  0855  00A5               	movwf	strlen@cp
  7897  0856                     l3017:	
  7898  0856  0825               	movf	strlen@cp,w
  7899  0857  0086               	movwf	6
  7900  0858  0826               	movf	strlen@cp+1,w
  7901  0859  0087               	movwf	7
  7902  085A  0801               	movf	1,w
  7903  085B  1903               	btfsc	3,2
  7904  085C  2862               	goto	l3019
  7905  085D  3001               	movlw	1
  7906  085E  07A5               	addwf	strlen@cp,f
  7907  085F  3000               	movlw	0
  7908  0860  3DA6               	addwfc	strlen@cp+1,f
  7909  0861  2856               	goto	l3017
  7910  0862                     l3019:	
  7911  0862  0921               	comf	strlen@s,w
  7912  0863  00A3               	movwf	??_strlen
  7913  0864  0922               	comf	strlen@s+1,w
  7914  0865  00A4               	movwf	??_strlen+1
  7915  0866  0AA3               	incf	??_strlen,f
  7916  0867  1903               	skipnz
  7917  0868  0AA4               	incf	??_strlen+1,f
  7918  0869  0825               	movf	strlen@cp,w
  7919  086A  0723               	addwf	??_strlen,w
  7920  086B  00A1               	movwf	?_strlen
  7921  086C  0826               	movf	strlen@cp+1,w
  7922  086D  3D24               	addwfc	??_strlen+1,w
  7923  086E  00A2               	movwf	?_strlen+1
  7924  086F  0008               	return
  7925  0870                     __end_of_strlen:	
  7926                           
  7927                           	psect	text28
  7928  0ADB                     __ptext28:	
  7929 ;; *************** function _nrf24l01SetRXMode *****************
  7930 ;; Defined at:
  7931 ;;		line 54 in file "nrf24l01.c"
  7932 ;; Parameters:    Size  Location     Type
  7933 ;;  rxMode          1    wreg     unsigned char 
  7934 ;; Auto vars:     Size  Location     Type
  7935 ;;  rxMode          1    6[BANK0 ] unsigned char 
  7936 ;;  config          1    5[BANK0 ] struct .
  7937 ;; Return value:  Size  Location     Type
  7938 ;;                  1    wreg      void 
  7939 ;; Registers used:
  7940 ;;		wreg, status,2, status,0, pclath, cstack
  7941 ;; Tracked objects:
  7942 ;;		On entry : 0/0
  7943 ;;		On exit  : 0/0
  7944 ;;		Unchanged: 0/0
  7945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7947 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7948 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7949 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7950 ;;Total ram usage:        3 bytes
  7951 ;; Hardware stack levels used:    1
  7952 ;; Hardware stack levels required when called:   10
  7953 ;; This function calls:
  7954 ;;		_nrf24l01CEHigh
  7955 ;;		_nrf24l01CELow
  7956 ;;		_nrf24l01Send
  7957 ;; This function is called by:
  7958 ;;		_nrf24l01SendPacket
  7959 ;;		_checkRxData
  7960 ;; This function uses a non-reentrant model
  7961 ;;
  7962                           
  7963                           
  7964                           ;psect for function _nrf24l01SetRXMode
  7965  0ADB                     _nrf24l01SetRXMode:	
  7966                           
  7967                           ;incstack = 0
  7968                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  7969                           ;nrf24l01SetRXMode@rxMode stored from wreg
  7970  0ADB  0020               	movlb	0	; select bank0
  7971  0ADC  00A6               	movwf	nrf24l01SetRXMode@rxMode
  7972                           
  7973                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  7974  0ADD  01A1               	clrf	nrf24l01Send@data
  7975  0ADE  3000               	movlw	0
  7976  0ADF  3188  2090  318A   	fcall	_nrf24l01Send
  7977  0AE2  0020               	movlb	0	; select bank0
  7978  0AE3  00A4               	movwf	??_nrf24l01SetRXMode
  7979  0AE4  0824               	movf	??_nrf24l01SetRXMode,w
  7980  0AE5  00A5               	movwf	nrf24l01SetRXMode@config
  7981                           
  7982                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  7983  0AE6  0825               	movf	nrf24l01SetRXMode@config,w
  7984  0AE7  3901               	andlw	1
  7985  0AE8  0626               	xorwf	nrf24l01SetRXMode@rxMode,w
  7986  0AE9  1903               	skipnz
  7987  0AEA  2B0F               	goto	l2951
  7988                           
  7989                           ;nrf24l01.c: 65: nrf24l01CELow();
  7990  0AEB  3196  26BD  318A   	fcall	_nrf24l01CELow
  7991                           
  7992                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7993  0AEE  30A0               	movlw	160
  7994  0AEF                     u3627:	
  7995  0AEF  3200               	nop2
  7996  0AF0  0B89               	decfsz	9,f
  7997  0AF1  2AEF               	goto	u3627
  7998                           
  7999                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  8000  0AF2  0020               	movlb	0	; select bank0
  8001  0AF3  0826               	movf	nrf24l01SetRXMode@rxMode,w
  8002  0AF4  3901               	andlw	1
  8003  0AF5  1025               	bcf	nrf24l01SetRXMode@config,0
  8004  0AF6  1D03               	skipz
  8005  0AF7  1425               	bsf	nrf24l01SetRXMode@config,0
  8006                           
  8007                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  8008  0AF8  0825               	movf	nrf24l01SetRXMode@config,w
  8009  0AF9  00A4               	movwf	??_nrf24l01SetRXMode
  8010  0AFA  0824               	movf	??_nrf24l01SetRXMode,w
  8011  0AFB  00A1               	movwf	nrf24l01Send@data
  8012  0AFC  3020               	movlw	32
  8013  0AFD  3188  2090  318A   	fcall	_nrf24l01Send
  8014                           
  8015                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(16000000/4000000.0)));
  8016  0B00  30A0               	movlw	160
  8017  0B01                     u3637:	
  8018  0B01  3200               	nop2
  8019  0B02  0B89               	decfsz	9,f
  8020  0B03  2B01               	goto	u3637
  8021                           
  8022                           ;nrf24l01.c: 76: if (rxMode){
  8023  0B04  0020               	movlb	0	; select bank0
  8024  0B05  0826               	movf	nrf24l01SetRXMode@rxMode,w
  8025  0B06  1903               	btfsc	3,2
  8026  0B07  2B0F               	goto	l2951
  8027                           
  8028                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  8029  0B08  3196  26BA  318A   	fcall	_nrf24l01CEHigh
  8030                           
  8031                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(16000000/4000000.0)));
  8032  0B0B  30A0               	movlw	160
  8033  0B0C                     u3647:	
  8034  0B0C  3200               	nop2
  8035  0B0D  0B89               	decfsz	9,f
  8036  0B0E  2B0C               	goto	u3647
  8037  0B0F                     l2951:	
  8038                           
  8039                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  8040  0B0F  0020               	movlb	0	; select bank0
  8041  0B10  0826               	movf	nrf24l01SetRXMode@rxMode,w
  8042  0B11  3901               	andlw	1
  8043  0B12  116E               	bcf	_nrf24l01,2	;volatile
  8044  0B13  1D03               	skipz
  8045  0B14  156E               	bsf	_nrf24l01,2	;volatile
  8046  0B15  0008               	return
  8047  0B16                     __end_of_nrf24l01SetRXMode:	
  8048                           
  8049                           	psect	text29
  8050  0E0D                     __ptext29:	
  8051 ;; *************** function _getADCValue *****************
  8052 ;; Defined at:
  8053 ;;		line 44 in file "main.c"
  8054 ;; Parameters:    Size  Location     Type
  8055 ;;  channel         1    wreg     unsigned char 
  8056 ;; Auto vars:     Size  Location     Type
  8057 ;;  channel         1   52[BANK0 ] unsigned char 
  8058 ;;  adcSum          3   53[BANK0 ] float 
  8059 ;;  adcLoop         2   50[BANK0 ] unsigned int 
  8060 ;; Return value:  Size  Location     Type
  8061 ;;                  3   44[BANK0 ] float 
  8062 ;; Registers used:
  8063 ;;		wreg, status,2, status,0, pclath, cstack
  8064 ;; Tracked objects:
  8065 ;;		On entry : 0/0
  8066 ;;		On exit  : 0/0
  8067 ;;		Unchanged: 0/0
  8068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8069 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8070 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8071 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8072 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8073 ;;Total ram usage:       12 bytes
  8074 ;; Hardware stack levels used:    1
  8075 ;; Hardware stack levels required when called:    9
  8076 ;; This function calls:
  8077 ;;		___awtoft
  8078 ;;		___ftadd
  8079 ;;		___ftdiv
  8080 ;;		_sleep
  8081 ;; This function is called by:
  8082 ;;		_loop
  8083 ;; This function uses a non-reentrant model
  8084 ;;
  8085                           
  8086                           
  8087                           ;psect for function _getADCValue
  8088  0E0D                     _getADCValue:	
  8089                           
  8090                           ;incstack = 0
  8091                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  8092                           ;getADCValue@channel stored from wreg
  8093  0E0D  0020               	movlb	0	; select bank0
  8094  0E0E  00D4               	movwf	getADCValue@channel
  8095                           
  8096                           ;main.c: 47: float adcSum = 0;
  8097  0E0F  3000               	movlw	0
  8098  0E10  00D5               	movwf	getADCValue@adcSum
  8099  0E11  3000               	movlw	0
  8100  0E12  00D6               	movwf	getADCValue@adcSum+1
  8101  0E13  3000               	movlw	0
  8102  0E14  00D7               	movwf	getADCValue@adcSum+2
  8103                           
  8104                           ;main.c: 48: unsigned int adcLoop = 1000;
  8105  0E15  30E8               	movlw	232
  8106  0E16  00D2               	movwf	getADCValue@adcLoop
  8107  0E17  3003               	movlw	3
  8108  0E18  00D3               	movwf	getADCValue@adcLoop+1
  8109                           
  8110                           ;main.c: 50: ADCON0bits.CHS = channel;
  8111  0E19  0854               	movf	getADCValue@channel,w
  8112  0E1A  00CF               	movwf	??_getADCValue
  8113  0E1B  0DCF               	rlf	??_getADCValue,f
  8114  0E1C  0DCF               	rlf	??_getADCValue,f
  8115  0E1D  0021               	movlb	1	; select bank1
  8116  0E1E  081D               	movf	29,w	;volatile
  8117  0E1F  0020               	movlb	0	; select bank0
  8118  0E20  064F               	xorwf	??_getADCValue,w
  8119  0E21  3903               	andlw	-253
  8120  0E22  064F               	xorwf	??_getADCValue,w
  8121  0E23  0021               	movlb	1	; select bank1
  8122  0E24  009D               	movwf	29	;volatile
  8123                           
  8124                           ;main.c: 51: FVRCONbits.FVREN = 1;
  8125  0E25  0022               	movlb	2	; select bank2
  8126  0E26  1797               	bsf	23,7	;volatile
  8127                           
  8128                           ;main.c: 52: ADCON0bits.ADON = 1;
  8129  0E27  0021               	movlb	1	; select bank1
  8130  0E28  141D               	bsf	29,0	;volatile
  8131                           
  8132                           ;main.c: 54: sleep(0);
  8133  0E29  3000               	movlw	0
  8134  0E2A  3197  27AD  318E   	fcall	_sleep
  8135                           
  8136                           ;main.c: 56: counter = 0;
  8137  0E2D  3000               	movlw	0
  8138  0E2E  0021               	movlb	1	; select bank1
  8139  0E2F  00EC               	movwf	(_counter+3)^(0+128)
  8140  0E30  3000               	movlw	0
  8141  0E31  00EB               	movwf	(_counter+2)^(0+128)
  8142  0E32  3000               	movlw	0
  8143  0E33  00EA               	movwf	(_counter+1)^(0+128)
  8144  0E34  3000               	movlw	0
  8145  0E35  00E9               	movwf	_counter^(0+128)
  8146  0E36                     l3221:	
  8147                           ;main.c: 58: while (adcLoop--){
  8148                           
  8149  0E36  3001               	movlw	1
  8150  0E37  0020               	movlb	0	; select bank0
  8151  0E38  02D2               	subwf	getADCValue@adcLoop,f
  8152  0E39  3000               	movlw	0
  8153  0E3A  3BD3               	subwfb	getADCValue@adcLoop+1,f
  8154  0E3B  0A52               	incf	getADCValue@adcLoop,w
  8155  0E3C  1903               	btfsc	3,2
  8156  0E3D  0A53               	incf	getADCValue@adcLoop+1,w
  8157  0E3E  1903               	btfsc	3,2
  8158  0E3F  2E7B               	goto	l228
  8159                           
  8160                           ;main.c: 60: counter++;
  8161  0E40  3001               	movlw	1
  8162  0E41  0021               	movlb	1	; select bank1
  8163  0E42  07E9               	addwf	_counter^(0+128),f
  8164  0E43  3000               	movlw	0
  8165  0E44  3DEA               	addwfc	(_counter+1)^(0+128),f
  8166  0E45  3000               	movlw	0
  8167  0E46  3DEB               	addwfc	(_counter+2)^(0+128),f
  8168  0E47  3000               	movlw	0
  8169  0E48  3DEC               	addwfc	(_counter+3)^(0+128),f
  8170                           
  8171                           ;main.c: 62: ADCON0bits.ADGO = 1;
  8172  0E49  149D               	bsf	29,1	;volatile
  8173  0E4A                     l3217:	
  8174                           ;main.c: 64: while (ADCON0bits.ADGO){
  8175                           
  8176  0E4A  0021               	movlb	1	; select bank1
  8177  0E4B  1C9D               	btfss	29,1	;volatile
  8178  0E4C  2E52               	goto	l3219
  8179                           
  8180                           ;main.c: 65: sleep(0);
  8181  0E4D  3000               	movlw	0
  8182  0E4E  3197  27AD  318E   	fcall	_sleep
  8183  0E51  2E4A               	goto	l3217
  8184  0E52                     l3219:	
  8185                           
  8186                           ;main.c: 66: };main.c: 68: adcSum+= (ADRESL | (ADRESH << 8));
  8187  0E52  081C               	movf	28,w	;volatile
  8188  0E53  0020               	movlb	0	; select bank0
  8189  0E54  00CF               	movwf	??_getADCValue
  8190  0E55  01D0               	clrf	??_getADCValue+1
  8191  0E56  084F               	movf	??_getADCValue,w
  8192  0E57  00D0               	movwf	??_getADCValue+1
  8193  0E58  01CF               	clrf	??_getADCValue
  8194  0E59  084F               	movf	??_getADCValue,w
  8195  0E5A  0021               	movlb	1	; select bank1
  8196  0E5B  041B               	iorwf	27,w	;volatile
  8197  0E5C  0020               	movlb	0	; select bank0
  8198  0E5D  00A9               	movwf	___awtoft@c
  8199  0E5E  0850               	movf	??_getADCValue+1,w
  8200  0E5F  00AA               	movwf	___awtoft@c+1
  8201  0E60  3188  20F2  318E   	fcall	___awtoft
  8202  0E63  0020               	movlb	0	; select bank0
  8203  0E64  0829               	movf	?___awtoft,w
  8204  0E65  00AF               	movwf	___ftadd@f1
  8205  0E66  082A               	movf	?___awtoft+1,w
  8206  0E67  00B0               	movwf	___ftadd@f1+1
  8207  0E68  082B               	movf	?___awtoft+2,w
  8208  0E69  00B1               	movwf	___ftadd@f1+2
  8209  0E6A  0855               	movf	getADCValue@adcSum,w
  8210  0E6B  00B2               	movwf	___ftadd@f2
  8211  0E6C  0856               	movf	getADCValue@adcSum+1,w
  8212  0E6D  00B3               	movwf	___ftadd@f2+1
  8213  0E6E  0857               	movf	getADCValue@adcSum+2,w
  8214  0E6F  00B4               	movwf	___ftadd@f2+2
  8215  0E70  3184  2430  318E   	fcall	___ftadd
  8216  0E73  0020               	movlb	0	; select bank0
  8217  0E74  082F               	movf	?___ftadd,w
  8218  0E75  00D5               	movwf	getADCValue@adcSum
  8219  0E76  0830               	movf	?___ftadd+1,w
  8220  0E77  00D6               	movwf	getADCValue@adcSum+1
  8221  0E78  0831               	movf	?___ftadd+2,w
  8222  0E79  00D7               	movwf	getADCValue@adcSum+2
  8223  0E7A  2E36               	goto	l3221
  8224  0E7B                     l228:	
  8225                           
  8226                           ;main.c: 70: };main.c: 72: FVRCONbits.FVREN = 0;
  8227  0E7B  0022               	movlb	2	; select bank2
  8228  0E7C  1397               	bcf	23,7	;volatile
  8229                           
  8230                           ;main.c: 73: ADCON0bits.ADON = 0;
  8231  0E7D  0021               	movlb	1	; select bank1
  8232  0E7E  101D               	bcf	29,0	;volatile
  8233                           
  8234                           ;main.c: 76: adcSum/= 1000;
  8235  0E7F  3000               	movlw	0
  8236  0E80  0020               	movlb	0	; select bank0
  8237  0E81  00BC               	movwf	___ftdiv@f2
  8238  0E82  307A               	movlw	122
  8239  0E83  00BD               	movwf	___ftdiv@f2+1
  8240  0E84  3044               	movlw	68
  8241  0E85  00BE               	movwf	___ftdiv@f2+2
  8242  0E86  0855               	movf	getADCValue@adcSum,w
  8243  0E87  00BF               	movwf	___ftdiv@f1
  8244  0E88  0856               	movf	getADCValue@adcSum+1,w
  8245  0E89  00C0               	movwf	___ftdiv@f1+1
  8246  0E8A  0857               	movf	getADCValue@adcSum+2,w
  8247  0E8B  00C1               	movwf	___ftdiv@f1+2
  8248  0E8C  318F  2757  318E   	fcall	___ftdiv
  8249  0E8F  0020               	movlb	0	; select bank0
  8250  0E90  083C               	movf	?___ftdiv,w
  8251  0E91  00D5               	movwf	getADCValue@adcSum
  8252  0E92  083D               	movf	?___ftdiv+1,w
  8253  0E93  00D6               	movwf	getADCValue@adcSum+1
  8254  0E94  083E               	movf	?___ftdiv+2,w
  8255  0E95  00D7               	movwf	getADCValue@adcSum+2
  8256                           
  8257                           ;main.c: 77: adcSum/= 500;
  8258  0E96  3000               	movlw	0
  8259  0E97  00BC               	movwf	___ftdiv@f2
  8260  0E98  30FA               	movlw	250
  8261  0E99  00BD               	movwf	___ftdiv@f2+1
  8262  0E9A  3043               	movlw	67
  8263  0E9B  00BE               	movwf	___ftdiv@f2+2
  8264  0E9C  0855               	movf	getADCValue@adcSum,w
  8265  0E9D  00BF               	movwf	___ftdiv@f1
  8266  0E9E  0856               	movf	getADCValue@adcSum+1,w
  8267  0E9F  00C0               	movwf	___ftdiv@f1+1
  8268  0EA0  0857               	movf	getADCValue@adcSum+2,w
  8269  0EA1  00C1               	movwf	___ftdiv@f1+2
  8270  0EA2  318F  2757         	fcall	___ftdiv
  8271  0EA4  0020               	movlb	0	; select bank0
  8272  0EA5  083C               	movf	?___ftdiv,w
  8273  0EA6  00D5               	movwf	getADCValue@adcSum
  8274  0EA7  083D               	movf	?___ftdiv+1,w
  8275  0EA8  00D6               	movwf	getADCValue@adcSum+1
  8276  0EA9  083E               	movf	?___ftdiv+2,w
  8277  0EAA  00D7               	movwf	getADCValue@adcSum+2
  8278                           
  8279                           ;main.c: 79: return adcSum;
  8280  0EAB  0855               	movf	getADCValue@adcSum,w
  8281  0EAC  00CC               	movwf	?_getADCValue
  8282  0EAD  0856               	movf	getADCValue@adcSum+1,w
  8283  0EAE  00CD               	movwf	?_getADCValue+1
  8284  0EAF  0857               	movf	getADCValue@adcSum+2,w
  8285  0EB0  00CE               	movwf	?_getADCValue+2
  8286  0EB1  0008               	return
  8287  0EB2                     __end_of_getADCValue:	
  8288                           
  8289                           	psect	text30
  8290  17AD                     __ptext30:	
  8291 ;; *************** function _sleep *****************
  8292 ;; Defined at:
  8293 ;;		line 23 in file "main.c"
  8294 ;; Parameters:    Size  Location     Type
  8295 ;;  wdps            1    wreg     unsigned char 
  8296 ;; Auto vars:     Size  Location     Type
  8297 ;;  wdps            1    2[BANK0 ] unsigned char 
  8298 ;; Return value:  Size  Location     Type
  8299 ;;                  1    wreg      void 
  8300 ;; Registers used:
  8301 ;;		wreg, status,2, status,0
  8302 ;; Tracked objects:
  8303 ;;		On entry : 0/0
  8304 ;;		On exit  : 0/0
  8305 ;;		Unchanged: 0/0
  8306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8308 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8309 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8310 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8311 ;;Total ram usage:        2 bytes
  8312 ;; Hardware stack levels used:    1
  8313 ;; Hardware stack levels required when called:    7
  8314 ;; This function calls:
  8315 ;;		Nothing
  8316 ;; This function is called by:
  8317 ;;		_getADCValue
  8318 ;;		_loop
  8319 ;;		_main
  8320 ;;		_checkRxData
  8321 ;; This function uses a non-reentrant model
  8322 ;;
  8323                           
  8324                           
  8325                           ;psect for function _sleep
  8326  17AD                     _sleep:	
  8327                           
  8328                           ;incstack = 0
  8329                           ; Regs used in _sleep: [wreg+status,2+status,0]
  8330                           ;sleep@wdps stored from wreg
  8331  17AD  0020               	movlb	0	; select bank0
  8332  17AE  00A2               	movwf	sleep@wdps
  8333                           
  8334                           ;main.c: 25: WDTCONbits.WDTPS = wdps;
  8335  17AF  0822               	movf	sleep@wdps,w
  8336  17B0  00A1               	movwf	??_sleep
  8337  17B1  0DA1               	rlf	??_sleep,f
  8338  17B2  0021               	movlb	1	; select bank1
  8339  17B3  0817               	movf	23,w	;volatile
  8340  17B4  0020               	movlb	0	; select bank0
  8341  17B5  0621               	xorwf	??_sleep,w
  8342  17B6  39C1               	andlw	-63
  8343  17B7  0621               	xorwf	??_sleep,w
  8344  17B8  0021               	movlb	1	; select bank1
  8345  17B9  0097               	movwf	23	;volatile
  8346  17BA                     l216:	
  8347                           ;main.c: 27: while (1){
  8348                           
  8349  17BA  0063               	sleep	;# 
  8350                           
  8351                           ;main.c: 30: __nop();
  8352  17BB  0000               	nop
  8353                           
  8354                           ;main.c: 31: __nop();
  8355  17BC  0000               	nop
  8356                           
  8357                           ;main.c: 33: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  8358  17BD  0020               	movlb	0	; select bank0
  8359  17BE  1E03               	btfss	3,4	;volatile
  8360  17BF  1983               	btfsc	3,3	;volatile
  8361  17C0  2FBA               	goto	l216
  8362                           
  8363                           ;main.c: 36: WDTCONbits.WDTPS = 13;
  8364  17C1  0021               	movlb	1	; select bank1
  8365  17C2  0817               	movf	23,w	;volatile
  8366  17C3  39C1               	andlw	-63
  8367  17C4  381A               	iorlw	26
  8368  17C5  0097               	movwf	23	;volatile
  8369  17C6  0064               	clrwdt	;# 
  8370                           
  8371                           ;main.c: 39: return;
  8372  17C7  0008               	return
  8373  17C8                     __end_of_sleep:	
  8374                           
  8375                           	psect	text31
  8376  0F57                     __ptext31:	
  8377 ;; *************** function ___ftdiv *****************
  8378 ;; Defined at:
  8379 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  8380 ;; Parameters:    Size  Location     Type
  8381 ;;  f2              3   28[BANK0 ] float 
  8382 ;;  f1              3   31[BANK0 ] float 
  8383 ;; Auto vars:     Size  Location     Type
  8384 ;;  f3              3   39[BANK0 ] float 
  8385 ;;  sign            1   43[BANK0 ] unsigned char 
  8386 ;;  exp             1   42[BANK0 ] unsigned char 
  8387 ;;  cntr            1   38[BANK0 ] unsigned char 
  8388 ;; Return value:  Size  Location     Type
  8389 ;;                  3   28[BANK0 ] float 
  8390 ;; Registers used:
  8391 ;;		wreg, status,2, status,0, pclath, cstack
  8392 ;; Tracked objects:
  8393 ;;		On entry : 0/0
  8394 ;;		On exit  : 0/0
  8395 ;;		Unchanged: 0/0
  8396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8397 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8398 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8399 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8400 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8401 ;;Total ram usage:       16 bytes
  8402 ;; Hardware stack levels used:    1
  8403 ;; Hardware stack levels required when called:    8
  8404 ;; This function calls:
  8405 ;;		___ftpack
  8406 ;; This function is called by:
  8407 ;;		_getADCValue
  8408 ;;		_loop
  8409 ;; This function uses a non-reentrant model
  8410 ;;
  8411                           
  8412                           
  8413                           ;psect for function ___ftdiv
  8414  0F57                     ___ftdiv:	
  8415                           
  8416                           ;incstack = 0
  8417                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  8418  0F57  0020               	movlb	0	; select bank0
  8419  0F58  083F               	movf	___ftdiv@f1,w
  8420  0F59  00C2               	movwf	??___ftdiv
  8421  0F5A  0840               	movf	___ftdiv@f1+1,w
  8422  0F5B  00C3               	movwf	??___ftdiv+1
  8423  0F5C  0841               	movf	___ftdiv@f1+2,w
  8424  0F5D  00C4               	movwf	??___ftdiv+2
  8425  0F5E  1003               	clrc
  8426  0F5F  0D43               	rlf	??___ftdiv+1,w
  8427  0F60  0D44               	rlf	??___ftdiv+2,w
  8428  0F61  00C5               	movwf	??___ftdiv+3
  8429  0F62  0845               	movf	??___ftdiv+3,w
  8430  0F63  00CA               	movwf	___ftdiv@exp
  8431  0F64  084A               	movf	___ftdiv@exp,w
  8432  0F65  1D03               	btfss	3,2
  8433  0F66  2F6E               	goto	l3077
  8434  0F67  3000               	movlw	0
  8435  0F68  00BC               	movwf	?___ftdiv
  8436  0F69  3000               	movlw	0
  8437  0F6A  00BD               	movwf	?___ftdiv+1
  8438  0F6B  3000               	movlw	0
  8439  0F6C  00BE               	movwf	?___ftdiv+2
  8440  0F6D  0008               	return
  8441  0F6E                     l3077:	
  8442  0F6E  083C               	movf	___ftdiv@f2,w
  8443  0F6F  00C2               	movwf	??___ftdiv
  8444  0F70  083D               	movf	___ftdiv@f2+1,w
  8445  0F71  00C3               	movwf	??___ftdiv+1
  8446  0F72  083E               	movf	___ftdiv@f2+2,w
  8447  0F73  00C4               	movwf	??___ftdiv+2
  8448  0F74  1003               	clrc
  8449  0F75  0D43               	rlf	??___ftdiv+1,w
  8450  0F76  0D44               	rlf	??___ftdiv+2,w
  8451  0F77  00C5               	movwf	??___ftdiv+3
  8452  0F78  0845               	movf	??___ftdiv+3,w
  8453  0F79  00CB               	movwf	___ftdiv@sign
  8454  0F7A  084B               	movf	___ftdiv@sign,w
  8455  0F7B  1D03               	btfss	3,2
  8456  0F7C  2F84               	goto	l3083
  8457  0F7D  3000               	movlw	0
  8458  0F7E  00BC               	movwf	?___ftdiv
  8459  0F7F  3000               	movlw	0
  8460  0F80  00BD               	movwf	?___ftdiv+1
  8461  0F81  3000               	movlw	0
  8462  0F82  00BE               	movwf	?___ftdiv+2
  8463  0F83  0008               	return
  8464  0F84                     l3083:	
  8465  0F84  3000               	movlw	0
  8466  0F85  00C7               	movwf	___ftdiv@f3
  8467  0F86  3000               	movlw	0
  8468  0F87  00C8               	movwf	___ftdiv@f3+1
  8469  0F88  3000               	movlw	0
  8470  0F89  00C9               	movwf	___ftdiv@f3+2
  8471  0F8A  3089               	movlw	137
  8472  0F8B  074B               	addwf	___ftdiv@sign,w
  8473  0F8C  00C2               	movwf	??___ftdiv
  8474  0F8D  0842               	movf	??___ftdiv,w
  8475  0F8E  02CA               	subwf	___ftdiv@exp,f
  8476  0F8F  083F               	movf	___ftdiv@f1,w
  8477  0F90  00C2               	movwf	??___ftdiv
  8478  0F91  0840               	movf	___ftdiv@f1+1,w
  8479  0F92  00C3               	movwf	??___ftdiv+1
  8480  0F93  0841               	movf	___ftdiv@f1+2,w
  8481  0F94  00C4               	movwf	??___ftdiv+2
  8482  0F95  3010               	movlw	16
  8483  0F96                     u3025:	
  8484  0F96  36C4               	lsrf	??___ftdiv+2,f
  8485  0F97  0CC3               	rrf	??___ftdiv+1,f
  8486  0F98  0CC2               	rrf	??___ftdiv,f
  8487  0F99  0B89               	decfsz	9,f
  8488  0F9A  2F96               	goto	u3025
  8489  0F9B  0842               	movf	??___ftdiv,w
  8490  0F9C  00C5               	movwf	??___ftdiv+3
  8491  0F9D  0845               	movf	??___ftdiv+3,w
  8492  0F9E  00CB               	movwf	___ftdiv@sign
  8493  0F9F  083C               	movf	___ftdiv@f2,w
  8494  0FA0  00C2               	movwf	??___ftdiv
  8495  0FA1  083D               	movf	___ftdiv@f2+1,w
  8496  0FA2  00C3               	movwf	??___ftdiv+1
  8497  0FA3  083E               	movf	___ftdiv@f2+2,w
  8498  0FA4  00C4               	movwf	??___ftdiv+2
  8499  0FA5  3010               	movlw	16
  8500  0FA6                     u3035:	
  8501  0FA6  36C4               	lsrf	??___ftdiv+2,f
  8502  0FA7  0CC3               	rrf	??___ftdiv+1,f
  8503  0FA8  0CC2               	rrf	??___ftdiv,f
  8504  0FA9  0B89               	decfsz	9,f
  8505  0FAA  2FA6               	goto	u3035
  8506  0FAB  0842               	movf	??___ftdiv,w
  8507  0FAC  00C5               	movwf	??___ftdiv+3
  8508  0FAD  0845               	movf	??___ftdiv+3,w
  8509  0FAE  06CB               	xorwf	___ftdiv@sign,f
  8510  0FAF  3080               	movlw	128
  8511  0FB0  00C2               	movwf	??___ftdiv
  8512  0FB1  0842               	movf	??___ftdiv,w
  8513  0FB2  05CB               	andwf	___ftdiv@sign,f
  8514  0FB3  17C0               	bsf	___ftdiv@f1+1,7
  8515  0FB4  30FF               	movlw	255
  8516  0FB5  05BF               	andwf	___ftdiv@f1,f
  8517  0FB6  30FF               	movlw	255
  8518  0FB7  05C0               	andwf	___ftdiv@f1+1,f
  8519  0FB8  3000               	movlw	0
  8520  0FB9  05C1               	andwf	___ftdiv@f1+2,f
  8521  0FBA  17BD               	bsf	___ftdiv@f2+1,7
  8522  0FBB  30FF               	movlw	255
  8523  0FBC  05BC               	andwf	___ftdiv@f2,f
  8524  0FBD  30FF               	movlw	255
  8525  0FBE  05BD               	andwf	___ftdiv@f2+1,f
  8526  0FBF  3000               	movlw	0
  8527  0FC0  05BE               	andwf	___ftdiv@f2+2,f
  8528  0FC1  3018               	movlw	24
  8529  0FC2  00C2               	movwf	??___ftdiv
  8530  0FC3  0842               	movf	??___ftdiv,w
  8531  0FC4  00C6               	movwf	___ftdiv@cntr
  8532  0FC5                     l3097:	
  8533  0FC5  3001               	movlw	1
  8534  0FC6                     u3045:	
  8535  0FC6  35C7               	lslf	___ftdiv@f3,f
  8536  0FC7  0DC8               	rlf	___ftdiv@f3+1,f
  8537  0FC8  0DC9               	rlf	___ftdiv@f3+2,f
  8538  0FC9  0B89               	decfsz	9,f
  8539  0FCA  2FC6               	goto	u3045
  8540  0FCB  083E               	movf	___ftdiv@f2+2,w
  8541  0FCC  0241               	subwf	___ftdiv@f1+2,w
  8542  0FCD  1D03               	skipz
  8543  0FCE  2FD5               	goto	u3055
  8544  0FCF  083D               	movf	___ftdiv@f2+1,w
  8545  0FD0  0240               	subwf	___ftdiv@f1+1,w
  8546  0FD1  1D03               	skipz
  8547  0FD2  2FD5               	goto	u3055
  8548  0FD3  083C               	movf	___ftdiv@f2,w
  8549  0FD4  023F               	subwf	___ftdiv@f1,w
  8550  0FD5                     u3055:	
  8551  0FD5  1C03               	skipc
  8552  0FD6  2FDE               	goto	l3105
  8553  0FD7  083C               	movf	___ftdiv@f2,w
  8554  0FD8  02BF               	subwf	___ftdiv@f1,f
  8555  0FD9  083D               	movf	___ftdiv@f2+1,w
  8556  0FDA  3BC0               	subwfb	___ftdiv@f1+1,f
  8557  0FDB  083E               	movf	___ftdiv@f2+2,w
  8558  0FDC  3BC1               	subwfb	___ftdiv@f1+2,f
  8559  0FDD  1447               	bsf	___ftdiv@f3,0
  8560  0FDE                     l3105:	
  8561  0FDE  3001               	movlw	1
  8562  0FDF                     u3065:	
  8563  0FDF  35BF               	lslf	___ftdiv@f1,f
  8564  0FE0  0DC0               	rlf	___ftdiv@f1+1,f
  8565  0FE1  0DC1               	rlf	___ftdiv@f1+2,f
  8566  0FE2  0B89               	decfsz	9,f
  8567  0FE3  2FDF               	goto	u3065
  8568  0FE4  3001               	movlw	1
  8569  0FE5  02C6               	subwf	___ftdiv@cntr,f
  8570  0FE6  1D03               	btfss	3,2
  8571  0FE7  2FC5               	goto	l3097
  8572  0FE8  0847               	movf	___ftdiv@f3,w
  8573  0FE9  00A1               	movwf	___ftpack@arg
  8574  0FEA  0848               	movf	___ftdiv@f3+1,w
  8575  0FEB  00A2               	movwf	___ftpack@arg+1
  8576  0FEC  0849               	movf	___ftdiv@f3+2,w
  8577  0FED  00A3               	movwf	___ftpack@arg+2
  8578  0FEE  084A               	movf	___ftdiv@exp,w
  8579  0FEF  00C2               	movwf	??___ftdiv
  8580  0FF0  0842               	movf	??___ftdiv,w
  8581  0FF1  00A4               	movwf	___ftpack@exp
  8582  0FF2  084B               	movf	___ftdiv@sign,w
  8583  0FF3  00C3               	movwf	??___ftdiv+1
  8584  0FF4  0843               	movf	??___ftdiv+1,w
  8585  0FF5  00A5               	movwf	___ftpack@sign
  8586  0FF6  318D  2507         	fcall	___ftpack
  8587  0FF8  0020               	movlb	0	; select bank0
  8588  0FF9  0821               	movf	?___ftpack,w
  8589  0FFA  00BC               	movwf	?___ftdiv
  8590  0FFB  0822               	movf	?___ftpack+1,w
  8591  0FFC  00BD               	movwf	?___ftdiv+1
  8592  0FFD  0823               	movf	?___ftpack+2,w
  8593  0FFE  00BE               	movwf	?___ftdiv+2
  8594  0FFF  0008               	return
  8595  1000                     __end_of___ftdiv:	
  8596                           
  8597                           	psect	text32
  8598  0430                     __ptext32:	
  8599 ;; *************** function ___ftadd *****************
  8600 ;; Defined at:
  8601 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  8602 ;; Parameters:    Size  Location     Type
  8603 ;;  f1              3   15[BANK0 ] float 
  8604 ;;  f2              3   18[BANK0 ] float 
  8605 ;; Auto vars:     Size  Location     Type
  8606 ;;  exp1            1   27[BANK0 ] unsigned char 
  8607 ;;  exp2            1   26[BANK0 ] unsigned char 
  8608 ;;  sign            1   25[BANK0 ] unsigned char 
  8609 ;; Return value:  Size  Location     Type
  8610 ;;                  3   15[BANK0 ] float 
  8611 ;; Registers used:
  8612 ;;		wreg, status,2, status,0, pclath, cstack
  8613 ;; Tracked objects:
  8614 ;;		On entry : 0/0
  8615 ;;		On exit  : 0/0
  8616 ;;		Unchanged: 0/0
  8617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8618 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;Total ram usage:       13 bytes
  8623 ;; Hardware stack levels used:    1
  8624 ;; Hardware stack levels required when called:    8
  8625 ;; This function calls:
  8626 ;;		___ftpack
  8627 ;; This function is called by:
  8628 ;;		_getADCValue
  8629 ;;		_loop
  8630 ;;		___ftsub
  8631 ;; This function uses a non-reentrant model
  8632 ;;
  8633                           
  8634                           
  8635                           ;psect for function ___ftadd
  8636  0430                     ___ftadd:	
  8637                           
  8638                           ;incstack = 0
  8639                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8640  0430  0020               	movlb	0	; select bank0
  8641  0431  082F               	movf	___ftadd@f1,w
  8642  0432  00B5               	movwf	??___ftadd
  8643  0433  0830               	movf	___ftadd@f1+1,w
  8644  0434  00B6               	movwf	??___ftadd+1
  8645  0435  0831               	movf	___ftadd@f1+2,w
  8646  0436  00B7               	movwf	??___ftadd+2
  8647  0437  1003               	clrc
  8648  0438  0D36               	rlf	??___ftadd+1,w
  8649  0439  0D37               	rlf	??___ftadd+2,w
  8650  043A  00B8               	movwf	??___ftadd+3
  8651  043B  0838               	movf	??___ftadd+3,w
  8652  043C  00BB               	movwf	___ftadd@exp1
  8653  043D  0832               	movf	___ftadd@f2,w
  8654  043E  00B5               	movwf	??___ftadd
  8655  043F  0833               	movf	___ftadd@f2+1,w
  8656  0440  00B6               	movwf	??___ftadd+1
  8657  0441  0834               	movf	___ftadd@f2+2,w
  8658  0442  00B7               	movwf	??___ftadd+2
  8659  0443  1003               	clrc
  8660  0444  0D36               	rlf	??___ftadd+1,w
  8661  0445  0D37               	rlf	??___ftadd+2,w
  8662  0446  00B8               	movwf	??___ftadd+3
  8663  0447  0838               	movf	??___ftadd+3,w
  8664  0448  00BA               	movwf	___ftadd@exp2
  8665  0449  083B               	movf	___ftadd@exp1,w
  8666  044A  1903               	btfsc	3,2
  8667  044B  2C58               	goto	l2481
  8668  044C  083A               	movf	___ftadd@exp2,w
  8669  044D  023B               	subwf	___ftadd@exp1,w
  8670  044E  1803               	skipnc
  8671  044F  2C5F               	goto	l2485
  8672  0450  033B               	decf	___ftadd@exp1,w
  8673  0451  3AFF               	xorlw	255
  8674  0452  073A               	addwf	___ftadd@exp2,w
  8675  0453  00B5               	movwf	??___ftadd
  8676  0454  3019               	movlw	25
  8677  0455  0235               	subwf	??___ftadd,w
  8678  0456  1C03               	skipc
  8679  0457  2C5F               	goto	l2485
  8680  0458                     l2481:	
  8681  0458  0832               	movf	___ftadd@f2,w
  8682  0459  00AF               	movwf	?___ftadd
  8683  045A  0833               	movf	___ftadd@f2+1,w
  8684  045B  00B0               	movwf	?___ftadd+1
  8685  045C  0834               	movf	___ftadd@f2+2,w
  8686  045D  00B1               	movwf	?___ftadd+2
  8687  045E  0008               	return
  8688  045F                     l2485:	
  8689  045F  083A               	movf	___ftadd@exp2,w
  8690  0460  1903               	btfsc	3,2
  8691  0461  0008               	return
  8692  0462  083B               	movf	___ftadd@exp1,w
  8693  0463  023A               	subwf	___ftadd@exp2,w
  8694  0464  1803               	skipnc
  8695  0465  2C6E               	goto	l2491
  8696  0466  033A               	decf	___ftadd@exp2,w
  8697  0467  3AFF               	xorlw	255
  8698  0468  073B               	addwf	___ftadd@exp1,w
  8699  0469  00B5               	movwf	??___ftadd
  8700  046A  3019               	movlw	25
  8701  046B  0235               	subwf	??___ftadd,w
  8702  046C  1803               	btfsc	3,0
  8703  046D  0008               	return
  8704  046E                     l2491:	
  8705  046E  3006               	movlw	6
  8706  046F  00B5               	movwf	??___ftadd
  8707  0470  0835               	movf	??___ftadd,w
  8708  0471  00B9               	movwf	___ftadd@sign
  8709  0472  1BB1               	btfsc	___ftadd@f1+2,7
  8710  0473  17B9               	bsf	___ftadd@sign,7
  8711  0474  1BB4               	btfsc	___ftadd@f2+2,7
  8712  0475  1739               	bsf	___ftadd@sign,6
  8713  0476  17B0               	bsf	___ftadd@f1+1,7
  8714  0477  30FF               	movlw	255
  8715  0478  05AF               	andwf	___ftadd@f1,f
  8716  0479  30FF               	movlw	255
  8717  047A  05B0               	andwf	___ftadd@f1+1,f
  8718  047B  3000               	movlw	0
  8719  047C  05B1               	andwf	___ftadd@f1+2,f
  8720  047D  17B3               	bsf	___ftadd@f2+1,7
  8721  047E  30FF               	movlw	255
  8722  047F  05B2               	andwf	___ftadd@f2,f
  8723  0480  30FF               	movlw	255
  8724  0481  05B3               	andwf	___ftadd@f2+1,f
  8725  0482  3000               	movlw	0
  8726  0483  05B4               	andwf	___ftadd@f2+2,f
  8727  0484  083A               	movf	___ftadd@exp2,w
  8728  0485  023B               	subwf	___ftadd@exp1,w
  8729  0486  1803               	skipnc
  8730  0487  2CAA               	goto	l2513
  8731  0488                     l2503:	
  8732  0488  3001               	movlw	1
  8733  0489                     u2115:	
  8734  0489  35B2               	lslf	___ftadd@f2,f
  8735  048A  0DB3               	rlf	___ftadd@f2+1,f
  8736  048B  0DB4               	rlf	___ftadd@f2+2,f
  8737  048C  0B89               	decfsz	9,f
  8738  048D  2C89               	goto	u2115
  8739  048E  3001               	movlw	1
  8740  048F  02BA               	subwf	___ftadd@exp2,f
  8741  0490  083A               	movf	___ftadd@exp2,w
  8742  0491  063B               	xorwf	___ftadd@exp1,w
  8743  0492  1903               	skipnz
  8744  0493  2CA5               	goto	l2511
  8745  0494  3001               	movlw	1
  8746  0495  02B9               	subwf	___ftadd@sign,f
  8747  0496  0839               	movf	___ftadd@sign,w
  8748  0497  3907               	andlw	7
  8749  0498  1903               	btfsc	3,2
  8750  0499  2CA5               	goto	l2511
  8751  049A  2C88               	goto	l2503
  8752  049B                     l2509:	
  8753  049B  3001               	movlw	1
  8754  049C                     u2145:	
  8755  049C  36B1               	lsrf	___ftadd@f1+2,f
  8756  049D  0CB0               	rrf	___ftadd@f1+1,f
  8757  049E  0CAF               	rrf	___ftadd@f1,f
  8758  049F  0B89               	decfsz	9,f
  8759  04A0  2C9C               	goto	u2145
  8760  04A1  3001               	movlw	1
  8761  04A2  00B5               	movwf	??___ftadd
  8762  04A3  0835               	movf	??___ftadd,w
  8763  04A4  07BB               	addwf	___ftadd@exp1,f
  8764  04A5                     l2511:	
  8765  04A5  083B               	movf	___ftadd@exp1,w
  8766  04A6  063A               	xorwf	___ftadd@exp2,w
  8767  04A7  1903               	btfsc	3,2
  8768  04A8  2CCF               	goto	l751
  8769  04A9  2C9B               	goto	l2509
  8770  04AA                     l2513:	
  8771  04AA  083B               	movf	___ftadd@exp1,w
  8772  04AB  023A               	subwf	___ftadd@exp2,w
  8773  04AC  1803               	skipnc
  8774  04AD  2CCF               	goto	l751
  8775  04AE                     l2515:	
  8776  04AE  3001               	movlw	1
  8777  04AF                     u2175:	
  8778  04AF  35AF               	lslf	___ftadd@f1,f
  8779  04B0  0DB0               	rlf	___ftadd@f1+1,f
  8780  04B1  0DB1               	rlf	___ftadd@f1+2,f
  8781  04B2  0B89               	decfsz	9,f
  8782  04B3  2CAF               	goto	u2175
  8783  04B4  3001               	movlw	1
  8784  04B5  02BB               	subwf	___ftadd@exp1,f
  8785  04B6  083A               	movf	___ftadd@exp2,w
  8786  04B7  063B               	xorwf	___ftadd@exp1,w
  8787  04B8  1903               	skipnz
  8788  04B9  2CCB               	goto	l2523
  8789  04BA  3001               	movlw	1
  8790  04BB  02B9               	subwf	___ftadd@sign,f
  8791  04BC  0839               	movf	___ftadd@sign,w
  8792  04BD  3907               	andlw	7
  8793  04BE  1903               	btfsc	3,2
  8794  04BF  2CCB               	goto	l2523
  8795  04C0  2CAE               	goto	l2515
  8796  04C1                     l2521:	
  8797  04C1  3001               	movlw	1
  8798  04C2                     u2205:	
  8799  04C2  36B4               	lsrf	___ftadd@f2+2,f
  8800  04C3  0CB3               	rrf	___ftadd@f2+1,f
  8801  04C4  0CB2               	rrf	___ftadd@f2,f
  8802  04C5  0B89               	decfsz	9,f
  8803  04C6  2CC2               	goto	u2205
  8804  04C7  3001               	movlw	1
  8805  04C8  00B5               	movwf	??___ftadd
  8806  04C9  0835               	movf	??___ftadd,w
  8807  04CA  07BA               	addwf	___ftadd@exp2,f
  8808  04CB                     l2523:	
  8809  04CB  083B               	movf	___ftadd@exp1,w
  8810  04CC  063A               	xorwf	___ftadd@exp2,w
  8811  04CD  1D03               	skipz
  8812  04CE  2CC1               	goto	l2521
  8813  04CF                     l751:	
  8814  04CF  1FB9               	btfss	___ftadd@sign,7
  8815  04D0  2CE1               	goto	l2527
  8816  04D1  30FF               	movlw	255
  8817  04D2  06AF               	xorwf	___ftadd@f1,f
  8818  04D3  30FF               	movlw	255
  8819  04D4  06B0               	xorwf	___ftadd@f1+1,f
  8820  04D5  30FF               	movlw	255
  8821  04D6  06B1               	xorwf	___ftadd@f1+2,f
  8822  04D7  3001               	movlw	1
  8823  04D8  07AF               	addwf	___ftadd@f1,f
  8824  04D9  3000               	movlw	0
  8825  04DA  1803               	skipnc
  8826  04DB  3001               	movlw	1
  8827  04DC  07B0               	addwf	___ftadd@f1+1,f
  8828  04DD  3000               	movlw	0
  8829  04DE  1803               	skipnc
  8830  04DF  3001               	movlw	1
  8831  04E0  07B1               	addwf	___ftadd@f1+2,f
  8832  04E1                     l2527:	
  8833  04E1  1F39               	btfss	___ftadd@sign,6
  8834  04E2  2CF3               	goto	l2531
  8835  04E3  30FF               	movlw	255
  8836  04E4  06B2               	xorwf	___ftadd@f2,f
  8837  04E5  30FF               	movlw	255
  8838  04E6  06B3               	xorwf	___ftadd@f2+1,f
  8839  04E7  30FF               	movlw	255
  8840  04E8  06B4               	xorwf	___ftadd@f2+2,f
  8841  04E9  3001               	movlw	1
  8842  04EA  07B2               	addwf	___ftadd@f2,f
  8843  04EB  3000               	movlw	0
  8844  04EC  1803               	skipnc
  8845  04ED  3001               	movlw	1
  8846  04EE  07B3               	addwf	___ftadd@f2+1,f
  8847  04EF  3000               	movlw	0
  8848  04F0  1803               	skipnc
  8849  04F1  3001               	movlw	1
  8850  04F2  07B4               	addwf	___ftadd@f2+2,f
  8851  04F3                     l2531:	
  8852  04F3  01B9               	clrf	___ftadd@sign
  8853  04F4  082F               	movf	___ftadd@f1,w
  8854  04F5  07B2               	addwf	___ftadd@f2,f
  8855  04F6  0830               	movf	___ftadd@f1+1,w
  8856  04F7  3DB3               	addwfc	___ftadd@f2+1,f
  8857  04F8  0831               	movf	___ftadd@f1+2,w
  8858  04F9  3DB4               	addwfc	___ftadd@f2+2,f
  8859  04FA  1FB4               	btfss	___ftadd@f2+2,7
  8860  04FB  2D0E               	goto	l2541
  8861  04FC  30FF               	movlw	255
  8862  04FD  06B2               	xorwf	___ftadd@f2,f
  8863  04FE  30FF               	movlw	255
  8864  04FF  06B3               	xorwf	___ftadd@f2+1,f
  8865  0500  30FF               	movlw	255
  8866  0501  06B4               	xorwf	___ftadd@f2+2,f
  8867  0502  3001               	movlw	1
  8868  0503  07B2               	addwf	___ftadd@f2,f
  8869  0504  3000               	movlw	0
  8870  0505  1803               	skipnc
  8871  0506  3001               	movlw	1
  8872  0507  07B3               	addwf	___ftadd@f2+1,f
  8873  0508  3000               	movlw	0
  8874  0509  1803               	skipnc
  8875  050A  3001               	movlw	1
  8876  050B  07B4               	addwf	___ftadd@f2+2,f
  8877  050C  01B9               	clrf	___ftadd@sign
  8878  050D  0AB9               	incf	___ftadd@sign,f
  8879  050E                     l2541:	
  8880  050E  0832               	movf	___ftadd@f2,w
  8881  050F  00A1               	movwf	___ftpack@arg
  8882  0510  0833               	movf	___ftadd@f2+1,w
  8883  0511  00A2               	movwf	___ftpack@arg+1
  8884  0512  0834               	movf	___ftadd@f2+2,w
  8885  0513  00A3               	movwf	___ftpack@arg+2
  8886  0514  083B               	movf	___ftadd@exp1,w
  8887  0515  00B5               	movwf	??___ftadd
  8888  0516  0835               	movf	??___ftadd,w
  8889  0517  00A4               	movwf	___ftpack@exp
  8890  0518  0839               	movf	___ftadd@sign,w
  8891  0519  00B6               	movwf	??___ftadd+1
  8892  051A  0836               	movf	??___ftadd+1,w
  8893  051B  00A5               	movwf	___ftpack@sign
  8894  051C  318D  2507         	fcall	___ftpack
  8895  051E  0020               	movlb	0	; select bank0
  8896  051F  0821               	movf	?___ftpack,w
  8897  0520  00AF               	movwf	?___ftadd
  8898  0521  0822               	movf	?___ftpack+1,w
  8899  0522  00B0               	movwf	?___ftadd+1
  8900  0523  0823               	movf	?___ftpack+2,w
  8901  0524  00B1               	movwf	?___ftadd+2
  8902  0525  0008               	return
  8903  0526                     __end_of___ftadd:	
  8904                           
  8905                           	psect	text33
  8906  08F2                     __ptext33:	
  8907 ;; *************** function ___awtoft *****************
  8908 ;; Defined at:
  8909 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  8910 ;; Parameters:    Size  Location     Type
  8911 ;;  c               2    9[BANK0 ] int 
  8912 ;; Auto vars:     Size  Location     Type
  8913 ;;  sign            1   14[BANK0 ] unsigned char 
  8914 ;; Return value:  Size  Location     Type
  8915 ;;                  3    9[BANK0 ] float 
  8916 ;; Registers used:
  8917 ;;		wreg, status,2, status,0, pclath, cstack
  8918 ;; Tracked objects:
  8919 ;;		On entry : 0/0
  8920 ;;		On exit  : 0/0
  8921 ;;		Unchanged: 0/0
  8922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8923 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8924 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8925 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8926 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8927 ;;Total ram usage:        6 bytes
  8928 ;; Hardware stack levels used:    1
  8929 ;; Hardware stack levels required when called:    8
  8930 ;; This function calls:
  8931 ;;		___ftpack
  8932 ;; This function is called by:
  8933 ;;		_getADCValue
  8934 ;; This function uses a non-reentrant model
  8935 ;;
  8936                           
  8937                           
  8938                           ;psect for function ___awtoft
  8939  08F2                     ___awtoft:	
  8940                           
  8941                           ;incstack = 0
  8942                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8943  08F2  0020               	movlb	0	; select bank0
  8944  08F3  01AE               	clrf	___awtoft@sign
  8945  08F4  1FAA               	btfss	___awtoft@c+1,7
  8946  08F5  28FD               	goto	l3067
  8947  08F6  09A9               	comf	___awtoft@c,f
  8948  08F7  09AA               	comf	___awtoft@c+1,f
  8949  08F8  0AA9               	incf	___awtoft@c,f
  8950  08F9  1903               	skipnz
  8951  08FA  0AAA               	incf	___awtoft@c+1,f
  8952  08FB  01AE               	clrf	___awtoft@sign
  8953  08FC  0AAE               	incf	___awtoft@sign,f
  8954  08FD                     l3067:	
  8955  08FD  0829               	movf	___awtoft@c,w
  8956  08FE  00A1               	movwf	___ftpack@arg
  8957  08FF  082A               	movf	___awtoft@c+1,w
  8958  0900  00A2               	movwf	___ftpack@arg+1
  8959  0901  01A3               	clrf	___ftpack@arg+2
  8960  0902  308E               	movlw	142
  8961  0903  00AC               	movwf	??___awtoft
  8962  0904  082C               	movf	??___awtoft,w
  8963  0905  00A4               	movwf	___ftpack@exp
  8964  0906  082E               	movf	___awtoft@sign,w
  8965  0907  00AD               	movwf	??___awtoft+1
  8966  0908  082D               	movf	??___awtoft+1,w
  8967  0909  00A5               	movwf	___ftpack@sign
  8968  090A  318D  2507         	fcall	___ftpack
  8969  090C  0020               	movlb	0	; select bank0
  8970  090D  0821               	movf	?___ftpack,w
  8971  090E  00A9               	movwf	?___awtoft
  8972  090F  0822               	movf	?___ftpack+1,w
  8973  0910  00AA               	movwf	?___awtoft+1
  8974  0911  0823               	movf	?___ftpack+2,w
  8975  0912  00AB               	movwf	?___awtoft+2
  8976  0913  0008               	return
  8977  0914                     __end_of___awtoft:	
  8978                           
  8979                           	psect	text34
  8980  171A                     __ptext34:	
  8981 ;; *************** function _checkTXPower *****************
  8982 ;; Defined at:
  8983 ;;		line 109 in file "main.c"
  8984 ;; Parameters:    Size  Location     Type
  8985 ;;		None
  8986 ;; Auto vars:     Size  Location     Type
  8987 ;;  rxPacket        1    9[BANK0 ] PTR struct .
  8988 ;;		 -> RXPacket(33), 
  8989 ;; Return value:  Size  Location     Type
  8990 ;;                  1    wreg      void 
  8991 ;; Registers used:
  8992 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8993 ;; Tracked objects:
  8994 ;;		On entry : 0/0
  8995 ;;		On exit  : 0/0
  8996 ;;		Unchanged: 0/0
  8997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8999 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9000 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9001 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9002 ;;Total ram usage:        2 bytes
  9003 ;; Hardware stack levels used:    1
  9004 ;; Hardware stack levels required when called:   11
  9005 ;; This function calls:
  9006 ;;		_nrf24l01ChangeTXPower
  9007 ;;		_nrf24l01GetRXPacket
  9008 ;; This function is called by:
  9009 ;;		_loop
  9010 ;; This function uses a non-reentrant model
  9011 ;;
  9012                           
  9013                           
  9014                           ;psect for function _checkTXPower
  9015  171A                     _checkTXPower:	
  9016                           
  9017                           ;main.c: 110: nrf24l01Packet_t * rxPacket = nrf24l01GetRXPacket();
  9018                           
  9019                           ;incstack = 0
  9020                           ; Regs used in _checkTXPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9021  171A  3187  27FE  3197   	fcall	_nrf24l01GetRXPacket
  9022  171D  0020               	movlb	0	; select bank0
  9023  171E  00A8               	movwf	??_checkTXPower
  9024  171F  0828               	movf	??_checkTXPower,w
  9025  1720  00A9               	movwf	checkTXPower@rxPacket
  9026                           
  9027                           ;main.c: 112: if (rxPacket->packetData.ACKRPD){
  9028  1721  0829               	movf	checkTXPower@rxPacket,w
  9029  1722  0086               	movwf	6
  9030  1723  3001               	movlw	1	; select bank2/3
  9031  1724  0087               	movwf	7
  9032  1725  1C81               	btfss	1,1
  9033  1726  0008               	return
  9034                           
  9035                           ;main.c: 113: nrf24l01ChangeTXPower(-1);
  9036  1727  30FF               	movlw	255
  9037  1728  00A4               	movwf	nrf24l01ChangeTXPower@addPower
  9038  1729  30FF               	movlw	255
  9039  172A  00A5               	movwf	nrf24l01ChangeTXPower@addPower+1
  9040  172B  318B  2352         	fcall	_nrf24l01ChangeTXPower
  9041  172D  0008               	return
  9042  172E                     __end_of_checkTXPower:	
  9043                           
  9044                           	psect	text35
  9045  07FE                     __ptext35:	
  9046 ;; *************** function _nrf24l01GetRXPacket *****************
  9047 ;; Defined at:
  9048 ;;		line 131 in file "nrf24l01.c"
  9049 ;; Parameters:    Size  Location     Type
  9050 ;;		None
  9051 ;; Auto vars:     Size  Location     Type
  9052 ;;		None
  9053 ;; Return value:  Size  Location     Type
  9054 ;;                  1    wreg      PTR struct .
  9055 ;; Registers used:
  9056 ;;		wreg
  9057 ;; Tracked objects:
  9058 ;;		On entry : 0/0
  9059 ;;		On exit  : 0/0
  9060 ;;		Unchanged: 0/0
  9061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9066 ;;Total ram usage:        0 bytes
  9067 ;; Hardware stack levels used:    1
  9068 ;; Hardware stack levels required when called:    7
  9069 ;; This function calls:
  9070 ;;		Nothing
  9071 ;; This function is called by:
  9072 ;;		_checkTXPower
  9073 ;; This function uses a non-reentrant model
  9074 ;;
  9075                           
  9076                           
  9077                           ;psect for function _nrf24l01GetRXPacket
  9078  07FE                     _nrf24l01GetRXPacket:	
  9079                           
  9080                           ;nrf24l01.c: 132: return &RXPacket;
  9081                           
  9082                           ;incstack = 0
  9083                           ; Regs used in _nrf24l01GetRXPacket: [wreg]
  9084  07FE  30A0               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  9085  07FF  0008               	return
  9086  0800                     __end_of_nrf24l01GetRXPacket:	
  9087                           
  9088                           	psect	text36
  9089  0B52                     __ptext36:	
  9090 ;; *************** function _nrf24l01ChangeTXPower *****************
  9091 ;; Defined at:
  9092 ;;		line 33 in file "nrf24l01.c"
  9093 ;; Parameters:    Size  Location     Type
  9094 ;;  addPower        2    4[BANK0 ] int 
  9095 ;; Auto vars:     Size  Location     Type
  9096 ;;  rfSetup         1    7[BANK0 ] struct .
  9097 ;; Return value:  Size  Location     Type
  9098 ;;                  1    wreg      void 
  9099 ;; Registers used:
  9100 ;;		wreg, status,2, status,0, pclath, cstack
  9101 ;; Tracked objects:
  9102 ;;		On entry : 0/0
  9103 ;;		On exit  : 0/0
  9104 ;;		Unchanged: 0/0
  9105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9106 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9110 ;;Total ram usage:        4 bytes
  9111 ;; Hardware stack levels used:    1
  9112 ;; Hardware stack levels required when called:   10
  9113 ;; This function calls:
  9114 ;;		_nrf24l01Send
  9115 ;; This function is called by:
  9116 ;;		_checkTXPower
  9117 ;;		_nrf24l01SendPacket
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121                           
  9122                           ;psect for function _nrf24l01ChangeTXPower
  9123  0B52                     _nrf24l01ChangeTXPower:	
  9124                           
  9125                           ;nrf24l01.c: 35: n_RF_SETUP_t rfSetup;;nrf24l01.c: 36: rfSetup.byte = nrf24l01Send((unsi
      +                          gned) 0b00000000 | (unsigned) 0x06, 0);
  9126                           
  9127                           ;incstack = 0
  9128                           ; Regs used in _nrf24l01ChangeTXPower: [wreg+status,2+status,0+pclath+cstack]
  9129  0B52  0020               	movlb	0	; select bank0
  9130  0B53  01A1               	clrf	nrf24l01Send@data
  9131  0B54  3006               	movlw	6
  9132  0B55  3188  2090  318B   	fcall	_nrf24l01Send
  9133  0B58  0020               	movlb	0	; select bank0
  9134  0B59  00A6               	movwf	??_nrf24l01ChangeTXPower
  9135  0B5A  0826               	movf	??_nrf24l01ChangeTXPower,w
  9136  0B5B  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  9137                           
  9138                           ;nrf24l01.c: 38: if (addPower > 0){
  9139  0B5C  0825               	movf	nrf24l01ChangeTXPower@addPower+1,w
  9140  0B5D  3A80               	xorlw	128
  9141  0B5E  00A6               	movwf	??_nrf24l01ChangeTXPower
  9142  0B5F  3080               	movlw	128
  9143  0B60  0226               	subwf	??_nrf24l01ChangeTXPower,w
  9144  0B61  1D03               	skipz
  9145  0B62  2B65               	goto	u2905
  9146  0B63  3001               	movlw	1
  9147  0B64  0224               	subwf	nrf24l01ChangeTXPower@addPower,w
  9148  0B65                     u2905:	
  9149  0B65  1C03               	skipc
  9150  0B66  2B77               	goto	l3005
  9151                           
  9152                           ;nrf24l01.c: 39: if (rfSetup.RF_PWR < 3){
  9153  0B67  0020               	movlb	0	; select bank0
  9154  0B68  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9155  0B69  3903               	andlw	3
  9156  0B6A  3A03               	xorlw	3
  9157  0B6B  1903               	skipnz
  9158  0B6C  2B77               	goto	l3005
  9159                           
  9160                           ;nrf24l01.c: 40: rfSetup.RF_PWR++;
  9161  0B6D  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9162  0B6E  3903               	andlw	3
  9163  0B6F  00A6               	movwf	??_nrf24l01ChangeTXPower
  9164  0B70  0AA6               	incf	??_nrf24l01ChangeTXPower,f
  9165  0B71  0DA6               	rlf	??_nrf24l01ChangeTXPower,f
  9166  0B72  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  9167  0B73  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  9168  0B74  39F9               	andlw	-7
  9169  0B75  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  9170  0B76  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  9171  0B77                     l3005:	
  9172                           
  9173                           ;nrf24l01.c: 41: };nrf24l01.c: 42: };nrf24l01.c: 44: if (addPower < 0){
  9174  0B77  0020               	movlb	0	; select bank0
  9175  0B78  1FA5               	btfss	nrf24l01ChangeTXPower@addPower+1,7
  9176  0B79  2B89               	goto	l3011
  9177                           
  9178                           ;nrf24l01.c: 45: if (rfSetup.RF_PWR > 0){
  9179  0B7A  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9180  0B7B  3903               	andlw	3
  9181  0B7C  3A00               	xorlw	0
  9182  0B7D  1903               	skipnz
  9183  0B7E  2B89               	goto	l3011
  9184                           
  9185                           ;nrf24l01.c: 46: rfSetup.RF_PWR--;
  9186  0B7F  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9187  0B80  3903               	andlw	3
  9188  0B81  00A6               	movwf	??_nrf24l01ChangeTXPower
  9189  0B82  03A6               	decf	??_nrf24l01ChangeTXPower,f
  9190  0B83  0DA6               	rlf	??_nrf24l01ChangeTXPower,f
  9191  0B84  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  9192  0B85  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  9193  0B86  39F9               	andlw	-7
  9194  0B87  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  9195  0B88  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  9196  0B89                     l3011:	
  9197                           
  9198                           ;nrf24l01.c: 47: };nrf24l01.c: 48: };nrf24l01.c: 50: nrf24l01Send((unsigned) 0b00100000 
      +                          | (unsigned) 0x06, rfSetup.byte);
  9199  0B89  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  9200  0B8A  00A6               	movwf	??_nrf24l01ChangeTXPower
  9201  0B8B  0826               	movf	??_nrf24l01ChangeTXPower,w
  9202  0B8C  00A1               	movwf	nrf24l01Send@data
  9203  0B8D  3026               	movlw	38
  9204  0B8E  3188  2090         	fcall	_nrf24l01Send
  9205  0B90  0008               	return
  9206  0B91                     __end_of_nrf24l01ChangeTXPower:	
  9207                           
  9208                           	psect	text37
  9209  0890                     __ptext37:	
  9210 ;; *************** function _nrf24l01Send *****************
  9211 ;; Defined at:
  9212 ;;		line 9 in file "nrf24l01.c"
  9213 ;; Parameters:    Size  Location     Type
  9214 ;;  command         1    wreg     unsigned char 
  9215 ;;  data            1    1[BANK0 ] unsigned char 
  9216 ;; Auto vars:     Size  Location     Type
  9217 ;;  command         1    3[BANK0 ] unsigned char 
  9218 ;; Return value:  Size  Location     Type
  9219 ;;                  1    wreg      unsigned char 
  9220 ;; Registers used:
  9221 ;;		wreg, status,2, status,0, pclath, cstack
  9222 ;; Tracked objects:
  9223 ;;		On entry : 0/0
  9224 ;;		On exit  : 0/0
  9225 ;;		Unchanged: 0/0
  9226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9227 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9228 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9229 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9230 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9231 ;;Total ram usage:        3 bytes
  9232 ;; Hardware stack levels used:    1
  9233 ;; Hardware stack levels required when called:    9
  9234 ;; This function calls:
  9235 ;;		_enableInterrupts
  9236 ;;		_nrf24l01SPIEnd
  9237 ;;		_nrf24l01SPISend
  9238 ;;		_nrf24l01SPIStart
  9239 ;; This function is called by:
  9240 ;;		_nrf24l01ChangeTXPower
  9241 ;;		_nrf24l01SetRXMode
  9242 ;;		_nrf24l01SetRXPipe
  9243 ;;		_nrf24l01InitRegisters
  9244 ;; This function uses a non-reentrant model
  9245 ;;
  9246                           
  9247                           
  9248                           ;psect for function _nrf24l01Send
  9249  0890                     _nrf24l01Send:	
  9250                           
  9251                           ;incstack = 0
  9252                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  9253                           ;nrf24l01Send@command stored from wreg
  9254  0890  0020               	movlb	0	; select bank0
  9255  0891  00A3               	movwf	nrf24l01Send@command
  9256                           
  9257                           ;nrf24l01.c: 12: enableInterrupts(0);
  9258  0892  3000               	movlw	0
  9259  0893  3196  26D3  3188   	fcall	_enableInterrupts
  9260                           
  9261                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  9262  0896  3196  26DB  3188   	fcall	_nrf24l01SPIStart
  9263                           
  9264                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  9265  0899  0020               	movlb	0	; select bank0
  9266  089A  0823               	movf	nrf24l01Send@command,w
  9267  089B  3196  26EC  3188   	fcall	_nrf24l01SPISend
  9268                           
  9269                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  9270  089E  0020               	movlb	0	; select bank0
  9271  089F  0821               	movf	nrf24l01Send@data,w
  9272  08A0  3196  26EC  3188   	fcall	_nrf24l01SPISend
  9273  08A3  0020               	movlb	0	; select bank0
  9274  08A4  00A2               	movwf	??_nrf24l01Send
  9275  08A5  0822               	movf	??_nrf24l01Send,w
  9276  08A6  00A1               	movwf	nrf24l01Send@data
  9277                           
  9278                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  9279  08A7  3196  26CC  3188   	fcall	_nrf24l01SPIEnd
  9280                           
  9281                           ;nrf24l01.c: 27: enableInterrupts(1);
  9282  08AA  3001               	movlw	1
  9283  08AB  3196  26D3         	fcall	_enableInterrupts
  9284                           
  9285                           ;nrf24l01.c: 29: return data;
  9286  08AD  0020               	movlb	0	; select bank0
  9287  08AE  0821               	movf	nrf24l01Send@data,w
  9288  08AF  0008               	return
  9289  08B0                     __end_of_nrf24l01Send:	
  9290                           
  9291                           	psect	text38
  9292  0870                     __ptext38:	
  9293 ;; *************** function _flashRealod *****************
  9294 ;; Defined at:
  9295 ;;		line 90 in file "flash.c"
  9296 ;; Parameters:    Size  Location     Type
  9297 ;;		None
  9298 ;; Auto vars:     Size  Location     Type
  9299 ;;  i               2   11[BANK0 ] unsigned int 
  9300 ;; Return value:  Size  Location     Type
  9301 ;;                  1    wreg      void 
  9302 ;; Registers used:
  9303 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9304 ;; Tracked objects:
  9305 ;;		On entry : 0/0
  9306 ;;		On exit  : 0/0
  9307 ;;		Unchanged: 0/0
  9308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9310 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9311 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9312 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9313 ;;Total ram usage:        3 bytes
  9314 ;; Hardware stack levels used:    1
  9315 ;; Hardware stack levels required when called:    8
  9316 ;; This function calls:
  9317 ;;		_flashReadByte
  9318 ;; This function is called by:
  9319 ;;		_main
  9320 ;; This function uses a non-reentrant model
  9321 ;;
  9322                           
  9323                           
  9324                           ;psect for function _flashRealod
  9325  0870                     _flashRealod:	
  9326                           
  9327                           ;flash.c: 92: for (unsigned int i = 0; i < 32; i++){
  9328                           
  9329                           ;incstack = 0
  9330                           ; Regs used in _flashRealod: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9331  0870  0020               	movlb	0	; select bank0
  9332  0871  01AB               	clrf	flashRealod@i
  9333  0872  01AC               	clrf	flashRealod@i+1
  9334  0873                     L3:	
  9335  0873  3000               	movlw	0
  9336  0874  022C               	subwf	flashRealod@i+1,w
  9337  0875  3020               	movlw	32
  9338  0876  1903               	skipnz
  9339  0877  022B               	subwf	flashRealod@i,w
  9340  0878  1803               	btfsc	3,0
  9341  0879  0008               	return
  9342                           
  9343                           ;flash.c: 93: romHolder.array[i] = flashReadByte(i);
  9344  087A  082C               	movf	flashRealod@i+1,w
  9345  087B  00A2               	movwf	flashReadByte@offset+1
  9346  087C  082B               	movf	flashRealod@i,w
  9347  087D  00A1               	movwf	flashReadByte@offset
  9348  087E  318A  223A  3188   	fcall	_flashReadByte
  9349  0881  0020               	movlb	0	; select bank0
  9350  0882  0821               	movf	?_flashReadByte,w
  9351  0883  00AA               	movwf	??_flashRealod
  9352  0884  082B               	movf	flashRealod@i,w
  9353  0885  3E20               	addlw	(low (_romHolder| (0+512)))& (0+255)
  9354  0886  0086               	movwf	6
  9355  0887  3002               	movlw	2	; select bank4/5
  9356  0888  0087               	movwf	7
  9357  0889  082A               	movf	??_flashRealod,w
  9358  088A  0081               	movwf	1
  9359  088B  3001               	movlw	1
  9360  088C  07AB               	addwf	flashRealod@i,f
  9361  088D  3000               	movlw	0
  9362  088E  3DAC               	addwfc	flashRealod@i+1,f
  9363  088F  2873               	goto	L3
  9364  0890                     __end_of_flashRealod:	
  9365                           
  9366                           	psect	text39
  9367  0A3A                     __ptext39:	
  9368 ;; *************** function _flashReadByte *****************
  9369 ;; Defined at:
  9370 ;;		line 64 in file "flash.c"
  9371 ;; Parameters:    Size  Location     Type
  9372 ;;  offset          2    1[BANK0 ] unsigned int 
  9373 ;; Auto vars:     Size  Location     Type
  9374 ;;  address         2    8[BANK0 ] unsigned int 
  9375 ;;  result          2    6[BANK0 ] unsigned int 
  9376 ;; Return value:  Size  Location     Type
  9377 ;;                  2    1[BANK0 ] unsigned int 
  9378 ;; Registers used:
  9379 ;;		wreg, status,2, status,0
  9380 ;; Tracked objects:
  9381 ;;		On entry : 0/0
  9382 ;;		On exit  : 0/0
  9383 ;;		Unchanged: 0/0
  9384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9385 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9386 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9387 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9388 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9389 ;;Total ram usage:        9 bytes
  9390 ;; Hardware stack levels used:    1
  9391 ;; Hardware stack levels required when called:    7
  9392 ;; This function calls:
  9393 ;;		Nothing
  9394 ;; This function is called by:
  9395 ;;		_flashRealod
  9396 ;; This function uses a non-reentrant model
  9397 ;;
  9398                           
  9399                           
  9400                           ;psect for function _flashReadByte
  9401  0A3A                     _flashReadByte:	
  9402                           
  9403                           ;flash.c: 66: unsigned int address;;flash.c: 68: INTCONbits.GIE = 0;
  9404                           
  9405                           ;incstack = 0
  9406                           ; Regs used in _flashReadByte: [wreg+status,2+status,0]
  9407  0A3A  138B               	bcf	11,7	;volatile
  9408                           
  9409                           ;flash.c: 70: PMCON1 = 0x00;
  9410  0A3B  0031               	movlb	17	; select bank17
  9411  0A3C  0195               	clrf	21	;volsfr
  9412                           
  9413                           ;flash.c: 72: address = (0x2000U - 32) + offset;
  9414  0A3D  0020               	movlb	0	; select bank0
  9415  0A3E  0821               	movf	flashReadByte@offset,w
  9416  0A3F  3EE0               	addlw	224
  9417  0A40  00A8               	movwf	flashReadByte@address
  9418  0A41  301F               	movlw	31
  9419  0A42  3D22               	addwfc	flashReadByte@offset+1,w
  9420  0A43  00A9               	movwf	flashReadByte@address+1
  9421                           
  9422                           ;flash.c: 73: PMADRL = (char) (address >> 0);
  9423  0A44  0828               	movf	flashReadByte@address,w
  9424  0A45  0031               	movlb	17	; select bank17
  9425  0A46  0091               	movwf	17	;volatile
  9426                           
  9427                           ;flash.c: 74: PMADRH = (char) (address >> 8);
  9428  0A47  0020               	movlb	0	; select bank0
  9429  0A48  0829               	movf	flashReadByte@address+1,w
  9430  0A49  0031               	movlb	17	; select bank17
  9431  0A4A  0092               	movwf	18	;volatile
  9432                           
  9433                           ;flash.c: 76: PMCON1bits.RD = 1;
  9434  0A4B  1415               	bsf	21,0	;volsfr
  9435                           
  9436                           ;flash.c: 78: __nop();
  9437  0A4C  0000               	nop
  9438                           
  9439                           ;flash.c: 79: __nop();
  9440  0A4D  0000               	nop
  9441                           
  9442                           ;flash.c: 81: unsigned int result = 0;
  9443  0A4E  0020               	movlb	0	; select bank0
  9444  0A4F  01A6               	clrf	flashReadByte@result
  9445  0A50  01A7               	clrf	flashReadByte@result+1
  9446                           
  9447                           ;flash.c: 82: result = PMDATL;
  9448  0A51  0031               	movlb	17	; select bank17
  9449  0A52  0813               	movf	19,w	;volatile
  9450  0A53  0020               	movlb	0	; select bank0
  9451  0A54  00A3               	movwf	??_flashReadByte
  9452  0A55  01A4               	clrf	??_flashReadByte+1
  9453  0A56  0823               	movf	??_flashReadByte,w
  9454  0A57  00A6               	movwf	flashReadByte@result
  9455  0A58  0824               	movf	??_flashReadByte+1,w
  9456  0A59  00A7               	movwf	flashReadByte@result+1
  9457                           
  9458                           ;flash.c: 83: result|= ( (unsigned) (PMDATH) << 8);
  9459  0A5A  0031               	movlb	17	; select bank17
  9460  0A5B  0814               	movf	20,w	;volatile
  9461  0A5C  0020               	movlb	0	; select bank0
  9462  0A5D  00A3               	movwf	??_flashReadByte
  9463  0A5E  01A4               	clrf	??_flashReadByte+1
  9464  0A5F  0823               	movf	??_flashReadByte,w
  9465  0A60  00A4               	movwf	??_flashReadByte+1
  9466  0A61  01A3               	clrf	??_flashReadByte
  9467  0A62  0823               	movf	??_flashReadByte,w
  9468  0A63  04A6               	iorwf	flashReadByte@result,f
  9469  0A64  0824               	movf	??_flashReadByte+1,w
  9470  0A65  04A7               	iorwf	flashReadByte@result+1,f
  9471                           
  9472                           ;flash.c: 85: INTCONbits.GIE = 1;
  9473  0A66  178B               	bsf	11,7	;volatile
  9474                           
  9475                           ;flash.c: 87: return result;
  9476  0A67  0827               	movf	flashReadByte@result+1,w
  9477  0A68  00A2               	movwf	?_flashReadByte+1
  9478  0A69  0826               	movf	flashReadByte@result,w
  9479  0A6A  00A1               	movwf	?_flashReadByte
  9480  0A6B  0008               	return
  9481  0A6C                     __end_of_flashReadByte:	
  9482                           
  9483                           	psect	text40
  9484  0802                     __ptext40:	
  9485 ;; *************** function ___lwtoft *****************
  9486 ;; Defined at:
  9487 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
  9488 ;; Parameters:    Size  Location     Type
  9489 ;;  c               2    9[BANK0 ] unsigned int 
  9490 ;; Auto vars:     Size  Location     Type
  9491 ;;		None
  9492 ;; Return value:  Size  Location     Type
  9493 ;;                  3    9[BANK0 ] float 
  9494 ;; Registers used:
  9495 ;;		wreg, status,2, status,0, pclath, cstack
  9496 ;; Tracked objects:
  9497 ;;		On entry : 0/0
  9498 ;;		On exit  : 0/0
  9499 ;;		Unchanged: 0/0
  9500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9501 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9503 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9504 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9505 ;;Total ram usage:        4 bytes
  9506 ;; Hardware stack levels used:    1
  9507 ;; Hardware stack levels required when called:    8
  9508 ;; This function calls:
  9509 ;;		___ftpack
  9510 ;; This function is called by:
  9511 ;;		_main
  9512 ;; This function uses a non-reentrant model
  9513 ;;
  9514                           
  9515                           
  9516                           ;psect for function ___lwtoft
  9517  0802                     ___lwtoft:	
  9518                           
  9519                           ;incstack = 0
  9520                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  9521  0802  0020               	movlb	0	; select bank0
  9522  0803  0829               	movf	___lwtoft@c,w
  9523  0804  00A1               	movwf	___ftpack@arg
  9524  0805  082A               	movf	___lwtoft@c+1,w
  9525  0806  00A2               	movwf	___ftpack@arg+1
  9526  0807  01A3               	clrf	___ftpack@arg+2
  9527  0808  308E               	movlw	142
  9528  0809  00AC               	movwf	??___lwtoft
  9529  080A  082C               	movf	??___lwtoft,w
  9530  080B  00A4               	movwf	___ftpack@exp
  9531  080C  01A5               	clrf	___ftpack@sign
  9532  080D  318D  2507         	fcall	___ftpack
  9533  080F  0020               	movlb	0	; select bank0
  9534  0810  0821               	movf	?___ftpack,w
  9535  0811  00A9               	movwf	?___lwtoft
  9536  0812  0822               	movf	?___ftpack+1,w
  9537  0813  00AA               	movwf	?___lwtoft+1
  9538  0814  0823               	movf	?___ftpack+2,w
  9539  0815  00AB               	movwf	?___lwtoft+2
  9540  0816  0008               	return
  9541  0817                     __end_of___lwtoft:	
  9542                           
  9543                           	psect	text41
  9544  0D07                     __ptext41:	
  9545 ;; *************** function ___ftpack *****************
  9546 ;; Defined at:
  9547 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  9548 ;; Parameters:    Size  Location     Type
  9549 ;;  arg             3    1[BANK0 ] unsigned um
  9550 ;;  exp             1    4[BANK0 ] unsigned char 
  9551 ;;  sign            1    5[BANK0 ] unsigned char 
  9552 ;; Auto vars:     Size  Location     Type
  9553 ;;		None
  9554 ;; Return value:  Size  Location     Type
  9555 ;;                  3    1[BANK0 ] float 
  9556 ;; Registers used:
  9557 ;;		wreg, status,2, status,0
  9558 ;; Tracked objects:
  9559 ;;		On entry : 0/0
  9560 ;;		On exit  : 0/0
  9561 ;;		Unchanged: 0/0
  9562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9563 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9565 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9566 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9567 ;;Total ram usage:        8 bytes
  9568 ;; Hardware stack levels used:    1
  9569 ;; Hardware stack levels required when called:    7
  9570 ;; This function calls:
  9571 ;;		Nothing
  9572 ;; This function is called by:
  9573 ;;		___awtoft
  9574 ;;		___ftadd
  9575 ;;		___ftdiv
  9576 ;;		___ftmul
  9577 ;;		___lltoft
  9578 ;;		___lwtoft
  9579 ;; This function uses a non-reentrant model
  9580 ;;
  9581                           
  9582                           
  9583                           ;psect for function ___ftpack
  9584  0D07                     ___ftpack:	
  9585                           
  9586                           ;incstack = 0
  9587                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9588  0D07  0020               	movlb	0	; select bank0
  9589  0D08  0824               	movf	___ftpack@exp,w
  9590  0D09  1903               	btfsc	3,2
  9591  0D0A  2D10               	goto	l2379
  9592  0D0B  0823               	movf	___ftpack@arg+2,w
  9593  0D0C  0422               	iorwf	___ftpack@arg+1,w
  9594  0D0D  0421               	iorwf	___ftpack@arg,w
  9595  0D0E  1D03               	skipz
  9596  0D0F  2D21               	goto	l2385
  9597  0D10                     l2379:	
  9598  0D10  3000               	movlw	0
  9599  0D11  00A1               	movwf	?___ftpack
  9600  0D12  3000               	movlw	0
  9601  0D13  00A2               	movwf	?___ftpack+1
  9602  0D14  3000               	movlw	0
  9603  0D15  00A3               	movwf	?___ftpack+2
  9604  0D16  0008               	return
  9605  0D17                     l2383:	
  9606  0D17  3001               	movlw	1
  9607  0D18  00A6               	movwf	??___ftpack
  9608  0D19  0826               	movf	??___ftpack,w
  9609  0D1A  07A4               	addwf	___ftpack@exp,f
  9610  0D1B  3001               	movlw	1
  9611  0D1C                     u1785:	
  9612  0D1C  36A3               	lsrf	___ftpack@arg+2,f
  9613  0D1D  0CA2               	rrf	___ftpack@arg+1,f
  9614  0D1E  0CA1               	rrf	___ftpack@arg,f
  9615  0D1F  0B89               	decfsz	9,f
  9616  0D20  2D1C               	goto	u1785
  9617  0D21                     l2385:	
  9618  0D21  30FE               	movlw	254
  9619  0D22  0523               	andwf	___ftpack@arg+2,w
  9620  0D23  1903               	btfsc	3,2
  9621  0D24  2D3A               	goto	l720
  9622  0D25  2D17               	goto	l2383
  9623  0D26                     l2387:	
  9624  0D26  3001               	movlw	1
  9625  0D27  00A6               	movwf	??___ftpack
  9626  0D28  0826               	movf	??___ftpack,w
  9627  0D29  07A4               	addwf	___ftpack@exp,f
  9628  0D2A  3001               	movlw	1
  9629  0D2B  07A1               	addwf	___ftpack@arg,f
  9630  0D2C  3000               	movlw	0
  9631  0D2D  1803               	skipnc
  9632  0D2E  3001               	movlw	1
  9633  0D2F  07A2               	addwf	___ftpack@arg+1,f
  9634  0D30  3000               	movlw	0
  9635  0D31  1803               	skipnc
  9636  0D32  3001               	movlw	1
  9637  0D33  07A3               	addwf	___ftpack@arg+2,f
  9638  0D34  3001               	movlw	1
  9639  0D35                     u1805:	
  9640  0D35  36A3               	lsrf	___ftpack@arg+2,f
  9641  0D36  0CA2               	rrf	___ftpack@arg+1,f
  9642  0D37  0CA1               	rrf	___ftpack@arg,f
  9643  0D38  0B89               	decfsz	9,f
  9644  0D39  2D35               	goto	u1805
  9645  0D3A                     l720:	
  9646  0D3A  30FF               	movlw	255
  9647  0D3B  0523               	andwf	___ftpack@arg+2,w
  9648  0D3C  1903               	btfsc	3,2
  9649  0D3D  2D47               	goto	l2395
  9650  0D3E  2D26               	goto	l2387
  9651  0D3F                     l2393:	
  9652  0D3F  3001               	movlw	1
  9653  0D40  02A4               	subwf	___ftpack@exp,f
  9654  0D41  3001               	movlw	1
  9655  0D42                     u1825:	
  9656  0D42  35A1               	lslf	___ftpack@arg,f
  9657  0D43  0DA2               	rlf	___ftpack@arg+1,f
  9658  0D44  0DA3               	rlf	___ftpack@arg+2,f
  9659  0D45  0B89               	decfsz	9,f
  9660  0D46  2D42               	goto	u1825
  9661  0D47                     l2395:	
  9662  0D47  1BA2               	btfsc	___ftpack@arg+1,7
  9663  0D48  2D4D               	goto	l727
  9664  0D49  3002               	movlw	2
  9665  0D4A  0224               	subwf	___ftpack@exp,w
  9666  0D4B  1803               	skipnc
  9667  0D4C  2D3F               	goto	l2393
  9668  0D4D                     l727:	
  9669  0D4D  1824               	btfsc	___ftpack@exp,0
  9670  0D4E  2D55               	goto	l728
  9671  0D4F  30FF               	movlw	255
  9672  0D50  05A1               	andwf	___ftpack@arg,f
  9673  0D51  307F               	movlw	127
  9674  0D52  05A2               	andwf	___ftpack@arg+1,f
  9675  0D53  30FF               	movlw	255
  9676  0D54  05A3               	andwf	___ftpack@arg+2,f
  9677  0D55                     l728:	
  9678  0D55  1003               	clrc
  9679  0D56  0CA4               	rrf	___ftpack@exp,f
  9680  0D57  0824               	movf	___ftpack@exp,w
  9681  0D58  00A6               	movwf	??___ftpack
  9682  0D59  01A7               	clrf	??___ftpack+1
  9683  0D5A  01A8               	clrf	??___ftpack+2
  9684  0D5B  3010               	movlw	16
  9685  0D5C                     u1865:	
  9686  0D5C  35A6               	lslf	??___ftpack,f
  9687  0D5D  0DA7               	rlf	??___ftpack+1,f
  9688  0D5E  0DA8               	rlf	??___ftpack+2,f
  9689  0D5F  0B89               	decfsz	9,f
  9690  0D60  2D5C               	goto	u1865
  9691  0D61  0826               	movf	??___ftpack,w
  9692  0D62  04A1               	iorwf	___ftpack@arg,f
  9693  0D63  0827               	movf	??___ftpack+1,w
  9694  0D64  04A2               	iorwf	___ftpack@arg+1,f
  9695  0D65  0828               	movf	??___ftpack+2,w
  9696  0D66  04A3               	iorwf	___ftpack@arg+2,f
  9697  0D67  0825               	movf	___ftpack@sign,w
  9698  0D68  1903               	btfsc	3,2
  9699  0D69  0008               	return
  9700  0D6A  17A3               	bsf	___ftpack@arg+2,7
  9701  0D6B  0008               	return
  9702  0D6C                     __end_of___ftpack:	
  9703                           
  9704                           	psect	intentry
  9705  0004                     __pintentry:	
  9706 ;; *************** function _ISR *****************
  9707 ;; Defined at:
  9708 ;;		line 15 in file "main.c"
  9709 ;; Parameters:    Size  Location     Type
  9710 ;;		None
  9711 ;; Auto vars:     Size  Location     Type
  9712 ;;		None
  9713 ;; Return value:  Size  Location     Type
  9714 ;;                  1    wreg      void 
  9715 ;; Registers used:
  9716 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9717 ;; Tracked objects:
  9718 ;;		On entry : 0/0
  9719 ;;		On exit  : 0/0
  9720 ;;		Unchanged: 0/0
  9721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9726 ;;Total ram usage:        0 bytes
  9727 ;; Hardware stack levels used:    1
  9728 ;; Hardware stack levels required when called:    6
  9729 ;; This function calls:
  9730 ;;		_nrf24l01ISR
  9731 ;; This function is called by:
  9732 ;;		Interrupt level 1
  9733 ;; This function uses a non-reentrant model
  9734 ;;
  9735                           
  9736  0004                     _ISR:	
  9737                           
  9738                           ;incstack = 0
  9739  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9740                           
  9741                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9742  0005  3180               	pagesel	$
  9743                           
  9744                           ;main.c: 17: if (PIR0bits.INTF){
  9745  0006  0020               	movlb	0	; select bank0
  9746  0007  1C10               	btfss	16,0	;volatile
  9747  0008  280D               	goto	i1l213
  9748                           
  9749                           ;main.c: 18: nrf24l01ISR();
  9750  0009  318C  2465         	fcall	_nrf24l01ISR
  9751                           
  9752                           ;main.c: 19: PIR0bits.INTF = 0;
  9753  000B  0020               	movlb	0	; select bank0
  9754  000C  1010               	bcf	16,0	;volatile
  9755  000D                     i1l213:	
  9756  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9757  000E  0009               	retfie
  9758  000F                     __end_of_ISR:	
  9759                           
  9760                           	psect	text43
  9761  0C65                     __ptext43:	
  9762 ;; *************** function _nrf24l01ISR *****************
  9763 ;; Defined at:
  9764 ;;		line 246 in file "nrf24l01.c"
  9765 ;; Parameters:    Size  Location     Type
  9766 ;;		None
  9767 ;; Auto vars:     Size  Location     Type
  9768 ;;  status          1    0[BANK0 ] struct .
  9769 ;; Return value:  Size  Location     Type
  9770 ;;                  1    wreg      void 
  9771 ;; Registers used:
  9772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9773 ;; Tracked objects:
  9774 ;;		On entry : 0/0
  9775 ;;		On exit  : 0/0
  9776 ;;		Unchanged: 0/0
  9777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9779 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9780 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9781 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9782 ;;Total ram usage:        2 bytes
  9783 ;; Hardware stack levels used:    1
  9784 ;; Hardware stack levels required when called:    5
  9785 ;; This function calls:
  9786 ;;		_exception
  9787 ;;		_nrf24l01CheckACK
  9788 ;;		_nrf24l01ReceivePacket
  9789 ;;		i1_nrf24l01Send
  9790 ;;		i1_nrf24l01SetRXMode
  9791 ;; This function is called by:
  9792 ;;		_ISR
  9793 ;; This function uses a non-reentrant model
  9794 ;;
  9795                           
  9796                           
  9797                           ;psect for function _nrf24l01ISR
  9798  0C65                     _nrf24l01ISR:	
  9799                           
  9800                           ;nrf24l01.c: 248: n_STATUS_t status;;nrf24l01.c: 249: status.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x07, 0);
  9801                           
  9802                           ;incstack = 0
  9803                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9804  0C65  01F1               	clrf	i1nrf24l01Send@data
  9805  0C66  3007               	movlw	7
  9806  0C67  3197  2792  318C   	fcall	i1_nrf24l01Send
  9807  0C6A  00FD               	movwf	??_nrf24l01ISR
  9808  0C6B  087D               	movf	??_nrf24l01ISR,w
  9809  0C6C  0020               	movlb	0	; select bank0
  9810  0C6D  00A0               	movwf	nrf24l01ISR@status
  9811                           
  9812                           ;nrf24l01.c: 254: };nrf24l01.c: 257: if (status.byte == 0xFF){
  9813  0C6E  0A20               	incf	nrf24l01ISR@status,w
  9814  0C6F  1D03               	btfss	3,2
  9815  0C70  2C75               	goto	i1l3501
  9816                           
  9817                           ;nrf24l01.c: 258: exception(2);
  9818  0C71  3002               	movlw	2
  9819  0C72  3197  272E  318C   	fcall	_exception
  9820  0C75                     i1l3501:	
  9821                           
  9822                           ;nrf24l01.c: 259: };nrf24l01.c: 261: if (status.TX_DS){
  9823  0C75  0020               	movlb	0	; select bank0
  9824  0C76  1EA0               	btfss	nrf24l01ISR@status,5
  9825  0C77  2C86               	goto	i1l3509
  9826                           
  9827                           ;nrf24l01.c: 264: nrf24l01.TXBusy = 0;
  9828  0C78  106E               	bcf	_nrf24l01,0	;volatile
  9829                           
  9830                           ;nrf24l01.c: 267: if (!nrf24l01.RXMode){
  9831  0C79  196E               	btfsc	_nrf24l01,2	;volatile
  9832  0C7A  2C86               	goto	i1l3509
  9833                           
  9834                           ;nrf24l01.c: 268: if (TXPacket->packetData.ACKRequest){
  9835  0C7B  0021               	movlb	1	; select bank1
  9836  0C7C  086D               	movf	_TXPacket^(0+128),w
  9837  0C7D  0086               	movwf	6
  9838  0C7E  086E               	movf	(_TXPacket+1)^(0+128),w
  9839  0C7F  0087               	movwf	7
  9840  0C80  1D01               	btfss	1,2
  9841  0C81  2C86               	goto	i1l3509
  9842                           
  9843                           ;nrf24l01.c: 271: nrf24l01SetRXMode(1);
  9844  0C82  3001               	movlw	1
  9845  0C83  318A  226C  318C   	fcall	i1_nrf24l01SetRXMode
  9846  0C86                     i1l3509:	
  9847                           
  9848                           ;nrf24l01.c: 272: };nrf24l01.c: 273: };nrf24l01.c: 274: };nrf24l01.c: 277: if (status.RX
      +                          _DR){
  9849  0C86  0020               	movlb	0	; select bank0
  9850  0C87  1F20               	btfss	nrf24l01ISR@status,6
  9851  0C88  2CAB               	goto	i1l3523
  9852                           
  9853                           ;nrf24l01.c: 280: if (!nrf24l01.RXPending){
  9854  0C89  18EE               	btfsc	_nrf24l01,1	;volatile
  9855  0C8A  2CAA               	goto	i1l362
  9856                           
  9857                           ;nrf24l01.c: 283: nrf24l01.RXPending = 1;
  9858  0C8B  14EE               	bsf	_nrf24l01,1	;volatile
  9859                           
  9860                           ;nrf24l01.c: 285: nrf24l01ReceivePacket();
  9861  0C8C  318C  2418  318C   	fcall	_nrf24l01ReceivePacket
  9862                           
  9863                           ;nrf24l01.c: 288: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  9864  0C8F  01F1               	clrf	i1nrf24l01Send@data
  9865  0C90  3009               	movlw	9
  9866  0C91  3197  2792  318C   	fcall	i1_nrf24l01Send
  9867  0C94  00FD               	movwf	??_nrf24l01ISR
  9868  0C95  0023               	movlb	3	; select bank3
  9869  0C96  0820               	movf	_RXPacket^(0+384),w
  9870  0C97  067D               	xorwf	??_nrf24l01ISR,w
  9871  0C98  39FE               	andlw	-2
  9872  0C99  067D               	xorwf	??_nrf24l01ISR,w
  9873  0C9A  00A0               	movwf	_RXPacket^(0+384)
  9874                           
  9875                           ;nrf24l01.c: 291: RXPacket.packetData.Pipe = status.RX_P_NO;
  9876  0C9B  0020               	movlb	0	; select bank0
  9877  0C9C  0C20               	rrf	nrf24l01ISR@status,w
  9878  0C9D  3907               	andlw	7
  9879  0C9E  00FD               	movwf	??_nrf24l01ISR
  9880  0C9F  0EFD               	swapf	??_nrf24l01ISR,f
  9881  0CA0  0023               	movlb	3	; select bank3
  9882  0CA1  0820               	movf	_RXPacket^(0+384),w
  9883  0CA2  067D               	xorwf	??_nrf24l01ISR,w
  9884  0CA3  398F               	andlw	-113
  9885  0CA4  067D               	xorwf	??_nrf24l01ISR,w
  9886  0CA5  00A0               	movwf	_RXPacket^(0+384)
  9887                           
  9888                           ;nrf24l01.c: 293: nrf24l01CheckACK();
  9889  0CA6  3189  21B2  318C   	fcall	_nrf24l01CheckACK
  9890                           
  9891                           ;nrf24l01.c: 294: }
  9892  0CA9  2CAB               	goto	i1l3523
  9893  0CAA                     i1l362:	
  9894                           
  9895                           ;nrf24l01.c: 297: else{;nrf24l01.c: 300: status.RX_DR = 0;
  9896  0CAA  1320               	bcf	nrf24l01ISR@status,6
  9897  0CAB                     i1l3523:	
  9898                           
  9899                           ;nrf24l01.c: 301: };nrf24l01.c: 303: };nrf24l01.c: 306: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.byte);
  9900  0CAB  0020               	movlb	0	; select bank0
  9901  0CAC  0820               	movf	nrf24l01ISR@status,w
  9902  0CAD  00FD               	movwf	??_nrf24l01ISR
  9903  0CAE  087D               	movf	??_nrf24l01ISR,w
  9904  0CAF  00F1               	movwf	i1nrf24l01Send@data
  9905  0CB0  3027               	movlw	39
  9906  0CB1  3197  2792         	fcall	i1_nrf24l01Send
  9907  0CB3  0008               	return
  9908  0CB4                     __end_of_nrf24l01ISR:	
  9909                           
  9910                           	psect	text44
  9911  0C18                     __ptext44:	
  9912 ;; *************** function _nrf24l01ReceivePacket *****************
  9913 ;; Defined at:
  9914 ;;		line 135 in file "nrf24l01.c"
  9915 ;; Parameters:    Size  Location     Type
  9916 ;;		None
  9917 ;; Auto vars:     Size  Location     Type
  9918 ;;  i               1   10[COMMON] unsigned char 
  9919 ;;  width           1    9[COMMON] unsigned char 
  9920 ;; Return value:  Size  Location     Type
  9921 ;;                  1    wreg      void 
  9922 ;; Registers used:
  9923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9924 ;; Tracked objects:
  9925 ;;		On entry : 0/0
  9926 ;;		On exit  : 0/0
  9927 ;;		Unchanged: 0/0
  9928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9930 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9931 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9932 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9933 ;;Total ram usage:        3 bytes
  9934 ;; Hardware stack levels used:    1
  9935 ;; Hardware stack levels required when called:    3
  9936 ;; This function calls:
  9937 ;;		_nrf24l01CEHigh
  9938 ;;		_nrf24l01CELow
  9939 ;;		_nrf24l01SPIEnd
  9940 ;;		_nrf24l01SPISend
  9941 ;;		_nrf24l01SPIStart
  9942 ;;		i1_memset
  9943 ;;		i1_nrf24l01Send
  9944 ;; This function is called by:
  9945 ;;		_nrf24l01ISR
  9946 ;; This function uses a non-reentrant model
  9947 ;;
  9948                           
  9949                           
  9950                           ;psect for function _nrf24l01ReceivePacket
  9951  0C18                     _nrf24l01ReceivePacket:	
  9952                           
  9953                           ;nrf24l01.c: 138: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  9954                           
  9955                           ;incstack = 0
  9956                           ; Regs used in _nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9957  0C18  30A1               	movlw	low (_RXPacket+1)
  9958  0C19  00F0               	movwf	i1memset@p1
  9959  0C1A  3001               	movlw	high (_RXPacket+1)
  9960  0C1B  00F1               	movwf	i1memset@p1+1
  9961  0C1C  3000               	movlw	0
  9962  0C1D  00F2               	movwf	i1memset@c
  9963  0C1E  00F3               	movwf	i1memset@c+1
  9964  0C1F  3020               	movlw	32
  9965  0C20  00F4               	movwf	i1memset@n
  9966  0C21  3000               	movlw	0
  9967  0C22  00F5               	movwf	i1memset@n+1
  9968  0C23  3197  2746  318C   	fcall	i1_memset
  9969                           
  9970                           ;nrf24l01.c: 139: RXPacket.packetData.byte = 0x00;
  9971  0C26  0023               	movlb	3	; select bank3
  9972  0C27  01A0               	clrf	_RXPacket^(0+384)
  9973                           
  9974                           ;nrf24l01.c: 142: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  9975  0C28  01F1               	clrf	i1nrf24l01Send@data
  9976  0C29  3060               	movlw	96
  9977  0C2A  3197  2792  318C   	fcall	i1_nrf24l01Send
  9978  0C2D  00F8               	movwf	??_nrf24l01ReceivePacket
  9979  0C2E  0878               	movf	??_nrf24l01ReceivePacket,w
  9980  0C2F  00F9               	movwf	nrf24l01ReceivePacket@width
  9981                           
  9982                           ;nrf24l01.c: 143: unsigned char i = 0;
  9983  0C30  01FA               	clrf	nrf24l01ReceivePacket@i
  9984                           
  9985                           ;nrf24l01.c: 146: nrf24l01CELow();
  9986  0C31  3196  26BD  318C   	fcall	_nrf24l01CELow
  9987                           
  9988                           ;nrf24l01.c: 149: nrf24l01SPIStart();
  9989  0C34  3196  26DB  318C   	fcall	_nrf24l01SPIStart
  9990                           
  9991                           ;nrf24l01.c: 152: nrf24l01SPISend((unsigned) 0b01100001);
  9992  0C37  3061               	movlw	97
  9993  0C38  3196  26EC  318C   	fcall	_nrf24l01SPISend
  9994                           
  9995                           ;nrf24l01.c: 155: RXPacket.packetData.byte = nrf24l01SPISend(0);
  9996  0C3B  3000               	movlw	0
  9997  0C3C  3196  26EC  318C   	fcall	_nrf24l01SPISend
  9998  0C3F  00F8               	movwf	??_nrf24l01ReceivePacket
  9999  0C40  0878               	movf	??_nrf24l01ReceivePacket,w
 10000  0C41  0023               	movlb	3	; select bank3
 10001  0C42  00A0               	movwf	_RXPacket^(0+384)
 10002                           
 10003                           ;nrf24l01.c: 156: width--;
 10004  0C43  3001               	movlw	1
 10005  0C44  02F9               	subwf	nrf24l01ReceivePacket@width,f
 10006                           
 10007                           ;nrf24l01.c: 158: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
 10008  0C45  01FA               	clrf	nrf24l01ReceivePacket@i
 10009  0C46  2C57               	goto	i1l3339
 10010  0C47                     i1l3335:	
 10011                           
 10012                           ;nrf24l01.c: 160: RXPacket.Message[i] = nrf24l01SPISend(0);
 10013  0C47  3000               	movlw	0
 10014  0C48  3196  26EC  318C   	fcall	_nrf24l01SPISend
 10015  0C4B  00F8               	movwf	??_nrf24l01ReceivePacket
 10016  0C4C  087A               	movf	nrf24l01ReceivePacket@i,w
 10017  0C4D  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 10018  0C4E  0086               	movwf	6
 10019  0C4F  3001               	movlw	1	; select bank3/4
 10020  0C50  0087               	movwf	7
 10021  0C51  0878               	movf	??_nrf24l01ReceivePacket,w
 10022  0C52  0081               	movwf	1
 10023  0C53  3001               	movlw	1
 10024  0C54  00F8               	movwf	??_nrf24l01ReceivePacket
 10025  0C55  0878               	movf	??_nrf24l01ReceivePacket,w
 10026  0C56  07FA               	addwf	nrf24l01ReceivePacket@i,f
 10027  0C57                     i1l3339:	
 10028  0C57  0879               	movf	nrf24l01ReceivePacket@width,w
 10029  0C58  027A               	subwf	nrf24l01ReceivePacket@i,w
 10030  0C59  1803               	skipnc
 10031  0C5A  2C5F               	goto	i1l3343
 10032  0C5B  3020               	movlw	32
 10033  0C5C  027A               	subwf	nrf24l01ReceivePacket@i,w
 10034  0C5D  1C03               	skipc
 10035  0C5E  2C47               	goto	i1l3335
 10036  0C5F                     i1l3343:	
 10037                           
 10038                           ;nrf24l01.c: 161: };nrf24l01.c: 164: nrf24l01SPIEnd();
 10039  0C5F  3196  26CC  318C   	fcall	_nrf24l01SPIEnd
 10040                           
 10041                           ;nrf24l01.c: 167: nrf24l01CEHigh();
 10042  0C62  3196  26BA         	fcall	_nrf24l01CEHigh
 10043  0C64  0008               	return
 10044  0C65                     __end_of_nrf24l01ReceivePacket:	
 10045                           
 10046                           	psect	text45
 10047  1746                     __ptext45:	
 10048 ;; *************** function i1_memset *****************
 10049 ;; Defined at:
 10050 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
 10051 ;; Parameters:    Size  Location     Type
 10052 ;;  p1              2    0[COMMON] PTR void 
 10053 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 10054 ;;  c               2    2[COMMON] int 
 10055 ;;  n               2    4[COMMON] unsigned int 
 10056 ;; Auto vars:     Size  Location     Type
 10057 ;;  memset          2    6[COMMON] PTR unsigned char 
 10058 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 10059 ;; Return value:  Size  Location     Type
 10060 ;;                  1    wreg      PTR void 
 10061 ;; Registers used:
 10062 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10063 ;; Tracked objects:
 10064 ;;		On entry : 0/0
 10065 ;;		On exit  : 0/0
 10066 ;;		Unchanged: 0/0
 10067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10068 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10069 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10071 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10072 ;;Total ram usage:        8 bytes
 10073 ;; Hardware stack levels used:    1
 10074 ;; This function calls:
 10075 ;;		Nothing
 10076 ;; This function is called by:
 10077 ;;		_nrf24l01ReceivePacket
 10078 ;; This function uses a non-reentrant model
 10079 ;;
 10080                           
 10081                           
 10082                           ;psect for function i1_memset
 10083  1746                     i1_memset:	
 10084                           
 10085                           ;incstack = 0
 10086                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 10087  1746  0871               	movf	i1memset@p1+1,w
 10088  1747  00F7               	movwf	i1memset@p+1
 10089  1748  0870               	movf	i1memset@p1,w
 10090  1749  00F6               	movwf	i1memset@p
 10091  174A                     i1l3155:	
 10092  174A  3001               	movlw	1
 10093  174B  02F4               	subwf	i1memset@n,f
 10094  174C  3000               	movlw	0
 10095  174D  3BF5               	subwfb	i1memset@n+1,f
 10096  174E  0A74               	incf	i1memset@n,w
 10097  174F  1903               	btfsc	3,2
 10098  1750  0A75               	incf	i1memset@n+1,w
 10099  1751  1903               	btfsc	3,2
 10100  1752  0008               	return
 10101  1753  0876               	movf	i1memset@p,w
 10102  1754  0086               	movwf	6
 10103  1755  0877               	movf	i1memset@p+1,w
 10104  1756  0087               	movwf	7
 10105  1757  0872               	movf	i1memset@c,w
 10106  1758  0081               	movwf	1
 10107  1759  3001               	movlw	1
 10108  175A  07F6               	addwf	i1memset@p,f
 10109  175B  3000               	movlw	0
 10110  175C  3DF7               	addwfc	i1memset@p+1,f
 10111  175D  2F4A               	goto	i1l3155
 10112  175E                     __end_ofi1_memset:	
 10113                           ;	Return value of i1_memset is never used
 10114                           
 10115                           
 10116                           	psect	text46
 10117  09B2                     __ptext46:	
 10118 ;; *************** function _nrf24l01CheckACK *****************
 10119 ;; Defined at:
 10120 ;;		line 98 in file "nrf24l01.c"
 10121 ;; Parameters:    Size  Location     Type
 10122 ;;		None
 10123 ;; Auto vars:     Size  Location     Type
 10124 ;;		None
 10125 ;; Return value:  Size  Location     Type
 10126 ;;                  1    wreg      void 
 10127 ;; Registers used:
 10128 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10129 ;; Tracked objects:
 10130 ;;		On entry : 0/0
 10131 ;;		On exit  : 0/0
 10132 ;;		Unchanged: 0/0
 10133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10136 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10137 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10138 ;;Total ram usage:        3 bytes
 10139 ;; Hardware stack levels used:    1
 10140 ;; Hardware stack levels required when called:    4
 10141 ;; This function calls:
 10142 ;;		_strcmp
 10143 ;;		i1_nrf24l01SetRXMode
 10144 ;; This function is called by:
 10145 ;;		_nrf24l01ISR
 10146 ;; This function uses a non-reentrant model
 10147 ;;
 10148                           
 10149                           
 10150                           ;psect for function _nrf24l01CheckACK
 10151  09B2                     _nrf24l01CheckACK:	
 10152                           
 10153                           ;nrf24l01.c: 102: if (!RXPacket.packetData.IsACK){
 10154                           
 10155                           ;incstack = 0
 10156                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10157  09B2  0023               	movlb	3	; select bank3
 10158  09B3  1DA0               	btfss	_RXPacket^(0+384),3
 10159  09B4  0008               	return
 10160                           
 10161                           ;nrf24l01.c: 104: };nrf24l01.c: 107: nrf24l01.RXPending = 0;
 10162                           
 10163                           ;nrf24l01.c: 103: return;
 10164  09B5  0020               	movlb	0	; select bank0
 10165  09B6  10EE               	bcf	_nrf24l01,1	;volatile
 10166                           
 10167                           ;nrf24l01.c: 110: if (!TXPacket->packetData.ACKRequest){
 10168  09B7  0021               	movlb	1	; select bank1
 10169  09B8  086D               	movf	_TXPacket^(0+128),w
 10170  09B9  0086               	movwf	6
 10171  09BA  086E               	movf	(_TXPacket+1)^(0+128),w
 10172  09BB  0087               	movwf	7
 10173  09BC  1D01               	btfss	1,2
 10174  09BD  0008               	return
 10175                           
 10176                           ;nrf24l01.c: 112: };nrf24l01.c: 115: if (strcmp(TXPacket->Message, RXPacket.Message) != 
      +                          0){
 10177                           
 10178                           ;nrf24l01.c: 111: return;
 10179  09BE  086D               	movf	_TXPacket^(0+128),w
 10180  09BF  3E01               	addlw	1
 10181  09C0  00F7               	movwf	??_nrf24l01CheckACK
 10182  09C1  3000               	movlw	0
 10183  09C2  3D6E               	addwfc	(_TXPacket+1)^(0+128),w
 10184  09C3  00F8               	movwf	??_nrf24l01CheckACK+1
 10185  09C4  0877               	movf	??_nrf24l01CheckACK,w
 10186  09C5  00F0               	movwf	strcmp@s1
 10187  09C6  0878               	movf	??_nrf24l01CheckACK+1,w
 10188  09C7  00F1               	movwf	strcmp@s1+1
 10189  09C8  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 10190  09C9  00F9               	movwf	??_nrf24l01CheckACK+2
 10191  09CA  0879               	movf	??_nrf24l01CheckACK+2,w
 10192  09CB  00F2               	movwf	strcmp@s2
 10193  09CC  3189  213A  3189   	fcall	_strcmp
 10194  09CF  0870               	movf	?_strcmp,w
 10195  09D0  0471               	iorwf	?_strcmp+1,w
 10196  09D1  1D03               	btfss	3,2
 10197  09D2  0008               	return
 10198                           
 10199                           ;nrf24l01.c: 117: };nrf24l01.c: 124: TXPacket->packetData.ACKRequest = 0;
 10200                           
 10201                           ;nrf24l01.c: 116: return;
 10202  09D3  0021               	movlb	1	; select bank1
 10203  09D4  086D               	movf	_TXPacket^(0+128),w
 10204  09D5  0086               	movwf	6
 10205  09D6  086E               	movf	(_TXPacket+1)^(0+128),w
 10206  09D7  0087               	movwf	7
 10207  09D8  1101               	bcf	1,2
 10208                           
 10209                           ;nrf24l01.c: 127: nrf24l01SetRXMode(0);
 10210  09D9  3000               	movlw	0
 10211  09DA  318A  226C         	fcall	i1_nrf24l01SetRXMode
 10212  09DC  0008               	return
 10213  09DD                     __end_of_nrf24l01CheckACK:	
 10214                           
 10215                           	psect	text47
 10216  0A6C                     __ptext47:	
 10217 ;; *************** function i1_nrf24l01SetRXMode *****************
 10218 ;; Defined at:
 10219 ;;		line 54 in file "nrf24l01.c"
 10220 ;; Parameters:    Size  Location     Type
 10221 ;;  rxMode          1    wreg     unsigned char 
 10222 ;; Auto vars:     Size  Location     Type
 10223 ;;  rxMode          1    6[COMMON] unsigned char 
 10224 ;;  nrf24l01SetR    1    5[COMMON] struct .
 10225 ;; Return value:  Size  Location     Type
 10226 ;;                  1    wreg      void 
 10227 ;; Registers used:
 10228 ;;		wreg, status,2, status,0, pclath, cstack
 10229 ;; Tracked objects:
 10230 ;;		On entry : 0/0
 10231 ;;		On exit  : 0/0
 10232 ;;		Unchanged: 0/0
 10233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10235 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10236 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10237 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10238 ;;Total ram usage:        3 bytes
 10239 ;; Hardware stack levels used:    1
 10240 ;; Hardware stack levels required when called:    3
 10241 ;; This function calls:
 10242 ;;		_nrf24l01CEHigh
 10243 ;;		_nrf24l01CELow
 10244 ;;		i1_nrf24l01Send
 10245 ;; This function is called by:
 10246 ;;		_nrf24l01CheckACK
 10247 ;;		_nrf24l01ISR
 10248 ;; This function uses a non-reentrant model
 10249 ;;
 10250                           
 10251                           
 10252                           ;psect for function i1_nrf24l01SetRXMode
 10253  0A6C                     i1_nrf24l01SetRXMode:	
 10254                           
 10255                           ;incstack = 0
 10256                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
 10257                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
 10258  0A6C  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
 10259                           
 10260                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
 10261  0A6D  01F1               	clrf	i1nrf24l01Send@data
 10262  0A6E  3000               	movlw	0
 10263  0A6F  3197  2792  318A   	fcall	i1_nrf24l01Send
 10264  0A72  00F4               	movwf	??i1_nrf24l01SetRXMode
 10265  0A73  0874               	movf	??i1_nrf24l01SetRXMode,w
 10266  0A74  00F5               	movwf	i1nrf24l01SetRXMode@config
 10267                           
 10268                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
 10269  0A75  0875               	movf	i1nrf24l01SetRXMode@config,w
 10270  0A76  3901               	andlw	1
 10271  0A77  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
 10272  0A78  1903               	skipnz
 10273  0A79  2A9C               	goto	i1l3133
 10274                           
 10275                           ;nrf24l01.c: 65: nrf24l01CELow();
 10276  0A7A  3196  26BD  318A   	fcall	_nrf24l01CELow
 10277                           
 10278                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(16000000/4000000.0)));
 10279  0A7D  30A0               	movlw	160
 10280  0A7E                     u365_27:	
 10281  0A7E  3200               	nop2
 10282  0A7F  0B89               	decfsz	9,f
 10283  0A80  2A7E               	goto	u365_27
 10284                           
 10285                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
 10286  0A81  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 10287  0A82  3901               	andlw	1
 10288  0A83  1075               	bcf	i1nrf24l01SetRXMode@config,0
 10289  0A84  1D03               	skipz
 10290  0A85  1475               	bsf	i1nrf24l01SetRXMode@config,0
 10291                           
 10292                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
 10293  0A86  0875               	movf	i1nrf24l01SetRXMode@config,w
 10294  0A87  00F4               	movwf	??i1_nrf24l01SetRXMode
 10295  0A88  0874               	movf	??i1_nrf24l01SetRXMode,w
 10296  0A89  00F1               	movwf	i1nrf24l01Send@data
 10297  0A8A  3020               	movlw	32
 10298  0A8B  3197  2792  318A   	fcall	i1_nrf24l01Send
 10299                           
 10300                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(16000000/4000000.0)));
 10301  0A8E  30A0               	movlw	160
 10302  0A8F                     u366_27:	
 10303  0A8F  3200               	nop2
 10304  0A90  0B89               	decfsz	9,f
 10305  0A91  2A8F               	goto	u366_27
 10306                           
 10307                           ;nrf24l01.c: 76: if (rxMode){
 10308  0A92  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 10309  0A93  1903               	btfsc	3,2
 10310  0A94  2A9C               	goto	i1l3133
 10311                           
 10312                           ;nrf24l01.c: 77: nrf24l01CEHigh();
 10313  0A95  3196  26BA  318A   	fcall	_nrf24l01CEHigh
 10314                           
 10315                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(16000000/4000000.0)));
 10316  0A98  30A0               	movlw	160
 10317  0A99                     u367_27:	
 10318  0A99  3200               	nop2
 10319  0A9A  0B89               	decfsz	9,f
 10320  0A9B  2A99               	goto	u367_27
 10321  0A9C                     i1l3133:	
 10322                           
 10323                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
 10324  0A9C  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 10325  0A9D  3901               	andlw	1
 10326  0A9E  0020               	movlb	0	; select bank0
 10327  0A9F  116E               	bcf	_nrf24l01,2	;volatile
 10328  0AA0  1D03               	skipz
 10329  0AA1  156E               	bsf	_nrf24l01,2	;volatile
 10330  0AA2  0008               	return
 10331  0AA3                     __end_ofi1_nrf24l01SetRXMode:	
 10332                           
 10333                           	psect	text48
 10334  1792                     __ptext48:	
 10335 ;; *************** function i1_nrf24l01Send *****************
 10336 ;; Defined at:
 10337 ;;		line 9 in file "nrf24l01.c"
 10338 ;; Parameters:    Size  Location     Type
 10339 ;;  command         1    wreg     unsigned char 
 10340 ;;  data            1    1[COMMON] unsigned char 
 10341 ;; Auto vars:     Size  Location     Type
 10342 ;;  command         1    3[COMMON] unsigned char 
 10343 ;; Return value:  Size  Location     Type
 10344 ;;                  1    wreg      unsigned char 
 10345 ;; Registers used:
 10346 ;;		wreg, status,2, status,0, pclath, cstack
 10347 ;; Tracked objects:
 10348 ;;		On entry : 0/0
 10349 ;;		On exit  : 0/0
 10350 ;;		Unchanged: 0/0
 10351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10352 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10353 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10354 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10355 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10356 ;;Total ram usage:        3 bytes
 10357 ;; Hardware stack levels used:    1
 10358 ;; Hardware stack levels required when called:    2
 10359 ;; This function calls:
 10360 ;;		_enableInterrupts
 10361 ;;		_nrf24l01SPIEnd
 10362 ;;		_nrf24l01SPISend
 10363 ;;		_nrf24l01SPIStart
 10364 ;; This function is called by:
 10365 ;;		_nrf24l01ReceivePacket
 10366 ;;		_nrf24l01ISR
 10367 ;;		i1_nrf24l01SetRXMode
 10368 ;; This function uses a non-reentrant model
 10369 ;;
 10370                           
 10371                           
 10372                           ;psect for function i1_nrf24l01Send
 10373  1792                     i1_nrf24l01Send:	
 10374                           
 10375                           ;incstack = 0
 10376                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
 10377                           ;i1nrf24l01Send@command stored from wreg
 10378  1792  00F3               	movwf	i1nrf24l01Send@command
 10379                           
 10380                           ;nrf24l01.c: 12: enableInterrupts(0);
 10381  1793  3000               	movlw	0
 10382  1794  3196  26D3  3197   	fcall	_enableInterrupts
 10383                           
 10384                           ;nrf24l01.c: 15: nrf24l01SPIStart();
 10385  1797  3196  26DB  3197   	fcall	_nrf24l01SPIStart
 10386                           
 10387                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
 10388  179A  0873               	movf	i1nrf24l01Send@command,w
 10389  179B  3196  26EC  3197   	fcall	_nrf24l01SPISend
 10390                           
 10391                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
 10392  179E  0871               	movf	i1nrf24l01Send@data,w
 10393  179F  3196  26EC  3197   	fcall	_nrf24l01SPISend
 10394  17A2  00F2               	movwf	??i1_nrf24l01Send
 10395  17A3  0872               	movf	??i1_nrf24l01Send,w
 10396  17A4  00F1               	movwf	i1nrf24l01Send@data
 10397                           
 10398                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
 10399  17A5  3196  26CC  3197   	fcall	_nrf24l01SPIEnd
 10400                           
 10401                           ;nrf24l01.c: 27: enableInterrupts(1);
 10402  17A8  3001               	movlw	1
 10403  17A9  3196  26D3         	fcall	_enableInterrupts
 10404                           
 10405                           ;nrf24l01.c: 29: return data;
 10406  17AB  0871               	movf	i1nrf24l01Send@data,w
 10407  17AC  0008               	return
 10408  17AD                     __end_ofi1_nrf24l01Send:	
 10409                           
 10410                           	psect	text49
 10411  16DB                     __ptext49:	
 10412 ;; *************** function _nrf24l01SPIStart *****************
 10413 ;; Defined at:
 10414 ;;		line 65 in file "interface.c"
 10415 ;; Parameters:    Size  Location     Type
 10416 ;;		None
 10417 ;; Auto vars:     Size  Location     Type
 10418 ;;		None
 10419 ;; Return value:  Size  Location     Type
 10420 ;;                  1    wreg      void 
 10421 ;; Registers used:
 10422 ;;		wreg, status,2, status,0, pclath, cstack
 10423 ;; Tracked objects:
 10424 ;;		On entry : 0/0
 10425 ;;		On exit  : 0/0
 10426 ;;		Unchanged: 0/0
 10427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10432 ;;Total ram usage:        0 bytes
 10433 ;; Hardware stack levels used:    1
 10434 ;; Hardware stack levels required when called:    8
 10435 ;; This function calls:
 10436 ;;		_nrf24l01CSLow
 10437 ;; This function is called by:
 10438 ;;		_nrf24l01Send
 10439 ;;		_nrf24l01ReceivePacket
 10440 ;;		_nrf24l01SendPacket
 10441 ;;		_nrf24l01SetTXPipe
 10442 ;;		_nrf24l01InitRegisters
 10443 ;;		i1_nrf24l01Send
 10444 ;; This function uses a non-reentrant model
 10445 ;;
 10446                           
 10447                           
 10448                           ;psect for function _nrf24l01SPIStart
 10449  16DB                     _nrf24l01SPIStart:	
 10450                           
 10451                           ;interface.c: 66: nrf24l01CSLow();
 10452                           
 10453                           ;incstack = 0
 10454 ;; hardware stack exceeded
 10455                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
 10456  16DB  3196  26C3  3196   	fcall	_nrf24l01CSLow
 10457                           
 10458                           ;interface.c: 67: _delay((unsigned long)((10)*(16000000/4000000.0)));
 10459  16DE  300D               	movlw	13
 10460  16DF                     u368_27:	
 10461  16DF  0B89               	decfsz	9,f
 10462  16E0  2EDF               	goto	u368_27
 10463  16E1  0000               	nop
 10464  16E2  0008               	return
 10465  16E3                     __end_of_nrf24l01SPIStart:	
 10466                           
 10467                           	psect	text50
 10468  16C3                     __ptext50:	
 10469 ;; *************** function _nrf24l01CSLow *****************
 10470 ;; Defined at:
 10471 ;;		line 18 in file "interface.c"
 10472 ;; Parameters:    Size  Location     Type
 10473 ;;		None
 10474 ;; Auto vars:     Size  Location     Type
 10475 ;;		None
 10476 ;; Return value:  Size  Location     Type
 10477 ;;                  1    wreg      void 
 10478 ;; Registers used:
 10479 ;;		None
 10480 ;; Tracked objects:
 10481 ;;		On entry : 0/0
 10482 ;;		On exit  : 0/0
 10483 ;;		Unchanged: 0/0
 10484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10489 ;;Total ram usage:        0 bytes
 10490 ;; Hardware stack levels used:    1
 10491 ;; Hardware stack levels required when called:    7
 10492 ;; This function calls:
 10493 ;;		Nothing
 10494 ;; This function is called by:
 10495 ;;		_nrf24l01SPIStart
 10496 ;; This function uses a non-reentrant model
 10497 ;;
 10498                           
 10499                           
 10500                           ;psect for function _nrf24l01CSLow
 10501  16C3                     _nrf24l01CSLow:	
 10502                           
 10503                           ;interface.c: 19: PORTAbits.RA1 = 0;
 10504                           
 10505                           ;incstack = 0
 10506 ;; hardware stack exceeded
 10507                           ; Regs used in _nrf24l01CSLow: []
 10508  16C3  0020               	movlb	0	; select bank0
 10509  16C4  108C               	bcf	12,1	;volatile
 10510  16C5  0008               	return
 10511  16C6                     __end_of_nrf24l01CSLow:	
 10512                           
 10513                           	psect	text51
 10514  16EC                     __ptext51:	
 10515 ;; *************** function _nrf24l01SPISend *****************
 10516 ;; Defined at:
 10517 ;;		line 52 in file "interface.c"
 10518 ;; Parameters:    Size  Location     Type
 10519 ;;  data            1    wreg     unsigned char 
 10520 ;; Auto vars:     Size  Location     Type
 10521 ;;  data            1    0[COMMON] unsigned char 
 10522 ;; Return value:  Size  Location     Type
 10523 ;;                  1    wreg      unsigned char 
 10524 ;; Registers used:
 10525 ;;		wreg
 10526 ;; Tracked objects:
 10527 ;;		On entry : 0/0
 10528 ;;		On exit  : 0/0
 10529 ;;		Unchanged: 0/0
 10530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10535 ;;Total ram usage:        0 bytes
 10536 ;; Hardware stack levels used:    1
 10537 ;; Hardware stack levels required when called:    7
 10538 ;; This function calls:
 10539 ;;		Nothing
 10540 ;; This function is called by:
 10541 ;;		_nrf24l01Send
 10542 ;;		_nrf24l01ReceivePacket
 10543 ;;		_nrf24l01SendPacket
 10544 ;;		_nrf24l01SetTXPipe
 10545 ;;		_nrf24l01InitRegisters
 10546 ;;		i1_nrf24l01Send
 10547 ;; This function uses a non-reentrant model
 10548 ;;
 10549                           
 10550                           
 10551                           ;psect for function _nrf24l01SPISend
 10552  16EC                     _nrf24l01SPISend:	
 10553                           
 10554                           ;incstack = 0
 10555 ;; hardware stack exceeded
 10556                           ; Regs used in _nrf24l01SPISend: [wreg]
 10557                           ;nrf24l01SPISend@data stored from wreg
 10558  16EC  00F0               	movwf	nrf24l01SPISend@data
 10559                           
 10560                           ;interface.c: 53: SSP1BUF = data;
 10561  16ED  0870               	movf	nrf24l01SPISend@data,w
 10562  16EE  0024               	movlb	4	; select bank4
 10563  16EF  0091               	movwf	17	;volatile
 10564                           
 10565                           ;interface.c: 55: PORTCbits.RC4 = 1;
 10566  16F0  0020               	movlb	0	; select bank0
 10567  16F1  160E               	bsf	14,4	;volatile
 10568  16F2                     i1l94:	
 10569                           ;interface.c: 57: while (!SSP1STATbits.BF){
 10570                           
 10571  16F2  0024               	movlb	4	; select bank4
 10572  16F3  1814               	btfsc	20,0	;volatile
 10573  16F4  2EF7               	goto	i1l2411
 10574                           
 10575                           ;interface.c: 58: __nop();
 10576  16F5  0000               	nop
 10577  16F6  2EF2               	goto	i1l94
 10578  16F7                     i1l2411:	
 10579                           
 10580                           ;interface.c: 59: };interface.c: 61: return SSP1BUF;
 10581  16F7  0811               	movf	17,w	;volatile
 10582  16F8  0008               	return
 10583  16F9                     __end_of_nrf24l01SPISend:	
 10584                           
 10585                           	psect	text52
 10586  16CC                     __ptext52:	
 10587 ;; *************** function _nrf24l01SPIEnd *****************
 10588 ;; Defined at:
 10589 ;;		line 71 in file "interface.c"
 10590 ;; Parameters:    Size  Location     Type
 10591 ;;		None
 10592 ;; Auto vars:     Size  Location     Type
 10593 ;;		None
 10594 ;; Return value:  Size  Location     Type
 10595 ;;                  1    wreg      void 
 10596 ;; Registers used:
 10597 ;;		wreg, status,2, status,0, pclath, cstack
 10598 ;; Tracked objects:
 10599 ;;		On entry : 0/0
 10600 ;;		On exit  : 0/0
 10601 ;;		Unchanged: 0/0
 10602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10607 ;;Total ram usage:        0 bytes
 10608 ;; Hardware stack levels used:    1
 10609 ;; Hardware stack levels required when called:    8
 10610 ;; This function calls:
 10611 ;;		_nrf24l01CSHigh
 10612 ;; This function is called by:
 10613 ;;		_nrf24l01Send
 10614 ;;		_nrf24l01ReceivePacket
 10615 ;;		_nrf24l01SendPacket
 10616 ;;		_nrf24l01SetTXPipe
 10617 ;;		_nrf24l01InitRegisters
 10618 ;;		i1_nrf24l01Send
 10619 ;; This function uses a non-reentrant model
 10620 ;;
 10621                           
 10622                           
 10623                           ;psect for function _nrf24l01SPIEnd
 10624  16CC                     _nrf24l01SPIEnd:	
 10625                           
 10626                           ;interface.c: 72: _delay((unsigned long)((10)*(16000000/4000000.0)));
 10627                           
 10628                           ;incstack = 0
 10629 ;; hardware stack exceeded
 10630                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
 10631  16CC  300D               	movlw	13
 10632  16CD                     u369_27:	
 10633  16CD  0B89               	decfsz	9,f
 10634  16CE  2ECD               	goto	u369_27
 10635  16CF  0000               	nop
 10636                           
 10637                           ;interface.c: 73: nrf24l01CSHigh();
 10638  16D0  3196  26C0         	fcall	_nrf24l01CSHigh
 10639  16D2  0008               	return
 10640  16D3                     __end_of_nrf24l01SPIEnd:	
 10641                           
 10642                           	psect	text53
 10643  16C0                     __ptext53:	
 10644 ;; *************** function _nrf24l01CSHigh *****************
 10645 ;; Defined at:
 10646 ;;		line 23 in file "interface.c"
 10647 ;; Parameters:    Size  Location     Type
 10648 ;;		None
 10649 ;; Auto vars:     Size  Location     Type
 10650 ;;		None
 10651 ;; Return value:  Size  Location     Type
 10652 ;;                  1    wreg      void 
 10653 ;; Registers used:
 10654 ;;		None
 10655 ;; Tracked objects:
 10656 ;;		On entry : 0/0
 10657 ;;		On exit  : 0/0
 10658 ;;		Unchanged: 0/0
 10659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10664 ;;Total ram usage:        0 bytes
 10665 ;; Hardware stack levels used:    1
 10666 ;; Hardware stack levels required when called:    7
 10667 ;; This function calls:
 10668 ;;		Nothing
 10669 ;; This function is called by:
 10670 ;;		_nrf24l01SPIEnd
 10671 ;; This function uses a non-reentrant model
 10672 ;;
 10673                           
 10674                           
 10675                           ;psect for function _nrf24l01CSHigh
 10676  16C0                     _nrf24l01CSHigh:	
 10677                           
 10678                           ;interface.c: 24: PORTAbits.RA1 = 1;
 10679                           
 10680                           ;incstack = 0
 10681 ;; hardware stack exceeded
 10682                           ; Regs used in _nrf24l01CSHigh: []
 10683  16C0  0020               	movlb	0	; select bank0
 10684  16C1  148C               	bsf	12,1	;volatile
 10685  16C2  0008               	return
 10686  16C3                     __end_of_nrf24l01CSHigh:	
 10687                           
 10688                           	psect	text54
 10689  16D3                     __ptext54:	
 10690 ;; *************** function _enableInterrupts *****************
 10691 ;; Defined at:
 10692 ;;		line 77 in file "interface.c"
 10693 ;; Parameters:    Size  Location     Type
 10694 ;;  enable          1    wreg     unsigned char 
 10695 ;; Auto vars:     Size  Location     Type
 10696 ;;  enable          1    0[COMMON] unsigned char 
 10697 ;; Return value:  Size  Location     Type
 10698 ;;                  1    wreg      void 
 10699 ;; Registers used:
 10700 ;;		wreg, status,0
 10701 ;; Tracked objects:
 10702 ;;		On entry : 0/0
 10703 ;;		On exit  : 0/0
 10704 ;;		Unchanged: 0/0
 10705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10710 ;;Total ram usage:        0 bytes
 10711 ;; Hardware stack levels used:    1
 10712 ;; Hardware stack levels required when called:    7
 10713 ;; This function calls:
 10714 ;;		Nothing
 10715 ;; This function is called by:
 10716 ;;		_nrf24l01Send
 10717 ;;		_nrf24l01SendPacket
 10718 ;;		i1_nrf24l01Send
 10719 ;; This function uses a non-reentrant model
 10720 ;;
 10721                           
 10722                           
 10723                           ;psect for function _enableInterrupts
 10724  16D3                     _enableInterrupts:	
 10725                           
 10726                           ;incstack = 0
 10727 ;; hardware stack exceeded
 10728                           ; Regs used in _enableInterrupts: [wreg+status,0]
 10729                           ;enableInterrupts@enable stored from wreg
 10730  16D3  00F0               	movwf	enableInterrupts@enable
 10731                           
 10732                           ;interface.c: 78: PIE0bits.INTE = enable;
 10733  16D4  0C70               	rrf	enableInterrupts@enable,w
 10734  16D5  0021               	movlb	1	; select bank1
 10735  16D6  1C03               	skipc
 10736  16D7  1010               	bcf	16,0	;volatile
 10737  16D8  1803               	skipnc
 10738  16D9  1410               	bsf	16,0	;volatile
 10739  16DA  0008               	return
 10740  16DB                     __end_of_enableInterrupts:	
 10741                           
 10742                           	psect	text55
 10743  16BD                     __ptext55:	
 10744 ;; *************** function _nrf24l01CELow *****************
 10745 ;; Defined at:
 10746 ;;		line 8 in file "interface.c"
 10747 ;; Parameters:    Size  Location     Type
 10748 ;;		None
 10749 ;; Auto vars:     Size  Location     Type
 10750 ;;		None
 10751 ;; Return value:  Size  Location     Type
 10752 ;;                  1    wreg      void 
 10753 ;; Registers used:
 10754 ;;		None
 10755 ;; Tracked objects:
 10756 ;;		On entry : 0/0
 10757 ;;		On exit  : 0/0
 10758 ;;		Unchanged: 0/0
 10759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10764 ;;Total ram usage:        0 bytes
 10765 ;; Hardware stack levels used:    1
 10766 ;; Hardware stack levels required when called:    7
 10767 ;; This function calls:
 10768 ;;		Nothing
 10769 ;; This function is called by:
 10770 ;;		_nrf24l01SetRXMode
 10771 ;;		_nrf24l01ReceivePacket
 10772 ;;		_nrf24l01SendPacket
 10773 ;;		_nrf24l01Init
 10774 ;;		i1_nrf24l01SetRXMode
 10775 ;; This function uses a non-reentrant model
 10776 ;;
 10777                           
 10778                           
 10779                           ;psect for function _nrf24l01CELow
 10780  16BD                     _nrf24l01CELow:	
 10781                           
 10782                           ;interface.c: 9: PORTAbits.RA0 = 0;
 10783                           
 10784                           ;incstack = 0
 10785 ;; hardware stack exceeded
 10786                           ; Regs used in _nrf24l01CELow: []
 10787  16BD  0020               	movlb	0	; select bank0
 10788  16BE  100C               	bcf	12,0	;volatile
 10789  16BF  0008               	return
 10790  16C0                     __end_of_nrf24l01CELow:	
 10791                           
 10792                           	psect	text56
 10793  16BA                     __ptext56:	
 10794 ;; *************** function _nrf24l01CEHigh *****************
 10795 ;; Defined at:
 10796 ;;		line 13 in file "interface.c"
 10797 ;; Parameters:    Size  Location     Type
 10798 ;;		None
 10799 ;; Auto vars:     Size  Location     Type
 10800 ;;		None
 10801 ;; Return value:  Size  Location     Type
 10802 ;;                  1    wreg      void 
 10803 ;; Registers used:
 10804 ;;		None
 10805 ;; Tracked objects:
 10806 ;;		On entry : 0/0
 10807 ;;		On exit  : 0/0
 10808 ;;		Unchanged: 0/0
 10809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10814 ;;Total ram usage:        0 bytes
 10815 ;; Hardware stack levels used:    1
 10816 ;; Hardware stack levels required when called:    7
 10817 ;; This function calls:
 10818 ;;		Nothing
 10819 ;; This function is called by:
 10820 ;;		_nrf24l01SetRXMode
 10821 ;;		_nrf24l01ReceivePacket
 10822 ;;		_nrf24l01SendPacket
 10823 ;;		_nrf24l01Init
 10824 ;;		i1_nrf24l01SetRXMode
 10825 ;; This function uses a non-reentrant model
 10826 ;;
 10827                           
 10828                           
 10829                           ;psect for function _nrf24l01CEHigh
 10830  16BA                     _nrf24l01CEHigh:	
 10831                           
 10832                           ;interface.c: 14: PORTAbits.RA0 = 1;
 10833                           
 10834                           ;incstack = 0
 10835 ;; hardware stack exceeded
 10836                           ; Regs used in _nrf24l01CEHigh: []
 10837  16BA  0020               	movlb	0	; select bank0
 10838  16BB  140C               	bsf	12,0	;volatile
 10839  16BC  0008               	return
 10840  16BD                     __end_of_nrf24l01CEHigh:	
 10841                           
 10842                           	psect	text57
 10843  093A                     __ptext57:	
 10844 ;; *************** function _strcmp *****************
 10845 ;; Defined at:
 10846 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
 10847 ;; Parameters:    Size  Location     Type
 10848 ;;  s1              2    0[COMMON] PTR const unsigned char 
 10849 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
 10850 ;;		 -> loop@packet(33), 
 10851 ;;  s2              1    2[COMMON] PTR const unsigned char 
 10852 ;;		 -> RXPacket.Message(32), RXPacket(33), 
 10853 ;; Auto vars:     Size  Location     Type
 10854 ;;  r               1    4[COMMON] char 
 10855 ;; Return value:  Size  Location     Type
 10856 ;;                  2    0[COMMON] int 
 10857 ;; Registers used:
 10858 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10859 ;; Tracked objects:
 10860 ;;		On entry : 0/0
 10861 ;;		On exit  : 0/0
 10862 ;;		Unchanged: 0/0
 10863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10864 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10865 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10866 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10867 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10868 ;;Total ram usage:        5 bytes
 10869 ;; Hardware stack levels used:    1
 10870 ;; This function calls:
 10871 ;;		Nothing
 10872 ;; This function is called by:
 10873 ;;		_nrf24l01CheckACK
 10874 ;; This function uses a non-reentrant model
 10875 ;;
 10876                           
 10877                           
 10878                           ;psect for function _strcmp
 10879  093A                     _strcmp:	
 10880                           
 10881                           ;incstack = 0
 10882                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
 10883  093A  2943               	goto	i1l3051
 10884  093B                     i1l3047:	
 10885  093B  3001               	movlw	1
 10886  093C  07F0               	addwf	strcmp@s1,f
 10887  093D  3000               	movlw	0
 10888  093E  3DF1               	addwfc	strcmp@s1+1,f
 10889  093F  3001               	movlw	1
 10890  0940  00F3               	movwf	??_strcmp
 10891  0941  0873               	movf	??_strcmp,w
 10892  0942  07F2               	addwf	strcmp@s2,f
 10893  0943                     i1l3051:	
 10894  0943  0870               	movf	strcmp@s1,w
 10895  0944  0086               	movwf	6
 10896  0945  0871               	movf	strcmp@s1+1,w
 10897  0946  0087               	movwf	7
 10898  0947  0872               	movf	strcmp@s2,w
 10899  0948  0084               	movwf	4
 10900  0949  3001               	movlw	1	; select bank2/3
 10901  094A  0085               	movwf	5
 10902  094B  0300               	decf	0,w
 10903  094C  3AFF               	xorlw	255
 10904  094D  0701               	addwf	1,w
 10905  094E  00F3               	movwf	??_strcmp
 10906  094F  0873               	movf	??_strcmp,w
 10907  0950  00F4               	movwf	strcmp@r
 10908  0951  0874               	movf	strcmp@r,w
 10909  0952  1D03               	btfss	3,2
 10910  0953  295B               	goto	i1l3055
 10911  0954  0870               	movf	strcmp@s1,w
 10912  0955  0086               	movwf	6
 10913  0956  0871               	movf	strcmp@s1+1,w
 10914  0957  0087               	movwf	7
 10915  0958  0801               	movf	1,w
 10916  0959  1D03               	btfss	3,2
 10917  095A  293B               	goto	i1l3047
 10918  095B                     i1l3055:	
 10919  095B  0874               	movf	strcmp@r,w
 10920  095C  00F0               	movwf	?_strcmp
 10921  095D  01F1               	clrf	?_strcmp+1
 10922  095E  1BF0               	btfsc	?_strcmp,7
 10923  095F  03F1               	decf	?_strcmp+1,f
 10924  0960  0008               	return
 10925  0961                     __end_of_strcmp:	
 10926                           
 10927                           	psect	text58
 10928  172E                     __ptext58:	
 10929 ;; *************** function _exception *****************
 10930 ;; Defined at:
 10931 ;;		line 81 in file "interface.c"
 10932 ;; Parameters:    Size  Location     Type
 10933 ;;  exception       1    wreg     unsigned char 
 10934 ;; Auto vars:     Size  Location     Type
 10935 ;;  exception       1   12[COMMON] unsigned char 
 10936 ;; Return value:  Size  Location     Type
 10937 ;;                  1    wreg      void 
 10938 ;; Registers used:
 10939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10940 ;; Tracked objects:
 10941 ;;		On entry : 0/0
 10942 ;;		On exit  : 0/0
 10943 ;;		Unchanged: 0/0
 10944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10946 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10949 ;;Total ram usage:        3 bytes
 10950 ;; Hardware stack levels used:    1
 10951 ;; Hardware stack levels required when called:    2
 10952 ;; This function calls:
 10953 ;;		_flashUpdate
 10954 ;;		i1___wmul
 10955 ;; This function is called by:
 10956 ;;		_nrf24l01ISR
 10957 ;; This function uses a non-reentrant model
 10958 ;;
 10959                           
 10960                           
 10961                           ;psect for function _exception
 10962  172E                     _exception:	
 10963                           
 10964                           ;incstack = 0
 10965                           ; Regs used in _exception: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10966                           ;exception@exception stored from wreg
 10967  172E  00FC               	movwf	exception@exception
 10968                           
 10969                           ;interface.c: 82: romData.bootMode = (unsigned) (exception * 10);
 10970  172F  087C               	movf	exception@exception,w
 10971  1730  00FA               	movwf	??_exception
 10972  1731  01FB               	clrf	??_exception+1
 10973  1732  087A               	movf	??_exception,w
 10974  1733  00F0               	movwf	i1___wmul@multiplier
 10975  1734  087B               	movf	??_exception+1,w
 10976  1735  00F1               	movwf	i1___wmul@multiplier+1
 10977  1736  300A               	movlw	10
 10978  1737  00F2               	movwf	i1___wmul@multiplicand
 10979  1738  3000               	movlw	0
 10980  1739  00F3               	movwf	i1___wmul@multiplicand+1
 10981  173A  3197  2777  3197   	fcall	i1___wmul
 10982  173D  0871               	movf	?i1___wmul+1,w
 10983  173E  0022               	movlb	2	; select bank2
 10984  173F  00DF               	movwf	((_romData+1)^(0+256)+17)
 10985  1740  0870               	movf	?i1___wmul,w
 10986  1741  00DE               	movwf	(_romData^(0+256)+17)
 10987                           
 10988                           ;interface.c: 83: flashUpdate();
 10989  1742  3188  20B0         	fcall	_flashUpdate
 10990  1744  0001               	reset	;# 
 10991  1745  0008               	return
 10992  1746                     __end_of_exception:	
 10993                           
 10994                           	psect	text59
 10995  1777                     __ptext59:	
 10996 ;; *************** function i1___wmul *****************
 10997 ;; Defined at:
 10998 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
 10999 ;; Parameters:    Size  Location     Type
 11000 ;;  multiplier      2    0[COMMON] unsigned int 
 11001 ;;  multiplicand    2    2[COMMON] unsigned int 
 11002 ;; Auto vars:     Size  Location     Type
 11003 ;;  __wmul          2    4[COMMON] unsigned int 
 11004 ;; Return value:  Size  Location     Type
 11005 ;;                  2    0[COMMON] unsigned int 
 11006 ;; Registers used:
 11007 ;;		wreg, status,2, status,0
 11008 ;; Tracked objects:
 11009 ;;		On entry : 0/0
 11010 ;;		On exit  : 0/0
 11011 ;;		Unchanged: 0/0
 11012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11013 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11014 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11016 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11017 ;;Total ram usage:        6 bytes
 11018 ;; Hardware stack levels used:    1
 11019 ;; This function calls:
 11020 ;;		Nothing
 11021 ;; This function is called by:
 11022 ;;		_exception
 11023 ;; This function uses a non-reentrant model
 11024 ;;
 11025                           
 11026                           
 11027                           ;psect for function i1___wmul
 11028  1777                     i1___wmul:	
 11029                           
 11030                           ;incstack = 0
 11031                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 11032  1777  01F4               	clrf	i1___wmul@product
 11033  1778  01F5               	clrf	i1___wmul@product+1
 11034  1779                     i1l3137:	
 11035  1779  1C70               	btfss	i1___wmul@multiplier,0
 11036  177A  2F7F               	goto	i1l517
 11037  177B  0872               	movf	i1___wmul@multiplicand,w
 11038  177C  07F4               	addwf	i1___wmul@product,f
 11039  177D  0873               	movf	i1___wmul@multiplicand+1,w
 11040  177E  3DF5               	addwfc	i1___wmul@product+1,f
 11041  177F                     i1l517:	
 11042  177F  3001               	movlw	1
 11043  1780                     u311_25:	
 11044  1780  35F2               	lslf	i1___wmul@multiplicand,f
 11045  1781  0DF3               	rlf	i1___wmul@multiplicand+1,f
 11046  1782  0B89               	decfsz	9,f
 11047  1783  2F80               	goto	u311_25
 11048  1784  3001               	movlw	1
 11049  1785                     u312_25:	
 11050  1785  36F1               	lsrf	i1___wmul@multiplier+1,f
 11051  1786  0CF0               	rrf	i1___wmul@multiplier,f
 11052  1787  0B89               	decfsz	9,f
 11053  1788  2F85               	goto	u312_25
 11054  1789  0870               	movf	i1___wmul@multiplier,w
 11055  178A  0471               	iorwf	i1___wmul@multiplier+1,w
 11056  178B  1D03               	btfss	3,2
 11057  178C  2F79               	goto	i1l3137
 11058  178D  0875               	movf	i1___wmul@product+1,w
 11059  178E  00F1               	movwf	?i1___wmul+1
 11060  178F  0874               	movf	i1___wmul@product,w
 11061  1790  00F0               	movwf	?i1___wmul
 11062  1791  0008               	return
 11063  1792                     __end_ofi1___wmul:	
 11064                           
 11065                           	psect	text60
 11066  08B0                     __ptext60:	
 11067 ;; *************** function _flashUpdate *****************
 11068 ;; Defined at:
 11069 ;;		line 97 in file "flash.c"
 11070 ;; Parameters:    Size  Location     Type
 11071 ;;		None
 11072 ;; Auto vars:     Size  Location     Type
 11073 ;;  i               2    8[COMMON] unsigned int 
 11074 ;; Return value:  Size  Location     Type
 11075 ;;                  1    wreg      void 
 11076 ;; Registers used:
 11077 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11078 ;; Tracked objects:
 11079 ;;		On entry : 0/0
 11080 ;;		On exit  : 0/0
 11081 ;;		Unchanged: 0/0
 11082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11084 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11085 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11086 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11087 ;;Total ram usage:        4 bytes
 11088 ;; Hardware stack levels used:    1
 11089 ;; Hardware stack levels required when called:    1
 11090 ;; This function calls:
 11091 ;;		_flashWriteByte
 11092 ;; This function is called by:
 11093 ;;		_exception
 11094 ;; This function uses a non-reentrant model
 11095 ;;
 11096                           
 11097                           
 11098                           ;psect for function _flashUpdate
 11099  08B0                     _flashUpdate:	
 11100                           
 11101                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
 11102                           
 11103                           ;incstack = 0
 11104                           ; Regs used in _flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11105  08B0  01F8               	clrf	flashUpdate@i
 11106  08B1  01F9               	clrf	flashUpdate@i+1
 11107  08B2                     L4:	
 11108  08B2  3000               	movlw	0
 11109  08B3  0279               	subwf	flashUpdate@i+1,w
 11110  08B4  3020               	movlw	32
 11111  08B5  1903               	skipnz
 11112  08B6  0278               	subwf	flashUpdate@i,w
 11113  08B7  1803               	btfsc	3,0
 11114  08B8  0008               	return
 11115                           
 11116                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
 11117  08B9  0879               	movf	flashUpdate@i+1,w
 11118  08BA  00F1               	movwf	flashWriteByte@offset+1
 11119  08BB  0878               	movf	flashUpdate@i,w
 11120  08BC  00F0               	movwf	flashWriteByte@offset
 11121  08BD  0878               	movf	flashUpdate@i,w
 11122  08BE  3E20               	addlw	(low (_romHolder| (0+512)))& (0+255)
 11123  08BF  0086               	movwf	6
 11124  08C0  3002               	movlw	2	; select bank4/5
 11125  08C1  0087               	movwf	7
 11126  08C2  0801               	movf	1,w
 11127  08C3  00F6               	movwf	??_flashUpdate
 11128  08C4  01F7               	clrf	??_flashUpdate+1
 11129  08C5  0876               	movf	??_flashUpdate,w
 11130  08C6  00F2               	movwf	flashWriteByte@data
 11131  08C7  0877               	movf	??_flashUpdate+1,w
 11132  08C8  00F3               	movwf	flashWriteByte@data+1
 11133  08C9  318A  220A  3188   	fcall	_flashWriteByte
 11134  08CC  3001               	movlw	1
 11135  08CD  07F8               	addwf	flashUpdate@i,f
 11136  08CE  3000               	movlw	0
 11137  08CF  3DF9               	addwfc	flashUpdate@i+1,f
 11138  08D0  28B2               	goto	L4
 11139  08D1                     __end_of_flashUpdate:	
 11140                           
 11141                           	psect	text61
 11142  0A0A                     __ptext61:	
 11143 ;; *************** function _flashWriteByte *****************
 11144 ;; Defined at:
 11145 ;;		line 8 in file "flash.c"
 11146 ;; Parameters:    Size  Location     Type
 11147 ;;  offset          2    0[COMMON] unsigned int 
 11148 ;;  data            2    2[COMMON] unsigned int 
 11149 ;; Auto vars:     Size  Location     Type
 11150 ;;  address         2    4[COMMON] unsigned int 
 11151 ;; Return value:  Size  Location     Type
 11152 ;;                  1    wreg      void 
 11153 ;; Registers used:
 11154 ;;		wreg, status,2, status,0
 11155 ;; Tracked objects:
 11156 ;;		On entry : 0/0
 11157 ;;		On exit  : 0/0
 11158 ;;		Unchanged: 0/0
 11159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11160 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11161 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11163 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11164 ;;Total ram usage:        6 bytes
 11165 ;; Hardware stack levels used:    1
 11166 ;; This function calls:
 11167 ;;		Nothing
 11168 ;; This function is called by:
 11169 ;;		_flashUpdate
 11170 ;; This function uses a non-reentrant model
 11171 ;;
 11172                           
 11173                           
 11174                           ;psect for function _flashWriteByte
 11175  0A0A                     _flashWriteByte:	
 11176                           
 11177                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
 11178                           
 11179                           ;incstack = 0
 11180                           ; Regs used in _flashWriteByte: [wreg+status,2+status,0]
 11181  0A0A  138B               	bcf	11,7	;volatile
 11182                           
 11183                           ;flash.c: 15: PMCON1 = 0x00;
 11184  0A0B  0031               	movlb	17	; select bank17
 11185  0A0C  0195               	clrf	21	;volsfr
 11186                           
 11187                           ;flash.c: 17: address = (0x2000U - 32) + offset;
 11188  0A0D  0870               	movf	flashWriteByte@offset,w
 11189  0A0E  3EE0               	addlw	224
 11190  0A0F  00F4               	movwf	flashWriteByte@address
 11191  0A10  301F               	movlw	31
 11192  0A11  3D71               	addwfc	flashWriteByte@offset+1,w
 11193  0A12  00F5               	movwf	flashWriteByte@address+1
 11194                           
 11195                           ;flash.c: 18: PMADRL = (char) (address >> 0);
 11196  0A13  0874               	movf	flashWriteByte@address,w
 11197  0A14  0091               	movwf	17	;volatile
 11198                           
 11199                           ;flash.c: 19: PMADRH = (char) (address >> 8);
 11200  0A15  0875               	movf	flashWriteByte@address+1,w
 11201  0A16  0092               	movwf	18	;volatile
 11202                           
 11203                           ;flash.c: 21: PMCON1bits.FREE = 1;
 11204  0A17  1615               	bsf	21,4	;volsfr
 11205                           
 11206                           ;flash.c: 22: PMCON1bits.WREN = 1;
 11207  0A18  1515               	bsf	21,2	;volsfr
 11208                           
 11209                           ;flash.c: 24: PMCON2 = 0x55;
 11210  0A19  3055               	movlw	85
 11211  0A1A  0096               	movwf	22	;volsfr
 11212                           
 11213                           ;flash.c: 25: PMCON2 = 0xAA;
 11214  0A1B  30AA               	movlw	170
 11215  0A1C  0096               	movwf	22	;volsfr
 11216                           
 11217                           ;flash.c: 27: PMCON1bits.WR = 1;
 11218  0A1D  1495               	bsf	21,1	;volsfr
 11219                           
 11220                           ;flash.c: 29: __nop();
 11221  0A1E  0000               	nop
 11222                           
 11223                           ;flash.c: 30: __nop();
 11224  0A1F  0000               	nop
 11225                           
 11226                           ;flash.c: 32: PMCON1bits.WREN = 0;
 11227  0A20  0031               	movlb	17	; select bank17
 11228  0A21  1115               	bcf	21,2	;volsfr
 11229                           
 11230                           ;flash.c: 36: PMCON1 = 0x00;
 11231  0A22  0195               	clrf	21	;volsfr
 11232                           
 11233                           ;flash.c: 38: PMADRL = (char) (address >> 0);
 11234  0A23  0874               	movf	flashWriteByte@address,w
 11235  0A24  0091               	movwf	17	;volatile
 11236                           
 11237                           ;flash.c: 39: PMADRH = (char) (address >> 8);
 11238  0A25  0875               	movf	flashWriteByte@address+1,w
 11239  0A26  0092               	movwf	18	;volatile
 11240                           
 11241                           ;flash.c: 41: PMCON1bits.FREE = 0;
 11242  0A27  1215               	bcf	21,4	;volsfr
 11243                           
 11244                           ;flash.c: 42: PMCON1bits.LWLO = 1;
 11245  0A28  1695               	bsf	21,5	;volsfr
 11246                           
 11247                           ;flash.c: 43: PMCON1bits.WREN = 1;
 11248  0A29  1515               	bsf	21,2	;volsfr
 11249                           
 11250                           ;flash.c: 45: PMDATL = (data >> 0);
 11251  0A2A  0872               	movf	flashWriteByte@data,w
 11252  0A2B  0093               	movwf	19	;volatile
 11253                           
 11254                           ;flash.c: 46: PMDATH = (data >> 8);
 11255  0A2C  0873               	movf	flashWriteByte@data+1,w
 11256  0A2D  0094               	movwf	20	;volatile
 11257                           
 11258                           ;flash.c: 48: PMCON1bits.LWLO = 0;
 11259  0A2E  1295               	bcf	21,5	;volsfr
 11260                           
 11261                           ;flash.c: 50: PMCON2 = 0x55;
 11262  0A2F  3055               	movlw	85
 11263  0A30  0096               	movwf	22	;volsfr
 11264                           
 11265                           ;flash.c: 51: PMCON2 = 0xAA;
 11266  0A31  30AA               	movlw	170
 11267  0A32  0096               	movwf	22	;volsfr
 11268                           
 11269                           ;flash.c: 53: PMCON1bits.WR = 1;
 11270  0A33  1495               	bsf	21,1	;volsfr
 11271                           
 11272                           ;flash.c: 55: __nop();
 11273  0A34  0000               	nop
 11274                           
 11275                           ;flash.c: 56: __nop();
 11276  0A35  0000               	nop
 11277                           
 11278                           ;flash.c: 58: PMCON1bits.WREN = 0;
 11279  0A36  0031               	movlb	17	; select bank17
 11280  0A37  1115               	bcf	21,2	;volsfr
 11281                           
 11282                           ;flash.c: 61: INTCONbits.GIE = 1;
 11283  0A38  178B               	bsf	11,7	;volatile
 11284  0A39  0008               	return
 11285  0A3A                     __end_of_flashWriteByte:	
 11286  007E                     btemp	set	126	;btemp
 11287  007E                     int$flags	set	126
 11288  007E                     wtemp0	set	126


Data Sizes:
    Strings     38
    Constant    65
    Data        0
    BSS         109
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      79
    BANK1            80     73      80
    BANK2            80     45      64
    BANK3            80      0      50
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> setMessage@status(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK2[33]), romData(BANK2[19]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK2[33]), romData(BANK2[19]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_6(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK2[19]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK2[19]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK2[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 19
		 -> ftoa@buf(BANK3[17]), STR_7(CODE[5]), STR_5(CODE[6]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[2]), STR_1(CODE[2]), romData.name(BANK2[16]), 
		 -> romData(BANK2[19]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendPacket@Packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    TXPacket	PTR struct . size(2) Largest target is 33
		 -> NULL(NULL[0]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK2[19]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK2[19]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    checkTXPower@rxPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    setMessage@topic	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_7(CODE[5]), STR_5(CODE[6]), STR_4(CODE[5]), STR_3(CODE[5]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    setMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_exception
    _nrf24l01ReceivePacket->i1_memset
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send
    _exception->_flashUpdate
    _flashUpdate->_flashWriteByte

Critical Paths under _main in BANK0

    _main->_setMessage
    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->___lwmod
    _nrf24l01GetPipe->_strlen
    _loop->_setMessage
    _setMessage->_ftoa
    _strcat->_ftoa
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftmul->_getADCValue
    _nrf24l01SendPacket->_nrf24l01ChangeTXPower
    _nrf24l01SetRXMode->_nrf24l01Send
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    _checkTXPower->_nrf24l01ChangeTXPower
    _nrf24l01ChangeTXPower->_nrf24l01Send
    _flashRealod->_flashReadByte
    ___lwtoft->___ftpack

Critical Paths under _ISR in BANK0

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK1

    _main->_setMessage
    _loop->_setMessage
    _setMessage->_strcat
    _strcat->_ftoa
    _ftoa->___fttol

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_loop

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   85121
                                             38 BANK1     35    35      0
                           ___lwtoft
                        _flashRealod
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                 _nrf24l01SendPacket
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                         _setMessage
                              _sleep
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     200
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    5153
                                             20 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               12    12      0    5153
                                              8 BANK0     12    12      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    3     3      0     314
                                              5 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     270
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    4     4      0    2150
                                              4 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      5     5      0     658
                                              7 BANK0      5     5      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     337
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _loop                                                45    45      0   50018
                                              0 BANK2     45    45      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                       _checkTXPower
                        _getADCValue
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _setMessage                                          10     3      7   17964
                                             77 BANK0      1     1      0
                                             29 BANK1      9     2      7
                           ___lwtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     903
                                             23 BANK1      6     2      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     476
                                              1 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                14    10      4   15282
                                             76 BANK0      1     1      0
                                             10 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             36    26     10    2355
                                             25 BANK0     28    18     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     574
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     337
                                             15 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     340
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    3131
                                              9 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     430
                                             72 BANK0      4     0      4
                                              0 BANK1     10    10      0
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4770
                                             28 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     223
                                              1 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3655
                                             56 BANK0     16    10      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     314
                                              1 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendPacket                                   7     5      2    5106
                                              8 BANK0      7     5      2
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01ChangeTXPower
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     170
                                              1 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    2188
                                              4 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         12     9      3   11802
                                             44 BANK0     12     9      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    3965
                                             28 BANK0     16    10      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    4525
                                             15 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    3153
                                              9 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _checkTXPower                                         2     2      0    2368
                                              8 BANK0      2     2      0
              _nrf24l01ChangeTXPower
                _nrf24l01GetRXPacket
 ---------------------------------------------------------------------------------
 (3) _nrf24l01GetRXPacket                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01ChangeTXPower                                4     2      2    2345
                                              4 BANK0      4     2      2
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (2) _nrf24l01Send                                         3     2      1    2054
                                              1 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (1) _flashRealod                                          3     3      0     271
                                             10 BANK0      3     3      0
                      _flashReadByte
 ---------------------------------------------------------------------------------
 (2) _flashReadByte                                        9     7      2     181
                                              1 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    3084
                                              9 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2973
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    2546
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (8) _nrf24l01ISR                                          2     2      0    2546
                                             13 COMMON     1     1      0
                                              0 BANK0      1     1      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceivePacket
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) _nrf24l01ReceivePacket                                3     3      0     534
                                              8 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_memset                                            8     2      6     152
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (9) _nrf24l01CheckACK                                     3     3      0     621
                                              7 COMMON     3     3      0
                             _strcmp
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) i1_nrf24l01SetRXMode                                  3     3      0     401
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_nrf24l01Send                                      3     2      1     267
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _strcmp                                              5     2      3     220
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (9) _exception                                            3     3      0     589
                                             10 COMMON     3     3      0
                        _flashUpdate
                           i1___wmul
 ---------------------------------------------------------------------------------
 (10) i1___wmul                                            6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) _flashUpdate                                         4     4      0     423
                                              6 COMMON     4     4      0
                     _flashWriteByte
 ---------------------------------------------------------------------------------
 (11) _flashWriteByte                                      6     2      4     333
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwtoft
     ___ftpack
   _flashRealod
     _flashReadByte
   _loop
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         _sleep
     ___ftneg
     _checkTXPower
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01GetRXPacket
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       _sleep
     _nrf24l01SendPacket
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strlen
     _setMessage
       ___lwtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             _sleep
         ___ftneg
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               _sleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         _sleep
       _memset (ARG)
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               _sleep
           ___ftneg
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftneg (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                 _sleep
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
     _sleep
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendPacket
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01ChangeTXPower
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _strlen
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _setMessage
     ___lwtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           _sleep
       ___ftneg
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             _sleep
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       _sleep
     _memset (ARG)
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             _sleep
         ___ftneg
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               _sleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
   _sleep
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
       _flashUpdate
         _flashWriteByte
       i1___wmul
     _nrf24l01CheckACK
       _strcmp
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01ReceivePacket
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     49      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     2D      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      32      11       62.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     13F      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     13F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Tue Jul 24 16:12:01 2018

           flashReadByte@result 0026                    flashRealod@i 002B                  ___bmul@product 0023  
                   __CFG_CP$OFF 0000             ___wmul@multiplicand 0023                i1___wmul@product 0074  
           nrf24l01Send@command 0023                    ___ftadd@exp1 003B                    ___ftadd@exp2 003A  
                   __CFG_LVP$ON 0000                    ___ftadd@sign 0039                             l216 17BA  
                           l228 0E7B                             l502 0182                             l335 0620  
                           l370 08DE                             l339 0631                             l517 17D1  
                           l720 0D3A                             l811 0F35                             l491 00DF  
                           l494 00FE                             l727 0D4D                             l751 04CF  
                           l728 0D55                    flashUpdate@i 0078                    __CFG_CPD$OFF 0000  
                           _ISR 0004                             wreg 0009             nrf24l01SendPacket@i 002E  
                          ?_ISR 0070                    ___ftdiv@cntr 0046                    ___ftdiv@sign 004B  
                ??_nrf24l01Init 0034                            l3011 0B89                            l3005 0B77  
                          l3105 0FDE                            l3017 0856                            l3019 0862  
                          l3043 08EA                            l3221 0E36                            l2511 04A5  
                          l2503 0488                            l2521 04C1                            l2513 04AA  
                          l3217 0E4A                            l2433 1706                            l3067 08FD  
                          l2531 04F3                            l2523 04CB                            l2515 04AE  
                          l3083 0F84                            l3219 0E52                            l2541 050E  
                          l2509 049B                            l3077 0F6E                            l2701 0132  
                          l2383 0D17                            l2527 04E1                            l3271 0687  
                          l3263 064D                            l3255 0625                            l2471 0CFE  
                          l2551 0B9A                            l2439 17CB                            l2711 016E  
                          l2393 0D3F                            l2385 0D21                            l2481 0458  
                          l3097 0FC5                            l2457 0CC5                            l2553 0BA8  
                          l2561 0BCB                            l3433 0406                  ??_nrf24l01Send 0022  
                          l2395 0D47                            l2387 0D26                            l2379 0D10  
                          l2491 046E                            l3267 0666                            l2811 0765  
                          l2803 0751                            l2467 0CF3                            l2459 0CD3  
                          l2707 015F                            l3427 03F7                            l3419 03AD  
                          l2485 045F                            l3285 069D                            l2557 0BC0  
                          l2733 01F2                            l2717 0195                            l2653 006F  
                          l2661 009D                            l3295 06DC                            l3287 06A9  
                          l2815 076D                            l2727 01AD                            l2719 0198  
                          l2671 00AC                            l2647 005F                            l2735 003C  
                          l2743 170B                            l3297 06AD                            l2737 01FD  
                          l2673 00DB                            l3473 09FC                            l2763 0B43  
                          l2675 00E1                            l3467 09E4                            l2747 1711  
                          l2781 06F8                            l2837 083B                            l2685 010D  
                          l3725 0966                            l3469 09F0                            l3477 0A05  
                          l3581 0AA8                            l2951 0B0F                            l2759 0B2D  
                          l2847 0ED1                            l2695 012C                            l2679 00E6  
                          l3727 0972                            l3583 0ACB                            l2873 0F2B  
                          l2865 0F0E                            l3729 097A                            l3593 081D  
                          l2787 070E                            l2875 0F39                            l2867 0F1D  
                          l2981 056C                            l2799 0749                            l2879 0F47  
                          l2887 098D                            l2959 1763                            l2889 099D  
                          l3881 0E09                            STR_1 183C                    __CFG_WDTE$ON 0000  
                          STR_2 183C                            STR_3 182E                            STR_4 1829  
                          STR_5 181E                            STR_6 1838                            STR_7 1833  
                          STR_8 1813                            u2005 0CF4                            u2115 0489  
                          u2205 04C2                            u2145 049C                            u3025 0F96  
                          u3035 0FA6                            u3045 0FC6                            u3205 0681  
                          u2405 0155                            u2175 04AF                            u3055 0FD5  
                          u3065 0FDF                            u2265 0B9D                            u2425 0166  
                          u2435 0178                            u1805 0D35                            u2605 0758  
                          u2285 0BB6                            u2445 018A                            u2295 0BC1  
                          u1825 0D42                            u2635 076E                            u3355 09E7  
                          u2645 0774                            u2565 071A                            u2725 0F0F  
                          u1925 17D2                            u3607 06CC                            u2575 072A  
                          u1935 17D7                            u3375 09F6                            u1865 0D5C  
                          u1785 0D1C                            u2905 0B65                            u3617 06DD  
                          u3385 09FD                            u3537 0D88                            u3627 0AEF  
                          u2595 0752                            u2755 0F2C                            u3547 0920  
                          u3637 0B01                            u1965 0CC8                            u3485 0AB9  
                          u3557 0930                            u3647 0B0C                            u3567 062D  
                          u2695 0EDE                            u3577 068E                            u2785 0992  
                          u1985 0CD4                            u3587 06A5                            u1995 0CE8  
                          u2964 08E4                            u3597 06BF                            u2965 08E3  
                          i1l94 16F2                            _WPUA 020C                            _WPUC 020E  
__size_of_nrf24l01InterfaceInit 001C                    __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000  
 __end_of_nrf24l01InterfaceInit 1800                            _main 0D6C                            _ftoa 0526  
                  ___ftpack@arg 0021                            _loop 0203                    ___ftpack@exp 0024  
               ??_flashReadByte 0023                            fsr0h 0005                            fsr1h 0007  
                          indf0 0000                            fsr0l 0004                            indf1 0001  
                          fsr1l 0006                            btemp 007E  __size_of_nrf24l01ReceivePacket 004D  
                 __CFG_BORV$LOW 0000   __end_of_nrf24l01ReceivePacket 0C65                            start 000F  
         nrf24l01SetRXPipe@pipe 0026                   __CFG_CSWEN$ON 0000               ___bmul@multiplier 0024  
                 __CFG_MCLRE$ON 0000                    ___ftmul@cntr 0066                    ___ftmul@sign 0067  
   __size_of_nrf24l01SendPacket 00C9                           ??_ISR 007E                    ___fttol@exp1 00A9  
          __size_of_getADCValue 00A5                 ??_nrf24l01CELow 0070                    ___fttol@lval 00A5  
               ??_nrf24l01CSLow 0070                           ?_main 0070                           ?_ftoa 00AA  
                         ?_loop 0070                 __end_of___ftadd 0526                 __end_of___ftdiv 1000  
               __end_of___ftneg 16EC                 __end_of___lldiv 0D07                 __end_of___ftmul 0795  
               __end_of___llmod 0BD4                 __end_of___ftsub 0851                 __end_of___fttol 0F57  
                __CFG_DEBUG$OFF 0000                           i1l213 000D                 __end_of___lwmod 0A0A  
                         i1l362 0CAA                           i1l517 177F          enableInterrupts@enable 0070  
                    i1memset@p1 0070                   __CFG_PWRTE$ON 0000           nrf24l01SetTXPipe@pipe 0027  
                  ___lltoft@exp 002E                   ___awtoft@sign 002E                 __end_of_dpowers 1028  
               __end_of_isdigit 1708                           _sleep 17AD                   ___ftpack@sign 0025  
                         ftoa@f 00AA                           ftoa@l 00B2                  __CFG_BOREN$OFF 0000  
              __end_ofi1___wmul 1792                _enableInterrupts 16D3                           status 0003  
           i1___wmul@multiplier 0070                           wtemp0 007E                 __end_of_sprintf 0203  
   __end_ofi1_nrf24l01SetRXMode 0AA3                __end_ofi1_memset 175E  __size_of_nrf24l01ChangeTXPower 003F  
             getADCValue@adcSum 0055   __end_of_nrf24l01ChangeTXPower 0B91                _nrf24l01SPIStart 16DB  
               __initialization 0011                _nrf24l01CheckACK 09B2          nrf24l01InitRegisters@i 0032  
                  __end_of_main 0E0D                    __end_of_ftoa 0618                    __end_of_loop 032A  
  nrf24l01ChangeTXPower@rfSetup 0027                ??_nrf24l01CEHigh 0070                          ??_main 00C6  
                        ??_ftoa 006C                   ___fttol@sign1 00A4                          ??_loop 006E  
              ??_nrf24l01CSHigh 0070                ??_nrf24l01SPIEnd 0070             _nrf24l01GetRXPacket 07FE  
      __size_of_nrf24l01SPISend 000D                ___llmod@dividend 0033                          _ADRESH 009C  
                        _ADRESL 009B                          ?_sleep 0070                __end_of___awtoft 0914  
                        _ANSELA 018C                          _ANSELC 018E                __end_of___ftpack 0D6C  
              ??_flashWriteByte 0074                __end_of___lltoft 09B2                          _ODCONA 028C  
      __size_of_nrf24l01GetPipe 0038                          i1l3051 0943                          i1l2411 16F7  
                        _ODCONC 028E                          i1l3133 0A9C                          i1l3055 095B  
                        i1l3047 093B                          i1l3137 1779                          i1l3155 174A  
                        i1l3501 0C75                          i1l3343 0C5F                          i1l3335 0C47  
                        i1l3339 0C57                          i1l3523 0CAB                          i1l3509 0C86  
                        u311_25 1780                          _INLVLA 038C                          _INLVLC 038E  
                        u312_25 1785           __size_of_checkTXPower 0014                          _PMADRH 0892  
                        _PMADRL 0891                __end_of___lwtoft 0817                          _PMDATH 0894  
                        _PMDATL 0893                          _PMCON1 0895                          _PMCON2 0896  
                        u365_27 0A7E                          u366_27 0A8F                          u367_27 0A99  
                        u368_27 16DF                          u369_27 16CD            ?_nrf24l01GetRXPacket 0070  
          __size_of_flashRealod 0020              flashWriteByte@data 0072            __size_of_flashUpdate 0021  
          __size_of_nrf24l01ISR 004F         nrf24l01SetRXMode@config 0025                          ___bmul 1708  
                        ___ftge 0B16         nrf24l01SetRXMode@rxMode 0026                          ___wmul 17C8  
                     ??___ftadd 0035                  __CFG_STVREN$ON 0000                       ??___ftdiv 0042  
                     ??___ftneg 0024                       ??___lldiv 0029                       ??___ftmul 005E  
                     ??___llmod 0037                       ??___ftsub 0042                       ??___fttol 00A0  
                     ??___lwmod 0025            __end_of_nrf24l01Init 093A            __end_of_nrf24l01Send 08B0  
                        _memset 175E           _nrf24l01InitRegisters 032A                          _strcat 0961  
                        _strcmp 093A                          _strcpy 0817                          _strlen 0851  
                        ftoa@cp 00B6           ___ftmul@f3_as_product 0063       i1nrf24l01SetRXMode@config 0075  
              __end_of_romArray 2000                       ??_isdigit 0021                          loop@ta 0126  
                        loop@vt 0123       i1nrf24l01SetRXMode@rxMode 0076                    _checkTXPower 171A  
                     ??_sprintf 0043              getADCValue@adcLoop 0052         __end_of__initialization 0032  
                    ___ftadd@f1 002F                      ___ftadd@f2 0032                      ___ftge@ff1 0021  
                    ___ftge@ff2 0024           ??_nrf24l01GetRXPacket 0021        nrf24l01SendPacket@Packet 0028  
            getADCValue@channel 0054                      ___ftdiv@f1 003F                      ___ftdiv@f2 003C  
                    ___ftdiv@f3 0047                      ___ftneg@f1 0021                      ___awtoft@c 0029  
           ___bmul@multiplicand 0021                      ___ftmul@f1 0058                      ___ftmul@f2 005B  
                    ___ftsub@f1 003F                      ___ftsub@f2 003C                      ___fttol@f1 0068  
                __pcstackCOMMON 0070                      ___lltoft@c 0029                   __end_of_sleep 17C8  
                    ___lwtoft@c 0029                       ?i1___wmul 0070                       ?i1_memset 0070  
                       ??_sleep 0021                    sprintf@width 0050                      __pbssBANK0 006E  
                    __pbssBANK1 00E9                      __pbssBANK2 014D                      __pbssBANK3 01A0  
                    __pbssBANK4 0220               ??_nrf24l01SPISend 0070              __size_of_exception 0018  
       __size_ofi1_nrf24l01Send 001B               ??_nrf24l01GetPipe 0027                      __pmaintext 0D6C  
                       ?___bmul 0021                         ?___ftge 0021                         ?___wmul 0021  
               __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 0ADB               _nrf24l01SetRXPipe 08D1  
        ?_nrf24l01InitRegisters 0070                      __pintentry 0004               _nrf24l01SetTXPipe 0BD4  
           nrf24l01SPISend@data 0070                         ?_memset 0021              ?_nrf24l01SetRXMode 0070  
                     ?___awtoft 0029                       ?___ftpack 0021              ?_nrf24l01SetRXPipe 0070  
      __end_of_enableInterrupts 16DB              ?_nrf24l01SetTXPipe 0070                       ?___lltoft 0029  
           __CFG_RSTOSC$HFINT32 0000                         ?_strcat 00B7                      ??i1___wmul 0074  
                       ?_strcmp 0070                         ?_strcpy 0021                         ?_strlen 0021  
                     ?___lwtoft 0029           __end_of_n_ADDRESS_MUL 183F                      ??i1_memset 0076  
           ??_nrf24l01SetRXMode 0024        __end_of_nrf24l01SPIStart 16E3             ??_nrf24l01SetRXPipe 0024  
           ??_nrf24l01SetTXPipe 0025                         _SSP1BUF 0211        __end_of_nrf24l01CheckACK 09DD  
         _nrf24l01InterfaceInit 17E4           __end_of_flashReadByte 0A6C                __p_romArray_text 1FE0  
    __end_of_nrf24l01SendPacket 06E1                   ??_getADCValue 004F           __size_of_nrf24l01Init 0026  
         __size_of_nrf24l01Send 0020       __end_of_nrf24l01SetRXMode 0B16       __end_of_nrf24l01SetRXPipe 08F2  
     __end_of_nrf24l01SetTXPipe 0C18           _nrf24l01ReceivePacket 0C18                 __size_of___bmul 0012  
               __size_of___ftge 003C                         ___ftadd 0430                         ___ftdiv 0F57  
                       ___ftneg 16E3                         ___lldiv 0CB4                 __size_of___wmul 001C  
                       ___ftmul 06E1                         ___llmod 0B91                         ___ftsub 0833  
                       ___fttol 0EB2                         ___lwmod 09DD                      ??___awtoft 002C  
                    ??___ftpack 0026           __end_of_nrf24l01CELow 16C0                 __size_of_memset 0019  
         __end_of_nrf24l01CSLow 16C6                      ??___lltoft 002D                         __ptext1 0817  
                       __ptext2 0914                         __ptext3 17E4                         __ptext4 032A  
                       __ptext5 0BD4                         __ptext6 1708                         __ptext7 08D1  
                       __ptext8 0AA3                         __ptext9 09DD                      ??___lwtoft 002C  
               __size_of_strcat 0027                 __size_of_strcmp 0027               __end_of_exception 1746  
               __size_of_strcpy 001C                 __size_of_strlen 001F                    __size_of_ISR 000B  
                       _counter 00E9                         _dpowers 1000                         _isdigit 16F9  
              _romArray_absaddr 1FE0                         _romData 014D                         _sprintf 0036  
                       clrloop0 16C7            end_of_initialization 0032                         ftoa@buf 01C1  
                       ftoa@rem 00AE                    _nrf24l01Init 0914                      _setMessage 0795  
                  _nrf24l01Send 0890                         memset@c 0023                         memset@n 0025  
                       memset@p 0027                nrf24l01GetPipe@i 002B                 ___lldiv@divisor 0021  
               ___lldiv@counter 002E           _nrf24l01ChangeTXPower 0B52                setMessage@packet 00BD  
  __size_ofi1_nrf24l01SetRXMode 0037                setMessage@status 00C4           i1___wmul@multiplicand 0072  
                       strcmp@r 0074           i1nrf24l01Send@command 0073                         strlen@s 0021  
           __end_of_getADCValue 0EB2                       _PORTAbits 000C                       _PORTCbits 000E  
                     _TRISAbits 008C                       _TRISCbits 008E                nrf24l01Send@data 0021  
              __CFG_FEXTOSC$OFF 0000                   ??_flashRealod 002A                   ??_flashUpdate 0076  
                 ??_nrf24l01ISR 007D          ?_nrf24l01InterfaceInit 0070                     ___ftdiv@exp 004A  
                i1_nrf24l01Send 1792                      main@packet 00C8          ?_nrf24l01ReceivePacket 0070  
    __size_of_nrf24l01SetRXMode 003B      __size_of_nrf24l01SetRXPipe 0021                     ___ftmul@exp 0062  
    __size_of_nrf24l01SetTXPipe 0044                  __end_of___bmul 171A                  __end_of___ftge 0B52  
                __end_of___wmul 17E4                       i1memset@c 0072                       i1memset@n 0074  
                     i1memset@p 0076                  __end_of_memset 1777                  __end_of_strcat 0988  
                __end_of_strcmp 0961                  __end_of_strcpy 0833                  __end_of_strlen 0870  
           start_initialization 0011               __size_ofi1___wmul 001B                 _nrf24l01SPISend 16EC  
                   __end_of_ISR 000F           flashWriteByte@address 0074                      ftoa@status 00AD  
             __size_ofi1_memset 0018       nrf24l01SetRXPipe@enRXAddr 0027                 _nrf24l01GetPipe 0AA3  
   __end_of_nrf24l01GetRXPacket 0800         __size_of_nrf24l01CEHigh 0003         __size_of_nrf24l01CSHigh 0003  
                   ?_setMessage 00BD          __end_ofi1_nrf24l01Send 17AD         __size_of_nrf24l01SPIEnd 0007  
               ___llmod@divisor 002F                 ___llmod@counter 0038          ?_nrf24l01ChangeTXPower 0024  
       ??_nrf24l01InitRegisters 0028                __CFG_LPBOREN$OFF 0000             __end_of_flashRealod 0890  
                   _getADCValue 0E0D         __size_of_flashWriteByte 0030                        ??___bmul 0022  
                      ??___ftge 0027             __end_of_flashUpdate 08D1             __end_of_nrf24l01ISR 0CB4  
                      ??___wmul 0025            __end_of_resetRomData 1813                        ??_memset 0027  
             ?_enableInterrupts 0070                        ??_strcat 006D                        ??_strcmp 0073  
                      ??_strcpy 0023                        ??_strlen 0023               __size_of___awtoft 0022  
             __size_of___ftpack 0065              ??_enableInterrupts 0070               __size_of___lltoft 002A  
                     ___latbits 0002               __size_of___lwtoft 0015                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0                   __pcstackBANK2 0120               ?_nrf24l01SPIStart 0070  
          checkTXPower@rxPacket 0029                    _isdigit$1802 0021               ?_nrf24l01CheckACK 0070  
            ??_nrf24l01SPIStart 0070              ??_nrf24l01CheckACK 0077                 ?i1_nrf24l01Send 0071  
                   sprintf@flag 0049                     sprintf@prec 0052                      loop@packet 012C  
           nrf24l01GetPipe@name 002A             nrf24l01GetPipe@pipe 0029                        ?___ftadd 002F  
                      ?___ftdiv 003C                        ?___ftneg 0021                        ?___lldiv 0021  
                      ?___ftmul 0058                        ?___llmod 002F                        ?___ftsub 003C  
                      ?___fttol 0068                        ?___lwmod 0021            __end_of_n_ADDRESS_P0 1829  
       __end_of_nrf24l01SPISend 16F9              i1nrf24l01Send@data 0071       nrf24l01InitRegisters@enAA 002F  
           __size_of_setMessage 0069              _nrf24l01SendPacket 0618         __end_of_nrf24l01GetPipe 0ADB  
                      ?_isdigit 0070                       _loop$2065 0129                       _exception 172E  
           ?_nrf24l01SendPacket 0028                        ?_sprintf 0039             i1_nrf24l01SetRXMode 0A6C  
                __size_of_sleep 001B                     _flashRealod 0870                  ___wmul@product 0025  
                   _flashUpdate 08B0                     _nrf24l01ISR 0C65                       clear_ram0 16C6  
                      _PIE0bits 0090                        _PIR0bits 0010                       _romHolder 0220  
                     _sleepLoop 00EF            ??_nrf24l01SendPacket 002A                 setMessage@value 00C1  
               setMessage@topic 00BF            ?i1_nrf24l01SetRXMode 0070                      _ADCON0bits 009D  
                    _ADCON1bits 009E               ___wmul@multiplier 0021                        i1___wmul 1777  
                      _WPUAbits 020C                        i1_memset 1746                   ?_checkTXPower 0070  
                      _RXPacket 01A0          __size_of_flashReadByte 0032                        _TXPacket 00ED  
                    ?_exception 0070                  _nrf24l01CEHigh 16BA         ??_nrf24l01InterfaceInit 0021  
                _nrf24l01CSHigh 16C0               nrf24l01ISR@status 0020                  _nrf24l01SPIEnd 16CC  
       ??_nrf24l01ReceivePacket 0078          __size_of_nrf24l01CELow 0003          __size_of_nrf24l01CSLow 0003  
          flashWriteByte@offset 0070                  _flashWriteByte 0A0A           ??i1_nrf24l01SetRXMode 0074  
              __size_of___ftadd 00F6                __size_of___ftdiv 00A9                __size_of___ftneg 0009  
              __size_of___lldiv 0053                __size_of___ftmul 00B4                __size_of___llmod 0043  
              __size_of___ftsub 001E                __size_of___fttol 00A5                __size_of___lwmod 002D  
                      ___awtoft 08F2                        ___ftpack 0D07                ?_nrf24l01SPISend 0070  
                      ___lltoft 0988                      _ANSELAbits 018C                        ___lwtoft 0802  
                    _ANSELCbits 018E                  ??_checkTXPower 0028                ?_nrf24l01GetPipe 0070  
                    sprintf@val 004B                   _n_ADDRESS_MUL 183E                      strcat@from 00B9  
        __end_of_nrf24l01CEHigh 16BD                __size_of_isdigit 000F          __end_of_nrf24l01CSHigh 16C3  
                      __ptext10 0203                        __ptext11 0795                        __ptext20 0988  
                      __ptext12 0961                        __ptext21 0EB2                        __ptext13 175E  
                      __ptext30 17AD                        __ptext22 0833                        __ptext14 0526  
                      __ptext31 0F57                        __ptext23 16E3                        __ptext15 0036  
                      __ptext40 0802                        __ptext32 0430                        __ptext24 06E1  
                      __ptext16 16F9                        __ptext41 0D07                        __ptext33 08F2  
                      __ptext25 0B16                        __ptext17 17C8                        __ptext50 16C3  
                      __ptext34 171A                        __ptext26 0618                        __ptext18 0B91  
                      __ptext51 16EC                        __ptext43 0C65                        __ptext35 07FE  
                      __ptext27 0851                        __ptext19 0CB4                        __ptext60 08B0  
                      __ptext52 16CC                        __ptext44 0C18                        __ptext36 0B52  
                      __ptext28 0ADB                        __ptext61 0A0A                        __ptext53 16C0  
                      __ptext45 1746                        __ptext37 0890                        __ptext29 0E0D  
                      __ptext54 16D3                        __ptext46 09B2                        __ptext38 0870  
                      __ptext55 16BD                        __ptext47 0A6C                        __ptext39 0A3A  
                      __ptext56 16BA                        __ptext48 1792                        __ptext57 093A  
                      __ptext49 16DB                        __ptext58 172E                        __ptext59 1777  
                  _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 16D3                        _nrf24l01 006E  
                  _resetRomData 1800                __size_of_sprintf 01CD                     _OSCCON1bits 0919  
                  ??_setMessage 006D                      strcpy@from 0021   nrf24l01ChangeTXPower@addPower 0024  
       ??_nrf24l01ChangeTXPower 0026                   __size_of_main 00A1                   __size_of_ftoa 00F2  
                 __size_of_loop 0127    nrf24l01InitRegisters@channel 002A                       sleep@wdps 0022  
        __end_of_flashWriteByte 0A3A    nrf24l01InitRegisters@feature 002C              exception@exception 007C  
                    _RC0PPSbits 0EA0                        _romArray 1FE0                   _flashReadByte 0A3A  
  nrf24l01InitRegisters@rfSetup 002D                      _RC1PPSbits 0EA1                    ?_getADCValue 004C  
                    _RC2PPSbits 0EA2  __size_of_nrf24l01InitRegisters 0106   __end_of_nrf24l01InitRegisters 0430  
                      int$flags 007E    nrf24l01InitRegisters@setupAW 002B                      _ODCONAbits 028C  
                  _SSP1STATbits 0214                        main@pipe 00C7          nrf24l01ReceivePacket@i 007A  
                 _nrf24l01CELow 16BD                   _nrf24l01CSLow 16C3              __end_of_setMessage 07FE  
                    _INTCONbits 000B                 ?_nrf24l01CEHigh 0070                      _FVRCONbits 0117  
              ??i1_nrf24l01Send 0072                     ??_exception 007A                 ?_nrf24l01CSHigh 0070  
                __pstringtext10 1838                  __pstringtext11 183C                  __pstringtext12 0000  
                      isdigit@c 0022                        memset@p1 0021                 ?_nrf24l01SPIEnd 0070  
                      intlevel1 0000                       sprintf@ap 004A                       sprintf@sp 004F  
                      loop@vOut 0120                    _n_ADDRESS_P0 1824       __size_of_enableInterrupts 0008  
                    _PMCON1bits 0895                ___lwmod@dividend 0023                ___lldiv@dividend 0025  
             __CFG_CLKOUTEN$OFF 0000                 ?_flashWriteByte 0070    __size_of_nrf24l01GetRXPacket 0002  
                ?_flashReadByte 0021     nrf24l01InitRegisters@config 0031       __size_of_nrf24l01SPIStart 0008  
     __size_of_nrf24l01CheckACK 002B     nrf24l01InitRegisters@status 002E      nrf24l01ReceivePacket@width 0079  
                ?_nrf24l01CELow 0070                   __pstringtext1 1000                   __pstringtext2 1800  
                 __pstringtext3 1824                   __pstringtext4 183E                   __pstringtext5 1813  
                 __pstringtext6 181E                   __pstringtext7 1829                   __pstringtext8 182E  
                 __pstringtext9 1833                  ?_nrf24l01CSLow 0070                        sprintf@c 0054  
                      sprintf@f 0039      nrf24l01InitRegisters@DynPD 0030                        strcat@cp 00BB  
                      strcat@to 00B7                        strcmp@s1 0070                        strcmp@s2 0072  
              ___lldiv@quotient 002A                 ___lwmod@divisor 0021                        strcpy@cp 0025  
                      strlen@cp 0025                        strcpy@to 0024                 ___lwmod@counter 0026  
                    _WDTCONbits 0097                   ?_nrf24l01Init 0070                   ?_nrf24l01Send 0021  
                  ?_flashRealod 0070                      _STATUSbits 0003            flashReadByte@address 0028  
                  ?_flashUpdate 0070                    ?_nrf24l01ISR 0070            __end_of_checkTXPower 172E  
           flashReadByte@offset 0021  
