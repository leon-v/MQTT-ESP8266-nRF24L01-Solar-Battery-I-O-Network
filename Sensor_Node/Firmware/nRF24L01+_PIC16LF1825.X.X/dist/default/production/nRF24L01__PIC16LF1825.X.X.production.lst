

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
<<<<<<< HEAD
                                                                                               Thu Aug 02 12:07:07 2018
=======
                                                                                               Wed Aug 01 21:30:47 2018
>>>>>>> 1d4db504068e8c8c8cdf720102f8bcd4a3c081ef

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	cinit,global,class=CODE,merge=1,delta=2
    23                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    25                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    26                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    27                           	psect	clrtext,global,class=CODE,delta=2
    28                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    29                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    30                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    31                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    32                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    33                           	psect	text1,local,class=CODE,merge=1,delta=2
    34                           	psect	text2,local,class=CODE,merge=1,delta=2
    35                           	psect	text3,local,class=CODE,merge=1,delta=2
    36                           	psect	text4,local,class=CODE,merge=1,delta=2
    37                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text6,local,class=CODE,merge=1,delta=2
    39                           	psect	text7,local,class=CODE,merge=1,delta=2
    40                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text9,local,class=CODE,merge=1,delta=2
    42                           	psect	text10,local,class=CODE,merge=1,delta=2
    43                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text13,local,class=CODE,merge=1,delta=2
    46                           	psect	text14,local,class=CODE,merge=1,delta=2
    47                           	psect	text15,local,class=CODE,merge=1,delta=2
    48                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text17,local,class=CODE,merge=1,delta=2
    50                           	psect	text18,local,class=CODE,merge=1,delta=2
    51                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text21,local,class=CODE,merge=1,delta=2
    54                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text32,local,class=CODE,merge=1,delta=2
    65                           	psect	text33,local,class=CODE,merge=1,delta=2
    66                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    69                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	intentry,global,class=CODE,delta=2
    73                           	psect	text41,local,class=CODE,merge=1,delta=2
    74                           	psect	text42,local,class=CODE,merge=1,delta=2
    75                           	psect	text43,local,class=CODE,merge=1,delta=2
    76                           	psect	text44,local,class=CODE,merge=1,delta=2
    77                           	psect	text45,local,class=CODE,merge=1,delta=2
    78                           	psect	text46,local,class=CODE,merge=1,delta=2
    79                           	psect	text47,local,class=CODE,merge=1,delta=2
    80                           	psect	text48,local,class=CODE,merge=1,delta=2
    81                           	psect	text49,local,class=CODE,merge=1,delta=2
    82                           	psect	text50,local,class=CODE,merge=1,delta=2
    83                           	psect	text51,local,class=CODE,merge=1,delta=2
    84                           	psect	text52,local,class=CODE,merge=1,delta=2
    85                           	psect	text53,local,class=CODE,merge=1,delta=2
    86                           	psect	text54,local,class=CODE,merge=1,delta=2
    87                           	dabs	1,0x7E,2
    88  0000                     
    89                           ; Version 2.00
    90                           ; Generated 27/05/2018 GMT
    91                           ; 
    92                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    93                           ; All rights reserved.
    94                           ; 
    95                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    96                           ; 
    97                           ; Redistribution and use in source and binary forms, with or without modification, are
    98                           ; permitted provided that the following conditions are met:
    99                           ; 
   100                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   101                           ;        conditions and the following disclaimer.
   102                           ; 
   103                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   104                           ;        of conditions and the following disclaimer in the documentation and/or other
   105                           ;        materials provided with the distribution.
   106                           ; 
   107                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   108                           ;        software without specific prior written permission.
   109                           ; 
   110                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   111                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   112                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   113                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   114                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   115                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   116                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   117                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   118                           ; 
   119                           ; 
   120                           ; Code-generator required, PIC16LF18325 Definitions
   121                           ; 
   122                           ; SFR Addresses
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0006                     	;# 
   130  0007                     	;# 
   131  0008                     	;# 
   132  0009                     	;# 
   133  000A                     	;# 
   134  000B                     	;# 
   135  000C                     	;# 
   136  000E                     	;# 
   137  0010                     	;# 
   138  0011                     	;# 
   139  0012                     	;# 
   140  0013                     	;# 
   141  0014                     	;# 
   142  0015                     	;# 
   143  0015                     	;# 
   144  0016                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  0019                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001B                     	;# 
   152  001C                     	;# 
   153  001D                     	;# 
   154  001E                     	;# 
   155  001F                     	;# 
   156  008C                     	;# 
   157  008E                     	;# 
   158  0090                     	;# 
   159  0091                     	;# 
   160  0092                     	;# 
   161  0093                     	;# 
   162  0094                     	;# 
   163  0097                     	;# 
   164  009B                     	;# 
   165  009B                     	;# 
   166  009C                     	;# 
   167  009D                     	;# 
   168  009E                     	;# 
   169  009F                     	;# 
   170  010C                     	;# 
   171  010E                     	;# 
   172  0111                     	;# 
   173  0112                     	;# 
   174  0113                     	;# 
   175  0114                     	;# 
   176  0115                     	;# 
   177  0116                     	;# 
   178  0117                     	;# 
   179  0118                     	;# 
   180  0119                     	;# 
   181  018C                     	;# 
   182  018E                     	;# 
   183  0199                     	;# 
   184  0199                     	;# 
   185  0199                     	;# 
   186  019A                     	;# 
   187  019A                     	;# 
   188  019A                     	;# 
   189  019B                     	;# 
   190  019B                     	;# 
   191  019B                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019C                     	;# 
   195  019C                     	;# 
   196  019C                     	;# 
   197  019D                     	;# 
   198  019D                     	;# 
   199  019D                     	;# 
   200  019E                     	;# 
   201  019E                     	;# 
   202  019E                     	;# 
   203  019F                     	;# 
   204  019F                     	;# 
   205  019F                     	;# 
   206  019F                     	;# 
   207  019F                     	;# 
   208  020C                     	;# 
   209  020E                     	;# 
   210  0211                     	;# 
   211  0211                     	;# 
   212  0212                     	;# 
   213  0212                     	;# 
   214  0213                     	;# 
   215  0213                     	;# 
   216  0214                     	;# 
   217  0214                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0216                     	;# 
   223  0216                     	;# 
   224  0217                     	;# 
   225  0217                     	;# 
   226  0219                     	;# 
   227  021A                     	;# 
   228  021B                     	;# 
   229  021C                     	;# 
   230  021D                     	;# 
   231  021D                     	;# 
   232  021E                     	;# 
   233  021F                     	;# 
   234  028C                     	;# 
   235  028E                     	;# 
   236  0291                     	;# 
   237  0291                     	;# 
   238  0292                     	;# 
   239  0293                     	;# 
   240  0294                     	;# 
   241  0295                     	;# 
   242  0295                     	;# 
   243  0296                     	;# 
   244  0297                     	;# 
   245  0298                     	;# 
   246  029F                     	;# 
   247  030C                     	;# 
   248  030E                     	;# 
   249  0311                     	;# 
   250  0311                     	;# 
   251  0312                     	;# 
   252  0313                     	;# 
   253  0314                     	;# 
   254  0315                     	;# 
   255  0315                     	;# 
   256  0316                     	;# 
   257  0317                     	;# 
   258  0318                     	;# 
   259  038C                     	;# 
   260  038E                     	;# 
   261  0391                     	;# 
   262  0392                     	;# 
   263  0393                     	;# 
   264  0397                     	;# 
   265  0398                     	;# 
   266  0399                     	;# 
   267  039A                     	;# 
   268  039C                     	;# 
   269  039D                     	;# 
   270  039E                     	;# 
   271  039F                     	;# 
   272  0411                     	;# 
   273  0411                     	;# 
   274  0412                     	;# 
   275  0413                     	;# 
   276  0414                     	;# 
   277  0415                     	;# 
   278  0416                     	;# 
   279  0417                     	;# 
   280  0418                     	;# 
   281  0418                     	;# 
   282  0419                     	;# 
   283  041A                     	;# 
   284  041B                     	;# 
   285  041C                     	;# 
   286  041D                     	;# 
   287  041E                     	;# 
   288  041F                     	;# 
   289  0498                     	;# 
   290  0498                     	;# 
   291  0499                     	;# 
   292  049A                     	;# 
   293  049B                     	;# 
   294  049B                     	;# 
   295  049C                     	;# 
   296  049D                     	;# 
   297  049E                     	;# 
   298  049F                     	;# 
   299  0617                     	;# 
   300  0618                     	;# 
   301  0619                     	;# 
   302  0619                     	;# 
   303  061A                     	;# 
   304  061B                     	;# 
   305  061C                     	;# 
   306  061C                     	;# 
   307  061F                     	;# 
   308  0691                     	;# 
   309  0692                     	;# 
   310  0693                     	;# 
   311  0694                     	;# 
   312  0695                     	;# 
   313  0696                     	;# 
   314  0697                     	;# 
   315  0698                     	;# 
   316  0699                     	;# 
   317  0711                     	;# 
   318  0712                     	;# 
   319  0713                     	;# 
   320  0714                     	;# 
   321  0715                     	;# 
   322  0716                     	;# 
   323  0717                     	;# 
   324  0718                     	;# 
   325  0719                     	;# 
   326  0891                     	;# 
   327  0891                     	;# 
   328  0891                     	;# 
   329  0891                     	;# 
   330  0891                     	;# 
   331  0891                     	;# 
   332  0892                     	;# 
   333  0892                     	;# 
   334  0892                     	;# 
   335  0893                     	;# 
   336  0893                     	;# 
   337  0893                     	;# 
   338  0893                     	;# 
   339  0893                     	;# 
   340  0893                     	;# 
   341  0894                     	;# 
   342  0894                     	;# 
   343  0894                     	;# 
   344  0895                     	;# 
   345  0895                     	;# 
   346  0895                     	;# 
   347  0896                     	;# 
   348  0896                     	;# 
   349  0896                     	;# 
   350  089B                     	;# 
   351  0911                     	;# 
   352  0912                     	;# 
   353  0913                     	;# 
   354  0914                     	;# 
   355  0915                     	;# 
   356  0916                     	;# 
   357  0918                     	;# 
   358  0919                     	;# 
   359  091A                     	;# 
   360  091B                     	;# 
   361  091C                     	;# 
   362  091D                     	;# 
   363  091E                     	;# 
   364  091F                     	;# 
   365  0E0F                     	;# 
   366  0E10                     	;# 
   367  0E11                     	;# 
   368  0E12                     	;# 
   369  0E13                     	;# 
   370  0E14                     	;# 
   371  0E15                     	;# 
   372  0E16                     	;# 
   373  0E17                     	;# 
   374  0E18                     	;# 
   375  0E19                     	;# 
   376  0E1A                     	;# 
   377  0E1B                     	;# 
   378  0E1C                     	;# 
   379  0E1D                     	;# 
   380  0E1E                     	;# 
   381  0E1F                     	;# 
   382  0E20                     	;# 
   383  0E21                     	;# 
   384  0E22                     	;# 
   385  0E24                     	;# 
   386  0E25                     	;# 
   387  0E28                     	;# 
   388  0E29                     	;# 
   389  0E2A                     	;# 
   390  0E2B                     	;# 
   391  0E2C                     	;# 
   392  0E2D                     	;# 
   393  0E2E                     	;# 
   394  0E2F                     	;# 
   395  0E90                     	;# 
   396  0E91                     	;# 
   397  0E92                     	;# 
   398  0E94                     	;# 
   399  0E95                     	;# 
   400  0EA0                     	;# 
   401  0EA1                     	;# 
   402  0EA2                     	;# 
   403  0EA3                     	;# 
   404  0EA4                     	;# 
   405  0EA5                     	;# 
   406  0F0F                     	;# 
   407  0F10                     	;# 
   408  0F11                     	;# 
   409  0F12                     	;# 
   410  0F13                     	;# 
   411  0F14                     	;# 
   412  0F15                     	;# 
   413  0F16                     	;# 
   414  0F17                     	;# 
   415  0F18                     	;# 
   416  0F19                     	;# 
   417  0F1A                     	;# 
   418  0F1B                     	;# 
   419  0F1C                     	;# 
   420  0F1D                     	;# 
   421  0F1E                     	;# 
   422  0F1F                     	;# 
   423  0F20                     	;# 
   424  0F21                     	;# 
   425  0F22                     	;# 
   426  0F23                     	;# 
   427  0F24                     	;# 
   428  0F25                     	;# 
   429  0F26                     	;# 
   430  0F27                     	;# 
   431  0F28                     	;# 
   432  0F29                     	;# 
   433  0F2A                     	;# 
   434  0F2B                     	;# 
   435  0F2C                     	;# 
   436  0F2D                     	;# 
   437  0F2E                     	;# 
   438  0F2F                     	;# 
   439  0F30                     	;# 
   440  0F31                     	;# 
   441  0F32                     	;# 
   442  0F33                     	;# 
   443  0F34                     	;# 
   444  0F35                     	;# 
   445  0F36                     	;# 
   446  0F37                     	;# 
   447  0FE4                     	;# 
   448  0FE5                     	;# 
   449  0FE6                     	;# 
   450  0FE7                     	;# 
   451  0FE8                     	;# 
   452  0FE9                     	;# 
   453  0FEA                     	;# 
   454  0FEB                     	;# 
   455  0FED                     	;# 
   456  0FEE                     	;# 
   457  0FEF                     	;# 
   458  0000                     	;# 
   459  0001                     	;# 
   460  0002                     	;# 
   461  0003                     	;# 
   462  0004                     	;# 
   463  0005                     	;# 
   464  0006                     	;# 
   465  0007                     	;# 
   466  0008                     	;# 
   467  0009                     	;# 
   468  000A                     	;# 
   469  000B                     	;# 
   470  000C                     	;# 
   471  000E                     	;# 
   472  0010                     	;# 
   473  0011                     	;# 
   474  0012                     	;# 
   475  0013                     	;# 
   476  0014                     	;# 
   477  0015                     	;# 
   478  0015                     	;# 
   479  0016                     	;# 
   480  0016                     	;# 
   481  0017                     	;# 
   482  0018                     	;# 
   483  0019                     	;# 
   484  0019                     	;# 
   485  001A                     	;# 
   486  001B                     	;# 
   487  001C                     	;# 
   488  001D                     	;# 
   489  001E                     	;# 
   490  001F                     	;# 
   491  008C                     	;# 
   492  008E                     	;# 
   493  0090                     	;# 
   494  0091                     	;# 
   495  0092                     	;# 
   496  0093                     	;# 
   497  0094                     	;# 
   498  0097                     	;# 
   499  009B                     	;# 
   500  009B                     	;# 
   501  009C                     	;# 
   502  009D                     	;# 
   503  009E                     	;# 
   504  009F                     	;# 
   505  010C                     	;# 
   506  010E                     	;# 
   507  0111                     	;# 
   508  0112                     	;# 
   509  0113                     	;# 
   510  0114                     	;# 
   511  0115                     	;# 
   512  0116                     	;# 
   513  0117                     	;# 
   514  0118                     	;# 
   515  0119                     	;# 
   516  018C                     	;# 
   517  018E                     	;# 
   518  0199                     	;# 
   519  0199                     	;# 
   520  0199                     	;# 
   521  019A                     	;# 
   522  019A                     	;# 
   523  019A                     	;# 
   524  019B                     	;# 
   525  019B                     	;# 
   526  019B                     	;# 
   527  019B                     	;# 
   528  019B                     	;# 
   529  019C                     	;# 
   530  019C                     	;# 
   531  019C                     	;# 
   532  019D                     	;# 
   533  019D                     	;# 
   534  019D                     	;# 
   535  019E                     	;# 
   536  019E                     	;# 
   537  019E                     	;# 
   538  019F                     	;# 
   539  019F                     	;# 
   540  019F                     	;# 
   541  019F                     	;# 
   542  019F                     	;# 
   543  020C                     	;# 
   544  020E                     	;# 
   545  0211                     	;# 
   546  0211                     	;# 
   547  0212                     	;# 
   548  0212                     	;# 
   549  0213                     	;# 
   550  0213                     	;# 
   551  0214                     	;# 
   552  0214                     	;# 
   553  0215                     	;# 
   554  0215                     	;# 
   555  0215                     	;# 
   556  0215                     	;# 
   557  0216                     	;# 
   558  0216                     	;# 
   559  0217                     	;# 
   560  0217                     	;# 
   561  0219                     	;# 
   562  021A                     	;# 
   563  021B                     	;# 
   564  021C                     	;# 
   565  021D                     	;# 
   566  021D                     	;# 
   567  021E                     	;# 
   568  021F                     	;# 
   569  028C                     	;# 
   570  028E                     	;# 
   571  0291                     	;# 
   572  0291                     	;# 
   573  0292                     	;# 
   574  0293                     	;# 
   575  0294                     	;# 
   576  0295                     	;# 
   577  0295                     	;# 
   578  0296                     	;# 
   579  0297                     	;# 
   580  0298                     	;# 
   581  029F                     	;# 
   582  030C                     	;# 
   583  030E                     	;# 
   584  0311                     	;# 
   585  0311                     	;# 
   586  0312                     	;# 
   587  0313                     	;# 
   588  0314                     	;# 
   589  0315                     	;# 
   590  0315                     	;# 
   591  0316                     	;# 
   592  0317                     	;# 
   593  0318                     	;# 
   594  038C                     	;# 
   595  038E                     	;# 
   596  0391                     	;# 
   597  0392                     	;# 
   598  0393                     	;# 
   599  0397                     	;# 
   600  0398                     	;# 
   601  0399                     	;# 
   602  039A                     	;# 
   603  039C                     	;# 
   604  039D                     	;# 
   605  039E                     	;# 
   606  039F                     	;# 
   607  0411                     	;# 
   608  0411                     	;# 
   609  0412                     	;# 
   610  0413                     	;# 
   611  0414                     	;# 
   612  0415                     	;# 
   613  0416                     	;# 
   614  0417                     	;# 
   615  0418                     	;# 
   616  0418                     	;# 
   617  0419                     	;# 
   618  041A                     	;# 
   619  041B                     	;# 
   620  041C                     	;# 
   621  041D                     	;# 
   622  041E                     	;# 
   623  041F                     	;# 
   624  0498                     	;# 
   625  0498                     	;# 
   626  0499                     	;# 
   627  049A                     	;# 
   628  049B                     	;# 
   629  049B                     	;# 
   630  049C                     	;# 
   631  049D                     	;# 
   632  049E                     	;# 
   633  049F                     	;# 
   634  0617                     	;# 
   635  0618                     	;# 
   636  0619                     	;# 
   637  0619                     	;# 
   638  061A                     	;# 
   639  061B                     	;# 
   640  061C                     	;# 
   641  061C                     	;# 
   642  061F                     	;# 
   643  0691                     	;# 
   644  0692                     	;# 
   645  0693                     	;# 
   646  0694                     	;# 
   647  0695                     	;# 
   648  0696                     	;# 
   649  0697                     	;# 
   650  0698                     	;# 
   651  0699                     	;# 
   652  0711                     	;# 
   653  0712                     	;# 
   654  0713                     	;# 
   655  0714                     	;# 
   656  0715                     	;# 
   657  0716                     	;# 
   658  0717                     	;# 
   659  0718                     	;# 
   660  0719                     	;# 
   661  0891                     	;# 
   662  0891                     	;# 
   663  0891                     	;# 
   664  0891                     	;# 
   665  0891                     	;# 
   666  0891                     	;# 
   667  0892                     	;# 
   668  0892                     	;# 
   669  0892                     	;# 
   670  0893                     	;# 
   671  0893                     	;# 
   672  0893                     	;# 
   673  0893                     	;# 
   674  0893                     	;# 
   675  0893                     	;# 
   676  0894                     	;# 
   677  0894                     	;# 
   678  0894                     	;# 
   679  0895                     	;# 
   680  0895                     	;# 
   681  0895                     	;# 
   682  0896                     	;# 
   683  0896                     	;# 
   684  0896                     	;# 
   685  089B                     	;# 
   686  0911                     	;# 
   687  0912                     	;# 
   688  0913                     	;# 
   689  0914                     	;# 
   690  0915                     	;# 
   691  0916                     	;# 
   692  0918                     	;# 
   693  0919                     	;# 
   694  091A                     	;# 
   695  091B                     	;# 
   696  091C                     	;# 
   697  091D                     	;# 
   698  091E                     	;# 
   699  091F                     	;# 
   700  0E0F                     	;# 
   701  0E10                     	;# 
   702  0E11                     	;# 
   703  0E12                     	;# 
   704  0E13                     	;# 
   705  0E14                     	;# 
   706  0E15                     	;# 
   707  0E16                     	;# 
   708  0E17                     	;# 
   709  0E18                     	;# 
   710  0E19                     	;# 
   711  0E1A                     	;# 
   712  0E1B                     	;# 
   713  0E1C                     	;# 
   714  0E1D                     	;# 
   715  0E1E                     	;# 
   716  0E1F                     	;# 
   717  0E20                     	;# 
   718  0E21                     	;# 
   719  0E22                     	;# 
   720  0E24                     	;# 
   721  0E25                     	;# 
   722  0E28                     	;# 
   723  0E29                     	;# 
   724  0E2A                     	;# 
   725  0E2B                     	;# 
   726  0E2C                     	;# 
   727  0E2D                     	;# 
   728  0E2E                     	;# 
   729  0E2F                     	;# 
   730  0E90                     	;# 
   731  0E91                     	;# 
   732  0E92                     	;# 
   733  0E94                     	;# 
   734  0E95                     	;# 
   735  0EA0                     	;# 
   736  0EA1                     	;# 
   737  0EA2                     	;# 
   738  0EA3                     	;# 
   739  0EA4                     	;# 
   740  0EA5                     	;# 
   741  0F0F                     	;# 
   742  0F10                     	;# 
   743  0F11                     	;# 
   744  0F12                     	;# 
   745  0F13                     	;# 
   746  0F14                     	;# 
   747  0F15                     	;# 
   748  0F16                     	;# 
   749  0F17                     	;# 
   750  0F18                     	;# 
   751  0F19                     	;# 
   752  0F1A                     	;# 
   753  0F1B                     	;# 
   754  0F1C                     	;# 
   755  0F1D                     	;# 
   756  0F1E                     	;# 
   757  0F1F                     	;# 
   758  0F20                     	;# 
   759  0F21                     	;# 
   760  0F22                     	;# 
   761  0F23                     	;# 
   762  0F24                     	;# 
   763  0F25                     	;# 
   764  0F26                     	;# 
   765  0F27                     	;# 
   766  0F28                     	;# 
   767  0F29                     	;# 
   768  0F2A                     	;# 
   769  0F2B                     	;# 
   770  0F2C                     	;# 
   771  0F2D                     	;# 
   772  0F2E                     	;# 
   773  0F2F                     	;# 
   774  0F30                     	;# 
   775  0F31                     	;# 
   776  0F32                     	;# 
   777  0F33                     	;# 
   778  0F34                     	;# 
   779  0F35                     	;# 
   780  0F36                     	;# 
   781  0F37                     	;# 
   782  0FE4                     	;# 
   783  0FE5                     	;# 
   784  0FE6                     	;# 
   785  0FE7                     	;# 
   786  0FE8                     	;# 
   787  0FE9                     	;# 
   788  0FEA                     	;# 
   789  0FEB                     	;# 
   790  0FED                     	;# 
   791  0FEE                     	;# 
   792  0FEF                     	;# 
   793  0000                     	;# 
   794  0001                     	;# 
   795  0002                     	;# 
   796  0003                     	;# 
   797  0004                     	;# 
   798  0005                     	;# 
   799  0006                     	;# 
   800  0007                     	;# 
   801  0008                     	;# 
   802  0009                     	;# 
   803  000A                     	;# 
   804  000B                     	;# 
   805  000C                     	;# 
   806  000E                     	;# 
   807  0010                     	;# 
   808  0011                     	;# 
   809  0012                     	;# 
   810  0013                     	;# 
   811  0014                     	;# 
   812  0015                     	;# 
   813  0015                     	;# 
   814  0016                     	;# 
   815  0016                     	;# 
   816  0017                     	;# 
   817  0018                     	;# 
   818  0019                     	;# 
   819  0019                     	;# 
   820  001A                     	;# 
   821  001B                     	;# 
   822  001C                     	;# 
   823  001D                     	;# 
   824  001E                     	;# 
   825  001F                     	;# 
   826  008C                     	;# 
   827  008E                     	;# 
   828  0090                     	;# 
   829  0091                     	;# 
   830  0092                     	;# 
   831  0093                     	;# 
   832  0094                     	;# 
   833  0097                     	;# 
   834  009B                     	;# 
   835  009B                     	;# 
   836  009C                     	;# 
   837  009D                     	;# 
   838  009E                     	;# 
   839  009F                     	;# 
   840  010C                     	;# 
   841  010E                     	;# 
   842  0111                     	;# 
   843  0112                     	;# 
   844  0113                     	;# 
   845  0114                     	;# 
   846  0115                     	;# 
   847  0116                     	;# 
   848  0117                     	;# 
   849  0118                     	;# 
   850  0119                     	;# 
   851  018C                     	;# 
   852  018E                     	;# 
   853  0199                     	;# 
   854  0199                     	;# 
   855  0199                     	;# 
   856  019A                     	;# 
   857  019A                     	;# 
   858  019A                     	;# 
   859  019B                     	;# 
   860  019B                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019C                     	;# 
   865  019C                     	;# 
   866  019C                     	;# 
   867  019D                     	;# 
   868  019D                     	;# 
   869  019D                     	;# 
   870  019E                     	;# 
   871  019E                     	;# 
   872  019E                     	;# 
   873  019F                     	;# 
   874  019F                     	;# 
   875  019F                     	;# 
   876  019F                     	;# 
   877  019F                     	;# 
   878  020C                     	;# 
   879  020E                     	;# 
   880  0211                     	;# 
   881  0211                     	;# 
   882  0212                     	;# 
   883  0212                     	;# 
   884  0213                     	;# 
   885  0213                     	;# 
   886  0214                     	;# 
   887  0214                     	;# 
   888  0215                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0216                     	;# 
   893  0216                     	;# 
   894  0217                     	;# 
   895  0217                     	;# 
   896  0219                     	;# 
   897  021A                     	;# 
   898  021B                     	;# 
   899  021C                     	;# 
   900  021D                     	;# 
   901  021D                     	;# 
   902  021E                     	;# 
   903  021F                     	;# 
   904  028C                     	;# 
   905  028E                     	;# 
   906  0291                     	;# 
   907  0291                     	;# 
   908  0292                     	;# 
   909  0293                     	;# 
   910  0294                     	;# 
   911  0295                     	;# 
   912  0295                     	;# 
   913  0296                     	;# 
   914  0297                     	;# 
   915  0298                     	;# 
   916  029F                     	;# 
   917  030C                     	;# 
   918  030E                     	;# 
   919  0311                     	;# 
   920  0311                     	;# 
   921  0312                     	;# 
   922  0313                     	;# 
   923  0314                     	;# 
   924  0315                     	;# 
   925  0315                     	;# 
   926  0316                     	;# 
   927  0317                     	;# 
   928  0318                     	;# 
   929  038C                     	;# 
   930  038E                     	;# 
   931  0391                     	;# 
   932  0392                     	;# 
   933  0393                     	;# 
   934  0397                     	;# 
   935  0398                     	;# 
   936  0399                     	;# 
   937  039A                     	;# 
   938  039C                     	;# 
   939  039D                     	;# 
   940  039E                     	;# 
   941  039F                     	;# 
   942  0411                     	;# 
   943  0411                     	;# 
   944  0412                     	;# 
   945  0413                     	;# 
   946  0414                     	;# 
   947  0415                     	;# 
   948  0416                     	;# 
   949  0417                     	;# 
   950  0418                     	;# 
   951  0418                     	;# 
   952  0419                     	;# 
   953  041A                     	;# 
   954  041B                     	;# 
   955  041C                     	;# 
   956  041D                     	;# 
   957  041E                     	;# 
   958  041F                     	;# 
   959  0498                     	;# 
   960  0498                     	;# 
   961  0499                     	;# 
   962  049A                     	;# 
   963  049B                     	;# 
   964  049B                     	;# 
   965  049C                     	;# 
   966  049D                     	;# 
   967  049E                     	;# 
   968  049F                     	;# 
   969  0617                     	;# 
   970  0618                     	;# 
   971  0619                     	;# 
   972  0619                     	;# 
   973  061A                     	;# 
   974  061B                     	;# 
   975  061C                     	;# 
   976  061C                     	;# 
   977  061F                     	;# 
   978  0691                     	;# 
   979  0692                     	;# 
   980  0693                     	;# 
   981  0694                     	;# 
   982  0695                     	;# 
   983  0696                     	;# 
   984  0697                     	;# 
   985  0698                     	;# 
   986  0699                     	;# 
   987  0711                     	;# 
   988  0712                     	;# 
   989  0713                     	;# 
   990  0714                     	;# 
   991  0715                     	;# 
   992  0716                     	;# 
   993  0717                     	;# 
   994  0718                     	;# 
   995  0719                     	;# 
   996  0891                     	;# 
   997  0891                     	;# 
   998  0891                     	;# 
   999  0891                     	;# 
  1000  0891                     	;# 
  1001  0891                     	;# 
  1002  0892                     	;# 
  1003  0892                     	;# 
  1004  0892                     	;# 
  1005  0893                     	;# 
  1006  0893                     	;# 
  1007  0893                     	;# 
  1008  0893                     	;# 
  1009  0893                     	;# 
  1010  0893                     	;# 
  1011  0894                     	;# 
  1012  0894                     	;# 
  1013  0894                     	;# 
  1014  0895                     	;# 
  1015  0895                     	;# 
  1016  0895                     	;# 
  1017  0896                     	;# 
  1018  0896                     	;# 
  1019  0896                     	;# 
  1020  089B                     	;# 
  1021  0911                     	;# 
  1022  0912                     	;# 
  1023  0913                     	;# 
  1024  0914                     	;# 
  1025  0915                     	;# 
  1026  0916                     	;# 
  1027  0918                     	;# 
  1028  0919                     	;# 
  1029  091A                     	;# 
  1030  091B                     	;# 
  1031  091C                     	;# 
  1032  091D                     	;# 
  1033  091E                     	;# 
  1034  091F                     	;# 
  1035  0E0F                     	;# 
  1036  0E10                     	;# 
  1037  0E11                     	;# 
  1038  0E12                     	;# 
  1039  0E13                     	;# 
  1040  0E14                     	;# 
  1041  0E15                     	;# 
  1042  0E16                     	;# 
  1043  0E17                     	;# 
  1044  0E18                     	;# 
  1045  0E19                     	;# 
  1046  0E1A                     	;# 
  1047  0E1B                     	;# 
  1048  0E1C                     	;# 
  1049  0E1D                     	;# 
  1050  0E1E                     	;# 
  1051  0E1F                     	;# 
  1052  0E20                     	;# 
  1053  0E21                     	;# 
  1054  0E22                     	;# 
  1055  0E24                     	;# 
  1056  0E25                     	;# 
  1057  0E28                     	;# 
  1058  0E29                     	;# 
  1059  0E2A                     	;# 
  1060  0E2B                     	;# 
  1061  0E2C                     	;# 
  1062  0E2D                     	;# 
  1063  0E2E                     	;# 
  1064  0E2F                     	;# 
  1065  0E90                     	;# 
  1066  0E91                     	;# 
  1067  0E92                     	;# 
  1068  0E94                     	;# 
  1069  0E95                     	;# 
  1070  0EA0                     	;# 
  1071  0EA1                     	;# 
  1072  0EA2                     	;# 
  1073  0EA3                     	;# 
  1074  0EA4                     	;# 
  1075  0EA5                     	;# 
  1076  0F0F                     	;# 
  1077  0F10                     	;# 
  1078  0F11                     	;# 
  1079  0F12                     	;# 
  1080  0F13                     	;# 
  1081  0F14                     	;# 
  1082  0F15                     	;# 
  1083  0F16                     	;# 
  1084  0F17                     	;# 
  1085  0F18                     	;# 
  1086  0F19                     	;# 
  1087  0F1A                     	;# 
  1088  0F1B                     	;# 
  1089  0F1C                     	;# 
  1090  0F1D                     	;# 
  1091  0F1E                     	;# 
  1092  0F1F                     	;# 
  1093  0F20                     	;# 
  1094  0F21                     	;# 
  1095  0F22                     	;# 
  1096  0F23                     	;# 
  1097  0F24                     	;# 
  1098  0F25                     	;# 
  1099  0F26                     	;# 
  1100  0F27                     	;# 
  1101  0F28                     	;# 
  1102  0F29                     	;# 
  1103  0F2A                     	;# 
  1104  0F2B                     	;# 
  1105  0F2C                     	;# 
  1106  0F2D                     	;# 
  1107  0F2E                     	;# 
  1108  0F2F                     	;# 
  1109  0F30                     	;# 
  1110  0F31                     	;# 
  1111  0F32                     	;# 
  1112  0F33                     	;# 
  1113  0F34                     	;# 
  1114  0F35                     	;# 
  1115  0F36                     	;# 
  1116  0F37                     	;# 
  1117  0FE4                     	;# 
  1118  0FE5                     	;# 
  1119  0FE6                     	;# 
  1120  0FE7                     	;# 
  1121  0FE8                     	;# 
  1122  0FE9                     	;# 
  1123  0FEA                     	;# 
  1124  0FEB                     	;# 
  1125  0FED                     	;# 
  1126  0FEE                     	;# 
  1127  0FEF                     	;# 
  1128  0000                     	;# 
  1129  0001                     	;# 
  1130  0002                     	;# 
  1131  0003                     	;# 
  1132  0004                     	;# 
  1133  0005                     	;# 
  1134  0006                     	;# 
  1135  0007                     	;# 
  1136  0008                     	;# 
  1137  0009                     	;# 
  1138  000A                     	;# 
  1139  000B                     	;# 
  1140  000C                     	;# 
  1141  000E                     	;# 
  1142  0010                     	;# 
  1143  0011                     	;# 
  1144  0012                     	;# 
  1145  0013                     	;# 
  1146  0014                     	;# 
  1147  0015                     	;# 
  1148  0015                     	;# 
  1149  0016                     	;# 
  1150  0016                     	;# 
  1151  0017                     	;# 
  1152  0018                     	;# 
  1153  0019                     	;# 
  1154  0019                     	;# 
  1155  001A                     	;# 
  1156  001B                     	;# 
  1157  001C                     	;# 
  1158  001D                     	;# 
  1159  001E                     	;# 
  1160  001F                     	;# 
  1161  008C                     	;# 
  1162  008E                     	;# 
  1163  0090                     	;# 
  1164  0091                     	;# 
  1165  0092                     	;# 
  1166  0093                     	;# 
  1167  0094                     	;# 
  1168  0097                     	;# 
  1169  009B                     	;# 
  1170  009B                     	;# 
  1171  009C                     	;# 
  1172  009D                     	;# 
  1173  009E                     	;# 
  1174  009F                     	;# 
  1175  010C                     	;# 
  1176  010E                     	;# 
  1177  0111                     	;# 
  1178  0112                     	;# 
  1179  0113                     	;# 
  1180  0114                     	;# 
  1181  0115                     	;# 
  1182  0116                     	;# 
  1183  0117                     	;# 
  1184  0118                     	;# 
  1185  0119                     	;# 
  1186  018C                     	;# 
  1187  018E                     	;# 
  1188  0199                     	;# 
  1189  0199                     	;# 
  1190  0199                     	;# 
  1191  019A                     	;# 
  1192  019A                     	;# 
  1193  019A                     	;# 
  1194  019B                     	;# 
  1195  019B                     	;# 
  1196  019B                     	;# 
  1197  019B                     	;# 
  1198  019B                     	;# 
  1199  019C                     	;# 
  1200  019C                     	;# 
  1201  019C                     	;# 
  1202  019D                     	;# 
  1203  019D                     	;# 
  1204  019D                     	;# 
  1205  019E                     	;# 
  1206  019E                     	;# 
  1207  019E                     	;# 
  1208  019F                     	;# 
  1209  019F                     	;# 
  1210  019F                     	;# 
  1211  019F                     	;# 
  1212  019F                     	;# 
  1213  020C                     	;# 
  1214  020E                     	;# 
  1215  0211                     	;# 
  1216  0211                     	;# 
  1217  0212                     	;# 
  1218  0212                     	;# 
  1219  0213                     	;# 
  1220  0213                     	;# 
  1221  0214                     	;# 
  1222  0214                     	;# 
  1223  0215                     	;# 
  1224  0215                     	;# 
  1225  0215                     	;# 
  1226  0215                     	;# 
  1227  0216                     	;# 
  1228  0216                     	;# 
  1229  0217                     	;# 
  1230  0217                     	;# 
  1231  0219                     	;# 
  1232  021A                     	;# 
  1233  021B                     	;# 
  1234  021C                     	;# 
  1235  021D                     	;# 
  1236  021D                     	;# 
  1237  021E                     	;# 
  1238  021F                     	;# 
  1239  028C                     	;# 
  1240  028E                     	;# 
  1241  0291                     	;# 
  1242  0291                     	;# 
  1243  0292                     	;# 
  1244  0293                     	;# 
  1245  0294                     	;# 
  1246  0295                     	;# 
  1247  0295                     	;# 
  1248  0296                     	;# 
  1249  0297                     	;# 
  1250  0298                     	;# 
  1251  029F                     	;# 
  1252  030C                     	;# 
  1253  030E                     	;# 
  1254  0311                     	;# 
  1255  0311                     	;# 
  1256  0312                     	;# 
  1257  0313                     	;# 
  1258  0314                     	;# 
  1259  0315                     	;# 
  1260  0315                     	;# 
  1261  0316                     	;# 
  1262  0317                     	;# 
  1263  0318                     	;# 
  1264  038C                     	;# 
  1265  038E                     	;# 
  1266  0391                     	;# 
  1267  0392                     	;# 
  1268  0393                     	;# 
  1269  0397                     	;# 
  1270  0398                     	;# 
  1271  0399                     	;# 
  1272  039A                     	;# 
  1273  039C                     	;# 
  1274  039D                     	;# 
  1275  039E                     	;# 
  1276  039F                     	;# 
  1277  0411                     	;# 
  1278  0411                     	;# 
  1279  0412                     	;# 
  1280  0413                     	;# 
  1281  0414                     	;# 
  1282  0415                     	;# 
  1283  0416                     	;# 
  1284  0417                     	;# 
  1285  0418                     	;# 
  1286  0418                     	;# 
  1287  0419                     	;# 
  1288  041A                     	;# 
  1289  041B                     	;# 
  1290  041C                     	;# 
  1291  041D                     	;# 
  1292  041E                     	;# 
  1293  041F                     	;# 
  1294  0498                     	;# 
  1295  0498                     	;# 
  1296  0499                     	;# 
  1297  049A                     	;# 
  1298  049B                     	;# 
  1299  049B                     	;# 
  1300  049C                     	;# 
  1301  049D                     	;# 
  1302  049E                     	;# 
  1303  049F                     	;# 
  1304  0617                     	;# 
  1305  0618                     	;# 
  1306  0619                     	;# 
  1307  0619                     	;# 
  1308  061A                     	;# 
  1309  061B                     	;# 
  1310  061C                     	;# 
  1311  061C                     	;# 
  1312  061F                     	;# 
  1313  0691                     	;# 
  1314  0692                     	;# 
  1315  0693                     	;# 
  1316  0694                     	;# 
  1317  0695                     	;# 
  1318  0696                     	;# 
  1319  0697                     	;# 
  1320  0698                     	;# 
  1321  0699                     	;# 
  1322  0711                     	;# 
  1323  0712                     	;# 
  1324  0713                     	;# 
  1325  0714                     	;# 
  1326  0715                     	;# 
  1327  0716                     	;# 
  1328  0717                     	;# 
  1329  0718                     	;# 
  1330  0719                     	;# 
  1331  0891                     	;# 
  1332  0891                     	;# 
  1333  0891                     	;# 
  1334  0891                     	;# 
  1335  0891                     	;# 
  1336  0891                     	;# 
  1337  0892                     	;# 
  1338  0892                     	;# 
  1339  0892                     	;# 
  1340  0893                     	;# 
  1341  0893                     	;# 
  1342  0893                     	;# 
  1343  0893                     	;# 
  1344  0893                     	;# 
  1345  0893                     	;# 
  1346  0894                     	;# 
  1347  0894                     	;# 
  1348  0894                     	;# 
  1349  0895                     	;# 
  1350  0895                     	;# 
  1351  0895                     	;# 
  1352  0896                     	;# 
  1353  0896                     	;# 
  1354  0896                     	;# 
  1355  089B                     	;# 
  1356  0911                     	;# 
  1357  0912                     	;# 
  1358  0913                     	;# 
  1359  0914                     	;# 
  1360  0915                     	;# 
  1361  0916                     	;# 
  1362  0918                     	;# 
  1363  0919                     	;# 
  1364  091A                     	;# 
  1365  091B                     	;# 
  1366  091C                     	;# 
  1367  091D                     	;# 
  1368  091E                     	;# 
  1369  091F                     	;# 
  1370  0E0F                     	;# 
  1371  0E10                     	;# 
  1372  0E11                     	;# 
  1373  0E12                     	;# 
  1374  0E13                     	;# 
  1375  0E14                     	;# 
  1376  0E15                     	;# 
  1377  0E16                     	;# 
  1378  0E17                     	;# 
  1379  0E18                     	;# 
  1380  0E19                     	;# 
  1381  0E1A                     	;# 
  1382  0E1B                     	;# 
  1383  0E1C                     	;# 
  1384  0E1D                     	;# 
  1385  0E1E                     	;# 
  1386  0E1F                     	;# 
  1387  0E20                     	;# 
  1388  0E21                     	;# 
  1389  0E22                     	;# 
  1390  0E24                     	;# 
  1391  0E25                     	;# 
  1392  0E28                     	;# 
  1393  0E29                     	;# 
  1394  0E2A                     	;# 
  1395  0E2B                     	;# 
  1396  0E2C                     	;# 
  1397  0E2D                     	;# 
  1398  0E2E                     	;# 
  1399  0E2F                     	;# 
  1400  0E90                     	;# 
  1401  0E91                     	;# 
  1402  0E92                     	;# 
  1403  0E94                     	;# 
  1404  0E95                     	;# 
  1405  0EA0                     	;# 
  1406  0EA1                     	;# 
  1407  0EA2                     	;# 
  1408  0EA3                     	;# 
  1409  0EA4                     	;# 
  1410  0EA5                     	;# 
  1411  0F0F                     	;# 
  1412  0F10                     	;# 
  1413  0F11                     	;# 
  1414  0F12                     	;# 
  1415  0F13                     	;# 
  1416  0F14                     	;# 
  1417  0F15                     	;# 
  1418  0F16                     	;# 
  1419  0F17                     	;# 
  1420  0F18                     	;# 
  1421  0F19                     	;# 
  1422  0F1A                     	;# 
  1423  0F1B                     	;# 
  1424  0F1C                     	;# 
  1425  0F1D                     	;# 
  1426  0F1E                     	;# 
  1427  0F1F                     	;# 
  1428  0F20                     	;# 
  1429  0F21                     	;# 
  1430  0F22                     	;# 
  1431  0F23                     	;# 
  1432  0F24                     	;# 
  1433  0F25                     	;# 
  1434  0F26                     	;# 
  1435  0F27                     	;# 
  1436  0F28                     	;# 
  1437  0F29                     	;# 
  1438  0F2A                     	;# 
  1439  0F2B                     	;# 
  1440  0F2C                     	;# 
  1441  0F2D                     	;# 
  1442  0F2E                     	;# 
  1443  0F2F                     	;# 
  1444  0F30                     	;# 
  1445  0F31                     	;# 
  1446  0F32                     	;# 
  1447  0F33                     	;# 
  1448  0F34                     	;# 
  1449  0F35                     	;# 
  1450  0F36                     	;# 
  1451  0F37                     	;# 
  1452  0FE4                     	;# 
  1453  0FE5                     	;# 
  1454  0FE6                     	;# 
  1455  0FE7                     	;# 
  1456  0FE8                     	;# 
  1457  0FE9                     	;# 
  1458  0FEA                     	;# 
  1459  0FEB                     	;# 
  1460  0FED                     	;# 
  1461  0FEE                     	;# 
  1462  0FEF                     	;# 
  1463  0000                     	;# 
  1464  0001                     	;# 
  1465  0002                     	;# 
  1466  0003                     	;# 
  1467  0004                     	;# 
  1468  0005                     	;# 
  1469  0006                     	;# 
  1470  0007                     	;# 
  1471  0008                     	;# 
  1472  0009                     	;# 
  1473  000A                     	;# 
  1474  000B                     	;# 
  1475  000C                     	;# 
  1476  000E                     	;# 
  1477  0010                     	;# 
  1478  0011                     	;# 
  1479  0012                     	;# 
  1480  0013                     	;# 
  1481  0014                     	;# 
  1482  0015                     	;# 
  1483  0015                     	;# 
  1484  0016                     	;# 
  1485  0016                     	;# 
  1486  0017                     	;# 
  1487  0018                     	;# 
  1488  0019                     	;# 
  1489  0019                     	;# 
  1490  001A                     	;# 
  1491  001B                     	;# 
  1492  001C                     	;# 
  1493  001D                     	;# 
  1494  001E                     	;# 
  1495  001F                     	;# 
  1496  008C                     	;# 
  1497  008E                     	;# 
  1498  0090                     	;# 
  1499  0091                     	;# 
  1500  0092                     	;# 
  1501  0093                     	;# 
  1502  0094                     	;# 
  1503  0097                     	;# 
  1504  009B                     	;# 
  1505  009B                     	;# 
  1506  009C                     	;# 
  1507  009D                     	;# 
  1508  009E                     	;# 
  1509  009F                     	;# 
  1510  010C                     	;# 
  1511  010E                     	;# 
  1512  0111                     	;# 
  1513  0112                     	;# 
  1514  0113                     	;# 
  1515  0114                     	;# 
  1516  0115                     	;# 
  1517  0116                     	;# 
  1518  0117                     	;# 
  1519  0118                     	;# 
  1520  0119                     	;# 
  1521  018C                     	;# 
  1522  018E                     	;# 
  1523  0199                     	;# 
  1524  0199                     	;# 
  1525  0199                     	;# 
  1526  019A                     	;# 
  1527  019A                     	;# 
  1528  019A                     	;# 
  1529  019B                     	;# 
  1530  019B                     	;# 
  1531  019B                     	;# 
  1532  019B                     	;# 
  1533  019B                     	;# 
  1534  019C                     	;# 
  1535  019C                     	;# 
  1536  019C                     	;# 
  1537  019D                     	;# 
  1538  019D                     	;# 
  1539  019D                     	;# 
  1540  019E                     	;# 
  1541  019E                     	;# 
  1542  019E                     	;# 
  1543  019F                     	;# 
  1544  019F                     	;# 
  1545  019F                     	;# 
  1546  019F                     	;# 
  1547  019F                     	;# 
  1548  020C                     	;# 
  1549  020E                     	;# 
  1550  0211                     	;# 
  1551  0211                     	;# 
  1552  0212                     	;# 
  1553  0212                     	;# 
  1554  0213                     	;# 
  1555  0213                     	;# 
  1556  0214                     	;# 
  1557  0214                     	;# 
  1558  0215                     	;# 
  1559  0215                     	;# 
  1560  0215                     	;# 
  1561  0215                     	;# 
  1562  0216                     	;# 
  1563  0216                     	;# 
  1564  0217                     	;# 
  1565  0217                     	;# 
  1566  0219                     	;# 
  1567  021A                     	;# 
  1568  021B                     	;# 
  1569  021C                     	;# 
  1570  021D                     	;# 
  1571  021D                     	;# 
  1572  021E                     	;# 
  1573  021F                     	;# 
  1574  028C                     	;# 
  1575  028E                     	;# 
  1576  0291                     	;# 
  1577  0291                     	;# 
  1578  0292                     	;# 
  1579  0293                     	;# 
  1580  0294                     	;# 
  1581  0295                     	;# 
  1582  0295                     	;# 
  1583  0296                     	;# 
  1584  0297                     	;# 
  1585  0298                     	;# 
  1586  029F                     	;# 
  1587  030C                     	;# 
  1588  030E                     	;# 
  1589  0311                     	;# 
  1590  0311                     	;# 
  1591  0312                     	;# 
  1592  0313                     	;# 
  1593  0314                     	;# 
  1594  0315                     	;# 
  1595  0315                     	;# 
  1596  0316                     	;# 
  1597  0317                     	;# 
  1598  0318                     	;# 
  1599  038C                     	;# 
  1600  038E                     	;# 
  1601  0391                     	;# 
  1602  0392                     	;# 
  1603  0393                     	;# 
  1604  0397                     	;# 
  1605  0398                     	;# 
  1606  0399                     	;# 
  1607  039A                     	;# 
  1608  039C                     	;# 
  1609  039D                     	;# 
  1610  039E                     	;# 
  1611  039F                     	;# 
  1612  0411                     	;# 
  1613  0411                     	;# 
  1614  0412                     	;# 
  1615  0413                     	;# 
  1616  0414                     	;# 
  1617  0415                     	;# 
  1618  0416                     	;# 
  1619  0417                     	;# 
  1620  0418                     	;# 
  1621  0418                     	;# 
  1622  0419                     	;# 
  1623  041A                     	;# 
  1624  041B                     	;# 
  1625  041C                     	;# 
  1626  041D                     	;# 
  1627  041E                     	;# 
  1628  041F                     	;# 
  1629  0498                     	;# 
  1630  0498                     	;# 
  1631  0499                     	;# 
  1632  049A                     	;# 
  1633  049B                     	;# 
  1634  049B                     	;# 
  1635  049C                     	;# 
  1636  049D                     	;# 
  1637  049E                     	;# 
  1638  049F                     	;# 
  1639  0617                     	;# 
  1640  0618                     	;# 
  1641  0619                     	;# 
  1642  0619                     	;# 
  1643  061A                     	;# 
  1644  061B                     	;# 
  1645  061C                     	;# 
  1646  061C                     	;# 
  1647  061F                     	;# 
  1648  0691                     	;# 
  1649  0692                     	;# 
  1650  0693                     	;# 
  1651  0694                     	;# 
  1652  0695                     	;# 
  1653  0696                     	;# 
  1654  0697                     	;# 
  1655  0698                     	;# 
  1656  0699                     	;# 
  1657  0711                     	;# 
  1658  0712                     	;# 
  1659  0713                     	;# 
  1660  0714                     	;# 
  1661  0715                     	;# 
  1662  0716                     	;# 
  1663  0717                     	;# 
  1664  0718                     	;# 
  1665  0719                     	;# 
  1666  0891                     	;# 
  1667  0891                     	;# 
  1668  0891                     	;# 
  1669  0891                     	;# 
  1670  0891                     	;# 
  1671  0891                     	;# 
  1672  0892                     	;# 
  1673  0892                     	;# 
  1674  0892                     	;# 
  1675  0893                     	;# 
  1676  0893                     	;# 
  1677  0893                     	;# 
  1678  0893                     	;# 
  1679  0893                     	;# 
  1680  0893                     	;# 
  1681  0894                     	;# 
  1682  0894                     	;# 
  1683  0894                     	;# 
  1684  0895                     	;# 
  1685  0895                     	;# 
  1686  0895                     	;# 
  1687  0896                     	;# 
  1688  0896                     	;# 
  1689  0896                     	;# 
  1690  089B                     	;# 
  1691  0911                     	;# 
  1692  0912                     	;# 
  1693  0913                     	;# 
  1694  0914                     	;# 
  1695  0915                     	;# 
  1696  0916                     	;# 
  1697  0918                     	;# 
  1698  0919                     	;# 
  1699  091A                     	;# 
  1700  091B                     	;# 
  1701  091C                     	;# 
  1702  091D                     	;# 
  1703  091E                     	;# 
  1704  091F                     	;# 
  1705  0E0F                     	;# 
  1706  0E10                     	;# 
  1707  0E11                     	;# 
  1708  0E12                     	;# 
  1709  0E13                     	;# 
  1710  0E14                     	;# 
  1711  0E15                     	;# 
  1712  0E16                     	;# 
  1713  0E17                     	;# 
  1714  0E18                     	;# 
  1715  0E19                     	;# 
  1716  0E1A                     	;# 
  1717  0E1B                     	;# 
  1718  0E1C                     	;# 
  1719  0E1D                     	;# 
  1720  0E1E                     	;# 
  1721  0E1F                     	;# 
  1722  0E20                     	;# 
  1723  0E21                     	;# 
  1724  0E22                     	;# 
  1725  0E24                     	;# 
  1726  0E25                     	;# 
  1727  0E28                     	;# 
  1728  0E29                     	;# 
  1729  0E2A                     	;# 
  1730  0E2B                     	;# 
  1731  0E2C                     	;# 
  1732  0E2D                     	;# 
  1733  0E2E                     	;# 
  1734  0E2F                     	;# 
  1735  0E90                     	;# 
  1736  0E91                     	;# 
  1737  0E92                     	;# 
  1738  0E94                     	;# 
  1739  0E95                     	;# 
  1740  0EA0                     	;# 
  1741  0EA1                     	;# 
  1742  0EA2                     	;# 
  1743  0EA3                     	;# 
  1744  0EA4                     	;# 
  1745  0EA5                     	;# 
  1746  0F0F                     	;# 
  1747  0F10                     	;# 
  1748  0F11                     	;# 
  1749  0F12                     	;# 
  1750  0F13                     	;# 
  1751  0F14                     	;# 
  1752  0F15                     	;# 
  1753  0F16                     	;# 
  1754  0F17                     	;# 
  1755  0F18                     	;# 
  1756  0F19                     	;# 
  1757  0F1A                     	;# 
  1758  0F1B                     	;# 
  1759  0F1C                     	;# 
  1760  0F1D                     	;# 
  1761  0F1E                     	;# 
  1762  0F1F                     	;# 
  1763  0F20                     	;# 
  1764  0F21                     	;# 
  1765  0F22                     	;# 
  1766  0F23                     	;# 
  1767  0F24                     	;# 
  1768  0F25                     	;# 
  1769  0F26                     	;# 
  1770  0F27                     	;# 
  1771  0F28                     	;# 
  1772  0F29                     	;# 
  1773  0F2A                     	;# 
  1774  0F2B                     	;# 
  1775  0F2C                     	;# 
  1776  0F2D                     	;# 
  1777  0F2E                     	;# 
  1778  0F2F                     	;# 
  1779  0F30                     	;# 
  1780  0F31                     	;# 
  1781  0F32                     	;# 
  1782  0F33                     	;# 
  1783  0F34                     	;# 
  1784  0F35                     	;# 
  1785  0F36                     	;# 
  1786  0F37                     	;# 
  1787  0FE4                     	;# 
  1788  0FE5                     	;# 
  1789  0FE6                     	;# 
  1790  0FE7                     	;# 
  1791  0FE8                     	;# 
  1792  0FE9                     	;# 
  1793  0FEA                     	;# 
  1794  0FEB                     	;# 
  1795  0FED                     	;# 
  1796  0FEE                     	;# 
  1797  0FEF                     	;# 
  1798                           
  1799                           	psect	idataBANK1
  1800  0003                     __pidataBANK1:	
  1801                           
  1802                           ;initializer for _romData
  1803  0003  34C1               	retlw	low (_romDataMap| (0+256))
  1804                           
  1805                           	psect	stringtext1
  1806  1800                     __pstringtext1:	
  1807  1800                     _dpowers:	
  1808  1800  3401               	retlw	1
  1809  1801  3400               	retlw	0
  1810  1802  3400               	retlw	0
  1811  1803  3400               	retlw	0
  1812  1804  340A               	retlw	10
  1813  1805  3400               	retlw	0
  1814  1806  3400               	retlw	0
  1815  1807  3400               	retlw	0
  1816  1808  3464               	retlw	100
  1817  1809  3400               	retlw	0
  1818  180A  3400               	retlw	0
  1819  180B  3400               	retlw	0
  1820  180C  34E8               	retlw	232
  1821  180D  3403               	retlw	3
  1822  180E  3400               	retlw	0
  1823  180F  3400               	retlw	0
  1824  1810  3410               	retlw	16
  1825  1811  3427               	retlw	39
  1826  1812  3400               	retlw	0
  1827  1813  3400               	retlw	0
  1828  1814  34A0               	retlw	160
  1829  1815  3486               	retlw	134
  1830  1816  3401               	retlw	1
  1831  1817  3400               	retlw	0
  1832  1818  3440               	retlw	64
  1833  1819  3442               	retlw	66
  1834  181A  340F               	retlw	15
  1835  181B  3400               	retlw	0
  1836  181C  3480               	retlw	128
  1837  181D  3496               	retlw	150
  1838  181E  3498               	retlw	152
  1839  181F  3400               	retlw	0
  1840  1820  3400               	retlw	0
  1841  1821  34E1               	retlw	225
  1842  1822  34F5               	retlw	245
  1843  1823  3405               	retlw	5
  1844  1824  3400               	retlw	0
  1845  1825  34CA               	retlw	202
  1846  1826  349A               	retlw	154
  1847  1827  343B               	retlw	59
  1848  1828                     __end_of_dpowers:	
  1849                           
  1850                           	psect	stringtext2
  1851  1834                     __pstringtext2:	
  1852  1834                     _statuses:	
  1853  1834  3400               	retlw	0
  1854  1835  3401               	retlw	1
  1855  1836  3402               	retlw	2
  1856  1837  3403               	retlw	3
  1857  1838  3404               	retlw	4
  1858  1839  3400               	retlw	0
  1859  183A  3401               	retlw	1
  1860  183B  3402               	retlw	2
  1861  183C  3403               	retlw	3
  1862  183D  3404               	retlw	4
  1863  183E  3405               	retlw	5
  1864  183F                     __end_of_statuses:	
  1865                           
  1866                           	psect	stringtext3
  1867  184C                     __pstringtext3:	
  1868  184C                     _n_ADDRESS_P0:	
  1869  184C  34AD               	retlw	173
  1870  184D  3487               	retlw	135
  1871  184E  3466               	retlw	102
  1872  184F  34BC               	retlw	188
  1873  1850  34BB               	retlw	187
  1874  1851                     __end_of_n_ADDRESS_P0:	
  1875                           
  1876                           	psect	stringtext4
  1877  1828                     __pstringtext4:	
  1878  1828                     _n_ADDRESS_MUL:	
  1879  1828  3421               	retlw	33
  1880  1829                     __end_of_n_ADDRESS_MUL:	
  1881  000B                     _INTCONbits	set	11
  1882  0010                     _PIR0bits	set	16
  1883  000E                     _PORTCbits	set	14
  1884  000C                     _PORTAbits	set	12
  1885  009E                     _ADCON1bits	set	158
  1886  009C                     _ADRESH	set	156
  1887  009B                     _ADRESL	set	155
  1888  009D                     _ADCON0bits	set	157
  1889  0097                     _WDTCONbits	set	151
  1890  0090                     _PIE0bits	set	144
  1891  008E                     _TRISCbits	set	142
  1892  008C                     _TRISAbits	set	140
  1893  0117                     _FVRCONbits	set	279
  1894  018E                     _ANSELCbits	set	398
  1895  018C                     _ANSELAbits	set	396
  1896  018E                     _ANSELC	set	398
  1897  018C                     _ANSELA	set	396
  1898  020C                     _WPUAbits	set	524
  1899  020E                     _WPUC	set	526
  1900  020C                     _WPUA	set	524
  1901  0211                     _SSP1BUF	set	529
  1902  0214                     _SSP1STATbits	set	532
  1903  0215                     _SSP1CON1bits	set	533
  1904  028C                     _ODCONAbits	set	652
  1905  028E                     _ODCONC	set	654
  1906  028C                     _ODCONA	set	652
  1907  038E                     _INLVLC	set	910
  1908  038C                     _INLVLA	set	908
  1909  0919                     _OSCCON1bits	set	2329
  1910  0EA0                     _RC0PPSbits	set	3744
  1911  0EA2                     _RC2PPSbits	set	3746
  1912  0EA1                     _RC1PPSbits	set	3745
  1913  1829                     STR_14:	
  1914  1829  3425               	retlw	37	;'%'
  1915  182A  346C               	retlw	108	;'l'
  1916  182B  3475               	retlw	117	;'u'
  1917  182C  342E               	retlw	46	;'.'
  1918  182D  3425               	retlw	37	;'%'
  1919  182E  3436               	retlw	54	;'6'
  1920  182F  342E               	retlw	46	;'.'
  1921  1830  3436               	retlw	54	;'6'
  1922  1831  346C               	retlw	108	;'l'
  1923  1832  3475               	retlw	117	;'u'
  1924  1833  3400               	retlw	0
  1925                           
  1926                           	psect	stringtext5
  1927  183F                     __pstringtext5:	
  1928  183F                     STR_6:	
  1929  183F  3441               	retlw	65	;'A'
  1930  1840  344E               	retlw	78	;'N'
  1931  1841  3443               	retlw	67	;'C'
  1932  1842  3433               	retlw	51	;'3'
  1933  1843  346D               	retlw	109	;'m'
  1934  1844  3456               	retlw	86	;'V'
  1935  1845  3400               	retlw	0
  1936                           
  1937                           	psect	stringtext6
  1938  1846                     __pstringtext6:	
  1939  1846                     STR_10:	
  1940  1846  3452               	retlw	82	;'R'
  1941  1847  3446               	retlw	70	;'F'
  1942  1848  3450               	retlw	80	;'P'
  1943  1849  3457               	retlw	87	;'W'
  1944  184A  3452               	retlw	82	;'R'
  1945  184B  3400               	retlw	0
  1946                           
  1947                           	psect	stringtext7
  1948  1851                     __pstringtext7:	
  1949  1851                     STR_3:	
  1950  1851  3444               	retlw	68	;'D'
  1951  1852  3442               	retlw	66	;'B'
  1952  1853  3447               	retlw	71	;'G'
  1953  1854  3431               	retlw	49	;'1'
  1954  1855  3400               	retlw	0
  1955                           
  1956                           	psect	stringtext8
  1957  1856                     __pstringtext8:	
  1958  1856                     STR_5:	
  1959  1856  3444               	retlw	68	;'D'
  1960  1857  3442               	retlw	66	;'B'
  1961  1858  3447               	retlw	71	;'G'
  1962  1859  3432               	retlw	50	;'2'
  1963  185A  3400               	retlw	0
  1964                           
  1965                           	psect	stringtext9
  1966  185B                     __pstringtext9:	
  1967  185B                     STR_7:	
  1968  185B  3444               	retlw	68	;'D'
  1969  185C  3442               	retlw	66	;'B'
  1970  185D  3447               	retlw	71	;'G'
  1971  185E  3433               	retlw	51	;'3'
  1972  185F  3400               	retlw	0
  1973                           
  1974                           	psect	stringtext10
  1975  1860                     __pstringtext10:	
  1976  1860                     STR_9:	
  1977  1860  3444               	retlw	68	;'D'
  1978  1861  3442               	retlw	66	;'B'
  1979  1862  3447               	retlw	71	;'G'
  1980  1863  3434               	retlw	52	;'4'
  1981  1864  3400               	retlw	0
  1982                           
  1983                           	psect	stringtext11
  1984  1865                     __pstringtext11:	
  1985  1865                     STR_11:	
  1986  1865  3444               	retlw	68	;'D'
  1987  1866  3442               	retlw	66	;'B'
  1988  1867  3447               	retlw	71	;'G'
  1989  1868  3435               	retlw	53	;'5'
  1990  1869  3400               	retlw	0
  1991                           
  1992                           	psect	stringtext12
  1993  186A                     __pstringtext12:	
  1994  186A                     STR_8:	
  1995  186A  3454               	retlw	84	;'T'
  1996  186B  3445               	retlw	69	;'E'
  1997  186C  344D               	retlw	77	;'M'
  1998  186D  3450               	retlw	80	;'P'
  1999  186E  3400               	retlw	0
  2000                           
  2001                           	psect	stringtext13
  2002  186F                     __pstringtext13:	
  2003  186F                     STR_4:	
  2004  186F  3456               	retlw	86	;'V'
  2005  1870  3442               	retlw	66	;'B'
  2006  1871  3441               	retlw	65	;'A'
  2007  1872  3454               	retlw	84	;'T'
  2008  1873  3400               	retlw	0
  2009                           
  2010                           	psect	stringtext14
  2011  1874                     __pstringtext14:	
  2012  1874                     STR_13:	
  2013  1874  3442               	retlw	66	;'B'
  2014  1875  344F               	retlw	79	;'O'
  2015  1876  344F               	retlw	79	;'O'
  2016  1877  3454               	retlw	84	;'T'
  2017  1878  3400               	retlw	0
  2018                           
  2019                           	psect	stringtext15
  2020  1879                     __pstringtext15:	
  2021  1879                     STR_12:	
  2022  1879  3455               	retlw	85	;'U'
  2023  187A  3457               	retlw	87	;'W'
  2024  187B  3454               	retlw	84	;'T'
  2025  187C  3400               	retlw	0
  2026                           
  2027                           	psect	stringtext16
  2028  187D                     __pstringtext16:	
  2029  187D                     STR_1:	
  2030  187D  342F               	retlw	47	;'/'
  2031  187E  3400               	retlw	0
  2032                           
  2033                           	psect	stringtext17
  2034  0000                     __pstringtext17:	
  2035  187D                     
  2036                           ; #config settings
  2037  0000                     
  2038                           	psect	cinit
  2039  0011                     start_initialization:	
  2040  0011                     __initialization:	
  2041                           
  2042                           ; Initialize objects allocated to BANK1
  2043  0011  0021               	movlb	1	; select bank1
  2044  0012  3180  2003  3180   	fcall	__pidataBANK1	;fetch initializer
  2045  0015  00EC               	movwf	__pdataBANK1& (0+127)
  2046                           
  2047                           ; Clear objects allocated to BANK1
  2048  0016  01E7               	clrf	__pbssBANK1& (0+127)
  2049  0017  01E8               	clrf	(__pbssBANK1+1)& (0+127)
  2050  0018  01E9               	clrf	(__pbssBANK1+2)& (0+127)
  2051  0019  01EA               	clrf	(__pbssBANK1+3)& (0+127)
  2052  001A  01EB               	clrf	(__pbssBANK1+4)& (0+127)
  2053                           
  2054                           ; Clear objects allocated to BANK2
  2055  001B  3051               	movlw	low __pbssBANK2
  2056  001C  0084               	movwf	4
  2057  001D  3001               	movlw	high __pbssBANK2
  2058  001E  0085               	movwf	5
  2059  001F  3015               	movlw	21
  2060  0020  3187  27FA  3180   	fcall	clear_ram0
  2061                           
  2062                           ; Clear objects allocated to BANK3
  2063  0023  30A0               	movlw	low __pbssBANK3
  2064  0024  0084               	movwf	4
  2065  0025  3001               	movlw	high __pbssBANK3
  2066  0026  0085               	movwf	5
  2067  0027  303D               	movlw	61
  2068  0028  3187  27FA         	fcall	clear_ram0
  2069  002A                     end_of_initialization:	
  2070                           ;End of C runtime variable initialization code
  2071                           
  2072  002A                     __end_of__initialization:	
  2073  002A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2074  002B  0020               	movlb	0
  2075  002C  318A  2ADE         	ljmp	_main	;jump to C main() function
  2076                           
  2077                           	psect	bssBANK1
  2078  00E7                     __pbssBANK1:	
  2079  00E7                     _status:	
  2080  00E7                     	ds	2
  2081  00E9                     _TXPacket:	
  2082  00E9                     	ds	2
  2083  00EB                     _sleepLoop:	
  2084  00EB                     	ds	1
  2085                           
  2086                           	psect	dataBANK1
  2087  00EC                     __pdataBANK1:	
  2088  00EC                     _romData:	
  2089  00EC                     	ds	1
  2090                           
  2091                           	psect	bssBANK2
  2092  0151                     __pbssBANK2:	
  2093  0151                     _counter:	
  2094  0151                     	ds	4
  2095  0155                     ftoa@buf:	
  2096  0155                     	ds	17
  2097                           
<<<<<<< HEAD
  2098                           	psect	bssBANK3
  2099  01A0                     __pbssBANK3:	
  2100  01A0                     _RXPacket:	
  2101  01A0                     	ds	33
  2102  01C1                     _romDataMap:	
  2103  01C1                     	ds	28
  2104                           
  2105                           	psect	clrtext
  2106  07FA                     clear_ram0:	
  2107                           ;	Called with FSR0 containing the base address, and
  2108                           ;	WREG with the size to clear
  2109                           
  2110  07FA  0064               	clrwdt	;clear the watchdog before getting into this loop
  2111  07FB                     clrloop0:	
  2112  07FB  0180               	clrf	0	;clear RAM location pointed to by FSR
  2113  07FC  3101               	addfsr 0,1
  2114  07FD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2115  07FE  2FFB               	goto	clrloop0	;have we reached the end yet?
  2116  07FF  3400               	retlw	0	;all done for this memory range, return
  2117                           
  2118                           	psect	cstackBANK2
  2119  0120                     __pcstackBANK2:	
  2120  0120                     loop@vt:	
  2121                           
  2122                           ; 3 bytes @ 0x0
  2123  0120                     	ds	3
  2124  0123                     loop@ta:	
  2125                           
  2126                           ; 3 bytes @ 0x3
  2127  0123                     	ds	3
  2128  0126                     _loop$1972:	
  2129                           
  2130                           ; 3 bytes @ 0x6
  2131  0126                     	ds	3
  2132  0129                     _loop$1973:	
  2133                           
  2134                           ; 3 bytes @ 0x9
  2135  0129                     	ds	3
  2136  012C                     loop@rfSetup:	
  2137                           
  2138                           ; 1 bytes @ 0xC
  2139  012C                     	ds	1
  2140  012D                     _loop$1971:	
=======
  2098                           	psect	stringtext15
  2099  18BE                     __pstringtext15:	
  2100  18BE                     STR_7:	
  2101  18BE  3454               	retlw	84	;'T'
  2102  18BF  3445               	retlw	69	;'E'
  2103  18C0  344D               	retlw	77	;'M'
  2104  18C1  3450               	retlw	80	;'P'
  2105  18C2  3400               	retlw	0
  2106                           
  2107                           	psect	stringtext16
  2108  18C3                     __pstringtext16:	
  2109  18C3                     STR_3:	
  2110  18C3  3456               	retlw	86	;'V'
  2111  18C4  3442               	retlw	66	;'B'
  2112  18C5  3441               	retlw	65	;'A'
  2113  18C6  3454               	retlw	84	;'T'
  2114  18C7  3400               	retlw	0
  2115                           
  2116                           	psect	stringtext17
  2117  18C8                     __pstringtext17:	
  2118  18C8                     STR_12:	
  2119  18C8  3442               	retlw	66	;'B'
  2120  18C9  344F               	retlw	79	;'O'
  2121  18CA  344F               	retlw	79	;'O'
  2122  18CB  3454               	retlw	84	;'T'
  2123  18CC  3400               	retlw	0
  2124                           
  2125                           	psect	stringtext18
  2126  18CD                     __pstringtext18:	
  2127  18CD                     STR_11:	
  2128  18CD  3455               	retlw	85	;'U'
  2129  18CE  3448               	retlw	72	;'H'
  2130  18CF  3431               	retlw	49	;'1'
  2131  18D0  3400               	retlw	0
  2132                           
  2133                           	psect	stringtext19
  2134  0000                     __pstringtext19:	
  2135                           
  2136                           ; #config settings
  2137  0000                     
  2138                           	psect	cinit
  2139  0011                     start_initialization:	
  2140  0011                     __initialization:	
>>>>>>> 1d4db504068e8c8c8cdf720102f8bcd4a3c081ef
  2141                           
  2142                           ; 3 bytes @ 0xD
  2143  012D                     	ds	3
  2144  0130                     loop@packet:	
  2145                           
  2146                           ; 33 bytes @ 0x10
  2147  0130                     	ds	33
  2148                           
  2149                           	psect	cstackBANK1
  2150  00A0                     __pcstackBANK1:	
  2151  00A0                     ___fttol@sign1:	
  2152                           
  2153                           ; 1 bytes @ 0x0
  2154  00A0                     	ds	1
  2155  00A1                     ___fttol@lval:	
  2156                           
  2157                           ; 4 bytes @ 0x1
  2158  00A1                     	ds	4
  2159  00A5                     ___fttol@exp1:	
  2160                           
  2161                           ; 1 bytes @ 0x5
  2162  00A5                     	ds	1
  2163  00A6                     ?_ftoa:	
  2164  00A6                     ftoa@f:	
  2165                           ; 1 bytes @ 0x6
  2166                           
  2167                           
  2168                           ; 3 bytes @ 0x6
  2169  00A6                     	ds	3
  2170  00A9                     ftoa@status:	
  2171                           
  2172                           ; 1 bytes @ 0x9
  2173  00A9                     	ds	1
  2174  00AA                     ftoa@rem:	
  2175                           
  2176                           ; 4 bytes @ 0xA
  2177  00AA                     	ds	4
  2178  00AE                     ftoa@l:	
  2179                           
  2180                           ; 4 bytes @ 0xE
  2181  00AE                     	ds	4
  2182  00B2                     ftoa@cp:	
  2183                           
  2184                           ; 1 bytes @ 0x12
  2185  00B2                     	ds	1
  2186  00B3                     ?_strcat:	
  2187  00B3                     strcat@to:	
  2188                           ; 2 bytes @ 0x13
  2189                           
  2190                           
  2191                           ; 2 bytes @ 0x13
  2192  00B3                     	ds	2
  2193  00B5                     strcat@from:	
  2194                           
  2195                           ; 2 bytes @ 0x15
  2196  00B5                     	ds	2
  2197  00B7                     strcat@cp:	
  2198                           
  2199                           ; 2 bytes @ 0x17
  2200  00B7                     	ds	2
  2201  00B9                     ?_sendMessage:	
  2202  00B9                     sendMessage@packet:	
  2203                           ; 1 bytes @ 0x19
  2204                           
  2205                           
  2206                           ; 2 bytes @ 0x19
  2207  00B9                     	ds	2
  2208  00BB                     sendMessage@topic:	
  2209                           
  2210                           ; 2 bytes @ 0x1B
  2211  00BB                     	ds	2
  2212  00BD                     sendMessage@value:	
  2213                           
  2214                           ; 3 bytes @ 0x1D
  2215  00BD                     	ds	3
  2216  00C0                     ??_sendMessage:	
  2217                           
  2218                           ; 1 bytes @ 0x20
  2219  00C0                     	ds	1
  2220  00C1                     sendMessage@status:	
  2221                           
  2222                           ; 2 bytes @ 0x21
  2223  00C1                     	ds	2
  2224  00C3                     ??_loop:	
  2225                           
  2226                           ; 1 bytes @ 0x23
  2227  00C3                     	ds	1
  2228  00C4                     ??_main:	
  2229                           
  2230                           ; 1 bytes @ 0x24
  2231  00C4                     	ds	1
  2232  00C5                     main@pipe:	
  2233                           
  2234                           ; 1 bytes @ 0x25
  2235  00C5                     	ds	1
  2236  00C6                     main@packet:	
  2237                           
  2238                           ; 33 bytes @ 0x26
  2239  00C6                     	ds	33
  2240                           
  2241                           	psect	cstackCOMMON
  2242  0070                     __pcstackCOMMON:	
  2243  0070                     ?_isdigit:	
  2244  0070                     ?_nrf24l01ISR:	
  2245                           ; 1 bit 
  2246                           
  2247  0070                     ?_nrf24l01SetRXMode:	
  2248                           ; 1 bytes @ 0x0
  2249                           
  2250  0070                     ?_nrf24l01Init:	
  2251                           ; 1 bytes @ 0x0
  2252                           
  2253  0070                     ?_nrf24l01SetTXPipe:	
  2254                           ; 1 bytes @ 0x0
  2255                           
  2256  0070                     ?_nrf24l01SetRXPipe:	
  2257                           ; 1 bytes @ 0x0
  2258                           
  2259  0070                     ?_nrf24l01Service:	
  2260                           ; 1 bytes @ 0x0
  2261                           
  2262  0070                     ?_nrf24l01CELow:	
  2263                           ; 1 bytes @ 0x0
  2264                           
  2265  0070                     ??_nrf24l01CELow:	
  2266                           ; 1 bytes @ 0x0
  2267                           
  2268  0070                     ?_nrf24l01CEHigh:	
  2269                           ; 1 bytes @ 0x0
  2270                           
  2271  0070                     ??_nrf24l01CEHigh:	
  2272                           ; 1 bytes @ 0x0
  2273                           
  2274  0070                     ?_nrf24l01CSLow:	
  2275                           ; 1 bytes @ 0x0
  2276                           
  2277  0070                     ??_nrf24l01CSLow:	
  2278                           ; 1 bytes @ 0x0
  2279                           
  2280  0070                     ?_nrf24l01CSHigh:	
  2281                           ; 1 bytes @ 0x0
  2282                           
  2283  0070                     ??_nrf24l01CSHigh:	
  2284                           ; 1 bytes @ 0x0
  2285                           
  2286  0070                     ?_nrf24l01InterfaceInit:	
  2287                           ; 1 bytes @ 0x0
  2288                           
  2289  0070                     ?_nrf24l01SPISend:	
  2290                           ; 1 bytes @ 0x0
  2291                           
  2292  0070                     ??_nrf24l01SPISend:	
  2293                           ; 1 bytes @ 0x0
  2294                           
  2295  0070                     ?_nrf24l01SPIStart:	
  2296                           ; 1 bytes @ 0x0
  2297                           
  2298  0070                     ??_nrf24l01SPIStart:	
  2299                           ; 1 bytes @ 0x0
  2300                           
  2301  0070                     ?_nrf24l01SPIEnd:	
  2302                           ; 1 bytes @ 0x0
  2303                           
  2304  0070                     ??_nrf24l01SPIEnd:	
  2305                           ; 1 bytes @ 0x0
  2306                           
  2307  0070                     ?_enableInterrupts:	
  2308                           ; 1 bytes @ 0x0
  2309                           
  2310  0070                     ??_enableInterrupts:	
  2311                           ; 1 bytes @ 0x0
  2312                           
  2313  0070                     ?_ISR:	
  2314                           ; 1 bytes @ 0x0
  2315                           
  2316  0070                     ?_doWDTSleep:	
  2317                           ; 1 bytes @ 0x0
  2318                           
  2319  0070                     ?_loop:	
  2320                           ; 1 bytes @ 0x0
  2321                           
  2322  0070                     ?_nrf24l01GetPipe:	
  2323                           ; 1 bytes @ 0x0
  2324                           
  2325  0070                     ?_main:	
  2326                           ; 1 bytes @ 0x0
  2327                           
  2328  0070                     ?_nrf24l01InitRegisters:	
  2329                           ; 1 bytes @ 0x0
  2330                           
  2331  0070                     ?i1_nrf24l01SetRXMode:	
  2332                           ; 1 bytes @ 0x0
  2333                           
  2334  0070                     ?i1_nrf24l01Service:	
  2335                           ; 1 bytes @ 0x0
  2336                           
  2337  0070                     ?i1_memset:	
  2338                           ; 1 bytes @ 0x0
  2339                           
  2340  0070                     ?i1_strlen:	
  2341                           ; 1 bytes @ 0x0
  2342                           
  2343  0070                     nrf24l01SPISend@data:	
  2344                           ; 2 bytes @ 0x0
  2345                           
  2346  0070                     enableInterrupts@enable:	
  2347                           ; 1 bytes @ 0x0
  2348                           
  2349  0070                     i1memset@c:	
  2350                           ; 1 bytes @ 0x0
  2351                           
  2352  0070                     i1strlen@s:	
  2353                           ; 2 bytes @ 0x0
  2354                           
  2355                           
  2356                           ; 2 bytes @ 0x0
  2357  0070                     	ds	1
  2358  0071                     ?i1_nrf24l01Send:	
  2359  0071                     i1nrf24l01Send@data:	
  2360                           ; 1 bytes @ 0x1
  2361                           
  2362                           
  2363                           ; 1 bytes @ 0x1
  2364  0071                     	ds	1
  2365  0072                     ??i1_nrf24l01Send:	
  2366  0072                     ??i1_strlen:	
  2367                           ; 1 bytes @ 0x2
  2368                           
  2369  0072                     i1memset@n:	
  2370                           ; 1 bytes @ 0x2
  2371                           
  2372                           
  2373                           ; 2 bytes @ 0x2
  2374  0072                     	ds	1
  2375  0073                     i1nrf24l01Send@command:	
  2376                           
  2377                           ; 1 bytes @ 0x3
  2378  0073                     	ds	1
  2379  0074                     ??i1_nrf24l01SetRXMode:	
  2380  0074                     ??i1_memset:	
  2381                           ; 1 bytes @ 0x4
  2382                           
  2383  0074                     i1strlen@cp:	
  2384                           ; 1 bytes @ 0x4
  2385                           
  2386                           
  2387                           ; 2 bytes @ 0x4
  2388  0074                     	ds	1
  2389  0075                     i1nrf24l01SetRXMode@config:	
  2390  0075                     i1memset@p1:	
  2391                           ; 1 bytes @ 0x5
  2392                           
  2393                           
  2394                           ; 1 bytes @ 0x5
  2395  0075                     	ds	1
  2396  0076                     i1nrf24l01SetRXMode@rxMode:	
  2397  0076                     i1memset@p:	
  2398                           ; 1 bytes @ 0x6
  2399                           
  2400                           
  2401                           ; 1 bytes @ 0x6
  2402  0076                     	ds	1
  2403  0077                     ??i1_nrf24l01Service:	
  2404                           
  2405                           ; 1 bytes @ 0x7
  2406  0077                     	ds	4
  2407  007B                     i1nrf24l01Service@width:	
  2408                           
  2409                           ; 1 bytes @ 0xB
  2410  007B                     	ds	1
  2411  007C                     i1nrf24l01Service@i:	
  2412                           
  2413                           ; 1 bytes @ 0xC
  2414  007C                     	ds	1
  2415  007D                     ??_nrf24l01ISR:	
  2416                           
  2417                           ; 1 bytes @ 0xD
  2418  007D                     	ds	1
  2419  007E                     ??_ISR:	
  2420                           
  2421                           	psect	cstackBANK0
  2422  0020                     __pcstackBANK0:	
  2423                           ; 1 bytes @ 0xE
  2424                           
  2425  0020                     ?___ftge:	
  2426  0020                     ?_nrf24l01Send:	
  2427                           ; 1 bit 
  2428                           
  2429  0020                     ?_memset:	
  2430                           ; 1 bytes @ 0x0
  2431                           
  2432  0020                     ??_isdigit:	
  2433                           ; 1 bytes @ 0x0
  2434                           
  2435  0020                     ??_nrf24l01InterfaceInit:	
  2436                           ; 1 bytes @ 0x0
  2437                           
  2438  0020                     ??_doWDTSleep:	
  2439                           ; 1 bytes @ 0x0
  2440                           
  2441  0020                     ?___bmul:	
  2442                           ; 1 bytes @ 0x0
  2443                           
  2444  0020                     ?_strcpy:	
  2445                           ; 1 bytes @ 0x0
  2446                           
  2447  0020                     ?_strlen:	
  2448                           ; 2 bytes @ 0x0
  2449                           
  2450  0020                     ?___wmul:	
  2451                           ; 2 bytes @ 0x0
  2452                           
  2453  0020                     ?___lwmod:	
  2454                           ; 2 bytes @ 0x0
  2455                           
  2456  0020                     ?___ftpack:	
  2457                           ; 2 bytes @ 0x0
  2458                           
  2459  0020                     ?___lldiv:	
  2460                           ; 3 bytes @ 0x0
  2461                           
  2462  0020                     nrf24l01Send@data:	
  2463                           ; 4 bytes @ 0x0
  2464                           
  2465  0020                     ___bmul@multiplicand:	
  2466                           ; 1 bytes @ 0x0
  2467                           
  2468  0020                     _isdigit$1728:	
  2469                           ; 1 bytes @ 0x0
  2470                           
  2471  0020                     ___wmul@multiplier:	
  2472                           ; 1 bytes @ 0x0
  2473                           
  2474  0020                     ___lwmod@divisor:	
  2475                           ; 2 bytes @ 0x0
  2476                           
  2477  0020                     memset@c:	
  2478                           ; 2 bytes @ 0x0
  2479                           
  2480  0020                     strcpy@to:	
  2481                           ; 2 bytes @ 0x0
  2482                           
  2483  0020                     strlen@s:	
  2484                           ; 2 bytes @ 0x0
  2485                           
  2486  0020                     ___ftpack@arg:	
  2487                           ; 2 bytes @ 0x0
  2488                           
  2489  0020                     ___ftge@ff1:	
  2490                           ; 3 bytes @ 0x0
  2491                           
  2492  0020                     ___lldiv@divisor:	
  2493                           ; 3 bytes @ 0x0
  2494                           
  2495                           
  2496                           ; 4 bytes @ 0x0
  2497  0020                     	ds	1
  2498  0021                     ??_nrf24l01Send:	
  2499  0021                     ??___bmul:	
  2500                           ; 1 bytes @ 0x1
  2501                           
  2502  0021                     doWDTSleep@wdtps:	
  2503                           ; 1 bytes @ 0x1
  2504                           
  2505  0021                     isdigit@c:	
  2506                           ; 1 bytes @ 0x1
  2507                           
  2508                           
  2509                           ; 1 bytes @ 0x1
  2510  0021                     	ds	1
  2511  0022                     ??_strlen:	
  2512  0022                     nrf24l01Send@command:	
  2513                           ; 1 bytes @ 0x2
  2514                           
  2515  0022                     ___bmul@product:	
  2516                           ; 1 bytes @ 0x2
  2517                           
  2518  0022                     ___wmul@multiplicand:	
  2519                           ; 1 bytes @ 0x2
  2520                           
  2521  0022                     ___lwmod@dividend:	
  2522                           ; 2 bytes @ 0x2
  2523                           
  2524  0022                     memset@n:	
  2525                           ; 2 bytes @ 0x2
  2526                           
  2527  0022                     strcpy@from:	
  2528                           ; 2 bytes @ 0x2
  2529                           
  2530                           
  2531                           ; 2 bytes @ 0x2
  2532  0022                     	ds	1
  2533  0023                     ??_nrf24l01SetRXMode:	
  2534  0023                     ??_nrf24l01SetRXPipe:	
  2535                           ; 1 bytes @ 0x3
  2536                           
  2537  0023                     ___bmul@multiplier:	
  2538                           ; 1 bytes @ 0x3
  2539                           
  2540  0023                     ___ftpack@exp:	
  2541                           ; 1 bytes @ 0x3
  2542                           
  2543  0023                     ___ftge@ff2:	
  2544                           ; 1 bytes @ 0x3
  2545                           
  2546                           
  2547                           ; 3 bytes @ 0x3
  2548  0023                     	ds	1
  2549  0024                     ??_strcpy:	
  2550  0024                     ??_nrf24l01SetTXPipe:	
  2551                           ; 1 bytes @ 0x4
  2552                           
  2553  0024                     ??_memset:	
  2554                           ; 1 bytes @ 0x4
  2555                           
  2556  0024                     ??___wmul:	
  2557                           ; 1 bytes @ 0x4
  2558                           
  2559  0024                     ??___lwmod:	
  2560                           ; 1 bytes @ 0x4
  2561                           
  2562  0024                     nrf24l01SetRXMode@config:	
  2563                           ; 1 bytes @ 0x4
  2564                           
  2565  0024                     ___ftpack@sign:	
  2566                           ; 1 bytes @ 0x4
  2567                           
  2568  0024                     ___wmul@product:	
  2569                           ; 1 bytes @ 0x4
  2570                           
  2571  0024                     strcpy@cp:	
  2572                           ; 2 bytes @ 0x4
  2573                           
  2574  0024                     strlen@cp:	
  2575                           ; 2 bytes @ 0x4
  2576                           
  2577  0024                     ___lldiv@dividend:	
  2578                           ; 2 bytes @ 0x4
  2579                           
  2580                           
  2581                           ; 4 bytes @ 0x4
  2582  0024                     	ds	1
  2583  0025                     ??___ftpack:	
  2584  0025                     nrf24l01SetRXMode@rxMode:	
  2585                           ; 1 bytes @ 0x5
  2586                           
  2587  0025                     nrf24l01SetRXPipe@pipe:	
  2588                           ; 1 bytes @ 0x5
  2589                           
  2590  0025                     ___lwmod@counter:	
  2591                           ; 1 bytes @ 0x5
  2592                           
  2593  0025                     memset@p1:	
  2594                           ; 1 bytes @ 0x5
  2595                           
  2596                           
  2597                           ; 1 bytes @ 0x5
  2598  0025                     	ds	1
  2599  0026                     ?_sleep:	
  2600  0026                     ??_nrf24l01GetPipe:	
  2601                           ; 1 bytes @ 0x6
  2602                           
  2603  0026                     ??___ftge:	
  2604                           ; 1 bytes @ 0x6
  2605                           
  2606  0026                     nrf24l01SetTXPipe@pipe:	
  2607                           ; 1 bytes @ 0x6
  2608                           
  2609  0026                     nrf24l01SetRXPipe@enRXAddr:	
  2610                           ; 1 bytes @ 0x6
  2611                           
  2612  0026                     memset@p:	
  2613                           ; 1 bytes @ 0x6
  2614                           
  2615  0026                     sleep@milliseconds:	
  2616                           ; 1 bytes @ 0x6
  2617                           
  2618                           
  2619                           ; 2 bytes @ 0x6
  2620  0026                     	ds	1
  2621  0027                     ??_nrf24l01Service:	
  2622  0027                     ??_nrf24l01InitRegisters:	
  2623                           ; 1 bytes @ 0x7
  2624                           
  2625                           
  2626                           ; 1 bytes @ 0x7
  2627  0027                     	ds	1
  2628  0028                     ??_sleep:	
  2629  0028                     ??___lldiv:	
  2630                           ; 1 bytes @ 0x8
  2631                           
  2632  0028                     ?___awtoft:	
  2633                           ; 1 bytes @ 0x8
  2634                           
  2635  0028                     ?___lbtoft:	
  2636                           ; 3 bytes @ 0x8
  2637                           
  2638  0028                     ?___lltoft:	
  2639                           ; 3 bytes @ 0x8
  2640                           
  2641  0028                     ?___lwtoft:	
  2642                           ; 3 bytes @ 0x8
  2643                           
  2644  0028                     nrf24l01GetPipe@pipe:	
  2645                           ; 3 bytes @ 0x8
  2646                           
  2647  0028                     ___awtoft@c:	
  2648                           ; 1 bytes @ 0x8
  2649                           
  2650  0028                     ___lwtoft@c:	
  2651                           ; 2 bytes @ 0x8
  2652                           
  2653  0028                     ___lltoft@c:	
  2654                           ; 2 bytes @ 0x8
  2655                           
  2656                           
  2657                           ; 4 bytes @ 0x8
  2658  0028                     	ds	1
  2659  0029                     nrf24l01GetPipe@name:	
  2660  0029                     nrf24l01InitRegisters@channel:	
  2661                           ; 1 bytes @ 0x9
  2662                           
  2663  0029                     ___lldiv@quotient:	
  2664                           ; 1 bytes @ 0x9
  2665                           
  2666                           
  2667                           ; 4 bytes @ 0x9
  2668  0029                     	ds	1
  2669  002A                     nrf24l01GetPipe@i:	
  2670  002A                     nrf24l01InitRegisters@setupAW:	
  2671                           ; 1 bytes @ 0xA
  2672                           
  2673                           
  2674                           ; 1 bytes @ 0xA
  2675  002A                     	ds	1
  2676  002B                     ??___awtoft:	
  2677  002B                     ??___lbtoft:	
  2678                           ; 1 bytes @ 0xB
  2679                           
  2680  002B                     ??___lwtoft:	
  2681                           ; 1 bytes @ 0xB
  2682                           
  2683  002B                     nrf24l01Service@width:	
  2684                           ; 1 bytes @ 0xB
  2685                           
  2686  002B                     nrf24l01InitRegisters@feature:	
  2687                           ; 1 bytes @ 0xB
  2688                           
  2689                           
  2690                           ; 1 bytes @ 0xB
  2691  002B                     	ds	1
  2692  002C                     ??___lltoft:	
  2693  002C                     nrf24l01Service@i:	
  2694                           ; 1 bytes @ 0xC
  2695                           
  2696  002C                     nrf24l01InitRegisters@rfSetup:	
  2697                           ; 1 bytes @ 0xC
  2698                           
  2699                           
  2700                           ; 1 bytes @ 0xC
  2701  002C                     	ds	1
  2702  002D                     ?_nrf24l01SendPacket:	
  2703  002D                     nrf24l01InitRegisters@enAA:	
  2704                           ; 2 bytes @ 0xD
  2705                           
  2706  002D                     ___lldiv@counter:	
  2707                           ; 1 bytes @ 0xD
  2708                           
  2709  002D                     ___awtoft@sign:	
  2710                           ; 1 bytes @ 0xD
  2711                           
  2712  002D                     ___lltoft@exp:	
  2713                           ; 1 bytes @ 0xD
  2714                           
  2715  002D                     nrf24l01SendPacket@txPacket:	
  2716                           ; 1 bytes @ 0xD
  2717                           
  2718                           
  2719                           ; 2 bytes @ 0xD
  2720  002D                     	ds	1
  2721  002E                     ?___ftadd:	
  2722  002E                     ?___llmod:	
  2723                           ; 3 bytes @ 0xE
  2724                           
  2725  002E                     nrf24l01InitRegisters@DynPD:	
  2726                           ; 4 bytes @ 0xE
  2727                           
  2728  002E                     ___ftadd@f1:	
  2729                           ; 1 bytes @ 0xE
  2730                           
  2731  002E                     ___llmod@divisor:	
  2732                           ; 3 bytes @ 0xE
  2733                           
  2734                           
  2735                           ; 4 bytes @ 0xE
  2736  002E                     	ds	1
  2737  002F                     ??_nrf24l01SendPacket:	
  2738  002F                     nrf24l01InitRegisters@config:	
  2739                           ; 1 bytes @ 0xF
  2740                           
  2741  002F                     ___lbtoft@c:	
  2742                           ; 1 bytes @ 0xF
  2743                           
  2744                           
  2745                           ; 1 bytes @ 0xF
  2746  002F                     	ds	1
  2747  0030                     nrf24l01InitRegisters@i:	
  2748                           
  2749                           ; 2 bytes @ 0x10
  2750  0030                     	ds	1
  2751  0031                     ___ftadd@f2:	
  2752                           
  2753                           ; 3 bytes @ 0x11
  2754  0031                     	ds	1
  2755  0032                     ??_nrf24l01Init:	
  2756  0032                     ___llmod@dividend:	
  2757                           ; 1 bytes @ 0x12
  2758                           
  2759                           
  2760                           ; 4 bytes @ 0x12
  2761  0032                     	ds	2
  2762  0034                     ??___ftadd:	
  2763                           
  2764                           ; 1 bytes @ 0x14
  2765  0034                     	ds	2
  2766  0036                     ??___llmod:	
  2767                           
  2768                           ; 1 bytes @ 0x16
  2769  0036                     	ds	1
  2770  0037                     ___llmod@counter:	
  2771                           
  2772                           ; 1 bytes @ 0x17
  2773  0037                     	ds	1
  2774  0038                     ?_sprintf:	
  2775  0038                     ___ftadd@sign:	
  2776                           ; 2 bytes @ 0x18
  2777                           
  2778  0038                     sprintf@f:	
  2779                           ; 1 bytes @ 0x18
  2780                           
  2781                           
  2782                           ; 2 bytes @ 0x18
  2783  0038                     	ds	1
  2784  0039                     ___ftadd@exp2:	
  2785                           
  2786                           ; 1 bytes @ 0x19
  2787  0039                     	ds	1
  2788  003A                     ___ftadd@exp1:	
  2789                           
  2790                           ; 1 bytes @ 0x1A
  2791  003A                     	ds	1
  2792  003B                     ?___ftdiv:	
  2793  003B                     ?___ftsub:	
  2794                           ; 3 bytes @ 0x1B
  2795                           
  2796  003B                     ___ftdiv@f2:	
  2797                           ; 3 bytes @ 0x1B
  2798                           
  2799  003B                     ___ftsub@f2:	
  2800                           ; 3 bytes @ 0x1B
  2801                           
  2802                           
  2803                           ; 3 bytes @ 0x1B
  2804  003B                     	ds	3
  2805  003E                     ___ftdiv@f1:	
  2806  003E                     ___ftsub@f1:	
  2807                           ; 3 bytes @ 0x1E
  2808                           
  2809                           
  2810                           ; 3 bytes @ 0x1E
  2811  003E                     	ds	3
  2812  0041                     ??___ftdiv:	
  2813  0041                     ??___ftsub:	
  2814                           ; 1 bytes @ 0x21
  2815                           
  2816                           
  2817                           ; 1 bytes @ 0x21
  2818  0041                     	ds	1
  2819  0042                     ??_sprintf:	
  2820                           
  2821                           ; 1 bytes @ 0x22
  2822  0042                     	ds	3
  2823  0045                     ___ftdiv@cntr:	
  2824                           
  2825                           ; 1 bytes @ 0x25
  2826  0045                     	ds	1
  2827  0046                     ___ftdiv@f3:	
  2828                           
  2829                           ; 3 bytes @ 0x26
  2830  0046                     	ds	2
  2831  0048                     sprintf@flag:	
  2832                           
  2833                           ; 1 bytes @ 0x28
  2834  0048                     	ds	1
  2835  0049                     sprintf@ap:	
  2836  0049                     ___ftdiv@exp:	
  2837                           ; 1 bytes @ 0x29
  2838                           
  2839                           
  2840                           ; 1 bytes @ 0x29
  2841  0049                     	ds	1
  2842  004A                     ___ftdiv@sign:	
  2843  004A                     sprintf@val:	
  2844                           ; 1 bytes @ 0x2A
  2845                           
  2846                           
  2847                           ; 4 bytes @ 0x2A
  2848  004A                     	ds	1
  2849  004B                     ?_getADCValue:	
  2850                           
  2851                           ; 3 bytes @ 0x2B
  2852  004B                     	ds	3
  2853  004E                     ??_getADCValue:	
  2854  004E                     sprintf@sp:	
  2855                           ; 1 bytes @ 0x2E
  2856                           
  2857                           
  2858                           ; 1 bytes @ 0x2E
  2859  004E                     	ds	1
  2860  004F                     sprintf@width:	
  2861                           
  2862                           ; 2 bytes @ 0x2F
  2863  004F                     	ds	2
  2864  0051                     getADCValue@adcLoop:	
  2865  0051                     sprintf@prec:	
  2866                           ; 2 bytes @ 0x31
  2867                           
  2868                           
  2869                           ; 2 bytes @ 0x31
  2870  0051                     	ds	2
  2871  0053                     getADCValue@channel:	
  2872  0053                     sprintf@c:	
  2873                           ; 1 bytes @ 0x33
  2874                           
  2875                           
  2876                           ; 1 bytes @ 0x33
  2877  0053                     	ds	1
  2878  0054                     getADCValue@adcSum:	
  2879                           
  2880                           ; 3 bytes @ 0x34
  2881  0054                     	ds	3
  2882  0057                     ?___ftmul:	
  2883  0057                     ?___ftneg:	
  2884                           ; 3 bytes @ 0x37
  2885                           
  2886  0057                     ___ftmul@f1:	
  2887                           ; 3 bytes @ 0x37
  2888                           
  2889  0057                     ___ftneg@f1:	
  2890                           ; 3 bytes @ 0x37
  2891                           
  2892                           
  2893                           ; 3 bytes @ 0x37
  2894  0057                     	ds	3
  2895  005A                     ??___ftneg:	
  2896  005A                     ___ftmul@f2:	
  2897                           ; 1 bytes @ 0x3A
  2898                           
  2899                           
  2900                           ; 3 bytes @ 0x3A
  2901  005A                     	ds	3
  2902  005D                     ??___ftmul:	
  2903                           
  2904                           ; 1 bytes @ 0x3D
  2905  005D                     	ds	4
  2906  0061                     ___ftmul@exp:	
  2907                           
  2908                           ; 1 bytes @ 0x41
  2909  0061                     	ds	1
  2910  0062                     ___ftmul@f3_as_product:	
  2911                           
  2912                           ; 3 bytes @ 0x42
  2913  0062                     	ds	3
  2914  0065                     ___ftmul@cntr:	
  2915                           
  2916                           ; 1 bytes @ 0x45
  2917  0065                     	ds	1
  2918  0066                     ___ftmul@sign:	
  2919                           
  2920                           ; 1 bytes @ 0x46
  2921  0066                     	ds	1
  2922  0067                     ?___fttol:	
  2923  0067                     ___fttol@f1:	
  2924                           ; 4 bytes @ 0x47
  2925                           
  2926                           
  2927                           ; 3 bytes @ 0x47
  2928  0067                     	ds	4
  2929  006B                     ??___fttol:	
  2930                           
  2931                           ; 1 bytes @ 0x4B
  2932  006B                     	ds	4
  2933  006F                     ??_ftoa:	
  2934                           
  2935                           ; 1 bytes @ 0x4F
  2936  006F                     	ds	1
  2937  0070                     ??_strcat:	
  2938                           
  2939                           	psect	maintext
  2940  0ADE                     __pmaintext:	
  2941                           ; 1 bytes @ 0x50
  2942 ;;
  2943 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2944 ;;
  2945 ;; *************** function _main *****************
  2946 ;; Defined at:
  2947 ;;		line 180 in file "main.c"
  2948 ;; Parameters:    Size  Location     Type
  2949 ;;		None
  2950 ;; Auto vars:     Size  Location     Type
  2951 ;;  packet         33   38[BANK1 ] struct .
  2952 ;;  pipe            1   37[BANK1 ] unsigned char 
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  1    wreg      void 
  2955 ;; Registers used:
  2956 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2957 ;; Tracked objects:
  2958 ;;		On entry : B1F/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2963 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  2964 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  2965 ;;      Totals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  2966 ;;Total ram usage:       35 bytes
  2967 ;; Hardware stack levels required when called:   15
  2968 ;; This function calls:
  2969 ;;		___lwtoft
  2970 ;;		_loop
  2971 ;;		_nrf24l01GetPipe
  2972 ;;		_nrf24l01Init
  2973 ;;		_nrf24l01SetRXPipe
  2974 ;;		_nrf24l01SetTXPipe
  2975 ;;		_sendMessage
  2976 ;;		_strcpy
  2977 ;; This function is called by:
  2978 ;;		Startup code after reset
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           
  2983                           ;psect for function _main
  2984  0ADE                     _main:	
  2985                           
  2986                           ;main.c: 183: ANSELA = 0x00;
  2987                           
  2988                           ;incstack = 0
  2989                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2990  0ADE  0023               	movlb	3	; select bank3
  2991  0ADF  018C               	clrf	12	;volatile
  2992                           
  2993                           ;main.c: 184: ANSELC = 0x00;
  2994  0AE0  018E               	clrf	14	;volatile
  2995                           
  2996                           ;main.c: 186: ODCONA = 0x00;
  2997  0AE1  0025               	movlb	5	; select bank5
  2998  0AE2  018C               	clrf	12	;volatile
  2999                           
  3000                           ;main.c: 187: ODCONC = 0x00;
  3001  0AE3  018E               	clrf	14	;volatile
  3002                           
  3003                           ;main.c: 192: INLVLA = 0x00;
  3004  0AE4  0027               	movlb	7	; select bank7
  3005  0AE5  018C               	clrf	12	;volatile
  3006                           
  3007                           ;main.c: 193: INLVLC = 0x00;
  3008  0AE6  018E               	clrf	14	;volatile
  3009                           
  3010                           ;main.c: 195: WPUA = 0x00;
  3011  0AE7  0024               	movlb	4	; select bank4
  3012  0AE8  018C               	clrf	12	;volatile
  3013                           
  3014                           ;main.c: 196: WPUC = 0x00;
  3015  0AE9  018E               	clrf	14	;volatile
  3016                           
  3017                           ;main.c: 198: TRISCbits.TRISC5 = 0;
  3018  0AEA  0021               	movlb	1	; select bank1
  3019  0AEB  128E               	bcf	14,5	;volatile
  3020                           
  3021                           ;main.c: 199: TRISCbits.TRISC4 = 0;
  3022  0AEC  120E               	bcf	14,4	;volatile
  3023                           
  3024                           ;main.c: 201: PORTCbits.RC4 = 0;
  3025  0AED  0020               	movlb	0	; select bank0
  3026  0AEE  120E               	bcf	14,4	;volatile
  3027                           
  3028                           ;main.c: 208: INTCONbits.PEIE = 0;
  3029  0AEF  130B               	bcf	11,6	;volatile
  3030                           
  3031                           ;main.c: 209: INTCONbits.GIE = 0;
  3032  0AF0  138B               	bcf	11,7	;volatile
  3033                           
  3034                           ;main.c: 211: OSCCON1bits.NOSC = 0b000;
  3035  0AF1  308F               	movlw	-113
  3036  0AF2  0032               	movlb	18	; select bank18
  3037  0AF3  0599               	andwf	25,f	;volatile
  3038                           
  3039                           ;main.c: 212: OSCCON1bits.NDIV = 0b000;
  3040  0AF4  30F0               	movlw	-16
  3041  0AF5  0599               	andwf	25,f	;volatile
  3042                           
  3043                           ;main.c: 214: _delay((unsigned long)((10)*(32000000/4000.0)));
  3044  0AF6  3068               	movlw	104
  3045  0AF7  0021               	movlb	1	; select bank1
  3046  0AF8  00C4               	movwf	??_main^(0+128)
  3047  0AF9  30E4               	movlw	228
  3048  0AFA                     u3397:	
  3049  0AFA  0B89               	decfsz	9,f
  3050  0AFB  2AFA               	goto	u3397
  3051  0AFC  0BC4               	decfsz	??_main^(0+128),f
  3052  0AFD  2AFA               	goto	u3397
  3053  0AFE  0000               	nop
  3054                           
  3055                           ;main.c: 218: strcpy(romData->name, "UWT");
  3056  0AFF  0021               	movlb	1	; select bank1
  3057  0B00  086C               	movf	_romData^(0+128),w
  3058  0B01  3E01               	addlw	1
  3059  0B02  0020               	movlb	0	; select bank0
  3060  0B03  00A0               	movwf	strcpy@to
  3061  0B04  3001               	movlw	1
  3062  0B05  00A1               	movwf	strcpy@to+1
  3063  0B06  3079               	movlw	low (STR_12| (0+32768))
  3064  0B07  00A2               	movwf	strcpy@from
  3065  0B08  3098               	movlw	high (STR_12| (0+32768))
  3066  0B09  00A3               	movwf	strcpy@from+1
  3067  0B0A  3195  25EB  318A   	fcall	_strcpy
  3068                           
  3069                           ;main.c: 220: nrf24l01Init();
  3070  0B0D  3189  2115  318A   	fcall	_nrf24l01Init
  3071                           
  3072                           ;main.c: 222: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3073  0B10  0021               	movlb	1	; select bank1
  3074  0B11  086C               	movf	_romData^(0+128),w
  3075  0B12  3E01               	addlw	1
  3076  0B13  3197  27C8  318A   	fcall	_nrf24l01GetPipe
  3077  0B16  0021               	movlb	1	; select bank1
  3078  0B17  00C4               	movwf	??_main^(0+128)
  3079  0B18  0844               	movf	??_main^(0+128),w
  3080  0B19  00C5               	movwf	main@pipe^(0+128)
  3081                           
  3082                           ;main.c: 223: nrf24l01SetTXPipe(pipe);
  3083  0B1A  0845               	movf	main@pipe^(0+128),w
  3084  0B1B  3187  27B6  318A   	fcall	_nrf24l01SetTXPipe
  3085                           
  3086                           ;main.c: 224: nrf24l01SetRXPipe(pipe);
  3087  0B1E  0021               	movlb	1	; select bank1
  3088  0B1F  0845               	movf	main@pipe^(0+128),w
  3089  0B20  3196  26B7  318A   	fcall	_nrf24l01SetRXPipe
  3090                           
  3091                           ;main.c: 228: ADCON0bits.ADON = 0;
  3092  0B23  0021               	movlb	1	; select bank1
  3093  0B24  101D               	bcf	29,0	;volatile
  3094                           
  3095                           ;main.c: 231: PORTAbits.RA4 = 0;
  3096  0B25  0020               	movlb	0	; select bank0
  3097  0B26  120C               	bcf	12,4	;volatile
  3098                           
  3099                           ;main.c: 232: TRISAbits.TRISA4 = 1;
  3100  0B27  0021               	movlb	1	; select bank1
  3101  0B28  160C               	bsf	12,4	;volatile
  3102                           
  3103                           ;main.c: 233: WPUAbits.WPUA4 = 0;
  3104  0B29  0024               	movlb	4	; select bank4
  3105  0B2A  120C               	bcf	12,4	;volatile
  3106                           
  3107                           ;main.c: 234: ODCONAbits.ODCA4 = 1;
  3108  0B2B  0025               	movlb	5	; select bank5
  3109  0B2C  160C               	bsf	12,4	;volatile
  3110                           
  3111                           ;main.c: 235: ANSELAbits.ANSA4 = 1;
  3112  0B2D  0023               	movlb	3	; select bank3
  3113  0B2E  160C               	bsf	12,4	;volatile
  3114                           
  3115                           ;main.c: 238: ANSELCbits.ANSC3 = 1;
  3116  0B2F  158E               	bsf	14,3	;volatile
  3117                           
  3118                           ;main.c: 239: TRISCbits.TRISC3 = 1;
  3119  0B30  0021               	movlb	1	; select bank1
  3120  0B31  158E               	bsf	14,3	;volatile
  3121                           
  3122                           ;main.c: 242: FVRCONbits.TSEN = 1;
  3123  0B32  0022               	movlb	2	; select bank2
  3124  0B33  1697               	bsf	23,5	;volatile
  3125                           
  3126                           ;main.c: 243: FVRCONbits.TSRNG = 1;
  3127  0B34  1617               	bsf	23,4	;volatile
  3128                           
  3129                           ;main.c: 246: FVRCONbits.FVREN = 0;
  3130  0B35  1397               	bcf	23,7	;volatile
  3131                           
  3132                           ;main.c: 247: FVRCONbits.ADFVR = 0b10;
  3133  0B36  0817               	movf	23,w	;volatile
  3134  0B37  39FC               	andlw	-4
  3135  0B38  3802               	iorlw	2
  3136  0B39  0097               	movwf	23	;volatile
  3137                           
  3138                           ;main.c: 249: ADCON1bits.ADCS = 0b111;
  3139  0B3A  3070               	movlw	112
  3140  0B3B  0021               	movlb	1	; select bank1
  3141  0B3C  049E               	iorwf	30,f	;volatile
  3142                           
  3143                           ;main.c: 250: ADCON1bits.ADFM = 1;
  3144  0B3D  179E               	bsf	30,7	;volatile
  3145                           
  3146                           ;main.c: 251: ADCON1bits.ADPREF = 0b11;
  3147  0B3E  3003               	movlw	3
  3148  0B3F  049E               	iorwf	30,f	;volatile
  3149                           
  3150                           ;main.c: 252: ADCON1bits.ADNREF = 0b00;
  3151  0B40  111E               	bcf	30,2	;volatile
  3152                           
  3153                           ;main.c: 255: ADCON0bits.CHS = 3;
  3154  0B41  081D               	movf	29,w	;volatile
  3155  0B42  3903               	andlw	-253
  3156  0B43  380C               	iorlw	12
  3157  0B44  009D               	movwf	29	;volatile
  3158                           
  3159                           ;main.c: 260: TRISAbits.TRISA2 = 1;
  3160  0B45  150C               	bsf	12,2	;volatile
  3161                           
  3162                           ;main.c: 261: PIE0bits.INTE = 1;
  3163  0B46  1410               	bsf	16,0	;volatile
  3164                           
  3165                           ;main.c: 262: INTCONbits.INTEDG = 0;
  3166  0B47  100B               	bcf	11,0	;volatile
  3167                           
  3168                           ;main.c: 265: TRISAbits.TRISA5 = 0;
  3169  0B48  128C               	bcf	12,5	;volatile
  3170                           
  3171                           ;main.c: 266: PORTAbits.RA5 = 0;
  3172  0B49  0020               	movlb	0	; select bank0
  3173  0B4A  128C               	bcf	12,5	;volatile
  3174                           
  3175                           ;main.c: 269: INTCONbits.PEIE = 1;
  3176  0B4B  170B               	bsf	11,6	;volatile
  3177                           
  3178                           ;main.c: 270: INTCONbits.GIE = 1;
  3179  0B4C  178B               	bsf	11,7	;volatile
  3180                           
  3181                           ;main.c: 272: nrf24l01Packet_t packet;;main.c: 274: sendMessage(&packet, "BOOT", romData
      +                          ->bootMode);
  3182  0B4D  30C6               	movlw	low main@packet
  3183  0B4E  0021               	movlb	1	; select bank1
  3184  0B4F  00B9               	movwf	sendMessage@packet^(0+128)
  3185  0B50  3000               	movlw	high main@packet
  3186  0B51  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  3187  0B52  3074               	movlw	low (STR_13| (0+32768))
  3188  0B53  00BB               	movwf	sendMessage@topic^(0+128)
  3189  0B54  3098               	movlw	high (STR_13| (0+32768))
  3190  0B55  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  3191  0B56  086C               	movf	_romData^(0+128),w
  3192  0B57  3E11               	addlw	17
  3193  0B58  0086               	movwf	6
  3194  0B59  3001               	movlw	1	; select bank2/3
  3195  0B5A  0087               	movwf	7
  3196  0B5B  3F40               	moviw [0]fsr1
  3197  0B5C  0020               	movlb	0	; select bank0
  3198  0B5D  00A8               	movwf	___lwtoft@c
  3199  0B5E  3F41               	moviw [1]fsr1
  3200  0B5F  00A9               	movwf	___lwtoft@c+1
  3201  0B60  3195  256E  318A   	fcall	___lwtoft
  3202  0B63  0020               	movlb	0	; select bank0
  3203  0B64  0828               	movf	?___lwtoft,w
  3204  0B65  0021               	movlb	1	; select bank1
  3205  0B66  00BD               	movwf	sendMessage@value^(0+128)
  3206  0B67  0020               	movlb	0	; select bank0
  3207  0B68  0829               	movf	?___lwtoft+1,w
  3208  0B69  0021               	movlb	1	; select bank1
  3209  0B6A  00BE               	movwf	(sendMessage@value+1)^(0+128)
  3210  0B6B  0020               	movlb	0	; select bank0
  3211  0B6C  082A               	movf	?___lwtoft+2,w
  3212  0B6D  0021               	movlb	1	; select bank1
  3213  0B6E  00BF               	movwf	(sendMessage@value+2)^(0+128)
  3214  0B6F  318A  2268  318A   	fcall	_sendMessage
  3215  0B72                     l3408:	
  3216                           ;main.c: 276: while(1){
  3217                           
  3218                           
  3219                           ;main.c: 277: loop();
  3220  0B72  3180  202E  318A   	fcall	_loop
  3221  0B75  2B72               	goto	l3408
  3222  0B76                     __end_of_main:	
  3223                           ;main.c: 278: };main.c: 280: return;
  3224                           
  3225                           
  3226                           	psect	text1
  3227  0915                     __ptext1:	
  3228 ;; *************** function _nrf24l01Init *****************
  3229 ;; Defined at:
  3230 ;;		line 494 in file "nrf24l01.c"
  3231 ;; Parameters:    Size  Location     Type
  3232 ;;		None
  3233 ;; Auto vars:     Size  Location     Type
  3234 ;;		None
  3235 ;; Return value:  Size  Location     Type
  3236 ;;                  1    wreg      void 
  3237 ;; Registers used:
  3238 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3239 ;; Tracked objects:
  3240 ;;		On entry : 0/0
  3241 ;;		On exit  : 0/0
  3242 ;;		Unchanged: 0/0
  3243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
<<<<<<< HEAD
  3244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3246 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3247 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3248 ;;Total ram usage:        2 bytes
  3249 ;; Hardware stack levels used:    1
  3250 ;; Hardware stack levels required when called:   12
  3251 ;; This function calls:
  3252 ;;		_nrf24l01CEHigh
  3253 ;;		_nrf24l01CELow
  3254 ;;		_nrf24l01InitRegisters
  3255 ;;		_nrf24l01InterfaceInit
  3256 ;; This function is called by:
  3257 ;;		_main
  3258 ;; This function uses a non-reentrant model
  3259 ;;
  3260                           
  3261                           
  3262                           ;psect for function _nrf24l01Init
  3263  0915                     _nrf24l01Init:	
  3264                           
  3265                           ;nrf24l01.c: 497: nrf24l01InterfaceInit();
  3266                           
  3267                           ;incstack = 0
  3268                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3269  0915  3196  263E  3189   	fcall	_nrf24l01InterfaceInit
  3270                           
  3271                           ;nrf24l01.c: 502: nrf24l01CELow();
  3272  0918  3195  2517  3189   	fcall	_nrf24l01CELow
  3273                           
  3274                           ;nrf24l01.c: 504: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3275  091B  3003               	movlw	3
  3276  091C  0020               	movlb	0	; select bank0
  3277  091D  00B3               	movwf	??_nrf24l01Init+1
  3278  091E  3008               	movlw	8
  3279  091F  00B2               	movwf	??_nrf24l01Init
  3280  0920  3077               	movlw	119
  3281  0921                     u3407:	
  3282  0921  0B89               	decfsz	9,f
  3283  0922  2921               	goto	u3407
  3284  0923  0BB2               	decfsz	??_nrf24l01Init,f
  3285  0924  2921               	goto	u3407
  3286  0925  0BB3               	decfsz	??_nrf24l01Init+1,f
  3287  0926  2921               	goto	u3407
  3288                           
  3289                           ;nrf24l01.c: 506: nrf24l01InitRegisters();
  3290  0927  3186  26A3  3189   	fcall	_nrf24l01InitRegisters
=======
  3165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3166 ;;      Locals:         0       0       0       0      34       0       0       0       0       0       0       0       
      +0       0
  3167 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3168 ;;      Totals:         0       0       1       0      34       0       0       0       0       0       0       0       
      +0       0
  3169 ;;Total ram usage:       35 bytes
  3170 ;; Hardware stack levels required when called:   15
  3171 ;; This function calls:
  3172 ;;		___lwtoft
  3173 ;;		_loop
  3174 ;;		_nrf24l01GetPipe
  3175 ;;		_nrf24l01Init
  3176 ;;		_nrf24l01SetRXPipe
  3177 ;;		_nrf24l01SetTXPipe
  3178 ;;		_sendMessage
  3179 ;;		_strcpy
  3180 ;; This function is called by:
  3181 ;;		Startup code after reset
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           
  3186                           ;psect for function _main
  3187  1361                     _main:	
  3188                           
  3189                           ;main.c: 174: ANSELA = 0x00;
  3190                           
  3191                           ;incstack = 0
  3192                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3193  1361  0023               	movlb	3	; select bank3
  3194  1362  018C               	clrf	12	;volatile
  3195                           
  3196                           ;main.c: 175: ANSELC = 0x00;
  3197  1363  018E               	clrf	14	;volatile
  3198                           
  3199                           ;main.c: 177: ODCONA = 0x00;
  3200  1364  0025               	movlb	5	; select bank5
  3201  1365  018C               	clrf	12	;volatile
  3202                           
  3203                           ;main.c: 178: ODCONC = 0x00;
  3204  1366  018E               	clrf	14	;volatile
  3205                           
  3206                           ;main.c: 183: INLVLA = 0x00;
  3207  1367  0027               	movlb	7	; select bank7
  3208  1368  018C               	clrf	12	;volatile
  3209                           
  3210                           ;main.c: 184: INLVLC = 0x00;
  3211  1369  018E               	clrf	14	;volatile
  3212                           
  3213                           ;main.c: 186: WPUA = 0x00;
  3214  136A  0024               	movlb	4	; select bank4
  3215  136B  018C               	clrf	12	;volatile
  3216                           
  3217                           ;main.c: 187: WPUC = 0x00;
  3218  136C  018E               	clrf	14	;volatile
  3219                           
  3220                           ;main.c: 189: TRISCbits.TRISC5 = 0;
  3221  136D  0021               	movlb	1	; select bank1
  3222  136E  128E               	bcf	14,5	;volatile
  3223                           
  3224                           ;main.c: 190: TRISCbits.TRISC4 = 0;
  3225  136F  120E               	bcf	14,4	;volatile
  3226                           
  3227                           ;main.c: 192: PORTCbits.RC4 = 0;
  3228  1370  0020               	movlb	0	; select bank0
  3229  1371  120E               	bcf	14,4	;volatile
  3230                           
  3231                           ;main.c: 199: INTCONbits.PEIE = 0;
  3232  1372  130B               	bcf	11,6	;volatile
  3233                           
  3234                           ;main.c: 200: INTCONbits.GIE = 0;
  3235  1373  138B               	bcf	11,7	;volatile
  3236                           
  3237                           ;main.c: 202: OSCCON1bits.NOSC = 0b000;
  3238  1374  308F               	movlw	-113
  3239  1375  0032               	movlb	18	; select bank18
  3240  1376  0599               	andwf	25,f	;volatile
  3241                           
  3242                           ;main.c: 203: OSCCON1bits.NDIV = 0b000;
  3243  1377  30F0               	movlw	-16
  3244  1378  0599               	andwf	25,f	;volatile
  3245                           
  3246                           ;main.c: 205: _delay((unsigned long)((10)*(32000000/4000.0)));
  3247  1379  3068               	movlw	104
  3248  137A  0021               	movlb	1	; select bank1
  3249  137B  00E7               	movwf	??_main^(0+128)
  3250  137C  30E4               	movlw	228
  3251  137D                     u6957:	
  3252  137D  0B89               	decfsz	9,f
  3253  137E  2B7D               	goto	u6957
  3254  137F  0BE7               	decfsz	??_main^(0+128),f
  3255  1380  2B7D               	goto	u6957
  3256  1381  0000               	nop
  3257                           
  3258                           ;main.c: 209: strcpy(romData->name, "UH1");
  3259  1382  30CD               	movlw	low (STR_11| (0+32768))
  3260  1383  0020               	movlb	0	; select bank0
  3261  1384  00A0               	movwf	strcpy@from
  3262  1385  3098               	movlw	high (STR_11| (0+32768))
  3263  1386  00A1               	movwf	strcpy@from+1
  3264  1387  0021               	movlb	1	; select bank1
  3265  1388  086C               	movf	_romData^(0+128),w
  3266  1389  3E01               	addlw	1
  3267  138A  319D  25DF  3193   	fcall	_strcpy
  3268                           
  3269                           ;main.c: 211: nrf24l01Init();
  3270  138D  3191  2108  3193   	fcall	_nrf24l01Init
  3271                           
  3272                           ;main.c: 213: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3273  1390  0021               	movlb	1	; select bank1
  3274  1391  086C               	movf	_romData^(0+128),w
  3275  1392  3E01               	addlw	1
  3276  1393  319F  27C8  3193   	fcall	_nrf24l01GetPipe
  3277  1396  0021               	movlb	1	; select bank1
  3278  1397  00E7               	movwf	??_main^(0+128)
  3279  1398  0867               	movf	??_main^(0+128),w
  3280  1399  0023               	movlb	3	; select bank3
  3281  139A  00A0               	movwf	main@pipe^(0+384)
  3282                           
  3283                           ;main.c: 214: nrf24l01SetTXPipe(pipe);
  3284  139B  0820               	movf	main@pipe^(0+384),w
  3285  139C  3191  214B  3193   	fcall	_nrf24l01SetTXPipe
  3286                           
  3287                           ;main.c: 215: nrf24l01SetRXPipe(pipe);
  3288  139F  0023               	movlb	3	; select bank3
  3289  13A0  0820               	movf	main@pipe^(0+384),w
  3290  13A1  319E  2676  3193   	fcall	_nrf24l01SetRXPipe
>>>>>>> 1d4db504068e8c8c8cdf720102f8bcd4a3c081ef
  3291                           
  3292                           ;nrf24l01.c: 508: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3293  092A  3003               	movlw	3
  3294  092B  0020               	movlb	0	; select bank0
  3295  092C  00B3               	movwf	??_nrf24l01Init+1
  3296  092D  3008               	movlw	8
  3297  092E  00B2               	movwf	??_nrf24l01Init
  3298  092F  3077               	movlw	119
  3299  0930                     u3417:	
  3300  0930  0B89               	decfsz	9,f
  3301  0931  2930               	goto	u3417
  3302  0932  0BB2               	decfsz	??_nrf24l01Init,f
  3303  0933  2930               	goto	u3417
  3304  0934  0BB3               	decfsz	??_nrf24l01Init+1,f
  3305  0935  2930               	goto	u3417
  3306                           
  3307                           ;nrf24l01.c: 510: nrf24l01CEHigh();
  3308  0936  3195  2514         	fcall	_nrf24l01CEHigh
  3309                           
  3310                           ;nrf24l01.c: 512: status.TX = statuses.TX.Idle;
  3311  0938  3034               	movlw	low (_statuses| (0+32768))
  3312  0939  0084               	movwf	4
  3313  093A  3098               	movlw	high (_statuses| (0+32768))
  3314  093B  0085               	movwf	5
  3315  093C  0800               	movf	0,w	;code access
  3316  093D  0020               	movlb	0	; select bank0
  3317  093E  00B2               	movwf	??_nrf24l01Init
  3318  093F  0021               	movlb	1	; select bank1
  3319  0940  0867               	movf	_status^(0+128),w	;volatile
  3320  0941  0020               	movlb	0	; select bank0
  3321  0942  0632               	xorwf	??_nrf24l01Init,w
  3322  0943  39F0               	andlw	-16
  3323  0944  0632               	xorwf	??_nrf24l01Init,w
  3324  0945  0021               	movlb	1	; select bank1
  3325  0946  00E7               	movwf	_status^(0+128)	;volatile
  3326                           
  3327                           ;nrf24l01.c: 513: status.RX = statuses.RX.Idle;
  3328  0947  3039               	movlw	low ((_statuses+5)| (0+32768))
  3329  0948  0084               	movwf	4
  3330  0949  3098               	movlw	high ((_statuses+5)| (0+32768))
  3331  094A  0085               	movwf	5
  3332  094B  0800               	movf	0,w	;code access
  3333  094C  0020               	movlb	0	; select bank0
  3334  094D  00B2               	movwf	??_nrf24l01Init
  3335  094E  0EB2               	swapf	??_nrf24l01Init,f
  3336  094F  0021               	movlb	1	; select bank1
  3337  0950  0867               	movf	_status^(0+128),w	;volatile
  3338  0951  0020               	movlb	0	; select bank0
  3339  0952  0632               	xorwf	??_nrf24l01Init,w
  3340  0953  390F               	andlw	-241
  3341  0954  0632               	xorwf	??_nrf24l01Init,w
  3342  0955  0021               	movlb	1	; select bank1
  3343  0956  00E7               	movwf	_status^(0+128)	;volatile
  3344  0957  0008               	return
  3345  0958                     __end_of_nrf24l01Init:	
  3346                           
  3347                           	psect	text2
  3348  163E                     __ptext2:	
  3349 ;; *************** function _nrf24l01InterfaceInit *****************
  3350 ;; Defined at:
  3351 ;;		line 27 in file "interface.c"
  3352 ;; Parameters:    Size  Location     Type
  3353 ;;		None
  3354 ;; Auto vars:     Size  Location     Type
  3355 ;;		None
  3356 ;; Return value:  Size  Location     Type
  3357 ;;                  1    wreg      void 
  3358 ;; Registers used:
  3359 ;;		wreg, status,2, status,0
  3360 ;; Tracked objects:
  3361 ;;		On entry : 0/0
  3362 ;;		On exit  : 0/0
  3363 ;;		Unchanged: 0/0
  3364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3369 ;;Total ram usage:        0 bytes
  3370 ;; Hardware stack levels used:    1
  3371 ;; Hardware stack levels required when called:    7
  3372 ;; This function calls:
  3373 ;;		Nothing
  3374 ;; This function is called by:
  3375 ;;		_nrf24l01Init
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378                           
  3379                           
  3380                           ;psect for function _nrf24l01InterfaceInit
  3381  163E                     _nrf24l01InterfaceInit:	
  3382                           
  3383                           ;interface.c: 29: TRISAbits.TRISA0 = 0;
  3384                           
  3385                           ;incstack = 0
  3386                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3387  163E  0021               	movlb	1	; select bank1
  3388  163F  100C               	bcf	12,0	;volatile
  3389                           
  3390                           ;interface.c: 30: TRISAbits.TRISA1 = 0;
  3391  1640  108C               	bcf	12,1	;volatile
  3392                           
  3393                           ;interface.c: 32: TRISCbits.TRISC1 = 1;
  3394  1641  148E               	bsf	14,1	;volatile
  3395                           
  3396                           ;interface.c: 33: TRISCbits.TRISC2 = 0;
  3397  1642  110E               	bcf	14,2	;volatile
  3398                           
  3399                           ;interface.c: 34: TRISCbits.TRISC0 = 0;
  3400  1643  100E               	bcf	14,0	;volatile
  3401                           
  3402                           ;interface.c: 36: SSP1CON1bits.SSPEN = 0;
  3403  1644  0024               	movlb	4	; select bank4
  3404  1645  1295               	bcf	21,5	;volatile
  3405                           
  3406                           ;interface.c: 38: RC1PPSbits.RC1PPS = 0b10001;
  3407  1646  003D               	movlb	29	; select bank29
  3408  1647  0821               	movf	33,w	;volatile
  3409  1648  39E0               	andlw	-32
  3410  1649  3811               	iorlw	17
  3411  164A  00A1               	movwf	33	;volatile
  3412                           
  3413                           ;interface.c: 39: RC2PPSbits.RC2PPS = 0b11001;
  3414  164B  0822               	movf	34,w	;volatile
  3415  164C  39E0               	andlw	-32
  3416  164D  3819               	iorlw	25
  3417  164E  00A2               	movwf	34	;volatile
  3418                           
  3419                           ;interface.c: 40: RC0PPSbits.RC0PPS = 0b11000;
  3420  164F  0820               	movf	32,w	;volatile
  3421  1650  39E0               	andlw	-32
  3422  1651  3818               	iorlw	24
  3423  1652  00A0               	movwf	32	;volatile
  3424                           
  3425                           ;interface.c: 42: SSP1CON1bits.CKP = 0;
  3426  1653  0024               	movlb	4	; select bank4
  3427  1654  1215               	bcf	21,4	;volatile
  3428                           
  3429                           ;interface.c: 43: SSP1STATbits.CKE = 1;
  3430  1655  1714               	bsf	20,6	;volatile
  3431                           
  3432                           ;interface.c: 44: SSP1CON1bits.SSPM = 0b0000;
  3433  1656  30F0               	movlw	-16
  3434  1657  0595               	andwf	21,f	;volatile
  3435                           
  3436                           ;interface.c: 46: SSP1CON1bits.SSPEN = 1;
  3437  1658  1695               	bsf	21,5	;volatile
  3438  1659  0008               	return
  3439  165A                     __end_of_nrf24l01InterfaceInit:	
  3440                           
  3441                           	psect	text3
  3442  06A3                     __ptext3:	
  3443 ;; *************** function _nrf24l01InitRegisters *****************
  3444 ;; Defined at:
  3445 ;;		line 392 in file "nrf24l01.c"
  3446 ;; Parameters:    Size  Location     Type
  3447 ;;		None
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;  i               2   16[BANK0 ] unsigned int 
  3450 ;;  config          1   15[BANK0 ] struct .
  3451 ;;  DynPD           1   14[BANK0 ] struct .
  3452 ;;  enAA            1   13[BANK0 ] struct .
  3453 ;;  rfSetup         1   12[BANK0 ] struct .
  3454 ;;  feature         1   11[BANK0 ] struct .
  3455 ;;  setupAW         1   10[BANK0 ] struct .
  3456 ;;  channel         1    9[BANK0 ] struct .
  3457 ;; Return value:  Size  Location     Type
  3458 ;;                  1    wreg      void 
  3459 ;; Registers used:
  3460 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3461 ;; Tracked objects:
  3462 ;;		On entry : 0/0
  3463 ;;		On exit  : 0/0
  3464 ;;		Unchanged: 0/0
  3465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3467 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3468 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3469 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3470 ;;Total ram usage:       11 bytes
  3471 ;; Hardware stack levels used:    1
  3472 ;; Hardware stack levels required when called:   11
  3473 ;; This function calls:
  3474 ;;		___bmul
  3475 ;;		_nrf24l01SPIEnd
  3476 ;;		_nrf24l01SPISend
  3477 ;;		_nrf24l01SPIStart
  3478 ;;		_nrf24l01Send
  3479 ;;		_nrf24l01SetRXPipe
  3480 ;;		_nrf24l01SetTXPipe
  3481 ;; This function is called by:
  3482 ;;		_nrf24l01Init
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           
  3487                           ;psect for function _nrf24l01InitRegisters
  3488  06A3                     _nrf24l01InitRegisters:	
  3489                           
  3490                           ;nrf24l01.c: 394: n_CONFIG_t config;;nrf24l01.c: 395: config.byte = 0x00;
  3491                           
  3492                           ;incstack = 0
  3493                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3494  06A3  0020               	movlb	0	; select bank0
  3495  06A4  01AF               	clrf	nrf24l01InitRegisters@config
  3496                           
  3497                           ;nrf24l01.c: 397: config.PWR_UP = 0;
  3498  06A5  10AF               	bcf	nrf24l01InitRegisters@config,1
  3499                           
  3500                           ;nrf24l01.c: 398: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3501  06A6  082F               	movf	nrf24l01InitRegisters@config,w
  3502  06A7  00A7               	movwf	??_nrf24l01InitRegisters
  3503  06A8  0827               	movf	??_nrf24l01InitRegisters,w
  3504  06A9  00A0               	movwf	nrf24l01Send@data
  3505  06AA  3020               	movlw	32
  3506  06AB  3196  2697  3186   	fcall	_nrf24l01Send
  3507                           
  3508                           ;nrf24l01.c: 400: n_SETUP_AW_t setupAW;;nrf24l01.c: 401: setupAW.byte = 0x00;
  3509  06AE  0020               	movlb	0	; select bank0
  3510  06AF  01AA               	clrf	nrf24l01InitRegisters@setupAW
  3511                           
  3512                           ;nrf24l01.c: 402: setupAW.AW = 0b11;
  3513  06B0  3003               	movlw	3
  3514  06B1  04AA               	iorwf	nrf24l01InitRegisters@setupAW,f
  3515                           
  3516                           ;nrf24l01.c: 403: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x03, setupAW.byte);
  3517  06B2  082A               	movf	nrf24l01InitRegisters@setupAW,w
  3518  06B3  00A7               	movwf	??_nrf24l01InitRegisters
  3519  06B4  0827               	movf	??_nrf24l01InitRegisters,w
  3520  06B5  00A0               	movwf	nrf24l01Send@data
  3521  06B6  3023               	movlw	35
  3522  06B7  3196  2697  3186   	fcall	_nrf24l01Send
  3523                           
  3524                           ;nrf24l01.c: 406: n_RF_CH_t channel;;nrf24l01.c: 407: channel.RF_CH = 2;
  3525  06BA  0020               	movlb	0	; select bank0
  3526  06BB  0829               	movf	nrf24l01InitRegisters@channel,w
  3527  06BC  3980               	andlw	-128
  3528  06BD  3802               	iorlw	2
  3529  06BE  00A9               	movwf	nrf24l01InitRegisters@channel
  3530                           
  3531                           ;nrf24l01.c: 408: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3532  06BF  0829               	movf	nrf24l01InitRegisters@channel,w
  3533  06C0  00A7               	movwf	??_nrf24l01InitRegisters
  3534  06C1  0827               	movf	??_nrf24l01InitRegisters,w
  3535  06C2  00A0               	movwf	nrf24l01Send@data
  3536  06C3  3025               	movlw	37
  3537  06C4  3196  2697  3186   	fcall	_nrf24l01Send
  3538                           
  3539                           ;nrf24l01.c: 411: n_RF_SETUP_t rfSetup;;nrf24l01.c: 412: rfSetup.byte = 0x00;
  3540  06C7  0020               	movlb	0	; select bank0
  3541  06C8  01AC               	clrf	nrf24l01InitRegisters@rfSetup
  3542                           
  3543                           ;nrf24l01.c: 413: rfSetup.RF_DR_LOW = 0;
  3544  06C9  12AC               	bcf	nrf24l01InitRegisters@rfSetup,5
  3545                           
  3546                           ;nrf24l01.c: 414: rfSetup.RF_DR_HIGH = 1;
  3547  06CA  15AC               	bsf	nrf24l01InitRegisters@rfSetup,3
  3548                           
  3549                           ;nrf24l01.c: 415: rfSetup.RF_PWR = 3;
  3550  06CB  3006               	movlw	6
  3551  06CC  04AC               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3552                           
  3553                           ;nrf24l01.c: 416: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3554  06CD  082C               	movf	nrf24l01InitRegisters@rfSetup,w
  3555  06CE  00A7               	movwf	??_nrf24l01InitRegisters
  3556  06CF  0827               	movf	??_nrf24l01InitRegisters,w
  3557  06D0  00A0               	movwf	nrf24l01Send@data
  3558  06D1  3026               	movlw	38
  3559  06D2  3196  2697  3186   	fcall	_nrf24l01Send
  3560                           
  3561                           ;nrf24l01.c: 419: nrf24l01SetRXPipe(0xFF);
  3562  06D5  30FF               	movlw	255
  3563  06D6  3196  26B7  3186   	fcall	_nrf24l01SetRXPipe
  3564                           
  3565                           ;nrf24l01.c: 422: n_EN_AA_t enAA;;nrf24l01.c: 423: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3566  06D9  0020               	movlb	0	; select bank0
  3567  06DA  01A0               	clrf	nrf24l01Send@data
  3568  06DB  3001               	movlw	1
  3569  06DC  3196  2697  3186   	fcall	_nrf24l01Send
  3570  06DF  0020               	movlb	0	; select bank0
  3571  06E0  00A7               	movwf	??_nrf24l01InitRegisters
  3572  06E1  0827               	movf	??_nrf24l01InitRegisters,w
  3573  06E2  00AD               	movwf	nrf24l01InitRegisters@enAA
  3574                           
  3575                           ;nrf24l01.c: 424: enAA.ENAA_P0 = 0;
  3576  06E3  102D               	bcf	nrf24l01InitRegisters@enAA,0
  3577                           
  3578                           ;nrf24l01.c: 425: enAA.ENAA_P1 = 0;
  3579  06E4  10AD               	bcf	nrf24l01InitRegisters@enAA,1
  3580                           
  3581                           ;nrf24l01.c: 426: enAA.ENAA_P2 = 0;
  3582  06E5  112D               	bcf	nrf24l01InitRegisters@enAA,2
  3583                           
  3584                           ;nrf24l01.c: 427: enAA.ENAA_P3 = 0;
  3585  06E6  11AD               	bcf	nrf24l01InitRegisters@enAA,3
  3586                           
  3587                           ;nrf24l01.c: 428: enAA.ENAA_P4 = 0;
  3588  06E7  122D               	bcf	nrf24l01InitRegisters@enAA,4
  3589                           
  3590                           ;nrf24l01.c: 429: enAA.ENAA_P5 = 0;
  3591  06E8  12AD               	bcf	nrf24l01InitRegisters@enAA,5
  3592                           
  3593                           ;nrf24l01.c: 430: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3594  06E9  082D               	movf	nrf24l01InitRegisters@enAA,w
  3595  06EA  00A7               	movwf	??_nrf24l01InitRegisters
  3596  06EB  0827               	movf	??_nrf24l01InitRegisters,w
  3597  06EC  00A0               	movwf	nrf24l01Send@data
  3598  06ED  3021               	movlw	33
  3599  06EE  3196  2697  3186   	fcall	_nrf24l01Send
  3600                           
  3601                           ;nrf24l01.c: 434: n_FEATURE_t feature;;nrf24l01.c: 435: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3602  06F1  0020               	movlb	0	; select bank0
  3603  06F2  01A0               	clrf	nrf24l01Send@data
  3604  06F3  301D               	movlw	29
  3605  06F4  3196  2697  3186   	fcall	_nrf24l01Send
  3606  06F7  0020               	movlb	0	; select bank0
  3607  06F8  00A7               	movwf	??_nrf24l01InitRegisters
  3608  06F9  0827               	movf	??_nrf24l01InitRegisters,w
  3609  06FA  00AB               	movwf	nrf24l01InitRegisters@feature
  3610                           
  3611                           ;nrf24l01.c: 436: feature.EN_DPL = 1;
  3612  06FB  152B               	bsf	nrf24l01InitRegisters@feature,2
  3613                           
  3614                           ;nrf24l01.c: 437: feature.EN_DYN_ACK = 1;
  3615  06FC  142B               	bsf	nrf24l01InitRegisters@feature,0
  3616                           
  3617                           ;nrf24l01.c: 438: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3618  06FD  082B               	movf	nrf24l01InitRegisters@feature,w
  3619  06FE  00A7               	movwf	??_nrf24l01InitRegisters
  3620  06FF  0827               	movf	??_nrf24l01InitRegisters,w
  3621  0700  00A0               	movwf	nrf24l01Send@data
  3622  0701  303D               	movlw	61
  3623  0702  3196  2697  3186   	fcall	_nrf24l01Send
  3624                           
  3625                           ;nrf24l01.c: 440: n_DYNPD_t DynPD;;nrf24l01.c: 441: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3626  0705  0020               	movlb	0	; select bank0
  3627  0706  01A0               	clrf	nrf24l01Send@data
  3628  0707  301C               	movlw	28
  3629  0708  3196  2697  3186   	fcall	_nrf24l01Send
  3630  070B  0020               	movlb	0	; select bank0
  3631  070C  00A7               	movwf	??_nrf24l01InitRegisters
  3632  070D  0827               	movf	??_nrf24l01InitRegisters,w
  3633  070E  00AE               	movwf	nrf24l01InitRegisters@DynPD
  3634                           
  3635                           ;nrf24l01.c: 442: DynPD.DPL_P0 = 1;
  3636  070F  142E               	bsf	nrf24l01InitRegisters@DynPD,0
  3637                           
  3638                           ;nrf24l01.c: 443: DynPD.DPL_P1 = 1;
  3639  0710  14AE               	bsf	nrf24l01InitRegisters@DynPD,1
  3640                           
  3641                           ;nrf24l01.c: 444: DynPD.DPL_P2 = 1;
  3642  0711  152E               	bsf	nrf24l01InitRegisters@DynPD,2
  3643                           
  3644                           ;nrf24l01.c: 445: DynPD.DPL_P3 = 1;
  3645  0712  15AE               	bsf	nrf24l01InitRegisters@DynPD,3
  3646                           
  3647                           ;nrf24l01.c: 446: DynPD.DPL_P4 = 1;
  3648  0713  162E               	bsf	nrf24l01InitRegisters@DynPD,4
  3649                           
  3650                           ;nrf24l01.c: 447: DynPD.DPL_P5 = 1;
  3651  0714  16AE               	bsf	nrf24l01InitRegisters@DynPD,5
  3652                           
  3653                           ;nrf24l01.c: 448: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3654  0715  082E               	movf	nrf24l01InitRegisters@DynPD,w
  3655  0716  00A7               	movwf	??_nrf24l01InitRegisters
  3656  0717  0827               	movf	??_nrf24l01InitRegisters,w
  3657  0718  00A0               	movwf	nrf24l01Send@data
  3658  0719  303C               	movlw	60
  3659  071A  3196  2697  3186   	fcall	_nrf24l01Send
  3660                           
  3661                           ;nrf24l01.c: 451: unsigned int i;;nrf24l01.c: 452: for (i = 0; i < 6; i++){
  3662  071D  0020               	movlb	0	; select bank0
  3663  071E  01B0               	clrf	nrf24l01InitRegisters@i
  3664  071F  01B1               	clrf	nrf24l01InitRegisters@i+1
  3665  0720  3000               	movlw	0
  3666  0721  0231               	subwf	nrf24l01InitRegisters@i+1,w
  3667  0722  3006               	movlw	6
  3668  0723  1903               	skipnz
  3669  0724  0230               	subwf	nrf24l01InitRegisters@i,w
  3670  0725  1803               	btfsc	3,0
  3671  0726  2F80               	goto	l3100
  3672  0727                     l3086:	
  3673                           
  3674                           ;nrf24l01.c: 454: nrf24l01SPIStart();
  3675  0727  3195  252F  3186   	fcall	_nrf24l01SPIStart
  3676                           
  3677                           ;nrf24l01.c: 455: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  3678  072A  0020               	movlb	0	; select bank0
  3679  072B  0830               	movf	nrf24l01InitRegisters@i,w
  3680  072C  3E0A               	addlw	10
  3681  072D  3820               	iorlw	32
  3682  072E  3195  2540  3186   	fcall	_nrf24l01SPISend
  3683                           
  3684                           ;nrf24l01.c: 457: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  3685  0731  3050               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3686  0732  0084               	movwf	4
  3687  0733  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3688  0734  0085               	movwf	5
  3689  0735  0800               	movf	0,w	;code access
  3690  0736  0020               	movlb	0	; select bank0
  3691  0737  00A7               	movwf	??_nrf24l01InitRegisters
  3692  0738  0830               	movf	nrf24l01InitRegisters@i,w
  3693  0739  00A8               	movwf	??_nrf24l01InitRegisters+1
  3694  073A  0828               	movf	??_nrf24l01InitRegisters+1,w
  3695  073B  00A0               	movwf	___bmul@multiplicand
  3696  073C  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3697  073D  0084               	movwf	4
  3698  073E  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3699  073F  0085               	movwf	5
  3700  0740  0800               	movf	0,w	;code access
  3701  0741  3195  255C  3186   	fcall	___bmul
  3702  0744  0020               	movlb	0	; select bank0
  3703  0745  0727               	addwf	??_nrf24l01InitRegisters,w
  3704  0746  3195  2540  3186   	fcall	_nrf24l01SPISend
  3705                           
  3706                           ;nrf24l01.c: 459: if (i < 2){
  3707  0749  3000               	movlw	0
  3708  074A  0020               	movlb	0	; select bank0
  3709  074B  0231               	subwf	nrf24l01InitRegisters@i+1,w
  3710  074C  3002               	movlw	2
  3711  074D  1903               	skipnz
  3712  074E  0230               	subwf	nrf24l01InitRegisters@i,w
  3713  074F  1803               	skipnc
  3714  0750  2F71               	goto	l3094
  3715                           
  3716                           ;nrf24l01.c: 460: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3717  0751  304F               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3718  0752  0084               	movwf	4
  3719  0753  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3720  0754  0085               	movwf	5
  3721  0755  0800               	movf	0,w	;code access
  3722  0756  3195  2540  3186   	fcall	_nrf24l01SPISend
  3723                           
  3724                           ;nrf24l01.c: 461: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3725  0759  304E               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3726  075A  0084               	movwf	4
  3727  075B  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3728  075C  0085               	movwf	5
  3729  075D  0800               	movf	0,w	;code access
  3730  075E  3195  2540  3186   	fcall	_nrf24l01SPISend
  3731                           
  3732                           ;nrf24l01.c: 462: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3733  0761  304D               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3734  0762  0084               	movwf	4
  3735  0763  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3736  0764  0085               	movwf	5
  3737  0765  0800               	movf	0,w	;code access
  3738  0766  3195  2540  3186   	fcall	_nrf24l01SPISend
  3739                           
  3740                           ;nrf24l01.c: 463: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3741  0769  304C               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3742  076A  0084               	movwf	4
  3743  076B  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3744  076C  0085               	movwf	5
  3745  076D  0800               	movf	0,w	;code access
  3746  076E  3195  2540  3186   	fcall	_nrf24l01SPISend
  3747  0771                     l3094:	
  3748                           
  3749                           ;nrf24l01.c: 464: };nrf24l01.c: 466: nrf24l01SPIEnd();
  3750  0771  3195  2520  3186   	fcall	_nrf24l01SPIEnd
  3751  0774  3001               	movlw	1
  3752  0775  0020               	movlb	0	; select bank0
  3753  0776  07B0               	addwf	nrf24l01InitRegisters@i,f
  3754  0777  3000               	movlw	0
  3755  0778  3DB1               	addwfc	nrf24l01InitRegisters@i+1,f
  3756  0779  3000               	movlw	0
  3757  077A  0231               	subwf	nrf24l01InitRegisters@i+1,w
  3758  077B  3006               	movlw	6
  3759  077C  1903               	skipnz
  3760  077D  0230               	subwf	nrf24l01InitRegisters@i,w
  3761  077E  1C03               	skipc
  3762  077F  2F27               	goto	l3086
  3763  0780                     l3100:	
  3764                           
  3765                           ;nrf24l01.c: 467: };nrf24l01.c: 469: nrf24l01SetTXPipe(0);
  3766  0780  3000               	movlw	0
  3767  0781  3187  27B6  3186   	fcall	_nrf24l01SetTXPipe
  3768                           
  3769                           ;nrf24l01.c: 473: status.statusRegister.byte = 0x00;
  3770  0784  0021               	movlb	1	; select bank1
  3771  0785  01E8               	clrf	(_status^(0+128)+1)	;volatile
  3772                           
  3773                           ;nrf24l01.c: 474: status.statusRegister.RX_DR = 1;
  3774  0786  1768               	bsf	(_status^(0+128)+1),6	;volatile
  3775                           
  3776                           ;nrf24l01.c: 475: status.statusRegister.TX_DS = 1;
  3777  0787  16E8               	bsf	(_status^(0+128)+1),5	;volatile
  3778                           
  3779                           ;nrf24l01.c: 476: status.statusRegister.MAX_RT = 1;
  3780  0788  1668               	bsf	(_status^(0+128)+1),4	;volatile
  3781                           
  3782                           ;nrf24l01.c: 477: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.statusReg
      +                          ister.byte);
  3783  0789  0868               	movf	(_status^(0+128)+1),w	;volatile
  3784  078A  0020               	movlb	0	; select bank0
  3785  078B  00A7               	movwf	??_nrf24l01InitRegisters
  3786  078C  0827               	movf	??_nrf24l01InitRegisters,w
  3787  078D  00A0               	movwf	nrf24l01Send@data
  3788  078E  3027               	movlw	39
  3789  078F  3196  2697  3186   	fcall	_nrf24l01Send
  3790                           
  3791                           ;nrf24l01.c: 479: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  3792  0792  0020               	movlb	0	; select bank0
  3793  0793  01A0               	clrf	nrf24l01Send@data
  3794  0794  3007               	movlw	7
  3795  0795  3196  2697  3186   	fcall	_nrf24l01Send
  3796  0798  0020               	movlb	0	; select bank0
  3797  0799  00A7               	movwf	??_nrf24l01InitRegisters
  3798  079A  0827               	movf	??_nrf24l01InitRegisters,w
  3799  079B  0021               	movlb	1	; select bank1
  3800  079C  00E8               	movwf	(_status^(0+128)+1)	;volatile
  3801                           
  3802                           ;nrf24l01.c: 482: nrf24l01Send((unsigned) 0b11100001, 0);
  3803  079D  0020               	movlb	0	; select bank0
  3804  079E  01A0               	clrf	nrf24l01Send@data
  3805  079F  30E1               	movlw	225
  3806  07A0  3196  2697  3186   	fcall	_nrf24l01Send
  3807                           
  3808                           ;nrf24l01.c: 483: nrf24l01Send((unsigned) 0b11100010, 0);
  3809  07A3  0020               	movlb	0	; select bank0
  3810  07A4  01A0               	clrf	nrf24l01Send@data
  3811  07A5  30E2               	movlw	226
  3812  07A6  3196  2697  3186   	fcall	_nrf24l01Send
  3813                           
  3814                           ;nrf24l01.c: 486: config.PRIM_RX = 1;
  3815  07A9  0020               	movlb	0	; select bank0
  3816  07AA  142F               	bsf	nrf24l01InitRegisters@config,0
  3817                           
  3818                           ;nrf24l01.c: 487: config.EN_CRC = 1;
  3819  07AB  15AF               	bsf	nrf24l01InitRegisters@config,3
  3820                           
  3821                           ;nrf24l01.c: 488: config.CRCO = 1;
  3822  07AC  152F               	bsf	nrf24l01InitRegisters@config,2
  3823                           
  3824                           ;nrf24l01.c: 489: config.PWR_UP = 1;
  3825  07AD  14AF               	bsf	nrf24l01InitRegisters@config,1
  3826                           
  3827                           ;nrf24l01.c: 490: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3828  07AE  082F               	movf	nrf24l01InitRegisters@config,w
  3829  07AF  00A7               	movwf	??_nrf24l01InitRegisters
  3830  07B0  0827               	movf	??_nrf24l01InitRegisters,w
  3831  07B1  00A0               	movwf	nrf24l01Send@data
  3832  07B2  3020               	movlw	32
  3833  07B3  3196  2697         	fcall	_nrf24l01Send
  3834  07B5  0008               	return
  3835  07B6                     __end_of_nrf24l01InitRegisters:	
  3836                           
  3837                           	psect	text4
  3838  07B6                     __ptext4:	
  3839 ;; *************** function _nrf24l01SetTXPipe *****************
  3840 ;; Defined at:
  3841 ;;		line 183 in file "nrf24l01.c"
  3842 ;; Parameters:    Size  Location     Type
  3843 ;;  pipe            1    wreg     unsigned char 
  3844 ;; Auto vars:     Size  Location     Type
  3845 ;;  pipe            1    6[BANK0 ] unsigned char 
  3846 ;; Return value:  Size  Location     Type
  3847 ;;                  1    wreg      void 
  3848 ;; Registers used:
  3849 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3850 ;; Tracked objects:
  3851 ;;		On entry : 0/0
  3852 ;;		On exit  : 0/0
  3853 ;;		Unchanged: 0/0
  3854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3856 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3857 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3858 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3859 ;;Total ram usage:        3 bytes
  3860 ;; Hardware stack levels used:    1
  3861 ;; Hardware stack levels required when called:    9
  3862 ;; This function calls:
  3863 ;;		___bmul
  3864 ;;		_nrf24l01SPIEnd
  3865 ;;		_nrf24l01SPISend
  3866 ;;		_nrf24l01SPIStart
  3867 ;; This function is called by:
  3868 ;;		_main
  3869 ;;		_nrf24l01InitRegisters
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           
  3874                           ;psect for function _nrf24l01SetTXPipe
  3875  07B6                     _nrf24l01SetTXPipe:	
  3876                           
  3877                           ;incstack = 0
  3878                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3879                           ;nrf24l01SetTXPipe@pipe stored from wreg
  3880  07B6  0020               	movlb	0	; select bank0
  3881  07B7  00A6               	movwf	nrf24l01SetTXPipe@pipe
  3882                           
  3883                           ;nrf24l01.c: 186: nrf24l01SPIStart();
  3884  07B8  3195  252F  3187   	fcall	_nrf24l01SPIStart
  3885                           
  3886                           ;nrf24l01.c: 187: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  3887  07BB  3030               	movlw	48
  3888  07BC  3195  2540  3187   	fcall	_nrf24l01SPISend
  3889                           
  3890                           ;nrf24l01.c: 188: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  3891  07BF  3050               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3892  07C0  0084               	movwf	4
  3893  07C1  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3894  07C2  0085               	movwf	5
  3895  07C3  0800               	movf	0,w	;code access
  3896  07C4  0020               	movlb	0	; select bank0
  3897  07C5  00A4               	movwf	??_nrf24l01SetTXPipe
  3898  07C6  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3899  07C7  0084               	movwf	4
  3900  07C8  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3901  07C9  0085               	movwf	5
  3902  07CA  0800               	movf	0,w	;code access
  3903  07CB  00A5               	movwf	??_nrf24l01SetTXPipe+1
  3904  07CC  0825               	movf	??_nrf24l01SetTXPipe+1,w
  3905  07CD  00A0               	movwf	___bmul@multiplicand
  3906  07CE  0826               	movf	nrf24l01SetTXPipe@pipe,w
  3907  07CF  3195  255C  3187   	fcall	___bmul
  3908  07D2  0020               	movlb	0	; select bank0
  3909  07D3  0724               	addwf	??_nrf24l01SetTXPipe,w
  3910  07D4  3195  2540  3187   	fcall	_nrf24l01SPISend
  3911                           
  3912                           ;nrf24l01.c: 189: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3913  07D7  304F               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3914  07D8  0084               	movwf	4
  3915  07D9  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3916  07DA  0085               	movwf	5
  3917  07DB  0800               	movf	0,w	;code access
  3918  07DC  3195  2540  3187   	fcall	_nrf24l01SPISend
  3919                           
  3920                           ;nrf24l01.c: 190: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3921  07DF  304E               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3922  07E0  0084               	movwf	4
  3923  07E1  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3924  07E2  0085               	movwf	5
  3925  07E3  0800               	movf	0,w	;code access
  3926  07E4  3195  2540  3187   	fcall	_nrf24l01SPISend
  3927                           
  3928                           ;nrf24l01.c: 191: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3929  07E7  304D               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3930  07E8  0084               	movwf	4
  3931  07E9  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3932  07EA  0085               	movwf	5
  3933  07EB  0800               	movf	0,w	;code access
  3934  07EC  3195  2540  3187   	fcall	_nrf24l01SPISend
  3935                           
  3936                           ;nrf24l01.c: 192: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3937  07EF  304C               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3938  07F0  0084               	movwf	4
  3939  07F1  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3940  07F2  0085               	movwf	5
  3941  07F3  0800               	movf	0,w	;code access
  3942  07F4  3195  2540  3187   	fcall	_nrf24l01SPISend
  3943                           
  3944                           ;nrf24l01.c: 193: nrf24l01SPIEnd();
  3945  07F7  3195  2520         	fcall	_nrf24l01SPIEnd
  3946  07F9  0008               	return
  3947  07FA                     __end_of_nrf24l01SetTXPipe:	
  3948                           
  3949                           	psect	text5
  3950  155C                     __ptext5:	
  3951 ;; *************** function ___bmul *****************
  3952 ;; Defined at:
  3953 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;  multiplier      1    wreg     unsigned char 
  3956 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3959 ;;  product         1    2[BANK0 ] unsigned char 
  3960 ;; Return value:  Size  Location     Type
  3961 ;;                  1    wreg      unsigned char 
  3962 ;; Registers used:
  3963 ;;		wreg, status,2, status,0
  3964 ;; Tracked objects:
  3965 ;;		On entry : 0/0
  3966 ;;		On exit  : 0/0
  3967 ;;		Unchanged: 0/0
  3968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3969 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3970 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3971 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3972 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3973 ;;Total ram usage:        4 bytes
  3974 ;; Hardware stack levels used:    1
  3975 ;; Hardware stack levels required when called:    7
  3976 ;; This function calls:
  3977 ;;		Nothing
  3978 ;; This function is called by:
  3979 ;;		_nrf24l01SetTXPipe
  3980 ;;		_nrf24l01InitRegisters
  3981 ;; This function uses a non-reentrant model
  3982 ;;
  3983                           
  3984                           
  3985                           ;psect for function ___bmul
  3986  155C                     ___bmul:	
  3987                           
  3988                           ;incstack = 0
  3989                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3990                           ;___bmul@multiplier stored from wreg
  3991  155C  0020               	movlb	0	; select bank0
  3992  155D  00A3               	movwf	___bmul@multiplier
  3993  155E  01A2               	clrf	___bmul@product
  3994  155F                     l2626:	
  3995  155F  1C23               	btfss	___bmul@multiplier,0
  3996  1560  2D65               	goto	l2630
  3997  1561  0820               	movf	___bmul@multiplicand,w
  3998  1562  00A1               	movwf	??___bmul
  3999  1563  0821               	movf	??___bmul,w
  4000  1564  07A2               	addwf	___bmul@product,f
  4001  1565                     l2630:	
  4002  1565  1003               	clrc
  4003  1566  0DA0               	rlf	___bmul@multiplicand,f
  4004  1567  1003               	clrc
  4005  1568  0CA3               	rrf	___bmul@multiplier,f
  4006  1569  0823               	movf	___bmul@multiplier,w
  4007  156A  1D03               	btfss	3,2
  4008  156B  2D5F               	goto	l2626
  4009  156C  0822               	movf	___bmul@product,w
  4010  156D  0008               	return
  4011  156E                     __end_of___bmul:	
  4012                           
  4013                           	psect	text6
  4014  16B7                     __ptext6:	
  4015 ;; *************** function _nrf24l01SetRXPipe *****************
  4016 ;; Defined at:
  4017 ;;		line 196 in file "nrf24l01.c"
  4018 ;; Parameters:    Size  Location     Type
  4019 ;;  pipe            1    wreg     unsigned char 
  4020 ;; Auto vars:     Size  Location     Type
  4021 ;;  pipe            1    5[BANK0 ] unsigned char 
  4022 ;;  enRXAddr        1    6[BANK0 ] struct .
  4023 ;; Return value:  Size  Location     Type
  4024 ;;                  1    wreg      void 
  4025 ;; Registers used:
  4026 ;;		wreg, status,2, status,0, pclath, cstack
  4027 ;; Tracked objects:
  4028 ;;		On entry : 0/0
  4029 ;;		On exit  : 0/0
  4030 ;;		Unchanged: 0/0
  4031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4033 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4034 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4035 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4036 ;;Total ram usage:        4 bytes
  4037 ;; Hardware stack levels used:    1
  4038 ;; Hardware stack levels required when called:   10
  4039 ;; This function calls:
  4040 ;;		_nrf24l01Send
  4041 ;; This function is called by:
  4042 ;;		_main
  4043 ;;		_nrf24l01InitRegisters
  4044 ;; This function uses a non-reentrant model
  4045 ;;
  4046                           
  4047                           
  4048                           ;psect for function _nrf24l01SetRXPipe
  4049  16B7                     _nrf24l01SetRXPipe:	
  4050                           
  4051                           ;incstack = 0
  4052                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  4053                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4054  16B7  0020               	movlb	0	; select bank0
  4055  16B8  00A5               	movwf	nrf24l01SetRXPipe@pipe
  4056                           
  4057                           ;nrf24l01.c: 198: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 200: if (pipe > 5){
  4058  16B9  3006               	movlw	6
  4059  16BA  0225               	subwf	nrf24l01SetRXPipe@pipe,w
  4060  16BB  1C03               	skipc
  4061  16BC  2EC4               	goto	l261
  4062                           
  4063                           ;nrf24l01.c: 201: enRXAddr.ERX_P0 = 1;
  4064  16BD  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4065                           
  4066                           ;nrf24l01.c: 202: enRXAddr.ERX_P1 = 1;
  4067  16BE  14A6               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4068                           
  4069                           ;nrf24l01.c: 203: enRXAddr.ERX_P2 = 1;
  4070  16BF  1526               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4071                           
  4072                           ;nrf24l01.c: 204: enRXAddr.ERX_P3 = 1;
  4073  16C0  15A6               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4074                           
  4075                           ;nrf24l01.c: 205: enRXAddr.ERX_P4 = 1;
  4076  16C1  1626               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4077                           
  4078                           ;nrf24l01.c: 206: enRXAddr.ERX_P5 = 1;
  4079  16C2  16A6               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4080                           
  4081                           ;nrf24l01.c: 207: }
  4082  16C3  2ED0               	goto	l2866
  4083  16C4                     l261:	
  4084                           
  4085                           ;nrf24l01.c: 209: else{;nrf24l01.c: 210: enRXAddr.ERX_P0 = 1;
  4086  16C4  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4087                           
  4088                           ;nrf24l01.c: 211: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4089  16C5  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4090  16C6  00A3               	movwf	??_nrf24l01SetRXPipe
  4091  16C7  0A25               	incf	nrf24l01SetRXPipe@pipe,w
  4092  16C8  2ECA               	goto	u2944
  4093  16C9                     u2945:	
  4094  16C9  35A3               	lslf	??_nrf24l01SetRXPipe,f
  4095  16CA                     u2944:	
  4096  16CA  0B89               	decfsz	9,f
  4097  16CB  2EC9               	goto	u2945
  4098  16CC  0823               	movf	??_nrf24l01SetRXPipe,w
  4099  16CD  00A4               	movwf	??_nrf24l01SetRXPipe+1
  4100  16CE  0824               	movf	??_nrf24l01SetRXPipe+1,w
  4101  16CF  00A6               	movwf	nrf24l01SetRXPipe@enRXAddr
  4102  16D0                     l2866:	
  4103                           
  4104                           ;nrf24l01.c: 212: };nrf24l01.c: 214: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4105  16D0  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4106  16D1  00A3               	movwf	??_nrf24l01SetRXPipe
  4107  16D2  0823               	movf	??_nrf24l01SetRXPipe,w
  4108  16D3  00A0               	movwf	nrf24l01Send@data
  4109  16D4  3022               	movlw	34
  4110  16D5  3196  2697         	fcall	_nrf24l01Send
  4111  16D7  0008               	return
  4112  16D8                     __end_of_nrf24l01SetRXPipe:	
  4113                           
  4114                           	psect	text7
  4115  17C8                     __ptext7:	
  4116 ;; *************** function _nrf24l01GetPipe *****************
  4117 ;; Defined at:
  4118 ;;		line 168 in file "main.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;  name            1    wreg     PTR unsigned char 
  4121 ;;		 -> romDataMap(28), 
  4122 ;; Auto vars:     Size  Location     Type
  4123 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4124 ;;		 -> romDataMap(28), 
  4125 ;;  i               1   10[BANK0 ] unsigned char 
  4126 ;;  pipe            1    8[BANK0 ] unsigned char 
  4127 ;; Return value:  Size  Location     Type
  4128 ;;                  1    wreg      unsigned char 
  4129 ;; Registers used:
  4130 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4131 ;; Tracked objects:
  4132 ;;		On entry : 0/0
  4133 ;;		On exit  : 0/0
  4134 ;;		Unchanged: 0/0
  4135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4137 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4138 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4139 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4140 ;;Total ram usage:        5 bytes
  4141 ;; Hardware stack levels used:    1
  4142 ;; Hardware stack levels required when called:    8
  4143 ;; This function calls:
  4144 ;;		___lwmod
  4145 ;;		_strlen
  4146 ;; This function is called by:
  4147 ;;		_main
  4148 ;; This function uses a non-reentrant model
  4149 ;;
  4150                           
  4151                           
  4152                           ;psect for function _nrf24l01GetPipe
  4153  17C8                     _nrf24l01GetPipe:	
  4154                           
  4155                           ;incstack = 0
  4156                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4157                           ;nrf24l01GetPipe@name stored from wreg
  4158  17C8  0020               	movlb	0	; select bank0
  4159  17C9  00A9               	movwf	nrf24l01GetPipe@name
  4160                           
  4161                           ;main.c: 169: unsigned char pipe = 0;
  4162  17CA  01A8               	clrf	nrf24l01GetPipe@pipe
  4163                           
  4164                           ;main.c: 170: unsigned char i = 0;
  4165  17CB  01AA               	clrf	nrf24l01GetPipe@i
  4166                           
  4167                           ;main.c: 173: for (i = 0; i < strlen(name); i++){
  4168  17CC  01AA               	clrf	nrf24l01GetPipe@i
  4169  17CD                     l3300:	
  4170  17CD  0829               	movf	nrf24l01GetPipe@name,w
  4171  17CE  00A0               	movwf	strlen@s
  4172  17CF  3001               	movlw	1
  4173  17D0  00A1               	movwf	strlen@s+1
  4174  17D1  3196  2678  3197   	fcall	_strlen
  4175  17D4  0020               	movlb	0	; select bank0
  4176  17D5  082A               	movf	nrf24l01GetPipe@i,w
  4177  17D6  00A6               	movwf	??_nrf24l01GetPipe
  4178  17D7  01A7               	clrf	??_nrf24l01GetPipe+1
  4179  17D8  0821               	movf	?_strlen+1,w
  4180  17D9  0227               	subwf	??_nrf24l01GetPipe+1,w
  4181  17DA  1D03               	skipz
  4182  17DB  2FDE               	goto	u3335
  4183  17DC  0820               	movf	?_strlen,w
  4184  17DD  0226               	subwf	??_nrf24l01GetPipe,w
  4185  17DE                     u3335:	
  4186  17DE  1803               	btfsc	3,0
  4187  17DF  2FF0               	goto	l3302
  4188                           
  4189                           ;main.c: 174: pipe+= name[i];
  4190  17E0  082A               	movf	nrf24l01GetPipe@i,w
  4191  17E1  0729               	addwf	nrf24l01GetPipe@name,w
  4192  17E2  00A6               	movwf	??_nrf24l01GetPipe
  4193  17E3  0826               	movf	??_nrf24l01GetPipe,w
  4194  17E4  0086               	movwf	6
  4195  17E5  3001               	movlw	1	; select bank2/3
  4196  17E6  0087               	movwf	7
  4197  17E7  0801               	movf	1,w
  4198  17E8  00A7               	movwf	??_nrf24l01GetPipe+1
  4199  17E9  0827               	movf	??_nrf24l01GetPipe+1,w
  4200  17EA  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4201  17EB  3001               	movlw	1
  4202  17EC  00A6               	movwf	??_nrf24l01GetPipe
  4203  17ED  0826               	movf	??_nrf24l01GetPipe,w
  4204  17EE  07AA               	addwf	nrf24l01GetPipe@i,f
  4205  17EF  2FCD               	goto	l3300
  4206  17F0                     l3302:	
  4207                           
  4208                           ;main.c: 175: };main.c: 177: return (unsigned) pipe % 6;
  4209  17F0  3006               	movlw	6
  4210  17F1  00A0               	movwf	___lwmod@divisor
  4211  17F2  3000               	movlw	0
  4212  17F3  00A1               	movwf	___lwmod@divisor+1
  4213  17F4  0828               	movf	nrf24l01GetPipe@pipe,w
  4214  17F5  00A6               	movwf	??_nrf24l01GetPipe
  4215  17F6  01A7               	clrf	??_nrf24l01GetPipe+1
  4216  17F7  0826               	movf	??_nrf24l01GetPipe,w
  4217  17F8  00A2               	movwf	___lwmod@dividend
  4218  17F9  0827               	movf	??_nrf24l01GetPipe+1,w
  4219  17FA  00A3               	movwf	___lwmod@dividend+1
  4220  17FB  3197  279B         	fcall	___lwmod
  4221  17FD  0020               	movlb	0	; select bank0
  4222  17FE  0820               	movf	?___lwmod,w
  4223  17FF  0008               	return
  4224  1800                     __end_of_nrf24l01GetPipe:	
  4225                           
  4226                           	psect	text8
  4227  179B                     __ptext8:	
  4228 ;; *************** function ___lwmod *****************
  4229 ;; Defined at:
  4230 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;  divisor         2    0[BANK0 ] unsigned int 
  4233 ;;  dividend        2    2[BANK0 ] unsigned int 
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;  counter         1    5[BANK0 ] unsigned char 
  4236 ;; Return value:  Size  Location     Type
  4237 ;;                  2    0[BANK0 ] unsigned int 
  4238 ;; Registers used:
  4239 ;;		wreg, status,2, status,0
  4240 ;; Tracked objects:
  4241 ;;		On entry : 0/0
  4242 ;;		On exit  : 0/0
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4245 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4246 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4247 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4248 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4249 ;;Total ram usage:        6 bytes
  4250 ;; Hardware stack levels used:    1
  4251 ;; Hardware stack levels required when called:    7
  4252 ;; This function calls:
  4253 ;;		Nothing
  4254 ;; This function is called by:
  4255 ;;		_nrf24l01GetPipe
  4256 ;; This function uses a non-reentrant model
  4257 ;;
  4258                           
  4259                           
  4260                           ;psect for function ___lwmod
  4261  179B                     ___lwmod:	
  4262                           
  4263                           ;incstack = 0
  4264                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4265  179B  0020               	movlb	0	; select bank0
  4266  179C  0820               	movf	___lwmod@divisor,w
  4267  179D  0421               	iorwf	___lwmod@divisor+1,w
  4268  179E  1903               	btfsc	3,2
  4269  179F  2FC3               	goto	l3150
  4270  17A0  01A5               	clrf	___lwmod@counter
  4271  17A1  0AA5               	incf	___lwmod@counter,f
  4272  17A2                     l3140:	
  4273  17A2  1BA1               	btfsc	___lwmod@divisor+1,7
  4274  17A3  2FAE               	goto	l3142
  4275  17A4  3001               	movlw	1
  4276  17A5                     u3155:	
  4277  17A5  35A0               	lslf	___lwmod@divisor,f
  4278  17A6  0DA1               	rlf	___lwmod@divisor+1,f
  4279  17A7  0B89               	decfsz	9,f
  4280  17A8  2FA5               	goto	u3155
  4281  17A9  3001               	movlw	1
  4282  17AA  00A4               	movwf	??___lwmod
  4283  17AB  0824               	movf	??___lwmod,w
  4284  17AC  07A5               	addwf	___lwmod@counter,f
  4285  17AD  2FA2               	goto	l3140
  4286  17AE                     l3142:	
  4287  17AE  0821               	movf	___lwmod@divisor+1,w
  4288  17AF  0223               	subwf	___lwmod@dividend+1,w
  4289  17B0  1D03               	skipz
  4290  17B1  2FB4               	goto	u3175
  4291  17B2  0820               	movf	___lwmod@divisor,w
  4292  17B3  0222               	subwf	___lwmod@dividend,w
  4293  17B4                     u3175:	
  4294  17B4  1C03               	skipc
  4295  17B5  2FBA               	goto	l3146
  4296  17B6  0820               	movf	___lwmod@divisor,w
  4297  17B7  02A2               	subwf	___lwmod@dividend,f
  4298  17B8  0821               	movf	___lwmod@divisor+1,w
  4299  17B9  3BA3               	subwfb	___lwmod@dividend+1,f
  4300  17BA                     l3146:	
  4301  17BA  3001               	movlw	1
  4302  17BB                     u3185:	
  4303  17BB  36A1               	lsrf	___lwmod@divisor+1,f
  4304  17BC  0CA0               	rrf	___lwmod@divisor,f
  4305  17BD  0B89               	decfsz	9,f
  4306  17BE  2FBB               	goto	u3185
  4307  17BF  3001               	movlw	1
  4308  17C0  02A5               	subwf	___lwmod@counter,f
  4309  17C1  1D03               	btfss	3,2
  4310  17C2  2FAE               	goto	l3142
  4311  17C3                     l3150:	
  4312  17C3  0823               	movf	___lwmod@dividend+1,w
  4313  17C4  00A1               	movwf	?___lwmod+1
  4314  17C5  0822               	movf	___lwmod@dividend,w
  4315  17C6  00A0               	movwf	?___lwmod
  4316  17C7  0008               	return
  4317  17C8                     __end_of___lwmod:	
  4318                           
  4319                           	psect	text9
  4320  002E                     __ptext9:	
  4321 ;; *************** function _loop *****************
  4322 ;; Defined at:
  4323 ;;		line 126 in file "main.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;		None
  4326 ;; Auto vars:     Size  Location     Type
  4327 ;;  packet         33   16[BANK2 ] struct .
  4328 ;;  ta              3    3[BANK2 ] float 
  4329 ;;  vt              3    0[BANK2 ] float 
  4330 ;;  rfSetup         1   12[BANK2 ] struct .
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  1    wreg      void 
  4333 ;; Registers used:
  4334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4341 ;;      Locals:         0       0       0      49       0       0       0       0       0       0       0       0       
      +0       0
  4342 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4343 ;;      Totals:         0       0       1      49       0       0       0       0       0       0       0       0       
      +0       0
  4344 ;;Total ram usage:       50 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:   14
  4347 ;; This function calls:
  4348 ;;		___ftadd
  4349 ;;		___ftdiv
  4350 ;;		___ftmul
  4351 ;;		___ftneg
  4352 ;;		___lbtoft
  4353 ;;		___lltoft
  4354 ;;		_getADCValue
  4355 ;;		_nrf24l01Send
  4356 ;;		_sendMessage
  4357 ;; This function is called by:
  4358 ;;		_main
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           
  4363                           ;psect for function _loop
  4364  002E                     _loop:	
  4365                           
  4366                           ;main.c: 128: nrf24l01Packet_t packet;;main.c: 130: sendMessage(&packet, "DBG1", counter
      +                          );
  4367                           
  4368                           ;incstack = 0
  4369                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4370  002E  0022               	movlb	2	; select bank2
  4371  002F  0854               	movf	(_counter+3)^(0+256),w
  4372  0030  0020               	movlb	0	; select bank0
  4373  0031  00AB               	movwf	___lltoft@c+3
  4374  0032  0022               	movlb	2	; select bank2
  4375  0033  0853               	movf	(_counter+2)^(0+256),w
  4376  0034  0020               	movlb	0	; select bank0
  4377  0035  00AA               	movwf	___lltoft@c+2
  4378  0036  0022               	movlb	2	; select bank2
  4379  0037  0852               	movf	(_counter+1)^(0+256),w
  4380  0038  0020               	movlb	0	; select bank0
  4381  0039  00A9               	movwf	___lltoft@c+1
  4382  003A  0022               	movlb	2	; select bank2
  4383  003B  0851               	movf	_counter^(0+256),w
  4384  003C  0020               	movlb	0	; select bank0
  4385  003D  00A8               	movwf	___lltoft@c
  4386  003E  3197  2747  3180   	fcall	___lltoft
  4387  0041  0020               	movlb	0	; select bank0
  4388  0042  0828               	movf	?___lltoft,w
  4389  0043  0022               	movlb	2	; select bank2
  4390  0044  00AD               	movwf	_loop$1971^(0+256)
  4391  0045  0020               	movlb	0	; select bank0
  4392  0046  0829               	movf	?___lltoft+1,w
  4393  0047  0022               	movlb	2	; select bank2
  4394  0048  00AE               	movwf	(_loop$1971+1)^(0+256)
  4395  0049  0020               	movlb	0	; select bank0
  4396  004A  082A               	movf	?___lltoft+2,w
  4397  004B  0022               	movlb	2	; select bank2
  4398  004C  00AF               	movwf	(_loop$1971+2)^(0+256)
  4399                           
  4400                           ;main.c: 128: nrf24l01Packet_t packet;;main.c: 130: sendMessage(&packet, "DBG1", counter
      +                          );
  4401  004D  3030               	movlw	low loop@packet
  4402  004E  0021               	movlb	1	; select bank1
  4403  004F  00B9               	movwf	sendMessage@packet^(0+128)
  4404  0050  3001               	movlw	high loop@packet
  4405  0051  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4406  0052  3051               	movlw	low (STR_3| (0+32768))
  4407  0053  00BB               	movwf	sendMessage@topic^(0+128)
  4408  0054  3098               	movlw	high (STR_3| (0+32768))
  4409  0055  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4410  0056  0022               	movlb	2	; select bank2
  4411  0057  082D               	movf	_loop$1971^(0+256),w
  4412  0058  0021               	movlb	1	; select bank1
  4413  0059  00BD               	movwf	sendMessage@value^(0+128)
  4414  005A  0022               	movlb	2	; select bank2
  4415  005B  082E               	movf	(_loop$1971+1)^(0+256),w
  4416  005C  0021               	movlb	1	; select bank1
  4417  005D  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4418  005E  0022               	movlb	2	; select bank2
  4419  005F  082F               	movf	(_loop$1971+2)^(0+256),w
  4420  0060  0021               	movlb	1	; select bank1
  4421  0061  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4422  0062  318A  2268  3180   	fcall	_sendMessage
  4423                           
  4424                           ;main.c: 136: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4425  0065  30CF               	movlw	207
  4426  0066  0020               	movlb	0	; select bank0
  4427  0067  00D7               	movwf	___ftmul@f1
  4428  0068  3046               	movlw	70
  4429  0069  00D8               	movwf	___ftmul@f1+1
  4430  006A  3040               	movlw	64
  4431  006B  00D9               	movwf	___ftmul@f1+2
  4432  006C  3004               	movlw	4
  4433  006D  318C  2415  3180   	fcall	_getADCValue
  4434  0070  0020               	movlb	0	; select bank0
  4435  0071  084B               	movf	?_getADCValue,w
  4436  0072  00DA               	movwf	___ftmul@f2
  4437  0073  084C               	movf	?_getADCValue+1,w
  4438  0074  00DB               	movwf	___ftmul@f2+1
  4439  0075  084D               	movf	?_getADCValue+2,w
  4440  0076  00DC               	movwf	___ftmul@f2+2
  4441  0077  318D  2564  3180   	fcall	___ftmul
  4442  007A  0020               	movlb	0	; select bank0
  4443  007B  0857               	movf	?___ftmul,w
  4444  007C  0022               	movlb	2	; select bank2
  4445  007D  00A6               	movwf	_loop$1972^(0+256)
  4446  007E  0020               	movlb	0	; select bank0
  4447  007F  0858               	movf	?___ftmul+1,w
  4448  0080  0022               	movlb	2	; select bank2
  4449  0081  00A7               	movwf	(_loop$1972+1)^(0+256)
  4450  0082  0020               	movlb	0	; select bank0
  4451  0083  0859               	movf	?___ftmul+2,w
  4452  0084  0022               	movlb	2	; select bank2
  4453  0085  00A8               	movwf	(_loop$1972+2)^(0+256)
  4454                           
  4455                           ;main.c: 136: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4456  0086  3030               	movlw	low loop@packet
  4457  0087  0021               	movlb	1	; select bank1
  4458  0088  00B9               	movwf	sendMessage@packet^(0+128)
  4459  0089  3001               	movlw	high loop@packet
  4460  008A  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4461  008B  306F               	movlw	low (STR_4| (0+32768))
  4462  008C  00BB               	movwf	sendMessage@topic^(0+128)
  4463  008D  3098               	movlw	high (STR_4| (0+32768))
  4464  008E  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4465  008F  0022               	movlb	2	; select bank2
  4466  0090  0826               	movf	_loop$1972^(0+256),w
  4467  0091  0021               	movlb	1	; select bank1
  4468  0092  00BD               	movwf	sendMessage@value^(0+128)
  4469  0093  0022               	movlb	2	; select bank2
  4470  0094  0827               	movf	(_loop$1972+1)^(0+256),w
  4471  0095  0021               	movlb	1	; select bank1
  4472  0096  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4473  0097  0022               	movlb	2	; select bank2
  4474  0098  0828               	movf	(_loop$1972+2)^(0+256),w
  4475  0099  0021               	movlb	1	; select bank1
  4476  009A  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4477  009B  318A  2268  3180   	fcall	_sendMessage
  4478                           
  4479                           ;main.c: 138: sendMessage(&packet, "DBG2", counter);
  4480  009E  0022               	movlb	2	; select bank2
  4481  009F  0854               	movf	(_counter+3)^(0+256),w
  4482  00A0  0020               	movlb	0	; select bank0
  4483  00A1  00AB               	movwf	___lltoft@c+3
  4484  00A2  0022               	movlb	2	; select bank2
  4485  00A3  0853               	movf	(_counter+2)^(0+256),w
  4486  00A4  0020               	movlb	0	; select bank0
  4487  00A5  00AA               	movwf	___lltoft@c+2
  4488  00A6  0022               	movlb	2	; select bank2
  4489  00A7  0852               	movf	(_counter+1)^(0+256),w
  4490  00A8  0020               	movlb	0	; select bank0
  4491  00A9  00A9               	movwf	___lltoft@c+1
  4492  00AA  0022               	movlb	2	; select bank2
  4493  00AB  0851               	movf	_counter^(0+256),w
  4494  00AC  0020               	movlb	0	; select bank0
  4495  00AD  00A8               	movwf	___lltoft@c
  4496  00AE  3197  2747  3180   	fcall	___lltoft
  4497  00B1  0020               	movlb	0	; select bank0
  4498  00B2  0828               	movf	?___lltoft,w
  4499  00B3  0022               	movlb	2	; select bank2
  4500  00B4  00AD               	movwf	_loop$1971^(0+256)
  4501  00B5  0020               	movlb	0	; select bank0
  4502  00B6  0829               	movf	?___lltoft+1,w
  4503  00B7  0022               	movlb	2	; select bank2
  4504  00B8  00AE               	movwf	(_loop$1971+1)^(0+256)
  4505  00B9  0020               	movlb	0	; select bank0
  4506  00BA  082A               	movf	?___lltoft+2,w
  4507  00BB  0022               	movlb	2	; select bank2
  4508  00BC  00AF               	movwf	(_loop$1971+2)^(0+256)
  4509                           
  4510                           ;main.c: 138: sendMessage(&packet, "DBG2", counter);
  4511  00BD  3030               	movlw	low loop@packet
  4512  00BE  0021               	movlb	1	; select bank1
  4513  00BF  00B9               	movwf	sendMessage@packet^(0+128)
  4514  00C0  3001               	movlw	high loop@packet
  4515  00C1  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4516  00C2  3056               	movlw	low (STR_5| (0+32768))
  4517  00C3  00BB               	movwf	sendMessage@topic^(0+128)
  4518  00C4  3098               	movlw	high (STR_5| (0+32768))
  4519  00C5  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4520  00C6  0022               	movlb	2	; select bank2
  4521  00C7  082D               	movf	_loop$1971^(0+256),w
  4522  00C8  0021               	movlb	1	; select bank1
  4523  00C9  00BD               	movwf	sendMessage@value^(0+128)
  4524  00CA  0022               	movlb	2	; select bank2
  4525  00CB  082E               	movf	(_loop$1971+1)^(0+256),w
  4526  00CC  0021               	movlb	1	; select bank1
  4527  00CD  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4528  00CE  0022               	movlb	2	; select bank2
  4529  00CF  082F               	movf	(_loop$1971+2)^(0+256),w
  4530  00D0  0021               	movlb	1	; select bank1
  4531  00D1  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4532  00D2  318A  2268  3180   	fcall	_sendMessage
  4533                           
  4534                           ;main.c: 141: sendMessage(&packet, "ANC3mV", getADCValue(0b010011));
  4535  00D5  3030               	movlw	low loop@packet
  4536  00D6  0021               	movlb	1	; select bank1
  4537  00D7  00B9               	movwf	sendMessage@packet^(0+128)
  4538  00D8  3001               	movlw	high loop@packet
  4539  00D9  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4540  00DA  303F               	movlw	low (STR_6| (0+32768))
  4541  00DB  00BB               	movwf	sendMessage@topic^(0+128)
  4542  00DC  3098               	movlw	high (STR_6| (0+32768))
  4543  00DD  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4544  00DE  3013               	movlw	19
  4545  00DF  318C  2415  3180   	fcall	_getADCValue
  4546  00E2  0020               	movlb	0	; select bank0
  4547  00E3  084B               	movf	?_getADCValue,w
  4548  00E4  0021               	movlb	1	; select bank1
  4549  00E5  00BD               	movwf	sendMessage@value^(0+128)
  4550  00E6  0020               	movlb	0	; select bank0
  4551  00E7  084C               	movf	?_getADCValue+1,w
  4552  00E8  0021               	movlb	1	; select bank1
  4553  00E9  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4554  00EA  0020               	movlb	0	; select bank0
  4555  00EB  084D               	movf	?_getADCValue+2,w
  4556  00EC  0021               	movlb	1	; select bank1
  4557  00ED  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4558  00EE  318A  2268  3180   	fcall	_sendMessage
  4559                           
  4560                           ;main.c: 144: sendMessage(&packet, "DBG3", counter);
  4561  00F1  0022               	movlb	2	; select bank2
  4562  00F2  0854               	movf	(_counter+3)^(0+256),w
  4563  00F3  0020               	movlb	0	; select bank0
  4564  00F4  00AB               	movwf	___lltoft@c+3
  4565  00F5  0022               	movlb	2	; select bank2
  4566  00F6  0853               	movf	(_counter+2)^(0+256),w
  4567  00F7  0020               	movlb	0	; select bank0
  4568  00F8  00AA               	movwf	___lltoft@c+2
  4569  00F9  0022               	movlb	2	; select bank2
  4570  00FA  0852               	movf	(_counter+1)^(0+256),w
  4571  00FB  0020               	movlb	0	; select bank0
  4572  00FC  00A9               	movwf	___lltoft@c+1
  4573  00FD  0022               	movlb	2	; select bank2
  4574  00FE  0851               	movf	_counter^(0+256),w
  4575  00FF  0020               	movlb	0	; select bank0
  4576  0100  00A8               	movwf	___lltoft@c
  4577  0101  3197  2747  3180   	fcall	___lltoft
  4578  0104  0020               	movlb	0	; select bank0
  4579  0105  0828               	movf	?___lltoft,w
  4580  0106  0022               	movlb	2	; select bank2
  4581  0107  00AD               	movwf	_loop$1971^(0+256)
  4582  0108  0020               	movlb	0	; select bank0
  4583  0109  0829               	movf	?___lltoft+1,w
  4584  010A  0022               	movlb	2	; select bank2
  4585  010B  00AE               	movwf	(_loop$1971+1)^(0+256)
  4586  010C  0020               	movlb	0	; select bank0
  4587  010D  082A               	movf	?___lltoft+2,w
  4588  010E  0022               	movlb	2	; select bank2
  4589  010F  00AF               	movwf	(_loop$1971+2)^(0+256)
  4590                           
  4591                           ;main.c: 144: sendMessage(&packet, "DBG3", counter);
  4592  0110  3030               	movlw	low loop@packet
  4593  0111  0021               	movlb	1	; select bank1
  4594  0112  00B9               	movwf	sendMessage@packet^(0+128)
  4595  0113  3001               	movlw	high loop@packet
  4596  0114  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4597  0115  305B               	movlw	low (STR_7| (0+32768))
  4598  0116  00BB               	movwf	sendMessage@topic^(0+128)
  4599  0117  3098               	movlw	high (STR_7| (0+32768))
  4600  0118  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4601  0119  0022               	movlb	2	; select bank2
  4602  011A  082D               	movf	_loop$1971^(0+256),w
  4603  011B  0021               	movlb	1	; select bank1
  4604  011C  00BD               	movwf	sendMessage@value^(0+128)
  4605  011D  0022               	movlb	2	; select bank2
  4606  011E  082E               	movf	(_loop$1971+1)^(0+256),w
  4607  011F  0021               	movlb	1	; select bank1
  4608  0120  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4609  0121  0022               	movlb	2	; select bank2
  4610  0122  082F               	movf	(_loop$1971+2)^(0+256),w
  4611  0123  0021               	movlb	1	; select bank1
  4612  0124  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4613  0125  318A  2268  3180   	fcall	_sendMessage
  4614                           
  4615                           ;main.c: 147: FVRCONbits.TSEN = 1;
  4616  0128  0022               	movlb	2	; select bank2
  4617  0129  1697               	bsf	23,5	;volatile
  4618                           
  4619                           ;main.c: 148: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4620  012A  303D               	movlw	61
  4621  012B  318C  2415  3180   	fcall	_getADCValue
  4622  012E  0020               	movlb	0	; select bank0
  4623  012F  084B               	movf	?_getADCValue,w
  4624  0130  00D7               	movwf	___ftneg@f1
  4625  0131  084C               	movf	?_getADCValue+1,w
  4626  0132  00D8               	movwf	___ftneg@f1+1
  4627  0133  084D               	movf	?_getADCValue+2,w
  4628  0134  00D9               	movwf	___ftneg@f1+2
  4629  0135  3195  2537  3180   	fcall	___ftneg
  4630  0138  0020               	movlb	0	; select bank0
  4631  0139  0857               	movf	?___ftneg,w
  4632  013A  0022               	movlb	2	; select bank2
  4633  013B  00A9               	movwf	_loop$1973^(0+256)
  4634  013C  0020               	movlb	0	; select bank0
  4635  013D  0858               	movf	?___ftneg+1,w
  4636  013E  0022               	movlb	2	; select bank2
  4637  013F  00AA               	movwf	(_loop$1973+1)^(0+256)
  4638  0140  0020               	movlb	0	; select bank0
  4639  0141  0859               	movf	?___ftneg+2,w
  4640  0142  0022               	movlb	2	; select bank2
  4641  0143  00AB               	movwf	(_loop$1973+2)^(0+256)
  4642                           
  4643                           ;main.c: 148: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4644  0144  3000               	movlw	0
  4645  0145  0020               	movlb	0	; select bank0
  4646  0146  00BB               	movwf	___ftdiv@f2
  4647  0147  3000               	movlw	0
  4648  0148  00BC               	movwf	___ftdiv@f2+1
  4649  0149  3040               	movlw	64
  4650  014A  00BD               	movwf	___ftdiv@f2+2
  4651  014B  3012               	movlw	18
  4652  014C  00AE               	movwf	___ftadd@f1
  4653  014D  3003               	movlw	3
  4654  014E  00AF               	movwf	___ftadd@f1+1
  4655  014F  3040               	movlw	64
  4656  0150  00B0               	movwf	___ftadd@f1+2
  4657  0151  0022               	movlb	2	; select bank2
  4658  0152  0829               	movf	_loop$1973^(0+256),w
  4659  0153  0020               	movlb	0	; select bank0
  4660  0154  00B1               	movwf	___ftadd@f2
  4661  0155  0022               	movlb	2	; select bank2
  4662  0156  082A               	movf	(_loop$1973+1)^(0+256),w
  4663  0157  0020               	movlb	0	; select bank0
  4664  0158  00B2               	movwf	___ftadd@f2+1
  4665  0159  0022               	movlb	2	; select bank2
  4666  015A  082B               	movf	(_loop$1973+2)^(0+256),w
  4667  015B  0020               	movlb	0	; select bank0
  4668  015C  00B3               	movwf	___ftadd@f2+2
  4669  015D  318F  270A  3180   	fcall	___ftadd
  4670  0160  0020               	movlb	0	; select bank0
  4671  0161  082E               	movf	?___ftadd,w
  4672  0162  00BE               	movwf	___ftdiv@f1
  4673  0163  082F               	movf	?___ftadd+1,w
  4674  0164  00BF               	movwf	___ftdiv@f1+1
  4675  0165  0830               	movf	?___ftadd+2,w
  4676  0166  00C0               	movwf	___ftdiv@f1+2
  4677  0167  318C  24BB  3180   	fcall	___ftdiv
  4678  016A  0020               	movlb	0	; select bank0
  4679  016B  083B               	movf	?___ftdiv,w
  4680  016C  0022               	movlb	2	; select bank2
  4681  016D  00A0               	movwf	loop@vt^(0+256)
  4682  016E  0020               	movlb	0	; select bank0
  4683  016F  083C               	movf	?___ftdiv+1,w
  4684  0170  0022               	movlb	2	; select bank2
  4685  0171  00A1               	movwf	(loop@vt+1)^(0+256)
  4686  0172  0020               	movlb	0	; select bank0
  4687  0173  083D               	movf	?___ftdiv+2,w
  4688  0174  0022               	movlb	2	; select bank2
  4689  0175  00A2               	movwf	(loop@vt+2)^(0+256)
  4690                           
  4691                           ;main.c: 149: FVRCONbits.TSEN = 0;
  4692  0176  1297               	bcf	23,5	;volatile
  4693                           
  4694                           ;main.c: 154: float ta = (vt / -0.00132) - (0.6063 / -0.00132) - 40;
  4695  0177  30A9               	movlw	169
  4696  0178  0020               	movlb	0	; select bank0
  4697  0179  00AE               	movwf	___ftadd@f1
  4698  017A  30D1               	movlw	209
  4699  017B  00AF               	movwf	___ftadd@f1+1
  4700  017C  3043               	movlw	67
  4701  017D  00B0               	movwf	___ftadd@f1+2
  4702  017E  3004               	movlw	4
  4703  017F  00BB               	movwf	___ftdiv@f2
  4704  0180  30AD               	movlw	173
  4705  0181  00BC               	movwf	___ftdiv@f2+1
  4706  0182  30BA               	movlw	186
  4707  0183  00BD               	movwf	___ftdiv@f2+2
  4708  0184  0022               	movlb	2	; select bank2
  4709  0185  0820               	movf	loop@vt^(0+256),w
  4710  0186  0020               	movlb	0	; select bank0
  4711  0187  00BE               	movwf	___ftdiv@f1
  4712  0188  0022               	movlb	2	; select bank2
  4713  0189  0821               	movf	(loop@vt+1)^(0+256),w
  4714  018A  0020               	movlb	0	; select bank0
  4715  018B  00BF               	movwf	___ftdiv@f1+1
  4716  018C  0022               	movlb	2	; select bank2
  4717  018D  0822               	movf	(loop@vt+2)^(0+256),w
  4718  018E  0020               	movlb	0	; select bank0
  4719  018F  00C0               	movwf	___ftdiv@f1+2
  4720  0190  318C  24BB  3180   	fcall	___ftdiv
  4721  0193  0020               	movlb	0	; select bank0
  4722  0194  083B               	movf	?___ftdiv,w
  4723  0195  00B1               	movwf	___ftadd@f2
  4724  0196  083C               	movf	?___ftdiv+1,w
  4725  0197  00B2               	movwf	___ftadd@f2+1
  4726  0198  083D               	movf	?___ftdiv+2,w
  4727  0199  00B3               	movwf	___ftadd@f2+2
  4728  019A  318F  270A  3180   	fcall	___ftadd
  4729  019D  0020               	movlb	0	; select bank0
  4730  019E  082E               	movf	?___ftadd,w
  4731  019F  0022               	movlb	2	; select bank2
  4732  01A0  00A3               	movwf	loop@ta^(0+256)
  4733  01A1  0020               	movlb	0	; select bank0
  4734  01A2  082F               	movf	?___ftadd+1,w
  4735  01A3  0022               	movlb	2	; select bank2
  4736  01A4  00A4               	movwf	(loop@ta+1)^(0+256)
  4737  01A5  0020               	movlb	0	; select bank0
  4738  01A6  0830               	movf	?___ftadd+2,w
  4739  01A7  0022               	movlb	2	; select bank2
  4740  01A8  00A5               	movwf	(loop@ta+2)^(0+256)
  4741                           
  4742                           ;main.c: 156: sendMessage(&packet, "TEMP", ta);
  4743  01A9  3030               	movlw	low loop@packet
  4744  01AA  0021               	movlb	1	; select bank1
  4745  01AB  00B9               	movwf	sendMessage@packet^(0+128)
  4746  01AC  3001               	movlw	high loop@packet
  4747  01AD  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4748  01AE  306A               	movlw	low (STR_8| (0+32768))
  4749  01AF  00BB               	movwf	sendMessage@topic^(0+128)
  4750  01B0  3098               	movlw	high (STR_8| (0+32768))
  4751  01B1  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4752  01B2  0022               	movlb	2	; select bank2
  4753  01B3  0823               	movf	loop@ta^(0+256),w
  4754  01B4  0021               	movlb	1	; select bank1
  4755  01B5  00BD               	movwf	sendMessage@value^(0+128)
  4756  01B6  0022               	movlb	2	; select bank2
  4757  01B7  0824               	movf	(loop@ta+1)^(0+256),w
  4758  01B8  0021               	movlb	1	; select bank1
  4759  01B9  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4760  01BA  0022               	movlb	2	; select bank2
  4761  01BB  0825               	movf	(loop@ta+2)^(0+256),w
  4762  01BC  0021               	movlb	1	; select bank1
  4763  01BD  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4764  01BE  318A  2268  3180   	fcall	_sendMessage
  4765                           
  4766                           ;main.c: 158: sendMessage(&packet, "DBG4", counter);
  4767  01C1  0022               	movlb	2	; select bank2
  4768  01C2  0854               	movf	(_counter+3)^(0+256),w
  4769  01C3  0020               	movlb	0	; select bank0
  4770  01C4  00AB               	movwf	___lltoft@c+3
  4771  01C5  0022               	movlb	2	; select bank2
  4772  01C6  0853               	movf	(_counter+2)^(0+256),w
  4773  01C7  0020               	movlb	0	; select bank0
  4774  01C8  00AA               	movwf	___lltoft@c+2
  4775  01C9  0022               	movlb	2	; select bank2
  4776  01CA  0852               	movf	(_counter+1)^(0+256),w
  4777  01CB  0020               	movlb	0	; select bank0
  4778  01CC  00A9               	movwf	___lltoft@c+1
  4779  01CD  0022               	movlb	2	; select bank2
  4780  01CE  0851               	movf	_counter^(0+256),w
  4781  01CF  0020               	movlb	0	; select bank0
  4782  01D0  00A8               	movwf	___lltoft@c
  4783  01D1  3197  2747  3180   	fcall	___lltoft
  4784  01D4  0020               	movlb	0	; select bank0
  4785  01D5  0828               	movf	?___lltoft,w
  4786  01D6  0022               	movlb	2	; select bank2
  4787  01D7  00AD               	movwf	_loop$1971^(0+256)
  4788  01D8  0020               	movlb	0	; select bank0
  4789  01D9  0829               	movf	?___lltoft+1,w
  4790  01DA  0022               	movlb	2	; select bank2
  4791  01DB  00AE               	movwf	(_loop$1971+1)^(0+256)
  4792  01DC  0020               	movlb	0	; select bank0
  4793  01DD  082A               	movf	?___lltoft+2,w
  4794  01DE  0022               	movlb	2	; select bank2
  4795  01DF  00AF               	movwf	(_loop$1971+2)^(0+256)
  4796                           
  4797                           ;main.c: 158: sendMessage(&packet, "DBG4", counter);
  4798  01E0  3030               	movlw	low loop@packet
  4799  01E1  0021               	movlb	1	; select bank1
  4800  01E2  00B9               	movwf	sendMessage@packet^(0+128)
  4801  01E3  3001               	movlw	high loop@packet
  4802  01E4  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4803  01E5  3060               	movlw	low (STR_9| (0+32768))
  4804  01E6  00BB               	movwf	sendMessage@topic^(0+128)
  4805  01E7  3098               	movlw	high (STR_9| (0+32768))
  4806  01E8  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4807  01E9  0022               	movlb	2	; select bank2
  4808  01EA  082D               	movf	_loop$1971^(0+256),w
  4809  01EB  0021               	movlb	1	; select bank1
  4810  01EC  00BD               	movwf	sendMessage@value^(0+128)
  4811  01ED  0022               	movlb	2	; select bank2
  4812  01EE  082E               	movf	(_loop$1971+1)^(0+256),w
  4813  01EF  0021               	movlb	1	; select bank1
  4814  01F0  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4815  01F1  0022               	movlb	2	; select bank2
  4816  01F2  082F               	movf	(_loop$1971+2)^(0+256),w
  4817  01F3  0021               	movlb	1	; select bank1
  4818  01F4  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4819  01F5  318A  2268  3180   	fcall	_sendMessage
  4820                           
  4821                           ;main.c: 160: n_RF_SETUP_t rfSetup;;main.c: 161: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4822  01F8  0020               	movlb	0	; select bank0
  4823  01F9  01A0               	clrf	nrf24l01Send@data
  4824  01FA  3006               	movlw	6
  4825  01FB  3196  2697  3180   	fcall	_nrf24l01Send
  4826  01FE  0021               	movlb	1	; select bank1
  4827  01FF  00C3               	movwf	??_loop^(0+128)
  4828  0200  0843               	movf	??_loop^(0+128),w
  4829  0201  0022               	movlb	2	; select bank2
  4830  0202  00AC               	movwf	loop@rfSetup^(0+256)
  4831                           
  4832                           ;main.c: 163: sendMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4833  0203  3030               	movlw	low loop@packet
  4834  0204  0021               	movlb	1	; select bank1
  4835  0205  00B9               	movwf	sendMessage@packet^(0+128)
  4836  0206  3001               	movlw	high loop@packet
  4837  0207  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4838  0208  3046               	movlw	low (STR_10| (0+32768))
  4839  0209  00BB               	movwf	sendMessage@topic^(0+128)
  4840  020A  3098               	movlw	high (STR_10| (0+32768))
  4841  020B  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4842  020C  0022               	movlb	2	; select bank2
  4843  020D  0C2C               	rrf	loop@rfSetup^(0+256),w
  4844  020E  3903               	andlw	3
  4845  020F  3195  25D0  3180   	fcall	___lbtoft
  4846  0212  0020               	movlb	0	; select bank0
  4847  0213  0828               	movf	?___lbtoft,w
  4848  0214  0021               	movlb	1	; select bank1
  4849  0215  00BD               	movwf	sendMessage@value^(0+128)
  4850  0216  0020               	movlb	0	; select bank0
  4851  0217  0829               	movf	?___lbtoft+1,w
  4852  0218  0021               	movlb	1	; select bank1
  4853  0219  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4854  021A  0020               	movlb	0	; select bank0
  4855  021B  082A               	movf	?___lbtoft+2,w
  4856  021C  0021               	movlb	1	; select bank1
  4857  021D  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4858  021E  318A  2268  3180   	fcall	_sendMessage
  4859                           
  4860                           ;main.c: 165: sendMessage(&packet, "DBG5", counter);
  4861  0221  0022               	movlb	2	; select bank2
  4862  0222  0854               	movf	(_counter+3)^(0+256),w
  4863  0223  0020               	movlb	0	; select bank0
  4864  0224  00AB               	movwf	___lltoft@c+3
  4865  0225  0022               	movlb	2	; select bank2
  4866  0226  0853               	movf	(_counter+2)^(0+256),w
  4867  0227  0020               	movlb	0	; select bank0
  4868  0228  00AA               	movwf	___lltoft@c+2
  4869  0229  0022               	movlb	2	; select bank2
  4870  022A  0852               	movf	(_counter+1)^(0+256),w
  4871  022B  0020               	movlb	0	; select bank0
  4872  022C  00A9               	movwf	___lltoft@c+1
  4873  022D  0022               	movlb	2	; select bank2
  4874  022E  0851               	movf	_counter^(0+256),w
  4875  022F  0020               	movlb	0	; select bank0
  4876  0230  00A8               	movwf	___lltoft@c
  4877  0231  3197  2747  3180   	fcall	___lltoft
  4878  0234  0020               	movlb	0	; select bank0
  4879  0235  0828               	movf	?___lltoft,w
  4880  0236  0022               	movlb	2	; select bank2
  4881  0237  00AD               	movwf	_loop$1971^(0+256)
  4882  0238  0020               	movlb	0	; select bank0
  4883  0239  0829               	movf	?___lltoft+1,w
  4884  023A  0022               	movlb	2	; select bank2
  4885  023B  00AE               	movwf	(_loop$1971+1)^(0+256)
  4886  023C  0020               	movlb	0	; select bank0
  4887  023D  082A               	movf	?___lltoft+2,w
  4888  023E  0022               	movlb	2	; select bank2
  4889  023F  00AF               	movwf	(_loop$1971+2)^(0+256)
  4890                           
  4891                           ;main.c: 165: sendMessage(&packet, "DBG5", counter);
  4892  0240  3030               	movlw	low loop@packet
  4893  0241  0021               	movlb	1	; select bank1
  4894  0242  00B9               	movwf	sendMessage@packet^(0+128)
  4895  0243  3001               	movlw	high loop@packet
  4896  0244  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4897  0245  3065               	movlw	low (STR_11| (0+32768))
  4898  0246  00BB               	movwf	sendMessage@topic^(0+128)
  4899  0247  3098               	movlw	high (STR_11| (0+32768))
  4900  0248  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4901  0249  0022               	movlb	2	; select bank2
  4902  024A  082D               	movf	_loop$1971^(0+256),w
  4903  024B  0021               	movlb	1	; select bank1
  4904  024C  00BD               	movwf	sendMessage@value^(0+128)
  4905  024D  0022               	movlb	2	; select bank2
  4906  024E  082E               	movf	(_loop$1971+1)^(0+256),w
  4907  024F  0021               	movlb	1	; select bank1
  4908  0250  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4909  0251  0022               	movlb	2	; select bank2
  4910  0252  082F               	movf	(_loop$1971+2)^(0+256),w
  4911  0253  0021               	movlb	1	; select bank1
  4912  0254  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4913  0255  318A  2268         	fcall	_sendMessage
  4914  0257  0008               	return
  4915  0258                     __end_of_loop:	
  4916                           
  4917                           	psect	text10
  4918  0A68                     __ptext10:	
  4919 ;; *************** function _sendMessage *****************
  4920 ;; Defined at:
  4921 ;;		line 104 in file "main.c"
  4922 ;; Parameters:    Size  Location     Type
  4923 ;;  packet          2   25[BANK1 ] PTR struct .
  4924 ;;		 -> main@packet(33), loop@packet(33), 
  4925 ;;  topic           2   27[BANK1 ] PTR const unsigned char 
  4926 ;;		 -> STR_13(5), STR_11(5), STR_10(6), STR_9(5), 
  4927 ;;		 -> STR_8(5), STR_7(5), STR_6(7), STR_5(5), 
  4928 ;;		 -> STR_4(5), STR_3(5), 
  4929 ;;  value           3   29[BANK1 ] float 
  4930 ;; Auto vars:     Size  Location     Type
  4931 ;;  status          2   33[BANK1 ] int 
  4932 ;; Return value:  Size  Location     Type
  4933 ;;                  1    wreg      void 
  4934 ;; Registers used:
  4935 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4936 ;; Tracked objects:
  4937 ;;		On entry : 0/0
  4938 ;;		On exit  : 0/0
  4939 ;;		Unchanged: 0/0
  4940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4941 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  4942 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4943 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4944 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  4945 ;;Total ram usage:       10 bytes
  4946 ;; Hardware stack levels used:    1
  4947 ;; Hardware stack levels required when called:   13
  4948 ;; This function calls:
  4949 ;;		_ftoa
  4950 ;;		_nrf24l01SendPacket
  4951 ;;		_sleep
  4952 ;;		_strcat
  4953 ;;		_strcpy
  4954 ;; This function is called by:
  4955 ;;		_loop
  4956 ;;		_main
  4957 ;; This function uses a non-reentrant model
  4958 ;;
  4959                           
  4960                           
  4961                           ;psect for function _sendMessage
  4962  0A68                     _sendMessage:	
  4963                           
  4964                           ;main.c: 106: int status;;main.c: 108: strcpy(packet->Message, romData->name);
  4965                           
  4966                           ;incstack = 0
  4967                           ; Regs used in _sendMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4968  0A68  0021               	movlb	1	; select bank1
  4969  0A69  0839               	movf	sendMessage@packet^(0+128),w
  4970  0A6A  3E01               	addlw	1
  4971  0A6B  0020               	movlb	0	; select bank0
  4972  0A6C  00A0               	movwf	strcpy@to
  4973  0A6D  3000               	movlw	0
  4974  0A6E  0021               	movlb	1	; select bank1
  4975  0A6F  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4976  0A70  0020               	movlb	0	; select bank0
  4977  0A71  00A1               	movwf	strcpy@to+1
  4978  0A72  0021               	movlb	1	; select bank1
  4979  0A73  086C               	movf	_romData^(0+128),w
  4980  0A74  3E01               	addlw	1
  4981  0A75  0020               	movlb	0	; select bank0
  4982  0A76  00A2               	movwf	strcpy@from
  4983  0A77  3001               	movlw	1
  4984  0A78  00A3               	movwf	strcpy@from+1
  4985  0A79  3195  25EB  318A   	fcall	_strcpy
  4986                           
  4987                           ;main.c: 109: strcat(packet->Message, "/");
  4988  0A7C  0021               	movlb	1	; select bank1
  4989  0A7D  0839               	movf	sendMessage@packet^(0+128),w
  4990  0A7E  3E01               	addlw	1
  4991  0A7F  00B3               	movwf	strcat@to^(0+128)
  4992  0A80  3000               	movlw	0
  4993  0A81  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  4994  0A82  00B4               	movwf	(strcat@to+1)^(0+128)
  4995  0A83  307D               	movlw	low (STR_1| (0+32768))
  4996  0A84  00B5               	movwf	strcat@from^(0+128)
  4997  0A85  3098               	movlw	high (STR_1| (0+32768))
  4998  0A86  00B6               	movwf	(strcat@from^(0+128)+1)
  4999  0A87  3197  2720  318A   	fcall	_strcat
  5000                           
  5001                           ;main.c: 110: strcat(packet->Message, topic);
  5002  0A8A  0021               	movlb	1	; select bank1
  5003  0A8B  0839               	movf	sendMessage@packet^(0+128),w
  5004  0A8C  3E01               	addlw	1
  5005  0A8D  00B3               	movwf	strcat@to^(0+128)
  5006  0A8E  3000               	movlw	0
  5007  0A8F  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  5008  0A90  00B4               	movwf	(strcat@to+1)^(0+128)
  5009  0A91  083C               	movf	(sendMessage@topic+1)^(0+128),w
  5010  0A92  00B6               	movwf	(strcat@from+1)^(0+128)
  5011  0A93  083B               	movf	sendMessage@topic^(0+128),w
  5012  0A94  00B5               	movwf	strcat@from^(0+128)
  5013  0A95  3197  2720  318A   	fcall	_strcat
  5014                           
  5015                           ;main.c: 111: strcat(packet->Message, "/");
  5016  0A98  0021               	movlb	1	; select bank1
  5017  0A99  0839               	movf	sendMessage@packet^(0+128),w
  5018  0A9A  3E01               	addlw	1
  5019  0A9B  00B3               	movwf	strcat@to^(0+128)
  5020  0A9C  3000               	movlw	0
  5021  0A9D  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  5022  0A9E  00B4               	movwf	(strcat@to+1)^(0+128)
  5023  0A9F  307D               	movlw	low (STR_1| (0+32768))
  5024  0AA0  00B5               	movwf	strcat@from^(0+128)
  5025  0AA1  3098               	movlw	high (STR_1| (0+32768))
  5026  0AA2  00B6               	movwf	(strcat@from^(0+128)+1)
  5027  0AA3  3197  2720  318A   	fcall	_strcat
  5028                           
  5029                           ;main.c: 112: strcat(packet->Message, ftoa(value, &status));
  5030  0AA6  0021               	movlb	1	; select bank1
  5031  0AA7  0839               	movf	sendMessage@packet^(0+128),w
  5032  0AA8  3E01               	addlw	1
  5033  0AA9  00B3               	movwf	strcat@to^(0+128)
  5034  0AAA  3000               	movlw	0
  5035  0AAB  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  5036  0AAC  00B4               	movwf	(strcat@to+1)^(0+128)
  5037  0AAD  083D               	movf	sendMessage@value^(0+128),w
  5038  0AAE  00A6               	movwf	ftoa@f^(0+128)
  5039  0AAF  083E               	movf	(sendMessage@value+1)^(0+128),w
  5040  0AB0  00A7               	movwf	(ftoa@f+1)^(0+128)
  5041  0AB1  083F               	movf	(sendMessage@value+2)^(0+128),w
  5042  0AB2  00A8               	movwf	(ftoa@f+2)^(0+128)
  5043  0AB3  30C1               	movlw	(low (sendMessage@status| 0))& (0+255)
  5044  0AB4  00C0               	movwf	??_sendMessage^(0+128)
  5045  0AB5  0840               	movf	??_sendMessage^(0+128),w
  5046  0AB6  00A9               	movwf	ftoa@status^(0+128)
  5047  0AB7  318E  2618  318A   	fcall	_ftoa
  5048  0ABA  0021               	movlb	1	; select bank1
  5049  0ABB  00B5               	movwf	strcat@from^(0+128)
  5050  0ABC  3001               	movlw	1
  5051  0ABD  00B6               	movwf	(strcat@from+1)^(0+128)
  5052  0ABE  3197  2720  318A   	fcall	_strcat
  5053                           
  5054                           ;main.c: 117: packet->packetData.byte = 0;
  5055  0AC1  0021               	movlb	1	; select bank1
  5056  0AC2  0839               	movf	sendMessage@packet^(0+128),w
  5057  0AC3  0086               	movwf	6
  5058  0AC4  083A               	movf	(sendMessage@packet+1)^(0+128),w
  5059  0AC5  0087               	movwf	7
  5060  0AC6  0181               	clrf	1
  5061                           
  5062                           ;main.c: 118: packet->packetData.ACKRequest = 1;
  5063  0AC7  0839               	movf	sendMessage@packet^(0+128),w
  5064  0AC8  0086               	movwf	6
  5065  0AC9  083A               	movf	(sendMessage@packet+1)^(0+128),w
  5066  0ACA  0087               	movwf	7
  5067  0ACB  1501               	bsf	1,2
  5068                           
  5069                           ;main.c: 120: nrf24l01SendPacket(packet);
  5070  0ACC  083A               	movf	(sendMessage@packet+1)^(0+128),w
  5071  0ACD  0020               	movlb	0	; select bank0
  5072  0ACE  00AE               	movwf	nrf24l01SendPacket@txPacket+1
  5073  0ACF  0021               	movlb	1	; select bank1
  5074  0AD0  0839               	movf	sendMessage@packet^(0+128),w
  5075  0AD1  0020               	movlb	0	; select bank0
  5076  0AD2  00AD               	movwf	nrf24l01SendPacket@txPacket
  5077  0AD3  3197  2771  318A   	fcall	_nrf24l01SendPacket
  5078                           
  5079                           ;main.c: 122: sleep(2000);
  5080  0AD6  30D0               	movlw	208
  5081  0AD7  0020               	movlb	0	; select bank0
  5082  0AD8  00A6               	movwf	sleep@milliseconds
  5083  0AD9  3007               	movlw	7
  5084  0ADA  00A7               	movwf	sleep@milliseconds+1
  5085  0ADB  3196  26FA         	fcall	_sleep
  5086  0ADD  0008               	return
  5087  0ADE                     __end_of_sendMessage:	
  5088                           
  5089                           	psect	text11
  5090  15EB                     __ptext11:	
  5091 ;; *************** function _strcpy *****************
  5092 ;; Defined at:
  5093 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  5094 ;; Parameters:    Size  Location     Type
  5095 ;;  to              2    0[BANK0 ] PTR unsigned char 
  5096 ;;		 -> main@packet(33), loop@packet(33), romDataMap(28), 
  5097 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  5098 ;;		 -> romDataMap.name(16), STR_12(4), romDataMap(28), 
  5099 ;; Auto vars:     Size  Location     Type
  5100 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  5101 ;;		 -> main@packet(33), loop@packet(33), romDataMap(28), 
  5102 ;; Return value:  Size  Location     Type
  5103 ;;                  2    0[BANK0 ] PTR unsigned char 
  5104 ;; Registers used:
  5105 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  5106 ;; Tracked objects:
  5107 ;;		On entry : 0/0
  5108 ;;		On exit  : 0/0
  5109 ;;		Unchanged: 0/0
  5110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5111 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5112 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5114 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5115 ;;Total ram usage:        6 bytes
  5116 ;; Hardware stack levels used:    1
  5117 ;; Hardware stack levels required when called:    7
  5118 ;; This function calls:
  5119 ;;		Nothing
  5120 ;; This function is called by:
  5121 ;;		_sendMessage
  5122 ;;		_main
  5123 ;; This function uses a non-reentrant model
  5124 ;;
  5125                           
  5126                           
  5127                           ;psect for function _strcpy
  5128  15EB                     _strcpy:	
  5129                           
  5130                           ;incstack = 0
  5131                           ; Regs used in _strcpy: [wreg-fsr1h+pclath]
  5132  15EB  0020               	movlb	0	; select bank0
  5133  15EC  0821               	movf	strcpy@to+1,w
  5134  15ED  00A5               	movwf	strcpy@cp+1
  5135  15EE  0820               	movf	strcpy@to,w
  5136  15EF  00A4               	movwf	strcpy@cp
  5137  15F0                     l2800:	
  5138  15F0  0824               	movf	strcpy@cp,w
  5139  15F1  0086               	movwf	6
  5140  15F2  0825               	movf	strcpy@cp+1,w
  5141  15F3  0087               	movwf	7
  5142  15F4  0822               	movf	strcpy@from,w
  5143  15F5  0084               	movwf	4
  5144  15F6  0823               	movf	strcpy@from+1,w
  5145  15F7  0085               	movwf	5
  5146  15F8  0800               	movf	0,w	;code access
  5147  15F9  3FC0               	movwi [0]fsr1
  5148  15FA  0889               	movf	9,f
  5149  15FB  1903               	btfsc	3,2
  5150  15FC  0008               	return
  5151  15FD  3001               	movlw	1
  5152  15FE  07A4               	addwf	strcpy@cp,f
  5153  15FF  3000               	movlw	0
  5154  1600  3DA5               	addwfc	strcpy@cp+1,f
  5155  1601  3001               	movlw	1
  5156  1602  07A2               	addwf	strcpy@from,f
  5157  1603  3000               	movlw	0
  5158  1604  3DA3               	addwfc	strcpy@from+1,f
  5159  1605  2DF0               	goto	l2800
  5160  1606                     __end_of_strcpy:	
  5161                           ;	Return value of _strcpy is never used
  5162                           
  5163                           
  5164                           	psect	text12
  5165  1720                     __ptext12:	
  5166 ;; *************** function _strcat *****************
  5167 ;; Defined at:
  5168 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5169 ;; Parameters:    Size  Location     Type
  5170 ;;  to              2   19[BANK1 ] PTR unsigned char 
  5171 ;;		 -> main@packet(33), loop@packet(33), 
  5172 ;;  from            2   21[BANK1 ] PTR const unsigned char 
  5173 ;;		 -> ftoa@buf(17), STR_13(5), STR_11(5), STR_10(6), 
  5174 ;;		 -> STR_9(5), STR_8(5), STR_7(5), STR_6(7), 
  5175 ;;		 -> STR_5(5), STR_4(5), STR_3(5), STR_2(2), 
  5176 ;;		 -> STR_1(2), 
  5177 ;; Auto vars:     Size  Location     Type
  5178 ;;  cp              2   23[BANK1 ] PTR unsigned char 
  5179 ;;		 -> main@packet(33), loop@packet(33), 
  5180 ;; Return value:  Size  Location     Type
  5181 ;;                  2   19[BANK1 ] PTR unsigned char 
  5182 ;; Registers used:
  5183 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5184 ;; Tracked objects:
  5185 ;;		On entry : 0/0
  5186 ;;		On exit  : 0/0
  5187 ;;		Unchanged: 0/0
  5188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5189 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5190 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5192 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5193 ;;Total ram usage:        6 bytes
  5194 ;; Hardware stack levels used:    1
  5195 ;; Hardware stack levels required when called:    7
  5196 ;; This function calls:
  5197 ;;		Nothing
  5198 ;; This function is called by:
  5199 ;;		_sendMessage
  5200 ;; This function uses a non-reentrant model
  5201 ;;
  5202                           
  5203                           
  5204                           ;psect for function _strcat
  5205  1720                     _strcat:	
  5206                           
  5207                           ;incstack = 0
  5208                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  5209  1720  0021               	movlb	1	; select bank1
  5210  1721  0834               	movf	(strcat@to+1)^(0+128),w
  5211  1722  00B8               	movwf	(strcat@cp+1)^(0+128)
  5212  1723  0833               	movf	strcat@to^(0+128),w
  5213  1724  00B7               	movwf	strcat@cp^(0+128)
  5214  1725                     l2806:	
  5215  1725  0837               	movf	strcat@cp^(0+128),w
  5216  1726  0086               	movwf	6
  5217  1727  0838               	movf	(strcat@cp+1)^(0+128),w
  5218  1728  0087               	movwf	7
  5219  1729  0801               	movf	1,w
  5220  172A  1903               	btfsc	3,2
  5221  172B  2F39               	goto	l2810
  5222  172C  3001               	movlw	1
  5223  172D  07B7               	addwf	strcat@cp^(0+128),f
  5224  172E  3000               	movlw	0
  5225  172F  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  5226  1730  2F25               	goto	l2806
  5227  1731                     l2808:	
  5228  1731  3001               	movlw	1
  5229  1732  07B7               	addwf	strcat@cp^(0+128),f
  5230  1733  3000               	movlw	0
  5231  1734  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  5232  1735  3001               	movlw	1
  5233  1736  07B5               	addwf	strcat@from^(0+128),f
  5234  1737  3000               	movlw	0
  5235  1738  3DB6               	addwfc	(strcat@from+1)^(0+128),f
  5236  1739                     l2810:	
  5237  1739  0837               	movf	strcat@cp^(0+128),w
  5238  173A  0086               	movwf	6
  5239  173B  0838               	movf	(strcat@cp+1)^(0+128),w
  5240  173C  0087               	movwf	7
  5241  173D  0835               	movf	strcat@from^(0+128),w
  5242  173E  0084               	movwf	4
  5243  173F  0836               	movf	(strcat@from+1)^(0+128),w
  5244  1740  0085               	movwf	5
  5245  1741  0800               	movf	0,w	;code access
  5246  1742  3FC0               	movwi [0]fsr1
  5247  1743  0889               	movf	9,f
  5248  1744  1903               	btfsc	3,2
  5249  1745  0008               	return
  5250  1746  2F31               	goto	l2808
  5251  1747                     __end_of_strcat:	
  5252                           ;	Return value of _strcat is never used
  5253                           
  5254                           
  5255                           	psect	text13
  5256  16FA                     __ptext13:	
  5257 ;; *************** function _sleep *****************
  5258 ;; Defined at:
  5259 ;;		line 78 in file "main.c"
  5260 ;; Parameters:    Size  Location     Type
  5261 ;;  milliseconds    2    6[BANK0 ] unsigned int 
  5262 ;; Auto vars:     Size  Location     Type
  5263 ;;		None
  5264 ;; Return value:  Size  Location     Type
  5265 ;;                  1    wreg      void 
  5266 ;; Registers used:
  5267 ;;		wreg, status,2, status,0, pclath, cstack
  5268 ;; Tracked objects:
  5269 ;;		On entry : 0/0
  5270 ;;		On exit  : 0/0
  5271 ;;		Unchanged: 0/0
  5272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5273 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5275 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5276 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5277 ;;Total ram usage:        4 bytes
  5278 ;; Hardware stack levels used:    1
  5279 ;; Hardware stack levels required when called:   11
  5280 ;; This function calls:
  5281 ;;		_doWDTSleep
  5282 ;;		_nrf24l01SetRXMode
  5283 ;; This function is called by:
  5284 ;;		_sendMessage
  5285 ;; This function uses a non-reentrant model
  5286 ;;
  5287                           
  5288                           
  5289                           ;psect for function _sleep
  5290  16FA                     _sleep:	
  5291                           
  5292                           ;main.c: 81: milliseconds = (unsigned int) (milliseconds / (128 + 128));
  5293                           
  5294                           ;incstack = 0
  5295                           ; Regs used in _sleep: [wreg+status,2+status,0+pclath+cstack]
  5296  16FA  0020               	movlb	0	; select bank0
  5297  16FB  0827               	movf	sleep@milliseconds+1,w
  5298  16FC  00A9               	movwf	??_sleep+1
  5299  16FD  0826               	movf	sleep@milliseconds,w
  5300  16FE  00A8               	movwf	??_sleep
  5301  16FF  0829               	movf	??_sleep+1,w
  5302  1700  00A8               	movwf	??_sleep
  5303  1701  01A9               	clrf	??_sleep+1
  5304  1702  0828               	movf	??_sleep,w
  5305  1703  00A6               	movwf	sleep@milliseconds
  5306  1704  0829               	movf	??_sleep+1,w
  5307  1705  00A7               	movwf	sleep@milliseconds+1
  5308                           
  5309                           ;main.c: 84: milliseconds++;
  5310  1706  3001               	movlw	1
  5311  1707  07A6               	addwf	sleep@milliseconds,f
  5312  1708  3000               	movlw	0
  5313  1709  3DA7               	addwfc	sleep@milliseconds+1,f
  5314  170A                     l2794:	
  5315                           ;main.c: 87: while (--milliseconds){
  5316                           
  5317  170A  3001               	movlw	1
  5318  170B  0020               	movlb	0	; select bank0
  5319  170C  02A6               	subwf	sleep@milliseconds,f
  5320  170D  3000               	movlw	0
  5321  170E  3BA7               	subwfb	sleep@milliseconds+1,f
  5322  170F  0826               	movf	sleep@milliseconds,w
  5323  1710  0427               	iorwf	sleep@milliseconds+1,w
  5324  1711  1903               	btfsc	3,2
  5325  1712  0008               	return
  5326                           
  5327                           ;main.c: 93: doWDTSleep(0b00111);
  5328  1713  3007               	movlw	7
  5329  1714  3195  2583  3196   	fcall	_doWDTSleep
  5330                           
  5331                           ;main.c: 96: nrf24l01SetRXMode(0);
  5332  1717  3000               	movlw	0
  5333  1718  3188  2094  3196   	fcall	_nrf24l01SetRXMode
  5334                           
  5335                           ;main.c: 99: doWDTSleep(0b00111);
  5336  171B  3007               	movlw	7
  5337  171C  3195  2583  3196   	fcall	_doWDTSleep
  5338  171F  2F0A               	goto	l2794
  5339  1720                     __end_of_sleep:	
  5340                           
  5341                           	psect	text14
  5342  1771                     __ptext14:	
  5343 ;; *************** function _nrf24l01SendPacket *****************
  5344 ;; Defined at:
  5345 ;;		line 220 in file "nrf24l01.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;  txPacket        2   13[BANK0 ] PTR struct .
  5348 ;;		 -> main@packet(33), loop@packet(33), 
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;		None
  5351 ;; Return value:  Size  Location     Type
  5352 ;;                  2   13[BANK0 ] unsigned int 
  5353 ;; Registers used:
  5354 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5355 ;; Tracked objects:
  5356 ;;		On entry : 0/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5360 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5362 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5363 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5364 ;;Total ram usage:        3 bytes
  5365 ;; Hardware stack levels used:    1
  5366 ;; Hardware stack levels required when called:   12
  5367 ;; This function calls:
  5368 ;;		_nrf24l01Service
  5369 ;; This function is called by:
  5370 ;;		_sendMessage
  5371 ;; This function uses a non-reentrant model
  5372 ;;
  5373                           
  5374                           
  5375                           ;psect for function _nrf24l01SendPacket
  5376  1771                     _nrf24l01SendPacket:	
  5377                           
  5378                           ;nrf24l01.c: 222: nrf24l01Service();
  5379                           
  5380                           ;incstack = 0
  5381                           ; Regs used in _nrf24l01SendPacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5382  1771  3184  2425  3197   	fcall	_nrf24l01Service
  5383                           
  5384                           ;nrf24l01.c: 224: if (status.TX == statuses.TX.Idle){
  5385  1774  3034               	movlw	low (_statuses| (0+32768))
  5386  1775  0084               	movwf	4
  5387  1776  3098               	movlw	high (_statuses| (0+32768))
  5388  1777  0085               	movwf	5
  5389  1778  0800               	movf	0,w	;code access
  5390  1779  0020               	movlb	0	; select bank0
  5391  177A  00AF               	movwf	??_nrf24l01SendPacket
  5392  177B  0021               	movlb	1	; select bank1
  5393  177C  0867               	movf	_status^(0+128),w	;volatile
  5394  177D  390F               	andlw	15
  5395  177E  0020               	movlb	0	; select bank0
  5396  177F  062F               	xorwf	??_nrf24l01SendPacket,w
  5397  1780  1D03               	skipz
  5398  1781  0008               	return
  5399                           
  5400                           ;nrf24l01.c: 226: TXPacket = txPacket;
  5401  1782  082E               	movf	nrf24l01SendPacket@txPacket+1,w
  5402  1783  0021               	movlb	1	; select bank1
  5403  1784  00EA               	movwf	(_TXPacket+1)^(0+128)
  5404  1785  0020               	movlb	0	; select bank0
  5405  1786  082D               	movf	nrf24l01SendPacket@txPacket,w
  5406  1787  0021               	movlb	1	; select bank1
  5407  1788  00E9               	movwf	_TXPacket^(0+128)
  5408                           
  5409                           ;nrf24l01.c: 227: status.TX = statuses.TX.Ready;
  5410  1789  3035               	movlw	low ((_statuses+1)| (0+32768))
  5411  178A  0084               	movwf	4
  5412  178B  3098               	movlw	high ((_statuses+1)| (0+32768))
  5413  178C  0085               	movwf	5
  5414  178D  0800               	movf	0,w	;code access
  5415  178E  0020               	movlb	0	; select bank0
  5416  178F  00AF               	movwf	??_nrf24l01SendPacket
  5417  1790  0021               	movlb	1	; select bank1
  5418  1791  0867               	movf	_status^(0+128),w	;volatile
  5419  1792  0020               	movlb	0	; select bank0
  5420  1793  062F               	xorwf	??_nrf24l01SendPacket,w
  5421  1794  39F0               	andlw	-16
  5422  1795  062F               	xorwf	??_nrf24l01SendPacket,w
  5423  1796  0021               	movlb	1	; select bank1
  5424  1797  00E7               	movwf	_status^(0+128)	;volatile
  5425                           
  5426                           ;nrf24l01.c: 229: nrf24l01Service();
  5427  1798  3184  2425         	fcall	_nrf24l01Service
  5428                           
  5429                           ;nrf24l01.c: 231: return 1;;	Return value of _nrf24l01SendPacket is never used
  5430  179A  0008               	return
  5431  179B                     __end_of_nrf24l01SendPacket:	
  5432                           ;nrf24l01.c: 232: };nrf24l01.c: 234: return 0;;	Return value of _nrf24l01SendPacket is n
      +                          ever used
  5433                           
  5434                           
  5435                           	psect	text15
  5436  0425                     __ptext15:	
  5437 ;; *************** function _nrf24l01Service *****************
  5438 ;; Defined at:
  5439 ;;		line 273 in file "nrf24l01.c"
  5440 ;; Parameters:    Size  Location     Type
  5441 ;;		None
  5442 ;; Auto vars:     Size  Location     Type
  5443 ;;  width           1   11[BANK0 ] unsigned char 
  5444 ;;  i               1   12[BANK0 ] unsigned char 
  5445 ;; Return value:  Size  Location     Type
  5446 ;;                  1    wreg      void 
  5447 ;; Registers used:
  5448 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5449 ;; Tracked objects:
  5450 ;;		On entry : 0/0
  5451 ;;		On exit  : 0/0
  5452 ;;		Unchanged: 0/0
  5453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5455 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5456 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5457 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5458 ;;Total ram usage:        6 bytes
  5459 ;; Hardware stack levels used:    1
  5460 ;; Hardware stack levels required when called:   11
  5461 ;; This function calls:
  5462 ;;		_enableInterrupts
  5463 ;;		_memset
  5464 ;;		_nrf24l01CEHigh
  5465 ;;		_nrf24l01CELow
  5466 ;;		_nrf24l01SPIEnd
  5467 ;;		_nrf24l01SPISend
  5468 ;;		_nrf24l01SPIStart
  5469 ;;		_nrf24l01Send
  5470 ;;		_nrf24l01SetRXMode
  5471 ;;		_strlen
  5472 ;; This function is called by:
  5473 ;;		_nrf24l01SendPacket
  5474 ;; This function uses a non-reentrant model
  5475 ;;
  5476                           
  5477                           
  5478                           ;psect for function _nrf24l01Service
  5479  0425                     _nrf24l01Service:	
  5480                           
  5481                           ;nrf24l01.c: 275: unsigned char i;;nrf24l01.c: 277: if (status.TX == statuses.TX.Ready){
  5482                           
  5483                           ;incstack = 0
  5484                           ; Regs used in _nrf24l01Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5485  0425  3035               	movlw	low ((_statuses+1)| (0+32768))
  5486  0426  0084               	movwf	4
  5487  0427  3098               	movlw	high ((_statuses+1)| (0+32768))
  5488  0428  0085               	movwf	5
  5489  0429  0800               	movf	0,w	;code access
  5490  042A  0020               	movlb	0	; select bank0
  5491  042B  00A7               	movwf	??_nrf24l01Service
  5492  042C  0021               	movlb	1	; select bank1
  5493  042D  0867               	movf	_status^(0+128),w	;volatile
  5494  042E  390F               	andlw	15
  5495  042F  0020               	movlb	0	; select bank0
  5496  0430  0627               	xorwf	??_nrf24l01Service,w
  5497  0431  1D03               	skipz
  5498  0432  2CA7               	goto	l2470
  5499                           
  5500                           ;nrf24l01.c: 280: enableInterrupts(0);
  5501  0433  3000               	movlw	0
  5502  0434  3195  2527  3184   	fcall	_enableInterrupts
  5503                           
  5504                           ;nrf24l01.c: 283: nrf24l01SetRXMode(0);
  5505  0437  3000               	movlw	0
  5506  0438  3188  2094  3184   	fcall	_nrf24l01SetRXMode
  5507                           
  5508                           ;nrf24l01.c: 286: nrf24l01SPIStart();
  5509  043B  3195  252F  3184   	fcall	_nrf24l01SPIStart
  5510                           
  5511                           ;nrf24l01.c: 289: nrf24l01SPISend((unsigned) 0b10110000);
  5512  043E  30B0               	movlw	176
  5513  043F  3195  2540  3184   	fcall	_nrf24l01SPISend
  5514                           
  5515                           ;nrf24l01.c: 291: nrf24l01SPISend(TXPacket->packetData.byte);
  5516  0442  0021               	movlb	1	; select bank1
  5517  0443  0869               	movf	_TXPacket^(0+128),w
  5518  0444  0086               	movwf	6
  5519  0445  086A               	movf	(_TXPacket+1)^(0+128),w
  5520  0446  0087               	movwf	7
  5521  0447  0801               	movf	1,w
  5522  0448  3195  2540  3184   	fcall	_nrf24l01SPISend
  5523                           
  5524                           ;nrf24l01.c: 294: for (i = 0; (i < strlen(TXPacket->Message)) && (i < 31); i++) {
  5525  044B  0020               	movlb	0	; select bank0
  5526  044C  01AC               	clrf	nrf24l01Service@i
  5527  044D  2C67               	goto	l2452
  5528  044E                     l2448:	
  5529                           
  5530                           ;nrf24l01.c: 295: nrf24l01SPISend(TXPacket->Message[i]);
  5531  044E  082C               	movf	nrf24l01Service@i,w
  5532  044F  3E01               	addlw	1
  5533  0450  00A7               	movwf	??_nrf24l01Service
  5534  0451  3000               	movlw	0
  5535  0452  1803               	skipnc
  5536  0453  3001               	movlw	1
  5537  0454  00A8               	movwf	??_nrf24l01Service+1
  5538  0455  0827               	movf	??_nrf24l01Service,w
  5539  0456  0021               	movlb	1	; select bank1
  5540  0457  0769               	addwf	_TXPacket^(0+128),w
  5541  0458  0086               	movwf	6
  5542  0459  0020               	movlb	0	; select bank0
  5543  045A  0828               	movf	??_nrf24l01Service+1,w
  5544  045B  0021               	movlb	1	; select bank1
  5545  045C  3D6A               	addwfc	(_TXPacket+1)^(0+128),w
  5546  045D  0087               	movwf	7
  5547  045E  0801               	movf	1,w
  5548  045F  3195  2540  3184   	fcall	_nrf24l01SPISend
  5549  0462  3001               	movlw	1
  5550  0463  0020               	movlb	0	; select bank0
  5551  0464  00A7               	movwf	??_nrf24l01Service
  5552  0465  0827               	movf	??_nrf24l01Service,w
  5553  0466  07AC               	addwf	nrf24l01Service@i,f
  5554  0467                     l2452:	
  5555  0467  0021               	movlb	1	; select bank1
  5556  0468  0869               	movf	_TXPacket^(0+128),w
  5557  0469  3E01               	addlw	1
  5558  046A  0020               	movlb	0	; select bank0
  5559  046B  00A7               	movwf	??_nrf24l01Service
  5560  046C  3000               	movlw	0
  5561  046D  0021               	movlb	1	; select bank1
  5562  046E  3D6A               	addwfc	(_TXPacket+1)^(0+128),w
  5563  046F  0020               	movlb	0	; select bank0
  5564  0470  00A8               	movwf	??_nrf24l01Service+1
  5565  0471  0827               	movf	??_nrf24l01Service,w
  5566  0472  00A0               	movwf	strlen@s
  5567  0473  0828               	movf	??_nrf24l01Service+1,w
  5568  0474  00A1               	movwf	strlen@s+1
  5569  0475  3196  2678  3184   	fcall	_strlen
  5570  0478  0020               	movlb	0	; select bank0
  5571  0479  082C               	movf	nrf24l01Service@i,w
  5572  047A  00A9               	movwf	??_nrf24l01Service+2
  5573  047B  01AA               	clrf	??_nrf24l01Service+3
  5574  047C  0821               	movf	?_strlen+1,w
  5575  047D  022A               	subwf	??_nrf24l01Service+3,w
  5576  047E  1D03               	skipz
  5577  047F  2C82               	goto	u2305
  5578  0480  0820               	movf	?_strlen,w
  5579  0481  0229               	subwf	??_nrf24l01Service+2,w
  5580  0482                     u2305:	
  5581  0482  1803               	skipnc
  5582  0483  2C88               	goto	l2456
  5583  0484  301F               	movlw	31
  5584  0485  022C               	subwf	nrf24l01Service@i,w
  5585  0486  1C03               	skipc
  5586  0487  2C4E               	goto	l2448
  5587  0488                     l2456:	
  5588                           
  5589                           ;nrf24l01.c: 296: };nrf24l01.c: 299: nrf24l01SPIEnd();
  5590  0488  3195  2520  3184   	fcall	_nrf24l01SPIEnd
  5591                           
  5592                           ;nrf24l01.c: 302: status.TX = statuses.TX.Sending;
  5593  048B  3036               	movlw	low ((_statuses+2)| (0+32768))
  5594  048C  0084               	movwf	4
  5595  048D  3098               	movlw	high ((_statuses+2)| (0+32768))
  5596  048E  0085               	movwf	5
  5597  048F  0800               	movf	0,w	;code access
  5598  0490  0020               	movlb	0	; select bank0
  5599  0491  00A7               	movwf	??_nrf24l01Service
  5600  0492  0021               	movlb	1	; select bank1
  5601  0493  0867               	movf	_status^(0+128),w	;volatile
  5602  0494  0020               	movlb	0	; select bank0
  5603  0495  0627               	xorwf	??_nrf24l01Service,w
  5604  0496  39F0               	andlw	-16
  5605  0497  0627               	xorwf	??_nrf24l01Service,w
  5606  0498  0021               	movlb	1	; select bank1
  5607  0499  00E7               	movwf	_status^(0+128)	;volatile
  5608                           
  5609                           ;nrf24l01.c: 305: enableInterrupts(1);
  5610  049A  3001               	movlw	1
  5611  049B  3195  2527  3184   	fcall	_enableInterrupts
  5612                           
  5613                           ;nrf24l01.c: 308: nrf24l01CEHigh();
  5614  049E  3195  2514  3184   	fcall	_nrf24l01CEHigh
  5615                           
  5616                           ;nrf24l01.c: 309: _delay((unsigned long)((12)*(32000000/4000000.0)));
  5617  04A1  3020               	movlw	32
  5618  04A2                     u3427:	
  5619  04A2  0B89               	decfsz	9,f
  5620  04A3  2CA2               	goto	u3427
  5621                           
  5622                           ;nrf24l01.c: 310: nrf24l01CELow();
  5623  04A4  3195  2517  3184   	fcall	_nrf24l01CELow
  5624  04A7                     l2470:	
  5625                           
  5626                           ;nrf24l01.c: 315: };nrf24l01.c: 317: if (status.TX == statuses.TX.Sent){
  5627  04A7  3037               	movlw	low ((_statuses+3)| (0+32768))
  5628  04A8  0084               	movwf	4
  5629  04A9  3098               	movlw	high ((_statuses+3)| (0+32768))
  5630  04AA  0085               	movwf	5
  5631  04AB  0800               	movf	0,w	;code access
  5632  04AC  0020               	movlb	0	; select bank0
  5633  04AD  00A7               	movwf	??_nrf24l01Service
  5634  04AE  0021               	movlb	1	; select bank1
  5635  04AF  0867               	movf	_status^(0+128),w	;volatile
  5636  04B0  390F               	andlw	15
  5637  04B1  0020               	movlb	0	; select bank0
  5638  04B2  0627               	xorwf	??_nrf24l01Service,w
  5639  04B3  1D03               	skipz
  5640  04B4  2CCF               	goto	l286
  5641                           
  5642                           ;nrf24l01.c: 320: if (TXPacket->packetData.ACKRequest){
  5643  04B5  0021               	movlb	1	; select bank1
  5644  04B6  0869               	movf	_TXPacket^(0+128),w
  5645  04B7  0086               	movwf	6
  5646  04B8  086A               	movf	(_TXPacket+1)^(0+128),w
  5647  04B9  0087               	movwf	7
  5648  04BA  1D01               	btfss	1,2
  5649  04BB  2CC0               	goto	l2476
  5650                           
  5651                           ;nrf24l01.c: 321: status.TX = statuses.TX.PendingACK;
  5652  04BC  3038               	movlw	low ((_statuses+4)| (0+32768))
  5653  04BD  0084               	movwf	4
  5654  04BE  3098               	movlw	high ((_statuses+4)| (0+32768))
  5655  04BF  2CC3               	goto	L1
  5656  04C0                     l2476:	
  5657                           ;nrf24l01.c: 322: }
  5658                           
  5659                           
  5660                           ;nrf24l01.c: 325: else{;nrf24l01.c: 326: status.TX = statuses.TX.Idle;
  5661  04C0  3034               	movlw	low (_statuses| (0+32768))
  5662  04C1  0084               	movwf	4
  5663  04C2  3098               	movlw	high (_statuses| (0+32768))
  5664  04C3                     L1:	
  5665  04C3  0085               	movwf	5
  5666  04C4  0800               	movf	0,w	;code access
  5667  04C5  0020               	movlb	0	; select bank0
  5668  04C6  00A7               	movwf	??_nrf24l01Service
  5669  04C7  0021               	movlb	1	; select bank1
  5670  04C8  0867               	movf	_status^(0+128),w	;volatile
  5671  04C9  0020               	movlb	0	; select bank0
  5672  04CA  0627               	xorwf	??_nrf24l01Service,w
  5673  04CB  39F0               	andlw	-16
  5674  04CC  0627               	xorwf	??_nrf24l01Service,w
  5675  04CD  0021               	movlb	1	; select bank1
  5676  04CE  00E7               	movwf	_status^(0+128)	;volatile
  5677  04CF                     l286:	
  5678                           
  5679                           ;nrf24l01.c: 327: };nrf24l01.c: 328: };nrf24l01.c: 331: if (status.TX == statuses.TX.Pen
      +                          dingACK){
  5680  04CF  3038               	movlw	low ((_statuses+4)| (0+32768))
  5681  04D0  0084               	movwf	4
  5682  04D1  3098               	movlw	high ((_statuses+4)| (0+32768))
  5683  04D2  0085               	movwf	5
  5684  04D3  0800               	movf	0,w	;code access
  5685  04D4  0020               	movlb	0	; select bank0
  5686  04D5  00A7               	movwf	??_nrf24l01Service
  5687  04D6  0021               	movlb	1	; select bank1
  5688  04D7  0867               	movf	_status^(0+128),w	;volatile
  5689  04D8  390F               	andlw	15
  5690  04D9  0020               	movlb	0	; select bank0
  5691  04DA  0627               	xorwf	??_nrf24l01Service,w
  5692  04DB  1D03               	skipz
  5693  04DC  2CF0               	goto	l2482
  5694                           
  5695                           ;nrf24l01.c: 334: nrf24l01SetRXMode(1);
  5696  04DD  3001               	movlw	1
  5697  04DE  3188  2094  3184   	fcall	_nrf24l01SetRXMode
  5698                           
  5699                           ;nrf24l01.c: 337: status.TX = statuses.TX.Idle;
  5700  04E1  3034               	movlw	low (_statuses| (0+32768))
  5701  04E2  0084               	movwf	4
  5702  04E3  3098               	movlw	high (_statuses| (0+32768))
  5703  04E4  0085               	movwf	5
  5704  04E5  0800               	movf	0,w	;code access
  5705  04E6  0020               	movlb	0	; select bank0
  5706  04E7  00A7               	movwf	??_nrf24l01Service
  5707  04E8  0021               	movlb	1	; select bank1
  5708  04E9  0867               	movf	_status^(0+128),w	;volatile
  5709  04EA  0020               	movlb	0	; select bank0
  5710  04EB  0627               	xorwf	??_nrf24l01Service,w
  5711  04EC  39F0               	andlw	-16
  5712  04ED  0627               	xorwf	??_nrf24l01Service,w
  5713  04EE  0021               	movlb	1	; select bank1
  5714  04EF  00E7               	movwf	_status^(0+128)	;volatile
  5715  04F0                     l2482:	
  5716                           
  5717                           ;nrf24l01.c: 338: };nrf24l01.c: 340: if (status.RX == statuses.RX.Pending){
  5718  04F0  303A               	movlw	low ((_statuses+6)| (0+32768))
  5719  04F1  0084               	movwf	4
  5720  04F2  3098               	movlw	high ((_statuses+6)| (0+32768))
  5721  04F3  0085               	movwf	5
  5722  04F4  0800               	movf	0,w	;code access
  5723  04F5  0020               	movlb	0	; select bank0
  5724  04F6  00A7               	movwf	??_nrf24l01Service
  5725  04F7  0021               	movlb	1	; select bank1
  5726  04F8  0E67               	swapf	_status^(0+128),w	;volatile
  5727  04F9  390F               	andlw	15
  5728  04FA  0020               	movlb	0	; select bank0
  5729  04FB  0627               	xorwf	??_nrf24l01Service,w
  5730  04FC  1D03               	skipz
  5731  04FD  0008               	return
  5732                           
  5733                           ;nrf24l01.c: 343: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  5734  04FE  3000               	movlw	0
  5735  04FF  00A0               	movwf	memset@c
  5736  0500  00A1               	movwf	memset@c+1
  5737  0501  3020               	movlw	32
  5738  0502  00A2               	movwf	memset@n
  5739  0503  3000               	movlw	0
  5740  0504  00A3               	movwf	memset@n+1
  5741  0505  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5742  0506  3196  2622  3184   	fcall	_memset
  5743                           
  5744                           ;nrf24l01.c: 344: RXPacket.packetData.byte = 0x00;
  5745  0509  0023               	movlb	3	; select bank3
  5746  050A  01A0               	clrf	_RXPacket^(0+384)
  5747                           
  5748                           ;nrf24l01.c: 347: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  5749  050B  0020               	movlb	0	; select bank0
  5750  050C  01A0               	clrf	nrf24l01Send@data
  5751  050D  3060               	movlw	96
  5752  050E  3196  2697  3184   	fcall	_nrf24l01Send
  5753  0511  0020               	movlb	0	; select bank0
  5754  0512  00A7               	movwf	??_nrf24l01Service
  5755  0513  0827               	movf	??_nrf24l01Service,w
  5756  0514  00AB               	movwf	nrf24l01Service@width
  5757                           
  5758                           ;nrf24l01.c: 350: nrf24l01CELow();
  5759  0515  3195  2517  3184   	fcall	_nrf24l01CELow
  5760                           
  5761                           ;nrf24l01.c: 353: nrf24l01SPIStart();
  5762  0518  3195  252F  3184   	fcall	_nrf24l01SPIStart
  5763                           
  5764                           ;nrf24l01.c: 356: nrf24l01SPISend((unsigned) 0b01100001);
  5765  051B  3061               	movlw	97
  5766  051C  3195  2540  3184   	fcall	_nrf24l01SPISend
  5767                           
  5768                           ;nrf24l01.c: 359: RXPacket.packetData.byte = nrf24l01SPISend(0);
  5769  051F  3000               	movlw	0
  5770  0520  3195  2540  3184   	fcall	_nrf24l01SPISend
  5771  0523  0020               	movlb	0	; select bank0
  5772  0524  00A7               	movwf	??_nrf24l01Service
  5773  0525  0827               	movf	??_nrf24l01Service,w
  5774  0526  0023               	movlb	3	; select bank3
  5775  0527  00A0               	movwf	_RXPacket^(0+384)
  5776                           
  5777                           ;nrf24l01.c: 360: width--;
  5778  0528  3001               	movlw	1
  5779  0529  0020               	movlb	0	; select bank0
  5780  052A  02AB               	subwf	nrf24l01Service@width,f
  5781                           
  5782                           ;nrf24l01.c: 362: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
  5783  052B  01AC               	clrf	nrf24l01Service@i
  5784  052C  2D3E               	goto	l2506
  5785  052D                     l2502:	
  5786                           
  5787                           ;nrf24l01.c: 364: RXPacket.Message[i] = nrf24l01SPISend(0);
  5788  052D  3000               	movlw	0
  5789  052E  3195  2540  3184   	fcall	_nrf24l01SPISend
  5790  0531  0020               	movlb	0	; select bank0
  5791  0532  00A7               	movwf	??_nrf24l01Service
  5792  0533  082C               	movf	nrf24l01Service@i,w
  5793  0534  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5794  0535  0086               	movwf	6
  5795  0536  3001               	movlw	1	; select bank3/4
  5796  0537  0087               	movwf	7
  5797  0538  0827               	movf	??_nrf24l01Service,w
  5798  0539  0081               	movwf	1
  5799  053A  3001               	movlw	1
  5800  053B  00A7               	movwf	??_nrf24l01Service
  5801  053C  0827               	movf	??_nrf24l01Service,w
  5802  053D  07AC               	addwf	nrf24l01Service@i,f
  5803  053E                     l2506:	
  5804  053E  082B               	movf	nrf24l01Service@width,w
  5805  053F  022C               	subwf	nrf24l01Service@i,w
  5806  0540  1803               	skipnc
  5807  0541  2D46               	goto	l2510
  5808  0542  3020               	movlw	32
  5809  0543  022C               	subwf	nrf24l01Service@i,w
  5810  0544  1C03               	skipc
  5811  0545  2D2D               	goto	l2502
  5812  0546                     l2510:	
  5813                           
  5814                           ;nrf24l01.c: 365: };nrf24l01.c: 368: nrf24l01SPIEnd();
  5815  0546  3195  2520  3184   	fcall	_nrf24l01SPIEnd
  5816                           
  5817                           ;nrf24l01.c: 371: nrf24l01CEHigh();
  5818  0549  3195  2514  3184   	fcall	_nrf24l01CEHigh
  5819                           
  5820                           ;nrf24l01.c: 374: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
  5821  054C  0021               	movlb	1	; select bank1
  5822  054D  0C68               	rrf	(_status^(0+128)+1),w	;volatile
  5823  054E  3907               	andlw	7
  5824  054F  0020               	movlb	0	; select bank0
  5825  0550  00A7               	movwf	??_nrf24l01Service
  5826  0551  0EA7               	swapf	??_nrf24l01Service,f
  5827  0552  0023               	movlb	3	; select bank3
  5828  0553  0820               	movf	_RXPacket^(0+384),w
  5829  0554  0020               	movlb	0	; select bank0
  5830  0555  0627               	xorwf	??_nrf24l01Service,w
  5831  0556  398F               	andlw	-113
  5832  0557  0627               	xorwf	??_nrf24l01Service,w
  5833  0558  0023               	movlb	3	; select bank3
  5834  0559  00A0               	movwf	_RXPacket^(0+384)
  5835                           
  5836                           ;nrf24l01.c: 377: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  5837  055A  0020               	movlb	0	; select bank0
  5838  055B  01A0               	clrf	nrf24l01Send@data
  5839  055C  3009               	movlw	9
  5840  055D  3196  2697         	fcall	_nrf24l01Send
  5841  055F  0020               	movlb	0	; select bank0
  5842  0560  00A7               	movwf	??_nrf24l01Service
  5843  0561  0023               	movlb	3	; select bank3
  5844  0562  0820               	movf	_RXPacket^(0+384),w
  5845  0563  0020               	movlb	0	; select bank0
  5846  0564  0627               	xorwf	??_nrf24l01Service,w
  5847  0565  39FE               	andlw	-2
  5848  0566  0627               	xorwf	??_nrf24l01Service,w
  5849  0567  0023               	movlb	3	; select bank3
  5850  0568  00A0               	movwf	_RXPacket^(0+384)
  5851                           
  5852                           ;nrf24l01.c: 379: status.RX = statuses.RX.Ready;
  5853  0569  303B               	movlw	low ((_statuses+7)| (0+32768))
  5854  056A  0084               	movwf	4
  5855  056B  3098               	movlw	high ((_statuses+7)| (0+32768))
  5856  056C  0085               	movwf	5
  5857  056D  0800               	movf	0,w	;code access
  5858  056E  0020               	movlb	0	; select bank0
  5859  056F  00A7               	movwf	??_nrf24l01Service
  5860  0570  0EA7               	swapf	??_nrf24l01Service,f
  5861  0571  0021               	movlb	1	; select bank1
  5862  0572  0867               	movf	_status^(0+128),w	;volatile
  5863  0573  0020               	movlb	0	; select bank0
  5864  0574  0627               	xorwf	??_nrf24l01Service,w
  5865  0575  390F               	andlw	-241
  5866  0576  0627               	xorwf	??_nrf24l01Service,w
  5867  0577  0021               	movlb	1	; select bank1
  5868  0578  00E7               	movwf	_status^(0+128)	;volatile
  5869  0579  0008               	return
  5870  057A                     __end_of_nrf24l01Service:	
  5871                           
  5872                           	psect	text16
  5873  1678                     __ptext16:	
  5874 ;; *************** function _strlen *****************
  5875 ;; Defined at:
  5876 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  5877 ;; Parameters:    Size  Location     Type
  5878 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  5879 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5880 ;;		 -> loop@packet(33), romDataMap(28), 
  5881 ;; Auto vars:     Size  Location     Type
  5882 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  5883 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5884 ;;		 -> loop@packet(33), romDataMap(28), 
  5885 ;; Return value:  Size  Location     Type
  5886 ;;                  2    0[BANK0 ] unsigned int 
  5887 ;; Registers used:
  5888 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5889 ;; Tracked objects:
  5890 ;;		On entry : 0/0
  5891 ;;		On exit  : 0/0
  5892 ;;		Unchanged: 0/0
  5893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5894 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5895 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5896 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5897 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5898 ;;Total ram usage:        6 bytes
  5899 ;; Hardware stack levels used:    1
  5900 ;; Hardware stack levels required when called:    7
  5901 ;; This function calls:
  5902 ;;		Nothing
  5903 ;; This function is called by:
  5904 ;;		_nrf24l01GetPipe
  5905 ;;		_nrf24l01Service
  5906 ;; This function uses a non-reentrant model
  5907 ;;
  5908                           
  5909                           
  5910                           ;psect for function _strlen
  5911  1678                     _strlen:	
  5912                           
  5913                           ;incstack = 0
  5914                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5915  1678  0020               	movlb	0	; select bank0
  5916  1679  0821               	movf	strlen@s+1,w
  5917  167A  00A5               	movwf	strlen@cp+1
  5918  167B  0820               	movf	strlen@s,w
  5919  167C  00A4               	movwf	strlen@cp
  5920  167D                     l2276:	
  5921  167D  0824               	movf	strlen@cp,w
  5922  167E  0086               	movwf	6
  5923  167F  0825               	movf	strlen@cp+1,w
  5924  1680  0087               	movwf	7
  5925  1681  0801               	movf	1,w
  5926  1682  1903               	btfsc	3,2
  5927  1683  2E89               	goto	l2278
  5928  1684  3001               	movlw	1
  5929  1685  07A4               	addwf	strlen@cp,f
  5930  1686  3000               	movlw	0
  5931  1687  3DA5               	addwfc	strlen@cp+1,f
  5932  1688  2E7D               	goto	l2276
  5933  1689                     l2278:	
  5934  1689  0920               	comf	strlen@s,w
  5935  168A  00A2               	movwf	??_strlen
  5936  168B  0921               	comf	strlen@s+1,w
  5937  168C  00A3               	movwf	??_strlen+1
  5938  168D  0AA2               	incf	??_strlen,f
  5939  168E  1903               	skipnz
  5940  168F  0AA3               	incf	??_strlen+1,f
  5941  1690  0824               	movf	strlen@cp,w
  5942  1691  0722               	addwf	??_strlen,w
  5943  1692  00A0               	movwf	?_strlen
  5944  1693  0825               	movf	strlen@cp+1,w
  5945  1694  3D23               	addwfc	??_strlen+1,w
  5946  1695  00A1               	movwf	?_strlen+1
  5947  1696  0008               	return
  5948  1697                     __end_of_strlen:	
  5949                           
  5950                           	psect	text17
  5951  0894                     __ptext17:	
  5952 ;; *************** function _nrf24l01SetRXMode *****************
  5953 ;; Defined at:
  5954 ;;		line 90 in file "nrf24l01.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;  rxMode          1    wreg     unsigned char 
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;  rxMode          1    5[BANK0 ] unsigned char 
  5959 ;;  config          1    4[BANK0 ] struct .
  5960 ;; Return value:  Size  Location     Type
  5961 ;;                  1    wreg      void 
  5962 ;; Registers used:
  5963 ;;		wreg, status,2, status,0, pclath, cstack
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5970 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5971 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5972 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5973 ;;Total ram usage:        3 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; Hardware stack levels required when called:   10
  5976 ;; This function calls:
  5977 ;;		_nrf24l01CEHigh
  5978 ;;		_nrf24l01CELow
  5979 ;;		_nrf24l01Send
  5980 ;; This function is called by:
  5981 ;;		_sleep
  5982 ;;		_nrf24l01Service
  5983 ;; This function uses a non-reentrant model
  5984 ;;
  5985                           
  5986                           
  5987                           ;psect for function _nrf24l01SetRXMode
  5988  0894                     _nrf24l01SetRXMode:	
  5989                           
  5990                           ;incstack = 0
  5991                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  5992                           ;nrf24l01SetRXMode@rxMode stored from wreg
  5993  0894  0020               	movlb	0	; select bank0
  5994  0895  00A5               	movwf	nrf24l01SetRXMode@rxMode
  5995                           
  5996                           ;nrf24l01.c: 105: n_CONFIG_t config;;nrf24l01.c: 108: config.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x00, 0);
  5997  0896  01A0               	clrf	nrf24l01Send@data
  5998  0897  3000               	movlw	0
  5999  0898  3196  2697  3188   	fcall	_nrf24l01Send
  6000  089B  0020               	movlb	0	; select bank0
  6001  089C  00A3               	movwf	??_nrf24l01SetRXMode
  6002  089D  0823               	movf	??_nrf24l01SetRXMode,w
  6003  089E  00A4               	movwf	nrf24l01SetRXMode@config
  6004                           
  6005                           ;nrf24l01.c: 111: if (config.PRIM_RX != rxMode){
  6006  089F  0824               	movf	nrf24l01SetRXMode@config,w
  6007  08A0  3901               	andlw	1
  6008  08A1  0625               	xorwf	nrf24l01SetRXMode@rxMode,w
  6009  08A2  1903               	skipnz
  6010  08A3  0008               	return
  6011                           
  6012                           ;nrf24l01.c: 114: nrf24l01CELow();
  6013  08A4  3195  2517  3188   	fcall	_nrf24l01CELow
  6014                           
  6015                           ;nrf24l01.c: 115: _delay((unsigned long)((200)*(32000000/4000000.0)));
  6016  08A7  30E4               	movlw	228
  6017  08A8                     u3437:	
  6018  08A8  3200               	nop2
  6019  08A9  3200               	nop2
  6020  08AA  0B89               	decfsz	9,f
  6021  08AB  28A8               	goto	u3437
  6022  08AC  3200               	nop2
  6023  08AD  3200               	nop2
  6024                           
  6025                           ;nrf24l01.c: 118: config.PRIM_RX = rxMode;
  6026  08AE  0020               	movlb	0	; select bank0
  6027  08AF  0825               	movf	nrf24l01SetRXMode@rxMode,w
  6028  08B0  3901               	andlw	1
  6029  08B1  1024               	bcf	nrf24l01SetRXMode@config,0
  6030  08B2  1D03               	skipz
  6031  08B3  1424               	bsf	nrf24l01SetRXMode@config,0
  6032                           
  6033                           ;nrf24l01.c: 119: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  6034  08B4  0824               	movf	nrf24l01SetRXMode@config,w
  6035  08B5  00A3               	movwf	??_nrf24l01SetRXMode
  6036  08B6  0823               	movf	??_nrf24l01SetRXMode,w
  6037  08B7  00A0               	movwf	nrf24l01Send@data
  6038  08B8  3020               	movlw	32
  6039  08B9  3196  2697  3188   	fcall	_nrf24l01Send
  6040                           
  6041                           ;nrf24l01.c: 122: _delay((unsigned long)((200)*(32000000/4000000.0)));
  6042  08BC  30E4               	movlw	228
  6043  08BD                     u3447:	
  6044  08BD  3200               	nop2
  6045  08BE  3200               	nop2
  6046  08BF  0B89               	decfsz	9,f
  6047  08C0  28BD               	goto	u3447
  6048  08C1  3200               	nop2
  6049  08C2  3200               	nop2
  6050                           
  6051                           ;nrf24l01.c: 125: if (rxMode){
  6052  08C3  0020               	movlb	0	; select bank0
  6053  08C4  0825               	movf	nrf24l01SetRXMode@rxMode,w
  6054  08C5  1903               	btfsc	3,2
  6055  08C6  0008               	return
  6056                           
  6057                           ;nrf24l01.c: 126: nrf24l01CEHigh();
  6058  08C7  3195  2514  3188   	fcall	_nrf24l01CEHigh
  6059                           
  6060                           ;nrf24l01.c: 127: _delay((unsigned long)((200)*(32000000/4000000.0)));
  6061  08CA  30E4               	movlw	228
  6062  08CB                     u3457:	
  6063  08CB  3200               	nop2
  6064  08CC  3200               	nop2
  6065  08CD  0B89               	decfsz	9,f
  6066  08CE  28CB               	goto	u3457
  6067  08CF  3200               	nop2
  6068  08D0  3200               	nop2
  6069  08D1  0008               	return
  6070  08D2                     __end_of_nrf24l01SetRXMode:	
  6071                           
  6072                           	psect	text18
  6073  1697                     __ptext18:	
  6074 ;; *************** function _nrf24l01Send *****************
  6075 ;; Defined at:
  6076 ;;		line 45 in file "nrf24l01.c"
  6077 ;; Parameters:    Size  Location     Type
  6078 ;;  command         1    wreg     unsigned char 
  6079 ;;  data            1    0[BANK0 ] unsigned char 
  6080 ;; Auto vars:     Size  Location     Type
  6081 ;;  command         1    2[BANK0 ] unsigned char 
  6082 ;; Return value:  Size  Location     Type
  6083 ;;                  1    wreg      unsigned char 
  6084 ;; Registers used:
  6085 ;;		wreg, status,2, status,0, pclath, cstack
  6086 ;; Tracked objects:
  6087 ;;		On entry : 0/0
  6088 ;;		On exit  : 0/0
  6089 ;;		Unchanged: 0/0
  6090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6091 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6092 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6093 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6094 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6095 ;;Total ram usage:        3 bytes
  6096 ;; Hardware stack levels used:    1
  6097 ;; Hardware stack levels required when called:    9
  6098 ;; This function calls:
  6099 ;;		_enableInterrupts
  6100 ;;		_nrf24l01SPIEnd
  6101 ;;		_nrf24l01SPISend
  6102 ;;		_nrf24l01SPIStart
  6103 ;; This function is called by:
  6104 ;;		_loop
  6105 ;;		_nrf24l01SetRXMode
  6106 ;;		_nrf24l01SetRXPipe
  6107 ;;		_nrf24l01Service
  6108 ;;		_nrf24l01InitRegisters
  6109 ;;		_nrf24l01ChangeTXPower
  6110 ;; This function uses a non-reentrant model
  6111 ;;
  6112                           
  6113                           
  6114                           ;psect for function _nrf24l01Send
  6115  1697                     _nrf24l01Send:	
  6116                           
  6117                           ;incstack = 0
  6118                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  6119                           ;nrf24l01Send@command stored from wreg
  6120  1697  0020               	movlb	0	; select bank0
  6121  1698  00A2               	movwf	nrf24l01Send@command
  6122                           
  6123                           ;nrf24l01.c: 48: enableInterrupts(0);
  6124  1699  3000               	movlw	0
  6125  169A  3195  2527  3196   	fcall	_enableInterrupts
  6126                           
  6127                           ;nrf24l01.c: 51: nrf24l01SPIStart();
  6128  169D  3195  252F  3196   	fcall	_nrf24l01SPIStart
  6129                           
  6130                           ;nrf24l01.c: 54: nrf24l01SPISend(command);
  6131  16A0  0020               	movlb	0	; select bank0
  6132  16A1  0822               	movf	nrf24l01Send@command,w
  6133  16A2  3195  2540  3196   	fcall	_nrf24l01SPISend
  6134                           
  6135                           ;nrf24l01.c: 57: data = nrf24l01SPISend(data);
  6136  16A5  0020               	movlb	0	; select bank0
  6137  16A6  0820               	movf	nrf24l01Send@data,w
  6138  16A7  3195  2540  3196   	fcall	_nrf24l01SPISend
  6139  16AA  0020               	movlb	0	; select bank0
  6140  16AB  00A1               	movwf	??_nrf24l01Send
  6141  16AC  0821               	movf	??_nrf24l01Send,w
  6142  16AD  00A0               	movwf	nrf24l01Send@data
  6143                           
  6144                           ;nrf24l01.c: 60: nrf24l01SPIEnd();
  6145  16AE  3195  2520  3196   	fcall	_nrf24l01SPIEnd
  6146                           
  6147                           ;nrf24l01.c: 63: enableInterrupts(1);
  6148  16B1  3001               	movlw	1
  6149  16B2  3195  2527         	fcall	_enableInterrupts
  6150                           
  6151                           ;nrf24l01.c: 65: return data;
  6152  16B4  0020               	movlb	0	; select bank0
  6153  16B5  0820               	movf	nrf24l01Send@data,w
  6154  16B6  0008               	return
  6155  16B7                     __end_of_nrf24l01Send:	
  6156                           
  6157                           	psect	text19
  6158  1622                     __ptext19:	
  6159 ;; *************** function _memset *****************
  6160 ;; Defined at:
  6161 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6162 ;; Parameters:    Size  Location     Type
  6163 ;;  p1              1    wreg     PTR void 
  6164 ;;		 -> RXPacket(33), 
  6165 ;;  c               2    0[BANK0 ] int 
  6166 ;;  n               2    2[BANK0 ] unsigned int 
  6167 ;; Auto vars:     Size  Location     Type
  6168 ;;  p1              1    5[BANK0 ] PTR void 
  6169 ;;		 -> RXPacket(33), 
  6170 ;;  p               1    6[BANK0 ] PTR unsigned char 
  6171 ;;		 -> RXPacket(33), 
  6172 ;; Return value:  Size  Location     Type
  6173 ;;                  1    wreg      PTR void 
  6174 ;; Registers used:
  6175 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6176 ;; Tracked objects:
  6177 ;;		On entry : 0/0
  6178 ;;		On exit  : 0/0
  6179 ;;		Unchanged: 0/0
  6180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6181 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6182 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6183 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6184 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6185 ;;Total ram usage:        7 bytes
  6186 ;; Hardware stack levels used:    1
  6187 ;; Hardware stack levels required when called:    7
  6188 ;; This function calls:
  6189 ;;		Nothing
  6190 ;; This function is called by:
  6191 ;;		_nrf24l01Service
  6192 ;; This function uses a non-reentrant model
  6193 ;;
  6194                           
  6195                           
  6196                           ;psect for function _memset
  6197  1622                     _memset:	
  6198                           
  6199                           ;incstack = 0
  6200                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6201                           ;memset@p1 stored from wreg
  6202  1622  0020               	movlb	0	; select bank0
  6203  1623  00A5               	movwf	memset@p1
  6204  1624  0825               	movf	memset@p1,w
  6205  1625  00A4               	movwf	??_memset
  6206  1626  0824               	movf	??_memset,w
  6207  1627  00A6               	movwf	memset@p
  6208  1628                     l2288:	
  6209  1628  3001               	movlw	1
  6210  1629  02A2               	subwf	memset@n,f
  6211  162A  3000               	movlw	0
  6212  162B  3BA3               	subwfb	memset@n+1,f
  6213  162C  0A22               	incf	memset@n,w
  6214  162D  1903               	btfsc	3,2
  6215  162E  0A23               	incf	memset@n+1,w
  6216  162F  1903               	btfsc	3,2
  6217  1630  0008               	return
  6218  1631  0820               	movf	memset@c,w
  6219  1632  00A4               	movwf	??_memset
  6220  1633  0826               	movf	memset@p,w
  6221  1634  0086               	movwf	6
  6222  1635  3001               	movlw	1	; select bank2/3
  6223  1636  0087               	movwf	7
  6224  1637  0824               	movf	??_memset,w
  6225  1638  0081               	movwf	1
  6226  1639  3001               	movlw	1
  6227  163A  00A4               	movwf	??_memset
  6228  163B  0824               	movf	??_memset,w
  6229  163C  07A6               	addwf	memset@p,f
  6230  163D  2E28               	goto	l2288
  6231  163E                     __end_of_memset:	
  6232                           ;	Return value of _memset is never used
  6233                           
  6234                           
  6235                           	psect	text20
  6236  0E18                     __ptext20:	
  6237 ;; *************** function _ftoa *****************
  6238 ;; Defined at:
  6239 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6240 ;; Parameters:    Size  Location     Type
  6241 ;;  f               3    6[BANK1 ] float 
  6242 ;;  status          1    9[BANK1 ] PTR int 
  6243 ;;		 -> sendMessage@status(2), 
  6244 ;; Auto vars:     Size  Location     Type
  6245 ;;  l               4   14[BANK1 ] unsigned long 
  6246 ;;  rem             4   10[BANK1 ] unsigned long 
  6247 ;;  cp              1   18[BANK1 ] PTR unsigned char 
  6248 ;;		 -> ftoa@buf(17), 
  6249 ;; Return value:  Size  Location     Type
  6250 ;;                  1    wreg      PTR unsigned char 
  6251 ;; Registers used:
  6252 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6253 ;; Tracked objects:
  6254 ;;		On entry : 0/0
  6255 ;;		On exit  : 0/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6258 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6259 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6260 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;      Totals:         0       1      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6262 ;;Total ram usage:       14 bytes
  6263 ;; Hardware stack levels used:    1
  6264 ;; Hardware stack levels required when called:   10
  6265 ;; This function calls:
  6266 ;;		___ftge
  6267 ;;		___ftmul
  6268 ;;		___ftneg
  6269 ;;		___ftsub
  6270 ;;		___fttol
  6271 ;;		___lltoft
  6272 ;;		_sprintf
  6273 ;; This function is called by:
  6274 ;;		_sendMessage
  6275 ;; This function uses a non-reentrant model
  6276 ;;
  6277                           
  6278                           
  6279                           ;psect for function _ftoa
  6280  0E18                     _ftoa:	
  6281                           
  6282                           ;incstack = 0
  6283                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6284  0E18  3055               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6285  0E19  0020               	movlb	0	; select bank0
  6286  0E1A  00EF               	movwf	??_ftoa
  6287  0E1B  086F               	movf	??_ftoa,w
  6288  0E1C  0021               	movlb	1	; select bank1
  6289  0E1D  00B2               	movwf	ftoa@cp^(0+128)
  6290  0E1E  0826               	movf	ftoa@f^(0+128),w
  6291  0E1F  0020               	movlb	0	; select bank0
  6292  0E20  00A0               	movwf	___ftge@ff1
  6293  0E21  0021               	movlb	1	; select bank1
  6294  0E22  0827               	movf	(ftoa@f+1)^(0+128),w
  6295  0E23  0020               	movlb	0	; select bank0
  6296  0E24  00A1               	movwf	___ftge@ff1+1
  6297  0E25  0021               	movlb	1	; select bank1
  6298  0E26  0828               	movf	(ftoa@f+2)^(0+128),w
  6299  0E27  0020               	movlb	0	; select bank0
  6300  0E28  00A2               	movwf	___ftge@ff1+2
  6301  0E29  3000               	movlw	0
  6302  0E2A  00A3               	movwf	___ftge@ff2
  6303  0E2B  3000               	movlw	0
  6304  0E2C  00A4               	movwf	___ftge@ff2+1
  6305  0E2D  3000               	movlw	0
  6306  0E2E  00A5               	movwf	___ftge@ff2+2
  6307  0E2F  3188  2058  318E   	fcall	___ftge
  6308  0E32  1803               	btfsc	3,0
  6309  0E33  2E5E               	goto	l2822
  6310  0E34  302D               	movlw	45
  6311  0E35  0020               	movlb	0	; select bank0
  6312  0E36  00EF               	movwf	??_ftoa
  6313  0E37  0021               	movlb	1	; select bank1
  6314  0E38  0832               	movf	ftoa@cp^(0+128),w
  6315  0E39  0086               	movwf	6
  6316  0E3A  3001               	movlw	1	; select bank2/3
  6317  0E3B  0087               	movwf	7
  6318  0E3C  0020               	movlb	0	; select bank0
  6319  0E3D  086F               	movf	??_ftoa,w
  6320  0E3E  0081               	movwf	1
  6321  0E3F  3001               	movlw	1
  6322  0E40  00EF               	movwf	??_ftoa
  6323  0E41  086F               	movf	??_ftoa,w
  6324  0E42  0021               	movlb	1	; select bank1
  6325  0E43  07B2               	addwf	ftoa@cp^(0+128),f
  6326  0E44  0826               	movf	ftoa@f^(0+128),w
  6327  0E45  0020               	movlb	0	; select bank0
  6328  0E46  00D7               	movwf	___ftneg@f1
  6329  0E47  0021               	movlb	1	; select bank1
  6330  0E48  0827               	movf	(ftoa@f+1)^(0+128),w
  6331  0E49  0020               	movlb	0	; select bank0
  6332  0E4A  00D8               	movwf	___ftneg@f1+1
  6333  0E4B  0021               	movlb	1	; select bank1
  6334  0E4C  0828               	movf	(ftoa@f+2)^(0+128),w
  6335  0E4D  0020               	movlb	0	; select bank0
  6336  0E4E  00D9               	movwf	___ftneg@f1+2
  6337  0E4F  3195  2537  318E   	fcall	___ftneg
  6338  0E52  0020               	movlb	0	; select bank0
  6339  0E53  0857               	movf	?___ftneg,w
  6340  0E54  0021               	movlb	1	; select bank1
  6341  0E55  00A6               	movwf	ftoa@f^(0+128)
  6342  0E56  0020               	movlb	0	; select bank0
  6343  0E57  0858               	movf	?___ftneg+1,w
  6344  0E58  0021               	movlb	1	; select bank1
  6345  0E59  00A7               	movwf	(ftoa@f+1)^(0+128)
  6346  0E5A  0020               	movlb	0	; select bank0
  6347  0E5B  0859               	movf	?___ftneg+2,w
  6348  0E5C  0021               	movlb	1	; select bank1
  6349  0E5D  00A8               	movwf	(ftoa@f+2)^(0+128)
  6350  0E5E                     l2822:	
  6351  0E5E  0021               	movlb	1	; select bank1
  6352  0E5F  0826               	movf	ftoa@f^(0+128),w
  6353  0E60  0020               	movlb	0	; select bank0
  6354  0E61  00E7               	movwf	___fttol@f1
  6355  0E62  0021               	movlb	1	; select bank1
  6356  0E63  0827               	movf	(ftoa@f+1)^(0+128),w
  6357  0E64  0020               	movlb	0	; select bank0
  6358  0E65  00E8               	movwf	___fttol@f1+1
  6359  0E66  0021               	movlb	1	; select bank1
  6360  0E67  0828               	movf	(ftoa@f+2)^(0+128),w
  6361  0E68  0020               	movlb	0	; select bank0
  6362  0E69  00E9               	movwf	___fttol@f1+2
  6363  0E6A  318B  2376  318E   	fcall	___fttol
  6364  0E6D  0020               	movlb	0	; select bank0
  6365  0E6E  086A               	movf	?___fttol+3,w
  6366  0E6F  0021               	movlb	1	; select bank1
  6367  0E70  00B1               	movwf	(ftoa@l+3)^(0+128)
  6368  0E71  0020               	movlb	0	; select bank0
  6369  0E72  0869               	movf	?___fttol+2,w
  6370  0E73  0021               	movlb	1	; select bank1
  6371  0E74  00B0               	movwf	(ftoa@l+2)^(0+128)
  6372  0E75  0020               	movlb	0	; select bank0
  6373  0E76  0868               	movf	?___fttol+1,w
  6374  0E77  0021               	movlb	1	; select bank1
  6375  0E78  00AF               	movwf	(ftoa@l+1)^(0+128)
  6376  0E79  0020               	movlb	0	; select bank0
  6377  0E7A  0867               	movf	?___fttol,w
  6378  0E7B  0021               	movlb	1	; select bank1
  6379  0E7C  00AE               	movwf	ftoa@l^(0+128)
  6380  0E7D  0831               	movf	(ftoa@l+3)^(0+128),w
  6381  0E7E  0020               	movlb	0	; select bank0
  6382  0E7F  00AB               	movwf	___lltoft@c+3
  6383  0E80  0021               	movlb	1	; select bank1
  6384  0E81  0830               	movf	(ftoa@l+2)^(0+128),w
  6385  0E82  0020               	movlb	0	; select bank0
  6386  0E83  00AA               	movwf	___lltoft@c+2
  6387  0E84  0021               	movlb	1	; select bank1
  6388  0E85  082F               	movf	(ftoa@l+1)^(0+128),w
  6389  0E86  0020               	movlb	0	; select bank0
  6390  0E87  00A9               	movwf	___lltoft@c+1
  6391  0E88  0021               	movlb	1	; select bank1
  6392  0E89  082E               	movf	ftoa@l^(0+128),w
  6393  0E8A  0020               	movlb	0	; select bank0
  6394  0E8B  00A8               	movwf	___lltoft@c
  6395  0E8C  3197  2747  318E   	fcall	___lltoft
  6396  0E8F  0020               	movlb	0	; select bank0
  6397  0E90  0828               	movf	?___lltoft,w
  6398  0E91  00BB               	movwf	___ftsub@f2
  6399  0E92  0829               	movf	?___lltoft+1,w
  6400  0E93  00BC               	movwf	___ftsub@f2+1
  6401  0E94  082A               	movf	?___lltoft+2,w
  6402  0E95  00BD               	movwf	___ftsub@f2+2
  6403  0E96  0021               	movlb	1	; select bank1
  6404  0E97  0826               	movf	ftoa@f^(0+128),w
  6405  0E98  0020               	movlb	0	; select bank0
  6406  0E99  00BE               	movwf	___ftsub@f1
  6407  0E9A  0021               	movlb	1	; select bank1
  6408  0E9B  0827               	movf	(ftoa@f+1)^(0+128),w
  6409  0E9C  0020               	movlb	0	; select bank0
  6410  0E9D  00BF               	movwf	___ftsub@f1+1
  6411  0E9E  0021               	movlb	1	; select bank1
  6412  0E9F  0828               	movf	(ftoa@f+2)^(0+128),w
  6413  0EA0  0020               	movlb	0	; select bank0
  6414  0EA1  00C0               	movwf	___ftsub@f1+2
  6415  0EA2  3188  2000  318E   	fcall	___ftsub
  6416  0EA5  0020               	movlb	0	; select bank0
  6417  0EA6  083B               	movf	?___ftsub,w
  6418  0EA7  0021               	movlb	1	; select bank1
  6419  0EA8  00A6               	movwf	ftoa@f^(0+128)
  6420  0EA9  0020               	movlb	0	; select bank0
  6421  0EAA  083C               	movf	?___ftsub+1,w
  6422  0EAB  0021               	movlb	1	; select bank1
  6423  0EAC  00A7               	movwf	(ftoa@f+1)^(0+128)
  6424  0EAD  0020               	movlb	0	; select bank0
  6425  0EAE  083D               	movf	?___ftsub+2,w
  6426  0EAF  0021               	movlb	1	; select bank1
  6427  0EB0  00A8               	movwf	(ftoa@f+2)^(0+128)
  6428  0EB1  0826               	movf	ftoa@f^(0+128),w
  6429  0EB2  0020               	movlb	0	; select bank0
  6430  0EB3  00DA               	movwf	___ftmul@f2
  6431  0EB4  0021               	movlb	1	; select bank1
  6432  0EB5  0827               	movf	(ftoa@f+1)^(0+128),w
  6433  0EB6  0020               	movlb	0	; select bank0
  6434  0EB7  00DB               	movwf	___ftmul@f2+1
  6435  0EB8  0021               	movlb	1	; select bank1
  6436  0EB9  0828               	movf	(ftoa@f+2)^(0+128),w
  6437  0EBA  0020               	movlb	0	; select bank0
  6438  0EBB  00DC               	movwf	___ftmul@f2+2
  6439  0EBC  3024               	movlw	36
  6440  0EBD  00D7               	movwf	___ftmul@f1
  6441  0EBE  3074               	movlw	116
  6442  0EBF  00D8               	movwf	___ftmul@f1+1
  6443  0EC0  3049               	movlw	73
  6444  0EC1  00D9               	movwf	___ftmul@f1+2
  6445  0EC2  318D  2564  318E   	fcall	___ftmul
  6446  0EC5  0020               	movlb	0	; select bank0
  6447  0EC6  0857               	movf	?___ftmul,w
  6448  0EC7  00E7               	movwf	___fttol@f1
  6449  0EC8  0858               	movf	?___ftmul+1,w
  6450  0EC9  00E8               	movwf	___fttol@f1+1
  6451  0ECA  0859               	movf	?___ftmul+2,w
  6452  0ECB  00E9               	movwf	___fttol@f1+2
  6453  0ECC  318B  2376  318E   	fcall	___fttol
  6454  0ECF  0020               	movlb	0	; select bank0
  6455  0ED0  086A               	movf	?___fttol+3,w
  6456  0ED1  0021               	movlb	1	; select bank1
  6457  0ED2  00AD               	movwf	(ftoa@rem+3)^(0+128)
  6458  0ED3  0020               	movlb	0	; select bank0
  6459  0ED4  0869               	movf	?___fttol+2,w
  6460  0ED5  0021               	movlb	1	; select bank1
  6461  0ED6  00AC               	movwf	(ftoa@rem+2)^(0+128)
  6462  0ED7  0020               	movlb	0	; select bank0
  6463  0ED8  0868               	movf	?___fttol+1,w
  6464  0ED9  0021               	movlb	1	; select bank1
  6465  0EDA  00AB               	movwf	(ftoa@rem+1)^(0+128)
  6466  0EDB  0020               	movlb	0	; select bank0
  6467  0EDC  0867               	movf	?___fttol,w
  6468  0EDD  0021               	movlb	1	; select bank1
  6469  0EDE  00AA               	movwf	ftoa@rem^(0+128)
  6470  0EDF  3029               	movlw	low (STR_14| (0+32768))
  6471  0EE0  0020               	movlb	0	; select bank0
  6472  0EE1  00B8               	movwf	sprintf@f
  6473  0EE2  3098               	movlw	high (STR_14| (0+32768))
  6474  0EE3  00B9               	movwf	sprintf@f+1
  6475  0EE4  0021               	movlb	1	; select bank1
  6476  0EE5  0831               	movf	(ftoa@l+3)^(0+128),w
  6477  0EE6  0020               	movlb	0	; select bank0
  6478  0EE7  00BD               	movwf	?_sprintf+5
  6479  0EE8  0021               	movlb	1	; select bank1
  6480  0EE9  0830               	movf	(ftoa@l+2)^(0+128),w
  6481  0EEA  0020               	movlb	0	; select bank0
  6482  0EEB  00BC               	movwf	?_sprintf+4
  6483  0EEC  0021               	movlb	1	; select bank1
  6484  0EED  082F               	movf	(ftoa@l+1)^(0+128),w
  6485  0EEE  0020               	movlb	0	; select bank0
  6486  0EEF  00BB               	movwf	?_sprintf+3
  6487  0EF0  0021               	movlb	1	; select bank1
  6488  0EF1  082E               	movf	ftoa@l^(0+128),w
  6489  0EF2  0020               	movlb	0	; select bank0
  6490  0EF3  00BA               	movwf	?_sprintf+2
  6491  0EF4  0021               	movlb	1	; select bank1
  6492  0EF5  082D               	movf	(ftoa@rem+3)^(0+128),w
  6493  0EF6  0020               	movlb	0	; select bank0
  6494  0EF7  00C1               	movwf	?_sprintf+9
  6495  0EF8  0021               	movlb	1	; select bank1
  6496  0EF9  082C               	movf	(ftoa@rem+2)^(0+128),w
  6497  0EFA  0020               	movlb	0	; select bank0
  6498  0EFB  00C0               	movwf	?_sprintf+8
  6499  0EFC  0021               	movlb	1	; select bank1
  6500  0EFD  082B               	movf	(ftoa@rem+1)^(0+128),w
  6501  0EFE  0020               	movlb	0	; select bank0
  6502  0EFF  00BF               	movwf	?_sprintf+7
  6503  0F00  0021               	movlb	1	; select bank1
  6504  0F01  082A               	movf	ftoa@rem^(0+128),w
  6505  0F02  0020               	movlb	0	; select bank0
  6506  0F03  00BE               	movwf	?_sprintf+6
  6507  0F04  0021               	movlb	1	; select bank1
  6508  0F05  0832               	movf	ftoa@cp^(0+128),w
  6509  0F06  3182  2258         	fcall	_sprintf
  6510  0F08  3055               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6511  0F09  0008               	return
  6512  0F0A                     __end_of_ftoa:	
  6513                           
  6514                           	psect	text21
  6515  0258                     __ptext21:	
  6516 ;; *************** function _sprintf *****************
  6517 ;; Defined at:
  6518 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;  sp              1    wreg     PTR unsigned char 
  6521 ;;		 -> ftoa@buf(17), 
  6522 ;;  f               2   24[BANK0 ] PTR const unsigned char 
  6523 ;;		 -> STR_14(11), 
  6524 ;; Auto vars:     Size  Location     Type
  6525 ;;  sp              1   46[BANK0 ] PTR unsigned char 
  6526 ;;		 -> ftoa@buf(17), 
  6527 ;;  val             4   42[BANK0 ] unsigned long 
  6528 ;;  tmpval          4    0        struct .
  6529 ;;  prec            2   49[BANK0 ] int 
  6530 ;;  width           2   47[BANK0 ] int 
  6531 ;;  cp              2    0        PTR const unsigned char 
  6532 ;;  len             2    0        unsigned int 
  6533 ;;  c               1   51[BANK0 ] unsigned char 
  6534 ;;  ap              1   41[BANK0 ] PTR void [1]
  6535 ;;		 -> ?_sprintf(2), 
  6536 ;;  flag            1   40[BANK0 ] unsigned char 
  6537 ;; Return value:  Size  Location     Type
  6538 ;;                  2   24[BANK0 ] int 
  6539 ;; Registers used:
  6540 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6541 ;; Tracked objects:
  6542 ;;		On entry : 0/0
  6543 ;;		On exit  : 0/0
  6544 ;;		Unchanged: 0/0
  6545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6546 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;Total ram usage:       28 bytes
  6551 ;; Hardware stack levels used:    1
  6552 ;; Hardware stack levels required when called:    8
  6553 ;; This function calls:
  6554 ;;		___lldiv
  6555 ;;		___llmod
  6556 ;;		___wmul
  6557 ;;		_isdigit
  6558 ;; This function is called by:
  6559 ;;		_ftoa
  6560 ;; This function uses a non-reentrant model
  6561 ;;
  6562                           
  6563                           
  6564                           ;psect for function _sprintf
  6565  0258                     _sprintf:	
  6566                           
  6567                           ;incstack = 0
  6568                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6569                           ;sprintf@sp stored from wreg
  6570  0258  0020               	movlb	0	; select bank0
  6571  0259  00CE               	movwf	sprintf@sp
  6572                           
  6573                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  6574  025A  303A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  6575  025B  00C2               	movwf	??_sprintf
  6576  025C  0842               	movf	??_sprintf,w
  6577  025D  00C9               	movwf	sprintf@ap
  6578  025E                     l2618:	
  6579                           ;doprnt.c: 548: while((c = *f++)) {
  6580                           
  6581  025E  0839               	movf	sprintf@f+1,w
  6582  025F  00C3               	movwf	??_sprintf+1
  6583  0260  0838               	movf	sprintf@f,w
  6584  0261  00C2               	movwf	??_sprintf
  6585  0262  0AB8               	incf	sprintf@f,f
  6586  0263  1903               	skipnz
  6587  0264  0AB9               	incf	sprintf@f+1,f
  6588  0265  0842               	movf	??_sprintf,w
  6589  0266  0084               	movwf	4
  6590  0267  0843               	movf	??_sprintf+1,w
  6591  0268  0085               	movwf	5
  6592  0269  0800               	movf	0,w	;code access
  6593  026A  00C4               	movwf	??_sprintf+2
  6594  026B  0844               	movf	??_sprintf+2,w
  6595  026C  00D3               	movwf	sprintf@c
  6596  026D  0853               	movf	sprintf@c,w
  6597  026E  1903               	btfsc	3,2
  6598  026F  2C1F               	goto	l2620
  6599                           
  6600                           ;doprnt.c: 550: if(c != '%')
  6601  0270  3025               	movlw	37
  6602  0271  0653               	xorwf	sprintf@c,w
  6603  0272  1903               	btfsc	3,2
  6604  0273  2A81               	goto	l2530
  6605                           
  6606                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  6607  0274  0853               	movf	sprintf@c,w
  6608  0275  00C2               	movwf	??_sprintf
  6609  0276  084E               	movf	sprintf@sp,w
  6610  0277  0086               	movwf	6
  6611  0278  3001               	movlw	1	; select bank2/3
  6612  0279  0087               	movwf	7
  6613  027A  0842               	movf	??_sprintf,w
  6614  027B  0081               	movwf	1
  6615  027C  3001               	movlw	1
  6616  027D  00C2               	movwf	??_sprintf
  6617  027E  0842               	movf	??_sprintf,w
  6618  027F  07CE               	addwf	sprintf@sp,f
  6619                           
  6620                           ;doprnt.c: 554: continue;
  6621  0280  2A5E               	goto	l2618
  6622  0281                     l2530:	
  6623                           
  6624                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  6625  0281  01CF               	clrf	sprintf@width
  6626  0282  01D0               	clrf	sprintf@width+1
  6627                           
  6628                           ;doprnt.c: 560: flag = 0;
  6629  0283  01C8               	clrf	sprintf@flag
  6630                           
  6631                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  6632  0284  0838               	movf	sprintf@f,w
  6633  0285  0084               	movwf	4
  6634  0286  0839               	movf	sprintf@f+1,w
  6635  0287  0085               	movwf	5
  6636  0288  0800               	movf	0,w	;code access
  6637  0289  3195  254D  3182   	fcall	_isdigit
  6638  028C  1C03               	btfss	3,0
  6639  028D  2ABF               	goto	l2544
  6640                           
  6641                           ;doprnt.c: 610: width = 0;
  6642  028E  0020               	movlb	0	; select bank0
  6643  028F  01CF               	clrf	sprintf@width
  6644  0290  01D0               	clrf	sprintf@width+1
  6645  0291                     l2536:	
  6646                           ;doprnt.c: 611: do {
  6647                           
  6648                           
  6649                           ;doprnt.c: 612: width *= 10;
  6650  0291  300A               	movlw	10
  6651  0292  0020               	movlb	0	; select bank0
  6652  0293  00A0               	movwf	___wmul@multiplier
  6653  0294  3000               	movlw	0
  6654  0295  00A1               	movwf	___wmul@multiplier+1
  6655  0296  0850               	movf	sprintf@width+1,w
  6656  0297  00A3               	movwf	___wmul@multiplicand+1
  6657  0298  084F               	movf	sprintf@width,w
  6658  0299  00A2               	movwf	___wmul@multiplicand
  6659  029A  3196  2606  3182   	fcall	___wmul
  6660  029D  0020               	movlb	0	; select bank0
  6661  029E  0821               	movf	?___wmul+1,w
  6662  029F  00D0               	movwf	sprintf@width+1
  6663  02A0  0820               	movf	?___wmul,w
  6664  02A1  00CF               	movwf	sprintf@width
  6665                           
  6666                           ;doprnt.c: 613: width += *f++ - '0';
  6667  02A2  0838               	movf	sprintf@f,w
  6668  02A3  0084               	movwf	4
  6669  02A4  0839               	movf	sprintf@f+1,w
  6670  02A5  0085               	movwf	5
  6671  02A6  0800               	movf	0,w	;code access
  6672  02A7  3ED0               	addlw	208
  6673  02A8  00C2               	movwf	??_sprintf
  6674  02A9  30FF               	movlw	255
  6675  02AA  1803               	skipnc
  6676  02AB  3000               	movlw	0
  6677  02AC  00C3               	movwf	??_sprintf+1
  6678  02AD  0842               	movf	??_sprintf,w
  6679  02AE  07CF               	addwf	sprintf@width,f
  6680  02AF  0843               	movf	??_sprintf+1,w
  6681  02B0  3DD0               	addwfc	sprintf@width+1,f
  6682  02B1  3001               	movlw	1
  6683  02B2  07B8               	addwf	sprintf@f,f
  6684  02B3  3000               	movlw	0
  6685  02B4  3DB9               	addwfc	sprintf@f+1,f
  6686                           
  6687                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  6688  02B5  0838               	movf	sprintf@f,w
  6689  02B6  0084               	movwf	4
  6690  02B7  0839               	movf	sprintf@f+1,w
  6691  02B8  0085               	movwf	5
  6692  02B9  0800               	movf	0,w	;code access
  6693  02BA  3195  254D  3182   	fcall	_isdigit
  6694  02BD  1803               	btfsc	3,0
  6695  02BE  2A91               	goto	l2536
  6696  02BF                     l2544:	
  6697                           
  6698                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  6699  02BF  0020               	movlb	0	; select bank0
  6700  02C0  0838               	movf	sprintf@f,w
  6701  02C1  0084               	movwf	4
  6702  02C2  0839               	movf	sprintf@f+1,w
  6703  02C3  0085               	movwf	5
  6704  02C4  0012               	moviw fsr0++
  6705  02C5  3A2E               	xorlw	46
  6706  02C6  1D03               	btfss	3,2
  6707  02C7  2AFD               	goto	l2556
  6708                           
  6709                           ;doprnt.c: 625: f++;
  6710  02C8  3001               	movlw	1
  6711  02C9  07B8               	addwf	sprintf@f,f
  6712  02CA  3000               	movlw	0
  6713  02CB  3DB9               	addwfc	sprintf@f+1,f
  6714                           
  6715                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  6716  02CC  01D1               	clrf	sprintf@prec
  6717  02CD  01D2               	clrf	sprintf@prec+1
  6718  02CE                     l2554:	
  6719                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  6720                           
  6721  02CE  0838               	movf	sprintf@f,w
  6722  02CF  0084               	movwf	4
  6723  02D0  0839               	movf	sprintf@f+1,w
  6724  02D1  0085               	movwf	5
  6725  02D2  0800               	movf	0,w	;code access
  6726  02D3  3195  254D  3182   	fcall	_isdigit
  6727  02D6  1C03               	btfss	3,0
  6728  02D7  2B08               	goto	l2562
  6729                           
  6730                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  6731  02D8  0020               	movlb	0	; select bank0
  6732  02D9  0838               	movf	sprintf@f,w
  6733  02DA  0084               	movwf	4
  6734  02DB  0839               	movf	sprintf@f+1,w
  6735  02DC  0085               	movwf	5
  6736  02DD  0800               	movf	0,w	;code access
  6737  02DE  00C2               	movwf	??_sprintf
  6738  02DF  01C3               	clrf	??_sprintf+1
  6739  02E0  0852               	movf	sprintf@prec+1,w
  6740  02E1  00A1               	movwf	___wmul@multiplier+1
  6741  02E2  0851               	movf	sprintf@prec,w
  6742  02E3  00A0               	movwf	___wmul@multiplier
  6743  02E4  300A               	movlw	10
  6744  02E5  00A2               	movwf	___wmul@multiplicand
  6745  02E6  3000               	movlw	0
  6746  02E7  00A3               	movwf	___wmul@multiplicand+1
  6747  02E8  3196  2606  3182   	fcall	___wmul
  6748  02EB  0020               	movlb	0	; select bank0
  6749  02EC  0842               	movf	??_sprintf,w
  6750  02ED  0720               	addwf	?___wmul,w
  6751  02EE  00C4               	movwf	??_sprintf+2
  6752  02EF  0843               	movf	??_sprintf+1,w
  6753  02F0  3D21               	addwfc	?___wmul+1,w
  6754  02F1  00C5               	movwf	??_sprintf+3
  6755  02F2  0844               	movf	??_sprintf+2,w
  6756  02F3  3ED0               	addlw	208
  6757  02F4  00D1               	movwf	sprintf@prec
  6758  02F5  30FF               	movlw	255
  6759  02F6  3D45               	addwfc	??_sprintf+3,w
  6760  02F7  00D2               	movwf	sprintf@prec+1
  6761  02F8  3001               	movlw	1
  6762  02F9  07B8               	addwf	sprintf@f,f
  6763  02FA  3000               	movlw	0
  6764  02FB  3DB9               	addwfc	sprintf@f+1,f
  6765  02FC  2ACE               	goto	l2554
  6766  02FD                     l2556:	
  6767                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  6768                           
  6769                           
  6770                           ;doprnt.c: 645: prec = 0;
  6771  02FD  0020               	movlb	0	; select bank0
  6772  02FE  01D1               	clrf	sprintf@prec
  6773  02FF  01D2               	clrf	sprintf@prec+1
  6774                           
  6775                           ;doprnt.c: 654: switch(c = *f++) {
  6776                           
  6777                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  6778  0300  2B08               	goto	l2562
  6779  0301                     l416:	
  6780                           ;doprnt.c: 660: case 'l':
  6781                           
  6782                           ;doprnt.c: 657: goto alldone;
  6783                           
  6784                           ;doprnt.c: 656: case 0:
  6785                           
  6786                           
  6787                           ;doprnt.c: 662: flag |= 0x10;
  6788  0301  1648               	bsf	sprintf@flag,4
  6789                           
  6790                           ;doprnt.c: 663: goto loop;
  6791  0302  2B08               	goto	l2562
  6792  0303                     l2558:	
  6793                           ;doprnt.c: 836: case 'u':
  6794                           
  6795                           ;doprnt.c: 832: continue;
  6796                           
  6797                           ;doprnt.c: 821: default:
  6798                           
  6799                           
  6800                           ;doprnt.c: 837: flag |= 0xC0;
  6801  0303  30C0               	movlw	192
  6802  0304  00C2               	movwf	??_sprintf
  6803  0305  0842               	movf	??_sprintf,w
  6804  0306  04C8               	iorwf	sprintf@flag,f
  6805                           
  6806                           ;doprnt.c: 841: }
  6807                           
  6808                           ;doprnt.c: 838: break;
  6809  0307  2B20               	goto	l419
  6810  0308                     l2562:	
  6811  0308  0020               	movlb	0	; select bank0
  6812  0309  0839               	movf	sprintf@f+1,w
  6813  030A  00C3               	movwf	??_sprintf+1
  6814  030B  0838               	movf	sprintf@f,w
  6815  030C  00C2               	movwf	??_sprintf
  6816  030D  0AB8               	incf	sprintf@f,f
  6817  030E  1903               	skipnz
  6818  030F  0AB9               	incf	sprintf@f+1,f
  6819  0310  0842               	movf	??_sprintf,w
  6820  0311  0084               	movwf	4
  6821  0312  0843               	movf	??_sprintf+1,w
  6822  0313  0085               	movwf	5
  6823  0314  0800               	movf	0,w	;code access
  6824  0315  00D3               	movwf	sprintf@c
  6825                           
  6826                           ; Switch size 1, requested type "space"
  6827                           ; Number of cases is 3, Range of values is 0 to 117
  6828                           ; switch strategies available:
  6829                           ; Name         Instructions Cycles
  6830                           ; simple_byte           10     6 (average)
  6831                           ; direct_byte          242     6 (fixed)
  6832                           ; jumptable            260     6 (fixed)
  6833                           ;	Chosen strategy is simple_byte
  6834  0316  3A00               	xorlw	0	; case 0
  6835  0317  1903               	skipnz
  6836  0318  2C1F               	goto	l2620
  6837  0319  3A6C               	xorlw	108	; case 108
  6838  031A  1903               	skipnz
  6839  031B  2B01               	goto	l416
  6840  031C  3A19               	xorlw	25	; case 117
  6841  031D  1903               	skipnz
  6842  031E  2B03               	goto	l2558
  6843  031F  2A5E               	goto	l2618
  6844  0320                     l419:	
  6845                           
  6846                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  6847  0320  1E48               	btfss	sprintf@flag,4
  6848  0321  2B2F               	goto	l2568
  6849                           
  6850                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  6851  0322  0849               	movf	sprintf@ap,w
  6852  0323  0086               	movwf	6
  6853  0324  0187               	clrf	7
  6854  0325  3F40               	moviw [0]fsr1
  6855  0326  00CA               	movwf	sprintf@val
  6856  0327  3F41               	moviw [1]fsr1
  6857  0328  00CB               	movwf	sprintf@val+1
  6858  0329  3F42               	moviw [2]fsr1
  6859  032A  00CC               	movwf	sprintf@val+2
  6860  032B  3F43               	moviw [3]fsr1
  6861  032C  00CD               	movwf	sprintf@val+3
  6862  032D  3004               	movlw	4
  6863  032E  2B3D               	goto	L2
  6864  032F                     l2568:	
  6865                           
  6866                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  6867  032F  0849               	movf	sprintf@ap,w
  6868  0330  0086               	movwf	6
  6869  0331  0187               	clrf	7
  6870  0332  3F40               	moviw [0]fsr1
  6871  0333  00C2               	movwf	??_sprintf
  6872  0334  3F41               	moviw [1]fsr1
  6873  0335  00C3               	movwf	??_sprintf+1
  6874  0336  0842               	movf	??_sprintf,w
  6875  0337  00CA               	movwf	sprintf@val
  6876  0338  0843               	movf	??_sprintf+1,w
  6877  0339  00CB               	movwf	sprintf@val+1
  6878  033A  01CC               	clrf	sprintf@val+2
  6879  033B  01CD               	clrf	sprintf@val+3
  6880  033C  3002               	movlw	2
  6881  033D                     L2:	
  6882  033D  00C2               	movwf	??_sprintf
  6883  033E  0842               	movf	??_sprintf,w
  6884  033F  07C9               	addwf	sprintf@ap,f
  6885                           
  6886                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  6887  0340  0851               	movf	sprintf@prec,w
  6888  0341  0452               	iorwf	sprintf@prec+1,w
  6889  0342  1D03               	btfss	3,2
  6890  0343  2B4E               	goto	l2578
  6891  0344  084D               	movf	sprintf@val+3,w
  6892  0345  044C               	iorwf	sprintf@val+2,w
  6893  0346  044B               	iorwf	sprintf@val+1,w
  6894  0347  044A               	iorwf	sprintf@val,w
  6895  0348  1D03               	skipz
  6896  0349  2B4E               	goto	l2578
  6897                           
  6898                           ;doprnt.c: 1310: prec++;
  6899  034A  3001               	movlw	1
  6900  034B  07D1               	addwf	sprintf@prec,f
  6901  034C  3000               	movlw	0
  6902  034D  3DD2               	addwfc	sprintf@prec+1,f
  6903  034E                     l2578:	
  6904                           
  6905                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6906  034E  01D3               	clrf	sprintf@c
  6907  034F  0AD3               	incf	sprintf@c,f
  6908  0350  300A               	movlw	10
  6909  0351  0653               	xorwf	sprintf@c,w
  6910  0352  1903               	btfsc	3,2
  6911  0353  2B81               	goto	l2590
  6912  0354                     l2584:	
  6913                           
  6914                           ;doprnt.c: 1325: if(val < dpowers[c])
  6915  0354  0853               	movf	sprintf@c,w
  6916  0355  00C2               	movwf	??_sprintf
  6917  0356  01C3               	clrf	??_sprintf+1
  6918  0357  35C2               	lslf	??_sprintf,f
  6919  0358  0DC3               	rlf	??_sprintf+1,f
  6920  0359  35C2               	lslf	??_sprintf,f
  6921  035A  0DC3               	rlf	??_sprintf+1,f
  6922  035B  3000               	movlw	low (_dpowers| (0+32768))
  6923  035C  0742               	addwf	??_sprintf,w
  6924  035D  0084               	movwf	4
  6925  035E  3098               	movlw	high (_dpowers| (0+32768))
  6926  035F  3D43               	addwfc	??_sprintf+1,w
  6927  0360  0085               	movwf	5
  6928  0361  3F00               	moviw [0]fsr0
  6929  0362  00C4               	movwf	??_sprintf+2
  6930  0363  3F01               	moviw [1]fsr0
  6931  0364  00C5               	movwf	??_sprintf+3
  6932  0365  3F02               	moviw [2]fsr0
  6933  0366  00C6               	movwf	??_sprintf+4
  6934  0367  3F03               	moviw [3]fsr0
  6935  0368  00C7               	movwf	??_sprintf+5
  6936  0369  0847               	movf	??_sprintf+5,w
  6937  036A  024D               	subwf	sprintf@val+3,w
  6938  036B  1D03               	skipz
  6939  036C  2B77               	goto	u2475
  6940  036D  0846               	movf	??_sprintf+4,w
  6941  036E  024C               	subwf	sprintf@val+2,w
  6942  036F  1D03               	skipz
  6943  0370  2B77               	goto	u2475
  6944  0371  0845               	movf	??_sprintf+3,w
  6945  0372  024B               	subwf	sprintf@val+1,w
  6946  0373  1D03               	skipz
  6947  0374  2B77               	goto	u2475
  6948  0375  0844               	movf	??_sprintf+2,w
  6949  0376  024A               	subwf	sprintf@val,w
  6950  0377                     u2475:	
  6951  0377  1C03               	btfss	3,0
  6952  0378  2B81               	goto	l2590
  6953                           
  6954                           ;doprnt.c: 1326: break;
  6955  0379  3001               	movlw	1
  6956  037A  00C2               	movwf	??_sprintf
  6957  037B  0842               	movf	??_sprintf,w
  6958  037C  07D3               	addwf	sprintf@c,f
  6959  037D  300A               	movlw	10
  6960  037E  0653               	xorwf	sprintf@c,w
  6961  037F  1D03               	btfss	3,2
  6962  0380  2B54               	goto	l2584
  6963  0381                     l2590:	
  6964                           
  6965                           ;doprnt.c: 1358: if(c < prec)
  6966  0381  0852               	movf	sprintf@prec+1,w
  6967  0382  3A80               	xorlw	128
  6968  0383  3C80               	sublw	128
  6969  0384  1D03               	skipz
  6970  0385  2B88               	goto	u2495
  6971  0386  0851               	movf	sprintf@prec,w
  6972  0387  0253               	subwf	sprintf@c,w
  6973  0388                     u2495:	
  6974  0388  1803               	skipnc
  6975  0389  2B90               	goto	l2594
  6976                           
  6977                           ;doprnt.c: 1359: c = prec;
  6978  038A  0020               	movlb	0	; select bank0
  6979  038B  0851               	movf	sprintf@prec,w
  6980  038C  00C2               	movwf	??_sprintf
  6981  038D  0842               	movf	??_sprintf,w
  6982  038E  00D3               	movwf	sprintf@c
  6983  038F  2BA4               	goto	l427
  6984  0390                     l2594:	
  6985                           
  6986                           ;doprnt.c: 1360: else if(prec < c)
  6987  0390  0020               	movlb	0	; select bank0
  6988  0391  0852               	movf	sprintf@prec+1,w
  6989  0392  3A80               	xorlw	128
  6990  0393  00C2               	movwf	??_sprintf
  6991  0394  3080               	movlw	128
  6992  0395  0242               	subwf	??_sprintf,w
  6993  0396  1D03               	skipz
  6994  0397  2B9A               	goto	u2505
  6995  0398  0853               	movf	sprintf@c,w
  6996  0399  0251               	subwf	sprintf@prec,w
  6997  039A                     u2505:	
  6998  039A  1803               	skipnc
  6999  039B  2BA4               	goto	l427
  7000                           
  7001                           ;doprnt.c: 1361: prec = c;
  7002  039C  0020               	movlb	0	; select bank0
  7003  039D  0853               	movf	sprintf@c,w
  7004  039E  00C2               	movwf	??_sprintf
  7005  039F  01C3               	clrf	??_sprintf+1
  7006  03A0  0842               	movf	??_sprintf,w
  7007  03A1  00D1               	movwf	sprintf@prec
  7008  03A2  0843               	movf	??_sprintf+1,w
  7009  03A3  00D2               	movwf	sprintf@prec+1
  7010  03A4                     l427:	
  7011                           
  7012                           ;doprnt.c: 1400: if(width > c)
  7013  03A4  0020               	movlb	0	; select bank0
  7014  03A5  0850               	movf	sprintf@width+1,w
  7015  03A6  3A80               	xorlw	128
  7016  03A7  3C80               	sublw	128
  7017  03A8  1D03               	skipz
  7018  03A9  2BAC               	goto	u2515
  7019  03AA  084F               	movf	sprintf@width,w
  7020  03AB  0253               	subwf	sprintf@c,w
  7021  03AC                     u2515:	
  7022  03AC  1803               	skipnc
  7023  03AD  2BB7               	goto	l2600
  7024                           
  7025                           ;doprnt.c: 1401: width -= c;
  7026  03AE  0020               	movlb	0	; select bank0
  7027  03AF  0853               	movf	sprintf@c,w
  7028  03B0  00C2               	movwf	??_sprintf
  7029  03B1  01C3               	clrf	??_sprintf+1
  7030  03B2  0842               	movf	??_sprintf,w
  7031  03B3  02CF               	subwf	sprintf@width,f
  7032  03B4  0843               	movf	??_sprintf+1,w
  7033  03B5  3BD0               	subwfb	sprintf@width+1,f
  7034  03B6  2BBA               	goto	l2602
  7035  03B7                     l2600:	
  7036                           
  7037                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  7038  03B7  0020               	movlb	0	; select bank0
  7039  03B8  01CF               	clrf	sprintf@width
  7040  03B9  01D0               	clrf	sprintf@width+1
  7041  03BA                     l2602:	
  7042                           
  7043                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  7044  03BA  084F               	movf	sprintf@width,w
  7045  03BB  0450               	iorwf	sprintf@width+1,w
  7046  03BC  1903               	btfsc	3,2
  7047  03BD  2C14               	goto	l2616
  7048                           
  7049                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  7050                           
  7051                           ;doprnt.c: 1448: do
  7052  03BE  3020               	movlw	32
  7053  03BF  00C2               	movwf	??_sprintf
  7054  03C0  084E               	movf	sprintf@sp,w
  7055  03C1  0086               	movwf	6
  7056  03C2  3001               	movlw	1	; select bank2/3
  7057  03C3  0087               	movwf	7
  7058  03C4  0842               	movf	??_sprintf,w
  7059  03C5  0081               	movwf	1
  7060  03C6  3001               	movlw	1
  7061  03C7  00C2               	movwf	??_sprintf
  7062  03C8  0842               	movf	??_sprintf,w
  7063  03C9  07CE               	addwf	sprintf@sp,f
  7064                           
  7065                           ;doprnt.c: 1450: while(--width);
  7066  03CA  30FF               	movlw	255
  7067  03CB  07CF               	addwf	sprintf@width,f
  7068  03CC  30FF               	movlw	255
  7069  03CD  3DD0               	addwfc	sprintf@width+1,f
  7070  03CE  2BBA               	goto	l2602
  7071  03CF                     l2610:	
  7072                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  7073                           
  7074                           
  7075                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  7076  03CF  3000               	movlw	0
  7077  03D0  00B1               	movwf	___llmod@divisor+3
  7078  03D1  3000               	movlw	0
  7079  03D2  00B0               	movwf	___llmod@divisor+2
  7080  03D3  3000               	movlw	0
  7081  03D4  00AF               	movwf	___llmod@divisor+1
  7082  03D5  300A               	movlw	10
  7083  03D6  00AE               	movwf	___llmod@divisor
  7084  03D7  0852               	movf	sprintf@prec+1,w
  7085  03D8  0085               	movwf	5
  7086  03D9  0851               	movf	sprintf@prec,w
  7087  03DA  0084               	movwf	4
  7088  03DB  3584               	lslf	4,f
  7089  03DC  0D85               	rlf	5,f
  7090  03DD  3584               	lslf	4,f
  7091  03DE  0D85               	rlf	5,f
  7092  03DF  3000               	movlw	low (_dpowers| (0+32768))
  7093  03E0  0784               	addwf	4,f
  7094  03E1  3098               	movlw	high (_dpowers| (0+32768))
  7095  03E2  3D85               	addwfc	5,f
  7096  03E3  3F00               	moviw [0]fsr0
  7097  03E4  00A0               	movwf	___lldiv@divisor
  7098  03E5  3F01               	moviw [1]fsr0
  7099  03E6  00A1               	movwf	___lldiv@divisor+1
  7100  03E7  3F02               	moviw [2]fsr0
  7101  03E8  00A2               	movwf	___lldiv@divisor+2
  7102  03E9  3F03               	moviw [3]fsr0
  7103  03EA  00A3               	movwf	___lldiv@divisor+3
  7104  03EB  084D               	movf	sprintf@val+3,w
  7105  03EC  00A7               	movwf	___lldiv@dividend+3
  7106  03ED  084C               	movf	sprintf@val+2,w
  7107  03EE  00A6               	movwf	___lldiv@dividend+2
  7108  03EF  084B               	movf	sprintf@val+1,w
  7109  03F0  00A5               	movwf	___lldiv@dividend+1
  7110  03F1  084A               	movf	sprintf@val,w
  7111  03F2  00A4               	movwf	___lldiv@dividend
  7112  03F3  3189  2158  3182   	fcall	___lldiv
  7113  03F6  0020               	movlb	0	; select bank0
  7114  03F7  0823               	movf	?___lldiv+3,w
  7115  03F8  00B5               	movwf	___llmod@dividend+3
  7116  03F9  0822               	movf	?___lldiv+2,w
  7117  03FA  00B4               	movwf	___llmod@dividend+2
  7118  03FB  0821               	movf	?___lldiv+1,w
  7119  03FC  00B3               	movwf	___llmod@dividend+1
  7120  03FD  0820               	movf	?___lldiv,w
  7121  03FE  00B2               	movwf	___llmod@dividend
  7122  03FF  3188  20D2  3182   	fcall	___llmod
  7123  0402  0020               	movlb	0	; select bank0
  7124  0403  082E               	movf	?___llmod,w
  7125  0404  3E30               	addlw	48
  7126  0405  00C2               	movwf	??_sprintf
  7127  0406  0842               	movf	??_sprintf,w
  7128  0407  00D3               	movwf	sprintf@c
  7129                           
  7130                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7131  0408  0853               	movf	sprintf@c,w
  7132  0409  00C2               	movwf	??_sprintf
  7133  040A  084E               	movf	sprintf@sp,w
  7134  040B  0086               	movwf	6
  7135  040C  3001               	movlw	1	; select bank2/3
  7136  040D  0087               	movwf	7
  7137  040E  0842               	movf	??_sprintf,w
  7138  040F  0081               	movwf	1
  7139  0410  3001               	movlw	1
  7140  0411  00C2               	movwf	??_sprintf
  7141  0412  0842               	movf	??_sprintf,w
  7142  0413  07CE               	addwf	sprintf@sp,f
  7143  0414                     l2616:	
  7144  0414  30FF               	movlw	255
  7145  0415  07D1               	addwf	sprintf@prec,f
  7146  0416  30FF               	movlw	255
  7147  0417  3DD2               	addwfc	sprintf@prec+1,f
  7148  0418  0A51               	incf	sprintf@prec,w
  7149  0419  1D03               	skipz
  7150  041A  2BCF               	goto	l2610
  7151  041B  0A52               	incf	sprintf@prec+1,w
  7152  041C  1903               	btfsc	3,2
  7153  041D  2A5E               	goto	l2618
  7154  041E  2BCF               	goto	l2610
  7155  041F                     l2620:	
  7156                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7157                           
  7158                           
  7159                           ;doprnt.c: 1557: *sp = 0;
  7160  041F  084E               	movf	sprintf@sp,w
  7161  0420  0086               	movwf	6
  7162  0421  3001               	movlw	1	; select bank2/3
  7163  0422  0087               	movwf	7
  7164  0423  0181               	clrf	1
  7165  0424  0008               	return
  7166  0425                     __end_of_sprintf:	
  7167                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7168                           
  7169                           
  7170                           	psect	text22
  7171  154D                     __ptext22:	
  7172 ;; *************** function _isdigit *****************
  7173 ;; Defined at:
  7174 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7175 ;; Parameters:    Size  Location     Type
  7176 ;;  c               1    wreg     unsigned char 
  7177 ;; Auto vars:     Size  Location     Type
  7178 ;;  c               1    1[BANK0 ] unsigned char 
  7179 ;; Return value:  Size  Location     Type
  7180 ;;		None               void
  7181 ;; Registers used:
  7182 ;;		wreg, status,2, status,0
  7183 ;; Tracked objects:
  7184 ;;		On entry : 0/0
  7185 ;;		On exit  : 0/0
  7186 ;;		Unchanged: 0/0
  7187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7189 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7191 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7192 ;;Total ram usage:        2 bytes
  7193 ;; Hardware stack levels used:    1
  7194 ;; Hardware stack levels required when called:    7
  7195 ;; This function calls:
  7196 ;;		Nothing
  7197 ;; This function is called by:
  7198 ;;		_sprintf
  7199 ;; This function uses a non-reentrant model
  7200 ;;
  7201                           
  7202                           
  7203                           ;psect for function _isdigit
  7204  154D                     _isdigit:	
  7205                           
  7206                           ;incstack = 0
  7207                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7208                           ;isdigit@c stored from wreg
  7209  154D  0020               	movlb	0	; select bank0
  7210  154E  00A1               	movwf	isdigit@c
  7211  154F  01A0               	clrf	_isdigit$1728
  7212  1550  303A               	movlw	58
  7213  1551  0221               	subwf	isdigit@c,w
  7214  1552  1803               	skipnc
  7215  1553  2D5A               	goto	l2298
  7216  1554  3030               	movlw	48
  7217  1555  0221               	subwf	isdigit@c,w
  7218  1556  1C03               	skipc
  7219  1557  2D5A               	goto	l2298
  7220  1558  01A0               	clrf	_isdigit$1728
  7221  1559  0AA0               	incf	_isdigit$1728,f
  7222  155A                     l2298:	
  7223  155A  0C20               	rrf	_isdigit$1728,w
  7224  155B  0008               	return
  7225  155C                     __end_of_isdigit:	
  7226                           
  7227                           	psect	text23
  7228  1606                     __ptext23:	
  7229 ;; *************** function ___wmul *****************
  7230 ;; Defined at:
  7231 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7232 ;; Parameters:    Size  Location     Type
  7233 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7234 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;  product         2    4[BANK0 ] unsigned int 
  7237 ;; Return value:  Size  Location     Type
  7238 ;;                  2    0[BANK0 ] unsigned int 
  7239 ;; Registers used:
  7240 ;;		wreg, status,2, status,0
  7241 ;; Tracked objects:
  7242 ;;		On entry : 0/0
  7243 ;;		On exit  : 0/0
  7244 ;;		Unchanged: 0/0
  7245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7246 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7247 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7249 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7250 ;;Total ram usage:        6 bytes
  7251 ;; Hardware stack levels used:    1
  7252 ;; Hardware stack levels required when called:    7
  7253 ;; This function calls:
  7254 ;;		Nothing
  7255 ;; This function is called by:
  7256 ;;		_sprintf
  7257 ;; This function uses a non-reentrant model
  7258 ;;
  7259                           
  7260                           
  7261                           ;psect for function ___wmul
  7262  1606                     ___wmul:	
  7263                           
  7264                           ;incstack = 0
  7265                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7266  1606  0020               	movlb	0	; select bank0
  7267  1607  01A4               	clrf	___wmul@product
  7268  1608  01A5               	clrf	___wmul@product+1
  7269  1609                     l2304:	
  7270  1609  1C20               	btfss	___wmul@multiplier,0
  7271  160A  2E0F               	goto	l442
  7272  160B  0822               	movf	___wmul@multiplicand,w
  7273  160C  07A4               	addwf	___wmul@product,f
  7274  160D  0823               	movf	___wmul@multiplicand+1,w
  7275  160E  3DA5               	addwfc	___wmul@product+1,f
  7276  160F                     l442:	
  7277  160F  3001               	movlw	1
  7278  1610                     u1905:	
  7279  1610  35A2               	lslf	___wmul@multiplicand,f
  7280  1611  0DA3               	rlf	___wmul@multiplicand+1,f
  7281  1612  0B89               	decfsz	9,f
  7282  1613  2E10               	goto	u1905
  7283  1614  3001               	movlw	1
  7284  1615                     u1915:	
  7285  1615  36A1               	lsrf	___wmul@multiplier+1,f
  7286  1616  0CA0               	rrf	___wmul@multiplier,f
  7287  1617  0B89               	decfsz	9,f
  7288  1618  2E15               	goto	u1915
  7289  1619  0820               	movf	___wmul@multiplier,w
  7290  161A  0421               	iorwf	___wmul@multiplier+1,w
  7291  161B  1D03               	btfss	3,2
  7292  161C  2E09               	goto	l2304
  7293  161D  0825               	movf	___wmul@product+1,w
  7294  161E  00A1               	movwf	?___wmul+1
  7295  161F  0824               	movf	___wmul@product,w
  7296  1620  00A0               	movwf	?___wmul
  7297  1621  0008               	return
  7298  1622                     __end_of___wmul:	
  7299                           
  7300                           	psect	text24
  7301  08D2                     __ptext24:	
  7302 ;; *************** function ___llmod *****************
  7303 ;; Defined at:
  7304 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  7305 ;; Parameters:    Size  Location     Type
  7306 ;;  divisor         4   14[BANK0 ] unsigned long 
  7307 ;;  dividend        4   18[BANK0 ] unsigned long 
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;  counter         1   23[BANK0 ] unsigned char 
  7310 ;; Return value:  Size  Location     Type
  7311 ;;                  4   14[BANK0 ] unsigned long 
  7312 ;; Registers used:
  7313 ;;		wreg, status,2, status,0
  7314 ;; Tracked objects:
  7315 ;;		On entry : 0/0
  7316 ;;		On exit  : 0/0
  7317 ;;		Unchanged: 0/0
  7318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7319 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7320 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7321 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7322 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7323 ;;Total ram usage:       10 bytes
  7324 ;; Hardware stack levels used:    1
  7325 ;; Hardware stack levels required when called:    7
  7326 ;; This function calls:
  7327 ;;		Nothing
  7328 ;; This function is called by:
  7329 ;;		_sprintf
  7330 ;; This function uses a non-reentrant model
  7331 ;;
  7332                           
  7333                           
  7334                           ;psect for function ___llmod
  7335  08D2                     ___llmod:	
  7336                           
  7337                           ;incstack = 0
  7338                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  7339  08D2  0020               	movlb	0	; select bank0
  7340  08D3  0831               	movf	___llmod@divisor+3,w
  7341  08D4  0430               	iorwf	___llmod@divisor+2,w
  7342  08D5  042F               	iorwf	___llmod@divisor+1,w
  7343  08D6  042E               	iorwf	___llmod@divisor,w
  7344  08D7  1903               	skipnz
  7345  08D8  290C               	goto	l2426
  7346  08D9  01B7               	clrf	___llmod@counter
  7347  08DA  0AB7               	incf	___llmod@counter,f
  7348  08DB                     l2416:	
  7349  08DB  1BB1               	btfsc	___llmod@divisor+3,7
  7350  08DC  28E9               	goto	l2418
  7351  08DD  3001               	movlw	1
  7352  08DE                     u2245:	
  7353  08DE  35AE               	lslf	___llmod@divisor,f
  7354  08DF  0DAF               	rlf	___llmod@divisor+1,f
  7355  08E0  0DB0               	rlf	___llmod@divisor+2,f
  7356  08E1  0DB1               	rlf	___llmod@divisor+3,f
  7357  08E2  0B89               	decfsz	9,f
  7358  08E3  28DE               	goto	u2245
  7359  08E4  3001               	movlw	1
  7360  08E5  00B6               	movwf	??___llmod
  7361  08E6  0836               	movf	??___llmod,w
  7362  08E7  07B7               	addwf	___llmod@counter,f
  7363  08E8  28DB               	goto	l2416
  7364  08E9                     l2418:	
  7365  08E9  0831               	movf	___llmod@divisor+3,w
  7366  08EA  0235               	subwf	___llmod@dividend+3,w
  7367  08EB  1D03               	skipz
  7368  08EC  28F7               	goto	u2265
  7369  08ED  0830               	movf	___llmod@divisor+2,w
  7370  08EE  0234               	subwf	___llmod@dividend+2,w
  7371  08EF  1D03               	skipz
  7372  08F0  28F7               	goto	u2265
  7373  08F1  082F               	movf	___llmod@divisor+1,w
  7374  08F2  0233               	subwf	___llmod@dividend+1,w
  7375  08F3  1D03               	skipz
  7376  08F4  28F7               	goto	u2265
  7377  08F5  082E               	movf	___llmod@divisor,w
  7378  08F6  0232               	subwf	___llmod@dividend,w
  7379  08F7                     u2265:	
  7380  08F7  1C03               	skipc
  7381  08F8  2901               	goto	l2422
  7382  08F9  082E               	movf	___llmod@divisor,w
  7383  08FA  02B2               	subwf	___llmod@dividend,f
  7384  08FB  082F               	movf	___llmod@divisor+1,w
  7385  08FC  3BB3               	subwfb	___llmod@dividend+1,f
  7386  08FD  0830               	movf	___llmod@divisor+2,w
  7387  08FE  3BB4               	subwfb	___llmod@dividend+2,f
  7388  08FF  0831               	movf	___llmod@divisor+3,w
  7389  0900  3BB5               	subwfb	___llmod@dividend+3,f
  7390  0901                     l2422:	
  7391  0901  3001               	movlw	1
  7392  0902                     u2275:	
  7393  0902  36B1               	lsrf	___llmod@divisor+3,f
  7394  0903  0CB0               	rrf	___llmod@divisor+2,f
  7395  0904  0CAF               	rrf	___llmod@divisor+1,f
  7396  0905  0CAE               	rrf	___llmod@divisor,f
  7397  0906  0B89               	decfsz	9,f
  7398  0907  2902               	goto	u2275
  7399  0908  3001               	movlw	1
  7400  0909  02B7               	subwf	___llmod@counter,f
  7401  090A  1D03               	btfss	3,2
  7402  090B  28E9               	goto	l2418
  7403  090C                     l2426:	
  7404  090C  0835               	movf	___llmod@dividend+3,w
  7405  090D  00B1               	movwf	?___llmod+3
  7406  090E  0834               	movf	___llmod@dividend+2,w
  7407  090F  00B0               	movwf	?___llmod+2
  7408  0910  0833               	movf	___llmod@dividend+1,w
  7409  0911  00AF               	movwf	?___llmod+1
  7410  0912  0832               	movf	___llmod@dividend,w
  7411  0913  00AE               	movwf	?___llmod
  7412  0914  0008               	return
  7413  0915                     __end_of___llmod:	
  7414                           
  7415                           	psect	text25
  7416  0958                     __ptext25:	
  7417 ;; *************** function ___lldiv *****************
  7418 ;; Defined at:
  7419 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  7420 ;; Parameters:    Size  Location     Type
  7421 ;;  divisor         4    0[BANK0 ] unsigned long 
  7422 ;;  dividend        4    4[BANK0 ] unsigned long 
  7423 ;; Auto vars:     Size  Location     Type
  7424 ;;  quotient        4    9[BANK0 ] unsigned long 
  7425 ;;  counter         1   13[BANK0 ] unsigned char 
  7426 ;; Return value:  Size  Location     Type
  7427 ;;                  4    0[BANK0 ] unsigned long 
  7428 ;; Registers used:
  7429 ;;		wreg, status,2, status,0
  7430 ;; Tracked objects:
  7431 ;;		On entry : 0/0
  7432 ;;		On exit  : 0/0
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7435 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7436 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7437 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7438 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7439 ;;Total ram usage:       14 bytes
  7440 ;; Hardware stack levels used:    1
  7441 ;; Hardware stack levels required when called:    7
  7442 ;; This function calls:
  7443 ;;		Nothing
  7444 ;; This function is called by:
  7445 ;;		_sprintf
  7446 ;; This function uses a non-reentrant model
  7447 ;;
  7448                           
  7449                           
  7450                           ;psect for function ___lldiv
  7451  0958                     ___lldiv:	
  7452                           
  7453                           ;incstack = 0
  7454                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7455  0958  3000               	movlw	0
  7456  0959  0020               	movlb	0	; select bank0
  7457  095A  00AC               	movwf	___lldiv@quotient+3
  7458  095B  3000               	movlw	0
  7459  095C  00AB               	movwf	___lldiv@quotient+2
  7460  095D  3000               	movlw	0
  7461  095E  00AA               	movwf	___lldiv@quotient+1
  7462  095F  3000               	movlw	0
  7463  0960  00A9               	movwf	___lldiv@quotient
  7464  0961  0823               	movf	___lldiv@divisor+3,w
  7465  0962  0422               	iorwf	___lldiv@divisor+2,w
  7466  0963  0421               	iorwf	___lldiv@divisor+1,w
  7467  0964  0420               	iorwf	___lldiv@divisor,w
  7468  0965  1903               	skipnz
  7469  0966  29A2               	goto	l2336
  7470  0967  01AD               	clrf	___lldiv@counter
  7471  0968  0AAD               	incf	___lldiv@counter,f
  7472  0969                     l2322:	
  7473  0969  1BA3               	btfsc	___lldiv@divisor+3,7
  7474  096A  2977               	goto	l2324
  7475  096B  3001               	movlw	1
  7476  096C                     u1945:	
  7477  096C  35A0               	lslf	___lldiv@divisor,f
  7478  096D  0DA1               	rlf	___lldiv@divisor+1,f
  7479  096E  0DA2               	rlf	___lldiv@divisor+2,f
  7480  096F  0DA3               	rlf	___lldiv@divisor+3,f
  7481  0970  0B89               	decfsz	9,f
  7482  0971  296C               	goto	u1945
  7483  0972  3001               	movlw	1
  7484  0973  00A8               	movwf	??___lldiv
  7485  0974  0828               	movf	??___lldiv,w
  7486  0975  07AD               	addwf	___lldiv@counter,f
  7487  0976  2969               	goto	l2322
  7488  0977                     l2324:	
  7489  0977  3001               	movlw	1
  7490  0978                     u1965:	
  7491  0978  35A9               	lslf	___lldiv@quotient,f
  7492  0979  0DAA               	rlf	___lldiv@quotient+1,f
  7493  097A  0DAB               	rlf	___lldiv@quotient+2,f
  7494  097B  0DAC               	rlf	___lldiv@quotient+3,f
  7495  097C  0B89               	decfsz	9,f
  7496  097D  2978               	goto	u1965
  7497  097E  0823               	movf	___lldiv@divisor+3,w
  7498  097F  0227               	subwf	___lldiv@dividend+3,w
  7499  0980  1D03               	skipz
  7500  0981  298C               	goto	u1975
  7501  0982  0822               	movf	___lldiv@divisor+2,w
  7502  0983  0226               	subwf	___lldiv@dividend+2,w
  7503  0984  1D03               	skipz
  7504  0985  298C               	goto	u1975
  7505  0986  0821               	movf	___lldiv@divisor+1,w
  7506  0987  0225               	subwf	___lldiv@dividend+1,w
  7507  0988  1D03               	skipz
  7508  0989  298C               	goto	u1975
  7509  098A  0820               	movf	___lldiv@divisor,w
  7510  098B  0224               	subwf	___lldiv@dividend,w
  7511  098C                     u1975:	
  7512  098C  1C03               	skipc
  7513  098D  2997               	goto	l2332
  7514  098E  0820               	movf	___lldiv@divisor,w
  7515  098F  02A4               	subwf	___lldiv@dividend,f
  7516  0990  0821               	movf	___lldiv@divisor+1,w
  7517  0991  3BA5               	subwfb	___lldiv@dividend+1,f
  7518  0992  0822               	movf	___lldiv@divisor+2,w
  7519  0993  3BA6               	subwfb	___lldiv@dividend+2,f
  7520  0994  0823               	movf	___lldiv@divisor+3,w
  7521  0995  3BA7               	subwfb	___lldiv@dividend+3,f
  7522  0996  1429               	bsf	___lldiv@quotient,0
  7523  0997                     l2332:	
  7524  0997  3001               	movlw	1
  7525  0998                     u1985:	
  7526  0998  36A3               	lsrf	___lldiv@divisor+3,f
  7527  0999  0CA2               	rrf	___lldiv@divisor+2,f
  7528  099A  0CA1               	rrf	___lldiv@divisor+1,f
  7529  099B  0CA0               	rrf	___lldiv@divisor,f
  7530  099C  0B89               	decfsz	9,f
  7531  099D  2998               	goto	u1985
  7532  099E  3001               	movlw	1
  7533  099F  02AD               	subwf	___lldiv@counter,f
  7534  09A0  1D03               	btfss	3,2
  7535  09A1  2977               	goto	l2324
  7536  09A2                     l2336:	
  7537  09A2  082C               	movf	___lldiv@quotient+3,w
  7538  09A3  00A3               	movwf	?___lldiv+3
  7539  09A4  082B               	movf	___lldiv@quotient+2,w
  7540  09A5  00A2               	movwf	?___lldiv+2
  7541  09A6  082A               	movf	___lldiv@quotient+1,w
  7542  09A7  00A1               	movwf	?___lldiv+1
  7543  09A8  0829               	movf	___lldiv@quotient,w
  7544  09A9  00A0               	movwf	?___lldiv
  7545  09AA  0008               	return
  7546  09AB                     __end_of___lldiv:	
  7547                           
  7548                           	psect	text26
  7549  1747                     __ptext26:	
  7550 ;; *************** function ___lltoft *****************
  7551 ;; Defined at:
  7552 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  7553 ;; Parameters:    Size  Location     Type
  7554 ;;  c               4    8[BANK0 ] unsigned long 
  7555 ;; Auto vars:     Size  Location     Type
  7556 ;;  exp             1   13[BANK0 ] unsigned char 
  7557 ;; Return value:  Size  Location     Type
  7558 ;;                  3    8[BANK0 ] float 
  7559 ;; Registers used:
  7560 ;;		wreg, status,2, status,0, pclath, cstack
  7561 ;; Tracked objects:
  7562 ;;		On entry : 0/0
  7563 ;;		On exit  : 0/0
  7564 ;;		Unchanged: 0/0
  7565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7566 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7567 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7568 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7569 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7570 ;;Total ram usage:        6 bytes
  7571 ;; Hardware stack levels used:    1
  7572 ;; Hardware stack levels required when called:    8
  7573 ;; This function calls:
  7574 ;;		___ftpack
  7575 ;; This function is called by:
  7576 ;;		_loop
  7577 ;;		_ftoa
  7578 ;; This function uses a non-reentrant model
  7579 ;;
  7580                           
  7581                           
  7582                           ;psect for function ___lltoft
  7583  1747                     ___lltoft:	
  7584                           
  7585                           ;incstack = 0
  7586                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  7587  1747  308E               	movlw	142
  7588  1748  0020               	movlb	0	; select bank0
  7589  1749  00AC               	movwf	??___lltoft
  7590  174A  082C               	movf	??___lltoft,w
  7591  174B  00AD               	movwf	___lltoft@exp
  7592  174C                     l2770:	
  7593  174C  30FF               	movlw	255
  7594  174D  052B               	andwf	___lltoft@c+3,w
  7595  174E  1903               	btfsc	3,2
  7596  174F  2F5C               	goto	l2772
  7597  1750  3001               	movlw	1
  7598  1751                     u2855:	
  7599  1751  36AB               	lsrf	___lltoft@c+3,f
  7600  1752  0CAA               	rrf	___lltoft@c+2,f
  7601  1753  0CA9               	rrf	___lltoft@c+1,f
  7602  1754  0CA8               	rrf	___lltoft@c,f
  7603  1755  0B89               	decfsz	9,f
  7604  1756  2F51               	goto	u2855
  7605  1757  3001               	movlw	1
  7606  1758  00AC               	movwf	??___lltoft
  7607  1759  082C               	movf	??___lltoft,w
  7608  175A  07AD               	addwf	___lltoft@exp,f
  7609  175B  2F4C               	goto	l2770
  7610  175C                     l2772:	
  7611  175C  0828               	movf	___lltoft@c,w
  7612  175D  00A0               	movwf	___ftpack@arg
  7613  175E  0829               	movf	___lltoft@c+1,w
  7614  175F  00A1               	movwf	___ftpack@arg+1
  7615  1760  082A               	movf	___lltoft@c+2,w
  7616  1761  00A2               	movwf	___ftpack@arg+2
  7617  1762  082D               	movf	___lltoft@exp,w
  7618  1763  00AC               	movwf	??___lltoft
  7619  1764  082C               	movf	??___lltoft,w
  7620  1765  00A3               	movwf	___ftpack@exp
  7621  1766  01A4               	clrf	___ftpack@sign
  7622  1767  318A  2203         	fcall	___ftpack
  7623  1769  0020               	movlb	0	; select bank0
  7624  176A  0820               	movf	?___ftpack,w
  7625  176B  00A8               	movwf	?___lltoft
  7626  176C  0821               	movf	?___ftpack+1,w
  7627  176D  00A9               	movwf	?___lltoft+1
  7628  176E  0822               	movf	?___ftpack+2,w
  7629  176F  00AA               	movwf	?___lltoft+2
  7630  1770  0008               	return
  7631  1771                     __end_of___lltoft:	
  7632                           
  7633                           	psect	text27
  7634  0B76                     __ptext27:	
  7635 ;; *************** function ___fttol *****************
  7636 ;; Defined at:
  7637 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  7638 ;; Parameters:    Size  Location     Type
  7639 ;;  f1              3   71[BANK0 ] float 
  7640 ;; Auto vars:     Size  Location     Type
  7641 ;;  lval            4    1[BANK1 ] unsigned long 
  7642 ;;  exp1            1    5[BANK1 ] unsigned char 
  7643 ;;  sign1           1    0[BANK1 ] unsigned char 
  7644 ;; Return value:  Size  Location     Type
  7645 ;;                  4   71[BANK0 ] long 
  7646 ;; Registers used:
  7647 ;;		wreg, status,2, status,0
  7648 ;; Tracked objects:
  7649 ;;		On entry : 0/0
  7650 ;;		On exit  : 0/0
  7651 ;;		Unchanged: 0/0
  7652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7653 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7654 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7655 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7656 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7657 ;;Total ram usage:       14 bytes
  7658 ;; Hardware stack levels used:    1
  7659 ;; Hardware stack levels required when called:    7
  7660 ;; This function calls:
  7661 ;;		Nothing
  7662 ;; This function is called by:
  7663 ;;		_ftoa
  7664 ;; This function uses a non-reentrant model
  7665 ;;
  7666                           
  7667                           
  7668                           ;psect for function ___fttol
  7669  0B76                     ___fttol:	
  7670                           
  7671                           ;incstack = 0
  7672                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7673  0B76  0020               	movlb	0	; select bank0
  7674  0B77  0867               	movf	___fttol@f1,w
  7675  0B78  00EB               	movwf	??___fttol
  7676  0B79  0868               	movf	___fttol@f1+1,w
  7677  0B7A  00EC               	movwf	??___fttol+1
  7678  0B7B  0869               	movf	___fttol@f1+2,w
  7679  0B7C  00ED               	movwf	??___fttol+2
  7680  0B7D  1003               	clrc
  7681  0B7E  0D6C               	rlf	??___fttol+1,w
  7682  0B7F  0D6D               	rlf	??___fttol+2,w
  7683  0B80  00EE               	movwf	??___fttol+3
  7684  0B81  086E               	movf	??___fttol+3,w
  7685  0B82  0021               	movlb	1	; select bank1
  7686  0B83  00A5               	movwf	___fttol@exp1^(0+128)
  7687  0B84  0825               	movf	___fttol@exp1^(0+128),w
  7688  0B85  1D03               	btfss	3,2
  7689  0B86  2B91               	goto	l2730
  7690  0B87  3000               	movlw	0
  7691  0B88  0020               	movlb	0	; select bank0
  7692  0B89  00EA               	movwf	?___fttol+3
  7693  0B8A  3000               	movlw	0
  7694  0B8B  00E9               	movwf	?___fttol+2
  7695  0B8C  3000               	movlw	0
  7696  0B8D  00E8               	movwf	?___fttol+1
  7697  0B8E  3000               	movlw	0
  7698  0B8F  00E7               	movwf	?___fttol
  7699  0B90  0008               	return
  7700  0B91                     l2730:	
  7701  0B91  0020               	movlb	0	; select bank0
  7702  0B92  0867               	movf	___fttol@f1,w
  7703  0B93  00EB               	movwf	??___fttol
  7704  0B94  0868               	movf	___fttol@f1+1,w
  7705  0B95  00EC               	movwf	??___fttol+1
  7706  0B96  0869               	movf	___fttol@f1+2,w
  7707  0B97  00ED               	movwf	??___fttol+2
  7708  0B98  3017               	movlw	23
  7709  0B99                     u2765:	
  7710  0B99  36ED               	lsrf	??___fttol+2,f
  7711  0B9A  0CEC               	rrf	??___fttol+1,f
  7712  0B9B  0CEB               	rrf	??___fttol,f
  7713  0B9C  0B89               	decfsz	9,f
  7714  0B9D  2B99               	goto	u2765
  7715  0B9E  086B               	movf	??___fttol,w
  7716  0B9F  00EE               	movwf	??___fttol+3
  7717  0BA0  086E               	movf	??___fttol+3,w
  7718  0BA1  0021               	movlb	1	; select bank1
  7719  0BA2  00A0               	movwf	___fttol@sign1^(0+128)
  7720  0BA3  0020               	movlb	0	; select bank0
  7721  0BA4  17E8               	bsf	___fttol@f1+1,7
  7722  0BA5  30FF               	movlw	255
  7723  0BA6  05E7               	andwf	___fttol@f1,f
  7724  0BA7  30FF               	movlw	255
  7725  0BA8  05E8               	andwf	___fttol@f1+1,f
  7726  0BA9  3000               	movlw	0
  7727  0BAA  05E9               	andwf	___fttol@f1+2,f
  7728  0BAB  0867               	movf	___fttol@f1,w
  7729  0BAC  0021               	movlb	1	; select bank1
  7730  0BAD  00A1               	movwf	___fttol@lval^(0+128)
  7731  0BAE  0020               	movlb	0	; select bank0
  7732  0BAF  0868               	movf	___fttol@f1+1,w
  7733  0BB0  0021               	movlb	1	; select bank1
  7734  0BB1  00A2               	movwf	(___fttol@lval^(0+128)+1)
  7735  0BB2  0020               	movlb	0	; select bank0
  7736  0BB3  0869               	movf	___fttol@f1+2,w
  7737  0BB4  0021               	movlb	1	; select bank1
  7738  0BB5  00A3               	movwf	(___fttol@lval^(0+128)+2)
  7739  0BB6  01A4               	clrf	(___fttol@lval^(0+128)+3)
  7740  0BB7  308E               	movlw	142
  7741  0BB8  02A5               	subwf	___fttol@exp1^(0+128),f
  7742  0BB9  1FA5               	btfss	___fttol@exp1^(0+128),7
  7743  0BBA  2BDB               	goto	l2750
  7744  0BBB  0825               	movf	___fttol@exp1^(0+128),w
  7745  0BBC  3A80               	xorlw	128
  7746  0BBD  3E8F               	addlw	143
  7747  0BBE  1803               	skipnc
  7748  0BBF  2BCA               	goto	l2748
  7749  0BC0  3000               	movlw	0
  7750  0BC1  0020               	movlb	0	; select bank0
  7751  0BC2  00EA               	movwf	?___fttol+3
  7752  0BC3  3000               	movlw	0
  7753  0BC4  00E9               	movwf	?___fttol+2
  7754  0BC5  3000               	movlw	0
  7755  0BC6  00E8               	movwf	?___fttol+1
  7756  0BC7  3000               	movlw	0
  7757  0BC8  00E7               	movwf	?___fttol
  7758  0BC9  0008               	return
  7759  0BCA                     l2748:	
  7760  0BCA  3001               	movlw	1
  7761  0BCB                     u2795:	
  7762  0BCB  0021               	movlb	1	; select bank1
  7763  0BCC  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
  7764  0BCD  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
  7765  0BCE  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
  7766  0BCF  0CA1               	rrf	___fttol@lval^(0+128),f
  7767  0BD0  0B89               	decfsz	9,f
  7768  0BD1  2BCB               	goto	u2795
  7769  0BD2  3001               	movlw	1
  7770  0BD3  0020               	movlb	0	; select bank0
  7771  0BD4  00EB               	movwf	??___fttol
  7772  0BD5  086B               	movf	??___fttol,w
  7773  0BD6  0021               	movlb	1	; select bank1
  7774  0BD7  07A5               	addwf	___fttol@exp1^(0+128),f
  7775  0BD8  1903               	btfsc	3,2
  7776  0BD9  2BF7               	goto	l2758
  7777  0BDA  2BCA               	goto	l2748
  7778  0BDB                     l2750:	
  7779  0BDB  3018               	movlw	24
  7780  0BDC  0225               	subwf	___fttol@exp1^(0+128),w
  7781  0BDD  1C03               	skipc
  7782  0BDE  2BF3               	goto	l736
  7783  0BDF  3000               	movlw	0
  7784  0BE0  0020               	movlb	0	; select bank0
  7785  0BE1  00EA               	movwf	?___fttol+3
  7786  0BE2  3000               	movlw	0
  7787  0BE3  00E9               	movwf	?___fttol+2
  7788  0BE4  3000               	movlw	0
  7789  0BE5  00E8               	movwf	?___fttol+1
  7790  0BE6  3000               	movlw	0
  7791  0BE7  00E7               	movwf	?___fttol
  7792  0BE8  0008               	return
  7793  0BE9                     l2756:	
  7794  0BE9  3001               	movlw	1
  7795  0BEA                     u2825:	
  7796  0BEA  0021               	movlb	1	; select bank1
  7797  0BEB  35A1               	lslf	___fttol@lval^(0+128),f
  7798  0BEC  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
  7799  0BED  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
  7800  0BEE  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
  7801  0BEF  0B89               	decfsz	9,f
  7802  0BF0  2BEA               	goto	u2825
  7803  0BF1  3001               	movlw	1
  7804  0BF2  02A5               	subwf	___fttol@exp1^(0+128),f
  7805  0BF3                     l736:	
  7806  0BF3  0021               	movlb	1	; select bank1
  7807  0BF4  0825               	movf	___fttol@exp1^(0+128),w
  7808  0BF5  1D03               	btfss	3,2
  7809  0BF6  2BE9               	goto	l2756
  7810  0BF7                     l2758:	
  7811  0BF7  0820               	movf	___fttol@sign1^(0+128),w
  7812  0BF8  1903               	btfsc	3,2
  7813  0BF9  2C05               	goto	l2762
  7814  0BFA  09A1               	comf	___fttol@lval^(0+128),f
  7815  0BFB  09A2               	comf	(___fttol@lval+1)^(0+128),f
  7816  0BFC  09A3               	comf	(___fttol@lval+2)^(0+128),f
  7817  0BFD  09A4               	comf	(___fttol@lval+3)^(0+128),f
  7818  0BFE  0AA1               	incf	___fttol@lval^(0+128),f
  7819  0BFF  1903               	skipnz
  7820  0C00  0AA2               	incf	(___fttol@lval+1)^(0+128),f
  7821  0C01  1903               	skipnz
  7822  0C02  0AA3               	incf	(___fttol@lval+2)^(0+128),f
  7823  0C03  1903               	skipnz
  7824  0C04  0AA4               	incf	(___fttol@lval+3)^(0+128),f
  7825  0C05                     l2762:	
  7826  0C05  0824               	movf	(___fttol@lval+3)^(0+128),w
  7827  0C06  0020               	movlb	0	; select bank0
  7828  0C07  00EA               	movwf	?___fttol+3
  7829  0C08  0021               	movlb	1	; select bank1
  7830  0C09  0823               	movf	(___fttol@lval+2)^(0+128),w
  7831  0C0A  0020               	movlb	0	; select bank0
  7832  0C0B  00E9               	movwf	?___fttol+2
  7833  0C0C  0021               	movlb	1	; select bank1
  7834  0C0D  0822               	movf	(___fttol@lval+1)^(0+128),w
  7835  0C0E  0020               	movlb	0	; select bank0
  7836  0C0F  00E8               	movwf	?___fttol+1
  7837  0C10  0021               	movlb	1	; select bank1
  7838  0C11  0821               	movf	___fttol@lval^(0+128),w
  7839  0C12  0020               	movlb	0	; select bank0
  7840  0C13  00E7               	movwf	?___fttol
  7841  0C14  0008               	return
  7842  0C15                     __end_of___fttol:	
  7843                           
  7844                           	psect	text28
  7845  0800                     __ptext28:	
  7846 ;; *************** function ___ftsub *****************
  7847 ;; Defined at:
  7848 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  7849 ;; Parameters:    Size  Location     Type
  7850 ;;  f2              3   27[BANK0 ] float 
  7851 ;;  f1              3   30[BANK0 ] float 
  7852 ;; Auto vars:     Size  Location     Type
  7853 ;;		None
  7854 ;; Return value:  Size  Location     Type
  7855 ;;                  3   27[BANK0 ] float 
  7856 ;; Registers used:
  7857 ;;		wreg, status,2, status,0, pclath, cstack
  7858 ;; Tracked objects:
  7859 ;;		On entry : 0/0
  7860 ;;		On exit  : 0/0
  7861 ;;		Unchanged: 0/0
  7862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7863 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7866 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7867 ;;Total ram usage:        6 bytes
  7868 ;; Hardware stack levels used:    1
  7869 ;; Hardware stack levels required when called:    9
  7870 ;; This function calls:
  7871 ;;		___ftadd
  7872 ;; This function is called by:
  7873 ;;		_ftoa
  7874 ;; This function uses a non-reentrant model
  7875 ;;
  7876                           
  7877                           
  7878                           ;psect for function ___ftsub
  7879  0800                     ___ftsub:	
  7880                           
  7881                           ;incstack = 0
  7882                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  7883  0800  0020               	movlb	0	; select bank0
  7884  0801  083D               	movf	___ftsub@f2+2,w
  7885  0802  043C               	iorwf	___ftsub@f2+1,w
  7886  0803  043B               	iorwf	___ftsub@f2,w
  7887  0804  1903               	skipnz
  7888  0805  2808               	goto	l2720
  7889  0806  3080               	movlw	128
  7890  0807  06BD               	xorwf	___ftsub@f2+2,f
  7891  0808                     l2720:	
  7892  0808  083E               	movf	___ftsub@f1,w
  7893  0809  00AE               	movwf	___ftadd@f1
  7894  080A  083F               	movf	___ftsub@f1+1,w
  7895  080B  00AF               	movwf	___ftadd@f1+1
  7896  080C  0840               	movf	___ftsub@f1+2,w
  7897  080D  00B0               	movwf	___ftadd@f1+2
  7898  080E  083B               	movf	___ftsub@f2,w
  7899  080F  00B1               	movwf	___ftadd@f2
  7900  0810  083C               	movf	___ftsub@f2+1,w
  7901  0811  00B2               	movwf	___ftadd@f2+1
  7902  0812  083D               	movf	___ftsub@f2+2,w
  7903  0813  00B3               	movwf	___ftadd@f2+2
  7904  0814  318F  270A         	fcall	___ftadd
  7905  0816  0020               	movlb	0	; select bank0
  7906  0817  082E               	movf	?___ftadd,w
  7907  0818  00BB               	movwf	?___ftsub
  7908  0819  082F               	movf	?___ftadd+1,w
  7909  081A  00BC               	movwf	?___ftsub+1
  7910  081B  0830               	movf	?___ftadd+2,w
  7911  081C  00BD               	movwf	?___ftsub+2
  7912  081D  0008               	return
  7913  081E                     __end_of___ftsub:	
  7914                           
  7915                           	psect	text29
  7916  1537                     __ptext29:	
  7917 ;; *************** function ___ftneg *****************
  7918 ;; Defined at:
  7919 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  7920 ;; Parameters:    Size  Location     Type
  7921 ;;  f1              3   55[BANK0 ] float 
  7922 ;; Auto vars:     Size  Location     Type
  7923 ;;		None
  7924 ;; Return value:  Size  Location     Type
  7925 ;;                  3   55[BANK0 ] float 
  7926 ;; Registers used:
  7927 ;;		wreg
  7928 ;; Tracked objects:
  7929 ;;		On entry : 0/0
  7930 ;;		On exit  : 0/0
  7931 ;;		Unchanged: 0/0
  7932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7933 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7936 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7937 ;;Total ram usage:        3 bytes
  7938 ;; Hardware stack levels used:    1
  7939 ;; Hardware stack levels required when called:    7
  7940 ;; This function calls:
  7941 ;;		Nothing
  7942 ;; This function is called by:
  7943 ;;		_loop
  7944 ;;		_ftoa
  7945 ;; This function uses a non-reentrant model
  7946 ;;
  7947                           
  7948                           
  7949                           ;psect for function ___ftneg
  7950  1537                     ___ftneg:	
  7951                           
  7952                           ;incstack = 0
  7953                           ; Regs used in ___ftneg: [wreg]
  7954  1537  0020               	movlb	0	; select bank0
  7955  1538  0859               	movf	___ftneg@f1+2,w
  7956  1539  0458               	iorwf	___ftneg@f1+1,w
  7957  153A  0457               	iorwf	___ftneg@f1,w
  7958  153B  1903               	skipnz
  7959  153C  0008               	return
  7960  153D  3080               	movlw	128
  7961  153E  06D9               	xorwf	___ftneg@f1+2,f
  7962  153F  0008               	return
  7963  1540                     __end_of___ftneg:	
  7964                           
  7965                           	psect	text30
  7966  0D64                     __ptext30:	
  7967 ;; *************** function ___ftmul *****************
  7968 ;; Defined at:
  7969 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  7970 ;; Parameters:    Size  Location     Type
  7971 ;;  f1              3   55[BANK0 ] float 
  7972 ;;  f2              3   58[BANK0 ] float 
  7973 ;; Auto vars:     Size  Location     Type
  7974 ;;  f3_as_produc    3   66[BANK0 ] unsigned um
  7975 ;;  sign            1   70[BANK0 ] unsigned char 
  7976 ;;  cntr            1   69[BANK0 ] unsigned char 
  7977 ;;  exp             1   65[BANK0 ] unsigned char 
  7978 ;; Return value:  Size  Location     Type
  7979 ;;                  3   55[BANK0 ] float 
  7980 ;; Registers used:
  7981 ;;		wreg, status,2, status,0, pclath, cstack
  7982 ;; Tracked objects:
  7983 ;;		On entry : 0/0
  7984 ;;		On exit  : 0/0
  7985 ;;		Unchanged: 0/0
  7986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7987 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7988 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7989 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7990 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7991 ;;Total ram usage:       16 bytes
  7992 ;; Hardware stack levels used:    1
  7993 ;; Hardware stack levels required when called:    8
  7994 ;; This function calls:
  7995 ;;		___ftpack
  7996 ;; This function is called by:
  7997 ;;		_loop
  7998 ;;		_ftoa
  7999 ;; This function uses a non-reentrant model
  8000 ;;
  8001                           
  8002                           
  8003                           ;psect for function ___ftmul
  8004  0D64                     ___ftmul:	
  8005                           
  8006                           ;incstack = 0
  8007                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8008  0D64  0020               	movlb	0	; select bank0
  8009  0D65  0857               	movf	___ftmul@f1,w
  8010  0D66  00DD               	movwf	??___ftmul
  8011  0D67  0858               	movf	___ftmul@f1+1,w
  8012  0D68  00DE               	movwf	??___ftmul+1
  8013  0D69  0859               	movf	___ftmul@f1+2,w
  8014  0D6A  00DF               	movwf	??___ftmul+2
  8015  0D6B  1003               	clrc
  8016  0D6C  0D5E               	rlf	??___ftmul+1,w
  8017  0D6D  0D5F               	rlf	??___ftmul+2,w
  8018  0D6E  00E0               	movwf	??___ftmul+3
  8019  0D6F  0860               	movf	??___ftmul+3,w
  8020  0D70  00E1               	movwf	___ftmul@exp
  8021  0D71  0861               	movf	___ftmul@exp,w
  8022  0D72  1D03               	btfss	3,2
  8023  0D73  2D7B               	goto	l2664
  8024  0D74  3000               	movlw	0
  8025  0D75  00D7               	movwf	?___ftmul
  8026  0D76  3000               	movlw	0
  8027  0D77  00D8               	movwf	?___ftmul+1
  8028  0D78  3000               	movlw	0
  8029  0D79  00D9               	movwf	?___ftmul+2
  8030  0D7A  0008               	return
  8031  0D7B                     l2664:	
  8032  0D7B  085A               	movf	___ftmul@f2,w
  8033  0D7C  00DD               	movwf	??___ftmul
  8034  0D7D  085B               	movf	___ftmul@f2+1,w
  8035  0D7E  00DE               	movwf	??___ftmul+1
  8036  0D7F  085C               	movf	___ftmul@f2+2,w
  8037  0D80  00DF               	movwf	??___ftmul+2
  8038  0D81  1003               	clrc
  8039  0D82  0D5E               	rlf	??___ftmul+1,w
  8040  0D83  0D5F               	rlf	??___ftmul+2,w
  8041  0D84  00E0               	movwf	??___ftmul+3
  8042  0D85  0860               	movf	??___ftmul+3,w
  8043  0D86  00E6               	movwf	___ftmul@sign
  8044  0D87  0866               	movf	___ftmul@sign,w
  8045  0D88  1D03               	btfss	3,2
  8046  0D89  2D91               	goto	l2670
  8047  0D8A  3000               	movlw	0
  8048  0D8B  00D7               	movwf	?___ftmul
  8049  0D8C  3000               	movlw	0
  8050  0D8D  00D8               	movwf	?___ftmul+1
  8051  0D8E  3000               	movlw	0
  8052  0D8F  00D9               	movwf	?___ftmul+2
  8053  0D90  0008               	return
  8054  0D91                     l2670:	
  8055  0D91  0866               	movf	___ftmul@sign,w
  8056  0D92  3E7B               	addlw	123
  8057  0D93  00DD               	movwf	??___ftmul
  8058  0D94  085D               	movf	??___ftmul,w
  8059  0D95  07E1               	addwf	___ftmul@exp,f
  8060  0D96  0857               	movf	___ftmul@f1,w
  8061  0D97  00DD               	movwf	??___ftmul
  8062  0D98  0858               	movf	___ftmul@f1+1,w
  8063  0D99  00DE               	movwf	??___ftmul+1
  8064  0D9A  0859               	movf	___ftmul@f1+2,w
  8065  0D9B  00DF               	movwf	??___ftmul+2
  8066  0D9C  3010               	movlw	16
  8067  0D9D                     u2635:	
  8068  0D9D  36DF               	lsrf	??___ftmul+2,f
  8069  0D9E  0CDE               	rrf	??___ftmul+1,f
  8070  0D9F  0CDD               	rrf	??___ftmul,f
  8071  0DA0  0B89               	decfsz	9,f
  8072  0DA1  2D9D               	goto	u2635
  8073  0DA2  085D               	movf	??___ftmul,w
  8074  0DA3  00E0               	movwf	??___ftmul+3
  8075  0DA4  0860               	movf	??___ftmul+3,w
  8076  0DA5  00E6               	movwf	___ftmul@sign
  8077  0DA6  085A               	movf	___ftmul@f2,w
  8078  0DA7  00DD               	movwf	??___ftmul
  8079  0DA8  085B               	movf	___ftmul@f2+1,w
  8080  0DA9  00DE               	movwf	??___ftmul+1
  8081  0DAA  085C               	movf	___ftmul@f2+2,w
  8082  0DAB  00DF               	movwf	??___ftmul+2
  8083  0DAC  3010               	movlw	16
  8084  0DAD                     u2645:	
  8085  0DAD  36DF               	lsrf	??___ftmul+2,f
  8086  0DAE  0CDE               	rrf	??___ftmul+1,f
  8087  0DAF  0CDD               	rrf	??___ftmul,f
  8088  0DB0  0B89               	decfsz	9,f
  8089  0DB1  2DAD               	goto	u2645
  8090  0DB2  085D               	movf	??___ftmul,w
  8091  0DB3  00E0               	movwf	??___ftmul+3
  8092  0DB4  0860               	movf	??___ftmul+3,w
  8093  0DB5  06E6               	xorwf	___ftmul@sign,f
  8094  0DB6  3080               	movlw	128
  8095  0DB7  00DD               	movwf	??___ftmul
  8096  0DB8  085D               	movf	??___ftmul,w
  8097  0DB9  05E6               	andwf	___ftmul@sign,f
  8098  0DBA  17D8               	bsf	___ftmul@f1+1,7
  8099  0DBB  17DB               	bsf	___ftmul@f2+1,7
  8100  0DBC  30FF               	movlw	255
  8101  0DBD  05DA               	andwf	___ftmul@f2,f
  8102  0DBE  30FF               	movlw	255
  8103  0DBF  05DB               	andwf	___ftmul@f2+1,f
  8104  0DC0  3000               	movlw	0
  8105  0DC1  05DC               	andwf	___ftmul@f2+2,f
  8106  0DC2  3000               	movlw	0
  8107  0DC3  00E2               	movwf	___ftmul@f3_as_product
  8108  0DC4  3000               	movlw	0
  8109  0DC5  00E3               	movwf	___ftmul@f3_as_product+1
  8110  0DC6  3000               	movlw	0
  8111  0DC7  00E4               	movwf	___ftmul@f3_as_product+2
  8112  0DC8  3007               	movlw	7
  8113  0DC9  00DD               	movwf	??___ftmul
  8114  0DCA  085D               	movf	??___ftmul,w
  8115  0DCB  00E5               	movwf	___ftmul@cntr
  8116  0DCC                     l2682:	
  8117  0DCC  1C57               	btfss	___ftmul@f1,0
  8118  0DCD  2DD4               	goto	l2686
  8119  0DCE  085A               	movf	___ftmul@f2,w
  8120  0DCF  07E2               	addwf	___ftmul@f3_as_product,f
  8121  0DD0  085B               	movf	___ftmul@f2+1,w
  8122  0DD1  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  8123  0DD2  085C               	movf	___ftmul@f2+2,w
  8124  0DD3  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  8125  0DD4                     l2686:	
  8126  0DD4  3001               	movlw	1
  8127  0DD5                     u2665:	
  8128  0DD5  36D9               	lsrf	___ftmul@f1+2,f
  8129  0DD6  0CD8               	rrf	___ftmul@f1+1,f
  8130  0DD7  0CD7               	rrf	___ftmul@f1,f
  8131  0DD8  0B89               	decfsz	9,f
  8132  0DD9  2DD5               	goto	u2665
  8133  0DDA  3001               	movlw	1
  8134  0DDB                     u2675:	
  8135  0DDB  35DA               	lslf	___ftmul@f2,f
  8136  0DDC  0DDB               	rlf	___ftmul@f2+1,f
  8137  0DDD  0DDC               	rlf	___ftmul@f2+2,f
  8138  0DDE  0B89               	decfsz	9,f
  8139  0DDF  2DDB               	goto	u2675
  8140  0DE0  3001               	movlw	1
  8141  0DE1  02E5               	subwf	___ftmul@cntr,f
  8142  0DE2  1D03               	btfss	3,2
  8143  0DE3  2DCC               	goto	l2682
  8144  0DE4  3009               	movlw	9
  8145  0DE5  00DD               	movwf	??___ftmul
  8146  0DE6  085D               	movf	??___ftmul,w
  8147  0DE7  00E5               	movwf	___ftmul@cntr
  8148  0DE8                     l2694:	
  8149  0DE8  1C57               	btfss	___ftmul@f1,0
  8150  0DE9  2DF0               	goto	l2698
  8151  0DEA  085A               	movf	___ftmul@f2,w
  8152  0DEB  07E2               	addwf	___ftmul@f3_as_product,f
  8153  0DEC  085B               	movf	___ftmul@f2+1,w
  8154  0DED  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  8155  0DEE  085C               	movf	___ftmul@f2+2,w
  8156  0DEF  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  8157  0DF0                     l2698:	
  8158  0DF0  3001               	movlw	1
  8159  0DF1                     u2705:	
  8160  0DF1  36D9               	lsrf	___ftmul@f1+2,f
  8161  0DF2  0CD8               	rrf	___ftmul@f1+1,f
  8162  0DF3  0CD7               	rrf	___ftmul@f1,f
  8163  0DF4  0B89               	decfsz	9,f
  8164  0DF5  2DF1               	goto	u2705
  8165  0DF6  3001               	movlw	1
  8166  0DF7                     u2715:	
  8167  0DF7  36E4               	lsrf	___ftmul@f3_as_product+2,f
  8168  0DF8  0CE3               	rrf	___ftmul@f3_as_product+1,f
  8169  0DF9  0CE2               	rrf	___ftmul@f3_as_product,f
  8170  0DFA  0B89               	decfsz	9,f
  8171  0DFB  2DF7               	goto	u2715
  8172  0DFC  3001               	movlw	1
  8173  0DFD  02E5               	subwf	___ftmul@cntr,f
  8174  0DFE  1D03               	btfss	3,2
  8175  0DFF  2DE8               	goto	l2694
  8176  0E00  0862               	movf	___ftmul@f3_as_product,w
  8177  0E01  00A0               	movwf	___ftpack@arg
  8178  0E02  0863               	movf	___ftmul@f3_as_product+1,w
  8179  0E03  00A1               	movwf	___ftpack@arg+1
  8180  0E04  0864               	movf	___ftmul@f3_as_product+2,w
  8181  0E05  00A2               	movwf	___ftpack@arg+2
  8182  0E06  0861               	movf	___ftmul@exp,w
  8183  0E07  00DD               	movwf	??___ftmul
  8184  0E08  085D               	movf	??___ftmul,w
  8185  0E09  00A3               	movwf	___ftpack@exp
  8186  0E0A  0866               	movf	___ftmul@sign,w
  8187  0E0B  00DE               	movwf	??___ftmul+1
  8188  0E0C  085E               	movf	??___ftmul+1,w
  8189  0E0D  00A4               	movwf	___ftpack@sign
  8190  0E0E  318A  2203         	fcall	___ftpack
  8191  0E10  0020               	movlb	0	; select bank0
  8192  0E11  0820               	movf	?___ftpack,w
  8193  0E12  00D7               	movwf	?___ftmul
  8194  0E13  0821               	movf	?___ftpack+1,w
  8195  0E14  00D8               	movwf	?___ftmul+1
  8196  0E15  0822               	movf	?___ftpack+2,w
  8197  0E16  00D9               	movwf	?___ftmul+2
  8198  0E17  0008               	return
  8199  0E18                     __end_of___ftmul:	
  8200                           
  8201                           	psect	text31
  8202  0858                     __ptext31:	
  8203 ;; *************** function ___ftge *****************
  8204 ;; Defined at:
  8205 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8206 ;; Parameters:    Size  Location     Type
  8207 ;;  ff1             3    0[BANK0 ] float 
  8208 ;;  ff2             3    3[BANK0 ] float 
  8209 ;; Auto vars:     Size  Location     Type
  8210 ;;		None
  8211 ;; Return value:  Size  Location     Type
  8212 ;;		None               void
  8213 ;; Registers used:
  8214 ;;		wreg, status,2, status,0
  8215 ;; Tracked objects:
  8216 ;;		On entry : 0/0
  8217 ;;		On exit  : 0/0
  8218 ;;		Unchanged: 0/0
  8219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8220 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8222 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8223 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8224 ;;Total ram usage:        9 bytes
  8225 ;; Hardware stack levels used:    1
  8226 ;; Hardware stack levels required when called:    7
  8227 ;; This function calls:
  8228 ;;		Nothing
  8229 ;; This function is called by:
  8230 ;;		_ftoa
  8231 ;; This function uses a non-reentrant model
  8232 ;;
  8233                           
  8234                           
  8235                           ;psect for function ___ftge
  8236  0858                     ___ftge:	
  8237                           
  8238                           ;incstack = 0
  8239                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8240  0858  0020               	movlb	0	; select bank0
  8241  0859  1FA2               	btfss	___ftge@ff1+2,7
  8242  085A  286F               	goto	l2642
  8243  085B  0920               	comf	___ftge@ff1,w
  8244  085C  00A6               	movwf	??___ftge
  8245  085D  0921               	comf	___ftge@ff1+1,w
  8246  085E  00A7               	movwf	??___ftge+1
  8247  085F  0922               	comf	___ftge@ff1+2,w
  8248  0860  00A8               	movwf	??___ftge+2
  8249  0861  0AA6               	incf	??___ftge,f
  8250  0862  1903               	skipnz
  8251  0863  0AA7               	incf	??___ftge+1,f
  8252  0864  1903               	skipnz
  8253  0865  0AA8               	incf	??___ftge+2,f
  8254  0866  3000               	movlw	0
  8255  0867  0726               	addwf	??___ftge,w
  8256  0868  00A0               	movwf	___ftge@ff1
  8257  0869  3000               	movlw	0
  8258  086A  3D27               	addwfc	??___ftge+1,w
  8259  086B  00A1               	movwf	___ftge@ff1+1
  8260  086C  3080               	movlw	128
  8261  086D  3D28               	addwfc	??___ftge+2,w
  8262  086E  00A2               	movwf	___ftge@ff1+2
  8263  086F                     l2642:	
  8264  086F  1FA5               	btfss	___ftge@ff2+2,7
  8265  0870  2885               	goto	l2646
  8266  0871  0923               	comf	___ftge@ff2,w
  8267  0872  00A6               	movwf	??___ftge
  8268  0873  0924               	comf	___ftge@ff2+1,w
  8269  0874  00A7               	movwf	??___ftge+1
  8270  0875  0925               	comf	___ftge@ff2+2,w
  8271  0876  00A8               	movwf	??___ftge+2
  8272  0877  0AA6               	incf	??___ftge,f
  8273  0878  1903               	skipnz
  8274  0879  0AA7               	incf	??___ftge+1,f
  8275  087A  1903               	skipnz
  8276  087B  0AA8               	incf	??___ftge+2,f
  8277  087C  3000               	movlw	0
  8278  087D  0726               	addwf	??___ftge,w
  8279  087E  00A3               	movwf	___ftge@ff2
  8280  087F  3000               	movlw	0
  8281  0880  3D27               	addwfc	??___ftge+1,w
  8282  0881  00A4               	movwf	___ftge@ff2+1
  8283  0882  3080               	movlw	128
  8284  0883  3D28               	addwfc	??___ftge+2,w
  8285  0884  00A5               	movwf	___ftge@ff2+2
  8286  0885                     l2646:	
  8287  0885  3080               	movlw	128
  8288  0886  06A2               	xorwf	___ftge@ff1+2,f
  8289  0887  3080               	movlw	128
  8290  0888  06A5               	xorwf	___ftge@ff2+2,f
  8291  0889  0825               	movf	___ftge@ff2+2,w
  8292  088A  0222               	subwf	___ftge@ff1+2,w
  8293  088B  1D03               	skipz
  8294  088C  0008               	return
  8295  088D  0824               	movf	___ftge@ff2+1,w
  8296  088E  0221               	subwf	___ftge@ff1+1,w
  8297  088F  1D03               	skipz
  8298  0890  0008               	return
  8299  0891  0823               	movf	___ftge@ff2,w
  8300  0892  0220               	subwf	___ftge@ff1,w
  8301  0893  0008               	return
  8302  0894                     __end_of___ftge:	
  8303                           
  8304                           	psect	text32
  8305  0C15                     __ptext32:	
  8306 ;; *************** function _getADCValue *****************
  8307 ;; Defined at:
  8308 ;;		line 35 in file "main.c"
  8309 ;; Parameters:    Size  Location     Type
  8310 ;;  channel         1    wreg     unsigned char 
  8311 ;; Auto vars:     Size  Location     Type
  8312 ;;  channel         1   51[BANK0 ] unsigned char 
  8313 ;;  adcSum          3   52[BANK0 ] float 
  8314 ;;  adcLoop         2   49[BANK0 ] unsigned int 
  8315 ;; Return value:  Size  Location     Type
  8316 ;;                  3   43[BANK0 ] float 
  8317 ;; Registers used:
  8318 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8319 ;; Tracked objects:
  8320 ;;		On entry : 0/0
  8321 ;;		On exit  : 0/0
  8322 ;;		Unchanged: 0/0
  8323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8324 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8325 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8326 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8327 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8328 ;;Total ram usage:       12 bytes
  8329 ;; Hardware stack levels used:    1
  8330 ;; Hardware stack levels required when called:    9
  8331 ;; This function calls:
  8332 ;;		___awtoft
  8333 ;;		___ftadd
  8334 ;;		___ftdiv
  8335 ;;		_doWDTSleep
  8336 ;; This function is called by:
  8337 ;;		_loop
  8338 ;; This function uses a non-reentrant model
  8339 ;;
  8340                           
  8341                           
  8342                           ;psect for function _getADCValue
  8343  0C15                     _getADCValue:	
  8344                           
  8345                           ;incstack = 0
  8346                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8347                           ;getADCValue@channel stored from wreg
  8348  0C15  0020               	movlb	0	; select bank0
  8349  0C16  00D3               	movwf	getADCValue@channel
  8350                           
  8351                           ;main.c: 38: float adcSum = 0;
  8352  0C17  3000               	movlw	0
  8353  0C18  00D4               	movwf	getADCValue@adcSum
  8354  0C19  3000               	movlw	0
  8355  0C1A  00D5               	movwf	getADCValue@adcSum+1
  8356  0C1B  3000               	movlw	0
  8357  0C1C  00D6               	movwf	getADCValue@adcSum+2
  8358                           
  8359                           ;main.c: 39: unsigned int adcLoop = 1000;
  8360  0C1D  30E8               	movlw	232
  8361  0C1E  00D1               	movwf	getADCValue@adcLoop
  8362  0C1F  3003               	movlw	3
  8363  0C20  00D2               	movwf	getADCValue@adcLoop+1
  8364                           
  8365                           ;main.c: 41: ADCON0bits.CHS = channel;
  8366  0C21  0853               	movf	getADCValue@channel,w
  8367  0C22  00CE               	movwf	??_getADCValue
  8368  0C23  0DCE               	rlf	??_getADCValue,f
  8369  0C24  0DCE               	rlf	??_getADCValue,f
  8370  0C25  0021               	movlb	1	; select bank1
  8371  0C26  081D               	movf	29,w	;volatile
  8372  0C27  0020               	movlb	0	; select bank0
  8373  0C28  064E               	xorwf	??_getADCValue,w
  8374  0C29  3903               	andlw	-253
  8375  0C2A  064E               	xorwf	??_getADCValue,w
  8376  0C2B  0021               	movlb	1	; select bank1
  8377  0C2C  009D               	movwf	29	;volatile
  8378                           
  8379                           ;main.c: 42: FVRCONbits.FVREN = 1;
  8380  0C2D  0022               	movlb	2	; select bank2
  8381  0C2E  1797               	bsf	23,7	;volatile
  8382                           
  8383                           ;main.c: 43: ADCON0bits.ADON = 1;
  8384  0C2F  0021               	movlb	1	; select bank1
  8385  0C30  141D               	bsf	29,0	;volatile
  8386                           
  8387                           ;main.c: 45: doWDTSleep(0b00000);
  8388  0C31  3000               	movlw	0
  8389  0C32  3195  2583  318C   	fcall	_doWDTSleep
  8390  0C35                     l2986:	
  8391                           ;main.c: 47: while (adcLoop--){
  8392                           
  8393  0C35  3001               	movlw	1
  8394  0C36  0020               	movlb	0	; select bank0
  8395  0C37  02D1               	subwf	getADCValue@adcLoop,f
  8396  0C38  3000               	movlw	0
  8397  0C39  3BD2               	subwfb	getADCValue@adcLoop+1,f
  8398  0C3A  0A51               	incf	getADCValue@adcLoop,w
  8399  0C3B  1903               	btfsc	3,2
  8400  0C3C  0A52               	incf	getADCValue@adcLoop+1,w
  8401  0C3D  1903               	btfsc	3,2
  8402  0C3E  2C72               	goto	l166
  8403                           
  8404                           ;main.c: 49: ADCON0bits.ADGO = 1;
  8405  0C3F  0021               	movlb	1	; select bank1
  8406  0C40  149D               	bsf	29,1	;volatile
  8407  0C41                     l2982:	
  8408                           ;main.c: 51: while (ADCON0bits.ADGO){
  8409                           
  8410  0C41  0021               	movlb	1	; select bank1
  8411  0C42  1C9D               	btfss	29,1	;volatile
  8412  0C43  2C49               	goto	l2984
  8413                           
  8414                           ;main.c: 52: doWDTSleep(0b00000);
  8415  0C44  3000               	movlw	0
  8416  0C45  3195  2583  318C   	fcall	_doWDTSleep
  8417  0C48  2C41               	goto	l2982
  8418  0C49                     l2984:	
  8419                           
  8420                           ;main.c: 53: };main.c: 55: adcSum+= (ADRESL | (ADRESH << 8));
  8421  0C49  081C               	movf	28,w	;volatile
  8422  0C4A  0020               	movlb	0	; select bank0
  8423  0C4B  00CE               	movwf	??_getADCValue
  8424  0C4C  01CF               	clrf	??_getADCValue+1
  8425  0C4D  084E               	movf	??_getADCValue,w
  8426  0C4E  00CF               	movwf	??_getADCValue+1
  8427  0C4F  01CE               	clrf	??_getADCValue
  8428  0C50  084E               	movf	??_getADCValue,w
  8429  0C51  0021               	movlb	1	; select bank1
  8430  0C52  041B               	iorwf	27,w	;volatile
  8431  0C53  0020               	movlb	0	; select bank0
  8432  0C54  00A8               	movwf	___awtoft@c
  8433  0C55  084F               	movf	??_getADCValue+1,w
  8434  0C56  00A9               	movwf	___awtoft@c+1
  8435  0C57  3196  26D8  318C   	fcall	___awtoft
  8436  0C5A  0020               	movlb	0	; select bank0
  8437  0C5B  0828               	movf	?___awtoft,w
  8438  0C5C  00AE               	movwf	___ftadd@f1
  8439  0C5D  0829               	movf	?___awtoft+1,w
  8440  0C5E  00AF               	movwf	___ftadd@f1+1
  8441  0C5F  082A               	movf	?___awtoft+2,w
  8442  0C60  00B0               	movwf	___ftadd@f1+2
  8443  0C61  0854               	movf	getADCValue@adcSum,w
  8444  0C62  00B1               	movwf	___ftadd@f2
  8445  0C63  0855               	movf	getADCValue@adcSum+1,w
  8446  0C64  00B2               	movwf	___ftadd@f2+1
  8447  0C65  0856               	movf	getADCValue@adcSum+2,w
  8448  0C66  00B3               	movwf	___ftadd@f2+2
  8449  0C67  318F  270A  318C   	fcall	___ftadd
  8450  0C6A  0020               	movlb	0	; select bank0
  8451  0C6B  082E               	movf	?___ftadd,w
  8452  0C6C  00D4               	movwf	getADCValue@adcSum
  8453  0C6D  082F               	movf	?___ftadd+1,w
  8454  0C6E  00D5               	movwf	getADCValue@adcSum+1
  8455  0C6F  0830               	movf	?___ftadd+2,w
  8456  0C70  00D6               	movwf	getADCValue@adcSum+2
  8457  0C71  2C35               	goto	l2986
  8458  0C72                     l166:	
  8459                           
  8460                           ;main.c: 57: };main.c: 59: FVRCONbits.FVREN = 0;
  8461  0C72  0022               	movlb	2	; select bank2
  8462  0C73  1397               	bcf	23,7	;volatile
  8463                           
  8464                           ;main.c: 60: ADCON0bits.ADON = 0;
  8465  0C74  0021               	movlb	1	; select bank1
  8466  0C75  101D               	bcf	29,0	;volatile
  8467                           
  8468                           ;main.c: 63: adcSum/= 1000;
  8469  0C76  3000               	movlw	0
  8470  0C77  0020               	movlb	0	; select bank0
  8471  0C78  00BB               	movwf	___ftdiv@f2
  8472  0C79  307A               	movlw	122
  8473  0C7A  00BC               	movwf	___ftdiv@f2+1
  8474  0C7B  3044               	movlw	68
  8475  0C7C  00BD               	movwf	___ftdiv@f2+2
  8476  0C7D  0854               	movf	getADCValue@adcSum,w
  8477  0C7E  00BE               	movwf	___ftdiv@f1
  8478  0C7F  0855               	movf	getADCValue@adcSum+1,w
  8479  0C80  00BF               	movwf	___ftdiv@f1+1
  8480  0C81  0856               	movf	getADCValue@adcSum+2,w
  8481  0C82  00C0               	movwf	___ftdiv@f1+2
  8482  0C83  318C  24BB  318C   	fcall	___ftdiv
  8483  0C86  0020               	movlb	0	; select bank0
  8484  0C87  083B               	movf	?___ftdiv,w
  8485  0C88  00D4               	movwf	getADCValue@adcSum
  8486  0C89  083C               	movf	?___ftdiv+1,w
  8487  0C8A  00D5               	movwf	getADCValue@adcSum+1
  8488  0C8B  083D               	movf	?___ftdiv+2,w
  8489  0C8C  00D6               	movwf	getADCValue@adcSum+2
  8490                           
  8491                           ;main.c: 66: if (ADCON1bits.ADPREF == 0b11){
  8492  0C8D  0021               	movlb	1	; select bank1
  8493  0C8E  081E               	movf	30,w	;volatile
  8494  0C8F  3903               	andlw	3
  8495  0C90  3A03               	xorlw	3
  8496  0C91  1903               	btfsc	3,2
  8497  0C92  2CAC               	goto	l2998
  8498  0C93  2CB3               	goto	l3000
  8499  0C94                     l2994:	
  8500                           ;main.c: 68: case 0b10:
  8501                           
  8502                           ;main.c: 67: switch (FVRCONbits.ADFVR){
  8503                           
  8504                           
  8505                           ;main.c: 69: adcSum/= 500;
  8506  0C94  3000               	movlw	0
  8507  0C95  0020               	movlb	0	; select bank0
  8508  0C96  00BB               	movwf	___ftdiv@f2
  8509  0C97  30FA               	movlw	250
  8510  0C98  00BC               	movwf	___ftdiv@f2+1
  8511  0C99  3043               	movlw	67
  8512  0C9A  00BD               	movwf	___ftdiv@f2+2
  8513  0C9B  0854               	movf	getADCValue@adcSum,w
  8514  0C9C  00BE               	movwf	___ftdiv@f1
  8515  0C9D  0855               	movf	getADCValue@adcSum+1,w
  8516  0C9E  00BF               	movwf	___ftdiv@f1+1
  8517  0C9F  0856               	movf	getADCValue@adcSum+2,w
  8518  0CA0  00C0               	movwf	___ftdiv@f1+2
  8519  0CA1  318C  24BB  318C   	fcall	___ftdiv
  8520  0CA4  0020               	movlb	0	; select bank0
  8521  0CA5  083B               	movf	?___ftdiv,w
  8522  0CA6  00D4               	movwf	getADCValue@adcSum
  8523  0CA7  083C               	movf	?___ftdiv+1,w
  8524  0CA8  00D5               	movwf	getADCValue@adcSum+1
  8525  0CA9  083D               	movf	?___ftdiv+2,w
  8526  0CAA  00D6               	movwf	getADCValue@adcSum+2
  8527                           
  8528                           ;main.c: 71: }
  8529                           
  8530                           ;main.c: 70: break;
  8531  0CAB  2CB3               	goto	l3000
  8532  0CAC                     l2998:	
  8533  0CAC  0022               	movlb	2	; select bank2
  8534  0CAD  0817               	movf	23,w	;volatile
  8535  0CAE  3903               	andlw	3
  8536                           
  8537                           ; Switch size 1, requested type "space"
  8538                           ; Number of cases is 1, Range of values is 2 to 2
  8539                           ; switch strategies available:
  8540                           ; Name         Instructions Cycles
  8541                           ; simple_byte            4     3 (average)
  8542                           ; direct_byte           11     9 (fixed)
  8543                           ; jumptable            263     9 (fixed)
  8544                           ;	Chosen strategy is simple_byte
  8545  0CAF  3A02               	xorlw	2	; case 2
  8546  0CB0  1903               	skipnz
  8547  0CB1  2C94               	goto	l2994
  8548  0CB2  2CB3               	goto	l3000
  8549  0CB3                     l3000:	
  8550                           
  8551                           ;main.c: 72: };main.c: 75: return adcSum;
  8552  0CB3  0020               	movlb	0	; select bank0
  8553  0CB4  0854               	movf	getADCValue@adcSum,w
  8554  0CB5  00CB               	movwf	?_getADCValue
  8555  0CB6  0855               	movf	getADCValue@adcSum+1,w
  8556  0CB7  00CC               	movwf	?_getADCValue+1
  8557  0CB8  0856               	movf	getADCValue@adcSum+2,w
  8558  0CB9  00CD               	movwf	?_getADCValue+2
  8559  0CBA  0008               	return
  8560  0CBB                     __end_of_getADCValue:	
  8561                           
  8562                           	psect	text33
  8563  1583                     __ptext33:	
  8564 ;; *************** function _doWDTSleep *****************
  8565 ;; Defined at:
  8566 ;;		line 21 in file "main.c"
  8567 ;; Parameters:    Size  Location     Type
  8568 ;;  wdtps           1    wreg     unsigned char 
  8569 ;; Auto vars:     Size  Location     Type
  8570 ;;  wdtps           1    1[BANK0 ] unsigned char 
  8571 ;; Return value:  Size  Location     Type
  8572 ;;                  1    wreg      void 
  8573 ;; Registers used:
  8574 ;;		wreg, status,2, status,0
  8575 ;; Tracked objects:
  8576 ;;		On entry : 0/0
  8577 ;;		On exit  : 0/0
  8578 ;;		Unchanged: 0/0
  8579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8581 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8582 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8583 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8584 ;;Total ram usage:        2 bytes
  8585 ;; Hardware stack levels used:    1
  8586 ;; Hardware stack levels required when called:    7
  8587 ;; This function calls:
  8588 ;;		Nothing
  8589 ;; This function is called by:
  8590 ;;		_getADCValue
  8591 ;;		_sleep
  8592 ;; This function uses a non-reentrant model
  8593 ;;
  8594                           
  8595                           
  8596                           ;psect for function _doWDTSleep
  8597  1583                     _doWDTSleep:	
  8598                           
  8599                           ;incstack = 0
  8600                           ; Regs used in _doWDTSleep: [wreg+status,2+status,0]
  8601                           ;doWDTSleep@wdtps stored from wreg
  8602  1583  0020               	movlb	0	; select bank0
  8603  1584  00A1               	movwf	doWDTSleep@wdtps
  8604                           
  8605                           ;main.c: 24: WDTCONbits.WDTPS = wdtps;
  8606  1585  0821               	movf	doWDTSleep@wdtps,w
  8607  1586  00A0               	movwf	??_doWDTSleep
  8608  1587  0DA0               	rlf	??_doWDTSleep,f
  8609  1588  0021               	movlb	1	; select bank1
  8610  1589  0817               	movf	23,w	;volatile
  8611  158A  0020               	movlb	0	; select bank0
  8612  158B  0620               	xorwf	??_doWDTSleep,w
  8613  158C  39C1               	andlw	-63
  8614  158D  0620               	xorwf	??_doWDTSleep,w
  8615  158E  0021               	movlb	1	; select bank1
  8616  158F  0097               	movwf	23	;volatile
  8617  1590  0063               	sleep	;# 
  8618                           
  8619                           ;main.c: 28: __nop();
  8620  1591  0000               	nop
  8621                           
  8622                           ;main.c: 29: __nop();
  8623  1592  0000               	nop
  8624                           
  8625                           ;main.c: 31: WDTCONbits.WDTPS = 0b01101;
  8626  1593  0021               	movlb	1	; select bank1
  8627  1594  0817               	movf	23,w	;volatile
  8628  1595  39C1               	andlw	-63
  8629  1596  381A               	iorlw	26
  8630  1597  0097               	movwf	23	;volatile
  8631  1598  0064               	clrwdt	;# 
  8632  1599  0008               	return
  8633  159A                     __end_of_doWDTSleep:	
  8634                           
  8635                           	psect	text34
  8636  0CBB                     __ptext34:	
  8637 ;; *************** function ___ftdiv *****************
  8638 ;; Defined at:
  8639 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  8640 ;; Parameters:    Size  Location     Type
  8641 ;;  f2              3   27[BANK0 ] float 
  8642 ;;  f1              3   30[BANK0 ] float 
  8643 ;; Auto vars:     Size  Location     Type
  8644 ;;  f3              3   38[BANK0 ] float 
  8645 ;;  sign            1   42[BANK0 ] unsigned char 
  8646 ;;  exp             1   41[BANK0 ] unsigned char 
  8647 ;;  cntr            1   37[BANK0 ] unsigned char 
  8648 ;; Return value:  Size  Location     Type
  8649 ;;                  3   27[BANK0 ] float 
  8650 ;; Registers used:
  8651 ;;		wreg, status,2, status,0, pclath, cstack
  8652 ;; Tracked objects:
  8653 ;;		On entry : 0/0
  8654 ;;		On exit  : 0/0
  8655 ;;		Unchanged: 0/0
  8656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8657 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8658 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8659 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8660 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8661 ;;Total ram usage:       16 bytes
  8662 ;; Hardware stack levels used:    1
  8663 ;; Hardware stack levels required when called:    8
  8664 ;; This function calls:
  8665 ;;		___ftpack
  8666 ;; This function is called by:
  8667 ;;		_getADCValue
  8668 ;;		_loop
  8669 ;; This function uses a non-reentrant model
  8670 ;;
  8671                           
  8672                           
  8673                           ;psect for function ___ftdiv
  8674  0CBB                     ___ftdiv:	
  8675                           
  8676                           ;incstack = 0
  8677                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  8678  0CBB  0020               	movlb	0	; select bank0
  8679  0CBC  083E               	movf	___ftdiv@f1,w
  8680  0CBD  00C1               	movwf	??___ftdiv
  8681  0CBE  083F               	movf	___ftdiv@f1+1,w
  8682  0CBF  00C2               	movwf	??___ftdiv+1
  8683  0CC0  0840               	movf	___ftdiv@f1+2,w
  8684  0CC1  00C3               	movwf	??___ftdiv+2
  8685  0CC2  1003               	clrc
  8686  0CC3  0D42               	rlf	??___ftdiv+1,w
  8687  0CC4  0D43               	rlf	??___ftdiv+2,w
  8688  0CC5  00C4               	movwf	??___ftdiv+3
  8689  0CC6  0844               	movf	??___ftdiv+3,w
  8690  0CC7  00C9               	movwf	___ftdiv@exp
  8691  0CC8  0849               	movf	___ftdiv@exp,w
  8692  0CC9  1D03               	btfss	3,2
  8693  0CCA  2CD2               	goto	l2886
  8694  0CCB  3000               	movlw	0
  8695  0CCC  00BB               	movwf	?___ftdiv
  8696  0CCD  3000               	movlw	0
  8697  0CCE  00BC               	movwf	?___ftdiv+1
  8698  0CCF  3000               	movlw	0
  8699  0CD0  00BD               	movwf	?___ftdiv+2
  8700  0CD1  0008               	return
  8701  0CD2                     l2886:	
  8702  0CD2  083B               	movf	___ftdiv@f2,w
  8703  0CD3  00C1               	movwf	??___ftdiv
  8704  0CD4  083C               	movf	___ftdiv@f2+1,w
  8705  0CD5  00C2               	movwf	??___ftdiv+1
  8706  0CD6  083D               	movf	___ftdiv@f2+2,w
  8707  0CD7  00C3               	movwf	??___ftdiv+2
  8708  0CD8  1003               	clrc
  8709  0CD9  0D42               	rlf	??___ftdiv+1,w
  8710  0CDA  0D43               	rlf	??___ftdiv+2,w
  8711  0CDB  00C4               	movwf	??___ftdiv+3
  8712  0CDC  0844               	movf	??___ftdiv+3,w
  8713  0CDD  00CA               	movwf	___ftdiv@sign
  8714  0CDE  084A               	movf	___ftdiv@sign,w
  8715  0CDF  1D03               	btfss	3,2
  8716  0CE0  2CE8               	goto	l2892
  8717  0CE1  3000               	movlw	0
  8718  0CE2  00BB               	movwf	?___ftdiv
  8719  0CE3  3000               	movlw	0
  8720  0CE4  00BC               	movwf	?___ftdiv+1
  8721  0CE5  3000               	movlw	0
  8722  0CE6  00BD               	movwf	?___ftdiv+2
  8723  0CE7  0008               	return
  8724  0CE8                     l2892:	
  8725  0CE8  3000               	movlw	0
  8726  0CE9  00C6               	movwf	___ftdiv@f3
  8727  0CEA  3000               	movlw	0
  8728  0CEB  00C7               	movwf	___ftdiv@f3+1
  8729  0CEC  3000               	movlw	0
  8730  0CED  00C8               	movwf	___ftdiv@f3+2
  8731  0CEE  3089               	movlw	137
  8732  0CEF  074A               	addwf	___ftdiv@sign,w
  8733  0CF0  00C1               	movwf	??___ftdiv
  8734  0CF1  0841               	movf	??___ftdiv,w
  8735  0CF2  02C9               	subwf	___ftdiv@exp,f
  8736  0CF3  083E               	movf	___ftdiv@f1,w
  8737  0CF4  00C1               	movwf	??___ftdiv
  8738  0CF5  083F               	movf	___ftdiv@f1+1,w
  8739  0CF6  00C2               	movwf	??___ftdiv+1
  8740  0CF7  0840               	movf	___ftdiv@f1+2,w
  8741  0CF8  00C3               	movwf	??___ftdiv+2
  8742  0CF9  3010               	movlw	16
  8743  0CFA                     u2985:	
  8744  0CFA  36C3               	lsrf	??___ftdiv+2,f
  8745  0CFB  0CC2               	rrf	??___ftdiv+1,f
  8746  0CFC  0CC1               	rrf	??___ftdiv,f
  8747  0CFD  0B89               	decfsz	9,f
  8748  0CFE  2CFA               	goto	u2985
  8749  0CFF  0841               	movf	??___ftdiv,w
  8750  0D00  00C4               	movwf	??___ftdiv+3
  8751  0D01  0844               	movf	??___ftdiv+3,w
  8752  0D02  00CA               	movwf	___ftdiv@sign
  8753  0D03  083B               	movf	___ftdiv@f2,w
  8754  0D04  00C1               	movwf	??___ftdiv
  8755  0D05  083C               	movf	___ftdiv@f2+1,w
  8756  0D06  00C2               	movwf	??___ftdiv+1
  8757  0D07  083D               	movf	___ftdiv@f2+2,w
  8758  0D08  00C3               	movwf	??___ftdiv+2
  8759  0D09  3010               	movlw	16
  8760  0D0A                     u2995:	
  8761  0D0A  36C3               	lsrf	??___ftdiv+2,f
  8762  0D0B  0CC2               	rrf	??___ftdiv+1,f
  8763  0D0C  0CC1               	rrf	??___ftdiv,f
  8764  0D0D  0B89               	decfsz	9,f
  8765  0D0E  2D0A               	goto	u2995
  8766  0D0F  0841               	movf	??___ftdiv,w
  8767  0D10  00C4               	movwf	??___ftdiv+3
  8768  0D11  0844               	movf	??___ftdiv+3,w
  8769  0D12  06CA               	xorwf	___ftdiv@sign,f
  8770  0D13  3080               	movlw	128
  8771  0D14  00C1               	movwf	??___ftdiv
  8772  0D15  0841               	movf	??___ftdiv,w
  8773  0D16  05CA               	andwf	___ftdiv@sign,f
  8774  0D17  17BF               	bsf	___ftdiv@f1+1,7
  8775  0D18  30FF               	movlw	255
  8776  0D19  05BE               	andwf	___ftdiv@f1,f
  8777  0D1A  30FF               	movlw	255
  8778  0D1B  05BF               	andwf	___ftdiv@f1+1,f
  8779  0D1C  3000               	movlw	0
  8780  0D1D  05C0               	andwf	___ftdiv@f1+2,f
  8781  0D1E  17BC               	bsf	___ftdiv@f2+1,7
  8782  0D1F  30FF               	movlw	255
  8783  0D20  05BB               	andwf	___ftdiv@f2,f
  8784  0D21  30FF               	movlw	255
  8785  0D22  05BC               	andwf	___ftdiv@f2+1,f
  8786  0D23  3000               	movlw	0
  8787  0D24  05BD               	andwf	___ftdiv@f2+2,f
  8788  0D25  3018               	movlw	24
  8789  0D26  00C1               	movwf	??___ftdiv
  8790  0D27  0841               	movf	??___ftdiv,w
  8791  0D28  00C5               	movwf	___ftdiv@cntr
  8792  0D29                     l2906:	
  8793  0D29  3001               	movlw	1
  8794  0D2A                     u3005:	
  8795  0D2A  35C6               	lslf	___ftdiv@f3,f
  8796  0D2B  0DC7               	rlf	___ftdiv@f3+1,f
  8797  0D2C  0DC8               	rlf	___ftdiv@f3+2,f
  8798  0D2D  0B89               	decfsz	9,f
  8799  0D2E  2D2A               	goto	u3005
  8800  0D2F  083D               	movf	___ftdiv@f2+2,w
  8801  0D30  0240               	subwf	___ftdiv@f1+2,w
  8802  0D31  1D03               	skipz
  8803  0D32  2D39               	goto	u3015
  8804  0D33  083C               	movf	___ftdiv@f2+1,w
  8805  0D34  023F               	subwf	___ftdiv@f1+1,w
  8806  0D35  1D03               	skipz
  8807  0D36  2D39               	goto	u3015
  8808  0D37  083B               	movf	___ftdiv@f2,w
  8809  0D38  023E               	subwf	___ftdiv@f1,w
  8810  0D39                     u3015:	
  8811  0D39  1C03               	skipc
  8812  0D3A  2D42               	goto	l2914
  8813  0D3B  083B               	movf	___ftdiv@f2,w
  8814  0D3C  02BE               	subwf	___ftdiv@f1,f
  8815  0D3D  083C               	movf	___ftdiv@f2+1,w
  8816  0D3E  3BBF               	subwfb	___ftdiv@f1+1,f
  8817  0D3F  083D               	movf	___ftdiv@f2+2,w
  8818  0D40  3BC0               	subwfb	___ftdiv@f1+2,f
  8819  0D41  1446               	bsf	___ftdiv@f3,0
  8820  0D42                     l2914:	
  8821  0D42  3001               	movlw	1
  8822  0D43                     u3025:	
  8823  0D43  35BE               	lslf	___ftdiv@f1,f
  8824  0D44  0DBF               	rlf	___ftdiv@f1+1,f
  8825  0D45  0DC0               	rlf	___ftdiv@f1+2,f
  8826  0D46  0B89               	decfsz	9,f
  8827  0D47  2D43               	goto	u3025
  8828  0D48  3001               	movlw	1
  8829  0D49  02C5               	subwf	___ftdiv@cntr,f
  8830  0D4A  1D03               	btfss	3,2
  8831  0D4B  2D29               	goto	l2906
  8832  0D4C  0846               	movf	___ftdiv@f3,w
  8833  0D4D  00A0               	movwf	___ftpack@arg
  8834  0D4E  0847               	movf	___ftdiv@f3+1,w
  8835  0D4F  00A1               	movwf	___ftpack@arg+1
  8836  0D50  0848               	movf	___ftdiv@f3+2,w
  8837  0D51  00A2               	movwf	___ftpack@arg+2
  8838  0D52  0849               	movf	___ftdiv@exp,w
  8839  0D53  00C1               	movwf	??___ftdiv
  8840  0D54  0841               	movf	??___ftdiv,w
  8841  0D55  00A3               	movwf	___ftpack@exp
  8842  0D56  084A               	movf	___ftdiv@sign,w
  8843  0D57  00C2               	movwf	??___ftdiv+1
  8844  0D58  0842               	movf	??___ftdiv+1,w
  8845  0D59  00A4               	movwf	___ftpack@sign
  8846  0D5A  318A  2203         	fcall	___ftpack
  8847  0D5C  0020               	movlb	0	; select bank0
  8848  0D5D  0820               	movf	?___ftpack,w
  8849  0D5E  00BB               	movwf	?___ftdiv
  8850  0D5F  0821               	movf	?___ftpack+1,w
  8851  0D60  00BC               	movwf	?___ftdiv+1
  8852  0D61  0822               	movf	?___ftpack+2,w
  8853  0D62  00BD               	movwf	?___ftdiv+2
  8854  0D63  0008               	return
  8855  0D64                     __end_of___ftdiv:	
  8856                           
  8857                           	psect	text35
  8858  0F0A                     __ptext35:	
  8859 ;; *************** function ___ftadd *****************
  8860 ;; Defined at:
  8861 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  8862 ;; Parameters:    Size  Location     Type
  8863 ;;  f1              3   14[BANK0 ] float 
  8864 ;;  f2              3   17[BANK0 ] float 
  8865 ;; Auto vars:     Size  Location     Type
  8866 ;;  exp1            1   26[BANK0 ] unsigned char 
  8867 ;;  exp2            1   25[BANK0 ] unsigned char 
  8868 ;;  sign            1   24[BANK0 ] unsigned char 
  8869 ;; Return value:  Size  Location     Type
  8870 ;;                  3   14[BANK0 ] float 
  8871 ;; Registers used:
  8872 ;;		wreg, status,2, status,0, pclath, cstack
  8873 ;; Tracked objects:
  8874 ;;		On entry : 0/0
  8875 ;;		On exit  : 0/0
  8876 ;;		Unchanged: 0/0
  8877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8878 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8879 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8880 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8881 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8882 ;;Total ram usage:       13 bytes
  8883 ;; Hardware stack levels used:    1
  8884 ;; Hardware stack levels required when called:    8
  8885 ;; This function calls:
  8886 ;;		___ftpack
  8887 ;; This function is called by:
  8888 ;;		_getADCValue
  8889 ;;		_loop
  8890 ;;		___ftsub
  8891 ;; This function uses a non-reentrant model
  8892 ;;
  8893                           
  8894                           
  8895                           ;psect for function ___ftadd
  8896  0F0A                     ___ftadd:	
  8897                           
  8898                           ;incstack = 0
  8899                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8900  0F0A  0020               	movlb	0	; select bank0
  8901  0F0B  082E               	movf	___ftadd@f1,w
  8902  0F0C  00B4               	movwf	??___ftadd
  8903  0F0D  082F               	movf	___ftadd@f1+1,w
  8904  0F0E  00B5               	movwf	??___ftadd+1
  8905  0F0F  0830               	movf	___ftadd@f1+2,w
  8906  0F10  00B6               	movwf	??___ftadd+2
  8907  0F11  1003               	clrc
  8908  0F12  0D35               	rlf	??___ftadd+1,w
  8909  0F13  0D36               	rlf	??___ftadd+2,w
  8910  0F14  00B7               	movwf	??___ftadd+3
  8911  0F15  0837               	movf	??___ftadd+3,w
  8912  0F16  00BA               	movwf	___ftadd@exp1
  8913  0F17  0831               	movf	___ftadd@f2,w
  8914  0F18  00B4               	movwf	??___ftadd
  8915  0F19  0832               	movf	___ftadd@f2+1,w
  8916  0F1A  00B5               	movwf	??___ftadd+1
  8917  0F1B  0833               	movf	___ftadd@f2+2,w
  8918  0F1C  00B6               	movwf	??___ftadd+2
  8919  0F1D  1003               	clrc
  8920  0F1E  0D35               	rlf	??___ftadd+1,w
  8921  0F1F  0D36               	rlf	??___ftadd+2,w
  8922  0F20  00B7               	movwf	??___ftadd+3
  8923  0F21  0837               	movf	??___ftadd+3,w
  8924  0F22  00B9               	movwf	___ftadd@exp2
  8925  0F23  083A               	movf	___ftadd@exp1,w
  8926  0F24  1903               	btfsc	3,2
  8927  0F25  2F32               	goto	l2346
  8928  0F26  0839               	movf	___ftadd@exp2,w
  8929  0F27  023A               	subwf	___ftadd@exp1,w
  8930  0F28  1803               	skipnc
  8931  0F29  2F39               	goto	l2350
  8932  0F2A  033A               	decf	___ftadd@exp1,w
  8933  0F2B  3AFF               	xorlw	255
  8934  0F2C  0739               	addwf	___ftadd@exp2,w
  8935  0F2D  00B4               	movwf	??___ftadd
  8936  0F2E  3019               	movlw	25
  8937  0F2F  0234               	subwf	??___ftadd,w
  8938  0F30  1C03               	skipc
  8939  0F31  2F39               	goto	l2350
  8940  0F32                     l2346:	
  8941  0F32  0831               	movf	___ftadd@f2,w
  8942  0F33  00AE               	movwf	?___ftadd
  8943  0F34  0832               	movf	___ftadd@f2+1,w
  8944  0F35  00AF               	movwf	?___ftadd+1
  8945  0F36  0833               	movf	___ftadd@f2+2,w
  8946  0F37  00B0               	movwf	?___ftadd+2
  8947  0F38  0008               	return
  8948  0F39                     l2350:	
  8949  0F39  0839               	movf	___ftadd@exp2,w
  8950  0F3A  1903               	btfsc	3,2
  8951  0F3B  0008               	return
  8952  0F3C  083A               	movf	___ftadd@exp1,w
  8953  0F3D  0239               	subwf	___ftadd@exp2,w
  8954  0F3E  1803               	skipnc
  8955  0F3F  2F48               	goto	l2356
  8956  0F40  0339               	decf	___ftadd@exp2,w
  8957  0F41  3AFF               	xorlw	255
  8958  0F42  073A               	addwf	___ftadd@exp1,w
  8959  0F43  00B4               	movwf	??___ftadd
  8960  0F44  3019               	movlw	25
  8961  0F45  0234               	subwf	??___ftadd,w
  8962  0F46  1803               	btfsc	3,0
  8963  0F47  0008               	return
  8964  0F48                     l2356:	
  8965  0F48  3006               	movlw	6
  8966  0F49  00B4               	movwf	??___ftadd
  8967  0F4A  0834               	movf	??___ftadd,w
  8968  0F4B  00B8               	movwf	___ftadd@sign
  8969  0F4C  1BB0               	btfsc	___ftadd@f1+2,7
  8970  0F4D  17B8               	bsf	___ftadd@sign,7
  8971  0F4E  1BB3               	btfsc	___ftadd@f2+2,7
  8972  0F4F  1738               	bsf	___ftadd@sign,6
  8973  0F50  17AF               	bsf	___ftadd@f1+1,7
  8974  0F51  30FF               	movlw	255
  8975  0F52  05AE               	andwf	___ftadd@f1,f
  8976  0F53  30FF               	movlw	255
  8977  0F54  05AF               	andwf	___ftadd@f1+1,f
  8978  0F55  3000               	movlw	0
  8979  0F56  05B0               	andwf	___ftadd@f1+2,f
  8980  0F57  17B2               	bsf	___ftadd@f2+1,7
  8981  0F58  30FF               	movlw	255
  8982  0F59  05B1               	andwf	___ftadd@f2,f
  8983  0F5A  30FF               	movlw	255
  8984  0F5B  05B2               	andwf	___ftadd@f2+1,f
  8985  0F5C  3000               	movlw	0
  8986  0F5D  05B3               	andwf	___ftadd@f2+2,f
  8987  0F5E  0839               	movf	___ftadd@exp2,w
  8988  0F5F  023A               	subwf	___ftadd@exp1,w
  8989  0F60  1803               	skipnc
  8990  0F61  2F84               	goto	l2378
  8991  0F62                     l2368:	
  8992  0F62  3001               	movlw	1
  8993  0F63                     u2095:	
  8994  0F63  35B1               	lslf	___ftadd@f2,f
  8995  0F64  0DB2               	rlf	___ftadd@f2+1,f
  8996  0F65  0DB3               	rlf	___ftadd@f2+2,f
  8997  0F66  0B89               	decfsz	9,f
  8998  0F67  2F63               	goto	u2095
  8999  0F68  3001               	movlw	1
  9000  0F69  02B9               	subwf	___ftadd@exp2,f
  9001  0F6A  0839               	movf	___ftadd@exp2,w
  9002  0F6B  063A               	xorwf	___ftadd@exp1,w
  9003  0F6C  1903               	skipnz
  9004  0F6D  2F7F               	goto	l2376
  9005  0F6E  3001               	movlw	1
  9006  0F6F  02B8               	subwf	___ftadd@sign,f
  9007  0F70  0838               	movf	___ftadd@sign,w
  9008  0F71  3907               	andlw	7
  9009  0F72  1903               	btfsc	3,2
  9010  0F73  2F7F               	goto	l2376
  9011  0F74  2F62               	goto	l2368
  9012  0F75                     l2374:	
  9013  0F75  3001               	movlw	1
  9014  0F76                     u2125:	
  9015  0F76  36B0               	lsrf	___ftadd@f1+2,f
  9016  0F77  0CAF               	rrf	___ftadd@f1+1,f
  9017  0F78  0CAE               	rrf	___ftadd@f1,f
  9018  0F79  0B89               	decfsz	9,f
  9019  0F7A  2F76               	goto	u2125
  9020  0F7B  3001               	movlw	1
  9021  0F7C  00B4               	movwf	??___ftadd
  9022  0F7D  0834               	movf	??___ftadd,w
  9023  0F7E  07BA               	addwf	___ftadd@exp1,f
  9024  0F7F                     l2376:	
  9025  0F7F  083A               	movf	___ftadd@exp1,w
  9026  0F80  0639               	xorwf	___ftadd@exp2,w
  9027  0F81  1903               	btfsc	3,2
  9028  0F82  2FA9               	goto	l676
  9029  0F83  2F75               	goto	l2374
  9030  0F84                     l2378:	
  9031  0F84  083A               	movf	___ftadd@exp1,w
  9032  0F85  0239               	subwf	___ftadd@exp2,w
  9033  0F86  1803               	skipnc
  9034  0F87  2FA9               	goto	l676
  9035  0F88                     l2380:	
  9036  0F88  3001               	movlw	1
  9037  0F89                     u2155:	
  9038  0F89  35AE               	lslf	___ftadd@f1,f
  9039  0F8A  0DAF               	rlf	___ftadd@f1+1,f
  9040  0F8B  0DB0               	rlf	___ftadd@f1+2,f
  9041  0F8C  0B89               	decfsz	9,f
  9042  0F8D  2F89               	goto	u2155
  9043  0F8E  3001               	movlw	1
  9044  0F8F  02BA               	subwf	___ftadd@exp1,f
  9045  0F90  0839               	movf	___ftadd@exp2,w
  9046  0F91  063A               	xorwf	___ftadd@exp1,w
  9047  0F92  1903               	skipnz
  9048  0F93  2FA5               	goto	l2388
  9049  0F94  3001               	movlw	1
  9050  0F95  02B8               	subwf	___ftadd@sign,f
  9051  0F96  0838               	movf	___ftadd@sign,w
  9052  0F97  3907               	andlw	7
  9053  0F98  1903               	btfsc	3,2
  9054  0F99  2FA5               	goto	l2388
  9055  0F9A  2F88               	goto	l2380
  9056  0F9B                     l2386:	
  9057  0F9B  3001               	movlw	1
  9058  0F9C                     u2185:	
  9059  0F9C  36B3               	lsrf	___ftadd@f2+2,f
  9060  0F9D  0CB2               	rrf	___ftadd@f2+1,f
  9061  0F9E  0CB1               	rrf	___ftadd@f2,f
  9062  0F9F  0B89               	decfsz	9,f
  9063  0FA0  2F9C               	goto	u2185
  9064  0FA1  3001               	movlw	1
  9065  0FA2  00B4               	movwf	??___ftadd
  9066  0FA3  0834               	movf	??___ftadd,w
  9067  0FA4  07B9               	addwf	___ftadd@exp2,f
  9068  0FA5                     l2388:	
  9069  0FA5  083A               	movf	___ftadd@exp1,w
  9070  0FA6  0639               	xorwf	___ftadd@exp2,w
  9071  0FA7  1D03               	skipz
  9072  0FA8  2F9B               	goto	l2386
  9073  0FA9                     l676:	
  9074  0FA9  1FB8               	btfss	___ftadd@sign,7
  9075  0FAA  2FBB               	goto	l2392
  9076  0FAB  30FF               	movlw	255
  9077  0FAC  06AE               	xorwf	___ftadd@f1,f
  9078  0FAD  30FF               	movlw	255
  9079  0FAE  06AF               	xorwf	___ftadd@f1+1,f
  9080  0FAF  30FF               	movlw	255
  9081  0FB0  06B0               	xorwf	___ftadd@f1+2,f
  9082  0FB1  3001               	movlw	1
  9083  0FB2  07AE               	addwf	___ftadd@f1,f
  9084  0FB3  3000               	movlw	0
  9085  0FB4  1803               	skipnc
  9086  0FB5  3001               	movlw	1
  9087  0FB6  07AF               	addwf	___ftadd@f1+1,f
  9088  0FB7  3000               	movlw	0
  9089  0FB8  1803               	skipnc
  9090  0FB9  3001               	movlw	1
  9091  0FBA  07B0               	addwf	___ftadd@f1+2,f
  9092  0FBB                     l2392:	
  9093  0FBB  1F38               	btfss	___ftadd@sign,6
  9094  0FBC  2FCD               	goto	l2396
  9095  0FBD  30FF               	movlw	255
  9096  0FBE  06B1               	xorwf	___ftadd@f2,f
  9097  0FBF  30FF               	movlw	255
  9098  0FC0  06B2               	xorwf	___ftadd@f2+1,f
  9099  0FC1  30FF               	movlw	255
  9100  0FC2  06B3               	xorwf	___ftadd@f2+2,f
  9101  0FC3  3001               	movlw	1
  9102  0FC4  07B1               	addwf	___ftadd@f2,f
  9103  0FC5  3000               	movlw	0
  9104  0FC6  1803               	skipnc
  9105  0FC7  3001               	movlw	1
  9106  0FC8  07B2               	addwf	___ftadd@f2+1,f
  9107  0FC9  3000               	movlw	0
  9108  0FCA  1803               	skipnc
  9109  0FCB  3001               	movlw	1
  9110  0FCC  07B3               	addwf	___ftadd@f2+2,f
  9111  0FCD                     l2396:	
  9112  0FCD  01B8               	clrf	___ftadd@sign
  9113  0FCE  082E               	movf	___ftadd@f1,w
  9114  0FCF  07B1               	addwf	___ftadd@f2,f
  9115  0FD0  082F               	movf	___ftadd@f1+1,w
  9116  0FD1  3DB2               	addwfc	___ftadd@f2+1,f
  9117  0FD2  0830               	movf	___ftadd@f1+2,w
  9118  0FD3  3DB3               	addwfc	___ftadd@f2+2,f
  9119  0FD4  1FB3               	btfss	___ftadd@f2+2,7
  9120  0FD5  2FE8               	goto	l2406
  9121  0FD6  30FF               	movlw	255
  9122  0FD7  06B1               	xorwf	___ftadd@f2,f
  9123  0FD8  30FF               	movlw	255
  9124  0FD9  06B2               	xorwf	___ftadd@f2+1,f
  9125  0FDA  30FF               	movlw	255
  9126  0FDB  06B3               	xorwf	___ftadd@f2+2,f
  9127  0FDC  3001               	movlw	1
  9128  0FDD  07B1               	addwf	___ftadd@f2,f
  9129  0FDE  3000               	movlw	0
  9130  0FDF  1803               	skipnc
  9131  0FE0  3001               	movlw	1
  9132  0FE1  07B2               	addwf	___ftadd@f2+1,f
  9133  0FE2  3000               	movlw	0
  9134  0FE3  1803               	skipnc
  9135  0FE4  3001               	movlw	1
  9136  0FE5  07B3               	addwf	___ftadd@f2+2,f
  9137  0FE6  01B8               	clrf	___ftadd@sign
  9138  0FE7  0AB8               	incf	___ftadd@sign,f
  9139  0FE8                     l2406:	
  9140  0FE8  0831               	movf	___ftadd@f2,w
  9141  0FE9  00A0               	movwf	___ftpack@arg
  9142  0FEA  0832               	movf	___ftadd@f2+1,w
  9143  0FEB  00A1               	movwf	___ftpack@arg+1
  9144  0FEC  0833               	movf	___ftadd@f2+2,w
  9145  0FED  00A2               	movwf	___ftpack@arg+2
  9146  0FEE  083A               	movf	___ftadd@exp1,w
  9147  0FEF  00B4               	movwf	??___ftadd
  9148  0FF0  0834               	movf	??___ftadd,w
  9149  0FF1  00A3               	movwf	___ftpack@exp
  9150  0FF2  0838               	movf	___ftadd@sign,w
  9151  0FF3  00B5               	movwf	??___ftadd+1
  9152  0FF4  0835               	movf	??___ftadd+1,w
  9153  0FF5  00A4               	movwf	___ftpack@sign
  9154  0FF6  318A  2203         	fcall	___ftpack
  9155  0FF8  0020               	movlb	0	; select bank0
  9156  0FF9  0820               	movf	?___ftpack,w
  9157  0FFA  00AE               	movwf	?___ftadd
  9158  0FFB  0821               	movf	?___ftpack+1,w
  9159  0FFC  00AF               	movwf	?___ftadd+1
  9160  0FFD  0822               	movf	?___ftpack+2,w
  9161  0FFE  00B0               	movwf	?___ftadd+2
  9162  0FFF  0008               	return
  9163  1000                     __end_of___ftadd:	
  9164                           
  9165                           	psect	text36
  9166  16D8                     __ptext36:	
  9167 ;; *************** function ___awtoft *****************
  9168 ;; Defined at:
  9169 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9170 ;; Parameters:    Size  Location     Type
  9171 ;;  c               2    8[BANK0 ] int 
  9172 ;; Auto vars:     Size  Location     Type
  9173 ;;  sign            1   13[BANK0 ] unsigned char 
  9174 ;; Return value:  Size  Location     Type
  9175 ;;                  3    8[BANK0 ] float 
  9176 ;; Registers used:
  9177 ;;		wreg, status,2, status,0, pclath, cstack
  9178 ;; Tracked objects:
  9179 ;;		On entry : 0/0
  9180 ;;		On exit  : 0/0
  9181 ;;		Unchanged: 0/0
  9182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9183 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9184 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9185 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9186 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9187 ;;Total ram usage:        6 bytes
  9188 ;; Hardware stack levels used:    1
  9189 ;; Hardware stack levels required when called:    8
  9190 ;; This function calls:
  9191 ;;		___ftpack
  9192 ;; This function is called by:
  9193 ;;		_getADCValue
  9194 ;; This function uses a non-reentrant model
  9195 ;;
  9196                           
  9197                           
  9198                           ;psect for function ___awtoft
  9199  16D8                     ___awtoft:	
  9200                           
  9201                           ;incstack = 0
  9202                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  9203  16D8  0020               	movlb	0	; select bank0
  9204  16D9  01AD               	clrf	___awtoft@sign
  9205  16DA  1FA9               	btfss	___awtoft@c+1,7
  9206  16DB  2EE3               	goto	l2876
  9207  16DC  09A8               	comf	___awtoft@c,f
  9208  16DD  09A9               	comf	___awtoft@c+1,f
  9209  16DE  0AA8               	incf	___awtoft@c,f
  9210  16DF  1903               	skipnz
  9211  16E0  0AA9               	incf	___awtoft@c+1,f
  9212  16E1  01AD               	clrf	___awtoft@sign
  9213  16E2  0AAD               	incf	___awtoft@sign,f
  9214  16E3                     l2876:	
  9215  16E3  0828               	movf	___awtoft@c,w
  9216  16E4  00A0               	movwf	___ftpack@arg
  9217  16E5  0829               	movf	___awtoft@c+1,w
  9218  16E6  00A1               	movwf	___ftpack@arg+1
  9219  16E7  01A2               	clrf	___ftpack@arg+2
  9220  16E8  308E               	movlw	142
  9221  16E9  00AB               	movwf	??___awtoft
  9222  16EA  082B               	movf	??___awtoft,w
  9223  16EB  00A3               	movwf	___ftpack@exp
  9224  16EC  082D               	movf	___awtoft@sign,w
  9225  16ED  00AC               	movwf	??___awtoft+1
  9226  16EE  082C               	movf	??___awtoft+1,w
  9227  16EF  00A4               	movwf	___ftpack@sign
  9228  16F0  318A  2203         	fcall	___ftpack
  9229  16F2  0020               	movlb	0	; select bank0
  9230  16F3  0820               	movf	?___ftpack,w
  9231  16F4  00A8               	movwf	?___awtoft
  9232  16F5  0821               	movf	?___ftpack+1,w
  9233  16F6  00A9               	movwf	?___awtoft+1
  9234  16F7  0822               	movf	?___ftpack+2,w
  9235  16F8  00AA               	movwf	?___awtoft+2
  9236  16F9  0008               	return
  9237  16FA                     __end_of___awtoft:	
  9238                           
  9239                           	psect	text37
  9240  15D0                     __ptext37:	
  9241 ;; *************** function ___lbtoft *****************
  9242 ;; Defined at:
  9243 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
  9244 ;; Parameters:    Size  Location     Type
  9245 ;;  c               1    wreg     unsigned char 
  9246 ;; Auto vars:     Size  Location     Type
  9247 ;;  c               1   15[BANK0 ] unsigned char 
  9248 ;; Return value:  Size  Location     Type
  9249 ;;                  3    8[BANK0 ] float 
  9250 ;; Registers used:
  9251 ;;		wreg, status,2, status,0, pclath, cstack
  9252 ;; Tracked objects:
  9253 ;;		On entry : 0/0
  9254 ;;		On exit  : 0/0
  9255 ;;		Unchanged: 0/0
  9256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9257 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9259 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9260 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;Total ram usage:        8 bytes
  9262 ;; Hardware stack levels used:    1
  9263 ;; Hardware stack levels required when called:    8
  9264 ;; This function calls:
  9265 ;;		___ftpack
  9266 ;; This function is called by:
  9267 ;;		_loop
  9268 ;; This function uses a non-reentrant model
  9269 ;;
  9270                           
  9271                           
  9272                           ;psect for function ___lbtoft
  9273  15D0                     ___lbtoft:	
  9274                           
  9275                           ;incstack = 0
  9276                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  9277                           ;___lbtoft@c stored from wreg
  9278  15D0  0020               	movlb	0	; select bank0
  9279  15D1  00AF               	movwf	___lbtoft@c
  9280  15D2  082F               	movf	___lbtoft@c,w
  9281  15D3  00AB               	movwf	??___lbtoft
  9282  15D4  01AC               	clrf	??___lbtoft+1
  9283  15D5  01AD               	clrf	??___lbtoft+2
  9284  15D6  082B               	movf	??___lbtoft,w
  9285  15D7  00A0               	movwf	___ftpack@arg
  9286  15D8  082C               	movf	??___lbtoft+1,w
  9287  15D9  00A1               	movwf	___ftpack@arg+1
  9288  15DA  082D               	movf	??___lbtoft+2,w
  9289  15DB  00A2               	movwf	___ftpack@arg+2
  9290  15DC  308E               	movlw	142
  9291  15DD  00AE               	movwf	??___lbtoft+3
  9292  15DE  082E               	movf	??___lbtoft+3,w
  9293  15DF  00A3               	movwf	___ftpack@exp
  9294  15E0  01A4               	clrf	___ftpack@sign
  9295  15E1  318A  2203         	fcall	___ftpack
  9296  15E3  0020               	movlb	0	; select bank0
  9297  15E4  0820               	movf	?___ftpack,w
  9298  15E5  00A8               	movwf	?___lbtoft
  9299  15E6  0821               	movf	?___ftpack+1,w
  9300  15E7  00A9               	movwf	?___lbtoft+1
  9301  15E8  0822               	movf	?___ftpack+2,w
  9302  15E9  00AA               	movwf	?___lbtoft+2
  9303  15EA  0008               	return
  9304  15EB                     __end_of___lbtoft:	
  9305                           
  9306                           	psect	text38
  9307  156E                     __ptext38:	
  9308 ;; *************** function ___lwtoft *****************
  9309 ;; Defined at:
  9310 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
  9311 ;; Parameters:    Size  Location     Type
  9312 ;;  c               2    8[BANK0 ] unsigned int 
  9313 ;; Auto vars:     Size  Location     Type
  9314 ;;		None
  9315 ;; Return value:  Size  Location     Type
  9316 ;;                  3    8[BANK0 ] float 
  9317 ;; Registers used:
  9318 ;;		wreg, status,2, status,0, pclath, cstack
  9319 ;; Tracked objects:
  9320 ;;		On entry : 0/0
  9321 ;;		On exit  : 0/0
  9322 ;;		Unchanged: 0/0
  9323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9324 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9326 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9327 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9328 ;;Total ram usage:        4 bytes
  9329 ;; Hardware stack levels used:    1
  9330 ;; Hardware stack levels required when called:    8
  9331 ;; This function calls:
  9332 ;;		___ftpack
  9333 ;; This function is called by:
  9334 ;;		_main
  9335 ;; This function uses a non-reentrant model
  9336 ;;
  9337                           
  9338                           
  9339                           ;psect for function ___lwtoft
  9340  156E                     ___lwtoft:	
  9341                           
  9342                           ;incstack = 0
  9343                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  9344  156E  0020               	movlb	0	; select bank0
  9345  156F  0828               	movf	___lwtoft@c,w
  9346  1570  00A0               	movwf	___ftpack@arg
  9347  1571  0829               	movf	___lwtoft@c+1,w
  9348  1572  00A1               	movwf	___ftpack@arg+1
  9349  1573  01A2               	clrf	___ftpack@arg+2
  9350  1574  308E               	movlw	142
  9351  1575  00AB               	movwf	??___lwtoft
  9352  1576  082B               	movf	??___lwtoft,w
  9353  1577  00A3               	movwf	___ftpack@exp
  9354  1578  01A4               	clrf	___ftpack@sign
  9355  1579  318A  2203         	fcall	___ftpack
  9356  157B  0020               	movlb	0	; select bank0
  9357  157C  0820               	movf	?___ftpack,w
  9358  157D  00A8               	movwf	?___lwtoft
  9359  157E  0821               	movf	?___ftpack+1,w
  9360  157F  00A9               	movwf	?___lwtoft+1
  9361  1580  0822               	movf	?___ftpack+2,w
  9362  1581  00AA               	movwf	?___lwtoft+2
  9363  1582  0008               	return
  9364  1583                     __end_of___lwtoft:	
  9365                           
  9366                           	psect	text39
  9367  0A03                     __ptext39:	
  9368 ;; *************** function ___ftpack *****************
  9369 ;; Defined at:
  9370 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  9371 ;; Parameters:    Size  Location     Type
  9372 ;;  arg             3    0[BANK0 ] unsigned um
  9373 ;;  exp             1    3[BANK0 ] unsigned char 
  9374 ;;  sign            1    4[BANK0 ] unsigned char 
  9375 ;; Auto vars:     Size  Location     Type
  9376 ;;		None
  9377 ;; Return value:  Size  Location     Type
  9378 ;;                  3    0[BANK0 ] float 
  9379 ;; Registers used:
  9380 ;;		wreg, status,2, status,0
  9381 ;; Tracked objects:
  9382 ;;		On entry : 0/0
  9383 ;;		On exit  : 0/0
  9384 ;;		Unchanged: 0/0
  9385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9386 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9388 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9389 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9390 ;;Total ram usage:        8 bytes
  9391 ;; Hardware stack levels used:    1
  9392 ;; Hardware stack levels required when called:    7
  9393 ;; This function calls:
  9394 ;;		Nothing
  9395 ;; This function is called by:
  9396 ;;		___awtoft
  9397 ;;		___ftadd
  9398 ;;		___ftdiv
  9399 ;;		___ftmul
  9400 ;;		___lbtoft
  9401 ;;		___lltoft
  9402 ;;		___lwtoft
  9403 ;; This function uses a non-reentrant model
  9404 ;;
  9405                           
  9406                           
  9407                           ;psect for function ___ftpack
  9408  0A03                     ___ftpack:	
  9409                           
  9410                           ;incstack = 0
  9411                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9412  0A03  0020               	movlb	0	; select bank0
  9413  0A04  0823               	movf	___ftpack@exp,w
  9414  0A05  1903               	btfsc	3,2
  9415  0A06  2A0C               	goto	l2206
  9416  0A07  0822               	movf	___ftpack@arg+2,w
  9417  0A08  0421               	iorwf	___ftpack@arg+1,w
  9418  0A09  0420               	iorwf	___ftpack@arg,w
  9419  0A0A  1D03               	skipz
  9420  0A0B  2A1D               	goto	l2212
  9421  0A0C                     l2206:	
  9422  0A0C  3000               	movlw	0
  9423  0A0D  00A0               	movwf	?___ftpack
  9424  0A0E  3000               	movlw	0
  9425  0A0F  00A1               	movwf	?___ftpack+1
  9426  0A10  3000               	movlw	0
  9427  0A11  00A2               	movwf	?___ftpack+2
  9428  0A12  0008               	return
  9429  0A13                     l2210:	
  9430  0A13  3001               	movlw	1
  9431  0A14  00A5               	movwf	??___ftpack
  9432  0A15  0825               	movf	??___ftpack,w
  9433  0A16  07A3               	addwf	___ftpack@exp,f
  9434  0A17  3001               	movlw	1
  9435  0A18                     u1725:	
  9436  0A18  36A2               	lsrf	___ftpack@arg+2,f
  9437  0A19  0CA1               	rrf	___ftpack@arg+1,f
  9438  0A1A  0CA0               	rrf	___ftpack@arg,f
  9439  0A1B  0B89               	decfsz	9,f
  9440  0A1C  2A18               	goto	u1725
  9441  0A1D                     l2212:	
  9442  0A1D  30FE               	movlw	254
  9443  0A1E  0522               	andwf	___ftpack@arg+2,w
  9444  0A1F  1903               	btfsc	3,2
  9445  0A20  2A36               	goto	l645
  9446  0A21  2A13               	goto	l2210
  9447  0A22                     l2214:	
  9448  0A22  3001               	movlw	1
  9449  0A23  00A5               	movwf	??___ftpack
  9450  0A24  0825               	movf	??___ftpack,w
  9451  0A25  07A3               	addwf	___ftpack@exp,f
  9452  0A26  3001               	movlw	1
  9453  0A27  07A0               	addwf	___ftpack@arg,f
  9454  0A28  3000               	movlw	0
  9455  0A29  1803               	skipnc
  9456  0A2A  3001               	movlw	1
  9457  0A2B  07A1               	addwf	___ftpack@arg+1,f
  9458  0A2C  3000               	movlw	0
  9459  0A2D  1803               	skipnc
  9460  0A2E  3001               	movlw	1
  9461  0A2F  07A2               	addwf	___ftpack@arg+2,f
  9462  0A30  3001               	movlw	1
  9463  0A31                     u1745:	
  9464  0A31  36A2               	lsrf	___ftpack@arg+2,f
  9465  0A32  0CA1               	rrf	___ftpack@arg+1,f
  9466  0A33  0CA0               	rrf	___ftpack@arg,f
  9467  0A34  0B89               	decfsz	9,f
  9468  0A35  2A31               	goto	u1745
  9469  0A36                     l645:	
  9470  0A36  30FF               	movlw	255
  9471  0A37  0522               	andwf	___ftpack@arg+2,w
  9472  0A38  1903               	btfsc	3,2
  9473  0A39  2A43               	goto	l2222
  9474  0A3A  2A22               	goto	l2214
  9475  0A3B                     l2220:	
  9476  0A3B  3001               	movlw	1
  9477  0A3C  02A3               	subwf	___ftpack@exp,f
  9478  0A3D  3001               	movlw	1
  9479  0A3E                     u1765:	
  9480  0A3E  35A0               	lslf	___ftpack@arg,f
  9481  0A3F  0DA1               	rlf	___ftpack@arg+1,f
  9482  0A40  0DA2               	rlf	___ftpack@arg+2,f
  9483  0A41  0B89               	decfsz	9,f
  9484  0A42  2A3E               	goto	u1765
  9485  0A43                     l2222:	
  9486  0A43  1BA1               	btfsc	___ftpack@arg+1,7
  9487  0A44  2A49               	goto	l652
  9488  0A45  3002               	movlw	2
  9489  0A46  0223               	subwf	___ftpack@exp,w
  9490  0A47  1803               	skipnc
  9491  0A48  2A3B               	goto	l2220
  9492  0A49                     l652:	
  9493  0A49  1823               	btfsc	___ftpack@exp,0
  9494  0A4A  2A51               	goto	l653
  9495  0A4B  30FF               	movlw	255
  9496  0A4C  05A0               	andwf	___ftpack@arg,f
  9497  0A4D  307F               	movlw	127
  9498  0A4E  05A1               	andwf	___ftpack@arg+1,f
  9499  0A4F  30FF               	movlw	255
  9500  0A50  05A2               	andwf	___ftpack@arg+2,f
  9501  0A51                     l653:	
  9502  0A51  1003               	clrc
  9503  0A52  0CA3               	rrf	___ftpack@exp,f
  9504  0A53  0823               	movf	___ftpack@exp,w
  9505  0A54  00A5               	movwf	??___ftpack
  9506  0A55  01A6               	clrf	??___ftpack+1
  9507  0A56  01A7               	clrf	??___ftpack+2
  9508  0A57  3010               	movlw	16
  9509  0A58                     u1805:	
  9510  0A58  35A5               	lslf	??___ftpack,f
  9511  0A59  0DA6               	rlf	??___ftpack+1,f
  9512  0A5A  0DA7               	rlf	??___ftpack+2,f
  9513  0A5B  0B89               	decfsz	9,f
  9514  0A5C  2A58               	goto	u1805
  9515  0A5D  0825               	movf	??___ftpack,w
  9516  0A5E  04A0               	iorwf	___ftpack@arg,f
  9517  0A5F  0826               	movf	??___ftpack+1,w
  9518  0A60  04A1               	iorwf	___ftpack@arg+1,f
  9519  0A61  0827               	movf	??___ftpack+2,w
  9520  0A62  04A2               	iorwf	___ftpack@arg+2,f
  9521  0A63  0824               	movf	___ftpack@sign,w
  9522  0A64  1903               	btfsc	3,2
  9523  0A65  0008               	return
  9524  0A66  17A2               	bsf	___ftpack@arg+2,7
  9525  0A67  0008               	return
  9526  0A68                     __end_of___ftpack:	
  9527                           
  9528                           	psect	intentry
  9529  0004                     __pintentry:	
  9530 ;; *************** function _ISR *****************
  9531 ;; Defined at:
  9532 ;;		line 13 in file "main.c"
  9533 ;; Parameters:    Size  Location     Type
  9534 ;;		None
  9535 ;; Auto vars:     Size  Location     Type
  9536 ;;		None
  9537 ;; Return value:  Size  Location     Type
  9538 ;;                  1    wreg      void 
  9539 ;; Registers used:
  9540 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9541 ;; Tracked objects:
  9542 ;;		On entry : 0/0
  9543 ;;		On exit  : 0/0
  9544 ;;		Unchanged: 0/0
  9545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;Total ram usage:        0 bytes
  9551 ;; Hardware stack levels used:    1
  9552 ;; Hardware stack levels required when called:    6
  9553 ;; This function calls:
  9554 ;;		_nrf24l01ISR
  9555 ;; This function is called by:
  9556 ;;		Interrupt level 1
  9557 ;; This function uses a non-reentrant model
  9558 ;;
  9559                           
  9560  0004                     _ISR:	
  9561                           
  9562                           ;incstack = 0
  9563  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9564                           
  9565                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9566  0005  3180               	pagesel	$
  9567                           
  9568                           ;main.c: 15: if (PIR0bits.INTF){
  9569  0006  0020               	movlb	0	; select bank0
  9570  0007  1C10               	btfss	16,0	;volatile
  9571  0008  280D               	goto	i1l155
  9572                           
  9573                           ;main.c: 16: nrf24l01ISR();
  9574  0009  3189  21AB         	fcall	_nrf24l01ISR
  9575                           
  9576                           ;main.c: 17: PIR0bits.INTF = 0;
  9577  000B  0020               	movlb	0	; select bank0
  9578  000C  1010               	bcf	16,0	;volatile
  9579  000D                     i1l155:	
  9580  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9581  000E  0009               	retfie
  9582  000F                     __end_of_ISR:	
  9583                           
  9584                           	psect	text41
  9585  09AB                     __ptext41:	
  9586 ;; *************** function _nrf24l01ISR *****************
  9587 ;; Defined at:
  9588 ;;		line 237 in file "nrf24l01.c"
  9589 ;; Parameters:    Size  Location     Type
  9590 ;;		None
  9591 ;; Auto vars:     Size  Location     Type
  9592 ;;		None
  9593 ;; Return value:  Size  Location     Type
  9594 ;;                  1    wreg      void 
  9595 ;; Registers used:
  9596 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9597 ;; Tracked objects:
  9598 ;;		On entry : 0/0
  9599 ;;		On exit  : 0/0
  9600 ;;		Unchanged: 0/0
  9601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9604 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9605 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9606 ;;Total ram usage:        1 bytes
  9607 ;; Hardware stack levels used:    1
  9608 ;; Hardware stack levels required when called:    5
  9609 ;; This function calls:
  9610 ;;		i1_nrf24l01Send
  9611 ;;		i1_nrf24l01Service
  9612 ;; This function is called by:
  9613 ;;		_ISR
  9614 ;; This function uses a non-reentrant model
  9615 ;;
  9616                           
  9617                           
  9618                           ;psect for function _nrf24l01ISR
  9619  09AB                     _nrf24l01ISR:	
  9620                           
  9621                           ;nrf24l01.c: 239: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  9622                           
  9623                           ;incstack = 0
  9624                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9625  09AB  01F1               	clrf	i1nrf24l01Send@data
  9626  09AC  3007               	movlw	7
  9627  09AD  3195  25B5  3189   	fcall	i1_nrf24l01Send
  9628  09B0  00FD               	movwf	??_nrf24l01ISR
  9629  09B1  087D               	movf	??_nrf24l01ISR,w
  9630  09B2  0021               	movlb	1	; select bank1
  9631  09B3  00E8               	movwf	(_status^(0+128)+1)	;volatile
  9632                           
  9633                           ;nrf24l01.c: 241: if (status.statusRegister.TX_DS){
  9634  09B4  1EE8               	btfss	(_status^(0+128)+1),5	;volatile
  9635  09B5  29D1               	goto	i1l270
  9636                           
  9637                           ;nrf24l01.c: 243: if (status.TX == statuses.TX.Sending){
  9638  09B6  3036               	movlw	low ((_statuses+2)| (0+32768))
  9639  09B7  0084               	movwf	4
  9640  09B8  3098               	movlw	high ((_statuses+2)| (0+32768))
  9641  09B9  0085               	movwf	5
  9642  09BA  0800               	movf	0,w	;code access
  9643  09BB  00FD               	movwf	??_nrf24l01ISR
  9644  09BC  0867               	movf	_status^(0+128),w	;volatile
  9645  09BD  390F               	andlw	15
  9646  09BE  067D               	xorwf	??_nrf24l01ISR,w
  9647  09BF  1D03               	skipz
  9648  09C0  29D0               	goto	i1l271
  9649                           
  9650                           ;nrf24l01.c: 244: status.TX = statuses.TX.Sent;
  9651  09C1  3037               	movlw	low ((_statuses+3)| (0+32768))
  9652  09C2  0084               	movwf	4
  9653  09C3  3098               	movlw	high ((_statuses+3)| (0+32768))
  9654  09C4  0085               	movwf	5
  9655  09C5  0800               	movf	0,w	;code access
  9656  09C6  00FD               	movwf	??_nrf24l01ISR
  9657  09C7  0867               	movf	_status^(0+128),w	;volatile
  9658  09C8  067D               	xorwf	??_nrf24l01ISR,w
  9659  09C9  39F0               	andlw	-16
  9660  09CA  067D               	xorwf	??_nrf24l01ISR,w
  9661  09CB  00E7               	movwf	_status^(0+128)	;volatile
  9662                           
  9663                           ;nrf24l01.c: 245: nrf24l01Service();
  9664  09CC  3185  257A  3189   	fcall	i1_nrf24l01Service
  9665                           
  9666                           ;nrf24l01.c: 246: }
  9667  09CF  29D1               	goto	i1l270
  9668  09D0                     i1l271:	
  9669                           
  9670                           ;nrf24l01.c: 248: else{;nrf24l01.c: 249: status.statusRegister.TX_DS = 0;
  9671  09D0  12E8               	bcf	(_status^(0+128)+1),5	;volatile
  9672  09D1                     i1l270:	
  9673                           
  9674                           ;nrf24l01.c: 250: };nrf24l01.c: 251: };nrf24l01.c: 254: if (status.statusRegister.RX_DR)
      +                          {
  9675  09D1  0021               	movlb	1	; select bank1
  9676  09D2  1F68               	btfss	(_status^(0+128)+1),6	;volatile
  9677  09D3  29FA               	goto	i1l3254
  9678                           
  9679                           ;nrf24l01.c: 256: counter++;
  9680  09D4  3001               	movlw	1
  9681  09D5  0022               	movlb	2	; select bank2
  9682  09D6  07D1               	addwf	_counter^(0+256),f
  9683  09D7  3000               	movlw	0
  9684  09D8  3DD2               	addwfc	(_counter+1)^(0+256),f
  9685  09D9  3000               	movlw	0
  9686  09DA  3DD3               	addwfc	(_counter+2)^(0+256),f
  9687  09DB  3000               	movlw	0
  9688  09DC  3DD4               	addwfc	(_counter+3)^(0+256),f
  9689                           
  9690                           ;nrf24l01.c: 258: if (status.RX == statuses.RX.Idle){
  9691  09DD  3039               	movlw	low ((_statuses+5)| (0+32768))
  9692  09DE  0084               	movwf	4
  9693  09DF  3098               	movlw	high ((_statuses+5)| (0+32768))
  9694  09E0  0085               	movwf	5
  9695  09E1  0800               	movf	0,w	;code access
  9696  09E2  00FD               	movwf	??_nrf24l01ISR
  9697  09E3  0021               	movlb	1	; select bank1
  9698  09E4  0E67               	swapf	_status^(0+128),w	;volatile
  9699  09E5  390F               	andlw	15
  9700  09E6  067D               	xorwf	??_nrf24l01ISR,w
  9701  09E7  1D03               	skipz
  9702  09E8  29F9               	goto	i1l274
  9703                           
  9704                           ;nrf24l01.c: 259: status.RX = statuses.RX.Pending;
  9705  09E9  303A               	movlw	low ((_statuses+6)| (0+32768))
  9706  09EA  0084               	movwf	4
  9707  09EB  3098               	movlw	high ((_statuses+6)| (0+32768))
  9708  09EC  0085               	movwf	5
  9709  09ED  0800               	movf	0,w	;code access
  9710  09EE  00FD               	movwf	??_nrf24l01ISR
  9711  09EF  0EFD               	swapf	??_nrf24l01ISR,f
  9712  09F0  0867               	movf	_status^(0+128),w	;volatile
  9713  09F1  067D               	xorwf	??_nrf24l01ISR,w
  9714  09F2  390F               	andlw	-241
  9715  09F3  067D               	xorwf	??_nrf24l01ISR,w
  9716  09F4  00E7               	movwf	_status^(0+128)	;volatile
  9717                           
  9718                           ;nrf24l01.c: 260: nrf24l01Service();
  9719  09F5  3185  257A  3189   	fcall	i1_nrf24l01Service
  9720                           
  9721                           ;nrf24l01.c: 261: }
  9722  09F8  29FA               	goto	i1l3254
  9723  09F9                     i1l274:	
  9724                           
  9725                           ;nrf24l01.c: 263: else{;nrf24l01.c: 264: status.statusRegister.RX_DR = 0;
  9726  09F9  1368               	bcf	(_status^(0+128)+1),6	;volatile
  9727  09FA                     i1l3254:	
  9728                           
  9729                           ;nrf24l01.c: 265: };nrf24l01.c: 266: };nrf24l01.c: 269: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.statusRegister.byte);
  9730  09FA  0021               	movlb	1	; select bank1
  9731  09FB  0868               	movf	(_status^(0+128)+1),w	;volatile
  9732  09FC  00FD               	movwf	??_nrf24l01ISR
  9733  09FD  087D               	movf	??_nrf24l01ISR,w
  9734  09FE  00F1               	movwf	i1nrf24l01Send@data
  9735  09FF  3027               	movlw	39
  9736  0A00  3195  25B5         	fcall	i1_nrf24l01Send
  9737  0A02  0008               	return
  9738  0A03                     __end_of_nrf24l01ISR:	
  9739                           
  9740                           	psect	text42
  9741  057A                     __ptext42:	
  9742 ;; *************** function i1_nrf24l01Service *****************
  9743 ;; Defined at:
  9744 ;;		line 273 in file "nrf24l01.c"
  9745 ;; Parameters:    Size  Location     Type
  9746 ;;		None
  9747 ;; Auto vars:     Size  Location     Type
  9748 ;;  nrf24l01Serv    1   12[COMMON] unsigned char 
  9749 ;;  nrf24l01Serv    1   11[COMMON] unsigned char 
  9750 ;; Return value:  Size  Location     Type
  9751 ;;                  1    wreg      void 
  9752 ;; Registers used:
  9753 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9754 ;; Tracked objects:
  9755 ;;		On entry : 0/0
  9756 ;;		On exit  : 0/0
  9757 ;;		Unchanged: 0/0
  9758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9761 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9762 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9763 ;;Total ram usage:        6 bytes
  9764 ;; Hardware stack levels used:    1
  9765 ;; Hardware stack levels required when called:    4
  9766 ;; This function calls:
  9767 ;;		_enableInterrupts
  9768 ;;		_nrf24l01CEHigh
  9769 ;;		_nrf24l01CELow
  9770 ;;		_nrf24l01SPIEnd
  9771 ;;		_nrf24l01SPISend
  9772 ;;		_nrf24l01SPIStart
  9773 ;;		i1_memset
  9774 ;;		i1_nrf24l01Send
  9775 ;;		i1_nrf24l01SetRXMode
  9776 ;;		i1_strlen
  9777 ;; This function is called by:
  9778 ;;		_nrf24l01ISR
  9779 ;; This function uses a non-reentrant model
  9780 ;;
  9781                           
  9782                           
  9783                           ;psect for function i1_nrf24l01Service
  9784  057A                     i1_nrf24l01Service:	
  9785                           
  9786                           ;nrf24l01.c: 275: unsigned char i;;nrf24l01.c: 277: if (status.TX == statuses.TX.Ready){
  9787                           
  9788                           ;incstack = 0
  9789                           ; Regs used in i1_nrf24l01Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9790  057A  3035               	movlw	low ((_statuses+1)| (0+32768))
  9791  057B  0084               	movwf	4
  9792  057C  3098               	movlw	high ((_statuses+1)| (0+32768))
  9793  057D  0085               	movwf	5
  9794  057E  0800               	movf	0,w	;code access
  9795  057F  00F7               	movwf	??i1_nrf24l01Service
  9796  0580  0021               	movlb	1	; select bank1
  9797  0581  0867               	movf	_status^(0+128),w	;volatile
  9798  0582  390F               	andlw	15
  9799  0583  0677               	xorwf	??i1_nrf24l01Service,w
  9800  0584  1D03               	skipz
  9801  0585  2DEF               	goto	i1l3184
  9802                           
  9803                           ;nrf24l01.c: 280: enableInterrupts(0);
  9804  0586  3000               	movlw	0
  9805  0587  3195  2527  3185   	fcall	_enableInterrupts
  9806                           
  9807                           ;nrf24l01.c: 283: nrf24l01SetRXMode(0);
  9808  058A  3000               	movlw	0
  9809  058B  3188  201E  3185   	fcall	i1_nrf24l01SetRXMode
  9810                           
  9811                           ;nrf24l01.c: 286: nrf24l01SPIStart();
  9812  058E  3195  252F  3185   	fcall	_nrf24l01SPIStart
  9813                           
  9814                           ;nrf24l01.c: 289: nrf24l01SPISend((unsigned) 0b10110000);
  9815  0591  30B0               	movlw	176
  9816  0592  3195  2540  3185   	fcall	_nrf24l01SPISend
  9817                           
  9818                           ;nrf24l01.c: 291: nrf24l01SPISend(TXPacket->packetData.byte);
  9819  0595  0021               	movlb	1	; select bank1
  9820  0596  0869               	movf	_TXPacket^(0+128),w
  9821  0597  0086               	movwf	6
  9822  0598  086A               	movf	(_TXPacket+1)^(0+128),w
  9823  0599  0087               	movwf	7
  9824  059A  0801               	movf	1,w
  9825  059B  3195  2540  3185   	fcall	_nrf24l01SPISend
  9826                           
  9827                           ;nrf24l01.c: 294: for (i = 0; (i < strlen(TXPacket->Message)) && (i < 31); i++) {
  9828  059E  01FC               	clrf	i1nrf24l01Service@i
  9829  059F  2DB6               	goto	i1l3166
  9830  05A0                     i1l3162:	
  9831                           
  9832                           ;nrf24l01.c: 295: nrf24l01SPISend(TXPacket->Message[i]);
  9833  05A0  087C               	movf	i1nrf24l01Service@i,w
  9834  05A1  3E01               	addlw	1
  9835  05A2  00F7               	movwf	??i1_nrf24l01Service
  9836  05A3  3000               	movlw	0
  9837  05A4  1803               	skipnc
  9838  05A5  3001               	movlw	1
  9839  05A6  00F8               	movwf	??i1_nrf24l01Service+1
  9840  05A7  0877               	movf	??i1_nrf24l01Service,w
  9841  05A8  0021               	movlb	1	; select bank1
  9842  05A9  0769               	addwf	_TXPacket^(0+128),w
  9843  05AA  0086               	movwf	6
  9844  05AB  0878               	movf	??i1_nrf24l01Service+1,w
  9845  05AC  3D6A               	addwfc	(_TXPacket+1)^(0+128),w
  9846  05AD  0087               	movwf	7
  9847  05AE  0801               	movf	1,w
  9848  05AF  3195  2540  3185   	fcall	_nrf24l01SPISend
  9849  05B2  3001               	movlw	1
  9850  05B3  00F7               	movwf	??i1_nrf24l01Service
  9851  05B4  0877               	movf	??i1_nrf24l01Service,w
  9852  05B5  07FC               	addwf	i1nrf24l01Service@i,f
  9853  05B6                     i1l3166:	
  9854  05B6  0021               	movlb	1	; select bank1
  9855  05B7  0869               	movf	_TXPacket^(0+128),w
  9856  05B8  3E01               	addlw	1
  9857  05B9  00F7               	movwf	??i1_nrf24l01Service
  9858  05BA  3000               	movlw	0
  9859  05BB  3D6A               	addwfc	(_TXPacket+1)^(0+128),w
  9860  05BC  00F8               	movwf	??i1_nrf24l01Service+1
  9861  05BD  0877               	movf	??i1_nrf24l01Service,w
  9862  05BE  00F0               	movwf	i1strlen@s
  9863  05BF  0878               	movf	??i1_nrf24l01Service+1,w
  9864  05C0  00F1               	movwf	i1strlen@s+1
  9865  05C1  3196  265A  3185   	fcall	i1_strlen
  9866  05C4  087C               	movf	i1nrf24l01Service@i,w
  9867  05C5  00F9               	movwf	??i1_nrf24l01Service+2
  9868  05C6  01FA               	clrf	??i1_nrf24l01Service+3
  9869  05C7  0871               	movf	?i1_strlen+1,w
  9870  05C8  027A               	subwf	??i1_nrf24l01Service+3,w
  9871  05C9  1D03               	skipz
  9872  05CA  2DCD               	goto	u321_25
  9873  05CB  0870               	movf	?i1_strlen,w
  9874  05CC  0279               	subwf	??i1_nrf24l01Service+2,w
  9875  05CD                     u321_25:	
  9876  05CD  1803               	skipnc
  9877  05CE  2DD3               	goto	i1l3170
  9878  05CF  301F               	movlw	31
  9879  05D0  027C               	subwf	i1nrf24l01Service@i,w
  9880  05D1  1C03               	skipc
  9881  05D2  2DA0               	goto	i1l3162
  9882  05D3                     i1l3170:	
  9883                           
  9884                           ;nrf24l01.c: 296: };nrf24l01.c: 299: nrf24l01SPIEnd();
  9885  05D3  3195  2520  3185   	fcall	_nrf24l01SPIEnd
  9886                           
  9887                           ;nrf24l01.c: 302: status.TX = statuses.TX.Sending;
  9888  05D6  3036               	movlw	low ((_statuses+2)| (0+32768))
  9889  05D7  0084               	movwf	4
  9890  05D8  3098               	movlw	high ((_statuses+2)| (0+32768))
  9891  05D9  0085               	movwf	5
  9892  05DA  0800               	movf	0,w	;code access
  9893  05DB  00F7               	movwf	??i1_nrf24l01Service
  9894  05DC  0021               	movlb	1	; select bank1
  9895  05DD  0867               	movf	_status^(0+128),w	;volatile
  9896  05DE  0677               	xorwf	??i1_nrf24l01Service,w
  9897  05DF  39F0               	andlw	-16
  9898  05E0  0677               	xorwf	??i1_nrf24l01Service,w
  9899  05E1  00E7               	movwf	_status^(0+128)	;volatile
  9900                           
  9901                           ;nrf24l01.c: 305: enableInterrupts(1);
  9902  05E2  3001               	movlw	1
  9903  05E3  3195  2527  3185   	fcall	_enableInterrupts
  9904                           
  9905                           ;nrf24l01.c: 308: nrf24l01CEHigh();
  9906  05E6  3195  2514  3185   	fcall	_nrf24l01CEHigh
  9907                           
  9908                           ;nrf24l01.c: 309: _delay((unsigned long)((12)*(32000000/4000000.0)));
  9909  05E9  3020               	movlw	32
  9910  05EA                     u346_27:	
  9911  05EA  0B89               	decfsz	9,f
  9912  05EB  2DEA               	goto	u346_27
  9913                           
  9914                           ;nrf24l01.c: 310: nrf24l01CELow();
  9915  05EC  3195  2517  3185   	fcall	_nrf24l01CELow
  9916  05EF                     i1l3184:	
  9917                           
  9918                           ;nrf24l01.c: 315: };nrf24l01.c: 317: if (status.TX == statuses.TX.Sent){
  9919  05EF  3037               	movlw	low ((_statuses+3)| (0+32768))
  9920  05F0  0084               	movwf	4
  9921  05F1  3098               	movlw	high ((_statuses+3)| (0+32768))
  9922  05F2  0085               	movwf	5
  9923  05F3  0800               	movf	0,w	;code access
  9924  05F4  00F7               	movwf	??i1_nrf24l01Service
  9925  05F5  0021               	movlb	1	; select bank1
  9926  05F6  0867               	movf	_status^(0+128),w	;volatile
  9927  05F7  390F               	andlw	15
  9928  05F8  0677               	xorwf	??i1_nrf24l01Service,w
  9929  05F9  1D03               	skipz
  9930  05FA  2E10               	goto	i1l286
  9931                           
  9932                           ;nrf24l01.c: 320: if (TXPacket->packetData.ACKRequest){
  9933  05FB  0869               	movf	_TXPacket^(0+128),w
  9934  05FC  0086               	movwf	6
  9935  05FD  086A               	movf	(_TXPacket+1)^(0+128),w
  9936  05FE  0087               	movwf	7
  9937  05FF  1D01               	btfss	1,2
  9938  0600  2E05               	goto	i1l3190
  9939                           
  9940                           ;nrf24l01.c: 321: status.TX = statuses.TX.PendingACK;
  9941  0601  3038               	movlw	low ((_statuses+4)| (0+32768))
  9942  0602  0084               	movwf	4
  9943  0603  3098               	movlw	high ((_statuses+4)| (0+32768))
  9944  0604  2E08               	goto	L4
  9945  0605                     i1l3190:	
  9946                           ;nrf24l01.c: 322: }
  9947                           
  9948                           
  9949                           ;nrf24l01.c: 325: else{;nrf24l01.c: 326: status.TX = statuses.TX.Idle;
  9950  0605  3034               	movlw	low (_statuses| (0+32768))
  9951  0606  0084               	movwf	4
  9952  0607  3098               	movlw	high (_statuses| (0+32768))
  9953  0608                     L4:	
  9954  0608  0085               	movwf	5
  9955  0609  0800               	movf	0,w	;code access
  9956  060A  00F7               	movwf	??i1_nrf24l01Service
  9957  060B  0867               	movf	_status^(0+128),w	;volatile
  9958  060C  0677               	xorwf	??i1_nrf24l01Service,w
  9959  060D  39F0               	andlw	-16
  9960  060E  0677               	xorwf	??i1_nrf24l01Service,w
  9961  060F  00E7               	movwf	_status^(0+128)	;volatile
  9962  0610                     i1l286:	
  9963                           
  9964                           ;nrf24l01.c: 327: };nrf24l01.c: 328: };nrf24l01.c: 331: if (status.TX == statuses.TX.Pen
      +                          dingACK){
  9965  0610  3038               	movlw	low ((_statuses+4)| (0+32768))
  9966  0611  0084               	movwf	4
  9967  0612  3098               	movlw	high ((_statuses+4)| (0+32768))
  9968  0613  0085               	movwf	5
  9969  0614  0800               	movf	0,w	;code access
  9970  0615  00F7               	movwf	??i1_nrf24l01Service
  9971  0616  0867               	movf	_status^(0+128),w	;volatile
  9972  0617  390F               	andlw	15
  9973  0618  0677               	xorwf	??i1_nrf24l01Service,w
  9974  0619  1D03               	skipz
  9975  061A  2E2B               	goto	i1l3196
  9976                           
  9977                           ;nrf24l01.c: 334: nrf24l01SetRXMode(1);
  9978  061B  3001               	movlw	1
  9979  061C  3188  201E  3185   	fcall	i1_nrf24l01SetRXMode
  9980                           
  9981                           ;nrf24l01.c: 337: status.TX = statuses.TX.Idle;
  9982  061F  3034               	movlw	low (_statuses| (0+32768))
  9983  0620  0084               	movwf	4
  9984  0621  3098               	movlw	high (_statuses| (0+32768))
  9985  0622  0085               	movwf	5
  9986  0623  0800               	movf	0,w	;code access
  9987  0624  00F7               	movwf	??i1_nrf24l01Service
  9988  0625  0021               	movlb	1	; select bank1
  9989  0626  0867               	movf	_status^(0+128),w	;volatile
  9990  0627  0677               	xorwf	??i1_nrf24l01Service,w
  9991  0628  39F0               	andlw	-16
  9992  0629  0677               	xorwf	??i1_nrf24l01Service,w
  9993  062A  00E7               	movwf	_status^(0+128)	;volatile
  9994  062B                     i1l3196:	
  9995                           
  9996                           ;nrf24l01.c: 338: };nrf24l01.c: 340: if (status.RX == statuses.RX.Pending){
  9997  062B  303A               	movlw	low ((_statuses+6)| (0+32768))
  9998  062C  0084               	movwf	4
  9999  062D  3098               	movlw	high ((_statuses+6)| (0+32768))
 10000  062E  0085               	movwf	5
 10001  062F  0800               	movf	0,w	;code access
 10002  0630  00F7               	movwf	??i1_nrf24l01Service
 10003  0631  0E67               	swapf	_status^(0+128),w	;volatile
 10004  0632  390F               	andlw	15
 10005  0633  0677               	xorwf	??i1_nrf24l01Service,w
 10006  0634  1D03               	skipz
 10007  0635  0008               	return
 10008                           
 10009                           ;nrf24l01.c: 343: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
 10010  0636  3000               	movlw	0
 10011  0637  00F0               	movwf	i1memset@c
 10012  0638  00F1               	movwf	i1memset@c+1
 10013  0639  3020               	movlw	32
 10014  063A  00F2               	movwf	i1memset@n
 10015  063B  3000               	movlw	0
 10016  063C  00F3               	movwf	i1memset@n+1
 10017  063D  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 10018  063E  3195  259A  3185   	fcall	i1_memset
 10019                           
 10020                           ;nrf24l01.c: 344: RXPacket.packetData.byte = 0x00;
 10021  0641  0023               	movlb	3	; select bank3
 10022  0642  01A0               	clrf	_RXPacket^(0+384)
 10023                           
 10024                           ;nrf24l01.c: 347: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
 10025  0643  01F1               	clrf	i1nrf24l01Send@data
 10026  0644  3060               	movlw	96
 10027  0645  3195  25B5  3185   	fcall	i1_nrf24l01Send
 10028  0648  00F7               	movwf	??i1_nrf24l01Service
 10029  0649  0877               	movf	??i1_nrf24l01Service,w
 10030  064A  00FB               	movwf	i1nrf24l01Service@width
 10031                           
 10032                           ;nrf24l01.c: 350: nrf24l01CELow();
 10033  064B  3195  2517  3185   	fcall	_nrf24l01CELow
 10034                           
 10035                           ;nrf24l01.c: 353: nrf24l01SPIStart();
 10036  064E  3195  252F  3185   	fcall	_nrf24l01SPIStart
 10037                           
 10038                           ;nrf24l01.c: 356: nrf24l01SPISend((unsigned) 0b01100001);
 10039  0651  3061               	movlw	97
 10040  0652  3195  2540  3185   	fcall	_nrf24l01SPISend
 10041                           
 10042                           ;nrf24l01.c: 359: RXPacket.packetData.byte = nrf24l01SPISend(0);
 10043  0655  3000               	movlw	0
 10044  0656  3195  2540  3185   	fcall	_nrf24l01SPISend
 10045  0659  00F7               	movwf	??i1_nrf24l01Service
 10046  065A  0877               	movf	??i1_nrf24l01Service,w
 10047  065B  0023               	movlb	3	; select bank3
 10048  065C  00A0               	movwf	_RXPacket^(0+384)
 10049                           
 10050                           ;nrf24l01.c: 360: width--;
 10051  065D  3001               	movlw	1
 10052  065E  02FB               	subwf	i1nrf24l01Service@width,f
 10053                           
 10054                           ;nrf24l01.c: 362: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
 10055  065F  01FC               	clrf	i1nrf24l01Service@i
 10056  0660  2E71               	goto	i1l3220
 10057  0661                     i1l3216:	
 10058                           
 10059                           ;nrf24l01.c: 364: RXPacket.Message[i] = nrf24l01SPISend(0);
 10060  0661  3000               	movlw	0
 10061  0662  3195  2540  3185   	fcall	_nrf24l01SPISend
 10062  0665  00F7               	movwf	??i1_nrf24l01Service
 10063  0666  087C               	movf	i1nrf24l01Service@i,w
 10064  0667  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 10065  0668  0086               	movwf	6
 10066  0669  3001               	movlw	1	; select bank3/4
 10067  066A  0087               	movwf	7
 10068  066B  0877               	movf	??i1_nrf24l01Service,w
 10069  066C  0081               	movwf	1
 10070  066D  3001               	movlw	1
 10071  066E  00F7               	movwf	??i1_nrf24l01Service
 10072  066F  0877               	movf	??i1_nrf24l01Service,w
 10073  0670  07FC               	addwf	i1nrf24l01Service@i,f
 10074  0671                     i1l3220:	
 10075  0671  087B               	movf	i1nrf24l01Service@width,w
 10076  0672  027C               	subwf	i1nrf24l01Service@i,w
 10077  0673  1803               	skipnc
 10078  0674  2E79               	goto	i1l3224
 10079  0675  3020               	movlw	32
 10080  0676  027C               	subwf	i1nrf24l01Service@i,w
 10081  0677  1C03               	skipc
 10082  0678  2E61               	goto	i1l3216
 10083  0679                     i1l3224:	
 10084                           
 10085                           ;nrf24l01.c: 365: };nrf24l01.c: 368: nrf24l01SPIEnd();
 10086  0679  3195  2520  3185   	fcall	_nrf24l01SPIEnd
 10087                           
 10088                           ;nrf24l01.c: 371: nrf24l01CEHigh();
 10089  067C  3195  2514  3185   	fcall	_nrf24l01CEHigh
 10090                           
 10091                           ;nrf24l01.c: 374: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
 10092  067F  0021               	movlb	1	; select bank1
 10093  0680  0C68               	rrf	(_status^(0+128)+1),w	;volatile
 10094  0681  3907               	andlw	7
 10095  0682  00F7               	movwf	??i1_nrf24l01Service
 10096  0683  0EF7               	swapf	??i1_nrf24l01Service,f
 10097  0684  0023               	movlb	3	; select bank3
 10098  0685  0820               	movf	_RXPacket^(0+384),w
 10099  0686  0677               	xorwf	??i1_nrf24l01Service,w
 10100  0687  398F               	andlw	-113
 10101  0688  0677               	xorwf	??i1_nrf24l01Service,w
 10102  0689  00A0               	movwf	_RXPacket^(0+384)
 10103                           
 10104                           ;nrf24l01.c: 377: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
 10105  068A  01F1               	clrf	i1nrf24l01Send@data
 10106  068B  3009               	movlw	9
 10107  068C  3195  25B5         	fcall	i1_nrf24l01Send
 10108  068E  00F7               	movwf	??i1_nrf24l01Service
 10109  068F  0023               	movlb	3	; select bank3
 10110  0690  0820               	movf	_RXPacket^(0+384),w
 10111  0691  0677               	xorwf	??i1_nrf24l01Service,w
 10112  0692  39FE               	andlw	-2
 10113  0693  0677               	xorwf	??i1_nrf24l01Service,w
 10114  0694  00A0               	movwf	_RXPacket^(0+384)
 10115                           
 10116                           ;nrf24l01.c: 379: status.RX = statuses.RX.Ready;
 10117  0695  303B               	movlw	low ((_statuses+7)| (0+32768))
 10118  0696  0084               	movwf	4
 10119  0697  3098               	movlw	high ((_statuses+7)| (0+32768))
 10120  0698  0085               	movwf	5
 10121  0699  0800               	movf	0,w	;code access
 10122  069A  00F7               	movwf	??i1_nrf24l01Service
 10123  069B  0EF7               	swapf	??i1_nrf24l01Service,f
 10124  069C  0021               	movlb	1	; select bank1
 10125  069D  0867               	movf	_status^(0+128),w	;volatile
 10126  069E  0677               	xorwf	??i1_nrf24l01Service,w
 10127  069F  390F               	andlw	-241
 10128  06A0  0677               	xorwf	??i1_nrf24l01Service,w
 10129  06A1  00E7               	movwf	_status^(0+128)	;volatile
 10130  06A2  0008               	return
 10131  06A3                     __end_ofi1_nrf24l01Service:	
 10132                           
 10133                           	psect	text43
 10134  165A                     __ptext43:	
 10135 ;; *************** function i1_strlen *****************
 10136 ;; Defined at:
 10137 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
 10138 ;; Parameters:    Size  Location     Type
 10139 ;;  s               2    0[COMMON] PTR const unsigned char 
 10140 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
 10141 ;;		 -> loop@packet(33), romDataMap(28), 
 10142 ;; Auto vars:     Size  Location     Type
 10143 ;;  strlen          2    4[COMMON] PTR const unsigned char 
 10144 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
 10145 ;;		 -> loop@packet(33), romDataMap(28), 
 10146 ;; Return value:  Size  Location     Type
 10147 ;;                  2    0[COMMON] unsigned int 
 10148 ;; Registers used:
 10149 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10150 ;; Tracked objects:
 10151 ;;		On entry : 0/0
 10152 ;;		On exit  : 0/0
 10153 ;;		Unchanged: 0/0
 10154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10155 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10156 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10157 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10158 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10159 ;;Total ram usage:        6 bytes
 10160 ;; Hardware stack levels used:    1
 10161 ;; This function calls:
 10162 ;;		Nothing
 10163 ;; This function is called by:
 10164 ;;		i1_nrf24l01Service
 10165 ;; This function uses a non-reentrant model
 10166 ;;
 10167                           
 10168                           
 10169                           ;psect for function i1_strlen
 10170  165A                     i1_strlen:	
 10171                           
 10172                           ;incstack = 0
 10173                           ; Regs used in i1_strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
 10174  165A  0871               	movf	i1strlen@s+1,w
 10175  165B  00F5               	movwf	i1strlen@cp+1
 10176  165C  0870               	movf	i1strlen@s,w
 10177  165D  00F4               	movwf	i1strlen@cp
 10178  165E                     i1l2954:	
 10179  165E  0874               	movf	i1strlen@cp,w
 10180  165F  0086               	movwf	6
 10181  1660  0875               	movf	i1strlen@cp+1,w
 10182  1661  0087               	movwf	7
 10183  1662  0801               	movf	1,w
 10184  1663  1903               	btfsc	3,2
 10185  1664  2E6A               	goto	i1l2956
 10186  1665  3001               	movlw	1
 10187  1666  07F4               	addwf	i1strlen@cp,f
 10188  1667  3000               	movlw	0
 10189  1668  3DF5               	addwfc	i1strlen@cp+1,f
 10190  1669  2E5E               	goto	i1l2954
 10191  166A                     i1l2956:	
 10192  166A  0970               	comf	i1strlen@s,w
 10193  166B  00F2               	movwf	??i1_strlen
 10194  166C  0971               	comf	i1strlen@s+1,w
 10195  166D  00F3               	movwf	??i1_strlen+1
 10196  166E  0AF2               	incf	??i1_strlen,f
 10197  166F  1903               	skipnz
 10198  1670  0AF3               	incf	??i1_strlen+1,f
 10199  1671  0874               	movf	i1strlen@cp,w
 10200  1672  0772               	addwf	??i1_strlen,w
 10201  1673  00F0               	movwf	?i1_strlen
 10202  1674  0875               	movf	i1strlen@cp+1,w
 10203  1675  3D73               	addwfc	??i1_strlen+1,w
 10204  1676  00F1               	movwf	?i1_strlen+1
 10205  1677  0008               	return
 10206  1678                     __end_ofi1_strlen:	
 10207                           
 10208                           	psect	text44
 10209  081E                     __ptext44:	
 10210 ;; *************** function i1_nrf24l01SetRXMode *****************
 10211 ;; Defined at:
 10212 ;;		line 90 in file "nrf24l01.c"
 10213 ;; Parameters:    Size  Location     Type
 10214 ;;  rxMode          1    wreg     unsigned char 
 10215 ;; Auto vars:     Size  Location     Type
 10216 ;;  rxMode          1    6[COMMON] unsigned char 
 10217 ;;  nrf24l01SetR    1    5[COMMON] struct .
 10218 ;; Return value:  Size  Location     Type
 10219 ;;                  1    wreg      void 
 10220 ;; Registers used:
 10221 ;;		wreg, status,2, status,0, pclath, cstack
 10222 ;; Tracked objects:
 10223 ;;		On entry : 0/0
 10224 ;;		On exit  : 0/0
 10225 ;;		Unchanged: 0/0
 10226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10228 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10229 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10230 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10231 ;;Total ram usage:        3 bytes
 10232 ;; Hardware stack levels used:    1
 10233 ;; Hardware stack levels required when called:    3
 10234 ;; This function calls:
 10235 ;;		_nrf24l01CEHigh
 10236 ;;		_nrf24l01CELow
 10237 ;;		i1_nrf24l01Send
 10238 ;; This function is called by:
 10239 ;;		i1_nrf24l01Service
 10240 ;; This function uses a non-reentrant model
 10241 ;;
 10242                           
 10243                           
 10244                           ;psect for function i1_nrf24l01SetRXMode
 10245  081E                     i1_nrf24l01SetRXMode:	
 10246                           
 10247                           ;incstack = 0
 10248                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
 10249                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
 10250  081E  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
 10251                           
 10252                           ;nrf24l01.c: 105: n_CONFIG_t config;;nrf24l01.c: 108: config.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x00, 0);
 10253  081F  01F1               	clrf	i1nrf24l01Send@data
 10254  0820  3000               	movlw	0
 10255  0821  3195  25B5  3188   	fcall	i1_nrf24l01Send
 10256  0824  00F4               	movwf	??i1_nrf24l01SetRXMode
 10257  0825  0874               	movf	??i1_nrf24l01SetRXMode,w
 10258  0826  00F5               	movwf	i1nrf24l01SetRXMode@config
 10259                           
 10260                           ;nrf24l01.c: 111: if (config.PRIM_RX != rxMode){
 10261  0827  0875               	movf	i1nrf24l01SetRXMode@config,w
 10262  0828  3901               	andlw	1
 10263  0829  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
 10264  082A  1903               	skipnz
 10265  082B  0008               	return
 10266                           
 10267                           ;nrf24l01.c: 114: nrf24l01CELow();
 10268  082C  3195  2517  3188   	fcall	_nrf24l01CELow
 10269                           
 10270                           ;nrf24l01.c: 115: _delay((unsigned long)((200)*(32000000/4000000.0)));
 10271  082F  30E4               	movlw	228
 10272  0830                     u347_27:	
 10273  0830  3200               	nop2
 10274  0831  3200               	nop2
 10275  0832  0B89               	decfsz	9,f
 10276  0833  2830               	goto	u347_27
 10277  0834  3200               	nop2
 10278  0835  3200               	nop2
 10279                           
 10280                           ;nrf24l01.c: 118: config.PRIM_RX = rxMode;
 10281  0836  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 10282  0837  3901               	andlw	1
 10283  0838  1075               	bcf	i1nrf24l01SetRXMode@config,0
 10284  0839  1D03               	skipz
 10285  083A  1475               	bsf	i1nrf24l01SetRXMode@config,0
 10286                           
 10287                           ;nrf24l01.c: 119: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
 10288  083B  0875               	movf	i1nrf24l01SetRXMode@config,w
 10289  083C  00F4               	movwf	??i1_nrf24l01SetRXMode
 10290  083D  0874               	movf	??i1_nrf24l01SetRXMode,w
 10291  083E  00F1               	movwf	i1nrf24l01Send@data
 10292  083F  3020               	movlw	32
 10293  0840  3195  25B5  3188   	fcall	i1_nrf24l01Send
 10294                           
 10295                           ;nrf24l01.c: 122: _delay((unsigned long)((200)*(32000000/4000000.0)));
 10296  0843  30E4               	movlw	228
 10297  0844                     u348_27:	
 10298  0844  3200               	nop2
 10299  0845  3200               	nop2
 10300  0846  0B89               	decfsz	9,f
 10301  0847  2844               	goto	u348_27
 10302  0848  3200               	nop2
 10303  0849  3200               	nop2
 10304                           
 10305                           ;nrf24l01.c: 125: if (rxMode){
 10306  084A  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 10307  084B  1903               	btfsc	3,2
 10308  084C  0008               	return
 10309                           
 10310                           ;nrf24l01.c: 126: nrf24l01CEHigh();
 10311  084D  3195  2514  3188   	fcall	_nrf24l01CEHigh
 10312                           
 10313                           ;nrf24l01.c: 127: _delay((unsigned long)((200)*(32000000/4000000.0)));
 10314  0850  30E4               	movlw	228
 10315  0851                     u349_27:	
 10316  0851  3200               	nop2
 10317  0852  3200               	nop2
 10318  0853  0B89               	decfsz	9,f
 10319  0854  2851               	goto	u349_27
 10320  0855  3200               	nop2
 10321  0856  3200               	nop2
 10322  0857  0008               	return
 10323  0858                     __end_ofi1_nrf24l01SetRXMode:	
 10324                           
 10325                           	psect	text45
 10326  15B5                     __ptext45:	
 10327 ;; *************** function i1_nrf24l01Send *****************
 10328 ;; Defined at:
 10329 ;;		line 45 in file "nrf24l01.c"
 10330 ;; Parameters:    Size  Location     Type
 10331 ;;  command         1    wreg     unsigned char 
 10332 ;;  data            1    1[COMMON] unsigned char 
 10333 ;; Auto vars:     Size  Location     Type
 10334 ;;  command         1    3[COMMON] unsigned char 
 10335 ;; Return value:  Size  Location     Type
 10336 ;;                  1    wreg      unsigned char 
 10337 ;; Registers used:
 10338 ;;		wreg, status,2, status,0, pclath, cstack
 10339 ;; Tracked objects:
 10340 ;;		On entry : 0/0
 10341 ;;		On exit  : 0/0
 10342 ;;		Unchanged: 0/0
 10343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10344 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10345 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10346 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10347 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10348 ;;Total ram usage:        3 bytes
 10349 ;; Hardware stack levels used:    1
 10350 ;; Hardware stack levels required when called:    2
 10351 ;; This function calls:
 10352 ;;		_enableInterrupts
 10353 ;;		_nrf24l01SPIEnd
 10354 ;;		_nrf24l01SPISend
 10355 ;;		_nrf24l01SPIStart
 10356 ;; This function is called by:
 10357 ;;		_nrf24l01ISR
 10358 ;;		i1_nrf24l01SetRXMode
 10359 ;;		i1_nrf24l01Service
 10360 ;; This function uses a non-reentrant model
 10361 ;;
 10362                           
 10363                           
 10364                           ;psect for function i1_nrf24l01Send
 10365  15B5                     i1_nrf24l01Send:	
 10366                           
 10367                           ;incstack = 0
 10368                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
 10369                           ;i1nrf24l01Send@command stored from wreg
 10370  15B5  00F3               	movwf	i1nrf24l01Send@command
 10371                           
 10372                           ;nrf24l01.c: 48: enableInterrupts(0);
 10373  15B6  3000               	movlw	0
 10374  15B7  3195  2527  3195   	fcall	_enableInterrupts
 10375                           
 10376                           ;nrf24l01.c: 51: nrf24l01SPIStart();
 10377  15BA  3195  252F  3195   	fcall	_nrf24l01SPIStart
 10378                           
 10379                           ;nrf24l01.c: 54: nrf24l01SPISend(command);
 10380  15BD  0873               	movf	i1nrf24l01Send@command,w
 10381  15BE  3195  2540  3195   	fcall	_nrf24l01SPISend
 10382                           
 10383                           ;nrf24l01.c: 57: data = nrf24l01SPISend(data);
 10384  15C1  0871               	movf	i1nrf24l01Send@data,w
 10385  15C2  3195  2540  3195   	fcall	_nrf24l01SPISend
 10386  15C5  00F2               	movwf	??i1_nrf24l01Send
 10387  15C6  0872               	movf	??i1_nrf24l01Send,w
 10388  15C7  00F1               	movwf	i1nrf24l01Send@data
 10389                           
 10390                           ;nrf24l01.c: 60: nrf24l01SPIEnd();
 10391  15C8  3195  2520  3195   	fcall	_nrf24l01SPIEnd
 10392                           
 10393                           ;nrf24l01.c: 63: enableInterrupts(1);
 10394  15CB  3001               	movlw	1
 10395  15CC  3195  2527         	fcall	_enableInterrupts
 10396                           
 10397                           ;nrf24l01.c: 65: return data;
 10398  15CE  0871               	movf	i1nrf24l01Send@data,w
 10399  15CF  0008               	return
 10400  15D0                     __end_ofi1_nrf24l01Send:	
 10401                           
 10402                           	psect	text46
 10403  152F                     __ptext46:	
 10404 ;; *************** function _nrf24l01SPIStart *****************
 10405 ;; Defined at:
 10406 ;;		line 64 in file "interface.c"
 10407 ;; Parameters:    Size  Location     Type
 10408 ;;		None
 10409 ;; Auto vars:     Size  Location     Type
 10410 ;;		None
 10411 ;; Return value:  Size  Location     Type
 10412 ;;                  1    wreg      void 
 10413 ;; Registers used:
 10414 ;;		wreg, status,2, status,0, pclath, cstack
 10415 ;; Tracked objects:
 10416 ;;		On entry : 0/0
 10417 ;;		On exit  : 0/0
 10418 ;;		Unchanged: 0/0
 10419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10424 ;;Total ram usage:        0 bytes
 10425 ;; Hardware stack levels used:    1
 10426 ;; Hardware stack levels required when called:    8
 10427 ;; This function calls:
 10428 ;;		_nrf24l01CSLow
 10429 ;; This function is called by:
 10430 ;;		_nrf24l01Send
 10431 ;;		_nrf24l01SetTXPipe
 10432 ;;		_nrf24l01Service
 10433 ;;		_nrf24l01InitRegisters
 10434 ;;		i1_nrf24l01Send
 10435 ;;		i1_nrf24l01Service
 10436 ;; This function uses a non-reentrant model
 10437 ;;
 10438                           
 10439                           
 10440                           ;psect for function _nrf24l01SPIStart
 10441  152F                     _nrf24l01SPIStart:	
 10442                           
 10443                           ;interface.c: 65: nrf24l01CSLow();
 10444                           
 10445                           ;incstack = 0
 10446 ;; hardware stack exceeded
 10447                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
 10448  152F  3195  251D  3195   	fcall	_nrf24l01CSLow
 10449                           
 10450                           ;interface.c: 66: _delay((unsigned long)((10)*(32000000/4000000.0)));
 10451  1532  301A               	movlw	26
 10452  1533                     u350_27:	
 10453  1533  0B89               	decfsz	9,f
 10454  1534  2D33               	goto	u350_27
 10455  1535  3200               	nop2
 10456  1536  0008               	return
 10457  1537                     __end_of_nrf24l01SPIStart:	
 10458                           
 10459                           	psect	text47
 10460  151D                     __ptext47:	
 10461 ;; *************** function _nrf24l01CSLow *****************
 10462 ;; Defined at:
 10463 ;;		line 17 in file "interface.c"
 10464 ;; Parameters:    Size  Location     Type
 10465 ;;		None
 10466 ;; Auto vars:     Size  Location     Type
 10467 ;;		None
 10468 ;; Return value:  Size  Location     Type
 10469 ;;                  1    wreg      void 
 10470 ;; Registers used:
 10471 ;;		None
 10472 ;; Tracked objects:
 10473 ;;		On entry : 0/0
 10474 ;;		On exit  : 0/0
 10475 ;;		Unchanged: 0/0
 10476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10481 ;;Total ram usage:        0 bytes
 10482 ;; Hardware stack levels used:    1
 10483 ;; Hardware stack levels required when called:    7
 10484 ;; This function calls:
 10485 ;;		Nothing
 10486 ;; This function is called by:
 10487 ;;		_nrf24l01SPIStart
 10488 ;; This function uses a non-reentrant model
 10489 ;;
 10490                           
 10491                           
 10492                           ;psect for function _nrf24l01CSLow
 10493  151D                     _nrf24l01CSLow:	
 10494                           
 10495                           ;interface.c: 18: PORTAbits.RA1 = 0;
 10496                           
 10497                           ;incstack = 0
 10498 ;; hardware stack exceeded
 10499                           ; Regs used in _nrf24l01CSLow: []
 10500  151D  0020               	movlb	0	; select bank0
 10501  151E  108C               	bcf	12,1	;volatile
 10502  151F  0008               	return
 10503  1520                     __end_of_nrf24l01CSLow:	
 10504                           
 10505                           	psect	text48
 10506  1540                     __ptext48:	
 10507 ;; *************** function _nrf24l01SPISend *****************
 10508 ;; Defined at:
 10509 ;;		line 51 in file "interface.c"
 10510 ;; Parameters:    Size  Location     Type
 10511 ;;  data            1    wreg     unsigned char 
 10512 ;; Auto vars:     Size  Location     Type
 10513 ;;  data            1    0[COMMON] unsigned char 
 10514 ;; Return value:  Size  Location     Type
 10515 ;;                  1    wreg      unsigned char 
 10516 ;; Registers used:
 10517 ;;		wreg
 10518 ;; Tracked objects:
 10519 ;;		On entry : 0/0
 10520 ;;		On exit  : 0/0
 10521 ;;		Unchanged: 0/0
 10522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10527 ;;Total ram usage:        0 bytes
 10528 ;; Hardware stack levels used:    1
 10529 ;; Hardware stack levels required when called:    7
 10530 ;; This function calls:
 10531 ;;		Nothing
 10532 ;; This function is called by:
 10533 ;;		_nrf24l01Send
 10534 ;;		_nrf24l01SetTXPipe
 10535 ;;		_nrf24l01Service
 10536 ;;		_nrf24l01InitRegisters
 10537 ;;		i1_nrf24l01Send
 10538 ;;		i1_nrf24l01Service
 10539 ;; This function uses a non-reentrant model
 10540 ;;
 10541                           
 10542                           
 10543                           ;psect for function _nrf24l01SPISend
 10544  1540                     _nrf24l01SPISend:	
 10545                           
 10546                           ;incstack = 0
 10547 ;; hardware stack exceeded
 10548                           ; Regs used in _nrf24l01SPISend: [wreg]
 10549                           ;nrf24l01SPISend@data stored from wreg
 10550  1540  00F0               	movwf	nrf24l01SPISend@data
 10551                           
 10552                           ;interface.c: 52: SSP1BUF = data;
 10553  1541  0870               	movf	nrf24l01SPISend@data,w
 10554  1542  0024               	movlb	4	; select bank4
 10555  1543  0091               	movwf	17	;volatile
 10556                           
 10557                           ;interface.c: 54: PORTCbits.RC4 = 1;
 10558  1544  0020               	movlb	0	; select bank0
 10559  1545  160E               	bsf	14,4	;volatile
 10560  1546                     i1l48:	
 10561                           ;interface.c: 56: while (!SSP1STATbits.BF){
 10562                           
 10563  1546  0024               	movlb	4	; select bank4
 10564  1547  1814               	btfsc	20,0	;volatile
 10565  1548  2D4B               	goto	i1l2238
 10566                           
 10567                           ;interface.c: 57: __nop();
 10568  1549  0000               	nop
 10569  154A  2D46               	goto	i1l48
 10570  154B                     i1l2238:	
 10571                           
 10572                           ;interface.c: 58: };interface.c: 60: return SSP1BUF;
 10573  154B  0811               	movf	17,w	;volatile
 10574  154C  0008               	return
 10575  154D                     __end_of_nrf24l01SPISend:	
 10576                           
 10577                           	psect	text49
 10578  1520                     __ptext49:	
 10579 ;; *************** function _nrf24l01SPIEnd *****************
 10580 ;; Defined at:
 10581 ;;		line 70 in file "interface.c"
 10582 ;; Parameters:    Size  Location     Type
 10583 ;;		None
 10584 ;; Auto vars:     Size  Location     Type
 10585 ;;		None
 10586 ;; Return value:  Size  Location     Type
 10587 ;;                  1    wreg      void 
 10588 ;; Registers used:
 10589 ;;		wreg, status,2, status,0, pclath, cstack
 10590 ;; Tracked objects:
 10591 ;;		On entry : 0/0
 10592 ;;		On exit  : 0/0
 10593 ;;		Unchanged: 0/0
 10594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10599 ;;Total ram usage:        0 bytes
 10600 ;; Hardware stack levels used:    1
 10601 ;; Hardware stack levels required when called:    8
 10602 ;; This function calls:
 10603 ;;		_nrf24l01CSHigh
 10604 ;; This function is called by:
 10605 ;;		_nrf24l01Send
 10606 ;;		_nrf24l01SetTXPipe
 10607 ;;		_nrf24l01Service
 10608 ;;		_nrf24l01InitRegisters
 10609 ;;		i1_nrf24l01Send
 10610 ;;		i1_nrf24l01Service
 10611 ;; This function uses a non-reentrant model
 10612 ;;
 10613                           
 10614                           
 10615                           ;psect for function _nrf24l01SPIEnd
 10616  1520                     _nrf24l01SPIEnd:	
 10617                           
 10618                           ;interface.c: 71: _delay((unsigned long)((10)*(32000000/4000000.0)));
 10619                           
 10620                           ;incstack = 0
 10621 ;; hardware stack exceeded
 10622                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
 10623  1520  301A               	movlw	26
 10624  1521                     u351_27:	
 10625  1521  0B89               	decfsz	9,f
 10626  1522  2D21               	goto	u351_27
 10627  1523  3200               	nop2
 10628                           
 10629                           ;interface.c: 72: nrf24l01CSHigh();
 10630  1524  3195  251A         	fcall	_nrf24l01CSHigh
 10631  1526  0008               	return
 10632  1527                     __end_of_nrf24l01SPIEnd:	
 10633                           
 10634                           	psect	text50
 10635  151A                     __ptext50:	
 10636 ;; *************** function _nrf24l01CSHigh *****************
 10637 ;; Defined at:
 10638 ;;		line 22 in file "interface.c"
 10639 ;; Parameters:    Size  Location     Type
 10640 ;;		None
 10641 ;; Auto vars:     Size  Location     Type
 10642 ;;		None
 10643 ;; Return value:  Size  Location     Type
 10644 ;;                  1    wreg      void 
 10645 ;; Registers used:
 10646 ;;		None
 10647 ;; Tracked objects:
 10648 ;;		On entry : 0/0
 10649 ;;		On exit  : 0/0
 10650 ;;		Unchanged: 0/0
 10651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10656 ;;Total ram usage:        0 bytes
 10657 ;; Hardware stack levels used:    1
 10658 ;; Hardware stack levels required when called:    7
 10659 ;; This function calls:
 10660 ;;		Nothing
 10661 ;; This function is called by:
 10662 ;;		_nrf24l01SPIEnd
 10663 ;; This function uses a non-reentrant model
 10664 ;;
 10665                           
 10666                           
 10667                           ;psect for function _nrf24l01CSHigh
 10668  151A                     _nrf24l01CSHigh:	
 10669                           
 10670                           ;interface.c: 23: PORTAbits.RA1 = 1;
 10671                           
 10672                           ;incstack = 0
 10673 ;; hardware stack exceeded
 10674                           ; Regs used in _nrf24l01CSHigh: []
 10675  151A  0020               	movlb	0	; select bank0
 10676  151B  148C               	bsf	12,1	;volatile
 10677  151C  0008               	return
 10678  151D                     __end_of_nrf24l01CSHigh:	
 10679                           
 10680                           	psect	text51
 10681  1527                     __ptext51:	
 10682 ;; *************** function _enableInterrupts *****************
 10683 ;; Defined at:
 10684 ;;		line 76 in file "interface.c"
 10685 ;; Parameters:    Size  Location     Type
 10686 ;;  enable          1    wreg     unsigned char 
 10687 ;; Auto vars:     Size  Location     Type
 10688 ;;  enable          1    0[COMMON] unsigned char 
 10689 ;; Return value:  Size  Location     Type
 10690 ;;                  1    wreg      void 
 10691 ;; Registers used:
 10692 ;;		wreg, status,0
 10693 ;; Tracked objects:
 10694 ;;		On entry : 0/0
 10695 ;;		On exit  : 0/0
 10696 ;;		Unchanged: 0/0
 10697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10702 ;;Total ram usage:        0 bytes
 10703 ;; Hardware stack levels used:    1
 10704 ;; Hardware stack levels required when called:    7
 10705 ;; This function calls:
 10706 ;;		Nothing
 10707 ;; This function is called by:
 10708 ;;		_nrf24l01Send
 10709 ;;		_nrf24l01Service
 10710 ;;		i1_nrf24l01Send
 10711 ;;		i1_nrf24l01Service
 10712 ;; This function uses a non-reentrant model
 10713 ;;
 10714                           
 10715                           
 10716                           ;psect for function _enableInterrupts
 10717  1527                     _enableInterrupts:	
 10718                           
 10719                           ;incstack = 0
 10720 ;; hardware stack exceeded
 10721                           ; Regs used in _enableInterrupts: [wreg+status,0]
 10722                           ;enableInterrupts@enable stored from wreg
 10723  1527  00F0               	movwf	enableInterrupts@enable
 10724                           
 10725                           ;interface.c: 77: PIE0bits.INTE = enable;
 10726  1528  0C70               	rrf	enableInterrupts@enable,w
 10727  1529  0021               	movlb	1	; select bank1
 10728  152A  1C03               	skipc
 10729  152B  1010               	bcf	16,0	;volatile
 10730  152C  1803               	skipnc
 10731  152D  1410               	bsf	16,0	;volatile
 10732  152E  0008               	return
 10733  152F                     __end_of_enableInterrupts:	
 10734                           
 10735                           	psect	text52
 10736  1517                     __ptext52:	
 10737 ;; *************** function _nrf24l01CELow *****************
 10738 ;; Defined at:
 10739 ;;		line 7 in file "interface.c"
 10740 ;; Parameters:    Size  Location     Type
 10741 ;;		None
 10742 ;; Auto vars:     Size  Location     Type
 10743 ;;		None
 10744 ;; Return value:  Size  Location     Type
 10745 ;;                  1    wreg      void 
 10746 ;; Registers used:
 10747 ;;		None
 10748 ;; Tracked objects:
 10749 ;;		On entry : 0/0
 10750 ;;		On exit  : 0/0
 10751 ;;		Unchanged: 0/0
 10752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10757 ;;Total ram usage:        0 bytes
 10758 ;; Hardware stack levels used:    1
 10759 ;; Hardware stack levels required when called:    7
 10760 ;; This function calls:
 10761 ;;		Nothing
 10762 ;; This function is called by:
 10763 ;;		_nrf24l01SetRXMode
 10764 ;;		_nrf24l01Service
 10765 ;;		_nrf24l01Init
 10766 ;;		i1_nrf24l01SetRXMode
 10767 ;;		i1_nrf24l01Service
 10768 ;; This function uses a non-reentrant model
 10769 ;;
 10770                           
 10771                           
 10772                           ;psect for function _nrf24l01CELow
 10773  1517                     _nrf24l01CELow:	
 10774                           
 10775                           ;interface.c: 8: PORTAbits.RA0 = 0;
 10776                           
 10777                           ;incstack = 0
 10778 ;; hardware stack exceeded
 10779                           ; Regs used in _nrf24l01CELow: []
 10780  1517  0020               	movlb	0	; select bank0
 10781  1518  100C               	bcf	12,0	;volatile
 10782  1519  0008               	return
 10783  151A                     __end_of_nrf24l01CELow:	
 10784                           
 10785                           	psect	text53
 10786  1514                     __ptext53:	
 10787 ;; *************** function _nrf24l01CEHigh *****************
 10788 ;; Defined at:
 10789 ;;		line 12 in file "interface.c"
 10790 ;; Parameters:    Size  Location     Type
 10791 ;;		None
 10792 ;; Auto vars:     Size  Location     Type
 10793 ;;		None
 10794 ;; Return value:  Size  Location     Type
 10795 ;;                  1    wreg      void 
 10796 ;; Registers used:
 10797 ;;		None
 10798 ;; Tracked objects:
 10799 ;;		On entry : 0/0
 10800 ;;		On exit  : 0/0
 10801 ;;		Unchanged: 0/0
 10802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10807 ;;Total ram usage:        0 bytes
 10808 ;; Hardware stack levels used:    1
 10809 ;; Hardware stack levels required when called:    7
 10810 ;; This function calls:
 10811 ;;		Nothing
 10812 ;; This function is called by:
 10813 ;;		_nrf24l01SetRXMode
 10814 ;;		_nrf24l01Service
 10815 ;;		_nrf24l01Init
 10816 ;;		i1_nrf24l01SetRXMode
 10817 ;;		i1_nrf24l01Service
 10818 ;; This function uses a non-reentrant model
 10819 ;;
 10820                           
 10821                           
 10822                           ;psect for function _nrf24l01CEHigh
 10823  1514                     _nrf24l01CEHigh:	
 10824                           
 10825                           ;interface.c: 13: PORTAbits.RA0 = 1;
 10826                           
 10827                           ;incstack = 0
 10828 ;; hardware stack exceeded
 10829                           ; Regs used in _nrf24l01CEHigh: []
 10830  1514  0020               	movlb	0	; select bank0
 10831  1515  140C               	bsf	12,0	;volatile
 10832  1516  0008               	return
 10833  1517                     __end_of_nrf24l01CEHigh:	
 10834                           
 10835                           	psect	text54
 10836  159A                     __ptext54:	
 10837 ;; *************** function i1_memset *****************
 10838 ;; Defined at:
 10839 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
 10840 ;; Parameters:    Size  Location     Type
 10841 ;;  p1              1    wreg     PTR void 
 10842 ;;		 -> RXPacket(33), 
 10843 ;;  c               2    0[COMMON] int 
 10844 ;;  n               2    2[COMMON] unsigned int 
 10845 ;; Auto vars:     Size  Location     Type
 10846 ;;  p1              1    5[COMMON] PTR void 
 10847 ;;		 -> RXPacket(33), 
 10848 ;;  memset          1    6[COMMON] PTR unsigned char 
 10849 ;;		 -> RXPacket(33), 
 10850 ;; Return value:  Size  Location     Type
 10851 ;;                  1    wreg      PTR void 
 10852 ;; Registers used:
 10853 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10854 ;; Tracked objects:
 10855 ;;		On entry : 0/0
 10856 ;;		On exit  : 0/0
 10857 ;;		Unchanged: 0/0
 10858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10859 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10860 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10861 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10862 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10863 ;;Total ram usage:        7 bytes
 10864 ;; Hardware stack levels used:    1
 10865 ;; This function calls:
 10866 ;;		Nothing
 10867 ;; This function is called by:
 10868 ;;		i1_nrf24l01Service
 10869 ;; This function uses a non-reentrant model
 10870 ;;
 10871                           
 10872                           
 10873                           ;psect for function i1_memset
 10874  159A                     i1_memset:	
 10875                           
 10876                           ;incstack = 0
 10877                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 10878                           ;i1memset@p1 stored from wreg
 10879  159A  00F5               	movwf	i1memset@p1
 10880  159B  0875               	movf	i1memset@p1,w
 10881  159C  00F4               	movwf	??i1_memset
 10882  159D  0874               	movf	??i1_memset,w
 10883  159E  00F6               	movwf	i1memset@p
 10884  159F                     i1l2948:	
 10885  159F  3001               	movlw	1
 10886  15A0  02F2               	subwf	i1memset@n,f
 10887  15A1  3000               	movlw	0
 10888  15A2  3BF3               	subwfb	i1memset@n+1,f
 10889  15A3  0A72               	incf	i1memset@n,w
 10890  15A4  1903               	btfsc	3,2
 10891  15A5  0A73               	incf	i1memset@n+1,w
 10892  15A6  1903               	btfsc	3,2
 10893  15A7  0008               	return
 10894  15A8  0870               	movf	i1memset@c,w
 10895  15A9  00F4               	movwf	??i1_memset
 10896  15AA  0876               	movf	i1memset@p,w
 10897  15AB  0086               	movwf	6
 10898  15AC  3001               	movlw	1	; select bank2/3
 10899  15AD  0087               	movwf	7
 10900  15AE  0874               	movf	??i1_memset,w
 10901  15AF  0081               	movwf	1
 10902  15B0  3001               	movlw	1
 10903  15B1  00F4               	movwf	??i1_memset
 10904  15B2  0874               	movf	??i1_memset,w
 10905  15B3  07F6               	addwf	i1memset@p,f
 10906  15B4  2D9F               	goto	i1l2948
 10907  15B5                     __end_ofi1_memset:	
 10908                           ;	Return value of i1_memset is never used
 10909                           
 10910  007E                     btemp	set	126	;btemp
 10911  007E                     int$flags	set	126
 10912  007E                     wtemp0	set	126


Data Sizes:
    Strings     70
    Constant    57
    Data        1
    BSS         87
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     71      77
    BANK2            80     49      70
    BANK3            80      0      61
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> sendMessage@status(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 28
		 -> romDataMap.name(BANK3[16]), STR_12(CODE[4]), romDataMap(BANK3[28]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK2[17]), STR_13(CODE[5]), STR_11(CODE[5]), STR_10(CODE[6]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[7]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p1	PTR void  size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    memset@p	PTR unsigned char  size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_14(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__memset	PTR void  size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    nrf24l01SendPacket@txPacket	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    TXPacket	PTR struct . size(2) Largest target is 33
		 -> NULL(NULL[0]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sendMessage@topic	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_13(CODE[5]), STR_11(CODE[5]), STR_10(CODE[6]), STR_9(CODE[5]), 
		 -> STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[7]), STR_5(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    sendMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->i1_nrf24l01Service
    i1_nrf24l01Service->i1_memset
    i1_nrf24l01Service->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->___lwmod
    _nrf24l01GetPipe->_strlen
    _sendMessage->_ftoa
    _strcat->_ftoa
    _sleep->_nrf24l01SetRXMode
    _nrf24l01SendPacket->_nrf24l01Service
    _nrf24l01Service->_memset
    _nrf24l01SetRXMode->_nrf24l01Send
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    ___lbtoft->___ftpack
    ___lwtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_loop
    _loop->_sendMessage
    _sendMessage->_strcat
    _strcat->_ftoa
    _ftoa->___fttol

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_loop

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0  100392
                                             36 BANK1     35    35      0
                           ___lwtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                        _sendMessage
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    5588
                                             18 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               11    11      0    5588
                                              7 BANK0     11    11      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    3     3      0     314
                                              4 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    4     4      0    2380
                                              3 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      5     5      0     658
                                              6 BANK0      5     5      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     337
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _loop                                                50    50      0   60847
                                             35 BANK1      1     1      0
                                              0 BANK2     49    49      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
                           ___lltoft
                        _getADCValue
                       _nrf24l01Send
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _sendMessage                                         10     3      7   27066
                                             25 BANK1     10     3      7
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                 _nrf24l01SendPacket
                              _sleep
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     333
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     614
                                             19 BANK1      6     2      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _sleep                                                4     2      2    2553
                                              6 BANK0      4     2      2
                         _doWDTSleep
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendPacket                                   3     1      2    5426
                                             13 BANK0      3     1      2
                    _nrf24l01Service
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Service                                      6     6      0    5364
                                              7 BANK0      6     6      0
                   _enableInterrupts
                             _memset
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     170
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SetRXMode                                    3     3      0    2396
                                              3 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (4) _nrf24l01Send                                         3     2      1    2284
                                              0 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _memset                                               7     3      4     310
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                14    10      4   15718
                                             79 BANK0      1     1      0
                                              6 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             36    26     10    2229
                                             24 BANK0     28    18     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     337
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     340
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    3615
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     430
                                             71 BANK0      8     4      4
                                              0 BANK1      6     6      0
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4809
                                             27 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     223
                                             55 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3694
                                             55 BANK0     16    10      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     314
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         12     9      3   11919
                                             43 BANK0     12     9      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                         _doWDTSleep
 ---------------------------------------------------------------------------------
 (3) _doWDTSleep                                           2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    4004
                                             27 BANK0     16    10      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    4564
                                             14 BANK0     13     7      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    3192
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    3034
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    3123
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    3012
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  0     0      0    1359
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (10) _nrf24l01ISR                                         1     1      0    1359
                                             13 COMMON     1     1      0
                     i1_nrf24l01Send
                  i1_nrf24l01Service
 ---------------------------------------------------------------------------------
 (11) i1_nrf24l01Service                                   6     6      0    1092
                                              7 COMMON     6     6      0
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
                           i1_strlen
 ---------------------------------------------------------------------------------
 (12) i1_strlen                                            6     4      2      94
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (12) i1_nrf24l01SetRXMode                                 3     3      0     379
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (13) i1_nrf24l01Send                                      3     2      1     267
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_memset                                            7     3      4     148
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwtoft
     ___ftpack
   _loop
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___lbtoft
       ___ftpack
     ___lltoft
       ___ftpack
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _sendMessage
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
       _nrf24l01SendPacket (ARG)
         _nrf24l01Service
           _enableInterrupts
           _memset
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
           _nrf24l01Send
             _enableInterrupts
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
           _nrf24l01SetRXMode
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _strlen
       _sleep (ARG)
         _doWDTSleep
         _nrf24l01SetRXMode
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01Send
             _enableInterrupts
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _doWDTSleep
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
       _strcpy (ARG)
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _sendMessage
     ___lbtoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _nrf24l01SendPacket (ARG)
       _nrf24l01Service
         _enableInterrupts
         _memset
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
         _nrf24l01SetRXMode
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01Send
             _enableInterrupts
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
         _strlen
     _sleep (ARG)
       _doWDTSleep
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
     _strcpy (ARG)
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01Service
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       i1_strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     47      4D       7       96.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     31      46       9       87.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      3D      11       76.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     12E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     12E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
<<<<<<< HEAD
Symbol Table                                                                                   Thu Aug 02 12:07:07 2018
=======
Symbol Table                                                                                   Wed Aug 01 21:30:47 2018
>>>>>>> 1d4db504068e8c8c8cdf720102f8bcd4a3c081ef

                ___bmul@product 0022                     __CFG_CP$OFF 0000                sendMessage@value 00BD  
              sendMessage@topic 00BB             ___wmul@multiplicand 0022             nrf24l01Send@command 0022  
                  ___ftadd@exp1 003A                    ___ftadd@exp2 0039               sendMessage@packet 00B9  
                   __CFG_LVP$ON 0000                    ___ftadd@sign 0038                             l261 16C4  
                           l166 0C72                             l416 0301                             l442 160F  
                           l427 03A4                             l419 0320                             l286 04CF  
                           l652 0A49                             l653 0A51                             l645 0A36  
                           l736 0BF3                             l676 0FA9                    __CFG_CPD$OFF 0000  
                           _ISR 0004               sendMessage@status 00C1                             wreg 0009  
             sleep@milliseconds 0026                            ?_ISR 0070                    ___ftdiv@cntr 0045  
                  ___ftdiv@sign 004A                  ??_nrf24l01Init 0032                            l3000 0CB3  
                          l2210 0A13                            l2220 0A3B                            l2212 0A1D  
                          l3100 0780                            l2222 0A43                            l2214 0A22  
                          l2206 0A0C                            l2304 1609                            l2322 0969  
                          l2332 0997                            l2324 0977                            l3140 17A2  
                          l3300 17CD                            l2406 0FE8                            l2350 0F39  
                          l2422 0901                            l2510 0546                            l2502 052D  
                          l3142 17AE                            l3150 17C3                            l3302 17F0  
                          l2336 09A2                            l2416 08DB                            l2600 03B7  
                          l2346 0F32                            l2418 08E9                            l2426 090C  
                          l2610 03CF                            l2602 03BA                            l2530 0281  
                          l2506 053E                            l3146 17BA                            l2380 0F88  
                          l2356 0F48                            l2620 041F                            l2276 167D  
                          l2452 0467                            l2374 0F75                            l2278 1689  
                          l2470 04A7                            l2630 1565                            l3094 0771  
                          l3086 0727                            l2392 0FBB                            l2376 0F7F  
                          l2368 0F62                            l2720 0808                            l2616 0414  
                          l2536 0291                            l2544 02BF                            l2288 1628  
                          l2456 0488                            l2448 044E                            l2800 15F0  
                          l3408 0B72                  ??_nrf24l01Send 0021                            l2386 0F9B  
                          l2378 0F84                            l2642 086F                            l2730 0B91  
                          l2298 155A                            l2562 0308                            l2554 02CE  
                          l2618 025E                            l2482 04F0                            l2810 1739  
                          l2626 155F                            l2396 0FCD                            l2388 0FA5  
                          l2556 02FD                            l2476 04C0                            l2646 0885  
                          l2670 0D91                            l2750 0BDB                            l2590 0381  
                          l2558 0303                            l2822 0E5E                            l2806 1725  
                          l2664 0D7B                            l2584 0354                            l2568 032F  
                          l2808 1731                            l2914 0D42                            l2906 0D29  
                          l2682 0DCC                            l2762 0C05                            l2770 174C  
                          l2594 0390                            l2578 034E                            l2756 0BE9  
                          l2748 0BCA                            l2772 175C                            l2694 0DE8  
                          l2686 0DD4                            l2758 0BF7                            l2698 0DF0  
                          l2794 170A                            l2866 16D0                            l2876 16E3  
                          l2892 0CE8                            l2886 0CD2                            l2982 0C41  
                          l2984 0C49                            l2994 0C94                            l2986 0C35  
                          l2998 0CAC                            STR_1 187D                    __CFG_WDTE$ON 0000  
                          STR_2 187D                            STR_3 1851                            STR_4 186F  
                          STR_5 1856                            STR_6 183F                            STR_7 185B  
                          STR_8 186A                            STR_9 1860                            u2125 0F76  
                          u3005 0D2A                            u3015 0D39                            u3025 0D43  
                          u2305 0482                            u2155 0F89                            u2245 08DE  
                          u2095 0F63                            u2185 0F9C                            u2265 08F7  
                          u2505 039A                            u2275 0902                            u2515 03AC  
                          u3155 17A5                            u1805 0A58                            u1725 0A18  
                          u3175 17B4                            u3335 17DE                            u3407 0921  
                          u1745 0A31                            u2705 0DF1                            u1905 1610  
                          u3185 17BB                            u3417 0930                            u2715 0DF7  
                          u2635 0D9D                            u1915 1615                            u2475 0377  
                          u3427 04A2                            u1765 0A3E                            u2645 0DAD  
                          u3437 08A8                            u2495 0388                            u3447 08BD  
                          u2665 0DD5                            u2825 0BEA                            u1945 096C  
                          u3457 08CB                            u2675 0DDB                            u2765 0B99  
                          u1965 0978                            u3397 0AFA                            u2855 1751  
                          u1975 098C                            u2944 16CA                            u1985 0998  
                          u2945 16C9                            u2795 0BCB                            i1l48 1546  
                          u2985 0CFA                            u2995 0D0A                            _WPUA 020C  
                          _WPUC 020E  __size_of_nrf24l01InterfaceInit 001C                    __CFG_WRT$OFF 0000  
                 __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 165A                            _main 0ADE  
                          _ftoa 0E18                    ___ftpack@arg 0020                            _loop 002E  
                  ___ftpack@exp 0023                            fsr0h 0005                            fsr1h 0007  
                          indf0 0000                            fsr0l 0004                            indf1 0001  
                          fsr1l 0006                            btemp 007E                   __CFG_BORV$LOW 0000  
                          start 000F           nrf24l01SetRXPipe@pipe 0025                   __CFG_CSWEN$ON 0000  
             ___bmul@multiplier 0023                   __CFG_MCLRE$ON 0000                    ___ftmul@cntr 0065  
                  ___ftmul@sign 0066     __size_of_nrf24l01SendPacket 002A                           ??_ISR 007E  
                  ___fttol@exp1 00A5            __size_of_getADCValue 00A6                 ??_nrf24l01CELow 0070  
                  ___fttol@lval 00A1                 ??_nrf24l01CSLow 0070                           ?_main 0070  
                         ?_ftoa 00A6                           ?_loop 0070                 __end_of___ftadd 1000  
                         STR_10 1846                           STR_11 1865                           STR_12 1879  
                         STR_13 1874                           STR_14 1829                 __end_of___ftdiv 0D64  
               __end_of___ftneg 1540                 __end_of___lldiv 09AB                 __end_of___ftmul 0E18  
               __end_of___llmod 0915                 __end_of___ftsub 081E                 __end_of___fttol 0C15  
                __CFG_DEBUG$OFF 0000                           i1l155 000D                           i1l270 09D1  
                         i1l271 09D0                 __end_of___lwmod 17C8                           i1l274 09F9  
                         i1l286 0610          enableInterrupts@enable 0070                      i1memset@p1 0075  
                 __CFG_PWRTE$ON 0000           nrf24l01SetTXPipe@pipe 0026                    ___lltoft@exp 002D  
                 ___awtoft@sign 002D                 __end_of_dpowers 1828                 __end_of_isdigit 155C  
                         _sleep 16FA                   ___ftpack@sign 0024                           ftoa@f 00A6  
                         ftoa@l 00AE                  __CFG_BOREN$OFF 0000                _enableInterrupts 1527  
                         status 0003                           wtemp0 007E                 __end_of_sprintf 0425  
   __end_ofi1_nrf24l01SetRXMode 0858                __end_ofi1_memset 15B5               getADCValue@adcSum 0054  
              __end_ofi1_strlen 1678                _nrf24l01SPIStart 152F                 __initialization 0011  
        nrf24l01InitRegisters@i 0030                    __end_of_main 0B76                    __end_of_ftoa 0F0A  
                  __end_of_loop 0258                ??_nrf24l01CEHigh 0070                          ??_main 00C4  
                        ??_ftoa 006F                   ___fttol@sign1 00A0                          ??_loop 00C3  
              ??_nrf24l01CSHigh 0070                      i1strlen@cp 0074                    ?_sendMessage 00B9  
              ??_nrf24l01SPIEnd 0070        __size_of_nrf24l01SPISend 000D                ___llmod@dividend 0032  
                        _ADRESH 009C                          _ADRESL 009B                          ?_sleep 0026  
              __end_of___awtoft 16FA                          _ANSELA 018C                          _ANSELC 018E  
              __end_of___ftpack 0A68                __end_of___lbtoft 15EB                __end_of___lltoft 1771  
                        _ODCONA 028C        __size_of_nrf24l01GetPipe 0038                          _ODCONC 028E  
                        i1l3220 0671                          i1l2238 154B                          i1l3224 0679  
                        i1l3216 0661                          i1l3170 05D3                          i1l3162 05A0  
                        i1l3190 0605                          i1l3166 05B6                          i1l3254 09FA  
                        i1l3184 05EF                          i1l3196 062B                          i1l2954 165E  
                        i1l2948 159F                          i1l2956 166A                          _INLVLA 038C  
                        _INLVLC 038E                          u321_25 05CD                          u350_27 1533  
                        u351_27 1521                __end_of___lwtoft 1583                          u346_27 05EA  
                        u347_27 0830                          u348_27 0844                          u349_27 0851  
             i1_nrf24l01Service 057A              ?i1_nrf24l01Service 0070        __size_of_nrf24l01Service 0155  
          __size_of_nrf24l01ISR 0058         nrf24l01SetRXMode@config 0024                          ___bmul 155C  
                        ___ftge 0858         nrf24l01SetRXMode@rxMode 0025                          ___wmul 1606  
           ??i1_nrf24l01Service 0077                       ??___ftadd 0034                  __CFG_STVREN$ON 0000  
                     ??___ftdiv 0041                       ??___ftneg 005A                       ??___lldiv 0028  
                     ??___ftmul 005D                       ??___llmod 0036                       ??___ftsub 0041  
                     ??___fttol 006B                       ??___lwmod 0024            __end_of_nrf24l01Init 0958  
          __end_of_nrf24l01Send 16B7                          _memset 1622           _nrf24l01InitRegisters 06A3  
                        _status 00E7                          _strcat 1720                          _strcpy 15EB  
                        _strlen 1678                          ftoa@cp 00B2           ___ftmul@f3_as_product 0062  
     i1nrf24l01SetRXMode@config 0075                       ??_isdigit 0020                          loop@ta 0123  
                        loop@vt 0120       i1nrf24l01SetRXMode@rxMode 0076                       ??_sprintf 0042  
              __end_of_statuses 183F       __end_ofi1_nrf24l01Service 06A3              getADCValue@adcLoop 0051  
       __end_of__initialization 002A                      ___ftadd@f1 002E                      ___ftadd@f2 0031  
                    ___ftge@ff1 0020                      ___ftge@ff2 0023              getADCValue@channel 0053  
                    ___ftdiv@f1 003E                      ___ftdiv@f2 003B                      ___ftdiv@f3 0046  
                    ___ftneg@f1 0057                      ___awtoft@c 0028                      ___lbtoft@c 002F  
           ___bmul@multiplicand 0020                      ___ftmul@f1 0057                      ___ftmul@f2 005A  
                    ___ftsub@f1 003E                      ___ftsub@f2 003B                      ___fttol@f1 0067  
                __pcstackCOMMON 0070                    __pidataBANK1 0003                      ___lltoft@c 0028  
                    _doWDTSleep 1583                   __end_of_sleep 1720                      ___lwtoft@c 0028  
                     ?i1_memset 0070                       ?i1_strlen 0070                         ??_sleep 0028  
                  sprintf@width 004F                     loop@rfSetup 012C                      __pbssBANK1 00E7  
                    __pbssBANK2 0151                      __pbssBANK3 01A0               ??_nrf24l01SPISend 0070  
        i1nrf24l01Service@width 007B         __size_ofi1_nrf24l01Send 001B               ??_nrf24l01GetPipe 0026  
                    __pmaintext 0ADE                         ?___bmul 0020                         ?___ftge 0020  
                       ?___wmul 0020                 __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 0894  
             _nrf24l01SetRXPipe 16B7          ?_nrf24l01InitRegisters 0070                      __pintentry 0004  
             _nrf24l01SetTXPipe 07B6             nrf24l01SPISend@data 0070                         ?_memset 0020  
             ??_nrf24l01Service 0027              ?_nrf24l01SetRXMode 0070                       ?___awtoft 0028  
                     ?___ftpack 0020                       ?___lbtoft 0028              ?_nrf24l01SetRXPipe 0070  
      __end_of_enableInterrupts 152F              ?_nrf24l01SetTXPipe 0070                       ?___lltoft 0028  
           __CFG_RSTOSC$HFINT32 0000                         ?_strcat 00B3                         ?_strcpy 0020  
                       ?_strlen 0020                       ?___lwtoft 0028           __end_of_n_ADDRESS_MUL 1829  
                    ??i1_memset 0074            __size_of_sendMessage 0076             ??_nrf24l01SetRXMode 0023  
      __end_of_nrf24l01SPIStart 1537             ??_nrf24l01SetRXPipe 0023             ??_nrf24l01SetTXPipe 0024  
                    ??i1_strlen 0072                         _SSP1BUF 0211      __size_ofi1_nrf24l01Service 0129  
         _nrf24l01InterfaceInit 163E            nrf24l01Service@width 002B      __end_of_nrf24l01SendPacket 179B  
                 ??_getADCValue 004E           __size_of_nrf24l01Init 0043           __size_of_nrf24l01Send 0020  
     __end_of_nrf24l01SetRXMode 08D2       __end_of_nrf24l01SetRXPipe 16D8       __end_of_nrf24l01SetTXPipe 07FA  
               __size_of___bmul 0012                 __size_of___ftge 003C                         ___ftadd 0F0A  
                   ?_doWDTSleep 0070                         ___ftdiv 0CBB                         ___ftneg 1537  
                       ___lldiv 0958                 __size_of___wmul 001C                         ___ftmul 0D64  
                       ___llmod 08D2                         ___ftsub 0800                         ___fttol 0B76  
                       ___lwmod 179B                      ??___awtoft 002B                      ??___ftpack 0025  
                    ??___lbtoft 002B           __end_of_nrf24l01CELow 151A                 __size_of_memset 001C  
         __end_of_nrf24l01CSLow 1520                      ??___lltoft 002C                         __ptext1 0915  
                       __ptext2 163E                         __ptext3 06A3                         __ptext4 07B6  
                       __ptext5 155C                         __ptext6 16B7                         __ptext7 17C8  
                       __ptext8 179B                         __ptext9 002E                      ??___lwtoft 002B  
               __size_of_strcat 0027                 __size_of_strcpy 001B                 __size_of_strlen 001F  
                  __size_of_ISR 000B                         _counter 0151                         _dpowers 1800  
                       _isdigit 154D                         _romData 00EC                         _sprintf 0258  
                       clrloop0 07FB            end_of_initialization 002A                         ftoa@buf 0155  
                       ftoa@rem 00AA                    _nrf24l01Init 0915                    _nrf24l01Send 1697  
                    _romDataMap 01C1                         memset@c 0020                         memset@n 0022  
                       memset@p 0026                nrf24l01GetPipe@i 002A                 ___lldiv@divisor 0020  
               ___lldiv@counter 002D    __size_ofi1_nrf24l01SetRXMode 003A           i1nrf24l01Send@command 0073  
                       strlen@s 0020             __end_of_getADCValue 0CBB                       _PORTAbits 000C  
                     _PORTCbits 000E                       _TRISAbits 008C                       _TRISCbits 008E  
              nrf24l01Send@data 0020                __CFG_FEXTOSC$OFF 0000             __size_of_doWDTSleep 0017  
                 ??_nrf24l01ISR 007D          ?_nrf24l01InterfaceInit 0070                     ___ftdiv@exp 0049  
                i1_nrf24l01Send 15B5                      main@packet 00C6                nrf24l01Service@i 002C  
    __size_of_nrf24l01SetRXMode 003E      __size_of_nrf24l01SetRXPipe 0021                     ___ftmul@exp 0061  
    __size_of_nrf24l01SetTXPipe 0044                  __end_of___bmul 156E                  __end_of___ftge 0894  
                __end_of___wmul 1622                       i1memset@c 0070                       i1memset@n 0072  
                     i1memset@p 0076                  __end_of_memset 163E                  __end_of_strcat 1747  
                __end_of_strcpy 1606                  __end_of_strlen 1697             start_initialization 0011  
               _nrf24l01SPISend 1540                     __end_of_ISR 000F                      ftoa@status 00A9  
             __size_ofi1_memset 001B       nrf24l01SetRXPipe@enRXAddr 0026                 _nrf24l01GetPipe 17C8  
       __size_of_nrf24l01CEHigh 0003                       i1strlen@s 0070               __size_ofi1_strlen 001E  
       __size_of_nrf24l01CSHigh 0003          __end_ofi1_nrf24l01Send 15D0         __size_of_nrf24l01SPIEnd 0007  
               ___llmod@divisor 002E                 ___llmod@counter 0037                 _nrf24l01Service 0425  
       ??_nrf24l01InitRegisters 0027                __CFG_LPBOREN$OFF 0000                     _getADCValue 0C15  
                      ??___bmul 0021                        ??___ftge 0026             __end_of_nrf24l01ISR 0A03  
                      ??___wmul 0024                     __pdataBANK1 00EC                        ??_memset 0024  
             ?_enableInterrupts 0070                        ??_strcat 0070                        ??_strcpy 0024  
                      ??_strlen 0022               __size_of___awtoft 0022               __size_of___ftpack 0065  
             __size_of___lbtoft 001B              ??_enableInterrupts 0070               __size_of___lltoft 002A  
                     ___latbits 0002               __size_of___lwtoft 0015                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0                   __pcstackBANK2 0120                 doWDTSleep@wdtps 0021  
             ?_nrf24l01SPIStart 0070                    _isdigit$1728 0020              ??_nrf24l01SPIStart 0070  
               ?i1_nrf24l01Send 0071                     sprintf@flag 0048                     sprintf@prec 0051  
                    loop@packet 0130             nrf24l01GetPipe@name 0029             nrf24l01GetPipe@pipe 0028  
                  ??_doWDTSleep 0020                        ?___ftadd 002E                        ?___ftdiv 003B  
                      ?___ftneg 0057                        ?___lldiv 0020                        ?___ftmul 0057  
                      ?___llmod 002E                        ?___ftsub 003B                        ?___fttol 0067  
                      ?___lwmod 0020            __end_of_n_ADDRESS_P0 1851         __end_of_nrf24l01SPISend 154D  
            i1nrf24l01Send@data 0071       nrf24l01InitRegisters@enAA 002D                   ??_sendMessage 00C0  
            _nrf24l01SendPacket 1771         __end_of_nrf24l01GetPipe 1800                        ?_isdigit 0070  
                     _loop$1971 012D                       _loop$1972 0126                       _loop$1973 0129  
           ?_nrf24l01SendPacket 002D                        ?_sprintf 0038             i1_nrf24l01SetRXMode 081E  
            i1nrf24l01Service@i 007C         __end_of_nrf24l01Service 057A                  __size_of_sleep 0026  
            __end_of_doWDTSleep 159A                  ___wmul@product 0024                     _nrf24l01ISR 09AB  
                     clear_ram0 07FA                        _PIE0bits 0090                        _PIR0bits 0010  
                     _sleepLoop 00EB            ??_nrf24l01SendPacket 002F            ?i1_nrf24l01SetRXMode 0070  
                    _ADCON0bits 009D                      _ADCON1bits 009E               ___wmul@multiplier 0020  
                      _WPUAbits 020C                        i1_memset 159A                        _RXPacket 01A0  
                      _TXPacket 00E9                        i1_strlen 165A             __end_of_sendMessage 0ADE  
                _nrf24l01CEHigh 1514         ??_nrf24l01InterfaceInit 0020                  _nrf24l01CSHigh 151A  
                _nrf24l01SPIEnd 1520          __size_of_nrf24l01CELow 0003          __size_of_nrf24l01CSLow 0003  
         ??i1_nrf24l01SetRXMode 0074                __size_of___ftadd 00F6                __size_of___ftdiv 00A9  
              __size_of___ftneg 0009                __size_of___lldiv 0053                __size_of___ftmul 00B4  
              __size_of___llmod 0043                __size_of___ftsub 001E                __size_of___fttol 009F  
              __size_of___lwmod 002D                        ___awtoft 16D8                        ___ftpack 0A03  
                      ___lbtoft 15D0                ?_nrf24l01SPISend 0070                        ___lltoft 1747  
                    _ANSELAbits 018C                        ___lwtoft 156E                      _ANSELCbits 018E  
              ?_nrf24l01GetPipe 0070                      sprintf@val 004A                   _n_ADDRESS_MUL 1828  
                    strcat@from 00B5          __end_of_nrf24l01CEHigh 1517                __size_of_isdigit 000F  
        __end_of_nrf24l01CSHigh 151D                        __ptext10 0A68                        __ptext11 15EB  
                      __ptext20 0E18                        __ptext12 1720                        __ptext21 0258  
                      __ptext13 16FA                        __ptext30 0D64                        __ptext22 154D  
                      __ptext14 1771                        __ptext31 0858                        __ptext23 1606  
                      __ptext15 0425                        __ptext32 0C15                        __ptext24 08D2  
                      __ptext16 1678                        __ptext41 09AB                        __ptext33 1583  
                      __ptext25 0958                        __ptext17 0894                        __ptext50 151A  
                      __ptext42 057A                        __ptext34 0CBB                        __ptext26 1747  
                      __ptext18 1697                        __ptext51 1527                        __ptext43 165A  
                      __ptext35 0F0A                        __ptext27 0B76                        __ptext19 1622  
                      __ptext52 1517                        __ptext44 081E                        __ptext36 16D8  
                      __ptext28 0800                        __ptext53 1514                        __ptext45 15B5  
                      __ptext37 15D0                        __ptext29 1537                        __ptext54 159A  
                      __ptext46 152F                        __ptext38 156E                        __ptext47 151D  
                      __ptext39 0A03                        __ptext48 1540                        __ptext49 1520  
                  _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 1527                ?_nrf24l01Service 0070  
              __size_of_sprintf 01CD                     _OSCCON1bits 0919                      strcpy@from 0022  
                 __size_of_main 0098                   __size_of_ftoa 00F2                   __size_of_loop 022A  
  nrf24l01InitRegisters@channel 0029    nrf24l01InitRegisters@feature 002B                      _RC0PPSbits 0EA0  
  nrf24l01InitRegisters@rfSetup 002C                      _RC1PPSbits 0EA1                    ?_getADCValue 004B  
                    _RC2PPSbits 0EA2  __size_of_nrf24l01InitRegisters 0113   __end_of_nrf24l01InitRegisters 07B6  
                      int$flags 007E    nrf24l01InitRegisters@setupAW 002A                      _ODCONAbits 028C  
                      _statuses 1834                    _SSP1STATbits 0214                        main@pipe 00C5  
    nrf24l01SendPacket@txPacket 002D                   _nrf24l01CELow 1517                     _sendMessage 0A68  
                 _nrf24l01CSLow 151D                      _INTCONbits 000B                 ?_nrf24l01CEHigh 0070  
                    _FVRCONbits 0117                ??i1_nrf24l01Send 0072                 ?_nrf24l01CSHigh 0070  
                __pstringtext10 1860                  __pstringtext11 1865                  __pstringtext12 186A  
                __pstringtext13 186F                  __pstringtext14 1874                  __pstringtext15 1879  
                __pstringtext16 187D                  __pstringtext17 0000                        isdigit@c 0021  
                      memset@p1 0025                 ?_nrf24l01SPIEnd 0070                        intlevel1 0000  
                     sprintf@ap 0049                       sprintf@sp 004E                    _n_ADDRESS_P0 184C  
     __size_of_enableInterrupts 0008                ___lwmod@dividend 0022                ___lldiv@dividend 0024  
             __CFG_CLKOUTEN$OFF 0000     nrf24l01InitRegisters@config 002F       __size_of_nrf24l01SPIStart 0008  
                ?_nrf24l01CELow 0070                   __pstringtext1 1800                   __pstringtext2 1834  
                 __pstringtext3 184C                   __pstringtext4 1828                   __pstringtext5 183F  
                 __pstringtext6 1846                   __pstringtext7 1851                   __pstringtext8 1856  
                 __pstringtext9 185B                  ?_nrf24l01CSLow 0070                        sprintf@c 0053  
                      sprintf@f 0038      nrf24l01InitRegisters@DynPD 002E                        strcat@cp 00B7  
                      strcat@to 00B3                ___lldiv@quotient 0029                 ___lwmod@divisor 0020  
                      strcpy@cp 0024                        strlen@cp 0024                        strcpy@to 0020  
               ___lwmod@counter 0025                      _WDTCONbits 0097                   ?_nrf24l01Init 0070  
                 ?_nrf24l01Send 0020                    ?_nrf24l01ISR 0070  
